char *sub_2161699F8(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;
  uint64_t vars8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }

  return sub_21616B440(a3, v6, v5, a1);
}

char *sub_216169A74(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    v6 = result;
    int v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }

  return sub_21616B548(a3, v6, v5, a1);
}

char *sub_216169AF0(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    v6 = result;
    int v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }

  return sub_21616B650(a3, v6, v5, a1);
}

char *sub_216169B6C(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    v6 = result;
    int v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }

  return sub_21616B758(a3, v6, v5, a1);
}

char *sub_216169BE8(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    v6 = result;
    int v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }

  return sub_21616B860(a3, v6, v5, a1);
}

char *sub_216169C60(uint64_t a1, char *a2, uint64_t a3)
{
  v10 = a2;
  while (1)
  {
    if (sub_21614CD4C(a3, &v10, *(_DWORD *)(a3 + 92))) {
      return v10;
    }
    int v5 = v10 + 1;
    unsigned int v6 = *v10;
    if (*v10 < 0)
    {
      unsigned int v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        int v5 = v10 + 3;
        uint64_t v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0) {
            break;
          }
          ++v5;
          v8 += 7;
          if (!v8) {
            return 0;
          }
        }
      }
      else
      {
        int v5 = v10 + 2;
      }
    }
    v10 = v5;
    if (!v6 || (v6 & 7) == 4) {
      break;
    }
    v10 = (char *)sub_216169D78(v6, a1);
    if (!v10) {
      return 0;
    }
  }
  *(_DWORD *)(a3 + 80) = v6 - 1;
  return v5;
}

unsigned __int8 *sub_216169D4C(unsigned int a1, std::string *a2, char *a3, int32x2_t *a4)
{
  int v5 = a2;
  return sub_216169D78(a1, &v5, a3, a4);
}

unsigned __int8 *sub_216169D78(unint64_t a1, std::string **a2, char *a3, int32x2_t *a4)
{
  unint64_t v4 = a1 >> 3;
  if (!(a1 >> 3)) {
    return 0;
  }
  int v5 = (unsigned __int8 *)a3;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      int v5 = sub_216169ED8(a3, v11);
      if (v5) {
        sub_21616B968(a2, v4, v11[0].__r_.__value_.__r.__words[0]);
      }
      return v5;
    case 1uLL:
      int v5 = (unsigned __int8 *)(a3 + 8);
      sub_21616BA30((std::string *)a2, v4, *(void *)a3);
      return v5;
    case 2uLL:
      uint64_t v8 = (unsigned __int8 *)sub_21616BAEC(a2, v4, a3, (uint64_t)a4);
      goto LABEL_10;
    case 3uLL:
      uint64_t v8 = (unsigned __int8 *)sub_21616BC58(a2, v4, a3, a4);
LABEL_10:
      int v5 = v8;
      break;
    case 4uLL:
      sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 758);
      v7 = sub_21615C18C(v11, "Can't happen");
      sub_21615C2C8((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v11);
      break;
    case 5uLL:
      int v5 = (unsigned __int8 *)(a3 + 4);
      sub_21616BD84((std::string *)a2, v4, *(_DWORD *)a3);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_216169EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216169ED8(char *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1 < 0)
  {
    int v4 = a1[1];
    uint64_t v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      result = (unsigned __int8 *)(a1 + 3);
      uint64_t v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0) {
          break;
        }
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          result = 0;
          uint64_t v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

unsigned __int8 *sub_216169F4C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    result = sub_21616A170(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      result = sub_21616A170(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_21615C18C(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        v15 = sub_21616A170((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_21615C18C(&v18, "CHECK failed: (size) > (0): ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (unsigned __int8 *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_21616A148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21616A170(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    i = sub_216169ED8((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_21616C4D4(a3, v7 + 1);
      *(_DWORD *)(sub_21616C974((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_21616C974((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_21616A220(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    result = sub_21616A444(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      result = sub_21616A444(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_21615C18C(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        v15 = sub_21616A444((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_21615C18C(&v18, "CHECK failed: (size) > (0): ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (unsigned __int8 *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_21616A41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21616A444(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    i = sub_216169ED8((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_21616CB30(a3, v7 + 1);
      *(_DWORD *)(sub_21616CFD0((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_21616CFD0((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_21616A4F4(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    result = sub_21616A718(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      result = sub_21616A718(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_21615C18C(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        v15 = sub_21616A718((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_21615C18C(&v18, "CHECK failed: (size) > (0): ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (unsigned __int8 *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_21616A6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21616A718(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    i = sub_216169ED8((char *)i, &v10);
    if (!i) {
      break;
    }
    uint64_t v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_21616D18C(a3, v7 + 1);
      *(void *)(sub_21616D62C((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_21616D62C((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_21616A7C8(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    result = sub_21616A9EC(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      result = sub_21616A9EC(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_21615C18C(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        v15 = sub_21616A9EC((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_21615C18C(&v18, "CHECK failed: (size) > (0): ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (unsigned __int8 *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_21616A9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21616A9EC(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    i = sub_216169ED8((char *)i, &v10);
    if (!i) {
      break;
    }
    uint64_t v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_21616D7E8(a3, v7 + 1);
      *(void *)(sub_21616DC88((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_21616DC88((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_21616AA9C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    result = sub_21616ACC0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      result = sub_21616ACC0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_21615C18C(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        v15 = sub_21616ACC0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_21615C18C(&v18, "CHECK failed: (size) > (0): ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (unsigned __int8 *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_21616AC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21616ACC0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    i = sub_216169ED8((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = -(v10 & 1) ^ (v10 >> 1);
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_21616C4D4(a3, v7 + 1);
      *(_DWORD *)(sub_21616C974((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_21616C974((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_21616AD7C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    result = sub_21616AFA0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      result = sub_21616AFA0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_21615C18C(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        v15 = sub_21616AFA0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_21615C18C(&v18, "CHECK failed: (size) > (0): ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (unsigned __int8 *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_21616AF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21616AFA0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    unint64_t v10 = 0;
    i = sub_216169ED8((char *)i, &v10);
    if (!i) {
      break;
    }
    unint64_t v6 = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_21616D18C(a3, v7 + 1);
      *(void *)(sub_21616D62C((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_21616D62C((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_21616B05C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    result = sub_21616B280(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      result = sub_21616B280(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_21615C18C(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        v15 = sub_21616B280((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_21615C174((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_21615C18C(&v18, "CHECK failed: (size) > (0): ");
        sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (unsigned __int8 *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_21616B258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21616B280(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    i = sub_216169ED8((char *)i, &v10);
    if (!i) {
      break;
    }
    BOOL v6 = v10 != 0;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_21616BE80(a3, v7 + 1);
      *(unsigned char *)(sub_21616C31C((uint64_t)a3) + v7) = v6;
    }
    else
    {
      *(unsigned char *)(sub_21616C31C((uint64_t)a3) + v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

char *sub_21616B338(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_21616CB30(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_21616CD04((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_21616CB30(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_21616CD04((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (char *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_21616B440(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_21616C4D4(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_21616C6A8((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_21616C4D4(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_21616C6A8((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (char *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_21616B548(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_21616D7E8(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_21616D9BC((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_21616D7E8(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_21616D9BC((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (char *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_21616B650(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_21616D18C(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_21616D360((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_21616D18C(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_21616D360((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (char *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_21616B758(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_21616DE44(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_21616E018((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_21616DE44(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_21616E018((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (char *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_21616B860(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_21616E4A0(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_21616E674((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_21616E4A0(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_21616E674((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      result = (char *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

void sub_21616B968(std::string **a1, int a2, unint64_t a3)
{
  v3 = *a1;
  if (*a1)
  {
    unint64_t v6 = (8 * a2);
    if (v6 < 0x80)
    {
      LOBYTE(v7) = 8 * a2;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    int v9 = *a1;
    if (a3 < 0x80)
    {
      LOBYTE(v10) = a3;
    }
    else
    {
      do
      {
        std::string::push_back(v9, a3 | 0x80);
        unint64_t v10 = a3 >> 7;
        unint64_t v11 = a3 >> 14;
        a3 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v9, v10);
  }
}

std::string *sub_21616BA30(std::string *result, int a2, uint64_t a3)
{
  v9[1] = *MEMORY[0x263EF8340];
  v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    int v5 = (std::string **)result;
    unint64_t v6 = (8 * a2) | 1u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 1;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9[0] = a3;
    return std::string::append(*v5, (const std::string::value_type *)v9, 8uLL);
  }
  return result;
}

const std::string::value_type *sub_21616BAEC(std::string **a1, int a2, char *a3, uint64_t a4)
{
  int v7 = *a3;
  if (*a3 < 0)
  {
    result = (const std::string::value_type *)sub_216169820((uint64_t)a3, *a3);
    if (!result) {
      return result;
    }
    unint64_t v8 = (std::string::value_type *)result;
    int v7 = v10;
  }
  else
  {
    unint64_t v8 = a3 + 1;
  }
  unint64_t v11 = *a1;
  if (*a1)
  {
    unint64_t v12 = (8 * a2) | 2u;
    if (v12 < 0x80)
    {
      LOBYTE(v13) = v12;
    }
    else
    {
      do
      {
        std::string::push_back(v11, v12 | 0x80);
        unint64_t v13 = v12 >> 7;
        unint64_t v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
    }
    std::string::push_back(v11, v13);
    unint64_t v15 = v7;
    BOOL v16 = *a1;
    if (v7 < 0x80)
    {
      LOBYTE(v17) = v7;
    }
    else
    {
      do
      {
        std::string::push_back(v16, v15 | 0x80);
        unint64_t v17 = v15 >> 7;
        unint64_t v18 = v15 >> 14;
        v15 >>= 7;
      }
      while (v18);
    }
    std::string::push_back(v16, v17);
    __int16 v19 = *a1;
    return sub_21616BE14(a4, v8, v7, v19);
  }
  else if (*(void *)(a4 + 8) - (void)v8 + 16 >= v7)
  {
    return &v8[v7];
  }
  else
  {
    return (const std::string::value_type *)sub_2161691BC(a4, (int)v8, v7);
  }
}

char *sub_21616BC58(std::string **a1, int a2, char *a3, int32x2_t *a4)
{
  int v7 = *a1;
  int v8 = 8 * a2;
  if (*a1)
  {
    unint64_t v9 = v8 | 3u;
    if (v9 < 0x80)
    {
      LOBYTE(v10) = v8 | 3;
    }
    else
    {
      do
      {
        std::string::push_back(v7, v9 | 0x80);
        unint64_t v10 = v9 >> 7;
        unint64_t v11 = v9 >> 14;
        v9 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v7, v10);
  }
  int v12 = a4[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a4[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  ++a4[11].i32[1];
  unint64_t v14 = sub_216169C60((uint64_t)a1, a3, (uint64_t)a4);
  a4[11] = vadd_s32(a4[11], (int32x2_t)0xFFFFFFFF00000001);
  __int32 v15 = a4[10].i32[0];
  a4[10].i32[0] = 0;
  if (v15 != (v8 | 3) || v14 == 0) {
    return 0;
  }
  unint64_t v17 = v14;
  unint64_t v18 = *a1;
  if (v18)
  {
    unint64_t v19 = v8 | 4u;
    if (v19 < 0x80)
    {
      LOBYTE(v20) = v8 | 4;
    }
    else
    {
      do
      {
        std::string::push_back(v18, v19 | 0x80);
        unint64_t v20 = v19 >> 7;
        unint64_t v21 = v19 >> 14;
        v19 >>= 7;
      }
      while (v21);
    }
    std::string::push_back(v18, v20);
  }
  return v17;
}

std::string *sub_21616BD84(std::string *result, int a2, int a3)
{
  v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    int v5 = (std::string **)result;
    unint64_t v6 = (8 * a2) | 5u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 5;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    *(_DWORD *)__s = a3;
    return std::string::append(*v5, __s, 4uLL);
  }
  return result;
}

const std::string::value_type *sub_21616BE14(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  if (*(void *)(a1 + 8) - (void)__s + 16 >= a3)
  {
    uint64_t v6 = a3;
    std::string::append(this, __s, a3);
    return &__s[v6];
  }
  else
  {
    return sub_21616942C(a1, __s, a3, this);
  }
}

void sub_21616BE80(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_21616C31C((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_21615C18C(v15, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_21615C2C8((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v15);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_21616C31C((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  if (v6)
  {
    uint64_t v11 = (v9 + 15) & 0x1FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x263F8C238], v11);
    }
    int v12 = (void *)sub_21615AAE0(v6, v11);
  }
  else
  {
    int v12 = operator new(v9 + 8);
  }
  *int v12 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v12 + 1;
  sub_21616C31C((uint64_t)a1);
  if (*a1 >= 1)
  {
    BOOL v13 = (void *)sub_21616C31C((uint64_t)a1);
    memcpy(v13, v5 + 1, *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_21616C038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616C050(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_21615C18C(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_21615C384(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_21615C18C(v6, ", ");
    unint64_t v8 = sub_21615C384(v7, *(_DWORD *)a1);
    sub_21615C2C8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_21616C0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616C110(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616C31C((uint64_t)a1) + a2;
}

void sub_21616C1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616C1F0(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616C31C((uint64_t)a1) + a2;
}

void sub_21616C2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616C2D0(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_21616C31C(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_21616C31C(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_21615C174((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_21615C18C(v5, "CHECK failed: (total_size_) > (0): ");
    sub_21615C2C8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_21616C390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_21616C3A8(int *result, int *a2)
{
  v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_21615C18C(v10, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_21615C2D0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_21616BE80(v3, *v3 + *a2);
    sub_21616C050((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_21616C110(v3, v5);
    if (*a2 <= 0)
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_21615C18C(v10, "CHECK failed: (index) < (current_size_): ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_21616C31C((uint64_t)a2);
    return (int *)memcpy(v6, v8, *a2);
  }
  return result;
}

void sub_21616C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21616C4D4(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_21616C974((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_21615C174((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_21615C18C(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_21615C2C8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_21616C974((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x263F8C238], v12);
    }
    BOOL v13 = (void *)sub_21615AAE0(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_21616C974((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_21616C974((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_21616C690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616C6A8(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_21615C18C(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_21615C384(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_21615C18C(v6, ", ");
    unint64_t v8 = sub_21615C384(v7, *(_DWORD *)a1);
    sub_21615C2C8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_21616C750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616C768(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616C974((uint64_t)a1) + 4 * a2;
}

void sub_21616C828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616C848(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616C974((uint64_t)a1) + 4 * a2;
}

void sub_21616C908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616C928(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_21616C974(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_21616C974(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_21615C174((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_21615C18C(v5, "CHECK failed: (total_size_) > (0): ");
    sub_21615C2C8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_21616C9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_21616CA00(int *result, int *a2)
{
  v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_21615C18C(v10, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_21615C2D0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_21616C4D4(v3, *v3 + *a2);
    sub_21616C6A8((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_21616C768(v3, v5);
    if (*a2 <= 0)
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_21615C18C(v10, "CHECK failed: (index) < (current_size_): ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_21616C974((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_21616CB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21616CB30(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_21616CFD0((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_21615C174((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_21615C18C(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_21615C2C8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_21616CFD0((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x263F8C238], v12);
    }
    BOOL v13 = (void *)sub_21615AAE0(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_21616CFD0((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_21616CFD0((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_21616CCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616CD04(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_21615C18C(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_21615C384(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_21615C18C(v6, ", ");
    unint64_t v8 = sub_21615C384(v7, *(_DWORD *)a1);
    sub_21615C2C8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_21616CDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616CDC4(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616CFD0((uint64_t)a1) + 4 * a2;
}

void sub_21616CE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616CEA4(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616CFD0((uint64_t)a1) + 4 * a2;
}

void sub_21616CF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616CF84(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_21616CFD0(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_21616CFD0(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_21615C174((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_21615C18C(v5, "CHECK failed: (total_size_) > (0): ");
    sub_21615C2C8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_21616D044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_21616D05C(int *result, int *a2)
{
  v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_21615C18C(v10, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_21615C2D0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_21616CB30(v3, *v3 + *a2);
    sub_21616CD04((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_21616CDC4(v3, v5);
    if (*a2 <= 0)
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_21615C18C(v10, "CHECK failed: (index) < (current_size_): ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_21616CFD0((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_21616D16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21616D18C(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_21616D62C((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_21615C174((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_21615C18C(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_21615C2C8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_21616D62C((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x263F8C238], v12);
    }
    BOOL v13 = (void *)sub_21615AAE0(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_21616D62C((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_21616D62C((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_21616D348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616D360(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_21615C18C(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_21615C384(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_21615C18C(v6, ", ");
    unint64_t v8 = sub_21615C384(v7, *(_DWORD *)a1);
    sub_21615C2C8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_21616D408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616D420(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616D62C((uint64_t)a1) + 8 * a2;
}

void sub_21616D4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616D500(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616D62C((uint64_t)a1) + 8 * a2;
}

void sub_21616D5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616D5E0(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_21616D62C(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_21616D62C(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_21615C174((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_21615C18C(v5, "CHECK failed: (total_size_) > (0): ");
    sub_21615C2C8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_21616D6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_21616D6B8(int *result, int *a2)
{
  v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_21615C18C(v10, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_21615C2D0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_21616D18C(v3, *v3 + *a2);
    sub_21616D360((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_21616D420(v3, v5);
    if (*a2 <= 0)
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_21615C18C(v10, "CHECK failed: (index) < (current_size_): ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_21616D62C((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_21616D7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21616D7E8(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_21616DC88((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_21615C174((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_21615C18C(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_21615C2C8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_21616DC88((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x263F8C238], v12);
    }
    BOOL v13 = (void *)sub_21615AAE0(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_21616DC88((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_21616DC88((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_21616D9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616D9BC(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_21615C18C(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_21615C384(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_21615C18C(v6, ", ");
    unint64_t v8 = sub_21615C384(v7, *(_DWORD *)a1);
    sub_21615C2C8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_21616DA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616DA7C(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616DC88((uint64_t)a1) + 8 * a2;
}

void sub_21616DB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616DB5C(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616DC88((uint64_t)a1) + 8 * a2;
}

void sub_21616DC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616DC3C(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_21616DC88(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_21616DC88(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_21615C174((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_21615C18C(v5, "CHECK failed: (total_size_) > (0): ");
    sub_21615C2C8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_21616DCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_21616DD14(int *result, int *a2)
{
  v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_21615C18C(v10, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_21615C2D0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_21616D7E8(v3, *v3 + *a2);
    sub_21616D9BC((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_21616DA7C(v3, v5);
    if (*a2 <= 0)
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_21615C18C(v10, "CHECK failed: (index) < (current_size_): ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_21616DC88((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_21616DE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21616DE44(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_21616E2E4((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_21615C174((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_21615C18C(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_21615C2C8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_21616E2E4((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x263F8C238], v12);
    }
    BOOL v13 = (void *)sub_21615AAE0(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_21616E2E4((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_21616E2E4((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_21616E000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616E018(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_21615C18C(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_21615C384(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_21615C18C(v6, ", ");
    unint64_t v8 = sub_21615C384(v7, *(_DWORD *)a1);
    sub_21615C2C8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_21616E0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616E0D8(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616E2E4((uint64_t)a1) + 4 * a2;
}

void sub_21616E198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616E1B8(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616E2E4((uint64_t)a1) + 4 * a2;
}

void sub_21616E278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616E298(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_21616E2E4(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_21616E2E4(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_21615C174((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_21615C18C(v5, "CHECK failed: (total_size_) > (0): ");
    sub_21615C2C8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_21616E358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_21616E370(int *result, int *a2)
{
  v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_21615C18C(v10, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_21615C2D0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_21616DE44(v3, *v3 + *a2);
    sub_21616E018((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_21616E0D8(v3, v5);
    if (*a2 <= 0)
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_21615C18C(v10, "CHECK failed: (index) < (current_size_): ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_21616E2E4((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_21616E480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21616E4A0(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_21616E940((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_21615C174((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_21615C18C(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_21615C2C8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_21616E940((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x263F8C238], v12);
    }
    BOOL v13 = (void *)sub_21615AAE0(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_21616E940((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_21616E940((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_21616E65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616E674(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_21615C18C(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_21615C384(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_21615C18C(v6, ", ");
    unint64_t v8 = sub_21615C384(v7, *(_DWORD *)a1);
    sub_21615C2C8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_21616E71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616E734(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616E940((uint64_t)a1) + 8 * a2;
}

void sub_21616E7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616E814(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return sub_21616E940((uint64_t)a1) + 8 * a2;
}

void sub_21616E8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616E8F4(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_21616E940(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_21616E940(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_21615C174((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_21615C18C(v5, "CHECK failed: (total_size_) > (0): ");
    sub_21615C2C8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_21616E9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_21616E9CC(int *result, int *a2)
{
  v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_21615C18C(v10, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_21615C2D0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_21616E4A0(v3, *v3 + *a2);
    sub_21616E674((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_21616E734(v3, v5);
    if (*a2 <= 0)
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_21615C18C(v10, "CHECK failed: (index) < (current_size_): ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_21616E940((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_21616EADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21616EAFC(uint64_t *a1)
{
  sub_21616EB38(a1);

  return sub_21614D184(a1);
}

void sub_21616EB38(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        uint64_t v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          MEMORY[0x2166CA800](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_21616EBCC(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 8);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0))) {
    return sub_21616EBE0((uint64_t *)result, v4);
  }
  return result;
}

uint64_t sub_21616EBE0(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  int v3 = *((_DWORD *)a1 + 3);
  int v4 = v2 + a2;
  uint64_t v5 = (unsigned int *)a1[2];
  if (v3 < v2 + a2)
  {
    uint64_t v7 = *a1;
    int v8 = 2 * v3;
    if (2 * v3 <= v4) {
      int v8 = v4;
    }
    if (v8 <= 4) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = v8;
    }
    uint64_t v10 = 8 * v9;
    if (v7)
    {
      uint64_t v11 = (v10 + 15) & 0x7FFFFFFF8;
      if (*(unsigned char *)(v7 + 24)) {
        (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v7 + 32) + 32) + 40))(*(void *)(*(void *)(v7 + 32) + 32), MEMORY[0x263F8C238], v11);
      }
      uint64_t v12 = (unsigned int *)sub_21615AAE0(v7, v11);
    }
    else
    {
      uint64_t v12 = (unsigned int *)operator new(v10 + 8);
    }
    a1[2] = (uint64_t)v12;
    *((_DWORD *)a1 + 3) = v9;
    if (v5 && (uint64_t v13 = *v5, (int)v13 >= 1))
    {
      memcpy(v12 + 2, v5 + 2, 8 * v13);
      uint64_t v12 = (unsigned int *)a1[2];
      *uint64_t v12 = *v5;
      if (!v7) {
        goto LABEL_17;
      }
    }
    else
    {
      *uint64_t v12 = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        uint64_t v12 = (unsigned int *)a1[2];
      }
    }
    int v2 = *((_DWORD *)a1 + 2);
    uint64_t v5 = v12;
  }
  return (uint64_t)&v5[2 * v2 + 2];
}

uint64_t **sub_21616ED0C(uint64_t **a1, long long *a2)
{
  int v4 = *a1;
  unint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    v20[4] = v7;
    if (v15) {
      BOOL v16 = (char *)sub_216129BFC(v7, v15);
    }
    else {
      BOOL v16 = 0;
    }
    unint64_t v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[24 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    v20[2] = v17 + 24;
    sub_21613FBD0(v4, v20);
    uint64_t v11 = v4[1];
    sub_21613FD68((uint64_t)v20);
  }
  else
  {
    long long v10 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v11 = v5 + 24;
    v4[1] = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void sub_21616EE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613FD68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616EE54(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  *(void *)a1 = &unk_26C6C3E70;
  *(void *)(a1 + 16) = &unk_26C6C42C8;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_26C6C42C8;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 88);
  sub_2161055D0((void *)(a1 + 88));
  sub_21616EF4C(a1, a2, a3, &v8);
  sub_216159F94(v6, &v8);
  sub_216159D74(&v8);
  return a1;
}

void sub_21616EF28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216159D74((uint64_t *)va);
  sub_216159D74(v2);
  _Unwind_Resume(a1);
}

void *sub_21616EF4C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v13 = a2;
  unint64_t v14 = a3;
  int v12 = 0;
  uint64_t result = sub_216126298(a2, a3, &v12, a4);
  if (!*a4)
  {
    sub_216159D74(a4);
    uint64_t result = sub_216158150(&v13, 4uLL, a4);
    if (!*a4)
    {
      sub_216159D74(a4);
      *(_DWORD *)(a1 + 8) = v12;
      int v11 = 0;
      uint64_t result = sub_216126298(v13, v14, &v11, a4);
      if (!*a4)
      {
        sub_216159D74(a4);
        uint64_t result = sub_216158150(&v13, 4uLL, a4);
        if (!*a4)
        {
          sub_216159D74(a4);
          *(_DWORD *)(a1 + 24) = v11;
          int v10 = 0;
          uint64_t result = sub_216126298(v13, v14, &v10, a4);
          if (!*a4)
          {
            sub_216159D74(a4);
            uint64_t result = sub_216158150(&v13, 4uLL, a4);
            if (!*a4)
            {
              sub_216159D74(a4);
              int v7 = v10;
              *(_DWORD *)(a1 + 48) = 0;
              *(_DWORD *)(a1 + 40) = v7;
              uint64_t result = sub_21612609C(v13, v14, (_DWORD *)(a1 + 48), a4);
              if (!*a4)
              {
                sub_216159D74(a4);
                uint64_t result = sub_216158150(&v13, 4uLL, a4);
                if (!*a4)
                {
                  sub_216159D74(a4);
                  *(void *)(a1 + 56) = v13;
                  unint64_t v8 = sub_2161580C4(*(int *)(a1 + 48), 4uLL);
                  uint64_t result = sub_216158150(&v13, v8, a4);
                  if (!*a4)
                  {
                    sub_216159D74(a4);
                    *(void *)(a1 + 64) = v13;
                    uint64_t result = sub_216158150(&v13, 4 * *(int *)(a1 + 48), a4);
                    if (!*a4)
                    {
                      sub_216159D74(a4);
                      *(void *)(a1 + 72) = v13;
                      uint64_t result = sub_216158150(&v13, 4 * *(int *)(a1 + 48) + 20, a4);
                      if (!*a4)
                      {
                        unint64_t v9 = sub_216159D74(a4);
                        *(void *)(a1 + 80) = v13;
                        return sub_2161055D0(v9);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_21616F14C()
{
}

uint64_t sub_21616F160(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_21616F16C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_21616F178(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t sub_21616F184(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 3) & 1;
}

void *sub_21616F190(void *a1)
{
  *a1 = &unk_26C6C3E70;
  sub_216159D74(a1 + 11);
  return a1;
}

void sub_21616F1D4(void *a1)
{
  *a1 = &unk_26C6C3E70;
  sub_216159D74(a1 + 11);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21616F238(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

const char *sub_21616F240(uint64_t a1)
{
  v1 = (const char *)(*(void *)(a1 + 80) + **(unsigned int **)(a1 + 72));
  strlen(v1);
  return v1;
}

const char *sub_21616F278(uint64_t a1)
{
  v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 4));
  strlen(v1);
  return v1;
}

const char *sub_21616F2B0(uint64_t a1)
{
  v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 8));
  strlen(v1);
  return v1;
}

const char *sub_21616F2E8(uint64_t a1)
{
  v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 12));
  strlen(v1);
  return v1;
}

const char *sub_21616F320(uint64_t a1)
{
  v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 16));
  strlen(v1);
  return v1;
}

uint64_t sub_21616F358(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_21616F364(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_21616F370(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 30;
}

const char *sub_21616F37C(uint64_t a1, int a2)
{
  int v2 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 4 * (a2 + 5)));
  strlen(v2);
  return v2;
}

float sub_21616F3B8(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(a1 + 64) + 4 * a2);
}

BOOL sub_21616F3C4(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 1;
}

BOOL sub_21616F3D8(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 2;
}

BOOL sub_21616F3EC(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 3;
}

BOOL sub_21616F400(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 4;
}

BOOL sub_21616F414(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 5;
}

BOOL sub_21616F428(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 6;
}

uint64_t sub_21616F43C(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_21616F444(uint64_t a1)
{
  return a1 + 32;
}

BOOL sub_21616F44C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(void *)(a1 + 2080) || (*(unsigned char *)(a1 + 2064) & 1) != 0) {
    return 0;
  }
  int v5 = 0;
  int v22 = 0;
  int v6 = a3 - 1;
  if ((a3 - 1) <= 0x3FE)
  {
    int v7 = a4;
    if (a4)
    {
      uint64_t v9 = 0;
      int v10 = (int *)a1;
      while (1)
      {
        uint64_t v11 = *(void *)&v10[2 * *(unsigned __int8 *)(a2 + v9) + 1];
        if ((v11 & 3) != 1) {
          break;
        }
        int v10 = (int *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (a3 == ++v9)
        {
          int v12 = *v10;
          int *v10 = a4;
          if (!v12) {
            goto LABEL_17;
          }
LABEL_18:
          int v5 = 1;
          return v5 != 0;
        }
      }
      if ((v11 & 3) != 2)
      {
        unint64_t v17 = (unsigned __int8 *)(a2 + v9);
        long long v18 = (const void *)(a2 + v9 + 1);
        unsigned int v19 = v6 - v9;
        size_t v20 = (v6 - v9);
        unint64_t v21 = (unint64_t)malloc_type_calloc(1uLL, v20 + 15, 0x64AF1970uLL);
        memcpy((void *)(v21 + 14), v18, v20);
        *(unsigned char *)(v21 + 14 + v19) = 0;
        *(_WORD *)(v21 + 12) = v19;
        *(_DWORD *)(v21 + 8) = v7;
        *(void *)unint64_t v21 = 0;
        *(void *)&v10[2 * *v17 + 1] = v21 | 2;
        goto LABEL_17;
      }
      v23 = (unsigned __int16 *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      unsigned int v14 = sub_2161723A0(a1, &v23, a2, a3, (int)v9 + 1, a4, &v22);
      unint64_t v15 = (unint64_t)v23;
      if (v14 >= *(_DWORD *)(a1 + 2088))
      {
        unint64_t v15 = (unint64_t)sub_2161725A8(a1, v23, &v22);
        uint64_t v16 = 1;
      }
      else
      {
        uint64_t v16 = 2;
      }
      int v5 = v22;
      *(void *)&v10[2 * *(unsigned __int8 *)(a2 + v9) + 1] = v16 | v15;
      if (v5 == 2)
      {
LABEL_17:
        ++*(_DWORD *)(a1 + 2060);
        goto LABEL_18;
      }
    }
  }
  return v5 != 0;
}

uint64_t sub_21616F5FC(uint64_t a1)
{
  if (a1) {
    return a1 + 20;
  }
  else {
    return 0;
  }
}

uint64_t sub_21616F60C(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

uint64_t sub_21616F618(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

BOOL sub_21616F624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  v17[4] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 2080) || (*(unsigned char *)(a1 + 2064) & 1) == 0) {
    return 0;
  }
  BOOL result = 0;
  int v16 = 0;
  if ((a3 - 1) <= 0x3FE && a4)
  {
    int v15 = 0;
    sub_2161754C0((uint64_t)v17, a6);
    sub_21616F9BC(a1, a1, a2, a3, 0, a4, (float *)&v15, &v16, a7, a5, (uint64_t)v17);
    sub_2161753B8(v17);
    int v14 = v16;
    if (v16 == 2) {
      ++*(_DWORD *)(a1 + 2060);
    }
    return v14 != 0;
  }
  return result;
}

void sub_21616F73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2161753B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_21616F758(int a1, int a2)
{
  int v4 = (char *)malloc_type_calloc(1uLL, 0x838uLL, 0x105004014637929uLL);
  if (v4)
  {
    double result = 0.0;
    *(_OWORD *)(v4 + 2060) = 0u;
    *((_DWORD *)v4 + 519) = 1;
    *((void *)v4 + 260) = 0;
    *(void *)(v4 + 2092) = 0x200000000;
    *((_DWORD *)v4 + 516) = a2;
    *((_DWORD *)v4 + 522) = a1;
  }
  return result;
}

void sub_21616F7D0(char *a1)
{
  if (a1)
  {
    int v2 = *((_DWORD *)a1 + 519) - 1;
    *((_DWORD *)a1 + 519) = v2;
    if (!v2)
    {
      int v3 = (void *)*((void *)a1 + 260);
      if (v3)
      {
        if (*((_DWORD *)a1 + 523)) {
          munmap(v3, *(void *)(a1 + 2068));
        }
      }
      else if (a1[2064])
      {
        sub_2161722A0((uint64_t)a1);
      }
      else
      {
        sub_216172320((uint64_t)a1);
      }
      free(a1);
    }
  }
}

void sub_21616F860(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v18[4] = *MEMORY[0x263EF8340];
  if (a6 < 0)
  {
    unint64_t v15 = 0xFFFFFFFF00000003;
    int v16 = 0;
    uint64_t v17 = a4;
    sub_216176060((uint64_t)v18, a5);
    sub_21617072C(a1, a2, a3, 0, (uint64_t)&v15);
    sub_21617543C(v18);
  }
  else
  {
    uint64_t v11 = sub_21617097C((uint64_t)a1, (unsigned __int8 *)a2, a3);
    if (v11)
    {
      int v12 = v11;
      unint64_t v13 = operator new(0x20uLL);
      void *v13 = &unk_26C6C7E08;
      v13[1] = a2;
      *((_DWORD *)v13 + 4) = a3;
      v13[3] = a5;
      v14[3] = v13;
      sub_2161709F0(v12, 0, (uint64_t)v14, a6);
      sub_216176310(v14);
      free(v12);
    }
  }
}

void sub_21616F990(_Unwind_Exception *a1)
{
  sub_21617543C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21616F9BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, float *a7, int *a8, float a9, uint64_t a10, uint64_t a11)
{
  float v13 = a9;
  v32[4] = *MEMORY[0x263EF8340];
  if (a5 >= a4)
  {
    *a8 = 2;
    if (*(_DWORD *)(a2 + 8))
    {
      *a8 = 1;
      if (*(void *)(a11 + 24))
      {
        double result = sub_216172BAC(a11, a10, *(float *)(a2 + 4), a9);
        float v13 = v21;
      }
    }
    *(float *)(a2 + 4) = v13;
    *(_DWORD *)(a2 + 8) = a6;
    *a7 = v13;
  }
  else
  {
    uint64_t v19 = result;
    v29 = (unsigned __int8 *)(a3 + a5);
    uint64_t v20 = *(void *)(a2 + 8 * *v29 + 12);
    if ((v20 & 3) == 2)
    {
      v30 = (unsigned __int16 *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
      sub_2161754C0((uint64_t)v31, a11);
      unsigned int v22 = sub_216172754(v19, (uint64_t **)&v30, a3, a4, a5 + 1, a6, a7, a8, v13, a10, (uint64_t)v31);
      double result = (uint64_t)sub_2161753B8(v31);
      unint64_t v23 = (unint64_t)v30;
      if (v22 >= *(_DWORD *)(v19 + 2088))
      {
        double result = (uint64_t)sub_216172980(v19, v30, a7, a8);
        unint64_t v23 = result;
        uint64_t v24 = 1;
      }
      else
      {
        uint64_t v24 = 2;
      }
      uint64_t v28 = v24 | v23;
      v25 = v29;
    }
    else
    {
      if ((v20 & 3) == 1)
      {
        sub_2161754C0((uint64_t)v32, a11);
        sub_21616F9BC(v19, v20 & 0xFFFFFFFFFFFFFFFCLL, a3, a4, a5 + 1, a6, a7, a8, v13, a10, v32);
        double result = (uint64_t)sub_2161753B8(v32);
        goto LABEL_15;
      }
      *a7 = a9;
      v25 = (unsigned __int8 *)(a3 + a5);
      size_t v26 = ~a5 + a4;
      unint64_t v27 = (unint64_t)malloc_type_calloc(1uLL, v26 + 23, 0x35949B46uLL);
      double result = (uint64_t)memcpy((void *)(v27 + 22), v29 + 1, v26);
      *(unsigned char *)(v27 + 22 + v26) = 0;
      *(_WORD *)(v27 + 20) = v26;
      *(_DWORD *)(v27 + 16) = a6;
      *(float *)(v27 + 8) = v13;
      *(float *)(v27 + 12) = v13;
      *(void *)unint64_t v27 = 0;
      uint64_t v28 = v27 | 2;
      *a8 = 2;
    }
    *(void *)(a2 + 8 * *v25 + 12) = v28;
  }
LABEL_15:
  if (*a7 > *(float *)a2) {
    *(float *)a2 = *a7;
  }
  return result;
}

void sub_21616FC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2161753B8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_21616FC48(_DWORD *a1, char *a2, int a3)
{
  uint64_t result = 0;
  uint64_t v117 = *MEMORY[0x263EF8340];
  if (!a1) {
    return result;
  }
  int v5 = a2;
  if (!a2 || !a3) {
    return result;
  }
  if ((a1[516] & 1) == 0)
  {
    int v7 = operator new(8uLL);
    uint64_t v8 = 0;
    void *v7 = a1;
    uint64_t v9 = (char *)(v7 + 1);
    v103 = (char *)(v7 + 1);
    __p = v7;
    v101 = (char *)(v7 + 1);
    int v10 = a1;
    while (1)
    {
      uint64_t v11 = &v10[2 * v5[v8]];
      uint64_t v14 = *(void *)(v11 + 1);
      float v13 = (uint64_t *)(v11 + 1);
      uint64_t v12 = v14;
      uint64_t v15 = v14 & 3;
      if ((v14 & 3) == 0) {
        goto LABEL_62;
      }
      if (v15 == 2) {
        break;
      }
      int v10 = (_DWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9 >= v103)
      {
        uint64_t v16 = (v9 - (char *)__p) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          sub_21610CB04();
        }
        unint64_t v17 = (v103 - (char *)__p) >> 2;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        if ((unint64_t)(v103 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          uint64_t v19 = (char *)sub_2160FFAA8((uint64_t)&v103, v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v19[8 * v16];
        *(void *)uint64_t v20 = v10;
        uint64_t v9 = v20 + 8;
        float v21 = v101;
        if (v101 != (char *)__p)
        {
          do
          {
            uint64_t v22 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v20 - 1) = v22;
            v20 -= 8;
          }
          while (v21 != (char *)__p);
          float v21 = (char *)__p;
        }
        __p = (unint64_t *)v20;
        v103 = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)uint64_t v9 = v10;
        v9 += 8;
      }
      v101 = v9;
      if (++v8 == a3)
      {
        if (!*v10) {
          goto LABEL_62;
        }
        _DWORD *v10 = 0;
LABEL_70:
        if ((unint64_t)(v101 - (char *)__p) < 0x10) {
          goto LABEL_131;
        }
        uint64_t v58 = (v101 - (char *)__p) >> 3;
        unsigned int v107 = 0;
        uint64_t v59 = v58 - 1;
        if (v58 == 1) {
          goto LABEL_131;
        }
        LOBYTE(v60) = 0;
        unint64_t v61 = a1[522];
        while (1)
        {
          v62 = sub_216175C98((uint64_t)a1, __p[v59]);
          unsigned int v107 = 0;
          v114 = &unk_26C6C7EB8;
          v115 = &v107;
          v116 = &v114;
          sub_2161709F0(v62, 0, (uint64_t)&v114, -1);
          sub_216176310(&v114);
          if (v62) {
            free(v62);
          }
          if (v107 >= v61) {
            break;
          }
          uint64_t v60 = 1;
          if (!--v59) {
            goto LABEL_89;
          }
        }
        if ((v60 & 1) == 0) {
          goto LABEL_131;
        }
        uint64_t v60 = v59 + 1;
LABEL_89:
        uint64_t v104 = 0;
        uint64_t v105 = 0;
        uint64_t v106 = 0;
        sub_2161755F4(&v104, v61);
        unint64_t v68 = __p[v60];
        v69 = sub_216175C98((uint64_t)a1, v68);
        v111 = &unk_26C6C7E60;
        v112 = &v104;
        v113 = &v111;
        sub_2161709F0(v69, 0, (uint64_t)&v111, -1);
        sub_216176310(&v111);
        if (v61 <= (v105 - v104) >> 5) {
          __assert_rtn("reverseBurst", "BurstTrie.cpp", 965, "items.size() < sizeThreshold");
        }
        if (v69) {
          free(v69);
        }
        sub_216172320(v68);
        a1[515] -= (unint64_t)(v105 - v104) >> 5;
        *(void *)(__p[v59] + 8 * v5[v59] + 4) = 0;
        if ((a3 + 1) < (unint64_t)((v101 - (char *)__p) >> 3)) {
          __assert_rtn("reverseBurst", "BurstTrie.cpp", 974, "levels.size() <= keyLen + 1");
        }
        v70 = sub_216171C68();
        uint64_t v71 = (uint64_t)v70;
        if (v60)
        {
          v72 = v70;
          uint64_t v73 = v60;
          do
          {
            char v74 = *v5++;
            *v72++ = v74;
            --v73;
          }
          while (v73);
        }
        uint64_t v75 = v104;
        uint64_t v76 = v105;
        if (v104 != v105)
        {
          int v77 = a1[516];
          do
          {
            if (*(char *)(v75 + 23) < 0)
            {
              v79 = *(const void **)v75;
              size_t v78 = *(void *)(v75 + 8);
            }
            else
            {
              size_t v78 = *(unsigned __int8 *)(v75 + 23);
              v79 = (const void *)v75;
            }
            uint64_t v80 = *(unsigned int *)(v75 + 24);
            float v81 = *(float *)(v75 + 28);
            memcpy((void *)(v71 + v60), v79, v78);
            if (*(char *)(v75 + 23) < 0) {
              uint64_t v82 = *(void *)(v75 + 8);
            }
            else {
              LODWORD(v82) = *(unsigned __int8 *)(v75 + 23);
            }
            uint64_t v83 = (v82 + v60);
            if (v77)
            {
              uint64_t v110 = 0;
              sub_21616F624((uint64_t)a1, v71, v83, v80, 0, (uint64_t)v109, v81);
              sub_2161753B8(v109);
            }
            else
            {
              sub_21616F44C((uint64_t)a1, v71, v83, v80);
            }
            v75 += 32;
          }
          while (v75 != v76);
        }
        goto LABEL_130;
      }
    }
    v39 = &v5[v8 + 1];
    int v40 = ~v8 + a3;
    v41 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    size_t v42 = *(unsigned __int16 *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 12);
    if (v40 == v42 && !memcmp(v39, (char *)v41 + 14, v42))
    {
      uint64_t v54 = *v41;
      free(v41);
      uint64_t v55 = v54 | 2;
      if (!v54) {
        uint64_t v55 = 0;
      }
      uint64_t *v13 = v55;
    }
    else
    {
      uint64_t v43 = *v41;
      if (!*v41) {
        goto LABEL_62;
      }
      while (1)
      {
        v44 = (uint64_t *)v43;
        size_t v45 = *(unsigned __int16 *)(v43 + 12);
        if (v40 == v45 && !memcmp(v39, (const void *)(v43 + 14), v45)) {
          break;
        }
        uint64_t v43 = *v44;
        v41 = v44;
        if (!*v44) {
          goto LABEL_62;
        }
      }
      uint64_t *v41 = *v44;
      free(v44);
    }
    goto LABEL_70;
  }
  unint64_t v23 = (unint64_t *)operator new(8uLL);
  uint64_t v24 = 0;
  unint64_t *v23 = (unint64_t)a1;
  v25 = v23 + 1;
  v103 = (char *)(v23 + 1);
  __p = v23;
  v102 = v23 + 1;
  unint64_t v26 = (unint64_t)a1;
  do
  {
    unint64_t v27 = v26 + 8 * v5[v24];
    uint64_t v30 = *(void *)(v27 + 12);
    v29 = (uint64_t *)(v27 + 12);
    uint64_t v28 = v30;
    uint64_t v31 = v30 & 3;
    if ((v30 & 3) == 0) {
      goto LABEL_62;
    }
    if (v31 == 2)
    {
      v46 = &v5[v24 + 1];
      int v47 = ~v24 + a3;
      v48 = (uint64_t *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
      size_t v49 = *(unsigned __int16 *)((v28 & 0xFFFFFFFFFFFFFFFCLL) + 20);
      if (v47 == v49 && !memcmp(v46, (char *)v48 + 22, v49))
      {
        uint64_t v56 = *v48;
        free(v48);
        uint64_t v57 = v56 | 2;
        if (!v56) {
          uint64_t v57 = 0;
        }
        uint64_t *v29 = v57;
        goto LABEL_79;
      }
      uint64_t v50 = *v48;
      if (*v48)
      {
        while (1)
        {
          v51 = (uint64_t *)v50;
          size_t v52 = *(unsigned __int16 *)(v50 + 20);
          if (v47 == v52 && !memcmp(v46, (const void *)(v50 + 22), v52)) {
            break;
          }
          uint64_t v50 = *v51;
          v48 = v51;
          if (!*v51) {
            goto LABEL_62;
          }
        }
        uint64_t *v48 = *v51;
        free(v51);
        goto LABEL_79;
      }
LABEL_62:
      int v53 = 0;
      goto LABEL_132;
    }
    unint64_t v26 = v28 & 0xFFFFFFFFFFFFFFFCLL;
    if (v25 >= (unint64_t *)v103)
    {
      uint64_t v32 = v25 - __p;
      if ((unint64_t)(v32 + 1) >> 61) {
        sub_21610CB04();
      }
      unint64_t v33 = (v103 - (char *)__p) >> 2;
      if (v33 <= v32 + 1) {
        unint64_t v33 = v32 + 1;
      }
      if ((unint64_t)(v103 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v33;
      }
      if (v34) {
        v35 = (char *)sub_2160FFAA8((uint64_t)&v103, v34);
      }
      else {
        v35 = 0;
      }
      v36 = (unint64_t *)&v35[8 * v32];
      unint64_t *v36 = v26;
      v25 = v36 + 1;
      v37 = v102;
      if (v102 != __p)
      {
        do
        {
          unint64_t v38 = *--v37;
          *--v36 = v38;
        }
        while (v37 != __p);
        v37 = __p;
      }
      __p = v36;
      v103 = &v35[8 * v34];
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *v25++ = v26;
    }
    v102 = v25;
    ++v24;
  }
  while (v24 != a3);
  if (!*(_DWORD *)(v26 + 8)) {
    goto LABEL_62;
  }
  *(_DWORD *)(v26 + 8) = 0;
LABEL_79:
  if ((unint64_t)((char *)v102 - (char *)__p) >= 0x10)
  {
    uint64_t v63 = v102 - __p;
    unsigned int v107 = 0;
    uint64_t v64 = v63 - 1;
    if (v63 != 1)
    {
      LOBYTE(v65) = 0;
      unint64_t v66 = a1[522];
      while (1)
      {
        v67 = sub_216175558((uint64_t)a1, __p[v64]);
        unsigned int v107 = 0;
        v114 = &unk_26C6C7F68;
        v115 = &v107;
        v116 = &v114;
        sub_2161709F0(v67, 0, (uint64_t)&v114, -1);
        sub_216176310(&v114);
        if (v67) {
          free(v67);
        }
        if (v107 >= v66) {
          break;
        }
        uint64_t v65 = 1;
        if (!--v64) {
          goto LABEL_111;
        }
      }
      if ((v65 & 1) == 0) {
        goto LABEL_131;
      }
      uint64_t v65 = v64 + 1;
LABEL_111:
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      sub_2161755F4(&v104, v66);
      uint64_t v84 = __p[v65];
      v85 = sub_216175558((uint64_t)a1, v84);
      v111 = &unk_26C6C7F10;
      v112 = &v104;
      v113 = &v111;
      sub_2161709F0(v85, 0, (uint64_t)&v111, -1);
      sub_216176310(&v111);
      if (v66 <= (v105 - v104) >> 5) {
        __assert_rtn("reverseBurst", "BurstTrie.cpp", 965, "items.size() < sizeThreshold");
      }
      if (v85) {
        free(v85);
      }
      sub_2161722A0(v84);
      a1[515] -= (unint64_t)(v105 - v104) >> 5;
      *(void *)(__p[v64] + 8 * v5[v64] + 12) = 0;
      if ((a3 + 1) < (unint64_t)(v102 - __p)) {
        __assert_rtn("reverseBurst", "BurstTrie.cpp", 974, "levels.size() <= keyLen + 1");
      }
      v86 = sub_216171C68();
      uint64_t v87 = (uint64_t)v86;
      if (v65)
      {
        v88 = v86;
        uint64_t v89 = v65;
        do
        {
          char v90 = *v5++;
          *v88++ = v90;
          --v89;
        }
        while (v89);
      }
      uint64_t v91 = v104;
      uint64_t v92 = v105;
      if (v104 != v105)
      {
        int v93 = a1[516];
        do
        {
          if (*(char *)(v91 + 23) < 0)
          {
            v95 = *(const void **)v91;
            size_t v94 = *(void *)(v91 + 8);
          }
          else
          {
            size_t v94 = *(unsigned __int8 *)(v91 + 23);
            v95 = (const void *)v91;
          }
          uint64_t v96 = *(unsigned int *)(v91 + 24);
          float v97 = *(float *)(v91 + 28);
          memcpy((void *)(v87 + v65), v95, v94);
          if (*(char *)(v91 + 23) < 0) {
            uint64_t v98 = *(void *)(v91 + 8);
          }
          else {
            LODWORD(v98) = *(unsigned __int8 *)(v91 + 23);
          }
          uint64_t v99 = (v98 + v65);
          if (v93)
          {
            uint64_t v110 = 0;
            sub_21616F624((uint64_t)a1, v87, v99, v96, 0, (uint64_t)v109, v97);
            sub_2161753B8(v109);
          }
          else
          {
            sub_21616F44C((uint64_t)a1, v87, v99, v96);
          }
          v91 += 32;
        }
        while (v91 != v92);
      }
LABEL_130:
      v108 = (void **)&v104;
      sub_216175BF4(&v108);
    }
  }
LABEL_131:
  int v53 = 1;
LABEL_132:
  if (__p) {
    operator delete(__p);
  }
  if (!v53) {
    return 0;
  }
  --a1[515];
  return 1;
}

void sub_2161705A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  a16 = &a12;
  sub_216175BF4((void ***)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216170650(void *a1, const void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  v12[4] = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  unint64_t v9 = 0xFFFFFFFF00000000;
  int v10 = 0;
  uint64_t v11 = 0;
  v12[3] = 0;
  sub_21617072C(a1, a2, a3, 1, (uint64_t)&v9);
  if ((v9 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (a4) {
      *a4 = HIDWORD(v9);
    }
    if (a5) {
      *a5 = v10;
    }
    uint64_t v7 = 1;
  }
  sub_21617543C(v12);
  return v7;
}

void sub_216170718(_Unwind_Exception *a1)
{
  sub_21617543C(v1);
  _Unwind_Resume(a1);
}

void *sub_21617072C(void *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[4] = *MEMORY[0x263EF8340];
  if (a3 <= 0x3FF)
  {
    uint64_t v9 = (uint64_t)result;
    int v10 = sub_216171C68();
    memcpy(v10, a2, a3);
    v10[a3] = 0;
    uint64_t v11 = *(void *)(v9 + 2080);
    int v12 = *(_DWORD *)(v9 + 2064);
    if (v11)
    {
      uint64_t v13 = (*(_DWORD *)(v11 + 4) & 0xFFFFFFFC) + v11;
      if (v12)
      {
        uint64_t v14 = v18;
        v18[0] = &unk_26C6C73B8;
        v18[1] = sub_216173004;
        v18[3] = v18;
        sub_216172C54(v9, v13, v10, a3, 0, a4, a5, (uint64_t)v18);
      }
      else
      {
        uint64_t v14 = v17;
        v17[0] = &unk_26C6C73B8;
        v17[1] = sub_216173004;
        v17[3] = v17;
        sub_216173094(v9, v13, v10, a3, 0, a4, a5, (uint64_t)v17);
      }
    }
    else if (v12)
    {
      uint64_t v14 = v16;
      v16[0] = &unk_26C6C73B8;
      v16[1] = sub_216173004;
      v16[3] = v16;
      sub_216173440(v9, v10, a3, 0, a4, a5, (uint64_t)v16);
    }
    else
    {
      uint64_t v14 = v15;
      v15[0] = &unk_26C6C73B8;
      v15[1] = sub_216173004;
      v15[3] = v15;
      sub_21617371C((int *)v9, v10, a3, 0, a4, a5, (uint64_t)v15);
    }
    return sub_216174280(v14);
  }
  return result;
}

void sub_216170944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216174280(va);
  _Unwind_Resume(a1);
}

void *sub_21617097C(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v6 = malloc_type_calloc(0x28uLL, 1uLL, 0xB69D8915uLL);
  if (!sub_2161714C8(a1, (uint64_t)v6, a2, a3) && v6)
  {
    free(v6);
    return 0;
  }
  return v6;
}

void *sub_2161709F0(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = sub_216171C68();
    uint64_t v8 = (uint64_t)result;
    char v16 = 0;
    int v9 = *((_DWORD *)v7 + 7);
    if (v9)
    {
      if (v9 != 1) {
        return result;
      }
      long long v13 = *(_OWORD *)v7;
      uint64_t v14 = v7[2];
      int v10 = (void *)v7[4];
      sub_216176394((uint64_t)v18, a3);
      sub_216170BDC(v10, (uint64_t)&v13, v8, 0x1000u, 0, &v16, a2, (uint64_t)v18);
      uint64_t v11 = v18;
    }
    else
    {
      long long v13 = *(_OWORD *)v7;
      uint64_t v14 = v7[2];
      int v15 = *((_DWORD *)v7 + 6);
      int v12 = (void *)v7[4];
      sub_216176394((uint64_t)v17, a3);
      sub_216171D30(v12, (uint64_t)&v13, v8, 0, &v16, a4, a2, (uint64_t)v17);
      uint64_t v11 = v17;
    }
    return sub_216176310(v11);
  }
  return result;
}

void sub_216170B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216176310(va);
  _Unwind_Resume(a1);
}

void sub_216170B58(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t sub_216170B64(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, float a7)
{
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  int v12 = a4;
  int v11 = a5;
  float v10 = a7;
  uint64_t v9 = a6;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, int *, float *, uint64_t *))(*(void *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

void *sub_216170BDC(void *result, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned char *a6, uint64_t a7, uint64_t a8)
{
  v69[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = (uint64_t)result;
  switch(*(void *)a2 & 3)
  {
    case 1:
      sub_216176394((uint64_t)v68, a8);
      uint64_t v14 = v68;
      sub_216171258(v13, (void *)a2, a3, a4, a5, a6, a7, (uint64_t)v68);
      return sub_216176310(v14);
    case 2:
      sub_216176394((uint64_t)v66, a8);
      int v15 = *(_DWORD *)(v13 + 2064);
      char v16 = (_DWORD *)((*(void *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(v13 + 2080));
      if (v15)
      {
        unint64_t v17 = (void *)sub_216176394((uint64_t)v69, (uint64_t)v66);
        unsigned int v27 = *v16 - 8;
        if (*v16 == 8) {
          goto LABEL_34;
        }
        unsigned int v28 = 0;
        do
        {
          v29 = (char *)v16 + v28;
          uint64_t v30 = *((unsigned __int16 *)v29 + 8);
          uint64_t v31 = *(unsigned int *)(a2 + 12);
          if (v30 >= v31)
          {
            uint64_t v32 = v29 + 8;
            int v33 = v30 - v31;
            memcpy((void *)(a3 + a5), &v29[v31 + 18], v30 - (int)v31);
            *(unsigned char *)(a3 + v33 + a5) = 0;
            sub_216170B64((uint64_t)v69, a7, a3, *((unsigned __int16 *)v32 + 4), *((_DWORD *)v32 + 1), (uint64_t)a6, *(float *)v32);
            LODWORD(v30) = *((unsigned __int16 *)v32 + 4);
          }
          v28 += v30 + 10;
        }
        while (v28 < v27);
      }
      else if ((v15 & 4) != 0)
      {
        unint64_t v17 = (void *)sub_216176394((uint64_t)v69, (uint64_t)v66);
        unsigned int v34 = *v16 - 4;
        unsigned int v35 = *(_DWORD *)(a2 + 8);
        if (v35 >= v34) {
          goto LABEL_34;
        }
        do
        {
          v36 = (char *)v16 + v35;
          uint64_t v37 = *((unsigned __int16 *)v36 + 4);
          uint64_t v38 = *(unsigned int *)(a2 + 12);
          if (v37 >= v38)
          {
            int v40 = v36 + 4;
            int v41 = v37 - v38;
            memcpy((void *)(a3 + a5 + v36[10]), &v36[v38 + 11], v37 - (int)v38);
            *(unsigned char *)(a3 + v41 + a5 + v40[6]) = 0;
            sub_216170B64((uint64_t)v69, a7, a3, *((unsigned __int16 *)v40 + 2), *(_DWORD *)v40, (uint64_t)a6, 0.0);
            int v39 = *((unsigned __int16 *)v40 + 2) + *(_DWORD *)(a2 + 8);
          }
          else
          {
            int v39 = v35 + v37;
          }
          unsigned int v35 = v39 + 7;
          *(_DWORD *)(a2 + 8) = v35;
        }
        while (v35 < v34);
      }
      else
      {
        unint64_t v17 = (void *)sub_216176394((uint64_t)v69, (uint64_t)v66);
        unsigned int v18 = *v16 - 4;
        unsigned int v19 = *(_DWORD *)(a2 + 8);
        if (v19 >= v18) {
          goto LABEL_34;
        }
        do
        {
          uint64_t v20 = (char *)v16 + v19;
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          uint64_t v22 = *(unsigned int *)(a2 + 12);
          if (v21 >= v22)
          {
            uint64_t v24 = v20 + 4;
            int v25 = v21 - v22;
            memcpy((void *)(a3 + a5), &v20[v22 + 10], v21 - (int)v22);
            *(unsigned char *)(a3 + v25 + a5) = 0;
            sub_216170B64((uint64_t)v69, a7, a3, *((unsigned __int16 *)v24 + 2), *(_DWORD *)v24, (uint64_t)a6, (float)*(unsigned int *)v24);
            int v23 = *((unsigned __int16 *)v24 + 2) + *(_DWORD *)(a2 + 8);
          }
          else
          {
            int v23 = v19 + v21;
          }
          unsigned int v19 = v23 + 6;
          *(_DWORD *)(a2 + 8) = v19;
        }
        while (v19 < v18);
      }
      unint64_t v17 = v69;
LABEL_34:
      sub_216176310(v17);
      uint64_t v14 = v66;
      return sub_216176310(v14);
    case 3:
      sub_216176394((uint64_t)v67, a8);
      unint64_t v26 = (*(void *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(v13 + 2080);
      if ((*(unsigned char *)(v13 + 2064) & 1) == 0)
      {
        if (*(_DWORD *)(v26 + 32))
        {
          *(unsigned char *)(a3 + a5) = 0;
          sub_216170B64((uint64_t)v67, a7, a3, a5, *(_DWORD *)(v26 + 32), (uint64_t)a6, 0.0);
          if (a5 >= a4 || *a6) {
            goto LABEL_65;
          }
        }
        else if (a5 >= a4)
        {
          goto LABEL_65;
        }
        uint64_t v42 = a5;
        unint64_t v43 = 0;
        uint64_t v44 = a5 + 1;
        uint64_t v45 = a4 - 1;
        while (1)
        {
          *(unsigned char *)(a3 + v42) = v43;
          if (v43 >> 6 <= 1) {
            uint64_t v46 = 1;
          }
          else {
            uint64_t v46 = v43 >> 6;
          }
          uint64_t v47 = *(void *)(v26 + 8 * (v43 >> 6));
          if ((v47 & (1 << v43)) != 0)
          {
            if (v43 >= 0x40)
            {
              int v48 = 0;
              size_t v49 = (int8x8_t *)v26;
              do
              {
                int8x8_t v50 = *v49++;
                uint8x8_t v51 = (uint8x8_t)vcnt_s8(v50);
                v51.i16[0] = vaddlv_u8(v51);
                v48 += v51.i32[0];
                --v46;
              }
              while (v46);
            }
            else
            {
              int v48 = 0;
            }
            uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)(v47 & ((1 << v43) - 1)));
            v52.i16[0] = vaddlv_u8(v52);
            *(void *)a2 = *(unsigned int *)(v26 + 4 * (v48 + v52.i32[0]) + 36);
            *(void *)(a2 + 8) = 0;
            *(_DWORD *)(a2 + 16) = 0;
            sub_216176394((uint64_t)v69, (uint64_t)v67);
            sub_216170BDC(v13, a2, a3, v45, v44, a6, a7, v69);
            sub_216176310(v69);
            if (*a6 || v43 >= 0xFF) {
              goto LABEL_65;
            }
          }
          else if (v43 > 0xFE)
          {
            goto LABEL_65;
          }
          ++v43;
        }
      }
      if (*(_DWORD *)(v26 + 40))
      {
        *(unsigned char *)(a3 + a5) = 0;
        sub_216170B64((uint64_t)v67, a7, a3, a5, *(_DWORD *)(v26 + 40), (uint64_t)a6, *(float *)(v26 + 36));
        if (a5 >= a4 || *a6) {
          goto LABEL_65;
        }
      }
      else if (a5 >= a4)
      {
        goto LABEL_65;
      }
      uint64_t v53 = a5;
      unint64_t v54 = 0;
      uint64_t v55 = a5 + 1;
      uint64_t v56 = a4 - 1;
      break;
    default:
      if (*(void *)a2 != *(_DWORD *)(result[260] + 4)) {
        return result;
      }
      sub_216176394((uint64_t)v65, a8);
      uint64_t v14 = v65;
      sub_216171258(v13, (void *)a2, a3, a4, a5, a6, a7, (uint64_t)v65);
      return sub_216176310(v14);
  }
  while (1)
  {
    *(unsigned char *)(a3 + v53) = v54;
    uint64_t v57 = v54 >> 6 <= 1 ? 1 : v54 >> 6;
    uint64_t v58 = *(void *)(v26 + 8 * (v54 >> 6));
    if ((v58 & (1 << v54)) != 0) {
      break;
    }
    if (v54 > 0xFE) {
      goto LABEL_65;
    }
LABEL_64:
    ++v54;
  }
  if (v54 >= 0x40)
  {
    int v59 = 0;
    uint64_t v60 = (int8x8_t *)v26;
    do
    {
      int8x8_t v61 = *v60++;
      uint8x8_t v62 = (uint8x8_t)vcnt_s8(v61);
      v62.i16[0] = vaddlv_u8(v62);
      v59 += v62.i32[0];
      --v57;
    }
    while (v57);
  }
  else
  {
    int v59 = 0;
  }
  uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)(v58 & ((1 << v54) - 1)));
  v63.i16[0] = vaddlv_u8(v63);
  *(void *)a2 = *(unsigned int *)(v26 + 4 * (v59 + v63.i32[0]) + 44);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_216176394((uint64_t)v69, (uint64_t)v67);
  sub_216170BDC(v13, a2, a3, v56, v55, a6, a7, v69);
  sub_216176310(v69);
  if (!*a6 && v54 < 0xFF) {
    goto LABEL_64;
  }
LABEL_65:
  uint64_t v14 = v67;
  return sub_216176310(v14);
}

void sub_2161711D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216176310(va);
  _Unwind_Resume(a1);
}

uint64_t sub_216171258(uint64_t result, void *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = result;
  v23[4] = *MEMORY[0x263EF8340];
  unint64_t v12 = (*a2 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2080);
  if (*(unsigned char *)(result + 2064))
  {
    if (*(_DWORD *)(v12 + 1024))
    {
      *(unsigned char *)(a3 + a5) = 0;
      uint64_t result = sub_216170B64(a8, a7, a3, 0, *(_DWORD *)(v12 + 1024), (uint64_t)a6, *(float *)(v12 + 1032));
      if (a5 >= a4 || *a6) {
        return result;
      }
    }
    else if (a5 >= a4)
    {
      return result;
    }
    uint64_t v16 = 0;
    do
    {
      *(unsigned char *)(a3 + a5) = v16;
      *a2 = *(unsigned int *)(v12 + 4 * v16);
      if (v16) {
        uint64_t v17 = a5 + 1;
      }
      else {
        uint64_t v17 = a5;
      }
      a2[1] = 0;
      a2[2] = 0;
      sub_216176394((uint64_t)v23, a8);
      sub_216170BDC(v11, a2, a3, a4 - (v16 != 0), v17, a6, a7, v23);
      uint64_t result = (uint64_t)sub_216176310(v23);
      if (*a6) {
        break;
      }
      BOOL v15 = v16++ == 255;
    }
    while (!v15);
  }
  else
  {
    if (*(_DWORD *)(v12 + 1024))
    {
      *(unsigned char *)(a3 + a5) = 0;
      uint64_t result = sub_216170B64(a8, a7, a3, 0, *(_DWORD *)(v12 + 1024), (uint64_t)a6, 0.0);
      if (a5 >= a4 || *a6) {
        return result;
      }
    }
    else if (a5 >= a4)
    {
      return result;
    }
    uint64_t v13 = 0;
    do
    {
      *(unsigned char *)(a3 + a5) = v13;
      *a2 = *(unsigned int *)(v12 + 4 * v13);
      a2[1] = 0;
      *((_DWORD *)a2 + 4) = 0;
      if (v13) {
        uint64_t v14 = a5 + 1;
      }
      else {
        uint64_t v14 = a5;
      }
      sub_216176394((uint64_t)v22, a8);
      sub_216170BDC(v11, a2, a3, a4 - (v13 != 0), v14, a6, a7, v22);
      uint64_t result = (uint64_t)sub_216176310(v22);
      if (*a6) {
        break;
      }
      BOOL v15 = v13++ == 255;
    }
    while (!v15);
  }
  return result;
}

void sub_2161714A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216176310((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161714C8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  if (!a1 || !a2 || !sub_21617153C(a1, a2)) {
    return 0;
  }

  return sub_2161715B0(a2, a3, a4, v7, v8);
}

uint64_t sub_21617153C(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  *(void *)(a2 + 32) = a1;
  int v2 = *(_DWORD **)(a1 + 2080);
  if (v2)
  {
    if (*v2 == -900339842 || *v2 == 12648430 && v2[7] == 2)
    {
      uint64_t result = 1;
      *(_DWORD *)(a2 + 28) = 1;
      uint64_t v4 = v2[1];
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = v4;
      return result;
    }
    return 0;
  }
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a2 + 8) = a1 | 1;
  *(void *)(a2 + 16) = 0;
  return 1;
}

uint64_t sub_2161715B0(uint64_t result, unsigned __int8 *a2, unsigned int a3, __n128 a4, __n128 a5)
{
  if (result)
  {
    uint64_t v5 = result;
    int v6 = *(_DWORD *)(result + 28);
    if (v6)
    {
      if (v6 == 1)
      {
        uint64_t v7 = *(void *)result;
        uint64_t v8 = *(void *)(result + 8);
        int v9 = *(_DWORD *)(result + 16);
        int v10 = *(_DWORD *)(result + 20);
        uint64_t result = sub_21617166C(*(void *)(result + 32), result, a2, a3, a4.n128_f64[0], a5);
        if (!result)
        {
          *(void *)uint64_t v5 = v7;
          *(void *)(v5 + 8) = v8;
          *(_DWORD *)(v5 + 16) = v9;
          *(_DWORD *)(v5 + 20) = v10;
          return result;
        }
        return 1;
      }
      return 0;
    }
    else
    {
      uint64_t v12 = *(void *)result;
      uint64_t v11 = *(void *)(result + 8);
      uint64_t v13 = *(void *)(result + 16);
      int v14 = *(_DWORD *)(result + 24);
      uint64_t result = sub_216171B7C(*(void *)(result + 32), result, a2, a3, a4);
      if (result) {
        return 1;
      }
      *(void *)uint64_t v5 = v12;
      *(void *)(v5 + 8) = v11;
      *(void *)(v5 + 16) = v13;
      *(_DWORD *)(v5 + 24) = v14;
    }
  }
  return result;
}

BOOL sub_21617166C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, double a5, __n128 a6)
{
  uint64_t v6 = *(void *)a2;
  size_t v7 = a4;
  switch(*(void *)a2 & 3)
  {
    case 1:
      goto LABEL_3;
    case 2:
      int v13 = *(_DWORD *)(a1 + 2064);
      int v14 = (int *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(a1 + 2080));
      int v15 = *v14;
      if ((v13 & 1) == 0)
      {
        unsigned int v16 = v15 - 4;
        if (v15 == 4) {
          goto LABEL_21;
        }
        uint64_t v17 = *(unsigned int *)(a2 + 8);
        if ((v13 & 4) != 0)
        {
          if (a4)
          {
            if (v17 < v16)
            {
              unsigned int v45 = 0;
              while (1)
              {
                uint64_t v46 = (char *)v14 + v17;
                uint64_t v47 = v46 + 4;
                uint64_t v48 = v46[10];
                LODWORD(v49) = v48;
                if (v48 < a4)
                {
                  if (v48 <= *((unsigned __int16 *)v47 + 2)) {
                    uint64_t v49 = *((unsigned __int16 *)v47 + 2);
                  }
                  else {
                    uint64_t v49 = v48;
                  }
                  uint64_t v50 = v48;
                  while (v49 != v50)
                  {
                    if (v47[(v50 + *(_DWORD *)(a2 + 12)) + 7] != a3[v45 + v50])
                    {
                      LODWORD(v49) = v50;
                      break;
                    }
                    if (a4 == ++v50)
                    {
                      LODWORD(v49) = a4;
                      break;
                    }
                  }
                }
                v45 += v49;
                int v51 = *((unsigned __int16 *)v47 + 2);
                if (v45 == a4) {
                  break;
                }
                int v22 = 0;
                LODWORD(v17) = v17 + v51 + 7;
                *(_DWORD *)(a2 + 8) = v17;
                if (v17 >= v16) {
                  goto LABEL_89;
                }
              }
              unsigned int v63 = *(_DWORD *)(a2 + 12) + a4;
              *(_DWORD *)(a2 + 16) = 0;
              if (v51 + v48 == v63) {
                *(_DWORD *)(a2 + 16) = *(_DWORD *)v47;
              }
              goto LABEL_87;
            }
LABEL_21:
            int v22 = 0;
            goto LABEL_89;
          }
          uint8x8_t v62 = (char *)v14 + v17;
          if (*(unsigned __int16 *)((char *)v14 + v17 + 8) + *((unsigned __int8 *)v14 + v17 + 10))
          {
LABEL_78:
            *(_DWORD *)(a2 + 16) = 0;
            goto LABEL_88;
          }
        }
        else
        {
          if (a4)
          {
            if (v17 < v16)
            {
              uint64_t v18 = *(unsigned int *)(a2 + 12);
              while (1)
              {
                unsigned int v19 = (char *)v14 + v17;
                unsigned int v20 = *((unsigned __int16 *)v19 + 4);
                if (v20 >= v18)
                {
                  uint64_t v21 = v19 + 4;
                  if (!memcmp(&v19[v18 + 10], a3, v7)) {
                    break;
                  }
                }
                int v22 = 0;
                LODWORD(v17) = v17 + v20 + 6;
                *(_DWORD *)(a2 + 8) = v17;
                if (v17 >= v16) {
                  goto LABEL_89;
                }
              }
              *(_DWORD *)(a2 + 16) = 0;
              if (v20 - v18 == a4) {
                *(_DWORD *)(a2 + 16) = *v21;
              }
              unsigned int v63 = v18 + a4;
LABEL_87:
              *(_DWORD *)(a2 + 12) = v63;
              goto LABEL_88;
            }
            goto LABEL_21;
          }
          uint8x8_t v62 = (char *)v14 + v17;
          if (*(_WORD *)((char *)v14 + v17 + 8)) {
            goto LABEL_78;
          }
        }
        *(_DWORD *)(a2 + 16) = 0;
        *(_DWORD *)(a2 + 16) = *((_DWORD *)v62 + 1);
        goto LABEL_88;
      }
      if (v15 == 4) {
        goto LABEL_21;
      }
      unsigned int v35 = *(_DWORD *)(a2 + 8);
      a6.n128_u64[0] = *(void *)(a2 + 12);
      float v36 = *(float *)(a2 + 20);
      unsigned int v37 = v15 - 8;
      if (v15 == 8)
      {
        int v22 = 0;
LABEL_76:
        *(_DWORD *)(a2 + 8) = v35;
        *(void *)(a2 + 12) = a6.n128_u64[0];
        *(float *)(a2 + 20) = v36;
        goto LABEL_89;
      }
      unsigned int v38 = 0;
      int v22 = 0;
      uint64_t v39 = a6.n128_u32[0];
      unsigned __int32 v40 = a6.n128_u32[0] + a4;
      while (2)
      {
        while (1)
        {
          int v41 = (char *)v14 + v38;
          unsigned __int32 v42 = *((unsigned __int16 *)v41 + 8);
          if (v40 <= v42) {
            break;
          }
          v38 += v42 + 10;
          if (v38 >= v37) {
            goto LABEL_76;
          }
        }
        __n128 v67 = a6;
        unsigned int v65 = v35;
        uint64_t v66 = v39;
        uint64_t v64 = v41 + 8;
        if (memcmp(&v41[v39 + 18], a3, v7))
        {
          unsigned int v35 = v65;
          a6 = v67;
          goto LABEL_39;
        }
        a6 = v67;
        if (v40 != v42)
        {
          HIDWORD(v43) = 0;
          BOOL v44 = v22 == 0;
          unsigned int v35 = v65;
          if (!v22)
          {
            unsigned int v35 = v38;
            float v36 = 0.0;
          }
          int v22 = 1;
          if (v44)
          {
            LODWORD(v43) = v67.n128_u32[0] + a4;
            a6.n128_f64[0] = v43;
          }
LABEL_39:
          v38 += v42 + 10;
          uint64_t v39 = v66;
          if (v38 >= v37) {
            goto LABEL_76;
          }
          continue;
        }
        break;
      }
      *(_DWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 16) = v64[1];
      *(_DWORD *)(a2 + 20) = *v64;
      *(_DWORD *)(a2 + 8) = v38;
      *(_DWORD *)(a2 + 12) = v40;
LABEL_88:
      int v22 = 1;
LABEL_89:
      BOOL v61 = v22 == 0;
      return !v61;
    case 3:
      int v23 = (int8x8_t *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(a1 + 2080));
      if (*(unsigned char *)(a1 + 2064))
      {
        if (a4)
        {
          unsigned int v30 = *a3;
          LODWORD(v31) = v30 >> 6;
          int8x8_t v32 = v23[v30 >> 6];
          uint64_t v33 = 1 << v30;
          if (((1 << v30) & *(void *)&v32) != 0)
          {
            if (v30 >= 0x40)
            {
              int v34 = 0;
              if (v31 <= 1) {
                uint64_t v31 = 1;
              }
              else {
                uint64_t v31 = v31;
              }
              uint64_t v57 = v23;
              do
              {
                int8x8_t v58 = *v57++;
                uint8x8_t v59 = (uint8x8_t)vcnt_s8(v58);
                v59.i16[0] = vaddlv_u8(v59);
                v34 += v59.i32[0];
                --v31;
              }
              while (v31);
            }
            else
            {
              int v34 = 0;
            }
            uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)((v33 - 1) & *(void *)&v32));
            v60.i16[0] = vaddlv_u8(v60);
            uint64_t v56 = v23[5].u32[v34 + v60.i32[0] + 1];
            goto LABEL_73;
          }
LABEL_41:
          int v12 = 0;
          goto LABEL_74;
        }
        *(_DWORD *)(a2 + 16) = v23[5].i32[0];
        *(_DWORD *)(a2 + 20) = v23[4].i32[1];
      }
      else
      {
        if (a4)
        {
          unsigned int v24 = *a3;
          LODWORD(v25) = v24 >> 6;
          int8x8_t v26 = v23[v24 >> 6];
          uint64_t v27 = 1 << v24;
          if (((1 << v24) & *(void *)&v26) != 0)
          {
            if (v24 >= 0x40)
            {
              int v28 = 0;
              if (v25 <= 1) {
                uint64_t v25 = 1;
              }
              else {
                uint64_t v25 = v25;
              }
              uint8x8_t v52 = v23;
              do
              {
                int8x8_t v53 = *v52++;
                uint8x8_t v54 = (uint8x8_t)vcnt_s8(v53);
                v54.i16[0] = vaddlv_u8(v54);
                v28 += v54.i32[0];
                --v25;
              }
              while (v25);
            }
            else
            {
              int v28 = 0;
            }
            uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)((v27 - 1) & *(void *)&v26));
            v55.i16[0] = vaddlv_u8(v55);
            uint64_t v56 = v23[4].u32[v28 + v55.i32[0] + 1];
LABEL_73:
            sub_216174F54(a1, a2, v56);
            int v12 = sub_21617166C(a1, a2, a3 + 1, a4 - 1);
            goto LABEL_74;
          }
          goto LABEL_41;
        }
        *(_DWORD *)(a2 + 16) = v23[4].i32[0];
      }
      int v12 = 1;
LABEL_74:
      BOOL v61 = v12 == 0;
      return !v61;
    default:
      if (v6 == *(_DWORD *)(*(void *)(a1 + 2080) + 4))
      {
LABEL_3:
        int v12 = sub_216174E9C(a1, a2, a3, a4);
        goto LABEL_74;
      }
      return 0;
  }
}

uint64_t sub_216171B7C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, __n128 a5)
{
  uint64_t v9 = *(void *)(a2 + 8);
  if ((v9 & 3) == 2)
  {
    int v12 = sub_216175040(a1, a2, a3, a4, a5);
    return v12 != 0;
  }
  if ((v9 & 3) != 1) {
    return 0;
  }
  int v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if (*(unsigned char *)(a1 + 2064))
  {
    if (a4)
    {
      uint64_t v11 = (uint64_t *)&v10[2 * *a3 + 3];
      goto LABEL_10;
    }
    *(_DWORD *)(a2 + 20) = v10[2];
    *(_DWORD *)(a2 + 24) = v10[1];
  }
  else
  {
    if (a4)
    {
      uint64_t v11 = (uint64_t *)&v10[2 * *a3 + 1];
LABEL_10:
      sub_21617531C(a1, a2, *v11);
      int v12 = sub_216171B7C(a1, a2, a3 + 1, a4 - 1);
      return v12 != 0;
    }
    *(_DWORD *)(a2 + 20) = *v10;
  }
  return 1;
}

void *sub_216171C68()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CF50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CF50))
  {
    pthread_key_t v2 = 0;
    pthread_key_create(&v2, MEMORY[0x263EF88C0]);
    qword_26797CF48 = v2;
    __cxa_guard_release(&qword_26797CF50);
  }
  v0 = pthread_getspecific(qword_26797CF48);
  if (!v0)
  {
    v0 = malloc_type_malloc(0x1000uLL, 0xEDA05693uLL);
    pthread_setspecific(qword_26797CF48, v0);
  }
  return v0;
}

void sub_216171D18(_Unwind_Exception *a1)
{
}

void *sub_216171D30(void *result, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, int a6, uint64_t a7, uint64_t a8)
{
  v61[4] = *MEMORY[0x263EF8340];
  int v14 = *((_DWORD *)result + 516);
  uint64_t v15 = *(void *)(a2 + 8) & 3;
  if (v15 != 2)
  {
    if (v15 != 1) {
      return result;
    }
    uint64_t v16 = (uint64_t)result;
    if ((v14 & 1) == 0)
    {
      sub_216176394((uint64_t)v59, a8);
      uint64_t v17 = (int *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL);
      if (*v17)
      {
        sub_216170B64((uint64_t)v59, a7, a3, a4, *v17, (uint64_t)a5, *(float *)(a2 + 24));
        if (!a6 || *a5) {
          goto LABEL_48;
        }
      }
      else if (!a6)
      {
LABEL_48:
        uint64_t v47 = v59;
        return sub_216176310(v47);
      }
      uint64_t v48 = 0;
      uint64_t v49 = (a6 - 1);
      uint64_t v50 = v17 + 1;
      do
      {
        *(unsigned char *)(a3 + a4) = v48;
        sub_21617531C(v16, a2, *(void *)&v50[2 * v48]);
        sub_216176394((uint64_t)v61, (uint64_t)v59);
        sub_216171D30(v16, a2, a3, a4 + 1, a5, v49, a7, v61);
        sub_216176310(v61);
        if (*a5) {
          break;
        }
        BOOL v51 = v48++ == 255;
      }
      while (!v51);
      goto LABEL_48;
    }
    sub_216176394((uint64_t)v60, a8);
    unint64_t v31 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    int v32 = *(_DWORD *)(v31 + 8);
    if (v32)
    {
      sub_216170B64((uint64_t)v60, a7, a3, a4, v32, (uint64_t)a5, *(float *)(a2 + 24));
      if (!a6 || *a5) {
        goto LABEL_54;
      }
    }
    else if (!a6)
    {
LABEL_54:
      uint64_t v47 = v60;
      return sub_216176310(v47);
    }
    uint64_t v52 = 0;
    uint64_t v53 = (a6 - 1);
    unint64_t v54 = v31 + 12;
    do
    {
      *(unsigned char *)(a3 + a4) = v52;
      sub_21617531C(v16, a2, *(void *)(v54 + 8 * v52));
      sub_216176394((uint64_t)v61, (uint64_t)v60);
      sub_216171D30(v16, a2, a3, a4 + 1, a5, v53, a7, v61);
      sub_216176310(v61);
      if (*a5) {
        break;
      }
      BOOL v51 = v52++ == 255;
    }
    while (!v51);
    goto LABEL_54;
  }
  if (v14)
  {
    sub_216176394((uint64_t)v58, a8);
    unint64_t v33 = *(void *)a2 & 0xFFFFFFFFFFFFFFFCLL;
    if (!v33) {
      goto LABEL_42;
    }
    uint64_t v56 = (unsigned __int8 *)(v33 + 22);
    unsigned int v34 = a4;
    uint64_t v35 = *(unsigned int *)(a2 + 16);
    unsigned int v36 = v34;
    unsigned int v37 = (void *)(a3 + v34);
    while (1)
    {
      uint64_t v38 = *(unsigned __int16 *)(v33 + 20);
      if (v38 >= v35)
      {
        size_t v39 = v38 - (int)v35;
        if (a6 < 0 || (int)v39 <= a6)
        {
          if (v35)
          {
            unsigned __int32 v40 = (unsigned __int8 *)(v33 + 22);
            int v41 = v56;
            uint64_t v42 = v35;
            while (1)
            {
              int v44 = *v40++;
              int v43 = v44;
              int v45 = *v41++;
              if (v43 != v45) {
                break;
              }
              if (!--v42) {
                goto LABEL_38;
              }
            }
          }
          else
          {
LABEL_38:
            unsigned int v46 = v39 + v36;
            memcpy(v37, (const void *)(v33 + v35 + 22), v39);
            *(unsigned char *)(a3 + v46) = 0;
            sub_216170B64((uint64_t)v58, a7, a3, v46, *(_DWORD *)(v33 + 16), (uint64_t)a5, *(float *)(v33 + 12));
          }
        }
      }
      unint64_t v33 = *(void *)v33;
      if (!v33) {
        goto LABEL_40;
      }
    }
  }
  sub_216176394((uint64_t)v57, a8);
  unsigned int v55 = a4;
  unint64_t v18 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v19 = *(unsigned int *)(a2 + 16);
  if (v19 > *(unsigned __int16 *)(v18 + 12)) {
    __assert_rtn("traverseFromMapCursorTrieList", "BurstTrie.cpp", 1957, "cursor.prfxlen <= head->restlen");
  }
  if (!v18) {
    goto LABEL_40;
  }
  unint64_t v20 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  while (v20 == v18)
  {
    unsigned int v21 = *(unsigned __int16 *)(v18 + 12);
LABEL_20:
    int v28 = v21 - v19;
    if (a6 < 0 || v28 <= a6)
    {
      unsigned int v29 = v28 + v55;
      memcpy((void *)(a3 + v55), (const void *)(v20 + v19 + 14), v28);
      *(unsigned char *)(a3 + v29) = 0;
      uint64_t v30 = sub_216176394((uint64_t)v61, (uint64_t)v57);
      sub_216170B64(v30, a7, a3, v29, *(_DWORD *)(v20 + 8), (uint64_t)a5, 0.0);
      sub_216176310(v61);
    }
    unint64_t v20 = *(void *)v20;
    if (!v20) {
      goto LABEL_40;
    }
  }
  unsigned int v21 = *(unsigned __int16 *)(v20 + 12);
  if (v21 <= (unsigned __int16)v19) {
    goto LABEL_40;
  }
  if (!v19) {
    goto LABEL_20;
  }
  int v22 = (unsigned __int8 *)(v20 + 14);
  int v23 = (unsigned __int8 *)(v18 + 14);
  uint64_t v24 = v19;
  while (1)
  {
    int v26 = *v22++;
    int v25 = v26;
    int v27 = *v23++;
    if (v25 != v27) {
      break;
    }
    if (!--v24) {
      goto LABEL_20;
    }
  }
LABEL_40:
  if ((v14 & 1) == 0)
  {
    uint64_t v47 = v57;
    return sub_216176310(v47);
  }
LABEL_42:
  uint64_t v47 = v58;
  return sub_216176310(v47);
}

void sub_216172158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_216176310((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_2161721D4(void *result)
{
  if (result)
  {
    v1 = result;
    uint64_t result = malloc_type_calloc(0x28uLL, 1uLL, 0xCC7834EuLL);
    int v2 = *((_DWORD *)v1 + 7);
    if (v2)
    {
      if (v2 == 1)
      {
        void *result = *v1;
        result[1] = v1[1];
        *((_DWORD *)result + 4) = *((_DWORD *)v1 + 4);
        *((_DWORD *)result + 5) = *((_DWORD *)v1 + 5);
      }
    }
    else
    {
      *(_OWORD *)uint64_t result = *(_OWORD *)v1;
      result[2] = v1[2];
      *((_DWORD *)result + 6) = *((_DWORD *)v1 + 6);
    }
    *((_DWORD *)result + 7) = v2;
    result[4] = v1[4];
  }
  return result;
}

uint64_t sub_216172268(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[7];
  if (v2)
  {
    if (v2 != 1) {
      return 0;
    }
    int v3 = a1[4];
    if (!v3) {
      return 0;
    }
  }
  else
  {
    int v3 = a1[5];
    if (!v3) {
      return 0;
    }
  }
  if (a2) {
    *a2 = v3;
  }
  return 1;
}

void sub_2161722A0(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; ++i)
  {
    uint64_t v3 = a1 + 8 * i;
    uint64_t v6 = *(void *)(v3 + 12);
    uint64_t v5 = (void *)(v3 + 12);
    uint64_t v4 = v6;
    uint64_t v7 = v6 & 3;
    if (v7 == 2)
    {
      uint64_t v8 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        uint64_t v9 = (void *)*v8;
        free(v8);
        uint64_t v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      sub_2161722A0(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

void sub_216172320(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; ++i)
  {
    uint64_t v3 = a1 + 8 * i;
    uint64_t v6 = *(void *)(v3 + 4);
    uint64_t v5 = (void *)(v3 + 4);
    uint64_t v4 = v6;
    uint64_t v7 = v6 & 3;
    if (v7 == 2)
    {
      uint64_t v8 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        uint64_t v9 = (void *)*v8;
        free(v8);
        uint64_t v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      sub_216172320(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

uint64_t sub_2161723A0(uint64_t a1, void *a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, int *a7)
{
  int v12 = a2;
  uint64_t v13 = a1;
  int v14 = (uint64_t *)*a2;
  uint64_t v15 = malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2088) + 1), 0xDF779D89uLL);
  uint64_t v16 = (const void *)(a3 + a5);
  if (v14)
  {
    unsigned int v36 = v12;
    uint64_t v37 = v13;
    uint64_t v38 = a7;
    uint64_t v17 = 0;
    char v18 = 1;
LABEL_3:
    uint64_t v19 = a6;
    uint64_t v20 = 0;
    uint64_t v21 = v17;
    int v22 = &v15[v17];
    do
    {
      size_t v23 = *((unsigned __int16 *)v14 + 6);
      if (v23 + a5 == a4 && !memcmp(v16, (char *)v14 + 14, v23))
      {
        char v18 = 0;
        a6 = v19;
        *((_DWORD *)v14 + 2) = v19;
        uint64_t v17 = v21 + v20 + 1;
        v15[v21 + v20] = v14;
        int v14 = (uint64_t *)*v14;
        if (v14) {
          goto LABEL_3;
        }
        uint64_t v24 = (v21 + v20 + 1);
        int v25 = 1;
        goto LABEL_15;
      }
      v22[v20] = v14;
      int v14 = (uint64_t *)*v14;
      ++v20;
    }
    while (v14);
    uint64_t v26 = v21 + v20;
    if (v18)
    {
      uint64_t v13 = v37;
      a7 = v38;
      LODWORD(a6) = v19;
      int v12 = v36;
      goto LABEL_13;
    }
    int v25 = 1;
    uint64_t v24 = v26;
LABEL_15:
    uint64_t v13 = v37;
    a7 = v38;
    int v12 = v36;
  }
  else
  {
    LODWORD(v26) = 0;
LABEL_13:
    size_t v27 = a4 - a5;
    int v28 = (char *)malloc_type_calloc(1uLL, v27 + 15, 0x64AF1970uLL);
    memcpy(v28 + 14, v16, v27);
    v28[v27 + 14] = 0;
    *((_WORD *)v28 + 6) = v27;
    *((_DWORD *)v28 + 2) = a6;
    uint64_t v24 = (v26 + 1);
    int v25 = 2;
    *(void *)int v28 = 0;
    v15[v26] = v28;
  }
  qsort(v15, (int)v24, 8uLL, (int (__cdecl *)(const void *, const void *))sub_21617270C);
  unsigned int v29 = (void *)*v15;
  uint64_t v30 = (void *)*v15;
  if ((int)v24 >= 2)
  {
    unint64_t v31 = v15 + 1;
    uint64_t v32 = v24 - 1;
    unint64_t v33 = (void *)*v15;
    do
    {
      unsigned int v34 = (void *)*v31++;
      uint64_t v30 = v34;
      *unint64_t v33 = v34;
      unint64_t v33 = v34;
      --v32;
    }
    while (v32);
  }
  void *v30 = 0;
  *int v12 = v29;
  free(v15);
  *a7 = v25;
  if (v24 > *(_DWORD *)(v13 + 2088)) {
    sub_216368828();
  }
  return v24;
}

_DWORD *sub_2161725A8(uint64_t a1, unsigned __int16 *a2, int *a3)
{
  uint64_t v6 = malloc_type_calloc(1uLL, 0x804uLL, 0x10000406A7154B6uLL);
  if (a2)
  {
    do
    {
      int v7 = a2[6];
      uint64_t v8 = *((unsigned int *)a2 + 2);
      if (a2[6])
      {
        uint64_t v9 = *(void *)&v6[2 * *((unsigned __int8 *)a2 + 14) + 1];
        if (v9)
        {
          unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFFCLL;
          unsigned int v10 = sub_2161723A0(a1, &v19, (uint64_t)(a2 + 7), v7, 1u, v8, a3);
          uint64_t v11 = v19;
          if (v10 >= *(_DWORD *)(a1 + 2088))
          {
            uint64_t v11 = sub_2161725A8(a1, v19, a3);
            uint64_t v12 = 1;
          }
          else
          {
            uint64_t v12 = 2;
          }
          uint64_t v15 = v12 | v11;
          uint64_t v16 = *((unsigned __int8 *)a2 + 14);
        }
        else
        {
          size_t v13 = (v7 - 1);
          unint64_t v14 = (unint64_t)malloc_type_calloc(1uLL, v13 + 15, 0x64AF1970uLL);
          memcpy((void *)(v14 + 14), (char *)a2 + 15, v13);
          *(unsigned char *)(v14 + 14 + v13) = 0;
          *(_WORD *)(v14 + 12) = v13;
          *(_DWORD *)(v14 + 8) = v8;
          *(void *)unint64_t v14 = 0;
          uint64_t v15 = v14 | 2;
          uint64_t v16 = *((unsigned __int8 *)a2 + 14);
        }
        *(void *)&v6[2 * v16 + 1] = v15;
      }
      else
      {
        _DWORD *v6 = v8;
      }
      uint64_t v17 = *(unsigned __int16 **)a2;
      free(a2);
      a2 = v17;
    }
    while (v17);
  }
  return v6;
}

uint64_t sub_21617270C(void *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = (const void *)(*a1 + 14);
  uint64_t v5 = (const void *)(*a2 + 14);
  unsigned int v6 = *(unsigned __int16 *)(v2 + 12);
  unsigned int v7 = *(unsigned __int16 *)(v3 + 12);
  unsigned int v8 = v6 - v7;
  if ((int)v6 >= (int)v7) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = v6;
  }
  LODWORD(result) = memcmp(v4, v5, v9);
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

uint64_t sub_216172754(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, unsigned int a5, int a6, float *a7, int *a8, float a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = *a2;
  char v18 = (uint64_t *)malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2088) + 1), 0xCCEAD6FFuLL);
  unint64_t v19 = (const void *)(a3 + a5);
  if (v17)
  {
    uint64_t v20 = 0;
    int v21 = 0;
    float v22 = 0.0;
    do
    {
      uint64_t v23 = v20;
      size_t v24 = *((unsigned __int16 *)v17 + 10);
      if (v24 + a5 == a4 && !memcmp(v19, (char *)v17 + 22, v24))
      {
        *((_DWORD *)v17 + 4) = a6;
        float v25 = *((float *)v17 + 3);
        if (*(void *)(a11 + 24)) {
          sub_216172BAC(a11, a10, v25, a9);
        }
        else {
          float v26 = v25 + a9;
        }
        *((float *)v17 + 3) = v26;
        int v21 = 1;
      }
      if (*((float *)v17 + 2) > v22) {
        float v22 = *((float *)v17 + 2);
      }
      ++v20;
      v18[v23] = (uint64_t)v17;
      uint64_t v17 = (uint64_t *)*v17;
    }
    while (v17);
    if (v21)
    {
      int v27 = 1;
      uint64_t v28 = v23 + 1;
      uint64_t v29 = a1;
      goto LABEL_18;
    }
  }
  else
  {
    LODWORD(v20) = 0;
    float v22 = 0.0;
  }
  uint64_t v29 = a1;
  if (v22 < a9) {
    float v22 = a9;
  }
  size_t v30 = a4 - a5;
  unint64_t v31 = (char *)malloc_type_calloc(1uLL, v30 + 23, 0x35949B46uLL);
  memcpy(v31 + 22, v19, v30);
  v31[v30 + 22] = 0;
  *((_WORD *)v31 + 10) = v30;
  *((_DWORD *)v31 + 4) = a6;
  *((float *)v31 + 2) = v22;
  *((float *)v31 + 3) = a9;
  uint64_t v28 = (v20 + 1);
  int v27 = 2;
  *(void *)unint64_t v31 = 0;
  v18[v20] = (uint64_t)v31;
LABEL_18:
  qsort(v18, (int)v28, 8uLL, (int (__cdecl *)(const void *, const void *))sub_216172C0C);
  uint64_t v32 = (void *)*v18;
  *a7 = v22;
  unint64_t v33 = v32;
  if ((int)v28 >= 2)
  {
    uint64_t v34 = (v28 - 1);
    uint64_t v35 = v18 + 1;
    unsigned int v36 = v32;
    do
    {
      uint64_t v37 = *v35++;
      unint64_t v33 = (void *)v37;
      void *v36 = v37;
      *(float *)(v37 + 8) = *a7;
      unsigned int v36 = (void *)v37;
      --v34;
    }
    while (v34);
  }
  *unint64_t v33 = 0;
  *a2 = v32;
  free(v18);
  *a8 = v27;
  if (v28 > *(_DWORD *)(v29 + 2088)) {
    sub_216368854();
  }
  return v28;
}

float *sub_216172980(uint64_t a1, unsigned __int16 *a2, float *a3, int *a4)
{
  v25[4] = *MEMORY[0x263EF8340];
  unsigned int v8 = (float *)malloc_type_calloc(1uLL, 0x80CuLL, 0x10000408B9410F9uLL);
  *a3 = 0.0;
  if (a2)
  {
    do
    {
      float v22 = 0.0;
      int v9 = a2[10];
      int v10 = *((_DWORD *)a2 + 4);
      float v11 = *((float *)a2 + 3);
      v24[3] = 0;
      if (v9)
      {
        uint64_t v12 = *(void *)&v8[2 * *((unsigned __int8 *)a2 + 22) + 3];
        if (v12)
        {
          uint64_t v23 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
          v25[3] = 0;
          unsigned int v13 = sub_216172754(a1, &v23, (uint64_t)(a2 + 11), v9, 1u, v10, &v22, a4, v11, 0, (uint64_t)v25);
          sub_2161753B8(v25);
          uint64_t v14 = (uint64_t)v23;
          if (v13 >= *(_DWORD *)(a1 + 2088))
          {
            uint64_t v14 = sub_216172980(a1, v23, &v22, a4);
            uint64_t v15 = 1;
          }
          else
          {
            uint64_t v15 = 2;
          }
          *(void *)&v8[2 * *((unsigned __int8 *)a2 + 22) + 3] = v15 | v14;
          float v11 = v22;
        }
        else
        {
          size_t v16 = (v9 - 1);
          unint64_t v17 = (unint64_t)malloc_type_calloc(1uLL, v16 + 23, 0x35949B46uLL);
          memcpy((void *)(v17 + 22), (char *)a2 + 23, v16);
          *(unsigned char *)(v17 + 22 + v16) = 0;
          *(_WORD *)(v17 + 20) = v16;
          *(_DWORD *)(v17 + 16) = v10;
          *(float *)(v17 + 8) = v11;
          *(float *)(v17 + 12) = v11;
          *(void *)unint64_t v17 = 0;
          *(void *)&v8[2 * *((unsigned __int8 *)a2 + 22) + 3] = v17 | 2;
        }
      }
      else
      {
        v8[1] = v11;
        *((_DWORD *)v8 + 2) = v10;
      }
      sub_2161753B8(v24);
      float v18 = *a3;
      if (v11 > *a3) {
        float v18 = v11;
      }
      *a3 = v18;
      unint64_t v19 = *(unsigned __int16 **)a2;
      free(a2);
      a2 = v19;
    }
    while (v19);
    float v20 = *a3;
  }
  else
  {
    float v20 = 0.0;
  }
  *unsigned int v8 = v20;
  return v8;
}

void sub_216172B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_2161753B8((uint64_t *)va1);
  sub_2161753B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216172BAC(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8 = a2;
  float v6 = a4;
  float v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, float *, float *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_216172C0C(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(*(void *)a1 + 12);
  float v3 = *(float *)(*(void *)a2 + 12);
  if (v2 == v3)
  {
    unsigned int v4 = *(_DWORD *)(*(void *)a1 + 16);
    unsigned int v5 = *(_DWORD *)(*(void *)a2 + 16);
    BOOL v6 = v4 == v5;
    if (v4 > v5) {
      unsigned int v7 = -1;
    }
    else {
      unsigned int v7 = 1;
    }
    if (v6) {
      return 0;
    }
    else {
      return v7;
    }
  }
  else if ((float)(v2 - v3) <= 0.0)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

BOOL sub_216172C54(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  char v38 = 0;
  if (a5 < a4)
  {
    int v15 = *(_DWORD *)(a2 + 4 * a3[a5]);
    uint64_t v16 = v15 & 3;
    switch(v16)
    {
      case 3:
        uint64_t v34 = *(void *)(a1 + 2080);
        sub_216174098((uint64_t)v43, a8);
        float v18 = v43;
        uint64_t v19 = sub_2161739EC(a1, (int8x8_t *)((v15 & 0xFFFFFFFC) + v34), a3, a4, a5 + 1, a6, a7, (uint64_t)v43);
        goto LABEL_29;
      case 2:
        uint64_t v35 = *(void *)(a1 + 2080);
        sub_216174098((uint64_t)v42, a8);
        float v18 = v42;
        uint64_t v19 = sub_216173E78((unsigned int *)((v15 & 0xFFFFFFFC) + v35), a3, a4, a5 + 1, a6, a7, (uint64_t)v42);
        goto LABEL_29;
      case 1:
        uint64_t v17 = *(void *)(a1 + 2080);
        sub_216174098((uint64_t)v44, a8);
        float v18 = v44;
        uint64_t v19 = sub_216172C54(a1, (v15 & 0xFFFFFFFC) + v17, a3, a4, a5 + 1, a6, a7, v44);
LABEL_29:
        BOOL v25 = v19;
        sub_216174280(v18);
        return v25;
    }
    return 0;
  }
  int v20 = *(_DWORD *)(a2 + 1024);
  if (!v20)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_15;
  }
  int v21 = *(_DWORD *)(a2 + 1032);
  char v22 = a6;
  uint64_t v23 = malloc_type_malloc(a4 + 21, 0x64E2CA22uLL);
  v23[4] = a4;
  *((unsigned char *)v23 + a4 + 20) = 0;
  memcpy(v23 + 5, a3, a4);
  v23[2] = v20;
  _DWORD *v23 = v21;
  v23[3] = 1;
  sub_21617402C(a8, a7, (uint64_t)v23, 1, (uint64_t)&v38);
  BOOL v24 = v23[3]-- == 1;
  if (v24) {
    free(v23);
  }
  BOOL v25 = v38 != 0;
  if (!v38 && (v22 & 1) == 0)
  {
LABEL_15:
    uint64_t v26 = 0;
    uint64_t v27 = (a4 + 1);
    while (1)
    {
      int v28 = *(_DWORD *)(a2 + 4 * v26);
      a3[a5] = v26;
      uint64_t v29 = v28 & 3;
      switch(v29)
      {
        case 3:
          uint64_t v32 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v40, a8);
          char v38 = sub_2161739EC(a1, (int8x8_t *)((v28 & 0xFFFFFFFC) + v32), a3, v27, a5 + 1, 0, a7, (uint64_t)v40);
          unint64_t v31 = v40;
          break;
        case 2:
          uint64_t v33 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v39, a8);
          char v38 = sub_216173E78((unsigned int *)((v28 & 0xFFFFFFFC) + v33), a3, v27, a5 + 1, 0, a7, (uint64_t)v39);
          unint64_t v31 = v39;
          break;
        case 1:
          uint64_t v30 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v41, a8);
          char v38 = sub_216172C54(a1, (v28 & 0xFFFFFFFC) + v30, a3, v27, a5 + 1, 0, a7, v41);
          unint64_t v31 = v41;
          break;
        default:
          goto LABEL_23;
      }
      sub_216174280(v31);
LABEL_23:
      BOOL v25 = v38 != 0;
      if (!v38)
      {
        BOOL v24 = v26++ == 255;
        if (!v24) {
          continue;
        }
      }
      return v25;
    }
  }
  return v25;
}

void sub_216172FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_216174280(va);
  _Unwind_Resume(a1);
}

uint64_t sub_216173004(uint64_t result, _DWORD *a2, int a3, unsigned char *a4)
{
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
LABEL_5:
      *(_DWORD *)(result + 4) = a2[2];
      *(_DWORD *)(result + 8) = *a2;
LABEL_8:
      *a4 = 1;
      return result;
    }
    if (!*(_DWORD *)result)
    {
      if (!a3) {
        return result;
      }
      goto LABEL_5;
    }
    char v5 = 0;
    if (*(void *)(result + 48))
    {
      uint64_t result = sub_216174130(result + 24, *(void *)(result + 16), (uint64_t)a2, (uint64_t)&v5);
      if (v5) {
        goto LABEL_8;
      }
    }
  }
  return result;
}

BOOL sub_216173094(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  char v37 = 0;
  if (a5 < a4)
  {
    int v15 = *(_DWORD *)(a2 + 4 * a3[a5]);
    uint64_t v16 = v15 & 3;
    switch(v16)
    {
      case 3:
        uint64_t v33 = *(void *)(a1 + 2080);
        sub_216174098((uint64_t)v42, a8);
        float v18 = v42;
        uint64_t v19 = sub_216174304(a1, (int8x8_t *)((v15 & 0xFFFFFFFC) + v33), a3, a4, a5 + 1, a6, a7, (uint64_t)v42);
        goto LABEL_29;
      case 2:
        uint64_t v34 = *(void *)(a1 + 2080);
        sub_216174098((uint64_t)v41, a8);
        float v18 = v41;
        uint64_t v19 = sub_21617478C(a1, (unsigned int *)((v15 & 0xFFFFFFFC) + v34), a3, a4, a5 + 1, a6, a7, (uint64_t)v41);
        goto LABEL_29;
      case 1:
        uint64_t v17 = *(void *)(a1 + 2080);
        sub_216174098((uint64_t)v43, a8);
        float v18 = v43;
        uint64_t v19 = sub_216173094(a1, (v15 & 0xFFFFFFFC) + v17, a3, a4, a5 + 1, a6, a7, v43);
LABEL_29:
        BOOL v24 = v19;
        sub_216174280(v18);
        return v24;
    }
    return 0;
  }
  int v20 = *(_DWORD *)(a2 + 1024);
  if (!v20)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_15;
  }
  char v21 = a6;
  char v22 = malloc_type_malloc(a4 + 21, 0x64E2CA22uLL);
  void v22[4] = a4;
  *((unsigned char *)v22 + a4 + 20) = 0;
  memcpy(v22 + 5, a3, a4);
  v22[2] = v20;
  *char v22 = 0;
  v22[3] = 1;
  sub_21617402C(a8, a7, (uint64_t)v22, 1, (uint64_t)&v37);
  BOOL v23 = v22[3]-- == 1;
  if (v23) {
    free(v22);
  }
  BOOL v24 = v37 != 0;
  if (!v37 && (v21 & 1) == 0)
  {
LABEL_15:
    uint64_t v25 = 0;
    uint64_t v26 = (a4 + 1);
    while (1)
    {
      int v27 = *(_DWORD *)(a2 + 4 * v25);
      a3[a5] = v25;
      uint64_t v28 = v27 & 3;
      switch(v28)
      {
        case 3:
          uint64_t v31 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v39, a8);
          char v37 = sub_216174304(a1, (int8x8_t *)((v27 & 0xFFFFFFFC) + v31), a3, v26, a5 + 1, 0, a7, (uint64_t)v39);
          uint64_t v30 = v39;
          break;
        case 2:
          uint64_t v32 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v38, a8);
          char v37 = sub_21617478C(a1, (unsigned int *)((v27 & 0xFFFFFFFC) + v32), a3, v26, a5 + 1, 0, a7, (uint64_t)v38);
          uint64_t v30 = v38;
          break;
        case 1:
          uint64_t v29 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v40, a8);
          char v37 = sub_216173094(a1, (v27 & 0xFFFFFFFC) + v29, a3, v26, a5 + 1, 0, a7, v40);
          uint64_t v30 = v40;
          break;
        default:
          goto LABEL_23;
      }
      sub_216174280(v30);
LABEL_23:
      BOOL v24 = v37 != 0;
      if (!v37)
      {
        BOOL v23 = v25++ == 255;
        if (!v23) {
          continue;
        }
      }
      return v24;
    }
  }
  return v24;
}

void sub_2161733E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_216174280(va);
  _Unwind_Resume(a1);
}

BOOL sub_216173440(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  char v33 = 0;
  if (a4 < a3)
  {
    uint64_t v14 = *(void *)(a1 + 8 * a2[a4] + 12);
    if ((v14 & 3) == 2)
    {
      sub_216174098((uint64_t)v36, a7);
      int v15 = v36;
      uint64_t v16 = sub_216174B88(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v36);
      goto LABEL_25;
    }
    if ((v14 & 3) == 1)
    {
      sub_216174098((uint64_t)v37, a7);
      int v15 = v37;
      uint64_t v16 = sub_216173440(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v37);
LABEL_25:
      BOOL v21 = v16;
      sub_216174280(v15);
      return v21;
    }
    return 0;
  }
  int v17 = *(_DWORD *)(a1 + 8);
  if (!v17)
  {
    if (a5) {
      return 0;
    }
    goto LABEL_14;
  }
  int v18 = *(_DWORD *)(a1 + 4);
  uint64_t v19 = malloc_type_malloc(a4 + 21, 0x64E2CA22uLL);
  v19[4] = a4;
  *((unsigned char *)v19 + a4 + 20) = 0;
  memcpy(v19 + 5, a2, a4);
  v19[2] = v17;
  *uint64_t v19 = v18;
  v19[3] = 1;
  sub_21617402C(a7, a6, (uint64_t)v19, 1, (uint64_t)&v33);
  BOOL v20 = v19[3]-- == 1;
  if (v20) {
    free(v19);
  }
  BOOL v21 = v33 != 0;
  if (!v33 && (a5 & 1) == 0)
  {
LABEL_14:
    uint64_t v22 = 0;
    uint64_t v23 = (a3 + 1);
    uint64_t v24 = a4 + 1;
    uint64_t v25 = a1 + 12;
    uint64_t v26 = a4;
    while (1)
    {
      uint64_t v27 = *(void *)(v25 + 8 * v22);
      a2[v26] = v22;
      if ((v27 & 3) == 2)
      {
        sub_216174098((uint64_t)v34, a7);
        unint64_t v31 = v27 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v29 = v34;
        char v30 = sub_216174B88(v31, a2, v23, v24, 0, a6, (uint64_t)v34);
      }
      else
      {
        if ((v27 & 3) != 1) {
          goto LABEL_20;
        }
        sub_216174098((uint64_t)v35, a7);
        unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v29 = v35;
        char v30 = sub_216173440(v28, a2, v23, v24, 0, a6, v35);
      }
      char v33 = v30;
      sub_216174280(v29);
LABEL_20:
      BOOL v21 = v33 != 0;
      if (!v33)
      {
        BOOL v20 = v22++ == 255;
        if (!v20) {
          continue;
        }
      }
      return v21;
    }
  }
  return v21;
}

void sub_2161736DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_216174280(va);
  _Unwind_Resume(a1);
}

BOOL sub_21617371C(int *a1, unsigned char *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  char v32 = 0;
  if (a4 < a3)
  {
    uint64_t v14 = *(void *)&a1[2 * a2[a4] + 1];
    if ((v14 & 3) == 2)
    {
      sub_216174098((uint64_t)v35, a7);
      int v15 = v35;
      uint64_t v16 = sub_216174D18(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v35);
      goto LABEL_25;
    }
    if ((v14 & 3) == 1)
    {
      sub_216174098((uint64_t)v36, a7);
      int v15 = v36;
      uint64_t v16 = sub_21617371C(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v36);
LABEL_25:
      BOOL v20 = v16;
      sub_216174280(v15);
      return v20;
    }
    return 0;
  }
  int v17 = *a1;
  if (!*a1)
  {
    if (a5) {
      return 0;
    }
    goto LABEL_14;
  }
  int v18 = malloc_type_malloc(a4 + 21, 0x64E2CA22uLL);
  v18[4] = a4;
  *((unsigned char *)v18 + a4 + 20) = 0;
  memcpy(v18 + 5, a2, a4);
  v18[2] = v17;
  *int v18 = 0;
  v18[3] = 1;
  sub_21617402C(a7, a6, (uint64_t)v18, 1, (uint64_t)&v32);
  BOOL v19 = v18[3]-- == 1;
  if (v19) {
    free(v18);
  }
  BOOL v20 = v32 != 0;
  if (!v32 && (a5 & 1) == 0)
  {
LABEL_14:
    uint64_t v21 = 0;
    uint64_t v22 = (a3 + 1);
    uint64_t v23 = a4 + 1;
    uint64_t v24 = a1 + 1;
    uint64_t v25 = a4;
    while (1)
    {
      uint64_t v26 = *(void *)&v24[2 * v21];
      a2[v25] = v21;
      if ((v26 & 3) == 2)
      {
        sub_216174098((uint64_t)v33, a7);
        unint64_t v30 = v26 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v28 = v33;
        char v29 = sub_216174D18(v30, a2, v22, v23, 0, a6, (uint64_t)v33);
      }
      else
      {
        if ((v26 & 3) != 1) {
          goto LABEL_20;
        }
        sub_216174098((uint64_t)v34, a7);
        unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v28 = v34;
        char v29 = sub_21617371C(v27, a2, v22, v23, 0, a6, v34);
      }
      char v32 = v29;
      sub_216174280(v28);
LABEL_20:
      BOOL v20 = v32 != 0;
      if (!v32)
      {
        BOOL v19 = v21++ == 255;
        if (!v19) {
          continue;
        }
      }
      return v20;
    }
  }
  return v20;
}

void sub_2161739AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_216174280(va);
  _Unwind_Resume(a1);
}

BOOL sub_2161739EC(uint64_t a1, int8x8_t *a2, unsigned char *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  char v55 = 0;
  if (a5 < a4)
  {
    unint64_t v14 = a3[a5];
    uint64_t v15 = v14 >> 6;
    int8x8_t v16 = a2[v14 >> 6];
    uint64_t v17 = 1 << v14;
    if (((1 << v14) & *(void *)&v16) != 0)
    {
      if (v14 >= 0x40)
      {
        int v18 = 0;
        if (v15 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v15;
        }
        size_t v39 = a2;
        do
        {
          int8x8_t v40 = *v39++;
          uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
          v41.i16[0] = vaddlv_u8(v41);
          v18 += v41.i32[0];
          --v15;
        }
        while (v15);
      }
      else
      {
        int v18 = 0;
      }
      uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)((v17 - 1) & *(void *)&v16));
      v42.i16[0] = vaddlv_u8(v42);
      __int32 v43 = a2[5].i32[v18 + v42.i32[0] + 1];
      int v44 = v43 & 3;
      switch(v44)
      {
        case 1:
          uint64_t v49 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v61, a8);
          uint64_t v50 = (v43 & 0xFFFFFFFC) + v49;
          uint64_t v47 = v61;
          uint64_t v48 = sub_216172C54(a1, v50, a3, a4, a5 + 1, a6, a7, v61);
          goto LABEL_44;
        case 2:
          uint64_t v51 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v59, a8);
          uint64_t v47 = v59;
          uint64_t v48 = sub_216173E78((unsigned int *)((v43 & 0xFFFFFFFC) + v51), a3, a4, a5 + 1, a6, a7, (uint64_t)v59);
          goto LABEL_44;
        case 3:
          uint64_t v45 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v60, a8);
          uint64_t v46 = (v43 & 0xFFFFFFFC) + v45;
          uint64_t v47 = v60;
          uint64_t v48 = sub_2161739EC(a1, v46, a3, a4, a5 + 1, a6, a7, v60);
LABEL_44:
          BOOL v23 = v48;
          sub_216174280(v47);
          return v23;
      }
    }
    return 0;
  }
  __int32 v19 = a2[5].i32[0];
  if (!v19)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_13;
  }
  __int32 v20 = a2[4].i32[1];
  uint64_t v21 = malloc_type_malloc(a4 + 21, 0x64E2CA22uLL);
  v21[4] = a4;
  *((unsigned char *)v21 + a4 + 20) = 0;
  memcpy(v21 + 5, a3, a4);
  v21[2] = v19;
  *uint64_t v21 = v20;
  v21[3] = 1;
  sub_21617402C(a8, a7, (uint64_t)v21, 1, (uint64_t)&v55);
  if (v21[3]-- == 1) {
    free(v21);
  }
  BOOL v23 = v55 != 0;
  if (!v55 && (a6 & 1) == 0)
  {
LABEL_13:
    unint64_t v24 = 0;
    uint64_t v25 = (a4 + 1);
    while (1)
    {
      if (v24 >> 6 <= 1) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = v24 >> 6;
      }
      int8x8_t v27 = a2[v24 >> 6];
      if ((*(void *)&v27 & (1 << v24)) == 0) {
        goto LABEL_29;
      }
      if (v24 >= 0x40)
      {
        int v28 = 0;
        char v29 = a2;
        do
        {
          int8x8_t v30 = *v29++;
          uint8x8_t v31 = (uint8x8_t)vcnt_s8(v30);
          v31.i16[0] = vaddlv_u8(v31);
          v28 += v31.i32[0];
          --v26;
        }
        while (v26);
      }
      else
      {
        int v28 = 0;
      }
      uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v27 & ((1 << v24) - 1)));
      v32.i16[0] = vaddlv_u8(v32);
      __int32 v33 = a2[5].i32[v28 + v32.i32[0] + 1];
      a3[a5] = v24;
      int v34 = v33 & 3;
      switch(v34)
      {
        case 1:
          uint64_t v37 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v58, a8);
          char v55 = sub_216172C54(a1, v37 + (v33 & 0xFFFFFFFC), a3, v25, a5 + 1, 0, a7, v58);
          unsigned int v36 = v58;
          break;
        case 2:
          uint64_t v38 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v56, a8);
          char v55 = sub_216173E78((unsigned int *)(v38 + (v33 & 0xFFFFFFFC)), a3, v25, a5 + 1, 0, a7, (uint64_t)v56);
          unsigned int v36 = v56;
          break;
        case 3:
          uint64_t v35 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v57, a8);
          char v55 = sub_2161739EC(a1, v35 + (v33 & 0xFFFFFFFC), a3, v25, a5 + 1, 0, a7, v57);
          unsigned int v36 = v57;
          break;
        default:
          goto LABEL_29;
      }
      sub_216174280(v36);
LABEL_29:
      BOOL v23 = v55 != 0;
      if (!v55 && ++v24 != 256) {
        continue;
      }
      return v23;
    }
  }
  return v23;
}

void sub_216173E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_216174280(va);
  _Unwind_Resume(a1);
}

uint64_t sub_216173E78(unsigned int *a1, unsigned char *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  char v37 = 0;
  unsigned int v7 = *a1;
  if (!*a1) {
    return 0;
  }
  int v8 = a4;
  int v9 = a3;
  unsigned int v11 = 0;
  uint64_t v12 = &a2[a4];
  int v13 = a3 - a4;
  size_t __n = (int)(a3 - a4);
  char v29 = v12;
  __dst = &a2[a3];
  size_t v28 = a3;
  while (1)
  {
    unint64_t v14 = (char *)a1 + v11;
    uint64_t v15 = *((unsigned __int16 *)v14 + 8);
    if (v13 > (int)v15) {
      goto LABEL_14;
    }
    int8x8_t v16 = v14 + 8;
    uint64_t v17 = v14 + 18;
    if (memcmp(v14 + 18, v12, __n)) {
      goto LABEL_14;
    }
    char v18 = a5;
    if (v13 == v15) {
      char v18 = 0;
    }
    if (v18) {
      goto LABEL_14;
    }
    size_t v19 = (v15 + v8);
    size_t v20 = (v19 - v9);
    size_t v21 = v28;
    if ((int)v20 >= 1)
    {
      memcpy(__dst, &v17[v15 - (int)v20], v20);
      size_t v21 = v19;
      int v9 = v19;
    }
    a2[v21] = 0;
    int v22 = *((_DWORD *)v16 + 1);
    int v23 = *(_DWORD *)v16;
    unint64_t v24 = malloc_type_malloc(v21 + 21, 0x64E2CA22uLL);
    void v24[4] = v9;
    *((unsigned char *)v24 + v21 + 20) = 0;
    memcpy(v24 + 5, a2, v21);
    *unint64_t v24 = v23;
    v24[2] = v22;
    v24[3] = 1;
    sub_21617402C(a7, a6, (uint64_t)v24, v13 == v15, (uint64_t)&v37);
    int v25 = v24[3] - 1;
    v24[3] = v25;
    if (!v25) {
      free(v24);
    }
    int v9 = a3;
    int v8 = a4;
    uint64_t v12 = v29;
    if (v37) {
      return 1;
    }
    LODWORD(v15) = *((unsigned __int16 *)v16 + 4);
LABEL_14:
    v11 += v15 + 10;
    if (v11 >= v7) {
      return 0;
    }
  }
}

uint64_t sub_21617402C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  char v8 = a4;
  uint64_t v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t sub_216174098(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_216174130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_216174194()
{
}

void *sub_2161741A8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C73B8;
  result[1] = v3;
  return result;
}

uint64_t sub_2161741F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C73B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_21617421C(uint64_t a1, void *a2, void *a3, unsigned __int8 *a4, void *a5)
{
  return (*(uint64_t (**)(void, void, void, void))(a1 + 8))(*a2, *a3, *a4, *a5);
}

uint64_t sub_216174234(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC690)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216174274()
{
  return &unk_26C6BC690;
}

void *sub_216174280(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_216174304(uint64_t a1, int8x8_t *a2, char *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  char v55 = 0;
  if (a5 < a4)
  {
    unint64_t v14 = a3[a5];
    uint64_t v15 = v14 >> 6;
    int8x8_t v16 = a2[v14 >> 6];
    uint64_t v17 = 1 << v14;
    if (((1 << v14) & *(void *)&v16) != 0)
    {
      if (v14 >= 0x40)
      {
        int v18 = 0;
        if (v15 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v15;
        }
        uint64_t v38 = a2;
        do
        {
          int8x8_t v39 = *v38++;
          uint8x8_t v40 = (uint8x8_t)vcnt_s8(v39);
          v40.i16[0] = vaddlv_u8(v40);
          v18 += v40.i32[0];
          --v15;
        }
        while (v15);
      }
      else
      {
        int v18 = 0;
      }
      uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)((v17 - 1) & *(void *)&v16));
      v41.i16[0] = vaddlv_u8(v41);
      __int32 v42 = a2[4].i32[v18 + v41.i32[0] + 1];
      int v43 = v42 & 3;
      switch(v43)
      {
        case 1:
          uint64_t v48 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v61, a8);
          uint64_t v49 = (v42 & 0xFFFFFFFC) + v48;
          uint64_t v46 = v61;
          uint64_t v47 = sub_216173094(a1, v49, a3, a4, a5 + 1, a6, a7, v61);
          goto LABEL_44;
        case 2:
          uint64_t v50 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v59, a8);
          uint64_t v51 = (unsigned int *)((v42 & 0xFFFFFFFC) + v50);
          uint64_t v46 = v59;
          uint64_t v47 = sub_21617478C(a1, v51, a3, a4, a5 + 1, a6, a7, (uint64_t)v59);
          goto LABEL_44;
        case 3:
          uint64_t v44 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v60, a8);
          uint64_t v45 = (v42 & 0xFFFFFFFC) + v44;
          uint64_t v46 = v60;
          uint64_t v47 = sub_216174304(a1, v45, a3, a4, a5 + 1, a6, a7, v60);
LABEL_44:
          BOOL v22 = v47;
          sub_216174280(v46);
          return v22;
      }
    }
    return 0;
  }
  __int32 v19 = a2[4].i32[0];
  if (!v19)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_13;
  }
  size_t v20 = malloc_type_malloc(a4 + 21, 0x64E2CA22uLL);
  v20[4] = a4;
  *((unsigned char *)v20 + a4 + 20) = 0;
  memcpy(v20 + 5, a3, a4);
  v20[2] = v19;
  *size_t v20 = 0;
  v20[3] = 1;
  sub_21617402C(a8, a7, (uint64_t)v20, 1, (uint64_t)&v55);
  if (v20[3]-- == 1) {
    free(v20);
  }
  BOOL v22 = v55 != 0;
  if (!v55 && (a6 & 1) == 0)
  {
LABEL_13:
    unint64_t v23 = 0;
    uint64_t v24 = (a4 + 1);
    while (1)
    {
      if (v23 >> 6 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v23 >> 6;
      }
      int8x8_t v26 = a2[v23 >> 6];
      if ((*(void *)&v26 & (1 << v23)) == 0) {
        goto LABEL_29;
      }
      if (v23 >= 0x40)
      {
        int v27 = 0;
        size_t v28 = a2;
        do
        {
          int8x8_t v29 = *v28++;
          uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
          v30.i16[0] = vaddlv_u8(v30);
          v27 += v30.i32[0];
          --v25;
        }
        while (v25);
      }
      else
      {
        int v27 = 0;
      }
      uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v26 & ((1 << v23) - 1)));
      v31.i16[0] = vaddlv_u8(v31);
      __int32 v32 = a2[4].i32[v27 + v31.i32[0] + 1];
      a3[a5] = v23;
      int v33 = v32 & 3;
      switch(v33)
      {
        case 1:
          uint64_t v36 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v58, a8);
          char v55 = sub_216173094(a1, v36 + (v32 & 0xFFFFFFFC), a3, v24, a5 + 1, 0, a7, v58);
          uint64_t v35 = v58;
          break;
        case 2:
          uint64_t v37 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v56, a8);
          char v55 = sub_21617478C(a1, (unsigned int *)(v37 + (v32 & 0xFFFFFFFC)), a3, v24, a5 + 1, 0, a7, (uint64_t)v56);
          uint64_t v35 = v56;
          break;
        case 3:
          uint64_t v34 = *(void *)(a1 + 2080);
          sub_216174098((uint64_t)v57, a8);
          char v55 = sub_216174304(a1, v34 + (v32 & 0xFFFFFFFC), a3, v24, a5 + 1, 0, a7, v57);
          uint64_t v35 = v57;
          break;
        default:
          goto LABEL_29;
      }
      sub_216174280(v35);
LABEL_29:
      BOOL v22 = v55 != 0;
      if (!v55 && ++v23 != 256) {
        continue;
      }
      return v22;
    }
  }
  return v22;
}

void sub_216174734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_216174280(va);
  _Unwind_Resume(a1);
}

uint64_t sub_21617478C(uint64_t a1, unsigned int *a2, char *a3, unsigned int a4, int a5, char a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  unsigned int v9 = a4;
  uint64_t v66 = *MEMORY[0x263EF8340];
  char v64 = 0;
  int v11 = a4 - a5;
  unsigned int v12 = *a2;
  if ((*(unsigned char *)(a1 + 2064) & 4) != 0)
  {
    memset(__s1, 0, sizeof(__s1));
    if (v12)
    {
      size_t v28 = 0;
      unsigned int v29 = 0;
      int v52 = a5 - a4;
      __s2a = &a3[a5];
      uint64_t v51 = &a3[a4];
      do
      {
        uint8x8_t v30 = (char *)a2 + v29;
        uint64_t v31 = v30[10];
        if (v28)
        {
          uint64_t v32 = v28[6];
          if (v31 > v32) {
            memcpy((char *)__s1 + v32, v28 + 7, v31 - v32);
          }
        }
        size_t v28 = v30 + 4;
        unsigned int v33 = *((unsigned __int16 *)v30 + 4);
        int v34 = v33 + v31;
        if ((int)(v33 + v31) >= v11)
        {
          if (v9 == v8 || ((int)v31 >= v11 ? (int v35 = v11) : (int v35 = v31), !memcmp(__s1, __s2a, v35)))
          {
            unsigned int v36 = v11 - v31;
            if (v11 - (int)v31 < 0
              || ((int)v33 >= (int)v36 ? (size_t v37 = v36) : (size_t v37 = v33), !memcmp(v28 + 7, &__s2a[v31], v37)))
            {
              char v38 = a6;
              if (v11 == v34) {
                char v38 = 0;
              }
              if ((v38 & 1) == 0)
              {
                unsigned int v39 = v9;
                unsigned int v40 = v31 + v8;
                size_t v41 = v31 + v8 - v39;
                if ((int)v41 < 1)
                {
                  unsigned int v40 = v39;
                }
                else
                {
                  memcpy(v51, (char *)__s1 + v31 - (int)v41, v41);
                  unsigned int v33 = *((unsigned __int16 *)v28 + 2);
                  LODWORD(v31) = v28[6];
                }
                int v42 = v52 + v33 + v31;
                if (v42 < 1)
                {
                  uint64_t v44 = a3;
                }
                else
                {
                  int v43 = v42 - (v41 & ~((int)v41 >> 31));
                  uint64_t v44 = a3;
                  memcpy(&a3[v40], &v28[v33 - v43 + 7], v43);
                  v40 += v43;
                }
                char v54 = v11 == v34;
                v44[v40] = 0;
                int v45 = *(_DWORD *)v28;
                uint64_t v46 = malloc_type_malloc(v40 + 21, 0x64E2CA22uLL);
                v46[4] = v40;
                *((unsigned char *)v46 + v40 + 20) = 0;
                memcpy(v46 + 5, v44, v40);
                _DWORD *v46 = 0;
                v46[2] = v45;
                v46[3] = 1;
                sub_21617402C(a8, a7, (uint64_t)v46, v54, (uint64_t)&v64);
                int v47 = v46[3] - 1;
                v46[3] = v47;
                if (!v47) {
                  free(v46);
                }
                unsigned int v9 = a4;
                if (v64) {
                  return 1;
                }
                unsigned int v33 = *((unsigned __int16 *)v28 + 2);
                int v8 = a5;
              }
            }
          }
        }
        v29 += v33 + 7;
      }
      while (v29 < v12);
    }
  }
  else if (v12)
  {
    unsigned int v13 = 0;
    unint64_t v14 = &a3[a5];
    size_t v15 = v11;
    __dst = &a3[a4];
    size_t v50 = a4;
    uint64_t v53 = v14;
    do
    {
      int8x8_t v16 = (char *)a2 + v13;
      uint64_t v17 = *((unsigned __int16 *)v16 + 4);
      if (v11 <= (int)v17)
      {
        int v18 = v16 + 4;
        __int32 v19 = v16 + 10;
        if (!memcmp(v16 + 10, v14, v15))
        {
          char v20 = a6;
          if (v11 == v17) {
            char v20 = 0;
          }
          if ((v20 & 1) == 0)
          {
            size_t v21 = (v17 + v8);
            int v22 = a4;
            size_t v23 = v21 - a4;
            size_t v24 = v50;
            if ((int)v23 >= 1)
            {
              memcpy(__dst, &v19[v17 - (int)v23], v23);
              size_t v24 = v21;
              int v22 = v21;
            }
            a3[v24] = 0;
            int v25 = *(_DWORD *)v18;
            int8x8_t v26 = malloc_type_malloc(v24 + 21, 0x64E2CA22uLL);
            v26[4] = v22;
            *((unsigned char *)v26 + v24 + 20) = 0;
            memcpy(v26 + 5, a3, v24);
            *int8x8_t v26 = 0;
            v26[2] = v25;
            v26[3] = 1;
            sub_21617402C(a8, a7, (uint64_t)v26, v11 == v17, (uint64_t)&v64);
            int v27 = v26[3] - 1;
            v26[3] = v27;
            if (!v27) {
              free(v26);
            }
            int v8 = a5;
            size_t v15 = v11;
            unint64_t v14 = v53;
            if (v64) {
              return 1;
            }
            LODWORD(v17) = *((unsigned __int16 *)v18 + 2);
          }
        }
      }
      v13 += v17 + 6;
    }
    while (v13 < v12);
  }
  return 0;
}

uint64_t sub_216174B88(uint64_t result, unsigned char *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  char v30 = 0;
  if (result)
  {
    int v7 = a4;
    uint64_t v10 = result;
    int v11 = &a2[a4];
    size_t v12 = (int)(a3 - a4);
    size_t v26 = a3;
    char v13 = a5;
    __dst = &a2[a3];
    while (1)
    {
      uint64_t v14 = *(unsigned __int16 *)(v10 + 20);
      if ((int)v12 <= (int)v14 && !memcmp((const void *)(v10 + 22), v11, v12))
      {
        char v15 = v12 == v14 ? 0 : v13;
        if ((v15 & 1) == 0)
        {
          size_t v16 = (v14 + v7);
          size_t v17 = v16 - a3;
          size_t v18 = v26;
          int v19 = a3;
          if ((int)v17 >= 1)
          {
            memcpy(__dst, (const void *)(v10 + 22 + v14 - (int)v17), v17);
            size_t v18 = v16;
            int v19 = v16;
          }
          a2[v18] = 0;
          int v20 = *(_DWORD *)(v10 + 16);
          int v21 = *(_DWORD *)(v10 + 12);
          int v22 = malloc_type_malloc(v18 + 21, 0x64E2CA22uLL);
          void v22[4] = v19;
          *((unsigned char *)v22 + v18 + 20) = 0;
          memcpy(v22 + 5, a2, v18);
          *int v22 = v21;
          v22[2] = v20;
          v22[3] = 1;
          sub_21617402C(a7, a6, (uint64_t)v22, v12 == v14, (uint64_t)&v30);
          int v23 = v22[3] - 1;
          v22[3] = v23;
          if (!v23) {
            free(v22);
          }
          int v7 = a4;
          char v13 = a5;
          if (v30) {
            break;
          }
        }
      }
      uint64_t v10 = *(void *)v10;
      if (!v10) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_216174D18(uint64_t result, unsigned char *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  char v29 = 0;
  if (result)
  {
    int v7 = a4;
    uint64_t v10 = result;
    int v11 = &a2[a4];
    size_t v12 = (int)(a3 - a4);
    size_t v25 = a3;
    char v13 = a5;
    __dst = &a2[a3];
    while (1)
    {
      uint64_t v14 = *(unsigned __int16 *)(v10 + 12);
      if ((int)v12 <= (int)v14 && !memcmp((const void *)(v10 + 14), v11, v12))
      {
        char v15 = v12 == v14 ? 0 : v13;
        if ((v15 & 1) == 0)
        {
          size_t v16 = (v14 + v7);
          size_t v17 = v16 - a3;
          size_t v18 = v25;
          int v19 = a3;
          if ((int)v17 >= 1)
          {
            memcpy(__dst, (const void *)(v10 + 14 + v14 - (int)v17), v17);
            size_t v18 = v16;
            int v19 = v16;
          }
          a2[v18] = 0;
          int v20 = *(_DWORD *)(v10 + 8);
          int v21 = malloc_type_malloc(v18 + 21, 0x64E2CA22uLL);
          v21[4] = v19;
          *((unsigned char *)v21 + v18 + 20) = 0;
          memcpy(v21 + 5, a2, v18);
          *int v21 = 0;
          v21[2] = v20;
          v21[3] = 1;
          sub_21617402C(a7, a6, (uint64_t)v21, v12 == v14, (uint64_t)&v29);
          int v22 = v21[3] - 1;
          v21[3] = v22;
          if (!v22) {
            free(v21);
          }
          int v7 = a4;
          char v13 = a5;
          if (v29) {
            break;
          }
        }
      }
      uint64_t v10 = *(void *)v10;
      if (!v10) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_216174E9C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  unint64_t v8 = (*(void *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(a1 + 2080);
  if (*(unsigned char *)(a1 + 2064))
  {
    if (!a4)
    {
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(v8 + 1032);
      return 1;
    }
  }
  else if (!a4)
  {
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
    return 1;
  }
  sub_216174F54(a1, a2, *(unsigned int *)(v8 + 4 * *a3));

  return sub_21617166C(a1, a2, a3 + 1, (a4 - 1));
}

uint64_t sub_216174F54(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 != a3)
  {
    switch(a3 & 3)
    {
      case 1:
        unint64_t v3 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2080);
        if ((*(unsigned char *)(result + 2064) & 1) == 0)
        {
          int v4 = *(_DWORD *)(v3 + 1024);
          goto LABEL_13;
        }
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 1024);
        int v8 = *(_DWORD *)(v3 + 1032);
        goto LABEL_16;
      case 2:
        int v5 = *(_DWORD *)(result + 2064);
        if ((v5 & 4) != 0)
        {
          int v4 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2080));
          goto LABEL_13;
        }
        uint64_t v6 = (int *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2080));
        if ((v5 & 1) == 0)
        {
          int v4 = *v6;
          goto LABEL_13;
        }
        *(_DWORD *)(a2 + 16) = v6[1];
        int v8 = *v6;
        goto LABEL_16;
      case 3:
        int v7 = (_DWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2080));
        if (*(unsigned char *)(result + 2064))
        {
          *(_DWORD *)(a2 + 16) = v7[10];
          int v8 = v7[9];
LABEL_16:
          *(_DWORD *)(a2 + 20) = v8;
        }
        else
        {
          int v4 = v7[8];
LABEL_13:
          *(_DWORD *)(a2 + 16) = v4;
        }
LABEL_17:
        *(void *)a2 = a3;
        *(void *)(a2 + 8) = 0;
        break;
      default:
        *(_DWORD *)(a2 + 16) = 0;
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t sub_216175040(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, __n128 a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 8);
  if ((*(unsigned char *)(a1 + 2064) & 1) == 0)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v10 = *(unsigned int *)(a2 + 16);
    if (v10 > *(unsigned __int16 *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 12)) {
      sub_216368880();
    }
    if (!v9) {
      return 0;
    }
    unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      unsigned int v12 = *(unsigned __int16 *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 12);
      if (v11 != v9)
      {
        unsigned int v12 = *(unsigned __int16 *)(v11 + 12);
        if (v10 >= v12) {
          goto LABEL_19;
        }
        if (v10)
        {
          char v13 = (unsigned __int8 *)(v11 + 14);
          uint64_t v14 = *(unsigned int *)(a2 + 16);
          char v15 = (unsigned __int8 *)(v9 + 14);
          do
          {
            int v17 = *v13++;
            int v16 = v17;
            int v18 = *v15++;
            if (v16 != v18) {
              goto LABEL_19;
            }
          }
          while (--v14);
        }
      }
      LODWORD(v19) = 0;
      int v20 = *(_DWORD *)(a2 + 16);
      if (v10 < v12 && a4)
      {
        unint64_t v19 = 0;
        do
        {
          if (*(unsigned __int8 *)(v11 + v10 + 14 + v19) != a3[v19]) {
            break;
          }
          if (++v19 + v10 >= v12) {
            break;
          }
        }
        while (v19 < a4);
        int v20 = v10 + v19;
      }
      if (v19 == a4)
      {
        *(void *)(a2 + 8) = v11 | 2;
        if (v20 == v12)
        {
          *(_DWORD *)(a2 + 16) = v12;
          *(_DWORD *)(a2 + 20) = *(_DWORD *)(v11 + 8);
        }
        else
        {
          *(void *)(a2 + 16) = v10 + a4;
        }
        return 1;
      }
LABEL_19:
      unint64_t v11 = *(void *)v11;
      if (!v11) {
        return 0;
      }
    }
  }
  v35[1] = v35;
  v35[0] = *(void *)a2;
  a5.n128_u64[0] = *(void *)(a2 + 16);
  float v22 = *(float *)(a2 + 24);
  __n128 v38 = a5;
  MEMORY[0x270FA5388]();
  size_t v24 = (char *)v35 - v23;
  size_t v26 = *(unsigned int *)(a2 + 16);
  memcpy((char *)v35 - v23, (const void *)(v25 + 22), v26);
  unint64_t v27 = *(void *)a2 & 0xFFFFFFFFFFFFFFFCLL;
  if (v27)
  {
    int v37 = 0;
    unsigned int v28 = v26 + a4;
    size_t v36 = a4;
    do
    {
      unsigned int v29 = *(unsigned __int16 *)(v27 + 20);
      if (v28 <= v29 && !memcmp((const void *)(v27 + 22), v24, v26) && !memcmp((const void *)(v27 + 22 + v26), a3, v36))
      {
        if (v28 == v29)
        {
          *(void *)(a2 + 8) = v27 | 2;
          int v34 = *(_DWORD *)(v27 + 16);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(a2 + 16) = v28;
          *(_DWORD *)(a2 + 20) = v34;
          return 1;
        }
        __n128 v30 = v38;
        HIDWORD(v31) = 0;
        int v32 = v37;
        if (!v37)
        {
          uint64_t v8 = v27 | 2;
          float v22 = 0.0;
        }
        int v37 = 1;
        if (!v32)
        {
          LODWORD(v31) = v38.n128_u32[0] + a4;
          v30.n128_f64[0] = v31;
        }
        __n128 v38 = v30;
      }
      unint64_t v27 = *(void *)v27;
    }
    while (v27);
  }
  else
  {
    int v37 = 0;
  }
  *(void *)a2 = v35[0];
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v38.n128_u64[0];
  *(float *)(a2 + 24) = v22;
  return v37;
}

uint64_t sub_21617531C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 8) != a3)
  {
    uint64_t v3 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      if (v3 == 2)
      {
        unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(unsigned char *)(result + 2064) & 1) == 0)
        {
          if (*(_WORD *)(v6 + 12)) {
            int v5 = 0;
          }
          else {
            int v5 = *(_DWORD *)(v6 + 8);
          }
          goto LABEL_14;
        }
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(v6 + 16);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(v6 + 12);
        *(void *)a2 = a3;
      }
      else if (v3 == 1)
      {
        int v4 = (int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
        if ((*(unsigned char *)(result + 2064) & 1) == 0)
        {
          int v5 = *v4;
LABEL_14:
          *(_DWORD *)(a2 + 20) = v5;
          goto LABEL_15;
        }
        *(_DWORD *)(a2 + 20) = v4[2];
        *(_DWORD *)(a2 + 24) = v4[1];
      }
    }
    else
    {
      *(void *)(a2 + 20) = 0;
    }
LABEL_15:
    *(void *)(a2 + 8) = a3;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

void *sub_2161753B8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_21617543C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_2161754C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_216175558(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (*(void *)(a1 + 2080)) {
      sub_2163688AC();
    }
    uint64_t v2 = malloc_type_calloc(0x28uLL, 1uLL, 0xD2939DE6uLL);
    if (sub_21617153C(a1, (uint64_t)v2))
    {
      v2[1] = a2 | 1;
      *((_DWORD *)v2 + 5) = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v2 + 6) = *(_DWORD *)(a2 + 4);
    }
    else if (v2)
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

uint64_t sub_2161755F4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21610CB04();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216115A58(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_216175774(a1, v7);
    return sub_21617591C((uint64_t)v7);
  }
  return result;
}

void sub_216175674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617591C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21617568C()
{
}

void *sub_2161756A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7F68;
  result[1] = v3;
  return result;
}

uint64_t sub_2161756E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7F68;
  a2[1] = v2;
  return result;
}

uint64_t sub_216175714(uint64_t result)
{
  return result;
}

uint64_t sub_216175728(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC8D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216175768()
{
  return &unk_26C6BC8D0;
}

uint64_t sub_216175774(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2161757EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2161757EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v8 - ++**(_DWORD **)(result + 8) = *(void *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21617589C((uint64_t)v12);
  return v10;
}

uint64_t sub_21617589C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2161758D4(a1);
  }
  return a1;
}

void sub_2161758D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

uint64_t sub_21617591C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216175954(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_2161759B0()
{
}

void *sub_2161759C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7F10;
  result[1] = v3;
  return result;
}

uint64_t sub_216175A0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7F10;
  a2[1] = v2;
  return result;
}

void sub_216175A38(uint64_t a1, uint64_t a2, void **a3, unsigned int *a4, int *a5, int *a6)
{
  int v6 = *a5;
  int v7 = *a6;
  uint64_t v8 = *(uint64_t **)(a1 + 8);
  sub_21612F5FC(__p, *a3, *a4);
  unint64_t v9 = v8[1];
  unint64_t v10 = v8[2];
  if (v9 >= v10)
  {
    uint64_t v12 = (uint64_t)(v9 - *v8) >> 5;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v14 = v10 - *v8;
    if (v14 >> 4 > v13) {
      unint64_t v13 = v14 >> 4;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    v23[4] = v8 + 2;
    if (v15) {
      int v16 = (char *)sub_216115A58((uint64_t)(v8 + 2), v15);
    }
    else {
      int v16 = 0;
    }
    int v17 = &v16[32 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[32 * v15];
    long long v18 = *(_OWORD *)__p;
    *((void *)v17 + 2) = v22;
    *(_OWORD *)int v17 = v18;
    __p[1] = 0;
    uint64_t v22 = 0;
    __p[0] = 0;
    *((_DWORD *)v17 + 6) = v6;
    *((_DWORD *)v17 + 7) = v7;
    v23[2] = v17 + 32;
    sub_216175774(v8, v23);
    uint64_t v19 = v8[1];
    sub_21617591C((uint64_t)v23);
    int v20 = SHIBYTE(v22);
    v8[1] = v19;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v11 = *(_OWORD *)__p;
    *(void *)(v9 + 16) = v22;
    *(_OWORD *)unint64_t v9 = v11;
    *(_DWORD *)(v9 + 24) = v6;
    *(_DWORD *)(v9 + 2++**(_DWORD **)(result + 8) = v7;
    v8[1] = v9 + 32;
  }
}

void sub_216175B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216175BA8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC8C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216175BE8()
{
  return &unk_26C6BC8C0;
}

void sub_216175BF4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216175C48((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_216175C48(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void *sub_216175C98(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (*(void *)(a1 + 2080)) {
      sub_2163688AC();
    }
    uint64_t v2 = malloc_type_calloc(0x28uLL, 1uLL, 0xD2939DE6uLL);
    if (sub_21617153C(a1, (uint64_t)v2))
    {
      v2[1] = a2 | 1;
      *((_DWORD *)v2 + 5) = *(_DWORD *)a2;
    }
    else if (v2)
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

void sub_216175D30()
{
}

void *sub_216175D44(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7EB8;
  result[1] = v3;
  return result;
}

uint64_t sub_216175D8C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7EB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_216175DB8(uint64_t result)
{
  return result;
}

uint64_t sub_216175DCC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC8B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216175E0C()
{
  return &unk_26C6BC8B0;
}

void sub_216175E1C()
{
}

void *sub_216175E30(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7E60;
  result[1] = v3;
  return result;
}

uint64_t sub_216175E78(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7E60;
  a2[1] = v2;
  return result;
}

void sub_216175EA4(uint64_t a1, uint64_t a2, void **a3, unsigned int *a4, int *a5, int *a6)
{
  int v6 = *a5;
  int v7 = *a6;
  uint64_t v8 = *(uint64_t **)(a1 + 8);
  sub_21612F5FC(__p, *a3, *a4);
  unint64_t v9 = v8[1];
  unint64_t v10 = v8[2];
  if (v9 >= v10)
  {
    uint64_t v12 = (uint64_t)(v9 - *v8) >> 5;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v14 = v10 - *v8;
    if (v14 >> 4 > v13) {
      unint64_t v13 = v14 >> 4;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    v23[4] = v8 + 2;
    if (v15) {
      int v16 = (char *)sub_216115A58((uint64_t)(v8 + 2), v15);
    }
    else {
      int v16 = 0;
    }
    int v17 = &v16[32 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[32 * v15];
    long long v18 = *(_OWORD *)__p;
    *((void *)v17 + 2) = v22;
    *(_OWORD *)int v17 = v18;
    __p[1] = 0;
    uint64_t v22 = 0;
    __p[0] = 0;
    *((_DWORD *)v17 + 6) = v6;
    *((_DWORD *)v17 + 7) = v7;
    v23[2] = v17 + 32;
    sub_216175774(v8, v23);
    uint64_t v19 = v8[1];
    sub_21617591C((uint64_t)v23);
    int v20 = SHIBYTE(v22);
    v8[1] = v19;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v11 = *(_OWORD *)__p;
    *(void *)(v9 + 16) = v22;
    *(_OWORD *)unint64_t v9 = v11;
    *(_DWORD *)(v9 + 24) = v6;
    *(_DWORD *)(v9 + 2++**(_DWORD **)(result + 8) = v7;
    v8[1] = v9 + 32;
  }
}

void sub_216175FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216176014(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC8A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216176054()
{
  return &unk_26C6BC8A0;
}

uint64_t sub_216176060(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_2161760FC()
{
}

__n128 sub_216176110(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C7E08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + ++**(_DWORD **)(result + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216176164(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C7E08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

void sub_21617619C()
{
}

uint64_t sub_2161762C4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC890)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216176304()
{
  return &unk_26C6BC890;
}

void *sub_216176310(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_216176394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_21617642C()
{
  return AnalyticsSendEventLazy();
}

uint64_t sub_21617649C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_2161764A4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F18A30](a2);
}

void sub_2161764B0()
{
}

uint64_t sub_2161764C4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5280;
  *(void *)(a1 + 16) = 850045863;
  *(_DWORD *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(void *)(a1 + 120) = sub_2161765AC;
  *(void *)(a1 + 12++**(_DWORD **)(result + 8) = 0;
  sub_216128C80(a1 + 136);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 40++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 416) = 0;
  return a1;
}

void sub_21617655C(_Unwind_Exception *a1)
{
  sub_216178EF8((uint64_t *)(v2 + 88), 0);
  uint64_t v4 = *(void *)(v2 + 80);
  *(void *)(v2 + 80) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161765AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 1;
  }
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v8 = *(void *)(a4 + 8 * a2);
    if (!v8) {
      break;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      uint64_t v11 = *(void *)(v8 + 96);
      int v12 = sub_216178CF4(*(void *)(a1 + 88), *(unsigned __int16 *)(v8 + 92), *(unsigned __int16 *)(v5 + 94));
      if (v11 + *(__int16 *)(v5 + 84) + (uint64_t)v12 < v10)
      {
        uint64_t v10 = v11 + *(__int16 *)(v5 + 84) + (uint64_t)v12;
        uint64_t v9 = v8;
      }
      uint64_t v8 = *(void *)(v8 + 16);
    }
    while (v8);
    if (!v9) {
      break;
    }
    *(void *)uint64_t v5 = v9;
    *(void *)(v5 + ++**(_DWORD **)(result + 8) = 0;
    *(void *)(v5 + 96) = v10;
    uint64_t v13 = *(unsigned __int16 *)(v5 + 90) + a2;
    *(void *)(v5 + 16) = *(void *)(a4 + 8 * v13);
    *(void *)(a4 + 8 * v13) = v5;
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_216176678(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5280;
  uint64_t v2 = a1 + 136;
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 136) = *MEMORY[0x263F8C2C8];
  *(void *)(v2 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *(void *)(a1 + 144) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 248);
  sub_216178EF8((uint64_t *)(a1 + 88), 0);
  uint64_t v5 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_2161767F4(uint64_t a1)
{
  sub_216176678(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21617682C()
{
}

void sub_216176B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216176B7C(uint64_t a1, char *a2)
{
  uint64_t v3 = a1 + 8;
  sub_21610B834(&__p, a2);
  uint64_t v4 = sub_216178FA4(v3, &__p);
  if (SHIBYTE(v17[0]) < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v4) {
    operator new();
  }
  if (*((char *)v4 + 79) < 0)
  {
    sub_21610A674(v13, v4[7], (unint64_t)v4[8]);
  }
  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)(v4 + 7);
    uint64_t v14 = v4[9];
  }
  sub_216140140((uint64_t)&__p);
  unsigned int v15 = 0;
  if (SHIBYTE(v14) >= 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (void **)v13[0];
  }
  if (SHIBYTE(v14) >= 0) {
    uint64_t v6 = HIBYTE(v14);
  }
  else {
    uint64_t v6 = (uint64_t)v13[1];
  }
  int v7 = sub_216129E78(v17, (uint64_t)v5, v6);
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0
    || (uint64_t v8 = (void *)MEMORY[0x2166CA4C0](&__p, &v15), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0)
    || (uint64_t v9 = sub_216179138(&__p), (*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 2) == 0))
  {
    operator new();
  }
  uint64_t v12 = v15;
  __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v17 + *((void *)__p - 3)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v17[0] = v10;
  v17[1] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](&v19);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  return v12;
}

void sub_216176EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216176EEC(uint64_t *a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, 128)
    || (uint64_t result = sub_216176F94(a1, a2), result))
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    uint64_t v6 = (void *)*v5;
    if (*v5)
    {
      do
      {
        v6[1] = v5;
        uint64_t v5 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    return 1;
  }
  return result;
}

uint64_t sub_216176F94(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if (result)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    uint64_t v10 = (unsigned __int8 *)(v9 + v8);
    uint64_t v11 = a1[10];
    sub_216178D90(*(void **)(v7 + 16));
    uint64_t v13 = v12;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(unsigned char *)(v12 + 109) = 2;
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 4++**(_DWORD **)(result + 8) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    uint64_t v14 = *(void *)(v11 + 192);
    *(void *)(v12 + 4++**(_DWORD **)(result + 8) = v9;
    *(void *)(v12 + 56) = v14;
    *uint64_t v5 = v12;
    int v29 = 0;
    if (v8)
    {
      unint64_t v15 = 0;
      while (1)
      {
        if (v5[v15])
        {
          uint64_t v16 = sub_21633D41C(a1[10], (unsigned __int8 *)(v9 + v15), v10, v7);
          *(void *)(v6 + 8 * v15) = v16;
          int v17 = (uint64_t (*)(void *, unint64_t, uint64_t, void *, uint64_t, int *, void))a1[15];
          uint64_t v18 = a1[16];
          uint64_t v19 = (uint64_t *)((char *)a1 + (v18 >> 1));
          if (v18) {
            int v17 = *(uint64_t (**)(void *, unint64_t, uint64_t, void *, uint64_t, int *, void))(*v19 + v17);
          }
          uint64_t result = v17(v19, v15, v16, v5, v7, &v29, 0);
          if (!result) {
            break;
          }
        }
        v15 += 2;
        if (v15 >= v8) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      uint64_t v20 = a1[10];
      sub_216178D90(*(void **)(v7 + 16));
      uint64_t v22 = v21;
      *(_OWORD *)(v21 + 80) = 0u;
      *(_OWORD *)(v21 + 96) = 0u;
      *(unsigned char *)(v21 + 109) = 3;
      *(_OWORD *)uint64_t v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 4++**(_DWORD **)(result + 8) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 32) = 0u;
      uint64_t v23 = *(void *)(v20 + 192);
      *(void *)(v21 + 4++**(_DWORD **)(result + 8) = v10;
      *(void *)(v21 + 56) = v23;
      *(void *)(v6 + 8 * v++**(_DWORD **)(result + 8) = v21;
      int v29 = 0;
      if ((v8 & 0x8000000000000000) != 0) {
        goto LABEL_20;
      }
      int64_t v24 = v8;
      while (!v5[v24])
      {
        if (v24-- <= 0) {
          goto LABEL_20;
        }
      }
      size_t v26 = (uint64_t (*)(void *))a1[15];
      uint64_t v27 = a1[16];
      unsigned int v28 = (uint64_t *)((char *)a1 + (v27 >> 1));
      if (v27) {
        size_t v26 = *(uint64_t (**)(void *))(*v28 + v26);
      }
      uint64_t result = v26(v28);
      if (result)
      {
LABEL_20:
        *uint64_t v5 = v13;
        *(void *)(v6 + 8 * v++**(_DWORD **)(result + 8) = v22;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_216177294(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  v109[0] = MEMORY[0x263EF8330];
  v109[1] = 0x40000000;
  uint64_t v110 = sub_216178420;
  v111 = &unk_264266AE8;
  uint64_t v112 = a1;
  uint64_t v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  *(_DWORD *)(a1 + ++**(_DWORD **)(result + 8) = 1;
  std::mutex::unlock(v4);
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, 2);
  uint64_t v6 = (void *)a1;
  if ((v5 & 1) != 0
    || (v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, 8), uint64_t v6 = (void *)a1, v7))
  {
    v6[15] = sub_216178464;
    v6[16] = 0;
  }
  uint64_t v8 = *(void *)(v6[10] + 1520);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v8 + 8));
  *(void *)(v8 + 24) = *(void *)(v8 + 16);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, 4))
  {
    uint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    uint64_t v10 = *(char **)(v104 + 104);
    unint64_t v11 = *(void *)(v104 + 112) - (void)v10;
    if (v9 + 1 <= v11)
    {
      if (v9 + 1 < v11) {
        *(void *)(v104 + 112) = &v10[v9 + 1];
      }
    }
    else
    {
      sub_216179360((unint64_t *)(v104 + 104), v9 + 1 - v11);
      uint64_t v10 = *(char **)(v104 + 104);
    }
    uint64_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    size_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    memcpy(v10, v12, v13);
    *(void *)host_info_outCnt = 0;
    uint64_t v117 = 0;
    v118 = 0;
    __p = 0;
    v114 = 0;
    v115 = 0;
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    unint64_t v15 = 0;
    uint64_t v16 = &v10[v14 & 0xFFFFFFFFFFFFFFFELL];
    uint64_t v17 = 1;
    while (v15 != 0xFFFF)
    {
      unint64_t v18 = v15;
      uint64_t v19 = v17;
      uint64_t v20 = v10;
      if (v10 < v16)
      {
        uint64_t v20 = v10;
        do
        {
          if (*(_WORD *)v20 == 10) {
            break;
          }
          v20 += 2;
        }
        while (v20 < v16);
      }
      uint64_t v21 = v117;
      if (v117 >= v118)
      {
        uint64_t v23 = (uint64_t)&v117[-*(void *)host_info_outCnt] >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          sub_21610CB04();
        }
        unint64_t v24 = (uint64_t)&v118[-*(void *)host_info_outCnt] >> 2;
        if (v24 <= v23 + 1) {
          unint64_t v24 = v23 + 1;
        }
        if ((unint64_t)&v118[-*(void *)host_info_outCnt] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          size_t v26 = (char *)sub_2160FFAA8((uint64_t)&v118, v25);
        }
        else {
          size_t v26 = 0;
        }
        uint64_t v27 = &v26[8 * v23];
        *(void *)uint64_t v27 = v10;
        uint64_t v22 = v27 + 8;
        int v29 = *(char **)host_info_outCnt;
        unsigned int v28 = v117;
        if (v117 != *(char **)host_info_outCnt)
        {
          do
          {
            uint64_t v30 = *((void *)v28 - 1);
            v28 -= 8;
            *((void *)v27 - 1) = v30;
            v27 -= 8;
          }
          while (v28 != v29);
          unsigned int v28 = *(char **)host_info_outCnt;
        }
        *(void *)host_info_outCnt = v27;
        uint64_t v117 = v22;
        v118 = &v26[8 * v25];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(void *)uint64_t v117 = v10;
        uint64_t v22 = v21 + 8;
      }
      uint64_t v117 = v22;
      int64_t v31 = v20 - v10;
      int v32 = v114;
      if (v114 >= v115)
      {
        int v34 = (char *)__p;
        uint64_t v35 = (v114 - (unsigned char *)__p) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v37 = v115 - (unsigned char *)__p;
        if ((v115 - (unsigned char *)__p) >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          uint64_t v39 = (char *)sub_2160FFAA8((uint64_t)&v115, v38);
          int v34 = (char *)__p;
          int v32 = v114;
        }
        else
        {
          uint64_t v39 = 0;
        }
        unsigned int v40 = (int64_t *)&v39[8 * v35];
        *unsigned int v40 = v31;
        unsigned int v33 = (char *)(v40 + 1);
        while (v32 != v34)
        {
          int64_t v41 = *((void *)v32 - 1);
          v32 -= 8;
          *--unsigned int v40 = v41;
        }
        __p = v40;
        v114 = v33;
        v115 = &v39[8 * v38];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(void *)v114 = v31;
        unsigned int v33 = v32 + 8;
      }
      v114 = v33;
      unint64_t v15 = v18 + 1;
      uint64_t v10 = v20 + 2;
      uint64_t v17 = v19 + 1;
      if (v20 == v16)
      {
        if (v18 <= 0xFFFD)
        {
          sub_216178CAC(v15);
          uint64_t v121 = 0;
          uint64_t v122 = 0;
          (*(void (**)(uint64_t))(*(void *)a2 + 88))(a2);
          operator new[]();
        }
        break;
      }
    }
    uint64_t v42 = 0;
    if (__p)
    {
      v114 = (char *)__p;
      operator delete(__p);
    }
    if (*(void *)host_info_outCnt)
    {
      uint64_t v117 = *(char **)host_info_outCnt;
      operator delete(*(void **)host_info_outCnt);
    }
    goto LABEL_129;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, 128))
  {
    if (sub_216176F94((uint64_t *)a1, a2))
    {
LABEL_56:
      int v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, 32);
      uint64_t v44 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
      if (v43)
      {
        int v45 = (void *)v44(a2);
        uint64_t v46 = (void *)*v45;
        if (*v45)
        {
          do
          {
            v46[1] = v45;
            int v45 = v46;
            uint64_t v46 = (void *)*v46;
          }
          while (v46);
        }
        uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
        uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
        if ((v48 & 0x8000000000000000) == 0)
        {
          uint64_t v50 = 0;
          do
          {
            for (uint64_t i = *(uint64_t **)(v49 + 8 * v50); i; uint64_t i = (uint64_t *)i[3])
            {
              *(void *)(v47 + ++**(_DWORD **)(result + 8) = i;
              uint64_t *i = v47;
              uint64_t v47 = (uint64_t)i;
            }
          }
          while (v50++ != v48);
        }
      }
      else
      {
        __n128 v67 = (void *)v44(a2);
        unint64_t v68 = (void *)*v67;
        if (*v67)
        {
          do
          {
            v68[1] = v67;
            __n128 v67 = v68;
            unint64_t v68 = (void *)*v68;
          }
          while (v68);
        }
      }
      uint64_t v42 = 1;
      goto LABEL_129;
    }
LABEL_128:
    uint64_t v42 = 0;
    goto LABEL_129;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2)) {
    goto LABEL_128;
  }
  uint64_t v53 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v106 = (void *)(a2 + 168);
  unsigned int v107 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  unint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  uint64_t v56 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  uint64_t v57 = *(void *)(a1 + 80);
  sub_216178D90(*(void **)(v54 + 16));
  *(_OWORD *)(v58 + 80) = 0u;
  *(_OWORD *)(v58 + 96) = 0u;
  *(_OWORD *)(v58 + 4++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(v58 + 64) = 0u;
  *(_OWORD *)(v58 + 16) = 0u;
  *(_OWORD *)(v58 + 32) = 0u;
  *(_OWORD *)uint64_t v58 = 0u;
  uint64_t v59 = *(void *)(v57 + 192);
  *(unsigned char *)(v58 + 109) = 2;
  uint64_t v105 = &v56[v55];
  *(void *)(v58 + 4++**(_DWORD **)(result + 8) = v56;
  *(void *)(v58 + 56) = v59;
  *uint64_t v53 = v58;
  if ((a3 & 2) != 0)
  {
    *(_DWORD *)(a1 + 116) = -1;
    uint64_t v69 = a1 + 116;
    v70 = (_OWORD *)*v107;
    if (*v107)
    {
      uint64_t v71 = *(unsigned int (**)(void *, void, _OWORD *, void *, uint64_t, uint64_t, void))(a1 + 120);
      uint64_t v72 = *(void *)(a1 + 128);
      uint64_t v73 = (void *)(a1 + (v72 >> 1));
      if (v72) {
        uint64_t v71 = *(unsigned int (**)(void *, void, _OWORD *, void *, uint64_t, uint64_t, void))(*v73 + v71);
      }
      if (!v71(v73, 0, v70, v53, v54, v69, 0)) {
        goto LABEL_128;
      }
      uint64_t v86 = *((unsigned __int16 *)v70 + 45);
      uint64_t v62 = a1;
      if (!v53[v86]) {
        goto LABEL_119;
      }
      uint64_t v87 = sub_21633CBDC(*(void *)(a1 + 80), &v56[v86], v105, v54, a3);
      v107[v86] = v87;
      v88 = *(uint64_t (**)(void *, uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(a1 + 120);
      uint64_t v89 = *(void *)(a1 + 128);
      char v90 = (void *)(a1 + (v89 >> 1));
      if (v89) {
        v88 = *(uint64_t (**)(void *, uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(*v90 + v88);
      }
      char v91 = v88(v90, v86, v87, v53, v54, v69, 0);
    }
    else
    {
      uint64_t v74 = sub_21633CBDC(*(void *)(a1 + 80), v56, v105, v54, a3);
      *unsigned int v107 = v74;
      uint64_t v75 = *(uint64_t (**)(void *, void, uint64_t, void *, uint64_t, uint64_t, void))(a1 + 120);
      uint64_t v76 = *(void *)(a1 + 128);
      int v77 = (void *)(a1 + (v76 >> 1));
      if (v76) {
        uint64_t v75 = *(uint64_t (**)(void *, void, uint64_t, void *, uint64_t, uint64_t, void))(*v77 + v75);
      }
      char v91 = v75(v77, 0, v74, v53, v54, v69, 0);
    }
    uint64_t v62 = a1;
    if ((v91 & 1) == 0) {
      goto LABEL_128;
    }
    goto LABEL_119;
  }
  host_info_outCnt[0] = 15;
  host_t v60 = MEMORY[0x2166CAE10]();
  if (host_statistics(v60, 2, host_info_out, host_info_outCnt))
  {
    int v61 = -1;
    uint64_t v62 = a1;
    *(_DWORD *)(a1 + 112) = -1;
    unsigned int v63 = (_DWORD *)(a1 + 112);
    goto LABEL_70;
  }
  uint64_t v78 = *MEMORY[0x263EF8AF8] * host_info_out[0];
  if (v78 <= 0x100000)
  {
    uint64_t v42 = 0;
    *(_DWORD *)(a1 + 112) = 0;
    goto LABEL_129;
  }
  uint64_t v42 = 0;
  if (v78 >= 2148532223) {
    LODWORD(v7++**(_DWORD **)(result + 8) = -2146435073;
  }
  unsigned int v92 = v78 - 0x100000;
  *(_DWORD *)(a1 + 112) = v92 / 0x18;
  unsigned int v63 = (_DWORD *)(a1 + 112);
  if (v92 >= 0x18)
  {
    int v61 = 0;
    uint64_t v62 = a1;
LABEL_70:
    *(_DWORD *)(v62 + 116) = v61;
    char v64 = (_DWORD *)(v62 + 116);
    unsigned int v65 = v56;
    if (v55 >= 2) {
      unsigned int v65 = &v56[2 * (*(_WORD *)v56 == 32)];
    }
    if ((~a3 & 0x44) != 0)
    {
      uint64_t v103 = 0;
      if (!v55)
      {
LABEL_119:
        uint64_t v93 = *(void *)(v62 + 80);
        sub_216178D90(*(void **)(v54 + 16));
        uint64_t v95 = v94;
        *(_OWORD *)(v94 + 80) = 0u;
        *(_OWORD *)(v94 + 96) = 0u;
        *(_OWORD *)(v94 + 4++**(_DWORD **)(result + 8) = 0u;
        *(_OWORD *)(v94 + 64) = 0u;
        *(_OWORD *)(v94 + 16) = 0u;
        *(_OWORD *)(v94 + 32) = 0u;
        *(_OWORD *)uint64_t v94 = 0u;
        uint64_t v96 = *(void *)(v93 + 192);
        *(unsigned char *)(v94 + 109) = 3;
        *(void *)(v94 + 4++**(_DWORD **)(result + 8) = v105;
        *(void *)(v94 + 56) = v96;
        v107[v55] = v94;
        if ((v55 & 0x8000000000000000) != 0) {
          goto LABEL_56;
        }
        if (*(_DWORD *)(a1 + 8) != 2)
        {
          while (!v53[v55])
          {
            if ((uint64_t)v55-- <= 0) {
              goto LABEL_56;
            }
          }
          uint64_t v98 = *(unsigned int (**)(void *, unint64_t, uint64_t, void *, uint64_t, uint64_t, void *))(a1 + 120);
          uint64_t v99 = *(void *)(a1 + 128);
          v100 = (void *)(a1 + (v99 >> 1));
          if (v99) {
            uint64_t v98 = *(unsigned int (**)(void *, unint64_t, uint64_t, void *, uint64_t, uint64_t, void *))(*v100 + v98);
          }
          if (v98(v100, v55, v95, v53, v54, a1 + 116, v106)) {
            goto LABEL_56;
          }
        }
        goto LABEL_128;
      }
    }
    else
    {
      unint64_t v66 = v55 >> 1;
      if (!v56) {
        unint64_t v66 = 0;
      }
      *(void *)host_info_out = v56;
      unint64_t v120 = v66;
      uint64_t v103 = 2 * sub_2161849E4((uint64_t *)host_info_out, 0x20u);
      uint64_t v62 = a1;
      if (!v55) {
        goto LABEL_119;
      }
    }
    uint64_t v79 = 0;
    unint64_t v80 = 0;
    while (*(_DWORD *)(v62 + 8) != 2)
    {
      if (v53[v80])
      {
        if (v80 || (float v81 = (_OWORD *)*v107) == 0)
        {
          float v81 = sub_21633B3A0(*(void *)(v62 + 80), &v56[v80], (unint64_t)v105, v54, a3, v65, v103, *v106 + v79);
          uint64_t v62 = a1;
          v107[v80] = (uint64_t)v81;
        }
        else
        {
          v65 += *((unsigned __int16 *)v81 + 45);
        }
        uint64_t v82 = v62;
        uint64_t v83 = *(unsigned int (**)(void *, unint64_t, _OWORD *, void *, uint64_t, _DWORD *, void *))(v62 + 120);
        uint64_t v84 = *(void *)(v62 + 128);
        v85 = (void *)(v82 + (v84 >> 1));
        if (v84) {
          uint64_t v83 = *(unsigned int (**)(void *, unint64_t, _OWORD *, void *, uint64_t, _DWORD *, void *))(*v85 + v83);
        }
        if (!v83(v85, v80, v81, v53, v54, v64, v106)) {
          goto LABEL_128;
        }
        if (*v64 == -1)
        {
          uint64_t v62 = a1;
        }
        else
        {
          uint64_t v62 = a1;
          if (*v64 >= *v63) {
            goto LABEL_119;
          }
        }
      }
      v80 += 2;
      v79 += 48;
      if (v80 >= v55) {
        goto LABEL_119;
      }
    }
    goto LABEL_128;
  }
LABEL_129:
  v110((uint64_t)v109);
  return v42;
}

void sub_216178350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void (*a20)(char *),uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2161C9DD8((uint64_t)&a29);
  MEMORY[0x2166CA7C0](a15, 0x1000C8077774924);
  if (v29) {
    operator delete(v29);
  }
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  a20(&a18);
  _Unwind_Resume(a1);
}

void sub_216178420(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 16));
  *(_DWORD *)(v1 + ++**(_DWORD **)(result + 8) = 0;

  std::mutex::unlock((std::mutex *)(v1 + 16));
}

uint64_t sub_216178464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, void *a7)
{
  if (!a3) {
    return 1;
  }
  uint64_t v9 = a3;
  while (1)
  {
    uint64_t v11 = *(void *)(a4 + 8 * a2);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        if ((!*(unsigned char *)(v11 + 106) || *(__int16 *)(v11 + 84) <= 20000)
          && (!*(unsigned char *)(v9 + 106) || *(__int16 *)(v9 + 84) <= 20000))
        {
          uint64_t v14 = *(void *)(v11 + 64);
          uint64_t v15 = *(void *)(v9 + 64);
          BOOL v16 = !v14 || v15 == 0;
          if (v16
            || ((unsigned int v17 = *(unsigned __int16 *)(v14 + 14),
                 int v18 = *(_WORD *)(v14 + 14),
                 int v19 = *(unsigned __int16 *)(v15 + 12),
                 int v20 = *(_WORD *)(v15 + 12),
                 v18)
              ? (BOOL v21 = v20 == 0)
              : (BOOL v21 = 1),
                v21 || ((v19 ^ v17) <= 0xFF ? (BOOL v22 = v18 == v20) : (BOOL v22 = 1), v22)))
          {
            uint64_t v23 = *(void *)(a1 + 88);
            int v24 = *(unsigned __int16 *)(v11 + 92);
            int v25 = *(unsigned __int16 *)(v9 + 94);
            int v26 = *(_DWORD *)(*(void *)(v23 + 344) + 4 * *(unsigned __int16 *)(v11 + 92));
            if (*(_DWORD *)(*(void *)(v23 + 344) + 4 * *(unsigned __int16 *)(v11 + 92) + 4) - v26 == *(unsigned __int16 *)(v23 + 370))
            {
              int v27 = *(__int16 *)(*(void *)(v23 + 360) + 2 * (v26 + v25));
              if (v27 != 0x7FFF)
              {
                int v28 = *(__int16 *)(v9 + 84) + v27;
LABEL_29:
                if (*(void *)(v11 + 96) + v28 < v13)
                {
                  uint64_t v12 = v11;
                  uint64_t v13 = *(void *)(v11 + 96) + v28;
                }
                unsigned int v33 = sub_216178968(a5);
                *((_DWORD *)v33 + 4) = v28;
                int v34 = *a6;
                if (*a6 != -1 && v34 < *(_DWORD *)(a1 + 112)) {
                  *a6 = v34 + 1;
                }
                uint64_t v35 = *(void *)(v9 + 40);
                *unsigned int v33 = v11;
                v33[1] = v35;
                *(void *)(v9 + 40) = v33;
                *(void *)(v11 + 32) = v33;
              }
            }
            else
            {
              int v29 = v25 | (v24 << 16);
              uint64_t v30 = *(_DWORD *)(v23 + 372) & (3 * v24 + v25);
              uint64_t v31 = *(void *)(v23 + 376);
              if (*(_DWORD *)(v31 + 4 * v30) == v29)
              {
                int v28 = *(_DWORD *)(*(void *)(v23 + 384) + 4 * v30) + *(__int16 *)(v9 + 84);
                goto LABEL_29;
              }
              *(_DWORD *)(v31 + 4 * v30) = v29;
              int v32 = sub_216178D28((void *)v23, v24, v25);
              *(_DWORD *)(*(void *)(v23 + 384) + 4 * v30) = v32;
              if (v32 <= 32766)
              {
                int v28 = v32 + *(__int16 *)(v9 + 84);
                goto LABEL_29;
              }
            }
          }
        }
        uint64_t v11 = *(void *)(v11 + 16);
        if (!v11) {
          goto LABEL_38;
        }
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_38:
    if (*(void *)(v9 + 40)) {
      goto LABEL_53;
    }
    uint64_t v37 = *(void *)(a4 + 8 * a2);
    if (!v37) {
      goto LABEL_53;
    }
    uint64_t v42 = *(__int16 *)(v9 + 84)
        + (uint64_t)(int)sub_216178CF4(*(void *)(a1 + 88), *(unsigned __int16 *)(v37 + 92), *(unsigned __int16 *)(v9 + 94));
    uint64_t v36 = *(void *)(v37 + 96) + v42;
    int v43 = sub_216178968(a5);
    *((_DWORD *)v43 + 4) = v42;
    uint64_t v44 = *(void *)(v9 + 40);
    *int v43 = v37;
    v43[1] = v44;
    *(void *)(v9 + 40) = v43;
    *(void *)(v37 + 32) = v43;
    if (v36 >= v13)
    {
LABEL_53:
      uint64_t v36 = v13;
      uint64_t v37 = v12;
      if (!v12) {
        return 0;
      }
    }
    *(void *)uint64_t v9 = v37;
    *(void *)(v9 + ++**(_DWORD **)(result + 8) = 0;
    *(void *)(v9 + 96) = v36;
    uint64_t v38 = *(unsigned __int16 *)(v9 + 90) + a2;
    *(void *)(v9 + 16) = *(void *)(a4 + 8 * v38);
    *(void *)(a4 + 8 * v3++**(_DWORD **)(result + 8) = v9;
    if (a7)
    {
      uint64_t v39 = *(void *)(v9 + 64);
      if (v39)
      {
        int v41 = *(unsigned __int16 *)(v39 + 14);
        unsigned int v40 = (unsigned __int16 *)(v39 + 14);
        if (v41) {
          sub_216179580((uint64_t **)(*a7 + 24 * v38), v40, v40);
        }
      }
    }
    uint64_t v9 = *(void *)(v9 + 24);
    if (!v9) {
      return 1;
    }
  }
}

void sub_216178724(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(_DWORD *)(a1 + 8)) {
    *(_DWORD *)(a1 + ++**(_DWORD **)(result + 8) = 2;
  }

  std::mutex::unlock(v2);
}

uint64_t sub_216178774(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if (result)
  {
    int v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    uint64_t v11 = *(void *)(a1 + 80);
    sub_216178D90(*(void **)(v8 + 16));
    uint64_t v13 = v12;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(unsigned char *)(v12 + 109) = 2;
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 4++**(_DWORD **)(result + 8) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    uint64_t v14 = *(void *)(v11 + 192);
    *(void *)(v12 + 4++**(_DWORD **)(result + 8) = v10;
    *(void *)(v12 + 56) = v14;
    void *v7 = v12;
    uint64_t result = sub_21633CBDC(*(void *)(a1 + 80), v10, &v10[v9], v8, a3 | 0x200000u);
    if (result)
    {
      v7[2] = result;
      uint64_t v15 = *(void *)(a1 + 80);
      sub_216178D90(*(void **)(v8 + 16));
      *(_OWORD *)(v16 + 80) = 0u;
      *(_OWORD *)(v16 + 96) = 0u;
      *(unsigned char *)(v16 + 109) = 3;
      *(_OWORD *)uint64_t v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 4++**(_DWORD **)(result + 8) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      uint64_t v17 = *(void *)(v15 + 192);
      *(void *)(v16 + 4++**(_DWORD **)(result + 8) = &v10[v9];
      *(void *)(v16 + 56) = v17;
      v7[v9 + 2] = v16;
      *(void *)(v13 + ++**(_DWORD **)(result + 8) = v7[2];
      for (uint64_t i = v7[2]; i; uint64_t i = *(void *)(i + 24))
        *(void *)(i + ++**(_DWORD **)(result + 8) = v7[*(unsigned __int16 *)(i + 88) + 2];
      return 1;
    }
  }
  return result;
}

void *sub_216178968(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    operator new();
  }
  uint64_t v2 = v1[5];
  unint64_t v3 = v1[6];
  uint64_t v4 = v1[4];
  if (v4 == v3)
  {
    uint64_t v4 = 0;
    ++v2;
    v1[4] = 0;
    v1[5] = v2;
  }
  uint64_t v5 = v1[1];
  if (v2 == (v1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    operator new[]();
  }
  uint64_t v6 = *(void *)(v5 + 8 * v2);
  v1[4] = v4 + 1;
  uint64_t result = (void *)(v6 + 24 * v4);
  void *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void **sub_216178B54(uint64_t a1)
{
  sub_216178BC0(a1 + 8, &v4);
  uint64_t v2 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*v2);
  }
  *(_OWORD *)uint64_t v2 = v4;
  *(void *)(a1 + 280) = v5;
  if (*(char *)(a1 + 287) < 0) {
    return (void **)*v2;
  }
  return v2;
}

uint64_t sub_216178BC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_216178C60(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  uint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t sub_216178C60(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 8++**(_DWORD **)(result + 8) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void *sub_216178CAC(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2160FFA74();
  }
  return operator new(24 * a1);
}

uint64_t sub_216178CF4(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 344);
  int v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
  int v5 = *(_DWORD *)(v3 + 4 * a2);
  if (v4 - v5 == *(unsigned __int16 *)(a1 + 370)) {
    return *(__int16 *)(*(void *)(a1 + 360) + 2 * (v5 + a3));
  }
  else {
    return sub_216178D28((void *)a1, a2, a3);
  }
}

uint64_t sub_216178D28(void *a1, int a2, int a3)
{
  uint64_t v3 = (int *)(a1[43] + 4 * a2);
  int v4 = *v3;
  int v5 = v3[1] - 1;
  if (v4 > v5) {
    return 0x7FFFLL;
  }
  while (1)
  {
    int v6 = *(__int16 *)(a1[44] + 2 * ((v4 + v5) / 2));
    if (v6 >= a3) {
      break;
    }
    int v4 = (v4 + v5) / 2 + 1;
LABEL_6:
    if (v4 > v5) {
      return 0x7FFFLL;
    }
  }
  if (v6 > a3)
  {
    int v5 = (v4 + v5) / 2 - 1;
    goto LABEL_6;
  }
  return *(__int16 *)(a1[45] + 2 * ((uint64_t)(v4 + v5 + (v4 + v5 < 0)) >> 1));
}

double sub_216178D90(void *a1)
{
  uint64_t v1 = a1[5];
  unint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  if (v3 == v2)
  {
    uint64_t v3 = 0;
    ++v1;
    a1[4] = 0;
    a1[5] = v1;
  }
  uint64_t v4 = a1[1];
  if (v1 == (a1[2] - v4) >> 3)
  {
    is_mul_ok(v2, 0x70uLL);
    operator new[]();
  }
  uint64_t v5 = *(void *)(v4 + 8 * v1);
  a1[4] = v3 + 1;
  int v6 = (_OWORD *)(v5 + 112 * v3);
  double result = 0.0;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  _OWORD *v6 = 0u;
  return result;
}

uint64_t sub_216178EF8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21619ED34(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void *sub_216178F48(void *a1)
{
  *a1 = &unk_26C6C4DA8;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166CA800](v2, 0x1000C4052888210);
  }
  return a1;
}

void **sub_216178FA4(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = sub_216179024(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = (void **)v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_216179024(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

uint64_t sub_216179024(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_21617905C(a1, v2, v5, v6);
}

uint64_t sub_21617905C(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void sub_2161790BC(void *a1)
{
  *a1 = &unk_26C6C4DA8;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166CA800](v1, 0x1000C4052888210);
  }

  JUMPOUT(0x2166CA800);
}

void *sub_216179138(void *a1)
{
  MEMORY[0x2166CA470](&v12, a1, 1);
  if (!v12) {
    return a1;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  size_t v2 = std::locale::use_facet(&v11, MEMORY[0x263F8C108]);
  std::locale::~locale(&v11);
  size_t v3 = a1 + 5;
  while (1)
  {
    int v4 = *(void **)((char *)v3 + *(void *)(*a1 - 24));
    uint64_t v5 = (unsigned char *)v4[3];
    if (v5 == (unsigned char *)v4[4]) {
      break;
    }
    LOBYTE(v6) = *v5;
LABEL_6:
    if ((v6 & 0x80) != 0 || (*((_DWORD *)&v2[1].~facet + v6) & 0x4000) == 0)
    {
      int v9 = 0;
      goto LABEL_12;
    }
    size_t v7 = *(void **)((char *)v3 + *(void *)(*a1 - 24));
    uint64_t v8 = v7[3];
    if (v8 == v7[4]) {
      (*(void (**)(void *))(*v7 + 80))(v7);
    }
    else {
      v7[3] = v8 + 1;
    }
  }
  int v6 = (*(uint64_t (**)(void *))(*v4 + 72))(v4);
  if (v6 != -1) {
    goto LABEL_6;
  }
  int v9 = 2;
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_2161792B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x216179274);
  }
  __cxa_rethrow();
}

void sub_21617934C(_Unwind_Exception *a1)
{
}

void sub_216179360(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  int v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    size_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_21610CB04();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    char v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_2161794A0(void *a1)
{
  sub_2161794D8(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_2161794D8(void *a1)
{
  *a1 = &unk_26C6C52C0;
  a1[5] = 0;
  int v4 = a1 + 1;
  size_t v2 = (void *)a1[1];
  size_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    size_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166CA7C0](v2[v5], 0x1020C80EDCEB4C7);
      unint64_t v5 = a1[5];
      size_t v2 = (void *)a1[1];
      size_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t **sub_216179580(uint64_t **a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    size_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v10 + 13) = *a3;
    sub_21612A650(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t sub_21617963C(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  *(_WORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6BD748;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 24) = &unk_26C6BD818;
  *(void *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  int v4 = (const __CFString **)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  CFStringRef v5 = sub_2161A2800(a2, 50);
  if (v5)
  {
    *int v4 = v5;
    CFStringGetLength(v5);
    sub_2161E208C();
  }
  return a1;
}

void sub_21617A33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char *__p,char *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34)
{
  if (__p)
  {
    a30 = __p;
    operator delete(__p);
  }
  __p = &a33;
  sub_21613F444((void ***)&__p);
  uint64_t v37 = *(void **)(v35 - 168);
  if (v37)
  {
    *(void *)(v35 - 160) = v37;
    operator delete(v37);
  }
  if (a22) {
    MEMORY[0x2166CA7C0](a22, 0x1000C80BDFB0063);
  }
  *(void *)(v35 - 16++**(_DWORD **)(result + 8) = v34;
  sub_21617B004((void ***)(v35 - 168));
  _Unwind_Resume(a1);
}

uint64_t sub_21617A4A0(char **a1, uint64_t a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_21617AF38();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v30 = result;
    if (v14) {
      char v15 = (char *)sub_21617AF50(result, v14);
    }
    else {
      char v15 = 0;
    }
    uint64_t v16 = &v15[48 * v11];
    *(void *)uint64_t v16 = &unk_26C6C59C0;
    long long v17 = *(_OWORD *)(a2 + 8);
    long long v18 = *(_OWORD *)(a2 + 24);
    *((void *)v16 + 5) = *(void *)(a2 + 40);
    *(_OWORD *)(v16 + 24) = v18;
    *(_OWORD *)(v16 + ++**(_DWORD **)(result + 8) = v17;
    int v19 = *a1;
    unint64_t v20 = (unint64_t)a1[1];
    if ((char *)v20 == *a1)
    {
      int64x2_t v25 = vdupq_n_s64(v20);
      BOOL v22 = &v15[48 * v11];
    }
    else
    {
      uint64_t v21 = (uint64_t)&v15[48 * v11 - 48];
      BOOL v22 = &v15[48 * v11];
      do
      {
        *((void *)v22 - 6) = &unk_26C6C59C0;
        v22 -= 48;
        long long v23 = *(_OWORD *)(v20 - 40);
        long long v24 = *(_OWORD *)(v20 - 24);
        *((void *)v22 + 5) = *(void *)(v20 - 8);
        *(_OWORD *)(v22 + 24) = v24;
        *(_OWORD *)(v22 + ++**(_DWORD **)(result + 8) = v23;
        v21 -= 48;
        v20 -= 48;
      }
      while ((char *)v20 != v19);
      int64x2_t v25 = *(int64x2_t *)a1;
    }
    size_t v10 = v16 + 48;
    *a1 = v22;
    a1[1] = v16 + 48;
    int64x2_t v28 = v25;
    int v26 = a1[2];
    a1[2] = &v15[48 * v14];
    int v29 = v26;
    uint64_t v27 = v25.i64[0];
    uint64_t result = sub_21617AF98((uint64_t)&v27);
  }
  else
  {
    *(void *)unint64_t v7 = &unk_26C6C59C0;
    long long v8 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a2 + 24);
    *(void *)(v7 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(v7 + 24) = v9;
    *(_OWORD *)(v7 + ++**(_DWORD **)(result + 8) = v8;
    size_t v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
  return result;
}

uint64_t sub_21617A670(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD748;
  *(void *)(a1 + 24) = &unk_26C6BD818;
  size_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  int v4 = (void **)(a1 + 48);
  sub_21617B004(&v4);
  return a1;
}

void sub_21617A6FC(uint64_t a1)
{
  sub_21617A670(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21617A734(void *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 48))(a1) <= a2) {
    return 0;
  }
  return a1[6] + 48 * a2;
}

void sub_21617A7A8(void *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
  if (a2)
  {
    sub_21617A878((uint64_t)a3, v6 + 1);
    uint64_t v7 = 1;
    *(_DWORD *)*a3 = 1;
  }
  else
  {
    sub_21617A878((uint64_t)a3, v6);
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  if (v8 != v9)
  {
    size_t v10 = (_DWORD *)(*a3 + 4 * v7);
    do
    {
      *v10++ = *(_DWORD *)(v8 + 8);
      v8 += 48;
    }
    while (v8 != v9);
  }
}

void sub_21617A85C(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21617A878(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + ++**(_DWORD **)(result + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_21617B1D4((char **)a1, a2 - v2);
  }
}

uint64_t sub_21617A8A8(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  else {
    return 0;
  }
  return v2;
}

char *sub_21617A914(uint64_t a1, char *__src, _DWORD *a3)
{
  int v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    unint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v15 >> 62) {
      sub_21610CB04();
    }
    uint64_t v16 = (__src - v14) >> 2;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      int v19 = (char *)sub_2161129B4(v7, v18);
    }
    else {
      int v19 = 0;
    }
    __p = v19;
    BOOL v22 = &v19[4 * v16];
    long long v23 = v22;
    long long v24 = &v19[4 * v18];
    sub_21617B2F0(&__p, a3);
    int v4 = sub_21617B400((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = __src + 4;
  }
  else
  {
    size_t v10 = __src + 4;
    unint64_t v11 = v6 - 4;
    unint64_t v12 = v6;
    while (v11 < v6)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)unint64_t v12 = v13;
      v12 += 4;
    }
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    }
    *(_DWORD *)int v4 = *a3;
  }
  return v4;
}

void sub_21617AA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21617AAB8(uint64_t a1, char *__src, char *a3)
{
  size_t v3 = a3;
  int v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v14 >> 62) {
      sub_21610CB04();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 2;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_2161129B4(a1 + 16, v18);
    }
    else {
      int v19 = 0;
    }
    unint64_t v20 = &v19[4 * v16];
    __p = v19;
    uint64_t v27 = v20;
    int64x2_t v28 = v20;
    int v29 = &v19[4 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 1;
        }
        long long v23 = (char *)sub_2161129B4(v8, v22);
        unint64_t v20 = &v23[v22 & 0xFFFFFFFFFFFFFFFCLL];
        __p = v23;
        uint64_t v27 = v20;
        int v29 = &v23[4 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 4 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(_DWORD *)unint64_t v20 = *(_DWORD *)v3;
    int64x2_t v28 = v20 + 4;
    int v4 = sub_21617B400((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *(_DWORD *)a3;
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = __src + 4;
  }
  else
  {
    unint64_t v9 = __src + 4;
    size_t v10 = v6 - 4;
    unint64_t v11 = *(_DWORD **)(a1 + 8);
    while (v10 < v6)
    {
      int v12 = *(_DWORD *)v10;
      v10 += 4;
      *v11++ = v12;
    }
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-4 * ((v6 - v9) >> 2)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 4 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_DWORD *)int v4 = *(_DWORD *)v3;
  }
  return v4;
}

void sub_21617ACC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21617AD04()
{
  return 0;
}

uint64_t sub_21617AD10()
{
  return 0;
}

BOOL sub_21617AD18(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  return CFEqual(v3, v4);
}

uint64_t sub_21617ADA0()
{
  return 0;
}

uint64_t sub_21617ADA8()
{
  return 0;
}

void sub_21617ADB0()
{
}

void sub_21617AE80(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40A1F7DA0CLL);
  _Unwind_Resume(a1);
}

void sub_21617AEA4()
{
}

uint64_t sub_21617AEC0(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_21617AEC8(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_21617AED0()
{
  return 0;
}

unint64_t sub_21617AED8(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4);
}

uint64_t sub_21617AEF4()
{
  return 0;
}

uint64_t sub_21617AF00()
{
  return 5;
}

uint64_t sub_21617AF08()
{
  return 0;
}

uint64_t sub_21617AF10()
{
  return 0;
}

uint64_t sub_21617AF18()
{
  return 0;
}

uint64_t sub_21617AF20()
{
  return 0;
}

uint64_t sub_21617AF28()
{
  return 0;
}

uint64_t sub_21617AF30()
{
  return 0;
}

void sub_21617AF38()
{
}

void *sub_21617AF50(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_2160FFA74();
  }
  return operator new(48 * a2);
}

uint64_t sub_21617AF98(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    CFStringRef v4 = *(void (***)(void))(i - 48);
    *(void *)(a1 + 16) = i - 48;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21617B004(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int16 v2 = (char *)**a1;
  if (v2)
  {
    CFStringRef v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 48;
      unint64_t v7 = v4 - 48;
      uint64_t v8 = v4 - 48;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 48;
        (*v9)(v7);
        v6 -= 48;
        BOOL v10 = v7 == v2;
        unint64_t v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_21617B0C4(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_21617B180(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    if (a2 != a3)
    {
      uint64_t v8 = *((void *)v6 + 1);
      do
      {
        *(void *)uint64_t v7 = &unk_26C6C59C0;
        long long v9 = *(_OWORD *)(a2 + 8);
        long long v10 = *(_OWORD *)(a2 + 24);
        *(void *)(v7 + 40) = *(void *)(a2 + 40);
        *(_OWORD *)(v7 + 24) = v10;
        *(_OWORD *)(v7 + ++**(_DWORD **)(result + 8) = v9;
        a2 += 48;
        v7 += 48;
        v8 += 48;
      }
      while (a2 != a3);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_21617B16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_21617B180(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_21617AF38();
  }
  uint64_t result = (char *)sub_21617AF50((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void sub_21617B1D4(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_21610CB04();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)sub_2161129B4(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_21617B2F0(void *a1, _DWORD *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 1;
      }
      uint64_t v17 = (char *)sub_2161129B4(a1[4], v16);
      int v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      unint64_t v20 = (int *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v22 = 4 * (v21 >> 2);
        long long v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          int v24 = *v20++;
          *(_DWORD *)long long v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      unint64_t v13 = &v5[-4 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[4 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_DWORD *)uint64_t v4 = *a2;
  a1[2] = v4 + 4;
}

char *sub_21617B400(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    BOOL v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + ++**(_DWORD **)(result + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + ++**(_DWORD **)(result + 8) = v13;
  int64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_21617B4C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  std::string v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - ++**(_DWORD **)(result + 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - ++**(_DWORD **)(result + 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_21617B56C((uint64_t)v11);
  return v9;
}

uint64_t sub_21617B56C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216140F84(a1);
  }
  return a1;
}

void *sub_21617B5A4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216112970(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21617B604(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21617B620(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112B2C(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_21617B688(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21617B6A4(void *a1@<X8>)
{
  sub_21610B834(__p, "en-languagemodel");
  if (qword_26797EEB0 != -1) {
    dispatch_once(&qword_26797EEB0, &unk_26C6CA200);
  }
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  v4[2] = sub_21617D924;
  v4[3] = &unk_264267930;
  v4[5] = __p;
  v4[6] = qword_26797EEA8;
  char v5 = 0;
  v4[4] = &unk_26C6C9EC0;
  sub_21617D0C0((char *)__p, (uint64_t)v4, 0, a1);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21617B78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21617B7A8()
{
}

void sub_21617B818(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4004C96B00);
  _Unwind_Resume(a1);
}

void sub_21617B83C(unsigned int a1@<W0>, char a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v8 = sub_2161E2A24(a1);
  sub_21610B834(&v20, v8);
  uint64_t v9 = std::string::append(&v20, "Montreal-languagemodel", 0x16uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v19 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v18 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = sub_2162D1CE4(0xDu);
  if (os_signpost_enabled(v11))
  {
    char v12 = v18;
    if (v19 < 0) {
      char v12 = (void **)v18[0];
    }
    LODWORD(v20.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    _os_signpost_emit_with_name_impl(&dword_2160F5000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "getSharedMontrealLanguageModel", "Creating Montreal model with identifier [%s]", (uint8_t *)&v20, 0xCu);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  v13[2] = sub_21617BAEC;
  v13[3] = &unk_26C6C9DD8;
  if (SHIBYTE(v19) < 0)
  {
    sub_21610A674(&__p, v18[0], (unint64_t)v18[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v18;
    uint64_t v15 = v19;
  }
  unsigned int v16 = a1;
  char v17 = a2;
  if (qword_26797EEB0 != -1) {
    dispatch_once(&qword_26797EEB0, &unk_26C6CA200);
  }
  v20.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  v20.__r_.__value_.__l.__size_ = 0x40000000;
  v20.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_21617D924;
  uint64_t v21 = &unk_264267930;
  long long v23 = v18;
  uint64_t v24 = qword_26797EEA8;
  char v25 = 0;
  uint64_t v22 = v13;
  sub_21617D0C0((char *)v18, (uint64_t)&v20, a3, a4);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
}

void sub_21617BA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21617BAEC(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unsigned __int16 v2 = sub_2162D1CE4(7u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    char v3 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      char v3 = (void *)*v3;
    }
    *(_DWORD *)buf = 136315138;
    char v5 = v3;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[getSharedMontrealLanguageModel] Actually creating Montreal model with identifier [%s]", buf, 0xCu);
  }
  operator new();
}

void sub_21617BC48(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4004C96B00);
  _Unwind_Resume(a1);
}

void *sub_21617BC74(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0) {
    return sub_21610A674(result, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  long long v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_21617BCA4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void sub_21617BCB8(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, void *a7@<X8>)
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2000000000;
  char v23 = 0;
  long long v14 = sub_2161E2A24(a1);
  sub_21610B834(__p, v14);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  std::string v15[2] = sub_21617C688;
  v15[3] = &unk_264267908;
  unsigned int v16 = a1;
  void v15[4] = &v20;
  v15[5] = a2;
  v15[6] = a3;
  v15[7] = a4;
  char v17 = a5;
  sub_21617BE24((char *)__p, (uint64_t)v15, 0, a7);
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a6) {
      goto LABEL_7;
    }
  }
  else if (!a6)
  {
    goto LABEL_7;
  }
  if (!*((unsigned char *)v21 + 24)) {
    sub_21617C7E0();
  }
LABEL_7:
  _Block_object_dispose(&v20, 8);
}

void sub_21617BDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v26 = *(std::__shared_weak_count **)(v24 + 8);
  if (v26) {
    sub_2161121B0(v26);
  }
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_21617BE24(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CF80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CF80))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CF88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CF88))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797B4C8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797CF88);
  }
  std::mutex::lock(&stru_26797B4C8);
  uint64_t v6 = (void *)qword_26797CF78;
  unint64_t v7 = sub_216129260(qword_26797CF78 + 24, (uint64_t)a1);
  int8x8_t v8 = (int8x8_t)v6[1];
  if (!*(void *)&v8) {
    goto LABEL_20;
  }
  unint64_t v9 = v7;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v12 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v12 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v8 - 1) & v7;
  }
  long long v13 = *(unsigned __int8 ***)(*v6 + 8 * v12);
  if (!v13 || (long long v14 = *v13) == 0)
  {
LABEL_20:
    char v17 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v18 = os_signpost_id_make_with_pointer(v17, a1);
    char v19 = sub_2162D1CE4(0xDu);
    if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v20 = v19;
      if (os_signpost_enabled(v19))
      {
        if (a1[23] >= 0) {
          uint64_t v21 = a1;
        }
        else {
          uint64_t v21 = *(char **)a1;
        }
        int buf = 136315138;
        *(void *)buf_4 = v21;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v18, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    operator new();
  }
  uint64_t v15 = (uint64_t)(v6 + 4);
  while (1)
  {
    unint64_t v16 = *((void *)v14 + 1);
    if (v16 == v9) {
      break;
    }
    if (v11 > 1)
    {
      if (v16 >= *(void *)&v8) {
        v16 %= *(void *)&v8;
      }
    }
    else
    {
      v16 &= *(void *)&v8 - 1;
    }
    if (v16 != v12) {
      goto LABEL_20;
    }
LABEL_19:
    long long v14 = *(unsigned __int8 **)v14;
    if (!v14) {
      goto LABEL_20;
    }
  }
  if ((sub_21612970C(v15, v14 + 16, (unsigned __int8 *)a1) & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v14 + 6);
  if (!v22) {
    goto LABEL_20;
  }
  if (v22->__shared_owners_ == -1 || a3 != 0) {
    goto LABEL_20;
  }
  uint64_t v24 = std::__shared_weak_count::lock(v22);
  if (v24) {
    uint64_t v25 = *((void *)v14 + 5);
  }
  else {
    uint64_t v25 = 0;
  }
  std::mutex::unlock(&stru_26797B4C8);
  *a4 = v25;
  a4[1] = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_2161121B0(v24);
  }
}

void sub_21617C5F0(_Unwind_Exception *a1)
{
}

void sub_21617C688(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  operator new();
}

void sub_21617C744(_Unwind_Exception *a1)
{
  sub_21617DB94((const void **)(v1 + 16), 0);
  sub_21617DB94((const void **)(v1 + 8), 0);
  MEMORY[0x2166CA800](v1, 0x1060C40AE8A0077);
  _Unwind_Resume(a1);
}

void sub_21617C7E0()
{
}

void sub_21617CAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  MEMORY[0x2166CA800](v35, 0x10F2C40E01BBEB9);
  if (v36 < 0) {
    operator delete(*(void **)(v37 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21617CB84(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21617DBCC(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21617CBD4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 40))
  {
    unsigned __int16 v2 = sub_2162D1CE4(0xDu);
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)int buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LanguageModelLoader::reload", "Deleting previous model", buf, 2u);
    }
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      uint64_t v4 = sub_21617DBCC(v3);
      MEMORY[0x2166CA800](v4, 0x10F2C40E01BBEB9);
    }
  }
  char v5 = sub_2162D1CE4(0xDu);
  if (os_signpost_enabled(v5))
  {
    uint64_t v6 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)int buf = 136315138;
    int8x8_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_2160F5000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LanguageModelLoader::reload", "Creating model with identifier [%s]", buf, 0xCu);
  }
  operator new();
}

void sub_21617CD74(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4004C96B00);
  _Unwind_Resume(a1);
}

void *sub_21617CDA0(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0) {
    return sub_21610A674(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(void *)(a2 + 64);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_21617CDD0(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void sub_21617CDE4(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    sub_21617DED8(*(void *)(a1 + 40));
    unsigned int v4 = atomic_load((unsigned int *)(v2 + 40));
    if (v4 == 2)
    {
      if (*(void *)v2)
      {
        uint64_t v5 = *(void *)(a1 + 40);
        sub_21617CF20(v5, 0xFFFFFFFFFFFFFFFFLL, 0);
        std::mutex::lock((std::mutex *)(v5 + 48));
        atomic_store(3u, (unsigned int *)(v5 + 40));
        uint64_t v6 = *(void *)v5;
        *(void *)uint64_t v5 = 0;
        std::mutex::unlock((std::mutex *)(v5 + 48));
        sub_2162F0F64(v6, *(void *)(a1 + 32));
        sub_2162F09FC(v6, *(const __CFString **)(*(void *)(a1 + 32) + 16));
        sub_2162F0ABC(v6, *(const __CFString **)(*(void *)(a1 + 32) + 24));
        uint64_t v7 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v6;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        LocalCenter = CFNotificationCenterGetLocalCenter();
        CFNotificationCenterPostNotification(LocalCenter, @"LanguageModelDidChange", 0, 0, 0);
        sub_21617CB84(v1, 0);
      }
    }
  }
}

uint64_t sub_21617CF20(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  sub_21617DED8(a1);
  if (a2)
  {
    unsigned int v6 = atomic_load((unsigned int *)(a1 + 40));
    if (v6 == 1)
    {
      intptr_t v7 = dispatch_group_wait(*(dispatch_group_t *)(a1 + 8), a2);
      if (a3)
      {
        if (v7) {
          (*(void (**)(uint64_t))(a3 + 16))(a3);
        }
      }
    }
  }
  unsigned int v8 = atomic_load((unsigned int *)(a1 + 40));
  if (v8 == 2) {
    return *(void *)a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_21617CFA8(uint64_t a1)
{
  sub_21617CB84((uint64_t *)(a1 + 40), 0);
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_21617DB94((const void **)(a1 + 24), 0);
  sub_21617DB94((const void **)(a1 + 16), 0);
  sub_21617DB94((const void **)(a1 + 8), 0);
  return a1;
}

void sub_21617D02C(uint64_t a1, const void *a2, void (__cdecl *a3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterAddObserver(LocalCenter, a2, a3, @"LanguageModelDidChange", 0, CFNotificationSuspensionBehaviorCoalesce);
}

void sub_21617D07C(uint64_t a1, const void *a2)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterRemoveObserver(LocalCenter, a2, @"LanguageModelDidChange", 0);
}

void sub_21617D0C0(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CF68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CF68))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CF70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CF70))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797B488, &dword_2160F5000);
    __cxa_guard_release(&qword_26797CF70);
  }
  std::mutex::lock(&stru_26797B488);
  unsigned int v6 = (void *)qword_26797CF60;
  unint64_t v7 = sub_216129260(qword_26797CF60 + 24, (uint64_t)a1);
  int8x8_t v8 = (int8x8_t)v6[1];
  if (!*(void *)&v8) {
    goto LABEL_20;
  }
  unint64_t v9 = v7;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v12 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v12 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v8 - 1) & v7;
  }
  long long v13 = *(unsigned __int8 ***)(*v6 + 8 * v12);
  if (!v13 || (long long v14 = *v13) == 0)
  {
LABEL_20:
    char v17 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v18 = os_signpost_id_make_with_pointer(v17, a1);
    char v19 = sub_2162D1CE4(0xDu);
    if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v20 = v19;
      if (os_signpost_enabled(v19))
      {
        if (a1[23] >= 0) {
          uint64_t v21 = a1;
        }
        else {
          uint64_t v21 = *(char **)a1;
        }
        int buf = 136315138;
        *(void *)buf_4 = v21;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v18, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    operator new();
  }
  uint64_t v15 = (uint64_t)(v6 + 4);
  while (1)
  {
    unint64_t v16 = *((void *)v14 + 1);
    if (v16 == v9) {
      break;
    }
    if (v11 > 1)
    {
      if (v16 >= *(void *)&v8) {
        v16 %= *(void *)&v8;
      }
    }
    else
    {
      v16 &= *(void *)&v8 - 1;
    }
    if (v16 != v12) {
      goto LABEL_20;
    }
LABEL_19:
    long long v14 = *(unsigned __int8 **)v14;
    if (!v14) {
      goto LABEL_20;
    }
  }
  if ((sub_21612970C(v15, v14 + 16, (unsigned __int8 *)a1) & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v14 + 6);
  if (!v22) {
    goto LABEL_20;
  }
  if (v22->__shared_owners_ == -1 || a3 != 0) {
    goto LABEL_20;
  }
  uint64_t v24 = std::__shared_weak_count::lock(v22);
  if (v24) {
    uint64_t v25 = *((void *)v14 + 5);
  }
  else {
    uint64_t v25 = 0;
  }
  std::mutex::unlock(&stru_26797B488);
  *a4 = v25;
  a4[1] = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_2161121B0(v24);
  }
}

void sub_21617D88C(_Unwind_Exception *a1)
{
}

void sub_21617D924()
{
}

void sub_21617D974(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F2C40E01BBEB9);
  _Unwind_Resume(a1);
}

void sub_21617D99C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21617D9D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_21617DBCC(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_21617DA1C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC058)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_21617DA60(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v2 = *(std::__shared_weak_count **)(v1 + 48);
      if (v2) {
        std::__shared_weak_count::__release_weak(v2);
      }
      if (*(char *)(v1 + 39) < 0) {
        operator delete(*(void **)(v1 + 16));
      }
    }
    operator delete((void *)v1);
  }
}

void sub_21617DAD0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21617DB08(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_21617CFA8(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_21617DB50(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC0A0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_21617DB94(const void **a1, const void *a2)
{
  unsigned int v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_21617DBCC(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = atomic_load((unsigned int *)(a1 + 40));
  if (v2 == 1)
  {
    long long v3 = (uint64_t *)(a1 + 112);
    do
    {
      dispatch_time_t v4 = dispatch_time(0, 1000000);
      if (sub_21617CF20(a1, v4, 0)) {
        break;
      }
      unsigned int v5 = atomic_load((unsigned int *)(a1 + 40));
      if (v5 == 2) {
        break;
      }
      unsigned int v6 = sub_2162D1CE4(1u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = a1 + 112;
        if (*(char *)(a1 + 135) < 0) {
          uint64_t v8 = *v3;
        }
        *(_DWORD *)int buf = 136315138;
        uint64_t v12 = v8;
        _os_log_error_impl(&dword_2160F5000, v6, OS_LOG_TYPE_ERROR, "Still waiting for resource [%s] to complete in background.", buf, 0xCu);
      }
      unsigned int v7 = atomic_load((unsigned int *)(a1 + 40));
    }
    while (v7 == 1);
  }
  std::mutex::lock((std::mutex *)(a1 + 48));
  _Block_release(*(const void **)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  std::mutex::unlock((std::mutex *)(a1 + 48));
  if (*(unsigned char *)(a1 + 144)) {
    std::mutex::unlock(*(std::mutex **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return a1;
}

void sub_21617DD84(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2160F7444(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21617DD94(uint64_t a1, long long *a2, NSObject *a3, char a4, const void *a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = dispatch_group_create();
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  uint8x8_t v10 = _Block_copy(a5);
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = 850045863;
  *(void *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8++**(_DWORD **)(result + 8) = 0u;
  *(void *)(a1 + 104) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674((unsigned char *)(a1 + 112), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    *(void *)(a1 + 12++**(_DWORD **)(result + 8) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 112) = v11;
  }
  *(void *)(a1 + 136) = a1 + 48;
  *(unsigned char *)(a1 + 144) = 0;
  dispatch_retain(a3);
  if ((a4 & 1) == 0) {
    sub_21617DED8(a1);
  }
  return a1;
}

void sub_21617DE64(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  uint64_t v4 = *v1;
  uint64_t *v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_21617DED8(uint64_t a1)
{
  unsigned int v2 = (std::once_flag::_State_type *)(a1 + 24);
  v4[0] = sub_21617DF4C;
  v4[1] = 0;
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    v6[0] = v4;
    v6[1] = &v3;
    unsigned int v5 = v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_21617E000);
  }
}

void sub_21617DF4C(uint64_t a1)
{
  sub_21617E030(a1 + 136);
  atomic_store(1u, (unsigned int *)(a1 + 40));
  v5[0] = 0;
  v5[1] = v5;
  std::string v5[2] = 0x2000000000;
  v5[3] = a1;
  unsigned int v2 = *(NSObject **)(a1 + 8);
  uint64_t v3 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  void v4[2] = sub_21617E08C;
  v4[3] = &unk_264267958;
  v4[4] = v5;
  v4[5] = a1;
  dispatch_group_async(v2, v3, v4);
  _Block_object_dispose(v5, 8);
}

uint64_t sub_21617E000(uint64_t **a1)
{
  uint64_t v1 = **a1;
  unsigned int v2 = *(uint64_t (**)(void *))v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = (void *)(*(void *)(*a1)[1] + (v3 >> 1));
  if (v3) {
    return (*(uint64_t (**)(void))(*v4 + v2))();
  }
  else {
    return v2(v4);
  }
}

void sub_21617E030(uint64_t a1)
{
  unsigned int v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      std::mutex::lock(v2);
      *(unsigned char *)(a1 + ++**(_DWORD **)(result + 8) = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  sub_21617E08C();
}

void sub_21617E08C(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(std::mutex **)(v2 + 136);
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 144) = 0;
  uint64_t v4 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v5 = os_signpost_id_make_with_pointer(v4, (const void *)v2);
  unsigned int v6 = sub_2162D1CE4(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unsigned int v7 = v6;
    if (os_signpost_enabled(v6))
    {
      uint64_t v8 = (void *)(v2 + 112);
      if (*(char *)(v2 + 135) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      int v14 = 136315138;
      uint64_t v15 = v8;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "AsyncResourceInit", "Async resource load with key: [%s]", (uint8_t *)&v14, 0xCu);
    }
  }
  uint64_t v9 = *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16))();
  uint64_t v11 = *v9;
  *uint64_t v9 = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  atomic_store(2u, (unsigned int *)(v2 + 40));
  uint64_t v12 = sub_2162D1CE4(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v13 = v12;
    if (os_signpost_enabled(v12))
    {
      LOWORD(v14) = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v13, OS_SIGNPOST_INTERVAL_END, v5, "AsyncResourceInit", (const char *)&unk_2163CBB73, (uint8_t *)&v14, 2u);
    }
  }
  std::mutex::unlock(v3);
}

void sub_21617E238(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21617E254(uint64_t a1, const __CFURL *a2)
{
  *(void *)a1 = &unk_26C6C49A0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = &unk_26C6B5180;
  *(_DWORD *)(a1 + 16) = 0;
  sub_2161055D0((void *)(a1 + 24));
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4++**(_DWORD **)(result + 8) = 0u;
  sub_2161808CC(a1 + 72);
  *(unsigned char *)(a1 + 416) = 0;
  sub_21617E318(a1, a2);
  return a1;
}

void sub_21617E2F4(_Unwind_Exception *a1)
{
  sub_21618098C(v2);
  sub_21617EE08(v1);
  _Unwind_Resume(a1);
}

void sub_21617E318(uint64_t a1, const __CFURL *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  sub_2163250C8(@"th", a2, @"BlockPhrase-th.dat", 0, &url);
  if (CFURLGetFileSystemRepresentation(url, 1u, (UInt8 *)buffer, 1024)) {
    uint64_t v3 = (char *)buffer;
  }
  else {
    uint64_t v3 = (char *)&unk_2163A8923;
  }
  sub_21610B834(__p, v3);
  if (v8 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (stat((const char *)v4, buffer))
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    if (v8 >= 0) {
      unsigned int v6 = (char *)__p;
    }
    else {
      unsigned int v6 = (char *)__p[0];
    }
    int v5 = sub_21617E494(a1 + 72, v6, "r");
    if (v5) {
      LOBYTE(v5) = sub_21617E894((uint64_t *)(a1 + 8), *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
  }
  *(unsigned char *)(a1 + 416) = v5;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (url) {
    CFRelease(url);
  }
}

void sub_21617E444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21617E494(uint64_t a1, char *a2, const char *a3)
{
  sub_216180AD8(a1);
  sub_21610B834(&v47, a2);
  unsigned int v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = *(_OWORD *)&v47.st_dev;
  *(void *)(a1 + 40) = *(void *)&v47.st_uid;
  if (!strcmp(a3, "r"))
  {
    *(_DWORD *)(a1 + 340) = 0;
    int v16 = open(a2, 0);
    *(_DWORD *)(a1 + 336) = v16;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    uint64_t v18 = *(void *)(a1 + 48);
    char v17 = (void *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v17 + *(void *)(v18 - 24)), 0);
    char v19 = sub_216129E78(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_216129E78(v19, (uint64_t)"(", 1);
    uint64_t v20 = (void *)std::ostream::operator<<();
    uint64_t v21 = sub_216129E78(v20, (uint64_t)") [", 3);
    uint64_t v22 = "(fd = ::open(filename, flag | O_BINARY)) >= 0";
    uint64_t v23 = 45;
LABEL_15:
    uint64_t v37 = sub_216129E78(v21, (uint64_t)v22, v23);
    uint64_t v13 = sub_216129E78(v37, (uint64_t)"] ", 2);
    int v14 = "open failed: ";
    uint64_t v15 = 13;
    goto LABEL_19;
  }
  if (strcmp(a3, "r+"))
  {
    uint64_t v8 = *(void *)(a1 + 48);
    unsigned int v7 = (void *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v7 + *(void *)(v8 - 24)), 0);
    uint64_t v9 = sub_216129E78(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_216129E78(v9, (uint64_t)"(", 1);
    uint64_t v10 = (void *)std::ostream::operator<<();
    uint64_t v11 = sub_216129E78(v10, (uint64_t)") [", 3);
    uint64_t v12 = sub_216129E78(v11, (uint64_t)"false", 5);
    uint64_t v13 = sub_216129E78(v12, (uint64_t)"] ", 2);
    int v14 = "unknown open mode: ";
    uint64_t v15 = 19;
    goto LABEL_19;
  }
  *(_DWORD *)(a1 + 340) = 514;
  int v16 = open(a2, 514, 384);
  *(_DWORD *)(a1 + 336) = v16;
  if (v16 < 0)
  {
    uint64_t v34 = *(void *)(a1 + 48);
    unsigned int v33 = (void *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v33 + *(void *)(v34 - 24)), 0);
    uint64_t v35 = sub_216129E78(v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_216129E78(v35, (uint64_t)"(", 1);
    char v36 = (void *)std::ostream::operator<<();
    uint64_t v21 = sub_216129E78(v36, (uint64_t)") [", 3);
    uint64_t v22 = "(fd = ::open(filename, flag | O_BINARY, S_IRUSR | S_IWUSR)) >= 0";
    uint64_t v23 = 64;
    goto LABEL_15;
  }
LABEL_9:
  if ((fstat(v16, &v47) & 0x80000000) == 0)
  {
    off_t st_size = v47.st_size;
    *(void *)(a1 + 16) = v47.st_size;
    if (st_size)
    {
      uint64_t v25 = mmap(0, st_size, *(_DWORD *)(a1 + 340) & 2 | 1u, 1, *(_DWORD *)(a1 + 336), 0);
      if (v25 == (void *)-1)
      {
        uint64_t v40 = *(void *)(a1 + 48);
        uint64_t v39 = (void *)(a1 + 48);
        std::ios_base::clear((std::ios_base *)((char *)v39 + *(void *)(v40 - 24)), 0);
        int v41 = sub_216129E78(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
        sub_216129E78(v41, (uint64_t)"(", 1);
        uint64_t v42 = (void *)std::ostream::operator<<();
        int v43 = sub_216129E78(v42, (uint64_t)") [", 3);
        uint64_t v44 = sub_216129E78(v43, (uint64_t)"(p = reinterpret_cast<char *> (::mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 89);
        uint64_t v13 = sub_216129E78(v44, (uint64_t)"] ", 2);
        int v14 = "mmap() failed: ";
        uint64_t v15 = 15;
        goto LABEL_19;
      }
      uint64_t v26 = v25;
      madvise(v25, *(void *)(a1 + 16), 1);
    }
    else
    {
      uint64_t v26 = 0;
    }
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v26;
    close(*(_DWORD *)(a1 + 336));
    *(_DWORD *)(a1 + 336) = -1;
    return 1;
  }
  uint64_t v28 = *(void *)(a1 + 48);
  uint64_t v27 = (void *)(a1 + 48);
  std::ios_base::clear((std::ios_base *)((char *)v27 + *(void *)(v28 - 24)), 0);
  int v29 = sub_216129E78(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
  sub_216129E78(v29, (uint64_t)"(", 1);
  uint64_t v30 = (void *)std::ostream::operator<<();
  uint64_t v31 = sub_216129E78(v30, (uint64_t)") [", 3);
  int v32 = sub_216129E78(v31, (uint64_t)"::fstat(fd, &st) >= 0", 21);
  uint64_t v13 = sub_216129E78(v32, (uint64_t)"] ", 2);
  int v14 = "failed to get file size: ";
  uint64_t v15 = 25;
LABEL_19:
  int v45 = sub_216129E78(v13, (uint64_t)v14, v15);
  size_t v46 = strlen(a2);
  sub_216129E78(v45, (uint64_t)a2, v46);
  return 0;
}

uint64_t sub_21617E894(uint64_t *a1, void *a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(void *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_2161061CC(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  unsigned int v7 = (char *)a2 + 4;
  uint64_t v8 = *(unsigned int *)a2;
  sub_2161061CC(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 2;
  return 1;
}

uint64_t sub_21617E950(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v3 = (unint64_t)a2[1];
  }
  uint64_t result = sub_21618083C(a1, v3 + 1);
  if (*(char *)(result + 23) >= 0) {
    int v5 = (char *)result;
  }
  else {
    int v5 = *(char **)result;
  }
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v6 = a2;
    }
    else {
      unsigned int v6 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v5, v6, 2 * v3);
  }
  *(_DWORD *)&v5[2 * v3] = 45;
  return result;
}

void sub_21617E9DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

double sub_21617E9F8@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_21617EA04(uint64_t a1, void *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

uint64_t sub_21617EA18(uint64_t a1, void *a2, unint64_t a3)
{
  if (!*(unsigned char *)(a1 + 416) || a3 >= (uint64_t)(a2[1] - *a2) >> 3) {
    return 0;
  }
  sub_21617E950((uint64_t)&v25, (const void **)(*(void *)(*a2 + 8 * a3) + 56));
  *(_OWORD *)long long __p = 0u;
  long long v22 = 0u;
  uint64_t v6 = v27;
  if ((v27 & 0x80u) == 0) {
    unsigned int v7 = &v25;
  }
  else {
    unsigned int v7 = v25;
  }
  if ((v27 & 0x80u) != 0) {
    uint64_t v6 = v26;
  }
  uint64_t v8 = (uint64_t *)(a1 + 24);
  sub_216106678((uint64_t *)(a1 + 24), (uint64_t)v7, 2 * v6, (uint64_t)__p, &v23);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  uint64_t v9 = v23;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((char)v27 < 0) {
    operator delete(v25);
  }
  if (v9 == (void *)0xFFFFFFFFLL) {
    return 0;
  }
  sub_21617E950((uint64_t)&v25, (const void **)(*(void *)(*a2 + 8 * a3) + 56));
  *(_OWORD *)long long __p = 0u;
  long long v22 = 0u;
  uint64_t v12 = v27;
  if ((v27 & 0x80u) == 0) {
    uint64_t v13 = &v25;
  }
  else {
    uint64_t v13 = v25;
  }
  if ((v27 & 0x80u) != 0) {
    uint64_t v12 = v26;
  }
  sub_216106678((uint64_t *)(a1 + 24), (uint64_t)v13, 2 * v12, (uint64_t)__p, &v23);
  int v14 = (uint64_t *)(a1 + 8);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  uint64_t v15 = a3;
  while (1)
  {
    int v16 = v15;
    if ((int)v15 <= 0)
    {
LABEL_33:
      unsigned int v20 = 1;
      goto LABEL_35;
    }
    uint64_t v17 = *(void *)(*a2 + 8 * v15 - 8);
    if (*(char *)(v17 + 79) < 0)
    {
      uint64_t v18 = *(void *)(v17 + 56);
      uint64_t v19 = *(void *)(v17 + 64);
    }
    else
    {
      uint64_t v18 = v17 + 56;
      uint64_t v19 = *(unsigned __int8 *)(v17 + 79);
    }
    sub_216106678(v8, v18, 2 * v19, (uint64_t)&v23, __p);
    uint64_t v23 = __p[0];
    std::string::operator=(&v24, (const std::string *)&__p[1]);
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[1]);
    }
    if (v23 == (void *)0xFFFFFFFFLL) {
      break;
    }
    --v15;
    if (sub_21617ECA8(v14, (uint64_t)&v23, __p)) {
      goto LABEL_33;
    }
  }
  unsigned int v20 = 0;
LABEL_35:
  if (v16 > 0) {
    uint64_t v10 = v20;
  }
  else {
    uint64_t v10 = 0;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((char)v27 < 0) {
    operator delete(v25);
  }
  return v10;
}

void sub_21617EC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21617ECA8(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1)) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v6 = sub_216106448(a1 + 2, a2, (uint64_t *)&v8);
  if (v6) {
    *a3 = sub_216180148((uint64_t)a1, v8);
  }
  return v6;
}

void *sub_21617ED40(void *a1)
{
  *a1 = &unk_26C6C49A0;
  uint64_t v2 = a1 + 1;
  sub_21618098C((uint64_t)(a1 + 9));
  sub_21617EE08(v2);
  return a1;
}

void sub_21617ED94(void *a1)
{
  *a1 = &unk_26C6C49A0;
  uint64_t v1 = a1 + 1;
  sub_21618098C((uint64_t)(a1 + 9));
  sub_21617EE08(v1);

  JUMPOUT(0x2166CA800);
}

void *sub_21617EE08(void *a1)
{
  *a1 = &unk_26C6B5180;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_2161060A0(a1 + 2);
  return a1;
}

void sub_21617EE60(void *a1)
{
  sub_21617EE08(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21617EE98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  long long __p = 0;
  uint64_t v35 = 0;
  char v36 = 0;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v10 = *(void **)(a3 + 8 * i);
      unint64_t v11 = *(void *)(a4 + 8 * i) >> 1;
      uint64_t v12 = v38;
      if ((unint64_t)v38 >= v39)
      {
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v38 - v37) >> 3);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        if (0x5555555555555556 * ((uint64_t)(v39 - v37) >> 3) > v15) {
          unint64_t v15 = 0x5555555555555556 * ((uint64_t)(v39 - v37) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v37) >> 3) >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v15;
        }
        uint64_t v44 = &v39;
        if (v16) {
          uint64_t v17 = (void **)sub_216129BFC((uint64_t)&v39, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v40 = v17;
        int v41 = &v17[3 * v14];
        uint64_t v42 = v41;
        int v43 = &v17[3 * v16];
        sub_21617FAAC(v41, v10, v11);
        v42 += 3;
        sub_21617FB68(&v37, &v40);
        uint64_t v13 = v38;
        sub_21613FD68((uint64_t)&v40);
      }
      else
      {
        sub_21617FAAC(v38, *(void **)(a3 + 8 * i), *(void *)(a4 + 8 * i) >> 1);
        uint64_t v13 = v12 + 3;
      }
      uint64_t v38 = v13;
      if (a5)
      {
        uint64_t v18 = *(void *)(a5 + 8 * i);
        uint64_t v19 = v35;
        if (v35 >= v36)
        {
          uint64_t v21 = __p;
          uint64_t v22 = (v35 - __p) >> 2;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v24 = v36 - __p;
          if ((v36 - __p) >> 1 > v23) {
            unint64_t v23 = v24 >> 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            uint64_t v26 = (char *)sub_2161129B4((uint64_t)&v36, v25);
            uint64_t v21 = __p;
            uint64_t v19 = v35;
          }
          else
          {
            uint64_t v26 = 0;
          }
          unsigned __int8 v27 = &v26[4 * v22];
          *(_DWORD *)unsigned __int8 v27 = v18;
          unsigned int v20 = v27 + 4;
          while (v19 != v21)
          {
            int v28 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v27 - 1) = v28;
            v27 -= 4;
          }
          long long __p = v27;
          char v36 = &v26[4 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v35 = v18;
          unsigned int v20 = v35 + 4;
        }
        uint64_t v35 = v20;
      }
    }
  }
  uint64_t v29 = *a1;
  if (a5) {
    uint64_t v30 = (*(uint64_t (**)(void))(v29 + 64))();
  }
  else {
    uint64_t v30 = (*(uint64_t (**)(void))(v29 + 56))();
  }
  uint64_t v31 = v30;
  if (__p) {
    operator delete(__p);
  }
  uint64_t v40 = (void **)&v37;
  sub_21613EFD0(&v40);
  return v31;
}

void sub_21617F15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  long long __p = &a15;
  sub_21613EFD0((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_21617F1B4(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unsigned int v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned int *))(*(void *)a1 + 80))(a1, a2, a3 >> 1, &v6);
  *a4 = v6;
  return result;
}

void *sub_21617F214(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C6B5958;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, unint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3 >> 1, v5);
  return sub_21617FE0C(v5);
}

void sub_21617F2BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617FE0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21617F2D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C6B5900;
  v5[1] = a4;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, unint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3 >> 1, v5);
  return sub_21617FE0C(v5);
}

void sub_21617F378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617FE0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21617F38C@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  sub_216140140((uint64_t)v14);
  sub_216106378(a1 + 2, (uint64_t)&v15);
  sub_216178BC0((uint64_t)v16, __p);
  uint64_t v4 = a1[4];
  if (v4)
  {
    int v5 = HIBYTE(v13);
    if (v13 < 0) {
      int v5 = (int)__p[1];
    }
    *(_DWORD *)__s = v5;
    unsigned int v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0) {
      unsigned int v7 = __p;
    }
    else {
      unsigned int v7 = (void **)__p[0];
    }
    if (v13 >= 0) {
      std::string::size_type v8 = HIBYTE(v13);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 4 * v4);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v15 = v9;
  v16[0] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166CA750](&v18);
}

void sub_21617F594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t sub_21617F5D4(uint64_t a1, uint64_t **a2)
{
  return sub_21617FF88(a1, *a2, a2[1], 0);
}

uint64_t sub_21617F5E4(void *a1, uint64_t **a2, int **a3)
{
  long long __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v5 = *a2;
  unsigned int v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3) {
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  }
  uint64_t v9 = sub_21617FF88((uint64_t)a1, v5, v6, &__p);
  if (v9)
  {
    sub_21617A878((uint64_t)(a1 + 5), 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    uint64_t v10 = a1[5];
    int64_t v11 = (char *)a2[1] - (char *)*a2;
    if (v11)
    {
      unint64_t v12 = v11 / 24;
      int64_t v13 = *a3;
      unint64_t v14 = (uint64_t *)__p;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        int v16 = *v13++;
        int v15 = v16;
        uint64_t v17 = *v14++;
        *(_DWORD *)(v10 + 4 * v17) = v15;
        --v12;
      }
      while (v12);
    }
    uint64_t v18 = (a1[6] - v10) >> 2;
    a1[3] = v10;
    a1[4] = v18;
  }
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_21617F71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21617F738(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = 0;
  uint64_t v6 = sub_2161064D4((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t *)&v8);
  if (v6) {
    *a4 = sub_216180148(a1, v8);
  }
  return v6;
}

void *sub_21617F79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C6B58A8;
  v5[1] = a1;
  std::string v5[2] = a4;
  v5[3] = v5;
  sub_216106560((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v5);
  return sub_216180370(v5);
}

void sub_21617F828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216180370((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21617F83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v6[4] = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C6B5850;
  v6[1] = a1;
  void v6[2] = a4;
  v6[3] = v6;
  sub_2161065EC((unint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v6, (a5 << (a5 > 0)));
  return sub_216180370(v6);
}

void sub_21617F8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216180370((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21617F8EC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v9[0] = &unk_26C6B57A0;
    v9[1] = a1;
    void v9[2] = a3;
    v9[3] = v9;
    sub_216106704(a1 + 2, a2, (uint64_t)v9, a4);
    return sub_216180370(v9);
  }
  return result;
}

void sub_21617F9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216180370((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21617F9D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v7[0] = &unk_26C6B57F8;
    v7[1] = a3;
    v7[3] = v7;
    sub_216106790(a1 + 2, a2, (uint64_t)v7);
    return sub_2161807B8(v7);
  }
  return result;
}

void sub_21617FA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161807B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21617FAAC(void *__dst, void *__src, unint64_t a3)
{
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21617FB50();
  }
  if (a3 >= 0xB)
  {
    uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB) {
      uint64_t v7 = a3 | 3;
    }
    uint64_t v6 = sub_21610FD44((uint64_t)__dst, v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    char *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = a3;
    uint64_t v6 = __dst;
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, 2 * a3);
LABEL_9:
  *((_WORD *)v6 + a3) = 0;
  return __dst;
}

void sub_21617FB50()
{
}

uint64_t sub_21617FB68(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21617FBE0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21617FBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - ++**(_DWORD **)(result + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - ++**(_DWORD **)(result + 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_21617FC80((uint64_t)v12);
  return a6;
}

uint64_t sub_21617FC80(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21613FD20(a1);
  }
  return a1;
}

void sub_21617FCBC()
{
}

void *sub_21617FCD0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6B5958;
  result[1] = v3;
  return result;
}

uint64_t sub_21617FD18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6B5958;
  a2[1] = v2;
  return result;
}

uint64_t sub_21617FD44(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_21617FDB0(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, 2 * a3[1], a4);
}

uint64_t sub_21617FD64(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5160)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21617FDA4()
{
  return &unk_26C6B5160;
}

uint64_t sub_21617FDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = a3;
  v7[1] = a4;
  uint64_t v6 = a2;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)a1 + 48))(a1, &v6, v7, a5);
}

void *sub_21617FE0C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21617FE94()
{
}

void *sub_21617FEA8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6B5900;
  result[1] = v3;
  return result;
}

uint64_t sub_21617FEF0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6B5900;
  a2[1] = v2;
  return result;
}

uint64_t sub_21617FF1C(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_21617FDB0(*(void *)(*(void *)(a1 + 8) + 24), *a2, *a3, 2 * a3[1], a4);
}

uint64_t sub_21617FF3C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5150)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21617FF7C()
{
  return &unk_26C6B5150;
}

uint64_t sub_21617FF88(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  long long __p = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2 != a3)
  {
    uint64_t v7 = a2;
    uint64_t v8 = 0;
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        long long v10 = (uint64_t *)*v7;
        uint64_t v9 = v7[1];
      }
      else
      {
        uint64_t v9 = *((unsigned __int8 *)v7 + 23);
        long long v10 = v7;
      }
      uint64_t v11 = 2 * v9;
      if (v8 >= v24)
      {
        uint64_t v12 = (v8 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_21610CB04();
        }
        unint64_t v13 = (v24 - (unsigned char *)__p) >> 3;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)(v24 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        long long v15 = (char *)sub_21612AA90((uint64_t)&v24, v14);
        uint64_t v17 = &v15[16 * v12];
        *(void *)uint64_t v17 = v10;
        *((void *)v17 + 1) = v11;
        uint64_t v19 = (char *)__p;
        uint64_t v18 = v23;
        unsigned int v20 = v17;
        if (v23 != __p)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v18 - 1);
            v20 -= 16;
            v18 -= 16;
          }
          while (v18 != v19);
          uint64_t v18 = (char *)__p;
        }
        uint64_t v8 = v17 + 16;
        long long __p = v20;
        unint64_t v23 = v17 + 16;
        uint64_t v24 = &v15[16 * v16];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)uint64_t v8 = v10;
        *((void *)v8 + 1) = v11;
        v8 += 16;
      }
      unint64_t v23 = v8;
      v7 += 3;
    }
    while (v7 != a3);
  }
  sub_2161060A4((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    unint64_t v23 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

unint64_t sub_216180148(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_21613F39C(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_2642668A8, MEMORY[0x263F8C068]);
    }
    return *(unsigned int *)(*(void *)(a1 + 24) + 4 * a2);
  }
  return a2;
}

void sub_2161801B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2161801D0()
{
}

__n128 sub_2161801E4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C6B58A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

__n128 sub_216180230(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6B58A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

uint64_t sub_216180260(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (unint64_t)a3[1] >> 1;
  int v8 = sub_216180148(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_216180314(v9, v8, v6, v7, a4);
}

uint64_t sub_2161802C8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5140)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216180308()
{
  return &unk_26C6B5140;
}

uint64_t sub_216180314(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = a3;
  v7[1] = a4;
  int v6 = a2;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, int *, void *, uint64_t))(*(void *)a1 + 48))(a1, &v6, v7, a5);
}

void *sub_216180370(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2161803F8()
{
}

__n128 sub_21618040C(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C6B5850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

__n128 sub_216180458(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6B5850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

uint64_t sub_216180488(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (unint64_t)a3[1] >> 1;
  int v8 = sub_216180148(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_216180314(v9, v8, v6, v7, a4);
}

uint64_t sub_2161804F0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5130)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216180530()
{
  return &unk_26C6B5130;
}

void sub_216180540()
{
}

__n128 sub_216180554(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C6B57A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

__n128 sub_2161805A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6B57A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

uint64_t sub_2161805D0(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (unint64_t)a3[1] >> 1;
  int v8 = sub_216180148(*(void *)(a1 + 8), *a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);

  return sub_216180314(v9, v8, v6, v7, a4);
}

uint64_t sub_216180638(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5110)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216180678()
{
  return &unk_26C6B5110;
}

void sub_216180688()
{
}

void *sub_21618069C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6B57F8;
  result[1] = v3;
  return result;
}

uint64_t sub_2161806E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6B57F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_216180710(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24);
  __int16 v4 = *a2;
  if (!v2) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_21618076C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5120)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2161807AC()
{
  return &unk_26C6B5120;
}

void *sub_2161807B8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_21618083C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21617FB50();
  }
  if (a2 > 0xA)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a2 | 3) != 0xB) {
      uint64_t v4 = a2 | 3;
    }
    uint64_t v5 = v4 + 1;
    if (v4 + 1 < 0) {
      sub_2160FFA74();
    }
    uint64_t v6 = operator new(2 * v5);
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t sub_2161808CC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C51E0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216128C80(a1 + 48);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 32++**(_DWORD **)(result + 8) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  return a1;
}

void sub_216180938(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_216180954(uint64_t a1)
{
  sub_21618098C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21618098C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C51E0;
  sub_216180AD8(a1);
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 48 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 56) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 160);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void *sub_216180AD8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 336);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 336) = -1;
  }
  __n128 result = *(void **)(a1 + 8);
  if (result) {
    __n128 result = (void *)munmap(result, *(void *)(a1 + 16));
  }
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  return result;
}

unsigned int *sub_216180B20(unsigned int *a1, int *a2)
{
  *a1 = sub_2161E2834(*a2);
  *((void *)a1 + 1) = a2;
  unsigned int v4 = sub_2161E2834(*a2);
  sub_216180DC4(v4, 0, (void *)a1 + 2);
  uint64_t v5 = (uint64_t *)sub_2162D8C20();
  uint64_t v6 = (const UInt8 *)sub_2162D8CB8(v5, *a1, off_26797C900[0], off_26797C8B8[0]);
  int v7 = *((char *)v6 + 23);
  if (v7 >= 0) {
    int v8 = v6;
  }
  else {
    int v8 = *(const UInt8 **)v6;
  }
  if (v7 >= 0) {
    CFIndex v9 = v6[23];
  }
  else {
    CFIndex v9 = *((void *)v6 + 1);
  }
  CFURLRef v10 = CFURLCreateFromFileSystemRepresentation(0, v8, v9, 0);
  CFPropertyListRef v11 = sub_2161E459C(v10);
  if (v10) {
    CFRelease(v10);
  }
  *((void *)a1 + 5) = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *((void *)a1 + 4) = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v11)
  {
    CFTypeID v12 = CFGetTypeID(v11);
    if (v12 == CFDictionaryGetTypeID())
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v11, @"no tone change");
      if (Value)
      {
        for (CFIndex i = 0; i < CFArrayGetCount(Value); ++i)
        {
          CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(Value, i);
          for (CFIndex j = 0; j < CFArrayGetCount(ValueAtIndex); ++j)
          {
            uint64_t v17 = CFArrayGetValueAtIndex(ValueAtIndex, j);
            CFDictionarySetValue(*((CFMutableDictionaryRef *)a1 + 5), v17, ValueAtIndex);
            CFDictionarySetValue(*((CFMutableDictionaryRef *)a1 + 4), v17, ValueAtIndex);
          }
        }
      }
      CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v11, @"tone change");
      if (v18)
      {
        for (CFIndex k = 0; k < CFArrayGetCount(v18); ++k)
        {
          CFArrayRef v20 = (const __CFArray *)CFArrayGetValueAtIndex(v18, k);
          for (CFIndex m = 0; m < CFArrayGetCount(v20); ++m)
          {
            uint64_t v22 = CFArrayGetValueAtIndex(v20, m);
            CFDictionarySetValue(*((CFMutableDictionaryRef *)a1 + 5), v22, v20);
          }
        }
      }
    }
    CFRelease(v11);
  }
  return a1;
}

void sub_216180D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216182BB8((const void **)va, 0);
  unsigned int v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4) {
    sub_2161121B0(v4);
  }
  _Unwind_Resume(a1);
}

void sub_216180DC4(unsigned int a1@<W0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = sub_2161E2A24(a1);
  int v7 = (unsigned __int8 *)sub_21610B834(&v14, v6);
  uint64_t v10 = 0;
  CFPropertyListRef v11 = &v10;
  uint64_t v12 = 0x2000000000;
  char v13 = 0;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  std::string v8[2] = sub_2161822D8;
  v8[3] = &unk_264266B30;
  v8[4] = &v10;
  unsigned int v9 = a1;
  sub_216181F88(v7, (uint64_t)v8, 0, a3);
  if (a2 && !*((unsigned char *)v11 + 24)) {
    sub_216182354();
  }
  _Block_object_dispose(&v10, 8);
  if (v15 < 0) {
    operator delete(v14);
  }
}

void sub_216180EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  CFPropertyListRef v11 = *(std::__shared_weak_count **)(v8 + 8);
  if (v11) {
    sub_2161121B0(v11);
  }
  _Block_object_dispose(va, 8);
  if (*(char *)(v9 - 33) < 0) {
    operator delete(*(void **)(v9 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216180EF0(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_2161121B0(v2);
  }
  return a1;
}

uint64_t sub_216180F34(uint64_t a1, uint64_t a2, unint64_t a3, double *a4)
{
  *a4 = 0.0;
  long long __p = 0;
  unsigned int v92 = 0;
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (!v4) {
    return v4;
  }
  unint64_t v5 = a3;
  uint64_t v89 = *(void *)(a2 + 8) - *(void *)a2;
  uint64_t v6 = v4 >> 2;
  unint64_t v7 = (v4 >> 2) + 1;
  uint64_t v4 = 1;
  if (v7 <= a3) {
    return v4;
  }
  int64_t v90 = a3 + 2;
  uint64_t v88 = v6;
  uint64_t v86 = v6 - 1;
  uint64_t v87 = v6 - 2;
  do
  {
    uint64_t v10 = __p;
    if (!v5)
    {
      int v12 = **(_DWORD **)a2;
      if (__p < v92)
      {
        *(_DWORD *)long long __p = 1;
        char v15 = __p + 4;
        goto LABEL_104;
      }
      unint64_t v19 = (v92 - __p) >> 1;
      if (v19 <= 1) {
        unint64_t v19 = 1;
      }
      if ((unint64_t)(v92 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      uint64_t v22 = (char *)sub_2161129B4((uint64_t)&v92, v20);
      unint64_t v23 = __p;
      uint64_t v24 = __p;
      *(_DWORD *)uint64_t v22 = 1;
      char v15 = v22 + 4;
      unint64_t v25 = v22;
      while (v24 != __p)
      {
        int v26 = *((_DWORD *)v24 - 1);
        v24 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      unsigned __int8 v27 = &v22[4 * v21];
      long long __p = v25;
      goto LABEL_102;
    }
    if (v89 == 4) {
      goto LABEL_118;
    }
    unint64_t v11 = v5 - 1;
    if (v5 == 1)
    {
      int v12 = *(_DWORD *)(*(void *)a2 + 4);
      char v13 = v92;
      if (__p >= v92)
      {
        unint64_t v28 = (v92 - __p) >> 1;
        if (v28 <= 1) {
          unint64_t v28 = 1;
        }
        if ((unint64_t)(v92 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        uint64_t v31 = sub_2161129B4((uint64_t)&v92, v29);
        int v32 = __p;
        unsigned int v33 = __p;
        *uint64_t v31 = 1;
        unint64_t v14 = v31 + 1;
        uint64_t v34 = (char *)v31;
        while (v33 != __p)
        {
          int v35 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        char v13 = (char *)&v31[v30];
        long long __p = v34;
        unsigned int v92 = v13;
        if (v32)
        {
          operator delete(v32);
          char v13 = v92;
        }
      }
      else
      {
        *(_DWORD *)long long __p = 1;
        unint64_t v14 = (int *)(__p + 4);
      }
      unint64_t v39 = *(int **)a2;
      if (v14 < (int *)v13)
      {
        *unint64_t v14 = *v39;
        uint64_t v40 = (char *)(v14 + 1);
LABEL_65:
        char v15 = v40;
        goto LABEL_104;
      }
      unint64_t v23 = __p;
      uint64_t v41 = ((char *)v14 - __p) >> 2;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        goto LABEL_123;
      }
      uint64_t v43 = v13 - __p;
      if (v43 >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        int v45 = (char *)sub_2161129B4((uint64_t)&v92, v44);
        unint64_t v23 = __p;
      }
      else
      {
        int v45 = 0;
      }
      uint64_t v73 = &v45[4 * v41];
      *(_DWORD *)uint64_t v73 = *v39;
      char v15 = v73 + 4;
      while (v14 != (int *)v23)
      {
        int v74 = *--v14;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
LABEL_101:
      unsigned __int8 v27 = &v45[4 * v44];
      long long __p = v73;
LABEL_102:
      unsigned int v92 = v27;
      if (v23) {
        operator delete(v23);
      }
      goto LABEL_104;
    }
    uint64_t v16 = *(int **)a2;
    if (v5 != v88)
    {
      int v12 = v16[v5];
      unint64_t v36 = v5 - 2;
      uint64_t v37 = v92;
      if (__p >= v92)
      {
        unint64_t v54 = (v92 - __p) >> 1;
        if (v54 <= 1) {
          unint64_t v54 = 1;
        }
        if ((unint64_t)(v92 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v54;
        }
        uint64_t v57 = (char *)sub_2161129B4((uint64_t)&v92, v55);
        uint64_t v58 = __p;
        uint64_t v59 = __p;
        *(_DWORD *)uint64_t v57 = v16[v36];
        uint64_t v38 = v57 + 4;
        host_t v60 = v57;
        while (v59 != __p)
        {
          int v61 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *((_DWORD *)v60 - 1) = v61;
          v60 -= 4;
        }
        uint64_t v37 = &v57[4 * v56];
        long long __p = v60;
        unsigned int v92 = v37;
        if (v58)
        {
          operator delete(v58);
          uint64_t v37 = v92;
        }
      }
      else
      {
        *(_DWORD *)long long __p = v16[v36];
        uint64_t v38 = __p + 4;
      }
      uint64_t v69 = *(int **)a2;
      if (v38 < v37)
      {
        *(_DWORD *)uint64_t v38 = v69[v11];
        char v15 = v38 + 4;
        goto LABEL_104;
      }
      unint64_t v23 = __p;
      uint64_t v70 = (v38 - __p) >> 2;
      unint64_t v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 62) {
LABEL_123:
      }
        sub_21610CB04();
      uint64_t v72 = v37 - __p;
      if (v72 >> 1 > v71) {
        unint64_t v71 = v72 >> 1;
      }
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v71;
      }
      if (v44)
      {
        int v45 = (char *)sub_2161129B4((uint64_t)&v92, v44);
        unint64_t v23 = __p;
      }
      else
      {
        int v45 = 0;
      }
      uint64_t v73 = &v45[4 * v70];
      *(_DWORD *)uint64_t v73 = v69[v11];
      char v15 = v73 + 4;
      while (v38 != v23)
      {
        int v77 = *((_DWORD *)v38 - 1);
        v38 -= 4;
        *((_DWORD *)v73 - 1) = v77;
        v73 -= 4;
      }
      goto LABEL_101;
    }
    uint64_t v17 = v92;
    if (__p >= v92)
    {
      unint64_t v46 = (v92 - __p) >> 1;
      if (v46 <= 1) {
        unint64_t v46 = 1;
      }
      if ((unint64_t)(v92 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v46;
      }
      uint64_t v49 = (char *)sub_2161129B4((uint64_t)&v92, v47);
      uint64_t v50 = __p;
      uint64_t v51 = __p;
      *(_DWORD *)uint64_t v49 = v16[v87];
      CFArrayRef v18 = v49 + 4;
      int v52 = v49;
      while (v51 != __p)
      {
        int v53 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *((_DWORD *)v52 - 1) = v53;
        v52 -= 4;
      }
      uint64_t v17 = &v49[4 * v48];
      long long __p = v52;
      unsigned int v92 = v17;
      if (v50)
      {
        operator delete(v50);
        uint64_t v17 = v92;
      }
    }
    else
    {
      *(_DWORD *)long long __p = v16[v87];
      CFArrayRef v18 = __p + 4;
    }
    uint64_t v62 = *(int **)a2;
    if (v18 < v17)
    {
      *(_DWORD *)CFArrayRef v18 = v62[v86];
      uint64_t v40 = v18 + 4;
      int v12 = 2;
      goto LABEL_65;
    }
    unsigned int v63 = __p;
    uint64_t v64 = (v18 - __p) >> 2;
    unint64_t v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 62) {
      goto LABEL_123;
    }
    uint64_t v66 = v17 - __p;
    if (v66 >> 1 > v65) {
      unint64_t v65 = v66 >> 1;
    }
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v65;
    }
    if (v67)
    {
      unint64_t v68 = (char *)sub_2161129B4((uint64_t)&v92, v67);
      unsigned int v63 = __p;
    }
    else
    {
      unint64_t v68 = 0;
    }
    uint64_t v75 = &v68[4 * v64];
    *(_DWORD *)uint64_t v75 = v62[v86];
    char v15 = v75 + 4;
    while (v18 != v63)
    {
      int v76 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v75 - 1) = v76;
      v75 -= 4;
    }
    long long __p = v75;
    unsigned int v92 = &v68[4 * v67];
    if (v63) {
      operator delete(v63);
    }
    int v12 = 2;
LABEL_104:
    uint64_t v78 = __p;
    uint64_t v79 = (v15 - __p) >> 2;
    if (v79 == 2)
    {
      int v80 = *((_DWORD *)__p + 1);
      if (*(_DWORD *)__p == v80 || v12 == *(_DWORD *)__p || v12 == v80)
      {
LABEL_120:
        uint64_t v4 = 0;
LABEL_121:
        uint64_t v84 = v4;
        operator delete(v78);
        return v84;
      }
    }
    else if (v79 == 1 && v12 == *(_DWORD *)__p)
    {
      goto LABEL_120;
    }
    LMLanguageModelConditionalProbability();
    *a4 = *a4 - v83;
    if ((uint64_t)v5 >= v90) {
      break;
    }
    ++v5;
  }
  while (v5 < v7);
  uint64_t v10 = __p;
LABEL_118:
  uint64_t v4 = 1;
  uint64_t v78 = v10;
  if (v10) {
    goto LABEL_121;
  }
  return v4;
}

void sub_2161814F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_216181518(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 552))(a2);
  uint64_t v7 = 40;
  if (v6 == 1) {
    uint64_t v7 = 32;
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + v7);
  uint64_t v9 = (const __CFAllocator **)MEMORY[0x263EFFB08];
  if (v8 && CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + v7)))
  {
    v27[0] = 0.0;
    uint64_t v10 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 120))(a2, a3);
    CFIndex v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    CFIndex v13 = v12;
    CFAllocatorRef v14 = *v9;
    CFStringRef v15 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    v29.location = v11;
    v29.length = v13;
    CFStringRef v16 = CFStringCreateWithSubstring(v14, v15, v29);
    if (CFDictionaryContainsKey(v8, v16))
    {
      sub_2162F49B0(a2, (char **)&v25);
      if (sub_216180F34(a1, (uint64_t)&v25, a3, v27))
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x263EFFF70]);
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v8, v16);
        if (Value)
        {
          for (CFIndex i = 0; i < CFArrayGetCount(Value); ++i)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Value, i);
            if (CFStringCompare(v16, ValueAtIndex, 0))
            {
              memset(__p, 0, sizeof(__p));
              sub_21617B5A4(__p, v25, (uint64_t)v26, (v26 - (unsigned char *)v25) >> 2);
              sub_21628CE20(*(void *)(*(void *)(a1 + 16) + 8), ValueAtIndex);
            }
          }
          sub_21628CD70(*(uint64_t **)(*(void *)(a1 + 16) + 8));
        }
        CFRelease(v16);
      }
      else
      {
        CFRelease(v16);
        CFMutableArrayRef Mutable = CFArrayCreate(v14, 0, 0, MEMORY[0x263EFFF70]);
      }
      if (v25)
      {
        int v26 = v25;
        operator delete(v25);
      }
      return Mutable;
    }
    CFRelease(v16);
    uint64_t v21 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    CFAllocatorRef v20 = v14;
  }
  else
  {
    CFAllocatorRef v20 = *v9;
    uint64_t v21 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  }

  return CFArrayCreate(v20, 0, 0, v21);
}

void sub_216181A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216181A98(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  while (v5 < (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2))
  {
    CFArrayRef v6 = sub_216181518(a1, a2, v5);
    if (CFArrayGetCount(v6) >= 1)
    {
      CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      CFIndex Length = CFStringGetLength(v7);
      CFStringRef v8 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      CFIndex v20 = CFStringGetLength(v8);
      CFStringRef theString = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      CFStringRef v9 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      CFIndex idx = 0;
      CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      while (idx < CFArrayGetCount(v6))
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, idx);
        uint64_t v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 120))(a2, v5);
        CFIndex v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
        CFIndex v14 = v13;
        if (Length >= v20) {
          goto LABEL_10;
        }
        CFIndex v15 = CFStringGetLength(theString);
        MutableCopy = CFStringCreateMutableCopy(alloc, v15, theString);
        CFIndex v17 = sub_216303C40(theString, v9, v12 + v14);
        if (v17 >= 1)
        {
          v26.location = v17 - v14;
          v26.length = v14;
          CFStringReplace(MutableCopy, v26, ValueAtIndex);
LABEL_10:
          CFIndex v18 = CFStringGetLength(v9);
          unint64_t v19 = CFStringCreateMutableCopy(alloc, v18, v9);
          v27.location = v12;
          v27.length = v14;
          CFStringReplace(v19, v27, ValueAtIndex);
          sub_2162F49B0(a2, (char **)&__p);
          sub_21628CE20(*(void *)(*(void *)(a1 + 16) + 8), ValueAtIndex);
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        ++idx;
      }
      sub_21628CD70(*(uint64_t **)(*(void *)(a1 + 16) + 8));
      if (v6) {
        CFRelease(v6);
      }
      return;
    }
    CFRelease(v6);
    ++v5;
  }
}

void sub_216181F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v22 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + ++**(_DWORD **)(result + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_216181F88(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797B510, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797B510))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797B558, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797B558))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797B518, &dword_2160F5000);
    __cxa_guard_release(&qword_26797B558);
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::mutex::lock(&stru_26797B518);
  CFStringRef v8 = sub_21618241C((void *)qword_26797B508, a1);
  CFStringRef v9 = v8;
  if (!v8
    || (uint64_t v10 = (std::__shared_weak_count *)*((void *)v8 + 6)) == 0
    || (v10->__shared_owners_ != -1 ? (BOOL v11 = a3 == 0) : (BOOL v11 = 0), !v11))
  {
    CFIndex v12 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, a1);
    CFIndex v14 = sub_2162D1CE4(0xDu);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      CFIndex v15 = v14;
      if (os_signpost_enabled(v14))
      {
        if ((a1[23] & 0x80u) == 0) {
          CFStringRef v16 = a1;
        }
        else {
          CFStringRef v16 = *(unsigned __int8 **)a1;
        }
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v16;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "SingletonResourceManagerLoad", "Load resource with key: [%s]", buf, 0xCu);
      }
    }
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    sub_2161823D4((uint64_t)&v21, v17);
  }
  CFIndex v18 = std::__shared_weak_count::lock(v10);
  if (v18) {
    uint64_t v19 = *((void *)v9 + 5);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v21 = v19;
  uint64_t v22 = v18;
  std::mutex::unlock(&stru_26797B518);
  CFIndex v20 = v22;
  *a4 = v21;
  a4[1] = v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v22) {
      sub_2161121B0(v22);
    }
  }
}

void sub_216182278(_Unwind_Exception *a1)
{
}

void sub_2161822D8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  operator new();
}

void sub_216182330(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

void sub_216182354()
{
}

void sub_2161823B0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void sub_2161823D4(uint64_t a1, uint64_t a2)
{
  sub_216182520(&v2, a2);
}

unsigned __int8 *sub_21618241C(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_216129260((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  BOOL v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_21612970C(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      BOOL v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_216182520(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_2161825A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161826EC((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161825C0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2161825F8(uint64_t a1)
{
}

uint64_t sub_216182600(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC0B8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216182644(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_21618269C((void **)(a2 + 8), 0);
    JUMPOUT(0x2166CA800);
  }
}

void *sub_21618269C(void **a1, void *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21628CD3C(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t *sub_2161826EC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    sub_21618269C((void **)(v2 + 8), 0);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

unsigned __int8 *sub_216182750(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_216129260(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    CFIndex v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (CFIndex i = *v14; i; CFIndex i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_21612970C(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_2161829EC(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_2161297B4(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  CFIndex i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_216182A8C((uint64_t)v26, 0);
  return i;
}

void sub_2161829D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216182A8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_2161829EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + ++**(_DWORD **)(result + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    __n128 result = sub_21610A674(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)__n128 result = v11;
  }
  void v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216182A74(_Unwind_Exception *a1)
{
  sub_216182A8C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216182A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216182AE4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_216182AE4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_216182B38(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_216182B94(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void sub_216182BB8(const void **a1, const void *a2)
{
  unint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_216182BF0(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unint64_t v6 = (void *)sub_2162D43F4(a1, a2, 0, a4);
  void *v6 = &unk_26C6C6550;
  uint64_t v7 = a3[1];
  v6[6] = *a3;
  v6[7] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216182C60(a1, (uint64_t)a3);
  return a1;
}

uint64_t sub_216182C60(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = v2 | 0x10;
  *(void *)(result + 32) = v2 | 0x10;
  unint64_t v4 = *(unsigned char **)a2;
  if (*(unsigned char *)(*(void *)a2 + 237))
  {
    uint64_t v3 = v2 | 0x11;
    *(void *)(result + 32) = v2 | 0x11;
  }
  if (v4[238])
  {
    v3 |= 2uLL;
    *(void *)(result + 32) = v3;
  }
  if (v4[236])
  {
    v3 |= 4uLL;
    *(void *)(result + 32) = v3;
  }
  if (v4[239]) {
    *(void *)(result + 32) = v3 | 8;
  }
  return result;
}

uint64_t sub_216182CB8(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, void *a5, int a6)
{
  unint64_t v8 = (void *)sub_2162D4550(a1, a2, *a3, a3[1], *(unsigned __int16 **)a4, *(void *)(a4 + 8), a6);
  *unint64_t v8 = &unk_26C6C6550;
  uint64_t v9 = a5[1];
  v8[6] = *a5;
  v8[7] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216182C60(a1, (uint64_t)a5);
  return a1;
}

uint64_t sub_216182D38(uint64_t result, uint64_t a2, int a3)
{
  *(void *)__n128 result = &unk_26C6C59C0;
  *(_DWORD *)(result + ++**(_DWORD **)(result + 8) = a3;
  *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)__n128 result = &unk_26C6C6550;
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(result + 4++**(_DWORD **)(result + 8) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_216182DA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_216182F50(a2, *(const void **)(v2 + 56), *(void *)(v2 + 64), (uint64_t)(*(void *)(v2 + 64) - *(void *)(v2 + 56)) >> 1);
}

void *sub_216182DC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = v2 + 80;
  uint64_t v4 = 80;
  if (*(void *)(v2 + 88) == *(void *)(v2 + 80))
  {
    uint64_t v4 = 56;
    uint64_t v3 = v2 + 56;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_216182F50(a2, *(const void **)(v2 + v4), *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)(v2 + v4)) >> 1);
}

void *sub_216182E10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = sub_2162F67EC(*(void *)(a1 + 48));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v4 = *v3;
  uint64_t v5 = (uint64_t)v3[1];
  uint64_t v6 = (v5 - (uint64_t)*v3) >> 1;

  return sub_216182F50(a2, v4, v5, v6);
}

void *sub_216182E60(void *a1)
{
  *a1 = &unk_26C6C6550;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_2161121B0(v2);
  }
  return a1;
}

void sub_216182EAC(void *a1)
{
  *a1 = &unk_26C6C6550;
  uint64_t v1 = (std::__shared_weak_count *)a1[7];
  if (v1) {
    sub_2161121B0(v1);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216182F18(uint64_t a1)
{
  CFStringRef v1 = (const __CFString *)sub_2162F6598(*(void *)(a1 + 48));
  return (unsigned __int16)CFStringGetLength(v1);
}

uint64_t sub_216182F3C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

const void *sub_216182F48(uint64_t a1)
{
  return sub_2162F6598(*(void *)(a1 + 48));
}

void *sub_216182F50(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_21610FD04(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216182FB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_216182FCC(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 85)
  {
    __int16 v6 = 2;
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 76)
  {
    __int16 v6 = 4;
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 65)
  {
    __int16 v6 = 8;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) != 71) {
      goto LABEL_10;
    }
    __int16 v6 = 256;
  }
  *a2 |= v6;
LABEL_10:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 200))(a1)) {
    *a2 |= 0x10u;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 272))(a1)) {
    *a2 |= 0x20u;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    *a2 |= 0x40u;
  }
  if (a3 <= 5 && ((1 << a3) & 0x26) != 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 208))(a1)) {
      *a2 |= 1u;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 192))(a1)) {
      *a2 |= 0x80u;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 288))(a1)) {
      *a2 |= 0x200u;
    }
  }
  return a2;
}

_WORD *sub_216183268(_WORD *result)
{
  __int16 v5 = 0;
  uint64_t v1 = *((void *)result + 6);
  if (*((void *)result + 7) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v1 + 8 * v3);
      __n128 result = sub_216182FCC(v4, &v5, 0);
      *(_WORD *)(v4 + 16) = v5;
      ++v3;
      uint64_t v1 = *((void *)v2 + 6);
    }
    while (v3 < (*((void *)v2 + 7) - v1) >> 3);
  }
  return result;
}

long long *sub_2161832DC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CFA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CFA0))
  {
    xmmword_26797EE60 = 0u;
    *(_OWORD *)&qword_26797EE70 = 0u;
    dword_26797EE80 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_2161833A8, &xmmword_26797EE60, &dword_2160F5000);
    __cxa_guard_release(&qword_26797CFA0);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_26797CFA8, memory_order_acquire) != -1)
  {
    unint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&qword_26797CFA8, &v2, (void (__cdecl *)(void *))sub_2161853E0);
  }
  return &xmmword_26797EE60;
}

uint64_t sub_2161833A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216185398((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_216183408(int a1, uint64_t a2, int a3, int a4, _WORD *a5, uint64_t a6, uint64_t a7, void *a8)
{
  *a8 = 0;
  unint64_t v8 = (unint64_t)a3 >> 1;
  if (!a1) {
    goto LABEL_20;
  }
  if ((int)v8 < 1) {
    goto LABEL_20;
  }
  int v9 = *(unsigned __int16 *)(a2 + 2 * (v8 - 1));
  if (!*(_WORD *)(a2 + 2 * (v8 - 1))) {
    goto LABEL_20;
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    if ((unsigned __int16)word_2163CA57E[i] == v9) {
      goto LABEL_20;
    }
  }
  if ((int)v8 <= 1)
  {
    int v11 = 0;
    BOOL v12 = v9 == a4;
  }
  else
  {
    int v11 = *(unsigned __int16 *)(a2 + 2 * (v8 - 2));
    BOOL v12 = v9 == a4;
    if (v9 == a4 && *(_WORD *)(a2 + 2 * (v8 - 2)) && v11 != v9) {
      return 4294967294;
    }
  }
  switch(*(_WORD *)(a2 + 2 * (v8 - 1)))
  {
    case 'c':
      uint64_t v14 = 4294967294;
      switch(a4)
      {
        case 'a':
        case 'e':
        case 'i':
          return v14;
        case 'b':
        case 'c':
        case 'd':
        case 'f':
        case 'g':
          goto LABEL_19;
        case 'h':
          goto LABEL_69;
        default:
          if (a4 == 111 || a4 == 117) {
            return v14;
          }
          goto LABEL_19;
      }
    case 'd':
      goto LABEL_40;
    case 'f':
    case 'g':
    case 'q':
      goto LABEL_17;
    case 'h':
      if (v11 <= 114)
      {
        if (!v11)
        {
LABEL_17:
          if (a4 == 119) {
            BOOL v12 = 1;
          }
          goto LABEL_19;
        }
        if (v11 != 100)
        {
          if (v11 != 104) {
            goto LABEL_19;
          }
          goto LABEL_17;
        }
        goto LABEL_57;
      }
      if ((v11 - 115) < 2)
      {
LABEL_57:
        BOOL v19 = a4 == 121;
LABEL_74:
        char v21 = v19;
        if (v19) {
          BOOL v12 = 1;
        }
        if (!v12)
        {
LABEL_83:
          uint64_t v22 = 0;
          while ((unsigned __int16)aAiueoy[v22] != a4)
          {
            ++v22;
            uint64_t v14 = 4294967294;
            if (v22 == 6) {
              return v14;
            }
          }
LABEL_20:
          if (a4 != 39 && (unsigned __int16)(a4 - 97) >= 0x1Au)
          {
            if (!v8)
            {
              *a5 = a4;
              *a8 = 0;
              return 2;
            }
            return 4294967294;
          }
LABEL_69:
          operator new[]();
        }
        if ((v21 & 1) == 0) {
          goto LABEL_20;
        }
        return 4294967294;
      }
      if (v11 != 119) {
        goto LABEL_19;
      }
LABEL_95:
      uint64_t v14 = 4294967294;
      if (a4 != 117 && a4 != 121) {
        goto LABEL_19;
      }
      return v14;
    case 'k':
      if (v11 <= 107)
      {
        if (v11 && v11 != 107) {
          goto LABEL_19;
        }
        goto LABEL_17;
      }
      if (v11 == 108 || v11 == 120)
      {
        unsigned __int16 v17 = ((unsigned __int16)(a4 - 105) >> 1) | (((_WORD)a4 - 105) << 15);
        if (v17 < 9u)
        {
          unsigned int v18 = 329;
LABEL_62:
          if ((v18 >> v17)) {
            return 4294967294;
          }
        }
      }
      goto LABEL_19;
    case 'l':
      if ((a4 - 107) > 0xC) {
        goto LABEL_19;
      }
      int v15 = 1 << (a4 - 107);
      int v16 = 4609;
      goto LABEL_68;
    case 's':
      if (!v11) {
        goto LABEL_40;
      }
      if (v11 == 116) {
        goto LABEL_57;
      }
      if (v11 != 115) {
        goto LABEL_19;
      }
LABEL_40:
      if (a4 != 104 && a4 != 119) {
        goto LABEL_19;
      }
      goto LABEL_69;
    case 't':
      if (v11 > 115)
      {
        if (v11 == 120)
        {
LABEL_87:
          unsigned int v23 = (unsigned __int16)(((unsigned __int16)(a4 - 97) >> 1) | (((_WORD)a4 - 97) << 15));
          if (v23 > 0xC) {
            goto LABEL_19;
          }
          if (((1 << ((unsigned __int16)(a4 - 97) >> 1)) & 0x1095) != 0) {
            return 4294967294;
          }
          if (v23 == 9) {
            goto LABEL_20;
          }
LABEL_19:
          if (v12) {
            goto LABEL_20;
          }
          goto LABEL_83;
        }
        if (v11 != 116) {
          goto LABEL_19;
        }
      }
      else if (v11)
      {
        if (v11 != 108) {
          goto LABEL_19;
        }
        goto LABEL_87;
      }
      if ((a4 - 104) <= 0xF)
      {
        int v15 = 1 << (a4 - 104);
        int v16 = 34817;
LABEL_68:
        if ((v15 & v16) != 0) {
          goto LABEL_69;
        }
      }
      goto LABEL_19;
    case 'w':
      switch(v11)
      {
        case 'd':
        case 'f':
        case 'g':
        case 'k':
        case 's':
        case 't':
          goto LABEL_57;
        case 'e':
        case 'i':
        case 'j':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 'u':
        case 'v':
          goto LABEL_19;
        case 'h':
          goto LABEL_95;
        case 'l':
        case 'x':
          unsigned __int16 v17 = ((unsigned __int16)(a4 - 101) >> 1) | (((_WORD)a4 - 101) << 15);
          if (v17 >= 0xBu) {
            goto LABEL_19;
          }
          unsigned int v18 = 1317;
          goto LABEL_62;
        case 'w':
          goto LABEL_102;
        default:
          if (v11) {
            goto LABEL_19;
          }
LABEL_102:
          if (a4 == 104) {
            goto LABEL_69;
          }
          if (a4 != 117) {
            goto LABEL_19;
          }
          return 4294967294;
      }
    case 'x':
      if ((a4 - 107) > 0xC) {
        goto LABEL_19;
      }
      int v15 = 1 << (a4 - 107);
      int v16 = 4617;
      goto LABEL_68;
    case 'y':
      switch(v11)
      {
        case 'v':
          uint64_t v14 = 4294967294;
          if (a4 != 101 && a4 != 105) {
            goto LABEL_19;
          }
          return v14;
        case 'w':
          if ((a4 - 97) > 0x14 || ((1 << (a4 - 97)) & 0x104001) == 0) {
            goto LABEL_19;
          }
          return 4294967294;
        case 'x':
        case 'y':
          goto LABEL_73;
        default:
          if (v11 != 108 && v11) {
            goto LABEL_19;
          }
LABEL_73:
          BOOL v19 = a4 == 105;
          break;
      }
      goto LABEL_74;
    default:
      goto LABEL_19;
  }
}

void sub_216183A44(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_216183B50()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CFB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CFB0))
  {
    sub_216184F68(byte_26797CFB8, (char *)L"bcdfghjklmpqrstvwxyz");
    __cxa_atexit((void (*)(void *))sub_216184364, byte_26797CFB8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797CFB0);
  }
}

void sub_216183BE4(_Unwind_Exception *a1)
{
}

uint64_t sub_216183BFC(char *a1, int a2, unint64_t a3)
{
  if (a1[23] < 0)
  {
    uint64_t v4 = a1;
    a1 = *(char **)a1;
    unint64_t v3 = *((void *)v4 + 1);
  }
  else
  {
    unint64_t v3 = a1[23];
  }
  if (v3 <= a3) {
    return -1;
  }
  __int16 v5 = &a1[2 * a3];
  unint64_t v6 = a3 - v3;
  while (*(unsigned __int16 *)v5 != a2)
  {
    v5 += 2;
    if (__CFADD__(v6++, 1))
    {
      __int16 v5 = 0;
      break;
    }
  }
  if (v5) {
    return (v5 - a1) >> 1;
  }
  else {
    return -1;
  }
}

unsigned __int8 *sub_216183C5C(char *a1, unint64_t a2)
{
  sub_2161832DC();
  sub_2161425AC(__p, a1, &a1[a2], a2);
  uint64_t v4 = sub_21612AAC8(&xmmword_26797EE60, (unsigned __int8 *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v4) {
    return v4 + 40;
  }
  else {
    return 0;
  }
}

void sub_216183CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216183CEC(const __CFString *a1)
{
  uint64_t v1 = 0;
  sub_2161E1FB8(a1);
}

void sub_216183DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v17) {
    MEMORY[0x2166CA7C0](v17, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void sub_216183E18(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t v50 = *a1;
  sub_216184398(a5, a1[1]);
  unint64_t v47 = a2;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v49 = (void *)(a3 + 16);
    while (1)
    {
      long long __p = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      int v15 = (unsigned __int16 *)(v50 + 2 * v14);
      uint64_t v51 = 0;
      if (sub_21618455C(v15, v10 - v14, (uint64_t)&__p, &v51))
      {
        uint64_t v16 = HIBYTE(v54);
        char v17 = HIBYTE(v54);
        uint64_t v18 = v53;
        if (v54 >= 0) {
          p_p = (__int16 *)&__p;
        }
        else {
          p_p = (__int16 *)__p;
        }
        if (v54 >= 0) {
          uint64_t v20 = HIBYTE(v54);
        }
        else {
          uint64_t v20 = v53;
        }
        if (v20)
        {
          uint64_t v21 = 2 * v20;
          do
          {
            sub_2161845F8((uint64_t)a5, *p_p++);
            v21 -= 2;
          }
          while (v21);
          uint64_t v16 = HIBYTE(v54);
          uint64_t v18 = v53;
          char v17 = HIBYTE(v54);
        }
        uint64_t v22 = v51;
        unint64_t v23 = v51 + v14;
LABEL_15:
        v11 += v22;
        if (v17 < 0) {
          uint64_t v16 = v18;
        }
        v12 += v16;
        goto LABEL_51;
      }
      unint64_t v24 = a1[1];
      if (v14 >= v24)
      {
        unint64_t v23 = v14;
        goto LABEL_51;
      }
      unint64_t v23 = v14 + 1;
      if (v14 + 1 >= v24) {
        break;
      }
      if (*(_DWORD *)v15 == 7209070)
      {
        sub_2161845F8((uint64_t)a5, 12435);
        unint64_t v23 = v14 + 2;
        v11 += 2;
LABEL_50:
        ++v12;
        goto LABEL_51;
      }
      if (*v15 == 110)
      {
        uint64_t v25 = 0;
        while (*(unsigned __int16 *)&aA_12[v25] != *(unsigned __int16 *)(v50 + 2 * v23))
        {
          v25 += 2;
          if (v25 == 16)
          {
            sub_2161845F8((uint64_t)a5, 12435);
            ++v11;
            goto LABEL_50;
          }
        }
      }
      sub_216183B50();
      uint64_t v27 = sub_216183BFC(byte_26797CFB8, *v15, 0);
      int v26 = *v15;
      if (v27 == -1 || v26 != *(unsigned __int16 *)(v50 + 2 * v23)) {
        goto LABEL_28;
      }
      if (a4 && (sub_21618455C(v15 + 1, a1[1] + ~v14, (uint64_t)&__p, &v51) & 1) == 0)
      {
        LOWORD(v26) = *v15;
        goto LABEL_29;
      }
      sub_2161845F8((uint64_t)a5, 12387);
      ++v11;
      ++v12;
      if (a4)
      {
        uint64_t v16 = HIBYTE(v54);
        char v17 = HIBYTE(v54);
        uint64_t v18 = v53;
        if (v54 >= 0) {
          unint64_t v28 = (__int16 *)&__p;
        }
        else {
          unint64_t v28 = (__int16 *)__p;
        }
        if (v54 >= 0) {
          uint64_t v29 = HIBYTE(v54);
        }
        else {
          uint64_t v29 = v53;
        }
        if (v29)
        {
          uint64_t v30 = 2 * v29;
          do
          {
            sub_2161845F8((uint64_t)a5, *v28++);
            v30 -= 2;
          }
          while (v30);
          uint64_t v16 = HIBYTE(v54);
          uint64_t v18 = v53;
          char v17 = HIBYTE(v54);
        }
        uint64_t v22 = v51;
        v23 += v51;
        goto LABEL_15;
      }
LABEL_51:
      unint64_t v13 = 0;
LABEL_52:
      unint64_t v14 = v23;
      if (a3)
      {
        unint64_t v31 = *(void *)(a3 + 8);
        if (v31)
        {
          uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
          v32.i16[0] = vaddlv_u8(v32);
          if (v32.u32[0] > 1uLL)
          {
            unint64_t v5 = v12;
            if (v31 <= v12) {
              unint64_t v5 = v12 % v31;
            }
          }
          else
          {
            unint64_t v5 = (v31 - 1) & v12;
          }
          unsigned int v33 = *(void **)(*(void *)a3 + 8 * v5);
          if (v33)
          {
            for (uint64_t i = (void *)*v33; i; uint64_t i = (void *)*i)
            {
              unint64_t v35 = i[1];
              if (v35 == v12)
              {
                if (i[2] == v12) {
                  goto LABEL_91;
                }
              }
              else
              {
                if (v32.u32[0] > 1uLL)
                {
                  if (v35 >= v31) {
                    v35 %= v31;
                  }
                }
                else
                {
                  v35 &= v31 - 1;
                }
                if (v35 != v5) {
                  break;
                }
              }
            }
          }
        }
        unint64_t v36 = operator new(0x20uLL);
        void *v36 = 0;
        v36[1] = v12;
        v36[2] = v12;
        v36[3] = v11;
        float v37 = (float)(unint64_t)(*(void *)(a3 + 24) + 1);
        float v38 = *(float *)(a3 + 32);
        if (!v31 || (float)(v38 * (float)v31) < v37)
        {
          BOOL v39 = (v31 & (v31 - 1)) != 0;
          if (v31 < 3) {
            BOOL v39 = 1;
          }
          unint64_t v40 = v39 | (2 * v31);
          unint64_t v41 = vcvtps_u32_f32(v37 / v38);
          if (v40 <= v41) {
            size_t v42 = v41;
          }
          else {
            size_t v42 = v40;
          }
          sub_2161297B4(a3, v42);
          unint64_t v31 = *(void *)(a3 + 8);
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v31 <= v12) {
              unint64_t v5 = v12 % v31;
            }
            else {
              unint64_t v5 = v12;
            }
          }
          else
          {
            unint64_t v5 = (v31 - 1) & v12;
          }
        }
        uint64_t v43 = *(void *)a3;
        unint64_t v44 = *(void **)(*(void *)a3 + 8 * v5);
        if (v44)
        {
          void *v36 = *v44;
          goto LABEL_89;
        }
        void *v36 = *v49;
        *uint64_t v49 = v36;
        *(void *)(v43 + 8 * v5) = v49;
        if (*v36)
        {
          unint64_t v45 = *(void *)(*v36 + 8);
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v45 >= v31) {
              v45 %= v31;
            }
          }
          else
          {
            v45 &= v31 - 1;
          }
          unint64_t v44 = (void *)(*(void *)a3 + 8 * v45);
LABEL_89:
          void *v44 = v36;
        }
        ++*(void *)(a3 + 24);
      }
LABEL_91:
      if (SHIBYTE(v54) < 0) {
        operator delete(__p);
      }
      unint64_t v10 = a1[1];
      if (v14 >= v10) {
        goto LABEL_97;
      }
    }
    LOWORD(v26) = *v15;
LABEL_28:
    if (a4)
    {
LABEL_29:
      if ((unsigned __int16)((v26 & 0xFFDF) - 65) < 0x1Au) {
        LOWORD(v26) = v26 - 288;
      }
    }
    sub_2161845F8((uint64_t)a5, v26);
    ++v11;
    ++v12;
    if ((unsigned __int16)((*v15 & 0xFFDF) - 65) < 0x1Au)
    {
      ++v13;
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  unint64_t v13 = 0;
LABEL_97:
  if (v47)
  {
    if (*a1) {
      unint64_t v46 = v13;
    }
    else {
      unint64_t v46 = 0;
    }
    *unint64_t v47 = sub_2161846A4(*a1 + 2 * (v10 - v13), v46);
  }
}

void sub_216184310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 + 23) < 0) {
    operator delete(*(void **)v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216184364(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216184398(void *__dst, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21617FB50();
  }
  LODWORD(v3) = *((char *)__dst + 23);
  if ((v3 & 0x80000000) == 0)
  {
    if (a2 <= 0xA) {
      return;
    }
    unint64_t v4 = *((unsigned __int8 *)__dst + 23);
    if (v4 <= a2) {
      unint64_t v5 = a2;
    }
    else {
      unint64_t v5 = *((unsigned __int8 *)__dst + 23);
    }
    if ((v5 | 3) != 0xB)
    {
      uint64_t v11 = (v5 | 3) + 1;
      goto LABEL_24;
    }
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFFCLL) + 4;
LABEL_20:
    uint64_t v11 = v6 + 1;
    if (v6 < 0xB)
    {
      unint64_t v12 = (void *)*__dst;
      int v13 = 1;
      unint64_t v14 = __dst;
      if ((v3 & 0x80) != 0) {
        goto LABEL_28;
      }
      goto LABEL_26;
    }
LABEL_24:
    unint64_t v14 = sub_21610FD44((uint64_t)__dst, v11);
    uint64_t v11 = v15;
    LODWORD(v3) = *((char *)__dst + 23);
    if ((v3 & 0x80000000) != 0)
    {
      LOBYTE(v13) = 0;
      unint64_t v12 = (void *)*__dst;
LABEL_28:
      uint64_t v16 = __dst[1];
      int v17 = 1;
LABEL_29:
      BOOL v18 = __CFADD__(v16, 1);
      uint64_t v19 = v16 + 1;
      if (v18)
      {
        if (v17) {
          goto LABEL_35;
        }
      }
      else
      {
        memmove(v14, v12, 2 * v19);
        if (v17)
        {
LABEL_35:
          operator delete(v12);
          if ((v13 & 1) == 0) {
            goto LABEL_36;
          }
          goto LABEL_33;
        }
      }
      if ((v13 & 1) == 0)
      {
LABEL_36:
        __dst[1] = v4;
        __dst[2] = v11 | 0x8000000000000000;
        char *__dst = v14;
        return;
      }
LABEL_33:
      *((unsigned char *)__dst + 23) = v4 & 0x7F;
      return;
    }
    int v13 = 0;
    unint64_t v12 = __dst;
LABEL_26:
    uint64_t v16 = v3;
    int v17 = v13;
    goto LABEL_29;
  }
  unint64_t v7 = __dst[2];
  unint64_t v8 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v8 < a2)
  {
    unint64_t v4 = __dst[1];
    if (v4 <= a2) {
      unint64_t v9 = a2;
    }
    else {
      unint64_t v9 = __dst[1];
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v9 | 3) != 0xB) {
      uint64_t v10 = v9 | 3;
    }
    unint64_t v6 = v9 >= 0xB ? v10 : 10;
    if (v6 != v8)
    {
      unint64_t v3 = HIBYTE(v7);
      goto LABEL_20;
    }
  }
}

void sub_216184530(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t sub_21618455C(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_2162C53C0(a1, a2, (UChar *)&word_26797CF90, 1);
  if (v6) {
    BOOL v7 = word_26797CF90 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = !v7;
  if (!v7)
  {
    uint64_t v9 = v6;
    sub_216184F68(&__dst, (char *)&word_26797CF90);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = __dst;
    *(void *)(a3 + 16) = v12;
    if (a4) {
      *a4 = v9;
    }
  }
  return v8;
}

void sub_2161845F8(uint64_t a1, __int16 a2)
{
  unint64_t v3 = (void *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23) != 10)
    {
      uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
      *(unsigned char *)(a1 + 23) = (*(unsigned char *)(a1 + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    uint64_t v4 = 10;
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v5 == v4)
  {
LABEL_5:
    sub_21618504C(a1, v4, 1uLL, v4, v4, 0, 0);
    uint64_t v5 = v4;
  }
  v3[1] = v5 + 1;
  unint64_t v3 = (void *)*v3;
LABEL_8:
  uint64_t v6 = (_WORD *)v3 + v5;
  _WORD *v6 = a2;
  v6[1] = 0;
}

unint64_t sub_2161846A4(uint64_t a1, unint64_t a2)
{
  sub_2161832DC();
  uint64_t v4 = (char *)(a1 + 2 * a2 - 6);
  unint64_t v5 = 3;
  uint64_t v6 = 6;
  do
  {
    if (a2 >= v5)
    {
      size_t v7 = a1 ? v6 : 0;
      sub_21612F5FC(__p, v4, v7);
      uint64_t v8 = sub_21612AAC8(&xmmword_26797EE60, (unsigned __int8 *)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v8) {
        break;
      }
    }
    v6 -= 2;
    v4 += 2;
    --v5;
  }
  while (v5);
  return v5;
}

void sub_216184758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216184774(const __CFString *a1)
{
}

void sub_216184838(_Unwind_Exception *a1)
{
  void *v1 = 0;
  MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_216184860(UniChar *chars, CFIndex numChars)
{
  CFStringRef v2 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], chars, numChars);
  sub_216184774(v2);
}

void sub_2161848BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2161848E8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_216185170(a3, *(void *)(a1 + 8), 0);
  unint64_t result = sub_2161849E4((uint64_t *)a1, a2);
  unint64_t v7 = result;
  unint64_t v8 = result;
  unint64_t v9 = *(void *)(a1 + 8) - result;
  if (v9)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v10 = (char *)a3;
    }
    else {
      uint64_t v10 = *(char **)a3;
    }
    unint64_t result = (unint64_t)memmove(v10, *(const void **)a1, 2 * v9);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 >= v7)
  {
    uint64_t v11 = -(uint64_t)v7;
    uint64_t v12 = 2 * v8;
    uint64_t v13 = *(void *)a1 + 2 * v8;
    do
    {
      __int16 v14 = *(_WORD *)(v13 + 2 * v11);
      if ((unsigned __int16)(v14 + 191) < 0x1Au) {
        v14 += 288;
      }
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v15 = (char *)a3;
      }
      else {
        uint64_t v15 = *(char **)a3;
      }
      *(_WORD *)&v15[2 * v11 + v12] = v14;
    }
    while (!__CFADD__(v11++, 1));
  }
  return result;
}

void sub_2161849C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2161849E4(uint64_t *a1, unsigned int a2)
{
  if ((a2 & 0x20) != 0)
  {
    unint64_t v7 = 0;
    sub_216183E18(a1, &v7, 0, (a2 >> 30) & 1, &__p);
    if (v6 < 0) {
      operator delete(__p);
    }
    return v7;
  }
  else
  {
    unint64_t v2 = a1[1];
    uint64_t v3 = *a1;
    return sub_2161846A4(v3, v2);
  }
}

void sub_216184A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      unint64_t v6 = v4 - a2;
      if (v4 - a2 >= 0)
      {
        unint64_t v8 = sub_216183C5C((char *)(*(void *)a1 + 2 * v6), (2 * a2));
        if (v8)
        {
          unint64_t v9 = v8;
          long long __p = 0;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          if (v4 != a2) {
            sub_216184B80((char *)&__p, *(char **)a1, v6);
          }
          uint64_t v10 = *(void *)v9;
          uint64_t v11 = *((void *)v9 + 1);
          if (*(void *)v9 != v11)
          {
            do
            {
              sub_216184BFC((uint64_t)&__p, v6);
              if (*(char *)(v10 + 23) < 0)
              {
                uint64_t v13 = *(char **)v10;
                unint64_t v12 = *(void *)(v10 + 8);
              }
              else
              {
                unint64_t v12 = *(unsigned __int8 *)(v10 + 23);
                uint64_t v13 = (char *)v10;
              }
              sub_216184B80((char *)&__p, v13, v12 >> 1);
              char v14 = 0;
              (*(void (**)(uint64_t, void **, char *))(a3 + 16))(a3, &__p, &v14);
              if (v14) {
                break;
              }
              v10 += 24;
            }
            while (v10 != v11);
          }
          if (__p)
          {
            uint64_t v16 = __p;
            operator delete(__p);
          }
        }
      }
    }
  }
}

void sub_216184B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216184B80(char *result, char *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    uint64_t v5 = (uint64_t)result;
    sub_216185B34((void **)result, a3 + ((uint64_t)(*((void *)result + 1) - *(void *)result) >> 1));
    uint64_t v6 = *(void *)(v5 + 8);
    return sub_216185BD8(v5, v6, a2, &a2[2 * a3], a3);
  }
  return result;
}

void sub_216184BFC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + ++**(_DWORD **)(result + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_216185284((char **)a1, a2 - v2);
  }
}

BOOL sub_216184C2C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  if (a5) {
    *a5 = 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  char v17 = 0;
  if (a2
    && (a4 & 0x22) == 0x22
    && (v13[0] = MEMORY[0x263EF8330],
        v13[1] = 0x40000000,
        v13[2] = sub_216184DA8,
        v13[3] = &unk_264266B58,
        void v13[4] = &v14,
        v13[5] = a3,
        sub_216184A54(a1, a2, (uint64_t)v13),
        *((unsigned char *)v15 + 24)))
  {
    BOOL v9 = 1;
  }
  else
  {
    int v10 = sub_2161E4BF4(*(char **)a1, *(void *)(a1 + 8), *(char **)a3, *(void *)(a3 + 8), (a4 >> 6) & 8 | a4 & 0x20 | (a4 >> 4) & 0x10 | ((char)a4 >> 7) & 6, (a4 >> 1) & 1);
    uint64_t v11 = v15;
    *((unsigned char *)v15 + 24) = v10;
    if (v10)
    {
      BOOL v9 = 1;
      if (a5 && *(void *)(a1 + 8) == *(void *)(a3 + 8))
      {
        *a5 = 1;
        BOOL v9 = *((unsigned __int8 *)v11 + 24) != 0;
      }
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  _Block_object_dispose(&v14, 8);
  return v9;
}

void sub_216184D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *sub_216184DA8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = *(const void **)a2;
  int64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
  if (*(void *)(v5 + 8) >= (unint64_t)(v7 >> 1))
  {
    unint64_t result = (const void *)memcmp(result, *(const void **)v5, v7);
    if (!result)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
  return result;
}

BOOL sub_216184E04(uint64_t a1, uint64_t a2)
{
  int64_t v4 = sub_2161846A4(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v8 = 0;
  BOOL v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  if (v4 < 1)
  {
    BOOL v5 = sub_216268BC4(a2, a1);
  }
  else
  {
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    void v7[2] = sub_216184F00;
    v7[3] = &unk_264269188;
    v7[4] = &v8;
    void v7[5] = a2;
    sub_216184A54(a1, v4, (uint64_t)v7);
    BOOL v5 = *((unsigned char *)v9 + 24) != 0;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_216184EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_216184F00(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (uint64_t)(a2[1] - *a2) >> 1;
  if (!*a2) {
    uint64_t v6 = 0;
  }
  v8[0] = *a2;
  v8[1] = v6;
  BOOL result = sub_216268BC4(v5, (uint64_t)v8);
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

unsigned char *sub_216184F68(unsigned char *__dst, char *__src)
{
  if (!*(_WORD *)__src)
  {
    unint64_t v7 = 0;
    __dst[23] = 0;
    goto LABEL_9;
  }
  size_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    int v6 = *(unsigned __int16 *)&__src[v4 + 2];
    --v5;
    v4 += 2;
  }
  while (v6);
  unint64_t v7 = -v5;
  if ((unint64_t)-v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21617FB50();
  }
  if (v7 >= 0xB)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v7 | 3) != 0xB) {
      uint64_t v9 = v7 | 3;
    }
    uint64_t v8 = sub_21610FD44((uint64_t)__dst, v9 + 1);
    *((void *)__dst + 1) = v7;
    *((void *)__dst + 2) = v10 | 0x8000000000000000;
    *(void *)long long __dst = v8;
    goto LABEL_13;
  }
  __dst[23] = v7;
  uint64_t v8 = __dst;
  if (v5)
  {
LABEL_13:
    memmove(v8, __src, v4);
    goto LABEL_14;
  }
  unint64_t v7 = 0;
LABEL_9:
  uint64_t v8 = __dst;
LABEL_14:
  *((_WORD *)v8 + v7) = 0;
  return __dst;
}

void sub_21618504C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (0x7FFFFFFFFFFFFFF7 - a2 < a3) {
    sub_21617FB50();
  }
  uint64_t v13 = (char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v13 = *(char **)a1;
  }
  unint64_t v14 = a3 + a2;
  if (a3 + a2 <= 2 * a2) {
    unint64_t v14 = 2 * a2;
  }
  uint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v14 | 3) != 0xB) {
    uint64_t v15 = v14 | 3;
  }
  if (v14 >= 0xB) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = 11;
  }
  if (a2 <= 0x3FFFFFFFFFFFFFF2) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0x7FFFFFFFFFFFFFF7;
  }
  BOOL v18 = (char *)sub_21610FD44(a1, v17);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  if (a5) {
    memmove(v18, v13, 2 * a5);
  }
  if (a4 != a6 + a5) {
    memmove(&v19[2 * a5 + 2 * a7], &v13[2 * a5 + 2 * a6], 2 * (a4 - (a6 + a5)));
  }
  if (a2 != 10) {
    operator delete(v13);
  }
  *(void *)a1 = v19;
  *(void *)(a1 + 16) = v21 | 0x8000000000000000;
}

uint64_t sub_216185170(uint64_t result, unint64_t a2, __int16 a3)
{
  if (*(char *)(result + 23) < 0)
  {
    unint64_t v3 = *(void *)(result + 8);
    if (v3 >= a2)
    {
      *(void *)(result + ++**(_DWORD **)(result + 8) = a2;
      BOOL result = *(void *)result;
      goto LABEL_7;
    }
    return sub_2161851B4(result, a2 - v3, a3);
  }
  unint64_t v3 = *(unsigned __int8 *)(result + 23);
  if (v3 < a2) {
    return sub_2161851B4(result, a2 - v3, a3);
  }
  *(unsigned char *)(result + 23) = a2 & 0x7F;
LABEL_7:
  *(_WORD *)(result + 2 * a2) = 0;
  return result;
}

uint64_t sub_2161851B4(uint64_t a1, unint64_t a2, __int16 a3)
{
  if (a2)
  {
    LODWORD(v6) = *(char *)(a1 + 23);
    if ((v6 & 0x80000000) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      unint64_t v9 = *(void *)(a1 + 16);
      unint64_t v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      unint64_t v6 = HIBYTE(v9);
    }
    else
    {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
      unint64_t v8 = 10;
    }
    if (v8 - v7 < a2)
    {
      sub_21618504C(a1, v8, a2 - v8 + v7, v7, v7, 0, 0);
      *(void *)(a1 + ++**(_DWORD **)(result + 8) = v7;
      LOBYTE(v6) = *(unsigned char *)(a1 + 23);
    }
    uint64_t v10 = a1;
    if ((v6 & 0x80) != 0) {
      uint64_t v10 = *(void *)a1;
    }
    char v11 = (_WORD *)(v10 + 2 * v7);
    unint64_t v12 = a2;
    do
    {
      *v11++ = a3;
      --v12;
    }
    while (v12);
    unint64_t v13 = v7 + a2;
    if (*(char *)(a1 + 23) < 0) {
      *(void *)(a1 + ++**(_DWORD **)(result + 8) = v13;
    }
    else {
      *(unsigned char *)(a1 + 23) = v13 & 0x7F;
    }
    *(_WORD *)(v10 + 2 * v13) = 0;
  }
  return a1;
}

void sub_216185284(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      sub_21610CB04();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)sub_21610FD44(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[2 * v11];
    uint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_216185398(uint64_t a1)
{
  unint64_t v2 = (void **)(a1 + 24);
  sub_21613EFD0(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_2161853E0()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v43 = 0;
  uint64_t v47 = 0;
  unint64_t v44 = 0;
  unint64_t v45 = 0;
  do
  {
    unint64_t v2 = (&off_264267978)[v1];
    if (v2)
    {
      if (v0)
      {
        size_t v3 = 2 * u_strlen((const UChar *)(&off_264267978)[v1]);
        uint64_t v4 = v44;
        if ((unint64_t)v44 >= v45)
        {
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21610CB04();
          }
          if (0x5555555555555556 * ((uint64_t)(v45 - (void)v43) >> 3) > v13) {
            unint64_t v13 = 0x5555555555555556 * ((uint64_t)(v45 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v14 = v13;
          }
          uint64_t v51 = &v45;
          if (v14) {
            uint64_t v15 = (char *)sub_216129BFC((uint64_t)&v45, v14);
          }
          else {
            uint64_t v15 = 0;
          }
          *(void *)&long long __dst = v15;
          *((void *)&__dst + 1) = &v15[24 * v12];
          uint64_t v49 = *((void *)&__dst + 1);
          uint64_t v50 = &v15[24 * v14];
          sub_21612F5FC(*((void **)&__dst + 1), v2, v3);
          v49 += 24;
          sub_21613FBD0((uint64_t *)&v43, &__dst);
          uint64_t v5 = (long long *)v44;
          sub_21613FD68((uint64_t)&__dst);
        }
        else
        {
          sub_21612F5FC(v44, v2, v3);
          uint64_t v5 = (long long *)(v4 + 24);
        }
        unint64_t v44 = (char *)v5;
      }
      else
      {
        int32_t v11 = u_strlen((const UChar *)(&off_264267978)[v1]);
        sub_21612F5FC(&__dst, v2, 2 * v11);
        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)long long __p = __dst;
        uint64_t v47 = v49;
      }
      ++v0;
      goto LABEL_101;
    }
    unint64_t v6 = sub_216129260((uint64_t)&qword_26797EE78, (uint64_t)__p);
    unint64_t v7 = v6;
    unint64_t v8 = *((void *)&xmmword_26797EE60 + 1);
    if (*((void *)&xmmword_26797EE60 + 1))
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797EE60 + 8));
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v2 = (char *)v6;
        if (v6 >= *((void *)&xmmword_26797EE60 + 1)) {
          unint64_t v2 = (char *)(v6 % *((void *)&xmmword_26797EE60 + 1));
        }
      }
      else
      {
        unint64_t v2 = (char *)((*((void *)&xmmword_26797EE60 + 1) - 1) & v6);
      }
      uint64_t v16 = *(unsigned __int8 ***)(xmmword_26797EE60 + 8 * (void)v2);
      if (v16)
      {
        for (uint64_t i = *v16; i; uint64_t i = *(unsigned __int8 **)i)
        {
          unint64_t v18 = *((void *)i + 1);
          if (v18 == v7)
          {
            if (sub_21612970C((uint64_t)&dword_26797EE80, i + 16, (unsigned __int8 *)__p)) {
              goto LABEL_96;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v18 >= v8) {
                v18 %= v8;
              }
            }
            else
            {
              v18 &= v8 - 1;
            }
            if ((char *)v18 != v2) {
              break;
            }
          }
        }
      }
    }
    uint64_t v19 = (char *)operator new(0x40uLL);
    uint64_t v20 = v19;
    *(void *)&long long __dst = v19;
    *((void *)&__dst + 1) = &qword_26797EE70;
    LOBYTE(v49) = 0;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = v7;
    if (SHIBYTE(v47) < 0)
    {
      sub_21610A674(v19 + 16, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *((_OWORD *)v19 + 1) = *(_OWORD *)__p;
      *((void *)v19 + 4) = v47;
    }
    *((void *)v20 + 5) = 0;
    *((void *)v20 + 6) = 0;
    *((void *)v20 + 7) = 0;
    sub_216140858(v20 + 40, (long long *)v43, (long long *)v44, 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3));
    LOBYTE(v49) = 1;
    float v21 = (float)(unint64_t)(qword_26797EE78 + 1);
    if (!v8 || (float)(*(float *)&dword_26797EE80 * (float)v8) < v21)
    {
      BOOL v22 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v8);
      unint64_t v24 = vcvtps_u32_f32(v21 / *(float *)&dword_26797EE80);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v8 = *((void *)&xmmword_26797EE60 + 1);
      if (*(void *)&prime > *((void *)&xmmword_26797EE60 + 1)) {
        goto LABEL_48;
      }
      if (*(void *)&prime < *((void *)&xmmword_26797EE60 + 1))
      {
        unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)qword_26797EE78 / *(float *)&dword_26797EE80);
        if (*((void *)&xmmword_26797EE60 + 1) < 3uLL
          || (uint8x8_t v33 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797EE60 + 8)),
              v33.i16[0] = vaddlv_u8(v33),
              v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v8)
        {
          unint64_t v8 = *((void *)&xmmword_26797EE60 + 1);
        }
        else
        {
          if (prime)
          {
LABEL_48:
            if (*(void *)&prime >> 61) {
              sub_2160FFA74();
            }
            int v26 = operator new(8 * *(void *)&prime);
            uint64_t v27 = (void *)xmmword_26797EE60;
            *(void *)&xmmword_26797EE60 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *((int8x8_t *)&xmmword_26797EE60 + 1) = prime;
            do
              *(void *)(xmmword_26797EE60 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            uint64_t v29 = (void **)qword_26797EE70;
            if (qword_26797EE70)
            {
              unint64_t v30 = *(void *)(qword_26797EE70 + 8);
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(xmmword_26797EE60 + 8 * v30) = &qword_26797EE70;
              for (j = *v29; j; unint64_t v30 = v36)
              {
                unint64_t v36 = j[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(xmmword_26797EE60 + 8 * v36))
                  {
                    *(void *)(xmmword_26797EE60 + 8 * v36) = v29;
                    goto LABEL_77;
                  }
                  void *v29 = (void *)*j;
                  *CFIndex j = **(void **)(xmmword_26797EE60 + 8 * v36);
                  **(void **)(xmmword_26797EE60 + 8 * v36) = j;
                  CFIndex j = v29;
                }
                unint64_t v36 = v30;
LABEL_77:
                uint64_t v29 = (void **)j;
                CFIndex j = (void *)*j;
              }
            }
            unint64_t v8 = (unint64_t)prime;
            goto LABEL_81;
          }
          size_t v42 = (void *)xmmword_26797EE60;
          *(void *)&xmmword_26797EE60 = 0;
          if (v42) {
            operator delete(v42);
          }
          unint64_t v8 = 0;
          *((void *)&xmmword_26797EE60 + 1) = 0;
        }
      }
LABEL_81:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8) {
          unint64_t v2 = (char *)(v7 % v8);
        }
        else {
          unint64_t v2 = (char *)v7;
        }
      }
      else
      {
        unint64_t v2 = (char *)((v8 - 1) & v7);
      }
    }
    float v37 = *(uint64_t **)(xmmword_26797EE60 + 8 * (void)v2);
    uint64_t v38 = __dst;
    if (v37)
    {
      *(void *)long long __dst = *v37;
    }
    else
    {
      *(void *)long long __dst = qword_26797EE70;
      qword_26797EE70 = v38;
      *(void *)(xmmword_26797EE60 + 8 * (void)v2) = &qword_26797EE70;
      if (!*(void *)v38) {
        goto LABEL_95;
      }
      unint64_t v39 = *(void *)(*(void *)v38 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v39 >= v8) {
          v39 %= v8;
        }
      }
      else
      {
        v39 &= v8 - 1;
      }
      float v37 = (uint64_t *)(xmmword_26797EE60 + 8 * v39);
    }
    uint64_t *v37 = v38;
LABEL_95:
    *(void *)&long long __dst = 0;
    ++qword_26797EE78;
    sub_216185ADC((uint64_t)&__dst);
LABEL_96:
    unint64_t v40 = (long long *)v43;
    unint64_t v41 = v44;
    if (v44 != v43)
    {
      do
      {
        if (*(v41 - 1) < 0) {
          operator delete(*((void **)v41 - 3));
        }
        v41 -= 24;
      }
      while (v41 != (char *)v40);
    }
    uint64_t v0 = 0;
    unint64_t v44 = (char *)v40;
LABEL_101:
    ++v1;
  }
  while (v1 != 769);
  *(void *)&long long __dst = &v43;
  sub_21613EFD0((void ***)&__dst);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216185A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20,char a21)
{
  a20 = &a10;
  sub_21613EFD0((void ***)&a20);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216185ADC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216185398((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_216185B34(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_21610CB04();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_21610FD44(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    uint8x8_t v9 = &v6[2 * v8];
    unint64_t v10 = (char *)*a1;
    int32_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        __int16 v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

char *sub_216185BD8(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    __int16 v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(void *)a1) >> 1) < 0) {
      sub_21610CB04();
    }
    uint64_t v14 = (__dst - (uint64_t)v13) >> 1;
    unint64_t v15 = v10 - (void)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(void *)a1) >> 1)) {
      unint64_t v16 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 1);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v17 = v16;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)sub_21610FD44(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    uint64_t v28 = &v18[2 * v14];
    long long __p = v18;
    uint64_t v34 = v28;
    unint64_t v36 = &v18[2 * v17];
    uint64_t v29 = 2 * a5;
    unint64_t v30 = &v28[2 * a5];
    do
    {
      __int16 v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)uint64_t v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    unint64_t v35 = v30;
    int64_t v5 = sub_216185DE0((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    float v21 = &__src[2 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_18:
    unint64_t v24 = &v5[2 * a5];
    uint64_t v25 = &v23[-2 * a5];
    int v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      int v26 = v23;
      do
      {
        __int16 v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)int v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  float v21 = &__src[2 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_216185DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216185DE0(void **a1, uint64_t a2, char *__src)
{
  int64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      __int16 v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + ++**(_DWORD **)(result + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  __int16 v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + ++**(_DWORD **)(result + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_216185EA8(uint64_t a1)
{
}

void sub_216185FAC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x2166CA800](v3, 0xF1C40893AD9D5);
  uint64_t v5 = *(void *)(v1 + 288);
  *(void *)(v1 + 28++**(_DWORD **)(result + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_216190328(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21618601C(void *a1)
{
  *a1 = &unk_26C6BEB40;
  uint64_t v2 = (void *)a1[38];
  uint64_t v3 = (void *)a1[39];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = a1[35];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (void *)a1[38];
  if (v5)
  {
    a1[39] = v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[37];
  a1[37] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[36];
  a1[36] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return sub_216190328((uint64_t)a1);
}

uint64_t sub_216186158(uint64_t a1)
{
  sub_2161868BC((const void **)(a1 + 16), 0);
  sub_2161868BC((const void **)(a1 + 24), 0);
  [*(void **)(a1 + 40) removeAllObjects];
  sub_216348D94(*(void **)(a1 + 288));
  uint64_t v4 = *(void *)(a1 + 296);
  sub_216246060(v4 + 56);
  uint64_t result = sub_2162C2A3C(v4 + 8, 0);
  uint64_t v6 = *(uint64_t **)(a1 + 304);
  uint64_t v7 = *(uint64_t **)(a1 + 312);
  if (v6 != v7)
  {
    do
    {
      uint64_t result = *v6;
      if (*v6) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      ++v6;
    }
    while (v6 != v7);
    uint64_t v6 = *(uint64_t **)(a1 + 304);
  }
  *(void *)(a1 + 312) = v6;
  *(void *)(a1 + 32++**(_DWORD **)(result + 8) = -1;
  *(void *)(a1 + 336) = 0;
  return result;
}

uint64_t sub_216186214(void **a1, const __CFString *a2, void *a3)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*((uint64_t (**)(void **))*a1 + 36))(a1);
  if (v6)
  {
    *(unsigned char *)(v6 + 96) = (a3 & 0x80) == 0;
    if (sub_2162978A0(v6, 1)) {
      (*((void (**)(void **))*a1 + 33))(a1);
    }
  }
  [a1[5] removeAllObjects];
  if (a2 && CFEqual(a2, kMecabraAnalysisStringForFacemark[0]))
  {
    return sub_2161908DC(a1);
  }
  else
  {
    if (a1[4] != a3) {
      (*((void (**)(void **))*a1 + 33))(a1);
    }
    if (a2) {
      CFTypeRef v9 = CFRetain(a2);
    }
    else {
      CFTypeRef v9 = 0;
    }
    sub_2161868BC((const void **)a1 + 2, v9);
    uint64_t v10 = (const void *)(*((uint64_t (**)(void **, const __CFString *))*a1 + 38))(a1, a2);
    sub_2161868BC((const void **)a1 + 3, v10);
    a1[4] = a3;
    sub_216348E48((CFIndex)a1[36], a2, 1);
    uint64_t v11 = a1[37];
    unint64_t v12 = *((void *)a1[36] + 4);
    if (!v12) {
      sub_216246060((uint64_t)v11 + 56);
    }
    sub_2162C2A3C((uint64_t)v11 + 8, v12);
    unint64_t v16 = a1[38];
    for (uint64_t i = (char *)a1[39]; ; a1[39] = i)
    {
      unint64_t v17 = (i - v16) >> 3;
      if (v17 <= v12) {
        break;
      }
      uint64_t v18 = *(void *)&v16[8 * v17 - 8];
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        unint64_t v16 = a1[38];
        uint64_t i = (char *)a1[39];
      }
      i -= 8;
    }
    a1[41] = (void *)-1;
    uint64_t v19 = a1[36];
    unint64_t v20 = v19[4];
    uint64_t v21 = v19[2] - v19[1];
    unint64_t v67 = v20;
    if (v20 < v21 >> 3)
    {
      uint64_t v22 = v21 >> 3;
      uint64_t v66 = @"IDXPrefixMatch";
      uint64_t v23 = v20;
      while (1)
      {
        uint64_t v24 = *(void *)(*((void *)a1[36] + 1) + 8 * v23);
        uint64_t v25 = *(void **)(v24 + 8);
        if (a1[1] && v25 != 0)
        {
          if (!*(unsigned char *)(v24 + 32)) {
            goto LABEL_27;
          }
          uint64_t v27 = [v25 length:v13, v14];
          uint64_t v29 = [v25 substringToIndex:v27 - 1];
          if (a1[1]) {
            break;
          }
        }
LABEL_62:
        if (++v23 == v22) {
          goto LABEL_66;
        }
      }
      uint64_t v25 = (void *)v29;
LABEL_27:
      if (objc_msgSend_length(v25, v13, v14, v66))
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CFD0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797CFD0))
        {
          int v69 = -16101797;
          v68[0] = *(_OWORD *)a12345_0;
          v68[1] = unk_21636F864;
          sub_2161884A4((uint64_t)&unk_26797CFD8, (unsigned __int16 *)v68, 18);
          __cxa_atexit((void (*)(void *))sub_216188478, &unk_26797CFD8, &dword_2160F5000);
          __cxa_guard_release(&qword_26797CFD0);
        }
        if (objc_msgSend_length(v25, v13, v14))
        {
          uint64_t v31 = 0;
          while (1)
          {
            unsigned int v32 = [v25 characterAtIndex:v30];
            uint64_t v33 = qword_26797CFE0;
            if (!qword_26797CFE0) {
              break;
            }
            uint64_t v34 = &qword_26797CFE0;
            do
            {
              unsigned int v35 = *(unsigned __int16 *)(v33 + 26);
              BOOL v36 = v35 >= v32;
              if (v35 >= v32) {
                uint64_t v37 = (uint64_t *)v33;
              }
              else {
                uint64_t v37 = (uint64_t *)(v33 + 8);
              }
              if (v36) {
                uint64_t v34 = (uint64_t *)v33;
              }
              uint64_t v33 = *v37;
            }
            while (*v37);
            if (v34 == &qword_26797CFE0 || v32 < *((unsigned __int16 *)v34 + 13)) {
              break;
            }
            if (++v31 >= (unint64_t)objc_msgSend_length(v25, v13, v14)) {
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          uint64_t v38 = a1[4];
          unint64_t v39 = (__CFString *)(id)sub_2161868F4(v25);
          if (objc_msgSend_length(v25, v40, v41))
          {
            unint64_t v44 = 0;
            uint64_t v45 = 0;
            do
            {
              int v46 = [v25 characterAtIndex:v42];
              if (v46 == 65290 || v46 == 42) {
                ++v45;
              }
              ++v44;
            }
            while (v44 < [v25 length:v47, v48]);
          }
          else
          {
            uint64_t v45 = 0;
          }
          uint64_t v51 = [MEMORY[0x263EFF9C0] setObject:v42 forKey:v43];
          if (((unsigned __int16)v38 & 0x400) != 0)
          {
            unint64_t v55 = [v39 stringByReplacingOccurrencesOfString:v49 withString:@"0"];
            if ((unint64_t)objc_msgSend_length(v55, v56, v57) <= 5) {
              sub_216186944(a1, (const char *)v23, v51, v55);
            }
          }
          else if (v45 == objc_msgSend_length(v39, v49, v50) {
                 || (unint64_t)objc_msgSend_length(v39, v52, v53) < 5)
          }
          {
            uint64_t v54 = [v39 stringByReplacingOccurrencesOfString:v52 withString:@"0"];
            sub_216186944(a1, (const char *)v23, v51, v54);
          }
          else if (v45)
          {
            sub_216186A3C(a1, v23, v51, v39, @"IDXWildcardMatch", ((unsigned __int16)v38 & 0x200) != 0);
            if (objc_msgSend_hasSuffix_(v39, v58, @"?"))
            {
              uint64_t v61 = [v39 lengthOfBytesUsingEncoding:v59];
              unint64_t v39 = (__CFString *)[v39 substringToIndex:v61 - 1];
            }
            CFStringRef v63 = (const __CFString *)[v39 stringByAppendingString:v59];
            sub_216186A3C(a1, v23, v51, v63, @"IDXWildcardMatch", 0);
          }
          else
          {
            sub_216186A3C(a1, v23, v51, v39, @"IDXExactMatch", ((unsigned __int16)v38 & 0x200) != 0);
            sub_216186A3C(a1, v23, v51, v39, (uint64_t)v66, 0);
          }
        }
      }
      goto LABEL_62;
    }
LABEL_66:
    sub_2162C23A8(a1[37], v67);
    uint64_t v64 = sub_2162769A4();
    if (*v64 && (v64[10] & 8) != 0) {
      sub_2162C3174((uint64_t)a1[37] + 8);
    }
    (*((void (**)(void **))*a1 + 31))(a1);
    return a1[1] && a1[2] != 0;
  }
}

void sub_21618689C(_Unwind_Exception *a1)
{
}

void sub_2161868BC(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_2161868F4(void *a1)
{
  ASCIIFromInputKeyString = MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(8u, a1);
  uint64_t v3 = [ASCIIFromInputKeyString stringByReplacingOccurrencesOfString:v2 withString:@"?"];
  uint64_t v6 = [v3 v4:v5];

  return v6;
}

uint64_t sub_216186944(void *a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = a1[4];
  CFTypeRef v9 = @"p";
  uint64_t v10 = @"pe";
  if ((v8 & 0x400) != 0)
  {
    if (objc_msgSend_length(a4, a2, a3) == 5) {
      uint64_t v10 = @"fe";
    }
    if (objc_msgSend_length(a4, v11, v12) == 5) {
      CFTypeRef v9 = @"f";
    }
  }
  CFStringRef v13 = (const __CFString *)[v10 stringByAppendingString:a2];
  sub_216186A3C(a1, (uint64_t)a2, a3, v13, @"IDXExactMatch", (v8 & 0x200) != 0);
  CFStringRef v15 = (const __CFString *)[v9 stringByAppendingString:v14];

  return sub_216186A3C(a1, (uint64_t)a2, a3, v15, @"IDXExactMatch", 0);
}

uint64_t sub_216186A3C(void *a1, uint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = sub_216186B0C;
  v8[3] = &unk_2642691B0;
  v8[6] = a1;
  v8[7] = a2;
  char v9 = a6;
  v8[4] = a3;
  void v8[5] = &v10;
  sub_216190AC8(a1, a4, a5, (uint64_t)v8);
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_216186AF4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_216186B0C(uint64_t result, const char *a2)
{
  if (a2)
  {
    uint64_t result = [*(void **)(result + 32) containsObject:a2];
    if ((result & 1) == 0) {
      sub_21624613C();
    }
  }
  return result;
}

void *sub_216186BB0(void *result)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(result[37] + 24);
  uint64_t v2 = *(void *)(result[37] + 32);
  if (v2 != v1)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(void *)(result[36] + 32);
    if (!v4)
    {
      uint64_t v5 = result[4];
      uint64_t v15 = 0;
      unint64_t v16 = &v15;
      uint64_t v17 = 0x4812000000;
      uint64_t v18 = sub_2161874FC;
      uint64_t v19 = sub_216187520;
      unint64_t v20 = "";
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      v14[0] = 0;
      v14[1] = v14;
      void v14[2] = 0x4812000000;
      v14[3] = sub_2161874FC;
      void v14[4] = sub_216187520;
      v14[5] = "";
      memset(&v14[6], 0, 24);
      CFStringRef v6 = sub_216187538((uint64_t)result, 1);
      uint64_t v7 = v3[37];
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 3221225472;
      v12[2] = sub_21618756C;
      void v12[3] = &unk_2642691D8;
      v12[6] = v3;
      v12[7] = v6;
      char v13 = (unint64_t)(v5 & 0x200) >> 9;
      v12[4] = &v15;
      void v12[5] = v14;
      sub_2162C30F0(v7 + 8, 0, (uint64_t)v12);
      operator new();
    }
    if (v4 < (v2 - v1) >> 3)
    {
      sub_216187538((uint64_t)result, v4 + 1);
      uint64_t v15 = 0;
      unint64_t v16 = &v15;
      uint64_t v17 = 0x2020000000;
      uint64_t v18 = 0;
      operator new();
    }
    uint64_t v8 = (uint64_t *)result[38];
    char v9 = (uint64_t *)result[39];
    if (v8 == v9)
    {
      uint64_t v11 = result[38];
    }
    else
    {
      do
      {
        uint64_t v10 = *v8++;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10);
      }
      while (v8 != v9);
      uint64_t v8 = (uint64_t *)v3[38];
      uint64_t v11 = v3[39];
    }
    v3[41] = ((v11 - (uint64_t)v8) >> 3) - 1;
  }
  return result;
}

void sub_216187340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a35, 8);
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216187400(void *a1, char *a2, uint64_t a3)
{
  unint64_t v4 = sub_2161F3B4C(a1, a2, a3);
  uint64_t v7 = sub_2161F3B4C(a2, v5, v6);
  int v8 = (*(uint64_t (**)(void *))(*(void *)v4 + 112))(v4);
  if (v8 < (*(int (**)(void *))(*(void *)v7 + 112))(v7)) {
    return -1;
  }
  int v10 = (*(uint64_t (**)(void *))(*(void *)v4 + 112))(v4);
  return v10 > (*(int (**)(void *))(*(void *)v7 + 112))(v7);
}

__n128 sub_2161874FC(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_216187520(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

CFStringRef sub_216187538(uint64_t a1, uint64_t a2)
{
  v2.length = 0;
  if (a2)
  {
    uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 288) + 8);
    do
    {
      uint64_t v4 = *v3++;
      v2.length += *(void *)(v4 + 24);
      --a2;
    }
    while (a2);
  }
  v2.location = 0;
  return CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 16), v2);
}

void sub_21618756C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 48);
  if ((v3[4] & 0x2000000) != 0) {
    uint64_t v4 = 4096;
  }
  else {
    uint64_t v4 = 1;
  }
  sub_2161903FC(v3, v4, *(const __CFString **)(a2 + 8));
}

BOOL sub_21618770C(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return v3 < (*(int (**)(uint64_t))(*(void *)a2 + 112))(a2);
}

void sub_216187784(uint64_t a1, const UniChar *a2, CFIndex a3)
{
  int v3 = *(void **)(a1 + 40);
  CFStringRef v4 = CFStringCreateWithCharacters(0, a2, a3);
  if ((v3[4] & 0x2000000) != 0) {
    uint64_t v5 = 4096;
  }
  else {
    uint64_t v5 = 1;
  }
  sub_2161903FC(v3, v5, v4);
}

uint64_t sub_216187850(uint64_t a1, const char *a2, uint64_t a3)
{
  if (!objc_msgSend_count(*(void **)(a1 + 40), a2, a3))
  {
    for (uint64_t i = *(void *)(a1 + 328); (i & 0x8000000000000000) == 0; *(void *)(a1 + 328) = i)
    {
      if (i && *(void *)(a1 + 336) == 40)
      {
        uint64_t i = 0;
      }
      else
      {
        uint64_t v12 = *(void *)(*(void *)(a1 + 304) + 8 * i);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
        if (result)
        {
          ++*(void *)(a1 + 336);
          return result;
        }
        uint64_t i = *(void *)(a1 + 328) - 1;
      }
    }
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6 == objc_msgSend_count(*(void **)(a1 + 40), v4, v5)) {
    return 0;
  }
  int v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = v9 + 1;

  return [v8 objectAtIndex:v7];
}

uint64_t sub_216187928(uint64_t a1, void *a2)
{
  return sub_2161868F4(a2);
}

BOOL sub_216187930(uint64_t a1, const char *a2)
{
  return [*(void **)(a1 + 16) rangeOfString:a2].location == NSNotFound;
}

uint64_t sub_216187960(uint64_t a1)
{
  return *(void *)(a1 + 280);
}

void sub_216187968(uint64_t a1)
{
}

void sub_216187A70(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10E1C4022FF22E7);
  sub_21618601C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216187AA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 304))();
}

void sub_216187AD4(uint64_t a1)
{
}

void sub_216187BDC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10E1C4022FF22E7);
  sub_21618601C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216187C10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 304))();
}

void sub_216187C40(uint64_t a1)
{
}

void sub_216187D50(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10E1C4022FF22E7);
  sub_21618601C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216187D84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 304))();
}

void sub_216187DB4()
{
}

void sub_216187E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166CA800](v2, 0x10E1C403F39E65DLL);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFURLRef sub_216187E68(unint64_t a1)
{
  uint64_t v2 = (uint64_t *)sub_2162D8C20();
  int v3 = (const UInt8 *)sub_2162D8CB8(v2, a1, off_26797C900[0], off_26797C8A8[0]);
  int v4 = *((char *)v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(const UInt8 **)v3;
  }
  if (v4 >= 0) {
    CFIndex v6 = v3[23];
  }
  else {
    CFIndex v6 = *((void *)v3 + 1);
  }

  return CFURLCreateFromFileSystemRepresentation(0, v5, v6, 0);
}

void sub_216187EDC()
{
}

void sub_216187F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166CA800](v2, 0x10E1C403F39E65DLL);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216187F90(int *a1)
{
  unint64_t v1 = sub_2161E2834(*a1);
  if (v1 == 5)
  {
    uint64_t v2 = sub_216351058();
    unint64_t v1 = sub_2163510E8(v2, 5);
  }
  sub_216187E68(v1);
  operator new();
}

void sub_216188044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166CA800](v2, 0x10E1C40E7AA9E22);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21618807C(uint64_t result)
{
  if (*(unsigned char *)(*(void *)(result + 344) + 105))
  {
    uint64_t v1 = result;
    uint64_t v2 = (uint64_t *)sub_2162D8C20();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 232))(v1);
    unint64_t v4 = sub_2161E2834(v3);
    uint64_t v5 = (const UInt8 *)sub_2162D8CB8(v2, v4, off_26797C900[0], off_26797C8A8[0]);
    int v6 = *((char *)v5 + 23);
    if (v6 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = *(const UInt8 **)v5;
    }
    if (v6 >= 0) {
      CFIndex v8 = v5[23];
    }
    else {
      CFIndex v8 = *((void *)v5 + 1);
    }
    CFURLRef v9 = CFURLCreateFromFileSystemRepresentation(0, v7, v8, 0);
    if (v9) {
      sub_2161902B0(v1, v9, 0);
    }
    (*(void (**)(uint64_t))(*(void *)v1 + 264))(v1);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 232))(v1);
    int v11 = sub_2161E2834(v10);
    sub_216329754(v1 + 72, v11);
    operator new();
  }
  return result;
}

void sub_2161882C8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0xF1C40893AD9D5);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216188304()
{
  return 0;
}

uint64_t sub_21618830C()
{
  return 0;
}

uint64_t sub_216188318()
{
  return 0;
}

uint64_t sub_216188320()
{
  return 0;
}

double sub_216188354()
{
  return 0.0;
}

uint64_t sub_21618835C()
{
  return 0;
}

CFMutableArrayRef sub_216188364()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
}

uint64_t sub_216188384()
{
  return 0;
}

uint64_t sub_21618838C()
{
  return 0;
}

uint64_t sub_216188394()
{
  return 0;
}

uint64_t sub_21618839C()
{
  return 4;
}

uint64_t sub_2161883A4()
{
  return 0;
}

void sub_2161883B0(void *a1)
{
  sub_21618601C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161883E8()
{
  return 15;
}

void sub_2161883F4(void *a1)
{
  sub_21618601C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21618842C()
{
  return 7;
}

void sub_216188438(void *a1)
{
  sub_21618601C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216188470()
{
  return 8;
}

uint64_t sub_216188478(uint64_t a1)
{
  return a1;
}

uint64_t sub_2161884A4(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 2 * a3;
    do
    {
      sub_216188524((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 2;
    }
    while (v6);
  }
  return a1;
}

void sub_21618850C(_Unwind_Exception *a1)
{
  sub_21612A250(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216188524(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t v6 = sub_2161885AC(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    CFIndex v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v7 + 13) = *a4;
    sub_21612A650(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_2161885AC(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int16 *)a2 + 13), v6 < v7))
  {
    CFIndex v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      CFURLRef v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        CFURLRef v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int16 *)v10 + 13) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int16 *)(v16 + 26);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 13))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int16 *)(v20 + 26);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_216188754(unint64_t a1)
{
  if (a1 >> 61) {
    sub_2160FFA74();
  }
  return operator new(8 * a1);
}

uint64_t sub_21618878C(uint64_t result, uint64_t *a2, uint64_t (**a3)(void), uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    uint64_t v11 = a2 - 1;
    uint64_t v84 = a2 - 2;
    uint64_t v87 = a2;
    uint64_t v82 = a2 - 3;
    uint64_t v12 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = v12;
          char v13 = v87;
          uint64_t v14 = (char *)v87 - (char *)v12;
          uint64_t v15 = v87 - v12;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t result = ((uint64_t (*)(void, uint64_t))*a3)(*(v87 - 1), *v10);
                if (result)
                {
                  uint64_t v42 = *v10;
                  uint64_t *v10 = *(v87 - 1);
                  *(v87 - 1) = v42;
                }
                break;
              case 3:
                uint64_t result = sub_216188F38(v10, v10 + 1, v11, a3);
                break;
              case 4:
                uint64_t result = sub_2161891E4(v10, v10 + 1, v10 + 2, v11, a3);
                break;
              case 5:
                uint64_t result = sub_216189298(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            uint64_t v43 = v10 + 1;
            BOOL v45 = v10 == v87 || v43 == v87;
            if (a5)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                uint64_t v47 = v10;
                do
                {
                  uint64_t v49 = *v47;
                  uint64_t v48 = v47[1];
                  uint64_t v47 = v43;
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = *v47;
                    uint64_t v51 = v46;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v51 + ++**(_DWORD **)(result + 8) = *(uint64_t *)((char *)v10 + v51);
                      if (!v51) {
                        break;
                      }
                      uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v50, *(uint64_t *)((char *)v10 + v51 - 8));
                      v51 -= 8;
                      if ((result & 1) == 0)
                      {
                        int v52 = (uint64_t *)((char *)v10 + v51 + 8);
                        goto LABEL_81;
                      }
                    }
                    int v52 = v10;
LABEL_81:
                    *int v52 = v50;
                  }
                  uint64_t v43 = v47 + 1;
                  v46 += 8;
                }
                while (v47 + 1 != v87);
              }
            }
            else if (!v45)
            {
              do
              {
                uint64_t v77 = *v10;
                uint64_t v76 = v10[1];
                uint64_t v10 = v43;
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v76, v77);
                if (result)
                {
                  uint64_t v78 = *v10;
                  uint64_t v79 = v10;
                  do
                  {
                    int v80 = v79;
                    uint64_t v81 = *--v79;
                    *int v80 = v81;
                    uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v78, *(v80 - 2));
                  }
                  while ((result & 1) != 0);
                  uint64_t *v79 = v78;
                }
                uint64_t v43 = v10 + 1;
              }
              while (v10 + 1 != v87);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != v87)
            {
              int64_t v53 = (unint64_t)(v15 - 2) >> 1;
              int64_t v85 = v53;
              do
              {
                int64_t v54 = v53;
                if (v85 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  uint64_t v56 = &v10[v55];
                  if (2 * v53 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                  {
                    ++v56;
                    uint64_t v55 = 2 * v54 + 2;
                  }
                  uint64_t v57 = &v10[v54];
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, *v57);
                  if ((result & 1) == 0)
                  {
                    int64_t v83 = v54;
                    uint64_t v58 = *v57;
                    do
                    {
                      uint64_t v59 = v56;
                      *uint64_t v57 = *v56;
                      if (v85 < v55) {
                        break;
                      }
                      uint64_t v60 = (2 * v55) | 1;
                      uint64_t v56 = &v10[v60];
                      if (2 * v55 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                      {
                        ++v56;
                        uint64_t v60 = 2 * v55 + 2;
                      }
                      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, v58);
                      uint64_t v57 = v59;
                      uint64_t v55 = v60;
                    }
                    while (!result);
                    *uint64_t v59 = v58;
                    char v13 = v87;
                    int64_t v54 = v83;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v61 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v62 = v13;
                uint64_t v63 = 0;
                uint64_t v64 = v61 - 2;
                uint64_t v86 = *v10;
                if (v61 < 2) {
                  uint64_t v64 = v61 - 1;
                }
                uint64_t v65 = v64 >> 1;
                uint64_t v66 = v10;
                do
                {
                  unint64_t v67 = &v66[v63 + 1];
                  uint64_t v68 = (2 * v63) | 1;
                  uint64_t v69 = 2 * v63 + 2;
                  if (v69 < v61)
                  {
                    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v66[v63 + 1], v66[v63 + 2]);
                    if (result)
                    {
                      ++v67;
                      uint64_t v68 = v69;
                    }
                  }
                  *uint64_t v66 = *v67;
                  uint64_t v66 = v67;
                  uint64_t v63 = v68;
                }
                while (v68 <= v65);
                char v13 = v62 - 1;
                if (v67 == v62 - 1)
                {
                  uint64_t *v67 = v86;
                }
                else
                {
                  uint64_t *v67 = *v13;
                  uint64_t *v13 = v86;
                  uint64_t v70 = (char *)v67 - (char *)v10 + 8;
                  if (v70 >= 9)
                  {
                    unint64_t v71 = (((unint64_t)v70 >> 3) - 2) >> 1;
                    uint64_t v72 = &v10[v71];
                    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, *v67);
                    if (result)
                    {
                      uint64_t v73 = *v67;
                      do
                      {
                        int v74 = v72;
                        uint64_t *v67 = *v72;
                        if (!v71) {
                          break;
                        }
                        unint64_t v71 = (v71 - 1) >> 1;
                        uint64_t v72 = &v10[v71];
                        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, v73);
                        unint64_t v67 = v74;
                      }
                      while ((result & 1) != 0);
                      *int v74 = v73;
                    }
                  }
                }
              }
              while (v61-- > 2);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          uint64_t v17 = &v10[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            sub_216188F38(v17, v10, v11, a3);
          }
          else
          {
            sub_216188F38(v10, v17, v11, a3);
            sub_216188F38(v10 + 1, v17 - 1, v84, a3);
            sub_216188F38(v10 + 2, &v10[v16 + 1], v82, a3);
            char v13 = v87;
            sub_216188F38(v17 - 1, v17, &v10[v16 + 1], a3);
            uint64_t v18 = *v10;
            uint64_t *v10 = *v17;
            *uint64_t v17 = v18;
          }
          --a4;
          if (a5 & 1) != 0 || (((uint64_t (*)(void, uint64_t))*a3)(*(v10 - 1), *v10)) {
            break;
          }
          uint64_t v33 = *v10;
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v10, *v11);
          if (result)
          {
            uint64_t v12 = v10;
            do
            {
              uint64_t v34 = v12[1];
              ++v12;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v34);
            }
            while ((result & 1) == 0);
          }
          else
          {
            unsigned int v35 = v10 + 1;
            do
            {
              uint64_t v12 = v35;
              if (v35 >= v87) {
                break;
              }
              ++v35;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, *v12);
            }
            while (!result);
          }
          BOOL v36 = v87;
          if (v12 < v87)
          {
            BOOL v36 = v87;
            do
            {
              uint64_t v37 = *--v36;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v37);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v36)
          {
            uint64_t v38 = *v12;
            *uint64_t v12 = *v36;
            uint64_t *v36 = v38;
            do
            {
              uint64_t v39 = v12[1];
              ++v12;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v33, v39));
            do
            {
              uint64_t v40 = *--v36;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v40);
            }
            while ((result & 1) != 0);
          }
          uint64_t v41 = v12 - 1;
          BOOL v5 = v12 - 1 >= v10;
          BOOL v6 = v12 - 1 == v10;
          if (v12 - 1 != v10) {
            uint64_t *v10 = *v41;
          }
          a5 = 0;
          uint64_t *v41 = v33;
        }
        uint64_t v19 = 0;
        uint64_t v20 = *v10;
        do
          char v21 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[++v19], v20);
        while ((v21 & 1) != 0);
        unsigned int v22 = &v10[v19];
        uint64_t v23 = v13;
        if (v19 == 1)
        {
          uint64_t v23 = v13;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v25 = *--v23;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v25, v20) & 1) == 0);
        }
        else
        {
          do
            uint64_t v24 = *--v23;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v24, v20));
        }
        if (v22 >= v23)
        {
          uint64_t v31 = v22 - 1;
        }
        else
        {
          int v26 = &v10[v19];
          uint64_t v27 = v23;
          do
          {
            uint64_t v28 = *v26;
            *int v26 = *v27;
            *uint64_t v27 = v28;
            do
            {
              uint64_t v29 = v26[1];
              ++v26;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v20) & 1) != 0);
            do
              uint64_t v30 = *--v27;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v30, v20));
          }
          while (v26 < v27);
          uint64_t v31 = v26 - 1;
        }
        if (v31 != v10) {
          uint64_t *v10 = *v31;
        }
        *uint64_t v31 = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        uint64_t result = sub_21618878C(v10, v31, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v31 + 1;
      }
      BOOL v32 = sub_21618901C(v10, v31, a3);
      uint64_t v12 = v31 + 1;
      uint64_t result = sub_21618901C(v31 + 1, v87, a3);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v31;
    if (!v32) {
      continue;
    }
    return result;
  }
}

uint64_t sub_216188F38(void *a1, void *a2, void *a3, uint64_t (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = (*a4)(*a3);
      if (result)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_21618901C(void *a1, void *a2, uint64_t (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_216188F38(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_2161891E4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_216189298(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      CFURLRef v9 = a1 + 2;
      sub_216188F38(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          unint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    CFURLRef v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_2161891E4(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(void))
{
  sub_216188F38(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_216189298(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t (**a6)(void))
{
  sub_2161891E4(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

double sub_216189374(int a1, unsigned int a2, uint64_t a3)
{
  if (a3 && *(unsigned char *)(a3 + 96)) {
    return sub_21628FCD0(a3, a1, a2);
  }
  else {
    return flt_21636F878[26 * a1 - 2619 + a2];
  }
}

double sub_2161893B8(uint64_t *a1, uint64_t a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  double v3 = 0.0;
  if ((unint64_t)a1[1] >> v2 != 1)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = v6 << v2;
      uint64_t v8 = *a1;
      if (v2)
      {
        unsigned __int16 v9 = *(_WORD *)(v8 + v7);
        unsigned __int16 v10 = *(_WORD *)(v8 + (++v6 << v2));
      }
      else
      {
        unsigned __int16 v9 = *(char *)(v8 + v7);
        ++v6;
        unsigned __int16 v10 = *(char *)(v8 + v6);
      }
      double v3 = v3 + sub_216189374(v9, v10, a2);
      int v2 = *((unsigned __int8 *)a1 + 16);
    }
    while (v6 < ((unint64_t)a1[1] >> v2) - 1);
  }
  return v3;
}

double sub_216189468(int a1, int a2, unsigned char *a3)
{
  if (a3 && *a3) {
    return sub_2161E6DD4((uint64_t)a3, a1, a2);
  }
  else {
    return flt_21636F878[26 * a1 - 2619 + a2];
  }
}

double sub_2161894AC(uint64_t *a1, unsigned char *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  double v3 = 0.0;
  if ((unint64_t)a1[1] >> v2 != 1)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = v6 << v2;
      uint64_t v8 = *a1;
      if (v2)
      {
        unsigned __int16 v9 = *(_WORD *)(v8 + v7);
        unsigned __int16 v10 = *(_WORD *)(v8 + (++v6 << v2));
      }
      else
      {
        unsigned __int16 v9 = *(char *)(v8 + v7);
        ++v6;
        unsigned __int16 v10 = *(char *)(v8 + v6);
      }
      double v3 = v3 + sub_216189468(v9, v10, a2);
      int v2 = *((unsigned __int8 *)a1 + 16);
    }
    while (v6 < ((unint64_t)a1[1] >> v2) - 1);
  }
  return v3;
}

__CFString *sub_21618955C(unsigned __int16 **a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  unint64_t v4 = *a1;
  BOOL v5 = a1[1];
  if (*a1 != v5)
  {
    unint64_t v6 = 0;
    do
    {
      CFStringRef v7 = CFStringCreateWithCString(v2, (&off_26426EF10)[2 * *v4], 0x8000100u);
      if (v7) {
        CFStringAppend(Mutable, v7);
      }
      if (v6 < a1[1] - *a1 - 1) {
        CFStringAppend(Mutable, @" ");
      }
      if (v7) {
        CFRelease(v7);
      }
      ++v4;
      ++v6;
    }
    while (v4 != v5);
  }
  return Mutable;
}

void sub_21618965C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216189674(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v61[4] = *MEMORY[0x263EF8340];
  *(void *)a3 = &unk_26C6BE968;
  *(_OWORD *)(a3 + ++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 4++**(_DWORD **)(result + 8) = 0;
  uint64_t v4 = a1[2];
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4) & 1) != 0)
  {
    long long v55 = 0uLL;
    unint64_t v56 = 0;
    (*(void (**)(void, uint64_t))(*(void *)a1[2] + 40))(a1[2], a2);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)a1[2] + 88))(a1[2]);
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v6 + 16))(&v57);
    *(void *)&long long v52 = &v56;
    CFStringRef v7 = sub_216188754(1uLL);
    *(void *)&v51[24] = &v7[v8];
    unint64_t v9 = v57;
    unint64_t v57 = 0;
    void *v7 = v9;
    unsigned __int16 v10 = v7 + 1;
    long long v11 = v55;
    *(void *)&long long v55 = v7;
    *((void *)&v55 + 1) = v7 + 1;
    *(_OWORD *)&v51[8] = v11;
    unint64_t v12 = v56;
    unint64_t v56 = *(void *)&v51[24];
    *(void *)&v51[24] = v12;
    *(void *)uint64_t v51 = v11;
    sub_21618B35C((uint64_t)v51);
    *((void *)&v55 + 1) = v10;
    unint64_t v13 = v57;
    unint64_t v57 = 0;
    if (v13) {
      (*(void (**)(unint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = *(const void **)a2;
    uint64_t v15 = *(void *)(a2 + 8);
    uint64_t v16 = v15 - *(void *)a2;
    if (v15 != *(void *)a2 && *(_WORD *)(v15 - 2) != 32)
    {
      memset(v51, 0, 24);
      sub_216182F50(v51, v14, v15, v16 >> 1);
      *(void *)&v51[24] = 0;
      long long v52 = 0uLL;
      sub_21618B3D8(&v51[24], *(const void **)(a2 + 24), *(void *)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
      sub_2161C14F0((uint64_t)v51);
      (*(void (**)(void, unsigned char *))(*(void *)a1[2] + 40))(a1[2], v51);
      uint64_t v17 = (*(uint64_t (**)(void))(*(void *)a1[2] + 88))(a1[2]);
      (*(void (**)(void **__return_ptr))(*(void *)v17 + 16))(&__p);
      uint64_t v18 = (void *)*((void *)&v55 + 1);
      if (*((void *)&v55 + 1) >= v56)
      {
        char v21 = (void *)v55;
        uint64_t v22 = (uint64_t)(*((void *)&v55 + 1) - v55) >> 3;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          sub_21618B344();
        }
        uint64_t v24 = v56 - v55;
        if ((uint64_t)(v56 - v55) >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        uint64_t v60 = &v56;
        if (v25)
        {
          unint64_t v25 = (unint64_t)sub_216188754(v25);
          uint64_t v18 = (void *)*((void *)&v55 + 1);
          char v21 = (void *)v55;
        }
        else
        {
          uint64_t v26 = 0;
        }
        uint64_t v27 = (void *)(v25 + 8 * v22);
        unint64_t v57 = v25;
        *(void *)&long long v58 = v27;
        unint64_t v59 = v25 + 8 * v26;
        uint64_t v28 = __p;
        long long __p = 0;
        *uint64_t v27 = v28;
        *((void *)&v58 + 1) = v27 + 1;
        if (v18 == v21)
        {
          uint64_t v20 = v27 + 1;
        }
        else
        {
          do
          {
            uint64_t v29 = *--v18;
            *uint64_t v18 = 0;
            *--uint64_t v27 = v29;
          }
          while (v18 != v21);
          uint64_t v20 = (void *)*((void *)&v58 + 1);
        }
        long long v30 = v55;
        *(void *)&long long v55 = v27;
        *((void *)&v55 + 1) = v20;
        long long v58 = v30;
        unint64_t v31 = v56;
        unint64_t v56 = v59;
        unint64_t v59 = v31;
        unint64_t v57 = v30;
        sub_21618B35C((uint64_t)&v57);
      }
      else
      {
        uint64_t v19 = __p;
        long long __p = 0;
        **((void **)&v55 + 1) = v19;
        uint64_t v20 = v18 + 1;
      }
      *((void *)&v55 + 1) = v20;
      BOOL v32 = __p;
      long long __p = 0;
      if (v32) {
        (*(void (**)(void *))(*(void *)v32 + 8))(v32);
      }
      sub_21618B4F0((uint64_t)v51);
    }
    uint64_t v33 = a1[3];
    *(_OWORD *)uint64_t v51 = xmmword_216370310;
    *(void *)&v51[16] = 10;
    *(_DWORD *)&v51[24] = 1077936128;
    v61[0] = &unk_26C6C93B0;
    v61[3] = v61;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v33 + 24))(&v57);
    sub_21618B8E8(v61);
    if ((*(unsigned char *)(a1[1] + 1) & 0x20) != 0) {
      sub_21618A0C8(*(_WORD **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    }
    *(void *)uint64_t v51 = 0;
    *(_DWORD *)&v51[8] = 0;
    *(_OWORD *)&v51[16] = 0u;
    long long v52 = 0u;
    *(_OWORD *)int64_t v53 = 0u;
    uint64_t v54 = 0;
    unint64_t v34 = v57;
    uint64_t v35 = v58;
    if (v57 != (void)v58)
    {
      do
      {
        if (*(char *)(v34 + 23) < 0)
        {
          uint64_t v37 = *(char **)v34;
          uint64_t v36 = *(void *)(v34 + 8);
        }
        else
        {
          uint64_t v36 = *(unsigned __int8 *)(v34 + 23);
          uint64_t v37 = (char *)v34;
        }
        sub_2161BC294(v37, v36, (uint64_t)&__p);
        if ((v50 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v50 & 0x80u) == 0) {
          uint64_t v39 = v50;
        }
        else {
          uint64_t v39 = v49;
        }
        uint64_t v40 = sub_21618A0C8(p_p, v39);
        if (v41)
        {
          uint64_t v42 = v40;
          uint64_t v43 = 2 * v41;
          uint64_t v44 = 2 * v41;
          BOOL v45 = v40;
          while (*((unsigned __int8 *)v45 + 1) << 8 == 4352)
          {
            ++v45;
            v44 -= 2;
            if (!v44) {
              goto LABEL_53;
            }
          }
          if (!sub_216227508((uint64_t)a1, (uint64_t)v40, v41))
          {
            do
            {
              if ((*v42 & 0xFFDFu) - 65 <= 0x19) {
                break;
              }
              ++v42;
              v43 -= 2;
            }
            while (v43);
            if ((v50 & 0x80u) == 0) {
              uint64_t v46 = (__int16 *)&__p;
            }
            else {
              uint64_t v46 = (__int16 *)__p;
            }
            if ((v50 & 0x80u) == 0) {
              uint64_t v47 = v50;
            }
            else {
              uint64_t v47 = v49;
            }
            sub_2162275AC((uint64_t)a1, (uint64_t)v51, v46, v47);
          }
        }
LABEL_53:
        if ((char)v50 < 0) {
          operator delete(__p);
        }
        v34 += 32;
      }
      while (v34 != v35);
      if (v53[0])
      {
        v53[1] = v53[0];
        operator delete(v53[0]);
      }
    }
    *(void *)uint64_t v51 = &v57;
    sub_216175BF4((void ***)v51);
    *(void *)uint64_t v51 = &v55;
    sub_21618B534((void ***)v51);
  }
}

void sub_216189F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v38 = a12;
  a12 = 0;
  if (v38) {
    (*(void (**)(char *))(*(void *)v38 + 8))(v38);
  }
  sub_21618B4F0((uint64_t)&__p);
  a12 = &a28;
  sub_21618B534((void ***)&a12);
  sub_21618A144(v36);
  _Unwind_Resume(a1);
}

_WORD *sub_21618A0C8(_WORD *result, uint64_t a2)
{
  CFAllocatorRef v2 = result;
  if (a2)
  {
    result += a2;
    uint64_t v3 = -a2;
    for (uint64_t i = v2; *i == 32; ++i)
    {
      if (__CFADD__(v3++, 1)) {
        return result;
      }
    }
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t)&v2[a2 - 1];
    do
    {
      if (*(_WORD *)(v7 + 2 * v6) != 32) {
        break;
      }
    }
    while (v3 + 1 != v6--);
    return i;
  }
  return result;
}

uint64_t sub_21618A144(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BE968;
  uint64_t v2 = a1 + 8;
  uint64_t v4 = (void **)(a1 + 48);
  sub_21618B5DC(&v4);
  sub_216144C28(v2);
  return a1;
}

void sub_21618A1A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v89[0] = *MEMORY[0x263EF8340];
  *(void *)a4 = &unk_26C6BE968;
  *(_OWORD *)(a4 + ++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_DWORD *)(a4 + 40) = 1065353216;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 4++**(_DWORD **)(result + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return;
  }
  char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  char v9 = a3 ? v8 : 0;
  if ((v9 & 1) == 0) {
    return;
  }
  unsigned __int16 v10 = *(unsigned __int16 **)(a3 + 32);
  int v11 = *(char *)(a3 + 55);
  BOOL v12 = v11 < 0;
  if (v11 >= 0) {
    unsigned __int16 v10 = (unsigned __int16 *)(a3 + 32);
  }
  uint64_t v13 = *(unsigned __int8 *)(a3 + 55);
  if (v12) {
    uint64_t v13 = *(void *)(a3 + 40);
  }
  if (!v13) {
    return;
  }
  uint64_t v14 = v13 - 1;
  if (!v14)
  {
LABEL_15:
    unsigned __int16 v18 = v10[v14];
    if ((unsigned __int16)((unsigned __int16)(v18 + 21504) >> 2) >= 0xAE9u && (unsigned __int16)(v18 - 12593) > 0x32u) {
      return;
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    LODWORD(v73) = 1;
    HIDWORD(v73) = *(_DWORD *)(a3 + 96);
    int v74 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
    uint64_t v19 = *(void *)(a3 + 64);
    uint64_t v20 = *(void *)(a3 + 32);
    if (*(char *)(a3 + 55) < 0)
    {
      unint64_t v21 = *(void *)(a3 + 40);
    }
    else
    {
      uint64_t v20 = a3 + 32;
      unint64_t v21 = *(unsigned __int8 *)(a3 + 55);
    }
    uint64_t v75 = v20;
    int64_t v76 = v21;
    uint64_t v22 = *(unsigned __int8 *)(a3 + 87);
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *(void *)(a3 + 72);
    }
    else {
      uint64_t v19 = a3 + 64;
    }
    uint64_t v77 = v19;
    uint64_t v78 = v22;
    v79[1] = 0;
    uint64_t v80 = 0;
    v79[0] = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v72 = 0;
    int v23 = *(unsigned __int16 *)(v20 + 2 * v21 - 2);
    unsigned __int16 v24 = v23 - 12644;
    if (v21)
    {
      if (v23 == 32)
      {
        int v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        goto LABEL_72;
      }
      if (v24 > 0xFFCCu)
      {
        int v25 = 0;
        goto LABEL_62;
      }
      sub_21630E524(v23, (uint64_t)v66);
      uint64_t v29 = 0;
      long long v30 = v66[1];
      if (v67 >= 0) {
        unint64_t v31 = v66;
      }
      else {
        unint64_t v31 = (void **)v66[0];
      }
      if (v67 >= 0) {
        long long v30 = (void *)HIBYTE(v67);
      }
      int v32 = *((unsigned __int16 *)v31 + (void)v30 - 1);
      while (*(unsigned __int16 *)&a11213141516171[v29] != v32)
      {
        v29 += 2;
        if (v29 == 54)
        {
          uint64_t v33 = 0;
          goto LABEL_39;
        }
      }
      uint64_t v33 = &a11213141516171[v29];
LABEL_39:
      if (v33) {
        BOOL v34 = v33 - "1121314151617191:1;1<1=1>1?1@1A1B1D1E1F1G1H1J1K1L1M1N1" == -2;
      }
      else {
        BOOL v34 = 1;
      }
      uint64_t v28 = v34;
      if (SHIBYTE(v67) < 0) {
        operator delete(v66[0]);
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    if (v24 < 0xFFCDu) {
      int v25 = v28;
    }
    else {
      int v25 = 0;
    }
    if (v24 < 0xFFCDu)
    {
      if (!v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        goto LABEL_72;
      }
      sub_21630E524(*(unsigned __int16 *)(v75 + 2 * v76 - 2), (uint64_t)v66);
      if (SHIBYTE(v72) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)long long __p = *(_OWORD *)v66;
      uint64_t v72 = v67;
      if (v67 >= 0) {
        uint64_t v26 = __p;
      }
      else {
        uint64_t v26 = (void **)v66[0];
      }
      if (v67 >= 0) {
        uint64_t v27 = (void *)HIBYTE(v67);
      }
      else {
        uint64_t v27 = v66[1];
      }
      unint64_t v35 = v76 - 1;
      int v25 = 1;
LABEL_71:
      int64_t v76 = v35;
      uint64_t v28 = 1;
LABEL_72:
      sub_21618B040(*(void ***)(a1 + 16));
      if (v79[0])
      {
        v79[1] = v79[0];
        operator delete(v79[0]);
      }
      *(_OWORD *)uint64_t v79 = *(_OWORD *)v66;
      uint64_t v80 = v67;
      if (!sub_216227398(&v73, *(void *)(a1 + 16), v28)) {
        goto LABEL_124;
      }
      uint64_t v64 = v26;
      uint64_t v38 = *(void *)(a1 + 16);
      long long v87 = 0uLL;
      uint64_t v88 = 0;
      sub_216140DB4(&v87, v79[0], (uint64_t)v79[1], ((char *)v79[1] - (char *)v79[0]) >> 2);
      v66[0] = 0;
      v66[1] = 0;
      uint64_t v67 = 0;
      *(void *)&long long v85 = v66;
      BYTE8(v85) = 0;
      v66[0] = operator new(0x18uLL);
      v66[1] = v66[0];
      uint64_t v67 = (uint64_t)v66[0] + 24;
      v66[1] = sub_21618B69C((uint64_t)&v67, (uint64_t)&v87, (uint64_t)v89, (void *)v66[0]);
      (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t))(*(void *)v38 + 64))(v70, v38, v66, 1);
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      *(void *)&long long v85 = v66;
      sub_21613F444((void ***)&v85);
      if ((void)v87)
      {
        *((void *)&v87 + 1) = v87;
        operator delete((void *)v87);
      }
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 96))(&v69);
      (*(void (**)(void *, void))(*(void *)v69 + 24))(v69, *((unsigned int *)v79[1] - 1));
      long long v87 = 0uLL;
      uint64_t v88 = 0;
      if (v28)
      {
        uint64_t v39 = *(void *)(a1 + 24);
        uint64_t v40 = v69;
        *(_OWORD *)uint64_t v66 = xmmword_216370320;
        uint64_t v67 = 16;
        int v68 = 1082130432;
        uint64_t v84 = 0;
        uint64_t v41 = operator new(0x20uLL);
        void *v41 = &unk_26C6C9300;
        v41[1] = a1;
        v41[2] = v64;
        v41[3] = v27;
        uint64_t v84 = v41;
        (*(void (**)(long long *__return_ptr, uint64_t, void *, uint64_t, void **, void *))(*(void *)v39 + 16))(&v85, v39, v40, 8, v66, v83);
        sub_21618B7D8((uint64_t *)&v87);
        long long v87 = v85;
        uint64_t v88 = v86;
        uint64_t v86 = 0;
        long long v85 = 0uLL;
        *(void *)int buf = &v85;
        sub_216175BF4((void ***)buf);
        sub_21618B8E8(v83);
        uint64_t v42 = *((void *)&v87 + 1);
        uint64_t v43 = v87;
        if ((void)v87 == *((void *)&v87 + 1)) {
          char v44 = v25;
        }
        else {
          char v44 = 0;
        }
        if ((v44 & 1) == 0)
        {
LABEL_110:
          if (v43 != v42 && *(float *)(v43 + 24) >= -1.7)
          {
            if (*(char *)(v43 + 23) < 0)
            {
              uint64_t v60 = *(char **)v43;
              uint64_t v59 = *(void *)(v43 + 8);
            }
            else
            {
              uint64_t v59 = *(unsigned __int8 *)(v43 + 23);
              uint64_t v60 = (char *)v43;
            }
            sub_2161BC294(v60, v59, (uint64_t)v66);
            if (v67 >= 0) {
              uint64_t v61 = (__int16 *)v66;
            }
            else {
              uint64_t v61 = (__int16 *)v66[0];
            }
            if (v67 >= 0) {
              uint64_t v62 = HIBYTE(v67);
            }
            else {
              uint64_t v62 = (uint64_t)v66[1];
            }
            sub_2162275AC(a1, (uint64_t)&v73, v61, v62);
          }
LABEL_122:
          v66[0] = &v87;
          sub_216175BF4((void ***)v66);
          uint64_t v63 = v69;
          uint64_t v69 = 0;
          if (v63) {
            (*(void (**)(void *))(*(void *)v63 + 8))(v63);
          }
LABEL_124:
          if (SHIBYTE(v72) < 0) {
            operator delete(__p[0]);
          }
          if (v79[0])
          {
            v79[1] = v79[0];
            operator delete(v79[0]);
          }
          return;
        }
      }
      else if (!v25)
      {
LABEL_109:
        uint64_t v58 = *(void *)(a1 + 24);
        *(_OWORD *)uint64_t v66 = xmmword_216370320;
        uint64_t v67 = 16;
        int v68 = 1082130432;
        v82[0] = &unk_26C6C9358;
        v82[3] = v82;
        (*(void (**)(long long *__return_ptr))(*(void *)v58 + 16))(&v85);
        sub_21618B7D8((uint64_t *)&v87);
        long long v87 = v85;
        uint64_t v88 = v86;
        long long v85 = 0uLL;
        uint64_t v86 = 0;
        *(void *)int buf = &v85;
        sub_216175BF4((void ***)buf);
        sub_21618B8E8(v82);
        uint64_t v42 = *((void *)&v87 + 1);
        uint64_t v43 = v87;
        goto LABEL_110;
      }
      int v45 = *(_DWORD *)(a3 + 96);
      int v46 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
      int v47 = *(char *)(a3 + 55);
      if (v47 >= 0) {
        uint64_t v48 = a3 + 32;
      }
      else {
        uint64_t v48 = *(void *)(a3 + 32);
      }
      if (v47 >= 0) {
        int64_t v49 = *(unsigned __int8 *)(a3 + 55);
      }
      else {
        int64_t v49 = *(void *)(a3 + 40);
      }
      int v50 = *(char *)(a3 + 87);
      BOOL v51 = v50 < 0;
      uint64_t v52 = *(void *)(a3 + 64);
      if (v50 >= 0) {
        uint64_t v52 = a3 + 64;
      }
      uint64_t v53 = *(unsigned __int8 *)(a3 + 87);
      if (v51) {
        uint64_t v53 = *(void *)(a3 + 72);
      }
      LODWORD(v73) = 1;
      HIDWORD(v73) = v45;
      int v74 = v46;
      uint64_t v75 = v48;
      int64_t v76 = v49;
      uint64_t v77 = v52;
      uint64_t v78 = v53;
      if (v79[0])
      {
        v79[1] = v79[0];
        operator delete(v79[0]);
      }
      v79[0] = 0;
      v79[1] = 0;
      uint64_t v80 = 0;
      sub_21618B040(*(void ***)(a1 + 16));
      if (v79[0])
      {
        v79[1] = v79[0];
        operator delete(v79[0]);
      }
      *(_OWORD *)uint64_t v79 = *(_OWORD *)v66;
      uint64_t v80 = v67;
      if (!sub_216227398(&v73, *(void *)(a1 + 16), 0)) {
        goto LABEL_122;
      }
      uint64_t v54 = *(void *)(a1 + 16);
      long long v85 = 0uLL;
      uint64_t v86 = 0;
      sub_216140DB4(&v85, v79[0], (uint64_t)v79[1], ((char *)v79[1] - (char *)v79[0]) >> 2);
      sub_21618B12C(v66, (uint64_t)&v85, 1uLL);
      (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t))(*(void *)v54 + 64))(v65, v54, v66, 1);
      if (v65[0])
      {
        v65[1] = v65[0];
        operator delete(v65[0]);
      }
      *(void *)int buf = v66;
      sub_21613F444((void ***)buf);
      if ((void)v85)
      {
        *((void *)&v85 + 1) = v85;
        operator delete((void *)v85);
      }
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 96))(v66);
      long long v55 = v66[0];
      v66[0] = 0;
      unint64_t v56 = v69;
      uint64_t v69 = v55;
      if (v56)
      {
        (*(void (**)(void *))(*(void *)v56 + 8))(v56);
        unint64_t v57 = v66[0];
        v66[0] = 0;
        if (v57) {
          (*(void (**)(void *))(*(void *)v57 + 8))(v57);
        }
      }
      (*(void (**)(void *, void))(*(void *)v69 + 24))(v69, *((unsigned int *)v79[1] - 1));
      goto LABEL_109;
    }
    uint64_t v20 = v75;
    unint64_t v21 = v76;
    if (!v76)
    {
      uint64_t v36 = 0;
LABEL_68:
      unint64_t v35 = v21 - (void)v36;
      uint64_t v26 = (void **)(v20 + 2 * v35);
      if (v20) {
        uint64_t v27 = v36;
      }
      else {
        uint64_t v27 = 0;
      }
      goto LABEL_71;
    }
LABEL_62:
    uint64_t v36 = 0;
    uint64_t v37 = 2 * v21 - 2;
    while (*(unsigned __int16 *)(v20 + v37) - 12593 <= 0x32)
    {
      ++v36;
      v37 -= 2;
      if ((char *)v21 == v36)
      {
        uint64_t v36 = (char *)v21;
        goto LABEL_68;
      }
    }
    goto LABEL_68;
  }
  uint64_t v15 = v14;
  uint64_t v16 = v10;
  while (1)
  {
    int v17 = *v16++;
    if ((v17 - 12593) < 0x33) {
      break;
    }
    if (!--v15) {
      goto LABEL_15;
    }
  }
}

void sub_21618AE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  a15 = v48 - 160;
  sub_216175BF4((void ***)&a15);
  uint64_t v50 = a22;
  a22 = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a38)
  {
    a39 = (uint64_t)a38;
    operator delete(a38);
  }
  sub_21618A144(v47);
  _Unwind_Resume(a1);
}

void sub_21618B040(void **a1)
{
  (*(void (**)(void **__return_ptr))(*a1[1] + 32))(__p);
  ((void (*)(void **, void **))(*a1)[13])(a1, __p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21618B0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21618B12C(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_216129BA8(a1, a3);
    a1[1] = sub_21618B69C(v4, a2, a2 + 24 * a3, (void *)a1[1]);
  }
  return a1;
}

void sub_21618B1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + ++**(_DWORD **)(result + 8) = v10;
  sub_21613F444(&a9);
  _Unwind_Resume(a1);
}

void *sub_21618B1CC(void *a1)
{
  *a1 = &unk_26C6BDE70;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21618B23C(void *a1)
{
  *a1 = &unk_26C6BDE70;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21618B2CC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BE968;
  uint64_t v2 = a1 + 8;
  uint64_t v4 = (void **)(a1 + 48);
  sub_21618B5DC(&v4);
  sub_216144C28(v2);
  return MEMORY[0x2166CA800](a1, 0x10A1C40731192B1);
}

void sub_21618B344()
{
}

uint64_t sub_21618B35C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - ++**(_DWORD **)(result + 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_21618B3D8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21618B454(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21618B438(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21618B454(void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_21618B344();
  }
  uint64_t result = (char *)sub_21618B4A8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *sub_21618B4A8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_2160FFA74();
  }
  return operator new(40 * a2);
}

uint64_t sub_21618B4F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_21618B534(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21618B5DC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_21618B630(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_21618B630(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void *sub_21618B69C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  int v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      sub_216140DB4(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_21618B750((uint64_t)v8);
  return v4;
}

void sub_21618B73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21618B750(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21618B788(a1);
  }
  return a1;
}

void sub_21618B788(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      uint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_21618B7D8(uint64_t *a1)
{
  if (*a1)
  {
    sub_216175C48(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_21618B820()
{
}

void *sub_21618B834()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6C93B0;
  return result;
}

void sub_21618B86C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C93B0;
}

uint64_t sub_21618B894()
{
  return 1;
}

uint64_t sub_21618B89C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21618B8DC()
{
  return &unk_26C6BCC80;
}

void *sub_21618B8E8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_21618B96C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21618B9F4()
{
}

void *sub_21618BA08()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6B5430;
  return result;
}

void sub_21618BA40(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6B5430;
}

BOOL sub_21618BA68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  int v4 = (*(uint64_t (**)(void))(**(void **)a2 + 112))();
  return v4 > (*(int (**)(uint64_t))(*(void *)v3 + 112))(v3);
}

uint64_t sub_21618BAE4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5070)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21618BB24()
{
  return &unk_26C6B5070;
}

void sub_21618BB34()
{
}

__n128 sub_21618BB48(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C9300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + ++**(_DWORD **)(result + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21618BB9C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C9300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

BOOL sub_21618BBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3) {
    return 0;
  }
  sub_2161BC294(*(char **)a2, v3, (uint64_t)__p);
  if (v14 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  sub_21630E524(*(unsigned __int16 *)v5, (uint64_t)v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  int v6 = (char)v16;
  uint64_t v7 = v15;
  size_t v8 = (void *)v15[0];
  if ((v16 & 0x80u) == 0)
  {
    unint64_t v9 = v16;
  }
  else
  {
    uint64_t v7 = (void *)v15[0];
    unint64_t v9 = v15[1];
  }
  __p[0] = v7;
  __p[1] = (void *)v9;
  BOOL v10 = sub_216268BC4((uint64_t)__p, a1 + 16);
  BOOL v11 = v9 > *(void *)(a1 + 24) && v10;
  if (v6 < 0) {
    operator delete(v8);
  }
  return v11;
}

void sub_21618BC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21618BCB8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21618BCF8()
{
  return &unk_26C6BCC60;
}

void sub_21618BD08()
{
}

void *sub_21618BD1C()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C6C9358;
  return result;
}

void sub_21618BD54(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C9358;
}

uint64_t sub_21618BD7C()
{
  return 1;
}

uint64_t sub_21618BD84(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21618BDC4()
{
  return &unk_26C6BCC70;
}

void sub_21618BDD4()
{
}

void sub_21618BDE8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, double **a4@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    unint64_t v73 = 0;
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[2] - a3[1]) >> 3)) >= *(void *)(v4 + 32) - 1) {
      uint64_t v8 = *(void *)(v4 + 32) - 1;
    }
    else {
      uint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[2] - a3[1]) >> 3);
    }
    unint64_t v9 = operator new(4uLL);
    *unint64_t v9 = 1;
    BOOL v10 = v9 + 1;
    uint64_t v72 = v9 + 1;
    unint64_t v73 = (unint64_t)(v9 + 1);
    long long __p = v9;
    if (v8)
    {
      uint64_t v65 = a2;
      for (uint64_t i = 0; i != v8; ++i)
      {
        unint64_t v12 = *(void *)(a3[10] + 8 * i);
        uint64_t v13 = a3[4];
        uint64_t v14 = a3[1];
        if (v12 >= (a3[5] - v13) >> 1)
        {
          uint64_t v15 = 0;
          unint64_t v16 = 0;
        }
        else
        {
          uint64_t v15 = (_WORD *)(v13 + 2 * v12);
          if (v13) {
            unint64_t v16 = *(unsigned __int16 *)(v14 + 40 * i + 24);
          }
          else {
            unint64_t v16 = 0;
          }
        }
        int v17 = sub_216365E98(*(void *)(a1 + 8), v15, v16, *(_DWORD *)(v14 + 40 * i));
        int v18 = v17;
        uint64_t v19 = v72;
        if ((unint64_t)v72 >= v73)
        {
          uint64_t v20 = __p;
          uint64_t v21 = ((char *)v72 - (unsigned char *)__p) >> 2;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v23 = v73 - (void)__p;
          if ((uint64_t)(v73 - (void)__p) >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            int v25 = (char *)sub_2161129B4((uint64_t)&v73, v24);
            uint64_t v20 = __p;
            uint64_t v19 = v72;
          }
          else
          {
            int v25 = 0;
          }
          uint64_t v26 = &v25[4 * v21];
          *(_DWORD *)uint64_t v26 = v18;
          BOOL v10 = v26 + 4;
          while (v19 != v20)
          {
            int v27 = *--v19;
            *((_DWORD *)v26 - 1) = v27;
            v26 -= 4;
          }
          long long __p = v26;
          uint64_t v72 = v10;
          unint64_t v73 = (unint64_t)&v25[4 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          _DWORD *v72 = v17;
          BOOL v10 = v19 + 1;
        }
        uint64_t v72 = v10;
      }
      uint64_t v4 = *(void *)(a1 + 8);
      unint64_t v9 = __p;
      a2 = v65;
    }
    double v28 = sub_2163668E4(v4, v9, v10 - v9);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v29 = *(uint64_t **)(a2 + 48);
    uint64_t v66 = *(uint64_t **)(a2 + 56);
    if (v29 != v66)
    {
      double v30 = v28;
      do
      {
        uint64_t v31 = *v29;
        if ((*(unsigned int (**)(uint64_t))(*(void *)*v29 + 408))(*v29) == 1) {
          break;
        }
        int v68 = 0;
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        sub_21617B5A4(&v68, __p, (uint64_t)v72, ((char *)v72 - (unsigned char *)__p) >> 2);
        for (unint64_t j = 0; j < (*(uint64_t (**)(void))(*(void *)*v29 + 48))(); ++j)
        {
          uint64_t v33 = (unsigned __int16 *)sub_2162319EC(v31, j);
          unint64_t v35 = v34;
          uint64_t v36 = (unsigned __int16 *)sub_216231FD4(v31, j);
          uint64_t v38 = v37;
          uint64_t v39 = (int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v31 + 560))(v31, j);
          int v40 = sub_2163662A0(*(void *)(a1 + 8), v33, v35, v36, v38, *v39);
          int v41 = v40;
          uint64_t v42 = v69;
          if (v69 >= v70)
          {
            char v44 = (char *)v68;
            uint64_t v45 = (v69 - (unsigned char *)v68) >> 2;
            unint64_t v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62) {
              sub_21610CB04();
            }
            uint64_t v47 = v70 - (unsigned char *)v68;
            if ((v70 - (unsigned char *)v68) >> 1 > v46) {
              unint64_t v46 = v47 >> 1;
            }
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v46;
            }
            if (v48)
            {
              int64_t v49 = (char *)sub_2161129B4((uint64_t)&v70, v48);
              char v44 = (char *)v68;
              uint64_t v42 = v69;
            }
            else
            {
              int64_t v49 = 0;
            }
            uint64_t v50 = &v49[4 * v45];
            *(_DWORD *)uint64_t v50 = v41;
            uint64_t v43 = v50 + 4;
            while (v42 != v44)
            {
              int v51 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v50 - 1) = v51;
              v50 -= 4;
            }
            int v68 = v50;
            uint64_t v69 = v43;
            uint64_t v70 = &v49[4 * v48];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v69 = v40;
            uint64_t v43 = v42 + 4;
          }
          uint64_t v69 = v43;
        }
        double v52 = sub_2163668E4(*(void *)(a1 + 8), v68, (v69 - (unsigned char *)v68) >> 2) - v30;
        uint64_t v53 = a4;
        long long v55 = a4[1];
        unint64_t v54 = (unint64_t)a4[2];
        if ((unint64_t)v55 >= v54)
        {
          unint64_t v57 = *a4;
          uint64_t v58 = v55 - *a4;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v60 = v54 - (void)v57;
          if (v60 >> 2 > v59) {
            unint64_t v59 = v60 >> 2;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            uint64_t v62 = (char *)sub_2160FFAA8((uint64_t)(a4 + 2), v61);
            unint64_t v57 = *a4;
            long long v55 = a4[1];
          }
          else
          {
            uint64_t v62 = 0;
          }
          uint64_t v63 = (double *)&v62[8 * v58];
          *uint64_t v63 = v52;
          unint64_t v56 = v63 + 1;
          while (v55 != v57)
          {
            uint64_t v64 = *((void *)v55-- - 1);
            *((void *)v63-- - 1) = v64;
          }
          *a4 = v63;
          a4[1] = v56;
          a4[2] = (double *)&v62[8 * v61];
          if (v57) {
            operator delete(v57);
          }
          uint64_t v53 = a4;
        }
        else
        {
          *long long v55 = v52;
          unint64_t v56 = v55 + 1;
        }
        v53[1] = v56;
        if (v68)
        {
          uint64_t v69 = (char *)v68;
          operator delete(v68);
        }
        ++v29;
      }
      while (v29 != v66);
    }
    if (__p)
    {
      uint64_t v72 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_21618C2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21618C36C(uint64_t *a1)
{
  a1[4] = a1[3];
  sub_216129D20(a1 + 6);
  a1[11] = a1[10];
  a1[14] = a1[13];
  uint64_t v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
  uint64_t result = sub_21623F9A0(v2);
  if (result)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    sub_21623F9FC(v4, 0, 0);
    uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    uint64_t result = sub_21623FB50(v5);
  }
  a1[9] = 0;
  return result;
}

void sub_21618C440(void *a1, void *a2)
{
  (*(void (**)(void *))(*a1 + 16))(a1);
  long long __p = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 1;
  unint64_t v5 = v4 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v6 = *(void *)(v6 + 32);
    if (v5 <= v6)
    {
      unint64_t v7 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v7 = 0;
    if (v4 == -1) {
      goto LABEL_6;
    }
  }
  unint64_t v7 = v5 - v6;
LABEL_6:
  if (v7 < v4)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = *(unsigned __int16 *)(*a2 + 2 * v7) + 1000;
      if (v8 >= v23)
      {
        BOOL v10 = __p;
        uint64_t v11 = v8 - __p;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v13 = (char *)v23 - (char *)__p;
        if (((char *)v23 - (char *)__p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_2161129B4((uint64_t)&v23, v14);
          BOOL v10 = __p;
          uint64_t v8 = v22;
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v16 = (int *)&v15[4 * v11];
        *unint64_t v16 = v9;
        int v17 = v16 + 1;
        while (v8 != v10)
        {
          int v18 = *--v8;
          *--unint64_t v16 = v18;
        }
        long long __p = v16;
        uint64_t v23 = (int *)&v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
        uint64_t v8 = v17;
      }
      else
      {
        *v8++ = v9;
      }
      unint64_t v22 = v8;
      ++v7;
    }
    while (v7 != v4);
    if (__p == v8) {
      goto LABEL_30;
    }
    uint64_t v19 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    if (sub_21623F9A0(v19))
    {
      uint64_t v20 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
      sub_21623F9FC(v20, (uint64_t)__p, v22 - __p);
    }
    uint64_t v8 = __p;
    if (__p) {
LABEL_30:
    }
      operator delete(v8);
  }
}

void sub_21618C654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21618C678(uint64_t *a1, uint64_t a2, int a3)
{
  v50[3] = *MEMORY[0x263EF8340];
  uint64_t v38 = 0;
  uint64_t v39 = &v38;
  uint64_t v40 = 0x2000000000;
  uint64_t v41 = 0;
  v37[0] = MEMORY[0x263EF8330];
  v37[1] = 0x40000000;
  v37[2] = sub_21618CC38;
  v37[3] = &unk_264266B80;
  v37[4] = &v38;
  sub_216269034(a2, (uint64_t)v37);
  byte_26797CFF0[v39[3]] = 0;
  if ((*(uint64_t (**)(uint64_t *, char *))(*a1 + 72))(a1, byte_26797CFF0) == -1)
  {
    unint64_t v6 = (unsigned char *)a1[17];
    if (v6 && *v6) {
      unint64_t v7 = sub_2161E6E3C((uint64_t)v6, a2, (unsigned __int8 *)byte_26797CFF0, 2uLL);
    }
    else {
      unint64_t v7 = sub_21628FD38(a1[16], a2, (unsigned __int8 *)byte_26797CFF0, 2uLL);
    }
    v39[3] = v7;
    byte_26797CFF0[v7] = 0;
  }
  uint64_t v8 = *(__int16 **)(a2 + 8);
  if (v8 == *(__int16 **)(a2 + 16) || (__int16 v9 = *v8) == 0)
  {
    if (v39[3]) {
      LOBYTE(v9) = byte_26797CFF0[0];
    }
    else {
      LOBYTE(v9) = 0;
    }
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t *, char *))(*a1 + 72))(a1, byte_26797CFF0);
  if (v10 != -1)
  {
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*a1 + 48))(a1, byte_26797CFF0, v39[3], v10);
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, char *))(*a1 + 72))(a1, byte_26797CFF0);
    int v12 = v11;
    if (v11 != -1)
    {
      unint64_t v13 = a1[5];
      unint64_t v14 = (char *)a1[4];
      if ((unint64_t)v14 >= v13)
      {
        unint64_t v16 = (char *)a1[3];
        uint64_t v17 = (v14 - v16) >> 2;
        if ((unint64_t)(v17 + 1) >> 62) {
          sub_21610CB04();
        }
        unint64_t v18 = v13 - (void)v16;
        unint64_t v19 = (uint64_t)(v13 - (void)v16) >> 1;
        if (v19 <= v17 + 1) {
          unint64_t v19 = v17 + 1;
        }
        if (v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20)
        {
          uint64_t v21 = (char *)sub_2161129B4((uint64_t)(a1 + 5), v20);
          unint64_t v16 = (char *)a1[3];
          unint64_t v14 = (char *)a1[4];
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = &v21[4 * v17];
        uint64_t v23 = &v21[4 * v20];
        *(_DWORD *)unint64_t v22 = v12;
        uint64_t v15 = v22 + 4;
        while (v14 != v16)
        {
          int v24 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v24;
          v22 -= 4;
        }
        a1[3] = (uint64_t)v22;
        a1[4] = (uint64_t)v15;
        a1[5] = (uint64_t)v23;
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v14 = v11;
        uint64_t v15 = v14 + 4;
      }
      a1[4] = (uint64_t)v15;
      sub_2163337EC((uint64_t)(a1 + 10), a2, (char)v9);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 88))(a1, a2);
    }
  }
  if (a3)
  {
    sub_216129D20(a1 + 6);
    uint64_t v25 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    if (sub_21623F9A0(v25) && a1[3] != a1[4])
    {
      a1[9] = 0;
      uint64_t v45 = 0;
      unint64_t v46 = &v45;
      uint64_t v47 = 0x4002000000;
      unint64_t v48 = (void **)sub_21618D720;
      int64_t v49 = sub_21618D744;
      memset(v50, 0, 24);
      memset(v43, 0, sizeof(v43));
      uint64_t v26 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
      uint64_t v27 = a1[3];
      uint64_t v28 = (a1[4] - v27) >> 2;
      v42[0] = MEMORY[0x263EF8330];
      v42[1] = 0x40000000;
      v42[2] = sub_21618D770;
      v42[3] = &unk_264269270;
      v42[4] = &v45;
      v42[5] = a1;
      v42[6] = 10;
      sub_21623FC8C(v26, v27, v28, (uint64_t)v42);
      (*(void (**)(uint64_t *, void **))(*a1 + 80))(a1, v46 + 5);
      char v44 = v43;
      sub_21613F444((void ***)&v44);
      _Block_object_dispose(&v45, 8);
      v43[0] = (void **)v50;
      sub_21618F830(v43);
    }
    (*(void (**)(uint64_t *))(*a1 + 64))(a1);
    uint64_t v29 = sub_2162769A4();
    if (*v29 && (v29[9] & 0x40) != 0)
    {
      double v30 = sub_2162769A4();
      sub_216276FA0((uint64_t)v30, 0x4000u, (uint64_t)"Nbest: \n", v31, v32, v33, v34, v35, v36);
      uint64_t v45 = &unk_26C6C9408;
      unint64_t v46 = (void **)a1;
      unint64_t v48 = &v45;
      sub_21618E2CC((uint64_t)a1, 0xAuLL, (uint64_t)&v45);
      sub_21618FF18(&v45);
    }
  }
  _Block_object_dispose(&v38, 8);
}

void sub_21618CBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21618FF18((void *)(v7 - 152));
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_21618CC38(uint64_t a1, UChar32 c, unsigned char *a3)
{
  uint64_t result = u_charType(c);
  if (c != 32 && result != 15)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v8 = *(void *)(v7 + 24);
    *(void *)(v7 + 24) = v8 + 1;
    byte_26797CFF0[v8] = c;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 2) {
    *a3 = 1;
  }
  return result;
}

BOOL sub_21618CCBC(uint64_t a1, unsigned __int16 **a2, double a3)
{
  unint64_t v6 = (float *)sub_2161A1184(1u);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D000, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D000))
  {
    *(double *)&qword_26797CFF8 = v6[7];
    __cxa_guard_release(&qword_26797D000);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D010, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D010))
  {
    *(double *)&qword_26797D008 = v6[8];
    __cxa_guard_release(&qword_26797D010);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D020, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D020))
  {
    *(double *)&qword_26797D018 = v6[4];
    __cxa_guard_release(&qword_26797D020);
  }
  if (*a2 == a2[1]) {
    return 1;
  }
  if (*(double *)&qword_26797CFF8 >= a3)
  {
    double v7 = *(double *)&qword_26797D018;
    double v8 = *(double *)&qword_26797D018;
  }
  else
  {
    double v7 = v6[5];
    if (*(double *)&qword_26797D008 <= a3)
    {
      double v8 = v6[6];
    }
    else
    {
      double v7 = *(double *)&qword_26797D018
         + (a3 - *(double *)&qword_26797CFF8)
         * ((v7 - *(double *)&qword_26797D018)
          / (*(double *)&qword_26797D008 - *(double *)&qword_26797CFF8));
      double v8 = *(double *)&qword_26797D018
         + (a3 - *(double *)&qword_26797CFF8)
         * ((v6[6] - *(double *)&qword_26797D018)
          / (*(double *)&qword_26797D008 - *(double *)&qword_26797CFF8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  if (v9 == v10) {
    goto LABEL_20;
  }
  __int16 v11 = *(_WORD *)(v10 + 34);
  if ((_BYTE)v11)
  {
    int v12 = *(&off_26426EF10)[2 * **a2];
    if (v12 != v11)
    {
      if (sub_21618CFE8((unsigned __int16)(char)v11, (unsigned __int16)(char)v12, *(void *)(a1 + 128), *(unsigned char **)(a1 + 136)) > v7)return 1; {
      uint64_t v10 = *(void *)(a1 + 80);
      }
      uint64_t v9 = *(void *)(a1 + 88);
    }
  }
  if (v9 != v10)
  {
    __int16 v13 = *(_WORD *)(v9 - 6);
    if ((_BYTE)v13)
    {
      size_t v14 = strlen((&off_26426EF10)[2 * *(a2[1] - 1)]);
      if (v14)
      {
        int v15 = (&off_26426EF10)[2 * *(a2[1] - 1)][v14 - 1];
        if (v15 != v13
          && sub_21618CFE8((unsigned __int16)(char)v13, (unsigned __int16)(char)v15, *(void *)(a1 + 128), *(unsigned char **)(a1 + 136)) > v8)
        {
          return 1;
        }
      }
    }
  }
LABEL_20:
  uint64_t v17 = *a2;
  unint64_t v16 = a2[1];
  if (v17 == v16)
  {
    double v20 = 0.0;
  }
  else
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    double v20 = 0.0;
    do
    {
      uint64_t v21 = &(&off_26426EF10)[2 * *v17];
      unint64_t v22 = *v21;
      uint64_t v23 = (uint64_t)v21[1];
      if (v19) {
        double v20 = v20
      }
            + sub_21618CFE8((unsigned __int16)*v22, (unsigned __int16)v18[v19 - 1], *(void *)(a1 + 128), *(unsigned char **)(a1 + 136));
      int v24 = *(unsigned char **)(a1 + 136);
      if (v24 && *v24)
      {
        v31[0] = (uint64_t)v22;
        v31[1] = v23;
        char v32 = 0;
        double v25 = sub_2161894AC(v31, v24);
      }
      else
      {
        v29[0] = (uint64_t)v22;
        v29[1] = v23;
        char v30 = 0;
        double v25 = sub_2161893B8(v29, *(void *)(a1 + 128));
      }
      double v20 = v20 + v25;
      ++v17;
      unint64_t v18 = v22;
      uint64_t v19 = v23;
    }
    while (v17 != v16);
  }
  double v27 = vabdd_f64(a3, v20);
  double v28 = v20 * v6[3];
  if (v28 < v8) {
    double v28 = v8;
  }
  return v27 > v28;
}

double sub_21618CFE8(int a1, unsigned int a2, uint64_t a3, unsigned char *a4)
{
  if (a4 && *a4) {
    return sub_2161E6DD4((uint64_t)a4, a1, a2);
  }
  else {
    return sub_216189374(a1, a2, a3);
  }
}

void sub_21618D014(uint64_t *a1, uint64_t *a2, char a3, double a4)
{
  double v8 = sub_2162769A4();
  if (*v8) {
    int v9 = (v8[9] >> 6) & 1;
  }
  else {
    int v9 = 0;
  }
  uint64_t v10 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v64 = a1 + 6;
    double v13 = 0.0;
    int v63 = v9;
    while (1)
    {
      size_t v14 = (int **)(v10 + 32 * v12);
      int v15 = v14[1];
      if (*v14 == v15) {
        goto LABEL_55;
      }
      sub_21610FC8C(__p, v15 - *v14);
      uint64_t v17 = *v14;
      unint64_t v16 = v14[1];
      if (v16 != *v14)
      {
        unint64_t v18 = v16 - *v14;
        uint64_t v19 = __p[0];
        if (v18 <= 1) {
          unint64_t v18 = 1;
        }
        double v20 = *v14;
        do
        {
          int v21 = *v20++;
          *v19++ = v21;
          --v18;
        }
        while (v18);
      }
      if (a3)
      {
        if ((*(uint64_t (**)(uint64_t *, void **, unint64_t, double))(*a1 + 40))(a1, __p, v12, a4))
        {
          if (!v9) {
            goto LABEL_28;
          }
          unint64_t v22 = sub_21618955C((unsigned __int16 **)__p);
          v68[0] = v22;
          uint64_t v23 = sub_2162769A4();
          sub_2161E2FFC(v22, &v65);
          uint64_t v24 = v65;
          sub_216276FA0((uint64_t)v23, 0x4000u, (uint64_t)"Filtered by distance: %s, %.4f\n", v25, v26, v27, v28, v29, v65);
          if (v24) {
            MEMORY[0x2166CA7C0](v24, 0x1000C8077774924);
          }
          if (v22) {
            CFRelease(v22);
          }
          int v30 = 4;
          goto LABEL_37;
        }
        uint64_t v17 = *v14;
        unint64_t v16 = v14[1];
      }
      uint64_t v31 = (void *)a1[6];
      unint64_t v32 = v16 - v17;
      if (v31 == (void *)a1[7]) {
        break;
      }
      if (v32 < v11)
      {
        if (v9)
        {
          uint64_t v33 = sub_21618955C((unsigned __int16 **)__p);
          v68[0] = v33;
          uint64_t v34 = sub_2162769A4();
          sub_2161E2FFC(v33, &v65);
          uint64_t v35 = v65;
          sub_216276FA0((uint64_t)v34, 0x4000u, (uint64_t)"Filtered by syllable count: %s, %.4f, syllableCount = %ld, bestSyllableCount = %ld\n", v36, v37, v38, v39, v40, v65);
          int v9 = v63;
          if (v35) {
            MEMORY[0x2166CA7C0](v35, 0x1000C8077774924);
          }
          if (v33) {
            CFRelease(v33);
          }
        }
LABEL_28:
        int v30 = 4;
        goto LABEL_52;
      }
      double v41 = *(double *)(v10 + 32 * v12 + 24);
      if (v41 >= v13 - *(float *)(sub_2161A1184(1u) + 4))
      {
        uint64_t v31 = (void *)a1[7];
        goto LABEL_39;
      }
      if (v9)
      {
        uint64_t v42 = sub_21618955C((unsigned __int16 **)__p);
        v68[0] = v42;
        uint64_t v43 = sub_2162769A4();
        sub_2161E2FFC(v42, &v65);
        uint64_t v44 = v65;
        sub_216276FA0((uint64_t)v43, 0x4000u, (uint64_t)"Filtered by score margin: %s, score = %.4f, bestcore = %.4f\n", v45, v46, v47, v48, v49, v65);
        if (v44) {
          MEMORY[0x2166CA7C0](v44, 0x1000C8077774924);
        }
        if (v42) {
          CFRelease(v42);
        }
        int v30 = 2;
LABEL_37:
        int v9 = v63;
        goto LABEL_52;
      }
      int v30 = 2;
LABEL_52:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((v30 | 4) != 4) {
        return;
      }
LABEL_55:
      ++v12;
      uint64_t v10 = *a2;
      if (v12 >= (a2[1] - *a2) >> 5) {
        return;
      }
    }
    double v13 = *(double *)(v10 + 32 * v12 + 24);
    unint64_t v11 = v32;
LABEL_39:
    unint64_t v50 = a1[8];
    if (a1[9] <= (unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 1)) {
      int64_t v51 = ((char *)__p[1] - (char *)__p[0]) >> 1;
    }
    else {
      int64_t v51 = a1[9];
    }
    a1[9] = v51;
    double v52 = (uint64_t *)(v10 + 32 * v12 + 24);
    if ((unint64_t)v31 >= v50)
    {
      uint64_t v55 = ((uint64_t)v31 - *v64) >> 5;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 59) {
        sub_21610CB04();
      }
      uint64_t v57 = v50 - *v64;
      if (v57 >> 4 > v56) {
        unint64_t v56 = v57 >> 4;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v58 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      v68[4] = a1 + 8;
      unint64_t v59 = (char *)sub_216115A58((uint64_t)(a1 + 8), v58);
      uint64_t v60 = &v59[32 * v55];
      v68[0] = v59;
      v68[1] = v60;
      v68[3] = &v59[32 * v61];
      uint64_t v62 = *v52;
      *(void *)uint64_t v60 = 0;
      *((void *)v60 + 1) = 0;
      *((void *)v60 + 2) = 0;
      *(_OWORD *)uint64_t v60 = *(_OWORD *)__p;
      *((void *)v60 + 2) = v67;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v67 = 0;
      *((void *)v60 + 3) = v62;
      _OWORD v68[2] = v60 + 32;
      sub_21618E840(v64, v68);
      unint64_t v54 = (void *)a1[7];
      sub_2161415B8((uint64_t)v68);
    }
    else
    {
      uint64_t v53 = *v52;
      *uint64_t v31 = 0;
      v31[1] = 0;
      uint64_t v31[2] = 0;
      *(_OWORD *)uint64_t v31 = *(_OWORD *)__p;
      uint64_t v31[2] = v67;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v67 = 0;
      v31[3] = v53;
      unint64_t v54 = v31 + 4;
      a1[7] = (uint64_t)(v31 + 4);
    }
    int v30 = 0;
    a1[7] = (uint64_t)v54;
    goto LABEL_52;
  }
}

void sub_21618D488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
  if (v21) {
    MEMORY[0x2166CA7C0](v21, 0x1000C8077774924);
  }
  sub_2161868BC(&a21, 0);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_21618D52C(void *a1, const void *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_21610FD04(a1, a3);
    unint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 2 * a3);
    a1[1] = &v6[2 * a3];
  }
  return a1;
}

void sub_21618D594(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21618D5B0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v8 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  int v9 = *(void **)(result - 8);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v12 = ((uint64_t)v9 - *a1) >> 5;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v14 = v7 - *a1;
    if (v14 >> 4 > v13) {
      unint64_t v13 = v14 >> 4;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    v20[4] = result;
    unint64_t v16 = (char *)sub_216115A58(result, v15);
    uint64_t v17 = &v16[32 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[32 * v18];
    uint64_t v19 = *a3;
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = 0;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
    *((void *)v17 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + ++**(_DWORD **)(result + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *((void *)v17 + 3) = v19;
    v20[2] = v17 + 32;
    sub_21618E840(a1, v20);
    unint64_t v11 = (void *)a1[1];
    uint64_t result = sub_2161415B8((uint64_t)v20);
  }
  else
  {
    uint64_t v10 = *a3;
    *int v9 = 0;
    v9[1] = 0;
    void v9[2] = 0;
    *(_OWORD *)int v9 = *(_OWORD *)a2;
    void v9[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + ++**(_DWORD **)(result + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v9[3] = v10;
    unint64_t v11 = v9 + 4;
    a1[1] = (uint64_t)(v9 + 4);
  }
  a1[1] = (uint64_t)v11;
  return result;
}

void sub_21618D6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161415B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_21618D6E8(void **a1)
{
  uint64_t v3 = a1;
  sub_21613F444(&v3);
  return a1;
}

__n128 sub_21618D720(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4++**(_DWORD **)(result + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_21618D744(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_21618F830(&v1);
}

void sub_21618D770(void *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = a1[5];
  unint64_t v7 = *(void **)(a1[4] + 8);
  unint64_t v8 = (char *)v7[6];
  unint64_t v9 = v7[7];
  if ((unint64_t)v8 >= v9)
  {
    unint64_t v11 = (char *)v7[5];
    uint64_t v12 = (v8 - v11) >> 5;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59) {
      sub_21610CB04();
    }
    if ((uint64_t)(v9 - (void)v11) >> 4 > v13) {
      unint64_t v13 = (uint64_t)(v9 - (void)v11) >> 4;
    }
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    int v30 = v7 + 7;
    if (v14)
    {
      if (v14 >> 59) {
        sub_2160FFA74();
      }
      unint64_t v15 = (char *)operator new(32 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[32 * v12];
    uint64_t v17 = &v15[32 * v14];
    *(_OWORD *)unint64_t v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    uint64_t v10 = v16 + 32;
    v28.i64[1] = (uint64_t)(v16 + 32);
    uint64_t v29 = v17;
    if (v8 == v11)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v8);
    }
    else
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = &v16[v18];
        double v20 = &v8[v18];
        *((void *)v19 - 3) = 0;
        *((void *)v19 - 2) = 0;
        *((_OWORD *)v19 - 2) = *(_OWORD *)&v8[v18 - 32];
        *((void *)v19 - 2) = *(void *)&v8[v18 - 16];
        *((void *)v20 - 4) = 0;
        *((void *)v20 - 3) = 0;
        *((void *)v20 - 2) = 0;
        *((void *)v19 - 1) = *(void *)&v8[v18 - 8];
        v18 -= 32;
      }
      while (&v8[v18] != v11);
      int64x2_t v21 = *(int64x2_t *)(v7 + 5);
      unint64_t v9 = v7[7];
      v16 += v18;
      uint64_t v10 = (_OWORD *)v28.i64[1];
      uint64_t v17 = v29;
    }
    void v7[5] = v16;
    void v7[6] = v10;
    int64x2_t v28 = v21;
    v7[7] = v17;
    uint64_t v29 = (char *)v9;
    uint64_t v27 = v21.i64[0];
    sub_21618F8C0((uint64_t)&v27);
  }
  else
  {
    *(_OWORD *)unint64_t v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    uint64_t v10 = v8 + 32;
    void v7[6] = v8 + 32;
  }
  void v7[6] = v10;
  uint64_t v22 = *(void *)(*(void *)(a1[4] + 8) + 48);
  uint64_t v27 = 0;
  v28.i64[0] = (uint64_t)&v27;
  v28.i64[1] = 0x2000000000;
  uint64_t v29 = (char *)(v22 - 32);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 0x40000000;
  v26[2] = sub_21618DA10;
  void v26[3] = &unk_264269248;
  v26[4] = &v27;
  sub_21623FDE8(v23, a2, (uint64_t)v26);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
  sub_21623FF08(v24, a2);
  *(double *)(v22 - ++**(_DWORD **)(result + 8) = logf(v25);
  if (a1[6] <= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1[4] + 8) + 48)
                                           - *(void *)(*(void *)(a1[4] + 8) + 40)) >> 5))
    *a3 = 1;
  _Block_object_dispose(&v27, 8);
}

void sub_21618D9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21618DA10(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  unint64_t v4 = *(_DWORD **)(v3 + 8);
  unint64_t v5 = *(void *)(v3 + 16);
  if ((unint64_t)v4 >= v5)
  {
    unint64_t v7 = *(_DWORD **)v3;
    uint64_t v8 = ((uint64_t)v4 - *(void *)v3) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_21610CB04();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = (char *)sub_2161129B4(v3 + 16, v11);
      unint64_t v7 = *(_DWORD **)v3;
      unint64_t v4 = *(_DWORD **)(v3 + 8);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v13 = &v12[4 * v8];
    unint64_t v14 = &v12[4 * v11];
    *(_DWORD *)unint64_t v13 = a2;
    uint64_t v6 = v13 + 4;
    while (v4 != v7)
    {
      int v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + ++**(_DWORD **)(result + 8) = v6;
    *(void *)(v3 + 16) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *unint64_t v4 = a2;
    uint64_t v6 = v4 + 1;
  }
  *(void *)(v3 + ++**(_DWORD **)(result + 8) = v6;
}

void sub_21618DAF8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[10];
  uint64_t v4 = a1[11];
  if (v4 == v5) {
    double v6 = 0.0;
  }
  else {
    double v6 = *(double *)(v4 - 16) - *(double *)(v5 + 24);
  }
  sub_21618D014(a1, a2, 1, v6);
  unint64_t v7 = (unsigned __int16 **)a1[6];
  uint64_t v8 = a1[7];
  unint64_t v9 = a1 + 6;
  if (v7 == (unsigned __int16 **)v8)
  {
    sub_21618D014(a1, a2, 0, v6);
    unint64_t v7 = (unsigned __int16 **)a1[6];
    uint64_t v8 = a1[7];
  }
  if (v7 == (unsigned __int16 **)v8) {
    goto LABEL_76;
  }
  unint64_t v11 = *v7;
  uint64_t v10 = v7[1];
  if ((unint64_t)((char *)v10 - (char *)*v7) > 4) {
    goto LABEL_76;
  }
  memset(&v69, 0, sizeof(v69));
  if (v11 == v10) {
    goto LABEL_74;
  }
  do
  {
    uint64_t v12 = &(&off_26426EF10)[2 * *v11];
    size_t v13 = (size_t)v12[1];
    if (v13 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21610A714();
    }
    unint64_t v14 = *v12;
    if (v13 >= 0x17)
    {
      uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v16 = v13 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (uint64_t **)operator new(v16 + 1);
      uint64_t v67 = (_WORD *)v13;
      int64_t v68 = v17 | 0x8000000000000000;
      long long __dst = (uint64_t *)p_dst;
LABEL_16:
      memmove(p_dst, v14, v13);
      goto LABEL_17;
    }
    HIBYTE(v6++**(_DWORD **)(result + 8) = v12[1];
    p_dst = &__dst;
    if (v13) {
      goto LABEL_16;
    }
LABEL_17:
    *((unsigned char *)p_dst + v13) = 0;
    if (v68 >= 0) {
      uint64_t v18 = (const std::string::value_type *)&__dst;
    }
    else {
      uint64_t v18 = (const std::string::value_type *)__dst;
    }
    if (v68 >= 0) {
      std::string::size_type v19 = HIBYTE(v68);
    }
    else {
      std::string::size_type v19 = (std::string::size_type)v67;
    }
    std::string::append(&v69, v18, v19);
    if (SHIBYTE(v68) < 0) {
      operator delete(__dst);
    }
    ++v11;
  }
  while (v11 != v10);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  unint64_t v9 = a1 + 6;
  if (!size) {
    goto LABEL_74;
  }
  uint64_t v21 = 0;
  char v63 = 0;
  double v22 = *(double *)(a1[6] + 24) + -1.0;
  unint64_t v23 = 1;
  unint64_t v64 = size;
  while (2)
  {
    uint64_t v24 = (unsigned __int16 ***)a1[2];
    float v25 = **v24;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v69;
    }
    else {
      uint64_t v26 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    uint64_t v27 = **v24;
    if (v23)
    {
      uint64_t v27 = **v24;
      if (v25)
      {
        unint64_t v28 = 0;
        uint64_t v27 = **v24;
        do
        {
          uint64_t v27 = sub_21632279C((uint64_t)v24, v27, v26->__r_.__value_.__s.__data_[v28++]);
          if (v27) {
            BOOL v29 = v28 >= v23;
          }
          else {
            BOOL v29 = 1;
          }
        }
        while (!v29);
      }
    }
    if (v27 && (v27[4] & 2) != 0)
    {
      unsigned __int16 v30 = v27[1];
      uint64_t v31 = (uint64_t *)operator new(2uLL);
      *(_WORD *)uint64_t v31 = v30;
      unint64_t v32 = (char *)v31 + 2;
      uint64_t v67 = (_WORD *)v31 + 1;
      int64_t v68 = (int64_t)v31 + 2;
      long long __dst = v31;
      if (v64 <= v23)
      {
        unint64_t v9 = a1 + 6;
        goto LABEL_56;
      }
      if (!v25) {
        goto LABEL_65;
      }
      uint64_t v33 = (char *)v26 + v21;
      unint64_t v34 = 1;
      do
      {
        uint64_t v35 = sub_21632279C((uint64_t)v24, v25, v33[v34]);
        float v25 = v35;
        if (v35) {
          BOOL v36 = v34 >= v64 - v23;
        }
        else {
          BOOL v36 = 1;
        }
        ++v34;
      }
      while (!v36);
      if (v35)
      {
        unint64_t v9 = a1 + 6;
        if ((v35[4] & 2) != 0)
        {
          uint64_t v37 = (uint64_t *)operator new(4uLL);
          *((_WORD *)v37 + 1) = v25[1];
          *(_WORD *)uint64_t v37 = v30;
          unint64_t v32 = (char *)v37 + 4;
          long long __dst = v37;
          int64_t v68 = (int64_t)v37 + 4;
          operator delete(v31);
          uint64_t v67 = (_WORD *)v37 + 2;
          uint64_t v31 = v37;
LABEL_56:
          uint64_t v38 = a1[6];
          uint64_t v39 = a1[7];
          uint64_t v40 = v32 - (char *)v31;
          while (v38 != v39)
          {
            if (*(void *)(v38 + 8) - *(void *)v38 == v40 && !memcmp(*(const void **)v38, v31, v32 - (char *)v31)) {
              goto LABEL_66;
            }
            v38 += 32;
          }
          if (v40 >> 1 > (unint64_t)a1[9]) {
            a1[9] = v40 >> 1;
          }
          double v65 = v22;
          sub_21618D5B0(v9, (uint64_t)&__dst, (uint64_t *)&v65);
          uint64_t v31 = __dst;
          char v63 = 1;
          if (!__dst)
          {
LABEL_67:
            std::string::size_type size = v64;
            goto LABEL_68;
          }
        }
      }
      else
      {
LABEL_65:
        unint64_t v9 = a1 + 6;
      }
LABEL_66:
      uint64_t v67 = v31;
      operator delete(v31);
      goto LABEL_67;
    }
LABEL_68:
    ++v23;
    ++v21;
    if (v23 <= size) {
      continue;
    }
    break;
  }
  if (v63)
  {
    double v41 = (__n128 *)a1[6];
    uint64_t v42 = (__n128 *)a1[7];
    unint64_t v43 = 126 - 2 * __clz(((char *)v42 - (char *)v41) >> 5);
    if (v42 == v41) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = v43;
    }
    sub_21618E99C(v41, v42, v44, 1);
  }
LABEL_74:
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
LABEL_76:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D028, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D028))
  {
    LODWORD(v69.__r_.__value_.__l.__data_) = 27984296;
    WORD2(v69.__r_.__value_.__r.__words[0]) = 428;
    sub_21618FA28((uint64_t)qword_26797D050, (unsigned __int16 *)&v69, 3);
    __cxa_atexit((void (*)(void *))sub_21618D6E4, qword_26797D050, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D028);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D030, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D030))
  {
    unint64_t v58 = operator new(2uLL);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    *unint64_t v58 = 163;
    v69.__r_.__value_.__l.__size_ = (std::string::size_type)(v58 + 1);
    v69.__r_.__value_.__r.__words[2] = (std::string::size_type)(v58 + 1);
    uint64_t v70 = 0;
    unint64_t v71 = 0;
    uint64_t v72 = 0;
    unint64_t v59 = operator new(4uLL);
    uint64_t v70 = v59;
    *unint64_t v59 = 29425826;
    unint64_t v71 = v59 + 1;
    uint64_t v72 = v59 + 1;
    unint64_t v73 = 0;
    int v74 = 0;
    uint64_t v75 = 0;
    uint64_t v60 = operator new(4uLL);
    unint64_t v73 = v60;
    *uint64_t v60 = 29425830;
    int v74 = v60 + 1;
    uint64_t v75 = v60 + 1;
    qword_26797D040 = 0;
    qword_26797D048 = 0;
    qword_26797D038 = 0;
    long long __dst = &qword_26797D038;
    LOBYTE(v67) = 0;
    qword_26797D038 = (uint64_t)operator new(0x48uLL);
    qword_26797D040 = qword_26797D038;
    qword_26797D048 = qword_26797D038 + 72;
    uint64_t v61 = 0;
    qword_26797D040 = (uint64_t)sub_21618F744((uint64_t)&qword_26797D048, (uint64_t)&v69, (uint64_t)&v76, (void *)qword_26797D038);
    do
    {
      uint64_t v62 = (&v73)[v61];
      if (v62)
      {
        (&v74)[v61] = v62;
        operator delete(v62);
      }
      v61 -= 3;
    }
    while (v61 != -9);
    __cxa_atexit((void (*)(void *))sub_21618D6E8, &qword_26797D038, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D030);
  }
  uint64_t v45 = a1[6];
  if (v45 != a1[7] && *(void *)(v45 + 8) - *(void *)v45 == 2)
  {
    if (sub_21618FCC0(qword_26797D050, *(unsigned __int16 **)v45))
    {
      uint64_t v46 = qword_26797D038;
      uint64_t v47 = qword_26797D040;
      if (qword_26797D038 != qword_26797D040)
      {
        char v48 = 0;
        double v49 = *(double *)(a1[6] + 24) + -1.5;
        do
        {
          memset(&v69, 0, sizeof(v69));
          sub_216182F50(&v69, *(const void **)v46, *(void *)(v46 + 8), (uint64_t)(*(void *)(v46 + 8) - *(void *)v46) >> 1);
          uint64_t v50 = a1[6];
          uint64_t v51 = a1[7];
          double v52 = (void *)v69.__r_.__value_.__r.__words[0];
          int64_t v53 = v69.__r_.__value_.__l.__size_ - v69.__r_.__value_.__r.__words[0];
          while (v50 != v51)
          {
            if (*(void *)(v50 + 8) - *(void *)v50 == v53 && !memcmp(*(const void **)v50, v52, v53)) {
              goto LABEL_91;
            }
            v50 += 32;
          }
          if (v53 >> 1 > (unint64_t)a1[9]) {
            a1[9] = v53 >> 1;
          }
          long long __dst = *(uint64_t **)&v49;
          sub_21618D5B0(v9, (uint64_t)&v69, (uint64_t *)&__dst);
          char v48 = 1;
          double v52 = (void *)v69.__r_.__value_.__r.__words[0];
LABEL_91:
          if (v52)
          {
            v69.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
            operator delete(v52);
          }
          v46 += 24;
        }
        while (v46 != v47);
        if (v48)
        {
          unint64_t v54 = (__n128 *)a1[6];
          uint64_t v55 = (__n128 *)a1[7];
          unint64_t v56 = 126 - 2 * __clz(((char *)v55 - (char *)v54) >> 5);
          if (v55 == v54) {
            uint64_t v57 = 0;
          }
          else {
            uint64_t v57 = v56;
          }
          sub_21618E99C(v54, v55, v57, 1);
        }
      }
    }
  }
}

void sub_21618E1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  qword_26797D040 = v29;
  sub_21613F444((void ***)&a13);
  uint64_t v31 = 0;
  while (1)
  {
    unint64_t v32 = *(void **)((char *)&a28 + v31);
    if (v32)
    {
      *(uint64_t *)((char *)&a29 + v31) = (uint64_t)v32;
      operator delete(v32);
    }
    v31 -= 24;
    if (v31 == -72)
    {
      __cxa_guard_abort(&qword_26797D030);
      _Unwind_Resume(a1);
    }
  }
}

void sub_21618E2CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3 != v4)
  {
    unint64_t v7 = 1;
    do
    {
      uint64_t v8 = sub_21618955C((unsigned __int16 **)v3);
      sub_21618E37C(a3, 0, (uint64_t)v8, *(double *)(v3 + 24));
      if (v8) {
        CFRelease(v8);
      }
      if (v7 > a2) {
        break;
      }
      v3 += 32;
      ++v7;
    }
    while (v3 != v4);
  }
}

void sub_21618E364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21618E37C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = a2;
  uint64_t v7 = a3;
  double v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, double *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_21618E3E0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v8 = *(char **)(a1 + 48);
  uint64_t v7 = *(char **)(a1 + 56);
  double v6 = (uint64_t *)(a1 + 48);
  if (v7 != v8)
  {
    unint64_t v9 = (v7 - v8) >> 5;
    do
    {
      unint64_t v10 = v9 >> 1;
      unint64_t v11 = &v8[32 * (v9 >> 1)];
      double v12 = *((double *)v11 + 3);
      size_t v13 = v11 + 32;
      v9 += ~(v9 >> 1);
      if (v12 > *(double *)(a2 + 24)) {
        uint64_t v8 = v13;
      }
      else {
        unint64_t v9 = v10;
      }
    }
    while (v9);
    uint64_t v7 = v8;
  }
  sub_21618E478(v6, v7, a2);
  uint64_t v14 = *(void *)(a1 + 56);
  if (a3 <= (v14 - *(void *)(a1 + 48)) >> 5)
  {
    uint64_t v16 = v14 - 32;
    int v15 = *(void **)(v14 - 32);
    if (v15)
    {
      *(void *)(v14 - 24) = v15;
      operator delete(v15);
    }
    *(void *)(a1 + 56) = v16;
  }
}

char *sub_21618E478(uint64_t *a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (char *)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  uint64_t v9 = v8 >> 5;
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - v7) >> 5) + 1;
    if (v16 >> 59) {
      sub_21610CB04();
    }
    uint64_t v17 = v10 - v7;
    if (v17 >> 4 > v16) {
      unint64_t v16 = v17 >> 4;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    double v41 = a1 + 2;
    if (v18) {
      std::string::size_type v19 = (char *)sub_216115A58((uint64_t)(a1 + 2), v18);
    }
    else {
      std::string::size_type v19 = 0;
    }
    double v20 = &v19[32 * v9];
    uint64_t v38 = v19;
    *(void *)&long long v39 = v20;
    *((void *)&v39 + 1) = v20;
    uint64_t v40 = &v19[32 * v18];
    if (v9 == v18)
    {
      if (v8 < 1)
      {
        if ((char *)v7 == v4) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v8 >> 4;
        }
        uint64_t v45 = v11;
        uint64_t v24 = (char *)sub_216115A58(v11, v23);
        uint64_t v26 = v39;
        if (*((void *)&v39 + 1) == (void)v39)
        {
          int64x2_t v29 = vdupq_n_s64(v39);
          uint64_t v27 = (uint64_t)&v24[32 * (v23 >> 2)];
        }
        else
        {
          uint64_t v27 = (uint64_t)&v24[32 * (v23 >> 2) + *((void *)&v39 + 1) - v39];
          unint64_t v28 = &v24[32 * (v23 >> 2)];
          do
          {
            *(void *)unint64_t v28 = 0;
            *((void *)v28 + 1) = 0;
            *((void *)v28 + 2) = 0;
            *(_OWORD *)unint64_t v28 = *(_OWORD *)v26;
            *((void *)v28 + 2) = *(void *)(v26 + 16);
            *(void *)uint64_t v26 = 0;
            *(void *)(v26 + ++**(_DWORD **)(result + 8) = 0;
            *(void *)(v26 + 16) = 0;
            *((void *)v28 + 3) = *(void *)(v26 + 24);
            v28 += 32;
            v26 += 32;
          }
          while (v28 != (char *)v27);
          int64x2_t v29 = (int64x2_t)v39;
        }
        unsigned __int16 v30 = v40;
        uint64_t v42 = v38;
        uint64_t v38 = v24;
        *(void *)&long long v39 = &v24[32 * (v23 >> 2)];
        int64x2_t v43 = v29;
        *((void *)&v39 + 1) = v27;
        uint64_t v40 = &v24[32 * v25];
        uint64_t v44 = v30;
        sub_2161415B8((uint64_t)&v42);
        double v20 = (char *)*((void *)&v39 + 1);
      }
      else
      {
        unint64_t v21 = v9 + 2;
        if (v9 >= -1) {
          unint64_t v21 = v9 + 1;
        }
        v20 -= 32 * (v21 >> 1);
        *(void *)&long long v39 = v20;
        *((void *)&v39 + 1) = v20;
      }
    }
    *(void *)double v20 = 0;
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = 0;
    sub_216182F50(v20, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 1);
    *((void *)v20 + 3) = *(void *)(v3 + 24);
    uint64_t v31 = v39;
    *((void *)&v39 + 1) += 32;
    sub_21618E8B8(v11, (uint64_t)v4, v4, *a1, (void *)*a1, v39, v39);
    *(void *)&long long v39 = v32;
    uint64_t v33 = (char *)a1[1];
    unint64_t v34 = (void *)*((void *)&v39 + 1);
    if (v33 != v4)
    {
      do
      {
        *unint64_t v34 = 0;
        v34[1] = 0;
        v34[2] = 0;
        *(_OWORD *)unint64_t v34 = *(_OWORD *)v4;
        v34[2] = *((void *)v4 + 2);
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        v34[3] = *((void *)v4 + 3);
        v34 += 4;
        v4 += 32;
      }
      while (v4 != v33);
      uint64_t v32 = v39;
      uint64_t v4 = (char *)a1[1];
    }
    uint64_t v35 = *a1;
    *a1 = v32;
    a1[1] = (uint64_t)v34;
    uint64_t v36 = a1[2];
    a1[2] = (uint64_t)v40;
    *((void *)&v39 + 1) = v4;
    uint64_t v40 = (char *)v36;
    uint64_t v38 = (char *)v35;
    *(void *)&long long v39 = v35;
    sub_2161415B8((uint64_t)&v38);
    return (char *)v31;
  }
  else if (a2 == (void *)v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_216182F50(a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1);
    *(void *)(v7 + 32 * v9 + 24) = *(void *)(v3 + 24);
    a1[1] = (uint64_t)(v4 + 32);
  }
  else
  {
    double v12 = a2 + 4;
    uint64_t v13 = v6 - 32;
    if (v6 < 0x20)
    {
      int v15 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = v6 - 32;
      int v15 = (void *)a1[1];
      do
      {
        void *v15 = 0;
        v15[1] = 0;
        void v15[2] = 0;
        *(_OWORD *)int v15 = *(_OWORD *)v14;
        void v15[2] = *(void *)(v14 + 16);
        *(void *)unint64_t v14 = 0;
        *(void *)(v14 + ++**(_DWORD **)(result + 8) = 0;
        *(void *)(v14 + 16) = 0;
        v15[3] = *(void *)(v14 + 24);
        v15 += 4;
        v14 += 32;
      }
      while (v14 < v6);
    }
    a1[1] = (uint64_t)v15;
    if ((void *)v6 != v12)
    {
      uint64_t v22 = 32 * ((uint64_t)(v6 - (void)v12) >> 5);
      do
      {
        sub_2161254AC(v13, (__n128 *)&v4[v22 - 32]);
        *(void *)(v13 + 24) = *(void *)&v4[v22 - 8];
        v13 -= 32;
        v22 -= 32;
      }
      while (v22);
    }
    if ((unint64_t)v4 <= v3) {
      v3 += 32 * (a1[1] > v3);
    }
    if (v4 != (char *)v3) {
      sub_21618F924(v4, *(char **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 1);
    }
    *(void *)(v7 + 32 * v9 + 24) = *(void *)(v3 + 24);
  }
  return v4;
}

void sub_21618E7FC(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + ++**(_DWORD **)(result + 8) = v1;
  _Unwind_Resume(exception_object);
}

BOOL sub_21618E824(uint64_t a1)
{
  return *(void *)(a1 + 24) == *(void *)(a1 + 32);
}

uint64_t sub_21618E840(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21618E8B8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21618E8B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  std::string v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *((_OWORD *)a3 - 2);
      a3 -= 4;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = a3[2];
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      *(void *)(v7 - ++**(_DWORD **)(result + 8) = a3[3];
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_21618E964((uint64_t)v11);
  return v9;
}

uint64_t sub_21618E964(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216141570(a1);
  }
  return a1;
}

void sub_21618E99C(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v10 = a1;
  uint64_t v101 = (uint64_t)&a1[2];
  uint64_t v11 = (uint64_t)&a1[4];
  while (1)
  {
    uint64_t v12 = (char *)a2 - (char *)v10;
    uint64_t v13 = ((char *)a2 - (char *)v10) >> 5;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (a2[-1].n128_f64[1] > v10[1].n128_f64[1])
          {
            sub_21618F2A0((uint64_t)v10, a2 - 2);
          }
          break;
        case 3:
          sub_21618F320((uint64_t)v10, v10 + 2, a2 - 2);
          break;
        case 4:
          sub_21618F5C8((uint64_t)v10, v10 + 2, v10 + 4, a2 - 2);
          break;
        case 5:
          sub_21618F670((uint64_t)v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 767) {
      break;
    }
    if (!a3)
    {
      if (v10 != a2)
      {
        int64_t v62 = (unint64_t)(v13 - 2) >> 1;
        int64_t v63 = v62;
        do
        {
          int64_t v64 = v63;
          if (v62 >= v63)
          {
            uint64_t v65 = (2 * v63) | 1;
            uint64_t v66 = &v10[2 * v65];
            if (2 * v64 + 2 < v13 && v66[1].n128_f64[1] > v66[3].n128_f64[1])
            {
              v66 += 2;
              uint64_t v65 = 2 * v64 + 2;
            }
            double v67 = v10[2 * v64 + 1].n128_f64[1];
            if (v66[1].n128_f64[1] <= v67)
            {
              int64_t v68 = &v10[2 * v64];
              __n128 v106 = *v68;
              unint64_t v69 = v68[1].n128_u64[0];
              v68->n128_u64[1] = 0;
              v68[1].n128_u64[0] = 0;
              v68->n128_u64[0] = 0;
              do
              {
                uint64_t v70 = (uint64_t)v68;
                int64_t v68 = v66;
                sub_2161254AC(v70, v66);
                *(void *)(v70 + 24) = v68[1].n128_u64[1];
                if (v62 < v65) {
                  break;
                }
                uint64_t v71 = 2 * v65;
                uint64_t v65 = (2 * v65) | 1;
                uint64_t v66 = &v10[2 * v65];
                uint64_t v72 = v71 + 2;
                if (v72 < v13 && v66[1].n128_f64[1] > v66[3].n128_f64[1])
                {
                  v66 += 2;
                  uint64_t v65 = v72;
                }
              }
              while (v66[1].n128_f64[1] <= v67);
              unint64_t v73 = (void *)v68->n128_u64[0];
              if (v68->n128_u64[0])
              {
                v68->n128_u64[1] = (unint64_t)v73;
                operator delete(v73);
              }
              *int64_t v68 = v106;
              v68[1].n128_u64[0] = v69;
              v68[1].n128_f64[1] = v67;
            }
          }
          int64_t v63 = v64 - 1;
        }
        while (v64);
        uint64_t v74 = (unint64_t)v12 >> 5;
        do
        {
          if (v74 >= 2)
          {
            uint64_t v75 = 0;
            unint64_t v76 = v10->n128_u64[0];
            unint64_t v77 = v10->n128_u64[1];
            unint64_t v78 = v10[1].n128_u64[0];
            v10->n128_u64[1] = 0;
            v10[1].n128_u64[0] = 0;
            v10->n128_u64[0] = 0;
            uint64_t v79 = v10;
            unint64_t v80 = v10[1].n128_u64[1];
            do
            {
              uint64_t v81 = (uint64_t)v79;
              v79 += 2 * v75 + 2;
              uint64_t v82 = 2 * v75;
              uint64_t v75 = (2 * v75) | 1;
              uint64_t v83 = v82 + 2;
              if (v83 < v74 && v79[1].n128_f64[1] > v79[3].n128_f64[1])
              {
                v79 += 2;
                uint64_t v75 = v83;
              }
              sub_2161254AC(v81, v79);
              *(void *)(v81 + 24) = v79[1].n128_u64[1];
            }
            while (v75 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
            if (v79 == &a2[-2])
            {
              char v91 = (void *)v79->n128_u64[0];
              if (v79->n128_u64[0])
              {
                v79->n128_u64[1] = (unint64_t)v91;
                operator delete(v91);
              }
              v79->n128_u64[0] = v76;
              v79->n128_u64[1] = v77;
              v79[1].n128_u64[0] = v78;
              v79[1].n128_u64[1] = v80;
            }
            else
            {
              sub_2161254AC((uint64_t)v79, a2 - 2);
              v79[1].n128_u64[1] = a2[-1].n128_u64[1];
              uint64_t v84 = (void *)a2[-2].n128_u64[0];
              if (v84)
              {
                a2[-2].n128_u64[1] = (unint64_t)v84;
                operator delete(v84);
              }
              a2[-2].n128_u64[0] = v76;
              a2[-2].n128_u64[1] = v77;
              a2[-1].n128_u64[0] = v78;
              a2[-1].n128_u64[1] = v80;
              uint64_t v85 = (char *)&v79[2] - (char *)v10;
              if (v85 >= 33)
              {
                unint64_t v86 = (((unint64_t)v85 >> 5) - 2) >> 1;
                double v87 = v79[1].n128_f64[1];
                if (v10[2 * v86 + 1].n128_f64[1] > v87)
                {
                  __n128 v107 = *v79;
                  unint64_t v88 = v79[1].n128_u64[0];
                  v79->n128_u64[1] = 0;
                  v79[1].n128_u64[0] = 0;
                  v79->n128_u64[0] = 0;
                  do
                  {
                    uint64_t v89 = (uint64_t)v79;
                    uint64_t v79 = &v10[2 * v86];
                    sub_2161254AC(v89, v79);
                    *(void *)(v89 + 24) = v79[1].n128_u64[1];
                    if (!v86) {
                      break;
                    }
                    unint64_t v86 = (v86 - 1) >> 1;
                  }
                  while (v10[2 * v86 + 1].n128_f64[1] > v87);
                  int64_t v90 = (void *)v79->n128_u64[0];
                  if (v79->n128_u64[0])
                  {
                    v79->n128_u64[1] = (unint64_t)v90;
                    operator delete(v90);
                  }
                  __n128 *v79 = v107;
                  v79[1].n128_u64[0] = v88;
                  v79[1].n128_f64[1] = v87;
                }
              }
            }
          }
          a2 -= 2;
        }
        while ((unint64_t)v74-- > 2);
      }
      return;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    int v15 = &v10[2 * ((unint64_t)v13 >> 1)];
    unint64_t v16 = a2 - 2;
    if ((unint64_t)v12 <= 0x1000)
    {
      sub_21618F320((uint64_t)v15, v10, v16);
    }
    else
    {
      sub_21618F320((uint64_t)v10, v15, v16);
      sub_21618F320(v101, v15 - 2, a2 - 4);
      sub_21618F320(v11, v15 + 2, a2 - 6);
      sub_21618F320((uint64_t)&v15[-2], v15, v15 + 2);
      __n128 v102 = *v10;
      unint64_t v17 = v10[1].n128_u64[0];
      v10->n128_u64[1] = 0;
      v10[1].n128_u64[0] = 0;
      v10->n128_u64[0] = 0;
      unint64_t v18 = v10[1].n128_u64[1];
      sub_2161254AC((uint64_t)v10, v15);
      std::string::size_type v19 = &v10[2 * v14 + 1].n128_u64[1];
      v10[1].n128_u64[1] = *v19;
      double v20 = (void *)v15->n128_u64[0];
      if (v15->n128_u64[0])
      {
        v15->n128_u64[1] = (unint64_t)v20;
        operator delete(v20);
      }
      __n128 *v15 = v102;
      v15[1].n128_u64[0] = v17;
      *std::string::size_type v19 = v18;
    }
    --a3;
    if (a4)
    {
      double v21 = v10[1].n128_f64[1];
    }
    else
    {
      double v21 = v10[1].n128_f64[1];
      if (v10[-1].n128_f64[1] <= v21)
      {
        __n128 v37 = *v10;
        unint64_t v38 = v10[1].n128_u64[0];
        v10->n128_u64[1] = 0;
        v10[1].n128_u64[0] = 0;
        v10->n128_u64[0] = 0;
        if (v21 <= a2[-1].n128_f64[1])
        {
          double v41 = v10 + 2;
          do
          {
            a1 = v41;
            if (v41 >= a2) {
              break;
            }
            double v42 = v41[1].n128_f64[1];
            v41 += 2;
          }
          while (v21 <= v42);
        }
        else
        {
          long long v39 = v10;
          do
          {
            a1 = v39 + 2;
            double v40 = v39[3].n128_f64[1];
            v39 += 2;
          }
          while (v21 <= v40);
        }
        int64x2_t v43 = a2;
        if (a1 < a2)
        {
          uint64_t v44 = a2;
          do
          {
            int64x2_t v43 = v44 - 2;
            double v45 = v44[-1].n128_f64[1];
            v44 -= 2;
          }
          while (v21 > v45);
        }
        __n128 v104 = v37;
        while (a1 < v43)
        {
          sub_21618F2A0((uint64_t)a1, v43);
          do
          {
            double v46 = a1[3].n128_f64[1];
            a1 += 2;
          }
          while (v21 <= v46);
          do
          {
            double v47 = v43[-1].n128_f64[1];
            v43 -= 2;
          }
          while (v21 > v47);
        }
        char v48 = (void **)&a1[-2];
        BOOL v4 = &a1[-2] >= v10;
        BOOL v5 = &a1[-2] == v10;
        if (&a1[-2] != v10)
        {
          sub_2161254AC((uint64_t)v10, a1 - 2);
          v10[1].n128_u64[1] = a1[-1].n128_u64[1];
        }
        double v49 = *v48;
        if (*v48)
        {
          a1[-2].n128_u64[1] = (unint64_t)v49;
          operator delete(v49);
        }
        a4 = 0;
        a1[-2] = v104;
        a1[-1].n128_u64[0] = v38;
        a1[-1].n128_f64[1] = v21;
        goto LABEL_1;
      }
    }
    uint64_t v22 = 0;
    __n128 v103 = *v10;
    unint64_t v23 = v10[1].n128_u64[0];
    v10->n128_u64[1] = 0;
    v10[1].n128_u64[0] = 0;
    v10->n128_u64[0] = 0;
    do
    {
      double v24 = v10[v22 + 3].n128_f64[1];
      v22 += 2;
    }
    while (v24 > v21);
    uint64_t v25 = &v10[v22];
    uint64_t v26 = a2;
    if (v22 == 2)
    {
      int64x2_t v29 = a2;
      while (v25 < v29)
      {
        uint64_t v27 = v29 - 2;
        double v30 = v29[-1].n128_f64[1];
        v29 -= 2;
        if (v30 > v21) {
          goto LABEL_24;
        }
      }
      uint64_t v27 = v29;
    }
    else
    {
      do
      {
        uint64_t v27 = v26 - 2;
        double v28 = v26[-1].n128_f64[1];
        v26 -= 2;
      }
      while (v28 <= v21);
    }
LABEL_24:
    a1 = v25;
    if (v25 < v27)
    {
      uint64_t v31 = v27;
      do
      {
        sub_21618F2A0((uint64_t)a1, v31);
        do
        {
          double v32 = a1[3].n128_f64[1];
          a1 += 2;
        }
        while (v32 > v21);
        do
        {
          double v33 = v31[-1].n128_f64[1];
          v31 -= 2;
        }
        while (v33 <= v21);
      }
      while (a1 < v31);
    }
    unint64_t v34 = (void **)&a1[-2];
    if (&a1[-2] != v10)
    {
      sub_2161254AC((uint64_t)v10, a1 - 2);
      v10[1].n128_u64[1] = a1[-1].n128_u64[1];
    }
    uint64_t v35 = *v34;
    if (*v34)
    {
      a1[-2].n128_u64[1] = (unint64_t)v35;
      operator delete(v35);
    }
    a1[-2] = v103;
    a1[-1].n128_u64[0] = v23;
    a1[-1].n128_f64[1] = v21;
    if (v25 < v27) {
      goto LABEL_39;
    }
    BOOL v36 = sub_21618F3E0(v10, a1 - 2);
    if (!sub_21618F3E0(a1, a2))
    {
      if (v36) {
        goto LABEL_1;
      }
LABEL_39:
      sub_21618E99C(v10, &a1[-2], a3, a4 & 1);
      a4 = 0;
      goto LABEL_1;
    }
    a2 = a1 - 2;
    if (v36) {
      return;
    }
  }
  uint64_t v50 = v10 + 2;
  BOOL v52 = v10 == a2 || v50 == a2;
  if (a4)
  {
    if (!v52)
    {
      uint64_t v53 = 0;
      unint64_t v54 = v10;
      do
      {
        uint64_t v55 = v50;
        double v56 = v54[3].n128_f64[1];
        if (v56 > v54[1].n128_f64[1])
        {
          __n128 v105 = *v50;
          unint64_t v57 = v54[3].n128_u64[0];
          v50->n128_u64[0] = 0;
          v50->n128_u64[1] = 0;
          uint64_t v58 = v53;
          v50[1].n128_u64[0] = 0;
          while (1)
          {
            unint64_t v59 = (double *)((char *)v10->n128_f64 + v58);
            sub_2161254AC((uint64_t)&v10[2] + v58, (__n128 *)((char *)v10 + v58));
            *(unint64_t *)((char *)&v10[3].n128_u64[1] + v5++**(_DWORD **)(result + 8) = *(unint64_t *)((char *)&v10[1].n128_u64[1]
                                                                                           + v58);
            if (!v58) {
              break;
            }
            v58 -= 32;
            if (v56 <= *(v59 - 1))
            {
              uint64_t v60 = (uint64_t)&v10[2] + v58;
              goto LABEL_89;
            }
          }
          uint64_t v60 = (uint64_t)v10;
LABEL_89:
          uint64_t v61 = *(void **)v60;
          if (*(void *)v60)
          {
            *(void *)(v60 + ++**(_DWORD **)(result + 8) = v61;
            operator delete(v61);
          }
          *(__n128 *)uint64_t v60 = v105;
          *(void *)(v60 + 16) = v57;
          *(double *)(v60 + 24) = v56;
        }
        uint64_t v50 = v55 + 2;
        v53 += 32;
        unint64_t v54 = v55;
      }
      while (&v55[2] != a2);
    }
  }
  else if (!v52)
  {
    uint64_t v93 = &v10[3].n128_f64[1];
    do
    {
      uint64_t v94 = v50;
      double v95 = v10[3].n128_f64[1];
      if (v95 > v10[1].n128_f64[1])
      {
        __n128 v108 = *v50;
        unint64_t v96 = v10[3].n128_u64[0];
        v50->n128_u64[0] = 0;
        v50->n128_u64[1] = 0;
        float v97 = v93;
        v50[1].n128_u64[0] = 0;
        do
        {
          uint64_t v98 = v97;
          sub_2161254AC((uint64_t)(v97 - 3), (__n128 *)(v97 - 7));
          uint64_t v99 = *((void *)v97 - 4);
          v97 -= 4;
          *(void *)uint64_t v98 = v99;
        }
        while (v95 > *(v98 - 8));
        v100 = (void *)*((void *)v97 - 3);
        if (v100)
        {
          *((void *)v97 - 2) = v100;
          operator delete(v100);
        }
        *(__n128 *)(v97 - 3) = v108;
        *((void *)v97 - 1) = v96;
        *float v97 = v95;
      }
      uint64_t v50 = v94 + 2;
      v93 += 4;
      unint64_t v10 = v94;
    }
    while (&v94[2] != a2);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    unint64_t v14 = (uint64_t)a2 - v11;
    int v15 = (uint64_t)((uint64_t)a2 - v11) >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((uint64_t)(a2 - 4), v11))
          {
            sub_216193444((uint64_t *)v11, (uint64_t)(a2 - 4));
            uint64_t v22 = *(_DWORD *)(v11 + 24);
            *(_DWORD *)(v11 + 24) = *((_DWORD *)a2 - 2);
            *((_DWORD *)a2 - 2) = v22;
          }
          break;
        case 3uLL:
          sub_216192C70(v11, v11 + 32, (uint64_t)(a2 - 4), a3);
          break;
        case 4uLL:
          sub_21619349C(v11, v11 + 32, v11 + 64, (uint64_t)(a2 - 4), a3);
          break;
        case 5uLL:
          sub_216193574(v11, v11 + 32, v11 + 64, v11 + 96, (uint64_t)(a2 - 4), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 767) {
      break;
    }
    if (v13 == 1)
    {
      if ((void *)v11 != a2)
      {
        sub_21619379C(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 32 * (v15 >> 1);
    if ((unint64_t)v14 > 0x1000)
    {
      sub_216192C70(v11, v11 + 32 * (v15 >> 1), (uint64_t)(a2 - 4), a3);
      sub_216192C70(v11 + 32, v17 - 32, (uint64_t)(a2 - 8), a3);
      sub_216192C70(v11 + 64, v11 + 32 + 32 * v16, (uint64_t)(a2 - 12), a3);
      sub_216192C70(v17 - 32, v17, v11 + 32 + 32 * v16, a3);
      sub_216193444((uint64_t *)v11, v17);
      unint64_t v18 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v17 + 24);
      *(_DWORD *)(v17 + 24) = v18;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_216192C70(v11 + 32 * (v15 >> 1), v11, (uint64_t)(a2 - 4), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v11 - 32, v11) & 1) == 0)
    {
      uint64_t v11 = sub_216192DA0(v11, (unint64_t)a2, (uint64_t (**)(void **, unint64_t))a3);
      goto LABEL_18;
    }
LABEL_13:
    std::string::size_type v19 = sub_216192F9C(v11, (unint64_t)a2, (uint64_t (**)(uint64_t, void **))a3);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    double v21 = sub_2161931A0(v11, v19, a3);
    uint64_t v11 = v19 + 32;
    if (sub_2161931A0(v19 + 32, (uint64_t)a2, a3))
    {
      a4 = -v13;
      a2 = (void *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if ((v21 & 1) == 0)
    {
LABEL_16:
      sub_2161925A8(a1, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 32;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_216192988(v11, a2, (uint64_t (**)(void **, uint64_t))a3);
  }
  else
  {
    sub_216192B0C(v11, a2, (uint64_t (**)(void **, uint64_t))a3);
  }
}

  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    unint64_t v14 = v13;
    int v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = ((char *)a2 - (char *)v12) >> 4;
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
          {
            uint64_t v25 = *v12;
            *uint64_t v12 = *(a2 - 8);
            *(a2 - ++**(_DWORD **)(result + 8) = v25;
            uint64_t v26 = *((void *)v12 + 1);
            *((void *)v12 + 1) = *((void *)a2 - 1);
            *((void *)a2 - 1) = v26;
          }
          break;
        case 3uLL:
          sub_2161E768C(v12, v12 + 8, a2 - 8, a3);
          break;
        case 4uLL:
          sub_2161E7CE4((uint64_t)v12, (uint64_t)(v12 + 8), (uint64_t)(v12 + 16), (uint64_t)(a2 - 8), a3);
          break;
        case 5uLL:
          sub_2161E7DE0((uint64_t)v12, (uint64_t)(v12 + 8), (uint64_t)(v12 + 16), (uint64_t)(v12 + 24), (uint64_t)(a2 - 8), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 383) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        sub_2161E7F1C((uint64_t)v12, a2, a2, a3, a6);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = &v12[8 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x801)
    {
      sub_2161E768C(v12, &v12[8 * (v16 >> 1)], a2 - 8, a3);
      sub_2161E768C(v12 + 8, v18 - 8, a2 - 16, a3);
      sub_2161E768C(v12 + 16, &v12[8 * v17 + 8], a2 - 24, a3);
      sub_2161E768C(v18 - 8, v18, &v12[8 * v17 + 8], a3);
      std::string::size_type v19 = *v12;
      *uint64_t v12 = *v18;
      *unint64_t v18 = v19;
      double v20 = *((void *)v12 + 1);
      *((void *)v12 + 1) = *((void *)v18 + 1);
      *((void *)v18 + 1) = v20;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_2161E768C(&v12[8 * (v16 >> 1)], v12, a2 - 8, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
    {
      uint64_t v12 = sub_2161E77EC(v12, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    a6.n128_f64[0] = sub_2161E7964(v12, (unint64_t)a2, a3);
    uint64_t v22 = (__int16 *)v21;
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    double v24 = sub_2161E7AD4((uint64_t)v12, v21, a3);
    uint64_t v12 = v22 + 8;
    if (sub_2161E7AD4((uint64_t)(v22 + 8), (long long *)a2, a3))
    {
      a4 = -v14;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v24)
    {
LABEL_16:
      sub_2161E70C8(a1, v22, a3, -v14, a5 & 1, a6);
      uint64_t v12 = v22 + 8;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_2161E74C0((uint64_t)v12, (long long *)a2, a3);
  }
  else
  {
    sub_2161E75B4((uint64_t)v12, (long long *)a2, a3);
  }
}

  uint64_t v9 = a1;
  unint64_t v80 = a1 + 32;
  uint64_t v81 = a1 + 16;
  unint64_t v10 = a1 - 16;
  while (1)
  {
    uint64_t v11 = (uint64_t)a2 - v9;
    uint64_t v12 = ((uint64_t)a2 - v9) >> 4;
    if (!(!v5 & v4))
    {
      switch(v12)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (sub_21620B708((uint64_t)(a2 - 2), v9))
          {
            sub_21620E894(v9, (uint64_t)(a2 - 2));
          }
          break;
        case 3:
          sub_21620E8EC(v9, v9 + 16, (uint64_t)(a2 - 2));
          break;
        case 4:
          sub_21620EBA8(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 2));
          break;
        case 5:
          sub_21620EC50(v9, v9 + 16, v9 + 32, v9 + 48, (uint64_t)(a2 - 2));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if ((const void **)v9 != a2)
      {
        uint64_t v83 = a2;
        double v42 = (unint64_t)(v12 - 2) >> 1;
        int64x2_t v43 = v42;
        do
        {
          uint64_t v44 = v43;
          if (v42 >= v43)
          {
            double v45 = (2 * v43) | 1;
            double v46 = (const void **)(v9 + 16 * v45);
            if (2 * v43 + 2 < v12 && sub_21620B708(v9 + 16 * v45, (uint64_t)(v46 + 2)))
            {
              v46 += 2;
              double v45 = 2 * v44 + 2;
            }
            double v47 = v9 + 16 * v44;
            if ((sub_21620B708((uint64_t)v46, v47) & 1) == 0)
            {
              char v48 = *(const void **)v47;
              *(void *)double v47 = 0;
              uint64_t v85 = v48;
              unint64_t v86 = *(const void **)(v9 + 16 * v44 + 8);
              do
              {
                double v49 = v46;
                uint64_t v50 = *v46;
                __int16 *v46 = 0;
                sub_2161868BC((const void **)v47, v50);
                *(void *)(v47 + ++**(_DWORD **)(result + 8) = v46[1];
                if (v42 < v45) {
                  break;
                }
                uint64_t v51 = (2 * v45) | 1;
                double v46 = (const void **)(v9 + 16 * v51);
                double v45 = 2 * v45 + 2;
                if (v45 < v12)
                {
                  if (sub_21620B708(v9 + 16 * v51, (uint64_t)(v46 + 2))) {
                    v46 += 2;
                  }
                  else {
                    double v45 = v51;
                  }
                }
                else
                {
                  double v45 = v51;
                }
                double v47 = (uint64_t)v49;
              }
              while (!sub_21620B708((uint64_t)v46, (uint64_t)&v85));
              sub_2161868BC(v49, v85);
              v49[1] = v86;
            }
          }
          int64x2_t v43 = v44 - 1;
        }
        while (v44);
        BOOL v52 = (unint64_t)v11 >> 4;
        uint64_t v53 = v83;
        do
        {
          unint64_t v54 = 0;
          uint64_t v55 = v53;
          double v56 = *(const void **)v9;
          unint64_t v57 = *(const void **)(v9 + 8);
          *(void *)uint64_t v9 = 0;
          uint64_t v58 = v52 - 2;
          uint64_t v84 = v56;
          if (v52 < 2) {
            uint64_t v58 = v52 - 1;
          }
          unint64_t v59 = v58 >> 1;
          uint64_t v60 = v9;
          do
          {
            uint64_t v61 = v60 + 16 * v54 + 16;
            int64_t v62 = (2 * v54) | 1;
            int64_t v63 = 2 * v54 + 2;
            if (v63 < v52 && sub_21620B708(v60 + 16 * v54 + 16, v60 + 16 * v54 + 32))
            {
              v61 += 16;
              int64_t v62 = v63;
            }
            int64_t v64 = *(const void **)v61;
            *(void *)uint64_t v61 = 0;
            sub_2161868BC((const void **)v60, v64);
            *(void *)(v60 + ++**(_DWORD **)(result + 8) = *(void *)(v61 + 8);
            uint64_t v60 = v61;
            unint64_t v54 = v62;
          }
          while (v62 <= v59);
          uint64_t v53 = v55 - 2;
          if ((const void **)v61 == v55 - 2)
          {
            sub_2161868BC((const void **)v61, v84);
            *(void *)(v61 + ++**(_DWORD **)(result + 8) = v57;
          }
          else
          {
            uint64_t v65 = *(v55 - 2);
            *(v55 - 2) = 0;
            sub_2161868BC((const void **)v61, v65);
            *(void *)(v61 + ++**(_DWORD **)(result + 8) = *(v55 - 1);
            sub_2161868BC(v55 - 2, v84);
            *(v55 - 1) = v57;
            uint64_t v66 = v61 - v9 + 16;
            if (v66 >= 17)
            {
              double v67 = (((unint64_t)v66 >> 4) - 2) >> 1;
              int64_t v68 = (const void **)(v9 + 16 * v67);
              if (sub_21620B708((uint64_t)v68, v61))
              {
                unint64_t v69 = *(const void **)v61;
                *(void *)uint64_t v61 = 0;
                uint64_t v85 = v69;
                unint64_t v86 = *(const void **)(v61 + 8);
                do
                {
                  uint64_t v70 = v68;
                  uint64_t v71 = *v68;
                  *int64_t v68 = 0;
                  sub_2161868BC((const void **)v61, v71);
                  *(void *)(v61 + ++**(_DWORD **)(result + 8) = v68[1];
                  if (!v67) {
                    break;
                  }
                  double v67 = (v67 - 1) >> 1;
                  int64_t v68 = (const void **)(v9 + 16 * v67);
                  uint64_t v61 = (uint64_t)v70;
                }
                while ((sub_21620B708((uint64_t)v68, (uint64_t)&v85) & 1) != 0);
                sub_2161868BC(v70, v69);
                v70[1] = v86;
              }
            }
          }
        }
        while (v52-- > 2);
      }
      return;
    }
    uint64_t v13 = v9 + 16 * ((unint64_t)v12 >> 1);
    if ((unint64_t)v11 < 0x801)
    {
      sub_21620E8EC(v13, v9, (uint64_t)(a2 - 2));
    }
    else
    {
      sub_21620E8EC(v9, v13, (uint64_t)(a2 - 2));
      sub_21620E8EC(v81, v13 - 16, (uint64_t)(a2 - 4));
      sub_21620E8EC(v80, v13 + 16, (uint64_t)(a2 - 6));
      sub_21620E8EC(v13 - 16, v13, v13 + 16);
      int v15 = *(const void **)v9;
      unint64_t v14 = *(void *)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      unint64_t v16 = *(const void **)v13;
      *(void *)uint64_t v13 = 0;
      sub_2161868BC((const void **)v9, v16);
      *(void *)(v9 + ++**(_DWORD **)(result + 8) = *(void *)(v13 + 8);
      sub_2161868BC((const void **)v13, v15);
      *(void *)(v13 + ++**(_DWORD **)(result + 8) = v14;
    }
    --a3;
    if ((a4 & 1) == 0 && (sub_21620B708(v10, v9) & 1) == 0)
    {
      uint64_t v26 = *(const void **)v9;
      uint64_t v27 = *(const void **)(v9 + 8);
      *(void *)uint64_t v9 = 0;
      uint64_t v85 = v26;
      unint64_t v86 = v27;
      if (sub_21620B708((uint64_t)&v85, (uint64_t)(a2 - 2)))
      {
        a1 = v9;
        do
          a1 += 16;
        while ((sub_21620B708((uint64_t)&v85, a1) & 1) == 0);
      }
      else
      {
        double v28 = v9 + 16;
        do
        {
          a1 = v28;
          if (v28 >= (unint64_t)a2) {
            break;
          }
          int64x2_t v29 = sub_21620B708((uint64_t)&v85, v28);
          double v28 = a1 + 16;
        }
        while (!v29);
      }
      double v30 = (unint64_t)a2;
      if (a1 < (unint64_t)a2)
      {
        double v30 = (unint64_t)a2;
        do
          v30 -= 16;
        while ((sub_21620B708((uint64_t)&v85, v30) & 1) != 0);
      }
      while (a1 < v30)
      {
        sub_21620E894(a1, v30);
        do
          a1 += 16;
        while (!sub_21620B708((uint64_t)&v85, a1));
        do
          v30 -= 16;
        while ((sub_21620B708((uint64_t)&v85, v30) & 1) != 0);
      }
      if (a1 - 16 != v9)
      {
        uint64_t v31 = *(const void **)(a1 - 16);
        *(void *)(a1 - 16) = 0;
        sub_2161868BC((const void **)v9, v31);
        *(void *)(v9 + ++**(_DWORD **)(result + 8) = *(void *)(a1 - 8);
        uint64_t v26 = v85;
      }
      sub_2161868BC((const void **)(a1 - 16), v26);
      a4 = 0;
      *(void *)(a1 - ++**(_DWORD **)(result + 8) = v27;
      goto LABEL_1;
    }
    unint64_t v17 = 0;
    std::string::size_type v19 = *(const void **)v9;
    unint64_t v18 = *(const void **)(v9 + 8);
    *(void *)uint64_t v9 = 0;
    uint64_t v85 = v19;
    unint64_t v86 = v18;
    do
    {
      double v20 = sub_21620B708(v9 + v17 + 16, (uint64_t)&v85);
      v17 += 16;
    }
    while ((v20 & 1) != 0);
    double v21 = v9 + v17;
    uint64_t v22 = (unint64_t)a2;
    if (v17 == 16)
    {
      uint64_t v22 = (unint64_t)a2;
      do
      {
        if (v21 >= v22) {
          break;
        }
        v22 -= 16;
      }
      while ((sub_21620B708(v22, (uint64_t)&v85) & 1) == 0);
    }
    else
    {
      do
        v22 -= 16;
      while (!sub_21620B708(v22, (uint64_t)&v85));
    }
    a1 = v9 + v17;
    if (v21 < v22)
    {
      unint64_t v23 = v22;
      do
      {
        sub_21620E894(a1, v23);
        do
          a1 += 16;
        while ((sub_21620B708(a1, (uint64_t)&v85) & 1) != 0);
        do
          v23 -= 16;
        while (!sub_21620B708(v23, (uint64_t)&v85));
      }
      while (a1 < v23);
    }
    if (a1 - 16 != v9)
    {
      double v24 = *(const void **)(a1 - 16);
      *(void *)(a1 - 16) = 0;
      sub_2161868BC((const void **)v9, v24);
      *(void *)(v9 + ++**(_DWORD **)(result + 8) = *(void *)(a1 - 8);
      std::string::size_type v19 = v85;
    }
    sub_2161868BC((const void **)(a1 - 16), v19);
    *(void *)(a1 - ++**(_DWORD **)(result + 8) = v18;
    if (v21 < v22) {
      goto LABEL_32;
    }
    uint64_t v25 = sub_21620E9B8(v9, (const void **)(a1 - 16));
    if (!sub_21620E9B8(a1, a2))
    {
      if (v25) {
        goto LABEL_1;
      }
LABEL_32:
      sub_21620DF58(v9, a1 - 16, a3, a4 & 1);
      a4 = 0;
      goto LABEL_1;
    }
    a2 = (const void **)(a1 - 16);
    if (v25) {
      return;
    }
  }
  if (a4)
  {
    if ((const void **)v9 != a2)
    {
      double v32 = v9 + 16;
      if ((const void **)(v9 + 16) != a2)
      {
        double v33 = 0;
        unint64_t v34 = v9;
        do
        {
          uint64_t v35 = (const void **)v32;
          if (sub_21620B708(v32, v34))
          {
            BOOL v36 = *v35;
            void *v35 = 0;
            __n128 v37 = *(const void **)(v34 + 24);
            uint64_t v85 = v36;
            unint64_t v86 = v37;
            unint64_t v38 = v33;
            while (1)
            {
              long long v39 = v9 + v38;
              double v40 = *(const void **)(v9 + v38);
              *(void *)(v9 + v3++**(_DWORD **)(result + 8) = 0;
              sub_2161868BC((const void **)(v9 + v38 + 16), v40);
              *(void *)(v9 + v38 + 24) = *(void *)(v9 + v38 + 8);
              if (!v38) {
                break;
              }
              v38 -= 16;
              if ((sub_21620B708((uint64_t)&v85, v39 - 16) & 1) == 0)
              {
                double v41 = v9 + v38 + 16;
                goto LABEL_75;
              }
            }
            double v41 = v9;
LABEL_75:
            sub_2161868BC((const void **)v41, v85);
            *(void *)(v41 + ++**(_DWORD **)(result + 8) = v86;
          }
          double v32 = (uint64_t)(v35 + 2);
          v33 += 16;
          unint64_t v34 = (uint64_t)v35;
        }
        while (v35 + 2 != a2);
      }
    }
  }
  else if ((const void **)v9 != a2)
  {
    unint64_t v73 = v9 + 16;
    while ((const void **)v73 != a2)
    {
      uint64_t v74 = (const void **)v73;
      if (sub_21620B708(v73, v9))
      {
        uint64_t v75 = *v74;
        *uint64_t v74 = 0;
        unint64_t v76 = *(const void **)(v9 + 24);
        uint64_t v85 = v75;
        unint64_t v86 = v76;
        unint64_t v77 = v10;
        do
        {
          unint64_t v78 = *(const void **)(v77 + 16);
          *(void *)(v77 + 16) = 0;
          sub_2161868BC((const void **)(v77 + 32), v78);
          *(void *)(v77 + 40) = *(void *)(v77 + 24);
          uint64_t v79 = sub_21620B708((uint64_t)&v85, v77);
          v77 -= 16;
        }
        while ((v79 & 1) != 0);
        sub_2161868BC((const void **)(v77 + 32), v85);
        *(void *)(v77 + 40) = v86;
      }
      unint64_t v73 = (uint64_t)(v74 + 2);
      v10 += 16;
      uint64_t v9 = (uint64_t)v74;
    }
  }
}

  v184 = a2 - 4;
  v188 = (unint64_t)a2;
  v173 = (uint64_t)(a2 - 12);
  v174 = (uint64_t)(a2 - 8);
  v175 = a2 - 5;
  uint64_t i = a1;
  while (1)
  {
    a1 = i;
    unint64_t v10 = (uint64_t)a2 - i;
    uint64_t v11 = (uint64_t)((uint64_t)a2 - i) >> 5;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          unint64_t v69 = *((double *)a2 - 1);
          uint64_t v70 = *(double *)(i + 24);
          if (v69 > v70
            || v69 == v70 && (CFIndex Length = CFStringGetLength(*v184), Length < CFStringGetLength(*(CFStringRef *)i)))
          {
            sub_2162EDE6C(i, (uint64_t)v184);
          }
          break;
        case 3:
          sub_2162EE060(i, i + 32, (uint64_t)v184);
          break;
        case 4:
          sub_2162EE4A8(i, i + 32, i + 64, (uint64_t)v184);
          break;
        case 5:
          sub_2162EDF0C(i, i + 32, i + 64, i + 96, (uint64_t)v184);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 767)
    {
      uint64_t v72 = (CFStringRef *)(i + 32);
      uint64_t v74 = (CFStringRef *)i == a2 || v72 == a2;
      if (a4)
      {
        if (!v74)
        {
          uint64_t v75 = 0;
          unint64_t v76 = i;
          do
          {
            unint64_t v77 = v76;
            unint64_t v76 = (unint64_t)v72;
            unint64_t v78 = *(double *)(v77 + 56);
            uint64_t v79 = *(double *)(v77 + 24);
            if (v78 > v79
              || v78 == v79 && (unint64_t v80 = CFStringGetLength(*v72), v80 < CFStringGetLength(*(CFStringRef *)v77)))
            {
              uint64_t v82 = *(const __CFString **)(v77 + 32);
              uint64_t v81 = *(const void **)(v77 + 40);
              *(void *)(v77 + 32) = 0;
              *(void *)(v77 + 40) = 0;
              uint64_t v83 = *(void *)(v77 + 48);
              uint64_t v84 = *(double *)(v77 + 56);
              uint64_t v85 = *(CFStringRef *)v77;
              *(void *)unint64_t v77 = 0;
              sub_2161868BC((const void **)v76, v85);
              unint64_t v86 = *(const void **)(v77 + 8);
              *(void *)(v77 + ++**(_DWORD **)(result + 8) = 0;
              sub_2161868BC((const void **)(v76 + 8), v86);
              double v87 = (void *)(v77 + 16);
              *(_OWORD *)(v76 + 16) = *(_OWORD *)(v77 + 16);
              if (v77 == a1)
              {
                unint64_t v77 = a1;
              }
              else
              {
                v185 = v81;
                unint64_t v88 = v75;
                do
                {
                  uint64_t v89 = a1 + v88;
                  int64_t v90 = *(double *)(a1 + v88 - 8);
                  if (v84 <= v90)
                  {
                    if (v84 != v90)
                    {
                      unint64_t v77 = a1 + v88;
                      double v87 = (void *)(a1 + v88 + 16);
                      goto LABEL_134;
                    }
                    char v91 = CFStringGetLength(v82);
                    if (v91 >= CFStringGetLength(*(CFStringRef *)(v89 - 32))) {
                      goto LABEL_134;
                    }
                  }
                  unsigned int v92 = *(const void **)(v89 - 32);
                  *(void *)(v89 - 32) = 0;
                  sub_2161868BC((const void **)(a1 + v88), v92);
                  uint64_t v93 = *(const void **)(v89 - 24);
                  *(void *)(v89 - 24) = 0;
                  sub_2161868BC((const void **)(v89 + 8), v93);
                  double v87 = (void *)(v77 - 16);
                  *(_OWORD *)(v89 + 16) = *(_OWORD *)(v89 - 16);
                  v77 -= 32;
                  v88 -= 32;
                }
                while (v88);
                double v87 = (void *)(a1 + 16);
                unint64_t v77 = a1;
LABEL_134:
                uint64_t v81 = v185;
              }
              sub_2161868BC((const void **)v77, v82);
              sub_2161868BC((const void **)(v77 + 8), v81);
              *double v87 = v83;
              *(double *)(v77 + 24) = v84;
              a2 = (CFStringRef *)v188;
            }
            uint64_t v72 = (CFStringRef *)(v76 + 32);
            v75 += 32;
          }
          while ((CFStringRef *)(v76 + 32) != a2);
        }
      }
      else if (!v74)
      {
        v159 = (_OWORD *)(i + 48);
        do
        {
          v160 = a1;
          a1 = (uint64_t)v72;
          v161 = *(double *)(v160 + 56);
          v162 = *(double *)(v160 + 24);
          if (v161 > v162
            || v161 == v162 && (v163 = CFStringGetLength(*v72), v163 < CFStringGetLength(*(CFStringRef *)v160)))
          {
            v164 = *(const __CFString **)a1;
            *(void *)a1 = 0;
            v165 = *(const void **)(v160 + 40);
            v166 = *(void *)(v160 + 48);
            *(void *)(v160 + 40) = 0;
            v167 = v159;
            v168 = *(double *)(v160 + 56);
            while (1)
            {
              v169 = (const void *)*((void *)v167 - 6);
              *((void *)v167 - 6) = 0;
              sub_2161868BC((const void **)v167 - 2, v169);
              v170 = (const void *)*((void *)v167 - 5);
              *((void *)v167 - 5) = 0;
              sub_2161868BC((const void **)v167 - 1, v170);
              *v167 = *(v167 - 2);
              v171 = *((double *)v167 - 7);
              if (v168 <= v171)
              {
                if (v168 != v171) {
                  break;
                }
                v172 = CFStringGetLength(v164);
                if (v172 >= CFStringGetLength(*((CFStringRef *)v167 - 10))) {
                  break;
                }
              }
              v167 -= 2;
            }
            sub_2161868BC((const void **)v167 - 6, v164);
            sub_2161868BC((const void **)v167 - 5, v165);
            *((void *)v167 - 4) = v166;
            *((double *)v167 - 3) = v168;
          }
          uint64_t v72 = (CFStringRef *)(a1 + 32);
          v159 += 2;
        }
        while ((CFStringRef *)(a1 + 32) != a2);
      }
      return;
    }
    if (!a3) {
      break;
    }
    uint64_t v12 = (unint64_t)v11 >> 1;
    uint64_t v13 = i + 32 * ((unint64_t)v11 >> 1);
    if ((unint64_t)v10 <= 0x1000)
    {
      sub_2162EE060(v13, i, (uint64_t)v184);
    }
    else
    {
      sub_2162EE060(i, v13, (uint64_t)v184);
      sub_2162EE060(i + 32, v13 - 32, v174);
      sub_2162EE060(i + 64, i + 32 + 32 * v12, v173);
      sub_2162EE060(v13 - 32, v13, i + 32 + 32 * v12);
      unint64_t v14 = *(CFStringRef *)i;
      int v15 = *(const void **)(i + 8);
      *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
      *(void *)a1 = 0;
      v191 = *(_OWORD *)(a1 + 16);
      unint64_t v16 = *(const void **)v13;
      *(void *)uint64_t v13 = 0;
      sub_2161868BC((const void **)a1, v16);
      unint64_t v17 = *(const void **)(v13 + 8);
      *(void *)(v13 + ++**(_DWORD **)(result + 8) = 0;
      sub_2161868BC((const void **)(a1 + 8), v17);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v13 + 16);
      sub_2161868BC((const void **)v13, v14);
      sub_2161868BC((const void **)(v13 + 8), v15);
      *(_OWORD *)(v13 + 16) = v191;
    }
    --a3;
    if ((a4 & 1) != 0 || (unint64_t v18 = *(double *)(a1 - 8), v19 = *(double *)(a1 + 24), v18 > v19))
    {
LABEL_13:
      double v21 = 0;
      uint64_t v22 = *(const __CFString **)a1;
      CFStringRef theString = *(CFStringRef *)(a1 + 8);
      *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
      *(void *)a1 = 0;
      unint64_t v23 = *(void *)(a1 + 16);
      double v24 = *(double *)(a1 + 24);
      while (1)
      {
        uint64_t v25 = *(double *)(a1 + v21 + 56);
        if (v25 <= v24)
        {
          if (v25 != v24) {
            break;
          }
          uint64_t v26 = CFStringGetLength(*(CFStringRef *)(a1 + v21 + 32));
          if (v26 >= CFStringGetLength(v22)) {
            break;
          }
        }
        v21 += 32;
      }
      v178 = a3;
      uint64_t v27 = a1 + v21 + 32;
      if (v21)
      {
        double v28 = (unint64_t)v184;
        int64x2_t v29 = *(double *)(v188 - 8);
        double v30 = v175;
        if (v29 <= v24)
        {
          do
          {
            if (v29 == v24)
            {
              uint64_t v31 = CFStringGetLength(v30[1]);
              if (v31 < CFStringGetLength(v22)) {
                break;
              }
            }
            double v32 = *(double *)v30;
            v30 -= 4;
            int64x2_t v29 = v32;
          }
          while (v32 <= v24);
LABEL_23:
          double v28 = (unint64_t)(v30 + 1);
        }
      }
      else
      {
        double v28 = v188;
        if (v27 < v188)
        {
          double v28 = (unint64_t)v184;
          double v33 = *(double *)(v188 - 8);
          if (v33 <= v24)
          {
            double v30 = v175;
            double v28 = (unint64_t)v184;
            while (1)
            {
              uint64_t v44 = v30 + 1;
              if (v33 == v24)
              {
                double v45 = CFStringGetLength(*v44);
                if (v45 < CFStringGetLength(v22) || v27 >= (unint64_t)v44) {
                  goto LABEL_23;
                }
              }
              else if (v27 >= (unint64_t)v44)
              {
                break;
              }
              v28 -= 32;
              double v47 = *(double *)v30;
              v30 -= 4;
              double v33 = v47;
              if (v47 > v24) {
                goto LABEL_23;
              }
            }
          }
        }
      }
      uint64_t i = v27;
      if (v27 < v28)
      {
        unint64_t v34 = v28;
        do
        {
          sub_2162EDE6C(i, v34);
          do
          {
            do
            {
              i += 32;
              uint64_t v35 = *(double *)(i + 24);
            }
            while (v35 > v24);
            if (v35 != v24) {
              break;
            }
            BOOL v36 = CFStringGetLength(*(CFStringRef *)i);
          }
          while (v36 < CFStringGetLength(v22));
          __n128 v37 = *(double *)(v34 - 8);
          if (v37 <= v24)
          {
            unint64_t v38 = v34 - 40;
            do
            {
              if (v37 == v24)
              {
                long long v39 = CFStringGetLength(*(CFStringRef *)(v38 + 8));
                if (v39 < CFStringGetLength(v22)) {
                  break;
                }
              }
              double v40 = *(double *)v38;
              v38 -= 32;
              __n128 v37 = v40;
            }
            while (v40 <= v24);
            unint64_t v34 = v38 + 8;
          }
          else
          {
            v34 -= 32;
          }
        }
        while (i < v34);
      }
      if (i - 32 != a1)
      {
        double v41 = *(const void **)(i - 32);
        *(void *)(i - 32) = 0;
        sub_2161868BC((const void **)a1, v41);
        double v42 = *(const void **)(i - 24);
        *(void *)(i - 24) = 0;
        sub_2161868BC((const void **)(a1 + 8), v42);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(i - 16);
      }
      sub_2161868BC((const void **)(i - 32), v22);
      sub_2161868BC((const void **)(i - 24), theString);
      *(void *)(i - 16) = v23;
      *(double *)(i - ++**(_DWORD **)(result + 8) = v24;
      BOOL v4 = v27 >= v28;
      a2 = (CFStringRef *)v188;
      a3 = v178;
      if (!v4) {
        goto LABEL_46;
      }
      int64x2_t v43 = sub_2162EE1D0(a1, i - 32);
      if (sub_2162EE1D0(i, v188))
      {
        a2 = (CFStringRef *)(i - 32);
        if (v43) {
          return;
        }
        goto LABEL_1;
      }
      if (!v43)
      {
LABEL_46:
        sub_2162ECE3C(a1, i - 32, v178, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v18 == v19)
      {
        double v20 = CFStringGetLength(*(CFStringRef *)(a1 - 32));
        if (v20 < CFStringGetLength(*(CFStringRef *)a1)) {
          goto LABEL_13;
        }
        std::string::size_type v19 = *(double *)(a1 + 24);
      }
      char v48 = *(const __CFString **)a1;
      theStringa = *(CFStringRef *)(a1 + 8);
      *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
      *(void *)a1 = 0;
      double v49 = *(void *)(a1 + 16);
      uint64_t v50 = *(double *)(v188 - 8);
      if (v19 > v50 || v19 == v50 && (uint64_t v51 = CFStringGetLength(v48), v51 < CFStringGetLength(*v184)))
      {
        BOOL v52 = *(double *)(a1 + 56);
        if (v19 <= v52)
        {
          uint64_t v55 = (double *)(a1 + 88);
          do
          {
            if (v19 == v52)
            {
              double v56 = CFStringGetLength(v48);
              if (v56 < CFStringGetLength(*((CFStringRef *)v55 - 7))) {
                break;
              }
            }
            unint64_t v57 = *v55;
            v55 += 4;
            BOOL v52 = v57;
          }
          while (v19 <= v57);
          uint64_t i = (unint64_t)(v55 - 7);
        }
        else
        {
          uint64_t i = a1 + 32;
        }
      }
      else
      {
        for (uint64_t i = a1 + 32; i < v188; i += 32)
        {
          uint64_t v53 = *(double *)(i + 24);
          if (v19 > v53) {
            break;
          }
          if (v19 == v53)
          {
            unint64_t v54 = CFStringGetLength(v48);
            if (v54 < CFStringGetLength(*(CFStringRef *)i)) {
              break;
            }
          }
        }
      }
      unint64_t j = v188;
      if (i < v188)
      {
        for (unint64_t j = (unint64_t)v184; ; j -= 32)
        {
          unint64_t v59 = *(double *)(j + 24);
          if (v19 <= v59)
          {
            if (v19 != v59) {
              break;
            }
            uint64_t v60 = CFStringGetLength(v48);
            if (v60 >= CFStringGetLength(*(CFStringRef *)j)) {
              break;
            }
          }
        }
      }
      while (i < j)
      {
        sub_2162EDE6C(i, j);
        uint64_t v61 = *(double *)(i + 56);
        if (v19 <= v61)
        {
          int64_t v62 = (double *)(i + 88);
          do
          {
            if (v19 == v61)
            {
              int64_t v63 = CFStringGetLength(v48);
              if (v63 < CFStringGetLength(*((CFStringRef *)v62 - 7))) {
                break;
              }
            }
            int64_t v64 = *v62;
            v62 += 4;
            uint64_t v61 = v64;
          }
          while (v19 <= v64);
          uint64_t i = (unint64_t)(v62 - 7);
        }
        else
        {
          i += 32;
        }
        do
        {
          do
          {
            j -= 32;
            uint64_t v65 = *(double *)(j + 24);
          }
          while (v19 > v65);
          if (v19 != v65) {
            break;
          }
          uint64_t v66 = CFStringGetLength(v48);
        }
        while (v66 < CFStringGetLength(*(CFStringRef *)j));
      }
      if (i - 32 != a1)
      {
        double v67 = *(const void **)(i - 32);
        *(void *)(i - 32) = 0;
        sub_2161868BC((const void **)a1, v67);
        int64_t v68 = *(const void **)(i - 24);
        *(void *)(i - 24) = 0;
        sub_2161868BC((const void **)(a1 + 8), v68);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(i - 16);
      }
      sub_2161868BC((const void **)(i - 32), v48);
      sub_2161868BC((const void **)(i - 24), theStringa);
      a4 = 0;
      *(void *)(i - 16) = v49;
      *(double *)(i - ++**(_DWORD **)(result + 8) = v19;
      a2 = (CFStringRef *)v188;
    }
  }
  if ((CFStringRef *)i != a2)
  {
    uint64_t v94 = (unint64_t)(v11 - 2) >> 1;
    double v95 = v94;
    while (2)
    {
      unint64_t v96 = v95;
      if (v94 >= v95)
      {
        float v97 = (2 * v95) | 1;
        uint64_t v98 = a1 + 32 * v97;
        if (2 * v95 + 2 < v11)
        {
          uint64_t v99 = *(double *)(v98 + 24);
          v100 = *(double *)(v98 + 56);
          if (v99 > v100
            || v99 == v100
            && (uint64_t v101 = CFStringGetLength(*(CFStringRef *)v98), v101 < CFStringGetLength(*(CFStringRef *)(v98 + 32))))
          {
            v98 += 32;
            float v97 = 2 * v96 + 2;
          }
        }
        __n128 v102 = *(double *)(v98 + 24);
        __n128 v103 = a1 + 32 * v96;
        __n128 v105 = *(double *)(v103 + 24);
        __n128 v104 = (double *)(v103 + 24);
        __n128 v106 = v105;
        __n128 v107 = v102 == v105;
        if (v102 <= v105)
        {
          __n128 v108 = a1 + 32 * v96;
          if (!v107) {
            goto LABEL_151;
          }
          v109 = CFStringGetLength(*(CFStringRef *)v98);
          if (v109 >= CFStringGetLength(*(CFStringRef *)v108))
          {
            __n128 v106 = *v104;
LABEL_151:
            uint64_t v110 = a1 + 32 * v96;
            v111 = *(const void **)(v110 + 8);
            v110 += 8;
            v179 = v111;
            theStringb = *(const __CFString **)v108;
            *(void *)__n128 v108 = 0;
            *(void *)(v108 + ++**(_DWORD **)(result + 8) = 0;
            v177 = *(void *)(v110 + 8);
            uint64_t v112 = *(CFStringRef *)v98;
            *(void *)uint64_t v98 = 0;
            sub_2161868BC((const void **)(a1 + 32 * v96), v112);
            v113 = *(const void **)(v98 + 8);
            *(void *)(v98 + ++**(_DWORD **)(result + 8) = 0;
            sub_2161868BC((const void **)v110, v113);
            *(_OWORD *)(v110 + ++**(_DWORD **)(result + 8) = *(_OWORD *)(v98 + 16);
            uint64_t v94 = (unint64_t)(v11 - 2) >> 1;
            for (k = v98; ; uint64_t v98 = k)
            {
              if (v94 < v97) {
                goto LABEL_164;
              }
              v115 = 2 * v97;
              float v97 = (2 * v97) | 1;
              CFIndex k = a1 + 32 * v97;
              v116 = v115 + 2;
              if (v115 + 2 < v11)
              {
                uint64_t v117 = *(double *)(k + 24);
                v118 = *(double *)(k + 56);
                if (v117 > v118
                  || v117 == v118
                  && (v119 = CFStringGetLength(*(CFStringRef *)k),
                      unint64_t v120 = v119 < CFStringGetLength(*(CFStringRef *)(k + 32)),
                      uint64_t v94 = (unint64_t)(v11 - 2) >> 1,
                      v120))
                {
                  k += 32;
                  float v97 = v116;
                }
              }
              uint64_t v121 = *(double *)(k + 24);
              if (v121 > v106) {
                break;
              }
              if (v121 == v106)
              {
                uint64_t v122 = CFStringGetLength(*(CFStringRef *)k);
                unint64_t v120 = v122 < CFStringGetLength(theStringb);
                uint64_t v94 = (unint64_t)(v11 - 2) >> 1;
                if (v120) {
                  break;
                }
              }
              uint64_t v123 = *(CFStringRef *)k;
              *(void *)CFIndex k = 0;
              sub_2161868BC((const void **)v98, v123);
              v124 = *(const void **)(k + 8);
              *(void *)(k + ++**(_DWORD **)(result + 8) = 0;
              sub_2161868BC((const void **)(v98 + 8), v124);
              *(_OWORD *)(v98 + 16) = *(_OWORD *)(k + 16);
            }
            CFIndex k = v98;
LABEL_164:
            sub_2161868BC((const void **)k, theStringb);
            sub_2161868BC((const void **)(k + 8), v179);
            *(void *)(k + 16) = v177;
            *(double *)(k + 24) = v106;
          }
        }
      }
      double v95 = v96 - 1;
      if (v96) {
        continue;
      }
      break;
    }
    v125 = (unint64_t)v10 >> 5;
    v126 = (const void **)v188;
    while (2)
    {
      v127 = 0;
      v128 = v126;
      v186 = *(const __CFString **)a1;
      v189 = *(const void **)(a1 + 8);
      *(void *)a1 = 0;
      *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
      v192 = *(_OWORD *)(a1 + 16);
      v129 = a1;
      do
      {
        v130 = v129;
        v129 += 32 * (v127 + 1);
        v131 = 2 * v127;
        v127 = (2 * v127) | 1;
        v132 = v131 + 2;
        if (v131 + 2 < v125)
        {
          v133 = *(double *)(v129 + 24);
          v134 = *(double *)(v129 + 56);
          if (v133 > v134
            || v133 == v134
            && (v135 = CFStringGetLength(*(CFStringRef *)v129), v135 < CFStringGetLength(*(CFStringRef *)(v129 + 32))))
          {
            v129 += 32;
            v127 = v132;
          }
        }
        v136 = *(CFStringRef *)v129;
        *(void *)v129 = 0;
        sub_2161868BC((const void **)v130, v136);
        v137 = *(const void **)(v129 + 8);
        *(void *)(v129 + ++**(_DWORD **)(result + 8) = 0;
        sub_2161868BC((const void **)(v130 + 8), v137);
        *(_OWORD *)(v130 + 16) = *(_OWORD *)(v129 + 16);
      }
      while (v127 <= (uint64_t)((unint64_t)(v125 - 2) >> 1));
      v138 = (_OWORD *)(v129 + 16);
      v126 -= 4;
      if ((const void **)v129 == v128 - 4)
      {
        sub_2161868BC((const void **)v129, v186);
        sub_2161868BC((const void **)(v129 + 8), v189);
        *v138 = v192;
        goto LABEL_189;
      }
      v139 = *(v128 - 4);
      *(v128 - 4) = 0;
      sub_2161868BC((const void **)v129, v139);
      v141 = *(v128 - 3);
      v140 = v128 - 3;
      *v140 = 0;
      sub_2161868BC((const void **)(v129 + 8), v141);
      *v138 = *(_OWORD *)(v140 + 1);
      sub_2161868BC(v126, v186);
      sub_2161868BC(v140, v189);
      *(_OWORD *)(v140 + 1) = v192;
      v142 = v129 - a1 + 32;
      if (v142 >= 33)
      {
        v143 = ((unint64_t)v142 >> 5) - 2;
        v144 = v143 >> 1;
        v145 = a1 + 32 * (v143 >> 1);
        v146 = *(double *)(v145 + 24);
        v147 = *(double *)(v129 + 24);
        if (v146 > v147) {
          goto LABEL_181;
        }
        if (v146 == v147)
        {
          v148 = CFStringGetLength(*(CFStringRef *)v145);
          if (v148 < CFStringGetLength(*(CFStringRef *)v129))
          {
            v147 = *(double *)(v129 + 24);
LABEL_181:
            v149 = *(const __CFString **)v129;
            v187 = *(const void **)(v129 + 8);
            v190 = v126;
            *(void *)v129 = 0;
            *(void *)(v129 + ++**(_DWORD **)(result + 8) = 0;
            v180 = *(void *)(v129 + 16);
            v150 = *(CFStringRef *)v145;
            *(void *)v145 = 0;
            sub_2161868BC((const void **)v129, v150);
            v151 = *(const void **)(v145 + 8);
            *(void *)(v145 + ++**(_DWORD **)(result + 8) = 0;
            sub_2161868BC((const void **)(v129 + 8), v151);
            v152 = (void *)(v145 + 16);
            *v138 = *(_OWORD *)(v145 + 16);
            v153 = a1 + 32 * v144;
            if (v143 >= 2)
            {
              while (1)
              {
                v154 = v144 - 1;
                v144 = (v144 - 1) >> 1;
                v153 = a1 + 32 * v144;
                v155 = *(double *)(v153 + 24);
                if (v155 <= v147)
                {
                  if (v155 != v147) {
                    break;
                  }
                  v156 = CFStringGetLength(*(CFStringRef *)v153);
                  if (v156 >= CFStringGetLength(v149)) {
                    break;
                  }
                }
                v157 = *(CFStringRef *)v153;
                *(void *)v153 = 0;
                sub_2161868BC((const void **)v145, v157);
                v158 = *(const void **)(v153 + 8);
                *(void *)(v153 + ++**(_DWORD **)(result + 8) = 0;
                sub_2161868BC((const void **)(v145 + 8), v158);
                v152 = (void *)(v153 + 16);
                *(_OWORD *)(v145 + 16) = *(_OWORD *)(v153 + 16);
                v145 = a1 + 32 * v144;
                if (v154 <= 1) {
                  goto LABEL_188;
                }
              }
              v153 = v145;
            }
LABEL_188:
            sub_2161868BC((const void **)v153, v149);
            sub_2161868BC((const void **)(v153 + 8), v187);
            *v152 = v180;
            *(double *)(v153 + 24) = v147;
            v126 = v190;
          }
        }
      }
LABEL_189:
      unint64_t v120 = v125-- <= 2;
      if (v120) {
        return;
      }
      continue;
    }
  }
}

__n128 sub_21618F2A0(uint64_t a1, __n128 *a2)
{
  __n128 v8 = *(__n128 *)a1;
  unint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  unint64_t v5 = *(void *)(a1 + 24);
  sub_2161254AC(a1, a2);
  *(void *)(a1 + 24) = a2[1].n128_u64[1];
  uint64_t v6 = (void *)a2->n128_u64[0];
  if (a2->n128_u64[0])
  {
    a2->n128_u64[1] = (unint64_t)v6;
    operator delete(v6);
  }
  __n128 result = v8;
  *a2 = v8;
  a2[1].n128_u64[0] = v4;
  a2[1].n128_u64[1] = v5;
  return result;
}

double sub_21618F320(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5 = a1;
  double result = a2[1].n128_f64[1];
  double v7 = a3[1].n128_f64[1];
  if (result <= *(double *)(a1 + 24))
  {
    if (v7 <= result) {
      return result;
    }
    sub_21618F2A0((uint64_t)a2, a3);
    double result = a2[1].n128_f64[1];
    if (result <= *(double *)(v5 + 24)) {
      return result;
    }
    a1 = v5;
    __n128 v8 = a2;
  }
  else
  {
    if (v7 <= result)
    {
      sub_21618F2A0(a1, a2);
      double result = a3[1].n128_f64[1];
      if (result <= a2[1].n128_f64[1]) {
        return result;
      }
      a1 = (uint64_t)a2;
    }
    __n128 v8 = a3;
  }

  *(void *)&double result = sub_21618F2A0(a1, v8).n128_u64[0];
  return result;
}

BOOL sub_21618F3E0(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_f64[1] > a1[1].n128_f64[1])
      {
        sub_21618F2A0((uint64_t)a1, a2 - 2);
        return 1;
      }
      return result;
    case 3:
      sub_21618F320((uint64_t)a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_21618F5C8((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_21618F670((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v6 = a1 + 4;
      sub_21618F320((uint64_t)a1, a1 + 2, a1 + 4);
      double v7 = a1 + 6;
      if (&a1[6] == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    double v10 = v7[1].n128_f64[1];
    if (v10 > v6[1].n128_f64[1])
    {
      __n128 v16 = *v7;
      unint64_t v11 = v7[1].n128_u64[0];
      v7->n128_u64[1] = 0;
      v7[1].n128_u64[0] = 0;
      uint64_t v12 = v8;
      v7->n128_u64[0] = 0;
      while (1)
      {
        uint64_t v13 = (double *)((char *)a1->n128_f64 + v12);
        sub_2161254AC((uint64_t)&a1[6] + v12, (__n128 *)((char *)a1 + v12 + 64));
        *(unint64_t *)((char *)&a1[7].n128_u64[1] + v12) = *(unint64_t *)((char *)&a1[5].n128_u64[1] + v12);
        if (v12 == -64) {
          break;
        }
        v12 -= 32;
        if (v10 <= v13[7])
        {
          uint64_t v14 = (uint64_t)&a1[6] + v12;
          goto LABEL_12;
        }
      }
      uint64_t v14 = (uint64_t)a1;
LABEL_12:
      int v15 = *(void **)v14;
      if (*(void *)v14)
      {
        *(void *)(v14 + ++**(_DWORD **)(result + 8) = v15;
        operator delete(v15);
      }
      *(__n128 *)uint64_t v14 = v16;
      *(void *)(v14 + 16) = v11;
      *(double *)(v14 + 24) = v10;
      if (++v9 == 8) {
        return &v7[2] == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 32;
    v7 += 2;
    if (v7 == a2) {
      return 1;
    }
  }
}

double sub_21618F5C8(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  sub_21618F320(a1, a2, a3);
  double result = a4[1].n128_f64[1];
  if (result > a3[1].n128_f64[1])
  {
    sub_21618F2A0((uint64_t)a3, a4);
    double result = a3[1].n128_f64[1];
    if (result > a2[1].n128_f64[1])
    {
      sub_21618F2A0((uint64_t)a2, a3);
      double result = a2[1].n128_f64[1];
      if (result > *(double *)(a1 + 24))
      {
        *(void *)&double result = sub_21618F2A0(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

double sub_21618F670(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  sub_21618F5C8(a1, a2, a3, a4);
  double result = a5[1].n128_f64[1];
  if (result > a4[1].n128_f64[1])
  {
    sub_21618F2A0((uint64_t)a4, a5);
    double result = a4[1].n128_f64[1];
    if (result > a3[1].n128_f64[1])
    {
      sub_21618F2A0((uint64_t)a3, a4);
      double result = a3[1].n128_f64[1];
      if (result > a2[1].n128_f64[1])
      {
        sub_21618F2A0((uint64_t)a2, a3);
        double result = a2[1].n128_f64[1];
        if (result > *(double *)(a1 + 24))
        {
          *(void *)&double result = sub_21618F2A0(a1, a2).n128_u64[0];
        }
      }
    }
  }
  return result;
}

void *sub_21618F744(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  double v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      sub_216182F50(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 1);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_21618F7F8((uint64_t)v8);
  return v4;
}

void sub_21618F7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21618F7F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21618B788(a1);
  }
  return a1;
}

void sub_21618F830(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 4);
        v6 -= 32;
        double v7 = v8;
        if (v8)
        {
          *((void *)v4 - 3) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_21618F8C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_21618F924(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  double v7 = result;
  unint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_21610CB04();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    double result = sub_21610FD04(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    char v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      std::string::size_type v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  __n128 v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    char v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    std::string::size_type v19 = v16;
LABEL_19:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t sub_21618FA28(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 2 * a3;
    do
    {
      sub_21618FAA0(a1, a2, a2);
      ++a2;
      v5 -= 2;
    }
    while (v5);
  }
  return a1;
}

void sub_21618FA8C(_Unwind_Exception *a1)
{
  sub_216144C28(v1);
  _Unwind_Resume(a1);
}

void *sub_21618FAA0(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    char v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + ++**(_DWORD **)(result + 8) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_2161297B4(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  std::string::size_type v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *std::string::size_type v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    std::string::size_type v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_21618FCAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_21618FCC0(void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (double result = *v6; result; double result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void sub_21618FD78()
{
}

void *sub_21618FD8C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C9408;
  result[1] = v3;
  return result;
}

uint64_t sub_21618FDD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C9408;
  a2[1] = v2;
  return result;
}

uint64_t sub_21618FE00(uint64_t a1, uint64_t a2, const __CFString **a3)
{
  CFStringRef v3 = *a3;
  uint8x8_t v4 = sub_2162769A4();
  sub_2161E2FFC(v3, &v12);
  uint64_t v5 = v12;
  uint64_t result = sub_216276FA0((uint64_t)v4, 0x4000u, (uint64_t)"%s, %.4f\n", v6, v7, v8, v9, v10, v12);
  if (v5)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

void sub_21618FEA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21618FECC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21618FF0C()
{
  return &unk_26C6BCC90;
}

void *sub_21618FF18(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_21618FF9C(void *a1, const char *a2)
{
  if (qword_26797D078 != -1) {
    dispatch_once(&qword_26797D078, &unk_26C6C9EE0);
  }
  return [a1 rangeOfCharacterFromSet:qword_26797D080 options:0] != 0x7FFFFFFFFFFFFFFFLL;
}

id sub_216190004(uint64_t a1, const char *a2)
{
  uint64_t v2 = [MEMORY[0x263F089C0] characterSetWithCharactersInString:@"⺮丨丬丶丷丿乀乁乚乛亅亠亻冂冖冫凵刂勹匕匚卩囗夂夊宀尢屮巛廴廾彐彑彡彳忄扌攴攵氵灬爫爿牜犭疒癶礻纟罒肀艸艹虍衤襾覀讠豸辶钅阝飠饣⺬"];
  [v2 addCharactersInRange:NSMakeRange(11904, 342)];
  id result = v2;
  qword_26797D080 = (uint64_t)result;
  return result;
}

uint64_t sub_216190050(uint64_t a1, unsigned int a2)
{
  if (!a1 || !a2) {
    return 0;
  }
  id v4 = [NSString alloc];

  return [v4 initWithBytes:v5 length:a1 encoding:a2];
}

void sub_2161900B4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C0F58;
  *(_OWORD *)(a1 + ++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  operator new();
}

void sub_216190224(_Unwind_Exception *a1)
{
  sub_216193E50((id ***)(v2 + 56), 0);
  sub_2161868BC((const void **)(v2 + 24), 0);
  sub_2161868BC((const void **)(v2 + 16), 0);
  sub_216190578(v1, 0);
  _Unwind_Resume(a1);
}

void sub_2161902B0(uint64_t a1, const __CFURL *a2, const __CFArray *a3)
{
  uint64_t v5 = sub_2161AEC30(*MEMORY[0x263EFFB08], a2, 0);
  uint64_t v6 = v5;
  if (v5)
  {
    if (a3) {
      CFArrayRef v7 = a3;
    }
    else {
      CFArrayRef v7 = (const __CFArray *)&unk_26C6FFFE0;
    }
    sub_2161AEF0C((uint64_t)v5, v7);
  }

  sub_216190578((const void **)(a1 + 8), v6);
}

uint64_t sub_216190328(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C0F58;
  uint64_t v2 = (const void **)(a1 + 16);
  sub_2161868BC((const void **)(a1 + 16), 0);
  sub_2161868BC((const void **)(a1 + 24), 0);
  [*(void **)(a1 + 40) removeAllObjects];

  uint64_t v5 = *(const void **)(a1 + 64);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 272);
  if (v6) {
    sub_2161121B0(v6);
  }
  sub_21632929C(a1 + 72);
  sub_216193E50((id ***)(a1 + 56), 0);
  sub_2161868BC((const void **)(a1 + 24), 0);
  sub_2161868BC(v2, 0);
  sub_216190578((const void **)(a1 + 8), 0);
  return a1;
}

void sub_2161903FC(void *a1, uint64_t a2, const __CFString *a3)
{
  int v5 = (*(uint64_t (**)(void *))(*a1 + 232))(a1);
  sub_2162593E0(a3, v5, (a1[4] & 0x2000000) != 0);
  operator new();
}

void sub_216190508(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40BE1B2566);
  _Unwind_Resume(a1);
}

uint64_t sub_21619052C(uint64_t a1)
{
  sub_2161868BC((const void **)(a1 + 16), 0);
  sub_2161868BC((const void **)(a1 + 24), 0);
  uint64_t v4 = *(void **)(a1 + 40);

  return [v4 removeAllObjects];
}

void sub_216190578(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_2161905B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 && *(_DWORD *)(a1[31] + 4) <= 7u) {
    sub_21628F494(a4);
  }
  a1[32] = a4;
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void, void, void))(*a1 + 16);

  return v8(a1, a2, a3, 0, 0, 0, 0);
}

uint64_t sub_216190650(const void **a1, const __CFString *a2, const void *a3, uint64_t a4, const __CFArray *a5)
{
  (*((void (**)(const void **))*a1 + 33))(a1);
  a1[4] = a3;
  uint64_t v10 = (*((uint64_t (**)(const void **))*a1 + 36))(a1);
  if (v10)
  {
    *(unsigned char *)(v10 + 96) = (a3 & 0x80) == 0;
    sub_2162978A0(v10, 1);
  }
  if (CFStringCompare(a2, kMecabraAnalysisStringForFacemark[0], 0))
  {
    CFStringRef v11 = (const __CFString *)(*((uint64_t (**)(const void **, const __CFString *))*a1 + 38))(a1, a2);
    if (a2)
    {
      uint64_t v12 = (CFStringRef *)(a1 + 3);
      if ((*((unsigned int (**)(const void **))*a1 + 39))(a1))
      {
        CFStringRef v14 = *v12;
        if (*v12 && CFStringHasPrefix(v11, v14))
        {
          CFIndex Length = CFStringGetLength(*v12);
        }
        else
        {
          [**(void ***)a1[7] **(const char *)v14 v13];
          CFIndex Length = 0;
        }
        while (Length < CFStringGetLength(v11))
        {
          uint64_t CharacterAtIndex = CFStringGetCharacterAtIndex(v11, Length);
          if (a5 && Length < CFArrayGetCount(a5))
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a5, Length);
            [**(void ***)a1[7] addInputCharacter:v21 geometryModel:a4 geometryData:ValueAtIndex];
          }
          else
          {
            [**(void ***)a1[7] addInputCharacter:v18 geometryModel:a4];
          }
          ++Length;
        }
      }
      sub_2161868BC(a1 + 3, v11);
      CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
    }
    else
    {
      sub_2161868BC(a1 + 3, v11);
      CFStringRef Copy = 0;
    }
    sub_2161868BC(a1 + 2, Copy);
    return a1[1] && a1[2] != 0;
  }
  else
  {
    return sub_2161908DC(a1);
  }
}

uint64_t sub_2161908DC(void *a1)
{
  uint64_t v2 = a1[32];
  if (v2 && sub_216192194(v2, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x263EFFB40]) {
    return 0;
  }
  uint64_t v3 = a1[33];
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  std::string v5[2] = sub_2161914EC;
  v5[3] = &unk_2642692D8;
  void v5[4] = a1;
  sub_21632D828(v3, (uint64_t)v5);
  a1[6] = 0;
  return 1;
}

uint64_t sub_216190994(uint64_t a1, const char *a2, uint64_t a3)
{
  if (objc_msgSend_count(*(void **)(a1 + 40), a2, a3))
  {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  else
  {
    CFStringRef v7 = *(const __CFString **)(a1 + 16);
    if (v7 && CFStringGetLength(v7) >= 1)
    {
      uint64_t v8 = (void *)MEMORY[0x2166CAF50]();
      (*(void (**)(uint64_t))(*(void *)a1 + 248))(a1);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 312))(a1)) {
        (*(void (**)(uint64_t))(*(void *)a1 + 256))(a1);
      }
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 4++**(_DWORD **)(result + 8) = 0;
  }
  if (v6 == objc_msgSend_count(*(void **)(a1 + 40), v4, v5)) {
    return 0;
  }
  CFStringRef v11 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = v12 + 1;

  return [v11 objectAtIndex:v9];
}

uint64_t sub_216190AC8(void *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  v13[129] = *MEMORY[0x263EF8340];
  uint64_t result = a1[1];
  if (result)
  {
    uint64_t result = sub_2161AEE74(result, a2, a3);
    if (result)
    {
      memset(v13, 0, 512);
      char v11 = 0;
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void *, void *))(**(void **)(a1[1] + 16)
                                                                                      + 72))(*(void *)(a1[1] + 16), *(void *)(a1[1] + 40), 128, v13, v12);
      if (result >= 1)
      {
        uint64_t v9 = result;
LABEL_5:
        uint64_t v10 = 0;
        while (1)
        {
          uint64_t result = (*(uint64_t (**)(void *, const __CFString *, uint64_t, void, void, char *, uint64_t))(*a1 + 328))(a1, a2, a3, v13[v10], v12[v10], &v11, a4);
          if (v11) {
            break;
          }
          if (v9 == ++v10)
          {
            uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void *, void *))(**(void **)(a1[1] + 16)
                                                                                            + 72))(*(void *)(a1[1] + 16), *(void *)(a1[1] + 40), 128, v13, v12);
            uint64_t v9 = result;
            if (result >= 1) {
              goto LABEL_5;
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

void sub_216190C9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v20 = 0;
  double v21 = 0;
  uint64_t v22 = 0;
  sub_2161AF1F8(a1[1], a4, a5, &v20, &v17);
  uint64_t v12 = sub_216190050(v22, v19);
  uint64_t v13 = 0;
  switch((char)v17)
  {
    case 1:
      uint64_t v13 = *v20;
      break;
    case 2:
      uint64_t v13 = *(unsigned __int16 *)v20;
      break;
    case 4:
      uint64_t v13 = *(unsigned int *)v20;
      break;
    case 8:
      uint64_t v13 = *(void *)v20;
      break;
    default:
      break;
  }
  int v14 = 0;
  switch(v18)
  {
    case 1:
      int v14 = *v21;
      break;
    case 2:
      int v14 = *(unsigned __int16 *)v21;
      break;
    case 4:
    case 8:
      int v14 = *(_DWORD *)v21;
      break;
    default:
      break;
  }
  id v16 = (id)v12;
  int v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 272))(a1, a2, a3);
  (*(void (**)(uint64_t, id, uint64_t, void, uint64_t))(a7 + 16))(a7, v16, v13, (v14 != 0) & ~v15, a6);
}

BOOL sub_216190EA8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_2161E4888();
  if (MecabraCandidateIsEmojiCandidate(a2, v4, v5)) {
    return 0;
  }
  Surface = (void *)MecabraCandidateGetSurface(a2, v6, v7);
  if (objc_msgSend_rangeOfCharacterFromSet_(Surface, v9, v3) != 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  if (!MecabraCandidateGetDictionaryReading(a2, v10, v11)) {
    return 1;
  }
  DictionaryReading = (void *)MecabraCandidateGetDictionaryReading(a2, v12, v13);
  return [DictionaryReading rangeOfCharacterFromSet:v15].location == NSNotFound;
}

void sub_216190F30(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(void *)(a1 + 16) && *(void *)(a1 + 24))
  {
    uint64_t v4 = [***(void ****)(a1 + 56) a2:a3];
    sub_216366C90(v4, v5, v6, &v10);
    uint64_t v7 = v10;
    uint64_t v8 = v11;
    if (v10 != v11)
    {
      do
      {
        CFIndex Length = CFStringGetLength(v7[2]);
        if (Length >= CFStringGetLength(*(CFStringRef *)(a1 + 16))) {
          operator new();
        }
        v7 += 9;
      }
      while (v7 != v8);
      uint64_t v7 = v10;
    }
    if (v7)
    {
      uint64_t v11 = v7;
      operator delete(v7);
    }
  }
}

void sub_216191064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161910A8(void *result, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, int a6)
{
  if (result[2])
  {
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    void v6[2] = sub_216191134;
    v6[3] = &unk_2642692B8;
    int v7 = a6;
    v6[6] = result;
    v6[7] = a5;
    v6[8] = a2;
    v6[4] = a3;
    void v6[5] = a4;
    return (void *)sub_216190AC8(result, a3, a4, (uint64_t)v6);
  }
  return result;
}

uint64_t sub_216191134(uint64_t result, const __CFString *a2)
{
  if (a2) {
    sub_2161903FC(*(void **)(result + 48), (*(_DWORD *)(*(void *)(result + 48) + 32) >> 13) & 0x1000u | *(_DWORD *)(result + 72), a2);
  }
  return result;
}

void sub_2161914EC()
{
}

void sub_21619157C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

id sub_2161915A0(void *a1, const __CFString *a2)
{
  id v4 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v5 = a1[32];
  if (!v5 || sub_216192194(v5, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x263EFFB40])
  {
    uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 288))(a1);
    if (v6)
    {
      if (*(void *)(v6 + 8) && a1[2])
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D088, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797D088))
        {
          __cxa_atexit((void (*)(void *))sub_216191A00, &qword_26797D090, &dword_2160F5000);
          __cxa_guard_release(&qword_26797D088);
        }
        uint64_t v7 = qword_26797D090;
        if (qword_26797D098 != qword_26797D090)
        {
          uint64_t v8 = qword_26797D098 - 32;
          do
          {
            sub_2161936EC(v8, *(void **)(v8 + 8));
            BOOL v9 = v8 == v7;
            v8 -= 32;
          }
          while (!v9);
        }
        qword_26797D098 = v7;
        sub_2161E1FB8(a2);
      }
    }
  }
  return v4;
}

void sub_216191980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    MEMORY[0x2166CA7C0](a22, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void **sub_216191A00(void **a1)
{
  uint64_t v3 = a1;
  sub_2161921F0(&v3);
  return a1;
}

void sub_216191A38(uint64_t a1, uint64_t a2, int a3)
{
  sub_21619420C((uint64_t *)&v18, a2);
  int v21 = a3;
  uint64_t v4 = qword_26797D098;
  if ((unint64_t)qword_26797D098 >= qword_26797D0A0)
  {
    uint64_t v8 = (qword_26797D098 - qword_26797D090) >> 5;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v10 = qword_26797D0A0 - qword_26797D090;
    if ((qword_26797D0A0 - qword_26797D090) >> 4 > v9) {
      unint64_t v9 = v10 >> 4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    void v22[4] = &qword_26797D0A0;
    if (v11) {
      uint64_t v12 = (char *)sub_216115A58((uint64_t)&qword_26797D0A0, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v14 = &v12[32 * v8];
    v22[0] = v12;
    v22[1] = v14;
    v22[3] = &v12[32 * v11];
    *(void *)int v14 = v18;
    int v15 = v19;
    *((void *)v14 + 1) = v19;
    id v16 = v14 + 8;
    uint64_t v17 = v20;
    *((void *)v14 + 2) = v20;
    if (v17)
    {
      void v15[2] = v16;
      char v18 = &v19;
      unsigned __int8 v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      *(void *)int v14 = v16;
    }
    *(_DWORD *)&v12[32 * v8 + 24] = v21;
    v22[2] = v14 + 32;
    sub_21619236C(&qword_26797D090, v22);
    uint64_t v13 = qword_26797D098;
    sub_21619252C(v22);
  }
  else
  {
    *(void *)qword_26797D098 = v18;
    uint64_t v5 = v19;
    *(void *)(v4 + ++**(_DWORD **)(result + 8) = v19;
    uint64_t v6 = v4 + 8;
    uint64_t v7 = v20;
    *(void *)(v4 + 16) = v20;
    if (v7)
    {
      std::string v5[2] = v6;
      char v18 = &v19;
      unsigned __int8 v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      *(void *)uint64_t v4 = v6;
    }
    *(_DWORD *)(v4 + 24) = v21;
    uint64_t v13 = v4 + 32;
  }
  qword_26797D098 = v13;
  sub_2161936EC((uint64_t)&v18, v19);
}

void sub_216191BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_21619252C((void **)va1);
  sub_2161936EC((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t sub_216191BF4(uint64_t a1, uint64_t a2)
{
  if (sub_216192194(a2, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x263EFFB40]) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 32));
  CFIndex v5 = Count - 1;
  if (Count < 1) {
    return 1;
  }
  CFIndex v6 = 0;
  do
  {
    uint64_t v7 = sub_21628F1BC(a2, v6);
    uint64_t result = (*(uint64_t (**)(uint64_t, const void *, BOOL))(*(void *)a1 + 56))(a1, v7, v6 < v5);
    if (result) {
      BOOL v9 = v5 == v6;
    }
    else {
      BOOL v9 = 1;
    }
    ++v6;
  }
  while (!v9);
  return result;
}

uint64_t sub_216191CBC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1[32];
  if (v6 && sub_216192194(v6, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x263EFFB40]) {
    return 0;
  }
  if (a2)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = [a2 a2:a3];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 7)
    {
      if ((v7 & 0x80) == 0)
      {
        uint64_t v11 = a1[33];
        CFStringRef v12 = (const __CFString *)[a2 v9:v10];
        return sub_21632D588(v11, v12, 0);
      }
      return 0;
    }
  }
  uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 288))(a1);
  if ((*(unsigned int (**)(void *))(*a1 + 280))(a1)) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    return 0;
  }
  if (!(*(unsigned int (**)(void *, void *))(*a1 + 336))(a1, a2)) {
    return 0;
  }
  if (sub_2161F1D44(a2, v16, v17))
  {
    uint64_t v20 = [a2 v18:v19];
    if (((*(uint64_t (**)(uint64_t))(*(void *)v20 + 104))(v20) & 0x1000) != 0) {
      return 0;
    }
  }
  int v21 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v14 + 56);

  return v21(v14, a2, a3, 1);
}

uint64_t sub_216191EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 104))(result, a2, a3);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
      return 1;
    }
  }
  return result;
}

uint64_t sub_216191F8C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288))(a1);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 96);
    return v2();
  }
  return result;
}

void sub_21619201C(uint64_t a1, const __CFString *a2)
{
  id v6 = sub_2161915A0((void *)a1, a2);
  if (objc_msgSend_count(v6, v3, v4)) {
    [*(void **)(a1 + 40) addObjectsFromArray:v5];
  }
}

uint64_t sub_216192078(uint64_t *a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 288))(a1);
  if (v2) {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 88))(v2);
  }
  else {
    int v3 = 1;
  }
  return v3 & sub_21632D984(a1[33]);
}

void sub_216192104()
{
}

void sub_216192170(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40A1F7DA0CLL);
  _Unwind_Resume(a1);
}

const void *sub_216192194(uint64_t a1, const void *a2)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 56);
  if (!v3 || !CFDictionaryContainsKey(v3, a2)) {
    return 0;
  }
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 56);

  return CFDictionaryGetValue(v5, a2);
}

void sub_2161921F0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    CFDictionaryRef v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)v4 - 32;
      do
      {
        sub_2161936EC(v6, *(void **)(v6 + 8));
        BOOL v7 = v6 == (void)v2;
        v6 -= 32;
      }
      while (!v7);
      CFDictionaryRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_216192280(uint64_t *a1, _WORD *a2)
{
  uint64_t v4 = *a1;
  CFDictionaryRef v5 = *(_WORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_WORD **)v4;
    uint64_t v9 = (uint64_t)v5 - *(void *)v4;
    if (v9 <= -3) {
      sub_21610CB04();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = *v6 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      uint64_t v12 = v10 + 1;
    }
    else {
      uint64_t v12 = *v6 - (void)v8;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_21610FD44((uint64_t)v6, v13);
      uint64_t v8 = *(_WORD **)v4;
      CFDictionaryRef v5 = *(_WORD **)(v4 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    BOOL v15 = &v14[2 * v10];
    id v16 = &v14[2 * v13];
    *(_WORD *)BOOL v15 = *a2;
    BOOL v7 = v15 + 2;
    while (v5 != v8)
    {
      __int16 v17 = *--v5;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + ++**(_DWORD **)(result + 8) = v7;
    *(void *)(v4 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *CFDictionaryRef v5 = *a2;
    BOOL v7 = v5 + 1;
  }
  *(void *)(v4 + ++**(_DWORD **)(result + 8) = v7;
  return a1;
}

uint64_t sub_21619236C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2161923E4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2161923E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  std::string v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 32);
      v8 -= 32;
      *(void *)(v7 - 32) = v9;
      uint64_t v10 = (void *)(a3 - 24);
      uint64_t v11 = *(void *)(a3 - 24);
      *(void *)(v7 - 24) = v11;
      uint64_t v12 = v7 - 24;
      uint64_t v13 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 32) = v10;
        void *v10 = 0;
        *(void *)(a3 - 16) = 0;
      }
      else
      {
        *(void *)(v7 - 32) = v12;
      }
      *(_DWORD *)(v7 - ++**(_DWORD **)(result + 8) = *(_DWORD *)(a3 - 8);
      uint64_t v7 = *((void *)&v19 + 1) - 32;
      *((void *)&v19 + 1) -= 32;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  sub_2161924B0((uint64_t)v16);
  return v14;
}

uint64_t sub_2161924B0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2161924E8(a1);
  }
  return a1;
}

void sub_2161924E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    sub_2161936EC(v1, *(void **)(v1 + 8));
    v1 += 32;
  }
}

void **sub_21619252C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216192560(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_2161936EC(i - 32, *(void **)(i - 24));
  }
}

void sub_2161925A8(unint64_t a1, void *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
void sub_216192988(uint64_t a1, void *a2, uint64_t (**a3)(void **, uint64_t))
{
  if ((void *)a1 != a2)
  {
    char v5 = (void *)(a1 + 32);
    if ((void *)(a1 + 32) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (void *)a1;
      do
      {
        uint64_t v9 = v5;
        if ((*a3)(v5, (uint64_t)v8))
        {
          uint64_t v10 = v8 + 5;
          unint64_t v11 = (void *)v8[5];
          unint64_t v19 = (void *)*v9;
          char v20 = v11;
          uint64_t v21 = v8[6];
          if (v21)
          {
            std::string v11[2] = &v20;
            *uint64_t v9 = v10;
            void *v10 = 0;
            v8[6] = 0;
          }
          else
          {
            unint64_t v19 = &v20;
          }
          int v22 = *((_DWORD *)v8 + 14);
          uint64_t v12 = v7;
          while (1)
          {
            uint64_t v13 = a1 + v12;
            sub_216193680(a1 + v12 + 32, (void *)(a1 + v12));
            *(_DWORD *)(a1 + v12 + 56) = *(_DWORD *)(a1 + v12 + 24);
            if (!v12) {
              break;
            }
            v12 -= 32;
            if (((*a3)(&v19, v13 - 32) & 1) == 0)
            {
              uint64_t v14 = a1 + v12 + 32;
              goto LABEL_13;
            }
          }
          uint64_t v14 = a1;
LABEL_13:
          uint64_t v15 = v14 + 8;
          sub_2161936EC(v14, *(void **)(v14 + 8));
          unint64_t v16 = v20;
          *(void *)uint64_t v14 = v19;
          *(void *)(v14 + ++**(_DWORD **)(result + 8) = v16;
          uint64_t v17 = v21;
          *(void *)(v14 + 16) = v21;
          if (v17)
          {
            int v18 = 0;
            std::string v16[2] = v15;
            unint64_t v19 = &v20;
            char v20 = 0;
            uint64_t v21 = 0;
          }
          else
          {
            *(void *)uint64_t v14 = v15;
            int v18 = v20;
          }
          *(_DWORD *)(v14 + 24) = v22;
          sub_2161936EC((uint64_t)&v19, v18);
        }
        char v5 = v9 + 4;
        v7 += 32;
        uint64_t v8 = v9;
      }
      while (v9 + 4 != a2);
    }
  }
}

void sub_216192AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_216192B0C(uint64_t a1, void *a2, uint64_t (**a3)(void **, uint64_t))
{
  if ((void *)a1 != a2)
  {
    uint64_t v4 = (void *)a1;
    char v5 = (void *)(a1 + 32);
    if ((void *)(a1 + 32) != a2)
    {
      uint64_t v7 = (_DWORD *)(a1 + 56);
      do
      {
        uint64_t v8 = v5;
        if ((*a3)(v5, (uint64_t)v4))
        {
          uint64_t v9 = v4 + 5;
          uint64_t v10 = (void *)v4[5];
          uint64_t v17 = (void *)*v8;
          int v18 = v10;
          uint64_t v19 = v4[6];
          if (v19)
          {
            std::string v10[2] = &v18;
            *uint64_t v8 = v9;
            *uint64_t v9 = 0;
            void v4[6] = 0;
          }
          else
          {
            uint64_t v17 = &v18;
          }
          int v20 = *((_DWORD *)v4 + 14);
          unint64_t v11 = v7;
          do
          {
            sub_216193680((uint64_t)(v11 - 6), (void *)v11 - 7);
            _DWORD *v11 = *(v11 - 8);
            char v12 = (*a3)(&v17, (uint64_t)(v11 - 22));
            v11 -= 8;
          }
          while ((v12 & 1) != 0);
          uint64_t v13 = v11 - 4;
          sub_2161936EC((uint64_t)(v11 - 6), *((void **)v11 - 2));
          uint64_t v14 = v18;
          *((void *)v11 - 3) = v17;
          *((void *)v11 - 2) = v14;
          uint64_t v15 = v19;
          *((void *)v11 - 1) = v19;
          if (v15)
          {
            unint64_t v16 = 0;
            void v14[2] = v13;
            uint64_t v17 = &v18;
            int v18 = 0;
            uint64_t v19 = 0;
          }
          else
          {
            *((void *)v11 - 3) = v13;
            unint64_t v16 = v18;
          }
          _DWORD *v11 = v20;
          sub_2161936EC((uint64_t)&v17, v16);
        }
        char v5 = v8 + 4;
        v7 += 8;
        uint64_t v4 = v8;
      }
      while (v8 + 4 != a2);
    }
  }
}

void sub_216192C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_216192C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = (int *)(a1 + 24);
      sub_216193444((uint64_t *)a1, a3);
      unint64_t v11 = (int *)(a3 + 24);
      uint64_t result = 1;
LABEL_10:
      int v14 = *v10;
      int *v10 = *v11;
      int *v11 = v14;
      return result;
    }
    sub_216193444((uint64_t *)a1, a2);
    uint64_t v10 = (int *)(a2 + 24);
    int v13 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = v13;
    if ((*a4)(a3, a2))
    {
      sub_216193444((uint64_t *)a2, a3);
      unint64_t v11 = (int *)(a3 + 24);
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    sub_216193444((uint64_t *)a2, a3);
    unint64_t v11 = (int *)(a2 + 24);
    int v12 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = v12;
    if ((*a4)(a2, a1))
    {
      sub_216193444((uint64_t *)a1, a2);
      uint64_t v10 = (int *)(a1 + 24);
LABEL_9:
      uint64_t result = 2;
      goto LABEL_10;
    }
  }
  return 1;
}

unint64_t sub_216192DA0(uint64_t a1, unint64_t a2, uint64_t (**a3)(void **, unint64_t))
{
  unint64_t v4 = a2;
  char v6 = (void *)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v17 = *(void **)a1;
  int v18 = v7;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    void v7[2] = &v18;
    *(void *)a1 = v6;
    void *v6 = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v17 = &v18;
  }
  int v20 = *(_DWORD *)(a1 + 24);
  if ((*a3)(&v17, a2 - 32))
  {
    unint64_t v8 = a1;
    do
      v8 += 32;
    while (((*a3)(&v17, v8) & 1) == 0);
  }
  else
  {
    unint64_t v9 = a1 + 32;
    do
    {
      unint64_t v8 = v9;
      if (v9 >= v4) {
        break;
      }
      int v10 = (*a3)(&v17, v9);
      unint64_t v9 = v8 + 32;
    }
    while (!v10);
  }
  if (v8 < v4)
  {
    do
      v4 -= 32;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  while (v8 < v4)
  {
    sub_216193444((uint64_t *)v8, v4);
    int v11 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v11;
    do
      v8 += 32;
    while (!(*a3)(&v17, v8));
    do
      v4 -= 32;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  if (v8 - 32 != a1)
  {
    sub_216193680(a1, (void *)(v8 - 32));
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 - 8);
  }
  unint64_t v12 = v8 - 24;
  sub_2161936EC(v8 - 32, *(void **)(v8 - 24));
  *(void *)(v8 - 32) = v17;
  int v13 = v18;
  *(void *)(v8 - 24) = v18;
  uint64_t v14 = v19;
  *(void *)(v8 - 16) = v19;
  if (v14)
  {
    uint64_t v15 = 0;
    v13[2] = v12;
    uint64_t v17 = &v18;
    int v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *(void *)(v8 - 32) = v12;
    uint64_t v15 = v18;
  }
  *(_DWORD *)(v8 - ++**(_DWORD **)(result + 8) = v20;
  sub_2161936EC((uint64_t)&v17, v15);
  return v8;
}

void sub_216192F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

unint64_t sub_216192F9C(uint64_t a1, unint64_t a2, uint64_t (**a3)(uint64_t, void **))
{
  char v6 = (void *)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v19 = *(void **)a1;
  int v20 = v7;
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    void v7[2] = &v20;
    *(void *)a1 = v6;
    void *v6 = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v19 = &v20;
  }
  uint64_t v8 = 0;
  int v22 = *(_DWORD *)(a1 + 24);
  do
  {
    char v9 = (*a3)(a1 + v8 + 32, &v19);
    v8 += 32;
  }
  while ((v9 & 1) != 0);
  unint64_t v10 = a1 + v8;
  if (v8 == 32)
  {
    do
    {
      if (v10 >= a2) {
        break;
      }
      a2 -= 32;
    }
    while (((*a3)(a2, &v19) & 1) == 0);
  }
  else
  {
    do
      a2 -= 32;
    while (!(*a3)(a2, &v19));
  }
  unint64_t v11 = a1 + v8;
  if (v10 < a2)
  {
    unint64_t v12 = a2;
    do
    {
      sub_216193444((uint64_t *)v11, v12);
      int v13 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
      *(_DWORD *)(v12 + 24) = v13;
      do
        v11 += 32;
      while (((*a3)(v11, &v19) & 1) != 0);
      do
        v12 -= 32;
      while (!(*a3)(v12, &v19));
    }
    while (v11 < v12);
  }
  if (v11 - 32 != a1)
  {
    sub_216193680(a1, (void *)(v11 - 32));
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v11 - 8);
  }
  unint64_t v14 = v11 - 24;
  sub_2161936EC(v11 - 32, *(void **)(v11 - 24));
  *(void *)(v11 - 32) = v19;
  uint64_t v15 = v20;
  *(void *)(v11 - 24) = v20;
  uint64_t v16 = v21;
  *(void *)(v11 - 16) = v21;
  if (v16)
  {
    uint64_t v17 = 0;
    void v15[2] = v14;
    uint64_t v19 = &v20;
    int v20 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    *(void *)(v11 - 32) = v14;
    uint64_t v17 = v20;
  }
  *(_DWORD *)(v11 - ++**(_DWORD **)(result + 8) = v22;
  sub_2161936EC((uint64_t)&v19, v17);
  return v11 - 32;
}

void sub_216193178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_2161931A0(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  BOOL v6 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      if ((*a3)(a2 - 32, a1))
      {
        sub_216193444((uint64_t *)a1, a2 - 32);
        int v7 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - ++**(_DWORD **)(result + 8) = v7;
      }
      return v6;
    case 3:
      sub_216192C70(a1, a1 + 32, a2 - 32, a3);
      return v6;
    case 4:
      sub_21619349C(a1, a1 + 32, a1 + 64, a2 - 32, a3);
      return v6;
    case 5:
      sub_216193574(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32, a3);
      return v6;
    default:
      uint64_t v8 = a1 + 64;
      sub_216192C70(a1, a1 + 32, a1 + 64, a3);
      uint64_t v9 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (!(*a3)(v9, v8))
  {
LABEL_20:
    uint64_t v8 = v9;
    v10 += 32;
    v9 += 32;
    if (v9 == a2) {
      return 1;
    }
  }
  unint64_t v12 = (void *)(v9 + 8);
  int v13 = *(void **)(v9 + 8);
  uint64_t v21 = *(void ***)v9;
  int v22 = v13;
  uint64_t v23 = *(void *)(v9 + 16);
  if (v23)
  {
    v13[2] = &v22;
    *(void *)uint64_t v9 = v12;
    *unint64_t v12 = 0;
    *(void *)(v9 + 16) = 0;
  }
  else
  {
    uint64_t v21 = &v22;
  }
  int v24 = *(_DWORD *)(v9 + 24);
  uint64_t v14 = v10;
  while (1)
  {
    uint64_t v15 = a1 + v14;
    sub_216193680(a1 + v14 + 96, (void *)(a1 + v14 + 64));
    *(_DWORD *)(a1 + v14 + 120) = *(_DWORD *)(a1 + v14 + 88);
    if (v14 == -64) {
      break;
    }
    v14 -= 32;
    if (((*a3)((uint64_t)&v21, v15 + 32) & 1) == 0)
    {
      uint64_t v16 = a1 + v14 + 96;
      goto LABEL_15;
    }
  }
  uint64_t v16 = a1;
LABEL_15:
  uint64_t v17 = v16 + 8;
  sub_2161936EC(v16, *(void **)(v16 + 8));
  int v18 = v22;
  *(void *)uint64_t v16 = v21;
  *(void *)(v16 + ++**(_DWORD **)(result + 8) = v18;
  uint64_t v19 = v23;
  *(void *)(v16 + 16) = v23;
  if (v19)
  {
    v18[2] = v17;
    uint64_t v21 = &v22;
    int v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    *(void *)uint64_t v16 = v17;
  }
  *(_DWORD *)(v16 + 24) = v24;
  if (++v11 != 8)
  {
    sub_2161936EC((uint64_t)&v21, v22);
    goto LABEL_20;
  }
  BOOL v6 = v9 + 32 == a2;
  sub_2161936EC((uint64_t)&v21, v22);
  return v6;
}

void sub_216193414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *sub_216193444(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  CFDictionaryRef v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + ++**(_DWORD **)(result + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    uint64_t result = (uint64_t *)(*v3 + 16);
  }
  void *result = (uint64_t)v3;
  BOOL v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    BOOL v6 = (void *)a2;
  }
  void *v6 = a2 + 8;
  return result;
}

uint64_t *sub_21619349C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  sub_216192C70(a1, a2, a3, a5);
  uint64_t result = (uint64_t *)(*a5)(a4, a3);
  if (result)
  {
    sub_216193444((uint64_t *)a3, a4);
    int v11 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v11;
    uint64_t result = (uint64_t *)(*a5)(a3, a2);
    if (result)
    {
      sub_216193444((uint64_t *)a2, a3);
      int v12 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v12;
      uint64_t result = (uint64_t *)(*a5)(a2, a1);
      if (result)
      {
        uint64_t result = sub_216193444((uint64_t *)a1, a2);
        int v13 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v13;
      }
    }
  }
  return result;
}

uint64_t *sub_216193574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  sub_21619349C(a1, a2, a3, a4, a6);
  uint64_t result = (uint64_t *)(*a6)(a5, a4);
  if (result)
  {
    sub_216193444((uint64_t *)a4, a5);
    int v13 = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a5 + 24) = v13;
    uint64_t result = (uint64_t *)(*a6)(a4, a3);
    if (result)
    {
      sub_216193444((uint64_t *)a3, a4);
      int v14 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 24) = v14;
      uint64_t result = (uint64_t *)(*a6)(a3, a2);
      if (result)
      {
        sub_216193444((uint64_t *)a2, a3);
        int v15 = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 24) = v15;
        uint64_t result = (uint64_t *)(*a6)(a2, a1);
        if (result)
        {
          uint64_t result = sub_216193444((uint64_t *)a1, a2);
          int v16 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a2 + 24) = v16;
        }
      }
    }
  }
  return result;
}

void sub_216193680(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_2161936EC(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void sub_2161936EC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2161936EC(a1, *a2);
    sub_2161936EC(a1, a2[1]);
    sub_216193748((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_216193748(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_2161121B0(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    CFDictionaryRef v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_21619379C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 32 * v10;
      do
      {
        sub_2161938C8(a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          sub_216193444((uint64_t *)v14, a1);
          int v15 = *(_DWORD *)(v14 + 24);
          *(_DWORD *)(v14 + 24) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = v15;
          sub_2161938C8(a1, a4, v9, a1);
        }
        v14 += 32;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 33)
    {
      unint64_t v16 = (unint64_t)v8 >> 5;
      do
      {
        sub_216193AAC(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v16);
        v6 -= 32;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_2161938C8(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 5)
    {
      uint64_t v10 = (a4 - a1) >> 4;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 32 * (v10 + 1);
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, v12 + 32))
      {
        v12 += 32;
        uint64_t v11 = v13;
      }
      if (((*a2)(v12, v5) & 1) == 0)
      {
        uint64_t v14 = (void *)(v5 + 8);
        int v15 = *(void **)(v5 + 8);
        int v22 = *(void **)v5;
        uint64_t v23 = v15;
        uint64_t v24 = *(void *)(v5 + 16);
        if (v24)
        {
          void v15[2] = &v23;
          *(void *)uint64_t v5 = v14;
          *uint64_t v14 = 0;
          *(void *)(v5 + 16) = 0;
        }
        else
        {
          int v22 = &v23;
        }
        int v25 = *(_DWORD *)(v5 + 24);
        do
        {
          uint64_t v16 = v12;
          sub_216193680(v5, (void *)v12);
          *(_DWORD *)(v5 + 24) = *(_DWORD *)(v12 + 24);
          if (v7 < v11) {
            break;
          }
          uint64_t v17 = (2 * v11) | 1;
          uint64_t v12 = a1 + 32 * v17;
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v17;
          }
          else if ((*a2)(a1 + 32 * v17, v12 + 32))
          {
            v12 += 32;
          }
          else
          {
            uint64_t v11 = v17;
          }
          uint64_t v5 = v16;
        }
        while (!(*a2)(v12, (uint64_t)&v22));
        uint64_t v18 = v16 + 8;
        sub_2161936EC(v16, *(void **)(v16 + 8));
        *(void *)uint64_t v16 = v22;
        uint64_t v19 = v23;
        *(void *)(v16 + ++**(_DWORD **)(result + 8) = v23;
        uint64_t v20 = v24;
        *(void *)(v16 + 16) = v24;
        if (v20)
        {
          uint64_t v21 = 0;
          v19[2] = v18;
          int v22 = &v23;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
        }
        else
        {
          *(void *)uint64_t v16 = v18;
          uint64_t v21 = v23;
        }
        *(_DWORD *)(v16 + 24) = v25;
        sub_2161936EC((uint64_t)&v22, v21);
      }
    }
  }
}

void sub_216193A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_216193AAC(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = (void *)(a1 + 8);
    uint64_t v8 = *(void **)(a1 + 8);
    uint64_t v19 = *(void ***)a1;
    uint64_t v20 = v8;
    uint64_t v21 = *(void *)(a1 + 16);
    if (v21)
    {
      void v8[2] = &v20;
      *(void *)a1 = v7;
      void *v7 = 0;
      *(void *)(a1 + 16) = 0;
    }
    else
    {
      uint64_t v19 = &v20;
    }
    int v22 = *(_DWORD *)(a1 + 24);
    uint64_t v9 = sub_216193C3C(a1, a3, a4);
    uint64_t v10 = v9;
    if (v9 == a2 - 32)
    {
      uint64_t v16 = (void *)(v9 + 8);
      sub_2161936EC(v9, *(void **)(v9 + 8));
      *(void *)uint64_t v10 = v19;
      uint64_t v17 = v20;
      *uint64_t v16 = v20;
      uint64_t v18 = v21;
      *(void *)(v10 + 16) = v21;
      if (v18)
      {
        v17[2] = v16;
        uint64_t v19 = &v20;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        *(void *)uint64_t v10 = v16;
      }
      *(_DWORD *)(v10 + 24) = v22;
    }
    else
    {
      sub_216193680(v9, (void *)(a2 - 32));
      uint64_t v12 = a2 - 24;
      uint64_t v11 = *(void **)(a2 - 24);
      *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 8);
      uint64_t v13 = v10 + 32;
      sub_2161936EC(a2 - 32, v11);
      uint64_t v14 = v20;
      *(void *)(a2 - 32) = v19;
      *(void *)(a2 - 24) = v14;
      uint64_t v15 = v21;
      *(void *)(a2 - 16) = v21;
      if (v15)
      {
        void v14[2] = v12;
        uint64_t v19 = &v20;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        *(void *)(a2 - 32) = v12;
      }
      *(_DWORD *)(a2 - ++**(_DWORD **)(result + 8) = v22;
      sub_216193CF8(a1, v13, (uint64_t (**)(uint64_t, uint64_t))a3, (v13 - a1) >> 5);
    }
    sub_2161936EC((uint64_t)&v19, v20);
  }
}

void sub_216193C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_216193C3C(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 32 * v6 + 32;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 32 * v6 + 32, a1 + 32 * v6 + 64))
    {
      v9 += 32;
      uint64_t v10 = v11;
    }
    sub_216193680(a1, (void *)v9);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v9 + 24);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void sub_216193CF8(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = a1 + 32 * (v4 >> 1);
    uint64_t v10 = a2 - 32;
    if ((*a3)(v9, a2 - 32))
    {
      uint64_t v11 = (void *)(a2 - 24);
      uint64_t v12 = *(void **)(a2 - 24);
      uint64_t v17 = *(void **)(a2 - 32);
      uint64_t v18 = v12;
      uint64_t v19 = *(void *)(a2 - 16);
      if (v19)
      {
        v12[2] = &v18;
        *(void *)uint64_t v10 = v11;
        void *v11 = 0;
        *(void *)(a2 - 16) = 0;
      }
      else
      {
        uint64_t v17 = &v18;
      }
      int v20 = *(_DWORD *)(a2 - 8);
      do
      {
        uint64_t v13 = v9;
        sub_216193680(v10, (void *)v9);
        *(_DWORD *)(v10 + 24) = *(_DWORD *)(v9 + 24);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = a1 + 32 * v8;
        uint64_t v10 = v13;
      }
      while (((*a3)(v9, (uint64_t)&v17) & 1) != 0);
      uint64_t v14 = v13 + 8;
      sub_2161936EC(v13, *(void **)(v13 + 8));
      uint64_t v15 = v18;
      *(void *)uint64_t v13 = v17;
      *(void *)(v13 + ++**(_DWORD **)(result + 8) = v15;
      uint64_t v16 = v19;
      *(void *)(v13 + 16) = v19;
      if (v16)
      {
        void v15[2] = v14;
        uint64_t v17 = &v18;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v15 = 0;
      }
      else
      {
        *(void *)uint64_t v13 = v14;
      }
      *(_DWORD *)(v13 + 24) = v20;
      sub_2161936EC((uint64_t)&v17, v15);
    }
  }
}

void sub_216193E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

id ***sub_216193E50(id ***result, id **a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    CFDictionaryRef v3 = *v2;
    *uint64_t v2 = 0;
    if (v3) {
      sub_21636701C((uint64_t)v2, v3);
    }
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t *sub_216193EBC(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)sub_216193F40((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    sub_21612A650(a1, v9, v7, v6);
  }
  return v6;
}

void *sub_216193F40(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = *a3;
        uint64_t v9 = v4[4];
        int v10 = (*(uint64_t (**)(uint64_t *))(**a3 + 112))(*a3);
        int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 112))(v9);
        uint64_t v12 = *v8;
        if (v10 == v11) {
          break;
        }
        int v22 = (*(uint64_t (**)(uint64_t *))(v12 + 112))(v8);
        if (v22 >= (*(int (**)(uint64_t))(*(void *)v9 + 112))(v9)) {
          goto LABEL_4;
        }
LABEL_8:
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_14;
        }
      }
      CFStringRef v13 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(v12 + 24))(v8);
      CFStringRef v14 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
      if (CFStringCompare(v13, v14, 0) < 0) {
        goto LABEL_8;
      }
LABEL_4:
      uint64_t v15 = (uint64_t *)v7[4];
      uint64_t v16 = *a3;
      int v17 = (*(uint64_t (**)(uint64_t *))(*v15 + 112))(v15);
      int v18 = (*(uint64_t (**)(uint64_t *))(*v16 + 112))(v16);
      uint64_t v19 = *v15;
      if (v17 == v18)
      {
        CFStringRef v20 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(v19 + 24))(v15);
        CFStringRef v21 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
        if ((CFStringCompare(v20, v21, 0) & 0x8000000000000000) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        int v23 = (*(uint64_t (**)(uint64_t *))(v19 + 112))(v15);
        if (v23 >= (*(int (**)(uint64_t *))(*v16 + 112))(v16)) {
          goto LABEL_14;
        }
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
      if (!v4) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v7 = (void *)(a1 + 8);
LABEL_14:
  *a2 = v7;
  return v5;
}

uint64_t *sub_21619420C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216194264(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_21619424C(_Unwind_Exception *a1)
{
  sub_2161936EC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216194264(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = sub_2161942F0(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_2161942F0(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v6 = sub_216194388(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    sub_216194520((uint64_t)a1, a4, (uint64_t)v10);
    sub_21612A650(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216194688((uint64_t)v10, 0);
  }
  return v7;
}

void **sub_216194388(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  BOOL v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (sub_216179024(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      uint64_t v12 = (void *)a2;
    }
    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        uint64_t v16 = (void *)a2;
        do
        {
          uint64_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          uint64_t v16 = v12;
        }
        while (v17);
      }
      if ((sub_216179024(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((sub_216179024((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    CFStringRef v14 = *(void ***)(a2 + 8);
    do
    {
      uint64_t v15 = v14;
      CFStringRef v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    uint64_t v19 = (void **)a2;
    do
    {
      uint64_t v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      uint64_t v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((sub_216179024(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:

  return (void **)sub_21619458C((uint64_t)a1, a3, a5);
}

void *sub_216194520@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + ++**(_DWORD **)(result + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_216194620(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216194574(_Unwind_Exception *a1)
{
  sub_216194688(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_21619458C(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = v4 + 4;
        if ((sub_216179024(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((sub_216179024(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *sub_216194620(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  uint64_t v5 = *((void *)a2 + 4);
  __dst[3] = *((void *)a2 + 3);
  __dst[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void sub_216194688(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216193748((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

BOOL sub_2161946E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v9 = (char **)(a1 + 2);
  unint64_t v8 = (void *)a1[2];
  v9[8] = 0;
  v9[9] = 0;
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  *BOOL v9 = 0;
  v9[1] = 0;
  void v9[2] = 0;
  if (a2)
  {
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = *(void *)(v10 + 8);
    }
    while (v10);
    sub_216194834(v9 + 4);
    uint64_t v13 = v12;
    *uint64_t v12 = v11;
    v12[1] = 0;
    v12[2] = 0;
    void v12[3] = 0;
    v12[4] = a4;
    a1[1] = a3;
    uint64_t v15 = (char *)a1[3];
    unint64_t v14 = a1[4];
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v17 = (v15 - *v9) >> 3;
      if ((unint64_t)(v17 + 1) >> 61) {
        sub_21610CB04();
      }
      uint64_t v18 = v14 - (void)*v9;
      uint64_t v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
        uint64_t v19 = v17 + 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)sub_216188754(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      int v22 = (void *)(v20 + 8 * v17);
      unint64_t v23 = v20 + 8 * v21;
      *int v22 = v13;
      uint64_t v16 = (uint64_t)(v22 + 1);
      int v25 = (char *)a1[2];
      uint64_t v24 = (char *)a1[3];
      if (v24 != v25)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *--int v22 = v26;
        }
        while (v24 != v25);
        uint64_t v24 = *v9;
      }
      a1[2] = v22;
      a1[3] = v16;
      a1[4] = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(void *)uint64_t v15 = v12;
      uint64_t v16 = (uint64_t)(v15 + 8);
    }
    a1[3] = v16;
    sub_216194C14(a1[2], v16, (v16 - a1[2]) >> 3);
  }
  return a2 != 0;
}

double sub_216194834(void *a1)
{
  uint64_t v1 = a1[5];
  unint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  if (v3 == v2)
  {
    uint64_t v3 = 0;
    ++v1;
    a1[4] = 0;
    a1[5] = v1;
  }
  uint64_t v4 = a1[1];
  if (v1 == (a1[2] - v4) >> 3)
  {
    is_mul_ok(v2, 0x28uLL);
    operator new[]();
  }
  uint64_t v5 = *(void *)(v4 + 8 * v1);
  a1[4] = v3 + 1;
  uint64_t v6 = v5 + 40 * v3;
  *(void *)(v6 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  return result;
}

uint64_t sub_216194984(void *a1)
{
  unint64_t v2 = (void *)a1[2];
  uint64_t v3 = a1[3];
  if (v2 == (void *)v3) {
    return 0;
  }
  int v4 = 0;
  while (1)
  {
    uint64_t v5 = (void *)*v2;
    if (v3 - (uint64_t)v2 >= 9)
    {
      uint64_t v6 = 0;
      unint64_t v7 = (unint64_t)(v3 - (void)v2) >> 3;
      uint64_t v8 = v7 - 2;
      if (v7 < 2) {
        uint64_t v8 = v7 - 1;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = v2;
      do
      {
        uint64_t v11 = &v10[v6];
        uint64_t v14 = v11[1];
        uint64_t v12 = v11 + 1;
        uint64_t v13 = v14;
        uint64_t v15 = (2 * v6) | 1;
        uint64_t v16 = 2 * v6 + 2;
        if (v16 < (uint64_t)v7 && *(void *)(v13 + 16) > *(void *)(v12[1] + 16))
        {
          uint64_t v13 = v12[1];
          ++v12;
          uint64_t v15 = v16;
        }
        void *v10 = v13;
        uint64_t v10 = v12;
        uint64_t v6 = v15;
      }
      while (v15 <= v9);
      uint64_t v17 = (void *)(v3 - 8);
      if (v17 == v12)
      {
        *uint64_t v12 = v5;
      }
      else
      {
        *uint64_t v12 = *v17;
        *uint64_t v17 = v5;
        sub_216194C14((uint64_t)v2, (uint64_t)(v12 + 1), v12 + 1 - v2);
      }
    }
    uint64_t v3 = a1[3] - 8;
    a1[3] = v3;
    uint64_t result = *v5;
    uint64_t v19 = v5[1];
    if (*(unsigned char *)(*v5 + 109) == 2) {
      break;
    }
    if (v19 && (unint64_t v20 = *(void *)(v19 + 32), v21 = a1[1], v20 <= v21))
    {
      if (v20 == v21) {
        goto LABEL_42;
      }
      if (v4 > 15) {
        return 0;
      }
      ++v4;
    }
    else
    {
      int v22 = *(uint64_t **)(result + 40);
      if (v22)
      {
        do
        {
          sub_216194834(a1 + 6);
          uint64_t v24 = v23;
          uint64_t v25 = *v22;
          uint64_t v26 = v5[4] - *(unsigned __int16 *)(*v22 + 88);
          uint64_t v27 = *((int *)v22 + 4);
          v23[3] = v5[3] + v27;
          uint64_t v28 = *(void *)(v25 + 96) + v27 + v5[3];
          v23[1] = v5;
          v23[2] = v28;
          void *v23 = v25;
          v23[4] = v26;
          double v30 = (void *)a1[3];
          unint64_t v29 = a1[4];
          if ((unint64_t)v30 >= v29)
          {
            uint64_t v32 = a1[2];
            uint64_t v33 = ((uint64_t)v30 - v32) >> 3;
            if ((unint64_t)(v33 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v34 = v29 - v32;
            uint64_t v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
              uint64_t v35 = v33 + 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36) {
              unint64_t v36 = (unint64_t)sub_216188754(v36);
            }
            else {
              uint64_t v37 = 0;
            }
            unint64_t v38 = (void *)(v36 + 8 * v33);
            *unint64_t v38 = v24;
            uint64_t v31 = (uint64_t)(v38 + 1);
            double v40 = (char *)a1[2];
            long long v39 = (char *)a1[3];
            if (v39 != v40)
            {
              do
              {
                uint64_t v41 = *((void *)v39 - 1);
                v39 -= 8;
                *--unint64_t v38 = v41;
              }
              while (v39 != v40);
              long long v39 = (char *)a1[2];
            }
            a1[2] = v38;
            a1[3] = v31;
            a1[4] = v36 + 8 * v37;
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            void *v30 = v23;
            uint64_t v31 = (uint64_t)(v30 + 1);
          }
          a1[3] = v31;
          sub_216194C14(a1[2], v31, (v31 - a1[2]) >> 3);
          int v22 = (uint64_t *)v22[1];
        }
        while (v22);
        uint64_t v3 = a1[3];
      }
    }
    unint64_t v2 = (void *)a1[2];
    if (v2 == (void *)v3) {
      return 0;
    }
  }
  if (!v19) {
    return result;
  }
LABEL_42:
  double v42 = (void *)*v5;
  do
  {
    int64x2_t v43 = *(void **)v19;
    v42[1] = *(void *)v19;
    *int64x2_t v43 = v42;
    uint64_t v19 = *(void *)(v19 + 8);
    double v42 = v43;
  }
  while (v19);
  return result;
}

uint64_t sub_216194C14(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    int v4 = (void *)(result + 8 * v3);
    uint64_t v5 = *v4;
    uint64_t v8 = *(void *)(a2 - 8);
    uint64_t v6 = (void *)(a2 - 8);
    uint64_t v7 = v8;
    uint64_t v9 = *(void *)(v8 + 16);
    if (*(void *)(*v4 + 16) > v9)
    {
      do
      {
        uint64_t v10 = v4;
        void *v6 = v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
        int v4 = (void *)(result + 8 * v3);
        uint64_t v5 = *v4;
        uint64_t v6 = v10;
      }
      while (*(void *)(*v4 + 16) > v9);
      void *v10 = v7;
    }
  }
  return result;
}

int64x2_t *sub_216194C70(int64x2_t *a1, uint64_t *a2, uint64_t a3)
{
  a1[2].i64[0] = 0;
  *a1 = 0u;
  a1[1] = 0u;
  if (a3)
  {
    int v4 = a2;
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 1;
    uint64_t v7 = &a2[a3];
    do
    {
      uint64_t v8 = *v4;
      uint64_t v9 = v6->i64[0];
      if ((unint64_t)v5 >= v6->i64[0])
      {
        uint64_t v10 = (void *)a1->i64[0];
        uint64_t v11 = ((uint64_t)v5 - a1->i64[0]) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          sub_21610CB04();
        }
        if ((v9 - (uint64_t)v10) >> 2 > v12) {
          unint64_t v12 = (v9 - (uint64_t)v10) >> 2;
        }
        if ((unint64_t)(v9 - (void)v10) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        uint64_t v24 = a1 + 1;
        if (v13)
        {
          if (v13 >> 61) {
            sub_2160FFA74();
          }
          uint64_t v14 = (char *)operator new(8 * v13);
        }
        else
        {
          uint64_t v14 = 0;
        }
        uint64_t v15 = &v14[8 * v11];
        unint64_t v21 = v14;
        v22.i64[0] = (uint64_t)v15;
        *(void *)uint64_t v15 = v8;
        uint64_t v16 = &v14[8 * v13];
        v22.i64[1] = (uint64_t)(v15 + 8);
        unint64_t v23 = v16;
        if (v5 == v10)
        {
          int64x2_t v18 = vdupq_n_s64((unint64_t)v5);
          uint64_t v5 = v15 + 8;
        }
        else
        {
          do
          {
            uint64_t v17 = *--v5;
            *uint64_t v5 = 0;
            *((void *)v15 - 1) = v17;
            v15 -= 8;
          }
          while (v5 != v10);
          int64x2_t v18 = *a1;
          uint64_t v9 = a1[1].i64[0];
          uint64_t v5 = (void *)v22.i64[1];
          uint64_t v16 = v23;
        }
        a1->i64[0] = (uint64_t)v15;
        a1->i64[1] = (uint64_t)v5;
        int64x2_t v22 = v18;
        a1[1].i64[0] = (uint64_t)v16;
        unint64_t v23 = (char *)v9;
        unint64_t v21 = (char *)v18.i64[0];
        sub_216194F44((uint64_t)&v21);
      }
      else
      {
        *v5++ = v8;
        a1->i64[1] = (uint64_t)v5;
      }
      a1->i64[1] = (uint64_t)v5;
      ++v4;
    }
    while (v4 != v7);
    uint64_t v19 = a1->i64[0];
  }
  else
  {
    uint64_t v19 = 0;
  }
  a1[1].i64[1] = v19;
  return a1;
}

void sub_216194DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_216194FC0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216194E34(uint64_t result)
{
  unint64_t v2 = *(uint64_t **)result;
  uint64_t v1 = *(uint64_t **)(result + 8);
  *(void *)(result + 24) = *(void *)result;
  *(void *)(result + 32) = 0;
  if (v2 != v1)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *v2++;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    while (v2 != *(uint64_t **)(v3 + 8));
  }
  return result;
}

void *sub_216194E98(void *a1, int a2)
{
  uint64_t v2 = a1[3];
  if (v2 == a1[1]) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(void))(**(void **)v2 + 16))();
    if (v5) {
      break;
    }
    uint64_t v2 = a1[3] + 8;
    a1[3] = v2;
    if (v2 == a1[1]) {
      return 0;
    }
  }
  uint64_t v8 = v5;
  if (a2)
  {
    uint64_t v9 = [v5 v6:v7];
    uint64_t v10 = a1[4];
    *(void *)(v9 + ++**(_DWORD **)(result + 8) = v10;
    a1[4] = v10 + 1;
  }
  return v8;
}

uint64_t sub_216194F44(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - ++**(_DWORD **)(result + 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216194FC0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216195014(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_216195014(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_216195080(int a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 224))(v5);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 232))(v5);
        if (result)
        {
          CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 232))(v5);
          CFIndex Length = CFStringGetLength(v6);
          CFStringRef v8 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 224))(v5);
          CFIndex valuePtr = Length - CFStringGetLength(v8);
          CFNumberRef v9 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
          CFDictionaryAddValue(a2, @"phraseLearningCandidateKeystrokeSavings", v9);
          if (v9) {
            CFRelease(v9);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

void sub_216195214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_216195230()
{
}

void sub_216195244(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

BOOL sub_21619527C(const char *a1)
{
  size_t v2 = strnlen(a1, 0x400uLL);
  return v2 >= 0x11 && strncmp(&a1[v2 - 17], "/asset_ja_ota.dic", 0x400uLL) == 0;
}

BOOL sub_2161952D4(long long *a1, const __CFArray *a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2162D1CE4(9u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (a2) {
      CFIndex Count = CFArrayGetCount(a2);
    }
    else {
      CFIndex Count = 0;
    }
    *(_DWORD *)int buf = 134217984;
    *(void *)&uint8_t buf[4] = Count;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[JADM::setAdditionalConversionDictionaries] #dictionary:%ld", buf, 0xCu);
  }
  CFStringRef v6 = *(const void ***)a1;
  for (uint64_t i = (const void **)*((void *)a1 + 1); i != v6; sub_2161868BC(i, 0))
    --i;
  *((void *)a1 + 1) = v6;
  if (!a2) {
    return a2 != 0;
  }
  CFURLRef v48 = 0;
  CFTypeRef v49 = 0;
  CFMutableSetRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x263EFFFA0]);
  cf[1] = Mutable;
  CFIndex v8 = CFArrayGetCount(a2);
  if (v8 < 1)
  {
    CFURLRef v9 = 0;
    goto LABEL_58;
  }
  CFURLRef v9 = 0;
  for (CFIndex j = 0; j != v8; ++j)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a2, j);
    cf[0] = 0;
    CFTypeID v12 = CFGetTypeID(ValueAtIndex);
    if (v12 == CFURLGetTypeID())
    {
      CFStringRef v13 = CFURLCopyFileSystemPath((CFURLRef)ValueAtIndex, kCFURLPOSIXPathStyle);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      cf[0] = v13;
      if (!v13) {
        goto LABEL_17;
      }
    }
    else
    {
      CFTypeID v14 = CFGetTypeID(ValueAtIndex);
      if (v14 == CFStringGetTypeID()) {
        sub_216195954(cf, ValueAtIndex);
      }
      CFStringRef v13 = (CFStringRef)cf[0];
      if (!cf[0]) {
        goto LABEL_17;
      }
    }
    if (CFSetContainsValue(Mutable, v13)) {
      goto LABEL_17;
    }
    CFSetAddValue(Mutable, cf[0]);
    uint64_t v15 = sub_2162D1CE4(9u);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134218242;
      *(void *)&uint8_t buf[4] = j + 1;
      *(_WORD *)&buf[12] = 2112;
      *(CFTypeRef *)&buf[14] = cf[0];
      _os_log_debug_impl(&dword_2160F5000, v15, OS_LOG_TYPE_DEBUG, "[JADM::setAdditionalConversionDictionaries] - %ld: %@", buf, 0x16u);
    }
    CFStringRef v16 = (const __CFString *)cf[0];
    if (cf[0])
    {
      if (CFStringHasSuffix((CFStringRef)cf[0], @".dic"))
      {
        uint64_t v17 = sub_2162D1CE4(9u);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 138412290;
          *(CFTypeRef *)&uint8_t buf[4] = cf[0];
          _os_log_debug_impl(&dword_2160F5000, v17, OS_LOG_TYPE_DEBUG, "[JADM::setAdditionalConversionDictionaries] adding dictionary %@", buf, 0xCu);
        }
        uint64_t v19 = (const void **)*((void *)a1 + 1);
        unint64_t v18 = *((void *)a1 + 2);
        if ((unint64_t)v19 >= v18)
        {
          unint64_t v23 = *(const void ***)a1;
          uint64_t v24 = ((uint64_t)v19 - *(void *)a1) >> 3;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v26 = v18 - (void)v23;
          if (v26 >> 2 > v25) {
            unint64_t v25 = v26 >> 2;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          BOOL v52 = a1 + 1;
          if (v27)
          {
            uint64_t v28 = (char *)sub_2160FFAA8((uint64_t)(a1 + 1), v27);
            unint64_t v23 = *(const void ***)a1;
            uint64_t v19 = (const void **)*((void *)a1 + 1);
          }
          else
          {
            uint64_t v28 = 0;
          }
          double v30 = &v28[8 * v24];
          uint64_t v31 = &v28[8 * v27];
          uint64_t v51 = v31;
          CFTypeRef v32 = cf[0];
          cf[0] = 0;
          *(void *)double v30 = v32;
          *(void *)&buf[16] = v30 + 8;
          if (v19 == v23)
          {
            unint64_t v21 = v30 + 8;
          }
          else
          {
            do
            {
              uint64_t v33 = (uint64_t)*--v19;
              *uint64_t v19 = 0;
              *((void *)v30 - 1) = v33;
              v30 -= 8;
            }
            while (v19 != v23);
            unint64_t v21 = *(void **)&buf[16];
            uint64_t v31 = v51;
          }
          long long v34 = *a1;
          *(void *)a1 = v30;
          *((void *)a1 + 1) = v21;
          *(_OWORD *)&uint8_t buf[8] = v34;
          uint64_t v35 = (char *)*((void *)a1 + 2);
          *((void *)a1 + 2) = v31;
          uint64_t v51 = v35;
          *(void *)int buf = v34;
          sub_216195B08((uint64_t)buf);
        }
        else
        {
          CFTypeRef v20 = cf[0];
          cf[0] = 0;
          *uint64_t v19 = v20;
          unint64_t v21 = v19 + 1;
        }
        *((void *)a1 + 1) = v21;
      }
      else if (CFStringHasSuffix(v16, @"/zip_code-ja.dat"))
      {
        CFTypeRef v22 = cf[0];
        cf[0] = 0;
        if (v49) {
          CFRelease(v49);
        }
        CFTypeRef v49 = v22;
      }
      else if (CFStringHasSuffix(v16, @"blocklist.dat"))
      {
        CFTypeRef v29 = cf[0];
        cf[0] = 0;
        sub_2161868BC((const void **)a1 + 4, v29);
      }
      else if (CFStringFind(v16, @"ja.rnnlm", 0).length > 0)
      {
        CFURLRef v36 = CFURLCreateWithFileSystemPath(0, (CFStringRef)cf[0], kCFURLPOSIXPathStyle, 1u);
        if (v9) {
          CFRelease(v9);
        }
        CFURLRef v48 = v36;
        CFURLRef v9 = v36;
      }
LABEL_17:
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      continue;
    }
  }
  CFTypeRef v37 = v49;
  if (v49)
  {
    CFTypeRef v49 = 0;
    sub_2161868BC((const void **)a1 + 3, v37);
    unint64_t v38 = sub_2162D1CE4(9u);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = *((void *)a1 + 3);
      *(_DWORD *)int buf = 138412290;
      *(void *)&uint8_t buf[4] = v39;
      _os_log_debug_impl(&dword_2160F5000, v38, OS_LOG_TYPE_DEBUG, "[JADM::setAdditionalConversionDictionaries] setting zip code dictionary path to: %@", buf, 0xCu);
    }
  }
LABEL_58:
  if (*((void *)a1 + 4) && (double v40 = sub_2162D1CE4(9u), os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)))
  {
    uint64_t v45 = *((void *)a1 + 4);
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "setAdditionalConversionDictionaries";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v45;
    _os_log_debug_impl(&dword_2160F5000, v40, OS_LOG_TYPE_DEBUG, "[JADM::%s] setting blocklist path to: %@", buf, 0x16u);
    if (v9) {
      goto LABEL_61;
    }
  }
  else if (v9)
  {
LABEL_61:
    uint64_t v41 = (CFURLRef *)a1 + 5;
    CFURLRef v48 = 0;
    sub_21617DB94((const void **)a1 + 5, v9);
    double v42 = sub_2162D1CE4(9u);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v46 = CFURLGetString(*v41);
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "setAdditionalConversionDictionaries";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v46;
      _os_log_debug_impl(&dword_2160F5000, v42, OS_LOG_TYPE_DEBUG, "[JADM::%s] setting language model path to: %@", buf, 0x16u);
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return a2 != 0;
}

void sub_2161958C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_216195954(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_2161868BC(a1, cf);
  }
}

BOOL sub_2161959B4(uint64_t a1, int a2, CFArrayRef theArray)
{
  BOOL result = 0;
  *(unsigned char *)(a1 + 4++**(_DWORD **)(result + 8) = 0;
  if (a2 == 2)
  {
    if (theArray
      && CFArrayGetCount(theArray)
      && (ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0), CFTypeID v7 = CFGetTypeID(ValueAtIndex), v7 == CFURLGetTypeID()))
    {
      CFArrayRef v8 = sub_2162D9720(theArray);
      BOOL v9 = sub_216195A94((long long *)a1, v8);
      if (v8) {
        CFRelease(v8);
      }
      if (!v9) {
        return 0;
      }
    }
    else
    {
      BOOL result = sub_216195A94((long long *)a1, theArray);
      if (!result) {
        return result;
      }
    }
    BOOL result = 1;
    *(unsigned char *)(a1 + 4++**(_DWORD **)(result + 8) = 1;
  }
  return result;
}

void sub_216195A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216195B94((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_216195A94(long long *a1, CFArrayRef theArray)
{
  if (theArray)
  {
    CFArrayRef v3 = theArray;
    if (CFArrayGetCount(theArray) < 1)
    {
      theArray = 0;
    }
    else
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, 0);
      theArray = (CFArrayRef)CFDictionaryGetValue(ValueAtIndex, kMecabraAssetDataFilePathsKey);
    }
  }

  return sub_2161952D4(a1, theArray);
}

uint64_t sub_216195B08(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_2161868BC((const void **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216195B5C(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_216195B94(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void *MecabraCreateASCIIStringFromCangjie(void *a1)
{
  return MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(9u, a1);
}

void *MecabraCreateCangjieStringFromASCII(void *a1)
{
  return MecabraInputKeyPropertiesCreateInputKeyFromASCIIString(9u, a1);
}

uint64_t sub_216195BE4(void *a1)
{
  *a1 = &unk_26C6BED70;
  uint64_t v2 = a1[35];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[36];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_216190328((uint64_t)a1);
}

void sub_216195C90(void *a1)
{
  sub_216195BE4(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216195CC8(void *a1, const char *a2)
{
  uint64_t v3 = (__CFString *)a1[3];
  v85[0] = 0;
  v85[1] = 0;
  v83[1] = 0;
  uint64_t v84 = v85;
  uint64_t v82 = v83;
  v83[0] = 0;
  v81[0] = 0;
  v81[1] = 0;
  uint64_t v79 = 0;
  unint64_t v80 = v81;
  long long __p = 0;
  unint64_t v78 = 0;
  uint64_t v6 = [v3 rangeOfString:@"z" options:a2];
  uint64_t v7 = a1[4];
  if ((v7 & 0x800) == 0 || (unint64_t)objc_msgSend_length(v3, v4, v5) < 2)
  {
    uint64_t v15 = @"IDXExactMatch";
    CFTypeID v14 = v3;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_13;
    }
    if (objc_msgSend_hasPrefix_(v3, v4, @"zx"))
    {
      uint64_t v15 = @"IDXExactMatch";
      CFTypeID v14 = v3;
      if ((unint64_t)objc_msgSend_length(v3, v16, v17) < 3) {
        goto LABEL_13;
      }
      uint64_t v18 = [v3 length:v4, v5] - 2;
      uint64_t v15 = @"IDXExactMatch";
      CFTypeID v14 = v3;
      if (objc_msgSend_rangeOfString_options_range_(v3, v19, @"z", 0, 2, v18) == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_13;
      }
      uint64_t v15 = @"IDXWildcardMatch";
      uint64_t v20 = [v3 stringByReplacingOccurrencesOfString:v4 withString:@"z" options:0 range:v18];
    }
    else
    {
      uint64_t v15 = @"IDXExactMatch";
      CFTypeID v14 = v3;
      if ((unint64_t)objc_msgSend_length(v3, v16, v17) < 2) {
        goto LABEL_13;
      }
      uint64_t v21 = [v3 length:v4, v5];
      uint64_t v15 = @"IDXWildcardMatch";
      uint64_t v20 = [v3 stringByReplacingOccurrencesOfString:v22 withString:@"z" options:0 range:v21];
    }
    CFTypeID v14 = (__CFString *)v20;
    goto LABEL_13;
  }
  if ((unint64_t)objc_msgSend_length(v3, v4, v5) > 2) {
    goto LABEL_114;
  }
  BOOL v9 = NSString;
  uint64_t v10 = [v3 substringToIndex:1];
  uint64_t v12 = [v3 substringFromIndex:v11];
  CFTypeID v14 = (__CFString *)[v9 stringWithFormat:@"%@*%@", v10, v12];
  uint64_t v15 = @"IDXWildcardMatch";
LABEL_13:
  if (objc_msgSend_length(v3, v4, v5) == 1)
  {
    unsigned int v25 = (*(uint64_t (**)(void *))(*a1 + 232))(a1);
    unint64_t v27 = [v14 substringWithRange:0, 1];
    InputKeyFromASCIIString = (__CFString *)MecabraInputKeyPropertiesCreateInputKeyFromASCIIString(v25, v27);
    double v30 = InputKeyFromASCIIString;
    if (InputKeyFromASCIIString
      && (objc_msgSend_isEqualToString_(InputKeyFromASCIIString, v29, @"重") & 1) == 0
      && (objc_msgSend_isEqualToString_(v30, v31, @"難") & 1) == 0)
    {
      unint64_t v86 = 0;
      if ((a1[4] & 0x2000000) != 0) {
        uint64_t v32 = 4096;
      }
      else {
        uint64_t v32 = 1;
      }
      sub_2161903FC(a1, v32, v30);
    }
  }
  if ((unint64_t)objc_msgSend_length(v14, v23, v24) >= 2)
  {
    unint64_t v35 = 0;
    while (v35 < objc_msgSend_length(v14, v33, v34))
    {
      int v37 = [v14 characterAtIndex:v36++];
      if (v37 != 63) {
        goto LABEL_28;
      }
    }
    CFTypeID v14 = (__CFString *)[v14 stringByReplacingOccurrencesOfString:v36 withString:@"?"];
  }
LABEL_28:
  if ((a1[4] & 2) == 0)
  {
    if ((v7 & 0x800) == 0 && v15 == @"IDXWildcardMatch")
    {
      BOOL v39 = (objc_msgSend_isEqualToString_(v3, v33, @"xzf") & 1) != 0
         || (objc_msgSend_isEqualToString_(v3, v38, @"xzh") & 1) != 0
         || [v3 isEqualToString:@"xzr"];
      CFStringRef v40 = (const __CFString *)[v14 stringByAppendingString:v38];
      sub_2161910A8(a1, (uint64_t)&v84, v40, (uint64_t)v15, (uint64_t)&v80, 1);
      goto LABEL_38;
    }
    sub_2161910A8(a1, (uint64_t)&v84, v14, @"IDXPrefixMatch", (uint64_t)&v80, 1);
  }
  BOOL v39 = 0;
LABEL_38:
  if (v15 == @"IDXWildcardMatch") {
    uint64_t v41 = &v84;
  }
  else {
    uint64_t v41 = &v80;
  }
  if (v15 == @"IDXWildcardMatch") {
    double v42 = &v80;
  }
  else {
    double v42 = &v82;
  }
  sub_2161910A8(a1, (uint64_t)v41, v14, (uint64_t)v15, (uint64_t)v42, 1);
  if (v39) {
    sub_2161910A8(a1, (uint64_t)&v80, v3, @"IDXExactMatch", (uint64_t)&v82, 1);
  }
  int64x2_t v43 = v80;
  if (v80 != v81)
  {
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    CFStringRef v46 = v80;
    do
    {
      uint64_t v47 = v44;
      CFURLRef v48 = (void *)v46[1];
      if (v48)
      {
        do
        {
          CFTypeRef v49 = (void **)v48;
          CFURLRef v48 = (void *)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          CFTypeRef v49 = (void **)v46[2];
          BOOL v50 = *v49 == v46;
          CFStringRef v46 = v49;
        }
        while (!v50);
      }
      ++v44;
      CFStringRef v46 = v49;
    }
    while (v49 != v81);
    if (v47 >= v79 >> 3)
    {
      unint64_t v52 = v44;
      if (v44 >> 61) {
        sub_21610CB04();
      }
      if (v79 >> 2 > v44) {
        unint64_t v52 = v79 >> 2;
      }
      unint64_t v53 = v52;
      if (v52) {
        unint64_t v54 = (uint64_t *)sub_2160FFAA8((uint64_t)&v79, v52);
      }
      else {
        unint64_t v54 = 0;
      }
      unint64_t v59 = &v54[v44];
      uint64_t v60 = v54;
      do
      {
        *v60++ = v43[4];
        uint64_t v61 = (void *)v43[1];
        if (v61)
        {
          do
          {
            int64_t v62 = v61;
            uint64_t v61 = (void *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            int64_t v62 = (void *)v43[2];
            BOOL v50 = *v62 == (void)v43;
            int64x2_t v43 = v62;
          }
          while (!v50);
        }
        int64x2_t v43 = v62;
      }
      while (v60 != v59);
      long long __p = v54;
      unint64_t v78 = v59;
      uint64_t v79 = (uint64_t)&v54[v53];
    }
    else
    {
      unint64_t v86 = v80;
      sub_216196BBC(&v86, v47 + 1);
      if (v47 >= 0)
      {
        unint64_t v86 = v43;
        sub_216196BBC(&v86, 0);
        if (v86 == v81)
        {
          double v56 = 0;
        }
        else
        {
          uint64_t v55 = v86;
          double v56 = 0;
          do
          {
            *double v56 = v55[4];
            unint64_t v57 = (void *)v55[1];
            if (v57)
            {
              do
              {
                uint64_t v58 = (void **)v57;
                unint64_t v57 = (void *)*v57;
              }
              while (v57);
            }
            else
            {
              do
              {
                uint64_t v58 = (void **)v55[2];
                BOOL v50 = *v58 == v55;
                uint64_t v55 = v58;
              }
              while (!v50);
            }
            ++v56;
            uint64_t v55 = v58;
          }
          while (v58 != v81);
        }
        unint64_t v78 = v56;
      }
      else
      {
        uint64_t v51 = v86;
        unint64_t v78 = 0;
        if (8 * v44) {
          memmove((void *)(-8 * ((uint64_t)(-8 * v44) >> 3)), 0, -8 * v44);
        }
        if (v51 != v43)
        {
          do
          {
            *uint64_t v45 = v43[4];
            int64_t v63 = (void *)v43[1];
            if (v63)
            {
              do
              {
                int64_t v64 = v63;
                int64_t v63 = (void *)*v63;
              }
              while (v63);
            }
            else
            {
              do
              {
                int64_t v64 = (void *)v43[2];
                BOOL v50 = *v64 == (void)v43;
                int64x2_t v43 = v64;
              }
              while (!v50);
            }
            ++v45;
            int64x2_t v43 = v64;
          }
          while (v64 != v51);
        }
      }
    }
  }
  if (v78 != __p) {
    sub_216196560((void *)a1[5], __p, v78, 0xFFFFFFFFFFFFFFFFLL);
  }
  sub_21619201C((uint64_t)a1, (const __CFString *)a1[3]);
  if ((v7 & 0x800) != 0)
  {
    if (objc_msgSend_length(v14, v65, v66) == 1) {
      unint64_t v68 = 200;
    }
    else {
      unint64_t v68 = -1;
    }
  }
  else if ((objc_msgSend_hasPrefix_(v14, v65, @"z") & 1) != 0 {
         || objc_msgSend_hasPrefix_(v14, v67, @"yyy"))
  }
  {
    unint64_t v68 = -1;
  }
  else
  {
    unint64_t v68 = 50;
  }
  unint64_t v69 = v84;
  if (v84 != v85)
  {
    unint64_t v70 = 0;
    uint64_t v71 = (void *)a1[5];
    do
    {
      uint64_t v72 = v69[4];
      if (v70 >= v68)
      {
        if (v72) {
          (*(void (**)(uint64_t))(*(void *)v72 + 16))(v72);
        }
      }
      else
      {
        unint64_t v73 = (void *)sub_2161F4704(v72);
        [v71 addObject:(id)v74];
      }
      uint64_t v75 = (void *)v69[1];
      if (v75)
      {
        do
        {
          unint64_t v76 = (void **)v75;
          uint64_t v75 = (void *)*v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          unint64_t v76 = (void **)v69[2];
          BOOL v50 = *v76 == v69;
          unint64_t v69 = v76;
        }
        while (!v50);
      }
      ++v70;
      unint64_t v69 = v76;
    }
    while (v76 != v85);
  }
  if (__p) {
    operator delete(__p);
  }
LABEL_114:
  sub_21612A250((uint64_t)&v80, v81[0]);
  sub_21612A250((uint64_t)&v82, v83[0]);
  sub_21612A250((uint64_t)&v84, v85[0]);
}

void sub_2161964E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, char a18, void *a19, uint64_t a20,char a21,void *a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_21612A250((uint64_t)&a15, a16);
  sub_21612A250((uint64_t)&a18, a19);
  sub_21612A250((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void sub_216196560(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *v6;
      if (v8 >= a4)
      {
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      else
      {
        uint64_t v10 = (void *)sub_2161F4704(v9);
        [a1 addObject:(id)v10];
      }
      ++v8;
      ++v6;
    }
    while (v6 != a3);
  }
}

void *sub_21619660C(uint64_t a1, void *a2)
{
  return MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(9u, a2);
}

BOOL sub_216196614(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 34) & 0x20) == 0;
}

void sub_216196624(int *a1)
{
  unint64_t v1 = sub_2161E2834(*a1);
  if (v1 == 5)
  {
    uint64_t v2 = sub_216351058();
    unint64_t v1 = sub_2163510E8(v2, 5);
  }
  uint64_t v3 = (uint64_t *)sub_2162D8C20();
  uint64_t v4 = (const UInt8 *)sub_2162D8CB8(v3, v1, off_26797C900[0], off_26797C898[0]);
  int v5 = *((char *)v4 + 23);
  if (v5 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = *(const UInt8 **)v4;
  }
  if (v5 >= 0) {
    CFIndex v7 = v4[23];
  }
  else {
    CFIndex v7 = *((void *)v4 + 1);
  }
  CFURLCreateFromFileSystemRepresentation(0, v6, v7, 0);
  operator new();
}

void sub_216196744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166CA800](v2, 0x10E1C4040DB9D86);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21619677C(uint64_t a1, void *a2, void *a3, void *a4)
{
  if ((unint64_t)objc_msgSend_length(a2, (const char *)a2, (uint64_t)a3) < 2) {
    return 0;
  }
  uint64_t result = [a3 isEqualToString:@"IDXExactMatch"];
  if (result) {
    return !sub_21618FF9C(a4, v8);
  }
  return result;
}

BOOL sub_2161967DC(uint64_t a1, const char *a2)
{
  return [*(void **)(a1 + 16) rangeOfString:@"z"] == 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_21619680C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 33) & 8) != 0)
  {
    uint64_t v1 = a1 + 288;
    if (!*(void *)(a1 + 288))
    {
      int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(a1);
      sub_2161E2834(v2);
      operator new();
    }
  }
  else
  {
    uint64_t v1 = a1 + 280;
  }
  return *(void *)v1;
}

void sub_2161969C4(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4022FF22E7);
  _Unwind_Resume(a1);
}

uint64_t sub_2161969EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 304))();
}

uint64_t sub_216196A1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 304))();
}

void sub_216196A4C(void *a1)
{
  if (*(unsigned char *)(a1[38] + 105))
  {
    int v2 = (uint64_t *)sub_2162D8C20();
    int v3 = (*(uint64_t (**)(void *))(*a1 + 232))(a1);
    unint64_t v4 = sub_2161E2834(v3);
    int v5 = (const UInt8 *)sub_2162D8CB8(v2, v4, off_26797C900[0], off_26797C898[0]);
    int v6 = *((char *)v5 + 23);
    if (v6 >= 0) {
      CFIndex v7 = v5;
    }
    else {
      CFIndex v7 = *(const UInt8 **)v5;
    }
    if (v6 >= 0) {
      CFIndex v8 = v5[23];
    }
    else {
      CFIndex v8 = *((void *)v5 + 1);
    }
    CFURLRef v9 = CFURLCreateFromFileSystemRepresentation(0, v7, v8, 0);
    if (v9) {
      sub_2161902B0((uint64_t)a1, v9, 0);
    }
    (*(void (**)(void *))(*a1 + 264))(a1);
    int v10 = (*(uint64_t (**)(void *))(*a1 + 232))(a1);
    int v11 = sub_2161E2834(v10);
    sub_216329754((uint64_t)(a1 + 9), v11);
    if (v9) {
      CFRelease(v9);
    }
  }
}

void sub_216196B90(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216196BB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 296);
}

void **sub_216196BBC(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    CFIndex v7 = *result;
    do
    {
      CFIndex v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v4 = v8;
          CFIndex v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          CFIndex v7 = v4;
        }
        while (v5);
      }
      CFIndex v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    int v2 = *result;
    do
    {
      int v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          unint64_t v4 = v3;
          int v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          unint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          int v2 = v4;
        }
        while (!v5);
      }
      int v2 = v4;
    }
    while (a2-- > 1);
  }
  void *result = v4;
  return result;
}

void sub_216196C48()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  sub_216197098();
}

void sub_216196F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 16))(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_216197098()
{
}

void sub_216197158(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F3C402D14F19CLL);
  _Unwind_Resume(a1);
}

void *sub_21619717C(uint64_t *a1, void *a2, unint64_t a3)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26C6C76D0;
  v4[3] = v4;
  sub_216309A90(a2, a3, (uint64_t)v4, a1);
  return sub_2161980B0(v4);
}

void sub_216197210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161980B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216197224(uint64_t a1, void *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EEA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v6 = a1;
    int v3 = a2;
    int v4 = __cxa_guard_acquire(&qword_26797EEA0);
    a2 = v3;
    int v5 = v4;
    a1 = v6;
    if (v5)
    {
      qword_26797EE88 = 3;
      *(_OWORD *)algn_26797EE90 = xmmword_216370C50;
      __cxa_guard_release(&qword_26797EEA0);
      a1 = v6;
      a2 = v3;
    }
  }
  v7[0] = &unk_26C6C92A8;
  v7[3] = v7;
  sub_216306574(a1, a2, (uint64_t)&qword_26797EE88, (uint64_t)v7);
  return sub_216199514(v7);
}

void sub_21619731C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216199514((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_216197330@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = a2[1];
  if (v4 != a2[3] || !v4) {
    goto LABEL_13;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[2];
  uint64_t v9 = 2 * v4;
  uint64_t v10 = MEMORY[0x263EF8318];
  while (1)
  {
    unint64_t v11 = *(unsigned __int16 *)(v8 + v6);
    if (v11 <= 0x7F) {
      break;
    }
    if (!__maskrune(v11, 0x8000uLL)) {
      goto LABEL_10;
    }
LABEL_8:
    v6 += 2;
    if (v9 == v6) {
      goto LABEL_13;
    }
  }
  if ((*(_DWORD *)(v10 + 4 * v11 + 60) & 0x8000) != 0) {
    goto LABEL_8;
  }
LABEL_10:
  if (v6 && v9 != v6) {
    sub_216197540(a1, (void *)(v7 + v6), v4 - (v6 >> 1));
  }
LABEL_13:

  return sub_216184F68(a3, byte_2163CA662);
}

void sub_216197508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216197540(uint64_t a1, void *a2, unint64_t a3)
{
  sub_216353BCC((uint64_t)a2, a3, 0, 0, v6);
  sub_21619778C(a2, a3, (uint64_t)v5);
}

void sub_2161976E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_2161979AC((uint64_t)&a13);
  sub_216308B50((uint64_t)&a27);
  *(void *)(v27 - 8++**(_DWORD **)(result + 8) = &unk_26C6F4D68;
  a27 = v27 - 80;
  sub_2161986EC((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_21619778C(void *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  *(void *)a3 = &unk_26C6BF008;
  *(_OWORD *)(a3 + ++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 4sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 8++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(void *)(a3 + 12sub_216195244(&a9, 0) = 0;
  sub_216308F00(a3, a1, a2);
}

void sub_216197980(_Unwind_Exception *a1)
{
  sub_216308B50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161979AC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216197A00(uint64_t a1)
{
  *(void *)a1 = &unk_26C6F4D68;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2161986EC(&v3);
  return a1;
}

void sub_216197A58(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v6 = 32;
  if (a5) {
    uint64_t v6 = 40;
  }
  uint64_t v7 = *(void *)(a1 + v6);
  if (v7)
  {
    if (a6)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)a2[7] + 24))(a2[7]))
      {
        unint64_t v11 = 0;
        do
        {
          CFTypeRef v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v12 = a2[7];
          CFStringRef v13 = operator new(0x20uLL);
          *(void *)CFStringRef v13 = &unk_26C6C91F8;
          v13[2] = v11;
          *((void *)v13 + 2) = a3;
          *((void *)v13 + 3) = &v22;
          uint64_t v26 = v13;
          sub_21621162C(*(void *)(v7 + 344), v12, (uint64_t)v25, 0, v11);
          sub_216198AB4(v25);
          uint64_t v14 = (uint64_t)v22;
          uint64_t v15 = v23;
          if (v22 != (uint64_t *)v23)
          {
            do
            {
              sub_216197D34(*(void *)(a4 + 24), v11, v14, *(void *)(v14 + 8), *(float *)(v14 + 4));
              v14 += 16;
            }
            while (v14 != v15);
            uint64_t v14 = (uint64_t)v22;
          }
          if (v14)
          {
            uint64_t v23 = v14;
            operator delete((void *)v14);
          }
          ++v11;
        }
        while ((*(uint64_t (**)(uint64_t))(*(void *)a2[7] + 24))(a2[7]) > v11);
      }
    }
    else
    {
      unint64_t v16 = a2[1];
      if (v16)
      {
        for (unint64_t i = 0; i < v16; ++i)
        {
          CFTypeRef v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v18 = *a2;
          uint64_t v19 = operator new(0x20uLL);
          *(void *)uint64_t v19 = &unk_26C6C9250;
          v19[2] = i;
          *((void *)v19 + 2) = a3;
          *((void *)v19 + 3) = &v22;
          uint64_t v26 = v19;
          if (v16 >= (int)i) {
            (*(void (**)(void, uint64_t, unint64_t, void *))(**(void **)(v7 + 344) + 8))(*(void *)(v7 + 344), v18 + 2 * (int)i, 2 * (v16 - (int)i), v25);
          }
          sub_216198FB8(v25);
          uint64_t v20 = v22;
          uint64_t v21 = (uint64_t *)v23;
          if (v22 != (uint64_t *)v23)
          {
            do
            {
              sub_216197D34(*(void *)(a4 + 24), i, (uint64_t)v20, v20[1], 0.0);
              v20 += 2;
            }
            while (v20 != v21);
            uint64_t v20 = v22;
          }
          if (v20)
          {
            uint64_t v23 = (uint64_t)v20;
            operator delete(v20);
          }
          unint64_t v16 = a2[1];
        }
      }
    }
  }
}

void sub_216197CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216197D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t v8 = 1;
  double v7 = a5;
  uint64_t v6 = a4;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, double *, uint64_t *))(*(void *)a1 + 48))(a1, &v10, &v9, &v8, &v7, &v6);
}

void *sub_216197DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  v6[0] = &unk_26C6C7360;
  v6[1] = sub_216197EBC;
  v6[3] = v6;
  v5[0] = &unk_26C6C7308;
  v5[1] = sub_2162173DC;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void *, uint64_t))(*(void *)v3 + 16))(v3, a2, a3, v6, v5, 128);
  sub_216199290(v5);
  return sub_216199124(v6);
}

void sub_216197EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_216199290((uint64_t *)va);
  sub_216199124((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216197EBC(double a1, double a2)
{
  return (int)(a2 * -5500.0 + a1 * -4400.0);
}

void *sub_216197EDC(void *a1)
{
  *a1 = &unk_26C6BF418;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216197F4C(void *a1)
{
  *a1 = &unk_26C6BF418;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x2166CA800);
}

void sub_216197FE8()
{
}

void *sub_216197FFC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6C76D0;
  return result;
}

void sub_216198034(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C76D0;
}

uint64_t sub_21619805C()
{
  return 0;
}

uint64_t sub_216198064(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC740)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2161980A4()
{
  return &unk_26C6BC740;
}

void *sub_2161980B0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216198134(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_2161981B8(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2161981B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t sub_216198220(uint64_t a1, void *__src, unint64_t a3)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v6 = (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    unint64_t v6 = 10;
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v6 - v7 >= a3)
  {
    if (a3)
    {
      uint64_t v8 = a1;
      if ((*(unsigned char *)(a1 + 23) & 0x80) != 0) {
        uint64_t v8 = *(void *)a1;
      }
      memmove((void *)(v8 + 2 * v7), __src, 2 * a3);
      unint64_t v9 = v7 + a3;
      if (*(char *)(a1 + 23) < 0) {
        *(void *)(a1 + ++**(_DWORD **)(result + 8) = v9;
      }
      else {
        *(unsigned char *)(a1 + 23) = v9 & 0x7F;
      }
      *(_WORD *)(v8 + 2 * v9) = 0;
    }
  }
  else
  {
    sub_2161982E8(a1, v6, a3 - v6 + v7, v7, v7, 0, a3, __src);
  }
  return a1;
}

void sub_2161982E8(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  if (0x7FFFFFFFFFFFFFF6 - a2 < a3) {
    sub_21617FB50();
  }
  uint64_t v15 = (char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v15 = *(char **)a1;
  }
  unint64_t v16 = a3 + a2;
  if (a3 + a2 <= 2 * a2) {
    unint64_t v16 = 2 * a2;
  }
  uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB) {
    uint64_t v17 = v16 | 3;
  }
  if (v16 >= 0xB) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 11;
  }
  if (a2 > 0x3FFFFFFFFFFFFFF2) {
    uint64_t v19 = 0x7FFFFFFFFFFFFFF7;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = sub_21610FD44(a1, v19);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  if (a5) {
    memmove(v20, v15, 2 * a5);
  }
  if (a7) {
    memmove(&v21[a5], a8, 2 * a7);
  }
  uint64_t v24 = a4 - (a6 + a5);
  if (v24) {
    memmove(&v21[a5 + a7], &v15[2 * a5 + 2 * a6], 2 * v24);
  }
  if (a2 != 10) {
    operator delete(v15);
  }
  uint64_t v25 = a7 + a5 + v24;
  *(void *)a1 = v21;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = v25;
  *(void *)(a1 + 16) = v23 | 0x8000000000000000;
  v21[v25] = 0;
}

void *sub_216198430(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_216112B2C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216198490(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161984AC(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0xA)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21617FB50();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB) {
      uint64_t v6 = a3 | 3;
    }
    uint64_t v7 = sub_21610FD44((uint64_t)__dst, v6 + 1);
    v5[1] = a3;
    std::string v5[2] = v8 | 0x8000000000000000;
    *uint64_t v5 = v7;
    uint64_t v5 = v7;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, 2 * a3 + 2);
}

uint64_t sub_216198550(uint64_t a1)
{
  *(void *)a1 = &unk_26C6F4D68;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2161986EC(&v3);
  return MEMORY[0x2166CA800](a1, 0xA1C4030951706);
}

unint64_t sub_2161985BC(uint64_t a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 24 * a2 + 8) - *(void *)(*(void *)(a1 + 8) + 24 * a2)) >> 3);
}

unint64_t sub_2161985E4(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
}

double sub_216198600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 40 * a3 + 24);
}

uint64_t sub_216198620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 40 * a3 + 32);
}

char *sub_216198640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (char *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 40 * a3);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_216198670()
{
  return 0;
}

uint64_t sub_216198678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return sub_216198804(a4, v5, v6, (uint64_t)&v8);
}

uint64_t sub_2161986E4()
{
  return 1;
}

void sub_2161986EC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_216198760(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216198760(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2161987B4((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_2161987B4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

uint64_t sub_216198804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 48))(v4, v6, a4);
}

void sub_216198860()
{
}

__n128 sub_216198874(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26C6F4CE8;
  *(_OWORD *)(v2 + ++**(_DWORD **)(result + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_2161988D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F4CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4sub_216195244(&a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

void sub_216198910(uint64_t a1, int *a2, const void **a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v6 = *a3;
  unint64_t v7 = *a4;
  unint64_t v8 = *a5;
  int v9 = *a2;
  __int16 v20 = *a2;
  unint64_t v10 = v7 >> 1;
  if (!v6) {
    unint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  if (v11) {
    unint64_t v12 = v8;
  }
  else {
    unint64_t v12 = 0;
  }
  BOOL v13 = v10 != v12 || memcmp(v6, (const void *)(v11 + 2 * *(int *)(a1 + 8)), 2 * v10) != 0;
  sub_21630E524((unsigned __int16)v9, (uint64_t)v18);
  if ((char)v19 < 0)
  {
    unint64_t v14 = (unint64_t)v18[1];
    operator delete(v18[0]);
  }
  else
  {
    unint64_t v14 = v19;
  }
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v14 >= v8;
  }
  if (v15 || (!*(unsigned char *)(a1 + 41) ? (char v16 = 1) : (char v16 = v13), (v16 & 1) == 0))
  {
    for (uint64_t i = 0; i != 42; i += 2)
    {
      if (*(unsigned __int16 *)&aO1p1q1r1s1t1u1[i] == (unsigned __int16)v9) {
        break;
      }
    }
    sub_2163095EC();
  }
}

uint64_t sub_216198A68(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F4D48)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216198AA8()
{
  return &unk_26C6F4D48;
}

void *sub_216198AB4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216198B3C()
{
}

__n128 sub_216198B50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C91F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + ++**(_DWORD **)(result + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216198BA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C91F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

void sub_216198BDC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *a5;
  int v8 = *a2;
  if (sub_216198D5C(*(void *)(a1 + 16), *a2))
  {
    int v9 = *(char ***)(a1 + 24);
    uint64_t v11 = v9[1];
    unint64_t v10 = (unint64_t)v9[2];
    if ((unint64_t)v11 >= v10)
    {
      BOOL v13 = *v9;
      uint64_t v14 = (v11 - *v9) >> 4;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        sub_21610CB04();
      }
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 >> 60) {
          sub_2160FFA74();
        }
        uint64_t v18 = (char *)operator new(16 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      unsigned __int8 v19 = &v18[16 * v14];
      *(_WORD *)unsigned __int8 v19 = v8;
      *((_DWORD *)v19 + 1) = a2[1];
      *((void *)v19 + 1) = v7;
      unint64_t v12 = v19 + 16;
      if (v11 != v13)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v11 - 1);
          v19 -= 16;
          v11 -= 16;
        }
        while (v11 != v13);
        uint64_t v11 = *v9;
      }
      *int v9 = v19;
      v9[1] = v12;
      void v9[2] = &v18[16 * v17];
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *(_WORD *)uint64_t v11 = v8;
      *((_DWORD *)v11 + 1) = a2[1];
      *((void *)v11 + 1) = v7;
      unint64_t v12 = v11 + 16;
    }
    v9[1] = v12;
  }
}

uint64_t sub_216198D10(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216198D50()
{
  return &unk_26C6BCC30;
}

uint64_t sub_216198D5C(uint64_t a1, __int16 a2)
{
  __int16 v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_216198DB4()
{
}

__n128 sub_216198DC8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C9250;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + ++**(_DWORD **)(result + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216198E1C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C9250;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + ++**(_DWORD **)(result + 8) = result;
  return result;
}

void sub_216198E54(uint64_t a1, int *a2, uint64_t a3, unint64_t *a4)
{
  int v5 = *a2;
  unint64_t v6 = *a4;
  if (sub_216198D5C(*(void *)(a1 + 16), *a2))
  {
    uint64_t v7 = *(char ***)(a1 + 24);
    unint64_t v8 = v6 >> 1;
    unint64_t v10 = v7[1];
    unint64_t v9 = (unint64_t)v7[2];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = *v7;
      uint64_t v13 = (v10 - *v7) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        sub_21610CB04();
      }
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16 >> 60) {
        sub_2160FFA74();
      }
      unint64_t v17 = (char *)operator new(16 * v16);
      uint64_t v18 = &v17[16 * v13];
      *(_WORD *)uint64_t v18 = v5;
      *((void *)v18 + 1) = v8;
      uint64_t v11 = v18 + 16;
      if (v10 != v12)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
          v18 -= 16;
          v10 -= 16;
        }
        while (v10 != v12);
        unint64_t v10 = v12;
      }
      void *v7 = v18;
      v7[1] = v11;
      void v7[2] = &v17[16 * v16];
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(_WORD *)unint64_t v10 = v5;
      *((void *)v10 + 1) = v8;
      uint64_t v11 = v10 + 16;
    }
    v7[1] = v11;
  }
}

uint64_t sub_216198F6C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216198FAC()
{
  return &unk_26C6BCC40;
}

void *sub_216198FB8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216199040()
{
}

void *sub_216199054(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7360;
  result[1] = v3;
  return result;
}

uint64_t sub_21619909C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7360;
  a2[1] = v2;
  return result;
}

uint64_t sub_2161990C8(uint64_t a1, double *a2, double *a3)
{
  return (*(uint64_t (**)(double, double))(a1 + 8))(*a2, *a3);
}

uint64_t sub_2161990D8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC670)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216199118()
{
  return &unk_26C6BC670;
}

void *sub_216199124(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2161991AC()
{
}

void *sub_2161991C0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7308;
  result[1] = v3;
  return result;
}

uint64_t sub_216199208(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7308;
  a2[1] = v2;
  return result;
}

uint64_t sub_216199234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_216199244(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC650)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216199284()
{
  return &unk_26C6BC650;
}

void *sub_216199290(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216199318()
{
}

void *sub_21619932C()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C6C92A8;
  return result;
}

void sub_216199364(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C92A8;
}

uint64_t sub_21619938C(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v2 = *a2;
  if ((*(unsigned int (**)(unsigned __int16 *))(*(void *)*a2 + 96))(*a2) == 79)
  {
    int v5 = (unsigned __int16 *)*((void *)v2 + 4);
    __int16 v4 = v2 + 16;
    uint64_t v3 = v5;
    int v6 = *((char *)v4 + 23);
    if (v6 >= 0) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = v3;
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)v4 + 23);
    }
    else {
      uint64_t v8 = *((void *)v4 + 1);
    }
    sub_21630E3B4((uint64_t)v7, v8);
    if (v7) {
      uint64_t v10 = v8 - v9;
    }
    else {
      uint64_t v10 = 0;
    }
    return sub_21630E208(v7, v10);
  }
  else
  {
    return (*(unsigned int (**)(unsigned __int16 *))(*(void *)v2 + 96))(v2) == 83
        || (*(unsigned int (**)(unsigned __int16 *))(*(void *)v2 + 96))(v2) == 81
        || (*(unsigned int (**)(unsigned __int16 *))(*(void *)v2 + 96))(v2) == 71;
  }
}

uint64_t sub_2161994C8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216199508()
{
  return &unk_26C6BCC50;
}

void *sub_216199514(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216199598(void *a1, unint64_t a2)
{
  v8[19] = *MEMORY[0x263EF8340];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a1 + 1;
  a1[4] = 0;
  a1[3] = a1 + 4;
  a1[5] = 0;
  uint64_t v3 = (uint64_t *)sub_2162D8C20();
  sub_2162D8CB8(v3, a2, off_26797C900[0], off_26797C878[0]);
  sub_216199BF4(v6);
  if (v7[15])
  {
    std::istream::read();
    std::istream::read();
    operator new[]();
  }
  v6[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166CA430](v7);
  std::istream::~istream();
  MEMORY[0x2166CA750](v8);
  return a1;
}

void sub_216199B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40)
{
}

uint64_t *sub_216199BF4(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  int v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x2166CA420](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_216199D8C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2166CA750](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216199DC4(uint64_t a1, uint64_t a2, char *__s)
{
  uint64_t v3 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v4 = a1 + 32;
  uint64_t v5 = v6;
  if (v6)
  {
    uint64_t v7 = v4;
    do
    {
      unsigned int v8 = *(unsigned __int16 *)(v5 + 32);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = (uint64_t *)v5;
      }
      else {
        uint64_t v10 = (uint64_t *)(v5 + 8);
      }
      if (v9) {
        uint64_t v7 = v5;
      }
      uint64_t v5 = *v10;
    }
    while (*v10);
    if (v7 != v4 && *(unsigned __int16 *)(v7 + 32) <= a2)
    {
      sub_21610B834(__p, __s);
      uint64_t v11 = sub_216178FA4(v7 + 40, __p);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if ((void **)(v7 + 48) != v11) {
        return *((unsigned __int16 *)v11 + 28);
      }
    }
  }
  return v3;
}

void sub_216199E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216199E90(uint64_t a1, uint64_t a2, CFStringRef theString)
{
  if (!theString || !CFStringGetLength(theString)) {
    return a2;
  }
  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (!CStringPtr) {
    operator new[]();
  }

  return sub_216199DC4(a1, a2, CStringPtr);
}

void sub_216199F90(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  __int16 v3 = a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v5 = a1 + 32;
  uint64_t v6 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v5;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v6 + 32);
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v6;
    }
    else {
      uint64_t v11 = (uint64_t *)(v6 + 8);
    }
    if (v10) {
      uint64_t v8 = v6;
    }
    uint64_t v6 = *v11;
  }
  while (*v11);
  if (v8 != v5 && *(unsigned __int16 *)(v8 + 32) <= a2)
  {
    uint64_t v13 = *(void **)(v8 + 40);
    char v14 = (void *)(v8 + 48);
    if (v13 != (void *)(v8 + 48))
    {
      uint64_t v15 = 0;
      unint64_t v16 = a3 + 2;
      do
      {
        if ((unint64_t)v15 >= *v16)
        {
          unint64_t v17 = *a3;
          uint64_t v18 = v15 - *a3;
          if (v18 <= -3) {
            sub_21610CB04();
          }
          uint64_t v19 = v18 >> 1;
          unint64_t v20 = *v16 - (void)v17;
          if (v20 <= (v18 >> 1) + 1) {
            uint64_t v21 = v19 + 1;
          }
          else {
            uint64_t v21 = *v16 - (void)v17;
          }
          if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v22 = v21;
          }
          if (v22)
          {
            uint64_t v23 = (char *)sub_21610FD44((uint64_t)(a3 + 2), v22);
            unint64_t v17 = *a3;
            uint64_t v15 = a3[1];
          }
          else
          {
            uint64_t v23 = 0;
          }
          uint64_t v24 = &v23[2 * v19];
          *(_WORD *)uint64_t v24 = *((_WORD *)v13 + 28);
          uint64_t v25 = v24 + 2;
          while (v15 != v17)
          {
            __int16 v26 = *((_WORD *)v15 - 1);
            v15 -= 2;
            *((_WORD *)v24 - 1) = v26;
            v24 -= 2;
          }
          *a3 = v24;
          a3[1] = v25;
          a3[2] = &v23[2 * v22];
          if (v17) {
            operator delete(v17);
          }
          uint64_t v15 = v25;
        }
        else
        {
          *(_WORD *)uint64_t v15 = *((_WORD *)v13 + 28);
          v15 += 2;
        }
        a3[1] = v15;
        uint64_t v27 = (void *)v13[1];
        if (v27)
        {
          do
          {
            uint64_t v28 = v27;
            uint64_t v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            uint64_t v28 = (void *)v13[2];
            BOOL v29 = *v28 == (void)v13;
            uint64_t v13 = v28;
          }
          while (!v29);
        }
        uint64_t v13 = v28;
      }
      while (v28 != v14);
    }
  }
  else
  {
LABEL_12:
    unint64_t v12 = (char *)operator new(2uLL);
    *(_WORD *)unint64_t v12 = v3;
    a3[1] = v12 + 2;
    a3[2] = v12 + 2;
    *a3 = v12;
  }
}

void sub_21619A130(_Unwind_Exception *exception_object)
{
  __int16 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21619A154(int a1, CFStringRef theString)
{
  v4[0] = 0;
  v4[1] = v4;
  void v4[2] = 0xE002000000;
  v4[3] = sub_21619A2F8;
  v4[4] = nullsub_81;
  CFStringRef v5 = theString;
  uint64_t v8 = 0;
  CFIndex Length = CFStringGetLength(theString);
  if (CFStringGetCharactersPtr(v5)) {
    CStringPtr = 0;
  }
  else {
    CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v7 = CStringPtr;
  operator new[]();
}

void sub_21619A2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_21619A2F8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8++**(_DWORD **)(result + 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 4sub_216195244(&a9, 0) = v2;
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  long long v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 12sub_216195244(&a9, 0) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  __n128 result = *(__n128 *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 184);
  long long v10 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a1 + 20sub_216195244(&a9, 0) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(__n128 *)(a1 + 16++**(_DWORD **)(result + 8) = result;
  return result;
}

void sub_21619A360(void *a1, int64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    uint64_t v5 = a1[5];
    if (a2 < 0 || (uint64_t v6 = *(void *)(a1[4] + 8), v7 = *(void *)(v6 + 200), v7 <= a2))
    {
      unsigned __int16 v9 = 0;
    }
    else
    {
      uint64_t v8 = *(void *)(v6 + 176);
      if (v8)
      {
        unsigned __int16 v9 = *(_WORD *)(v8 + 2 * (*(void *)(v6 + 192) + a2));
      }
      else
      {
        uint64_t v37 = *(void *)(v6 + 184);
        if (v37)
        {
          unsigned __int16 v9 = *(char *)(v37 + *(void *)(v6 + 192) + a2);
        }
        else
        {
          if (*(void *)(v6 + 216) <= a2 || (int64_t v38 = *(void *)(v6 + 208), v38 > a2))
          {
            int64_t v39 = a2 - 4;
            if ((unint64_t)a2 < 4) {
              int64_t v39 = 0;
            }
            if (v39 + 64 < v7) {
              int64_t v7 = v39 + 64;
            }
            *(void *)(v6 + 20++**(_DWORD **)(result + 8) = v39;
            *(void *)(v6 + 216) = v7;
            v41.location = *(void *)(v6 + 192) + v39;
            v41.length = v7 - v39;
            CFStringGetCharacters(*(CFStringRef *)(v6 + 168), v41, (UniChar *)(v6 + 40));
            int64_t v38 = *(void *)(v6 + 208);
          }
          unsigned __int16 v9 = *(_WORD *)(v6 + 40 + 2 * (a2 - v38));
        }
      }
    }
    uint64_t v32 = *(void *)(v5 + 8);
    uint64_t v31 = v5 + 8;
    uint64_t v30 = v32;
    if (v32)
    {
      uint64_t v33 = v31;
      do
      {
        unsigned int v34 = *(unsigned __int16 *)(v30 + 26);
        BOOL v35 = v34 >= v9;
        if (v34 >= v9) {
          CFURLRef v36 = (uint64_t *)v30;
        }
        else {
          CFURLRef v36 = (uint64_t *)(v30 + 8);
        }
        if (v35) {
          uint64_t v33 = v30;
        }
        uint64_t v30 = *v36;
      }
      while (*v36);
      if (v33 != v31 && *(unsigned __int16 *)(v33 + 26) <= v9) {
        unsigned __int16 v9 = *(_WORD *)(v33 + 28);
      }
    }
    *(_WORD *)(a1[6] + 2 * a2) = v9;
  }
  else if (a3 >= 1)
  {
    uint64_t v11 = 0;
    int64_t v12 = -a2;
    int64_t v13 = a2 + 64;
    uint64_t v14 = 2 * a2;
    unint64_t v15 = a2;
    do
    {
      if (v15 >= 4) {
        uint64_t v16 = 4;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = a2 + v11;
      if (a2 + v11 < 0 || (uint64_t v18 = *(void *)(a1[4] + 8), v19 = *(void *)(v18 + 200), v19 <= v17))
      {
        __int16 v21 = 0;
      }
      else
      {
        uint64_t v20 = *(void *)(v18 + 176);
        if (v20)
        {
          __int16 v21 = *(_WORD *)(v20 + 2 * (a2 + v11 + *(void *)(v18 + 192)));
        }
        else
        {
          uint64_t v22 = *(void *)(v18 + 184);
          if (v22)
          {
            __int16 v21 = *(char *)(v22 + *(void *)(v18 + 192) + a2 + v11);
          }
          else
          {
            if (*(void *)(v18 + 216) <= v17 || (uint64_t v23 = *(void *)(v18 + 208), v23 > v17))
            {
              uint64_t v24 = v16 + v12;
              int64_t v25 = v13 - v16;
              uint64_t v26 = -v16;
              uint64_t v27 = 64 - v16;
              uint64_t v28 = v11 + a2 - v16;
              int64_t v29 = a2 + v11 + v27;
              if (v29 >= v19) {
                int64_t v29 = *(void *)(v18 + 200);
              }
              *(void *)(v18 + 20++**(_DWORD **)(result + 8) = v28;
              *(void *)(v18 + 216) = v29;
              if (v19 >= v25) {
                int64_t v19 = v25;
              }
              v40.length = v19 + v24;
              v40.location = a2 + v11 + v26 + *(void *)(v18 + 192);
              CFStringGetCharacters(*(CFStringRef *)(v18 + 168), v40, (UniChar *)(v18 + 40));
              uint64_t v23 = *(void *)(v18 + 208);
            }
            __int16 v21 = *(_WORD *)(v18 - 2 * v23 + v14 + 2 * v11 + 40);
          }
        }
      }
      *(_WORD *)(a1[6] + v14 + 2 * v11++) = v21;
      ++v15;
      --v12;
      ++v13;
    }
    while (a3 != v11);
  }
}

CFStringRef sub_21619A5CC()
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v0 = MEMORY[0x270FA5388]();
  long long v4 = (const UniChar *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v8 = *(void *)(v0 + 8);
    uint64_t v6 = v0 + 8;
    uint64_t v7 = v8;
    do
    {
      unsigned int v9 = *(unsigned __int16 *)(v1 + 2 * v5);
      if (v7)
      {
        uint64_t v10 = v6;
        uint64_t v11 = v7;
        do
        {
          unsigned int v12 = *(unsigned __int16 *)(v11 + 26);
          BOOL v13 = v12 >= v9;
          if (v12 >= v9) {
            uint64_t v14 = (uint64_t *)v11;
          }
          else {
            uint64_t v14 = (uint64_t *)(v11 + 8);
          }
          if (v13) {
            uint64_t v10 = v11;
          }
          uint64_t v11 = *v14;
        }
        while (*v14);
        if (v10 != v6 && *(unsigned __int16 *)(v10 + 26) <= v9) {
          LOWORD(v9) = *(_WORD *)(v10 + 28);
        }
      }
      v4[v5++] = v9;
    }
    while (v5 != v2);
  }
  return CFStringCreateWithCharacters(0, v4, v2);
}

uint64_t sub_21619A6AC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = v3 - *a2;
  if (v3 != *a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 1;
    uint64_t v8 = *(void *)(result + 8);
    result += 8;
    uint64_t v7 = v8;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      unsigned int v9 = *(unsigned __int16 *)(v2 + 2 * v5);
      if (v7)
      {
        uint64_t v10 = result;
        uint64_t v11 = v7;
        do
        {
          unsigned int v12 = *(unsigned __int16 *)(v11 + 26);
          BOOL v13 = v12 >= v9;
          if (v12 >= v9) {
            uint64_t v14 = (uint64_t *)v11;
          }
          else {
            uint64_t v14 = (uint64_t *)(v11 + 8);
          }
          if (v13) {
            uint64_t v10 = v11;
          }
          uint64_t v11 = *v14;
        }
        while (*v14);
        if (v10 != result && *(unsigned __int16 *)(v10 + 26) <= v9) {
          LOWORD(v9) = *(_WORD *)(v10 + 28);
        }
      }
      *(_WORD *)(v2 + 2 * v5++) = v9;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_21619A724(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21619A724(a1, *a2);
    sub_21619A724(a1, a2[1]);
    sub_21619A784((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

void sub_21619A784(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_21619A784(a1, *(void *)a2);
    sub_21619A784(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *sub_21619A7E8(void *result, unsigned int a2)
{
  v22[3] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D0A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = result;
    unsigned int v9 = a2;
    int v10 = __cxa_guard_acquire(&qword_26797D0A8);
    a2 = v9;
    int v11 = v10;
    __n128 result = v8;
    if (v11)
    {
      unsigned int v13 = 33;
      sub_21610B834(v14, "UserInteractive");
      int v15 = 25;
      sub_21610B834(v16, "UserInitiated");
      int v17 = 21;
      sub_21610B834(v18, "Default");
      int v19 = 17;
      sub_21610B834(v20, "Utility");
      int v21 = 9;
      sub_21610B834(v22, "Background");
      sub_21619AB00(&v13, 5);
      for (uint64_t i = 0; i != -20; i -= 4)
      {
        if (SHIBYTE(v22[i + 2]) < 0) {
          operator delete((void *)v22[i]);
        }
      }
      __cxa_atexit((void (*)(void *))sub_21619AAFC, &xmmword_26797D0B0, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D0A8);
      __n128 result = v8;
      a2 = v9;
    }
  }
  if (!*((void *)&xmmword_26797D0B0 + 1)) {
    return sub_21610B834(result, "Unspecified");
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D0B0 + 8));
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = a2;
    if (*((void *)&xmmword_26797D0B0 + 1) <= (unint64_t)a2) {
      unint64_t v3 = (unint64_t)a2 % *((void *)&xmmword_26797D0B0 + 1);
    }
  }
  else
  {
    unint64_t v3 = (DWORD2(xmmword_26797D0B0) - 1) & a2;
  }
  uint64_t v4 = *(uint64_t ***)(xmmword_26797D0B0 + 8 * v3);
  if (!v4) {
    return sub_21610B834(result, "Unspecified");
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return sub_21610B834(result, "Unspecified");
  }
  while (1)
  {
    unint64_t v6 = v5[1];
    if (v6 == a2) {
      break;
    }
    if (v2.u32[0] > 1uLL)
    {
      if (v6 >= *((void *)&xmmword_26797D0B0 + 1)) {
        v6 %= *((void *)&xmmword_26797D0B0 + 1);
      }
    }
    else
    {
      v6 &= *((void *)&xmmword_26797D0B0 + 1) - 1;
    }
    if (v6 != v3) {
      return sub_21610B834(result, "Unspecified");
    }
LABEL_17:
    uint64_t v5 = (uint64_t *)*v5;
    if (!v5) {
      return sub_21610B834(result, "Unspecified");
    }
  }
  if (*((_DWORD *)v5 + 4) != a2) {
    goto LABEL_17;
  }
  if (*((char *)v5 + 47) < 0) {
    return sub_21610A674(result, (void *)v5[3], v5[4]);
  }
  long long v7 = *(_OWORD *)(v5 + 3);
  result[2] = v5[5];
  *(_OWORD *)__n128 result = v7;
  return result;
}

void sub_21619AA64(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 159) < 0) {
      operator delete(*(void **)(v1 + v3 + 136));
    }
    v3 -= 32;
    if (v3 == -160)
    {
      __cxa_guard_abort(&qword_26797D0A8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_21619AAE4()
{
}

void sub_21619AB00(unsigned int *a1, uint64_t a2)
{
  xmmword_26797D0B0 = 0u;
  *(_OWORD *)&qword_26797D0C0 = 0u;
  dword_26797D0D0 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0;
    uint64_t v5 = &a1[8 * a2];
    while (1)
    {
      unint64_t v6 = *v3;
      unint64_t v7 = *((void *)&xmmword_26797D0B0 + 1);
      if (*((void *)&xmmword_26797D0B0 + 1))
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D0B0 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v2 = *v3;
          if (*((void *)&xmmword_26797D0B0 + 1) <= v6) {
            unint64_t v2 = v6 % *((void *)&xmmword_26797D0B0 + 1);
          }
        }
        else
        {
          unint64_t v2 = (DWORD2(xmmword_26797D0B0) - 1) & v6;
        }
        unsigned int v9 = *(uint64_t ***)(xmmword_26797D0B0 + 8 * v2);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v11 = i[1];
            if (v11 == v6)
            {
              if (*((_DWORD *)i + 4) == v6) {
                goto LABEL_78;
              }
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= *((void *)&xmmword_26797D0B0 + 1)) {
                  v11 %= *((void *)&xmmword_26797D0B0 + 1);
                }
              }
              else
              {
                v11 &= *((void *)&xmmword_26797D0B0 + 1) - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      unsigned int v12 = (char *)operator new(0x30uLL);
      *(void *)unsigned int v12 = 0;
      *((void *)v12 + 1) = v6;
      *((_DWORD *)v12 + 4) = v6;
      unsigned int v13 = v12 + 24;
      if (*((char *)v3 + 31) < 0)
      {
        sub_21610A674(v13, *((void **)v3 + 1), *((void *)v3 + 2));
        uint64_t v4 = qword_26797D0C8;
      }
      else
      {
        long long v14 = *(_OWORD *)(v3 + 2);
        *((void *)v12 + 5) = *((void *)v3 + 3);
        *(_OWORD *)unsigned int v13 = v14;
      }
      float v15 = (float)(unint64_t)(v4 + 1);
      if (!v7 || (float)(*(float *)&dword_26797D0D0 * (float)v7) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = xmmword_26797D0B0;
      uint64_t v32 = *(void **)(xmmword_26797D0B0 + 8 * v2);
      if (v32)
      {
        *(void *)unsigned int v12 = *v32;
      }
      else
      {
        *(void *)unsigned int v12 = qword_26797D0C0;
        qword_26797D0C0 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_26797D0C0;
        if (!*(void *)v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v12 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v33 >= v7) {
            v33 %= v7;
          }
        }
        else
        {
          v33 &= v7 - 1;
        }
        uint64_t v32 = (void *)(xmmword_26797D0B0 + 8 * v33);
      }
      *uint64_t v32 = v12;
LABEL_77:
      uint64_t v4 = ++qword_26797D0C8;
LABEL_78:
      v3 += 8;
      if (v3 == v5) {
        return;
      }
    }
    BOOL v16 = (v7 & (v7 - 1)) != 0;
    if (v7 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26797D0D0);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = *((void *)&xmmword_26797D0B0 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26797D0B0 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26797D0B0 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26797D0C8 / *(float *)&dword_26797D0D0);
      if (*((void *)&xmmword_26797D0B0 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D0B0 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)&xmmword_26797D0B0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          int v21 = (void *)xmmword_26797D0B0;
          *(void *)&xmmword_26797D0B0 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26797D0B0 + 1) = prime;
          do
            *(void *)(xmmword_26797D0B0 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void **)qword_26797D0C0;
          if (qword_26797D0C0)
          {
            unint64_t v24 = *(void *)(qword_26797D0C0 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797D0B0 + 8 * v24) = &qword_26797D0C0;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26797D0B0 + 8 * v30))
                {
                  *(void *)(xmmword_26797D0B0 + 8 * v3sub_216195244(&a9, 0) = v23;
                  goto LABEL_59;
                }
                char *v23 = (void *)*j;
                *CFIndex j = **(void **)(xmmword_26797D0B0 + 8 * v30);
                **(void **)(xmmword_26797D0B0 + 8 * v3sub_216195244(&a9, 0) = j;
                CFIndex j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              uint64_t v23 = (void **)j;
              CFIndex j = (void *)*j;
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_63;
        }
        unsigned int v34 = (void *)xmmword_26797D0B0;
        *(void *)&xmmword_26797D0B0 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        *((void *)&xmmword_26797D0B0 + 1) = 0;
      }
    }
LABEL_63:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
    goto LABEL_68;
  }
}

void sub_21619AF60(_Unwind_Exception *a1)
{
  sub_21619AFA0(1, v1);
  sub_21619B000((uint64_t)&xmmword_26797D0B0);
  _Unwind_Resume(a1);
}

void sub_21619AFA0(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_21619B000(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_21619B068()
{
  sub_21610B834(&v12, "Serial");
  uint64_t v0 = std::string::insert(&v12, 0, "com.apple.mecabra.", 0x12uLL);
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  unint64_t v2 = std::string::append(&v13, "_", 1uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_21619A7E8(__p, 0x11u);
  if ((v11 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    std::string::size_type v5 = v11;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  unint64_t v6 = std::string::append(&v14, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v16 = v6->__r_.__value_.__r.__words[2];
  long long v15 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v16 >= 0) {
    uint8x8_t v8 = (const char *)&v15;
  }
  else {
    uint8x8_t v8 = (const char *)v15;
  }
  unsigned int v9 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  qword_26797EEA8 = (uint64_t)dispatch_queue_create(v8, v9);
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_21619B1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21619B22C(uint64_t a1, char *__s)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  size_t v4 = strlen(__s);
  CFURLRef v5 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)__s, v4, 1u);
  if (!v5) {
    goto LABEL_11;
  }
  CFURLRef v6 = CFURLCreateCopyAppendingPathComponent(0, v5, @"J_Numeral.dict", 0);
  CFURLRef v7 = CFURLCreateCopyAppendingPathComponent(0, v5, @"Josu.data", 0);
  CFURLRef v8 = v7;
  if (v6 && v7)
  {
    if (sub_216360AE8()) {
      *(void *)a1 = 0;
    }
    goto LABEL_7;
  }
  if (v7) {
LABEL_7:
  }
    CFRelease(v8);
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(v5);
LABEL_11:
  if (*(void *)a1) {
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  return a1;
}

void sub_21619B338(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(void *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21619B360(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_216361120(v2);
  }
  long long v3 = (const void *)a1[1];
  if (v3) {
    CFRelease(v3);
  }
  size_t v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = (uint64_t)v4;
    operator delete(v4);
  }
  return a1;
}

void sub_21619B3B0(uint64_t a1, UniChar *chars, unint64_t a3, int a4, uint64_t a5)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D0E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D0E0))
  {
    sub_2161C04AC(0);
    qword_26797D0D8 = (uint64_t)&qword_26797EF20;
    __cxa_guard_release(&qword_26797D0E0);
  }
  if (*(void *)a1 && a3 && chars && *(void *)(a1 + 8))
  {
    unint64_t v10 = 0;
    while (1)
    {
      int v11 = chars[v10];
      unsigned int v12 = v11 - 48;
      unsigned int v13 = (unsigned __int16)(v11 + 240);
      if (v12 >= 0xA && v13 > 9) {
        break;
      }
      if (a3 == ++v10)
      {
        unint64_t v10 = a3;
        break;
      }
    }
    int v15 = v10 == a3 ? 1 : a4;
    if (v10)
    {
      if (v15)
      {
        CFStringRef v16 = CFStringCreateWithCharacters(0, chars, v10);
        if (v16)
        {
          CFStringRef v17 = v16;
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v16);
          CFArrayRef v19 = Value;
          if (Value)
          {
LABEL_20:
            CFRelease(v17);
            uint64_t v54 = v10;
            uint64_t v55 = 0;
            uint64_t v53 = *(unsigned __int16 *)(qword_26797D0D8 + 50);
            WORD1(v53) = 5000;
            CFIndex Count = CFArrayGetCount(v19);
            LOBYTE(__p) = 0;
            if (Count >= 1)
            {
              CFIndex v21 = Count;
              CFIndex v22 = 0;
              do
              {
                LODWORD(v55) = v22;
                (*(void (**)(uint64_t, uint64_t *, void **))(a5 + 16))(a5, &v53, &__p);
                if (v22) {
                  __int16 v23 = 1000;
                }
                else {
                  __int16 v23 = 2000;
                }
                WORD1(v53) += v23;
                ++v22;
              }
              while (v22 < v21 && !(_BYTE)__p);
            }
            if (!Value) {
              CFRelease(v19);
            }
            return;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D0F0, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_26797D0F0))
          {
            qword_26797D0E8 = 19;
            __cxa_guard_release(&qword_26797D0F0);
          }
          if (qword_26797D0E8 > v10)
          {
            int v24 = *chars;
            if ((v24 - 48) < 0xA || (unsigned __int16)(v24 + 240) <= 9u)
            {
              uint64_t v25 = 1;
              while (v10 != v25)
              {
                int v26 = chars[v25];
                unsigned int v27 = v26 - 48;
                ++v25;
                unsigned int v28 = (unsigned __int16)(v26 + 240);
                if (v27 >= 0xA && v28 >= 0xA)
                {
                  if (v25 - 1 < v10) {
                    goto LABEL_51;
                  }
                  break;
                }
              }
              CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
              if (Mutable)
              {
                CFArrayRef v19 = Mutable;
                CFStringRef v32 = CFStringCreateWithCharacters(v30, chars, v10);
                if (v32)
                {
                  CFStringRef v33 = v32;
                  CFArrayAppendValue(v19, v32);
                  CFRelease(v33);
                }
                sub_21617FAAC(&__p, chars, v10);
                if (*chars - 48 > 9)
                {
LABEL_50:
                  sub_2161EB920((uint64_t)&__p);
                }
                else
                {
                  unint64_t v34 = 0;
                  while (v10 - 1 != v34)
                  {
                    unsigned int v35 = chars[++v34] - 48;
                    if (v35 >= 0xA)
                    {
                      if (v34 < v10) {
                        goto LABEL_50;
                      }
                      break;
                    }
                  }
                  sub_2161EBA4C((uint64_t)&__p);
                }
                if (v60 >= 0) {
                  p_p = (const UniChar *)&__p;
                }
                else {
                  p_p = (const UniChar *)__p;
                }
                if (v60 >= 0) {
                  CFIndex v37 = HIBYTE(v60);
                }
                else {
                  CFIndex v37 = v59;
                }
                CFStringRef v38 = CFStringCreateWithCharacters(v30, p_p, v37);
                if (v38)
                {
                  CFArrayAppendValue(v19, v38);
                  CFRelease(v38);
                }
                if (SHIBYTE(v60) < 0) {
                  operator delete(__p);
                }
                uint64_t v39 = 0;
                uint64_t v40 = 0;
                do
                {
                  uint64_t v41 = chars[v39];
                  if (v41 >> 4 <= 0xFF0) {
                    uint64_t v42 = -48;
                  }
                  else {
                    uint64_t v42 = -65296;
                  }
                  uint64_t v40 = v41 + 10 * v40 + v42;
                  ++v39;
                }
                while (v10 != v39);
                uint64_t v43 = 0;
                while (1)
                {
                  int v44 = chars[v43];
                  BOOL v45 = v44 == 48 || v44 == 65296;
                  if (!v45 && v44 != 12295) {
                    break;
                  }
                  if (v10 == ++v43)
                  {
                    uint64_t v43 = v10;
                    break;
                  }
                }
                uint64_t v53 = MEMORY[0x263EF8330];
                uint64_t v54 = 0x40000000;
                uint64_t v55 = sub_21619C444;
                double v56 = &unk_264266BC8;
                CFArrayRef v57 = v19;
                sub_21619C240(v40, v43, (uint64_t)&v53);
                if (!v43)
                {
                  long long __p = 0;
                  CFIndex v59 = 0;
                  uint64_t v60 = 0;
                  sub_2161EBD38(v40, (uint64_t)&__p);
                  if (v60 >= 0) {
                    uint64_t v47 = (const UniChar *)&__p;
                  }
                  else {
                    uint64_t v47 = (const UniChar *)__p;
                  }
                  if (v60 >= 0) {
                    CFIndex v48 = HIBYTE(v60);
                  }
                  else {
                    CFIndex v48 = v59;
                  }
                  CFStringRef v49 = CFStringCreateWithCharacters(v30, v47, v48);
                  if (v49)
                  {
                    CFArrayAppendValue(v19, v49);
                    CFRelease(v49);
                  }
                  sub_2161EBA4C((uint64_t)&__p);
                  if (v60 >= 0) {
                    BOOL v50 = (const UniChar *)&__p;
                  }
                  else {
                    BOOL v50 = (const UniChar *)__p;
                  }
                  if (v60 >= 0) {
                    CFIndex v51 = HIBYTE(v60);
                  }
                  else {
                    CFIndex v51 = v59;
                  }
                  CFStringRef v52 = CFStringCreateWithCharacters(v30, v50, v51);
                  if (v52)
                  {
                    CFArrayAppendValue(v19, v52);
                    CFRelease(v52);
                  }
                  if (SHIBYTE(v60) < 0) {
                    operator delete(__p);
                  }
                }
                if (CFArrayGetCount(v19)) {
                  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8), v17, v19);
                }
                goto LABEL_20;
              }
            }
          }
LABEL_51:
          CFRelease(v17);
        }
      }
    }
  }
}

void sub_21619B8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_21619B910(void *a1, int a2, UniChar *a3, const UniChar *a4, int a5, uint64_t a6)
{
  if (*a1 && a4 && a3 && a1[1])
  {
    if (a5) {
      sub_21619B940((uint64_t)a1, a2, a3, a4, a6);
    }
    else {
      sub_21619BBDC((uint64_t)a1, a2, a3, (unint64_t)a4, a6);
    }
  }
}

uint64_t sub_21619B940(uint64_t result, int a2, const UniChar *a3, const UniChar *a4, uint64_t a5)
{
  if (a3) {
    CFURLRef v5 = a4;
  }
  else {
    CFURLRef v5 = 0;
  }
  v39[0] = a3;
  v39[1] = v5;
  if (v5)
  {
    uint64_t v8 = result;
    CFStringRef v38 = 0;
    memset(v36, 0, sizeof(v36));
    int v37 = 1065353216;
    sub_216183E18((uint64_t *)v39, (unint64_t *)&v38, (uint64_t)v36, 0, __p);
    unint64_t v9 = v35;
    unsigned __int8 v10 = v35;
    if ((v35 & 0x80u) == 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    if ((v35 & 0x80u) != 0) {
      unint64_t v9 = (unint64_t)__p[1];
    }
    if (v11) {
      BOOL v12 = v9 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      unint64_t v13 = (unint64_t)v38;
      BOOL v14 = v38 && a2 == 0;
      if (!v14 && (void *)v9 != v38)
      {
        if (a2 != 1) {
          unint64_t v13 = 0;
        }
        unint64_t v15 = v9 - v13;
        unint64_t v16 = a2 == 1 ? 0 : v15 - 1;
        unint64_t v33 = v15;
        if (v15 > v16)
        {
          uint64_t v31 = a5;
          uint64_t v17 = 0;
          CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x263EFFB28];
          while (1)
          {
            CFArrayRef v19 = sub_21619C5BC(v36, &v33);
            CFIndex v20 = v33;
            if (v19)
            {
              if (!v33) {
                break;
              }
              BOOL v21 = 0;
              for (i = 0; i != v33; BOOL v21 = i >= v33)
              {
                int v23 = *((unsigned __int16 *)v11 + i);
                if ((v23 - 12353) >= 0x56 && v23 != 12540 && v23 != 12316) {
                  break;
                }
                ++i;
              }
              if (v21) {
                break;
              }
            }
LABEL_52:
            unint64_t v33 = v20 - 1;
            if (v20 - 1 <= v16)
            {
LABEL_53:
              unsigned __int8 v10 = v35;
              goto LABEL_54;
            }
          }
          if (v39[0]) {
            CFIndex v26 = v19[3];
          }
          else {
            CFIndex v26 = 0;
          }
          CFStringRef v27 = CFStringCreateWithCharacters(v18, v39[0], v26);
          CFStringRef v28 = CFStringCreateWithCharactersNoCopy(v18, (const UniChar *)v11, v20, contentsDeallocator);
          CFStringRef v29 = v28;
          if (v27)
          {
            if (!v28)
            {
              int v30 = 2 * (v17 == 2);
LABEL_49:
              CFRelease(v27);
              goto LABEL_50;
            }
            v17 += sub_21619BCD0(v8, v28, v27, v31);
            int v30 = 2 * (v17 == 2);
          }
          else
          {
            int v30 = 2 * (v17 == 2);
            if (!v28)
            {
LABEL_50:
              if (v30) {
                goto LABEL_53;
              }
              CFIndex v20 = v33;
              goto LABEL_52;
            }
          }
          CFRelease(v29);
          if (!v27) {
            goto LABEL_50;
          }
          goto LABEL_49;
        }
      }
    }
LABEL_54:
    if ((v10 & 0x80) != 0) {
      operator delete(__p[0]);
    }
    return sub_216144C28((uint64_t)v36);
  }
  return result;
}

void sub_21619BB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, const void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_216144C28((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_21619BBDC(uint64_t a1, int a2, UniChar *chars, unint64_t numChars, uint64_t a5)
{
  if (a2 == 1) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = numChars - 1;
  }
  if (v5 < numChars)
  {
    unint64_t v7 = numChars;
    uint64_t v10 = 0;
    do
    {
      BOOL v11 = 0;
      uint64_t v12 = 0;
      do
      {
        int v13 = chars[v12];
        if ((v13 - 12353) >= 0x56 && v13 != 12540 && v13 != 12316) {
          break;
        }
        BOOL v11 = ++v12 >= v7;
      }
      while (v7 != v12);
      if (v11)
      {
        CFStringRef v16 = CFStringCreateWithCharacters(0, chars, v7);
        if (v16)
        {
          CFStringRef v17 = v16;
          v10 += sub_21619BCD0(a1, v17, v17, a5);
          CFRelease(v17);
        }
        if (v10 == 2) {
          break;
        }
      }
      --v7;
    }
    while (v7 > v5);
  }
}

BOOL sub_21619BCD0(uint64_t a1, const __CFString *a2, const __CFString *key, uint64_t a4)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), key);
  if (Value)
  {
    CFArrayRef v9 = Value;
    CFRetain(Value);
  }
  else
  {
    CFMutableArrayRef v10 = sub_21619BE00((uint64_t *)a1, a2);
    if (!v10) {
      return 0;
    }
    CFArrayRef v9 = v10;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8), key, v10);
  }
  sub_2161C04AC(0);
  v18[0] = (unsigned __int16)word_26797EF52;
  v18[1] = CFStringGetLength(key);
  uint64_t v19 = 0;
  char v17 = 0;
  CFIndex Count = CFArrayGetCount(v9);
  BOOL v12 = Count > 0;
  if (Count >= 1)
  {
    CFIndex v13 = Count;
    CFIndex v14 = 0;
    do
    {
      LODWORD(v19) = v14;
      WORD1(v18[0]) = v14 + 8000;
      (*(void (**)(uint64_t, void *, char *))(a4 + 16))(a4, v18, &v17);
      ++v14;
      if (v17) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v14 < v13;
      }
    }
    while (v15);
  }
  CFRelease(v9);
  return v12;
}

CFMutableArrayRef sub_21619BE00(uint64_t *a1, CFStringRef theString)
{
  v43[1] = *MEMORY[0x263EF8340];
  if (!*a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  CFStringGetMaximumSizeForEncoding(Length, 0x10000100u);
  MEMORY[0x270FA5388]();
  CFURLRef v6 = (char *)&buffer[-4] - v5;
  v43[0] = 0;
  v44.location = 0;
  v44.length = Length;
  CFStringGetBytes(theString, v44, 0x10000100u, 0, 0, (UInt8 *)&buffer[-4] - v5, v7, v43);
  int v42 = 1752788843;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (sub_2162B41E4(*a1, 2037345641, v43[0], (uint64_t)v6, 1025515552, 1, (uint64_t)&v42, 0, 0, 1u, Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  else
  {
    uint64_t v33 = (uint64_t)&v33;
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      do
      {
        uint64_t v11 = v10--;
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Mutable, v10);
        CFIndex v13 = CFStringGetLength(ValueAtIndex);
        CFStringRef v35 = ValueAtIndex;
        uint64_t v38 = 0;
        CFIndex v39 = v13;
        CharactersPtr = CFStringGetCharactersPtr(ValueAtIndex);
        CStringPtr = 0;
        CFURLRef v36 = CharactersPtr;
        if (!CharactersPtr) {
          CStringPtr = CFStringGetCStringPtr(ValueAtIndex, 0x600u);
        }
        int v37 = CStringPtr;
        int64_t v40 = 0;
        int64_t v41 = 0;
        if (v13 >= 1)
        {
          uint64_t v16 = 0;
          int64_t v17 = 0;
          int64_t v18 = 0;
          unint64_t v19 = 0;
          uint64_t v20 = 64;
          do
          {
            if ((unint64_t)v18 >= 4) {
              uint64_t v21 = 4;
            }
            else {
              uint64_t v21 = v18;
            }
            CFIndex v22 = v39;
            if (v39 <= v18)
            {
              UniChar v23 = 0;
            }
            else if (v36)
            {
              UniChar v23 = v36[v18 + v38];
            }
            else if (v37)
            {
              UniChar v23 = v37[v38 + v18];
            }
            else
            {
              if (v41 <= v18 || v17 > v18)
              {
                uint64_t v28 = v21 + v16;
                uint64_t v29 = v20 - v21;
                int64_t v30 = v18 - v21;
                CFIndex v31 = v30 + 64;
                if (v30 + 64 >= v39) {
                  CFIndex v31 = v39;
                }
                int64_t v40 = v30;
                int64_t v41 = v31;
                if (v39 >= v29) {
                  CFIndex v22 = v29;
                }
                v45.length = v22 + v28;
                v45.location = v30 + v38;
                CFStringGetCharacters(v35, v45, buffer);
                int64_t v17 = v40;
              }
              UniChar v23 = buffer[v18 - v17];
            }
            unsigned int v24 = (unsigned __int16)(v23 - 48);
            unsigned int v25 = (unsigned __int16)(v23 + 240);
            if (v24 < 0xA || v25 < 0xA) {
              ++v19;
            }
            ++v18;
            --v16;
            ++v20;
          }
          while (v13 != v18);
          if (v19 > 5) {
            CFArrayRemoveValueAtIndex(Mutable, v10);
          }
        }
      }
      while (v11 > 1);
    }
    v46.length = CFArrayGetCount(Mutable);
    v46.location = 0;
    CFArraySortValues(Mutable, v46, (CFComparatorFunction)sub_21619C4A8, 0);
  }
  return Mutable;
}

uint64_t sub_21619C158(uint64_t a1, const UniChar *a2, CFIndex a3, unsigned int a4, _DWORD *a5)
{
  if (a5) {
    *a5 = 0;
  }
  CFStringRef v8 = CFStringCreateWithCharacters(0, a2, a3);
  if (!v8) {
    return 0;
  }
  CFStringRef v9 = v8;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v8);
  if (Value
    && (CFArrayRef v11 = Value, CFArrayGetCount(Value) > a4)
    && (CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, a4)) != 0
    && (CFStringRef v13 = ValueAtIndex, (Length = CFStringGetLength(ValueAtIndex)) != 0))
  {
    CFIndex v15 = Length;
    if (a5) {
      *a5 = Length;
    }
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)(a1 + 24);
    int64_t v18 = (void *)(a1 + 16);
    uint64_t v19 = v17 - v16;
    sub_216184BFC((uint64_t)v18, Length + ((v17 - v16) >> 1));
    v22.location = 0;
    v22.length = v15;
    CFStringGetCharacters(v13, v22, (UniChar *)(*v18 + v19));
    uint64_t v20 = *v18 + v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
  CFRelease(v9);
  return v20;
}

void sub_21619C240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_216184398(&__p, a2 + 20);
  if (a2)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216198220((uint64_t)&__p, "\a0", 1uLL);
      --v6;
    }
    while (v6);
  }
  if (!a1) {
    goto LABEL_11;
  }
  uint64_t v7 = a1;
  do
  {
    char v8 = sub_2161EB850(v7 % 10, (uint64_t)&__p);
    if ((unint64_t)(v7 - 10) < 0xFFFFFFFFFFFFFFEDLL) {
      char v9 = v8;
    }
    else {
      char v9 = 0;
    }
    v7 /= 10;
  }
  while ((v9 & 1) != 0);
  if (v8)
  {
LABEL_11:
    unsigned __int8 v10 = HIBYTE(v22);
    if (SHIBYTE(v22) < 0)
    {
      uint64_t v11 = v21;
      if (!v21) {
        goto LABEL_29;
      }
      p_p = (char *)__p;
    }
    else
    {
      if (!HIBYTE(v22)) {
        goto LABEL_29;
      }
      uint64_t v11 = HIBYTE(v22);
      p_p = (char *)&__p;
    }
    if (v11 != a2)
    {
      CFStringRef v13 = &p_p[2 * v11 - 2];
      if (v13 > &p_p[2 * a2])
      {
        unint64_t v14 = (unint64_t)&p_p[2 * a2 + 2];
        do
        {
          __int16 v15 = *(_WORD *)(v14 - 2);
          *(_WORD *)(v14 - 2) = *(_WORD *)v13;
          *(_WORD *)CFStringRef v13 = v15;
          v13 -= 2;
          BOOL v16 = v14 >= (unint64_t)v13;
          v14 += 2;
        }
        while (!v16);
        unsigned __int8 v10 = HIBYTE(v22);
      }
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v17 = &__p;
    }
    else {
      uint64_t v17 = __p;
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v18 = v10;
    }
    else {
      uint64_t v18 = v21;
    }
    (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v17, v18);
  }
LABEL_29:
  if (SHIBYTE(v22) < 0)
  {
    *(_WORD *)long long __p = 0;
    uint64_t v21 = 0;
    if (a2) {
      goto LABEL_40;
    }
  }
  else
  {
    LOWORD(__p) = 0;
    HIBYTE(v22) = 0;
    if (a2) {
      goto LABEL_40;
    }
  }
  if (sub_2161EB850(a1, (uint64_t)&__p))
  {
    if (SHIBYTE(v22) < 0)
    {
      if (!v21) {
        goto LABEL_40;
      }
      uint64_t v19 = __p;
    }
    else
    {
      if (!HIBYTE(v22)) {
        return;
      }
      uint64_t v19 = &__p;
    }
    (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v19);
  }
LABEL_40:
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
}

void sub_21619C41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21619C444(uint64_t a1, const UniChar *a2, CFIndex a3)
{
  long long v3 = *(__CFArray **)(a1 + 32);
  CFStringRef v4 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3);
  if (v4)
  {
    CFStringRef v5 = v4;
    CFArrayAppendValue(v3, v4);
    CFRelease(v5);
  }
}

uint64_t sub_21619C4A8(const __CFString *a1, const __CFString *a2)
{
  if (!sub_2161E386C(a1) || !sub_2161E386C(a2)) {
    return 0;
  }
  int v11 = 0;
  int v12 = 0;
  sub_2161EC6F4(a1, (unsigned char *)&v12 + 3, (unsigned char *)&v12 + 2, (unsigned char *)&v12 + 1, &v12);
  sub_2161EC6F4(a2, (unsigned char *)&v11 + 3, (unsigned char *)&v11 + 2, (unsigned char *)&v11 + 1, &v11);
  if (BYTE1(v12)) {
    BOOL v4 = BYTE2(v12) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  int v5 = v4;
  if (BYTE1(v11)) {
    BOOL v6 = BYTE2(v11) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  int v7 = v6;
  if (v5 == 1 && v7 == 0) {
    return -1;
  }
  if ((v5 | v7 ^ 1) != 1) {
    return 1;
  }
  if (!HIBYTE(v12) && HIBYTE(v11)) {
    return -1;
  }
  if (HIBYTE(v12) && !HIBYTE(v11)) {
    return 1;
  }
  if (!BYTE1(v12) && BYTE1(v11)) {
    return -1;
  }
  if (BYTE1(v12) && !BYTE1(v11)) {
    return 1;
  }
  if ((_BYTE)v12 && !(_BYTE)v11) {
    return -1;
  }
  if ((_BYTE)v12) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v11 == 0;
  }
  return !v10;
}

void *sub_21619C5BC(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  BOOL v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t MecabraSegmentGetRange(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 24);
  }
  else {
    return -1;
  }
}

uint64_t MecabraSegmentGetReading(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

void *sub_21619C69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MecabraSegmentGetTypeID();
  __n128 result = (void *)_CFRuntimeCreateInstance();
  if (result)
  {
    result[2] = a1;
    result[3] = a2;
    result[4] = a3;
    result[5] = 0;
  }
  return result;
}

uint64_t MecabraSegmentGetTypeID()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EEC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EEC0))
  {
    qword_26797EEB8 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_26797EEC0);
  }
  return qword_26797EEB8;
}

void sub_21619C754(_Unwind_Exception *a1)
{
}

void sub_21619C76C(uint64_t a1)
{
  if (a1)
  {
    int8x8_t v2 = *(const void **)(a1 + 16);
    if (v2) {
      CFRelease(v2);
    }
    unint64_t v3 = *(const void **)(a1 + 40);
    if (v3)
    {
      CFRelease(v3);
    }
  }
}

__CFString *sub_21619C7B8(void *a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"<MecabraSegment %p>{reading = ", a1);
  if (a1[2]) {
    CFStringRef v3 = (const __CFString *)a1[2];
  }
  else {
    CFStringRef v3 = @"NULL";
  }
  CFStringAppend(Mutable, v3);
  CFStringAppendFormat(Mutable, 0, @" range = {%ld, %ld}}", a1[3], a1[4]);
  return Mutable;
}

void sub_21619C840(unsigned int a1@<W0>, void *a2@<X8>)
{
  uint8x8_t v4 = sub_2161E2A24(a1);
  sub_21610B834(&v9, v4);
  unint64_t v5 = std::string::append(&v9, "Tokenizer", 9uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
  long long v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  void v7[2] = sub_21619D1C4;
  v7[3] = &unk_264266BE8;
  unsigned int v8 = a1;
  sub_21619C954((char *)&v10, (uint64_t)v7, 0, a2);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
}

void sub_21619C924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

void sub_21619C954(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D100))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D108))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797B588, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D108);
  }
  std::mutex::lock(&stru_26797B588);
  long long v6 = (void *)qword_26797D0F8;
  unint64_t v7 = sub_216129260(qword_26797D0F8 + 24, (uint64_t)a1);
  int8x8_t v8 = (int8x8_t)v6[1];
  if (!*(void *)&v8) {
    goto LABEL_20;
  }
  unint64_t v9 = v7;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v12 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v12 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v8 - 1) & v7;
  }
  CFStringRef v13 = *(unsigned __int8 ***)(*v6 + 8 * v12);
  if (!v13 || (unint64_t v14 = *v13) == 0)
  {
LABEL_20:
    uint64_t v17 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v18 = os_signpost_id_make_with_pointer(v17, a1);
    uint64_t v19 = sub_2162D1CE4(0xDu);
    if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v20 = v19;
      if (os_signpost_enabled(v19))
      {
        if (a1[23] >= 0) {
          uint64_t v21 = a1;
        }
        else {
          uint64_t v21 = *(char **)a1;
        }
        int buf = 136315138;
        *(void *)buf_4 = v21;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v18, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    operator new();
  }
  uint64_t v15 = (uint64_t)(v6 + 4);
  while (1)
  {
    unint64_t v16 = *((void *)v14 + 1);
    if (v16 == v9) {
      break;
    }
    if (v11 > 1)
    {
      if (v16 >= *(void *)&v8) {
        v16 %= *(void *)&v8;
      }
    }
    else
    {
      v16 &= *(void *)&v8 - 1;
    }
    if (v16 != v12) {
      goto LABEL_20;
    }
LABEL_19:
    unint64_t v14 = *(unsigned __int8 **)v14;
    if (!v14) {
      goto LABEL_20;
    }
  }
  if ((sub_21612970C(v15, v14 + 16, (unsigned __int8 *)a1) & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v14 + 6);
  if (!v22) {
    goto LABEL_20;
  }
  if (v22->__shared_owners_ == -1 || a3 != 0) {
    goto LABEL_20;
  }
  unsigned int v24 = std::__shared_weak_count::lock(v22);
  if (v24) {
    uint64_t v25 = *((void *)v14 + 5);
  }
  else {
    uint64_t v25 = 0;
  }
  std::mutex::unlock(&stru_26797B588);
  *a4 = v25;
  a4[1] = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_2161121B0(v24);
  }
}

void sub_21619D120(_Unwind_Exception *a1)
{
}

void sub_21619D1C4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32) == 5) {
    operator new();
  }
  operator new();
}

void sub_21619D23C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1081C40EAC9FDC4);
  _Unwind_Resume(a1);
}

void sub_21619D280(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21619D2B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21619D2E8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC118)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_21619D32C(void *a1)
{
  *a1 = &unk_26C6C5340;
  operator new();
}

void sub_21619D3E0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10B3C4016B90007);
  _Unwind_Resume(a1);
}

void *sub_21619D418(void *a1)
{
  *a1 = &unk_26C6C4CC8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_21619D484(void *a1)
{
  *a1 = &unk_26C6C5340;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[1] = 0;
  a1[2] = &unk_26C6C4CC8;
  uint64_t v3 = a1[3];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_21619D540(void *a1)
{
  sub_21619D484(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21619D578(uint64_t a1, uint64_t a2)
{
  if (sub_2163460AC(*(void **)(a1 + 24), a2)) {
    sub_21617682C();
  }
  uint64_t v3 = (char *)sub_216178B54(*(void *)(a1 + 8) + 136);
  sub_21610B834(&v12, v3);
  std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
  }
  if (size) {
    std::string::append(&v12, " ", 1uLL);
  }
  unint64_t v5 = sub_216178B54(*(void *)(a1 + 24) + 88);
  std::string::size_type v6 = strlen((const char *)v5);
  std::string::append(&v12, (const std::string::value_type *)v5, v6);
  int v7 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  int8x8_t v8 = (void *)v12.__r_.__value_.__r.__words[0];
  unint64_t v9 = (char *)off_26B4ABC00(&off_26B4ABC00);
  strncpy(v9, v10, 0xFFuLL)[255] = 0;
  if (v7 < 0) {
    operator delete(v8);
  }
  return 0;
}

void sub_21619D6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21619D6C8()
{
  sub_21619DFD0((uint64_t)v0);
  sub_2161C839C();
}

void sub_21619D7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21619E1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_21619D7B8(uint64_t a1, char *a2)
{
  uint64_t v3 = a1 + 8;
  sub_21610B834(&__p, a2);
  uint8x8_t v4 = sub_216178FA4(v3, &__p);
  if (SHIBYTE(v17[0]) < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v4) {
    operator new();
  }
  if (*((char *)v4 + 79) < 0)
  {
    sub_21610A674(v13, v4[7], (unint64_t)v4[8]);
  }
  else
  {
    *(_OWORD *)CFStringRef v13 = *(_OWORD *)(v4 + 7);
    unint64_t v14 = v4[9];
  }
  sub_216140140((uint64_t)&__p);
  double v15 = 0.0;
  if (SHIBYTE(v14) >= 0) {
    unint64_t v5 = v13;
  }
  else {
    unint64_t v5 = (void **)v13[0];
  }
  if (SHIBYTE(v14) >= 0) {
    uint64_t v6 = HIBYTE(v14);
  }
  else {
    uint64_t v6 = (uint64_t)v13[1];
  }
  int v7 = sub_216129E78(v17, (uint64_t)v5, v6);
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0
    || (int8x8_t v8 = (void *)MEMORY[0x2166CA4B0](&__p, &v15), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0)
    || (unint64_t v9 = sub_216179138(&__p), (*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 2) == 0))
  {
    operator new();
  }
  double v12 = v15;
  long long __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v17 + *((void *)__p - 3)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v17[0] = v10;
  v17[1] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](&v19);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  return v12;
}

void sub_21619DAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21619DB28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3 || !*(void *)(a1 + 24))
  {
    unint64_t v9 = (char *)off_26B4ABC00(&off_26B4ABC00);
    uint64_t v10 = "current model is not available";
LABEL_11:
    uint64_t v8 = 0;
    strncpy(v9, v10, 0xFFuLL)[255] = 0;
    goto LABEL_12;
  }
  if (!a2 || !*(void *)(a2 + 8) || !*(void *)(a2 + 24))
  {
    unint64_t v9 = (char *)off_26B4ABC00(&off_26B4ABC00);
    goto LABEL_11;
  }
  uint64_t v5 = 0;
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 56), 1uLL);
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v5, 1uLL);
  if (v5)
  {
    do
    {
      sched_yield();
      uint64_t v6 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v6, 1uLL);
    }
    while (v6);
  }
  uint64_t v7 = *(void *)(v2 + 8);
  *(void *)(v2 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = v7;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v2 + 32);
  *(void *)(a1 + 4sub_216195244(&a9, 0) = *(void *)(v2 + 40);
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t v8 = 1;
  uint64_t v2 = a2;
LABEL_12:
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  return v8;
}

void sub_21619DCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 48))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21619DD0C(void *a1)
{
  *a1 = &unk_26C6C4CA8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  return a1;
}

uint64_t sub_21619DD78(uint64_t a1)
{
  if (*(void *)(a1 + 8) && *(void *)(a1 + 24)) {
    operator new();
  }
  uint64_t v1 = (char *)off_26B4ABC00(&off_26B4ABC00);
  strncpy(v1, "Model is not available", 0xFFuLL)[255] = 0;
  return 0;
}

void sub_21619DEDC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F3C40EC662B3ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_21619DF00(uint64_t a1)
{
  if (*(void *)(a1 + 8) && *(void *)(a1 + 24)) {
    operator new();
  }
  uint64_t v1 = (char *)off_26B4ABC00(&off_26B4ABC00);
  strncpy(v1, "Model is not available", 0xFFuLL)[255] = 0;
  return 0;
}

void sub_21619DF84(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F3C4086B49158);
  _Unwind_Resume(a1);
}

uint64_t sub_21619DFA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v1) {
    return *(void *)(v1 + 296);
  }
  else {
    return 0;
  }
}

uint64_t sub_21619DFC4(uint64_t a1, unsigned int a2, int a3)
{
  return sub_216178CF4(*(void *)(*(void *)(a1 + 8) + 88), a2, a3);
}

uint64_t sub_21619DFD0(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = a1 + 16;
  *(void *)a1 = &unk_26C6C5240;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_216128C80(a1 + 128);
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 40sub_216195244(&a9, 0) = 0;
  *(void *)(a1 + 40++**(_DWORD **)(result + 8) = 0;
  return a1;
}

void sub_21619E064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 + 127) < 0) {
    operator delete(*(void **)(v3 + 104));
  }
  if (*(char *)(v3 + 103) < 0) {
    operator delete(*(void **)(v3 + 80));
  }
  if (*(char *)(v3 + 79) < 0) {
    operator delete(*(void **)(v3 + 56));
  }
  sub_21613EFD0((void ***)va);
  sub_21619E0F0(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_21619E0B8(uint64_t a1)
{
  sub_21619E1A4(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21619E0F0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21619E0F0(a1, *a2);
    sub_21619E0F0(a1, a2[1]);
    sub_21619E14C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21619E14C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_21619E1A4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5240;
  uint64_t v2 = a1 + 128;
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 12++**(_DWORD **)(result + 8) = *MEMORY[0x263F8C2C8];
  *(void *)(v2 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *(void *)(a1 + 136) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 240);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v6 = (void **)(a1 + 32);
  sub_21613EFD0(&v6);
  sub_21619E0F0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_21619E32C(void *a1)
{
  *a1 = &unk_26C6C4CC8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166CA800);
}

void *sub_21619E3B8(void *a1)
{
  *a1 = &unk_26C6C4D88;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166CA800](v2, 0x1000C4000313F17);
  }
  return a1;
}

void sub_21619E414(void *a1)
{
  *a1 = &unk_26C6C4D88;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166CA800](v1, 0x1000C4000313F17);
  }

  JUMPOUT(0x2166CA800);
}

void sub_21619E490(void *a1)
{
  *a1 = &unk_26C6C4CA8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21619E51C(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    int v2 = 0;
    uint64_t v3 = a2;
    uint64_t v4 = &qword_26797D000;
    uint64_t v5 = &qword_26797D000;
    do
    {
      uint64_t v6 = v3 - 1;
      unsigned int v7 = *(unsigned __int16 *)(a1 + 2 * (v3 - 1));
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D110, memory_order_acquire) & 1) == 0)
      {
        uint64_t v27 = v3;
        uint64_t v35 = a1;
        int v29 = v2;
        uint64_t v31 = v3 - 1;
        unsigned int v33 = v7;
        int v20 = __cxa_guard_acquire(&qword_26797D110);
        unsigned int v7 = v33;
        uint64_t v6 = v31;
        uint64_t v5 = &qword_26797D000;
        uint64_t v4 = &qword_26797D000;
        uint64_t v3 = v27;
        int v2 = v29;
        int v21 = v20;
        a1 = v35;
        if (v21)
        {
          uint64_t v22 = 0;
          qword_26797D130 = 0;
          qword_26797D128 = 0;
          qword_26797D120 = (uint64_t)&qword_26797D128;
          do
          {
            __int16 v37 = asc_2163CA684[v22];
            sub_216179580((uint64_t **)&qword_26797D120, (unsigned __int16 *)&v37, &v37);
            ++v22;
          }
          while (v22 != 13);
          __cxa_atexit((void (*)(void *))sub_21619E980, &qword_26797D120, &dword_2160F5000);
          __cxa_guard_release(&qword_26797D110);
          a1 = v35;
          int v2 = v29;
          uint64_t v3 = v27;
          uint64_t v4 = &qword_26797D000;
          uint64_t v5 = &qword_26797D000;
          uint64_t v6 = v31;
          unsigned int v7 = v33;
        }
      }
      __guard v8 = v4[37];
      if (!v8) {
        goto LABEL_47;
      }
      unint64_t v9 = &qword_26797D128;
      do
      {
        unsigned int v10 = *(unsigned __int16 *)(v8 + 26);
        BOOL v11 = v10 >= v7;
        if (v10 >= v7) {
          double v12 = (__guard *)v8;
        }
        else {
          double v12 = (__guard *)(v8 + 8);
        }
        if (v11) {
          unint64_t v9 = (uint64_t *)v8;
        }
        __guard v8 = *v12;
      }
      while (*v12);
      if (v9 != &qword_26797D128 && *((unsigned __int16 *)v9 + 13) <= v7)
      {
        ++v2;
      }
      else
      {
LABEL_47:
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D118, memory_order_acquire) & 1) == 0)
        {
          uint64_t v36 = a1;
          int v30 = v2;
          uint64_t v28 = v3;
          uint64_t v32 = v6;
          unsigned int v34 = v7;
          int v23 = __cxa_guard_acquire(&qword_26797D118);
          unsigned int v7 = v34;
          uint64_t v6 = v32;
          uint64_t v5 = &qword_26797D000;
          uint64_t v4 = &qword_26797D000;
          uint64_t v3 = v28;
          int v2 = v30;
          int v24 = v23;
          a1 = v36;
          if (v24)
          {
            uint64_t v25 = 0;
            qword_26797D148 = 0;
            qword_26797D140 = 0;
            qword_26797D138 = (uint64_t)&qword_26797D140;
            do
            {
              unsigned __int16 v38 = asc_2163CA668[v25];
              *((_DWORD *)sub_21619E9D8(v38, &v38) + ++**(_DWORD **)(result + 8) = v25++;
            }
            while (v25 != 13);
            __cxa_atexit((void (*)(void *))sub_21619E9AC, &qword_26797D138, &dword_2160F5000);
            __cxa_guard_release(&qword_26797D118);
            a1 = v36;
            int v2 = v30;
            uint64_t v3 = v28;
            uint64_t v4 = &qword_26797D000;
            uint64_t v5 = &qword_26797D000;
            uint64_t v6 = v32;
            unsigned int v7 = v34;
          }
        }
        __guard v13 = v5[40];
        if (v13)
        {
          unint64_t v14 = &qword_26797D140;
          do
          {
            unsigned int v15 = *(unsigned __int16 *)(v13 + 28);
            BOOL v16 = v15 >= v7;
            if (v15 >= v7) {
              uint64_t v17 = (__guard *)v13;
            }
            else {
              uint64_t v17 = (__guard *)(v13 + 8);
            }
            if (v16) {
              unint64_t v14 = (uint64_t *)v13;
            }
            __guard v13 = *v17;
          }
          while (*v17);
          if (v14 != &qword_26797D140 && *((unsigned __int16 *)v14 + 14) <= v7)
          {
            uint64_t v18 = *((unsigned int *)v14 + 8);
            if ((v18 & 0x80000000) == 0)
            {
              if (v2 <= 0) {
                return (unsigned __int16)asc_2163CA684[v18];
              }
              --v2;
            }
          }
        }
      }
      BOOL v19 = v3 <= 1;
      uint64_t v3 = v6;
    }
    while (!v19);
  }
  return 0;
}

void sub_21619E898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __guard *a10)
{
}

uint64_t sub_21619E8DC(uint64_t *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t result = sub_21619E51C(a3, a4);
  __int16 v10 = result;
  if (result)
  {
    sub_2161C04AC(0);
    uint64_t v7 = *a1;
    __guard v8 = sub_216268B64();
    LOBYTE(v9) = 0;
    return sub_2162859A8(v7, a2, *v8, v8[1], (uint64_t)&v10, 1, (uint64_t)&v10, 1, 105449033, 0, 1, v9, 67, 2, 2);
  }
  return result;
}

uint64_t sub_21619E980(uint64_t a1)
{
  return a1;
}

uint64_t sub_21619E9AC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_21619E9D8(unsigned __int16 a1, _WORD *a2)
{
  uint64_t v3 = qword_26797D140;
  if (qword_26797D140)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (uint64_t *)v3;
        unsigned int v5 = *(unsigned __int16 *)(v3 + 28);
        if (v5 <= a1) {
          break;
        }
        uint64_t v3 = *v4;
        uint64_t v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      if (v5 >= a1) {
        break;
      }
      uint64_t v3 = v4[1];
      if (!v3)
      {
        uint64_t v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = &qword_26797D140;
    uint64_t v4 = &qword_26797D140;
LABEL_9:
    uint64_t v7 = v4;
    uint64_t v4 = (uint64_t *)operator new(0x28uLL);
    *((_WORD *)v4 + 14) = *a2;
    *((_DWORD *)v4 + ++**(_DWORD **)(result + 8) = 0;
    *uint64_t v4 = 0;
    v4[1] = 0;
    void v4[2] = (uint64_t)v7;
    uint64_t *v6 = (uint64_t)v4;
    __guard v8 = v4;
    if (*(void *)qword_26797D138)
    {
      qword_26797D138 = *(void *)qword_26797D138;
      __guard v8 = (uint64_t *)*v6;
    }
    sub_21612A6F4((uint64_t *)qword_26797D140, v8);
    ++qword_26797D148;
  }
  return v4;
}

void sub_21619EAB4(void *a1)
{
  if (a1)
  {
    sub_21619EAB4(*a1);
    sub_21619EAB4(a1[1]);
    operator delete(a1);
  }
}

void sub_21619EB00(uint64_t a1, const __CFString *a2)
{
}

void sub_21619EBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    MEMORY[0x2166CA7C0](v11, 0x1000C80BDFB0063);
  }
  if (v10) {
    MEMORY[0x2166CA7C0](v10, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void sub_21619EC40(uint64_t a1)
{
  uint64_t v1 = sub_21619FB0C(a1);
  *(void *)(v1 + 36sub_216195244(&a9, 0) = 0;
  *(void *)(v1 + 36++**(_DWORD **)(result + 8) = 0x1FF00000000;
  operator new[]();
}

void sub_21619ECCC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 384);
  *(void *)(v1 + 384) = 0;
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *(void *)(v1 + 376);
  *(void *)(v1 + 376) = 0;
  if (v4) {
    MEMORY[0x2166CA7C0](v4, 0x1000C8052888210);
  }
  sub_21619FBCC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21619ED34(uint64_t a1)
{
  sub_216180AD8(a1);
  if (*(char *)(a1 + 679) < 0) {
    operator delete(*(void **)(a1 + 656));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 392) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 392 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 40sub_216195244(&a9, 0) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 504);
  uint64_t v4 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  if (v4) {
    MEMORY[0x2166CA7C0](v4, 0x1000C8052888210);
  }
  uint64_t v5 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C8052888210);
  }

  return sub_21619FBCC(a1);
}

uint64_t sub_21619EEA4(uint64_t a1, uint64_t a2)
{
  sub_21619EFA8(a2, "dicdir", (uint64_t)v8);
  sub_21610B834(__p, "matrix.bin");
  sub_2161CB960((uint64_t)v8, (uint64_t)__p, &v10);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v10;
  }
  else {
    uint64_t v3 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  uint64_t v4 = sub_21619F0C0(a1, (char *)v3, "r");
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_21619EF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

double sub_21619EFA8@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  sub_21610B834(&__p, a2);
  uint64_t v6 = sub_216178FA4(v5, &__p);
  if (v11 < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v6) {
    operator new();
  }
  if (*((char *)v6 + 79) < 0)
  {
    sub_21610A674(&v8, v6[7], (unint64_t)v6[8]);
  }
  else
  {
    long long v8 = *(_OWORD *)(v6 + 7);
    char v9 = v6[9];
  }
  double result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  *(void *)(a3 + 16) = v9;
  return result;
}

void sub_21619F0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21619F0C0(uint64_t a1, char *a2, const char *a3)
{
  sub_216180AD8(a1);
  sub_21610B834(&v73, a2);
  uint64_t v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v73;
  *(void *)(a1 + 4sub_216195244(&a9, 0) = v74;
  if (!strcmp(a3, "r"))
  {
    *(_DWORD *)(a1 + 34sub_216195244(&a9, 0) = 0;
    int v14 = open(a2, 0);
    *(_DWORD *)(a1 + 336) = v14;
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    std::ios_base::clear((std::ios_base *)(a1 + 48 + *(void *)(*(void *)(a1 + 48) - 24)), 0);
    unsigned int v15 = sub_216129E78((void *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_216129E78(v15, (uint64_t)"(", 1);
    BOOL v16 = (void *)std::ostream::operator<<();
    uint64_t v17 = sub_216129E78(v16, (uint64_t)") [", 3);
    uint64_t v18 = "(fd = ::open(filename, flag | O_BINARY)) >= 0";
    uint64_t v19 = 45;
LABEL_22:
    uint64_t v36 = sub_216129E78(v17, (uint64_t)v18, v19);
    char v11 = sub_216129E78(v36, (uint64_t)"] ", 2);
    double v12 = "open failed: ";
    uint64_t v13 = 13;
    goto LABEL_23;
  }
  if (strcmp(a3, "r+"))
  {
    std::ios_base::clear((std::ios_base *)(a1 + 48 + *(void *)(*(void *)(a1 + 48) - 24)), 0);
    char v7 = sub_216129E78((void *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_216129E78(v7, (uint64_t)"(", 1);
    long long v8 = (void *)std::ostream::operator<<();
    char v9 = sub_216129E78(v8, (uint64_t)") [", 3);
    std::string v10 = sub_216129E78(v9, (uint64_t)"false", 5);
    char v11 = sub_216129E78(v10, (uint64_t)"] ", 2);
    double v12 = "unknown open mode: ";
    uint64_t v13 = 19;
LABEL_23:
    __int16 v37 = sub_216129E78(v11, (uint64_t)v12, v13);
    size_t v38 = strlen(a2);
    sub_216129E78(v37, (uint64_t)a2, v38);
    std::ios_base::clear((std::ios_base *)(a1 + 392 + *(void *)(*(void *)(a1 + 392) - 24)), 0);
    CFIndex v39 = sub_216129E78((void *)(a1 + 392), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
    sub_216129E78(v39, (uint64_t)"(", 1);
    int64_t v40 = (void *)std::ostream::operator<<();
    int64_t v41 = sub_216129E78(v40, (uint64_t)") [", 3);
    int v42 = sub_216129E78(v41, (uint64_t)"cmmap_.open(filename, mode)", 27);
    uint64_t v43 = sub_216129E78(v42, (uint64_t)"] ", 2);
    CFRange v44 = "cannot open: ";
    uint64_t v45 = 13;
LABEL_24:
    CFRange v46 = sub_216129E78(v43, (uint64_t)v44, v45);
    size_t v47 = strlen(a2);
    CFIndex v48 = v46;
    CFStringRef v49 = a2;
    goto LABEL_25;
  }
  *(_DWORD *)(a1 + 34sub_216195244(&a9, 0) = 514;
  int v14 = open(a2, 514, 384);
  *(_DWORD *)(a1 + 336) = v14;
  if (v14 < 0)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 48 + *(void *)(*(void *)(a1 + 48) - 24)), 0);
    unsigned int v34 = sub_216129E78((void *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_216129E78(v34, (uint64_t)"(", 1);
    uint64_t v35 = (void *)std::ostream::operator<<();
    uint64_t v17 = sub_216129E78(v35, (uint64_t)") [", 3);
    uint64_t v18 = "(fd = ::open(filename, flag | O_BINARY, S_IRUSR | S_IWUSR)) >= 0";
    uint64_t v19 = 64;
    goto LABEL_22;
  }
LABEL_9:
  if (fstat(v14, &v75) < 0)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 48 + *(void *)(*(void *)(a1 + 48) - 24)), 0);
    int v23 = sub_216129E78((void *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_216129E78(v23, (uint64_t)"(", 1);
    int v24 = (void *)std::ostream::operator<<();
    uint64_t v25 = sub_216129E78(v24, (uint64_t)") [", 3);
    CFIndex v26 = sub_216129E78(v25, (uint64_t)"::fstat(fd, &st) >= 0", 21);
    char v11 = sub_216129E78(v26, (uint64_t)"] ", 2);
    double v12 = "failed to get file size: ";
    uint64_t v13 = 25;
    goto LABEL_23;
  }
  off_t st_size = v75.st_size;
  *(void *)(a1 + 16) = v75.st_size;
  if (st_size)
  {
    uint64_t v21 = mmap(0, st_size, *(_DWORD *)(a1 + 340) & 2 | 1u, 1, *(_DWORD *)(a1 + 336), 0);
    if (v21 == (void *)-1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 48 + *(void *)(*(void *)(a1 + 48) - 24)), 0);
      uint64_t v58 = sub_216129E78((void *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
      sub_216129E78(v58, (uint64_t)"(", 1);
      CFIndex v59 = (void *)std::ostream::operator<<();
      uint64_t v60 = sub_216129E78(v59, (uint64_t)") [", 3);
      uint64_t v61 = sub_216129E78(v60, (uint64_t)"(p = reinterpret_cast<char *> (::mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 89);
      char v11 = sub_216129E78(v61, (uint64_t)"] ", 2);
      double v12 = "mmap() failed: ";
      uint64_t v13 = 15;
      goto LABEL_23;
    }
    uint64_t v22 = v21;
    madvise(v21, *(void *)(a1 + 16), 1);
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = v22;
  close(*(_DWORD *)(a1 + 336));
  *(_DWORD *)(a1 + 336) = -1;
  uint64_t v27 = *(void *)(a1 + 8);
  if (!v27)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 392 + *(void *)(*(void *)(a1 + 392) - 24)), 0);
    BOOL v50 = sub_216129E78((void *)(a1 + 392), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
    sub_216129E78(v50, (uint64_t)"(", 1);
    CFIndex v51 = (void *)std::ostream::operator<<();
    CFStringRef v52 = sub_216129E78(v51, (uint64_t)") [", 3);
    uint64_t v53 = sub_216129E78(v52, (uint64_t)"cmmap_.begin()", 14);
    CFIndex v48 = sub_216129E78(v53, (uint64_t)"] ", 2);
    CFStringRef v49 = "matrix is NULL";
    size_t v47 = 14;
    goto LABEL_25;
  }
  if (*(void *)(a1 + 16) <= 3uLL)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 392 + *(void *)(*(void *)(a1 + 392) - 24)), 0);
    uint64_t v54 = sub_216129E78((void *)(a1 + 392), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
    sub_216129E78(v54, (uint64_t)"(", 1);
    uint64_t v55 = (void *)std::ostream::operator<<();
    double v56 = sub_216129E78(v55, (uint64_t)") [", 3);
    CFArrayRef v57 = sub_216129E78(v56, (uint64_t)"cmmap_.size() >= 2", 18);
    uint64_t v43 = sub_216129E78(v57, (uint64_t)"] ", 2);
    CFRange v44 = "file size is invalid: ";
    uint64_t v45 = 22;
    goto LABEL_24;
  }
  uint64_t v28 = *(unsigned __int16 *)(v27 + 8);
  *(_WORD *)(a1 + 36++**(_DWORD **)(result + 8) = v28;
  int v29 = *(unsigned __int16 *)(v27 + 10);
  *(_WORD *)(a1 + 37sub_216195244(&a9, 0) = v29;
  if (!v28)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 392 + *(void *)(*(void *)(a1 + 392) - 24)), 0);
    int64_t v62 = sub_216129E78((void *)(a1 + 392), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
    sub_216129E78(v62, (uint64_t)"(", 1);
    int64_t v63 = (void *)std::ostream::operator<<();
    int64_t v64 = sub_216129E78(v63, (uint64_t)") [", 3);
    uint64_t v65 = "lsize_ > 0";
LABEL_32:
    unint64_t v68 = sub_216129E78(v64, (uint64_t)v65, 10);
    CFIndex v48 = sub_216129E78(v68, (uint64_t)"] ", 2);
    CFStringRef v49 = "left size is invalid";
    size_t v47 = 20;
    goto LABEL_25;
  }
  if (!v29)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 392 + *(void *)(*(void *)(a1 + 392) - 24)), 0);
    uint64_t v66 = sub_216129E78((void *)(a1 + 392), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
    sub_216129E78(v66, (uint64_t)"(", 1);
    double v67 = (void *)std::ostream::operator<<();
    int64_t v64 = sub_216129E78(v67, (uint64_t)") [", 3);
    uint64_t v65 = "rsize_ > 0";
    goto LABEL_32;
  }
  uint64_t v30 = *(unsigned int *)(v27 + 12);
  if (v30)
  {
    uint64_t v31 = v27 + 16;
    uint64_t v32 = v31 + 4 * v28 + 4;
    *(void *)(a1 + 344) = v31;
    *(void *)(a1 + 352) = v32;
    *(void *)(a1 + 36sub_216195244(&a9, 0) = v32 + 2 * v30;
    return 1;
  }
  std::ios_base::clear((std::ios_base *)(a1 + 392 + *(void *)(*(void *)(a1 + 392) - 24)), 0);
  unint64_t v69 = sub_216129E78((void *)(a1 + 392), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
  sub_216129E78(v69, (uint64_t)"(", 1);
  unint64_t v70 = (void *)std::ostream::operator<<();
  uint64_t v71 = sub_216129E78(v70, (uint64_t)") [", 3);
  uint64_t v72 = sub_216129E78(v71, (uint64_t)"num_elements > 0", 16);
  CFIndex v48 = sub_216129E78(v72, (uint64_t)"] ", 2);
  CFStringRef v49 = "number of elements is invalid";
  size_t v47 = 29;
LABEL_25:
  sub_216129E78(v48, (uint64_t)v49, v47);
  return 0;
}

void *sub_21619F878(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x2166CA430](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 52);
  return a1;
}

uint64_t sub_21619F944(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x2166CA750](a1 + 120);
  return a1;
}

void sub_21619FA48()
{
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
  uint64_t v0 = std::locale::use_facet(&v1, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v0->__vftable[2].~facet_0)(v0, 10);
  std::locale::~locale(&v1);
  std::ostream::put();
  std::ostream::flush();
  exit(-1);
}

void sub_21619FAF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_21619FB0C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5200;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_216195244(&a9, 0) = 0;
  sub_216128C80(a1 + 48);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 32sub_216195244(&a9, 0) = 0;
  *(void *)(a1 + 32++**(_DWORD **)(result + 8) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  return a1;
}

void sub_21619FB78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_21619FB94(uint64_t a1)
{
  sub_21619FBCC(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21619FBCC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5200;
  sub_216180AD8(a1);
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 48 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 56) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 160);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_21619FD1C(void *a1)
{
  sub_21619FD54(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_21619FD54(void *a1)
{
  *a1 = &unk_26C6C4D48;
  uint64_t v2 = a1[1];
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x2166CA800](v2, 0x1012C40EC159624);
  }
  return a1;
}

void sub_21619FDC4(uint64_t a1)
{
  *(void *)(a1 + 8++**(_DWORD **)(result + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 8++**(_DWORD **)(result + 8) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 8++**(_DWORD **)(result + 8) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 4sub_216195244(&a9, 0) = v4;
    *(void *)(a1 + 4++**(_DWORD **)(result + 8) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 4++**(_DWORD **)(result + 8) = v4;
      }
      if (v5) {
        *(void *)(a1 + 4++**(_DWORD **)(result + 8) = (char *)v4 + v5;
      }
    }
  }
}

void sub_21619FED8(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D158, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D158))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D160))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797B5C8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D160);
  }
  std::mutex::lock(&stru_26797B5C8);
  int v6 = (void *)qword_26797D150;
  unint64_t v7 = sub_216129260(qword_26797D150 + 24, (uint64_t)a1);
  int8x8_t v8 = (int8x8_t)v6[1];
  if (!*(void *)&v8) {
    goto LABEL_20;
  }
  unint64_t v9 = v7;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v12 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v12 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v8 - 1) & v7;
  }
  uint64_t v13 = *(unsigned __int8 ***)(*v6 + 8 * v12);
  if (!v13 || (int v14 = *v13) == 0)
  {
LABEL_20:
    uint64_t v17 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v18 = os_signpost_id_make_with_pointer(v17, a1);
    uint64_t v19 = sub_2162D1CE4(0xDu);
    if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v20 = v19;
      if (os_signpost_enabled(v19))
      {
        if (a1[23] >= 0) {
          uint64_t v21 = a1;
        }
        else {
          uint64_t v21 = *(char **)a1;
        }
        int buf = 136315138;
        *(void *)buf_4 = v21;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v18, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    operator new();
  }
  uint64_t v15 = (uint64_t)(v6 + 4);
  while (1)
  {
    unint64_t v16 = *((void *)v14 + 1);
    if (v16 == v9) {
      break;
    }
    if (v11 > 1)
    {
      if (v16 >= *(void *)&v8) {
        v16 %= *(void *)&v8;
      }
    }
    else
    {
      v16 &= *(void *)&v8 - 1;
    }
    if (v16 != v12) {
      goto LABEL_20;
    }
LABEL_19:
    int v14 = *(unsigned __int8 **)v14;
    if (!v14) {
      goto LABEL_20;
    }
  }
  if ((sub_21612970C(v15, v14 + 16, (unsigned __int8 *)a1) & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v14 + 6);
  if (!v22) {
    goto LABEL_20;
  }
  if (v22->__shared_owners_ == -1 || a3 != 0) {
    goto LABEL_20;
  }
  int v24 = std::__shared_weak_count::lock(v22);
  if (v24) {
    uint64_t v25 = *((void *)v14 + 5);
  }
  else {
    uint64_t v25 = 0;
  }
  std::mutex::unlock(&stru_26797B5C8);
  *a4 = v25;
  a4[1] = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_2161121B0(v24);
  }
}

void sub_2161A06A4(_Unwind_Exception *a1)
{
}

void sub_2161A0748()
{
}

void sub_2161A07E0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40B09A9449);
  _Unwind_Resume(a1);
}

void sub_2161A0808(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161A0840(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2161A0870(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC160)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2161A08B4(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 208))(v6);
      if (result)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (!v7) {
          sub_21610B7AC();
        }
        int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
        if (v8 == 2 || v8 == 4)
        {
          uint8x8_t v10 = &off_26426BAC8;
        }
        else
        {
          if (v8 != 5) {
            return 1;
          }
          uint8x8_t v10 = &off_26426BAD0;
        }
        CFDictionaryAddValue(a2, *v10, (const void *)*MEMORY[0x263EFFB40]);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_2161A09E4(uint64_t a1)
{
  return a1;
}

void sub_2161A0A10(uint64_t a1)
{
  sub_2161A0A5C((void *)(a1 + 8));

  JUMPOUT(0x2166CA800);
}

void *sub_2161A0A5C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_2161A0AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_2161A0B78(const void *a1, uint64_t a2, unsigned int a3)
{
  char v34 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v30[1] = 0;
  uint64_t v31 = &v32;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x4002000000;
  uint64_t v27 = sub_2161A0EB0;
  int v29 = v30;
  v30[0] = 0;
  uint64_t v28 = sub_2161A0EEC;
  uint64_t v6 = (uint64_t *)operator new(0x30uLL);
  uint64_t v7 = v6;
  v35[0] = v6;
  v35[1] = &v32;
  char v36 = 0;
  if (!a1)
  {
    uint64_t v6[4] = 0;
    void v6[5] = 0;
    char v36 = 1;
LABEL_12:
    int v23 = &v32;
    unint64_t v12 = &v32;
    goto LABEL_13;
  }
  CFTypeRef v8 = CFRetain(a1);
  uint64_t v9 = v35[0];
  uint8x8_t v10 = v32;
  void v7[4] = (uint64_t)v8;
  void v7[5] = 0;
  char v36 = 1;
  if (!v10)
  {
    uint64_t v7 = (uint64_t *)v9;
    goto LABEL_12;
  }
  double v11 = *(double *)(v9 + 40);
  do
  {
    while (1)
    {
      unint64_t v12 = (uint64_t **)v10;
      double v13 = *((double *)v10 + 5);
      if (v11 >= v13) {
        break;
      }
      if (v13 < v11) {
        goto LABEL_16;
      }
      uint8x8_t v10 = (uint64_t *)v10[1];
      if (!v10)
      {
        int v23 = v12 + 1;
        uint64_t v7 = (uint64_t *)v9;
        goto LABEL_13;
      }
    }
    uint8x8_t v10 = (uint64_t *)*v10;
  }
  while (*v12);
  uint64_t v7 = (uint64_t *)v9;
  int v23 = v12;
LABEL_13:
  uint64_t *v7 = 0;
  v7[1] = 0;
  void v7[2] = (uint64_t)v12;
  void *v23 = v7;
  if (*v31)
  {
    uint64_t v31 = (uint64_t **)*v31;
    uint64_t v7 = *v23;
  }
  sub_21612A6F4(v32, v7);
  ++v33;
  v35[0] = 0;
LABEL_16:
  sub_2161A10C4((uint64_t)v35);
  if (v33)
  {
    unsigned __int16 v14 = 0;
    while (1)
    {
      uint64_t v15 = v31;
      if (v31 != &v32) {
        break;
      }
LABEL_28:
      uint64_t v19 = v25;
      sub_2161A1034((const void **)v32);
      int v20 = v19 + 6;
      uint64_t v21 = (uint64_t *)v19[6];
      uint64_t v31 = (uint64_t **)v19[5];
      uint64_t v32 = v21;
      uint64_t v33 = v19[7];
      if (v33)
      {
        v21[2] = (uint64_t)&v32;
        v19[5] = (uint64_t)v20;
        *int v20 = 0;
        v19[7] = 0;
      }
      else
      {
        uint64_t v31 = &v32;
      }
      uint64_t v22 = v25 + 6;
      sub_2161A1034((const void **)v25[6]);
      *(v22 - 1) = v22;
      *uint64_t v22 = 0;
      v22[1] = 0;
      ++v14;
      if (!v33) {
        goto LABEL_32;
      }
    }
    while (1)
    {
      (*(void (**)(uint64_t, uint64_t *, void, char *, double))(a2 + 16))(a2, v15[4], v14, &v34, *((double *)v15 + 5));
      if (v34) {
        break;
      }
      if (a3 > v14) {
        LXCursorEnumerateChildren();
      }
      unint64_t v16 = v15[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = (uint64_t **)v16;
          unint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t **)v15[2];
          BOOL v18 = *v17 == (uint64_t *)v15;
          uint64_t v15 = v17;
        }
        while (!v18);
      }
      uint64_t v15 = v17;
      if (v17 == &v32) {
        goto LABEL_28;
      }
    }
  }
LABEL_32:
  _Block_object_dispose(&v24, 8);
  sub_2161A1034(v30[0]);
  sub_2161A1034((const void **)v32);
}

void sub_2161A0E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,const void **a23,uint64_t a24,uint64_t a25,const void **a26)
{
  sub_2161A10C4(v26 - 144);
  _Block_object_dispose(&a17, 8);
  sub_2161A1034(a23);
  sub_2161A1034(a26);
  _Unwind_Resume(a1);
}

void *sub_2161A0EB0(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_2161A0EEC(uint64_t a1)
{
}

uint64_t sub_2161A0EF4(uint64_t a1, const void *a2)
{
  double v4 = *(double *)(a1 + 40);
  uint64_t result = LXCursorConditionalProbability();
  double v7 = v4 + v6;
  if (v7 >= *(double *)(a1 + 48))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v9 = (double **)(v8 + 48);
    uint8x8_t v10 = (double *)operator new(0x30uLL);
    v18[0] = v10;
    v18[1] = v8 + 48;
    char v19 = 0;
    if (a2)
    {
      CFTypeRef v11 = CFRetain(a2);
      unint64_t v12 = (double *)v18[0];
    }
    else
    {
      CFTypeRef v11 = 0;
      unint64_t v12 = v10;
    }
    *((void *)v10 + 4) = v11;
    v10[5] = v7;
    char v19 = 1;
    double v13 = *v9;
    unsigned __int16 v14 = (double **)(v8 + 48);
    if (*v9)
    {
      double v15 = v12[5];
      do
      {
        while (1)
        {
          unsigned __int16 v14 = (double **)v13;
          double v16 = v13[5];
          if (v15 < v16) {
            break;
          }
          double v13 = *(double **)v13;
          uint64_t v9 = v14;
          if (!*v14) {
            goto LABEL_12;
          }
        }
        if (v16 < v15) {
          return sub_2161A10C4((uint64_t)v18);
        }
        double v13 = (double *)*((void *)v13 + 1);
      }
      while (v13);
      uint64_t v9 = v14 + 1;
    }
LABEL_12:
    *unint64_t v12 = 0.0;
    v12[1] = 0.0;
    *((void *)v12 + 2) = v14;
    *uint64_t v9 = v12;
    uint64_t v17 = **(void **)(v8 + 40);
    if (v17)
    {
      *(void *)(v8 + 4sub_216195244(&a9, 0) = v17;
      unint64_t v12 = *v9;
    }
    sub_21612A6F4(*(uint64_t **)(v8 + 48), (uint64_t *)v12);
    ++*(void *)(v8 + 56);
    v18[0] = 0;
    return sub_2161A10C4((uint64_t)v18);
  }
  return result;
}

void sub_2161A1020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161A10C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2161A1034(const void **a1)
{
  if (a1)
  {
    sub_2161A1034(*a1);
    sub_2161A1034(a1[1]);
    sub_2161A108C(a1 + 4, 0);
    operator delete(a1);
  }
}

void sub_2161A108C(const void **a1, const void *a2)
{
  double v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_2161A10C4(uint64_t a1)
{
  uint64_t v2 = *(const void ***)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2161A108C(v2 + 4, 0);
    }
    operator delete(v2);
  }
  return a1;
}

CFNumberRef sub_2161A1110(const __CFDictionary *a1, const void *a2, void *a3)
{
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberRef v5 = result;
    CFTypeID v6 = CFGetTypeID(result);
    CFNumberRef result = (const __CFNumber *)CFNumberGetTypeID();
    if ((const __CFNumber *)v6 == result)
    {
      return (const __CFNumber *)CFNumberGetValue(v5, kCFNumberFloatType, a3);
    }
  }
  return result;
}

uint64_t sub_2161A1184(unsigned int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D168))
  {
    uint64_t v3 = sub_2161E2A24(a1);
    sub_21610B834(&v8, v3);
    double v4 = std::string::append(&v8, "CPSearchParameters", 0x12uLL);
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v4->__r_.__value_.__r.__words[2];
    long long v9 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 0x40000000;
    uint64_t v6[2] = sub_2161A1B64;
    v6[3] = &unk_264266C50;
    unsigned int v7 = a1;
    sub_2161A1300((char *)&v9, (uint64_t)v6);
    if (SHIBYTE(v10) < 0) {
      operator delete((void *)v9);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    __cxa_atexit((void (*)(void *))sub_2161A1CE8, &qword_26797D188, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D168);
  }
  return qword_26797D188;
}

void sub_2161A12B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26797D168);
  _Unwind_Resume(a1);
}

void sub_2161A1300(char *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D178, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D178))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D180, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D180))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797B608, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D180);
  }
  std::mutex::lock(&stru_26797B608);
  double v4 = (void *)qword_26797D170;
  unint64_t v5 = sub_216129260(qword_26797D170 + 24, (uint64_t)a1);
  int8x8_t v6 = (int8x8_t)v4[1];
  if (!*(void *)&v6) {
    goto LABEL_20;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v10 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v5;
  }
  CFTypeRef v11 = *(unsigned __int8 ***)(*v4 + 8 * v10);
  if (!v11 || (unint64_t v12 = *v11) == 0)
  {
LABEL_20:
    double v15 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v16 = os_signpost_id_make_with_pointer(v15, a1);
    uint64_t v17 = sub_2162D1CE4(0xDu);
    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      BOOL v18 = v17;
      if (os_signpost_enabled(v17))
      {
        if (a1[23] >= 0) {
          uint64_t v19 = a1;
        }
        else {
          uint64_t v19 = *(char **)a1;
        }
        int buf = 136315138;
        *(void *)buf_4 = v19;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v16, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    operator new();
  }
  uint64_t v13 = (uint64_t)(v4 + 4);
  while (1)
  {
    unint64_t v14 = *((void *)v12 + 1);
    if (v14 == v7) {
      break;
    }
    if (v9 > 1)
    {
      if (v14 >= *(void *)&v6) {
        v14 %= *(void *)&v6;
      }
    }
    else
    {
      v14 &= *(void *)&v6 - 1;
    }
    if (v14 != v10) {
      goto LABEL_20;
    }
LABEL_19:
    unint64_t v12 = *(unsigned __int8 **)v12;
    if (!v12) {
      goto LABEL_20;
    }
  }
  if ((sub_21612970C(v13, v12 + 16, (unsigned __int8 *)a1) & 1) == 0) {
    goto LABEL_19;
  }
  int v20 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (!v20 || v20->__shared_owners_ == -1) {
    goto LABEL_20;
  }
  uint64_t v21 = std::__shared_weak_count::lock(v20);
  if (v21) {
    uint64_t v22 = *((void *)v12 + 5);
  }
  else {
    uint64_t v22 = 0;
  }
  std::mutex::unlock(&stru_26797B608);
  qword_26797D188 = v22;
  unk_26797D190 = v21;
  if (v21)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_2161121B0(v21);
  }
}

void sub_2161A1AD0(_Unwind_Exception *a1)
{
}

void sub_2161A1B64()
{
}

void sub_2161A1CD0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161A1CE8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_2161121B0(v2);
  }
  return a1;
}

void sub_2161A1D1C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161A1D54(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2161A1D74(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC088)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2161A1DB8(UTF32Char theChar)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EED0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EED0))
  {
    qword_26797EEC8 = CEMCreateEmojiCharacterSet();
    __cxa_guard_release(&qword_26797EED0);
  }
  uint64_t result = qword_26797EEC8;
  if (qword_26797EEC8) {
    return CFCharacterSetIsLongCharacterMember((CFCharacterSetRef)qword_26797EEC8, theChar) != 0;
  }
  return result;
}

void sub_2161A1E2C(_Unwind_Exception *a1)
{
}

BOOL sub_2161A1E44(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  if (!Length) {
    return 0;
  }
  CFIndex v3 = Length;
  CFIndex v4 = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  do
  {
    BOOL v6 = v4 >= v3;
    if (v4 >= v3) {
      break;
    }
    CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(a1, v4);
    v4 += RangeOfComposedCharactersAtIndex.length;
    if (v4 > v3) {
      break;
    }
    CFStringRef v8 = CFStringCreateWithSubstring(v5, a1, RangeOfComposedCharactersAtIndex);
    IsSingleEmojunint64_t i = CEMStringIsSingleEmoji();
    if (v8) {
      CFRelease(v8);
    }
  }
  while (IsSingleEmoji);
  return v6;
}

void sub_2161A1F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFIndex sub_2161A1F24(CFStringRef theString)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EEE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EEE0))
  {
    qword_26797EED8 = (uint64_t)sub_2161A1FE4();
    __cxa_guard_release(&qword_26797EEE0);
  }
  if (!theString) {
    return 0;
  }
  CFIndex result = CFStringGetLength(theString);
  if (result)
  {
    CFCharacterSetRef v3 = (const __CFCharacterSet *)qword_26797EED8;
    v4.length = CFStringGetLength(theString);
    v4.location = 0;
    return CFStringFindCharacterFromSet(theString, v3, v4, 2uLL, 0) == 0;
  }
  return result;
}

void sub_2161A1FCC(_Unwind_Exception *a1)
{
}

__CFCharacterSet *sub_2161A1FE4()
{
  CFMutableArrayRef Mutable = CFCharacterSetCreateMutable(0);
  v3.location = 97;
  v3.length = 26;
  CFCharacterSetAddCharactersInRange(Mutable, v3);
  v4.location = 65;
  v4.length = 26;
  CFCharacterSetAddCharactersInRange(Mutable, v4);
  CFCharacterSetAddCharactersInString(Mutable, @"'-");
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  CFCharacterSetUnion(Mutable, Predefined);
  CFCharacterSetInvert(Mutable);
  return Mutable;
}

void sub_2161A2058(CFStringRef theString@<X1>, const __CFString *a2@<X0>, std::string *a3@<X8>)
{
  CFIndex Length = CFStringGetLength(theString);
  CFIndex v7 = CFStringGetLength(a2);
  CFStringRef theStringa = theString;
  uint64_t v113 = 0;
  CFIndex v114 = Length;
  CharactersPtr = CFStringGetCharactersPtr(theString);
  CStringPtr = 0;
  v111 = (UniChar *)CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  }
  int64_t v115 = 0;
  int64_t v116 = 0;
  uint64_t v112 = CStringPtr;
  CFStringRef v102 = a2;
  uint64_t v105 = 0;
  CFIndex v106 = v7;
  unint64_t v10 = CFStringGetCharactersPtr(a2);
  CFTypeRef v11 = 0;
  __n128 v103 = (UniChar *)v10;
  if (!v10) {
    CFTypeRef v11 = CFStringGetCStringPtr(a2, 0x600u);
  }
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  __n128 v104 = v11;
  sub_2161A28DC(__p, v7 + 1 + (v7 + 1) * Length);
  unint64_t v12 = (char *)__p[0];
  *(void *)__p[0] = 0;
  uint64_t v13 = 8 * v7;
  if (Length >= 1)
  {
    unint64_t v14 = (uint64_t *)&v12[v13 + 8];
    uint64_t v15 = 2;
    CFIndex v16 = Length;
    do
    {
      *unint64_t v14 = v15;
      unint64_t v14 = (uint64_t *)((char *)v14 + v13 + 8);
      v15 += 2;
      --v16;
    }
    while (v16);
  }
  if (v7 >= 1)
  {
    uint64_t v17 = (uint64_t *)(v12 + 8);
    uint64_t v18 = 2;
    CFIndex v19 = v7;
    do
    {
      *v17++ = v18;
      v18 += 2;
      --v19;
    }
    while (v19);
  }
  if (Length < 1)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_114;
  }
  CFIndex v91 = Length - 1;
  CFIndex v92 = v7 + 1;
  uint64_t v93 = a3;
  uint64_t v94 = v13 + 8;
  int64_t v20 = 1;
  uint64_t v98 = 8;
  uint64_t v21 = v7;
  CFIndex v95 = Length;
  do
  {
    if (v7 >= 1)
    {
      uint64_t v22 = 0;
      int64_t v23 = v20 - 1;
      int64_t v24 = v20 - 5;
      if ((unint64_t)v20 < 5) {
        int64_t v24 = 0;
      }
      int64_t v97 = v24;
      CFIndex v96 = v24 + 64;
      uint64_t v25 = -1;
      uint64_t v26 = v98;
      uint64_t v27 = 65;
      unint64_t v28 = 1;
      do
      {
        if (v28 >= 5) {
          uint64_t v29 = 5;
        }
        else {
          uint64_t v29 = v28;
        }
        CFIndex v30 = v114;
        if (v114 >= v20)
        {
          uint64_t v32 = v111;
          if (v111)
          {
            int64_t v33 = v113 + v23;
          }
          else
          {
            if (v112)
            {
              UniChar v31 = v112[v113 + v23];
              goto LABEL_27;
            }
            int64_t v37 = v115;
            if (v116 < v20 || v115 >= v20)
            {
              if (v96 < v114) {
                CFIndex v30 = v96;
              }
              int64_t v115 = v97;
              int64_t v116 = v30;
              v117.location = v113 + v97;
              v117.length = v30 - v97;
              CFStringGetCharacters(theStringa, v117, buffer);
              int64_t v37 = v115;
              int64_t v23 = v20 - 1;
            }
            int64_t v33 = v23 - v37;
            uint64_t v32 = buffer;
          }
          UniChar v31 = v32[v33];
        }
        else
        {
          UniChar v31 = 0;
        }
LABEL_27:
        uint64_t v34 = v22 + 1;
        uint64_t v35 = v106;
        if (v106 >= v22 + 1)
        {
          if (v103)
          {
            UniChar v36 = v103[v22 + v105];
          }
          else if (v104)
          {
            UniChar v36 = v104[v105 + v22];
          }
          else
          {
            if (v108 < v34 || (uint64_t v39 = v107, v107 >= v34))
            {
              uint64_t v40 = v22 - v29 + 65;
              if (v40 >= v106) {
                uint64_t v40 = v106;
              }
              uint64_t v107 = v22 - v29 + 1;
              uint64_t v108 = v40;
              if (v106 >= v27 - v29) {
                uint64_t v35 = v27 - v29;
              }
              v118.length = v35 + v29 + v25;
              v118.location = v22 - v29 + 1 + v105;
              CFStringGetCharacters(v102, v118, v101);
              uint64_t v39 = v107;
              int64_t v23 = v20 - 1;
            }
            UniChar v36 = v101[v22 - v39];
          }
        }
        else
        {
          UniChar v36 = 0;
        }
        int64_t v41 = (char *)__p[0] + 8 * v22 + v13;
        if (v31 == v36) {
          uint64_t v42 = *(void *)((char *)__p[0] + v26 - 8);
        }
        else {
          uint64_t v42 = *(void *)((char *)__p[0] + v26 - 8) + 1;
        }
        if (*(void *)((char *)__p[0] + v26) + 2 >= *((void *)v41 + 1) + 2) {
          uint64_t v43 = *((void *)v41 + 1) + 2;
        }
        else {
          uint64_t v43 = *(void *)((char *)__p[0] + v26) + 2;
        }
        if (v42 >= v43) {
          uint64_t v42 = v43;
        }
        *((void *)v41 + 2) = v42;
        ++v28;
        ++v22;
        --v25;
        ++v27;
        v26 += 8;
        CFIndex v7 = v21;
      }
      while (v21 != v22);
    }
    int64_t v44 = v95;
    v98 += v94;
    v13 += v94;
  }
  while (v20++ != v95);
  v93->__r_.__value_.__r.__words[0] = 0;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  if (v7 >= 1)
  {
    uint64_t v46 = 0;
    CFIndex v47 = -v95;
    CFIndex v48 = v95 + 64;
    CFIndex v49 = ~v7;
    while (1)
    {
      if ((unint64_t)v44 >= 5) {
        uint64_t v50 = 5;
      }
      else {
        uint64_t v50 = v44;
      }
      CFIndex v51 = v114;
      if (v114 >= v44)
      {
        if (v111)
        {
          unint64_t v52 = v44;
          UniChar v53 = v111[v44 - 1 + v113];
        }
        else if (v112)
        {
          unint64_t v52 = v44;
          LOBYTE(v53) = v112[v113 - 1 + v44];
        }
        else
        {
          int64_t v54 = v115;
          if (v116 < v44 || v115 >= v44)
          {
            uint64_t v56 = v50 + v47;
            CFIndex v57 = v48 - v50;
            int64_t v58 = v44 - v50;
            CFIndex v59 = v58 + 64;
            if (v58 + 64 >= v114) {
              CFIndex v59 = v114;
            }
            int64_t v115 = v58;
            int64_t v116 = v59;
            if (v114 >= v57) {
              CFIndex v51 = v57;
            }
            v119.length = v51 + v56;
            v119.location = v58 + v113;
            CFStringGetCharacters(theStringa, v119, buffer);
            int64_t v54 = v115;
          }
          unint64_t v52 = v44;
          UniChar v53 = buffer[v44 - 1 - v54];
        }
      }
      else
      {
        unint64_t v52 = v44;
        LOBYTE(v53) = 0;
      }
      uint64_t v60 = v21 - 1;
      CFIndex v61 = v106;
      if (v106 >= v21)
      {
        int64_t v63 = v103;
        if (v103)
        {
          uint64_t v64 = v105 + v60;
        }
        else
        {
          if (v104)
          {
            LOBYTE(v62) = v104[v105 + v60];
            goto LABEL_88;
          }
          if (v108 < v21 || (uint64_t v69 = v107, v107 >= v21))
          {
            uint64_t v70 = v21 - 5;
            if ((unint64_t)v21 < 5) {
              uint64_t v70 = 0;
            }
            if (v70 + 64 < v106) {
              CFIndex v61 = v70 + 64;
            }
            uint64_t v107 = v70;
            uint64_t v108 = v61;
            v120.location = v105 + v70;
            v120.length = v61 - v70;
            CFStringGetCharacters(v102, v120, v101);
            uint64_t v69 = v107;
          }
          uint64_t v64 = v60 - v69;
          int64_t v63 = v101;
        }
        UniChar v62 = v63[v64];
      }
      else
      {
        LOBYTE(v62) = 0;
      }
LABEL_88:
      uint64_t v65 = *((void *)__p[0] + v95 * v92 + v21 + v46);
      CFIndex v66 = v91 * v92 + v21 + v46;
      uint64_t v67 = *((void *)__p[0] + v66 - 1);
      if ((char)v53 != (char)v62) {
        ++v67;
      }
      if (v65 == v67 || v65 != *((void *)__p[0] + v66) + 2)
      {
        std::string::push_back(v93, v62);
        --v21;
      }
      else
      {
        std::string::push_back(v93, 45);
      }
      uint64_t v68 = v52 - 1;
      if (v52 >= 2)
      {
        ++v47;
        --v48;
        v46 += v49;
        int64_t v44 = v52 - 1;
        if (v21) {
          continue;
        }
      }
      goto LABEL_107;
    }
  }
  uint64_t v68 = v95;
LABEL_107:
  if (v68 < 1)
  {
    CFIndex Length = v68;
    a3 = v93;
    CFIndex v7 = v21;
    goto LABEL_114;
  }
  CFIndex v7 = v21;
  a3 = v93;
  if (v21 > 0)
  {
    CFIndex Length = v68;
LABEL_114:
    if (Length > 0) {
      goto LABEL_115;
    }
    goto LABEL_132;
  }
  unint64_t v71 = v68 + 1;
  do
  {
    std::string::push_back(v93, 45);
    --v71;
  }
  while (v71 > 1);
LABEL_132:
  CFIndex v81 = -v7;
  for (CFIndex i = v7 + 64; ; --i)
  {
    uint64_t v83 = (unint64_t)v7 >= 5 ? 5 : v7;
    if (v7 < 1) {
      break;
    }
    CFIndex v84 = v106;
    if (v106 >= v7)
    {
      if (v103)
      {
        UniChar v85 = v103[v7 - 1 + v105];
      }
      else if (v104)
      {
        LOBYTE(v85) = v104[v105 - 1 + v7];
      }
      else
      {
        if (v108 < v7 || (uint64_t v86 = v107, v107 >= v7))
        {
          uint64_t v87 = v83 + v81;
          CFIndex v88 = i - v83;
          uint64_t v89 = v7 - v83;
          CFIndex v90 = v89 + 64;
          if (v89 + 64 >= v106) {
            CFIndex v90 = v106;
          }
          uint64_t v107 = v89;
          uint64_t v108 = v90;
          if (v106 >= v88) {
            CFIndex v84 = v88;
          }
          v121.length = v84 + v87;
          v121.location = v89 + v105;
          CFStringGetCharacters(v102, v121, v101);
          uint64_t v86 = v107;
        }
        UniChar v85 = v101[v7 - 1 - v86];
      }
    }
    else
    {
      LOBYTE(v85) = 0;
    }
    ++v81;
    std::string::push_back(a3, v85);
    --v7;
  }
LABEL_115:
  int v72 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  BOOL v73 = v72 < 0;
  if (v72 >= 0) {
    unint64_t v74 = (unint64_t)a3;
  }
  else {
    unint64_t v74 = a3->__r_.__value_.__r.__words[0];
  }
  if (v73) {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  unint64_t v76 = (unsigned char *)(v74 + size - 1);
  if (size) {
    BOOL v77 = (unint64_t)v76 > v74;
  }
  else {
    BOOL v77 = 0;
  }
  if (v77)
  {
    unint64_t v78 = v74 + 1;
    do
    {
      char v79 = *(unsigned char *)(v78 - 1);
      *(unsigned char *)(v78 - 1) = *v76;
      *v76-- = v79;
    }
    while (v78++ < (unint64_t)v76);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2161A27B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (*(char *)(a12 + 23) < 0) {
    operator delete(*(void **)a12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_2161A2800(CFStringRef result, CFIndex a2)
{
  if (result)
  {
    CFStringRef v3 = result;
    CFCharacterSetRef v4 = (const __CFCharacterSet *)sub_2161E490C();
    long long v9 = xmmword_216371B70;
    v10.length = CFStringGetLength(v3);
    v10.location = 0;
    LODWORD(v4) = CFStringFindCharacterFromSet(v3, v4, v10, 4uLL, (CFRange *)&v9);
    CFIndex Length = CFStringGetLength(v3);
    if (v4) {
      CFIndex v6 = *((void *)&v9 + 1) + v9;
    }
    else {
      CFIndex v6 = 0;
    }
    uint64_t v7 = Length - v6 - a2;
    v8.location = (v7 & ~(v7 >> 63)) + v6;
    if (v8.location < 1)
    {
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v3);
    }
    else
    {
      if (v7 <= 0) {
        v8.length = Length - v6;
      }
      else {
        v8.length = a2;
      }
      return CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], v3, v8);
    }
  }
  return result;
}

void *sub_2161A28DC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112B2C(a1, a2);
    CFCharacterSetRef v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2161A2938(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161A2954(uint64_t a1, const __CFURL *a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_26C6BFAC8;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = sub_2161A2A80();
  sub_2161055D0((void *)(a1 + 32));
  sub_2161C04AC(0);
  *(void *)(a1 + 4sub_216195244(&a9, 0) = &qword_26797EF20;
  CFIndex v6 = (char *)sub_2161E0A88(a2);
  uint64_t v7 = v6;
  v10[1] = v6;
  if (v6)
  {
    sub_2161E198C((const __CFURL *)v6, @"heteronyms.dat", v10);
    CFRange v8 = v10[0];
    if (v10[0])
    {
      sub_2161056F0((void **)(a1 + 32), v10[0]);
      MEMORY[0x2166CA7C0](v8, 0x1000C8077774924);
    }
    CFRelease(v7);
  }
  return a1;
}

void sub_2161A2A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  sub_21617DB94((const void **)va, 0);
  sub_2161055D8(v2);
  _Unwind_Resume(a1);
}

void *sub_2161A2A80()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797B8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797B8C8))
  {
    sub_21627E4BC((uint64_t)&unk_26797B648);
    __cxa_atexit((void (*)(void *))sub_2161A6420, &unk_26797B648, &dword_2160F5000);
    __cxa_guard_release(&qword_26797B8C8);
  }
  return &unk_26797B648;
}

void *sub_2161A2B04(void *a1)
{
  *a1 = &unk_26C6BFAC8;
  sub_2161055D8(a1 + 4);
  return a1;
}

void sub_2161A2B48(void *a1)
{
  *a1 = &unk_26C6BFAC8;
  sub_2161055D8(a1 + 4);

  JUMPOUT(0x2166CA800);
}

double sub_2161A2BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  CFTypeRef v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  long long __p = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  sub_2162EF6F4(a2, a3, &v14, &v11, &__p, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 408))(a3);
  double v6 = (*(double (**)(uint64_t, void **, void **, void **, uint64_t))(*(void *)a1 + 24))(a1, &v14, &v11, &__p, v5);
  if (__p)
  {
    long long v9 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    unint64_t v12 = v11;
    operator delete(v11);
  }
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
  return v6;
}

void sub_2161A2CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_2161A2CF0()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  CFCharacterSetRef v4 = v3;
  double v6 = v5;
  CFRange v8 = v7;
  uint64_t v9 = v0;
  v370[9] = *MEMORY[0x263EF8340];
  uint64_t v10 = (double *)sub_2161A2A80();
  uint64_t v11 = v4[1];
  uint64_t v12 = v11 - *v4;
  if (v11 == *v4) {
    return 0.0;
  }
  uint64_t v219 = 0;
  uint64_t v220 = v11 - *v4;
  uint64_t v13 = v12 / 40;
  uint64_t v218 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = *v6;
  uint64_t v16 = *v8;
  uint64_t v228 = v12 / 40 - 1;
  if ((unint64_t)(v12 / 40) <= 1) {
    uint64_t v13 = 1;
  }
  uint64_t v225 = v13;
  double v17 = 0.0;
  v216 = v10 + 27;
  v217 = v10 + 25;
  uint64_t v232 = v9;
  v222 = v10 + 26;
  v223 = (uint64_t *)(v9 + 32);
  v233 = v10;
  unsigned int v221 = v2;
  v224 = v4;
  do
  {
    uint64_t v18 = *v4 + 40 * v14;
    uint64_t v19 = *(unsigned __int16 *)(v18 + 24);
    if (v16) {
      unint64_t v20 = *(unsigned __int16 *)(v18 + 24);
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t v21 = *(unsigned __int16 *)(v18 + 28);
    if (v15) {
      unint64_t v22 = *(unsigned __int16 *)(v18 + 28);
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v236 = v22;
    if (v14 == v228)
    {
      uint64_t v235 = 0;
      uint64_t v229 = 0;
      unsigned int v226 = 0;
    }
    else
    {
      int64_t v23 = (unsigned __int16 *)(*v4 + 40 * v14);
      uint64_t v24 = v23[32];
      if (!v16) {
        uint64_t v24 = 0;
      }
      uint64_t v235 = v24;
      uint64_t v25 = v23[34];
      if (!v15) {
        uint64_t v25 = 0;
      }
      uint64_t v229 = v25;
      unsigned int v226 = v23[35];
    }
    v237 = &v16[v19];
    v227 = &v15[v21];
    CFStringRef cf = CFStringCreateWithCharacters(0, v16, v20);
    uint64_t v234 = v14;
    if (*(_DWORD *)(*v4 + 40 * v14) == 5)
    {
      BOOL v26 = 0;
      unint64_t v27 = v236;
      if (v16)
      {
        unint64_t v28 = v235;
        if (v20)
        {
          if (*v16 - 48 > 9)
          {
            BOOL v231 = 0;
            goto LABEL_38;
          }
          uint64_t v29 = 1;
          while (v20 != v29)
          {
            unsigned int v30 = v16[v29++] - 48;
            if (v30 >= 0xA)
            {
              unint64_t v31 = v29 - 1;
              goto LABEL_36;
            }
          }
          unint64_t v31 = v20;
LABEL_36:
          BOOL v26 = v31 >= v20;
        }
      }
      else
      {
        unint64_t v28 = v235;
      }
      BOOL v231 = v26;
      if (!v20)
      {
        BOOL v33 = 0;
        goto LABEL_46;
      }
LABEL_38:
      uint64_t v34 = 2 * v20 - 2;
      uint64_t v35 = v16;
      do
      {
        __int16 v36 = *v35++;
        unsigned int v37 = (unsigned __int16)(v36 + 240);
        BOOL v33 = v37 < 0xA;
        BOOL v38 = v37 > 9 || v34 == 0;
        v34 -= 2;
      }
      while (!v38);
LABEL_46:
      if (v14 == v228) {
        goto LABEL_238;
      }
      goto LABEL_47;
    }
    unint64_t v27 = v236;
    if (v20 != 1 || (v32 = *v16, unint64_t v28 = v235, v32 != 49) && v32 != 65297 && v32 != 19968)
    {
      BOOL v33 = 0;
      BOOL v231 = 0;
      goto LABEL_238;
    }
    BOOL v33 = 0;
    BOOL v231 = 0;
    if (v14 == v228)
    {
      BOOL v231 = 0;
      goto LABEL_238;
    }
LABEL_47:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D198, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D198))
    {
      sub_216184F68(__p, (char *)L"時");
      WORD4(v247) = 27;
      sub_216184F68(&__len, (char *)L"次");
      WORD4(v249) = 11;
      sub_216184F68(&v250, byte_2163CA6A0);
      WORD4(v251) = 25;
      sub_216184F68(&v252, (char *)L"大");
      WORD4(v253) = 100;
      sub_216184F68(&v254, byte_2163CA6A6);
      WORD4(v255) = 10;
      sub_216184F68(&v256, byte_2163CA6AA);
      WORD4(v257) = 100;
      sub_2161A6450((uint64_t)__p, 6);
      for (uint64_t i = 0; i != -192; i -= 32)
      {
        if (*((char *)&v257 + i + 7) < 0) {
          operator delete(*(void **)((char *)&v256 + i));
        }
      }
      __cxa_atexit((void (*)(void *))sub_2161A644C, &xmmword_26797D2C0, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D198);
      uint64_t v2 = v221;
      CFCharacterSetRef v4 = v224;
      unint64_t v28 = v235;
    }
    sub_21617FAAC(__p, v237, v28);
    unint64_t v39 = sub_2161A6920((uint64_t)&qword_26797D2D8, (uint64_t)__p);
    unint64_t v40 = *((void *)&xmmword_26797D2C0 + 1);
    if (!*((void *)&xmmword_26797D2C0 + 1))
    {
      BOOL v45 = 0;
LABEL_68:
      uint64_t v14 = v234;
LABEL_69:
      uint64_t v49 = v235;
      goto LABEL_70;
    }
    unint64_t v41 = v39;
    uint8x8_t v42 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D2C0 + 8));
    v42.i16[0] = vaddlv_u8(v42);
    unint64_t v43 = v42.u32[0];
    if (v42.u32[0] > 1uLL)
    {
      unint64_t v44 = v39;
      if (v39 >= *((void *)&xmmword_26797D2C0 + 1)) {
        unint64_t v44 = v39 % *((void *)&xmmword_26797D2C0 + 1);
      }
    }
    else
    {
      unint64_t v44 = (*((void *)&xmmword_26797D2C0 + 1) - 1) & v39;
    }
    uint64_t v46 = *(unsigned __int16 ***)(xmmword_26797D2C0 + 8 * v44);
    if (!v46)
    {
      BOOL v45 = 0;
      goto LABEL_67;
    }
    CFIndex v47 = *v46;
    if (!*v46)
    {
LABEL_65:
      BOOL v45 = 0;
      uint64_t v2 = v221;
LABEL_67:
      CFCharacterSetRef v4 = v224;
      goto LABEL_68;
    }
    while (1)
    {
      unint64_t v48 = *((void *)v47 + 1);
      if (v41 == v48) {
        break;
      }
      if (v43 > 1)
      {
        if (v48 >= v40) {
          v48 %= v40;
        }
      }
      else
      {
        v48 &= v40 - 1;
      }
      if (v48 != v44) {
        goto LABEL_65;
      }
LABEL_64:
      CFIndex v47 = *(unsigned __int16 **)v47;
      if (!v47) {
        goto LABEL_65;
      }
    }
    if (!sub_2161A6964((uint64_t)&dword_26797D2E0, v47 + 8, (unsigned __int16 *)__p)) {
      goto LABEL_64;
    }
    if (v16)
    {
      if (v20)
      {
        int v51 = *v16;
        if ((v51 - 48) < 0xA || (unsigned __int16)(v51 + 240) <= 9u)
        {
          unint64_t v56 = 0;
          while (v20 - 1 != v56)
          {
            int v57 = v16[v56 + 1];
            unsigned int v58 = v57 - 48;
            ++v56;
            unsigned int v59 = (unsigned __int16)(v57 + 240);
            if (v58 >= 0xA && v59 >= 0xA)
            {
              if (v56 < v20) {
                goto LABEL_87;
              }
              break;
            }
          }
          uint64_t v61 = 0;
          UniChar v62 = v16;
          unint64_t v63 = v20;
          uint64_t v14 = v234;
          do
          {
            unsigned int v65 = *v62++;
            uint64_t v64 = v65;
            if (v65 >> 4 <= 0xFF0) {
              uint64_t v66 = -48;
            }
            else {
              uint64_t v66 = -65296;
            }
            uint64_t v61 = v64 + 10 * v61 + v66;
            --v63;
          }
          while (v63);
          BOOL v45 = v61 > v47[20];
          uint64_t v2 = v221;
          CFCharacterSetRef v4 = v224;
          goto LABEL_69;
        }
      }
    }
LABEL_87:
    v244.__r_.__value_.__r.__words[0] = 0;
    sub_21617FAAC(&v245, v16, v20);
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v52 = (unsigned __int16 *)&v245;
    }
    else {
      unint64_t v52 = (unsigned __int16 *)v245.__r_.__value_.__r.__words[0];
    }
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v245.__r_.__value_.__l.__size_;
    }
    CFCharacterSetRef v4 = v224;
    uint64_t v14 = v234;
    uint64_t v49 = v235;
    BOOL v45 = (sub_2161EBFB8(v52, size, &v244)
        || ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (int64_t v54 = &v245)
          : (int64_t v54 = (std::string *)v245.__r_.__value_.__r.__words[0]),
            (v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (std::string::size_type v55 = HIBYTE(v245.__r_.__value_.__r.__words[2]))
          : (std::string::size_type v55 = v245.__r_.__value_.__l.__size_),
            sub_2161EBEE4((uint64_t)v54, v55, (uint64_t *)&v244)))
       && (int64_t)v244.__r_.__value_.__r.__words[0] > v47[20];
    uint64_t v2 = v221;
    if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v245.__r_.__value_.__l.__data_);
    }
LABEL_70:
    if (SBYTE7(v247) < 0)
    {
      operator delete(__p[0]);
      if (v45) {
        goto LABEL_236;
      }
    }
    else if (v45)
    {
      goto LABEL_236;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1A0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D1A0))
    {
      LOWORD(__p[0]) = 0;
      __p[1] = &unk_2163CA6AE;
      *(void *)&long long v247 = 2;
      *((void *)&v247 + 1) = &unk_2163CA6B4;
      *(void *)&long long __len = 1;
      WORD4(__len) = 8;
      *(void *)&long long v249 = "o0a0";
      *((void *)&v249 + 1) = 2;
      *(void *)&long long v250 = "!h";
      *((void *)&v250 + 1) = 1;
      LOWORD(v251) = 10;
      *((void *)&v251 + 1) = L"と";
      *(void *)&long long v252 = 1;
      *((void *)&v252 + 1) = &unk_2163CA6C2;
      *(void *)&long long v253 = 1;
      WORD4(v253) = 9;
      *(void *)&long long v254 = word_2163C9EC0;
      *((void *)&v254 + 1) = 1;
      *(void *)&long long v255 = &unk_2163CA6C6;
      *((void *)&v255 + 1) = 1;
      LOWORD(v256) = 9;
      *((void *)&v256 + 1) = word_2163CA6CA;
      *(void *)&long long v257 = 3;
      *((void *)&v257 + 1) = word_2163CA6D2;
      *(void *)&long long v258 = 1;
      WORD4(v25++**(_DWORD **)(result + 8) = 9;
      *(void *)&long long v259 = word_2163CA6CA;
      *((void *)&v259 + 1) = 3;
      *(void *)&long long v260 = L"時";
      *((void *)&v260 + 1) = 1;
      LOWORD(v261) = 5;
      *((void *)&v261 + 1) = word_2163C9CE4;
      uint64_t v262 = 1;
      uint64_t v263 = (uint64_t)&unk_2163CA6D6;
      uint64_t v264 = 1;
      LOWORD(v265) = 5;
      v266 = word_2163C9CE4;
      uint64_t v267 = 1;
      v268 = byte_2163CA6AA;
      uint64_t v269 = 1;
      LOWORD(v27sub_216195244(&a9, 0) = 5;
      uint64_t v271 = (uint64_t)word_2163C9CE4;
      uint64_t v272 = 1;
      uint64_t v273 = (uint64_t)&unk_2163CA6DA;
      uint64_t v274 = 1;
      LOWORD(v275) = 10;
      v276 = (const char *)word_2163CA6DE;
      uint64_t v277 = 3;
      v278 = (char *)&unk_2163CA6E6;
      uint64_t v279 = 1;
      LOWORD(v28sub_216195244(&a9, 0) = 10;
      uint64_t v281 = (uint64_t)word_2163CA6DE;
      uint64_t v282 = 3;
      uint64_t v283 = (uint64_t)byte_2163CA6AA;
      uint64_t v284 = 1;
      LOWORD(v285) = 10;
      v286 = (const char *)word_2163CA6DE;
      uint64_t v287 = 3;
      v288 = &unk_2163CA6DA;
      uint64_t v289 = 1;
      LOWORD(v29sub_216195244(&a9, 0) = 2;
      uint64_t v291 = (uint64_t)L"に";
      uint64_t v292 = 1;
      uint64_t v293 = (uint64_t)&unk_2163CA6EA;
      uint64_t v294 = 1;
      LOWORD(v295) = 10;
      v296 = word_2163CA6DE;
      uint64_t v297 = 3;
      v298 = word_2163CA6EE;
      uint64_t v299 = 1;
      LOWORD(v30sub_216195244(&a9, 0) = 2;
      uint64_t v301 = (uint64_t)L"に";
      uint64_t v302 = 1;
      uint64_t v303 = (uint64_t)&unk_2163CA6F2;
      uint64_t v304 = 1;
      LOWORD(v305) = 20;
      v306 = &unk_2163CA6F6;
      uint64_t v307 = 4;
      v308 = L"時";
      uint64_t v309 = 1;
      LOWORD(v31sub_216195244(&a9, 0) = 28;
      uint64_t v311 = (uint64_t)&unk_2163CA700;
      uint64_t v312 = 6;
      uint64_t v313 = (uint64_t)L"時";
      uint64_t v314 = 1;
      LOWORD(v315) = 9;
      v316 = (const char *)word_2163CA6CA;
      uint64_t v317 = 3;
      v318[0] = &unk_2163CA70E;
      v318[1] = 2;
      __int16 v319 = 2;
      v320 = "v0_0";
      uint64_t v321 = 2;
      v322 = word_2163CA6EE;
      uint64_t v323 = 1;
      sub_2161A746C((uint64_t **)&unk_26797D218, (long long *)__p, 19);
      __cxa_atexit((void (*)(void *))sub_2161A6AB0, &unk_26797D218, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D1A0);
      uint64_t v2 = v221;
      CFCharacterSetRef v4 = v224;
      uint64_t v49 = v235;
    }
    v245.__r_.__value_.__r.__words[0] = 0;
    unint64_t v27 = v236;
    if ((sub_2161A6ADC(v16, v20, (uint64_t *)&v245) & 1) == 0
      || (std::string::size_type v50 = v245.__r_.__value_.__r.__words[0], (uint64_t)v245.__r_.__value_.__l.__data_ >= 0x8000))
    {
      uint64_t v14 = v234;
      goto LABEL_238;
    }
    switch(v245.__r_.__value_.__r.__words[0])
    {
      case 1uLL:
        if (v236 == 1)
        {
          int v71 = *v15;
          int v79 = 12402;
          goto LABEL_199;
        }
        if (v236 != 2 || *v15 != 12402) {
          goto LABEL_200;
        }
        goto LABEL_194;
      case 2uLL:
        if (v236 == 1)
        {
          int v71 = *v15;
          if (v71 == 12376) {
            goto LABEL_235;
          }
          int v79 = 12405;
          goto LABEL_199;
        }
        if (v236 != 2) {
          goto LABEL_200;
        }
        int v74 = *v15;
        if (v74 == 12395)
        {
LABEL_194:
          int v71 = v15[1];
          int v79 = 12356;
          goto LABEL_199;
        }
        if (v74 == 12407)
        {
          int v71 = v15[1];
          int v79 = 12383;
          goto LABEL_199;
        }
        if (v74 != 12405) {
          goto LABEL_200;
        }
        int v71 = v15[1];
        if (v71 == 12358) {
          goto LABEL_235;
        }
        if (v71 != 12383)
        {
LABEL_158:
          int v79 = 12388;
          goto LABEL_199;
        }
        if (v49 == 1)
        {
          int v75 = *v237;
          if (v75 == 26376 || v75 == 26847) {
            goto LABEL_200;
          }
        }
        if (v229 != 2)
        {
          if (v229 != 3) {
            goto LABEL_235;
          }
          uint64_t v76 = 3;
          BOOL v77 = &word_2163CA724;
          unint64_t v78 = v227;
          while ((unsigned __int16)*v77 == *v78)
          {
            ++v78;
            ++v77;
            if (!--v76) {
              goto LABEL_200;
            }
          }
          for (uint64_t j = 0; j != 3; ++j)
          {
            if ((unsigned __int16)word_2163CA72C[j] != v227[j]) {
              goto LABEL_235;
            }
          }
          goto LABEL_200;
        }
        unsigned int v209 = *v227;
        if (v209 <= 0x306E)
        {
          if (v209 == 12365)
          {
            unsigned int v80 = v227[1];
            int v81 = 12428;
          }
          else
          {
            if (v209 != 12369) {
              goto LABEL_235;
            }
            unsigned int v80 = v227[1];
            int v81 = 12383;
          }
          goto LABEL_539;
        }
        if (v209 == 12399 || v209 == 12405)
        {
          unsigned int v80 = v227[1];
          int v81 = 12426;
          goto LABEL_539;
        }
        goto LABEL_235;
      case 3uLL:
        if (v236 == 1)
        {
          int v71 = *v15;
          int v79 = 12415;
          goto LABEL_199;
        }
        if (v236 != 2) {
          goto LABEL_200;
        }
        int v72 = *v15;
        int v73 = 12415;
        goto LABEL_151;
      case 4uLL:
        if (v236 != 1)
        {
          if (v236 == 2 && *v15 == 12424)
          {
            int v71 = v15[1];
            goto LABEL_153;
          }
          goto LABEL_200;
        }
        if (*v15 != 12375) {
          goto LABEL_200;
        }
        if (v49 == 1)
        {
          unsigned int v80 = *v237;
          int v81 = 26376;
          goto LABEL_539;
        }
        goto LABEL_235;
      case 5uLL:
        if (v236 != 2) {
          goto LABEL_200;
        }
        int v69 = *v15;
        int v70 = 12356;
        goto LABEL_156;
      case 6uLL:
        if (v236 == 1)
        {
          int v71 = *v15;
          int v79 = 12416;
        }
        else
        {
          if (v236 != 2) {
            goto LABEL_200;
          }
          int v72 = *v15;
          int v73 = 12416;
LABEL_151:
          if (v72 != v73) {
            goto LABEL_200;
          }
          int v71 = v15[1];
          if (v71 == 12356) {
            goto LABEL_235;
          }
LABEL_153:
          int v79 = 12387;
        }
LABEL_199:
        if (v71 == v79) {
          goto LABEL_235;
        }
        goto LABEL_200;
      case 8uLL:
        if (v236 != 2) {
          goto LABEL_200;
        }
        int v69 = *v15;
        int v70 = 12399;
LABEL_156:
        if (v69 != v70) {
          goto LABEL_200;
        }
        int v71 = v15[1];
        goto LABEL_158;
      case 9uLL:
        if (v236 != 1 || *v15 != 12367) {
          goto LABEL_200;
        }
        if (v49 == 2)
        {
          int v208 = *v237;
          if (v208 == 24180)
          {
            unsigned int v80 = v237[1];
            int v81 = 38291;
            goto LABEL_539;
          }
          if (v208 != 26178) {
            goto LABEL_235;
          }
          unsigned int v80 = v237[1];
          if (v80 != 38291)
          {
            int v81 = 38480;
            goto LABEL_539;
          }
          goto LABEL_200;
        }
        if (v49 != 1) {
          goto LABEL_235;
        }
        unsigned int v80 = *v237;
        if (v80 > 0x6641)
        {
          if (v80 != 26178 && v80 != 26376)
          {
            int v81 = 27573;
            goto LABEL_539;
          }
          goto LABEL_200;
        }
        if (v80 == 20154) {
          goto LABEL_200;
        }
        int v81 = 24180;
        goto LABEL_539;
      case 0xAuLL:
        if (v236 != 1)
        {
          if (v236 == 2 && *v15 == 12392)
          {
            int v67 = v15[1];
            int v68 = 12362;
            goto LABEL_171;
          }
          goto LABEL_200;
        }
        if (*v15 != 12392 || v229 == 1 && *v227 == 12405) {
          goto LABEL_200;
        }
        if (v49 == 1)
        {
          unsigned int v80 = *v237;
          int v81 = 37325;
          goto LABEL_539;
        }
        if (v49 == 2 && *v237 == 25991)
        {
          unsigned int v80 = v237[1];
          int v81 = 23383;
          goto LABEL_539;
        }
        goto LABEL_235;
      case 0xEuLL:
        if (v236 != 3) {
          goto LABEL_200;
        }
        uint64_t v82 = 0;
        break;
      case 0x14uLL:
        if (v236 != 2 || *v15 != 12399) {
          goto LABEL_200;
        }
        int v67 = v15[1];
        if (v67 == 12383)
        {
          if (v49 != 1) {
            goto LABEL_235;
          }
          unsigned int v80 = *v237;
          if (v80 == 27507) {
            goto LABEL_200;
          }
          int v81 = 25165;
        }
        else
        {
          int v68 = 12388;
LABEL_171:
          if (v67 != v68) {
            goto LABEL_200;
          }
          if (v49 != 1) {
            goto LABEL_235;
          }
          unsigned int v80 = *v237;
          int v81 = 26085;
        }
LABEL_539:
        if (v80 == v81) {
          goto LABEL_200;
        }
        goto LABEL_235;
      default:
        goto LABEL_200;
    }
    while (*(unsigned __int16 *)&aX0c0w0[v82 * 2] == v15[v82])
    {
      if (++v82 == 3) {
        goto LABEL_235;
      }
    }
LABEL_200:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1C8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D1C8))
    {
      qmemcpy(__p, "K0M0O0Q0S0", 10);
      sub_2161A76DC((uint64_t)qword_26797D2E8, (unsigned __int16 *)__p, 5);
      __cxa_atexit((void (*)(void *))sub_2161A76D8, qword_26797D2E8, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D1C8);
      CFCharacterSetRef v4 = v224;
      unint64_t v27 = v236;
      uint64_t v49 = v235;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1D0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D1D0))
    {
      qmemcpy(__p, "U0W0Y0[0]0", 10);
      sub_2161A76DC((uint64_t)qword_26797D310, (unsigned __int16 *)__p, 5);
      __cxa_atexit((void (*)(void *))sub_2161A76D8, qword_26797D310, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D1D0);
      CFCharacterSetRef v4 = v224;
      unint64_t v27 = v236;
      uint64_t v49 = v235;
    }
    uint64_t v83 = v229;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1D8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D1D8))
    {
      qmemcpy(__p, "_0a0d0f0h0", 10);
      sub_2161A76DC((uint64_t)&unk_26797D338, (unsigned __int16 *)__p, 5);
      __cxa_atexit((void (*)(void *))sub_2161A76D8, &unk_26797D338, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D1D8);
      CFCharacterSetRef v4 = v224;
      unint64_t v27 = v236;
      uint64_t v49 = v235;
      uint64_t v83 = v229;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1E0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D1E0))
    {
      qmemcpy(__p, "q0t0w0z0}0", 10);
      sub_2161A76DC((uint64_t)qword_26797D360, (unsigned __int16 *)__p, 5);
      __cxa_atexit((void (*)(void *))sub_2161A76D8, qword_26797D360, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D1E0);
      CFCharacterSetRef v4 = v224;
      unint64_t v27 = v236;
      uint64_t v49 = v235;
      uint64_t v83 = v229;
    }
    if (v83)
    {
      unsigned __int16 v84 = *v227;
      if (v50 == 8)
      {
        if (v27 == 2 && *v15 == 12399 && v15[1] == 12387)
        {
          LOWORD(__p[0]) = *v227;
          if (!sub_21618FCC0(qword_26797D2E8, (unsigned __int16 *)__p))
          {
            LOWORD(__p[0]) = v84;
            if (!sub_21618FCC0(qword_26797D310, (unsigned __int16 *)__p))
            {
              LOWORD(__p[0]) = v84;
              UniChar v85 = &unk_26797D338;
              goto LABEL_211;
            }
          }
        }
      }
      else if (v50 == 6 && v27 == 2 && *v15 == 12429 && v15[1] == 12387)
      {
        LOWORD(__p[0]) = *v227;
        UniChar v85 = qword_26797D2E8;
LABEL_211:
        if (!sub_21618FCC0(v85, (unsigned __int16 *)__p))
        {
          LOWORD(__p[0]) = v84;
          if (!sub_21618FCC0(qword_26797D360, (unsigned __int16 *)__p))
          {
LABEL_235:
            uint64_t v2 = v221;
            uint64_t v14 = v234;
            goto LABEL_236;
          }
        }
      }
    }
    if (v245.__r_.__value_.__r.__words[0] == 1)
    {
      if (v49 == 1)
      {
        int v86 = *v237;
LABEL_222:
        if (v86 == 26085
          && v229 == 1
          && v245.__r_.__value_.__r.__words[0] - 2 >= 9
          && *v227 == 12363
          && (v245.__r_.__value_.__r.__words[0] > 0x18 || ((1 << v245.__r_.__value_.__s.__data_[0]) & 0x1104000) == 0))
        {
          goto LABEL_235;
        }
      }
    }
    else if (v49 == 1)
    {
      int v86 = *v237;
      if (v86 != 26085 || v229 != 2) {
        goto LABEL_222;
      }
      if (*v227 == 12376 && v227[1] == 12388) {
        goto LABEL_235;
      }
    }
    LOWORD(__p[0]) = v245.__r_.__value_.__l.__data_;
    __p[1] = v15;
    *(void *)&long long v247 = v27;
    *((void *)&v247 + 1) = v237;
    *(void *)&long long __len = v49;
    unint64_t v87 = v236;
    if (sub_2161A7754((uint64_t)&unk_26797D218, __p) != (void *)&unk_26797D220) {
      goto LABEL_235;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1B0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D1B0))
    {
      sub_2161A6BE4();
      qword_26797D1A8 = (uint64_t)&qword_26797D230;
      __cxa_guard_release(&qword_26797D1B0);
      CFCharacterSetRef v4 = v224;
      unint64_t v87 = v236;
      uint64_t v49 = v235;
    }
    LOWORD(__p[0]) = v245.__r_.__value_.__l.__data_;
    __p[1] = v15;
    *(void *)&long long v247 = v87;
    *((void *)&v247 + 1) = v237;
    *(void *)&long long __len = v49;
    *((void *)&__len + 1) = v227;
    uint64_t v194 = v229;
    *(void *)&long long v249 = v229;
    uint64_t v195 = qword_26797D238;
    if (qword_26797D238)
    {
      uint64_t v196 = qword_26797D1A8 + 8;
      uint64_t v197 = qword_26797D1A8 + 8;
      do
      {
        char v198 = sub_2161A7A40((void *)(v195 + 32), __p);
        if (v198 >= 0) {
          v199 = (uint64_t *)v195;
        }
        else {
          v199 = (uint64_t *)(v195 + 8);
        }
        if (v198 >= 0) {
          uint64_t v197 = v195;
        }
        uint64_t v195 = *v199;
      }
      while (*v199);
      BOOL v38 = v197 == v196;
      uint64_t v194 = v229;
      if (!v38 && (sub_2161A7A40(__p, (void *)(v197 + 32)) & 0x80) == 0) {
        goto LABEL_235;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1C0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D1C0))
    {
      sub_2161A7278();
      qword_26797D1B8 = (uint64_t)&qword_26797D248;
      __cxa_guard_release(&qword_26797D1C0);
      CFCharacterSetRef v4 = v224;
      uint64_t v194 = v229;
    }
    uint64_t v200 = qword_26797D1B8;
    LOWORD(__p[0]) = v245.__r_.__value_.__l.__data_;
    __p[1] = v15;
    *(void *)&long long v247 = v236;
    *((void *)&v247 + 1) = v227;
    *(void *)&long long __len = v194;
    BOOL v38 = v200 + 8 == (void)sub_2161A7754(qword_26797D1B8, __p);
    uint64_t v2 = v221;
    uint64_t v14 = v234;
    if (!v38) {
LABEL_236:
    }
      double v17 = v17 + v233[20] / 0.1;
    unint64_t v27 = v236;
LABEL_238:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1F8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D1F8))
    {
      __p[0] = &unk_2163CA846;
      __p[1] = (void *)3;
      *(void *)&long long v247 = &unk_2163CA84E;
      *((void *)&v247 + 1) = 6;
      *(void *)&long long __len = &unk_2163CA85C;
      *((void *)&__len + 1) = 3;
      *(void *)&long long v249 = &unk_2163CA864;
      *((void *)&v249 + 1) = 6;
      *(void *)&long long v250 = &unk_2163CA872;
      *((void *)&v250 + 1) = 3;
      *(void *)&long long v251 = &unk_2163CA87A;
      *((void *)&v251 + 1) = 6;
      *(void *)&long long v252 = "ASUO]N";
      *((void *)&v252 + 1) = 3;
      *(void *)&long long v253 = &unk_2163CA890;
      *((void *)&v253 + 1) = 6;
      sub_2161A7B88((uint64_t)__p, 4);
      __cxa_atexit((void (*)(void *))sub_2161A7B5C, &qword_26797D260, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D1F8);
      uint64_t v2 = v221;
      CFCharacterSetRef v4 = v224;
      uint64_t v14 = v234;
      unint64_t v27 = v236;
    }
    __p[0] = v16;
    __p[1] = (void *)v20;
    *(void *)&long long v247 = v15;
    *((void *)&v247 + 1) = v27;
    uint64_t v88 = qword_26797D268;
    if (qword_26797D268)
    {
      uint64_t v89 = &qword_26797D268;
      do
      {
        char v90 = sub_2161A7D24((unsigned __int16 **)(v88 + 32), (unsigned __int16 **)__p);
        if (v90 >= 0) {
          CFIndex v91 = (uint64_t *)v88;
        }
        else {
          CFIndex v91 = (uint64_t *)(v88 + 8);
        }
        if (v90 >= 0) {
          uint64_t v89 = (uint64_t *)v88;
        }
        uint64_t v88 = *v91;
      }
      while (*v91);
      if (v89 != &qword_26797D268
        && (sub_2161A7D24((unsigned __int16 **)__p, (unsigned __int16 **)v89 + 4) & 0x80) == 0)
      {
        goto LABEL_260;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D200, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D200))
    {
      sub_2161A7E04(__p, "d0Q0", "d0Q0", word_2163CA8A4, "D0c0");
      sub_2161A7E04(&v250, "~0Z0", "~0Z0", "mQ", word_2163CA756);
      *(void *)&long long v254 = "~0Z0";
      *((void *)&v254 + 1) = 2;
      *(void *)&long long v255 = "~0Z0";
      *((void *)&v255 + 1) = 2;
      *(void *)&long long v256 = word_2163CA8B2;
      *((void *)&v256 + 1) = 2;
      *(void *)&long long v257 = "W0K0c0";
      *((void *)&v257 + 1) = 3;
      sub_2161A7E04(&v258, L"ら", L"ら", word_2163CA8B2, "W0K0c0");
      uint64_t v262 = (uint64_t)&unk_2163CA8C0;
      uint64_t v263 = 3;
      uint64_t v264 = (uint64_t)&unk_2163CA8C0;
      uint64_t v265 = 3;
      v266 = &unk_2163CA8C8;
      uint64_t v267 = 4;
      v268 = (char *)&unk_2163CA8D2;
      uint64_t v269 = 6;
      v270 = &unk_2163CA8E0;
      uint64_t v271 = 2;
      uint64_t v272 = (uint64_t)&unk_2163CA8E0;
      uint64_t v273 = 2;
      uint64_t v274 = (uint64_t)word_2163CA8E6;
      uint64_t v275 = 2;
      v276 = (const char *)word_2163CA8EC;
      uint64_t v277 = 4;
      v278 = (char *)&unk_2163CA8F6;
      uint64_t v279 = 2;
      v280 = &unk_2163CA8E0;
      uint64_t v281 = 2;
      uint64_t v282 = (uint64_t)word_2163CA8E6;
      uint64_t v283 = 2;
      uint64_t v284 = (uint64_t)word_2163CA8EC;
      uint64_t v285 = 4;
      v286 = (const char *)&unk_2163CA8FC;
      uint64_t v287 = 2;
      v288 = &unk_2163CA8E0;
      uint64_t v289 = 2;
      v290 = word_2163CA8E6;
      uint64_t v291 = 2;
      uint64_t v292 = (uint64_t)word_2163CA8EC;
      uint64_t v293 = 4;
      uint64_t v294 = (uint64_t)&unk_2163CA902;
      uint64_t v295 = 2;
      v296 = &unk_2163CA8E0;
      uint64_t v297 = 2;
      v298 = word_2163CA8E6;
      uint64_t v299 = 2;
      v300 = word_2163CA8EC;
      uint64_t v301 = 4;
      uint64_t v302 = (uint64_t)&unk_2163CA908;
      uint64_t v303 = 4;
      uint64_t v304 = (uint64_t)"h0R0h0R0";
      uint64_t v305 = 4;
      v306 = word_2163CA8B2;
      uint64_t v307 = 2;
      v308 = (const __int16 *)"W0K0c0";
      uint64_t v309 = 3;
      v310 = &unk_2163CA91C;
      uint64_t v311 = 2;
      uint64_t v312 = (uint64_t)"o0R0";
      uint64_t v313 = 2;
      uint64_t v314 = (uint64_t)word_2163CA8B2;
      uint64_t v315 = 2;
      v316 = "W0K0c0";
      uint64_t v317 = 3;
      sub_2161A7E04(v318, word_2163CA928, word_2163CA930, word_2163CA938, word_2163C9EC0);
      sub_2161A7E04(v324, word_2163CA928, word_2163CA930, word_2163CA93C, word_2163C9EC0);
      sub_2161A7E04(v325, word_2163CA928, word_2163CA930, word_2163CA940, word_2163C9EC0);
      sub_2161A7E04(v326, word_2163CA944, word_2163CA94C, word_2163CA8B2, "W0K0c0");
      sub_2161A7E04(v327, word_2163CA954, word_2163CA95A, word_2163CA8A4, "D0c0");
      sub_2161A7E04(v328, word_2163CA960, word_2163CA966, "mQ", word_2163CA756);
      sub_2161A7E04(v329, word_2163CA960, word_2163CA966, word_2163CA96C, word_2163CA756);
      sub_2161A7E04(v330, word_2163CA960, word_2163CA966, word_2163CA970, word_2163CA756);
      sub_2161A7E04(v331, word_2163CA974, "D0c0[0D0", word_2163CA984, word_2163CA98A);
      v331[8] = &unk_2163CA992;
      v331[9] = 2;
      v331[10] = "D0a0X0";
      v331[11] = 3;
      v331[12] = word_2163CA7A2;
      v331[13] = 1;
      v331[14] = L"かい";
      v331[15] = 2;
      sub_2161A7E04(v332, word_2163CA9A0, word_2163CA9A6, word_2163CA6EE, L"い");
      sub_2161A7E04(v333, word_2163CA9AE, word_2163CA9A6, word_2163CA6EE, L"い");
      sub_2161A7E04(v334, word_2163CA9B4, word_2163CA9A6, word_2163CA6EE, L"い");
      sub_2161A7E04(v335, word_2163CA9BA, word_2163CA9C0, "sk", "h0W0");
      sub_2161A7E04(v336, "\tN/c", word_2163CA9D6, word_2163CA9E0, "h0F0");
      sub_2161A7E04(v337, "\tN,g", word_2163CA9F0, word_2163CA9F8, word_2163CA9FE);
      sub_2161A7E04(v338, "\tN,g", word_2163CA9F0, word_2163CAA08, "r0M0F0Q0");
      v338[8] = "\tN,g";
      v338[9] = 2;
      v338[10] = word_2163CA9F0;
      v338[11] = 3;
      v338[12] = &unk_2163CAA18;
      v338[13] = 4;
      v338[14] = "r0M0F0Q0";
      v338[15] = 4;
      v338[16] = "\tN,g";
      v338[17] = 2;
      v338[18] = word_2163CA9F0;
      v338[19] = 3;
      v338[20] = &unk_2163CAA22;
      v338[21] = 3;
      v338[22] = "r0M0F0Q0";
      v338[23] = 4;
      v338[24] = "\tN0u";
      v338[25] = 2;
      v338[26] = &unk_2163CAA30;
      v338[27] = 3;
      v338[28] = &unk_2163CAA38;
      v338[29] = 1;
      v338[30] = "Y0L0_0";
      v338[31] = 3;
      v338[32] = "\vN";
      v338[33] = 1;
      v338[34] = "W0_0";
      v338[35] = 2;
      v338[36] = word_2163CA8B2;
      v338[37] = 2;
      v338[38] = "W0K0c0";
      v338[39] = 3;
      sub_2161A7E04(v339, word_2163CAA4E, word_2163CAA56, L"日", L"か");
      sub_2161A7E04(v340, word_2163CAA5E, word_2163CAA56, L"日", L"か");
      sub_2161A7E04(v341, word_2163CAA66, word_2163CAA56, L"日", L"か");
      sub_2161A7E04(v342, word_2163CAA6E, "o0d0K0", word_2163CAA7E, word_2163CAA84);
      v342[8] = word_2163CAA6E;
      v342[9] = 3;
      v342[10] = "o0d0K0";
      v342[11] = 3;
      v342[12] = &unk_2163CAA8C;
      v342[13] = 1;
      v342[14] = "O0N0";
      v342[15] = 2;
      v342[16] = "2";
      v342[17] = 3;
      v342[18] = "o0d0K0";
      v342[19] = 3;
      v342[20] = &unk_2163CAA8C;
      v342[21] = 1;
      v342[22] = "O0N0";
      v342[23] = 2;
      v342[24] = &unk_2163CAA9E;
      v342[25] = 3;
      v342[26] = "o0d0K0";
      v342[27] = 3;
      v342[28] = &unk_2163CAA8C;
      v342[29] = 1;
      v342[30] = "O0N0";
      v342[31] = 2;
      v342[32] = &unk_2163CAAA6;
      v342[33] = 1;
      v342[34] = L"かい";
      v342[35] = 2;
      v342[36] = &unk_2163CAAAA;
      v342[37] = 2;
      v342[38] = &unk_2163CAAB0;
      v342[39] = 4;
      v342[40] = &unk_2163CAABA;
      v342[41] = 2;
      v342[42] = "K0D0Q0D0";
      v342[43] = 4;
      v342[44] = &unk_2163CAACA;
      v342[45] = 3;
      v342[46] = &unk_2163CAAD2;
      v342[47] = 3;
      sub_2161A7E04(v343, word_2163CAADA, word_2163CAAE0, word_2163CAAEA, "K0R0d0");
      sub_2161A7E04(v344, word_2163CAADA, word_2163CAAE0, "K0\bg", "K0R0d0");
      sub_2161A7E04(v345, word_2163CAADA, word_2163CAAE0, word_2163CAAFE, "K0R0d0");
      sub_2161A7E04(v346, "ASpe", "X0c0Y0F0", "\rP", L"ばい");
      sub_2161A7E04(v347, "ASpe", "X0c0Y0F0", word_2163CA7A2, L"かい");
      sub_2161A7E04(v348, word_2163CAB18, "i0F0D0d0", word_2163CAB28, "[0D0");
      sub_2161A7E04(v349, word_2163CAB32, word_2163CAB38, word_2163CA6EE, L"い");
      sub_2161A7E04(v350, word_2163CAB40, word_2163CAB38, word_2163CA6EE, L"い");
      sub_2161A7E04(v351, word_2163CAB46, word_2163CAB38, word_2163CA6EE, L"い");
      v351[8] = &unk_2163CAB4C;
      v351[9] = 2;
      v351[10] = &unk_2163CAB52;
      v351[11] = 2;
      v351[12] = &unk_2163CAB58;
      v351[13] = 1;
      v351[14] = &unk_2163CAB5C;
      v351[15] = 3;
      v351[16] = word_2163CAB64;
      v351[17] = 2;
      v351[18] = word_2163CAB6A;
      v351[19] = 4;
      v351[20] = &unk_2163CAB74;
      v351[21] = 2;
      v351[22] = &unk_2163CAB7A;
      v351[23] = 2;
      sub_2161A7E04(v352, word_2163CAB64, word_2163CAB6A, word_2163CAB80, word_2163CAB84);
      v352[8] = word_2163CAB64;
      v352[9] = 2;
      v352[10] = word_2163CAB6A;
      v352[11] = 4;
      v352[12] = &unk_2163CAB8A;
      v352[13] = 2;
      v352[14] = "T0F0Q0D0";
      v352[15] = 4;
      sub_2161A7E04(v353, word_2163CAB9A, word_2163CABA0, L"と", L"と");
      v353[8] = &unk_2163CABA8;
      v353[9] = 2;
      v353[10] = "J0h0j0";
      v353[11] = 3;
      v353[12] = word_2163CA8B2;
      v353[13] = 2;
      v353[14] = "W0K0c0";
      v353[15] = 3;
      sub_2161A7E04(v354, word_2163CABB6, word_2163CABBC, word_2163CA8B2, "W0K0c0");
      v354[8] = &unk_2163CABC6;
      v354[9] = 2;
      v354[10] = &unk_2163CABCC;
      v354[11] = 4;
      v354[12] = &unk_2163CABD6;
      v354[13] = 4;
      v354[14] = &unk_2163CABE0;
      v354[15] = 10;
      v354[16] = &unk_2163CABF6;
      v354[17] = 2;
      v354[18] = &unk_2163CABFC;
      v354[19] = 4;
      v354[20] = &unk_2163CAC06;
      v354[21] = 4;
      v354[22] = &unk_2163CAC10;
      v354[23] = 8;
      sub_2161A7E04(v355, word_2163CAC22, word_2163CAC28, word_2163CA8E6, word_2163CA8EC);
      sub_2161A7E04(v356, L"日", "s0", word_2163CAC30, word_2163CAC36);
      sub_2161A7E04(v358, word_2163CAC4E, word_2163CAC54, word_2163CA8B2, "W0K0c0");
      sub_2161A7E04(v361, word_2163CAC68, "o0a0", word_2163CA6D2, "~0M0");
      sub_2161A7E04(v362, "8", "o0a0", word_2163CA6D2, "~0M0");
      sub_2161A7E04(v363, word_2163CAC76, word_2163CAC7C, word_2163CA6EE, L"い");
      sub_2161A7E04(v364, word_2163CAC84, word_2163CAC7C, word_2163CA6EE, L"い");
      sub_2161A7E04(v365, word_2163CAC8A, word_2163CAC7C, word_2163CA6EE, L"い");
      sub_2161A7E04(v366, word_2163CAC90, "j0n0K0", word_2163CA6EE, L"い");
      sub_2161A7E04(v367, "7", "j0n0K0", word_2163CA6EE, L"い");
      sub_2161A7E04(v368, word_2163CACA4, "j0n0K0", word_2163CA6EE, L"い");
      v368[8] = &unk_2163CACAA;
      v368[9] = 2;
      v368[10] = "S0S0n0K0";
      v368[11] = 4;
      v368[12] = word_2163CA6EE;
      v368[13] = 1;
      v368[14] = L"い";
      v368[15] = 1;
      v368[16] = "9";
      v368[17] = 2;
      v368[18] = "S0S0n0K0";
      v368[19] = 4;
      v368[20] = word_2163CA6EE;
      v368[21] = 1;
      v368[22] = L"い";
      v368[23] = 1;
      v368[24] = &unk_2163CACC0;
      v368[25] = 2;
      v368[26] = "S0S0n0K0";
      v368[27] = 4;
      v368[28] = word_2163CA6EE;
      v368[29] = 1;
      v368[30] = L"い";
      v368[31] = 1;
      sub_2161A7E04(v369, word_2163CACC6, "v0_0", word_2163CA6EE, L"い");
      sub_2161A7E04(v370, word_2163CACCA, L"さん", L"日", "X0d0");
      sub_2161A7EBC((uint64_t)__p, 78);
      __cxa_atexit((void (*)(void *))sub_2161A7DD8, &qword_26797D278, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D200);
      uint64_t v2 = v221;
      CFCharacterSetRef v4 = v224;
      uint64_t v14 = v234;
    }
    __p[0] = v16;
    __p[1] = (void *)v20;
    *(void *)&long long v247 = v15;
    *((void *)&v247 + 1) = v236;
    *(void *)&long long __len = v237;
    *((void *)&__len + 1) = v235;
    *(void *)&long long v249 = v227;
    *((void *)&v249 + 1) = v229;
    uint64_t v92 = qword_26797D280;
    if (qword_26797D280)
    {
      uint64_t v93 = &qword_26797D280;
      do
      {
        char v94 = sub_2161A8060((unsigned __int16 **)(v92 + 32), (unsigned __int16 **)__p);
        if (v94 >= 0) {
          CFIndex v95 = (uint64_t *)v92;
        }
        else {
          CFIndex v95 = (uint64_t *)(v92 + 8);
        }
        if (v94 >= 0) {
          uint64_t v93 = (uint64_t *)v92;
        }
        uint64_t v92 = *v95;
      }
      while (*v95);
      if (v93 != &qword_26797D280
        && (sub_2161A8060((unsigned __int16 **)__p, (unsigned __int16 **)v93 + 4) & 0x80) == 0)
      {
LABEL_260:
        double v17 = v17 + (v233[20] + v233[20]) / 0.1;
      }
    }
    if (*(_DWORD *)(v232 + 16) || (uint64_t v96 = *v4, *(_DWORD *)(*v4 + 40 * v14) != 5))
    {
      int v230 = 0;
      unint64_t v98 = v236;
    }
    else
    {
      int v97 = *(unsigned __int16 *)(*(void *)(v232 + 40) + 50);
      unint64_t v98 = v236;
      if (v97 != *(unsigned __int16 *)(v96 + 40 * v14 + 30) && v97 != *(unsigned __int16 *)(v96 + 40 * v14 + 32)
        || !sub_2161E386C(cf))
      {
        goto LABEL_517;
      }
      if (v220 == 40)
      {
        int v230 = 0;
        uint64_t v99 = v217;
        goto LABEL_481;
      }
      if (sub_2161A62AC(v226) || (v183 = *(unsigned __int16 **)(v232 + 40), v183[25] == v226))
      {
        int v230 = 1;
        uint64_t v99 = v222;
        goto LABEL_481;
      }
      if (v183[44] <= v226)
      {
        int v230 = 0;
        unsigned int v207 = v183[45];
        uint64_t v99 = v216;
        if (v207 >= v226) {
LABEL_481:
        }
          double v17 = v17 + *v99 / 0.1;
      }
      else
      {
LABEL_517:
        int v230 = 0;
      }
    }
    if ((*(_DWORD *)(*v4 + 40 * v14) == 5 || v20 == 1 && *v16 == 19968)
      && (sub_2161A62AC(v226) || *(unsigned __int16 *)(*(void *)(v232 + 40) + 50) == v226))
    {
      if (v20)
      {
        uint64_t v100 = 2 * v20;
        uint64_t v101 = (__int16 *)v16;
        while (sub_2161EC384(*v101))
        {
          ++v101;
          v100 -= 2;
          if (!v100) {
            goto LABEL_276;
          }
        }
        unint64_t v98 = v236;
        goto LABEL_282;
      }
LABEL_276:
      uint64_t v102 = v235;
      unint64_t v98 = v236;
      if (sub_2161A634C(v237, v235)) {
        double v17 = v17 + v233[22] / 0.1;
      }
    }
    else
    {
LABEL_282:
      uint64_t v102 = v235;
    }
    int v103 = *(_DWORD *)(*v4 + 40 * v14);
    if (v2 == 2 && v103 == 5)
    {
      uint64_t v104 = v2;
      double v17 = v17 + v233[24] / 0.1;
    }
    else
    {
      uint64_t v104 = v2;
    }
    if (v15) {
      BOOL v105 = v98 == 0;
    }
    else {
      BOOL v105 = 1;
    }
    char v106 = v105;
    if (v105 || (int v107 = *v15, (v107 - 48) >= 0xA) && (unsigned __int16)(v107 + 240) > 9u)
    {
LABEL_296:
      BOOL v108 = 0;
      goto LABEL_297;
    }
    uint64_t v113 = 1;
    while (v98 != v113)
    {
      int v114 = v15[v113];
      unsigned int v115 = v114 - 48;
      ++v113;
      unsigned int v116 = (unsigned __int16)(v114 + 240);
      if (v115 >= 0xA && v116 >= 0xA)
      {
        unint64_t v118 = v113 - 1;
        goto LABEL_316;
      }
    }
    unint64_t v118 = v98;
LABEL_316:
    BOOL v108 = v118 >= v98;
    if (v103 != 5)
    {
LABEL_297:
      if (!v231) {
        goto LABEL_331;
      }
LABEL_298:
      if (!sub_2161A634C(v237, v102)) {
        goto LABEL_331;
      }
      if (v102)
      {
        uint64_t v109 = 2 * v102;
        uint64_t v110 = v237;
        while ((unsigned __int16)(*v110 + 191) < 0x1Au || (unsigned __int16)(*v110 + 223) < 0x1Au)
        {
          ++v110;
          v109 -= 2;
          if (!v109)
          {
            uint64_t v112 = v102;
            goto LABEL_344;
          }
        }
        goto LABEL_331;
      }
      uint64_t v112 = 0;
LABEL_344:
      double v17 = v17 + v233[23] / 0.1;
      goto LABEL_345;
    }
    if (v118 < v98) {
      goto LABEL_296;
    }
    if ((v219 & 0x100000000) != 0)
    {
      BOOL v119 = 1;
      char v120 = v219;
    }
    else
    {
      BOOL v119 = 0;
      char v120 = v219;
      if (v16 && v20)
      {
        int v184 = *v16;
        if ((v184 - 48) < 0xA || (unsigned __int16)(v184 + 240) <= 9u)
        {
          uint64_t v201 = 1;
          while (v20 != v201)
          {
            int v202 = v16[v201];
            unsigned int v203 = v202 - 48;
            ++v201;
            unsigned int v204 = (unsigned __int16)(v202 + 240);
            if (v203 >= 0xA && v204 >= 0xA)
            {
              unint64_t v206 = v201 - 1;
              goto LABEL_529;
            }
          }
          unint64_t v206 = v20;
LABEL_529:
          BOOL v119 = v206 >= v20;
        }
        else
        {
          BOOL v119 = 0;
        }
      }
    }
    HIDWORD(v219) = v119;
    if ((v120 & 1) != 0 || !v20)
    {
      LODWORD(v219) = 1;
    }
    else
    {
      uint64_t v121 = 2 * v20 - 2;
      uint64_t v122 = (__int16 *)v16;
      do
      {
        BOOL v123 = sub_2161EC384(*v122++);
        if (v121) {
          BOOL v124 = v123;
        }
        else {
          BOOL v124 = 0;
        }
        v121 -= 2;
      }
      while (v124);
      LODWORD(v219) = v123;
      unint64_t v98 = v236;
      uint64_t v102 = v235;
    }
    HIDWORD(v218) |= v231;
    LODWORD(v21++**(_DWORD **)(result + 8) = v218 | v33;
    BOOL v108 = 1;
    if (v231) {
      goto LABEL_298;
    }
LABEL_331:
    if (v33 && sub_2161A634C(v237, v102))
    {
      if (v102)
      {
        uint64_t v125 = 2 * v102;
        v126 = v237;
        while ((unsigned __int16)(*v126 + 191) < 0x1Au || (unsigned __int16)(*v126 + 223) < 0x1Au)
        {
          ++v126;
          v125 -= 2;
          if (!v125)
          {
            uint64_t v112 = v102;
            goto LABEL_345;
          }
        }
        uint64_t v112 = v102;
        goto LABEL_344;
      }
      uint64_t v112 = 0;
    }
    else
    {
      uint64_t v112 = v102;
    }
LABEL_345:
    if ((v108 & sub_2161EC494(v237, v112)) == 1) {
      double v17 = v17 + v233[15] / -0.1;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D208, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D208))
    {
      long long v258 = xmmword_264269808;
      long long v259 = *(_OWORD *)&off_264269818;
      long long v260 = xmmword_264269828;
      long long v261 = *(_OWORD *)&off_264269838;
      long long v254 = xmmword_2642697C8;
      long long v255 = unk_2642697D8;
      long long v256 = xmmword_2642697E8;
      long long v257 = unk_2642697F8;
      long long v250 = xmmword_264269788;
      long long v251 = *(_OWORD *)&off_264269798;
      long long v252 = xmmword_2642697A8;
      long long v253 = unk_2642697B8;
      *(_OWORD *)long long __p = xmmword_264269748;
      long long v247 = unk_264269758;
      long long __len = xmmword_264269768;
      long long v249 = *(_OWORD *)&off_264269778;
      sub_2161A81D8((uint64_t *)__p, 16);
      __cxa_atexit((void (*)(void *))sub_2161A81AC, &qword_26797D290, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D208);
      uint64_t v104 = v221;
      CFCharacterSetRef v4 = v224;
      unint64_t v98 = v236;
      uint64_t v102 = v235;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D210, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D210))
    {
      LOWORD(__p[0]) = 10;
      __p[1] = word_2163CA6DE;
      *(void *)&long long v247 = 3;
      *((void *)&v247 + 1) = &unk_2163CAD5E;
      *(void *)&long long __len = 1;
      WORD4(__len) = 3;
      *(void *)&long long v249 = L"さん";
      *((void *)&v249 + 1) = 2;
      *(void *)&long long v250 = &unk_2163CAD5E;
      *((void *)&v250 + 1) = 1;
      LOWORD(v251) = 5;
      *((void *)&v251 + 1) = word_2163C9CE4;
      *(void *)&long long v252 = 1;
      *((void *)&v252 + 1) = L"かい";
      *(void *)&long long v253 = 2;
      WORD4(v253) = 5;
      *(void *)&long long v254 = word_2163C9CE4;
      *((void *)&v254 + 1) = 1;
      *(void *)&long long v255 = word_2163CA7A2;
      *((void *)&v255 + 1) = 1;
      LOWORD(v256) = 5;
      *((void *)&v256 + 1) = word_2163C9CE4;
      *(void *)&long long v257 = 1;
      *((void *)&v257 + 1) = &unk_2163CAD62;
      *(void *)&long long v258 = 1;
      WORD4(v25++**(_DWORD **)(result + 8) = 3;
      *(void *)&long long v259 = L"さん";
      *((void *)&v259 + 1) = 2;
      *(void *)&long long v260 = L"次";
      *((void *)&v260 + 1) = 1;
      LOWORD(v261) = 3;
      *((void *)&v261 + 1) = L"さん";
      uint64_t v262 = 2;
      uint64_t v263 = (uint64_t)&unk_2163CAD66;
      uint64_t v264 = 1;
      LOWORD(v265) = 9;
      v266 = word_2163CA6CA;
      uint64_t v267 = 3;
      v268 = (char *)&unk_2163CAD6A;
      uint64_t v269 = 1;
      LOWORD(v27sub_216195244(&a9, 0) = 9;
      uint64_t v271 = (uint64_t)word_2163CA6CA;
      uint64_t v272 = 3;
      uint64_t v273 = (uint64_t)&unk_2163CAD6E;
      uint64_t v274 = 1;
      LOWORD(v275) = 2;
      v276 = "u0_0";
      uint64_t v277 = 2;
      v278 = byte_2163CA662;
      uint64_t v279 = 0;
      LOWORD(v28sub_216195244(&a9, 0) = 9;
      uint64_t v281 = (uint64_t)word_2163C9EC0;
      uint64_t v282 = 1;
      uint64_t v283 = (uint64_t)&unk_2163CA73A;
      uint64_t v284 = 1;
      LOWORD(v285) = 1;
      v286 = "D0c0";
      uint64_t v287 = 2;
      v288 = &unk_2163CAD72;
      uint64_t v289 = 2;
      sub_2161A746C((uint64_t **)&qword_26797D2A8, (long long *)__p, 12);
      __cxa_atexit((void (*)(void *))sub_2161A6AB0, &qword_26797D2A8, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D210);
      uint64_t v104 = v221;
      CFCharacterSetRef v4 = v224;
      unint64_t v98 = v236;
      uint64_t v102 = v235;
    }
    v128 = (uint64_t *)qword_26797D298;
    if (!qword_26797D298) {
      goto LABEL_373;
    }
    v129 = &qword_26797D298;
    while (2)
    {
      unint64_t v130 = v128[5];
      if (v20 >= v130) {
        unint64_t v131 = v128[5];
      }
      else {
        unint64_t v131 = v20;
      }
      if (v131)
      {
        v132 = (unsigned __int16 *)v128[4];
        v133 = v16;
        while (1)
        {
          unsigned int v134 = *v132;
          unsigned int v135 = *v133;
          if (v134 < v135) {
            break;
          }
          if (v135 < v134) {
            goto LABEL_361;
          }
          ++v132;
          ++v133;
          if (!--v131) {
            goto LABEL_359;
          }
        }
LABEL_360:
        ++v128;
      }
      else
      {
LABEL_359:
        if (v130 < v20) {
          goto LABEL_360;
        }
LABEL_361:
        v129 = v128;
      }
      v128 = (uint64_t *)*v128;
      if (v128) {
        continue;
      }
      break;
    }
    if (v129 == &qword_26797D298) {
      goto LABEL_373;
    }
    unint64_t v136 = v129[5];
    if (v136 >= v20) {
      unint64_t v137 = v20;
    }
    else {
      unint64_t v137 = v129[5];
    }
    if (!v137)
    {
LABEL_372:
      if (v136 > v20) {
        goto LABEL_373;
      }
LABEL_383:
      double v17 = v17 + v233[15] / 0.1;
      goto LABEL_384;
    }
    v138 = (unsigned __int16 *)v129[4];
    v139 = v16;
    while (1)
    {
      unsigned int v140 = *v139;
      unsigned int v141 = *v138;
      if (v140 < v141) {
        break;
      }
      if (v141 < v140) {
        goto LABEL_383;
      }
      ++v139;
      ++v138;
      if (!--v137) {
        goto LABEL_372;
      }
    }
LABEL_373:
    v245.__r_.__value_.__r.__words[0] = 0;
    if (sub_2161A6ADC(v16, v20, (uint64_t *)&v245))
    {
      if (v245.__r_.__value_.__r.__words[0] == 14 && v98 == 4)
      {
        uint64_t v143 = 0;
        while ((unsigned __int16)word_2163CA7DE[v143] == v15[v143])
        {
          if (++v143 == 4) {
            goto LABEL_383;
          }
        }
      }
      LOWORD(__p[0]) = v245.__r_.__value_.__l.__data_;
      __p[1] = v15;
      *(void *)&long long v247 = v98;
      *((void *)&v247 + 1) = v237;
      *(void *)&long long __len = v102;
      unint64_t v98 = v236;
      if (sub_2161A7754((uint64_t)&qword_26797D2A8, __p) != (void *)&unk_26797D2B0) {
        goto LABEL_383;
      }
    }
LABEL_384:
    char v144 = *(_DWORD *)(*v4 + 40 * v234) != 5 || v108;
    if ((v144 & 1) == 0 && sub_2161E386C(cf))
    {
      double v145 = v233[15];
      goto LABEL_390;
    }
    if (!v16 || !v20)
    {
      if (!**(unsigned char **)(v232 + 24))
      {
        UChar32 v147 = *v16;
        goto LABEL_408;
      }
      goto LABEL_428;
    }
    UChar32 v147 = *v16;
    if ((v147 - 48) < 0xA || (unsigned __int16)(v147 + 240) <= 9u)
    {
      uint64_t v155 = 1;
      while (v20 != v155)
      {
        int v156 = v16[v155];
        unsigned int v157 = v156 - 48;
        ++v155;
        unsigned int v158 = (unsigned __int16)(v156 + 240);
        if (v157 >= 0xA && v158 >= 0xA)
        {
          unint64_t v160 = v155 - 1;
          goto LABEL_423;
        }
      }
      unint64_t v160 = v20;
LABEL_423:
      char v161 = v160 < v20 || v108;
      if (v161)
      {
        if (!**(unsigned char **)(v232 + 24))
        {
LABEL_476:
          uint64_t v146 = v234;
          if ((v106 & 1) == 0)
          {
            int v185 = *v15;
            unsigned int v186 = v185 - 48;
            unsigned int v187 = (unsigned __int16)(v185 + 240);
            if (v186 < 0xA || v187 < 0xA) {
              goto LABEL_408;
            }
            unint64_t v189 = 0;
            while (v98 - 1 != v189)
            {
              int v190 = v15[v189 + 1];
              unsigned int v191 = v190 - 48;
              ++v189;
              unsigned int v192 = (unsigned __int16)(v190 + 240);
              if (v191 < 0xA || v192 <= 9)
              {
                if (v189 >= v98) {
                  break;
                }
                goto LABEL_408;
              }
            }
          }
          double v17 = v17 + v233[19] / 0.1;
          goto LABEL_392;
        }
LABEL_428:
        sub_2161E30A8(v15, v98, &v245);
        sub_2161E30A8(v16, v20, &v244);
        std::string::size_type v162 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
        if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v163 = &v245;
        }
        else {
          v163 = (std::string *)v245.__r_.__value_.__r.__words[0];
        }
        uint64_t v2 = v104;
        if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
        {
          v242 = 0;
          long long __dst = 0;
          uint64_t v243 = 0;
          std::string::size_type v164 = v244.__r_.__value_.__l.__size_;
          v165 = (std::string *)v244.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v164 = HIBYTE(v244.__r_.__value_.__r.__words[2]);
          v242 = 0;
          long long __dst = 0;
          v165 = &v244;
          uint64_t v243 = 0;
        }
        if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v162 = v245.__r_.__value_.__l.__size_;
        }
        sub_216179360((unint64_t *)&__dst, v164 + v162 + 4);
        uint64_t v146 = v234;
        v166 = (char *)__dst;
        if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v167 = HIBYTE(v244.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v167 = v244.__r_.__value_.__l.__size_;
        }
        memcpy(__dst, v165, v167);
        std::string::size_type v168 = HIBYTE(v244.__r_.__value_.__r.__words[2]);
        if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v168 = v244.__r_.__value_.__l.__size_;
        }
        *(_WORD *)&v166[v168] = 8224;
        v169 = &v166[v168 + 2];
        if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v170 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v170 = v245.__r_.__value_.__l.__size_;
        }
        memcpy(v169, v163, v170);
        std::string::size_type v171 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
        if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v171 = v245.__r_.__value_.__l.__size_;
        }
        *(_WORD *)&v169[v171] = 8224;
        sub_2160F6FA0(__p);
        sub_2160F707C(__p, (uint64_t)__dst, v242 - (unsigned char *)__dst);
        CFCharacterSetRef v4 = v224;
        double v172 = 0.0;
        if (sub_216105CFC(v223, (uint64_t)__p))
        {
          sub_21612F5FC(v239, *((void **)&v247 + 1), __len);
          v173 = v239;
          if (v240 < 0) {
            v173 = (void **)v239[0];
          }
          uint64_t v174 = strtol((const char *)v173 + v242 - (unsigned char *)__dst, 0, 16);
          if (v240 < 0) {
            operator delete(v239[0]);
          }
          double v172 = (double)v174 / -700.0;
        }
        sub_2160F6FB0((uint64_t)__p);
        if (__dst)
        {
          v242 = __dst;
          operator delete(__dst);
        }
        if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v244.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v245.__r_.__value_.__l.__data_);
        }
        double v17 = v17 + v172;
        if (!v230) {
          goto LABEL_461;
        }
        double v175 = *v222 / -0.1;
      }
      else
      {
        uint64_t v146 = v234;
        BOOL v179 = v234 != v228 || v220 == 40;
        uint64_t v180 = 17;
        if (v179) {
          uint64_t v180 = 16;
        }
        double v17 = v17 + v233[v180] / 0.1;
        if (v220 != 40) {
          goto LABEL_392;
        }
        if (!sub_21628DCE0(**(_DWORD **)(v232 + 8))) {
          goto LABEL_391;
        }
        uint64_t v181 = 2 * v20;
        v182 = (__int16 *)v16;
        uint64_t v146 = v234;
        uint64_t v2 = v104;
        while (sub_2161EC384(*v182))
        {
          ++v182;
          v181 -= 2;
          if (!v181) {
            goto LABEL_461;
          }
        }
        double v175 = v233[18] / 0.1;
      }
      double v17 = v17 + v175;
      goto LABEL_461;
    }
    if (**(unsigned char **)(v232 + 24)) {
      goto LABEL_428;
    }
    unint64_t v148 = 0;
    while (v20 - 1 != v148)
    {
      int v149 = v16[v148 + 1];
      unsigned int v150 = v149 - 48;
      ++v148;
      unsigned int v151 = (unsigned __int16)(v149 + 240);
      if (v150 < 0xA || v151 <= 9)
      {
        if (v148 >= v20) {
          break;
        }
        goto LABEL_476;
      }
    }
LABEL_408:
    if (v147 == 9787) {
      goto LABEL_428;
    }
    if ((u_charType(v147) - 19) > 0xA) {
      goto LABEL_428;
    }
    UChar32 v153 = *v15;
    if (v153 == 9787) {
      goto LABEL_428;
    }
    if ((u_charType(v153) - 19) > 0xA) {
      goto LABEL_428;
    }
    int v154 = sub_2161EC078(*v16);
    if (v154 == sub_2161EC078(*v15)) {
      goto LABEL_428;
    }
    double v145 = v233[21];
LABEL_390:
    double v17 = v17 + v145 / 0.1;
LABEL_391:
    uint64_t v146 = v234;
LABEL_392:
    uint64_t v2 = v104;
LABEL_461:
    uint64_t v176 = *v4 + 40 * v146;
    uint64_t v177 = *(unsigned __int16 *)(v176 + 24);
    uint64_t v178 = *(unsigned __int16 *)(v176 + 28);
    if (cf) {
      CFRelease(cf);
    }
    v16 += v177;
    v15 += v178;
    uint64_t v14 = v146 + 1;
  }
  while (v14 != v225);
  if (HIDWORD(v219) & v219)
  {
    v212 = v233;
    double v17 = v17 + v233[15] / 0.1;
    int v213 = HIDWORD(v218);
    int v214 = v218;
  }
  else
  {
    int v213 = HIDWORD(v218);
    int v214 = v218;
    v212 = v233;
  }
  if (v213 & v214) {
    return v17 + v212[23] / 0.1;
  }
  return v17;
}

void sub_2161A6044()
{
}

void sub_2161A6224(void *a1, int a2)
{
  if (a2) {
    sub_2160F7444(a1);
  }
  JUMPOUT(0x2161A6254);
}

void sub_2161A6238()
{
}

BOOL sub_2161A62AC(unsigned int a1)
{
  uint64_t v1 = (unsigned __int16 *)((char *)&unk_216372A0A + 14 * a1);
  uint64_t v2 = (uint64_t *)(&off_264269960 + 2 * *v1);
  if (v2[1] == 3)
  {
    uint64_t v3 = 0;
    CFCharacterSetRef v4 = (uint64_t *)(&off_264269960 + 2 * v1[2]);
    uint64_t v5 = *v4;
    unint64_t v6 = v4[1];
    uint64_t v7 = *v2;
    while (asc_2163C990A[v3] == *(_WORD *)(v7 + v3 * 2))
    {
      if (++v3 == 3)
      {
        if (v6 < 3) {
          return 0;
        }
        uint64_t v8 = 0;
        do
        {
          int v9 = *(unsigned __int16 *)(v5 + v8 * 2);
          int v10 = (unsigned __int16)asc_2163C9944[v8];
          BOOL result = v10 == v9;
        }
        while (v10 == v9 && v8++ != 2);
        return result;
      }
    }
  }
  return 0;
}

uint64_t sub_2161A634C(unsigned __int16 *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = &a1[a2];
    while (1)
    {
      unsigned int v3 = *a1;
      BOOL v4 = (unsigned __int16)((v3 & 0xFFDF) - 65) >= 0x1Au && (unsigned __int16)(v3 + 191) >= 0x1Au;
      if (v4 && (unsigned __int16)(v3 + 223) >= 0x1Au)
      {
        BOOL v6 = v3 - 13184 >= 0x5E && (unsigned __int16)(v3 - 945) >= 0x1Bu;
        if (v6 && (unsigned __int16)(v3 - 913) >= 0x1Bu)
        {
          uint64_t v8 = "%";
          unint64_t v9 = 6;
          do
          {
            unint64_t v10 = v9 >> 1;
            uint64_t v11 = &v8[2 * (v9 >> 1)];
            unsigned int v13 = *(unsigned __int16 *)v11;
            uint64_t v12 = v11 + 2;
            v9 += ~(v9 >> 1);
            if (v13 < v3) {
              uint64_t v8 = v12;
            }
            else {
              unint64_t v9 = v10;
            }
          }
          while (v9);
          if (v8 == "22InspectorAccessContext" || v3 < *(unsigned __int16 *)v8) {
            break;
          }
        }
      }
      if (++a1 == v2) {
        return 1;
      }
    }
  }
  return 0;
}

std::mutex *sub_2161A6420(std::mutex *a1)
{
  return a1;
}

void sub_2161A6450(uint64_t a1, uint64_t a2)
{
  xmmword_26797D2C0 = 0u;
  *(_OWORD *)&qword_26797D2D0 = 0u;
  dword_26797D2E0 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v35 = a1 + 32 * a2;
    while (1)
    {
      unint64_t v4 = sub_2161A6920((uint64_t)&qword_26797D2D8, v3);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_26797D2C0 + 1);
      if (*((void *)&xmmword_26797D2C0 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D2C0 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v2 = v4;
          if (v4 >= *((void *)&xmmword_26797D2C0 + 1)) {
            unint64_t v2 = v4 % *((void *)&xmmword_26797D2C0 + 1);
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&xmmword_26797D2C0 + 1) - 1) & v4;
        }
        unint64_t v9 = *(unsigned __int16 ***)(xmmword_26797D2C0 + 8 * v2);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int16 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (sub_2161A6964((uint64_t)&dword_26797D2E0, i + 8, (unsigned __int16 *)v3)) {
                goto LABEL_78;
              }
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      unsigned int v13 = v12 + 16;
      if (*(char *)(v3 + 23) < 0)
      {
        sub_2161984AC(v13, *(void **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v3;
        *((void *)v12 + 4) = *(void *)(v3 + 16);
        *(_OWORD *)unsigned int v13 = v14;
      }
      *((_WORD *)v12 + 2sub_216195244(&a9, 0) = *(_WORD *)(v3 + 24);
      float v15 = (float)(unint64_t)(qword_26797D2D8 + 1);
      if (!v6 || (float)(*(float *)&dword_26797D2E0 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = xmmword_26797D2C0;
      int v32 = *(void **)(xmmword_26797D2C0 + 8 * v2);
      if (v32)
      {
        *(void *)uint64_t v12 = *v32;
      }
      else
      {
        *(void *)uint64_t v12 = qword_26797D2D0;
        qword_26797D2D0 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_26797D2D0;
        if (!*(void *)v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        int v32 = (void *)(xmmword_26797D2C0 + 8 * v33);
      }
      *int v32 = v12;
LABEL_77:
      ++qword_26797D2D8;
LABEL_78:
      v3 += 32;
      if (v3 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26797D2E0);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_26797D2C0 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26797D2C0 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26797D2C0 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26797D2D8 / *(float *)&dword_26797D2E0);
      if (*((void *)&xmmword_26797D2C0 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D2C0 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_26797D2C0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          unint64_t v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = (void *)xmmword_26797D2C0;
          *(void *)&xmmword_26797D2C0 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26797D2C0 + 1) = prime;
          do
            *(void *)(xmmword_26797D2C0 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          int64_t v23 = (void **)qword_26797D2D0;
          if (qword_26797D2D0)
          {
            unint64_t v24 = *(void *)(qword_26797D2D0 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797D2C0 + 8 * v24) = &qword_26797D2D0;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26797D2C0 + 8 * v30))
                {
                  *(void *)(xmmword_26797D2C0 + 8 * v3sub_216195244(&a9, 0) = v23;
                  goto LABEL_59;
                }
                unsigned __int16 *v23 = (void *)*j;
                *uint64_t j = **(void **)(xmmword_26797D2C0 + 8 * v30);
                **(void **)(xmmword_26797D2C0 + 8 * v3sub_216195244(&a9, 0) = j;
                uint64_t j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              int64_t v23 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v34 = (void *)xmmword_26797D2C0;
        *(void *)&xmmword_26797D2C0 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_26797D2C0 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2161A68E0(_Unwind_Exception *a1)
{
  sub_2161A69E8(1, v1);
  sub_2161A6A48((uint64_t)&xmmword_26797D2C0);
  _Unwind_Resume(a1);
}

unint64_t sub_2161A6920(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v3 = *(void *)(a2 + 8);
  if ((v2 & 0x80u) != 0)
  {
    a2 = *(void *)a2;
    uint64_t v2 = v3;
  }
  return sub_2161292A0((uint64_t)&v5, (uint64_t *)a2, 2 * v2);
}

BOOL sub_2161A6964(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  int v3 = *((char *)a2 + 23);
  uint64_t v4 = *((void *)a2 + 1);
  if (v3 >= 0) {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  uint64_t v5 = *((unsigned __int8 *)a3 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a3 + 1);
  }
  if (v4 != v5) {
    return 0;
  }
  if (!v4) {
    return 1;
  }
  if (v3 >= 0) {
    uint8x8_t v7 = a2;
  }
  else {
    uint8x8_t v7 = *(unsigned __int16 **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = *(unsigned __int16 **)a3;
  }
  uint64_t v9 = v4 - 1;
  do
  {
    int v11 = *v7++;
    int v10 = v11;
    int v13 = *v8++;
    int v12 = v13;
    BOOL v15 = v9-- != 0;
    BOOL result = v12 == v10;
  }
  while (v12 == v10 && v15);
  return result;
}

void sub_2161A69E8(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_2161A6A48(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2161A6AB0(uint64_t a1)
{
  return a1;
}

uint64_t sub_2161A6ADC(unsigned __int16 *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if (a1 && a2)
  {
    int v6 = *a1;
    unsigned int v7 = v6 - 48;
    unsigned int v8 = (unsigned __int16)(v6 + 240);
    if (v7 < 0xA || v8 <= 9)
    {
      unint64_t v10 = 0;
      while (a2 - 1 != v10)
      {
        int v11 = a1[v10 + 1];
        unsigned int v12 = v11 - 48;
        ++v10;
        unsigned int v13 = (unsigned __int16)(v11 + 240);
        if (v12 >= 0xA && v13 >= 0xA)
        {
          if (v10 < a2) {
            goto LABEL_15;
          }
          break;
        }
      }
      uint64_t v16 = 0;
      do
      {
        unsigned int v18 = *v5++;
        uint64_t v17 = v18;
        if (v18 >> 4 <= 0xFF0) {
          uint64_t v19 = -48;
        }
        else {
          uint64_t v19 = -65296;
        }
        uint64_t v16 = v17 + 10 * v16 + v19;
        --v4;
      }
      while (v4);
      *a3 = v16;
      return 1;
    }
  }
LABEL_15:
  if (sub_2161EBFB8(a1, a2, a3)) {
    return 1;
  }

  return sub_2161EBEE4((uint64_t)v5, v4, a3);
}

void sub_2161A6BE4()
{
  uint64_t v151 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1E8, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_26797D1E8))
    {
      sub_2161A7800((uint64_t)v0, 2, L"に", L"つ", L"つ");
      sub_2161A7800((uint64_t)&v1, 2, L"に", word_2163C9FD6, word_2163C9FD6);
      sub_2161A7800((uint64_t)&v2, 2, L"に", L"人", word_2163CA75C);
      sub_2161A7800((uint64_t)&v3, 2, L"に", L"日", L"か");
      sub_2161A7800((uint64_t)&v4, 2, L"に", L"日", word_2163C9DB8);
      sub_2161A7800((uint64_t)v5, 2, L"に", "\bg", "d0M0");
      v5[28] = 3;
      int v6 = L"さん";
      uint64_t v7 = 2;
      unsigned int v8 = L"日";
      uint64_t v9 = 1;
      unint64_t v10 = L"か";
      uint64_t v11 = 1;
      sub_2161A7800((uint64_t)v12, 4, L"よ", L"つ", L"つ");
      v12[28] = 4;
      unsigned int v13 = word_2163CA768;
      uint64_t v14 = 2;
      BOOL v15 = L"日";
      uint64_t v16 = 1;
      uint64_t v17 = L"か";
      uint64_t v18 = 1;
      sub_2161A7800((uint64_t)v19, 4, word_2163CA768, L"日", "X0d0");
      v19[28] = 4;
      unint64_t v20 = word_2163CA768;
      uint64_t v21 = 2;
      uint64_t v22 = &unk_2163CA76E;
      uint64_t v23 = 1;
      unint64_t v24 = word_2163CA6CA;
      uint64_t v25 = 3;
      sub_2161A7800((uint64_t)&v26, 5, word_2163C9CE4, L"つ", L"つ");
      sub_2161A7800((uint64_t)&v27, 5, word_2163C9CE4, L"日", L"か");
      sub_2161A7800((uint64_t)&v28, 5, word_2163C9CE4, word_2163CA772, word_2163CA776);
      sub_2161A7800((uint64_t)&v29, 6, word_2163C9FDE, L"つ", L"つ");
      sub_2161A7800((uint64_t)v30, 6, word_2163CA188, L"つ", L"つ");
      v30[28] = 6;
      uint64_t v31 = &unk_2163CA77C;
      uint64_t v32 = 2;
      unint64_t v33 = L"日";
      uint64_t v34 = 1;
      uint64_t v35 = L"か";
      uint64_t v36 = 1;
      __int16 v37 = 7;
      BOOL v38 = "j0j0";
      uint64_t v39 = 2;
      unint64_t v40 = L"日";
      uint64_t v41 = 1;
      uint8x8_t v42 = L"か";
      uint64_t v43 = 1;
      sub_2161A7800((uint64_t)v44, 8, "o0a0", L"人", word_2163CA75C);
      v44[28] = 8;
      BOOL v45 = "o0a0";
      uint64_t v46 = 2;
      CFIndex v47 = L"日";
      uint64_t v48 = 1;
      uint64_t v49 = L"か";
      uint64_t v50 = 1;
      sub_2161A7800((uint64_t)&v51, 9, word_2163CA6CA, L"日", L"か");
      sub_2161A7800((uint64_t)&v52, 9, word_2163CA6CA, "]u", word_2163CA20C);
      sub_2161A7800((uint64_t)v53, 10, "X0c0", "pe", "Y0F0");
      v53[28] = 10;
      int64_t v54 = "X0c0";
      uint64_t v55 = 2;
      unint64_t v56 = L"日";
      uint64_t v57 = 1;
      unsigned int v58 = L"か";
      uint64_t v59 = 1;
      __int16 v60 = 10;
      uint64_t v61 = word_2163CA6DE;
      uint64_t v62 = 3;
      unint64_t v63 = &unk_2163CA6C6;
      uint64_t v64 = 1;
      unsigned int v65 = "U0d0";
      uint64_t v66 = 2;
      __int16 v67 = 10;
      int v68 = word_2163CA6DE;
      uint64_t v69 = 3;
      int v70 = &unk_2163CA7A2;
      uint64_t v71 = 1;
      int v72 = L"かい";
      uint64_t v73 = 2;
      __int16 v74 = 10;
      int v75 = word_2163CA6DE;
      uint64_t v76 = 3;
      BOOL v77 = &unk_2163CA6D2;
      uint64_t v78 = 1;
      int v79 = &unk_2163CA7A6;
      uint64_t v80 = 2;
      sub_2161A7800((uint64_t)v81, 10, word_2163CA6DE, L"日", L"か");
      v81[28] = 10;
      uint64_t v82 = word_2163CA6DE;
      uint64_t v83 = 3;
      unsigned __int16 v84 = &unk_2163CA70E;
      uint64_t v85 = 2;
      int v86 = &unk_2163CA7AC;
      uint64_t v87 = 4;
      __int16 v88 = 10;
      uint64_t v89 = word_2163CA6DE;
      uint64_t v90 = 3;
      CFIndex v91 = &unk_2163CA7B6;
      uint64_t v92 = 1;
      uint64_t v93 = &unk_2163CA7BA;
      uint64_t v94 = 2;
      __int16 v95 = 10;
      uint64_t v96 = word_2163CA6DE;
      uint64_t v97 = 3;
      unint64_t v98 = &unk_2163CA7C0;
      uint64_t v99 = 1;
      uint64_t v100 = "[0M0";
      uint64_t v101 = 2;
      __int16 v102 = 10;
      int v103 = word_2163CA6DE;
      uint64_t v104 = 3;
      BOOL v105 = &unk_2163CA7CA;
      uint64_t v106 = 1;
      int v107 = &unk_2163CA7CE;
      uint64_t v108 = 3;
      sub_2161A7800((uint64_t)v109, 10, word_2163CA7D6, L"日", L"か");
      v109[28] = 14;
      uint64_t v110 = &word_2163CA7DE;
      uint64_t v111 = 4;
      uint64_t v112 = L"日";
      uint64_t v113 = 1;
      int v114 = L"か";
      uint64_t v115 = 1;
      __int16 v116 = 14;
      CFRange v117 = &word_2163CA7DE;
      uint64_t v118 = 4;
      BOOL v119 = word_2163CA772;
      uint64_t v120 = 1;
      uint64_t v121 = "~0D0";
      uint64_t v122 = 2;
      __int16 v123 = 14;
      BOOL v124 = &unk_2163CA7EE;
      uint64_t v125 = 5;
      v126 = L"日";
      uint64_t v127 = 1;
      v128 = L"か";
      uint64_t v129 = 1;
      __int16 v130 = 20;
      unint64_t v131 = &unk_2163CA6F6;
      uint64_t v132 = 4;
      v133 = L"日";
      uint64_t v134 = 1;
      unsigned int v135 = L"か";
      uint64_t v136 = 1;
      sub_2161A7800((uint64_t)v137, 20, "o0d0", L"日", "k0a0");
      v137[28] = 24;
      v138 = &unk_2163CA800;
      uint64_t v139 = 5;
      unsigned int v140 = L"日";
      uint64_t v141 = 1;
      v142 = L"か";
      uint64_t v143 = 1;
      __int16 v144 = 24;
      double v145 = &unk_2163CA80C;
      uint64_t v146 = 6;
      UChar32 v147 = L"日";
      uint64_t v148 = 1;
      int v149 = L"か";
      uint64_t v150 = 1;
      sub_2161A7890((uint64_t)v0, 40);
      __cxa_atexit((void (*)(void *))sub_2161A77D4, &qword_26797D230, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D1E8);
    }
  }
}

void sub_2161A7260(_Unwind_Exception *a1)
{
}

void sub_2161A7278()
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D1F0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_26797D1F0))
    {
      LOWORD(vsub_216195244(&a9, 0) = 1;
      *((void *)&v0 + 1) = "D0c0";
      uint64_t v1 = 2;
      uint64_t v2 = &unk_2163CA820;
      uint64_t v3 = 2;
      __int16 v4 = 2;
      uint64_t v5 = L"に";
      uint64_t v6 = 1;
      uint64_t v7 = &unk_2163CA09E;
      uint64_t v8 = 1;
      __int16 v9 = 4;
      unint64_t v10 = L"よ";
      uint64_t v11 = 1;
      unsigned int v12 = "J0O0";
      uint64_t v13 = 2;
      __int16 v14 = 4;
      BOOL v15 = L"よ";
      uint64_t v16 = 1;
      uint64_t v17 = &unk_2163CA82C;
      uint64_t v18 = 2;
      __int16 v19 = 4;
      unint64_t v20 = L"よ";
      uint64_t v21 = 1;
      uint64_t v22 = L"ど";
      uint64_t v23 = 1;
      __int16 v24 = 4;
      uint64_t v25 = L"よ";
      uint64_t v26 = 1;
      uint64_t v27 = &unk_2163CA832;
      uint64_t v28 = 3;
      __int16 v29 = 4;
      unint64_t v30 = L"よ";
      uint64_t v31 = 1;
      uint64_t v32 = "~0D0";
      uint64_t v33 = 2;
      __int16 v34 = 4;
      uint64_t v35 = L"よ";
      uint64_t v36 = 1;
      __int16 v37 = L"わ";
      uint64_t v38 = 1;
      __int16 v39 = 4;
      unint64_t v40 = word_2163CA768;
      uint64_t v41 = 2;
      uint8x8_t v42 = &unk_2163C9E54;
      uint64_t v43 = 1;
      __int16 v44 = 9;
      BOOL v45 = word_2163CA6CA;
      uint64_t v46 = 3;
      CFIndex v47 = "Y0F0";
      uint64_t v48 = 2;
      __int16 v49 = 30;
      uint64_t v50 = &unk_2163CA83A;
      uint64_t v51 = 5;
      uint64_t v52 = L"か";
      uint64_t v53 = 1;
      sub_2161A746C((uint64_t **)&qword_26797D248, &v0, 11);
      __cxa_atexit((void (*)(void *))sub_2161A6AB0, &qword_26797D248, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D1F0);
    }
  }
}

void sub_2161A7454(_Unwind_Exception *a1)
{
}

uint64_t **sub_2161A746C(uint64_t **a1, long long *a2, uint64_t a3)
{
  a1[1] = 0;
  __int16 v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = (long long *)((char *)a2 + 40 * a3);
    uint64_t v8 = a1 + 1;
    while (1)
    {
      __int16 v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_17;
      }
      unint64_t v10 = v6;
      uint64_t v11 = v4;
      if (v6)
      {
        do
        {
          __int16 v9 = v10;
          unint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          __int16 v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      if ((sub_2161A7608(v9 + 4, v5) & 0x80) != 0)
      {
LABEL_17:
        if (v6) {
          __int16 v14 = v9;
        }
        else {
          __int16 v14 = v4;
        }
        if (v6) {
          uint64_t v13 = v9 + 1;
        }
        else {
          uint64_t v13 = v4;
        }
        if (*v13) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v13 = v4;
        __int16 v14 = v4;
        if (v6)
        {
          BOOL v15 = v6;
          do
          {
            while (1)
            {
              __int16 v14 = v15;
              uint64_t v16 = v15 + 4;
              if ((sub_2161A7608(v5, v15 + 4) & 0x80) == 0) {
                break;
              }
              BOOL v15 = (uint64_t *)*v14;
              uint64_t v13 = v14;
              if (!*v14) {
                goto LABEL_24;
              }
            }
            if ((sub_2161A7608(v16, v5) & 0x80) == 0) {
              goto LABEL_27;
            }
            BOOL v15 = (uint64_t *)v14[1];
          }
          while (v15);
          uint64_t v13 = v14 + 1;
        }
      }
LABEL_24:
      uint64_t v17 = operator new(0x48uLL);
      long long v18 = *v5;
      long long v19 = v5[1];
      v17[8] = *((void *)v5 + 4);
      *((_OWORD *)v17 + 2) = v18;
      *((_OWORD *)v17 + 3) = v19;
      *uint64_t v17 = 0;
      v17[1] = 0;
      v17[2] = v14;
      uint64_t *v13 = (uint64_t)v17;
      unint64_t v20 = (uint64_t *)**a1;
      if (v20)
      {
        *a1 = v20;
        uint64_t v17 = (void *)*v13;
      }
      sub_21612A6F4(a1[1], v17);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_27:
      uint64_t v5 = (long long *)((char *)v5 + 40);
      if (v5 == v7) {
        return a1;
      }
      uint64_t v8 = (uint64_t **)*a1;
      uint64_t v6 = a1[1];
    }
  }
  return a1;
}

void sub_2161A75F4(_Unwind_Exception *a1)
{
  sub_21619EAB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161A7608(void *a1, void *a2)
{
  unsigned int v2 = *(unsigned __int16 *)a1;
  unsigned int v3 = *(unsigned __int16 *)a2;
  BOOL v4 = v2 == v3;
  if (v2 < v3) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 1;
  }
  if (v4)
  {
    unint64_t v6 = a1[2];
    unint64_t v7 = a2[2];
    if (v7 >= v6) {
      uint64_t v8 = a1[2];
    }
    else {
      uint64_t v8 = a2[2];
    }
    if (v8)
    {
      __int16 v9 = (unsigned __int16 *)a2[1];
      unint64_t v10 = (unsigned __int16 *)a1[1];
      do
      {
        unsigned int v11 = *v10;
        unsigned int v12 = *v9;
        if (v11 < v12) {
          return 255;
        }
        if (v12 < v11) {
          return 1;
        }
        ++v10;
        ++v9;
      }
      while (--v8);
    }
    BOOL v13 = v6 >= v7;
    if (v6 == v7)
    {
      unint64_t v14 = a1[4];
      unint64_t v15 = a2[4];
      if (v15 >= v14) {
        uint64_t v16 = a1[4];
      }
      else {
        uint64_t v16 = a2[4];
      }
      if (v16)
      {
        uint64_t v17 = (unsigned __int16 *)a2[3];
        long long v18 = (unsigned __int16 *)a1[3];
        do
        {
          unsigned int v19 = *v18;
          unsigned int v20 = *v17;
          if (v19 < v20) {
            return 255;
          }
          if (v20 < v19) {
            return 1;
          }
          ++v18;
          ++v17;
        }
        while (--v16);
      }
      BOOL v13 = v14 >= v15;
      if (v14 == v15) {
        return 0;
      }
    }
    if (v13) {
      return 1;
    }
    return 255;
  }
  return v5;
}

uint64_t sub_2161A76DC(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 2 * a3;
    do
    {
      sub_21618FAA0(a1, a2, a2);
      ++a2;
      v5 -= 2;
    }
    while (v5);
  }
  return a1;
}

void sub_2161A7740(_Unwind_Exception *a1)
{
  sub_216144C28(v1);
  _Unwind_Resume(a1);
}

void *sub_2161A7754(uint64_t a1, void *a2)
{
  unsigned int v2 = (void *)(a1 + 8);
  unsigned int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    char v6 = sub_2161A7608(v3 + 4, a2);
    if (v6 >= 0) {
      unint64_t v7 = v3;
    }
    else {
      unint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = v3;
    }
    unsigned int v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_2161A7608(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

uint64_t sub_2161A77D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_2161A7800(uint64_t result, __int16 a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  *(_WORD *)BOOL result = a2;
  *(void *)(result + ++**(_DWORD **)(result + 8) = a3;
  if (*a3)
  {
    uint64_t v5 = 0;
    do
      uint64_t v6 = v5 + 1;
    while (a3[++v5]);
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)(result + 16) = v6;
  *(void *)(result + 24) = a4;
  if (*a4)
  {
    uint64_t v8 = 0;
    do
      uint64_t v9 = v8 + 1;
    while (a4[++v8]);
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(void *)(result + 32) = v9;
  *(void *)(result + 4sub_216195244(&a9, 0) = a5;
  if (*a5)
  {
    uint64_t v11 = 0;
    do
      uint64_t v12 = v11 + 1;
    while (a5[++v11]);
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(void *)(result + 4++**(_DWORD **)(result + 8) = v12;
  return result;
}

uint64_t sub_2161A7890(uint64_t result, uint64_t a2)
{
  qword_26797D240 = 0;
  qword_26797D238 = 0;
  qword_26797D230 = (uint64_t)&qword_26797D238;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = result + 56 * a2;
    uint64_t v5 = &qword_26797D238;
    while (v5 != &qword_26797D238)
    {
      uint64_t v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        uint64_t v8 = &qword_26797D238;
        do
        {
          unint64_t v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          uint64_t v8 = v7;
        }
        while (v9);
      }
      BOOL result = sub_2161A7A40(v7 + 4, (void *)v2);
      if ((result & 0x80) != 0) {
        goto LABEL_19;
      }
      if (v3)
      {
        unint64_t v10 = (uint64_t *)v3;
        do
        {
          while (1)
          {
            unint64_t v7 = v10;
            uint64_t v11 = v10 + 4;
            if ((sub_2161A7A40((void *)v2, v10 + 4) & 0x80) == 0) {
              break;
            }
            unint64_t v10 = (uint64_t *)*v7;
            uint64_t v16 = v7;
            if (!*v7) {
              goto LABEL_23;
            }
          }
          BOOL result = sub_2161A7A40(v11, (void *)v2);
          if ((result & 0x80) == 0) {
            goto LABEL_26;
          }
          unint64_t v10 = (uint64_t *)v7[1];
        }
        while (v10);
        uint64_t v16 = v7 + 1;
        goto LABEL_23;
      }
LABEL_22:
      uint64_t v16 = &qword_26797D238;
      unint64_t v7 = &qword_26797D238;
LABEL_23:
      uint64_t v12 = operator new(0x58uLL);
      long long v13 = *(_OWORD *)v2;
      long long v14 = *(_OWORD *)(v2 + 16);
      long long v15 = *(_OWORD *)(v2 + 32);
      v12[10] = *(void *)(v2 + 48);
      *((_OWORD *)v12 + 3) = v14;
      *((_OWORD *)v12 + 4) = v15;
      *((_OWORD *)v12 + 2) = v13;
      *uint64_t v12 = 0;
      v12[1] = 0;
      v12[2] = v7;
      *uint64_t v16 = (uint64_t)v12;
      if (*(void *)qword_26797D230)
      {
        qword_26797D230 = *(void *)qword_26797D230;
        uint64_t v12 = (void *)*v16;
      }
      BOOL result = (uint64_t)sub_21612A6F4((uint64_t *)qword_26797D238, v12);
      ++qword_26797D240;
LABEL_26:
      v2 += 56;
      if (v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)qword_26797D230;
      uint64_t v3 = qword_26797D238;
    }
    unint64_t v7 = &qword_26797D238;
LABEL_19:
    if (v3)
    {
      uint64_t v16 = v7 + 1;
      if (v7[1]) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_2161A7A2C(_Unwind_Exception *a1)
{
  sub_21619EAB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161A7A40(void *a1, void *a2)
{
  unsigned int v2 = *(unsigned __int16 *)a1;
  unsigned int v3 = *(unsigned __int16 *)a2;
  BOOL v4 = v2 == v3;
  if (v2 < v3) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 1;
  }
  if (v4)
  {
    unint64_t v6 = a1[2];
    unint64_t v7 = a2[2];
    if (v7 >= v6) {
      uint64_t v8 = a1[2];
    }
    else {
      uint64_t v8 = a2[2];
    }
    if (v8)
    {
      BOOL v9 = (unsigned __int16 *)a2[1];
      unint64_t v10 = (unsigned __int16 *)a1[1];
      do
      {
        unsigned int v11 = *v10;
        unsigned int v12 = *v9;
        if (v11 < v12) {
          return 255;
        }
        if (v12 < v11) {
          return 1;
        }
        ++v10;
        ++v9;
      }
      while (--v8);
    }
    BOOL v13 = v6 >= v7;
    if (v6 == v7)
    {
      unint64_t v14 = a1[4];
      unint64_t v15 = a2[4];
      if (v15 >= v14) {
        uint64_t v16 = a1[4];
      }
      else {
        uint64_t v16 = a2[4];
      }
      if (v16)
      {
        uint64_t v17 = (unsigned __int16 *)a2[3];
        long long v18 = (unsigned __int16 *)a1[3];
        do
        {
          unsigned int v19 = *v18;
          unsigned int v20 = *v17;
          if (v19 < v20) {
            return 255;
          }
          if (v20 < v19) {
            return 1;
          }
          ++v18;
          ++v17;
        }
        while (--v16);
      }
      BOOL v13 = v14 >= v15;
      if (v14 == v15)
      {
        unint64_t v21 = a1[6];
        unint64_t v22 = a2[6];
        if (v22 >= v21) {
          uint64_t v23 = a1[6];
        }
        else {
          uint64_t v23 = a2[6];
        }
        if (v23)
        {
          __int16 v24 = (unsigned __int16 *)a2[5];
          uint64_t v25 = (unsigned __int16 *)a1[5];
          do
          {
            unsigned int v26 = *v25;
            unsigned int v27 = *v24;
            if (v26 < v27) {
              return 255;
            }
            if (v27 < v26) {
              return 1;
            }
            ++v25;
            ++v24;
          }
          while (--v23);
        }
        BOOL v13 = v21 >= v22;
        if (v21 == v22) {
          return 0;
        }
      }
    }
    if (v13) {
      return 1;
    }
    return 255;
  }
  return v5;
}

uint64_t sub_2161A7B5C(uint64_t a1)
{
  return a1;
}

uint64_t sub_2161A7B88(uint64_t result, uint64_t a2)
{
  qword_26797D270 = 0;
  qword_26797D268 = 0;
  qword_26797D260 = (uint64_t)&qword_26797D268;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = result + 32 * a2;
    uint64_t v5 = &qword_26797D268;
    while (v5 != &qword_26797D268)
    {
      unint64_t v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          unint64_t v7 = v6;
          unint64_t v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        uint64_t v8 = &qword_26797D268;
        do
        {
          unint64_t v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          uint64_t v8 = v7;
        }
        while (v9);
      }
      BOOL result = sub_2161A7D24((unsigned __int16 **)v7 + 4, (unsigned __int16 **)v2);
      if ((result & 0x80) != 0) {
        goto LABEL_19;
      }
      if (v3)
      {
        uint64_t v10 = v3;
        do
        {
          while (1)
          {
            unint64_t v7 = (uint64_t *)v10;
            unsigned int v11 = (unsigned __int16 **)(v10 + 32);
            if ((sub_2161A7D24((unsigned __int16 **)v2, (unsigned __int16 **)(v10 + 32)) & 0x80) == 0) {
              break;
            }
            uint64_t v10 = *v7;
            unint64_t v14 = v7;
            if (!*v7) {
              goto LABEL_23;
            }
          }
          BOOL result = sub_2161A7D24(v11, (unsigned __int16 **)v2);
          if ((result & 0x80) == 0) {
            goto LABEL_26;
          }
          uint64_t v10 = v7[1];
        }
        while (v10);
        unint64_t v14 = v7 + 1;
        goto LABEL_23;
      }
LABEL_22:
      unint64_t v14 = &qword_26797D268;
      unint64_t v7 = &qword_26797D268;
LABEL_23:
      unsigned int v12 = operator new(0x40uLL);
      long long v13 = *(_OWORD *)(v2 + 16);
      v12[2] = *(_OWORD *)v2;
      void v12[3] = v13;
      *(void *)unsigned int v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = v7;
      *unint64_t v14 = (uint64_t)v12;
      if (*(void *)qword_26797D260)
      {
        qword_26797D260 = *(void *)qword_26797D260;
        unsigned int v12 = (_OWORD *)*v14;
      }
      BOOL result = (uint64_t)sub_21612A6F4((uint64_t *)qword_26797D268, (uint64_t *)v12);
      ++qword_26797D270;
LABEL_26:
      v2 += 32;
      if (v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)qword_26797D260;
      uint64_t v3 = qword_26797D268;
    }
    unint64_t v7 = &qword_26797D268;
LABEL_19:
    if (v3)
    {
      unint64_t v14 = v7 + 1;
      if (v7[1]) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_2161A7D10(_Unwind_Exception *a1)
{
  sub_21619EAB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161A7D24(unsigned __int16 **a1, unsigned __int16 **a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (v3 >= v2) {
    uint64_t v4 = a1[1];
  }
  else {
    uint64_t v4 = a2[1];
  }
  if (v4)
  {
    uint64_t v5 = *a2;
    unint64_t v6 = *a1;
    do
    {
      unsigned int v7 = *v6;
      unsigned int v8 = *v5;
      if (v7 < v8) {
        return 255;
      }
      if (v8 < v7) {
        return 1;
      }
      ++v6;
      ++v5;
      uint64_t v4 = (unsigned __int16 *)((char *)v4 - 1);
    }
    while (v4);
  }
  BOOL v9 = v2 >= v3;
  if (v2 == v3)
  {
    uint64_t v10 = a1[3];
    unsigned int v11 = a2[3];
    if (v11 >= v10) {
      unsigned int v12 = a1[3];
    }
    else {
      unsigned int v12 = a2[3];
    }
    if (v12)
    {
      long long v13 = a2[2];
      unint64_t v14 = a1[2];
      do
      {
        unsigned int v15 = *v14;
        unsigned int v16 = *v13;
        if (v15 < v16) {
          return 255;
        }
        if (v16 < v15) {
          return 1;
        }
        ++v14;
        ++v13;
        unsigned int v12 = (unsigned __int16 *)((char *)v12 - 1);
      }
      while (v12);
    }
    BOOL v9 = v10 >= v11;
    if (v10 == v11) {
      return 0;
    }
  }
  if (!v9) {
    return 255;
  }
  return 1;
}

uint64_t sub_2161A7DD8(uint64_t a1)
{
  return a1;
}

void *sub_2161A7E04(void *result, _WORD *a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  void *result = a2;
  if (*a2)
  {
    uint64_t v5 = 0;
    do
      uint64_t v6 = v5 + 1;
    while (a2[++v5]);
  }
  else
  {
    uint64_t v6 = 0;
  }
  result[1] = v6;
  result[2] = a3;
  if (*a3)
  {
    uint64_t v8 = 0;
    do
      uint64_t v9 = v8 + 1;
    while (a3[++v8]);
  }
  else
  {
    uint64_t v9 = 0;
  }
  result[3] = v9;
  result[4] = a4;
  if (*a4)
  {
    uint64_t v11 = 0;
    do
      uint64_t v12 = v11 + 1;
    while (a4[++v11]);
  }
  else
  {
    uint64_t v12 = 0;
  }
  result[5] = v12;
  result[6] = a5;
  if (*a5)
  {
    uint64_t v14 = 0;
    do
      uint64_t v15 = v14 + 1;
    while (a5[++v14]);
  }
  else
  {
    uint64_t v15 = 0;
  }
  result[7] = v15;
  return result;
}

uint64_t sub_2161A7EBC(uint64_t result, uint64_t a2)
{
  qword_26797D288 = 0;
  qword_26797D280 = 0;
  qword_26797D278 = (uint64_t)&qword_26797D280;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = result + (a2 << 6);
    uint64_t v5 = &qword_26797D280;
    while (v5 != &qword_26797D280)
    {
      uint64_t v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          unsigned int v7 = v6;
          uint64_t v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        uint64_t v8 = &qword_26797D280;
        do
        {
          unsigned int v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          uint64_t v8 = v7;
        }
        while (v9);
      }
      BOOL result = sub_2161A8060((unsigned __int16 **)v7 + 4, (unsigned __int16 **)v2);
      if ((result & 0x80) != 0) {
        goto LABEL_19;
      }
      if (v3)
      {
        uint64_t v10 = v3;
        do
        {
          while (1)
          {
            unsigned int v7 = (uint64_t *)v10;
            uint64_t v11 = (unsigned __int16 **)(v10 + 32);
            if ((sub_2161A8060((unsigned __int16 **)v2, (unsigned __int16 **)(v10 + 32)) & 0x80) == 0) {
              break;
            }
            uint64_t v10 = *v7;
            unsigned int v16 = v7;
            if (!*v7) {
              goto LABEL_23;
            }
          }
          BOOL result = sub_2161A8060(v11, (unsigned __int16 **)v2);
          if ((result & 0x80) == 0) {
            goto LABEL_26;
          }
          uint64_t v10 = v7[1];
        }
        while (v10);
        unsigned int v16 = v7 + 1;
        goto LABEL_23;
      }
LABEL_22:
      unsigned int v16 = &qword_26797D280;
      unsigned int v7 = &qword_26797D280;
LABEL_23:
      uint64_t v12 = operator new(0x60uLL);
      long long v13 = *(_OWORD *)v2;
      long long v14 = *(_OWORD *)(v2 + 16);
      long long v15 = *(_OWORD *)(v2 + 48);
      v12[4] = *(_OWORD *)(v2 + 32);
      void v12[5] = v15;
      v12[2] = v13;
      void v12[3] = v14;
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = v7;
      *unsigned int v16 = (uint64_t)v12;
      if (*(void *)qword_26797D278)
      {
        qword_26797D278 = *(void *)qword_26797D278;
        uint64_t v12 = (_OWORD *)*v16;
      }
      BOOL result = (uint64_t)sub_21612A6F4((uint64_t *)qword_26797D280, (uint64_t *)v12);
      ++qword_26797D288;
LABEL_26:
      v2 += 64;
      if (v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)qword_26797D278;
      uint64_t v3 = qword_26797D280;
    }
    unsigned int v7 = &qword_26797D280;
LABEL_19:
    if (v3)
    {
      unsigned int v16 = v7 + 1;
      if (v7[1]) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_2161A804C(_Unwind_Exception *a1)
{
  sub_21619EAB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161A8060(unsigned __int16 **a1, unsigned __int16 **a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (v3 >= v2) {
    uint64_t v4 = a1[1];
  }
  else {
    uint64_t v4 = a2[1];
  }
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = *a1;
    do
    {
      unsigned int v7 = *v6;
      unsigned int v8 = *v5;
      if (v7 < v8) {
        return 255;
      }
      if (v8 < v7) {
        return 1;
      }
      ++v6;
      ++v5;
      uint64_t v4 = (unsigned __int16 *)((char *)v4 - 1);
    }
    while (v4);
  }
  BOOL v9 = v2 >= v3;
  if (v2 == v3)
  {
    uint64_t v10 = a1[3];
    uint64_t v11 = a2[3];
    if (v11 >= v10) {
      uint64_t v12 = a1[3];
    }
    else {
      uint64_t v12 = a2[3];
    }
    if (v12)
    {
      long long v13 = a2[2];
      long long v14 = a1[2];
      do
      {
        unsigned int v15 = *v14;
        unsigned int v16 = *v13;
        if (v15 < v16) {
          return 255;
        }
        if (v16 < v15) {
          return 1;
        }
        ++v14;
        ++v13;
        uint64_t v12 = (unsigned __int16 *)((char *)v12 - 1);
      }
      while (v12);
    }
    BOOL v9 = v10 >= v11;
    if (v10 == v11)
    {
      uint64_t v17 = a1[5];
      long long v18 = a2[5];
      if (v18 >= v17) {
        unsigned int v19 = a1[5];
      }
      else {
        unsigned int v19 = a2[5];
      }
      if (v19)
      {
        unsigned int v20 = a2[4];
        unint64_t v21 = a1[4];
        do
        {
          unsigned int v22 = *v21;
          unsigned int v23 = *v20;
          if (v22 < v23) {
            return 255;
          }
          if (v23 < v22) {
            return 1;
          }
          ++v21;
          ++v20;
          unsigned int v19 = (unsigned __int16 *)((char *)v19 - 1);
        }
        while (v19);
      }
      BOOL v9 = v17 >= v18;
      if (v17 == v18)
      {
        __int16 v24 = a1[7];
        uint64_t v25 = a2[7];
        if (v25 >= v24) {
          unsigned int v26 = a1[7];
        }
        else {
          unsigned int v26 = a2[7];
        }
        if (v26)
        {
          unsigned int v27 = a2[6];
          uint64_t v28 = a1[6];
          do
          {
            unsigned int v29 = *v28;
            unsigned int v30 = *v27;
            if (v29 < v30) {
              return 255;
            }
            if (v30 < v29) {
              return 1;
            }
            ++v28;
            ++v27;
            unsigned int v26 = (unsigned __int16 *)((char *)v26 - 1);
          }
          while (v26);
        }
        BOOL v9 = v24 >= v25;
        if (v24 == v25) {
          return 0;
        }
      }
    }
  }
  if (!v9) {
    return 255;
  }
  return 1;
}

uint64_t sub_2161A81AC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_2161A81D8(uint64_t *result, uint64_t a2)
{
  qword_26797D2A0 = 0;
  qword_26797D298 = 0;
  qword_26797D290 = (uint64_t)&qword_26797D298;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = &result[2 * a2];
    uint64_t v5 = &qword_26797D298;
    while (1)
    {
      if (v5 == &qword_26797D298)
      {
        unsigned int v7 = &qword_26797D298;
LABEL_19:
        if (v3)
        {
          uint64_t v17 = v7 + 1;
          long long v18 = (uint64_t *)v7[1];
          goto LABEL_44;
        }
LABEL_42:
        uint64_t v17 = &qword_26797D298;
        long long v18 = &qword_26797D298;
        goto LABEL_45;
      }
      uint64_t v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          unsigned int v7 = v6;
          uint64_t v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        unsigned int v8 = &qword_26797D298;
        do
        {
          unsigned int v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          unsigned int v8 = v7;
        }
        while (v9);
      }
      unint64_t v10 = v2[1];
      unint64_t v11 = v7[5];
      if (v10 >= v11) {
        uint64_t v12 = v7[5];
      }
      else {
        uint64_t v12 = v2[1];
      }
      if (v12)
      {
        long long v13 = (unsigned __int16 *)v7[4];
        long long v14 = (unsigned __int16 *)*v2;
        do
        {
          unsigned int v15 = *v13;
          unsigned int v16 = *v14;
          if (v15 < v16) {
            goto LABEL_19;
          }
          if (v16 < v15) {
            goto LABEL_21;
          }
          ++v13;
          ++v14;
        }
        while (--v12);
      }
      if (v11 < v10) {
        goto LABEL_19;
      }
LABEL_21:
      if (!v3) {
        goto LABEL_42;
      }
      unsigned int v19 = (uint64_t *)v3;
      uint64_t v17 = &qword_26797D298;
      while (1)
      {
        while (1)
        {
          long long v18 = v19;
          unsigned int v20 = (unsigned __int16 *)v19[4];
          unint64_t v21 = v18[5];
          if (v21 >= v10) {
            uint64_t v22 = v2[1];
          }
          else {
            uint64_t v22 = v18[5];
          }
          if (v22)
          {
            uint64_t v23 = v22;
            __int16 v24 = v20;
            uint64_t v25 = (unsigned __int16 *)*v2;
            do
            {
              unsigned int v26 = *v25;
              unsigned int v27 = *v24;
              if (v26 < v27) {
                goto LABEL_32;
              }
              if (v27 < v26) {
                goto LABEL_34;
              }
              ++v25;
              ++v24;
            }
            while (--v23);
          }
          if (v21 <= v10) {
            break;
          }
LABEL_32:
          unsigned int v19 = (uint64_t *)*v18;
          uint64_t v17 = v18;
          if (!*v18) {
            goto LABEL_45;
          }
        }
LABEL_34:
        if (v22)
        {
          uint64_t v28 = (unsigned __int16 *)*v2;
          do
          {
            unsigned int v29 = *v20;
            unsigned int v30 = *v28;
            if (v29 < v30) {
              goto LABEL_40;
            }
            if (v30 < v29) {
              goto LABEL_43;
            }
            ++v20;
            ++v28;
          }
          while (--v22);
        }
        if (v21 >= v10) {
          break;
        }
LABEL_40:
        uint64_t v17 = v18 + 1;
        unsigned int v19 = (uint64_t *)v18[1];
        if (!v19) {
          goto LABEL_45;
        }
      }
LABEL_43:
      unsigned int v7 = v18;
LABEL_44:
      uint64_t v31 = v18;
      long long v18 = v7;
      if (!v31)
      {
LABEL_45:
        uint64_t v32 = operator new(0x30uLL);
        v32[2] = *(_OWORD *)v2;
        *(void *)uint64_t v32 = 0;
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = v18;
        *uint64_t v17 = (uint64_t)v32;
        if (*(void *)qword_26797D290)
        {
          qword_26797D290 = *(void *)qword_26797D290;
          uint64_t v32 = (_OWORD *)*v17;
        }
        BOOL result = sub_21612A6F4((uint64_t *)qword_26797D298, (uint64_t *)v32);
        ++qword_26797D2A0;
      }
      v2 += 2;
      if (v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)qword_26797D290;
      uint64_t v3 = qword_26797D298;
    }
  }
  return result;
}

void sub_2161A8410(_Unwind_Exception *a1)
{
  sub_21619EAB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161A8424(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6BDA58;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = a2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  CFStringRef v3 = (const __CFString *)sub_2161ADE7C(a2);
  *(unsigned char *)(a1 + 64) = CFEqual(v3, @"NumberValue.index");
  return a1;
}

void sub_2161A8494(_Unwind_Exception *a1)
{
  sub_2161AF9AC(v1);
  _Unwind_Resume(a1);
}

void sub_2161A84AC(uint64_t a1)
{
  sub_2161AF9AC(a1);

  JUMPOUT(0x2166CA800);
}

BOOL sub_2161A84E4(void *a1, void *__src, unint64_t a3, const void *a4)
{
  unsigned int v8 = (void *)a1[4];
  if (!v8) {
    operator new[]();
  }
  if (a3 <= 0x80)
  {
    a1[5] = a3;
    memcpy(v8, __src, 2 * a3);
    a1[3] = CFRetain(a4);
    BOOL v9 = (const void *)a1[7];
    if (v9) {
      CFRelease(v9);
    }
    CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)__src, 2 * a3, 0x100u, 0);
    a1[6] = 0;
    a1[7] = v10;
  }
  return a3 < 0x81;
}

uint64_t sub_2161A859C()
{
  return 0;
}

uint64_t sub_2161A85A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  uint64_t result = 0;
  *a6 = 0;
  if (*(uint64_t *)(a1 + 48) > 0) {
    return result;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v10 = a3 - 4;
    *a4 = a3 - 4;
    a4[1] = 4;
    if (CFEqual(*(CFStringRef *)(a1 + 56), @"openCount"))
    {
      int v12 = 0;
      goto LABEL_13;
    }
    if (CFEqual(*(CFStringRef *)(a1 + 56), @"initiallyOpenedCallCount"))
    {
      int v12 = dword_26797D388;
      goto LABEL_13;
    }
    CFComparisonResult v11 = CFStringCompare(*(CFStringRef *)(a1 + 56), @"lastlyClosedCallCount", 0);
    uint64_t result = 0;
    if (v11 == kCFCompareEqualTo)
    {
      int v12 = dword_26797D38C;
LABEL_13:
      *(_DWORD *)((char *)a4 + v1sub_216195244(&a9, 0) = v12;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = a3 - 2 * v13;
    *a4 = v14 - 2;
    a4[1] = 2 * v13 + 2;
    *(_WORD *)((char *)a4 + v14 - 2) = 2 * v13;
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15 < 1)
    {
LABEL_14:
      uint64_t result = 1;
      goto LABEL_15;
    }
    unsigned int v16 = (_WORD *)((char *)a4 + v14);
    uint64_t v17 = *(void *)(a1 + 32) - 2;
    uint64_t result = 1;
    do
      *v16++ = *(_WORD *)(v17 + 2 * v15--);
    while (v15);
  }
LABEL_15:
  if (a5) {
    *a5 = a4;
  }
  *(void *)(a1 + 48) += result;
  return result;
}

uint64_t sub_2161A86D0()
{
  return 0;
}

uint64_t sub_2161A86D8()
{
  return 0;
}

uint64_t sub_2161A86E0()
{
  return 0;
}

uint64_t sub_2161A86E8()
{
  return 0;
}

uint64_t sub_2161A86F0()
{
  return 0;
}

BOOL sub_2161A86F8(uint64_t a1)
{
  uint64_t v2 = CFWriteStreamCreateWithFile(0, *(CFURLRef *)a1);
  if (!v2) {
    return 0;
  }
  CFStringRef v3 = v2;
  if (CFWriteStreamOpen(v2))
  {
    CFIndex v4 = CFPropertyListWriteToStream(*(CFPropertyListRef *)(a1 + 8), v3, kCFPropertyListXMLFormat_v1_0, 0);
    CFWriteStreamClose(v3);
    BOOL v5 = v4 > 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  CFRelease(v3);
  return v5;
}

uint64_t sub_2161A8778(uint64_t a1, int a2)
{
  if (a2) {
    ++dword_26797D388;
  }
  return 1;
}

void sub_2161A8794(uint64_t a1, int a2)
{
  if (a2) {
    ++dword_26797D38C;
  }
}

uint64_t sub_2161A87AC()
{
  return 0;
}

uint64_t sub_2161A87B4(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 416))(v7) & 0x4000) == 0) {
        return 0;
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 416))(v7) & 0x8000) != 0) {
        CFDictionaryAddValue(a2, @"pinyin10KeySyllableSelected", (const void *)*MEMORY[0x263EFFB40]);
      }
      uint64_t v8 = *(void *)(a1 + 32);
      if (!v8) {
        sub_21610B7AC();
      }
      v10[0] = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
      v10[1] = 4;
      CFStringRef v9 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)lpsrc + 56))(lpsrc);
      if (sub_216333B8C((uint64_t)v10, v9)) {
        CFDictionaryAddValue(a2, @"pinyin10KeyFlickInput", (const void *)*MEMORY[0x263EFFB40]);
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_2161A8968(uint64_t a1)
{
  return a1;
}

void sub_2161A8994(uint64_t a1)
{
  sub_2161A0A5C((void *)(a1 + 8));

  JUMPOUT(0x2166CA800);
}

void sub_2161A89E0(void *a1, const __CFString *a2, const __CFString *a3, int a4)
{
  *a1 = &unk_26C6BE7D0;
  uint64_t v6 = (void *)sub_21622CBE0((uint64_t)a1, (uint64_t *)&off_26C6BCD68, a2, a3, a4);
  void *v6 = off_26C6BE450;
  v6[15] = &off_26C6BE698;
  a1[22] = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  a1[23] = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  a1[24] = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  sub_2161E236C(a3);
}

void sub_2161A8B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2161E9144(v16, (uint64_t *)&off_26C6BCD70);
  _Unwind_Resume(a1);
}

uint64_t *sub_2161A8BE4(uint64_t a1)
{
  *(void *)a1 = off_26C6BE450;
  *(void *)(a1 + 12sub_216195244(&a9, 0) = &off_26C6BE698;
  CFRelease(*(CFTypeRef *)(a1 + 176));
  CFRelease(*(CFTypeRef *)(a1 + 184));
  CFRelease(*(CFTypeRef *)(a1 + 192));

  return sub_2161E9144((uint64_t *)a1, (uint64_t *)&off_26C6BCD70);
}

void sub_2161A8C7C(uint64_t a1)
{
  sub_2161A8BE4(a1);

  JUMPOUT(0x2166CA800);
}

__CFString *sub_2161A8CB4(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 192)) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 192), v3);
      __int16 valuePtr = 0;
      if (CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr)) {
        CFStringAppendFormat(Mutable, 0, @"%d", valuePtr);
      }
      ++v3;
    }
    while (v3 < CFArrayGetCount(*(CFArrayRef *)(a1 + 192)));
  }
  return Mutable;
}

void sub_2161A8D60()
{
}

void sub_2161A8D7C()
{
}

void sub_2161A8E5C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40BE1B2566);
  _Unwind_Resume(a1);
}

uint64_t *sub_2161A8E80(uint64_t *a1)
{
  return sub_2161E9144(a1, (uint64_t *)&off_26C6BCCB8);
}

void sub_2161A8E90(uint64_t *a1)
{
  sub_2161E9144(a1, (uint64_t *)&off_26C6BCCB8);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161A8ED4(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t sub_2161A8EDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_2161A8F00()
{
  return 0;
}

unint64_t sub_2161A8F08(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3);
}

uint64_t sub_2161A8F24(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_2161A8F2C()
{
  return 1;
}

uint64_t sub_2161A8F34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 89);
}

uint64_t sub_2161A8F3C()
{
  return 1;
}

uint64_t sub_2161A8F44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_2161A8F4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_2161A8F54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_2161A8F5C()
{
  return 0;
}

uint64_t sub_2161A8F64(uint64_t a1)
{
  CFStringRef v1 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);

  return sub_2161E539C(v1);
}

uint64_t sub_2161A8FAC()
{
  return 0;
}

uint64_t sub_2161A8FB4()
{
  return 0;
}

uint64_t sub_2161A8FBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

uint64_t sub_2161A8FC4()
{
  return 0;
}

uint64_t sub_2161A8FCC()
{
  return 0;
}

uint64_t sub_2161A8FD4()
{
  return 1;
}

uint64_t sub_2161A8FDC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 90);
}

uint64_t sub_2161A8FE4()
{
  return 0;
}

uint64_t sub_2161A8FEC()
{
  return 0;
}

uint64_t sub_2161A8FF4()
{
  return 0;
}

uint64_t sub_2161A8FFC(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1) >> 20) & 1;
}

uint64_t sub_2161A9038()
{
  return 0;
}

uint64_t sub_2161A9040(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_2161A9048(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 312))();
}

uint64_t sub_2161A9074()
{
  return 0;
}

uint64_t sub_2161A907C()
{
  return 0;
}

uint64_t sub_2161A9084()
{
  return 0;
}

uint64_t sub_2161A908C()
{
  return 0;
}

uint64_t sub_2161A9094()
{
  return 0;
}

uint64_t sub_2161A909C()
{
  return -1;
}

uint64_t sub_2161A90A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t sub_2161A90AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

double sub_2161A90B4(uint64_t a1)
{
  return *(double *)(a1 + 80);
}

uint64_t sub_2161A90BC(uint64_t result, double a2)
{
  *(double *)(result + 8sub_216195244(&a9, 0) = a2;
  return result;
}

uint64_t sub_2161A90C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_2161A90CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void sub_2161A90D4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_2161A90E0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_2161A90EC()
{
  return 0;
}

uint64_t sub_2161A90F4()
{
  return 0;
}

uint64_t sub_2161A90FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t sub_2161A9104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

uint64_t sub_2161A910C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 89) = a2;
  return result;
}

uint64_t sub_2161A9114(uint64_t result, char a2)
{
  *(unsigned char *)(result + 91) = a2;
  return result;
}

uint64_t sub_2161A9120()
{
  return 1;
}

uint64_t sub_2161A9128()
{
  return 0;
}

uint64_t sub_2161A9130()
{
  return 0;
}

uint64_t sub_2161A9140()
{
  return 0;
}

uint64_t sub_2161A9148()
{
  return 0;
}

uint64_t sub_2161A9150()
{
  return 0;
}

uint64_t sub_2161A9158()
{
  return 0;
}

void sub_2161A9168()
{
}

void sub_2161A91B0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A0C40A1EC6FE4);
  _Unwind_Resume(a1);
}

CFIndex sub_2161A91D4(CFIndex result, CFArrayRef theArray, CFIndex a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 24))
    {
      uint64_t result = CFArrayGetCount(theArray);
      if (result >= a3)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
        id v8 = *(id *)(v3 + 8);
        if (!v8)
        {
          id v8 = objc_alloc_init(MEMORY[0x263EFF9A0]);
          *(void *)(v3 + ++**(_DWORD **)(result + 8) = v8;
        }
        CFStringRef v9 = [v8 objectForKey:v6];
        int v12 = NSNumber;
        if (v9)
        {
          uint64_t v13 = [v9 integerValue:v10, v11] + 1;
          uint64_t v15 = [v12 numberWithInteger:v14];
        }
        else
        {
          uint64_t v15 = [NSNumber numberWithInteger:v10];
        }
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)(v3 + 8);
        return MEMORY[0x270F9A6D0](v17, sel_setObject_forKey_, v16);
      }
    }
  }
  return result;
}

uint64_t sub_2161A92A0(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v3 = result;
    if (objc_msgSend_count(*(void **)(result + 8), a2, a3))
    {
      uint64_t v10 = [*(void **)(v3 + 8) keysSortedByValueUsingComparator:v4];
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v12 = [v10 countByEnumeratingWithState:v11 objects:&v31 count:16];
      if (v12)
      {
        uint64_t v14 = v12;
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)v32;
        do
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v32 != v16) {
              objc_enumerationMutation(v10);
            }
            long long v18 = *(void **)(*((void *)&v31 + 1) + 8 * i);
            unsigned int v19 = [(id)[v3 + 8] objectForKey:v13];
            v15 += [v19 integerValue:v20, v21];
            uint64_t v22 = *(void *)v3;
            uint64_t v25 = [v18 v23:v24];
            sub_216276FA0(v22, 0x200000u, (uint64_t)"%s : %ld\n", v26, v27, v28, v29, v30, v25);
          }
          uint64_t v14 = [v10 countByEnumeratingWithState:v13 objects:(id *)&v31 count:v35];
        }
        while (v14);
      }
    }
    return sub_216276FA0(*(void *)v3, 0x200000u, (uint64_t)"Token count: %ld, UNK count = %ld\n", v5, v6, v7, v8, v9, *(void *)(v3 + 16));
  }
  return result;
}

void sub_2161A941C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v8 = sub_216308A2C(a2, a3);
    uint64_t v9 = &off_26797B8D0;
    uint64_t v10 = *(void *)a1;
    if (!a4) {
      uint64_t v9 = &off_26797B8D8;
    }
    char v11 = [*v9 UTF8String];
    [v8 v12 v13];
    sub_21627707C(v10, "%s:%s\n", v14, v15, v16, v17, v18, v19, v11);
    CFRelease(v8);
  }
}

uint64_t sub_2161A94D4(uint64_t a1)
{
  uint64_t v2 = sub_2162769A4();
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v2;
  BOOL v3 = *v2 && (v2[10] & 0x20) != 0 || *((_DWORD *)v2 + 1) < 8u;
  *(unsigned char *)(a1 + 24) = v3;
  return a1;
}

uint64_t sub_2161A952C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = [a2 integerValue];
  if (v5 > objc_msgSend_integerValue(a3, v6, v7)) {
    return -1;
  }
  uint64_t v11 = [a2 integerValueForComponent:v8];
  return v11 < [a3 integerValue];
}

void sub_2161A9598(uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    JUMPOUT(0x2166CA800);
  }
}

UInt8 *sub_2161A95F8(const __CFString *a1, CFStringEncoding a2, unint64_t *a3)
{
  if (a1)
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex usedBufLen = 0;
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, a2);
    uint64_t v8 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0xFCECAB9AuLL);
    v11.location = 0;
    v11.length = Length;
    CFStringGetBytes(a1, v11, a2, 0, 0, v8, MaximumSizeForEncoding, &usedBufLen);
    if (a3) {
      *a3 = (unint64_t)usedBufLen >> 1;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (a3) {
      *a3 = 0;
    }
  }
  return v8;
}

char *sub_2161A96B4(const __CFURL *a1)
{
  CFURLRef v1 = CFURLCopyAbsoluteURL(a1);
  CFStringRef v2 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  CFRelease(v1);
  if (!v2) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(v2);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  uint64_t v5 = (char *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x31523115uLL);
  LODWORD(MaximumSizeForEncoding) = CFStringGetFileSystemRepresentation(v2, v5, MaximumSizeForEncoding);
  CFRelease(v2);
  if (!MaximumSizeForEncoding)
  {
    free(v5);
    return 0;
  }
  return v5;
}

CFURLRef sub_2161A9754(CFURLRef url, CFStringRef pathComponent)
{
  if (pathComponent) {
    return CFURLCreateCopyAppendingPathComponent(0, url, pathComponent, 0);
  }
  else {
    return (CFURLRef)CFRetain(url);
  }
}

CFBundleRef sub_2161A9774(const __CFURL *a1)
{
  CFStringRef PathComponent = CFURLCopyLastPathComponent(a1);
  if (CFEqual(PathComponent, @"/"))
  {
    CFBundleRef v7 = 0;
LABEL_10:
    CFRelease(PathComponent);
    return v7;
  }
  char v3 = 0;
  CFStringRef v4 = PathComponent;
  CFStringRef PathComponent = (CFStringRef)a1;
  while (1)
  {
    CFComparisonResult v5 = CFStringCompare(v4, @"Contents", 0);
    CFRelease(v4);
    CFURLRef v6 = CFURLCreateCopyDeletingLastPathComponent(0, (CFURLRef)PathComponent);
    if (v5 == kCFCompareEqualTo) {
      break;
    }
    if (v3) {
      CFRelease(PathComponent);
    }
    CFStringRef v4 = CFURLCopyLastPathComponent(v6);
    char v3 = 1;
    CFStringRef PathComponent = (CFStringRef)v6;
    if (CFEqual(v4, @"/"))
    {
      CFRelease(v4);
      CFBundleRef v7 = 0;
      CFStringRef PathComponent = (CFStringRef)v6;
      goto LABEL_10;
    }
  }
  CFBundleRef v7 = CFBundleCreate(0, v6);
  CFRelease(v6);
  if (v3) {
    goto LABEL_10;
  }
  return v7;
}

DIR *sub_2161A9888(DIR *result)
{
  if (result)
  {
    CFURLRef v1 = (const std::__fs::filesystem::path *)result;
    memset(&v10, 0, sizeof(v10));
    if (lstat((const char *)result, &v10) < 0)
    {
      return 0;
    }
    else if ((v10.st_mode & 0xF000) == 0x4000)
    {
      uint64_t result = opendir((const char *)v1);
      if (result)
      {
        char v3 = result;
        size_t v4 = strlen((const char *)v1) + 256;
        CFComparisonResult v5 = (char *)malloc_type_malloc(v4, 0x227CDEFCuLL);
        strlcpy(v5, (const char *)v1, v4);
        size_t v6 = strlen((const char *)v1);
        *(_WORD *)&v5[v6] = 47;
        CFBundleRef v7 = &v5[v6 + 1];
        while (1)
        {
          uint64_t v8 = readdir(v3);
          if (!v8) {
            break;
          }
          d_name = v8->d_name;
          if (strcmp(v8->d_name, "."))
          {
            if (strcmp(d_name, ".."))
            {
              strlcpy(v7, d_name, 0x100uLL);
              if (!sub_2161A9888(v5))
              {
                free(v5);
                closedir(v3);
                return 0;
              }
            }
          }
        }
        free(v5);
        closedir(v3);
        return (DIR *)(rmdir((const char *)v1) >= 0);
      }
    }
    else
    {
      return (DIR *)!remove(v1, v2);
    }
  }
  return result;
}

void *sub_2161A99FC(int a1, uint64_t a2, int a3, void *a4)
{
  size_t v4 = sub_2161A9B10;
  switch(a1)
  {
    case 0:
      CFComparisonResult v5 = sub_2161A9B08;
      if (a4)
      {
        *a4 = a2;
        CFComparisonResult v5 = sub_2161A9B08;
      }
      goto LABEL_6;
    case 1:
      return v4;
    case 2:
      BOOL v6 = a3 == 0;
      size_t v4 = sub_2161A9B20;
      CFBundleRef v7 = sub_2161A9B38;
      goto LABEL_9;
    case 4:
      BOOL v6 = a3 == 0;
      size_t v4 = sub_2161A9B48;
      CFBundleRef v7 = sub_2161A9B5C;
      goto LABEL_9;
    case 8:
      BOOL v6 = a3 == 0;
      size_t v4 = sub_2161A9B6C;
      CFBundleRef v7 = sub_2161A9B80;
LABEL_9:
      if (v6) {
        size_t v4 = v7;
      }
      break;
    default:
      CFComparisonResult v5 = sub_2161A9B90;
LABEL_6:
      size_t v4 = v5;
      break;
  }
  return v4;
}

void sub_2161A9B08(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
}

uint64_t sub_2161A9B10(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  *a3 = 1;
  return *a2;
}

uint64_t sub_2161A9B20(uint64_t a1, unsigned __int16 *a2, unsigned char *a3)
{
  *a3 = 2;
  return bswap32(*a2) >> 16;
}

uint64_t sub_2161A9B38(uint64_t a1, unsigned __int16 *a2, unsigned char *a3)
{
  *a3 = 2;
  return *a2;
}

uint64_t sub_2161A9B48(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  *a3 = 4;
  return bswap32(*a2);
}

uint64_t sub_2161A9B5C(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  *a3 = 4;
  return *a2;
}

unint64_t sub_2161A9B6C(uint64_t a1, unint64_t *a2, unsigned char *a3)
{
  *a3 = 8;
  return bswap64(*a2);
}

uint64_t sub_2161A9B80(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 8;
  return *(void *)a2;
}

uint64_t sub_2161A9B90(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  return 0;
}

unsigned char *sub_2161A9B9C(const void *a1, size_t a2, unsigned int a3, int a4, size_t *a5)
{
  if (a3)
  {
    size_t v10 = a2 + a3;
    CFRange v11 = malloc_type_malloc(v10, 0xADE06197uLL);
    memcpy(&v11[a3], a1, a2);
    *a5 = v10;
    sub_2161A9C38(v11, a2, a3, a4);
    return v11;
  }
  else
  {
    *a5 = a2;
  }
  return a1;
}

unsigned char *sub_2161A9C38(unsigned char *result, unint64_t a2, int a3, int a4)
{
  switch(a3)
  {
    case 1:
      void *result = a2;
      break;
    case 2:
      if (a4) {
        *(_WORD *)uint64_t result = bswap32(a2) >> 16;
      }
      else {
        *(_WORD *)uint64_t result = a2;
      }
      break;
    case 4:
      if (a4) {
        *(_DWORD *)uint64_t result = bswap32(a2);
      }
      else {
        *(_DWORD *)uint64_t result = a2;
      }
      break;
    case 8:
      if (a4) {
        *(void *)uint64_t result = bswap64(a2);
      }
      else {
        *(void *)uint64_t result = a2;
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2161A9CD8(__CFData *a1, const __CFString *cf, int a3, int a4, int a5)
{
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)cf))
    {
      if (a3 == 8)
      {
        double valuePtr = 0.0;
        CFNumberGetValue((CFNumberRef)cf, kCFNumberFloat64Type, &valuePtr);
        unint64_t v23 = (unint64_t)valuePtr;
        unint64_t v24 = bswap64((unint64_t)valuePtr);
        if (a5) {
          unint64_t v23 = v24;
        }
        double valuePtr = (double)v23;
        uint64_t v13 = a1;
        CFIndex v14 = 8;
      }
      else
      {
        if (a3 != 4) {
          return;
        }
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)cf, kCFNumberFloat32Type, &valuePtr);
        unsigned int v11 = *(float *)&valuePtr;
        unsigned int v12 = bswap32(*(float *)&valuePtr);
        if (a5) {
          unsigned int v11 = v12;
        }
        *(float *)&double valuePtr = (float)v11;
        uint64_t v13 = a1;
        CFIndex v14 = 4;
      }
      CFDataAppendBytes(v13, (const UInt8 *)&valuePtr, v14);
    }
    else
    {
      double valuePtr = 0.0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
      sub_2161A9F3C(a1, *(unint64_t *)&valuePtr, a3, a5);
    }
  }
  else
  {
    CFTypeID v15 = CFGetTypeID(cf);
    if (v15 == CFStringGetTypeID())
    {
      CFIndex Length = CFStringGetLength(cf);
      uint64_t v17 = 2 * Length;
      double valuePtr = 0.0;
      if (!a4) {
        sub_2161A9F3C(a1, v17, a3, a5);
      }
      if (a5) {
        CFStringEncoding v18 = 268435712;
      }
      else {
        CFStringEncoding v18 = 335544576;
      }
      uint64_t v19 = (UInt8 *)malloc_type_malloc(v17, 0x3847585DuLL);
      v27.location = 0;
      v27.length = Length;
      CFStringGetBytes(cf, v27, v18, 0, 0, v19, v17, (CFIndex *)&valuePtr);
      CFDataAppendBytes(a1, v19, *(CFIndex *)&valuePtr);
      free(v19);
    }
    else
    {
      CFTypeID v20 = CFGetTypeID(cf);
      if (v20 == CFDataGetTypeID())
      {
        CFIndex v21 = CFDataGetLength((CFDataRef)cf);
        if (!a4) {
          sub_2161A9F3C(a1, v21, a3, a5);
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        CFDataAppendBytes(a1, BytePtr, v21);
      }
    }
  }
}

void sub_2161A9F3C(__CFData *a1, unint64_t a2, int a3, int a4)
{
  switch(a3)
  {
    case 1:
      char v12 = a2;
      size_t v4 = (const UInt8 *)&v12;
      CFIndex v5 = 1;
      goto LABEL_12;
    case 2:
      unsigned int v6 = bswap32(a2) >> 16;
      if (!a4) {
        LOWORD(v6) = a2;
      }
      __int16 v11 = v6;
      size_t v4 = (const UInt8 *)&v11;
      CFIndex v5 = 2;
      goto LABEL_12;
    case 4:
      unsigned int v7 = bswap32(a2);
      if (!a4) {
        unsigned int v7 = a2;
      }
      unsigned int v10 = v7;
      size_t v4 = (const UInt8 *)&v10;
      CFIndex v5 = 4;
      goto LABEL_12;
    case 8:
      unint64_t v8 = bswap64(a2);
      if (!a4) {
        unint64_t v8 = a2;
      }
      unint64_t v9 = v8;
      size_t v4 = (const UInt8 *)&v9;
      CFIndex v5 = 8;
LABEL_12:
      CFDataAppendBytes(a1, v4, v5);
      break;
    default:
      return;
  }
}

void sub_2161AA00C(uint64_t a1, uint64_t a2)
{
  size_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(a1);
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (v5 < 2) {
    __int16 v6 = 0;
  }
  else {
    __int16 v6 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 352))(a1, v5 - 2);
  }
  *(_WORD *)(a1 + 256) = v6;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[1] - *v4) >> 3) - 1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[1] - *v4) >> 3) == 1)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    LODWORD(v++**(_DWORD **)(result + 8) = 0;
    LODWORD(v9) = 0;
    unsigned int v10 = (unsigned __int16 *)(*v4 + 28);
    do
    {
      uint64_t v9 = v9 + *v10;
      uint64_t v8 = v8 + *(v10 - 2);
      v10 += 20;
      --v7;
    }
    while (v7);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 544))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 544))(a1);
  uint64_t v13 = v12 - v8;
  if (!v11) {
    uint64_t v13 = 0;
  }
  v48[0] = v11 + 2 * v8;
  v48[1] = v13;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 552))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 552))(a1);
  uint64_t v16 = v15 - v9;
  if (!v14) {
    uint64_t v16 = 0;
  }
  v47[0] = v14 + 2 * v9;
  v47[1] = v16;
  uint64_t v17 = (void **)(a1 + 288);
  (*(void (**)(uint64_t, void *, void *, void, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v47, v48, 0, a1 + 264, a1 + 288);
  CFStringEncoding v18 = *(char **)(a1 + 264);
  uint64_t v19 = *(char **)(a1 + 272);
  uint64_t v20 = v19 - v18;
  if (v19 == v18)
  {
    __int16 v21 = *(_WORD *)(*v4 + 40 * v5 - 8);
    unint64_t v22 = *(void *)(a1 + 280);
    if ((unint64_t)v19 >= v22)
    {
      if (v20 <= -3) {
        sub_21610CB04();
      }
      uint64_t v24 = v20 >> 1;
      unint64_t v25 = v22 - (void)v18;
      if (v25 <= (v20 >> 1) + 1) {
        unint64_t v26 = v24 + 1;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = (char *)sub_21610FD44(a1 + 280, v27);
      uint64_t v29 = *(char **)(a1 + 264);
      uint64_t v30 = *(char **)(a1 + 272);
      long long v31 = &v28[2 * v24];
      long long v33 = &v28[2 * v32];
      *(_WORD *)long long v31 = v21;
      unint64_t v23 = v31 + 2;
      while (v30 != v29)
      {
        __int16 v34 = *((_WORD *)v30 - 1);
        v30 -= 2;
        *((_WORD *)v31 - 1) = v34;
        v31 -= 2;
      }
      *(void *)(a1 + 264) = v31;
      *(void *)(a1 + 272) = v23;
      *(void *)(a1 + 28sub_216195244(&a9, 0) = v33;
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(_WORD *)uint64_t v19 = v21;
      unint64_t v23 = v19 + 2;
    }
    *(void *)(a1 + 272) = v23;
    uint64_t v36 = *(char **)(a1 + 296);
    unint64_t v35 = *(void *)(a1 + 304);
    if ((unint64_t)v36 >= v35)
    {
      uint64_t v38 = (char *)*v17;
      uint64_t v39 = (v36 - (unsigned char *)*v17) >> 2;
      unint64_t v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62) {
        sub_21610CB04();
      }
      uint64_t v41 = v35 - (void)v38;
      if (v41 >> 1 > v40) {
        unint64_t v40 = v41 >> 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42)
      {
        uint64_t v43 = (char *)sub_2161129B4(a1 + 304, v42);
        uint64_t v38 = *(char **)(a1 + 288);
        uint64_t v36 = *(char **)(a1 + 296);
      }
      else
      {
        uint64_t v43 = 0;
      }
      __int16 v44 = &v43[4 * v39];
      BOOL v45 = &v43[4 * v42];
      *(_DWORD *)__int16 v44 = 0;
      __int16 v37 = v44 + 4;
      while (v36 != v38)
      {
        int v46 = *((_DWORD *)v36 - 1);
        v36 -= 4;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }
      *(void *)(a1 + 28++**(_DWORD **)(result + 8) = v44;
      *(void *)(a1 + 296) = v37;
      *(void *)(a1 + 304) = v45;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v36 = 0;
      __int16 v37 = v36 + 4;
    }
    *(void *)(a1 + 296) = v37;
  }
}

uint64_t sub_2161AA3E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 32)) = a2[5];
  *(void *)(a1 + 24) = &unk_26C6C0F40;
  sub_216195244((const void **)(a1 + 248), 0);
  sub_216195B94((const void **)(a1 + 240), 0);
  sub_216182BB8((const void **)(a1 + 232), 0);
  size_t v4 = *(void **)(a1 + 136);
  if (v4)
  {
    *(void *)(a1 + 144) = v4;
    operator delete(v4);
  }
  sub_2161868BC((const void **)(a1 + 128), 0);
  sub_2161868BC((const void **)(a1 + 120), 0);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_2161868BC((const void **)(a1 + 88), 0);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  sub_2161868BC((const void **)(a1 + 56), 0);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void *sub_2161AA544(void *a1, void *a2, unint64_t a3, void *a4, unint64_t a5, void *a6, unint64_t a7, int a8, int a9, char a10, uint64_t a11, int a12, int a13, int a14, uint64_t a15)
{
  *a1 = &unk_26C6BE7D0;
  uint64_t v16 = sub_216230988((uint64_t)a1, (uint64_t *)&off_26C6BCE50, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  *(void *)uint64_t v16 = off_26C6C0860;
  *(void *)(v16 + 24) = &unk_26C6C0AB8;
  *(_WORD *)(v16 + 256) = 0;
  *(_OWORD *)(v16 + 264) = 0u;
  *(_OWORD *)(v16 + 28sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(v16 + 296) = 0u;
  sub_2161AA00C(v16, a15);
  return a1;
}

void sub_2161AA638(_Unwind_Exception *a1)
{
  size_t v4 = (void *)v1[36];
  if (v4)
  {
    v1[37] = v4;
    operator delete(v4);
  }
  unint64_t v5 = *v2;
  if (*v2)
  {
    v1[34] = v5;
    operator delete(v5);
  }
  sub_2161AA3E8((uint64_t)v1, (uint64_t *)&off_26C6BCE50);
  _Unwind_Resume(a1);
}

void sub_2161AA674()
{
}

void sub_2161AA6BC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F3C4074548AAFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2161AA6E0(uint64_t a1)
{
  return sub_2161AA3E8(a1, (uint64_t *)&off_26C6BCE88);
}

void sub_2161AA6EC(uint64_t a1)
{
  sub_2161AA3E8(a1, (uint64_t *)&off_26C6BCE88);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161AA72C(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_2161AA734(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_2161AA758()
{
  return 0;
}

unint64_t sub_2161AA760(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3);
}

uint64_t sub_2161AA77C(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t sub_2161AA784()
{
  return 1;
}

uint64_t sub_2161AA78C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_2161AA794()
{
  return 0;
}

uint64_t sub_2161AA79C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 204);
}

uint64_t sub_2161AA7A4()
{
  return 1;
}

uint64_t sub_2161AA7AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

uint64_t sub_2161AA7B4()
{
  return 0;
}

uint64_t sub_2161AA7BC(uint64_t a1)
{
  return *(void *)(a1 + 232);
}

uint64_t sub_2161AA7C4(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  uint64_t v3 = (char *)(a1 + 32);
  LODWORD(v4) = *(unsigned __int8 *)(a1 + 55);
  if (v2 == 89)
  {
    if ((v4 & 0x80) != 0)
    {
      uint64_t v3 = *(char **)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
    }
    return sub_2161E4464(v3, 2 * (int)v4);
  }
  else
  {
    if ((v4 & 0x80) != 0)
    {
      uint64_t v3 = *(char **)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
    }
    uint64_t v6 = (2 * v4);
    if (v6)
    {
      unsigned int v7 = 0;
      do
      {
        int v8 = *v3++;
        unsigned int v7 = (1025 * (v7 + v8)) ^ ((1025 * (v7 + v8)) >> 6);
        --v6;
      }
      while (v6);
      LODWORD(v6) = 9 * v7;
    }
    return 32769 * (v6 ^ (v6 >> 11));
  }
}

uint64_t sub_2161AA87C(void *a1)
{
  if (a1[17] == a1[18]) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  if (result)
  {
    if (*(_DWORD *)a1[17] == 7)
    {
      return 1;
    }
    else
    {
      CFStringRef v3 = (const __CFString *)(*(uint64_t (**)(void *))(*a1 + 24))(a1);
      return sub_2161A1E44(v3);
    }
  }
  return result;
}

uint64_t sub_2161AA930(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 218);
}

__CFString *sub_2161AA938()
{
  return &stru_26C6FB1C0;
}

uint64_t sub_2161AA944()
{
  return 1;
}

uint64_t sub_2161AA94C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 217);
}

BOOL sub_2161AA954(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v1 = *(void *)(a1 + 144);
  if (v2 == v1) {
    return 1;
  }
  uint64_t v3 = v2 + 40;
  do
  {
    int v4 = *(_DWORD *)(v3 - 28);
    BOOL result = v4 != 0;
    if (v4) {
      BOOL v6 = v3 == v1;
    }
    else {
      BOOL v6 = 1;
    }
    v3 += 40;
  }
  while (!v6);
  return result;
}

BOOL sub_2161AA988(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v1 = *(void *)(a1 + 144);
  if (v2 == v1) {
    return 0;
  }
  uint64_t v3 = v2 + 40;
  do
  {
    int v4 = *(_DWORD *)(v3 - 40);
    BOOL result = v4 == 8;
    BOOL v6 = v4 == 8 || v3 == v1;
    v3 += 40;
  }
  while (!v6);
  return result;
}

uint64_t sub_2161AA9BC(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_2161AA9C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200);
}

uint64_t sub_2161AA9CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

double sub_2161AA9D4(uint64_t a1)
{
  return *(double *)(a1 + 176);
}

uint64_t sub_2161AA9DC(uint64_t result, double a2)
{
  *(double *)(result + 176) = a2;
  return result;
}

uint64_t sub_2161AA9E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

uint64_t sub_2161AA9EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 212);
}

uint64_t sub_2161AA9F4(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t sub_2161AA9FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t sub_2161AAA04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16++**(_DWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_2161AAA10(uint64_t result, char a2)
{
  *(unsigned char *)(result + 216) = a2;
  return result;
}

uint64_t sub_2161AAA18(uint64_t result, char a2)
{
  *(unsigned char *)(result + 21++**(_DWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_2161AAA20(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v1 = a1 + 32;
  uint64_t v2 = v3;
  if (*(char *)(v1 + 23) >= 0) {
    return v1;
  }
  return v2;
}

uint64_t sub_2161AAA44(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    return *(void *)(a1 + 96);
  }
  else {
    return a1 + 96;
  }
}

uint64_t sub_2161AAA70(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 136) + 40 * a2;
}

uint64_t sub_2161AAA80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

void sub_2161AAAA8(void *a1)
{
  sub_2161AAAF0(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161AAAE0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 256);
}

void sub_2161AAAE8()
{
}

uint64_t sub_2161AAAF0(void *a1)
{
  *a1 = off_26C6C0860;
  a1[3] = &unk_26C6C0AB8;
  uint64_t v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[33];
  if (v3)
  {
    a1[34] = v3;
    operator delete(v3);
  }

  return sub_2161AA3E8((uint64_t)a1, (uint64_t *)&off_26C6BCE50);
}

uint64_t sub_2161AAB88(uint64_t a1, CFStringRef theString, const __CFURL *a3)
{
  p_str = &__str;
  sub_21628DB6C(theString, a3, @"zip_code.dat", &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 79);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 64);
  }
  if (size == v6)
  {
    if (v7 >= 0) {
      int v8 = (unsigned __int8 *)(a1 + 56);
    }
    else {
      int v8 = *(unsigned __int8 **)(a1 + 56);
    }
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (!memcmp(__str.__r_.__value_.__l.__data_, v8, __str.__r_.__value_.__l.__size_)) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
      goto LABEL_19;
    }
    uint64_t v9 = &__str;
    uint64_t v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    while (v9->__r_.__value_.__s.__data_[0] == *v8)
    {
      uint64_t v9 = (std::string *)((char *)v9 + 1);
      ++v8;
      if (!--v10) {
        goto LABEL_19;
      }
    }
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
LABEL_18:
  if (!stat((const char *)p_str, &v15))
  {
    std::string::operator=((std::string *)(a1 + 56), &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &__str;
    }
    else {
      uint64_t v12 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    sub_2161056F0((void **)a1, (char *)v12);
    uint64_t v11 = 1;
    goto LABEL_24;
  }
LABEL_19:
  uint64_t v11 = 0;
LABEL_24:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_2161AACC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161AACE4(uint64_t a1, const void **a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v2 < 0) {
    uint64_t v2 = a2[1];
  }
  if (v2 == (const void *)7)
  {
    sub_2161AAF00(&v13, 8uLL);
    int v5 = *((char *)a2 + 23);
    if (v5 >= 0) {
      size_t v6 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v6 = (size_t)a2[1];
    }
    if (v6)
    {
      if (v5 >= 0) {
        int v7 = a2;
      }
      else {
        int v7 = *a2;
      }
      memmove(v13, v7, v6);
    }
    *(v14 - 1) = 32;
    sub_2160F72C4((void *)(a1 + 8));
    sub_2160F707C((void *)(a1 + 8), (uint64_t)v13, v14 - v13);
    char v12 = 0;
    if (sub_216105CFC((uint64_t *)a1, a1 + 8))
    {
      int v8 = (char *)(v13 - v14 + *(unsigned int *)(a1 + 40));
      MEMORY[0x270FA5388]();
      uint64_t v10 = (char *)v11 - v9;
      if (v8) {
        memmove(v10, (const void *)(*(void *)(a1 + 32) + v14 - v13), (size_t)v8);
      }
      v8[(void)v10] = 0;
      std::string v11[2] = 0;
      sub_2161E1EDC(v10);
    }
    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }
}

void sub_2161AAEB0(_Unwind_Exception *exception_object)
{
}

void *sub_2161AAF00(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21610ED94(a1, a2);
    int v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_2161AAF58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

const void *sub_2161AAF74(uint64_t a1, const __CFString *a2)
{
  if (!a2) {
    return 0;
  }
  if ((byte_26797D390 & 1) == 0) {
    pthread_once(&stru_26797B8E0, (void (*)(void))sub_2161AB298);
  }
  pthread_rwlock_rdlock((pthread_rwlock_t *)(qword_26797D398 + 16));
  CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_26797D398 + 8), a2);
  pthread_rwlock_unlock((pthread_rwlock_t *)(qword_26797D398 + 16));
  if (!Value)
  {
    int v4 = (pthread_rwlock_t *)(qword_26797D398 + 16);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(qword_26797D398 + 16));
    CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_26797D398 + 8), a2);
    if (!Value)
    {
      if (CFEqual(a2, @"com.apple.TrieAccessMethod")) {
        operator new();
      }
      if (CFEqual(a2, @"com.apple.HeapAccessMethod")) {
        operator new();
      }
      if (CFEqual(a2, @"com.apple.TestAccessMethod-Inspector")) {
        operator new();
      }
      CFArrayRef Value = 0;
    }
    pthread_rwlock_unlock(v4);
  }
  return Value;
}

void sub_2161AB23C(_Unwind_Exception *a1)
{
  sub_2161AB438(v2);
  MEMORY[0x2166CA800](v2, 0x10E1C404BFD5011);
  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2161AB298()
{
}

void sub_2161AB340(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10C1C40412F3666);
  _Unwind_Resume(a1);
}

void sub_2161AB368(uint64_t a1)
{
  sub_2161AB3E4(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161AB3A0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_2161AB3AC(uint64_t a1)
{
  sub_2161AB3E4(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161AB3E4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD218;
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 16));
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_2161AB438(void *a1)
{
  *a1 = &unk_26C6BD098;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_2161AB48C(void *a1)
{
  sub_2161AB438(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161AB4C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = a1 + 16;
  return 1;
}

uint64_t sub_2161AB4D4(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 168) + 1);
  *(_DWORD *)(a1 + 16++**(_DWORD **)(result + 8) = v1;
  return v1;
}

uint64_t sub_2161AB4E8(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 168) - 1);
  *(_DWORD *)(a1 + 16++**(_DWORD **)(result + 8) = v1;
  return v1;
}

void sub_2161AB4FC()
{
}

void sub_2161AB5C0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C4039AFCBB9);
  _Unwind_Resume(a1);
}

void sub_2161AB600()
{
}

void sub_2161AB688(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C4039AFCBB9);
  _Unwind_Resume(a1);
}

uint64_t sub_2161AB6AC(uint64_t a1, void *a2)
{
  uint64_t result = sub_2161AFA8C(a2);
  if (a2)
  {
    int v4 = *(uint64_t (**)(void *))(*a2 + 8);
    return v4(a2);
  }
  return result;
}

uint64_t sub_2161AB718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a3, a4, a5);
}

uint64_t sub_2161AB74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a3, a4, a5);
}

uint64_t sub_2161AB780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2161AB7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
}

uint64_t sub_2161AB7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a3, a4);
}

uint64_t sub_2161AB818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a3, a4, a5);
}

uint64_t sub_2161AB84C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t sub_2161AB874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2161AB8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2161AB8EC(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  return sub_2161B34F4(a2, a3);
}

void sub_2161AB900()
{
}

void sub_2161AB984(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_2161AB9B0()
{
  return 0;
}

uint64_t sub_2161AB9B8()
{
  return 0;
}

void sub_2161AB9C4(void *a1)
{
  sub_2161AB438(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161AB9FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = a1 + 16;
  return 1;
}

uint64_t sub_2161ABA0C(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 168) + 1);
  *(_DWORD *)(a1 + 16++**(_DWORD **)(result + 8) = v1;
  return v1;
}

uint64_t sub_2161ABA20(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 168) - 1);
  *(_DWORD *)(a1 + 16++**(_DWORD **)(result + 8) = v1;
  return v1;
}

void sub_2161ABA34()
{
}

void sub_2161ABAF8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40614AD078);
  _Unwind_Resume(a1);
}

void sub_2161ABB38()
{
}

void sub_2161ABBC0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40614AD078);
  _Unwind_Resume(a1);
}

uint64_t sub_2161ABBE4(uint64_t a1, void *a2)
{
  uint64_t result = sub_2161AFA8C(a2);
  if (a2)
  {
    int v4 = *(uint64_t (**)(void *))(*a2 + 8);
    return v4(a2);
  }
  return result;
}

uint64_t sub_2161ABC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a3, a4, a5);
}

uint64_t sub_2161ABC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a3, a4, a5);
}

uint64_t sub_2161ABCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2161ABCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
}

uint64_t sub_2161ABD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a3, a4);
}

uint64_t sub_2161ABD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a3, a4, a5);
}

uint64_t sub_2161ABD84(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t sub_2161ABDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2161ABDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a3, a4, a5, a6, a7);
}

BOOL sub_2161ABE24(int a1, uint64_t a2, int a3, CFArrayRef theArray, void *a5)
{
  return sub_2161B0DA8(a2, a3, theArray, a5);
}

void sub_2161ABE38()
{
}

void sub_2161ABEBC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

void sub_2161ABEE4(void *a1)
{
  sub_2161AB438(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161ABF1C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = a1 + 16;
  return 1;
}

uint64_t sub_2161ABF2C(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 168) + 1);
  *(_DWORD *)(a1 + 16++**(_DWORD **)(result + 8) = v1;
  return v1;
}

uint64_t sub_2161ABF40(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 168) - 1);
  *(_DWORD *)(a1 + 16++**(_DWORD **)(result + 8) = v1;
  return v1;
}

void sub_2161ABF54()
{
}

void sub_2161AC018(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40F8DAED6BLL);
  _Unwind_Resume(a1);
}

void sub_2161AC058()
{
}

void sub_2161AC0E0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40F8DAED6BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2161AC104(uint64_t a1, void *a2)
{
  uint64_t result = sub_2161AFA8C(a2);
  if (a2)
  {
    int v4 = *(uint64_t (**)(void *))(*a2 + 8);
    return v4(a2);
  }
  return result;
}

uint64_t sub_2161AC170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a3, a4, a5);
}

uint64_t sub_2161AC1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a3, a4, a5);
}

uint64_t sub_2161AC1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2161AC214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
}

uint64_t sub_2161AC240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a3, a4);
}

uint64_t sub_2161AC270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a3, a4, a5);
}

uint64_t sub_2161AC2A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t sub_2161AC2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2161AC308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2161AC344()
{
  return 0;
}

void sub_2161AC34C()
{
}

void sub_2161AC3D0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_2161AC3F4(uint64_t a1, int a2, int a3, CFArrayRef theArray, void *a5)
{
  CFIndex v8 = 0;
  uint64_t v9 = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6BD3E0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 24) = &unk_26C6BD4B0;
  *(_OWORD *)(a1 + 4sub_216195244(&a9, 0) = 0u;
  uint64_t v10 = (const void **)(a1 + 40);
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  uint64_t v11 = (char **)(a1 + 48);
  *(_OWORD *)(a1 + 56) = 0u;
  while (v8 < CFArrayGetCount(theArray))
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v8);
    CFIndex Length = CFStringGetLength(ValueAtIndex);
    int v14 = *(_DWORD *)(*a5 + 4 * v8);
    CFStringEncoding v18 = &unk_26C6C59C0;
    int v19 = v14;
    uint64_t v20 = v9;
    CFIndex v21 = Length;
    uint64_t v23 = 0xFFFFFFFFLL;
    uint64_t v22 = 64;
    sub_21617A4A0(v11, (uint64_t)&v18);
    v9 += Length;
    ++v8;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_216195244(&a9, 0) = 0;
  CFStringRef v15 = CFStringCreateByCombiningStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], theArray, &stru_26C6FB1C0);
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9658;
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  sub_216195954(v10, v15);
  sub_2161121B0(v16);
  return a1;
}

void sub_2161AC59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216195B94(v11, 0);
  sub_216195244(v10, 0);
  sub_21617B004(&a9);
  sub_2161868BC(v9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2161AC5E8(uint64_t a1, int a2, int a3, CFStringRef theString, uint64_t a5)
{
  *(_WORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6BD3E0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 24) = &unk_26C6BD4B0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  if (theString) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theString);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 4sub_216195244(&a9, 0) = Copy;
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 4++**(_DWORD **)(result + 8) = *(_OWORD *)a5;
  *(void *)(a1 + 64) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_216195244(&a9, 0) = 0;
  return a1;
}

void sub_2161AC698(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_216195244(a1, cf);
  }
}

void sub_2161AC6F8(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_216195B94(a1, cf);
  }
}

uint64_t sub_2161AC758(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  else {
    return 0;
  }
  return v2;
}

uint64_t sub_2161AC7C4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 56) - v2) >> 4);
  uint64_t v4 = v2 + 48 * a2;
  if (v3 >= a2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_2161AC7FC(uint64_t a1)
{
  return sub_2161E539C(*(const __CFString **)(a1 + 40));
}

BOOL sub_2161AC804(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 89
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2) != 89
    || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) != 89
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2) == 89)
  {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 89
    || (*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2) == 89)
  {
    CFNumberRef v4 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
    CFNumberRef v5 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 168))(a2);
    if (CFNumberCompare(v4, v5, 0)) {
      return 0;
    }
    int v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    CFIndex v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
    return CFEqual(v7, v8) != 0;
  }
  else
  {
    return sub_21617AD18(a1, a2);
  }
}

void sub_2161ACA4C(uint64_t a1, char *a2, CFIndex capacity)
{
  uint64_t v3 = capacity;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, capacity, MEMORY[0x263EFFF70]);
  if (v3 >= 1)
  {
    do
    {
      CFNumberRef v7 = CFNumberCreate(0, kCFNumberCFIndexType, a2);
      CFArrayAppendValue(Mutable, v7);
      if (v7) {
        CFRelease(v7);
      }
      a2 += 8;
      --v3;
    }
    while (v3);
  }

  sub_216195B94((const void **)(a1 + 80), Mutable);
}

void sub_2161ACB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216195244((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161ACB1C()
{
}

void sub_2161ACC2C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C408D9C284ALL);
  _Unwind_Resume(a1);
}

void sub_2161ACC64()
{
}

uint64_t sub_2161ACC80(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD3E0;
  *(void *)(a1 + 24) = &unk_26C6BD4B0;
  sub_216195B94((const void **)(a1 + 80), 0);
  sub_216195244((const void **)(a1 + 72), 0);
  uint64_t v3 = (void **)(a1 + 48);
  sub_21617B004(&v3);
  sub_2161868BC((const void **)(a1 + 40), 0);
  return a1;
}

uint64_t sub_2161ACD1C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD3E0;
  *(void *)(a1 + 24) = &unk_26C6BD4B0;
  sub_216195B94((const void **)(a1 + 80), 0);
  sub_216195244((const void **)(a1 + 72), 0);
  uint64_t v3 = (void **)(a1 + 48);
  sub_21617B004(&v3);
  sub_2161868BC((const void **)(a1 + 40), 0);
  return MEMORY[0x2166CA800](a1, 0x10E1C408D9C284ALL);
}

uint64_t sub_2161ACDCC(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_2161ACDD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_2161ACDF8()
{
  return 0;
}

unint64_t sub_2161ACE00(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4);
}

uint64_t sub_2161ACE1C()
{
  return 0;
}

uint64_t sub_2161ACE28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_2161ACE30()
{
  return 0;
}

uint64_t sub_2161ACE38()
{
  return 0;
}

uint64_t sub_2161ACE40(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 38) << 26 >> 31) & 0x59;
}

uint64_t sub_2161ACE54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_2161ACE5C()
{
  return 0;
}

uint64_t sub_2161ACE64()
{
  return 0;
}

uint64_t sub_2161ACE6C(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_2161ACE74(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

const void *sub_2161ACE7C(int a1, CFURLRef relativeURL)
{
  if ((byte_26797D3A0 & 1) == 0) {
    pthread_once(&stru_26797B8F0, (void (*)(void))sub_2161AD008);
  }
  CFURLRef v3 = CFURLCopyAbsoluteURL(relativeURL);
  CFStringRef v4 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
  CFRelease(v3);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(qword_26797EEE8 + 16));
  CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_26797EEE8 + 8), v4);
  pthread_rwlock_unlock((pthread_rwlock_t *)(qword_26797EEE8 + 16));
  if (!Value)
  {
    size_t v6 = (pthread_rwlock_t *)(qword_26797EEE8 + 16);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(qword_26797EEE8 + 16));
    CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_26797EEE8 + 8), v4);
    if (!Value) {
      operator new();
    }
    pthread_rwlock_unlock(v6);
  }
  CFRelease(v4);
  return Value;
}

void sub_2161ACFCC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10E0C4030B049B9);
  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2161AD008()
{
}

void sub_2161AD0B0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10C1C40412F3666);
  _Unwind_Resume(a1);
}

uint64_t sub_2161AD0D4(uint64_t a1, uint64_t a2)
{
  CFURLRef v3 = (pthread_rwlock_t *)(qword_26797EEE8 + 16);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(qword_26797EEE8 + 16));
  CFStringRef v4 = *(__CFDictionary **)(qword_26797EEE8 + 8);
  *(CFAbsoluteTime *)(a2 + 32sub_216195244(&a9, 0) = CFAbsoluteTimeGetCurrent();
  CFStringRef v5 = CFURLCopyFileSystemPath(*(CFURLRef *)(a2 + 8), kCFURLPOSIXPathStyle);
  CFDictionaryRemoveValue(v4, v5);
  CFRelease(v5);
  uint64_t v6 = sub_2161AE5B0(a2);
  MEMORY[0x2166CA800](v6, 0x10E0C4030B049B9);
  return pthread_rwlock_unlock(v3);
}

void sub_2161AD16C(_Unwind_Exception *a1)
{
  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

__CFString *sub_2161AD184(uint64_t a1, __CFString *a2)
{
  if (a2) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = @"IDXDefaultProperty";
  }
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 == CFStringGetTypeID())
  {
    if ((byte_26797D3A8 & 1) == 0) {
      pthread_once(&stru_26797B900, (void (*)(void))sub_2161AD39C);
    }
    pthread_rwlock_rdlock((pthread_rwlock_t *)(qword_26797D3B0 + 16));
    CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_26797D3B0 + 8), v2);
    pthread_rwlock_unlock((pthread_rwlock_t *)(qword_26797D3B0 + 16));
    if (!Value)
    {
      CFStringRef v5 = (pthread_rwlock_t *)(qword_26797D3B0 + 16);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(qword_26797D3B0 + 16));
      CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_26797D3B0 + 8), v2);
      if (Value)
      {
        BOOL v6 = 0;
      }
      else
      {
        if (CFStringGetCharacterAtIndex(v2, 0) == 47)
        {
          CFURLRef v8 = CFURLCreateWithFileSystemPath(0, v2, kCFURLPOSIXPathStyle, 0);
        }
        else
        {
          BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.DictionaryServices");
          CFURLRef v8 = CFBundleCopyResourceURL(BundleWithIdentifier, v2, @"plist", 0);
        }
        CFURLRef v10 = v8;
        if (!v8)
        {
          CFArrayRef Value = 0;
LABEL_24:
          pthread_rwlock_unlock(v5);
          return (__CFString *)Value;
        }
        CFDataRef resourceData = 0;
        int v11 = CFURLCreateDataAndPropertiesFromResource(0, v8, &resourceData, 0, 0, 0);
        BOOL v6 = v11 != 0;
        if (v11)
        {
          CFArrayRef Value = CFPropertyListCreateFromXMLData(0, resourceData, 0, 0);
          CFRelease(resourceData);
        }
        else
        {
          CFArrayRef Value = 0;
        }
        CFRelease(v10);
        if (!Value) {
          goto LABEL_24;
        }
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(qword_26797D3B0 + 8), v2, Value);
      if (v6) {
        CFRelease(Value);
      }
      goto LABEL_24;
    }
  }
  else
  {
    CFTypeID v7 = CFGetTypeID(v2);
    if (v7 == CFDictionaryGetTypeID()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  return (__CFString *)Value;
}

void sub_2161AD370(_Unwind_Exception *a1)
{
  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2161AD39C()
{
}

void sub_2161AD448(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10C1C40412F3666);
  _Unwind_Resume(a1);
}

void *sub_2161AD46C(void *result)
{
  result[4] = sub_2161AD570;
  result[5] = sub_2161AD598;
  result[6] = sub_2161AD5C0;
  result[7] = sub_2161AD5FC;
  result[8] = sub_2161AD624;
  result[9] = sub_2161AD64C;
  result[10] = sub_2161AD688;
  result[11] = sub_2161AD6B0;
  result[12] = sub_2161AD6D8;
  result[13] = sub_2161AD714;
  result[14] = sub_2161AD750;
  result[15] = sub_2161AD78C;
  result[16] = sub_2161AD7C8;
  result[1] = sub_2161AD804;
  result[2] = sub_2161AD840;
  result[3] = sub_2161AD868;
  return result;
}

uint64_t sub_2161AD570(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t sub_2161AD598(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t sub_2161AD5C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8));
}

uint64_t sub_2161AD5FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

uint64_t sub_2161AD624(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))();
}

uint64_t sub_2161AD64C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
}

uint64_t sub_2161AD688(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))();
}

uint64_t sub_2161AD6B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))();
}

uint64_t sub_2161AD6D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8));
}

uint64_t sub_2161AD714(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8));
}

uint64_t sub_2161AD750(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8));
}

uint64_t sub_2161AD78C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8));
}

uint64_t sub_2161AD7C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8));
}

uint64_t sub_2161AD804(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
}

uint64_t sub_2161AD840(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_2161AD868(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_2161AD890(uint64_t a1, char *a2)
{
  sub_216128C80((uint64_t)v10);
  long long __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (a2[23] >= 0) {
    CFStringRef v4 = a2;
  }
  else {
    CFStringRef v4 = *(char **)a2;
  }
  if (sub_21617E494(a1, v4, "r"))
  {
    if (*(void *)(a1 + 8) && *(void *)(a1 + 16)) {
      operator new();
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v10 + *(void *)(v10[0] - 24)), 0);
    CFStringRef v5 = sub_216129E78(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Japanese/BlocklistManager.cpp", 83);
    sub_216129E78(v5, (uint64_t)"(", 1);
    BOOL v6 = (void *)std::ostream::operator<<();
    CFTypeID v7 = sub_216129E78(v6, (uint64_t)") [", 3);
    CFURLRef v8 = sub_216129E78(v7, (uint64_t)"m_mmap.open(filename.c_str(), \"r\")", 34);
    sub_216129E78(v8, (uint64_t)"] ", 2);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](&v12);
  return 0;
}

void sub_2161ADACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2161ADAE8(uint64_t a1)
{
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 112);
  return a1;
}

uint64_t sub_2161ADBFC(uint64_t a1, const __CFURL *a2, const void *a3, const void *a4)
{
  *(_OWORD *)(a1 + 4++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 8sub_216195244(&a9, 0) = -1;
  *(void *)(a1 + 8++**(_DWORD **)(result + 8) = -1;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 10sub_216195244(&a9, 0) = -1;
  *(_DWORD *)(a1 + 10++**(_DWORD **)(result + 8) = -1;
  *(unsigned char *)(a1 + 16sub_216195244(&a9, 0) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 168), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 232), 0);
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = CFRetain(a3);
  *(void *)(a1 + 32) = CFURLCopyLastPathComponent(a2);
  if (a4) {
    *(void *)(a1 + 4sub_216195244(&a9, 0) = CFRetain(a4);
  }
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, a2);
  CFStringRef v9 = CFURLCopyLastPathComponent(PathComponent);
  if (CFEqual(v9, @"Resources"))
  {
    CFURLRef v10 = *(__CFBundle **)(a1 + 40);
    if (v10 || (CFURLRef v10 = sub_2161A9774(a2), (*(void *)(a1 + 40) = v10) != 0))
    {
      CFURLRef v11 = CFBundleCopyResourceURL(v10, *(CFStringRef *)(a1 + 32), 0, 0);
      if (!v11)
      {
        CFRelease(PathComponent);
        CFRelease(v9);
        return a1;
      }
      CFURLRef v12 = v11;
      *(void *)a1 = CFURLCopyAbsoluteURL(v11);
      CFRelease(v12);
      CFStringRef v13 = CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
      *(void *)(a1 + 16) = v13;
      CFRange v14 = CFStringFind(v13, @"Contents/", 0);
      v16.length = CFStringGetLength(*(CFStringRef *)(a1 + 16)) - (v14.location + v14.length);
      v16.location = v14.location + v14.length;
      *(void *)(a1 + 24) = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 16), v16);
    }
  }
  CFRelease(PathComponent);
  CFRelease(v9);
  if (!*(void *)a1) {
    *(void *)a1 = CFURLCopyAbsoluteURL(a2);
  }
  return a1;
}

uint64_t sub_2161ADD94(uint64_t a1)
{
  sub_2161ADE24(a1);
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
    CFRelease(v3);
  }
  CFStringRef v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  CFStringRef v5 = *(const void **)(a1 + 24);
  if (v5) {
    CFRelease(v5);
  }
  BOOL v6 = *(const void **)(a1 + 32);
  if (v6) {
    CFRelease(v6);
  }
  CFTypeID v7 = *(void **)(a1 + 48);
  if (v7) {
    free(v7);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 168));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 232));
  return a1;
}

void sub_2161ADE24(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    free(*(void **)(a1 + 136));
    free(*(void **)(a1 + 144));
    uint64_t v2 = *(void **)(a1 + 152);
    free(v2);
  }
}

CFDictionaryRef sub_2161ADE7C(uint64_t a1)
{
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 24);
  if (!result)
  {
    CFDictionaryRef result = *(const __CFDictionary **)(a1 + 8);
    if (result)
    {
      CFArrayRef Value = CFDictionaryGetValue(result, @"IDXIndexPath");
      *(void *)(a1 + 24) = Value;
      CFRetain(Value);
      return *(const __CFDictionary **)(a1 + 24);
    }
  }
  return result;
}

uint64_t sub_2161ADEC8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    if (*(void *)(a1 + 8))
    {
      CFStringRef v3 = *(const __CFString **)(a1 + 16);
      if (!v3)
      {
        CFStringRef v3 = CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
        *(void *)(a1 + 16) = v3;
      }
      CFIndex Length = CFStringGetLength(v3);
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      BOOL v6 = (char *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x7C0BA5A3uLL);
      *(void *)(a1 + 4++**(_DWORD **)(result + 8) = v6;
      CFStringRef v7 = *(const __CFString **)(a1 + 16);
      if (!v7)
      {
        if (*(void *)(a1 + 8))
        {
          CFStringRef v7 = CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
          *(void *)(a1 + 16) = v7;
          BOOL v6 = *(char **)(a1 + 48);
        }
        else
        {
          CFStringRef v7 = 0;
        }
      }
      CFStringGetFileSystemRepresentation(v7, v6, MaximumSizeForEncoding);
      return *(void *)(a1 + 48);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2161ADF7C(void *a1)
{
  uint64_t v1 = a1 + 10;
  if (a1[10] == -1)
  {
    CFDictionaryRef v4 = (const __CFDictionary *)a1[1];
    if (v4)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"IDXIndexDataSizeLength");
      if (Value && CFNumberGetValue(Value, kCFNumberCFIndexType, v1))
      {
        if (*(void *)v1) {
          return *(void *)v1;
        }
      }
      else
      {
        *(void *)uint64_t v1 = 0;
      }
      sub_2161AE020((uint64_t)a1);
      if (a1[16] == 1 && !a1[14] && !a1[15]) {
        a1[10] = *(void *)(a1[19] + 8);
      }
    }
  }
  return *(void *)v1;
}

uint64_t sub_2161AE020(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160) && *(void *)(a1 + 8))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 168));
    if (!*(unsigned char *)(a1 + 160))
    {
      sub_2161AE240(a1);
      *(unsigned char *)(a1 + 16sub_216195244(&a9, 0) = 1;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 168));
  }
  return a1 + 112;
}

uint64_t sub_2161AE080(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 96))
  {
    sub_2161AE020(a1);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 168));
    if (!*(unsigned char *)(a1 + 96))
    {
      *(void *)(a1 + 8++**(_DWORD **)(result + 8) = 0;
      if (!*(void *)(a1 + 128))
      {
        uint64_t v2 = *(void *)(a1 + 112);
        if (v2 < 1)
        {
          uint64_t v3 = 0;
        }
        else
        {
          uint64_t v3 = 0;
          CFDictionaryRef v4 = (uint64_t *)(*(void *)(a1 + 136) + 16);
          do
          {
            uint64_t v5 = *v4;
            v4 += 3;
            v3 += v5;
            --v2;
          }
          while (v2);
          *(void *)(a1 + 8++**(_DWORD **)(result + 8) = v3;
        }
        uint64_t v6 = *(void *)(a1 + 120);
        if (v6 >= 1)
        {
          CFStringRef v7 = (uint64_t *)(*(void *)(a1 + 144) + 8);
          do
          {
            uint64_t v8 = *v7;
            v7 += 2;
            v3 += v8;
            --v6;
          }
          while (v6);
          *(void *)(a1 + 8++**(_DWORD **)(result + 8) = v3;
        }
      }
    }
    *(unsigned char *)(a1 + 96) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 168));
  }
  return *(void *)(a1 + 88);
}

BOOL sub_2161AE140(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1 == -1)
  {
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 8);
    if (v4)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v4, @"IDXIndexWritable");
      int v6 = CFBooleanGetValue(Value);
      *(_DWORD *)(a1 + 10sub_216195244(&a9, 0) = v6;
      if (v6)
      {
        CFStringRef v7 = (const char *)sub_2161ADEC8(a1);
        if (access(v7, 0))
        {
          int v1 = *(_DWORD *)(a1 + 100);
        }
        else
        {
          uint64_t v8 = (const char *)sub_2161ADEC8(a1);
          int v1 = access(v8, 2) == 0;
          *(_DWORD *)(a1 + 10sub_216195244(&a9, 0) = v1;
        }
      }
      else
      {
        int v1 = 0;
      }
    }
    else
    {
      int v1 = -1;
    }
  }
  return v1 != 0;
}

BOOL sub_2161AE1E4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 108);
  if (v2 == -1)
  {
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 8);
    if (v3)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v3, @"IDXIndexBigEndian");
      int v2 = CFBooleanGetValue(Value);
      *(_DWORD *)(a1 + 10++**(_DWORD **)(result + 8) = v2;
    }
    else
    {
      int v2 = -1;
    }
  }
  return v2 != 0;
}

CFIndex sub_2161AE240(uint64_t a1)
{
  CFIndex result = (CFIndex)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), @"IDXIndexDataFields");
  if (!result) {
    return result;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)result;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)result, @"IDXExternalDataFields");
  if (!Value)
  {
    *(void *)(a1 + 112) = 0;
    goto LABEL_9;
  }
  CFArrayRef v5 = Value;
  CFIndex Count = CFArrayGetCount(Value);
  *(void *)(a1 + 112) = Count;
  if (!Count)
  {
LABEL_9:
    *(void *)(a1 + 136) = 0;
    goto LABEL_10;
  }
  uint64_t v7 = Count;
  *(void *)(a1 + 136) = malloc_type_malloc(24 * Count, 0x106004033AEC38CuLL);
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    for (CFIndex i = 0; i != v7; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, i);
      *(void *)(*(void *)(a1 + 136) + v++**(_DWORD **)(result + 8) = CFDictionaryGetValue(ValueAtIndex, @"IDXDataFieldName");
      *(void *)(*(void *)(a1 + 136) + v8 + ++**(_DWORD **)(result + 8) = CFDictionaryGetValue(ValueAtIndex, @"IDXIndexPath");
      CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"IDXDataSize");
      CFNumberGetValue(v11, kCFNumberCFIndexType, (void *)(*(void *)(a1 + 136) + v8 + 16));
      v8 += 24;
    }
  }
LABEL_10:
  CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(v3, @"IDXFixedDataFields");
  if (!v12)
  {
    *(void *)(a1 + 12sub_216195244(&a9, 0) = 0;
    goto LABEL_17;
  }
  CFArrayRef v13 = v12;
  CFIndex v14 = CFArrayGetCount(v12);
  *(void *)(a1 + 12sub_216195244(&a9, 0) = v14;
  if (!v14)
  {
LABEL_17:
    *(void *)(a1 + 144) = 0;
    goto LABEL_18;
  }
  uint64_t v15 = v14;
  *(void *)(a1 + 144) = malloc_type_malloc(16 * v14, 0x1060040C2E02434uLL);
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    for (CFIndex j = 0; j != v15; ++j)
    {
      CFDictionaryRef v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, j);
      *(void *)(*(void *)(a1 + 144) + v16) = CFDictionaryGetValue(v18, @"IDXDataFieldName");
      CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v18, @"IDXDataSize");
      CFNumberGetValue(v19, kCFNumberCFIndexType, (void *)(*(void *)(a1 + 144) + v16 + 8));
      v16 += 16;
    }
  }
LABEL_18:
  CFIndex result = (CFIndex)CFDictionaryGetValue(v3, @"IDXVariableDataFields");
  if (!result)
  {
    *(void *)(a1 + 12++**(_DWORD **)(result + 8) = 0;
    goto LABEL_25;
  }
  CFArrayRef v20 = (const __CFArray *)result;
  CFIndex result = CFArrayGetCount((CFArrayRef)result);
  *(void *)(a1 + 12++**(_DWORD **)(result + 8) = result;
  if (!result)
  {
LABEL_25:
    *(void *)(a1 + 152) = 0;
    return result;
  }
  uint64_t v21 = result;
  CFIndex result = (CFIndex)malloc_type_malloc(16 * result, 0x1060040C2E02434uLL);
  *(void *)(a1 + 152) = result;
  if (v21 >= 1)
  {
    uint64_t v22 = 0;
    for (CFIndex k = 0; k != v21; ++k)
    {
      CFDictionaryRef v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, k);
      *(void *)(*(void *)(a1 + 152) + v22) = CFDictionaryGetValue(v24, @"IDXDataFieldName");
      CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v24, @"IDXDataSizeLength");
      CFIndex result = CFNumberGetValue(v25, kCFNumberCFIndexType, (void *)(*(void *)(a1 + 152) + v22 + 8));
      v22 += 16;
    }
  }
  return result;
}

uint64_t sub_2161AE524(uint64_t a1, CFURLRef relativeURL)
{
  *(void *)a1 = -1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 10++**(_DWORD **)(result + 8) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 24++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = CFURLCopyAbsoluteURL(relativeURL);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 32), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 112), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 256), 0);
  *(CFAbsoluteTime *)(a1 + 32sub_216195244(&a9, 0) = CFAbsoluteTimeGetCurrent();
  return a1;
}

uint64_t sub_2161AE5B0(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  CFDictionaryRef v3 = *(const void **)(a1 + 16);
  if (v3) {
    CFRelease(v3);
  }
  CFDictionaryRef v4 = *(const void **)(a1 + 248);
  if (v4) {
    CFRelease(v4);
  }
  CFArrayRef v5 = *(void **)(a1 + 96);
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 104);
    if (v6 >= 1)
    {
      for (uint64_t i = 0; i < v6; ++i)
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 96) + 8 * i);
        if (v8)
        {
          uint64_t v9 = sub_2161ADD94(v8);
          MEMORY[0x2166CA800](v9, 0x1070C4063F6B07ELL);
          int v6 = *(_DWORD *)(a1 + 104);
        }
      }
      CFArrayRef v5 = *(void **)(a1 + 96);
    }
    free(v5);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 184));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 112));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 256));
  return a1;
}

CFDictionaryRef sub_2161AE670(CFDictionaryRef *a1)
{
  if (*a1 == (CFDictionaryRef)-1)
  {
    if (sub_2161AE6D0((uint64_t)a1))
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1[2], @"IDXDictionaryVersion");
      if (Value) {
        CFNumberGetValue(Value, kCFNumberCFIndexType, a1);
      }
    }
  }
  return *a1;
}

uint64_t sub_2161AE6D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    if (!*(unsigned char *)(a1 + 24))
    {
      CFURLRef v2 = CFURLCreateCopyAppendingPathComponent(0, *(CFURLRef *)(a1 + 8), @"Info.plist", 0);
      CFDataRef resourceData = 0;
      if (CFURLCreateDataAndPropertiesFromResource(0, v2, &resourceData, 0, 0, 0)) {
        BOOL v3 = resourceData == 0;
      }
      else {
        BOOL v3 = 1;
      }
      if (!v3)
      {
        *(void *)(a1 + 16) = CFPropertyListCreateFromXMLData(0, resourceData, 0, 0);
        CFRelease(resourceData);
      }
      CFRelease(v2);
    }
    *(unsigned char *)(a1 + 24) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  }
  *(CFAbsoluteTime *)(a1 + 32sub_216195244(&a9, 0) = CFAbsoluteTimeGetCurrent();
  return *(void *)(a1 + 16);
}

uint64_t sub_2161AE7A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 248);
  if (!result)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 256));
    if (!*(void *)(a1 + 248)) {
      *(void *)(a1 + 24++**(_DWORD **)(result + 8) = CFBundleCreate(0, *(CFURLRef *)(a1 + 8));
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 256));
    return *(void *)(a1 + 248);
  }
  return result;
}

BOOL sub_2161AE800(CFDictionaryRef *a1)
{
  CFDictionaryRef v2 = sub_2161AE670(a1);
  BOOL result = 0;
  if (v2 != (CFDictionaryRef)-1 && (uint64_t)v2 <= 2) {
    return sub_2161AE850((uint64_t)a1, 0) != 0;
  }
  return result;
}

uint64_t sub_2161AE850(uint64_t a1, _DWORD *a2)
{
  if (!*(unsigned char *)(a1 + 108) && sub_2161AE6D0(a1))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    if (!*(unsigned char *)(a1 + 108))
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"IDXDictionaryIndexes");
      if (Value)
      {
        CFArrayRef v5 = Value;
        int Count = CFArrayGetCount(Value);
        *(_DWORD *)(a1 + 104) = Count;
        *(void *)(a1 + 96) = malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
        if (*(int *)(a1 + 104) >= 1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, 0);
          CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"IDXIndexPath");
          sub_2161A9754(*(CFURLRef *)(a1 + 8), v8);
          operator new();
        }
      }
      *(unsigned char *)(a1 + 10++**(_DWORD **)(result + 8) = 1;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
  }
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 104);
  }
  return *(void *)(a1 + 96);
}

void sub_2161AEA10(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_2161AEA34(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = sub_2161AE850(a1, 0);
  int v5 = *(_DWORD *)(a1 + 104);
  if (a2)
  {
    if (v5 >= 1)
    {
      uint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = *(void *)v4;
        CFStringRef Value = *(const __CFString **)(*(void *)v4 + 56);
        if (Value
          || (CFDictionaryRef v9 = *(const __CFDictionary **)(v7 + 8)) != 0
          && (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v9, @"IDXIndexName"),
              (*(void *)(v7 + 56) = Value) != 0))
        {
          if (CFEqual(a2, Value)) {
            break;
          }
        }
        if (CFEqual(a2, *(CFStringRef *)(*(void *)v4 + 32))) {
          break;
        }
        ++v6;
        v4 += 8;
        if (v6 >= *(int *)(a1 + 104)) {
          return 0;
        }
      }
      goto LABEL_13;
    }
    return 0;
  }
  if (v5 <= 0) {
    return 0;
  }
LABEL_13:
  uint64_t v10 = *(void *)v4;
  if (v10) {
    sub_2161AEB24(a1);
  }
  return v10;
}

void sub_2161AEB24(uint64_t a1)
{
  CFDictionaryRef v2 = (pthread_mutex_t *)(a1 + 184);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 184));
  ++*(_DWORD *)(a1 + 176);
  pthread_mutex_unlock(v2);
  *(CFAbsoluteTime *)(a1 + 32sub_216195244(&a9, 0) = CFAbsoluteTimeGetCurrent();
}

void sub_2161AEB6C(uint64_t a1)
{
  CFDictionaryRef v2 = (pthread_mutex_t *)(a1 + 184);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 184));
  int v3 = *(_DWORD *)(a1 + 176);
  BOOL v4 = __OFSUB__(v3, 1);
  int v5 = v3 - 1;
  if (v5 < 0 == v4) {
    *(_DWORD *)(a1 + 176) = v5;
  }
  pthread_mutex_unlock(v2);
  *(CFAbsoluteTime *)(a1 + 32sub_216195244(&a9, 0) = CFAbsoluteTimeGetCurrent();
}

uint64_t sub_2161AEBB8()
{
  if ((byte_26797D3C0 & 1) == 0)
  {
    pthread_mutex_lock(&stru_26797B920);
    if ((byte_26797D3C0 & 1) == 0) {
      operator new();
    }
    pthread_mutex_unlock(&stru_26797B920);
  }
  return qword_26797D3C8;
}

void *sub_2161AEC30(uint64_t a1, const __CFURL *a2, const __CFString *a3)
{
  int v5 = sub_2161AEBB8();
  uint64_t v6 = sub_2161ACE7C(v5, a2);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  uint64_t v8 = sub_2161AEA34((uint64_t)v6, a3);
  if (!v8) {
    return 0;
  }
  CFDictionaryRef v9 = (void *)v8;
  uint64_t v10 = sub_2161AEDF0();
  CFStringRef Value = (const __CFString *)v9[8];
  if (!Value)
  {
    CFDictionaryRef v12 = (const __CFDictionary *)v9[1];
    if (v12)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v12, @"IDXIndexAccessMethod");
      v9[8] = Value;
    }
    else
    {
      CFStringRef Value = 0;
    }
  }
  CFArrayRef v13 = sub_2161AAF74(v10, Value);
  if (!v13
    || (CFIndex v14 = v13, (v15 = (*(uint64_t (**)(const void *, void *))(*(void *)v13 + 48))(v13, v9)) == 0))
  {
LABEL_12:
    sub_2161AEB6C(v7);
    return 0;
  }
  uint64_t v16 = v15;
  pthread_once(&stru_26797B910, (void (*)(void))sub_2161AF7AC);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    (*(void (**)(const void *, uint64_t))(*(void *)v14 + 56))(v14, v16);
    goto LABEL_12;
  }
  CFDictionaryRef v18 = (void *)Instance;
  CFNumberRef v19 = (void *)sub_2161AE020((uint64_t)v9);
  CFArrayRef v20 = malloc_type_malloc((32 * (v19[1] + *v19 + v19[2])) | 0x10, 0xA067575DuLL);
  void v18[2] = v14;
  void v18[3] = v7;
  v18[4] = v9;
  void v18[5] = v16;
  v18[8] = v20;
  unsigned __int8 v21 = sub_2161ADF7C(v9);
  uint64_t v22 = sub_2161AE080((uint64_t)v9);
  BOOL v23 = sub_2161AE1E4((uint64_t)v9);
  v18[6] = sub_2161A99FC(v21, v22, v23, v18 + 7);
  return v18;
}

uint64_t sub_2161AEDF0()
{
  if ((byte_26797D3C1 & 1) == 0)
  {
    pthread_mutex_lock(&stru_26797B960);
    if ((byte_26797D3C1 & 1) == 0) {
      operator new();
    }
    pthread_mutex_unlock(&stru_26797B960);
  }
  return qword_26797D3D0;
}

uint64_t sub_2161AEE74(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  unint64_t v8 = 0;
  int v5 = sub_2161A95F8(a2, 0x100u, &v8);
  uint64_t v6 = (*(uint64_t (**)(void, void, UInt8 *, unint64_t, uint64_t))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16), *(void *)(a1 + 40), v5, v8, a3);
  if (v5) {
    free(v5);
  }
  return v6;
}

CFIndex sub_2161AEF0C(uint64_t a1, const __CFArray *a2)
{
  uint64_t v41 = *(void *)(a1 + 32);
  int v3 = (uint64_t *)sub_2161AE020(v41);
  CFIndex result = CFArrayGetCount(a2);
  uint64_t v5 = result;
  uint64_t v38 = *v3;
  unint64_t v40 = v3;
  if (*v3 < 1)
  {
    uint64_t v8 = 0;
    CFIndex v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    CFIndex v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v3[3];
      if (v5 < 1)
      {
        CFIndex v11 = 0;
      }
      else
      {
        CFIndex v11 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v11);
          CFIndex result = CFStringCompare(ValueAtIndex, *(CFStringRef *)(v10 + 24 * v9), 0);
          if (!result) {
            break;
          }
          if (v5 == ++v11) {
            goto LABEL_11;
          }
        }
        uint64_t v13 = v8 + 1;
        CFIndex v14 = (void *)(*(void *)(a1 + 64) + 32 * v8);
        v14[5] = v11 + 1;
        uint64_t v15 = *(void *)(v10 + 24 * v9 + 16);
        BOOL v16 = sub_2161AE1E4(v41);
        CFIndex result = (CFIndex)sub_2161A99FC(0, v15, v16, v14 + 4);
        void v14[2] = v7;
        void v14[3] = result;
        int v3 = v40;
        ++v6;
        uint64_t v8 = v13;
        CFIndex v7 = 0;
      }
      if (v11 == v5) {
LABEL_11:
      }
        v7 += *(void *)(v10 + 24 * v9 + 16);
      ++v9;
    }
    while (v9 != v38);
  }
  uint64_t v17 = v3[1];
  if (v17 >= 1 && v6 < v5)
  {
    uint64_t v19 = 0;
    uint64_t v39 = v3[1];
    do
    {
      uint64_t v20 = v3[4];
      if (v5 < 1)
      {
        CFIndex v21 = 0;
      }
      else
      {
        CFIndex v21 = 0;
        while (1)
        {
          CFStringRef v22 = (const __CFString *)CFArrayGetValueAtIndex(a2, v21);
          CFIndex result = CFStringCompare(v22, *(CFStringRef *)(v20 + 16 * v19), 0);
          if (!result) {
            break;
          }
          if (v5 == ++v21)
          {
            uint64_t v17 = v39;
            goto LABEL_29;
          }
        }
        uint64_t v23 = v8 + 1;
        CFDictionaryRef v24 = (void *)(*(void *)(a1 + 64) + 32 * v8);
        v24[5] = v21 + 1;
        uint64_t v25 = *(void *)(v20 + 16 * v19 + 8);
        BOOL v26 = sub_2161AE1E4(v41);
        CFIndex result = (CFIndex)sub_2161A99FC(0, v25, v26, v24 + 4);
        v24[2] = v7;
        v24[3] = result;
        uint64_t v17 = v39;
        int v3 = v40;
        ++v6;
        uint64_t v8 = v23;
        CFIndex v7 = 0;
      }
      if (v21 == v5) {
LABEL_29:
      }
        v7 += *(void *)(v20 + 16 * v19 + 8);
      ++v19;
    }
    while (v19 < v17 && v6 < v5);
  }
  uint64_t v27 = v3[2];
  if (v27 >= 1 && v6 < v5)
  {
    uint64_t v29 = 0;
    do
    {
      uint64_t v30 = v3[5] + 16 * v29;
      uint64_t v31 = *(void *)(a1 + 64) + 32 * v8;
      *(void *)(v31 + 4sub_216195244(&a9, 0) = 0;
      uint64_t v32 = (CFIndex *)(v31 + 40);
      int v33 = *(unsigned __int8 *)(v30 + 8);
      BOOL v34 = sub_2161AE1E4(v41);
      CFIndex result = (CFIndex)sub_2161A99FC(v33, 0, v34, v32 - 1);
      *(v32 - 3) = v7;
      *(v32 - 2) = result;
      if (v5 >= 1)
      {
        CFIndex v35 = 0;
        while (1)
        {
          CFStringRef v36 = (const __CFString *)CFArrayGetValueAtIndex(a2, v35);
          CFIndex result = CFStringCompare(v36, *(CFStringRef *)v30, 0);
          ++v35;
          if (!result) {
            break;
          }
          if (v5 == v35) {
            goto LABEL_44;
          }
        }
        *uint64_t v32 = v35;
        ++v6;
      }
LABEL_44:
      int v3 = v40;
      ++v8;
      if (++v29 >= v27) {
        break;
      }
      CFIndex v7 = 0;
    }
    while (v6 < v5);
  }
  __int16 v37 = *(uint64_t **)(a1 + 64);
  uint64_t *v37 = v5;
  v37[1] = v8;
  return result;
}

uint64_t sub_2161AF1F8(uint64_t result, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  CFIndex v7 = *(uint64_t **)(result + 64);
  uint64_t v8 = *v7;
  if (*v7 >= 1)
  {
    uint64_t v9 = a4;
    uint64_t v10 = a5;
    do
    {
      *v9++ = 0;
      *v10++ = 0;
      --v8;
    }
    while (v8);
  }
  if (a3 >= 1)
  {
    uint64_t v11 = v7[1];
    if (v11 >= 1)
    {
      unint64_t v12 = a2 + a3;
      unsigned __int8 v19 = 0;
      uint64_t v13 = v7 + 5;
      uint64_t v14 = 1;
      do
      {
        uint64_t v15 = a2 + *(v13 - 3);
        CFIndex result = ((uint64_t (*)(void, uint64_t, unsigned __int8 *))*(v13 - 2))(*(v13 - 1), v15, &v19);
        uint64_t v16 = v15 + v19;
        if (*v13)
        {
          if (result <= 0) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = v15 + v19;
          }
          uint64_t v18 = 8 * *v13 - 8;
          *(void *)((char *)a4 + v1++**(_DWORD **)(result + 8) = v17;
          *(void *)((char *)a5 + v1++**(_DWORD **)(result + 8) = result;
        }
        if (v14 >= v11) {
          break;
        }
        v13 += 4;
        a2 = v16 + result;
        ++v14;
      }
      while (v16 + result < v12);
    }
  }
  return result;
}

__CFData *sub_2161AF2E4(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = (uint64_t *)sub_2161AE020(v3);
  BOOL v5 = sub_2161AE1E4(v3);
  CFMutableArrayRef Mutable = CFDataCreateMutable(0, 0);
  uint64_t v7 = *v4;
  if (*v4 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = v4[3];
      if (CFDictionaryContainsKey(a2, *(const void **)(v9 + v8)))
      {
        uint64_t v10 = v9 + v8;
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, *(const void **)v10);
        sub_2161A9CD8(Mutable, Value, *(unsigned __int8 *)(v10 + 16), 1, v5);
      }
      else
      {
        sub_2161A9F3C(Mutable, 0, *(unsigned __int8 *)(v9 + v8 + 16), v5);
      }
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  uint64_t v12 = v4[1];
  if (v12 >= 1)
  {
    uint64_t v13 = 0;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
    do
    {
      uint64_t v15 = v4[4];
      if (CFDictionaryContainsKey(a2, *(const void **)(v15 + v13)))
      {
        uint64_t v16 = v15 + v13;
        CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(a2, *(const void **)v16);
        sub_2161A9CD8(Mutable, v17, *(unsigned __int8 *)(v16 + 8), 1, v5);
      }
      else
      {
        uint64_t v18 = v15 + v13;
        unsigned __int8 v19 = (UInt8 *)malloc_type_calloc(1uLL, *(void *)(v15 + v13 + 8), 0x8E2BA5EDuLL);
        CFStringRef v20 = (const __CFString *)CFDataCreateWithBytesNoCopy(0, v19, *(void *)(v18 + 8), v14);
        sub_2161A9CD8(Mutable, v20, *(unsigned __int8 *)(v18 + 8), 1, v5);
        CFRelease(v20);
        free(v19);
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  uint64_t v21 = v4[2];
  if (v21 >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = v4[5];
      if (CFDictionaryContainsKey(a2, *(const void **)(v23 + v22)))
      {
        uint64_t v24 = v23 + v22;
        CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(a2, *(const void **)v24);
        sub_2161A9CD8(Mutable, v25, *(unsigned __int8 *)(v24 + 8), 0, v5);
      }
      else
      {
        sub_2161A9F3C(Mutable, 0, *(unsigned __int8 *)(v23 + v22 + 8), v5);
      }
      v22 += 16;
      --v21;
    }
    while (v21);
  }
  return Mutable;
}

uint64_t sub_2161AF500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2
    && ((uint64_t v9 = *(void *)(a1 + 32), *(void *)(v9 + 72))
     || (CFDictionaryRef v10 = *(const __CFDictionary **)(v9 + 8)) != 0
     && (CFStringRef Value = CFDictionaryGetValue(v10, @"IDXIndexKeyMatchingMethods"), (*(void *)(v9 + 72) = Value) != 0)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16), *(void *)(a1 + 40), a2, a3, a4);
  }
}

uint64_t sub_2161AF5AC(const __CFURL *a1, __CFString *a2)
{
  uint64_t v4 = sub_2161AEBB8();
  uint64_t v5 = sub_2161AEDF0();
  uint64_t v6 = sub_2161AD184(v4, a2);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_2161A96B4(a1);
  if (mkdir(v8, 0x1FFu)) {
    goto LABEL_27;
  }
  CFURLRef v9 = CFURLCreateCopyAppendingPathComponent(0, a1, @"Info.plist", 0);
  CFDictionaryRef v10 = CFWriteStreamCreateWithFile(0, v9);
  if (v10)
  {
    uint64_t v11 = v10;
    if (CFWriteStreamOpen(v10))
    {
      CFIndex v12 = CFPropertyListWriteToStream(v7, v11, kCFPropertyListXMLFormat_v1_0, 0);
      CFWriteStreamClose(v11);
      BOOL v13 = v12 > 0;
    }
    else
    {
      BOOL v13 = 0;
    }
    CFRelease(v11);
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  BOOL v13 = 0;
  if (v9) {
LABEL_10:
  }
    CFRelease(v9);
LABEL_11:
  if (v13)
  {
    CFAllocatorRef v14 = sub_2161ACE7C(v4, a1);
    if (v14)
    {
      uint64_t v15 = (uint64_t)v14;
      int v25 = 0;
      uint64_t v16 = sub_2161AE850((uint64_t)v14, &v25);
      if (v16)
      {
        if (v25 < 1)
        {
LABEL_23:
          uint64_t v23 = 1;
          if (!v8) {
            return v23;
          }
          goto LABEL_28;
        }
        uint64_t v17 = v16;
        uint64_t v18 = 0;
        while (1)
        {
          unsigned __int8 v19 = *(void **)(v17 + 8 * v18);
          CFStringRef Value = (const __CFString *)v19[8];
          if (!Value)
          {
            CFDictionaryRef v21 = (const __CFDictionary *)v19[1];
            if (v21)
            {
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v21, @"IDXIndexAccessMethod");
              v19[8] = Value;
            }
            else
            {
              CFStringRef Value = 0;
            }
          }
          uint64_t v22 = sub_2161AAF74(v5, Value);
          if (!v22
            || ((*(uint64_t (**)(const void *, void, void))(*(void *)v22 + 144))(v22, *v19, v19[1]) & 1) == 0)
          {
            break;
          }
          if (++v18 >= v25) {
            goto LABEL_23;
          }
        }
      }
      sub_2161AD0D4(v4, v15);
    }
  }
  sub_2161A9888((DIR *)v8);
LABEL_27:
  uint64_t v23 = 0;
  if (v8) {
LABEL_28:
  }
    free(v8);
  return v23;
}

uint64_t sub_2161AF7AC()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_26797D3B8 = result;
  return result;
}

void sub_2161AF7D4(uint64_t a1)
{
  (*(void (**)(void, void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), *(void *)(a1 + 40));
  if (*(void *)(a1 + 32)) {
    sub_2161AEB6C(*(void *)(a1 + 24));
  }
  CFDictionaryRef v2 = *(void **)(a1 + 64);
  if (v2)
  {
    free(v2);
  }
}

BOOL sub_2161AF854(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef sub_2161AF860(CFURLRef **a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringRef PathComponent = CFURLCopyLastPathComponent(*a1[4]);
  if (PathComponent)
  {
    CFStringRef v6 = PathComponent;
    CFStringRef v7 = CFStringCreateWithFormat(v4, a2, @"<%@>", PathComponent);
    CFRelease(v6);
    return v7;
  }
  else
  {
    return CFStringCreateWithFormat(v4, a2, @"<#invalid index>");
  }
}

CFStringRef sub_2161AF90C(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFStringRef v3 = CFURLCopyFileSystemPath(**(CFURLRef **)(a1 + 32), kCFURLPOSIXPathStyle);
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  if (!v3) {
    return CFStringCreateWithFormat(v2, 0, @"<IDXIndexRef %p>{access method = %@, #invalid index}", a1, v4);
  }
  CFStringRef v5 = v3;
  CFStringRef v6 = CFStringCreateWithFormat(v2, 0, @"<IDXIndexRef %p>{access method = %@, index = %@, open# = %d}", a1, v4, v3, 0);
  CFRelease(v5);
  return v6;
}

uint64_t sub_2161AF9AC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD160;
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = sub_2161ADD94(v2);
      MEMORY[0x2166CA800](v3, 0x1070C4063F6B07ELL);
    }
  }
  return a1;
}

uint64_t sub_2161AFA1C(void *a1)
{
  pthread_mutex_lock((pthread_mutex_t *)(a1[1] + 232));
  uint64_t v2 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 88))(a1, 1, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1[1] + 232));
  return v2;
}

uint64_t sub_2161AFA8C(void *a1)
{
  pthread_mutex_lock((pthread_mutex_t *)(a1[1] + 232));
  (*(void (**)(void *, uint64_t))(*a1 + 96))(a1, 1);
  uint64_t v2 = (pthread_mutex_t *)(a1[1] + 232);

  return pthread_mutex_unlock(v2);
}

uint64_t sub_2161AFAFC(int a1, int a2, off_t *a3)
{
  if (a2) {
    int v5 = 3;
  }
  else {
    int v5 = 1;
  }
  if (fstat(a1, &v8) == -1) {
    return -1;
  }
  off_t st_size = v8.st_size;
  if (a3) {
    *a3 = v8.st_size;
  }
  return (uint64_t)mmap(0, st_size, v5, 1, a1, 0);
}

uint64_t sub_2161AFB78()
{
  return 0;
}

uint64_t sub_2161AFB80()
{
  return 0;
}

uint64_t sub_2161AFB88()
{
  return 0;
}

uint64_t sub_2161AFB90()
{
  return 0;
}

uint64_t sub_2161AFB98()
{
  return 1;
}

uint64_t sub_2161AFBA4(uint64_t a1, void *a2)
{
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6BD240;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = a2;
  *(unsigned char *)(a1 + 32) = sub_2161AE080((uint64_t)a2) != 0;
  *(unsigned char *)(a1 + 33) = sub_2161AE140(*(void *)(a1 + 8));
  *(unsigned char *)(a1 + 34) = sub_2161AE1E4((uint64_t)a2);
  unsigned __int8 v4 = sub_2161ADF7C(a2);
  uint64_t v5 = sub_2161AE080((uint64_t)a2);
  BOOL v6 = sub_2161AE1E4((uint64_t)a2);
  CFStringRef v7 = sub_2161A99FC(v4, v5, v6, (void *)(a1 + 128));
  *(_WORD *)(a1 + 36) = 0;
  *(void *)(a1 + 12sub_216195244(&a9, 0) = v7;
  CFDictionaryRef v8 = (const __CFDictionary *)a2[1];
  if (v8)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v8, @"HeapDataCompressionType");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt16Type, (void *)(a1 + 36));
    }
  }
  int v10 = *(__int16 *)(a1 + 36);
  *(unsigned char *)(a1 + 35) = *(_WORD *)(a1 + 36) != 0;
  *(unsigned char *)(a1 + 3++**(_DWORD **)(result + 8) = v10 > 3;
  *(void *)(a1 + 4sub_216195244(&a9, 0) = 0;
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if ((v10 & 0xFFFE) == 2)
  {
    *(void *)(a1 + 8sub_216195244(&a9, 0) = *(void *)(a1 + 120);
    uint64_t v11 = sub_2161ADF7C(a2);
    CFIndex v12 = sub_2161A99FC((v11 << (v11 < 4)), 0, *(unsigned __int8 *)(a1 + 34), 0);
    int v13 = *(unsigned __int16 *)(a1 + 36);
    uint64_t v14 = 0x2000;
    if (v13 == 2) {
      uint64_t v14 = 0x8000;
    }
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 12sub_216195244(&a9, 0) = v12;
    CFDictionaryRef v15 = (const __CFDictionary *)a2[1];
    if (v15)
    {
      CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v15, @"HeapDataCompressionBlockSize");
      if (v16) {
        CFNumberGetValue(v16, kCFNumberCFIndexType, (void *)(a1 + 56));
      }
      CFDictionaryRef v17 = (const __CFDictionary *)a2[1];
      if (*(_WORD *)(a1 + 36) == 2) {
        unint64_t v18 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v18 = 0xFFFFLL;
      }
      unint64_t valuePtr = v18;
      if (v17)
      {
        CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v17, @"HeapDataCompressionMaxBlockCount");
        if (v19)
        {
          CFNumberGetValue(v19, kCFNumberLongLongType, &valuePtr);
          unint64_t v18 = valuePtr;
        }
      }
    }
    else if (v13 == 2)
    {
      unint64_t v18 = 0xFFFFFFFFLL;
    }
    else
    {
      unint64_t v18 = 0xFFFFLL;
    }
    if (*(_WORD *)(a1 + 36) == 2) {
      int v20 = 64;
    }
    else {
      int v20 = 32;
    }
    LODWORD(v21) = vcvtpd_s64_f64(log2((double)v18));
    uint64_t v22 = (v20 - v21);
    *(void *)(a1 + 8++**(_DWORD **)(result + 8) = 0;
    if ((int)v21 < 1)
    {
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v23 = (v21 + 1) & 0x1FFFFFFFELL;
      int64x2_t v24 = (int64x2_t)xmmword_216371E20;
      uint64x2_t v25 = (uint64x2_t)vdupq_n_s64(v21 - 1);
      int8x16_t v26 = 0uLL;
      uint64x2_t v27 = (uint64x2_t)vdupq_n_s64(1uLL);
      int64x2_t v28 = vdupq_n_s64(2uLL);
      do
      {
        int8x16_t v29 = v26;
        uint64x2_t v30 = (uint64x2_t)v24;
        int8x16_t v26 = vorrq_s8(v26, (int8x16_t)vshlq_u64(v27, (uint64x2_t)v24));
        int64x2_t v24 = vaddq_s64(v24, v28);
        v23 -= 2;
      }
      while (v23);
      int8x16_t v31 = vbslq_s8((int8x16_t)vcgtq_u64(v30, v25), v29, v26);
      *(int8x8_t *)v31.i8 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      *(void *)(a1 + 8++**(_DWORD **)(result + 8) = v31.i64[0];
      uint64_t v32 = v31.i64[0];
    }
    *(void *)(a1 + 104) = 0;
    if ((int)v22 >= 1)
    {
      uint64_t v33 = (v22 + 1) & 0x1FFFFFFFELL;
      int64x2_t v34 = (int64x2_t)xmmword_216371E20;
      uint64x2_t v35 = (uint64x2_t)vdupq_n_s64(v22 - 1);
      int8x16_t v36 = 0uLL;
      uint64x2_t v37 = (uint64x2_t)vdupq_n_s64(1uLL);
      int64x2_t v38 = vdupq_n_s64(2uLL);
      do
      {
        int8x16_t v39 = v36;
        uint64x2_t v40 = (uint64x2_t)v34;
        int8x16_t v36 = vorrq_s8(v36, (int8x16_t)vshlq_u64(v37, (uint64x2_t)v34));
        int64x2_t v34 = vaddq_s64(v34, v38);
        v33 -= 2;
      }
      while (v33);
      int8x16_t v41 = vbslq_s8((int8x16_t)vcgtq_u64(v40, v35), v39, v36);
      *(int8x8_t *)(a1 + 104) = vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
    }
    *(void *)(a1 + 96) = v32 << v22;
    *(unsigned char *)(a1 + 112) = v22;
  }
  *(unsigned char *)(a1 + 113) = 0;
  return a1;
}

void sub_2161AFE90(_Unwind_Exception *a1)
{
  sub_2161AF9AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161AFEB4(void *a1)
{
  *a1 = &unk_26C6BD240;
  uint64_t v2 = (void *)a1[5];
  if (v2) {
    free(v2);
  }

  return sub_2161AF9AC((uint64_t)a1);
}

void sub_2161AFF14(void *a1)
{
  sub_2161AFEB4(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161AFF4C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  int v4 = *(unsigned __int16 *)(a1 + 36);
  if ((v4 & 0xFFFE) == 2) {
    a2 = (*(void *)(a1 + 96) & a2) >> *(unsigned char *)(a1 + 112);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v4 != 3 && *(unsigned char *)(a1 + 32) == 0)
  {
    CFDictionaryRef v8 = (_DWORD *)(*(void *)(v5 + 16) + a2);
    if (!*v8)
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
      if (!a3) {
        return v10;
      }
      goto LABEL_11;
    }
    uint64_t v7 = (uint64_t)(v8 + 1);
  }
  else
  {
    uint64_t v7 = *(void *)(v5 + 16) + (a2 - 1) * *(unsigned int *)(v5 + 36) + 8;
  }
  unsigned __int8 v12 = 0;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *))(a1 + 120))(*(void *)(a1 + 128), v7, &v12);
  uint64_t v10 = v7 + v12;
  if (a3) {
LABEL_11:
  }
    *a3 = v9;
  return v10;
}

int64_t sub_2161B000C(uint64_t a1, uint64_t a2, int64_t a3, Bytef *a4)
{
  unsigned int v6 = a2;
  uLong sourceLen = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uLong *))(*(void *)a1 + 48))(a1, a2, &sourceLen);
  unsigned __int8 v18 = 0;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (Bytef *)v8;
  if (*(unsigned char *)(a1 + 113) || *(unsigned char *)(a1 + 35))
  {
    int64_t v10 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *))(a1 + 120))(0, v8, &v18);
    uLong v11 = sourceLen - v18;
    uLong sourceLen = v11;
    v9 += v18;
  }
  else
  {
    uLong v11 = sourceLen;
    int64_t v10 = sourceLen;
  }
  int v12 = *(unsigned __int16 *)(a1 + 36);
  if ((v12 & 0xFFFE) == 2)
  {
    if (v10 > *(void *)(a1 + 48))
    {
      int v13 = *(void **)(a1 + 40);
      if (v13) {
        free(v13);
      }
      *(void *)(a1 + 4sub_216195244(&a9, 0) = malloc_type_malloc(v10, 0xBF05C3A8uLL);
      *(void *)(a1 + 4++**(_DWORD **)(result + 8) = v10;
    }
    if (v9 != *(Bytef **)(a1 + 64))
    {
      uLongf destLen = v10;
      uncompress(*(Bytef **)(a1 + 40), &destLen, v9, sourceLen);
      *(void *)(a1 + 64) = v9;
    }
    uint64_t v14 = *(void *)(a1 + 40) + (v6 & *(_DWORD *)(a1 + 104));
    uLong v15 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *))(a1 + 80))(0, v14, &v18);
    uLong sourceLen = v15;
    uint64_t v9 = (Bytef *)(v14 + v18);
    if (*(unsigned char *)(a1 + 113))
    {
      int64_t v10 = (*(uint64_t (**)(void, Bytef *, unsigned __int8 *))(a1 + 80))(0, v9, &v18);
      uLong v11 = sourceLen - v18;
      uLong sourceLen = v11;
      v9 += v18;
    }
    else
    {
      uLong v11 = v15;
      int64_t v10 = v15;
    }
    int v12 = *(unsigned __int16 *)(a1 + 36);
  }
  if (v12 == 1)
  {
    if (v10 > a3) {
      return v10;
    }
    uLongf destLen = a3;
    uncompress(a4, &destLen, v9, v11);
  }
  else
  {
    if (v10 > a3) {
      return v10;
    }
    memcpy(a4, v9, v11);
  }
  if (*(unsigned char *)(a1 + 113) && v10 <= a3) {
    free(v9);
  }
  return v10;
}

BOOL sub_2161B020C(uint64_t a1, uint64_t a2, uint64_t a3, const Bytef *a4, size_t a5, unint64_t *a6)
{
  size_t __len = a5;
  if (!*(unsigned char *)(a1 + 33)) {
    return 0;
  }
  uint64_t v70 = 0;
  unsigned __int8 v69 = 0;
  (*(void (**)(void, uint64_t *, unsigned __int8 *))(a1 + 120))(*(void *)(a1 + 128), &v70, &v69);
  if ((*(_WORD *)(a1 + 36) & 0xFFFE) != 2)
  {
    if (*(unsigned char *)(a1 + 35)) {
      uint64_t v21 = sub_2161B08E0(a1, a4, __len, v69, &__len);
    }
    else {
      uint64_t v21 = sub_2161A9B9C(a4, __len, v69, *(unsigned __int8 *)(a1 + 34), &__len);
    }
    CFNumberRef v16 = v21;
    int v22 = *(unsigned __int8 *)(a1 + 32);
    uint64_t v23 = *(void *)(a1 + 24);
    int v24 = __len;
    if (!v22)
    {
      unint64_t v19 = sub_2161B099C(v23, v21, __len);
      goto LABEL_90;
    }
    uint64_t v25 = *(unsigned int *)(v23 + 36);
    if (__len)
    {
      if (v25)
      {
        if (__len != v25) {
          goto LABEL_45;
        }
      }
      else
      {
        *(_DWORD *)(v23 + 36) = __len;
        LODWORD(v25) = v24;
      }
    }
    else if (!v25)
    {
      goto LABEL_45;
    }
    uint64_t v33 = *(_DWORD **)(v23 + 16);
    if (v33)
    {
      unint64_t v34 = *(void *)(v23 + 24);
      if (v34 >= (*(_DWORD *)(v23 + 32) + v25)) {
        goto LABEL_42;
      }
      unint64_t v35 = v34 + (v25 << 10);
    }
    else
    {
      unint64_t v35 = (v25 << 10) | 8u;
    }
    uint64_t v33 = (_DWORD *)(*(uint64_t (**)(void))v23)();
    if (!v33)
    {
LABEL_45:
      unint64_t v19 = 0;
      goto LABEL_90;
    }
    *(void *)(v23 + 16) = v33;
    *(void *)(v23 + 24) = v35;
LABEL_42:
    unsigned int v36 = *(_DWORD *)(v23 + 32);
    if (!v36)
    {
      *(_DWORD *)(v23 + 32) = 8;
      *uint64_t v33 = 8;
      v33[1] = *(_DWORD *)(v23 + 36);
      unsigned int v36 = *(_DWORD *)(v23 + 32);
    }
    uint64_t v37 = *(void *)(v23 + 40);
    memcpy((char *)v33 + v36, v16, *(unsigned int *)(v23 + 36));
    int v38 = *(_DWORD *)(v23 + 32) + *(_DWORD *)(v23 + 36);
    *(_DWORD *)(v23 + 32) = v38;
    **(_DWORD **)(v23 + 16) = v38;
    ++*(void *)(v23 + 40);
    unint64_t v19 = v37 + 1;
    goto LABEL_90;
  }
  uLong sourceLen = 0;
  unsigned __int8 v67 = 0;
  (*(void (**)(void, uint64_t *, unsigned __int8 *))(a1 + 80))(0, &v70, &v67);
  uint64_t v9 = sub_2161A9B9C(a4, __len, v67, *(unsigned __int8 *)(a1 + 34), &__len);
  uint64_t v10 = *(void *)(a1 + 72);
  if (!v10
    || (uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uLong *))(*(void *)a1 + 48))(a1, v10, &sourceLen),
        uLong v12 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *))(a1 + 120))(0, v11, &v69),
        uLong sourceLen = v12,
        v12 >= *(void *)(a1 + 104)))
  {
LABEL_8:
    CFNumberRef v16 = sub_2161B08E0(a1, v9, __len, v69, &__len);
    if (v9 != a4) {
      free(v9);
    }
    uLong sourceLen = 0;
    if (*(_WORD *)(a1 + 36) == 2)
    {
      uint64_t v17 = *(void *)(a1 + 24);
LABEL_12:
      unint64_t v18 = sub_2161B099C(v17, v16, __len) << *(unsigned char *)(a1 + 112);
      unint64_t v19 = v18 + sourceLen;
      if ((int64_t)__len >= *(void *)(a1 + 56)) {
        unint64_t v18 = 0;
      }
      *(void *)(a1 + 72) = v18;
      goto LABEL_90;
    }
    goto LABEL_48;
  }
  int v13 = (const Bytef *)(v11 + v69);
  uLong v66 = __len + v12;
  uint64_t v14 = (Bytef *)malloc_type_malloc(__len + v12, 0xDC58DB5AuLL);
  uLongf destLen = v66;
  uncompress(v14, &destLen, v13, sourceLen);
  memmove(&v14[sourceLen], v9, __len);
  uLong v15 = sub_2161B08E0(a1, v14, v66, v69, &v66);
  CFNumberRef v16 = v15;
  if (*(_WORD *)(a1 + 36) != 2 && (int64_t)v66 > *(void *)(a1 + 56))
  {
    free(v15);
    free(v14);
    goto LABEL_8;
  }
  if (v9 != a4) {
    free(v9);
  }
  size_t __len = v66;
  free(v14);
  uint64_t v17 = *(void *)(a1 + 24);
  unint64_t v26 = *(void *)(a1 + 72) >> *(unsigned char *)(a1 + 112);
  if (*(_WORD *)(a1 + 36) == 2)
  {
    unint64_t v27 = *(unsigned int *)(v17 + 36);
    if (v26 < v27)
    {
      int64x2_t v28 = *(_DWORD **)(v17 + 16);
      int8x16_t v29 = (_DWORD *)((char *)v28 + v26);
      uint64_t v30 = *(unsigned int *)((char *)v28 + v26);
      if (v30)
      {
        if (v26 + v30 + 4 == v27)
        {
          int v31 = v27 - v30 - 4;
          *(_DWORD *)(v17 + 36) = v31;
          *int64x2_t v28 = v31;
          if (*(int *)(v17 + 32) >= 1)
          {
            int v32 = *(_DWORD *)(v17 + 48) - 1;
            *(_DWORD *)(v17 + 4++**(_DWORD **)(result + 8) = v32;
            v28[5] = v32;
          }
        }
        else
        {
          _DWORD *v29 = 0;
          if (v30 >= 4 && *(int *)(v17 + 32) >= 1)
          {
            v29[1] = v30;
            if (v30 >= 0x20 && v26 > *(unsigned int *)(v17 + 40))
            {
              unint64_t v64 = *(unsigned int *)(v17 + 44);
              if (!v64 || v26 < v64)
              {
                *(_DWORD *)(v17 + 44) = v26;
                v28[4] = v26;
              }
            }
          }
        }
      }
    }
    goto LABEL_12;
  }
  if (*(void *)(v17 + 40) == v26)
  {
    *(void *)(v17 + 4sub_216195244(&a9, 0) = v26 - 1;
    int v39 = *(_DWORD *)(v17 + 32) - *(_DWORD *)(v17 + 36);
    *(_DWORD *)(v17 + 32) = v39;
    **(_DWORD **)(v17 + 16) = v39;
  }
LABEL_48:
  uint64x2_t v40 = v16;
  uint64_t v41 = *(void *)(a1 + 56);
  if ((uint64_t)__len % v41) {
    uint64_t v42 = (uint64_t)__len / v41 + 1;
  }
  else {
    uint64_t v42 = (uint64_t)__len / v41;
  }
  uint64_t v43 = v42 * v41;
  CFNumberRef v16 = (char *)malloc_type_calloc(1uLL, v42 * v41, 0x2C2FA817uLL);
  memmove(v16, v40, __len);
  free(v40);
  uint64_t v44 = *(void *)(a1 + 24);
  uint64_t v45 = *(void *)(a1 + 56);
  uint64_t v46 = *(unsigned int *)(v44 + 36);
  if (v45)
  {
    if (v46)
    {
      if (v45 != v46) {
        goto LABEL_70;
      }
    }
    else
    {
      *(_DWORD *)(v44 + 36) = v45;
      LODWORD(v46) = v45;
    }
  }
  else if (!v46)
  {
    goto LABEL_70;
  }
  CFIndex v47 = *(_DWORD **)(v44 + 16);
  if (v47)
  {
    unint64_t v48 = *(void *)(v44 + 24);
    if (v48 >= (*(_DWORD *)(v44 + 32) + v46)) {
      goto LABEL_64;
    }
    unint64_t v49 = v48 + (v46 << 10);
  }
  else
  {
    unint64_t v49 = (v46 << 10) | 8u;
  }
  CFIndex v47 = (_DWORD *)(*(uint64_t (**)(void))v44)();
  if (!v47) {
    goto LABEL_70;
  }
  *(void *)(v44 + 16) = v47;
  *(void *)(v44 + 24) = v49;
LABEL_64:
  unsigned int v50 = *(_DWORD *)(v44 + 32);
  if (!v50)
  {
    *(_DWORD *)(v44 + 32) = 8;
    *CFIndex v47 = 8;
    v47[1] = *(_DWORD *)(v44 + 36);
    unsigned int v50 = *(_DWORD *)(v44 + 32);
  }
  unint64_t v51 = *(void *)(v44 + 40);
  memcpy((char *)v47 + v50, v16, *(unsigned int *)(v44 + 36));
  int v52 = *(_DWORD *)(v44 + 32) + *(_DWORD *)(v44 + 36);
  *(_DWORD *)(v44 + 32) = v52;
  **(_DWORD **)(v44 + 16) = v52;
  ++*(void *)(v44 + 40);
  *(void *)(a1 + 72) = v51 + 1;
  if (v51 < *(void *)(a1 + 88))
  {
    uint64_t v53 = (v51 + 1) << *(unsigned char *)(a1 + 112);
    *(void *)(a1 + 72) = v53;
    unint64_t v19 = v53 + sourceLen;
    goto LABEL_71;
  }
  if (v51 != -1) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "Failed to add a new data since record count exceeds limit (%lld) defined in the current compaction-type.\n", *(void *)(a1 + 88));
  }
LABEL_70:
  unint64_t v19 = 0;
  uint64_t v43 = 0;
  *(void *)(a1 + 72) = 0;
LABEL_71:
  uint64_t v54 = *(void *)(a1 + 56);
  uint64_t v55 = v43 - v54;
  if (v43 != v54)
  {
    unint64_t v56 = v16;
    do
    {
      v56 += v54;
      uint64_t v57 = *(void *)(a1 + 24);
      uint64_t v58 = *(unsigned int *)(v57 + 36);
      if (v54)
      {
        if (v58)
        {
          if (v54 != v58) {
            goto LABEL_89;
          }
        }
        else
        {
          *(_DWORD *)(v57 + 36) = v54;
          LODWORD(v5++**(_DWORD **)(result + 8) = v54;
        }
      }
      else if (!v58)
      {
        goto LABEL_89;
      }
      uint64_t v59 = *(_DWORD **)(v57 + 16);
      if (v59)
      {
        unint64_t v60 = *(void *)(v57 + 24);
        if (v60 >= (*(_DWORD *)(v57 + 32) + v58)) {
          goto LABEL_86;
        }
        unint64_t v61 = v60 + (v58 << 10);
      }
      else
      {
        unint64_t v61 = (v58 << 10) | 8u;
      }
      uint64_t v59 = (_DWORD *)(*(uint64_t (**)(void))v57)();
      if (v59)
      {
        *(void *)(v57 + 16) = v59;
        *(void *)(v57 + 24) = v61;
LABEL_86:
        uint64_t v62 = *(unsigned int *)(v57 + 32);
        if (!v62)
        {
          *(_DWORD *)(v57 + 32) = 8;
          *uint64_t v59 = 8;
          v59[1] = *(_DWORD *)(v57 + 36);
          uint64_t v62 = *(unsigned int *)(v57 + 32);
        }
        memcpy((char *)v59 + v62, v56, *(unsigned int *)(v57 + 36));
        int v63 = *(_DWORD *)(v57 + 32) + *(_DWORD *)(v57 + 36);
        *(_DWORD *)(v57 + 32) = v63;
        **(_DWORD **)(v57 + 16) = v63;
        ++*(void *)(v57 + 40);
      }
LABEL_89:
      *(void *)(a1 + 72) = 0;
      uint64_t v54 = *(void *)(a1 + 56);
      v55 -= v54;
    }
    while (v55);
  }
LABEL_90:
  free(v16);
  if (a6) {
    *a6 = v19;
  }
  return v19 != 0;
}

unsigned char *sub_2161B08E0(uint64_t a1, const Bytef *a2, uLong sourceLen, unsigned int a4, void *a5)
{
  uLongf destLen = compressBound(sourceLen) + 2 * a4;
  uint64_t v10 = malloc_type_malloc(destLen, 0x6DA86883uLL);
  compress(&v10[2 * a4], &destLen, a2, sourceLen);
  sub_2161A9C38(&v10[a4], sourceLen, a4, *(unsigned __int8 *)(a1 + 34));
  uLongf v11 = destLen;
  sub_2161A9C38(v10, destLen + a4, a4, *(unsigned __int8 *)(a1 + 34));
  if (a5) {
    *a5 = v11 + 2 * a4;
  }
  return v10;
}

unint64_t sub_2161B099C(uint64_t a1, void *__src, size_t __n)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    size_t v7 = *(void *)(a1 + 24);
    if (__n + 4 + *(unsigned int *)(a1 + 36) <= v7) {
      goto LABEL_11;
    }
    size_t v8 = (__n + 4) << 10;
    if (v8 >= __n + 262148) {
      size_t v8 = __n + 262148;
    }
    size_t v9 = v7 + v8;
  }
  else
  {
    size_t v10 = (__n << 10) + 4096;
    if (v10 >= __n + 262148) {
      size_t v10 = __n + 262148;
    }
    size_t v9 = v10 + 32;
  }
  uint64_t v6 = (*(uint64_t (**)(void))a1)();
  if (!v6) {
    return 0;
  }
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v9;
LABEL_11:
  unint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 44);
    if (v12)
    {
      unsigned int v13 = *(_DWORD *)(a1 + 40);
      if (v12 < v13)
      {
        *(_DWORD *)(a1 + 44) = v13;
        unsigned int v12 = v13;
      }
      if (v12 < v11)
      {
        int v14 = 0;
        size_t v15 = __n + 4;
        unint64_t v16 = v12;
        while (1)
        {
          uint64_t v17 = *(void *)(a1 + 16);
          unint64_t v18 = (_DWORD *)(v17 + v16);
          unsigned int v19 = *(_DWORD *)(v17 + v16);
          if (!v19)
          {
            size_t v20 = v18[1];
            unsigned int v19 = v18[1];
            uint64_t v21 = (_DWORD *)((char *)v18 + v20 + 4);
            unint64_t v22 = v17 + v11;
            if ((unint64_t)v21 >= v22)
            {
              int v23 = 0;
            }
            else
            {
              int v23 = 0;
              do
              {
                if (*v21) {
                  break;
                }
                unsigned int v24 = v21[1];
                uint64_t v21 = (_DWORD *)((char *)v21 + v24 + 4);
                v19 += v24 + 4;
                ++v23;
              }
              while ((unint64_t)v21 < v22);
              size_t v20 = v19;
            }
            if (v20 != __n && __n + 8 >= v20)
            {
              unint64_t v27 = 0;
              if (v14) {
                goto LABEL_37;
              }
            }
            else
            {
              *(_DWORD *)(a1 + 48) -= v23;
              *unint64_t v18 = __n;
              memcpy(v18 + 1, __src, __n);
              if (v20 > __n)
              {
                unint64_t v26 = (_DWORD *)((char *)v18 + v15);
                v19 -= v15;
                *unint64_t v26 = 0;
                v26[1] = v19;
                ++*(_DWORD *)(a1 + 48);
              }
              unint64_t v27 = v16;
              if (v14) {
                goto LABEL_37;
              }
            }
            if (v19 > 0x1F || v27)
            {
              *(_DWORD *)(a1 + 44) = v16;
LABEL_37:
              if (v27)
              {
                uint64_t v30 = *(_DWORD **)(a1 + 16);
                v30[4] = *(_DWORD *)(a1 + 44);
                goto LABEL_46;
              }
              int v14 = 1;
              goto LABEL_39;
            }
            int v14 = 0;
          }
LABEL_39:
          v16 += v19 + 4;
          unint64_t v11 = *(unsigned int *)(a1 + 36);
          if (v16 >= v11)
          {
            if (!v14) {
              break;
            }
            uint64_t v6 = *(void *)(a1 + 16);
            *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 44);
            goto LABEL_45;
          }
        }
      }
      *(_DWORD *)(a1 + 44) = 0;
      uint64_t v6 = *(void *)(a1 + 16);
      *(_DWORD *)(v6 + 16) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0x2000000001;
    *(_DWORD *)(a1 + 4sub_216195244(&a9, 0) = 32;
    *(void *)uint64_t v6 = 32;
    *(_DWORD *)(v6 + ++**(_DWORD **)(result + 8) = -*(_DWORD *)(a1 + 32);
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(v6 + 2sub_216195244(&a9, 0) = *(_DWORD *)(a1 + 48);
    *(void *)(v6 + 24) = -1;
  }
LABEL_45:
  unint64_t v27 = *(unsigned int *)(a1 + 36);
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(v6 + v27) = __n;
  uint64_t v28 = (*(_DWORD *)(a1 + 36) + 4);
  *(_DWORD *)(a1 + 36) = v28;
  memcpy((void *)(*(void *)(a1 + 16) + v28), __src, __n);
  int v29 = *(_DWORD *)(a1 + 36) + __n;
  *(_DWORD *)(a1 + 36) = v29;
  uint64_t v30 = *(_DWORD **)(a1 + 16);
  _DWORD *v30 = v29;
LABEL_46:
  if (*(int *)(a1 + 32) >= 1)
  {
    unsigned int v31 = *(_DWORD *)(a1 + 48);
    if (v31 >= 0x1389)
    {
      unsigned int v32 = *(_DWORD *)(a1 + 40);
      uint64_t v33 = 500;
      do
      {
        unint64_t v34 = (_DWORD *)((char *)v30 + v32);
        int v35 = *v34;
        if (!*v34) {
          int v35 = v34[1];
        }
        v32 += v35 + 4;
        *(_DWORD *)(a1 + 4sub_216195244(&a9, 0) = v32;
        --v33;
      }
      while (v33);
      v30[3] = v32;
      unsigned int v31 = 4501;
      *(_DWORD *)(a1 + 4++**(_DWORD **)(result + 8) = 4501;
    }
    v30[5] = v31;
  }
  return v27;
}

uint64_t sub_2161B0CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (*(unsigned char *)(a1 + 33) && (*(_WORD *)(a1 + 36) & 0xFFFE) != 2)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (*(unsigned char *)(a1 + 32))
    {
      unint64_t v7 = *(void *)(v6 + 40);
      if (v7 >= a6)
      {
        if (v7 == a6)
        {
          *(void *)(v6 + 4sub_216195244(&a9, 0) = a6 - 1;
          int v8 = *(_DWORD *)(v6 + 32) - *(_DWORD *)(v6 + 36);
          *(_DWORD *)(v6 + 32) = v8;
          **(_DWORD **)(v6 + 16) = v8;
        }
        return 1;
      }
    }
    else
    {
      unint64_t v10 = *(unsigned int *)(v6 + 36);
      if (v10 > a6)
      {
        unint64_t v11 = *(_DWORD **)(v6 + 16);
        unsigned int v12 = (_DWORD *)((char *)v11 + a6);
        uint64_t v13 = *(unsigned int *)((char *)v11 + a6);
        if (v13)
        {
          if (a6 + v13 + 4 == v10)
          {
            int v14 = v10 - v13 - 4;
            *(_DWORD *)(v6 + 36) = v14;
            _DWORD *v11 = v14;
            if (*(int *)(v6 + 32) >= 1)
            {
              int v15 = *(_DWORD *)(v6 + 48) - 1;
              *(_DWORD *)(v6 + 4++**(_DWORD **)(result + 8) = v15;
              v11[5] = v15;
            }
          }
          else
          {
            *unsigned int v12 = 0;
            if (v13 >= 4 && *(_DWORD *)(v6 + 32) >= 1)
            {
              v12[1] = v13;
              if (v13 >= 0x20 && *(unsigned int *)(v6 + 40) < a6)
              {
                unint64_t v18 = *(unsigned int *)(v6 + 44);
                if (!v18 || v18 > a6)
                {
                  *(_DWORD *)(v6 + 44) = a6;
                  v11[4] = a6;
                }
              }
            }
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

BOOL sub_2161B0DA8(uint64_t a1, int a2, CFArrayRef theArray, void *a4)
{
  int64_t Count = CFArrayGetCount(theArray);
  int v8 = (void **)malloc_type_malloc(8 * Count, 0x10040436913F5uLL);
  size_t v9 = (unint64_t *)malloc_type_malloc(8 * Count, 0x100004000313F17uLL);
  if (!*(unsigned char *)(a1 + 33)) {
    return 0;
  }
  unint64_t v10 = v9;
  if (!*(unsigned char *)(a1 + 32))
  {
    int v103 = (size_t *)malloc_type_calloc(8uLL, Count, 0x3625C7F5uLL);
    CFIndex v110 = 0;
    uint64_t v109 = 0;
    unsigned __int8 v108 = 0;
    (*(void (**)(void, uint64_t *, unsigned __int8 *))(a1 + 120))(*(void *)(a1 + 128), &v109, &v108);
    if ((*(_WORD *)(a1 + 36) & 0xFFFE) != 2)
    {
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, i);
          int v61 = *(unsigned __int8 *)(a1 + 35);
          BytePtr = CFDataGetBytePtr(ValueAtIndex);
          uLong Length = CFDataGetLength(ValueAtIndex);
          if (v61) {
            unint64_t v64 = sub_2161B08E0(a1, BytePtr, Length, v108, &v110);
          }
          else {
            unint64_t v64 = sub_2161A9B9C(BytePtr, Length, v108, *(unsigned __int8 *)(a1 + 34), (size_t *)&v110);
          }
          v8[i] = v64;
          v103[i] = v110;
        }
      }
      if (Count)
      {
        uint64_t v65 = *(void *)(a1 + 24);
        int64_t v28 = Count;
        uLong v66 = v8;
        unsigned __int8 v67 = v103;
        int v68 = v10;
        while (1)
        {
          size_t v69 = *v67++;
          unint64_t v70 = sub_2161B099C(v65, *v66, v69);
          *int v68 = v70;
          if (!v70) {
            break;
          }
          ++v68;
          ++v66;
          if (!--v28) {
            goto LABEL_92;
          }
        }
        LODWORD(v2++**(_DWORD **)(result + 8) = -1;
LABEL_92:
        if (Count >= 1)
        {
          int v75 = v8;
          int64_t v76 = Count;
          do
          {
            BOOL v77 = *v75++;
            free(v77);
            --v76;
          }
          while (v76);
        }
      }
      else
      {
        LODWORD(v2++**(_DWORD **)(result + 8) = 0;
      }
      BOOL v29 = 0;
LABEL_124:
      free(v103);
      goto LABEL_125;
    }
    CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
    uint64_t v107 = 0;
    unsigned __int8 v106 = 0;
    (*(void (**)(void, uint64_t *, unsigned __int8 *))(a1 + 80))(0, &v109, &v106);
    int64_t v101 = Count - 1;
    if (Count < 1)
    {
      CFRelease(Mutable);
      if (*(_WORD *)(a1 + 36) != 2) {
        *(_DWORD *)(*(void *)(a1 + 24) + 36) = *(void *)(a1 + 56);
      }
      LODWORD(v2++**(_DWORD **)(result + 8) = 0;
      BOOL v29 = a4 != 0;
      goto LABEL_124;
    }
    uint64_t v32 = 0;
    uint64_t v102 = 0;
    CFIndex v33 = 0;
    uint64_t v97 = v8;
    uint64_t v99 = v10;
    CFIndex v100 = Count;
    do
    {
      unint64_t v34 = 0;
      CFIndex v35 = v33;
      while (1)
      {
        uint64_t v104 = v34;
        CFDataRef v36 = (const __CFData *)CFArrayGetValueAtIndex(theArray, v35);
        uint64_t v37 = CFDataGetBytePtr(v36);
        size_t v38 = CFDataGetLength(v36);
        int v39 = sub_2161A9B9C(v37, v38, v106, *(unsigned __int8 *)(a1 + 34), (size_t *)&v110);
        if (a4)
        {
          char v40 = *(unsigned char *)(a1 + 112);
          a4[v35] = (v102 << v40) + CFDataGetLength(Mutable);
        }
        CFDataAppendBytes(Mutable, v39, v110);
        if (CFDataGetBytePtr(v36) != v39) {
          free(v39);
        }
        uint64_t v41 = CFDataGetBytePtr(Mutable);
        uLong v42 = CFDataGetLength(Mutable);
        uint64_t v43 = sub_2161B08E0(a1, v41, v42, v108, &v107);
        uint64_t v44 = v43;
        uint64_t v45 = v107;
        uint64_t v46 = *(void *)(a1 + 56);
        int64_t Count = v100;
        if (v107 > v46 || v35 == v101) {
          break;
        }
        uint64_t v32 = v107;
        if (v104)
        {
          free(v104);
          uint64_t v32 = v107;
        }
        BOOL v47 = v35 + 1 < v100;
        if (v35 + 1 >= v100) {
          unint64_t v34 = 0;
        }
        else {
          unint64_t v34 = v44;
        }
        if (v35 + 1 < v100) {
          ++v35;
        }
        else {
          CFIndex v35 = v33;
        }
        if (!v47 && v33 >= v100)
        {
          CFRelease(Mutable);
          int v8 = v97;
          unint64_t v10 = v99;
          uint64_t v71 = v102;
          goto LABEL_81;
        }
      }
      unint64_t v48 = v104;
      if (*(_WORD *)(a1 + 36) == 2 || v107 <= v46 || !v104)
      {
        if (v104)
        {
          free(v104);
          uint64_t v45 = v107;
        }
        CFIndex v33 = v35 + 1;
        uint64_t v32 = v45;
        unint64_t v48 = v44;
      }
      else
      {
        free(v43);
        CFIndex v33 = v35;
      }
      unint64_t v10 = v99;
      if (*(_WORD *)(a1 + 36) == 2)
      {
        char v49 = 0;
        v97[v102] = v44;
        int v8 = v97;
        v103[v102++] = v107;
      }
      else
      {
        BOOL v105 = v48;
        if (v32 < 1)
        {
          char v49 = 0;
          int v8 = v97;
        }
        else
        {
          int64_t v50 = *(void *)(a1 + 56);
          unint64_t v51 = v48;
          while (1)
          {
            uint64_t v52 = v102;
            uint64_t v53 = malloc_type_calloc(1uLL, v50, 0x4E9EF2FEuLL);
            uint64_t v54 = v53;
            size_t v55 = v32 >= *(void *)(a1 + 56) ? *(void *)(a1 + 56) : v32;
            memmove(v53, v51, v55);
            v97[v102] = v54;
            unint64_t v56 = *(void *)(a1 + 88);
            ++v102;
            if (v52 + 1 > v56) {
              break;
            }
            int64_t v50 = *(void *)(a1 + 56);
            v51 += v50;
            BOOL v47 = v32 <= v50;
            v32 -= v50;
            if (v47)
            {
              char v49 = 0;
              uint64_t v102 = v52 + 1;
              goto LABEL_63;
            }
          }
          fprintf((FILE *)*MEMORY[0x263EF8348], "Record count exceeds limit (%lld).\n", v56);
          char v49 = 1;
LABEL_63:
          int v8 = v97;
          unint64_t v10 = v99;
        }
        free(v105);
      }
      CFDataSetLength(Mutable, 0);
    }
    while (v33 < v100 && (v49 & 1) == 0);
    CFRelease(Mutable);
    uint64_t v71 = v102;
    if (v49)
    {
      BOOL v57 = 0;
      LODWORD(v2++**(_DWORD **)(result + 8) = -1;
      char v58 = 1;
LABEL_115:
      if (v71 >= 1)
      {
        uint64_t v89 = v8;
        do
        {
          uint64_t v90 = *v89++;
          free(v90);
          --v71;
        }
        while (v71);
      }
      goto LABEL_118;
    }
LABEL_81:
    uint64_t v72 = *(void *)(a1 + 24);
    if (*(_WORD *)(a1 + 36) == 2)
    {
      if (v71)
      {
        for (uint64_t j = 0; j != v71; ++j)
        {
          unint64_t v74 = sub_2161B099C(v72, v8[j], v103[j]);
          v10[j] = v74;
          BOOL v57 = v74 != 0;
          if (!v74)
          {
            char v58 = 0;
            LODWORD(v2++**(_DWORD **)(result + 8) = -1;
            goto LABEL_115;
          }
        }
        char v58 = 0;
        LODWORD(v2++**(_DWORD **)(result + 8) = 0;
        goto LABEL_115;
      }
LABEL_113:
      LODWORD(v2++**(_DWORD **)(result + 8) = 0;
      char v58 = 0;
      BOOL v57 = 1;
LABEL_118:
      BOOL v29 = 0;
      if ((v58 & 1) == 0 && a4 && v57)
      {
        char v91 = *(unsigned char *)(a1 + 112);
        uint64_t v92 = a4;
        CFIndex v93 = v100;
        do
        {
          *uint64_t v92 = (*(void *)(a1 + 104) & *v92) + (v10[((*(void *)(a1 + 96) & *v92) >> v91)] << v91);
          ++v92;
          --v93;
        }
        while (v93);
        BOOL v29 = 1;
      }
      goto LABEL_124;
    }
    *(_DWORD *)(v72 + 36) = *(void *)(a1 + 56);
    if (!v71) {
      goto LABEL_113;
    }
    uint64_t v78 = 0;
    while (1)
    {
      int v79 = *(_DWORD *)(v72 + 36);
      if (v79) {
        break;
      }
      unint64_t v86 = 0;
LABEL_111:
      v10[v78++] = v86;
      if (v71 == v78)
      {
        char v58 = 0;
        LODWORD(v2++**(_DWORD **)(result + 8) = 0;
        BOOL v57 = 1;
        goto LABEL_115;
      }
    }
    uint64_t v80 = v71;
    int v81 = v8[v78];
    uint64_t v82 = *(_DWORD **)(v72 + 16);
    if (v82)
    {
      unsigned int v83 = *(_DWORD *)(v72 + 32);
      unint64_t v84 = *(void *)(v72 + 24);
      if (v84 >= v83 + v79) {
        goto LABEL_106;
      }
      unint64_t v85 = v84 + (v79 << 10);
    }
    else
    {
      unint64_t v85 = (v79 << 10) | 8u;
    }
    uint64_t v82 = (_DWORD *)(*(uint64_t (**)(void))v72)();
    if (!v82)
    {
      unint64_t v86 = 0;
LABEL_110:
      uint64_t v71 = v80;
      goto LABEL_111;
    }
    *(void *)(v72 + 16) = v82;
    *(void *)(v72 + 24) = v85;
    unsigned int v83 = *(_DWORD *)(v72 + 32);
LABEL_106:
    if (!v83)
    {
      *(_DWORD *)(v72 + 32) = 8;
      *uint64_t v82 = 8;
      v82[1] = *(_DWORD *)(v72 + 36);
      unsigned int v83 = *(_DWORD *)(v72 + 32);
    }
    uint64_t v87 = *(void *)(v72 + 40);
    memcpy((char *)v82 + v83, v81, *(unsigned int *)(v72 + 36));
    int v88 = *(_DWORD *)(v72 + 32) + *(_DWORD *)(v72 + 36);
    *(_DWORD *)(v72 + 32) = v88;
    **(_DWORD **)(v72 + 16) = v88;
    ++*(void *)(v72 + 40);
    unint64_t v86 = v87 + 1;
    goto LABEL_110;
  }
  CFDataRef v11 = (const __CFData *)CFArrayGetValueAtIndex(theArray, 0);
  int v12 = CFDataGetLength(v11);
  if (Count >= 1)
  {
    for (CFIndex k = 0; k != Count; ++k)
    {
      CFDataRef v14 = (const __CFData *)CFArrayGetValueAtIndex(theArray, k);
      v8[k] = (void *)CFDataGetBytePtr(v14);
    }
  }
  uint64_t v15 = *(void *)(a1 + 24);
  *(_DWORD *)(v15 + 36) = v12;
  if (!Count)
  {
    LODWORD(v2++**(_DWORD **)(result + 8) = 0;
    BOOL v29 = 0;
    goto LABEL_125;
  }
  unint64_t v16 = (const void **)v8;
  unint64_t v98 = v10;
  uint64_t v17 = v10;
  int64_t v18 = Count;
  do
  {
    int v19 = *(_DWORD *)(v15 + 36);
    if (!v19)
    {
LABEL_18:
      unint64_t v27 = 0;
      goto LABEL_19;
    }
    size_t v20 = *v16;
    uint64_t v21 = *(_DWORD **)(v15 + 16);
    if (v21)
    {
      unsigned int v22 = *(_DWORD *)(v15 + 32);
      unint64_t v23 = *(void *)(v15 + 24);
      if (v23 >= v22 + v19) {
        goto LABEL_15;
      }
      unint64_t v24 = v23 + (v19 << 10);
    }
    else
    {
      unint64_t v24 = (v19 << 10) | 8u;
    }
    uint64_t v21 = (_DWORD *)(*(uint64_t (**)(void))v15)();
    if (!v21) {
      goto LABEL_18;
    }
    *(void *)(v15 + 16) = v21;
    *(void *)(v15 + 24) = v24;
    unsigned int v22 = *(_DWORD *)(v15 + 32);
LABEL_15:
    if (!v22)
    {
      *(_DWORD *)(v15 + 32) = 8;
      *uint64_t v21 = 8;
      v21[1] = *(_DWORD *)(v15 + 36);
      unsigned int v22 = *(_DWORD *)(v15 + 32);
    }
    uint64_t v25 = *(void *)(v15 + 40);
    memcpy((char *)v21 + v22, v20, *(unsigned int *)(v15 + 36));
    int v26 = *(_DWORD *)(v15 + 32) + *(_DWORD *)(v15 + 36);
    *(_DWORD *)(v15 + 32) = v26;
    **(_DWORD **)(v15 + 16) = v26;
    ++*(void *)(v15 + 40);
    unint64_t v27 = v25 + 1;
LABEL_19:
    *v17++ = v27;
    ++v16;
    --v18;
  }
  while (v18);
  LODWORD(v2++**(_DWORD **)(result + 8) = 0;
  BOOL v29 = 0;
  unint64_t v10 = v98;
LABEL_125:
  BOOL v30 = v28 == 0;
  if (!v28 && Count >= 1 && a4 && !v29)
  {
    uint64_t v94 = v10;
    do
    {
      uint64_t v95 = *v94++;
      *a4++ = v95;
      --Count;
    }
    while (Count);
  }
  free(v10);
  free(v8);
  return v30;
}

uint64_t sub_2161B1614(uint64_t a1)
{
  uint64_t v2 = (const char *)sub_2161ADEC8(a1);
  if (sub_2161AE140(a1)) {
    int v3 = open(v2, 2562, 438);
  }
  else {
    int v3 = open(v2, 2560, 438);
  }
  if (v3 != -1)
  {
    int v4 = v3;
    if (lseek(v3, 63, 0) != -1 && write(v4, &unk_2163A45DF, 1uLL) == 1)
    {
      close(v4);
      return 1;
    }
    close(v4);
    uint64_t v6 = (const std::__fs::filesystem::path *)sub_2161ADEC8(a1);
    remove(v6, v7);
  }
  return 0;
}

uint64_t sub_2161B16D0(uint64_t result)
{
  if (*(unsigned char *)(result + 32) || *(_WORD *)(result + 36) == 3)
  {
    uint64_t v1 = *(void *)(result + 24);
    unint64_t v2 = *(unsigned int *)(v1 + 32);
    if (*(void *)(v1 + 24) > v2)
    {
      uint64_t result = (*(uint64_t (**)(void, void, void))v1)(*(void *)(v1 + 16), *(unsigned int *)(v1 + 32), *(void *)(v1 + 8));
      if (result)
      {
        *(void *)(v1 + 16) = result;
        *(void *)(v1 + 24) = v2;
      }
    }
  }
  return result;
}

uint64_t sub_2161B172C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) || *(_WORD *)(a1 + 36) == 3)
  {
    uint64_t v1 = *(void *)(a1 + 24);
    unint64_t v2 = (unsigned int *)(v1 + 32);
  }
  else
  {
    uint64_t v1 = *(void *)(a1 + 24);
    unint64_t v2 = (unsigned int *)(v1 + 36);
  }
  return msync((void *)(*(void *)(v1 + 16) - 64), *v2 + 64, 16);
}

BOOL sub_2161B1770(uint64_t a1, int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 38);
  BOOL result = *(unsigned char *)(a1 + 38) == 0;
  if (v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = a2 == 0;
  }
  if (!v5)
  {
    off_t v20 = 0;
    uint64_t v6 = (const char *)sub_2161ADEC8(*(void *)(a1 + 8));
    int v7 = open(v6, 2 * *(unsigned __int8 *)(a1 + 33));
    if (v7 == -1) {
      return 0;
    }
    int v8 = v7;
    size_t v9 = (_DWORD *)sub_2161AFAFC(v7, *(unsigned __int8 *)(a1 + 33), &v20);
    close(v8);
    if (v9 == (_DWORD *)-1) {
      return 0;
    }
    unint64_t v10 = v9 + 16;
    unint64_t v11 = v20 - 64;
    v20 -= 64;
    if (!*(unsigned char *)(a1 + 32) && *(_WORD *)(a1 + 36) != 3)
    {
      int v12 = malloc_type_malloc(0x38uLL, 0x10900408C52C49CuLL);
      if (v12)
      {
        *int v12 = sub_2161B1940;
        v12[1] = a1;
        v12[2] = v10;
        void v12[3] = v11;
        *((_DWORD *)v12 + ++**(_DWORD **)(result + 8) = 0;
        void v12[5] = 0;
        *((_DWORD *)v12 + 12) = 0;
        if (v11 >= 4 && (unint64_t v15 = *v10, v11 >= v15))
        {
          *((_DWORD *)v12 + 9) = v15;
          if (v15 >= 0x20 && !v9[17])
          {
            int v19 = -v9[18] & ((int)v9[18] >> 31);
            *((_DWORD *)v12 + ++**(_DWORD **)(result + 8) = v19;
            if (v19 >= 1)
            {
              *((_DWORD *)v12 + 1sub_216195244(&a9, 0) = v9[19];
              *((_DWORD *)v12 + 11) = v9[20];
              *((_DWORD *)v12 + 12) = v9[21];
            }
          }
        }
        else
        {
          *((_DWORD *)v12 + 9) = 0;
        }
      }
      goto LABEL_15;
    }
    int v12 = malloc_type_malloc(0x30uLL, 0x109004033C35484uLL);
    if (!v12)
    {
LABEL_15:
      *(void *)(a1 + 24) = v12;
      return 1;
    }
    *int v12 = sub_2161B1940;
    v12[1] = a1;
    v12[2] = v10;
    void v12[3] = v11;
    if (v11 >= 4 && (unint64_t v13 = *v10, v11 >= v13))
    {
      *((_DWORD *)v12 + ++**(_DWORD **)(result + 8) = v13;
      BOOL v16 = v13 >= 8;
      unsigned int v17 = v13 - 8;
      if (v16)
      {
        unsigned int v18 = v9[17];
        *((_DWORD *)v12 + 9) = v18;
        if (!v18) {
          goto LABEL_15;
        }
        uint64_t v14 = v17 / v18;
        goto LABEL_14;
      }
    }
    else
    {
      *((_DWORD *)v12 + ++**(_DWORD **)(result + 8) = 0;
    }
    uint64_t v14 = 0;
    *((_DWORD *)v12 + 9) = 0;
LABEL_14:
    void v12[5] = v14;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_2161B1940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 33);
  uint64_t v6 = (const char *)sub_2161ADEC8(*(void *)(a3 + 8));
  int v7 = open(v6, 2 * v5);
  if (v7 == -1) {
    return 0;
  }
  int v8 = v7;
  if (fstat(v7, &v13) == -1) {
    return 0;
  }
  size_t v9 = (void *)(a1 - 64);
  off_t st_size = v13.st_size;
  msync(v9, v13.st_size, 16);
  munmap(v9, st_size);
  if (ftruncate(v8, a2 + 64) == -1) {
    return 0;
  }
  uint64_t v11 = sub_2161AFAFC(v8, v5 != 0, 0);
  close(v8);
  return v11 + 64;
}

uint64_t sub_2161B1A10(uint64_t result, int a2)
{
  if (a2)
  {
    if (*(unsigned char *)(result + 32) || *(_WORD *)(result + 36) == 3)
    {
      unint64_t v2 = *(unsigned int **)(result + 24);
      int v3 = v2 + 8;
    }
    else
    {
      unint64_t v2 = *(unsigned int **)(result + 24);
      int v3 = v2 + 9;
    }
    uint64_t v4 = *v3;
    uint64_t v5 = *((void *)v2 + 2);
    free(v2);
    uint64_t v6 = (void *)(v5 - 64);
    size_t v7 = v4 + 64;
    msync(v6, v7, 16);
    return munmap(v6, v7);
  }
  return result;
}

uint64_t sub_2161B1A98()
{
  return 0;
}

uint64_t sub_2161B1AA0()
{
  return 0;
}

uint64_t sub_2161B1AA8()
{
  return 0;
}

uint64_t sub_2161B1AB0()
{
  return 0;
}

BOOL sub_2161B1AB8(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 35) && *(unsigned char *)(a1 + 113) == 0;
}

uint64_t sub_2161B1AD8(int a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
  if (result)
  {
    uint64_t v5 = result;
    if (((*(uint64_t (**)(uint64_t))(*(void *)result + 104))(result) & 0x200) != 0)
    {
      uint64_t v6 = (const void *)*MEMORY[0x263EFFB40];
      CFDictionaryAddValue(a2, @"predictionCandidateAccepted", (const void *)*MEMORY[0x263EFFB40]);
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5) & 0x20000) != 0) {
        CFDictionaryAddValue(a2, @"lstmPredictionCandidateAccepted", v6);
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5) & 0x400000) != 0) {
        CFDictionaryAddValue(a2, @"unilmPredictionCandidateAccepted", v6);
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5) & 0x40000) != 0) {
        CFDictionaryAddValue(a2, @"ngramPredictionCandidateAccepted", v6);
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5) & 0x80000) != 0) {
        CFDictionaryAddValue(a2, @"lexiconCompletionPredictionCandidateAccepted", v6);
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5) & 0x800) != 0) {
        CFDictionaryAddValue(a2, @"lexiconDynamicLearningCandidateAccepted", v6);
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5) & 0x40) != 0) {
        CFDictionaryAddValue(a2, @"emojiCandidateAccepted", v6);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_2161B1D54()
{
}

uint64_t sub_2161B1D68(uint64_t a1, void *a2)
{
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6BD2E8;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = a2;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 12++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_216195244(&a9, 0) = 0;
  *(unsigned char *)(a1 + 64) = sub_2161AE140((uint64_t)a2);
  BOOL v4 = sub_2161AE1E4((uint64_t)a2);
  *(_WORD *)(a1 + 66) = 0;
  *(unsigned char *)(a1 + 65) = v4;
  CFDictionaryRef v5 = (const __CFDictionary *)a2[1];
  if (v5)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v5, @"TrieIndexCompressionType");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt16Type, (void *)(a1 + 66));
    }
  }
  unsigned __int8 v7 = sub_2161ADF7C(a2);
  uint64_t v8 = sub_2161AE080((uint64_t)a2);
  BOOL v9 = sub_2161AE1E4((uint64_t)a2);
  *(void *)(a1 + 16sub_216195244(&a9, 0) = sub_2161A99FC(v7, v8, v9, (void *)(a1 + 168));
  return a1;
}

void sub_2161B1E48(_Unwind_Exception *a1)
{
  sub_2161AF9AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161B1E60(void *a1)
{
  *a1 = &unk_26C6BD2E8;
  uint64_t v2 = a1[9];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  }
  uint64_t v3 = a1[16];
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1060C8043D569EALL);
  }
  uint64_t v4 = a1[6];
  if (v4) {
    MEMORY[0x2166CA7C0](v4, 0x1000C8077774924);
  }

  return sub_2161AF9AC((uint64_t)a1);
}

void sub_2161B1F08(void *a1)
{
  sub_2161B1E60(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161B1F40(uint64_t a1, unsigned __int16 *__src, uint64_t a3, CFStringRef theString1)
{
  if (*(CFStringRef *)(a1 + 96) == theString1) {
    goto LABEL_26;
  }
  if (CFStringCompare(theString1, @"IDXExactMatch", 0))
  {
    if (CFStringCompare(theString1, @"IDXExactMatchVoicedAmbi", 0))
    {
      if (CFStringCompare(theString1, @"IDXExactMatchSmallAmbi", 0))
      {
        if (CFStringCompare(theString1, @"IDXExactMatchVoicedAndSmallAmbi", 0))
        {
          if (CFStringCompare(theString1, @"IDXCommonPrefixMatch", 0))
          {
            if (CFEqual(theString1, @"IDXPrefixMatch"))
            {
LABEL_24:
              int v9 = 1;
              goto LABEL_25;
            }
            if (CFStringCompare(theString1, @"IDXPrefixMatchVoicedAmbi", 0))
            {
              if (CFStringCompare(theString1, @"IDXPrefixMatchSmallAmbi", 0))
              {
                if (CFStringCompare(theString1, @"IDXPrefixMatchVoicedAndSmallAmbi", 0))
                {
                  if (CFStringCompare(theString1, @"IDXWildcardMatch", 0))
                  {
                    if (CFStringCompare(theString1, @"IDXAllMatch", 0)) {
                      return 0;
                    }
                    a3 = 0;
                    __src = 0;
                    goto LABEL_24;
                  }
                  int v9 = 3;
                }
                else
                {
                  int v9 = 9;
                }
              }
              else
              {
                int v9 = 8;
              }
            }
            else
            {
              int v9 = 7;
            }
          }
          else
          {
            int v9 = 2;
          }
        }
        else
        {
          int v9 = 6;
        }
      }
      else
      {
        int v9 = 5;
      }
    }
    else
    {
      int v9 = 4;
    }
  }
  else
  {
    int v9 = 0;
  }
LABEL_25:
  *(_DWORD *)(a1 + 104) = v9;
  *(void *)(a1 + 96) = theString1;
LABEL_26:
  if (a3 > *(void *)(a1 + 80))
  {
    *(void *)(a1 + 8sub_216195244(&a9, 0) = a3 + 128;
    uint64_t v10 = *(void *)(a1 + 72);
    if (v10) {
      MEMORY[0x2166CA7C0](v10, 0x1000C80BDFB0063);
    }
    operator new[]();
  }
  *(void *)(a1 + 8++**(_DWORD **)(result + 8) = 2 * a3;
  if (a3 >= 1 && __src)
  {
    uint64_t v11 = *(_WORD **)(a1 + 72);
    if (*(unsigned char *)(a1 + 65))
    {
      int v12 = v11 + 1;
      stat v13 = __src + 1;
      do
      {
        unsigned int v14 = *v13++;
        *v12++ = bswap32(v14) >> 16;
        --a3;
      }
      while (a3);
    }
    else
    {
      memcpy(v11, __src, 2 * a3);
    }
  }
  *(unsigned char *)(a1 + 10++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t result = 1;
  *(void *)(a1 + 152) = 0;
  return result;
}

uint64_t sub_2161B2248(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 64))();
}

uint64_t sub_2161B2270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2161B22A4(a1, a2, a3, a4, 0, 0, 0, 0, 0);
}

uint64_t sub_2161B22A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t *a9)
{
  uint64_t v17 = a8;
  size_t v16 = 0;
  uint64_t v11 = *(void *)(a1 + 152);
  if (v11)
  {
    uint64_t v12 = sub_2161B2820(a1, v11, 0, *(_DWORD *)(a1 + 136), *(void *)(a1 + 144), a2, a3, a4, a5, a6, a7, &v17, &v16);
    a2 -= v12;
    size_t v13 = v16;
  }
  else
  {
    size_t v13 = 0;
    uint64_t v12 = 0;
  }
  if (a2 >= 1 && !v13)
  {
    if (!*(unsigned char *)(a1 + 108)) {
      operator new[]();
    }
    size_t v13 = 0;
  }
  if (a9)
  {
    if (*(unsigned char *)(a1 + 108))
    {
      size_t v14 = *(void *)(a1 + 152);
      if (!v14) {
        goto LABEL_13;
      }
    }
    if (!v12)
    {
      size_t v14 = v13 + 16;
LABEL_13:
      *a9 = v14;
    }
  }
  return v12;
}

uint64_t sub_2161B27CC(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4, uint64_t *a5, size_t *a6)
{
  *a5 = a4;
  if (a6) {
    *a6 = a3;
  }
  if (!a2) {
    a2 = 1000;
  }
  return sub_2161B22A4(a1, a2, 0, 0, 1, a4, a4, a4 + a3, a6);
}

uint64_t sub_2161B2820(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, void *a12, size_t *a13)
{
  uint64_t v14 = a3;
  uint64_t v15 = a1;
  uint64_t v16 = 0;
  size_t v17 = a2 + a3;
  *(void *)(a1 + 152) = 0;
  uint64_t v18 = a4;
  while (1)
  {
    unsigned __int8 v30 = 0;
    uint64_t v19 = (*(uint64_t (**)(void, size_t, unsigned __int8 *))(v15 + 160))(*(void *)(v15 + 168), v17, &v30);
    size_t v20 = v19;
    if (!a9) {
      break;
    }
    uint64_t v21 = (void *)(*a12 - v19);
    if (a10 + 16 * (v16 + 1) > (unint64_t)v21)
    {
      *a13 = v20;
      size_t v17 = a2 + v30 + v20 + v14;
      ++a5;
LABEL_11:
      uint64_t v15 = a1;
      goto LABEL_13;
    }
    *a12 = v21;
    memmove(v21, (const void *)(v17 + v30), v20);
    unsigned int v22 = (void *)(a10 + 16 * v16);
    *unsigned int v22 = *a12 - a11;
    v22[1] = v20;
    v14 += v20 + v30;
    size_t v17 = a2 + v14;
    ++a5;
    if (v16 + 1 == a6)
    {
      uint64_t v16 = a6;
      goto LABEL_11;
    }
    ++v16;
    uint64_t v15 = a1;
LABEL_7:
    if (a5 == v18) {
      return v16;
    }
  }
  *(void *)(a8 + 8 * v16) = v19;
  uint64_t v23 = v30;
  *(void *)(a7 + 8 * v16++) = v17 + v30;
  v14 += v19 + v23;
  size_t v17 = a2 + v14;
  ++a5;
  if (v16 != a6) {
    goto LABEL_7;
  }
  uint64_t v16 = a6;
LABEL_13:
  if (a5 < v18)
  {
    *(void *)(v15 + 144) = a5;
    *(void *)(v15 + 152) = v17;
    *(void *)(v15 + 136) = v18;
  }
  return v16;
}

uint64_t sub_2161B29D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40)))
  {
    uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 40) + 48);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (!v8)
    {
      *(void *)(a1 + 56) = 0x8000;
      operator new[]();
    }
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40), a2, *(void *)(a1 + 56), v8);
    if (v9 > *(void *)(a1 + 56))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      if (v10) {
        MEMORY[0x2166CA7C0](v10, 0x1000C8077774924);
      }
      *(void *)(a1 + 56) = v9;
      operator new[]();
    }
    if (a3) {
      *a3 = v9;
    }
    return *(void *)(a1 + 48);
  }
}

BOOL sub_2161B2B68(uint64_t a1, void *a2, uint8x8_t a3)
{
  BOOL result = 0;
  uint64_t v28 = *MEMORY[0x263EF8340];
  CFDictionaryRef v5 = *(unsigned __int8 **)(a1 + 72);
  unint64_t v6 = *(void *)(a1 + 88);
  v24[0] = 0;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  int v27 = 0;
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    int v8 = *(_DWORD *)(a1 + 104);
    if (a2 && v8 == 2)
    {
      if ((int)((v6 >> 1) - 1) < 0) {
        return 0;
      }
      bzero(a2, (v6 >> 1));
      int v8 = *(_DWORD *)(a1 + 104);
    }
    BOOL result = 0;
    switch(v8)
    {
      case 0:
        uint64_t v9 = *(void *)(a1 + 24);
        if (*(_WORD *)(a1 + 66))
        {
          BOOL v10 = sub_21628D540(v9, v5, v6, a3) == 0;
          goto LABEL_35;
        }
        return (int)sub_216287948(v9, v5, v6) > 0;
      case 1:
        uint64_t v11 = *(int **)(a1 + 24);
        if (*(_WORD *)(a1 + 66))
        {
          unint64_t v22 = 0;
          uint64_t v23 = 0;
          sub_21628CFAC((uint64_t)v11, *v11, v5, v6, &v23, 1uLL, &v22, (uint64_t)v24, a3, 0, (uint64_t)v5);
          BOOL v10 = v22 == 0;
          goto LABEL_35;
        }
        unint64_t v13 = sub_216243284((uint64_t)v11, v5, v6, 0, 1uLL, 0, (uint64_t)v24);
        goto LABEL_34;
      case 3:
        uint64_t v12 = *(unsigned int **)(a1 + 24);
        if (*(_WORD *)(a1 + 66)) {
          unint64_t v13 = sub_216212C04(v12, (unsigned __int16 *)v5, v6, 2u, 0, 1uLL, (uint64_t)v24, 0, a3);
        }
        else {
          unint64_t v13 = sub_216327718((uint64_t)v12, (uint64_t)v5, v6, *(unsigned char *)(a1 + 65) == 0, 2u, 0, 1uLL, (uint64_t)v24);
        }
        goto LABEL_34;
      case 4:
        if (*(_WORD *)(a1 + 66)) {
          return 0;
        }
        uint64_t v14 = *(void *)(a1 + 24);
        uint64_t v15 = (uint64_t)v5;
        uint64_t v16 = v6;
        int v17 = 10;
        goto LABEL_22;
      case 5:
        if (*(_WORD *)(a1 + 66)) {
          return 0;
        }
        uint64_t v14 = *(void *)(a1 + 24);
        uint64_t v15 = (uint64_t)v5;
        uint64_t v16 = v6;
        int v17 = 12;
        goto LABEL_22;
      case 6:
        if (*(_WORD *)(a1 + 66)) {
          return 0;
        }
        uint64_t v14 = *(void *)(a1 + 24);
        uint64_t v15 = (uint64_t)v5;
        uint64_t v16 = v6;
        int v17 = 14;
LABEL_22:
        unint64_t v13 = sub_216243B00(v14, v15, v16, 0, 1uLL, (uint64_t)v24, v17);
        goto LABEL_34;
      case 7:
        if (*(_WORD *)(a1 + 66)) {
          return 0;
        }
        uint64_t v18 = *(void *)(a1 + 24);
        uint64_t v19 = (uint64_t)v5;
        uint64_t v20 = v6;
        int v21 = 10;
        goto LABEL_33;
      case 8:
        if (*(_WORD *)(a1 + 66)) {
          return 0;
        }
        uint64_t v18 = *(void *)(a1 + 24);
        uint64_t v19 = (uint64_t)v5;
        uint64_t v20 = v6;
        int v21 = 12;
        goto LABEL_33;
      case 9:
        if (*(_WORD *)(a1 + 66)) {
          return 0;
        }
        uint64_t v18 = *(void *)(a1 + 24);
        uint64_t v19 = (uint64_t)v5;
        uint64_t v20 = v6;
        int v21 = 14;
LABEL_33:
        unint64_t v13 = sub_216244078(v18, v19, v20, 0, 1uLL, (uint64_t)v24, v21);
LABEL_34:
        BOOL v10 = v13 == 0;
LABEL_35:
        BOOL result = !v10;
        break;
      default:
        return result;
    }
  }
  return result;
}

BOOL sub_2161B2E68(uint64_t a1, unsigned __int8 *a2, uint64_t a3, const void *a4, size_t a5, void *a6)
{
  v35[1] = *MEMORY[0x263EF8340];
  v35[0] = a5;
  if (!*(unsigned char *)(a1 + 64) || *(_WORD *)(a1 + 66)) {
    return 0;
  }
  uint64_t v12 = 2 * a3;
  MEMORY[0x270FA5388]();
  if (*(unsigned char *)(a1 + 65))
  {
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
        *(_WORD *)((char *)&v27 + 2 * i - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0) + 2) = bswap32(*(unsigned __int16 *)&a2[2 * i + 2]) >> 16;
    }
    a2 = (unsigned __int8 *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  uint64_t v34 = 0;
  unsigned __int8 v33 = 0;
  (*(void (**)(void, uint64_t *, unsigned __int8 *))(a1 + 160))(*(void *)(a1 + 168), &v34, &v33);
  uint64_t v15 = sub_2161A9B9C(a4, a5, v33, *(unsigned __int8 *)(a1 + 65), v35);
  int v16 = sub_216287948(*(void *)(a1 + 24), a2, v12);
  if (v16 < 1)
  {
    size_t v20 = v35[0];
    size_t v21 = v35[0] + 4;
    unint64_t v22 = malloc_type_malloc(v35[0] + 4, 0xDFE39E8EuLL);
    memcpy(v22 + 1, v15, v20);
    if (*(unsigned char *)(a1 + 65)) {
      int v24 = 0x1000000;
    }
    else {
      int v24 = 1;
    }
    *unint64_t v22 = v24;
  }
  else
  {
    uint64_t v28 = a6;
    uint64_t v30 = v12;
    unsigned int v31 = &v27;
    size_t v32 = 0;
    uint64_t v17 = v16;
    uint64_t v18 = (_DWORD *)sub_2161B29D4(a1, v16, (uint64_t *)&v32);
    size_t v19 = v32;
    size_t v20 = v35[0];
    size_t v21 = v35[0] + v32;
    unint64_t v22 = malloc_type_malloc(v35[0] + v32, 0xC3CD8DA7uLL);
    memcpy(v22, v18, v32);
    BOOL v29 = v15;
    memcpy((char *)v22 + v19, v15, v20);
    if (*(unsigned char *)(a1 + 65)) {
      int v23 = bswap32(bswap32(*v18) + 1);
    }
    else {
      int v23 = *v18 + 1;
    }
    *unint64_t v22 = v23;
    (*(void (**)(void, void, void, void, void, uint64_t))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40), 0, 0, 0, 0, v17);
    uint64_t v12 = v30;
    a6 = v28;
    uint64_t v15 = v29;
  }
  if (v20 != a5) {
    free(v15);
  }
  size_t v32 = 0;
  int v25 = (*(uint64_t (**)(void, void, void, _DWORD *, size_t, size_t *))(**(void **)(a1 + 40) + 72))(*(void *)(a1 + 40), 0, 0, v22, v21, &v32);
  free(v22);
  if (!v25) {
    return 0;
  }
  int v26 = sub_216287A90(*(void *)(a1 + 24), (uint64_t)a2, v12, v32);
  if (a6) {
    *a6 = 0;
  }
  sub_2161B3170(a1);
  return v26 == 0;
}

uint64_t sub_2161B3170(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (*(_WORD *)(a1 + 66))
  {
    if (v2)
    {
      uint64_t v3 = v2[1];
      uint64_t v4 = v2[2] - v3 + v2[3];
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v4 = 8 * (*((_DWORD *)v2 + 4) + 259) + 16;
    uint64_t v3 = *v2;
  }
  msync((void *)(v3 - 64), v4 + 64, 16);
  uint64_t v5 = *(void *)(a1 + 40);

  return sub_2161B172C(v5);
}

BOOL sub_2161B31F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, const void *a4, size_t a5)
{
  v36[1] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64) && !*(_WORD *)(a1 + 66))
  {
    uint64_t v10 = 2 * a3;
    MEMORY[0x270FA5388]();
    if (*(unsigned char *)(a1 + 65))
    {
      if (v11)
      {
        for (uint64_t i = 0; i != v11; ++i)
          *(_WORD *)((char *)&v28 + 2 * i - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 2) = bswap32(*(unsigned __int16 *)&a2[2 * i + 2]) >> 16;
      }
      a2 = (unsigned __int8 *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    }
    int v13 = sub_216287948(*(void *)(a1 + 24), a2, v10);
    if (v13 < 1) {
      return 0;
    }
    v36[0] = 0;
    uint64_t v14 = v13;
    uint64_t v15 = (unsigned int *)sub_2161B29D4(a1, v13, v36);
    if (!v15) {
      return 0;
    }
    int v16 = v15;
    int v17 = *(unsigned __int8 *)(a1 + 65);
    size_t v32 = &v28;
    if (v17) {
      unsigned int v18 = bswap32(*v15);
    }
    else {
      unsigned int v18 = *v15;
    }
    unint64_t v30 = v10;
    uint64_t v31 = v14;
    BOOL v29 = a2;
    uint64_t v19 = 8 * v18;
    uint64_t v34 = (char *)malloc_type_malloc(v36[0] + v19, 0x9D5FE6B5uLL);
    if (v19)
    {
      unsigned __int8 v33 = a4;
      unsigned int v20 = 0;
      uint64_t v21 = 4;
      uint64_t v22 = 4;
      do
      {
        LOBYTE(v35) = 0;
        uint64_t v23 = (*(uint64_t (**)(void, uint64_t, uint64_t *))(a1 + 160))(*(void *)(a1 + 168), (uint64_t)v16 + v22, &v35);
        uint64_t v24 = v35;
        if (v23 == a5 && !memcmp(v33, (char *)v16 + v22 + v35, a5))
        {
          size_t v25 = v23 + v24;
        }
        else
        {
          size_t v25 = v23 + v24;
          memcpy(&v34[v21], (char *)v16 + v22, v25);
          v21 += v25;
          ++v20;
        }
        v22 += v25;
        LODWORD(v19) = v19 - 1;
      }
      while (v19);
    }
    else
    {
      unsigned int v20 = 0;
      uint64_t v21 = 4;
    }
    if (*(unsigned char *)(a1 + 65)) {
      *(_DWORD *)uint64_t v34 = bswap32(v20);
    }
    else {
      *(_DWORD *)uint64_t v34 = v20;
    }
    (*(void (**)(void, void, void, void, void, uint64_t))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40), 0, 0, 0, 0, v31);
    if (v20)
    {
      uint64_t v35 = 0;
      if (!(*(unsigned int (**)(void, void, void, char *, uint64_t, uint64_t *))(**(void **)(a1 + 40)
                                                                                               + 72))(*(void *)(a1 + 40), 0, 0, v34, v21, &v35))
      {
        BOOL v6 = 0;
        goto LABEL_33;
      }
      int v26 = sub_216287A90(*(void *)(a1 + 24), (uint64_t)v29, v30, v35);
    }
    else
    {
      int v26 = sub_21628804C(*(void *)(a1 + 24), (uint64_t)v29, v30);
    }
    BOOL v6 = v26 == 0;
LABEL_33:
    free(v34);
    sub_2161B3170(a1);
    return v6;
  }
  return 0;
}

uint64_t sub_2161B34F4(uint64_t a1, CFArrayRef theArray)
{
  CFArrayGetCount(theArray);
  if (*(unsigned char *)(a1 + 64))
  {
    v5[1] = 0;
    v5[0] = 0;
    char v4 = 0;
    (*(void (**)(void, void *, char *))(a1 + 160))(*(void *)(a1 + 168), v5, &v4);
    operator new[]();
  }
  return 0;
}

uint64_t sub_2161B3AAC(const void ***a1, const void ***a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  char v4 = **a1;
  uint64_t v5 = v2[1];
  BOOL v6 = **a2;
  BOOL v7 = v3[1];
  if ((uint64_t)v5 >= (uint64_t)v7) {
    size_t v8 = (size_t)v3[1];
  }
  else {
    size_t v8 = (size_t)v2[1];
  }
  uint64_t result = memcmp(v4, v6, v8);
  if (!result)
  {
    uint64_t result = (v5 - v7);
    if (v5 == v7) {
      return (*((_DWORD *)v2 + 6) - *((_DWORD *)v3 + 6));
    }
  }
  return result;
}

uint64_t sub_2161B3B04(uint64_t a1)
{
  uint64_t v2 = (const char *)sub_2161ADEC8(a1);
  if (sub_2161AE140(a1)) {
    int v3 = open(v2, 2562, 438);
  }
  else {
    int v3 = open(v2, 2560, 438);
  }
  if (v3 != -1)
  {
    int v4 = v3;
    if (lseek(v3, 4159, 0) != -1 && write(v4, &unk_2163A45F9, 1uLL) == 1)
    {
      close(v4);
      sub_2161B3BF0(a1);
    }
    close(v4);
    uint64_t v5 = (const std::__fs::filesystem::path *)sub_2161ADEC8(a1);
    remove(v5, v6);
  }
  return 0;
}

void sub_2161B3BF0(uint64_t a1)
{
  keys[2] = *(void **)MEMORY[0x263EF8340];
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 8);
  if (v2)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v2, @"TrieAuxiliaryDataOptions");
    if (Value)
    {
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(0, 0, Value);
      CFMutableDataRef Mutable = MutableCopy;
      BOOL v6 = MutableCopy == 0;
      if (MutableCopy)
      {
        CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(MutableCopy, @"IDXIndexPath");
        if (v7)
        {
LABEL_5:
          CFStringRef v8 = v7;
          char v9 = 1;
          goto LABEL_17;
        }
        CFDictionaryRef v33 = *(const __CFDictionary **)(a1 + 8);
        if (!v33)
        {
          BOOL v6 = 0;
          goto LABEL_15;
        }
        CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(v33, @"TrieAuxiliaryDataFile");
        if (v7) {
          goto LABEL_5;
        }
        goto LABEL_31;
      }
      CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 8);
      if (v14)
      {
        CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(v14, @"TrieAuxiliaryDataFile");
        if (!v11)
        {
LABEL_31:
          CFDictionaryRef v34 = *(const __CFDictionary **)(a1 + 8);
          if (v34)
          {
            CFStringRef v35 = (const __CFString *)CFDictionaryGetValue(v34, @"TrieSubIndexPath");
            if (v35)
            {
              CFStringRef v8 = v35;
              BOOL v6 = 1;
              char v9 = 1;
              if (Mutable)
              {
LABEL_17:
                CFDictionarySetValue(Mutable, @"IDXIndexAccessMethod", @"com.apple.HeapAccessMethod");
                CFStringRef v18 = (const __CFString *)sub_2161ADE7C(a1);
                if (CFStringFind(v18, @"/", 0).location == -1)
                {
                  CFStringRef v23 = (const __CFString *)CFRetain(v8);
                }
                else
                {
                  CFStringRef v19 = (const __CFString *)sub_2161ADE7C(a1);
                  CFURLRef v20 = CFURLCreateWithFileSystemPath(0, v19, kCFURLPOSIXPathStyle, 0);
                  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, v20);
                  CFURLRef v22 = CFURLCreateCopyAppendingPathComponent(0, PathComponent, v8, 0);
                  CFStringRef v23 = CFURLCopyFileSystemPath(v22, kCFURLPOSIXPathStyle);
                  CFRelease(v20);
                  CFRelease(PathComponent);
                  CFRelease(v22);
                }
                CFDictionarySetValue(Mutable, @"IDXIndexPath", v23);
                if ((v9 & 1) == 0) {
                  CFRelease(v8);
                }
                CFDictionarySetValue(Mutable, @"IDXIndexSupportDataID", (const void *)*MEMORY[0x263EFFB40]);
                CFDictionaryRef v24 = *(const __CFDictionary **)(a1 + 8);
                if (v24) {
                  size_t v25 = CFDictionaryGetValue(v24, @"IDXIndexWritable");
                }
                else {
                  size_t v25 = 0;
                }
                CFDictionarySetValue(Mutable, @"IDXIndexWritable", v25);
                CFDictionaryRef v26 = *(const __CFDictionary **)(a1 + 8);
                if (v26) {
                  uint64_t v27 = CFDictionaryGetValue(v26, @"IDXIndexBigEndian");
                }
                else {
                  uint64_t v27 = 0;
                }
                CFDictionarySetValue(Mutable, @"IDXIndexBigEndian", v27);
                keys[0] = @"IDXDataFieldName";
                keys[1] = @"IDXDataSizeLength";
                __int16 valuePtr = 4;
                values = @"Packed Homograph";
                CFNumberRef v39 = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
                CFTypeRef cf = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                CFRelease(v39);
                CFArrayRef v28 = CFArrayCreate(0, &cf, 1, MEMORY[0x263EFFF70]);
                CFRelease(cf);
                keys[0] = @"IDXVariableDataFields";
                values = v28;
                CFDictionaryRef v29 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
                CFRelease(v28);
                CFDictionarySetValue(Mutable, @"IDXIndexDataFields", v29);
                CFRelease(v29);
                CFStringRef v30 = CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
                CFMutableStringRef v31 = CFStringCreateMutableCopy(0, 0, v30);
                CFRelease(v30);
                CFStringRef v32 = (const __CFString *)sub_2161ADE7C(a1);
                CFStringTrim(v31, v32);
                CFStringAppend(v31, v23);
                CFURLCreateWithFileSystemPath(0, v31, kCFURLPOSIXPathStyle, 0);
                CFRelease(v31);
                CFRelease(v23);
                operator new();
              }
LABEL_16:
              CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              char v9 = v6;
              goto LABEL_17;
            }
          }
          goto LABEL_15;
        }
LABEL_13:
        CFStringRef v8 = v11;
        BOOL v6 = 1;
        goto LABEL_16;
      }
    }
    else
    {
      CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 8);
      if (v10)
      {
        CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(v10, @"TrieAuxiliaryDataFile");
        if (v11) {
          goto LABEL_13;
        }
        CFDictionaryRef v12 = *(const __CFDictionary **)(a1 + 8);
        if (v12)
        {
          CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(v12, @"TrieSubIndexPath");
          BOOL v6 = 1;
          if (v13)
          {
            CFStringRef v8 = v13;
            goto LABEL_16;
          }
          CFMutableDataRef Mutable = 0;
LABEL_15:
          BOOL v15 = v6;
          CFURLRef v16 = CFURLCreateCopyDeletingPathExtension(0, *(CFURLRef *)a1);
          CFStringRef v17 = CFURLCopyLastPathComponent(v16);
          CFRelease(v16);
          CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"%@_aux.data", v17);
          CFRelease(v17);
          BOOL v6 = 0;
          char v9 = 0;
          if (!v15) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }
    }
  }
  CFMutableDataRef Mutable = 0;
  BOOL v6 = 1;
  goto LABEL_15;
}

void sub_2161B4108(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_2161B4134(uint64_t a1, int a2)
{
  if (*(unsigned __int16 *)(a1 + 66) <= 1u && (!*(_WORD *)(a1 + 66) || !*(unsigned char *)(a1 + 65)))
  {
    if (!a2) {
      operator new();
    }
    off_t v10 = 0;
    int v3 = (const char *)sub_2161ADEC8(*(void *)(a1 + 8));
    int v4 = open(v3, 2 * *(unsigned __int8 *)(a1 + 64));
    if (v4 != -1)
    {
      int v5 = v4;
      uint64_t v6 = sub_2161AFAFC(v4, *(unsigned __int8 *)(a1 + 64), &v10);
      close(v5);
      if (v6 != -1)
      {
        unint64_t v7 = v10 - 64;
        v10 -= 64;
        if (*(_WORD *)(a1 + 66)) {
          sub_21628D460((uint64_t)sub_2161B42B8, a1, v6 + 64, v7);
        }
        else {
          CFStringRef v8 = sub_216287840((uint64_t)sub_2161B42B8, (int *)(v6 + 64), v7, a1);
        }
        *(void *)(a1 + 24) = v8;
        sub_2161B3BF0(*(void *)(a1 + 8));
      }
    }
  }
  return 0;
}

void sub_2161B4294(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40614AD078);
  _Unwind_Resume(a1);
}

uint64_t sub_2161B42B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 64);
  uint64_t v6 = (const char *)sub_2161ADEC8(*(void *)(a3 + 8));
  int v7 = open(v6, 2 * v5);
  if (v7 == -1) {
    return 0;
  }
  int v8 = v7;
  if (fstat(v7, &v13) == -1) {
    return 0;
  }
  char v9 = (void *)(a1 - 64);
  off_t st_size = v13.st_size;
  msync(v9, v13.st_size, 16);
  munmap(v9, st_size);
  if (ftruncate(v8, a2 + 64) == -1) {
    return 0;
  }
  uint64_t v11 = sub_2161AFAFC(v8, v5 != 0, 0);
  close(v8);
  return v11 + 64;
}

uint64_t sub_2161B4388(uint64_t a1, int a2)
{
  sub_2161AFA8C(*(void **)(a1 + 40));
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (a2)
  {
    int v5 = *(void ***)(a1 + 24);
    if (*(_WORD *)(a1 + 66))
    {
      if (v5)
      {
        uint64_t v6 = (char *)v5[1];
        uint64_t v7 = (uint64_t)v5[3] + (unsigned char *)v5[2] - v6;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v6 = 0;
      }
      sub_21628D4F4(v5);
    }
    else
    {
      uint64_t v7 = 8 * (*((_DWORD *)v5 + 4) + 259) + 16;
      uint64_t v6 = (char *)*v5;
      sub_2162878F8(v5);
    }
    int v8 = v6 - 64;
    size_t v9 = v7 + 64;
    msync(v8, v9, 16);
    munmap(v8, v9);
    uint64_t result = *(void *)(a1 + 32);
    if (result)
    {
      sub_2161ADD94(result);
      JUMPOUT(0x2166CA800);
    }
  }
  return result;
}

uint64_t sub_2161B4498()
{
  return 0;
}

uint64_t sub_2161B44A0()
{
  return 0;
}

std::string *sub_2161B44A8(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = __dst->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_2161B4568(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return sub_2161B44A8(a1, __s, v4);
}

uint64_t sub_2161B45B0(uint64_t a1)
{
  sub_216104CC4((uint64_t)v10);
  CFDictionaryRef v2 = *(long long **)(a1 + 8);
  for (i = *(long long **)(a1 + 16); v2 != i; CFDictionaryRef v2 = (long long *)((char *)v2 + 24))
  {
    if (*((char *)v2 + 23) < 0)
    {
      sub_21610A674(__p, *(void **)v2, *((void *)v2 + 1));
    }
    else
    {
      long long v4 = *v2;
      uint64_t v16 = *((void *)v2 + 2);
      *(_OWORD *)long long __p = v4;
    }
    if (v16 >= 0) {
      int v5 = (char *)__p;
    }
    else {
      int v5 = (char *)__p[0];
    }
    if (v16 >= 0) {
      size_t v6 = HIBYTE(v16);
    }
    else {
      size_t v6 = (size_t)__p[1];
    }
    sub_216104F74(v10, v5, v6, 1.0);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_2161055DC((void **)(a1 + 104), (uint64_t)v10, 0);
  sub_216140140((uint64_t)__p);
  sub_216105FC8(&v16, a1 + 104);
  sub_216178BC0((uint64_t)v17, &v13);
  uint64_t v7 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)uint64_t v7 = v13;
  *(void *)(a1 + 12++**(_DWORD **)(result + 8) = v14;
  __p[0] = *(void **)MEMORY[0x263F8C2B8];
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v16 = v8;
  v17[0] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](&v19);
  sub_216105550(v12);
  sub_2161054D0(v11);
  sub_2161054D0(v10);
  return 1;
}

void sub_2161B4800(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_216140418((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2161B47C8);
}

void sub_2161B482C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

uint64_t *sub_2161B485C(uint64_t *a1)
{
  sub_216105550(a1 + 6);
  sub_2161054D0(a1 + 3);

  return sub_2161054D0(a1);
}

uint64_t sub_2161B48A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 56;
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v5 = v4;
  }
  sub_2160F707C((void *)(a1 + 56), a2, v5);
  if ((sub_216105BDC((uint64_t *)(a1 + 104), v3) & 1) == 0)
  {
    size_t v6 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MarisaTrieBuilder.cpp", 86);
    sub_216129E78(v6, (uint64_t)"(", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = sub_216129E78(v7, (uint64_t)") [", 3);
    std::string::size_type v9 = sub_216129E78(v8, (uint64_t)"m_trie.lookup(m_agent)", 22);
    unint64_t v10 = sub_216129E78(v9, (uint64_t)"] ", 2);
    sub_216129E78(v10, (uint64_t)"cannot find entry in trie.\n", 27);
    sub_21619FA48();
  }
  return *(unsigned int *)(a1 + 92);
}

void sub_2161B4978()
{
}

void sub_2161B4984()
{
  _Unwind_Resume(v0);
}

void sub_2161B4990(uint64_t a1)
{
  sub_2161B4A24(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161B49C8(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(void *)(a1 + 120)) {
      return *(void *)(a1 + 112);
    }
    else {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 135))
  {
    return a1 + 112;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_2161B49F8(uint64_t a1)
{
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8)) {
    return 0;
  }
  if (*(char *)(a1 + 135) < 0) {
    return *(void *)(a1 + 120);
  }
  return *(unsigned __int8 *)(a1 + 135);
}

uint64_t sub_2161B4A24(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF720;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  sub_2161055D8(a1 + 104);
  sub_2160F6FB0(a1 + 56);

  return sub_2161B4A94(a1);
}

uint64_t sub_2161B4A94(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BE928;
  CFDictionaryRef v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 4sub_216195244(&a9, 0) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 8);
  sub_21613EFD0(&v4);
  return a1;
}

uint64_t *sub_2161B4B04(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_21628A3BC();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v4;
  a1[3] = (uint64_t)sub_2161A2A80();
  a1[4] = a2;
  sub_21617B6A4(&v8);
  long long v5 = v8;
  long long v8 = 0uLL;
  size_t v6 = (std::__shared_weak_count *)a1[2];
  *(_OWORD *)(a1 + 1) = v5;
  if (v6)
  {
    sub_2161121B0(v6);
    if (*((void *)&v8 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  return a1;
}

void sub_2161B4B74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_2161121B0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161B4B90(uint64_t a1, uint64_t a2, UniChar *chars, unint64_t numChars, char a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  CFDictionaryRef v34 = chars;
  unint64_t v35 = numChars;
  char v33 = a5;
  uint64_t v32 = 0x3FF8000000000000;
  if (*(void *)a1) {
    BOOL v5 = numChars == 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = !v5;
  if (!v5)
  {
    long long v8 = chars;
    CFStringRef v11 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], chars, numChars);
    CFTypeRef cf = v11;
    CFIndex v12 = 2 * numChars - 2;
    do
    {
      __int16 v13 = *v8++;
      unsigned int v14 = (unsigned __int16)(v13 + 223);
      BOOL v16 = (unsigned __int16)(v13 + 191) < 0x1Au || v14 < 0x1A;
      BOOL v17 = !v16 || v12 == 0;
      v12 -= 2;
    }
    while (!v17);
    BOOL v30 = v16;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    char v27 = 1;
    double v26 = -9.0;
    char v18 = *(uint64_t **)a1;
    uint64_t v19 = operator new(0x60uLL);
    *uint64_t v19 = &unk_26C6C7B48;
    v19[1] = &v27;
    v19[2] = &v34;
    v19[3] = &v29;
    v19[4] = &v28;
    v19[5] = &cf;
    v19[6] = &v32;
    v19[7] = &v26;
    v19[8] = a1;
    v19[9] = &v33;
    v19[10] = a2;
    v19[11] = &v30;
    uint64_t v37 = v19;
    sub_21628A53C(v18, v11, 0, 3u, (uint64_t)v36, 0, -9.0);
    sub_2161B608C(v36);
    if ((**(unsigned char **)(a1 + 32) & 2) != 0 && v35 >= 4)
    {
      __int16 v20 = v29;
      double v21 = fmax((6.0 - (double)v35) * 1.5, 0.0) + -9.0;
      double v26 = v21;
      uint64_t v29 = 0;
      char v27 = 0;
      CFURLRef v22 = *(uint64_t **)a1;
      CFStringRef v23 = (const __CFString *)cf;
      CFDictionaryRef v24 = operator new(0x60uLL);
      *CFDictionaryRef v24 = &unk_26C6C7B48;
      v24[1] = &v27;
      _WORD v24[2] = &v34;
      v24[3] = &v29;
      void v24[4] = &v28;
      v24[5] = &cf;
      v24[6] = &v32;
      v24[7] = &v26;
      v24[8] = a1;
      v24[9] = &v33;
      v24[10] = a2;
      v24[11] = &v30;
      uint64_t v37 = v24;
      sub_21628A53C(v22, v23, 256, (unsigned __int16)(3 - v20), (uint64_t)v36, 0, v21);
      sub_2161B608C(v36);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v6;
}

void sub_2161B4E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  long long v8 = va_arg(va1, const void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_2161B608C((uint64_t *)va1);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

unsigned int *sub_2161B4E5C(uint64_t a1, void *a2, const UniChar *a3, unint64_t a4, void *a5)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v9 = a5[1];
  uint64_t v8 = a5[2];
  uint64_t v10 = 0;
  if (sub_21628E128(a5, 0) && v8 != v9)
  {
    sub_2162F0180((uint64_t)a5);
    uint64_t v10 = *(unsigned int **)(a1 + 8);
    if (v10)
    {
      sub_21617DED8(*(void *)(a1 + 8));
      unsigned int v11 = atomic_load(v10 + 10);
      if (v11 != 2) {
        return 0;
      }
      uint64_t v10 = *(unsigned int **)v10;
      if (v10)
      {
        uint64_t v12 = *(unsigned __int16 *)(*(void *)(a1 + 24) + 328);
        uint64_t v13 = (v8 - v9) / 40;
        long long __p = 0;
        unsigned __int8 v67 = 0;
        int v68 = 0;
        uint64_t v14 = v13 - v12;
        if (v13 <= v12)
        {
          BOOL v15 = (char *)operator new(4uLL);
          long long __p = v15;
          *(_DWORD *)BOOL v15 = 1;
          unsigned __int8 v67 = v15 + 4;
          int v68 = v15 + 4;
        }
        CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        uint64_t v16 = v14 & ~(v14 >> 63);
        CFMutableStringRef theString = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
        if (v16 < v13)
        {
          unsigned __int8 v58 = 0;
          CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
          while (1)
          {
            unint64_t v18 = *(void *)(a5[10] + 8 * v16);
            uint64_t v19 = a5[4];
            if (v18 >= (a5[5] - v19) >> 1)
            {
              CFIndex v20 = 0;
              double v21 = 0;
            }
            else
            {
              CFIndex v20 = 0;
              double v21 = (const UniChar *)(v19 + 2 * v18);
              if (v19)
              {
                CFIndex v22 = *(unsigned __int16 *)(a5[1] + 40 * v16 + 24);
                if (*(_WORD *)(a5[1] + 40 * v16 + 24))
                {
                  if (*v21 == 32 && (++v21, --v22, !v22))
                  {
                    CFIndex v20 = 0;
                  }
                  else
                  {
                    CFIndex v20 = v22 - 1;
                    if (v21[v22 - 1] == 32) {
                      v58 |= v16 == v13 - 1;
                    }
                    else {
                      CFIndex v20 = v22;
                    }
                  }
                }
              }
            }
            CFStringRef v23 = CFStringCreateWithCharactersNoCopy(0, v21, v20, v17);
            CFStringRef stringToFind = v23;
            if (!v23) {
              goto LABEL_50;
            }
            CFStringAppend(theString, v23);
            if ((sub_21628B354(*(uint64_t **)a1, v23, 2) & 1) != 0
              || (int v24 = (*(uint64_t (**)(unsigned int *, const __CFString *))(*(void *)v10 + 16))(v10, v23), (v25 = v24) == 0))
            {
              char v28 = 0;
            }
            else
            {
              double v26 = v67;
              if (v67 >= v68)
              {
                uint64_t v29 = (char *)__p;
                uint64_t v30 = (v67 - (unsigned char *)__p) >> 2;
                unint64_t v31 = v30 + 1;
                if ((unint64_t)(v30 + 1) >> 62) {
                  sub_21610CB04();
                }
                uint64_t v32 = v68 - (unsigned char *)__p;
                if ((v68 - (unsigned char *)__p) >> 1 > v31) {
                  unint64_t v31 = v32 >> 1;
                }
                if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v33 = v31;
                }
                if (v33)
                {
                  CFDictionaryRef v34 = (char *)sub_2161129B4((uint64_t)&v68, v33);
                  uint64_t v29 = (char *)__p;
                  double v26 = v67;
                }
                else
                {
                  CFDictionaryRef v34 = 0;
                }
                unint64_t v35 = &v34[4 * v30];
                *(_DWORD *)unint64_t v35 = v25;
                char v27 = v35 + 4;
                while (v26 != v29)
                {
                  int v36 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v35 - 1) = v36;
                  v35 -= 4;
                }
                long long __p = v35;
                unsigned __int8 v67 = v27;
                int v68 = &v34[4 * v33];
                if (v29) {
                  operator delete(v29);
                }
              }
              else
              {
                *(_DWORD *)unsigned __int8 v67 = v24;
                char v27 = v26 + 4;
              }
              unsigned __int8 v67 = v27;
              char v28 = 1;
            }
            CFRelease(v23);
            if ((v28 & 1) == 0) {
              goto LABEL_50;
            }
            if (++v16 == v13) {
              goto LABEL_46;
            }
          }
        }
        unsigned __int8 v58 = 0;
LABEL_46:
        if (__p == v67 || !LMLanguageModelCreatePredictionEnumerator())
        {
LABEL_50:
          uint64_t v10 = 0;
          goto LABEL_100;
        }
        if (a4) {
          CFStringRef v37 = CFStringCreateWithCharactersNoCopy(0, a3, a4, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
        }
        else {
          CFStringRef v37 = 0;
        }
        uint64_t v57 = 0;
        CFStringRef stringToFind = v37;
        while (1)
        {
          if (!LMPredictionEnumeratorAdvance()
            || (uint64_t v63 = 0, Prediction = LMPredictionEnumeratorGetPrediction(), Prediction <= 0))
          {
LABEL_97:
            LMPredictionEnumeratorRelease();
            if (stringToFind) {
              CFRelease(stringToFind);
            }
            uint64_t v10 = (unsigned int *)1;
LABEL_100:
            if (theString) {
              CFRelease(theString);
            }
            if (__p)
            {
              unsigned __int8 v67 = (char *)__p;
              operator delete(__p);
            }
            return v10;
          }
          if (v69[0] >= 0x1F4u) {
            break;
          }
          int v39 = 5;
LABEL_96:
          if (v39 == 6) {
            goto LABEL_97;
          }
        }
        CFMutableDataRef Mutable = CFStringCreateMutable(0, 0);
        uint64_t v41 = 0;
        CFStringRef theString2 = Mutable;
        do
        {
          CFStringRef v42 = (const __CFString *)(*(uint64_t (**)(unsigned int *, void))(*(void *)v10 + 32))(v10, v69[v41]);
          CFTypeRef cf = v42;
          if (!v42) {
            break;
          }
          char v43 = sub_21628B354(*(uint64_t **)a1, v42, 134);
          if (v43) {
            goto LABEL_108;
          }
          if ((v58 & (v41 == 0)) == 0)
          {
            CFStringAppend(Mutable, @" ");
            CFStringRef v42 = (const __CFString *)cf;
            CFMutableDataRef Mutable = (__CFString *)theString2;
          }
          CFStringAppend(Mutable, v42);
          CFStringRef v42 = (const __CFString *)cf;
          if (cf)
          {
LABEL_108:
            CFRelease(v42);
            if (v43)
            {
              int v39 = 5;
              CFStringRef v47 = theString2;
              if (!theString2) {
                goto LABEL_96;
              }
              goto LABEL_95;
            }
          }
          ++v41;
        }
        while (Prediction != v41);
        uint64_t v44 = a2[6];
        uint64_t v45 = a2[7];
        if (v44 == v45)
        {
          CFStringRef v47 = theString2;
LABEL_72:
          if (CFStringGetLength(v47) >= 1)
          {
            CFStringRef v48 = stringToFind;
            if (stringToFind)
            {
              CFIndex location = CFStringFind(v47, stringToFind, 0).location;
              unint64_t Length = CFStringGetLength(v48);
              if (location == 1 && Length <= 2)
              {
                if (Length + 1 != CFStringGetLength(v47)) {
                  goto LABEL_91;
                }
              }
              else if (location != 1)
              {
                goto LABEL_91;
              }
            }
            CFTypeRef cf = 0;
            if (Prediction == 1)
            {
              unint64_t v51 = (const void *)sub_21628B494(*(void *)a1, (uint64_t)theString, v47, (v58 ^ 1) & 1);
              sub_2161868BC(&cf, v51);
            }
            if (v58)
            {
              CFStringRef v52 = (const __CFString *)CFRetain(v47);
            }
            else
            {
              v71.length = CFStringGetLength(v47) - 1;
              v71.CFIndex location = 1;
              CFStringRef v52 = CFStringCreateWithSubstring(alloc, v47, v71);
            }
            CFStringRef v53 = v52;
            if (cf) {
              CFStringRef v54 = (const __CFString *)cf;
            }
            else {
              CFStringRef v54 = v47;
            }
            sub_2161B55DC(a1, a2, v54, v52, (uint64_t)a3, a4, 1, 0);
            if (v53) {
              CFRelease(v53);
            }
            if (cf) {
              CFRelease(cf);
            }
          }
        }
        else
        {
          while (1)
          {
            CFStringRef v46 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)v44 + 24))();
            CFStringRef v47 = theString2;
            if (CFStringCompare(v46, theString2, 1uLL) == kCFCompareEqualTo) {
              break;
            }
            v44 += 8;
            if (v44 == v45) {
              goto LABEL_72;
            }
          }
        }
LABEL_91:
        if (++v57 == 8) {
          int v39 = 6;
        }
        else {
          int v39 = 0;
        }
        if (v47)
        {
LABEL_95:
          CFRelease(v47);
          goto LABEL_96;
        }
        goto LABEL_96;
      }
    }
  }
  return v10;
}

void sub_2161B54FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, const void *a18, const void *a19, uint64_t a20,const void *a21,const void *a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2161B55DC(uint64_t a1, void *a2, CFStringRef theString, const __CFString *a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8)
{
  v40[4] = *MEMORY[0x263EF8340];
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (a4)
    {
      if (Length && CFStringGetLength(a4))
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D3E0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797D3E0))
        {
          sub_2161C04AC(0);
          qword_26797D3D8 = (uint64_t)&qword_26797EF20;
          __cxa_guard_release(&qword_26797D3E0);
        }
        sub_2161E212C(theString, (UniChar **)&__dst);
        sub_2161E212C(a4, (UniChar **)&v36);
        if (**(unsigned char **)(a1 + 24) && a8)
        {
          sub_21617FAAC(&v33, __dst, (v39 - (unsigned char *)__dst) >> 1);
          sub_21617FAAC(&__p, v36, (v37 - (unsigned char *)v36) >> 1);
          sub_2161EBA4C((uint64_t)&v33);
          sub_2161EBA4C((uint64_t)&__p);
          if ((v35 & 0x80u) == 0) {
            unint64_t v16 = v35;
          }
          else {
            unint64_t v16 = v34;
          }
          sub_216184BFC((uint64_t)&__dst, v16);
          if ((v32 & 0x80u) == 0) {
            unint64_t v17 = v32;
          }
          else {
            unint64_t v17 = v31;
          }
          sub_216184BFC((uint64_t)&v36, v17);
          uint64_t v18 = v35;
          if ((v35 & 0x80u) != 0) {
            uint64_t v18 = v34;
          }
          if (v18)
          {
            if ((v35 & 0x80u) == 0) {
              uint64_t v19 = &v33;
            }
            else {
              uint64_t v19 = v33;
            }
            memmove(__dst, v19, 2 * v18);
          }
          unint64_t v20 = v32;
          unsigned __int8 v21 = v32;
          if ((v32 & 0x80u) != 0) {
            unint64_t v20 = v31;
          }
          if (v20)
          {
            if ((v32 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            memmove(v36, p_p, 2 * v20);
            unsigned __int8 v21 = v32;
          }
          if ((v21 & 0x80) != 0) {
            operator delete(__p);
          }
          if ((char)v35 < 0) {
            operator delete(v33);
          }
        }
        CFStringRef v23 = (unsigned __int16 *)__dst;
        unint64_t v24 = v39 - (unsigned char *)__dst;
        if (v39 != __dst && !u_isupper(*(unsigned __int16 *)__dst) && v24 >= 3) {
          u_isupper(v23[1]);
        }
        int v25 = v36;
        if (a6 - 1 > 3 || (v37 - (unsigned char *)v36) >> 1 <= a6)
        {
          unint64_t v33 = __dst;
          uint64_t v34 = (v39 - (unsigned char *)__dst) >> 1;
          sub_21628E210((uint64_t *)&v33);
          double v26 = (void *)sub_216285438(0, (uint64_t)__dst, (v39 - (unsigned char *)__dst) >> 1, a5, a6, (uint64_t)v36, (v37 - (unsigned char *)v36) >> 1);
          unint64_t v33 = v26;
          if (v26)
          {
            v26[1] = 0;
            (*(void (**)(void *, uint64_t, const char *, uint64_t))(*v26 + 528))(v26, 3, "Adding a single English word candidate", 1);
            v40[0] = &unk_26C6B5430;
            v40[3] = v40;
            char v27 = sub_216215760(a2, &v33, 1, 0, (uint64_t)v40);
            sub_21618B96C(v40);
            if ((v27 & 1) == 0)
            {
              char v28 = sub_2162D1CE4(3u);
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(__p) = 0;
                _os_log_debug_impl(&dword_2160F5000, v28, OS_LOG_TYPE_DEBUG, " ∟ Rejected", (uint8_t *)&__p, 2u);
              }
            }
            uint64_t v29 = v33;
            unint64_t v33 = 0;
            if (v29) {
              (*(void (**)(void *))(*(void *)v29 + 16))(v29);
            }
          }
          int v25 = v36;
        }
        if (v25)
        {
          CFStringRef v37 = v25;
          operator delete(v25);
        }
        if (__dst)
        {
          int v39 = __dst;
          operator delete(__dst);
        }
      }
    }
  }
}

void sub_2161B5A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t sub_2161B5AFC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1 && *(void *)v1)
  {
    sub_21617DED8(*(void *)(result + 8));
    atomic_load((unsigned int *)(v1 + 40));
    return LMLanguageModelReset();
  }
  return result;
}

void sub_2161B5B5C(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_2161B5B98()
{
}

__n128 sub_2161B5BAC(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x60uLL);
  *(void *)CFDictionaryRef v2 = &unk_26C6C7B48;
  *(_OWORD *)(v2 + 4sub_216195244(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((void *)v2 + 11) = *(void *)(a1 + 88);
  *(_OWORD *)(v2 + ++**(_DWORD **)(result + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2161B5C20(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C7B48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + ++**(_DWORD **)(result + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(void *)(a2 + 8++**(_DWORD **)(result + 8) = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 4sub_216195244(&a9, 0) = result;
  return result;
}

void sub_2161B5C78(uint64_t a1, const __CFString **a2, CFStringRef *a3, double *a4, unsigned char *a5)
{
  CFStringRef v7 = *a2;
  CFStringRef v8 = *a3;
  double v9 = *a4;
  uint64_t v10 = *(void *)(a1 + 64);
  CFIndex Length = CFStringGetLength(*a3);
  CFIndex v12 = Length;
  if (**(unsigned char **)(a1 + 8) || Length != *(void *)(*(void *)(a1 + 16) + 8))
  {
    uint64_t v13 = *(double **)(a1 + 32);
    if (**(void **)(a1 + 24))
    {
      double v14 = *v13;
    }
    else
    {
      double *v13 = v9;
      double v14 = v9;
    }
    if (v14 + -4.0 <= v9)
    {
      CFStringRef v15 = **(const __CFString ***)(a1 + 40);
      if (v15)
      {
        CFIndex v16 = 0;
        while (v16 < CFStringGetLength(v15))
        {
          int CharacterAtIndex = CFStringGetCharacterAtIndex(v15, v16++);
          if ((CharacterAtIndex - 65) <= 0x19)
          {
            CFStringRef v18 = **(const __CFString ***)(a1 + 40);
            CFIndex v19 = CFStringGetLength(v7);
            if (v19 >= CFStringGetLength(v18)) {
              sub_2161E1FB8(v7);
            }
            goto LABEL_31;
          }
        }
      }
      double v20 = 0.0;
      if (!**(unsigned char **)(a1 + 8)) {
        double v20 = (double)(unint64_t)(v12 - *(void *)(*(void *)(a1 + 16) + 8)) * 0.15;
      }
      unsigned __int8 v21 = *(double **)(a1 + 48);
      if (v20 >= *v21) {
        double v20 = *v21;
      }
      if (v9 - v20 >= **(double **)(a1 + 56))
      {
        if (sub_21628DCE0(**(_DWORD **)(v10 + 32)))
        {
          CFStringRef v22 = **(const __CFString ***)(a1 + 40);
          if (v22)
          {
            CFIndex v23 = 0;
            while (v23 < CFStringGetLength(v22))
            {
              int v24 = CFStringGetCharacterAtIndex(v22, v23++);
              if ((v24 - 65) <= 0x19)
              {
                if (!CFStringHasPrefix(v7, **(CFStringRef **)(a1 + 40))) {
                  return;
                }
                break;
              }
            }
          }
        }
        if (**(unsigned char **)(a1 + 72))
        {
          CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
          CFStringAppend(Mutable, @" ");
          CFStringAppend(Mutable, v7);
          sub_2161B55DC(v10, *(void **)(a1 + 80), Mutable, v8, **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8), 0, **(unsigned __int8 **)(a1 + 88));
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
        else
        {
          sub_2161B55DC(v10, *(void **)(a1 + 80), v7, v8, **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8), 0, **(unsigned __int8 **)(a1 + 88));
        }
LABEL_31:
        ++**(void **)(a1 + 24);
        if (**(unsigned char **)(a1 + 8)) {
          *a5 = 1;
        }
      }
    }
    else
    {
      *a5 = 1;
    }
  }
}

void sub_2161B5FD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161B6040(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC810)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2161B6080()
{
  return &unk_26C6BC810;
}

void *sub_2161B608C(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_2161B6110(uint64_t a1)
{
  return a1;
}

void sub_2161B613C(uint64_t a1)
{
  sub_2161B62B0((void *)(a1 + 8));

  JUMPOUT(0x2166CA800);
}

BOOL sub_2161B6188(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_21610B7AC();
  }
  long long v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  if (v5)
  {
    [a2 addEntriesFromDictionary:v4];
    CFRelease(v5);
  }
  return v5 != 0;
}

void sub_2161B6200(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161B6218(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_2161B62B0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_2161B6334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)a1;
  size_t v3 = *(void *)(a1 + 8);
  long long v5 = *(const void **)a2;
  size_t v6 = *(void *)(a2 + 8);
  if (v3 >= v6) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = v3;
  }
  int v9 = memcmp(v2, v5, v8);
  if (v9 < 0) {
    return 1;
  }
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v3 >= v6;
  }
  return !v11;
}

uint64_t sub_2161B637C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C4A38;
  sub_2161808CC(a1 + 8);
  *(void *)(a1 + 40sub_216195244(&a9, 0) = 0;
  *(void *)(a1 + 40++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 36sub_216195244(&a9, 0) = 0;
  *(void *)(a1 + 36++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 352) = 0;
  sub_216128C80(a1 + 424);
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 68++**(_DWORD **)(result + 8) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(void *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 72sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 76++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(a1 + 777) = 0u;
  return a1;
}

void sub_2161B6410(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 423) < 0) {
    operator delete(*v3);
  }
  sub_21618098C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2161B6434(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C4A38;
  sub_2161B65B8((void *)a1);
  uint64_t v2 = *(void **)(a1 + 768);
  if (v2)
  {
    *(void *)(a1 + 776) = v2;
    operator delete(v2);
  }
  size_t v3 = *(void **)(a1 + 744);
  if (v3)
  {
    *(void *)(a1 + 752) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 720);
  if (v4)
  {
    *(void *)(a1 + 72++**(_DWORD **)(result + 8) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 711) < 0) {
    operator delete(*(void **)(a1 + 688));
  }
  uint64_t v5 = MEMORY[0x263F8C2C8];
  uint64_t v6 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 424) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 424 + *(void *)(v6 - 24)) = *(void *)(v5 + 24);
  *(void *)(a1 + 432) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*(void **)(a1 + 496));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 536);
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  sub_21618098C(a1 + 8);
  return a1;
}

void *sub_2161B65B8(void *result)
{
  if (*((_DWORD *)result + 95) != 3)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[94];
    uint64_t v3 = result[93];
    if (v2 == v3)
    {
      uint64_t v3 = result[94];
    }
    else
    {
      unint64_t v4 = 0;
      unsigned int v5 = 1;
      do
      {
        uint64_t v6 = *(void ***)(v3 + 8 * v4);
        if (v6)
        {
          sub_21628D4F4(v6);
          uint64_t v2 = v1[94];
          uint64_t v3 = v1[93];
        }
        unint64_t v4 = v5++;
      }
      while (v4 < (v2 - v3) >> 3);
    }
    v1[94] = v3;
    v1[91] = v1[90];
    v1[97] = v1[96];
    return sub_216180AD8((uint64_t)(v1 + 1));
  }
  return result;
}

void sub_2161B6664(uint64_t a1)
{
  sub_2161B6434(a1);

  JUMPOUT(0x2166CA800);
}

int *sub_2161B669C(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 744);
  uint64_t v6 = *(void *)(a1 + 752);
  if (v5 == v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 712);
  if (v7 >= (v6 - v5) >> 3) {
    return 0;
  }
  __n128 result = *(int **)(v5 + 8 * v7);
  if (result)
  {
    unint64_t v9 = 0;
    sub_21628D6C4((uint64_t)result, *result, a2, a3, a5, &v9, a4, (__int16)a2);
    return (int *)v9;
  }
  return result;
}

uint64_t sub_2161B670C@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>, uint8x8_t a5@<D0>)
{
  *(_WORD *)a4 = 0;
  *(void *)(a4 + 12) = 0;
  *(void *)(a4 + 4) = 0;
  *(_DWORD *)(a4 + 2sub_216195244(&a9, 0) = 0;
  uint64_t v6 = *(void *)(result + 744);
  uint64_t v7 = *(void *)(result + 752);
  if (v6 != v7)
  {
    unint64_t v8 = *(unsigned int *)(result + 712);
    if (v8 < (v7 - v6) >> 3)
    {
      __n128 result = *(void *)(v6 + 8 * v8);
      if (result)
      {
        __int16 v9 = a3;
        __n128 result = sub_21628D540(result, a2, a3, a5);
        *(_DWORD *)(a4 + ++**(_DWORD **)(result + 8) = result;
        *(_WORD *)(a4 + 12) = v9;
      }
    }
  }
  return result;
}

void sub_2161B6774(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 2sub_216195244(&a9, 0) = 0;
}

uint64_t sub_2161B6788()
{
  return 0;
}

uint64_t sub_2161B6790(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 744);
  uint64_t v10 = *(void *)(a1 + 752);
  if (v9 == v10) {
    return 0;
  }
  unint64_t v12 = *(unsigned int *)(a1 + 712);
  if (v12 >= (v10 - v9) >> 3 || !*(void *)(v9 + 8 * v12)) {
    return 0;
  }
  int v20 = a2;
  if (a2 == 2) {
    int v21 = 1;
  }
  else {
    int v21 = 2 * (a2 == 1);
  }
  if (a2 == 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      uint64_t v9 = *(void *)(a1 + 744);
      uint64_t v10 = *(void *)(a1 + 752);
      goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  uint64_t v33 = 0;
  memset(v32, 0, sizeof(v32));
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  if (v9 == v10 || (unint64_t v22 = *(unsigned int *)(a1 + 712), v22 >= (v10 - v9) >> 3)) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *(void *)(v9 + 8 * v22);
  }
  v27[0] = v23;
  v27[1] = a5;
  double v27[2] = a6;
  v27[3] = a3;
  LODWORD(v2++**(_DWORD **)(result + 8) = a4;
  *((void *)&v28 + 1) = a9;
  *(void *)&long long v29 = a8;
  *((void *)&v29 + 1) = a7;
  LOBYTE(v31) = (a2 & 0x800) == 0;
  BYTE1(v31) = (a2 & 0xF100) != 0;
  LOBYTE(v32[0]) = (v20 == 1) & ((unsigned __int16)(a2 & 0x800) >> 11);
  LODWORD(v3sub_216195244(&a9, 0) = v21;
  BYTE1(v32[0]) = 1;
  if (a4 >= 0x80) {
    LOBYTE(v32[0]) = 0;
  }
  *((void *)&v31 + 1) = (char *)v32 + 2;
  if (v9 == v10 || (unint64_t v25 = *(unsigned int *)(a1 + 712), v25 >= (v10 - v9) >> 3)) {
    double v26 = 0;
  }
  else {
    double v26 = *(unsigned int **)(v9 + 8 * v25);
  }
  return sub_21634D9C0(v26, (uint64_t)v27);
}

int *sub_2161B69D0(uint64_t a1, __int16 a2, unsigned __int16 *a3, unsigned int a4, uint64_t a5, unsigned char *a6, uint8x8_t a7)
{
  uint64_t v7 = *(void *)(a1 + 744);
  uint64_t v8 = *(void *)(a1 + 752);
  if (v7 == v8) {
    return 0;
  }
  unint64_t v10 = *(unsigned int *)(a1 + 712);
  if (v10 >= (v8 - v7) >> 3) {
    return 0;
  }
  __n128 result = *(int **)(v7 + 8 * v10);
  if (!result) {
    return result;
  }
  if (a2 == 3)
  {
    uint64_t v23 = 0;
    sub_21634C304((uint64_t)result, *result, a3, a4, 1, a5, (uint64_t)a6, a6, a7, &v23);
    return (int *)v23;
  }
  if (a2 != 1)
  {
    if (!(_BYTE)a2)
    {
      uint64_t v23 = 0;
      sub_21634BE78((uint64_t)result, *result, a3, a4, -1, 0, a5, (uint64_t)a6, a6, &v23);
      return (int *)v23;
    }
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  uint64_t v18 = *(void *)(a1 + 744);
  if ((a2 & 0xF000) == 0)
  {
    unint64_t v22 = *(int **)(v18 + 8 * *(unsigned int *)(a1 + 712));
    uint64_t v23 = 0;
    sub_21634C304((uint64_t)v22, *v22, a3, a4, 0, a5, (uint64_t)a6, a6, v17, &v23);
    return (int *)v23;
  }
  uint64_t v19 = *(void *)(a1 + 752);
  if (v18 == v19 || (unint64_t v20 = *(unsigned int *)(a1 + 712), v20 >= (v19 - v18) >> 3)) {
    int v21 = 0;
  }
  else {
    int v21 = *(int **)(v18 + 8 * v20);
  }

  return (int *)sub_21634C6B4(v21, a3, a4, a5, a6);
}

uint64_t sub_2161B6B84(uint64_t a1, char *a2, const char *a3)
{
  uint64_t v6 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  sub_2161B4568((std::string *)(a1 + 400), a2);
  if ((sub_21617E494(v6, a2, a3) & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 424 + *(void *)(*(void *)(a1 + 424) - 24)), 0);
    uint64_t v18 = sub_216129E78((void *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
    sub_216129E78(v18, (uint64_t)"(", 1);
    uint64_t v19 = (void *)std::ostream::operator<<();
    unint64_t v20 = sub_216129E78(v19, (uint64_t)") [", 3);
    int v21 = sub_216129E78(v20, (uint64_t)"dmmap_.open(file, mode)", 23);
    unint64_t v22 = "no such file or directory: ";
LABEL_81:
    uint64_t v89 = sub_216129E78(v21, (uint64_t)"] ", 2);
    uint64_t v90 = sub_216129E78(v89, (uint64_t)v22, 27);
    size_t v91 = strlen(a2);
    sub_216129E78(v90, (uint64_t)a2, v91);
    return 0;
  }
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7 <= 0x63)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 424 + *(void *)(*(void *)(a1 + 424) - 24)), 0);
    uint64_t v23 = sub_216129E78((void *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
    sub_216129E78(v23, (uint64_t)"(", 1);
    int v24 = (void *)std::ostream::operator<<();
    unint64_t v25 = sub_216129E78(v24, (uint64_t)") [", 3);
    double v26 = "dmmap_.size() >= 100";
    uint64_t v27 = 20;
LABEL_80:
    int v21 = sub_216129E78(v25, (uint64_t)v26, v27);
    unint64_t v22 = "dictionary file is broken: ";
    goto LABEL_81;
  }
  uint64_t v8 = *(unsigned int **)(a1 + 16);
  if (v7 != (*v8 ^ 0xEF718F77))
  {
    std::ios_base::clear((std::ios_base *)(a1 + 424 + *(void *)(*(void *)(a1 + 424) - 24)), 0);
    long long v28 = sub_216129E78((void *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
    sub_216129E78(v28, (uint64_t)"(", 1);
    long long v29 = (void *)std::ostream::operator<<();
    unint64_t v25 = sub_216129E78(v29, (uint64_t)") [", 3);
    double v26 = "(magic ^ DictionaryMagicID) == dmmap_.size()";
    uint64_t v27 = 44;
    goto LABEL_80;
  }
  *(_DWORD *)(a1 + 376) = v8[1];
  *(_DWORD *)(a1 + 38sub_216195244(&a9, 0) = v8[2];
  *(_DWORD *)(a1 + 384) = v8[3];
  *(_DWORD *)(a1 + 38++**(_DWORD **)(result + 8) = v8[4];
  *(_DWORD *)(a1 + 392) = v8[5];
  unint64_t v9 = v8[6];
  *(_DWORD *)(a1 + 396) = v8[7];
  uint64_t v11 = v8[8];
  unsigned int v10 = v8[9];
  *(void *)(a1 + 36++**(_DWORD **)(result + 8) = v8 + 10;
  unint64_t v12 = (int *)(v8 + 18);
  *(_DWORD *)(a1 + 712) = 0;
  uint64_t v94 = a1 + 760;
  uint64_t v93 = v11;
  if (v10 >= 2)
  {
    int v30 = 0;
    uint64_t v95 = (void **)(a1 + 720);
    long long v31 = (char **)(a1 + 744);
    unsigned __int8 v32 = (char **)(a1 + 768);
    do
    {
      int v33 = *v12;
      uint64_t v34 = *(char **)(a1 + 728);
      unint64_t v35 = *(void *)(a1 + 736);
      if ((unint64_t)v34 >= v35)
      {
        CFStringRef v37 = (char *)*v95;
        uint64_t v38 = (v34 - (unsigned char *)*v95) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v40 = v35 - (void)v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          CFStringRef v42 = (char *)sub_2161129B4(a1 + 736, v41);
          uint64_t v34 = *(char **)(a1 + 728);
          CFStringRef v37 = *(char **)(a1 + 720);
        }
        else
        {
          CFStringRef v42 = 0;
        }
        char v43 = &v42[4 * v38];
        *(_DWORD *)char v43 = v33;
        int v36 = v43 + 4;
        while (v34 != v37)
        {
          int v44 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        *(void *)(a1 + 72sub_216195244(&a9, 0) = v43;
        *(void *)(a1 + 72++**(_DWORD **)(result + 8) = v36;
        *(void *)(a1 + 736) = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v34 = v33;
        int v36 = v34 + 4;
      }
      *(void *)(a1 + 72++**(_DWORD **)(result + 8) = v36;
      uint64_t v45 = (uint64_t)(v12 + 2);
      unint64_t v46 = v12[1];
      sub_21628D460(0, 0, v45, v46);
      uint64_t v48 = v47;
      char v49 = *(void **)(a1 + 752);
      unint64_t v50 = *(void *)(a1 + 760);
      if ((unint64_t)v49 >= v50)
      {
        uint64_t v52 = ((char *)v49 - *v31) >> 3;
        if ((unint64_t)(v52 + 1) >> 61) {
          goto LABEL_84;
        }
        uint64_t v53 = v50 - (void)*v31;
        uint64_t v54 = v53 >> 2;
        if (v53 >> 2 <= (unint64_t)(v52 + 1)) {
          uint64_t v54 = v52 + 1;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v54;
        }
        if (v55) {
          unint64_t v56 = (char *)sub_2160FFAA8(v94, v55);
        }
        else {
          unint64_t v56 = 0;
        }
        uint64_t v57 = &v56[8 * v52];
        *(void *)uint64_t v57 = v48;
        unint64_t v51 = v57 + 8;
        unsigned __int8 v58 = *(char **)(a1 + 752);
        uint64_t v59 = *(char **)(a1 + 744);
        if (v58 != v59)
        {
          do
          {
            uint64_t v60 = *((void *)v58 - 1);
            v58 -= 8;
            *((void *)v57 - 1) = v60;
            v57 -= 8;
          }
          while (v58 != v59);
          unsigned __int8 v58 = *v31;
        }
        *(void *)(a1 + 744) = v57;
        *(void *)(a1 + 752) = v51;
        *(void *)(a1 + 76sub_216195244(&a9, 0) = &v56[8 * v55];
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *char v49 = v47;
        unint64_t v51 = v49 + 1;
      }
      *(void *)(a1 + 752) = v51;
      uint64_t v61 = v45 + v46 + 4;
      uint64_t v62 = *(unsigned int *)(v45 + v46);
      uint64_t v63 = *(uint64_t **)(a1 + 776);
      unint64_t v64 = *(void *)(a1 + 784);
      if ((unint64_t)v63 >= v64)
      {
        uint64_t v66 = ((char *)v63 - *v32) >> 3;
        if ((unint64_t)(v66 + 1) >> 61) {
          sub_2161BA9E4();
        }
        uint64_t v67 = v64 - (void)*v32;
        uint64_t v68 = v67 >> 2;
        if (v67 >> 2 <= (unint64_t)(v66 + 1)) {
          uint64_t v68 = v66 + 1;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v68;
        }
        if (v69) {
          uint64_t v70 = (char *)sub_2160FFAA8(a1 + 784, v69);
        }
        else {
          uint64_t v70 = 0;
        }
        CFRange v71 = (uint64_t *)&v70[8 * v66];
        *CFRange v71 = v61;
        uint64_t v65 = v71 + 1;
        uint64_t v72 = *(char **)(a1 + 776);
        uint64_t v73 = *(char **)(a1 + 768);
        if (v72 != v73)
        {
          do
          {
            uint64_t v74 = *((void *)v72 - 1);
            v72 -= 8;
            *--CFRange v71 = v74;
          }
          while (v72 != v73);
          uint64_t v72 = *v32;
        }
        *(void *)(a1 + 76++**(_DWORD **)(result + 8) = v71;
        *(void *)(a1 + 776) = v65;
        *(void *)(a1 + 784) = &v70[8 * v69];
        if (v72) {
          operator delete(v72);
        }
      }
      else
      {
        *uint64_t v63 = v61;
        uint64_t v65 = v63 + 1;
      }
      *(void *)(a1 + 776) = v65;
      unint64_t v12 = (int *)(v61 + v62);
      ++v30;
    }
    while (v30 != v10);
  }
  else
  {
    sub_21628D460(0, 0, (uint64_t)v12, v9);
    uint64_t v14 = v13;
    CFStringRef v15 = *(void **)(a1 + 752);
    unint64_t v16 = *(void *)(a1 + 760);
    if ((unint64_t)v15 >= v16)
    {
      uint64_t v75 = *(void *)(a1 + 744);
      uint64_t v76 = ((uint64_t)v15 - v75) >> 3;
      if ((unint64_t)(v76 + 1) >> 61) {
LABEL_84:
      }
        sub_2161BA9E4();
      uint64_t v77 = v16 - v75;
      uint64_t v78 = v77 >> 2;
      if (v77 >> 2 <= (unint64_t)(v76 + 1)) {
        uint64_t v78 = v76 + 1;
      }
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v78;
      }
      if (v79) {
        uint64_t v80 = (char *)sub_2160FFAA8(v94, v79);
      }
      else {
        uint64_t v80 = 0;
      }
      int v81 = &v80[8 * v76];
      uint64_t v82 = &v80[8 * v79];
      *(void *)int v81 = v14;
      uint8x8_t v17 = v81 + 8;
      unsigned int v83 = *(char **)(a1 + 752);
      unint64_t v84 = *(char **)(a1 + 744);
      if (v83 != v84)
      {
        do
        {
          uint64_t v85 = *((void *)v83 - 1);
          v83 -= 8;
          *((void *)v81 - 1) = v85;
          v81 -= 8;
        }
        while (v83 != v84);
        unsigned int v83 = *(char **)(a1 + 744);
      }
      *(void *)(a1 + 744) = v81;
      *(void *)(a1 + 752) = v17;
      *(void *)(a1 + 76sub_216195244(&a9, 0) = v82;
      if (v83) {
        operator delete(v83);
      }
    }
    else
    {
      void *v15 = v13;
      uint8x8_t v17 = v15 + 1;
    }
    *(void *)(a1 + 752) = v17;
    unint64_t v12 = (int *)((char *)v12 + v9);
  }
  *(void *)(a1 + 352) = v12;
  unint64_t v86 = (char *)v12 + *(unsigned int *)(a1 + 396);
  if (v93) {
    *(void *)(a1 + 36sub_216195244(&a9, 0) = v86;
  }
  if (&v86[v93] != (char *)(*(void *)(a1 + 16) + *(void *)(a1 + 24)))
  {
    std::ios_base::clear((std::ios_base *)(a1 + 424 + *(void *)(*(void *)(a1 + 424) - 24)), 0);
    uint64_t v87 = sub_216129E78((void *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
    sub_216129E78(v87, (uint64_t)"(", 1);
    int v88 = (void *)std::ostream::operator<<();
    unint64_t v25 = sub_216129E78(v88, (uint64_t)") [", 3);
    double v26 = "ptr == dmmap_.end()";
    uint64_t v27 = 19;
    goto LABEL_80;
  }
  return 1;
}

BOOL sub_2161B7248(uint64_t a1, char *a2)
{
  uint64_t v3 = a1 + 8;
  sub_21610B834(&__p, a2);
  unint64_t v4 = sub_216178FA4(v3, &__p);
  if (SHIBYTE(v17[0]) < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v4) {
    operator new();
  }
  if (*((char *)v4 + 79) < 0)
  {
    sub_21610A674(v13, v4[7], (unint64_t)v4[8]);
  }
  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)(v4 + 7);
    uint64_t v14 = v4[9];
  }
  sub_216140140((uint64_t)&__p);
  unsigned __int8 v15 = 0;
  if (SHIBYTE(v14) >= 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (void **)v13[0];
  }
  if (SHIBYTE(v14) >= 0) {
    uint64_t v6 = HIBYTE(v14);
  }
  else {
    uint64_t v6 = (uint64_t)v13[1];
  }
  unint64_t v7 = sub_216129E78(v17, (uint64_t)v5, v6);
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0
    || (uint64_t v8 = (void *)MEMORY[0x2166CA4A0](&__p, &v15), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0)
    || (unint64_t v9 = sub_216179138(&__p), (*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 2) == 0))
  {
    operator new();
  }
  int v12 = v15;
  long long __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v17 + *((void *)__p - 3)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v17[0] = v10;
  v17[1] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](&v19);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  return v12 != 0;
}

void sub_2161B757C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2161B75C0@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = sub_21612A88C(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v7 = (char *)result;
  }
  else {
    unint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  unint64_t v9 = &v7[v5];
  *unint64_t v9 = a2;
  v9[1] = 0;
  return result;
}

void *sub_2161B7654(void *a1)
{
  *a1 = &unk_26C6C4C48;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_2161B76C0(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_2161B637C(a1);
  *(void *)uint64_t v6 = &unk_26C6C5050;
  *(void *)(v6 + 80sub_216195244(&a9, 0) = 0;
  *(_DWORD *)(v6 + 80++**(_DWORD **)(result + 8) = a2;
  *(_DWORD *)(v6 + 812) = a3;
  *(_DWORD *)(v6 + 82sub_216195244(&a9, 0) = 0;
  *(_DWORD *)(v6 + 824) = a2;
  *(void *)(v6 + 82++**(_DWORD **)(result + 8) = 0;
  *(_WORD *)(v6 + 836) = 1;
  *(_OWORD *)(v6 + 84sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(v6 + 856) = 0u;
  *(_OWORD *)(v6 + 872) = 0u;
  *(_OWORD *)(v6 + 88++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(v6 + 904) = 0u;
  *(_OWORD *)(v6 + 92sub_216195244(&a9, 0) = 0u;
  pthread_rwlock_init((pthread_rwlock_t *)(v6 + 936), 0);
  *(void *)(a1 + 1136) = 850045863;
  *(void *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 116sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  return a1;
}

void sub_2161B7788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 935) < 0) {
    operator delete(*(void **)(v2 + 912));
  }
  size_t v5 = *(void **)(v2 + 888);
  if (v5)
  {
    *(void *)(v2 + 896) = v5;
    operator delete(v5);
  }
  sub_21613EFD0((void ***)va);
  if (*(char *)(v2 + 863) < 0) {
    operator delete(*v3);
  }
  sub_2161B6434(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2161B77D8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5050;
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  uint64_t v3 = *(void *)(a1 + 752);
  uint64_t v4 = *(void *)(a1 + 744);
  uint64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    unint64_t v6 = *(unsigned int *)(a1 + 712);
    if (v6 >= v5 >> 3) {
      unint64_t v7 = 0;
    }
    else {
      unint64_t v7 = *(_DWORD **)(v4 + 8 * v6);
    }
    sub_2162878F8(v7);
    *(void *)(a1 + 752) = *(void *)(a1 + 744);
  }
  uint64_t v8 = *(void **)(a1 + 800);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 80sub_216195244(&a9, 0) = 0;
  }
  pthread_rwlock_unlock(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 1136));
  pthread_rwlock_destroy(v2);
  if (*(char *)(a1 + 935) < 0) {
    operator delete(*(void **)(a1 + 912));
  }
  unint64_t v9 = *(void **)(a1 + 888);
  if (v9)
  {
    *(void *)(a1 + 896) = v9;
    operator delete(v9);
  }
  uint64_t v11 = (void **)(a1 + 864);
  sub_21613EFD0(&v11);
  if (*(char *)(a1 + 863) < 0) {
    operator delete(*(void **)(a1 + 840));
  }
  return sub_2161B6434(a1);
}

void sub_2161B78DC(uint64_t a1)
{
  sub_2161B77D8(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161B7914(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  uint64_t v3 = 1;
  if (!*(unsigned char *)(a1 + 837))
  {
    *(unsigned char *)(a1 + 837) = 1;
    uint64_t v4 = (const char *)(a1 + 912);
    if (*(char *)(a1 + 935) < 0) {
      uint64_t v4 = *(const char **)v4;
    }
    uint64_t v5 = (const std::__fs::filesystem::path *)(a1 + 400);
    unint64_t v6 = (char *)(a1 + 400);
    if (*(char *)(a1 + 423) < 0) {
      unint64_t v6 = (char *)v5->__pn_.__r_.__value_.__r.__words[0];
    }
    if (sub_21617E494(a1 + 8, v6, v4))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if (v7 && (uint64_t v8 = *(unsigned int **)(a1 + 16), v7 == (*v8 ^ 0xEF718F77)))
      {
        *(void *)(a1 + 38++**(_DWORD **)(result + 8) = 0;
        unsigned int v9 = v8[1];
        *(_DWORD *)(a1 + 376) = v9;
        if (v9 > 0x68)
        {
          *(_DWORD *)(a1 + 38sub_216195244(&a9, 0) = v8[2];
          *(_DWORD *)(a1 + 384) = v8[3];
          *(_DWORD *)(a1 + 82sub_216195244(&a9, 0) = v8[4];
          std::string::size_type v20 = v8[5];
          size_t v21 = v8[6];
          uint64_t v22 = v8[8];
          uint64_t v112 = v8[7];
          size_t __n = v8[9];
          unsigned __int8 v106 = v2;
          uint64_t v23 = malloc_type_malloc(v21, 0x49A76DDDuLL);
          std::string::size_type v110 = v20;
          memcpy(v23, v8 + 10, v21);
          size_t v108 = v21;
          int v24 = sub_216287840(0, (int *)v23, v21, 0);
          unint64_t v25 = v24;
          double v26 = *(void **)(a1 + 752);
          unint64_t v27 = *(void *)(a1 + 760);
          if ((unint64_t)v26 >= v27)
          {
            uint64_t v29 = *(void *)(a1 + 744);
            uint64_t v30 = ((uint64_t)v26 - v29) >> 3;
            if ((unint64_t)(v30 + 1) >> 61) {
              sub_2161BA9E4();
            }
            uint64_t v31 = v27 - v29;
            uint64_t v32 = v31 >> 2;
            if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
              uint64_t v32 = v30 + 1;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            if (v33) {
              uint64_t v34 = (char *)sub_2160FFAA8(a1 + 760, v33);
            }
            else {
              uint64_t v34 = 0;
            }
            unint64_t v35 = &v34[8 * v30];
            int v36 = &v34[8 * v33];
            *(void *)unint64_t v35 = v25;
            long long v28 = v35 + 8;
            CFStringRef v37 = *(char **)(a1 + 752);
            uint64_t v38 = *(char **)(a1 + 744);
            if (v37 != v38)
            {
              do
              {
                uint64_t v39 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v35 - 1) = v39;
                v35 -= 8;
              }
              while (v37 != v38);
              CFStringRef v37 = *(char **)(a1 + 744);
            }
            *(void *)(a1 + 744) = v35;
            *(void *)(a1 + 752) = v28;
            *(void *)(a1 + 76sub_216195244(&a9, 0) = v36;
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            *double v26 = v24;
            long long v28 = v26 + 1;
          }
          *(void *)(a1 + 752) = v28;
          *(_DWORD *)(a1 + 712) = 0;
          std::string::size_type v40 = v110;
          unint64_t v41 = (char *)v8 + v21 + 40;
          CFStringRef v42 = &v41[v110];
          char v43 = &v41[v110 + v22];
          uint64_t v115 = 0;
          __int16 v116 = 0;
          CFRange v117 = 0;
          uint64_t v44 = v112;
          if ((((int)v43 - *(_DWORD *)(a1 + 16)) & 7) != 0)
          {
            if (v112)
            {
              uint64_t v104 = v43;
              uint64_t v45 = 0;
              unint64_t v46 = &v43[v112];
              uint64_t v47 = v43;
              do
              {
                std::string::value_type v48 = *v47;
                if (v45 >= v117)
                {
                  unint64_t v50 = (unint64_t)v115;
                  uint64_t v51 = v45 - (unsigned char *)v115;
                  uint64_t v52 = v45 - (unsigned char *)v115 + 1;
                  if (v52 < 0) {
                    sub_21610CB04();
                  }
                  unint64_t v53 = v117 - (unsigned char *)v115;
                  if (2 * (v117 - (unsigned char *)v115) > (unint64_t)v52) {
                    uint64_t v52 = 2 * v53;
                  }
                  if (v53 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v54 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v54 = v52;
                  }
                  if (v54) {
                    unint64_t v55 = (char *)operator new(v54);
                  }
                  else {
                    unint64_t v55 = 0;
                  }
                  unint64_t v56 = &v55[v51];
                  uint64_t v57 = &v55[v51];
                  *uint64_t v57 = v48;
                  char v49 = v57 + 1;
                  if (v45 != (char *)v50)
                  {
                    unsigned __int8 v58 = &v45[~v50];
                    do
                    {
                      char v59 = *--v45;
                      (v58--)[(void)v55] = v59;
                    }
                    while (v45 != (char *)v50);
                    uint64_t v45 = (char *)v115;
                    unint64_t v56 = v55;
                  }
                  uint64_t v115 = v56;
                  CFRange v117 = &v55[v54];
                  if (v45) {
                    operator delete(v45);
                  }
                }
                else
                {
                  *uint64_t v45 = v48;
                  char v49 = v45 + 1;
                }
                __int16 v116 = v49;
                ++v47;
                uint64_t v45 = v49;
              }
              while (v47 != v46);
              uint64_t v107 = (char *)v115;
              size_t v21 = v108;
              std::string::size_type v40 = v110;
              uint64_t v44 = v112;
              unint64_t v41 = (char *)v8 + v108 + 40;
              char v43 = v104;
            }
            else
            {
              uint64_t v107 = 0;
            }
          }
          else
          {
            uint64_t v107 = (char *)v43;
          }
          if (*(char *)(a1 + 863) < 0)
          {
            **(unsigned char **)(a1 + 84sub_216195244(&a9, 0) = 0;
            *(void *)(a1 + 84++**(_DWORD **)(result + 8) = 0;
          }
          else
          {
            *(unsigned char *)(a1 + 84sub_216195244(&a9, 0) = 0;
            *(unsigned char *)(a1 + 863) = 0;
          }
          *(void *)(a1 + 896) = *(void *)(a1 + 888);
          sub_21613F024((uint64_t *)(a1 + 864));
          std::string::append((std::string *)(a1 + 840), v41, v40);
          uint64_t v60 = *(int *)(a1 + 820);
          *(_DWORD *)(a1 + 816) = v60;
          uint64_t v61 = malloc_type_malloc(16 * v60, 0x100004023422098uLL);
          *(void *)(a1 + 80sub_216195244(&a9, 0) = v61;
          memcpy(v61, &v43[v44], __n);
          if (*(int *)(a1 + 820) >= 1)
          {
            uint64_t v62 = 0;
            uint64_t v63 = (void *)(a1 + 888);
            uint64_t v64 = (uint64_t)v8 + v21 + v40 + 42;
            do
            {
              uint64_t v65 = *(void *)(a1 + 800) + 16 * v62;
              *(unsigned char *)(v65 + 6) = 32;
              uint64_t v66 = (unsigned __int8 *)(v65 + 6);
              uint64_t v67 = *(unsigned int *)(v66 + 6);
              uint64_t v68 = *(void *)(a1 + 896);
              *(_DWORD *)(v66 + 6) = -1431655765 * ((unint64_t)(v68 - *(void *)(a1 + 888)) >> 2);
              unint64_t v69 = v66 - 1;
              if (*(v66 - 1))
              {
                uint64_t v109 = v66;
                uint64_t v111 = v62;
                unint64_t v70 = 0;
                CFRange v71 = &v107[v67];
                do
                {
                  uint64_t v72 = &v71[12 * v70];
                  unint64_t v73 = *(void *)(a1 + 896);
                  unint64_t v74 = *(void *)(a1 + 904);
                  if (v73 >= v74)
                  {
                    unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - *v63) >> 2);
                    unint64_t v78 = v77 + 1;
                    if (v77 + 1 > 0x1555555555555555) {
                      sub_2161BA9E4();
                    }
                    unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *v63) >> 2);
                    if (2 * v79 > v78) {
                      unint64_t v78 = 2 * v79;
                    }
                    if (v79 >= 0xAAAAAAAAAAAAAAALL) {
                      unint64_t v80 = 0x1555555555555555;
                    }
                    else {
                      unint64_t v80 = v78;
                    }
                    if (v80) {
                      unint64_t v80 = (unint64_t)sub_2161BAC80(v80);
                    }
                    else {
                      uint64_t v81 = 0;
                    }
                    unint64_t v82 = v80 + 12 * v77;
                    uint64_t v83 = *(void *)v72;
                    *(_DWORD *)(v82 + ++**(_DWORD **)(result + 8) = *((_DWORD *)v72 + 2);
                    *(void *)unint64_t v82 = v83;
                    unint64_t v84 = *(_DWORD **)(a1 + 896);
                    uint64_t v85 = *(_DWORD **)(a1 + 888);
                    unint64_t v86 = v82;
                    if (v84 != v85)
                    {
                      do
                      {
                        uint64_t v87 = *(void *)(v84 - 3);
                        v84 -= 3;
                        int v88 = v84[2];
                        *(void *)(v86 - 12) = v87;
                        v86 -= 12;
                        *(_DWORD *)(v86 + ++**(_DWORD **)(result + 8) = v88;
                      }
                      while (v84 != v85);
                      unint64_t v84 = (_DWORD *)*v63;
                    }
                    *(void *)(a1 + 88++**(_DWORD **)(result + 8) = v86;
                    unint64_t v76 = v82 + 12;
                    *(void *)(a1 + 896) = v82 + 12;
                    *(void *)(a1 + 904) = v80 + 12 * v81;
                    if (v84) {
                      operator delete(v84);
                    }
                  }
                  else
                  {
                    uint64_t v75 = *(void *)v72;
                    *(_DWORD *)(v73 + ++**(_DWORD **)(result + 8) = *((_DWORD *)v72 + 2);
                    *(void *)unint64_t v73 = v75;
                    unint64_t v76 = v73 + 12;
                  }
                  *(void *)(a1 + 896) = v76;
                  unsigned int v91 = *(_DWORD *)(v76 - 4);
                  uint64_t v90 = (_DWORD *)(v76 - 4);
                  uint64_t v89 = v91;
                  uint64_t v92 = (std::string::value_type *)&v42[v91];
                  if (*(_WORD *)v92)
                  {
                    uint64_t v93 = 0;
                    uint64_t v94 = v64 + v89;
                    do
                    {
                      uint64_t v95 = v93 + 2;
                      int v96 = *(unsigned __int16 *)(v94 + v93);
                      v93 += 2;
                    }
                    while (v96);
                    size_t v97 = v95 + 2;
                  }
                  else
                  {
                    size_t v97 = 2;
                  }
                  sub_21612F5FC(__p, v92, v97);
                  unint64_t v98 = *(void *)(a1 + 872);
                  *uint64_t v90 = -1431655765 * ((v98 - *(void *)(a1 + 864)) >> 3);
                  if (v98 >= *(void *)(a1 + 880))
                  {
                    uint64_t v100 = sub_2161BAB5C((uint64_t *)(a1 + 864), (long long *)__p);
                  }
                  else
                  {
                    if (SHIBYTE(v114) < 0)
                    {
                      sub_21610A674((unsigned char *)v98, __p[0], (unint64_t)__p[1]);
                    }
                    else
                    {
                      long long v99 = *(_OWORD *)__p;
                      *(void *)(v98 + 16) = v114;
                      *(_OWORD *)unint64_t v98 = v99;
                    }
                    uint64_t v100 = v98 + 24;
                    *(void *)(a1 + 872) = v98 + 24;
                  }
                  *(void *)(a1 + 872) = v100;
                  if (SHIBYTE(v114) < 0) {
                    operator delete(__p[0]);
                  }
                  ++v70;
                  unint64_t v101 = *v69;
                }
                while (v70 < v101);
                uint64_t v62 = v111;
                uint64_t v102 = *v109;
                uint64_t v68 = *(void *)(a1 + 896);
              }
              else
              {
                unint64_t v101 = 0;
                uint64_t v102 = 32;
              }
              LODWORD(__p[1]) = 0;
              __p[0] = 0;
              sub_2161BACC8((unint64_t *)(a1 + 888), v68, v102 - v101, (unint64_t)__p);
              ++v62;
            }
            while (v62 < *(int *)(a1 + 820));
          }
          sub_216180AD8(a1 + 8);
          if (v115) {
            operator delete(v115);
          }
          uint64_t v3 = 1;
          uint64_t v2 = v106;
        }
        else
        {
          sub_216180AD8(a1 + 8);
          pthread_mutex_lock(&stru_26797B9A0);
          if (*(char *)(a1 + 423) < 0) {
            uint64_t v5 = (const std::__fs::filesystem::path *)v5->__pn_.__r_.__value_.__r.__words[0];
          }
          remove(v5, v10);
          pthread_mutex_unlock(&stru_26797B9A0);
          sub_2161B8210(a1, *(_DWORD *)(a1 + 812), 105, 3);
        }
      }
      else
      {
        sub_2161B8210(a1, *(_DWORD *)(a1 + 812), 105, 3);
        sub_216180AD8(a1 + 8);
      }
    }
    else
    {
      std::ios_base::clear((std::ios_base *)(a1 + 424 + *(void *)(*(void *)(a1 + 424) - 24)), 0);
      uint64_t v11 = sub_216129E78((void *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
      sub_216129E78(v11, (uint64_t)"(", 1);
      int v12 = (void *)std::ostream::operator<<();
      uint64_t v13 = sub_216129E78(v12, (uint64_t)") [", 3);
      uint64_t v14 = sub_216129E78(v13, (uint64_t)"dmmap_.open(filename_.c_str(), mode)", 36);
      unsigned __int8 v15 = sub_216129E78(v14, (uint64_t)"] ", 2);
      unint64_t v16 = sub_216129E78(v15, (uint64_t)"no such file or directory: ", 27);
      int v17 = *(char *)(a1 + 423);
      if (v17 >= 0) {
        uint64_t v18 = a1 + 400;
      }
      else {
        uint64_t v18 = *(void *)(a1 + 400);
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(a1 + 423);
      }
      else {
        uint64_t v19 = *(void *)(a1 + 408);
      }
      sub_216129E78(v16, v18, v19);
      uint64_t v3 = 0;
    }
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_2161B80B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26)
{
}

uint64_t sub_2161B813C(uint64_t a1, char *a2, char *a3)
{
  *(_DWORD *)(a1 + 38sub_216195244(&a9, 0) = 3;
  return 1;
}

void *sub_2161B8180(void *result)
{
  if (*((_DWORD *)result + 95) != 3)
  {
    uint64_t v1 = result;
    uint64_t v2 = (_DWORD **)result[93];
    uint64_t v3 = (_DWORD **)result[94];
    if (v2 != v3)
    {
      do
      {
        uint64_t v4 = *v2++;
        sub_2162878F8(v4);
      }
      while (v2 != v3);
      uint64_t v2 = (_DWORD **)v1[93];
    }
    v1[94] = v2;
    v1[91] = v1[90];
    v1[97] = v1[96];
    return sub_216180AD8((uint64_t)(v1 + 1));
  }
  return result;
}

uint64_t sub_2161B8210(uint64_t a1, int a2, int a3, int a4)
{
  int v6 = *(_DWORD *)(a1 + 808);
  *(_DWORD *)(a1 + 38sub_216195244(&a9, 0) = a4;
  *(_DWORD *)(a1 + 376) = a3;
  *(unsigned char *)(a1 + 837) = 1;
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 384) = 0;
  uint64_t v7 = malloc_type_malloc(0x58uLL, 0x10B0040A3C4D6A3uLL);
  uint64_t v8 = v7;
  if (v7)
  {
    v7[20] = 0;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    void v7[4] = 0;
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 3) = 0;
  }
  unsigned int v9 = *(void **)(a1 + 752);
  unint64_t v10 = *(void *)(a1 + 760);
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v12 = *(void *)(a1 + 744);
    uint64_t v13 = ((uint64_t)v9 - v12) >> 3;
    if ((unint64_t)(v13 + 1) >> 61) {
      sub_2161BA9E4();
    }
    uint64_t v14 = v10 - v12;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      int v17 = (char *)sub_2160FFAA8(a1 + 760, v16);
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = &v17[8 * v13];
    uint64_t v19 = &v17[8 * v16];
    *(void *)uint64_t v18 = v8;
    uint64_t v11 = v18 + 8;
    std::string::size_type v20 = *(char **)(a1 + 752);
    size_t v21 = *(char **)(a1 + 744);
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      std::string::size_type v20 = *(char **)(a1 + 744);
    }
    *(void *)(a1 + 744) = v18;
    *(void *)(a1 + 752) = v11;
    *(void *)(a1 + 76sub_216195244(&a9, 0) = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *unsigned int v9 = v7;
    uint64_t v11 = v9 + 1;
  }
  *(void *)(a1 + 752) = v11;
  if (v6 >= a2) {
    int v23 = a2;
  }
  else {
    int v23 = v6;
  }
  *(_DWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 816) = v23;
  *(void *)(a1 + 80sub_216195244(&a9, 0) = malloc_type_malloc(16 * v23, 0x100004023422098uLL);
  return 1;
}

uint64_t sub_2161B8380(uint64_t result, unsigned int *a2)
{
  uint64_t v2 = *(void *)(result + 744);
  uint64_t v3 = *(void *)(result + 752);
  if (v2 != v3)
  {
    uint64_t v4 = result;
    unint64_t v5 = *(unsigned int *)(result + 712);
    if (v5 < (v3 - v2) >> 3)
    {
      uint64_t result = *(void *)(v2 + 8 * v5);
      if (result)
      {
        uint64_t v7 = (void *)(v4 + 840);
        if (*(char *)(v4 + 863) < 0) {
          uint64_t v7 = (void *)*v7;
        }
        uint64_t result = sub_21628804C(result, (uint64_t)v7 + *a2, *((unsigned __int8 *)a2 + 4));
        *(_DWORD *)(v4 + 384) -= *((unsigned __int8 *)a2 + 5);
      }
    }
  }
  return result;
}

uint64_t sub_2161B83FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
  uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 800) + 16 * (*(_DWORD *)(a2 + 8) - 1) + 12);
  uint64_t v8 = *(void *)(a1 + 888);
  pthread_rwlock_unlock(v6);
  return v8 + 12 * (v7 + a3);
}

uint64_t sub_2161B8470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1 + 800) + 16 * (*(_DWORD *)(a2 + 8) - 1) + 5);
  pthread_rwlock_unlock(v4);
  return v5;
}

void sub_2161B84CC(uint64_t a1, uint64_t a2, __int16 a3, void *__src, size_t __len, __int16 a6, __int16 a7)
{
  *(_WORD *)(a2 + 2) = a6;
  *(_WORD *)(a2 + 6) = a7;
  *(_WORD *)(a2 + 4) = 11;
  *(_WORD *)a2 = a3;
  *(_DWORD *)(a2 + ++**(_DWORD **)(result + 8) = -1431655765 * ((*(void *)(a1 + 872) - *(void *)(a1 + 864)) >> 3);
  *(_WORD *)__s = 0;
  sub_21612F5FC(&__p, __src, __len);
  std::string::append(&__p, __s, 2uLL);
  unint64_t v8 = *(void *)(a1 + 872);
  if (v8 >= *(void *)(a1 + 880))
  {
    uint64_t v10 = sub_2161BAB5C((uint64_t *)(a1 + 864), (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_21610A674(*(unsigned char **)(a1 + 872), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v8 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v8 = v9;
    }
    uint64_t v10 = v8 + 24;
    *(void *)(a1 + 872) = v8 + 24;
  }
  *(void *)(a1 + 872) = v10;
  ++*(_DWORD *)(a1 + 832);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2161B85C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 872) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161B85EC(uint64_t a1)
{
  std::string __str = 0;
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  int v2 = *(_DWORD *)(a1 + 820);
  if (v2 < 1)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v5 = *(void *)(a1 + 800) + 16 * i;
      int v7 = *(unsigned __int8 *)(v5 + 5);
      int v6 = (unsigned __int8 *)(v5 + 5);
      if (v7)
      {
        unsigned int v8 = 0;
        long long v9 = (_DWORD *)(*(void *)(a1 + 800) + 16 * i + 12);
        do
        {
          uint64_t v10 = *(void *)(a1 + 888) + 12 * (v8 + *v9);
          unsigned int v11 = *(_DWORD *)(v10 + 8);
          *(_DWORD *)(v10 + ++**(_DWORD **)(result + 8) = -1431655765 * ((v3 - (unint64_t)__str) >> 3);
          uint64_t v12 = *(void *)(a1 + 864) + 24 * v11;
          if (v3 >= v16)
          {
            unint64_t v3 = sub_2161BAB5C((uint64_t *)&__str, (long long *)v12);
          }
          else
          {
            if (*(char *)(v12 + 23) < 0)
            {
              sub_21610A674((unsigned char *)v3, *(void **)v12, *(void *)(v12 + 8));
            }
            else
            {
              long long v13 = *(_OWORD *)v12;
              *(void *)(v3 + 16) = *(void *)(v12 + 16);
              *(_OWORD *)unint64_t v3 = v13;
            }
            v3 += 24;
          }
          unint64_t v15 = v3;
          ++v8;
        }
        while (v8 < *v6);
        int v2 = *(_DWORD *)(a1 + 820);
      }
    }
  }
  if ((std::string **)(a1 + 864) != &__str) {
    sub_2161BAF4C(a1 + 864, __str, (long long *)v3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (void)__str) >> 3));
  }
  p_str = &__str;
  sub_21613EFD0((void ***)&p_str);
}

void sub_2161B8760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_21613EFD0(&a12);
  _Unwind_Resume(a1);
}

void sub_2161B878C(uint64_t a1)
{
  int v2 = (void *)(a1 + 744);
  unint64_t v3 = *(_DWORD ***)(a1 + 744);
  if (*(_DWORD ***)(a1 + 752) != v3)
  {
    if (*v3)
    {
      sub_2162878F8(*v3);
      unint64_t v3 = (_DWORD **)*v2;
    }
    *(void *)(a1 + 752) = v3;
  }
  uint64_t v4 = malloc_type_malloc(24 * *(int *)(a1 + 820), 0x1010040E2407E0AuLL);
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned int *)(a1 + 820);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    unsigned int v8 = v4 + 4;
    long long v9 = (unsigned __int8 *)(*(void *)(a1 + 800) + 4);
    do
    {
      uint64_t v10 = a1 + 840;
      if (*(char *)(a1 + 863) < 0) {
        uint64_t v10 = *(void *)(a1 + 840);
      }
      uint64_t v11 = v10 + *((unsigned int *)v9 - 1);
      unsigned int v12 = *v9;
      v9 += 16;
      *((void *)v8 - 2) = v11;
      *((void *)v8 - 1) = v12;
      *unsigned int v8 = ++v7;
      v8 += 6;
    }
    while (v6 != v7);
  }
  qsort(v4, (int)v6, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_2161B8A48);
  long long v13 = malloc_type_malloc(8 * *(int *)(a1 + 820), 0x10040436913F5uLL);
  uint64_t v14 = malloc_type_malloc(8 * *(int *)(a1 + 820), 0x100004000313F17uLL);
  unint64_t v15 = malloc_type_malloc(4 * *(int *)(a1 + 820), 0x100004052888210uLL);
  unint64_t v16 = v15;
  if (*(int *)(a1 + 820) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v5 + 4;
    do
    {
      uint64_t v19 = *((void *)v18 - 1);
      v13[v17] = *((void *)v18 - 2);
      v14[v17] = v19;
      int v20 = *v18;
      v18 += 6;
      *((_DWORD *)v15 + v17++) = v20;
    }
    while (v17 < *(int *)(a1 + 820));
  }
  size_t v21 = malloc_type_malloc(0x58uLL, 0x10B0040A3C4D6A3uLL);
  uint64_t v22 = v21;
  if (v21)
  {
    v21[20] = 0;
    *(void *)size_t v21 = 0;
    *((void *)v21 + 1) = 0;
    v21[4] = 0;
    *((void *)v21 + 4) = 0;
    *((void *)v21 + 5) = 0;
    *((void *)v21 + 3) = 0;
  }
  sub_216332B10();
  int v23 = *(void **)(a1 + 752);
  unint64_t v24 = *(void *)(a1 + 760);
  if ((unint64_t)v23 >= v24)
  {
    uint64_t v26 = ((uint64_t)v23 - *v2) >> 3;
    if ((unint64_t)(v26 + 1) >> 61) {
      sub_2161BA9E4();
    }
    uint64_t v27 = v24 - *v2;
    uint64_t v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
      uint64_t v28 = v26 + 1;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29) {
      uint64_t v30 = (char *)sub_2160FFAA8(a1 + 760, v29);
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = &v30[8 * v26];
    uint64_t v32 = &v30[8 * v29];
    *(void *)uint64_t v31 = v22;
    unint64_t v25 = v31 + 8;
    unint64_t v33 = *(void **)(a1 + 752);
    uint64_t v34 = *(void **)(a1 + 744);
    if (v33 != v34)
    {
      do
      {
        uint64_t v35 = *--v33;
        *((void *)v31 - 1) = v35;
        v31 -= 8;
      }
      while (v33 != v34);
      unint64_t v33 = (void *)*v2;
    }
    *(void *)(a1 + 744) = v31;
    *(void *)(a1 + 752) = v25;
    *(void *)(a1 + 76sub_216195244(&a9, 0) = v32;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    void *v23 = v22;
    unint64_t v25 = v23 + 1;
  }
  *(void *)(a1 + 752) = v25;
  free(v16);
  free(v14);
  free(v13);

  free(v5);
}

uint64_t sub_2161B8A48(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  unint64_t v3 = (unint64_t)a2[1];
  if (v2 >= v3) {
    uint64_t v4 = a2[1];
  }
  else {
    uint64_t v4 = a1[1];
  }
  if (v4)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = *a2;
    while (1)
    {
      unsigned int v8 = *v5++;
      unsigned int v7 = v8;
      unsigned int v9 = *v6++;
      BOOL v10 = v7 >= v9;
      BOOL v11 = v7 == v9;
      if (v7 < v9) {
        return 0xFFFFFFFFLL;
      }
      if (!v11 && v10) {
        return 1;
      }
      if (!--v4) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    BOOL v10 = v2 >= v3;
    BOOL v12 = v2 > v3;
    if (v10) {
      return v12;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
}

void sub_2161B8AA0(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3, void *a4, size_t a5, __int16 a6, __int16 a7, __int16 a8)
{
  uint64_t v8 = *(void *)(a1 + 744);
  uint64_t v9 = *(void *)(a1 + 752);
  if (v8 != v9)
  {
    unint64_t v11 = *(unsigned int *)(a1 + 712);
    if (v11 < (v9 - v8) >> 3)
    {
      if (*(void *)(v8 + 8 * v11))
      {
        uint64_t v17 = *(unsigned int *)(a1 + 820);
        int v18 = *(_DWORD *)(a1 + 808);
        int v54 = v18;
        if (v17 == v18)
        {
          uint64_t v19 = *(unsigned int **)(a1 + 800);
          if ((int)v17 <= 1)
          {
            sub_2161B8380(a1, v19);
            int v20 = 0;
          }
          else
          {
            int v20 = 0;
            unsigned int v21 = v19[2];
            uint64_t v22 = v19 + 6;
            for (uint64_t i = 1; i != v17; ++i)
            {
              unsigned int v25 = *v22;
              v22 += 4;
              unsigned int v24 = v25;
              BOOL v26 = v21 > v25;
              if (v21 >= v25) {
                unsigned int v21 = v24;
              }
              if (v26) {
                int v20 = i;
              }
            }
            sub_2161B8380(a1, &v19[4 * v20]);
          }
          uint64_t v28 = *(char **)(a1 + 800);
          uint64_t v50 = v20;
          unint64_t v29 = &v28[16 * v20];
        }
        else
        {
          if (v17 == *(_DWORD *)(a1 + 816))
          {
            int v27 = *(_DWORD *)(a1 + 812) + v17;
            if (v27 >= v18) {
              int v27 = *(_DWORD *)(a1 + 808);
            }
            *(_DWORD *)(a1 + 816) = v27;
            uint64_t v28 = (char *)malloc_type_realloc(*(void **)(a1 + 800), 16 * v27, 0x100004023422098uLL);
            *(void *)(a1 + 80sub_216195244(&a9, 0) = v28;
          }
          else
          {
            uint64_t v28 = *(char **)(a1 + 800);
          }
          uint64_t v50 = (int)v17;
          uint64_t v30 = &v28[16 * (int)v17];
          uint64_t v31 = *(void *)(a1 + 896);
          *((_DWORD *)v30 + 3) = -1431655765 * ((unint64_t)(v31 - *(void *)(a1 + 888)) >> 2);
          v30[6] = 32;
          LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
          __str.__r_.__value_.__r.__words[0] = 0;
          sub_2161BACC8((unint64_t *)(a1 + 888), v31, 0x20uLL, (unint64_t)&__str);
          unint64_t v29 = v30;
          int v20 = v17;
        }
        uint64_t v32 = (uint64_t *)(a1 + 840);
        if (*(char *)(a1 + 863) < 0) {
          uint64_t v33 = *(void *)(a1 + 848);
        }
        else {
          LODWORD(v33) = *(unsigned __int8 *)(a1 + 863);
        }
        uint64_t v51 = v29;
        *(_DWORD *)unint64_t v29 = v33;
        std::string::append((std::string *)(a1 + 840), a2, a3);
        uint64_t v34 = &v28[16 * v50];
        v34[4] = a3;
        uint64_t v35 = (unsigned __int8 *)(v34 + 4);
        sub_2161B84CC(a1, *(void *)(a1 + 888) + 12 * *((unsigned int *)v35 + 2), a8, a4, a5, a6, a7);
        v35[1] = 1;
        int v36 = *(_DWORD *)(a1 + 824);
        *(_DWORD *)(a1 + 824) = v36 + 1;
        *((_DWORD *)v35 + 1) = v36;
        uint64_t v37 = *(void *)(a1 + 744);
        uint64_t v38 = *(void *)(a1 + 752);
        if (v37 == v38)
        {
          uint64_t v41 = 0;
          int v40 = v54;
        }
        else
        {
          unint64_t v39 = *(unsigned int *)(a1 + 712);
          int v40 = v54;
          if (v39 >= (v38 - v37) >> 3) {
            uint64_t v41 = 0;
          }
          else {
            uint64_t v41 = *(void *)(v37 + 8 * v39);
          }
        }
        uint64_t v42 = a1 + 840;
        if (*(char *)(a1 + 863) < 0) {
          uint64_t v42 = *v32;
        }
        sub_216287A90(v41, v42 + *(unsigned int *)v51, *v35, v20 + 1);
        if (v17 != v40) {
          ++*(_DWORD *)(a1 + 820);
        }
        int v43 = *(_DWORD *)(a1 + 828) + 1;
        *(_DWORD *)(a1 + 82++**(_DWORD **)(result + 8) = v43;
        if (v43 == 300)
        {
          sub_2161B878C(a1);
          memset(&__str, 0, sizeof(__str));
          if (*(int *)(a1 + 820) >= 1)
          {
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            do
            {
              uint64_t v46 = a1 + 840;
              if (*(char *)(a1 + 863) < 0) {
                uint64_t v46 = *v32;
              }
              uint64_t v47 = (unsigned int *)(*(void *)(a1 + 800) + v44);
              std::string::value_type v48 = (const std::string::value_type *)(v46 + *v47);
              unsigned int v49 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unsigned int v49 = __str.__r_.__value_.__r.__words[1];
              }
              *uint64_t v47 = v49;
              std::string::append(&__str, v48, *((unsigned __int8 *)v47 + 4));
              ++v45;
              v44 += 16;
            }
            while (v45 < *(int *)(a1 + 820));
          }
          std::string::operator=((std::string *)(a1 + 840), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(a1 + 82++**(_DWORD **)(result + 8) = 0;
        }
        ++*(_DWORD *)(a1 + 384);
      }
    }
  }
}

void sub_2161B8DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161B8E14(uint64_t a1, int a2, unsigned __int16 *__src, size_t a4, int a5, uint64_t a6, __int16 a7)
{
  size_t v10 = a4;
  uint64_t v12 = a1;
  uint64_t v13 = *(void *)(a1 + 800);
  uint64_t v14 = a2;
  uint64_t v15 = v13 + 16 * a2;
  int v18 = *(unsigned __int8 *)(v15 + 5);
  uint64_t v17 = (unsigned char *)(v15 + 5);
  LODWORD(v16) = v18;
  if (v18)
  {
    unint64_t v19 = 0;
    char v20 = 0;
    uint64_t v64 = a2;
    uint64_t v65 = *(void *)(a1 + 800);
    uint64_t v21 = v13 + 16 * a2;
    uint64_t v22 = (unsigned int *)(v21 + 12);
    int v23 = (unsigned __int8 *)(v21 + 4);
    unint64_t v58 = (a4 >> 1) - 1;
    if (a4 >> 1 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = a4 >> 1;
    }
    int v25 = -1;
    do
    {
      unsigned int v26 = *v22;
      uint64_t v27 = *(void *)(v12 + 888);
      unint64_t v28 = v19;
      while (1)
      {
        unsigned int v29 = v26 + v28;
        uint64_t v30 = (__int16 *)(v27 + 12 * (v26 + v28));
        if (*v30 < a7)
        {
          if (*v23 > 5u
            || ((uint64_t v31 = v27 + 12 * v29,
                 int v32 = *(unsigned __int16 *)(v31 + 2),
                 int v33 = *(unsigned __int16 *)(v31 + 6),
                 v32 == a5)
              ? (BOOL v34 = v33 == a6)
              : (BOOL v34 = 0),
                v34))
          {
            a7 = *v30;
          }
        }
        if ((v20 & 1) == 0) {
          break;
        }
        ++v28;
        char v20 = 1;
        if (v28 >= v16) {
          goto LABEL_36;
        }
      }
      uint64_t v59 = v24;
      int v60 = v25;
      uint64_t v61 = v22;
      uint64_t v62 = v17;
      int v63 = a5;
      uint64_t v35 = a6;
      int v36 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 144);
      uint64_t v37 = v12;
      uint64_t v38 = v12;
      unint64_t v39 = v10;
      uint64_t v40 = v36(v38);
      size_t v10 = v39;
      if (v39 >= 2)
      {
        unint64_t v42 = 0;
        int v43 = __src;
        a6 = v35;
        uint64_t v12 = v37;
        a5 = v63;
        uint64_t v22 = v61;
        uint64_t v17 = v62;
        int v25 = v60;
        uint64_t v24 = v59;
        while (*(_WORD *)(v40 + 2 * v42))
        {
          if (*(unsigned __int16 *)(v40 + 2 * v42) != *v43) {
            goto LABEL_28;
          }
          ++v42;
          ++v43;
          if (v59 == v42)
          {
            uint64_t v41 = v59;
            goto LABEL_25;
          }
        }
        if (v42 >= v58) {
          goto LABEL_26;
        }
LABEL_28:
        BOOL v44 = 0;
      }
      else
      {
        uint64_t v41 = 0;
        a6 = v35;
        uint64_t v12 = v37;
        a5 = v63;
        uint64_t v22 = v61;
        uint64_t v17 = v62;
        int v25 = v60;
        uint64_t v24 = v59;
LABEL_25:
        int v43 = (unsigned __int16 *)(v40 + 2 * v41);
LABEL_26:
        BOOL v44 = *v43 == 0;
      }
      uint64_t v45 = v27 + 12 * v29;
      if (*(unsigned __int16 *)(v45 + 2) != a5) {
        BOOL v44 = 0;
      }
      BOOL v46 = *(unsigned __int16 *)(v45 + 6) == a6;
      char v20 = v44 && v46;
      if (v44 && v46) {
        int v25 = v28;
      }
      uint64_t v16 = *v17;
      unint64_t v19 = (v28 + 1);
    }
    while ((int)v28 + 1 < v16);
    if (v20)
    {
      unsigned int v26 = *v22;
      uint64_t v27 = *(void *)(v12 + 888);
      int v25 = v28;
LABEL_36:
      uint64_t v14 = v64;
      uint64_t v13 = v65;
      uint64_t v47 = (__int16 *)(v27 + 12 * (v26 + v25));
      if (*v47 != a7)
      {
        if (v16)
        {
          uint64_t v16 = v16;
          do
          {
            std::string::value_type v48 = (__int16 *)(v27 + 12 * v26);
            int v49 = *v48;
            if (v49 < *v47) {
              __int16 *v48 = v49 + 1;
            }
            ++v26;
            --v16;
          }
          while (v16);
        }
        *uint64_t v47 = a7;
      }
      goto LABEL_45;
    }
    uint64_t v14 = v64;
    uint64_t v13 = v65;
    if (v16 <= 0x1F) {
      goto LABEL_44;
    }
    int v51 = 0;
    unsigned int v52 = *v22;
    uint64_t v53 = *(void *)(v12 + 888);
    uint64_t v54 = 12 * *v22;
    __int16 v55 = *(_WORD *)(v53 + v54);
    *(_WORD *)(v53 + v54) = v55 + 1;
    for (uint64_t i = 1; i != v16; ++i)
    {
      int v57 = *(__int16 *)(v53 + 12 * (v52 + i));
      if (v55 < v57) {
        int v51 = i;
      }
      if (v55 <= v57) {
        __int16 v55 = *(_WORD *)(v53 + 12 * (v52 + i));
      }
      *(_WORD *)(v53 + 12 * (v52 + i)) = v57 + 1;
    }
    sub_2161B84CC(v12, v53 + 12 * (v51 + v52), a7, __src, v10, a5, a6);
  }
  else
  {
LABEL_44:
    sub_2161B84CC(v12, *(void *)(v12 + 888) + 12 * (*(_DWORD *)(v13 + 16 * v14 + 12) + v16), a7 - 1, __src, v10, a5, a6);
    ++*v17;
    ++*(_DWORD *)(v12 + 384);
  }
LABEL_45:
  int v50 = *(_DWORD *)(v12 + 824);
  *(_DWORD *)(v12 + 824) = v50 + 1;
  *(_DWORD *)(v13 + 16 * v14 + ++**(_DWORD **)(result + 8) = v50;
}

uint64_t sub_2161B916C(uint64_t a1, unsigned __int8 *a2, std::string::size_type a3, void *a4, size_t a5, int a6, int a7, __int16 a8)
{
  uint64_t v16 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  uint64_t v17 = *(void *)(a1 + 744);
  uint64_t v18 = *(void *)(a1 + 752);
  if (v17 == v18 || (unint64_t v19 = *(unsigned int *)(a1 + 712), v19 >= (v18 - v17) >> 3))
  {
    BOOL v20 = 0;
    if (!a5) {
      return pthread_rwlock_unlock(v16);
    }
  }
  else
  {
    BOOL v20 = *(void *)(v17 + 8 * v19) != 0;
    if (!a5) {
      return pthread_rwlock_unlock(v16);
    }
  }
  if (a4 && a3 && a2 && v20)
  {
    sub_2161C04AC(0);
    if (!a6) {
      LOWORD(a6) = word_26797EF54;
    }
    if (!a7) {
      LOWORD(a7) = word_26797EF54;
    }
    sub_2161B7914(a1);
    uint64_t v21 = *(void *)(a1 + 744);
    uint64_t v22 = *(void *)(a1 + 752);
    if (v21 == v22 || (unint64_t v23 = *(unsigned int *)(a1 + 712), v23 >= (v22 - v21) >> 3)) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8 * v23);
    }
    int v25 = sub_216287948(v24, a2, a3);
    if (v25 < 0) {
      sub_2161B8AA0(a1, (const std::string::value_type *)a2, a3, a4, a5, a6, a7, a8);
    }
    else {
      sub_2161B8E14(a1, v25 - 1, (unsigned __int16 *)a4, a5, (unsigned __int16)a6, (unsigned __int16)a7, a8);
    }
    if (*(_DWORD *)(a1 + 832) >= 0x12Cu)
    {
      sub_2161B85EC(a1);
      *(_DWORD *)(a1 + 832) = 0;
    }
    *(unsigned char *)(a1 + 836) = 0;
  }
  return pthread_rwlock_unlock(v16);
}

void sub_2161B92F0(_Unwind_Exception *a1)
{
  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161B9310(uint64_t a1, const void ***a2)
{
  uint64_t v4 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  uint64_t v5 = *a2;
  uint64_t v6 = (char *)a2[1] - (char *)*a2;
  if (v6)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 >= *(int *)(a1 + 808)) {
      unint64_t v8 = *(int *)(a1 + 808);
    }
    else {
      unint64_t v8 = v7;
    }
    uint64_t v61 = v4;
    if (v8 > *(int *)(a1 + 816))
    {
      *(_DWORD *)(a1 + 816) = v8;
      *(void *)(a1 + 80sub_216195244(&a9, 0) = malloc_type_realloc(*(void **)(a1 + 800), 16 * (int)v8, 0x100004023422098uLL);
      uint64_t v5 = *a2;
    }
    uint64_t v68 = sub_2161B6334;
    unint64_t v9 = 126 - 2 * __clz(v8);
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    sub_2161BB160((unint64_t)v5, (unint64_t)&v5[5 * v8], (uint64_t (**)(long long *, long long *))&v68, v10, 1);
    uint64_t v68 = 0;
    unint64_t v69 = 0;
    unint64_t v70 = 0;
    std::string __p = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v62 = 0;
    int v63 = 0;
    uint64_t v64 = 0;
    unint64_t v11 = **a2;
    size_t v12 = (size_t)(*a2)[1];
    *(_DWORD *)(a1 + 82sub_216195244(&a9, 0) = 0;
    if (v8)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (i && (uint64_t v14 = *a2, (const void *)v12 == (*a2)[5 * i + 1]) && !memcmp(v11, v14[5 * i], v12))
        {
          uint64_t v58 = *(void *)(a1 + 800) + 16 * *(int *)(a1 + 820);
          unsigned int v59 = *(unsigned __int8 *)(v58 - 11);
          if (v59 <= 0x1F)
          {
            sub_2161B84CC(a1, *(void *)(a1 + 888) + 12 * (*(_DWORD *)(v58 - 4) + v59), WORD2(v14[5 * i + 4]), (void *)v14[5 * i + 2], (size_t)v14[5 * i + 3], (__int16)v14[5 * i + 4], WORD1(v14[5 * i + 4]));
            ++*(unsigned char *)(v58 - 11);
          }
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 800);
          uint64_t v16 = *(int *)(a1 + 820);
          uint64_t v17 = *(void *)(a1 + 896);
          uint64_t v18 = v15 + 16 * v16;
          *(_DWORD *)(v18 + 12) = -1431655765 * ((unint64_t)(v17 - *(void *)(a1 + 888)) >> 2);
          unint64_t v19 = (unsigned int *)(v18 + 12);
          *((unsigned char *)v19 - 6) = 32;
          int v72 = 0;
          uint64_t v71 = 0;
          sub_2161BACC8((unint64_t *)(a1 + 888), v17, 0x20uLL, (unint64_t)&v71);
          if (*(char *)(a1 + 863) < 0) {
            uint64_t v20 = *(void *)(a1 + 848);
          }
          else {
            LODWORD(v2sub_216195244(&a9, 0) = *(unsigned __int8 *)(a1 + 863);
          }
          *(_DWORD *)(v15 + 16 * v16) = v20;
          std::string::append((std::string *)(a1 + 840), (const std::string::value_type *)(*a2)[5 * i], (std::string::size_type)(*a2)[5 * i + 1]);
          uint64_t v21 = (uint64_t)&(*a2)[5 * i];
          uint64_t v22 = v15 + 16 * v16;
          *(unsigned char *)(v22 + 4) = *(void *)(v21 + 8);
          sub_2161B84CC(a1, *(void *)(a1 + 888) + 12 * *v19, *(_WORD *)(v21 + 36), *(void **)(v21 + 16), *(void *)(v21 + 24), *(_WORD *)(v21 + 32), *(_WORD *)(v21 + 34));
          *(unsigned char *)(v22 + 5) = 1;
          int v23 = *(_DWORD *)(a1 + 824);
          *(_DWORD *)(a1 + 824) = v23 + 1;
          *(_DWORD *)(v22 + ++**(_DWORD **)(result + 8) = v23;
          uint64_t v24 = &(*a2)[5 * i];
          int v25 = v69;
          if (v69 >= v70)
          {
            uint64_t v27 = (v69 - (unsigned char *)v68) >> 3;
            if ((unint64_t)(v27 + 1) >> 61) {
              sub_21610CB04();
            }
            unint64_t v28 = (v70 - (unsigned char *)v68) >> 2;
            if (v28 <= v27 + 1) {
              unint64_t v28 = v27 + 1;
            }
            if ((unint64_t)(v70 - (unsigned char *)v68) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            if (v29) {
              uint64_t v30 = (char *)sub_2160FFAA8((uint64_t)&v70, v29);
            }
            else {
              uint64_t v30 = 0;
            }
            uint64_t v31 = &v30[8 * v27];
            *(void *)uint64_t v31 = *v24;
            unsigned int v26 = v31 + 8;
            int v33 = (char *)v68;
            int v32 = v69;
            if (v69 != v68)
            {
              do
              {
                uint64_t v34 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v31 - 1) = v34;
                v31 -= 8;
              }
              while (v32 != v33);
              int v32 = (char *)v68;
            }
            uint64_t v68 = v31;
            unint64_t v69 = v26;
            unint64_t v70 = &v30[8 * v29];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(void *)unint64_t v69 = *v24;
            unsigned int v26 = v25 + 8;
          }
          unint64_t v69 = v26;
          uint64_t v35 = &(*a2)[5 * i + 1];
          int v36 = v66;
          if (v66 >= v67)
          {
            uint64_t v38 = (char *)__p;
            uint64_t v39 = (v66 - (unsigned char *)__p) >> 3;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v41 = v67 - (unsigned char *)__p;
            if ((v67 - (unsigned char *)__p) >> 2 > v40) {
              unint64_t v40 = v41 >> 2;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42)
            {
              int v43 = (char *)sub_2160FFAA8((uint64_t)&v67, v42);
              uint64_t v38 = (char *)__p;
              int v36 = v66;
            }
            else
            {
              int v43 = 0;
            }
            BOOL v44 = &v43[8 * v39];
            *(void *)BOOL v44 = *v35;
            uint64_t v37 = v44 + 8;
            while (v36 != v38)
            {
              uint64_t v45 = *((void *)v36 - 1);
              v36 -= 8;
              *((void *)v44 - 1) = v45;
              v44 -= 8;
            }
            std::string __p = v44;
            uint64_t v66 = v37;
            uint64_t v67 = &v43[8 * v42];
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *(void *)uint64_t v66 = *v35;
            uint64_t v37 = v36 + 8;
          }
          uint64_t v66 = v37;
          int v46 = *(_DWORD *)(a1 + 820) + 1;
          uint64_t v47 = v63;
          if (v63 >= v64)
          {
            int v49 = v62;
            uint64_t v50 = v63 - v62;
            unint64_t v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62) {
              sub_21610CB04();
            }
            uint64_t v52 = (char *)v64 - (char *)v62;
            if (((char *)v64 - (char *)v62) >> 1 > v51) {
              unint64_t v51 = v52 >> 1;
            }
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v51;
            }
            if (v53)
            {
              uint64_t v54 = (char *)sub_2161129B4((uint64_t)&v64, v53);
              int v49 = v62;
              uint64_t v47 = v63;
            }
            else
            {
              uint64_t v54 = 0;
            }
            __int16 v55 = (int *)&v54[4 * v50];
            *__int16 v55 = v46;
            std::string::value_type v48 = v55 + 1;
            while (v47 != v49)
            {
              int v56 = *--v47;
              *--__int16 v55 = v56;
            }
            uint64_t v62 = v55;
            uint64_t v64 = (int *)&v54[4 * v53];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            *int v63 = v46;
            std::string::value_type v48 = v63 + 1;
          }
          int v63 = v48;
          uint64_t v57 = (uint64_t)&(*a2)[5 * i];
          unint64_t v11 = *(const void **)v57;
          size_t v12 = *(void *)(v57 + 8);
          ++*(_DWORD *)(a1 + 820);
        }
      }
    }
    uint64_t v4 = v61;
    sub_216332B10();
    *(_DWORD *)(a1 + 832) = 0;
    if (v62) {
      operator delete(v62);
    }
    if (__p)
    {
      uint64_t v66 = (char *)__p;
      operator delete(__p);
    }
    if (v68)
    {
      unint64_t v69 = (char *)v68;
      operator delete(v68);
    }
  }
  return pthread_rwlock_unlock(v4);
}

void sub_2161B9898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pthread_rwlock_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
}

uint64_t sub_2161B9900(uint64_t a1)
{
  unint64_t v2 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  unint64_t v3 = *(_DWORD ***)(a1 + 744);
  if (*(_DWORD ***)(a1 + 752) != v3)
  {
    if (*v3)
    {
      sub_2162878F8(*v3);
      unint64_t v3 = *(_DWORD ***)(a1 + 744);
    }
    *(void *)(a1 + 752) = v3;
  }
  uint64_t v4 = *(char **)(a1 + 800);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 820);
    if ((int)v5 >= 1)
    {
      uint64_t v6 = v4 + 6;
      do
      {
        *(_WORD *)(v6 - 1) = 0;
        v6 += 16;
        --v5;
      }
      while (v5);
    }
    free(v4);
    *(void *)(a1 + 80sub_216195244(&a9, 0) = 0;
    *(void *)(a1 + 816) = 0;
  }
  if (*(char *)(a1 + 863) < 0)
  {
    **(unsigned char **)(a1 + 84sub_216195244(&a9, 0) = 0;
    *(void *)(a1 + 84++**(_DWORD **)(result + 8) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 84sub_216195244(&a9, 0) = 0;
    *(unsigned char *)(a1 + 863) = 0;
  }
  sub_21613F024((uint64_t *)(a1 + 864));
  *(void *)(a1 + 896) = *(void *)(a1 + 888);
  *(void *)(a1 + 82++**(_DWORD **)(result + 8) = 0;
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a1 + 808);
  *(_WORD *)(a1 + 836) = 1;
  return pthread_rwlock_unlock(v2);
}

BOOL sub_2161B99DC(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  int v43 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  if (*(_DWORD *)(a1 + 820))
  {
    BOOL v2 = 1;
    if (!*(unsigned char *)(a1 + 836))
    {
      *(unsigned char *)(a1 + 836) = 1;
      sub_2161B878C(a1);
      unint64_t v3 = (int *)(a1 + 820);
      memset(&v55, 0, sizeof(v55));
      memset(&v54, 0, sizeof(v54));
      memset(&v53, 0, sizeof(v53));
      memset(&v52, 0, sizeof(v52));
      sub_2161BC064(__base, *(int *)(a1 + 820));
      int64_t v4 = *(int *)(a1 + 820);
      uint64_t v5 = __base[0];
      if ((int)v4 > 0)
      {
        int64_t v6 = 0;
        unint64_t v7 = (int *)(*(void *)(a1 + 800) + 8);
        do
        {
          int v8 = *v7;
          v7 += 4;
          v5[v6++] = v8;
          int64_t v4 = *v3;
        }
        while (v6 < v4);
      }
      qsort(v5, v4, 4uLL, (int (__cdecl *)(const void *, const void *))sub_2161BA2F8);
      LODWORD(v9) = *v3;
      if (*v3 >= 1)
      {
        uint64_t v10 = 0;
        int v11 = 0;
        int v12 = 0;
        int v13 = 0;
        do
        {
          uint64_t v14 = *(void *)(a1 + 800);
          uint64_t v15 = (std::string::value_type *)(v14 + 16 * v10);
          uint64_t v16 = bsearch(v15 + 8, __base[0], (int)v9, 4uLL, (int (__cdecl *)(const void *, const void *))sub_2161BA2F8);
          *((_DWORD *)v15 + 2) = ((unint64_t)v16 - (unint64_t)__base[0]) >> 2;
          uint64_t v17 = a1 + 840;
          if (*(char *)(a1 + 863) < 0) {
            uint64_t v17 = *(void *)(a1 + 840);
          }
          uint64_t v18 = v14 + 16 * v10;
          std::string::append(&v53, (const std::string::value_type *)(v17 + *(unsigned int *)v15), *(unsigned __int8 *)(v18 + 4));
          int v19 = *(_DWORD *)v15;
          __s = v15;
          *(_DWORD *)uint64_t v15 = v11;
          int v46 = *(unsigned __int8 *)(v18 + 4);
          int v47 = v12;
          uint64_t v20 = (_DWORD *)(v18 + 12);
          int v21 = *(_DWORD *)(v18 + 12);
          *(_DWORD *)(v18 + 12) = v12;
          if (*(unsigned char *)(v18 + 5))
          {
            int v44 = v19;
            uint64_t v45 = v10;
            unint64_t v22 = 0;
            do
            {
              uint64_t v23 = *(void *)(a1 + 888) + 12 * (v21 + v22);
              uint64_t v24 = (int *)(v23 + 8);
              uint64_t v25 = *(void *)(a1 + 864) + 24 * *(unsigned int *)(v23 + 8);
              if (*(char *)(v25 + 23) < 0) {
                std::string::size_type v26 = *(void *)(v25 + 8);
              }
              else {
                std::string::size_type v26 = *(unsigned __int8 *)(v25 + 23);
              }
              uint64_t v27 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, *(void *)(a1 + 888) + 12 * (v21 + v22));
              std::string::append(&v55, v27, v26);
              int v28 = *v24;
              *uint64_t v24 = v13;
              std::string::append(&v54, (const std::string::value_type *)v23, 0xCuLL);
              v13 += v26;
              *uint64_t v24 = v28;
              ++v22;
              unint64_t v29 = *((unsigned __int8 *)v20 - 7);
            }
            while (v22 < v29);
            unint64_t v3 = (int *)(a1 + 820);
            uint64_t v10 = v45;
            int v19 = v44;
          }
          else
          {
            LODWORD(v29) = 0;
          }
          std::string::append(&v52, __s, 0x10uLL);
          v11 += v46;
          int v12 = v47 + 12 * v29;
          *uint64_t v20 = v21;
          *(_DWORD *)__s = v19;
          ++v10;
          uint64_t v9 = *v3;
        }
        while (v10 < v9);
      }
      int v30 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v30 = v53.__r_.__value_.__r.__words[1];
      }
      int v50 = v30;
      uint64_t v31 = *(uint64_t **)(a1 + 744);
      if (*(uint64_t **)(a1 + 752) == v31 || (uint64_t v32 = *v31) == 0)
      {
        BOOL v2 = 0;
      }
      else
      {
        int v49 = 8 * (*(_DWORD *)(v32 + 16) + 259) + 16;
        sub_216157A4C(&v57);
        BOOL v2 = (*(_DWORD *)&v58[*(void *)(v57 - 24) + 24] & 5) == 0;
        if ((*(_DWORD *)&v58[*(void *)(v57 - 24) + 24] & 5) == 0)
        {
          int v33 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v33 = v55.__r_.__value_.__r.__words[1];
          }
          int v34 = v49 + v50 + v33 + 40;
          LOBYTE(v61) = 0;
          while ((v34 & 7) != 0)
          {
            std::string::append(&v55, (const std::string::value_type *)&v61, 1uLL);
            ++v34;
          }
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v35 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          }
          else {
            int v35 = v54.__r_.__value_.__r.__words[1];
          }
          int v36 = v34 + v35;
          DWORD2(v61) = 0;
          *(void *)&long long v61 = 0;
          if ((v36 & 7) != 0)
          {
            int v37 = v36 + 12;
            do
            {
              std::string::append(&v54, (const std::string::value_type *)&v61, 0xCuLL);
              BOOL v38 = (v37 & 7) == 0;
              v37 += 12;
            }
            while (!v38);
          }
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          uint64_t v39 = &v58[*(void *)(v57 - 24) - 8];
          if ((v39[32] & 5) == 0) {
            (*(void (**)(long long *__return_ptr))(**((void **)v39 + 5) + 32))(&v61);
          }
          MEMORY[0x2166CA510](v56, &v57);
          unint64_t v40 = &v58[*(void *)(v57 - 24) - 8];
          if ((v40[32] & 5) == 0)
          {
            uint64_t v41 = *((void *)v40 + 5);
            uint64_t v69 = 0;
            long long v67 = 0u;
            long long v68 = 0u;
            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            (*(void (**)(void *__return_ptr))(*(void *)v41 + 40))(v60);
            if (v60[16] == -1) {
              std::ios_base::clear((std::ios_base *)&v58[*(void *)(v57 - 24) - 8], *(_DWORD *)&v58[*(void *)(v57 - 24) + 24] | 4);
            }
          }
          MEMORY[0x2166CA520](v56);
          std::ostream::write();
          if (!std::filebuf::close()) {
            std::ios_base::clear((std::ios_base *)&v58[*(void *)(v57 - 24) - 8], *(_DWORD *)&v58[*(void *)(v57 - 24) + 24] | 4);
          }
        }
        uint64_t v57 = *MEMORY[0x263F8C2B0];
        *(void *)&v58[*(void *)(v57 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
        MEMORY[0x2166CA430](v58);
        std::ostream::~ostream();
        MEMORY[0x2166CA750](&v59);
      }
      if (__base[0])
      {
        __base[1] = __base[0];
        operator delete(__base[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    BOOL v2 = 1;
  }
  pthread_rwlock_unlock(v43);
  return v2;
}

void sub_2161BA228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pthread_rwlock_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,uint64_t a51)
{
  if (__p) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  pthread_rwlock_unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2161BA2F8(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

uint64_t sub_2161BA310(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D3F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D3F0))
  {
    qword_26797D3E8 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797D3F0);
  }
  if (!a5 || (*(unsigned char *)(a5 + 5) & 1) == 0)
  {
    pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
    sub_2161B7914(a1);
    uint64_t v17 = *(void *)(a1 + 744);
    uint64_t v18 = *(void *)(a1 + 752);
    if (v17 != v18)
    {
      unint64_t v19 = *(unsigned int *)(a1 + 712);
      if (v19 < (v18 - v17) >> 3)
      {
        uint64_t v20 = *(void *)(v17 + 8 * v19);
        if (v20)
        {
          if ((_BYTE)a2)
          {
            if (a2 == 1)
            {
              if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
              {
                if ((a2 & 0x800) != 0)
                {
                  uint64_t v28 = *(void *)(a1 + 744);
                  uint64_t v29 = *(void *)(a1 + 752);
                  if (v28 == v29 || (unint64_t v30 = *(unsigned int *)(a1 + 712), v30 >= (v29 - v28) >> 3)) {
                    uint64_t v31 = 0;
                  }
                  else {
                    uint64_t v31 = *(void *)(v28 + 8 * v30);
                  }
                  unint64_t v21 = sub_2162448C0(v31, a3, a4, a9, a8, a5, a6, 0, 2u, 0);
                }
                else if ((a2 & 0xF000) != 0 && *(unsigned char *)qword_26797D3E8)
                {
                  uint64_t v23 = *(void *)(a1 + 744);
                  uint64_t v24 = *(void *)(a1 + 752);
                  if (v23 == v24 || (unint64_t v25 = *(unsigned int *)(a1 + 712), v25 >= (v24 - v23) >> 3)) {
                    uint64_t v26 = 0;
                  }
                  else {
                    uint64_t v26 = *(void *)(v23 + 8 * v25);
                  }
                  unint64_t v21 = sub_216244078(v26, (uint64_t)a3, a4, 0, a9, a8, (a2 >> 12) & 0xE | (a2 >> 8) & 0x10);
                }
                else
                {
                  uint64_t v34 = *(void *)(a1 + 744);
                  uint64_t v35 = *(void *)(a1 + 752);
                  if (v34 == v35 || (unint64_t v36 = *(unsigned int *)(a1 + 712), v36 >= (v35 - v34) >> 3)) {
                    uint64_t v37 = 0;
                  }
                  else {
                    uint64_t v37 = *(void *)(v34 + 8 * v36);
                  }
                  unint64_t v21 = sub_216243284(v37, a3, a4, 0, a9, 0, a8);
                }
                goto LABEL_27;
              }
            }
            else if (a2 == 2)
            {
              if ((a2 & 0x800) == 0)
              {
                if ((a2 & 0xF000) != 0) {
                  unint64_t v21 = sub_216243D8C(v20, (uint64_t)a3, a4, a9, a8, (a2 >> 12) & 0xE | (a2 >> 8) & 0x10);
                }
                else {
                  unint64_t v21 = sub_2162879E0(v20, (uint64_t)a3, a4, a9, a8);
                }
                goto LABEL_27;
              }
              unsigned int v27 = 1;
              goto LABEL_26;
            }
          }
          else
          {
            if ((a2 & 0x800) != 0)
            {
              a7 = 0;
              unsigned int v27 = 0;
LABEL_26:
              unint64_t v21 = sub_2162448C0(v20, a3, a4, a9, a8, a5, a6, a7, v27, 0);
              goto LABEL_27;
            }
            if ((a2 & 0xF000) != 0)
            {
              unint64_t v21 = sub_216243B00(v20, (uint64_t)a3, a4, 0, a9, a8, (a2 >> 12) & 0xE | (a2 >> 8) & 0x10);
LABEL_27:
              uint64_t v22 = v21;
LABEL_34:
              pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 936));
              return v22;
            }
            int v32 = sub_216287948(v20, a3, a4);
            if ((v32 & 0x80000000) == 0)
            {
              *(_DWORD *)(a8 + ++**(_DWORD **)(result + 8) = v32;
              *(_WORD *)(a8 + 12) = a4;
              uint64_t v22 = 1;
              goto LABEL_34;
            }
          }
        }
      }
    }
    uint64_t v22 = 0;
    goto LABEL_34;
  }
  return 0;
}

void sub_2161BA664(_Unwind_Exception *a1)
{
}

uint64_t sub_2161BA698(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, int a5, unsigned char *a6)
{
  int v12 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
  sub_2161B7914(a1);
  uint64_t v13 = *(void *)(a1 + 744);
  uint64_t v14 = *(void *)(a1 + 752);
  if (v13 == v14
    || (unint64_t v15 = *(unsigned int *)(a1 + 712), v15 >= (v14 - v13) >> 3)
    || (uint64_t v16 = *(void *)(v13 + 8 * v15)) == 0)
  {
LABEL_16:
    uint64_t v23 = 0;
    goto LABEL_17;
  }
  if ((_BYTE)a2)
  {
    if (a2 == 1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
      {
        uint64_t v24 = *(void *)(a1 + 744);
        uint64_t v25 = *(void *)(a1 + 752);
        if ((a2 & 0xF000) != 0)
        {
          if (v24 == v25 || (unint64_t v26 = *(unsigned int *)(a1 + 712), v26 >= (v25 - v24) >> 3)) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = *(void *)(v24 + 8 * v26);
          }
          uint64_t v22 = sub_216244674(v27, a3, a4, a5, a6);
          goto LABEL_20;
        }
        if (v24 == v25 || (unint64_t v29 = *(unsigned int *)(a1 + 712), v29 >= (v25 - v24) >> 3)) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = *(void *)(v24 + 8 * v29);
        }
        uint64_t v17 = (unsigned __int8 *)a3;
        uint64_t v18 = a4;
        int v19 = a5;
        uint64_t v20 = (uint64_t)a6;
        int v21 = 0;
LABEL_8:
        uint64_t v22 = sub_2162444D4(v16, v17, v18, v19, v20, v21);
LABEL_20:
        uint64_t v23 = v22;
        goto LABEL_17;
      }
    }
    else if (a2 == 3)
    {
      uint64_t v17 = (unsigned __int8 *)a3;
      uint64_t v18 = a4;
      int v19 = a5;
      uint64_t v20 = (uint64_t)a6;
      int v21 = 1;
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  uint64_t v23 = 0;
  uint64_t v30 = 0;
  if (*(void *)(v16 + 24) >= 2uLL)
  {
    sub_2162442D8(v16, 1u, a3, a4, a5, (uint64_t)a6, (uint64_t)a6, &v30);
    uint64_t v23 = v30;
  }
LABEL_17:
  pthread_rwlock_unlock(v12);
  return v23;
}

void sub_2161BA860(_Unwind_Exception *a1)
{
  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161BA880(uint64_t a1)
{
  return *(void *)(a1 + 368);
}

uint64_t sub_2161BA888(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = *(uint64_t (**)(uint64_t, char *, size_t))(*(void *)a1 + 56);

  return v5(a1, __s, v4);
}

uint64_t sub_2161BA900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, a3, a4, a6, 0);
}

void sub_2161BA934(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_2161BA940(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_2161BA94C()
{
  return 1;
}

uint64_t sub_2161BA954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a2 + 8);
  if (*(void *)(a1 + 752) - *(void *)(a1 + 744) == 8) {
    return *(void *)(a1 + 352) + 12 * (v3 >> 8) + 12 * a3;
  }
  else {
    return *(void *)(a1 + 352)
  }
         + 12
         * *(unsigned int *)(*(void *)(*(void *)(a1 + 768) + 8 * *(unsigned int *)(a1 + 712))
                           + 4 * (a3 + (v3 >> 8)));
}

uint64_t sub_2161BA9A8(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8);
}

uint64_t sub_2161BA9B0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 360) + *(unsigned int *)(a2 + 8);
}

char *sub_2161BA9C0(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(void *)(a1 + 864) + 24 * *(unsigned int *)(a2 + 8));
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

void sub_2161BA9E4()
{
}

uint64_t sub_2161BA9FC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2161BAA74((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2161BAA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - ++**(_DWORD **)(result + 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2161BAB24((uint64_t)v12);
  return v10;
}

uint64_t sub_2161BAB24(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2161758D4(a1);
  }
  return a1;
}

uint64_t sub_2161BAB5C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216129BFC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674(v11, *(void **)a2, *((void *)a2 + 1));
    int v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_21613FBD0(a1, v15);
  uint64_t v13 = a1[1];
  sub_21613FD68((uint64_t)v15);
  return v13;
}

void sub_2161BAC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613FD68((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2161BAC80(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    sub_2160FFA74();
  }
  return operator new(12 * a1);
}

void sub_2161BACC8(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    unint64_t v8 = (char *)*a1;
    uint64_t v7 = (char *)a1[1];
    uint64_t v9 = (uint64_t)(a2 - *a1) / 12;
    uint64_t v10 = (char *)(*a1 + 12 * v9);
    unint64_t v11 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v7) >> 2) >= a3)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v10) >> 2);
      uint64_t v17 = (char *)a1[1];
      unint64_t v18 = a3;
      if (a3 > v16)
      {
        unint64_t v19 = 0;
        uint64_t v17 = &v7[12 * (a3 - v16)];
        do
        {
          uint64_t v20 = &v7[v19];
          uint64_t v21 = *(void *)a4;
          *((_DWORD *)v20 + 2) = *(_DWORD *)(a4 + 8);
          *(void *)uint64_t v20 = v21;
          v19 += 12;
        }
        while (12 * a3 - 4 * ((v7 - v10) >> 2) != v19);
        a1[1] = (unint64_t)v17;
        if (v7 == v10) {
          return;
        }
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v10) >> 2);
      }
      uint64_t v22 = &v10[12 * a3];
      unint64_t v23 = (unint64_t)&v17[-12 * a3];
      uint64_t v24 = v17;
      if (v23 < (unint64_t)v7)
      {
        uint64_t v24 = v17;
        do
        {
          uint64_t v25 = *(void *)v23;
          *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
          *(void *)uint64_t v24 = v25;
          v24 += 12;
          v23 += 12;
        }
        while (v23 < (unint64_t)v7);
      }
      a1[1] = (unint64_t)v24;
      if (v17 != v22) {
        memmove(&v10[12 * a3], v10, v17 - v22);
      }
      if ((unint64_t)v10 <= v4)
      {
        if (a1[1] <= v4) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = a3;
        }
        v4 += 12 * v26;
      }
      do
      {
        uint64_t v27 = *(void *)v4;
        *((_DWORD *)v10 + 2) = *(_DWORD *)(v4 + 8);
        *(void *)uint64_t v10 = v27;
        v10 += 12;
        --v18;
      }
      while (v18);
    }
    else
    {
      unint64_t v12 = a3 - 0x5555555555555555 * ((v7 - v8) >> 2);
      if (v12 > 0x1555555555555555) {
        sub_2161BA9E4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v8) >> 2);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v14 = 0x1555555555555555;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)sub_2161BAC80(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v28 = v14 + 12 * v9;
      uint64_t v29 = 3 * a3;
      uint64_t v30 = (char *)(v28 + 12 * a3);
      uint64_t v31 = 4 * v29;
      unint64_t v32 = v28;
      do
      {
        uint64_t v33 = *(void *)v4;
        *(_DWORD *)(v32 + ++**(_DWORD **)(result + 8) = *(_DWORD *)(v4 + 8);
        *(void *)unint64_t v32 = v33;
        v32 += 12;
        v31 -= 12;
      }
      while (v31);
      uint64_t v34 = (char *)*a1;
      if ((char *)*a1 != v10)
      {
        uint64_t v35 = v10;
        do
        {
          uint64_t v36 = *(void *)(v35 - 12);
          v35 -= 12;
          int v37 = *((_DWORD *)v35 + 2);
          *(void *)(v28 - 12) = v36;
          v28 -= 12;
          *(_DWORD *)(v28 + ++**(_DWORD **)(result + 8) = v37;
        }
        while (v35 != v34);
      }
      unint64_t v38 = v14 + 12 * v15;
      uint64_t v39 = (char *)a1[1];
      int64_t v40 = v39 - v10;
      if (v39 != v10) {
        memmove(v30, v10, v39 - v10);
      }
      uint64_t v41 = (_DWORD *)*a1;
      *a1 = v28;
      a1[1] = (unint64_t)&v30[v40];
      a1[2] = v38;
      if (v41)
      {
        operator delete(v41);
      }
    }
  }
}

void sub_2161BAF4C(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_2161BB0C4((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216129BA8((void *)a1, v11);
    unint64_t v12 = sub_2161408E0(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_2161BB100(__str, v13, v9);
    unint64_t v12 = sub_2161408E0(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v12;
    return;
  }
  sub_2161BB100(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = v15;
}

void sub_2161BB0B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++**(_DWORD **)(result + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2161BB0BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++**(_DWORD **)(result + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2161BB0C4(uint64_t *a1)
{
  if (*a1)
  {
    sub_21613F024(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_2161BB100(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void sub_2161BB160(unint64_t a1, unint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v135 = a2 - 40;
    uint64_t v132 = (long long *)(a2 - 120);
    v133 = (long long *)(a2 - 80);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          uint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v12) >> 3);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                if ((*a3)((long long *)v135, (long long *)a1))
                {
                  long long v60 = *(_OWORD *)a1;
                  long long v61 = *(_OWORD *)(a1 + 16);
                  uint64_t v142 = *(void *)(a1 + 32);
                  long long v140 = v60;
                  long long v141 = v61;
                  long long v62 = *(_OWORD *)v135;
                  long long v63 = *(_OWORD *)(v135 + 16);
                  *(void *)(a1 + 32) = *(void *)(v135 + 32);
                  *(_OWORD *)a1 = v62;
                  *(_OWORD *)(a1 + 16) = v63;
                  long long v64 = v140;
                  long long v65 = v141;
                  *(void *)(v135 + 32) = v142;
                  *(_OWORD *)uint64_t v135 = v64;
                  *(_OWORD *)(v135 + 16) = v65;
                }
                break;
              case 3:
                sub_2161BBAF8((long long *)a1, (long long *)(a1 + 40), (long long *)v135, a3);
                break;
              case 4:
                sub_2161BBE4C(a1, a1 + 40, a1 + 80, v135, a3);
                break;
              case 5:
                sub_2161BBF38(a1, a1 + 40, a1 + 80, a1 + 120, v135, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 959)
          {
            long long v66 = (long long *)(a1 + 40);
            BOOL v68 = a1 == a2 || v66 == (long long *)a2;
            if (a5)
            {
              if (!v68)
              {
                uint64_t v69 = 0;
                unint64_t v70 = a1;
                do
                {
                  uint64_t v71 = (long long *)v70;
                  unint64_t v70 = (unint64_t)v66;
                  if ((*a3)(v66, v71))
                  {
                    long long v72 = *(_OWORD *)v70;
                    long long v73 = *(_OWORD *)(v70 + 16);
                    uint64_t v142 = *(void *)(v70 + 32);
                    long long v140 = v72;
                    long long v141 = v73;
                    uint64_t v74 = v69;
                    while (1)
                    {
                      uint64_t v75 = a1 + v74;
                      long long v76 = *(_OWORD *)(a1 + v74 + 16);
                      *(_OWORD *)(v75 + 4sub_216195244(&a9, 0) = *(_OWORD *)(a1 + v74);
                      *(_OWORD *)(v75 + 56) = v76;
                      *(void *)(v75 + 72) = *(void *)(a1 + v74 + 32);
                      if (!v74) {
                        break;
                      }
                      v74 -= 40;
                      if (((*a3)(&v140, (long long *)(v74 + a1)) & 1) == 0)
                      {
                        uint64_t v77 = a1 + v74 + 40;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v77 = a1;
LABEL_80:
                    long long v78 = v140;
                    long long v79 = v141;
                    *(void *)(v77 + 32) = v142;
                    *(_OWORD *)uint64_t v77 = v78;
                    *(_OWORD *)(v77 + 16) = v79;
                  }
                  long long v66 = (long long *)(v70 + 40);
                  v69 += 40;
                }
                while (v70 + 40 != a2);
              }
            }
            else if (!v68)
            {
              unint64_t v123 = a1 - 40;
              do
              {
                BOOL v124 = (long long *)a1;
                a1 = (unint64_t)v66;
                if ((*a3)(v66, v124))
                {
                  long long v125 = *(_OWORD *)a1;
                  long long v126 = *(_OWORD *)(a1 + 16);
                  uint64_t v142 = *(void *)(a1 + 32);
                  long long v140 = v125;
                  long long v141 = v126;
                  unint64_t v127 = v123;
                  do
                  {
                    long long v128 = *(_OWORD *)(v127 + 56);
                    *(_OWORD *)(v127 + 8sub_216195244(&a9, 0) = *(_OWORD *)(v127 + 40);
                    *(_OWORD *)(v127 + 96) = v128;
                    *(void *)(v127 + 112) = *(void *)(v127 + 72);
                    char v129 = (*a3)(&v140, (long long *)v127);
                    v127 -= 40;
                  }
                  while ((v129 & 1) != 0);
                  long long v130 = v140;
                  long long v131 = v141;
                  *(void *)(v127 + 112) = v142;
                  *(_OWORD *)(v127 + 8sub_216195244(&a9, 0) = v130;
                  *(_OWORD *)(v127 + 96) = v131;
                }
                long long v66 = (long long *)(a1 + 40);
                v123 += 40;
              }
              while (a1 + 40 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              int64_t v80 = (unint64_t)(v14 - 2) >> 1;
              unint64_t v134 = a2;
              int64_t v136 = v80;
              do
              {
                int64_t v81 = v80;
                if (v136 >= v80)
                {
                  uint64_t v82 = (2 * v80) | 1;
                  unint64_t v83 = a1 + 40 * v82;
                  if (2 * v80 + 2 < v14 && (*a3)((long long *)(a1 + 40 * v82), (long long *)(v83 + 40)))
                  {
                    v83 += 40;
                    uint64_t v82 = 2 * v81 + 2;
                  }
                  unint64_t v84 = a1 + 40 * v81;
                  if (((*a3)((long long *)v83, (long long *)v84) & 1) == 0)
                  {
                    long long v85 = *(_OWORD *)v84;
                    long long v86 = *(_OWORD *)(v84 + 16);
                    uint64_t v142 = *(void *)(v84 + 32);
                    long long v140 = v85;
                    long long v141 = v86;
                    do
                    {
                      unint64_t v87 = v83;
                      long long v88 = *(_OWORD *)v83;
                      long long v89 = *(_OWORD *)(v83 + 16);
                      *(void *)(v84 + 32) = *(void *)(v83 + 32);
                      *(_OWORD *)unint64_t v84 = v88;
                      *(_OWORD *)(v84 + 16) = v89;
                      if (v136 < v82) {
                        break;
                      }
                      uint64_t v90 = (2 * v82) | 1;
                      unint64_t v83 = a1 + 40 * v90;
                      uint64_t v91 = 2 * v82 + 2;
                      if (v91 < v14 && (*a3)((long long *)(a1 + 40 * v90), (long long *)(v83 + 40)))
                      {
                        v83 += 40;
                        uint64_t v90 = v91;
                      }
                      unint64_t v84 = v87;
                      uint64_t v82 = v90;
                    }
                    while (!(*a3)((long long *)v83, &v140));
                    long long v92 = v140;
                    long long v93 = v141;
                    *(void *)(v87 + 32) = v142;
                    *(_OWORD *)unint64_t v87 = v92;
                    *(_OWORD *)(v87 + 16) = v93;
                    a2 = v134;
                  }
                }
                int64_t v80 = v81 - 1;
              }
              while (v81);
              int64_t v94 = v13 / 0x28uLL;
              do
              {
                uint64_t v95 = 0;
                long long v96 = *(_OWORD *)a1;
                long long v97 = *(_OWORD *)(a1 + 16);
                uint64_t v139 = *(void *)(a1 + 32);
                long long v137 = v96;
                long long v138 = v97;
                unint64_t v98 = a1;
                do
                {
                  uint64_t v99 = v98 + 40 * v95 + 40;
                  uint64_t v100 = (2 * v95) | 1;
                  uint64_t v101 = 2 * v95 + 2;
                  if (v101 < v94
                    && (*a3)((long long *)(v98 + 40 * v95 + 40), (long long *)(v98 + 40 * v95 + 80)))
                  {
                    v99 += 40;
                    uint64_t v100 = v101;
                  }
                  long long v102 = *(_OWORD *)v99;
                  long long v103 = *(_OWORD *)(v99 + 16);
                  *(void *)(v98 + 32) = *(void *)(v99 + 32);
                  *(_OWORD *)unint64_t v98 = v102;
                  *(_OWORD *)(v98 + 16) = v103;
                  unint64_t v98 = v99;
                  uint64_t v95 = v100;
                }
                while (v100 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
                uint64_t v104 = (long long *)(a2 - 40);
                if (v99 == a2 - 40)
                {
                  unint64_t v109 = a2 - 40;
                  long long v120 = v137;
                  long long v121 = v138;
                  *(void *)(v99 + 32) = v139;
                  *(_OWORD *)uint64_t v99 = v120;
                  *(_OWORD *)(v99 + 16) = v121;
                }
                else
                {
                  long long v105 = *v104;
                  long long v106 = *(_OWORD *)(a2 - 24);
                  *(void *)(v99 + 32) = *(void *)(a2 - 8);
                  *(_OWORD *)uint64_t v99 = v105;
                  *(_OWORD *)(v99 + 16) = v106;
                  long long v107 = v137;
                  long long v108 = v138;
                  *(void *)(a2 - ++**(_DWORD **)(result + 8) = v139;
                  *uint64_t v104 = v107;
                  *(_OWORD *)(a2 - 24) = v108;
                  unint64_t v109 = a2 - 40;
                  uint64_t v110 = v99 - a1 + 40;
                  if (v110 >= 41)
                  {
                    unint64_t v111 = (v110 / 0x28uLL - 2) >> 1;
                    unint64_t v112 = a1 + 40 * v111;
                    if ((*a3)((long long *)v112, (long long *)v99))
                    {
                      long long v113 = *(_OWORD *)v99;
                      long long v114 = *(_OWORD *)(v99 + 16);
                      uint64_t v142 = *(void *)(v99 + 32);
                      long long v140 = v113;
                      long long v141 = v114;
                      do
                      {
                        uint64_t v115 = v112;
                        long long v116 = *(_OWORD *)v112;
                        long long v117 = *(_OWORD *)(v112 + 16);
                        *(void *)(v99 + 32) = *(void *)(v112 + 32);
                        *(_OWORD *)uint64_t v99 = v116;
                        *(_OWORD *)(v99 + 16) = v117;
                        if (!v111) {
                          break;
                        }
                        unint64_t v111 = (v111 - 1) >> 1;
                        unint64_t v112 = a1 + 40 * v111;
                        uint64_t v99 = v115;
                      }
                      while (((*a3)((long long *)v112, &v140) & 1) != 0);
                      long long v118 = v140;
                      long long v119 = v141;
                      *(void *)(v115 + 32) = v142;
                      *(_OWORD *)uint64_t v115 = v118;
                      *(_OWORD *)(v115 + 16) = v119;
                    }
                  }
                }
                BOOL v122 = v94-- <= 2;
                a2 = v109;
              }
              while (!v122);
            }
            return;
          }
          unint64_t v15 = a2;
          unint64_t v16 = (unint64_t)v14 >> 1;
          unint64_t v17 = a1 + 40 * ((unint64_t)v14 >> 1);
          if ((unint64_t)v13 < 0x1401)
          {
            sub_2161BBAF8((long long *)v17, (long long *)a1, (long long *)v135, a3);
          }
          else
          {
            sub_2161BBAF8((long long *)a1, (long long *)v17, (long long *)v135, a3);
            uint64_t v18 = 5 * v16;
            sub_2161BBAF8((long long *)(a1 + 40), (long long *)(a1 + 8 * v18 - 40), v133, a3);
            sub_2161BBAF8((long long *)(a1 + 80), (long long *)(a1 + 40 + 8 * v18), v132, a3);
            sub_2161BBAF8((long long *)(a1 + 8 * v18 - 40), (long long *)v17, (long long *)(a1 + 40 + 8 * v18), a3);
            long long v19 = *(_OWORD *)a1;
            long long v20 = *(_OWORD *)(a1 + 16);
            uint64_t v142 = *(void *)(a1 + 32);
            long long v140 = v19;
            long long v141 = v20;
            long long v21 = *(_OWORD *)v17;
            long long v22 = *(_OWORD *)(v17 + 16);
            *(void *)(a1 + 32) = *(void *)(v17 + 32);
            *(_OWORD *)a1 = v21;
            *(_OWORD *)(a1 + 16) = v22;
            long long v23 = v140;
            long long v24 = v141;
            *(void *)(v17 + 32) = v142;
            *(_OWORD *)unint64_t v17 = v23;
            *(_OWORD *)(v17 + 16) = v24;
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)((long long *)(a1 - 40), (long long *)a1)) {
            break;
          }
          long long v44 = *(_OWORD *)a1;
          long long v45 = *(_OWORD *)(a1 + 16);
          uint64_t v139 = *(void *)(a1 + 32);
          long long v137 = v44;
          long long v138 = v45;
          if ((*a3)(&v137, (long long *)v135))
          {
            unint64_t v12 = a1;
            a2 = v15;
            do
              v12 += 40;
            while (((*a3)(&v137, (long long *)v12) & 1) == 0);
          }
          else
          {
            int v46 = (long long *)(a1 + 40);
            a2 = v15;
            do
            {
              unint64_t v12 = (unint64_t)v46;
              if ((unint64_t)v46 >= v15) {
                break;
              }
              int v47 = (*a3)(&v137, v46);
              int v46 = (long long *)(v12 + 40);
            }
            while (!v47);
          }
          unint64_t v48 = a2;
          if (v12 < a2)
          {
            unint64_t v48 = a2;
            do
              v48 -= 40;
            while (((*a3)(&v137, (long long *)v48) & 1) != 0);
          }
          while (v12 < v48)
          {
            long long v49 = *(_OWORD *)v12;
            long long v50 = *(_OWORD *)(v12 + 16);
            uint64_t v142 = *(void *)(v12 + 32);
            long long v140 = v49;
            long long v141 = v50;
            long long v51 = *(_OWORD *)v48;
            long long v52 = *(_OWORD *)(v48 + 16);
            *(void *)(v12 + 32) = *(void *)(v48 + 32);
            *(_OWORD *)unint64_t v12 = v51;
            *(_OWORD *)(v12 + 16) = v52;
            long long v53 = v140;
            long long v54 = v141;
            *(void *)(v48 + 32) = v142;
            *(_OWORD *)unint64_t v48 = v53;
            *(_OWORD *)(v48 + 16) = v54;
            do
              v12 += 40;
            while (!(*a3)(&v137, (long long *)v12));
            do
              v48 -= 40;
            while (((*a3)(&v137, (long long *)v48) & 1) != 0);
          }
          std::string v55 = (long long *)(v12 - 40);
          BOOL v5 = v12 - 40 >= a1;
          BOOL v6 = v12 - 40 == a1;
          if (v12 - 40 != a1)
          {
            long long v56 = *v55;
            long long v57 = *(_OWORD *)(v12 - 24);
            *(void *)(a1 + 32) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v56;
            *(_OWORD *)(a1 + 16) = v57;
          }
          a5 = 0;
          long long v58 = v137;
          long long v59 = v138;
          *(void *)(v12 - ++**(_DWORD **)(result + 8) = v139;
          *std::string v55 = v58;
          *(_OWORD *)(v12 - 24) = v59;
        }
        uint64_t v25 = 0;
        long long v26 = *(_OWORD *)a1;
        long long v27 = *(_OWORD *)(a1 + 16);
        uint64_t v139 = *(void *)(a1 + 32);
        long long v137 = v26;
        long long v138 = v27;
        do
          v25 += 40;
        while (((*a3)((long long *)(v25 + a1), &v137) & 1) != 0);
        unint64_t v28 = a1 + v25;
        uint64_t v29 = (long long *)v15;
        BOOL v6 = v25 == 40;
        a2 = v15;
        if (v6)
        {
          uint64_t v29 = (long long *)v15;
          do
          {
            if (v28 >= (unint64_t)v29) {
              break;
            }
            uint64_t v29 = (long long *)((char *)v29 - 40);
          }
          while (((*a3)(v29, &v137) & 1) == 0);
        }
        else
        {
          do
            uint64_t v29 = (long long *)((char *)v29 - 40);
          while (!(*a3)(v29, &v137));
        }
        if (v28 >= (unint64_t)v29)
        {
          uint64_t v38 = v28 - 40;
        }
        else
        {
          unint64_t v30 = v28;
          uint64_t v31 = v29;
          do
          {
            long long v32 = *(_OWORD *)v30;
            long long v33 = *(_OWORD *)(v30 + 16);
            uint64_t v142 = *(void *)(v30 + 32);
            long long v140 = v32;
            long long v141 = v33;
            long long v34 = *v31;
            long long v35 = v31[1];
            *(void *)(v30 + 32) = *((void *)v31 + 4);
            *(_OWORD *)unint64_t v30 = v34;
            *(_OWORD *)(v30 + 16) = v35;
            long long v36 = v140;
            long long v37 = v141;
            *((void *)v31 + 4) = v142;
            *uint64_t v31 = v36;
            v31[1] = v37;
            do
              v30 += 40;
            while (((*a3)((long long *)v30, &v137) & 1) != 0);
            do
              uint64_t v31 = (long long *)((char *)v31 - 40);
            while (!(*a3)(v31, &v137));
          }
          while (v30 < (unint64_t)v31);
          uint64_t v38 = v30 - 40;
        }
        if (v38 != a1)
        {
          long long v39 = *(_OWORD *)v38;
          long long v40 = *(_OWORD *)(v38 + 16);
          *(void *)(a1 + 32) = *(void *)(v38 + 32);
          *(_OWORD *)a1 = v39;
          *(_OWORD *)(a1 + 16) = v40;
        }
        long long v41 = v137;
        long long v42 = v138;
        *(void *)(v38 + 32) = v139;
        *(_OWORD *)uint64_t v38 = v41;
        *(_OWORD *)(v38 + 16) = v42;
        if (v28 >= (unint64_t)v29) {
          break;
        }
LABEL_32:
        sub_2161BB160(a1, v38, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v38 + 40;
      }
      BOOL v43 = sub_2161BBC34(a1, v38, a3);
      unint64_t v12 = v38 + 40;
      if (sub_2161BBC34(v38 + 40, v15, a3)) {
        break;
      }
      if (!v43) {
        goto LABEL_32;
      }
    }
    a2 = v38;
    if (!v43) {
      continue;
    }
    break;
  }
}

uint64_t sub_2161BBAF8(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v10 = *a1;
      long long v11 = a1[1];
      uint64_t v12 = *((void *)a1 + 4);
      uint64_t v13 = *((void *)a3 + 4);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((void *)a1 + 4) = v13;
    }
    else
    {
      long long v25 = *a1;
      long long v26 = a1[1];
      uint64_t v27 = *((void *)a1 + 4);
      uint64_t v28 = *((void *)a2 + 4);
      long long v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((void *)a1 + 4) = v28;
      *((void *)a2 + 4) = v27;
      *a2 = v25;
      a2[1] = v26;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      long long v10 = *a2;
      long long v11 = a2[1];
      uint64_t v12 = *((void *)a2 + 4);
      uint64_t v30 = *((void *)a3 + 4);
      long long v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((void *)a2 + 4) = v30;
    }
    *((void *)a3 + 4) = v12;
    *a3 = v10;
    a3[1] = v11;
  }
  else if (result)
  {
    long long v15 = *a2;
    long long v16 = a2[1];
    uint64_t v17 = *((void *)a2 + 4);
    uint64_t v18 = *((void *)a3 + 4);
    long long v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((void *)a2 + 4) = v18;
    *((void *)a3 + 4) = v17;
    *a3 = v15;
    a3[1] = v16;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      long long v20 = *a1;
      long long v21 = a1[1];
      uint64_t v22 = *((void *)a1 + 4);
      uint64_t v23 = *((void *)a2 + 4);
      long long v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((void *)a1 + 4) = v23;
      *((void *)a2 + 4) = v22;
      *a2 = v20;
      a2[1] = v21;
    }
  }
  return result;
}

BOOL sub_2161BBC34(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v8 = (long long *)(a2 - 40);
      if (!(*a3)((long long *)(a2 - 40), (long long *)a1)) {
        return 1;
      }
      long long v9 = *(_OWORD *)a1;
      long long v10 = *(_OWORD *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a2 - 8);
      long long v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(void *)(a1 + 32) = v12;
      *(void *)(a2 - ++**(_DWORD **)(result + 8) = v11;
      BOOL result = 1;
      *char v8 = v9;
      *(_OWORD *)(a2 - 24) = v10;
      return result;
    case 3uLL:
      sub_2161BBAF8((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_2161BBE4C(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_2161BBF38(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      long long v14 = (long long *)(a1 + 80);
      sub_2161BBAF8((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), a3);
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v24 = *(_OWORD *)v15;
      long long v25 = v18;
      uint64_t v26 = *(void *)(v15 + 32);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 12sub_216195244(&a9, 0) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(void *)(v20 + 152) = *(void *)(a1 + v19 + 112);
        if (v19 == -80) {
          break;
        }
        v19 -= 40;
        if (((*a3)(&v24, (long long *)(v20 + 40)) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      long long v23 = v25;
      *(_OWORD *)uint64_t v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(void *)(v22 + 32) = v26;
      if (++v17 == 8) {
        return v15 + 40 == a2;
      }
    }
    long long v14 = (long long *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 sub_2161BBE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  sub_2161BBAF8((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    long long v11 = *(_OWORD *)a3;
    long long v12 = *(_OWORD *)(a3 + 16);
    uint64_t v13 = *(void *)(a3 + 32);
    uint64_t v14 = *(void *)(a4 + 32);
    long long v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(void *)(a3 + 32) = v14;
    *(void *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v12;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      long long v16 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)(a2 + 16);
      uint64_t v18 = *(void *)(a2 + 32);
      uint64_t v19 = *(void *)(a3 + 32);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(void *)(a2 + 32) = v19;
      *(void *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 16) = v17;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        __n128 result = *(__n128 *)a1;
        long long v21 = *(_OWORD *)(a1 + 16);
        uint64_t v22 = *(void *)(a1 + 32);
        uint64_t v23 = *(void *)(a2 + 32);
        long long v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(void *)(a1 + 32) = v23;
        *(void *)(a2 + 32) = v22;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 sub_2161BBF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_2161BBE4C(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    long long v14 = *(_OWORD *)a4;
    long long v15 = *(_OWORD *)(a4 + 16);
    uint64_t v16 = *(void *)(a4 + 32);
    uint64_t v17 = *(void *)(a5 + 32);
    long long v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(void *)(a4 + 32) = v17;
    *(void *)(a5 + 32) = v16;
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v15;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      long long v19 = *(_OWORD *)a3;
      long long v20 = *(_OWORD *)(a3 + 16);
      uint64_t v21 = *(void *)(a3 + 32);
      uint64_t v22 = *(void *)(a4 + 32);
      long long v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(void *)(a3 + 32) = v22;
      *(void *)(a4 + 32) = v21;
      *(_OWORD *)a4 = v19;
      *(_OWORD *)(a4 + 16) = v20;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        __n128 v24 = *(__n128 *)a2;
        long long v25 = *(_OWORD *)(a2 + 16);
        uint64_t v26 = *(void *)(a2 + 32);
        uint64_t v27 = *(void *)(a3 + 32);
        long long v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(void *)(a2 + 32) = v27;
        *(void *)(a3 + 32) = v26;
        *(__n128 *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v25;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          __n128 result = *(__n128 *)a1;
          long long v29 = *(_OWORD *)(a1 + 16);
          uint64_t v30 = *(void *)(a1 + 32);
          uint64_t v31 = *(void *)(a2 + 32);
          long long v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(void *)(a1 + 32) = v31;
          *(void *)(a2 + 32) = v30;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

void *sub_2161BC064(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112970(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2161BC0C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161BC0DC(void *a1)
{
  *a1 = &unk_26C6C4C48;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166CA800);
}

void *sub_2161BC168(void *a1)
{
  *a1 = &unk_26C6C4D68;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166CA800](v2, 0x1000C4077774924);
  }
  return a1;
}

void sub_2161BC1C4(void *a1)
{
  *a1 = &unk_26C6C4D68;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166CA800](v1, 0x1000C4077774924);
  }

  JUMPOUT(0x2166CA800);
}

BOOL sub_2161BC240(uint64_t a1, unint64_t a2)
{
  v5[0] = a1;
  v5[1] = a2;
  BOOL v2 = a2 >= 3;
  unint64_t v3 = a2 - 3;
  return v2 && sub_2161BC800(v5, v3, 0xFFFFFFFFFFFFFFFFLL, "▁", 3uLL) == 0;
}

void sub_2161BC294(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D3F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D3F8))
  {
    sub_2161BC760();
  }
  qword_26797D4B8 = 0;
  if (!qword_26797D430) {
    goto LABEL_24;
  }
  uint64_t v6 = &a1[a2];
  sub_2161BC978((void *)a3, 2 * a2, 0);
  if (a2)
  {
    if (*(char *)(a3 + 23) >= 0) {
      unint64_t v7 = 10;
    }
    else {
      unint64_t v7 = (*(void *)(a3 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    sub_216185170(a3, v7, 0);
    v43[4] = xmmword_26797D478;
    v43[5] = unk_26797D488;
    v43[6] = xmmword_26797D498;
    v43[7] = unk_26797D4A8;
    v43[0] = xmmword_26797D438;
    v43[1] = unk_26797D448;
    uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
    if ((v8 & 0x80u) == 0) {
      long long v9 = (unsigned char *)a3;
    }
    else {
      long long v9 = *(unsigned char **)a3;
    }
    __n128 v10 = (__n128)xmmword_26797D458;
    __n128 v11 = (__n128)unk_26797D468;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a3 + 8);
    }
    __n128 v12 = &v9[2 * v8];
    v43[2] = xmmword_26797D458;
    CFIndex v43[3] = unk_26797D468;
    while (1)
    {
      int v13 = (*(uint64_t (**)(uint64_t, _OWORD *, char *, char *, char **, unsigned char *, char *, uint64_t *, __n128, __n128))(*(void *)qword_26797D430 + 32))(qword_26797D430, v43, a1, v6, &v39, v9, v12, &v38, v10, v11);
      qword_26797D4B8 += v39 - a1;
      if (v39 == a1) {
        goto LABEL_37;
      }
      if (v13 != 1) {
        break;
      }
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v14 = a3;
      }
      else {
        uint64_t v14 = *(void *)a3;
      }
      uint64_t v15 = v38 - v14;
      sub_216185170(a3, v38 - v14, 0);
      uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
      char v17 = v16;
      uint64_t v18 = *(void *)a3;
      if ((v16 & 0x80u) == 0) {
        uint64_t v18 = a3;
      }
      long long v9 = (unsigned char *)(v18 + v15);
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = *(void *)(a3 + 8);
      }
      __n128 v12 = (char *)(v18 + 2 * v16);
      a1 = v39;
      if (v39 >= v6)
      {
        if ((v17 & 0x80) == 0) {
          goto LABEL_24;
        }
LABEL_38:
        operator delete(*(void **)a3);
LABEL_24:
        if ((byte_26797D42F & 0x80000000) == 0)
        {
          if (byte_26797D42F)
          {
            *(_OWORD *)a3 = xmmword_26797D418;
            *(void *)(a3 + 16) = unk_26797D428;
            return;
          }
LABEL_77:
          sub_2161BC91C("wstring_convert: from_bytes error");
        }
        if (!*((void *)&xmmword_26797D418 + 1)) {
          goto LABEL_77;
        }
        sub_2161984AC((unsigned char *)a3, (void *)xmmword_26797D418, *((unint64_t *)&xmmword_26797D418 + 1));
        return;
      }
    }
    if (v13)
    {
      if (v13 != 3)
      {
LABEL_37:
        if ((*(unsigned char *)(a3 + 23) & 0x80) != 0) {
          goto LABEL_38;
        }
        goto LABEL_24;
      }
      if (*(char *)(a3 + 23) >= 0) {
        long long v19 = (unsigned char *)a3;
      }
      else {
        long long v19 = *(unsigned char **)a3;
      }
      sub_216185170(a3, (v9 - v19) >> 1, 0);
      LODWORD(v2sub_216195244(&a9, 0) = *(char *)(a3 + 23);
      if ((v20 & 0x80000000) != 0)
      {
        uint64_t v22 = v6 - a1;
        if (v6 == a1) {
          return;
        }
        uint64_t v21 = *(void *)(a3 + 8);
        unint64_t v26 = *(void *)(a3 + 16);
        unint64_t v23 = (v26 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        unint64_t v24 = *(void *)a3;
        unint64_t v20 = HIBYTE(v26);
      }
      else
      {
        if (a1 == v6) {
          return;
        }
        uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
        uint64_t v22 = v6 - a1;
        unint64_t v23 = 10;
        unint64_t v24 = a3;
      }
      unint64_t v27 = v22 >> 1;
      if (v24 > (unint64_t)a1 || v24 + 2 * v21 + 2 <= (unint64_t)a1)
      {
        if (v23 - v21 < v27)
        {
          sub_21618504C(a3, v23, v21 - v23 + v27, v21, v21, 0, 0);
          *(void *)(a3 + ++**(_DWORD **)(result + 8) = v21;
          LOBYTE(v2sub_216195244(&a9, 0) = *(unsigned char *)(a3 + 23);
        }
        if ((v20 & 0x80u) == 0) {
          long long v29 = (char *)a3;
        }
        else {
          long long v29 = *(char **)a3;
        }
        uint64_t v30 = &v29[2 * v21];
        while (a1 != v6)
        {
          __int16 v31 = *(_WORD *)a1;
          a1 += 2;
          *(_WORD *)uint64_t v30 = v31;
          v30 += 2;
        }
        *(_WORD *)uint64_t v30 = 0;
        unint64_t v32 = v27 + v21;
        if (*(char *)(a3 + 23) < 0) {
          *(void *)(a3 + ++**(_DWORD **)(result + 8) = v32;
        }
        else {
          *(unsigned char *)(a3 + 23) = v32 & 0x7F;
        }
      }
      else
      {
        if (v22 < 0) {
          sub_21617FB50();
        }
        if ((unint64_t)v22 > 0x15)
        {
          uint64_t v33 = (v27 & 0xFFFFFFFFFFFFFFFCLL) + 4;
          if ((v27 | 3) != 0xB) {
            uint64_t v33 = v27 | 3;
          }
          p_p = sub_21610FD44((uint64_t)&__p, v33 + 1);
          unint64_t v41 = v27;
          int64_t v42 = v34 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v42) = (unint64_t)v22 >> 1;
          p_p = &__p;
        }
        while (a1 != v6)
        {
          __int16 v35 = *(_WORD *)a1;
          a1 += 2;
          *p_p++ = v35;
        }
        _WORD *p_p = 0;
        if (v42 >= 0) {
          long long v36 = &__p;
        }
        else {
          long long v36 = __p;
        }
        if (v42 >= 0) {
          unint64_t v37 = HIBYTE(v42);
        }
        else {
          unint64_t v37 = v41;
        }
        sub_216198220(a3, v36, v37);
        if (SHIBYTE(v42) < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v25 = a3;
      }
      else {
        uint64_t v25 = *(void *)a3;
      }
      sub_216185170(a3, (v38 - v25) >> 1, 0);
    }
  }
}

void sub_2161BC704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_2161BC760()
{
}

uint64_t sub_2161BC800(void *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5 = a1[1];
  BOOL v6 = v5 >= a2;
  size_t v7 = v5 - a2;
  if (!v6) {
    sub_21613F340("string_view::substr");
  }
  long long v9 = (const void *)(*a1 + a2);
  if (v7 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v7;
  }
  if (a5 >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = a5;
  }
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v10 == a5) {
    unsigned int v13 = 0;
  }
  if (result) {
    return result;
  }
  else {
    return v13;
  }
}

void sub_2161BC874()
{
  MEMORY[0x2166CA6F0]();

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161BC8AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2161BC91C(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  sub_2161BCA1C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264266898, MEMORY[0x263F8C050]);
}

void sub_2161BC964(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2161BC978(void *a1, unint64_t a2, __int16 a3)
{
  unint64_t v3 = a1;
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21617FB50();
  }
  if (a2 >= 0xB)
  {
    uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a2 | 3) != 0xB) {
      uint64_t v6 = a2 | 3;
    }
    a1 = sub_21610FD44((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    void *v3 = a1;
  }
  else
  {
    *((unsigned char *)a1 + 23) = a2;
    if (!a2) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = 0;
  do
    *((_WORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_WORD *)a1 + a2) = 0;
  return v3;
}

std::runtime_error *sub_2161BCA1C(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
  return result;
}

uint64_t sub_2161BCA50(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BA018, 0);
  if (result)
  {
    uint64_t v6 = (void *)result;
    if (((*(uint64_t (**)(uint64_t))(*(void *)result + 416))(result) & 0x80000000) != 0
      && (*(unsigned int (**)(void *))(*v6 + 96))(v6) != 90)
    {
      if (v6[1] == *(_DWORD *)(a1 + 8))
      {
        uint64_t v7 = (unsigned __int16 *)(*(uint64_t (**)(void *))(*v6 + 544))(v6);
        if (v7) {
          BOOL v9 = v8 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        if (v9
          || ((int v10 = *v7, v11 = v10 - 48, v12 = (unsigned __int16)(v10 + 240), v11 >= 0xA) ? (v13 = v12 > 9) : (v13 = 0),
              v13))
        {
LABEL_25:
          uint64_t v15 = (const void **)MEMORY[0x263EFFB40];
        }
        else
        {
          unint64_t v14 = 0;
          uint64_t v15 = (const void **)MEMORY[0x263EFFB38];
          while (v8 - 1 != v14)
          {
            int v16 = v7[v14 + 1];
            unsigned int v17 = v16 - 48;
            ++v14;
            unsigned int v18 = (unsigned __int16)(v16 + 240);
            if (v17 >= 0xA && v18 >= 0xA)
            {
              if (v14 >= v8) {
                goto LABEL_26;
              }
              goto LABEL_25;
            }
          }
        }
      }
      else
      {
LABEL_26:
        uint64_t v15 = (const void **)MEMORY[0x263EFFB38];
      }
      CFDictionaryAddValue(a2, @"symbolCandidateInTenKeyNumberMultiTap", *v15);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_2161BCC24()
{
}

uint64_t sub_2161BCC38(uint64_t a1, char a2, int a3, int a4, uint64_t a5)
{
  *(unsigned char *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + ++**(_DWORD **)(result + 8) = a4;
  *(void *)(a1 + 16) = a5;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 2++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v7 = (const void **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4sub_216195244(&a9, 0) = dispatch_queue_create("com.apple.inMemoryImmutableDictionaryDispatcher.modify", 0);
  *(void *)(a1 + 32) = dispatch_queue_create("com.apple.inMemoryImmutableDictionaryDispatcher.build", 0);
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = dispatch_group_create();
  switch(a4)
  {
    case 2:
      operator new();
    case 1:
      operator new();
    case 0:
      operator new();
  }
  unsigned int v8 = sub_2161E2834(*(_DWORD *)(a1 + 4));
  CFLocaleRef v9 = sub_2161E29D0(v8);
  if (v9)
  {
    v12.CFIndex location = 0;
    v12.length = 0;
    CFStringTokenizerRef v10 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v12, 0x210004uLL, v9);
    sub_2161BD164(v7, v10);
    CFRelease(v9);
  }
  return a1;
}

void sub_2161BD0BC(_Unwind_Exception *a1)
{
  sub_2161BD164(v2, 0);
  uint64_t v5 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  uint64_t *v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  _Unwind_Resume(a1);
}

void sub_2161BD164(const void **a1, const void *a2)
{
  unint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_2161BD19C(uint64_t a1)
{
  atomic_store(1u, (unsigned __int8 *)(a1 + 24));
  if (*(unsigned char *)a1) {
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  sub_2161BD164((const void **)(a1 + 72), 0);
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_2161BD264(uint64_t a1)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2161BD2FC;
  block[3] = &unk_264266C70;
  block[4] = a1;
  if (*(unsigned char *)a1)
  {
    dispatch_sync(*(dispatch_queue_t *)(a1 + 40), block);
  }
  else
  {
    sub_2163514A4(*(void *)(a1 + 56));
    sub_2163514A4(*(void *)(a1 + 64));
  }
}

void sub_2161BD2FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_2163514A4(*(void *)(v1 + 56));
  uint64_t v2 = *(void *)(v1 + 64);

  sub_2163514A4(v2);
}

void sub_2161BD338(uint64_t a1, const void *a2)
{
  unint64_t v4 = (atomic_uint *)(a1 + 28);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 28), 1u);
  sub_2161BD264(a1);
  if (a2 && CFArrayGetCount((CFArrayRef)a2))
  {
    if (*(unsigned char *)a1)
    {
      CFRetain(a2);
      uint64_t v5 = *(NSObject **)(a1 + 48);
      uint64_t v6 = *(NSObject **)(a1 + 32);
      v7[0] = MEMORY[0x263EF8330];
      v7[1] = 0x40000000;
      void v7[2] = sub_2161BD42C;
      v7[3] = &unk_264269940;
      void v7[4] = a1;
      void v7[5] = a2;
      dispatch_group_async(v5, v6, v7);
    }
    else
    {
      sub_2161BD46C(a1, (const __CFArray *)a2);
    }
  }
  else
  {
    atomic_fetch_add(v4, 0xFFFFFFFF);
  }
}

void sub_2161BD42C(uint64_t a1)
{
  sub_2161BD46C(*(void *)(a1 + 32), *(const __CFArray **)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

void sub_2161BD46C(uint64_t a1, const __CFArray *a2)
{
  if (*(void *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 8) == 2) {
      sub_2161BD5D8(a1, a2);
    }
    else {
      sub_2161BD8F0(a1, a2);
    }
  }
}

CFIndex sub_2161BD498(uint64_t a1, const __CFString *a2, CFStringRef theString)
{
  if ((const __CFString *)*MEMORY[0x263EFFD08] == a2 || *MEMORY[0x263EFFD08] == (void)theString) {
    return 0;
  }
  CFIndex result = CFStringGetLength(theString);
  if (result)
  {
    if (a2)
    {
      int v8 = *(_DWORD *)(a1 + 4);
      CFIndex result = CFStringGetLength(a2);
      if (!result) {
        return result;
      }
      if (v8 == 5)
      {
        CFIndex v9 = result;
        if (result >= 1)
        {
          BOOL v10 = 0;
          for (i = 0; i != v9; BOOL v10 = i >= v9)
          {
            int CharacterAtIndex = CFStringGetCharacterAtIndex(a2, i);
            if ((CharacterAtIndex - 12549) >= 0x25)
            {
              uint64_t v13 = 0;
              while ((unsigned __int16)word_216381F32[v13] != CharacterAtIndex)
              {
                if (++v13 == 5) {
                  goto LABEL_20;
                }
              }
              if (v13 == -1) {
                break;
              }
            }
            ++i;
          }
LABEL_20:
          if (!v10) {
            return 0;
          }
        }
      }
      else
      {
        v15[0] = v8;
        v15[1] = 0;
        BOOL v14 = sub_216333B8C((uint64_t)v15, a2);
        CFIndex result = 0;
        if (!v14) {
          return result;
        }
      }
      if (sub_2161E2ED0(theString) != 1 || *(_DWORD *)(a1 + 8)) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_2161BD5D8(uint64_t a1, const __CFArray *a2)
{
  unint64_t v4 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFIndex v5 = 0;
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, v4);
  value = (void *)*MEMORY[0x263EFFD08];
  CFArrayRef v19 = a2;
  while (1)
  {
    CFIndex Count = CFArrayGetCount(a2);
    int v7 = atomic_load((unsigned int *)(a1 + 28));
    if (v5 >= Count) {
      break;
    }
    if (v7 > 0) {
      goto LABEL_32;
    }
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 24));
    if (v8) {
      goto LABEL_32;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v5);
    CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconSurfaceKey[0]);
    CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconReadingKey[0]);
    if (sub_2161BD498(a1, v11, v10))
    {
      CFArrayRef v12 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
      if (sub_2161BDAFC(a1, v10, v11, v12)) {
        CFStringRef v13 = sub_2161BDC98(a1, v12, *(_DWORD *)(a1 + 4) == 5);
      }
      else {
        CFStringRef v13 = 0;
      }
      if (v13) {
        BOOL v14 = theArray;
      }
      else {
        BOOL v14 = Mutable;
      }
      CFArrayAppendValue(v14, v10);
      if (v13) {
        CFArrayAppendValue(theArray, v13);
      }
      else {
        CFArrayAppendValue(Mutable, v11);
      }
      uint64_t v15 = CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconItemPrefixKey[0]);
      a2 = v19;
      if (v15) {
        CFArrayAppendValue(v14, v15);
      }
      else {
        CFArrayAppendValue(v14, value);
      }
      int v16 = CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconIdentifiersKey[0]);
      if (v16) {
        CFArrayAppendValue(v14, v16);
      }
      else {
        CFArrayAppendValue(v14, value);
      }
      if (v13) {
        CFRelease(v13);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
    ++v5;
  }
  if (v7 <= 0)
  {
    unsigned __int8 v17 = atomic_load((unsigned __int8 *)(a1 + 24));
    if ((v17 & 1) == 0)
    {
      if (CFArrayGetCount(theArray)) {
        sub_216351678(*(void *)(a1 + 56), theArray);
      }
      if (CFArrayGetCount(Mutable)) {
        sub_216351678(*(void *)(a1 + 64), Mutable);
      }
    }
  }
LABEL_32:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void sub_2161BD874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, const void *);
  sub_2161BE0C8((const void **)va, 0);
  sub_2161BE0C8((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_2161BD8F0(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if ((Count & 1) == 0)
  {
    CFIndex v5 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
    int v7 = CFArrayCreateMutable(0, 0, v5);
    unsigned __int8 v8 = CFArrayCreateMutable(0, 0, v5);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i < Count; CFIndex i = v13 + 1)
      {
        int v10 = atomic_load((unsigned int *)(a1 + 28));
        if (v10 > 0) {
          break;
        }
        unsigned __int8 v11 = atomic_load((unsigned __int8 *)(a1 + 24));
        if (v11) {
          break;
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
        CFIndex v13 = i + 1;
        CFStringRef v14 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v13);
        if (sub_2161BD498(a1, v14, ValueAtIndex))
        {
          CFArrayRemoveAllValues(v8);
          if (sub_2161BDAFC(a1, ValueAtIndex, v14, v8)
            && (CFStringRef v15 = sub_2161BDC98(a1, v8, *(_DWORD *)(a1 + 4) == 5)) != 0)
          {
            CFStringRef v16 = v15;
            CFArrayAppendValue(Mutable, ValueAtIndex);
            CFArrayAppendValue(Mutable, v16);
            CFRelease(v16);
          }
          else
          {
            CFArrayAppendValue(v7, ValueAtIndex);
            CFArrayAppendValue(v7, v14);
          }
        }
      }
    }
    int v17 = atomic_load((unsigned int *)(a1 + 28));
    if (v17 <= 0)
    {
      unsigned __int8 v18 = atomic_load((unsigned __int8 *)(a1 + 24));
      if ((v18 & 1) == 0)
      {
        if (CFArrayGetCount(Mutable)) {
          sub_216351678(*(void *)(a1 + 56), Mutable);
        }
        if (CFArrayGetCount(v7)) {
          sub_216351678(*(void *)(a1 + 64), v7);
        }
      }
    }
    CFRelease(Mutable);
    CFRelease(v7);
    CFRelease(v8);
  }
}

BOOL sub_2161BDAFC(uint64_t a1, const __CFString *a2, CFStringRef theString, __CFArray *a4)
{
  CFIndex Length = CFStringGetLength(theString);
  if (Length < CFStringGetLength(a2)) {
    return 0;
  }
  CFIndex v9 = *(__CFStringTokenizer **)(a1 + 72);
  v22.length = CFStringGetLength(a2);
  v22.CFIndex location = 0;
  CFStringTokenizerSetString(v9, a2, v22);
  if (!CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 72))) {
    return 1;
  }
  CFIndex v10 = 0;
  theArray = a4;
  do
  {
    CFStringRef v11 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(*(CFStringTokenizerRef *)(a1 + 72), 0x10000uLL);
    CFArrayRef v12 = sub_2161E4E50(v11, *(_DWORD *)(a1 + 4) == 5);
    if (v11) {
      CFRelease(v11);
    }
    BOOL v13 = v12 != 0;
    if (!v12) {
      break;
    }
    CFIndex Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      CFIndex v15 = Count;
      CFIndex v16 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v16);
        CFIndex v18 = CFStringGetLength(ValueAtIndex);
        CFIndex v19 = v18 + v10;
        if (v18 + v10 > Length) {
          break;
        }
        v23.length = v18;
        v23.CFIndex location = v10;
        if (CFStringCompareWithOptions(theString, ValueAtIndex, v23, 1uLL)) {
          break;
        }
        ++v16;
        CFIndex v10 = v19;
        if (v15 == v16) {
          goto LABEL_14;
        }
      }
      CFRelease(v12);
      return 0;
    }
    CFIndex v19 = v10;
LABEL_14:
    v24.length = CFArrayGetCount(v12);
    v24.CFIndex location = 0;
    CFArrayAppendArray(theArray, v12, v24);
    CFRelease(v12);
    CFIndex v10 = v19;
  }
  while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 72)));
  return v13;
}

CFStringRef sub_2161BDC98(uint64_t a1, CFArrayRef theArray, char a3)
{
  std::string __p = 0;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 0;
  }
  for (CFIndex i = 0; i != Count; ++i)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    buffer = 0;
    __int16 v31 = 0;
    uint64_t v32 = 0;
    CFIndex Length = CFStringGetLength(ValueAtIndex);
    sub_216184BFC((uint64_t)&buffer, Length);
    v39.length = CFStringGetLength(ValueAtIndex);
    v39.CFIndex location = 0;
    CFStringGetCharacters(ValueAtIndex, v39, buffer);
    if ((sub_21634F8BC((uint64_t *)&buffer, &v33, a3) & 1) == 0)
    {
LABEL_18:
      LOBYTE(v11) = 0;
      goto LABEL_35;
    }
    CFIndex v10 = *(unsigned __int16 ****)(a1 + 16);
    CFStringRef v11 = **v10;
    CFArrayRef v12 = (char *)v33;
    if (v11) {
      BOOL v13 = v34 == v33;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      unint64_t v14 = 0;
      unint64_t v15 = v34 - (unsigned char *)v33;
      do
      {
        CFStringRef v11 = sub_21632279C((uint64_t)v10, v11, v12[v14++]);
        if (v11) {
          BOOL v16 = v14 >= v15;
        }
        else {
          BOOL v16 = 1;
        }
      }
      while (!v16);
    }
    if (v11)
    {
      int v17 = v11[1];
      if (v17 == 0xFFFF) {
        goto LABEL_18;
      }
      CFIndex v18 = (unsigned __int16 *)v37;
      if (v37 >= v38)
      {
        CFIndex v19 = (unsigned __int16 *)__p;
        uint64_t v20 = v37 - (unsigned char *)__p;
        if (v37 - (unsigned char *)__p <= -3) {
          sub_21610CB04();
        }
        uint64_t v21 = v20 >> 1;
        if (v38 - (unsigned char *)__p <= (unint64_t)((v20 >> 1) + 1)) {
          uint64_t v22 = v21 + 1;
        }
        else {
          uint64_t v22 = v38 - (unsigned char *)__p;
        }
        if ((unint64_t)(v38 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v23 = v22;
        }
        if (v23)
        {
          CFRange v24 = (char *)sub_21610FD44((uint64_t)&v38, v23);
          CFIndex v19 = (unsigned __int16 *)__p;
          CFIndex v18 = (unsigned __int16 *)v37;
          LOWORD(v17) = v11[1];
        }
        else
        {
          CFRange v24 = 0;
        }
        uint64_t v25 = (unsigned __int16 *)&v24[2 * v21];
        unsigned __int16 *v25 = v17;
        CFStringRef v11 = v25 + 1;
        while (v18 != v19)
        {
          unsigned __int16 v26 = *--v18;
          *--uint64_t v25 = v26;
        }
        std::string __p = v25;
        unint64_t v37 = (char *)v11;
        uint64_t v38 = &v24[2 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(_WORD *)unint64_t v37 = v17;
        CFStringRef v11 = v18 + 1;
      }
      unint64_t v37 = (char *)v11;
      LOBYTE(v11) = 1;
    }
LABEL_35:
    if (buffer)
    {
      __int16 v31 = buffer;
      operator delete(buffer);
    }
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
    if ((v11 & 1) == 0)
    {
      CFStringRef v28 = 0;
      goto LABEL_45;
    }
  }
  unint64_t v27 = (char *)__p;
  if (__p != v37)
  {
    CFStringRef v28 = CFStringCreateWithCharacters(0, (const UniChar *)__p, (v37 - (unsigned char *)__p) >> 1);
LABEL_45:
    unint64_t v27 = (char *)__p;
    if (!__p) {
      return v28;
    }
LABEL_46:
    unint64_t v37 = v27;
    operator delete(v27);
    return v28;
  }
  CFStringRef v28 = 0;
  if (__p) {
    goto LABEL_46;
  }
  return v28;
}

void sub_2161BDF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161BDF60(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    CFIndex v5 = (char *)operator new(8uLL);
    *(void *)CFIndex v5 = v4;
    uint64_t v6 = v5 + 8;
    a2[1] = v5 + 8;
    a2[2] = v5 + 8;
    *a2 = v5;
  }
  else
  {
    CFIndex v5 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7)
  {
    uint64_t v8 = v6 - v5;
    uint64_t v9 = (v6 - v5) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_21610CB04();
    }
    if (v8 >> 2 > v10) {
      unint64_t v10 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_2160FFA74();
      }
      CFArrayRef v12 = (char *)operator new(8 * v11);
    }
    else
    {
      CFArrayRef v12 = 0;
    }
    BOOL v13 = &v12[8 * v9];
    *(void *)BOOL v13 = v7;
    unint64_t v14 = v13 + 8;
    if (v6 != v5)
    {
      do
      {
        uint64_t v15 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v13 - 1) = v15;
        v13 -= 8;
      }
      while (v6 != v5);
      CFIndex v5 = *a2;
    }
    *a2 = v13;
    a2[1] = v14;
    a2[2] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
    a2[1] = v14;
  }
}

void sub_2161BE074(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161BE090(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_2161BE0C8(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_2161BE100(uint64_t result)
{
  *(void *)(result + 16) = &unk_26C6BD058;
  return result;
}

uint64_t sub_2161BE124(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 16))();
}

uint64_t sub_2161BE148()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EEF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EEF8))
  {
    unk_26B4ABA30 = 0u;
    unk_26B4ABA20 = 0u;
    qword_26797EEF0 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_26797EEF8);
  }
  return qword_26797EEF0;
}

void sub_2161BE1B8(_Unwind_Exception *a1)
{
}

uint64_t sub_2161BE1D0(uint64_t a1)
{
  CFAllocatorGetDefault();
  sub_2161BE148();
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t sub_2161BE214(uint64_t result)
{
  *(void *)(result + 16) = &unk_26C6BD1D8;
  return result;
}

uint64_t sub_2161BE238()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EF08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EF08))
  {
    unk_26B4ABA90 = 0u;
    unk_26B4ABA80 = 0u;
    qword_26797EF00 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_26797EF08);
  }
  return qword_26797EF00;
}

void sub_2161BE2A8(_Unwind_Exception *a1)
{
}

uint64_t sub_2161BE2C0(uint64_t a1)
{
  CFAllocatorGetDefault();
  sub_2161BE238();
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

void *sub_2161BE304(void *a1)
{
  *a1 = &unk_26C6BD058;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  return a1;
}

void sub_2161BE370(void *a1)
{
  *a1 = &unk_26C6BD058;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161BE3FC()
{
  return 0;
}

uint64_t sub_2161BE404()
{
  return 0;
}

uint64_t sub_2161BE40C()
{
  return 0;
}

uint64_t sub_2161BE414()
{
  return 0;
}

void sub_2161BE420(void *a1)
{
  sub_2161BE458(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_2161BE458(void *a1)
{
  *a1 = &unk_26C6BD1D8;
  uint64_t v2 = a1[1];
  if (v2)
  {
    sub_2161868BC((const void **)(v2 + 24), 0);
    MEMORY[0x2166CA800](v2, 0x1060C40B5E1536ALL);
  }
  return a1;
}

uint64_t sub_2161BE4C4(uint64_t a1, char *a2, void **a3)
{
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_216195244(&a9, 0) = 0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  int v4 = *((char *)a3 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v5 = (size_t)a3[1];
  }
  uint64_t v7 = a1;
  switch(v5)
  {
    case 5uLL:
      if (v4 >= 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = *a3;
      }
      if (*(_DWORD *)v8 == 1702390125 && *((unsigned char *)v8 + 4) == 100)
      {
        int v11 = 12;
        break;
      }
      if (*(_DWORD *)v8 == 1785687397 && *((unsigned char *)v8 + 4) == 105)
      {
        int v11 = 4;
        break;
      }
      if (memcmp(v8, "asset", v5)) {
        goto LABEL_134;
      }
      int v11 = 7;
      break;
    case 6uLL:
      if (v4 >= 0) {
        BOOL v16 = a3;
      }
      else {
        BOOL v16 = *a3;
      }
      if (*(_DWORD *)v16 == 1953724787 && v16[2] == 28005)
      {
        int v11 = 0;
      }
      else
      {
        if (memcmp(v16, "region", v5))
        {
LABEL_134:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Wrong dictionary type string");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        int v11 = 16;
      }
      break;
    case 7uLL:
      if (v4 >= 0) {
        CFIndex v19 = a3;
      }
      else {
        CFIndex v19 = *a3;
      }
      if (memcmp(v19, "english", v5)) {
        goto LABEL_134;
      }
      int v11 = 6;
      break;
    case 8uLL:
      if (v4 >= 0) {
        uint64_t v20 = a3;
      }
      else {
        uint64_t v20 = *a3;
      }
      if (*v20 != 0x79726F6765746163) {
        goto LABEL_134;
      }
      int v11 = 3;
      break;
    case 0xAuLL:
      if (v4 >= 0) {
        CFArrayRef v12 = (uint64_t *)a3;
      }
      else {
        CFArrayRef v12 = *a3;
      }
      uint64_t v13 = *v12;
      int v14 = *((unsigned __int16 *)v12 + 4);
      if (v13 != 0x656D656C70707573 || v14 != 29806) {
        goto LABEL_134;
      }
      int v11 = 5;
      break;
    case 0xBuLL:
      if (v4 >= 0) {
        CFIndex v18 = a3;
      }
      else {
        CFIndex v18 = *a3;
      }
      if (memcmp(v18, "asset_mixed", v5)) {
        goto LABEL_134;
      }
      int v11 = 15;
      break;
    case 0x10uLL:
      if (v4 >= 0) {
        uint64_t v21 = (uint64_t *)a3;
      }
      else {
        uint64_t v21 = *a3;
      }
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      if (v23 != 0x635F656C676E6973 || v22 != 0x7265746361726168) {
        goto LABEL_134;
      }
      int v11 = 1;
      break;
    default:
      goto LABEL_134;
  }
  *(_DWORD *)(v7 + 4sub_216195244(&a9, 0) = v11;
  if (a2[23] >= 0) {
    uint64_t v25 = a2;
  }
  else {
    uint64_t v25 = *(char **)a2;
  }
  CFPropertyListRef v26 = sub_2161E44AC(v25);
  CFTypeRef v72 = v26;
  if (!v26)
  {
    long long v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v66, "Cannot load dictionary index property plist.");
    __cxa_throw(v66, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v27 = *((char *)a3 + 23);
  if (v27 >= 0) {
    CFStringRef v28 = (UInt8 *)a3;
  }
  else {
    CFStringRef v28 = (UInt8 *)*a3;
  }
  if (v27 >= 0) {
    CFIndex v29 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    CFIndex v29 = (CFIndex)a3[1];
  }
  CFTypeRef cf = sub_2161E4CEC(v28, v29);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v26, cf);
  CFDictionaryRef v31 = Value;
  if (!Value)
  {
    long long v67 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x2166CA2B0](v67, v70);
    __cxa_throw(v67, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFStringRef v32 = (const __CFString *)CFDictionaryGetValue(Value, @"feature_format");
  if (CFStringCompare(v32, @"full", 0))
  {
    if (CFStringCompare(v32, @"skip_syllable_lengths", 0))
    {
      BOOL v68 = __cxa_allocate_exception(8uLL);
      *BOOL v68 = "Unrecognized feature format.";
      __cxa_throw(v68, MEMORY[0x263F8C1D8], 0);
    }
    char v33 = 1;
  }
  else
  {
    char v33 = 0;
  }
  *(unsigned char *)(v7 + 24) = v33;
  CFArrayRef v34 = (const __CFArray *)CFDictionaryGetValue(v31, @"indexes");
  CFArrayRef v35 = v34;
  if (!v34 || !CFArrayGetCount(v34))
  {
    long long v64 = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    __cxa_throw(v64, (struct type_info *)&unk_26C6BC178, MEMORY[0x263F8C0B8]);
  }
  BOOL v36 = 0;
  for (CFIndex i = 0; i < CFArrayGetCount(v35); ++i)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, i);
    CFBooleanRef v39 = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, @"is_reversed");
    if (v39) {
      BOOL v40 = CFBooleanGetValue(v39) != 0;
    }
    else {
      BOOL v40 = 0;
    }
    CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"type");
    CFComparisonResult v42 = CFStringCompare(v41, @"string", 0);
    BOOL v43 = v42 == kCFCompareEqualTo;
    if (v42)
    {
      if (CFStringCompare(v41, @"syllable_id", 0))
      {
        long long v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "Unrecognized dictionary key type.");
        goto LABEL_130;
      }
      if (!v40)
      {
        long long v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "syllable_id based dictionary key must be in reversed direction");
LABEL_130:
        __cxa_throw(v63, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if (v36)
      {
        long long v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "Syllable ID indexes must be before string indexes");
        goto LABEL_130;
      }
      ++*(void *)(a1 + 32);
      uint64_t v44 = 1;
    }
    else
    {
      uint64_t v44 = 0;
    }
    CFBooleanRef v45 = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, @"has_sub_index_for_prefix");
    if (v45) {
      BOOL v46 = CFBooleanGetValue(v45) != 0;
    }
    else {
      BOOL v46 = 0;
    }
    uint64_t v7 = a1;
    unint64_t v48 = *(uint64_t **)(a1 + 8);
    unint64_t v47 = *(void *)(a1 + 16);
    if ((unint64_t)v48 >= v47)
    {
      long long v52 = *(uint64_t **)a1;
      uint64_t v53 = ((uint64_t)v48 - *(void *)a1) >> 3;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61) {
        sub_21610CB04();
      }
      uint64_t v55 = v47 - (void)v52;
      if (v55 >> 2 > v54) {
        unint64_t v54 = v55 >> 2;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        if (v56 >> 61) {
          sub_2160FFA74();
        }
        long long v57 = (char *)operator new(8 * v56);
      }
      else
      {
        long long v57 = 0;
      }
      long long v58 = (uint64_t *)&v57[8 * v53];
      uint64_t v59 = 0x10000000000;
      if (!v46) {
        uint64_t v59 = 0;
      }
      uint64_t v60 = 0x100000000;
      if (!v40) {
        uint64_t v60 = 0;
      }
      *long long v58 = v60 | v59 | v44;
      long long v51 = v58 + 1;
      if (v48 == v52)
      {
        uint64_t v7 = a1;
      }
      else
      {
        uint64_t v7 = a1;
        do
        {
          uint64_t v61 = *--v48;
          *--long long v58 = v61;
        }
        while (v48 != v52);
        unint64_t v48 = *(uint64_t **)a1;
      }
      *(void *)uint64_t v7 = v58;
      *(void *)(v7 + ++**(_DWORD **)(result + 8) = v51;
      *(void *)(v7 + 16) = &v57[8 * v56];
      if (v48) {
        operator delete(v48);
      }
    }
    else
    {
      uint64_t v49 = 0x10000000000;
      if (!v46) {
        uint64_t v49 = 0;
      }
      uint64_t v50 = 0x100000000;
      if (!v40) {
        uint64_t v50 = 0;
      }
      uint64_t *v48 = v50 | v49 | v44;
      long long v51 = v48 + 1;
    }
    *(void *)(v7 + ++**(_DWORD **)(result + 8) = v51;
    BOOL v36 = v43;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v72) {
    CFRelease(v72);
  }
  return v7;
}

void sub_2161BEBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    uint64_t v20 = a9;
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_2161868BC(&a16, 0);
      sub_216182BB8(&a17, 0);
      uint64_t v21 = *(void **)v20;
      if (*(void *)v20)
      {
        *(void *)(v20 + ++**(_DWORD **)(result + 8) = v21;
        operator delete(v21);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v20 = a9;
    if (!v18) {
      goto LABEL_6;
    }
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

BOOL sub_2161BECF0(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

uint64_t sub_2161BED68(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  int v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  *(void *)a1 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = CFDictionaryCreateMutable(v2, 0, v3, v4);
  *(unsigned char *)(a1 + 16) = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70]);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, (const void *)qword_26797B9E0, Mutable);
  CFRelease(Mutable);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, (const void *)qword_26797B9E8, (const void *)*MEMORY[0x263EFFD08]);
  return a1;
}

uint64_t sub_2161BEE34(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void sub_2161BEE74(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    char valuePtr = 1;
    CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt8Type, &valuePtr);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8), (const void *)qword_26797B9F0, v2);
    CFRelease(v2);
  }
}

unsigned char *sub_2161BEEE4(unsigned char *result, const __CFString *a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t valuePtr = a4;
  if (!result[16]) {
    return result;
  }
  unint64_t v10 = result;
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)result, (const void *)qword_26797B9E0);
  if (!result || !*((void *)v10 + 1)) {
    return result;
  }
  CFArrayRef v11 = (const __CFArray *)result;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberLongType, &valuePtr);
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), @"MecabraAnalysisOption", v13);
  CFRelease(v13);
  if (a2) {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), @"CurrentAnalysisString", a2);
  }
  if (a5 && a6)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a6 + 24))(a6)) {
      goto LABEL_22;
    }
    CFStringRef v50 = a2;
    CFAllocatorRef v51 = v12;
    CFMutableArrayRef Mutable = CFStringCreateMutable(v12, 0);
    CFArrayRef v15 = *(const __CFArray **)(a5 + 16);
    if (v15)
    {
      CFIndex Count = CFArrayGetCount(v15);
      if (Count >= 1)
      {
        CFIndex v17 = Count;
        for (CFIndex i = 0; i != v17; ++i)
        {
          CFIndex v19 = (void *)sub_21628F0D0(a5, i);
          CFStringRef v22 = sub_2161F6244(v19, v20, v21);
          CFStringRef v53 = v22;
          if (v22)
          {
            CFStringRef v23 = v22;
            CFStringAppend(Mutable, v22);
            CFStringAppend(Mutable, @"\n");
            CFRelease(v23);
          }
        }
      }
    }
    CFIndex v24 = CFArrayGetCount(*(CFArrayRef *)(a5 + 32));
    if (v24 >= 1)
    {
      CFIndex v25 = v24;
      for (CFIndex j = 0; j != v25; ++j)
      {
        int v27 = (void *)sub_21628F1BC(a5, j);
        CFStringRef v30 = sub_2161F6244(v27, v28, v29);
        CFStringRef v53 = v30;
        if (v30)
        {
          CFStringRef v31 = v30;
          CFStringAppend(Mutable, v30);
          CFStringAppend(Mutable, @"\n");
          CFRelease(v31);
        }
      }
    }
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), @"CandidateContext", Mutable);
    CFRelease(Mutable);
    a2 = v50;
    CFAllocatorRef v12 = v51;
  }
  if (a6)
  {
LABEL_22:
    CFStringRef v32 = sub_216308A2C(a6, 0);
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), @"InputContext", v32);
    CFRelease(v32);
    if (!a5) {
      goto LABEL_26;
    }
LABEL_25:
    char v33 = *(__CFString **)(a5 + 72);
    if (v33) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), @"InputContext", @"Empty Input Context.");
  if (a5) {
    goto LABEL_25;
  }
LABEL_26:
  char v33 = @"Empty App Context.";
LABEL_27:
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), @"AppContext", v33);
  if (a3)
  {
    CFArrayRef v34 = CFStringCreateMutable(v12, 0);
    CFIndex v35 = CFArrayGetCount(a3);
    if (v35 >= 1)
    {
      CFIndex v36 = v35;
      for (CFIndex k = 0; k != v36; ++k)
      {
        CFDictionaryRef ValueAtIndex = (void **)CFArrayGetValueAtIndex(a3, k);
        CFStringRef v39 = (const __CFString *)(*(uint64_t (**)(void *))(*ValueAtIndex[3] + 40))(ValueAtIndex[3]);
        CFStringRef v53 = v39;
        if (v39)
        {
          CFStringRef v40 = v39;
          CFStringAppend(v34, v39);
          CFRelease(v40);
        }
      }
    }
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), @"GesturesData", v34);
    if (v34) {
      CFRelease(v34);
    }
  }
  if (a5)
  {
    CFArrayRef v41 = *(const __CFArray **)(a5 + 48);
    if (v41)
    {
      if (CFStringGetLength(a2) <= 80)
      {
        CFArrayRef v42 = sub_2162737F4(v41);
        if (v42)
        {
          CFArrayRef v43 = v42;
          CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), @"GeometryData", v42);
          CFRelease(v43);
        }
      }
    }
  }
  if (!a2)
  {
    BOOL v45 = 1;
    goto LABEL_44;
  }
  CFIndex Length = CFStringGetLength(a2);
  BOOL v45 = Length < 31;
  if (Length <= 50)
  {
LABEL_44:
    uint64_t v46 = 5;
    goto LABEL_45;
  }
  uint64_t v46 = 1;
LABEL_45:
  if (v45) {
    uint64_t v47 = 10;
  }
  else {
    uint64_t v47 = v46;
  }
  CFIndex v48 = CFArrayGetCount(v11);
  if (v48 >= v47)
  {
    uint64_t v49 = v48 + 1;
    do
    {
      CFArrayRemoveValueAtIndex(v11, 0);
      --v49;
    }
    while (v49 > v47);
  }
  CFArrayAppendValue(v11, *((const void **)v10 + 1));
  CFRelease(*((CFTypeRef *)v10 + 1));
  uint64_t result = CFDictionaryCreateMutable(v12, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *((void *)v10 + 1) = result;
  return result;
}

void sub_2161BF300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161BF338(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    CFDictionaryReplaceValue(*(CFMutableDictionaryRef *)a1, (const void *)qword_26797B9E0, Mutable);
    CFRelease(Mutable);
  }
}

uint64_t sub_2161BF3B4(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int16 **a5)
{
  *(_DWORD *)(result + ++**(_DWORD **)(result + 8) = a4;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 4sub_216195244(&a9, 0) = 0xFFFFFFFFLL;
  *(void *)uint64_t result = &unk_26C6BD628;
  *(_OWORD *)(result + 4++**(_DWORD **)(result + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + ++**(_DWORD **)(result + 8) = 0;
  *(_OWORD *)(result + 64) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + ++**(_DWORD **)(result + 8) = 0;
  uint64_t v5 = (uint64_t)a5[1];
  if (v5 >= 1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *a5;
    do
    {
      unsigned int v8 = *v7++;
      unint64_t v6 = v6 + v8 - 48;
      if (v6 <= 0x20) {
        *(_DWORD *)(result + 44) |= 1 << (v6 - 1);
      }
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_2161BF448(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C6C59C0;
  long long v2 = *(_OWORD *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 24);
  *(void *)(result + 4sub_216195244(&a9, 0) = *(void *)(a2 + 40);
  *(_OWORD *)(result + 24) = v3;
  *(_OWORD *)(result + ++**(_DWORD **)(result + 8) = v2;
  *(void *)uint64_t result = &unk_26C6BD628;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(result + 4++**(_DWORD **)(result + 8) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2161BF4D0(void *a1)
{
  sub_2161BF5C4(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161BF508()
{
  return 0;
}

uint64_t sub_2161BF510(uint64_t a1)
{
  long long v2 = *(CFStringRef **)(a1 + 64);
  if (!v2)
  {
    CFStringRef v3 = **(const __CFString ***)(a1 + 48);
    if (!v3) {
      return 0;
    }
    goto LABEL_7;
  }
  if (*v2) {
    CFStringGetLength(*v2);
  }
  CFStringRef v3 = **(const __CFString ***)(a1 + 48);
  if (v3) {
LABEL_7:
  }
    CFStringGetLength(v3);
  return 0;
}

uint64_t sub_2161BF588()
{
  return 0;
}

void sub_2161BF590(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_2161BF59C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_2161BF5A8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_2161BF5B4()
{
  return 0;
}

uint64_t sub_2161BF5BC()
{
  return 0;
}

void *sub_2161BF5C4(void *a1)
{
  *a1 = &unk_26C6BD628;
  long long v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_2161121B0(v2);
  }
  CFStringRef v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_2161121B0(v3);
  }
  return a1;
}

uint64_t sub_2161BF61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + ++**(_DWORD **)(result + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(_OWORD *)(a1 + 4++**(_DWORD **)(result + 8) = 0u;
  uint64_t v8 = a1 + 48;
  *(void *)(a1 + 4sub_216195244(&a9, 0) = v7;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8sub_216195244(&a9, 0) = 0u;
  unint64_t v9 = **(void **)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 56);
  unint64_t v11 = (*(void *)(a2 + 64) - v10) >> 1;
  uint64_t v12 = v10 + 2 * v9;
  if (v11 <= v9) {
    uint64_t v12 = 0;
  }
  if (v10) {
    unint64_t v13 = v11 - v9;
  }
  else {
    unint64_t v13 = 0;
  }
  if (v11 <= v9) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v13;
  }
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = v12;
  *(void *)(a1 + 16) = v14;
  unint64_t v15 = **(void **)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 32);
  unint64_t v17 = (*(void *)(a2 + 40) - v16) >> 1;
  uint64_t v18 = v16 + 2 * v15;
  if (v17 <= v15) {
    uint64_t v18 = 0;
  }
  if (v16) {
    unint64_t v19 = v17 - v15;
  }
  else {
    unint64_t v19 = 0;
  }
  if (v17 <= v15) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = v19;
  }
  *(void *)(a1 + 24) = v18;
  *(void *)(a1 + 32) = v20;
  sub_216185B34((void **)(a1 + 48), *(void *)(a3 + 8) + v14);
  sub_2161BF794(*(_WORD **)(a1 + 8), (_WORD *)(*(void *)(a1 + 8) + 2 * *(void *)(a1 + 16)), v8);
  sub_2161BF794(*(_WORD **)a3, (_WORD *)(*(void *)a3 + 2 * *(void *)(a3 + 8)), v8);
  sub_216185B34((void **)(v8 + 24), *(void *)(a4 + 8) + *(void *)(a1 + 16));
  sub_2161BF794(*(_WORD **)(a1 + 8), (_WORD *)(*(void *)(a1 + 8) + 2 * *(void *)(a1 + 16)), v8 + 24);
  sub_2161BF794(*(_WORD **)a4, (_WORD *)(*(void *)a4 + 2 * *(void *)(a4 + 8)), v8 + 24);
  return a1;
}

void sub_2161BF768(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 8sub_216195244(&a9, 0) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_2161BF794(_WORD *a1, _WORD *a2, uint64_t a3)
{
  CFStringRef v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    sub_216192280(&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t sub_2161BF7F8(int *a1, CFArrayRef *a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, float a8)
{
  unsigned int v10 = a5;
  int v14 = a3[a5];
  *(_WORD *)a6 = v14;
  *(float *)(a6 + 4) = a8;
  unint64_t v15 = (unsigned __int16 *)*((void *)a1 + 10);
  unint64_t v16 = *((void *)a1 + 11);
  if (v16 >= a4) {
    unint64_t v17 = a4;
  }
  else {
    unint64_t v17 = *((void *)a1 + 11);
  }
  if (v17)
  {
    if (*a3 == *v15)
    {
      unint64_t v18 = 0;
      while (v17 - 1 != v18)
      {
        int v19 = a3[v18 + 1];
        int v20 = v15[++v18];
        if (v19 != v20) {
          goto LABEL_12;
        }
      }
      unint64_t v18 = v17;
LABEL_12:
      BOOL v21 = v17 > v18;
    }
    else
    {
      BOOL v21 = 1;
    }
    CFStringRef v22 = &v15[v16 - 1];
    CFStringRef v23 = &a3[a4 - 1];
    while (1)
    {
      int v25 = *v23--;
      int v24 = v25;
      int v26 = *v22--;
      if (v24 != v26) {
        break;
      }
      if (!--v17) {
        goto LABEL_16;
      }
    }
    if (v21) {
      return 1;
    }
  }
  else
  {
LABEL_16:
    unsigned int v10 = a5 - a4 + v16;
  }
  if ((v10 & 0x80000000) != 0) {
    return 1;
  }
  int v27 = *a1;
  CFStringRef v28 = sub_2161A2A80();
  if ((v27 & 0x40) == 0) {
    goto LABEL_43;
  }
  unint64_t v29 = 60;
  if (!*v28) {
    unint64_t v29 = 255;
  }
  if (v29 > v10
    && (!v10 ? (int v30 = 0) : (int v30 = v15[v10 - 1]),
        v16 - 1 <= v10 ? (int v32 = 0) : (int v32 = v15[v10 + 1]),
        (char v33 = sub_216334594(v14, v30, v32, (*a1 >> 6) & 8 | *(unsigned char *)a1 & 0x20 | (*a1 >> 4) & 0x10 | (*a1 << 24 >> 31) & 6)) != 0&& (v34 = *v33, v35 = (unsigned __int16 *)v33[1], *v33 != (uint64_t *)v35)))
  {
    float v36 = a8 + -1.0;
    uint64_t v31 = 1;
    do
    {
      int v37 = *(unsigned __int16 *)v34;
      if (v37 != v14)
      {
        if ((int)v31 < 1)
        {
LABEL_38:
          uint64_t v40 = a6 + 8 * (int)v31;
          *(_WORD *)uint64_t v40 = v37;
          *(float *)(v40 + 4) = v36;
          uint64_t v31 = (v31 + 1);
        }
        else
        {
          uint64_t v38 = v31;
          CFStringRef v39 = (float *)(a6 + 4);
          while (*((unsigned __int16 *)v39 - 2) != v37)
          {
            v39 += 2;
            if (!--v38) {
              goto LABEL_38;
            }
          }
          if (*v39 < v36) {
            float *v39 = v36;
          }
        }
      }
      CFArrayRef v34 = (uint64_t *)((char *)v34 + 2);
    }
    while (v34 != (uint64_t *)v35);
  }
  else
  {
LABEL_43:
    uint64_t v31 = 1;
  }
  if ((v27 & 0x20) != 0)
  {
    unint64_t v42 = (unint64_t)v10 >> 3;
    if (v42 < 5)
    {
      double v41 = -0.65;
      goto LABEL_52;
    }
LABEL_49:
    if (v42 >= 0xF) {
      double v41 = 0.0;
    }
    else {
      double v41 = -0.2;
    }
    goto LABEL_52;
  }
  double v41 = -0.5;
  unint64_t v42 = (unint64_t)v10 >> 2;
  if (v42 >= 5) {
    goto LABEL_49;
  }
LABEL_52:
  if (a2 && (v27 & 0x10) != 0)
  {
    CFArrayRef Count = *a2;
    if (*a2) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count > (int)v10)
    {
      uint64_t v44 = sub_21627378C(a2, (int)v10);
      if (v44)
      {
        BOOL v45 = v44;
        unsigned __int16 v46 = *(_WORD *)v44;
        if (*(_WORD *)v44) {
          double v47 = *((float *)v44 + 1);
        }
        else {
          double v47 = 0.0;
        }
        unint64_t v48 = 0;
        if ((v27 & 0x20) != 0) {
          double v49 = 4.0;
        }
        else {
          double v49 = 7.5;
        }
        double v50 = a8;
        while (1)
        {
          BOOL v51 = v14 == 9787;
          if (v46 == 9787) {
            goto LABEL_117;
          }
          if (!v46) {
            return v31;
          }
          int8_t v52 = u_charType(v46);
          BOOL v51 = v14 == v46;
          if (v14 == v46 || (v52 - 30) <= 0xF4u)
          {
LABEL_117:
            if (!v51)
            {
              double v53 = *((float *)v45 + 1) - v47;
              if (v53 >= v41)
              {
                double v54 = v49 * v53;
                if ((v27 & 0x20) != 0)
                {
                  if (v14 == 105 && v46 == 111
                    || v14 == 111 && v46 == 105
                    || (v14 == 105 ? (BOOL v60 = v46 == 117) : (BOOL v60 = 0),
                        !v60 ? (int v61 = 0) : (int v61 = 1),
                        v46 == 105 ? (BOOL v62 = v14 == 117) : (BOOL v62 = 0),
                        v62 || v61))
                  {
                    double v54 = v54 + -2.0;
                  }
                  else
                  {
                    BOOL v64 = v14 == 109 && v46 == 110;
                    if (v14 == 110 && v46 == 109 || v64) {
                      double v54 = v54 + -0.3;
                    }
                  }
                }
                float v55 = v54 + -0.3 + v50;
                if ((int)v31 < 1)
                {
LABEL_81:
                  uint64_t v58 = a6 + 8 * (int)v31;
                  *(_WORD *)uint64_t v58 = v46;
                  *(float *)(v58 + 4) = v55;
                  uint64_t v31 = (v31 + 1);
                }
                else
                {
                  uint64_t v56 = v31;
                  long long v57 = (float *)(a6 + 4);
                  while (*((unsigned __int16 *)v57 - 2) != v46)
                  {
                    v57 += 2;
                    if (!--v56) {
                      goto LABEL_81;
                    }
                  }
                  if (*v57 < v55) {
                    *long long v57 = v55;
                  }
                }
                if ((int)v31 >= a7 || v48 > 1) {
                  return v31;
                }
                ++v48;
              }
            }
          }
          unsigned __int16 v59 = *((_WORD *)v45 + 4);
          v45 += 8;
          unsigned __int16 v46 = v59;
        }
      }
    }
  }
  return v31;
}

uint64_t sub_2161BFC5C(int *a1, CFArrayRef *a2, float a3, uint64_t a4, int a5, int a6, uint64_t a7, unint64_t a8)
{
  if (*(unsigned char *)sub_2161A2A80()) {
    unint64_t v15 = 60;
  }
  else {
    unint64_t v15 = 255;
  }
  if (a5 >= a6) {
    return 0;
  }
  unint64_t v16 = *((void *)a1 + 13);
  if (v16 <= a5) {
    return 0;
  }
  uint64_t v17 = *((void *)a1 + 12);
  unsigned int v18 = *a1;
  int v19 = *a1 & 0x20;
  int v20 = *a1 & 0x40;
  int v21 = *(unsigned __int16 *)(v17 + 2 * a5);
  *(_WORD *)a7 = v21;
  *(float *)(a7 + 4) = a3;
  BOOL v22 = v15 <= a5 || v20 == 0;
  if (v22
    || (a5 < 1 ? (int v23 = 0) : (int v23 = *(unsigned __int16 *)(v17 + 2 * (a5 - 1))),
        v16 - 1 <= a5 ? (int v26 = 0) : (int v26 = *(unsigned __int16 *)(v17 + 2 * a5 + 2)),
        (int v27 = sub_216334594(v21, v23, v26, (v18 >> 4) & 0x10 | (v18 >> 6) & 8 | ((char)v18 >> 7) & 6 | v19)) == 0
     || (CFStringRef v28 = *v27, v29 = (unsigned __int16 *)v27[1], *v27 == (uint64_t *)v29)))
  {
    uint64_t v24 = 1;
  }
  else
  {
    float v30 = a3 + -1.0;
    uint64_t v24 = 1;
    do
    {
      int v31 = *(unsigned __int16 *)v28;
      if (v31 != v21)
      {
        if ((int)v24 < 1)
        {
LABEL_26:
          uint64_t v34 = a7 + 8 * (int)v24;
          *(_WORD *)uint64_t v34 = v31;
          *(float *)(v34 + 4) = v30;
          uint64_t v24 = (v24 + 1);
        }
        else
        {
          uint64_t v32 = v24;
          char v33 = (float *)(a7 + 4);
          while (*((unsigned __int16 *)v33 - 2) != v31)
          {
            v33 += 2;
            if (!--v32) {
              goto LABEL_26;
            }
          }
          if (*v33 < v30) {
            *char v33 = v30;
          }
        }
      }
      CFStringRef v28 = (uint64_t *)((char *)v28 + 2);
    }
    while (v28 != (uint64_t *)v29);
  }
  if (v19)
  {
    if (a5 >= 0x28)
    {
      BOOL v36 = a5 >= 0x78;
LABEL_38:
      if (v36) {
        double v35 = 0.0;
      }
      else {
        double v35 = -0.2;
      }
      goto LABEL_41;
    }
    double v35 = -0.65;
  }
  else
  {
    double v35 = -0.5;
    if (a5 >= 0x14)
    {
      BOOL v36 = a5 >= 0x3C;
      goto LABEL_38;
    }
  }
LABEL_41:
  if (a2 && (v18 & 0x10) != 0)
  {
    CFArrayRef Count = *a2;
    if (*a2) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count > a5)
    {
      uint64_t v38 = sub_21627378C(a2, a5);
      if (v38)
      {
        CFStringRef v39 = v38;
        unsigned __int16 v40 = *(_WORD *)v38;
        if (*(_WORD *)v38) {
          double v41 = *((float *)v38 + 1);
        }
        else {
          double v41 = 0.0;
        }
        unint64_t v42 = 0;
        double v43 = a3;
        if (v19) {
          double v44 = 4.0;
        }
        else {
          double v44 = 7.5;
        }
        while (1)
        {
          BOOL v45 = v21 == 9787;
          if (v40 == 9787) {
            goto LABEL_104;
          }
          if (!v40) {
            return v24;
          }
          int8_t v46 = u_charType(v40);
          BOOL v45 = v21 == v40;
          if (v21 == v40 || (v46 - 30) <= 0xF4u)
          {
LABEL_104:
            if (!v45)
            {
              double v47 = *((float *)v39 + 1) - v41;
              if (v47 >= v35)
              {
                double v48 = v44 * v47;
                if (v19)
                {
                  if (v21 == 105 && v40 == 111
                    || v21 == 111 && v40 == 105
                    || (v21 == 105 ? (BOOL v54 = v40 == 117) : (BOOL v54 = 0),
                        !v54 ? (int v55 = 0) : (int v55 = 1),
                        v40 == 105 ? (BOOL v56 = v21 == 117) : (BOOL v56 = 0),
                        v56 || v55))
                  {
                    double v48 = v48 + -2.0;
                  }
                  else
                  {
                    BOOL v58 = v21 == 109 && v40 == 110;
                    if (v21 == 110 && v40 == 109 || v58) {
                      double v48 = v48 + -0.3;
                    }
                  }
                }
                float v49 = v48 + -0.3 + v43;
                if ((int)v24 < 1)
                {
LABEL_69:
                  uint64_t v52 = a7 + 8 * (int)v24;
                  *(_WORD *)uint64_t v52 = v40;
                  *(float *)(v52 + 4) = v49;
                  uint64_t v24 = (v24 + 1);
                }
                else
                {
                  uint64_t v50 = v24;
                  BOOL v51 = (float *)(a7 + 4);
                  while (*((unsigned __int16 *)v51 - 2) != v40)
                  {
                    v51 += 2;
                    if (!--v50) {
                      goto LABEL_69;
                    }
                  }
                  if (*v51 < v49) {
                    float *v51 = v49;
                  }
                }
                if ((int)v24 >= a8 || v42 > 1) {
                  return v24;
                }
                ++v42;
              }
            }
          }
          unsigned __int16 v53 = *((_WORD *)v39 + 4);
          v39 += 8;
          unsigned __int16 v40 = v53;
        }
      }
    }
  }
  return v24;
}

const UInt8 *sub_2161C0030(CFArrayRef *a1, unsigned int a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EF18, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a1;
    int v11 = __cxa_guard_acquire(&qword_26797EF18);
    a1 = v12;
    if (v11)
    {
      qword_26797EF10 = (uint64_t)L"'aeinouyxa";
      __cxa_guard_release(&qword_26797EF18);
      a1 = v12;
    }
  }
  uint64_t result = sub_21627378C(a1, (int)a2);
  if (result)
  {
    uint64_t v5 = result + 8;
    int v4 = *((unsigned __int16 *)result + 4);
    if (*((_WORD *)result + 4))
    {
      float v6 = *((float *)result + 1);
      double v7 = -0.2;
      if (a2 >= 0x78) {
        double v7 = 0.0;
      }
      if (a2 < 0x28) {
        double v7 = -0.65;
      }
      while (1)
      {
        float v8 = *((float *)result + 3);
        uint64_t result = v5;
        if (v7 <= (float)(v8 - v6))
        {
          uint64_t v9 = 0;
          while (*(unsigned __int16 *)(qword_26797EF10 + v9) != v4)
          {
            v9 += 2;
            if (v9 == 16)
            {
              uint64_t v10 = qword_26797EF10 + 16;
              goto LABEL_14;
            }
          }
          uint64_t v10 = qword_26797EF10 + v9;
LABEL_14:
          if (v10 - qword_26797EF10 != 16) {
            return (const UInt8 *)1;
          }
        }
        uint64_t v5 = result + 8;
        int v4 = *((unsigned __int16 *)result + 4);
        if (!*((_WORD *)result + 4)) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_2161C015C(const char *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5 = a1;
  int64_t v6 = strlen(a1);
  if (v6 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = (unint64_t)&v5[v6];
  unint64_t v9 = a3;
  while (1)
  {
    for (CFIndex i = (unsigned __int8 *)v5; ; ++i)
    {
      int v11 = *i;
      if (v11 != 9 && v11 != 32) {
        break;
      }
      ++v5;
    }
    if (v11 == 34)
    {
      uint64_t v12 = ++i;
      unint64_t v13 = i;
      if ((unint64_t)i < v8)
      {
        unint64_t v13 = i;
        uint64_t v12 = i;
        do
        {
          int v14 = *v13;
          if (v14 == 34)
          {
            int v15 = *++v13;
            if (v15 != 34) {
              break;
            }
          }
          *v12++ = v14;
          ++v13;
        }
        while ((unint64_t)v13 < v8);
      }
      unint64_t v16 = memchr(v13, 44, v8 - (void)v13);
      uint64_t v17 = v16 ? (unsigned __int8 *)v16 : (unsigned __int8 *)v8;
    }
    else
    {
      unsigned int v18 = memchr(i, 44, v8 - (void)v5);
      int v19 = v18 ? v18 : (unsigned char *)v8;
      uint64_t v12 = &i[v19 - v5];
      uint64_t v17 = v12;
    }
    if (v9 >= 2) {
      *uint64_t v12 = 0;
    }
    sub_21610B834(__p, (char *)i);
    int v21 = a2;
    sub_21616ED0C(&v21, (long long *)__p);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (!--v9) {
      break;
    }
    ++v7;
    uint64_t v5 = (const char *)(v17 + 1);
    if ((unint64_t)(v17 + 1) >= v8) {
      return v7;
    }
  }
  return a3;
}

void sub_2161C02CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161C02E8(void *a1)
{
  *a1 = &unk_26C6C5118;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  return a1;
}

void ***sub_2161C0344(void ***a1, void *a2)
{
  int v4 = *a1;
  uint64_t v5 = (*a1)[1];
  int64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      int v15 = (char *)sub_2160FFAA8(v7, v14);
    }
    else {
      int v15 = 0;
    }
    unint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = *a2;
    uint64_t v10 = v16 + 8;
    int v19 = (char *)*v4;
    unsigned int v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*v4;
    }
    *int v4 = v16;
    v4[1] = v10;
    void v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void sub_2161C0430(void *a1)
{
  *a1 = &unk_26C6C5118;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C8077774924);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t *sub_2161C04AC(const __CFURL *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D4C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D4C0))
  {
    sub_2161C0580(a1);
    __cxa_atexit((void (*)(void *))sub_2161C0550, &qword_26797EF20, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D4C0);
  }
  return &qword_26797EF20;
}

void sub_2161C0538(_Unwind_Exception *a1)
{
}

uint64_t sub_2161C0550(uint64_t a1)
{
  return a1;
}

void sub_2161C0580(const __CFURL *a1)
{
  qword_26797EF20 = 1616;
  qword_26797EF28 = 0;
  qword_26797EF30 = (uint64_t)&unk_216372238;
  unk_26797EF38 = 193;
  qword_26797EF40 = (uint64_t)&unk_2163723BA;
  qword_26797EF48 = 1616;
  *(_OWORD *)&word_26797EF50 = xmmword_216372200;
  *(_OWORD *)&word_26797EF60 = xmmword_216372210;
  xmmword_26797EF70 = xmmword_216372220;
  qword_26797EF80 = 0x64C0644061F061CLL;
  CFStringRef v1 = sub_2161E0A88(a1);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)off_26797B330, @"posmap-migration.plist");
  CFStringRef v3 = CFDictionaryGetValue(Value, @"innsbruck");
  sub_2161AC6F8(&qword_26797EF28, v3);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_2161C064C(_Unwind_Exception *a1)
{
}

uint64_t sub_2161C067C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 72);
  if (v3 <= a2
    && ((v4 = *(unsigned __int16 *)(a1 + 74), v4 >= a3) ? (BOOL v5 = v3 >= a3, v6 = v3 == a3) : (BOOL v5 = 1, v6 = 0),
        v6 || !v5 ? (BOOL v7 = v4 >= a2) : (BOOL v7 = 0),
        v7))
  {
    return 0;
  }
  else
  {
    return sub_2161C06A8(a1, a2, a3);
  }
}

uint64_t sub_2161C06A8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3 = *(unsigned __int16 *)(a1 + 50);
  if (v3 != a2 || (uint64_t v4 = 0, a3 != 1607) && a2 != a3)
  {
    unsigned int v5 = a2 - 1607;
    if (a2 == 1607 && v3 == a3) {
      return 0;
    }
    BOOL v6 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * a2 + 5]);
    if ((unint64_t)v6[1] >= 3)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *v6;
      while (word_2163793A8[v8] == *(_WORD *)(v9 + v8 * 2))
      {
        if (++v8 == 3)
        {
          if (*(unsigned __int16 *)(a1 + 84) <= a3 && *(unsigned __int16 *)(a1 + 86) >= a3) {
            return 0;
          }
          break;
        }
      }
    }
    if (v5 > 5 || (uint64_t v4 = 1, ((1 << v5) & 0x25) == 0))
    {
      unint64_t v10 = *(void *)(a1 + 40);
      if (v10 > a2)
      {
        uint64_t v11 = *(void *)(a1 + 32);
        if ((*(unsigned char *)(v11 + a2) & 1) != 0 && v10 > a3) {
          return (*(unsigned __int8 *)(v11 + a3) >> 1) & 1;
        }
      }
      return 0;
    }
  }
  return v4;
}

uint64_t sub_2161C07AC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3 = *(unsigned __int16 *)(a1 + 50);
  if (v3 == a2 && v3 == a3) {
    return 0;
  }
  if (sub_2161C08D8(a1, a2))
  {
    uint64_t v8 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * a2 + 5]);
    if ((unint64_t)v8[1] >= 3)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *v8;
      while (*(unsigned __int16 *)&aBBkb[v13] == *(unsigned __int16 *)(v14 + v13))
      {
        v13 += 2;
        if (v13 == 6) {
          return 1;
        }
      }
      uint64_t v15 = 0;
      while (word_2163793D2[v15] == *(_WORD *)(v14 + v15 * 2))
      {
        if (++v15 == 3) {
          return 1;
        }
      }
    }
  }
  BOOL v9 = sub_2161C09E0(a1, a2);
  uint64_t result = 1;
  if (a2 != 1609 && !v9)
  {
    unint64_t v11 = *(void *)(a1 + 40);
    if (v11 > a2)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      if ((*(unsigned char *)(v12 + a2) & 1) != 0 && v11 > a3) {
        return (*(unsigned __int8 *)(v12 + a3) >> 1) & 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_2161C08D8(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 76) <= a2 && *(unsigned __int16 *)(a1 + 78) >= a2) {
    return 1;
  }
  uint64_t v2 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * a2]);
  if (v2[1] == 3)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *v2;
    while (word_2163793B0[v3] == *(_WORD *)(v4 + v3 * 2))
    {
      if (++v3 == 3) {
        return 1;
      }
    }
  }
  BOOL v6 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * a2 + 1]);
  BOOL v7 = (void *)v6[1];
  if (v7 == (void *)4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *v6;
    do
    {
      int v15 = *(unsigned __int16 *)(v14 + v13 * 2);
      int v16 = (unsigned __int16)word_2163793C0[v13];
      BOOL result = v16 == v15;
    }
    while (v16 == v15 && v13++ != 3);
  }
  else if (v7 == (void *)3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *v6;
    do
    {
      int v10 = *(unsigned __int16 *)(v9 + v8 * 2);
      int v11 = (unsigned __int16)word_2163793B8[v8];
      BOOL result = v11 == v10;
    }
    while (v11 == v10 && v8++ != 2);
  }
  else
  {
    return 0;
  }
  return result;
}

BOOL sub_2161C09E0(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 72) <= a2 && *(unsigned __int16 *)(a1 + 74) >= a2) {
    return 1;
  }
  uint64_t v2 = &off_264269960 + 2 * word_216372A0A[7 * a2];
  uint64_t v3 = v2[1];
  if (v3 == (void *)3)
  {
    uint64_t v5 = 0;
    while (word_2163793E0[v5] == *(_WORD *)((char *)*v2 + v5 * 2))
    {
      if (++v5 == 3) {
        return 1;
      }
    }
    int v4 = 1;
    goto LABEL_13;
  }
  if (v3 == (void *)2 && *(_WORD *)*v2 == 21103 && *((unsigned __int16 *)*v2 + 1) == 35422) {
    return 1;
  }
  int v4 = 0;
LABEL_13:
  BOOL v6 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * a2 + 1]);
  BOOL v7 = (void *)v6[1];
  if (v7 == (void *)4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *v6;
    while (word_2163793F0[v10] == *(_WORD *)(v11 + v10 * 2))
    {
      if (++v10 == 4) {
        return 1;
      }
    }
  }
  else if (v7 == (void *)3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *v6;
    while (word_2163793E8[v8] == *(_WORD *)(v9 + v8 * 2))
    {
      if (++v8 == 3) {
        return 1;
      }
    }
  }
  if (!v4) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *v2;
  while (word_2163793FA[v12] == v13[v12])
  {
    if (++v12 == 3) {
      return 1;
    }
  }
  uint64_t v15 = 0;
  do
  {
    int v16 = (unsigned __int16)v13[v15];
    int v17 = (unsigned __int16)word_216379402[v15];
    BOOL result = v17 == v16;
  }
  while (v17 == v16 && v15++ != 2);
  return result;
}

BOOL sub_2161C0B80(uint64_t a1, __int16 a2)
{
  __int16 __key = a2;
  return bsearch(&__key, *(const void **)(a1 + 16), *(void *)(a1 + 24), 2uLL, (int (__cdecl *)(const void *, const void *))sub_2161C0BC8) != 0;
}

uint64_t sub_2161C0BC8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_2161C0BE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v36 = 0;
  sub_216128C80((uint64_t)&v31);
  uint64_t v9 = (void *)std::ostream::operator<<();
  LOBYTE(__p) = 44;
  sub_216129E78(v9, (uint64_t)&__p, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  sub_216129E78(v10, (uint64_t)"\t", 1);
  sub_216178BC0((uint64_t)v32, &__p);
  if (v26 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_2160F6FDC((void *)(a1 + 8), (uint64_t)p_p);
  if (v26 < 0) {
    operator delete(__p);
  }
  __int16 v35 = 0;
  do
  {
    sub_2161C10C8(&__p, a1, a4, &v35);
    if (!__p) {
      break;
    }
    float v30 = __p;
    (*(void (**)(uint64_t, void **, void, char *))(a5 + 16))(a5, &v30, v35, &v36);
    uint64_t v12 = v30;
    float v30 = 0;
    if (v12) {
      (*(void (**)(void *))(*(void *)v12 + 16))(v12);
    }
  }
  while (!v36);
  uint64_t v13 = MEMORY[0x263F8C2C8];
  if (a2)
  {
    sub_216128C80((uint64_t)&__p);
    uint64_t v14 = (void *)std::ostream::operator<<();
    LOBYTE(v22[0]) = 44;
    sub_216129E78(v14, (uint64_t)v22, 1);
    uint64_t v15 = (void *)std::ostream::operator<<();
    sub_216129E78(v15, (uint64_t)"\t", 1);
    sub_216178BC0((uint64_t)&v25, v22);
    if (v23 >= 0) {
      int v16 = v22;
    }
    else {
      int v16 = (void **)v22[0];
    }
    sub_2160F6FDC((void *)(a1 + 8), (uint64_t)v16);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    do
    {
      sub_2161C10C8(v22, a1, a4, &v35);
      if (!v22[0]) {
        break;
      }
      int v21 = v22[0];
      (*(void (**)(uint64_t, void **, void, char *))(a5 + 16))(a5, &v21, v35, &v36);
      int v17 = v21;
      int v21 = 0;
      if (v17) {
        (*(void (**)(void *))(*(void *)v17 + 16))(v17);
      }
    }
    while (!v36);
    unsigned int v18 = *(void **)v13;
    std::string __p = *(void **)v13;
    int v19 = *(void **)(v13 + 24);
    *(void **)((char *)&__p + *((void *)__p - 3)) = v19;
    uint64_t v25 = MEMORY[0x263F8C318] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166CA750](&v29);
  }
  else
  {
    unsigned int v18 = (void *)*MEMORY[0x263F8C2C8];
    int v19 = *(void **)(MEMORY[0x263F8C2C8] + 24);
  }
  int v31 = v18;
  *(void *)((char *)&v32[-1] + *(v18 - 3)) = v19;
  v32[0] = MEMORY[0x263F8C318] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166CA750](&v34);
}

void sub_2161C0FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_21613EA7C((uint64_t)&a16);
  sub_21613EA7C((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_2161C10C8(void *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (sub_216105CFC((uint64_t *)a2, a2 + 8))
  {
    sub_21612F5FC(__dst, *(void **)(a2 + 32), *(unsigned int *)(a2 + 40));
    if (v22 >= 0) {
      BOOL v7 = __dst;
    }
    else {
      BOOL v7 = (void **)__dst[0];
    }
    strncpy(*(char **)(a2 + 56), (const char *)v7, 0x80uLL);
    uint64_t v26 = 0;
    int v27 = 0;
    char v28 = 0;
    uint64_t v8 = *(const char **)(a2 + 56);
    size_t v9 = strlen(v8);
    uint64_t v10 = 0;
    uint64_t v11 = &v8[v9];
    uint64_t v12 = (const char **)&v26;
    while (v8 != v11)
    {
      uint64_t v13 = v8;
      while (*v13 != 9)
      {
        if (++v13 == v11) {
          goto LABEL_15;
        }
      }
      const char *v13 = 0;
      *v12++ = v8;
      ++v10;
      uint64_t v8 = v13 + 1;
      if (v10 == 3) {
        goto LABEL_16;
      }
    }
    uint64_t v8 = v11;
LABEL_15:
    const char *v11 = 0;
    *uint64_t v12 = v8;
    if (v10 == 2)
    {
LABEL_16:
      *a4 = atoi(v27);
      strncpy(*(char **)(a2 + 64), v28, 0x80uLL);
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)cStr = 0u;
      *(_OWORD *)char v23 = 0u;
      uint64_t v14 = *(const char **)(a2 + 64);
      size_t v15 = strlen(v14);
      uint64_t v16 = 0;
      int v17 = &v14[v15];
      unsigned int v18 = v23;
      while (v14 != v17)
      {
        int v19 = v14;
        while (*v19 != 44)
        {
          if (++v19 == v17) {
            goto LABEL_25;
          }
        }
        *int v19 = 0;
        *v18++ = (char *)v14;
        ++v16;
        uint64_t v14 = v19 + 1;
        if (v16 == 6) {
          goto LABEL_26;
        }
      }
      uint64_t v14 = v17;
LABEL_25:
      *int v17 = 0;
      *unsigned int v18 = (char *)v14;
      if (v16 == 5)
      {
LABEL_26:
        uint64_t v20 = 0;
        sub_2161E1EDC(cStr[1]);
      }
    }
    *a1 = 0;
    if (v22 < 0) {
      operator delete(__dst[0]);
    }
  }
  else
  {
    *a1 = 0;
  }
}

void sub_2161C140C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x2166CA800](v26, 0x10F3C4074548AAFLL);
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    MEMORY[0x2166CA7C0](a16, 0x1000C80BDFB0063);
  }
  if (a18) {
    MEMORY[0x2166CA7C0](a18, 0x1000C80BDFB0063);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    void *v25 = 0;
    __cxa_end_catch();
    JUMPOUT(0x2161C13D0);
  }
  _Unwind_Resume(a1);
}

void sub_2161C14F0(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  unint64_t v3 = *(void *)(a1 + 16);
  BOOL v4 = *(_WORD **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    BOOL v6 = *(_WORD **)a1;
    uint64_t v7 = (uint64_t)v4 - *(void *)a1;
    if (v7 <= -3) {
      sub_21610CB04();
    }
    uint64_t v8 = v7 >> 1;
    unint64_t v9 = v3 - (void)v6;
    if (v9 <= (v7 >> 1) + 1) {
      unint64_t v10 = v8 + 1;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = (char *)sub_21610FD44(v2, v11);
      BOOL v6 = *(_WORD **)a1;
      BOOL v4 = *(_WORD **)(a1 + 8);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[2 * v8];
    uint64_t v14 = &v12[2 * v11];
    *(_WORD *)uint64_t v13 = 32;
    BOOL v5 = v13 + 2;
    while (v4 != v6)
    {
      __int16 v15 = *--v4;
      *((_WORD *)v13 - 1) = v15;
      v13 -= 2;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v5;
    *(void *)(a1 + 16) = v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *BOOL v4 = 32;
    BOOL v5 = v4 + 1;
  }
  unint64_t v16 = *(void *)(a1 + 40);
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = v5;
  unint64_t v17 = *(void *)(a1 + 32);
  if (v17 >= v16)
  {
    uint64_t v19 = *(void *)(a1 + 24);
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v19) >> 3);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0x666666666666666) {
      sub_21618B344();
    }
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v19) >> 3);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x333333333333333) {
      unint64_t v23 = 0x666666666666666;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23) {
      uint64_t v24 = (char *)sub_21618B4A8(a1 + 40, v23);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = &v24[40 * v20];
    uint64_t v26 = &v24[40 * v23];
    *(void *)uint64_t v25 = 0;
    *((void *)v25 + 1) = 0;
    *((void *)v25 + 2) = 0;
    *((_DWORD *)v25 + 6) = 65537;
    *((_WORD *)v25 + 14) = 1;
    *(void *)(v25 + 3sub_216195B94(&qword_26797EF28, 0) = 0;
    *((_WORD *)v25 + 19) = 0;
    unsigned int v18 = v25 + 40;
    char v28 = *(char **)(a1 + 24);
    int v27 = *(char **)(a1 + 32);
    if (v27 != v28)
    {
      do
      {
        long long v29 = *(_OWORD *)(v27 - 40);
        long long v30 = *(_OWORD *)(v27 - 24);
        *((void *)v25 - 1) = *((void *)v27 - 1);
        *(_OWORD *)(v25 - 24) = v30;
        *(_OWORD *)(v25 - 4sub_216195B94(&qword_26797EF28, 0) = v29;
        v25 -= 40;
        v27 -= 40;
      }
      while (v27 != v28);
      int v27 = *(char **)(a1 + 24);
    }
    *(void *)(a1 + 24) = v25;
    *(void *)(a1 + 32) = v18;
    *(void *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = v26;
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    *(void *)unint64_t v17 = 0;
    *(void *)(v17 + ++**(_DWORD **)(result + 8) = 0;
    *(void *)(v17 + 16) = 0;
    *(_DWORD *)(v17 + 24) = 65537;
    *(_WORD *)(v17 + 2++**(_DWORD **)(result + 8) = 1;
    *(void *)(v17 + 3sub_216195B94(&qword_26797EF28, 0) = 0;
    unsigned int v18 = (char *)(v17 + 40);
    *(_WORD *)(v17 + 3++**(_DWORD **)(result + 8) = 0;
  }
  *(void *)(a1 + 32) = v18;
}

void sub_2161C16FC(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_2162D1CE4(4u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v3 = CFStringCreateWithCharacters(0, *(const UniChar **)a1, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1);
    BOOL v4 = sub_2162D1CE4(4u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 138412290;
      unint64_t v8 = (unint64_t)v3;
      _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "History: [%@]", buf, 0xCu);
    }
    BOOL v5 = sub_2162D1CE4(4u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
      *(_DWORD *)int buf = 134217984;
      unint64_t v8 = v6;
      _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "History: [%zu words]", buf, 0xCu);
      if (!v3) {
        return;
      }
    }
    else if (!v3)
    {
      return;
    }
    CFRelease(v3);
  }
}

void sub_2161C1850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2161C187C(char *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t)result;
    int v4 = *(char *)(a2 + 55);
    BOOL v5 = v4 < 0;
    if (v4 >= 0) {
      unint64_t v6 = (_WORD *)(a2 + 32);
    }
    else {
      unint64_t v6 = *(_WORD **)(a2 + 32);
    }
    uint64_t v7 = *(unsigned __int8 *)(a2 + 55);
    if (v5) {
      uint64_t v7 = *(void *)(a2 + 40);
    }
    sub_2161BF794(v6, &v6[v7], v3);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
    uint64_t v9 = *(char **)v8;
    uint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
    return sub_2161C1940((char *)(v3 + 24), v9, v10);
  }
  return result;
}

char *sub_2161C1940(char *result, char *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    uint64_t v5 = (uint64_t)result;
    sub_2161C1AC0((void **)result, a3 - 0x3333333333333333 * ((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3));
    uint64_t v6 = *(void *)(v5 + 8);
    return sub_2161C1BB4(v5, v6, a2, &a2[40 * a3], a3);
  }
  return result;
}

void sub_2161C19CC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = *(void *)a1;
    *(void *)(a1 + 32) = *(void *)(a1 + 24);
    CFArrayRef v4 = *(const __CFArray **)(a2 + 16);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0; i != v6; ++i)
        {
          uint64_t v8 = (void *)sub_21628F0D0(a2, i);
          uint64_t v11 = sub_2161F3B4C(v8, v9, v10);
          if (v11) {
            uint64_t v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6B9DC8, 0);
          }
          else {
            uint64_t v12 = 0;
          }
          sub_2161C187C((char *)a1, (uint64_t)v12);
        }
      }
    }
    sub_2161C16FC(a1);
  }
}

void sub_2161C1AC0(void **a1, unint64_t a2)
{
  CFArrayRef v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      sub_21618B344();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 40;
    CFIndex v6 = (char *)sub_21618B4A8(v3, a2);
    uint64_t v7 = &v6[40 * v5];
    uint64_t v9 = &v6[40 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 40);
        long long v14 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 4sub_216195B94(&qword_26797EF28, 0) = v13;
        v12 -= 40;
        v10 -= 40;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

char *sub_2161C1BB4(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0x666666666666666) {
      sub_21618B344();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x333333333333333) {
      unint64_t v18 = 0x666666666666666;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v39 = v9;
    if (v18) {
      uint64_t v19 = (char *)sub_21618B4A8(v9, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    long long v29 = &v19[40 * v15];
    std::string __p = v19;
    char v36 = v29;
    uint64_t v38 = &v19[40 * v18];
    long long v30 = &v29[40 * a5];
    uint64_t v31 = 40 * a5;
    do
    {
      long long v32 = *(_OWORD *)v7;
      long long v33 = *((_OWORD *)v7 + 1);
      *((void *)v29 + 4) = *((void *)v7 + 4);
      *(_OWORD *)long long v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 40;
      v7 += 40;
      v31 -= 40;
    }
    while (v31);
    int v37 = v30;
    uint64_t v5 = (char *)sub_2161C1E58((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36) {
      int v37 = &v36[(v37 - v36 - 40) % 0x28uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    unint64_t v21 = &__src[40 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[40 * a5];
    uint64_t v25 = &v23[-40 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 1);
        *((void *)v26 + 4) = *((void *)v25 + 4);
        *(_OWORD *)uint64_t v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v25 += 40;
        v26 += 40;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[40 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_2161C1E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161C1E58(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  CFIndex v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 40);
      long long v11 = *(_OWORD *)(v8 - 24);
      uint64_t v7 = (void *)(v9 - 40);
      *(void *)(v9 - ++**(_DWORD **)(result + 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v11;
      *(_OWORD *)(v9 - 4sub_216195B94(&qword_26797EF28, 0) = v10;
      v8 -= 40;
      v9 -= 40;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + ++**(_DWORD **)(result + 8) = v7;
  unint64_t v12 = a1[1];
  uint64_t v13 = *(void *)(a2 + 16);
  int64_t v14 = v12 - __src;
  if (v12 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v12 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v13 + v14;
  unint64_t v15 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + ++**(_DWORD **)(result + 8) = v15;
  unint64_t v16 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v16;
  uint64_t v17 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v17;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_2161C1F40(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2] - v3;
  unint64_t v5 = a1[5];
  if (v5 >= v4 >> 4) {
LABEL_5:
  }
    operator new[]();
  uint64_t v6 = v4 >> 4;
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(v3 + 16 * v5 + 8);
  while ((unint64_t)(v7 + a2) >= *(v8 - 1))
  {
    uint64_t v7 = 0;
    ++v5;
    a1[4] = 0;
    a1[5] = v5;
    v8 += 2;
    if (v6 == v5) {
      goto LABEL_5;
    }
  }
  uint64_t result = *v8 + v7;
  a1[4] = v7 + a2;
  return result;
}

uint64_t sub_2161C20E0(uint64_t a1, unint64_t a2)
{
  *(void *)&v11[63] = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v2 = 0;
  do
  {
    v11[v2++ - 1] = (a2 % 0xA) | 0x30;
    BOOL v3 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v3);
  if (v2)
  {
    uint64_t v4 = &v11[v2 - 1];
  }
  else
  {
LABEL_6:
    uint64_t v4 = v11;
    char __s = 48;
  }
  *uint64_t v4 = 0;
  unint64_t v5 = v4 - 1;
  if (v4 != &__s && v4 - 1 > &__s)
  {
    uint64_t v6 = v11;
    do
    {
      char v7 = *(v6 - 1);
      *(v6 - 1) = *v5;
      *v5-- = v7;
    }
    while (v6++ < v5);
  }
  return sub_2161C9E7C(a1, &__s);
}

void *sub_2161C21D4(void *a1)
{
  *a1 = &unk_26C6C50F8;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x10C80436913F5);
  }
  return a1;
}

void sub_2161C2230(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  void v16[2] = *MEMORY[0x263EF8340];
  sub_21610B834(v13, a2);
  if ((a4 & 1) != 0 || (void **)(a1 + 16) == sub_216178FA4(a1 + 8, v13))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21610A674(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a3;
      __p[2] = *(void **)(a3 + 16);
    }
    char v7 = __p[0];
    v16[0] = __p[1];
    *(void **)((char *)v16 + 7) = *(void **)((char *)&__p[1] + 7);
    char v8 = HIBYTE(__p[2]);
    memset(__p, 0, 24);
    unint64_t v15 = v13;
    uint64_t v9 = sub_2161C2518((uint64_t **)(a1 + 8), v13, (uint64_t)&unk_21636EABA, (long long **)&v15);
    long long v10 = v9;
    if (*((char *)v9 + 79) < 0) {
      operator delete((void *)v9[7]);
    }
    uint64_t v11 = v16[0];
    v10[7] = (uint64_t)v7;
    v10[8] = v11;
    *(uint64_t *)((char *)v10 + 71) = *(void *)((char *)v16 + 7);
    *((unsigned char *)v10 + 79) = v8;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
}

void sub_2161C2368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161C23B8(void *a1)
{
  *a1 = &unk_26C6C4FD0;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (char *)a1[1];
  BOOL v3 = (char *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (*(void *)&v2[16 * v5 + 8])
    {
      MEMORY[0x2166CA7C0](*(void *)&v2[16 * v5 + 8], 0x1000C8077774924);
      unint64_t v5 = a1[5];
      uint64_t v2 = (char *)a1[1];
      BOOL v3 = (char *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < (v3 - v2) >> 4);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2161C2464(void *a1)
{
  sub_2161C23B8(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2161C249C(void *a1)
{
  *a1 = &unk_26C6C50F8;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x10C80436913F5);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t *sub_2161C2518(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21619458C((uint64_t)a1, &v11, a2);
  char v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    sub_2161C25C4((uint64_t)a1, a4, (uint64_t)v10);
    sub_21612A650(a1, v11, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    sub_2161C265C((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_2161C25C4@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + ++**(_DWORD **)(result + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  char v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_21610A674(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  void v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2161C2644(_Unwind_Exception *a1)
{
  sub_2161C265C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_2161C265C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21619E14C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

BOOL sub_2161C26B4(uint64_t a1, char *a2, char *a3)
{
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  uint64_t v5 = sub_2161C2734(a2);
  uint64_t v6 = sub_2161C2734(a3);
  if (!strcmp(v5, v6)) {
    return 1;
  }
  uint64_t v7 = MEMORY[0x2166CAD70](v6, v5);
  BOOL result = v7 != -1;
  if (v7 == -1) {
    uint64_t v7 = 0;
  }
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = v7;
  return result;
}

const char *sub_2161C2734(char *a1)
{
  unsigned int v2 = sub_2161CB588(a1);
  if (v2 < 6) {
    return off_26426B6E0[v2];
  }
  uint64_t v4 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"charset ", 8);
  size_t v5 = strlen(a1);
  uint64_t v6 = sub_216129E78(v4, (uint64_t)a1, v5);
  sub_216129E78(v6, (uint64_t)" is not defined, use EUC-JP", 27);
  return "EUC-JP";
}

uint64_t sub_2161C27BC(uint64_t a1, std::string *a2)
{
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!a2->__r_.__value_.__l.__size_) {
      return 1;
    }
  }
  else if (!*((unsigned char *)&a2->__r_.__value_.__s + 23))
  {
    return 1;
  }
  if (!*(void *)(a1 + 8)) {
    return 1;
  }
  if ((size & 0x80) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  int64_t v5 = 4 * size;
  uint64_t v13 = 4 * size;
  std::string::size_type v14 = size;
  memset(&v12, 0, sizeof(v12));
  std::string::reserve(&v12, 4 * size);
  uint64_t v6 = a2;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  uint64_t v11 = v6;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v12;
  }
  else {
    uint64_t v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  long long v10 = v7;
  if (v5 >= 1) {
    bzero(v7, v5);
  }
  MEMORY[0x2166CAD50](*(void *)(a1 + 8), 0, &v14, 0, &v13);
  while (1)
  {
    BOOL v8 = v14 == 0;
    if (!v14) {
      break;
    }
    if (MEMORY[0x2166CAD50](*(void *)(a1 + 8), &v11, &v14, &v10, &v13) == -1) {
      goto LABEL_21;
    }
  }
  sub_2161B44A8(a2, (const std::string::value_type *)v7, v5 - v13);
LABEL_21:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_2161C2900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161C2924(void *a1)
{
  *a1 = &unk_26C6C5220;
  if (a1[1]) {
    MEMORY[0x2166CAD60]();
  }
  return a1;
}

void sub_2161C2978(void *a1)
{
  sub_2161C2924(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161C29B0(void *a1, unsigned char *a2, __CFString *a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v12 = a1[16];
  if (v12 >= CFArrayGetCount(*(CFArrayRef *)(a1[1] + 32)) || !sub_2161C2B28((uint64_t)a1)) {
    return 0;
  }
  if ((a2[32] & 0x10) != 0)
  {
    unint64_t v16 = (__CFString *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a4, a5);
    uint64_t v17 = (__CFString *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a4, a5);
    unint64_t v18 = v17;
    if (v16) {
      BOOL v19 = v17 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v15 = 0;
      if (!v16) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v20 = sub_216299C10(a1[14], a3, v16, v17, a6);
    }
    CFRelease(v16);
    uint64_t v15 = v20;
LABEL_16:
    if (v18) {
      CFRelease(v18);
    }
    return v15;
  }
  uint64_t v13 = a1[14];

  return sub_216299C10(v13, a3, 0, 0, a6);
}

BOOL sub_2161C2B28(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 72);
  if (v1 == *(void **)(a1 + 80)) {
    return 0;
  }
  uint64_t v3 = *v1;
  if ((*(unsigned int (**)(void))(*(void *)*v1 + 72))(*v1) == 5) {
    return *(unsigned char *)(a1 + 144) != 0;
  }
  else {
    return ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(v3) & 0x100) == 0;
  }
}

uint64_t sub_2161C2BD0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 12++**(_DWORD **)(result + 8) = a2;
  return result;
}

unint64_t sub_2161C2BD8(void *a1)
{
  unint64_t v2 = a1[16];
  unint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1[1] + 32));
  if (v2 < result) {
    a1[17] = (uint64_t)(a1[7] - a1[6]) >> 2;
  }
  return result;
}

BOOL sub_2161C2C20(void *a1)
{
  unint64_t v2 = a1[16];
  return v2 < CFArrayGetCount(*(CFArrayRef *)(a1[1] + 32))
      || (unint64_t)(((uint64_t)(a1[7] - a1[6]) >> 2) - a1[17]) < a1[15];
}

void sub_2161C2C84(uint64_t a1)
{
  sub_2163073E4(a1);

  JUMPOUT(0x2166CA800);
}

BOOL sub_2161C2CBC(uint64_t a1)
{
  return *(void *)(a1 + 56) == *(void *)(a1 + 48);
}

void sub_2161C2CCC(uint64_t a1, void *a2, double a3)
{
  uint64_t v4 = a1 + 32;
  uint64_t v3 = *(void *)(a1 + 32);
  *(_DWORD *)(a1 + 7) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = v3;
  int64_t v5 = (void **)(a1 + 56);
  uint64_t v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 64) = v6;
  *(double *)(a1 + 16) = a3;
  if (a2)
  {
    uint64_t v7 = a2;
    uint64_t v46 = a1 + 72;
    do
    {
      uint64_t v9 = *v7;
      if ((*(_DWORD *)(*v7 + 8) - 1) >= 2)
      {
        long long v10 = *(void **)(v9 + 16);
        uint64_t v11 = (void *)*v10;
        if (*v10)
        {
          uint64_t v45 = *v7;
          uint64_t v12 = v11[1] - 1;
          if (v12 >= 0)
          {
            uint64_t v13 = v11[2];
            uint64_t v14 = v11[4];
            do
            {
              sub_2161C2FA0(v4, *(char **)(a1 + 32), (char *)(v13 + 2 * v12));
              uint64_t v15 = *(unsigned __int8 *)(v14 + 4 * v12 + 1);
              uint64_t v17 = *(char **)(a1 + 64);
              unint64_t v16 = *(void *)(a1 + 72);
              if ((unint64_t)v17 >= v16)
              {
                unint64_t v18 = (char *)*v5;
                uint64_t v19 = (v17 - (unsigned char *)*v5) >> 3;
                unint64_t v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 61) {
                  goto LABEL_54;
                }
                uint64_t v21 = v16 - (void)v18;
                if (v21 >> 2 > v20) {
                  unint64_t v20 = v21 >> 2;
                }
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v22 = v20;
                }
                if (v22)
                {
                  unint64_t v23 = (char *)sub_2160FFAA8(v46, v22);
                  unint64_t v18 = *(char **)(a1 + 56);
                  uint64_t v17 = *(char **)(a1 + 64);
                }
                else
                {
                  unint64_t v23 = 0;
                }
                uint64_t v24 = &v23[8 * v19];
                *(void *)uint64_t v24 = v15;
                uint64_t v6 = v24 + 8;
                while (v17 != v18)
                {
                  uint64_t v25 = *((void *)v17 - 1);
                  v17 -= 8;
                  *((void *)v24 - 1) = v25;
                  v24 -= 8;
                }
                *(void *)(a1 + 56) = v24;
                *(void *)(a1 + 64) = v6;
                *(void *)(a1 + 72) = &v23[8 * v22];
                if (v18) {
                  operator delete(v18);
                }
              }
              else
              {
                *(void *)uint64_t v17 = v15;
                uint64_t v6 = v17 + 8;
              }
              *(void *)(a1 + 64) = v6;
            }
            while (v12-- > 0);
          }
          uint64_t v27 = v11[5];
          if ((v27 & 1) == 0) {
            *(unsigned char *)(a1 + 9) = 1;
          }
          uint64_t v9 = v45;
          if ((v27 & 0x10) != 0) {
            *(unsigned char *)(a1 + ++**(_DWORD **)(result + 8) = 1;
          }
        }
        else
        {
          sub_2161C2FA0(v4, *(char **)(a1 + 32), byte_21637A672);
          uint64_t v28 = v10[2];
          long long v30 = *(char **)(a1 + 64);
          unint64_t v29 = *(void *)(a1 + 72);
          if ((unint64_t)v30 >= v29)
          {
            uint64_t v31 = (char *)*v5;
            uint64_t v32 = (v30 - (unsigned char *)*v5) >> 3;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61) {
LABEL_54:
            }
              sub_21610CB04();
            uint64_t v34 = v29 - (void)v31;
            if (v34 >> 2 > v33) {
              unint64_t v33 = v34 >> 2;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              char v36 = (char *)sub_2160FFAA8(v46, v35);
              uint64_t v31 = *(char **)(a1 + 56);
              long long v30 = *(char **)(a1 + 64);
            }
            else
            {
              char v36 = 0;
            }
            int v37 = &v36[8 * v32];
            *(void *)int v37 = v28;
            uint64_t v6 = v37 + 8;
            while (v30 != v31)
            {
              uint64_t v38 = *((void *)v30 - 1);
              v30 -= 8;
              *((void *)v37 - 1) = v38;
              v37 -= 8;
            }
            *(void *)(a1 + 56) = v37;
            *(void *)(a1 + 64) = v6;
            *(void *)(a1 + 72) = &v36[8 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(void *)long long v30 = v28;
            uint64_t v6 = v30 + 8;
          }
          *(void *)(a1 + 64) = v6;
          *(unsigned char *)(a1 + 1sub_216195B94(&qword_26797EF28, 0) = 1;
        }
        *(void *)(a1 + 24) = v9;
        ++*(void *)a1;
      }
      uint64_t v7 = (void *)v7[1];
    }
    while (v7);
    uint64_t v39 = *v5;
  }
  else
  {
    uint64_t v39 = v6;
  }
  unint64_t v40 = (char *)v6 - v39;
  if ((char *)v6 - v39 >= 9)
  {
    unint64_t v41 = v40 >> 3;
    uint64_t v42 = *(void *)&v39[(v40 & 0xFFFFFFFFFFFFFFF8) - 8];
    double v43 = v39 - 16;
    do
    {
      v42 += *(void *)&v43[8 * v41];
      *(void *)&v43[8 * v41] = v42;
      uint64_t v44 = v41 - 2;
      --v41;
    }
    while (v44 > 0);
  }
}

char *sub_2161C2FA0(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    uint64_t v14 = (uint64_t)&v6[-*(void *)a1];
    if (v14 <= -3) {
      sub_21610CB04();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 1;
    uint64_t v17 = v14 >> 1;
    unint64_t v18 = v7 - (void)v13;
    if (v18 <= v17 + 1) {
      unint64_t v19 = v17 + 1;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v18 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v19;
    }
    uint64_t v32 = a1 + 16;
    if (v20) {
      uint64_t v21 = (char *)sub_21610FD44(a1 + 16, v20);
    }
    else {
      uint64_t v21 = 0;
    }
    unint64_t v22 = &v21[2 * v16];
    std::string __p = v21;
    unint64_t v29 = v22;
    long long v30 = v22;
    uint64_t v31 = &v21[2 * v20];
    if (v16 == v20)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = v4 - v13;
        }
        uint64_t v25 = (char *)sub_21610FD44(v8, v24);
        unint64_t v22 = &v25[2 * (v24 >> 2)];
        std::string __p = v25;
        unint64_t v29 = v22;
        uint64_t v31 = &v25[2 * v26];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        uint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          uint64_t v23 = v16 + 1;
        }
        v22 -= v23 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v29 = v22;
      }
    }
    *(_WORD *)unint64_t v22 = *(_WORD *)v3;
    long long v30 = v22 + 2;
    uint64_t v4 = sub_216185DE0((void **)a1, (uint64_t)&__p, v4);
    if (v30 != v29) {
      v30 += (v29 - v30 + 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_WORD *)__src = *(_WORD *)a3;
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = __src + 2;
  }
  else
  {
    uint64_t v9 = __src + 2;
    long long v10 = v6 - 2;
    uint64_t v11 = *(_WORD **)(a1 + 8);
    while (v10 < v6)
    {
      __int16 v12 = *(_WORD *)v10;
      v10 += 2;
      *v11++ = v12;
    }
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-2 * ((v6 - v9) >> 1)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 2 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_WORD *)uint64_t v4 = *(_WORD *)v3;
  }
  return v4;
}

void sub_2161C31A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161C31DC(void *result, uint64_t a2)
{
  uint64_t v3 = (char **)result;
  unint64_t v4 = result[2];
  unint64_t v5 = result[1];
  if (v5 >= v4)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *result) >> 4);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x555555555555555) {
      sub_21610CB04();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *result) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v9 = 0x555555555555555;
    }
    uint64_t v23 = result + 2;
    if (v9 > 0x555555555555555) {
      sub_2160FFA74();
    }
    uint64_t v11 = 3 * v9;
    __int16 v12 = (char *)operator new(48 * v9);
    uint64_t v13 = &v12[48 * v8];
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
    *((_OWORD *)v13 + 1) = v14;
    *((void *)v13 + 4) = *(void *)(a2 + 32);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *((void *)v13 + 5) = *(void *)(a2 + 40);
    unint64_t v7 = v13 + 48;
    uint64_t v15 = *v3;
    unint64_t v16 = (unint64_t)v3[1];
    if ((char *)v16 == *v3)
    {
      int64x2_t v18 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        *((_OWORD *)v13 - 3) = *(_OWORD *)(v16 - 48);
        long long v17 = *(_OWORD *)(v16 - 32);
        *((void *)v13 - 2) = *(void *)(v16 - 16);
        *((_OWORD *)v13 - 2) = v17;
        *(void *)(v16 - 24) = 0;
        *(void *)(v16 - 16) = 0;
        *(void *)(v16 - 32) = 0;
        *((void *)v13 - 1) = *(void *)(v16 - 8);
        v13 -= 48;
        v16 -= 48;
      }
      while ((char *)v16 != v15);
      int64x2_t v18 = *(int64x2_t *)v3;
    }
    char *v3 = v13;
    v3[1] = v7;
    int64x2_t v21 = v18;
    unint64_t v19 = v3[2];
    v3[2] = &v12[16 * v11];
    unint64_t v22 = v19;
    uint64_t v20 = v18.i64[0];
    unint64_t result = (void *)sub_2161C4F3C((uint64_t)&v20);
  }
  else
  {
    *(_OWORD *)unint64_t v5 = *(_OWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    *(void *)(v5 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(v5 + 16) = v6;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(v5 + 4sub_216195B94(&qword_26797EF28, 0) = *(void *)(a2 + 40);
    unint64_t v7 = (char *)(v5 + 48);
  }
  v3[1] = v7;
  return result;
}

uint64_t sub_2161C3370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char **a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = &unk_26C6BE8C8;
  *(void *)(a8 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a8 + 16) = 0;
  *(void *)(a8 + 24) = 0;
  *(unsigned char *)(a8 + 32) = 0;
  return sub_2161C3410(a1, a8, a2, a3, a4, a5, a6, a7);
}

void sub_2161C33F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = v12;
  void *v10 = v11;
  a10 = v13;
  sub_2161C4FA0(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2161C3410(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, char **a7, void *a8)
{
  uint64_t v284 = *MEMORY[0x263EF8340];
  uint64_t v262 = (UniChar *)a3;
  unint64_t v263 = a4;
  uint64_t v11 = a2 + 8;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  sub_2162E0CB0(v11, v12 + a4);
  long long v259 = 0u;
  long long v260 = 0u;
  int v261 = 1065353216;
  unint64_t v258 = 0;
  sub_216183E18((uint64_t *)&v262, &v258, (uint64_t)&v259, 0, v256);
  unint64_t v13 = v257;
  if ((v257 & 0x80u) == 0) {
    long long v14 = v256;
  }
  else {
    long long v14 = (void **)v256[0];
  }
  if ((v257 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)v256[1];
  }
  if (!v14) {
    unint64_t v13 = 0;
  }
  unint64_t v245 = v13;
  v246 = (UniChar *)v14;
  uint64_t v15 = v262;
  unint64_t v16 = v263;
  unint64_t v17 = v258;
  int64x2_t v18 = sub_2162D1CE4(5u);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
    CFStringRef v21 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v15, v16, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
    v281[0] = v21;
    CFStringRef v22 = CFStringCreateWithCharactersNoCopy(v19, v246, v245, v20);
    *(void *)&long long v264 = v22;
    uint64_t v23 = sub_2162D1CE4(5u);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 138413058;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v22;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = a5 & 0x1E;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = a5 & 1;
      _os_log_debug_impl(&dword_2160F5000, v23, OS_LOG_TYPE_DEBUG, "[TSC::generateReplacements] string:%@ converted:%@ non-geometric:%d, endingIncompleteRomaji: %d", buf, 0x22u);
      if (!v22)
      {
LABEL_12:
        if (v21) {
          CFRelease(v21);
        }
        goto LABEL_14;
      }
    }
    else if (!v22)
    {
      goto LABEL_12;
    }
    CFRelease(v22);
    goto LABEL_12;
  }
LABEL_14:
  sub_21617FAAC(&__dst, v15, v16);
  uint64_t v242 = v12;
  uint64_t v243 = a2;
  v241 = a8;
  sub_21617FAAC(&__p, v246, v245);
  unint64_t v252 = v17;
  int64x2_t v254 = 0uLL;
  v255[0] = 0;
  long long v264 = 0u;
  long long v265 = 0u;
  float v266 = 1.0;
  unint64_t v24 = (void *)v260;
  if ((void)v260)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    do
    {
      uint64_t v28 = v24[2];
      unint64_t v27 = v24[3];
      if (v26)
      {
        uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          unint64_t v17 = v24[3];
          if (v26 <= v27) {
            unint64_t v17 = v27 % v26;
          }
        }
        else
        {
          unint64_t v17 = v27 & (v26 - 1);
        }
        long long v30 = *(void **)(v264 + 8 * v17);
        if (v30)
        {
          for (CFIndex i = (void *)*v30; i; CFIndex i = (void *)*i)
          {
            unint64_t v32 = i[1];
            if (v32 == v27)
            {
              if (i[2] == v27) {
                goto LABEL_54;
              }
            }
            else
            {
              if (v29.u32[0] > 1uLL)
              {
                if (v32 >= v26) {
                  v32 %= v26;
                }
              }
              else
              {
                v32 &= v26 - 1;
              }
              if (v32 != v17) {
                break;
              }
            }
          }
        }
      }
      unint64_t v16 = (unint64_t)operator new(0x20uLL);
      *(void *)unint64_t v16 = 0;
      *(void *)(v16 + ++**(_DWORD **)(result + 8) = v27;
      *(void *)(v16 + 16) = v27;
      *(void *)(v16 + 24) = v28;
      float v33 = (float)(unint64_t)(v25 + 1);
      if (!v26 || (float)(v266 * (float)v26) < v33)
      {
        BOOL v34 = (v26 & (v26 - 1)) != 0;
        if (v26 < 3) {
          BOOL v34 = 1;
        }
        unint64_t v35 = v34 | (2 * v26);
        unint64_t v36 = vcvtps_u32_f32(v33 / v266);
        if (v35 <= v36) {
          size_t v37 = v36;
        }
        else {
          size_t v37 = v35;
        }
        sub_2161297B4((uint64_t)&v264, v37);
        unint64_t v26 = *((void *)&v264 + 1);
        if ((*((void *)&v264 + 1) & (*((void *)&v264 + 1) - 1)) != 0)
        {
          if (*((void *)&v264 + 1) <= v27) {
            unint64_t v17 = v27 % *((void *)&v264 + 1);
          }
          else {
            unint64_t v17 = v27;
          }
        }
        else
        {
          unint64_t v17 = (*((void *)&v264 + 1) - 1) & v27;
        }
      }
      uint64_t v38 = v264;
      uint64_t v39 = *(unint64_t **)(v264 + 8 * v17);
      if (v39)
      {
        *(void *)unint64_t v16 = *v39;
      }
      else
      {
        *(void *)unint64_t v16 = v265;
        *(void *)&long long v265 = v16;
        *(void *)(v38 + 8 * v17) = &v265;
        if (!*(void *)v16) {
          goto LABEL_53;
        }
        unint64_t v40 = *(void *)(*(void *)v16 + 8);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v40 >= v26) {
            v40 %= v26;
          }
        }
        else
        {
          v40 &= v26 - 1;
        }
        uint64_t v39 = (unint64_t *)(v264 + 8 * v40);
      }
      unint64_t *v39 = v16;
LABEL_53:
      uint64_t v25 = ++*((void *)&v265 + 1);
LABEL_54:
      unint64_t v24 = (void *)*v24;
    }
    while (v24);
  }
  unint64_t v274 = 1;
  unint64_t v41 = v272;
  if ((v272 & 0x80u) != 0) {
    unint64_t v41 = v271;
  }
  if (v41)
  {
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    unint64_t v16 = (unint64_t)&buf[16];
    do
    {
      uint64_t v44 = sub_2161C554C(&v264, &v274);
      uint64_t v45 = v44;
      if (v44)
      {
        if ((v269 & 0x80u) == 0) {
          p_p = (char *)&__p;
        }
        else {
          p_p = (char *)__p;
        }
        sub_21617FAAC(&v277, &p_p[2 * v42], v44[3] - v42);
        *(void *)int buf = v43;
        *(void *)&uint8_t buf[8] = v274 - v43;
        if (SHIBYTE(v278) < 0)
        {
          sub_2161984AC(&buf[16], (void *)v277, *((unint64_t *)&v277 + 1));
        }
        else
        {
          *(_OWORD *)&buf[16] = v277;
          *(void *)&buf[32] = v278;
        }
        unint64_t v280 = 0;
        unint64_t v47 = v254.u64[1];
        unint64_t v48 = v255[0];
        if (v254.i64[1] >= v255[0])
        {
          uint64_t v50 = v254.i64[0];
          unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v254.i64[1] - v254.i64[0]) >> 4);
          unint64_t v52 = v51 + 1;
          if (v51 + 1 > 0x555555555555555) {
            sub_21610CB04();
          }
          if (0x5555555555555556 * ((v255[0] - v254.i64[0]) >> 4) > v52) {
            unint64_t v52 = 0x5555555555555556 * ((v255[0] - v254.i64[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v255[0] - v254.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v53 = 0x555555555555555;
          }
          else {
            unint64_t v53 = v52;
          }
          uint64_t v283 = v255;
          if (v53 > 0x555555555555555) {
            sub_2160FFA74();
          }
          BOOL v54 = (char *)operator new(48 * v53);
          int v55 = &v54[16 * ((v254.i64[1] - v254.i64[0]) >> 4)];
          long long v56 = *(_OWORD *)&buf[16];
          *(_OWORD *)int v55 = *(_OWORD *)buf;
          *((_OWORD *)v55 + 1) = v56;
          uint64_t v57 = *(void *)&buf[32];
          memset(&buf[16], 0, 24);
          *((void *)v55 + 4) = v57;
          *((void *)v55 + 5) = 0;
          if (v47 == v50)
          {
            int64x2_t v60 = vdupq_n_s64(v47);
            BOOL v58 = &v54[48 * v51];
          }
          else
          {
            BOOL v58 = &v54[48 * v51];
            do
            {
              *((_OWORD *)v58 - 3) = *(_OWORD *)(v47 - 48);
              long long v59 = *(_OWORD *)(v47 - 32);
              *((void *)v58 - 2) = *(void *)(v47 - 16);
              *((_OWORD *)v58 - 2) = v59;
              *(void *)(v47 - 24) = 0;
              *(void *)(v47 - 16) = 0;
              *(void *)(v47 - 32) = 0;
              *((void *)v58 - 1) = *(void *)(v47 - 8);
              v58 -= 48;
              v47 -= 48;
            }
            while (v47 != v50);
            int64x2_t v60 = v254;
            unint64_t v48 = v255[0];
          }
          int v61 = v55 + 48;
          v254.i64[0] = (uint64_t)v58;
          *(int64x2_t *)&v281[1] = v60;
          v255[0] = &v54[48 * v53];
          unint64_t v282 = v48;
          v281[0] = v60.i64[0];
          sub_2161C4F3C((uint64_t)v281);
          v254.i64[1] = (uint64_t)v61;
          if ((buf[39] & 0x80000000) != 0) {
            operator delete(*(void **)&buf[16]);
          }
        }
        else
        {
          *(_OWORD *)v254.i64[1] = *(_OWORD *)buf;
          long long v49 = *(_OWORD *)&buf[16];
          *(void *)(v47 + 32) = *(void *)&buf[32];
          *(_OWORD *)(v47 + 16) = v49;
          memset(&buf[16], 0, 24);
          *(void *)(v47 + 4sub_216195B94(&qword_26797EF28, 0) = v280;
          v254.i64[1] = v47 + 48;
        }
        unint64_t v43 = v274;
        uint64_t v42 = v45[3];
        if (SHIBYTE(v278) < 0) {
          operator delete((void *)v277);
        }
      }
      unint64_t v62 = ++v274;
      unint64_t v63 = v272;
      if ((v272 & 0x80u) != 0) {
        unint64_t v63 = v271;
      }
    }
    while (v62 <= v63);
  }
  long long v277 = 0uLL;
  v278 = 0;
  sub_216185B34((void **)&v277, 3uLL);
  unint64_t v64 = v269;
  if ((v269 & 0x80u) != 0) {
    unint64_t v64 = v268;
  }
  unint64_t v65 = v64 - v252;
  if ((a5 & 2) != 0) {
    unint64_t v66 = 0;
  }
  else {
    unint64_t v66 = v64 - v252;
  }
  if ((a5 & 1) == 0 || (unint64_t v65 = v64, v66 <= v64))
  {
    unint64_t v251 = v66;
    unint64_t v248 = v65;
    do
    {
      if (v66 == v65) {
        goto LABEL_108;
      }
      long long v67 = (unsigned __int16 *)&__p;
      if ((v269 & 0x80u) != 0) {
        long long v67 = (unsigned __int16 *)__p;
      }
      int v68 = v67[v66];
      if ((v68 & 0xFFFFFFDF) - 65 < 0x1A || v68 == 12435)
      {
        int v70 = v67[v66];
        if (v70 == 12435) {
          __int16 v71 = 110;
        }
        else {
          __int16 v71 = v70;
        }
        CFTypeRef v72 = (char *)*((void *)&v277 + 1);
        if (*((void *)&v277 + 1) >= (unint64_t)v278)
        {
          unint64_t v112 = (char *)v277;
          uint64_t v113 = *((void *)&v277 + 1) - v277;
          if ((uint64_t)(*((void *)&v277 + 1) - v277) <= -3) {
            sub_21610CB04();
          }
          uint64_t v114 = v113 >> 1;
          if ((unint64_t)&v278[-v277] <= (v113 >> 1) + 1) {
            uint64_t v115 = v114 + 1;
          }
          else {
            uint64_t v115 = (uint64_t)&v278[-v277];
          }
          if ((unint64_t)&v278[-v277] >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v116 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v116 = v115;
          }
          if (v116)
          {
            long long v117 = (char *)sub_21610FD44((uint64_t)&v278, v116);
            CFTypeRef v72 = (char *)*((void *)&v277 + 1);
            unint64_t v112 = (char *)v277;
          }
          else
          {
            long long v117 = 0;
          }
          long long v118 = (__int16 *)&v117[2 * v114];
          __int16 *v118 = v71;
          long long v73 = v118 + 1;
          while (v72 != v112)
          {
            __int16 v119 = *((_WORD *)v72 - 1);
            v72 -= 2;
            *--long long v118 = v119;
          }
          *(void *)&long long v277 = v118;
          *((void *)&v277 + 1) = v73;
          v278 = &v117[2 * v116];
          if (v112) {
            operator delete(v112);
          }
        }
        else
        {
          **((_WORD **)&v277 + 1) = v71;
          long long v73 = v72 + 2;
        }
        *((void *)&v277 + 1) = v73;
        ++v66;
      }
      else
      {
LABEL_108:
        if ((void)v277 == *((void *)&v277 + 1))
        {
          ++v66;
        }
        else
        {
          uint64_t v74 = sub_2161832DC();
          uint64_t v75 = *((void *)&v277 + 1);
          uint64_t v275 = 0;
          v276 = 0;
          unint64_t v274 = 0;
          *(void *)int buf = &v274;
          uint8_t buf[8] = 0;
          uint64_t v76 = *((void *)&v277 + 1) - v277;
          if (*((void *)&v277 + 1) != (void)v277)
          {
            if ((unint64_t)v76 >= 0xFFFFFFFFFFFFFFFLL) {
              sub_21610CB04();
            }
            uint64_t v77 = v74;
            unint64_t v249 = v66;
            long long v78 = (char *)operator new(16 * v76);
            unint64_t v274 = (unint64_t)v78;
            v276 = &v78[32 * (v76 >> 1)];
            bzero(v78, 16 * v76);
            unint64_t v79 = 0;
            uint64_t v275 = &v78[16 * v76];
            do
            {
              char v80 = 0;
              size_t v81 = 6;
              uint64_t v82 = 3;
              do
              {
                if (v79 + v82 <= (uint64_t)(*((void *)&v277 + 1) - v277) >> 1)
                {
                  sub_21612F5FC(buf, (void *)(v277 + 2 * v79), v81);
                  unint64_t v83 = sub_21612AAC8(v77, buf);
                  if (v83)
                  {
                    unint64_t v84 = v274;
                    uint64_t v85 = v274 + 32 * v79;
                    if ((unsigned __int8 *)v85 != v83 + 40)
                    {
                      sub_2161BAF4C(v85, *((std::string **)v83 + 5), *((long long **)v83 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v83 + 6) - *((void *)v83 + 5)) >> 3));
                      unint64_t v84 = v274;
                    }
                    *(void *)(v84 + 32 * v79 + 24) = v82;
                    char v80 = 1;
                  }
                  if ((buf[23] & 0x80000000) != 0) {
                    operator delete(*(void **)buf);
                  }
                  if (v83) {
                    break;
                  }
                }
                --v82;
                v81 -= 2;
              }
              while (v81);
              if (v80) {
                uint64_t v86 = *(void *)(v274 + 32 * v79 + 24);
              }
              else {
                uint64_t v86 = 1;
              }
              v79 += v86;
              uint64_t v75 = v277;
            }
            while (v79 < (uint64_t)(*((void *)&v277 + 1) - v277) >> 1);
            unint64_t v88 = v274;
            unint64_t v87 = v275;
            if (v275 != (char *)v274)
            {
              unint64_t v89 = 0;
              do
              {
                uint64_t v90 = (char **)(v88 + 32 * v89);
                uint64_t v91 = *v90;
                long long v92 = v90[1];
                if (*v90 != v92)
                {
                  long long v253 = v90[3];
                  unint64_t v273 = v89 + v251;
                  if (v89 + v251)
                  {
                    uint64_t v93 = sub_2161C554C(&v259, &v273)[3];
                    uint64_t v91 = *v90;
                    long long v92 = v90[1];
                  }
                  else
                  {
                    uint64_t v93 = 0;
                  }
                  while (v91 != v92)
                  {
                    if (v91[23] < 0)
                    {
                      uint64_t v95 = *(char **)v91;
                      unint64_t v94 = *((void *)v91 + 1);
                    }
                    else
                    {
                      unint64_t v94 = v91[23];
                      uint64_t v95 = v91;
                    }
                    unint64_t v96 = v94 >> 1;
                    if (v95) {
                      unint64_t v97 = v96;
                    }
                    else {
                      unint64_t v97 = 0;
                    }
                    if (v97 <= 1)
                    {
                      *(void *)int buf = v93;
                      *(void *)&uint8_t buf[8] = v253;
                      sub_21617FAAC(&buf[16], v95, v97);
                      unint64_t v280 = 0xBFF0000000000000;
                      unint64_t v98 = v254.u64[1];
                      unint64_t v16 = v255[0];
                      if (v254.i64[1] >= v255[0])
                      {
                        uint64_t v100 = v254.i64[0];
                        unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((v254.i64[1] - v254.i64[0]) >> 4);
                        unint64_t v102 = v101 + 1;
                        if (v101 + 1 > 0x555555555555555) {
                          sub_21610CB04();
                        }
                        if (0x5555555555555556 * ((v255[0] - v254.i64[0]) >> 4) > v102) {
                          unint64_t v102 = 0x5555555555555556 * ((v255[0] - v254.i64[0]) >> 4);
                        }
                        if (0xAAAAAAAAAAAAAAABLL * ((v255[0] - v254.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                          unint64_t v103 = 0x555555555555555;
                        }
                        else {
                          unint64_t v103 = v102;
                        }
                        uint64_t v283 = v255;
                        if (v103 > 0x555555555555555) {
                          sub_2160FFA74();
                        }
                        uint64_t v104 = (char *)operator new(48 * v103);
                        long long v105 = &v104[16 * ((v254.i64[1] - v254.i64[0]) >> 4)];
                        long long v106 = *(_OWORD *)&buf[16];
                        *(_OWORD *)long long v105 = *(_OWORD *)buf;
                        *((_OWORD *)v105 + 1) = v106;
                        uint64_t v107 = *(void *)&buf[32];
                        memset(&buf[16], 0, 24);
                        *((void *)v105 + 4) = v107;
                        *((void *)v105 + 5) = 0xBFF0000000000000;
                        if (v98 == v100)
                        {
                          int64x2_t v110 = vdupq_n_s64(v98);
                          long long v108 = &v104[48 * v101];
                        }
                        else
                        {
                          long long v108 = &v104[48 * v101];
                          do
                          {
                            *((_OWORD *)v108 - 3) = *(_OWORD *)(v98 - 48);
                            long long v109 = *(_OWORD *)(v98 - 32);
                            *((void *)v108 - 2) = *(void *)(v98 - 16);
                            *((_OWORD *)v108 - 2) = v109;
                            *(void *)(v98 - 24) = 0;
                            *(void *)(v98 - 16) = 0;
                            *(void *)(v98 - 32) = 0;
                            *((void *)v108 - 1) = *(void *)(v98 - 8);
                            v108 -= 48;
                            v98 -= 48;
                          }
                          while (v98 != v100);
                          int64x2_t v110 = v254;
                          unint64_t v16 = v255[0];
                        }
                        unint64_t v111 = v105 + 48;
                        v254.i64[0] = (uint64_t)v108;
                        *(int64x2_t *)&v281[1] = v110;
                        v255[0] = &v104[48 * v103];
                        unint64_t v282 = v16;
                        v281[0] = v110.i64[0];
                        sub_2161C4F3C((uint64_t)v281);
                        v254.i64[1] = (uint64_t)v111;
                        if ((buf[39] & 0x80000000) != 0) {
                          operator delete(*(void **)&buf[16]);
                        }
                      }
                      else
                      {
                        *(_OWORD *)v254.i64[1] = *(_OWORD *)buf;
                        long long v99 = *(_OWORD *)&buf[16];
                        *(void *)(v98 + 32) = *(void *)&buf[32];
                        *(_OWORD *)(v98 + 16) = v99;
                        memset(&buf[16], 0, 24);
                        *(void *)(v98 + 4sub_216195B94(&qword_26797EF28, 0) = v280;
                        v254.i64[1] = v98 + 48;
                      }
                    }
                    v91 += 24;
                  }
                  unint64_t v88 = v274;
                  unint64_t v87 = v275;
                }
                ++v89;
              }
              while (v89 < (uint64_t)&v87[-v88] >> 5);
              uint64_t v75 = v277;
            }
            unint64_t v65 = v248;
            unint64_t v66 = v249;
          }
          *((void *)&v277 + 1) = v75;
          ++v66;
          *(void *)int buf = &v274;
          sub_21613F4F0((void ***)buf);
        }
        unint64_t v251 = v66;
      }
    }
    while (v66 <= v65);
  }
  if ((void)v277)
  {
    *((void *)&v277 + 1) = v277;
    operator delete((void *)v277);
  }
  if ((a5 & 4) != 0)
  {
    unint64_t v120 = v269;
    if ((v269 & 0x80u) != 0) {
      unint64_t v120 = v268;
    }
    if (v120)
    {
      uint64_t v121 = 0;
      unint64_t v122 = 0;
      char v123 = 1;
      do
      {
        unint64_t v124 = v122 + 1;
        *(void *)int buf = v122 + 1;
        long long v125 = sub_2161C554C(&v259, (unint64_t *)buf);
        if (v125)
        {
          uint64_t v126 = v125[3];
          if ((v123 & 1) != 0
            || ((v269 & 0x80u) == 0 ? (unint64_t v127 = &__p) : (unint64_t v127 = __p), (v127[v122] & 0xFFDFu) - 65 > 0x19))
          {
            char v123 = 0;
          }
          else
          {
            uint64_t v128 = v126 - v121;
            unint64_t v16 = v254.u64[1];
            uint64_t v129 = v255[0];
            if (v254.i64[1] >= v255[0])
            {
              uint64_t v131 = v254.i64[0];
              unint64_t v132 = 0xAAAAAAAAAAAAAAABLL * ((v254.i64[1] - v254.i64[0]) >> 4);
              unint64_t v133 = v132 + 1;
              if (v132 + 1 > 0x555555555555555) {
                sub_21610CB04();
              }
              if (0x5555555555555556 * ((v255[0] - v254.i64[0]) >> 4) > v133) {
                unint64_t v133 = 0x5555555555555556 * ((v255[0] - v254.i64[0]) >> 4);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v255[0] - v254.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v134 = 0x555555555555555;
              }
              else {
                unint64_t v134 = v133;
              }
              *(void *)&buf[32] = v255;
              if (v134 > 0x555555555555555) {
                sub_2160FFA74();
              }
              uint64_t v135 = (char *)operator new(48 * v134);
              int64_t v136 = &v135[16 * ((v254.i64[1] - v254.i64[0]) >> 4)];
              *(void *)int64_t v136 = v121;
              *((void *)v136 + 1) = v128;
              *((void *)v136 + 2) = 0;
              *((void *)v136 + 3) = 0;
              *((void *)v136 + 4) = 0;
              *((void *)v136 + 5) = 0xC000000000000000;
              if (v16 == v131)
              {
                int64x2_t v139 = vdupq_n_s64(v16);
                long long v137 = &v135[48 * v132];
              }
              else
              {
                long long v137 = &v135[48 * v132];
                do
                {
                  *((_OWORD *)v137 - 3) = *(_OWORD *)(v16 - 48);
                  long long v138 = *(_OWORD *)(v16 - 32);
                  *((void *)v137 - 2) = *(void *)(v16 - 16);
                  *((_OWORD *)v137 - 2) = v138;
                  *(void *)(v16 - 24) = 0;
                  *(void *)(v16 - 16) = 0;
                  *(void *)(v16 - 32) = 0;
                  *((void *)v137 - 1) = *(void *)(v16 - 8);
                  v137 -= 48;
                  v16 -= 48;
                }
                while (v16 != v131);
                int64x2_t v139 = v254;
                uint64_t v129 = v255[0];
              }
              long long v130 = v136 + 48;
              v254.i64[0] = (uint64_t)v137;
              v254.i64[1] = (uint64_t)(v136 + 48);
              *(int64x2_t *)&uint8_t buf[8] = v139;
              v255[0] = &v135[48 * v134];
              *(void *)&unsigned char buf[24] = v129;
              *(void *)int buf = v139.i64[0];
              sub_2161C4F3C((uint64_t)buf);
            }
            else
            {
              *(void *)v254.i64[1] = v121;
              *(void *)(v16 + ++**(_DWORD **)(result + 8) = v128;
              *(void *)(v16 + 16) = 0;
              *(void *)(v16 + 24) = 0;
              long long v130 = (void *)(v16 + 48);
              *(void *)(v16 + 32) = 0;
              *(void *)(v16 + 4sub_216195B94(&qword_26797EF28, 0) = 0xC000000000000000;
            }
            v254.i64[1] = (uint64_t)v130;
            char v123 = 1;
          }
        }
        else
        {
          uint64_t v126 = v121;
        }
        unint64_t v140 = v269;
        if ((v269 & 0x80u) != 0) {
          unint64_t v140 = v268;
        }
        uint64_t v121 = v126;
        unint64_t v122 = v124;
      }
      while (v124 < v140);
    }
  }
  if ((a5 & 8) != 0)
  {
    unsigned __int8 v141 = v269;
    BOOL v142 = (v269 & 0x80u) != 0;
    unint64_t v143 = (v269 & 0x80u) == 0 ? v269 : v268;
    if (v143 >= 2)
    {
      for (unint64_t j = 1; j < v157; ++j)
      {
        double v145 = (void **)__p;
        if (v142) {
          uint64_t v146 = __p;
        }
        else {
          uint64_t v146 = &__p;
        }
        if (v146[j - 1] == 12435)
        {
          uint64_t v147 = 0;
          int v148 = (unsigned __int16)v146[j];
          while (*(unsigned __int16 *)&aB0d0f0h0j0[v147] != v148)
          {
            v147 += 2;
            if (v147 == 10)
            {
              int v149 = "";
              goto LABEL_230;
            }
          }
          int v149 = &aB0d0f0h0j0[v147];
LABEL_230:
          if (v149 - "B0D0F0H0J0" != 10)
          {
            if (j == 1)
            {
              LODWORD(v15sub_216195B94(&qword_26797EF28, 0) = 0;
            }
            else
            {
              *(void *)int buf = j - 1;
              uint64_t v150 = sub_2161C554C(&v259, (unint64_t *)buf)[3];
              unsigned __int8 v141 = v269;
              double v145 = (void **)__p;
            }
            uint64_t v151 = 0;
            strcpy(buf, "n");
            if ((v141 & 0x80u) == 0) {
              v152 = &__p;
            }
            else {
              v152 = v145;
            }
            int v153 = *((unsigned __int16 *)v152 + j);
            while (*(unsigned __int16 *)&aB0d0f0h0j0[v151] != v153)
            {
              v151 += 2;
              if (v151 == 10)
              {
                int v154 = "";
                goto LABEL_242;
              }
            }
            int v154 = &aB0d0f0h0j0[v151];
LABEL_242:
            int64_t v155 = v154 - "B0D0F0H0J0";
            if (v155 == 10) {
              __int16 v156 = 0;
            }
            else {
              __int16 v156 = *(__int16 *)((char *)L"aiueo" + v155);
            }
            *(_WORD *)&buf[2] = v156;
            sub_2161C4E00((int)&v254, v150, (UniChar *)buf, 2);
          }
        }
        BOOL v142 = (v269 & 0x80u) != 0;
        if ((v269 & 0x80u) == 0) {
          unint64_t v157 = v269;
        }
        else {
          unint64_t v157 = v268;
        }
      }
    }
  }
  if ((a5 & 0x10) != 0)
  {
    unint64_t v158 = v269;
    if ((v269 & 0x80u) != 0) {
      unint64_t v158 = v268;
    }
    if (v158)
    {
      unint64_t v159 = 0;
      unint64_t v16 = (unint64_t)"";
      do
      {
        uint64_t v160 = v159++;
        *(void *)int buf = v159;
        char v161 = sub_2161C554C(&v259, (unint64_t *)buf);
        std::string::size_type v162 = v161;
        if (v161)
        {
          unint64_t v163 = v269;
          if (v160)
          {
            uint64_t v164 = 0;
            uint64_t v165 = v160 - 1;
            if ((v269 & 0x80u) == 0) {
              v166 = &__p;
            }
            else {
              v166 = __p;
            }
            while (*(unsigned __int16 *)&aB0d0f0h0j0[v164] != (unsigned __int16)v166[v165])
            {
              v164 += 2;
              if (v164 == 10)
              {
                std::string::size_type v167 = "";
                goto LABEL_264;
              }
            }
            std::string::size_type v167 = &aB0d0f0h0j0[v164];
LABEL_264:
            if (v167 - "B0D0F0H0J0" != 10)
            {
              uint64_t v168 = 0;
              while (aKstnhmyrwgzjdb[v168] != v166[v160])
              {
                if (++v168 == 18)
                {
                  v169 = L"";
                  goto LABEL_270;
                }
              }
              v169 = &aKstnhmyrwgzjdb[v168];
LABEL_270:
              if ((char *)v169 - (char *)L"kstnhmyrwgzjdbpofv" != 36)
              {
                uint64_t v170 = 0;
                *(_WORD *)int buf = v166[v160];
                int v171 = (unsigned __int16)v166[v165];
                while (*(unsigned __int16 *)&aB0d0f0h0j0[v170] != v171)
                {
                  v170 += 2;
                  if (v170 == 10)
                  {
                    double v172 = "";
                    goto LABEL_276;
                  }
                }
                double v172 = &aB0d0f0h0j0[v170];
LABEL_276:
                int64_t v173 = v172 - "B0D0F0H0J0";
                if (v173 == 10) {
                  __int16 v174 = 0;
                }
                else {
                  __int16 v174 = *(__int16 *)((char *)L"aiueo" + v173);
                }
                *(_WORD *)&buf[2] = v174;
                sub_2161C4E00((int)&v254, v161[3] - 2, (UniChar *)buf, 2);
              }
            }
          }
          unint64_t v175 = v160 + 2;
          if ((v269 & 0x80u) != 0) {
            unint64_t v163 = v268;
          }
          if (v175 < v163)
          {
            uint64_t v176 = 0;
            uint64_t v177 = __p;
            if ((v269 & 0x80u) == 0) {
              uint64_t v177 = &__p;
            }
            while (aKstnhmyrwgzjdb[v176] != v177[v160])
            {
              if (++v176 == 18)
              {
                uint64_t v178 = L"";
                goto LABEL_289;
              }
            }
            uint64_t v178 = &aKstnhmyrwgzjdb[v176];
LABEL_289:
            if ((char *)v178 - (char *)L"kstnhmyrwgzjdbpofv" != 36)
            {
              int v179 = (unsigned __int16)v177[v159];
              BOOL v180 = (v179 - 12353) < 0x56 || v179 == 12540;
              if (v180 || v179 == 12316)
              {
                uint64_t v182 = 0;
                while (*(unsigned __int16 *)&aB0d0f0h0j0[v182] != (unsigned __int16)v177[v159])
                {
                  v182 += 2;
                  if (v182 == 10)
                  {
                    v183 = "";
                    goto LABEL_303;
                  }
                }
                v183 = &aB0d0f0h0j0[v182];
LABEL_303:
                if (v183 - "B0D0F0H0J0" == 10)
                {
                  uint64_t v184 = 0;
                  int v185 = (unsigned __int16)v177[v175];
                  while (*(unsigned __int16 *)&aB0d0f0h0j0[v184] != v185)
                  {
                    v184 += 2;
                    if (v184 == 10)
                    {
                      unsigned int v186 = "";
                      goto LABEL_309;
                    }
                  }
                  unsigned int v186 = &aB0d0f0h0j0[v184];
LABEL_309:
                  if (v186 - "B0D0F0H0J0" != 10)
                  {
                    *(void *)int buf = v160 + 2;
                    unsigned int v187 = sub_2161C554C(&v259, (unint64_t *)buf);
                    if (v187)
                    {
                      uint64_t v188 = v187[3];
                      uint64_t v189 = v162[3];
                      if (v188 - v189 == 2)
                      {
                        uint64_t v190 = 0;
                        unsigned int v191 = __p;
                        if ((v269 & 0x80u) == 0) {
                          unsigned int v191 = &__p;
                        }
                        *(_WORD *)int buf = v191[v160];
                        p_dst = __dst;
                        if ((v272 & 0x80u) == 0) {
                          p_dst = &__dst;
                        }
                        *(_WORD *)&buf[2] = p_dst[v188 - 1];
                        *(_WORD *)&uint8_t buf[4] = p_dst[v189];
                        while (*(unsigned __int16 *)&aB0d0f0h0j0[v190] != (unsigned __int16)v191[v175])
                        {
                          v190 += 2;
                          if (v190 == 10)
                          {
                            v193 = "";
                            goto LABEL_321;
                          }
                        }
                        v193 = &aB0d0f0h0j0[v190];
LABEL_321:
                        int64_t v194 = v193 - "B0D0F0H0J0";
                        if (v194 == 10) {
                          __int16 v195 = 0;
                        }
                        else {
                          __int16 v195 = *(__int16 *)((char *)L"aiueo" + v194);
                        }
                        *(_WORD *)&buf[6] = v195;
                        sub_2161C4E00((int)&v254, v189 - 1, (UniChar *)buf, 4);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        unint64_t v196 = v269;
        if ((v269 & 0x80u) != 0) {
          unint64_t v196 = v268;
        }
      }
      while (v159 < v196);
    }
  }
  sub_216144C28((uint64_t)&v264);
  if ((char)v269 < 0) {
    operator delete(__p);
  }
  if ((char)v272 < 0) {
    operator delete(__dst);
  }
  if (v254.i64[0] != v254.i64[1])
  {
    uint64_t v197 = v254.i64[0] + 16;
    do
    {
      uint64_t v198 = v197 - 16;
      if (*(char *)(v197 + 23) < 0)
      {
        uint64_t v200 = *(void **)v197;
        unint64_t v199 = *(void *)(v197 + 8);
      }
      else
      {
        unint64_t v199 = *(unsigned __int8 *)(v197 + 23);
        uint64_t v200 = (void *)v197;
      }
      sub_2161C4D0C(v243, *(void *)(v197 - 16) + v242, v200, v199, *(void *)(v197 - 8), 0, 0xFFFFFF, -1, *(double *)(v197 + 24), 255);
      v197 += 48;
    }
    while (v198 + 48 != v254.i64[1]);
  }
  int v202 = (void *)(a6 + 16);
  uint64_t v201 = *(void **)(a6 + 16);
  if (v201)
  {
    unint64_t v203 = 0;
    uint64_t v204 = 0;
    do
    {
      unint64_t v205 = v201[2];
      if (v203 < v205) {
        uint64_t v204 = v201[3];
      }
      if (v203 <= v205) {
        unint64_t v203 = v201[2];
      }
      uint64_t v201 = (void *)*v201;
    }
    while (v201);
  }
  else
  {
    uint64_t v204 = 0;
    unint64_t v203 = 0;
  }
  unint64_t v206 = (void *)v260;
  if ((void)v260)
  {
    unint64_t v207 = *(void *)(a6 + 8);
    do
    {
      uint64_t v208 = v206[3];
      unint64_t v209 = v206[2] + v203;
      if (v207)
      {
        uint8x8_t v210 = (uint8x8_t)vcnt_s8((int8x8_t)v207);
        v210.i16[0] = vaddlv_u8(v210);
        if (v210.u32[0] > 1uLL)
        {
          unint64_t v16 = v206[2] + v203;
          if (v207 <= v209) {
            unint64_t v16 = v209 % v207;
          }
        }
        else
        {
          unint64_t v16 = (v207 - 1) & v209;
        }
        v211 = *(void **)(*(void *)a6 + 8 * v16);
        if (v211)
        {
          for (CFIndex k = (void *)*v211; k; CFIndex k = (void *)*k)
          {
            unint64_t v213 = k[1];
            if (v213 == v209)
            {
              if (k[2] == v209) {
                goto LABEL_387;
              }
            }
            else
            {
              if (v210.u32[0] > 1uLL)
              {
                if (v213 >= v207) {
                  v213 %= v207;
                }
              }
              else
              {
                v213 &= v207 - 1;
              }
              if (v213 != v16) {
                break;
              }
            }
          }
        }
      }
      int v214 = operator new(0x20uLL);
      *int v214 = 0;
      v214[1] = v209;
      v214[2] = v209;
      v214[3] = v208 + v204;
      float v215 = (float)(unint64_t)(*(void *)(a6 + 24) + 1);
      float v216 = *(float *)(a6 + 32);
      if (!v207 || (float)(v216 * (float)v207) < v215)
      {
        BOOL v217 = (v207 & (v207 - 1)) != 0;
        if (v207 < 3) {
          BOOL v217 = 1;
        }
        unint64_t v218 = v217 | (2 * v207);
        unint64_t v219 = vcvtps_u32_f32(v215 / v216);
        if (v218 <= v219) {
          size_t v220 = v219;
        }
        else {
          size_t v220 = v218;
        }
        sub_2161297B4(a6, v220);
        unint64_t v207 = *(void *)(a6 + 8);
        if ((v207 & (v207 - 1)) != 0)
        {
          if (v207 <= v209) {
            unint64_t v16 = v209 % v207;
          }
          else {
            unint64_t v16 = v209;
          }
        }
        else
        {
          unint64_t v16 = (v207 - 1) & v209;
        }
      }
      uint64_t v221 = *(void *)a6;
      v222 = *(void **)(*(void *)a6 + 8 * v16);
      if (v222)
      {
        *int v214 = *v222;
        uint64_t v223 = a6;
      }
      else
      {
        *int v214 = *v202;
        *int v202 = v214;
        *(void *)(v221 + 8 * v16) = v202;
        uint64_t v223 = a6;
        if (!*v214) {
          goto LABEL_386;
        }
        unint64_t v224 = *(void *)(*v214 + 8);
        if ((v207 & (v207 - 1)) != 0)
        {
          if (v224 >= v207) {
            v224 %= v207;
          }
        }
        else
        {
          v224 &= v207 - 1;
        }
        v222 = (void *)(*(void *)a6 + 8 * v224);
      }
      void *v222 = v214;
LABEL_386:
      ++*(void *)(v223 + 24);
LABEL_387:
      unint64_t v206 = (void *)*v206;
    }
    while (v206);
  }
  uint64_t v225 = (void **)a7;
  if (a7)
  {
    unsigned int v226 = sub_21617FAAC(buf, v246, v245);
    int v227 = *((char *)a7 + 23);
    uint64_t v228 = a7 + 1;
    if (v227 >= 0) {
      uint64_t v229 = (char *)a7;
    }
    else {
      uint64_t v229 = *a7;
    }
    if (v227 >= 0) {
      unint64_t v230 = *((unsigned __int8 *)a7 + 23);
    }
    else {
      unint64_t v230 = (unint64_t)a7[1];
    }
    if (buf[23] >= 0) {
      uint64_t v231 = buf[23];
    }
    else {
      uint64_t v231 = *(void *)&buf[8];
    }
    if (buf[23] >= 0) {
      unint64_t v232 = 10;
    }
    else {
      unint64_t v232 = (*(void *)&buf[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    if (v232 - v231 >= v230)
    {
      if (v230)
      {
        if (buf[23] >= 0) {
          v233 = buf;
        }
        else {
          v233 = *(char **)buf;
        }
        if (v231)
        {
          if (&v233[2 * v231] <= v229 || v233 > v229) {
            unint64_t v235 = 0;
          }
          else {
            unint64_t v235 = v230;
          }
          v229 += 2 * v235;
          memmove(&v233[2 * v230], v233, 2 * v231);
        }
        memmove(v233, v229, 2 * v230);
        unint64_t v236 = v231 + v230;
        if ((buf[23] & 0x80000000) != 0) {
          *(void *)&uint8_t buf[8] = v231 + v230;
        }
        else {
          buf[23] = v236 & 0x7F;
        }
        *(_WORD *)&v233[2 * v236] = 0;
        uint64_t v225 = (void **)a7;
      }
    }
    else
    {
      sub_2161982E8((uint64_t)v226, v232, v231 + v230 - v232, v231, 0, 0, v230, v229);
    }
    v237 = *(char **)buf;
    v281[0] = *(void *)&buf[8];
    *(void *)((char *)v281 + 7) = *(void *)&buf[15];
    char v238 = buf[23];
    memset(buf, 0, 24);
    if (*((char *)v225 + 23) < 0)
    {
      operator delete(*v225);
      int v239 = buf[23];
      *uint64_t v225 = v237;
      *uint64_t v228 = v281[0];
      *(char **)((char *)a7 + 15) = *(char **)((char *)v281 + 7);
      *((unsigned char *)v225 + 23) = v238;
      if (v239 < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      *uint64_t v225 = v237;
      *uint64_t v228 = v281[0];
      *(char **)((char *)a7 + 15) = *(char **)((char *)v281 + 7);
      *((unsigned char *)v225 + 23) = v238;
    }
  }
  if (v241) {
    void *v241 = v258;
  }
  *(void *)int buf = &v254;
  sub_2161C54C0((void ***)buf);
  if ((char)v257 < 0) {
    operator delete(v256[0]);
  }
  return sub_216144C28((uint64_t)&v259);
}

void sub_2161C4B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (*(char *)(v60 - 169) < 0) {
    operator delete(*(void **)(v60 - 192));
  }
  *(void *)(v60 - 192) = &a25;
  sub_2161C54C0((void ***)(v60 - 192));
  if (a34 < 0) {
    operator delete(__p);
  }
  sub_216144C28((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_2161C4D0C(uint64_t a1, uint64_t a2, void *__src, unint64_t a4, uint64_t a5, __int16 a6, int a7, char a8, double a9, char a10)
{
  char v11 = a10;
  v27[0] = __src;
  v27[1] = a4;
  int v26 = a7;
  double v25 = a9;
  uint64_t v24 = a5;
  __int16 v23 = a6;
  char v22 = a8;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = v12 + 24 * a2;
  unint64_t v15 = *(void *)(v13 + 8);
  unint64_t v14 = *(void *)(v13 + 16);
  unint64_t v16 = (void *)(v13 + 8);
  if (v15 >= v14)
  {
    uint64_t result = sub_2161C50B8((uint64_t *)(v12 + 24 * a2), (uint64_t)v27, (uint64_t *)&v25, &v24, &v26, &v23, &v22, &a10);
  }
  else
  {
    sub_21617FAAC((void *)v15, __src, a4);
    *(double *)(v15 + 24) = a9;
    *(void *)(v15 + 32) = a5;
    *(_DWORD *)(v15 + 4sub_216195B94(&qword_26797EF28, 0) = a7;
    *(_WORD *)(v15 + 44) = a6;
    *(unsigned char *)(v15 + 46) = a8;
    *(unsigned char *)(v15 + 47) = v11;
    uint64_t result = v15 + 48;
    *unint64_t v16 = v15 + 48;
  }
  *unint64_t v16 = result;
  return result;
}

void sub_2161C4DF8(_Unwind_Exception *a1)
{
  *unint64_t v2 = v1;
  _Unwind_Resume(a1);
}

void sub_2161C4E00(int a1, int a2, UniChar *chars, CFIndex numChars)
{
  uint64_t v4 = 0;
  sub_216184860(chars, numChars);
}

void sub_2161C4EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v17) {
    MEMORY[0x2166CA7C0](v17, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161C4F3C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2161C4FA0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        long long v6 = v4;
        sub_2161C5014(&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2161C5014(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2161C5068((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_2161C5068(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

uint64_t sub_2161C50B8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5, __int16 *a6, char *a7, char *a8)
{
  uint64_t v9 = *a1;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x555555555555555) {
    sub_21610CB04();
  }
  uint64_t v19 = (uint64_t)(a1 + 2);
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v9) >> 4);
  if (2 * v20 > v11) {
    unint64_t v11 = 2 * v20;
  }
  if (v20 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v21 = 0x555555555555555;
  }
  else {
    unint64_t v21 = v11;
  }
  unint64_t v36 = a1 + 2;
  if (v21) {
    char v22 = (char *)sub_21617AF50(v19, v21);
  }
  else {
    char v22 = 0;
  }
  unint64_t v32 = v22;
  float v33 = &v22[48 * v10];
  BOOL v34 = v33;
  unint64_t v35 = &v22[48 * v21];
  uint64_t v23 = *a3;
  uint64_t v24 = *a4;
  int v25 = *a5;
  __int16 v26 = *a6;
  char v27 = *a7;
  char v28 = *a8;
  sub_21617FAAC(v33, *(void **)a2, *(void *)(a2 + 8));
  uint8x8_t v29 = v33;
  *((void *)v33 + 3) = v23;
  *((void *)v29 + 4) = v24;
  *((_DWORD *)v29 + 1sub_216195B94(&qword_26797EF28, 0) = v25;
  *((_WORD *)v29 + 22) = v26;
  v29[46] = v27;
  v29[47] = v28;
  v34 += 48;
  sub_2161C5230(a1, &v32);
  uint64_t v30 = a1[1];
  sub_2161C5418((uint64_t)&v32);
  return v30;
}

void sub_2161C521C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161C5418((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161C5230(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2161C52A8((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2161C52A8(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v20 = a6;
  *((void *)&v20 + 1) = a7;
  long long v19 = v20;
  v17[0] = a1;
  v17[1] = &v19;
  v17[2] = &v20;
  char v18 = 0;
  if (a3 == a5)
  {
    uint64_t v15 = a6;
  }
  else
  {
    uint64_t v9 = (void **)a3;
    do
    {
      unint64_t v10 = (unsigned char *)(v7 - 48);
      unint64_t v11 = (long long *)(v9 - 6);
      if (*((char *)v9 - 25) < 0)
      {
        sub_2161984AC(v10, *(v9 - 6), (unint64_t)*(v9 - 5));
        uint64_t v13 = *((void *)&v20 + 1);
      }
      else
      {
        long long v12 = *v11;
        *(void *)(v7 - 32) = *(v9 - 4);
        *(_OWORD *)unint64_t v10 = v12;
        uint64_t v13 = v7;
      }
      uint64_t v14 = (uint64_t)*(v9 - 1);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 3);
      *(void *)(v7 - ++**(_DWORD **)(result + 8) = v14;
      uint64_t v7 = v13 - 48;
      *((void *)&v20 + 1) = v13 - 48;
      v9 -= 6;
    }
    while (v11 != a5);
    uint64_t v15 = v20;
  }
  char v18 = 1;
  sub_2161C5398((uint64_t)v17);
  return v15;
}

void sub_2161C5384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2161C5398(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2161C53D0(a1);
  }
  return a1;
}

void sub_2161C53D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 48;
  }
}

uint64_t sub_2161C5418(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2161C5450(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 6;
      *(void *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_2161C54A8()
{
}

void sub_2161C54C0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 6;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_2161C554C(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_2161C5600()
{
  if (qword_26797D4D0 != -1) {
    dispatch_once(&qword_26797D4D0, &unk_26C6C9F20);
  }
  return qword_26797D4C8;
}

void sub_2161C5644()
{
  long long v0 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v1 = os_signpost_id_make_with_pointer(v0, &qword_26797D4D0);
  int8x8_t v2 = sub_2162D1CE4(0xDu);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v3 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)int buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "MecabraDPRecorderManager", "MecabraDPRecorderManager constructor", buf, 2u);
    }
  }
  operator new();
}

void sub_2161C57AC(_Unwind_Exception *a1)
{
  sub_21619EAB4(*(void **)(v1 + 16));
  MEMORY[0x2166CA800](v1, 0x10E0C4017AF648ALL);
  _Unwind_Resume(a1);
}

void sub_2161C57D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = objc_alloc_init(MEMORY[0x263F086B0]);
  uint8x8_t v4 = *(void **)(a1 + 32);
  unint64_t v5 = *(void **)(v2 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  id v7 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v20 = 0;
  unint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 1;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2020000000;
  v19[3] = 0;
  uint64_t v9 = [NSNumber numberWithUnsignedInteger:v8];
  uint64_t v11 = [v5 _wordAtPosition:v10, v6, v9];
  [v7 addObject:v12];
  uint64_t v15 = [v6 length:v13, v14];
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = sub_2161C5BB8;
  void v18[3] = &unk_26426B740;
  v18[4] = v7;
  void v18[5] = v5;
  v18[6] = v19;
  v18[7] = &v20;
  [v6 enumerateSubstringsInRange:v16 options:v15 usingBlock:v18];
  if (*((unsigned char *)v21 + 24)) {
    [v4 record:v17 withTimestamp:v7];
  }

  _Block_object_dispose(v19, 8);
  _Block_object_dispose(&v20, 8);

  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_2161C5954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_2161C5978(uint64_t a1, const char *a2, const __CFString *a3, int a4)
{
  if (a2 != 1) {
    return 0;
  }
  block[15] = v4;
  block[16] = v5;
  if (a4) {
    unsigned int v8 = 2;
  }
  else {
    unsigned int v8 = 1;
  }
  unint64_t v10 = (void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_47;
  }
  uint64_t v11 = a1 + 16;
  do
  {
    unsigned int v12 = *(_DWORD *)(v9 + 32);
    BOOL v13 = v12 >= v8;
    if (v12 >= v8) {
      uint64_t v14 = (uint64_t *)v9;
    }
    else {
      uint64_t v14 = (uint64_t *)(v9 + 8);
    }
    if (v13) {
      uint64_t v11 = v9;
    }
    uint64_t v9 = *v14;
  }
  while (*v14);
  if ((void *)v11 != v10 && v8 >= *(_DWORD *)(v11 + 32))
  {
    long long v19 = *(void **)(v11 + 40);
    if (!v19) {
      return 0;
    }
  }
  else
  {
LABEL_47:
    if (!*(void *)(a1 + 32)) {
      return 0;
    }
    if (a4)
    {
      uint64_t v15 = @"com.apple.keyboard.NewWords.zh_Hans.10Key";
      uint64_t v16 = [@"com.apple.keyboard.NewWords.zh_Hans.10Key" length:a2];
    }
    else
    {
      uint64_t v15 = @"com.apple.keyboard.NewWords.zh_Hans.Qwerty";
      uint64_t v16 = [@"com.apple.keyboard.NewWords.zh_Hans.Qwerty" length:a2];
    }
    if (!v16) {
      return 0;
    }
    id v17 = objc_alloc(*(Class *)(a1 + 32));
    long long v19 = [v17 initWithKey:v18, (uint64_t)v15];
    uint64_t v20 = *(_DWORD **)(a1 + 16);
    unint64_t v21 = v10;
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v21 = v20;
          unsigned int v22 = v20[8];
          if (v22 <= v8) {
            break;
          }
          uint64_t v20 = (_DWORD *)*v21;
          unint64_t v10 = v21;
          if (!*v21) {
            goto LABEL_28;
          }
        }
        if (v22 >= v8) {
          break;
        }
        uint64_t v20 = (_DWORD *)v21[1];
        if (!v20)
        {
          unint64_t v10 = v21 + 1;
          goto LABEL_28;
        }
      }
    }
    else
    {
LABEL_28:
      char v23 = v21;
      unint64_t v21 = operator new(0x30uLL);
      *((_DWORD *)v21 + ++**(_DWORD **)(result + 8) = v8;
      v21[5] = 0;
      *unint64_t v21 = 0;
      v21[1] = 0;
      v21[2] = v23;
      void *v10 = v21;
      uint64_t v24 = **(void **)(a1 + 8);
      int v25 = v21;
      if (v24)
      {
        *(void *)(a1 + ++**(_DWORD **)(result + 8) = v24;
        int v25 = (uint64_t *)*v10;
      }
      sub_21612A6F4(*(uint64_t **)(a1 + 16), v25);
      ++*(void *)(a1 + 24);
    }
    v21[5] = v19;
    if (!v19) {
      return 0;
    }
  }
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  uint64_t result = 0;
  if (!a3 || !*(void *)a1) {
    return result;
  }
  if (CFStringGetLength(a3) < 1) {
    return 0;
  }
  CFRetain(a3);
  id v27 = v19;
  CFStringRef v28 = *(const __CFString **)(a1 + 48);
  if (v28 != a3)
  {
    if (v28)
    {
      CFRelease(v28);
      *(void *)(a1 + 4++**(_DWORD **)(result + 8) = 0;
    }
    *(void *)(a1 + 4++**(_DWORD **)(result + 8) = CFRetain(a3);
  }
  uint8x8_t v29 = *(NSObject **)a1;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_2161C57D8;
  block[3] = &unk_26426B718;
  block[4] = v19;
  void block[5] = a1;
  block[6] = a3;
  dispatch_async(v29, block);
  return 1;
}

void *sub_2161C5BB8(void *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  ++*(void *)(*(void *)(result[6] + 8) + 24);
  if (a2)
  {
    unsigned int v8 = (void *)result[4];
    uint64_t v9 = (void *)result[5];
    uint64_t v10 = [NSNumber numberWithUnsignedInteger:*(uint64_t *)(*(void *)(*(void *)(result[6] + 8) + 24)));
    uint64_t v13 = [v9 performSelector:v11 withObject:a2 atPosition:v10];
    return [v8 addObject:v12];
  }
  else
  {
    *(unsigned char *)(*(void *)(result[7] + 8) + 24) = 0;
    *a7 = 1;
  }
  return result;
}

void *sub_2161C5C64(void *a1, const void *a2, const void *a3)
{
  *a1 = &unk_26C6BE7D0;
  uint64_t v6 = (void *)sub_2162A7544((uint64_t)a1, (uint64_t *)&off_26C6BCDD8);
  void *v6 = off_26C6BF480;
  v6[3] = &off_26C6BF6C0;
  if (a2) {
    CFTypeRef v7 = CFRetain(a2);
  }
  else {
    CFTypeRef v7 = 0;
  }
  a1[4] = v7;
  if (a3) {
    CFTypeRef v8 = CFRetain(a3);
  }
  else {
    CFTypeRef v8 = 0;
  }
  a1[5] = v8;
  return a1;
}

uint64_t sub_2161C5D2C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  id v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void sub_2161C5D70(uint64_t a1)
{
  sub_2161C5D2C(a1);

  JUMPOUT(0x2166CA800);
}

__CFString *sub_2161C5DA8()
{
  return kMecabraAnalysisStringForFacemark[0];
}

__CFString *sub_2161C5DB4()
{
  return kMecabraAnalysisStringForFacemark[0];
}

uint64_t sub_2161C5DC0(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D4E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D4E0))
  {
    qword_26797D4D8 = (uint64_t)objc_alloc_init(MEMORY[0x263EFF9A0]);
    __cxa_guard_release(&qword_26797D4E0);
  }
  uint64_t v4 = [qword_26797D4D8 objectForKey:a2];
  if (!v4)
  {
    uint64_t v4 = [NSDictionary dictionaryWithObject:v3 forKey:v2];
    [qword_26797D4D8 setValue:v5 forKey:v4];
  }
  return v4;
}

void sub_2161C5E80(_Unwind_Exception *a1)
{
}

void sub_2161C5E98()
{
}

void sub_2161C5F5C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

void sub_2161C5F80()
{
}

uint64_t sub_2161C5F9C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_2161C5FA4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_2161C5FAC()
{
  return 0;
}

uint64_t sub_2161C5FB4()
{
  return 0;
}

uint64_t sub_2161C5FC0()
{
  return 7;
}

uint64_t sub_2161C5FC8()
{
  return 0;
}

uint64_t sub_2161C5FD0()
{
  return 0;
}

uint64_t sub_2161C5FD8()
{
  return 0;
}

uint64_t sub_2161C5FE0()
{
  return 0;
}

uint64_t sub_2161C5FE8()
{
  return 0;
}

uint64_t sub_2161C5FF0()
{
  return 0;
}

CFStringRef sub_2161C5FF8(uint64_t a1)
{
  CFStringRef result = *(const __CFString **)(a1 + 32);
  if (result) {
    return (const __CFString *)sub_2161E539C(result);
  }
  return result;
}

uint64_t sub_2161C6008()
{
  return 0;
}

uint64_t sub_2161C6010()
{
  return 0;
}

uint64_t sub_2161C6018()
{
  return 0;
}

uint64_t sub_2161C6020()
{
  return 0;
}

uint64_t sub_2161C6028()
{
  return 0;
}

uint64_t sub_2161C6030()
{
  return 1;
}

uint64_t sub_2161C6038()
{
  return 1;
}

uint64_t sub_2161C6040()
{
  return 0;
}

uint64_t sub_2161C6048()
{
  return 0;
}

uint64_t sub_2161C6050()
{
  return 0;
}

uint64_t sub_2161C6058()
{
  return 0;
}

uint64_t sub_2161C6060()
{
  return 0;
}

uint64_t sub_2161C6068()
{
  return 0;
}

uint64_t sub_2161C6070()
{
  return 0;
}

uint64_t sub_2161C6078()
{
  return 0;
}

uint64_t sub_2161C6080()
{
  return -1;
}

uint64_t sub_2161C6088()
{
  return 0;
}

double sub_2161C6090()
{
  return 0.0;
}

uint64_t sub_2161C609C()
{
  return 0;
}

uint64_t sub_2161C60A4()
{
  return 0;
}

uint64_t sub_2161C60AC()
{
  return 0;
}

uint64_t sub_2161C60B4()
{
  return 0;
}

uint64_t sub_2161C60C8()
{
  return 0;
}

uint64_t sub_2161C60D0(void **a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 224)) {
    return 0;
  }
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 416))(a2);
  int v6 = (*(uint64_t (**)(void *))(*a1[1] + 224))(a1[1]);
  unsigned int v30 = v5;
  unsigned int v7 = sub_21628DC44(v5, v6);
  CFTypeRef v8 = *(char **)(a2 + 64);
  int v9 = *(char *)(a2 + 87);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
  BOOL v34 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v32 = 0;
  float v33 = 0;
  std::string __p = 0;
  if (v10[1] == *v10)
  {
    CFStringRef v28 = 0;
    id v27 = 0;
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v11 = v10;
    unint64_t v12 = 0;
    uint64_t v2 = 0;
    if (v9 >= 0) {
      CFTypeRef v8 = (char *)(a2 + 64);
    }
    do
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
      if (v13 - (*(unsigned int (**)(uint64_t))(*(void *)a2 + 376))(a2) == v12) {
        uint64_t v14 = v7 | 4;
      }
      else {
        uint64_t v14 = v7;
      }
      unint64_t v15 = ((uint64_t (*)(void **, char *, unint64_t, uint64_t, char *, uint64_t, void))(*a1)[3])(a1, v8, *v11 + 40 * v12, v14, v37, 510, v30);
      if (v15 >= 2)
      {
        uint64_t v16 = v15 >> 1;
        sub_216184B80((char *)&v34, v37, v15 >> 1);
      }
      else
      {
        uint64_t v16 = (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)a2 + 312))(a2, v12);
        sub_216184B80((char *)&v34, v8, v16);
      }
      id v17 = v32;
      if (v32 >= v33)
      {
        long long v19 = (char *)__p;
        uint64_t v20 = v32 - (unsigned char *)__p;
        if (v32 - (unsigned char *)__p <= -3) {
          sub_21610CB04();
        }
        uint64_t v21 = v20 >> 1;
        if (v33 - (unsigned char *)__p <= (unint64_t)((v20 >> 1) + 1)) {
          uint64_t v22 = v21 + 1;
        }
        else {
          uint64_t v22 = v33 - (unsigned char *)__p;
        }
        if ((unint64_t)(v33 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v23 = v22;
        }
        if (v23)
        {
          uint64_t v24 = (char *)sub_21610FD44((uint64_t)&v33, v23);
          long long v19 = (char *)__p;
          id v17 = v32;
        }
        else
        {
          uint64_t v24 = 0;
        }
        int v25 = &v24[2 * v21];
        *(_WORD *)int v25 = v16;
        char v18 = v25 + 2;
        while (v17 != v19)
        {
          __int16 v26 = *((_WORD *)v17 - 1);
          v17 -= 2;
          *((_WORD *)v25 - 1) = v26;
          v25 -= 2;
        }
        std::string __p = v25;
        unint64_t v32 = v18;
        float v33 = &v24[2 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(_WORD *)unint64_t v32 = v16;
        char v18 = v17 + 2;
      }
      unint64_t v32 = v18;
      v2 += v16;
      v8 += 2 * (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)a2 + 312))(a2, v12++);
    }
    while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11[1] - *v11) >> 3));
    id v27 = v34;
    CFStringRef v28 = v35;
  }
  sub_2162320EC(a2, v27, (v28 - (unsigned char *)v27) >> 1, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v32 = (char *)__p;
    operator delete(__p);
  }
  if (v34)
  {
    unint64_t v35 = v34;
    operator delete(v34);
  }
  return v2;
}

void sub_2161C64BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2161C64F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, unint64_t a6, char a7)
{
  unsigned __int16 v14 = *(_WORD *)(a3 + 26);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v30 = 0uLL;
  long long v29 = *(_OWORD *)sub_216268B0C();
  if (*(unsigned char *)(a3 + 38) == 1 || (a7 & 0x20) == 0 || (*(unsigned char *)(a3 + 37) & 8) != 0) {
    goto LABEL_20;
  }
  uint64_t v15 = *(unsigned __int16 *)(a3 + 26);
  if (!a2) {
    uint64_t v15 = 0;
  }
  v28[0] = a2;
  v28[1] = v15;
  sub_216183E18(v28, (unint64_t *)&v32, 0, 0, &v25);
  uint64_t v31 = v26;
  long long v30 = v25;
  unint64_t v16 = HIBYTE(v26);
  if (v26 >= 0) {
    id v17 = &v30;
  }
  else {
    id v17 = (long long *)v30;
  }
  if (v26 < 0) {
    unint64_t v16 = *((void *)&v30 + 1);
  }
  unint64_t v18 = v17 ? v16 : 0;
  *(void *)&long long v29 = v17;
  *((void *)&v29 + 1) = v18;
  if (!v18) {
    goto LABEL_20;
  }
  if ((unsigned __int16)v18 <= 0x80uLL)
  {
    unsigned __int16 v14 = v18;
    if ((a4 & 4) == 0 || !v32)
    {
      uint64_t v21 = (unsigned __int16)v18 - 1;
      unsigned int v22 = *((unsigned __int16 *)v17 + v21);
      if (v22 <= 0xFF && memchr("bcdfghjklmpqrstvwxyz", (char)v22, 0x15uLL)) {
        *((_WORD *)v17 + v21) = 12387;
      }
LABEL_21:
      *(void *)&long long v25 = 0;
      *((void *)&v25 + 1) = &v25;
      uint64_t v26 = 0x2000000000;
      unint64_t v27 = 0;
      if (*(_DWORD *)(a3 + 12))
      {
        if ((a4 & 4) != 0 && v32)
        {
          v23[0] = MEMORY[0x263EF8330];
          v23[1] = 0x40000000;
          v23[2] = sub_2161C67BC;
          v23[3] = &unk_264266C98;
          v23[4] = &v25;
          void v23[5] = a1;
          int v24 = a4;
          v23[6] = a3;
          v23[7] = a5;
          v23[8] = a6;
          sub_216184A54((uint64_t)&v29, v32, (uint64_t)v23);
          unint64_t v19 = *(void *)(*((void *)&v25 + 1) + 24);
        }
        else
        {
          unint64_t v19 = (*(int (**)(void, long long *, uint64_t))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), v17, 2 * v14);
          *(void *)(*((void *)&v25 + 1) + 24) = v19;
        }
      }
      else
      {
        unint64_t v19 = 2 * v14;
        unint64_t v27 = v19;
        if (v19 <= a6)
        {
          memcpy(a5, v17, 2 * v14);
        }
        else
        {
          unint64_t v19 = 0;
          unint64_t v27 = 0;
        }
      }
      _Block_object_dispose(&v25, 8);
      if (v31 < 0) {
        goto LABEL_30;
      }
      return v19;
    }
LABEL_20:
    id v17 = (long long *)a2;
    goto LABEL_21;
  }
  unint64_t v19 = 0;
  if (v26 < 0) {
LABEL_30:
  }
    operator delete((void *)v30);
  return v19;
}

void sub_2161C678C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (*(char *)(v19 - 89) < 0) {
    operator delete(*(void **)(v19 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161C67BC(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void, void, void, void))(**(void **)(*(void *)(a1 + 40) + 8) + 88))(*(void *)(*(void *)(a1 + 40) + 8), *a2, a2[1] - *a2, *(unsigned int *)(*(void *)(a1 + 48) + 12), *(unsigned __int8 *)(*(void *)(a1 + 48) + 36), *(_DWORD *)(a1 + 72) | 0x10000u, *(void *)(a1 + 56), *(void *)(a1 + 64));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (int)result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *a3 = 1;
  }
  return result;
}

unsigned char *sub_2161C6854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 416);
  if (v4 && (unint64_t v5 = *(unsigned int *)(a2 + 12), v5) && (v7 = (v5 >> 8) & 0xFFFFF, *(void *)(a1 + 424) > v7))
  {
    sub_2160F7108(a1 + 368, *(unsigned int *)(v4 + 4 * v7));
    sub_216105C3C((unint64_t *)(a1 + 360), a1 + 368);
    unint64_t v8 = (unint64_t)*(unsigned int *)(a1 + 400) >> 1;
    int v9 = *(void **)(a1 + 392);
    return sub_21617FAAC(a3, v9, v8);
  }
  else
  {
    return sub_216184F68(a3, byte_2163CA662);
  }
}

void sub_2161C6908()
{
  sub_2161A2A80();
  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2000000000;
  int v1 = 0x7FFFFFFF;
  sub_216355E2C();
}

void sub_2161C6A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2161C6AA0(uint64_t a1, uint64_t a2)
{
  id v3 = *(unsigned __int16 ***)(a1 + 48);
  unint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (v5 != v4)
  {
    while (*v5 != *(__int16 *)(a2 + 92))
    {
      if (++v5 == v4)
      {
        unint64_t v5 = v4;
        break;
      }
    }
  }
  if (v5 == v4)
  {
    __int16 v6 = *(_WORD *)(a2 + 92);
    int v7 = *(__int16 *)(a2 + 84);
    int v8 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 40) + 8) + 64))(*(void *)(*(void *)(a1 + 40) + 8), *(unsigned __int16 *)(a1 + 64));
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(_WORD **)(v9 + 8);
    unint64_t v11 = *(void *)(v9 + 16);
    if ((unint64_t)v10 >= v11)
    {
      uint64_t v13 = *(_WORD **)v9;
      uint64_t v14 = (uint64_t)v10 - *(void *)v9;
      if (v14 <= -3) {
        sub_21610CB04();
      }
      uint64_t v15 = v14 >> 1;
      unint64_t v16 = v11 - (void)v13;
      if (v16 <= (v14 >> 1) + 1) {
        unint64_t v17 = v15 + 1;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v16 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v18 = v17;
      }
      if (v18)
      {
        uint64_t v19 = (char *)sub_21610FD44(v9 + 16, v18);
        uint64_t v13 = *(_WORD **)v9;
        uint64_t v10 = *(_WORD **)(v9 + 8);
      }
      else
      {
        uint64_t v19 = 0;
      }
      uint64_t v20 = &v19[2 * v15];
      uint64_t v21 = &v19[2 * v18];
      *(_WORD *)uint64_t v20 = v6;
      unint64_t v12 = v20 + 2;
      while (v10 != v13)
      {
        __int16 v22 = *--v10;
        *((_WORD *)v20 - 1) = v22;
        v20 -= 2;
      }
      *(void *)uint64_t v9 = v20;
      *(void *)(v9 + ++**(_DWORD **)(result + 8) = v12;
      *(void *)(v9 + 16) = v21;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      _WORD *v10 = v6;
      unint64_t v12 = v10 + 1;
    }
    int v23 = v8 + v7;
    *(void *)(v9 + ++**(_DWORD **)(result + 8) = v12;
    uint64_t v24 = *(void *)(a1 + 56);
    long long v25 = *(_DWORD **)(v24 + 8);
    unint64_t v26 = *(void *)(v24 + 16);
    if ((unint64_t)v25 >= v26)
    {
      CFStringRef v28 = *(_DWORD **)v24;
      uint64_t v29 = ((uint64_t)v25 - *(void *)v24) >> 2;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62) {
        sub_21610CB04();
      }
      uint64_t v31 = v26 - (void)v28;
      if (v31 >> 1 > v30) {
        unint64_t v30 = v31 >> 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        float v33 = (char *)sub_2161129B4(v24 + 16, v32);
        CFStringRef v28 = *(_DWORD **)v24;
        long long v25 = *(_DWORD **)(v24 + 8);
      }
      else
      {
        float v33 = 0;
      }
      BOOL v34 = &v33[4 * v29];
      unint64_t v35 = &v33[4 * v32];
      *(_DWORD *)BOOL v34 = v23;
      unint64_t v27 = v34 + 4;
      while (v25 != v28)
      {
        int v36 = *--v25;
        *((_DWORD *)v34 - 1) = v36;
        v34 -= 4;
      }
      *(void *)uint64_t v24 = v34;
      *(void *)(v24 + ++**(_DWORD **)(result + 8) = v27;
      *(void *)(v24 + 16) = v35;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      _DWORD *v25 = v23;
      unint64_t v27 = v25 + 1;
    }
    *(void *)(v24 + ++**(_DWORD **)(result + 8) = v27;
    uint64_t v37 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v23 < *(_DWORD *)(v37 + 24)) {
      *(_DWORD *)(v37 + 24) = v23;
    }
  }
}

void sub_2161C6CD0(uint64_t a1)
{
  sub_2161C6D08(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161C6D08(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C07E8;
  uint64_t v2 = a1 + 16;
  sub_216180AD8(a1 + 16);
  *(void *)(a1 + 416) = 0;
  sub_216105D74((void **)(a1 + 360));
  sub_2160F6FB0(a1 + 368);
  sub_2161055D8(a1 + 360);
  sub_21618098C(v2);
  return a1;
}

BOOL sub_2161C6D88(uint64_t a1, const char *a2)
{
  v55[19] = *MEMORY[0x263EF8340];
  sub_21613025C(v53);
  uint64_t v4 = v53[0];
  if ((v54[*(void *)(v53[0] - 24) + 16] & 5) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 128);
    unint64_t v5 = (void *)(a1 + 128);
    std::ios_base::clear((std::ios_base *)((char *)v5 + *(void *)(v6 - 24)), 0);
    int v7 = sub_216129E78(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/param.cpp", 59);
    sub_216129E78(v7, (uint64_t)"(", 1);
    int v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_216129E78(v8, (uint64_t)") [", 3);
    uint64_t v10 = sub_216129E78(v9, (uint64_t)"ifs", 3);
    unint64_t v11 = sub_216129E78(v10, (uint64_t)"] ", 2);
    unint64_t v12 = sub_216129E78(v11, (uint64_t)"no such file or directory: ", 27);
    size_t v13 = strlen(a2);
    sub_216129E78(v12, (uint64_t)a2, v13);
    BOOL v14 = 0;
    goto LABEL_61;
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v15 = (std::locale::id *)MEMORY[0x263F8C108];
  uint64_t v16 = MEMORY[0x263EF8318];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(v4 - 24)));
    unint64_t v17 = std::locale::use_facet((const std::locale *)&v50, v15);
    unsigned __int8 v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale((std::locale *)&v50);
    uint64_t v19 = sub_2161575FC(v53, (uint64_t)&__str, v18);
    BOOL v14 = (*(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 32) & 5) != 0;
    if ((*(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 32) & 5) != 0) {
      break;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_51;
      }
      int v20 = *__str.__r_.__value_.__l.__data_;
    }
    else
    {
      if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
        goto LABEL_51;
      }
      int v20 = __str.__r_.__value_.__s.__data_[0];
    }
    if (v20 != 59 && v20 != 35)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (!size
        || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (std::string::size_type v22 = (std::string::size_type)&__str)
          : (std::string::size_type v22 = __str.__r_.__value_.__r.__words[0]),
            (int v23 = (char *)memchr((void *)v22, 61, size)) == 0 || (v24 = v23, &v23[-v22] == (char *)-1)))
      {
        uint64_t v39 = *(void *)(a1 + 128);
        uint64_t v38 = (void *)(a1 + 128);
        std::ios_base::clear((std::ios_base *)((char *)v38 + *(void *)(v39 - 24)), 0);
        unint64_t v40 = sub_216129E78(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/param.cpp", 59);
        sub_216129E78(v40, (uint64_t)"(", 1);
        unint64_t v41 = (void *)std::ostream::operator<<();
        uint64_t v42 = sub_216129E78(v41, (uint64_t)") [", 3);
        unint64_t v43 = sub_216129E78(v42, (uint64_t)"pos != std::string::npos", 24);
        uint64_t v44 = sub_216129E78(v43, (uint64_t)"] ", 2);
        uint64_t v45 = sub_216129E78(v44, (uint64_t)"format error: ", 14);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = __str.__r_.__value_.__l.__size_;
        }
        sub_216129E78(v45, (uint64_t)p_str, v47);
        break;
      }
      unint64_t v25 = (unint64_t)&v23[-v22 + 1];
      do
      {
        std::string::size_type v26 = v25;
        std::string::size_type v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v27 = __str.__r_.__value_.__l.__size_;
        }
        if (v25 >= v27) {
          break;
        }
        CFStringRef v28 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__str
            : (std::string *)__str.__r_.__value_.__r.__words[0];
        unsigned int v29 = v28->__r_.__value_.__s.__data_[v26];
        int v30 = (v29 & 0x80000000) != 0 ? __maskrune(v29, 0x4000uLL) : *(_DWORD *)(v16 + 4 * v29 + 60) & 0x4000;
        unint64_t v25 = v26 + 1;
      }
      while (v30);
      uint64_t v31 = &v24[~v22];
      while (1)
      {
        unint64_t v32 = v31;
        std::string::size_type v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if (((unint64_t)v32 & 0x8000000000000000) != 0) {
          break;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v34 = &__str;
        }
        else {
          BOOL v34 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        unsigned int v35 = v32[(void)v34];
        if ((v35 & 0x80000000) != 0) {
          int v36 = __maskrune(v35, 0x4000uLL);
        }
        else {
          int v36 = *(_DWORD *)(v16 + 4 * v35 + 60) & 0x4000;
        }
        uint64_t v31 = v32 - 1;
        if (!v36)
        {
          std::string::size_type v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          break;
        }
      }
      if ((v33 & 0x80u) != 0) {
        std::string::size_type v33 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string(&v50, &__str, v26, v33 - v26, (std::allocator<char> *)&__p);
      std::string::basic_string(&__p, &__str, 0, (std::string::size_type)(v32 + 1), (std::allocator<char> *)&v52);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_2161C2230(a1, (char *)p_p, (uint64_t)&v50, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
    }
LABEL_51:
    uint64_t v4 = v53[0];
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_61:
  v53[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v53 + *(void *)(v53[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166CA430](v54);
  std::istream::~istream();
  MEMORY[0x2166CA750](v55);
  return v14;
}

void sub_2161C72C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_216130420(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_2161C7344(uint64_t a1, int a2, char **a3, uint64_t a4)
{
  v103[2] = *MEMORY[0x263EF8340];
  if (a2 <= 0)
  {
    if (*(char *)(a1 + 79) < 0)
    {
      *(void *)(a1 + 64) = 7;
      unint64_t v25 = *(char **)(a1 + 56);
    }
    else
    {
      unint64_t v25 = (char *)(a1 + 56);
      *(unsigned char *)(a1 + 79) = 7;
    }
    strcpy(v25, "unknown");
    return 1;
  }
  sub_21610B834(&v100, *a3);
  unint64_t v5 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)unint64_t v5 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
  *(void *)(a1 + 72) = *((void *)&v100.__r_.__value_.__l + 2);
  sub_21610B834(&v98, "MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n");
  uint64_t v6 = std::string::append(&v98, "\nUsage: ", 8uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a1 + 79);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)(a1 + 56);
  }
  else {
    uint64_t v9 = *(const std::string::value_type **)(a1 + 56);
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    std::string::size_type v10 = *(void *)(a1 + 64);
  }
  unint64_t v11 = std::string::append(&v99, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  size_t v13 = std::string::append(&v100, " [options] files\n", 0x11uLL);
  BOOL v14 = (std::string *)(a1 + 80);
  std::string::size_type v15 = v13->__r_.__value_.__r.__words[0];
  v103[0] = v13->__r_.__value_.__l.__size_;
  *(void *)((char *)v103 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(v14->__r_.__value_.__l.__data_);
  }
  uint64_t v17 = v103[0];
  *(void *)(a1 + 8sub_216195B94(&qword_26797EF28, 0) = v15;
  *(void *)(a1 + 8++**(_DWORD **)(result + 8) = v17;
  *(void *)(a1 + 95) = *(void *)((char *)v103 + 7);
  *(unsigned char *)(a1 + 103) = v16;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  sub_21610B834(&v98, "mecab");
  unsigned __int8 v18 = std::string::append(&v98, " of ", 4uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = std::string::append(&v99, "0.996", 5uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v100, 10);
  v103[0] = v100.__r_.__value_.__l.__size_;
  std::string::size_type v22 = v100.__r_.__value_.__r.__words[0];
  *(void *)((char *)v103 + 7) = *(std::string::size_type *)((char *)&v100.__r_.__value_.__r.__words[1] + 7);
  char v23 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  memset(&v100, 0, sizeof(v100));
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    int v26 = SHIBYTE(v100.__r_.__value_.__r.__words[2]);
    uint64_t v27 = v103[0];
    *(void *)(a1 + 104) = v22;
    *(void *)(a1 + 112) = v27;
    *(void *)(a1 + 119) = *(void *)((char *)v103 + 7);
    *(unsigned char *)(a1 + 127) = v23;
    if (v26 < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v24 = v103[0];
    *(void *)(a1 + 104) = v22;
    *(void *)(a1 + 112) = v24;
    *(void *)(a1 + 119) = *(void *)((char *)v103 + 7);
    *(unsigned char *)(a1 + 127) = v23;
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  CFStringRef v28 = *(const char **)a4;
  if (*(void *)a4)
  {
    size_t v29 = 0;
    int v30 = (const char **)(a4 + 40);
    uint64_t v31 = *(const char **)a4;
    do
    {
      size_t v32 = strlen(v31);
      std::string::size_type v33 = *(v30 - 2);
      if (v33) {
        size_t v34 = v32 + strlen(v33) + 2;
      }
      else {
        size_t v34 = v32 + 1;
      }
      if (v34 > v29) {
        size_t v29 = v34;
      }
      unsigned int v35 = *v30;
      v30 += 5;
      uint64_t v31 = v35;
    }
    while (v35);
    uint64_t v36 = 0;
    uint64_t v37 = (const char **)a4;
    do
    {
      size_t v38 = strlen(v28);
      uint64_t v39 = a4 + 40 * v36;
      uint64_t v42 = *(const char **)(v39 + 24);
      unint64_t v41 = (const char **)(v39 + 24);
      unint64_t v40 = v42;
      if (v42) {
        v38 += strlen(v40) + 1;
      }
      std::string::append(v14, " -", 2uLL);
      std::string::push_back(v14, *(unsigned char *)(a4 + 40 * v36 + 8));
      std::string::append(v14, ", --", 4uLL);
      unint64_t v43 = *v37;
      std::string::size_type v44 = strlen(v43);
      std::string::append(v14, v43, v44);
      if (*v41)
      {
        std::string::push_back(v14, 61);
        std::string::size_type v45 = strlen(*v41);
        std::string::append(v14, *v41, v45);
      }
      while (v38 <= v29)
      {
        std::string::push_back(v14, 32);
        ++v38;
      }
      std::string::size_type v46 = strlen(*(const char **)(a4 + 40 * v36 + 32));
      std::string::append(v14, *(const std::string::value_type **)(a4 + 40 * v36 + 32), v46);
      std::string::push_back(v14, 10);
      ++v36;
      uint64_t v37 = (const char **)(a4 + 40 * v36);
      CFStringRef v28 = *v37;
    }
    while (*v37);
  }
  std::string::push_back(v14, 10);
  std::string::size_type v47 = *(char **)a4;
  uint64_t v48 = a1;
  if (*(void *)a4)
  {
    long long v49 = (char **)(a4 + 40);
    do
    {
      std::string v50 = *(v49 - 3);
      if (v50)
      {
        sub_21610B834(&v100, v50);
        uint64_t v48 = a1;
        sub_2161C2230(a1, v47, (uint64_t)&v100, 1);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
      }
      unint64_t v51 = *v49;
      v49 += 5;
      std::string::size_type v47 = v51;
    }
    while (v51);
  }
  uint64_t result = 1;
  if (a2 < 2) {
    return result;
  }
  unint64_t v53 = (uint64_t *)(v48 + 32);
  uint64_t v54 = v48 + 48;
  LODWORD(v55) = 1;
  long long v56 = a3;
  uint64_t v94 = v48 + 48;
  while (1)
  {
    uint64_t v57 = v56[(int)v55];
    if (*v57 != 45)
    {
      sub_21610B834(&v99, v56[(int)v55]);
      unint64_t v63 = *(void *)(a1 + 40);
      unint64_t v62 = *(void *)(a1 + 48);
      if (v63 >= v62)
      {
        unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - *v53) >> 3);
        unint64_t v66 = v65 + 1;
        if (v65 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - *v53) >> 3);
        if (2 * v67 > v66) {
          unint64_t v66 = 2 * v67;
        }
        if (v67 >= 0x555555555555555) {
          unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v68 = v66;
        }
        uint64_t v102 = v54;
        if (v68) {
          uint64_t v69 = (char *)sub_216129BFC(v54, v68);
        }
        else {
          uint64_t v69 = 0;
        }
        std::string::size_type v76 = (std::string::size_type)&v69[24 * v65];
        v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
        v100.__r_.__value_.__l.__size_ = v76;
        unint64_t v101 = &v69[24 * v68];
        long long v77 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
        *(void *)(v76 + 16) = *((void *)&v99.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v76 = v77;
        memset(&v99, 0, sizeof(v99));
        v100.__r_.__value_.__r.__words[2] = v76 + 24;
        sub_21613FBD0(v53, &v100);
        uint64_t v78 = *(void *)(a1 + 40);
        sub_21613FD68((uint64_t)&v100);
        int v79 = SHIBYTE(v99.__r_.__value_.__r.__words[2]);
        *(void *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = v78;
        if (v79 < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v64 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
        *(void *)(v63 + 16) = *((void *)&v99.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v63 = v64;
        *(void *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = v63 + 24;
      }
LABEL_99:
      long long v56 = a3;
      goto LABEL_100;
    }
    int v58 = v57[1];
    if (v57[1]) {
      break;
    }
LABEL_100:
    LODWORD(v55) = v55 + 1;
    if ((int)v55 >= a2) {
      return 1;
    }
  }
  uint64_t v59 = (int)v55;
  if (v58 != 45)
  {
    uint64_t v74 = *(char **)a4;
    if (!*(void *)a4) {
      goto LABEL_106;
    }
    if (*(unsigned __int8 *)(a4 + 8) != v58)
    {
      uint64_t v75 = 0;
      char v80 = (unsigned __int8 *)(a4 + 48);
      while (1)
      {
        uint64_t v74 = (char *)*((void *)v80 - 1);
        if (!v74) {
          break;
        }
        int v81 = *v80;
        v80 += 40;
        ++v75;
        if (v81 == v58) {
          goto LABEL_85;
        }
      }
LABEL_106:
      size_t v86 = strlen(a3[(int)v55]);
      unint64_t v87 = sub_216129E78(v85, (uint64_t)a3[(int)v55], v86);
      return 0;
    }
    uint64_t v75 = 0;
LABEL_85:
    int v84 = v57[2];
    unint64_t v83 = v57 + 2;
    int v82 = v84;
    uint64_t v54 = v94;
    if (!*(void *)(a4 + 40 * v75 + 24))
    {
      if (v82) {
        goto LABEL_112;
      }
      LODWORD(v100.__r_.__value_.__l.__data_) = 1;
      sub_2161C7D80(a1, v74);
      goto LABEL_99;
    }
    if (v82)
    {
      sub_21610B834(&v100, v83);
      sub_2161C2230(a1, v74, (uint64_t)&v100, 1);
      goto LABEL_104;
    }
    uint64_t v55 = (int)v55 + 1;
    if (v59 + 1 == a2) {
      goto LABEL_113;
    }
    sub_21610B834(&v100, a3[v55]);
    sub_2161C2230(a1, v74, (uint64_t)&v100, 1);
    long long v56 = a3;
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
    goto LABEL_100;
  }
  for (size_t i = 0; ; ++i)
  {
    int v61 = v57[i + 2];
    if (!v57[i + 2] || v61 == 61) {
      break;
    }
  }
  if (!i) {
    return 1;
  }
  int v70 = *(char **)a4;
  if (!*(void *)a4) {
    goto LABEL_106;
  }
  __int16 v71 = v53;
  CFTypeRef v72 = (char **)(a4 + 40);
  while (strlen(v70) != i || strncmp(v57 + 2, v70, i))
  {
    long long v73 = *v72;
    v72 += 5;
    int v70 = v73;
    if (!v73) {
      goto LABEL_106;
    }
  }
  if (!*(v72 - 2))
  {
    uint64_t v54 = v94;
    if (v61 == 61)
    {
LABEL_112:
      size_t v89 = strlen(a3[(int)v55]);
      uint64_t v90 = sub_216129E78(v88, (uint64_t)a3[(int)v55], v89);
      return 0;
    }
    unint64_t v53 = v71;
    LODWORD(v100.__r_.__value_.__l.__data_) = 1;
    sub_2161C7D80(a1, v70);
    goto LABEL_99;
  }
  unint64_t v53 = v71;
  if (v61 == 61)
  {
    sub_21610B834(&v100, &v57[i + 3]);
    uint64_t v54 = v94;
    sub_2161C2230(a1, v70, (uint64_t)&v100, 1);
    goto LABEL_104;
  }
  uint64_t v55 = (int)v55 + 1;
  uint64_t v54 = v94;
  if (v59 + 1 != a2)
  {
    sub_21610B834(&v100, a3[v55]);
    sub_2161C2230(a1, v70, (uint64_t)&v100, 1);
LABEL_104:
    long long v56 = a3;
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
    goto LABEL_100;
  }
LABEL_113:
  size_t v92 = strlen(a3[v59]);
  uint64_t v93 = sub_216129E78(v91, (uint64_t)a3[v59], v92);
  return 0;
}

void sub_2161C7CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161C7D80(uint64_t a1, char *a2)
{
  v32[2] = *MEMORY[0x263EF8340];
  sub_21610B834(v24, a2);
  sub_216140140((uint64_t)v28);
  memset(&v27, 0, sizeof(v27));
  id v3 = (void *)std::ostream::operator<<();
  if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
    goto LABEL_30;
  }
  MEMORY[0x2166CA470](&v31, v28, 0);
  if (!v31) {
    goto LABEL_28;
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    *v27.__r_.__value_.__l.__data_ = 0;
    v27.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    v27.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&v27.__r_.__value_.__s + 23) = 0;
  }
  uint64_t v4 = (const std::ios_base *)((char *)v28 + *((void *)v28[0] - 3));
  uint64_t width = v4->__width_;
  if (width <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v4->__width_;
  }
  std::ios_base::getloc(v4);
  long long v7 = std::locale::use_facet(&v26, MEMORY[0x263F8C108]);
  std::locale::~locale(&v26);
  uint64_t v8 = 0;
  if (width >= 1) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    std::string::size_type v10 = *(long long **)((char *)&v28[5] + *((void *)v28[0] - 3));
    unint64_t v11 = (unsigned char *)v10[3];
    if (v11 == (unsigned char *)v10[4]) {
      break;
    }
    LOBYTE(v12) = *v11;
LABEL_16:
    if ((v12 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v12) & 0x4000) != 0)
    {
      int v15 = 0;
      goto LABEL_25;
    }
    std::string::push_back(&v27, v12);
    size_t v13 = *(long long **)((char *)&v28[5] + *((void *)v28[0] - 3));
    uint64_t v14 = v13[3];
    if (v14 == v13[4]) {
      (*(void (**)(void *))(*v13 + 80))(v13);
    }
    else {
      v13[3] = v14 + 1;
    }
    if (v9 == ++v8)
    {
      int v15 = 0;
      uint64_t v8 = 1;
      goto LABEL_25;
    }
  }
  int v12 = (*(uint64_t (**)(void *))(*v10 + 72))(v10);
  if (v12 != -1) {
    goto LABEL_16;
  }
  int v15 = 2;
LABEL_25:
  char v16 = v28[0];
  *(long long **)((char *)&v28[3] + *((void *)v28[0] - 3)) = 0;
  if (!v8) {
    v15 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)v28 + *((void *)v16 - 3)), *(_DWORD *)((char *)&v28[4] + *((void *)v16 - 3)) | v15);
LABEL_28:
  if ((*((unsigned char *)&v28[4] + *((void *)v28[0] - 3)) & 5) != 0
    || (uint64_t v17 = sub_216179138(v28), (*((unsigned char *)v17 + *(void *)(*v17 - 24) + 32) & 2) == 0))
  {
LABEL_30:
    operator new();
  }
  v32[0] = v27.__r_.__value_.__l.__size_;
  std::string::size_type v22 = v27.__r_.__value_.__r.__words[0];
  *(void *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7);
  char v23 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  v28[0] = *(long long **)MEMORY[0x263F8C2B8];
  unsigned __int8 v18 = *(long long **)(MEMORY[0x263F8C2B8] + 72);
  *(long long **)((char *)v28 + *((void *)v28[0] - 3)) = *(long long **)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v28[2] = v18;
  v28[3] = (long long *)(MEMORY[0x263F8C318] + 16);
  if (v29 < 0) {
    operator delete(v28[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](&v30);
  v28[0] = (long long *)v24;
  long long v19 = sub_2161C2518((uint64_t **)(a1 + 8), v24, (uint64_t)&unk_21636EABA, v28);
  int v20 = v19;
  if (*((char *)v19 + 79) < 0) {
    operator delete((void *)v19[7]);
  }
  uint64_t v21 = v32[0];
  v20[7] = v22;
  v20[8] = v21;
  *(uint64_t *)((char *)v20 + 71) = *(void *)((char *)v32 + 7);
  *((unsigned char *)v20 + 79) = v23;
  if (v25 < 0) {
    operator delete(v24[0]);
  }
}

void sub_2161C827C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a2)
  {
    std::locale::~locale(&a15);
    __cxa_begin_catch(exception_object);
    uint64_t v24 = a23;
    *(_DWORD *)((char *)&a23 + *(void *)(a23 - 24) + 32) |= 1u;
    if ((*((unsigned char *)&a23 + *(void *)(v24 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x2161C7FE0);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_2161C839C()
{
}

void sub_2161C8624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x2166CA7C0](a11, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161C8660(uint64_t a1)
{
  if (sub_2161B7248(a1, "help"))
  {
    uint64_t v2 = (const char *)(a1 + 80);
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_4:
      size_t v3 = strlen(v2);
      sub_216129E78(MEMORY[0x263F8C100], (uint64_t)v2, v3);
      return 0;
    }
LABEL_3:
    uint64_t v2 = *(const char **)v2;
    goto LABEL_4;
  }
  if (sub_2161B7248(a1, "version"))
  {
    uint64_t v2 = (const char *)(a1 + 104);
    if ((*(char *)(a1 + 127) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  return 1;
}

uint64_t sub_2161C86EC(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  if (qword_26797D4F0 != -1) {
    dispatch_once(&qword_26797D4F0, &unk_26C6C9F40);
  }
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  uint64_t v4 = (void *)qword_26797D4E8;
  uint64_t v5 = [a1 length:a2, a3];
  uint64_t v60 = [v4 matchesInString:v6 options:(uint64_t)a1 range:v5];
  uint64_t result = [v60 countByEnumeratingWithState:v7 objects:&v61 count:16];
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = *(void *)v62;
    while (2)
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v62 != v12) {
          objc_enumerationMutation(v60);
        }
        uint64_t v14 = *(void **)(*((void *)&v61 + 1) + 8 * v13);
        if (v14 && objc_msgSend_numberOfRanges(*(void **)(*((void *)&v61 + 1) + 8 * v13), v9, v10) == 6)
        {
          [v14 rangeAtIndex:3];
          char v16 = v15;
          uint64_t v17 = [v14 rangeAtIndex:2];
          uint64_t v59 = [a1 substringWithRange:v18];
          uint64_t v20 = [v14 rangeAtIndex:5];
          uint64_t v58 = [a1 substringWithRange:v21];
          uint64_t v23 = [v14 rangeAtIndex:1];
          char v25 = [a1 substringWithRange:v24];
          uint64_t v27 = [v14 rangeAtIndex:4];
          char v29 = [a1 substringWithRange:v28];
          [v25 v30:v31];
          MEMORY[0x270FA5388]();
          std::string::size_type v33 = (char *)&v57 - v32;
          [v29 v34:v35];
          MEMORY[0x270FA5388]();
          uint64_t v37 = (char *)&v57 - v36;
          uint64_t v40 = [v25 length:v38, v39];
          [v25 getCharacters:v41 range:0];
          uint64_t v44 = [v29 lengthOfBytesUsingEncoding:v42];
          [v29 getCharacters:v45 range:(NSRange){v37, 0}];
          uint64_t v48 = [v25 length:v46];
          int v49 = sub_2161EC60C((uint64_t)v33, v48, 0, 0);
          uint64_t v52 = [v29 length:v50];
          int v53 = sub_2161EC60C((uint64_t)v37, v52, 0, 0);
          if (v16) {
            int v54 = ![v59 isEqualToString:v9] ^ 1;
          }
          else {
            int v54 = 0;
          }
          if (v49 == v53) {
            int v54 = 1;
          }
          BOOL v55 = !v49 || v53 == 0;
          if (v55 || v54 == 0) {
            return 1;
          }
        }
        ++v13;
      }
      while (v11 != v13);
      uint64_t result = [v60 countByEnumeratingWithState:v9 objects:v65 count:16];
      uint64_t v11 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_2161C8A20()
{
  id v0 = objc_alloc(MEMORY[0x263F08AE8]);
  uint64_t result = [v0 initWithPattern:@"([0-9０-９〇一二三四五六七八九十]{1,3})([時分秒年月日])(か|から|〜｜・|、)?([0-9０-９〇一二三四五六七八九十]{1,3})([時分秒年月日])", options:0, error:0];
  qword_26797D4E8 = result;
  return result;
}

void sub_2161C8A5C(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, std::string *a6@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D500, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D500))
  {
    word_26797D4F8 = *(_WORD *)(*(void *)(a1 + 88) + 50);
    __cxa_guard_release(&qword_26797D500);
  }
  BOOL v11 = *(unsigned __int16 *)(a4 + 30) == (unsigned __int16)word_26797D4F8
     || *(unsigned __int16 *)(a4 + 32) == (unsigned __int16)word_26797D4F8;
  BOOL v47 = v11;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  a6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = a6;
  std::string v50 = a6;
  std::string::reserve(a6, 3 * a3);
  if (!a3)
  {
    unint64_t v42 = 0;
    goto LABEL_92;
  }
  uint64_t v48 = a3;
  unint64_t v49 = 0;
  unint64_t v13 = 0;
  BOOL v14 = 0;
  do
  {
    uint64_t v15 = 0;
    int v16 = (unsigned __int16)a2[v13];
    BOOL v18 = (v16 - 48) < 0xA || (unsigned __int16)(v16 + 240) < 0xAu;
    while ((unsigned __int16)word_2163CAE3A[v15] != v16)
    {
      if (++v15 == 13)
      {
        long long v19 = 0;
        goto LABEL_20;
      }
    }
    long long v19 = &word_2163CAE3A[v15];
LABEL_20:
    uint64_t v20 = 0;
    if (v19) {
      uint64_t v21 = v19 - word_2163CAE3A;
    }
    else {
      uint64_t v21 = -1;
    }
    while ((unsigned __int16)asc_21638C864[v20] != v16)
    {
      if (++v20 == 32)
      {
        std::string::size_type v22 = 0;
        goto LABEL_27;
      }
    }
    std::string::size_type v22 = &asc_21638C864[v20];
LABEL_27:
    uint64_t v23 = 0;
    if (v22) {
      BOOL v24 = (char *)v22 - (char *)asc_21638C864 == -2;
    }
    else {
      BOOL v24 = 1;
    }
    int v25 = !v24;
    while ((unsigned __int16)word_21638C8A6[v23] != v16)
    {
      if (++v23 == 37)
      {
        std::locale v26 = 0;
        goto LABEL_37;
      }
    }
    std::locale v26 = &word_21638C8A6[v23];
LABEL_37:
    if (v26) {
      BOOL v27 = (char *)v26 - (char *)word_21638C8A6 == -2;
    }
    else {
      BOOL v27 = 1;
    }
    int v28 = !v27;
    if (v47)
    {
      char v29 = (const char *)&unk_2163CAE36;
      if (v16 != 65292) {
        char v29 = 0;
      }
      BOOL v30 = v16 == 44;
      BOOL v31 = v16 == 44 || v16 == 65292;
      if (v30) {
        uint64_t v32 = ",";
      }
      else {
        uint64_t v32 = v29;
      }
      BOOL v33 = v32 - "," != -2 && v31;
    }
    else
    {
      BOOL v33 = 0;
    }
    int v34 = v21 != -1 || v18;
    if ((v28 | v25 | v33 | v34) == 1)
    {
      if (v13 > v49)
      {
        unint64_t v35 = a2 ? v13 - v49 : 0;
        sub_2161E30A8(&a2[v49], v35, &__p);
        uint64_t v36 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        std::string::size_type v37 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::string::append(v50, (const std::string::value_type *)v36, v37);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      unint64_t v49 = v13 + 1;
    }
    if (v33)
    {
      uint64_t v12 = v50;
      goto LABEL_88;
    }
    if (v18)
    {
      size_t v38 = "0";
      uint64_t v12 = v50;
      if (!v14 && v13 != 0)
      {
        std::string::append(v50, " ", 1uLL);
        size_t v38 = "0";
      }
    }
    else
    {
      size_t v38 = " ";
      uint64_t v12 = v50;
      if (!v14) {
        goto LABEL_80;
      }
    }
    std::string::append(v12, v38, 1uLL);
LABEL_80:
    if (v21 != -1)
    {
      std::string::size_type v39 = strlen(off_26426B760[v21]);
      std::string::append(v12, off_26426B760[v21], v39);
      BOOL v14 = v18;
      goto LABEL_88;
    }
    if (v25)
    {
      std::string::push_back(v12, 32);
      uint64_t v40 = "xSYMx";
      std::string::size_type v41 = 5;
LABEL_86:
      std::string::append(v12, v40, v41);
      std::string::push_back(v12, 32);
      BOOL v14 = v18;
      goto LABEL_88;
    }
    if (v28)
    {
      std::string::push_back(v12, 32);
      uint64_t v40 = "xOLTRx";
      std::string::size_type v41 = 6;
      goto LABEL_86;
    }
    BOOL v14 = v18;
LABEL_88:
    ++v13;
  }
  while (v13 != v48);
  a3 = v48;
  unint64_t v42 = v49;
  if (v14)
  {
    std::string::append(v12, " ", 1uLL);
    goto LABEL_103;
  }
LABEL_92:
  if (a2) {
    unint64_t v43 = a3 - v42;
  }
  else {
    unint64_t v43 = 0;
  }
  sub_2161E30A8(&a2[v42], v43, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(v12, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_103:
  if (a5 && a3 == 1 && *a2 == 8451)
  {
    if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
    {
      v12->__r_.__value_.__l.__size_ = 3;
      uint64_t v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&v12->__r_.__value_.__s + 23) = 3;
    }
    LODWORD(v12->__r_.__value_.__l.__data_) = 10926821;
  }
}

void sub_2161C8EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(a12 + 23) < 0) {
    operator delete(*(void **)a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161C8F0C(char *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  memset(&v37, 0, sizeof(v37));
  std::string::reserve(&v37, 3 * a2);
  if (a2)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    while (1)
    {
      uint64_t v9 = &a1[2 * v6];
      int v10 = *(unsigned __int16 *)v9;
      if (v10 == 44) {
        goto LABEL_60;
      }
      if ((v10 - 48) < 0xA || (unsigned __int16)(v10 + 240) < 0xAu)
      {
LABEL_58:
        if (!v7) {
          ++v8;
        }
        goto LABEL_60;
      }
      uint64_t v12 = 0;
      while ((unsigned __int16)word_2163CAE56[v12] != v10)
      {
        if (++v12 == 10) {
          goto LABEL_14;
        }
      }
      if (v12 != -1) {
        goto LABEL_58;
      }
LABEL_14:
      if (a2 == 1)
      {
        if (*(unsigned __int16 *)v9 <= 0x5340u)
        {
          if (v10 == 19975) {
            goto LABEL_24;
          }
LABEL_22:
          if (v10 == 20740 || v10 == 20806)
          {
LABEL_24:
            unsigned int v14 = v8 + v7;
            if (v14 >= 4) {
              unsigned int v14 = 4;
            }
            if (v14 > 1) {
              goto LABEL_34;
            }
            std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
            if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v37.__r_.__value_.__l.__size_;
            }
            if (v10 != 19975 || size)
            {
LABEL_34:
              int v16 = (const char *)*((void *)&off_26426B7C8 + v14);
              sub_2161E30A8(v9, a1 != 0, &v33);
              std::string::size_type v17 = strlen(v16);
              BOOL v18 = std::string::insert(&v33, 0, v16, v17);
              long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
              v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
              v18->__r_.__value_.__l.__size_ = 0;
              v18->__r_.__value_.__r.__words[2] = 0;
              v18->__r_.__value_.__r.__words[0] = 0;
              uint64_t v20 = std::string::append(&v34, " ", 1uLL);
              long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
              int64_t v36 = v20->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v21;
              v20->__r_.__value_.__l.__size_ = 0;
              v20->__r_.__value_.__r.__words[2] = 0;
              v20->__r_.__value_.__r.__words[0] = 0;
              if (v36 >= 0) {
                std::string::size_type v22 = __p;
              }
              else {
                std::string::size_type v22 = (void **)__p[0];
              }
              if (v36 >= 0) {
                std::string::size_type v23 = HIBYTE(v36);
              }
              else {
                std::string::size_type v23 = (std::string::size_type)__p[1];
              }
              std::string::append(&v37, (const std::string::value_type *)v22, v23);
              if (SHIBYTE(v36) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v34.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v33.__r_.__value_.__l.__data_);
              }
              unsigned int v8 = 0;
              unsigned int v7 = 0;
            }
            else
            {
              if (v8 <= 1) {
                unsigned int v8 = 1;
              }
              unsigned int v7 = 4;
            }
            goto LABEL_60;
          }
          goto LABEL_65;
        }
        switch(v10)
        {
          case 21313:
            BOOL v24 = "AS~vCS";
            goto LABEL_64;
          case 21315:
            goto LABEL_54;
          case 30334:
            goto LABEL_62;
        }
      }
      else
      {
        if (*(unsigned __int16 *)v9 <= 0x5340u)
        {
          if (*(unsigned __int16 *)v9 <= 0x5103u)
          {
            if (v10 == 19975) {
              goto LABEL_24;
            }
            int v13 = 20309;
LABEL_57:
            if (v10 == v13) {
              goto LABEL_58;
            }
            goto LABEL_65;
          }
          goto LABEL_22;
        }
        if (*(unsigned __int16 *)v9 > 0x656Fu)
        {
          if (v10 != 30334)
          {
            int v13 = 25968;
            goto LABEL_57;
          }
LABEL_62:
          BOOL v24 = "~vCS";
LABEL_64:
          if (v24 - "AS~vCS" != -2)
          {
            unint64_t v25 = (unint64_t)(v24 - "AS~vCS") >> 1;
            if (v8 <= 1) {
              int v26 = 1;
            }
            else {
              int v26 = v8;
            }
            if ((int)v25 + 1 > v7)
            {
              unsigned int v8 = v26;
              unsigned int v7 = v25 + 1;
            }
            goto LABEL_60;
          }
          goto LABEL_65;
        }
        BOOL v24 = "AS~vCS";
        if (v10 == 21313) {
          goto LABEL_64;
        }
        if (v10 == 21315)
        {
LABEL_54:
          BOOL v24 = "CS";
          goto LABEL_64;
        }
      }
LABEL_65:
      if (!v6)
      {
        sub_2161E30A8(a1, a2, (std::string *)a3);
        goto LABEL_88;
      }
LABEL_60:
      if (++v6 == a2)
      {
        unsigned int v27 = v7 + v8;
        goto LABEL_73;
      }
    }
  }
  unsigned int v27 = 0;
LABEL_73:
  if (v27 >= 4) {
    unsigned int v27 = 4;
  }
  int v28 = (const char *)*((void *)&off_26426B7C8 + v27);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v29 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v29 = v37.__r_.__value_.__l.__size_;
  }
  size_t v30 = strlen(v28);
  sub_21612A88C(a3, v29 + v30);
  if (*(char *)(a3 + 23) < 0) {
    a3 = *(void *)a3;
  }
  if (v29)
  {
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v31 = &v37;
    }
    else {
      BOOL v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    memmove((void *)a3, v31, v29);
  }
  uint64_t v32 = (void *)(a3 + v29);
  if (v30) {
    memmove(v32, v28, v30);
  }
  *((unsigned char *)v32 + v3sub_216195B94(&qword_26797EF28, 0) = 0;
LABEL_88:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_2161C92FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_2161C936C@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, std::string *a6@<X8>)
{
  unint64_t v7 = a3;
  uint64_t v9 = a6;
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, 3 * a3 - 0x3333333333333333 * ((a4[1] - *a4) >> 3));
  uint64_t v10 = *a4;
  if (a4[1] != *a4)
  {
    BOOL v11 = 0;
    unint64_t v12 = 0;
    int v13 = a2;
    unint64_t v14 = v7;
    do
    {
      uint64_t v15 = (int *)(v10 + 40 * v12);
      uint64_t v16 = *((unsigned __int16 *)v15 + 12);
      int v17 = *v15;
      BOOL v31 = *v15 == 5;
      if ((a5 & 1) == 0)
      {
        long long v19 = "xPERGx";
        std::string::size_type v20 = 6;
        switch(v17)
        {
          case 3:
          case 9:
            long long v19 = "墸";
            std::string::size_type v20 = 3;
            goto LABEL_38;
          case 4:
          case 11:
            goto LABEL_38;
          case 8:
            goto LABEL_13;
          default:
            goto LABEL_15;
        }
      }
      BOOL v18 = v17 == 4 || v17 == 11;
      if (v18)
      {
        long long v19 = "xPERGx";
        std::string::size_type v20 = 6;
      }
      else if (v17 == 8)
      {
LABEL_13:
        int v21 = *(unsigned __int16 *)(v10 + 40 * v12 + 30);
        if ((v21 - 1249) >= 3)
        {
          if (v21 == 1252) {
            long long v19 = "xLOCx";
          }
          else {
            long long v19 = "xPROPNx";
          }
          if (v21 == 1252) {
            std::string::size_type v20 = 5;
          }
          else {
            std::string::size_type v20 = 7;
          }
        }
        else
        {
          long long v19 = (&off_26426B7F0)[(__int16)(v21 - 1249)];
          std::string::size_type v20 = 6;
        }
      }
      else
      {
LABEL_15:
        if (v11)
        {
          uint64_t v22 = v13 ? *((unsigned __int16 *)v15 + 12) : 0;
          unint64_t v27 = v22;
          if (sub_2161EC494((unsigned __int16 *)v13, v22) && (v7 < 2 || !a2 || *(_DWORD *)a2 != 1396919808))
          {
            sub_2161E30A8(v13, v27, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            goto LABEL_52;
          }
        }
        if (v17 != 10)
        {
          if (v17 == 5)
          {
            (*(void (**)(std::string *__return_ptr))(*a1 + 48))(&__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
          }
          else
          {
            (*(void (**)(std::string *__return_ptr))(*a1 + 40))(&__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
          }
LABEL_52:
          uint64_t v9 = a6;
          std::string::append(a6, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_54;
        }
        long long v19 = "xPROPNx";
        std::string::size_type v20 = 7;
      }
LABEL_38:
      uint64_t v9 = a6;
      std::string::append(a6, v19, v20);
LABEL_54:
      if (v12 == -1 - 0x3333333333333333 * ((a4[1] - *a4) >> 3))
      {
        ++v12;
      }
      else
      {
        int v25 = sub_2161C07AC(a1[11], *(unsigned __int16 *)(*a4 + 40 * v12 + 32), *(unsigned __int16 *)(*a4 + 40 * v12 + 70));
        ++v12;
        if (v25) {
          std::string::append(v9, " ", 1uLL);
        }
      }
      BOOL v18 = v13 == 0;
      a2 = v13;
      v13 += 2 * v16;
      unint64_t v7 = v14;
      if (v18) {
        unint64_t v14 = 0;
      }
      else {
        v14 -= v16;
      }
      uint64_t v10 = *a4;
      BOOL v11 = v31;
    }
    while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3));
  }
  while (1)
  {
    std::string::size_type result = std::string::find(v9, "気 に なる", 0, 0xEuLL);
    if (result == -1) {
      break;
    }
    std::string::replace(v9, result, 0xEuLL, "気になる", 0xCuLL);
  }
  return result;
}

void sub_2161C97E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a14 + 23) < 0) {
    operator delete(*(void **)a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161C9864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
  unsigned int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 32);

  return v8(a1, v4, v6, v7, 0);
}

void sub_2161C9950(void *a1)
{
  sub_2161C9988(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_2161C9988(void *a1)
{
  *a1 = &unk_26C6BF3D0;
  sub_2161C99FC(a1 + 2);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_2161C99FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_2161C9A80(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v9 = v6;
    if (!v7) {
      sub_21610B7AC();
    }
    unsigned int v8 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, &v9);
    CFDictionaryAddValue(a2, @"acceptedCandidateTypingStyle", v8);
    return 1;
  }
  return result;
}

uint64_t sub_2161C9B60(uint64_t a1)
{
  return a1;
}

void sub_2161C9B8C(uint64_t a1)
{
  sub_2161C9BD8((void *)(a1 + 8));

  JUMPOUT(0x2166CA800);
}

void *sub_2161C9BD8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_2161C9C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

BOOL sub_2161C9CF4(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5 + a2;
  if (v3)
  {
    if (v6 >= v4)
    {
      if (!v4)
      {
        *(void *)(a1 + 16) = 0x2000;
        operator new[]();
      }
      do
      {
        BOOL v7 = v6 >= 2 * v4;
        v4 *= 2;
      }
      while (v7);
      *(void *)(a1 + 16) = v4;
      operator new[]();
    }
    return 1;
  }
  else
  {
    BOOL v7 = v6 >= v4;
    BOOL result = v6 < v4;
    char v9 = v7;
    *(unsigned char *)(a1 + 33) = v9;
  }
  return result;
}

uint64_t sub_2161C9DD8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C4F70;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
    }
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_2161C9E44(uint64_t a1)
{
  sub_2161C9DD8(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161C9E7C(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (sub_2161C9CF4(a1, v4))
  {
    memcpy((void *)(*(void *)(a1 + 24) + *(void *)(a1 + 8)), __s, v4);
    *(void *)(a1 + 8) += v4;
  }
  return a1;
}

uint64_t sub_2161C9EEC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C4AE0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 1;
  *(void *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = 0x3FE8000000000000;
  sub_216128C80(a1 + 48);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 32sub_216195B94(&qword_26797EF28, 0) = 0;
  *(void *)(a1 + 32++**(_DWORD **)(result + 8) = 0;
  return a1;
}

void sub_2161C9F50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 336))(v3);
  }
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161C9FC4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C4AE0;
  uint64_t v2 = a1 + 48;
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 4++**(_DWORD **)(result + 8) = *MEMORY[0x263F8C2C8];
  *(void *)(v2 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *(void *)(a1 + 56) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 160);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 336))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
  }
  return a1;
}

void sub_2161CA164(uint64_t a1)
{
  sub_2161C9FC4(a1);

  JUMPOUT(0x2166CA800);
}

void **sub_2161CA19C(uint64_t a1)
{
  return sub_216178B54(a1 + 48);
}

void sub_2161CA1A4()
{
}

void sub_2161CA284(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C406EC38B7ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_2161CA2A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8)) {
    BOOL v2 = *(void *)(a2 + 24) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
    }
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = a2;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(void *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = *(void *)(a2 + 40);
  }
  return v3;
}

uint64_t sub_2161CA334(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t sub_2161CA354(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 32) >> 2) & 1;
}

double sub_2161CA360(uint64_t a1, float a2)
{
  double result = a2;
  *(double *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = result;
  return result;
}

float sub_2161CA36C(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

uint64_t sub_2161CA378(uint64_t result, unsigned int a2)
{
  if (a2 <= 2) {
    *(_DWORD *)(result + 32) |= dword_21637A824[a2];
  }
  return result;
}

uint64_t sub_2161CA39C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  if ((v1 & 8) != 0) {
    return 2;
  }
  else {
    return (v1 >> 1) & 1;
  }
}

uint64_t sub_2161CA3B4(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 32;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t sub_2161CA3D4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 32) >> 5) & 1;
}

uint64_t sub_2161CA3E0(uint64_t a1, uint64_t a2)
{
  return sub_216176EEC(*(uint64_t **)(*(void *)(a1 + 8) + 8), a2);
}

uint64_t sub_2161CA3EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = sub_2161CA508(a1);
  sub_2161CA574(a1);
  if ((a4 & 2) == 0) {
    (**(void (***)(uint64_t))v8)(v8);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 80))(v8, a2, a3);
  if (!sub_216177294(*(void *)(*(void *)(a1 + 8) + 8), v8, a4)) {
    return 0;
  }
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 16);

  return v9(v8);
}

uint64_t sub_2161CA508(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (!result) {
    sub_216344B04();
  }
  return result;
}

uint64_t sub_2161CA574(uint64_t a1)
{
  uint64_t v2 = sub_2161CA508(a1);
  (*(void (**)(uint64_t, void))(*(void *)v2 + 176))(v2, *(unsigned int *)(a1 + 32));
  uint64_t v3 = sub_2161CA508(a1);
  v4.n128_u64[0] = *(void *)(a1 + 40);
  v4.n128_f32[0] = v4.n128_f64[0];
  uint64_t v5 = *(uint64_t (**)(__n128))(*(void *)v3 + 112);

  return v5(v4);
}

uint64_t sub_2161CA600(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = sub_2161CA508(a1);
  sub_2161CA574(a1);
  if ((a4 & 2) == 0) {
    (**(void (***)(uint64_t))v8)(v8);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 80))(v8, a2, a3);
  if (!sub_216177294(*(void *)(*(void *)(a1 + 8) + 8), v8, a4)) {
    return 0;
  }
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 16);

  return v9(v8);
}

uint64_t sub_2161CA730(uint64_t a1, uint64_t a2, int a3)
{
  return sub_216178774(*(void *)(*(void *)(a1 + 8) + 8), a2, a3);
}

uint64_t sub_2161CA73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21633EAE4(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80), a2, a3);
}

uint64_t sub_2161CA74C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  return sub_21633EB6C(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80), a2, a3);
}

void sub_2161CA75C(uint64_t a1)
{
}

uint64_t sub_2161CA768(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  return sub_216178CF4(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 88), a2, a3);
}

uint64_t sub_2161CA780(uint64_t a1)
{
  uint64_t v2 = (void (***)(void))sub_2161CA508(a1);
  (**v2)(v2);
  uint64_t v3 = sub_2161CA508(a1);
  __n128 v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 200))(v3);
  uint64_t v5 = (void *)v4[2];
  void v5[4] = 0;
  void v5[5] = 0;
  uint64_t v7 = v5[1];
  uint64_t v6 = v5[2];
  if (v6 == v7)
  {
    uint64_t v7 = v5[2];
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x2166CA7C0](v9, 0x1070C80C36FC988);
        uint64_t v7 = v5[1];
        uint64_t v6 = v5[2];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  void v5[2] = v7;
  uint64_t v10 = (void *)v4[4];
  if (v10)
  {
    v10[4] = 0;
    v10[5] = 0;
    uint64_t v12 = v10[1];
    uint64_t v11 = v10[2];
    if (v11 == v12)
    {
      uint64_t v12 = v10[2];
    }
    else
    {
      unint64_t v13 = 0;
      do
      {
        uint64_t v14 = *(void *)(v12 + 8 * v13);
        if (v14)
        {
          MEMORY[0x2166CA7C0](v14, 0x1020C80EDCEB4C7);
          uint64_t v12 = v10[1];
          uint64_t v11 = v10[2];
        }
        ++v13;
      }
      while (v13 < (v11 - v12) >> 3);
    }
    _DWORD v10[2] = v12;
  }
  uint64_t v15 = (void *)v4[6];
  if (v15)
  {
    void v15[4] = 0;
    v15[5] = 0;
    uint64_t v17 = v15[1];
    uint64_t v16 = v15[2];
    if (v16 == v17)
    {
      uint64_t v17 = v15[2];
    }
    else
    {
      unint64_t v18 = 0;
      do
      {
        uint64_t v19 = *(void *)(v17 + 8 * v18);
        if (v19)
        {
          MEMORY[0x2166CA7C0](v19, 0x1050C80717B85FCLL);
          uint64_t v17 = v15[1];
          uint64_t v16 = v15[2];
        }
        ++v18;
      }
      while (v18 < (v16 - v17) >> 3);
    }
    _DWORD v15[2] = v17;
  }
  uint64_t v20 = v4[8];
  if (v20)
  {
    *(void *)(v20 + 32) = 0;
    *(void *)(v20 + 4sub_216195B94(&qword_26797EF28, 0) = 0;
  }
  int v21 = (void *)v4[10];
  if (v21)
  {
    v21[4] = 0;
    v21[5] = 0;
    uint64_t v23 = v21[1];
    uint64_t v22 = v21[2];
    if (v22 == v23)
    {
      uint64_t v23 = v21[2];
    }
    else
    {
      unint64_t v24 = 0;
      uint64_t v25 = 8;
      do
      {
        uint64_t v26 = *(void *)(v23 + v25);
        if (v26)
        {
          MEMORY[0x2166CA7C0](v26, 0x1000C80BDFB0063);
          uint64_t v23 = v21[1];
          uint64_t v22 = v21[2];
        }
        ++v24;
        v25 += 16;
      }
      while (v24 < (v22 - v23) >> 4);
    }
    v21[2] = v23;
  }
  uint64_t v27 = v4[12];
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  v4[12] = 0;
  return 0;
}

uint64_t sub_2161CA9A4(uint64_t a1, unsigned __int16 *a2, std::string::size_type a3, void *a4, size_t a5, int a6, int a7)
{
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80);
  uint64_t v14 = sub_2161CA508(a1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 200))(v14);
  sub_21633D800(v13, v15, a2, a3, a4, a5, a6, a7);
  return 0;
}

unint64_t sub_2161CAA4C(uint64_t a1, const void *a2, size_t a3, int a4, int a5, unsigned int a6, void *a7, unint64_t a8)
{
  return sub_21633E074(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2161CAA5C(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  return sub_21633E25C(*(void **)(*(void *)(*(void *)(a1 + 8) + 8) + 80), a2, a3, a4);
}

unsigned char *sub_2161CAA6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_21633D7C0(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80), a2, a3);
}

void sub_2161CAA7C(uint64_t a1, unsigned __int16 *a2, unint64_t a3, int a4, int a5, unsigned __int16 *a6, unint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80) + 88);
  if (v9) {
    sub_2162F1DF8(v9, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

BOOL sub_2161CAAA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80) + 1328);
  return !v1 || sub_2161B99DC(v1);
}

uint64_t sub_2161CAAD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80) + 1328);
  if (v1) {
    sub_2161B9900(v1);
  }
  return 0;
}

uint64_t sub_2161CAB04(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80);
  uint64_t v3 = *(uint64_t **)(v2 + 8);
  for (size_t i = *(uint64_t **)(v2 + 16); v3 != i; *(_DWORD *)(v5 + 712) = v7)
  {
    uint64_t v6 = *v3++;
    uint64_t v5 = v6;
    if (a2 >= (unint64_t)((uint64_t)(*(void *)(v6 + 752) - *(void *)(v6 + 744)) >> 3)) {
      int v7 = 0;
    }
    else {
      int v7 = a2;
    }
  }
  return 0;
}

uint64_t sub_2161CAB4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = 0xFFFFFFFFLL;
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(*(void *)v2 + 712);
    if (v5 != -1)
    {
      if (result == -1)
      {
        uint64_t result = *(unsigned int *)(*(void *)v2 + 712);
      }
      else if (result == v5)
      {
        uint64_t result = result;
      }
      else
      {
        uint64_t result = 0xFFFFFFFFLL;
      }
    }
    v2 += 8;
  }
  return result;
}

uint64_t sub_2161CAB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21633E37C(*(void **)(*(void *)(*(void *)(a1 + 8) + 8) + 80), a2, a3);
}

BOOL sub_2161CABAC(uint64_t a1, uint64_t a2)
{
  return sub_21633E8FC(*(void **)(*(void *)(*(void *)(a1 + 8) + 8) + 80), a2);
}

uint64_t sub_2161CABBC(uint64_t a1, uint64_t a2)
{
  return sub_21633EA28(*(void **)(*(void *)(*(void *)(a1 + 8) + 8) + 80), a2);
}

uint64_t sub_2161CABCC(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(*(void *)(result + 8) + 8) + 80) + 1304) = a2;
  return result;
}

uint64_t sub_2161CABE0(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(*(void *)(result + 8) + 8) + 80) + 16++**(_DWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_2161CABF4(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(*(void *)(result + 8) + 8) + 80) + 176) = a2;
  return result;
}

uint64_t sub_2161CAC08(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(*(void *)(result + 8) + 8) + 80) + 1312) = a2;
  return result;
}

uint64_t sub_2161CAC1C(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(*(void *)(result + 8) + 8) + 80) + 132sub_216195B94(&qword_26797EF28, 0) = a2;
  return result;
}

BOOL sub_2161CAC30(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80) + 1320) != 0;
}

BOOL sub_2161CAC4C(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
  if (!v1) {
    return 0;
  }
  do
  {
    BOOL v2 = *(_DWORD *)(v1 + 20) == 9;
    if (*(_DWORD *)(v1 + 20) == 9) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 40);
  }
  while (v1);
  return v2;
}

uint64_t sub_2161CACB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 280))(a1) < 1) {
    return 0;
  }
  if (a4)
  {
    uint64_t v10 = sub_2161CA508(a1);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 152))(v10);
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 8))(a1, a2, a3, a5);
  }
  uint64_t v12 = v11;
  if (!v11) {
    return 0;
  }
  uint64_t v13 = sub_2161CA508(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 144))(v13, v12);
  uint64_t v14 = sub_2161CA508(a1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 200))(v14);
  uint64_t v16 = (void *)sub_2161CAE14(v15);
  sub_2161946E0(v16, v12, a4, a3);
  return 1;
}

uint64_t sub_2161CAE14(uint64_t a1)
{
  if (!*(void *)(a1 + 96)) {
    operator new();
  }
  return *(void *)(a1 + 96);
}

uint64_t sub_2161CAEE4(void *a1, const UChar *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if ((*(int (**)(void *))(*a1 + 280))(a1) <= 0)
  {
    uint64_t v18 = a1[6];
    uint64_t v17 = a1 + 6;
    std::ios_base::clear((std::ios_base *)((char *)v17 + *(void *)(v18 - 24)), 0);
    uint64_t v19 = sub_216129E78(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tagger.cpp", 63);
    sub_216129E78(v19, (uint64_t)"(", 1);
    uint64_t v20 = (void *)std::ostream::operator<<();
    int v21 = sub_216129E78(v20, (uint64_t)") [", 3);
    uint64_t v22 = sub_216129E78(v21, (uint64_t)"lattice_level() >= 1", 20);
    uint64_t v23 = sub_216129E78(v22, (uint64_t)"] ", 2);
    sub_216129E78(v23, (uint64_t)"use -l option to obtain N-Best results. e.g., mecab -N10 -l1", 60);
    return 0;
  }
  uint64_t v14 = sub_2162D1CE4(3u);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    int v33 = 134218240;
    uint64_t v34 = a3;
    __int16 v35 = 1024;
    int v36 = a5 & 4;
    _os_log_debug_impl(&dword_2160F5000, v14, OS_LOG_TYPE_DEBUG, "[TaggerImpl::parseNBestInit] length:%lu (prefix:%d)", (uint8_t *)&v33, 0x12u);
    if (a4) {
      goto LABEL_4;
    }
  }
  else if (a4)
  {
LABEL_4:
    uint64_t v15 = sub_2161CA508((uint64_t)a1);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 152))(v15);
    goto LABEL_8;
  }
  uint64_t v16 = (*(uint64_t (**)(void *, const UChar *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 16))(a1, a2, a3, a5, a6, a7);
LABEL_8:
  uint64_t v24 = v16;
  if (!v16) {
    return 0;
  }
  uint64_t v25 = sub_2161CA508((uint64_t)a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 144))(v25, v24);
  First = u_strFindFirst(a2, (unint64_t)(int)a3 >> 1, (const UChar *)"\t", 1);
  if (First) {
    int64_t v27 = (char *)First - (char *)a2;
  }
  else {
    int64_t v27 = 0;
  }
  if (First) {
    uint64_t v28 = -16;
  }
  else {
    uint64_t v28 = -8;
  }
  uint64_t v29 = sub_2161CA508((uint64_t)a1);
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 200))(v29);
  BOOL v31 = (void *)sub_2161CAE14(v30);
  sub_2161946E0(v31, v24, v27 + a4, v28 + a3);
  return 1;
}

uint64_t sub_2161CB1B8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_2161CA508(a1) + 136);

  return v1();
}

uint64_t sub_2161CB200(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80) + 296);
}

void sub_2161CB214()
{
  MEMORY[0x2166CA710](&v0);
  operator new();
}

void sub_2161CB310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x2166CA800](v13, 0x10F3C40EC662B3ELL);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a13);
  _Unwind_Resume(a1);
}

void sub_2161CB348(void *a1)
{
  sub_2161CB464(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2161CB384(void *a1)
{
  sub_2161CB3BC(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_2161CB3BC(void *a1)
{
  *a1 = &unk_26C6C5300;
  a1[5] = 0;
  __n128 v4 = a1 + 1;
  BOOL v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    BOOL v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166CA7C0](v2[v5], 0x1020C80E349F4B1);
      unint64_t v5 = a1[5];
      BOOL v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_2161CB464(void *a1)
{
  *a1 = &unk_26C6C5030;
  sub_2161CB3BC(a1 + 6);
  BOOL v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

CFDictionaryRef sub_2161CB4B8(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  CFDictionaryRef TestingParameters = (const __CFDictionary *)LMLanguageModelGetTestingParameters();
  MutableCFStringRef Copy = TestingParameters;
  if (TestingParameters)
  {
    if (CFDictionaryGetCount(TestingParameters))
    {
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(0, 0, MutableCopy);
      CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x263F512E0]);
      return MutableCopy;
    }
    return 0;
  }
  return MutableCopy;
}

const void *sub_2161CB524(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  CFDictionaryRef TestingParameters = (const __CFDictionary *)LMLanguageModelGetTestingParameters();
  if (!TestingParameters) {
    return 0;
  }
  uint64_t v3 = (const void *)*MEMORY[0x263F512E0];

  return CFDictionaryGetValue(TestingParameters, v3);
}

void sub_2161CB574()
{
}

uint64_t sub_2161CB588(char *__s)
{
  sub_21610B834(&__p, __s);
  unint64_t v1 = v39;
  BOOL v2 = (v39 & 0x80u) != 0;
  unint64_t v3 = v38;
  if ((v39 & 0x80u) == 0) {
    unint64_t v4 = v39;
  }
  else {
    unint64_t v4 = v38;
  }
  if (v4)
  {
    unint64_t v5 = 0;
    do
    {
      if (v2) {
        p_p = __p;
      }
      else {
        p_p = &__p;
      }
      int v7 = p_p[v5];
      if ((v7 - 65) <= 0x19)
      {
        p_p[v5] = v7 + 32;
        unint64_t v1 = v39;
        unint64_t v3 = v38;
      }
      ++v5;
      BOOL v2 = (v1 & 0x80u) != 0;
      if ((v1 & 0x80u) == 0) {
        unint64_t v8 = v1;
      }
      else {
        unint64_t v8 = v3;
      }
    }
    while (v5 < v8);
  }
  if (v2) {
    unint64_t v9 = v3;
  }
  else {
    unint64_t v9 = v1;
  }
  switch(v9)
  {
    case 3uLL:
      BOOL v13 = !v2;
      uint64_t v10 = (unsigned __int16 *)&__p;
      if (!v13) {
        uint64_t v10 = (unsigned __int16 *)__p;
      }
      int v11 = *v10;
      int v12 = *((unsigned __int8 *)v10 + 2);
      BOOL v13 = v11 == 30053;
      int v14 = 99;
      goto LABEL_32;
    case 4uLL:
      BOOL v13 = !v2;
      uint64_t v15 = &__p;
      if (!v13) {
        uint64_t v15 = __p;
      }
      if (*v15 == 1936288371) {
        goto LABEL_64;
      }
      goto LABEL_49;
    case 5uLL:
      BOOL v13 = !v2;
      uint64_t v16 = (unsigned __int8 *)&__p;
      if (!v13) {
        uint64_t v16 = (unsigned __int8 *)__p;
      }
      int v17 = *(_DWORD *)v16;
      int v18 = v16[4];
      BOOL v19 = v17 == 859402339;
      int v20 = 50;
      goto LABEL_45;
    case 6uLL:
      BOOL v13 = !v2;
      int v21 = (unsigned __int16 *)&__p;
      if (!v13) {
        int v21 = (unsigned __int16 *)__p;
      }
      int v22 = *(_DWORD *)v21;
      int v12 = v21[2];
      BOOL v13 = v22 == 1600353637;
      int v14 = 28778;
LABEL_32:
      if (!v13 || v12 != v14) {
        goto LABEL_49;
      }
      goto LABEL_65;
    case 9uLL:
      BOOL v13 = !v2;
      uint64_t v24 = (unsigned __int8 *)&__p;
      if (!v13) {
        uint64_t v24 = (unsigned __int8 *)__p;
      }
      int v20 = 115;
      if (*(void *)v24 == 0x696A2D7466696873 && v24[8] == 115) {
        goto LABEL_64;
      }
      uint64_t v26 = *(void *)v24;
      int v18 = v24[8];
      BOOL v19 = v26 == 0x696A5F7466696873;
LABEL_45:
      if (v19 && v18 == v20)
      {
LABEL_64:
        uint64_t v31 = 1;
        goto LABEL_90;
      }
LABEL_49:
      if ((v1 & 0x80u) == 0) {
        unint64_t v28 = v1;
      }
      else {
        unint64_t v28 = v3;
      }
      if (v28 != 4)
      {
        if (v28 != 5)
        {
          if (v28 == 6)
          {
            if ((v1 & 0x80u) == 0) {
              uint64_t v29 = &__p;
            }
            else {
              uint64_t v29 = __p;
            }
            if (*(_DWORD *)v29 == 761492837 && v29[2] == 28778)
            {
LABEL_65:
              uint64_t v31 = 0;
              goto LABEL_90;
            }
            if (!memcmp(v29, "utf_16", 6uLL)) {
              goto LABEL_84;
            }
          }
          goto LABEL_83;
        }
        if ((v1 & 0x80u) == 0) {
          int v33 = &__p;
        }
        else {
          int v33 = __p;
        }
        if (memcmp(v33, "utf_8", 5uLL))
        {
          if (*(_DWORD *)v33 != 761689205 || v33[4] != 56)
          {
            if (*(_DWORD *)v33 == 828798069 && v33[4] == 54) {
              goto LABEL_84;
            }
            goto LABEL_83;
          }
        }
LABEL_89:
        uint64_t v31 = 2;
        goto LABEL_90;
      }
      if ((v1 & 0x80u) == 0) {
        uint64_t v32 = &__p;
      }
      else {
        uint64_t v32 = __p;
      }
      if (!memcmp(v32, "utf8", 4uLL)) {
        goto LABEL_89;
      }
LABEL_83:
      if (sub_2161BECF0((const void **)&__p, "utf-16"))
      {
LABEL_84:
        uint64_t v31 = 3;
        goto LABEL_90;
      }
      if (sub_2161BECF0((const void **)&__p, "utf16be")
        || sub_2161BECF0((const void **)&__p, "utf_16be")
        || sub_2161BECF0((const void **)&__p, "utf-16be"))
      {
        uint64_t v31 = 5;
      }
      else if (sub_2161BECF0((const void **)&__p, "utf16le") {
             || sub_2161BECF0((const void **)&__p, "utf_16le")
      }
             || sub_2161BECF0((const void **)&__p, "utf-16le"))
      {
        uint64_t v31 = 4;
      }
      else if (sub_2161BECF0((const void **)&__p, "ascii"))
      {
        uint64_t v31 = 6;
      }
      else
      {
        uint64_t v31 = 2;
      }
LABEL_90:
      if ((char)v39 < 0) {
        operator delete(__p);
      }
      return v31;
    default:
      goto LABEL_49;
  }
}

std::string *sub_2161CB960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_21610A674(a3, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
    if (!size) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!*((unsigned char *)&a3->__r_.__value_.__s + 23)) {
      goto LABEL_13;
    }
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (v6->__r_.__value_.__s.__data_[size - 1] != 47) {
    std::string::push_back(a3, 47);
  }
LABEL_13:
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    unint64_t v8 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v8 = *(const std::string::value_type **)a2;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  return std::string::append(a3, v8, v9);
}

void sub_2161CBA18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161CBA34(uint64_t a1)
{
  if (sub_2161B7248(a1, "allocate-sentence")) {
    int v2 = 65;
  }
  else {
    int v2 = 1;
  }
  if (sub_2161B7248(a1, "partial")) {
    v2 |= 4u;
  }
  if (sub_2161B7248(a1, "all-morphs")) {
    v2 |= 0x20u;
  }
  if (sub_2161B7248(a1, "marginal")) {
    int v3 = v2 | 8;
  }
  else {
    int v3 = v2;
  }
  int v4 = sub_216176B7C(a1, "nbest");
  int v5 = sub_216176B7C(a1, "lattice-level");
  unsigned int v6 = v3 | 2;
  if (v4 <= 1 && v5 <= 0) {
    unsigned int v6 = v3;
  }
  if (v5 <= 1) {
    return v6;
  }
  else {
    return v6 | 8;
  }
}

BOOL sub_2161CBB08(uint64_t a1)
{
  v39[19] = *MEMORY[0x263EF8340];
  sub_21619EFA8(a1, "rcfile", (uint64_t)&v37);
  std::string::size_type v2 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  char v3 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v37.__r_.__value_.__l.__size_;
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v5 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v5 = v37.__r_.__value_.__l.__size_;
  }
  if (!v5)
  {
    unsigned int v6 = getenv("HOME");
    if (v6)
    {
      sub_21610B834(&v38, v6);
      sub_21610B834(__p, ".mecabrc");
      sub_2161CB960((uint64_t)&v38, (uint64_t)__p, &__str);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      sub_21613025C((uint64_t *)&v38);
      if ((*((unsigned char *)&v38 + *(void *)(v38.__r_.__value_.__r.__words[0] - 24) + 32) & 5) == 0) {
        std::string::operator=(&v37, &__str);
      }
      v38.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2A8];
      *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words
                                + *(void *)(v38.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8]
                                                                                                  + 24);
      MEMORY[0x2166CA430](&v38.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x2166CA750](v39);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string::size_type v2 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v37.__r_.__value_.__l.__size_;
      char v3 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
  }
  if (v3 >= 0) {
    std::string::size_type v7 = v2;
  }
  else {
    std::string::size_type v7 = size;
  }
  if (!v7)
  {
    unint64_t v8 = getenv("MECABRC");
    if (v8) {
      sub_2161B4568(&v37, v8);
    }
  }
  sub_21619EFA8(a1, "dicdir", (uint64_t)&__str);
  std::string::size_type v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = __str.__r_.__value_.__l.__size_;
  }
  if (!v9)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      __str.__r_.__value_.__l.__size_ = 1;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 1;
      p_str = &__str;
    }
    LOWORD(p_str->__r_.__value_.__l.__data_) = 46;
  }
  LODWORD(v11) = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  int v12 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    LODWORD(v11) = v37.__r_.__value_.__r.__words[1];
  }
  uint64_t v11 = v11;
  BOOL v13 = &v37;
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v13 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  int v14 = (char *)&v13[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if ((int)v11 < 1)
    {
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        v37.__r_.__value_.__l.__size_ = 1;
      }
      else
      {
        *((unsigned char *)&v37.__r_.__value_.__s + 23) = 1;
        int v12 = &v37;
      }
      LOWORD(v12->__r_.__value_.__l.__data_) = 46;
      goto LABEL_42;
    }
    unsigned int v15 = v11 - 1;
    int v16 = v14[v11--];
  }
  while (v16 != 47);
  std::string::basic_string(&v38, &v37, 0, v15, (std::allocator<char> *)__p);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  std::string v37 = v38;
LABEL_42:
  sub_21610B834(&v38, "$(rcpath)");
  int64_t v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v18 = &__str;
  }
  else {
    int v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t v17 = __str.__r_.__value_.__l.__size_;
  }
  char v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v20 = &v38;
  }
  else {
    int v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v21 = v38.__r_.__value_.__l.__size_;
  }
  if (v21)
  {
    if (v17 >= v21)
    {
      int v22 = (char *)v18 + v17;
      int v23 = v20->__r_.__value_.__s.__data_[0];
      uint64_t v24 = v18;
      do
      {
        int64_t v25 = v17 - v21;
        if (v25 == -1) {
          break;
        }
        uint64_t v26 = (char *)memchr(v24, v23, v25 + 1);
        if (!v26) {
          break;
        }
        int64_t v27 = v26;
        if (!memcmp(v26, v20, v21))
        {
          if (v27 != v22)
          {
            std::string::size_type v28 = v27 - (char *)v18;
            if (v27 - (char *)v18 != -1) {
              goto LABEL_62;
            }
          }
          break;
        }
        uint64_t v24 = (std::string *)(v27 + 1);
        int64_t v17 = v22 - (v27 + 1);
      }
      while (v17 >= v21);
    }
  }
  else
  {
    std::string::size_type v28 = 0;
LABEL_62:
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v29 = &v37;
    }
    else {
      uint64_t v29 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v37.__r_.__value_.__l.__size_;
    }
    std::string::replace(&__str, v28, v21, (const std::string::value_type *)v29, v30);
    char v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  if (v19 < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  sub_2161C2230(a1, "dicdir", (uint64_t)&__str, 1);
  sub_21610B834(__p, "dicrc");
  sub_2161CB960((uint64_t)&__str, (uint64_t)__p, &v38);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v38;
  *((unsigned char *)&v38.__r_.__value_.__s + 23) = 0;
  v38.__r_.__value_.__s.__data_[0] = 0;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v31 = &__str;
  }
  else {
    uint64_t v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  BOOL v32 = sub_2161C6D88(a1, (const char *)v31);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return v32;
}

void sub_2161CBFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

__CFString *sub_2161CC0A0(void *a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  int v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 40))();
  uint64_t v4 = *a1;
  if (v3)
  {
    while (1)
    {
      CFStringRef v5 = *(const __CFString **)(v4 + 112);
      if (v5) {
        CFStringInsert(Mutable, 0, v5);
      }
      a1 = (void *)a1[1];
      if (!a1) {
        break;
      }
      uint64_t v4 = *a1;
    }
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(v4 + 80);
    std::string::size_type v7 = Mutable;
    for (int i = 0; ; int i = 1)
    {
      sub_2161CC15C(v7, v6, i);
      a1 = (void *)a1[1];
      if (!a1) {
        break;
      }
      unsigned int v6 = *(_DWORD *)(*a1 + 80);
      std::string::size_type v7 = Mutable;
    }
  }
  return Mutable;
}

void sub_2161CC15C(__CFString *a1, unsigned int a2, int a3)
{
  if (a2 >= 0x3E9 && a2 - 1000 <= 0x1EF)
  {
    CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (&off_26426EF10)[2 * a2 - 2000], 0x8000100u);
    if (v5)
    {
      CFStringRef v6 = v5;
      if (a3) {
        CFStringInsert(a1, 0, @" ");
      }
      CFStringInsert(a1, 0, v6);
      CFRelease(v6);
    }
  }
}

void sub_2161CC20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

int8x16_t *sub_2161CC224(const __CFURL *a1, __int8 a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int8x16_t *)malloc_type_calloc(1uLL, 0x40uLL, 0x1070040B050C575uLL);
  CFStringRef v5 = v4;
  if (!v4) {
    return v5;
  }
  v4[1].i8[0] = a2;
  __int32 v6 = sub_216221BD4(a1);
  v5[3].i32[2] = v6;
  if (v6 == -1)
  {
LABEL_13:
    free(v5);
    return 0;
  }
  CFURLRef v7 = CFURLCreateCopyAppendingPathComponent(0, a1, @"Keyword_aux.data", 0);
  unint64_t v8 = sub_2161CC994(v7);
  CFRelease(v7);
  v5[3].i64[0] = (uint64_t)v8;
  int v9 = v5[3].i32[2];
  if (v9 == -1)
  {
LABEL_12:
    free(v8);
    goto LABEL_13;
  }
  if (flock(v9, 6) == -1)
  {
    unint64_t v8 = (char *)v5[3].i64[0];
    goto LABEL_12;
  }
  int v10 = v5[3].i32[2];
  LOBYTE(__buf.st_dev) = 0;
  lseek(v10, 0, 0);
  read(v10, &__buf, 1uLL);
  if (LOBYTE(__buf.st_dev) == 1)
  {
    uint64_t v11 = sub_2161CC994(a1);
    sub_2161CCA34((DIR *)v11);
    free(v11);
  }
  int v12 = v5[3].i32[2];
  LOBYTE(__buf.st_dev) = 1;
  lseek(v12, 0, 0);
  write(v12, &__buf, 1uLL);
  BOOL v13 = sub_2161AEC30(0, a1, 0);
  if (!v13)
  {
    free((void *)v5[3].i64[0]);
    flock(v5[3].i32[2], 8);
    goto LABEL_13;
  }
  v5->i64[1] = (uint64_t)v13;
  *(_OWORD *)&__buf.st_dev = xmmword_26426B808;
  *(_OWORD *)&__buf.st_uid = *(_OWORD *)off_26426B818;
  CFArrayRef v14 = CFArrayCreate(0, (const void **)&__buf, 4, MEMORY[0x263EFFF70]);
  sub_2161AEF0C(v5->i64[1], v14);
  CFRelease(v14);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_2161AEE74(v5->i64[1], @"__??info??__", @"IDXExactMatch");
  if ((*(uint64_t (**)(void, void, uint64_t, uint64_t *, uint64_t *))(**(void **)(v5->i64[1] + 16) + 72))(*(void *)(v5->i64[1] + 16), *(void *)(v5->i64[1] + 40), 1, &v22, &v21) >= 1)
  {
    memset(v25, 0, sizeof(v25));
    sub_2161AF1F8(v5->i64[1], v22, v21, v25, v24);
    LODWORD(v15) = 0;
    switch(LOBYTE(v24[0]))
    {
      case 1:
        LODWORD(v15) = **(unsigned char **)&v25[0];
        break;
      case 2:
        LODWORD(v15) = (unsigned __int16)**(_WORD **)&v25[0];
        break;
      case 4:
        LODWORD(v15) = **(_DWORD **)&v25[0];
        break;
      case 8:
        uint64_t v15 = **(void **)&v25[0];
        break;
      default:
        break;
    }
    v5[1].i32[2] = v15;
    CFStringRef v17 = CFStringCreateWithBytesNoCopy(0, *((const UInt8 **)&v25[0] + 1), v24[1], 0x600u, 0, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
    v5[1].i32[1] = CFStringGetIntValue(v17);
    CFRelease(v17);
  }
  int32x2_t v18 = vdup_n_s32(stat((const char *)v5[3].i64[0], &__buf) == 0);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  void v5[2] = vandq_s8((int8x16_t)__buf.st_mtimespec, (int8x16_t)vcltzq_s64(vshlq_n_s64(v19, 0x3FuLL)));
  int v20 = v5[3].i32[2];
  LOBYTE(__buf.st_dev) = 0;
  lseek(v20, 0, 0);
  write(v20, &__buf, 1uLL);
  flock(v5[3].i32[2], 8);
  v5->i64[0] = (uint64_t)CFRetain(a1);
  return v5;
}

uint64_t sub_2161CC5BC()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t result = *(unsigned int *)(v0 + 56);
  if (result != -1)
  {
    uint64_t result = flock(result, 6);
    if (result != -1)
    {
      long long v35 = 0u;
      long long v34 = 0u;
      long long v33 = 0u;
      long long v32 = 0u;
      long long v31 = 0u;
      long long v30 = 0u;
      long long v29 = 0u;
      long long v28 = 0u;
      long long v27 = 0u;
      long long v26 = 0u;
      long long v25 = 0u;
      long long v24 = 0u;
      long long v23 = 0u;
      long long v22 = 0u;
      long long v21 = 0u;
      long long v20 = 0u;
      long long v19 = 0u;
      long long v18 = 0u;
      long long v17 = 0u;
      long long v16 = 0u;
      long long v15 = 0u;
      long long v14 = 0u;
      long long v13 = 0u;
      long long v12 = 0u;
      long long v11 = 0u;
      long long v10 = 0u;
      long long v9 = 0u;
      long long v8 = 0u;
      long long v7 = 0u;
      long long v6 = 0u;
      long long v5 = 0u;
      long long v4 = 0u;
      *(_OWORD *)__s1 = 0u;
      long long v2 = 0u;
      CFStringGetLength(@"__??info??__");
      operator new[]();
    }
  }
  return result;
}

void sub_2161CC940(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

char *sub_2161CC994(const __CFURL *a1)
{
  CFURLRef v1 = CFURLCopyAbsoluteURL(a1);
  CFStringRef v2 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  CFRelease(v1);
  if (!v2) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(v2);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  long long v5 = (char *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x3D13832BuLL);
  LODWORD(MaximumSizeForEncoding) = CFStringGetFileSystemRepresentation(v2, v5, MaximumSizeForEncoding);
  CFRelease(v2);
  if (!MaximumSizeForEncoding)
  {
    free(v5);
    return 0;
  }
  return v5;
}

DIR *sub_2161CCA34(DIR *result)
{
  if (result)
  {
    CFURLRef v1 = (const std::__fs::filesystem::path *)result;
    if (lstat((const char *)result, &v10) < 0)
    {
      return 0;
    }
    else if ((v10.st_mode & 0xF000) == 0x4000)
    {
      uint64_t result = opendir((const char *)v1);
      if (result)
      {
        int v3 = result;
        size_t v4 = strlen((const char *)v1) + 256;
        long long v5 = (char *)malloc_type_malloc(v4, 0x33C5FAC6uLL);
        strlcpy(v5, (const char *)v1, v4);
        size_t v6 = strlen((const char *)v1);
        *(_WORD *)&v5[v6] = 47;
        long long v7 = &v5[v6 + 1];
        while (1)
        {
          long long v8 = readdir(v3);
          if (!v8) {
            break;
          }
          d_name = v8->d_name;
          if (strcmp(v8->d_name, "."))
          {
            if (strcmp(d_name, ".."))
            {
              strlcpy(v7, d_name, 0x100uLL);
              if (!sub_2161CCA34(v5))
              {
                free(v5);
                closedir(v3);
                return 0;
              }
            }
          }
        }
        free(v5);
        closedir(v3);
        return (DIR *)(rmdir((const char *)v1) >= 0);
      }
    }
    else
    {
      return (DIR *)!remove(v1, v2);
    }
  }
  return result;
}

uint64_t sub_2161CCB9C(void *a1, char *a2, uint64_t a3)
{
  sub_2161CCBF4(a1, a2, a3);
  uint64_t v6 = sub_2161CCBF4(a2, v4, v5);
  id v7 = objc_alloc(NSDictionary);

  return MEMORY[0x270F9A6D0](v7, sel_initWithObjects_forKeys_, v6);
}

uint64_t sub_2161CCBF4(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v11 = 0;
  long long v12 = &v11;
  uint64_t v13 = 0x3052000000;
  long long v14 = sub_2161CCD00;
  long long v15 = sub_2161CCD10;
  uint64_t v16 = 0;
  uint64_t v16 = [MEMORY[0x263EFF980] a2:a3];
  uint64_t v6 = [a1 lengthOfBytesUsingEncoding:v4];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_2161CCD1C;
  uint64_t v10[3] = &unk_26426B830;
  v10[4] = &v11;
  [a1 enumerateSubstringsInRange:v7 options:v6 usingBlock:v10];
  uint64_t v8 = v12[5];
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_2161CCCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2161CCD00(uint64_t a1, uint64_t a2)
{
}

void sub_2161CCD10(uint64_t a1)
{
}

uint64_t sub_2161CCD1C(uint64_t a1, const char *a2)
{
  return [*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:a2];
}

uint64_t MecabraInputKeyPropertiesGetInputKeys(int a1)
{
  if ((a1 - 2) > 0xE) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_26426B878 + a1 - 2);
  }
}

void *sub_2161CCD54(void *a1, uint64_t a2)
{
  CFStringRef v2 = a1;
  if (a1 && a2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x3052000000;
    uint64_t v13 = sub_2161CCD00;
    long long v14 = sub_2161CCD10;
    id v15 = 0;
    id v15 = objc_alloc_init(MEMORY[0x263F089D8]);
    uint64_t v6 = [v2 length:v4 with:v5];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    void v9[2] = sub_2161CCE74;
    v9[3] = &unk_26426B858;
    v9[4] = a2;
    void v9[5] = &v10;
    [v2 enumerateSubstringsInRange:v7 options:v6 usingBlock:v9];
    CFStringRef v2 = (void *)v11[5];
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_2161CCE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_2161CCE74(uint64_t a1, const char *a2)
{
  uint64_t v5 = [*(void **)(a1 + 32) objectForKeyedSubscript:a2];
  uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!v5) {
    uint64_t v5 = (uint64_t)a2;
  }

  return [v6 appendString:v4];
}

void *MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(unsigned int a1, void *a2)
{
  uint64_t v3 = 0;
  if (a1 <= 0x10)
  {
    if (((1 << a1) & 0x8180) != 0)
    {
      if (qword_26797D510 == -1)
      {
        size_t v4 = &qword_26797D508;
        goto LABEL_11;
      }
      size_t v4 = &qword_26797D508;
      uint64_t v6 = &qword_26797D510;
      id v7 = &unk_26C6CA2E0;
    }
    else if (((1 << a1) & 0x10200) != 0)
    {
      if (qword_26797D520 == -1)
      {
        size_t v4 = &qword_26797D518;
LABEL_11:
        uint64_t v3 = *v4;
        goto LABEL_12;
      }
      size_t v4 = &qword_26797D518;
      uint64_t v6 = &qword_26797D520;
      id v7 = &unk_26C6CA300;
    }
    else
    {
      if (a1 != 10) {
        goto LABEL_12;
      }
      if (qword_26797D530 == -1)
      {
        size_t v4 = &qword_26797D528;
        goto LABEL_11;
      }
      size_t v4 = &qword_26797D528;
      uint64_t v6 = &qword_26797D530;
      id v7 = &unk_26C6CA0E0;
    }
    dispatch_once(v6, v7);
    goto LABEL_11;
  }
LABEL_12:

  return sub_2161CCD54(a2, v3);
}

uint64_t sub_2161CCFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2161CCB9C(@"⼀⼁⼃⼂乛一丨丿丶㇏問*＊匹", (char *)@"1234512344***=", a3);
  qword_26797D508 = result;
  return result;
}

uint64_t sub_2161CD008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2161CCB9C(@"手田水口廿卜山戈人心日尸木火土竹十大中金女月弓一重難ＸＺ", (char *)@"qwertyuiopasdfghjklcvbnmzxxz", a3);
  qword_26797D518 = result;
  return result;
}

uint64_t sub_2161CD038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2161CCB9C(@"金人月白禾言立水火之工木大土王目日口田纟又女子已山", (char *)@"qwertyuiopasdfghjklxcvbnm", a3);
  qword_26797D528 = result;
  return result;
}

void *MecabraInputKeyPropertiesCreateInputKeyFromASCIIString(unsigned int a1, void *a2)
{
  uint64_t v3 = 0;
  if (a1 <= 0x10)
  {
    if (((1 << a1) & 0x8180) != 0)
    {
      if (qword_26797D540 == -1)
      {
        size_t v4 = &qword_26797D538;
        goto LABEL_11;
      }
      size_t v4 = &qword_26797D538;
      uint64_t v6 = &qword_26797D540;
      id v7 = &unk_26C6CA100;
    }
    else if (((1 << a1) & 0x10200) != 0)
    {
      if (qword_26797D550 == -1)
      {
        size_t v4 = &qword_26797D548;
LABEL_11:
        uint64_t v3 = *v4;
        goto LABEL_12;
      }
      size_t v4 = &qword_26797D548;
      uint64_t v6 = &qword_26797D550;
      id v7 = &unk_26C6CA160;
    }
    else
    {
      if (a1 != 10) {
        goto LABEL_12;
      }
      if (qword_26797D560 == -1)
      {
        size_t v4 = &qword_26797D558;
        goto LABEL_11;
      }
      size_t v4 = &qword_26797D558;
      uint64_t v6 = &qword_26797D560;
      id v7 = &unk_26C6CA1C0;
    }
    dispatch_once(v6, v7);
    goto LABEL_11;
  }
LABEL_12:

  return sub_2161CCD54(a2, v3);
}

uint64_t sub_2161CD174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2161CCB9C(@"12345", (char *)@"⼀⼁⼃⼂乛", a3);
  qword_26797D538 = result;
  return result;
}

uint64_t sub_2161CD1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2161CCB9C(@"qwertyuiopasdfghjklcvbnmzxxz", (char *)@"手田水口廿卜山戈人心日尸木火土竹十大中金女月弓一重難ＸＺ", a3);
  qword_26797D548 = result;
  return result;
}

uint64_t sub_2161CD1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2161CCB9C(@"qwertyuiopasdfghjklxcvbnm", (char *)@"金人月白禾言立水火之工木大土王目日口田纟又女子已山", a3);
  qword_26797D558 = result;
  return result;
}

uint64_t sub_2161CD204(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, CFStringRef theString, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12, char a13, char a14)
{
  *(_DWORD *)(a1 + ++**(_DWORD **)(result + 8) = a4;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = a5;
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)a1 = &unk_26C6C6088;
  *(_WORD *)(a1 + 4++**(_DWORD **)(result + 8) = a6;
  *(_OWORD *)(a1 + 56) = 0u;
  long long v17 = (char *)(a1 + 56);
  long long v18 = (char *)(a1 + 80);
  *(_OWORD *)(a1 + 104) = 0u;
  long long v19 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8++**(_DWORD **)(result + 8) = 0u;
  *(void *)(a1 + 12sub_216195B94(&qword_26797EF28, 0) = 0;
  if (theString)
  {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theString);
    uint64_t v21 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v21 = 0;
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 12++**(_DWORD **)(result + 8) = Copy;
  uint64_t v22 = 16;
  if (a12) {
    uint64_t v22 = 17;
  }
  uint64_t v23 = v21 | v22;
  if (a13) {
    v23 |= 2uLL;
  }
  if (a11) {
    v23 |= 4uLL;
  }
  if (a14) {
    v23 |= 8uLL;
  }
  *(void *)(a1 + 32) = v23;
  if (v17 != (char *)a8) {
    sub_21618F924(v17, *(char **)a8, *(void *)(a8 + 8), (uint64_t)(*(void *)(a8 + 8) - *(void *)a8) >> 1);
  }
  if (v18 != (char *)a9) {
    sub_21618F924(v18, *(char **)a9, *(void *)(a9 + 8), (uint64_t)(*(void *)(a9 + 8) - *(void *)a9) >> 1);
  }
  if (v19 != (char *)a10) {
    sub_21618F924(v19, *(char **)a10, *(void *)(a10 + 8), (uint64_t)(*(void *)(a10 + 8) - *(void *)a10) >> 1);
  }
  if (!a6)
  {
    long long v24 = *(char **)a9;
    long long v25 = *(char **)(a9 + 8);
    if (*(char **)a9 != v25)
    {
      int v26 = *(unsigned __int16 *)(a1 + 48);
      do
      {
        int v27 = *(unsigned __int16 *)v24;
        v24 += 2;
        v26 += v27;
        *(_WORD *)(a1 + 4++**(_DWORD **)(result + 8) = v26;
      }
      while (v24 != v25);
    }
  }
  return a1;
}

void sub_2161CD398(_Unwind_Exception *exception_object)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    v1[14] = v6;
    operator delete(v6);
  }
  id v7 = *v3;
  if (*v3)
  {
    v1[11] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161CD3E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C59C0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + ++**(_DWORD **)(result + 8) = v4;
  *(void *)a1 = &unk_26C6C6088;
  *(_WORD *)(a1 + 4++**(_DWORD **)(result + 8) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_216182F50((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 1);
  *(void *)(a1 + 8sub_216195B94(&qword_26797EF28, 0) = 0;
  *(void *)(a1 + 8++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216182F50((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 1);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_216195B94(&qword_26797EF28, 0) = 0;
  sub_216182F50((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 1);
  CFStringRef v6 = *(const __CFString **)(a2 + 128);
  if (v6) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v6);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 12++**(_DWORD **)(result + 8) = Copy;
  return a1;
}

void sub_2161CD500(_Unwind_Exception *exception_object)
{
  CFStringRef v6 = *v4;
  if (*v4)
  {
    v1[14] = v6;
    operator delete(v6);
  }
  id v7 = *v3;
  if (*v3)
  {
    v1[11] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161CD54C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_26C6C59C0;
  *(_DWORD *)(a1 + ++**(_DWORD **)(result + 8) = a3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = *(void *)(a2 + 40);
  *(void *)a1 = &unk_26C6C6088;
  *(_WORD *)(a1 + 4++**(_DWORD **)(result + 8) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_216182F50((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 1);
  *(void *)(a1 + 8sub_216195B94(&qword_26797EF28, 0) = 0;
  *(void *)(a1 + 8++**(_DWORD **)(result + 8) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216182F50((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 1);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_216195B94(&qword_26797EF28, 0) = 0;
  sub_216182F50((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 1);
  CFStringRef v5 = *(const __CFString **)(a2 + 128);
  if (v5) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v5);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 12++**(_DWORD **)(result + 8) = Copy;
  return a1;
}

void sub_2161CD668(_Unwind_Exception *exception_object)
{
  CFStringRef v6 = *v4;
  if (*v4)
  {
    v1[14] = v6;
    operator delete(v6);
  }
  id v7 = *v3;
  if (*v3)
  {
    v1[11] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161CD6B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_216182F50(a2, *(const void **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 1);
}

void *sub_2161CD6D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 104;
  uint64_t v3 = 80;
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112)) {
    uint64_t v3 = 104;
  }
  else {
    uint64_t v2 = a1 + 80;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_216182F50(a2, *(const void **)(a1 + v3), *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)(a1 + v3)) >> 1);
}

void *sub_2161CD714@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_216182F50(a2, *(const void **)(a1 + 56), *(void *)(a1 + 64), (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 1);
}

void sub_2161CD734(uint64_t a1)
{
  sub_2161CD77C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161CD76C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t sub_2161CD774(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t sub_2161CD77C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C6088;
  sub_2161868BC((const void **)(a1 + 128), 0);
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 8++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(void *)(a1 + 64) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_2161CD7F4(const void *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v3 = os_signpost_id_make_with_pointer(v2, a1);
  long long v4 = sub_2162D1CE4(0xDu);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    CFStringRef v5 = v4;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)int buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "MecabraJapaneseInit", "MecabraJapanese engine init", buf, 2u);
    }
  }
  operator new();
}

void sub_2161CEF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,const void *a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26,const void *a27)
{
  uint64_t v31 = *(void *)(v29 - 112);
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  MEMORY[0x2166CA800](v27, 0x10B1C406662A6EBLL);
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  sub_21617DB94(&a26, 0);
  sub_21617DB94(&a27, 0);
  sub_21617DB94((const void **)(v29 - 136), 0);
  sub_21617DB94(&a22, 0);
  a23 = 0;
  if (a15) {
    MEMORY[0x2166CA7C0](a15, 0x1000C8077774924);
  }
  uint64_t v32 = a24;
  a24 = 0;
  if (v32) {
    MEMORY[0x2166CA7C0](v32, 0x1000C8077774924);
  }
  sub_21617DB94(&a25, 0);
  sub_2161CF7C8(&a21, 0);
  _Unwind_Resume(a1);
}

void sub_2161CF6F8()
{
  MEMORY[0x2166CA800](v0, 0x70C401872A87DLL);
  JUMPOUT(0x2161CF4CCLL);
}

void sub_2161CF718()
{
}

void sub_2161CF720()
{
}

void sub_2161CF728()
{
  MEMORY[0x2166CA800](v0, 0x10F2C40570461F6);
  JUMPOUT(0x2161CF668);
}

void sub_2161CF748()
{
}

void sub_2161CF750()
{
  if (*(char *)(v0 + 1159) < 0) {
    operator delete(*v3);
  }
  sub_2160F6FB0(v2);
  sub_2161055D8(v1);
  JUMPOUT(0x2161CF670);
}

void sub_2161CF780()
{
}

void sub_2161CF788()
{
  MEMORY[0x2166CA800](v0, 0x10E0C40CD74A5BALL);
  JUMPOUT(0x2161CF6D0);
}

void sub_2161CF7A8()
{
}

void sub_2161CF7B0()
{
}

void sub_2161CF7B8()
{
}

void sub_2161CF7C0()
{
}

uint64_t sub_2161CF7C8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2161CF864(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2161CF818(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  sub_2160F6FB0(a1 + 8);

  return sub_2161055D8(a1);
}

uint64_t sub_2161CF864(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (!v3
      || ((*(void (**)(uint64_t, void))(*(void *)v2 + 168))(v2, *(void *)(v3 + 192)),
          (*(void (**)(void, void))(**(void **)(a1 + 192) + 168))(*(void *)(a1 + 192), *(void *)(*(void *)(a1 + 176) + 200)), (uint64_t v2 = *(void *)(a1 + 192)) != 0))
    {
      uint64_t v4 = *(void *)(a1 + 1168);
      if (v4)
      {
        (*(void (**)(uint64_t, void))(*(void *)v2 + 168))(v2, *(void *)(v4 + 88));
        (*(void (**)(void, void))(**(void **)(a1 + 192) + 168))(*(void *)(a1 + 192), *(void *)(*(void *)(a1 + 1168) + 96));
        sub_2162F0F0C(*(void *)(a1 + 1168), a1);
      }
    }
  }
  CFStringRef v5 = sub_2162D1CE4(0);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v26 = 0;
    _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "Mecabra Japanese terminated.", v26, 2u);
  }
  uint64_t v6 = *(void *)(a1 + 3944);
  *(void *)(a1 + 3944) = 0;
  if (v6) {
    sub_2161DFB94(a1 + 3944, v6);
  }
  uint64_t v7 = *(void *)(a1 + 3936);
  *(void *)(a1 + 3936) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 3928);
  *(void *)(a1 + 392++**(_DWORD **)(result + 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 3912);
  *(void *)(a1 + 3912) = 0;
  if (v9) {
    sub_2161DDA00(a1 + 3912, v9);
  }
  uint64_t v10 = *(void *)(a1 + 3888);
  *(void *)(a1 + 388++**(_DWORD **)(result + 8) = 0;
  if (v10) {
    MEMORY[0x2166CA800](v10, 0x70C4098256540);
  }
  uint64_t v11 = *(void *)(a1 + 3880);
  *(void *)(a1 + 388sub_216195B94(&qword_26797EF28, 0) = 0;
  if (v11) {
    sub_2161DFEC4(v11);
  }
  sub_2161DFE60((uint64_t *)(a1 + 3872));
  uint64_t v12 = *(void *)(a1 + 3864);
  *(void *)(a1 + 3864) = 0;
  if (v12) {
    MEMORY[0x2166CA800](v12, 0x1000C4000313F17);
  }
  uint64_t v13 = *(void *)(a1 + 3856);
  *(void *)(a1 + 3856) = 0;
  if (v13) {
    sub_2161DFDFC(v13);
  }
  uint64_t v14 = *(void *)(a1 + 3848);
  *(void *)(a1 + 384++**(_DWORD **)(result + 8) = 0;
  if (v14) {
    sub_2161E0420(v14);
  }
  uint64_t v15 = *(void *)(a1 + 3840);
  *(void *)(a1 + 384sub_216195B94(&qword_26797EF28, 0) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 3832);
  *(void *)(a1 + 3832) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 3824);
  *(void *)(a1 + 3824) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 3816);
  *(void *)(a1 + 3816) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(a1 + 3808);
  *(void *)(a1 + 380++**(_DWORD **)(result + 8) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_2161DDB7C(a1 + 1208);
  uint64_t v20 = *(void *)(a1 + 1184);
  *(void *)(a1 + 1184) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void **)(a1 + 1176);
  *(void *)(a1 + 1176) = 0;
  if (v21) {
    sub_2161E050C(v21);
  }
  uint64_t v22 = *(void **)(a1 + 1168);
  *(void *)(a1 + 116++**(_DWORD **)(result + 8) = 0;
  if (v22) {
    sub_2161E050C(v22);
  }
  sub_2161DFD80((uint64_t *)(a1 + 1160));
  if (*(char *)(a1 + 1159) < 0) {
    operator delete(*(void **)(a1 + 1136));
  }
  sub_2160F6FB0(a1 + 1088);
  sub_2161055D8(a1 + 1080);
  uint64_t v23 = *(void *)(a1 + 1072);
  *(void *)(a1 + 1072) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(a1 + 1064);
  *(void *)(a1 + 1064) = 0;
  if (v24) {
    MEMORY[0x2166CA7C0](v24, 0x1000C8077774924);
  }
  sub_2161DFD30((uint64_t *)(a1 + 1048));
  return sub_21627F57C(a1);
}

void sub_2161CFC88(uint64_t a1)
{
  sub_2161CF864(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161CFCC0(uint64_t a1, int a2, CFArrayRef theArray, char a4)
{
  if (CFArrayGetCount(theArray))
  {
    if (a2 != 2)
    {
      CFStringRef v17 = sub_21622B054(theArray);
      sub_2161E236C(v17);
    }
    uint64_t v8 = *(void *)(a1 + 3944);
    if (v8)
    {
      uint64_t v9 = *(void **)(v8 + 8);
      if (v9)
      {
        if (sub_21622C350() && *v9) {
          sub_216235314(*(void *)(a1 + 3944));
        }
      }
    }
    if ((sub_2162357C4(*(void *)(a1 + 3944), theArray) & 1) == 0) {
      return 0;
    }
    uint64_t v28 = 0;
    uint64_t v29 = &v28;
    uint64_t v30 = 0x3002000000;
    uint64_t v31 = sub_2161D03C8;
    uint64_t v32 = sub_2161D03D8;
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    uint64_t v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x4002000000;
    uint64_t v23 = sub_2161D03E4;
    uint64_t v24 = sub_2161D0408;
    std::string __p = 0;
    int v26 = 0;
    uint64_t v27 = 0;
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x2000000000;
    v19[3] = 0;
    uint64_t v10 = *(void *)(a1 + 3944);
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 0x40000000;
    void v18[2] = sub_2161D0420;
    void v18[3] = &unk_264266CC0;
    v18[4] = v19;
    void v18[5] = &v28;
    v18[6] = &v20;
    sub_2162358E0(v10, (uint64_t)v18);
    CFIndex Count = CFArrayGetCount((CFArrayRef)v29[5]);
    if (Count)
    {
      uint64_t v12 = sub_2162D1CE4(0xFu);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        sub_216325E20((unint64_t)"[Input Transcoder]", (const __CFArray *)v29[5], v21 + 5);
      }
      sub_216336AC8(a1 + 816, (CFArrayRef)v29[5], a4, (uint64_t)(v21 + 5));
      CFIndex v13 = sub_21628EB9C((const __CFArray *)v29[5]);
      uint64_t v14 = *(__CFString **)(a1 + 856);
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v29[5], v13);
      CFStringAppend(v14, ValueAtIndex);
    }
    _Block_object_dispose(v19, 8);
    _Block_object_dispose(&v20, 8);
    if (__p)
    {
      int v26 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v28, 8);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (!Count) {
      return 0;
    }
    CFArrayRemoveAllValues(theArray);
  }
  return 1;
}

void sub_2161D0030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v30 - 96), 8);
  uint64_t v32 = *(const void **)(v30 - 56);
  if (v32) {
    CFRelease(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2161D00F0(uint64_t a1, const __CFArray *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFMutableArrayRef theArray = Mutable;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
    char v8 = 0;
    LOBYTE(v7) = 0;
    unsigned int v9 = 2;
  }
  else
  {
    CFIndex v6 = 0;
    int v7 = 0;
    char v8 = 0;
    unsigned int v9 = 2;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
      uint64_t v11 = (uint64_t (***)(void))ValueAtIndex[3];
      if ((**v11)(v11) == v9)
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
        if (v9 == 2)
        {
          uint64_t v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6B97B0, 0);
          if (!v12) {
            goto LABEL_21;
          }
          if (v12[16] == 2)
          {
            if ((sub_2161CFCC0(a1, 2, Mutable, v7) & 1) == 0) {
              goto LABEL_21;
            }
            ++v7;
          }
          unsigned int v9 = 2;
        }
      }
      else
      {
        if (!sub_2161CFCC0(a1, v9, Mutable, v7)) {
          goto LABEL_21;
        }
        unsigned int v9 = (**v11)(v11);
        CFMutableArrayRef Mutable = theArray;
        CFArrayAppendValue(theArray, ValueAtIndex);
        ++v7;
        v8 |= v9 < 2;
      }
      ++v6;
    }
    while (Count != v6);
  }
  if (sub_2161CFCC0(a1, v9, Mutable, v7))
  {
    if (v8)
    {
      sub_216333DA4((void *)(a1 + 816), (uint64_t)&__p);
      sub_2161DDBC0((void ***)(a1 + 824));
      *(_OWORD *)(a1 + 824) = v16;
      *(void *)(a1 + 84sub_216195B94(&qword_26797EF28, 0) = v17;
      *((void *)&v16 + 1) = 0;
      uint64_t v17 = 0;
      *(unsigned char *)(a1 + 84++**(_DWORD **)(result + 8) = v18;
      std::string __p = &unk_26C6BE8C8;
      *(void *)&long long v16 = 0;
      uint64_t v20 = (void **)&v16;
      sub_2161C4FA0(&v20);
    }
    *(unsigned char *)(a1 + 84++**(_DWORD **)(result + 8) = 1;
    sub_21610B834(&__p, (char *)&unk_2163A4BED);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p);
    }
    uint64_t v13 = 1;
  }
  else
  {
LABEL_21:
    uint64_t v13 = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v13;
}

void sub_2161D0398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2161BE0C8((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2161D03C8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_216195B94(&qword_26797EF28, 0) = 0;
  *(void *)(result + 4sub_216195B94(&qword_26797EF28, 0) = v2;
  return result;
}

void sub_2161D03D8(uint64_t a1)
{
}

__n128 sub_2161D03E4(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_216195B94(&qword_26797EF28, 0) = 0;
  *(void *)(a2 + 4++**(_DWORD **)(result + 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2161D0408(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4++**(_DWORD **)(result + 8) = v2;
    operator delete(v2);
  }
}

void sub_2161D0420(void *a1, CFStringRef theString, unsigned char *a3, float a4)
{
  if (theString && CFStringGetLength(theString))
  {
    if (a4 < 0.04 && *(void *)(*(void *)(a1[4] + 8) + 24) > 5) {
      goto LABEL_25;
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1[5] + 8) + 40), theString);
    unsigned int v9 = *(void **)(a1[6] + 8);
    uint64_t v10 = (float *)v9[6];
    unint64_t v11 = v9[7];
    if ((unint64_t)v10 >= v11)
    {
      uint64_t v13 = (float *)v9[5];
      uint64_t v14 = v10 - v13;
      if ((unint64_t)(v14 + 1) >> 62) {
        sub_21610CB04();
      }
      unint64_t v15 = v11 - (void)v13;
      unint64_t v16 = (uint64_t)(v11 - (void)v13) >> 1;
      if (v16 <= v14 + 1) {
        unint64_t v16 = v14 + 1;
      }
      unint64_t v17 = v15 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v16;
      if (v17)
      {
        char v18 = (char *)sub_2161129B4((uint64_t)(v9 + 7), v17);
        uint64_t v13 = (float *)v9[5];
        uint64_t v10 = (float *)v9[6];
      }
      else
      {
        char v18 = 0;
      }
      uint64_t v19 = (float *)&v18[4 * v14];
      uint64_t v20 = &v18[4 * v17];
      *uint64_t v19 = a4;
      uint64_t v12 = v19 + 1;
      while (v10 != v13)
      {
        int v21 = *((_DWORD *)v10-- - 1);
        *((_DWORD *)v19-- - 1) = v21;
      }
      void v9[5] = v19;
      void v9[6] = v12;
      v9[7] = v20;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      float *v10 = a4;
      uint64_t v12 = v10 + 1;
    }
    void v9[6] = v12;
    if (++*(void *)(*(void *)(a1[4] + 8) + 24) == 10) {
LABEL_25:
    }
      *a3 = 1;
  }
}

unint64_t sub_2161D0590(uint64_t a1, CFArrayRef theArray, unint64_t a3, uint64_t a4)
{
  if (!theArray) {
    return 0;
  }
  if (!CFArrayGetCount(theArray))
  {
    sub_21627F9A4(a1, 0, a3, a4);
    sub_216280FFC(a1, a3, a4);
    return 1;
  }
  if (sub_21622B28C(theArray))
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    return sub_216280378(a1, (uint64_t)ValueAtIndex);
  }
  if (!sub_21622AF98(theArray))
  {
    CFStringRef v13 = sub_21622B054(theArray);
    if (v13)
    {
      CFStringRef v14 = v13;
      if (CFStringGetLength(v13))
      {
        sub_21627F9A4(a1, v14, a3, a4);
        if (a4 && !*(unsigned char *)sub_2161A2A80()) {
          CFArrayRef v15 = (const __CFArray *)sub_21628EAAC(a4, v14);
        }
        else {
          CFArrayRef v15 = 0;
        }
        CFArrayRef v16 = sub_21622B304(theArray);
        uint64_t v10 = sub_21628051C(a1, v14, a3, a4, v16, v15);
        if (v16) {
          CFRelease(v16);
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      CFRelease(v14);
      return v10;
    }
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 3944);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void **)(v11 + 8);
  if (!v12 || !sub_21622C350() || !*v12 || !sub_21627F8BC(a1, a3, a4)) {
    return 0;
  }

  return sub_2161D00F0(a1, theArray);
}

void sub_2161D078C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161D07C4(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = *(void *)(a1 + 3944);
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 8);
    if (v3)
    {
      if (sub_21622C350() && *v3)
      {
        uint64_t v6 = *(void *)(a1 + 3944);
        sub_2162354AC(v6, a2);
      }
    }
  }
}

void *sub_2161D083C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 256);
  unint64_t v7 = *(void *)(v6 + 88);
  BOOL v55 = *(const UniChar **)(v6 + 80);
  unint64_t v56 = v7;
  long long v54 = *(_OWORD *)(v6 + 96);
  uint64_t v8 = *(void *)(v6 + 120);
  v53[0] = *(void *)(v6 + 112);
  v53[1] = v8;
  int v9 = *(_DWORD *)(a1 + 184);
  unint64_t v10 = 255;
  uint64_t v11 = 192;
  if ((v9 & 0x20) != 0) {
    uint64_t v11 = 255;
  }
  if (**(unsigned char **)(a1 + 1032)) {
    unint64_t v10 = v11;
  }
  if (v7 > v10
    || ((int v16 = v9 & 0x2000000, !**(unsigned char **)(a1 + 1032)) ? (v17 = (*(_DWORD *)(a1 + 184) & 2) == 0) : (v17 = 1),
        !v17 ? (BOOL v18 = v16 == 0) : (BOOL v18 = 0),
        v18 && ((uint64_t v19 = *(void *)(v6 + 128), v7 >= 2) ? (v20 = v8 == v19) : (v20 = 1), v20)))
  {
    sub_2162F0180(*(void *)(a1 + 176) + 248);
    int v14 = *(_DWORD *)(a1 + 184);
    char v15 = 1;
    if ((v14 & 0x2000002) != 2) {
      goto LABEL_22;
    }
  }
  else
  {
    sub_2162F0180(*(void *)(a1 + 176) + 248);
    char v15 = 0;
  }
  sub_216282E44(a1, (uint64_t)a2, a3, (uint64_t)&v54, (uint64_t)&v55);
  int v14 = *(_DWORD *)(a1 + 184);
LABEL_22:
  if ((v14 & 0x2000002) == 2 && !*(unsigned char *)(a1 + 230))
  {
    if (v15)
    {
      sub_2161B4E5C(*(void *)(a1 + 3880), a2, v55, v56, (void *)(*(void *)(a1 + 176) + 248));
    }
    else
    {
      if (**(unsigned char **)(a1 + 1032))
      {
        sub_2161D0F18(a1, a2, *(void *)(a1 + 256) + 80);
        if (**(unsigned char **)(a1 + 1032))
        {
          if ((*(unsigned char *)(a1 + 187) & 4) == 0 && !*(unsigned char *)(a1 + 808)) {
            sub_2161D1434(a1, a2, (void *)(*(void *)(a1 + 256) + 80));
          }
        }
      }
      int v21 = sub_2161F3B4C(*(void **)(*(void *)(a1 + 176) + 112), v12, v13);
      uint64_t v22 = *(unsigned char **)(a1 + 1032);
      if (v22[256])
      {
        sub_2161D1CD8(a1, (uint64_t)a2, v21, (uint64_t)&v54, (uint64_t)v53);
        uint64_t v22 = *(unsigned char **)(a1 + 1032);
      }
      if (v22[264]
        && (*v22 || (*(_DWORD *)(a1 + 184) & 0x2000002) == 2)
        && (!v21 || sub_2161D1F1C((uint64_t)v21)))
      {
        sub_21622E448(*(uint64_t **)(a1 + 3856), a2, (uint64_t *)&v54, (uint64_t)v53);
      }
      sub_2161B4E5C(*(void *)(a1 + 3880), a2, v55, v56, (void *)(*(void *)(a1 + 176) + 248));
      if ((**(unsigned char **)(a1 + 1032) || (*(_DWORD *)(a1 + 184) & 0x2000002) != 2) && !*(void *)(a1 + 1184))
      {
        (*(void (**)(void **__return_ptr))(**(void **)(a1 + 3840) + 16))(&__p);
        uint64_t v23 = v61;
        for (int i = v62; v23 != i; ++v23)
        {
          v57[0] = &unk_26C6B5430;
          v57[3] = v57;
          sub_216215760(a2, v23, 1, 0, (uint64_t)v57);
          sub_21618B96C(v57);
        }
        sub_21618A144((uint64_t)&__p);
      }
    }
  }
  if ((*(unsigned char *)(a1 + 184) & 2) != 0) {
    sub_21622D0D0(*(void **)(a1 + 3864), (uint64_t)a2);
  }
  if (!*(unsigned char *)(a1 + 230) && (*(unsigned char *)(a1 + 186) & 4) == 0) {
    sub_216282F60(a1, a2);
  }
  std::string __p = 0;
  uint64_t v59 = 0;
  v60[0] = 0;
  uint64_t v25 = a2[6];
  if (a2[7] != v25)
  {
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = *(void *)(v25 + 8 * v26);
      uint64_t v28 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v27 + 304))(v27);
      for (uint64_t j = *v28; j != v28[1]; j += 40)
      {
        if (*(_DWORD *)j == 3)
        {
          LOWORD(v29) = *(_WORD *)(j + 24);
          LOWORD(v3sub_216195B94(&qword_26797EF28, 0) = *(_WORD *)(j + 28);
          double v30 = (double)*(unint64_t *)&v30;
          double v29 = (double)*(unint64_t *)&v29 / v30;
          if (v29 > 1.7)
          {
            int v32 = *(_DWORD *)(a1 + 184);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797BA68, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_26797BA68))
            {
              off_26797BA60 = sub_2161A2A80();
              __cxa_guard_release(&qword_26797BA68);
            }
            if (*(unsigned char *)off_26797BA60) {
              BOOL v33 = (v32 & 4) == 0;
            }
            else {
              BOOL v33 = 0;
            }
            BOOL v34 = !v33 && (v32 & 0x6000000) == 100663296;
            if (v34 || (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27) >= 2)
            {
              long long v35 = v59;
              if ((unint64_t)v59 >= v60[0])
              {
                std::string v37 = (char *)__p;
                uint64_t v38 = (v59 - (unsigned char *)__p) >> 3;
                unint64_t v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61) {
                  sub_21610CB04();
                }
                uint64_t v40 = v60[0] - (void)__p;
                if ((uint64_t)(v60[0] - (void)__p) >> 2 > v39) {
                  unint64_t v39 = v40 >> 2;
                }
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v41 = v39;
                }
                if (v41)
                {
                  unint64_t v42 = (char *)sub_2160FFAA8((uint64_t)v60, v41);
                  std::string v37 = (char *)__p;
                  long long v35 = v59;
                }
                else
                {
                  unint64_t v42 = 0;
                }
                unint64_t v43 = (unint64_t *)&v42[8 * v38];
                *unint64_t v43 = v26;
                uint64_t v36 = (char *)(v43 + 1);
                while (v35 != v37)
                {
                  unint64_t v44 = *((void *)v35 - 1);
                  v35 -= 8;
                  *--unint64_t v43 = v44;
                }
                std::string __p = v43;
                uint64_t v59 = v36;
                v60[0] = &v42[8 * v41];
                if (v37) {
                  operator delete(v37);
                }
              }
              else
              {
                *(void *)uint64_t v59 = v26;
                uint64_t v36 = v35 + 8;
              }
              uint64_t v59 = v36;
            }
            break;
          }
        }
      }
      ++v26;
      uint64_t v25 = a2[6];
    }
    while (v26 < (a2[7] - v25) >> 3);
  }
  std::string::size_type v45 = sub_2162D1CE4(0xBu);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v46 = (char *)__p;
    BOOL v47 = v59;
    if (__p != v59)
    {
      do
      {
        uint64_t v48 = *(void *)v46;
        unint64_t v49 = sub_2162D1CE4(0xBu);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v50 = *(void *)(a2[6] + 8 * v48);
          uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 24))(v50);
          *(_DWORD *)int buf = 138412290;
          uint64_t v64 = v51;
          _os_log_debug_impl(&dword_2160F5000, v49, OS_LOG_TYPE_DEBUG, "Pruning %@ (shortcut like user words)", buf, 0xCu);
        }
        v46 += 8;
      }
      while (v46 != v47);
    }
  }
  sub_21621671C(a2, (unint64_t **)&__p);
  if (__p)
  {
    uint64_t v59 = (char *)__p;
    operator delete(__p);
  }
  std::string __p = &unk_26C6C7308;
  uint64_t v59 = (char *)sub_216216D1C;
  v60[1] = &__p;
  sub_216215A00(a2, (uint64_t)&__p);
  return sub_216199290(&__p);
}

void sub_2161D0EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2161D0F18(uint64_t a1, void *a2, uint64_t a3)
{
  v48[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)(a1 + 176);
  uint64_t v5 = v4[22];
  uint64_t v6 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  int v7 = *(_DWORD *)(a1 + 944);
  std::mutex::unlock(v6);
  if (v7 != 2 && (*(unsigned char *)(a1 + 186) & 4) == 0)
  {
    if (v5)
    {
      uint64_t v8 = v4[33] - v4[32];
      if (v8)
      {
        unint64_t v42 = sub_2161DEE38(v4 + 31, 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3) - 1);
        if (v42 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[33] - v4[32]) >> 3))
        {
          int v9 = 0;
          CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x263EFFB28];
          uint64_t v38 = v5;
          unint64_t v41 = v6;
          unint64_t v39 = v4;
          do
          {
            std::mutex::lock(v6);
            int v10 = *(_DWORD *)(a1 + 944);
            std::mutex::unlock(v6);
            if (v10 == 2) {
              break;
            }
            unint64_t v11 = *(void *)(v4[41] + 8 * v42);
            uint64_t v12 = v4[35];
            unint64_t v13 = (v4[36] - v12) >> 1;
            if (v13 <= v11) {
              int v14 = 0;
            }
            else {
              int v14 = (UniChar *)(v12 + 2 * v11);
            }
            if (v12) {
              unint64_t v15 = v13 - v11;
            }
            else {
              unint64_t v15 = 0;
            }
            if (v13 <= v11) {
              unint64_t v16 = 0;
            }
            else {
              unint64_t v16 = v15;
            }
            if (v42 != -1 - 0x3333333333333333 * ((uint64_t)(v4[33] - v4[32]) >> 3) || v16 != 1) {
              goto LABEL_26;
            }
            CFStringRef v18 = CFStringCreateWithCharactersNoCopy(0, v14, 1, contentsDeallocator);
            CFStringRef v46 = v18;
            unsigned __int8 v19 = sub_2161EC500(v18);
            if (v18) {
              CFRelease(v18);
            }
            if ((v19 & 1) == 0)
            {
LABEL_26:
              sub_2162229D0(v5, v14, v16, 0, (uint64_t)&v46);
              if (v47 != v46)
              {
                uint64_t v20 = 0;
                unint64_t v21 = 0;
                do
                {
                  if (v9 >= *(unsigned __int16 *)(*(void *)(a1 + 1032) + 404)) {
                    break;
                  }
                  std::mutex::lock(v6);
                  int v22 = *(_DWORD *)(a1 + 944);
                  std::mutex::unlock(v6);
                  if (v22 == 2) {
                    break;
                  }
                  uint64_t v23 = (uint64_t)&v46[v20];
                  uint64_t v24 = (uint64_t *)sub_216222F20((uint64_t)&v46[v20], off_26797C7B8[0]);
                  uint64_t v25 = v24;
                  uint64_t v26 = (v24[1] - *v24) >> 1;
                  if (!*v24) {
                    uint64_t v26 = 0;
                  }
                  v45[0] = (void **)*v24;
                  v45[1] = (void **)v26;
                  uint64_t v27 = *(void *)(a3 + 48);
                  long long v44 = *(_OWORD *)(a3 + 32);
                  if (sub_216184C2C((uint64_t)&v44, v27, (uint64_t)v45, *(_DWORD *)(a1 + 184), 0))
                  {
                    uint64_t v28 = (uint64_t *)sub_216222F20(v23, off_26797C7C0[0]);
                    int v29 = sub_216222FB8(v23, off_26797C7C8[0]);
                    int v30 = sub_216222FB8(v23, off_26797C7D0[0]);
                    uint64_t v31 = (unsigned __int16 **)sub_216222F20(v23, off_26797C7D8);
                    unint64_t v32 = (v25[1] - *v25) >> 1;
                    if (v27 <= 0 && v32 <= *(void *)(a3 + 40)) {
                      int v33 = 0;
                    }
                    else {
                      int v33 = 2;
                    }
                    LODWORD(v36) = v9 + *(__int16 *)(*(void *)(a1 + 1032) + 520);
                    HIDWORD(v36) = 74;
                    uint64_t v34 = sub_21624657C(a1 + 1200, a3, *(void *)(a3 + 16), *(void *)(a3 + 24), *v25, v32, *v28, (v28[1] - *v28) >> 1, v29, v30, v31, v36, v33, 0, 0);
                    *(void *)&long long v44 = v34;
                    uint64_t v6 = v41;
                    if (v34)
                    {
                      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v34 + 528))(v34, 3, "Adding a bigram learning dictionary candidate", 1);
                      v48[0] = &unk_26C6B5430;
                      v48[3] = v48;
                      sub_216215760(a2, (void **)&v44, 1, 0, (uint64_t)v48);
                      sub_21618B96C(v48);
                      ++v9;
                      uint64_t v35 = v44;
                      *(void *)&long long v44 = 0;
                      if (v35) {
                        (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
                      }
                    }
                  }
                  ++v21;
                  ++v20;
                }
                while (v21 < v47 - v46);
              }
              v45[0] = (void **)&v46;
              sub_2161921F0(v45);
              uint64_t v5 = v38;
              uint64_t v4 = v39;
            }
            ++v42;
          }
          while (v42 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[33] - v4[32]) >> 3));
        }
      }
    }
  }
}

void sub_2161D1388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161D1434(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a1;
  void v82[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 176);
  uint64_t v52 = *(void *)(v5 + 8);
  uint64_t v54 = v5;
  uint64_t v55 = *(void *)(v5 + 176);
  uint64_t v6 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  uint64_t v70 = v4;
  LODWORD(v4) = *(_DWORD *)(v4 + 944);
  std::mutex::unlock(v6);
  if (v4 != 2 && (*(unsigned char *)(v70 + 186) & 4) == 0 && v55 && v52 != 0)
  {
    unint64_t v8 = a3[5];
    uint64_t v9 = *(void *)(v70 + 1032);
    if (v8 >= *(unsigned __int16 *)(v9 + 412) && v8 <= *(unsigned __int16 *)(v9 + 414))
    {
      int v51 = v8 - 1;
      if ((_WORD)v8 != 1)
      {
        LODWORD(v1sub_216195B94(&qword_26797EF28, 0) = 0;
        int v56 = 0;
        uint64_t v57 = (uint64_t)a3;
        uint64_t v58 = v70 + 1200;
        unint64_t v11 = (unsigned __int16)(v8 - 1);
        do
        {
          std::mutex::lock(v6);
          unint64_t v69 = v11;
          BOOL v12 = *(_DWORD *)(v70 + 944) == 2;
          std::mutex::unlock(v6);
          if ((v12 | v10)) {
            return;
          }
          uint64_t v13 = *(void *)(v70 + 704);
          if (a3[4]) {
            unint64_t v14 = v11;
          }
          else {
            unint64_t v14 = 0;
          }
          uint64_t v78 = (void **)a3[4];
          unint64_t v79 = v14;
          sub_216349210(v13, v52, (uint64_t)&v78, 0, (uint64_t)&v80);
          if (v81 == v80)
          {
            LODWORD(v1sub_216195B94(&qword_26797EF28, 0) = 0;
          }
          else
          {
            uint64_t v59 = 0;
            while (1)
            {
              std::mutex::lock(v6);
              int v15 = *(_DWORD *)(v70 + 944);
              std::mutex::unlock(v6);
              if (v15 == 2) {
                break;
              }
              uint64_t v16 = v80 + 32 * v59;
              long long v63 = (uint64_t *)sub_216222F20(v16, off_26797C580[0]);
              unint64_t v11 = v69;
              uint64_t v64 = (uint64_t *)sub_216222F20(v16, off_26797C588);
              unsigned __int16 v17 = sub_216222FB8(v16, off_26797C560[0]);
              unsigned __int16 v18 = sub_216222FB8(v16, off_26797C558[0]);
              long long v62 = (unsigned __int16 **)sub_216222F20(v16, off_26797C568[0]);
              uint64_t v19 = *(void *)(v70 + 704);
              uint64_t v20 = (v64[1] - *v64) >> 1;
              std::string::size_type v76 = (void ***)*v64;
              uint64_t v77 = v20;
              sub_216349210(v19, v55, (uint64_t)&v76, 0, (uint64_t)&v78);
              unint64_t v21 = (uint64_t)(v79 - (void)v78) >> 5;
              if (v21 >= 4) {
                unint64_t v21 = 4;
              }
              if (v21)
              {
                uint64_t v22 = 0;
                int v60 = v18;
                int v61 = v17;
                uint64_t v23 = 1;
                while (1)
                {
                  std::mutex::lock(v6);
                  int v24 = *(_DWORD *)(v70 + 944);
                  std::mutex::unlock(v6);
                  if (v24 == 2)
                  {
                    LODWORD(v1sub_216195B94(&qword_26797EF28, 0) = 0;
                    unint64_t v11 = v69;
                    goto LABEL_51;
                  }
                  uint64_t v25 = (char *)v78 + v22;
                  uint64_t v26 = (uint64_t *)sub_216222F20((uint64_t)v78 + v22, off_26797C7B8[0]);
                  uint64_t v27 = v23;
                  uint64_t v28 = v22;
                  unint64_t v11 = v69;
                  int v29 = (uint64_t *)sub_216222F20((uint64_t)v25, off_26797C7C0[0]);
                  unsigned __int16 v30 = sub_216222FB8((uint64_t)v25, off_26797C7C8[0]);
                  unsigned __int16 v31 = sub_216222FB8((uint64_t)v25, off_26797C7D0[0]);
                  uint64_t v32 = sub_216222F20((uint64_t)v25, off_26797C7D8);
                  LODWORD(v33) = *((_DWORD *)a3 + 10) - v69;
                  uint64_t v34 = *v26;
                  unint64_t v35 = (v26[1] - *v26) >> 1;
                  if (v35 < (int)v33) {
                    goto LABEL_38;
                  }
                  uint64_t v36 = (unsigned __int16 **)v32;
                  uint64_t v33 = (int)v33;
                  uint64_t v37 = a3[4];
                  unsigned __int8 v75 = 0;
                  if (!v37) {
                    uint64_t v33 = 0;
                  }
                  std::string::size_type v76 = (void ***)(v37 + 2 * v69);
                  uint64_t v77 = v33;
                  uint64_t v38 = a3[6];
                  v74[0] = v34;
                  v74[1] = v35;
                  if (sub_216184C2C((uint64_t)&v76, v38, (uint64_t)v74, *(_DWORD *)(v70 + 184), &v75))
                  {
                    uint64_t v66 = a3[3];
                    uint64_t v67 = a3[2];
                    unint64_t v39 = sub_2161D9054((uint64_t)a3, v69);
                    uint64_t v41 = v40;
                    int v65 = v75;
                    uint64_t v68 = sub_21624657C(v58, (uint64_t)a3, (uint64_t)v39, v40, *v63, (v63[1] - *v63) >> 1, *v64, (v64[1] - *v64) >> 1, v61, v60, v62, 0x4A00000000, 0, 0, 0);
                    uint64_t v42 = v67 + 2 * v41;
                    if (v67) {
                      uint64_t v43 = v66 - v41;
                    }
                    else {
                      uint64_t v43 = 0;
                    }
                    unint64_t v11 = v69;
                    a3 = (void *)v57;
                    uint64_t v44 = sub_21624657C(v58, v57, v42, v43, *v26, (v26[1] - *v26) >> 1, *v29, (v29[1] - *v29) >> 1, v30, v31, v36, 0x4A00000000, 2 * (v65 == 0), 0, v69);
                    uint64_t v45 = v44;
                    if (v68)
                    {
                      uint64_t v46 = v28;
                      unint64_t v47 = v27;
                      if (v44)
                      {
                        std::string __p = 0;
                        CFTypeRef v72 = 0;
                        long long v73 = 0;
                        uint64_t v48 = operator new(0x10uLL);
                        CFTypeRef v72 = v48 + 2;
                        long long v73 = v48 + 2;
                        void *v48 = v68;
                        v48[1] = v45;
                        std::string __p = v48;
                        uint64_t v10 = sub_2162A1128(v54, (uint64_t **)&__p);
                        if (__p)
                        {
                          CFTypeRef v72 = __p;
                          operator delete(__p);
                        }
                        if (v10)
                        {
                          *(void *)(v10 + 16sub_216195B94(&qword_26797EF28, 0) = *(void *)(v57 + 40) - *(void *)(v57 + 48);
                          (*(void (**)(uint64_t, void))(*(void *)v10 + 480))(v10, (++v56 + *(__int16 *)(*(void *)(v70 + 1032) + 496)));
                          *(_DWORD *)(v10 + 204) = 74;
                          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v10 + 528))(v10, 3, "Adding a learned phrase bigram prefix candidate", 1);
                          std::string::size_type v76 = (void ***)v10;
                          v82[0] = &unk_26C6B5430;
                          v82[3] = v82;
                          sub_216215760(a2, (void **)&v76, 1, 0, (uint64_t)v82);
                          sub_21618B96C(v82);
                          unint64_t v49 = v76;
                          std::string::size_type v76 = 0;
                          if (v49) {
                            ((void (*)(void ***))(*v49)[2])(v49);
                          }
                          LODWORD(v1sub_216195B94(&qword_26797EF28, 0) = v56 == *(unsigned __int16 *)(*(void *)(v70 + 1032) + 406);
                        }
LABEL_45:
                        (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
                        if (!v68) {
                          goto LABEL_39;
                        }
                      }
                      else
                      {
                        LODWORD(v1sub_216195B94(&qword_26797EF28, 0) = 0;
                      }
                      (*(void (**)(uint64_t))(*(void *)v68 + 16))(v68);
                      goto LABEL_39;
                    }
                    LODWORD(v1sub_216195B94(&qword_26797EF28, 0) = 0;
                    uint64_t v46 = v28;
                    unint64_t v47 = v27;
                    if (v44) {
                      goto LABEL_45;
                    }
                  }
                  else
                  {
LABEL_38:
                    LODWORD(v1sub_216195B94(&qword_26797EF28, 0) = 0;
                    uint64_t v46 = v28;
                    unint64_t v47 = v27;
                  }
LABEL_39:
                  unint64_t v50 = (uint64_t)(v79 - (void)v78) >> 5;
                  if (v50 >= 4) {
                    unint64_t v50 = 4;
                  }
                  if (v50 > v47)
                  {
                    uint64_t v23 = v47 + 1;
                    uint64_t v22 = v46 + 32;
                    if ((v10 & 1) == 0) {
                      continue;
                    }
                  }
                  goto LABEL_51;
                }
              }
              LODWORD(v1sub_216195B94(&qword_26797EF28, 0) = 0;
LABEL_51:
              std::string::size_type v76 = &v78;
              sub_2161921F0((void ***)&v76);
              if (++v59 >= (unint64_t)((v81 - v80) >> 5) || (v10 & 1) != 0) {
                goto LABEL_56;
              }
            }
            LODWORD(v1sub_216195B94(&qword_26797EF28, 0) = 0;
            unint64_t v11 = v69;
          }
LABEL_56:
          uint64_t v78 = (void **)&v80;
          sub_2161921F0(&v78);
          --v11;
          --v51;
        }
        while ((_WORD)v51);
      }
    }
  }
}

void sub_2161D1B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
}

void sub_2161D1CD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a3 && ((*(uint64_t (**)(void *))(*a3 + 88))(a3) & 1) == 0 && a3[34] != a3[33])
  {
    unint64_t v9 = 0;
    do
    {
      std::mutex::lock((std::mutex *)(a1 + 880));
      int v10 = *(_DWORD *)(a1 + 944);
      std::mutex::unlock((std::mutex *)(a1 + 880));
      if (v10 == 2) {
        break;
      }
      int v11 = (*(uint64_t (**)(void *))(*a3 + 576))(a3);
      uint64_t v12 = *(unsigned __int16 *)(a3[33] + 2 * v9);
      int v13 = *(_DWORD *)(a3[36] + 4 * v9);
      unint64_t v14 = sub_2162D1CE4(0xAu);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t Surface = MecabraCandidateGetSurface(*(void **)(*(void *)(a1 + 176) + 104), v15, v16);
        *(_DWORD *)int buf = 67109890;
        int v23 = v11;
        __int16 v24 = 1024;
        int v25 = v12;
        __int16 v26 = 2112;
        uint64_t v27 = Surface;
        __int16 v28 = 1024;
        int v29 = v13;
        _os_log_debug_impl(&dword_2160F5000, v14, OS_LOG_TYPE_DEBUG, "[MJ:searchPhrasesByPosContext] Considering POS context (%d, %d) for %@ with additional cost %d", buf, 0x1Eu);
      }
      uint64_t v17 = *(void *)(a1 + 3848);
      v20[0] = MEMORY[0x263EF8330];
      v20[1] = 0x40000000;
      v20[2] = sub_2161DA5D0;
      void v20[3] = &unk_26426B940;
      v20[4] = a1;
      void v20[5] = a5;
      int v21 = v13;
      v20[6] = a2;
      sub_2161C0BE0(v17, v11, v12, a4, (uint64_t)v20);
      ++v9;
    }
    while (v9 < (uint64_t)(a3[34] - a3[33]) >> 1);
  }
}

uint64_t sub_2161D1F1C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  unsigned int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 352))(a1, v2 - 1);
  sub_2161C04AC(0);
  if (qword_26797EF48 <= (unint64_t)v3) {
    return 0;
  }
  else {
    return *(unsigned char *)(qword_26797EF40 + v3) & 1;
  }
}

uint64_t sub_2161D1FCC(uint64_t a1, uint64_t a2)
{
  if (**(unsigned char **)(a1 + 1032)) {
    return 1;
  }
  int v6 = *(_DWORD *)(a1 + 184);
  if ((v6 & 0x2000000) != 0)
  {
    if ((v6 & 0x20000000) == 0) {
      return 1;
    }
  }
  else if ((~v6 & 0x4000002) == 0 && !(*(unsigned int (**)(uint64_t))(*(void *)a2 + 408))(a2))
  {
    return 1;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2)) {
    return 1;
  }
  unint64_t v7 = 0;
  do
  {
    uint64_t v8 = *(void *)(a1 + 1072);
    uint64_t v9 = sub_216231FD4(a2, v7);
    uint64_t v11 = v10;
    uint64_t v12 = sub_2162319EC(a2, v7);
    unsigned int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, v9, v11, v12, v13);
    if (v14) {
      uint64_t v2 = (v14 >> 1) & 1;
    }
    else {
      uint64_t v2 = 1;
    }
    if ((v2 & 1) == 0) {
      break;
    }
    ++v7;
  }
  while (v7 < (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2));
  return v2;
}

void sub_2161D213C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D578, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D578))
  {
    qword_26797D570 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797D578);
  }
  if (*(void *)(a2 + 48) != *(void *)(a2 + 56))
  {
    int v8 = sub_21628DCE0(*(_DWORD *)(a1 + 184));
    uint64_t v9 = 528;
    if (v8) {
      uint64_t v9 = 532;
    }
    uint64_t v10 = *(void *)(a2 + 48);
    if ((*(void *)(a2 + 56) - v10) >> 3 >= (unint64_t)*(int *)(qword_26797D570 + v9)) {
      unint64_t v11 = *(int *)(qword_26797D570 + v9);
    }
    else {
      unint64_t v11 = (*(void *)(a2 + 56) - v10) >> 3;
    }
    uint64_t v12 = (void *)(*(void *)(a1 + 176) + 248);
    BOOL v41 = 0;
    BOOL v13 = sub_21628E128(v12, &v41);
    int v14 = !v41 && v13;
    int v15 = 0;
    uint64_t v16 = 0;
    if (v11)
    {
      uint64_t v37 = 0;
      unint64_t v17 = 0;
      uint64_t v18 = *(void *)(a1 + 176) + 376;
      do
      {
        unint64_t v39 = v15;
        while (1)
        {
          uint64_t v19 = *(char **)(*(void *)(a2 + 48) + 8 * v17);
          if ((*(unsigned int (**)(char *))(*(void *)v19 + 408))(v19) != 1)
          {
            uint64_t v20 = sub_2162AC0C8(v18, v19, a3, a4, v14, *(unsigned char *)(a1 + 810), *(unsigned char *)(a1 + 811));
            uint64_t v21 = v20;
            if (v20) {
              break;
            }
          }
          if (++v17 >= v11)
          {
            int v15 = v39;
            goto LABEL_35;
          }
        }
        if (v16 >= v37)
        {
          unint64_t v22 = (((char *)v16 - (char *)v39) >> 4) + 1;
          if (v22 >> 60) {
            sub_21610CB04();
          }
          if (v37 - v39 > v22) {
            unint64_t v22 = v37 - v39;
          }
          unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          if ((unint64_t)((char *)v37 - (char *)v39) < 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = v22;
          }
          if (v23 >> 60) {
            sub_2160FFA74();
          }
          unint64_t v38 = v23;
          __int16 v24 = (char *)operator new(16 * v23);
          uint64_t v36 = ((char *)v16 - (char *)v39) >> 4;
          int v25 = (unint64_t *)&v24[16 * v36];
          unint64_t *v25 = v17;
          v25[1] = v21;
          if (v16 == v39)
          {
            int v15 = (unint64_t *)&v24[16 * v36];
            unint64_t v28 = v38;
            uint64_t v27 = v39;
          }
          else
          {
            __int16 v26 = &v24[16 * v36];
            unint64_t v28 = v38;
            uint64_t v27 = v39;
            do
            {
              int v15 = (unint64_t *)(v26 - 16);
              *((_OWORD *)v26 - 1) = *((_OWORD *)v16 - 1);
              v16 -= 2;
              v26 -= 16;
            }
            while (v16 != v39);
          }
          uint64_t v37 = (unint64_t *)&v24[16 * v28];
          uint64_t v16 = v25 + 2;
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *uint64_t v16 = v17;
          v16[1] = v20;
          v16 += 2;
          int v15 = v39;
        }
        if ((*(unsigned char *)(a1 + 187) & 2) == 0) {
          break;
        }
        ++v17;
      }
      while (v17 < v11);
    }
LABEL_35:
    unint64_t v29 = 126 - 2 * __clz(((char *)v16 - (char *)v15) >> 4);
    if (v16 == v15) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v29;
    }
    sub_2161DDC34((unint64_t)v15, v16, v30, 1);
    if (v16 != v15)
    {
      unsigned __int16 v31 = v15;
      do
      {
        unint64_t v32 = *v31;
        uint64_t v33 = sub_2162D1CE4(6u);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v34 = *(void *)(*(void *)(a2 + 48) + 8 * v32);
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v34 + 528))(v34, 6, "[LexicalPreferenceLearner] Rewriting candidate from", 1);
          (*(void (**)(unint64_t, uint64_t, const char *, uint64_t))(*(void *)v31[1] + 528))(v31[1], 6, "[LexicalPreferenceLearner] Rewriting candidate to", 1);
        }
        unint64_t v40 = v31[1];
        sub_216215B8C(a2, (uint64_t *)&v40, v32);
        uint64_t v35 = v40;
        unint64_t v40 = 0;
        if (v35) {
          (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
        }
        v31 += 2;
      }
      while (v31 != v16);
    }
    sub_216216A20(a2, 0xCu, (uint64_t)"## Lexical preference applied ##", 0, 1u);
    if (v15) {
      operator delete(v15);
    }
  }
}

void sub_2161D251C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void sub_2161D25A0(uint64_t a1, void *a2)
{
  void v31[4] = *MEMORY[0x263EF8340];
  sub_216283050(a1, (uint64_t)a2);
  v31[0] = &unk_26C6C7308;
  v31[1] = sub_216216D1C;
  v31[3] = v31;
  sub_216215A00(a2, (uint64_t)v31);
  sub_216199290(v31);
  if (!*(unsigned char *)(a1 + 230))
  {
    uint64_t v4 = *(unsigned char **)(a1 + 1032);
    int v5 = *(_DWORD *)(a1 + 184);
    if (*v4) {
      BOOL v6 = (v5 & 0x6000000) == 100663296;
    }
    else {
      BOOL v6 = 0;
    }
    BOOL v7 = !v6 || (*(_DWORD *)(a1 + 184) & 4) == 0;
    if ((v5 & 0x800000) != 0) {
      goto LABEL_13;
    }
    BOOL v6 = v4[280] == 0;
    char v8 = !v7;
    if (v6) {
      char v8 = 1;
    }
    if ((v8 & 1) == 0)
    {
LABEL_13:
      uint64_t v9 = a2[6];
      if (v9 != a2[7])
      {
        uint64_t v10 = *(void **)v9;
        int v11 = *(char *)(*(void *)v9 + 87);
        uint64_t v12 = v11 >= 0 ? (uint64_t)(v10 + 8) : v10[8];
        unint64_t v13 = v11 >= 0 ? v11 : v10[9];
        int v14 = (unsigned __int16 *)(*(uint64_t (**)(void *))(*v10 + 552))(v10);
        unint64_t v16 = v15;
        if (v15)
        {
          unint64_t v17 = v14;
          int v18 = *v14;
          unsigned __int16 v19 = v18 - 12353;
          if ((v18 - 12353) < 0x56) {
            goto LABEL_28;
          }
          unint64_t v20 = 1;
          LOWORD(v21) = *v14;
          BOOL v22 = 1;
          do
          {
            if ((unsigned __int16)v21 == 12316) {
              break;
            }
            if ((unsigned __int16)v21 == 12540) {
              break;
            }
            BOOL v22 = v20 < v15;
            if (v15 == v20) {
              break;
            }
            int v21 = v14[v20++];
          }
          while ((v21 - 12353) >= 0x56);
          if (v22)
          {
LABEL_28:
            sub_2162855FC(*(void *)(a1 + 3872), a2, v12, v13, v14, v15);
            sub_216285BE4(*(void *)(a1 + 3872), a2, v12, v13, (uint64_t)v17, v16);
            LOWORD(v1++**(_DWORD **)(result + 8) = *v17;
            unsigned __int16 v19 = *v17 - 12353;
          }
          if (v19 < 0x54u) {
            goto LABEL_42;
          }
          unint64_t v23 = 1;
          BOOL v24 = 1;
          do
          {
            int v25 = (unsigned __int16)v18;
            unsigned int v26 = (unsigned __int16)v18 - 12289;
            BOOL v27 = v26 > 0x1B;
            int v28 = (1 << v26) & 0x8001803;
            if (!v27 && v28 != 0 || (v25 - 12539) < 2) {
              break;
            }
            BOOL v24 = v23 < v16;
            if (v16 == v23) {
              break;
            }
            int v18 = v17[v23++];
          }
          while ((v18 - 12353) >= 0x54);
          if (v24) {
LABEL_42:
          }
            sub_21628587C(*(void *)(a1 + 3872), a2, v12, v13, v17, v16);
        }
      }
    }
    sub_216286554(*(void *)(a1 + 3872), (uint64_t)a2);
  }
  sub_2162160BC(a2);
  sub_2161D2884(a1, (uint64_t)a2);
}

void sub_2161D2868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216199290((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2161D2884(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 96))(v4) != 78)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
        CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 232))(v4);
        BOOL v7 = sub_21625D0E0(1, 0, v5, v6);
        v34[1] = v7;
        if (v7)
        {
          CFArrayRef v8 = v7;
          uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
          unsigned __int8 v10 = sub_21625D824(1, 0, v9);
          CFIndex v11 = 0;
          unint64_t v32 = 0;
          uint64_t v33 = 0;
          v34[0] = 0;
          while (v11 < CFArrayGetCount(v8))
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
            sub_2161E212C(ValueAtIndex, (UniChar **)&__p);
            if (*(char *)(v4 + 87) >= 0) {
              uint64_t v13 = *(unsigned __int8 *)(v4 + 87);
            }
            else {
              uint64_t v13 = *(void *)(v4 + 72);
            }
            (*(void (**)(uint64_t))(*(void *)v4 + 544))(v4);
            uint64_t v15 = v14;
            (*(void (**)(uint64_t))(*(void *)v4 + 552))(v4);
            sub_21628E7FC(v13, v15, v16, (v31 - (unsigned char *)__p) >> 1, &v29);
            if (!v11 && (v10 & 4) != 0) {
              (*(void (**)(uint64_t, void))(*(void *)v29 + 504))(v29, 0);
            }
            unint64_t v17 = v33;
            if ((unint64_t)v33 >= v34[0])
            {
              uint64_t v20 = v33 - v32;
              if ((unint64_t)(v20 + 1) >> 61) {
                sub_21610CB04();
              }
              unint64_t v21 = (uint64_t)(v34[0] - (void)v32) >> 2;
              if (v21 <= v20 + 1) {
                unint64_t v21 = v20 + 1;
              }
              if (v34[0] - (void)v32 >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v22 = v21;
              }
              v35[4] = v34;
              if (v22) {
                unint64_t v23 = (char *)sub_2160FFAA8((uint64_t)v34, v22);
              }
              else {
                unint64_t v23 = 0;
              }
              BOOL v24 = &v23[8 * v20];
              v35[0] = v23;
              v35[1] = v24;
              v35[3] = &v23[8 * v22];
              uint64_t v25 = v29;
              uint64_t v29 = 0;
              *(void *)BOOL v24 = v25;
              size_t v35[2] = v24 + 8;
              sub_2161DE834((uint64_t *)&v32, v35);
              unsigned __int16 v19 = v33;
              sub_2161DE9E4(v35);
            }
            else
            {
              uint64_t v18 = v29;
              uint64_t v29 = 0;
              *uint64_t v33 = v18;
              unsigned __int16 v19 = v17 + 1;
            }
            uint64_t v33 = v19;
            uint64_t v26 = v29;
            uint64_t v29 = 0;
            if (v26) {
              (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
            }
            if (__p)
            {
              unsigned __int16 v31 = __p;
              operator delete(__p);
            }
            ++v11;
          }
          uint64_t v27 = sub_216215FFC(a2, &v32, v3 + 1);
          v35[0] = &v32;
          sub_21618B5DC((void ***)v35);
          CFRelease(v8);
          v3 += v27;
        }
      }
      ++v3;
      uint64_t v2 = *(void *)(a2 + 48);
    }
    while (v3 < (*(void *)(a2 + 56) - v2) >> 3);
  }
}

void sub_2161D2C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,const void *a21,__int16 a22,char a23,char a24)
{
  std::string __p = &a18;
  sub_21618B5DC((void ***)&__p);
  sub_216195B94(&a21, 0);
  _Unwind_Resume(a1);
}

void sub_2161D2CEC(uint64_t a1, char *a2, uint64_t a3)
{
  v396[1] = *MEMORY[0x263EF8340];
  CFStringRef v6 = *(void **)(a1 + 256);
  unint64_t v7 = v6[11];
  v371 = (UniChar *)v6[10];
  unint64_t v8 = v6[13];
  v379 = (unsigned __int16 *)v6[12];
  unint64_t v380 = v8;
  v375 = (unsigned __int16 *)v6[14];
  unint64_t v377 = v6[15];
  uint64_t v9 = sub_2162D1CE4(0xCu);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  int v11 = *(_DWORD *)(a1 + 184);
  uint64_t v12 = 192;
  if ((v11 & 0x20) != 0) {
    uint64_t v12 = 255;
  }
  if (**(unsigned char **)(a1 + 1032)) {
    unint64_t v13 = v12;
  }
  else {
    unint64_t v13 = 255;
  }
  unint64_t v373 = v7;
  if (v7 > v13) {
    return;
  }
  BOOL v14 = v10;
  if ((v11 & 2) != 0 && *(unsigned char *)(a1 + 228))
  {
    sub_2162155D4((uint64_t)a2);
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 3840) + 24))(v389);
    uint64_t v15 = v391;
    for (int i = v392; v15 != i; ++v15)
    {
      (*(void (**)(void *, uint64_t, const char *, uint64_t))(*(void *)*v15 + 528))(*v15, 10, "[MJNP::expandPhrasesWithLanguageModel] Adding an LM expansion candidate", 1);
      v388[0] = &unk_26C6B5430;
      v388[3] = v388;
      sub_216215760(a2, v15, 1, 0, (uint64_t)v388);
      sub_21618B96C(v388);
    }
    *(void *)v389 = &unk_26C6BE968;
    *(void *)&long long buf = &v391;
    sub_21618B5DC((void ***)&buf);
    sub_216144C28((uint64_t)&v389[8]);
  }
  if (v14) {
    sub_216216A20((uint64_t)a2, 0xCu, (uint64_t)"## Before finalizing weights ##", 0, 1u);
  }
  sub_216283050(a1, (uint64_t)a2);
  *(void *)v389 = &unk_26C6C7308;
  *(void *)&v389[8] = sub_216216D1C;
  v390[1] = v389;
  sub_216215A00(a2, (uint64_t)v389);
  sub_216199290(v389);
  if (v14) {
    sub_216216A20((uint64_t)a2, 0xCu, (uint64_t)"## After finalizing weights ##", 0, 1u);
  }
  if ((*(unsigned char *)(a1 + 186) & 0x80) == 0)
  {
    memset(v389, 0, sizeof(v389));
    v390[0] = 0;
    uint64_t v17 = *((void *)a2 + 6);
    if (*((void *)a2 + 7) != v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      for (unint64_t j = 0; j < (*((void *)a2 + 7) - v17) >> 3; ++j)
      {
        uint64_t v21 = *(void *)(v17 + 8 * j);
        int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 96))(v21);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 96))(v21) == 88)
        {
          if (j > 3) {
            goto LABEL_41;
          }
          if ((unint64_t)++v18 > 1) {
            goto LABEL_41;
          }
        }
        unint64_t v23 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 544))(v21);
        if (v24 == 1 && *v23 == 22247)
        {
          uint64_t v25 = *(unsigned __int8 *)(v21 + 87);
          int v26 = (char)v25;
          if ((v25 & 0x80u) != 0) {
            uint64_t v25 = *(void *)(v21 + 72);
          }
          if (v25 == 1)
          {
            uint64_t v27 = v26 >= 0 ? (_WORD *)(v21 + 64) : *(_WORD **)(v21 + 64);
            if (*v27 == 9787)
            {
LABEL_41:
              uint64_t v30 = *(char **)&v389[8];
              if (*(void *)&v389[8] >= v390[0])
              {
                unint64_t v32 = *(char **)v389;
                uint64_t v33 = (uint64_t)(*(void *)&v389[8] - *(void *)v389) >> 3;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 61) {
                  sub_21610CB04();
                }
                uint64_t v35 = v390[0] - *(void *)v389;
                if ((uint64_t)(v390[0] - *(void *)v389) >> 2 > v34) {
                  unint64_t v34 = v35 >> 2;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  uint64_t v37 = (char *)sub_2160FFAA8((uint64_t)v390, v36);
                  unint64_t v32 = *(char **)v389;
                  uint64_t v30 = *(char **)&v389[8];
                }
                else
                {
                  uint64_t v37 = 0;
                }
                unint64_t v38 = (unint64_t *)&v37[8 * v33];
                *unint64_t v38 = j;
                unsigned __int16 v31 = v38 + 1;
                while (v30 != v32)
                {
                  unint64_t v39 = *((void *)v30 - 1);
                  v30 -= 8;
                  *--unint64_t v38 = v39;
                }
                *(void *)v389 = v38;
                *(void *)&v389[8] = v31;
                v390[0] = &v37[8 * v36];
                if (v32) {
                  operator delete(v32);
                }
              }
              else
              {
                **(void **)&v389[8] = j;
                unsigned __int16 v31 = v30 + 8;
              }
              *(void *)&v389[8] = v31;
              goto LABEL_58;
            }
          }
        }
        if (!**(unsigned char **)(a1 + 1032))
        {
          int v29 = *(_DWORD *)(a1 + 184);
          if ((v29 & 0x2000002) == 2)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 408))(v21) == 1) {
              goto LABEL_41;
            }
            if (**(unsigned char **)(a1 + 1032)) {
              goto LABEL_32;
            }
            int v29 = *(_DWORD *)(a1 + 184);
          }
          if ((v29 & 0x2000002) == 2 && v22 != 74 && v22 != 76 && !sub_2161D1FCC(a1, v21)) {
            goto LABEL_41;
          }
        }
LABEL_32:
        (*(void (**)(uint64_t))(*(void *)v21 + 408))(v21);
        ++v19;
        if (!**(unsigned char **)(a1 + 1032))
        {
          int v28 = *(_DWORD *)(a1 + 184);
          if ((v28 & 0x2000002) == 2 && (v19 > 0x20 || v19 >= 2 && (v28 & 0x4000000) == 0 && v377 >= 0x11)) {
            goto LABEL_41;
          }
        }
LABEL_58:
        uint64_t v17 = *((void *)a2 + 6);
      }
    }
    unint64_t v40 = sub_2162D1CE4(0xBu);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      BOOL v41 = *(uint64_t **)v389;
      for (CFIndex k = *(uint64_t **)&v389[8]; v41 != k; ++v41)
      {
        uint64_t v43 = *v41;
        uint64_t v44 = sub_2162D1CE4(0xBu);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v45 = *(void *)(*((void *)a2 + 6) + 8 * v43);
          uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 24))(v45);
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v46;
          _os_log_debug_impl(&dword_2160F5000, v44, OS_LOG_TYPE_DEBUG, "Pruning %@ (n-gram expansion final)", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    sub_21621671C(a2, (unint64_t **)v389);
    if (*(void *)v389)
    {
      *(void *)&v389[8] = *(void *)v389;
      operator delete(*(void **)v389);
    }
  }
  if (!*(unsigned char *)(a1 + 230)) {
    sub_2161D213C(a1, (uint64_t)a2, (uint64_t)&v379, (void *)(*(void *)(a1 + 176) + 248));
  }
  if (**(unsigned char **)(a1 + 1032))
  {
    unint64_t v47 = *(_WORD **)(a1 + 176);
    if (v47[252] != 12290 || v47[253] != 12289 || (__int16)v47[254] != -255 || (__int16)v47[255] != -225)
    {
      if (sub_2162ADCDC(&v379))
      {
        uint64_t v48 = *((void *)a2 + 6);
        if (*((void *)a2 + 7) != v48)
        {
          unint64_t v49 = 0;
          unint64_t v50 = v47 + 188;
          do
          {
            uint64_t v51 = *(void *)(v48 + 8 * v49);
            if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v51 + 48))(v51) >= 2)
            {
              *(void *)&long long buf = sub_2162ADF48(v50, v51);
              if ((void)buf)
              {
                uint64_t v52 = sub_2162D1CE4(6u);
                if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
                {
                  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v51 + 528))(v51, 6, "[PunctuationPreferenceLearner] Rewriting candidate from", 1);
                  (*(void (**)(void, uint64_t, const char *, uint64_t))(*(void *)buf + 528))(buf, 6, "[PunctuationPreferenceLearner] Rewriting candidate to", 1);
                }
                *(void *)v389 = buf;
                if (sub_2161DE698((void *)a2 + 1, v389)) {
                  sub_216215B8C((uint64_t)a2, (uint64_t *)&buf, v49);
                }
                else {
                  sub_216216894(a2, (uint64_t **)&buf, v49);
                }
                uint64_t v53 = buf;
                *(void *)&long long buf = 0;
                if (v53) {
                  (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
                }
              }
            }
            ++v49;
            uint64_t v48 = *((void *)a2 + 6);
          }
          while (v49 < (*((void *)a2 + 7) - v48) >> 3);
        }
      }
    }
  }
  int v54 = *(_DWORD *)(a1 + 184);
  if ((v54 & 0x800000) != 0) {
    goto LABEL_509;
  }
  uint64_t v56 = *((void *)a2 + 6);
  uint64_t v55 = *((void *)a2 + 7);
  if ((unint64_t)(v55 - v56) < 0x10) {
    goto LABEL_508;
  }
  if (v56 == v55)
  {
    unint64_t v57 = 0;
    uint64_t v58 = *((void *)a2 + 7);
  }
  else
  {
    unint64_t v57 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)v56 + 96))() == 77) {
        break;
      }
      if ((*(unsigned int (**)(void))(**(void **)v56 + 96))() == 71) {
        break;
      }
      ++v57;
      v56 += 8;
    }
    while (v56 != v55);
    uint64_t v55 = *((void *)a2 + 6);
    uint64_t v58 = *((void *)a2 + 7);
  }
  uint64_t v59 = v58 - v55;
  if (v57 == (v58 - v55) >> 3) {
    goto LABEL_508;
  }
  int v60 = *(const void **)(v55 + 8 * v57);
  if (!v60) {
    goto LABEL_508;
  }
  v367 = __dynamic_cast(v60, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0);
  if (!v367) {
    goto LABEL_508;
  }
  long long buf = 0uLL;
  v396[0] = 0;
  sub_21612EA8C((void **)&buf, v59 >> 3);
  uint64_t v61 = *((void *)a2 + 6);
  uint64_t v369 = a3;
  if (*((void *)a2 + 7) == v61) {
    goto LABEL_352;
  }
  char v356 = 0;
  unint64_t v62 = 0;
  uint64_t v352 = 0;
  uint64_t v353 = 0;
  int v354 = *(_DWORD *)(a1 + 184) & 0x6000002;
  uint64_t v355 = 0;
  do
  {
    uint64_t v63 = *(void *)(v61 + 8 * v62);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 96))(v63) == 89) {
      goto LABEL_345;
    }
    int v64 = *(_DWORD *)(a1 + 184);
    if (**(unsigned char **)(a1 + 1032)) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = (*(_DWORD *)(a1 + 184) & 2) == 0;
    }
    if (v65)
    {
      if ((v64 & 0x6000002) != 0x4000002) {
        goto LABEL_151;
      }
    }
    else if ((v64 & 0x2000000) != 0)
    {
      goto LABEL_151;
    }
    int v66 = *(char *)(v63 + 87);
    if (v66 >= 0) {
      uint64_t v67 = (unsigned __int16 *)(v63 + 64);
    }
    else {
      uint64_t v67 = *(unsigned __int16 **)(v63 + 64);
    }
    if (v66 >= 0) {
      unint64_t v68 = *(unsigned __int8 *)(v63 + 87);
    }
    else {
      unint64_t v68 = *(void *)(v63 + 72);
    }
    if (!v68 || !u_isupper(*v67) && (v68 < 2 || !u_isupper(v67[1])))
    {
      unint64_t v69 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)v63 + 544))(v63);
      unint64_t v71 = v70;
      if (!v70 || (CFTypeRef v72 = v69, !u_isupper(*v69)) && (v71 < 2 || !u_isupper(v72[1])))
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 408))(v63) == 2)
        {
          uint64_t v73 = *(char *)(v63 + 119) < 0 ? *(unsigned __int16 *)(v63 + 104) : *(unsigned __int8 *)(v63 + 119);
          uint64_t v74 = *(void *)(a1 + 256);
          uint64_t v75 = *(void *)(v74 + 128);
          uint64_t v76 = v75 >= 1 ? 1 : *(void *)(v74 + 128);
          if (v75 <= 0 && v73 - *(void *)(v74 + 120) + v76 == 1)
          {
            int v77 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 96))(v63);
            uint64_t v78 = v355;
            if (v77 == 77) {
              uint64_t v78 = v355 + 1;
            }
            uint64_t v355 = v78;
            unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
            if (*((void *)&buf + 1) >= v396[0])
            {
              uint64_t v80 = (unint64_t *)buf;
              uint64_t v81 = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
              unint64_t v82 = v81 + 1;
              if ((unint64_t)(v81 + 1) >> 61) {
                sub_21610CB04();
              }
              uint64_t v83 = v396[0] - buf;
              if ((uint64_t)(v396[0] - buf) >> 2 > v82) {
                unint64_t v82 = v83 >> 2;
              }
              if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v82;
              }
              if (v84)
              {
                uint64_t v85 = (char *)sub_2160FFAA8((uint64_t)v396, v84);
                unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
                uint64_t v80 = (unint64_t *)buf;
              }
              else
              {
                uint64_t v85 = 0;
              }
              unint64_t v111 = (unint64_t *)&v85[8 * v81];
              unint64_t *v111 = v62;
              unint64_t v112 = v111 + 1;
              while (v79 != v80)
              {
                unint64_t v176 = *--v79;
                *--unint64_t v111 = v176;
              }
              goto LABEL_342;
            }
            goto LABEL_254;
          }
        }
      }
    }
LABEL_151:
    if (v62 < v57) {
      goto LABEL_345;
    }
    int v86 = **(unsigned __int8 **)(a1 + 1032);
    int v87 = *(_DWORD *)(a1 + 184);
    int v88 = v87 & 2;
    if (**(unsigned char **)(a1 + 1032)) {
      BOOL v89 = 1;
    }
    else {
      BOOL v89 = v88 == 0;
    }
    if (!v89)
    {
      if ((v87 & 0x6000000) != 0)
      {
        int v86 = 0;
      }
      else
      {
        (*(void (**)(uint64_t))(*(void *)v63 + 552))(v63);
        if (v90 < 3)
        {
          unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
          if (*((void *)&buf + 1) < v396[0]) {
            goto LABEL_254;
          }
          uint64_t v80 = (unint64_t *)buf;
          uint64_t v91 = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
          unint64_t v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 61) {
            goto LABEL_670;
          }
          uint64_t v93 = v396[0] - buf;
          if ((uint64_t)(v396[0] - buf) >> 2 > v92) {
            unint64_t v92 = v93 >> 2;
          }
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v84 = v92;
          }
          if (v84)
          {
            uint64_t v85 = (char *)sub_2160FFAA8((uint64_t)v396, v84);
            unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
            uint64_t v80 = (unint64_t *)buf;
          }
          else
          {
            uint64_t v85 = 0;
          }
          unint64_t v111 = (unint64_t *)&v85[8 * v91];
          unint64_t *v111 = v62;
          unint64_t v112 = v111 + 1;
          while (v79 != v80)
          {
            unint64_t v174 = *--v79;
            *--unint64_t v111 = v174;
          }
LABEL_342:
          *(void *)&long long buf = v111;
          *((void *)&buf + 1) = v112;
          v396[0] = &v85[8 * v84];
          if (v80) {
            operator delete(v80);
          }
          goto LABEL_344;
        }
        int v87 = *(_DWORD *)(a1 + 184);
        int v86 = **(unsigned __int8 **)(a1 + 1032);
        int v88 = v87 & 2;
      }
    }
    BOOL v95 = (v87 & 0x2000000) == 0 && v88 != 0 && v86 == 0;
    int v96 = v87 & 0x6000002;
    if (!v95 && v96 != 67108866) {
      goto LABEL_222;
    }
    uint64_t v98 = *(void *)(a1 + 256);
    uint64_t v100 = *(void *)(v98 + 112);
    unint64_t v99 = *(void *)(v98 + 120);
    int v364 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 112))(v63);
    int v361 = (*(uint64_t (**)(void *))(*(void *)v367 + 112))(v367);
    (*(void (**)(uint64_t))(*(void *)v63 + 552))(v63);
    unint64_t v359 = v101;
    uint64_t v102 = *(unsigned __int8 *)(v63 + 87);
    if ((v102 & 0x80u) != 0) {
      uint64_t v102 = *(void *)(v63 + 72);
    }
    uint64_t v357 = v102;
    unint64_t v103 = sub_2161846A4(v100, v99);
    int v104 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 96))(v63);
    int v105 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 408))(v63);
    sub_2161C04AC(0);
    long long v106 = (unsigned __int16 *)sub_2161A2A80();
    if (v105 == 1)
    {
LABEL_183:
      unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
      if (*((void *)&buf + 1) < v396[0]) {
        goto LABEL_254;
      }
      uint64_t v80 = (unint64_t *)buf;
      uint64_t v107 = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
      unint64_t v108 = v107 + 1;
      if ((unint64_t)(v107 + 1) >> 61) {
        goto LABEL_670;
      }
      uint64_t v109 = v396[0] - buf;
      if ((uint64_t)(v396[0] - buf) >> 2 > v108) {
        unint64_t v108 = v109 >> 2;
      }
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v84 = v108;
      }
      if (v84)
      {
        uint64_t v85 = (char *)sub_2160FFAA8((uint64_t)v396, v84);
        unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
        uint64_t v80 = (unint64_t *)buf;
      }
      else
      {
        uint64_t v85 = 0;
      }
      unint64_t v111 = (unint64_t *)&v85[8 * v107];
      unint64_t *v111 = v62;
      unint64_t v112 = v111 + 1;
      while (v79 != v80)
      {
        unint64_t v113 = *--v79;
        *--unint64_t v111 = v113;
      }
      goto LABEL_342;
    }
    if (v104 == 71) {
      goto LABEL_222;
    }
    if (v104 == 88) {
      goto LABEL_183;
    }
    int64x2_t v110 = v106;
    if (v104 != 77)
    {
      if (v354 != 67108866) {
        goto LABEL_222;
      }
      if (v104 == 80 && ++v353 > (unint64_t)v106[188]) {
        goto LABEL_183;
      }
LABEL_209:
      if (v105 == 2 && v99 - v103 < v110[149] && v359 > v99 - v103 + 1 || v364 - v361 > (__int16)v110[148]) {
        goto LABEL_183;
      }
      goto LABEL_222;
    }
    if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v63 + 48))(v63) > 1
      || (unsigned int v114 = (*(uint64_t (**)(uint64_t, void))(*(void *)v63 + 344))(v63, 0),
          (unsigned __int16)word_26797EF68 > v114)
      || (unsigned __int16)word_26797EF6A < v114)
    {
      if ((unint64_t)++v355 > 3) {
        goto LABEL_183;
      }
    }
    if (v354 == 67108866) {
      goto LABEL_209;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 408))(v63) == 2)
    {
      if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v63 + 48))(v63) > 1) {
        goto LABEL_183;
      }
      unsigned int v115 = (*(uint64_t (**)(uint64_t, void))(*(void *)v63 + 344))(v63, 0);
      if ((unsigned __int16)word_26797EF68 > v115 || (unsigned __int16)word_26797EF6A < v115) {
        goto LABEL_183;
      }
    }
    if (v105 == 2 && v359 == v357 && (unint64_t)++v352 > 1) {
      goto LABEL_183;
    }
    CFStringRef v116 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v63 + 232))(v63);
    if (CFStringGetLength(v116) < 5) {
      goto LABEL_183;
    }
LABEL_222:
    if ((*(unsigned char *)(a1 + 187) & 0x20) != 0 && (sub_2161D1FCC(a1, v63) & 1) == 0)
    {
      unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
      if (*((void *)&buf + 1) < v396[0]) {
        goto LABEL_254;
      }
      uint64_t v80 = (unint64_t *)buf;
      uint64_t v133 = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
      unint64_t v134 = v133 + 1;
      if ((unint64_t)(v133 + 1) >> 61) {
        goto LABEL_670;
      }
      uint64_t v135 = v396[0] - buf;
      if ((uint64_t)(v396[0] - buf) >> 2 > v134) {
        unint64_t v134 = v135 >> 2;
      }
      if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v84 = v134;
      }
      if (v84)
      {
        uint64_t v85 = (char *)sub_2160FFAA8((uint64_t)v396, v84);
        unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
        uint64_t v80 = (unint64_t *)buf;
      }
      else
      {
        uint64_t v85 = 0;
      }
      unint64_t v111 = (unint64_t *)&v85[8 * v133];
      unint64_t *v111 = v62;
      unint64_t v112 = v111 + 1;
      while (v79 != v80)
      {
        unint64_t v173 = *--v79;
        *--unint64_t v111 = v173;
      }
      goto LABEL_342;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 408))(v63) == 1) {
      goto LABEL_345;
    }
    if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v63 + 48))(v63) < 2) {
      goto LABEL_325;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D5A0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D5A0))
    {
      sub_216184F68(byte_26797D5C8, (char *)L"(<[{（＜［｛「『【〈《");
      __cxa_atexit((void (*)(void *))sub_216184364, byte_26797D5C8, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D5A0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D5A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797D5A8))
    {
      sub_216184F68(byte_26797D5E0, (char *)asc_2163CA684);
      __cxa_atexit((void (*)(void *))sub_216184364, byte_26797D5E0, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D5A8);
    }
    uint64_t v117 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 544))(v63);
    unint64_t v360 = v118;
    uint64_t v362 = v117;
    if (v118)
    {
      BOOL v119 = 0;
      int v120 = 0;
      unint64_t v122 = v118;
      uint64_t v121 = (unsigned __int16 *)v117;
      do
      {
        int v124 = *v121++;
        int v123 = v124;
        if ((unsigned __int16)(v124 + 240) >= 0xAu)
        {
          if ((v123 - 48) >= 0xA)
          {
            if (sub_2161EC274(v123)) {
              int v125 = 3;
            }
            else {
              int v125 = 0;
            }
          }
          else
          {
            int v125 = 1;
          }
        }
        else
        {
          int v125 = 2;
        }
        if (v119 && v125 != 0 && v120 != v125) {
          goto LABEL_244;
        }
        BOOL v119 = v125 != 0;
        int v120 = v125;
        --v122;
      }
      while (v122);
    }
    unint64_t v127 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v63 + 24))(v63);
    if (sub_2161C86EC(v127, v128, v129)) {
      goto LABEL_244;
    }
    if (v360 < 2)
    {
LABEL_312:
      uint64_t v161 = (*(uint64_t (**)(uint64_t))(*(void *)v63 + 544))(v63);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v63 + 48))(v63))
      {
        unint64_t v162 = 0;
        uint64_t v163 = 0;
        do
        {
          if (v162)
          {
            int v164 = *(unsigned __int16 *)(v161 + 2 * v163 - 2);
            unsigned int v165 = v164 - 48;
            unsigned int v166 = (unsigned __int16)(v164 + 240);
            BOOL v167 = v165 >= 0xA && v166 > 9;
            if (!v167)
            {
              int v168 = *(unsigned __int16 *)(v161 + 2 * v163);
              unsigned int v169 = v168 - 48;
              unsigned int v170 = (unsigned __int16)(v168 + 240);
              if (v169 < 0xA || v170 < 0xA) {
                goto LABEL_244;
              }
            }
          }
          unsigned int v172 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v63 + 568))(v63, v162++);
          v163 += v172;
        }
        while (v162 < (*(uint64_t (**)(uint64_t))(*(void *)v63 + 48))(v63));
      }
LABEL_325:
      char v356 = 1;
      goto LABEL_345;
    }
    uint64_t v358 = 0;
    uint64_t v365 = v362;
    uint64_t v136 = 1;
    while (1)
    {
      int v137 = *(unsigned __int16 *)(v362 + 2 * v136);
      UChar32 v138 = 9787;
      if (v137 == 9787 || (unsigned int v139 = u_charType(*(unsigned __int16 *)(v362 + 2 * v136)) - 19, v138 = v137, v139 > 0xA))
      {
        if (u_charType(v138) == 19)
        {
          uint64_t v151 = 0;
          while (1)
          {
            uint64_t v152 = 4;
            if (v136 + v151 > 4) {
              uint64_t v152 = v136 + v151;
            }
            if (v136 + v151 <= v152 - 4) {
              break;
            }
            UChar32 v153 = *(unsigned __int16 *)(v365 + 2 * v151);
            int v154 = u_charType(v153);
            --v151;
            if (v137 != v153 && v154 == 19) {
              goto LABEL_244;
            }
          }
        }
        else if (sub_216183BFC(byte_26797D5E0, v137, 0) != -1)
        {
          uint64_t v156 = 0;
          while (1)
          {
            uint64_t v157 = 6;
            if (v136 + v156 > 6) {
              uint64_t v157 = v136 + v156;
            }
            if (v136 + v156 <= v157 - 6) {
              break;
            }
            int v158 = *(unsigned __int16 *)(v365 + 2 * v156);
            uint64_t v159 = sub_216183BFC(byte_26797D5C8, v158, 0);
            --v156;
            if (v137 != v158 && v159 != -1) {
              goto LABEL_244;
            }
          }
        }
        goto LABEL_311;
      }
      uint64_t v140 = 2;
      if (v136 > 2) {
        uint64_t v140 = v136;
      }
      if (v136 > (unint64_t)(v140 - 2)) {
        break;
      }
LABEL_311:
      ++v136;
      ++v358;
      v365 += 2;
      if (v136 == v360) {
        goto LABEL_312;
      }
    }
    uint64_t v141 = v358;
    while (1)
    {
      UChar32 v142 = *(unsigned __int16 *)(v362 + 2 * v141);
      if (v142 != 9787 && (u_charType(*(unsigned __int16 *)(v362 + 2 * v141)) - 19) <= 0xA)
      {
        IntPropertyCFDictionaryRef Value = u_getIntPropertyValue(v137, UCHAR_EAST_ASIAN_WIDTH);
        int32_t v144 = u_getIntPropertyValue(v142, UCHAR_EAST_ASIAN_WIDTH);
        BOOL v145 = IntPropertyValue == 3 || IntPropertyValue == 5;
        int v146 = v145;
        BOOL v147 = v144 == 3 || v144 == 5;
        int v148 = v147;
        if (v146 != v148) {
          break;
        }
      }
      uint64_t v149 = 2;
      if (v141 > 2) {
        uint64_t v149 = v141;
      }
      uint64_t v150 = v141-- + 1;
      if (v150 < v149) {
        goto LABEL_311;
      }
    }
LABEL_244:
    unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
    if (*((void *)&buf + 1) >= v396[0])
    {
      uint64_t v80 = (unint64_t *)buf;
      uint64_t v130 = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
      unint64_t v131 = v130 + 1;
      if (!((unint64_t)(v130 + 1) >> 61))
      {
        uint64_t v132 = v396[0] - buf;
        if ((uint64_t)(v396[0] - buf) >> 2 > v131) {
          unint64_t v131 = v132 >> 2;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v84 = v131;
        }
        if (v84)
        {
          uint64_t v85 = (char *)sub_2160FFAA8((uint64_t)v396, v84);
          unint64_t v79 = (unint64_t *)*((void *)&buf + 1);
          uint64_t v80 = (unint64_t *)buf;
        }
        else
        {
          uint64_t v85 = 0;
        }
        unint64_t v111 = (unint64_t *)&v85[8 * v130];
        unint64_t *v111 = v62;
        unint64_t v112 = v111 + 1;
        while (v79 != v80)
        {
          unint64_t v175 = *--v79;
          *--unint64_t v111 = v175;
        }
        goto LABEL_342;
      }
LABEL_670:
      sub_21610CB04();
    }
LABEL_254:
    unint64_t *v79 = v62;
    unint64_t v112 = v79 + 1;
LABEL_344:
    *((void *)&buf + 1) = v112;
LABEL_345:
    ++v62;
    uint64_t v61 = *((void *)a2 + 6);
  }
  while (v62 < (*((void *)a2 + 7) - v61) >> 3);
  a3 = v369;
  if ((v356 & 1) == 0)
  {
LABEL_352:
    uint64_t v177 = (void *)buf;
    if ((void)buf != *((void *)&buf + 1))
    {
      while (*v177 != v57)
      {
        if (++v177 == *((void **)&buf + 1))
        {
          uint64_t v177 = (void *)*((void *)&buf + 1);
          break;
        }
      }
    }
    if (v177 != *((void **)&buf + 1))
    {
      uint64_t v178 = *((void *)&buf + 1) - (void)(v177 + 1);
      if (*((void **)&buf + 1) != v177 + 1) {
        memmove(v177, v177 + 1, *((void *)&buf + 1) - (void)(v177 + 1));
      }
      *((void *)&buf + 1) = (char *)v177 + v178;
    }
  }
  int v179 = sub_2162D1CE4(0xBu);
  if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v181 = (uint64_t *)*((void *)&buf + 1);
    for (CFIndex m = (uint64_t *)buf; m != v181; ++m)
    {
      uint64_t v182 = *m;
      v183 = sub_2162D1CE4(0xBu);
      if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v184 = *(void *)(*((void *)a2 + 6) + 8 * v182);
        uint64_t v185 = (*(uint64_t (**)(uint64_t))(*(void *)v184 + 24))(v184);
        *(_DWORD *)v389 = 138412290;
        *(void *)&v389[4] = v185;
        _os_log_debug_impl(&dword_2160F5000, v183, OS_LOG_TYPE_DEBUG, "Pruning %@ (post-processing)", v389, 0xCu);
      }
    }
  }
  if (**(unsigned char **)(a1 + 1032) && (*(_DWORD *)(a1 + 184) & 0x6000002) == 0x4000002)
  {
    memset(v389, 0, sizeof(v389));
    v390[0] = 0;
    unsigned int v187 = (uint64_t *)*((void *)&buf + 1);
    unsigned int v186 = (uint64_t *)buf;
    if ((void)buf != *((void *)&buf + 1))
    {
      do
      {
        uint64_t v188 = *v186;
        uint64_t v189 = *(const void **)(*((void *)a2 + 6) + 8 * *v186);
        if (v189)
        {
          uint64_t v190 = __dynamic_cast(v189, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0);
          if (v190)
          {
            unsigned int v191 = v190;
            if ((*(unsigned int (**)(_DWORD *))(*(void *)v190 + 408))(v190) == 2)
            {
              unsigned int v192 = *(char **)&v389[8];
              if (*(void *)&v389[8] >= v390[0])
              {
                int64_t v194 = *(char **)v389;
                uint64_t v195 = (uint64_t)(*(void *)&v389[8] - *(void *)v389) >> 3;
                unint64_t v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61) {
                  sub_21610CB04();
                }
                uint64_t v197 = v390[0] - *(void *)v389;
                if ((uint64_t)(v390[0] - *(void *)v389) >> 2 > v196) {
                  unint64_t v196 = v197 >> 2;
                }
                if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v198 = v196;
                }
                if (v198)
                {
                  unint64_t v199 = (char *)sub_2160FFAA8((uint64_t)v390, v198);
                  int64_t v194 = *(char **)v389;
                  unsigned int v192 = *(char **)&v389[8];
                }
                else
                {
                  unint64_t v199 = 0;
                }
                uint64_t v200 = &v199[8 * v195];
                *(void *)uint64_t v200 = v188;
                v193 = v200 + 8;
                while (v192 != v194)
                {
                  uint64_t v201 = *((void *)v192 - 1);
                  v192 -= 8;
                  *((void *)v200 - 1) = v201;
                  v200 -= 8;
                }
                *(void *)v389 = v200;
                *(void *)&v389[8] = v193;
                v390[0] = &v199[8 * v198];
                if (v194) {
                  operator delete(v194);
                }
              }
              else
              {
                **(void **)&v389[8] = v188;
                v193 = v192 + 8;
              }
              *(void *)&v389[8] = v193;
            }
            else
            {
              v191[51] = 68;
            }
          }
        }
        ++v186;
      }
      while (v186 != v187);
      unsigned int v186 = (uint64_t *)buf;
      a3 = v369;
    }
    if (v186)
    {
      *((void *)&buf + 1) = v186;
      operator delete(v186);
    }
    long long buf = *(_OWORD *)v389;
    v396[0] = v390[0];
  }
  sub_21621671C(a2, (unint64_t **)&buf);
  uint64_t v202 = *(void *)(a1 + 1184);
  if (v202 && (*(unsigned int (**)(uint64_t))(*(void *)v202 + 48))(v202))
  {
    int v203 = sub_21628DCE0(*(_DWORD *)(a1 + 184));
    uint64_t v204 = 224;
    if (v203) {
      uint64_t v204 = 228;
    }
    unint64_t v205 = *(int *)(*(void *)(a1 + 1032) + v204);
    uint64_t v206 = *((void *)a2 + 6);
    uint64_t v207 = *((void *)a2 + 7);
    if (v206 == v207)
    {
      uint64_t v208 = 0;
      uint64_t v211 = *((void *)a2 + 6);
    }
    else
    {
      uint64_t v208 = 0;
      uint64_t v209 = v206 + 8;
      do
      {
        if ((*(unsigned int (**)(void))(**(void **)(v209 - 8) + 96))(*(void *)(v209 - 8)) == 77) {
          break;
        }
        if ((*(unsigned int (**)(void))(**(void **)(v209 - 8) + 96))(*(void *)(v209 - 8)) == 71)
        {
          BOOL v210 = 1;
        }
        else
        {
          ++v208;
          BOOL v210 = v209 == v207;
        }
        v209 += 8;
      }
      while (!v210);
      uint64_t v206 = *((void *)a2 + 6);
      uint64_t v211 = *((void *)a2 + 7);
    }
    if (v208 != (v211 - v206) >> 3)
    {
      v212 = *(double **)(v206 + 8 * v208);
      int v213 = (*(uint64_t (**)(double *))(*(void *)v212 + 384))(v212);
      double v214 = v212[23];
      float v215 = sub_2161A2A80();
      double v216 = *((double *)v215 + 1);
      int v217 = *((_DWORD *)v215 + 1);
      memset(v389, 0, sizeof(v389));
      v390[0] = 0;
      sub_21612EA8C((void **)v389, ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3) - v208);
      unint64_t v218 = v208 + 1;
      uint64_t v219 = *((void *)a2 + 6);
      if (v208 + 1 < (unint64_t)((*((void *)a2 + 7) - v219) >> 3))
      {
        unint64_t v363 = 0;
        unint64_t v366 = 0;
        int v368 = (int)(v216 * (double)v213 - (double)v217 * v214);
        while (1)
        {
          size_t v220 = *(const void **)(v219 + 8 * v218);
          if (!v220) {
            goto LABEL_418;
          }
          uint64_t v221 = (double *)__dynamic_cast(v220, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0);
          if (!v221) {
            goto LABEL_418;
          }
          v222 = v221;
          if ((*(unsigned int (**)(double *))(*(void *)v221 + 408))(v221) == 1) {
            goto LABEL_418;
          }
          int v223 = (*(uint64_t (**)(double *))(*(void *)v222 + 96))(v222);
          if ((v223 - 66) <= 0x11 && ((1 << (v223 - 66)) & 0x24521) != 0) {
            goto LABEL_418;
          }
          unint64_t v225 = v205;
          int v226 = (*(uint64_t (**)(double *))(*(void *)v222 + 408))(v222);
          int v227 = (*(uint64_t (**)(double *))(*(void *)v222 + 384))(v222);
          double v228 = v222[23];
          uint64_t v229 = (double *)sub_2161A2A80();
          int v230 = (int)(v229[1] * (double)v227 - (double)*((int *)v229 + 1) * v228) - v368;
          if (v226 == 2) {
            break;
          }
          if (v226 || (*(uint64_t (**)(double *))(*(void *)v222 + 48))(v222) == 1) {
            goto LABEL_498;
          }
          unint64_t v231 = sub_2161EE01C(*(void *)(a1 + 1040), (uint64_t)v222);
          if (*((char *)v222 + 119) < 0) {
            uint64_t v232 = *((void *)v222 + 13);
          }
          else {
            LOWORD(v232) = *((unsigned __int8 *)v222 + 119);
          }
          BOOL v241 = (unsigned __int16)v232 > 4u && v231 > 1;
          uint64_t v242 = 236;
          if (v241) {
            uint64_t v242 = 240;
          }
          if (v230 > *(_DWORD *)(*(void *)(a1 + 1032) + v242))
          {
            uint64_t v234 = *(unint64_t **)&v389[8];
            if (*(void *)&v389[8] < v390[0]) {
              goto LABEL_446;
            }
            unint64_t v235 = *(unint64_t **)v389;
            uint64_t v251 = (uint64_t)(*(void *)&v389[8] - *(void *)v389) >> 3;
            unint64_t v252 = v251 + 1;
            if ((unint64_t)(v251 + 1) >> 61) {
              goto LABEL_674;
            }
            uint64_t v253 = v390[0] - *(void *)v389;
            if ((uint64_t)(v390[0] - *(void *)v389) >> 2 > v252) {
              unint64_t v252 = v253 >> 2;
            }
            if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v239 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v239 = v252;
            }
            if (v239)
            {
              char v240 = (char *)sub_2160FFAA8((uint64_t)v390, v239);
              unint64_t v235 = *(unint64_t **)v389;
              uint64_t v234 = *(unint64_t **)&v389[8];
            }
            else
            {
              char v240 = 0;
            }
            unint64_t v258 = (unint64_t *)&v240[8 * v251];
            *unint64_t v258 = v218;
            uint64_t v243 = v258 + 1;
            while (v234 != v235)
            {
              unint64_t v260 = *--v234;
              *--unint64_t v258 = v260;
            }
LABEL_484:
            *(void *)v389 = v258;
            *(void *)&v389[8] = v243;
            v390[0] = &v240[8 * v239];
            if (v235) {
              operator delete(v235);
            }
            goto LABEL_486;
          }
          if (v363 >= v225)
          {
            std::string v244 = *(unint64_t **)&v389[8];
            if (*(void *)&v389[8] < v390[0]) {
              goto LABEL_467;
            }
            unint64_t v245 = *(unint64_t **)v389;
            uint64_t v255 = (uint64_t)(*(void *)&v389[8] - *(void *)v389) >> 3;
            unint64_t v256 = v255 + 1;
            if ((unint64_t)(v255 + 1) >> 61) {
LABEL_674:
            }
              sub_21610CB04();
            uint64_t v257 = v390[0] - *(void *)v389;
            if ((uint64_t)(v390[0] - *(void *)v389) >> 2 > v256) {
              unint64_t v256 = v257 >> 2;
            }
            if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v249 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v249 = v256;
            }
            if (v249)
            {
              long long v250 = (char *)sub_2160FFAA8((uint64_t)v390, v249);
              unint64_t v245 = *(unint64_t **)v389;
              std::string v244 = *(unint64_t **)&v389[8];
            }
            else
            {
              long long v250 = 0;
            }
            int v261 = (unint64_t *)&v250[8 * v255];
            *int v261 = v218;
            int64x2_t v254 = v261 + 1;
            while (v244 != v245)
            {
              unint64_t v263 = *--v244;
              *--int v261 = v263;
            }
LABEL_495:
            *(void *)v389 = v261;
            *(void *)&v389[8] = v254;
            v390[0] = &v250[8 * v249];
            if (v245) {
              operator delete(v245);
            }
            goto LABEL_497;
          }
          unint64_t v205 = v225;
          ++v363;
LABEL_418:
          ++v218;
          uint64_t v219 = *((void *)a2 + 6);
          if (v218 >= (*((void *)a2 + 7) - v219) >> 3) {
            goto LABEL_499;
          }
        }
        if (v223 == 70) {
          goto LABEL_498;
        }
        uint64_t v233 = *(void *)(a1 + 1032);
        if (v230 <= *(_DWORD *)(v233 + 244))
        {
          if (v366 < *(int *)(v233 + 232))
          {
            ++v366;
LABEL_498:
            unint64_t v205 = v225;
            goto LABEL_418;
          }
          std::string v244 = *(unint64_t **)&v389[8];
          if (*(void *)&v389[8] >= v390[0])
          {
            unint64_t v245 = *(unint64_t **)v389;
            uint64_t v246 = (uint64_t)(*(void *)&v389[8] - *(void *)v389) >> 3;
            unint64_t v247 = v246 + 1;
            if ((unint64_t)(v246 + 1) >> 61) {
LABEL_675:
            }
              sub_21610CB04();
            uint64_t v248 = v390[0] - *(void *)v389;
            if ((uint64_t)(v390[0] - *(void *)v389) >> 2 > v247) {
              unint64_t v247 = v248 >> 2;
            }
            if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v249 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v249 = v247;
            }
            if (v249)
            {
              long long v250 = (char *)sub_2160FFAA8((uint64_t)v390, v249);
              unint64_t v245 = *(unint64_t **)v389;
              std::string v244 = *(unint64_t **)&v389[8];
            }
            else
            {
              long long v250 = 0;
            }
            int v261 = (unint64_t *)&v250[8 * v246];
            *int v261 = v218;
            int64x2_t v254 = v261 + 1;
            while (v244 != v245)
            {
              unint64_t v262 = *--v244;
              *--int v261 = v262;
            }
            goto LABEL_495;
          }
LABEL_467:
          *std::string v244 = v218;
          int64x2_t v254 = v244 + 1;
LABEL_497:
          *(void *)&v389[8] = v254;
          goto LABEL_498;
        }
        uint64_t v234 = *(unint64_t **)&v389[8];
        if (*(void *)&v389[8] >= v390[0])
        {
          unint64_t v235 = *(unint64_t **)v389;
          uint64_t v236 = (uint64_t)(*(void *)&v389[8] - *(void *)v389) >> 3;
          unint64_t v237 = v236 + 1;
          if ((unint64_t)(v236 + 1) >> 61) {
            goto LABEL_675;
          }
          uint64_t v238 = v390[0] - *(void *)v389;
          if ((uint64_t)(v390[0] - *(void *)v389) >> 2 > v237) {
            unint64_t v237 = v238 >> 2;
          }
          if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v239 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v239 = v237;
          }
          if (v239)
          {
            char v240 = (char *)sub_2160FFAA8((uint64_t)v390, v239);
            unint64_t v235 = *(unint64_t **)v389;
            uint64_t v234 = *(unint64_t **)&v389[8];
          }
          else
          {
            char v240 = 0;
          }
          unint64_t v258 = (unint64_t *)&v240[8 * v236];
          *unint64_t v258 = v218;
          uint64_t v243 = v258 + 1;
          while (v234 != v235)
          {
            unint64_t v259 = *--v234;
            *--unint64_t v258 = v259;
          }
          goto LABEL_484;
        }
LABEL_446:
        *uint64_t v234 = v218;
        uint64_t v243 = v234 + 1;
LABEL_486:
        unint64_t v205 = v225;
        *(void *)&v389[8] = v243;
        goto LABEL_418;
      }
LABEL_499:
      long long v264 = sub_2162D1CE4(0xBu);
      a3 = v369;
      if (os_log_type_enabled(v264, OS_LOG_TYPE_DEBUG))
      {
        long long v265 = *(uint64_t **)v389;
        for (n = *(uint64_t **)&v389[8]; v265 != n; ++v265)
        {
          uint64_t v267 = *v265;
          unint64_t v268 = sub_2162D1CE4(0xBu);
          if (os_log_type_enabled(v268, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v269 = *(void *)(*((void *)a2 + 6) + 8 * v267);
            uint64_t v270 = (*(uint64_t (**)(uint64_t))(*(void *)v269 + 24))(v269);
            LODWORD(__dst) = 138412290;
            *(void *)((char *)&__dst + 4) = v270;
            _os_log_debug_impl(&dword_2160F5000, v268, OS_LOG_TYPE_DEBUG, "Pruning %@ (static LM score)", (uint8_t *)&__dst, 0xCu);
          }
        }
      }
      sub_21621671C(a2, (unint64_t **)v389);
      if (*(void *)v389)
      {
        *(void *)&v389[8] = *(void *)v389;
        operator delete(*(void **)v389);
      }
    }
  }
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
LABEL_508:
  int v54 = *(_DWORD *)(a1 + 184);
LABEL_509:
  if ((~v54 & 0x6000000) == 0) {
    sub_2161D5F00(a1, (uint64_t)a2, a3);
  }
  if (!*(unsigned char *)(a1 + 230))
  {
    unint64_t v271 = *(unsigned char **)(a1 + 1032);
    int v272 = *(_DWORD *)(a1 + 184);
    BOOL v273 = 1;
    if (*v271) {
      BOOL v274 = (v272 & 0x6000000) == 100663296;
    }
    else {
      BOOL v274 = 0;
    }
    BOOL v275 = !v274 || (*(_DWORD *)(a1 + 184) & 4) == 0;
    if ((v272 & 0x800000) != 0) {
      goto LABEL_523;
    }
    BOOL v65 = v271[280] == 0;
    char v276 = !v275;
    if (v65) {
      char v276 = 1;
    }
    if ((v276 & 1) == 0)
    {
LABEL_523:
      if (v377)
      {
        int v277 = *v375;
        unsigned __int16 v278 = v277 - 12353;
        if ((v277 - 12353) < 0x56) {
          goto LABEL_531;
        }
        unint64_t v279 = 1;
        LOWORD(v28sub_216195B94(&qword_26797EF28, 0) = *v375;
        do
        {
          if ((unsigned __int16)v280 == 12316) {
            break;
          }
          if ((unsigned __int16)v280 == 12540) {
            break;
          }
          BOOL v273 = v279 < v377;
          if (v377 == v279) {
            break;
          }
          int v280 = v375[v279++];
        }
        while ((v280 - 12353) >= 0x56);
        if (v273)
        {
LABEL_531:
          sub_2162855FC(*(void *)(a1 + 3872), a2, (uint64_t)v379, v380, v375, v377);
          sub_216285BE4(*(void *)(a1 + 3872), a2, (uint64_t)v379, v380, (uint64_t)v375, v377);
          LOWORD(v277) = *v375;
          unsigned __int16 v278 = *v375 - 12353;
        }
        if (v278 < 0x54u) {
          goto LABEL_545;
        }
        unint64_t v281 = 1;
        BOOL v282 = 1;
        do
        {
          int v283 = (unsigned __int16)v277;
          unsigned int v284 = (unsigned __int16)v277 - 12289;
          BOOL v167 = v284 > 0x1B;
          int v285 = (1 << v284) & 0x8001803;
          if (!v167 && v285 != 0 || (v283 - 12539) < 2) {
            break;
          }
          BOOL v282 = v281 < v377;
          if (v377 == v281) {
            break;
          }
          int v277 = v375[v281++];
        }
        while ((v277 - 12353) >= 0x54);
        if (v282) {
LABEL_545:
        }
          sub_21628587C(*(void *)(a1 + 3872), a2, (uint64_t)v379, v380, v375, v377);
      }
      if (v380)
      {
        BOOL v288 = 0;
        for (iint i = 0; ii != v380; v288 = ii >= v380)
        {
          int v290 = v379[ii];
          if ((v290 - 12353) >= 0x56 && v290 != 12540 && v290 != 12316) {
            break;
          }
          ++ii;
        }
        if (!v288 && (*(unsigned char *)(a1 + 187) & 4) == 0)
        {
          uint64_t v293 = *(void *)(a1 + 168);
          if (v293) {
            int v294 = *(_DWORD *)(v293 + 64);
          }
          else {
            int v294 = 0;
          }
          sub_21628629C(*(void *)(a1 + 3872), (uint64_t)a2, v371, v373, (uint64_t)v379, v380, v294);
        }
      }
    }
    int v295 = sub_216244C24(*(void *)(a1 + 3888), (uint64_t)a2, v371, v373);
    int v296 = v295;
    if (v373) {
      int v297 = *v371 == 12306;
    }
    else {
      int v297 = 0;
    }
    BOOL v298 = v295 > 0;
    sub_216286554(*(void *)(a1 + 3872), (uint64_t)a2);
    BOOL v299 = *(int *)(a1 + 184) < 0 && v296 == (v298 & ~v297);
    int v300 = v299;
    if (v299) {
      int v301 = *(__int16 *)(*(void *)(a1 + 1032) + 442);
    }
    else {
      int v301 = 2;
    }
    int v376 = v301;
    if (v296) {
      int v302 = v296 + 1;
    }
    else {
      int v302 = v301;
    }
    sub_216286904(*(void *)(a1 + 3872), a2, v379, v380, v302);
    int v378 = sub_2161EC8E8(v379, v380, v300);
    if (v300)
    {
      if (((sub_2161EC7F0((uint64_t)v379, v380) ^ 1 | ((*(unsigned char *)(a1 + 184) & 0x20) >> 5) | v378) & 1) == 0)
      {
        uint64_t v303 = (const void **)*((void *)a2 + 6);
        uint64_t v304 = (const void **)*((void *)a2 + 7);
        if (v303 != v304)
        {
          while (1)
          {
            if ((*(unsigned int (**)(void))(*(void *)*v303 + 96))() != 89)
            {
              if (*v303)
              {
                uint64_t v305 = __dynamic_cast(*v303, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0);
                if (v305) {
                  break;
                }
              }
            }
            if (++v303 == v304) {
              goto LABEL_585;
            }
          }
          uint64_t v312 = v305;
          uint64_t v313 = (*(uint64_t (**)(void *))(*(void *)v305 + 544))(v305);
          if (sub_2161EC7F0(v313, v314))
          {
            long long buf = 0uLL;
            v396[0] = 0;
            long long __dst = 0uLL;
            uint64_t v394 = 0;
            (*(void (**)(void *))(*(void *)v312 + 544))(v312);
            sub_216184398(&buf, v315);
            (*(void (**)(void *))(*(void *)v312 + 552))(v312);
            sub_216184398(&__dst, v316);
            std::string __p = 0;
            v386 = 0;
            v387 = 0;
            unint64_t v317 = (*(uint64_t (**)(void *))(*(void *)v312 + 48))(v312);
            sub_2161C1AC0(&__p, v317);
            v318 = (char *)(*(uint64_t (**)(void *))(*(void *)v312 + 544))(v312);
            __int16 v319 = (char *)(*(uint64_t (**)(void *))(*(void *)v312 + 552))(v312);
            v320 = (long long **)(*(uint64_t (**)(void *))(*(void *)v312 + 304))(v312);
            uint64_t v321 = *v320;
            v370 = v320[1];
            if (*v320 != v370)
            {
              do
              {
                uint64_t v374 = *((unsigned __int16 *)v321 + 12);
                if (v318) {
                  unint64_t v322 = *((unsigned __int16 *)v321 + 12);
                }
                else {
                  unint64_t v322 = 0;
                }
                uint64_t v372 = *((unsigned __int16 *)v321 + 14);
                if (v319) {
                  unint64_t v323 = *((unsigned __int16 *)v321 + 14);
                }
                else {
                  unint64_t v323 = 0;
                }
                v324 = v386;
                if (v386 >= v387)
                {
                  v328 = __p;
                  unint64_t v329 = 0xCCCCCCCCCCCCCCCDLL * ((v386 - (unsigned char *)__p) >> 3);
                  unint64_t v330 = v329 + 1;
                  if (v329 + 1 > 0x666666666666666) {
                    sub_21618B344();
                  }
                  if (0x999999999999999ALL * ((v387 - (unsigned char *)__p) >> 3) > v330) {
                    unint64_t v330 = 0x999999999999999ALL * ((v387 - (unsigned char *)__p) >> 3);
                  }
                  if (0xCCCCCCCCCCCCCCCDLL * ((v387 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
                    unint64_t v331 = 0x666666666666666;
                  }
                  else {
                    unint64_t v331 = v330;
                  }
                  if (v331)
                  {
                    v332 = (char *)sub_21618B4A8((uint64_t)&v387, v331);
                    v328 = __p;
                    v324 = v386;
                  }
                  else
                  {
                    v332 = 0;
                  }
                  v333 = &v332[40 * v329];
                  long long v334 = *v321;
                  long long v335 = v321[1];
                  *((void *)v333 + 4) = *((void *)v321 + 4);
                  *(_OWORD *)v333 = v334;
                  *((_OWORD *)v333 + 1) = v335;
                  if (v324 == v328)
                  {
                    v339 = &v332[40 * v329];
                  }
                  else
                  {
                    v336 = &v332[40 * v329];
                    do
                    {
                      long long v337 = *(_OWORD *)((char *)v324 - 40);
                      long long v338 = *(_OWORD *)((char *)v324 - 24);
                      v339 = v336 - 40;
                      *((void *)v336 - 1) = *((void *)v324 - 1);
                      *(_OWORD *)(v336 - 24) = v338;
                      *(_OWORD *)(v336 - 4sub_216195B94(&qword_26797EF28, 0) = v337;
                      v324 = (_OWORD *)((char *)v324 - 40);
                      v336 -= 40;
                    }
                    while (v324 != v328);
                  }
                  v327 = v333 + 40;
                  std::string __p = v339;
                  v386 = v333 + 40;
                  v387 = &v332[40 * v331];
                  if (v328) {
                    operator delete(v328);
                  }
                }
                else
                {
                  long long v325 = *v321;
                  long long v326 = v321[1];
                  *((void *)v386 + 4) = *((void *)v321 + 4);
                  _OWORD *v324 = v325;
                  v324[1] = v326;
                  v327 = (char *)v324 + 40;
                }
                v386 = v327;
                if (sub_2161EC8E8((unsigned __int16 *)v318, v322, 1))
                {
                  uint64_t v384 = 0;
                  sub_2161ECB84((uint64_t)v318, v322, &v384, v389);
                  sub_2161ECB84((uint64_t)v319, v323, &v384, &v381);
                  v340 = v386;
                  __int16 v341 = HIBYTE(v390[0]);
                  if (v390[0] < 0) {
                    __int16 v341 = *(_WORD *)&v389[8];
                  }
                  *((_WORD *)v386 - ++**(_DWORD **)(result + 8) = v341;
                  __int16 v342 = v383;
                  if ((v383 & 0x80u) != 0) {
                    __int16 v342 = v382;
                  }
                  *((_WORD *)v340 - 6) = v342;
                  if (v390[0] >= 0) {
                    v343 = v389;
                  }
                  else {
                    v343 = *(uint8_t **)v389;
                  }
                  if (v390[0] >= 0) {
                    unint64_t v344 = HIBYTE(v390[0]);
                  }
                  else {
                    unint64_t v344 = *(void *)&v389[8];
                  }
                  sub_216198220((uint64_t)&buf, v343, v344);
                  if ((v383 & 0x80u) == 0) {
                    v345 = &v381;
                  }
                  else {
                    v345 = v381;
                  }
                  if ((v383 & 0x80u) == 0) {
                    unint64_t v346 = v383;
                  }
                  else {
                    unint64_t v346 = v382;
                  }
                  sub_216198220((uint64_t)&__dst, v345, v346);
                  if ((char)v383 < 0) {
                    operator delete(v381);
                  }
                  if (SHIBYTE(v390[0]) < 0) {
                    operator delete(*(void **)v389);
                  }
                }
                else
                {
                  sub_21617FAAC(v389, v318, v322);
                  if (v390[0] >= 0) {
                    v347 = v389;
                  }
                  else {
                    v347 = *(uint8_t **)v389;
                  }
                  if (v390[0] >= 0) {
                    unint64_t v348 = HIBYTE(v390[0]);
                  }
                  else {
                    unint64_t v348 = *(void *)&v389[8];
                  }
                  sub_216198220((uint64_t)&buf, v347, v348);
                  if (SHIBYTE(v390[0]) < 0) {
                    operator delete(*(void **)v389);
                  }
                  sub_21617FAAC(v389, v319, v323);
                  if (v390[0] >= 0) {
                    v349 = v389;
                  }
                  else {
                    v349 = *(uint8_t **)v389;
                  }
                  if (v390[0] >= 0) {
                    unint64_t v350 = HIBYTE(v390[0]);
                  }
                  else {
                    unint64_t v350 = *(void *)&v389[8];
                  }
                  sub_216198220((uint64_t)&__dst, v349, v350);
                  if (SHIBYTE(v390[0]) < 0) {
                    operator delete(*(void **)v389);
                  }
                }
                v318 += 2 * v374;
                v319 += 2 * v372;
                uint64_t v321 = (long long *)((char *)v321 + 40);
              }
              while (v321 != v370);
            }
            (*(void (**)(void *))(*(void *)v312 + 112))(v312);
            (*(void (**)(void *))(*(void *)v312 + 376))(v312);
            (*(void (**)(void *))(*(void *)v312 + 96))(v312);
            (*(void (**)(void *))(*(void *)v312 + 408))(v312);
            (*(void (**)(void *))(*(void *)v312 + 416))(v312);
            operator new();
          }
        }
      }
    }
LABEL_585:
    unsigned int v306 = *(_DWORD *)(a1 + 184);
    if ((v306 & 0x20) == 0 && (v378 & HIBYTE(v306)) == 1)
    {
      if (!v300)
      {
        *(void *)v389 = 0;
        sub_2161ED64C((uint64_t)v379, v380, v389);
      }
      *(void *)&long long __dst = 0;
      sub_2161ECB84((uint64_t)v379, v380, &__dst, v389);
      if (v390[0] >= 0) {
        uint64_t v307 = v389;
      }
      else {
        uint64_t v307 = *(uint8_t **)v389;
      }
      if (v390[0] >= 0) {
        uint64_t v308 = HIBYTE(v390[0]);
      }
      else {
        uint64_t v308 = *(void *)&v389[8];
      }
      LOBYTE(v351) = 0;
      int v309 = sub_2162859A8(*(void *)(a1 + 3872), a2, (uint64_t)v379, v380, (uint64_t)v379, v380, (uint64_t)v307, v308, 0, 0, v376, v351, 83, 0, 2);
      sub_216286904(*(void *)(a1 + 3872), a2, v379, v380, v376 + 1);
      if (v309)
      {
        uint64_t v310 = HIBYTE(v390[0]);
        uint64_t v311 = v389;
        if (v390[0] < 0)
        {
          uint64_t v311 = *(uint8_t **)v389;
          uint64_t v310 = *(void *)&v389[8];
        }
        *(void *)&long long buf = v311;
        *((void *)&buf + 1) = v310;
        sub_2161D6AC4(a1, a2, (uint64_t)&buf, 0, 0);
      }
      if (SHIBYTE(v390[0]) < 0) {
        operator delete(*(void **)v389);
      }
    }
  }
  sub_2162160BC(a2);
  sub_2161D2884(a1, (uint64_t)a2);
}

void sub_2161D5C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,char a42)
{
  __cxa_guard_abort(&qword_26797D5A8);
  uint64_t v44 = *(void **)(v42 - 144);
  if (v44)
  {
    *(void *)(v42 - 136) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void sub_2161D5F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D580, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D580))
  {
    *(_OWORD *)&qword_26797D608 = 0u;
    xmmword_26797D5F8 = 0u;
    dword_26797D618 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_2161D9018, &xmmword_26797D5F8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D580);
  }
  uint64_t v7 = *(void *)(a1 + 256);
  unint64_t v8 = *(void **)(v7 + 80);
  unint64_t v9 = *(void *)(v7 + 88);
  long long v106 = v8;
  unint64_t v107 = v9;
  if ((*(unsigned char *)(a1 + 187) & 0x10) != 0)
  {
    BOOL v10 = (char **)(a1 + 232);
    *(void *)(a1 + 24sub_216195B94(&qword_26797EF28, 0) = *(void *)(a1 + 232);
    BOOL v75 = v9 > 1;
    unint64_t v11 = v9 - 1;
    if (v75)
    {
      if (v8) {
        unint64_t v14 = v11;
      }
      else {
        unint64_t v14 = 0;
      }
      sub_21617FAAC(&__p, v8, v14);
      uint64_t v3 = (uint64_t)&xmmword_26797D5F8 + 8;
      unint64_t v15 = sub_2161A6920((uint64_t)&qword_26797D610, (uint64_t)&__p);
      unint64_t v16 = *((void *)&xmmword_26797D5F8 + 1);
      if (*((void *)&xmmword_26797D5F8 + 1))
      {
        unint64_t v17 = v15;
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D5F8 + 8));
        v18.i16[0] = vaddlv_u8(v18);
        unint64_t v19 = v18.u32[0];
        if (v18.u32[0] > 1uLL)
        {
          unint64_t v20 = v15;
          if (v15 >= *((void *)&xmmword_26797D5F8 + 1)) {
            unint64_t v20 = v15 % *((void *)&xmmword_26797D5F8 + 1);
          }
        }
        else
        {
          unint64_t v20 = (*((void *)&xmmword_26797D5F8 + 1) - 1) & v15;
        }
        uint64_t v21 = *(unsigned __int16 ***)(xmmword_26797D5F8 + 8 * v20);
        if (v21)
        {
          int v22 = *v21;
          if (*v21)
          {
            uint64_t v3 = *((void *)&xmmword_26797D5F8 + 1) - 1;
            do
            {
              unint64_t v23 = *((void *)v22 + 1);
              if (v23 == v17)
              {
                if (sub_2161A6964((uint64_t)&dword_26797D618, v22 + 8, (unsigned __int16 *)&__p))
                {
                  uint64_t v3 = *((void *)v22 + 5);
                  unint64_t v24 = *(void *)(a1 + 248);
                  uint64_t v25 = *(uint64_t **)(a1 + 240);
                  if ((unint64_t)v25 >= v24)
                  {
                    uint64_t v27 = ((char *)v25 - *v10) >> 3;
                    if ((unint64_t)(v27 + 1) >> 61) {
                      sub_21610CB04();
                    }
                    uint64_t v28 = v24 - (void)*v10;
                    uint64_t v29 = v28 >> 2;
                    if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
                      uint64_t v29 = v27 + 1;
                    }
                    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v30 = v29;
                    }
                    if (v30) {
                      unsigned __int16 v31 = (char *)sub_2160FFAA8(a1 + 248, v30);
                    }
                    else {
                      unsigned __int16 v31 = 0;
                    }
                    unint64_t v32 = (uint64_t *)&v31[8 * v27];
                    uint64_t v33 = &v31[8 * v30];
                    *unint64_t v32 = v3;
                    int v26 = v32 + 1;
                    uint64_t v35 = *(char **)(a1 + 232);
                    unint64_t v34 = *(char **)(a1 + 240);
                    if (v34 != v35)
                    {
                      do
                      {
                        uint64_t v36 = *((void *)v34 - 1);
                        v34 -= 8;
                        *--unint64_t v32 = v36;
                      }
                      while (v34 != v35);
                      unint64_t v34 = *v10;
                    }
                    *(void *)(a1 + 232) = v32;
                    *(void *)(a1 + 24sub_216195B94(&qword_26797EF28, 0) = v26;
                    *(void *)(a1 + 24++**(_DWORD **)(result + 8) = v33;
                    if (v34) {
                      operator delete(v34);
                    }
                  }
                  else
                  {
                    uint64_t *v25 = v3;
                    int v26 = v25 + 1;
                  }
                  *(void *)(a1 + 24sub_216195B94(&qword_26797EF28, 0) = v26;
                  break;
                }
              }
              else
              {
                if (v19 > 1)
                {
                  if (v23 >= v16) {
                    v23 %= v16;
                  }
                }
                else
                {
                  v23 &= v3;
                }
                if (v23 != v20) {
                  break;
                }
              }
              int v22 = *(unsigned __int16 **)v22;
            }
            while (v22);
          }
        }
      }
      if (SHIBYTE(v109) < 0) {
        operator delete((void *)__p);
      }
    }
    else if (qword_26797D610)
    {
      sub_2161DFFF8((void *)qword_26797D608);
      qword_26797D608 = 0;
      uint64_t v12 = *((void *)&xmmword_26797D5F8 + 1);
      if (*((void *)&xmmword_26797D5F8 + 1))
      {
        uint64_t v13 = 0;
        do
          *(void *)(xmmword_26797D5F8 + 8 * v13++) = 0;
        while (v12 != v13);
      }
      qword_26797D610 = 0;
    }
  }
  if ((sub_21626B918(a1 + 3896, (uint64_t)&v106, a2, (uint64_t **)(a1 + 232), a3, *(void *)(a1 + 864)) & 1) == 0)
  {
    uint64_t v37 = sub_2162D1CE4(8u);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = "stabilizeCandidates";
      _os_log_debug_impl(&dword_2160F5000, v37, OS_LOG_TYPE_DEBUG, "[%s] CandidateStabilizer didn't stabilize", (uint8_t *)&__p, 0xCu);
    }
  }
  if ((*(unsigned char *)(a1 + 187) & 0x10) != 0)
  {
    sub_21617FAAC(__dst, v106, v107);
    uint64_t v38 = sub_2162154E4(a2);
    if (v38 == -1 || (unint64_t v39 = *(char **)(*(void *)(a2 + 48) + 8 * v38)) == 0)
    {
LABEL_215:
      if (SHIBYTE(v105) < 0) {
        operator delete(__dst[0]);
      }
      return;
    }
    uint64_t v40 = (**(uint64_t (***)(char *))&v39[*(void *)(*(void *)v39 - 32)])(&v39[*(void *)(*(void *)v39 - 32)]);
    unint64_t v41 = sub_2161A6920((uint64_t)&qword_26797D610, (uint64_t)__dst);
    unint64_t v42 = v41;
    unint64_t v43 = *((void *)&xmmword_26797D5F8 + 1);
    if (*((void *)&xmmword_26797D5F8 + 1))
    {
      uint8x8_t v44 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D5F8 + 8));
      v44.i16[0] = vaddlv_u8(v44);
      unint64_t v45 = v44.u32[0];
      if (v44.u32[0] > 1uLL) {
        uint64_t v3 = v41 >= *((void *)&xmmword_26797D5F8 + 1) ? v41 % *((void *)&xmmword_26797D5F8 + 1) : v41;
      }
      else {
        uint64_t v3 = (*((void *)&xmmword_26797D5F8 + 1) - 1) & v41;
      }
      uint64_t v46 = *(uint64_t **)(xmmword_26797D5F8 + 8 * v3);
      if (v46)
      {
        for (uint64_t i = *v46; i; uint64_t i = *(void *)i)
        {
          unint64_t v48 = *(void *)(i + 8);
          if (v48 == v42)
          {
            if (sub_2161A6964((uint64_t)&dword_26797D618, (unsigned __int16 *)(i + 16), (unsigned __int16 *)__dst)) {
              goto LABEL_132;
            }
          }
          else
          {
            if (v45 > 1)
            {
              if (v48 >= v43) {
                v48 %= v43;
              }
            }
            else
            {
              v48 &= v43 - 1;
            }
            if (v48 != v3) {
              break;
            }
          }
        }
      }
    }
    unint64_t v49 = operator new(0x30uLL);
    *(void *)&long long __p = v49;
    *((void *)&__p + 1) = &qword_26797D608;
    LOBYTE(v109) = 0;
    *unint64_t v49 = 0;
    v49[1] = v42;
    unint64_t v50 = v49 + 2;
    if (SHIBYTE(v105) < 0)
    {
      sub_2161984AC(v50, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)unint64_t v50 = *(_OWORD *)__dst;
      v49[4] = v105;
    }
    v49[5] = 0;
    LOBYTE(v109) = 1;
    float v51 = (float)(unint64_t)(qword_26797D610 + 1);
    if (v43 && (float)(*(float *)&dword_26797D618 * (float)v43) >= v51)
    {
LABEL_122:
      uint64_t v67 = *(uint64_t **)(xmmword_26797D5F8 + 8 * v3);
      uint64_t i = __p;
      if (v67)
      {
        *(void *)long long __p = *v67;
      }
      else
      {
        *(void *)long long __p = qword_26797D608;
        qword_26797D608 = i;
        *(void *)(xmmword_26797D5F8 + 8 * v3) = &qword_26797D608;
        if (!*(void *)i)
        {
LABEL_131:
          *(void *)&long long __p = 0;
          ++qword_26797D610;
          sub_2161E00B4((uint64_t)&__p);
LABEL_132:
          uint64_t v69 = *(void *)(i + 40);
          *(void *)(i + 4sub_216195B94(&qword_26797EF28, 0) = v40;
          if (v69) {
            (*(void (**)(uint64_t))(*(void *)v69 + 16))(v69);
          }
          if ((unint64_t)qword_26797D610 >= 6)
          {
            uint64_t v70 = qword_26797D608;
            if (qword_26797D608)
            {
              unint64_t v71 = v107;
              unint64_t v72 = v107 - 5;
              while (1)
              {
                if (*(char *)(v70 + 39) < 0)
                {
                  unint64_t v73 = *(void *)(v70 + 24);
                  BOOL v75 = v73 <= v72 || v73 > v71;
                  if (v75)
                  {
LABEL_181:
                    unint64_t v93 = *((void *)&xmmword_26797D5F8 + 1);
                    unint64_t v94 = *(void *)(v70 + 8);
                    uint8x8_t v95 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D5F8 + 8));
                    v95.i16[0] = vaddlv_u8(v95);
                    if (v95.u32[0] > 1uLL)
                    {
                      if (v94 >= *((void *)&xmmword_26797D5F8 + 1)) {
                        v94 %= *((void *)&xmmword_26797D5F8 + 1);
                      }
                    }
                    else
                    {
                      v94 &= *((void *)&xmmword_26797D5F8 + 1) - 1;
                    }
                    uint64_t v96 = *(void *)v70;
                    unint64_t v97 = *(uint64_t **)(xmmword_26797D5F8 + 8 * v94);
                    do
                    {
                      uint64_t v98 = v97;
                      unint64_t v97 = (uint64_t *)*v97;
                    }
                    while (v97 != (uint64_t *)v70);
                    if (v98 == &qword_26797D608) {
                      goto LABEL_234;
                    }
                    unint64_t v99 = v98[1];
                    if (v95.u32[0] > 1uLL)
                    {
                      if (v99 >= *((void *)&xmmword_26797D5F8 + 1)) {
                        v99 %= *((void *)&xmmword_26797D5F8 + 1);
                      }
                    }
                    else
                    {
                      v99 &= *((void *)&xmmword_26797D5F8 + 1) - 1;
                    }
                    uint64_t v100 = *(void *)v70;
                    if (v99 == v94)
                    {
LABEL_203:
                      if (v100) {
                        goto LABEL_204;
                      }
                    }
                    else
                    {
LABEL_234:
                      if (!v96) {
                        goto LABEL_202;
                      }
                      unint64_t v101 = *(void *)(v96 + 8);
                      if (v95.u32[0] > 1uLL)
                      {
                        if (v101 >= *((void *)&xmmword_26797D5F8 + 1)) {
                          v101 %= *((void *)&xmmword_26797D5F8 + 1);
                        }
                      }
                      else
                      {
                        v101 &= *((void *)&xmmword_26797D5F8 + 1) - 1;
                      }
                      uint64_t v100 = *(void *)v70;
                      if (v101 != v94)
                      {
LABEL_202:
                        *(void *)(xmmword_26797D5F8 + 8 * v94) = 0;
                        uint64_t v100 = *(void *)v70;
                        goto LABEL_203;
                      }
LABEL_204:
                      unint64_t v102 = *(void *)(v100 + 8);
                      if (v95.u32[0] > 1uLL)
                      {
                        if (v102 >= v93) {
                          v102 %= v93;
                        }
                      }
                      else
                      {
                        v102 &= v93 - 1;
                      }
                      if (v102 != v94)
                      {
                        *(void *)(xmmword_26797D5F8 + 8 * v102) = v98;
                        uint64_t v100 = *(void *)v70;
                      }
                    }
                    *uint64_t v98 = v100;
                    *(void *)uint64_t v70 = 0;
                    --qword_26797D610;
                    *(void *)&long long __p = v70;
                    *((void *)&__p + 1) = &qword_26797D608;
                    LOBYTE(v109) = 1;
                    sub_2161E00B4((uint64_t)&__p);
                    goto LABEL_211;
                  }
                }
                else
                {
                  unint64_t v73 = *(unsigned __int8 *)(v70 + 39);
                  if (v72 >= v73 || v71 < v73) {
                    goto LABEL_181;
                  }
                }
                uint64_t v76 = (void *)HIBYTE(v105);
                if (v105 >= 0)
                {
                  int v77 = __dst;
                }
                else
                {
                  uint64_t v76 = __dst[1];
                  int v77 = (void **)__dst[0];
                }
                if ((unint64_t)v76 >= v73) {
                  unint64_t v78 = v73;
                }
                else {
                  unint64_t v78 = (unint64_t)v76;
                }
                if (v78 >= 0x7FFFFFFFFFFFFFF8) {
                  sub_21617FB50();
                }
                if (v78 >= 0xB) {
                  break;
                }
                HIBYTE(v109) = v78;
                p_p = &__p;
                if (v78) {
                  goto LABEL_160;
                }
LABEL_161:
                *((_WORD *)p_p + v7++**(_DWORD **)(result + 8) = 0;
                if (v109 >= 0) {
                  uint64_t v82 = HIBYTE(v109);
                }
                else {
                  uint64_t v82 = *((void *)&__p + 1);
                }
                uint64_t v83 = *(unsigned __int8 *)(v70 + 39);
                int v84 = (char)v83;
                if ((v83 & 0x80u) != 0) {
                  uint64_t v83 = *(void *)(v70 + 24);
                }
                if (v82 == v83)
                {
                  if (v82)
                  {
                    uint64_t v85 = (unsigned __int16 *)__p;
                    if (v109 >= 0) {
                      uint64_t v85 = (unsigned __int16 *)&__p;
                    }
                    if (v84 >= 0) {
                      int v86 = (unsigned __int16 *)(v70 + 16);
                    }
                    else {
                      int v86 = *(unsigned __int16 **)(v70 + 16);
                    }
                    uint64_t v87 = v82 - 1;
                    do
                    {
                      int v89 = *v85++;
                      int v88 = v89;
                      int v90 = *v86++;
                      BOOL v91 = v90 != v88;
                    }
                    while (v90 == v88 && v87-- != 0);
                    if ((SHIBYTE(v109) & 0x80000000) == 0)
                    {
LABEL_180:
                      if (v91) {
                        goto LABEL_181;
                      }
                      goto LABEL_192;
                    }
                  }
                  else
                  {
                    BOOL v91 = 0;
                    if ((SHIBYTE(v109) & 0x80000000) == 0) {
                      goto LABEL_180;
                    }
                  }
                }
                else
                {
                  BOOL v91 = 1;
                  if ((SHIBYTE(v109) & 0x80000000) == 0) {
                    goto LABEL_180;
                  }
                }
                operator delete((void *)__p);
                if (v91) {
                  goto LABEL_181;
                }
LABEL_192:
                uint64_t v96 = *(void *)v70;
LABEL_211:
                uint64_t v70 = v96;
                if (!v96) {
                  goto LABEL_215;
                }
              }
              uint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFFCLL) + 4;
              if ((v78 | 3) != 0xB) {
                uint64_t v80 = v78 | 3;
              }
              p_p = (long long *)sub_21610FD44((uint64_t)&__p, v80 + 1);
              *((void *)&__p + 1) = v78;
              int64_t v109 = v81 | 0x8000000000000000;
              *(void *)&long long __p = p_p;
LABEL_160:
              memmove(p_p, v77, 2 * v78);
              goto LABEL_161;
            }
          }
          goto LABEL_215;
        }
        unint64_t v68 = *(void *)(*(void *)i + 8);
        if ((v43 & (v43 - 1)) != 0)
        {
          if (v68 >= v43) {
            v68 %= v43;
          }
        }
        else
        {
          v68 &= v43 - 1;
        }
        uint64_t v67 = (uint64_t *)(xmmword_26797D5F8 + 8 * v68);
      }
      uint64_t *v67 = i;
      goto LABEL_131;
    }
    BOOL v52 = 1;
    if (v43 >= 3) {
      BOOL v52 = (v43 & (v43 - 1)) != 0;
    }
    unint64_t v53 = v52 | (2 * v43);
    unint64_t v54 = vcvtps_u32_f32(v51 / *(float *)&dword_26797D618);
    if (v53 <= v54) {
      int8x8_t prime = (int8x8_t)v54;
    }
    else {
      int8x8_t prime = (int8x8_t)v53;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v43 = *((void *)&xmmword_26797D5F8 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26797D5F8 + 1)) {
      goto LABEL_88;
    }
    if (*(void *)&prime < *((void *)&xmmword_26797D5F8 + 1))
    {
      unint64_t v62 = vcvtps_u32_f32((float)(unint64_t)qword_26797D610 / *(float *)&dword_26797D618);
      if (*((void *)&xmmword_26797D5F8 + 1) < 3uLL
        || (uint8x8_t v63 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D5F8 + 8)),
            v63.i16[0] = vaddlv_u8(v63),
            v63.u32[0] > 1uLL))
      {
        unint64_t v62 = std::__next_prime(v62);
      }
      else
      {
        uint64_t v64 = 1 << -(char)__clz(v62 - 1);
        if (v62 >= 2) {
          unint64_t v62 = v64;
        }
      }
      if (*(void *)&prime <= v62) {
        int8x8_t prime = (int8x8_t)v62;
      }
      if (*(void *)&prime >= v43)
      {
        unint64_t v43 = *((void *)&xmmword_26797D5F8 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_88:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          uint64_t v56 = operator new(8 * *(void *)&prime);
          unint64_t v57 = (void *)xmmword_26797D5F8;
          *(void *)&xmmword_26797D5F8 = v56;
          if (v57) {
            operator delete(v57);
          }
          uint64_t v58 = 0;
          *((int8x8_t *)&xmmword_26797D5F8 + 1) = prime;
          do
            *(void *)(xmmword_26797D5F8 + 8 * v58++) = 0;
          while (*(void *)&prime != v58);
          uint64_t v59 = (void **)qword_26797D608;
          if (qword_26797D608)
          {
            unint64_t v60 = *(void *)(qword_26797D608 + 8);
            uint8x8_t v61 = (uint8x8_t)vcnt_s8(prime);
            v61.i16[0] = vaddlv_u8(v61);
            if (v61.u32[0] > 1uLL)
            {
              if (v60 >= *(void *)&prime) {
                v60 %= *(void *)&prime;
              }
            }
            else
            {
              v60 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797D5F8 + 8 * v6sub_216195B94(&qword_26797EF28, 0) = &qword_26797D608;
            for (j = *v59; j; unint64_t v60 = v66)
            {
              unint64_t v66 = j[1];
              if (v61.u32[0] > 1uLL)
              {
                if (v66 >= *(void *)&prime) {
                  v66 %= *(void *)&prime;
                }
              }
              else
              {
                v66 &= *(void *)&prime - 1;
              }
              if (v66 != v60)
              {
                if (!*(void *)(xmmword_26797D5F8 + 8 * v66))
                {
                  *(void *)(xmmword_26797D5F8 + 8 * v66) = v59;
                  goto LABEL_113;
                }
                *uint64_t v59 = (void *)*j;
                *unint64_t j = **(void **)(xmmword_26797D5F8 + 8 * v66);
                **(void **)(xmmword_26797D5F8 + 8 * v66) = j;
                unint64_t j = v59;
              }
              unint64_t v66 = v60;
LABEL_113:
              uint64_t v59 = (void **)j;
              unint64_t j = (void *)*j;
            }
          }
          unint64_t v43 = (unint64_t)prime;
          goto LABEL_117;
        }
        unint64_t v103 = (void *)xmmword_26797D5F8;
        *(void *)&xmmword_26797D5F8 = 0;
        if (v103) {
          operator delete(v103);
        }
        unint64_t v43 = 0;
        *((void *)&xmmword_26797D5F8 + 1) = 0;
      }
    }
LABEL_117:
    if ((v43 & (v43 - 1)) != 0)
    {
      if (v42 >= v43) {
        uint64_t v3 = v42 % v43;
      }
      else {
        uint64_t v3 = v42;
      }
    }
    else
    {
      uint64_t v3 = (v43 - 1) & v42;
    }
    goto LABEL_122;
  }
}

void sub_2161D6A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161D6AC4(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 176);
  unint64_t v11 = (void *)(v10 + 248);
  uint64_t v12 = sub_2161F3B4C(*(void **)(v10 + 112), a2, a3);
  return sub_21625B174(*(uint64_t **)(a1 + 696), (uint64_t)a2, *(char **)a3, *(void *)(a3 + 8), v11, (uint64_t)v12, a4, *(unsigned char *)(a1 + 8), a5, *(void *)(a1 + 256));
}

void sub_2161D6B44(uint64_t a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (uint64_t)a2;
  v100[3] = *MEMORY[0x263EF8340];
  signed int v86 = 0x80000000;
  signed int v87 = 0x80000000;
  if ((*(_DWORD *)(a1 + 184) & 0x20) != 0) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = a5;
  }
  uint64_t v10 = sub_2161F3B4C(*(void **)(*(void *)(a1 + 176) + 112), a2, (uint64_t)a3);
  unint64_t v11 = (uint64_t *)sub_21628DE00(*(const UniChar **)v9, *(void *)(v9 + 8), (uint64_t)v10);
  unint64_t v12 = *(void *)(v9 + 8);
  if (!v12) {
    goto LABEL_90;
  }
  uint64_t v13 = 0;
  BOOL v14 = 1;
  do
  {
    int v15 = *(unsigned __int16 *)(*(void *)v9 + 2 * v13);
    if (v15 == 32) {
      break;
    }
    if (v15 == 12288) {
      break;
    }
    BOOL v14 = ++v13 < v12;
  }
  while (v12 != v13);
  if (!v14)
  {
LABEL_90:
    unint64_t v16 = *(void **)(a1 + 256);
    unint64_t v17 = v16[11];
    int v18 = *(_DWORD *)(a1 + 184);
    unint64_t v19 = 255;
    uint64_t v20 = 192;
    if ((v18 & 0x20) != 0) {
      uint64_t v20 = 255;
    }
    if (**(unsigned char **)(a1 + 1032)) {
      unint64_t v19 = v20;
    }
    if (v17 > v19
      || !**(unsigned char **)(a1 + 1032)
      && (v18 & 2) != 0
      && (v18 & 0x2000000) == 0
      && ((v23 = v16[15], uint64_t v22 = v16[16], v17 >= 2) ? (v24 = v23 == v22) : (v24 = 1), v24))
    {
      char v21 = 1;
    }
    else
    {
      sub_2161D6AC4(a1, (const char *)v7, v9, 0, (uint64_t)&v87);
      int v25 = *(_DWORD *)(a1 + 184);
      if ((v25 & 2) != 0)
      {
        sub_2161D6AC4(a1, (const char *)v7, v9, 1, (uint64_t)&v87);
        int v25 = *(_DWORD *)(a1 + 184);
      }
      if ((v25 & 1) == 0)
      {
        int v26 = sub_2162D1CE4(3u);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          sub_2161E30A8(*(void **)v9, *(void *)(v9 + 8), &__p);
          unint64_t v45 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          unsigned int v46 = *(_DWORD *)(a1 + 184);
          int v47 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 224))(*(void *)(a1 + 192));
          unsigned int v48 = sub_21628DD68(v46, v47);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = (v48 >> 2) & 1;
          _os_log_debug_impl(&dword_2160F5000, v26, OS_LOG_TYPE_DEBUG, "[MJ::makeMecabMultiWordCandidates] analysisString:%s (prefix:%d)", buf, 0x12u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::mutex::lock((std::mutex *)(a1 + 880));
        int v27 = *(_DWORD *)(a1 + 944);
        std::mutex::unlock((std::mutex *)(a1 + 880));
        if (v27 != 2)
        {
          *(void *)long long buf = &unk_26C6BE968;
          *(_OWORD *)&uint8_t buf[8] = 0u;
          long long v91 = 0u;
          int v92 = 1065353216;
          memset(v93, 0, 24);
          uint64_t v28 = (void *)(*(void *)(a1 + 176) + 248);
          __p.__r_.__value_.__s.__data_[0] = 0;
          BOOL v29 = sub_21628E128(v28, (BOOL *)&__p);
          if (__p.__r_.__value_.__s.__data_[0]) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v29;
          }
          if (sub_21625C43C(*(uint64_t **)(a1 + 696), v7, (uint64_t)buf, *(void *)v9, *(void *)(v9 + 8), v11, v30, *(unsigned char *)(a1 + 8) != 0))
          {
            if ((*(unsigned char *)(a1 + 187) & 4) != 0)
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C6C7308;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)sub_216216D1C;
              p_p = &__p;
              sub_216215A00((void *)v7, (uint64_t)&__p);
              sub_216199290(&__p);
              if ((*(unsigned char *)(a1 + 187) & 2) != 0)
              {
                unsigned __int16 v31 = *(const void ***)(v7 + 48);
                if (*(const void ***)(v7 + 56) != v31)
                {
                  if (*v31)
                  {
                    unint64_t v32 = __dynamic_cast(*v31, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0);
                    if (v32)
                    {
                      uint64_t v33 = (uint64_t)v32;
                      unint64_t v34 = sub_2162D1CE4(3u);
                      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                      {
                        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
                        _os_log_debug_impl(&dword_2160F5000, v34, OS_LOG_TYPE_DEBUG, "[MJ::makeLastBunsetsuCandidatesFromCurrentLattice]", (uint8_t *)&__p, 2u);
                      }
                      uint64_t v35 = sub_216231F88(v33);
                      uint64_t v84 = v7;
                      uint64_t v36 = 0;
                      if (v35)
                      {
                        for (uint64_t i = 0; i != v35; ++i)
                          v36 += (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v33 + 312))(v33, i);
                      }
                      uint64_t v38 = *(void *)(v9 + 8) - v36;
                      if (!*(void *)v9) {
                        uint64_t v38 = 0;
                      }
                      uint64_t v81 = (const UniChar *)(*(void *)v9 + 2 * v36);
                      v89[0] = v81;
                      v89[1] = v38;
                      uint64_t v85 = v38;
                      unsigned int v88 = 0x80000000;
                      unsigned int v39 = *(_DWORD *)(a1 + 184);
                      int v40 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 224))(*(void *)(a1 + 192));
                      int v41 = sub_21628DD68(v39, v40);
                      if (sub_2163560D4(*(void *)(a1 + 192), *(void *)v9, *(void *)(v9 + 8), v11, 2 * v36, v41 | 4u))
                      {
                        if (v11) {
                          uint64_t v44 = v11[2];
                        }
                        else {
                          uint64_t v44 = 0;
                        }
                        if (2 * v36) {
                          uint64_t v44 = 1;
                        }
                        uint64_t v82 = v44;
                        unint64_t v42 = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 192) + 240))(*(void *)(a1 + 192));
                        if (v42) {
                          sub_216259928(*(uint64_t **)(a1 + 696), (uint64_t)v42, (uint64_t)v81, v85, v82, *(unsigned char *)(a1 + 8), 0);
                        }
                      }
                      unint64_t v49 = sub_2161F3B4C(*(void **)(*(void *)(a1 + 176) + 112), v42, v43);
                      uint64_t v7 = v84;
                      unint64_t v50 = (uint64_t *)sub_21628DE00(v81, v85, (uint64_t)v49);
                      float v51 = (void **)v50;
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
                      if (v50) {
                        uint64_t v83 = v50[2];
                      }
                      else {
                        uint64_t v83 = 0;
                      }
                      *(unsigned char *)(a1 + ++**(_DWORD **)(result + 8) = 1;
                      if (sub_2163560D4(*(void *)(a1 + 192), (uint64_t)v81, v85, v50, 0, 10))
                      {
                        uint64_t v52 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 240))(*(void *)(a1 + 192));
                        if (v52)
                        {
                          ++v88;
                          sub_216259928(*(uint64_t **)(a1 + 696), v52, (uint64_t)v81, v85, v83, *(unsigned char *)(a1 + 8), 1);
                        }
                      }
                      *(unsigned char *)(a1 + ++**(_DWORD **)(result + 8) = 0;
                      if (v51)
                      {
                        free(*v51);
                        MEMORY[0x2166CA800](v51, 0x1010C40B1660244);
                      }
                      uint64_t v53 = *(void *)(a1 + 176);
                      unint64_t v54 = *(const void **)(v53 + 256);
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(unint64_t *)(v53 + 248);
                      __p.__r_.__value_.__r.__words[2] = 0;
                      p_p = 0;
                      sub_21618B3D8(&__p.__r_.__value_.__l.__size_, v54, *(void *)(v53 + 264), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v53 + 264) - (void)v54) >> 3));
                      memset(v97, 0, sizeof(v97));
                      sub_216182F50(v97, *(const void **)(v53 + 280), *(void *)(v53 + 288), (uint64_t)(*(void *)(v53 + 288) - *(void *)(v53 + 280)) >> 1);
                      memset(v98, 0, sizeof(v98));
                      sub_216182F50(v98, *(const void **)(v53 + 304), *(void *)(v53 + 312), (uint64_t)(*(void *)(v53 + 312) - *(void *)(v53 + 304)) >> 1);
                      memset(v99, 0, sizeof(v99));
                      sub_216198430(v99, *(const void **)(v53 + 328), *(void *)(v53 + 336), (uint64_t)(*(void *)(v53 + 336) - *(void *)(v53 + 328)) >> 3);
                      memset(v100, 0, 24);
                      sub_216198430(v100, *(const void **)(v53 + 352), *(void *)(v53 + 360), (uint64_t)(*(void *)(v53 + 360) - *(void *)(v53 + 352)) >> 3);
                      uint64_t v55 = sub_216246A18(a1 + 1200, v33);
                      uint64_t v56 = sub_2162A3CB8(*(void *)(a1 + 176), v55);
                      uint64_t v57 = v56;
                      if (v56)
                      {
                        (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v56 + 528))(v56, 8, "Previous candidate", 1);
                        sub_2162EFB10((uint64_t)&__p, v57);
                      }
                      (*(void (**)(void, void *, std::string *))(**(void **)(a1 + 3832) + 16))(*(void *)(a1 + 3832), a3, &__p);
                      v94[0] = &unk_26C6C7308;
                      v94[1] = sub_2162171D4;
                      v94[3] = v94;
                      sub_216215A00(a3, (uint64_t)v94);
                      sub_216199290(v94);
                      sub_216283050(a1, (uint64_t)a3);
                      sub_2161D213C(a1, (uint64_t)a3, (uint64_t)v89, &__p);
                      sub_216216A20((uint64_t)a3, 8u, (uint64_t)"Last-bunsetsu", 0, 1u);
                      if (v57) {
                        (*(void (**)(uint64_t))(*(void *)v57 + 16))(v57);
                      }
                      if (v55) {
                        (*(void (**)(uint64_t))(*(void *)v55 + 16))(v55);
                      }
                      sub_2161DEA90(&__p);
                    }
                  }
                }
              }
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C6C7308;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)sub_216216D1C;
            p_p = &__p;
            sub_216215A00(buf, (uint64_t)&__p);
            sub_216199290(&__p);
            sub_21625CD20(*(void *)(a1 + 696), (void *)v7, (uint64_t)buf, &v86);
          }
          *(void *)long long buf = &unk_26C6BE968;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
          sub_21618B5DC((void ***)&__p);
          sub_216144C28((uint64_t)&buf[8]);
        }
      }
      char v21 = 0;
    }
    uint64_t v59 = *(UniChar **)a5;
    unint64_t v58 = *(void *)(a5 + 8);
    if (!v58) {
      goto LABEL_86;
    }
    BOOL v60 = 0;
    for (j = 0; j != v58; BOOL v60 = j >= v58)
    {
      UniChar v62 = v59[j];
      BOOL v65 = (unsigned __int16)((v62 & 0xFFDF) - 65) >= 0x1Au;
      unsigned int v63 = (unsigned __int16)(v62 + 191);
      unsigned __int16 v64 = v62 + 223;
      BOOL v65 = v65 && v63 >= 0x1A;
      if (v65 && v64 > 0x19u) {
        break;
      }
      ++j;
    }
    if (v60)
    {
LABEL_86:
      uint64_t v67 = *(void *)(a1 + 3880);
      unint64_t v68 = (void *)(*(void *)(a1 + 176) + 248);
      __p.__r_.__value_.__s.__data_[0] = 0;
      BOOL v69 = sub_21628E128(v68, (BOOL *)&__p);
      if (__p.__r_.__value_.__s.__data_[0]) {
        char v70 = 0;
      }
      else {
        char v70 = v69;
      }
      sub_2161B4B90(v67, v7, v59, v58, v70);
    }
    if ((v21 & 1) == 0)
    {
      int v71 = *(_DWORD *)(a1 + 184);
      if (**(unsigned char **)(a1 + 1032)) {
        BOOL v72 = 1;
      }
      else {
        BOOL v72 = (*(_DWORD *)(a1 + 184) & 2) == 0;
      }
      if (v72)
      {
        if ((v71 & 4) != 0) {
          goto LABEL_114;
        }
      }
      else if ((v71 & 0x2000004) != 0x2000000)
      {
        goto LABEL_114;
      }
      signed int v73 = v87;
      if (v87 <= v86) {
        signed int v73 = v86;
      }
      *(_DWORD *)long long buf = v73;
      uint64_t v74 = sub_2162D1CE4(3u);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_debug_impl(&dword_2160F5000, v74, OS_LOG_TYPE_DEBUG, "[MJ::makeMecabPartialCandidate]", (uint8_t *)&__p, 2u);
      }
      std::mutex::lock((std::mutex *)(a1 + 880));
      int v75 = *(_DWORD *)(a1 + 944);
      std::mutex::unlock((std::mutex *)(a1 + 880));
      if (v75 != 2)
      {
        unsigned int v76 = *(_DWORD *)(a1 + 184);
        if ((v76 & 0x20) != 0) {
          int v77 = 74;
        }
        else {
          int v77 = 10;
        }
        unint64_t v78 = (void *)(*(void *)(a1 + 176) + 248);
        __p.__r_.__value_.__s.__data_[0] = 0;
        sub_21628E128(v78, (BOOL *)&__p);
        if (v11) {
          uint64_t v79 = v11[2];
        }
        else {
          uint64_t v79 = 0;
        }
        *(unsigned char *)(a1 + ++**(_DWORD **)(result + 8) = 1;
        if (sub_2163560D4(*(void *)(a1 + 192), *(void *)v9, *(void *)(v9 + 8), v11, 0, v77 | (v76 >> 6) & 0x40000))
        {
          uint64_t v80 = (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 240))(*(void *)(a1 + 192));
          if (v80)
          {
            ++*(_DWORD *)buf;
            sub_216259928(*(uint64_t **)(a1 + 696), v80, *(void *)v9, *(void *)(v9 + 8), v79, *(unsigned char *)(a1 + 8), 1);
          }
        }
        *(unsigned char *)(a1 + ++**(_DWORD **)(result + 8) = 0;
      }
    }
  }
LABEL_114:
  if (v11)
  {
    free((void *)*v11);
    MEMORY[0x2166CA800](v11, 0x1010C40B1660244);
  }
}

void sub_2161D7814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  sub_216199290(&a31);
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
  }
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
  }
  sub_2161DEA90(&a35);
  sub_21618A144((uint64_t)&a21);
  sub_2161DFF98(&a16, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2161D7A24(uint64_t a1)
{
  v30[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 1168);
  if (v2)
  {
    sub_2161DF02C((void *)(v2 + 128));
    sub_2161DF0D4(v2 + 152);
  }
  uint64_t v3 = *(void *)(a1 + 1176);
  if (v3)
  {
    sub_2161DF02C((void *)(v3 + 128));
    sub_2161DF0D4(v3 + 152);
  }
  uint64_t v4 = *(void *)(a1 + 1048);
  if (v4)
  {
    sub_2161DF178((uint64_t *)(v4 + 8));
    if (*(void *)(v4 + 56))
    {
      sub_2161DF12C(v4 + 32, *(void ***)(v4 + 48));
      *(void *)(v4 + 4++**(_DWORD **)(result + 8) = 0;
      uint64_t v5 = *(void *)(v4 + 40);
      if (v5)
      {
        for (uint64_t i = 0; i != v5; ++i)
          *(void *)(*(void *)(v4 + 32) + 8 * i) = 0;
      }
      *(void *)(v4 + 56) = 0;
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 1072) + 24))(*(void *)(a1 + 1072));
  sub_21613025C(v28);
  memset(&v27, 0, sizeof(v27));
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v24 = 0;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v16 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  unint64_t v8 = sub_2161575FC(v28, (uint64_t)&v27, 0xAu);
  if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) == 0)
  {
    uint64_t v9 = MEMORY[0x263F8C338] + 64;
    uint64_t v20 = MEMORY[0x263F8C338] + 64;
    v18[0] = v16;
    *(void *)((char *)v18 + *(void *)(v16 - 24)) = v7;
    v18[1] = 0;
    uint64_t v10 = (std::ios_base *)((char *)v18 + *(void *)(v18[0] - 24));
    std::ios_base::init(v10, v19);
    uint64_t v11 = MEMORY[0x263F8C338] + 24;
    v10[1].__vftable = 0;
    v10[1].__fmtflags_ = -1;
    v18[0] = v11;
    uint64_t v20 = v9;
    sub_2161E066C((uint64_t)v19, &v27, 8);
    sub_2161575FC(v18, (uint64_t)v23, 9u);
    sub_2161575FC(v18, (uint64_t)v21, 9u);
    sub_2161575FC(v18, (uint64_t)v25, 9u);
    if (v26 >= 0) {
      unint64_t v12 = (char *)v25;
    }
    else {
      unint64_t v12 = (char *)v25[0];
    }
    sub_21610B834(&__str, v12);
    std::stoi(&__str, 0, 16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_2161575FC(v18, (uint64_t)v25, 9u);
    if (v26 >= 0) {
      uint64_t v13 = (char *)v25;
    }
    else {
      uint64_t v13 = (char *)v25[0];
    }
    sub_21610B834(&__str, v13);
    std::stoi(&__str, 0, 16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v24 >= 0) {
      BOOL v14 = (char *)v23;
    }
    else {
      BOOL v14 = (char *)v23[0];
    }
    sub_2161E1EDC(v14);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  v28[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166CA430](&v29);
  std::istream::~istream();
  return MEMORY[0x2166CA750](v30);
}

void sub_2161D80BC(_Unwind_Exception *a1)
{
}

void sub_2161D8200(uint64_t a1, void *a2)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 864);
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  v103[0] = 0;
  uint64_t v3 = (char **)a2[6];
  uint64_t v85 = a2 + 6;
  uint64_t v99 = v2;
  uint64_t v100 = (char **)a2[7];
  if (v3 == v100) {
    goto LABEL_119;
  }
  uint64_t v93 = v2 + 64;
  uint64_t v82 = a1 + 1200;
  do
  {
    if ((*(unsigned int (**)(char *))(*(void *)*v3 + 408))(*v3)) {
      goto LABEL_42;
    }
    uint64_t v4 = *v3;
    int v5 = *(char *)(v99 + 87);
    CFStringRef v6 = v5 >= 0 ? (const void *)v93 : *(const void **)(v99 + 64);
    unint64_t v7 = v5 >= 0 ? *(unsigned __int8 *)(v99 + 87) : *(void *)(v99 + 72);
    unint64_t v8 = (const void *)(*(uint64_t (**)(void))(*(void *)v99 + 552))();
    unint64_t v10 = v9;
    __s2 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v99 + 544))(v99);
    if (!v4) {
      goto LABEL_42;
    }
    unint64_t v12 = v11;
    BOOL v13 = !v7 || v11 == 0;
    if (v13 || v10 == 0) {
      goto LABEL_42;
    }
    int v15 = v4[87];
    uint64_t v16 = v4 + 64;
    if (v15 < 0) {
      uint64_t v16 = (char *)*((void *)v4 + 8);
    }
    __s1 = v16;
    unint64_t v17 = v15 >= 0 ? v4[87] : *((void *)v4 + 9);
    unint64_t v94 = (void *)(*(uint64_t (**)(char *))(*(void *)v4 + 552))(v4);
    unint64_t v19 = v18;
    int v89 = (void *)(*(uint64_t (**)(char *))(*(void *)v4 + 544))(v4);
    uint64_t v88 = v17 - v7;
    if (v17 < v7 || __s1 == 0) {
      goto LABEL_42;
    }
    unint64_t v22 = v20;
    BOOL v23 = !memcmp(__s1, v6, 2 * v7) && v19 >= v10;
    if (!v23 || v94 == 0) {
      goto LABEL_42;
    }
    BOOL v25 = !memcmp(v94, v8, 2 * v10) && v22 >= v12;
    BOOL v26 = !v25 || v89 == 0;
    if (v26 || memcmp(v89, __s2, 2 * v12)) {
      goto LABEL_42;
    }
    uint64_t v83 = (void *)(*(uint64_t (**)(char *))(*(void *)v4 + 304))(v4);
    uint64_t v27 = (*(uint64_t (**)(char *))(*(void *)v4 + 48))(v4);
    *(void *)long long buf = v82;
    memset(&buf[8], 0, 64);
    long long v106 = 0u;
    uint64_t v87 = v27;
    if (!v27)
    {
LABEL_82:
      v103[1] = &__s1[2 * v7];
      v103[2] = v88;
      (*(void (**)(char *))(*(void *)v4 + 112))(v4);
      (*(void (**)(char *))(*(void *)v4 + 376))(v4);
      (*(void (**)(char *))(*(void *)v4 + 96))(v4);
      (*(void (**)(char *))(*(void *)v4 + 408))(v4);
      uint64_t v56 = sub_2161DECC4(buf);
      goto LABEL_83;
    }
    unsigned __int16 v96 = 0;
    unsigned __int16 v97 = 0;
    unsigned __int16 v28 = 0;
    uint64_t v29 = 0;
    while (1)
    {
      unsigned int v92 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v4 + 312))(v4, v29);
      unsigned int v98 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v4 + 320))(v4, v29);
      unsigned int v91 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v4 + 568))(v4, v29);
      if (v7 <= v28 || v12 <= v97 || v10 <= v96)
      {
        uint64_t v39 = *v83 + 40 * v29;
        sub_2161BF794((_WORD *)v89 + v97, (_WORD *)v89 + v97 + *(unsigned __int16 *)(v39 + 24), (uint64_t)&buf[8]);
        sub_2161BF794((_WORD *)v94 + v96, (_WORD *)v94 + v96 + v98, (uint64_t)&buf[32]);
        int v40 = *(_OWORD **)&buf[64];
        if (*(void *)&buf[64] >= (unint64_t)v106)
        {
          unint64_t v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&buf[64] - *(void *)&buf[56]) >> 3);
          unint64_t v45 = v44 + 1;
          if (v44 + 1 > 0x666666666666666) {
            sub_21618B344();
          }
          if (0x999999999999999ALL * ((uint64_t)(v106 - *(void *)&buf[56]) >> 3) > v45) {
            unint64_t v45 = 0x999999999999999ALL * ((uint64_t)(v106 - *(void *)&buf[56]) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v106 - *(void *)&buf[56]) >> 3) >= 0x333333333333333) {
            unint64_t v46 = 0x666666666666666;
          }
          else {
            unint64_t v46 = v45;
          }
          if (v46) {
            uint64_t v47 = (char *)sub_21618B4A8((uint64_t)&v106, v46);
          }
          else {
            uint64_t v47 = 0;
          }
          unsigned int v48 = &v47[40 * v44];
          long long v49 = *(_OWORD *)v39;
          long long v50 = *(_OWORD *)(v39 + 16);
          *((void *)v48 + 4) = *(void *)(v39 + 32);
          *(_OWORD *)unsigned int v48 = v49;
          *((_OWORD *)v48 + 1) = v50;
          uint64_t v52 = *(char **)&buf[56];
          float v51 = *(char **)&buf[64];
          uint64_t v53 = v48;
          if (*(void *)&buf[64] != *(void *)&buf[56])
          {
            do
            {
              long long v54 = *(_OWORD *)(v51 - 40);
              long long v55 = *(_OWORD *)(v51 - 24);
              *((void *)v53 - 1) = *((void *)v51 - 1);
              *(_OWORD *)(v53 - 24) = v55;
              *(_OWORD *)(v53 - 4sub_216195B94(&qword_26797EF28, 0) = v54;
              v53 -= 40;
              v51 -= 40;
            }
            while (v51 != v52);
            float v51 = *(char **)&buf[56];
          }
          uint64_t v43 = v48 + 40;
          *(void *)&buf[56] = v53;
          *(void *)&buf[64] = v48 + 40;
          *(void *)&long long v106 = &v47[40 * v46];
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          long long v41 = *(_OWORD *)v39;
          long long v42 = *(_OWORD *)(v39 + 16);
          *(void *)(*(void *)&buf[64] + 32) = *(void *)(v39 + 32);
          *int v40 = v41;
          v40[1] = v42;
          uint64_t v43 = (char *)v40 + 40;
        }
        *(void *)&buf[64] = v43;
        *((_WORD *)v43 - 6) = v98;
        goto LABEL_81;
      }
      uint64_t v30 = v98;
      if (!v29 && v10 < v98)
      {
        unsigned __int16 v31 = (const void *)(*(uint64_t (**)(char *))(*(void *)v4 + 544))(v4);
        uint64_t v32 = (*(unsigned int (**)(char *, void))(*(void *)v4 + 568))(v4, 0);
        if (!v31) {
          uint64_t v32 = 0;
        }
        uint64_t v30 = v98;
        if (v32 == v12)
        {
          int v33 = memcmp(v31, __s2, 2 * v12);
          uint64_t v30 = v98;
          if (!v33) {
            break;
          }
        }
      }
      unint64_t v34 = v97 + (unint64_t)v91;
      BOOL v35 = v28 + (unint64_t)v92 > v7 && v34 > v12;
      unint64_t v36 = v30 + v96;
      if (v35 && v36 > v10)
      {
        __int16 v84 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v4 + 344))(v4, v29);
        __int16 v38 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v4 + 352))(v4, v29);
        sub_2161DEB04(buf, (_WORD *)v89 + v12, v34 - v12, v28 + v92 - v7, (_WORD *)v94 + v10, v36 - v10, v84, v38);
      }
LABEL_81:
      v28 += v92;
      v96 += v98;
      v97 += v91;
      if (++v29 == v87) {
        goto LABEL_82;
      }
    }
    uint64_t v56 = 0;
LABEL_83:
    if (*((void *)&v106 + 1)) {
      CFRelease(*((CFTypeRef *)&v106 + 1));
    }
    *((void *)&v106 + 1) = 0;
    if (*(void *)&buf[56])
    {
      *(void *)&buf[64] = *(void *)&buf[56];
      operator delete(*(void **)&buf[56]);
    }
    if (*(void *)&buf[32])
    {
      *(void *)&unsigned char buf[40] = *(void *)&buf[32];
      operator delete(*(void **)&buf[32]);
    }
    if (*(void *)&buf[8])
    {
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }
    if (v56)
    {
      (*(void (**)(uint64_t))(*(void *)v56 + 544))(v56);
      if (v57)
      {
        int v58 = *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 544))(v56);
        if (((v58 - 12353) < 0x56 || v58 == 12540 || v58 == 12316)
          && (int v59 = *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 544))(v56),
              v59 != *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 552))(v56)))
        {
          UniChar v62 = sub_2162D1CE4(4u);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 24))(v56);
            uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 56))(v56);
            uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 232))(v56);
            *(_DWORD *)long long buf = 138412802;
            *(void *)&uint8_t buf[4] = v63;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v64;
            *(_WORD *)&buf[22] = 2112;
            *(void *)&unsigned char buf[24] = v65;
            _os_log_debug_impl(&dword_2160F5000, v62, OS_LOG_TYPE_DEBUG, "[ME:removeTruncatedContextFromCandidates] Remove an invalid candidate %@ (%@/%@)", buf, 0x20u);
          }
        }
        else
        {
          BOOL v60 = sub_2162D1CE4(4u);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v73 = (*(uint64_t (**)(void))(*(void *)*v3 + 24))();
            uint64_t v74 = (*(uint64_t (**)(void))(*(void *)*v3 + 56))();
            uint64_t v75 = (*(uint64_t (**)(void))(*(void *)*v3 + 232))();
            uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 24))(v56);
            uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 56))(v56);
            uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 232))(v56);
            *(_DWORD *)long long buf = 138413570;
            *(void *)&uint8_t buf[4] = v73;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v74;
            *(_WORD *)&buf[22] = 2112;
            *(void *)&unsigned char buf[24] = v75;
            *(_WORD *)&buf[32] = 2112;
            *(void *)&buf[34] = v76;
            *(_WORD *)&buf[42] = 2112;
            *(void *)&buf[44] = v77;
            *(_WORD *)&buf[52] = 2112;
            *(void *)&buf[54] = v78;
            _os_log_debug_impl(&dword_2160F5000, v60, OS_LOG_TYPE_DEBUG, "[ME:removeTruncatedContextFromCandidates] Converting %@ (%@/%@) to %@ (%@/%@)", buf, 0x3Eu);
          }
          if ((unint64_t)v102 >= v103[0])
          {
            uint64_t v66 = v102 - v101;
            if ((unint64_t)(v66 + 1) >> 61) {
              sub_21610CB04();
            }
            unint64_t v67 = (uint64_t)(v103[0] - (void)v101) >> 2;
            if (v67 <= v66 + 1) {
              unint64_t v67 = v66 + 1;
            }
            if (v103[0] - (void)v101 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v67;
            }
            if (v68) {
              BOOL v69 = (char *)sub_2160FFAA8((uint64_t)v103, v68);
            }
            else {
              BOOL v69 = 0;
            }
            char v70 = (uint64_t *)&v69[8 * v66];
            uint64_t *v70 = v56;
            uint8x8_t v61 = v70 + 1;
            int v71 = v102;
            if (v102 != v101)
            {
              do
              {
                uint64_t v72 = *--v71;
                *--char v70 = v72;
              }
              while (v71 != v101);
              int v71 = v101;
            }
            unint64_t v101 = v70;
            v103[0] = &v69[8 * v68];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            uint64_t *v102 = v56;
            uint8x8_t v61 = v102 + 1;
          }
          unint64_t v102 = v61;
        }
      }
    }
LABEL_42:
    ++v3;
  }
  while (v3 != v100);
LABEL_119:
  sub_2161DEDD0(a2 + 1);
  sub_21618B630(v85);
  uint64_t v79 = v101;
  if (v101 != v102)
  {
    do
    {
      uint64_t v80 = *v79;
      v104[3] = v104;
      *(void *)long long buf = v80;
      v104[0] = &unk_26C6B5430;
      sub_216215760(a2, (void **)buf, 1, 0, (uint64_t)v104);
      sub_21618B96C(v104);
      uint64_t v81 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v81) {
        (*(void (**)(uint64_t))(*(void *)v81 + 16))(v81);
      }
      ++v79;
    }
    while (v79 != v102);
    uint64_t v79 = v101;
  }
  if (v79) {
    operator delete(v79);
  }
}

void sub_2161D8F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161D9018(uint64_t a1)
{
  sub_2161DFFF8(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *sub_2161D9054(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  __n128 result = sub_2161C554C((void *)(a1 + 64), &v4);
  if (result) {
    return *(void **)(a1 + 16);
  }
  return result;
}

void sub_2161D90A8(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  sub_2161E212C(*(const __CFString **)(a1 + 216), (UniChar **)&v46);
  sub_2163561F4(*(void *)(a1 + 192), &v44);
  long long v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  std::string __p = 0;
  uint64_t v39 = 0;
  int v40 = 0;
  if (v45 == v44) {
    unint64_t v2 = 1;
  }
  else {
    unint64_t v2 = ((char *)v45 - (char *)v44) >> 6;
  }
  sub_2161C1AC0(&__p, v2);
  uint64_t v3 = v44;
  unint64_t v4 = v45;
  if (v44 == v45)
  {
    unint64_t v12 = v39;
  }
  else
  {
    do
    {
      int v5 = *((char *)v3 + 23);
      if (v5 >= 0) {
        CFStringRef v6 = v3;
      }
      else {
        CFStringRef v6 = *v3;
      }
      if (v5 >= 0) {
        unint64_t v7 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        unint64_t v7 = (unint64_t)v3[1];
      }
      sub_216198220((uint64_t)&v41, v6, v7);
      unint64_t v8 = (long long *)(v3 + 3);
      unint64_t v9 = v39;
      if (v39 >= v40)
      {
        BOOL v13 = __p;
        unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - (unsigned char *)__p) >> 3);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0x666666666666666) {
          sub_21618B344();
        }
        if (0x999999999999999ALL * ((v40 - (unsigned char *)__p) >> 3) > v15) {
          unint64_t v15 = 0x999999999999999ALL * ((v40 - (unsigned char *)__p) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v40 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
          unint64_t v16 = 0x666666666666666;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          unint64_t v17 = (char *)sub_21618B4A8((uint64_t)&v40, v16);
          BOOL v13 = __p;
          unint64_t v9 = v39;
        }
        else
        {
          unint64_t v17 = 0;
        }
        unint64_t v18 = &v17[40 * v14];
        long long v19 = *v8;
        long long v20 = *(_OWORD *)(v3 + 5);
        *((void *)v18 + 4) = v3[7];
        *(_OWORD *)unint64_t v18 = v19;
        *((_OWORD *)v18 + 1) = v20;
        if (v9 == v13)
        {
          uint64_t v24 = &v17[40 * v14];
        }
        else
        {
          char v21 = &v17[40 * v14];
          do
          {
            long long v22 = *(_OWORD *)((char *)v9 - 40);
            long long v23 = *(_OWORD *)((char *)v9 - 24);
            uint64_t v24 = v21 - 40;
            *((void *)v21 - 1) = *((void *)v9 - 1);
            *(_OWORD *)(v21 - 24) = v23;
            *(_OWORD *)(v21 - 4sub_216195B94(&qword_26797EF28, 0) = v22;
            unint64_t v9 = (_OWORD *)((char *)v9 - 40);
            v21 -= 40;
          }
          while (v9 != v13);
        }
        unint64_t v12 = v18 + 40;
        std::string __p = v24;
        uint64_t v39 = v18 + 40;
        int v40 = &v17[40 * v16];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        long long v10 = *v8;
        long long v11 = *(_OWORD *)(v3 + 5);
        *((void *)v39 + 4) = v3[7];
        *unint64_t v9 = v10;
        v9[1] = v11;
        unint64_t v12 = (char *)v9 + 40;
      }
      uint64_t v39 = v12;
      v3 += 8;
    }
    while (v3 != v4);
  }
  if (__p == v12)
  {
    if (v12 >= v40)
    {
      unint64_t v26 = 0x999999999999999ALL * ((v40 - v12) >> 3);
      if (v26 <= 1) {
        unint64_t v26 = 1;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v40 - v12) >> 3) >= 0x333333333333333) {
        unint64_t v27 = 0x666666666666666;
      }
      else {
        unint64_t v27 = v26;
      }
      unsigned __int16 v28 = sub_21618B4A8((uint64_t)&v40, v27);
      uint64_t v29 = (char *)__p;
      uint64_t v30 = v39;
      uint64_t v32 = (char *)&v28[5 * v31];
      v28[4] = 0;
      *(_OWORD *)unsigned __int16 v28 = 0u;
      *((_OWORD *)v28 + 1) = 0u;
      BOOL v25 = (char *)(v28 + 5);
      if (v30 != v29)
      {
        int v33 = v28;
        do
        {
          long long v34 = *(_OWORD *)(v30 - 40);
          long long v35 = *(_OWORD *)(v30 - 24);
          unsigned __int16 v28 = v33 - 5;
          *(v33 - 1) = *((void *)v30 - 1);
          *(_OWORD *)(v33 - 3) = v35;
          *(_OWORD *)(v33 - 5) = v34;
          v30 -= 40;
          v33 -= 5;
        }
        while (v30 != v29);
      }
      std::string __p = v28;
      uint64_t v39 = v25;
      int v40 = v32;
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *((void *)v12 + 4) = 0;
      *(_OWORD *)unint64_t v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      BOOL v25 = v12 + 40;
    }
    uint64_t v39 = v25;
    *(_OWORD *)(v25 - 4sub_216195B94(&qword_26797EF28, 0) = 0u;
    *(_OWORD *)(v25 - 24) = 0u;
    *((void *)v25 - 1) = 0;
    unsigned int v36 = (v47 - v46) >> 1;
    *((_WORD *)v25 - ++**(_DWORD **)(result + 8) = v36;
    *((_WORD *)v25 - 7) = v36;
    __int16 v37 = HIBYTE(v43);
    if (v43 < 0) {
      __int16 v37 = v42;
    }
    *((_WORD *)v25 - 6) = v37;
  }
  operator new();
}

void sub_2161D9520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  a18 = &a24;
  sub_2161DEE90((void ***)&a18);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void sub_2161D95EC(uint64_t a1, uint64_t a2)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  unint64_t v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v65 = (*(_DWORD *)(a1 + 184) >> 1) & 1;
    uint64_t v66 = *(void *)(*(void *)(a1 + 176) + 104);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v65;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = v66;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MJ::predict] prediction:%d acceptedCandidate:%p", buf, 0x12u);
  }
  if (!*(unsigned char *)(a1 + 230))
  {
    sub_2161DEDD0((void *)(a2 + 8));
    sub_21618B630((void *)(a2 + 48));
    ptr = 0;
    unint64_t v7 = sub_2161F3B4C(*(void **)(*(void *)(a1 + 176) + 104), v5, v6);
    ptr = v7;
    if ((*(unsigned char *)(a1 + 184) & 2) != 0
      && v7
      && (*(uint64_t (**)(void *))(*v7 + 48))(v7)
      && (*(uint64_t (**)(void *))(*ptr + 24))(ptr))
    {
      unint64_t v8 = sub_2162D1CE4(0xDu);
      os_signpost_id_t spid = os_signpost_id_make_with_pointer(v8, &ptr);
      unint64_t v9 = sub_2162D1CE4(0xDu);
      if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        long long v10 = v9;
        if (os_signpost_enabled(v9))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl(&dword_2160F5000, v10, OS_SIGNPOST_INTERVAL_BEGIN, spid, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_2163CBB73, buf, 2u);
        }
      }
      sub_2162F0180(*(void *)(a1 + 176) + 248);
      long long v11 = sub_216268B64();
      sub_2161D6AC4(a1, (const char *)a2, (uint64_t)v11, 1, 0);
      memset(v108, 0, sizeof(v108));
      long long v106 = 0u;
      long long v107 = 0u;
      memset(buf, 0, sizeof(buf));
      uint64_t v109 = 1065353216;
      sub_2161D0F18(a1, (void *)a2, (uint64_t)buf);
      unint64_t v12 = *(unsigned char **)(a1 + 1032);
      if (*v12)
      {
        sub_2161D1CD8(a1, a2, ptr, (uint64_t)v11, (uint64_t)v11);
        unint64_t v12 = *(unsigned char **)(a1 + 1032);
      }
      if (v12[264])
      {
        std::mutex::lock((std::mutex *)(a1 + 880));
        int v13 = *(_DWORD *)(a1 + 944);
        std::mutex::unlock((std::mutex *)(a1 + 880));
        if (v13 != 2) {
          sub_21622E448(*(uint64_t **)(a1 + 3856), (void *)a2, v11, (uint64_t)v11);
        }
      }
      if (*(unsigned char *)(a1 + 228))
      {
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 3840) + 16))(__dst);
        unint64_t v14 = (void **)*((void *)&v112 + 1);
        for (uint64_t i = (void **)v112; i != v14; ++i)
        {
          v104[0] = &unk_26C6B5430;
          v104[3] = v104;
          sub_216215760((void *)a2, i, 1, 0, (uint64_t)v104);
          sub_21618B96C(v104);
        }
        *(void *)long long __dst = &unk_26C6BE968;
        p_isa = (void **)&v112;
        sub_21618B5DC(&p_isa);
        sub_216144C28((uint64_t)&__dst[8]);
      }
      sub_2161B4E5C(*(void *)(a1 + 3880), (void *)a2, (const UniChar *)*v11, v11[1], (void *)(*(void *)(a1 + 176) + 248));
      if (*(void *)(a1 + 1184)) {
        sub_216283050(a1, a2);
      }
      *(void *)long long __dst = &unk_26C6C7308;
      *(void *)&__dst[8] = sub_216216D1C;
      *((void *)&v111[0] + 1) = __dst;
      sub_216215A00((void *)a2, (uint64_t)__dst);
      sub_216199290(__dst);
      if (!sub_21621C474(a1 + 1208, (const __CFAllocator *)a2, (void *)(*(void *)(a1 + 176) + 248)))
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D588, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797D588))
        {
          v111[1] = xmmword_26426B910;
          long long v112 = unk_26426B920;
          v113[0] = xmmword_26426B930;
          *(_OWORD *)long long __dst = xmmword_26426B8F0;
          v111[0] = *(_OWORD *)&off_26426B900;
          sub_2161E010C((uint64_t)&qword_26797D620, __dst, 5);
          __cxa_atexit((void (*)(void *))sub_2161DA4F4, &qword_26797D620, &dword_2160F5000);
          __cxa_guard_release(&qword_26797D588);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D590, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797D590))
        {
          if (**(unsigned char **)(a1 + 1032)) {
            int v93 = 4;
          }
          else {
            int v93 = 1;
          }
          dword_26797D568 = v93;
          __cxa_guard_release(&qword_26797D590);
        }
        unsigned int v98 = *(void **)(a1 + 176);
        int64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v98[33] - v98[32]) >> 3);
        unint64_t v17 = 5;
        if (v16 > 5) {
          unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v98[33] - v98[32]) >> 3);
        }
        int64_t v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v98[33] - v98[32]) >> 3);
        int64_t v97 = v17 - 5;
        if (v16 > (uint64_t)(v17 - 5))
        {
          int v18 = 0;
          char v19 = 0;
          do
          {
            --v99;
            unint64_t v20 = *(void *)(v98[41] + 8 * v99);
            uint64_t v21 = v98[35];
            uint64_t v22 = v98[36] - v21;
            long long v23 = (unsigned __int16 *)(v21 + 2 * v20);
            if (v20 >= v22 >> 1) {
              long long v23 = 0;
            }
            UChar32 v24 = *v23;
            if (v24 != 9787)
            {
              if ((u_charType(v24) - 19) < 0xB)
              {
                if (v19) {
                  break;
                }
                char v19 = 0;
                continue;
              }
              unint64_t v20 = *(void *)(v98[41] + 8 * v99);
              uint64_t v21 = v98[35];
              uint64_t v22 = v98[36] - v21;
            }
            if (v20 >= v22 >> 1)
            {
              BOOL v25 = 0;
              uint64_t v26 = 0;
            }
            else
            {
              BOOL v25 = (uint64_t *)(v21 + 2 * v20);
              if (v21) {
                uint64_t v26 = *(unsigned __int16 *)(v98[32] + 40 * v99 + 24);
              }
              else {
                uint64_t v26 = 0;
              }
            }
            unint64_t v27 = sub_2161E03F4((uint64_t)&unk_26797D638, v25, v26);
            if (qword_26797D628)
            {
              uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)qword_26797D628);
              v28.i16[0] = vaddlv_u8(v28);
              if (v28.u32[0] > 1uLL)
              {
                unint64_t v29 = v27;
                if (v27 >= qword_26797D628) {
                  unint64_t v29 = v27 % qword_26797D628;
                }
              }
              else
              {
                unint64_t v29 = (qword_26797D628 - 1) & v27;
              }
              uint64_t v30 = *(void **)(qword_26797D620 + 8 * v29);
              if (v30)
              {
                for (unint64_t j = (void *)*v30; j; unint64_t j = (void *)*j)
                {
                  unint64_t v32 = j[1];
                  if (v32 == v27)
                  {
                    if (j[3] == v26)
                    {
                      if (!v26) {
                        goto LABEL_73;
                      }
                      int v33 = (unsigned __int16 *)j[2];
                      uint64_t v34 = v26;
                      long long v35 = v25;
                      while (*(unsigned __int16 *)v35 == *v33)
                      {
                        ++v33;
                        long long v35 = (uint64_t *)((char *)v35 + 2);
                        if (!--v34) {
                          goto LABEL_73;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v28.u32[0] > 1uLL)
                    {
                      if (v32 >= qword_26797D628) {
                        v32 %= (unint64_t)qword_26797D628;
                      }
                    }
                    else
                    {
                      v32 &= qword_26797D628 - 1;
                    }
                    if (v32 != v29) {
                      break;
                    }
                  }
                }
              }
            }
            CFStringRef v36 = CFStringCreateWithCharacters(0, (const UniChar *)v25, v26);
            p_isa = &v36->isa;
            __int16 v37 = sub_21625D0E0(1, 2, (uint64_t)v36, 0);
            unint64_t v101 = v37;
            if (v37)
            {
              for (CFIndex k = 0; k < CFArrayGetCount(v37); ++k)
              {
                CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v37, k);
                sub_2161E212C(ValueAtIndex, (UniChar **)__dst);
                int v40 = sub_216286F90(*(void *)(a1 + 3872), (void *)a2, *(uint64_t *)__dst, (uint64_t)(*(void *)&__dst[8] - *(void *)__dst) >> 1, (const UniChar *)v25, v26, dword_26797D568 + v18);
                if (*(void *)__dst)
                {
                  *(void *)&__dst[8] = *(void *)__dst;
                  operator delete(*(void **)__dst);
                }
                v18 += v40;
              }
              CFRelease(v37);
            }
            if (v36) {
              CFRelease(v36);
            }
            char v19 = 1;
          }
          while (v99 > v97);
        }
      }
LABEL_73:
      if (**(unsigned char **)(a1 + 1032))
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D598, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797D598))
        {
          sub_216184F68(__dst, (char *)L"、");
          sub_216184F68((unsigned char *)v111 + 8, (char *)L"。");
          sub_216184F68(&v112, (char *)L"！");
          sub_216184F68((unsigned char *)v113 + 8, (char *)L"？");
          sub_2161DA4F8((uint64_t)&qword_26797D5B0, (long long *)__dst, 4uLL);
          for (uint64_t m = 0; m != -96; m -= 24)
          {
            if (*((char *)&v113[1] + m + 15) < 0) {
              operator delete(*(void **)((char *)v113 + m + 8));
            }
          }
          __cxa_atexit((void (*)(void *))sub_2161DA598, &qword_26797D5B0, &dword_2160F5000);
          __cxa_guard_release(&qword_26797D598);
        }
        long long v41 = *(void **)(a1 + 176);
        if (!sub_21628E128(v41 + 31, 0) && v41[33] != v41[32])
        {
          uint64_t v42 = *(void *)(a1 + 1176);
          if (!v42 || !*(void *)(v42 + 8)) {
            goto LABEL_118;
          }
          uint64_t v43 = *(void **)(a1 + 176);
          uint64_t v44 = v43[32];
          unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v43[33] - v44) >> 3);
          uint64_t v46 = v45 - (*(void *)(v42 + 32) + *(unsigned __int16 *)(*(void *)(a1 + 1032) + 328));
          unint64_t v47 = v46 & ~(v46 >> 63);
          *(void *)&v111[0] = 0;
          memset(__dst, 0, sizeof(__dst));
          if (v47 < v45)
          {
            uint64_t v48 = 0;
            do
            {
              unint64_t v49 = *(void *)(v43[41] + 8 * v47);
              uint64_t v50 = v43[35];
              if (v49 >= (v43[36] - v50) >> 1
                || ((v51 = *(unsigned __int16 *)(v44 + 40 * v47 + 24), v50) ? (BOOL v52 = v51 == 0) : (BOOL v52 = 1), v52))
              {
                int v53 = 0;
              }
              else
              {
                int v53 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 192) + 32))(*(void *)(a1 + 192), v50 + 2 * v49, 2 * v51);
                uint64_t v48 = *(_DWORD **)&__dst[8];
              }
              if ((unint64_t)v48 >= *(void *)&v111[0])
              {
                long long v54 = *(_DWORD **)__dst;
                uint64_t v55 = ((uint64_t)v48 - *(void *)__dst) >> 2;
                unint64_t v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62) {
                  sub_21610CB04();
                }
                uint64_t v57 = *(void *)&v111[0] - *(void *)__dst;
                if ((uint64_t)(*(void *)&v111[0] - *(void *)__dst) >> 1 > v56) {
                  unint64_t v56 = v57 >> 1;
                }
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v56;
                }
                if (v58)
                {
                  int v59 = (char *)sub_2161129B4((uint64_t)v111, v58);
                  long long v54 = *(_DWORD **)__dst;
                  uint64_t v48 = *(_DWORD **)&__dst[8];
                }
                else
                {
                  int v59 = 0;
                }
                BOOL v60 = &v59[4 * v55];
                *(_DWORD *)BOOL v60 = v53;
                uint8x8_t v61 = v60 + 4;
                while (v48 != v54)
                {
                  int v62 = *--v48;
                  *((_DWORD *)v60 - 1) = v62;
                  v60 -= 4;
                }
                *(void *)long long __dst = v60;
                *(void *)&__dst[8] = v61;
                *(void *)&v111[0] = &v59[4 * v58];
                if (v54) {
                  operator delete(v54);
                }
                uint64_t v48 = v61;
              }
              else
              {
                *v48++ = v53;
              }
              *(void *)&__dst[8] = v48;
              ++v47;
              uint64_t v44 = v43[32];
            }
            while (v47 < 0xCCCCCCCCCCCCCCCDLL * ((v43[33] - v44) >> 3));
          }
          LMLanguageModelCreatePredictionEnumerator();
          int v63 = 0;
          double v64 = -7.0;
          while (v63 != 5 && (LMPredictionEnumeratorAdvance() & 1) != 0)
          {
            int v103 = 0;
            unint64_t v101 = 0;
            p_isa = 0;
            LMPredictionEnumeratorGetPrediction();
            ++v63;
            if (v103 == 2)
            {
              double v64 = *(double *)&p_isa;
              goto LABEL_112;
            }
          }
          int v63 = -1;
LABEL_112:
          LMPredictionEnumeratorRelease();
          if (*(void *)__dst)
          {
            *(void *)&__dst[8] = *(void *)__dst;
            operator delete(*(void **)__dst);
          }
          unsigned int v67 = v63 - 1;
          if (v63 >= 1)
          {
            int v68 = 0;
            if (v67 <= 1) {
              unsigned int v67 = 1;
            }
            int v69 = v67 + (int)(-1.0 - v64 + -1.0 - v64);
          }
          else
          {
LABEL_118:
            int v69 = -1;
            int v68 = 2;
          }
          uint64_t v70 = qword_26797D5B0;
          uint64_t v71 = unk_26797D5B8;
          while (v70 != v71)
          {
            if (*(char *)(v70 + 23) < 0)
            {
              uint64_t v72 = *(void *)v70;
              uint64_t v73 = *(void *)(v70 + 8);
            }
            else
            {
              uint64_t v72 = v70;
              uint64_t v73 = *(unsigned __int8 *)(v70 + 23);
            }
            if (v72) {
              uint64_t v74 = v73;
            }
            else {
              uint64_t v74 = 0;
            }
            if (v73 == 1 && (*(char *)(v70 + 23) >= 0 ? (uint64_t v75 = (_WORD *)v70) : (uint64_t v75 = *(_WORD **)v70), *v75 == 12289)) {
              uint64_t v76 = 587;
            }
            else {
              uint64_t v76 = 582;
            }
            unsigned __int16 v77 = word_21637826A[v76];
            uint64_t v78 = *(void *)(a1 + 3872);
            uint64_t v79 = sub_216268B64();
            LOBYTE(v95) = 0;
            HIWORD(v94) = v77;
            LOWORD(v94) = v77;
            sub_2162859A8(v78, (void *)a2, *v79, v79[1], v72, v74, v72, v74, v94, 0, v69, v95, 67, 2, v68);
            v70 += 24;
          }
        }
        if (**(unsigned char **)(a1 + 1032)) {
          sub_21619E8DC((uint64_t *)(a1 + 3920), (void *)a2, *(void *)(*(void *)(a1 + 176) + 280), (uint64_t)(*(void *)(*(void *)(a1 + 176) + 288) - *(void *)(*(void *)(a1 + 176) + 280)) >> 1);
        }
      }
      sub_2162160BC((void *)a2);
      sub_216216A20(a2, 0xCu, (uint64_t)"## Final ##", 0, 1u);
      uint64_t v80 = *(void *)(a2 + 48);
      uint64_t v81 = *(void *)(a2 + 56);
      uint64_t v82 = v81 - v80;
      if (v81 != v80)
      {
        uint64_t v83 = 0;
        unint64_t v84 = v82 >> 3;
        if (v84 <= 1) {
          unint64_t v84 = 1;
        }
        do
        {
          uint64_t v85 = *(void *)(v80 + 8 * v83++);
          *(void *)(v85 + ++**(_DWORD **)(result + 8) = v83;
        }
        while (v84 != v83);
        CFAllocatorRef v86 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        *(void *)long long __dst = Mutable;
        (*(void (**)(void, CFMutableDictionaryRef, void, void))(**(void **)(a1 + 3936) + 16))(*(void *)(a1 + 3936), Mutable, 0, 0);
        if ((*(_DWORD *)(a1 + 184) & 0x20) != 0) {
          uint64_t v88 = "ja-Romaji";
        }
        else {
          uint64_t v88 = "ja-Kana";
        }
        CFStringRef v89 = CFStringCreateWithCString(v86, v88, 0x8000100u);
        p_isa = &v89->isa;
        sub_216225F1C(*(void *)(a1 + 3928), (const char *)@"ja", (uint64_t)v89, (uint64_t)Mutable);
        if (v89) {
          CFRelease(v89);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      int v90 = sub_2162D1CE4(0xDu);
      if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        unsigned int v91 = v90;
        if (os_signpost_enabled(v90))
        {
          *(_WORD *)long long __dst = 0;
          _os_signpost_emit_with_name_impl(&dword_2160F5000, v91, OS_SIGNPOST_INTERVAL_END, spid, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_2163CBB73, __dst, 2u);
        }
      }
      sub_216144C28((uint64_t)v108);
    }
  }
}

void sub_2161DA36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_2161DA4F8(uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + ++**(_DWORD **)(result + 8) = 0;
  if (a3)
  {
    sub_216129BA8((void *)a1, a3);
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = sub_2161DEF34(v4, a2, (long long *)((char *)a2 + 24 * a3), *(char **)(a1 + 8));
  }
  return a1;
}

void sub_2161DA578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + ++**(_DWORD **)(result + 8) = v10;
  sub_21613EFD0(&a9);
  _Unwind_Resume(a1);
}

void **sub_2161DA598(void **a1)
{
  uint64_t v3 = a1;
  sub_21613EFD0(&v3);
  return a1;
}

void sub_2161DA5D0(uint64_t a1, void **a2, int a3, unsigned char *a4)
{
  uint64_t v4 = a2;
  v40[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *a2;
  if (*((char *)*a2 + 119) < 0)
  {
    unint64_t v8 = (char *)*((void *)v7 + 12);
    uint64_t v9 = *((unsigned __int16 *)v7 + 52);
  }
  else
  {
    unint64_t v8 = (char *)(v7 + 24);
    uint64_t v9 = *((unsigned __int8 *)*a2 + 119);
  }
  if (v8) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = *(const void ***)(a1 + 40);
  unint64_t v12 = (char *)v11[1];
  float v13 = 0.0;
  if (v12)
  {
    int v14 = 2 * v12;
    if (2 * (uint64_t)v12 > (unint64_t)(2 * v10)) {
      goto LABEL_29;
    }
    unint64_t v15 = (char *)*v11;
    int v16 = (*(_DWORD *)(v6 + 184) >> 6) & 8 | *(_DWORD *)(v6 + 184) & 0x20 | (*(_DWORD *)(v6 + 184) >> 4) & 0x10 | ((char)*(_DWORD *)(v6 + 184) >> 7) & 6;
    if (v16)
    {
      if (v14 >= 2)
      {
        uint64_t v17 = 0;
        uint64_t v18 = (v14 - 1);
        CFStringRef v36 = (char *)*v11;
        do
        {
          int v19 = *(unsigned __int16 *)&v8[v17];
          int v20 = *(unsigned __int16 *)&v15[v17];
          if (v19 != v20)
          {
            if (v17 == 2 * v12) {
              goto LABEL_29;
            }
            uint64_t v21 = v18;
            uint64_t v22 = sub_216334794(v20, v16);
            uint64_t v18 = v21;
            unint64_t v15 = v36;
            uint64_t v4 = a2;
            if (!v22) {
              goto LABEL_29;
            }
            long long v23 = *v22;
            uint64_t v24 = (char *)v22[1] - (char *)*v22;
            if (!v24) {
              goto LABEL_29;
            }
            unint64_t v25 = v24 >> 1;
            if (v25 <= 1) {
              unint64_t v25 = 1;
            }
            while (1)
            {
              int v26 = *(unsigned __int16 *)v23;
              long long v23 = (uint64_t *)((char *)v23 + 2);
              if (v19 == v26) {
                break;
              }
              if (!--v25) {
                goto LABEL_29;
              }
            }
            float v13 = v13 + -1.0;
          }
          v17 += 2;
        }
        while ((int)v18 > (int)v17);
      }
    }
    else if (memcmp(*v11, v8, 2 * (int)v12))
    {
      goto LABEL_29;
    }
  }
  unint64_t v27 = *(__int16 **)(v6 + 1032);
  if ((int)v10 - (int)v12 <= 0) {
    int v28 = 0;
  }
  else {
    int v28 = v27[240] + v27[240] * (v10 - v12);
  }
  int v29 = (int)(float)-(float)(v13 * (float)v27[222]);
  int v30 = v27[238];
  float v31 = (float)-v27[239];
  int v32 = *(_DWORD *)(a1 + 56);
  float v33 = log2f((float)(unsigned __int16)a3 / 100.0);
  (*(void (**)(_DWORD *, void))(*(void *)v7 + 480))(v7, (v28 - a3 + v30 + v32 + v29 + (int)(float)(v33 * v31)));
  v7[55] = (int)(float)((float)v28 + (float)((float)v29 * *(float *)(*(void *)(v6 + 1032) + 448)));
  (*(void (**)(void))(*(void *)*v4 + 528))();
  uint64_t v34 = *(void **)(a1 + 48);
  v40[0] = &unk_26C6B5430;
  v40[3] = v40;
  sub_216215760(v34, v4, 1, 0, (uint64_t)v40);
  sub_21618B96C(v40);
LABEL_29:
  std::mutex::lock((std::mutex *)(v6 + 880));
  int v35 = *(_DWORD *)(v6 + 944);
  std::mutex::unlock((std::mutex *)(v6 + 880));
  if (v35 == 2) {
    *a4 = 1;
  }
}

void sub_2161DA900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21618B96C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2161DA91C()
{
}

void sub_2161DA9A8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x70C4078CD869ELL);
  _Unwind_Resume(a1);
}

void sub_2161DA9CC()
{
}

void sub_2161DAA28(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1072C40A60B4CADLL);
  _Unwind_Resume(a1);
}

void sub_2161DAA4C(CFURLRef url@<X0>, CFStringRef pathComponent@<X1>, CFURLRef *a3@<X8>)
{
  CFURLRef v4 = CFURLCreateCopyAppendingPathComponent(0, url, pathComponent, 0);
  cf[0] = 0;
  cf[1] = v4;
  if (CFURLResourceIsReachable(v4, (CFErrorRef *)cf))
  {
    *a3 = v4;
  }
  else
  {
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    *a3 = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
}

void sub_2161DAAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161DAADC(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  if (a2 && theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F51278]);
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFBooleanGetTypeID() && Value == (const void *)*MEMORY[0x263EFFB40])
    {
      uint64_t v9 = *(void *)(a2 + 1168);
      if (v9) {
        sub_216365698(v9);
      }
      if (*(void *)(a2 + 1064))
      {
        sub_2161D7A24(a2);
      }
    }
  }
}

void sub_2161DAB80()
{
}

void sub_2161DABE8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C402A87D216);
  _Unwind_Resume(a1);
}

BOOL sub_2161DAC0C(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  return sub_2162A5824(*(void *)(a1 + 176), a2, a3, 0, 0);
}

BOOL sub_2161DAC1C(uint64_t a1, uint64_t a2, const __CFArray *a3, double a4)
{
  double v5 = a4;
  return sub_2162A5824(*(void *)(a1 + 176), a2, a3, 0, &v5);
}

void sub_2161DAC4C(uint64_t a1, uint64_t a2, CFStringRef theString, double a4)
{
  uint64_t v4 = *(void *)(a1 + 1048);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  void v5[2] = sub_2161DACCC;
  v5[3] = &unk_26426B960;
  void v5[4] = a1;
  void v5[5] = a2;
  *(double *)&v5[6] = a4;
  sub_2162923D0(v4, theString, (uint64_t)v5);
}

void sub_2161DACCC(void *a1, CFStringRef theString)
{
  if (theString)
  {
    uint64_t v4 = a1[4];
    CFIndex Length = CFStringGetLength(theString);
    if (Length < 1)
    {
LABEL_7:
      uint64_t v9 = sub_21629269C(*(void *)(v4 + 1048), theString);
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = a1[5];
        uint64_t v12 = a1[6];
        sub_2162A5824(*(void *)(v4 + 176), v11, v9, 0, (double *)&v12);
        CFRelease(v10);
      }
    }
    else
    {
      CFIndex v6 = Length;
      CFIndex v7 = 0;
      while (1)
      {
        UChar32 CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v7);
        if (!u_isgraph(CharacterAtIndex) || u_isdigit(CharacterAtIndex)) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_7;
        }
      }
    }
  }
}

uint64_t sub_2161DAD98(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    std::mutex::lock((std::mutex *)(result + 720));
    operator new();
  }
  return result;
}

void sub_2161DAED8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161DAEF0(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    std::mutex::lock((std::mutex *)(result + 720));
    operator new();
  }
  return result;
}

void sub_2161DB030(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161DB048(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    std::mutex::lock((std::mutex *)(result + 720));
    operator new();
  }
  return result;
}

void sub_2161DB158(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161DB170(uint64_t a1)
{
  if (*(void *)(a1 + 1168)) {
    LMLanguageModelFlushDynamicData();
  }
  unint64_t v2 = *(void **)(a1 + 176);
  if (v2) {
    unsigned int v3 = sub_2162A638C(v2);
  }
  else {
    unsigned int v3 = 1;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 192) + 112))(*(void *)(a1 + 192))) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_2161DB1EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 88))(v2);
  }
  LMLanguageModelResetDynamicData();
  sub_21628B218(**(uint64_t ***)(a1 + 3880));
  unsigned int v3 = *(uint64_t (**)(void))(**(void **)(a1 + 192) + 72);

  return v3();
}

void sub_2161DB288(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 192) + 232))(*(void *)(a1 + 192)) & 1) == 0
    && !*(unsigned char *)(a1 + 1193))
  {
    CFStringRef v2 = sub_2162D9D28("ja");
    if (v2)
    {
      CFURLRef v3 = (const __CFURL *)v2;
      sub_2161DB33C((int)v2, (CFURLRef)v2);
      sub_2161DB3C4(v4, v3);
      *(unsigned char *)(a1 + 1193) = 1;
      CFRelease(v3);
    }
  }
}

void sub_2161DB324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161DB33C(int a1, CFURLRef url)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
  {
    sub_21610B834(&__p, (char *)buffer);
    if (v3 < 0) {
      operator delete(__p);
    }
  }
}

void sub_2161DB3C4(uint64_t a1, const __CFURL *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CFURLRef v2 = CFURLCreateCopyAppendingPathComponent(0, a2, off_26797B560, 1u);
  char v3 = 0;
  uint64_t v4 = 0;
  url[1] = v2;
  v8[0] = off_26797B568;
  v8[1] = off_26797B578;
  do
  {
    char v5 = v3;
    sub_2161DAA4C(v2, (CFStringRef)v8[v4], url);
    CFURLRef v6 = url[0];
    if (url[0])
    {
      CFURLGetFileSystemRepresentation(url[0], 1u, buffer, 1024);
      CFRelease(v6);
    }
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while ((v5 & 1) == 0);
  if (v2) {
    CFRelease(v2);
  }
}

void sub_2161DB4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161DB4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 1)
  {
    uint64_t v4 = *(void *)(a1 + 176);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
  }
  uint64_t v5 = *(void *)(a1 + 3880);

  return sub_2161B5AFC(v5);
}

uint64_t sub_2161DB568(int a1, CFStringRef theString)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (theString && CFStringGetLength(theString)) {
    sub_2161E236C(theString);
  }
  return 0;
}

void sub_2161DBC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,const void *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_21618A144(v32 - 176);
  if (a19 < 0) {
    operator delete(__p);
  }
  *(void *)(v32 - 176) = &a20;
  sub_2161DEE90((void ***)(v32 - 176));
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  sub_2161B5B5C(&a26, 0);
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

CFMutableArrayRef sub_2161DBD74(uint64_t a1, const __CFString *a2)
{
  sub_2161E212C(a2, (UniChar **)v32);
  sub_2163561F4(*(void *)(a1 + 192), &v30);
  if (v30 == v31)
  {
    CFMutableArrayRef v24 = 0;
  }
  else
  {
    uint64_t v28 = 0;
    CFMutableArrayRef theArray = CFArrayCreateMutable(0, (v31 - v30) >> 6, MEMORY[0x263EFFF70]);
    std::string __p = 0;
    CFIndex v27 = 0;
    uint64_t v3 = v30;
    if (v31 != v30)
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unint64_t v7 = (v31 - v30) >> 6;
      uint64_t v8 = 118;
      do
      {
        uint64_t v9 = v3 + v8;
        if (v5 == v7 - 1 || (*(_DWORD *)(v9 - 94) != -1 ? (BOOL v10 = *(_DWORD *)(v9 - 30) == -1) : (BOOL v10 = 1), v10)) {
          int v11 = 1;
        }
        else {
          int v11 = sub_2161C06A8(*(void *)(a1 + 1040), *(unsigned __int16 *)(v9 - 62), *(unsigned __int16 *)(v3 + v8));
        }
        uint64_t v12 = *(unsigned __int16 *)(v9 - 68);
        int v13 = *(char *)(v9 - 95);
        if (v13 >= 0) {
          int v14 = (void *)(v9 - 118);
        }
        else {
          int v14 = *(void **)(v9 - 118);
        }
        if (v13 >= 0) {
          unint64_t v15 = *(unsigned __int8 *)(v9 - 95);
        }
        else {
          unint64_t v15 = *(void *)(v9 - 110);
        }
        sub_216198220((uint64_t)&__p, v14, v15);
        if (*(char *)(v9 - 95) < 0) {
          uint64_t v16 = *(void *)(v9 - 110);
        }
        else {
          uint64_t v16 = *(unsigned __int8 *)(v9 - 95);
        }
        v6 += v12;
        if (v16 && v4 != -1 && v6 && ((v11 ^ 1) & 1) == 0)
        {
          uint64_t v17 = v28 >= 0 ? (const UniChar *)&__p : (const UniChar *)__p;
          CFIndex v18 = v28 >= 0 ? HIBYTE(v28) : v27;
          CFStringRef v19 = CFStringCreateWithCharacters(0, v17, v18);
          if (v19)
          {
            int v20 = sub_21619C69C((uint64_t)v19, v4, v6);
            if (v20)
            {
              CFArrayAppendValue(theArray, v20);
              CFRelease(v20);
            }
            if (SHIBYTE(v28) < 0)
            {
              *(_WORD *)std::string __p = 0;
              CFIndex v27 = 0;
            }
            else
            {
              LOWORD(__p) = 0;
              HIBYTE(v2++**(_DWORD **)(result + 8) = 0;
            }
            v4 += v6;
            uint64_t v6 = 0;
          }
        }
        ++v5;
        uint64_t v3 = v30;
        unint64_t v7 = (v31 - v30) >> 6;
        v8 += 64;
      }
      while (v5 < v7);
      if (v6 > 0)
      {
        if (v28 >= 0) {
          p_p = (const UniChar *)&__p;
        }
        else {
          p_p = (const UniChar *)__p;
        }
        if (v28 >= 0) {
          CFIndex v22 = HIBYTE(v28);
        }
        else {
          CFIndex v22 = v27;
        }
        CFStringRef v23 = CFStringCreateWithCharacters(0, p_p, v22);
        sub_21619C69C((uint64_t)v23, v4, v6);
      }
    }
    CFMutableArrayRef v24 = theArray;
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = &v30;
  sub_2161DEE90((void ***)&__p);
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return v24;
}

void sub_2161DBFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_2161BE0C8(&a17, 0);
  std::string __p = &a18;
  sub_2161DEE90((void ***)&__p);
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void sub_2161DC058(uint64_t a1, void *a2)
{
  v88[1] = *MEMORY[0x263EF8340];
  sub_216216A20((uint64_t)a2, 0xCu, (uint64_t)"## Before reranking ##", 0, 1u);
  if (*(unsigned char *)(a1 + 228) && *(void *)(a1 + 1168))
  {
    (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 3832) + 16))(*(void *)(a1 + 3832), a2, *(void *)(a1 + 176) + 248);
    uint64_t v81 = &unk_26C6C7308;
    uint64_t v82 = (char *)sub_2162171D4;
    unint64_t v84 = &v81;
    sub_216215A00(a2, (uint64_t)&v81);
  }
  else
  {
    uint64_t v81 = &unk_26C6C7308;
    uint64_t v82 = (char *)sub_216216D1C;
    unint64_t v84 = &v81;
    sub_216215A00(a2, (uint64_t)&v81);
  }
  sub_216199290(&v81);
  uint64_t v4 = *(void *)(a1 + 1032);
  if (*(unsigned char *)v4 && a2[7] - a2[6] >= 0x10uLL)
  {
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    sub_21612EA8C(&v81, *(unsigned __int16 *)(v4 + 404) + (unint64_t)*(unsigned __int16 *)(v4 + 416));
    if ((unint64_t)((uint64_t)(a2[7] - a2[6]) >> 3) >= 8) {
      uint64_t v5 = 8;
    }
    else {
      uint64_t v5 = (uint64_t)(a2[7] - a2[6]) >> 3;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        uint64_t v7 = *(void *)(a2[6] + 8 * i);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 96))(v7) == 76
          || (*(unsigned int (**)(uint64_t))(*(void *)v7 + 96))(v7) == 74)
        {
          uint64_t v8 = v82;
          if (v82 >= v83)
          {
            BOOL v10 = (char *)v81;
            uint64_t v11 = (v82 - (unsigned char *)v81) >> 3;
            unint64_t v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v13 = v83 - (unsigned char *)v81;
            if ((v83 - (unsigned char *)v81) >> 2 > v12) {
              unint64_t v12 = v13 >> 2;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v12;
            }
            if (v14)
            {
              unint64_t v15 = (char *)sub_2160FFAA8((uint64_t)&v83, v14);
              BOOL v10 = (char *)v81;
              uint64_t v8 = v82;
            }
            else
            {
              unint64_t v15 = 0;
            }
            uint64_t v16 = &v15[8 * v11];
            *(void *)uint64_t v16 = i;
            uint64_t v9 = v16 + 8;
            while (v8 != v10)
            {
              uint64_t v17 = *((void *)v8 - 1);
              v8 -= 8;
              *((void *)v16 - 1) = v17;
              v16 -= 8;
            }
            uint64_t v81 = v16;
            uint64_t v82 = v9;
            uint64_t v83 = &v15[8 * v14];
            if (v10) {
              operator delete(v10);
            }
          }
          else
          {
            *(void *)uint64_t v82 = i;
            uint64_t v9 = v8 + 8;
          }
          uint64_t v82 = v9;
        }
      }
    }
    CFIndex v18 = (char *)v81;
    if ((unint64_t)(v82 - (unsigned char *)v81) >= 0x10)
    {
      unint64_t v19 = (v82 - (unsigned char *)v81) >> 3;
      if (v81 != v82)
      {
        int v20 = v82 - 8;
        if (v82 - 8 > v81)
        {
          uint64_t v21 = (char *)v81 + 8;
          do
          {
            uint64_t v22 = *((void *)v21 - 1);
            *((void *)v21 - 1) = *(void *)v20;
            *(void *)int v20 = v22;
            v20 -= 8;
            BOOL v23 = v21 >= v20;
            v21 += 8;
          }
          while (!v23);
        }
      }
      long long __p = 0uLL;
      v88[0] = 0;
      sub_21612EA8C((void **)&__p, v19);
      CFMutableArrayRef v24 = (char *)v81;
      uint64_t v79 = a1;
      uint64_t v80 = v82;
      if (v81 != v82)
      {
        do
        {
          uint64_t v25 = *(void *)v24;
          uint64_t v26 = *(void *)(a2[6] + 8 * *(void *)v24);
          unint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 48))(v26);
          if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 96))(v26) != 74)
          {
            int v29 = (char *)v81;
            uint64_t v28 = v82;
            while (v29 != v28)
            {
              if (*(void *)v29 != v25)
              {
                uint64_t v30 = *(void *)(a2[6] + 8 * *(void *)v29);
                unint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 48))(v30) - 1;
                if (v31 < v27)
                {
                  int v32 = (*(uint64_t (**)(uint64_t, void))(*(void *)v26 + 344))(v26, 0);
                  if (v32 == (*(unsigned int (**)(uint64_t, void))(*(void *)v30 + 344))(v30, 0))
                  {
                    int v33 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v26 + 352))(v26, v31);
                    if (v33 == (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v30 + 352))(v30, v31))
                    {
                      (*(void (**)(uint64_t))(*(void *)v26 + 544))(v26);
                      uint64_t v35 = v34;
                      (*(void (**)(uint64_t))(*(void *)v30 + 544))(v30);
                      if (v36 + v35 >= (unint64_t)*(unsigned __int16 *)(*(void *)(v79 + 1032) + 342))
                      {
                        __int16 v37 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 544))(v26);
                        unint64_t v39 = v38;
                        int v40 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 544))(v30);
                        if (v39 >= v41 && (v37 || !v41) && !memcmp(v37, v40, 2 * v41))
                        {
                          uint64_t v42 = (char *)*((void *)&__p + 1);
                          if (*((void *)&__p + 1) >= v88[0])
                          {
                            uint64_t v44 = (char *)__p;
                            uint64_t v45 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
                            unint64_t v46 = v45 + 1;
                            if ((unint64_t)(v45 + 1) >> 61) {
                              sub_21610CB04();
                            }
                            uint64_t v47 = v88[0] - __p;
                            if ((uint64_t)(v88[0] - __p) >> 2 > v46) {
                              unint64_t v46 = v47 >> 2;
                            }
                            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v48 = v46;
                            }
                            if (v48)
                            {
                              unint64_t v49 = (char *)sub_2160FFAA8((uint64_t)v88, v48);
                              uint64_t v42 = (char *)*((void *)&__p + 1);
                              uint64_t v44 = (char *)__p;
                            }
                            else
                            {
                              unint64_t v49 = 0;
                            }
                            uint64_t v50 = &v49[8 * v45];
                            *(void *)uint64_t v50 = v25;
                            uint64_t v43 = v50 + 8;
                            while (v42 != v44)
                            {
                              uint64_t v51 = *((void *)v42 - 1);
                              v42 -= 8;
                              *((void *)v50 - 1) = v51;
                              v50 -= 8;
                            }
                            *(void *)&long long __p = v50;
                            *((void *)&__p + 1) = v43;
                            v88[0] = &v49[8 * v48];
                            if (v44) {
                              operator delete(v44);
                            }
                          }
                          else
                          {
                            **((void **)&__p + 1) = v25;
                            uint64_t v43 = v42 + 8;
                          }
                          *((void *)&__p + 1) = v43;
                          break;
                        }
                      }
                    }
                  }
                }
              }
              v29 += 8;
            }
          }
          v24 += 8;
        }
        while (v24 != v80);
      }
      BOOL v52 = sub_2162D1CE4(0xBu);
      a1 = v79;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        long long v54 = (uint64_t *)*((void *)&__p + 1);
        for (unint64_t j = (uint64_t *)__p; j != v54; ++j)
        {
          uint64_t v55 = *j;
          unint64_t v56 = sub_2162D1CE4(0xBu);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v57 = *(void *)(a2[6] + 8 * v55);
            uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 24))(v57);
            *(_DWORD *)long long buf = 138412290;
            uint64_t v86 = v58;
            _os_log_debug_impl(&dword_2160F5000, v56, OS_LOG_TYPE_DEBUG, "Pruning %@ (excessive learning candidates)", buf, 0xCu);
          }
        }
      }
      sub_21621671C(a2, (unint64_t **)&__p);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      CFIndex v18 = (char *)v81;
    }
    if (v18)
    {
      uint64_t v82 = v18;
      operator delete(v18);
    }
  }
  if (*(void *)(a1 + 832) != *(void *)(a1 + 824) && *(unsigned char *)(a1 + 848))
  {
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v59 = a2[6];
    if (a2[7] != v59)
    {
      unint64_t v60 = 0;
      do
      {
        if ((*(unsigned int (**)(void))(**(void **)(v59 + 8 * v60) + 408))(*(void *)(v59 + 8 * v60)) == 1) {
          break;
        }
        if (v60 >= *(unsigned __int16 *)(*(void *)(a1 + 1032) + 310))
        {
          uint8x8_t v61 = v82;
          if (v82 >= v83)
          {
            int v63 = (char *)v81;
            uint64_t v64 = (v82 - (unsigned char *)v81) >> 3;
            unint64_t v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v66 = v83 - (unsigned char *)v81;
            if ((v83 - (unsigned char *)v81) >> 2 > v65) {
              unint64_t v65 = v66 >> 2;
            }
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67)
            {
              int v68 = (char *)sub_2160FFAA8((uint64_t)&v83, v67);
              int v63 = (char *)v81;
              uint8x8_t v61 = v82;
            }
            else
            {
              int v68 = 0;
            }
            int v69 = (unint64_t *)&v68[8 * v64];
            unint64_t *v69 = v60;
            int v62 = (char *)(v69 + 1);
            while (v61 != v63)
            {
              unint64_t v70 = *((void *)v61 - 1);
              v61 -= 8;
              *--int v69 = v70;
            }
            uint64_t v81 = v69;
            uint64_t v82 = v62;
            uint64_t v83 = &v68[8 * v67];
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *(void *)uint64_t v82 = v60;
            int v62 = v61 + 8;
          }
          uint64_t v82 = v62;
        }
        ++v60;
        uint64_t v59 = a2[6];
      }
      while (v60 < (a2[7] - v59) >> 3);
    }
    uint64_t v71 = sub_2162D1CE4(0xBu);
    BOOL v72 = os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG);
    uint64_t v73 = (char *)v81;
    if (v72)
    {
      uint64_t v74 = v82;
      if (v81 != v82)
      {
        do
        {
          uint64_t v75 = *(void *)v73;
          uint64_t v76 = sub_2162D1CE4(0xBu);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v77 = *(void *)(a2[6] + 8 * v75);
            uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)v77 + 24))(v77);
            LODWORD(__p) = 138412290;
            *(void *)((char *)&__p + 4) = v78;
            _os_log_debug_impl(&dword_2160F5000, v76, OS_LOG_TYPE_DEBUG, "Pruning %@ (QuickPath candidate)", (uint8_t *)&__p, 0xCu);
          }
          v73 += 8;
        }
        while (v73 != v74);
        uint64_t v73 = (char *)v81;
      }
    }
    if (v82 != v73)
    {
      sub_21621671C(a2, (unint64_t **)&v81);
      uint64_t v73 = (char *)v81;
    }
    if (v73)
    {
      uint64_t v82 = v73;
      operator delete(v73);
    }
  }
  sub_216216A20((uint64_t)a2, 0xCu, (uint64_t)"## After reranking ##", 0, 1u);
}

void sub_2161DCA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161DCB10(void *a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  CFURLRef v2 = sub_2162D1CE4(9u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MJ::assetDictionariesDidChange]", buf, 2u);
  }
  uint64_t v3 = a1[132];
  CFURLRef v4 = *(const __CFURL **)(v3 + 40);
  if (v4)
  {
    uint64_t v5 = sub_2162D1CE4(9u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "assetDictionariesDidChange";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v4;
      _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[MJ::%s] swapping neural language model: %@", buf, 0x16u);
    }
    CFErrorRef error = 0;
    if (CFURLResourceIsReachable(v4, &error))
    {
      if (a1[148] && a1[479] && a1[480])
      {
        uint64_t v6 = sub_2162D1CE4(0xDu);
        os_signpost_id_t v7 = os_signpost_id_make_with_pointer(v6, a1);
        uint64_t v8 = sub_2162D1CE4(0xDu);
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v9 = v8;
          if (os_signpost_enabled(v8))
          {
            *(_WORD *)long long buf = 0;
            _os_signpost_emit_with_name_impl(&dword_2160F5000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "MecabraJapaneseNeuralLanguageModelSwap", "Swap neural language model for MecabraJapanese", buf, 2u);
          }
        }
        sub_2161DAA4C(v4, off_26797B568, (CFURLRef *)&cf);
        sub_2161DAA4C(v4, off_26797B578, (CFURLRef *)__p);
        if (cf)
        {
          if (__p[0]) {
            operator new();
          }
          CFRelease(cf);
        }
        else if (__p[0])
        {
          CFRelease(__p[0]);
        }
      }
    }
    else if (error)
    {
      CFRelease(error);
    }
    uint64_t v3 = a1[132];
  }
  sub_2161AAB88((uint64_t)(a1 + 135), *(CFStringRef *)(v3 + 24), 0);
  if (a1[480])
  {
    CFStringRef v10 = *(const __CFString **)(a1[132] + 32);
    if (v10)
    {
      uint64_t v11 = a1[145];
      sub_2161E3AE8(v10, buf);
      int v12 = sub_2161AD890(v11, buf);
      int v13 = v12;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (!v13) {
          goto LABEL_29;
        }
      }
      else if (!v12)
      {
        goto LABEL_29;
      }
      (*(void (**)(void, void))(*(void *)a1[480] + 40))(a1[480], *(void *)(a1[145] + 344));
    }
  }
LABEL_29:
  unint64_t v14 = (const __CFString ***)a1[132];
  CFErrorRef error = 0;
  unint64_t v46 = 0;
  uint64_t v47 = 0;
  CFTypeRef cf = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  unint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (*v14 != v16)
  {
    do
    {
      sub_2161E3AE8(*v15, __p);
      uint64_t v17 = v43;
      if ((unint64_t)v43 >= v44)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v43 - (unsigned char *)cf) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        if (0x5555555555555556 * ((uint64_t)(v44 - (void)cf) >> 3) > v21) {
          unint64_t v21 = 0x5555555555555556 * ((uint64_t)(v44 - (void)cf) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (void)cf) >> 3) >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v21;
        }
        uint64_t v50 = &v44;
        if (v22) {
          BOOL v23 = (char *)sub_216129BFC((uint64_t)&v44, v22);
        }
        else {
          BOOL v23 = 0;
        }
        CFMutableArrayRef v24 = &v23[24 * v20];
        *(void *)long long buf = v23;
        *(void *)&uint8_t buf[8] = v24;
        unint64_t v49 = &v23[24 * v22];
        long long v25 = *(_OWORD *)__p;
        *((void *)v24 + 2) = v41;
        *(_OWORD *)CFMutableArrayRef v24 = v25;
        __p[1] = 0;
        uint64_t v41 = 0;
        __p[0] = 0;
        *(void *)&uint8_t buf[16] = v24 + 24;
        sub_21613FBD0((uint64_t *)&cf, buf);
        unint64_t v19 = v43;
        sub_21613FD68((uint64_t)buf);
        uint64_t v43 = v19;
        if (SHIBYTE(v41) < 0)
        {
          operator delete(__p[0]);
          unint64_t v19 = v43;
        }
      }
      else
      {
        long long v18 = *(_OWORD *)__p;
        *((void *)v43 + 2) = v41;
        *uint64_t v17 = v18;
        unint64_t v19 = (char *)v17 + 24;
        uint64_t v43 = (char *)v17 + 24;
      }
      uint64_t v26 = v19 - 24;
      if (*(v19 - 1) < 0) {
        uint64_t v26 = *(char **)v26;
      }
      unint64_t v27 = v46;
      if (v46 >= v47)
      {
        uint64_t v29 = (v46 - error) >> 3;
        if ((unint64_t)(v29 + 1) >> 61) {
          sub_21610CB04();
        }
        unint64_t v30 = (v47 - error) >> 2;
        if (v30 <= v29 + 1) {
          unint64_t v30 = v29 + 1;
        }
        if ((unint64_t)(v47 - error) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31) {
          int v32 = (char *)sub_2160FFAA8((uint64_t)&v47, v31);
        }
        else {
          int v32 = 0;
        }
        int v33 = (__CFError *)&v32[8 * v29];
        *(void *)int v33 = v26;
        uint64_t v28 = (__CFError *)((char *)v33 + 8);
        CFErrorRef v35 = error;
        CFErrorRef v34 = v46;
        if (v46 != error)
        {
          do
          {
            uint64_t v36 = *((void *)v34 - 1);
            CFErrorRef v34 = (CFErrorRef)((char *)v34 - 8);
            *((void *)v33 - 1) = v36;
            int v33 = (__CFError *)((char *)v33 - 8);
          }
          while (v34 != v35);
          CFErrorRef v34 = error;
        }
        CFErrorRef error = v33;
        unint64_t v46 = v28;
        uint64_t v47 = (__CFError *)&v32[8 * v31];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(void *)unint64_t v46 = v26;
        uint64_t v28 = (__CFError *)((char *)v27 + 8);
      }
      unint64_t v46 = v28;
      __int16 v37 = sub_2162D1CE4(9u);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v38 = v43 - 24;
        if (*(v43 - 1) < 0) {
          unint64_t v38 = *(char **)v38;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v38;
        _os_log_debug_impl(&dword_2160F5000, v37, OS_LOG_TYPE_DEBUG, "[MJ::assetDictionariesDidChange] setting additional dictionary %s", buf, 0xCu);
      }
      ++v15;
    }
    while (v15 != v16);
  }
  uint64_t v39 = a1[24];
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 152))(v39);
  }
  *(void *)long long buf = &cf;
  sub_21613EFD0((void ***)buf);
  if (error)
  {
    unint64_t v46 = error;
    operator delete(error);
  }
}

void sub_2161DD350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  sub_21617DB94((const void **)&a12, 0);
  sub_21617DB94(&a18, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2161DD510(uint64_t a1)
{
  v16[19] = *MEMORY[0x263EF8340];
  sub_21613025C(v14);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  CFURLRef v2 = sub_2161575FC(v14, (uint64_t)__p, 0xAu);
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) == 0)
  {
    if (v13 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, (const char *)v3, 0x8000100u, contentsDeallocator);
    CFStringRef v11 = v4;
    uint64_t v5 = sub_216292770(*(void *)(a1 + 1048), v4);
    uint64_t v9 = 0;
    uint64_t v10 = v5;
    uint64_t v8 = 0;
    sub_2161E1FB8(v4);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  v14[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166CA430](&v15);
  std::istream::~istream();
  return MEMORY[0x2166CA750](v16);
}

void sub_2161DD84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
}

uint64_t sub_2161DD950(uint64_t a1)
{
  return sub_2163658D4(*(void *)(a1 + 1168));
}

uint64_t sub_2161DD958(uint64_t a1, const __CFString *a2)
{
  uint64_t result = *(void *)(a1 + 1168);
  if (result) {
    return sub_2162F09FC(result, a2);
  }
  return result;
}

uint64_t sub_2161DD968(uint64_t a1, const __CFString *a2)
{
  uint64_t result = *(void *)(a1 + 1168);
  if (result) {
    return sub_2162F0ABC(result, a2);
  }
  return result;
}

uint64_t sub_2161DD978(int a1, const __CFString *a2)
{
  uint64_t result = sub_2161DB568(a1, a2);
  if (result)
  {
    return sub_2161F4704(result);
  }
  return result;
}

uint64_t sub_2161DD9B8(uint64_t a1)
{
  return MEMORY[0x270F46B28](*(void *)(*(void *)(a1 + 1168) + 8));
}

uint64_t sub_2161DD9C4(uint64_t a1)
{
  return *(void *)(a1 + 3872);
}

BOOL sub_2161DD9CC(uint64_t a1)
{
  return *(void *)(a1 + 3832) != 0;
}

BOOL sub_2161DD9DC(uint64_t a1)
{
  return *(void *)(a1 + 3840) != 0;
}

uint64_t sub_2161DD9EC()
{
  return 1;
}

uint64_t sub_2161DD9F4(uint64_t a1)
{
  return *(__int16 *)(*(void *)(a1 + 1032) + 522);
}

uint64_t sub_2161DDA00(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CFStringRef v4 = (void **)(a2 + 24);
    sub_2161DDA68(&v4);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    return MEMORY[0x2166CA800](a2, 0x1032C40CA71968DLL);
  }
  return result;
}

void sub_2161DDA68(void ***a1)
{
  uint64_t v1 = *a1;
  CFURLRef v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        sub_2161DDAEC(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2161DDAEC(uint64_t a1)
{
  sub_216144C28(a1 + 136);
  CFURLRef v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 8sub_216195B94(&qword_26797EF28, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + ++**(_DWORD **)(result + 8) = v6;
    operator delete(v6);
  }
}

uint64_t sub_2161DDB7C(uint64_t a1)
{
  return a1;
}

void sub_2161DDBC0(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        sub_2161C5014(&v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

unint64_t sub_2161DDC34(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (unint64_t *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v46 = *(a2 - 2);
                unint64_t v47 = *v10;
                if (v46 > *v10)
                {
                  unint64_t v48 = v10[1];
                  unint64_t v49 = *(a2 - 1);
                  unint64_t *v10 = v46;
                  v10[1] = v49;
                  *(a2 - 2) = v47;
                  *(a2 - 1) = v48;
                }
                break;
              case 3uLL:
                uint64_t result = (unint64_t)sub_2161DE358(v10, v10 + 2, a2 - 2);
                break;
              case 4uLL:
                uint64_t result = (unint64_t)sub_2161DE5F8(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5uLL:
                uint64_t result = (unint64_t)sub_2161DE5F8(v10, v10 + 2, v10 + 4, v10 + 6);
                unint64_t v50 = *(a2 - 2);
                unint64_t v51 = v10[6];
                if (v50 > v51)
                {
                  v10[6] = v50;
                  *(a2 - 2) = v51;
                  unint64_t v52 = v10[6];
                  unint64_t v53 = v10[7];
                  v10[7] = *(a2 - 1);
                  *(a2 - 1) = v53;
                  unint64_t v54 = v10[4];
                  if (v52 > v54)
                  {
                    unint64_t v55 = v10[5];
                    unint64_t v56 = v10[7];
                    v10[4] = v52;
                    void v10[5] = v56;
                    v10[6] = v54;
                    v10[7] = v55;
                    unint64_t v57 = v10[2];
                    if (v52 > v57)
                    {
                      unint64_t v58 = v10[3];
                      _DWORD v10[2] = v52;
                      uint64_t v10[3] = v56;
                      v10[4] = v57;
                      void v10[5] = v58;
                      unint64_t v59 = *v10;
                      if (v52 > *v10)
                      {
                        unint64_t v60 = v10[1];
                        unint64_t *v10 = v52;
                        v10[1] = v56;
                        _DWORD v10[2] = v59;
                        uint64_t v10[3] = v60;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint8x8_t v61 = v10 + 2;
            BOOL v63 = v10 == a2 || v61 == a2;
            if (a4)
            {
              if (!v63)
              {
                uint64_t v64 = 0;
                unint64_t v65 = v10;
                do
                {
                  uint64_t v66 = v61;
                  unint64_t v67 = v65[2];
                  unint64_t v68 = *v65;
                  if (v67 > *v65)
                  {
                    unint64_t v69 = v65[3];
                    uint64_t v70 = v64;
                    while (1)
                    {
                      uint64_t v71 = (char *)v10 + v70;
                      uint64_t v72 = *(unint64_t *)((char *)v10 + v70 + 8);
                      *((void *)v71 + 2) = v68;
                      *((void *)v71 + 3) = v72;
                      if (!v70) {
                        break;
                      }
                      unint64_t v68 = *((void *)v71 - 2);
                      v70 -= 16;
                      if (v67 <= v68)
                      {
                        uint64_t v73 = (unint64_t *)((char *)v10 + v70 + 16);
                        goto LABEL_84;
                      }
                    }
                    uint64_t v73 = v10;
LABEL_84:
                    *uint64_t v73 = v67;
                    v73[1] = v69;
                  }
                  uint8x8_t v61 = v66 + 2;
                  v64 += 16;
                  unint64_t v65 = v66;
                }
                while (v66 + 2 != a2);
              }
            }
            else if (!v63)
            {
              uint64_t v105 = v10 + 3;
              do
              {
                long long v106 = v61;
                unint64_t v107 = v9[2];
                unint64_t v108 = *v9;
                if (v107 > *v9)
                {
                  unint64_t v109 = v9[3];
                  uint64_t v110 = v105;
                  do
                  {
                    unint64_t v111 = v110;
                    *(v110 - 1) = v108;
                    unint64_t v112 = *(v110 - 2);
                    v110 -= 2;
                    unint64_t *v111 = v112;
                    unint64_t v108 = *(v111 - 5);
                  }
                  while (v107 > v108);
                  *(v110 - 1) = v107;
                  *uint64_t v110 = v109;
                }
                uint8x8_t v61 = v106 + 2;
                v105 += 2;
                uint64_t v9 = v106;
              }
              while (v106 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v74 = (v12 - 2) >> 1;
              int64_t v75 = v74;
              do
              {
                int64_t v76 = v75;
                if (v74 >= v75)
                {
                  uint64_t v77 = (2 * v75) | 1;
                  uint64_t v78 = &v10[2 * v77];
                  if (2 * v76 + 2 < (uint64_t)v12)
                  {
                    unint64_t v80 = v78[2];
                    BOOL v79 = *v78 > v80;
                    if (*v78 < v80) {
                      unint64_t v80 = *v78;
                    }
                    if (v79)
                    {
                      v78 += 2;
                      uint64_t v77 = 2 * v76 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v80 = *v78;
                  }
                  uint64_t v81 = &v10[2 * v76];
                  unint64_t v82 = *v81;
                  if (v80 <= *v81)
                  {
                    unint64_t v83 = v81[1];
                    do
                    {
                      uint64_t result = (unint64_t)v81;
                      uint64_t v81 = v78;
                      unint64_t v84 = v78[1];
                      *(void *)uint64_t result = v80;
                      *(void *)(result + ++**(_DWORD **)(result + 8) = v84;
                      if (v74 < v77) {
                        break;
                      }
                      uint64_t result = (2 * v77) | 1;
                      uint64_t v78 = &v10[2 * result];
                      uint64_t v77 = 2 * v77 + 2;
                      if (v77 < (uint64_t)v12)
                      {
                        unint64_t v80 = *v78;
                        unint64_t v85 = v78[2];
                        BOOL v86 = *v78 > v85;
                        if (*v78 >= v85) {
                          unint64_t v80 = v78[2];
                        }
                        if (*v78 > v85) {
                          v78 += 2;
                        }
                        if (!v86) {
                          uint64_t v77 = result;
                        }
                      }
                      else
                      {
                        unint64_t v80 = *v78;
                        uint64_t v77 = result;
                      }
                    }
                    while (v80 <= v82);
                    *uint64_t v81 = v82;
                    v81[1] = v83;
                  }
                }
                int64_t v75 = v76 - 1;
              }
              while (v76);
              uint64_t v87 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v88 = 0;
                unint64_t v89 = *v10;
                unint64_t v90 = v10[1];
                unsigned int v91 = v10;
                do
                {
                  unsigned int v92 = &v91[2 * v88 + 2];
                  uint64_t v93 = (2 * v88) | 1;
                  uint64_t v88 = 2 * v88 + 2;
                  if (v88 >= v87)
                  {
                    unint64_t v94 = *v92;
                    uint64_t v88 = v93;
                  }
                  else
                  {
                    unint64_t v94 = *v92;
                    uint64_t result = v92[2];
                    if (*v92 >= result) {
                      unint64_t v94 = v92[2];
                    }
                    if (*v92 <= result) {
                      uint64_t v88 = v93;
                    }
                    else {
                      v92 += 2;
                    }
                  }
                  unint64_t v95 = v92[1];
                  *unsigned int v91 = v94;
                  v91[1] = v95;
                  unsigned int v91 = v92;
                }
                while (v88 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
                if (v92 == a2 - 2)
                {
                  *unsigned int v92 = v89;
                  v92[1] = v90;
                }
                else
                {
                  unint64_t v96 = *(a2 - 1);
                  *unsigned int v92 = *(a2 - 2);
                  v92[1] = v96;
                  *(a2 - 2) = v89;
                  *(a2 - 1) = v90;
                  uint64_t v97 = (char *)v92 - (char *)v10 + 16;
                  if (v97 >= 17)
                  {
                    unint64_t v98 = (((unint64_t)v97 >> 4) - 2) >> 1;
                    int64_t v99 = &v10[2 * v98];
                    unint64_t v100 = *v99;
                    unint64_t v101 = *v92;
                    if (*v99 > *v92)
                    {
                      unint64_t v102 = v92[1];
                      do
                      {
                        int v103 = v92;
                        unsigned int v92 = v99;
                        unint64_t v104 = v99[1];
                        unint64_t *v103 = v100;
                        v103[1] = v104;
                        if (!v98) {
                          break;
                        }
                        unint64_t v98 = (v98 - 1) >> 1;
                        int64_t v99 = &v10[2 * v98];
                        unint64_t v100 = *v99;
                      }
                      while (*v99 > v101);
                      *unsigned int v92 = v101;
                      v92[1] = v102;
                    }
                  }
                }
                a2 -= 2;
                BOOL v79 = v87-- <= 2;
              }
              while (!v79);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            sub_2161DE358(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            sub_2161DE358(v9 + 2, v14 - 2, a2 - 4);
            sub_2161DE358(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = (unint64_t)sub_2161DE358(v14 - 2, v14, &v9[2 * v13 + 2]);
            unint64_t v15 = *v9;
            unint64_t v16 = v9[1];
            unint64_t v17 = v14[1];
            *uint64_t v9 = *v14;
            v9[1] = v17;
            *unint64_t v14 = v15;
            v14[1] = v16;
          }
          else
          {
            uint64_t result = (unint64_t)sub_2161DE358(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          unint64_t v18 = *v9;
          if ((a4 & 1) != 0 || *(v9 - 2) > v18) {
            break;
          }
          if (v18 <= *(a2 - 2))
          {
            CFErrorRef v35 = v9 + 2;
            do
            {
              uint64_t v10 = v35;
              if (v35 >= a2) {
                break;
              }
              v35 += 2;
            }
            while (v18 <= *v10);
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              unint64_t v34 = v10[2];
              v10 += 2;
            }
            while (v18 <= v34);
          }
          uint64_t v36 = a2;
          if (v10 < a2)
          {
            uint64_t v36 = a2;
            do
            {
              unint64_t v37 = *(v36 - 2);
              v36 -= 2;
            }
            while (v18 > v37);
          }
          unint64_t v38 = v9[1];
          if (v10 < v36)
          {
            unint64_t v39 = *v10;
            unint64_t v40 = *v36;
            do
            {
              unint64_t v41 = v10[1];
              unint64_t v42 = v36[1];
              unint64_t *v10 = v40;
              v10[1] = v42;
              unint64_t *v36 = v39;
              v36[1] = v41;
              do
              {
                unint64_t v43 = v10[2];
                v10 += 2;
                unint64_t v39 = v43;
              }
              while (v18 <= v43);
              do
              {
                unint64_t v44 = *(v36 - 2);
                v36 -= 2;
                unint64_t v40 = v44;
              }
              while (v18 > v44);
            }
            while (v10 < v36);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            unint64_t v45 = *(v10 - 1);
            *uint64_t v9 = *(v10 - 2);
            v9[1] = v45;
          }
          a4 = 0;
          *(v10 - 2) = v18;
          *(v10 - 1) = v38;
        }
        uint64_t v19 = 0;
        unint64_t v20 = v9[1];
        do
        {
          unint64_t v21 = v9[v19 + 2];
          v19 += 2;
        }
        while (v21 > v18);
        unint64_t v22 = &v9[v19];
        BOOL v23 = a2;
        if (v19 == 2)
        {
          BOOL v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            unint64_t v25 = *(v23 - 2);
            v23 -= 2;
          }
          while (v25 <= v18);
        }
        else
        {
          do
          {
            unint64_t v24 = *(v23 - 2);
            v23 -= 2;
          }
          while (v24 <= v18);
        }
        if (v22 >= v23)
        {
          uint64_t v10 = &v9[v19];
        }
        else
        {
          unint64_t v26 = *v23;
          uint64_t v10 = &v9[v19];
          unint64_t v27 = v23;
          do
          {
            unint64_t v28 = v10[1];
            unint64_t v29 = v27[1];
            unint64_t *v10 = v26;
            v10[1] = v29;
            *unint64_t v27 = v21;
            v27[1] = v28;
            do
            {
              unint64_t v30 = v10[2];
              v10 += 2;
              unint64_t v21 = v30;
            }
            while (v30 > v18);
            do
            {
              unint64_t v31 = *(v27 - 2);
              v27 -= 2;
              unint64_t v26 = v31;
            }
            while (v31 <= v18);
          }
          while (v10 < v27);
        }
        if (v10 - 2 != v9)
        {
          unint64_t v32 = *(v10 - 1);
          *uint64_t v9 = *(v10 - 2);
          v9[1] = v32;
        }
        *(v10 - 2) = v18;
        *(v10 - 1) = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        uint64_t result = sub_2161DDC34(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v33 = sub_2161DE3F4(v9, v10 - 2);
      uint64_t result = sub_2161DE3F4(v10, a2);
      if (result) {
        break;
      }
      if (!v33) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 2;
    if (!v33) {
      continue;
    }
    return result;
  }
}

unint64_t *sub_2161DE358(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      unint64_t v8 = *a2;
      unint64_t v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      unint64_t v10 = *result;
      if (v8 > *result)
      {
        unint64_t v11 = result[1];
        unint64_t v12 = a2[1];
        void *result = v8;
        result[1] = v12;
        *a2 = v10;
        a2[1] = v11;
      }
    }
  }
  else if (v5 <= v3)
  {
    unint64_t v13 = result[1];
    unint64_t v14 = a2[1];
    void *result = v3;
    result[1] = v14;
    *a2 = v4;
    a2[1] = v13;
    if (*a3 > v4)
    {
      unint64_t v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      *a3 = v4;
      a3[1] = v13;
    }
  }
  else
  {
    unint64_t v6 = result[1];
    unint64_t v7 = a3[1];
    void *result = v5;
    result[1] = v7;
    *a3 = v4;
    a3[1] = v6;
  }
  return result;
}

BOOL sub_2161DE3F4(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 > *a1)
      {
        unint64_t v8 = a1[1];
        unint64_t v9 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_2161DE358(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_2161DE5F8(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_2161DE5F8(a1, a1 + 2, a1 + 4, a1 + 6);
      unint64_t v21 = *(a2 - 2);
      unint64_t v22 = a1[6];
      if (v21 > v22)
      {
        a1[6] = v21;
        *(a2 - 2) = v22;
        unint64_t v23 = a1[6];
        unint64_t v24 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v24;
        unint64_t v25 = a1[4];
        if (v23 > v25)
        {
          unint64_t v26 = a1[5];
          unint64_t v27 = a1[7];
          a1[4] = v23;
          a1[5] = v27;
          a1[6] = v25;
          a1[7] = v26;
          unint64_t v28 = a1[2];
          if (v23 > v28)
          {
            unint64_t v29 = a1[3];
            a1[2] = v23;
            a1[3] = v27;
            a1[4] = v28;
            a1[5] = v29;
            unint64_t v30 = *a1;
            if (v23 > *a1)
            {
              unint64_t v31 = a1[1];
              *a1 = v23;
              a1[1] = v27;
              a1[2] = v30;
              a1[3] = v31;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = a1 + 4;
      sub_2161DE358(a1, a1 + 2, a1 + 4);
      unint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *v11;
    unint64_t v15 = *v10;
    if (*v11 > *v10)
    {
      unint64_t v16 = v11[1];
      uint64_t v17 = v12;
      while (1)
      {
        unint64_t v18 = (unint64_t *)((char *)a1 + v17);
        uint64_t v19 = *(unint64_t *)((char *)a1 + v17 + 40);
        v18[6] = v15;
        void v18[7] = v19;
        if (v17 == -32) {
          break;
        }
        unint64_t v15 = v18[2];
        v17 -= 16;
        if (v14 <= v15)
        {
          unint64_t v20 = (unint64_t *)((char *)a1 + v17 + 48);
          goto LABEL_13;
        }
      }
      unint64_t v20 = a1;
LABEL_13:
      *unint64_t v20 = v14;
      v20[1] = v16;
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    unint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

unint64_t *sub_2161DE5F8(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  BOOL result = sub_2161DE358(a1, a2, a3);
  unint64_t v9 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unint64_t v10 = *a3;
    unint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unint64_t v12 = *a2;
    if (v10 > *a2)
    {
      *a2 = v10;
      *a3 = v12;
      unint64_t v13 = *a2;
      unint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unint64_t v15 = *a1;
      if (v13 > *a1)
      {
        unint64_t v16 = a1[1];
        unint64_t v17 = a2[1];
        *a1 = v13;
        a1[1] = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t **sub_2161DE698(void *a1, void *a2)
{
  unsigned int v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 144))();
  unint64_t v5 = a1[1];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v5 <= v4) {
      unint64_t v9 = v4 % v5;
    }
  }
  else
  {
    unint64_t v9 = (v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if ((*(uint64_t (**)(uint64_t *, void))(*i[2] + 152))(i[2], *a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5) {
          v12 %= v5;
        }
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void sub_2161DE7D4(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_216182BB8(a1, cf);
  }
}

uint64_t sub_2161DE834(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2161DE8AC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2161DE8AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_2161DE944((uint64_t)v13);
  return v11;
}

uint64_t sub_2161DE944(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2161DE97C((void *)a1);
  }
  return a1;
}

void *sub_2161DE97C(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  CFURLRef v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    std::mutex *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_2161DE9E4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_2161DEA1C(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unsigned int v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - ++**(_DWORD **)(result + 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_2161DEA90(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_2161DEB04(void *a1, _WORD *a2, uint64_t a3, __int16 a4, _WORD *a5, uint64_t a6, __int16 a7, __int16 a8)
{
  __int16 v13 = a3;
  sub_2161BF794(a2, &a2[a3], (uint64_t)(a1 + 1));
  sub_2161BF794(a5, &a5[a6], (uint64_t)(a1 + 4));
  unint64_t v15 = a1[9];
  unint64_t v16 = a1[8];
  if (v16 >= v15)
  {
    uint64_t v18 = a1[7];
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v18) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0x666666666666666) {
      sub_21618B344();
    }
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - v18) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x333333333333333) {
      unint64_t v22 = 0x666666666666666;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22) {
      unint64_t v23 = (char *)sub_21618B4A8((uint64_t)(a1 + 9), v22);
    }
    else {
      unint64_t v23 = 0;
    }
    unint64_t v24 = &v23[40 * v19];
    unint64_t v25 = &v23[40 * v22];
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = 0;
    *(void *)unint64_t v24 = 0;
    *((_WORD *)v24 + 12) = v13;
    *((_WORD *)v24 + 13) = a4;
    *((_WORD *)v24 + 14) = a6;
    *((_WORD *)v24 + 15) = a7;
    *((_WORD *)v24 + 16) = a8;
    *((_WORD *)v24 + 17) = 0;
    v24[36] = 0;
    *(_WORD *)(v24 + 37) = 513;
    v24[39] = 0;
    unint64_t v17 = v24 + 40;
    unint64_t v27 = (char *)a1[7];
    unint64_t v26 = (char *)a1[8];
    if (v26 != v27)
    {
      do
      {
        long long v28 = *(_OWORD *)(v26 - 40);
        long long v29 = *(_OWORD *)(v26 - 24);
        *((void *)v24 - 1) = *((void *)v26 - 1);
        *(_OWORD *)(v24 - 24) = v29;
        *(_OWORD *)(v24 - 4sub_216195B94(&qword_26797EF28, 0) = v28;
        v24 -= 40;
        v26 -= 40;
      }
      while (v26 != v27);
      unint64_t v26 = (char *)a1[7];
    }
    a1[7] = v24;
    a1[8] = v17;
    a1[9] = v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(void *)unint64_t v16 = 0;
    *(void *)(v16 + ++**(_DWORD **)(result + 8) = 0;
    *(void *)(v16 + 16) = 0;
    *(_WORD *)(v16 + 24) = v13;
    *(_WORD *)(v16 + 26) = a4;
    *(_WORD *)(v16 + 2++**(_DWORD **)(result + 8) = a6;
    *(_WORD *)(v16 + 3sub_216195B94(&qword_26797EF28, 0) = a7;
    *(_WORD *)(v16 + 32) = a8;
    *(_WORD *)(v16 + 34) = 0;
    *(unsigned char *)(v16 + 36) = 0;
    *(_WORD *)(v16 + 37) = 513;
    unint64_t v17 = (char *)(v16 + 40);
    *(unsigned char *)(v16 + 39) = 0;
  }
  a1[8] = v17;
}

uint64_t sub_2161DECC4(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1 != a1[2])
  {
    uint64_t v2 = a1[4];
    if (v2 != a1[5] && a1[7] != a1[8]) {
      sub_216246448();
    }
  }
  return 0;
}

uint64_t sub_2161DED70(uint64_t a1)
{
  sub_2161DFB5C((const void **)(a1 + 80), 0);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 4sub_216195B94(&qword_26797EF28, 0) = v3;
    operator delete(v3);
  }
  unsigned int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

void *sub_2161DEDD0(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t sub_2161DEE38(void *a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = *(void *)(*a1 + 40);
    uint64_t v3 = (unsigned __int16 *)(a1[1] + 40 * a2 + 30);
    do
    {
      unint64_t v4 = *(v3 - 19);
      if (v2 > v4)
      {
        uint64_t v5 = *(void *)(*a1 + 32);
        if (*(unsigned char *)(v5 + v4))
        {
          unint64_t v6 = *v3;
          if (v2 > v6 && (*(unsigned char *)(v5 + v6) & 2) != 0) {
            break;
          }
        }
      }
      v3 -= 20;
      --a2;
    }
    while (a2);
  }
  return a2;
}

void sub_2161DEE90(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_2161DEEE4((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_2161DEEE4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 41) < 0) {
      operator delete(*(void **)(i - 64));
    }
  }
  a1[1] = v2;
}

char *sub_2161DEF34(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v11 = __dst;
  unint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_2161984AC(v4, *(void **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v4 = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      unint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2161DEFF4((uint64_t)v9);
  return v4;
}

void sub_2161DEFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2161DEFF4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2161409D8(a1);
  }
  return a1;
}

void sub_2161DF02C(void *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    unint64_t v4 = *(void **)v2;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v3 + ++**(_DWORD **)(result + 8) = v4;
    a1[2] = 0;
    while ((void *)v2 != a1)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      sub_2161DF090((int)a1, (void **)v2);
      uint64_t v2 = v5;
    }
  }
}

void sub_2161DF090(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void sub_2161DF0D4(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161DF12C(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_2161DF12C(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2161DF178(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + ++**(_DWORD **)(result + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + ++**(_DWORD **)(result + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_21619E14C((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_2161DF1EC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2161DF230(void *a1, uint64_t a2, int *a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_2161984AC(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }
  int v13 = *a3;
  int v6 = v13;
  long long v7 = operator new(0x30uLL);
  v7[1] = *(_OWORD *)__p;
  *((void *)v7 + 4) = v12;
  __p[1] = 0;
  uint64_t v12 = 0;
  __p[0] = 0;
  *((_DWORD *)v7 + 1sub_216195B94(&qword_26797EF28, 0) = v6;
  uint64_t v8 = a1[1];
  *(void *)(v8 + ++**(_DWORD **)(result + 8) = v7;
  a1[1] = v7;
  *(void *)long long v7 = v8;
  *((void *)v7 + 1) = a1 + 1;
  ++a1[3];
  char v14 = (long long *)a2;
  *((void *)sub_2161DF384((uint64_t)(a1 + 4), (unsigned __int16 *)a2, (uint64_t)&unk_21636EABA, &v14) + 5) = v7;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (a1[3] > *a1)
  {
    uint64_t v9 = a1[2];
    sub_2161DF6C8(a1 + 4, (unsigned __int16 *)(v9 + 16));
    char v10 = *(void **)v9;
    v10[1] = *(void *)(v9 + 8);
    **(void **)(v9 + ++**(_DWORD **)(result + 8) = v10;
    --a1[3];
    sub_2161DF090(a1 + 8, (void **)v9);
  }
}

void sub_2161DF368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_2161DF384(uint64_t a1, unsigned __int16 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_2161A6920(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(unsigned __int16 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int16 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2161A6964(a1 + 32, i + 8, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_2161DF61C(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_2161297B4(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int16 *)v26[0];
  ++*v8;
  return i;
}

void sub_2161DF5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_216129A00((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161DF61C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + ++**(_DWORD **)(result + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_2161984AC(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  void v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2161DF6AC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_216129A00(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_2161DF6C8(void *a1, unsigned __int16 *a2)
{
  uint64_t result = (uint64_t *)sub_2161DF700(a1, a2);
  if (result)
  {
    sub_2161DF804(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

unsigned __int16 *sub_2161DF700(void *a1, unsigned __int16 *a2)
{
  unint64_t v4 = sub_2161A6920((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int16 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_2161A6964(v12, v11 + 8, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      long long v11 = *(unsigned __int16 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t sub_2161DF804(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_2161DF850(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  long long __p = 0;
  if (v3) {
    sub_216129A00((uint64_t)&v6, v3);
  }
  return v2;
}

void *sub_2161DF850@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + ++**(_DWORD **)(result + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2161DF984(void *a1, long long *a2, long long *a3)
{
  sub_2161DFAC4((char *)v10, a2, a3);
  uint8x8_t v5 = operator new(0x40uLL);
  v5[1] = *(_OWORD *)v10;
  *((void *)v5 + 4) = v11;
  long long v6 = *(_OWORD *)__p;
  uint64_t v11 = 0;
  __p[0] = 0;
  v10[0] = 0;
  v10[1] = 0;
  *(_OWORD *)((char *)v5 + 4sub_216195B94(&qword_26797EF28, 0) = v6;
  *((void *)v5 + 7) = v13;
  __p[1] = 0;
  uint64_t v13 = 0;
  uint64_t v7 = a1[1];
  *(void *)(v7 + ++**(_DWORD **)(result + 8) = v5;
  a1[1] = v5;
  *(void *)uint8x8_t v5 = v7;
  *((void *)v5 + 1) = a1 + 1;
  ++a1[3];
  char v14 = a2;
  *((void *)sub_2161DF384((uint64_t)(a1 + 4), (unsigned __int16 *)a2, (uint64_t)&unk_21636EABA, &v14) + 5) = v5;
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (a1[3] > *a1)
  {
    unint64_t v8 = (unsigned __int16 *)a1[2];
    sub_2161DF6C8(a1 + 4, v8 + 8);
    uint64_t v9 = *(void *)v8;
    *(void *)(v9 + ++**(_DWORD **)(result + 8) = *((void *)v8 + 1);
    **((void **)v8 + 1) = v9;
    --a1[3];
    sub_21619E14C((uint64_t)(v8 + 8));
    operator delete(v8);
  }
}

void sub_2161DFAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_2161DFAC4(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_2161984AC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  long long v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_2161984AC(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)long long v6 = v7;
  }
  return __dst;
}

void sub_2161DFB40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161DFB5C(const void **a1, const void *a2)
{
  unint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_2161DFB94(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_2161DFBF8((const void ***)(a2 + 16), 0);
    sub_2161DFC94((const void ***)(a2 + 8), 0);
    JUMPOUT(0x2166CA800);
  }
}

const void ***sub_2161DFBF8(const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    sub_2161DFC5C(v2, 0);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2161DFC5C(const void **a1, const void *a2)
{
  unint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

const void ***sub_2161DFC94(const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    sub_2161DFCF8(v2, 0);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2161DFCF8(const void **a1, const void *a2)
{
  unint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_2161DFD30(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_216292368(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t *sub_2161DFD80(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t *result = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 344);
    *(void *)(v1 + 344) = 0;
    if (v2) {
      MEMORY[0x2166CA800](v2, 0x1050C40717B85FCLL);
    }
    sub_21618098C(v1);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2161DFDFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    MEMORY[0x2166CA800](v2, 0x50C40EE9192B6);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t *sub_2161DFE60(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t *result = 0;
  if (v1)
  {
    sub_2161BE090((const void **)(v1 + 24), 0);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2161DFEC4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_2161121B0(v1);
  }

  JUMPOUT(0x2166CA800);
}

void sub_2161DFF14(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_216144C28(a2 + 144);
    if (*(char *)(a2 + 79) < 0) {
      operator delete(*(void **)(a2 + 56));
    }
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*(void **)(a2 + 32));
    }
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    JUMPOUT(0x2166CA800);
  }
}

void ***sub_2161DFF98(void ***result, void **a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    free(*v2);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2161DFFF8(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      sub_2161E003C((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_2161E003C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int8x8_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_2161E00B4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2161E003C((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t sub_2161E010C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      sub_2161E0184(a1, (uint64_t)a2, a2);
      ++a2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_2161E0170(_Unwind_Exception *a1)
{
  sub_216144C28(v1);
  _Unwind_Resume(a1);
}

void *sub_2161E0184(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_2161E03F4(a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = *(void *)(a2 + 8);
        do
        {
          unint64_t v15 = v13[1];
          if (v15 == v8)
          {
            if (v13[3] == v14)
            {
              if (!v14) {
                return v13;
              }
              unint64_t v16 = (unsigned __int16 *)v13[2];
              uint64_t v17 = *(void *)(a2 + 8);
              for (uint64_t i = *(uint64_t **)a2; *(unsigned __int16 *)i == *v16; uint64_t i = (uint64_t *)((char *)i + 2))
              {
                ++v16;
                if (!--v17) {
                  return v13;
                }
              }
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x20uLL);
  void *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a3;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_2161297B4(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    void *v13 = *v26;
LABEL_44:
    *unint64_t v26 = v13;
    goto LABEL_45;
  }
  void *v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v25 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v27 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10) {
        v27 %= v10;
      }
    }
    else
    {
      v27 &= v10 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*v7;
  return v13;
}

void sub_2161E03E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_2161E03F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_2161292A0((uint64_t)&v4, a2, 2 * a3);
}

void sub_2161E0420(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  sub_2160F6FB0(a1 + 8);
  sub_2161055D8(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2161E04B0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
    JUMPOUT(0x2166CA800);
  }
}

void sub_2161E050C(void *a1)
{
  sub_2161E05C4((uint64_t)(a1 + 19));
  sub_2161DF02C(a1 + 16);
  uint64_t v2 = a1[12];
  a1[12] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[11];
  a1[11] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_2162F08E0((uint64_t)a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161E05C4(uint64_t a1)
{
  sub_2161DF12C(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2161E0600(void *a1)
{
}

void sub_2161E0658(_Unwind_Exception *a1)
{
  sub_2161C9988(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161E066C(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 8sub_216195B94(&qword_26797EF28, 0) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_21619FDC4(a1);
  return a1;
}

void sub_2161E06E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_2161E070C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    munmap(v2, *(unsigned int *)(a1 + 8));
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    if (*(_WORD *)(a1 + 14))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(void **)(v6 + v4);
        if (v7)
        {
          free(v7);
          uint64_t v6 = *(void *)(a1 + 16);
        }
        unint64_t v8 = *(void **)(v6 + v4 + 8);
        if (v8) {
          free(v8);
        }
        ++v5;
        v4 += 32;
      }
      while (v5 < *(unsigned __int16 *)(a1 + 14));
      uint64_t v3 = *(void **)(a1 + 16);
    }
    free(v3);
  }
}

uint64_t sub_2161E07BC(void **a1, CFURLRef anURL)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  CFStringRef v3 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  if (!v3) {
    return 4294967246;
  }
  CFStringRef v4 = v3;
  memset(&v23, 0, sizeof(v23));
  int CString = CFStringGetCString(v3, buffer, 1024, 0x8000100u);
  CFRelease(v4);
  if (!CString) {
    return 4294967246;
  }
  int v6 = open(buffer, 0, *(_OWORD *)&v23.st_dev, *(_OWORD *)&v23.st_uid, *(_OWORD *)&v23.st_atimespec, *(_OWORD *)&v23.st_mtimespec, *(_OWORD *)&v23.st_ctimespec, *(_OWORD *)&v23.st_birthtimespec);
  if (v6 == -1) {
    return 4294967253;
  }
  int v7 = v6;
  fstat(v6, &v23);
  *a1 = mmap(0, v23.st_size, 1, 2, v7, 0);
  close(v7);
  unint64_t v8 = (unsigned __int16 *)*a1;
  if (*a1 == (void *)-1) {
    return 4294967188;
  }
  *((_DWORD *)a1 + 2) = v23.st_size;
  *((_WORD *)a1 + 6) = bswap32(v8[38]) >> 16;
  unsigned int v9 = bswap32(v8[39]);
  uint64_t v10 = HIWORD(v9);
  *((_WORD *)a1 + 7) = HIWORD(v9);
  uint8x8_t v11 = malloc_type_calloc(1uLL, 32 * v10, 0x10100402BD90E94uLL);
  a1[2] = v11;
  if (!v11) {
    return 4294967188;
  }
  if (*((_WORD *)a1 + 7))
  {
    unint64_t v12 = 0;
    uint64_t v13 = (unsigned int *)&v8[2 * v10 + 40];
    do
    {
      uint64_t v14 = (uint64_t)a1[2] + 32 * v12;
      unsigned int v15 = bswap32(*v13);
      *(_DWORD *)(v14 + 24) = v15;
      int v16 = 2 * v15 + 2;
      *(_DWORD *)(v14 + 2++**(_DWORD **)(result + 8) = bswap32(v13[1]);
      uint64_t v17 = (int *)(v14 + 28);
      float v18 = malloc_type_malloc(4 * v16, 0xC0B35B73uLL);
      *(void *)uint64_t v14 = v18;
      if (v16 >= 1)
      {
        int v19 = 0;
        do
        {
          unsigned int v20 = *v13++;
          v18[(unsigned __int16)v19++] = bswap32(v20);
        }
        while (v16 > (unsigned __int16)v19);
      }
      BOOL v21 = malloc_type_malloc(*v17, 0x2789951CuLL);
      *(void *)(v14 + ++**(_DWORD **)(result + 8) = v21;
      memcpy(v21, v13, *v17);
      uint64_t v13 = (unsigned int *)((char *)v13 + *v17);
      *(void *)(v14 + 16) = 0;
      ++v12;
    }
    while (v12 < *((unsigned __int16 *)a1 + 7));
  }
  return 0;
}

CFStringRef sub_2161E09F0(const __CFURL *a1)
{
  CFStringRef v1 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 10, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(Mutable, v1);
  CFRelease(v1);
  CFArrayAppendValue(Mutable, @"ja");
  CFStringRef v4 = CFStringCreateByCombiningStrings(v2, Mutable, @"/");
  CFRelease(Mutable);
  return v4;
}

CFStringRef sub_2161E0A88(const __CFURL *a1)
{
  if (a1)
  {
    CFStringRef result = sub_2161E09F0(a1);
    if (result)
    {
      CFStringRef v2 = result;
      CFURLRef v3 = CFURLCreateWithFileSystemPath(0, result, kCFURLPOSIXPathStyle, 1u);
      CFRelease(v2);
      return (CFStringRef)v3;
    }
  }
  else
  {
    return sub_2162D9D28("ja");
  }
  return result;
}

__CFArray *sub_2161E0B00()
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D648, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D648))
  {
    sub_2161E550C(values, "n", "l");
    sub_2161E5560(v17);
    sub_2161E55BC(v18, (char *)L"gw", "g");
    sub_2161E5610(v19);
    sub_2161E55BC(v20, (char *)L"ch", "c");
    sub_2161E550C(v21, "y", "j");
    sub_2161E550C(v22, "j", "z");
    sub_2161E566C(v23);
    sub_2161E56C8(v24, "b", (char *)L"baa");
    sub_2161E571C(v25, (char *)L"cha", (char *)L"caa");
    sub_2161E5770(v26, (char *)L"cheui", (char *)L"ceoi");
    sub_2161E5770(v27, "c", "c");
    sub_2161E5770(v28, (char *)L"cheut", (char *)L"ceot");
    sub_2161E5770(v29, "c", "c");
    sub_2161E57C4(v30);
    sub_2161E56C8(v31, "d", (char *)L"daa");
    sub_2161E5820(v32, (char *)L"deui", "d");
    sub_2161E5820(v33, (char *)L"deun", "d");
    sub_2161E5820(v34, (char *)L"deut", "d");
    sub_2161E571C(v35, (char *)L"deu", (char *)L"doe");
    sub_2161E5820(v36, (char *)L"deuk", "d");
    sub_2161E5874(v37, (char *)L"deung", (char *)L"doeng");
    sub_2161E56C8(v38, (char *)L"fa", "f");
    sub_2161E56C8(v39, "g", (char *)L"gaa");
    sub_2161E5820(v40, (char *)L"geui", "g");
    sub_2161E571C(v41, (char *)L"geu", (char *)L"goe");
    sub_2161E5820(v42, (char *)L"geuk", "g");
    sub_2161E5874(v43, (char *)L"geung", (char *)L"goeng");
    sub_2161E58C8(v44, (char *)L"gwa", (char *)L"gwaa");
    sub_2161E56C8(v45, "h", (char *)L"haa");
    sub_2161E5820(v46, (char *)L"heui", "h");
    sub_2161E571C(v47, (char *)L"heu", (char *)L"hoe");
    sub_2161E5874(v48, (char *)L"heung", (char *)L"hoeng");
    sub_2161E5820(v49, (char *)L"jeui", "z");
    sub_2161E5820(v50, (char *)L"jeun", "z");
    sub_2161E5820(v51, (char *)L"jeut", "z");
    sub_2161E571C(v52, (char *)L"jeu", (char *)L"zoe");
    sub_2161E5820(v53, (char *)L"jeuk", "z");
    sub_2161E5874(v54, (char *)L"jeung", (char *)L"zoeng");
    sub_2161E56C8(v55, (char *)L"ka", "k");
    sub_2161E5820(v56, "k", (char *)L"keoi");
    sub_2161E571C(v57, "k", "k");
    sub_2161E5820(v58, "k", (char *)L"koek");
    sub_2161E5874(v59, "k", "k");
    sub_2161E58C8(v60, "k", "k");
    sub_2161E56C8(v61, (char *)L"la", "l");
    sub_2161E5820(v62, "l", (char *)L"leoi");
    sub_2161E5820(v63, "l", (char *)L"leon");
    sub_2161E5820(v64, "l", (char *)L"leot");
    sub_2161E571C(v65, "l", "l");
    sub_2161E5820(v66, "l", (char *)L"loek");
    sub_2161E5874(v67, "l", "l");
    sub_2161E56C8(v68, "m", (char *)L"maa");
    sub_2161E56C8(v69, (char *)L"na", "n");
    sub_2161E5820(v70, "n", (char *)L"neoi");
    sub_2161E5820(v71, "n", (char *)L"neot");
    sub_2161E58C8(v72, "n", "n");
    sub_2161E5874(v73, (char *)L"neung", (char *)L"noeng");
    sub_2161E56C8(v74, (char *)L"pa", "p");
    sub_2161E56C8(v75, "s", (char *)L"saa");
    sub_2161E5820(v76, (char *)L"seui", "s");
    sub_2161E5820(v77, (char *)L"seun", "s");
    sub_2161E5820(v78, (char *)L"seut", "s");
    sub_2161E571C(v79, (char *)L"seu", (char *)L"soe");
    sub_2161E5820(v80, (char *)L"seuk", "s");
    sub_2161E5874(v81, (char *)L"seung", (char *)L"soeng");
    sub_2161E56C8(v82, (char *)L"ta", "t");
    sub_2161E5820(v83, "t", (char *)L"teoi");
    sub_2161E5820(v84, "t", (char *)L"teon");
    sub_2161E571C(v85, "t", "t");
    sub_2161E56C8(v86, "w", (char *)L"waa");
    sub_2161E56C8(v87, (char *)L"ja", "z");
    sub_2161E56C8(v88, "y", (char *)L"jaa");
    sub_2161E5820(v89, (char *)L"yeuk", "j");
    sub_2161E5874(v90, (char *)L"yeung", (char *)L"joeng");
    sub_2161E5820(v91, (char *)L"yeui", "j");
    sub_2161E5820(v92, (char *)L"yeun", "j");
    sub_2161E56C8(v93, (char *)L"yu", "j");
    sub_2161E58C8(v94, "y", "j");
    sub_2161E58C8(v95, (char *)L"yut", (char *)L"jyut");
    sub_2161E56C8(v96, (char *)L"la", "n");
    sub_2161E5820(v97, "l", (char *)L"neoi");
    sub_2161E5820(v98, "l", (char *)L"neot");
    sub_2161E5874(v99, "l", (char *)L"noeng");
    sub_2161E1754((char *)values, 0x54uLL);
    for (uint64_t i = 498; i != -6; i -= 6)
      sub_2161DF1EC((uint64_t)&values[i]);
    __cxa_atexit((void (*)(void *))sub_2161E1848, &qword_26797D698, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D648);
  }
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0xAAAAAAAAAAAAAAABLL * ((qword_26797D6A0 - qword_26797D698) >> 4), MEMORY[0x263EFFF70]);
  uint64_t v2 = qword_26797D698;
  uint64_t v3 = qword_26797D6A0;
  if (qword_26797D698 != qword_26797D6A0)
  {
    CFStringRef v4 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    do
    {
      int v5 = *(char *)(v2 + 23);
      if (v5 >= 0) {
        int v6 = (const UniChar *)v2;
      }
      else {
        int v6 = *(const UniChar **)v2;
      }
      if (v5 >= 0) {
        CFIndex v7 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        CFIndex v7 = *(void *)(v2 + 8);
      }
      CFStringRef v8 = CFStringCreateWithCharacters(0, v6, v7);
      int v9 = *(char *)(v2 + 47);
      if (v9 >= 0) {
        uint64_t v10 = (const UniChar *)(v2 + 24);
      }
      else {
        uint64_t v10 = *(const UniChar **)(v2 + 24);
      }
      if (v9 >= 0) {
        CFIndex v11 = *(unsigned __int8 *)(v2 + 47);
      }
      else {
        CFIndex v11 = *(void *)(v2 + 32);
      }
      CFStringRef v12 = CFStringCreateWithCharacters(0, v10, v11);
      values[0] = (void *)v8;
      values[1] = (void *)v12;
      CFArrayRef v13 = CFArrayCreate(v0, (const void **)values, 2, v4);
      CFArrayAppendValue(Mutable, v13);
      if (v13) {
        CFRelease(v13);
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v8) {
        CFRelease(v8);
      }
      v2 += 48;
    }
    while (v2 != v3);
  }
  return Mutable;
}

void sub_2161E168C(_Unwind_Exception *a1)
{
  for (uint64_t i = 3984; i != -48; i -= 48)
    sub_2161DF1EC(v1 + i);
  __cxa_guard_abort(&qword_26797D648);
  _Unwind_Resume(a1);
}

char *sub_2161E1754(char *result, unint64_t a2)
{
  qword_26797D698 = 0;
  qword_26797D6A0 = 0;
  qword_26797D6A8 = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_21610CB04();
    }
    uint64_t v2 = result;
    uint64_t v3 = 3 * a2;
    uint64_t v4 = 48 * a2;
    int v5 = (char *)operator new(48 * a2);
    uint64_t v6 = 0;
    qword_26797D698 = (uint64_t)v5;
    qword_26797D6A0 = (uint64_t)v5;
    qword_26797D6A8 = (uint64_t)&v5[16 * v3];
    do
    {
      CFStringRef result = sub_2161E591C(&v5[v6], (long long *)&v2[v6]);
      v6 += 48;
    }
    while (v4 != v6);
    qword_26797D6A0 = (uint64_t)&v5[v6];
  }
  return result;
}

void sub_2161E180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **sub_2161E1848(void **a1)
{
  uint64_t v3 = a1;
  sub_2161E59B4(&v3);
  return a1;
}

__CFString *sub_2161E1880(const char *a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 1024);
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "/", 0x8000100u);
  CFStringAppend(Mutable, v3);
  if (a1) {
    CFStringAppendCString(Mutable, a1, 0x8000100u);
  }
  CFRelease(v3);
  return Mutable;
}

CFStringRef sub_2161E190C(CFURLRef url, CFStringRef pathComponent)
{
  if (pathComponent)
  {
    CFURLRef v2 = CFURLCreateCopyAppendingPathComponent(0, url, pathComponent, 0);
    CFURLRef v3 = CFURLCopyAbsoluteURL(v2);
    CFRelease(v2);
    if (v3)
    {
LABEL_3:
      CFStringRef v4 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
      CFRelease(v3);
      return v4;
    }
  }
  else
  {
    CFURLRef v3 = CFURLCopyAbsoluteURL(url);
    if (v3) {
      goto LABEL_3;
    }
  }
  return 0;
}

const __CFString *sub_2161E198C@<X0>(const __CFURL *a1@<X0>, const __CFString *a2@<X1>, void *a3@<X8>)
{
  CFStringRef result = sub_2161E190C(a1, a2);
  if (result)
  {
    CFIndex Length = CFStringGetLength(result);
    CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    operator new[]();
  }
  *a3 = 0;
  return result;
}

void sub_2161E1A30(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7C0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL sub_2161E1A54(const __CFURL *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)buffer, 1024)) {
    uint64_t v1 = (char *)buffer;
  }
  else {
    uint64_t v1 = (char *)&unk_2163A8923;
  }
  sub_21610B834(__p, v1);
  if (v6 >= 0) {
    CFURLRef v2 = __p;
  }
  else {
    CFURLRef v2 = (void **)__p[0];
  }
  int v3 = stat((const char *)v2, buffer);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3 == 0;
}

void sub_2161E1B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161E1B2C(const __CFURL *a1, const __CFString *a2, const __CFURL *a3, const __CFString *a4, unsigned int a5)
{
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFStringRef v12 = sub_2161E190C(a1, 0);
  if (v12)
  {
    MutableCFStringRef Copy = CFStringCreateMutableCopy(0, 0, v12);
    v24.length = CFStringGetLength(MutableCopy);
    v24.CFIndex location = 0;
    CFStringFindAndReplace(MutableCopy, @" ", @"\\ ", v24, 0);
  }
  else
  {
    MutableCFStringRef Copy = 0;
  }
  CFStringRef v14 = CFStringCreateWithFormat(v10, 0, @"-p -d %@ -N 2", MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  CFStringAppend(Mutable, v14);
  CFRelease(v12);
  if (a2)
  {
    CFStringRef v15 = sub_2161E190C(a1, a2);
    if (v15)
    {
      CFMutableStringRef v16 = CFStringCreateMutableCopy(0, 0, v15);
      v25.length = CFStringGetLength(v16);
      v25.CFIndex location = 0;
      CFStringFindAndReplace(v16, @" ", @"\\ ", v25, 0);
    }
    else
    {
      CFMutableStringRef v16 = 0;
    }
    CFStringRef v17 = CFStringCreateWithFormat(0, 0, @" -u %@", v16);
    if (v16) {
      CFRelease(v16);
    }
    CFStringAppend(Mutable, v17);
    CFRelease(v17);
    CFRelease(v15);
  }
  if (a4)
  {
    CFURLRef v18 = a3;
    if (!a3)
    {
      CFURLRef v19 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
      CFURLRef v18 = CFURLCreateCopyAppendingPathComponent(0, v19, @"/Library/Dictionaries", 1u);
      CFRelease(v19);
    }
    CFStringRef v20 = sub_2161E190C(v18, a4);
    if (v20)
    {
      CFMutableStringRef v21 = CFStringCreateMutableCopy(0, 0, v20);
      v26.length = CFStringGetLength(v21);
      v26.CFIndex location = 0;
      CFStringFindAndReplace(v21, @" ", @"\\ ", v26, 0);
    }
    else
    {
      CFMutableStringRef v21 = 0;
    }
    CFStringRef v22 = CFStringCreateWithFormat(0, 0, @" -g %@", v21);
    if (v21) {
      CFRelease(v21);
    }
    CFStringAppend(Mutable, v22);
    CFRelease(v22);
    CFRelease(v20);
    if (!a3 && v18) {
      CFRelease(v18);
    }
  }
  if (a5 <= 2) {
    CFStringAppend(Mutable, *((CFStringRef *)&off_26426B980 + (int)a5));
  }
  CFIndex Length = CFStringGetLength(Mutable);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  operator new[]();
}

void sub_2161E1E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  CFStringRef v4 = va_arg(va1, const void *);
  sub_2161868BC((const void **)va, 0);
  sub_2161868BC((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_2161E1EDC(char *cStr)
{
  CFStringRef v1 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  CFStringGetLength(v1);
  operator new[]();
}

void sub_2161E1F90(_Unwind_Exception *a1)
{
  void *v1 = 0;
  MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_2161E1FB8(const __CFString *a1)
{
  if (a1)
  {
    CFStringGetLength(a1);
    operator new[]();
  }
  operator new[]();
}

void sub_2161E2064(_Unwind_Exception *a1)
{
  void *v1 = 0;
  MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_2161E208C()
{
}

void sub_2161E2104(_Unwind_Exception *a1)
{
  void *v1 = 0;
  MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_2161E212C(const __CFString *a1@<X0>, UniChar **a2@<X8>)
{
  if (a1)
  {
    CFIndex Length = CFStringGetLength(a1);
    __int16 v5 = 0;
    sub_2161E5A38(a2, Length, &v5);
    if (Length)
    {
      v6.CFIndex location = 0;
      v6.length = Length;
      CFStringGetCharacters(a1, v6, *a2);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_2161E21A4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++**(_DWORD **)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161E21C0()
{
}

uint64_t sub_2161E223C@<X0>(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + ++**(_DWORD **)(result + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = sub_216185170(a3, a2, 0);
  if (a2)
  {
    if (*(char *)(a3 + 23) >= 0) {
      CFIndex v7 = (_WORD *)a3;
    }
    else {
      CFIndex v7 = *(_WORD **)a3;
    }
    uint64_t v8 = 2 * a2;
    do
    {
      uint64_t result = MEMORY[0x2166CB650](*a1);
      *v7++ = result;
      ++a1;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_2161E22B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161E22D0(char *a1)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  sub_2161E1EDC(a1);
}

void sub_2161E2344(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161E236C(const __CFString *a1)
{
}

void sub_2161E23D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

const UniChar *sub_2161E23F8(const __CFString *a1, CFIndex *a2, unsigned char *a3)
{
  CharactersPtr = CFStringGetCharactersPtr(a1);
  *a2 = CFStringGetLength(a1);
  if (!CharactersPtr) {
    operator new[]();
  }
  *a3 = 0;
  return CharactersPtr;
}

BOOL sub_2161E2498(CFStringRef theString)
{
  MutableCFStringRef Copy = CFStringCreateMutableCopy(0, 0, theString);
  Systeuint64_t m = CFLocaleGetSystem();
  CFStringLowercase(MutableCopy, System);
  BOOL v4 = CFEqual(theString, MutableCopy);
  CFRelease(MutableCopy);
  return v4;
}

uint64_t sub_2161E2500(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (result && a2)
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    unint64_t v7 = a2 - 1;
    char v9 = 0;
    do
    {
      if (v6 >= v7)
      {
        uint64_t v8 = 1;
      }
      else
      {
        uint64_t v8 = 1;
        if ((*(_WORD *)(v5 + 2 * v6) & 0xFC00) == 0xD800)
        {
          if ((*(_WORD *)(v5 + 2 * v6 + 2) & 0xFC00) == 0xDC00) {
            uint64_t v8 = 2;
          }
          else {
            uint64_t v8 = 1;
          }
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, char *))(a3 + 16))(a3, v6, v8, &v9);
      v6 += v8;
    }
    while (v6 < a2 && !v9);
  }
  return result;
}

CFStringRef sub_2161E25DC(const __CFString *result, int a2, uint64_t a3)
{
  if (result)
  {
    CFStringRef v5 = result;
    uint64_t result = (const __CFString *)CFStringGetLength(result);
    if (result)
    {
      CFStringRef v6 = result;
      if (a2) {
        CFIndex v7 = (CFIndex)&result[-1].length + 7;
      }
      else {
        CFIndex v7 = 0;
      }
      char v13 = 0;
      CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v5, v7);
      CFIndex location = RangeOfComposedCharactersAtIndex.location;
      CFIndex length = RangeOfComposedCharactersAtIndex.length;
      uint64_t result = (const __CFString *)(*(uint64_t (**)(uint64_t, CFIndex, CFIndex, char *))(a3 + 16))(a3, RangeOfComposedCharactersAtIndex.location, RangeOfComposedCharactersAtIndex.length, &v13);
      while (!v13)
      {
        if (a2)
        {
          CFIndex v11 = location - 1;
          if (location < 1) {
            return result;
          }
        }
        else
        {
          CFIndex v11 = location + length;
          if (location + length >= (uint64_t)v6) {
            return result;
          }
        }
        CFRange v12 = CFStringGetRangeOfComposedCharactersAtIndex(v5, v11);
        CFIndex location = v12.location;
        CFIndex length = v12.length;
        uint64_t result = (const __CFString *)(*(uint64_t (**)(uint64_t, CFIndex, CFIndex, char *))(a3 + 16))(a3, v12.location, v12.length, &v13);
      }
    }
  }
  return result;
}

CFURLRef sub_2161E26B0(const __CFURL *a1, const __CFString *a2)
{
  CFURLRef v2 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    if (CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)buffer, 1024)) {
      CFStringRef v5 = (char *)buffer;
    }
    else {
      CFStringRef v5 = (char *)&unk_2163A8923;
    }
    sub_21610B834(v8, v5);
    if (v9 < 0)
    {
      if (!v8[1])
      {
        CFURLRef v2 = 0;
LABEL_18:
        operator delete(v8[0]);
        return v2;
      }
      CFStringRef v6 = v8[0];
    }
    else
    {
      if (!v9) {
        return 0;
      }
      CFStringRef v6 = (const char *)v8;
    }
    if (stat(v6, buffer) < 0) {
      CFURLRef v2 = 0;
    }
    else {
      CFURLRef v2 = CFURLCreateCopyAppendingPathComponent(0, a1, a2, 1u);
    }
    if (v9 < 0) {
      goto LABEL_18;
    }
  }
  return v2;
}

void sub_2161E27B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFURLRef sub_2161E27E0(CFURLRef url, CFStringRef pathComponent)
{
  CFURLRef v2 = CFURLCreateCopyAppendingPathComponent(0, url, pathComponent, 1u);
  CFURLRef v3 = v2;
  if (v2 && !sub_2161E1A54(v2))
  {
    CFRelease(v3);
    return 0;
  }
  return v3;
}

uint64_t sub_2161E2834(int a1)
{
  int v1 = a1 - 1;
  if ((a1 - 1) >= 0x12 || ((0x3FFDBu >> v1) & 1) == 0) {
    abort();
  }
  return dword_21637A9B4[v1];
}

CFComparisonResult sub_2161E2874(const __CFLocale *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x263EFFCF0]);
  CFStringRef v3 = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x263EFFCF8]);
  if (CFStringCompare(Value, @"zh", 0))
  {
    if (CFStringCompare(Value, @"yue", 0))
    {
      CFComparisonResult result = CFStringCompare(Value, @"ja", 0);
      if (result)
      {
        if (CFStringCompare(Value, @"ko", 0))
        {
          if (CFStringCompare(Value, @"th", 0)) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 6;
          }
        }
        else
        {
          return 4;
        }
      }
    }
    else if (v3 && CFEqual(v3, @"Hant"))
    {
      return 5;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (!v3) {
      return 3;
    }
    if (CFEqual(v3, @"Hans")) {
      return 1;
    }
    if (CFStringCompare(v3, @"Hant", 0)) {
      return 3;
    }
    return 2;
  }
  return result;
}

CFLocaleRef sub_2161E29D0(unsigned int a1)
{
  int v1 = sub_2161E2A24(a1);
  CFStringRef v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
  CFLocaleRef v3 = CFLocaleCreate(0, v2);
  CFRelease(v2);
  return v3;
}

char *sub_2161E2A24(unsigned int a1)
{
  if (a1 >= 7) {
    abort();
  }
  return off_26426B998[a1];
}

const char *sub_2161E2A50(int a1, __int16 a2)
{
  int v2 = a1 - 1;
  CFComparisonResult result = "zh-Hans-Stroke";
  switch(v2)
  {
    case 0:
      BOOL v4 = "ja-Romaji";
      CFStringRef v5 = "ja-Kana";
      BOOL v6 = (a2 & 0x20) == 0;
      goto LABEL_13;
    case 1:
      BOOL v4 = "zh-Hans-Pinyin10";
      CFStringRef v5 = "zh-Hans-Pinyin";
      goto LABEL_12;
    case 3:
      BOOL v4 = "zh-Hant-Pinyin10";
      CFStringRef v5 = "zh-Hant-Pinyin";
      goto LABEL_12;
    case 4:
      return "zh-Hant-Zhuyin";
    case 6:
      return result;
    case 7:
      return "zh-Hant-Stroke";
    case 8:
      return "zh-Hant-Cangjie";
    case 9:
      return "zh-Hans-Wubixing";
    case 10:
      return "zh-Hans-HWR";
    case 11:
      return "zh-Hant-HWR";
    case 12:
      BOOL v4 = "yue-Hant-Pinyin10";
      CFStringRef v5 = "yue-Hant-Pinyin";
LABEL_12:
      BOOL v6 = (a2 & 0x4000) == 0;
LABEL_13:
      if (v6) {
        CFComparisonResult result = v5;
      }
      else {
        CFComparisonResult result = v4;
      }
      break;
    case 13:
      CFComparisonResult result = "yue-Hant-HWR";
      break;
    case 14:
      CFComparisonResult result = "yue-Hant-Stroke";
      break;
    case 15:
      CFComparisonResult result = "yue-Hant-Cangjie";
      break;
    case 16:
      CFComparisonResult result = "ko";
      break;
    default:
      CFComparisonResult result = "???";
      break;
  }
  return result;
}

uint64_t sub_2161E2BA8(char *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = sub_2161E2CB0(a1);
  if (v2)
  {
    return sub_2161E2834(v2);
  }
  else if (!strncmp("zh-Hans", a1, 7uLL))
  {
    return 1;
  }
  else if (!strncmp("zh-Hant", a1, 7uLL))
  {
    return 2;
  }
  else if (!strncmp("yue-Hant", a1, 8uLL))
  {
    return 5;
  }
  else
  {
    uint64_t result = strncmp("ja", a1, 2uLL);
    if (result)
    {
      if (!strncmp("ko", a1, 2uLL))
      {
        return 4;
      }
      else if (!strncmp("th", a1, 2uLL))
      {
        return 6;
      }
      else
      {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t sub_2161E2CB0(char *__s2)
{
  if (!__s2) {
    return 0;
  }
  if (!strncmp("zh-Hans-Pinyin", __s2, 0xEuLL)) {
    return 2;
  }
  if (!strncmp("zh-Hans-Stroke", __s2, 0xFuLL)) {
    return 7;
  }
  if (!strncmp("zh-Hant-Stroke", __s2, 0xFuLL)) {
    return 8;
  }
  if (!strncmp("zh-Hant-Pinyin", __s2, 0xEuLL)) {
    return 4;
  }
  if (!strncmp("yue-Hant-Pinyin", __s2, 0xFuLL)) {
    return 13;
  }
  if (!strncmp("yue-Hant-HWR", __s2, 0xCuLL)) {
    return 14;
  }
  uint64_t v2 = 15;
  if (strncmp("yue-Hant-Stroke", __s2, 0xFuLL))
  {
    uint64_t v2 = 16;
    if (strncmp("yue-Hant-Cangjie", __s2, 0x10uLL))
    {
      if (!strncmp("zh-Hant-Zhuyin", __s2, 0xEuLL))
      {
        return 5;
      }
      else if (!strncmp("zh-Hant-Cangjie", __s2, 0xEuLL))
      {
        return 9;
      }
      else if (!strncmp("ja", __s2, 2uLL))
      {
        return 1;
      }
      else if (!strncmp("ko", __s2, 2uLL))
      {
        return 17;
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

DIR *sub_2161E2E5C(const char *a1, uint64_t a2)
{
  char v6 = 0;
  uint64_t result = opendir(a1);
  if (result)
  {
    BOOL v4 = result;
    do
    {
      CFStringRef v5 = readdir(v4);
      if (!v5) {
        break;
      }
      (*(void (**)(uint64_t, char *, char *))(a2 + 16))(a2, v5->d_name, &v6);
    }
    while (!v6);
    return (DIR *)closedir(v4);
  }
  return result;
}

uint64_t sub_2161E2ED0(const __CFString *a1)
{
  uint64_t v4 = 0;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = sub_2161E2F90;
  v3[3] = &unk_264266CE8;
  v3[4] = &v4;
  sub_2161E25DC(a1, 0, (uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2161E2F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_2161E2F90(uint64_t result)
{
  return result;
}

uint64_t sub_2161E2FA8(const char *a1)
{
  uint64_t v2 = getenv(a1);
  if (v2) {
    return *v2 == 49;
  }

  return sub_216259270((uint64_t)a1, v3, v4);
}

const __CFString *sub_2161E2FFC@<X0>(const __CFString *result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    CFIndex Length = CFStringGetLength(result);
    CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    operator new[]();
  }
  *a2 = 0;
  return result;
}

void sub_2161E3080(_Unwind_Exception *a1)
{
  void *v1 = 0;
  MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_2161E30A8(void *__src@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D650, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D650))
  {
    sub_2161BC760();
  }
  sub_21617FAAC(__p, __src, a2);
  if ((v39 & 0x80u) == 0) {
    uint64_t v6 = (char *)__p;
  }
  else {
    uint64_t v6 = (char *)__p[0];
  }
  if ((v39 & 0x80u) == 0) {
    unint64_t v7 = v39;
  }
  else {
    unint64_t v7 = (unint64_t)__p[1];
  }
  qword_26797D7D0 = 0;
  if (!qword_26797D748) {
    goto LABEL_69;
  }
  sub_21612A1A4(a3, 2 * v7, 0);
  if (v7)
  {
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = 22;
    }
    else {
      std::string::size_type v8 = (a3->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize(a3, v8, 0);
    char v9 = &v6[2 * v7];
    long long v46 = xmmword_26797D790;
    long long v47 = unk_26797D7A0;
    long long v48 = xmmword_26797D7B0;
    long long v49 = unk_26797D7C0;
    long long v42 = xmmword_26797D750;
    long long v43 = unk_26797D760;
    __n128 v10 = (__n128)xmmword_26797D770;
    __n128 v11 = (__n128)unk_26797D780;
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      char v13 = (char *)a3;
    }
    else {
      char v13 = (char *)a3->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    CFStringRef v14 = &v13[size];
    long long v44 = xmmword_26797D770;
    long long v45 = unk_26797D780;
    while (1)
    {
      int v15 = (*(uint64_t (**)(uint64_t, long long *, char *, char *, char **, char *, char *, uint64_t *, __n128, __n128))(*(void *)qword_26797D748 + 24))(qword_26797D748, &v42, v6, v9, &v41, v13, v14, &v40, v10, v11);
      qword_26797D7D0 += (v41 - v6) >> 1;
      if (v41 == v6) {
        goto LABEL_67;
      }
      if (v15 != 1) {
        break;
      }
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFMutableStringRef v16 = a3;
      }
      else {
        CFMutableStringRef v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      uint64_t v17 = v40 - (void)v16;
      std::string::resize(a3, 2 * (v40 - (void)v16), 0);
      std::string::size_type v18 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v18 & 0x80u) == 0) {
        CFURLRef v19 = a3;
      }
      else {
        CFURLRef v19 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      char v13 = (char *)v19 + v17;
      if ((v18 & 0x80u) != 0) {
        std::string::size_type v18 = a3->__r_.__value_.__l.__size_;
      }
      CFStringRef v14 = (char *)v19 + v18;
      uint64_t v6 = v41;
      if (v41 >= v9) {
        goto LABEL_67;
      }
    }
    if (v15)
    {
      if (v15 != 3) {
        goto LABEL_67;
      }
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFStringRef v20 = (char *)a3;
      }
      else {
        CFStringRef v20 = (char *)a3->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a3, v13 - v20, 0);
      sub_216142434(a3, v6, v9);
    }
    else
    {
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFMutableStringRef v21 = a3;
      }
      else {
        CFMutableStringRef v21 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      std::string::resize(a3, v40 - (void)v21, 0);
    }
  }
  else
  {
    long long v46 = xmmword_26797D790;
    long long v47 = unk_26797D7A0;
    long long v48 = xmmword_26797D7B0;
    long long v49 = unk_26797D7C0;
    long long v42 = xmmword_26797D750;
    long long v43 = unk_26797D760;
    long long v44 = xmmword_26797D770;
    long long v45 = unk_26797D780;
  }
  std::string::size_type v22 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  std::string::size_type v23 = a3->__r_.__value_.__l.__size_;
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v24 = 22;
  }
  else {
    std::string::size_type v24 = (a3->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  std::string::resize(a3, v24, 0);
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v25 = v22;
  }
  else {
    std::string::size_type v25 = v23;
  }
  int v26 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  BOOL v27 = v26 < 0;
  if (v26 >= 0) {
    long long v28 = a3;
  }
  else {
    long long v28 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  long long v29 = (char *)v28 + v25;
  if (v27) {
    std::string::size_type v30 = a3->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v30 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  for (uint64_t i = &v29[v30]; ; uint64_t i = (char *)(v36 + v35))
  {
    int v32 = (*(uint64_t (**)(uint64_t, long long *, char *, char *, char **))(*(void *)qword_26797D748 + 40))(qword_26797D748, &v42, v29, i, &v41);
    if (v32 != 1) {
      break;
    }
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = (std::string::size_type)a3;
    }
    else {
      std::string::size_type v33 = a3->__r_.__value_.__r.__words[0];
    }
    unint64_t v34 = &v41[-v33];
    std::string::resize(a3, 2 * (void)&v41[-v33], 0);
    std::string::size_type v35 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v35 & 0x80u) == 0) {
      std::string::size_type v36 = (std::string::size_type)a3;
    }
    else {
      std::string::size_type v36 = a3->__r_.__value_.__r.__words[0];
    }
    long long v29 = &v34[v36];
    if ((v35 & 0x80u) != 0) {
      std::string::size_type v35 = a3->__r_.__value_.__l.__size_;
    }
  }
  if (!v32)
  {
    long long v29 = v41;
    goto LABEL_75;
  }
  if (v32 == 3)
  {
LABEL_75:
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = (std::string::size_type)a3;
    }
    else {
      std::string::size_type v37 = a3->__r_.__value_.__r.__words[0];
    }
    std::string::resize(a3, (std::string::size_type)&v29[-v37], 0);
    goto LABEL_79;
  }
LABEL_67:
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a3->__r_.__value_.__l.__data_);
  }
LABEL_69:
  if ((byte_26797D72F & 0x80000000) == 0)
  {
    if (byte_26797D72F)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = xmmword_26797D718;
      a3->__r_.__value_.__r.__words[2] = unk_26797D728;
      goto LABEL_79;
    }
LABEL_84:
    sub_2161BC91C("wstring_convert: to_bytes error");
  }
  if (!*((void *)&xmmword_26797D718 + 1)) {
    goto LABEL_84;
  }
  sub_21610A674(a3, (void *)xmmword_26797D718, *((unint64_t *)&xmmword_26797D718 + 1));
LABEL_79:
  if ((char)v39 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2161E351C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_2161E354C()
{
}

void sub_2161E3564(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_21610B834((void *)v15, (char *)&unk_2163A574F);
    __cxa_end_catch();
    JUMPOUT(0x2161E3478);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2161E3544);
}

void sub_2161E35A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  JUMPOUT(0x2161E3544);
}

void sub_2161E35AC()
{
}

void sub_2161E35C8(void *a1, int a2)
{
  if (a2) {
    sub_2160F7444(a1);
  }
  JUMPOUT(0x2161E3544);
}

char *sub_2161E35D8@<X0>(char *__s@<X0>, int __c@<W2>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  CFRange v12 = __s;
  if ((a3 & 0x8000000000000000) == 0)
  {
    CFStringRef v5 = __s;
    unint64_t v7 = 0;
    unint64_t v8 = (unint64_t)&__s[a3];
    do
    {
      __n128 v11 = 0;
      char v9 = (char *)memchr(v5, __c, v8 - (void)v5);
      if (v9) {
        __n128 v10 = v9;
      }
      else {
        __n128 v10 = (char *)v8;
      }
      __n128 v11 = v10;
      if ((unint64_t)v7 >= a4[2])
      {
        char __s = (char *)sub_2161E5ABC(a4, &v12, &v11);
        unint64_t v7 = __s;
      }
      else
      {
        char __s = (char *)sub_2161425AC(v7, v5, v10, v10 - v5);
        v7 += 24;
        a4[1] = (uint64_t)v7;
      }
      a4[1] = (uint64_t)v7;
      CFStringRef v5 = v11 + 1;
      CFRange v12 = v11 + 1;
    }
    while ((unint64_t)(v11 + 1) <= v8);
  }
  return __s;
}

void sub_2161E36A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613EFD0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161E36C8(CFStringRef theString)
{
  CFStringRef v1 = theString;
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (Length)
    {
      uint64_t v3 = Length;
      CFStringRef theStringa = v1;
      uint64_t v23 = 0;
      CFIndex v24 = Length;
      CharactersPtr = CFStringGetCharactersPtr(v1);
      CStringPtr = 0;
      CFMutableStringRef v21 = CharactersPtr;
      if (!CharactersPtr) {
        CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
      }
      int64_t v25 = 0;
      int64_t v26 = 0;
      std::string::size_type v22 = CStringPtr;
      if (v3 < 1)
      {
        LOBYTE(v1) = 1;
      }
      else
      {
        uint64_t v6 = 0;
        int64_t v7 = 0;
        LOBYTE(v1) = 0;
        int64_t v8 = 0;
        uint64_t v9 = 64;
        do
        {
          if ((unint64_t)v8 >= 4) {
            uint64_t v10 = 4;
          }
          else {
            uint64_t v10 = v8;
          }
          CFIndex v11 = v24;
          if (v24 <= v8)
          {
            UniChar v12 = 0;
          }
          else if (v21)
          {
            UniChar v12 = v21[v8 + v23];
          }
          else if (v22)
          {
            UniChar v12 = v22[v23 + v8];
          }
          else
          {
            if (v26 <= v8 || v7 > v8)
            {
              uint64_t v14 = v10 + v6;
              uint64_t v15 = v9 - v10;
              int64_t v16 = v8 - v10;
              CFIndex v17 = v16 + 64;
              if (v16 + 64 >= v24) {
                CFIndex v17 = v24;
              }
              int64_t v25 = v16;
              int64_t v26 = v17;
              if (v24 >= v15) {
                CFIndex v11 = v15;
              }
              v27.CFIndex length = v11 + v14;
              v27.CFIndex location = v16 + v23;
              CFStringGetCharacters(theStringa, v27, buffer);
              int64_t v7 = v25;
            }
            UniChar v12 = buffer[v8 - v7];
          }
          if ((unsigned __int16)(v12 - 48) >= 0xAu && (unsigned __int16)(v12 + 240) >= 0xAu) {
            break;
          }
          LOBYTE(v1) = ++v8 >= v3;
          --v6;
          ++v9;
        }
        while (v3 != v8);
      }
    }
    else
    {
      LOBYTE(v1) = 0;
    }
  }
  return v1 & 1;
}

BOOL sub_2161E386C(CFStringRef theString)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D658, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D658))
  {
    long long v22 = xmmword_21637A950;
    v23[0] = unk_21637A960;
    *(_OWORD *)((char *)v23 + 14) = unk_21637A96E;
    *(_OWORD *)buffer = *(_OWORD *)a0123456789_0;
    long long v21 = *(_OWORD *)&a0123456789_0[16];
    sub_2161A76DC((uint64_t)qword_26797D6C8, buffer, 39);
    __cxa_atexit((void (*)(void *))sub_2161A76D8, qword_26797D6C8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D658);
  }
  if (theString && (Length = CFStringGetLength(theString), (uint64_t v3 = Length) != 0))
  {
    CFStringRef v24 = theString;
    uint64_t v27 = 0;
    CFIndex v28 = Length;
    CharactersPtr = CFStringGetCharactersPtr(theString);
    if (CharactersPtr) {
      CStringPtr = 0;
    }
    else {
      CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
    }
    int64_t v26 = CStringPtr;
    int64_t v29 = 0;
    int64_t v30 = 0;
    if (v3 < 1)
    {
      return 1;
    }
    else
    {
      uint64_t v7 = 0;
      BOOL v5 = 0;
      int64_t v8 = 0;
      uint64_t v9 = 64;
      do
      {
        if ((unint64_t)v8 >= 4) {
          uint64_t v10 = 4;
        }
        else {
          uint64_t v10 = v8;
        }
        CFIndex v11 = v28;
        if (v28 <= v8)
        {
          UniChar v12 = 0;
        }
        else if (CharactersPtr)
        {
          UniChar v12 = CharactersPtr[v8 + v27];
        }
        else if (v26)
        {
          UniChar v12 = v26[v27 + v8];
        }
        else
        {
          int64_t v13 = v29;
          if (v30 <= v8 || v29 > v8)
          {
            uint64_t v15 = v10 + v7;
            uint64_t v16 = v9 - v10;
            int64_t v17 = v8 - v10;
            CFIndex v18 = v17 + 64;
            if (v17 + 64 >= v28) {
              CFIndex v18 = v28;
            }
            int64_t v29 = v17;
            int64_t v30 = v18;
            if (v28 >= v16) {
              CFIndex v11 = v16;
            }
            v32.CFIndex length = v11 + v15;
            v32.CFIndex location = v17 + v27;
            CFStringGetCharacters(v24, v32, buffer);
            int64_t v13 = v29;
          }
          UniChar v12 = buffer[v8 - v13];
        }
        UniChar v19 = v12;
        if (!sub_21618FCC0(qword_26797D6C8, &v19)) {
          break;
        }
        BOOL v5 = ++v8 >= v3;
        --v7;
        ++v9;
      }
      while (v3 != v8);
    }
  }
  else
  {
    return 0;
  }
  return v5;
}

void sub_2161E3AC8(_Unwind_Exception *a1)
{
}

void *sub_2161E3AE8@<X0>(const __CFString *a1@<X0>, void *a2@<X8>)
{
  sub_2161E2FFC(a1, &__s);
  if (__s)
  {
    sub_21610B834(a2, __s);
    JUMPOUT(0x2166CA7C0);
  }

  return sub_21610B834(a2, (char *)&unk_2163A574F);
}

void sub_2161E3B7C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7C0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_2161E3BA0(const __CFString *a1@<X0>, void *a2@<X8>)
{
  CFIndex Length = CFStringGetLength(a1);
  buffer = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_216184BFC((uint64_t)&buffer, Length);
  v8.CFIndex location = 0;
  v8.CFIndex length = Length;
  CFStringGetCharacters(a1, v8, buffer);
  sub_21612F5FC(a2, buffer, 2 * Length);
  if (buffer)
  {
    uint64_t v6 = buffer;
    operator delete(buffer);
  }
}

void sub_2161E3C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2161E3C40@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  int v2 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  uint64_t v3 = (void *)__str->__r_.__value_.__r.__words[0];
  unint64_t size = __str->__r_.__value_.__l.__size_;
  if (v2 >= 0) {
    BOOL v5 = __str;
  }
  else {
    BOOL v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v2 < 0) {
    std::string::size_type v6 = __str->__r_.__value_.__l.__size_;
  }
  uint64_t v7 = (char *)&v5[-1].__r_.__value_.__r.__words[2] + 7;
  uint64_t v8 = -1;
  while (v6)
  {
    int v9 = v7[v6--];
    ++v8;
    if (v9 == 47)
    {
      if (v6 != -1)
      {
        if (v8) {
          return std::string::basic_string(a2, __str, v6 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
        }
        return (std::string *)sub_21610B834(a2, (char *)&unk_2163A574F);
      }
      break;
    }
  }
  if (v2 < 0)
  {
    return (std::string *)sub_21610A674(a2, v3, size);
  }
  else
  {
    *a2 = *__str;
  }
  return __str;
}

uint64_t *sub_2161E3D1C(unsigned int a1)
{
  v56[2] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D660, memory_order_acquire) & 1) == 0)
  {
    unsigned int v6 = a1;
    int v7 = __cxa_guard_acquire(&qword_26797D660);
    a1 = v6;
    if (v7)
    {
      int v34 = 6422625;
      __int16 v35 = 99;
      sub_21618D52C(&v36, &v34, 3);
      unsigned __int16 v40 = 10123;
      memset(v41, 0, sizeof(v41));
      sub_216182F50(v41, v36, (uint64_t)v37, (v37 - (unsigned char *)v36) >> 1);
      int v30 = 6619236;
      __int16 v31 = 102;
      sub_21618D52C(&v32, &v30, 3);
      __int16 v42 = 10124;
      memset(v43, 0, sizeof(v43));
      sub_216182F50(v43, v32, (uint64_t)v33, (v33 - (unsigned char *)v32) >> 1);
      int v26 = 6815847;
      __int16 v27 = 105;
      sub_21618D52C(&v28, &v26, 3);
      __int16 v44 = 10125;
      memset(v45, 0, sizeof(v45));
      sub_216182F50(v45, v28, (uint64_t)v29, (v29 - (unsigned char *)v28) >> 1);
      int v22 = 7012458;
      __int16 v23 = 108;
      sub_21618D52C(&v24, &v22, 3);
      __int16 v46 = 10126;
      memset(v47, 0, sizeof(v47));
      sub_216182F50(v47, v24, (uint64_t)v25, (v25 - (unsigned char *)v24) >> 1);
      int v18 = 7209069;
      __int16 v19 = 111;
      sub_21618D52C(&v20, &v18, 3);
      __int16 v48 = 10127;
      memset(v49, 0, sizeof(v49));
      sub_216182F50(v49, v20, (uint64_t)v21, (v21 - (unsigned char *)v20) >> 1);
      uint64_t v39 = 0x73007200710070;
      sub_21618D52C(&v16, &v39, 4);
      __int16 v50 = 10128;
      memset(v51, 0, sizeof(v51));
      sub_216182F50(v51, v16, (uint64_t)v17, (v17 - (unsigned char *)v16) >> 1);
      int v12 = 7667828;
      __int16 v13 = 118;
      sub_21618D52C(&v14, &v12, 3);
      __int16 v52 = 10129;
      memset(v53, 0, sizeof(v53));
      sub_216182F50(v53, v14, (uint64_t)v15, (v15 - (unsigned char *)v14) >> 1);
      uint64_t v38 = 0x7A007900780077;
      sub_21618D52C(&__p, &v38, 4);
      __int16 v54 = 10130;
      v56[0] = 0;
      v56[1] = 0;
      uint64_t v55 = 0;
      sub_216182F50(&v55, __p, (uint64_t)v11, (v11 - (unsigned char *)__p) >> 1);
      sub_2161E5C4C(&v40, 8);
      for (uint64_t i = 0; i != -32; i -= 4)
      {
        int v9 = (void *)v56[i - 1];
        if (v9)
        {
          v56[i] = v9;
          operator delete(v9);
        }
      }
      if (__p)
      {
        CFIndex v11 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        uint64_t v15 = v14;
        operator delete(v14);
      }
      if (v16)
      {
        int64_t v17 = v16;
        operator delete(v16);
      }
      if (v20)
      {
        long long v21 = v20;
        operator delete(v20);
      }
      if (v24)
      {
        int64_t v25 = v24;
        operator delete(v24);
      }
      if (v28)
      {
        int64_t v29 = v28;
        operator delete(v28);
      }
      if (v32)
      {
        std::string::size_type v33 = v32;
        operator delete(v32);
      }
      if (v36)
      {
        std::string::size_type v37 = v36;
        operator delete(v36);
      }
      __cxa_atexit((void (*)(void *))sub_2161E4354, &xmmword_26797D6F0, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D660);
      a1 = v6;
    }
  }
  if (*((void *)&xmmword_26797D6F0 + 1))
  {
    uint8x8_t v1 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D6F0 + 8));
    v1.i16[0] = vaddlv_u8(v1);
    if (v1.u32[0] > 1uLL)
    {
      unint64_t v2 = a1;
      if (*((void *)&xmmword_26797D6F0 + 1) <= (unint64_t)a1) {
        unint64_t v2 = (unint64_t)a1 % *((void *)&xmmword_26797D6F0 + 1);
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(xmmword_26797D6F0) - 1) & a1;
    }
    unint64_t j = *(uint64_t ***)(xmmword_26797D6F0 + 8 * v2);
    if (j)
    {
      for (unint64_t j = (uint64_t **)*j; j; unint64_t j = (uint64_t **)*j)
      {
        unint64_t v4 = (unint64_t)j[1];
        if (v4 == a1)
        {
          if (*((unsigned __int16 *)j + 8) == a1) {
            break;
          }
        }
        else
        {
          if (v1.u32[0] > 1uLL)
          {
            if (v4 >= *((void *)&xmmword_26797D6F0 + 1)) {
              v4 %= *((void *)&xmmword_26797D6F0 + 1);
            }
          }
          else
          {
            v4 &= *((void *)&xmmword_26797D6F0 + 1) - 1;
          }
          if (v4 != v2) {
            goto LABEL_19;
          }
        }
      }
    }
  }
  else
  {
LABEL_19:
    unint64_t j = 0;
  }
  if (j) {
    return (uint64_t *)(j + 3);
  }
  else {
    return (uint64_t *)&unk_21637A980;
  }
}