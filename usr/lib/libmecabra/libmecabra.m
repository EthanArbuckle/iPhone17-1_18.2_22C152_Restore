double sub_2160F6FA0(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_2160F6FB0(uint64_t a1)
{
  return a1;
}

void *sub_2160F6FDC(void *result, uint64_t a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x20000000DLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:13: MARISA_NULL_ERROR: str == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v2 = result[5];
  if (v2) {
    *(_DWORD *)(v2 + 108) = 0;
  }
  uint64_t v3 = 0;
  while (*(unsigned __int8 *)(a2 + v3++))
    ;
  *result = a2;
  result[1] = v3 - 1;
  return result;
}

void *sub_2160F707C(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x200000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:21: MARISA_NULL_ERROR: (ptr == NULL)"
                   " && (length != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v3 = result[5];
  if (v3) {
    *(_DWORD *)(v3 + 108) = 0;
  }
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t sub_2160F7108(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2) {
    *(_DWORD *)(v2 + 108) = 0;
  }
  *(void *)(result + 16) = a2;
  return result;
}

void *sub_2160F711C(uint64_t a1)
{
  v1 = (uint64_t *)(a1 + 40);
  if (*(void *)(a1 + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x100000024;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:36: MARISA_STATE_ERROR: state_.get() != NULL";
    goto LABEL_8;
  }
  uint64_t v2 = operator new(0x70uLL, MEMORY[0x263F8C180]);
  if (v2)
  {
    *(_OWORD *)((char *)v2 + 25) = 0u;
    *uint64_t v2 = 0u;
    v2[1] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    *(_OWORD *)((char *)v2 + 73) = 0u;
    *((void *)v2 + 12) = 0;
    *((void *)v2 + 13) = 0;
  }
  result = sub_2160F7228(v1, (uint64_t)v2);
  if (!*v1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x800000026;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:38: MARISA_MEMORY_ERROR: state_.get() == NULL";
LABEL_8:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

void *sub_2160F7228(uint64_t *a1, uint64_t a2)
{
  if (a2 && *a1 == a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v4 = *a1;
  *a1 = a2;
  return sub_2160F7364(&v4);
}

void *sub_2160F72C4(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v2 = a1[5];
  a1[4] = 0;
  a1[5] = 0;
  return sub_2160F7364(&v2);
}

void sub_2160F7324(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2160F735C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void *sub_2160F7364(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = v2[6];
    if (v3) {
      MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
    }
    if (*v2) {
      MEMORY[0x2166CA7C0](*v2, 0x1000C8077774924);
    }
    MEMORY[0x2166CA800](v2, 0x1070C406A3FAA47);
  }
  return a1;
}

uint64_t sub_2160F73E0(uint64_t result)
{
  *(void *)result = 0;
  *(void *)(result + 8) = -1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  return result;
}

uint64_t sub_2160F73F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)-1) {
    munmap(v2, *(void *)(a1 + 24));
  }
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 != -1) {
    close(v3);
  }
  return a1;
}

void sub_2160F7444(void *a1)
{
}

uint64_t sub_2160F745C(long long *a1, char *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x200000037;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:55: MARISA_NULL_ERROR: "
                   "filename == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  *(void *)&long long v9 = 0;
  *((void *)&v9 + 1) = -1;
  long long v10 = 0uLL;
  int v11 = -1;
  sub_2160F7540((uint64_t)&v9, a2);
  long long v3 = v10;
  long long v4 = *a1;
  long long v5 = a1[1];
  *a1 = v9;
  a1[1] = v3;
  long long v9 = v4;
  long long v10 = v5;
  int v6 = *((_DWORD *)a1 + 8);
  *((_DWORD *)a1 + 8) = v11;
  int v11 = v6;
  return sub_2160F73F8((uint64_t)&v9);
}

void sub_2160F752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2160F7540(uint64_t a1, char *a2)
{
  if (stat(a2, &v8))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x90000008DLL;
    v7 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:141: MARISA_IO_ERROR: ::stat(filename, &st) != 0";
    goto LABEL_8;
  }
  *(void *)(a1 + 24) = v8.st_size;
  int v4 = open(a2, 0);
  *(_DWORD *)(a1 + 32) = v4;
  if (v4 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000092;
    v7 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:146: MARISA_IO_ERROR: fd_ == -1";
    goto LABEL_8;
  }
  result = mmap(0, *(void *)(a1 + 24), 1, 1, v4, 0);
  *(void *)(a1 + 8) = result;
  if (result == (void *)-1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000095;
    v7 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:149: MARISA_IO_ERROR: origin_ == MAP_FAILED";
LABEL_8:
    exception[3] = v7;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  *(void *)a1 = result;
  *(void *)(a1 + 16) = *(void *)(a1 + 24);
  return result;
}

uint64_t *sub_2160F76B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  void *result = *a2;
  *a2 = v2;
  uint64_t v4 = result[1];
  uint64_t v3 = result[2];
  uint64_t v5 = a2[2];
  result[1] = a2[1];
  result[2] = v5;
  a2[1] = v4;
  a2[2] = v3;
  uint64_t v6 = result[3];
  result[3] = a2[3];
  a2[3] = v6;
  LODWORD(v6) = *((_DWORD *)result + 8);
  *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return result;
}

uint64_t sub_2160F76FC(long long *a1, uint64_t a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x20000003FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:63: MARISA_NULL_ERROR: "
                   "(ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  long long v3 = *a1;
  long long v4 = a1[1];
  *(void *)a1 = a2;
  *((void *)a1 + 1) = -1;
  *((void *)a1 + 2) = a3;
  *((void *)a1 + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  int v5 = *((_DWORD *)a1 + 8);
  *((_DWORD *)a1 + 8) = -1;
  int v9 = v5;
  return sub_2160F73F8((uint64_t)v8);
}

uint64_t sub_2160F77AC(uint64_t *a1, unint64_t a2)
{
  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000047;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:71: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_8;
  }
  if (a1[2] < a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000048;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:72: MARISA_IO_ERROR: size > avail_";
LABEL_8:
    exception[3] = v4;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }

  return sub_2160F7888(a1, a2);
}

uint64_t sub_2160F7888(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000063;
    stat v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:99: MARISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  unint64_t v3 = a1[2];
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000064;
    stat v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:100: MARISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *a1 = v2 + a2;
  a1[2] = v5;
  return v2;
}

uint64_t sub_2160F7964(uint64_t result)
{
  *(void *)result = 0;
  *(_DWORD *)(result + 8) = -1;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

uint64_t sub_2160F797C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)) {
    fclose(*(FILE **)a1);
  }
  return a1;
}

FILE *sub_2160F79B0(uint64_t a1, char *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x20000001BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:27: MARISA_NULL_ERROR: "
                   "filename == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v6 = 0;
  int v7 = -1;
  uint64_t v8 = 0;
  char v9 = 0;
  sub_2160F7AC0((uint64_t)&v6, a2);
  result = *(FILE **)a1;
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  int v4 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v9;
  if (v4)
  {
    return (FILE *)fclose(result);
  }
  return result;
}

void sub_2160F7AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12) {
    fclose(a9);
  }
  _Unwind_Resume(exception_object);
}

FILE *sub_2160F7AC0(uint64_t a1, char *__filename)
{
  result = fopen(__filename, "rb");
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x90000005ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:94: MARISA_IO_ERROR: file == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

FILE *sub_2160F7B64(uint64_t a1, uint64_t a2)
{
  result = *(FILE **)a1;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(void *)(a1 + 16) = a2;
  int v4 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = 0;
  if (v4) {
    return (FILE *)fclose(result);
  }
  return result;
}

uint64_t sub_2160F7B90(uint64_t result, size_t __nitems)
{
  size_t v2 = __nitems;
  uint64_t v3 = result;
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!*(void *)result && *(_DWORD *)(result + 8) == -1 && !*(void *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x100000044;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:68: MARISA_STATE_ERROR: !is_open()";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      do
      {
        if (v2 >= 0x400) {
          size_t v4 = 1024;
        }
        else {
          size_t v4 = v2;
        }
        result = sub_2160F7CBC(v3, v6, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      return sub_2160F7CBC(result, v6, __nitems);
    }
  }
  return result;
}

uint64_t sub_2160F7CBC(uint64_t result, char *a2, size_t __nitems)
{
  size_t v3 = __nitems;
  size_t v4 = a2;
  uint64_t v5 = result;
  uint64_t v6 = *(FILE **)result;
  if (!*(void *)result && *(_DWORD *)(result + 8) == -1 && !*(void *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x100000071;
    char v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:113: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_19;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(result + 8) != -1)
    {
      while (1)
      {
        size_t v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        result = read(*(_DWORD *)(v5 + 8), v4, v7);
        if (result <= 0) {
          break;
        }
        v4 += result;
        v3 -= result;
        if (!v3) {
          return result;
        }
      }
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
      exception[2] = 0x900000081;
      char v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:129: MARISA_IO_ERROR: size_read <= 0";
LABEL_19:
      exception[3] = v9;
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    if (v6)
    {
      result = fread(a2, 1uLL, __nitems, v6);
      if (result != v3)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C6C5768;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
        exception[2] = 0x900000086;
        char v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:134: MARISA_IO_ERROR: ::fread"
             "(buf, 1, size, file_) != size";
        goto LABEL_19;
      }
    }
    else
    {
      result = *(void *)(result + 16);
      if (result)
      {
        result = std::istream::read();
        if ((*(unsigned char *)(result + *(void *)(*(void *)result - 24) + 32) & 5) != 0)
        {
          long long v10 = __cxa_allocate_exception(0x20uLL);
          *long long v10 = &unk_26C6C5768;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
          v10[2] = 0x90000008ALL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:138: MARISA_IO_ERROR: !"
                   "stream_->read(static_cast<char *>(buf), size)";
          __cxa_throw(v10, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
        }
      }
    }
  }
  return result;
}

void sub_2160F7EE8()
{
}

void sub_2160F7F64()
{
}

uint64_t sub_2160F7F78(uint64_t result, size_t __nitems)
{
  size_t v2 = __nitems;
  uint64_t v3 = result;
  __buf[128] = *MEMORY[0x263EF8340];
  if (!*(void *)result && *(_DWORD *)(result + 8) == -1 && !*(void *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000044;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:68: MARISA_STATE_ERROR: !is_open()";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      bzero(__buf, 0x400uLL);
      do
      {
        if (v2 >= 0x400) {
          size_t v4 = 1024;
        }
        else {
          size_t v4 = v2;
        }
        result = sub_2160F80B4(v3, (char *)__buf, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      __buf[0] = 0;
      __buf[1] = 0;
      return sub_2160F80B4(result, (char *)__buf, __nitems);
    }
  }
  return result;
}

uint64_t sub_2160F80B4(uint64_t result, char *__buf, size_t __nitems)
{
  size_t v3 = __nitems;
  size_t v4 = __buf;
  uint64_t v5 = result;
  uint64_t v6 = *(FILE **)result;
  if (!*(void *)result && *(_DWORD *)(result + 8) == -1 && !*(void *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000071;
    char v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:113: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_20;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(result + 8) != -1)
    {
      while (1)
      {
        size_t v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        result = write(*(_DWORD *)(v5 + 8), v4, v7);
        if (result <= 0) {
          break;
        }
        v4 += result;
        v3 -= result;
        if (!v3) {
          return result;
        }
      }
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
      exception[2] = 0x900000081;
      char v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:129: MARISA_IO_ERROR: size_written <= 0";
LABEL_20:
      exception[3] = v9;
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    if (v6)
    {
      if (fwrite(__buf, 1uLL, __nitems, v6) != __nitems)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C6C5768;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000086;
        char v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:134: MARISA_IO_ERROR: ::fwrit"
             "e(data, 1, size, file_) != size";
        goto LABEL_20;
      }
      result = fflush(*(FILE **)v5);
      if (result)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C6C5768;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000087;
        char v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:135: MARISA_IO_ERROR: ::fflush(file_) != 0";
        goto LABEL_20;
      }
    }
    else
    {
      result = *(void *)(result + 16);
      if (result)
      {
        result = std::ostream::write();
        if ((*(unsigned char *)(result + *(void *)(*(void *)result - 24) + 32) & 5) != 0)
        {
          long long v10 = __cxa_allocate_exception(0x20uLL);
          *long long v10 = &unk_26C6C5768;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
          v10[2] = 0x90000008BLL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:139: MARISA_IO_ERROR: !"
                   "stream_->write(static_cast<const char *>(data), size)";
          __cxa_throw(v10, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
        }
      }
    }
  }
  return result;
}

void sub_2160F8330()
{
}

void sub_2160F83AC()
{
}

uint64_t sub_2160F83C0(uint64_t a1)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 345) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 441) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 553) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 601) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 505) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 649) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 736) = 0;
  sub_216102D6C((_OWORD *)(a1 + 744));
  *(unsigned char *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(void *)(a1 + 1072) = 3;
  *(void *)(a1 + 1080) = 0x100000000200;
  *(_DWORD *)(a1 + 1088) = 0x20000;
  sub_2160F73E0(a1 + 1096);
  return a1;
}

void sub_2160F84E4(_Unwind_Exception *a1)
{
  uint64_t v9 = v1[126];
  if (v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  sub_2160FDFEC(v5);
  sub_2160F8574(v4);
  if (*v7) {
    MEMORY[0x2166CA7C0](*v7, 0x1000C8077774924);
  }
  if (*v6) {
    MEMORY[0x2166CA7C0](*v6, 0x1000C8077774924);
  }
  sub_2160F8624(v3);
  sub_2160F8624(v2);
  sub_2160F8624(v1);
  _Unwind_Resume(a1);
}

void *sub_2160F8574(void *a1)
{
  uint64_t v2 = a1[26];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = a1[20];
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = a1[14];
  if (v4) {
    MEMORY[0x2166CA7C0](v4, 0x1000C8077774924);
  }
  uint64_t v5 = a1[6];
  if (v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C8077774924);
  }
  if (*a1) {
    MEMORY[0x2166CA7C0](*a1, 0x1000C8077774924);
  }
  return a1;
}

void *sub_2160F8624(void *a1)
{
  uint64_t v2 = a1[20];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = a1[14];
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = a1[8];
  if (v4) {
    MEMORY[0x2166CA7C0](v4, 0x1000C8077774924);
  }
  if (*a1) {
    MEMORY[0x2166CA7C0](*a1, 0x1000C8077774924);
  }
  return a1;
}

void *sub_2160F86BC(void *a1)
{
  sub_2160F7458((uint64_t)(a1 + 137));
  uint64_t v2 = a1[126];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  sub_2160FDFEC(a1 + 125);
  uint64_t v3 = a1[119];
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = a1[113];
  if (v4) {
    MEMORY[0x2166CA7C0](v4, 0x1000C8077774924);
  }
  uint64_t v5 = a1[107];
  if (v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C8077774924);
  }
  uint64_t v6 = a1[99];
  if (v6) {
    MEMORY[0x2166CA7C0](v6, 0x1000C8077774924);
  }
  uint64_t v7 = a1[93];
  if (v7) {
    MEMORY[0x2166CA7C0](v7, 0x1000C8077774924);
  }
  uint64_t v8 = a1[84];
  if (v8) {
    MEMORY[0x2166CA7C0](v8, 0x1000C8077774924);
  }
  uint64_t v9 = a1[78];
  if (v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  uint64_t v10 = a1[72];
  if (v10) {
    MEMORY[0x2166CA7C0](v10, 0x1000C8077774924);
  }
  uint64_t v11 = a1[66];
  if (v11) {
    MEMORY[0x2166CA7C0](v11, 0x1000C8077774924);
  }
  uint64_t v12 = a1[60];
  if (v12) {
    MEMORY[0x2166CA7C0](v12, 0x1000C8077774924);
  }
  uint64_t v13 = a1[52];
  if (v13) {
    MEMORY[0x2166CA7C0](v13, 0x1000C8077774924);
  }
  uint64_t v14 = a1[46];
  if (v14) {
    MEMORY[0x2166CA7C0](v14, 0x1000C8077774924);
  }
  uint64_t v15 = a1[40];
  if (v15) {
    MEMORY[0x2166CA7C0](v15, 0x1000C8077774924);
  }
  uint64_t v16 = a1[34];
  if (v16) {
    MEMORY[0x2166CA7C0](v16, 0x1000C8077774924);
  }
  uint64_t v17 = a1[26];
  if (v17) {
    MEMORY[0x2166CA7C0](v17, 0x1000C8077774924);
  }
  uint64_t v18 = a1[20];
  if (v18) {
    MEMORY[0x2166CA7C0](v18, 0x1000C8077774924);
  }
  uint64_t v19 = a1[14];
  if (v19) {
    MEMORY[0x2166CA7C0](v19, 0x1000C8077774924);
  }
  uint64_t v20 = a1[8];
  if (v20) {
    MEMORY[0x2166CA7C0](v20, 0x1000C8077774924);
  }
  if (*a1) {
    MEMORY[0x2166CA7C0](*a1, 0x1000C8077774924);
  }
  return a1;
}

void *sub_2160F8920(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = 3;
  uint64_t v7 = 0x100000000200;
  int v8 = 0x20000;
  sub_2160FBEEC(&v6, a3);
  v9[0] = v6;
  v9[1] = v7;
  int v10 = v8;
  sub_2160F83C0((uint64_t)&v6);
  sub_2160F89D4((uint64_t)&v6, a2, (uint64_t)v9);
  sub_2160F8D28(a1, (uint64_t)&v6);
  return sub_2160F86BC(&v6);
}

void sub_2160F89C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2160F86BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2160F89D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v31, 0, 41);
  sub_2160FA424((uint64_t *)v31, *(void *)(a2 + 88));
  if (*(void *)(a2 + 88))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((void *)&v31[0] + 1) + v6;
      uint64_t v9 = *(void *)(*(void *)(a2 + 48) + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7;
      int v10 = *(_DWORD *)(v9 + 8);
      *(void *)uint64_t v8 = *(void *)v9;
      *(_DWORD *)(v8 + 8) = v10;
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
      ++v7;
      v6 += 24;
    }
    while (v7 < *(void *)(a2 + 88));
  }
  long long v29 = 0u;
  memset(v30, 0, 25);
  sub_2160FA4B4(a1, (uint64_t *)v31, &v29, a3, 1);
  memset(v28, 0, 41);
  sub_2160FA698((uint64_t *)v28, v30[1]);
  unint64_t v11 = *((void *)&v28[1] + 1);
  if (*((void *)&v28[1] + 1))
  {
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)&v29 + 1);
    uint64_t v14 = (_DWORD *)(*((void *)&v28[0] + 1) + 4);
    do
    {
      *(v14 - 1) = *(_DWORD *)(v13 + 4 * v12);
      *uint64_t v14 = v12++;
      v14 += 2;
    }
    while (v11 != v12);
  }
  uint64_t v15 = v29;
  long long v29 = 0u;
  memset(v30, 0, 25);
  if (v15)
  {
    MEMORY[0x2166CA7C0](v15, 0x1000C8077774924);
    unint64_t v11 = *((void *)&v28[1] + 1);
  }
  unint64_t v16 = 126 - 2 * __clz(v11);
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  sub_216100868(*((uint64_t *)&v28[0] + 1), (unsigned int *)(*((void *)&v28[0] + 1) + 8 * v11), (uint64_t)&v32, v17, 1);
  if (*((void *)&v28[1] + 1))
  {
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      for (uint64_t i = *((void *)&v28[0] + 1); ; uint64_t i = *((void *)&v28[0] + 1))
      {
        unint64_t v21 = *(unsigned int *)(i + 8 * v18);
        if (v19 >= v21) {
          break;
        }
        sub_2160FA70C((uint64_t *)(a1 + 208), 0);
        ++v19;
      }
      if (v19 == v21)
      {
        sub_2160FA70C((uint64_t *)(a1 + 208), 1);
        ++v19;
      }
      ++v18;
    }
    while (v18 < *((void *)&v28[1] + 1));
  }
  else
  {
    unint64_t v19 = 0;
  }
  for (; v19 < *(void *)(a1 + 648); ++v19)
    sub_2160FA70C((uint64_t *)(a1 + 208), 0);
  v22 = (uint64_t *)(a1 + 208);
  sub_2160FA70C(v22, 0);
  sub_2160FA804((uint64_t)v22, 0, 1);
  if (*(void *)(a2 + 88))
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    do
    {
      unint64_t v25 = *(unsigned int *)(*((void *)&v28[0] + 1) + v23 + 4);
      uint64_t v26 = *(void *)(*(void *)(a2 + 48) + ((v25 >> 5) & 0x7FFFFF8));
      *(_DWORD *)(v26 + 16 * v25 + 12) = sub_216104298((uint64_t)v22, *(unsigned int *)(*((void *)&v28[0] + 1) + v23));
      ++v24;
      v23 += 8;
    }
    while (v24 < *(void *)(a2 + 88));
  }
  if (*(void *)&v28[0]) {
    MEMORY[0x2166CA7C0](*(void *)&v28[0], 0x1000C8077774924);
  }
  if ((void)v29) {
    MEMORY[0x2166CA7C0](v29, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v31[0];
  if (*(void *)&v31[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v31[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2160F8CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15) {
    MEMORY[0x2166CA7C0](a15, 0x1000C8077774924);
  }
  if (a21) {
    MEMORY[0x2166CA7C0](a21, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2160F8D28(uint64_t a1, uint64_t a2)
{
  sub_2160FA358((uint64_t *)a1, (uint64_t *)a2);
  sub_2160FA358((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  sub_2160FA358((uint64_t *)(a1 + 416), (uint64_t *)(a2 + 416));
  sub_2160FA3D0((uint64_t *)(a1 + 624), (uint64_t *)(a2 + 624));
  sub_2160FA3D0((uint64_t *)(a1 + 672), (uint64_t *)(a2 + 672));
  uint64_t v4 = *(void *)(a1 + 720);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a2 + 720) = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 728);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_DWORD *)(a2 + 728) = v4;
  uint64_t v5 = *(void *)(a1 + 736);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a2 + 736) = v5;
  sub_21610337C((uint64_t *)(a1 + 744), (uint64_t *)(a2 + 744));
  uint64_t v6 = *(void *)(a1 + 1000);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a2 + 1000) = v6;
  sub_2160FA3D0((uint64_t *)(a1 + 1008), (uint64_t *)(a2 + 1008));
  uint64_t v7 = *(void *)(a1 + 1056);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a2 + 1056) = v7;
  uint64_t v8 = *(void *)(a1 + 1064);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a2 + 1064) = v8;
  uint64_t v9 = *(void *)(a1 + 1072);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a2 + 1072) = v9;
  uint64_t v10 = *(void *)(a1 + 1080);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = v10;
  LODWORD(v9) = *(_DWORD *)(a1 + 1088);
  *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
  *(_DWORD *)(a2 + 1088) = v9;

  return sub_2160F76B8((uint64_t *)(a1 + 1096), (uint64_t *)(a2 + 1096));
}

void *sub_2160F8E40(uint64_t a1, uint64_t *a2)
{
  sub_2160F8EC8((uint64_t)v5, a2);
  sub_2160F83C0((uint64_t)v5);
  sub_2160F8F88((uint64_t)v5, a2);
  sub_2160F76B8(v6, a2);
  sub_2160F8D28(a1, (uint64_t)v5);
  return sub_2160F86BC(v5);
}

void sub_2160F8EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_2160F8EC8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (unsigned char *)sub_2160F7888(a2, 0x10uLL);
  if (*result != 87) {
    goto LABEL_7;
  }
  uint64_t v3 = 1u;
  do
  {
    if (v3 == 16) {
      return result;
    }
    int v4 = result[v3];
    int v5 = aWeLoveMarisa[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h:21: MARISA_FORMAT_ERRO"
                   "R: !test_header(ptr)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

double sub_2160F8F88(uint64_t a1, uint64_t *a2)
{
  sub_2160FB220((uint64_t *)a1, a2);
  sub_2160FB220((uint64_t *)(a1 + 208), a2);
  sub_2160FB220((uint64_t *)(a1 + 416), a2);
  sub_2160FB30C((long long *)(a1 + 624), a2);
  sub_2160FB3CC((long long *)(a1 + 672), a2);
  sub_2161033BC(a1 + 744, a2);
  if (*(void *)(a1 + 472) && !*(void *)(a1 + 768))
  {
    int v4 = operator new(0x470uLL, MEMORY[0x263F8C180]);
    uint64_t v5 = (uint64_t)v4;
    if (v4) {
      sub_2160F83C0((uint64_t)v4);
    }
    sub_2160FAC20((void *)(a1 + 1000), v5);
    uint64_t v6 = *(void *)(a1 + 1000);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x80000021ELL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:542: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    sub_2160F8F88(v6, a2);
  }
  sub_2160FB4C8((long long *)(a1 + 1008), a2);
  *(void *)(a1 + 1056) = *(void *)(a1 + 1032) - 1;
  *(void *)(a1 + 1064) = *(unsigned int *)sub_2160F7888(a2, 4uLL);
  unsigned int v7 = *(_DWORD *)sub_2160F7888(a2, 4uLL);
  uint64_t v10 = 3;
  *(void *)&double v11 = 0x100000000200;
  int v12 = 0x20000;
  sub_2160FBEEC(&v10, v7);
  *(void *)(a1 + 1072) = v10;
  double result = v11;
  *(double *)(a1 + 1080) = v11;
  *(_DWORD *)(a1 + 1088) = v12;
  return result;
}

void sub_2160F9124(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7E0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void *sub_2160F9140(uint64_t a1, uint64_t a2)
{
  sub_2160F91B8((int)v5, a2);
  sub_2160F83C0((uint64_t)v5);
  sub_2160F92BC((uint64_t)v5, a2);
  sub_2160F8D28(a1, (uint64_t)v5);
  return sub_2160F86BC(v5);
}

void sub_2160F91A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2160F91B8(int a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t result = sub_2160F7CBC(a2, v7, 0x10uLL);
  if (v7[0] != 87) {
    goto LABEL_7;
  }
  uint64_t v3 = 1u;
  do
  {
    if (v3 == 16) {
      return result;
    }
    int v4 = v7[v3];
    int v5 = aWeLoveMarisa[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA0000001ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h:26: MARISA_FORMAT_ERRO"
                   "R: !test_header(buf)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

double sub_2160F92BC(uint64_t a1, uint64_t a2)
{
  sub_2160FB588((uint64_t *)a1, a2);
  sub_2160FB588((uint64_t *)(a1 + 208), a2);
  sub_2160FB588((uint64_t *)(a1 + 416), a2);
  sub_2160FB674((long long *)(a1 + 624), a2);
  sub_2160FB734((long long *)(a1 + 672), a2);
  sub_216103528(a1 + 744, a2);
  if (*(void *)(a1 + 472) && !*(void *)(a1 + 768))
  {
    int v4 = operator new(0x470uLL, MEMORY[0x263F8C180]);
    uint64_t v5 = (uint64_t)v4;
    if (v4) {
      sub_2160F83C0((uint64_t)v4);
    }
    sub_2160FAC20((void *)(a1 + 1000), v5);
    uint64_t v6 = *(void *)(a1 + 1000);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x800000238;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:568: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    sub_2160F92BC(v6, a2);
  }
  sub_2160FB830((long long *)(a1 + 1008), a2);
  *(void *)(a1 + 1056) = *(void *)(a1 + 1032) - 1;
  LODWORD(v10) = 0;
  sub_2160F7CBC(a2, (char *)&v10, 4uLL);
  *(void *)(a1 + 1064) = v10;
  unsigned int v9 = 0;
  sub_2160F7CBC(a2, (char *)&v9, 4uLL);
  uint64_t v10 = 3;
  *(void *)&double v11 = 0x100000000200;
  int v12 = 0x20000;
  sub_2160FBEEC(&v10, v9);
  *(void *)(a1 + 1072) = v10;
  double result = v11;
  *(double *)(a1 + 1080) = v11;
  *(_DWORD *)(a1 + 1088) = v12;
  return result;
}

void sub_2160F9468(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7E0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t sub_2160F9484(uint64_t a1, uint64_t a2)
{
  sub_2160F80B4(a2, "We love Marisa.", 0x10uLL);

  return sub_2160F94D4(a1, a2);
}

uint64_t sub_2160F94D4(uint64_t a1, uint64_t a2)
{
  sub_2160FDB20(a1, a2);
  sub_2160FDB20(a1 + 208, a2);
  sub_2160FDB20(a1 + 416, a2);
  sub_216102C84(a1 + 624, a2);
  sub_2160FDF74(a1 + 672, a2);
  sub_216103694(a1 + 744, a2);
  uint64_t v4 = *(void *)(a1 + 1000);
  if (v4) {
    sub_2160F94D4(v4, a2);
  }
  sub_2160FDCE0(a1 + 1008, a2);
  int __buf = *(void *)(a1 + 1064);
  sub_2160F80B4(a2, (char *)&__buf, 4uLL);
  int v6 = *(_DWORD *)(a1 + 1084) | *(_DWORD *)(a1 + 1072) | *(_DWORD *)(a1 + 1088);
  return sub_2160F80B4(a2, (char *)&v6, 4uLL);
}

uint64_t sub_2160F959C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 108) = 0;
  while (1)
  {
    unint64_t v5 = *(void *)(a2 + 8);
    if (v5 <= *(unsigned int *)(v4 + 100)) {
      break;
    }
    if ((sub_2160F9638(a1, (uint64_t *)a2) & 1) == 0) {
      return 0;
    }
  }
  unint64_t v6 = *(unsigned int *)(v4 + 96);
  if ((*(void *)(*(void *)(a1 + 224) + ((v6 >> 3) & 0x1FFFFFF8)) >> v6))
  {
    *(void *)(a2 + 24) = *(void *)a2;
    *(_DWORD *)(a2 + 32) = v5;
    *(_DWORD *)(a2 + 36) = sub_216104298(a1 + 208, v6);
    return 1;
  }
  return 0;
}

uint64_t sub_2160F9638(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[5];
  unint64_t v5 = *(unsigned int *)(v4 + 96);
  uint64_t v6 = *(unsigned int *)(v4 + 100);
  unint64_t v7 = (*(unsigned __int8 *)(*a2 + v6) ^ (32 * v5) ^ v5) & *(void *)(a1 + 1056);
  uint64_t v8 = *(void *)(a1 + 1024);
  if (v5 != *(_DWORD *)(v8 + 12 * v7))
  {
    unint64_t v10 = sub_2161043E0((void *)a1, v5);
    uint64_t v11 = *(void *)(a1 + 16);
    if ((*(void *)(v11 + (((v10 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 + 1)))
    {
      unsigned int v12 = v10 - *(_DWORD *)(v4 + 96);
      *(_DWORD *)(v4 + 96) = v12;
      unint64_t v13 = v10 + 2;
      uint64_t v14 = 0xFFFFFFFFLL;
      while (1)
      {
        uint64_t v15 = v12;
        if ((*(void *)(*(void *)(a1 + 432) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) >> v12))
        {
          if (v14 == 0xFFFFFFFFLL)
          {
            uint64_t v14 = sub_216104298(a1 + 416, v12);
            uint64_t v15 = *(unsigned int *)(v4 + 96);
          }
          else
          {
            ++v14;
          }
          int v17 = *(_DWORD *)(v4 + 100);
          uint64_t v18 = *(void *)(a1 + 720);
          unint64_t v19 = (unint64_t)(v18 * v14) >> 6;
          uint64_t v20 = (v18 * v14) & 0x3F;
          unint64_t v21 = v20 + v18;
          uint64_t v22 = *(void *)(a1 + 688);
          uint64_t v23 = *(void *)(v22 + 8 * v19) >> v20;
          if (v21 > 0x40) {
            v23 |= (2 * *(void *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu);
          }
          unint64_t v24 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v15) | ((*(_DWORD *)(a1 + 728) & v23) << 8);
          uint64_t v25 = *(void *)(a1 + 1000);
          if (v25)
          {
            if (sub_2160FBA98(v25, a2, v24)) {
              return 1;
            }
          }
          else if (sub_216103760((void *)(a1 + 744), a2, v24))
          {
            return 1;
          }
          if (*(_DWORD *)(v4 + 100) != v17) {
            return 0;
          }
          unsigned int v12 = *(_DWORD *)(v4 + 96);
          uint64_t v11 = *(void *)(a1 + 16);
        }
        else
        {
          uint64_t v16 = *(unsigned int *)(v4 + 100);
          if (*(unsigned __int8 *)(*(void *)(a1 + 640) + v12) == *(unsigned __int8 *)(*a2 + v16))
          {
            *(_DWORD *)(v4 + 100) = v16 + 1;
            return 1;
          }
        }
        *(_DWORD *)(v4 + 96) = ++v12;
        uint64_t v26 = *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
        ++v13;
        if ((v26 & 1) == 0) {
          return 0;
        }
      }
    }
    return 0;
  }
  unint64_t v9 = *(unsigned int *)(v8 + 12 * v7 + 8);
  if (v9 > 0xFFFFFEFF)
  {
    *(_DWORD *)(v4 + 100) = v6 + 1;
    goto LABEL_24;
  }
  uint64_t v27 = *(void *)(a1 + 1000);
  if (v27)
  {
    if (sub_2160FBA98(v27, a2, v9)) {
      goto LABEL_24;
    }
    return 0;
  }
  if ((sub_216103760((void *)(a1 + 744), a2, v9) & 1) == 0) {
    return 0;
  }
LABEL_24:
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(*(void *)(a1 + 1024) + 12 * v7 + 4);
  return 1;
}

unint64_t sub_2160F987C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  if (v3 >= *(void *)(a1 + 264))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x300000049;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:73: MARISA_BOUND_"
                   "ERROR: agent.query().id() >= size()";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(v5 + 24) = 0;
  unint64_t v6 = *(void *)(v5 + 32);
  if (v6 <= 0x1F)
  {
    if (v6 <= 0x10) {
      size_t v7 = 32;
    }
    else {
      size_t v7 = 2 * v6;
    }
    sub_2160FC1A8((uint64_t *)v5, v7);
    unint64_t v3 = *(void *)(a2 + 16);
  }
  *(_DWORD *)(v5 + 108) = 0;
  unint64_t result = sub_21610464C((void *)(a1 + 208), v3);
  *(_DWORD *)(v5 + 96) = result;
  if (!result) {
    goto LABEL_30;
  }
  while (1)
  {
    if ((*(void *)(*(void *)(a1 + 432) + ((result >> 3) & 0x1FFFFFF8)) >> result))
    {
      uint64_t v9 = *(void *)(v5 + 24);
      int v10 = *(unsigned __int8 *)(*(void *)(a1 + 640) + result);
      uint64_t v11 = sub_216104298(a1 + 416, result);
      uint64_t v12 = *(void *)(a1 + 720);
      unint64_t v13 = (unint64_t)(v12 * v11) >> 6;
      uint64_t v14 = (v12 * v11) & 0x3F;
      unint64_t v15 = v14 + v12;
      uint64_t v16 = *(void *)(a1 + 688);
      uint64_t v17 = *(void *)(v16 + 8 * v13) >> v14;
      if (v15 > 0x40) {
        v17 |= (2 * *(void *)(v16 + 8 * v13 + 8)) << (v14 ^ 0x3Fu);
      }
      unint64_t v18 = v10 | ((*(_DWORD *)(a1 + 728) & v17) << 8);
      uint64_t v19 = *(void *)(a1 + 1000);
      if (v19) {
        unint64_t result = (unint64_t)sub_2160FB8F0(v19, a2, v18);
      }
      else {
        unint64_t result = (unint64_t)sub_2161036D4((uint64_t *)(a1 + 744), a2, v18);
      }
      uint64_t v20 = *(void *)(v5 + 24);
      if (v9 != v20)
      {
        uint64_t v21 = *(void *)(v5 + 8);
        uint64_t v22 = (unsigned char *)(v21 + v20 - 1);
        if ((unint64_t)v22 > v21 + v9)
        {
          unint64_t v23 = v21 + v9 + 1;
          do
          {
            char v24 = *(unsigned char *)(v23 - 1);
            *(unsigned char *)(v23 - 1) = *v22;
            *v22-- = v24;
            BOOL v25 = v23++ >= (unint64_t)v22;
          }
          while (!v25);
        }
      }
    }
    else
    {
      char v35 = *(unsigned char *)(*(void *)(a1 + 640) + result);
      unint64_t result = (unint64_t)sub_2160F9B00((uint64_t *)v5, &v35);
    }
    unint64_t v26 = *(unsigned int *)(v5 + 96);
    if (*(void *)(a1 + 1064) >= v26) {
      break;
    }
    unint64_t result = sub_21610464C((void *)a1, v26) + ~(unint64_t)*(unsigned int *)(v5 + 96);
    *(_DWORD *)(v5 + 96) = result;
  }
  unint64_t v27 = *(void *)(v5 + 8);
  uint64_t v28 = *(void *)(v5 + 24);
  long long v29 = (unsigned char *)(v27 + v28 - 1);
  if (v28) {
    BOOL v30 = (unint64_t)v29 > v27;
  }
  else {
    BOOL v30 = 0;
  }
  if (v30)
  {
    unint64_t v31 = v27 + 1;
    do
    {
      char v32 = *(unsigned char *)(v31 - 1);
      *(unsigned char *)(v31 - 1) = *v29;
      *v29-- = v32;
      BOOL v25 = v31++ >= (unint64_t)v29;
    }
    while (!v25);
LABEL_30:
    unint64_t v27 = *(void *)(v5 + 8);
    uint64_t v28 = *(void *)(v5 + 24);
  }
  *(void *)(a2 + 24) = v27;
  uint64_t v33 = *(void *)(a2 + 16);
  *(_DWORD *)(a2 + 32) = v28;
  *(_DWORD *)(a2 + 36) = v33;
  return result;
}

uint64_t *sub_2160F9B00(uint64_t *result, unsigned char *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[3];
  uint64_t v5 = result[4];
  size_t v6 = v4 + 1;
  if (v5 < (unint64_t)(v4 + 1))
  {
    uint64_t v7 = 2 * v5;
    if (v5 < 0) {
      uint64_t v7 = -1;
    }
    if (v5 <= v6 >> 1) {
      size_t v8 = v6;
    }
    else {
      size_t v8 = v7;
    }
    unint64_t result = (uint64_t *)sub_2160FC1A8(result, v8);
    uint64_t v4 = v3[3];
  }
  *(unsigned char *)(v3[1] + v4) = *a2;
  ++v3[3];
  return result;
}

uint64_t sub_2160F9B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int **)(a2 + 40);
  unsigned int v5 = v4[27];
  if (v5 == 1)
  {
LABEL_5:
    while (*(void *)(a2 + 8) > (unint64_t)v4[25] && (sub_2160F9638(a1, (uint64_t *)a2) & 1) != 0)
    {
      unint64_t v7 = v4[24];
      if ((*(void *)(*(void *)(a1 + 224) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7))
      {
        uint64_t v8 = a1 + 208;
        unsigned int v9 = v4[25];
        *(void *)(a2 + 24) = *(void *)a2;
        *(_DWORD *)(a2 + 32) = v9;
        goto LABEL_11;
      }
    }
    uint64_t result = 0;
    v4[27] = 3;
  }
  else if (v5 == 3)
  {
    return 0;
  }
  else
  {
    *((void *)v4 + 12) = 0;
    v4[27] = 1;
    if ((**(unsigned char **)(a1 + 224) & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v8 = a1 + 208;
    *(void *)(a2 + 24) = *(void *)a2;
    *(_DWORD *)(a2 + 32) = 0;
    unint64_t v7 = 0;
LABEL_11:
    *(_DWORD *)(a2 + 36) = sub_216104298(v8, v7);
    return 1;
  }
  return result;
}

uint64_t sub_2160F9C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  int v5 = *(_DWORD *)(v4 + 108);
  if (v5 == 2)
  {
    do
    {
      while (1)
      {
LABEL_10:
        uint64_t v10 = *(unsigned int *)(v4 + 104);
        if (*(void *)(v4 + 72) == v10)
        {
          uint64_t v11 = *(void *)(v4 + 56) + 20 * v10;
          *(_OWORD *)v40 = xmmword_21636B640;
          *(_DWORD *)&v40[16] = -1;
          int v12 = sub_2161043E0((void *)a1, *(unsigned int *)(v11 - 20));
          *(_DWORD *)&v40[4] = v12 + 1;
          *(_DWORD *)v40 = v12 - *(_DWORD *)(v11 - 20);
          sub_2160FA27C((uint64_t *)(v4 + 48), (__n128 *)v40);
          LODWORD(v10) = *(_DWORD *)(v4 + 104);
        }
        uint64_t v13 = *(void *)(v4 + 56);
        uint64_t v14 = (unsigned int *)(v13 + 20 * v10);
        unint64_t v15 = v14[1];
        unint64_t v16 = *(void *)(*(void *)(a1 + 16) + ((v15 >> 3) & 0x1FFFFFF8));
        v14[1] = v15 + 1;
        if ((v16 >> v15)) {
          break;
        }
        if (v10 == 1)
        {
LABEL_7:
          uint64_t result = 0;
          *(_DWORD *)(v4 + 108) = 4;
          return result;
        }
        uint64_t v23 = v13 + 20 * v10;
        ++*(_DWORD *)(v23 - 20);
        sub_2160FA308((uint64_t *)v4, *(unsigned int *)(v23 - 32));
        --*(_DWORD *)(v4 + 104);
      }
      *(_DWORD *)(v4 + 104) = v10 + 1;
      unint64_t v17 = *v14;
      if ((*(void *)(*(void *)(a1 + 432) + ((v17 >> 3) & 0x1FFFFFF8)) >> v17))
      {
        uint64_t v18 = v13 + 20 * v10;
        int v21 = *(_DWORD *)(v18 + 12);
        uint64_t v20 = (unsigned int *)(v18 + 12);
        int v19 = v21;
        if (v21 == -1)
        {
          unsigned int v22 = sub_216104298(a1 + 416, v17);
          unint64_t v17 = *v14;
        }
        else
        {
          unsigned int v22 = v19 + 1;
        }
        *uint64_t v20 = v22;
        uint64_t v24 = *(void *)(a1 + 720);
        unint64_t v25 = v24 * v22;
        unint64_t v26 = v25 >> 6;
        uint64_t v27 = v25 & 0x3F;
        unint64_t v28 = v27 + v24;
        uint64_t v29 = *(void *)(a1 + 688);
        unint64_t v30 = *(void *)(v29 + 8 * v26);
        if (v28 > 0x40) {
          uint64_t v31 = ((2 * *(void *)(v29 + 8 * v26 + 8)) << (v27 ^ 0x3Fu)) | (v30 >> v27);
        }
        else {
          uint64_t v31 = v30 >> v27;
        }
        unint64_t v32 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v17) | ((*(_DWORD *)(a1 + 728) & v31) << 8);
        uint64_t v33 = *(void *)(a1 + 1000);
        if (v33) {
          sub_2160FB8F0(v33, a2, v32);
        }
        else {
          sub_2161036D4((uint64_t *)(a1 + 744), a2, v32);
        }
      }
      else
      {
        v40[0] = *(unsigned char *)(*(void *)(a1 + 640) + v17);
        sub_2160F9B00((uint64_t *)v4, v40);
      }
      int v34 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v13 + 20 * v10 + 8) = v34;
      unint64_t v35 = *v14;
    }
    while (((*(void *)(*(void *)(a1 + 224) + ((v35 >> 3) & 0x1FFFFFF8)) >> v35) & 1) == 0);
    uint64_t v36 = v13 + 20 * v10;
    int v39 = *(_DWORD *)(v36 + 16);
    v38 = (_DWORD *)(v36 + 16);
    int v37 = v39;
    if (v39 == -1)
    {
      int v9 = sub_216104298(a1 + 208, v35);
      int v34 = *(_DWORD *)(v4 + 24);
    }
    else
    {
      int v9 = v37 + 1;
    }
    _DWORD *v38 = v9;
    *(void *)(a2 + 24) = *(void *)(v4 + 8);
    *(_DWORD *)(a2 + 32) = v34;
  }
  else
  {
    if (v5 == 4) {
      return 0;
    }
    sub_2160F9F84(*(void *)(a2 + 40));
    while (*(void *)(a2 + 8) > (unint64_t)*(unsigned int *)(v4 + 100))
    {
      if ((sub_2160FA008(a1, (void *)a2) & 1) == 0) {
        goto LABEL_7;
      }
    }
    *(void *)&v40[12] = -1;
    *(void *)v40 = *(unsigned int *)(v4 + 96);
    *(_DWORD *)&v40[8] = *(void *)(v4 + 24);
    sub_2160FA27C((uint64_t *)(v4 + 48), (__n128 *)v40);
    *(_DWORD *)(v4 + 104) = 1;
    unint64_t v7 = *(unsigned int *)(v4 + 96);
    if (((*(void *)(*(void *)(a1 + 224) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) == 0) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void *)(v4 + 24);
    *(void *)(a2 + 24) = *(void *)(v4 + 8);
    *(_DWORD *)(a2 + 32) = v8;
    int v9 = sub_216104298(a1 + 208, v7);
  }
  *(_DWORD *)(a2 + 36) = v9;
  return 1;
}

double sub_2160F9F84(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 <= 0x3F)
  {
    if (v2 <= 0x20) {
      size_t v3 = 64;
    }
    else {
      size_t v3 = 2 * v2;
    }
    sub_2160FC1A8((uint64_t *)a1, v3);
  }
  sub_2160FC240((uint64_t *)(a1 + 48), 0);
  unint64_t v4 = *(void *)(a1 + 80);
  if (v4 <= 3)
  {
    if (v4 == 3) {
      uint64_t v5 = 6;
    }
    else {
      uint64_t v5 = 4;
    }
    sub_2160FC2D8((uint64_t *)(a1 + 48), v5);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = xmmword_21636B650;
  return result;
}

uint64_t sub_2160FA008(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[5];
  unint64_t v5 = *(unsigned int *)(v4 + 96);
  unint64_t v6 = (*(unsigned __int8 *)(*a2 + *(unsigned int *)(v4 + 100)) ^ (32 * v5) ^ v5) & *(void *)(a1 + 1056);
  uint64_t v7 = *(void *)(a1 + 1024);
  if (v5 != *(_DWORD *)(v7 + 12 * v6))
  {
    unint64_t v10 = sub_2161043E0((void *)a1, v5);
    uint64_t v11 = *(void *)(a1 + 16);
    if ((*(void *)(v11 + (((v10 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 + 1)))
    {
      unsigned int v12 = v10 - *(_DWORD *)(v4 + 96);
      *(_DWORD *)(v4 + 96) = v12;
      unint64_t v13 = v10 + 2;
      uint64_t v14 = 0xFFFFFFFFLL;
      while (1)
      {
        uint64_t v15 = v12;
        if ((*(void *)(*(void *)(a1 + 432) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) >> v12))
        {
          if (v14 == 0xFFFFFFFFLL)
          {
            uint64_t v14 = sub_216104298(a1 + 416, v12);
            uint64_t v15 = *(unsigned int *)(v4 + 96);
          }
          else
          {
            ++v14;
          }
          int v16 = *(_DWORD *)(v4 + 100);
          uint64_t v17 = *(void *)(a1 + 720);
          unint64_t v18 = (unint64_t)(v17 * v14) >> 6;
          uint64_t v19 = (v17 * v14) & 0x3F;
          unint64_t v20 = v19 + v17;
          uint64_t v21 = *(void *)(a1 + 688);
          uint64_t v22 = *(void *)(v21 + 8 * v18) >> v19;
          if (v20 > 0x40) {
            v22 |= (2 * *(void *)(v21 + 8 * v18 + 8)) << (v19 ^ 0x3Fu);
          }
          unint64_t v23 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v15) | ((*(_DWORD *)(a1 + 728) & v22) << 8);
          uint64_t v24 = *(void *)(a1 + 1000);
          if (v24)
          {
            if (sub_2160FBCD0(v24, a2, v23)) {
              return 1;
            }
          }
          else if (sub_216103804((void *)(a1 + 744), a2, v23))
          {
            return 1;
          }
          if (*(_DWORD *)(v4 + 100) != v16) {
            return 0;
          }
          unsigned int v12 = *(_DWORD *)(v4 + 96);
          uint64_t v11 = *(void *)(a1 + 16);
        }
        else if (*(unsigned __int8 *)(*(void *)(a1 + 640) + v12) == *(unsigned __int8 *)(*a2 {
                                                                                          + *(unsigned int *)(v4 + 100)))
        }
        {
          char v28 = *(unsigned char *)(*(void *)(a1 + 640) + v12);
          sub_2160F9B00((uint64_t *)v4, &v28);
          ++*(_DWORD *)(v4 + 100);
          return 1;
        }
        *(_DWORD *)(v4 + 96) = ++v12;
        uint64_t v25 = *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
        ++v13;
        if ((v25 & 1) == 0) {
          return 0;
        }
      }
    }
    return 0;
  }
  uint64_t v8 = v7 + 12 * v6;
  unint64_t v9 = *(unsigned int *)(v8 + 8);
  if (v9 > 0xFFFFFEFF)
  {
    char v29 = *(_DWORD *)(v8 + 8);
    sub_2160F9B00((uint64_t *)v4, &v29);
    ++*(_DWORD *)(v4 + 100);
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)(a1 + 1000);
  if (v26)
  {
    if (sub_2160FBCD0(v26, a2, v9)) {
      goto LABEL_24;
    }
    return 0;
  }
  if ((sub_216103804((void *)(a1 + 744), a2, v9) & 1) == 0) {
    return 0;
  }
LABEL_24:
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(*(void *)(a1 + 1024) + 12 * v6 + 4);
  return 1;
}

__n128 sub_2160FA27C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4 = a1[3];
  unint64_t v5 = a1[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 > 0x666666666666666) {
      uint64_t v7 = 0xCCCCCCCCCCCCCCCLL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    sub_2160FC2D8(a1, v8);
    uint64_t v4 = a1[3];
  }
  unint64_t v9 = (__n128 *)(a1[1] + 20 * v4);
  __n128 result = *a2;
  v9[1].n128_u32[0] = a2[1].n128_u32[0];
  *unint64_t v9 = result;
  ++a1[3];
  return result;
}

uint64_t *sub_2160FA308(uint64_t *result, size_t a2)
{
  size_t v2 = a2;
  size_t v3 = result;
  uint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 < 0) {
      uint64_t v5 = -1;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    __n128 result = (uint64_t *)sub_2160FC1A8(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t *sub_2160FA358(uint64_t *a1, uint64_t *a2)
{
  sub_2160FA3D0(a1, a2);
  uint64_t v4 = a1[6];
  a1[6] = a2[6];
  a2[6] = v4;
  uint64_t v5 = a1[7];
  a1[7] = a2[7];
  a2[7] = v5;
  sub_2160FA3D0(a1 + 8, a2 + 8);
  sub_2160FA3D0(a1 + 14, a2 + 14);

  return sub_2160FA3D0(a1 + 20, a2 + 20);
}

uint64_t *sub_2160FA3D0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  unsigned char *result = *a2;
  *a2 = v2;
  uint64_t v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  uint64_t v4 = result[2];
  uint64_t v5 = result[3];
  uint64_t v6 = a2[3];
  result[2] = a2[2];
  result[3] = v6;
  a2[2] = v4;
  a2[3] = v5;
  uint64_t v7 = result[4];
  result[4] = a2[4];
  a2[4] = v7;
  LOBYTE(v7) = *((unsigned char *)result + 40);
  *((unsigned char *)result + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  return result;
}

uint64_t *sub_2160FA424(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0x555555555555555) {
      uint64_t v5 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    __n128 result = (uint64_t *)sub_2160FE030(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    uint64_t v8 = 24 * v6;
    do
    {
      uint64_t v9 = v3[1] + v8;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_2160FA4B4(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  sub_2160FE0E8((uint64_t *)a1, (uint64_t)a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (a2[3]) {
    sub_2160FA944(a1, a2, v17, a4, a5);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    unsigned int v10 = (v9[268] + 1) | v9[271] | v9[272];
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    sub_2160FBEEC(&v18, v10);
  }
  else
  {
    if (*(void *)(a1 + 840)) {
      int v11 = 0x2000;
    }
    else {
      int v11 = 4096;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    sub_2160FBEEC(&v18, v12);
  }
  *(void *)(a1 + 1072) = v18;
  *(void *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_2160FA804(a1 + 416, 0, 0);
  if (*((void *)&v17[1] + 1))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(unsigned char *)(*(void *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((void *)&v17[1] + 1));
  }
  sub_2160FE850((long long *)(a1 + 672), (uint64_t)v17);
  sub_2160FB114(a1);
  uint64_t result = *(void *)&v17[0];
  if (*(void *)&v17[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v17[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2160FA66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void sub_2160FA698(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v4 = a1[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 60) {
      uint64_t v5 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    sub_2160FC408(a1, a2);
  }
  unint64_t v6 = a1[3];
  if (v2 > v6) {
    bzero((void *)(a1[1] + 8 * v6), 8 * (v2 - v6));
  }
  a1[3] = v2;
}

uint64_t *sub_2160FA70C(uint64_t *result, int a2)
{
  unint64_t v2 = result[6];
  if (v2 == 0xFFFFFFFF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0x700000034;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:52: MARI"
                   "SA_SIZE_ERROR: size_ == MARISA_UINT32_MAX";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  unint64_t v4 = result;
  uint64_t v5 = result[3];
  if (v2 == v5 << 6)
  {
    uint64_t v7 = 0;
    uint64_t result = sub_2160FC380(result, v5 + 1, &v7);
    unint64_t v2 = v4[6];
  }
  if (a2)
  {
    *(void *)(v4[1] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
    ++v4[7];
  }
  v4[6] = v2 + 1;
  return result;
}

uint64_t sub_2160FA804(uint64_t a1, int a2, int a3)
{
  memset(v8, 0, 41);
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v8[3] = 0u;
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_2161047C0(v8, (void *)a1, a2, a3);
  sub_2160FC4A0((void *)a1);
  long long v4 = v8[0];
  v8[0] = *(_OWORD *)a1;
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *(void *)&v8[1];
  *(void *)&v8[1] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  long long v6 = *(_OWORD *)((char *)&v8[1] + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  LOBYTE(v5) = BYTE8(v8[2]);
  BYTE8(v8[2]) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v5;
  sub_2160FA358((uint64_t *)a1, (uint64_t *)v8);
  if ((void)v13) {
    MEMORY[0x2166CA7C0](v13, 0x1000C8077774924);
  }
  if ((void)v11) {
    MEMORY[0x2166CA7C0](v11, 0x1000C8077774924);
  }
  if ((void)v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2160FA930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2160FA944(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a4 == a5)
  {
    long long v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_2160FABA0((uint64_t *)&v26, a2[3]);
    uint64_t v9 = a2[3];
    if (v9)
    {
      unsigned int v10 = (unsigned int *)(*((void *)&v26 + 1) + 8);
      long long v11 = (_DWORD *)(a2[1] + 8);
      do
      {
        uint64_t v12 = *((void *)v11 - 1);
        unsigned int v13 = *v11;
        v11 += 6;
        *((void *)v10 - 1) = v12 + v13 - 1;
        *unsigned int v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_216102DA0((long long *)(a1 + 744), (uint64_t)&v26, a3, *(_DWORD *)(a4 + 12));
  }
  else
  {
    long long v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_2160FA424((uint64_t *)&v26, a2[3]);
    if (a2[3])
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *((void *)&v26 + 1) + v15;
        uint64_t v18 = a2[1] + v15;
        uint64_t v19 = *(unsigned int *)(v18 + 8);
        *(void *)uint64_t v17 = *(void *)v18 + v19;
        *(_DWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
        ++v16;
        v15 += 24;
      }
      while (v16 < a2[3]);
    }
    uint64_t v20 = *a2;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)((char *)a2 + 25) = 0u;
    if (v20) {
      MEMORY[0x2166CA7C0](v20, 0x1000C8077774924);
    }
    uint64_t v21 = operator new(0x470uLL, MEMORY[0x263F8C180]);
    uint64_t v22 = (uint64_t)v21;
    if (v21) {
      sub_2160F83C0((uint64_t)v21);
    }
    unint64_t v23 = (uint64_t *)(a1 + 1000);
    sub_2160FAC20(v23, v22);
    if (!*v23)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001C3;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:451: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    sub_2160FACBC(*v23, (uint64_t)&v26, a3, a4, a5 + 1);
  }
  uint64_t result = v26;
  if ((void)v26) {
    return MEMORY[0x2166CA7C0](v26, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FAB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x2166CA7E0](v9, MEMORY[0x263F8C180]);
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2160FABA0(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 59) {
      uint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)sub_216101A04(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    uint64_t v8 = 16 * v6;
    do
    {
      uint64_t v9 = (void *)(v3[1] + v8);
      *uint64_t v9 = 0;
      v9[1] = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

void **sub_2160FAC20(void *a1, uint64_t a2)
{
  if (a2 && *a1 == a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  unint64_t v4 = (void *)*a1;
  *a1 = a2;
  return sub_2160FDFEC(&v4);
}

uint64_t sub_2160FACBC(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  sub_216101AA8((uint64_t *)a1, a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (*(void *)(a2 + 24)) {
    sub_2160FAEA0(a1, a2, v17, a4, a5);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    unsigned int v10 = (v9[268] + 1) | v9[271] | v9[272];
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    sub_2160FBEEC(&v18, v10);
  }
  else
  {
    if (*(void *)(a1 + 840)) {
      int v11 = 0x2000;
    }
    else {
      int v11 = 4096;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    sub_2160FBEEC(&v18, v12);
  }
  *(void *)(a1 + 1072) = v18;
  *(void *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_2160FA804(a1 + 416, 0, 0);
  if (*((void *)&v17[1] + 1))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(unsigned char *)(*(void *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((void *)&v17[1] + 1));
  }
  sub_2160FE850((long long *)(a1 + 672), (uint64_t)v17);
  sub_2160FB114(a1);
  uint64_t result = *(void *)&v17[0];
  if (*(void *)&v17[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v17[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2160FAE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FAEA0(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a4 == a5)
  {
    memset(v19, 0, 41);
    sub_2160FABA0((uint64_t *)v19, *(void *)(a2 + 24));
    uint64_t v9 = *(void *)(a2 + 24);
    if (v9)
    {
      unsigned int v10 = (_DWORD *)(*((void *)&v19[0] + 1) + 8);
      int v11 = (_DWORD *)(*(void *)(a2 + 8) + 8);
      do
      {
        uint64_t v12 = *((void *)v11 - 1);
        int v13 = *v11;
        v11 += 6;
        *((void *)v10 - 1) = v12 - 1;
        *unsigned int v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_216102DA0((long long *)(a1 + 744), (uint64_t)v19, a3, *(_DWORD *)(a4 + 12));
    uint64_t result = *(void *)&v19[0];
    if (*(void *)&v19[0]) {
      return MEMORY[0x2166CA7C0](*(void *)&v19[0], 0x1000C8077774924);
    }
  }
  else
  {
    uint64_t v15 = operator new(0x470uLL, MEMORY[0x263F8C180]);
    uint64_t v16 = (uint64_t)v15;
    if (v15) {
      sub_2160F83C0((uint64_t)v15);
    }
    uint64_t v17 = (void *)(a1 + 1000);
    sub_2160FAC20(v17, v16);
    if (!*v17)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001D4;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:468: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    return sub_2160FACBC();
  }
  return result;
}

void sub_2160FB040(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7E0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t *sub_2160FB080(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL) {
      uint64_t v5 = 0x1555555555555555;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)sub_216102970(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    uint64_t v8 = 12 * v6;
    do
    {
      uint64_t v9 = v3[1] + v8;
      *(void *)uint64_t v9 = 0;
      *(_DWORD *)(v9 + 8) = 0x800000;
      v8 += 12;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_2160FB114(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 1032);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = result + 416;
    do
    {
      uint64_t v6 = *(void *)(v2 + 1016);
      unint64_t v7 = *(unsigned int *)(v6 + v3 + 4);
      if (v7)
      {
        *(unsigned char *)(v6 + v3 + 8) = *(unsigned char *)(*(void *)(v2 + 632) + v7);
        uint64_t v8 = *(void *)(v2 + 1016);
        if ((*(void *)(*(void *)(v2 + 432) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7))
        {
          uint64_t result = sub_216104298(v5, v7);
          uint64_t v9 = *(void *)(v2 + 720);
          unint64_t v10 = (unint64_t)(v9 * result) >> 6;
          uint64_t v11 = (v9 * result) & 0x3F;
          unint64_t v12 = v11 + v9;
          uint64_t v13 = *(void *)(v2 + 688);
          unint64_t v14 = *(void *)(v13 + 8 * v10);
          if (v12 > 0x40) {
            uint64_t v15 = ((2 * *(void *)(v13 + 8 * v10 + 8)) << (v11 ^ 0x3Fu)) | (v14 >> v11);
          }
          else {
            uint64_t v15 = v14 >> v11;
          }
          int v16 = *(_DWORD *)(v2 + 728) & v15;
        }
        else
        {
          int v16 = 0xFFFFFF;
        }
        *(_DWORD *)(v8 + v3 + 8) = *(unsigned __int8 *)(v8 + v3 + 8) | (v16 << 8);
        unint64_t v1 = *(void *)(v2 + 1032);
      }
      else
      {
        *(void *)(v6 + v3) = -1;
      }
      ++v4;
      v3 += 12;
    }
    while (v4 < v1);
  }
  return result;
}

uint64_t sub_2160FB220(uint64_t *a1, uint64_t *a2)
{
  memset(v4, 0, 41);
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_2160FC540((uint64_t)v4, a2);
  sub_2160FA358(a1, (uint64_t *)v4);
  if ((void)v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  if ((void)v7) {
    MEMORY[0x2166CA7C0](v7, 0x1000C8077774924);
  }
  if ((void)v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v4[0];
  if (*(void *)&v4[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v4[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2160FB2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2160FB30C(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_216102A18((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FB3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FB3CC(long long *a1, uint64_t *a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  sub_2160FCE50((uint64_t)v9, a2);
  long long v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)a1 + 6);
  *((void *)a1 + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FB4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FB4C8(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_2160FCAB0((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FB560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FB588(uint64_t *a1, uint64_t a2)
{
  memset(v4, 0, 41);
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_2160FCF1C((uint64_t)v4, a2);
  sub_2160FA358(a1, (uint64_t *)v4);
  if ((void)v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  if ((void)v7) {
    MEMORY[0x2166CA7C0](v7, 0x1000C8077774924);
  }
  if ((void)v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v4[0];
  if (*(void *)&v4[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v4[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2160FB660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2160FB674(long long *a1, uint64_t a2)
{
  memset(v7, 0, 41);
  sub_216102A8C((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FB70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FB734(long long *a1, uint64_t a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  sub_2160FDA34((uint64_t)v9, a2);
  long long v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)a1 + 6);
  *((void *)a1 + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FB808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FB830(long long *a1, uint64_t a2)
{
  memset(v7, 0, 41);
  sub_216102B8C((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FB8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2160FB8F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a2 + 40);
  uint64_t v7 = a1 + 416;
  uint64_t v8 = (uint64_t *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      unint64_t v9 = *(void *)(a1 + 1056) & a3;
      uint64_t v10 = *(void *)(a1 + 1024);
      if (a3 != *(_DWORD *)(v10 + 12 * v9 + 4)) {
        break;
      }
      uint64_t v11 = v10 + 12 * v9;
      unint64_t v12 = *(unsigned int *)(v11 + 8);
      if (v12 <= 0xFFFFFEFF)
      {
        uint64_t v23 = *(void *)(a1 + 1000);
        if (v23) {
          uint64_t result = (uint64_t *)sub_2160FB8F0(v23, a2, v12);
        }
        else {
          uint64_t result = sub_2161036D4(v8, a2, v12);
        }
      }
      else
      {
        char v27 = *(_DWORD *)(v11 + 8);
        uint64_t result = sub_2160F9B00(v6, &v27);
      }
      a3 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v9);
      if (!a3) {
        return result;
      }
    }
    if ((*(void *)(*(void *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
    {
      int v14 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a3);
      uint64_t v15 = sub_216104298(v7, a3);
      uint64_t v16 = *(void *)(a1 + 720);
      unint64_t v17 = (unint64_t)(v16 * v15) >> 6;
      uint64_t v18 = (v16 * v15) & 0x3F;
      unint64_t v19 = v18 + v16;
      uint64_t v20 = *(void *)(a1 + 688);
      unint64_t v21 = *(void *)(v20 + 8 * v17);
      uint64_t v22 = v19 > 0x40
          ? ((2 * *(void *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu)) | (v21 >> v18)
          : v21 >> v18;
      unint64_t v24 = v14 | ((*(_DWORD *)(a1 + 728) & v22) << 8);
      uint64_t v25 = *(void *)(a1 + 1000);
      uint64_t result = v25 ? (uint64_t *)sub_2160FB8F0(v25, a2, v24) : sub_2161036D4(v8, a2, v24);
    }
    else
    {
      char v26 = *(unsigned char *)(*(void *)(a1 + 640) + a3);
      uint64_t result = sub_2160F9B00(v6, &v26);
    }
    if (a3 <= *(void *)(a1 + 1064)) {
      break;
    }
    a3 = sub_21610464C((void *)a1, a3) + ~a3;
  }
  return result;
}

uint64_t sub_2160FBA98(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = a2[5];
  uint64_t v7 = a1 + 416;
  uint64_t v8 = (void *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      unint64_t v9 = *(void *)(a1 + 1056) & a3;
      uint64_t v10 = *(void *)(a1 + 1024);
      if (a3 == *(_DWORD *)(v10 + 12 * v9 + 4)) {
        break;
      }
      if ((*(void *)(*(void *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
      {
        uint64_t v13 = *(void *)(a1 + 1000);
        int v14 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a3);
        uint64_t v15 = sub_216104298(v7, a3);
        uint64_t v16 = *(void *)(a1 + 720);
        unint64_t v17 = (unint64_t)(v16 * v15) >> 6;
        uint64_t v18 = (v16 * v15) & 0x3F;
        unint64_t v19 = v18 + v16;
        uint64_t v20 = *(void *)(a1 + 688);
        unint64_t v21 = *(void *)(v20 + 8 * v17);
        if (v13)
        {
          unint64_t v22 = v21 >> v18;
          if (v19 > 0x40) {
            v22 |= (2 * *(void *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu);
          }
          unint64_t v23 = v14 | ((*(_DWORD *)(a1 + 728) & v22) << 8);
          uint64_t v24 = *(void *)(a1 + 1000);
          if (v24)
          {
            if ((sub_2160FBA98(v24, a2, v23) & 1) == 0) {
              return 0;
            }
            goto LABEL_27;
          }
        }
        else
        {
          if (v19 > 0x40) {
            uint64_t v27 = ((2 * *(void *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu)) | (v21 >> v18);
          }
          else {
            uint64_t v27 = v21 >> v18;
          }
          unint64_t v23 = v14 | ((*(_DWORD *)(a1 + 728) & v27) << 8);
        }
        if ((sub_216103760(v8, a2, v23) & 1) == 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v26 = *(unsigned int *)(v6 + 100);
        if (*(unsigned __int8 *)(*(void *)(a1 + 640) + a3) != *(unsigned __int8 *)(*a2 + v26)) {
          return 0;
        }
        *(_DWORD *)(v6 + 100) = v26 + 1;
      }
LABEL_27:
      if (a3 <= *(void *)(a1 + 1064)) {
        return 1;
      }
      if (a2[1] <= (unint64_t)*(unsigned int *)(v6 + 100)) {
        return 0;
      }
      a3 = sub_21610464C((void *)a1, a3) + ~a3;
    }
    unint64_t v11 = *(unsigned int *)(v10 + 12 * v9 + 8);
    if (v11 <= 0xFFFFFEFF)
    {
      uint64_t v25 = *(void *)(a1 + 1000);
      if (v25)
      {
        if ((sub_2160FBA98(v25, a2, v11) & 1) == 0) {
          return 0;
        }
      }
      else if ((sub_216103760(v8, a2, v11) & 1) == 0)
      {
        return 0;
      }
    }
    else
    {
      uint64_t v12 = *(unsigned int *)(v6 + 100);
      if (*(unsigned __int8 *)(*a2 + v12) != v11) {
        return 0;
      }
      *(_DWORD *)(v6 + 100) = v12 + 1;
    }
    a3 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v9);
    if (!a3) {
      return 1;
    }
    if (a2[1] <= (unint64_t)*(unsigned int *)(v6 + 100)) {
      return 0;
    }
  }
}

uint64_t sub_2160FBCD0(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6 = a2[5];
  uint64_t v7 = a1 + 416;
  uint64_t v8 = (void *)(a1 + 744);
  while (1)
  {
    unint64_t v9 = *(void *)(a1 + 1056) & a3;
    uint64_t v10 = *(void *)(a1 + 1024);
    if (a3 != *(_DWORD *)(v10 + 12 * v9 + 4))
    {
      int v12 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a3);
      if ((*(void *)(*(void *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
      {
        uint64_t v13 = sub_216104298(v7, a3);
        uint64_t v14 = *(void *)(a1 + 720);
        unint64_t v15 = (unint64_t)(v14 * v13) >> 6;
        uint64_t v16 = (v14 * v13) & 0x3F;
        unint64_t v17 = v16 + v14;
        uint64_t v18 = *(void *)(a1 + 688);
        unint64_t v19 = *(void *)(v18 + 8 * v15);
        if (v17 > 0x40) {
          uint64_t v20 = ((2 * *(void *)(v18 + 8 * v15 + 8)) << (v16 ^ 0x3Fu)) | (v19 >> v16);
        }
        else {
          uint64_t v20 = v19 >> v16;
        }
        unint64_t v22 = v12 | ((*(_DWORD *)(a1 + 728) & v20) << 8);
        uint64_t v23 = *(void *)(a1 + 1000);
        if (v23)
        {
          if ((sub_2160FBCD0(v23, a2, v22) & 1) == 0) {
            return 0;
          }
        }
        else if ((sub_216103804(v8, a2, v22) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        if (v12 != *(unsigned __int8 *)(*a2 + *(unsigned int *)(v6 + 100))) {
          return 0;
        }
        char v25 = *(unsigned char *)(*(void *)(a1 + 640) + a3);
        sub_2160F9B00((uint64_t *)v6, &v25);
        ++*(_DWORD *)(v6 + 100);
      }
      if (a3 <= *(void *)(a1 + 1064)) {
        return 1;
      }
      a3 = sub_21610464C((void *)a1, a3) + ~a3;
      goto LABEL_23;
    }
    unint64_t v11 = *(unsigned int *)(v10 + 12 * v9 + 8);
    if (v11 > 0xFFFFFEFF)
    {
      if (*(unsigned __int8 *)(*a2 + *(unsigned int *)(v6 + 100)) != v11) {
        return 0;
      }
      char v26 = *(_DWORD *)(v10 + 12 * v9 + 8);
      sub_2160F9B00((uint64_t *)v6, &v26);
      ++*(_DWORD *)(v6 + 100);
      goto LABEL_22;
    }
    uint64_t v21 = *(void *)(a1 + 1000);
    if (!v21) {
      break;
    }
    if ((sub_2160FBCD0(v21, a2, v11) & 1) == 0) {
      return 0;
    }
LABEL_22:
    a3 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v9);
    if (!a3) {
      return 1;
    }
LABEL_23:
    if (a2[1] <= (unint64_t)*(unsigned int *)(v6 + 100))
    {
      sub_2160FB8F0(a1, (uint64_t)a2, a3);
      return 1;
    }
  }
  if (sub_216103804(v8, a2, v11)) {
    goto LABEL_22;
  }
  return 0;
}

uint64_t sub_2160FBEEC(void *a1, unsigned int a2)
{
  if (a2 >= 0x100000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x50000003BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:59: MARISA_CODE_ERROR:"
                   " (config_flags & ~MARISA_CONFIG_MASK) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  if ((a2 & 0x7F) != 0) {
    *a1 = a2 & 0x7F;
  }
  sub_2160FBFB4((uint64_t)a1, a2);
  sub_2160FC078((uint64_t)a1, a2);

  return sub_2160FC110((uint64_t)a1, a2);
}

uint64_t sub_2160FBFB4(uint64_t result, __int16 a2)
{
  unsigned int v2 = a2 & 0xF80;
  int v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512) {
      goto LABEL_11;
    }
    if (v2 != 1024)
    {
      int v3 = a2 & 0xF80;
      if (v2 != 2048) {
        goto LABEL_9;
      }
      goto LABEL_11;
    }
LABEL_10:
    int v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0) {
    goto LABEL_11;
  }
  if (v2 == 128) {
    goto LABEL_10;
  }
  int v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000065;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:101: MARISA_CODE_ERROR"
                   ": undefined cache level";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  *(_DWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_2160FC078(uint64_t result, __int16 a2)
{
  int v2 = 4096;
  int v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000079;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:121: MARISA_CODE_ERR"
                     "OR: undefined tail mode";
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    int v2 = 0x2000;
  }
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint64_t sub_2160FC110(uint64_t result, int a2)
{
  int v2 = 0x20000;
  int v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008DLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:141: MARISA_CODE_ERR"
                     "OR: undefined node order";
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    int v2 = 0x10000;
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

unsigned char *sub_2160FC1A8(uint64_t *a1, size_t __sz)
{
  uint64_t result = operator new[](__sz, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (char *)a1[1];
    uint64_t v7 = result;
    do
    {
      char v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = __sz;
  if (v9)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

uint64_t *sub_2160FC240(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  int v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0x666666666666666) {
      uint64_t v5 = 0xCCCCCCCCCCCCCCCLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)sub_2160FC2D8(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    char v8 = (_DWORD *)(v3[1] + 20 * v6 + 16);
    do
    {
      *((_OWORD *)v8 - 1) = xmmword_21636B640;
      *char v8 = -1;
      v8 += 5;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

_DWORD *sub_2160FC2D8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](20 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (long long *)a1[1];
    unint64_t v7 = result;
    do
    {
      long long v8 = *v6;
      v7[4] = *((_DWORD *)v6 + 4);
      *(_OWORD *)unint64_t v7 = v8;
      v7 += 5;
      unint64_t v6 = (long long *)((char *)v6 + 20);
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

uint64_t *sub_2160FC380(uint64_t *result, unint64_t a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = result;
  unint64_t v6 = result[4];
  if (v6 < a2)
  {
    uint64_t v7 = 2 * v6;
    if (v6 >> 60) {
      uint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v6 > a2 >> 1) {
      a2 = v7;
    }
    uint64_t result = sub_2160FC408(result, a2);
  }
  unint64_t v8 = v5[3];
  unint64_t v9 = v4 - v8;
  if (v4 > v8)
  {
    uint64_t v10 = (void *)(v5[1] + 8 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

void *sub_2160FC408(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](8 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

void *sub_2160FC4A0(void *result)
{
  if (*((unsigned char *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:100: MARISA_"
                   "STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v1 = result[3];
  if (v1 != result[4])
  {
    return sub_2160FC408(result, v1);
  }
  return result;
}

uint64_t sub_2160FC540(uint64_t a1, uint64_t *a2)
{
  sub_2160FC62C((long long *)a1, a2);
  *(void *)(a1 + 48) = *(unsigned int *)sub_2160F7888(a2, 4uLL);
  unint64_t v4 = *(unsigned int *)sub_2160F7888(a2, 4uLL);
  if (*(void *)(a1 + 48) < v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0xA00000087;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:135: MAR"
                   "ISA_FORMAT_ERROR: temp_num_1s > size_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  *(void *)(a1 + 56) = v4;
  sub_2160FC6EC((long long *)(a1 + 64), a2);
  sub_2160FC7AC((long long *)(a1 + 112), a2);

  return sub_2160FC7AC((long long *)(a1 + 160), a2);
}

uint64_t sub_2160FC62C(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_2160FC86C((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FC6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FC6EC(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_2160FCAB0((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FC784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FC7AC(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_2160FCC90((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FC844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FC86C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_2160F7888(a2, 8uLL);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  sub_2160FC94C(a2, (uint64_t *)(a1 + 16), v4 >> 3);
  sub_2160F77AC(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 3;

  return sub_2160FCA2C(a1);
}

uint64_t sub_2160FC94C(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t result = sub_2160F7888(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_2160FCA2C(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x10000006BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:107: MARISA_"
                   "STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  *(unsigned char *)(result + 40) = 1;
  return result;
}

uint64_t sub_2160FCAB0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_2160F7888(a2, 8uLL);
  unint64_t v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  sub_2160FCBA0(a2, (uint64_t *)(a1 + 16), v5);
  sub_2160F77AC(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v5;

  return sub_2160FCA2C(a1);
}

uint64_t sub_2160FCBA0(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t result = sub_2160F7888(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_2160FCC90(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_2160F7888(a2, 8uLL);
  if ((v4 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  sub_2160FCD70(a2, (uint64_t *)(a1 + 16), v4 >> 2);
  sub_2160F77AC(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 2;

  return sub_2160FCA2C(a1);
}

uint64_t sub_2160FCD70(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t result = sub_2160F7888(a1, 4 * a3);
  *a2 = result;
  return result;
}

void *sub_2160FCE50(uint64_t a1, uint64_t *a2)
{
  sub_2160FC62C((long long *)a1, a2);
  uint64_t v4 = *(unsigned int *)sub_2160F7888(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h:134: MA"
                   "RISA_FORMAT_ERROR: temp_value_size > 32";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  *(void *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)sub_2160F7888(a2, 4uLL);
  uint64_t result = (void *)sub_2160F7888(a2, 8uLL);
  *(void *)(a1 + 64) = *result;
  return result;
}

uint64_t sub_2160FCF1C(uint64_t a1, uint64_t a2)
{
  sub_2160FD014((long long *)a1, a2);
  unsigned int v7 = 0;
  sub_2160F7CBC(a2, (char *)&v7, 4uLL);
  *(void *)(a1 + 48) = v7;
  unsigned int v6 = 0;
  sub_2160F7CBC(a2, (char *)&v6, 4uLL);
  if (*(void *)(a1 + 48) < (unint64_t)v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0xA00000099;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:153: MAR"
                   "ISA_FORMAT_ERROR: temp_num_1s > size_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  *(void *)(a1 + 56) = v6;
  sub_2160FD0D4((long long *)(a1 + 64), a2);
  sub_2160FD194((long long *)(a1 + 112), a2);
  return sub_2160FD194((long long *)(a1 + 160), a2);
}

uint64_t sub_2160FD014(long long *a1, uint64_t a2)
{
  memset(v7, 0, 41);
  sub_2160FD254((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FD0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FD0D4(long long *a1, uint64_t a2)
{
  memset(v7, 0, 41);
  sub_2160FD470((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FD16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FD194(long long *a1, uint64_t a2)
{
  memset(v7, 0, 41);
  sub_2160FD780((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FD22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FD254(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = 0;
  sub_2160F7CBC(a2, (char *)&v7, 8uLL);
  if ((v7 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:213: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  unint64_t v4 = v7 >> 3;
  sub_2160FD33C((uint64_t *)a1, v7 >> 3);
  sub_2160FD394(a2, *(char **)(a1 + 8), v4);
  return sub_2160F7B90(a2, -(int)v7 & 7);
}

uint64_t *sub_2160FD33C(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  long long v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 60) {
      uint64_t v5 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = sub_2160FC408(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_2160FD394(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x20000001FLL;
    unsigned int v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:31: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x700000021;
    unsigned int v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:33: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  size_t v3 = 8 * a3;

  return sub_2160F7CBC(a1, a2, v3);
}

uint64_t sub_2160FD470(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = 0;
  sub_2160F7CBC(a2, (char *)&v7, 8uLL);
  unint64_t v4 = v7 / 0xC;
  if (v7 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:213: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  sub_2160FD568((uint64_t *)a1, v7 / 0xC);
  sub_2160FD5EC(a2, *(char **)(a1 + 8), v4);
  return sub_2160F7B90(a2, -(int)v7 & 7);
}

void sub_2160FD568(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v4 = a1[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL) {
      uint64_t v5 = 0x1555555555555555;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    sub_2160FD6D8(a1, a2);
  }
  unint64_t v6 = a1[3];
  if (v2 > v6) {
    bzero((void *)(a1[1] + 12 * v6), 12 * (v2 - v6));
  }
  a1[3] = v2;
}

uint64_t sub_2160FD5EC(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x20000001FLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:31: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x700000021;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:33: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  size_t v3 = 12 * a3;

  return sub_2160F7CBC(a1, a2, v3);
}

_DWORD *sub_2160FD6D8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](12 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (uint64_t *)a1[1];
    unint64_t v7 = result;
    do
    {
      uint64_t v8 = *v6;
      v7[2] = *((_DWORD *)v6 + 2);
      *(void *)unint64_t v7 = v8;
      v7 += 3;
      unint64_t v6 = (uint64_t *)((char *)v6 + 12);
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

uint64_t sub_2160FD780(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = 0;
  sub_2160F7CBC(a2, (char *)&v7, 8uLL);
  if ((v7 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:213: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  unint64_t v4 = v7 >> 2;
  sub_2160FD868((uint64_t *)a1, v7 >> 2);
  sub_2160FD8C0(a2, *(char **)(a1 + 8), v4);
  return sub_2160F7B90(a2, -(int)v7 & 7);
}

uint64_t *sub_2160FD868(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  size_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 61) {
      uint64_t v5 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)sub_2160FD99C(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_2160FD8C0(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x20000001FLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:31: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x700000021;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:33: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  size_t v3 = 4 * a3;

  return sub_2160F7CBC(a1, a2, v3);
}

_DWORD *sub_2160FD99C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](4 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (int *)a1[1];
    unint64_t v7 = result;
    do
    {
      int v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

uint64_t sub_2160FDA34(uint64_t a1, uint64_t a2)
{
  sub_2160FD014((long long *)a1, a2);
  LODWORD(v6) = 0;
  sub_2160F7CBC(a2, (char *)&v6, 4uLL);
  if (v6 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h";
    exception[2] = 0xA0000009BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h:155: MA"
                   "RISA_FORMAT_ERROR: temp_value_size > 32";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  *(void *)(a1 + 48) = v6;
  LODWORD(v6) = 0;
  sub_2160F7CBC(a2, (char *)&v6, 4uLL);
  *(_DWORD *)(a1 + 56) = v6;
  uint64_t v6 = 0;
  uint64_t result = sub_2160F7CBC(a2, (char *)&v6, 8uLL);
  *(void *)(a1 + 64) = v6;
  return result;
}

uint64_t sub_2160FDB20(uint64_t a1, uint64_t a2)
{
  sub_2160FDBA4(a1, a2);
  int __buf = *(void *)(a1 + 48);
  sub_2160F80B4(a2, (char *)&__buf, 4uLL);
  int v5 = *(void *)(a1 + 56);
  sub_2160F80B4(a2, (char *)&v5, 4uLL);
  sub_2160FDCE0(a1 + 64, a2);
  sub_2160FDE34(a1 + 112, a2);
  return sub_2160FDE34(a1 + 160, a2);
}

uint64_t sub_2160FDBA4(uint64_t a1, uint64_t a2)
{
  uint64_t __buf = 8 * *(void *)(a1 + 24);
  sub_2160F80B4(a2, (char *)&__buf, 8uLL);
  sub_2160FDC04(a2, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return sub_2160F7F78(a2, 0);
}

uint64_t sub_2160FDC04(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  size_t v3 = 8 * a3;

  return sub_2160F80B4(a1, a2, v3);
}

uint64_t sub_2160FDCE0(uint64_t a1, uint64_t a2)
{
  uint64_t __buf = 12 * *(void *)(a1 + 24);
  sub_2160F80B4(a2, (char *)&__buf, 8uLL);
  sub_2160FDD48(a2, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return sub_2160F7F78(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_2160FDD48(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  size_t v3 = 12 * a3;

  return sub_2160F80B4(a1, a2, v3);
}

uint64_t sub_2160FDE34(uint64_t a1, uint64_t a2)
{
  uint64_t __buf = 4 * *(void *)(a1 + 24);
  sub_2160F80B4(a2, (char *)&__buf, 8uLL);
  sub_2160FDE98(a2, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return sub_2160F7F78(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_2160FDE98(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  size_t v3 = 4 * a3;

  return sub_2160F80B4(a1, a2, v3);
}

uint64_t sub_2160FDF74(uint64_t a1, uint64_t a2)
{
  sub_2160FDBA4(a1, a2);
  LODWORD(__buf) = *(void *)(a1 + 48);
  sub_2160F80B4(a2, (char *)&__buf, 4uLL);
  LODWORD(__buf) = *(_DWORD *)(a1 + 56);
  sub_2160F80B4(a2, (char *)&__buf, 4uLL);
  uint64_t __buf = *(void *)(a1 + 64);
  return sub_2160F80B4(a2, (char *)&__buf, 8uLL);
}

void **sub_2160FDFEC(void **a1)
{
  unint64_t v2 = *a1;
  if (v2)
  {
    size_t v3 = sub_2160F86BC(v2);
    MEMORY[0x2166CA800](v3, 0x10F0C4010279AD7);
  }
  return a1;
}

char *sub_2160FE030(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new[](24 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (_DWORD *)(a1[1] + 16);
    unint64_t v7 = result + 16;
    do
    {
      *((void *)v7 - 2) = *((void *)v6 - 2);
      *(v7 - 2) = *(v6 - 2);
      *(v7 - 1) = *(v6 - 1);
      int v8 = *v6;
      v6 += 6;
      _DWORD *v7 = v8;
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

uint64_t sub_2160FE0E8(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 + 8);
  if (v9)
  {
    uint64_t v11 = 0;
    int v12 = (_DWORD *)(v10 + 16);
    do
    {
      *int v12 = v11;
      v12 += 6;
      ++v11;
    }
    while (v9 != v11);
  }
  unint64_t v13 = sub_2160FEBF4(v10, v10 + 24 * v9, 0);
  uint64_t v14 = 256;
  if (a5 != 1) {
    uint64_t v14 = 1;
  }
  do
  {
    unint64_t v15 = v14;
    v14 *= 2;
  }
  while (v15 < v13 / *(unsigned int *)(a4 + 8));
  sub_2160FB080(a1 + 126, v15);
  a1[132] = v15 - 1;
  sub_2160FA70C(a1, 1);
  sub_2160FA70C(a1, 0);
  uint64_t v16 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_2160F9B00(a1 + 78, v84);
  v77 = a1 + 52;
  sub_2160FA70C(a1 + 52, 0);
  uint64_t v72 = a5;
  memset(v84, 0, 41);
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  long long v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(void *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_2160FF230(v82, (uint64_t *)&v78);
  uint64_t v17 = *((void *)&v83 + 1);
  if (*((void *)&v83 + 1))
  {
    v73 = a1 + 78;
    do
    {
      uint64_t v18 = a1[58];
      unint64_t v19 = (unsigned int *)(*(void *)(*((void *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      uint64_t v22 = v19[2];
      *(void *)&long long v83 = v83 + 1;
      *((void *)&v83 + 1) = v17 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        uint64_t v23 = v18;
        operator delete(**((void ***)&v82[0] + 1));
        uint64_t v18 = v23;
        *((void *)&v82[0] + 1) += 8;
        *(void *)&long long v83 = v83 - 341;
      }
      uint64_t v76 = v17;
      uint64_t v24 = v18 - v17;
      if (v20 < v21)
      {
        while (1)
        {
          uint64_t v25 = *(void *)(a2 + 8);
          if (*(_DWORD *)(v25 + 24 * v20 + 8) != v22) {
            break;
          }
          *(_DWORD *)(v25 + 24 * v20 + 12) = v24;
          uint64_t v20 = (v20 + 1);
          if (v21 == v20) {
            goto LABEL_49;
          }
        }
      }
      if (v20 != v21)
      {
        uint64_t v75 = v18;
        uint64_t v26 = v80;
        long long v80 = 0u;
        memset(v81, 0, 25);
        if (v26) {
          MEMORY[0x2166CA7C0](v26, 0x1000C8077774924);
        }
        uint64_t v27 = *(void *)(a2 + 8);
        double v28 = *(float *)(v27 + 24 * v20 + 12);
        uint64_t v29 = v20 + 1;
        if (v20 + 1 < v21)
        {
          uint64_t v30 = 24 * v20;
          uint64_t v31 = (v20 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(void *)(v27 + v30) + v22) != *(unsigned __int8 *)(*(void *)(v27 + v30 + 24)
                                                                                          + v22))
            {
              *(float *)&unsigned int v32 = v28;
              v78.n128_u64[0] = v31 + v20;
              v78.n128_u64[1] = v22 | ((unint64_t)v32 << 32);
              sub_2160FE94C((uint64_t *)&v80, &v78);
              uint64_t v27 = *(void *)(a2 + 8);
              double v28 = 0.0;
              LODWORD(v20) = v29;
            }
            double v28 = v28 + *(float *)(v27 + v30 + 36);
            ++v29;
            v30 += 24;
            v31 += 0x100000000;
          }
          while (v21 != v29);
        }
        *(float *)&unsigned int v33 = v28;
        v78.n128_u32[0] = v20;
        v78.n128_u32[1] = v21;
        v78.n128_u64[1] = v22 | ((unint64_t)v33 << 32);
        __n128 v34 = sub_2160FE94C((uint64_t *)&v80, &v78);
        uint64_t v16 = a1 + 78;
        uint64_t v35 = v75;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          uint64_t v36 = (__n128 *)*((void *)&v80 + 1);
          unint64_t v37 = v81[1];
          if (v81[1] < 129)
          {
            v38 = 0;
            uint64_t v40 = 0;
          }
          else
          {
            v38 = (__n128 *)sub_2160FFB78(v81[1]);
            uint64_t v40 = v39;
          }
          sub_2160FFBDC(v36, &v36[v37], (uint64_t)&v78, v37, v38, v40, v34);
          if (v38) {
            operator delete(v38);
          }
          uint64_t v35 = v75;
        }
        uint64_t v41 = v81[1];
        if (v35 == v76) {
          a1[133] = v81[1];
        }
        if (v41)
        {
          unint64_t v42 = 0;
          do
          {
            v43 = (unsigned int *)(*((void *)&v80 + 1) + 16 * v42);
            v44 = (uint64_t *)v43;
            uint64_t v45 = v43[2];
            unsigned int v46 = *v43;
            uint64_t v47 = *(void *)(a2 + 8);
            unint64_t v48 = *(unsigned int *)(v47 + 24 * *v43 + 8);
            unint64_t v49 = v45 + 1;
            if (v45 + 1 >= v48)
            {
              unint64_t v50 = v43[2];
              LODWORD(v48) = v45 + 1;
            }
            else
            {
              unint64_t v50 = v48 - 1;
              unint64_t v51 = v43[2];
              do
              {
                unint64_t v52 = v51;
                unint64_t v51 = v49;
                v53 = (uint64_t *)(v47 + 24 * v46);
                uint64_t v54 = *v43;
                while (++v54 < (unint64_t)v43[1])
                {
                  uint64_t v55 = *v53;
                  uint64_t v56 = v53[3];
                  v53 += 3;
                  if (*(unsigned __int8 *)(v55 + v51) != *(unsigned __int8 *)(v56 + v51))
                  {
                    unint64_t v50 = v52;
                    LODWORD(v48) = v51;
                    goto LABEL_43;
                  }
                }
                unint64_t v49 = v51 + 1;
              }
              while (v51 + 1 != v48);
            }
LABEL_43:
            float v58 = *((float *)v43 + 3);
            v57 = v43 + 3;
            float v59 = v58;
            uint64_t v60 = ((32 * v24) ^ v24 ^ *(unsigned __int8 *)(*(void *)(v47 + 24 * v46) + v45)) & a1[132];
            uint64_t v61 = a1[127];
            uint64_t v62 = v61 + 12 * v60;
            float v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              uint64_t v65 = a1[81];
              v66 = (_DWORD *)(v61 + 12 * v60);
              _DWORD *v66 = v24;
              v66[1] = v65;
              float *v63 = v59;
              uint64_t v45 = *((unsigned int *)v44 + 2);
            }
            if (v50 == v45)
            {
              v78.n128_u8[0] = *(unsigned char *)(*(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v44) + v50);
              sub_2160F9B00(v73, &v78);
              sub_2160FA70C(v77, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_2160F9B00(v73, &v78);
              sub_2160FA70C(v77, 1);
              __n128 v78 = 0uLL;
              int v79 = 0;
              uint64_t v67 = *((unsigned int *)v44 + 2);
              v78.n128_u64[0] = *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v44) + v67;
              v78.n128_u64[1] = (v48 - v67);
              v78.n128_u32[3] = *v57;
              sub_2160FE9C0((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v44 + 2) = v48;
            sub_2160FF230(v82, v44);
            sub_2160FA70C(a1, 1);
            ++v42;
          }
          while (v42 < v81[1]);
        }
      }
LABEL_49:
      sub_2160FA70C(a1, 0);
      uint64_t v17 = *((void *)&v83 + 1);
    }
    while (*((void *)&v83 + 1));
  }
  sub_2160FA70C(a1, 0);
  sub_2160FA804((uint64_t)a1, v72 == 1, 1);
  sub_2160FEA5C(v16);
  sub_2160FEAFC((uint64_t)a1, a2, a3);
  long long v68 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v68;
  uint64_t v69 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)&v84[1];
  *(void *)&v84[1] = v69;
  long long v70 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v70;
  LOBYTE(v69) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v69;
  if ((void)v80) {
    MEMORY[0x2166CA7C0](v80, 0x1000C8077774924);
  }
  sub_21610060C(v82);
  uint64_t result = *(void *)&v84[0];
  if (*(void *)&v84[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v84[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2160FE730(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  va_start(va, a18);
  if (a13) {
    MEMORY[0x2166CA7C0](a13, 0x1000C8077774924);
  }
  sub_21610060C((uint64_t *)va);
  uint64_t v21 = *(void *)(v18 - 144);
  if (v21) {
    MEMORY[0x2166CA7C0](v21, 0x1000C8077774924);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001ACLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:428: MARISA_MEMOR"
                   "Y_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2160FE850(long long *a1, uint64_t a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  sub_216100704((uint64_t)v9, a2);
  long long v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)a1 + 6);
  *((void *)a1 + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FE924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2160FE94C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4 = a1[3];
  unint64_t v5 = a1[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 >> 59) {
      uint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    sub_2160FFAE0(a1, v8);
    uint64_t v4 = a1[3];
  }
  __n128 result = *a2;
  *(__n128 *)(a1[1] + 16 * v4) = *a2;
  ++a1[3];
  return result;
}

uint64_t *sub_2160FE9C0(uint64_t *result, uint64_t a2)
{
  long long v3 = result;
  uint64_t v4 = result[3];
  unint64_t v5 = result[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 > 0x555555555555555) {
      uint64_t v7 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    __n128 result = (uint64_t *)sub_2160FE030(result, v8);
    uint64_t v4 = v3[3];
  }
  uint64_t v9 = v3[1] + 24 * v4;
  *(void *)uint64_t v9 = *(void *)a2;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v9 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 + 16);
  ++v3[3];
  return result;
}

unsigned char *sub_2160FEA5C(unsigned char *result)
{
  if (result[40])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:100: MARISA_"
                   "STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  size_t v1 = *((void *)result + 3);
  if (v1 != *((void *)result + 4))
  {
    return sub_2160FC1A8((uint64_t *)result, v1);
  }
  return result;
}

uint64_t sub_2160FEAFC(uint64_t a1, uint64_t a2, long long *a3)
{
  memset(v13, 0, 41);
  sub_2160FD868((uint64_t *)v13, *(void *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
    uint64_t v7 = (unsigned int *)(*(void *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
  }
  long long v8 = *a3;
  uint64_t v9 = *(void *)&v13[1];
  *(void *)a3 = *(void *)&v13[0];
  *((void *)a3 + 1) = v6;
  v13[0] = v8;
  uint64_t v10 = *((void *)a3 + 2);
  *((void *)a3 + 2) = v9;
  *(void *)&v13[1] = v10;
  long long v11 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 40) = BYTE8(v13[2]);
  uint64_t result = v8;
  BYTE8(v13[2]) = v10;
  if ((void)v8) {
    return MEMORY[0x2166CA7C0](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_2160FEBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2160FEBF4(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    uint64_t v7 = 0;
    goto LABEL_69;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = sub_2160FF070(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    int v9 = v8;
    unint64_t v10 = v5;
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    unint64_t v13 = v4;
    while (v10 < v11)
    {
      unint64_t v14 = *(unsigned int *)(v10 + 8);
      int v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(void *)v10 + a3);
      if (v15 > v8) {
        break;
      }
      if (v15 == v8)
      {
        uint64_t v16 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        uint64_t v17 = *(void *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(void *)unint64_t v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(void *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      unint64_t v18 = v11 - 24;
      do
      {
        unint64_t v11 = v18;
        unint64_t v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19) {
          int v20 = -1;
        }
        else {
          int v20 = *(unsigned __int8 *)(*(void *)v11 + a3);
        }
        if (v20 < v8) {
          break;
        }
        if (v20 == v8)
        {
          uint64_t v21 = *(void *)(v13 - 24);
          v13 -= 24;
          uint64_t v22 = *(void *)v11;
          *(void *)unint64_t v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          uint64_t v23 = *(void *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(void *)unint64_t v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(void *)(v13 + 12) = v23;
        }
        unint64_t v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      uint64_t v24 = *(void *)v10;
      int v25 = *(_DWORD *)(v10 + 16);
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v26 = *(void *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v24;
      *(void *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    uint64_t v44 = v7;
    if (v12 > v5)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = v12 + v27;
        uint64_t v29 = v10 + v27;
        uint64_t v30 = *(void *)(v12 + v27 - 24);
        int v31 = *(_DWORD *)(v12 + v27 - 8);
        *(void *)(v28 - 24) = *(void *)(v10 + v27 - 24);
        uint64_t v32 = *(void *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(void *)(v29 - 24) = v30;
        *(void *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      uint64_t v33 = *(void *)v13;
      int v34 = *(_DWORD *)(v13 + 16);
      *(void *)unint64_t v13 = *(void *)v11;
      uint64_t v35 = *(void *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v33;
      *(void *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    uint64_t v36 = v10 - v5;
    int64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    uint64_t v38 = v11 - v10;
    int64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      uint64_t v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          uint64_t v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25) {
            goto LABEL_53;
          }
          uint64_t v41 = sub_2160FEBF4(v5, v10, a3) + v44;
        }
        uint64_t v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          uint64_t v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          uint64_t v7 = v44;
        }
        else
        {
          uint64_t v7 = sub_2160FEBF4(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            unint64_t v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        unint64_t v5 = v10;
LABEL_64:
        unint64_t v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24) {
      goto LABEL_32;
    }
    if (v38 < 25)
    {
      uint64_t v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      uint64_t v7 = v44 + 1;
    }
    else
    {
      uint64_t v7 = sub_2160FEBF4(v10, v11, a3 + 1) + v44;
    }
    uint64_t v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += sub_2160FEBF4(v11, v4, a3);
      }
      unint64_t v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += sub_2160FEBF4(v5, v10, a3);
      }
      unint64_t v5 = v11;
    }
LABEL_65:
    uint64_t v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25) {
    v7 += sub_2160FF0E4(v5, v4, a3);
  }
  return v7;
}

uint64_t sub_2160FF070(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 8) <= a4) {
    int v4 = -1;
  }
  else {
    int v4 = *(unsigned __int8 *)(*(void *)a1 + a4);
  }
  if (*(unsigned int *)(a2 + 8) <= a4) {
    int v5 = -1;
  }
  else {
    int v5 = *(unsigned __int8 *)(*(void *)a2 + a4);
  }
  if (*(unsigned int *)(a3 + 8) <= a4) {
    int v6 = -1;
  }
  else {
    int v6 = *(unsigned __int8 *)(*(void *)a3 + a4);
  }
  if (v4 <= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v4;
  }
  if (v4 >= v5) {
    int v4 = v5;
  }
  if (v4 <= v6) {
    int v4 = v6;
  }
  if (v7 >= v6) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t sub_2160FF0E4(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1 + 24;
  if (a1 + 24 >= a2) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = v3;
    if (v3 <= a1)
    {
      int v10 = 0;
    }
    else
    {
      while (1)
      {
        unint64_t v9 = v8 - 24;
        int v10 = sub_2160FF1C4(v8 - 24, v8, a3);
        if (v10 < 1) {
          break;
        }
        uint64_t v11 = *(void *)(v8 - 24);
        int v12 = *(_DWORD *)(v8 - 8);
        *(void *)(v8 - 24) = *(void *)v8;
        uint64_t v13 = *(void *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(void *)uint64_t v8 = v11;
        uint64_t v14 = *(void *)(v8 - 16);
        *(void *)(v8 - 16) = v13;
        *(void *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          int v10 = 1;
          break;
        }
      }
    }
    if (v10) {
      ++v7;
    }
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t sub_2160FF1C4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v3 == v4) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v6 = v4 - a3;
    uint64_t v7 = (unsigned __int8 *)(*(void *)a1 + a3);
    uint64_t v8 = (unsigned __int8 *)(*(void *)a2 + a3);
    while (v6)
    {
      int v9 = *v7;
      int v10 = *v8;
      uint64_t result = (v9 - v10);
      if (v9 != v10) {
        return result;
      }
      --v6;
      ++v7;
      ++v8;
      if (!--v5) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

void sub_2160FF230(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_2160FF2F0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

void sub_2160FF2F0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_2160FFAA8(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFFCuLL);
      sub_2160FF608(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFFCuLL);
    sub_2160FF720((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_2160FFAA8((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_2160FFAA8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  sub_2160FF840(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2160FF958((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2160FF5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2160FF608(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v19 = (char *)sub_2160FFAA8(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_2160FF720(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_2160FFAA8(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_2160FF840(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_2160FFAA8(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_2160FF958(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_2160FFAA8(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_2160FFA74()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  size_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *sub_2160FFAA8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_2160FFA74();
  }
  return operator new(8 * a2);
}

_OWORD *sub_2160FFAE0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](16 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (long long *)a1[1];
    uint64_t v7 = result;
    do
    {
      long long v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

void *sub_2160FFB78(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  unint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

double sub_2160FFBDC(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u32[0] = a2[-1].n128_u32[3];
      if (a7.n128_f32[0] > a1->n128_f32[3])
      {
        a7 = *a1;
        *a1 = a2[-1];
        a2[-1] = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v13 = a4 >> 1;
      uint64_t v14 = &a1[a4 >> 1];
      unint64_t v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = sub_2160FFE4C(a1, v14, a3, v15, a5, a7);
        v18.n128_f64[0] = sub_2160FFE4C(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13], v17);
        a7.n128_u64[0] = sub_2160FFFAC(a5, &a5[v13], &a5[v13], &a5[a4], a1, v18).n128_u64[0];
      }
      else
      {
        sub_2160FFBDC(a1, v14, a3, v15, a5, a6);
        sub_2160FFBDC(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = sub_216100020((long long *)a1, (long long *)&a1[a4 >> 1], (long long *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v16).n128_u64[0];
      }
    }
    else
    {
      sub_2160FFDA8((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t sub_2160FFDA8(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    if (result + 16 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        float v5 = *(float *)(v4 + 28);
        float v6 = *(float *)(v4 + 12);
        uint64_t v4 = v2;
        if (v5 > v6)
        {
          uint64_t v10 = *(void *)v2;
          int v11 = *(_DWORD *)(v2 + 8);
          uint64_t v7 = v3;
          while (1)
          {
            *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(result + v7);
            if (!v7) {
              break;
            }
            float v8 = *(float *)(result + v7 - 4);
            v7 -= 16;
            if (v5 <= v8)
            {
              uint64_t v9 = result + v7 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(void *)uint64_t v9 = v10;
          *(_DWORD *)(v9 + 8) = v11;
          *(float *)(v9 + 12) = v5;
        }
        uint64_t v2 = v4 + 16;
        v3 += 16;
      }
      while (v4 + 16 != a2);
    }
  }
  return result;
}

double sub_2160FFE4C(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v10 = a2 - 1;
      if (a2[-1].n128_f32[3] <= a1->n128_f32[3])
      {
        *a5 = *a1;
        a6 = *v10;
      }
      else
      {
        *a5 = *v10;
        a6 = *a1;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_2160FFBDC(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      sub_2160FFBDC(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = sub_2160FFFAC(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = sub_21610029C(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

__n128 sub_2160FFFAC(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 v8 = *a3++;
        result.n128_u64[0] = v8.n128_u64[0];
        *a5++ = v8;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    if (a3->n128_f32[3] <= a1->n128_f32[3])
    {
      __n128 v7 = *a1++;
      uint64_t result = v7;
    }
    else
    {
      __n128 v6 = *a3++;
      uint64_t result = v6;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t result = a1[v9];
      a5[v9++] = result;
    }
    while (&a1[v9] != a2);
  }
  return result;
}

__n128 sub_216100020(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  if (a6)
  {
    uint64_t v10 = a6;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v12 = 0;
      result.n128_u32[0] = *((_DWORD *)a2 + 3);
      uint64_t v13 = -a5;
      while (1)
      {
        uint64_t v14 = &a1[v12];
        if (result.n128_f32[0] > *((float *)&a1[v12] + 3)) {
          break;
        }
        ++v12;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      uint64_t v39 = a3;
      uint64_t v40 = a8;
      if (-v13 >= v10)
      {
        if (v13 == -1)
        {
          __n128 v43 = (__n128)a1[v12];
          a1[v12] = *a2;
          uint64_t result = v43;
          *a2 = (__int128)v43;
          return result;
        }
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v26 = v16 >> 1;
        uint64_t v20 = &a1[(v16 >> 1) + v12];
        uint64_t v19 = a3;
        if (a3 != a2)
        {
          unint64_t v27 = a3 - a2;
          uint64_t v19 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v19[v27 >> 1];
            float v30 = *((float *)v29 + 3);
            long long v31 = v29 + 1;
            v27 += ~(v27 >> 1);
            if (v30 > *((float *)v20 + 3)) {
              uint64_t v19 = v31;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v18 = v19 - a2;
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v17 = v10;
        }
        else {
          uint64_t v17 = v10 + 1;
        }
        uint64_t v18 = v17 >> 1;
        uint64_t v19 = &a2[v17 >> 1];
        uint64_t v20 = a2;
        if (v14 != a2)
        {
          unint64_t v21 = ((char *)a2 - (char *)a1 - v12 * 16) >> 4;
          uint64_t v20 = &a1[v12];
          do
          {
            unint64_t v22 = v21 >> 1;
            uint64_t v23 = &v20[v21 >> 1];
            float v24 = *((float *)v23 + 3);
            unint64_t v25 = v23 + 1;
            v21 += ~(v21 >> 1);
            if (*((float *)v19 + 3) > v24) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t v20 = v25;
            }
          }
          while (v21);
        }
        uint64_t v26 = ((char *)v20 - (char *)a1 - v12 * 16) >> 4;
      }
      a5 = -(v26 + v13);
      uint64_t v32 = v10 - v18;
      uint64_t v33 = v18;
      int v34 = sub_216100450((char *)v20, (char *)a2, (char *)v19);
      uint64_t v35 = v33;
      uint64_t v36 = (long long *)v34;
      if (v26 + v35 >= v10 - (v26 + v35) - v13)
      {
        uint64_t v38 = v35;
        sub_216100020(v34, v19, v39, a4, a5, v32, a7, v40);
        uint64_t v19 = v20;
        uint64_t v32 = v38;
        a5 = v26;
        a8 = v40;
        a3 = v36;
      }
      else
      {
        uint64_t v37 = v26;
        a8 = v40;
        sub_216100020(v14, v20, v34, a4, v37, v35, a7, v40);
        uint64_t v14 = v36;
        a3 = v39;
      }
      uint64_t v10 = v32;
      a1 = v14;
      a2 = v19;
      if (!v32) {
        return result;
      }
    }
    sub_216100340(a1, a2, a3, a4, a5, v10, a7);
  }
  return result;
}

__n128 sub_21610029C(__n128 *a1, __n128 *a2, __n128 *a3)
{
  if (a1 != a2)
  {
    __n128 result = *a1;
    *a3 = *a1;
    uint64_t v4 = a1 + 1;
    if (&a1[1] != a2)
    {
      uint64_t v5 = 0;
      __n128 v6 = a3;
      do
      {
        __n128 v7 = a1;
        __n128 v8 = v6;
        a1 = v4;
        uint64_t v9 = ++v6;
        if (v7[1].n128_f32[3] > v8->n128_f32[3])
        {
          *__n128 v6 = *v8;
          uint64_t v9 = a3;
          if (v8 != a3)
          {
            uint64_t v10 = v5;
            while (1)
            {
              uint64_t v9 = (__n128 *)((char *)a3 + v10);
              if (v7[1].n128_f32[3] <= *(float *)((char *)&a3->n128_f32[-1] + v10)) {
                break;
              }
              *uint64_t v9 = v9[-1];
              v10 -= 16;
              if (!v10)
              {
                uint64_t v9 = a3;
                break;
              }
            }
          }
        }
        __n128 result = *a1;
        *uint64_t v9 = *a1;
        uint64_t v4 = a1 + 1;
        v5 += 16;
      }
      while (&a1[1] != a2);
    }
  }
  return result;
}

long long *sub_216100340(long long *result, long long *a2, long long *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result != a2)
    {
      unint64_t v13 = 0;
      do
      {
        *(_OWORD *)&__src[v13] = result[v13 / 0x10];
        v13 += 16;
      }
      while (&result[v13 / 0x10] != a2);
      if (v13)
      {
        uint64_t v14 = (float *)__src;
        while (a2 != a3)
        {
          if (*((float *)a2 + 3) <= v14[3])
          {
            long long v17 = *(_OWORD *)v14;
            v14 += 4;
            long long v16 = v17;
          }
          else
          {
            long long v15 = *a2++;
            long long v16 = v15;
          }
          *result++ = v16;
          if (&__src[v13] == (char *)v14) {
            return result;
          }
        }
        return (long long *)memmove(result, v14, __src - (char *)v14 + v13);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_OWORD *)&__src[v7 * 16] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 16)
    {
      __n128 v8 = (float *)&__src[v7 * 16];
      uint64_t v9 = a3 - 1;
      while (a2 != result)
      {
        float v10 = *(v8 - 1);
        float v11 = *((float *)a2 - 1);
        if (v10 <= v11) {
          uint64_t v12 = (char *)(v8 - 4);
        }
        else {
          uint64_t v12 = (char *)(a2 - 1);
        }
        if (v10 <= v11) {
          v8 -= 4;
        }
        else {
          --a2;
        }
        *v9-- = *(_OWORD *)v12;
        if (v8 == (float *)__src) {
          return result;
        }
      }
      unint64_t v18 = 0;
      do
      {
        v9[v18 / 4] = *(_OWORD *)&v8[v18 - 4];
        v18 -= 4;
      }
      while (&v8[v18] != (float *)__src);
    }
  }
  return result;
}

char *sub_216100450(char *__src, char *a2, char *a3)
{
  uint64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 16 == a2)
    {
      long long v9 = *(_OWORD *)__src;
      int64_t v6 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      uint64_t v4 = &__src[v6];
      *(_OWORD *)uint64_t v4 = v9;
    }
    else if (a2 + 16 == a3)
    {
      uint64_t v4 = __src + 16;
      long long v10 = *((_OWORD *)a3 - 1);
      size_t v7 = a3 - 16 - __src;
      if (a3 - 16 != __src) {
        memmove(__src + 16, __src, v7);
      }
      *(_OWORD *)__src = v10;
    }
    else
    {
      return (char *)sub_21610052C(__src, a2, a3);
    }
  }
  return v4;
}

_OWORD *sub_21610052C(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = 0;
      do
      {
        long long v5 = a1[v4];
        a1[v4] = a2[v4];
        uint64_t v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        uint64_t v7 = (uint64_t)&a2[++v4];
      }
      while ((_OWORD *)v6 != a2 && v7 != (void)a3);
    }
  }
  else
  {
    uint64_t v9 = a3 - a2;
    uint64_t v10 = a2 - a1;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = v9;
      uint64_t v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      uint64_t v12 = &a1[v10];
      do
      {
        long long v13 = *--v12;
        uint64_t v14 = &v12[v3];
        long long v15 = v12;
        do
        {
          long long v16 = v15;
          long long v15 = v14;
          *long long v16 = *v14;
          BOOL v17 = __OFSUB__(v3, a3 - v14);
          uint64_t v19 = v3 - (a3 - v14);
          char v18 = (v19 < 0) ^ v17;
          uint64_t v14 = &a1[v19];
          if (v18) {
            uint64_t v14 = &v15[v3];
          }
        }
        while (v14 != v12);
        *long long v15 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t sub_21610060C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 170;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_2161006B4((uint64_t)a1);
}

uint64_t sub_2161006B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_216100704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4) {
    goto LABEL_10;
  }
  unsigned int v5 = 0;
  uint64_t v6 = *(unsigned int **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  do
  {
    unsigned int v9 = *v6++;
    unsigned int v8 = v9;
    if (v9 > v5) {
      unsigned int v5 = v8;
    }
    --v7;
  }
  while (v7);
  if (v5)
  {
    uint64_t v10 = 0;
    do
    {
      ++v10;
      BOOL v11 = v5 > 1;
      v5 >>= 1;
    }
    while (v11);
  }
  else
  {
LABEL_10:
    uint64_t v10 = 0;
  }
  BOOL v12 = v4 != 0;
  unint64_t v13 = (unint64_t)(v10 * v4 + 63) >> 6;
  if (v10) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = v12;
  }
  uint64_t result = (uint64_t)sub_2160FD33C((uint64_t *)a1, v14);
  if (v14) {
    *(void *)(*(void *)(a1 + 8) + 8 * *(void *)(a1 + 24) - 8) = 0;
  }
  *(void *)(a1 + 48) = v10;
  if (v10) {
    *(_DWORD *)(a1 + 56) = 0xFFFFFFFF >> -(char)v10;
  }
  uint64_t v16 = *(void *)(a2 + 24);
  *(void *)(a1 + 64) = v16;
  if (v16)
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t result = sub_216100804(a1, v17, *(_DWORD *)(*(void *)(a2 + 16) + 4 * v17));
      ++v17;
    }
    while (v17 < *(void *)(a2 + 24));
  }
  return result;
}

uint64_t sub_216100804(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(result + 48);
  unint64_t v4 = (unint64_t)(v3 * a2) >> 6;
  uint64_t v5 = (v3 * a2) & 0x3F;
  unint64_t v6 = *(unsigned int *)(result + 56);
  uint64_t v7 = *(void *)(result + 8);
  unint64_t v8 = v6 & a3;
  *(void *)(v7 + 8 * v4) = *(void *)(v7 + 8 * v4) & ~(v6 << (v3 * a2)) | (v8 << (v3 * a2));
  if ((unint64_t)(v5 + v3) >= 0x41) {
    *(void *)(v7 + 8 * v4 + 8) = *(void *)(v7 + 8 * v4 + 8) & ~(v6 >> -(char)v5) | (v8 >> -(char)v5);
  }
  return result;
}

uint64_t sub_216100868(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unsigned int *)result;
LABEL_2:
  BOOL v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v23 = *(a2 - 2);
          unsigned int v24 = *v11;
          if (v23 < *v11 || v24 >= v23 && *(a2 - 1) < v11[1])
          {
            *BOOL v11 = v23;
            *(a2 - 2) = v24;
            unsigned int v25 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v25;
          }
          break;
        case 3uLL:
          uint64_t result = sub_216100DCC(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = sub_2161013AC(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = sub_2161014B0(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_216101608(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_216100DCC(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      sub_216100DCC(v11 + 2, v17 - 2, a2 - 4);
      sub_216100DCC(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      sub_216100DCC(v17 - 2, v17, &v11[2 * v16 + 2]);
      uint64_t v18 = *(void *)v11;
      *(void *)BOOL v11 = *(void *)v17;
      *(void *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_216100DCC(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_16;
      }
    }
    unsigned int v19 = *(v11 - 2);
    if (v19 >= *v11 && (*v11 < v19 || *(v11 - 1) >= v11[1]))
    {
      uint64_t result = (uint64_t)sub_216100F20(v11, a2);
      BOOL v11 = (unsigned int *)result;
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v20 = sub_216101054(v11, a2);
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v22 = sub_216101190(v11, v20);
    BOOL v11 = v20 + 2;
    uint64_t result = sub_216101190(v20 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_19:
      uint64_t result = sub_216100868(v10, v20, a3, -v13, a5 & 1);
      BOOL v11 = v20 + 2;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_216100C60(v11, a2);
  }
  else
  {
    return (uint64_t)sub_216100D34(v11, a2);
  }
}

unsigned int *sub_216100C60(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v4;
        unint64_t v4 = v2;
        unsigned int v6 = v5[2];
        unsigned int v7 = *v5;
        if (v6 < *v5 || v7 >= v6 && v5[3] < v5[1])
        {
          unsigned int v9 = v5[2];
          unsigned int v8 = v5[3];
          unsigned int v10 = v5[1];
          v5[2] = v7;
          v4[1] = v10;
          BOOL v11 = result;
          if (v5 != result)
          {
            uint64_t v12 = v3;
            do
            {
              unsigned int v13 = *(unsigned int *)((char *)result + v12 - 8);
              if (v13 <= v9)
              {
                if (v13 < v9)
                {
                  BOOL v11 = v5;
                  goto LABEL_17;
                }
                BOOL v11 = (unsigned int *)((char *)result + v12);
                unsigned int v14 = *(unsigned int *)((char *)result + v12 - 4);
                if (v14 <= v8) {
                  goto LABEL_17;
                }
              }
              else
              {
                unsigned int v14 = *(unsigned int *)((char *)result + v12 - 4);
              }
              v5 -= 2;
              unint64_t v15 = (unsigned int *)((char *)result + v12);
              *unint64_t v15 = v13;
              v15[1] = v14;
              v12 -= 8;
            }
            while (v12);
            BOOL v11 = result;
          }
LABEL_17:
          *BOOL v11 = v9;
          v11[1] = v8;
        }
        uint64_t v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *sub_216100D34(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = result + 1;
      do
      {
        unint64_t v4 = result;
        uint64_t result = v2;
        unsigned int v5 = v4[2];
        unsigned int v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          unsigned int v7 = *result;
          unsigned int v8 = result[1];
          for (uint64_t i = v3; ; i -= 2)
          {
            unsigned int v10 = *i;
            i[1] = v6;
            i[2] = v10;
            unsigned int v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8)) {
              break;
            }
          }
          *(i - 1) = v7;
          *uint64_t i = v8;
        }
        uint64_t v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_216100DCC(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    unsigned int v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1])) {
      return 0;
    }
    *a2 = v9;
    *a3 = v3;
    BOOL v11 = (int *)(a2 + 1);
    unsigned int v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    unsigned int v12 = *a2;
    unsigned int v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1])) {
      return 1;
    }
    *a1 = v12;
    unsigned int v6 = (int *)(a1 + 1);
    *a2 = v13;
    uint64_t v8 = 2;
  }
  else
  {
    unsigned int v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      unsigned int v6 = (int *)(a1 + 1);
      *a3 = v4;
      unsigned int v7 = (int *)(a3 + 1);
      uint64_t v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      unsigned int v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      unsigned int v15 = *a3;
      unsigned int v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14)) {
        return 1;
      }
      *a2 = v15;
      *a3 = v16;
      unsigned int v7 = (int *)(a3 + 1);
      uint64_t v8 = 2;
      unsigned int v6 = (int *)(a2 + 1);
    }
    BOOL v11 = v7;
  }
  int v17 = *v6;
  *unsigned int v6 = *v11;
  *BOOL v11 = v17;
  return v8;
}

unsigned int *sub_216100F20(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3 = *a1;
  unsigned int v2 = a1[1];
  unsigned int v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (uint64_t i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unsigned int v7 = i[2];
      i += 2;
      unsigned int v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      unsigned int v8 = *(a2 - 2);
      unsigned int v4 = v8;
    }
  }
  if (i < a2)
  {
    unsigned int v9 = *i;
    unsigned int v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      unsigned int v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        unsigned int v12 = i[2];
        i += 2;
        unsigned int v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          unsigned int v13 = *(a2 - 2);
          a2 -= 2;
          unsigned int v10 = v13;
          BOOL v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *sub_216101054(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *a1;
  unsigned int v4 = a1[1];
  while (1)
  {
    unsigned int v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      unsigned int v8 = *(a2 - 2);
      a2 -= 2;
      unsigned int v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        unsigned int v10 = *(a2 - 2);
        a2 -= 2;
        unsigned int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v9 > v3) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unsigned int v13 = (unsigned int *)v6;
  }
  else
  {
    unsigned int v12 = *a2;
    unsigned int v13 = (unsigned int *)v6;
    BOOL v14 = a2;
    do
    {
      *unsigned int v13 = v12;
      *BOOL v14 = v5;
      unsigned int v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          unsigned int v16 = v13[2];
          v13 += 2;
          unsigned int v5 = v16;
          BOOL v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && v13[1] < v4);
      do
      {
        unsigned int v18 = *(v14 - 2);
        v14 -= 2;
        unsigned int v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL sub_216101190(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      unsigned int v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unsigned int v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_216100DCC(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_2161013AC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_2161014B0(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unsigned int v9 = a1 + 4;
      sub_216100DCC(a1, a1 + 2, a1 + 4);
      unsigned int v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    unsigned int v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1])) {
      goto LABEL_22;
    }
    unsigned int v14 = *v10;
    unsigned int v15 = v10[1];
    *unsigned int v10 = v13;
    v10[1] = v9[1];
    unsigned int v16 = a1;
    if (v9 == a1) {
      goto LABEL_21;
    }
    uint64_t v17 = v11;
    while (1)
    {
      unsigned int v18 = (char *)a1 + v17;
      unsigned int v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14) {
        break;
      }
      unsigned int v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        unsigned int v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      unsigned int v16 = v9;
      goto LABEL_21;
    }
    unsigned int v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15) {
      goto LABEL_18;
    }
    unsigned int v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    *unsigned int v16 = v14;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_22:
    unsigned int v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_2161013AC(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = sub_216100DCC(a1, a2, a3);
  unsigned int v9 = *a4;
  unsigned int v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    unsigned int v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unsigned int v12 = *a3;
    unsigned int v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      unsigned int v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unsigned int v15 = *a2;
      unsigned int v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        unsigned int v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_2161014B0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_2161013AC(a1, a2, a3, a4);
  unsigned int v11 = *a5;
  unsigned int v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    unsigned int v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unsigned int v14 = *a4;
    unsigned int v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      unsigned int v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unsigned int v17 = *a3;
      unsigned int v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        unsigned int v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unsigned int v20 = *a2;
        unsigned int v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          unsigned int v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_216101608(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = &a1[2 * v10];
      do
      {
        sub_216101784((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = a2;
    if (a2 != a3)
    {
      unsigned int v14 = a2;
      do
      {
        unsigned int v15 = *v14;
        unsigned int v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *unsigned int v14 = v16;
          *a1 = v15;
          unsigned int v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          sub_216101784((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v18 = (unint64_t)v8 >> 3;
      unsigned int v19 = a2 - 2;
      do
      {
        unsigned int v21 = *a1;
        unsigned int v20 = a1[1];
        unsigned int v22 = sub_2161018C8(a1, a4, v18);
        if (v19 == v22)
        {
          unsigned int *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          unsigned int *v22 = *v19;
          v22[1] = v19[1];
          *unsigned int v19 = v21;
          v19[1] = v20;
          sub_21610195C((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_216101784(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unsigned int *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unsigned int v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unsigned int v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        unsigned int v12 = *a4;
        unsigned int v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unsigned int v14 = (unsigned int *)(result + 8 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unsigned int v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            unsigned int v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13) {
              break;
            }
            *uint64_t v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_22;
            }
          }
        }
        unsigned int v14 = v8;
LABEL_22:
        *unsigned int v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *sub_2161018C8(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unsigned int v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    *uint64_t v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_21610195C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unsigned int *)(result + 8 * (v4 >> 1));
    unsigned int v7 = *v6;
    unsigned int v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      unsigned int v9 = *(_DWORD *)(a2 - 8);
      unsigned int v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          unint64_t v12 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          unsigned int v11 = (unsigned int *)(result + 8 * v5);
          unsigned int v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9) {
              break;
            }
            unsigned int v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10) {
              break;
            }
          }
          else
          {
            unsigned int v14 = v11[1];
          }
          *uint64_t v6 = v13;
          v6[1] = v14;
          uint64_t v6 = (unsigned int *)(result + 8 * v5);
          if (v12 <= 1) {
            goto LABEL_12;
          }
        }
      }
      unsigned int v11 = v6;
LABEL_12:
      *unsigned int v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

char *sub_216101A04(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new[](16 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a1[1] + 8);
    unsigned int v7 = result + 8;
    do
    {
      *(v7 - 1) = *(v6 - 1);
      uint64_t v8 = *v6;
      v6 += 2;
      void *v7 = v8;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

uint64_t sub_216101AA8(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    uint64_t v10 = 0;
    unsigned int v11 = (_DWORD *)(v9 + 16);
    do
    {
      *unsigned int v11 = v10;
      v11 += 6;
      ++v10;
    }
    while (v8 != v10);
  }
  unint64_t v12 = sub_216102318(v9, v9 + 24 * v8, 0);
  uint64_t v13 = 256;
  if (a5 != 1) {
    uint64_t v13 = 1;
  }
  do
  {
    unint64_t v14 = v13;
    v13 *= 2;
  }
  while (v14 < v12 / *(unsigned int *)(a4 + 8));
  sub_2160FB080(a1 + 126, v14);
  a1[132] = v14 - 1;
  sub_2160FA70C(a1, 1);
  sub_2160FA70C(a1, 0);
  uint64_t v15 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_2160F9B00(a1 + 78, v84);
  sub_2160FA70C(a1 + 52, 0);
  memset(v84, 0, 41);
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  long long v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(void *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_2160FF230(v82, (uint64_t *)&v78);
  uint64_t v16 = *((void *)&v83 + 1);
  if (*((void *)&v83 + 1))
  {
    uint64_t v72 = a1 + 52;
    v73 = a1 + 78;
    do
    {
      uint64_t v17 = a1[58];
      unsigned int v18 = (unsigned int *)(*(void *)(*((void *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      uint64_t v21 = v18[2];
      *(void *)&long long v83 = v83 + 1;
      *((void *)&v83 + 1) = v16 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        uint64_t v22 = v17;
        uint64_t v23 = v16;
        operator delete(**((void ***)&v82[0] + 1));
        uint64_t v16 = v23;
        uint64_t v17 = v22;
        *((void *)&v82[0] + 1) += 8;
        *(void *)&long long v83 = v83 - 341;
      }
      if (v19 < v20)
      {
        while (1)
        {
          uint64_t v24 = *(void *)(a2 + 8);
          if (*(_DWORD *)(v24 + 24 * v19 + 8) != v21) {
            break;
          }
          *(_DWORD *)(v24 + 24 * v19 + 12) = v17 - v16;
          uint64_t v19 = (v19 + 1);
          if (v20 == v19) {
            goto LABEL_49;
          }
        }
      }
      if (v19 != v20)
      {
        uint64_t v76 = v16;
        int v77 = v17 - v16;
        uint64_t v25 = v80;
        long long v80 = 0u;
        memset(v81, 0, 25);
        if (v25) {
          MEMORY[0x2166CA7C0](v25, 0x1000C8077774924);
        }
        uint64_t v75 = v17;
        uint64_t v26 = *(void *)(a2 + 8);
        double v27 = *(float *)(v26 + 24 * v19 + 12);
        uint64_t v28 = v19 + 1;
        if (v19 + 1 < v20)
        {
          uint64_t v29 = 24 * v19;
          uint64_t v30 = (v19 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(void *)(v26 + v29) - v21 - 1) != *(unsigned __int8 *)(*(void *)(v26 + v29 + 24)
                                                                                              - v21
                                                                                              - 1))
            {
              *(float *)&unsigned int v31 = v27;
              v78.n128_u64[0] = v30 + v19;
              v78.n128_u64[1] = v21 | ((unint64_t)v31 << 32);
              sub_2160FE94C((uint64_t *)&v80, &v78);
              uint64_t v26 = *(void *)(a2 + 8);
              double v27 = 0.0;
              LODWORD(v19) = v28;
            }
            double v27 = v27 + *(float *)(v26 + v29 + 36);
            ++v28;
            v29 += 24;
            v30 += 0x100000000;
          }
          while (v20 != v28);
        }
        *(float *)&unsigned int v32 = v27;
        v78.n128_u32[0] = v19;
        v78.n128_u32[1] = v20;
        v78.n128_u64[1] = v21 | ((unint64_t)v32 << 32);
        __n128 v33 = sub_2160FE94C((uint64_t *)&v80, &v78);
        uint64_t v15 = a1 + 78;
        uint64_t v34 = v76;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          uint64_t v35 = (__n128 *)*((void *)&v80 + 1);
          unint64_t v36 = v81[1];
          if (v81[1] < 129)
          {
            uint64_t v37 = 0;
            uint64_t v39 = 0;
          }
          else
          {
            uint64_t v37 = (__n128 *)sub_2160FFB78(v81[1]);
            uint64_t v39 = v38;
          }
          sub_2160FFBDC(v35, &v35[v36], (uint64_t)&v78, v36, v37, v39, v33);
          if (v37) {
            operator delete(v37);
          }
          uint64_t v34 = v76;
        }
        uint64_t v40 = v81[1];
        if (v75 == v34) {
          a1[133] = v81[1];
        }
        if (v40)
        {
          unint64_t v41 = 0;
          do
          {
            uint64_t v42 = (unsigned int *)(*((void *)&v80 + 1) + 16 * v41);
            __n128 v43 = (uint64_t *)v42;
            uint64_t v44 = v42[2];
            uint64_t v45 = *(void *)(a2 + 8);
            unint64_t v46 = *(unsigned int *)(v45 + 24 * *v42 + 8);
            unint64_t v47 = v44 + 1;
            if (v44 + 1 >= v46)
            {
              unint64_t v48 = v42[2];
              LODWORD(v46) = v44 + 1;
            }
            else
            {
              unint64_t v48 = v46 - 1;
              uint64_t v49 = (uint64_t *)(v45 + 24 * *v42);
              unint64_t v50 = v42[2];
              do
              {
                unint64_t v51 = v50;
                unint64_t v50 = v47;
                uint64_t v52 = v49;
                uint64_t v53 = *v42;
                while (++v53 < (unint64_t)v42[1])
                {
                  uint64_t v54 = *v52;
                  uint64_t v55 = v52[3];
                  v52 += 3;
                  if (*(unsigned __int8 *)(v54 + ~v51 - 1) != *(unsigned __int8 *)(v55 + ~v51 - 1))
                  {
                    unint64_t v48 = v51;
                    LODWORD(v46) = v47;
                    goto LABEL_43;
                  }
                }
                ++v47;
              }
              while (v50 + 1 != v46);
            }
LABEL_43:
            uint64_t v56 = a1[81];
            float v58 = *((float *)v42 + 3);
            v57 = v42 + 3;
            float v59 = v58;
            uint64_t v60 = a1[132] & v56;
            uint64_t v61 = a1[127];
            uint64_t v62 = v61 + 12 * v60;
            float v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              uint64_t v65 = (_DWORD *)(v61 + 12 * v60);
              *uint64_t v65 = v77;
              v65[1] = v56;
              float *v63 = v59;
              uint64_t v44 = *((unsigned int *)v43 + 2);
            }
            if (v48 == v44)
            {
              v78.n128_u8[0] = *(unsigned char *)(~v48 + *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v43));
              sub_2160F9B00(v73, &v78);
              sub_2160FA70C(v72, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_2160F9B00(v73, &v78);
              sub_2160FA70C(v72, 1);
              __n128 v78 = 0uLL;
              int v79 = 0;
              uint64_t v66 = *((unsigned int *)v43 + 2);
              v78.n128_u64[0] = *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v43) - v66;
              v78.n128_u64[1] = (v46 - v66);
              v78.n128_u32[3] = *v57;
              sub_2160FE9C0((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v43 + 2) = v46;
            sub_2160FF230(v82, v43);
            sub_2160FA70C(a1, 1);
            ++v41;
          }
          while (v41 < v81[1]);
        }
      }
LABEL_49:
      sub_2160FA70C(a1, 0);
      uint64_t v16 = *((void *)&v83 + 1);
    }
    while (*((void *)&v83 + 1));
  }
  sub_2160FA70C(a1, 0);
  sub_2160FA804((uint64_t)a1, a5 == 1, 1);
  sub_2160FEA5C(v15);
  sub_216102220((uint64_t)a1, a2, a3);
  long long v67 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v67;
  uint64_t v68 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)&v84[1];
  *(void *)&v84[1] = v68;
  long long v69 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v69;
  LOBYTE(v68) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v68;
  if ((void)v80) {
    MEMORY[0x2166CA7C0](v80, 0x1000C8077774924);
  }
  sub_21610060C(v82);
  uint64_t result = *(void *)&v84[0];
  if (*(void *)&v84[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v84[0], 0x1000C8077774924);
  }
  return result;
}

void sub_216102100(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a21) {
    MEMORY[0x2166CA7C0](a21, 0x1000C8077774924);
  }
  sub_21610060C(&a27);
  uint64_t v30 = *(void *)(v27 - 144);
  if (v30) {
    MEMORY[0x2166CA7C0](v30, 0x1000C8077774924);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001ACLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:428: MARISA_MEMOR"
                   "Y_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216102220(uint64_t a1, uint64_t a2, long long *a3)
{
  memset(v13, 0, 41);
  sub_2160FD868((uint64_t *)v13, *(void *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
    unsigned int v7 = (unsigned int *)(*(void *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
  }
  long long v8 = *a3;
  uint64_t v9 = *(void *)&v13[1];
  *(void *)a3 = *(void *)&v13[0];
  *((void *)a3 + 1) = v6;
  v13[0] = v8;
  uint64_t v10 = *((void *)a3 + 2);
  *((void *)a3 + 2) = v9;
  *(void *)&v13[1] = v10;
  long long v11 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 40) = BYTE8(v13[2]);
  uint64_t result = v8;
  BYTE8(v13[2]) = v10;
  if ((void)v8) {
    return MEMORY[0x2166CA7C0](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_2161022F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216102318(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    uint64_t v7 = 0;
    goto LABEL_69;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = sub_2161027A0(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    int v9 = v8;
    unint64_t v10 = v5;
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    unint64_t v13 = v4;
    while (v10 < v11)
    {
      unint64_t v14 = *(unsigned int *)(v10 + 8);
      int v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(void *)v10 - a3 - 1);
      if (v15 > v8) {
        break;
      }
      if (v15 == v8)
      {
        uint64_t v16 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        uint64_t v17 = *(void *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(void *)unint64_t v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(void *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      unint64_t v18 = v11 - 24;
      do
      {
        unint64_t v11 = v18;
        unint64_t v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19) {
          int v20 = -1;
        }
        else {
          int v20 = *(unsigned __int8 *)(*(void *)v11 - a3 - 1);
        }
        if (v20 < v8) {
          break;
        }
        if (v20 == v8)
        {
          uint64_t v21 = *(void *)(v13 - 24);
          v13 -= 24;
          uint64_t v22 = *(void *)v11;
          *(void *)unint64_t v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          uint64_t v23 = *(void *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(void *)unint64_t v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(void *)(v13 + 12) = v23;
        }
        unint64_t v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      uint64_t v24 = *(void *)v10;
      int v25 = *(_DWORD *)(v10 + 16);
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v26 = *(void *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v24;
      *(void *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    uint64_t v44 = v7;
    if (v12 > v5)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = v12 + v27;
        uint64_t v29 = v10 + v27;
        uint64_t v30 = *(void *)(v12 + v27 - 24);
        int v31 = *(_DWORD *)(v12 + v27 - 8);
        *(void *)(v28 - 24) = *(void *)(v10 + v27 - 24);
        uint64_t v32 = *(void *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(void *)(v29 - 24) = v30;
        *(void *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      uint64_t v33 = *(void *)v13;
      int v34 = *(_DWORD *)(v13 + 16);
      *(void *)unint64_t v13 = *(void *)v11;
      uint64_t v35 = *(void *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v33;
      *(void *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    uint64_t v36 = v10 - v5;
    int64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    uint64_t v38 = v11 - v10;
    int64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      uint64_t v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          uint64_t v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25) {
            goto LABEL_53;
          }
          uint64_t v41 = sub_216102318(v5, v10, a3) + v44;
        }
        uint64_t v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          uint64_t v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          uint64_t v7 = v44;
        }
        else
        {
          uint64_t v7 = sub_216102318(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            unint64_t v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        unint64_t v5 = v10;
LABEL_64:
        unint64_t v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24) {
      goto LABEL_32;
    }
    if (v38 < 25)
    {
      uint64_t v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      uint64_t v7 = v44 + 1;
    }
    else
    {
      uint64_t v7 = sub_216102318(v10, v11, a3 + 1) + v44;
    }
    uint64_t v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += sub_216102318(v11, v4, a3);
      }
      unint64_t v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += sub_216102318(v5, v10, a3);
      }
      unint64_t v5 = v11;
    }
LABEL_65:
    uint64_t v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25) {
    v7 += sub_216102820(v5, v4, a3);
  }
  return v7;
}

uint64_t sub_2161027A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 8) <= a4) {
    int v4 = -1;
  }
  else {
    int v4 = *(unsigned __int8 *)(~a4 + *(void *)a1);
  }
  if (*(unsigned int *)(a2 + 8) <= a4) {
    int v5 = -1;
  }
  else {
    int v5 = *(unsigned __int8 *)(~a4 + *(void *)a2);
  }
  if (*(unsigned int *)(a3 + 8) <= a4) {
    int v6 = -1;
  }
  else {
    int v6 = *(unsigned __int8 *)(~a4 + *(void *)a3);
  }
  if (v4 <= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v4;
  }
  if (v4 >= v5) {
    int v4 = v5;
  }
  if (v4 <= v6) {
    int v4 = v6;
  }
  if (v7 >= v6) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t sub_216102820(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1 + 24;
  if (a1 + 24 >= a2) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = v3;
    if (v3 <= a1)
    {
      int v10 = 0;
    }
    else
    {
      while (1)
      {
        unint64_t v9 = v8 - 24;
        int v10 = sub_216102900(v8 - 24, v8, a3);
        if (v10 < 1) {
          break;
        }
        uint64_t v11 = *(void *)(v8 - 24);
        int v12 = *(_DWORD *)(v8 - 8);
        *(void *)(v8 - 24) = *(void *)v8;
        uint64_t v13 = *(void *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(void *)uint64_t v8 = v11;
        uint64_t v14 = *(void *)(v8 - 16);
        *(void *)(v8 - 16) = v13;
        *(void *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          int v10 = 1;
          break;
        }
      }
    }
    if (v10) {
      ++v7;
    }
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t sub_216102900(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v3 == v4) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v6 = v4 - a3;
    uint64_t v7 = (unsigned __int8 *)(*(void *)a2 + ~a3);
    uint64_t v8 = (unsigned __int8 *)(*(void *)a1 + ~a3);
    while (v6)
    {
      int v9 = *v8;
      int v10 = *v7;
      uint64_t result = (v9 - v10);
      if (v9 != v10) {
        return result;
      }
      --v6;
      --v7;
      --v8;
      if (!--v5) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

char *sub_216102970(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new[](12 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (_DWORD *)(a1[1] + 8);
    uint64_t v7 = result + 8;
    do
    {
      *((void *)v7 - 1) = *((void *)v6 - 1);
      int v8 = *v6;
      v6 += 3;
      _DWORD *v7 = v8;
      v7 += 3;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

uint64_t sub_216102A18(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_2160F7888(a2, 8uLL);
  *(void *)(a1 + 16) = sub_2160F7888(a2, v4);
  sub_2160F77AC(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4;

  return sub_2160FCA2C(a1);
}

uint64_t sub_216102A8C(uint64_t a1, uint64_t a2)
{
  size_t v6 = 0;
  sub_2160F7CBC(a2, (char *)&v6, 8uLL);
  size_t v4 = v6;
  sub_2160FA308((uint64_t *)a1, v6);
  sub_216102B08(a2, *(char **)(a1 + 8), v4);
  return sub_2160F7B90(a2, -(int)v6 & 7);
}

uint64_t sub_216102B08(uint64_t a1, char *a2, size_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x20000001FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:31: MARISA_NULL_"
                   "ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  return sub_2160F7CBC(a1, a2, a3);
}

uint64_t sub_216102B8C(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = 0;
  sub_2160F7CBC(a2, (char *)&v7, 8uLL);
  unint64_t v4 = v7 / 0xC;
  if (v7 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:213: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  sub_2160FB080((uint64_t *)a1, v7 / 0xC);
  sub_2160FD5EC(a2, *(char **)(a1 + 8), v4);
  return sub_2160F7B90(a2, -(int)v7 & 7);
}

uint64_t sub_216102C84(uint64_t a1, uint64_t a2)
{
  uint64_t __buf = *(void *)(a1 + 24);
  sub_2160F80B4(a2, (char *)&__buf, 8uLL);
  sub_216102CE8(a2, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return sub_2160F7F78(a2, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t sub_216102CE8(uint64_t a1, char *a2, size_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_"
                   "ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  return sub_2160F80B4(a1, a2, a3);
}

double sub_216102D6C(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 25) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  *(_OWORD *)((char *)a1 + 73) = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  *(_OWORD *)((char *)a1 + 185) = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  *(_OWORD *)((char *)a1 + 233) = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  *(_OWORD *)((char *)a1 + 137) = 0u;
  return result;
}

uint64_t sub_216102DA0(long long *a1, uint64_t a2, long long *a3, int a4)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x20000000DLL;
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:13: MARISA_NULL_ERROR: offsets == NULL";
    goto LABEL_28;
  }
  if (a4 == 0x2000) {
    goto LABEL_15;
  }
  if (a4 != 4096)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x500000024;
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:36: MARISA_CODE_ERROR: undefined tail mode";
LABEL_28:
    exception[3] = v17;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = 0;
    a4 = 4096;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8) + 16 * v6;
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8) {
        break;
      }
LABEL_11:
      if (++v6 == v5) {
        goto LABEL_15;
      }
    }
    uint64_t v9 = -v8;
    uint64_t v10 = *(void *)v7 + 1;
    while (*(unsigned char *)(v10 + v9))
    {
      if (__CFADD__(v9++, 1)) {
        goto LABEL_11;
      }
    }
    a4 = 0x2000;
  }
  else
  {
    a4 = 4096;
  }
LABEL_15:
  memset(v18, 0, 41);
  memset(v19, 0, 41);
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  _OWORD v19[3] = 0u;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  sub_21610300C((uint64_t)v18, a2, a3, a4);
  long long v12 = *a1;
  *a1 = v18[0];
  v18[0] = v12;
  uint64_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v18[1];
  *(void *)&v18[1] = v13;
  long long v14 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)((char *)&v18[1] + 8) = v14;
  LOBYTE(v13) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v18[2]);
  BYTE8(v18[2]) = v13;
  sub_2160FA358((uint64_t *)a1 + 6, (uint64_t *)v19);
  if ((void)v24) {
    MEMORY[0x2166CA7C0](v24, 0x1000C8077774924);
  }
  if ((void)v22) {
    MEMORY[0x2166CA7C0](v22, 0x1000C8077774924);
  }
  if ((void)v20) {
    MEMORY[0x2166CA7C0](v20, 0x1000C8077774924);
  }
  if (*(void *)&v19[0]) {
    MEMORY[0x2166CA7C0](*(void *)&v19[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v18[0];
  if (*(void *)&v18[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v18[0], 0x1000C8077774924);
  }
  return result;
}

void sub_216102FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21610300C(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (_DWORD *)(v9 + 12);
    do
    {
      *uint64_t v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v8 != v10);
  }
  sub_216103B5C(v9, v9 + 16 * v8, 0);
  memset(v34, 0, 41);
  unint64_t v12 = *(void *)(a2 + 24);
  LODWORD(v33[0]) = 0;
  sub_216103954((uint64_t *)v34, v12, v33);
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v13 = *(void *)(a2 + 24);
  if (v13)
  {
    long long v14 = v33;
    do
    {
      --v13;
      uint64_t v15 = *(void *)(a2 + 8);
      uint64_t v16 = v15 + 16 * v13;
      unint64_t v18 = (unsigned int *)(v16 + 8);
      uint64_t v17 = *(unsigned int *)(v16 + 8);
      if (!*(_DWORD *)(v16 + 8))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C6C5768;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
        exception[2] = 0x4000000AALL;
        exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:170: MARISA_RANGE_E"
                       "RROR: current.length() == 0";
        __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = *((unsigned int *)v14 + 2);
      while (v21 != v20)
      {
        if (*(unsigned __int8 *)(*v14 + v19) != *(unsigned __int8 *)(*(void *)v16 + v19)) {
          goto LABEL_13;
        }
        ++v20;
        --v19;
        if (v17 == v20) {
          goto LABEL_14;
        }
      }
      uint64_t v20 = *((unsigned int *)v14 + 2);
LABEL_13:
      if (v20 != v17)
      {
        uint64_t v22 = *((void *)&v34[0] + 1);
        goto LABEL_17;
      }
LABEL_14:
      uint64_t v22 = *((void *)&v34[0] + 1);
      if (v21)
      {
        *(_DWORD *)(*((void *)&v34[0] + 1) + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = v21
                                                                                             - v17
                                                                                             + *(_DWORD *)(*((void *)&v34[0] + 1) + 4 * *((unsigned int *)v14 + 3));
        goto LABEL_29;
      }
LABEL_17:
      *(_DWORD *)(v22 + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = *(void *)(a1 + 24);
      unint64_t v23 = *v18;
      if (v23)
      {
        for (unint64_t i = 0; i < v23; ++i)
        {
          char v32 = *(unsigned char *)(*(void *)v16 - v23 + i + 1);
          sub_2160F9B00((uint64_t *)a1, &v32);
          unint64_t v23 = *v18;
        }
        if (a4 != 4096)
        {
          if (v23 >= 2)
          {
            unint64_t v25 = 1;
            do
            {
              sub_2160FA70C((uint64_t *)(a1 + 48), 0);
              ++v25;
            }
            while (v25 < *v18);
          }
LABEL_27:
          sub_2160FA70C((uint64_t *)(a1 + 48), 1);
          goto LABEL_28;
        }
      }
      else if (a4 != 4096)
      {
        goto LABEL_27;
      }
      char v32 = 0;
      sub_2160F9B00((uint64_t *)a1, &v32);
LABEL_28:
      if (*(_DWORD *)(a1 + 28))
      {
        int v31 = __cxa_allocate_exception(0x20uLL);
        *int v31 = &unk_26C6C5768;
        v31[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
        v31[2] = 0x7000000C0;
        _OWORD v31[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:192: MARISA_SIZE_ERROR: b"
                 "uf_.size() > MARISA_UINT32_MAX";
        __cxa_throw(v31, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
      }
LABEL_29:
      long long v14 = (void *)v16;
    }
    while (v13);
  }
  sub_2160FEA5C((unsigned char *)a1);
  long long v26 = *a3;
  *a3 = v34[0];
  v34[0] = v26;
  uint64_t v27 = *((void *)a3 + 2);
  *((void *)a3 + 2) = *(void *)&v34[1];
  *(void *)&v34[1] = v27;
  long long v28 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v34[1] + 8);
  *(_OWORD *)((char *)&v34[1] + 8) = v28;
  LOBYTE(v27) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 40) = BYTE8(v34[2]);
  uint64_t result = v26;
  BYTE8(v34[2]) = v27;
  if ((void)v26) {
    return MEMORY[0x2166CA7C0](v26, 0x1000C8077774924);
  }
  return result;
}

void sub_216103338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x2166CA7C0](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21610337C(uint64_t *a1, uint64_t *a2)
{
  sub_2160FA3D0(a1, a2);

  return sub_2160FA358(a1 + 6, a2 + 6);
}

uint64_t sub_2161033BC(uint64_t a1, uint64_t *a2)
{
  memset(v8, 0, 41);
  memset(v9, 0, 41);
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  _OWORD v9[3] = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  sub_2161039DC(v8, a2);
  sub_2160FB220((uint64_t *)v9, a2);
  long long v4 = *(_OWORD *)a1;
  *(_OWORD *)a1 = v8[0];
  v8[0] = v4;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)&v8[1];
  *(void *)&v8[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)&v8[1] + 8);
  *(long long *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  sub_2160FA358((uint64_t *)(a1 + 48), (uint64_t *)v9);
  if ((void)v14) {
    MEMORY[0x2166CA7C0](v14, 0x1000C8077774924);
  }
  if ((void)v12) {
    MEMORY[0x2166CA7C0](v12, 0x1000C8077774924);
  }
  if ((void)v10) {
    MEMORY[0x2166CA7C0](v10, 0x1000C8077774924);
  }
  if (*(void *)&v9[0]) {
    MEMORY[0x2166CA7C0](*(void *)&v9[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_216103514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216103528(uint64_t a1, uint64_t a2)
{
  memset(v8, 0, 41);
  memset(v9, 0, 41);
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  _OWORD v9[3] = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  sub_216103A9C(v8, a2);
  sub_2160FB588((uint64_t *)v9, a2);
  long long v4 = *(_OWORD *)a1;
  *(_OWORD *)a1 = v8[0];
  v8[0] = v4;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)&v8[1];
  *(void *)&v8[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)&v8[1] + 8);
  *(long long *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  sub_2160FA358((uint64_t *)(a1 + 48), (uint64_t *)v9);
  if ((void)v14) {
    MEMORY[0x2166CA7C0](v14, 0x1000C8077774924);
  }
  if ((void)v12) {
    MEMORY[0x2166CA7C0](v12, 0x1000C8077774924);
  }
  if ((void)v10) {
    MEMORY[0x2166CA7C0](v10, 0x1000C8077774924);
  }
  if (*(void *)&v9[0]) {
    MEMORY[0x2166CA7C0](*(void *)&v9[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_216103680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216103694(uint64_t a1, uint64_t a2)
{
  sub_2161041B0(a1, a2);

  return sub_2160FDB20(a1 + 48, a2);
}

uint64_t *sub_2161036D4(uint64_t *result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  long long v4 = result;
  uint64_t v5 = *(uint64_t **)(a2 + 40);
  if (result[12])
  {
    do
    {
      uint64_t result = sub_2160F9B00(v5, (unsigned char *)(v4[2] + v3));
      uint64_t v6 = *(void *)(v4[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    uint64_t v7 = (unsigned char *)(result[2] + a3);
    if (*v7)
    {
      do
        uint64_t result = sub_2160F9B00(v5, v7);
      while (*++v7);
    }
  }
  return result;
}

uint64_t sub_216103760(void *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = a2[5];
  uint64_t v4 = a1[2];
  if (a1[12])
  {
    unsigned int v5 = *(_DWORD *)(v3 + 100);
    uint64_t v6 = *a2;
    unint64_t v7 = a2[1];
    do
    {
      if (*(unsigned __int8 *)(v4 + a3) != *(unsigned __int8 *)(v6 + v5)) {
        break;
      }
      *(_DWORD *)(v3 + 100) = ++v5;
      if ((*(void *)(a1[8] + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3)) {
        return 1;
      }
      ++a3;
    }
    while (v7 > v5);
  }
  else
  {
    unint64_t v12 = v4 + a3;
    uint64_t v8 = v4 + a3 - *(unsigned int *)(v3 + 100);
    uint64_t v9 = *a2;
    unint64_t v10 = a2[1];
    int v11 = *(unsigned __int8 *)v12;
    LODWORD(v12) = *(_DWORD *)(v3 + 100);
    while (v11 == *(unsigned __int8 *)(v9 + v12))
    {
      unint64_t v12 = (v12 + 1);
      *(_DWORD *)(v3 + 100) = v12;
      int v11 = *(unsigned __int8 *)(v8 + v12);
      if (!*(unsigned char *)(v8 + v12)) {
        return 1;
      }
      if (v10 <= v12) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_216103804(void *a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = a2[5];
  if (a1[12])
  {
    unsigned int v7 = *(_DWORD *)(v6 + 100);
    while (1)
    {
      uint64_t v8 = (unsigned char *)(a1[2] + v3);
      int v9 = *v8;
      int v10 = *(unsigned __int8 *)(*a2 + v7);
      BOOL v11 = v9 == v10;
      if (v9 != v10) {
        break;
      }
      sub_2160F9B00((uint64_t *)v6, v8);
      unsigned int v7 = *(_DWORD *)(v6 + 100) + 1;
      *(_DWORD *)(v6 + 100) = v7;
      if ((*(void *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
        break;
      }
      ++v3;
      if (a2[1] <= (unint64_t)v7)
      {
        do
        {
          sub_2160F9B00((uint64_t *)v6, (unsigned char *)(a1[2] + v3));
          uint64_t v12 = *(void *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
          ++v3;
        }
        while ((v12 & 1) == 0);
        return 1;
      }
    }
  }
  else
  {
    unint64_t v15 = a1[2] + a3;
    uint64_t v13 = (unsigned __int8 *)(v15 - *(unsigned int *)(v6 + 100));
    int v14 = *(unsigned __int8 *)v15;
    LODWORD(v15) = *(_DWORD *)(v6 + 100);
    while (1)
    {
      int v16 = *(unsigned __int8 *)(*a2 + v15);
      BOOL v11 = v14 == v16;
      if (v14 != v16) {
        break;
      }
      sub_2160F9B00((uint64_t *)v6, &v13[v15]);
      unint64_t v15 = (*(_DWORD *)(v6 + 100) + 1);
      *(_DWORD *)(v6 + 100) = v15;
      int v14 = v13[v15];
      if (!v13[v15]) {
        break;
      }
      if (a2[1] <= v15)
      {
        uint64_t v17 = &v13[v15];
        do
          sub_2160F9B00((uint64_t *)v6, v17);
        while (*++v17);
        return 1;
      }
    }
  }
  return v11;
}

uint64_t *sub_216103954(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v4 = a2;
  unsigned int v5 = result;
  unint64_t v6 = result[4];
  if (v6 < a2)
  {
    uint64_t v7 = 2 * v6;
    if (v6 >> 61) {
      uint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v6 > a2 >> 1) {
      a2 = v7;
    }
    uint64_t result = (uint64_t *)sub_2160FD99C(result, a2);
  }
  unint64_t v8 = v5[3];
  unint64_t v9 = v4 - v8;
  if (v4 > v8)
  {
    int v10 = (_DWORD *)(v5[1] + 4 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

uint64_t sub_2161039DC(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_216102A18((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_216103A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216103A9C(long long *a1, uint64_t a2)
{
  memset(v7, 0, 41);
  sub_2161040B0((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_216103B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216103B5C(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 161)
  {
    uint64_t v7 = 0;
    goto LABEL_68;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = sub_216103EF4(v5, v5 + 16 * ((unint64_t)v6 >> 5), v4 - 16, a3);
    int v9 = v8;
    unint64_t v10 = v5;
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    unint64_t v13 = v4;
    while (v10 < v11)
    {
      unint64_t v14 = *(unsigned int *)(v10 + 8);
      int v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(void *)v10 - a3);
      if (v15 > v8) {
        break;
      }
      if (v15 == v8)
      {
        uint64_t v16 = *(void *)v10;
        int v17 = *(_DWORD *)(v10 + 12);
        *(void *)unint64_t v10 = *(void *)v12;
        *(void *)(v10 + 8) = *(void *)(v12 + 8);
        *(void *)unint64_t v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_DWORD *)(v12 + 12) = v17;
        v12 += 16;
      }
LABEL_11:
      v10 += 16;
    }
    if (v10 < v11)
    {
      unint64_t v18 = v11 - 16;
      do
      {
        unint64_t v11 = v18;
        unint64_t v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19) {
          int v20 = -1;
        }
        else {
          int v20 = *(unsigned __int8 *)(*(void *)v11 - a3);
        }
        if (v20 < v8) {
          break;
        }
        if (v20 == v8)
        {
          uint64_t v21 = *(void *)(v13 - 16);
          v13 -= 16;
          uint64_t v22 = *(void *)v11;
          int v23 = *(_DWORD *)(v11 + 12);
          *(void *)unint64_t v11 = v21;
          *(void *)(v11 + 8) = *(void *)(v13 + 8);
          *(void *)unint64_t v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_DWORD *)(v13 + 12) = v23;
        }
        unint64_t v18 = v11 - 16;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      uint64_t v24 = *(void *)v10;
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v25 = *(void *)(v11 + 8);
      *(void *)unint64_t v11 = v24;
      uint64_t v26 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = v25;
      *(void *)(v11 + 8) = v26;
      goto LABEL_11;
    }
    uint64_t v42 = v7;
    while (v12 > v5)
    {
      uint64_t v28 = *(void *)(v12 - 16);
      v12 -= 16;
      uint64_t v27 = v28;
      uint64_t v29 = *(void *)(v10 - 16);
      v10 -= 16;
      *(void *)unint64_t v12 = v29;
      uint64_t v30 = *(void *)(v10 + 8);
      *(void *)unint64_t v10 = v27;
      uint64_t v31 = *(void *)(v12 + 8);
      *(void *)(v12 + 8) = v30;
      *(void *)(v10 + 8) = v31;
    }
    while (v13 < v4)
    {
      uint64_t v32 = *(void *)v13;
      *(void *)unint64_t v13 = *(void *)v11;
      uint64_t v33 = *(void *)(v11 + 8);
      *(void *)unint64_t v11 = v32;
      uint64_t v34 = *(void *)(v13 + 8);
      *(void *)(v13 + 8) = v33;
      *(void *)(v11 + 8) = v34;
      v11 += 16;
      v13 += 16;
    }
    uint64_t v35 = v10 - v5;
    uint64_t v36 = (uint64_t)(v10 - v5) >> 4;
    uint64_t v37 = v11 - v10;
    if (v36 <= (uint64_t)(v11 - v10) >> 4)
    {
      uint64_t v38 = v4 - v11;
      if (v37 >> 4 >= (uint64_t)(v4 - v11) >> 4)
      {
        if (v35 == 16)
        {
          uint64_t v39 = v42 + 1;
        }
        else
        {
          if (v35 < 17) {
            goto LABEL_52;
          }
          uint64_t v39 = sub_216103B5C(v5, v10, a3) + v42;
        }
        uint64_t v42 = v39;
LABEL_52:
        if (v38 == 16)
        {
          uint64_t v7 = v42 + 1;
        }
        else if (v38 < 17)
        {
          uint64_t v7 = v42;
        }
        else
        {
          uint64_t v7 = sub_216103B5C(v11, v4, a3) + v42;
        }
        if (v37 == 16)
        {
          ++v7;
        }
        else if (v37 >= 17)
        {
          if (v9 == -1)
          {
            ++v7;
            unint64_t v5 = v11;
            goto LABEL_63;
          }
          ++a3;
        }
        unint64_t v5 = v10;
LABEL_63:
        unint64_t v4 = v11;
        goto LABEL_64;
      }
    }
    if (v37 == 16) {
      goto LABEL_31;
    }
    if (v37 < 17)
    {
      uint64_t v7 = v42;
    }
    else if (v8 == -1)
    {
LABEL_31:
      uint64_t v7 = v42 + 1;
    }
    else
    {
      uint64_t v7 = sub_216103B5C(v10, v11, a3 + 1) + v42;
    }
    uint64_t v40 = v4 - v11;
    if (v36 >= (uint64_t)(v4 - v11) >> 4)
    {
      if (v40 == 16)
      {
        ++v7;
      }
      else if (v40 >= 17)
      {
        v7 += sub_216103B5C(v11, v4, a3);
      }
      unint64_t v4 = v10;
    }
    else
    {
      if (v35 == 16)
      {
        ++v7;
      }
      else if (v35 >= 17)
      {
        v7 += sub_216103B5C(v5, v10, a3);
      }
      unint64_t v5 = v11;
    }
LABEL_64:
    uint64_t v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 160);
LABEL_68:
  if (v6 >= 17) {
    v7 += sub_216103F74(v5, v4, a3);
  }
  return v7;
}

uint64_t sub_216103EF4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 8) <= a4) {
    int v4 = -1;
  }
  else {
    int v4 = *(unsigned __int8 *)(*(void *)a1 - a4);
  }
  if (*(unsigned int *)(a2 + 8) <= a4) {
    int v5 = -1;
  }
  else {
    int v5 = *(unsigned __int8 *)(*(void *)a2 - a4);
  }
  if (*(unsigned int *)(a3 + 8) <= a4) {
    int v6 = -1;
  }
  else {
    int v6 = *(unsigned __int8 *)(*(void *)a3 - a4);
  }
  if (v4 <= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v4;
  }
  if (v4 >= v5) {
    int v4 = v5;
  }
  if (v4 <= v6) {
    int v4 = v6;
  }
  if (v7 >= v6) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t sub_216103F74(unint64_t a1, unint64_t a2, unint64_t a3)
{
  long long v3 = (void *)(a1 + 16);
  if (a1 + 16 >= a2) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    int v8 = v3;
    if ((unint64_t)v3 <= a1)
    {
      int v10 = 0;
    }
    else
    {
      while (1)
      {
        int v9 = v8 - 2;
        int v10 = sub_216104044((uint64_t)(v8 - 2), (uint64_t)v8, a3);
        if (v10 < 1) {
          break;
        }
        uint64_t v11 = *(v8 - 2);
        *(v8 - 2) = *v8;
        uint64_t v12 = v8[1];
        *int v8 = v11;
        uint64_t v13 = *(v8 - 1);
        *(v8 - 1) = v12;
        v8[1] = v13;
        v8 -= 2;
        if ((unint64_t)v9 <= a1)
        {
          int v10 = 1;
          break;
        }
      }
    }
    if (v10) {
      ++v7;
    }
    v3 += 2;
  }
  while ((unint64_t)v3 < a2);
  return v7;
}

uint64_t sub_216104044(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v3 == v4) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v6 = v4 - a3;
    uint64_t v7 = (unsigned __int8 *)(*(void *)a2 - a3);
    int v8 = (unsigned __int8 *)(*(void *)a1 - a3);
    while (v6)
    {
      int v9 = *v8;
      int v10 = *v7;
      uint64_t result = (v9 - v10);
      if (v9 != v10) {
        return result;
      }
      --v6;
      --v7;
      --v8;
      if (!--v5) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

uint64_t sub_2161040B0(uint64_t a1, uint64_t a2)
{
  size_t v6 = 0;
  sub_2160F7CBC(a2, (char *)&v6, 8uLL);
  size_t v4 = v6;
  sub_2160FA308((uint64_t *)a1, v6);
  sub_21610412C(a2, *(char **)(a1 + 8), v4);
  return sub_2160F7B90(a2, -(int)v6 & 7);
}

uint64_t sub_21610412C(uint64_t a1, char *a2, size_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/reader.h";
    exception[2] = 0x20000001FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/reader.h:31: MA"
                   "RISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  return sub_2160F7CBC(a1, a2, a3);
}

uint64_t sub_2161041B0(uint64_t a1, uint64_t a2)
{
  uint64_t __buf = *(void *)(a1 + 24);
  sub_2160F80B4(a2, (char *)&__buf, 8uLL);
  sub_216104214(a2, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return sub_2160F7F78(a2, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t sub_216104214(uint64_t a1, char *a2, size_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/writer.h";
    exception[2] = 0x20000001ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/writer.h:30: MA"
                   "RISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  return sub_2160F80B4(a1, a2, a3);
}

uint64_t sub_216104298(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 9;
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  unint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8 * (a2 >> 6)) & ~(-1 << a2);
  unint64_t v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t sub_2161043E0(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[16];
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3;
    unint64_t v8 = v3-- << 9;
    int v9 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  uint64_t v11 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v12 = v11[1];
  unint64_t v13 = a2 - (v3 << 9) + *v11;
  uint64_t v14 = 8 * v3;
  if (v13 >= 256 - (v12 >> 23))
  {
    unint64_t v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    uint64_t v16 = (v15 >> 9) & 0x1FF;
    if (v13 >= 384 - v16)
    {
      uint64_t v18 = (v15 >> 18) & 0x1FF;
      if (v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        unint64_t v13 = v13 + v18 - 448;
      }
      else
      {
        v14 |= 6uLL;
        unint64_t v13 = v13 + v16 - 384;
      }
    }
    else if (v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      unint64_t v13 = v13 + (v15 & 0x1FF) - 320;
    }
    else
    {
      v14 |= 4uLL;
      unint64_t v13 = (v12 >> 23) + v13 - 256;
    }
  }
  else if (v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    uint64_t v17 = (v12 >> 15);
    if (v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      unint64_t v13 = v13 + v17 - 192;
    }
    else
    {
      v14 |= 2uLL;
      unint64_t v13 = v13 + (v12 >> 7) - 128;
    }
  }
  else if (v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    unint64_t v13 = (v12 & 0x7F) + v13 - 64;
  }
  return sub_2161045C4(v13, v14 << 6, ~*(void *)(a1[2] + 8 * v14));
}

unint64_t sub_2161045C4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  uint64_t v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  unint64_t v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * a1
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
       + byte_21636B688[256 * (a1 - ((unint64_t)(0x101010101010100 * v4) >> v5))
                      + (a3 >> v5)];
}

unint64_t sub_21610464C(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[22];
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3--;
    unint64_t v8 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  unsigned int v10 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v11 = v10[1];
  unint64_t v12 = a2 - *v10;
  uint64_t v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    unint64_t v23 = v11 >> 23;
    unint64_t v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    unint64_t v25 = (v24 >> 9) & 0x1FF;
    unint64_t v26 = (v24 >> 18) & 0x1FF;
    uint64_t v27 = v13 | 7;
    BOOL v28 = v12 >= v26;
    if (v12 < v26) {
      uint64_t v29 = v12 - v25;
    }
    else {
      uint64_t v29 = v12 - v26;
    }
    if (!v28) {
      uint64_t v27 = v13 | 6;
    }
    unint64_t v30 = v24 & 0x1FF;
    uint64_t v31 = v13 | 5;
    uint64_t v32 = v13 | 4;
    uint64_t v33 = v12 - v23;
    BOOL v34 = v12 >= v30;
    if (v12 < v30) {
      uint64_t v21 = v33;
    }
    else {
      uint64_t v21 = v12 - v30;
    }
    if (v34) {
      uint64_t v32 = v31;
    }
    if (v12 < v25)
    {
      uint64_t v22 = v32;
    }
    else
    {
      uint64_t v21 = v29;
      uint64_t v22 = v27;
    }
  }
  else
  {
    unint64_t v14 = v11 >> 7;
    unint64_t v15 = (v11 >> 15);
    uint64_t v16 = v12 - (v11 >> 7);
    if (v12 < v15)
    {
      uint64_t v17 = v13 | 2;
    }
    else
    {
      uint64_t v16 = v12 - v15;
      uint64_t v17 = v13 | 3;
    }
    unint64_t v18 = v11 & 0x7F;
    BOOL v20 = v12 >= v18;
    unint64_t v19 = v12 - v18;
    if (v20) {
      v13 |= 1uLL;
    }
    else {
      unint64_t v19 = v12;
    }
    BOOL v20 = v12 >= v14;
    if (v12 < v14) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v16;
    }
    if (v20) {
      uint64_t v22 = v17;
    }
    else {
      uint64_t v22 = v13;
    }
  }
  return sub_2161045C4(v21, v22 << 6, *(void *)(a1[2] + 8 * v22));
}

void sub_2161047C0(void *a1, void *a2, int a3, int a4)
{
  unint64_t v8 = a1 + 8;
  unint64_t v9 = a2[6];
  if ((v9 & 0x1FF) != 0) {
    uint64_t v10 = (v9 >> 9) + 1;
  }
  else {
    uint64_t v10 = v9 >> 9;
  }
  sub_2160FD568(v8, v10 + 1);
  unint64_t v11 = a2[6];
  if (v11)
  {
    unint64_t v12 = 0;
    int v13 = 0;
    __int16 v14 = 0;
    do
    {
      if ((v12 & 0x3F) == 0)
      {
        unint64_t v15 = v12 >> 9;
        switch((v12 >> 6) & 7)
        {
          case 1uLL:
            uint64_t v16 = (_DWORD *)(a1[9] + 12 * v15);
            unsigned int v17 = v16[1] & 0xFFFFFF80 | (v13 - *v16) & 0x7F;
            goto LABEL_13;
          case 2uLL:
            uint64_t v16 = (_DWORD *)(a1[9] + 12 * v15);
            unsigned int v17 = v16[1] & 0xFFFF807F | ((v13 - *(unsigned char *)v16) << 7);
            goto LABEL_13;
          case 3uLL:
            uint64_t v16 = (_DWORD *)(a1[9] + 12 * v15);
            unsigned int v17 = v16[1] & 0xFF807FFF | ((v13 - *(unsigned char *)v16) << 15);
            goto LABEL_13;
          case 4uLL:
            uint64_t v16 = (_DWORD *)(a1[9] + 12 * v15);
            unsigned int v17 = v16[1] & 0x7FFFFF | ((unsigned __int16)(v13 - *(_WORD *)v16) << 23);
LABEL_13:
            v16[1] = v17;
            break;
          case 5uLL:
            unint64_t v18 = (_DWORD *)(a1[9] + 12 * v15);
            unsigned int v19 = v18[2] & 0xFFFFFE00 | (v13 - *v18) & 0x1FF;
            goto LABEL_17;
          case 6uLL:
            unint64_t v18 = (_DWORD *)(a1[9] + 12 * v15);
            unsigned int v19 = v18[2] & 0xFFFC01FF | (((v13 - *v18) & 0x1FF) << 9);
            goto LABEL_17;
          case 7uLL:
            unint64_t v18 = (_DWORD *)(a1[9] + 12 * v15);
            unsigned int v19 = v18[2] & 0xF803FFFF | (((v13 - *v18) & 0x1FF) << 18);
LABEL_17:
            v18[2] = v19;
            break;
          default:
            *(_DWORD *)(a1[9] + 12 * v15) = v13;
            break;
        }
      }
      if ((*(void *)(a2[2] + 8 * (v12 >> 6)) >> (v12 & 0x3F)))
      {
        if (a4 && (v13 & 0x1FF) == 0)
        {
          int v36 = v12;
          sub_216104BB4(a1 + 20, &v36);
        }
        ++v13;
      }
      else
      {
        if (a3 && (v14 & 0x1FF) == 0)
        {
          int v36 = v12;
          sub_216104BB4(a1 + 14, &v36);
        }
        ++v14;
      }
      ++v12;
      unint64_t v11 = a2[6];
    }
    while (v12 < v11);
    if ((v11 & 0x1FF) != 0)
    {
      unint64_t v20 = (v11 - 1) >> 9;
      switch(((unint64_t)(v11 - 1) >> 6) & 7)
      {
        case 0uLL:
          uint64_t v21 = a1[9];
          uint64_t v22 = (_DWORD *)(v21 + 12 * v20);
          int v23 = v13 - *v22;
          unsigned int v24 = v22[1] & 0xFFFFFF80 | v23 & 0x7F;
          v22[1] = v24;
          goto LABEL_33;
        case 1uLL:
          uint64_t v21 = a1[9];
          unint64_t v25 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v24 = v25[1];
          int v23 = v13 - *v25;
LABEL_33:
          unsigned int v26 = v24 & 0xFFFF807F | (v23 << 7);
          *(_DWORD *)(v21 + 12 * v20 + 4) = v26;
          goto LABEL_35;
        case 2uLL:
          uint64_t v21 = a1[9];
          uint64_t v27 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v26 = v27[1];
          int v23 = v13 - *v27;
LABEL_35:
          unsigned int v28 = v26 & 0xFF807FFF | (v23 << 15);
          *(_DWORD *)(v21 + 12 * v20 + 4) = v28;
          goto LABEL_37;
        case 3uLL:
          uint64_t v21 = a1[9];
          uint64_t v29 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v28 = v29[1];
          int v23 = v13 - *v29;
LABEL_37:
          *(_DWORD *)(v21 + 12 * v20 + 4) = v28 & 0x7FFFFF | ((unsigned __int16)v23 << 23);
          goto LABEL_39;
        case 4uLL:
          uint64_t v21 = a1[9];
          int v23 = v13 - *(_DWORD *)(v21 + 12 * v20);
LABEL_39:
          uint64_t v30 = v21 + 12 * v20;
          unsigned int v31 = *(_DWORD *)(v30 + 8) & 0xFFFFFE00 | v23 & 0x1FF;
          *(_DWORD *)(v30 + 8) = v31;
          goto LABEL_40;
        case 5uLL:
          uint64_t v21 = a1[9];
          BOOL v34 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v31 = v34[2];
          int v23 = v13 - *v34;
LABEL_40:
          unsigned int v32 = v31 & 0xFFFC01FF | ((v23 & 0x1FF) << 9);
          *(_DWORD *)(v21 + 12 * v20 + 8) = v32;
          goto LABEL_41;
        case 6uLL:
          uint64_t v21 = a1[9];
          uint64_t v35 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v32 = v35[2];
          int v23 = v13 - *v35;
LABEL_41:
          *(_DWORD *)(v21 + 12 * v20 + 8) = v32 & 0xF803FFFF | ((v23 & 0x1FF) << 18);
          break;
        default:
          break;
      }
    }
  }
  else
  {
    int v13 = 0;
  }
  a1[6] = v11;
  a1[7] = a2[7];
  *(_DWORD *)(a1[9] + 12 * a1[11] - 12) = v13;
  if (a3)
  {
    int v36 = a2[6];
    sub_216104BB4(a1 + 14, &v36);
    sub_216104C24((_DWORD *)a1 + 28);
  }
  if (a4)
  {
    uint64_t v33 = a1 + 20;
    int v36 = a2[6];
    sub_216104BB4(v33, &v36);
    sub_216104C24(v33);
  }
}

uint64_t *sub_216104BB4(uint64_t *result, _DWORD *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[3];
  unint64_t v5 = result[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 >> 61) {
      uint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t result = (uint64_t *)sub_2160FD99C(result, v8);
    uint64_t v4 = v3[3];
    unint64_t v6 = v4 + 1;
  }
  *(_DWORD *)(v3[1] + 4 * v4) = *a2;
  v3[3] = v6;
  return result;
}

_DWORD *sub_216104C24(_DWORD *result)
{
  if (*((unsigned char *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/vector/vector.h:100: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v1 = *((void *)result + 3);
  if (v1 != *((void *)result + 4))
  {
    return sub_2160FD99C((uint64_t *)result, v1);
  }
  return result;
}

double sub_216104CC4(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_216104CDC(uint64_t *a1, size_t __sz)
{
  if (a1[7] == (unint64_t)a1[11] >> 8) {
    sub_216104D64(a1);
  }
  if (__sz < 0x401)
  {
    size_t v5 = a1[10];
    if (v5 < __sz)
    {
      sub_2161052CC(a1);
      size_t v5 = a1[10];
    }
    uint64_t result = a1[9];
    a1[9] = result + __sz;
    a1[10] = v5 - __sz;
  }
  else
  {
    sub_2161050C0(a1, __sz);
    return *(void *)(a1[3] + 8 * a1[4] - 8);
  }
  return result;
}

uint64_t sub_216104D64(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2 == a1[8])
  {
    if (v2) {
      unint64_t v3 = 2 * v2;
    }
    else {
      unint64_t v3 = 1;
    }
    BOOL v4 = v3 >> 61 != 0;
    if (8 * v3 >= 0xFFFFFFFFFFFFFFF0) {
      BOOL v4 = 1;
    }
    if (v4) {
      size_t v5 = -1;
    }
    else {
      size_t v5 = 8 * v3 + 16;
    }
    unint64_t v6 = operator new[](v5, MEMORY[0x263F8C180]);
    if (!v6)
    {
      uint64_t v20 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x8000000A9;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:169: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    *unint64_t v6 = 8;
    v6[1] = v3;
    uint64_t v7 = (uint64_t)(v6 + 2);
    if (v3) {
      bzero(v6 + 2, 8 * v3);
    }
    uint64_t v20 = v7;
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v9 = a1[6];
        uint64_t v10 = v20;
        uint64_t v11 = *(void *)(v9 + 8 * i);
        *(void *)(v9 + 8 * i) = *(void *)(v20 + 8 * i);
        *(void *)(v10 + 8 * i) = v11;
      }
      uint64_t v7 = v20;
    }
    uint64_t v12 = a1[6];
    a1[6] = v7;
    uint64_t v20 = v12;
    a1[8] = v3;
    sub_216105550(&v20);
  }
  int v13 = operator new[](0x1000uLL, MEMORY[0x263F8C180]);
  if (!v13)
  {
    unint64_t v18 = __cxa_allocate_exception(0x20uLL);
    *unint64_t v18 = &unk_26C6C5768;
    v18[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    v18[2] = 0x8000000B1;
    _OWORD v18[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:177: MARISA_MEMORY_ERROR: new_block.get() == NULL";
    __cxa_throw(v18, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  __int16 v14 = v13;
  bzero(v13, 0x1000uLL);
  uint64_t v16 = a1[6];
  uint64_t v15 = a1[7];
  a1[7] = v15 + 1;
  uint64_t result = *(void *)(v16 + 8 * v15);
  *(void *)(v16 + 8 * v15) = v14;
  if (result) {
    return MEMORY[0x2166CA7C0](result, 0x1050C80717B85FCLL);
  }
  return result;
}

void sub_216104F60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216105550((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_216104F74(uint64_t *a1, char *a2, size_t __sz, float a4)
{
  unint64_t v6 = a2;
  if (!a2 && __sz)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    exception[2] = 0x20000003DLL;
    uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:61: MARISA_NULL_ERROR: (ptr == NULL) && (length != 0)";
    goto LABEL_10;
  }
  if (HIDWORD(__sz))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    exception[2] = 0x70000003ELL;
    uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:62: MARISA_SIZE_ERROR: length > MARISA_UINT32_MAX";
LABEL_10:
    exception[3] = v15;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t result = (unsigned char *)sub_216104CDC(a1, __sz);
  if (__sz)
  {
    uint64_t v9 = result;
    size_t v10 = __sz;
    do
    {
      char v11 = *v6++;
      *v9++ = v11;
      --v10;
    }
    while (v10);
  }
  uint64_t v12 = *(void *)(a1[6] + (((unint64_t)a1[11] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[11];
  *(void *)uint64_t v12 = result;
  *(_DWORD *)(v12 + 8) = __sz;
  *(float *)(v12 + 12) = a4;
  uint64_t v13 = a1[12] + __sz;
  ++a1[11];
  a1[12] = v13;
  return result;
}

void *sub_2161050C0(void *a1, size_t __sz)
{
  uint64_t v4 = a1[4];
  if (v4 == a1[5])
  {
    if (v4) {
      unint64_t v5 = 2 * v4;
    }
    else {
      unint64_t v5 = 1;
    }
    BOOL v6 = v5 >> 61 != 0;
    if (8 * v5 >= 0xFFFFFFFFFFFFFFF0) {
      BOOL v6 = 1;
    }
    if (v6) {
      size_t v7 = -1;
    }
    else {
      size_t v7 = 8 * v5 + 16;
    }
    uint64_t v8 = operator new[](v7, MEMORY[0x263F8C180]);
    if (!v8)
    {
      uint64_t v21 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x800000097;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:151: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    *uint64_t v8 = 8;
    v8[1] = v5;
    uint64_t v9 = (uint64_t)(v8 + 2);
    if (v5) {
      bzero(v8 + 2, 8 * v5);
    }
    uint64_t v21 = v9;
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = v21;
        uint64_t v13 = *(void *)(v11 + 8 * i);
        *(void *)(v11 + 8 * i) = *(void *)(v21 + 8 * i);
        *(void *)(v12 + 8 * i) = v13;
      }
      uint64_t v9 = v21;
    }
    uint64_t v14 = a1[3];
    a1[3] = v9;
    uint64_t v21 = v14;
    a1[5] = v5;
    sub_2161054D0(&v21);
  }
  uint64_t result = operator new[](__sz, MEMORY[0x263F8C180]);
  if (!result)
  {
    unsigned int v19 = __cxa_allocate_exception(0x20uLL);
    *unsigned int v19 = &unk_26C6C5768;
    v19[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    v19[2] = 0x80000009FLL;
    _OWORD v19[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:159: MARISA_MEMORY_ERROR: new_block.get() == NULL";
    __cxa_throw(v19, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v17 = a1[3];
  uint64_t v16 = a1[4];
  a1[4] = v16 + 1;
  uint64_t v18 = *(void *)(v17 + 8 * v16);
  *(void *)(v17 + 8 * v16) = result;
  if (v18) {
    return (void *)MEMORY[0x2166CA7C0](v18, 0x1000C8077774924);
  }
  return result;
}

void sub_2161052B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161054D0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2161052CC(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[1];
  if (v2 == result[2])
  {
    if (v2) {
      unint64_t v3 = 2 * v2;
    }
    else {
      unint64_t v3 = 1;
    }
    BOOL v4 = v3 >> 61 != 0;
    if (8 * v3 >= 0xFFFFFFFFFFFFFFF0) {
      BOOL v4 = 1;
    }
    if (v4) {
      size_t v5 = -1;
    }
    else {
      size_t v5 = 8 * v3 + 16;
    }
    BOOL v6 = operator new[](v5, MEMORY[0x263F8C180]);
    if (!v6)
    {
      uint64_t v16 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6C5768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x800000081;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:129: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    *BOOL v6 = 8;
    v6[1] = v3;
    uint64_t v7 = (uint64_t)(v6 + 2);
    if (v3) {
      bzero(v6 + 2, 8 * v3);
    }
    uint64_t v16 = v7;
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v9 = v16;
        uint64_t v10 = *(void *)(*v1 + 8 * i);
        *(void *)(*v1 + 8 * i) = *(void *)(v16 + 8 * i);
        *(void *)(v9 + 8 * i) = v10;
      }
      uint64_t v7 = v16;
    }
    uint64_t v11 = *v1;
    uint64_t *v1 = v7;
    uint64_t v16 = v11;
    v1[2] = v3;
    uint64_t result = sub_2161054D0(&v16);
    uint64_t v2 = v1[1];
  }
  uint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 8 * v2);
  if (!v13)
  {
    uint64_t result = (uint64_t *)operator new[](0x1000uLL, MEMORY[0x263F8C180]);
    if (!result)
    {
      uint64_t v15 = __cxa_allocate_exception(0x20uLL);
      *uint64_t v15 = &unk_26C6C5768;
      v15[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      v15[2] = 0x80000008ALL;
      v15[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:138: MARISA_MEMORY_ERROR: new_block.get() == NULL";
      __cxa_throw(v15, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
    }
    *(void *)(v12 + 8 * v2) = result;
    uint64_t v13 = *(void *)(*v1 + 8 * v2);
  }
  v1[1] = v2 + 1;
  v1[9] = v13;
  v1[10] = 4096;
  return result;
}

void sub_2161054BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161054D0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2161054D0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    uint64_t v4 = v2 - 8;
    uint64_t v3 = v5;
    if (v5)
    {
      uint64_t v6 = 8 * v3;
      do
      {
        uint64_t v7 = *(void *)(v4 + v6);
        if (v7) {
          MEMORY[0x2166CA7C0](v7, 0x1000C8077774924);
        }
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x2166CA7C0](v4 - 8, 0x10C80436913F5);
  }
  return a1;
}

uint64_t *sub_216105550(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    uint64_t v4 = v2 - 8;
    uint64_t v3 = v5;
    if (v5)
    {
      uint64_t v6 = 8 * v3;
      do
      {
        uint64_t v7 = *(void *)(v4 + v6);
        if (v7) {
          MEMORY[0x2166CA7C0](v7, 0x1050C80717B85FCLL);
        }
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x2166CA7C0](v4 - 8, 0x20C8093837F09);
  }
  return a1;
}

void *sub_2161055D0(void *result)
{
  void *result = 0;
  return result;
}

void **sub_2161055DC(void **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = operator new(0x470uLL, MEMORY[0x263F8C180]);
  if (!v6)
  {
    uint64_t v11 = 0;
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x80000000ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:14: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v7 = v6;
  sub_2160F86B8((uint64_t)v6);
  uint64_t v11 = v7;
  sub_2160F8920((uint64_t)v7, a2, a3);
  uint64_t v8 = *a1;
  *a1 = v7;
  uint64_t v11 = v8;
  return sub_2160FDFEC(&v11);
}

void sub_2161056C4(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7E0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void **sub_2161056F0(void **a1, char *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:21: MARISA_NULL_ERROR: filename == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v4 = operator new(0x470uLL, MEMORY[0x263F8C180]);
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v9 = &unk_26C6C5768;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    void v9[2] = 0x800000018;
    _OWORD v9[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:24: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(v9, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v5 = v4;
  sub_2160F86B8((uint64_t)v4);
  uint64_t v11 = v5;
  sub_2160F73E0((uint64_t)v10);
  sub_2160F745C(v10, a2);
  sub_2160F8E40((uint64_t)v11, (uint64_t *)v10);
  uint64_t v6 = *a1;
  *a1 = v11;
  uint64_t v11 = v6;
  sub_2160F7458((uint64_t)v10);
  return sub_2160FDFEC(&v11);
}

void sub_216105850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2160FDFEC((void **)va);
  _Unwind_Resume(a1);
}

void **sub_216105890(void **a1, uint64_t a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:33: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v6 = operator new(0x470uLL, MEMORY[0x263F8C180]);
  if (!v6)
  {
    uint64_t v13 = 0;
    uint64_t v11 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v11 = &unk_26C6C5768;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    v11[2] = 0x800000024;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:36: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(v11, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v7 = v6;
  sub_2160F86B8((uint64_t)v6);
  uint64_t v13 = v7;
  sub_2160F73E0((uint64_t)v12);
  sub_2160F76FC(v12, a2, a3);
  sub_2160F8E40((uint64_t)v13, (uint64_t *)v12);
  uint64_t v8 = *a1;
  *a1 = v13;
  uint64_t v13 = v8;
  sub_2160F7458((uint64_t)v12);
  return sub_2160FDFEC(&v13);
}

void sub_2161059FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2160FDFEC((void **)va);
  _Unwind_Resume(a1);
}

void **sub_216105A3C(void **a1, char *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000002DLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:45: MARISA_NULL_ERROR: filename == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v4 = operator new(0x470uLL, MEMORY[0x263F8C180]);
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v9 = &unk_26C6C5768;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    void v9[2] = 0x800000030;
    _OWORD v9[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:48: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(v9, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v5 = v4;
  sub_2160F86B8((uint64_t)v4);
  uint64_t v11 = v5;
  sub_2160F7964((uint64_t)v10);
  sub_2160F79B0((uint64_t)v10, a2);
  sub_2160F9140((uint64_t)v11, (uint64_t)v10);
  uint64_t v6 = *a1;
  *a1 = v11;
  uint64_t v11 = v6;
  sub_2160F797C((uint64_t)v10);
  return sub_2160FDFEC(&v11);
}

void sub_216105B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2160FDFEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216105BDC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (!*(void *)(a2 + 40))
    {
      sub_2160F711C(a2);
      uint64_t result = *a1;
    }
    return sub_2160F959C(result, a2);
  }
  return result;
}

unint64_t sub_216105C3C(unint64_t *a1, uint64_t a2)
{
  unint64_t result = *a1;
  if (result)
  {
    if (!*(void *)(a2 + 40))
    {
      sub_2160F711C(a2);
      unint64_t result = *a1;
    }
    return sub_2160F987C(result, a2);
  }
  return result;
}

uint64_t sub_216105C9C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (!*(void *)(a2 + 40))
    {
      sub_2160F711C(a2);
      uint64_t result = *a1;
    }
    return sub_2160F9B6C(result, a2);
  }
  return result;
}

uint64_t sub_216105CFC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (!*(void *)(a2 + 40))
    {
      sub_2160F711C(a2);
      uint64_t result = *a1;
    }
    return sub_2160F9C54(result, a2);
  }
  return result;
}

uint64_t sub_216105D5C(uint64_t a1)
{
  if (*(void *)a1) {
    return *(void *)(*(void *)a1 + 264);
  }
  else {
    return 0;
  }
}

void **sub_216105D74(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  return sub_2160FDFEC(&v2);
}

uint64_t sub_216105DA4(uint64_t a1, void **a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000E9;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:233: MARISA_NULL_ERROR: trie == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  return sub_216105E24(a1, a2);
}

uint64_t sub_216105E24(uint64_t a1, void **a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000C8;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:200: MARISA_NULL_ERROR: trie == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v4 = operator new(0x470uLL, MEMORY[0x263F8C180]);
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v9 = &unk_26C6C5768;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    void v9[2] = 0x8000000CCLL;
    _OWORD v9[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:204: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(v9, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v5 = v4;
  sub_2160F86B8((uint64_t)v4);
  uint64_t v11 = v5;
  sub_2160F7964((uint64_t)v10);
  sub_2160F7B64((uint64_t)v10, a1);
  sub_2160F9140((uint64_t)v11, (uint64_t)v10);
  uint64_t v6 = *a2;
  *a2 = v11;
  uint64_t v11 = v6;
  sub_2160F797C((uint64_t)v10);
  sub_2160FDFEC(&v11);
  return a1;
}

void sub_216105F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2160FDFEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216105FCC(uint64_t a1, uint64_t *a2)
{
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6C5768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:213: MARISA_STATE_ERROR: trie.trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BAD88, (void (*)(void *))std::exception::~exception);
  }
  sub_2160F7964((uint64_t)v6);
  sub_2160F7B64((uint64_t)v6, a1);
  sub_2160F9484(*a2, (uint64_t)v6);
  sub_2160F797C((uint64_t)v6);
  return a1;
}

void sub_21610608C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2161060A4(uint64_t *a1, uint64_t *a2, void *a3, unsigned int a4)
{
  uint64_t v8 = operator new(0x470uLL, MEMORY[0x263F8C180]);
  if (!v8)
  {
    uint64_t v13 = 0;
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x800000014;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:20: MARISA_"
                   "MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v9 = (uint64_t)v8;
  sub_216107154((uint64_t)v8);
  uint64_t v13 = v9;
  sub_2161073C0(v9, a2, a3, a4);
  uint64_t v10 = *a1;
  *a1 = v9;
  uint64_t v13 = v10;
  return sub_21610685C(&v13);
}

void sub_21610619C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7E0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

void *sub_2161061CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000029;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:41: MARISA_"
                   "NULL_ERROR: (ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v6 = operator new(0x470uLL, MEMORY[0x263F8C180]);
  if (!v6)
  {
    uint64_t v13 = 0;
    uint64_t v11 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v11 = &unk_26C6B52A8;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v11[2] = 0x80000002CLL;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:44: MARISA_MEMORY"
             "_ERROR: temp.get() == NULL";
    __cxa_throw(v11, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v7 = (uint64_t)v6;
  sub_216107154((uint64_t)v6);
  uint64_t v13 = v7;
  sub_2160F73E0((uint64_t)v12);
  sub_216106D38(v12, a2, a3);
  sub_2161077F4(v13, (uint64_t *)v12);
  uint64_t v8 = *a1;
  *a1 = v13;
  uint64_t v13 = v8;
  sub_216106D34(v12);
  return sub_21610685C(&v13);
}

void sub_216106338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21610685C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216106378(uint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:100: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  sub_2160F7964((uint64_t)v6);
  sub_2160F7B64((uint64_t)v6, a2);
  sub_216107AF8(*a1, (uint64_t)v6);
  return sub_2160F797C((uint64_t)v6);
}

void sub_216106434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216106448(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000006DLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:109: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }

  return sub_216107C10(v3, a2, a3);
}

uint64_t sub_2161064D4(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000073;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:115: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }

  return sub_216108788(v4, a2, a3, a4);
}

uint64_t sub_216106560(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000007FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:127: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }

  return sub_216108A98(v4, a2, a3, a4);
}

void sub_2161065EC(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:134: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }

  sub_216107C7C(v5, a2, a3, a4, a5);
}

void sub_216106678(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000008CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:140: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }

  sub_216109A90(v5, a2, a3, a4, a5);
}

void sub_216106704(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000093;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:147: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }

  sub_216108284(v4, a2, a3, a4);
}

void sub_216106790(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000099;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:153: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }

  sub_2161083E4(v3, a2, a3);
}

void sub_21610681C(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216106854(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void *sub_21610685C(void *a1)
{
  if (*a1)
  {
    uint64_t v2 = sub_2161073BC();
    MEMORY[0x2166CA800](v2, 0x10F0C4010279AD7);
  }
  return a1;
}

uint64_t sub_2161068A0(uint64_t result, size_t __nitems)
{
  size_t v2 = __nitems;
  uint64_t v3 = result;
  __buf[128] = *MEMORY[0x263EF8340];
  if (!*(void *)result && *(_DWORD *)(result + 8) == -1 && !*(void *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x10000004FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:79: MARISA_STATE_ERROR: !is_open()";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      bzero(__buf, 0x400uLL);
      do
      {
        if (v2 >= 0x400) {
          size_t v4 = 1024;
        }
        else {
          size_t v4 = v2;
        }
        uint64_t result = sub_2161069DC(v3, (char *)__buf, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      __buf[0] = 0;
      __buf[1] = 0;
      return sub_2161069DC(result, (char *)__buf, __nitems);
    }
  }
  return result;
}

uint64_t sub_2161069DC(uint64_t result, char *__buf, size_t __nitems)
{
  size_t v3 = __nitems;
  size_t v4 = __buf;
  uint64_t v5 = result;
  uint64_t v6 = *(FILE **)result;
  if (!*(void *)result && *(_DWORD *)(result + 8) == -1 && !*(void *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000076;
    uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:118: MA"
         "RISA_STATE_ERROR: !is_open()";
    goto LABEL_20;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(result + 8) != -1)
    {
      while (1)
      {
        size_t v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        uint64_t result = write(*(_DWORD *)(v5 + 8), v4, v7);
        if (result <= 0) {
          break;
        }
        v4 += result;
        v3 -= result;
        if (!v3) {
          return result;
        }
      }
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6B52A8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
      exception[2] = 0x900000084;
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:132: "
           "MARISA_IO_ERROR: size_written <= 0";
LABEL_20:
      exception[3] = v9;
      __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
    }
    if (v6)
    {
      if (fwrite(__buf, 1uLL, __nitems, v6) != __nitems)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C6B52A8;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000089;
        uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:137"
             ": MARISA_IO_ERROR: ::fwrite(data, 1, size, file_) != size";
        goto LABEL_20;
      }
      uint64_t result = fflush(*(FILE **)v5);
      if (result)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C6B52A8;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x90000008ALL;
        uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:138"
             ": MARISA_IO_ERROR: ::fflush(file_) != 0";
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = *(void *)(result + 16);
      if (result)
      {
        uint64_t result = std::ostream::write();
        if ((*(unsigned char *)(result + *(void *)(*(void *)result - 24) + 32) & 5) != 0)
        {
          uint64_t v10 = __cxa_allocate_exception(0x20uLL);
          *uint64_t v10 = &unk_26C6B52A8;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
          long long v10[2] = 0x90000008FLL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:143: MARISA_IO_ERROR: !stream_->write(static_cast<const char*>(data), static_cast<std::streamsize>(size))";
          __cxa_throw(v10, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
        }
      }
    }
  }
  return result;
}

void sub_216106C58()
{
}

void sub_216106CD4()
{
}

uint64_t sub_216106CE8(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)-1) {
    munmap(v2, *(void *)(a1 + 24));
  }
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 != -1) {
    close(v3);
  }
  return a1;
}

uint64_t sub_216106D38(long long *a1, uint64_t a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x200000050;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper."
                   "cc:80: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  long long v3 = *a1;
  long long v4 = a1[1];
  *(void *)a1 = a2;
  *((void *)a1 + 1) = -1;
  *((void *)a1 + 2) = a3;
  *((void *)a1 + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  int v5 = *((_DWORD *)a1 + 8);
  *((_DWORD *)a1 + 8) = -1;
  int v9 = v5;
  return sub_216106CE8((uint64_t)v8);
}

uint64_t sub_216106DE8(uint64_t *a1, unint64_t a2)
{
  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000059;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:89: MAR"
         "ISA_STATE_ERROR: !is_open()";
    goto LABEL_8;
  }
  if (a1[2] < a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x90000005ALL;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:90: MAR"
         "ISA_IO_ERROR: size > avail_";
LABEL_8:
    exception[3] = v4;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }

  return sub_216106EC4(a1, a2);
}

uint64_t sub_216106EC4(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000073;
    uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:115: MA"
         "RISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  unint64_t v3 = a1[2];
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000074;
    uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:116: MA"
         "RISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *a1 = v2 + a2;
  a1[2] = v5;
  return v2;
}

uint64_t sub_216106FA0(uint64_t a1)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 345) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 441) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 553) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 601) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 505) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 649) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 736) = 0;
  sub_216102D6C((_OWORD *)(a1 + 744));
  *(unsigned char *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(void *)(a1 + 1072) = 3;
  *(void *)(a1 + 1080) = 0x100000000200;
  *(_DWORD *)(a1 + 1088) = 0x20000;
  sub_2160F73E0(a1 + 1096);
  return a1;
}

void sub_2161070C4(_Unwind_Exception *a1)
{
  uint64_t v9 = v1[126];
  if (v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  sub_21610685C(v5);
  sub_2160F8574(v4);
  if (*v7) {
    MEMORY[0x2166CA7C0](*v7, 0x1000C8077774924);
  }
  if (*v6) {
    MEMORY[0x2166CA7C0](*v6, 0x1000C8077774924);
  }
  sub_2160F8624(v3);
  sub_2160F8624(v2);
  sub_2160F8624(v1);
  _Unwind_Resume(a1);
}

void *sub_216107158(void *a1)
{
  sub_216106D34(a1 + 137);
  uint64_t v2 = a1[126];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  sub_21610685C(a1 + 125);
  uint64_t v3 = a1[119];
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = a1[113];
  if (v4) {
    MEMORY[0x2166CA7C0](v4, 0x1000C8077774924);
  }
  uint64_t v5 = a1[107];
  if (v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C8077774924);
  }
  uint64_t v6 = a1[99];
  if (v6) {
    MEMORY[0x2166CA7C0](v6, 0x1000C8077774924);
  }
  uint64_t v7 = a1[93];
  if (v7) {
    MEMORY[0x2166CA7C0](v7, 0x1000C8077774924);
  }
  uint64_t v8 = a1[84];
  if (v8) {
    MEMORY[0x2166CA7C0](v8, 0x1000C8077774924);
  }
  uint64_t v9 = a1[78];
  if (v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  uint64_t v10 = a1[72];
  if (v10) {
    MEMORY[0x2166CA7C0](v10, 0x1000C8077774924);
  }
  uint64_t v11 = a1[66];
  if (v11) {
    MEMORY[0x2166CA7C0](v11, 0x1000C8077774924);
  }
  uint64_t v12 = a1[60];
  if (v12) {
    MEMORY[0x2166CA7C0](v12, 0x1000C8077774924);
  }
  uint64_t v13 = a1[52];
  if (v13) {
    MEMORY[0x2166CA7C0](v13, 0x1000C8077774924);
  }
  uint64_t v14 = a1[46];
  if (v14) {
    MEMORY[0x2166CA7C0](v14, 0x1000C8077774924);
  }
  uint64_t v15 = a1[40];
  if (v15) {
    MEMORY[0x2166CA7C0](v15, 0x1000C8077774924);
  }
  uint64_t v16 = a1[34];
  if (v16) {
    MEMORY[0x2166CA7C0](v16, 0x1000C8077774924);
  }
  uint64_t v17 = a1[26];
  if (v17) {
    MEMORY[0x2166CA7C0](v17, 0x1000C8077774924);
  }
  uint64_t v18 = a1[20];
  if (v18) {
    MEMORY[0x2166CA7C0](v18, 0x1000C8077774924);
  }
  uint64_t v19 = a1[14];
  if (v19) {
    MEMORY[0x2166CA7C0](v19, 0x1000C8077774924);
  }
  uint64_t v20 = a1[8];
  if (v20) {
    MEMORY[0x2166CA7C0](v20, 0x1000C8077774924);
  }
  if (*a1) {
    MEMORY[0x2166CA7C0](*a1, 0x1000C8077774924);
  }
  return a1;
}

void *sub_2161073C0(uint64_t a1, uint64_t *a2, void *a3, unsigned int a4)
{
  uint64_t v8 = 3;
  uint64_t v9 = 0x100000000200;
  int v10 = 0x20000;
  sub_21610A3B8(&v8, a4);
  v11[0] = v8;
  v11[1] = v9;
  int v12 = v10;
  sub_216106FA0((uint64_t)&v8);
  sub_21610747C((uint64_t)&v8, a2, a3, (uint64_t)v11);
  sub_2160F8D28(a1, (uint64_t)&v8);
  return sub_216107158(&v8);
}

void sub_216107468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216107158((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21610747C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  memset(v36, 0, 41);
  sub_2160FA424((uint64_t *)v36, (a2[1] - *a2) >> 4);
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *((void *)&v36[0] + 1) + v10;
      uint64_t v13 = (uint64_t *)(v8 + v9);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      *(void *)uint64_t v12 = v15;
      *(_DWORD *)(v12 + 8) = v14;
      *(_DWORD *)(v12 + 12) = 1065353216;
      ++v11;
      uint64_t v8 = *a2;
      v10 += 24;
      v9 += 16;
    }
    while (v11 < (a2[1] - *a2) >> 4);
  }
  long long v34 = 0u;
  memset(v35, 0, 25);
  sub_216108BC8(a1, (uint64_t *)v36, &v34, a4, 1);
  memset(v33, 0, 41);
  sub_2160FA698((uint64_t *)v33, v35[1]);
  unint64_t v16 = *((void *)&v33[1] + 1);
  if (*((void *)&v33[1] + 1))
  {
    uint64_t v17 = 0;
    uint64_t v18 = *((void *)&v34 + 1);
    uint64_t v19 = (_DWORD *)(*((void *)&v33[0] + 1) + 4);
    do
    {
      *(v19 - 1) = *(_DWORD *)(v18 + 4 * v17);
      *uint64_t v19 = v17++;
      v19 += 2;
    }
    while (v16 != v17);
  }
  uint64_t v20 = v34;
  long long v34 = 0u;
  memset(v35, 0, 25);
  if (v20)
  {
    MEMORY[0x2166CA7C0](v20, 0x1000C8077774924);
    unint64_t v16 = *((void *)&v33[1] + 1);
  }
  unint64_t v21 = 126 - 2 * __clz(v16);
  if (v16) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  sub_216100868(*((uint64_t *)&v33[0] + 1), (unsigned int *)(*((void *)&v33[0] + 1) + 8 * v16), (uint64_t)&v37, v22, 1);
  if (*((void *)&v33[1] + 1))
  {
    unint64_t v23 = 0;
    unint64_t v24 = 0;
    do
    {
      for (uint64_t i = *((void *)&v33[0] + 1); ; uint64_t i = *((void *)&v33[0] + 1))
      {
        unint64_t v26 = *(unsigned int *)(i + 8 * v23);
        if (v24 >= v26) {
          break;
        }
        sub_216108DAC((uint64_t *)(a1 + 208), 0);
        ++v24;
      }
      if (v24 == v26)
      {
        sub_216108DAC((uint64_t *)(a1 + 208), 1);
        ++v24;
      }
      ++v23;
    }
    while (v23 < *((void *)&v33[1] + 1));
  }
  else
  {
    unint64_t v24 = 0;
  }
  for (; v24 < *(void *)(a1 + 648); ++v24)
    sub_216108DAC((uint64_t *)(a1 + 208), 0);
  uint64_t v27 = (uint64_t *)(a1 + 208);
  sub_216108DAC(v27, 0);
  sub_216108EA4((uint64_t)v27, 0, 1);
  if (a3)
  {
    sub_216108FE4((uint64_t)a3, (a2[1] - *a2) >> 4);
    if (a2[1] != *a2)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      uint64_t v30 = *((void *)&v33[0] + 1);
      do
      {
        uint64_t v31 = sub_21610DFB8((uint64_t)v27, *(unsigned int *)(v30 + v28));
        uint64_t v30 = *((void *)&v33[0] + 1);
        *(void *)(*a3 + 8 * *(unsigned int *)(*((void *)&v33[0] + 1) + v28 + 4)) = v31;
        ++v29;
        v28 += 8;
      }
      while (v29 < (a2[1] - *a2) >> 4);
    }
  }
  if (*(void *)&v33[0]) {
    MEMORY[0x2166CA7C0](*(void *)&v33[0], 0x1000C8077774924);
  }
  if ((void)v34) {
    MEMORY[0x2166CA7C0](v34, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v36[0];
  if (*(void *)&v36[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v36[0], 0x1000C8077774924);
  }
  return result;
}

void sub_216107770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15) {
    MEMORY[0x2166CA7C0](a15, 0x1000C8077774924);
  }
  if (a21) {
    MEMORY[0x2166CA7C0](a21, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161077F4(uint64_t a1, uint64_t *a2)
{
  sub_21610787C((uint64_t)v5, a2);
  sub_216106FA0((uint64_t)v5);
  sub_21610793C((uint64_t)v5, a2);
  sub_2160F76B8(v6, a2);
  sub_2160F8D28(a1, (uint64_t)v5);
  return sub_216107158(v5);
}

void sub_216107868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_21610787C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (unsigned char *)sub_216106EC4(a2, 0x10uLL);
  if (*result != 87) {
    goto LABEL_7;
  }
  uint64_t v3 = 1u;
  do
  {
    if (v3 == 16) {
      return result;
    }
    int v4 = result[v3];
    int v5 = aWeLoveMarisa_0[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/heade"
                   "r.h:21: MARISA_FORMAT_ERROR: !test_header(ptr)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

double sub_21610793C(uint64_t a1, uint64_t *a2)
{
  sub_216109728((uint64_t *)a1, a2);
  sub_216109728((uint64_t *)(a1 + 208), a2);
  sub_216109728((uint64_t *)(a1 + 416), a2);
  sub_216109814((long long *)(a1 + 624), a2);
  sub_2161098D4((long long *)(a1 + 672), a2);
  sub_21610DAC4(a1 + 744, a2);
  if (*(void *)(a1 + 472) && !*(void *)(a1 + 768))
  {
    int v4 = operator new(0x470uLL, MEMORY[0x263F8C180]);
    int v5 = v4;
    if (v4) {
      sub_216106FA0((uint64_t)v4);
    }
    uint64_t v10 = *(void *)(a1 + 1000);
    *(void *)(a1 + 1000) = v5;
    sub_21610685C(&v10);
    uint64_t v6 = *(void *)(a1 + 1000);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6B52A8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x800000249;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:585: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
    }
    sub_21610793C(v6, a2);
  }
  sub_2161099D0((long long *)(a1 + 1008), a2);
  *(void *)(a1 + 1056) = *(void *)(a1 + 1032) - 1;
  *(void *)(a1 + 1064) = *(unsigned int *)sub_216106EC4(a2, 4uLL);
  unsigned int v7 = *(_DWORD *)sub_216106EC4(a2, 4uLL);
  uint64_t v10 = 3;
  *(void *)&double v11 = 0x100000000200;
  int v12 = 0x20000;
  sub_21610A3B8(&v10, v7);
  *(void *)(a1 + 1072) = v10;
  double result = v11;
  *(double *)(a1 + 1080) = v11;
  *(_DWORD *)(a1 + 1088) = v12;
  return result;
}

void sub_216107ADC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7E0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t sub_216107AF8(uint64_t a1, uint64_t a2)
{
  sub_2161069DC(a2, "We love Marisa.", 0x10uLL);

  return sub_216107B48(a1, a2);
}

uint64_t sub_216107B48(uint64_t a1, uint64_t a2)
{
  sub_21610B238(a1, a2);
  sub_21610B238(a1 + 208, a2);
  sub_21610B238(a1 + 416, a2);
  sub_21610D400(a1 + 624, a2);
  sub_21610B68C(a1 + 672, a2);
  sub_21610DC30(a1 + 744, a2);
  uint64_t v4 = *(void *)(a1 + 1000);
  if (v4) {
    sub_216107B48(v4, a2);
  }
  sub_21610B3F8(a1 + 1008, a2);
  int __buf = *(void *)(a1 + 1064);
  sub_2161069DC(a2, (char *)&__buf, 4uLL);
  int v6 = *(_DWORD *)(a1 + 1084) | *(_DWORD *)(a1 + 1072) | *(_DWORD *)(a1 + 1088);
  return sub_2161069DC(a2, (char *)&v6, 4uLL);
}

uint64_t sub_216107C10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 31);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 16);
  }
  if (v3) {
    return 0;
  }
  unint64_t v5 = *(void *)a2;
  if (((*(void *)(*(void *)(a1 + 224) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
    return 0;
  }
  *a3 = sub_21610DFB8(a1 + 208, v5);
  return 1;
}

void sub_216107C7C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  char v12 = 0;
  memset(&__p, 0, sizeof(__p));
  while (v13 < a3)
  {
    if ((sub_216107D6C(a1, a2, a3, &v13, &v14, &__p) & 1) == 0) {
      goto LABEL_8;
    }
  }
  int v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v10 = __p.__r_.__value_.__r.__words[1];
  }
  sub_216108010(a1, v14, (uint64_t)&__p, &v12, a4, (v10 - a3) & ~((v10 - (int)a3) >> 31), a5);
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216107D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216107D6C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5, std::string *this)
{
  unint64_t v12 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *(void *)(a1 + 1056);
  uint64_t v13 = *(void *)(a1 + 1024);
  if (*a5 != *(_DWORD *)(v13 + 12 * v12))
  {
    unint64_t v15 = sub_21610E100((void *)a1, *a5);
    uint64_t v16 = *(void *)(a1 + 16);
    if ((*(void *)(v16 + (((v15 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 + 1)))
    {
      unint64_t v17 = v15 - *a5;
      *a5 = v17;
      unint64_t v18 = v15 + 2;
      uint64_t v19 = 0xFFFFFFFFLL;
      while (1)
      {
        if ((*(void *)(*(void *)(a1 + 432) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17))
        {
          if (v19 == 0xFFFFFFFFLL)
          {
            uint64_t v19 = sub_21610DFB8(a1 + 416, v17);
            unint64_t v17 = *a5;
          }
          else
          {
            ++v19;
          }
          unint64_t v21 = *a4;
          uint64_t v22 = *(void *)(a1 + 720);
          unint64_t v23 = (unint64_t)(v22 * v19) >> 6;
          uint64_t v24 = (v22 * v19) & 0x3F;
          unint64_t v25 = v24 + v22;
          uint64_t v26 = *(void *)(a1 + 688);
          uint64_t v27 = *(void *)(v26 + 8 * v23) >> v24;
          if (v25 > 0x40) {
            v27 |= (2 * *(void *)(v26 + 8 * v23 + 8)) << (v24 ^ 0x3Fu);
          }
          unint64_t v28 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v17) | ((*(_DWORD *)(a1 + 728) & v27) << 8);
          uint64_t v29 = *(void *)(a1 + 1000);
          if (v29)
          {
            if (sub_21610A178(v29, a2, a3, a4, v28, this)) {
              return 1;
            }
          }
          else if (sub_21610DD94((void *)(a1 + 744), a2, a3, a4, v28, this))
          {
            return 1;
          }
          if (*a4 != v21) {
            return 0;
          }
          unint64_t v17 = *a5;
          uint64_t v16 = *(void *)(a1 + 16);
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v17);
          if (v20 == *(unsigned __int8 *)(a2 + *a4))
          {
            std::string::push_back(this, v20);
            ++*a4;
            return 1;
          }
        }
        *a5 = ++v17;
        uint64_t v30 = *(void *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18;
        ++v18;
        if ((v30 & 1) == 0) {
          return 0;
        }
      }
    }
    return 0;
  }
  unint64_t v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
  if (v14 > 0xFFFFFEFF)
  {
    std::string::push_back(this, v14);
    ++*a4;
    goto LABEL_24;
  }
  uint64_t v31 = *(void *)(a1 + 1000);
  if (v31)
  {
    if (sub_21610A178(v31, a2, a3, a4, v14, this)) {
      goto LABEL_24;
    }
    return 0;
  }
  if (!sub_21610DD94((void *)(a1 + 744), a2, a3, a4, v14, this)) {
    return 0;
  }
LABEL_24:
  *a5 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v12 + 4);
  return 1;
}

unint64_t sub_216108010(unint64_t result, unint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, int a6, uint64_t a7)
{
  if (!*a4)
  {
    unint64_t v11 = result;
    if ((a7 & 0x80000000) != 0 || a6 <= (int)a7)
    {
      if (((*(void *)(*(void *)(result + 224) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0
        || ((uint64_t v12 = sub_21610DFB8(result + 208, a2), v13 = *(char *)(a3 + 23), v13 >= 0)
          ? (uint64_t v14 = a3)
          : (uint64_t v14 = *(void *)a3),
            v13 >= 0 ? (uint64_t v15 = *(unsigned __int8 *)(a3 + 23)) : (uint64_t v15 = *(void *)(a3 + 8)),
            double result = sub_216108384(a5, v12, v14, v15, (uint64_t)a4),
            !*a4))
      {
        std::string::size_type v16 = *(char *)(a3 + 23) >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
        double result = sub_21610E100((void *)v11, a2);
        if (!*a4)
        {
          unint64_t v17 = result;
          uint64_t v18 = 0xFFFFFFFFLL;
          do
          {
            if (((*(void *)(*(void *)(v11 + 16) + (((v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + 1)) & 1) == 0) {
              break;
            }
            if ((*(void *)(*(void *)(v11 + 432) + (((v17 - a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 - a2)))
            {
              if (v18 == 0xFFFFFFFFLL) {
                uint64_t v18 = sub_21610DFB8(v11 + 416, v17 - a2);
              }
              else {
                ++v18;
              }
              uint64_t v19 = *(void *)(v11 + 720);
              unint64_t v20 = (unint64_t)(v19 * v18) >> 6;
              uint64_t v21 = (v19 * v18) & 0x3F;
              unint64_t v22 = v21 + v19;
              uint64_t v23 = *(void *)(v11 + 688);
              uint64_t v24 = *(void *)(v23 + 8 * v20) >> v21;
              if (v22 > 0x40) {
                v24 |= (2 * *(void *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
              }
              unint64_t v25 = *(unsigned __int8 *)(*(void *)(v11 + 640) - a2 + v17) | ((*(_DWORD *)(v11 + 728) & v24) << 8);
              uint64_t v26 = *(void *)(v11 + 1000);
              if (v26) {
                sub_216109DA0(v26, (std::string *)a3, v25);
              }
              else {
                sub_21610DC70((void *)(v11 + 744), (std::string *)a3, v25);
              }
            }
            else
            {
              std::string::push_back((std::string *)a3, *(unsigned char *)(*(void *)(v11 + 640) - a2 + v17));
            }
            int v27 = *(unsigned __int8 *)(a3 + 23);
            if ((v27 & 0x80u) != 0) {
              int v27 = *(_DWORD *)(a3 + 8);
            }
            sub_216108010(v11, v17 - a2, a3, a4, a5, (v27 - v16 + a6), a7);
            uint64_t v28 = *(unsigned __int8 *)(a3 + 23);
            int v29 = (char)v28;
            uint64_t v30 = a3 + v28;
            if (v29 >= 0)
            {
              uint64_t v31 = a3;
            }
            else
            {
              uint64_t v30 = *(void *)a3 + *(void *)(a3 + 8);
              uint64_t v31 = *(void *)a3;
            }
            double result = (unint64_t)std::string::erase((std::string *)a3, v16, v30 - (v31 + v16));
            ++v17;
          }
          while (!*a4);
        }
      }
    }
  }
  return result;
}

void sub_216108284(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x80000000) != 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 31);
    uint64_t v10 = *(void *)(a2 + 16);
    char v9 = *(unsigned char *)(a2 + 31);
LABEL_8:
    char v20 = 0;
    uint64_t v12 = *(void *)(a2 + 8) + v10;
    uint64_t v13 = a2 + 8 + v8;
    if (v9 >= 0) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v12;
    }
    if (v9 >= 0) {
      uint64_t v15 = a2 + 8;
    }
    else {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    sub_21610B704(&__p, v14, v14, v15, v15, v14 - v15);
    if ((v19 & 0x80u) == 0) {
      int v16 = v19;
    }
    else {
      int v16 = v18;
    }
    sub_216108010(a1, *(void *)a2, (uint64_t)&__p, &v20, a3, v16, a4);
    if ((char)v19 < 0) {
      operator delete(__p);
    }
    return;
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 31);
  char v9 = v8;
  uint64_t v10 = *(void *)(a2 + 16);
  if ((v8 & 0x80u) == 0) {
    unint64_t v11 = *(unsigned __int8 *)(a2 + 31);
  }
  else {
    unint64_t v11 = *(void *)(a2 + 16);
  }
  if (v11 <= a4) {
    goto LABEL_8;
  }
}

void sub_216108368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216108384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)v5 + 48))(v5, &v7, v8, a5);
}

void sub_2161083E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v38 = 0;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 31);
  int v6 = (char)v5;
  unint64_t v7 = *(void *)(a2 + 16);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 16);
  }
  if (v5)
  {
    uint64_t v8 = (void **)(a2 + 8);
    unint64_t v36 = *(void *)a2;
    p_p = &__p;
    if (v6 < 0)
    {
      sub_21610A674(&__p, *v8, v7);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      char v32 = *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
      uint64_t v33 = --__p.__r_.__value_.__l.__size_;
    }
    else
    {
      char v32 = __p.__r_.__value_.__s.__data_[HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1];
      uint64_t v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v33 & 0x7F;
    }
    p_p->__r_.__value_.__s.__data_[v33] = 0;
    sub_216108734(a3, v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unint64_t v11 = sub_21610E100((void *)a1, *(void *)a2);
    unint64_t v12 = v11 - *(void *)a2;
    *(void *)long long v34 = a1 + 744;
    uint64_t v13 = 0xFFFFFFFFLL;
    do
    {
      ++v11;
      if (((*(void *)(*(void *)(a1 + 16) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        break;
      }
      memset(&v35, 0, sizeof(v35));
      if ((*(void *)(*(void *)(a1 + 432) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12))
      {
        if (v13 == 0xFFFFFFFFLL) {
          uint64_t v13 = sub_21610DFB8(a1 + 416, v12);
        }
        else {
          ++v13;
        }
        uint64_t v14 = *(void *)(a1 + 720);
        unint64_t v15 = (unint64_t)(v14 * v13) >> 6;
        uint64_t v16 = (v14 * v13) & 0x3F;
        unint64_t v17 = v16 + v14;
        uint64_t v18 = *(void *)(a1 + 688);
        uint64_t v19 = *(void *)(v18 + 8 * v15) >> v16;
        if (v17 > 0x40) {
          v19 |= (2 * *(void *)(v18 + 8 * v15 + 8)) << (v16 ^ 0x3Fu);
        }
        unint64_t v20 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v12) | ((*(_DWORD *)(a1 + 728) & v19) << 8);
        uint64_t v21 = *(void *)(a1 + 1000);
        if (v21) {
          sub_216109DA0(v21, &v35, v20);
        }
        else {
          sub_21610DC70(*(void **)v34, &v35, v20);
        }
        std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v23 = &v35;
        }
        else {
          uint64_t v23 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v35.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v24 = (std::string *)((char *)v23 + size - 1);
          if (v24 > v23)
          {
            unint64_t v25 = &v23->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v26 = *(v25 - 1);
              *(v25 - 1) = v24->__r_.__value_.__s.__data_[0];
              v24->__r_.__value_.__s.__data_[0] = v26;
              uint64_t v24 = (std::string *)((char *)v24 - 1);
            }
            while (v25++ < (char *)v24);
          }
        }
      }
      else
      {
        std::string::push_back(&v35, *(unsigned char *)(*(void *)(a1 + 640) + v12));
      }
      std::string __p = v35;
      memset(&v35, 0, sizeof(v35));
      unint64_t v36 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
        char v28 = *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
        uint64_t v29 = --__p.__r_.__value_.__l.__size_;
      }
      else
      {
        char v28 = *((unsigned char *)&v36 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7);
        uint64_t v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v29 & 0x7F;
        uint64_t v30 = &__p;
      }
      v30->__r_.__value_.__s.__data_[v29] = 0;
      sub_216108734(a3, v28);
      int v31 = v38;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      ++v12;
    }
    while (!v31);
  }
}

void sub_2161086EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216108734(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_216108788(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  while (v9 < a3)
  {
    if ((sub_216108828(a1, a2, a3, &v9, &v10) & 1) == 0) {
      return 0;
    }
  }
  if ((*(void *)(*(void *)(a1 + 224) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
  {
    *a4 = sub_21610DFB8(a1 + 208, v10);
    return 1;
  }
  return 0;
}

uint64_t sub_216108828(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *(void *)(a1 + 1056);
  uint64_t v11 = *(void *)(a1 + 1024);
  if (*a5 != *(_DWORD *)(v11 + 12 * v10))
  {
    unint64_t v13 = sub_21610E100((void *)a1, *a5);
    uint64_t v14 = *(void *)(a1 + 16);
    if ((*(void *)(v14 + (((v13 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 + 1)))
    {
      unint64_t v15 = v13 - *a5;
      *a5 = v15;
      unint64_t v16 = v13 + 2;
      uint64_t v17 = 0xFFFFFFFFLL;
      while (1)
      {
        if ((*(void *)(*(void *)(a1 + 432) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15))
        {
          if (v17 == 0xFFFFFFFFLL)
          {
            uint64_t v17 = sub_21610DFB8(a1 + 416, v15);
            unint64_t v15 = *a5;
          }
          else
          {
            ++v17;
          }
          unint64_t v18 = *a4;
          uint64_t v19 = *(void *)(a1 + 720);
          unint64_t v20 = (unint64_t)(v19 * v17) >> 6;
          uint64_t v21 = (v19 * v17) & 0x3F;
          unint64_t v22 = v21 + v19;
          uint64_t v23 = *(void *)(a1 + 688);
          uint64_t v24 = *(void *)(v23 + 8 * v20) >> v21;
          if (v22 > 0x40) {
            v24 |= (2 * *(void *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
          }
          unint64_t v25 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v15) | ((*(_DWORD *)(a1 + 728) & v24) << 8);
          uint64_t v26 = *(void *)(a1 + 1000);
          if (v26)
          {
            if (sub_216109F2C(v26, a2, a3, a4, v25)) {
              return 1;
            }
          }
          else if (sub_21610DD00((void *)(a1 + 744), a2, a3, a4, v25))
          {
            return 1;
          }
          if (*a4 != v18) {
            return 0;
          }
          unint64_t v15 = *a5;
          uint64_t v14 = *(void *)(a1 + 16);
        }
        else if (*(unsigned __int8 *)(*(void *)(a1 + 640) + v15) == *(unsigned __int8 *)(a2 + *a4))
        {
          ++*a4;
          return 1;
        }
        *a5 = ++v15;
        uint64_t v27 = *(void *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16;
        ++v16;
        if ((v27 & 1) == 0) {
          return 0;
        }
      }
    }
    return 0;
  }
  unint64_t v12 = *(unsigned int *)(v11 + 12 * v10 + 8);
  if (v12 > 0xFFFFFEFF)
  {
    ++*a4;
    goto LABEL_24;
  }
  uint64_t v28 = *(void *)(a1 + 1000);
  if (v28)
  {
    if (sub_216109F2C(v28, a2, a3, a4, v12)) {
      goto LABEL_24;
    }
    return 0;
  }
  if ((sub_21610DD00((void *)(a1 + 744), a2, a3, a4, v12) & 1) == 0) {
    return 0;
  }
LABEL_24:
  *a5 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v10 + 4);
  return 1;
}

uint64_t sub_216108A98(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  char v15 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v8 = result + 208;
  if (**(unsigned char **)(result + 224))
  {
    uint64_t v9 = sub_21610DFB8(result + 208, 0);
    double result = sub_216108384(a4, v9, a2, 0, (uint64_t)&v15);
    if (v15) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = a3 == 0;
    }
    if (v10) {
      return result;
    }
  }
  else if (!a3)
  {
    return result;
  }
  double result = sub_216108828(v7, a2, a3, &v13, &v14);
  if (result)
  {
    do
    {
      if ((*(void *)(*(void *)(v7 + 224) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14))
      {
        uint64_t v11 = sub_21610DFB8(v8, v14);
        double result = sub_216108384(a4, v11, a2, v13, (uint64_t)&v15);
        if (v15) {
          BOOL v12 = 1;
        }
        else {
          BOOL v12 = v13 >= a3;
        }
        if (v12) {
          return result;
        }
      }
      else if (v13 >= a3)
      {
        return result;
      }
      double result = sub_216108828(v7, a2, a3, &v13, &v14);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_216108BC8(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  sub_21610B8E8((uint64_t *)a1, (uint64_t)a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (a2[3]) {
    sub_216109014(a1, a2, v17, a4, a5);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    unsigned int v10 = (v9[268] + 1) | v9[271] | v9[272];
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    sub_21610A3B8(&v18, v10);
  }
  else
  {
    if (*(void *)(a1 + 840)) {
      int v11 = 0x2000;
    }
    else {
      int v11 = 4096;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    sub_21610A3B8(&v18, v12);
  }
  *(void *)(a1 + 1072) = v18;
  *(void *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_216108EA4(a1 + 416, 0, 0);
  if (*((void *)&v17[1] + 1))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(unsigned char *)(*(void *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((void *)&v17[1] + 1));
  }
  sub_21610C050((long long *)(a1 + 672), (uint64_t)v17);
  sub_21610961C(a1);
  uint64_t result = *(void *)&v17[0];
  if (*(void *)&v17[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v17[0], 0x1000C8077774924);
  }
  return result;
}

void sub_216108D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216108DAC(uint64_t *result, int a2)
{
  unint64_t v2 = result[6];
  if (v2 == 0xFFFFFFFF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0x70000003ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:58: MARISA_SIZE_ERROR: size_ == MARISA_UINT32_MAX";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  char v4 = result;
  uint64_t v5 = result[3];
  if (v2 == v5 << 6)
  {
    uint64_t v7 = 0;
    uint64_t result = sub_2160FC380(result, v5 + 1, &v7);
    unint64_t v2 = v4[6];
  }
  if (a2)
  {
    *(void *)(v4[1] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
    ++v4[7];
  }
  v4[6] = v2 + 1;
  return result;
}

uint64_t sub_216108EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v8, 0, 41);
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  long long v8[3] = 0u;
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_21610E4E0(v8, (void *)a1, a2, a3);
  sub_21610A7BC((void *)a1);
  long long v4 = v8[0];
  v8[0] = *(_OWORD *)a1;
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *(void *)&v8[1];
  *(void *)&v8[1] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  long long v6 = *(_OWORD *)((char *)&v8[1] + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  LOBYTE(v5) = BYTE8(v8[2]);
  BYTE8(v8[2]) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v5;
  sub_2160FA358((uint64_t *)a1, (uint64_t *)v8);
  if ((void)v13) {
    MEMORY[0x2166CA7C0](v13, 0x1000C8077774924);
  }
  if ((void)v11) {
    MEMORY[0x2166CA7C0](v11, 0x1000C8077774924);
  }
  if ((void)v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_216108FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216108FE4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_21610C9E8((char **)a1, a2 - v2);
  }
}

uint64_t sub_216109014(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a4 == a5)
  {
    long long v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_2160FABA0((uint64_t *)&v26, a2[3]);
    uint64_t v9 = a2[3];
    if (v9)
    {
      unsigned int v10 = (unsigned int *)(*((void *)&v26 + 1) + 8);
      long long v11 = (_DWORD *)(a2[1] + 8);
      do
      {
        uint64_t v12 = *((void *)v11 - 1);
        unsigned int v13 = *v11;
        v11 += 6;
        *((void *)v10 - 1) = v12 + v13 - 1;
        *unsigned int v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_21610D4E8((long long *)(a1 + 744), (uint64_t)&v26, a3, *(_DWORD *)(a4 + 12));
  }
  else
  {
    long long v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_2160FA424((uint64_t *)&v26, a2[3]);
    if (a2[3])
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *((void *)&v26 + 1) + v15;
        uint64_t v18 = a2[1] + v15;
        uint64_t v19 = *(unsigned int *)(v18 + 8);
        *(void *)uint64_t v17 = *(void *)v18 + v19;
        *(_DWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
        ++v16;
        v15 += 24;
      }
      while (v16 < a2[3]);
    }
    uint64_t v20 = *a2;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)((char *)a2 + 25) = 0u;
    if (v20) {
      MEMORY[0x2166CA7C0](v20, 0x1000C8077774924);
    }
    uint64_t v21 = operator new(0x470uLL, MEMORY[0x263F8C180]);
    unint64_t v22 = v21;
    if (v21) {
      sub_216106FA0((uint64_t)v21);
    }
    uint64_t v28 = *(void *)(a1 + 1000);
    *(void *)(a1 + 1000) = v22;
    sub_21610685C(&v28);
    uint64_t v23 = *(void *)(a1 + 1000);
    if (!v23)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6B52A8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001EBLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:491: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
    }
    sub_216109274(v23, (uint64_t)&v26, a3, a4, a5 + 1);
  }
  uint64_t result = v26;
  if ((void)v26) {
    return MEMORY[0x2166CA7C0](v26, 0x1000C8077774924);
  }
  return result;
}

void sub_216109230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x2166CA7E0](v9, MEMORY[0x263F8C180]);
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216109274(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  sub_21610CB1C((uint64_t *)a1, a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (*(void *)(a2 + 24)) {
    sub_216109458(a1, a2, v17, a4, a5);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    unsigned int v10 = (v9[268] + 1) | v9[271] | v9[272];
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    sub_21610A3B8(&v18, v10);
  }
  else
  {
    if (*(void *)(a1 + 840)) {
      int v11 = 0x2000;
    }
    else {
      int v11 = 4096;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    sub_21610A3B8(&v18, v12);
  }
  *(void *)(a1 + 1072) = v18;
  *(void *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_216108EA4(a1 + 416, 0, 0);
  if (*((void *)&v17[1] + 1))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(unsigned char *)(*(void *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((void *)&v17[1] + 1));
  }
  sub_21610C050((long long *)(a1 + 672), (uint64_t)v17);
  sub_21610961C(a1);
  uint64_t result = *(void *)&v17[0];
  if (*(void *)&v17[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v17[0], 0x1000C8077774924);
  }
  return result;
}

void sub_21610942C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216109458(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a4 == a5)
  {
    memset(v20, 0, 41);
    sub_2160FABA0((uint64_t *)v20, *(void *)(a2 + 24));
    uint64_t v9 = *(void *)(a2 + 24);
    if (v9)
    {
      unsigned int v10 = (_DWORD *)(*((void *)&v20[0] + 1) + 8);
      int v11 = (_DWORD *)(*(void *)(a2 + 8) + 8);
      do
      {
        uint64_t v12 = *((void *)v11 - 1);
        int v13 = *v11;
        v11 += 6;
        *((void *)v10 - 1) = v12 - 1;
        *unsigned int v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_21610D4E8((long long *)(a1 + 744), (uint64_t)v20, a3, *(_DWORD *)(a4 + 12));
    uint64_t result = *(void *)&v20[0];
    if (*(void *)&v20[0]) {
      return MEMORY[0x2166CA7C0](*(void *)&v20[0], 0x1000C8077774924);
    }
  }
  else
  {
    unint64_t v16 = operator new(0x470uLL, MEMORY[0x263F8C180]);
    uint64_t v17 = v16;
    if (v16) {
      sub_216106FA0((uint64_t)v16);
    }
    *(void *)&v20[0] = *(void *)(a1 + 1000);
    *(void *)(a1 + 1000) = v17;
    sub_21610685C(v20);
    uint64_t v18 = *(void *)(a1 + 1000);
    if (!v18)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6B52A8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001FDLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:509: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
    }
    return sub_216109274(v18, a2, a3, a4, a5 + 1);
  }
  return result;
}

void sub_2161095DC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7E0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t sub_21610961C(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 1032);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = result + 416;
    do
    {
      uint64_t v6 = *(void *)(v2 + 1016);
      unint64_t v7 = *(unsigned int *)(v6 + v3 + 4);
      if (v7)
      {
        *(unsigned char *)(v6 + v3 + 8) = *(unsigned char *)(*(void *)(v2 + 632) + v7);
        uint64_t v8 = *(void *)(v2 + 1016);
        if ((*(void *)(*(void *)(v2 + 432) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7))
        {
          uint64_t result = sub_21610DFB8(v5, v7);
          uint64_t v9 = *(void *)(v2 + 720);
          unint64_t v10 = (unint64_t)(v9 * result) >> 6;
          uint64_t v11 = (v9 * result) & 0x3F;
          unint64_t v12 = v11 + v9;
          uint64_t v13 = *(void *)(v2 + 688);
          unint64_t v14 = *(void *)(v13 + 8 * v10);
          if (v12 > 0x40) {
            uint64_t v15 = ((2 * *(void *)(v13 + 8 * v10 + 8)) << (v11 ^ 0x3Fu)) | (v14 >> v11);
          }
          else {
            uint64_t v15 = v14 >> v11;
          }
          int v16 = *(_DWORD *)(v2 + 728) & v15;
        }
        else
        {
          int v16 = 0xFFFFFF;
        }
        *(_DWORD *)(v8 + v3 + 8) = *(unsigned __int8 *)(v8 + v3 + 8) | (v16 << 8);
        unint64_t v1 = *(void *)(v2 + 1032);
      }
      else
      {
        *(void *)(v6 + v3) = -1;
      }
      ++v4;
      v3 += 12;
    }
    while (v4 < v1);
  }
  return result;
}

uint64_t sub_216109728(uint64_t *a1, uint64_t *a2)
{
  memset(v4, 0, 41);
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_21610A85C((uint64_t)v4, a2);
  sub_2160FA358(a1, (uint64_t *)v4);
  if ((void)v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  if ((void)v7) {
    MEMORY[0x2166CA7C0](v7, 0x1000C8077774924);
  }
  if ((void)v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v4[0];
  if (*(void *)&v4[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v4[0], 0x1000C8077774924);
  }
  return result;
}

void sub_216109800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216109814(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_21610D38C((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2161098AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161098D4(long long *a1, uint64_t *a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  sub_21610B16C((uint64_t)v9, a2);
  long long v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)a1 + 6);
  *((void *)a1 + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2161099A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161099D0(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_21610ADCC((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_216109A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void sub_216109A90(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (*(void *)a4 == 0xFFFFFFFFLL)
  {
    MEMORY[0xFFFFFFFF] = 0xFFFFFFFFLL;
    if (*(char *)(a4 + 31) < 0)
    {
      long long v9 = *(void **)(a4 + 8);
      unint64_t v10 = *(void *)(a4 + 16);
      sub_21610A674((unsigned char *)0x100000007, v9, v10);
    }
    else
    {
      MEMORY[0x100000007] = *(_OWORD *)(a4 + 8);
      MEMORY[0x100000017] = *(void *)(a4 + 24);
    }
    return;
  }
  unint64_t v27 = *(void *)a4;
  if (*(char *)(a4 + 31) < 0) {
    sub_21610A674(&__p, *(void **)(a4 + 8), *(void *)(a4 + 16));
  }
  else {
    std::string __p = *(std::string *)(a4 + 8);
  }
  unint64_t v26 = 0;
  if (!a3)
  {
LABEL_20:
    *a5 = v27;
    unint64_t v14 = (std::string *)(a5 + 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_21610A674(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      *unint64_t v14 = __p;
    }
    goto LABEL_46;
  }
  unint64_t v11 = 0;
  while ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_23;
    }
    unint64_t v26 = v11 + 1;
    if (*(unsigned __int8 *)(a2 + v11) != *((unsigned __int8 *)&v27 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7))
    {
LABEL_27:
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_46;
    }
    uint64_t v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
    --*((unsigned char *)&__p.__r_.__value_.__s + 23);
    ++v11;
    p_p = &__p;
LABEL_19:
    p_p->__r_.__value_.__s.__data_[v12] = 0;
    if (v11 >= a3) {
      goto LABEL_20;
    }
  }
  if (__p.__r_.__value_.__l.__size_)
  {
    unint64_t v26 = v11 + 1;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*(unsigned __int8 *)(a2 + v11) != *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0]
                                                              + __p.__r_.__value_.__l.__size_
                                                              - 1))
      goto LABEL_27;
    uint64_t v12 = --__p.__r_.__value_.__l.__size_;
    ++v11;
    goto LABEL_19;
  }
LABEL_23:
  memset(&__str, 0, sizeof(__str));
  while (v26 < a3)
  {
    if ((sub_216107D6C(a1, a2, a3, &v26, &v27, &__str) & 1) == 0)
    {
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_44;
    }
  }
  std::string::basic_string(&v24, &__str, v26 - v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v24;
  char v15 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v24.__r_.__value_.__l.__size_;
  int v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    int v16 = &__p;
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  uint64_t v18 = (std::string *)((char *)v16 + size - 1);
  if (size) {
    BOOL v19 = v18 > v16;
  }
  else {
    BOOL v19 = 0;
  }
  if (v19)
  {
    int v20 = &v16->__r_.__value_.__s.__data_[1];
    do
    {
      std::string::value_type v21 = *(v20 - 1);
      *(v20 - 1) = v18->__r_.__value_.__s.__data_[0];
      v18->__r_.__value_.__s.__data_[0] = v21;
      uint64_t v18 = (std::string *)((char *)v18 - 1);
    }
    while (v20++ < (char *)v18);
    char v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  *a5 = v27;
  uint64_t v23 = (std::string *)(a5 + 1);
  if (v15 < 0) {
    sub_21610A674(v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    *uint64_t v23 = __p;
  }
LABEL_44:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_46:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216109D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_216109DA0(uint64_t a1, std::string *a2, unint64_t a3)
{
  uint64_t v6 = a1 + 416;
  uint64_t v7 = (void *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      unint64_t v8 = *(void *)(a1 + 1056) & a3;
      uint64_t v9 = *(void *)(a1 + 1024);
      if (a3 != *(_DWORD *)(v9 + 12 * v8 + 4)) {
        break;
      }
      unint64_t v10 = *(unsigned int *)(v9 + 12 * v8 + 8);
      if (v10 <= 0xFFFFFEFF)
      {
        uint64_t v20 = *(void *)(a1 + 1000);
        if (v20) {
          sub_216109DA0(v20, a2, v10);
        }
        else {
          sub_21610DC70(v7, a2, v10);
        }
      }
      else
      {
        std::string::push_back(a2, v10);
      }
      a3 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v8);
      if (!a3) {
        return;
      }
    }
    int v11 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a3);
    if ((*(void *)(*(void *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v12 = sub_21610DFB8(v6, a3);
      uint64_t v13 = *(void *)(a1 + 720);
      unint64_t v14 = (unint64_t)(v13 * v12) >> 6;
      uint64_t v15 = (v13 * v12) & 0x3F;
      unint64_t v16 = v15 + v13;
      uint64_t v17 = *(void *)(a1 + 688);
      unint64_t v18 = *(void *)(v17 + 8 * v14);
      uint64_t v19 = v16 > 0x40
          ? ((2 * *(void *)(v17 + 8 * v14 + 8)) << (v15 ^ 0x3Fu)) | (v18 >> v15)
          : v18 >> v15;
      unint64_t v21 = v11 | ((*(_DWORD *)(a1 + 728) & v19) << 8);
      uint64_t v22 = *(void *)(a1 + 1000);
      if (v22) {
        sub_216109DA0(v22, a2, v21);
      }
      else {
        sub_21610DC70(v7, a2, v21);
      }
    }
    else
    {
      std::string::push_back(a2, v11);
    }
    if (a3 <= *(void *)(a1 + 1064)) {
      break;
    }
    a3 = sub_21610E36C((void *)a1, a3) + ~a3;
  }
}

uint64_t sub_216109F2C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v10 = a1 + 416;
  int v11 = (void *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      unint64_t v12 = *(void *)(a1 + 1056) & a5;
      uint64_t v13 = *(void *)(a1 + 1024);
      if (a5 == *(_DWORD *)(v13 + 12 * v12 + 4)) {
        break;
      }
      if ((*(void *)(*(void *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5))
      {
        uint64_t v15 = *(void *)(a1 + 1000);
        int v16 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a5);
        uint64_t v17 = sub_21610DFB8(v10, a5);
        uint64_t v18 = *(void *)(a1 + 720);
        unint64_t v19 = (unint64_t)(v18 * v17) >> 6;
        uint64_t v20 = (v18 * v17) & 0x3F;
        unint64_t v21 = v20 + v18;
        uint64_t v22 = *(void *)(a1 + 688);
        unint64_t v23 = *(void *)(v22 + 8 * v19);
        if (v15)
        {
          unint64_t v24 = v23 >> v20;
          if (v21 > 0x40) {
            v24 |= (2 * *(void *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu);
          }
          unint64_t v25 = v16 | ((*(_DWORD *)(a1 + 728) & v24) << 8);
          uint64_t v26 = *(void *)(a1 + 1000);
          if (v26)
          {
            if ((sub_216109F2C(v26, a2, a3, a4, v25) & 1) == 0) {
              return 0;
            }
            goto LABEL_27;
          }
        }
        else
        {
          if (v21 > 0x40) {
            uint64_t v28 = ((2 * *(void *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu)) | (v23 >> v20);
          }
          else {
            uint64_t v28 = v23 >> v20;
          }
          unint64_t v25 = v16 | ((*(_DWORD *)(a1 + 728) & v28) << 8);
        }
        if ((sub_21610DD00(v11, a2, a3, a4, v25) & 1) == 0) {
          return 0;
        }
      }
      else
      {
        if (*(unsigned __int8 *)(*(void *)(a1 + 640) + a5) != *(unsigned __int8 *)(a2 + *a4)) {
          return 0;
        }
        ++*a4;
      }
LABEL_27:
      if (a5 <= *(void *)(a1 + 1064)) {
        return 1;
      }
      if (*a4 >= a3) {
        return 0;
      }
      a5 = sub_21610E36C((void *)a1, a5) + ~a5;
    }
    unint64_t v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
    if (v14 <= 0xFFFFFEFF)
    {
      uint64_t v27 = *(void *)(a1 + 1000);
      if (v27)
      {
        if ((sub_216109F2C(v27, a2, a3, a4, v14) & 1) == 0) {
          return 0;
        }
      }
      else if ((sub_21610DD00(v11, a2, a3, a4, v14) & 1) == 0)
      {
        return 0;
      }
    }
    else
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v14) {
        return 0;
      }
      ++*a4;
    }
    a5 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v12);
    if (!a5) {
      return 1;
    }
    if (*a4 >= a3) {
      return 0;
    }
  }
}

uint64_t sub_21610A178(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *a6)
{
  uint64_t v12 = a1 + 416;
  uint64_t v13 = (void *)(a1 + 744);
  while (1)
  {
    unint64_t v14 = *(void *)(a1 + 1056) & a5;
    uint64_t v15 = *(void *)(a1 + 1024);
    if (a5 != *(_DWORD *)(v15 + 12 * v14 + 4))
    {
      int v17 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a5);
      if ((*(void *)(*(void *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5))
      {
        uint64_t v18 = sub_21610DFB8(v12, a5);
        uint64_t v19 = *(void *)(a1 + 720);
        unint64_t v20 = (unint64_t)(v19 * v18) >> 6;
        uint64_t v21 = (v19 * v18) & 0x3F;
        unint64_t v22 = v21 + v19;
        uint64_t v23 = *(void *)(a1 + 688);
        unint64_t v24 = *(void *)(v23 + 8 * v20);
        if (v22 > 0x40) {
          uint64_t v25 = ((2 * *(void *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu)) | (v24 >> v21);
        }
        else {
          uint64_t v25 = v24 >> v21;
        }
        unint64_t v27 = v17 | ((*(_DWORD *)(a1 + 728) & v25) << 8);
        uint64_t v28 = *(void *)(a1 + 1000);
        if (v28)
        {
          if ((sub_21610A178(v28, a2, a3, a4, v27, a6) & 1) == 0) {
            return 0;
          }
        }
        else if (!sub_21610DD94(v13, a2, a3, a4, v27, a6))
        {
          return 0;
        }
      }
      else
      {
        if (v17 != *(unsigned __int8 *)(a2 + *a4)) {
          return 0;
        }
        std::string::push_back(a6, v17);
        ++*a4;
      }
      if (a5 <= *(void *)(a1 + 1064)) {
        return 1;
      }
      a5 = sub_21610E36C((void *)a1, a5) + ~a5;
      goto LABEL_23;
    }
    unint64_t v16 = *(unsigned int *)(v15 + 12 * v14 + 8);
    if (v16 > 0xFFFFFEFF)
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v16) {
        return 0;
      }
      std::string::push_back(a6, v16);
      ++*a4;
      goto LABEL_22;
    }
    uint64_t v26 = *(void *)(a1 + 1000);
    if (!v26) {
      break;
    }
    if ((sub_21610A178(v26, a2, a3, a4, v16, a6) & 1) == 0) {
      return 0;
    }
LABEL_22:
    a5 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v14);
    if (!a5) {
      return 1;
    }
LABEL_23:
    if (*a4 >= a3)
    {
      sub_216109DA0(a1, a6, a5);
      return 1;
    }
  }
  if (sub_21610DD94(v13, a2, a3, a4, v16, a6)) {
    goto LABEL_22;
  }
  return 0;
}

uint64_t sub_21610A3B8(void *a1, unsigned int a2)
{
  if (a2 >= 0x100000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000034;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:52: MARISA_CODE_ERROR: (config_flags & ~MARISA_CONFIG_MASK) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  if ((a2 & 0x7F) != 0) {
    *a1 = a2 & 0x7F;
  }
  sub_21610A480((uint64_t)a1, a2);
  sub_21610A544((uint64_t)a1, a2);

  return sub_21610A5DC((uint64_t)a1, a2);
}

uint64_t sub_21610A480(uint64_t result, __int16 a2)
{
  unsigned int v2 = a2 & 0xF80;
  int v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512) {
      goto LABEL_11;
    }
    if (v2 != 1024)
    {
      int v3 = a2 & 0xF80;
      if (v2 != 2048) {
        goto LABEL_9;
      }
      goto LABEL_11;
    }
LABEL_10:
    int v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0) {
    goto LABEL_11;
  }
  if (v2 == 128) {
    goto LABEL_10;
  }
  int v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000060;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:96: MARISA_CODE_ERROR: undefined cache level";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  *(_DWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_21610A544(uint64_t result, __int16 a2)
{
  int v2 = 4096;
  int v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6B52A8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000075;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:117: MARISA_CODE_ERROR: undefined tail mode";
      __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
    }
    int v2 = 0x2000;
  }
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint64_t sub_21610A5DC(uint64_t result, int a2)
{
  int v2 = 0x20000;
  int v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C6B52A8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008ALL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:138: MARISA_CODE_ERROR: undefined node order";
      __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
    }
    int v2 = 0x10000;
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

void *sub_21610A674(unsigned char *__dst, void *__src, unint64_t a3)
{
  long long v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_21610A714();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    long long v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_21610A714()
{
}

void sub_21610A72C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21610A788(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2642668A0, MEMORY[0x263F8C060]);
}

void sub_21610A774(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_21610A788(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *sub_21610A7BC(void *result)
{
  if (*((unsigned char *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v1 = result[3];
  if (v1 != result[4])
  {
    return sub_2160FC408(result, v1);
  }
  return result;
}

uint64_t sub_21610A85C(uint64_t a1, uint64_t *a2)
{
  sub_21610A948((long long *)a1, a2);
  *(void *)(a1 + 48) = *(unsigned int *)sub_216106EC4(a2, 4uLL);
  unint64_t v4 = *(unsigned int *)sub_216106EC4(a2, 4uLL);
  if (*(void *)(a1 + 48) < v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:134: MARISA_FORMAT_ERROR: temp_num_1s > size_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  *(void *)(a1 + 56) = v4;
  sub_21610AA08((long long *)(a1 + 64), a2);
  sub_21610AAC8((long long *)(a1 + 112), a2);

  return sub_21610AAC8((long long *)(a1 + 160), a2);
}

uint64_t sub_21610A948(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_21610AB88((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_21610A9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21610AA08(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_21610ADCC((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_21610AAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21610AAC8(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_21610AFAC((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_21610AB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21610AB88(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_216106EC4(a2, 8uLL);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  sub_21610AC68(a2, (uint64_t *)(a1 + 16), v4 >> 3);
  sub_216106DE8(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 3;

  return sub_21610AD48(a1);
}

uint64_t sub_21610AC68(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t result = sub_216106EC4(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_21610AD48(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x10000007ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:122: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  *(unsigned char *)(result + 40) = 1;
  return result;
}

uint64_t sub_21610ADCC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_216106EC4(a2, 8uLL);
  unint64_t v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  sub_21610AEBC(a2, (uint64_t *)(a1 + 16), v5);
  sub_216106DE8(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v5;

  return sub_21610AD48(a1);
}

uint64_t sub_21610AEBC(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t result = sub_216106EC4(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_21610AFAC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_216106EC4(a2, 8uLL);
  if ((v4 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  sub_21610B08C(a2, (uint64_t *)(a1 + 16), v4 >> 2);
  sub_216106DE8(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 2;

  return sub_21610AD48(a1);
}

uint64_t sub_21610B08C(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t result = sub_216106EC4(a1, 4 * a3);
  *a2 = result;
  return result;
}

void *sub_21610B16C(uint64_t a1, uint64_t *a2)
{
  sub_21610A948((long long *)a1, a2);
  uint64_t v4 = *(unsigned int *)sub_216106EC4(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/flat-vector.h";
    exception[2] = 0xA00000084;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/fla"
                   "t-vector.h:132: MARISA_FORMAT_ERROR: temp_value_size > 32";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  *(void *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)sub_216106EC4(a2, 4uLL);
  uint64_t result = (void *)sub_216106EC4(a2, 8uLL);
  *(void *)(a1 + 64) = *result;
  return result;
}

uint64_t sub_21610B238(uint64_t a1, uint64_t a2)
{
  sub_21610B2BC(a1, a2);
  int __buf = *(void *)(a1 + 48);
  sub_2161069DC(a2, (char *)&__buf, 4uLL);
  int v5 = *(void *)(a1 + 56);
  sub_2161069DC(a2, (char *)&v5, 4uLL);
  sub_21610B3F8(a1 + 64, a2);
  sub_21610B54C(a1 + 112, a2);
  return sub_21610B54C(a1 + 160, a2);
}

uint64_t sub_21610B2BC(uint64_t a1, uint64_t a2)
{
  uint64_t __buf = 8 * *(void *)(a1 + 24);
  sub_2161069DC(a2, (char *)&__buf, 8uLL);
  sub_21610B31C(a2, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return sub_2161068A0(a2, 0);
}

uint64_t sub_21610B31C(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  size_t v3 = 8 * a3;

  return sub_2161069DC(a1, a2, v3);
}

uint64_t sub_21610B3F8(uint64_t a1, uint64_t a2)
{
  uint64_t __buf = 12 * *(void *)(a1 + 24);
  sub_2161069DC(a2, (char *)&__buf, 8uLL);
  sub_21610B460(a2, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return sub_2161068A0(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_21610B460(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  size_t v3 = 12 * a3;

  return sub_2161069DC(a1, a2, v3);
}

uint64_t sub_21610B54C(uint64_t a1, uint64_t a2)
{
  uint64_t __buf = 4 * *(void *)(a1 + 24);
  sub_2161069DC(a2, (char *)&__buf, 8uLL);
  sub_21610B5B0(a2, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return sub_2161068A0(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_21610B5B0(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  size_t v3 = 4 * a3;

  return sub_2161069DC(a1, a2, v3);
}

uint64_t sub_21610B68C(uint64_t a1, uint64_t a2)
{
  sub_21610B2BC(a1, a2);
  LODWORD(__buf) = *(void *)(a1 + 48);
  sub_2161069DC(a2, (char *)&__buf, 4uLL);
  LODWORD(__buf) = *(_DWORD *)(a1 + 56);
  sub_2161069DC(a2, (char *)&__buf, 4uLL);
  uint64_t __buf = *(void *)(a1 + 64);
  return sub_2161069DC(a2, (char *)&__buf, 8uLL);
}

void *sub_21610B704(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = result;
  if (a6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  if (a6 > 0x16)
  {
    uint64_t v10 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17) {
      uint64_t v10 = a6 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t result = operator new(v10 + 1);
    v6[1] = a6;
    v6[2] = v11 | 0x8000000000000000;
    *uint64_t v6 = result;
    uint64_t v6 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a6;
  }
  while (a3 != a5)
  {
    char v12 = *(unsigned char *)--a3;
    *(unsigned char *)uint64_t v6 = v12;
    uint64_t v6 = (void *)((char *)v6 + 1);
  }
  *(unsigned char *)uint64_t v6 = 0;
  return result;
}

void sub_21610B7AC()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C6C94B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C6BC2A8, (void (*)(void *))std::exception::~exception);
}

void sub_21610B7FC(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_21610B834(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_21610B8E8(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 + 8);
  if (v9)
  {
    uint64_t v11 = 0;
    char v12 = (_DWORD *)(v10 + 16);
    do
    {
      *char v12 = v11;
      v12 += 6;
      ++v11;
    }
    while (v9 != v11);
  }
  unint64_t v13 = sub_2160FEBF4(v10, v10 + 24 * v9, 0);
  uint64_t v14 = 256;
  if (a5 != 1) {
    uint64_t v14 = 1;
  }
  do
  {
    unint64_t v15 = v14;
    v14 *= 2;
  }
  while (v15 < v13 / *(unsigned int *)(a4 + 8));
  sub_2160FB080(a1 + 126, v15);
  a1[132] = v15 - 1;
  sub_216108DAC(a1, 1);
  sub_216108DAC(a1, 0);
  unint64_t v16 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_2160F9B00(a1 + 78, v84);
  int v77 = a1 + 52;
  sub_216108DAC(a1 + 52, 0);
  uint64_t v72 = a5;
  memset(v84, 0, 41);
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  long long v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(void *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_21610C2E4(v82, (uint64_t *)&v78);
  uint64_t v17 = *((void *)&v83 + 1);
  if (*((void *)&v83 + 1))
  {
    v73 = a1 + 78;
    do
    {
      uint64_t v18 = a1[58];
      uint64_t v19 = (unsigned int *)(*(void *)(*((void *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      uint64_t v22 = v19[2];
      *(void *)&long long v83 = v83 + 1;
      *((void *)&v83 + 1) = v17 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        uint64_t v23 = v18;
        operator delete(**((void ***)&v82[0] + 1));
        uint64_t v18 = v23;
        *((void *)&v82[0] + 1) += 8;
        *(void *)&long long v83 = v83 - 341;
      }
      uint64_t v76 = v17;
      uint64_t v24 = v18 - v17;
      if (v20 < v21)
      {
        while (1)
        {
          uint64_t v25 = *(void *)(a2 + 8);
          if (*(_DWORD *)(v25 + 24 * v20 + 8) != v22) {
            break;
          }
          *(_DWORD *)(v25 + 24 * v20 + 12) = v24;
          uint64_t v20 = (v20 + 1);
          if (v21 == v20) {
            goto LABEL_49;
          }
        }
      }
      if (v20 != v21)
      {
        uint64_t v75 = v18;
        uint64_t v26 = v80;
        long long v80 = 0u;
        memset(v81, 0, 25);
        if (v26) {
          MEMORY[0x2166CA7C0](v26, 0x1000C8077774924);
        }
        uint64_t v27 = *(void *)(a2 + 8);
        double v28 = *(float *)(v27 + 24 * v20 + 12);
        uint64_t v29 = v20 + 1;
        if (v20 + 1 < v21)
        {
          uint64_t v30 = 24 * v20;
          uint64_t v31 = (v20 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(void *)(v27 + v30) + v22) != *(unsigned __int8 *)(*(void *)(v27 + v30 + 24)
                                                                                          + v22))
            {
              *(float *)&unsigned int v32 = v28;
              v78.n128_u64[0] = v31 + v20;
              v78.n128_u64[1] = v22 | ((unint64_t)v32 << 32);
              sub_2160FE94C((uint64_t *)&v80, &v78);
              uint64_t v27 = *(void *)(a2 + 8);
              double v28 = 0.0;
              LODWORD(v20) = v29;
            }
            double v28 = v28 + *(float *)(v27 + v30 + 36);
            ++v29;
            v30 += 24;
            v31 += 0x100000000;
          }
          while (v21 != v29);
        }
        *(float *)&unsigned int v33 = v28;
        v78.n128_u32[0] = v20;
        v78.n128_u32[1] = v21;
        v78.n128_u64[1] = v22 | ((unint64_t)v33 << 32);
        __n128 v34 = sub_2160FE94C((uint64_t *)&v80, &v78);
        unint64_t v16 = a1 + 78;
        uint64_t v35 = v75;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          unint64_t v36 = (__n128 *)*((void *)&v80 + 1);
          unint64_t v37 = v81[1];
          if (v81[1] < 129)
          {
            unsigned __int8 v38 = 0;
            uint64_t v40 = 0;
          }
          else
          {
            unsigned __int8 v38 = (__n128 *)sub_2160FFB78(v81[1]);
            uint64_t v40 = v39;
          }
          sub_21610C6BC(v36, &v36[v37], (uint64_t)&v78, v37, v38, v40, v34);
          if (v38) {
            operator delete(v38);
          }
          uint64_t v35 = v75;
        }
        uint64_t v41 = v81[1];
        if (v35 == v76) {
          a1[133] = v81[1];
        }
        if (v41)
        {
          unint64_t v42 = 0;
          do
          {
            __n128 v43 = (unsigned int *)(*((void *)&v80 + 1) + 16 * v42);
            uint64_t v44 = (uint64_t *)v43;
            uint64_t v45 = v43[2];
            unsigned int v46 = *v43;
            uint64_t v47 = *(void *)(a2 + 8);
            unint64_t v48 = *(unsigned int *)(v47 + 24 * *v43 + 8);
            unint64_t v49 = v45 + 1;
            if (v45 + 1 >= v48)
            {
              unint64_t v50 = v43[2];
              LODWORD(v48) = v45 + 1;
            }
            else
            {
              unint64_t v50 = v48 - 1;
              unint64_t v51 = v43[2];
              do
              {
                unint64_t v52 = v51;
                unint64_t v51 = v49;
                uint64_t v53 = (uint64_t *)(v47 + 24 * v46);
                uint64_t v54 = *v43;
                while (++v54 < (unint64_t)v43[1])
                {
                  uint64_t v55 = *v53;
                  uint64_t v56 = v53[3];
                  v53 += 3;
                  if (*(unsigned __int8 *)(v55 + v51) != *(unsigned __int8 *)(v56 + v51))
                  {
                    unint64_t v50 = v52;
                    LODWORD(v48) = v51;
                    goto LABEL_43;
                  }
                }
                unint64_t v49 = v51 + 1;
              }
              while (v51 + 1 != v48);
            }
LABEL_43:
            float v58 = *((float *)v43 + 3);
            v57 = v43 + 3;
            float v59 = v58;
            uint64_t v60 = ((32 * v24) ^ v24 ^ *(unsigned __int8 *)(*(void *)(v47 + 24 * v46) + v45)) & a1[132];
            uint64_t v61 = a1[127];
            uint64_t v62 = v61 + 12 * v60;
            float v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              uint64_t v65 = a1[81];
              uint64_t v66 = (_DWORD *)(v61 + 12 * v60);
              _DWORD *v66 = v24;
              v66[1] = v65;
              float *v63 = v59;
              uint64_t v45 = *((unsigned int *)v44 + 2);
            }
            if (v50 == v45)
            {
              v78.n128_u8[0] = *(unsigned char *)(*(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v44) + v50);
              sub_2160F9B00(v73, &v78);
              sub_216108DAC(v77, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_2160F9B00(v73, &v78);
              sub_216108DAC(v77, 1);
              __n128 v78 = 0uLL;
              int v79 = 0;
              uint64_t v67 = *((unsigned int *)v44 + 2);
              v78.n128_u64[0] = *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v44) + v67;
              v78.n128_u64[1] = (v48 - v67);
              v78.n128_u32[3] = *v57;
              sub_2160FE9C0((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v44 + 2) = v48;
            sub_21610C2E4(v82, v44);
            sub_216108DAC(a1, 1);
            ++v42;
          }
          while (v42 < v81[1]);
        }
      }
LABEL_49:
      sub_216108DAC(a1, 0);
      uint64_t v17 = *((void *)&v83 + 1);
    }
    while (*((void *)&v83 + 1));
  }
  sub_216108DAC(a1, 0);
  sub_216108EA4((uint64_t)a1, v72 == 1, 1);
  sub_21610C14C(v16);
  sub_21610C1EC((uint64_t)a1, a2, a3);
  long long v68 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v68;
  uint64_t v69 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)&v84[1];
  *(void *)&v84[1] = v69;
  long long v70 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v70;
  LOBYTE(v69) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v69;
  if ((void)v80) {
    MEMORY[0x2166CA7C0](v80, 0x1000C8077774924);
  }
  sub_21610060C(v82);
  uint64_t result = *(void *)&v84[0];
  if (*(void *)&v84[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v84[0], 0x1000C8077774924);
  }
  return result;
}

void sub_21610BF30(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  va_start(va, a18);
  if (a13) {
    MEMORY[0x2166CA7C0](a13, 0x1000C8077774924);
  }
  sub_21610060C((uint64_t *)va);
  uint64_t v21 = *(void *)(v18 - 144);
  if (v21) {
    MEMORY[0x2166CA7C0](v21, 0x1000C8077774924);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21610C050(long long *a1, uint64_t a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  sub_216100704((uint64_t)v9, a2);
  long long v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)a1 + 6);
  *((void *)a1 + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_21610C124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_21610C14C(unsigned char *result)
{
  if (result[40])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  size_t v1 = *((void *)result + 3);
  if (v1 != *((void *)result + 4))
  {
    return sub_2160FC1A8((uint64_t *)result, v1);
  }
  return result;
}

uint64_t sub_21610C1EC(uint64_t a1, uint64_t a2, long long *a3)
{
  memset(v13, 0, 41);
  sub_2160FD868((uint64_t *)v13, *(void *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
    uint64_t v7 = (unsigned int *)(*(void *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
  }
  long long v8 = *a3;
  uint64_t v9 = *(void *)&v13[1];
  *(void *)a3 = *(void *)&v13[0];
  *((void *)a3 + 1) = v6;
  v13[0] = v8;
  uint64_t v10 = *((void *)a3 + 2);
  *((void *)a3 + 2) = v9;
  *(void *)&v13[1] = v10;
  long long v11 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 40) = BYTE8(v13[2]);
  uint64_t result = v8;
  BYTE8(v13[2]) = v10;
  if ((void)v8) {
    return MEMORY[0x2166CA7C0](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_21610C2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void sub_21610C2E4(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_21610C3A4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

void sub_21610C3A4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __n128 v34 = (char *)sub_2160FFAA8(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unsigned __int8 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFFCuLL);
      sub_2160FF608(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFFCuLL);
    sub_2160FF720((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __n128 v34 = (char *)sub_2160FFAA8((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __n128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_2160FFAA8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFFCuLL);
  sub_2160FF840(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2160FF958((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_21610C670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_21610C6BC(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u32[0] = a2[-1].n128_u32[3];
      if (a7.n128_f32[0] > a1->n128_f32[3])
      {
        a7 = *a1;
        *a1 = a2[-1];
        a2[-1] = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v13 = a4 >> 1;
      BOOL v14 = &a1[a4 >> 1];
      unint64_t v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = sub_21610C888(a1, v14, a3, v15, a5, a7);
        v18.n128_f64[0] = sub_21610C888(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13], v17);
        a7.n128_u64[0] = sub_2160FFFAC(a5, &a5[v13], &a5[v13], &a5[a4], a1, v18).n128_u64[0];
      }
      else
      {
        sub_21610C6BC(a1, v14, a3, v15, a5, a6);
        sub_21610C6BC(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = sub_216100020((long long *)a1, (long long *)&a1[a4 >> 1], (long long *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v16).n128_u64[0];
      }
    }
    else
    {
      sub_2160FFDA8((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a7.n128_f64[0];
}

double sub_21610C888(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v10 = a2 - 1;
      if (a2[-1].n128_f32[3] <= a1->n128_f32[3])
      {
        *a5 = *a1;
        a6 = *v10;
      }
      else
      {
        *a5 = *v10;
        a6 = *a1;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_21610C6BC(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      sub_21610C6BC(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = sub_2160FFFAC(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = sub_21610029C(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

void sub_21610C9E8(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_21610CB04();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      BOOL v14 = (char *)sub_2160FFAA8(v4, v13);
      unint64_t v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      BOOL v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    __n128 v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    __n128 v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_21610CB04()
{
}

uint64_t sub_21610CB1C(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (_DWORD *)(v9 + 16);
    do
    {
      *uint64_t v11 = v10;
      v11 += 6;
      ++v10;
    }
    while (v8 != v10);
  }
  unint64_t v12 = sub_216102318(v9, v9 + 24 * v8, 0);
  uint64_t v13 = 256;
  if (a5 != 1) {
    uint64_t v13 = 1;
  }
  do
  {
    unint64_t v14 = v13;
    v13 *= 2;
  }
  while (v14 < v12 / *(unsigned int *)(a4 + 8));
  sub_2160FB080(a1 + 126, v14);
  a1[132] = v14 - 1;
  sub_216108DAC(a1, 1);
  sub_216108DAC(a1, 0);
  unint64_t v15 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_2160F9B00(a1 + 78, v84);
  sub_216108DAC(a1 + 52, 0);
  memset(v84, 0, 41);
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  long long v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(void *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_21610C2E4(v82, (uint64_t *)&v78);
  uint64_t v16 = *((void *)&v83 + 1);
  if (*((void *)&v83 + 1))
  {
    uint64_t v72 = a1 + 52;
    v73 = a1 + 78;
    do
    {
      uint64_t v17 = a1[58];
      uint64_t v18 = (unsigned int *)(*(void *)(*((void *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      uint64_t v21 = v18[2];
      *(void *)&long long v83 = v83 + 1;
      *((void *)&v83 + 1) = v16 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        uint64_t v22 = v17;
        uint64_t v23 = v16;
        operator delete(**((void ***)&v82[0] + 1));
        uint64_t v16 = v23;
        uint64_t v17 = v22;
        *((void *)&v82[0] + 1) += 8;
        *(void *)&long long v83 = v83 - 341;
      }
      if (v19 < v20)
      {
        while (1)
        {
          uint64_t v24 = *(void *)(a2 + 8);
          if (*(_DWORD *)(v24 + 24 * v19 + 8) != v21) {
            break;
          }
          *(_DWORD *)(v24 + 24 * v19 + 12) = v17 - v16;
          uint64_t v19 = (v19 + 1);
          if (v20 == v19) {
            goto LABEL_49;
          }
        }
      }
      if (v19 != v20)
      {
        uint64_t v76 = v16;
        int v77 = v17 - v16;
        uint64_t v25 = v80;
        long long v80 = 0u;
        memset(v81, 0, 25);
        if (v25) {
          MEMORY[0x2166CA7C0](v25, 0x1000C8077774924);
        }
        uint64_t v75 = v17;
        uint64_t v26 = *(void *)(a2 + 8);
        double v27 = *(float *)(v26 + 24 * v19 + 12);
        uint64_t v28 = v19 + 1;
        if (v19 + 1 < v20)
        {
          uint64_t v29 = 24 * v19;
          uint64_t v30 = (v19 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(void *)(v26 + v29) - v21 - 1) != *(unsigned __int8 *)(*(void *)(v26 + v29 + 24)
                                                                                              - v21
                                                                                              - 1))
            {
              *(float *)&unsigned int v31 = v27;
              v78.n128_u64[0] = v30 + v19;
              v78.n128_u64[1] = v21 | ((unint64_t)v31 << 32);
              sub_2160FE94C((uint64_t *)&v80, &v78);
              uint64_t v26 = *(void *)(a2 + 8);
              double v27 = 0.0;
              LODWORD(v19) = v28;
            }
            double v27 = v27 + *(float *)(v26 + v29 + 36);
            ++v28;
            v29 += 24;
            v30 += 0x100000000;
          }
          while (v20 != v28);
        }
        *(float *)&unsigned int v32 = v27;
        v78.n128_u32[0] = v19;
        v78.n128_u32[1] = v20;
        v78.n128_u64[1] = v21 | ((unint64_t)v32 << 32);
        __n128 v33 = sub_2160FE94C((uint64_t *)&v80, &v78);
        unint64_t v15 = a1 + 78;
        uint64_t v34 = v76;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          uint64_t v35 = (__n128 *)*((void *)&v80 + 1);
          unint64_t v36 = v81[1];
          if (v81[1] < 129)
          {
            unint64_t v37 = 0;
            uint64_t v39 = 0;
          }
          else
          {
            unint64_t v37 = (__n128 *)sub_2160FFB78(v81[1]);
            uint64_t v39 = v38;
          }
          sub_21610C6BC(v35, &v35[v36], (uint64_t)&v78, v36, v37, v39, v33);
          if (v37) {
            operator delete(v37);
          }
          uint64_t v34 = v76;
        }
        uint64_t v40 = v81[1];
        if (v75 == v34) {
          a1[133] = v81[1];
        }
        if (v40)
        {
          unint64_t v41 = 0;
          do
          {
            uint64_t v42 = (unsigned int *)(*((void *)&v80 + 1) + 16 * v41);
            __n128 v43 = (uint64_t *)v42;
            uint64_t v44 = v42[2];
            uint64_t v45 = *(void *)(a2 + 8);
            unint64_t v46 = *(unsigned int *)(v45 + 24 * *v42 + 8);
            unint64_t v47 = v44 + 1;
            if (v44 + 1 >= v46)
            {
              unint64_t v48 = v42[2];
              LODWORD(v46) = v44 + 1;
            }
            else
            {
              unint64_t v48 = v46 - 1;
              uint64_t v49 = (uint64_t *)(v45 + 24 * *v42);
              unint64_t v50 = v42[2];
              do
              {
                unint64_t v51 = v50;
                unint64_t v50 = v47;
                uint64_t v52 = v49;
                uint64_t v53 = *v42;
                while (++v53 < (unint64_t)v42[1])
                {
                  uint64_t v54 = *v52;
                  uint64_t v55 = v52[3];
                  v52 += 3;
                  if (*(unsigned __int8 *)(v54 + ~v51 - 1) != *(unsigned __int8 *)(v55 + ~v51 - 1))
                  {
                    unint64_t v48 = v51;
                    LODWORD(v46) = v47;
                    goto LABEL_43;
                  }
                }
                ++v47;
              }
              while (v50 + 1 != v46);
            }
LABEL_43:
            uint64_t v56 = a1[81];
            float v58 = *((float *)v42 + 3);
            v57 = v42 + 3;
            float v59 = v58;
            uint64_t v60 = a1[132] & v56;
            uint64_t v61 = a1[127];
            uint64_t v62 = v61 + 12 * v60;
            float v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              uint64_t v65 = (_DWORD *)(v61 + 12 * v60);
              *uint64_t v65 = v77;
              v65[1] = v56;
              float *v63 = v59;
              uint64_t v44 = *((unsigned int *)v43 + 2);
            }
            if (v48 == v44)
            {
              v78.n128_u8[0] = *(unsigned char *)(~v48 + *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v43));
              sub_2160F9B00(v73, &v78);
              sub_216108DAC(v72, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_2160F9B00(v73, &v78);
              sub_216108DAC(v72, 1);
              __n128 v78 = 0uLL;
              int v79 = 0;
              uint64_t v66 = *((unsigned int *)v43 + 2);
              v78.n128_u64[0] = *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v43) - v66;
              v78.n128_u64[1] = (v46 - v66);
              v78.n128_u32[3] = *v57;
              sub_2160FE9C0((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v43 + 2) = v46;
            sub_21610C2E4(v82, v43);
            sub_216108DAC(a1, 1);
            ++v41;
          }
          while (v41 < v81[1]);
        }
      }
LABEL_49:
      sub_216108DAC(a1, 0);
      uint64_t v16 = *((void *)&v83 + 1);
    }
    while (*((void *)&v83 + 1));
  }
  sub_216108DAC(a1, 0);
  sub_216108EA4((uint64_t)a1, a5 == 1, 1);
  sub_21610C14C(v15);
  sub_21610D294((uint64_t)a1, a2, a3);
  long long v67 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v67;
  uint64_t v68 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)&v84[1];
  *(void *)&v84[1] = v68;
  long long v69 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v69;
  LOBYTE(v68) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v68;
  if ((void)v80) {
    MEMORY[0x2166CA7C0](v80, 0x1000C8077774924);
  }
  sub_21610060C(v82);
  uint64_t result = *(void *)&v84[0];
  if (*(void *)&v84[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v84[0], 0x1000C8077774924);
  }
  return result;
}

void sub_21610D174(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a21) {
    MEMORY[0x2166CA7C0](a21, 0x1000C8077774924);
  }
  sub_21610060C(&a27);
  uint64_t v30 = *(void *)(v27 - 144);
  if (v30) {
    MEMORY[0x2166CA7C0](v30, 0x1000C8077774924);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21610D294(uint64_t a1, uint64_t a2, long long *a3)
{
  memset(v13, 0, 41);
  sub_2160FD868((uint64_t *)v13, *(void *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
    unint64_t v7 = (unsigned int *)(*(void *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
  }
  long long v8 = *a3;
  uint64_t v9 = *(void *)&v13[1];
  *(void *)a3 = *(void *)&v13[0];
  *((void *)a3 + 1) = v6;
  v13[0] = v8;
  uint64_t v10 = *((void *)a3 + 2);
  *((void *)a3 + 2) = v9;
  *(void *)&v13[1] = v10;
  long long v11 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 40) = BYTE8(v13[2]);
  uint64_t result = v8;
  BYTE8(v13[2]) = v10;
  if ((void)v8) {
    return MEMORY[0x2166CA7C0](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_21610D364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21610D38C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_216106EC4(a2, 8uLL);
  *(void *)(a1 + 16) = sub_216106EC4(a2, v4);
  sub_216106DE8(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4;

  return sub_21610AD48(a1);
}

uint64_t sub_21610D400(uint64_t a1, uint64_t a2)
{
  uint64_t __buf = *(void *)(a1 + 24);
  sub_2161069DC(a2, (char *)&__buf, 8uLL);
  sub_21610D464(a2, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return sub_2161068A0(a2, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t sub_21610D464(uint64_t a1, char *a2, size_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "h:33: MARISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  return sub_2161069DC(a1, a2, a3);
}

uint64_t sub_21610D4E8(long long *a1, uint64_t a2, long long *a3, int a4)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x200000011;
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:17: MA"
          "RISA_NULL_ERROR: offsets == NULL";
    goto LABEL_28;
  }
  if (a4 == 0x2000) {
    goto LABEL_15;
  }
  if (a4 != 4096)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x500000028;
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:40: MA"
          "RISA_CODE_ERROR: undefined tail mode";
LABEL_28:
    exception[3] = v17;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = 0;
    a4 = 4096;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8) + 16 * v6;
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8) {
        break;
      }
LABEL_11:
      if (++v6 == v5) {
        goto LABEL_15;
      }
    }
    uint64_t v9 = -v8;
    uint64_t v10 = *(void *)v7 + 1;
    while (*(unsigned char *)(v10 + v9))
    {
      if (__CFADD__(v9++, 1)) {
        goto LABEL_11;
      }
    }
    a4 = 0x2000;
  }
  else
  {
    a4 = 4096;
  }
LABEL_15:
  memset(v18, 0, 41);
  memset(v19, 0, 41);
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  _OWORD v19[3] = 0u;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  sub_21610D754((uint64_t)v18, a2, a3, a4);
  long long v12 = *a1;
  *a1 = v18[0];
  v18[0] = v12;
  uint64_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v18[1];
  *(void *)&v18[1] = v13;
  long long v14 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)((char *)&v18[1] + 8) = v14;
  LOBYTE(v13) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v18[2]);
  BYTE8(v18[2]) = v13;
  sub_2160FA358((uint64_t *)a1 + 6, (uint64_t *)v19);
  if ((void)v24) {
    MEMORY[0x2166CA7C0](v24, 0x1000C8077774924);
  }
  if ((void)v22) {
    MEMORY[0x2166CA7C0](v22, 0x1000C8077774924);
  }
  if ((void)v20) {
    MEMORY[0x2166CA7C0](v20, 0x1000C8077774924);
  }
  if (*(void *)&v19[0]) {
    MEMORY[0x2166CA7C0](*(void *)&v19[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v18[0];
  if (*(void *)&v18[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v18[0], 0x1000C8077774924);
  }
  return result;
}

void sub_21610D740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21610D754(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    uint64_t v10 = 0;
    long long v11 = (_DWORD *)(v9 + 12);
    do
    {
      *long long v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v8 != v10);
  }
  sub_216103B5C(v9, v9 + 16 * v8, 0);
  memset(v34, 0, 41);
  unint64_t v12 = *(void *)(a2 + 24);
  LODWORD(v33[0]) = 0;
  sub_216103954((uint64_t *)v34, v12, v33);
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v13 = *(void *)(a2 + 24);
  if (v13)
  {
    long long v14 = v33;
    do
    {
      --v13;
      uint64_t v15 = *(void *)(a2 + 8);
      uint64_t v16 = v15 + 16 * v13;
      uint64_t v18 = (unsigned int *)(v16 + 8);
      uint64_t v17 = *(unsigned int *)(v16 + 8);
      if (!*(_DWORD *)(v16 + 8))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C6B52A8;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        exception[2] = 0x4000000ACLL;
        exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/t"
                       "ail.cc:172: MARISA_RANGE_ERROR: current.length() == 0";
        __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = *((unsigned int *)v14 + 2);
      while (v21 != v20)
      {
        if (*(unsigned __int8 *)(*v14 + v19) != *(unsigned __int8 *)(*(void *)v16 + v19)) {
          goto LABEL_13;
        }
        ++v20;
        --v19;
        if (v17 == v20) {
          goto LABEL_14;
        }
      }
      uint64_t v20 = *((unsigned int *)v14 + 2);
LABEL_13:
      if (v20 != v17)
      {
        uint64_t v22 = *((void *)&v34[0] + 1);
        goto LABEL_17;
      }
LABEL_14:
      uint64_t v22 = *((void *)&v34[0] + 1);
      if (v21)
      {
        *(_DWORD *)(*((void *)&v34[0] + 1) + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = v21
                                                                                             - v17
                                                                                             + *(_DWORD *)(*((void *)&v34[0] + 1) + 4 * *((unsigned int *)v14 + 3));
        goto LABEL_29;
      }
LABEL_17:
      *(_DWORD *)(v22 + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = *(void *)(a1 + 24);
      unint64_t v23 = *v18;
      if (v23)
      {
        for (unint64_t i = 0; i < v23; ++i)
        {
          char v32 = *(unsigned char *)(*(void *)v16 - v23 + i + 1);
          sub_2160F9B00((uint64_t *)a1, &v32);
          unint64_t v23 = *v18;
        }
        if (a4 != 4096)
        {
          if (v23 >= 2)
          {
            unint64_t v25 = 1;
            do
            {
              sub_216108DAC((uint64_t *)(a1 + 48), 0);
              ++v25;
            }
            while (v25 < *v18);
          }
LABEL_27:
          sub_216108DAC((uint64_t *)(a1 + 48), 1);
          goto LABEL_28;
        }
      }
      else if (a4 != 4096)
      {
        goto LABEL_27;
      }
      char v32 = 0;
      sub_2160F9B00((uint64_t *)a1, &v32);
LABEL_28:
      if (*(_DWORD *)(a1 + 28))
      {
        unsigned int v31 = __cxa_allocate_exception(0x20uLL);
        *unsigned int v31 = &unk_26C6B52A8;
        v31[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        v31[2] = 0x7000000C2;
        _OWORD v31[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc"
                 ":194: MARISA_SIZE_ERROR: buf_.size() > MARISA_UINT32_MAX";
        __cxa_throw(v31, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
      }
LABEL_29:
      long long v14 = (void *)v16;
    }
    while (v13);
  }
  sub_21610C14C((unsigned char *)a1);
  long long v26 = *a3;
  *a3 = v34[0];
  v34[0] = v26;
  uint64_t v27 = *((void *)a3 + 2);
  *((void *)a3 + 2) = *(void *)&v34[1];
  *(void *)&v34[1] = v27;
  long long v28 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v34[1] + 8);
  *(_OWORD *)((char *)&v34[1] + 8) = v28;
  LOBYTE(v27) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 40) = BYTE8(v34[2]);
  uint64_t result = v26;
  BYTE8(v34[2]) = v27;
  if ((void)v26) {
    return MEMORY[0x2166CA7C0](v26, 0x1000C8077774924);
  }
  return result;
}

void sub_21610DA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x2166CA7C0](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21610DAC4(uint64_t a1, uint64_t *a2)
{
  memset(v8, 0, 41);
  memset(v9, 0, 41);
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  _OWORD v9[3] = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  sub_21610DEF8(v8, a2);
  sub_216109728((uint64_t *)v9, a2);
  long long v4 = *(_OWORD *)a1;
  *(_OWORD *)a1 = v8[0];
  v8[0] = v4;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)&v8[1];
  *(void *)&v8[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)&v8[1] + 8);
  *(long long *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  sub_2160FA358((uint64_t *)(a1 + 48), (uint64_t *)v9);
  if ((void)v14) {
    MEMORY[0x2166CA7C0](v14, 0x1000C8077774924);
  }
  if ((void)v12) {
    MEMORY[0x2166CA7C0](v12, 0x1000C8077774924);
  }
  if ((void)v10) {
    MEMORY[0x2166CA7C0](v10, 0x1000C8077774924);
  }
  if (*(void *)&v9[0]) {
    MEMORY[0x2166CA7C0](*(void *)&v9[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x2166CA7C0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_21610DC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21610DC30(uint64_t a1, uint64_t a2)
{
  sub_21610D400(a1, a2);

  return sub_21610B238(a1 + 48, a2);
}

void sub_21610DC70(void *a1, std::string *this, unint64_t a3)
{
  unint64_t v3 = a3;
  if (a1[12])
  {
    do
    {
      std::string::push_back(this, *(unsigned char *)(a1[2] + v3));
      uint64_t v6 = *(void *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1[2];
    std::string::value_type v8 = *(unsigned char *)(v7 + a3);
    if (v8)
    {
      unint64_t v9 = (unsigned __int8 *)(a3 + v7 + 1);
      do
      {
        std::string::push_back(this, v8);
        int v10 = *v9++;
        std::string::value_type v8 = v10;
      }
      while (v10);
    }
  }
}

uint64_t sub_21610DD00(void *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v5 = a1[2];
  if (a1[12])
  {
    unint64_t v6 = *a4;
    do
    {
      if (*(unsigned __int8 *)(v5 + a5) != *(unsigned __int8 *)(a2 + v6)) {
        break;
      }
      *a4 = ++v6;
      if ((*(void *)(a1[8] + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5)) {
        return 1;
      }
      ++a5;
    }
    while (v6 < a3);
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)(v5 + a5);
    unint64_t v8 = *a4;
    int v11 = *v7;
    unint64_t v9 = v7 + 1;
    int v10 = v11;
    while (v10 == *(unsigned __int8 *)(a2 + v8))
    {
      *a4 = ++v8;
      int v10 = *v9;
      if (!*v9) {
        return 1;
      }
      ++v9;
      if (v8 >= a3) {
        return 0;
      }
    }
  }
  return 0;
}

BOOL sub_21610DD94(void *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *this)
{
  unint64_t v7 = a5;
  if (a1[12])
  {
    unint64_t v12 = *a4;
    while (1)
    {
      int v13 = *(unsigned __int8 *)(a1[2] + v7);
      int v14 = *(unsigned __int8 *)(a2 + v12);
      BOOL v15 = v13 == v14;
      if (v13 != v14) {
        break;
      }
      std::string::push_back(this, v13);
      unint64_t v12 = *a4 + 1;
      *a4 = v12;
      if ((*(void *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7)) {
        break;
      }
      ++v7;
      if (v12 >= a3)
      {
        do
        {
          std::string::push_back(this, *(unsigned char *)(a1[2] + v7));
          uint64_t v16 = *(void *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7;
          ++v7;
        }
        while ((v16 & 1) == 0);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v17 = a1[2];
    unint64_t v18 = *a4;
    unint64_t v19 = v17 + a5 - *a4;
    unsigned __int8 v20 = *(unsigned char *)(v17 + a5);
    unint64_t v21 = *a4;
    while (1)
    {
      int v22 = *(unsigned __int8 *)(a2 + v21);
      BOOL v15 = v20 == v22;
      if (v20 != v22) {
        break;
      }
      std::string::push_back(this, v20);
      unint64_t v23 = *a4;
      unint64_t v21 = *a4 + 1;
      *a4 = v21;
      unsigned __int8 v20 = *(unsigned char *)(v19 + v21);
      if (!v20) {
        break;
      }
      if (v21 >= a3)
      {
        long long v24 = (unsigned __int8 *)(v7 - v18 + v17 + v23 + 2);
        do
        {
          std::string::push_back(this, v20);
          int v25 = *v24++;
          unsigned __int8 v20 = v25;
        }
        while (v25);
        return 1;
      }
    }
  }
  return v15;
}

uint64_t sub_21610DEF8(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_21610D38C((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_21610DF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21610DFB8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 9;
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  unint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8 * (a2 >> 6)) & ~(-1 << a2);
  unint64_t v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t sub_21610E100(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[16];
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3;
    unint64_t v8 = v3-- << 9;
    unint64_t v9 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  int v11 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v12 = v11[1];
  unint64_t v13 = a2 - (v3 << 9) + *v11;
  uint64_t v14 = 8 * v3;
  if (v13 >= 256 - (v12 >> 23))
  {
    unint64_t v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    uint64_t v16 = (v15 >> 9) & 0x1FF;
    if (v13 >= 384 - v16)
    {
      uint64_t v18 = (v15 >> 18) & 0x1FF;
      if (v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        unint64_t v13 = v13 + v18 - 448;
      }
      else
      {
        v14 |= 6uLL;
        unint64_t v13 = v13 + v16 - 384;
      }
    }
    else if (v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      unint64_t v13 = v13 + (v15 & 0x1FF) - 320;
    }
    else
    {
      v14 |= 4uLL;
      unint64_t v13 = (v12 >> 23) + v13 - 256;
    }
  }
  else if (v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    uint64_t v17 = (v12 >> 15);
    if (v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      unint64_t v13 = v13 + v17 - 192;
    }
    else
    {
      v14 |= 2uLL;
      unint64_t v13 = v13 + (v12 >> 7) - 128;
    }
  }
  else if (v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    unint64_t v13 = (v12 & 0x7F) + v13 - 64;
  }
  return sub_21610E2E4(v13, v14 << 6, ~*(void *)(a1[2] + 8 * v14));
}

unint64_t sub_21610E2E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  uint64_t v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  unint64_t v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * a1
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
       + byte_21636C098[256 * (a1 - ((unint64_t)(0x101010101010100 * v4) >> v5))
                      + (a3 >> v5)];
}

unint64_t sub_21610E36C(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[22];
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3--;
    unint64_t v8 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  unsigned int v10 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v11 = v10[1];
  unint64_t v12 = a2 - *v10;
  uint64_t v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    unint64_t v23 = v11 >> 23;
    unint64_t v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    unint64_t v25 = (v24 >> 9) & 0x1FF;
    unint64_t v26 = (v24 >> 18) & 0x1FF;
    uint64_t v27 = v13 | 7;
    BOOL v28 = v12 >= v26;
    if (v12 < v26) {
      uint64_t v29 = v12 - v25;
    }
    else {
      uint64_t v29 = v12 - v26;
    }
    if (!v28) {
      uint64_t v27 = v13 | 6;
    }
    unint64_t v30 = v24 & 0x1FF;
    uint64_t v31 = v13 | 5;
    uint64_t v32 = v13 | 4;
    uint64_t v33 = v12 - v23;
    BOOL v34 = v12 >= v30;
    if (v12 < v30) {
      uint64_t v21 = v33;
    }
    else {
      uint64_t v21 = v12 - v30;
    }
    if (v34) {
      uint64_t v32 = v31;
    }
    if (v12 < v25)
    {
      uint64_t v22 = v32;
    }
    else
    {
      uint64_t v21 = v29;
      uint64_t v22 = v27;
    }
  }
  else
  {
    unint64_t v14 = v11 >> 7;
    unint64_t v15 = (v11 >> 15);
    uint64_t v16 = v12 - (v11 >> 7);
    if (v12 < v15)
    {
      uint64_t v17 = v13 | 2;
    }
    else
    {
      uint64_t v16 = v12 - v15;
      uint64_t v17 = v13 | 3;
    }
    unint64_t v18 = v11 & 0x7F;
    BOOL v20 = v12 >= v18;
    unint64_t v19 = v12 - v18;
    if (v20) {
      v13 |= 1uLL;
    }
    else {
      unint64_t v19 = v12;
    }
    BOOL v20 = v12 >= v14;
    if (v12 < v14) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v16;
    }
    if (v20) {
      uint64_t v22 = v17;
    }
    else {
      uint64_t v22 = v13;
    }
  }
  return sub_21610E2E4(v21, v22 << 6, *(void *)(a1[2] + 8 * v22));
}

void sub_21610E4E0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v7 = a1;
  unint64_t v8 = a2[6];
  unsigned int v9 = a1 + 8;
  unint64_t v10 = v8 >> 9;
  if ((v8 & 0x1FF) != 0) {
    ++v10;
  }
  sub_2160FD568(v9, v10 + 1);
  uint64_t v11 = v6[3];
  if (!v11)
  {
    LODWORD(v14) = 0;
    if ((v8 & 0x1FF) == 0) {
      goto LABEL_41;
    }
    goto LABEL_29;
  }
  unint64_t v51 = v8 & 0x1FF;
  unint64_t v52 = v8;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v53 = v7 + 20;
  uint64_t v54 = v7 + 14;
  uint64_t v57 = v6[3];
  do
  {
    unint64_t v16 = v12 >> 9;
    switch(v13 & 7)
    {
      case 1:
        uint64_t v17 = (_DWORD *)(v7[9] + 12 * v16);
        unsigned int v18 = v17[1] & 0xFFFFFF80 | (v14 - *v17) & 0x7F;
        goto LABEL_11;
      case 2:
        uint64_t v17 = (_DWORD *)(v7[9] + 12 * v16);
        unsigned int v18 = v17[1] & 0xFFFF807F | ((v14 - *(unsigned char *)v17) << 7);
        goto LABEL_11;
      case 3:
        uint64_t v17 = (_DWORD *)(v7[9] + 12 * v16);
        unsigned int v18 = v17[1] & 0xFF807FFF | ((v14 - *(unsigned char *)v17) << 15);
        goto LABEL_11;
      case 4:
        uint64_t v17 = (_DWORD *)(v7[9] + 12 * v16);
        unsigned int v18 = v17[1] & 0x7FFFFF | ((unsigned __int16)(v14 - *(_WORD *)v17) << 23);
LABEL_11:
        v17[1] = v18;
        break;
      case 5:
        unint64_t v19 = (_DWORD *)(v7[9] + 12 * v16);
        unsigned int v20 = v19[2] & 0xFFFFFE00 | (v14 - *v19) & 0x1FF;
        goto LABEL_15;
      case 6:
        unint64_t v19 = (_DWORD *)(v7[9] + 12 * v16);
        unsigned int v20 = v19[2] & 0xFFFC01FF | (((v14 - *v19) & 0x1FF) << 9);
        goto LABEL_15;
      case 7:
        unint64_t v19 = (_DWORD *)(v7[9] + 12 * v16);
        unsigned int v20 = v19[2] & 0xF803FFFF | (((v14 - *v19) & 0x1FF) << 18);
LABEL_15:
        v19[2] = v20;
        break;
      default:
        *(_DWORD *)(v7[9] + 12 * v16) = v14;
        break;
    }
    unint64_t v21 = *(void *)(v6[2] + 8 * v13);
    unint64_t v22 = (((((v21 >> 1) & 0x5555555555555555) + (v21 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
        + ((((v21 >> 1) & 0x5555555555555555) + (v21 & 0x5555555555555555)) & 0x3333333333333333);
    unint64_t v23 = (0x101010101010101 * (((v22 >> 4) & 0x707070707070707) + (v22 & 0x707070707070707))) >> 56;
    if (a3)
    {
      unint64_t v24 = v6;
      uint64_t v25 = a3;
      unint64_t v26 = v7;
      uint64_t v27 = a4;
      uint64_t v28 = 64;
      if (v8 < 0x40) {
        uint64_t v28 = v8;
      }
      unint64_t v29 = v28 - v23;
      unint64_t v30 = -(int)v15 & 0x1FFLL;
      if (v28 - v23 > v30)
      {
        uint64_t v55 = v15;
        uint64_t v56 = v14;
        int v58 = sub_21610E2E4(v30, v12, ~v21);
        sub_216104BB4(v54, &v58);
        uint64_t v15 = v55;
        uint64_t v14 = v56;
        uint64_t v11 = v57;
      }
      v15 += v29;
      a4 = v27;
      uint64_t v7 = v26;
      a3 = v25;
      unint64_t v6 = v24;
    }
    if (a4)
    {
      unint64_t v31 = -(int)v14 & 0x1FFLL;
      if (v23 > v31)
      {
        unint64_t v32 = v21;
        uint64_t v33 = v14;
        uint64_t v34 = v15;
        int v58 = sub_21610E2E4(v31, v12, v32);
        sub_216104BB4(v53, &v58);
        uint64_t v15 = v34;
        uint64_t v11 = v57;
        uint64_t v14 = v33;
      }
    }
    v14 += v23;
    ++v13;
    v12 += 64;
    v8 -= 64;
  }
  while (v11 != v13);
  unint64_t v8 = v52;
  if (v51)
  {
LABEL_29:
    unint64_t v35 = (v8 - 1) >> 9;
    switch(((v8 - 1) >> 6) & 7)
    {
      case 0uLL:
        uint64_t v36 = v7[9];
        unint64_t v37 = (_DWORD *)(v36 + 12 * v35);
        int v38 = v14 - *v37;
        unsigned int v39 = v37[1] & 0xFFFFFF80 | v38 & 0x7F;
        v37[1] = v39;
        goto LABEL_32;
      case 1uLL:
        uint64_t v36 = v7[9];
        uint64_t v40 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v39 = v40[1];
        int v38 = v14 - *v40;
LABEL_32:
        unsigned int v41 = v39 & 0xFFFF807F | (v38 << 7);
        *(_DWORD *)(v36 + 12 * v35 + 4) = v41;
        goto LABEL_34;
      case 2uLL:
        uint64_t v36 = v7[9];
        uint64_t v42 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v41 = v42[1];
        int v38 = v14 - *v42;
LABEL_34:
        unsigned int v43 = v41 & 0xFF807FFF | (v38 << 15);
        *(_DWORD *)(v36 + 12 * v35 + 4) = v43;
        goto LABEL_36;
      case 3uLL:
        uint64_t v36 = v7[9];
        uint64_t v44 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v43 = v44[1];
        int v38 = v14 - *v44;
LABEL_36:
        *(_DWORD *)(v36 + 12 * v35 + 4) = v43 & 0x7FFFFF | ((unsigned __int16)v38 << 23);
        goto LABEL_38;
      case 4uLL:
        uint64_t v36 = v7[9];
        int v38 = v14 - *(_DWORD *)(v36 + 12 * v35);
LABEL_38:
        uint64_t v45 = v36 + 12 * v35;
        unsigned int v46 = *(_DWORD *)(v45 + 8) & 0xFFFFFE00 | v38 & 0x1FF;
        *(_DWORD *)(v45 + 8) = v46;
        goto LABEL_39;
      case 5uLL:
        uint64_t v36 = v7[9];
        uint64_t v49 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v46 = v49[2];
        int v38 = v14 - *v49;
LABEL_39:
        unsigned int v47 = v46 & 0xFFFC01FF | ((v38 & 0x1FF) << 9);
        *(_DWORD *)(v36 + 12 * v35 + 8) = v47;
        goto LABEL_40;
      case 6uLL:
        uint64_t v36 = v7[9];
        unint64_t v50 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v47 = v50[2];
        int v38 = v14 - *v50;
LABEL_40:
        *(_DWORD *)(v36 + 12 * v35 + 8) = v47 & 0xF803FFFF | ((v38 & 0x1FF) << 18);
        break;
      default:
        break;
    }
  }
LABEL_41:
  v7[6] = v8;
  v7[7] = v6[7];
  *(_DWORD *)(v7[9] + 12 * v7[11] - 12) = v14;
  if (a3)
  {
    int v58 = v8;
    sub_216104BB4(v7 + 14, &v58);
    sub_21610E98C((_DWORD *)v7 + 28);
  }
  if (a4)
  {
    unint64_t v48 = v7 + 20;
    int v58 = v8;
    sub_216104BB4(v48, &v58);
    sub_21610E98C(v48);
  }
}

_DWORD *sub_21610E98C(_DWORD *result)
{
  if (*((unsigned char *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C6B52A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_26C6B4CF8, (void (*)(void *))std::exception::~exception);
  }
  uint64_t v1 = *((void *)result + 3);
  if (v1 != *((void *)result + 4))
  {
    return sub_2160FD99C((uint64_t *)result, v1);
  }
  return result;
}

void sub_21610EA2C(void *a1)
{
  *a1 = &unk_26C6C53E8;
  operator new();
}

void *sub_21610EA90(void *a1)
{
  *a1 = &unk_26C6C53E8;
  uint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x2166CA800](v2, 0x80C40D6874129);
  }
  return a1;
}

void sub_21610EB04(void *a1)
{
  sub_21610EA90(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21610EB3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void ***)(a1 + 8);
  unint64_t v4 = v3[1];
  unint64_t v5 = (unint64_t)v3[2];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = ((char *)v4 - (unsigned char *)*v3) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v8 = v5 - (void)*v3;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      uint64_t v11 = (char *)sub_2160FFAA8((uint64_t)(v3 + 2), v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = &v11[8 * v7];
    uint64_t v13 = &v11[8 * v10];
    *(void *)unint64_t v12 = a2;
    unint64_t v6 = v12 + 8;
    uint64_t v15 = (char *)*v3;
    uint64_t v14 = (char *)v3[1];
    if (v14 != *v3)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)*v3;
    }
    *unint64_t v3 = v12;
    v3[1] = v6;
    v3[2] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *unint64_t v4 = a2;
    unint64_t v6 = v4 + 1;
  }
  v3[1] = v6;
}

uint64_t sub_21610EC18(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1] - *v1;
  if (((unint64_t)v3 >> 3))
  {
    sub_21610ED20(&__dst, (*(void *)(*(void *)v2 + 8) - **(void **)v2) * (int)(v3 >> 3));
    unint64_t v5 = *(const void *****)(a1 + 8);
    unint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (*v5 != v7)
    {
      uint64_t v8 = (char *)__dst;
      do
      {
        uint64_t v9 = **v6;
        unint64_t v10 = (*v6)[1];
        int64_t v11 = v10 - v9;
        if (v10 != v9) {
          memmove(v8, v9, v10 - v9);
        }
        v8 += v11;
        ++v6;
      }
      while (v6 != v7);
    }
    sub_2161252A0();
  }
  return 0;
}

void sub_21610ED04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21610ED20(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21610ED94(a1, a2);
    unint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_21610ED78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21610ED94(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_21610CB04();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t sub_21610EDD8(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 112);
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2) {
    free(v2);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  unint64_t v4 = *(void **)(a1 + 64);
  if (v4) {
    free(v4);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  unint64_t v5 = *(void **)(a1 + 16);
  if (v5) {
    free(v5);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_21610FA24((void **)(a1 + 8), 0);

  return nullsub_1(a1);
}

void sub_21610EE58(uint64_t a1)
{
  sub_21610EDD8(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21610EE90()
{
}

void sub_21610EF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21610FB24((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_21610EF60(uint64_t a1, int a2, int a3)
{
  size_t v6 = a3 * a2;
  sub_21610F91C(a1 + 16, v6);
  uint64_t v7 = a3 * (uint64_t)a2;
  *(void *)(a1 + 32) = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = 2;
  sub_21610FB74(a1 + 64, v6);
  *(void *)(a1 + 80) = *(void *)(a1 + 64);
  *(void *)(a1 + 88) = v7;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_DWORD *)(a1 + 104) = 2;
  int v8 = **(_DWORD **)(a1 + 8);

  sub_21610F250(a1 + 112, a2, v8, 0.0);
}

void sub_21610F004(uint64_t a1, int a2)
{
  sub_21610F0BC(*(int **)(a1 + 8), a2);
  if (*(_DWORD *)(a1 + 48) < a2)
  {
    int v4 = *(_DWORD *)(a1 + 52);
    sub_21610F91C(a1 + 16, v4 * a2);
    *(void *)(a1 + 32) = *(void *)(a1 + 16);
    *(void *)(a1 + 40) = v4 * (uint64_t)a2;
    *(_DWORD *)(a1 + 48) = a2;
    *(_DWORD *)(a1 + 52) = v4;
    *(_DWORD *)(a1 + 56) = 2;
    int v5 = *(_DWORD *)(a1 + 100);
    sub_21610FB74(a1 + 64, v5 * a2);
    *(void *)(a1 + 80) = *(void *)(a1 + 64);
    *(void *)(a1 + 88) = v5 * (uint64_t)a2;
    *(_DWORD *)(a1 + 96) = a2;
    *(_DWORD *)(a1 + 100) = v5;
    *(_DWORD *)(a1 + 104) = 2;
  }
  int v6 = **(_DWORD **)(a1 + 8);

  sub_21610F250(a1 + 112, a2, v6, 0.0);
}

void sub_21610F0BC(int *a1, int a2)
{
  a1[2] = a2;
  int v4 = *a1;
  sub_21610F91C((uint64_t)(a1 + 4), *a1 * a2);
  int v5 = (void *)*((void *)a1 + 2);
  int64_t v6 = *((void *)a1 + 3);
  *((void *)a1 + 4) = v5;
  *((void *)a1 + 5) = v4 * (uint64_t)a2;
  a1[12] = a2;
  a1[13] = v4;
  a1[14] = 2;
  if (v6 >= 1) {
    memset(v5, 128, v6);
  }
  int v7 = *a1;
  sub_21610F71C((uint64_t)(a1 + 16), *a1 * a2);
  int v8 = (void *)*((void *)a1 + 8);
  uint64_t v9 = *((void *)a1 + 9);
  *((void *)a1 + 10) = v8;
  *((void *)a1 + 11) = v7 * (uint64_t)a2;
  a1[24] = a2;
  a1[25] = v7;
  a1[26] = 2;
  if (v9 >= 1) {
    bzero(v8, 2 * v9);
  }
  int v10 = a1[1];
  sub_21610F91C((uint64_t)(a1 + 28), v10 * a2);
  *((void *)a1 + 16) = *((void *)a1 + 14);
  *((void *)a1 + 17) = v10 * (uint64_t)a2;
  a1[36] = a2;
  a1[37] = v10;
  a1[38] = 2;
  uint64_t v11 = *a1 + (uint64_t)a1[1];
  sub_21610F91C((uint64_t)(a1 + 40), (int)v11 * a2);
  *((void *)a1 + 22) = *((void *)a1 + 20);
  *((void *)a1 + 23) = v11 * a2;
  a1[48] = a2;
  a1[49] = v11;
  a1[50] = 2;
  uint64_t v12 = 4 * *a1;
  sub_21610F71C((uint64_t)(a1 + 52), v12 * a2);
  *((void *)a1 + 28) = *((void *)a1 + 26);
  *((void *)a1 + 29) = (int)v12 * (uint64_t)a2;
  a1[60] = a2;
  a1[61] = v12;
  a1[62] = 2;
  LODWORD(v12) = *a1;
  sub_21610F91C((uint64_t)(a1 + 64), *a1 * a2);
  *((void *)a1 + 34) = *((void *)a1 + 32);
  *((void *)a1 + 35) = (int)v12 * (uint64_t)a2;
  a1[72] = a2;
  a1[73] = v12;
  a1[74] = 2;
  LODWORD(v12) = *a1;
  sub_21610F71C((uint64_t)(a1 + 76), *a1 * a2);
  *((void *)a1 + 40) = *((void *)a1 + 38);
  *((void *)a1 + 41) = (int)v12 * (uint64_t)a2;
  a1[84] = a2;
  a1[85] = v12;
  a1[86] = 2;
}

void sub_21610F250(uint64_t a1, int a2, int a3, float a4)
{
  float v7 = a4;
  if (*(void *)(a1 + 8) < (unint64_t)(a3 * a2)) {
    sub_21610FC18((void *)a1, a3 * a2, &v7);
  }
  *(void *)(a1 + 16) = *(void *)a1;
  *(void *)(a1 + 24) = a3 * (uint64_t)a2;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = 2;
}

uint64_t sub_21610F2C4(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = v1[2];
    int v3 = *v1;
    BOOL v4 = !v2 || v3 == 0;
    if (!v4 && v1[1] != 0)
    {
      size_t v6 = v3;
      size_t v7 = 2 * v3;
      sub_21610ED20(&__dst, *((void *)v1 + 5) + v7 * v2);
      if ((int)v2 >= 1)
      {
        uint64_t v8 = 0;
        uint64_t v9 = (char *)__dst;
        do
        {
          memcpy(v9, (const void *)(*((void *)v1 + 4) + v8 * v1[13]), v6);
          int v10 = &v9[v6];
          memcpy(v10, (const void *)(*((void *)v1 + 10) + 2 * v8 * v1[25]), v7);
          uint64_t v9 = &v10[v7];
          ++v8;
        }
        while (v2 != v8);
      }
      sub_2161252A0();
    }
  }
  return 0;
}

void sub_21610F3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21610F3E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  int v4 = sub_216125484(v3);
  int v5 = (char *)sub_216125490(v3);
  unint64_t v6 = sub_21612549C(v3) / (unint64_t)(3 * v4);
  sub_21610ED20(v20, v4 * (int)v6);
  sub_21610FC8C(__p, v4 * (int)v6);
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v4;
    do
    {
      memmove((char *)v20[0] + v7 * (int)v6, v5, (int)v6);
      uint64_t v9 = &v5[(int)v6];
      memmove((char *)__p[0] + 2 * v7 * (int)v6, v9, 2 * (int)v6);
      int v5 = &v9[2 * (int)v6];
      ++v7;
      --v8;
    }
    while (v8);
  }
  uint64_t v14 = v20[0];
  uint64_t v15 = (int)v6 * (uint64_t)v4;
  int v16 = v4;
  int v17 = v6;
  int v18 = 2;
  v10[0] = __p[0];
  v10[1] = v15;
  int v11 = v4;
  int v12 = v6;
  int v13 = 2;
  sub_21610F5D0(*(void *)(a1 + 8), (uint64_t)&v14, (uint64_t)v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void sub_21610F568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_21610F5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 16);
  sub_21610F7C0(a1 + 16, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), 128);
  size_t v6 = *(void *)(a2 + 8);
  if (v6) {
    memmove(*(void **)(a1 + 32), *(const void **)a2, v6);
  }
  sub_21610F834(a1 + 64, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), 0);
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7) {
    memmove(*(void **)(a1 + 80), *(const void **)a3, 2 * v7);
  }
  sub_21610F7C0(a1 + 112, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 4), 0);
  sub_21610F7C0(a1 + 160, *(_DWORD *)(a1 + 8), *(_DWORD *)a1 + *(_DWORD *)(a1 + 4), 0);
  sub_21610F834(a1 + 208, *(_DWORD *)(a1 + 8), 4 * *(_DWORD *)a1, 0);
  sub_21610F7C0(a1 + 256, *(_DWORD *)(a1 + 8), *(_DWORD *)a1, 0);
  int v8 = *(_DWORD *)(a1 + 8);
  int v9 = *(_DWORD *)a1;

  sub_21610F834(a1 + 304, v8, v9, 0);
}

uint64_t sub_21610F6CC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_21610F6D4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 80) + 4 * *(unsigned int *)(a1 + 100) * a2;
}

uint64_t sub_21610F6EC(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_21610F6F4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21610F6FC(uint64_t a1)
{
  return a1 + 128;
}

void sub_21610F704(uint64_t a1, int a2)
{
}

void sub_21610F71C(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < a2)
  {
    if (2 * a2)
    {
      memptr = 0;
      if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * a2, 0xC6376F0AuLL)) {
        int v5 = 0;
      }
      else {
        int v5 = memptr;
      }
    }
    else
    {
      int v5 = 0;
    }
    if (*(void *)a1)
    {
      memcpy(v5, *(const void **)a1, 2 * *(void *)(a1 + 8));
      free(*(void **)a1);
    }
    *(void *)a1 = v5;
    goto LABEL_12;
  }
  if (v4 > a2) {
LABEL_12:
  }
    *(void *)(a1 + 8) = a2;
}

void sub_21610F7C0(uint64_t a1, int a2, int a3, char a4)
{
  char v7 = a4;
  if (*(void *)(a1 + 8) < (unint64_t)(a3 * a2)) {
    sub_21610F8A8((void *)a1, a3 * a2, &v7);
  }
  *(void *)(a1 + 16) = *(void *)a1;
  *(void *)(a1 + 24) = a3 * (uint64_t)a2;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = 2;
}

void sub_21610F834(uint64_t a1, int a2, int a3, __int16 a4)
{
  __int16 v7 = a4;
  if (*(void *)(a1 + 8) < (unint64_t)(a3 * a2)) {
    sub_21610F9B0((void *)a1, a3 * a2, &v7);
  }
  *(void *)(a1 + 16) = *(void *)a1;
  *(void *)(a1 + 24) = a3 * (uint64_t)a2;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = 2;
}

void sub_21610F8A8(void *a1, size_t a2, unsigned char *a3)
{
  size_t v6 = a1[1];
  sub_21610F91C((uint64_t)a1, a2);
  if (v6 < a2)
  {
    uint64_t v7 = a1[1];
    int v8 = (unsigned char *)(*a1 + v6);
    if (*a1 + v7 - (uint64_t)v8 >= 1)
    {
      unint64_t v9 = v7 - v6 + 1;
      do
      {
        *v8++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
}

void sub_21610F91C(uint64_t a1, size_t size)
{
  size_t v4 = *(void *)(a1 + 8);
  if (v4 >= size)
  {
    if (v4 <= size) {
      return;
    }
  }
  else
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, size, 0xC6376F0AuLL)) {
      int v5 = 0;
    }
    else {
      int v5 = memptr;
    }
    if (*(void *)a1)
    {
      memcpy(v5, *(const void **)a1, *(void *)(a1 + 8));
      free(*(void **)a1);
    }
    *(void *)a1 = v5;
  }
  *(void *)(a1 + 8) = size;
}

void sub_21610F9B0(void *a1, unint64_t a2, _WORD *a3)
{
  unint64_t v6 = a1[1];
  sub_21610F71C((uint64_t)a1, a2);
  if (v6 < a2)
  {
    uint64_t v7 = (_WORD *)(*a1 + 2 * v6);
    uint64_t v8 = *a1 + 2 * a1[1] - (void)v7;
    if (v8 >= 1)
    {
      unint64_t v9 = ((unint64_t)v8 >> 1) + 1;
      do
      {
        *v7++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
}

void *sub_21610FA24(void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21610FA74(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void *sub_21610FA74(void *a1)
{
  uint64_t v2 = a1 + 38;
  uint64_t v3 = (void *)a1[38];
  if (v3) {
    free(v3);
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  size_t v4 = (void *)a1[32];
  if (v4) {
    free(v4);
  }
  a1[32] = 0;
  a1[33] = 0;
  int v5 = (void *)a1[26];
  if (v5) {
    free(v5);
  }
  a1[26] = 0;
  a1[27] = 0;
  unint64_t v6 = (void *)a1[20];
  if (v6) {
    free(v6);
  }
  a1[20] = 0;
  a1[21] = 0;
  uint64_t v7 = (void *)a1[14];
  if (v7) {
    free(v7);
  }
  a1[14] = 0;
  a1[15] = 0;
  uint64_t v8 = (void *)a1[8];
  if (v8) {
    free(v8);
  }
  a1[8] = 0;
  a1[9] = 0;
  unint64_t v9 = (void *)a1[2];
  if (v9) {
    free(v9);
  }
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

uint64_t sub_21610FB24(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21610EDD8(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21610FB74(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < a2)
  {
    if (4 * a2)
    {
      memptr = 0;
      if (malloc_type_posix_memalign(&memptr, 0x20uLL, 4 * a2, 0xC6376F0AuLL)) {
        int v5 = 0;
      }
      else {
        int v5 = memptr;
      }
    }
    else
    {
      int v5 = 0;
    }
    if (*(void *)a1)
    {
      memcpy(v5, *(const void **)a1, 4 * *(void *)(a1 + 8));
      free(*(void **)a1);
    }
    *(void *)a1 = v5;
    goto LABEL_12;
  }
  if (v4 > a2) {
LABEL_12:
  }
    *(void *)(a1 + 8) = a2;
}

float sub_21610FC18(void *a1, unint64_t a2, float *a3)
{
  unint64_t v6 = a1[1];
  sub_21610FB74((uint64_t)a1, a2);
  if (v6 < a2)
  {
    uint64_t v8 = (_DWORD *)(*a1 + 4 * v6);
    uint64_t v9 = *a1 + 4 * a1[1] - (void)v8;
    if (v9 >= 1)
    {
      unint64_t v10 = ((unint64_t)v9 >> 2) + 1;
      do
      {
        float result = *a3;
        *v8++ = *(_DWORD *)a3;
        --v10;
      }
      while (v10 > 1);
    }
  }
  return result;
}

void *sub_21610FC8C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21610FD04(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_21610FCE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21610FD04(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_21610CB04();
  }
  float result = (char *)sub_21610FD44((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *sub_21610FD44(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_2160FFA74();
  }
  return operator new(2 * a2);
}

uint64_t sub_21610FD78()
{
  return cblas_sscal_NEWLAPACK();
}

uint64_t sub_21610FD98()
{
  return cblas_saxpy_NEWLAPACK();
}

uint64_t sub_21610FDC4(uint64_t result, int a2, uint64_t a3, float *a4)
{
  if ((int)result >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = a2;
      unint64_t v6 = a4;
      if (a2 >= 1)
      {
        do
        {
          *unint64_t v6 = *(float *)(a3 + 4 * v4) + *v6;
          ++v6;
          --v5;
        }
        while (v5);
      }
      ++v4;
      a4 += a2;
    }
    while (v4 != result);
  }
  return result;
}

float sub_21610FE18(int a1, float *a2, float *a3)
{
  if (a1 >= 1)
  {
    uint64_t v3 = a1;
    do
    {
      float v4 = *a2++;
      float result = v4 * *a3;
      *a3++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_21610FE40()
{
  return cblas_sdot_NEWLAPACK();
}

uint64_t sub_21610FE68()
{
  return cblas_scopy_NEWLAPACK();
}

uint64_t sub_21610FE90()
{
  return cblas_scopy_NEWLAPACK();
}

void sub_21610FEC4(int a1, float *a2)
{
  int v2 = a1;
  vvlog10f(a2, a2, &v2);
}

void sub_21610FEF4(int a1, float *a2)
{
  int v2 = a1;
  vvtanhf(a2, a2, &v2);
}

void sub_21610FF24(int a1, float *a2, float *a3)
{
  if (a1 >= 1)
  {
    uint64_t v5 = a1;
    do
    {
      float v6 = *a3;
      float v7 = *a2++;
      *a3++ = v6 * tanhf(v7);
      --v5;
    }
    while (v5);
  }
}

uint64_t sub_21610FF84(int a1, float *a2)
{
  int v5 = a1;
  cblas_sscal_NEWLAPACK();
  vvtanhf(a2, a2, &v5);
  uint64_t result = cblas_sscal_NEWLAPACK();
  uint64_t v4 = v5;
  if (v5 >= 1)
  {
    do
    {
      *a2 = *a2 + 0.5;
      ++a2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_216110008()
{
  return cblas_sgemm_NEWLAPACK();
}

uint64_t sub_216110084()
{
  return cblas_sgemm_NEWLAPACK();
}

uint64_t sub_216110100(uint64_t result, int a2, float *a3)
{
  int v17 = a2;
  if ((int)result >= 1)
  {
    int v4 = result;
    uint64_t v5 = 0;
    float v6 = a3;
    do
    {
      if (a2 >= 1)
      {
        float v7 = -3.4028e38;
        uint64_t v8 = a2;
        uint64_t v9 = v6;
        do
        {
          float v10 = *v9++;
          float v11 = v10;
          if (v10 >= v7) {
            float v7 = v11;
          }
          --v8;
        }
        while (v8);
        do
        {
          *(float *)((char *)v6 + v8) = *(float *)((char *)v6 + v8) - v7;
          v8 += 4;
        }
        while (4 * a2 != v8);
      }
      ++v5;
      v6 += a2;
    }
    while (v5 != result);
    for (int i = 0; i != v4; ++i)
    {
      vvexpf(&a3[v17 * i], &a3[v17 * i], &v17);
      if (v17 >= 1)
      {
        int v13 = &a3[v17 * i];
        float v14 = 0.0;
        uint64_t v15 = v17;
        do
        {
          float v16 = *v13++;
          float v14 = v14 + v16;
          --v15;
        }
        while (v15);
      }
      uint64_t result = cblas_sscal_NEWLAPACK();
    }
  }
  return result;
}

uint64_t sub_216110230(uint64_t result, int a2, float *a3)
{
  if ((int)result >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = result;
    uint64_t v6 = 4 * a2;
    uint64_t v8 = a2;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v9 = v8;
        float v10 = a3;
        float v11 = 0.000001;
        do
        {
          float v12 = *v10++;
          float v11 = v11 + v12;
          --v9;
        }
        while (v9);
      }
      uint64_t result = cblas_sscal_NEWLAPACK();
      ++v4;
      a3 = (float *)((char *)a3 + v6);
    }
    while (v4 != v5);
  }
  return result;
}

void *sub_2161102F4(void *result, int a2, char *__src, char *__dst)
{
  if (result == 1 || a2 == 1) {
    return memmove(__dst, __src, 4 * a2 * (int)result);
  }
  if ((int)result >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = a2;
      uint64_t v6 = (int *)__src;
      float v7 = __dst;
      if (a2 >= 1)
      {
        do
        {
          int v8 = *v6++;
          _DWORD *v7 = v8;
          v7 += result;
          --v5;
        }
        while (v5);
      }
      ++v4;
      __dst += 4;
      __src += 4 * a2;
    }
    while (v4 != result);
  }
  return result;
}

uint64_t sub_216110378()
{
  return 0xFF00000000;
}

double sub_216110380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a1 + 8) * *(double *)(a2 + 8) / *(double *)(a3 + 8);
}

unint64_t sub_216110398(unsigned int *a1, uint64_t a2)
{
  long double v3 = *(double *)(a2 + 8) * 4096.0;
  *(void *)__e = 0;
  sub_2161251C4(&__e[1], __e, v3);
  return *a1 | ((unint64_t)__e[1] << 32);
}

uint64_t sub_2161103F0(uint64_t result, float *a2, float a3)
{
  if ((int)result >= 1)
  {
    uint64_t v3 = result;
    do
    {
      *a2 = *a2 * a3;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

float sub_216110414(int a1, float *a2, float *a3)
{
  if (a1 >= 1)
  {
    uint64_t v3 = a1;
    do
    {
      float v4 = *a2++;
      float result = v4 + *a3;
      *a3++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

double sub_21611043C(int a1, float *a2, float *a3)
{
  if (a1 < 1) {
    return 0.0;
  }
  uint64_t v3 = a1;
  double result = 0.0;
  do
  {
    float v5 = *a2++;
    float v6 = v5;
    float v7 = *a3++;
    *(float *)&double result = *(float *)&result + (float)(v6 * v7);
    --v3;
  }
  while (v3);
  return result;
}

float sub_21611046C(int a1, float *a2, float *a3)
{
  if (a1 >= 1)
  {
    uint64_t v3 = a1;
    do
    {
      float v4 = *a2++;
      float result = v4;
      *a3++ = v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float sub_21611048C(int a1, int a2, int a3, float *a4, uint64_t a5)
{
  if (a1 >= 1)
  {
    uint64_t v5 = a1;
    float v6 = (float *)(a5 + 4 * a3);
    do
    {
      float v7 = *a4++;
      float result = v7;
      *float v6 = v7;
      v6 += a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_2161104B8(int a1, float *a2)
{
  if (a1 >= 1)
  {
    uint64_t v3 = a1;
    do
    {
      *a2 = log10f(*a2);
      ++a2;
      --v3;
    }
    while (v3);
  }
}

void sub_2161104FC(int a1, float *a2)
{
  if (a1 >= 1)
  {
    uint64_t v3 = a1;
    do
    {
      *a2 = tanhf(*a2);
      ++a2;
      --v3;
    }
    while (v3);
  }
}

void sub_216110540(int a1, float *a2)
{
  if (a1 >= 1)
  {
    uint64_t v3 = a1;
    do
    {
      *a2 = 1.0 / (float)(expf(-*a2) + 1.0);
      ++a2;
      --v3;
    }
    while (v3);
  }
}

unint64_t sub_21611059C(unint64_t result, int a2, int a3, uint64_t a4, float *a5, float *a6, int a7, int a8)
{
  if ((a7 ^ 1) & 1) != 0 || (a8)
  {
    if ((a7 ^ 1 | a8 ^ 1))
    {
      if ((a8 ^ 1 | a7))
      {
        if ((int)result >= 1)
        {
          uint64_t v16 = 0;
          uint64_t v17 = result;
          uint64_t v18 = 4 * a3;
          do
          {
            if (a2 >= 1)
            {
              uint64_t v19 = 0;
              unsigned int v20 = a5;
              do
              {
                if (a3 >= 1)
                {
                  float result = a3;
                  unint64_t v21 = v20;
                  unint64_t v22 = a6;
                  do
                  {
                    float v23 = *v21++;
                    float *v22 = *v22 + (float)(*(float *)(a4 + 4 * (v19 + v16 * a2)) * v23);
                    ++v22;
                    --result;
                  }
                  while (result);
                }
                ++v19;
                unsigned int v20 = (float *)((char *)v20 + v18);
              }
              while (v19 != a2);
            }
            ++v16;
            a6 = (float *)((char *)a6 + v18);
          }
          while (v16 != v17);
        }
      }
      else if ((int)result >= 1)
      {
        uint64_t v30 = 0;
        uint64_t v31 = result;
        do
        {
          if (a2 >= 1)
          {
            uint64_t v32 = 0;
            uint64_t v33 = a5;
            do
            {
              if (a3 >= 1)
              {
                float result = v32 + v30 * a2;
                uint64_t v34 = a3;
                unint64_t v35 = v33;
                uint64_t v36 = a6;
                do
                {
                  *uint64_t v36 = *v36 + (float)(*(float *)(a4 + 4 * result) * *v35);
                  ++v36;
                  v35 += a2;
                  --v34;
                }
                while (v34);
              }
              ++v32;
              ++v33;
            }
            while (v32 != a2);
          }
          ++v30;
          a6 += a3;
        }
        while (v30 != v31);
      }
    }
    else if ((int)result >= 1)
    {
      uint64_t v24 = 0;
      uint64_t v25 = result;
      do
      {
        if (a2 >= 1)
        {
          uint64_t v26 = 0;
          uint64_t v27 = a5;
          do
          {
            if (a3 >= 1)
            {
              uint64_t v28 = a3;
              float result = (unint64_t)v27;
              unint64_t v29 = a6;
              do
              {
                *unint64_t v29 = *v29 + (float)(*(float *)(a4 + 4 * (v24 + v26 * v25)) * *(float *)result);
                ++v29;
                result += 4 * a2;
                --v28;
              }
              while (v28);
            }
            ++v26;
            ++v27;
          }
          while (v26 != a2);
        }
        ++v24;
        a6 += a3;
      }
      while (v24 != v25);
    }
  }
  else if ((int)result >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = result;
    uint64_t v10 = 4 * a3;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v11 = 0;
        float v12 = a5;
        do
        {
          if (a3 >= 1)
          {
            uint64_t v13 = a3;
            float v14 = v12;
            float result = (unint64_t)a6;
            do
            {
              float v15 = *v14++;
              *(float *)float result = *(float *)result + (float)(*(float *)(a4 + 4 * (v8 + v11 * v9)) * v15);
              result += 4;
              --v13;
            }
            while (v13);
          }
          ++v11;
          float v12 = (float *)((char *)v12 + v10);
        }
        while (v11 != a2);
      }
      ++v8;
      a6 = (float *)((char *)a6 + v10);
    }
    while (v8 != v9);
  }
  return result;
}

unint64_t sub_216110800(unint64_t a1, int a2, int a3, uint64_t a4, float *a5, void *a6, int a7, int a8)
{
  if (a3 * (int)a1 >= 1) {
    bzero(a6, 4 * (a3 * a1));
  }

  return sub_21611059C(a1, a2, a3, a4, a5, (float *)a6, a7, a8);
}

void sub_21611089C(int a1, int a2, float *a3)
{
  if (a1 >= 1)
  {
    uint64_t v3 = a3;
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    float v7 = a3;
    uint64_t v8 = a2;
    do
    {
      if (a2 >= 1)
      {
        float v9 = -3.4028e38;
        uint64_t v10 = a2;
        uint64_t v11 = v7;
        do
        {
          float v12 = *v11++;
          float v13 = v12;
          if (v12 >= v9) {
            float v9 = v13;
          }
          --v10;
        }
        while (v10);
        do
        {
          *(float *)((char *)v7 + v10) = *(float *)((char *)v7 + v10) - v9;
          v10 += 4;
        }
        while (4 * a2 != v10);
      }
      ++v5;
      v7 += a2;
    }
    while (v5 != a1);
    uint64_t v14 = 0;
    uint64_t v15 = 4 * a2;
    uint64_t v16 = 4 * a2;
    do
    {
      if (a2 >= 1)
      {
        float v17 = 0.0;
        uint64_t v18 = v8;
        uint64_t v19 = v3;
        do
        {
          float v20 = expf(*v19);
          *v19++ = v20;
          float v17 = v17 + v20;
          --v18;
        }
        while (v18);
        unint64_t v21 = 0;
        do
        {
          v3[v21 / 4] = v3[v21 / 4] / v17;
          v21 += 4;
        }
        while (v16 != v21);
      }
      ++v14;
      uint64_t v3 = (float *)((char *)v3 + v15);
    }
    while (v14 != v6);
  }
}

uint64_t sub_2161109C8(uint64_t result, int a2, float *a3)
{
  if ((int)result >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v4 = a2;
        uint64_t v5 = a3;
        float v6 = 0.000001;
        do
        {
          float v7 = *v5++;
          float v6 = v6 + v7;
          --v4;
        }
        while (v4);
        do
        {
          *(float *)((char *)a3 + v4) = *(float *)((char *)a3 + v4) / v6;
          v4 += 4;
        }
        while (4 * a2 != v4);
      }
      ++v3;
      a3 += a2;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_216110A3C(uint64_t result, int a2, int *a3, _DWORD *a4)
{
  if ((int)result >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = a2;
      float v6 = a3;
      float v7 = a4;
      if (a2 >= 1)
      {
        do
        {
          int v8 = *v6++;
          _DWORD *v7 = v8;
          v7 += result;
          --v5;
        }
        while (v5);
      }
      ++v4;
      ++a4;
      a3 += a2;
    }
    while (v4 != result);
  }
  return result;
}

uint64_t sub_216110A98()
{
  return cblas_sscal_NEWLAPACK();
}

uint64_t sub_216110AB8()
{
  return cblas_saxpy_NEWLAPACK();
}

uint64_t sub_216110AE4(uint64_t result, int a2, uint64_t a3, float32x4_t *a4)
{
  if ((int)result >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      if (a2 < 4)
      {
        unsigned int v9 = 0;
      }
      else
      {
        uint64_t v5 = (const float *)(a3 + 4 * v4);
        float32x4_t v6 = vld1q_dup_f32(v5);
        uint64_t v7 = (a2 / 4);
        int v8 = a4;
        do
        {
          *int v8 = vaddq_f32(v6, *v8);
          ++v8;
          --v7;
        }
        while (v7);
        unsigned int v9 = a2 / 4;
      }
      if (a2 > (int)(4 * v9))
      {
        uint64_t v10 = 4 * v9;
        do
        {
          a4->f32[v10] = *(float *)(a3 + 4 * v4) + a4->f32[v10];
          ++v10;
        }
        while (a2 != v10);
      }
      ++v4;
      a4 = (float32x4_t *)((char *)a4 + 4 * a2);
    }
    while (v4 != result);
  }
  return result;
}

float32_t sub_216110B80(int a1, float32x4_t *a2, float32x4_t *a3)
{
  int v3 = a1 + 3;
  if (a1 >= 0) {
    int v3 = a1;
  }
  if (a1 < 4)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    uint64_t v4 = (v3 >> 2);
    uint64_t v5 = v4;
    float32x4_t v6 = a2;
    uint64_t v7 = a3;
    do
    {
      float32x4_t v8 = *v6++;
      float32x4_t v9 = vmulq_f32(v8, *v7);
      *v7++ = v9;
      --v5;
    }
    while (v5);
  }
  if (a1 > 4 * (int)v4)
  {
    f32 = a3[v4].f32;
    uint64_t v11 = a2[v4].f32;
    uint64_t v12 = a1 - 4 * v4;
    do
    {
      float v13 = *v11++;
      v9.f32[0] = v13 * *f32;
      *f32++ = v9.f32[0];
      --v12;
    }
    while (v12);
  }
  return v9.f32[0];
}

uint64_t sub_216110BF8()
{
  return cblas_sdot_NEWLAPACK();
}

uint64_t sub_216110C20()
{
  return cblas_scopy_NEWLAPACK();
}

uint64_t sub_216110C48()
{
  return cblas_scopy_NEWLAPACK();
}

void sub_216110C7C(int a1, float *a2)
{
  int v2 = a1;
  vvlog10f(a2, a2, &v2);
}

void sub_216110CAC(int a1, float *a2)
{
  int v2 = a1;
  vvtanhf(a2, a2, &v2);
}

void sub_216110CDC(int a1, float32x4_t *a2, float32x4_t *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_26797CE60, memory_order_acquire) & 1) == 0)
  {
    int v38 = a1;
    unsigned int v39 = a3;
    uint64_t v40 = a2;
    int v41 = __cxa_guard_acquire(qword_26797CE60);
    a2 = v40;
    a3 = v39;
    int v42 = v41;
    a1 = v38;
    if (v42)
    {
      __asm { FMOV            V0.4S, #1.0 }
      xmmword_26797CE50 = _Q0;
      __cxa_guard_release(qword_26797CE60);
      a1 = v38;
      a2 = v40;
      a3 = v39;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_26797CE80, memory_order_acquire) & 1) == 0)
  {
    int v44 = a1;
    uint64_t v45 = a3;
    unsigned int v46 = a2;
    int v47 = __cxa_guard_acquire(qword_26797CE80);
    a2 = v46;
    a3 = v45;
    int v48 = v47;
    a1 = v44;
    if (v48)
    {
      *(void *)&long long v49 = 0x4000000040000000;
      *((void *)&v49 + 1) = 0x4000000040000000;
      xmmword_26797CE70 = v49;
      __cxa_guard_release(qword_26797CE80);
      a1 = v44;
      a2 = v46;
      a3 = v45;
    }
  }
  int v3 = a1 + 3;
  if (a1 >= 0) {
    int v3 = a1;
  }
  if (a1 < 4)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    uint64_t v4 = (v3 >> 2);
    float32x4_t v5 = (float32x4_t)xmmword_26797CE70;
    float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x42B0C0A5u);
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0xC2B0C0A5);
    float32x4_t v8 = (float32x4_t)xmmword_26797CE50;
    float32x4_t v9 = (float32x4_t)vdupq_n_s32(0x3FB8AA3Bu);
    v10.i64[0] = 0x3F0000003F000000;
    v10.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V6.4S, #1.0 }
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xBF318000);
    float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x395E8083u);
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x39506967u);
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3AB743CEu);
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3C088908u);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3D2AA9C1u);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3E2AAAAAu);
    uint64_t v23 = v4;
    uint64_t v24 = a2;
    uint64_t v25 = a3;
    do
    {
      float32x4_t v26 = *v24++;
      float32x4_t v27 = vmaxq_f32(vminq_f32(vmulq_f32(v5, vnegq_f32(v26)), v6), v7);
      v28.i64[0] = 0x3F0000003F000000;
      v28.i64[1] = 0x3F0000003F000000;
      float32x4_t v29 = vmlaq_f32(v28, v9, v27);
      float32x4_t v30 = vcvtq_f32_s32(vcvtq_s32_f32(v29));
      float32x4_t v31 = vsubq_f32(v30, (float32x4_t)vandq_s8((int8x16_t)_Q6, (int8x16_t)vcgtq_f32(v30, v29)));
      float32x4_t v32 = vaddq_f32(vmulq_f32(v31, v17), vaddq_f32(v27, vmulq_f32(v31, v16)));
      *uint64_t v25 = vmulq_f32(*v25, vsubq_f32(vdivq_f32(v5, vaddq_f32(v8, vmulq_f32(vaddq_f32(vaddq_f32(v32, vmulq_f32(vmulq_f32(v32, v32), vaddq_f32(vmulq_f32(v32, vaddq_f32(vmulq_f32(v32, vaddq_f32(
                                       vmulq_f32(v32, vaddq_f32(vmulq_f32(v32, vaddq_f32(vmulq_f32(v32, v18), v19)), v20)), v21)), v22)), v10))), _Q6), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v31), 0x17uLL), (int32x4_t)_Q6)))), v8));
      ++v25;
      --v23;
    }
    while (v23);
  }
  if (a1 > 4 * (int)v4)
  {
    f32 = a2[v4].f32;
    uint64_t v34 = a3[v4].f32;
    uint64_t v35 = a1 - 4 * v4;
    do
    {
      float v36 = *v34;
      float v37 = *f32++;
      *v34++ = v36 * tanhf(v37);
      --v35;
    }
    while (v35);
  }
}

void sub_216110F70(int a1, float32x4_t *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CEA0, memory_order_acquire) & 1) == 0)
  {
    int v31 = a1;
    float32x4_t v32 = a2;
    int v33 = __cxa_guard_acquire(&qword_26797CEA0);
    a2 = v32;
    int v34 = v33;
    a1 = v31;
    if (v34)
    {
      __asm { FMOV            V0.4S, #1.0 }
      xmmword_26797CE90 = _Q0;
      __cxa_guard_release(&qword_26797CEA0);
      a1 = v31;
      a2 = v32;
    }
  }
  int v2 = a1 + 3;
  if (a1 >= 0) {
    int v2 = a1;
  }
  if (a1 < 4)
  {
    LODWORD(v3) = 0;
  }
  else
  {
    uint64_t v3 = (v2 >> 2);
    float32x4_t v4 = (float32x4_t)xmmword_26797CE90;
    float32x4_t v5 = (float32x4_t)vdupq_n_s32(0x42B0C0A5u);
    float32x4_t v6 = (float32x4_t)vdupq_n_s32(0xC2B0C0A5);
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x3FB8AA3Bu);
    v8.i64[0] = 0x3F0000003F000000;
    v8.i64[1] = 0x3F0000003F000000;
    float32x4_t v9 = (float32x4_t)vdupq_n_s32(0xBF318000);
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x395E8083u);
    float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x39506967u);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3AB743CEu);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x3C088908u);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3D2AA9C1u);
    __asm { FMOV            V19.4S, #1.0 }
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3E2AAAAAu);
    uint64_t v21 = v3;
    float32x4_t v22 = a2;
    do
    {
      float32x4_t v23 = vmaxq_f32(vminq_f32(vnegq_f32(*v22), v5), v6);
      v24.i64[0] = 0x3F0000003F000000;
      v24.i64[1] = 0x3F0000003F000000;
      float32x4_t v25 = vmlaq_f32(v24, v7, v23);
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v25));
      float32x4_t v27 = vsubq_f32(v26, (float32x4_t)vandq_s8((int8x16_t)_Q19, (int8x16_t)vcgtq_f32(v26, v25)));
      float32x4_t v28 = vaddq_f32(vmulq_f32(v27, v10), vaddq_f32(v23, vmulq_f32(v27, v9)));
      *v22++ = vdivq_f32(v4, vaddq_f32(v4, vmulq_f32(vaddq_f32(vaddq_f32(v28, vmulq_f32(vmulq_f32(v28, v28), vaddq_f32(vmulq_f32(v28, vaddq_f32(vmulq_f32(v28, vaddq_f32(vmulq_f32(v28, vaddq_f32(vmulq_f32(v28, vaddq_f32(vmulq_f32(v28, v11), v12)), v13)), v14)), v20)),
                             v8))),
                       _Q19),
                     (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v27), 0x17uLL), (int32x4_t)_Q19))));
      --v21;
    }
    while (v21);
  }
  if (a1 > 4 * (int)v3)
  {
    f32 = a2[v3].f32;
    uint64_t v30 = a1 - 4 * v3;
    do
    {
      float *f32 = 1.0 / (float)(expf(-*f32) + 1.0);
      ++f32;
      --v30;
    }
    while (v30);
  }
}

uint64_t sub_216111170()
{
  return cblas_sgemm_NEWLAPACK();
}

uint64_t sub_2161111EC()
{
  return cblas_sgemm_NEWLAPACK();
}

uint64_t sub_216111268(uint64_t result, int a2, float32x4_t *a3)
{
  if ((int)result >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (a2 / 4);
    uint64_t v59 = 4 * a2;
    float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x42B0C0A5u);
    float32x4_t v7 = (float32x4_t)vdupq_n_s32(0xC2B0C0A5);
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x3FB8AA3Bu);
    v9.i64[0] = 0x3F0000003F000000;
    v9.i64[1] = 0x3F0000003F000000;
    uint64_t v10 = result;
    __asm { FMOV            V18.4S, #1.0 }
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xBF318000);
    uint64_t v17 = a2;
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x395E8083u);
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x39506967u);
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x3AB743CEu);
    float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3C088908u);
    float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3D2AA9C1u);
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3E2AAAAAu);
    float32x4_t v57 = v7;
    float32x4_t v58 = v6;
    float32x4_t v55 = _Q18;
    float32x4_t v56 = v8;
    float32x4_t v53 = v18;
    float32x4_t v54 = v16;
    float32x4_t v51 = v20;
    float32x4_t v52 = v19;
    float32x4_t v49 = v22;
    float32x4_t v50 = v21;
    float32x4_t v48 = v23;
    do
    {
      if (a2 < 4)
      {
        int v29 = 0;
        v25.i64[0] = 0x80000000800000;
        v25.i64[1] = 0x80000000800000;
      }
      else
      {
        v25.i64[0] = 0x80000000800000;
        v25.i64[1] = 0x80000000800000;
        uint64_t v26 = v5;
        float32x4_t v27 = a3;
        do
        {
          float32x4_t v28 = *v27++;
          float32x4_t v25 = vmaxq_f32(v28, v25);
          --v26;
        }
        while (v26);
        int v29 = v5;
      }
      uint64_t v30 = 0;
      v61[0] = v25;
      float v31 = -3.4028e38;
      do
      {
        if (*(float *)((char *)v61 + v30) >= v31) {
          float v31 = *(float *)((char *)v61 + v30);
        }
        v30 += 4;
      }
      while (v30 != 16);
      LODWORD(v32) = 4 * v29;
      if ((int)v32 < a2)
      {
        uint64_t v32 = (int)v32;
        do
        {
          if (a3->f32[v32] >= v31) {
            float v31 = a3->f32[v32];
          }
          ++v32;
        }
        while (a2 != v32);
      }
      if (a2 < 4)
      {
        unsigned int v43 = 0;
        float32x4_t v35 = 0uLL;
      }
      else
      {
        uint64_t v33 = 0;
        v25.f32[0] = -v31;
        float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
        float32x4_t v35 = 0uLL;
        do
        {
          float32x4_t v36 = vmaxq_f32(vminq_f32(vaddq_f32(v34, a3[v33]), v6), v7);
          v37.i64[0] = 0x3F0000003F000000;
          v37.i64[1] = 0x3F0000003F000000;
          float32x4_t v38 = vmlaq_f32(v37, v8, v36);
          float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
          float32x4_t v40 = vsubq_f32(v39, (float32x4_t)vandq_s8((int8x16_t)_Q18, (int8x16_t)vcgtq_f32(v39, v38)));
          float32x4_t v41 = vaddq_f32(vmulq_f32(v40, v18), vaddq_f32(v36, vmulq_f32(v40, v16)));
          float32x4_t v42 = vmulq_f32(vaddq_f32(vaddq_f32(v41, vmulq_f32(vmulq_f32(v41, v41), vaddq_f32(vmulq_f32(v41, vaddq_f32(vmulq_f32(v41, vaddq_f32(vmulq_f32(v41, vaddq_f32(vmulq_f32(v41, vaddq_f32(vmulq_f32(v41, v19), v20)), v21)), v22)), v23)), v9))), _Q18), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v40), 0x17uLL), (int32x4_t)_Q18));
          a3[v33] = v42;
          float32x4_t v35 = vaddq_f32(v35, v42);
          ++v33;
        }
        while (v5 != v33);
        unsigned int v43 = v5;
      }
      uint64_t v44 = 0;
      float32x4_t v60 = v35;
      float v45 = 0.0;
      do
        float v45 = v45 + v60.f32[v44++];
      while (v44 != 4);
      if (a2 > (int)(4 * v43))
      {
        uint64_t v46 = 4 * v43;
        do
        {
          float v47 = expf(a3->f32[v46] - v31);
          a3->f32[v46] = v47;
          float v45 = v45 + v47;
          ++v46;
        }
        while (v17 != v46);
      }
      float result = cblas_sscal_NEWLAPACK();
      ++v4;
      a3 = (float32x4_t *)((char *)a3 + v59);
      float32x4_t v7 = v57;
      float32x4_t v6 = v58;
      _Q18 = v55;
      float32x4_t v8 = v56;
      v9.i64[0] = 0x3F0000003F000000;
      v9.i64[1] = 0x3F0000003F000000;
      float32x4_t v18 = v53;
      float32x4_t v16 = v54;
      float32x4_t v20 = v51;
      float32x4_t v19 = v52;
      float32x4_t v22 = v49;
      float32x4_t v21 = v50;
      float32x4_t v23 = v48;
    }
    while (v4 != v10);
  }
  return result;
}

uint64_t sub_21611157C(uint64_t result, int a2, float *a3)
{
  if ((int)result >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = result;
    uint64_t v6 = 4 * a2;
    uint64_t v8 = a2;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v9 = v8;
        uint64_t v10 = a3;
        float v11 = 0.000001;
        do
        {
          float v12 = *v10++;
          float v11 = v11 + v12;
          --v9;
        }
        while (v9);
      }
      float result = cblas_sscal_NEWLAPACK();
      ++v4;
      a3 = (float *)((char *)a3 + v6);
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_216111640(unsigned int a1, float *a2)
{
  int v2 = a2;
  if (a1 >= 2)
  {
    uint64_t v3 = a2 + 1;
    float v4 = *a2;
    uint64_t v5 = 4 * (int)a1 - 4;
    int v2 = a2;
    uint64_t v6 = a2 + 1;
    do
    {
      float v7 = *v6++;
      float v8 = v7;
      if (v4 < v7)
      {
        float v4 = v8;
        int v2 = v3;
      }
      uint64_t v3 = v6;
      v5 -= 4;
    }
    while (v5);
  }
  return v2 - a2;
}

uint64_t sub_216111694(int a1)
{
  switch(a1)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    default:
      return v1;
  }
}

void sub_2161117BC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C407D0D3C16);
  _Unwind_Resume(a1);
}

void sub_2161117FC(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_26C6C5408;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(void *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 0;
  operator new();
}

void sub_21611189C(uint64_t a1)
{
  sub_216111DD8(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161118D4(uint64_t a1, const char *a2)
{
  char v3 = sub_216112224(*(void *)(a1 + 40), a2);
  float v4 = *(unsigned __int8 ***)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *v4;
    sub_2161122BC(a1, v5);
  }
  sub_216111D40((uint64_t)v4);
  return 0;
}

void sub_216111934(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 **)(a1 + 144);
  if (v2) {
    sub_216112B70(v2, a2);
  }
}

void sub_216111944(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 144);
  if (!v4) {
    sub_216112F58();
  }
  uint64_t v5 = *(void *)(v4 + 8);

  sub_216113184(a1, a2, v5, a3);
}

void sub_2161119BC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = sub_216111B74(a1, a2, a3);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  if (v7)
  {
    sub_216120BA4((void **)a4, (uint64_t)(a2[1] - *a2) >> 2);
    if (a2[1] != *a2)
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = (float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a3 + 40))(a3, v8);
        if (v10) {
          int v11 = sub_216111640(v10, v9);
        }
        else {
          int v11 = 0;
        }
        float32x4_t v13 = *(_DWORD **)(a4 + 8);
        unint64_t v12 = *(void *)(a4 + 16);
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v15 = *(_DWORD **)a4;
          uint64_t v16 = ((uint64_t)v13 - *(void *)a4) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v18 = v12 - (void)v15;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            float32x4_t v20 = (char *)sub_2161129B4(a4 + 16, v19);
            uint64_t v15 = *(_DWORD **)a4;
            float32x4_t v13 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            float32x4_t v20 = 0;
          }
          float32x4_t v21 = &v20[4 * v16];
          *(_DWORD *)float32x4_t v21 = v11;
          float32x4_t v14 = v21 + 4;
          while (v13 != v15)
          {
            int v22 = *--v13;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(void *)a4 = v21;
          *(void *)(a4 + 8) = v14;
          *(void *)(a4 + 16) = &v20[4 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *float32x4_t v13 = v11;
          float32x4_t v14 = v13 + 1;
        }
        *(void *)(a4 + 8) = v14;
        ++v8;
      }
      while (v8 < (uint64_t)(a2[1] - *a2) >> 2);
    }
  }
}

void sub_216111B4C(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216111B74(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3) {
    BOOL v3 = a2[1] == *a2;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    sub_21611465C(a1, (uint64_t)a2, a3, (uint64_t)&v6);
    sub_216110C7C(v7, v6);
  }
  return v4;
}

void sub_216111BC8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_216111C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_216111CE0((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216111C5C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216111C94(uint64_t a1)
{
}

uint64_t sub_216111C9C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC130)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216111CE0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_216111D40(a2);
    JUMPOUT(0x2166CA800);
  }
}

uint64_t sub_216111D40(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 16) = -1;
  }
  if (*(void *)a1) {
    munmap(*(void **)a1, *(void *)(a1 + 8));
  }
  return 1;
}

BOOL sub_216111D88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t sub_216111DD8(uint64_t a1)
{
  sub_216111EF4((unsigned __int8 **)(a1 + 144), 0);
  uint64_t v2 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2) {
    MEMORY[0x2166CA800](v2, 0x1050C40A1200FABLL);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    MEMORY[0x2166CA800](v3, 0x1050C403E01F869);
  }
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v4) {
    MEMORY[0x2166CA800](v4, 0x1050C4004BAC841);
  }
  uint64_t v5 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v5) {
    MEMORY[0x2166CA800](v5, 0x10C0C40AE133BEFLL);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v6) {
    MEMORY[0x2166CA800](v6, 0x10C0C404270A891);
  }
  uint64_t v7 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v7) {
    MEMORY[0x2166CA800](v7, 0x10C0C404270A891);
  }
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v8) {
    MEMORY[0x2166CA800](v8, 0x10C0C40F6595248);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  if (v9) {
    sub_2161121B0(v9);
  }
  return a1;
}

unsigned __int8 *sub_216111EF4(unsigned __int8 **a1, unsigned __int8 *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216111F44(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

unsigned __int8 *sub_216111F44(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  if (v2)
  {
    if (v3)
    {
      uint64_t v4 = sub_21610EE54(v3);
      uint64_t v5 = 0x10B1C40EE74E478;
LABEL_6:
      MEMORY[0x2166CA800](v4, v5);
    }
  }
  else if (v3)
  {
    uint64_t v4 = sub_216111FB0(v3);
    uint64_t v5 = 0x10A1C4035FF2A5ELL;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_216111FB0(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 32);
  int v2 = *(void **)(a1 + 32);
  if (v2) {
    free(v2);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  sub_216112000((void **)(a1 + 16), 0);
  sub_2161120D8((void **)(a1 + 8), 0);
  return a1;
}

void *sub_216112000(void **a1, void *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216112050(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void *sub_216112050(void *a1)
{
  uint64_t v3 = a1 + 31;
  int v2 = (void *)a1[31];
  if (v2) {
    free(v2);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = (void *)a1[21];
  if (v4) {
    free(v4);
  }
  a1[21] = 0;
  a1[22] = 0;
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  a1[14] = 0;
  a1[15] = 0;
  uint64_t v6 = (void *)a1[8];
  if (v6) {
    free(v6);
  }
  a1[8] = 0;
  a1[9] = 0;
  uint64_t v7 = (void *)a1[2];
  if (v7) {
    free(v7);
  }
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

void *sub_2161120D8(void **a1, void *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216112128(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void *sub_216112128(void *a1)
{
  uint64_t v3 = a1 + 22;
  int v2 = (void *)a1[22];
  if (v2) {
    free(v2);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = (void *)a1[20];
  if (v4) {
    free(v4);
  }
  a1[20] = 0;
  a1[21] = 0;
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  a1[14] = 0;
  a1[15] = 0;
  uint64_t v6 = (void *)a1[8];
  if (v6) {
    free(v6);
  }
  a1[8] = 0;
  a1[9] = 0;
  uint64_t v7 = (void *)a1[2];
  if (v7) {
    free(v7);
  }
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

void sub_2161121B0(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_216112224(uint64_t a1, const char *a2)
{
  sub_216111D40(a1);
  int v4 = open(a2, 0);
  *(_DWORD *)(a1 + 16) = v4;
  if (v4 < 0) {
    return 0;
  }
  if (fstat(v4, &v8) < 0) {
    return 0;
  }
  st_std::string::size_type size = v8.st_size;
  uint64_t v6 = mmap(0, v8.st_size, 1, 1, *(_DWORD *)(a1 + 16), 0);
  if (v6 == (void *)-1) {
    return 0;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = st_size;
  close(*(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 16) = -1;
  return 1;
}

void sub_2161122BC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unsigned int v4 = a2[1];
  unsigned int v5 = a2[2];
  unsigned __int8 v6 = a2[3];
  *(_DWORD *)(a1 + 20) = v4 & 1;
  *(_DWORD *)(a1 + 24) = (v4 >> 2) & 1;
  *(unsigned char *)(a1 + 28) = (v4 & 2) != 0;
  *(unsigned char *)(a1 + 30) = v6;
  *(unsigned char *)(a1 + 29) = v6 != 0;
  if (v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 5;
  }
  sub_2161128F8(&v18, v7);
  uint64_t v8 = 0;
  if (v7 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v7;
  }
  do
  {
    *(_WORD *)((char *)v18 + v8) = *(_WORD *)&a2[v8 + 4];
    *(_WORD *)((char *)v18 + v8 + 2) = *(_WORD *)&a2[v8 + 6];
    v8 += 4;
  }
  while (4 * v9 != v8);
  if (*(unsigned char *)(a1 + 28))
  {
    for (uint64_t i = 0; i != 16; i += 2)
    {
      int v11 = &__p[i];
      *(_DWORD *)int v11 = 0;
      v11[1] = 0;
    }
    uint64_t v12 = 0;
    float32x4_t v13 = &__p[1];
    do
    {
      float32x4_t v14 = &a2[v12 + v8];
      *((_DWORD *)v13 - 2) = *((_DWORD *)v14 + 1);
      *float32x4_t v13 = (void *)*((void *)v14 + 1);
      v13 += 2;
      v12 += 12;
    }
    while (v12 != 96);
    operator new();
  }
  sub_216112AB4(__p, v7);
  uint64_t v15 = 0;
  uint64_t v16 = (uint64_t)&a2[v8 + 4];
  uint64_t v17 = 2;
  do
  {
    *(void *)((char *)__p[0] + v15) = v16;
    v16 += 4 * *(unsigned __int16 *)((char *)v18 + v17 - 2) * (unint64_t)*(unsigned __int16 *)((char *)v18 + v17);
    v15 += 8;
    v17 += 4;
  }
  while (8 * v9 != v15);
  operator new();
}

void sub_216112884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161128F8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112970(a1, a2);
    unsigned int v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_216112954(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216112970(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_21610CB04();
  }
  float result = (char *)sub_2161129B4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_2161129B4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_2160FFA74();
  }
  return operator new(4 * a2);
}

uint64_t sub_2161129EC(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7)
{
  long long v11 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v11;
  long long v12 = a3[1];
  *(_OWORD *)(a1 + 32) = *a3;
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = *a4;
  *(_OWORD *)(a1 + 80) = *a5;
  *(_OWORD *)(a1 + 96) = *a6;
  *(_OWORD *)(a1 + 112) = *a7;
  double v13 = sub_216110380((uint64_t)a4, (uint64_t)a6, (uint64_t)a7);
  *(void *)__e = 0;
  sub_2161251C4(&__e[1], __e, v13);
  uint64_t v14 = sub_216110378();
  int v15 = -*(_DWORD *)a4;
  *(_DWORD *)(a1 + 128) = -*(_DWORD *)a6;
  *(_DWORD *)(a1 + 132) = v15;
  int v16 = __e[1];
  *(_DWORD *)(a1 + 136) = *(_DWORD *)a7;
  *(_DWORD *)(a1 + 140) = v16;
  *(_DWORD *)(a1 + 144) = __e[0];
  *(void *)(a1 + 148) = v14;
  return a1;
}

void *sub_216112AB4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112B2C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216112B10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216112B2C(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_21610CB04();
  }
  float result = (char *)sub_2160FFAA8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_216112B70(unsigned __int8 *a1, int a2)
{
  int v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  if (v2) {
    sub_21610F004(v3, a2);
  }
  else {
    sub_216112B84(v3, a2);
  }
}

void sub_216112B84(uint64_t a1, int a2)
{
  sub_216112C1C(*(int **)(a1 + 8), a2);
  if (*(_DWORD *)(a1 + 64) < a2)
  {
    int v4 = *(_DWORD *)(a1 + 68);
    sub_21610FB74(a1 + 32, v4 * a2);
    *(void *)(a1 + 48) = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = v4 * (uint64_t)a2;
    *(_DWORD *)(a1 + 64) = a2;
    *(_DWORD *)(a1 + 68) = v4;
    *(_DWORD *)(a1 + 72) = 2;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    sub_216112D70(v5, a2);
  }
}

void sub_216112C1C(int *a1, int a2)
{
  a1[3] = a2;
  int v4 = *a1;
  int v5 = *a1;
  if (a1[2] != 1) {
    int v5 = a1[1] + v4;
  }
  int v6 = 4 * v4;
  sub_21610FB74((uint64_t)(a1 + 4), v5 * a2);
  unint64_t v7 = (void *)*((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 3);
  *((void *)a1 + 4) = v7;
  *((void *)a1 + 5) = v5 * (uint64_t)a2;
  a1[12] = v5;
  a1[13] = a2;
  a1[14] = 2;
  if (v8 >= 1) {
    bzero(v7, 4 * (v8 - ((v8 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  int v9 = *a1;
  sub_21610FB74((uint64_t)(a1 + 16), *a1 * a2);
  uint64_t v10 = (void *)*((void *)a1 + 8);
  uint64_t v11 = *((void *)a1 + 9);
  *((void *)a1 + 10) = v10;
  *((void *)a1 + 11) = v9 * (uint64_t)a2;
  a1[24] = v9;
  a1[25] = a2;
  a1[26] = 2;
  if (v11 >= 1) {
    bzero(v10, 4 * (v11 - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  sub_21610FB74((uint64_t)(a1 + 28), v6 * a2);
  long long v12 = (void *)*((void *)a1 + 14);
  uint64_t v13 = *((void *)a1 + 15);
  *((void *)a1 + 16) = v12;
  *((void *)a1 + 17) = a2 * (uint64_t)v6;
  a1[36] = v6;
  a1[37] = a2;
  a1[38] = 2;
  if (v13 >= 1)
  {
    bzero(v12, 4 * (v13 - ((v13 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
}

void sub_216112D70(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  int v4 = *(_DWORD *)(a1 + 8) * *(unsigned __int8 *)(a1 + 4);
  sub_21610FB74(a1 + 64, v4 * a2);
  int v5 = *(void **)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v4 * (uint64_t)a2;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = v4;
  *(_DWORD *)(a1 + 104) = 2;
  if (v6 >= 1) {
    bzero(v5, 4 * (v6 - ((v6 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  int v7 = 2 * *(_DWORD *)(a1 + 8);
  sub_21610FB74(a1 + 112, v7 * a2);
  uint64_t v8 = *(void **)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = a2 * (uint64_t)v7;
  *(_DWORD *)(a1 + 144) = a2;
  *(_DWORD *)(a1 + 148) = v7;
  *(_DWORD *)(a1 + 152) = 2;
  if (v9 >= 1) {
    bzero(v8, 4 * (v9 - ((v9 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  int v10 = *(unsigned __int8 *)(a1 + 4);
  sub_21610FB74(a1 + 168, *(unsigned __int8 *)(a1 + 4) * (uint64_t)a2);
  uint64_t v11 = *(void **)(a1 + 168);
  uint64_t v12 = *(void *)(a1 + 176);
  *(void *)(a1 + 184) = v11;
  *(void *)(a1 + 192) = v10 * (uint64_t)a2;
  *(_DWORD *)(a1 + 200) = a2;
  *(_DWORD *)(a1 + 204) = v10;
  *(_DWORD *)(a1 + 208) = 2;
  if (v12 >= 1) {
    bzero(v11, 4 * (v12 - ((v12 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  int v13 = *(_DWORD *)(a1 + 8);
  sub_21610FB74(a1 + 16, v13 * a2);
  *(void *)(a1 + 32) = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = v13 * (uint64_t)a2;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = v13;
  *(_DWORD *)(a1 + 56) = 2;
  uint64_t v14 = *(void *)(a1 + 176);
  if (v14 >= 1) {
    bzero(*(void **)(a1 + 168), 4 * (v14 - ((v14 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 296) = 1;
  unint64_t v15 = *(unsigned __int8 *)(a1 + 4);
  sub_21610FB74(a1 + 248, v15);
  int v16 = *(void **)(a1 + 248);
  uint64_t v17 = *(void *)(a1 + 256);
  *(void *)(a1 + 264) = v16;
  *(void *)(a1 + 272) = v15;
  *(_DWORD *)(a1 + 280) = 1;
  *(_DWORD *)(a1 + 284) = v15;
  *(_DWORD *)(a1 + 288) = 2;
  if (v17 >= 1)
  {
    bzero(v16, 4 * (v17 - ((v17 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
}

void sub_216112F58()
{
}

void sub_216113140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161120D8((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216113184(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(_DWORD *)(a1 + 20) == 1) {
    sub_216114504(a1, a2, (uint64_t *)a3, a4);
  }
  else {
    sub_216114334(a1, a2, a3, a4);
  }
}

void sub_216113198()
{
}

void sub_216113208(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1010C401DB35655);
  _Unwind_Resume(a1);
}

void sub_21611322C()
{
}

void sub_21611331C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21611405C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_216113334()
{
}

void sub_2161133B4(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1080C404FD05E4CLL);
  _Unwind_Resume(a1);
}

void sub_2161133D8()
{
}

void sub_216113448(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10C0C401F533AC0);
  _Unwind_Resume(a1);
}

void sub_21611346C()
{
}

void sub_216113548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21611405C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216113560(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  sub_21610F0BC((int *)a1, a4);
  return a1;
}

void sub_216113618(_Unwind_Exception *exception_object)
{
  if (*(void *)v7) {
    free(*(void **)v7);
  }
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  if (*(void *)v6) {
    free(*(void **)v6);
  }
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  if (*(void *)v5) {
    free(*(void **)v5);
  }
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  if (*(void *)v4) {
    free(*(void **)v4);
  }
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  if (*(void *)v3) {
    free(*(void **)v3);
  }
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  if (*(void *)v2) {
    free(*(void **)v2);
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if (*(void *)v1) {
    free(*(void **)v1);
  }
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_216113694(uint64_t a1)
{
  sub_216111FB0(a1);

  JUMPOUT(0x2166CA800);
}

unsigned int *sub_2161136CC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t v30 = v1[3];
    if (v30) {
      BOOL v3 = v2 == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3)
    {
      if (v1[2] == 1)
      {
        uint64_t v5 = (const void *)*((void *)v1 + 4);
        uint64_t v6 = *((void *)v1 + 5);
      }
      else
      {
        uint64_t v7 = v1[1];
        uint64_t v8 = v1[13];
        uint64_t v5 = (const void *)(*((void *)v1 + 4) + 4 * v8 * (unint64_t)v7);
        uint64_t v6 = ((v7 + v2) - v7) * v8;
      }
      uint64_t v9 = *(void *)(a1 + 16);
      if (v9)
      {
        uint64_t v10 = *(unsigned __int8 *)(v9 + 4);
        int v11 = (v10 + 2) * v2;
        sub_216113D30(&__dst, (v11 * v30));
        uint64_t v12 = (char *)__dst;
        if (v6) {
          memmove(__dst, v5, 4 * v6);
        }
        uint64_t v13 = *((void *)v1 + 11);
        if (v13) {
          memmove(&v12[4 * v6], *((const void **)v1 + 10), 4 * v13);
        }
        sub_216113CA4((uint64_t)__dst, v30, v30, (v10 + 2) * v2, &v32);
        uint64_t v14 = 0;
        uint64_t v15 = *(void *)(a1 + 16);
        uint64_t v29 = *(void *)(v15 + 80);
        unsigned int v28 = *(unsigned __int8 *)(v15 + 160);
        uint64_t v27 = *(unsigned int *)(v15 + 100);
        while (1)
        {
          if (v10)
          {
            int v16 = 0;
            uint64_t v17 = (char *)v32 + 4 * v14 * v11 + 4 * (2 * v2);
            uint64_t v18 = v10;
            unsigned int v19 = v28;
            do
            {
              memmove(&v17[4 * v16], (const void *)(v29 + 4 * v14 * v27 + 4 * v19 % v10 * v2), 4 * v2);
              v16 += v2;
              ++v19;
              --v18;
            }
            while (v18);
          }
          if (++v14 == v30)
          {
            uint64_t v20 = v32;
            size_t v21 = v33 - (void)v32;
            sub_21610ED20(&__p, v33 - (void)v32);
            memcpy(__p, v20, v21);
            sub_2161252A0();
          }
        }
      }
      sub_216113D30(&__dst, (2 * v30 * v2));
      int v22 = (char *)__dst;
      if (v6) {
        memmove(__dst, v5, 4 * v6);
      }
      uint64_t v23 = *((void *)v1 + 11);
      if (v23) {
        memmove(&v22[4 * v6], *((const void **)v1 + 10), 4 * v23);
      }
      sub_216113CA4((uint64_t)__dst, v30, v30, 2 * v2, &v32);
      float32x4_t v24 = v32;
      size_t v25 = v33 - (void)v32;
      sub_21610ED20(&__p, v33 - (void)v32);
      memcpy(__p, v24, v25);
      sub_2161252A0();
    }
    return 0;
  }
  return v1;
}

void sub_216113994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161139EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  unsigned int v4 = sub_216125484(v3);
  uint64_t v5 = (const void *)sub_216125490(v3);
  size_t v6 = sub_21612549C(v3);
  sub_216113D30(v29, v6 >> 2);
  memcpy(v29[0], v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    int v8 = *(unsigned __int8 *)(v7 + 4) + 2;
    unint64_t v9 = v6 / (4 * (int)(v8 * v4));
    int v10 = v8 * v9;
    sub_216113CA4((uint64_t)v29[0], v8 * v9, 2 * v9, v4, v18);
    float32x4_t v24 = (void *)v18[0];
    unint64_t v25 = (int)v9 * (unint64_t)v4;
    int v26 = v9;
    unsigned int v27 = v4;
    int v28 = 2;
    unsigned int v19 = (char *)(v18[0] + 4 * v25);
    uint64_t v20 = (2 * (int)v9 - (uint64_t)(int)v9) * v4;
    int v21 = v9;
    unsigned int v22 = v4;
    int v23 = 2;
    sub_216113DA8(*(void *)(a1 + 8), (uint64_t)&v24, (uint64_t)&v19);
    std::string __p = v29[0];
    uint64_t v14 = (int)v4 * (uint64_t)v10;
    unsigned int v15 = v4;
    int v16 = v10;
    int v17 = 2;
    sub_216113ED0(*(unsigned int **)(a1 + 16), (uint64_t)&__p, 2 * v9);
    int v11 = (void *)v18[0];
    if (!v18[0]) {
      goto LABEL_7;
    }
    v18[1] = v18[0];
  }
  else
  {
    unint64_t v12 = v6 / (4 * (int)(2 * v4));
    sub_216113CA4((uint64_t)v29[0], 2 * v12, 2 * v12, v4, &__p);
    float32x4_t v24 = __p;
    unint64_t v25 = (int)v12 * (unint64_t)v4;
    int v26 = v12;
    unsigned int v27 = v4;
    int v28 = 2;
    unsigned int v19 = (char *)__p + 4 * v25;
    uint64_t v20 = (2 * (int)v12 - (uint64_t)(int)v12) * v4;
    int v21 = v12;
    unsigned int v22 = v4;
    int v23 = 2;
    sub_216113DA8(*(void *)(a1 + 8), (uint64_t)&v24, (uint64_t)&v19);
    int v11 = __p;
    if (!__p) {
      goto LABEL_7;
    }
    uint64_t v14 = (uint64_t)__p;
  }
  operator delete(v11);
LABEL_7:
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void sub_216113C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  int v17 = *(void **)(v15 - 88);
  if (v17)
  {
    *(void *)(v15 - 80) = v17;
    operator delete(v17);
  }
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216113C8C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 68) * a2;
}

uint64_t *sub_216113CA4@<X0>(uint64_t a1@<X0>, int a2@<W3>, unsigned int a3@<W4>, int a4@<W5>, void *a5@<X8>)
{
  float result = sub_216113D30(a5, a4 * a3);
  if (a4)
  {
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = *result;
    do
    {
      uint64_t v13 = a3;
      unsigned int v14 = v10;
      unsigned int v15 = v11;
      if (a3)
      {
        do
        {
          *(_DWORD *)(v12 + 4 * v15) = *(_DWORD *)(a1 + 4 * v14);
          v15 += a4;
          ++v14;
          --v13;
        }
        while (v13);
      }
      ++v11;
      v10 += a2;
    }
    while (v11 != a4);
  }
  return result;
}

void *sub_216113D30(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112970(a1, a2);
    unsigned int v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_216113D8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216113DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 12) = v6;
  int v7 = *(_DWORD *)a1;
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 8) != 1) {
    int v8 = *(_DWORD *)(a1 + 4) + v7;
  }
  sub_21610F250(a1 + 16, v8, v6, 0.0);
  if (*(_DWORD *)(a1 + 8) == 1) {
    unint64_t v9 = *(void **)(a1 + 32);
  }
  else {
    unint64_t v9 = (void *)(*(void *)(a1 + 32) + 4 * *(unsigned int *)(a1 + 52) * (unint64_t)*(unsigned int *)(a1 + 4));
  }
  int v10 = 4 * v7;
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    memmove(v9, *(const void **)a2, 4 * v11);
  }
  sub_21610F250(a1 + 64, *(_DWORD *)a1, *(_DWORD *)(a1 + 12), 0.0);
  uint64_t v12 = *(void *)(a3 + 8);
  if (v12) {
    memmove(*(void **)(a1 + 80), *(const void **)a3, 4 * v12);
  }
  sub_21610F250(a1 + 112, v10, *(_DWORD *)(a1 + 12), 0.0);
  uint64_t v13 = *(void *)(a1 + 120);
  if (v13 >= 1)
  {
    unsigned int v14 = *(void **)(a1 + 112);
    bzero(v14, 4 * (v13 - ((v13 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
}

void sub_216113ED0(unsigned int *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 20);
  uint64_t v8 = a1[25];
  *a1 = v6;
  *((unsigned char *)a1 + 160) = 0;
  sub_21610F250((uint64_t)(a1 + 16), v6, v8, 0.0);
  sub_21610F250((uint64_t)(a1 + 28), *a1, 2 * a1[2], 0.0);
  sub_21610F250((uint64_t)(a1 + 42), *a1, *((unsigned __int8 *)a1 + 4), 0.0);
  sub_21610F250((uint64_t)(a1 + 4), *a1, a1[2], 0.0);
  if (v6)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    do
    {
      if (v8) {
        memmove((void *)(*((void *)a1 + 10) + 4 * v9), (const void *)(*(void *)a2 + 4 * v10 + 4 * a3), 4 * v8);
      }
      v10 += v7;
      v9 += v8;
      --v6;
    }
    while (v6);
  }
  unint64_t v11 = *((unsigned __int8 *)a1 + 4);
  uint64_t v12 = *a1;
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = *((unsigned __int8 *)a1 + 4);
    do
    {
      unint64_t v16 = 0;
      if (*((unsigned char *)a1 + 4))
      {
        int v17 = (float *)(*((void *)a1 + 10) + v13 * a1[25]);
        uint64_t v18 = *((unsigned __int8 *)a1 + 4);
        do
        {
          if (*v17 == 0.0) {
            ++v16;
          }
          v17 += a1[2];
          --v18;
        }
        while (v18);
      }
      if (v16 < v15) {
        unint64_t v15 = v16;
      }
      ++v14;
      v13 += 4;
    }
    while (v14 != v12);
    BOOL v19 = v11 > v15;
    unint64_t v20 = v11 - v15;
    if (v19) {
      memset_pattern16((void *)(*((void *)a1 + 33) + 4 * v15), &unk_21636C900, 4 * v20);
    }
  }
  else
  {
    unint64_t v15 = *((unsigned __int8 *)a1 + 4);
  }
  *((unsigned char *)a1 + 296) = v15 != 0;
}

uint64_t sub_21611405C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216111FB0(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2161140AC(uint64_t a1, int a2, int a3, int a4, int a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  if (a5 == 1) {
    uint64_t v7 = (a3 << 6);
  }
  else {
    uint64_t v7 = 0;
  }
  *(_OWORD *)(a1 + 140) = 0uLL;
  sub_2161141CC((void *)(a1 + 160), v7);
  sub_2161141CC((void *)(a1 + 176), v7);
  sub_216112C1C((int *)a1, a4);
  return a1;
}

void sub_216114160(_Unwind_Exception *exception_object)
{
  if (*(void *)v2) {
    free(*(void **)v2);
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if (*(void *)v1) {
    free(*(void **)v1);
  }
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  if (*(void *)v5) {
    free(*(void **)v5);
  }
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  if (*(void *)v4) {
    free(*(void **)v4);
  }
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  if (*(void *)v3) {
    free(*(void **)v3);
  }
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void *sub_2161141CC(void *a1, uint64_t a2)
{
  if (4 * a2)
  {
    memptr = 0;
    int v4 = malloc_type_posix_memalign(&memptr, 0x20uLL, 4 * a2, 0xC6376F0AuLL);
    uint64_t v5 = memptr;
    if (v4) {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a1 = v5;
  a1[1] = a2;
  return a1;
}

uint64_t sub_216114234(uint64_t a1, int a2, char a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  sub_216112D70(a1, a2);
  return a1;
}

void sub_2161142D8(_Unwind_Exception *exception_object)
{
  if (*(void *)v5) {
    free(*(void **)v5);
  }
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  if (*(void *)v4) {
    free(*(void **)v4);
  }
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  if (*(void *)v3) {
    free(*(void **)v3);
  }
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  if (*(void *)v2) {
    free(*(void **)v2);
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if (*(void *)v1) {
    free(*(void **)v1);
  }
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_216114334(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v9 = **a2;
  uint64_t v8 = (*a2)[1];
  LODWORD(v26[0]) = 0;
  sub_21611494C(a4, (v8 - v9) >> 2, v26);
  LODWORD(v26[0]) = 0;
  sub_21611494C(&__p, (v8 - v9) >> 2, v26);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7);
  if ((int)v10 >= 2)
  {
    uint64_t v11 = 0;
    unsigned int v12 = v10 - 1;
    if ((unint64_t)((v8 - v9) >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = (v8 - v9) >> 2;
    }
    uint64_t v14 = v12;
    while (1)
    {
      unint64_t v15 = &(*a2)[3 * v11];
      sub_21611465C(a1, (uint64_t)v15, a3, (uint64_t)v26);
      if (v8 != v9) {
        break;
      }
LABEL_14:
      ++v11;
      sub_216110C7C((unint64_t)(v29 - (unsigned char *)__p) >> 2, (float *)__p);
      sub_216110AB8();
      if (v11 == v14) {
        goto LABEL_15;
      }
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = v15 + 3;
    uint64_t v19 = *(unsigned int *)(a1 + 16);
    unint64_t v20 = (float *)__p;
    uint64_t v21 = v26[0];
    uint64_t v22 = v27;
    while (1)
    {
      if (v19 == 0xFFFFFFFFLL)
      {
        uint64_t v23 = *(unsigned int *)(*v18 + 4 * v17);
      }
      else
      {
        float v24 = 1.0;
        if (*(_DWORD *)(*v15 + 4 * v17) == v19) {
          goto LABEL_13;
        }
        uint64_t v23 = *(unsigned int *)(*v18 + 4 * v17);
        if (v23 == v19) {
          goto LABEL_13;
        }
      }
      float v24 = *(float *)(v21 + 4 * (v16 + v23));
LABEL_13:
      v20[v17++] = v24;
      v16 += v22;
      if (v13 == v17) {
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
}

void sub_2161144D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216114504@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  uint64_t v9 = **a2;
  uint64_t v8 = (*a2)[1];
  LODWORD(v18[0]) = 0;
  sub_21611494C(a4, (v8 - v9) >> 2, v18);
  if ((int)v7 >= 2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (v7 - 1);
    if ((unint64_t)((v8 - v9) >> 2) <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = (v8 - v9) >> 2;
    }
    do
    {
      uint64_t v13 = &(*a2)[3 * v10];
      sub_2161206AC(a1, (uint64_t)v13, v13 + 3, a3, (uint64_t)v18);
      uint64_t v14 = v18[0];
      if (v8 != v9)
      {
        uint64_t v15 = 0;
        int v16 = *(_DWORD *)(a1 + 16);
        do
        {
          if (v16 != -1 && *(_DWORD *)(*v13 + 4 * v15) == v16) {
            *(_DWORD *)(v14 + 4 * v15) = 0;
          }
          ++v15;
        }
        while (v12 != v15);
      }
      ++v10;
      sub_216110AB8();
    }
    while (v10 != v11);
  }
  return sub_216110A98();
}

void sub_216114640(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21611465C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 28))
  {
    sub_2161149D0(*(void *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    uint64_t v8 = *(void *)(a1 + 96);
    uint64_t v9 = sub_21610F6CC(a3);
    sub_216114B6C(v8, (uint64_t *)&__p, v9, (uint64_t)v33);
    sub_21610F704(a3, (*(void *)(a2 + 8) - *(void *)a2) >> 2);
    uint64_t v10 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)sub_21610F6F4(a3);
    sub_216114FC0(v10, v33, v11, v32);
    uint64_t v12 = (float32x4_t **)sub_21610F6EC(a3);
    int v13 = *(_DWORD *)&v32[16];
    int v14 = *(_DWORD *)&v32[20];
    unint64_t v15 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
    int v16 = *v12;
    if (v15)
    {
      uint64_t v17 = *(unsigned __int8 **)v32;
      uint64_t v18 = *(void *)(a1 + 104);
      double v19 = *(double *)(v18 + 120);
      int v20 = *(_DWORD *)(v18 + 112);
      uint64_t v21 = (float *)*v12;
      unint64_t v22 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
      do
      {
        int v23 = *v17++;
        float v24 = v19 * (double)(v23 - v20);
        *v21++ = v24;
        --v22;
      }
      while (v22);
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v15;
    *(_DWORD *)(a4 + 16) = v13;
    *(_DWORD *)(a4 + 20) = v14;
    *(_DWORD *)(a4 + 24) = 2;
    sub_216111268((*(void *)(a2 + 8) - *(void *)a2) >> 2, *(unsigned __int16 *)(*(void *)(a1 + 88) + 32), v16);
    if (__p)
    {
      float32x4_t v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      unint64_t v25 = *(unsigned int **)(a3 + 8);
      sub_2161141CC(&__p, ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) * *(unsigned __int16 *)(*(void *)(a1 + 56) + 34));
      uint64_t v27 = *(void *)(a1 + 56);
      int v28 = *(unsigned int **)a2;
      if (*(void *)(a2 + 8) == *(void *)a2)
      {
        float v31 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(void *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          int v28 = *(unsigned int **)a2;
          uint64_t v30 = *(void *)(a2 + 8) - *(void *)a2;
        }
        while (v29 < v30 >> 2);
        uint64_t v27 = *(void *)(a1 + 56);
        float v31 = (void *)((unint64_t)v30 >> 2);
      }
      sub_216115338(a1, (uint64_t)v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34), v26);
      sub_2161154A0(v25, (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p) {
        free(__p);
      }
    }
    else
    {
      sub_216115510(*(void *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_2161156B0(*(void *)(a1 + 64), &__p, *(void *)(a3 + 8), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p)
      {
        float32x4_t v35 = __p;
        operator delete(__p);
      }
    }
    if (*(unsigned char *)(a1 + 29))
    {
      sub_216115734(*(void *)(a1 + 80), (uint64_t)v33, *(void *)(a3 + 16), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
    }
    sub_2161158DC((uint64_t)v33, a3 + 48, a4);
    sub_216111268((*(void *)(a2 + 8) - *(void *)a2) >> 2, *(unsigned __int16 *)(*(void *)(a1 + 56) + 32), *(float32x4_t **)a4);
  }
}

void sub_216114918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    free(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21611494C(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112970(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2161149B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161149D0(uint64_t a1@<X0>, unsigned int **a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2161159A0((void **)a3, a2[1] - *a2);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = a3 + 2;
    uint64_t v9 = a3[1];
    do
    {
      uint64_t v10 = *(unsigned int *)(a1 + 20);
      unint64_t v11 = *(void *)a1 + *v6 * (unint64_t)v10;
      if ((unint64_t)v9 >= *v8)
      {
        uint64_t v12 = (v9 - *a3) >> 5;
        if ((unint64_t)(v12 + 1) >> 59) {
          sub_21610CB04();
        }
        uint64_t v13 = *v8 - (void)*a3;
        uint64_t v14 = v13 >> 4;
        if (v13 >> 4 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          int v16 = (char *)sub_216115A58((uint64_t)(a3 + 2), v15);
        }
        else {
          int v16 = 0;
        }
        uint64_t v17 = &v16[32 * v12];
        *(void *)uint64_t v17 = v11;
        *((void *)v17 + 1) = v10;
        *((_DWORD *)v17 + 4) = 1;
        *((_DWORD *)v17 + 5) = v10;
        *((_DWORD *)v17 + 6) = 1;
        double v19 = *a3;
        uint64_t v18 = a3[1];
        int v20 = v17;
        if (v18 != *a3)
        {
          do
          {
            long long v21 = *((_OWORD *)v18 - 2);
            *(_OWORD *)(v20 - 20) = *(_OWORD *)(v18 - 20);
            *((_OWORD *)v20 - 2) = v21;
            v20 -= 32;
            v18 -= 32;
          }
          while (v18 != v19);
          uint64_t v18 = v19;
        }
        uint64_t v9 = v17 + 32;
        *a3 = v20;
        a3[1] = v17 + 32;
        a3[2] = &v16[32 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)uint64_t v9 = v11;
        *((void *)v9 + 1) = v10;
        *((_DWORD *)v9 + 4) = 1;
        *((_DWORD *)v9 + 5) = v10;
        *((_DWORD *)v9 + 6) = 1;
        v9 += 32;
      }
      a3[1] = v9;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_216114B48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216114B6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  int v8 = *(_DWORD *)a3;
  size_t v9 = *(int *)(a3 + 4);
  unint64_t v10 = (unint64_t)(a2[1] - *a2) >> 5;
  int v11 = *(_DWORD *)(a1 + 16);
  int v12 = *(_DWORD *)(a1 + 20);
  v45[0] = v10;
  v45[1] = v9;
  sub_216116698(&v47, v45, 2);
  v43[0] = v10;
  v43[1] = v8;
  sub_216116698(v45, v43, 2);
  v41[0] = v11;
  v41[1] = v12;
  sub_216116698(v43, v41, 2);
  int v39 = *(void *)(a1 + 40);
  sub_216116698(v41, &v39, 1);
  v37[0] = v10;
  v37[1] = v8;
  sub_216116698(&v39, v37, 2);
  sub_216116724(v37, &v39);
  sub_216116724(&v35, v45);
  v31[0] = v10;
  v31[1] = v12;
  sub_216116698(&v33, v31, 2);
  v30[0] = v10;
  v30[1] = v11;
  sub_216116698(v31, v30, 2);
  uint64_t v13 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      memmove((void *)(*(void *)(a3 + 128) + v15), *(const void **)(v13 + v14), v9);
      ++v16;
      uint64_t v13 = *a2;
      v15 += v9;
      v14 += 32;
    }
    while (v16 < (a2[1] - *a2) >> 5);
  }
  uint64_t v17 = (std::mutex *)sub_21612574C();
  std::mutex::lock(v17);
  sub_216115A90((int *)(a1 + 128), &v47, *(void *)(a3 + 128), v45, *(void *)(a3 + 32), v43, *(void *)a1, v41, *(int32x4_t **)(a1 + 32), &v39, *(void *)(a3 + 80), v37, *(void *)(a3 + 320), &v35, *(unsigned char **)(a3 + 272), &v33, *(void *)(a3 + 176), v31, *(int16x4_t **)(a3 + 224),
    (uint64_t)&v17[1]);
  std::mutex::unlock(v17);
  uint64_t v18 = v37[0];
  if (v37[0] < 5)
  {
    if (v37[0] < 1)
    {
      int v20 = 1;
      goto LABEL_10;
    }
    double v19 = (int *)&v38;
  }
  else
  {
    double v19 = v38;
  }
  int v20 = 1;
  do
  {
    int v21 = *v19++;
    v20 *= v21;
    --v18;
  }
  while (v18);
LABEL_10:
  memmove(*(void **)(a3 + 80), *(const void **)(a3 + 320), 2 * v20);
  uint64_t v22 = v35;
  if (v35 >= 5)
  {
    int v23 = v36;
    goto LABEL_14;
  }
  if (v35 >= 1)
  {
    int v23 = (int *)&v36;
LABEL_14:
    LODWORD(v24) = 1;
    do
    {
      int v25 = *v23++;
      size_t v24 = v25 * (uint64_t)(int)v24;
      --v22;
    }
    while (v22);
    goto LABEL_16;
  }
  size_t v24 = 1;
LABEL_16:
  uint64_t result = memmove(*(void **)(a3 + 32), *(const void **)(a3 + 272), v24);
  if (v45[0] < 5)
  {
    int v27 = (int)v46;
    int v28 = (int *)&v46 + 1;
  }
  else
  {
    int v28 = v46 + 1;
    int v27 = *v46;
  }
  int v29 = *v28;
  *(void *)a4 = *(void *)(a3 + 32);
  *(void *)(a4 + 8) = v29 * (uint64_t)v27;
  *(_DWORD *)(a4 + 16) = v27;
  *(_DWORD *)(a4 + 20) = v29;
  *(_DWORD *)(a4 + 24) = 2;
  if (v31[0] >= 5)
  {
    uint64_t result = v32;
    if (v32) {
      uint64_t result = (void *)MEMORY[0x2166CA7C0](v32, 0x1000C8052888210);
    }
  }
  if (v33 >= 5)
  {
    uint64_t result = v34;
    if (v34) {
      uint64_t result = (void *)MEMORY[0x2166CA7C0](v34, 0x1000C8052888210);
    }
  }
  if (v35 >= 5)
  {
    uint64_t result = v36;
    if (v36) {
      uint64_t result = (void *)MEMORY[0x2166CA7C0](v36, 0x1000C8052888210);
    }
  }
  if (v37[0] >= 5)
  {
    uint64_t result = v38;
    if (v38) {
      uint64_t result = (void *)MEMORY[0x2166CA7C0](v38, 0x1000C8052888210);
    }
  }
  if (v39 >= 5)
  {
    uint64_t result = v40;
    if (v40) {
      uint64_t result = (void *)MEMORY[0x2166CA7C0](v40, 0x1000C8052888210);
    }
  }
  if (v41[0] >= 5)
  {
    uint64_t result = v42;
    if (v42) {
      uint64_t result = (void *)MEMORY[0x2166CA7C0](v42, 0x1000C8052888210);
    }
  }
  if (v43[0] >= 5)
  {
    uint64_t result = v44;
    if (v44) {
      uint64_t result = (void *)MEMORY[0x2166CA7C0](v44, 0x1000C8052888210);
    }
  }
  if (v45[0] >= 5)
  {
    uint64_t result = v46;
    if (v46) {
      uint64_t result = (void *)MEMORY[0x2166CA7C0](v46, 0x1000C8052888210);
    }
  }
  if (v47 >= 5)
  {
    uint64_t result = v48;
    if (v48) {
      return (void *)MEMORY[0x2166CA7C0](v48, 0x1000C8052888210);
    }
  }
  return result;
}

void sub_216114FB4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2160F7444(a1);
}

void sub_216114FC0(uint64_t a1@<X0>, int32x2_t *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  int32x2_t v52 = a2[2];
  sub_216116698(&v50, (int *)&v52, 2);
  int32x2_t v52 = *(int32x2_t *)(a1 + 16);
  sub_216116698(&v48, (int *)&v52, 2);
  v52.i32[0] = *(void *)(a1 + 40);
  sub_216116698(&v46, (int *)&v52, 1);
  int32x2_t v52 = (int32x2_t)a3[2];
  sub_216116698(&v44, (int *)&v52, 2);
  int v8 = (std::mutex *)sub_21612574C();
  std::mutex::lock(v8);
  int32x2_t v9 = *a2;
  int32x2_t v10 = *(int32x2_t *)a1;
  int32x2_t v11 = *(int32x2_t *)(a1 + 32);
  uint64_t v12 = *a3;
  int v13 = *(_DWORD *)(a1 + 128);
  int v14 = *(_DWORD *)(a1 + 132);
  int v15 = *(_DWORD *)(a1 + 136);
  uint64_t v16 = *(void *)(a1 + 140);
  uint64_t v17 = *(void *)(a1 + 148);
  if (v44 <= 4) {
    uint64_t v18 = (int *)v45;
  }
  else {
    uint64_t v18 = (int *)v45[0];
  }
  int v19 = 1;
  uint64_t v20 = (v44 - 1);
  if (v44 >= 1)
  {
    uint64_t v21 = (v44 - 1);
    uint64_t v22 = v44;
    do
    {
      if (v21) {
        int v23 = *v18;
      }
      else {
        int v23 = 1;
      }
      v19 *= v23;
      ++v18;
      --v21;
      --v22;
    }
    while (v22);
  }
  int v24 = v48 - 1;
  if (v48 <= 4) {
    int v25 = (int *)v49 + v24;
  }
  else {
    int v25 = (int *)(v49[0] + 4 * v24);
  }
  int v26 = *v25;
  if (v44 <= 4) {
    int v27 = (int *)v45 + (int)v20;
  }
  else {
    int v27 = (int *)(v45[0] + 4 * v20);
  }
  int v28 = *v27;
  int32x2_t v38 = v10;
  int v39 = v28;
  int v40 = v26;
  int v41 = v26;
  int32x2_t v34 = v9;
  int v35 = v26;
  int v36 = v19;
  int v37 = v26;
  uint64_t v30 = v12;
  int v31 = v28;
  int v32 = v19;
  int v33 = v28;
  int32x2_t v52 = v11;
  int v53 = v28;
  uint64_t v54 = v16;
  int v55 = v15;
  uint64_t v56 = v17;
  v43[0] = v14;
  v43[1] = v28;
  v42[0] = v13;
  v42[1] = v19;
  sub_21611C6C8((uint64_t)&v8[1], &v38, &v34, (uint64_t)&v30, v43, v42, (uint64_t)&v52);
  std::mutex::unlock(v8);
  long long v29 = *((_OWORD *)a3 + 1);
  *a4 = *(_OWORD *)a3;
  a4[1] = v29;
  if (v44 >= 5 && v45[0]) {
    MEMORY[0x2166CA7C0](v45[0], 0x1000C8052888210);
  }
  if (v46 >= 5 && v47) {
    MEMORY[0x2166CA7C0](v47, 0x1000C8052888210);
  }
  if (v48 >= 5 && v49[0]) {
    MEMORY[0x2166CA7C0](v49[0], 0x1000C8052888210);
  }
  if (v50 >= 5)
  {
    if (v51) {
      MEMORY[0x2166CA7C0](v51, 0x1000C8052888210);
    }
  }
}

void sub_216115258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,uint64_t a26,int a27,uint64_t a28)
{
  std::mutex::unlock(v28);
  if (a21 >= 5 && a22) {
    MEMORY[0x2166CA7C0](a22, 0x1000C8052888210);
  }
  if (a24 >= 5 && a25) {
    MEMORY[0x2166CA7C0](a25, 0x1000C8052888210);
  }
  if (a27 >= 5 && a28) {
    MEMORY[0x2166CA7C0](a28, 0x1000C8052888210);
  }
  if (*(int *)(v29 - 120) >= 5)
  {
    uint64_t v31 = *(void *)(v29 - 112);
    if (v31) {
      MEMORY[0x2166CA7C0](v31, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

void *sub_216115338(int a1, uint64_t a2, uint64_t a3, void *a4, int a5, int8x8_t a6)
{
  LODWORD(v6) = a5;
  int v7 = (int)a4;
  int32x2_t v9 = *(char **)(a2 + 128);
  if ((int)a4 > 1)
  {
    a6.i32[0] = a4 - 1;
    a6 = vcnt_s8(a6);
    a6.i16[0] = vaddlv_u8((uint8x8_t)a6);
    if (a6.i32[0] < 2u) {
      goto LABEL_15;
    }
  }
  if ((int)a4 >= 1)
  {
    a6.i32[0] = (int)a4;
    a6 = vcnt_s8(a6);
    a6.i16[0] = vaddlv_u8((uint8x8_t)a6);
    if (a6.i32[0] < 2u) {
      goto LABEL_15;
    }
  }
  BOOL v10 = ((a4 + 1) & a4) != 0 || (int)a4 < 0;
  BOOL v11 = v10;
  if (a5 >= 1
    && v11
    && (a6.i32[0] = a5, uint8x8_t v12 = (uint8x8_t)vcnt_s8(a6), v12.i16[0] = vaddlv_u8(v12), v12.i32[0] <= 1u)
    && (unsigned int v13 = a4 | (a4 >> 1) | ((a4 | (a4 >> 1)) >> 2),
        unsigned int v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8),
        int v15 = (void *)((v14 | HIWORD(v14)) + 1),
        *(void *)(a2 + 168) >= (unint64_t)((int)v15 * a5)))
  {
    memcpy(*(void **)(a2 + 160), *(const void **)a3, 4 * *(void *)(a3 + 8));
    sub_2161102F4(v15, v6, *(char **)(a2 + 160), *(char **)(a2 + 176));
    uint64_t v18 = 0;
    size_t v19 = 4 * v7;
    uint64_t v20 = 4 * (int)v15;
    uint64_t v6 = v6;
    do
    {
      uint64_t result = memcpy(v9, (const void *)(*(void *)(a2 + 176) + v18), v19);
      v18 += v20;
      v9 += v19;
      --v6;
    }
    while (v6);
  }
  else
  {
LABEL_15:
    uint64_t v16 = *(char **)a3;
    return sub_2161102F4(a4, a5, v16, v9);
  }
  return result;
}

uint64_t sub_2161154A0@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  sub_216111170();

  return sub_2161201B4(a1, a2);
}

void sub_216115510(uint64_t a1@<X0>, unsigned int **a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2161159A0((void **)a3, a2[1] - *a2);
  uint64_t v6 = *a2;
  int v7 = a2[1];
  if (*a2 != v7)
  {
    int v8 = a3 + 2;
    int32x2_t v9 = a3[1];
    do
    {
      uint64_t v10 = *(unsigned int *)(a1 + 20);
      unint64_t v11 = *(void *)a1 + 4 * *v6 * (unint64_t)v10;
      if ((unint64_t)v9 >= *v8)
      {
        uint64_t v12 = (v9 - *a3) >> 5;
        if ((unint64_t)(v12 + 1) >> 59) {
          sub_21610CB04();
        }
        uint64_t v13 = *v8 - (void)*a3;
        uint64_t v14 = v13 >> 4;
        if (v13 >> 4 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)sub_216115A58((uint64_t)(a3 + 2), v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v16[32 * v12];
        *(void *)uint64_t v17 = v11;
        *((void *)v17 + 1) = v10;
        *((_DWORD *)v17 + 4) = 1;
        *((_DWORD *)v17 + 5) = v10;
        *((_DWORD *)v17 + 6) = 1;
        size_t v19 = *a3;
        uint64_t v18 = a3[1];
        uint64_t v20 = v17;
        if (v18 != *a3)
        {
          do
          {
            long long v21 = *((_OWORD *)v18 - 2);
            *(_OWORD *)(v20 - 20) = *(_OWORD *)(v18 - 20);
            *((_OWORD *)v20 - 2) = v21;
            v20 -= 32;
            v18 -= 32;
          }
          while (v18 != v19);
          uint64_t v18 = v19;
        }
        int32x2_t v9 = v17 + 32;
        *a3 = v20;
        a3[1] = v17 + 32;
        a3[2] = &v16[32 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)int32x2_t v9 = v11;
        *((void *)v9 + 1) = v10;
        *((_DWORD *)v9 + 4) = 1;
        *((_DWORD *)v9 + 5) = v10;
        *((_DWORD *)v9 + 6) = 1;
        v9 += 32;
      }
      a3[1] = v9;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_21611568C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161156B0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_21612030C(a1, a2);
  sub_2161111EC();
  sub_216110AE4(*(unsigned int *)(a3 + 144), *(_DWORD *)(a3 + 148), *(void *)(a1 + 32), *(float32x4_t **)(a3 + 128));

  return sub_2161201B4((unsigned int *)a3, a4);
}

void sub_216115734(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  uint64_t v9 = a3 + 32;
  uint64_t v10 = a3 + 184;
  sub_2161102F4((void *)v8, *(_DWORD *)(a2 + 20), *(char **)a2, *(char **)(a3 + 32));
  unsigned int v11 = *(_DWORD *)(v9 + 16);
  unsigned int v12 = *(_DWORD *)(v9 + 20);
  uint64_t v21 = *(void *)v9;
  unint64_t v22 = v12 * (unint64_t)v11;
  unsigned int v23 = v11;
  unsigned int v24 = v12;
  int v25 = 2;
  sub_216120384((unsigned __int8 *)a1, (uint64_t)&v21, v10, (uint64_t)v26);
  if (*(unsigned char *)(v9 + 264)) {
    sub_21612048C((uint64_t)v26, (float32x4_t **)(a3 + 264), (uint64_t)&v21);
  }
  int v20 = v7;
  if (v7)
  {
    int v13 = 0;
    int v14 = 0;
    do
    {
      sub_216110C20();
      v14 += 2 * v8;
      v13 += v8;
      --v7;
    }
    while (v7);
  }
  unsigned int v15 = *(_DWORD *)(a3 + 96);
  unsigned int v16 = *(_DWORD *)(a3 + 100);
  uint64_t v21 = *(void *)(a3 + 80);
  unint64_t v22 = v16 * (unint64_t)v15;
  unsigned int v23 = v15;
  unsigned int v24 = v16;
  int v25 = 2;
  sub_216120528((unsigned __int8 *)a1, (uint64_t)v26);
  sub_2161205E0(a1, v9, a3);
  sub_2161111EC();
  sub_216110CAC(*(_DWORD *)(a1 + 24) * v20, *(float **)(a3 + 32));
  unsigned int v17 = *(_DWORD *)(a1 + 24);
  unsigned int v18 = *(_DWORD *)(a2 + 20);
  *(void *)a4 = *(void *)(a3 + 32);
  *(void *)(a4 + 8) = v18 * (unint64_t)v17;
  *(_DWORD *)(a4 + 16) = v17;
  *(_DWORD *)(a4 + 20) = v18;
  *(_DWORD *)(a4 + 24) = 2;
}

uint64_t sub_2161158DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  *(void *)a3 = *(void *)a2;
  *(void *)(a3 + 8) = v4 * (unint64_t)v5;
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  *(_DWORD *)(a3 + 24) = 2;
  uint64_t result = sub_2161111EC();
  if (*(_DWORD *)(a1 + 20))
  {
    int v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = sub_216110AB8();
      ++v8;
      v7 += v4;
    }
    while (v8 < *(unsigned int *)(a1 + 20));
  }
  return result;
}

void sub_2161159A0(void **a1, unint64_t a2)
{
  unsigned int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21610CB04();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_216115A58(v3, a2);
    int v7 = &v6[v5];
    uint64_t v9 = &v6[32 * v8];
    unsigned int v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 20) = *(_OWORD *)(v10 - 20);
        *((_OWORD *)v12 - 2) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_216115A58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_2160FFA74();
  }
  return operator new(32 * a2);
}

void sub_216115A90(int *a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, int32x4_t *a9, int *a10, uint64_t a11, int *a12, uint64_t a13, int *a14, unsigned char *a15, int *a16, uint64_t a17, int *a18, int16x4_t *a19, uint64_t a20)
{
  *(void *)&v172[4] = *MEMORY[0x263EF8340];
  int v26 = *a1;
  __int32 v27 = a1[1];
  int v28 = a1[2];
  sub_216116CD4((uint64_t)&v170, 4, a2, 1);
  sub_216116CD4((uint64_t)&v167, 4, a4, 1);
  sub_216116CD4((uint64_t)&v165, 4, a8, 1);
  sub_216116CD4((uint64_t)&v163, 4, a10, 1);
  sub_216116CD4((uint64_t)&v161, 4, a12, 1);
  sub_216116CD4((uint64_t)&v159, 4, a14, 1);
  sub_216116CD4((uint64_t)v157, 4, a16, 1);
  sub_216116CD4((uint64_t)&v155, 4, a18, 1);
  int v117 = v28;
  uint64_t v29 = *a6;
  uint64_t v30 = &v171;
  if (v170 > 4) {
    uint64_t v30 = (uint64_t *)v171;
  }
  v121 = a6;
  int v119 = v26;
  if (v170 < 1)
  {
    int v32 = 1;
  }
  else
  {
    uint64_t v31 = 0;
    int v32 = 1;
    do
    {
      if (v31 == 12) {
        int v33 = 1;
      }
      else {
        int v33 = *(_DWORD *)((char *)v30 + v31);
      }
      v32 *= v33;
      v31 += 4;
    }
    while (4 * v170 != v31);
    if (v170 >= 5)
    {
      uint64_t v34 = a5;
      int v35 = (int *)(v171 + 12);
      goto LABEL_13;
    }
  }
  uint64_t v34 = a5;
  int v35 = (int *)v172;
LABEL_13:
  int v36 = *v35;
  if (v167 <= 4) {
    int v37 = &v169;
  }
  else {
    int v37 = (int *)(v168 + 12);
  }
  int v38 = *v37;
  if ((int)v29 <= 4) {
    uint64_t v39 = v29 - 2;
  }
  else {
    uint64_t v39 = (v29 - 2);
  }
  sub_216116724(&v153, &v161);
  sub_216116724(&v151, &v159);
  int v40 = sub_2161167A8((uint64_t)&v163, 3, (uint64_t)&v167, 3, (uint64_t)&v153, 3, &v151);
  if (v151 >= 5 && v152) {
    MEMORY[0x2166CA7C0](v152, 0x1000C8052888210);
  }
  __int32 v115 = v27;
  if (v153 >= 5 && v154) {
    MEMORY[0x2166CA7C0](v154, 0x1000C8052888210);
  }
  int v110 = v38 + v36;
  float v45 = v121 + 2;
  int v46 = &v156;
  if (v155 > 4) {
    int v46 = v156;
  }
  if (v155 < 1)
  {
    int v48 = 1;
  }
  else
  {
    uint64_t v47 = 0;
    int v48 = 1;
    do
    {
      if (v47 == 12) {
        int v49 = 1;
      }
      else {
        int v49 = *(_DWORD *)((char *)v46 + v47);
      }
      v48 *= v49;
      v47 += 4;
    }
    while (4 * v155 != v47);
  }
  uint64_t v113 = a7;
  uint64_t v50 = 0;
  if (*v121 > 4) {
    float v45 = (int *)*((void *)v121 + 1);
  }
  int v51 = v45[v39];
  v150[0] = a3;
  v150[1] = v34;
  v149[0] = &v170;
  v149[1] = &v167;
  uint64_t v52 = 1;
  do
  {
    int v53 = (unsigned int *)(v158 + v50 * 4);
    if ((int)v157[0] <= 4) {
      int v53 = &v157[v50 + 2];
    }
    v52 *= (int)*v53;
    ++v50;
  }
  while (v50 != 3);
  int v111 = v40;
  int v112 = v32;
  int v109 = v51;
  if ((int)v157[0] < 5)
  {
    int v56 = 1;
  }
  else
  {
    uint64_t v54 = v157[0] - 4;
    int v55 = (int *)(v158 + 16);
    int v56 = 1;
    do
    {
      int v57 = *v55++;
      v56 *= v57;
      --v54;
    }
    while (v54);
  }
  if (v52 >= 1)
  {
    uint64_t v58 = 0;
    uint64_t v59 = (char *)a17;
    do
    {
      for (uint64_t i = 0; i != 2; ++i)
      {
        uint64_t v61 = v149[i];
        if (*(int *)v61 < 5) {
          uint64_t v62 = (_DWORD *)(v61 + 20);
        }
        else {
          uint64_t v62 = (_DWORD *)(*(void *)(v61 + 8) + 12);
        }
        int v63 = *v62 * v56;
        memcpy(v59, (const void *)(v150[i] + v63 * (uint64_t)(int)v58), v63);
        v59 += v63;
      }
      ++v58;
    }
    while (v58 != v52);
  }
  if (v48 != 1 || (v109 & 3) != 0 || (v110 & 7) != 0)
  {
    uint64_t v143 = v113;
    int v144 = v109;
    int v145 = v110;
    int v146 = v110;
    uint64_t v139 = a17;
    int v140 = v110;
    int v141 = v48;
    int v142 = v110;
    float v64 = a19;
    v135 = a19;
    int v136 = v109;
    int v137 = v48;
    int v138 = v109;
    v130 = a9;
    int v131 = v109;
    __int32 v132 = v115;
    int v133 = v117;
    int v134 = 0;
    v148[0] = -v119;
    v148[1] = v109;
    v147[0] = -128;
    v147[1] = v48;
    sub_216116DB4(a20, (int32x2_t *)&v143, (int32x2_t *)&v139, (uint64_t)&v135, v148, v147, (uint64_t)&v130);
    int v65 = v32;
    int v66 = v111;
  }
  else
  {
    float v64 = a19;
    sub_216116854(v157, a17, v121, v113, v119, v41, v42, v43, (uint64_t)&v165, a9, v115, v117, (uint64_t)&v155, a19);
    int v65 = v32;
    int v66 = v111;
  }
  if (v65 >= 1)
  {
    int v67 = 0;
    uint64_t v68 = 3 * v66;
    int v116 = v66 - 8;
    __dst = v64;
    long long v69 = (char *)v64 + 4 * v66;
    long long v70 = (char *)v64 + 2 * v66;
    uint64_t v114 = v68;
    do
    {
      __dst = (int16x4_t *)((char *)__dst + 2 * v68);
      if (v66 >= 8)
      {
        int v72 = v67;
        uint64_t v71 = 0;
        unint64_t v73 = 0;
        do
        {
          *(double *)v74.i64 = sub_216116AD8(*(int16x8_t *)v64[v73 / 8].i8);
          int16x8_t v124 = v74;
          *(double *)v75.i64 = sub_216116B74(*(int16x8_t *)&v70[v73]);
          int16x8_t v122 = v75;
          *(double *)v76.i64 = sub_216116AD8(*(int16x8_t *)&v69[v73]);
          int16x8_t v120 = v76;
          *(double *)v77.i64 = sub_216116AD8(*(int16x8_t *)__dst[v73 / 8].i8);
          int16x8_t v118 = v77;
          int16x8_t v78 = vqrdmulhq_s16(v124, v122);
          int16x8_t v125 = vqaddq_s16(vrshrq_n_s16(vqaddq_s16(v78, vcltzq_s16(v78)), 4uLL), vqrdmulhq_s16(v120, *(int16x8_t *)(a11 + v73)));
          *(double *)v79.i64 = sub_216116B74(vqshlq_n_s16(v125, 1uLL));
          int16x8_t v80 = vqrdmulhq_s16(v118, v79);
          *(int16x8_t *)(a13 + v73) = v125;
          *(int8x8_t *)&a15[v71] = veor_s8(vqmovn_s16(vrshrq_n_s16(vqaddq_s16(v80, vcltzq_s16(v80)), 8uLL)), (int8x8_t)0x8080808080808080);
          v73 += 16;
          v71 += 8;
        }
        while ((int)v71 <= v116);
        float v64 = (int16x4_t *)((char *)v64 + v73);
        v70 += v73;
        v69 += v73;
        __dst = (int16x4_t *)((char *)__dst + v73);
        a11 += v73;
        a13 += v73;
        a15 += v71;
        int v67 = v72;
      }
      else
      {
        LODWORD(v71) = 0;
      }
      int v81 = v66 - v71;
      if (v66 > (int)v71)
      {
        int v123 = v67;
        v126 = v64;
        unint64_t v82 = 0;
        do
        {
          unsigned __int16 v83 = sub_216116C10(v126->u16[v82 / 2]);
          unsigned __int16 v84 = sub_216116C84(*(_WORD *)&v70[v82]);
          unsigned __int16 v85 = sub_216116C10(*(unsigned __int16 *)&v69[v82]);
          unsigned __int16 v86 = sub_216116C10(__dst->u16[v82 / 2]);
          if (v83 == 0x8000 && v84 == 0x8000)
          {
            unsigned int v87 = 0x7FFF;
          }
          else
          {
            int v88 = (__int16)v84 * (__int16)v83;
            if (v88 < 0) {
              int v89 = -16383;
            }
            else {
              int v89 = 0x4000;
            }
            BOOL v90 = __OFADD__(v89, v88);
            int v91 = v89 + v88;
            if (v91 < 0 != v90) {
              v91 += 0x7FFF;
            }
            unsigned int v87 = v91 >> 15;
          }
          int v92 = *(unsigned __int16 *)(a11 + v82);
          if (v85 == 0x8000 && v92 == 0x8000)
          {
            LOWORD(v93) = 0x7FFF;
          }
          else
          {
            int v94 = (__int16)v92 * (__int16)v85;
            if (v94 < 0) {
              int v95 = -16383;
            }
            else {
              int v95 = 0x4000;
            }
            BOOL v90 = __OFADD__(v95, v94);
            int v96 = v95 + v94;
            if (v96 < 0 != v90) {
              v96 += 0x7FFF;
            }
            int v93 = v96 >> 15;
          }
          if ((v87 & 0xF) <= ((v87 >> 15) & 1) + 7) {
            __int16 v97 = (__int16)v87 >> 4;
          }
          else {
            __int16 v97 = ((__int16)v87 >> 4) + 1;
          }
          int v98 = v97 + (__int16)v93;
          if (v98 >= 0x7FFF) {
            int v98 = 0x7FFF;
          }
          if (v98 <= -32768) {
            int v99 = -32768;
          }
          else {
            int v99 = v98;
          }
          uint64_t v100 = 2 * (__int16)v99;
          if (v100 >= 0x7FFF) {
            uint64_t v100 = 0x7FFFLL;
          }
          if (v100 <= -32768) {
            LOWORD(v100) = 0x8000;
          }
          if (v99 >= 0x4000) {
            LOWORD(v100) = 0x7FFF;
          }
          if (v99 <= -16384) {
            __int16 v101 = 0x8000;
          }
          else {
            __int16 v101 = v100;
          }
          unsigned __int16 v102 = sub_216116C84(v101);
          if (v86 == 0x8000 && v102 == 0x8000)
          {
            unsigned int v103 = 0x7FFF;
          }
          else
          {
            int v104 = (__int16)v102 * (__int16)v86;
            if (v104 < 0) {
              int v105 = -16383;
            }
            else {
              int v105 = 0x4000;
            }
            BOOL v90 = __OFADD__(v105, v104);
            int v106 = v105 + v104;
            if (v106 < 0 != v90) {
              v106 += 0x7FFF;
            }
            unsigned int v103 = v106 >> 15;
          }
          *(_WORD *)(a13 + v82) = v99;
          BOOL v107 = ((v103 >> 15) & 1) + 127 >= v103;
          int v108 = (__int16)v103 >> 8;
          if (!v107) {
            ++v108;
          }
          if (v108 >= 127) {
            int v108 = 127;
          }
          if (v108 <= -128) {
            LOBYTE(v108) = 0x80;
          }
          *a15++ = v108 ^ 0x80;
          v82 += 2;
          --v81;
        }
        while (v81);
        v70 += v82;
        v69 += v82;
        __dst = (int16x4_t *)((char *)__dst + v82);
        a11 += v82;
        a13 += v82;
        float v64 = (int16x4_t *)((char *)v126 + v82);
        int v65 = v112;
        int v66 = v111;
        int v67 = v123;
      }
      uint64_t v68 = v114;
      float v64 = (int16x4_t *)((char *)v64 + 2 * v114);
      v70 += 2 * v114;
      ++v67;
      v69 += 2 * v114;
    }
    while (v67 != v65);
  }
  if (v155 >= 5 && v156) {
    MEMORY[0x2166CA7C0](v156, 0x1000C8052888210);
  }
  if ((int)v157[0] >= 5 && v158) {
    MEMORY[0x2166CA7C0](v158, 0x1000C8052888210);
  }
  if (v159 >= 5 && v160) {
    MEMORY[0x2166CA7C0](v160, 0x1000C8052888210);
  }
  if (v161 >= 5 && v162) {
    MEMORY[0x2166CA7C0](v162, 0x1000C8052888210);
  }
  if (v163 >= 5 && v164) {
    MEMORY[0x2166CA7C0](v164, 0x1000C8052888210);
  }
  if (v165 >= 5 && v166) {
    MEMORY[0x2166CA7C0](v166, 0x1000C8052888210);
  }
  if (v167 >= 5 && v168) {
    MEMORY[0x2166CA7C0](v168, 0x1000C8052888210);
  }
  if (v170 >= 5)
  {
    if (v171) {
      MEMORY[0x2166CA7C0](v171, 0x1000C8052888210);
    }
  }
}

void sub_21611647C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,uint64_t a52,uint64_t a53,int a54,uint64_t a55,uint64_t a56,int a57,uint64_t a58,uint64_t a59,int a60,uint64_t a61)
{
  if (a57 >= 5 && a58) {
    MEMORY[0x2166CA7C0](a58, 0x1000C8052888210);
  }
  if (a60 >= 5 && a61) {
    MEMORY[0x2166CA7C0](a61, 0x1000C8052888210);
  }
  if (*(int *)(v61 - 256) >= 5)
  {
    uint64_t v63 = *(void *)(v61 - 248);
    if (v63) {
      MEMORY[0x2166CA7C0](v63, 0x1000C8052888210);
    }
  }
  if (*(int *)(v61 - 232) >= 5)
  {
    uint64_t v64 = *(void *)(v61 - 224);
    if (v64) {
      MEMORY[0x2166CA7C0](v64, 0x1000C8052888210);
    }
  }
  if (*(int *)(v61 - 208) >= 5)
  {
    uint64_t v65 = *(void *)(v61 - 200);
    if (v65) {
      MEMORY[0x2166CA7C0](v65, 0x1000C8052888210);
    }
  }
  if (*(int *)(v61 - 184) >= 5)
  {
    uint64_t v66 = *(void *)(v61 - 176);
    if (v66) {
      MEMORY[0x2166CA7C0](v66, 0x1000C8052888210);
    }
  }
  if (*(int *)(v61 - 160) >= 5)
  {
    uint64_t v67 = *(void *)(v61 - 152);
    if (v67) {
      MEMORY[0x2166CA7C0](v67, 0x1000C8052888210);
    }
  }
  if (*(int *)(v61 - 136) >= 5)
  {
    uint64_t v68 = *(void *)(v61 - 128);
    if (v68) {
      MEMORY[0x2166CA7C0](v68, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216116698(_DWORD *result, int *a2, uint64_t a3)
{
  void *result = a3;
  if ((int)a3 >= 5) {
    operator new[]();
  }
  if (a3)
  {
    unsigned int v4 = result + 2;
    uint64_t v5 = 4 * a3;
    do
    {
      int v6 = *a2++;
      *v4++ = v6;
      v5 -= 4;
    }
    while (v5);
  }
  return result;
}

int *sub_216116724(int *a1, int *a2)
{
  int v3 = *a2;
  *a1 = *a2;
  if (v3 > 4) {
    operator new[]();
  }
  unsigned int v4 = a1 + 2;
  if (*a2 <= 4) {
    uint64_t v5 = a2 + 2;
  }
  else {
    uint64_t v5 = (const void *)*((void *)a2 + 1);
  }
  memcpy(v4, v5, 4 * v3);
  return a1;
}

uint64_t sub_2161167A8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_216116724(&v12, a7);
  uint64_t v9 = a1 + 8;
  if (*(int *)a1 > 4) {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  uint64_t v10 = *(unsigned int *)(v9 + 4 * a2);
  if (v12 >= 5 && v13) {
    MEMORY[0x2166CA7C0](v13, 0x1000C8052888210);
  }
  return v10;
}

unsigned int *sub_216116854(unsigned int *a1, uint64_t a2, int *a3, uint64_t a4, int a5, double a6, double a7, int32x2_t a8, uint64_t a9, int32x4_t *a10, __int32 a11, int a12, uint64_t a13, int16x4_t *a14)
{
  uint64_t v14 = *a3;
  uint64_t v15 = *a1;
  unsigned int v18 = (unsigned int *)*((void *)a1 + 1);
  uint64_t result = a1 + 2;
  unsigned int v17 = v18;
  if ((int)v15 <= 4) {
    unsigned int v17 = result;
  }
  if ((int)v15 < 1)
  {
    int v21 = 1;
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v20 = 4 * v15;
    int v21 = 1;
    do
    {
      if (v19) {
        int v22 = v17[v19 / 4];
      }
      else {
        int v22 = 1;
      }
      v21 *= v22;
      v19 += 4;
    }
    while (v20 != v19);
  }
  int v25 = (int *)*((void *)a3 + 1);
  unsigned int v23 = a3 + 2;
  unsigned int v24 = v25;
  if ((int)v14 <= 4) {
    unsigned int v24 = v23;
  }
  unint64_t v26 = v24[v14 - 2];
  if ((int)v26 >= 1)
  {
    unint64_t v27 = 0;
    uint16x8_t v29 = (uint16x8_t)vdupq_n_s16(-a5);
    int32x4_t v30 = vdupq_n_s32(a12 & ~(a12 >> 31));
    a8.i32[0] = a11;
    int32x4_t v31 = vdupq_n_s32(a12 & (a12 >> 31));
    uint64_t v32 = a4 + 3 * v21;
    uint64_t v33 = 4 * v21;
    uint64_t v34 = a4 + 2 * v21;
    uint64_t v35 = a4 + v21;
    v36.i64[0] = 0x7F007F007F007FLL;
    v36.i64[1] = 0x7F007F007F007FLL;
    do
    {
      if (v21 >= 16)
      {
        uint64_t result = 0;
        int32x4_t v41 = 0uLL;
        int32x4_t v40 = 0uLL;
        int32x4_t v39 = 0uLL;
        int32x4_t v38 = 0uLL;
        do
        {
          uint8x16_t v42 = *(uint8x16_t *)((char *)result + a2);
          uint8x16_t v43 = *(uint8x16_t *)((char *)result + a4);
          uint8x16_t v44 = *(uint8x16_t *)((char *)result + v35);
          uint8x16_t v45 = *(uint8x16_t *)((char *)result + v34);
          uint8x16_t v46 = *(uint8x16_t *)((char *)result + v32);
          int16x8_t v47 = (int16x8_t)vaddw_u8(v36, *(uint8x8_t *)v42.i8);
          int16x8_t v48 = (int16x8_t)vaddw_high_u8(v36, v42);
          int16x8_t v49 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)v43.i8);
          int16x8_t v50 = (int16x8_t)vaddw_high_u8(v29, v43);
          int16x8_t v51 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)v44.i8);
          int16x8_t v52 = (int16x8_t)vaddw_high_u8(v29, v44);
          int16x8_t v53 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)v45.i8);
          int16x8_t v54 = (int16x8_t)vaddw_high_u8(v29, v45);
          int16x8_t v55 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)v46.i8);
          int16x8_t v56 = (int16x8_t)vaddw_high_u8(v29, v46);
          int32x4_t v41 = vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(v41, *(int16x4_t *)v49.i8, *(int16x4_t *)v47.i8), v49, v47), *(int16x4_t *)v50.i8, *(int16x4_t *)v48.i8), v50, v48);
          int32x4_t v40 = vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(v40, *(int16x4_t *)v51.i8, *(int16x4_t *)v47.i8), v51, v47), *(int16x4_t *)v52.i8, *(int16x4_t *)v48.i8), v52, v48);
          int32x4_t v39 = vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(v39, *(int16x4_t *)v53.i8, *(int16x4_t *)v47.i8), v53, v47), *(int16x4_t *)v54.i8, *(int16x4_t *)v48.i8), v54, v48);
          int32x4_t v38 = vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(v38, *(int16x4_t *)v55.i8, *(int16x4_t *)v47.i8), v55, v47), *(int16x4_t *)v56.i8, *(int16x4_t *)v48.i8), v56, v48);
          result += 4;
        }
        while ((uint64_t)result <= v21 - 16);
        unsigned int v37 = ((v21 - 16) & 0xFFFFFFF0) + 16;
      }
      else
      {
        unsigned int v37 = 0;
        int32x4_t v38 = 0uLL;
        int32x4_t v39 = 0uLL;
        int32x4_t v40 = 0uLL;
        int32x4_t v41 = 0uLL;
      }
      if ((int)v37 < v21)
      {
        uint64_t result = 0;
        uint64_t v57 = a4;
        uint64_t v58 = v35;
        uint64_t v59 = v34;
        uint64_t v60 = v32;
        uint64_t v61 = a2;
        do
        {
          int16x8_t v62 = (int16x8_t)vaddw_u8(v36, *(uint8x8_t *)(v61 + v37));
          int16x8_t v63 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)(v57 + v37));
          int16x8_t v64 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)(v58 + v37));
          int16x8_t v65 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)(v59 + v37));
          int16x8_t v66 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)(v60 + v37));
          int32x4_t v41 = vmlal_high_s16(vmlal_s16(v41, *(int16x4_t *)v63.i8, *(int16x4_t *)v62.i8), v63, v62);
          int32x4_t v40 = vmlal_high_s16(vmlal_s16(v40, *(int16x4_t *)v64.i8, *(int16x4_t *)v62.i8), v64, v62);
          int32x4_t v39 = vmlal_high_s16(vmlal_s16(v39, *(int16x4_t *)v65.i8, *(int16x4_t *)v62.i8), v65, v62);
          int32x4_t v38 = vmlal_high_s16(vmlal_s16(v38, *(int16x4_t *)v66.i8, *(int16x4_t *)v62.i8), v66, v62);
          v61 += 8;
          v60 += 8;
          v59 += 8;
          v58 += 8;
          v57 += 8;
          result += 2;
        }
        while (v21 > (int)(v37 + result));
      }
      *(int32x2_t *)v67.i8 = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v41, v41), (int32x2_t)*(_OWORD *)&vpaddq_s32(v40, v40));
      v67.u64[1] = (unint64_t)vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v39, v39), (int32x2_t)*(_OWORD *)&vpaddq_s32(v38, v38));
      int32x4_t v68 = *a10++;
      int32x4_t v69 = vqrdmulhq_lane_s32(vshlq_s32(vaddq_s32(v67, v68), v30), a8, 0);
      *a14++ = vqmovn_s32(vrshlq_s32(vqaddq_s32(v69, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v69, (int8x16_t)v31))), v31));
      v27 += 4;
      v32 += v33;
      v34 += v33;
      v35 += v33;
      a4 += v33;
    }
    while (v27 < v26);
  }
  return result;
}

double sub_216116AD8(int16x8_t a1)
{
  int8x16_t v13 = (int8x16_t)vcgtzq_s16(a1);
  *(double *)v1.i64 = sub_21611BEC8(vnegq_s16((int16x8_t)vbslq_s8(v13, (int8x16_t)a1, (int8x16_t)vnegq_s16(a1))));
  v2.i64[0] = 0x8000800080008000;
  v2.i64[1] = 0x8000800080008000;
  int16x8_t v3 = vrhaddq_s16(v1, v2);
  v4.i64[0] = 0x5A5A5A5A5A5A5A5ALL;
  v4.i64[1] = 0x5A5A5A5A5A5A5A5ALL;
  int16x8_t v5 = vaddq_s16(vqrdmulhq_s16(v3, vdupq_n_s16(0xC3C4u)), v4);
  int v6 = 3;
  v7.i64[0] = 0x2000200020002000;
  v7.i64[1] = 0x2000200020002000;
  do
  {
    int16x8_t v5 = vaddq_s16(vqshlq_n_s16(vqrdmulhq_s16(v5, vsubq_s16(v7, vqrdmulhq_s16(v3, v5))), 2uLL), v5);
    --v6;
  }
  while (v6);
  int8x16_t v8 = (int8x16_t)vqshlq_n_s16(v5, 1uLL);
  v9.i64[0] = 0x8000800080008000;
  v9.i64[1] = 0x8000800080008000;
  int8x16_t v10 = vorrq_s8(vbicq_s8(veorq_s8(v8, v9), v13), vandq_s8(v8, v13));
  v9.i64[0] = 0x4000400040004000;
  v9.i64[1] = 0x4000400040004000;
  *(void *)&double result = vbslq_s8((int8x16_t)vceqzq_s16(a1), v9, v10).u64[0];
  return result;
}

double sub_216116B74(int16x8_t a1)
{
  int8x16_t v11 = (int8x16_t)vcltzq_s16(a1);
  *(double *)v1.i64 = sub_21611BFC0((int16x8_t)vbslq_s8(v11, (int8x16_t)a1, (int8x16_t)vnegq_s16(a1)));
  v2.i64[0] = 0x8000800080008000;
  v2.i64[1] = 0x8000800080008000;
  int16x8_t v3 = vrhaddq_s16(v1, v2);
  v4.i64[0] = 0x5A5A5A5A5A5A5A5ALL;
  v4.i64[1] = 0x5A5A5A5A5A5A5A5ALL;
  int16x8_t v5 = vaddq_s16(vqrdmulhq_s16(v3, vdupq_n_s16(0xC3C4u)), v4);
  int v6 = 3;
  v7.i64[0] = 0x2000200020002000;
  v7.i64[1] = 0x2000200020002000;
  do
  {
    int16x8_t v5 = vaddq_s16(vqshlq_n_s16(vqrdmulhq_s16(v5, vsubq_s16(v7, vqrdmulhq_s16(v3, v5))), 2uLL), v5);
    --v6;
  }
  while (v6);
  v8.i64[0] = 0xE000E000E000E000;
  v8.i64[1] = 0xE000E000E000E000;
  int16x8_t v9 = vqshlq_n_s16(vaddq_s16(v5, v8), 2uLL);
  *(void *)&double result = vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)vcgezq_s16(a1), (int8x16_t)v9), vandq_s8(v11, (int8x16_t)vnegq_s16(v9))), (int8x16_t)vceqzq_s16(a1)).u64[0];
  return result;
}

uint64_t sub_216116C10(int a1)
{
  __int16 v1 = a1;
  int v2 = (__int16)a1;
  if ((__int16)a1 <= 0) {
    int v3 = 0;
  }
  else {
    int v3 = -1;
  }
  if ((__int16)a1 <= 0) {
    int v4 = -a1;
  }
  else {
    LOWORD(v4) = 0;
  }
  unsigned __int16 v5 = sub_21611C220(-(v3 & a1 | v4));
  int v6 = sub_21611C0D0(v5);
  int v7 = v6 ^ 0x7FFF;
  if (v2 > 0) {
    int v7 = 0;
  }
  unsigned int v8 = v7 | v6 & v3;
  if (v1) {
    return v8;
  }
  else {
    return 0x4000;
  }
}

uint64_t sub_216116C84(__int16 a1)
{
  int v2 = a1;
  unsigned __int16 v3 = sub_21611C57C((a1 >> 15) - (a1 ^ (unsigned __int16)(a1 >> 15)));
  unsigned int v4 = sub_21611C428(v3);
  if (v2 >= 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = -v4;
  }
  if (a1) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_216116CD4(uint64_t a1, int a2, int *a3, int a4)
{
  *(_DWORD *)a1 = a2;
  if (a2 >= 5) {
    operator new[]();
  }
  int v5 = a2 - *a3;
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (*(int *)a1 < 5) {
        unsigned int v8 = (_DWORD *)(a1 + v6 + 8);
      }
      else {
        unsigned int v8 = (_DWORD *)(*(void *)(a1 + 8) + 4 * v7);
      }
      *unsigned int v8 = a4;
      ++v7;
      v6 += 4;
    }
    while (4 * v5 != v6);
  }
  int16x8_t v9 = (void *)(a1 + 8);
  if (*(int *)a1 >= 5) {
    int16x8_t v9 = (void *)*v9;
  }
  int8x16_t v10 = (char *)v9 + 4 * v5;
  uint64_t v11 = *a3;
  if (v11 <= 4) {
    int v12 = a3 + 2;
  }
  else {
    int v12 = (const void *)*((void *)a3 + 1);
  }
  memcpy(v10, v12, 4 * v11);
  return a1;
}

void sub_216116DB4(uint64_t a1, int32x2_t *a2, int32x2_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a4 + 8);
  int v8 = *(_DWORD *)(a4 + 12);
  __int32 v9 = a2[1].i32[1];
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v9 != 0)
  {
    if (v7 >= v8)
    {
      uint64_t v20 = &unk_26C6C71E0;
      sub_216116FD4(a1, (unint64_t)&v20, (uint64_t)a2, a3, a4, a5, a6, a7);
    }
    else
    {
      int v12 = *(_DWORD *)(a4 + 16);
      uint64_t v32 = *(void *)a4;
      int v33 = v8;
      int v34 = v7;
      int v35 = v12;
      __int32 v13 = a3[2].i32[0];
      v30[0] = *a3;
      v30[1] = vrev64_s32(a3[1]);
      __int32 v31 = v13;
      __int32 v14 = a2[1].i32[0];
      __int32 v15 = a2[2].i32[0];
      int32x2_t v26 = *a2;
      __int32 v27 = v9;
      __int32 v28 = v14;
      __int32 v29 = v15;
      uint64_t v16 = *(void *)a6;
      uint64_t v24 = *(void *)a5;
      uint64_t v25 = v16;
      int v17 = *(_DWORD *)(a7 + 8);
      uint64_t v18 = *(void *)(a7 + 16);
      int v19 = *(_DWORD *)(a7 + 24);
      uint64_t v20 = *(void **)a7;
      int v21 = v17;
      uint64_t v22 = v18;
      int v23 = v19;
      sub_216116EC4(a1, (uint64_t)v30, &v26, (uint64_t)&v32, &v25, &v24, (uint64_t)&v20);
    }
  }
}

void sub_216116EC4(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a4 + 8);
  int v8 = *(_DWORD *)(a4 + 12);
  int v9 = *(_DWORD *)(a2 + 12);
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v9 != 0)
  {
    if (v7 >= v8)
    {
      uint64_t v20 = &unk_26C6C71E0;
      sub_216117448(a1, (unint64_t)&v20, a2, a3, a4, a5, a6, a7);
    }
    else
    {
      int v12 = *(_DWORD *)(a4 + 16);
      uint64_t v32 = *(void *)a4;
      int v33 = v8;
      int v34 = v7;
      int v35 = v12;
      __int32 v13 = a3[2].i32[0];
      v30[0] = *a3;
      v30[1] = vrev64_s32(a3[1]);
      __int32 v31 = v13;
      int v14 = *(_DWORD *)(a2 + 8);
      int v15 = *(_DWORD *)(a2 + 16);
      uint64_t v26 = *(void *)a2;
      int v27 = v9;
      int v28 = v14;
      int v29 = v15;
      uint64_t v16 = *(void *)a6;
      uint64_t v24 = *(void *)a5;
      uint64_t v25 = v16;
      int v17 = *(_DWORD *)(a7 + 8);
      uint64_t v18 = *(void *)(a7 + 16);
      int v19 = *(_DWORD *)(a7 + 24);
      uint64_t v20 = *(void **)a7;
      int v21 = v17;
      uint64_t v22 = v18;
      int v23 = v19;
      sub_216116DB4(a1, v30, &v26, &v32, &v25, &v24, &v20);
    }
  }
}

void sub_216116FD4(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a1 + 100);
  if (v10 == 1) {
    goto LABEL_17;
  }
  uint64_t v12 = *(int *)(a5 + 8);
  int v11 = *(_DWORD *)(a5 + 12);
  int v28 = *(_DWORD *)(a3 + 12);
  if (!v10)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797B340, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797B340))
    {
      dword_26797B338 = sysconf(57);
      __cxa_guard_release(&qword_26797B340);
    }
    int v10 = dword_26797B338;
  }
  int v13 = v12 + 15;
  if ((int)v12 + 15 < 0) {
    int v13 = v12 + 30;
  }
  int v14 = v13 >> 4;
  if (v14 >= v10) {
    int v15 = v10;
  }
  else {
    int v15 = v14;
  }
  if (v15 >= 2)
  {
    unint64_t v16 = (unint64_t)(v11 * (uint64_t)(int)v12 * v28) >> 16;
    if (v15 < (int)v16) {
      LODWORD(v16) = v15;
    }
    if ((int)v16 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = v16;
    }
  }
  if (v15 == 1)
  {
LABEL_17:
    sub_21611A934(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    sub_216117B94(v31, v12, v11, v28, v15, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
    sub_216119F50((uint64_t)&v30, 1, (void *)a1, v31);
    sub_216117C60(a1);
    if (v11 >= 1)
    {
      int v17 = 0;
      int v21 = v11;
      signed int v18 = v32;
      do
      {
        __int32 v19 = a4[2].i32[0];
        int v29 = v17;
        uint64_t v20 = (uint64_t *)(*(void *)a4 + v19 * v17);
        if (v11 - v17 < v18) {
          signed int v18 = v11 - v17;
        }
        int v35 = (uint64_t *)__PAIR64__(v28, v18);
        LODWORD(v36) = v19;
        v33[0] = (uint64_t)&v30;
        v33[1] = (uint64_t)&v34;
        int v34 = v20;
        sub_216118644(v33);
        int v34 = 0;
        int v35 = 0;
        uint64_t v36 = 0;
        if (v15 >= 1) {
          operator new();
        }
        sub_216117D08((void *)(a1 + 104), &v34);
        int v11 = v21;
        if (v34)
        {
          int v35 = v34;
          operator delete(v34);
        }
        signed int v18 = v32;
        v17 += v32;
      }
      while (v32 + v29 < v21);
    }
    *(unsigned char *)a1 = 0;
    ++*(void *)(a1 + 80);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
}

void sub_2161173FC(_Unwind_Exception *a1)
{
}

void sub_216117448(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a1 + 100);
  if (v10 == 1) {
    goto LABEL_17;
  }
  uint64_t v12 = *(int *)(a5 + 8);
  int v11 = *(_DWORD *)(a5 + 12);
  int v28 = *(_DWORD *)(a3 + 12);
  if (!v10)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797B340, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797B340))
    {
      dword_26797B338 = sysconf(57);
      __cxa_guard_release(&qword_26797B340);
    }
    int v10 = dword_26797B338;
  }
  int v13 = v12 + 15;
  if ((int)v12 + 15 < 0) {
    int v13 = v12 + 30;
  }
  int v14 = v13 >> 4;
  if (v14 >= v10) {
    int v15 = v10;
  }
  else {
    int v15 = v14;
  }
  if (v15 >= 2)
  {
    unint64_t v16 = (unint64_t)(v11 * (uint64_t)(int)v12 * v28) >> 16;
    if (v15 < (int)v16) {
      LODWORD(v16) = v15;
    }
    if ((int)v16 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = v16;
    }
  }
  if (v15 == 1)
  {
LABEL_17:
    sub_2161178B8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    sub_216117B94(v31, v12, v11, v28, v15, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
    sub_216119F50((uint64_t)&v30, 1, (void *)a1, v31);
    sub_216117C60(a1);
    if (v11 >= 1)
    {
      int v17 = 0;
      int v21 = v11;
      signed int v18 = v32;
      do
      {
        __int32 v19 = a4[2].i32[0];
        int v29 = v17;
        uint64_t v20 = (uint64_t *)(*(void *)a4 + v19 * v17);
        if (v11 - v17 < v18) {
          signed int v18 = v11 - v17;
        }
        int v35 = (uint64_t *)__PAIR64__(v28, v18);
        LODWORD(v36) = v19;
        v33[0] = (uint64_t)&v30;
        v33[1] = (uint64_t)&v34;
        int v34 = v20;
        sub_216118644(v33);
        int v34 = 0;
        int v35 = 0;
        uint64_t v36 = 0;
        if (v15 >= 1) {
          operator new();
        }
        sub_216117D08((void *)(a1 + 104), &v34);
        int v11 = v21;
        if (v34)
        {
          int v35 = v34;
          operator delete(v34);
        }
        signed int v18 = v32;
        v17 += v32;
      }
      while (v32 + v29 < v21);
    }
    *(unsigned char *)a1 = 0;
    ++*(void *)(a1 + 80);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
}

void sub_216117870(_Unwind_Exception *a1)
{
}

void sub_2161178B8(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a5 + 8);
  int v11 = *(_DWORD *)(a5 + 12);
  int v13 = *(_DWORD *)(a3 + 12);
  sub_216117B94(v52, v10, v11, v13, 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
  sub_216119F50((uint64_t)v49, 0, (void *)a1, v52);
  sub_216119F50((uint64_t)v46, 1, (void *)a1, v52);
  uint64_t v41 = a1;
  uint8x16_t v45 = v52;
  unint64_t v14 = (4 * v54 * v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 8 * v15 + 40) = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 80);
  int v32 = (void *)(a1 + 24);
  uint64_t v33 = a1;
  ++*(void *)(a1 + 24);
  *(void *)(a1 + 32) += v14;
  char v42 = v15;
  uint64_t v43 = v16;
  char v44 = 5;
  sub_216117C60(a1);
  int v17 = v54;
  if (v54 >= v11)
  {
    unint64_t v18 = (unint64_t)*a4;
    __int32 v19 = a4[2].i32[0];
    uint64_t v58 = (unsigned int *)vrev64_s32(a4[1]);
    LODWORD(v59) = v19;
    int16x8_t v55 = v46;
    int16x8_t v56 = &v57;
    unint64_t v57 = v18;
    sub_216118644((uint64_t *)&v55);
  }
  if (v10 >= 1)
  {
    int v20 = 0;
    int v21 = v53;
    int v34 = v10;
    do
    {
      int v22 = *(_DWORD *)(a3 + 16);
      unint64_t v23 = *(void *)a3 + v22 * v20;
      if (v10 - v20 >= v21) {
        unsigned int v24 = v21;
      }
      else {
        unsigned int v24 = v10 - v20;
      }
      uint64_t v58 = (unsigned int *)__PAIR64__(v13, v24);
      LODWORD(v59) = v22;
      int16x8_t v55 = v49;
      int16x8_t v56 = &v57;
      unint64_t v57 = v23;
      sub_216118644((uint64_t *)&v55);
      if (v11 >= 1)
      {
        int v25 = 0;
        int v26 = v54;
        do
        {
          if (v11 - v25 >= v26) {
            int v27 = v26;
          }
          else {
            int v27 = v11 - v25;
          }
          if (v17 < v11)
          {
            __int32 v28 = a4[2].i32[0];
            unint64_t v29 = *(void *)a4 + v28 * v25;
            uint64_t v58 = (unsigned int *)__PAIR64__(v13, v27);
            LODWORD(v59) = v28;
            int16x8_t v55 = v46;
            int16x8_t v56 = &v57;
            unint64_t v57 = v29;
            sub_216118644((uint64_t *)&v55);
          }
          unint64_t v57 = a2;
          uint64_t v58 = v52;
          uint64_t v59 = &v41;
          uint64_t v60 = v49;
          uint64_t v61 = v46;
          sub_216118BC4((uint64_t)&v57, v13);
          unint64_t v57 = __PAIR64__(v25, v20);
          uint64_t v58 = (unsigned int *)__PAIR64__(v27, v24);
          uint64_t v30 = *(void *)(v50 + 8 * v51 + 40) + *(void *)(v50 + 16);
          uint64_t v31 = *(void *)(v47 + 8 * v48 + 40) + *(void *)(v47 + 16);
          LODWORD(v55) = *a6;
          HIDWORD(v55) = v24;
          v40[0] = *a7;
          v40[1] = v27;
          sub_216117DF4(a5, (int *)&v57, (uint64_t)&v41, v13, v30, v31, (int *)&v55, v40, a8);
          int v26 = v54;
          v25 += v54;
        }
        while (v25 < v11);
      }
      int v21 = v53;
      v20 += v53;
      int v10 = v34;
    }
    while (v20 < v34);
  }
  *(unsigned char *)uint64_t v33 = 0;
  ++*(void *)(v33 + 80);
  *int v32 = 0;
  v32[1] = 0;
}

uint64_t sub_216117B94(unsigned int *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, float a8)
{
  uint64_t result = sub_216119EA0(a2, a3, a4, a5, a7, a1 + 3, a1 + 4, (signed int *)a1 + 5, a8);
  unsigned int v11 = a1[4];
  int v12 = a6 - 64;
  if (a6 < 64) {
    int v12 = a6 - 57;
  }
  int v13 = v12 >> 3;
  if (v13 <= 1) {
    int v13 = 1;
  }
  int v14 = a1[5] - 1;
  int v15 = (v14 + v13) / v13;
  if (v15 <= 1) {
    int v15 = 1;
  }
  unsigned int v16 = ((v15 + v14) / v15 + 15) & 0xFFFFFFF0;
  int v17 = a6 / (int)(v16 + 4 * v11);
  if (v17 <= 1) {
    int v17 = 1;
  }
  int v18 = a1[3] - 1;
  int v19 = (v17 + v18) / v17;
  if (v19 <= 1) {
    int v19 = 1;
  }
  *a1 = ((v19 + v18) / v19 + 3) & 0xFFFFFFFC;
  a1[1] = v11;
  a1[2] = v16;
  return result;
}

uint64_t sub_216117C60(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 8);
  if (*(void *)(result + 32) > v2)
  {
    free(*(void **)(result + 16));
    unint64_t v3 = (*(void *)(v1 + 32) - 1) | ((unint64_t)(*(void *)(v1 + 32) - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    size_t v5 = (v4 | (v4 >> 8) | ((v4 | (v4 >> 8)) >> 16)) + 1;
    *(void *)(v1 + 8) = v5;
    memptr = 0;
    uint64_t result = malloc_type_posix_memalign(&memptr, 0x40uLL, v5, 0x56F76EAAuLL);
    uint64_t v6 = memptr;
    if (result) {
      uint64_t v6 = 0;
    }
    *(void *)(v1 + 16) = v6;
    unint64_t v2 = *(void *)(v1 + 8);
  }
  if (v2 && !*(void *)(v1 + 16)) {
    sub_21612518C();
  }
  *(unsigned char *)uint64_t v1 = 1;
  return result;
}

void sub_216117D08(void *a1, uint64_t **a2)
{
  unint64_t v4 = a2[1] - *a2 - 1;
  sub_21611A234(a1, v4);
  atomic_store(v4, a1 + 3);
  int v8 = 0;
  sub_21611A3CC(*a2, a2[1] - 1, a1, &v8);
  size_t v5 = (void *)*(a2[1] - 1);
  v5[1] = a1 + 4;
  (*(void (**)(void *))(*v5 + 16))(v5);
  sub_21611A438(a1 + 3);
  int v7 = *a2;
  uint64_t v6 = a2[1];
  while (v7 != v6)
  {
    if (*v7) {
      (*(void (**)(uint64_t))(*(void *)*v7 + 8))(*v7);
    }
    ++v7;
  }
}

void sub_216117DF4(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int *a7, _DWORD *a8, uint64_t a9)
{
  int v9 = a8;
  int v10 = a7;
  int v11 = a4;
  uint64_t v120 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)(a3 + 32);
  uint64_t v116 = *(void *)(*(void *)a3 + 8 * *(unsigned __int8 *)(a3 + 8) + 40) + *(void *)(*(void *)a3 + 16);
  uint64_t v117 = *(void *)(v14 + 12);
  int v118 = v117;
  uint64_t v114 = a5;
  int v15 = a2[3];
  int v115 = a2[2];
  uint64_t v112 = a6;
  int v113 = v15;
  int v109 = (void *)a9;
  uint64_t v110 = a9 + 16;
  int v16 = *(_DWORD *)(a9 + 20);
  LODWORD(v111) = v16 & ~(v16 >> 31);
  HIDWORD(v111) = -v16 & ~(-v16 >> 31);
  v108[0] = a9;
  v108[1] = a9 + 16;
  v108[2] = v111;
  v107[0] = a9;
  v107[1] = a9 + 16;
  v107[2] = v111;
  v106[0] = a9;
  v106[1] = a9 + 16;
  v106[2] = v111;
  v105[0] = (void *)a9;
  v105[1] = (void *)(a9 + 16);
  v105[2] = v111;
  v104[0] = (void *)a9;
  v104[1] = (void *)(a9 + 16);
  v104[2] = v111;
  int v17 = 0;
  if (v15 >= 8)
  {
    do
    {
      _X10 = v114;
      __asm { PRFM            #0, [X10] }
      _X10 = v114 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v116 + 4 * v118 * v17;
      uint64_t v27 = 8;
      do
      {
        __asm { PRFM            #0, [X8] }
        _X11 = _X8 + 16;
        __asm { PRFM            #0, [X11] }
        _X8 += 4 * v118;
        --v27;
      }
      while (v27);
      LODWORD(v31) = a2[2];
      if ((int)v31 >= 8)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        do
        {
          int v35 = *a2;
          uint64_t v32 = v34 + 8;
          _X11 = v114 + 4 * (v34 + 8);
          __asm { PRFM            #0, [X11] }
          _X11 += 16;
          __asm { PRFM            #0, [X11] }
          uint64_t v39 = v116 + v33 + 4 * v17 * v118;
          uint64_t v40 = 8;
          do
          {
            _X12 = v39 + 32;
            __asm { PRFM            #0, [X12] }
            _X12 = v39 + 48;
            __asm { PRFM            #0, [X12] }
            v39 += 4 * v118;
            --v40;
          }
          while (v40);
          unsigned int v45 = v35 + v34;
          v102[0] = v119;
          v102[1] = 0x800000008;
          int v103 = 8;
          sub_216118DAC(&v116, v104, (uint64_t)v102, &v114, &v112, v10, a8, a4, v34, v17, v35 + v34, a2[1] + v17, 0, 0);
          int v10 = a7;
          sub_216118DAC(&v116, v104, (uint64_t)v102, &v114, &v112, a7, a8, a4, v34, v17 | 4, v45, a2[1] + (v17 | 4), 0, 4);
          int v46 = a2[1];
          int v47 = *a2 + v34;
          v101[4] = v119[4];
          v101[5] = v119[5];
          v101[6] = v119[6];
          v101[7] = v119[7];
          v101[0] = v119[0];
          v101[1] = v119[1];
          v101[2] = v119[2];
          v101[3] = v119[3];
          sub_21611978C(v101, a1, v47, v46 + v17);
          uint64_t v31 = a2[2];
          v33 += 32;
          v34 += 8;
        }
        while (v32 <= v31 - 8);
        int v9 = a8;
        int v11 = a4;
      }
      else
      {
        LODWORD(v32) = 0;
      }
      for (; (int)v32 <= (int)v31 - 4; LODWORD(v31) = a2[2])
      {
        unsigned int v48 = v32 + *a2;
        sub_216118F98((uint64_t)&v116, v105, a1, &v114, &v112, v10, v9, v11, v32, v17, v48, a2[1] + v17, v48, a2[1] + v17);
        sub_216118F98((uint64_t)&v116, v105, a1, &v114, &v112, v10, v9, v11, v32, v17 | 4, v48, a2[1] + (v17 | 4), v48, a2[1] + (v17 | 4));
        LODWORD(v32) = v32 + 4;
      }
      if ((int)v32 < (int)v31)
      {
        do
        {
          int v49 = v32 + *a2;
          sub_21611910C((uint64_t)&v116, (uint64_t)v106, a1, &v114, &v112, v10, v9, v11, v32, v17, v49, a2[1] + v17, v49, a2[1] + v17);
          sub_21611910C((uint64_t)&v116, (uint64_t)v106, a1, &v114, &v112, v10, v9, v11, v32, v17 | 4, v49, a2[1] + (v17 | 4), v49, a2[1] + (v17 | 4));
          LODWORD(v32) = v32 + 1;
        }
        while ((int)v32 < a2[2]);
      }
      v17 += 8;
      int v15 = a2[3];
    }
    while (v17 <= v15 - 8);
  }
  while (v17 <= v15 - 4)
  {
    _X11 = v114;
    __asm { PRFM            #0, [X11] }
    _X11 = v114 + 16;
    __asm { PRFM            #0, [X11] }
    _X9 = v116 + 4 * v118 * v17;
    uint64_t v55 = 4;
    do
    {
      __asm { PRFM            #0, [X9] }
      _X12 = _X9 + 16;
      __asm { PRFM            #0, [X12] }
      _X9 += 4 * v118;
      --v55;
    }
    while (v55);
    int v59 = a2[1] + v17;
    LODWORD(v60) = a2[2];
    if ((int)v60 >= 8)
    {
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      do
      {
        uint64_t v61 = v63 + 8;
        _X12 = v114 + 4 * (v63 + 8);
        __asm { PRFM            #0, [X12] }
        _X12 += 16;
        __asm { PRFM            #0, [X12] }
        uint64_t v67 = v116 + v62 + 4 * v17 * v118;
        uint64_t v68 = 4;
        do
        {
          _X13 = v67 + 32;
          __asm { PRFM            #0, [X13] }
          _X13 = v67 + 48;
          __asm { PRFM            #0, [X13] }
          v67 += 4 * v118;
          --v68;
        }
        while (v68);
        sub_216119250((uint64_t)&v116, v104, a1, &v114, &v112, v10, a8, v11, v63, v17, *a2 + v63, v59, *a2 + v63, v59);
        uint64_t v60 = a2[2];
        v62 += 32;
        uint64_t v63 = v61;
      }
      while (v61 <= v60 - 8);
      int v9 = a8;
    }
    else
    {
      LODWORD(v61) = 0;
    }
    while ((int)v61 <= (int)v60 - 4)
    {
      sub_216118F98((uint64_t)&v116, v105, a1, &v114, &v112, v10, v9, v11, v61, v17, v61 + *a2, v59, v61 + *a2, v59);
      LODWORD(v61) = v61 + 4;
      LODWORD(v60) = a2[2];
    }
    if ((int)v61 < (int)v60)
    {
      do
      {
        sub_21611910C((uint64_t)&v116, (uint64_t)v106, a1, &v114, &v112, v10, v9, v11, v61, v17, v61 + *a2, v59, v61 + *a2, v59);
        LODWORD(v61) = v61 + 1;
      }
      while ((int)v61 < a2[2]);
    }
    v17 += 4;
    int v15 = a2[3];
  }
  if (v17 < v15)
  {
    uint64_t v73 = v17;
    do
    {
      int v74 = a2[1] + v73;
      _X10 = v114;
      __asm { PRFM            #0, [X10] }
      _X10 = v114 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v116 + 4 * v118 * (int)v73;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + 16;
      __asm { PRFM            #0, [X8] }
      LODWORD(_X8) = a2[2];
      if ((int)_X8 >= 8)
      {
        uint64_t v83 = 0;
        uint64_t v84 = 32;
        do
        {
          int v85 = v83;
          v83 += 8;
          _X12 = v114 + v84;
          __asm { PRFM            #0, [X12] }
          _X12 = v114 + v84 + 16;
          __asm { PRFM            #0, [X12] }
          _X10 = v116 + 4 * (int)v73 * v118 + v84;
          __asm { PRFM            #0, [X10] }
          _X10 += 16;
          __asm { PRFM            #0, [X10] }
          sub_216119458((uint64_t)&v116, (uint64_t)v107, a1, &v114, &v112, v10, a8, v11, v85, v73, v85 + *a2, v74, v85 + *a2, v74);
          _X8 = a2[2];
          v84 += 32;
        }
        while (v83 <= _X8 - 8);
      }
      else
      {
        LODWORD(v83) = 0;
      }
      if ((int)v83 <= (int)_X8 - 4)
      {
        uint64_t v93 = 4 * v83;
        do
        {
          sub_216119D40((uint64_t)v108, a1, vaddq_s32(vmlaq_s32(*(int32x4_t *)(v116 + 4 * (int)v73 * v118 + v93), vdupq_n_s32(*a8 + 128), *(int32x4_t *)(v114 + v93)), vdupq_n_s32((*(_DWORD *)(v112 + 4 * v73) + (*a8 + 128) * v11) * (*v10 + 128))), (v83 + *a2), v74, v83 + *a2, v74);
          LODWORD(_X8) = a2[2];
          LODWORD(v83) = v83 + 4;
          v93 += 16;
        }
        while ((int)_X8 - 4 >= (int)v83);
      }
      if ((int)v83 < (int)_X8)
      {
        uint64_t v94 = 4 * v83;
        do
        {
          int v95 = v83 + *a2;
          int v96 = sub_216119DFC(&v110, *(_DWORD *)(v116 + 4 * (int)v73 * v118 + v94)+ (*a8 + 128) * *(_DWORD *)(v114 + v94)+ *(_DWORD *)(*v109 + 4 * v74)+ (*(_DWORD *)(v112 + 4 * v73) + (*a8 + 128) * v11) * (*a7 + 128));
          if (v96 <= -32768) {
            int v97 = -32768;
          }
          else {
            int v97 = v96;
          }
          if (v97 >= 0x7FFF) {
            LOWORD(v97) = 0x7FFF;
          }
          *(_WORD *)(*(void *)a1 + 2 * *(_DWORD *)(a1 + 16) * v95 + 2 * v74) = v97;
          LODWORD(v83) = v83 + 1;
          v94 += 4;
        }
        while (a2[2] > (int)v83);
      }
      ++v73;
      int v10 = a7;
    }
    while (a2[3] > (int)v73);
  }
}

void sub_216118644(uint64_t *a1)
{
  bzero((void *)(*(void *)(*(void *)(*a1 + 16) + 8 * *(unsigned __int8 *)(*a1 + 48) + 40)+ *(void *)(*(void *)(*a1 + 16) + 16)), 4 * *(int *)(*a1 + 8));
  uint64_t v2 = a1[1];
  int v3 = *(_DWORD *)(v2 + 12);
  if (v3 >= 1)
  {
    int v4 = 0;
    size_t v5 = (int *)*a1;
    int v6 = *(_DWORD *)(*a1 + 4);
    do
    {
      int v7 = v3 - v4;
      if (v7 >= v6) {
        unint64_t v8 = v6;
      }
      else {
        unint64_t v8 = v7;
      }
      int v9 = *(_DWORD *)(v2 + 8);
      if (v9 >= 1)
      {
        int v10 = 0;
        int v11 = *v5;
        do
        {
          if (v9 - v10 >= v11) {
            int v12 = v11;
          }
          else {
            int v12 = v9 - v10;
          }
          if ((int)v8 >= 1)
          {
            for (unint64_t i = 0; i < v8; i += 64)
            {
              if (v12 >= 1)
              {
                int v14 = v10;
                int v15 = v12;
                do
                {
                  _X12 = *(void *)a1[1] + *(int *)(a1[1] + 16) * (uint64_t)v14 + i + v4;
                  __asm { PRFM            #0, [X12] }
                  ++v14;
                  --v15;
                }
                while (v15);
              }
            }
          }
          sub_216118778(a1, v10, v12, v4, v8);
          size_t v5 = (int *)*a1;
          uint64_t v2 = a1[1];
          int v11 = *(_DWORD *)*a1;
          v10 += v11;
          int v9 = *(_DWORD *)(v2 + 8);
        }
        while (v10 < v9);
        int v6 = v5[1];
      }
      v4 += v6;
      int v3 = *(_DWORD *)(v2 + 12);
    }
    while (v4 < v3);
  }
}

void sub_216118778(uint64_t *a1, int a2, int a3, int a4, int a5)
{
  if (a3 >= 1)
  {
    int v10 = 0;
    int v11 = a3;
    do
    {
      int v12 = v11 - 4;
      if (v11 >= 4) {
        int v13 = 4;
      }
      else {
        int v13 = v11;
      }
      int v14 = a2 + v10;
      int v15 = *(_DWORD *)(*a1 + 12) - a4;
      if (v15 >= *(_DWORD *)(*a1 + 4)) {
        int v15 = *(_DWORD *)(*a1 + 4);
      }
      *(_DWORD *)(*a1 + 72) = v15 * v14 + *(_DWORD *)(*a1 + 8) * a4;
      sub_216118828(a1, v14, v13, a4, a5);
      v10 += 4;
      int v11 = v12;
    }
    while (v10 < a3);
  }
}

void sub_216118828(uint64_t *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  int v35 = 0;
  uint64_t v36 = 0;
  int v37 = 0;
  if (a3 == 4)
  {
    unint64_t v9 = a5 & 0xFFFFFFFFFFFFFFF0;
    if ((int)v9 >= 1)
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *a1;
        uint64_t v12 = a1[1];
        uint64_t v13 = *(void *)v12;
        LODWORD(v12) = *(_DWORD *)(v12 + 16);
        int v35 = (long long *)(v13 + (int)v12 * (uint64_t)a2 + a4 + v10);
        uint64_t v36 = 0x1000000004;
        int v37 = v12;
        sub_216118A9C((uint64_t)&v35, v11, a2);
        v10 += 16;
      }
      while (v10 < v9);
    }
    if ((int)v9 < a5)
    {
      int v14 = 0;
      uint64_t v15 = a1[1];
      unint64_t v16 = v9 + a4;
      int v17 = *(_DWORD *)(v15 + 16);
      unint64_t v18 = *(void *)v15 + v17 * (uint64_t)a2 + v16;
      *(void *)&long long v19 = 0x8080808080808080;
      *((void *)&v19 + 1) = 0x8080808080808080;
      long long v38 = v19;
      long long v39 = v19;
      long long v40 = v19;
      long long v41 = v19;
      for (uint64_t i = 24; i != 88; i += 16)
      {
        memcpy((char *)&v35 + i, (const void *)(v18 + v14), a5 & 0xF);
        v14 += v17;
      }
      int v35 = &v38;
      uint64_t v36 = 0x1000000004;
      int v37 = 16;
      sub_216118A9C((uint64_t)&v35, *a1, a2);
    }
  }
  else if (a5 >= 1)
  {
    unint64_t v21 = 0;
    uint64_t v32 = a4;
    do
    {
      uint64_t v22 = a1[1];
      uint64_t v23 = *(void *)v22;
      int v24 = *(_DWORD *)(v22 + 16);
      *(void *)&long long v25 = 0x8080808080808080;
      *((void *)&v25 + 1) = 0x8080808080808080;
      long long v38 = v25;
      long long v39 = v25;
      long long v40 = v25;
      long long v41 = v25;
      if (a3 >= 1)
      {
        int v26 = 0;
        int v27 = 0;
        uint64_t v28 = a3;
        uint64_t v29 = v23 + v24 * (uint64_t)a2 + v21 + v32;
        int v30 = a5 - v21;
        if (a5 - (int)v21 >= 16) {
          int v30 = 16;
        }
        size_t v31 = v30;
        do
        {
          memcpy((char *)&v38 + (v27 & 0xFFFFFFF0), (const void *)(v29 + v26), v31);
          v27 += 16;
          v26 += v24;
          --v28;
        }
        while (v28);
      }
      int v35 = &v38;
      uint64_t v36 = 0x1000000004;
      int v37 = 16;
      sub_216118A9C((uint64_t)&v35, *a1, a2);
      v21 += 16;
    }
    while (v21 < a5);
  }
}

int16x8_t sub_216118A9C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 + 40 + 8 * *(unsigned __int8 *)(a2 + 48));
  uint64_t v6 = *(void *)(v4 + 40 + 8 * *(unsigned __int8 *)(a2 + 24));
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = *(int *)(a2 + 72);
  unint64_t v10 = *(_OWORD **)a1;
  uint64_t v11 = *(int *)(a1 + 16);
  do
  {
    v20[v3] = *v10;
    unint64_t v10 = (_OWORD *)((char *)v10 + v11);
    ++v3;
  }
  while (v3 != 4);
  uint64_t v12 = 0;
  v13.i64[0] = 0x8080808080808080;
  v13.i64[1] = 0x8080808080808080;
  do
  {
    v20[v12] = veorq_s8((int8x16_t)v20[v12], v13);
    ++v12;
  }
  while (v12 != 4);
  uint64_t v14 = 0;
  uint64_t v15 = (_OWORD *)(v8 + v9);
  long long v16 = v20[1];
  *uint64_t v15 = v20[0];
  v15[1] = v16;
  long long v17 = v20[3];
  v15[2] = v20[2];
  v15[3] = v17;
  do
  {
    v19[v14] = vaddw_high_s8(vmovl_s8(*(int8x8_t *)&v20[v14]), (int8x16_t)v20[v14]);
    ++v14;
  }
  while (v14 != 4);
  int16x8_t result = vpaddq_s16(vpaddq_s16(v19[0], v19[1]), vpaddq_s16(v19[2], v19[3]));
  *(int32x4_t *)(v5 + v7 + 4 * a3) = vpadalq_s16(*(int32x4_t *)(v5 + v7 + 4 * a3), result);
  *(_DWORD *)(a2 + 72) += 64;
  return result;
}

uint64_t sub_216118BC4(uint64_t result, int a2)
{
  signed int v2 = (a2 + 15) & 0xFFFFFFF0;
  if (v2 >= 1)
  {
    uint64_t v3 = (void *)result;
    int v4 = 0;
    uint64_t v5 = *(int **)(result + 8);
    int v6 = v5[2];
    do
    {
      if (v2 - v4 >= v6) {
        int v7 = v6;
      }
      else {
        int v7 = v2 - v4;
      }
      int v8 = v5[3];
      if (v8 >= 1)
      {
        int v9 = 0;
        int v10 = *v5;
        do
        {
          int v11 = v8 - v9;
          if (v11 >= v10) {
            int v12 = v10;
          }
          else {
            int v12 = v11;
          }
          int v13 = v5[4];
          if (v13 >= 1)
          {
            for (int i = 0; i < v13; i += 4)
            {
              if (v12 >= 1)
              {
                for (int j = 0; j < v12; j += 4)
                  int16x8_t result = sub_216118CC0(v3, v9 + j, i, v4, v7);
              }
            }
            uint64_t v5 = (int *)v3[1];
          }
          int v10 = *v5;
          v9 += *v5;
          int v8 = v5[3];
        }
        while (v9 < v8);
        int v6 = v5[2];
      }
      v4 += v6;
    }
    while (v4 < v2);
  }
  return result;
}

uint64_t sub_216118CC0(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  int v7 = *(_DWORD *)(v6 + 12) - a4;
  if (v7 >= *(_DWORD *)(v6 + 4)) {
    int v7 = *(_DWORD *)(v6 + 4);
  }
  *(_DWORD *)(v6 + 72) = v7 * a2 + *(_DWORD *)(v6 + 8) * a4;
  uint64_t v8 = a1[4];
  int v9 = *(_DWORD *)(v8 + 12) - a4;
  if (v9 >= *(_DWORD *)(v8 + 4)) {
    int v9 = *(_DWORD *)(v8 + 4);
  }
  int v10 = v9 * a3 + *(_DWORD *)(v8 + 8) * a4;
  *(_DWORD *)(v8 + 72) = v10;
  uint64_t v11 = *(void *)(*(void *)v5 + 8 * *(unsigned __int8 *)(v5 + 8) + 40) + *(void *)(*(void *)v5 + 16);
  uint64_t v12 = *(int *)(*(void *)(v5 + 32) + 12);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, void, void, void))(*(void *)*a1 + 8))(*a1, v11 + 4 * a2 + 4 * (int)v12 * a3, 1, v12, *(void *)(*(void *)(v6 + 16) + 8 * *(unsigned __int8 *)(v6 + 24) + 40)+ *(void *)(*(void *)(v6 + 16) + 16)+ *(int *)(v6 + 72), *(void *)(*(void *)(v8 + 16) + 8 * *(unsigned __int8 *)(v8 + 24) + 40)+ *(void *)(*(void *)(v8 + 16) + 16)+ v10, a4, a5);
}

void sub_216118DAC(uint64_t *a1, void **a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v14 = 0;
  uint64_t v49 = *MEMORY[0x263EF8340];
  int32x4_t v46 = 0u;
  int32x4_t v47 = 0u;
  int32x4_t v44 = 0u;
  int32x4_t v45 = 0u;
  int32x4_t v42 = 0u;
  int32x4_t v43 = 0u;
  int32x4_t v40 = 0u;
  int32x4_t v41 = 0u;
  uint64_t v15 = *a1;
  uint64_t v16 = *((int *)a1 + 4);
  long long v17 = (long long *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + v15 + 16);
  uint64_t v18 = 4 * v16;
  do
  {
    long long v19 = *v17;
    int v20 = &v40.i8[v14];
    *(_OWORD *)int v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v14 += 32;
    long long v17 = (long long *)((char *)v17 + v18);
  }
  while (v14 != 128);
  uint64_t v21 = 0;
  long long v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v39[0] = *(_OWORD *)(*a4 + 4 * a9);
  v39[1] = v22;
  int32x4_t v23 = *(int32x4_t *)(*a5 + 4 * a10);
  int v24 = *a6;
  unsigned int v25 = *a7 + 128;
  int32x4_t v26 = vdupq_n_s32(v25);
  char v27 = 1;
  do
  {
    uint64_t v28 = 0;
    char v29 = v27;
    int32x4_t v30 = vmulq_s32((int32x4_t)v39[v21], v26);
    size_t v31 = &v40.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    char v27 = 0;
    uint64_t v21 = 1;
  }
  while ((v29 & 1) != 0);
  uint64_t v32 = 0;
  int32x4_t v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  v48[0] = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  v48[1] = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  v48[2] = vdupq_laneq_s32(v33, 2);
  v48[3] = vdupq_laneq_s32(v33, 3);
  char v34 = 1;
  do
  {
    uint64_t v35 = 0;
    char v36 = v34;
    uint64_t v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v40 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v40 + v37), (int32x4_t)v48[v35++]);
      v37 += 32;
    }
    while (v35 != 4);
    char v34 = 0;
    uint64_t v32 = 1;
  }
  while ((v36 & 1) != 0);
  v38[4] = v44;
  v38[5] = v45;
  v38[6] = v46;
  v38[7] = v47;
  v38[0] = v40;
  v38[1] = v41;
  v38[2] = v42;
  v38[3] = v43;
  sub_216119534(a2, v38, a3, a11, a12, a13, a14);
}

double sub_216118F98(uint64_t a1, void **a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v14 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(int *)(a1 + 16);
  uint64_t v16 = (int32x4_t *)(*(void *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  uint64_t v17 = 4 * v15;
  do
  {
    *(int32x4_t *)((char *)&v35 + v14) = *v16;
    v14 += 16;
    uint64_t v16 = (int32x4_t *)((char *)v16 + v17);
  }
  while (v14 != 64);
  uint64_t v18 = 0;
  int32x4_t v19 = *(int32x4_t *)(*a4 + 4 * a9);
  int32x4_t v31 = v35;
  int32x4_t v32 = v36;
  int32x4_t v33 = v37;
  int32x4_t v34 = v38;
  int32x4_t v20 = *(int32x4_t *)(*a5 + 4 * a10);
  int v21 = *a6;
  unsigned int v22 = *a7 + 128;
  int32x4_t v23 = vmulq_s32(vdupq_n_s32(v22), v19);
  do
  {
    *(int32x4_t *)((char *)&v31 + v18) = vaddq_s32(*(int32x4_t *)((char *)&v31 + v18), v23);
    v18 += 16;
  }
  while (v18 != 64);
  uint64_t v24 = 0;
  int32x4_t v25 = vmulq_s32(vaddq_s32(vdupq_n_s32(v22 * a8), v20), vdupq_n_s32(v21 + 128));
  int32x4_t v35 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 0);
  int32x4_t v36 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 1);
  int32x4_t v37 = vdupq_laneq_s32(v25, 2);
  int32x4_t v38 = vdupq_laneq_s32(v25, 3);
  do
  {
    *(int32x4_t *)((char *)&v31 + v24) = vaddq_s32(*(int32x4_t *)((char *)&v31 + v24), *(int32x4_t *)((char *)&v35 + v24));
    v24 += 16;
  }
  while (v24 != 64);
  int32x4_t v26 = v31;
  int32x4_t v27 = v32;
  int32x4_t v28 = v33;
  int32x4_t v29 = v34;

  return sub_216119964(a2, a3, v26, v27, v28, v29, a11, a12, a13, a14);
}

int16x4_t sub_21611910C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v14 = 0;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(int *)(a1 + 16);
  uint64_t v16 = (__int32 *)(*(void *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  uint64_t v17 = 4 * v15;
  do
  {
    v25.i32[v14++] = *v16;
    uint64_t v16 = (__int32 *)((char *)v16 + v17);
  }
  while (v14 != 4);
  uint64_t v18 = *(const float **)(a2 + 8);
  int32x4_t v19 = v18 + 2;
  int32x4_t v20 = (int32x4_t)vld1q_dup_f32(v19);
  int32x4_t v21 = (int32x4_t)vld1q_dup_f32(v18);
  int32x4_t v22 = vqrdmulhq_s32(vshlq_s32(vmlaq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(**(void **)a2 + 4 * a12), v25), vdupq_n_s32((*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9))), vaddq_s32(vdupq_n_s32((*a7 + 128) * a8), *(int32x4_t *)(*a5 + 4 * a10)), vdupq_n_s32(*a6 + 128)), vdupq_lane_s32(*(int32x2_t *)(a2 + 16), 0)), v21);
  int32x4_t v23 = vdupq_n_s32(-HIDWORD(*(void *)(a2 + 16)));
  int16x4_t result = vqmovn_s32(vaddq_s32(vrshlq_s32(vqaddq_s32(v22, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)v22))), v23), v20));
  *(int16x4_t *)(*(void *)a3 + 2 * *(_DWORD *)(a3 + 16) * a13 + 2 * a14) = result;
  return result;
}

double sub_216119250(uint64_t a1, void **a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v15 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  int32x4_t v46 = 0u;
  int32x4_t v47 = 0u;
  int32x4_t v44 = 0u;
  int32x4_t v45 = 0u;
  uint64_t v16 = *(int *)(a1 + 16);
  uint64_t v17 = (long long *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + *(void *)a1 + 16);
  uint64_t v18 = 4 * v16;
  do
  {
    long long v19 = *v17;
    int32x4_t v20 = &v44.i8[v15];
    *(_OWORD *)int32x4_t v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v15 += 32;
    uint64_t v17 = (long long *)((char *)v17 + v18);
  }
  while (v15 != 128);
  uint64_t v21 = 0;
  long long v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v43[0] = *(_OWORD *)(*a4 + 4 * a9);
  v43[1] = v22;
  int32x4_t v23 = *(int32x4_t *)(*a5 + 4 * a10);
  int v24 = *a6;
  unsigned int v25 = *a7 + 128;
  int32x4_t v26 = vdupq_n_s32(v25);
  char v27 = 1;
  do
  {
    uint64_t v28 = 0;
    char v29 = v27;
    int32x4_t v30 = vmulq_s32((int32x4_t)v43[v21], v26);
    int32x4_t v31 = &v44.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    char v27 = 0;
    uint64_t v21 = 1;
  }
  while ((v29 & 1) != 0);
  uint64_t v32 = 0;
  int32x4_t v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  int32x4_t v53 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  int32x4_t v54 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  int32x4_t v55 = vdupq_laneq_s32(v33, 2);
  int32x4_t v56 = vdupq_laneq_s32(v33, 3);
  char v34 = 1;
  do
  {
    uint64_t v35 = 0;
    char v36 = v34;
    uint64_t v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v44 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v44 + v37), *(int32x4_t *)((char *)&v53 + v35));
      v35 += 16;
      v37 += 32;
    }
    while (v35 != 64);
    char v34 = 0;
    uint64_t v32 = 1;
  }
  while ((v36 & 1) != 0);
  long long v57 = v48;
  long long v58 = v49;
  long long v59 = v50;
  long long v60 = v51;
  int32x4_t v53 = v44;
  int32x4_t v54 = v45;
  int32x4_t v55 = v46;
  int32x4_t v56 = v47;
  *(double *)v38.i64 = sub_216119604(a2, &v53, a11, a12);
  v52[0] = v38;
  v52[1] = v39;
  v52[2] = v40;
  unsigned int v52[3] = v41;
  return sub_216119AF4(v52, a3, a13, a14);
}

double sub_216119458(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v15 = 4 * *(_DWORD *)(a1 + 16) * a10;
  unsigned int v16 = *a7 + 128;
  int32x4_t v17 = vdupq_n_s32(v16);
  int32x4_t v18 = vdupq_n_s32(*(_DWORD *)(**(void **)a2 + 4 * a12) + (*(_DWORD *)(*a5 + 4 * a10) + v16 * a8) * (*a6 + 128));
  *(double *)v19.i64 = sub_216119BEC((const float *)(a2 + 8), *(double *)vmlaq_s32(vaddq_s32(v18, *(int32x4_t *)(*(void *)a1 + 4 * a9 + v15)), v17, *(int32x4_t *)(*a4 + 4 * a9)).i64, (int32x2_t)*(_OWORD *)&vmlaq_s32(vaddq_s32(v18, *(int32x4_t *)(*(void *)a1 + 4 * a9 + 16 + v15)), v17, *(int32x4_t *)(*a4 + 4 * a9 + 16)));
  int16x8_t v22 = vqmovn_high_s32(vqmovn_s32(v19), v20);
  *(void *)&double result = sub_216119C64((__n128 *)&v22, a3, a13, a14).n128_u64[0];
  return result;
}

void sub_216119534(void **a1, int32x4_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int32x4_t v10 = a2[5];
  void v18[4] = a2[4];
  v18[5] = v10;
  int32x4_t v11 = a2[7];
  v18[6] = a2[6];
  v18[7] = v11;
  int32x4_t v12 = a2[1];
  v18[0] = *a2;
  v18[1] = v12;
  int32x4_t v13 = a2[3];
  v18[2] = a2[2];
  void v18[3] = v13;
  *(double *)&long long v14 = sub_216119604(a1, v18, a4, a5);
  *(_OWORD *)(*(void *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * a7) = v14;
  *(_OWORD *)(*(void *)a3 + 2 * a6 + 2 * (*(_DWORD *)(a3 + 16) + *(_DWORD *)(a3 + 16) * a7)) = v15;
  *(_OWORD *)(*(void *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * (a7 + 2)) = v16;
  *(_OWORD *)(*(void *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * (a7 + 3)) = v17;
}

double sub_216119604(void **a1, int32x4_t *a2, uint64_t a3, int a4)
{
  int32x4_t v4 = *(int32x4_t *)(**a1 + 4 * a4);
  int32x4_t v5 = vdupq_lane_s32(*(int32x2_t *)v4.i8, 0);
  int32x4_t v6 = vaddq_s32(v5, *a2);
  int32x4_t v7 = vdupq_lane_s32(*(int32x2_t *)v4.i8, 1);
  int32x4_t v8 = vaddq_s32(v5, a2[1]);
  int32x4_t v9 = vaddq_s32(v7, a2[2]);
  int32x4_t v10 = vaddq_s32(v7, a2[3]);
  int32x4_t v11 = vdupq_laneq_s32(v4, 2);
  int32x4_t v12 = vaddq_s32(v11, a2[4]);
  int32x4_t v13 = vaddq_s32(v11, a2[5]);
  int32x4_t v14 = vdupq_laneq_s32(v4, 3);
  int32x4_t v15 = vaddq_s32(v14, a2[6]);
  int32x4_t v16 = vaddq_s32(v14, a2[7]);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  int32x4_t v19 = 0u;
  int32x4_t v20 = 0u;
  v18[0] = v6;
  v18[1] = v8;
  v18[2] = v9;
  void v18[3] = v10;
  void v18[4] = v12;
  v18[5] = v13;
  v18[6] = v15;
  v18[7] = v16;
  sub_2161196D8((uint64_t)(a1 + 1), v18, &v19);
  *(void *)&double result = vqmovn_high_s32(vqmovn_s32(v19), v20).u64[0];
  return result;
}

double sub_2161196D8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = 0;
  long long v4 = a2[5];
  v21[4] = a2[4];
  v21[5] = v4;
  long long v5 = a2[7];
  v21[6] = a2[6];
  v21[7] = v5;
  long long v6 = a2[1];
  v21[0] = *a2;
  v21[1] = v6;
  long long v13 = a2[2];
  long long v7 = a2[3];
  int32x4_t v8 = *(_DWORD **)a1;
  int32x4_t v9 = (const float *)(*(void *)a1 + 8);
  int32x4_t v10 = (int32x4_t)vld1q_dup_f32(v9);
  int32x4_t v11 = (const float *)(a1 + 8);
  int32x4_t v12 = (int32x4_t)vld1q_dup_f32(v11);
  v21[2] = v13;
  v21[3] = v7;
  LODWORD(v13) = *v8;
  int32x4_t v14 = vdupq_n_s32(-*(_DWORD *)(a1 + 12));
  do
  {
    int32x4_t v15 = vqrdmulhq_lane_s32(vshlq_s32((int32x4_t)v21[v3], v12), *(int32x2_t *)&v13, 0);
    v22[v3++] = vaddq_s32(vrshlq_s32(vqaddq_s32(v15, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)v14))), v14), v10);
  }
  while (v3 != 8);
  long long v16 = v26;
  a3[4] = v25;
  a3[5] = v16;
  long long v17 = v28;
  a3[6] = v27;
  a3[7] = v17;
  long long v18 = v22[1];
  *a3 = v22[0];
  a3[1] = v18;
  double result = *(double *)&v23;
  long long v20 = v24;
  a3[2] = v23;
  a3[3] = v20;
  return result;
}

double sub_21611978C(int16x8_t *a1, uint64_t a2, int a3, int a4)
{
  int16x8_t v4 = a1[1];
  int32x4_t v5 = (int32x4_t)vtrn1q_s16(*a1, v4);
  int32x4_t v6 = (int32x4_t)vtrn2q_s16(*a1, v4);
  int16x8_t v7 = a1[2];
  int16x8_t v8 = a1[3];
  int32x4_t v9 = (int32x4_t)vtrn1q_s16(v7, v8);
  int32x4_t v10 = (int32x4_t)vtrn2q_s16(v7, v8);
  int16x8_t v11 = a1[4];
  int16x8_t v12 = a1[5];
  int32x4_t v13 = (int32x4_t)vtrn1q_s16(v11, v12);
  int32x4_t v14 = (int32x4_t)vtrn2q_s16(v11, v12);
  int16x8_t v15 = a1[6];
  int16x8_t v16 = a1[7];
  int32x4_t v17 = (int32x4_t)vtrn1q_s16(v15, v16);
  int32x4_t v18 = (int32x4_t)vtrn2q_s16(v15, v16);
  int8x16_t v19 = (int8x16_t)vtrn1q_s32(v5, v9);
  int8x16_t v20 = (int8x16_t)vtrn2q_s32(v5, v9);
  int8x16_t v21 = (int8x16_t)vtrn1q_s32(v6, v10);
  int8x16_t v22 = (int8x16_t)vtrn2q_s32(v6, v10);
  int8x16_t v23 = (int8x16_t)vtrn1q_s32(v13, v17);
  int8x16_t v24 = (int8x16_t)vtrn2q_s32(v13, v17);
  int8x16_t v25 = (int8x16_t)vtrn1q_s32(v14, v18);
  int8x16_t v26 = (int8x16_t)vtrn2q_s32(v14, v18);
  uint64_t v27 = 2 * a4;
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + v27) = v19.i64[0];
  uint64_t v28 = v27 + 8;
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + v28) = v23.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 1) + v27) = v21.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 1) + v28) = v25.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + v27) = v20.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + v28) = v24.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + v27) = v22.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + v28) = v26.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 4) + v27) = vextq_s8(v19, v19, 8uLL).u64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 4) + v28) = vextq_s8(v23, v23, 8uLL).u64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 5) + v27) = vextq_s8(v21, v21, 8uLL).u64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 5) + v28) = vextq_s8(v25, v25, 8uLL).u64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 6) + v27) = vextq_s8(v20, v20, 8uLL).u64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 6) + v28) = vextq_s8(v24, v24, 8uLL).u64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 7) + v27) = vextq_s8(v22, v22, 8uLL).u64[0];
  *(void *)&double result = vextq_s8(v26, v26, 8uLL).u64[0];
  *(double *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 7) + v28) = result;
  return result;
}

double sub_216119964(void **a1, uint64_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5, int32x4_t a6, uint64_t a7, int a8, int a9, int a10)
{
  int32x4_t v13 = *(int32x4_t *)(**a1 + 4 * a8);
  *(double *)v14.i64 = sub_2161199F8((uint64_t)(a1 + 1), *(double *)vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v13.i8, 0), a3).i64, *(double *)vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v13.i8, 1), a4).i64, (__n128)vaddq_s32(vdupq_laneq_s32(v13, 2), a5), (__n128)vaddq_s32(vdupq_laneq_s32(v13, 3), a6));
  v19[0] = (int8x16_t)vqmovn_high_s32(vqmovn_s32(v14), v15);
  v19[1] = (int8x16_t)vqmovn_high_s32(vqmovn_s32(v16), v17);
  return sub_216119A70(v19, a2, a9, a10);
}

double sub_2161199F8(uint64_t a1, double a2, double a3, __n128 a4, __n128 a5)
{
  uint64_t v5 = 0;
  int32x4_t v6 = *(unsigned __int32 **)a1;
  int16x8_t v7 = (const float *)(*(void *)a1 + 8);
  int32x4_t v8 = (int32x4_t)vld1q_dup_f32(v7);
  int32x4_t v9 = (const float *)(a1 + 8);
  int32x4_t v10 = (int32x4_t)vld1q_dup_f32(v9);
  v14[2] = a4;
  v14[3] = a5;
  a4.n128_u32[0] = *v6;
  int32x4_t v11 = vdupq_n_s32(-*(_DWORD *)(a1 + 12));
  do
  {
    int32x4_t v12 = vqrdmulhq_lane_s32(vshlq_s32((int32x4_t)v14[v5], v10), (int32x2_t)a4.n128_u64[0], 0);
    *(long long *)((char *)&v15 + v5 * 16) = (__int128)vaddq_s32(vrshlq_s32(vqaddq_s32(v12, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v11, (int8x16_t)v12))), v11), v8);
    ++v5;
  }
  while (v5 != 4);
  return *(double *)&v15;
}

double sub_216119A70(int8x16_t *a1, uint64_t a2, int a3, int a4)
{
  int32x4_t v4 = (int32x4_t)vqtbl1q_s8(*a1, (int8x16_t)xmmword_21636C8F0);
  int32x4_t v5 = (int32x4_t)vqtbl1q_s8(a1[1], (int8x16_t)xmmword_21636C8F0);
  int8x16_t v6 = (int8x16_t)vtrn1q_s32(v4, v5);
  int8x16_t v7 = (int8x16_t)vtrn2q_s32(v4, v5);
  uint64_t v8 = 2 * a4;
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + v8) = v6.i64[0];
  *(void *)(*(void *)a2 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a3) + v8) = vextq_s8(v6, v6, 8uLL).u64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + v8) = v7.i64[0];
  *(void *)&double result = vextq_s8(v7, v7, 8uLL).u64[0];
  *(double *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + v8) = result;
  return result;
}

double sub_216119AF4(int16x8_t *a1, uint64_t a2, int a3, int a4)
{
  int16x8_t v4 = a1[1];
  int32x4_t v5 = (int32x4_t)vtrn1q_s16(*a1, v4);
  int32x4_t v6 = (int32x4_t)vtrn2q_s16(*a1, v4);
  int16x8_t v7 = a1[2];
  int16x8_t v8 = a1[3];
  int32x4_t v9 = (int32x4_t)vtrn1q_s16(v7, v8);
  int32x4_t v10 = (int32x4_t)vtrn2q_s16(v7, v8);
  int8x16_t v11 = (int8x16_t)vtrn1q_s32(v5, v9);
  int8x16_t v12 = (int8x16_t)vtrn2q_s32(v5, v9);
  int8x16_t v13 = (int8x16_t)vtrn1q_s32(v6, v10);
  int8x16_t v14 = (int8x16_t)vtrn2q_s32(v6, v10);
  uint64_t v15 = 2 * a4;
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + v15) = v11.i64[0];
  *(void *)(*(void *)a2 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a3) + v15) = v13.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + v15) = v12.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + v15) = v14.i64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 4) + v15) = vextq_s8(v11, v11, 8uLL).u64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 5) + v15) = vextq_s8(v13, v13, 8uLL).u64[0];
  *(void *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 6) + v15) = vextq_s8(v12, v12, 8uLL).u64[0];
  *(void *)&double result = vextq_s8(v14, v14, 8uLL).u64[0];
  *(double *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 7) + v15) = result;
  return result;
}

double sub_216119BEC(const float *a1, double a2, int32x2_t a3)
{
  uint64_t v3 = 0;
  int16x8_t v4 = (const float *)(*(void *)a1 + 8);
  int32x4_t v5 = (int32x4_t)vld1q_dup_f32(v4);
  int32x4_t v6 = a1 + 2;
  int32x4_t v7 = (int32x4_t)vld1q_dup_f32(v6);
  a3.i32[0] = **(_DWORD **)a1;
  int32x4_t v8 = vdupq_n_s32(-*((_DWORD *)a1 + 3));
  char v9 = 1;
  do
  {
    char v10 = v9;
    int32x4_t v11 = vqrdmulhq_lane_s32(vshlq_s32(*((int32x4_t *)&v13 + v3), v7), a3, 0);
    *(&v14 + v3) = (__int128)vaddq_s32(vrshlq_s32(vqaddq_s32(v11, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v8, (int8x16_t)v11))), v8), v5);
    uint64_t v3 = 1;
    char v9 = 0;
  }
  while ((v10 & 1) != 0);
  return *(double *)&v14;
}

__n128 sub_216119C64(__n128 *a1, uint64_t a2, int a3, int a4)
{
  __n128 result = *a1;
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + 2 * a4) = *a1;
  *(_WORD *)(*(void *)a2 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a3) + 2 * a4) = a1->n128_u16[1];
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + 2 * a4) = a1->n128_u16[2];
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + 2 * a4) = a1->n128_u16[3];
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 4) + 2 * a4) = a1->n128_u16[4];
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 5) + 2 * a4) = a1->n128_u16[5];
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 6) + 2 * a4) = a1->n128_u16[6];
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 7) + 2 * a4) = a1->n128_u16[7];
  return result;
}

int16x4_t sub_216119D40(uint64_t a1, uint64_t a2, int32x4_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int32x4_t v7 = *(const float **)(a1 + 8);
  int32x4_t v8 = (const float *)(**(void **)a1 + 4 * a5);
  int32x4_t v9 = (int32x4_t)vld1q_dup_f32(v8);
  char v10 = v7 + 2;
  int32x4_t v11 = (int32x4_t)vld1q_dup_f32(v10);
  int32x4_t v12 = vaddq_s32(v9, a3);
  long long v13 = (const float *)(a1 + 16);
  int32x4_t v14 = (int32x4_t)vld1q_dup_f32(v13);
  int32x4_t v15 = (int32x4_t)vld1q_dup_f32(v7);
  int32x4_t v16 = vqrdmulhq_s32(vshlq_s32(v12, v14), v15);
  int32x4_t v17 = vdupq_n_s32(-*(_DWORD *)(a1 + 20));
  int16x4_t result = vqmovn_s32(vaddq_s32(vrshlq_s32(vqaddq_s32(v16, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)v16))), v17), v11));
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * a6 + 2 * a7) = result.i16[0];
  *(_WORD *)(*(void *)a2 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a6) + 2 * a7) = result.i16[1];
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a6 + 2) + 2 * a7) = result.i16[2];
  *(_WORD *)(*(void *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a6 + 3) + 2 * a7) = result.i16[3];
  return result;
}

uint64_t sub_216119DFC(_DWORD *a1, int a2)
{
  uint64_t v2 = a2 * (uint64_t)(1 << a1[2]);
  LODWORD(v3) = 0x7FFFFFFF;
  if (v2 >= 0x7FFFFFFF) {
    uint64_t v2 = 0x7FFFFFFFLL;
  }
  if (v2 <= (uint64_t)0xFFFFFFFF80000000) {
    uint64_t v2 = 0xFFFFFFFF80000000;
  }
  uint64_t v4 = **(int **)a1;
  if (v4 != 0x80000000 || v2 != 0x80000000)
  {
    uint64_t v6 = v2 * v4;
    BOOL v7 = v2 * v4 < 0;
    uint64_t v8 = 0x40000000;
    if (v7) {
      uint64_t v8 = -1073741823;
    }
    BOOL v9 = __OFADD__(v8, v6);
    uint64_t v10 = v8 + v6;
    if (v10 < 0 != v9) {
      v10 += 0x7FFFFFFFLL;
    }
    unint64_t v3 = (unint64_t)v10 >> 31;
  }
  int v11 = a1[3];
  unsigned int v12 = ((int)v3 >> v11) + *(_DWORD *)(*(void *)a1 + 8);
  if ((int)(v3 & ~(-1 << v11)) <= (int)(((int)~(-1 << v11) >> 1)
                                                       + (v3 >> 31)))
    return v12;
  else {
    return v12 + 1;
  }
}

uint64_t sub_216119EA0(uint64_t result, int a2, int a3, int a4, int a5, unsigned int *a6, unsigned int *a7, signed int *a8, float a9)
{
  if (((result + 3) & 0xFFFFFFFC) / a4 <= 1) {
    int v9 = 1;
  }
  else {
    int v9 = ((result + 3) & 0xFFFFFFFC) / a4;
  }
  signed int v10 = (a3 + 15) & 0xFFFFFFF0;
  int v11 = (int)(float)((float)(a5 / v10) * a9);
  if (v11 <= 1) {
    int v11 = 1;
  }
  int v12 = (v11 + a2 - 1) / v11;
  if (v12 <= 1) {
    int v12 = 1;
  }
  unsigned int v13 = ((v12 + a2 - 1) / v12 + 3) & 0xFFFFFFFC;
  if (a9 != 1.0)
  {
    int v14 = (int)(a5 - v13 * v10) / (int)((v10 + 4 * v13) * a4);
    if (v14 <= 1) {
      int v14 = 1;
    }
    int v15 = v9 - 1;
    int v16 = (v14 + v15) / v14;
    if (v16 <= 1) {
      int v16 = 1;
    }
    int v9 = (v16 + v15) / v16;
  }
  *a6 = (v9 + 3) & 0xFFFFFFFC;
  *a7 = v13;
  *a8 = v10;
  return result;
}

uint64_t sub_216119F50(uint64_t result, int a2, void *a3, _DWORD *a4)
{
  *(void *)(result + 16) = a3;
  *(_DWORD *)(result + 72) = 0;
  uint64_t v4 = a4 + 1;
  if (!a2) {
    uint64_t v4 = a4;
  }
  *(_DWORD *)int16x4_t result = *v4;
  int32x4_t v5 = a4 + 3;
  if (a2) {
    int32x4_t v5 = a4 + 4;
  }
  uint64_t v6 = *v5;
  *(_DWORD *)(result + 4) = a4[2];
  *(_DWORD *)(result + 8) = v6;
  int v7 = a4[5];
  *(_DWORD *)(result + 12) = v7;
  uint64_t v8 = a3[3];
  a3[v8 + 5] = a3[4];
  unint64_t v9 = a3[4] + ((v7 * (int)v6 + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v10 = a3[10];
  ++a3[3];
  a3[4] = v9;
  *(unsigned char *)(result + 24) = v8;
  *(void *)(result + 32) = v10;
  *(unsigned char *)(result + 40) = 0;
  uint64_t v11 = a3[3];
  a3[v11 + 5] = a3[4];
  uint64_t v12 = a3[10];
  uint64_t v13 = a3[4];
  ++a3[3];
  a3[4] = v13 + ((4 * v6 + 63) & 0xFFFFFFFFFFFFFFC0);
  *(unsigned char *)(result + 48) = v11;
  *(void *)(result + 56) = v12;
  *(unsigned char *)(result + 64) = 5;
  return result;
}

void sub_21611A008()
{
}

void sub_21611A01C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 168);
  int v3 = *(_DWORD *)(a1 + 172);
  int v4 = *(_DWORD *)(a1 + 44);
  sub_216119F50((uint64_t)v32, 0, *(void **)(a1 + 8), *(_DWORD **)(a1 + 192));
  int32x4_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 192);
  uint64_t v27 = v5;
  uint64_t v31 = v6;
  unint64_t v7 = (4 * *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12) + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v8 = v5[3];
  v5[v8 + 5] = v5[4];
  unint64_t v9 = v5[4] + v7;
  uint64_t v10 = v5[10];
  ++v5[3];
  v5[4] = v9;
  char v28 = v8;
  uint64_t v29 = v10;
  char v30 = 5;
  sub_216117C60((uint64_t)v5);
  if (v3 >= 1)
  {
    int v11 = 0;
    uint64_t v12 = *(void *)(a1 + 192);
    int v13 = *(_DWORD *)(v12 + 16);
    int v25 = v3;
    do
    {
      if (v3 - v11 >= v13) {
        int v14 = v13;
      }
      else {
        int v14 = v3 - v11;
      }
      if (v2 >= 1)
      {
        int v15 = 0;
        int v16 = *(_DWORD *)(v12 + 12);
        do
        {
          int v17 = *(_DWORD *)(a1 + 48);
          uint64_t v36 = *(void *)(a1 + 32) + v17 * v15;
          if (v2 - v15 >= v16) {
            int v18 = v16;
          }
          else {
            int v18 = v2 - v15;
          }
          unint64_t v37 = __PAIR64__(v4, v18);
          LODWORD(v38) = v17;
          v35[0] = (uint64_t)v32;
          v35[1] = (uint64_t)&v36;
          sub_216118644(v35);
          unint64_t v19 = *(void *)(a1 + 192);
          uint64_t v36 = *(void *)(a1 + 24);
          unint64_t v37 = v19;
          int16x8_t v38 = &v27;
          int16x8_t v39 = v32;
          uint64_t v40 = a1 + 56;
          sub_216118BC4((uint64_t)&v36, v4);
          int v20 = *(_DWORD *)(a1 + 164) + v11;
          LODWORD(v36) = *(_DWORD *)(a1 + 160) + v15;
          HIDWORD(v36) = v20;
          unint64_t v37 = __PAIR64__(v14, v18);
          uint64_t v21 = *(void *)(v33 + 8 * v34 + 40) + *(void *)(v33 + 16);
          uint64_t v22 = *(void *)(*(void *)(a1 + 72) + 8 * *(unsigned __int8 *)(a1 + 104) + 40)
              + *(void *)(*(void *)(a1 + 72) + 16);
          int8x16_t v23 = *(_DWORD **)(a1 + 184);
          LODWORD(v35[0]) = **(_DWORD **)(a1 + 176);
          HIDWORD(v35[0]) = v18;
          v26[0] = *v23;
          v26[1] = v14;
          sub_216117DF4(a1 + 136, (int *)&v36, (uint64_t)&v27, v4, v21, v22, (int *)v35, v26, *(void *)(a1 + 200));
          uint64_t v12 = *(void *)(a1 + 192);
          int v16 = *(_DWORD *)(v12 + 12);
          v15 += v16;
        }
        while (v15 < v2);
        int v13 = *(_DWORD *)(v12 + 16);
        int v3 = v25;
      }
      v11 += v13;
    }
    while (v11 < v3);
  }
  uint64_t v24 = *(void *)(a1 + 8);
  *(unsigned char *)uint64_t v24 = 0;
  ++*(void *)(v24 + 80);
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 32) = 0;
}

void *sub_21611A234(void *result, unint64_t a2)
{
  uint64_t v2 = result[1] - *result;
  if (a2 > v2 >> 3)
  {
    atomic_store(a2 - (v2 >> 3), result + 3);
    operator new();
  }
  return result;
}

void sub_21611A3A8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E0C4039CDD859);
  _Unwind_Resume(a1);
}

void *sub_21611A3CC(uint64_t *a1, uint64_t *a2, void *a3, int *a4)
{
  if (a1 != a2)
  {
    unint64_t v7 = a1;
    do
    {
      uint64_t v8 = *v7++;
      uint64_t v9 = *a4;
      *a4 = v9 + 1;
      sub_21611A6D0(*(void *)(*a3 + 8 * v9), 2, v8);
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_21611A438(atomic_ullong *a1)
{
  if (atomic_load_explicit(a1, memory_order_acquire))
  {
    int v2 = 0;
    do
    {
      if (v2 >= 3999937)
      {
        __ns.__rep_ = 1000000;
        std::this_thread::sleep_for (&__ns);
        int v2 = 0;
      }
      else
      {
        v2 += 64;
      }
    }
    while (atomic_load_explicit(a1, memory_order_acquire));
  }
}

uint64_t sub_21611A5AC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a2;
  pthread_cond_init((pthread_cond_t *)(a1 + 16), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 64), 0);
  pthread_create((pthread_t *)a1, 0, (void *(__cdecl *)(void *))sub_21611A638, (void *)a1);
  return a1;
}

void sub_21611A620(_Unwind_Exception *a1)
{
  free(*(void **)(v1 + 152));
  *(void *)(v1 + 144) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_21611A638(uint64_t a1)
{
  return 0;
}

uint64_t sub_21611A654(uint64_t a1)
{
  sub_21611A6D0(a1, 1, 0);
  while (1)
  {
    uint64_t result = sub_21611A794((atomic_uint *)(a1 + 128), 1, (pthread_cond_t *)(a1 + 16), (pthread_mutex_t *)(a1 + 64));
    if (result != 2) {
      break;
    }
    sub_21611A6D0(a1, 1, 0);
  }
  if (result != 3) {
    abort();
  }
  return result;
}

uint64_t sub_21611A6D0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = (pthread_mutex_t *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  if (*(_DWORD *)(a1 + 128) >= 3u) {
    abort();
  }
  if (a2 == 2)
  {
    *(void *)(a3 + 8) = a1 + 136;
    *(void *)(a1 + 8) = a3;
  }
  else if (a2 == 1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
      *(void *)(a1 + 8) = 0;
    }
  }
  *(_DWORD *)(a1 + 128) = a2;
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 16));
  uint64_t result = pthread_mutex_unlock(v6);
  if (a2 == 1) {
    atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 224), 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t sub_21611A794(atomic_uint *a1, int a2, pthread_cond_t *a3, pthread_mutex_t *a4)
{
  uint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
  if (explicit == a2)
  {
    unsigned int v9 = -64;
    while (1)
    {
      v9 += 64;
      if (v9 > 0x3D08FF) {
        break;
      }
      uint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
      if (explicit != a2) {
        return explicit;
      }
    }
    pthread_mutex_lock(a4);
    while (1)
    {
      uint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
      if (explicit != a2) {
        break;
      }
      pthread_cond_wait(a3, a4);
    }
    pthread_mutex_unlock(a4);
  }
  return explicit;
}

void sub_21611A934(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a5 + 8);
  int v11 = *(_DWORD *)(a5 + 12);
  int v13 = *(_DWORD *)(a3 + 12);
  sub_216117B94(v52, v10, v11, v13, 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
  sub_216119F50((uint64_t)v49, 0, (void *)a1, v52);
  sub_216119F50((uint64_t)v46, 1, (void *)a1, v52);
  uint64_t v41 = a1;
  int32x4_t v45 = v52;
  unint64_t v14 = (4 * v54 * v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 8 * v15 + 40) = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v32 = (void *)(a1 + 24);
  uint64_t v33 = a1;
  ++*(void *)(a1 + 24);
  *(void *)(a1 + 32) += v14;
  char v42 = v15;
  uint64_t v43 = v16;
  char v44 = 5;
  sub_216117C60(a1);
  int v17 = v54;
  if (v54 >= v11)
  {
    unint64_t v18 = (unint64_t)*a4;
    __int32 v19 = a4[2].i32[0];
    long long v58 = (unsigned int *)vrev64_s32(a4[1]);
    LODWORD(v59) = v19;
    int32x4_t v55 = v46;
    int32x4_t v56 = &v57;
    unint64_t v57 = v18;
    sub_216118644((uint64_t *)&v55);
  }
  if (v10 >= 1)
  {
    int v20 = 0;
    int v21 = v53;
    int v34 = v10;
    do
    {
      int v22 = *(_DWORD *)(a3 + 16);
      unint64_t v23 = *(void *)a3 + v22 * v20;
      if (v10 - v20 >= v21) {
        unsigned int v24 = v21;
      }
      else {
        unsigned int v24 = v10 - v20;
      }
      long long v58 = (unsigned int *)__PAIR64__(v13, v24);
      LODWORD(v59) = v22;
      int32x4_t v55 = v49;
      int32x4_t v56 = &v57;
      unint64_t v57 = v23;
      sub_216118644((uint64_t *)&v55);
      if (v11 >= 1)
      {
        int v25 = 0;
        int v26 = v54;
        do
        {
          if (v11 - v25 >= v26) {
            int v27 = v26;
          }
          else {
            int v27 = v11 - v25;
          }
          if (v17 < v11)
          {
            __int32 v28 = a4[2].i32[0];
            unint64_t v29 = *(void *)a4 + v28 * v25;
            long long v58 = (unsigned int *)__PAIR64__(v13, v27);
            LODWORD(v59) = v28;
            int32x4_t v55 = v46;
            int32x4_t v56 = &v57;
            unint64_t v57 = v29;
            sub_216118644((uint64_t *)&v55);
          }
          unint64_t v57 = a2;
          long long v58 = v52;
          long long v59 = &v41;
          long long v60 = v49;
          uint64_t v61 = v46;
          sub_216118BC4((uint64_t)&v57, v13);
          unint64_t v57 = __PAIR64__(v25, v20);
          long long v58 = (unsigned int *)__PAIR64__(v27, v24);
          uint64_t v30 = *(void *)(v50 + 8 * v51 + 40) + *(void *)(v50 + 16);
          uint64_t v31 = *(void *)(v47 + 8 * v48 + 40) + *(void *)(v47 + 16);
          LODWORD(v55) = *a6;
          HIDWORD(v55) = v24;
          v40[0] = *a7;
          v40[1] = v27;
          sub_21611AC10(a5, &v57, (uint64_t)&v41, v13, v30, v31, (int *)&v55, v40, a8);
          int v26 = v54;
          v25 += v54;
        }
        while (v25 < v11);
      }
      int v21 = v53;
      v20 += v53;
      int v10 = v34;
    }
    while (v20 < v34);
  }
  *(unsigned char *)uint64_t v33 = 0;
  ++*(void *)(v33 + 80);
  *uint64_t v32 = 0;
  v32[1] = 0;
}

void sub_21611AC10(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int *a7, _DWORD *a8, uint64_t a9)
{
  uint64_t v14 = *(void *)(a3 + 32);
  uint64_t v80 = *(void *)(*(void *)a3 + 8 * *(unsigned __int8 *)(a3 + 8) + 40) + *(void *)(*(void *)a3 + 16);
  uint64_t v81 = *(void *)(v14 + 12);
  int v82 = v81;
  uint64_t v78 = a5;
  int v15 = a2[3];
  int v79 = a2[2];
  uint64_t v76 = a6;
  int v77 = v15;
  uint64_t v73 = (void *)a9;
  uint64_t v74 = a9 + 16;
  int v16 = *(_DWORD *)(a9 + 20);
  LODWORD(v75) = v16 & ~(v16 >> 31);
  HIDWORD(v75) = -v16 & ~(-v16 >> 31);
  v72[0] = a9;
  v72[1] = a9 + 16;
  v72[2] = v75;
  v71[0] = a9;
  v71[1] = a9 + 16;
  v71[2] = v75;
  v70[0] = a9;
  v70[1] = a9 + 16;
  v70[2] = v75;
  v69[0] = (void *)a9;
  v69[1] = (void *)(a9 + 16);
  v69[2] = v75;
  v68[0] = (void *)a9;
  v68[1] = (void *)(a9 + 16);
  v68[2] = v75;
  if (v15 >= 4)
  {
    LODWORD(v17) = 0;
    do
    {
      _X11 = v78;
      __asm { PRFM            #0, [X11] }
      _X11 = v78 + 16;
      __asm { PRFM            #0, [X11] }
      _X9 = v80 + 4 * v82 * (int)v17;
      uint64_t v27 = 4;
      do
      {
        __asm { PRFM            #0, [X9] }
        _X12 = _X9 + 16;
        __asm { PRFM            #0, [X12] }
        _X9 += 4 * v82;
        --v27;
      }
      while (v27);
      unsigned int v31 = a2[1] + v17;
      LODWORD(v32) = a2[2];
      if ((int)v32 >= 8)
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        do
        {
          uint64_t v33 = v35 + 8;
          _X12 = v78 + 4 * (v35 + 8);
          __asm { PRFM            #0, [X12] }
          _X12 += 16;
          __asm { PRFM            #0, [X12] }
          uint64_t v39 = v80 + v34 + 4 * (int)v17 * v82;
          uint64_t v40 = 4;
          do
          {
            _X13 = v39 + 32;
            __asm { PRFM            #0, [X13] }
            _X13 = v39 + 48;
            __asm { PRFM            #0, [X13] }
            v39 += 4 * v82;
            --v40;
          }
          while (v40);
          sub_21611B0B8(&v80, v68, a1, &v78, &v76, a7, a8, a4, v35, v17, *a2 + v35, v31, *a2 + v35, v31);
          uint64_t v32 = (int)a2[2];
          v34 += 32;
          uint64_t v35 = v33;
        }
        while (v33 <= v32 - 8);
      }
      else
      {
        LODWORD(v33) = 0;
      }
      while ((int)v33 <= (int)v32 - 4)
      {
        sub_21611B2A4((uint64_t)&v80, v69, a1, &v78, &v76, a7, a8, a4, v33, v17, v33 + *a2, v31, v33 + *a2, v31);
        LODWORD(v33) = v33 + 4;
        LODWORD(v32) = a2[2];
      }
      if ((int)v33 < (int)v32)
      {
        do
        {
          sub_21611B418((uint64_t)&v80, (uint64_t)v70, a1, &v78, &v76, a7, a8, a4, v33, v17, v33 + *a2, v31, v33 + *a2, v31);
          LODWORD(v33) = v33 + 1;
        }
        while ((int)v33 < a2[2]);
      }
      LODWORD(v17) = v17 + 4;
      int v15 = a2[3];
    }
    while ((int)v17 <= v15 - 4);
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if ((int)v17 < v15)
  {
    uint64_t v17 = v17;
    do
    {
      int v45 = a2[1] + v17;
      _X10 = v78;
      __asm { PRFM            #0, [X10] }
      _X10 = v78 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v80 + 4 * v82 * (int)v17;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + 16;
      __asm { PRFM            #0, [X8] }
      LODWORD(_X8) = a2[2];
      if ((int)_X8 >= 8)
      {
        uint64_t v54 = 0;
        uint64_t v55 = 32;
        do
        {
          int v56 = v54;
          v54 += 8;
          _X12 = v78 + v55;
          __asm { PRFM            #0, [X12] }
          _X12 = v78 + v55 + 16;
          __asm { PRFM            #0, [X12] }
          _X10 = v80 + 4 * (int)v17 * v82 + v55;
          __asm { PRFM            #0, [X10] }
          _X10 += 16;
          __asm { PRFM            #0, [X10] }
          sub_21611B518((uint64_t)&v80, (uint64_t)v71, a1, &v78, &v76, a7, a8, a4, v56, v17, v56 + *a2, v45, v56 + *a2, v45);
          _X8 = (int)a2[2];
          v55 += 32;
        }
        while (v54 <= _X8 - 8);
      }
      else
      {
        LODWORD(v54) = 0;
      }
      while ((int)v54 <= (int)_X8 - 4)
      {
        sub_21611B5FC((uint64_t)&v80, (uint64_t)v72, a1, &v78, &v76, a7, a8, a4, v54, v17, v54 + *a2, v45, v54 + *a2, v45);
        LODWORD(v54) = v54 + 4;
        LODWORD(_X8) = a2[2];
      }
      if ((int)v54 < (int)_X8)
      {
        uint64_t v64 = v54;
        do
        {
          int v65 = v64 + *a2;
          int v66 = sub_216119DFC(&v74, *(_DWORD *)(v80 + 4 * (int)v17 * v82 + 4 * v64)+ (*a8 + 128) * *(_DWORD *)(v78 + 4 * v64)+ *(_DWORD *)(*v73 + 4 * v65)+ (*(_DWORD *)(v76 + 4 * v17) + (*a8 + 128) * a4) * (*a7 + 128));
          if (v66 <= -32768) {
            int v67 = -32768;
          }
          else {
            int v67 = v66;
          }
          if (v67 >= 0x7FFF) {
            LOWORD(v67) = 0x7FFF;
          }
          *(_WORD *)(*(void *)a1 + 2 * v65 + 2 * *(_DWORD *)(a1 + 16) * v45) = v67;
          ++v64;
        }
        while (a2[2] > (int)v64);
      }
      ++v17;
    }
    while (a2[3] > (int)v17);
  }
}

void sub_21611B0B8(uint64_t *a1, void **a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14 = 0;
  uint64_t v49 = *MEMORY[0x263EF8340];
  int32x4_t v46 = 0u;
  int32x4_t v47 = 0u;
  int32x4_t v44 = 0u;
  int32x4_t v45 = 0u;
  int32x4_t v42 = 0u;
  int32x4_t v43 = 0u;
  int32x4_t v40 = 0u;
  int32x4_t v41 = 0u;
  uint64_t v15 = *a1;
  uint64_t v16 = *((int *)a1 + 4);
  uint64_t v17 = (long long *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + v15 + 16);
  uint64_t v18 = 4 * v16;
  do
  {
    long long v19 = *v17;
    int v20 = &v40.i8[v14];
    *(_OWORD *)int v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v14 += 32;
    uint64_t v17 = (long long *)((char *)v17 + v18);
  }
  while (v14 != 128);
  uint64_t v21 = 0;
  long long v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v39[0] = *(_OWORD *)(*a4 + 4 * a9);
  v39[1] = v22;
  int32x4_t v23 = *(int32x4_t *)(*a5 + 4 * a10);
  int v24 = *a6;
  unsigned int v25 = *a7 + 128;
  int32x4_t v26 = vdupq_n_s32(v25);
  char v27 = 1;
  do
  {
    uint64_t v28 = 0;
    char v29 = v27;
    int32x4_t v30 = vmulq_s32((int32x4_t)v39[v21], v26);
    unsigned int v31 = &v40.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    char v27 = 0;
    uint64_t v21 = 1;
  }
  while ((v29 & 1) != 0);
  uint64_t v32 = 0;
  int32x4_t v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  v48[0] = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  v48[1] = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  v48[2] = vdupq_laneq_s32(v33, 2);
  v48[3] = vdupq_laneq_s32(v33, 3);
  char v34 = 1;
  do
  {
    uint64_t v35 = 0;
    char v36 = v34;
    uint64_t v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v40 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v40 + v37), (int32x4_t)v48[v35++]);
      v37 += 32;
    }
    while (v35 != 4);
    char v34 = 0;
    uint64_t v32 = 1;
  }
  while ((v36 & 1) != 0);
  v38[4] = v44;
  v38[5] = v45;
  v38[6] = v46;
  v38[7] = v47;
  v38[0] = v40;
  v38[1] = v41;
  v38[2] = v42;
  v38[3] = v43;
  sub_21611B6D0(a2, v38, a3, a11, a12, a13, a14);
}

int16x4_t sub_21611B2A4(uint64_t a1, void **a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(int *)(a1 + 16);
  uint64_t v16 = (int32x4_t *)(*(void *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  uint64_t v17 = 4 * v15;
  do
  {
    *(int32x4_t *)((char *)&v35 + v14) = *v16;
    v14 += 16;
    uint64_t v16 = (int32x4_t *)((char *)v16 + v17);
  }
  while (v14 != 64);
  uint64_t v18 = 0;
  int32x4_t v19 = *(int32x4_t *)(*a4 + 4 * a9);
  int32x4_t v31 = v35;
  int32x4_t v32 = v36;
  int32x4_t v33 = v37;
  int32x4_t v34 = v38;
  int32x4_t v20 = *(int32x4_t *)(*a5 + 4 * a10);
  int v21 = *a6;
  unsigned int v22 = *a7 + 128;
  int32x4_t v23 = vmulq_s32(vdupq_n_s32(v22), v19);
  do
  {
    *(int32x4_t *)((char *)&v31 + v18) = vaddq_s32(*(int32x4_t *)((char *)&v31 + v18), v23);
    v18 += 16;
  }
  while (v18 != 64);
  uint64_t v24 = 0;
  int32x4_t v25 = vmulq_s32(vaddq_s32(vdupq_n_s32(v22 * a8), v20), vdupq_n_s32(v21 + 128));
  int32x4_t v35 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 0);
  int32x4_t v36 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 1);
  int32x4_t v37 = vdupq_laneq_s32(v25, 2);
  int32x4_t v38 = vdupq_laneq_s32(v25, 3);
  do
  {
    *(int32x4_t *)((char *)&v31 + v24) = vaddq_s32(*(int32x4_t *)((char *)&v31 + v24), *(int32x4_t *)((char *)&v35 + v24));
    v24 += 16;
  }
  while (v24 != 64);
  int32x4_t v26 = v31;
  int32x4_t v27 = v32;
  int32x4_t v28 = v33;
  int32x4_t v29 = v34;

  return sub_21611B864(a2, a3, a11, v26, v27, v28, v29, a12, a13, a14);
}

int16x4_t sub_21611B418(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(int *)(a1 + 16);
  uint64_t v16 = (__int32 *)(*(void *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  uint64_t v17 = 4 * v15;
  do
  {
    v20.i32[v14++] = *v16;
    uint64_t v16 = (__int32 *)((char *)v16 + v17);
  }
  while (v14 != 4);
  int32x4_t v18 = vmlaq_s32(vaddq_s32(vdupq_n_s32((*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)), v20), vaddq_s32(vdupq_n_s32((*a7 + 128) * a8), *(int32x4_t *)(*a5 + 4 * a10)), vdupq_n_s32(*a6 + 128));

  return sub_21611B930(a2, a3, a11, v18, a12, a13, a14);
}

int16x8_t sub_21611B518(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v15 = 4 * a9;
  uint64_t v16 = 4 * *(_DWORD *)(a1 + 16) * a10;
  unsigned int v17 = *a7 + 128;
  int32x4_t v18 = vdupq_n_s32(v17);
  int32x4_t v19 = vdupq_n_s32((*(_DWORD *)(*a5 + 4 * a10) + v17 * a8) * (*a6 + 128));
  *(double *)v20.i64 = sub_216119BEC((const float *)(a2 + 8), *(double *)vaddq_s32(vmlaq_s32(vaddq_s32(*(int32x4_t *)(**(void **)a2 + 4 * a11), *(int32x4_t *)(*(void *)a1 + v15 + v16)), v18, *(int32x4_t *)(*a4 + v15)), v19).i64, (int32x2_t)*(_OWORD *)&vaddq_s32(vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(void *)a1 + v15 + 16 + v16), v18, *(int32x4_t *)(*a4 + v15 + 16)), *(int32x4_t *)(**(void **)a2 + 4 * a11 + 16)), v19));
  int16x8_t result = vqmovn_high_s32(vqmovn_s32(v20), v21);
  *(int16x8_t *)(*(void *)a3 + 2 * a13 + 2 * *(_DWORD *)(a3 + 16) * a14) = result;
  return result;
}

int16x4_t sub_21611B5FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v14 = *(const float **)(a2 + 8);
  uint64_t v15 = v14 + 2;
  int32x4_t v16 = (int32x4_t)vld1q_dup_f32(v15);
  int32x4_t v17 = (int32x4_t)vld1q_dup_f32(v14);
  int32x4_t v18 = vqrdmulhq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(vaddq_s32(*(int32x4_t *)(**(void **)a2 + 4 * a11), *(int32x4_t *)(*(void *)a1 + 4 * a9 + 4 * *(_DWORD *)(a1 + 16) * a10)), vdupq_n_s32(*a7 + 128), *(int32x4_t *)(*a4 + 4 * a9)), vdupq_n_s32((*(_DWORD *)(*a5 + 4 * a10) + (*a7 + 128) * a8) * (*a6 + 128))), vdupq_lane_s32(*(int32x2_t *)(a2 + 16), 0)), v17);
  int32x4_t v19 = vdupq_n_s32(-HIDWORD(*(void *)(a2 + 16)));
  int16x4_t result = vqmovn_s32(vaddq_s32(vrshlq_s32(vqaddq_s32(v18, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)v18))), v19), v16));
  *(int16x4_t *)(*(void *)a3 + 2 * a13 + 2 * *(_DWORD *)(a3 + 16) * a14) = result;
  return result;
}

void sub_21611B6D0(void **a1, int32x4_t *a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7)
{
  int32x4_t v10 = a2[5];
  void v18[4] = a2[4];
  v18[5] = v10;
  int32x4_t v11 = a2[7];
  v18[6] = a2[6];
  v18[7] = v11;
  int32x4_t v12 = a2[1];
  v18[0] = *a2;
  v18[1] = v12;
  int32x4_t v13 = a2[3];
  v18[2] = a2[2];
  void v18[3] = v13;
  *(double *)&long long v14 = sub_21611B7A0(a1, v18, a4);
  *(_OWORD *)(*(void *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * a7) = v14;
  *(_OWORD *)(*(void *)a3 + 2 * a6 + 2 * (*(_DWORD *)(a3 + 16) + *(_DWORD *)(a3 + 16) * a7)) = v15;
  *(_OWORD *)(*(void *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * (a7 + 2)) = v16;
  *(_OWORD *)(*(void *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * (a7 + 3)) = v17;
}

double sub_21611B7A0(void **a1, int32x4_t *a2, int a3)
{
  uint64_t v3 = **a1 + 4 * a3;
  int32x4_t v4 = *(int32x4_t *)(v3 + 16);
  int32x4_t v5 = vaddq_s32(*(int32x4_t *)v3, *a2);
  int32x4_t v6 = vaddq_s32(v4, a2[1]);
  int32x4_t v7 = vaddq_s32(*(int32x4_t *)v3, a2[2]);
  int32x4_t v8 = vaddq_s32(v4, a2[3]);
  int32x4_t v9 = vaddq_s32(*(int32x4_t *)v3, a2[4]);
  int32x4_t v10 = vaddq_s32(v4, a2[5]);
  int32x4_t v11 = vaddq_s32(*(int32x4_t *)v3, a2[6]);
  int32x4_t v12 = vaddq_s32(v4, a2[7]);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  int32x4_t v15 = 0u;
  int32x4_t v16 = 0u;
  v14[0] = v5;
  v14[1] = v6;
  v14[2] = v7;
  v14[3] = v8;
  _OWORD v14[4] = v9;
  v14[5] = v10;
  v14[6] = v11;
  v14[7] = v12;
  sub_2161196D8((uint64_t)(a1 + 1), v14, &v15);
  *(void *)&double result = vqmovn_high_s32(vqmovn_s32(v15), v16).u64[0];
  return result;
}

int16x4_t sub_21611B864(void **a1, uint64_t a2, int a3, int32x4_t a4, int32x4_t a5, int32x4_t a6, int32x4_t a7, uint64_t a8, int a9, int a10)
{
  int32x4_t v13 = *(int32x4_t *)(**a1 + 4 * a3);
  *(double *)v14.i64 = sub_2161199F8((uint64_t)(a1 + 1), *(double *)vaddq_s32(v13, a4).i64, *(double *)vaddq_s32(v13, a5).i64, (__n128)vaddq_s32(v13, a6), (__n128)vaddq_s32(v13, a7));
  *(int16x4_t *)(*(void *)a2 + 2 * a9 + 2 * *(_DWORD *)(a2 + 16) * a10) = vqmovn_s32(v14);
  int16x4_t result = vqmovn_s32(v17);
  *(int16x4_t *)(*(void *)a2 + 2 * a9 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a10)) = vqmovn_s32(v15);
  *(int16x4_t *)(*(void *)a2 + 2 * a9 + 2 * *(_DWORD *)(a2 + 16) * (a10 + 2)) = vqmovn_s32(v16);
  *(int16x4_t *)(*(void *)a2 + 2 * a9 + 2 * *(_DWORD *)(a2 + 16) * (a10 + 3)) = result;
  return result;
}

int16x4_t sub_21611B930(uint64_t a1, uint64_t a2, int a3, int32x4_t a4, uint64_t a5, int a6, int a7)
{
  int32x4_t v7 = *(const float **)(a1 + 8);
  int32x4_t v8 = (const float *)(**(void **)a1 + 4 * a3);
  int32x4_t v9 = (int32x4_t)vld1q_dup_f32(v8);
  int32x4_t v10 = vaddq_s32(v9, a4);
  int32x4_t v11 = v7 + 2;
  int32x4_t v12 = (int32x4_t)vld1q_dup_f32(v11);
  int32x4_t v13 = (const float *)(a1 + 16);
  int32x4_t v14 = (int32x4_t)vld1q_dup_f32(v13);
  int32x4_t v15 = vshlq_s32(v10, v14);
  int32x4_t v16 = (int32x4_t)vld1q_dup_f32(v7);
  int32x4_t v17 = vqrdmulhq_s32(v15, v16);
  int32x4_t v18 = vdupq_n_s32(-*(_DWORD *)(a1 + 20));
  int16x4_t result = vqmovn_s32(vaddq_s32(vrshlq_s32(vqaddq_s32(v17, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)v17))), v18), v12));
  uint64_t v20 = *(int *)(a2 + 16);
  long long v21 = (_WORD *)(*(void *)a2 + 2 * a6 + 2 * (int)v20 * a7);
  *long long v21 = result.i16[0];
  v21[v20] = result.i16[1];
  v21[2 * v20] = result.i16[2];
  v21[3 * v20] = result.i16[3];
  return result;
}

void sub_21611B9C0()
{
}

void sub_21611B9D4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 168);
  int v3 = *(_DWORD *)(a1 + 172);
  int v4 = *(_DWORD *)(a1 + 44);
  sub_216119F50((uint64_t)v32, 0, *(void **)(a1 + 8), *(_DWORD **)(a1 + 192));
  int32x4_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 192);
  int32x4_t v27 = v5;
  uint64_t v31 = v6;
  unint64_t v7 = (4 * *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12) + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v8 = v5[3];
  v5[v8 + 5] = v5[4];
  unint64_t v9 = v5[4] + v7;
  uint64_t v10 = v5[10];
  ++v5[3];
  v5[4] = v9;
  char v28 = v8;
  uint64_t v29 = v10;
  char v30 = 5;
  sub_216117C60((uint64_t)v5);
  if (v3 >= 1)
  {
    int v11 = 0;
    uint64_t v12 = *(void *)(a1 + 192);
    int v13 = *(_DWORD *)(v12 + 16);
    int v25 = v3;
    do
    {
      if (v3 - v11 >= v13) {
        int v14 = v13;
      }
      else {
        int v14 = v3 - v11;
      }
      if (v2 >= 1)
      {
        int v15 = 0;
        int v16 = *(_DWORD *)(v12 + 12);
        do
        {
          int v17 = *(_DWORD *)(a1 + 48);
          uint64_t v36 = *(void *)(a1 + 32) + v17 * v15;
          if (v2 - v15 >= v16) {
            int v18 = v16;
          }
          else {
            int v18 = v2 - v15;
          }
          unint64_t v37 = __PAIR64__(v4, v18);
          LODWORD(v38) = v17;
          v35[0] = (uint64_t)v32;
          v35[1] = (uint64_t)&v36;
          sub_216118644(v35);
          unint64_t v19 = *(void *)(a1 + 192);
          uint64_t v36 = *(void *)(a1 + 24);
          unint64_t v37 = v19;
          int32x4_t v38 = &v27;
          uint64_t v39 = v32;
          uint64_t v40 = a1 + 56;
          sub_216118BC4((uint64_t)&v36, v4);
          int v20 = *(_DWORD *)(a1 + 164) + v11;
          LODWORD(v36) = *(_DWORD *)(a1 + 160) + v15;
          HIDWORD(v36) = v20;
          unint64_t v37 = __PAIR64__(v14, v18);
          uint64_t v21 = *(void *)(v33 + 8 * v34 + 40) + *(void *)(v33 + 16);
          uint64_t v22 = *(void *)(*(void *)(a1 + 72) + 8 * *(unsigned __int8 *)(a1 + 104) + 40)
              + *(void *)(*(void *)(a1 + 72) + 16);
          int32x4_t v23 = *(_DWORD **)(a1 + 184);
          LODWORD(v35[0]) = **(_DWORD **)(a1 + 176);
          HIDWORD(v35[0]) = v18;
          v26[0] = *v23;
          v26[1] = v14;
          sub_21611AC10(a1 + 136, &v36, (uint64_t)&v27, v4, v21, v22, (int *)v35, v26, *(void *)(a1 + 200));
          uint64_t v12 = *(void *)(a1 + 192);
          int v16 = *(_DWORD *)(v12 + 12);
          v15 += v16;
        }
        while (v15 < v2);
        int v13 = *(_DWORD *)(v12 + 16);
        int v3 = v25;
      }
      v11 += v13;
    }
    while (v11 < v3);
  }
  uint64_t v24 = *(void *)(a1 + 8);
  *(unsigned char *)uint64_t v24 = 0;
  ++*(void *)(v24 + 80);
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 32) = 0;
}

const char *sub_21611BBEC()
{
  return "NEON, 4x4, depth 16, accumulating two within signed int16";
}

int32x4_t *sub_21611BBF8(uint64_t a1, int32x4_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, int8x16_t *a6, uint64_t a7, uint64_t a8)
{
  int8x16_t v9 = *a6;
  uint64_t v8 = a6 + 1;
  int32x4_t v10 = vdupq_n_s32(0);
  int8x16_t v12 = *a5;
  int v11 = a5 + 1;
  int32x4_t v13 = v10;
  int8x16_t v14 = *v8++;
  int32x4_t v15 = v10;
  int8x16_t v16 = *v11++;
  int32x4_t v17 = v10;
  int8x16_t v18 = *v8++;
  int32x4_t v19 = v10;
  int8x16_t v21 = *v8;
  int v20 = v8 + 1;
  int32x4_t v22 = v10;
  int8x16_t v23 = *v11++;
  int32x4_t v24 = v10;
  int8x16_t v26 = *v11;
  int v25 = v11 + 1;
  int32x4_t v27 = v10;
  int32x4_t v28 = v10;
  int32x4_t v29 = v10;
  int32x4_t v30 = v10;
  int32x4_t v31 = v10;
  int32x4_t v32 = v10;
  int32x4_t v33 = v10;
  int32x4_t v34 = v10;
  int32x4_t v35 = v10;
  uint64_t v36 = 4 * a4;
  int16x8_t v37 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v12.i8), v9, v12);
  int16x8_t v38 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v12.i8), v14, v12);
  int16x8_t v39 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v12.i8), v18, v12);
  int16x8_t v40 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v12.i8), v21, v12);
  int16x8_t v41 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v16.i8), v9, v16);
  int16x8_t v42 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v16.i8), v14, v16);
  int16x8_t v43 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v16.i8), v18, v16);
  int16x8_t v44 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v16.i8), v21, v16);
  for (uint64_t i = a8 - 16; i; v44 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v48.i8), v21, v48))
  {
    int32x4_t v10 = vpadalq_s16(v10, v37);
    int8x16_t v47 = *v25;
    int32x4_t v46 = v25 + 1;
    int32x4_t v13 = vpadalq_s16(v13, v38);
    int8x16_t v48 = *v46++;
    int32x4_t v15 = vpadalq_s16(v15, v39);
    int32x4_t v17 = vpadalq_s16(v17, v40);
    int32x4_t v19 = vpadalq_s16(v19, v41);
    int32x4_t v22 = vpadalq_s16(v22, v42);
    int32x4_t v24 = vpadalq_s16(v24, v43);
    int32x4_t v27 = vpadalq_s16(v27, v44);
    int16x8_t v49 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v23.i8), v9, v23);
    int16x8_t v50 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v23.i8), v14, v23);
    int16x8_t v51 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v23.i8), v18, v23);
    int16x8_t v52 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v23.i8), v21, v23);
    int8x16_t v23 = *v46++;
    int16x8_t v53 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v26.i8), v9, v26);
    int8x16_t v9 = *v20;
    uint64_t v54 = v20 + 1;
    int16x8_t v55 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v26.i8), v14, v26);
    int8x16_t v14 = *v54++;
    int16x8_t v56 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v26.i8), v18, v26);
    int8x16_t v18 = *v54++;
    int16x8_t v57 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v26.i8), v21, v26);
    int8x16_t v21 = *v54;
    int v20 = v54 + 1;
    int32x4_t v28 = vpadalq_s16(v28, v49);
    int32x4_t v29 = vpadalq_s16(v29, v50);
    int8x16_t v26 = *v46;
    int v25 = v46 + 1;
    int32x4_t v30 = vpadalq_s16(v30, v51);
    int32x4_t v31 = vpadalq_s16(v31, v52);
    int32x4_t v32 = vpadalq_s16(v32, v53);
    int32x4_t v33 = vpadalq_s16(v33, v55);
    int32x4_t v34 = vpadalq_s16(v34, v56);
    int32x4_t v35 = vpadalq_s16(v35, v57);
    int16x8_t v37 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v47.i8), v9, v47);
    int16x8_t v38 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v47.i8), v14, v47);
    int16x8_t v39 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v47.i8), v18, v47);
    int16x8_t v40 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v47.i8), v21, v47);
    i -= 16;
    int16x8_t v41 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v48.i8), v9, v48);
    int16x8_t v42 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v48.i8), v14, v48);
    int16x8_t v43 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v48.i8), v18, v48);
  }
  int32x4_t v58 = vpadalq_s16(v10, v37);
  int32x4_t v59 = vpadalq_s16(v13, v38);
  int32x4_t v60 = vpadalq_s16(v15, v39);
  int32x4_t v61 = vpadalq_s16(v17, v40);
  int16x8_t v62 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v23.i8), v9, v23);
  int16x8_t v63 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v23.i8), v14, v23);
  int16x8_t v64 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v23.i8), v18, v23);
  int16x8_t v65 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v23.i8), v21, v23);
  int32x4_t v66 = vpadalq_s16(v32, vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v26.i8), v9, v26));
  int32x4_t v67 = vpadalq_s16(v33, vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v26.i8), v14, v26));
  int32x4_t v68 = vpadalq_s16(v34, vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v26.i8), v18, v26));
  int32x4_t v69 = vpadalq_s16(v35, vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v26.i8), v21, v26));
  int32x4_t v70 = vpaddq_s32(v58, vpadalq_s16(v19, v41));
  int32x4_t v71 = vpaddq_s32(v59, vpadalq_s16(v22, v42));
  int32x4_t v72 = vpaddq_s32(v60, vpadalq_s16(v24, v43));
  int32x4_t v73 = vpaddq_s32(v61, vpadalq_s16(v27, v44));
  int32x4_t v74 = vpaddq_s32(vpadalq_s16(v28, v62), v66);
  int32x4_t v75 = vpaddq_s32(vpadalq_s16(v29, v63), v67);
  int32x4_t v76 = vpaddq_s32(vpadalq_s16(v30, v64), v68);
  int32x4_t v77 = vpaddq_s32(vpadalq_s16(v31, v65), v69);
  if (a7)
  {
    int v82 = (int32x4_t *)((char *)a2 + v36 + v36);
    int32x4_t v78 = vaddq_s32(*a2, vpaddq_s32(v70, v74));
    int32x4_t v79 = vaddq_s32(*(int32x4_t *)((char *)a2 + v36), vpaddq_s32(v71, v75));
    int32x4_t v80 = vaddq_s32(*v82, vpaddq_s32(v72, v76));
    int32x4_t v81 = vaddq_s32(*(int32x4_t *)((char *)v82 + v36), vpaddq_s32(v73, v77));
  }
  else
  {
    int32x4_t v78 = vpaddq_s32(v70, v74);
    int32x4_t v79 = vpaddq_s32(v71, v75);
    int32x4_t v80 = vpaddq_s32(v72, v76);
    int32x4_t v81 = vpaddq_s32(v73, v77);
  }
  *a2 = v78;
  *(int32x4_t *)((char *)a2 + v36) = v79;
  uint64_t v83 = (int32x4_t *)((char *)a2 + v36 + v36);
  *uint64_t v83 = v80;
  int16x4_t result = (int32x4_t *)((char *)v83 + v36);
  int32x4_t *result = v81;
  return result;
}

void sub_21611BEB4()
{
}

double sub_21611BEC8(int16x8_t a1)
{
  v1.i64[0] = 0x1000100010001000;
  v1.i64[1] = 0x1000100010001000;
  int16x8_t v2 = vaddq_s16(vqshlq_n_s16((int16x8_t)(*(_OWORD *)&a1 | __PAIR128__(0xFC00FC00FC00FC00, 0xFC00FC00FC00FC00)), 3uLL), v1);
  int16x8_t v3 = vqrdmulhq_s16(v2, v2);
  int16x8_t v4 = vqrdmulhq_s16(v3, v3);
  int16x8_t v5 = vaddq_s16(vqrdmulhq_s16(vrsraq_n_s16(vqrdmulhq_s16(v3, v2), vqaddq_s16(v4, vcltzq_s16(v4)), 2uLL), vdupq_n_s16(0x2AABu)), v3);
  int16x8_t v6 = vdupq_n_s16(0x70F6u);
  int16x8_t v7 = vqaddq_s16(v6, vqrdmulhq_s16(v6, vrsraq_n_s16(v2, vqaddq_s16(v5, vcltzq_s16(v5)), 1uLL)));
  int8x16_t v8 = (int8x16_t)vsubq_s16((int16x8_t)(*(_OWORD *)&a1 | __PAIR128__(0xFC00FC00FC00FC00, 0xFC00FC00FC00FC00)), a1);
  v5.i64[0] = 0x400040004000400;
  v5.i64[1] = 0x400040004000400;
  int16x8_t v9 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v7, (int8x16_t)vqrdmulhq_s16(v7, vdupq_n_s16(0x63B0u)));
  v5.i64[0] = 0x800080008000800;
  v5.i64[1] = 0x800080008000800;
  int16x8_t v10 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v9, (int8x16_t)vqrdmulhq_s16(v9, vdupq_n_s16(0x4DA3u)));
  int16x8_t v11 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v10, (int8x16_t)vqrdmulhq_s16(v10, vdupq_n_s16(0x2F17u)));
  v1.i64[0] = 0x2000200020002000;
  v1.i64[1] = 0x2000200020002000;
  int16x8_t v12 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v11, (int8x16_t)vqrdmulhq_s16(v11, vdupq_n_s16(0x1153u)));
  v1.i64[0] = 0x4000400040004000;
  v1.i64[1] = 0x4000400040004000;
  int8x16_t v13 = (int8x16_t)vceqzq_s16(a1);
  *(void *)&double result = vorrq_s8((int8x16_t)(*(_OWORD *)&v13 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v12, (int8x16_t)vqrdmulhq_s16(v12, vdupq_n_s16(0x258u))), v13)).u64[0];
  return result;
}

double sub_21611BFC0(int16x8_t a1)
{
  v1.i64[0] = 0x1000100010001000;
  v1.i64[1] = 0x1000100010001000;
  int16x8_t v2 = vaddq_s16(vqshlq_n_s16((int16x8_t)(*(_OWORD *)&a1 | __PAIR128__(0xFE00FE00FE00FE00, 0xFE00FE00FE00FE00)), 4uLL), v1);
  int16x8_t v3 = vqrdmulhq_s16(v2, v2);
  int16x8_t v4 = vqrdmulhq_s16(v3, v3);
  int16x8_t v5 = vaddq_s16(vqrdmulhq_s16(vrsraq_n_s16(vqrdmulhq_s16(v3, v2), vqaddq_s16(v4, vcltzq_s16(v4)), 2uLL), vdupq_n_s16(0x2AABu)), v3);
  int16x8_t v6 = vdupq_n_s16(0x70F6u);
  int16x8_t v7 = vqaddq_s16(v6, vqrdmulhq_s16(v6, vrsraq_n_s16(v2, vqaddq_s16(v5, vcltzq_s16(v5)), 1uLL)));
  int8x16_t v8 = (int8x16_t)vsubq_s16((int16x8_t)(*(_OWORD *)&a1 | __PAIR128__(0xFE00FE00FE00FE00, 0xFE00FE00FE00FE00)), a1);
  v5.i64[0] = 0x200020002000200;
  v5.i64[1] = 0x200020002000200;
  int16x8_t v9 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v7, (int8x16_t)vqrdmulhq_s16(v7, vdupq_n_s16(0x63B0u)));
  v5.i64[0] = 0x400040004000400;
  v5.i64[1] = 0x400040004000400;
  int16x8_t v10 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v9, (int8x16_t)vqrdmulhq_s16(v9, vdupq_n_s16(0x4DA3u)));
  v5.i64[0] = 0x800080008000800;
  v5.i64[1] = 0x800080008000800;
  int16x8_t v11 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v10, (int8x16_t)vqrdmulhq_s16(v10, vdupq_n_s16(0x2F17u)));
  int16x8_t v12 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v11, (int8x16_t)vqrdmulhq_s16(v11, vdupq_n_s16(0x1153u)));
  v1.i64[0] = 0x2000200020002000;
  v1.i64[1] = 0x2000200020002000;
  int16x8_t v13 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v12, (int8x16_t)vqrdmulhq_s16(v12, vdupq_n_s16(0x258u)));
  v1.i64[0] = 0x4000400040004000;
  v1.i64[1] = 0x4000400040004000;
  int8x16_t v14 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1));
  v1.i64[0] = 0xB000B000B000BLL;
  v1.i64[1] = 0xB000B000B000BLL;
  int8x16_t v15 = (int8x16_t)vceqzq_s16(a1);
  *(void *)&double result = vorrq_s8((int8x16_t)(*(_OWORD *)&v15 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8(vbslq_s8(v14, (int8x16_t)v13, (int8x16_t)vqrdmulhq_s16(v13, v1)), v15)).u64[0];
  return result;
}

uint64_t sub_21611C0D0(int a1)
{
  int v1 = (__int16)a1 - 1;
  if (a1 << 16 != 0x80000000) {
    int v1 = (__int16)a1 + 1;
  }
  int v2 = v1 + 0x7FFF;
  int v3 = v1 + 0x8000;
  if (v2 >= 0) {
    int v3 = v2;
  }
  int v4 = v3 >> 1;
  if (v2 >= 2) {
    int v5 = -16383;
  }
  else {
    int v5 = 0x4000;
  }
  signed int v6 = ((v5 - 15420 * v4 + (v5 - 15420 * v4 < 0 ? 0x7FFF : 0)) >> 15) + 23130;
  int v7 = 3;
  do
  {
    if ((unsigned __int16)v4 == 0x8000 && (unsigned __int16)v6 == 0x8000)
    {
      LOWORD(v8) = -24575;
LABEL_19:
      int v13 = (__int16)v8 * (__int16)v6;
      if (v13 < 0) {
        int v14 = -16383;
      }
      else {
        int v14 = 0x4000;
      }
      BOOL v11 = __OFADD__(v14, v13);
      int v15 = v14 + v13;
      if (v15 < 0 != v11) {
        v15 += 0x7FFF;
      }
      int v9 = v15 >> 15;
      goto LABEL_25;
    }
    int v9 = v4 * (__int16)v6;
    if (v9 < 0) {
      int v10 = -16383;
    }
    else {
      int v10 = 0x4000;
    }
    BOOL v11 = __OFADD__(v10, v9);
    int v12 = v10 + v9;
    LOWORD(v9) = 0x7FFF;
    if (v12 < 0 != v11) {
      v12 += 0x7FFF;
    }
    int v8 = 0x2000 - (v12 >> 15);
    if ((unsigned __int16)v6 != 0x8000 || (unsigned __int16)v8 != 0x8000) {
      goto LABEL_19;
    }
LABEL_25:
    int v16 = (__int16)v9;
    uint64_t v17 = 4 * (__int16)v9;
    if (v17 >= 0x7FFF) {
      uint64_t v17 = 0x7FFFLL;
    }
    if (v17 <= -32768) {
      LOWORD(v17) = 0x8000;
    }
    if (v16 >= 0x2000) {
      LOWORD(v17) = 0x7FFF;
    }
    if (v16 <= -8192) {
      __int16 v18 = 0x8000;
    }
    else {
      __int16 v18 = v17;
    }
    signed int v6 = (__int16)(v18 + v6);
    --v7;
  }
  while (v7);
  uint64_t v19 = 2 * (__int16)v6;
  if (v19 >= 0x7FFF) {
    uint64_t v19 = 0x7FFFLL;
  }
  if (v19 <= -32768) {
    LODWORD(v19) = -32768;
  }
  if (v6 >= 0x4000) {
    LODWORD(v19) = 0x7FFF;
  }
  if (v6 <= -16384) {
    return 4294934528;
  }
  else {
    return v19;
  }
}

uint64_t sub_21611C220(__int16 a1)
{
  __int16 v2 = a1 | 0xFC00;
  unsigned int v3 = sub_21611C340(8 * (a1 & 0x3FF | 0x1C00u));
  if ((v3 & 0x8000u) != 0) {
    int v4 = -16383;
  }
  else {
    int v4 = 0x4000;
  }
  unsigned int v5 = (v4 + 25520 * (__int16)v3 + (v4 + 25520 * (__int16)v3 < 0 ? 0x7FFF : 0)) >> 15;
  if (((v2 - a1) & 0x400) == 0) {
    unsigned int v5 = v3;
  }
  if ((v5 & 0x8000u) != 0) {
    int v6 = -16383;
  }
  else {
    int v6 = 0x4000;
  }
  if (((v2 - a1) & 0x800) != 0) {
    unsigned int v5 = (v6 + 19875 * (__int16)v5 + (v6 + 19875 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  }
  if ((v5 & 0x8000u) != 0) {
    int v7 = -16383;
  }
  else {
    int v7 = 0x4000;
  }
  if (((v2 - a1) & 0x1000) != 0) {
    unsigned int v5 = (v7 + 12055 * (__int16)v5 + (v7 + 12055 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  }
  if ((v5 & 0x8000u) != 0) {
    int v8 = -16383;
  }
  else {
    int v8 = 0x4000;
  }
  if (((v2 - a1) & 0x2000) != 0) {
    unsigned int v5 = (v8 + 4435 * (__int16)v5 + (v8 + 4435 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  }
  if ((v5 & 0x8000u) != 0) {
    int v9 = -16383;
  }
  else {
    int v9 = 0x4000;
  }
  unsigned int v10 = (v9 + 600 * (__int16)v5 + (v9 + 600 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if (((v2 - a1) & 0x4000) != 0) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v5;
  }
  if (a1) {
    return v11;
  }
  else {
    return 0x7FFFLL;
  }
}

uint64_t sub_21611C340(int a1)
{
  int v1 = (__int16)(a1 + 4096);
  unsigned int v2 = (v1 * v1 + 0x4000) >> 15;
  if ((unsigned __int16)(a1 + 4096) == 0x8000) {
    LOWORD(v2) = 0x7FFF;
  }
  int v3 = (__int16)v2 * v1;
  if (v3 < 0) {
    int v4 = -16383;
  }
  else {
    int v4 = 0x4000;
  }
  BOOL v5 = __OFADD__(v4, v3);
  int v6 = v4 + v3;
  if (v6 < 0 != v5) {
    v6 += 0x7FFF;
  }
  int v7 = (__int16)v2 * (__int16)v2 + 0x4000;
  unsigned int v8 = ((__int16)(v7 >> 15) >> 2) + (v6 >> 15);
  if (((v7 >> 15) & 3) > (v7 >> 30) + 1) {
    LOWORD(v8) = v8 + 1;
  }
  if ((v8 & 0x8000u) != 0) {
    int v9 = -16383;
  }
  else {
    int v9 = 0x4000;
  }
  __int16 v10 = v2 + (v9 + 10923 * (__int16)v8) / 0x8000;
  unsigned int v11 = a1 + 4096 + (v10 >> 1);
  if ((v10 & 1u) > (unsigned __int16)(v10 & 0x8000) >> 15) {
    LOWORD(v11) = v11 + 1;
  }
  if ((v11 & 0x8000u) != 0) {
    int v12 = -16383;
  }
  else {
    int v12 = 0x4000;
  }
  int v13 = (__int16)((v12 + 28918 * (__int16)v11) / 0x8000) + 28918;
  if (v13 >= 0x7FFF) {
    int v13 = 0x7FFF;
  }
  if (v13 <= -32768) {
    return 4294934528;
  }
  else {
    return v13;
  }
}

uint64_t sub_21611C428(int a1)
{
  int v1 = (__int16)a1 - 1;
  if (a1 << 16 != 0x80000000) {
    int v1 = (__int16)a1 + 1;
  }
  int v2 = v1 + 0x7FFF;
  int v3 = v1 + 0x8000;
  if (v2 >= 0) {
    int v3 = v2;
  }
  int v4 = v3 >> 1;
  if (v2 >= 2) {
    int v5 = -16383;
  }
  else {
    int v5 = 0x4000;
  }
  unsigned int v6 = ((v5 - 15420 * v4 + (v5 - 15420 * v4 < 0 ? 0x7FFF : 0)) >> 15) + 23130;
  int v7 = 3;
  do
  {
    if ((unsigned __int16)v4 == 0x8000 && (unsigned __int16)v6 == 0x8000)
    {
      LOWORD(v8) = -24575;
LABEL_19:
      int v13 = (__int16)v8 * (__int16)v6;
      if (v13 < 0) {
        int v14 = -16383;
      }
      else {
        int v14 = 0x4000;
      }
      BOOL v11 = __OFADD__(v14, v13);
      int v15 = v14 + v13;
      if (v15 < 0 != v11) {
        v15 += 0x7FFF;
      }
      int v9 = v15 >> 15;
      goto LABEL_25;
    }
    int v9 = v4 * (__int16)v6;
    if (v9 < 0) {
      int v10 = -16383;
    }
    else {
      int v10 = 0x4000;
    }
    BOOL v11 = __OFADD__(v10, v9);
    int v12 = v10 + v9;
    LOWORD(v9) = 0x7FFF;
    if (v12 < 0 != v11) {
      v12 += 0x7FFF;
    }
    int v8 = 0x2000 - (v12 >> 15);
    if ((unsigned __int16)v6 != 0x8000 || (unsigned __int16)v8 != 0x8000) {
      goto LABEL_19;
    }
LABEL_25:
    int v16 = (__int16)v9;
    uint64_t v17 = 4 * (__int16)v9;
    if (v17 >= 0x7FFF) {
      uint64_t v17 = 0x7FFFLL;
    }
    if (v17 <= -32768) {
      LODWORD(v17) = -32768;
    }
    if (v16 >= 0x2000) {
      LODWORD(v17) = 0x7FFF;
    }
    if (v16 <= -8192) {
      int v18 = -32768;
    }
    else {
      int v18 = v17;
    }
    v6 += v18;
    --v7;
  }
  while (v7);
  int v19 = (__int16)(v6 - 0x2000);
  uint64_t v20 = (uint64_t)((unint64_t)(v6 - 0x2000) << 48) >> 46;
  if (v20 >= 0x7FFF) {
    uint64_t v20 = 0x7FFFLL;
  }
  if (v20 <= -32768) {
    LODWORD(v20) = -32768;
  }
  if (v19 >= 0x2000) {
    LODWORD(v20) = 0x7FFF;
  }
  if (v19 <= -8192) {
    return 4294934528;
  }
  else {
    return v20;
  }
}

uint64_t sub_21611C57C(__int16 a1)
{
  __int16 v2 = a1 | 0xFE00;
  unsigned int v3 = sub_21611C340(16 * (a1 & 0x1FF | 0xE00u));
  if ((v3 & 0x8000u) != 0) {
    int v4 = -16383;
  }
  else {
    int v4 = 0x4000;
  }
  unsigned int v5 = (v4 + 25520 * (__int16)v3 + (v4 + 25520 * (__int16)v3 < 0 ? 0x7FFF : 0)) >> 15;
  if (((v2 - a1) & 0x200) == 0) {
    unsigned int v5 = v3;
  }
  if ((v5 & 0x8000u) != 0) {
    int v6 = -16383;
  }
  else {
    int v6 = 0x4000;
  }
  if (((v2 - a1) & 0x400) != 0) {
    unsigned int v5 = (v6 + 19875 * (__int16)v5 + (v6 + 19875 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  }
  if ((v5 & 0x8000u) != 0) {
    int v7 = -16383;
  }
  else {
    int v7 = 0x4000;
  }
  if (((v2 - a1) & 0x800) != 0) {
    unsigned int v5 = (v7 + 12055 * (__int16)v5 + (v7 + 12055 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  }
  if ((v5 & 0x8000u) != 0) {
    int v8 = -16383;
  }
  else {
    int v8 = 0x4000;
  }
  if (((v2 - a1) & 0x1000) != 0) {
    unsigned int v5 = (v8 + 4435 * (__int16)v5 + (v8 + 4435 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  }
  if ((v5 & 0x8000u) != 0) {
    int v9 = -16383;
  }
  else {
    int v9 = 0x4000;
  }
  if (((v2 - a1) & 0x2000) != 0) {
    unsigned int v5 = (v9 + 600 * (__int16)v5 + (v9 + 600 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  }
  if ((v5 & 0x8000u) != 0) {
    int v10 = -16383;
  }
  else {
    int v10 = 0x4000;
  }
  unsigned int v11 = (v10 + 11 * (__int16)v5 + (v10 + 11 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if (((v2 - a1) & 0x4000) != 0) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = v5;
  }
  if (a1) {
    return v12;
  }
  else {
    return 0x7FFFLL;
  }
}

void sub_21611C6C8(uint64_t a1, int32x2_t *a2, int32x2_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a4 + 8);
  int v8 = *(_DWORD *)(a4 + 12);
  __int32 v9 = a2[1].i32[1];
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v9 != 0)
  {
    if (v7 >= v8)
    {
      int8x16_t v21 = &unk_26C6C71E0;
      sub_21611C8F8(a1, (unint64_t)&v21, (uint64_t)a2, a3, a4, a5, a6, a7);
    }
    else
    {
      int v12 = *(_DWORD *)(a4 + 16);
      uint64_t v34 = *(void *)a4;
      int v35 = v8;
      int v36 = v7;
      int v37 = v12;
      __int32 v13 = a3[2].i32[0];
      v32[0] = *a3;
      v32[1] = vrev64_s32(a3[1]);
      __int32 v33 = v13;
      __int32 v14 = a2[1].i32[0];
      __int32 v15 = a2[2].i32[0];
      int32x2_t v28 = *a2;
      __int32 v29 = v9;
      __int32 v30 = v14;
      __int32 v31 = v15;
      uint64_t v16 = *(void *)a6;
      uint64_t v26 = *(void *)a5;
      uint64_t v27 = v16;
      int v17 = *(_DWORD *)(a7 + 8);
      uint64_t v18 = *(void *)(a7 + 16);
      int v19 = *(_DWORD *)(a7 + 24);
      uint64_t v20 = *(void *)(a7 + 28);
      int8x16_t v21 = *(void **)a7;
      int v22 = v17;
      uint64_t v23 = v18;
      int v24 = v19;
      uint64_t v25 = v20;
      sub_21611C7E0(a1, (uint64_t)v32, &v28, (uint64_t)&v34, &v27, &v26, (uint64_t)&v21);
    }
  }
}

void sub_21611C7E0(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a4 + 8);
  int v8 = *(_DWORD *)(a4 + 12);
  int v9 = *(_DWORD *)(a2 + 12);
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v9 != 0)
  {
    if (v7 >= v8)
    {
      int8x16_t v21 = &unk_26C6C71E0;
      sub_21611CD68(a1, (unint64_t)&v21, a2, a3, a4, a5, a6, a7);
    }
    else
    {
      int v12 = *(_DWORD *)(a4 + 16);
      uint64_t v34 = *(void *)a4;
      int v35 = v8;
      int v36 = v7;
      int v37 = v12;
      __int32 v13 = a3[2].i32[0];
      v32[0] = *a3;
      v32[1] = vrev64_s32(a3[1]);
      __int32 v33 = v13;
      int v14 = *(_DWORD *)(a2 + 8);
      int v15 = *(_DWORD *)(a2 + 16);
      uint64_t v28 = *(void *)a2;
      int v29 = v9;
      int v30 = v14;
      int v31 = v15;
      uint64_t v16 = *(void *)a6;
      uint64_t v26 = *(void *)a5;
      uint64_t v27 = v16;
      int v17 = *(_DWORD *)(a7 + 8);
      uint64_t v18 = *(void *)(a7 + 16);
      int v19 = *(_DWORD *)(a7 + 24);
      uint64_t v20 = *(void *)(a7 + 28);
      int8x16_t v21 = *(void **)a7;
      int v22 = v17;
      uint64_t v23 = v18;
      int v24 = v19;
      uint64_t v25 = v20;
      sub_21611C6C8(a1, v32, &v28, &v34, &v27, &v26, &v21);
    }
  }
}

void sub_21611C8F8(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a1 + 100);
  if (v10 == 1) {
    goto LABEL_17;
  }
  uint64_t v12 = *(int *)(a5 + 8);
  int v11 = *(_DWORD *)(a5 + 12);
  int v28 = *(_DWORD *)(a3 + 12);
  if (!v10)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797B340, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797B340))
    {
      dword_26797B338 = sysconf(57);
      __cxa_guard_release(&qword_26797B340);
    }
    int v10 = dword_26797B338;
  }
  int v13 = v12 + 15;
  if ((int)v12 + 15 < 0) {
    int v13 = v12 + 30;
  }
  int v14 = v13 >> 4;
  if (v14 >= v10) {
    int v15 = v10;
  }
  else {
    int v15 = v14;
  }
  if (v15 >= 2)
  {
    unint64_t v16 = (unint64_t)(v11 * (uint64_t)(int)v12 * v28) >> 16;
    if (v15 < (int)v16) {
      LODWORD(v16) = v15;
    }
    if ((int)v16 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = v16;
    }
  }
  if (v15 == 1)
  {
LABEL_17:
    sub_21611EE2C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    sub_216117B94(v31, v12, v11, v28, v15, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
    sub_216119F50((uint64_t)&v30, 1, (void *)a1, v31);
    sub_216117C60(a1);
    if (v11 >= 1)
    {
      int v17 = 0;
      int v21 = v11;
      signed int v18 = v32;
      do
      {
        __int32 v19 = a4[2].i32[0];
        int v29 = v17;
        uint64_t v20 = (uint64_t *)(*(void *)a4 + v19 * v17);
        if (v11 - v17 < v18) {
          signed int v18 = v11 - v17;
        }
        int v35 = (uint64_t *)__PAIR64__(v28, v18);
        LODWORD(v36) = v19;
        v33[0] = (uint64_t)&v30;
        v33[1] = (uint64_t)&v34;
        uint64_t v34 = v20;
        sub_216118644(v33);
        uint64_t v34 = 0;
        int v35 = 0;
        uint64_t v36 = 0;
        if (v15 >= 1) {
          operator new();
        }
        sub_216117D08((void *)(a1 + 104), &v34);
        int v11 = v21;
        if (v34)
        {
          int v35 = v34;
          operator delete(v34);
        }
        signed int v18 = v32;
        v17 += v32;
      }
      while (v32 + v29 < v21);
    }
    *(unsigned char *)a1 = 0;
    ++*(void *)(a1 + 80);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
}

void sub_21611CD20(_Unwind_Exception *a1)
{
}

void sub_21611CD68(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a1 + 100);
  if (v10 == 1) {
    goto LABEL_17;
  }
  uint64_t v12 = *(int *)(a5 + 8);
  int v11 = *(_DWORD *)(a5 + 12);
  int v28 = *(_DWORD *)(a3 + 12);
  if (!v10)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797B340, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797B340))
    {
      dword_26797B338 = sysconf(57);
      __cxa_guard_release(&qword_26797B340);
    }
    int v10 = dword_26797B338;
  }
  int v13 = v12 + 15;
  if ((int)v12 + 15 < 0) {
    int v13 = v12 + 30;
  }
  int v14 = v13 >> 4;
  if (v14 >= v10) {
    int v15 = v10;
  }
  else {
    int v15 = v14;
  }
  if (v15 >= 2)
  {
    unint64_t v16 = (unint64_t)(v11 * (uint64_t)(int)v12 * v28) >> 16;
    if (v15 < (int)v16) {
      LODWORD(v16) = v15;
    }
    if ((int)v16 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = v16;
    }
  }
  if (v15 == 1)
  {
LABEL_17:
    sub_21611D1D8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    sub_216117B94(v31, v12, v11, v28, v15, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
    sub_216119F50((uint64_t)&v30, 1, (void *)a1, v31);
    sub_216117C60(a1);
    if (v11 >= 1)
    {
      int v17 = 0;
      int v21 = v11;
      signed int v18 = v32;
      do
      {
        __int32 v19 = a4[2].i32[0];
        int v29 = v17;
        uint64_t v20 = (uint64_t *)(*(void *)a4 + v19 * v17);
        if (v11 - v17 < v18) {
          signed int v18 = v11 - v17;
        }
        int v35 = (uint64_t *)__PAIR64__(v28, v18);
        LODWORD(v36) = v19;
        v33[0] = (uint64_t)&v30;
        v33[1] = (uint64_t)&v34;
        uint64_t v34 = v20;
        sub_216118644(v33);
        uint64_t v34 = 0;
        int v35 = 0;
        uint64_t v36 = 0;
        if (v15 >= 1) {
          operator new();
        }
        sub_216117D08((void *)(a1 + 104), &v34);
        int v11 = v21;
        if (v34)
        {
          int v35 = v34;
          operator delete(v34);
        }
        signed int v18 = v32;
        v17 += v32;
      }
      while (v32 + v29 < v21);
    }
    *(unsigned char *)a1 = 0;
    ++*(void *)(a1 + 80);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
}

void sub_21611D190(_Unwind_Exception *a1)
{
}

void sub_21611D1D8(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a5 + 8);
  int v11 = *(_DWORD *)(a5 + 12);
  int v13 = *(_DWORD *)(a3 + 12);
  sub_216117B94(v52, v10, v11, v13, 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
  sub_216119F50((uint64_t)v49, 0, (void *)a1, v52);
  sub_216119F50((uint64_t)v46, 1, (void *)a1, v52);
  uint64_t v41 = a1;
  int32x4_t v45 = v52;
  unint64_t v14 = (4 * v54 * v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 8 * v15 + 40) = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 80);
  int v32 = (void *)(a1 + 24);
  uint64_t v33 = a1;
  ++*(void *)(a1 + 24);
  *(void *)(a1 + 32) += v14;
  char v42 = v15;
  uint64_t v43 = v16;
  char v44 = 5;
  sub_216117C60(a1);
  int v17 = v54;
  if (v54 >= v11)
  {
    unint64_t v18 = (unint64_t)*a4;
    __int32 v19 = a4[2].i32[0];
    int32x4_t v58 = (unsigned int *)vrev64_s32(a4[1]);
    LODWORD(v59) = v19;
    int16x8_t v55 = v46;
    int16x8_t v56 = &v57;
    unint64_t v57 = v18;
    sub_216118644((uint64_t *)&v55);
  }
  if (v10 >= 1)
  {
    int v20 = 0;
    int v21 = v53;
    int v34 = v10;
    do
    {
      int v22 = *(_DWORD *)(a3 + 16);
      unint64_t v23 = *(void *)a3 + v22 * v20;
      if (v10 - v20 >= v21) {
        unsigned int v24 = v21;
      }
      else {
        unsigned int v24 = v10 - v20;
      }
      int32x4_t v58 = (unsigned int *)__PAIR64__(v13, v24);
      LODWORD(v59) = v22;
      int16x8_t v55 = v49;
      int16x8_t v56 = &v57;
      unint64_t v57 = v23;
      sub_216118644((uint64_t *)&v55);
      if (v11 >= 1)
      {
        int v25 = 0;
        int v26 = v54;
        do
        {
          if (v11 - v25 >= v26) {
            int v27 = v26;
          }
          else {
            int v27 = v11 - v25;
          }
          if (v17 < v11)
          {
            __int32 v28 = a4[2].i32[0];
            unint64_t v29 = *(void *)a4 + v28 * v25;
            int32x4_t v58 = (unsigned int *)__PAIR64__(v13, v27);
            LODWORD(v59) = v28;
            int16x8_t v55 = v46;
            int16x8_t v56 = &v57;
            unint64_t v57 = v29;
            sub_216118644((uint64_t *)&v55);
          }
          unint64_t v57 = a2;
          int32x4_t v58 = v52;
          int32x4_t v59 = &v41;
          int32x4_t v60 = v49;
          int32x4_t v61 = v46;
          sub_216118BC4((uint64_t)&v57, v13);
          unint64_t v57 = __PAIR64__(v25, v20);
          int32x4_t v58 = (unsigned int *)__PAIR64__(v27, v24);
          uint64_t v30 = *(void *)(v50 + 8 * v51 + 40) + *(void *)(v50 + 16);
          uint64_t v31 = *(void *)(v47 + 8 * v48 + 40) + *(void *)(v47 + 16);
          LODWORD(v55) = *a6;
          HIDWORD(v55) = v24;
          v40[0] = *a7;
          v40[1] = v27;
          sub_21611D4B4(a5, (int *)&v57, (uint64_t)&v41, v13, v30, v31, (int *)&v55, v40, a8);
          int v26 = v54;
          v25 += v54;
        }
        while (v25 < v11);
      }
      int v21 = v53;
      v20 += v53;
      int v10 = v34;
    }
    while (v20 < v34);
  }
  *(unsigned char *)uint64_t v33 = 0;
  ++*(void *)(v33 + 80);
  *int v32 = 0;
  v32[1] = 0;
}

void sub_21611D4B4(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int *a7, _DWORD *a8, uint64_t a9)
{
  int v9 = a8;
  uint64_t v13 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)(a3 + 32);
  uint64_t v109 = *(void *)(*(void *)a3 + 8 * *(unsigned __int8 *)(a3 + 8) + 40) + *(void *)(*(void *)a3 + 16);
  uint64_t v110 = *(void *)(v14 + 12);
  int v111 = v110;
  uint64_t v107 = a5;
  int v15 = a2[3];
  int v108 = a2[2];
  uint64_t v105 = a6;
  int v106 = v15;
  v102[0] = a9;
  v102[1] = a9 + 16;
  int v16 = *(_DWORD *)(a9 + 20);
  LODWORD(v103) = v16 & ~(v16 >> 31);
  HIDWORD(v103) = -v16 & ~(-v16 >> 31);
  uint64_t v104 = a9 + 28;
  v101[0] = a9;
  v101[1] = a9 + 16;
  v101[2] = v103;
  v101[3] = a9 + 28;
  v100[0] = a9;
  v100[1] = a9 + 16;
  v100[2] = v103;
  v100[3] = a9 + 28;
  v99[0] = a9;
  v99[1] = a9 + 16;
  v99[2] = v103;
  v99[3] = a9 + 28;
  v98[0] = a9;
  v98[1] = a9 + 16;
  v98[2] = v103;
  v98[3] = a9 + 28;
  v97[0] = (void *)a9;
  v97[1] = (void *)(a9 + 16);
  v97[2] = v103;
  v97[3] = (void *)(a9 + 28);
  if (v15 >= 8)
  {
    int v17 = 0;
    do
    {
      _X10 = v107;
      __asm { PRFM            #0, [X10] }
      _X10 = v107 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v109 + 4 * v111 * v17;
      uint64_t v27 = 8;
      do
      {
        __asm { PRFM            #0, [X8] }
        _X11 = _X8 + 16;
        __asm { PRFM            #0, [X11] }
        _X8 += 4 * v111;
        --v27;
      }
      while (v27);
      LODWORD(v31) = a2[2];
      if ((int)v31 >= 8)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        do
        {
          int v35 = *a2;
          uint64_t v32 = v34 + 8;
          _X11 = v107 + 4 * (v34 + 8);
          __asm { PRFM            #0, [X11] }
          _X11 += 16;
          __asm { PRFM            #0, [X11] }
          uint64_t v39 = v109 + v33 + 4 * v17 * v111;
          uint64_t v40 = 8;
          do
          {
            _X12 = v39 + 32;
            __asm { PRFM            #0, [X12] }
            _X12 = v39 + 48;
            __asm { PRFM            #0, [X12] }
            v39 += 4 * v111;
            --v40;
          }
          while (v40);
          unsigned int v45 = v35 + v34;
          v95[0] = v112;
          v95[1] = 0x800000008;
          int v96 = 8;
          sub_21611DC84((uint64_t)&v109, v97, (uint64_t)v95, &v107, &v105, a7, a8, a4, v34, v17, v35 + v34, a2[1] + v17, 0, 0);
          sub_21611DC84((uint64_t)&v109, v97, (uint64_t)v95, &v107, &v105, a7, a8, a4, v34, v17 | 4, v45, a2[1] + (v17 | 4), 0, 4);
          v94[0] = v112[0];
          v94[1] = v112[1];
          v94[2] = v112[2];
          v94[3] = v112[3];
          sub_21611E710((int8x8_t *)v94, a1, *a2 + v34, a2[1] + v17);
          uint64_t v31 = a2[2];
          v33 += 32;
          v34 += 8;
        }
        while (v32 <= v31 - 8);
        int v9 = a8;
      }
      else
      {
        LODWORD(v32) = 0;
      }
      for (; (int)v32 <= (int)v31 - 4; LODWORD(v31) = a2[2])
      {
        unsigned int v46 = v32 + *a2;
        sub_21611DEA8((uint64_t)&v109, (uint64_t)v98, a1, &v107, &v105, a7, v9, a4, v32, v17, v46, a2[1] + v17, v46, a2[1] + v17);
        sub_21611DEA8((uint64_t)&v109, (uint64_t)v98, a1, &v107, &v105, a7, v9, a4, v32, v17 | 4, v46, a2[1] + (v17 | 4), v46, a2[1] + (v17 | 4));
        LODWORD(v32) = v32 + 4;
      }
      if ((int)v32 < (int)v31)
      {
        do
        {
          unsigned int v47 = v32 + *a2;
          sub_21611E02C((uint64_t)&v109, (uint64_t)v99, a1, &v107, &v105, a7, v9, a4, v32, v17, v47, a2[1] + v17, v47, a2[1] + v17);
          sub_21611E02C((uint64_t)&v109, (uint64_t)v99, a1, &v107, &v105, a7, v9, a4, v32, v17 | 4, v47, a2[1] + (v17 | 4), v47, a2[1] + (v17 | 4));
          LODWORD(v32) = v32 + 1;
        }
        while ((int)v32 < a2[2]);
      }
      v17 += 8;
      int v15 = a2[3];
    }
    while (v17 <= v15 - 8);
    uint64_t v13 = a1;
  }
  else
  {
    int v17 = 0;
  }
  while (v17 <= v15 - 4)
  {
    _X11 = v107;
    __asm { PRFM            #0, [X11] }
    _X11 = v107 + 16;
    __asm { PRFM            #0, [X11] }
    _X9 = v109 + 4 * v111 * v17;
    uint64_t v53 = 4;
    do
    {
      __asm { PRFM            #0, [X9] }
      _X12 = _X9 + 16;
      __asm { PRFM            #0, [X12] }
      _X9 += 4 * v111;
      --v53;
    }
    while (v53);
    int v57 = a2[1] + v17;
    LODWORD(v58) = a2[2];
    if ((int)v58 >= 8)
    {
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      do
      {
        uint64_t v59 = v61 + 8;
        _X12 = v107 + 4 * (v61 + 8);
        __asm { PRFM            #0, [X12] }
        _X12 += 16;
        __asm { PRFM            #0, [X12] }
        uint64_t v65 = v109 + v60 + 4 * v17 * v111;
        uint64_t v66 = 4;
        do
        {
          _X13 = v65 + 32;
          __asm { PRFM            #0, [X13] }
          _X13 = v65 + 48;
          __asm { PRFM            #0, [X13] }
          v65 += 4 * v111;
          --v66;
        }
        while (v66);
        sub_21611E12C((uint64_t)&v109, v97, v13, &v107, &v105, a7, v9, a4, v61, v17, *a2 + v61, v57, *a2 + v61, v57);
        uint64_t v58 = a2[2];
        v60 += 32;
        uint64_t v61 = v59;
      }
      while (v59 <= v58 - 8);
    }
    else
    {
      LODWORD(v59) = 0;
    }
    while ((int)v59 <= (int)v58 - 4)
    {
      sub_21611DEA8((uint64_t)&v109, (uint64_t)v98, v13, &v107, &v105, a7, v9, a4, v59, v17, v59 + *a2, v57, v59 + *a2, v57);
      LODWORD(v59) = v59 + 4;
      LODWORD(v58) = a2[2];
    }
    if ((int)v59 < (int)v58)
    {
      do
      {
        sub_21611E02C((uint64_t)&v109, (uint64_t)v99, v13, &v107, &v105, a7, v9, a4, v59, v17, v59 + *a2, v57, v59 + *a2, v57);
        LODWORD(v59) = v59 + 1;
      }
      while ((int)v59 < a2[2]);
    }
    v17 += 4;
    int v15 = a2[3];
  }
  if (v17 < v15)
  {
    uint64_t v71 = v17;
    do
    {
      int v72 = a2[1] + v71;
      _X10 = v107;
      __asm { PRFM            #0, [X10] }
      _X10 = v107 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v109 + 4 * v111 * (int)v71;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + 16;
      __asm { PRFM            #0, [X8] }
      LODWORD(_X8) = a2[2];
      if ((int)_X8 >= 8)
      {
        uint64_t v81 = 0;
        uint64_t v82 = 32;
        do
        {
          int v83 = v81;
          v81 += 8;
          _X12 = v107 + v82;
          __asm { PRFM            #0, [X12] }
          _X12 = v107 + v82 + 16;
          __asm { PRFM            #0, [X12] }
          _X10 = v109 + 4 * (int)v71 * v111 + v82;
          __asm { PRFM            #0, [X10] }
          _X10 += 16;
          __asm { PRFM            #0, [X10] }
          sub_21611E334((uint64_t)&v109, (uint64_t)v100, v13, &v107, &v105, a7, v9, a4, v83, v71, v83 + *a2, v72, v83 + *a2, v72);
          _X8 = a2[2];
          v82 += 32;
        }
        while (v81 <= _X8 - 8);
      }
      else
      {
        LODWORD(v81) = 0;
      }
      if ((int)v81 <= (int)_X8 - 4)
      {
        uint64_t v91 = 4 * v81;
        do
        {
          sub_21611EB5C((uint64_t)v101, v13, vaddq_s32(vmlaq_s32(*(int32x4_t *)(v109 + 4 * (int)v71 * v111 + v91), vdupq_n_s32(*v9 + 128), *(int32x4_t *)(v107 + v91)), vdupq_n_s32((*(_DWORD *)(v105 + 4 * v71) + (*v9 + 128) * a4) * (*a7 + 128))), (v81 + *a2), v72, v81 + *a2, v72);
          LODWORD(_X8) = a2[2];
          LODWORD(v81) = v81 + 4;
          v91 += 16;
        }
        while ((int)_X8 - 4 >= (int)v81);
      }
      if ((int)v81 < (int)_X8)
      {
        do
        {
          sub_21611E3C8((uint64_t)&v109, (uint64_t)v102, v13, &v107, &v105, a7, v9, a4, v81, v71, v81 + *a2, v72, v81 + *a2, v72);
          LODWORD(v81) = v81 + 1;
        }
        while ((int)v81 < a2[2]);
      }
      ++v71;
    }
    while (a2[3] > (int)v71);
  }
}

double sub_21611DC84(uint64_t a1, void **a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v15 = 0;
  uint64_t v64 = *MEMORY[0x263EF8340];
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  int32x4_t v49 = 0u;
  int32x4_t v50 = 0u;
  int32x4_t v47 = 0u;
  int32x4_t v48 = 0u;
  uint64_t v16 = *(int *)(a1 + 16);
  int v17 = (long long *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + *(void *)a1 + 16);
  uint64_t v18 = 4 * v16;
  do
  {
    long long v19 = *v17;
    int v20 = &v47.i8[v15];
    *(_OWORD *)int v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v15 += 32;
    int v17 = (long long *)((char *)v17 + v18);
  }
  while (v15 != 128);
  uint64_t v21 = 0;
  long long v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v46[0] = *(_OWORD *)(*a4 + 4 * a9);
  v46[1] = v22;
  int32x4_t v23 = *(int32x4_t *)(*a5 + 4 * a10);
  int v24 = *a6;
  unsigned int v25 = *a7 + 128;
  int32x4_t v26 = vdupq_n_s32(v25);
  char v27 = 1;
  do
  {
    uint64_t v28 = 0;
    char v29 = v27;
    int32x4_t v30 = vmulq_s32((int32x4_t)v46[v21], v26);
    uint64_t v31 = &v47.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    char v27 = 0;
    uint64_t v21 = 1;
  }
  while ((v29 & 1) != 0);
  uint64_t v32 = 0;
  int32x4_t v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  int32x4_t v56 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  int32x4_t v57 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  int32x4_t v58 = vdupq_laneq_s32(v33, 2);
  int32x4_t v59 = vdupq_laneq_s32(v33, 3);
  char v34 = 1;
  do
  {
    uint64_t v35 = 0;
    char v36 = v34;
    uint64_t v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v47 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v47 + v37), *(int32x4_t *)((char *)&v56 + v35));
      v35 += 16;
      v37 += 32;
    }
    while (v35 != 64);
    char v34 = 0;
    uint64_t v32 = 1;
  }
  while ((v36 & 1) != 0);
  long long v60 = v51;
  long long v61 = v52;
  long long v62 = v53;
  long long v63 = v54;
  int32x4_t v56 = v47;
  int32x4_t v57 = v48;
  int32x4_t v58 = v49;
  int32x4_t v59 = v50;
  double v38 = sub_21611E490(a2, &v56, a11, a12);
  uint64_t v39 = 0;
  *(double *)int16x8_t v55 = v38;
  v55[1] = v40;
  v55[2] = v41;
  v55[3] = v42;
  uint64_t v43 = *(int *)(a3 + 16);
  char v44 = (double *)(*(void *)a3 + a13 + (int)v43 * (uint64_t)a14);
  do
  {
    double result = *(double *)&v55[v39];
    double *v44 = result;
    ++v39;
    char v44 = (double *)((char *)v44 + v43);
  }
  while (v39 != 4);
  return result;
}

double sub_21611DEA8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v15 = 0;
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v16 = *(int *)(a1 + 16);
  int v17 = (int32x4_t *)(*(void *)a1 + 4 * (int)v16 * (uint64_t)a10 + 4 * a9);
  uint64_t v18 = 4 * v16;
  do
  {
    *(int32x4_t *)((char *)&v33 + v15) = *v17;
    v15 += 16;
    int v17 = (int32x4_t *)((char *)v17 + v18);
  }
  while (v15 != 64);
  uint64_t v19 = 0;
  int32x4_t v20 = *(int32x4_t *)(*a4 + 4 * a9);
  int32x4_t v29 = v33;
  int32x4_t v30 = v34;
  int32x4_t v31 = v35;
  int32x4_t v32 = v36;
  int32x4_t v21 = *(int32x4_t *)(*a5 + 4 * a10);
  int v22 = *a6;
  unsigned int v23 = *a7 + 128;
  int32x4_t v24 = vmulq_s32(vdupq_n_s32(v23), v20);
  do
  {
    *(int32x4_t *)((char *)&v29 + v19) = vaddq_s32(*(int32x4_t *)((char *)&v29 + v19), v24);
    v19 += 16;
  }
  while (v19 != 64);
  uint64_t v25 = 0;
  int32x4_t v26 = vmulq_s32(vaddq_s32(vdupq_n_s32(v23 * a8), v21), vdupq_n_s32(v22 + 128));
  int32x4_t v33 = vdupq_lane_s32(*(int32x2_t *)v26.i8, 0);
  int32x4_t v34 = vdupq_lane_s32(*(int32x2_t *)v26.i8, 1);
  int32x4_t v35 = vdupq_laneq_s32(v26, 2);
  int32x4_t v36 = vdupq_laneq_s32(v26, 3);
  do
  {
    *(int32x4_t *)((char *)&v29 + v25) = vaddq_s32(*(int32x4_t *)((char *)&v29 + v25), *(int32x4_t *)((char *)&v33 + v25));
    v25 += 16;
  }
  while (v25 != 64);
  *(int8x8_t *)v33.i8 = sub_21611E7C8(a2, v29, v30, v31, v32, a11, a12);
  v33.i64[1] = v27;
  return sub_21611E88C((uint64_t)&v33, a3, a13, a14);
}

uint64_t sub_21611E02C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v14 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(int *)(a1 + 16);
  uint64_t v16 = (__int32 *)(*(void *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  uint64_t v17 = 4 * v15;
  do
  {
    v20.i32[v14++] = *v16;
    uint64_t v16 = (__int32 *)((char *)v16 + v17);
  }
  while (v14 != 4);
  int32x4_t v18 = vmlaq_s32(vaddq_s32(vdupq_n_s32((*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)), v20), vaddq_s32(vdupq_n_s32((*a7 + 128) * a8), *(int32x4_t *)(*a5 + 4 * a10)), vdupq_n_s32(*a6 + 128));

  return sub_21611E91C(a2, a3, v18, a11, a12, a13, a14);
}

double sub_21611E12C(uint64_t a1, void **a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v15 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  int32x4_t v45 = 0u;
  int32x4_t v46 = 0u;
  int32x4_t v43 = 0u;
  int32x4_t v44 = 0u;
  uint64_t v16 = *(int *)(a1 + 16);
  uint64_t v17 = (long long *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + *(void *)a1 + 16);
  uint64_t v18 = 4 * v16;
  do
  {
    long long v19 = *v17;
    int32x4_t v20 = &v43.i8[v15];
    *(_OWORD *)int32x4_t v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v15 += 32;
    uint64_t v17 = (long long *)((char *)v17 + v18);
  }
  while (v15 != 128);
  uint64_t v21 = 0;
  long long v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v42[0] = *(_OWORD *)(*a4 + 4 * a9);
  v42[1] = v22;
  int32x4_t v23 = *(int32x4_t *)(*a5 + 4 * a10);
  int v24 = *a6;
  unsigned int v25 = *a7 + 128;
  int32x4_t v26 = vdupq_n_s32(v25);
  char v27 = 1;
  do
  {
    uint64_t v28 = 0;
    char v29 = v27;
    int32x4_t v30 = vmulq_s32((int32x4_t)v42[v21], v26);
    int32x4_t v31 = &v43.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    char v27 = 0;
    uint64_t v21 = 1;
  }
  while ((v29 & 1) != 0);
  uint64_t v32 = 0;
  int32x4_t v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  int32x4_t v52 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  int32x4_t v53 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  int32x4_t v54 = vdupq_laneq_s32(v33, 2);
  int32x4_t v55 = vdupq_laneq_s32(v33, 3);
  char v34 = 1;
  do
  {
    uint64_t v35 = 0;
    char v36 = v34;
    uint64_t v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v43 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v43 + v37), *(int32x4_t *)((char *)&v52 + v35));
      v35 += 16;
      v37 += 32;
    }
    while (v35 != 64);
    char v34 = 0;
    uint64_t v32 = 1;
  }
  while ((v36 & 1) != 0);
  long long v56 = v47;
  long long v57 = v48;
  long long v58 = v49;
  long long v59 = v50;
  int32x4_t v52 = v43;
  int32x4_t v53 = v44;
  int32x4_t v54 = v45;
  int32x4_t v55 = v46;
  v51[0] = sub_21611E490(a2, &v52, a11, a12);
  v51[1] = v38;
  v51[2] = v39;
  v51[3] = v40;
  return sub_21611E9BC((uint64_t)v51, a3, a13, a14);
}

double sub_21611E334(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v14 = 4 * *(_DWORD *)(a1 + 16) * a10;
  unsigned int v15 = *a7 + 128;
  int32x4_t v16 = vdupq_n_s32(v15);
  int32x4_t v17 = vdupq_n_s32((*(_DWORD *)(*a5 + 4 * a10) + v15 * a8) * (*a6 + 128));
  return sub_21611EA50(a2, a3, vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(void *)a1 + 4 * a9 + v14), v16, *(int32x4_t *)(*a4 + 4 * a9)), v17), vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(void *)a1 + 4 * a9 + 16 + v14), v16, *(int32x4_t *)(*a4 + 4 * a9 + 16)), v17), a11, a12, a13, a14);
}

uint64_t sub_21611E3C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t result = sub_216119DFC((_DWORD *)(a2 + 8), *(_DWORD *)(*(void *)a1 + 4 * a9 + 4 * *(_DWORD *)(a1 + 16) * a10)+ (*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)+ *(_DWORD *)(**(void **)a2 + 4 * a12)+ (*(_DWORD *)(*a5 + 4 * a10) + (*a7 + 128) * a8) * (*a6 + 128));
  int32x4_t v17 = *(int **)(a2 + 24);
  int v19 = *v17;
  int v18 = v17[1];
  if ((int)result > v19) {
    int v19 = result;
  }
  if (v18 >= v19) {
    int v18 = v19;
  }
  int v20 = v18 & ~(v18 >> 31);
  if (v20 >= 255) {
    LOBYTE(v20) = -1;
  }
  *(unsigned char *)(*(void *)a3 + *(int *)(a3 + 16) * (uint64_t)a13 + a14) = v20;
  return result;
}

double sub_21611E490(void **a1, int32x4_t *a2, uint64_t a3, int a4)
{
  int v4 = (const float **)(a1 + 3);
  int32x4_t v5 = *(int32x4_t *)(**a1 + 4 * a4);
  int32x4_t v6 = vdupq_lane_s32(*(int32x2_t *)v5.i8, 0);
  int32x4_t v7 = vaddq_s32(v6, *a2);
  int32x4_t v8 = vdupq_lane_s32(*(int32x2_t *)v5.i8, 1);
  int32x4_t v9 = vaddq_s32(v6, a2[1]);
  int32x4_t v10 = vaddq_s32(v8, a2[2]);
  int32x4_t v11 = vaddq_s32(v8, a2[3]);
  int32x4_t v12 = vdupq_laneq_s32(v5, 2);
  int32x4_t v13 = vaddq_s32(v12, a2[4]);
  int32x4_t v14 = vaddq_s32(v12, a2[5]);
  int32x4_t v15 = vdupq_laneq_s32(v5, 3);
  int32x4_t v16 = vaddq_s32(v15, a2[6]);
  int32x4_t v17 = vaddq_s32(v15, a2[7]);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  v20[0] = v7;
  v20[1] = v9;
  v20[2] = v10;
  _OWORD v20[3] = v11;
  _OWORD v20[4] = v13;
  v20[5] = v14;
  v20[6] = v16;
  v20[7] = v17;
  sub_2161196D8((uint64_t)(a1 + 1), v20, &v21);
  int16x8_t v19[4] = v25;
  v19[5] = v26;
  v19[6] = v27;
  v19[7] = v28;
  v19[0] = v21;
  v19[1] = v22;
  int8x16_t v19[2] = v23;
  _OWORD v19[3] = v24;
  return sub_21611E580(v4, v19);
}

double sub_21611E580(const float **a1, _OWORD *a2)
{
  uint64_t v2 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v3 = a2[5];
  v11[4] = a2[4];
  v11[5] = v3;
  long long v4 = a2[7];
  v11[6] = a2[6];
  v11[7] = v4;
  long long v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  long long v6 = a2[3];
  void v11[2] = a2[2];
  v11[3] = v6;
  int32x4_t v7 = *a1;
  int32x4_t v8 = (int32x4_t)vld1q_dup_f32(v7++);
  int32x4_t v9 = (int32x4_t)vld1q_dup_f32(v7);
  do
  {
    v12[v2] = vminq_s32(vmaxq_s32((int32x4_t)v11[v2], v8), v9);
    ++v2;
  }
  while (v2 != 8);
  v12[12] = v12[4];
  v12[13] = v12[5];
  v12[14] = v12[6];
  v12[15] = v12[7];
  v12[8] = v12[0];
  v12[9] = v12[1];
  v12[10] = v12[2];
  v12[11] = v12[3];
  return sub_21611E670((uint64_t)(a1 + 1), v12);
}

double sub_21611E670(uint64_t a1, int32x4_t *a2)
{
  uint64_t v2 = 0;
  v6[13] = *MEMORY[0x263EF8340];
  long long v3 = a2 + 1;
  do
  {
    *(int16x8_t *)&v6[v2 + 4] = vqmovn_high_s32(vqmovn_s32(v3[-1]), *v3);
    v3 += 2;
    v2 += 2;
  }
  while (v2 != 8);
  for (uint64_t i = 0; i != 4; ++i)
    v6[i] = vqmovun_s16(*(int16x8_t *)&v6[2 * i + 4]);
  return *(double *)v6;
}

double sub_21611E710(int8x8_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = 0;
  int8x8_t v5 = a1[1];
  int16x4_t v6 = (int16x4_t)vtrn1_s8(*a1, v5);
  int16x4_t v7 = (int16x4_t)vtrn2_s8(*a1, v5);
  int8x8_t v8 = a1[2];
  int8x8_t v9 = a1[3];
  int16x4_t v10 = (int16x4_t)vtrn1_s8(v8, v9);
  int16x4_t v11 = (int16x4_t)vtrn2_s8(v8, v9);
  int8x8_t v12 = a1[4];
  int8x8_t v13 = a1[5];
  int16x4_t v14 = (int16x4_t)vtrn1_s8(v12, v13);
  int16x4_t v15 = (int16x4_t)vtrn2_s8(v12, v13);
  int8x8_t v16 = a1[6];
  int8x8_t v17 = a1[7];
  int16x4_t v18 = (int16x4_t)vtrn1_s8(v16, v17);
  int16x4_t v19 = (int16x4_t)vtrn2_s8(v16, v17);
  int32x2_t v20 = (int32x2_t)vtrn1_s16(v6, v10);
  int32x2_t v21 = (int32x2_t)vtrn2_s16(v6, v10);
  int32x2_t v22 = (int32x2_t)vtrn1_s16(v7, v11);
  int32x2_t v23 = (int32x2_t)vtrn2_s16(v7, v11);
  int32x2_t v24 = (int32x2_t)vtrn1_s16(v14, v18);
  int32x2_t v25 = (int32x2_t)vtrn2_s16(v14, v18);
  int32x2_t v26 = (int32x2_t)vtrn1_s16(v15, v19);
  uint64_t v27 = *(int *)(a2 + 16);
  uint64_t v28 = *(void *)a2 + (int)v27 * (uint64_t)a3;
  int32x2_t v29 = (int32x2_t)vtrn2_s16(v15, v19);
  void v32[2] = vzip1_s32(v21, v25);
  v32[3] = vzip1_s32(v23, v29);
  v32[4] = vzip2_s32(v20, v24);
  v32[5] = vzip2_s32(v22, v26);
  v32[6] = vzip2_s32(v21, v25);
  v32[7] = vzip2_s32(v23, v29);
  int32x4_t v30 = (double *)(v28 + a4);
  do
  {
    double result = *(double *)&v32[v4];
    *int32x4_t v30 = result;
    int32x4_t v30 = (double *)((char *)v30 + v27);
    ++v4;
  }
  while (v4 != 8);
  return result;
}

int8x8_t sub_21611E7C8(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5, uint64_t a6, int a7)
{
  int32x4_t v8 = *(int32x4_t *)(**(void **)a1 + 4 * a7);
  double v9 = sub_2161199F8(a1 + 8, *(double *)vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v8.i8, 0), a2).i64, *(double *)vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v8.i8, 1), a3).i64, (__n128)vaddq_s32(vdupq_laneq_s32(v8, 2), a4), (__n128)vaddq_s32(vdupq_laneq_s32(v8, 3), a5));
  *(double *)v13.i64 = sub_21611E840((const float **)(a1 + 24), v9, v10, v11, v12);
  return vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v13), v14));
}

double sub_21611E840(const float **a1, double a2, double a3, __n128 a4, __n128 a5)
{
  uint64_t v5 = 0;
  void v10[2] = a4;
  v10[3] = a5;
  int16x4_t v6 = *a1;
  int32x4_t v7 = (int32x4_t)vld1q_dup_f32(v6++);
  int32x4_t v8 = (int32x4_t)vld1q_dup_f32(v6);
  do
  {
    *(long long *)((char *)&v11 + v5 * 16) = (__int128)vminq_s32(vmaxq_s32((int32x4_t)v10[v5], v7), v8);
    ++v5;
  }
  while (v5 != 4);
  return *(double *)&v11;
}

double sub_21611E88C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(int *)(a2 + 16);
  uint64_t v6 = *(void *)a2 + (int)v5 * (uint64_t)a3 + a4;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = v6 + 2 * v5;
  uint64_t v9 = v6 + 3 * v5;
  char v10 = 1;
  do
  {
    uint64_t v11 = a1 + 8 * v4;
    double result = *(double *)v11;
    uint64_t v13 = 2 * v4;
    *(unsigned char *)(v6 + 2 * v4) = *(void *)v11;
    *(unsigned char *)(v7 + v13) = *(unsigned char *)(v11 + 1);
    *(unsigned char *)(v8 + v13) = *(unsigned char *)(v11 + 2);
    *(unsigned char *)(v9 + v13) = *(unsigned char *)(v11 + 3);
    uint64_t v14 = (2 * v4) | 1;
    *(unsigned char *)(v6 + v14) = *(unsigned char *)(v11 + 4);
    *(unsigned char *)(v7 + v14) = *(unsigned char *)(v11 + 5);
    *(unsigned char *)(v8 + v14) = *(unsigned char *)(v11 + 6);
    char v15 = v10;
    *(unsigned char *)(v9 + v14) = *(unsigned char *)(v11 + 7);
    uint64_t v4 = 1;
    char v10 = 0;
  }
  while ((v15 & 1) != 0);
  return result;
}

uint64_t sub_21611E91C(uint64_t result, uint64_t a2, int32x4_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  uint64_t v8 = *(const float **)(result + 8);
  uint64_t v9 = v8 + 2;
  int32x4_t v10 = (int32x4_t)vld1q_dup_f32(v9);
  uint64_t v11 = (const float *)(result + 16);
  int32x4_t v12 = (int32x4_t)vld1q_dup_f32(v11);
  int32x4_t v13 = vshlq_s32(vaddq_s32(*(int32x4_t *)(**(void **)result + 4 * a5), a3), v12);
  int32x4_t v14 = (int32x4_t)vld1q_dup_f32(v8);
  int32x4_t v15 = vdupq_n_s32(-*(_DWORD *)(result + 20));
  int32x4_t v16 = vqrdmulhq_s32(v13, v14);
  int32x4_t v17 = vaddq_s32(vrshlq_s32(vqaddq_s32(v16, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)v16))), v15), v10);
  int16x4_t v18 = *(const float **)(result + 24);
  int32x4_t v19 = (int32x4_t)vld1q_dup_f32(v18++);
  int32x4_t v20 = (int32x4_t)vld1q_dup_f32(v18);
  int16x8_t v21 = (int16x8_t)vminq_s32(vmaxq_s32(v17, v19), v20);
  *(int16x4_t *)v21.i8 = vqmovn_s32((int32x4_t)v21);
  unsigned __int32 v22 = vqmovun_s16(v21).u32[0];
  uint64_t v23 = a7;
  do
  {
    *(unsigned char *)(*(void *)a2 + *(int *)(a2 + 16) * (uint64_t)a6 + v23) = v22 >> v7;
    v7 += 8;
    ++v23;
  }
  while (v7 != 32);
  return result;
}

double sub_21611E9BC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)a2 + *(int *)(a2 + 16) * (uint64_t)a3 + a4;
  uint64_t v6 = (unsigned char *)(a1 + 3);
  do
  {
    uint64_t v7 = *(int *)(a2 + 16);
    uint64_t v8 = (unsigned char *)(v5 + v4);
    double result = *(double *)(a1 + 8 * v4);
    *uint64_t v8 = LOBYTE(result);
    v8[v7] = *(v6 - 2);
    v8[2 * v7] = *(v6 - 1);
    v8[3 * v7] = *v6;
    v8[4 * v7] = v6[1];
    v8[5 * v7] = v6[2];
    v8[6 * (int)v7] = v6[3];
    *(unsigned char *)(v5 + v4++ - v7 + 8 * v7) = v6[4];
    v6 += 8;
  }
  while (v4 != 4);
  return result;
}

double sub_21611EA50(uint64_t a1, uint64_t a2, int32x4_t a3, int32x4_t a4, uint64_t a5, int a6, int a7, int a8)
{
  int32x4_t v12 = (const float *)(**(void **)a1 + 4 * a6);
  int32x4_t v13 = (int32x4_t)vld1q_dup_f32(v12);
  *(double *)v14.i64 = sub_216119BEC((const float *)(a1 + 8), *(double *)vaddq_s32(v13, a3).i64, (int32x2_t)*(_OWORD *)&vaddq_s32(v13, a4));
  int32x4_t v15 = *(const float **)(a1 + 24);
  int32x4_t v16 = (int32x4_t)vld1q_dup_f32(v15++);
  int32x4_t v17 = (int32x4_t)vld1q_dup_f32(v15);
  int8x8_t v20 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vminq_s32(vmaxq_s32(v14, v16), v17)), vminq_s32(vmaxq_s32(v18, v16), v17)));
  return sub_21611EAE8((uint64_t)&v20, a2, a7, a8);
}

double sub_21611EAE8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *(int *)(a2 + 16);
  uint64_t v5 = (unsigned char *)(*(void *)a2 + (int)v4 * (uint64_t)a3 + a4);
  double result = *(double *)a1;
  unsigned char *v5 = *(void *)a1;
  v5[v4] = *(unsigned char *)(a1 + 1);
  v5[2 * v4] = *(unsigned char *)(a1 + 2);
  v5[3 * v4] = *(unsigned char *)(a1 + 3);
  v5[4 * v4] = *(unsigned char *)(a1 + 4);
  v5[5 * v4] = *(unsigned char *)(a1 + 5);
  v5[6 * (int)v4] = *(unsigned char *)(a1 + 6);
  v5[8 * v4 - v4] = *(unsigned char *)(a1 + 7);
  return result;
}

uint64_t sub_21611EB5C(uint64_t result, uint64_t a2, int32x4_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v7 = 0;
  uint64_t v8 = *(const float **)(result + 8);
  uint64_t v9 = (const float *)(**(void **)result + 4 * a5);
  int32x4_t v10 = (int32x4_t)vld1q_dup_f32(v9);
  uint64_t v11 = v8 + 2;
  int32x4_t v12 = (int32x4_t)vld1q_dup_f32(v11);
  int32x4_t v13 = (const float *)(result + 16);
  int32x4_t v14 = (int32x4_t)vld1q_dup_f32(v13);
  int32x4_t v15 = vshlq_s32(vaddq_s32(v10, a3), v14);
  int32x4_t v16 = (int32x4_t)vld1q_dup_f32(v8);
  int32x4_t v17 = vdupq_n_s32(-*(_DWORD *)(result + 20));
  int32x4_t v18 = vqrdmulhq_s32(v15, v16);
  int32x4_t v19 = vaddq_s32(vrshlq_s32(vqaddq_s32(v18, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)v18))), v17), v12);
  int8x8_t v20 = *(const float **)(result + 24);
  int32x4_t v21 = (int32x4_t)vld1q_dup_f32(v20++);
  int32x4_t v22 = (int32x4_t)vld1q_dup_f32(v20);
  int16x8_t v23 = (int16x8_t)vminq_s32(vmaxq_s32(v19, v21), v22);
  *(int16x4_t *)v23.i8 = vqmovn_s32((int32x4_t)v23);
  unsigned __int32 v24 = vqmovun_s16(v23).u32[0];
  do
  {
    *(unsigned char *)(*(void *)a2 + *(int *)(a2 + 16) * (uint64_t)a6 + a7) = v24 >> v7;
    v7 += 8;
    ++a6;
  }
  while (v7 != 32);
  return result;
}

void sub_21611EC00()
{
}

void sub_21611EC14(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 168);
  int v3 = *(_DWORD *)(a1 + 172);
  int v4 = *(_DWORD *)(a1 + 44);
  sub_216119F50((uint64_t)v32, 0, *(void **)(a1 + 8), *(_DWORD **)(a1 + 192));
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 192);
  uint64_t v27 = v5;
  uint64_t v31 = v6;
  unint64_t v7 = (4 * *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12) + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v8 = v5[3];
  v5[v8 + 5] = v5[4];
  unint64_t v9 = v5[4] + v7;
  uint64_t v10 = v5[10];
  ++v5[3];
  v5[4] = v9;
  char v28 = v8;
  uint64_t v29 = v10;
  char v30 = 5;
  sub_216117C60((uint64_t)v5);
  if (v3 >= 1)
  {
    int v11 = 0;
    uint64_t v12 = *(void *)(a1 + 192);
    int v13 = *(_DWORD *)(v12 + 16);
    int v25 = v3;
    do
    {
      if (v3 - v11 >= v13) {
        int v14 = v13;
      }
      else {
        int v14 = v3 - v11;
      }
      if (v2 >= 1)
      {
        int v15 = 0;
        int v16 = *(_DWORD *)(v12 + 12);
        do
        {
          int v17 = *(_DWORD *)(a1 + 48);
          uint64_t v36 = *(void *)(a1 + 32) + v17 * v15;
          if (v2 - v15 >= v16) {
            int v18 = v16;
          }
          else {
            int v18 = v2 - v15;
          }
          unint64_t v37 = __PAIR64__(v4, v18);
          LODWORD(v38) = v17;
          v35[0] = (uint64_t)v32;
          v35[1] = (uint64_t)&v36;
          sub_216118644(v35);
          unint64_t v19 = *(void *)(a1 + 192);
          uint64_t v36 = *(void *)(a1 + 24);
          unint64_t v37 = v19;
          uint64_t v38 = &v27;
          uint64_t v39 = v32;
          uint64_t v40 = a1 + 56;
          sub_216118BC4((uint64_t)&v36, v4);
          int v20 = *(_DWORD *)(a1 + 164) + v11;
          LODWORD(v36) = *(_DWORD *)(a1 + 160) + v15;
          HIDWORD(v36) = v20;
          unint64_t v37 = __PAIR64__(v14, v18);
          uint64_t v21 = *(void *)(v33 + 8 * v34 + 40) + *(void *)(v33 + 16);
          uint64_t v22 = *(void *)(*(void *)(a1 + 72) + 8 * *(unsigned __int8 *)(a1 + 104) + 40)
              + *(void *)(*(void *)(a1 + 72) + 16);
          int16x8_t v23 = *(_DWORD **)(a1 + 184);
          LODWORD(v35[0]) = **(_DWORD **)(a1 + 176);
          HIDWORD(v35[0]) = v18;
          v26[0] = *v23;
          v26[1] = v14;
          sub_21611D4B4(a1 + 136, (int *)&v36, (uint64_t)&v27, v4, v21, v22, (int *)v35, v26, *(void *)(a1 + 200));
          uint64_t v12 = *(void *)(a1 + 192);
          int v16 = *(_DWORD *)(v12 + 12);
          v15 += v16;
        }
        while (v15 < v2);
        int v13 = *(_DWORD *)(v12 + 16);
        int v3 = v25;
      }
      v11 += v13;
    }
    while (v11 < v3);
  }
  uint64_t v24 = *(void *)(a1 + 8);
  *(unsigned char *)uint64_t v24 = 0;
  ++*(void *)(v24 + 80);
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 32) = 0;
}

void sub_21611EE2C(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a5 + 8);
  int v11 = *(_DWORD *)(a5 + 12);
  int v13 = *(_DWORD *)(a3 + 12);
  sub_216117B94(v52, v10, v11, v13, 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
  sub_216119F50((uint64_t)v49, 0, (void *)a1, v52);
  sub_216119F50((uint64_t)v46, 1, (void *)a1, v52);
  uint64_t v41 = a1;
  int32x4_t v45 = v52;
  unint64_t v14 = (4 * v54 * v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 8 * v15 + 40) = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v32 = (void *)(a1 + 24);
  uint64_t v33 = a1;
  ++*(void *)(a1 + 24);
  *(void *)(a1 + 32) += v14;
  char v42 = v15;
  uint64_t v43 = v16;
  char v44 = 5;
  sub_216117C60(a1);
  int v17 = v54;
  if (v54 >= v11)
  {
    unint64_t v18 = (unint64_t)*a4;
    __int32 v19 = a4[2].i32[0];
    long long v58 = (unsigned int *)vrev64_s32(a4[1]);
    LODWORD(v59) = v19;
    int32x4_t v55 = v46;
    long long v56 = &v57;
    unint64_t v57 = v18;
    sub_216118644((uint64_t *)&v55);
  }
  if (v10 >= 1)
  {
    int v20 = 0;
    int v21 = v53;
    int v34 = v10;
    do
    {
      int v22 = *(_DWORD *)(a3 + 16);
      unint64_t v23 = *(void *)a3 + v22 * v20;
      if (v10 - v20 >= v21) {
        unsigned int v24 = v21;
      }
      else {
        unsigned int v24 = v10 - v20;
      }
      long long v58 = (unsigned int *)__PAIR64__(v13, v24);
      LODWORD(v59) = v22;
      int32x4_t v55 = v49;
      long long v56 = &v57;
      unint64_t v57 = v23;
      sub_216118644((uint64_t *)&v55);
      if (v11 >= 1)
      {
        int v25 = 0;
        int v26 = v54;
        do
        {
          if (v11 - v25 >= v26) {
            int v27 = v26;
          }
          else {
            int v27 = v11 - v25;
          }
          if (v17 < v11)
          {
            __int32 v28 = a4[2].i32[0];
            unint64_t v29 = *(void *)a4 + v28 * v25;
            long long v58 = (unsigned int *)__PAIR64__(v13, v27);
            LODWORD(v59) = v28;
            int32x4_t v55 = v46;
            long long v56 = &v57;
            unint64_t v57 = v29;
            sub_216118644((uint64_t *)&v55);
          }
          unint64_t v57 = a2;
          long long v58 = v52;
          long long v59 = &v41;
          uint64_t v60 = v49;
          long long v61 = v46;
          sub_216118BC4((uint64_t)&v57, v13);
          unint64_t v57 = __PAIR64__(v25, v20);
          long long v58 = (unsigned int *)__PAIR64__(v27, v24);
          uint64_t v30 = *(void *)(v50 + 8 * v51 + 40) + *(void *)(v50 + 16);
          uint64_t v31 = *(void *)(v47 + 8 * v48 + 40) + *(void *)(v47 + 16);
          LODWORD(v55) = *a6;
          HIDWORD(v55) = v24;
          v40[0] = *a7;
          v40[1] = v27;
          sub_21611F108(a5, &v57, (uint64_t)&v41, v13, v30, v31, (int *)&v55, v40, a8);
          int v26 = v54;
          v25 += v54;
        }
        while (v25 < v11);
      }
      int v21 = v53;
      v20 += v53;
      int v10 = v34;
    }
    while (v20 < v34);
  }
  *(unsigned char *)uint64_t v33 = 0;
  ++*(void *)(v33 + 80);
  *uint64_t v32 = 0;
  v32[1] = 0;
}

void sub_21611F108(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int *a7, _DWORD *a8, uint64_t a9)
{
  uint64_t v14 = *(void *)(a3 + 32);
  uint64_t v78 = *(void *)(*(void *)a3 + 8 * *(unsigned __int8 *)(a3 + 8) + 40) + *(void *)(*(void *)a3 + 16);
  uint64_t v79 = *(void *)(v14 + 12);
  int v80 = v79;
  uint64_t v76 = a5;
  int v15 = a2[3];
  int v77 = a2[2];
  uint64_t v74 = a6;
  int v75 = v15;
  v71[0] = a9;
  v71[1] = a9 + 16;
  int v16 = *(_DWORD *)(a9 + 20);
  LODWORD(v72) = v16 & ~(v16 >> 31);
  HIDWORD(v72) = -v16 & ~(-v16 >> 31);
  uint64_t v73 = a9 + 28;
  v70[0] = a9;
  v70[1] = a9 + 16;
  v70[2] = v72;
  v70[3] = a9 + 28;
  v69[0] = a9;
  v69[1] = a9 + 16;
  v69[2] = v72;
  v69[3] = a9 + 28;
  v68[0] = a9;
  v68[1] = a9 + 16;
  v68[2] = v72;
  v68[3] = a9 + 28;
  v67[0] = a9;
  v67[1] = a9 + 16;
  v67[2] = v72;
  v67[3] = a9 + 28;
  v66[0] = a9;
  v66[1] = a9 + 16;
  v66[2] = v72;
  v66[3] = a9 + 28;
  if (v15 >= 4)
  {
    int v17 = 0;
    do
    {
      _X11 = v76;
      __asm { PRFM            #0, [X11] }
      _X11 = v76 + 16;
      __asm { PRFM            #0, [X11] }
      _X9 = v78 + 4 * v80 * v17;
      uint64_t v27 = 4;
      do
      {
        __asm { PRFM            #0, [X9] }
        _X12 = _X9 + 16;
        __asm { PRFM            #0, [X12] }
        _X9 += 4 * v80;
        --v27;
      }
      while (v27);
      unsigned int v31 = a2[1] + v17;
      LODWORD(v32) = a2[2];
      if ((int)v32 >= 8)
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        do
        {
          uint64_t v33 = v35 + 8;
          _X12 = v76 + 4 * (v35 + 8);
          __asm { PRFM            #0, [X12] }
          _X12 += 16;
          __asm { PRFM            #0, [X12] }
          uint64_t v39 = v78 + v34 + 4 * v17 * v80;
          uint64_t v40 = 4;
          do
          {
            _X13 = v39 + 32;
            __asm { PRFM            #0, [X13] }
            _X13 = v39 + 48;
            __asm { PRFM            #0, [X13] }
            v39 += 4 * v80;
            --v40;
          }
          while (v40);
          sub_21611F5AC((uint64_t)&v78, (uint64_t)v66, a1, &v76, &v74, a7, a8, a4, v35, v17, *a2 + v35, v31, *a2 + v35, v31);
          uint64_t v32 = (int)a2[2];
          v34 += 32;
          uint64_t v35 = v33;
        }
        while (v33 <= v32 - 8);
      }
      else
      {
        LODWORD(v33) = 0;
      }
      while ((int)v33 <= (int)v32 - 4)
      {
        sub_21611F7D0((uint64_t)&v78, (uint64_t)v67, a1, &v76, &v74, a7, a8, a4, v33, v17, v33 + *a2, v31, v33 + *a2, v31);
        LODWORD(v33) = v33 + 4;
        LODWORD(v32) = a2[2];
      }
      if ((int)v33 < (int)v32)
      {
        do
        {
          sub_21611F944((uint64_t)&v78, (uint64_t)v68, a1, &v76, &v74, a7, a8, a4, v33, v17, v33 + *a2, v31, v33 + *a2, v31);
          LODWORD(v33) = v33 + 1;
        }
        while ((int)v33 < a2[2]);
      }
      v17 += 4;
      int v15 = a2[3];
    }
    while (v17 <= v15 - 4);
  }
  else
  {
    int v17 = 0;
  }
  if (v17 < v15)
  {
    uint64_t v45 = v17;
    do
    {
      uint64_t v46 = (a2[1] + v45);
      _X10 = v76;
      __asm { PRFM            #0, [X10] }
      _X10 = v76 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v78 + 4 * v80 * (int)v45;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + 16;
      __asm { PRFM            #0, [X8] }
      LODWORD(_X8) = a2[2];
      if ((int)_X8 >= 8)
      {
        uint64_t v55 = 0;
        uint64_t v56 = 32;
        do
        {
          int v57 = v55;
          v55 += 8;
          _X12 = v76 + v56;
          __asm { PRFM            #0, [X12] }
          _X12 = v76 + v56 + 16;
          __asm { PRFM            #0, [X12] }
          _X10 = v78 + 4 * (int)v45 * v80 + v56;
          __asm { PRFM            #0, [X10] }
          _X10 += 16;
          __asm { PRFM            #0, [X10] }
          sub_21611FA44((uint64_t)&v78, (uint64_t)v69, a1, &v76, &v74, a7, a8, a4, v57, v45, v57 + *a2, v46, v57 + *a2, v46);
          _X8 = (int)a2[2];
          v56 += 32;
        }
        while (v55 <= _X8 - 8);
      }
      else
      {
        LODWORD(v55) = 0;
      }
      if ((int)v55 <= (int)_X8 - 4)
      {
        uint64_t v65 = 4 * v55;
        do
        {
          sub_21611FEE4((uint64_t)v70, a1, v55 + *a2, vaddq_s32(vmlaq_s32(*(int32x4_t *)(v78 + 4 * (int)v45 * v80 + v65), vdupq_n_s32(*a8 + 128), *(int32x4_t *)(v76 + v65)), vdupq_n_s32((*(_DWORD *)(v74 + 4 * v45) + (*a8 + 128) * a4) * (*a7 + 128))), v46, v55 + *a2, v46);
          LODWORD(_X8) = a2[2];
          LODWORD(v55) = v55 + 4;
          v65 += 16;
        }
        while ((int)_X8 - 4 >= (int)v55);
      }
      if ((int)v55 < (int)_X8)
      {
        do
        {
          sub_21611FAD8((uint64_t)&v78, (uint64_t)v71, a1, &v76, &v74, a7, a8, a4, v55, v45, v55 + *a2, v46, v55 + *a2, v46);
          LODWORD(v55) = v55 + 1;
        }
        while ((int)v55 < a2[2]);
      }
      ++v45;
    }
    while (a2[3] > (int)v45);
  }
}

double sub_21611F5AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v15 = 0;
  uint64_t v64 = *MEMORY[0x263EF8340];
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  int32x4_t v49 = 0u;
  int32x4_t v50 = 0u;
  int32x4_t v47 = 0u;
  int32x4_t v48 = 0u;
  uint64_t v16 = *(int *)(a1 + 16);
  int v17 = (long long *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + *(void *)a1 + 16);
  uint64_t v18 = 4 * v16;
  do
  {
    long long v19 = *v17;
    int v20 = &v47.i8[v15];
    *(_OWORD *)int v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v15 += 32;
    int v17 = (long long *)((char *)v17 + v18);
  }
  while (v15 != 128);
  uint64_t v21 = 0;
  long long v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v46[0] = *(_OWORD *)(*a4 + 4 * a9);
  v46[1] = v22;
  int32x4_t v23 = *(int32x4_t *)(*a5 + 4 * a10);
  int v24 = *a6;
  unsigned int v25 = *a7 + 128;
  int32x4_t v26 = vdupq_n_s32(v25);
  char v27 = 1;
  do
  {
    uint64_t v28 = 0;
    char v29 = v27;
    int32x4_t v30 = vmulq_s32((int32x4_t)v46[v21], v26);
    unsigned int v31 = &v47.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    char v27 = 0;
    uint64_t v21 = 1;
  }
  while ((v29 & 1) != 0);
  uint64_t v32 = 0;
  int32x4_t v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  int32x4_t v56 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  int32x4_t v57 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  int32x4_t v58 = vdupq_laneq_s32(v33, 2);
  int32x4_t v59 = vdupq_laneq_s32(v33, 3);
  char v34 = 1;
  do
  {
    uint64_t v35 = 0;
    char v36 = v34;
    uint64_t v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v47 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v47 + v37), *(int32x4_t *)((char *)&v56 + v35));
      v35 += 16;
      v37 += 32;
    }
    while (v35 != 64);
    char v34 = 0;
    uint64_t v32 = 1;
  }
  while ((v36 & 1) != 0);
  long long v60 = v51;
  long long v61 = v52;
  long long v62 = v53;
  long long v63 = v54;
  int32x4_t v56 = v47;
  int32x4_t v57 = v48;
  int32x4_t v58 = v49;
  int32x4_t v59 = v50;
  double v38 = sub_21611FBA4(a2, &v56, a11);
  uint64_t v39 = 0;
  *(double *)uint64_t v55 = v38;
  v55[1] = v40;
  v55[2] = v41;
  v55[3] = v42;
  uint64_t v43 = *(int *)(a3 + 16);
  char v44 = (double *)(*(void *)a3 + a13 + (int)v43 * (uint64_t)a14);
  do
  {
    double result = *(double *)&v55[v39];
    double *v44 = result;
    ++v39;
    char v44 = (double *)((char *)v44 + v43);
  }
  while (v39 != 4);
  return result;
}

double sub_21611F7D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(int *)(a1 + 16);
  uint64_t v16 = (int32x4_t *)(*(void *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  uint64_t v17 = 4 * v15;
  do
  {
    *(int32x4_t *)((char *)&v35 + v14) = *v16;
    v14 += 16;
    uint64_t v16 = (int32x4_t *)((char *)v16 + v17);
  }
  while (v14 != 64);
  uint64_t v18 = 0;
  int32x4_t v19 = *(int32x4_t *)(*a4 + 4 * a9);
  int32x4_t v31 = v35;
  int32x4_t v32 = v36;
  int32x4_t v33 = v37;
  int32x4_t v34 = v38;
  int32x4_t v20 = *(int32x4_t *)(*a5 + 4 * a10);
  int v21 = *a6;
  unsigned int v22 = *a7 + 128;
  int32x4_t v23 = vmulq_s32(vdupq_n_s32(v22), v19);
  do
  {
    *(int32x4_t *)((char *)&v31 + v18) = vaddq_s32(*(int32x4_t *)((char *)&v31 + v18), v23);
    v18 += 16;
  }
  while (v18 != 64);
  uint64_t v24 = 0;
  int32x4_t v25 = vmulq_s32(vaddq_s32(vdupq_n_s32(v22 * a8), v20), vdupq_n_s32(v21 + 128));
  int32x4_t v35 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 0);
  int32x4_t v36 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 1);
  int32x4_t v37 = vdupq_laneq_s32(v25, 2);
  int32x4_t v38 = vdupq_laneq_s32(v25, 3);
  do
  {
    *(int32x4_t *)((char *)&v31 + v24) = vaddq_s32(*(int32x4_t *)((char *)&v31 + v24), *(int32x4_t *)((char *)&v35 + v24));
    v24 += 16;
  }
  while (v24 != 64);
  int32x4_t v26 = v31;
  int32x4_t v27 = v32;
  int32x4_t v28 = v33;
  int32x4_t v29 = v34;

  return sub_21611FC84(a2, a3, a11, v26, v27, v28, v29, a12, a13, a14);
}

uint64_t sub_21611F944(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(int *)(a1 + 16);
  uint64_t v16 = (__int32 *)(*(void *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  uint64_t v17 = 4 * v15;
  do
  {
    v20.i32[v14++] = *v16;
    uint64_t v16 = (__int32 *)((char *)v16 + v17);
  }
  while (v14 != 4);
  int32x4_t v18 = vmlaq_s32(vaddq_s32(vdupq_n_s32((*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)), v20), vaddq_s32(vdupq_n_s32((*a7 + 128) * a8), *(int32x4_t *)(*a5 + 4 * a10)), vdupq_n_s32(*a6 + 128));

  return sub_21611FDB4(a2, a3, a11, v18, a12, a13, a14);
}

int8x8_t sub_21611FA44(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14 = 4 * *(_DWORD *)(a1 + 16) * a10;
  unsigned int v15 = *a7 + 128;
  int32x4_t v16 = vdupq_n_s32(v15);
  int32x4_t v17 = vdupq_n_s32((*(_DWORD *)(*a5 + 4 * a10) + v15 * a8) * (*a6 + 128));
  return sub_21611FE58(a2, a3, a11, vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(void *)a1 + 4 * a9 + v14), v16, *(int32x4_t *)(*a4 + 4 * a9)), v17), vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(void *)a1 + 4 * a9 + 16 + v14), v16, *(int32x4_t *)(*a4 + 4 * a9 + 16)), v17), a12, a13, a14);
}

uint64_t sub_21611FAD8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t result = sub_216119DFC((_DWORD *)(a2 + 8), *(_DWORD *)(*(void *)a1 + 4 * a9 + 4 * *(_DWORD *)(a1 + 16) * a10)+ (*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)+ *(_DWORD *)(**(void **)a2 + 4 * a11)+ (*(_DWORD *)(*a5 + 4 * a10) + (*a7 + 128) * a8) * (*a6 + 128));
  int32x4_t v17 = *(int **)(a2 + 24);
  int v19 = *v17;
  int v18 = v17[1];
  if ((int)result > v19) {
    int v19 = result;
  }
  if (v18 >= v19) {
    int v18 = v19;
  }
  int v20 = v18 & ~(v18 >> 31);
  if (v20 >= 255) {
    LOBYTE(v20) = -1;
  }
  *(unsigned char *)(*(void *)a3 + a13 + *(int *)(a3 + 16) * (uint64_t)a14) = v20;
  return result;
}

double sub_21611FBA4(uint64_t a1, int32x4_t *a2, int a3)
{
  uint64_t v4 = **(void **)a1 + 4 * a3;
  int32x4_t v5 = *(int32x4_t *)(v4 + 16);
  int32x4_t v6 = vaddq_s32(*(int32x4_t *)v4, *a2);
  int32x4_t v7 = vaddq_s32(v5, a2[1]);
  int32x4_t v8 = vaddq_s32(*(int32x4_t *)v4, a2[2]);
  int32x4_t v9 = vaddq_s32(v5, a2[3]);
  int32x4_t v10 = vaddq_s32(*(int32x4_t *)v4, a2[4]);
  int32x4_t v11 = vaddq_s32(v5, a2[5]);
  int32x4_t v12 = vaddq_s32(*(int32x4_t *)v4, a2[6]);
  int32x4_t v13 = vaddq_s32(v5, a2[7]);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  v16[0] = v6;
  v16[1] = v7;
  v16[2] = v8;
  v16[3] = v9;
  v16[4] = v10;
  v16[5] = v11;
  v16[6] = v12;
  v16[7] = v13;
  sub_2161196D8(a1 + 8, v16, &v17);
  v15[4] = v21;
  v15[5] = v22;
  v15[6] = v23;
  v15[7] = v24;
  v15[0] = v17;
  v15[1] = v18;
  v15[2] = v19;
  v15[3] = v20;
  return sub_21611E580((const float **)(a1 + 24), v15);
}

double sub_21611FC84(uint64_t a1, uint64_t a2, int a3, int32x4_t a4, int32x4_t a5, int32x4_t a6, int32x4_t a7, uint64_t a8, int a9, int a10)
{
  int32x4_t v14 = *(int32x4_t *)(**(void **)a1 + 4 * a3);
  double v15 = sub_2161199F8(a1 + 8, *(double *)vaddq_s32(v14, a4).i64, *(double *)vaddq_s32(v14, a5).i64, (__n128)vaddq_s32(v14, a6), (__n128)vaddq_s32(v14, a7));
  *(double *)v19.i64 = sub_21611E840((const float **)(a1 + 24), v15, v16, v17, v18);
  v24[0] = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v19), v20));
  v24[1] = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v21), v22));
  return sub_21611FD20((uint64_t)v24, a2, a9, a10);
}

double sub_21611FD20(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(int *)(a2 + 16);
  uint64_t v6 = *(void *)a2 + a3 + (int)v5 * (uint64_t)a4;
  uint64_t v7 = v6 + 1;
  uint64_t v8 = v6 + 2;
  uint64_t v9 = v6 + 3;
  char v10 = 1;
  do
  {
    uint64_t v11 = a1 + 8 * v4;
    uint64_t v12 = 2 * v4 * v5;
    double result = *(double *)v11;
    *(unsigned char *)(v6 + v12) = *(void *)v11;
    *(unsigned char *)(v7 + v12) = *(unsigned char *)(v11 + 1);
    *(unsigned char *)(v8 + v12) = *(unsigned char *)(v11 + 2);
    *(unsigned char *)(v9 + v12) = *(unsigned char *)(v11 + 3);
    uint64_t v14 = ((2 * v4) | 1) * v5;
    *(unsigned char *)(v6 + v14) = *(unsigned char *)(v11 + 4);
    *(unsigned char *)(v7 + v14) = *(unsigned char *)(v11 + 5);
    *(unsigned char *)(v8 + v14) = *(unsigned char *)(v11 + 6);
    LOBYTE(v12) = v10;
    *(unsigned char *)(v9 + v14) = *(unsigned char *)(v11 + 7);
    uint64_t v4 = 1;
    char v10 = 0;
  }
  while ((v12 & 1) != 0);
  return result;
}

uint64_t sub_21611FDB4(uint64_t result, uint64_t a2, int a3, int32x4_t a4, uint64_t a5, int a6, int a7)
{
  int v7 = 0;
  uint64_t v8 = *(const float **)(result + 8);
  uint64_t v9 = (const float *)(**(void **)result + 4 * a3);
  int32x4_t v10 = (int32x4_t)vld1q_dup_f32(v9);
  uint64_t v11 = v8 + 2;
  int32x4_t v12 = (int32x4_t)vld1q_dup_f32(v11);
  int32x4_t v13 = (const float *)(result + 16);
  int32x4_t v14 = (int32x4_t)vld1q_dup_f32(v13);
  int32x4_t v15 = vshlq_s32(vaddq_s32(v10, a4), v14);
  int32x4_t v16 = (int32x4_t)vld1q_dup_f32(v8);
  int32x4_t v17 = vdupq_n_s32(-*(_DWORD *)(result + 20));
  int32x4_t v18 = vqrdmulhq_s32(v15, v16);
  int32x4_t v19 = vaddq_s32(vrshlq_s32(vqaddq_s32(v18, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)v18))), v17), v12);
  int32x4_t v20 = *(const float **)(result + 24);
  int32x4_t v21 = (int32x4_t)vld1q_dup_f32(v20++);
  int32x4_t v22 = (int32x4_t)vld1q_dup_f32(v20);
  int16x8_t v23 = (int16x8_t)vminq_s32(vmaxq_s32(v19, v21), v22);
  *(int16x4_t *)v23.i8 = vqmovn_s32((int32x4_t)v23);
  unsigned __int32 v24 = vqmovun_s16(v23).u32[0];
  do
  {
    *(unsigned char *)(*(void *)a2 + a6 + *(int *)(a2 + 16) * (uint64_t)a7) = v24 >> v7;
    v7 += 8;
    ++a7;
  }
  while (v7 != 32);
  return result;
}

int8x8_t sub_21611FE58(uint64_t a1, uint64_t a2, int a3, int32x4_t a4, int32x4_t a5, uint64_t a6, int a7, int a8)
{
  *(double *)v12.i64 = sub_216119BEC((const float *)(a1 + 8), *(double *)vaddq_s32(*(int32x4_t *)(**(void **)a1 + 4 * a3), a4).i64, (int32x2_t)*(_OWORD *)&vaddq_s32(*(int32x4_t *)(**(void **)a1 + 4 * a3 + 16), a5));
  int32x4_t v13 = *(const float **)(a1 + 24);
  int32x4_t v14 = (int32x4_t)vld1q_dup_f32(v13++);
  int32x4_t v15 = (int32x4_t)vld1q_dup_f32(v13);
  int8x8_t result = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vminq_s32(vmaxq_s32(v12, v14), v15)), vminq_s32(vmaxq_s32(v16, v14), v15)));
  *(int8x8_t *)(*(void *)a2 + a7 + *(int *)(a2 + 16) * (uint64_t)a8) = result;
  return result;
}

uint64_t sub_21611FEE4(uint64_t result, uint64_t a2, int a3, int32x4_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7 = 0;
  uint64_t v8 = *(const float **)(result + 8);
  uint64_t v9 = v8 + 2;
  int32x4_t v10 = (int32x4_t)vld1q_dup_f32(v9);
  uint64_t v11 = (const float *)(result + 16);
  int32x4_t v12 = (int32x4_t)vld1q_dup_f32(v11);
  int32x4_t v13 = vshlq_s32(vaddq_s32(*(int32x4_t *)(**(void **)result + 4 * a3), a4), v12);
  int32x4_t v14 = (int32x4_t)vld1q_dup_f32(v8);
  int32x4_t v15 = vdupq_n_s32(-*(_DWORD *)(result + 20));
  int32x4_t v16 = vqrdmulhq_s32(v13, v14);
  int32x4_t v17 = vaddq_s32(vrshlq_s32(vqaddq_s32(v16, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)v16))), v15), v10);
  int32x4_t v18 = *(const float **)(result + 24);
  int32x4_t v19 = (int32x4_t)vld1q_dup_f32(v18++);
  int32x4_t v20 = (int32x4_t)vld1q_dup_f32(v18);
  int16x8_t v21 = (int16x8_t)vminq_s32(vmaxq_s32(v17, v19), v20);
  *(int16x4_t *)v21.i8 = vqmovn_s32((int32x4_t)v21);
  unsigned __int32 v22 = vqmovun_s16(v21).u32[0];
  uint64_t v23 = a6;
  do
  {
    *(unsigned char *)(*(void *)a2 + *(int *)(a2 + 16) * (uint64_t)a7 + v23) = v22 >> v7;
    v7 += 8;
    ++v23;
  }
  while (v7 != 32);
  return result;
}

void sub_21611FF88()
{
}

void sub_21611FF9C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 168);
  int v3 = *(_DWORD *)(a1 + 172);
  int v4 = *(_DWORD *)(a1 + 44);
  sub_216119F50((uint64_t)v32, 0, *(void **)(a1 + 8), *(_DWORD **)(a1 + 192));
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 192);
  int32x4_t v27 = v5;
  uint64_t v31 = v6;
  unint64_t v7 = (4 * *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12) + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v8 = v5[3];
  v5[v8 + 5] = v5[4];
  unint64_t v9 = v5[4] + v7;
  uint64_t v10 = v5[10];
  ++v5[3];
  v5[4] = v9;
  char v28 = v8;
  uint64_t v29 = v10;
  char v30 = 5;
  sub_216117C60((uint64_t)v5);
  if (v3 >= 1)
  {
    int v11 = 0;
    uint64_t v12 = *(void *)(a1 + 192);
    int v13 = *(_DWORD *)(v12 + 16);
    int v25 = v3;
    do
    {
      if (v3 - v11 >= v13) {
        int v14 = v13;
      }
      else {
        int v14 = v3 - v11;
      }
      if (v2 >= 1)
      {
        int v15 = 0;
        int v16 = *(_DWORD *)(v12 + 12);
        do
        {
          int v17 = *(_DWORD *)(a1 + 48);
          uint64_t v36 = *(void *)(a1 + 32) + v17 * v15;
          if (v2 - v15 >= v16) {
            int v18 = v16;
          }
          else {
            int v18 = v2 - v15;
          }
          unint64_t v37 = __PAIR64__(v4, v18);
          LODWORD(v38) = v17;
          v35[0] = (uint64_t)v32;
          v35[1] = (uint64_t)&v36;
          sub_216118644(v35);
          unint64_t v19 = *(void *)(a1 + 192);
          uint64_t v36 = *(void *)(a1 + 24);
          unint64_t v37 = v19;
          int32x4_t v38 = &v27;
          uint64_t v39 = v32;
          uint64_t v40 = a1 + 56;
          sub_216118BC4((uint64_t)&v36, v4);
          int v20 = *(_DWORD *)(a1 + 164) + v11;
          LODWORD(v36) = *(_DWORD *)(a1 + 160) + v15;
          HIDWORD(v36) = v20;
          unint64_t v37 = __PAIR64__(v14, v18);
          uint64_t v21 = *(void *)(v33 + 8 * v34 + 40) + *(void *)(v33 + 16);
          uint64_t v22 = *(void *)(*(void *)(a1 + 72) + 8 * *(unsigned __int8 *)(a1 + 104) + 40)
              + *(void *)(*(void *)(a1 + 72) + 16);
          uint64_t v23 = *(_DWORD **)(a1 + 184);
          LODWORD(v35[0]) = **(_DWORD **)(a1 + 176);
          HIDWORD(v35[0]) = v18;
          v26[0] = *v23;
          v26[1] = v14;
          sub_21611F108(a1 + 136, &v36, (uint64_t)&v27, v4, v21, v22, (int *)v35, v26, *(void *)(a1 + 200));
          uint64_t v12 = *(void *)(a1 + 192);
          int v16 = *(_DWORD *)(v12 + 12);
          v15 += v16;
        }
        while (v15 < v2);
        int v13 = *(_DWORD *)(v12 + 16);
        int v3 = v25;
      }
      v11 += v13;
    }
    while (v11 < v3);
  }
  uint64_t v24 = *(void *)(a1 + 8);
  *(unsigned char *)uint64_t v24 = 0;
  ++*(void *)(v24 + 80);
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 32) = 0;
}

uint64_t sub_2161201B4@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4 = *a1;
  unsigned int v17 = a1[1];
  uint64_t v5 = (float32x4_t *)*((void *)a1 + 16);
  uint64_t v6 = a1[37];
  unint64_t v7 = v6 * (unint64_t)*a1;
  int v8 = v6 * *a1;
  uint64_t v9 = 3 * *a1;
  uint64_t v10 = (float32x4_t *)((char *)v5 + 4 * v6 * (unint64_t)(2 * *a1));
  int v11 = (float32x4_t *)((char *)v5 + 4 * v6 * (unint64_t)v9);
  uint64_t v12 = (4 * *a1 - v9) * v6;
  sub_216110F70(v8, v5);
  sub_216110CAC(v8, &v5->f32[v7]);
  sub_216110F70(v8, v10);
  sub_216110F70(v12, v11);
  sub_216110B80(v8, v10, *((float32x4_t **)a1 + 10));
  sub_216110B80(v8, (float32x4_t *)((char *)v5 + 4 * v7), v5);
  sub_216110AB8();
  sub_216110CDC(a1[22], *((float32x4_t **)a1 + 10), v11);
  if (a1[2])
  {
    int v13 = (void *)*((void *)a1 + 4);
    unsigned int v4 = a1[12];
    unsigned int v14 = a1[13];
    uint64_t result = (uint64_t)memmove(v13, v11, 4 * v12);
  }
  else
  {
    uint64_t v16 = *((void *)a1 + 4);
    unsigned int v14 = a1[13];
    int v13 = (void *)(v16 + 4 * v17 * (unint64_t)v14);
    uint64_t result = sub_216110C20();
  }
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v4 * (unint64_t)v14;
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v14;
  *(_DWORD *)(a2 + 24) = 2;
  return result;
}

uint64_t sub_21612030C(uint64_t a1, void *a2)
{
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t result = sub_216110C48();
      ++v4;
      v3 += 32;
    }
    while ((uint64_t)(a2[1] - *a2) >> 5 > v4);
  }
  return result;
}

uint64_t sub_216120384@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v17 = *(unsigned int *)(a2 + 16);
  if (v17)
  {
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a2 + 20);
    do
    {
      if (v5)
      {
        int v9 = 0;
        uint64_t v10 = v5;
        unsigned int v11 = v6;
        do
        {
          sub_216110BF8();
          *(_DWORD *)(*(void *)a3 + 4 * v11++) = v12;
          v9 += v8;
          --v10;
        }
        while (v10);
      }
      ++v7;
      v6 += v5;
    }
    while (v7 != v17);
  }
  uint64_t result = sub_216111268(v17, v5, *(float32x4_t **)a3);
  unsigned int v14 = *(_DWORD *)(a3 + 16);
  unsigned int v15 = *(_DWORD *)(a3 + 20);
  *(void *)a4 = *(void *)a3;
  *(void *)(a4 + 8) = v15 * (unint64_t)v14;
  *(_DWORD *)(a4 + 16) = v14;
  *(_DWORD *)(a4 + 20) = v15;
  *(_DWORD *)(a4 + 24) = 2;
  return result;
}

uint64_t sub_21612048C@<X0>(uint64_t a1@<X1>, float32x4_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 20);
  if (v5)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    do
    {
      sub_216110B80(v6, *a2, (float32x4_t *)(*(void *)a1 + 4 * v8));
      v8 += v6;
      --v9;
    }
    while (v9);
  }
  uint64_t result = sub_21611157C(v5, v6, *(float **)a1);
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 20);
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v12 * (unint64_t)v11;
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = v12;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

unsigned __int8 *sub_216120528(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 16);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    int v5 = *result;
    do
    {
      uint64_t result = (unsigned __int8 *)sub_2161111EC();
      ++v4;
      v3 += v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2161205E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(unsigned __int8 *)(a3 + 160);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = *(_DWORD *)(a2 + 20);
    int v9 = v8 * *(unsigned __int8 *)(a3 + 4);
    do
    {
      uint64_t result = sub_216110C20();
      v7 += v9;
      v6 += v8;
      --v5;
    }
    while (v5);
    unsigned int v4 = *(unsigned __int8 *)(a3 + 160);
  }
  unsigned int v11 = *(unsigned __int8 *)(a3 + 4);
  if (*(unsigned char *)(a3 + 296))
  {
    *(_DWORD *)(*(void *)(a3 + 264) + 4 * v4) = 1065353216;
    if (v11 - 1 == v4) {
      *(unsigned char *)(a3 + 296) = 0;
    }
  }
  *(unsigned char *)(a3 + 160) = (v4 + 1) % v11;
  return result;
}

void sub_2161206AC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 28))
  {
    sub_2161149D0(*(void *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    uint64_t v10 = *(void *)(a1 + 96);
    uint64_t v11 = sub_21610F6CC((uint64_t)a4);
    sub_216114B6C(v10, (uint64_t *)&__p, v11, (uint64_t)v33);
    sub_21610F704((uint64_t)a4, (*(void *)(a2 + 8) - *(void *)a2) >> 2);
    unsigned int v12 = (float **)sub_21610F6FC((uint64_t)a4);
    uint64_t v13 = *(void *)&v33[8];
    unsigned int v14 = *v12;
    if (*(void *)&v33[8])
    {
      uint64_t v15 = *(void *)(a1 + 96);
      double v16 = *(double *)(v15 + 120);
      uint64_t v17 = *(unsigned __int8 **)v33;
      int v18 = *(_DWORD *)(v15 + 112);
      unint64_t v19 = *v12;
      do
      {
        int v20 = *v17++;
        float v21 = v16 * (double)(v20 - v18);
        *v19++ = v21;
        --v13;
      }
      while (v13);
    }
    uint64_t v22 = *(void *)(a1 + 104);
    *(void *)int32x4_t v32 = v14;
    *(void *)&void v32[8] = *(unsigned int *)&v33[20] * (unint64_t)*(unsigned int *)&v33[16];
    *(_DWORD *)&unsigned char v32[16] = *(_DWORD *)&v33[16];
    *(_DWORD *)&v32[20] = *(_DWORD *)&v33[20];
    *(_DWORD *)&v32[24] = 2;
    int v23 = *(_DWORD *)(a1 + 16);
    uint64_t v24 = (uint64_t *)sub_21610F6EC((uint64_t)a4);
    sub_216120978(v22, (uint64_t)v32, a3, v23, v24, a5);
    if (__p)
    {
      int32x4_t v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      int v25 = (unsigned int *)a4[1];
      sub_2161141CC(&__p, ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) * *(unsigned __int16 *)(*(void *)(a1 + 56) + 34));
      uint64_t v27 = *(void *)(a1 + 56);
      char v28 = *(unsigned int **)a2;
      if (*(void *)(a2 + 8) == *(void *)a2)
      {
        uint64_t v31 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(void *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          char v28 = *(unsigned int **)a2;
          uint64_t v30 = *(void *)(a2 + 8) - *(void *)a2;
        }
        while (v29 < v30 >> 2);
        uint64_t v27 = *(void *)(a1 + 56);
        uint64_t v31 = (void *)((unint64_t)v30 >> 2);
      }
      sub_216115338(a1, (uint64_t)v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34), v26);
      sub_2161154A0(v25, (uint64_t)v32);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p) {
        free(__p);
      }
    }
    else
    {
      sub_216115510(*(void *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_2161156B0(*(void *)(a1 + 64), &__p, a4[1], (uint64_t)v32);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p)
      {
        int32x4_t v35 = __p;
        operator delete(__p);
      }
    }
    if (*(unsigned char *)(a1 + 29))
    {
      sub_216115734(*(void *)(a1 + 80), (uint64_t)v33, a4[2], (uint64_t)v32);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
    }
    sub_216120AC8(*(void *)(a1 + 72), (uint64_t)v33, a3, *(_DWORD *)(a1 + 16), a4 + 6, a5);
  }
}

void sub_216120948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    free(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216120978(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = *a5;
  uint64_t v10 = *((unsigned int *)a5 + 5);
  *(void *)a6 = *a5;
  *(void *)(a6 + 8) = v10;
  *(_DWORD *)(a6 + 16) = 1;
  *(_DWORD *)(a6 + 20) = v10;
  *(_DWORD *)(a6 + 24) = 1;
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  sub_216113D30(__p, *(int *)(a2 + 20));
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      uint64_t v13 = *(unsigned int *)(*a3 + 4 * i);
      if (a4 == -1 || (float v14 = 0.0, v13 != a4))
      {
        uint64_t v15 = *(unsigned int *)(a1 + 20);
        if (v15)
        {
          double v16 = (unsigned __int8 *)(*(void *)a1 + v15 * (unint64_t)v13);
          double v17 = *(double *)(a1 + 72);
          int v18 = *(_DWORD *)(a1 + 64);
          unint64_t v19 = (float *)__p[0];
          do
          {
            int v20 = *v16++;
            float v21 = v17 * (double)(v20 - v18);
            *v19++ = v21;
            --v15;
          }
          while (v15);
        }
        int v22 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v13);
        double v23 = *(double *)(a1 + 88);
        int v24 = *(_DWORD *)(a1 + 80);
        cblas_sdot_NEWLAPACK();
        float v25 = v23 * (double)(v22 - v24);
        float v14 = v26 + v25;
      }
      *(float *)(v9 + 4 * i) = v14;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t sub_216120AC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *((unsigned int *)a5 + 5);
  *(void *)a6 = *a5;
  *(void *)(a6 + 8) = v7;
  *(_DWORD *)(a6 + 16) = 1;
  *(_DWORD *)(a6 + 20) = v7;
  *(_DWORD *)(a6 + 24) = 1;
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  if (v8)
  {
    uint64_t v11 = result;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(unsigned int *)(*a3 + v12);
      if (a4 == -1 || (float v14 = 0.0, v13 != a4))
      {
        uint64_t result = cblas_sdot_NEWLAPACK();
        float v14 = v15 + *(float *)(*(void *)(v11 + 32) + 4 * v13);
      }
      *(float *)(v6 + v12) = v14;
      v12 += 4;
    }
    while (4 * v8 != v12);
  }
  return result;
}

void sub_216120BA4(void **a1, unint64_t a2)
{
  unsigned int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_21610CB04();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_2161129B4(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_216120C4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t result = *(void *)(a1 + 96);
    if (result && *(void *)(a1 + 88)) {
      sub_216113198();
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 64);
    if (result && *(void *)(a1 + 56)) {
      sub_216113334();
    }
  }
  *a2 = 0;
  return result;
}

void sub_216120D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161120D8((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216120DDC(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_26C6C5460;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(void *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 0;
  operator new();
}

void sub_216120E7C(uint64_t a1)
{
  sub_216111DD8(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216120EB4(uint64_t a1, const char *a2)
{
  char v3 = sub_216112224(*(void *)(a1 + 40), a2);
  unsigned int v4 = *(unsigned __int8 ***)(a1 + 40);
  if (v3)
  {
    int64_t v5 = *v4;
    sub_2161211A8(a1, v5);
  }
  sub_216111D40((uint64_t)v4);
  return 0;
}

void sub_216120F14(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 144);
  if (v2) {
    sub_216112B70(v2, a2);
  }
}

void sub_216120F24(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 144);
  if (!v4) {
    sub_2161217E4();
  }
  uint64_t v5 = *(void *)(v4 + 8);

  sub_216121A10(a1, a2, v5, a3);
}

void sub_216120F9C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = sub_216121154(a1, a2, a3);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  if (v7)
  {
    sub_216120BA4((void **)a4, (uint64_t)(a2[1] - *a2) >> 2);
    if (a2[1] != *a2)
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = (float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a3 + 40))(a3, v8);
        if (v10) {
          int v11 = sub_216111640(v10, v9);
        }
        else {
          int v11 = 0;
        }
        int v13 = *(_DWORD **)(a4 + 8);
        unint64_t v12 = *(void *)(a4 + 16);
        if ((unint64_t)v13 >= v12)
        {
          float v15 = *(_DWORD **)a4;
          uint64_t v16 = ((uint64_t)v13 - *(void *)a4) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v18 = v12 - (void)v15;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            int v20 = (char *)sub_2161129B4(a4 + 16, v19);
            float v15 = *(_DWORD **)a4;
            int v13 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            int v20 = 0;
          }
          float v21 = &v20[4 * v16];
          *(_DWORD *)float v21 = v11;
          float v14 = v21 + 4;
          while (v13 != v15)
          {
            int v22 = *--v13;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(void *)a4 = v21;
          *(void *)(a4 + 8) = v14;
          *(void *)(a4 + 16) = &v20[4 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *int v13 = v11;
          float v14 = v13 + 1;
        }
        *(void *)(a4 + 8) = v14;
        ++v8;
      }
      while (v8 < (uint64_t)(a2[1] - *a2) >> 2);
    }
  }
}

void sub_21612112C(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216121154(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3) {
    BOOL v3 = a2[1] == *a2;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    sub_216121E84(a1, (uint64_t)a2, a3, (uint64_t)&v6);
    sub_21610FEC4(v7, v6);
  }
  return v4;
}

void sub_2161211A8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unsigned int v4 = a2[1];
  unsigned int v5 = a2[2];
  unsigned __int8 v6 = a2[3];
  *(_DWORD *)(a1 + 20) = v4 & 1;
  *(_DWORD *)(a1 + 24) = (v4 >> 2) & 1;
  *(unsigned char *)(a1 + 28) = (v4 & 2) != 0;
  *(unsigned char *)(a1 + 30) = v6;
  *(unsigned char *)(a1 + 29) = v6 != 0;
  if (v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 5;
  }
  sub_2161128F8(&v18, v7);
  uint64_t v8 = 0;
  if (v7 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v7;
  }
  do
  {
    *(_WORD *)((char *)v18 + v8) = *(_WORD *)&a2[v8 + 4];
    *(_WORD *)((char *)v18 + v8 + 2) = *(_WORD *)&a2[v8 + 6];
    v8 += 4;
  }
  while (4 * v9 != v8);
  if (*(unsigned char *)(a1 + 28))
  {
    for (uint64_t i = 0; i != 16; i += 2)
    {
      int v11 = &__p[i];
      *(_DWORD *)int v11 = 0;
      v11[1] = 0;
    }
    uint64_t v12 = 0;
    int v13 = &__p[1];
    do
    {
      float v14 = &a2[v12 + v8];
      *((_DWORD *)v13 - 2) = *((_DWORD *)v14 + 1);
      *int v13 = (void *)*((void *)v14 + 1);
      v13 += 2;
      v12 += 12;
    }
    while (v12 != 96);
    operator new();
  }
  sub_216112AB4(__p, v7);
  uint64_t v15 = 0;
  uint64_t v16 = (uint64_t)&a2[v8 + 4];
  uint64_t v17 = 2;
  do
  {
    *(void *)((char *)__p[0] + v15) = v16;
    v16 += 4 * *(unsigned __int16 *)((char *)v18 + v17 - 2) * (unint64_t)*(unsigned __int16 *)((char *)v18 + v17);
    v15 += 8;
    v17 += 4;
  }
  while (8 * v9 != v15);
  operator new();
}

void sub_216121770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161217E4()
{
}

void sub_2161219CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161120D8((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216121A10(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(_DWORD *)(a1 + 20) == 1) {
    sub_216121D2C(a1, a2, (uint64_t *)a3, a4);
  }
  else {
    sub_216121B5C(a1, a2, a3, a4);
  }
}

void sub_216121A24()
{
}

void sub_216121AA4(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1080C404FD05E4CLL);
  _Unwind_Resume(a1);
}

void sub_216121AC8()
{
}

void sub_216121B38(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10C0C401F533AC0);
  _Unwind_Resume(a1);
}

void sub_216121B5C(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v7 = *a2;
  unsigned __int8 v6 = a2[1];
  uint64_t v9 = **a2;
  uint64_t v8 = (*a2)[1];
  LODWORD(v26[0]) = 0;
  sub_21611494C(a4, (v8 - v9) >> 2, v26);
  LODWORD(v26[0]) = 0;
  sub_21611494C(&__p, (v8 - v9) >> 2, v26);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7);
  if ((int)v10 >= 2)
  {
    uint64_t v11 = 0;
    unsigned int v12 = v10 - 1;
    if ((unint64_t)((v8 - v9) >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = (v8 - v9) >> 2;
    }
    uint64_t v14 = v12;
    while (1)
    {
      uint64_t v15 = &(*a2)[3 * v11];
      sub_216121E84(a1, (uint64_t)v15, a3, (uint64_t)v26);
      if (v8 != v9) {
        break;
      }
LABEL_14:
      ++v11;
      sub_21610FEC4((unint64_t)(v29 - (unsigned char *)__p) >> 2, (float *)__p);
      sub_21610FD98();
      if (v11 == v14) {
        goto LABEL_15;
      }
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = v15 + 3;
    uint64_t v19 = *(unsigned int *)(a1 + 16);
    uint64_t v20 = (float *)__p;
    uint64_t v21 = v26[0];
    uint64_t v22 = v27;
    while (1)
    {
      if (v19 == 0xFFFFFFFFLL)
      {
        uint64_t v23 = *(unsigned int *)(*v18 + 4 * v17);
      }
      else
      {
        float v24 = 1.0;
        if (*(_DWORD *)(*v15 + 4 * v17) == v19) {
          goto LABEL_13;
        }
        uint64_t v23 = *(unsigned int *)(*v18 + 4 * v17);
        if (v23 == v19) {
          goto LABEL_13;
        }
      }
      float v24 = *(float *)(v21 + 4 * (v16 + v23));
LABEL_13:
      v20[v17++] = v24;
      v16 += v22;
      if (v13 == v17) {
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  if (__p)
  {
    unint64_t v29 = __p;
    operator delete(__p);
  }
}

void sub_216121CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216121D2C@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  uint64_t v9 = **a2;
  uint64_t v8 = (*a2)[1];
  LODWORD(v18[0]) = 0;
  sub_21611494C(a4, (v8 - v9) >> 2, v18);
  if ((int)v7 >= 2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (v7 - 1);
    if ((unint64_t)((v8 - v9) >> 2) <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = (v8 - v9) >> 2;
    }
    do
    {
      uint64_t v13 = &(*a2)[3 * v10];
      sub_2161229C8(a1, (uint64_t)v13, v13 + 3, a3, (uint64_t)v18);
      uint64_t v14 = v18[0];
      if (v8 != v9)
      {
        uint64_t v15 = 0;
        int v16 = *(_DWORD *)(a1 + 16);
        do
        {
          if (v16 != -1 && *(_DWORD *)(*v13 + 4 * v15) == v16) {
            *(_DWORD *)(v14 + 4 * v15) = 0;
          }
          ++v15;
        }
        while (v12 != v15);
      }
      ++v10;
      sub_21610FD98();
    }
    while (v10 != v11);
  }
  return sub_21610FD78();
}

void sub_216121E68(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216121E84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 28))
  {
    sub_2161149D0(*(void *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    uint64_t v8 = *(void *)(a1 + 96);
    uint64_t v9 = sub_21610F6CC(a3);
    sub_216114B6C(v8, (uint64_t *)&__p, v9, (uint64_t)v33);
    sub_21610F704(a3, (*(void *)(a2 + 8) - *(void *)a2) >> 2);
    uint64_t v10 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)sub_21610F6F4(a3);
    sub_216114FC0(v10, v33, v11, v32);
    uint64_t v12 = (float **)sub_21610F6EC(a3);
    int v13 = *(_DWORD *)&v32[16];
    int v14 = *(_DWORD *)&v32[20];
    unint64_t v15 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
    int v16 = *v12;
    if (v15)
    {
      uint64_t v17 = *(unsigned __int8 **)v32;
      uint64_t v18 = *(void *)(a1 + 104);
      double v19 = *(double *)(v18 + 120);
      int v20 = *(_DWORD *)(v18 + 112);
      uint64_t v21 = *v12;
      unint64_t v22 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
      do
      {
        int v23 = *v17++;
        float v24 = v19 * (double)(v23 - v20);
        *v21++ = v24;
        --v22;
      }
      while (v22);
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v15;
    *(_DWORD *)(a4 + 16) = v13;
    *(_DWORD *)(a4 + 20) = v14;
    *(_DWORD *)(a4 + 24) = 2;
    sub_216110100((*(void *)(a2 + 8) - *(void *)a2) >> 2, *(unsigned __int16 *)(*(void *)(a1 + 88) + 32), v16);
    if (__p)
    {
      int32x4_t v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      float v25 = *(unsigned int **)(a3 + 8);
      sub_2161141CC(&__p, ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) * *(unsigned __int16 *)(*(void *)(a1 + 56) + 34));
      uint64_t v27 = *(void *)(a1 + 56);
      char v28 = *(unsigned int **)a2;
      if (*(void *)(a2 + 8) == *(void *)a2)
      {
        uint64_t v31 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(void *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          char v28 = *(unsigned int **)a2;
          uint64_t v30 = *(void *)(a2 + 8) - *(void *)a2;
        }
        while (v29 < v30 >> 2);
        uint64_t v27 = *(void *)(a1 + 56);
        uint64_t v31 = (void *)((unint64_t)v30 >> 2);
      }
      sub_216115338(a1, (uint64_t)v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34), v26);
      sub_216122174(v25, (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p) {
        free(__p);
      }
    }
    else
    {
      sub_216115510(*(void *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_2161221E4(*(void *)(a1 + 64), &__p, *(void *)(a3 + 8), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p)
      {
        int32x4_t v35 = __p;
        operator delete(__p);
      }
    }
    if (*(unsigned char *)(a1 + 29))
    {
      sub_216122268(*(void *)(a1 + 80), (uint64_t)v33, *(void *)(a3 + 16), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
    }
    sub_21612240C((uint64_t)v33, a3 + 48, a4);
    sub_216110100((*(void *)(a2 + 8) - *(void *)a2) >> 2, *(unsigned __int16 *)(*(void *)(a1 + 56) + 32), *(float **)a4);
  }
}

void sub_216122140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    free(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216122174@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  sub_216110008();

  return sub_2161224D0(a1, a2);
}

uint64_t sub_2161221E4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_216122628(a1, a2);
  sub_216110084();
  sub_21610FDC4(*(unsigned int *)(a3 + 144), *(_DWORD *)(a3 + 148), *(void *)(a1 + 32), *(float **)(a3 + 128));

  return sub_2161224D0((unsigned int *)a3, a4);
}

void sub_216122268(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  uint64_t v9 = a3 + 32;
  uint64_t v10 = a3 + 184;
  sub_2161102F4((void *)v8, *(_DWORD *)(a2 + 20), *(char **)a2, *(char **)(a3 + 32));
  unsigned int v11 = *(_DWORD *)(v9 + 16);
  unsigned int v12 = *(_DWORD *)(v9 + 20);
  uint64_t v21 = *(void *)v9;
  unint64_t v22 = v12 * (unint64_t)v11;
  unsigned int v23 = v11;
  unsigned int v24 = v12;
  int v25 = 2;
  sub_2161226A0((unsigned __int8 *)a1, (uint64_t)&v21, v10, (uint64_t)v26);
  if (*(unsigned char *)(v9 + 264)) {
    sub_2161227A8((uint64_t)v26, (float **)(a3 + 264), (uint64_t)&v21);
  }
  if (v7)
  {
    int v13 = 0;
    int v14 = 0;
    uint64_t v15 = v7;
    do
    {
      sub_21610FE68();
      v14 += 2 * v8;
      v13 += v8;
      --v15;
    }
    while (v15);
  }
  unsigned int v16 = *(_DWORD *)(a3 + 96);
  unsigned int v17 = *(_DWORD *)(a3 + 100);
  uint64_t v21 = *(void *)(a3 + 80);
  unint64_t v22 = v17 * (unint64_t)v16;
  unsigned int v23 = v16;
  unsigned int v24 = v17;
  int v25 = 2;
  sub_216122844((unsigned __int8 *)a1, (uint64_t)v26);
  sub_2161228FC(a1, v9, a3);
  sub_216110084();
  sub_21610FEF4(*(_DWORD *)(a1 + 24) * v7, *(float **)(a3 + 32));
  unsigned int v18 = *(_DWORD *)(a1 + 24);
  unsigned int v19 = *(_DWORD *)(a2 + 20);
  *(void *)a4 = *(void *)(a3 + 32);
  *(void *)(a4 + 8) = v19 * (unint64_t)v18;
  *(_DWORD *)(a4 + 16) = v18;
  *(_DWORD *)(a4 + 20) = v19;
  *(_DWORD *)(a4 + 24) = 2;
}

uint64_t sub_21612240C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  *(void *)a3 = *(void *)a2;
  *(void *)(a3 + 8) = v4 * (unint64_t)v5;
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  *(_DWORD *)(a3 + 24) = 2;
  uint64_t result = sub_216110084();
  if (*(_DWORD *)(a1 + 20))
  {
    int v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = sub_21610FD98();
      ++v8;
      v7 += v4;
    }
    while (v8 < *(unsigned int *)(a1 + 20));
  }
  return result;
}

uint64_t sub_2161224D0@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4 = *a1;
  unsigned int v17 = a1[1];
  unsigned int v5 = (float *)*((void *)a1 + 16);
  uint64_t v6 = a1[37];
  unint64_t v7 = v6 * (unint64_t)*a1;
  int v8 = v6 * *a1;
  uint64_t v9 = 3 * *a1;
  uint64_t v10 = &v5[v6 * (unint64_t)(2 * *a1)];
  unsigned int v11 = &v5[v6 * (unint64_t)v9];
  uint64_t v12 = (4 * *a1 - v9) * v6;
  sub_21610FF84(v8, v5);
  sub_21610FEF4(v8, &v5[v7]);
  sub_21610FF84(v8, v10);
  sub_21610FF84(v12, v11);
  sub_21610FE18(v8, v10, *((float **)a1 + 10));
  sub_21610FE18(v8, &v5[v7], v5);
  sub_21610FD98();
  sub_21610FF24(a1[22], *((float **)a1 + 10), v11);
  if (a1[2])
  {
    int v13 = (void *)*((void *)a1 + 4);
    unsigned int v4 = a1[12];
    unsigned int v14 = a1[13];
    uint64_t result = (uint64_t)memmove(v13, v11, 4 * v12);
  }
  else
  {
    uint64_t v16 = *((void *)a1 + 4);
    unsigned int v14 = a1[13];
    int v13 = (void *)(v16 + 4 * v17 * (unint64_t)v14);
    uint64_t result = sub_21610FE68();
  }
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v4 * (unint64_t)v14;
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v14;
  *(_DWORD *)(a2 + 24) = 2;
  return result;
}

uint64_t sub_216122628(uint64_t a1, void *a2)
{
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t result = sub_21610FE90();
      ++v4;
      v3 += 32;
    }
    while ((uint64_t)(a2[1] - *a2) >> 5 > v4);
  }
  return result;
}

uint64_t sub_2161226A0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v17 = *(unsigned int *)(a2 + 16);
  if (v17)
  {
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a2 + 20);
    do
    {
      if (v5)
      {
        int v9 = 0;
        uint64_t v10 = v5;
        unsigned int v11 = v6;
        do
        {
          sub_21610FE40();
          *(_DWORD *)(*(void *)a3 + 4 * v11++) = v12;
          v9 += v8;
          --v10;
        }
        while (v10);
      }
      ++v7;
      v6 += v5;
    }
    while (v7 != v17);
  }
  uint64_t result = sub_216110100(v17, v5, *(float **)a3);
  unsigned int v14 = *(_DWORD *)(a3 + 16);
  unsigned int v15 = *(_DWORD *)(a3 + 20);
  *(void *)a4 = *(void *)a3;
  *(void *)(a4 + 8) = v15 * (unint64_t)v14;
  *(_DWORD *)(a4 + 16) = v14;
  *(_DWORD *)(a4 + 20) = v15;
  *(_DWORD *)(a4 + 24) = 2;
  return result;
}

uint64_t sub_2161227A8@<X0>(uint64_t a1@<X1>, float **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 20);
  if (v5)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    do
    {
      sub_21610FE18(v6, *a2, (float *)(*(void *)a1 + 4 * v8));
      v8 += v6;
      --v9;
    }
    while (v9);
  }
  uint64_t result = sub_216110230(v5, v6, *(float **)a1);
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 20);
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v12 * (unint64_t)v11;
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = v12;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

unsigned __int8 *sub_216122844(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 16);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    int v5 = *result;
    do
    {
      uint64_t result = (unsigned __int8 *)sub_216110084();
      ++v4;
      v3 += v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_2161228FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(unsigned __int8 *)(a3 + 160);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = *(_DWORD *)(a2 + 20);
    int v9 = v8 * *(unsigned __int8 *)(a3 + 4);
    do
    {
      uint64_t result = sub_21610FE68();
      v7 += v9;
      v6 += v8;
      --v5;
    }
    while (v5);
    unsigned int v4 = *(unsigned __int8 *)(a3 + 160);
  }
  unsigned int v11 = *(unsigned __int8 *)(a3 + 4);
  if (*(unsigned char *)(a3 + 296))
  {
    *(_DWORD *)(*(void *)(a3 + 264) + 4 * v4) = 1065353216;
    if (v11 - 1 == v4) {
      *(unsigned char *)(a3 + 296) = 0;
    }
  }
  *(unsigned char *)(a3 + 160) = (v4 + 1) % v11;
  return result;
}

void sub_2161229C8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 28))
  {
    sub_2161149D0(*(void *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    uint64_t v10 = *(void *)(a1 + 96);
    uint64_t v11 = sub_21610F6CC((uint64_t)a4);
    sub_216114B6C(v10, (uint64_t *)&__p, v11, (uint64_t)v33);
    sub_21610F704((uint64_t)a4, (*(void *)(a2 + 8) - *(void *)a2) >> 2);
    unsigned int v12 = (float **)sub_21610F6FC((uint64_t)a4);
    uint64_t v13 = *(void *)&v33[8];
    unsigned int v14 = *v12;
    if (*(void *)&v33[8])
    {
      uint64_t v15 = *(void *)(a1 + 96);
      double v16 = *(double *)(v15 + 120);
      uint64_t v17 = *(unsigned __int8 **)v33;
      int v18 = *(_DWORD *)(v15 + 112);
      unsigned int v19 = *v12;
      do
      {
        int v20 = *v17++;
        float v21 = v16 * (double)(v20 - v18);
        *v19++ = v21;
        --v13;
      }
      while (v13);
    }
    uint64_t v22 = *(void *)(a1 + 104);
    *(void *)int32x4_t v32 = v14;
    *(void *)&void v32[8] = *(unsigned int *)&v33[20] * (unint64_t)*(unsigned int *)&v33[16];
    *(_DWORD *)&unsigned char v32[16] = *(_DWORD *)&v33[16];
    *(_DWORD *)&v32[20] = *(_DWORD *)&v33[20];
    *(_DWORD *)&v32[24] = 2;
    int v23 = *(_DWORD *)(a1 + 16);
    unsigned int v24 = (uint64_t *)sub_21610F6EC((uint64_t)a4);
    sub_216120978(v22, (uint64_t)v32, a3, v23, v24, a5);
    if (__p)
    {
      int32x4_t v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      int v25 = (unsigned int *)a4[1];
      sub_2161141CC(&__p, ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) * *(unsigned __int16 *)(*(void *)(a1 + 56) + 34));
      uint64_t v27 = *(void *)(a1 + 56);
      char v28 = *(unsigned int **)a2;
      if (*(void *)(a2 + 8) == *(void *)a2)
      {
        uint64_t v31 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(void *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          char v28 = *(unsigned int **)a2;
          uint64_t v30 = *(void *)(a2 + 8) - *(void *)a2;
        }
        while (v29 < v30 >> 2);
        uint64_t v27 = *(void *)(a1 + 56);
        uint64_t v31 = (void *)((unint64_t)v30 >> 2);
      }
      sub_216115338(a1, (uint64_t)v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34), v26);
      sub_216122174(v25, (uint64_t)v32);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p) {
        free(__p);
      }
    }
    else
    {
      sub_216115510(*(void *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_2161221E4(*(void *)(a1 + 64), &__p, a4[1], (uint64_t)v32);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p)
      {
        int32x4_t v35 = __p;
        operator delete(__p);
      }
    }
    if (*(unsigned char *)(a1 + 29))
    {
      sub_216122268(*(void *)(a1 + 80), (uint64_t)v33, a4[2], (uint64_t)v32);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
    }
    sub_216122C94(*(void *)(a1 + 72), (uint64_t)v33, a3, *(_DWORD *)(a1 + 16), a4 + 6, a5);
  }
}

void sub_216122C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    free(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216122C94@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *((unsigned int *)a5 + 5);
  *(void *)a6 = *a5;
  *(void *)(a6 + 8) = v7;
  *(_DWORD *)(a6 + 16) = 1;
  *(_DWORD *)(a6 + 20) = v7;
  *(_DWORD *)(a6 + 24) = 1;
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  if (v8)
  {
    uint64_t v11 = result;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(unsigned int *)(*a3 + v12);
      if (a4 == -1 || (float v14 = 0.0, v13 != a4))
      {
        uint64_t result = cblas_sdot_NEWLAPACK();
        float v14 = v15 + *(float *)(*(void *)(v11 + 32) + 4 * v13);
      }
      *(float *)(v6 + v12) = v14;
      v12 += 4;
    }
    while (4 * v8 != v12);
  }
  return result;
}

uint64_t sub_216122D70@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t result = *(void *)(a1 + 96);
    if (result && *(void *)(a1 + 88)) {
      sub_216113198();
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 64);
    if (result && *(void *)(a1 + 56)) {
      sub_216121A24();
    }
  }
  *a2 = 0;
  return result;
}

void sub_216122EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161120D8((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216122F00(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_26C6C54B8;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(void *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 0;
  operator new();
}

void sub_216122FA0(uint64_t a1)
{
  sub_216111DD8(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216122FD8(uint64_t a1, const char *a2)
{
  char v3 = sub_216112224(*(void *)(a1 + 40), a2);
  unsigned int v4 = *(unsigned __int8 ***)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *v4;
    sub_2161232CC(a1, v5);
  }
  sub_216111D40((uint64_t)v4);
  return 0;
}

void sub_216123038(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 144);
  if (v2) {
    sub_216112B70(v2, a2);
  }
}

void sub_216123048(uint64_t a1@<X0>, uint64_t **a2@<X1>, float **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 144);
  if (!v4) {
    sub_216123908();
  }
  uint64_t v5 = *(void *)(v4 + 8);

  sub_216123B34(a1, a2, v5, a3);
}

void sub_2161230C0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = sub_216123278(a1, a2, a3);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  if (v7)
  {
    sub_216120BA4((void **)a4, (uint64_t)(a2[1] - *a2) >> 2);
    if (a2[1] != *a2)
    {
      unint64_t v8 = 0;
      do
      {
        int v9 = (float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a3 + 40))(a3, v8);
        if (v10) {
          int v11 = sub_216111640(v10, v9);
        }
        else {
          int v11 = 0;
        }
        uint64_t v13 = *(_DWORD **)(a4 + 8);
        unint64_t v12 = *(void *)(a4 + 16);
        if ((unint64_t)v13 >= v12)
        {
          float v15 = *(_DWORD **)a4;
          uint64_t v16 = ((uint64_t)v13 - *(void *)a4) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v18 = v12 - (void)v15;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            int v20 = (char *)sub_2161129B4(a4 + 16, v19);
            float v15 = *(_DWORD **)a4;
            uint64_t v13 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            int v20 = 0;
          }
          float v21 = &v20[4 * v16];
          *(_DWORD *)float v21 = v11;
          float v14 = v21 + 4;
          while (v13 != v15)
          {
            int v22 = *--v13;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(void *)a4 = v21;
          *(void *)(a4 + 8) = v14;
          *(void *)(a4 + 16) = &v20[4 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *uint64_t v13 = v11;
          float v14 = v13 + 1;
        }
        *(void *)(a4 + 8) = v14;
        ++v8;
      }
      while (v8 < (uint64_t)(a2[1] - *a2) >> 2);
    }
  }
}

void sub_216123250(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216123278(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3) {
    BOOL v3 = a2[1] == *a2;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    sub_216123FA8(a1, (uint64_t)a2, a3, (uint64_t)&v6);
    sub_2161104B8(v7, v6);
  }
  return v4;
}

void sub_2161232CC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unsigned int v4 = a2[1];
  unsigned int v5 = a2[2];
  unsigned __int8 v6 = a2[3];
  *(_DWORD *)(a1 + 20) = v4 & 1;
  *(_DWORD *)(a1 + 24) = (v4 >> 2) & 1;
  *(unsigned char *)(a1 + 28) = (v4 & 2) != 0;
  *(unsigned char *)(a1 + 30) = v6;
  *(unsigned char *)(a1 + 29) = v6 != 0;
  if (v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 5;
  }
  sub_2161128F8(&v18, v7);
  uint64_t v8 = 0;
  if (v7 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v7;
  }
  do
  {
    *(_WORD *)((char *)v18 + v8) = *(_WORD *)&a2[v8 + 4];
    *(_WORD *)((char *)v18 + v8 + 2) = *(_WORD *)&a2[v8 + 6];
    v8 += 4;
  }
  while (4 * v9 != v8);
  if (*(unsigned char *)(a1 + 28))
  {
    for (uint64_t i = 0; i != 16; i += 2)
    {
      int v11 = &__p[i];
      *(_DWORD *)int v11 = 0;
      v11[1] = 0;
    }
    uint64_t v12 = 0;
    uint64_t v13 = &__p[1];
    do
    {
      float v14 = &a2[v12 + v8];
      *((_DWORD *)v13 - 2) = *((_DWORD *)v14 + 1);
      *uint64_t v13 = (void *)*((void *)v14 + 1);
      v13 += 2;
      v12 += 12;
    }
    while (v12 != 96);
    operator new();
  }
  sub_216112AB4(__p, v7);
  uint64_t v15 = 0;
  uint64_t v16 = (uint64_t)&a2[v8 + 4];
  uint64_t v17 = 2;
  do
  {
    *(void *)((char *)__p[0] + v15) = v16;
    v16 += 4 * *(unsigned __int16 *)((char *)v18 + v17 - 2) * (unint64_t)*(unsigned __int16 *)((char *)v18 + v17);
    v15 += 8;
    v17 += 4;
  }
  while (8 * v9 != v15);
  operator new();
}

void sub_216123894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_216123908()
{
}

void sub_216123AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161120D8((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216123B34(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, float **a4@<X8>)
{
  if (*(_DWORD *)(a1 + 20) == 1) {
    sub_216123E50(a1, a2, (uint64_t *)a3, a4);
  }
  else {
    sub_216123C80(a1, a2, a3, a4);
  }
}

void sub_216123B48()
{
}

void sub_216123BC8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1080C404FD05E4CLL);
  _Unwind_Resume(a1);
}

void sub_216123BEC()
{
}

void sub_216123C5C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10C0C401F533AC0);
  _Unwind_Resume(a1);
}

void sub_216123C80(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, float **a4@<X8>)
{
  uint64_t v8 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v10 = **a2;
  uint64_t v9 = (*a2)[1];
  LODWORD(v27[0]) = 0;
  sub_21611494C(a4, (v9 - v10) >> 2, v27);
  LODWORD(v27[0]) = 0;
  sub_21611494C(&__p, (v9 - v10) >> 2, v27);
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - v8);
  if ((int)v11 >= 2)
  {
    uint64_t v12 = 0;
    unsigned int v13 = v11 - 1;
    if ((unint64_t)((v9 - v10) >> 2) <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = (v9 - v10) >> 2;
    }
    uint64_t v15 = v13;
    while (1)
    {
      uint64_t v16 = &(*a2)[3 * v12];
      sub_216123FA8(a1, (uint64_t)v16, a3, (uint64_t)v27);
      if (v9 != v10) {
        break;
      }
LABEL_14:
      ++v12;
      sub_2161104B8((unint64_t)(v30 - (unsigned char *)__p) >> 2, (float *)__p);
      sub_216110414((unint64_t)((char *)a4[1] - (char *)*a4) >> 2, (float *)__p, *a4);
      if (v12 == v15) {
        goto LABEL_15;
      }
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = v16 + 3;
    uint64_t v20 = *(unsigned int *)(a1 + 16);
    float v21 = (float *)__p;
    uint64_t v22 = v27[0];
    uint64_t v23 = v28;
    while (1)
    {
      if (v20 == 0xFFFFFFFFLL)
      {
        uint64_t v24 = *(unsigned int *)(*v19 + 4 * v18);
      }
      else
      {
        float v25 = 1.0;
        if (*(_DWORD *)(*v16 + 4 * v18) == v20) {
          goto LABEL_13;
        }
        uint64_t v24 = *(unsigned int *)(*v19 + 4 * v18);
        if (v24 == v20) {
          goto LABEL_13;
        }
      }
      float v25 = *(float *)(v22 + 4 * (v17 + v24));
LABEL_13:
      v21[v18++] = v25;
      v17 += v23;
      if (v14 == v18) {
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
}

void sub_216123E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216123E50@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, float **a4@<X8>)
{
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  uint64_t v10 = **a2;
  uint64_t v9 = (*a2)[1];
  LODWORD(v19[0]) = 0;
  sub_21611494C(a4, (v9 - v10) >> 2, v19);
  if ((int)v8 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (v8 - 1);
    if ((unint64_t)((v9 - v10) >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = (v9 - v10) >> 2;
    }
    do
    {
      uint64_t v14 = &(*a2)[3 * v11];
      sub_216124C54(a1, (uint64_t)v14, v14 + 3, a3, (uint64_t)v19);
      uint64_t v15 = (float *)v19[0];
      if (v9 != v10)
      {
        uint64_t v16 = 0;
        int v17 = *(_DWORD *)(a1 + 16);
        do
        {
          if (v17 != -1 && *(_DWORD *)(*v14 + 4 * v16) == v17) {
            v15[v16] = 0.0;
          }
          ++v16;
        }
        while (v13 != v16);
        uint64_t v15 = (float *)v19[0];
      }
      ++v11;
      sub_216110414((unint64_t)((char *)a4[1] - (char *)*a4) >> 2, v15, *a4);
    }
    while (v11 != v12);
  }
  return sub_2161103F0((unint64_t)((char *)a4[1] - (char *)*a4) >> 2, *a4, 0.43429);
}

void sub_216123F8C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216123FA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 28))
  {
    sub_2161149D0(*(void *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    uint64_t v8 = *(void *)(a1 + 96);
    uint64_t v9 = sub_21610F6CC(a3);
    sub_216114B6C(v8, (uint64_t *)&__p, v9, (uint64_t)v33);
    sub_21610F704(a3, (*(void *)(a2 + 8) - *(void *)a2) >> 2);
    uint64_t v10 = *(void *)(a1 + 104);
    uint64_t v11 = (void *)sub_21610F6F4(a3);
    sub_216114FC0(v10, v33, v11, v32);
    uint64_t v12 = (float **)sub_21610F6EC(a3);
    int v13 = *(_DWORD *)&v32[16];
    int v14 = *(_DWORD *)&v32[20];
    unint64_t v15 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
    uint64_t v16 = *v12;
    if (v15)
    {
      int v17 = *(unsigned __int8 **)v32;
      uint64_t v18 = *(void *)(a1 + 104);
      double v19 = *(double *)(v18 + 120);
      int v20 = *(_DWORD *)(v18 + 112);
      float v21 = *v12;
      unint64_t v22 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
      do
      {
        int v23 = *v17++;
        float v24 = v19 * (double)(v23 - v20);
        *v21++ = v24;
        --v22;
      }
      while (v22);
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v15;
    *(_DWORD *)(a4 + 16) = v13;
    *(_DWORD *)(a4 + 20) = v14;
    *(_DWORD *)(a4 + 24) = 2;
    sub_21611089C((*(void *)(a2 + 8) - *(void *)a2) >> 2, *(unsigned __int16 *)(*(void *)(a1 + 88) + 32), v16);
    if (__p)
    {
      int32x4_t v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      uint64_t v25 = *(void *)(a3 + 8);
      sub_2161141CC(&__p, ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) * *(unsigned __int16 *)(*(void *)(a1 + 56) + 34));
      uint64_t v27 = *(void *)(a1 + 56);
      unsigned int v28 = *(unsigned int **)a2;
      if (*(void *)(a2 + 8) == *(void *)a2)
      {
        uint64_t v31 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(void *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          unsigned int v28 = *(unsigned int **)a2;
          uint64_t v30 = *(void *)(a2 + 8) - *(void *)a2;
        }
        while (v29 < v30 >> 2);
        uint64_t v27 = *(void *)(a1 + 56);
        uint64_t v31 = (unint64_t)v30 >> 2;
      }
      sub_216124298(v26, a1, v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34));
      sub_216124400(*(void *)(a1 + 64), v25, (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p) {
        free(__p);
      }
    }
    else
    {
      sub_216115510(*(void *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_216124470(*(void *)(a1 + 64), (uint64_t *)&__p, *(void *)(a3 + 8), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p)
      {
        int32x4_t v35 = __p;
        operator delete(__p);
      }
    }
    if (*(unsigned char *)(a1 + 29))
    {
      sub_2161244F4(*(void *)(a1 + 80), (uint64_t)v33, *(void *)(a3 + 16), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
    }
    sub_216124698(*(void *)(a1 + 72), (uint64_t)v33, a3 + 48, *(_DWORD *)(a1 + 20), a4);
    sub_21611089C((*(void *)(a2 + 8) - *(void *)a2) >> 2, *(unsigned __int16 *)(*(void *)(a1 + 56) + 32), *(float **)a4);
  }
}

void sub_216124264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    free(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216124298(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  LODWORD(v6) = a6;
  int v7 = a5;
  uint64_t v9 = *(char **)(a3 + 128);
  if ((int)a5 > 1)
  {
    a1.i32[0] = a5 - 1;
    a1 = vcnt_s8(a1);
    a1.i16[0] = vaddlv_u8((uint8x8_t)a1);
    if (a1.i32[0] < 2u) {
      goto LABEL_15;
    }
  }
  if ((int)a5 >= 1)
  {
    a1.i32[0] = a5;
    a1 = vcnt_s8(a1);
    a1.i16[0] = vaddlv_u8((uint8x8_t)a1);
    if (a1.i32[0] < 2u) {
      goto LABEL_15;
    }
  }
  BOOL v10 = ((a5 + 1) & a5) != 0 || (int)a5 < 0;
  BOOL v11 = v10;
  if (a6 >= 1
    && v11
    && (a1.i32[0] = a6, uint8x8_t v12 = (uint8x8_t)vcnt_s8(a1), v12.i16[0] = vaddlv_u8(v12), v12.i32[0] <= 1u)
    && (unsigned int v13 = a5 | (a5 >> 1) | ((a5 | (a5 >> 1)) >> 2),
        unsigned int v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8),
        uint64_t v15 = (v14 | HIWORD(v14)) + 1,
        *(void *)(a3 + 168) >= (unint64_t)((int)v15 * a6)))
  {
    memcpy(*(void **)(a3 + 160), *(const void **)a4, 4 * *(void *)(a4 + 8));
    sub_216110A3C(v15, v6, *(int **)(a3 + 160), *(_DWORD **)(a3 + 176));
    uint64_t v18 = 0;
    size_t v19 = 4 * v7;
    uint64_t v20 = 4 * (int)v15;
    uint64_t v6 = v6;
    do
    {
      uint64_t result = memcpy(v9, (const void *)(*(void *)(a3 + 176) + v18), v19);
      v18 += v20;
      v9 += v19;
      --v6;
    }
    while (v6);
  }
  else
  {
LABEL_15:
    uint64_t v16 = *(int **)a4;
    return (void *)sub_216110A3C(a5, a6, v16, v9);
  }
  return result;
}

void sub_216124400(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_21611059C(*(unsigned int *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a2 + 52), *(void *)a1, *(float **)(a2 + 32), *(float **)(a2 + 128), 0, 0);

  sub_21612475C((unsigned int *)a2, a3);
}

void sub_216124470(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_2161248B4(a1, a2, (uint64_t *)(a3 + 32));
  sub_216110800(*(unsigned int *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a3 + 52), *(void *)a1, *(float **)(a3 + 32), *(void **)(a3 + 128), 0, 0);
  sub_21610FDC4(*(unsigned int *)(a3 + 144), *(_DWORD *)(a3 + 148), *(void *)(a1 + 32), *(float **)(a3 + 128));

  sub_21612475C((unsigned int *)a3, a4);
}

void sub_2161244F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  uint64_t v9 = a3 + 32;
  uint64_t v10 = a3 + 184;
  BOOL v11 = (void *)(a3 + 80);
  uint8x8_t v12 = (void *)(a3 + 128);
  sub_216110A3C(v8, *(_DWORD *)(a2 + 20), *(int **)a2, *(_DWORD **)(a3 + 32));
  unsigned int v13 = *(_DWORD *)(v9 + 16);
  unsigned int v14 = *(_DWORD *)(v9 + 20);
  uint64_t v23 = *(void *)v9;
  unint64_t v24 = v14 * (unint64_t)v13;
  unsigned int v25 = v13;
  unsigned int v26 = v14;
  int v27 = 2;
  sub_21612492C((unsigned __int8 *)a1, (uint64_t)&v23, v10, v11, (uint64_t)v28);
  if (*(unsigned char *)(v9 + 264)) {
    sub_216124A34((uint64_t)v28, (float **)(a3 + 264), (uint64_t)&v23);
  }
  if (v7)
  {
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    uint64_t v17 = v7;
    do
    {
      sub_21611046C(v8, (float *)(*(void *)v9 + 4 * v15), (float *)(*v12 + 4 * v16));
      v16 += 2 * v8;
      v15 += v8;
      --v17;
    }
    while (v17);
  }
  unsigned int v18 = *(_DWORD *)(a3 + 96);
  unsigned int v19 = *(_DWORD *)(a3 + 100);
  uint64_t v23 = *(void *)(a3 + 80);
  unint64_t v24 = v19 * (unint64_t)v18;
  unsigned int v25 = v18;
  unsigned int v26 = v19;
  int v27 = 2;
  sub_216124AD0((unsigned __int8 *)a1, (uint64_t)v28, (uint64_t)&v23, v12);
  sub_216124B88(a1, v9, a3);
  sub_216110800(*(unsigned int *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a3 + 144), *(void *)(a1 + 8), *(float **)(a3 + 128), *(void **)(a3 + 32), 0, 1);
  sub_2161104FC(*(_DWORD *)(a1 + 24) * v7, *(float **)(a3 + 32));
  unsigned int v20 = *(_DWORD *)(a1 + 24);
  unsigned int v21 = *(_DWORD *)(a2 + 20);
  *(void *)a4 = *(void *)(a3 + 32);
  *(void *)(a4 + 8) = v21 * (unint64_t)v20;
  *(_DWORD *)(a4 + 16) = v20;
  *(_DWORD *)(a4 + 20) = v21;
  *(_DWORD *)(a4 + 24) = 2;
}

void sub_216124698(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void **)a3;
  unsigned int v8 = *(_DWORD *)(a3 + 20);
  uint64_t v11 = a2 + 16;
  int v10 = *(_DWORD *)(a2 + 16);
  unint64_t v9 = *(unsigned int *)(v11 + 4);
  *(void *)a5 = *(void *)a3;
  *(void *)(a5 + 8) = v8 * (unint64_t)v9;
  *(_DWORD *)(a5 + 16) = v9;
  *(_DWORD *)(a5 + 20) = v8;
  *(_DWORD *)(a5 + 24) = 2;
  if (a4 == 1)
  {
    int v12 = *(_DWORD *)(a1 + 16);
    unsigned int v13 = v7;
    int v14 = 1;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 20);
    unsigned int v13 = v7;
    int v14 = 0;
  }
  sub_216110800(v9, v10, v12, *(void *)a2, *(float **)a1, v13, 1, v14);
  if (*(_DWORD *)(a2 + 20))
  {
    unsigned int v15 = 0;
    unint64_t v16 = 0;
    do
    {
      sub_216110414(v8, *(float **)(a1 + 32), (float *)v7 + v15);
      ++v16;
      v15 += v8;
    }
    while (v16 < *(unsigned int *)(a2 + 20));
  }
}

void sub_21612475C(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4 = *a1;
  unsigned int v16 = a1[1];
  unsigned int v5 = (float *)*((void *)a1 + 16);
  uint64_t v6 = a1[37];
  unint64_t v7 = v6 * (unint64_t)*a1;
  int v8 = v6 * *a1;
  uint64_t v9 = 3 * *a1;
  int v10 = &v5[v6 * (unint64_t)(2 * *a1)];
  uint64_t v11 = &v5[v6 * (unint64_t)v9];
  uint64_t v12 = (4 * *a1 - v9) * v6;
  sub_216110540(v8, v5);
  sub_2161104FC(v8, &v5[v7]);
  sub_216110540(v8, v10);
  sub_216110540(v12, v11);
  sub_21610FE18(v8, v10, *((float **)a1 + 10));
  sub_21610FE18(v8, &v5[v7], v5);
  sub_216110414(v7, v5, *((float **)a1 + 10));
  sub_21610FF24(a1[22], *((float **)a1 + 10), v11);
  if (a1[2])
  {
    unsigned int v13 = (void *)*((void *)a1 + 4);
    unsigned int v4 = a1[12];
    unsigned int v14 = a1[13];
    memmove(v13, v11, 4 * v12);
  }
  else
  {
    uint64_t v15 = *((void *)a1 + 4);
    unsigned int v14 = a1[13];
    unsigned int v13 = (void *)(v15 + 4 * v16 * (unint64_t)v14);
    sub_21611046C(v12, v11, (float *)v13);
  }
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v4 * (unint64_t)v14;
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v14;
  *(_DWORD *)(a2 + 24) = 2;
}

void sub_2161248B4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = v4 >> 5;
    do
    {
      sub_21611048C(*(_DWORD *)(v3 + v7 + 8), v9, v8++, *(float **)(v3 + v7), *a3);
      uint64_t v3 = *a2;
      unint64_t v9 = (a2[1] - *a2) >> 5;
      v7 += 32;
    }
    while (v9 > v8);
  }
}

void sub_21612492C(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v21 = *(unsigned int *)(a2 + 16);
  if (v21)
  {
    unsigned int v7 = 0;
    uint64_t v8 = 0;
    int v9 = *(_DWORD *)(a2 + 20);
    do
    {
      if (v6)
      {
        unsigned int v10 = 0;
        uint64_t v11 = (float *)(*(void *)a2 + 4 * (v9 * v8));
        uint64_t v12 = *a4 + 4 * (v9 * v8 * v6);
        uint64_t v13 = v6;
        unsigned int v14 = v7;
        do
        {
          double v15 = sub_21611043C(v9, v11, (float *)(v12 + 4 * v10));
          *(_DWORD *)(*(void *)a3 + 4 * v14++) = LODWORD(v15);
          v10 += v9;
          --v13;
        }
        while (v13);
      }
      ++v8;
      v7 += v6;
    }
    while (v8 != v21);
  }
  sub_21611089C(v21, v6, *(float **)a3);
  unsigned int v16 = *(_DWORD *)(a3 + 16);
  unsigned int v17 = *(_DWORD *)(a3 + 20);
  *(void *)a5 = *(void *)a3;
  *(void *)(a5 + 8) = v17 * (unint64_t)v16;
  *(_DWORD *)(a5 + 16) = v16;
  *(_DWORD *)(a5 + 20) = v17;
  *(_DWORD *)(a5 + 24) = 2;
}

uint64_t sub_216124A34@<X0>(uint64_t a1@<X1>, float **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 20);
  if (v5)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    do
    {
      sub_21610FE18(v6, *a2, (float *)(*(void *)a1 + 4 * v8));
      v8 += v6;
      --v9;
    }
    while (v9);
  }
  uint64_t result = sub_2161109C8(v5, v6, *(float **)a1);
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 20);
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v12 * (unint64_t)v11;
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = v12;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

unsigned __int8 *sub_216124AD0(unsigned __int8 *result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v4)
  {
    unsigned int v8 = 0;
    int v9 = 0;
    unsigned int v10 = *result;
    uint64_t v11 = *(_DWORD *)(a3 + 20) / v10;
    do
    {
      uint64_t result = (unsigned __int8 *)sub_216110800(1uLL, v10, v11, *(void *)a2 + 4 * v8, (float *)(*(void *)a3 + 4 * v11 * v10 * v9), (void *)(*a4 + 4 * (2 * v11 * v9) + 4 * v11), 0, 0);
      ++v9;
      v8 += v10;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_216124B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(unsigned __int8 *)(a3 + 160);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5)
  {
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = *(void *)(a3 + 80) + 4 * *(_DWORD *)(a3 + 8) * v4;
    int v10 = *(_DWORD *)(a2 + 20);
    int v11 = v10 * *(unsigned __int8 *)(a3 + 4);
    do
    {
      sub_21611046C(v10, (float *)(*(void *)a2 + 4 * v7), (float *)(v9 + 4 * v8));
      v8 += v11;
      v7 += v10;
      --v5;
    }
    while (v5);
    unsigned int v4 = *(unsigned __int8 *)(a3 + 160);
  }
  unsigned int v12 = *(unsigned __int8 *)(a3 + 4);
  if (*(unsigned char *)(a3 + 296))
  {
    *(_DWORD *)(*(void *)(a3 + 264) + 4 * v4) = 1065353216;
    if (v12 - 1 == v4) {
      *(unsigned char *)(a3 + 296) = 0;
    }
  }
  *(unsigned char *)(a3 + 160) = (v4 + 1) % v12;
}

void sub_216124C54(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 28))
  {
    sub_2161149D0(*(void *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    uint64_t v10 = *(void *)(a1 + 96);
    uint64_t v11 = sub_21610F6CC((uint64_t)a4);
    sub_216114B6C(v10, (uint64_t *)&__p, v11, (uint64_t)v33);
    sub_21610F704((uint64_t)a4, (*(void *)(a2 + 8) - *(void *)a2) >> 2);
    unsigned int v12 = (float **)sub_21610F6FC((uint64_t)a4);
    uint64_t v13 = *(void *)&v33[8];
    unsigned int v14 = *v12;
    if (*(void *)&v33[8])
    {
      uint64_t v15 = *(void *)(a1 + 96);
      double v16 = *(double *)(v15 + 120);
      unsigned int v17 = *(unsigned __int8 **)v33;
      int v18 = *(_DWORD *)(v15 + 112);
      unsigned int v19 = *v12;
      do
      {
        int v20 = *v17++;
        float v21 = v16 * (double)(v20 - v18);
        *v19++ = v21;
        --v13;
      }
      while (v13);
    }
    uint64_t v22 = *(void *)(a1 + 104);
    *(void *)int32x4_t v32 = v14;
    *(void *)&void v32[8] = *(unsigned int *)&v33[20] * (unint64_t)*(unsigned int *)&v33[16];
    *(_DWORD *)&unsigned char v32[16] = *(_DWORD *)&v33[16];
    *(_DWORD *)&v32[20] = *(_DWORD *)&v33[20];
    *(_DWORD *)&v32[24] = 2;
    int v23 = *(_DWORD *)(a1 + 16);
    unint64_t v24 = (uint64_t *)sub_21610F6EC((uint64_t)a4);
    sub_216120978(v22, (uint64_t)v32, a3, v23, v24, a5);
    if (__p)
    {
      int32x4_t v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      uint64_t v25 = a4[1];
      sub_2161141CC(&__p, ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) * *(unsigned __int16 *)(*(void *)(a1 + 56) + 34));
      uint64_t v27 = *(void *)(a1 + 56);
      unsigned int v28 = *(unsigned int **)a2;
      if (*(void *)(a2 + 8) == *(void *)a2)
      {
        uint64_t v31 = 0;
      }
      else
      {
        unint64_t v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(void *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          unsigned int v28 = *(unsigned int **)a2;
          uint64_t v30 = *(void *)(a2 + 8) - *(void *)a2;
        }
        while (v29 < v30 >> 2);
        uint64_t v27 = *(void *)(a1 + 56);
        uint64_t v31 = (unint64_t)v30 >> 2;
      }
      sub_216124298(v26, a1, v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34));
      sub_216124400(*(void *)(a1 + 64), v25, (uint64_t)v32);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p) {
        free(__p);
      }
    }
    else
    {
      sub_216115510(*(void *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_216124470(*(void *)(a1 + 64), (uint64_t *)&__p, a4[1], (uint64_t)v32);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p)
      {
        int32x4_t v35 = __p;
        operator delete(__p);
      }
    }
    if (*(unsigned char *)(a1 + 29))
    {
      sub_2161244F4(*(void *)(a1 + 80), (uint64_t)v33, a4[2], (uint64_t)v32);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
    }
    sub_216124F20(*(void *)(a1 + 72), (uint64_t)v33, a3, *(_DWORD *)(a1 + 16), a4 + 6, a5);
  }
}

void sub_216124EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    free(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216124F20@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a5;
  uint64_t v7 = *((unsigned int *)a5 + 5);
  *(void *)a6 = *a5;
  *(void *)(a6 + 8) = v7;
  *(_DWORD *)(a6 + 16) = 1;
  *(_DWORD *)(a6 + 20) = v7;
  *(_DWORD *)(a6 + 24) = 1;
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  if (v8)
  {
    uint64_t v11 = result;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(unsigned int *)(*a3 + v12);
      if (a4 == -1 || (float v14 = 0.0, v13 != a4))
      {
        uint64_t result = cblas_sdot_NEWLAPACK();
        float v14 = v15 + *(float *)(*(void *)(v11 + 32) + 4 * v13);
      }
      *(float *)(v6 + v12) = v14;
      v12 += 4;
    }
    while (4 * v8 != v12);
  }
  return result;
}

uint64_t sub_216124FFC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t result = *(void *)(a1 + 96);
    if (result && *(void *)(a1 + 88)) {
      sub_216113198();
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 64);
    if (result && *(void *)(a1 + 56)) {
      sub_216123B48();
    }
  }
  *a2 = 0;
  return result;
}

void sub_216125148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161120D8((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_21612518C()
{
}

void sub_2161251C4(_DWORD *a1, int *__e, long double a3)
{
  if (a3 == 0.0)
  {
    *a1 = 0;
    *__e = 0;
  }
  else
  {
    unint64_t v5 = llround(frexp(a3, __e) * 2147483650.0);
    if (v5 == 0x80000000)
    {
      ++*__e;
      LODWORD(v5) = 0x40000000;
    }
    *a1 = v5;
  }
}

uint64_t sub_216125234()
{
  if (qword_26797CEB0 != -1) {
    dispatch_once(&qword_26797CEB0, &unk_26C6C9EA0);
  }
  return dword_26797CEA8;
}

uint64_t sub_216125278()
{
  qos_class_self();
  uint64_t result = pthread_qos_max_parallelism();
  dword_26797CEA8 = result;
  return result;
}

void sub_2161252A0()
{
}

void *sub_216125364(void *a1)
{
  *a1 = &unk_26C6C5388;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 32);
    if (v3)
    {
      *(void *)(v2 + 40) = v3;
      operator delete(v3);
    }
    MEMORY[0x2166CA800](v2, 0x1050C40AE4E9D09);
  }
  return a1;
}

void sub_2161253D8(void *a1)
{
  sub_216125364(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_216125410@<X0>(void *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result[1];
  if (*(unsigned int *)(v4 + 16) <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    size_t v5 = *(unsigned int *)(v4 + 20);
    uint64_t v6 = (const void *)(*(void *)v4 + v5 * a2);
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    uint64_t result = sub_216125500(&v7, v6, (uint64_t)v6 + v5, v5);
    *(_OWORD *)a3 = v7;
    a3[2] = v8;
  }
  return result;
}

uint64_t sub_216125484(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 16);
}

uint64_t sub_216125490(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 32);
}

uint64_t sub_21612549C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40) - *(void *)(*(void *)(a1 + 8) + 32);
}

__n128 sub_2161254AC(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void *sub_216125500(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    __n128 result = sub_21610ED94(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216125560(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21612557C(const char *a1, size_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v7 = 0u;
  size_t v5 = 128;
  return !sysctlbyname("hw.machine", __s1, &v5, 0, 0) && strncmp(__s1, a1, a2) == 0;
}

uint64_t sub_216125630()
{
  if (sub_21612557C("iPhone", 6uLL) || !sub_21612557C("iPad", 4uLL)) {
    return 2;
  }
  size_t v5 = 8;
  uint64_t v6 = 0;
  if (sysctlbyname("hw.cpufamily", &v6, &v5, 0, 0)) {
    uint64_t v0 = -1;
  }
  else {
    uint64_t v0 = v6;
  }
  uint64_t v1 = 3;
  uint64_t v2 = 2;
  int v3 = sub_216125234();
  if (v0 <= 1741614738)
  {
    if (v0 == 131287967)
    {
      if (v3 == 8) {
        return 4;
      }
      else {
        return 2;
      }
    }
    else if (v0 != 747742334)
    {
      return v2;
    }
    return v1;
  }
  if (v0 == 1741614739) {
    return v1;
  }
  if (v0 == 3894312694 || v0 == 2465937352) {
    return 2;
  }
  return v2;
}

uint64_t sub_21612574C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CEC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CEC0))
  {
    operator new();
  }
  return qword_26797CEB8;
}

void sub_216125818(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1080C40A6D20D6DLL);
  __cxa_guard_abort(&qword_26797CEC0);
  _Unwind_Resume(a1);
}

void *sub_216125850(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C6C49F0;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x2166CA7C0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_2161258B4(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *(void *)a1 = &unk_26C6C3BA0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_26C6C49F0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  long long v7 = (uint64_t *)(a1 + 96);
  *(void *)(a1 + 56) = &unk_26C6C49F0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_2161055D0((void *)(a1 + 96));
  sub_2161259F4(a1, a3, a4, &v9);
  sub_216159F94(v7, &v9);
  sub_216159D74(&v9);
  return a1;
}

void sub_2161259A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216159D74((uint64_t *)va);
  sub_216159D74(v5);
  sub_216125850(v4);
  sub_216125850(v3);
  long long v7 = *v2;
  *uint64_t v2 = 0;
  if (v7) {
    sub_216129DFC((uint64_t)v2, v7);
  }
  _Unwind_Resume(a1);
}

void *sub_2161259F4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  long long v8 = a2;
  unint64_t v9 = a3;
  __n128 result = sub_21612609C(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*a4)
  {
    sub_216159D74(a4);
    __n128 result = sub_216158150(&v8, 4uLL, a4);
    if (!*a4)
    {
      sub_216159D74(a4);
      __n128 result = sub_21612609C(v8, v9, (_DWORD *)(a1 + 92), a4);
      if (!*a4)
      {
        sub_216159D74(a4);
        __n128 result = sub_216158150(&v8, 4uLL, a4);
        if (!*a4)
        {
          sub_216159D74(a4);
          int v7 = 0;
          __n128 result = sub_216126298(v8, v9, &v7, a4);
          if (!*a4)
          {
            sub_216159D74(a4);
            __n128 result = sub_216158150(&v8, 4uLL, a4);
            if (!*a4)
            {
              sub_216159D74(a4);
              sub_216126494();
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_21612605C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21612659C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21612609C@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    uint64_t v6 = (void *)sub_216128C80((uint64_t)v8);
    sub_216129E78(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_216129E78(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v8, (uint64_t)") [", 3);
    sub_216129E78(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_216129E78(v8, (uint64_t)"] ", 2);
    sub_21612650C(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x2166CA750](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_2161055D0(a4);
  }
}

void sub_216126280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216126298@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    uint64_t v6 = (void *)sub_216128C80((uint64_t)v8);
    sub_216129E78(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_216129E78(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v8, (uint64_t)") [", 3);
    sub_216129E78(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_216129E78(v8, (uint64_t)"] ", 2);
    sub_21612650C(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x2166CA750](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_2161055D0(a4);
  }
}

void sub_21612647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216126494()
{
}

void sub_2161264E8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_21612650C(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    unint64_t v5 = v7;
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  sub_216159ED8(a2, v3, v4, v5);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216126580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21612659C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 8) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 8 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 120);
  return a1;
}

void *sub_2161266A4(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 8);
  if (!v1
    || (__n128 result = __dynamic_cast(v1, (const struct __class_type_info *)&unk_26C6BA5B0, (const struct __class_type_info *)&unk_26C6BA500, 16)) == 0)
  {
    char v7 = 1;
    uint64_t v3 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.cc", 18);
    sub_216129E78(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    unint64_t v5 = sub_216129E78(v4, (uint64_t)") [", 3);
    uint64_t v6 = sub_216129E78(v5, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    sub_216129E78(v6, (uint64_t)"] ", 2);
    sub_216128E18(&v7);
    return 0;
  }
  return result;
}

void sub_216126788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_21612679C(void *a1)
{
  *a1 = &unk_26C6C3BA0;
  sub_216159D74(a1 + 12);
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = &unk_26C6C49F0;
  uint64_t v2 = a1[10];
  if (v2)
  {
    MEMORY[0x2166CA7C0](v2, 0x1000C8052888210);
    a1[10] = 0;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = &unk_26C6C49F0;
  uint64_t v3 = a1[6];
  if (v3)
  {
    MEMORY[0x2166CA7C0](v3, 0x1000C8052888210);
    a1[6] = 0;
  }
  uint64_t v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4) {
    sub_216129DFC((uint64_t)(a1 + 2), v4);
  }
  return a1;
}

const char *sub_216126884(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }
  else {
    return "<unk>";
  }
}

const char *sub_216126908(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  }
  else {
    return "<s>";
  }
}

const char *sub_21612698C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  }
  else {
    return "</s>";
  }
}

const char *sub_216126A10(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  }
  else {
    return "<pad>";
  }
}

uint64_t sub_216126A94(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unsigned int v7 = 0;
  sub_216126B18(a1 + 56, a2, (int *)&v7, a3, 0);
  uint64_t result = v7;
  if (v7 == -1)
  {
    sub_216126B18(a1 + 24, a2, (int *)&v7, a3, 0);
    uint64_t result = v7;
    if (v7 == -1) {
      return *(unsigned int *)(a1 + 88);
    }
  }
  return result;
}

uint64_t sub_216126B18(uint64_t result, unsigned char *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 16);
  unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      int v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7) {
        break;
      }
      if (!--a4) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v8 = *a2;
    if (*a2)
    {
      char v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8) {
          break;
        }
        int v10 = *v9++;
        int v8 = v10;
        if (!v10) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        int v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  int v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sub_216126BC8@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_216157D08() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.cc", 18);
    sub_216129E78(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    uint64_t v4 = sub_216129E78(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_216129E78(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_216129E78(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_216129E78(v6, (uint64_t)") ", 2);
    sub_216129E78(v7, (uint64_t)"Not implemented.", 16);
    sub_216128E18(&v9);
  }
  return sub_216159ED8(a1, 12, "Not implemented.", 16);
}

void sub_216126CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_216126CB4@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_216157D08() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.cc", 18);
    sub_216129E78(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    uint64_t v4 = sub_216129E78(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_216129E78(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_216129E78(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_216129E78(v6, (uint64_t)") ", 2);
    sub_216129E78(v7, (uint64_t)"Not implemented.", 16);
    sub_216128E18(&v9);
  }
  return sub_216159ED8(a1, 12, "Not implemented.", 16);
}

void sub_216126D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_216126DA0(uint64_t a1)
{
  long long v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  int32x4_t v50 = &v51;
  int32x4_t v47 = &v48;
  int32x4_t v48 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v45 = (uint64_t *)v46;
  LOBYTE(v53) = 0;
  sub_21612A2A4(&__p, 0x100uLL, (unsigned __int8 *)&v53);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*(_DWORD *)(a1 + 88) == -1)
    {
      sub_216159ED8(&v53, 13, "unk is not defined.", 19);
      sub_216159F94((uint64_t *)(a1 + 96), &v53);
    }
    else
    {
      uint64_t v25 = *(unsigned char **)(v3 + 80);
      if (!v25) {
        uint64_t v25 = &unk_26797EB78;
      }
      if (!v25[248]
        || (*(void *)&long long v53 = __p,
            DWORD2(v53) = 0,
            sub_21612A998((uint64_t)&v53, v44, (uint64_t)&v41),
            v41.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v44 >> 6))
        && LODWORD(v41.__r_.__value_.__r.__words[1]) == (v44 & 0x3F))
      {
        if (!v52
          || (sub_216127670(a1 + 24, &v50, (uint64_t)&v53),
              sub_216159F94((uint64_t *)(a1 + 96), &v53),
              sub_216159D74((uint64_t *)&v53),
              (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
              uint64_t v26 = v53,
              sub_216159D74((uint64_t *)&v53),
              !v26))
        {
          if (!v49
            || (sub_216127670(a1 + 56, &v47, (uint64_t)&v53),
                sub_216159F94((uint64_t *)(a1 + 96), &v53),
                sub_216159D74((uint64_t *)&v53),
                (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
                uint64_t v27 = v53,
                sub_216159D74((uint64_t *)&v53),
                !v27))
          {
            sub_216127B54();
          }
        }
        goto LABEL_69;
      }
      sub_216159F94((uint64_t *)(a1 + 96), &v53);
    }
LABEL_68:
    sub_216159D74((uint64_t *)&v53);
    goto LABEL_69;
  }
  int v4 = 0;
  while (1)
  {
    uint64_t v5 = sub_216128EF4(v3 + 56, v4);
    uint64_t v6 = v5;
    unint64_t v7 = *(void *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(void *)(v7 + 8))
      {
LABEL_50:
        sub_216159ED8(&v53, 13, "piece must not be empty.", 24);
        sub_216159F94((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
    }
    else if (!*(unsigned char *)(v7 + 23))
    {
      goto LABEL_50;
    }
    unsigned int v9 = *(_DWORD *)(v5 + 60);
    BOOL v10 = v9 > 5;
    int v11 = (1 << v9) & 0x32;
    BOOL v12 = v10 || v11 == 0;
    long long v13 = (uint64_t **)(v12 ? &v47 : &v50);
    if ((v8 & 0x80) != 0)
    {
      unint64_t v14 = *(void *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else
    {
      unint64_t v14 = v7;
    }
    *(void *)&long long v53 = v14;
    *((void *)&v53 + 1) = v8;
    LODWORD(v54) = v4;
    sub_21612A524(v13, (uint64_t)&v53, (uint64_t)&v53);
    if ((v15 & 1) == 0) {
      break;
    }
    int v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      unint64_t v17 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        unint64_t v19 = *(void *)v17;
        uint64_t v18 = *(void *)(v17 + 8);
      }
      else
      {
        uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
        unint64_t v19 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(void *)&long long v53 = v19;
      *((void *)&v53 + 1) = v18;
      sub_21612A914(&v45, (uint64_t)&v53, &v53);
      int v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      int v20 = *(unsigned char **)(v3 + 80);
      if (!v20) {
        int v20 = &unk_26797EB78;
      }
      if (!v20[248])
      {
        std::operator+<char>();
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        int64_t v54 = v35->__r_.__value_.__r.__words[2];
        long long v53 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          unint64_t v37 = (const char *)&v53;
        }
        else {
          unint64_t v37 = (const char *)v53;
        }
LABEL_78:
        size_t v40 = strlen(v37);
        sub_216159ED8(&v42, 13, v37, v40);
        sub_216159F94((uint64_t *)(a1 + 96), &v42);
        sub_216159D74(&v42);
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)v53);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          unsigned __int8 v34 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      unint64_t v21 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        int v23 = *(void **)v21;
        size_t v22 = *(void *)(v21 + 8);
      }
      else
      {
        size_t v22 = *(unsigned __int8 *)(v21 + 23);
        int v23 = (void *)(*(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      unsigned int v24 = sub_216127520(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        int32x4_t v38 = std::string::append(&v41, " is invalid.");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        int64_t v54 = v38->__r_.__value_.__r.__words[2];
        long long v53 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          unint64_t v37 = (const char *)&v53;
        }
        else {
          unint64_t v37 = (const char *)v53;
        }
        goto LABEL_78;
      }
      *(void *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*(_DWORD *)(a1 + 88) & 0x80000000) == 0)
      {
        sub_216159ED8(&v53, 13, "unk is already defined.", 23);
        sub_216159F94((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
      *(_DWORD *)(a1 + 88) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64)) {
      goto LABEL_38;
    }
  }
  unint64_t v28 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v28 + 23) >= 0) {
    size_t v29 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    size_t v29 = *(void *)(v28 + 8);
  }
  uint64_t v30 = &v53;
  sub_21612A88C((uint64_t)&v53, v29 + 20);
  if (v54 < 0) {
    uint64_t v30 = (long long *)v53;
  }
  if (v29)
  {
    if (*(char *)(v28 + 23) >= 0) {
      uint64_t v31 = (const void *)v28;
    }
    else {
      uint64_t v31 = *(const void **)v28;
    }
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, " is already defined.");
  if (v54 >= 0) {
    int32x4_t v32 = (const char *)&v53;
  }
  else {
    int32x4_t v32 = (const char *)v53;
  }
  size_t v33 = strlen(v32);
  sub_216159ED8(&v41, 13, v32, v33);
  sub_216159F94((uint64_t *)(a1 + 96), &v41);
  sub_216159D74((uint64_t *)&v41);
  if (SHIBYTE(v54) < 0)
  {
    unsigned __int8 v34 = (void *)v53;
LABEL_82:
    operator delete(v34);
  }
LABEL_69:
  if (__p) {
    operator delete(__p);
  }
  sub_21612A250((uint64_t)&v45, v46[0]);
  sub_21612A250((uint64_t)&v47, v48);
  sub_21612A250((uint64_t)&v50, v51);
}

void sub_216127408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *a23,uint64_t a24,char a25,void *a26)
{
  sub_216159D74(&a15);
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  sub_21612A250((uint64_t)&a19, a20);
  sub_21612A250((uint64_t)&a22, a23);
  sub_21612A250((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sub_216127520(void *__src, size_t __len)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CED0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CED0))
  {
    sub_216128468();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  int v4 = (void *)qword_26797CEC8;
  if (__len >= 0x17)
  {
    size_t v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v6 = __len | 7;
    }
    size_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = (void *)__len;
    unint64_t v12 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_9;
  }
  HIBYTE(v12) = __len;
  uint64_t v5 = __dst;
  if (__len) {
LABEL_9:
  }
    memmove(v5, __src, __len);
  *((unsigned char *)v5 + __len) = 0;
  uint64_t v8 = sub_21612AAC8(v4, (unsigned __int8 *)__dst);
  unsigned int v9 = v8;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__dst[0]);
    if (v9) {
      return v9[40];
    }
  }
  else if (v8)
  {
    return v9[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_216127640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_216127670@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[2])
  {
    unsigned __int8 v34 = 0;
    int32x4_t v35 = 0;
    long long v36 = 0;
    std::string __p = 0;
    int32x4_t v32 = 0;
    size_t v33 = 0;
    int v4 = a2 + 1;
    uint64_t v3 = (void *)*a2;
    while (1)
    {
      uint64_t v5 = v3[4];
      size_t v6 = v35;
      if (v35 >= v36)
      {
        uint64_t v8 = (v35 - (unsigned char *)v34) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_21610CB04();
        }
        unint64_t v9 = (v36 - (unsigned char *)v34) >> 2;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if ((unint64_t)(v36 - (unsigned char *)v34) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          int v11 = (char *)sub_2160FFAA8((uint64_t)&v36, v10);
        }
        else {
          int v11 = 0;
        }
        unint64_t v12 = &v11[8 * v8];
        *(void *)unint64_t v12 = v5;
        size_t v7 = v12 + 8;
        unint64_t v14 = (char *)v34;
        long long v13 = v35;
        if (v35 != v34)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          long long v13 = (char *)v34;
        }
        unsigned __int8 v34 = v12;
        int32x4_t v35 = v7;
        long long v36 = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)int32x4_t v35 = v5;
        size_t v7 = v6 + 8;
      }
      int32x4_t v35 = v7;
      int v16 = v32;
      if (v32 >= v33)
      {
        uint64_t v18 = __p;
        uint64_t v19 = (v32 - __p) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v21 = v33 - __p;
        if ((v33 - __p) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          int v23 = (char *)sub_2161129B4((uint64_t)&v33, v22);
          uint64_t v18 = __p;
          int v16 = v32;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v24 = &v23[4 * v19];
        *(_DWORD *)unsigned int v24 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        std::string __p = v24;
        size_t v33 = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)int32x4_t v32 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v32 + 4;
      }
      int32x4_t v32 = v17;
      uint64_t v26 = (void *)v3[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v3[2];
          BOOL v28 = *v27 == (void)v3;
          uint64_t v3 = v27;
        }
        while (!v28);
      }
      uint64_t v3 = v27;
      if (v27 == v4) {
        sub_216128550(a1, (v35 - (unsigned char *)v34) >> 3, (unint64_t)v34, 0, (unint64_t)__p, 0);
      }
    }
  }

  return sub_216159ED8(a3, 13, "no pieces are loaded.", 21);
}

void sub_216127AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_216127B54()
{
}

void sub_216127BA8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_216127BCC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v32;
  }
  else {
    int v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v4->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 88);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v32;
  }
  else {
    uint64_t v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v7 = &v32;
  }
  else {
    size_t v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 92);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v32;
  }
  else {
    uint64_t v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  sub_21612F5C0(*(void *)(a1 + 16), &v32);
  int v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  int v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0) {
    int v12 = v10;
  }
  else {
    int v12 = v11;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &__p;
  }
  else {
    unint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v16 = &v32;
  }
  else {
    int v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sub_2161580EC(a2);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v18 = *(const std::string::value_type **)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &__p;
  }
  else {
    uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v22 = &__p;
  }
  else {
    unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v18, v20);
  sub_2161580EC(a2);
  uint64_t v26 = a1 + 64;
  uint64_t v24 = *(void *)(a1 + 64);
  int v25 = *(const std::string::value_type **)(v26 + 8);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v28 = &__p;
  }
  else {
    BOOL v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v29 = &__p;
  }
  else {
    size_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_216127E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_216127F0C(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  size_t v6 = __s1;
  uint64_t v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1) {
      return;
    }
    size_t v40 = 0;
    int v41 = 0;
    uint64_t v42 = a5 + 2;
    uint64_t v43 = __s1;
    while (1)
    {
      int v44 = asc_21639FB8C[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44) {
        int v44 = v8 - v43;
      }
      uint64_t v45 = v44;
      if (v44 == 3)
      {
        int v46 = memcmp(v43, "▁", 3uLL);
        int v47 = v46 == 0;
        if (v43 == v6) {
          goto LABEL_62;
        }
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          int v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            uint64_t v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60) {
              sub_21610CB04();
            }
            uint64_t v49 = *v42 - (void)*a5;
            uint64_t v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1)) {
              uint64_t v50 = v48 + 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v50;
            }
            uint64_t v52 = (char *)sub_21612AA90((uint64_t)(a5 + 2), v51);
            int64_t v54 = (unsigned __int8 **)&v52[16 * v48];
            *int64_t v54 = v43;
            v54[1] = 0;
            int32x4_t v56 = (char *)*a5;
            uint64_t v55 = (char *)a5[1];
            int32x4_t v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              uint64_t v55 = (char *)*a5;
            }
            size_t v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *size_t v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if (v41)
        {
          int v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        int v47 = 0;
        goto LABEL_62;
      }
      int v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      int v41 = v47;
      if (v43 >= v8) {
        return;
      }
    }
  }
  if (a2 >= 1)
  {
    std::string::size_type v9 = a5 + 2;
    int v10 = sub_21612AA90((uint64_t)(a5 + 2), 1uLL);
    int v12 = (unsigned __int8 **)&v10[2 * v11];
    *int v10 = v6;
    v10[1] = 0;
    long long v13 = (unsigned __int8 **)(v10 + 2);
    std::string::size_type v15 = (char *)*a5;
    unint64_t v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      unint64_t v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14) {
      operator delete(v14);
    }
    BOOL v16 = 0;
    a5[1] = v13;
    do
    {
      int v17 = asc_21639FB8C[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17) {
        int v17 = v8 - v6;
      }
      uint64_t v18 = v17;
      if (v17 == 3)
      {
        BOOL v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_21610CB04();
          }
          uint64_t v21 = *v9 - (void)*a5;
          uint64_t v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_21612AA90((uint64_t)(a5 + 2), v23);
          uint64_t v26 = (unsigned __int8 **)&v24[16 * v20];
          *uint64_t v26 = v6;
          v26[1] = 0;
          BOOL v28 = (char *)*a5;
          std::string::size_type v27 = (char *)a5[1];
          size_t v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            std::string::size_type v27 = (char *)*a5;
          }
          long long v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *long long v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        BOOL v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      BOOL v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60) {
            sub_21610CB04();
          }
          uint64_t v31 = *v9 - (void)*a5;
          uint64_t v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          unsigned __int8 v34 = (char *)sub_21612AA90((uint64_t)(a5 + 2), v33);
          long long v36 = (unsigned __int8 **)&v34[16 * v30];
          *long long v36 = v6;
          v36[1] = 0;
          int32x4_t v38 = (char *)*a5;
          unint64_t v37 = (char *)a5[1];
          long long v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            unint64_t v37 = (char *)*a5;
          }
          long long v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *long long v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_216128354(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216128388@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = a1;
  return sub_2161283B8("<0x%02X>", &v3, a2);
}

uint64_t sub_2161283B8@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = snprintf(0, 0, __format, *a2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (char *)a3;
  }
  else {
    uint64_t v8 = *(char **)a3;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_21612844C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216128468()
{
}

void sub_216128534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216128550(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  v12[0] = a2;
  v12[1] = a3;
  long long v12[2] = a4;
  v12[3] = a5;
  int v6 = a6;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 0;
  sub_21612ABCC(&v6, v12);
}

void sub_216128664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21612867C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216159F90(a2, a1 + 96);
}

uint64_t sub_216128688(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_216128690@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_216157D08();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    sub_216129E78(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_216129E78(v4, (uint64_t)") ", 2);
    int v6 = sub_216129E78(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_216129E78(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_216129E78(v7, (uint64_t)") ", 2);
    sub_216129E78(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_216128E18(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_216128758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_21612876C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_216157D08();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    sub_216129E78(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_216129E78(v4, (uint64_t)") ", 2);
    int v6 = sub_216129E78(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_216129E78(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_216129E78(v7, (uint64_t)") ", 2);
    sub_216129E78(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_216128E18(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_216128834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_216128848(void *a1@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((int)sub_216157D08() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v2 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    sub_216129E78(v2, (uint64_t)"(", 1);
    unsigned __int8 v3 = (void *)std::ostream::operator<<();
    int v4 = sub_216129E78(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_216129E78(v4, (uint64_t)"LOG(", 4);
    int v6 = sub_216129E78(v5, (uint64_t)"ERROR", 5);
    long long v7 = sub_216129E78(v6, (uint64_t)") ", 2);
    sub_216129E78(v7, (uint64_t)"Not implemented.", 16);
    sub_216128E18(&__p);
  }
  std::string __p = 0;
  long long v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_216129A60((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_216128994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v15 = v14;
  *(void *)(v13 + 8) = v15;
  sub_216129CCC(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_2161289D8()
{
  if ((int)sub_216157D08() <= 2)
  {
    char v7 = 0;
    uint64_t v0 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    sub_216129E78(v0, (uint64_t)"(", 1);
    uint64_t v1 = (void *)std::ostream::operator<<();
    uint64_t v2 = sub_216129E78(v1, (uint64_t)") ", 2);
    unsigned __int8 v3 = sub_216129E78(v2, (uint64_t)"LOG(", 4);
    int v4 = sub_216129E78(v3, (uint64_t)"ERROR", 5);
    uint64_t v5 = sub_216129E78(v4, (uint64_t)") ", 2);
    sub_216129E78(v5, (uint64_t)"Not implemented.", 16);
    sub_216128E18(&v7);
  }
  return 0.0;
}

void sub_216128A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_216128AAC()
{
  return 0;
}

uint64_t sub_216128AB4()
{
  return 0;
}

uint64_t sub_216128ABC()
{
  return 0;
}

uint64_t sub_216128AC4()
{
  return 0;
}

uint64_t sub_216128ACC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

uint64_t sub_216128AF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_216128B24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))();
}

uint64_t sub_216128B4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))();
}

uint64_t sub_216128B74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))();
}

uint64_t sub_216128B9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))();
}

uint64_t sub_216128BC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))();
}

uint64_t sub_216128BEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 144))();
}

uint64_t sub_216128C14(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

BOOL sub_216128C44(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t sub_216128C80(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_216128DF0(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2166CA750](v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_216128E18(unsigned char *a1)
{
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1) {
    sub_216159C24();
  }
  return a1;
}

void sub_216128ED8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_216128EF4(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    std::locale v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_216128FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216128FD4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_216129260(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_21612970C(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  int v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((unsigned char *)i + 40) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_2161297B4(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *std::string::size_type v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *int v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    std::string::size_type v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_216129244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216129A00(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_216129260(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_2161292A0((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_2161292A0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      BOOL v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_21612964C(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_2161295A0(a2, a3);
  }
  else
  {
    return sub_2161294A8(a2, a3);
  }
}

unint64_t sub_2161294A8(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_2161295A0(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_21612964C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_21612970C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_2161297B4(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_2161298A4(a1, prime);
    }
  }
}

void sub_2161298A4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_2160FFA74();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_216129A00(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_216129A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_216129B28((char *)v4, *(long long **)v6, *(long long **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216129C44((uint64_t)v8);
  return v4;
}

void sub_216129B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_216129B28(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216129BA8(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_216129B8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216129BA8(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_21610CB04();
  }
  uint64_t result = (char *)sub_216129BFC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_216129BFC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2160FFA74();
  }
  return operator new(24 * a2);
}

uint64_t sub_216129C44(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216129C7C(a1);
  }
  return a1;
}

void sub_216129C7C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 32);
      v3 -= 32;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 24) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_216129CCC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216129D20((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_216129D20(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 32);
      v4 -= 32;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_216129D78(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C6C49F0;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x2166CA7C0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }

  JUMPOUT(0x2166CA800);
}

void sub_216129DFC(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    JUMPOUT(0x2166CA800);
  }
}

void *sub_216129E78(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2166CA510](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_21612A01C(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x2166CA520](v13);
  return a1;
}

void sub_216129FB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x2166CA520](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x216129F94);
}

void sub_21612A008(_Unwind_Exception *a1)
{
}

uint64_t sub_21612A01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_21612A1A4(__p, v12, __c);
      unint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_21612A188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21612A1A4(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_21612A250(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21612A250(a1, *a2);
    sub_21612A250(a1, a2[1]);
    operator delete(a2);
  }
}

void *sub_21612A2A4(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21612A378(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_21612A3C0(&v13, a2);
        }
        else {
          sub_21612A474((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_21612A378(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_21610CB04();
  }
  uint64_t result = sub_2160FFAA8((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_21612A3C0(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_21612A474(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *sub_21612A524(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void **)sub_21612A5B0((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    sub_21612A650(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_21612A5B0(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!sub_21612A6A8(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        int v4 = (void *)*v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_21612A6A8(v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      int v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_21612A650(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_21612A6F4(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_21612A6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(const void **)a3;
  size_t v6 = *(void *)(a3 + 8);
  if (v6 >= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = *(void *)(a3 + 8);
  }
  int v8 = memcmp(v3, v5, v7);
  if (v4 < v6) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v4 == v6) {
    unsigned int v9 = 0;
  }
  if (v8) {
    unsigned int v9 = v8;
  }
  return v9 >> 31;
}

uint64_t *sub_21612A6F4(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unsigned int v9 = (uint64_t **)a2[2];
          }
          else
          {
            unsigned int v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unsigned int v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *unint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *unint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_21612A88C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_21612A914(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = (void **)sub_21612A5B0((uint64_t)a1, &v9, a2);
  int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_21612A650(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_21612A998@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(void **)result;
  if (!v3) {
    goto LABEL_9;
  }
  unint64_t v5 = (64 - v3);
  if (v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = (64 - v3);
  }
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    unint64_t v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(void *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(void *)uint64_t result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (unint64_t v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(void *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(void *)uint64_t result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F) {
          goto LABEL_12;
        }
      }
      unint64_t v8 = ~*v4;
    }
    unint64_t v7 = __rbit64(v8);
    goto LABEL_22;
  }
  uint64_t v9 = v3 + a2 - 63;
  if (v9 < 0) {
    uint64_t v9 = v3 + a2;
  }
  uint64_t v10 = v9 >> 6;
  unint64_t v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0) {
    unint64_t v11 = v10;
  }
  *(void *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *sub_21612AA90(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_2160FFA74();
  }
  return operator new(16 * a2);
}

unsigned __int8 *sub_21612AAC8(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_216129260((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_21612970C(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_21612ABCC(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  if (a2[3])
  {
    uint64_t v3 = 0;
    memset(v2, 0, sizeof(v2));
    sub_21612B18C(a1, a2, (uint64_t *)v2);
  }

  sub_21612B5D4((uint64_t)a1, a2);
}

void sub_21612ACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_21612ACC0(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2166CA7C0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_21612AD0C(uint64_t *a1)
{
  sub_21612AD58((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2166CA7C0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_21612AD58(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_21612ADB8(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_21612ADB8(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_21612AEF8(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x2166CA800);
}

const char *sub_21612AF30(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    return *(const char **)(a1 + 8);
  }
  else {
    return "";
  }
}

uint64_t *sub_21612AF48(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2166CA7C0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_21612AF94(uint64_t *a1)
{
  sub_21612AFE0(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2166CA7C0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_21612AFE0(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_21612B050((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_21612B050(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_21612B18C(void (**a1)(unint64_t, uint64_t), unint64_t *a2, uint64_t *a3)
{
  sub_21612C03C(a3);
  if (*a2)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = a2[2];
      uint64_t v8 = *(void *)(a2[1] + 8 * v6);
      if (v7)
      {
        unint64_t v9 = *(void *)(v7 + 8 * v6);
      }
      else
      {
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        unint64_t v9 = v7 - 1;
      }
      unint64_t v11 = a2[3];
      if (v11) {
        int v12 = *(_DWORD *)(v11 + 4 * v6);
      }
      else {
        int v12 = v6;
      }
      sub_21612C110(a3, v8, v9, v12);
      ++v6;
      if (*a1) {
        (*a1)(v6, *a2 + 1);
      }
    }
    while (v6 < *a2);
  }
  sub_21612C550((uint64_t)a3, 0);
  uint64_t v13 = *a3;
  char v14 = *(unsigned char *)(*a3 + 8);
  int v15 = *(_DWORD *)*a3;
  if (v14) {
    int v16 = (2 * *(unsigned __int8 *)(v13 + 9)) | (4 * v15);
  }
  else {
    int v16 = 2 * v15;
  }
  *(_DWORD *)a3[3] = v16 | *(unsigned __int8 *)(v13 + 10);
  *(unsigned char *)a3[6] = v14;
  sub_21612BE1C(a3);
  sub_21612B8B8(a3 + 15);
  sub_21612B8B8(a3 + 18);
  sub_21612B8B8(a3 + 21);

  sub_21612C9A8();
}

void sub_21612B2B4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_21612B050(a1 + 8, v4);
  }
  operator new[]();
}

void sub_21612B5D4(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_21612B050(a1 + 8, v4);
  }
  operator new[]();
}

uint64_t *sub_21612B87C(uint64_t *a1)
{
  sub_21612B8B8(a1);

  return sub_21612BAA0(a1);
}

uint64_t sub_21612B8B8(uint64_t *a1)
{
  sub_21612B904((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2166CA7C0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_21612B904(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_21612B964(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_21612B964(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_21612BAA0(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2166CA7C0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_21612BAEC(uint64_t *a1)
{
  sub_21612BB48(a1);
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x2166CA7C0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }

  return sub_21612BAA0(a1);
}

uint64_t sub_21612BB48(uint64_t *a1)
{
  sub_21612B8B8(a1);
  uint64_t result = a1[3];
  if (result)
  {
    uint64_t result = MEMORY[0x2166CA7C0](result, 0x1000C8052888210);
    a1[3] = 0;
  }
  return result;
}

uint64_t *sub_21612BB8C(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2166CA7C0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_21612BBD8(uint64_t *a1)
{
  sub_21612BC24(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2166CA7C0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_21612BC24(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_21612BC94((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_21612BC94(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_21612BDD0(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x2166CA7C0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_21612BE1C(uint64_t *a1)
{
  sub_21612BE68(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x2166CA7C0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void *sub_21612BE68(void *result, unint64_t a2)
{
  unint64_t v2 = result[1];
  if (v2 > a2)
  {
    result[1] = a2;
    unint64_t v2 = a2;
  }
  if (result[2] < a2) {
    sub_21612BEEC((uint64_t)result, a2);
  }
  for (; v2 < a2; unint64_t v2 = result[1])
  {
    result[1] = v2 + 1;
    uint64_t v3 = *result + 12 * v2;
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
  }
  return result;
}

void sub_21612BEEC(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void *sub_21612C03C(uint64_t *a1)
{
  int v7 = 0;
  sub_21612C380(a1 + 15, 0x400uLL, &v7);
  uint64_t v2 = a1[22];
  if (v2)
  {
    uint64_t v3 = *a1 + 12 * *(unsigned int *)(a1[21] + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
    --a1[22];
  }
  else
  {
    sub_21612C408(a1);
  }
  sub_21612C460(a1 + 9);
  sub_21612C4B0(a1 + 3);
  uint64_t v4 = a1[7];
  if (v4 == a1[8]) {
    sub_21612ADB8((uint64_t)(a1 + 6), v4 + 1);
  }
  a1[7] = v4 + 1;
  a1[24] = 1;
  *(unsigned char *)(*a1 + 8) = -1;
  int v6 = 0;
  return sub_21612C4FC(a1 + 18, &v6);
}

void *sub_21612C110(void *result, uint64_t a2, unint64_t a3, int a4)
{
  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    void *exception = &unk_26C6C4A10;
    exception[1] = v23;
    __cxa_throw(exception, (struct type_info *)&unk_26C6BA820, (void (*)(void *))std::exception::~exception);
  }
  int v5 = a4;
  int v7 = result;
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = *result;
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11) {
      goto LABEL_12;
    }
    unsigned int v12 = *(unsigned __int8 *)(a2 + v8);
    if (v8 < a3 && !*(unsigned char *)(a2 + v8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    unsigned int v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13) {
      break;
    }
    ++v8;
    unsigned int v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3) {
      return result;
    }
  }
  *(unsigned char *)(v10 + 12 * v11 + 10) = 1;
  uint64_t result = (void *)sub_21612C550((uint64_t)result, v11);
LABEL_12:
  if (v8 <= a3)
  {
    int v24 = v5;
    do
    {
      if (v8 >= a3) {
        char v14 = 0;
      }
      else {
        char v14 = *(unsigned char *)(a2 + v8);
      }
      unsigned int v25 = 0;
      uint64_t v15 = v7[22];
      if (v15)
      {
        unsigned int v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        uint64_t v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(void *)uint64_t v17 = 0;
        --v7[22];
      }
      else
      {
        unsigned int v16 = *((_DWORD *)v7 + 2);
        sub_21612C408(v7);
      }
      unsigned int v25 = v16;
      uint64_t v18 = *v7;
      uint64_t v19 = (int *)(*v7 + 12 * v9);
      int v20 = *v19;
      if (!*v19) {
        *(unsigned char *)(v18 + 12 * v16 + 9) = 1;
      }
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      unsigned int v21 = v25;
      *(unsigned char *)(v18 + 12 * v25 + 8) = v14;
      *uint64_t v19 = v21;
      uint64_t result = sub_21612C4FC(v7 + 18, &v25);
      unsigned int v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    int v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return result;
}

uint64_t *sub_21612C380(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = result[1];
  if (v3 > a2)
  {
    result[1] = a2;
    unint64_t v3 = a2;
  }
  if (result[2] < a2) {
    sub_21612B964((uint64_t)result, a2);
  }
  if (v3 < a2)
  {
    uint64_t v4 = *result;
    do
      *(_DWORD *)(v4 + 4 * v3++) = *a3;
    while (a2 != v3);
    result[1] = a2;
  }
  return result;
}

void *sub_21612C408(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_21612BEEC((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  uint64_t v2 = *result + 12 * v1;
  *(_DWORD *)(v2 + 7) = 0;
  *(void *)uint64_t v2 = 0;
  return result;
}

void *sub_21612C460(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    int v3 = 0;
    uint64_t result = sub_21612C4FC(result, &v3);
    uint64_t v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

void *sub_21612C4B0(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_21612BC94((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  *(_DWORD *)(*result + 4 * v1) = 0;
  return result;
}

void *sub_21612C4FC(void *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_21612B964((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(_DWORD *)(*result + 4 * v2) = *a2;
  return result;
}

uint64_t sub_21612C550(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 152) - 1;
  unsigned int v4 = *(_DWORD *)(*(void *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    uint64_t v35 = (uint64_t *)(result + 120);
    int v5 = (void *)(result + 24);
    int v6 = (void *)(result + 72);
    while (1)
    {
      *(void *)(v2 + 152) = v3;
      unint64_t v7 = *(void *)(v2 + 128);
      if (*(void *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        unint64_t v8 = 2 * v7;
        sub_21612B8B8(v35);
        int v38 = 0;
        sub_21612C380(v35, v8, &v38);
        unint64_t v9 = *(void *)(v2 + 32);
        if (v9 >= 2)
        {
          uint64_t v10 = *(void *)(v2 + 48);
          for (uint64_t i = 1; i != v9; ++i)
          {
            if (!*(unsigned char *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              unsigned int v12 = 0;
              if (i)
              {
                unsigned int v13 = i;
                do
                {
                  int v14 = *(_DWORD *)(*v5 + 4 * v13);
                  unsigned int v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  unsigned int v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  BOOL v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              uint64_t v18 = *(void *)(v2 + 120);
              do
              {
                unint64_t v19 = (unint64_t)v12 % *(void *)(v2 + 128);
                unsigned int v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      int v20 = 0;
      if (v4)
      {
        unsigned int v21 = v4;
        do
        {
          ++v20;
          unsigned int v21 = *(_DWORD *)(*(void *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      unsigned int v37 = 0;
      uint64_t result = sub_21612C83C((uint64_t *)v2, v4, &v37);
      if (result)
      {
        unsigned int v22 = result;
        *(_DWORD *)(*v6 + 4 * (result >> 5)) |= 1 << result;
        if (v4) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (!v20) {
        break;
      }
      do
      {
        sub_21612C460((void *)(v2 + 72));
        uint64_t result = (uint64_t)sub_21612C4B0((void *)(v2 + 24));
        uint64_t v25 = *(void *)(v2 + 56);
        if (v25 == *(void *)(v2 + 64)) {
          sub_21612ADB8(v2 + 48, v25 + 1);
        }
        *(void *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      unsigned int v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4) {
        goto LABEL_32;
      }
LABEL_37:
      unsigned int v22 = v26 + 1;
      *(_DWORD *)(*(void *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(void *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          unsigned int v23 = *(_DWORD *)(*(void *)v2 + 12 * v4 + 4);
          unsigned int v39 = v4;
          uint64_t result = (uint64_t)sub_21612C4FC((void *)(v2 + 168), &v39);
          unsigned int v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      uint64_t v24 = *(void *)(v2 + 144);
      uint64_t v3 = *(void *)(v2 + 152) - 1;
      *(_DWORD *)(*(void *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      unsigned int v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2) {
        goto LABEL_2;
      }
    }
    unsigned int v26 = 0;
    if (!v4) {
      goto LABEL_37;
    }
LABEL_32:
    uint64_t v27 = *(void *)v2;
    unsigned int v28 = v4;
    do
    {
      uint64_t v29 = v28;
      uint64_t v30 = v27 + 12 * v28;
      int v31 = *(unsigned __int8 *)(v30 + 8);
      int v32 = *(_DWORD *)v30;
      if (v31) {
        int v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      }
      else {
        int v33 = 2 * v32;
      }
      uint64_t v34 = 3 * v29;
      *(_DWORD *)(*(void *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(unsigned char *)(*(void *)(v2 + 48) + v26--) = v31;
      uint64_t v27 = *(void *)v2;
      unsigned int v28 = *(_DWORD *)(*(void *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(void *)(v2 + 152) = v3;
  return result;
}

uint64_t sub_21612C83C(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a2;
    do
    {
      unint64_t v7 = (int *)(v5 + 12 * v6);
      int v8 = *((unsigned __int8 *)v7 + 8);
      int v9 = *v7;
      if (v8) {
        int v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      }
      else {
        int v10 = 2 * v9;
      }
      uint64_t v11 = v5 + 12 * v6;
      unsigned int v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      unsigned int v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      unint64_t v4 = v4 ^ HIWORD(v13) ^ v13;
      uint64_t v6 = *(unsigned int *)(v11 + 4);
    }
    while (v6);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v15 = a1[15];
  unint64_t v14 = a1[16];
  unint64_t v16 = v4 % v14;
  *a3 = v4 % v14;
  uint64_t v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if (v17)
  {
    uint64_t v18 = *a1;
    unint64_t v19 = (unsigned int *)(*a1 + 12 * a2 + 4);
    uint64_t v20 = a1[3];
    do
    {
      uint64_t v21 = *v19;
      unsigned int v22 = v17;
      if (v21)
      {
        unsigned int v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!v21) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3) {
            return v17;
          }
          uint64_t v23 = v3;
          while (1)
          {
            uint64_t v24 = (int *)(v18 + 12 * v23);
            int v25 = *((unsigned __int8 *)v24 + 8);
            int v26 = *v24;
            int v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(a1[6] + v22))
            {
              break;
            }
            uint64_t v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!v23) {
              return v17;
            }
          }
        }
      }
      unint64_t v16 = (v16 + 1) % v14;
      *a3 = v16;
      uint64_t v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while (v17);
  }
  return v17;
}

void sub_21612C9A8()
{
}

unsigned int *sub_21612CAEC(unsigned int *result, unsigned int a2)
{
  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = &unk_26C6C4A10;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_26C6BA820, (void (*)(void *))std::exception::~exception);
  }
  int v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000) {
    int v2 = a2 << 10;
  }
  uint64_t *result = *result & 0x800001FF | v2;
  return result;
}

unsigned int *sub_21612CB74(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  int v8 = a2 + 9;
  unint64_t v9 = *(unsigned int *)(a2[3] + 4 * a3);
  unint64_t v10 = v9 >> 2;
  unint64_t v11 = v9 >> 7;
  int v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(a2[9] + 4 * (v9 >> 7))) != 0
    && (int v13 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * (sub_21612D1B0(a2 + 9, v10) - 1))) != 0
    && ((unsigned int v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(unsigned char *)(a2[6] + v10))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = a4;
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_21612CAEC((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    uint64_t result = (unsigned int *)sub_21612CF00(a1, (uint64_t)a2, a3, a4);
    int v19 = (int)result;
    if ((*(_DWORD *)(a2[9] + 4 * v11) & v12) != 0)
    {
      uint64_t result = (unsigned int *)sub_21612D1B0(v8, v10);
      *(_DWORD *)(*(void *)(a1 + 64) + 4 * (result - 1)) = v19;
    }
    do
    {
      if (*(unsigned char *)(a2[6] + v10)) {
        uint64_t result = (unsigned int *)sub_21612CB74(a1, a2, v10, v19 ^ *(unsigned __int8 *)(a2[6] + v10));
      }
      if (v10 == -1) {
        break;
      }
      int v20 = *(_DWORD *)(a2[3] + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void sub_21612CCEC(uint64_t a1)
{
  int v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (v3 + 256);
  unsigned int v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_21612AFE0((void *)(a1 + 8), (v3 + 256));
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = v5 << 8;
    uint64_t v8 = *(void *)(a1 + 32);
    while (1)
    {
      char v9 = v7 + v6;
      if (!*(unsigned char *)(v8 + 12 * ((v7 + v6) & 0xFFF) + 9)) {
        break;
      }
      if (++v6 == 256)
      {
        char v9 = 0;
        break;
      }
    }
    uint64_t v10 = 0;
    uint64_t v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(unsigned char *)(v8 + v11 + v10 + 8))
      {
        if (*(void *)(a1 + 16) <= v7)
        {
          sub_21612CCEC(a1);
          uint64_t v8 = *(void *)(a1 + 32);
        }
        int v12 = (int *)(v8 + v11 + v10);
        uint64_t v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13) {
            *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          }
        }
        int v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((unsigned char *)v12 + 8) = 1;
        *(unsigned char *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while (v10 != 3072);
    sub_21612AFE0(v2, (v3 + 256));
    uint64_t v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (int i = 0; i != 255; ++i)
    {
      int v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  uint64_t v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  int v21 = *(_DWORD *)(a1 + 72);
  uint64_t v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * ((v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t sub_21612CF00(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = (void *)(a1 + 40);
  sub_21612AD58(a1 + 40, 0);
  unsigned int v9 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3);
  if (v9 >= 4)
  {
    unsigned int v10 = v9 >> 2;
    do
    {
      char v35 = *(unsigned char *)(*(void *)(a2 + 48) + v10);
      sub_21612D214(v8, &v35);
      int v11 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v10);
      BOOL v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  unint64_t v14 = *(unsigned int *)(a1 + 72);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v15 <= v14)
  {
LABEL_20:
    uint64_t v19 = a4 | v15;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v16 = *(unsigned __int8 **)(a1 + 40);
    int v18 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v19 = v18 ^ *v16;
      int v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(unsigned char *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        unint64_t v21 = *(void *)(a1 + 48);
        if (v21 < 2) {
          goto LABEL_21;
        }
        if (!*(unsigned char *)(v17 + 12 * (v20 ^ v16[1]) + 8)) {
          break;
        }
      }
LABEL_19:
      int v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == v14) {
        goto LABEL_20;
      }
    }
    uint64_t v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21) {
          break;
        }
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  sub_21612CAEC((unsigned int *)(*(void *)(a1 + 8) + 4 * a4), v19 ^ a4);
  if (*(void *)(a1 + 48))
  {
    unint64_t v24 = 0;
    unsigned int v25 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3) >> 2;
    do
    {
      unint64_t v26 = v19 ^ *(unsigned __int8 *)(*(void *)(a1 + 40) + v24);
      if (*(void *)(a1 + 16) <= v26) {
        sub_21612CCEC(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v26)
      {
        unsigned int v27 = v26 & 0xFFF;
        uint64_t v28 = *(void *)(a1 + 32);
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v29;
        if (v29 == v26)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v29 = v26;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(a1 + 32);
        unsigned int v27 = v26 & 0xFFF;
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      uint64_t v30 = (int *)(v28 + 12 * v27);
      int v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((unsigned char *)v30 + 8) = 1;
      uint64_t v32 = *(void *)(a1 + 8);
      if (*(unsigned char *)(*(void *)(a2 + 48) + v25))
      {
        *(unsigned char *)(v32 + 4 * v26) = *(unsigned char *)(*v8 + v24);
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      unsigned int v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t sub_21612D1B0(void *a1, unint64_t a2)
{
  uint64_t v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  int v3 = *(_DWORD *)(a1[3] + v2);
  LODWORD(v2) = *(_DWORD *)(*a1 + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

void *sub_21612D214(void *result, unsigned char *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_21612ADB8((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(unsigned char *)(*result + v2) = *a2;
  return result;
}

uint64_t *sub_21612D268(uint64_t *a1)
{
  sub_21612BE1C(a1);
  sub_21612BBD8(a1 + 3);
  sub_21612AD0C(a1 + 6);
  sub_21612BB48(a1 + 9);
  sub_21612B8B8(a1 + 15);
  sub_21612B8B8(a1 + 18);
  sub_21612B8B8(a1 + 21);
  a1[24] = 0;
  sub_21612B87C(a1 + 21);
  sub_21612B87C(a1 + 18);
  sub_21612BAA0(a1 + 15);
  sub_21612BAEC(a1 + 9);
  sub_21612ACC0(a1 + 6);
  sub_21612BB8C(a1 + 3);

  return sub_21612BDD0(a1);
}

uint64_t sub_21612D338(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  while (1)
  {
    uint64_t result = sub_21612D4A0(a1, a2, a3, a4, a5, a6);
    int v12 = result;
    if (a3 < a4)
    {
      uint64_t v13 = a2[2];
      while (v13 && *(void *)(v13 + 8 * a3) <= a5 || !*(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3) {
          return result;
        }
      }
    }
    if (a3 == a4) {
      break;
    }
    uint64_t v14 = a2[2];
    if (v14 && *(void *)(v14 + 8 * a3) <= a5) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * a3) + a5);
    }
    unint64_t v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
          int v17 = 0;
        }
        else {
          int v17 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
        }
        if (v17 != v15)
        {
          sub_21612D338(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          uint64_t v14 = a2[2];
          if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
          }
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t sub_21612D4A0(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  int v12 = (uint64_t *)(a1 + 40);
  sub_21612AD58(a1 + 40, 0);
  int v13 = -1;
  if (a3 < a4)
  {
    do
    {
      unsigned __int8 v41 = 0;
      uint64_t v14 = a2[2];
      if (v14)
      {
        if (*(void *)(v14 + 8 * a3) > a5)
        {
          unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
        if (v41) {
          goto LABEL_17;
        }
      }
      uint64_t v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0) {
          goto LABEL_51;
        }
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        void *exception = &unk_26C6C4A10;
        exception[1] = v40;
        __cxa_throw(exception, (struct type_info *)&unk_26C6BA820, (void (*)(void *))std::exception::~exception);
      }
      if (v13 == -1)
      {
        if (v15) {
          int v13 = *(_DWORD *)(v15 + 4 * a3);
        }
        else {
          int v13 = a3;
        }
      }
      if (*(void *)a1) {
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
      }
LABEL_17:
      uint64_t v16 = *(void *)(a1 + 48);
      if (!v16) {
        goto LABEL_21;
      }
      unsigned int v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        sub_21612D214(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  unint64_t v18 = *(unsigned int *)(a1 + 72);
  unint64_t v19 = *(void *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    uint64_t v23 = a6 | v19;
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 32);
    int v20 = *(unsigned __int8 **)(a1 + 40);
    int v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v23 = v22 ^ *v20;
      int v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(unsigned char *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        unint64_t v25 = *(void *)(a1 + 48);
        if (v25 < 2) {
          goto LABEL_36;
        }
        if (!*(unsigned char *)(v21 + 12 * (v24 ^ v20[1]) + 8)) {
          break;
        }
      }
LABEL_34:
      int v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == v18) {
        goto LABEL_35;
      }
    }
    uint64_t v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25) {
          break;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  sub_21612CAEC((unsigned int *)(*(void *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(void *)(a1 + 48))
  {
    unint64_t v28 = 0;
    unsigned int v29 = v13 | 0x80000000;
    uint64_t v30 = *v12;
    do
    {
      unint64_t v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(void *)(a1 + 16) <= v31) {
        sub_21612CCEC(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v31)
      {
        unsigned int v32 = v31 & 0xFFF;
        uint64_t v33 = *(void *)(a1 + 32);
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == v31)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v34 = v31;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 32);
        unsigned int v32 = v31 & 0xFFF;
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      char v35 = (int *)(v33 + 12 * v32);
      int v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((unsigned char *)v35 + 8) = 1;
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v37 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v30 + v28))
      {
        *(unsigned char *)(v37 + 4 * v31) = *(unsigned char *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v33 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

uint64_t sub_21612D848(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_21612AF94((uint64_t *)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    MEMORY[0x2166CA7C0](v3, 0x1000C80CBA68D63);
    *(void *)(a1 + 32) = 0;
  }
  sub_21612AD0C((uint64_t *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    MEMORY[0x2166CA7C0](v4, 0x1000C8052888210);
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_21612ACC0((uint64_t *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    MEMORY[0x2166CA7C0](v5, 0x1000C80CBA68D63);
    *(void *)(a1 + 32) = 0;
  }
  sub_21612AF48(v2);
  return a1;
}

void *sub_21612D904(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21612D97C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_21612D960(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21612D97C(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_21610CB04();
  }
  uint64_t result = (char *)sub_21612AA90((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_21612D9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C6C3A58;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 245);
  sub_2161055D0((void *)(a1 + 56));
  unint64_t v5 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    unint64_t v5 = *(void *)v5;
    unint64_t v6 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sub_21612DAA4((uint64_t *)a1, (unsigned int *)v5, v6);
  return a1;
}

void sub_21612DA58(_Unwind_Exception *a1)
{
  sub_216159D74(v1);
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_21612DAA4(uint64_t *result, unsigned int *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    v6[0] = 0;
    v6[1] = 0;
    long long v5 = 0uLL;
    sub_21612DF24(a2, a3, v6, &v5, &v4);
    sub_216159F94(v3 + 7, &v4);
    uint64_t result = sub_216159D74(&v4);
    if (!v3[7]) {
      operator new();
    }
  }
  return result;
}

void sub_21612DC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216159D74((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21612DC20(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C3A58;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  sub_2161055D0((void *)(a1 + 56));
  unint64_t v4 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    unint64_t v4 = *(void *)v4;
    unint64_t v5 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_21612DAA4((uint64_t *)a1, (unsigned int *)v4, v5);
  return a1;
}

void sub_21612DCB4(_Unwind_Exception *a1)
{
  sub_216159D74(v1);
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_21612DD04(uint64_t *a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *a1 = (uint64_t)&unk_26C6C3A58;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = 0;
  *((unsigned char *)a1 + 48) = 0;
  unint64_t v7 = a1 + 7;
  sub_2161055D0(a1 + 7);
  int v11 = 0;
  sub_216126298(a3, a4, &v11, &v10);
  sub_216159F94(v7, &v10);
  sub_216159D74(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(*a1 + 24))(&v10, a1);
  uint64_t v8 = v10;
  sub_216159D74(&v10);
  if (!v8)
  {
    *((unsigned char *)a1 + 48) = v11 != 0;
    sub_21612DAA4(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_21612DE0C(_Unwind_Exception *a1)
{
  sub_216159D74(v1);
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_21612DE74(void *a1)
{
  *a1 = &unk_26C6C3A58;
  sub_216159D74(a1 + 7);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21612DEEC(void *a1)
{
  sub_21612DE74(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_21612DF24@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if (a2 < 5 || (unint64_t v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    uint64_t v10 = "Blob for normalization rule is broken.";
    uint64_t v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      uint64_t v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (void)v8;
      a4[1] = a2 - (void)v7 - 4;
      return sub_2161055D0(a5);
    }
    uint64_t v10 = "Trie data size exceeds the input blob size.";
    uint64_t v11 = 43;
  }
  return (void *)sub_216159ED8(a5, 13, v10, v11);
}

void *sub_21612DF8C@<X0>(size_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v6 = a3;
  uint64_t v84 = (void **)a5;
  int v85 = (std::string *)a4;
  *(void *)(a5 + 8) = *(void *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_10:
    return sub_2161055D0(a6);
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 23) = 0;
  if (!a3) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t result = (void *)(*(uint64_t (**)(size_t))(*(void *)a1 + 24))(a1);
  if (*a6) {
    return result;
  }
  sub_216159D74(a6);
  int v83 = 0;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    do
    {
      sub_21612E8A4(a1, a2, v6, (uint64_t)&v74);
      if (v75 != 1 || *v74 != 32) {
        goto LABEL_13;
      }
      a2 += (int)v76;
      v83 += v76;
      v6 -= (int)v76;
    }
    while (v6);
    uint64_t v11 = a6;
    return sub_2161055D0(v11);
  }
LABEL_13:
  uint64_t v71 = (uint64_t)a6;
  std::string::reserve(v85, 3 * v6);
  sub_21612EA8C(v84, 3 * v6);
  uint64_t v81 = "▁";
  std::string::size_type v82 = 3;
  v80[0] = a1;
  v80[1] = &v83;
  v80[2] = &v85;
  v80[3] = &v84;
  v80[4] = &v81;
  if (!*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_21612EB34((uint64_t)v80);
  }
  int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  do
  {
    sub_21612E8A4(a1, a2, v6, (uint64_t)&v74);
    int v13 = v74;
    uint64_t v14 = v75;
    if (v12)
    {
      if (!v75) {
        goto LABEL_66;
      }
      while (*v13 == 32)
      {
        ++v13;
        if (!--v14) {
          goto LABEL_66;
        }
      }
    }
    else if (!v75)
    {
      int v12 = 0;
      goto LABEL_66;
    }
    uint64_t v72 = a2;
    unint64_t v73 = v6;
    uint64_t v15 = 0;
    do
    {
      int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
      int v17 = v13[v15];
      if (v16 && v17 == 32)
      {
        std::string::append(v85, v81, v82);
        if (v82)
        {
          for (std::string::size_type i = 0; i < v82; ++i)
          {
            unint64_t v19 = v84;
            uint64_t v20 = v83;
            uint64_t v21 = (char *)v84[1];
            int v22 = (char *)v84[2];
            if (v21 >= v22)
            {
              int v24 = (char *)*v84;
              uint64_t v25 = (v21 - (unsigned char *)*v84) >> 3;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61) {
                goto LABEL_116;
              }
              uint64_t v27 = v22 - v24;
              if (v27 >> 2 > v26) {
                unint64_t v26 = v27 >> 2;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                unsigned int v29 = (char *)sub_2160FFAA8((uint64_t)(v84 + 2), v28);
                int v24 = (char *)*v19;
                uint64_t v21 = (char *)v19[1];
              }
              else
              {
                unsigned int v29 = 0;
              }
              uint64_t v30 = &v29[8 * v25];
              *(void *)uint64_t v30 = v20;
              uint64_t v23 = v30 + 8;
              while (v21 != v24)
              {
                uint64_t v31 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v30 - 1) = v31;
                v30 -= 8;
              }
              *unint64_t v19 = v30;
              v19[1] = v23;
              int8x16_t v19[2] = &v29[8 * v28];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *(void *)uint64_t v21 = v83;
              uint64_t v23 = v21 + 8;
            }
            v19[1] = v23;
          }
        }
      }
      else
      {
        std::string::push_back(v85, v17);
        unsigned int v32 = v84;
        uint64_t v33 = v83;
        int v34 = (char *)v84[1];
        char v35 = (char *)v84[2];
        if (v34 >= v35)
        {
          uint64_t v37 = (char *)*v84;
          uint64_t v38 = (v34 - (unsigned char *)*v84) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
LABEL_116:
          }
            sub_21610CB04();
          uint64_t v40 = v35 - v37;
          if (v40 >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            uint64_t v42 = (char *)sub_2160FFAA8((uint64_t)(v84 + 2), v41);
            uint64_t v37 = (char *)*v32;
            int v34 = (char *)v32[1];
          }
          else
          {
            uint64_t v42 = 0;
          }
          uint64_t v43 = &v42[8 * v38];
          *(void *)uint64_t v43 = v33;
          int v36 = v43 + 8;
          while (v34 != v37)
          {
            uint64_t v44 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v43 - 1) = v44;
            v43 -= 8;
          }
          *unsigned int v32 = v43;
          v32[1] = v36;
          void v32[2] = &v42[8 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(void *)int v34 = v83;
          int v36 = v34 + 8;
        }
        v32[1] = v36;
      }
      ++v15;
    }
    while (v15 != v14);
    int v12 = v13[v14 - 1] == 32;
    a2 = v72;
    unint64_t v6 = v73;
LABEL_66:
    v83 += v76;
    a2 += (int)v76;
    v6 -= (int)v76;
    v12 &= (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    int v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
    if (v45) {
      size_t v46 = v82;
    }
    else {
      size_t v46 = 1;
    }
    if (v45) {
      int v47 = v81;
    }
    else {
      int v47 = " ";
    }
    while (1)
    {
      uint64_t v48 = v85;
      LODWORD(v49) = HIBYTE(v85->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v50 = (std::string *)v85->__r_.__value_.__r.__words[0];
        std::string::size_type size = v85->__r_.__value_.__l.__size_;
        if (!v46) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v50 = v85;
        std::string::size_type size = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        if (!v46) {
          goto LABEL_81;
        }
      }
      BOOL v52 = size >= v46;
      std::string::size_type v53 = size - v46;
      if (!v52 || memcmp((char *)v50 + v53, v47, v46)) {
        break;
      }
LABEL_81:
      if ((v49 & 0x80) != 0) {
        std::string::size_type v49 = v48->__r_.__value_.__l.__size_;
      }
      if (v49 - v46 < 0)
      {
        LODWORD(v74) = 13;
        uint64_t v65 = (void *)sub_216128C80((uint64_t)&v75);
        sub_216129E78(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        sub_216129E78(&v75, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(&v75, (uint64_t)") [", 3);
        sub_216129E78(&v75, (uint64_t)"(length) >= (0)", 15);
        sub_216129E78(&v75, (uint64_t)"] ", 2);
        sub_21612650C((unsigned int *)&v74, v71);
        goto LABEL_112;
      }
      int v83 = *((void *)*v84 + (v49 - v46));
      std::string::resize(v48, (v49 - v46), 0);
      sub_216108FE4((uint64_t)v84, (v49 - v46));
    }
  }
  if (*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_21612EB34((uint64_t)v80);
  }
  int64_t v54 = v84;
  uint64_t v55 = v83;
  int32x4_t v56 = (char *)v84[1];
  int32x4_t v57 = (char *)v84[2];
  if (v56 >= v57)
  {
    int32x4_t v59 = (char *)*v84;
    uint64_t v60 = (v56 - (unsigned char *)*v84) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v62 = v57 - v59;
    if (v62 >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      uint64_t v64 = (char *)sub_2160FFAA8((uint64_t)(v84 + 2), v63);
      int32x4_t v59 = (char *)*v54;
      int32x4_t v56 = (char *)v54[1];
    }
    else
    {
      uint64_t v64 = 0;
    }
    uint64_t v66 = &v64[8 * v60];
    int32x4_t v67 = &v64[8 * v63];
    *(void *)uint64_t v66 = v55;
    int32x4_t v58 = v66 + 8;
    while (v56 != v59)
    {
      uint64_t v68 = *((void *)v56 - 1);
      v56 -= 8;
      *((void *)v66 - 1) = v68;
      v66 -= 8;
    }
    *int64_t v54 = v66;
    v54[1] = v58;
    v54[2] = v67;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *(void *)int32x4_t v56 = v83;
    int32x4_t v58 = v56 + 8;
  }
  v54[1] = v58;
  if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v69 = v85->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v69 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
  }
  if (((unsigned char *)v84[1] - (unsigned char *)*v84) >> 3 == v69 + 1)
  {
    uint64_t v11 = (void *)v71;
    return sub_2161055D0(v11);
  }
  LODWORD(v74) = 13;
  int32x4_t v70 = (void *)sub_216128C80((uint64_t)&v75);
  sub_216129E78(v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  sub_216129E78(&v75, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_216129E78(&v75, (uint64_t)") [", 3);
  sub_216129E78(&v75, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  sub_216129E78(&v75, (uint64_t)"] ", 2);
  sub_21612650C((unsigned int *)&v74, v71);
LABEL_112:
  uint64_t v75 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&v75 + *(void *)(v75 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v76 = MEMORY[0x263F8C318] + 16;
  if (v78 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x2166CA750](&v79);
}

void sub_21612E884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21612659C((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_21612E8A4@<X0>(size_t result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[63] = *MEMORY[0x263EF8340];
  if (a3)
  {
    unint64_t v6 = a2;
    size_t v7 = result;
    uint64_t v8 = *(void *)(result + 40);
    if (v8 && (LOBYTE(v26) = 0, uint64_t result = sub_21612EE2C(v8, a2, a3, (BOOL *)&v26), (_BYTE)v26))
    {
      unint64_t v9 = (int)result;
      if (a3 < (int)result) {
        unint64_t v9 = a3;
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = result;
    }
    else
    {
      uint64_t v10 = *(void *)(v7 + 8);
      if (!v10) {
        goto LABEL_24;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      int v13 = *(_DWORD **)(v10 + 16);
      uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        uint64_t v15 = v6[v11];
        uint64_t v16 = v14 ^ v15;
        unsigned int v17 = v13[v16];
        if ((v17 & 0x800000FF) != v15) {
          break;
        }
        uint64_t v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            unint64_t v18 = &v27[2 * v12 - 1];
            *(_DWORD *)unint64_t v18 = v13[v14] & 0x7FFFFFFF;
            v18[1] = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a3 != v11);
      if (!v12) {
        goto LABEL_24;
      }
      unint64_t v19 = 0;
      int v20 = 0;
      uint64_t v21 = v27;
      int v22 = v27;
      do
      {
        unint64_t v24 = *v22;
        v22 += 2;
        unint64_t v23 = v24;
        if (!v19 || v23 > v19)
        {
          int v20 = *((_DWORD *)v21 - 2);
          unint64_t v19 = v23;
        }
        uint64_t v21 = v22;
        --v12;
      }
      while (v12);
      if (v19)
      {
        unint64_t v6 = (char *)(*(void *)(v7 + 16) + v20);
        uint64_t result = strlen(v6);
      }
      else
      {
LABEL_24:
        uint64_t v26 = 0;
        BOOL v25 = sub_216157D18((unsigned __int8 *)v6, (uint64_t)&v6[a3], &v26) != 65533 || v26 == 3;
        if (v25) {
          LODWORD(v19) = v26;
        }
        else {
          LODWORD(v19) = 1;
        }
        if (v25) {
          uint64_t result = (int)v26;
        }
        else {
          uint64_t result = 3;
        }
        if (!v25) {
          unint64_t v6 = (char *)&unk_21636D35C;
        }
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = v19;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_21612EA8C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_21610CB04();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_2160FFAA8(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_21612EB34(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 32) + 32))(*(void *)(*(void *)a1 + 32));
  uint64_t v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8));
    if (*(void *)(*(void *)(a1 + 32) + 8))
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = **(void **)(a1 + 24);
        uint64_t v6 = **(int **)(a1 + 8);
        size_t v7 = *(void **)(v5 + 8);
        unint64_t v8 = *(void *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          uint64_t v10 = *(void **)v5;
          uint64_t v11 = ((uint64_t)v7 - *(void *)v5) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            goto LABEL_40;
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)sub_2160FFAA8(v5 + 16, v14);
            uint64_t v10 = *(void **)v5;
            size_t v7 = *(void **)(v5 + 8);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v6;
          unint64_t v9 = v16 + 8;
          while (v7 != v10)
          {
            uint64_t v17 = *--v7;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(void *)uint64_t v5 = v16;
          *(void *)(v5 + 8) = v9;
          *(void *)(v5 + 16) = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          void *v7 = v6;
          unint64_t v9 = v7 + 1;
        }
        *(void *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(void *)(*(void *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    uint64_t v18 = **(void **)(a1 + 24);
    uint64_t v19 = **(int **)(a1 + 8);
    int v20 = *(void **)(v18 + 8);
    unint64_t v21 = *(void *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      unint64_t v23 = *(void **)v18;
      uint64_t v24 = ((uint64_t)v20 - *(void *)v18) >> 3;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
LABEL_40:
      }
        sub_21610CB04();
      uint64_t v26 = v21 - (void)v23;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        unint64_t v28 = (char *)sub_2160FFAA8(v18 + 16, v27);
        unint64_t v23 = *(void **)v18;
        int v20 = *(void **)(v18 + 8);
      }
      else
      {
        unint64_t v28 = 0;
      }
      unsigned int v29 = &v28[8 * v24];
      uint64_t v30 = &v28[8 * v27];
      *(void *)unsigned int v29 = v19;
      int v22 = v29 + 8;
      while (v20 != v23)
      {
        uint64_t v31 = *--v20;
        *((void *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(void *)uint64_t v18 = v29;
      *(void *)(v18 + 8) = v22;
      *(void *)(v18 + 16) = v30;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *int v20 = v19;
      int v22 = v20 + 1;
    }
    *(void *)(v18 + 8) = v22;
  }
}

void sub_21612ED68(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::string __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v2);
  nullsub_1(&v2);
  sub_216159D74(&v2);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_21612EDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_216159D74(&a9);
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21612EE2C(uint64_t a1, unsigned char *a2, uint64_t a3, BOOL *a4)
{
  v23[127] = *MEMORY[0x263EF8340];
  if (!*(void *)a1)
  {
    if (a4) {
      *a4 = 0;
    }
    goto LABEL_33;
  }
  unint64_t v4 = *(_DWORD **)(*(void *)a1 + 16);
  uint64_t v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2[v6];
      uint64_t v9 = v5 ^ v8;
      unsigned int v10 = v4[v9];
      if ((v10 & 0x800000FF) != v8) {
        break;
      }
      uint64_t v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          uint64_t v11 = &v22[16 * v7];
          *(_DWORD *)uint64_t v11 = v4[v5] & 0x7FFFFFFF;
          *((void *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    unsigned int v12 = *a2;
    if (*a2)
    {
      unint64_t v7 = 0;
      uint64_t v13 = 1;
      do
      {
        uint64_t v14 = v5 ^ v12;
        unsigned int v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12) {
          break;
        }
        uint64_t v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            uint64_t v16 = &v22[16 * v7];
            *(_DWORD *)uint64_t v16 = v4[v5] & 0x7FFFFFFF;
            *((void *)v16 + 1) = v13;
          }
          ++v7;
        }
        unsigned int v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4) {
    *a4 = (int)v7 > 0;
  }
  if (!v7)
  {
LABEL_33:
    int v21 = asc_21639FB8C[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3) {
      return a3;
    }
    else {
      return v21;
    }
  }
  if ((int)v7 < 1) {
    return 0;
  }
  LODWORD(result) = 0;
  unint64_t v7 = v7;
  uint64_t v18 = (int *)v23;
  do
  {
    int v20 = *v18;
    v18 += 4;
    unsigned int v19 = v20;
    if ((int)result <= v20) {
      uint64_t result = v19;
    }
    else {
      uint64_t result = result;
    }
    --v7;
  }
  while (v7);
  return result;
}

void sub_21612EFFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (_DWORD *)a2;
  }
  else {
    uint64_t v5 = *(_DWORD **)a2;
  }
  _DWORD *v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    unint64_t v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    std::string::size_type v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v13;
    }
    else {
      unsigned int v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v13;
    }
    else {
      uint64_t v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
}

void sub_21612F0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21612F130(void *result, void *a2)
{
  void *result = 0;
  unint64_t v3 = a2[2];
  if (v3)
  {
    std::string __p = 0;
    int v21 = 0;
    int v22 = 0;
    sub_21612F414(&__p, v3);
    uint64_t v6 = (void *)*a2;
    int v4 = a2 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      unint64_t v7 = v21;
      do
      {
        uint64_t v8 = v5[4];
        if (v7 >= v22)
        {
          uint64_t v9 = (v7 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            sub_21610CB04();
          }
          unint64_t v10 = (v22 - (unsigned char *)__p) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if ((unint64_t)(v22 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unsigned int v12 = (char *)sub_2160FFAA8((uint64_t)&v22, v11);
          }
          else {
            unsigned int v12 = 0;
          }
          std::string v13 = &v12[8 * v9];
          *(void *)std::string v13 = v8;
          unint64_t v7 = v13 + 8;
          uint64_t v15 = (char *)__p;
          uint64_t v14 = v21;
          if (v21 != __p)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v13 - 1) = v16;
              v13 -= 8;
            }
            while (v14 != v15);
            uint64_t v14 = (char *)__p;
          }
          std::string __p = v13;
          int v21 = v7;
          int v22 = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = v8;
          v7 += 8;
        }
        int v21 = v7;
        uint64_t v17 = (void *)v5[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v5[2];
            BOOL v19 = *v18 == (void)v5;
            uint64_t v5 = v18;
          }
          while (!v19);
        }
        uint64_t v5 = v18;
      }
      while (v18 != v4);
    }
    operator new();
  }
  return result;
}

void sub_21612F3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *v14;
  *uint64_t v14 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_21612F414(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_21610CB04();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_2160FFAA8(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_21612F4C0(void *result, uint64_t a2, uint64_t a3)
{
  void *result = 0;
  if (a3) {
    operator new();
  }
  return result;
}

void sub_21612F5A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_21612F6A8(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21612F5C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)a1) {
    return sub_21612F5FC(a2, *(void **)(*(void *)a1 + 16), 4 * *(void *)(*(void *)a1 + 8));
  }
  else {
    return sub_21610B834(a2, "");
  }
}

uint64_t sub_21612F5E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t sub_21612F5F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216159F90(a2, a1 + 56);
}

void *sub_21612F5FC(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    int16x4_t *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t sub_21612F6A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t sub_21612F6CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 80)) {
    uint64_t v3 = *(_DWORD **)(a1 + 80);
  }
  else {
    uint64_t v3 = &unk_26797EB78;
  }
  switch(v3[68])
  {
    case 1:
      sub_21612F838();
    case 2:
      sub_21612F8B0();
    case 3:
      sub_21612F928();
    case 4:
      sub_21612F9A0();
    default:
      uint64_t result = sub_216157D08();
      if ((int)result <= 2)
      {
        LOBYTE(v11) = 0;
        int64_t v5 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"model_factory.cc", 16);
        sub_216129E78(v5, (uint64_t)"(", 1);
        uint64_t v6 = (void *)std::ostream::operator<<();
        size_t v7 = sub_216129E78(v6, (uint64_t)") ", 2);
        size_t v8 = sub_216129E78(v7, (uint64_t)"LOG(", 4);
        uint64_t v9 = sub_216129E78(v8, (uint64_t)"ERROR", 5);
        unint64_t v10 = sub_216129E78(v9, (uint64_t)") ", 2);
        sub_216129E78(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        uint64_t result = (uint64_t)sub_216128E18(&v11);
      }
      *a2 = 0;
      return result;
  }
}

void sub_21612F814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216128E18(va);
  _Unwind_Resume(a1);
}

void sub_21612F838()
{
}

void sub_21612F88C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void sub_21612F8B0()
{
}

void sub_21612F904(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sub_21612F928()
{
}

void sub_21612F97C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sub_21612F9A0()
{
}

void sub_21612F9F4(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_21612FA18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v14[1] = a2;
  v14[2] = a3;
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v6 == 1) {
    sub_21612FC1C();
  }
  if (!v6) {
    sub_21612FB9C();
  }
  uint64_t result = sub_216157D08();
  if ((int)result <= 2)
  {
    LOBYTE(v14[0]) = 0;
    size_t v8 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"model_factory.cc", 16);
    sub_216129E78(v8, (uint64_t)"(", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    unint64_t v10 = sub_216129E78(v9, (uint64_t)") ", 2);
    uint64_t v11 = sub_216129E78(v10, (uint64_t)"LOG(", 4);
    unsigned int v12 = sub_216129E78(v11, (uint64_t)"ERROR", 5);
    uint64_t v13 = sub_216129E78(v12, (uint64_t)") ", 2);
    sub_216129E78(v13, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
    std::ostream::operator<<();
    uint64_t result = (uint64_t)sub_216128E18(v14);
  }
  *a4 = 0;
  return result;
}

void sub_21612FB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216128E18(va);
  _Unwind_Resume(a1);
}

void sub_21612FB9C()
{
}

void sub_21612FBF8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void sub_21612FC1C()
{
}

void sub_21612FC78(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void *sub_21612FC9C(void *a1)
{
  *a1 = &unk_26C6C42A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_2161121B0(v2);
  }
  return a1;
}

void sub_21612FCE8(void *a1)
{
  *a1 = &unk_26C6C42A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_2161121B0(v1);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21612FD54(void *a1)
{
  uint64_t result = a1[2];
  if (!result)
  {
    sub_21613F644(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    int v4 = (std::__shared_weak_count *)a1[3];
    *((_OWORD *)a1 + 1) = v3;
    if (v4)
    {
      sub_2161121B0(v4);
      if (*((void *)&v5 + 1)) {
        sub_2161121B0(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    uint64_t result = a1[2];
    a1[1] = result;
  }
  return result;
}

void *sub_21612FDBC(void *a1)
{
  *a1 = &unk_26C6C4308;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_2161121B0(v2);
  }
  return a1;
}

void sub_21612FE08(void *a1)
{
  *a1 = &unk_26C6C4308;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_2161121B0(v1);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21612FE74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    sub_21613F770(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    int v4 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v3;
    if (v4)
    {
      sub_2161121B0(v4);
      if (*((void *)&v5 + 1)) {
        sub_2161121B0(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    return *(void *)(a1 + 8);
  }
  return result;
}

void *sub_21612FED8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (void *)sub_216168660(v2, (uint64_t)a2);
  }
  else {
    return sub_21610B834(a2, "");
  }
}

double sub_21612FEF4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C3FA8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

uint64_t sub_21612FF34(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C3FA8;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  long long v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 48) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

void sub_216130098(uint64_t a1)
{
  sub_21612FF34(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161300D0()
{
  v3[19] = *MEMORY[0x263EF8340];
  sub_21613025C(v1);
  if ((v2[*(void *)(v1[0] - 24) + 16] & 5) == 0) {
    std::istream::read();
  }
  v1[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166CA430](v2);
  std::istream::~istream();
  MEMORY[0x2166CA750](v3);
  return 0;
}

void sub_216130240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216130420((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21613025C(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  long long v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x2166CA420](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_2161303E8(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2166CA750](v1);
  _Unwind_Resume(a1);
}

void *sub_216130420(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x2166CA430](a1 + 2);
  std::istream::~istream();
  MEMORY[0x2166CA750](a1 + 53);
  return a1;
}

uint64_t sub_2161304EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_2161300D0()) {
    sub_216130664();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64);

  return v6(a1, a2, a3);
}

void sub_216130638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_216130664()
{
}

void sub_2161306AC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2161306D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1) {
    sub_216156F7C();
  }

  return sub_216159ED8(a2, 5, "model file path should not be empty.", 36);
}

void sub_216130A54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  uint64_t v3 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216130ACC(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v11);
  if (v11)
  {
    char v10 = 1;
    uint64_t v1 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_216129E78(v1, (uint64_t)"(", 1);
    uint64_t v2 = (void *)std::ostream::operator<<();
    uint64_t v3 = sub_216129E78(v2, (uint64_t)") [", 3);
    uint64_t v4 = sub_216129E78(v3, (uint64_t)"_status.ok()", 12);
    uint64_t v5 = sub_216129E78(v4, (uint64_t)"] ", 2);
    sub_21615A0A8((uint64_t)&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_216129E78(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_216128E18(&v10);
  }
  return sub_216159D74(&v11);
}

void sub_216130BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_216128E18((unsigned char *)(v15 - 25));
  sub_216159D74((uint64_t *)(v15 - 24));
  _Unwind_Resume(a1);
}

void sub_216130C14()
{
}

void sub_216130CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_216130D0C()
{
}

void sub_216130F68(_Unwind_Exception *a1)
{
  sub_21613F89C((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sub_216130FAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(unsigned char **)(*a2 + 88);
  if (!v5) {
    uint64_t v5 = &unk_26797ECC0;
  }
  if (v5[80])
  {
    if ((int)sub_216157D08() <= 0)
    {
      LOBYTE(v23) = 0;
      uint64_t v6 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
      sub_216129E78(v6, (uint64_t)"(", 1);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = sub_216129E78(v7, (uint64_t)") ", 2);
      uint64_t v9 = sub_216129E78(v8, (uint64_t)"LOG(", 4);
      char v10 = sub_216129E78(v9, (uint64_t)"INFO", 4);
      uint64_t v11 = sub_216129E78(v10, (uint64_t)") ", 2);
      sub_216129E78(v11, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sub_216128E18(&v23);
    }
    uint64_t v4 = *a2;
    *(_DWORD *)(v4 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    uint64_t v12 = *(void *)(v4 + 80);
    if (!v12)
    {
      uint64_t v13 = *(void *)(v4 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v12 = sub_2161556BC((uint64_t)v14);
      *(void *)(v4 + 8sub_21613F89C(&a9, 0) = v12;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v12 + 40) |= 0x4000u;
    *(unsigned char *)(v12 + 245) = 1;
    *(_DWORD *)(v4 + 48) |= 2u;
    uint64_t v15 = *(void *)(v4 + 88);
    if (!v15)
    {
      uint64_t v16 = *(void *)(v4 + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if (v16) {
        uint64_t v17 = (void *)*v17;
      }
      uint64_t v15 = sub_21615578C((uint64_t)v17);
      *(void *)(v4 + 88) = v15;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v15 + 48) |= 0x10u;
    *(unsigned char *)(v15 + 81) = 1;
  }
  *a2 = 0;
  if (v4) {
    uint64_t v18 = v4 + 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    uint64_t v18 = *(void *)(a1 + 32);
  }
  sub_21612F6CC(v18 - 16, &v23);
  uint64_t v20 = v23;
  uint64_t v23 = 0;
  uint64_t v21 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    uint64_t v22 = v23;
    uint64_t v23 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  sub_2161319F8();
}

void sub_21613193C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_2161319F8()
{
}

void sub_216131A54(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_216131A78()
{
}

void sub_216131ACC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_216131AF0(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  sub_21612F5FC(&__dst, __src, __len);
  size_t v12 = strlen(a3);
  sub_21613F8EC(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_216131BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_216131BFC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_216131C04(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  v46[19] = *MEMORY[0x263EF8340];
  a4[1] = *a4;
  if (a3)
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    if (!*a5)
    {
      sub_216159D74(a5);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CEF0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797CEF0))
      {
        long long v42 = xmmword_264267808;
        *(_OWORD *)std::string __p = unk_264267818;
        long long v44 = xmmword_264267828;
        uint64_t v45 = 3;
        long long v38 = xmmword_2642677C8;
        long long v39 = unk_2642677D8;
        long long v40 = xmmword_2642677E8;
        long long v41 = *(_OWORD *)&off_2642677F8;
        sub_216141F68((uint64_t)&unk_26797CED8, (uint64_t)&v38, 5);
        __cxa_atexit((void (*)(void *))sub_21613BC50, &unk_26797CED8, &dword_2160F5000);
        __cxa_guard_release(&qword_26797CEF0);
      }
      sub_21613EC60((char **)&v36, a2, a3, ":", 1, 0);
      char v10 = (uint64_t *)v36;
      uint64_t v11 = v37;
      if (v36 == v37)
      {
LABEL_29:
        if (v10)
        {
          uint64_t v37 = v10;
          operator delete(v10);
        }
        sub_2161055D0(a5);
      }
      else
      {
        while (1)
        {
          size_t v12 = sub_2161400B0((uint64_t)&unk_26797CED8, (uint64_t)v10);
          uint64_t v13 = v12;
          if (v12 == (void *)&unk_26797CEE0) {
            break;
          }
          uint64_t v15 = a4[1];
          unint64_t v14 = (unint64_t)a4[2];
          if ((unint64_t)v15 >= v14)
          {
            uint64_t v17 = *a4;
            uint64_t v18 = (v15 - *a4) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              sub_21610CB04();
            }
            uint64_t v20 = v14 - (void)v17;
            if (v20 >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              uint64_t v22 = (char *)sub_2161129B4((uint64_t)(a4 + 2), v21);
              uint64_t v17 = *a4;
              uint64_t v15 = a4[1];
            }
            else
            {
              uint64_t v22 = 0;
            }
            uint64_t v23 = &v22[4 * v18];
            *(_DWORD *)uint64_t v23 = *((_DWORD *)v13 + 12);
            uint64_t v16 = v23 + 4;
            while (v15 != v17)
            {
              int v24 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *((_DWORD *)v23 - 1) = v24;
              v23 -= 4;
            }
            *a4 = v23;
            a4[1] = v16;
            a4[2] = &v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v15 = *((_DWORD *)v12 + 12);
            uint64_t v16 = v15 + 4;
          }
          a4[1] = v16;
          int v25 = *((_DWORD *)v13 + 12);
          if (v25 == 1)
          {
            uint64_t v26 = sub_216126908(a1[1]);
            size_t v27 = strlen(v26);
            uint64_t v28 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v26, v27);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v28))
            {
              LODWORD(v38) = 13;
              sub_216128C80((uint64_t)&v38 + 8);
              sub_216129E78((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_216129E78((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_216129E78((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_216129E78((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              sub_216129E78((void *)&v38 + 1, (uint64_t)"] ", 2);
              unsigned int v32 = sub_216126908(a1[1]);
              sub_216129E78((void *)&v38 + 1, (uint64_t)v32, v33);
              sub_21612650C((unsigned int *)&v38, (uint64_t)a5);
              goto LABEL_40;
            }
            int v25 = *((_DWORD *)v13 + 12);
          }
          if (v25 == 2)
          {
            unsigned int v29 = sub_21612698C(a1[1]);
            size_t v30 = strlen(v29);
            uint64_t v31 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v29, v30);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v31))
            {
              LODWORD(v38) = 13;
              sub_216128C80((uint64_t)&v38 + 8);
              sub_216129E78((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_216129E78((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_216129E78((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_216129E78((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              sub_216129E78((void *)&v38 + 1, (uint64_t)"] ", 2);
              int v34 = sub_21612698C(a1[1]);
              sub_216129E78((void *)&v38 + 1, (uint64_t)v34, v35);
              sub_21612650C((unsigned int *)&v38, (uint64_t)a5);
LABEL_40:
              *((void *)&v38 + 1) = *MEMORY[0x263F8C2C8];
              *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x263F8C2C8] + 24);
              *(void *)&long long v39 = MEMORY[0x263F8C318] + 16;
              if (SBYTE7(v44) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_42;
            }
          }
          v10 += 2;
          if (v10 == v11)
          {
            char v10 = (uint64_t *)v36;
            goto LABEL_29;
          }
        }
        LODWORD(v38) = 13;
        sub_216128C80((uint64_t)&v38 + 8);
        sub_216129E78((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78((void *)&v38 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78((void *)&v38 + 1, (uint64_t)") [", 3);
        sub_216129E78((void *)&v38 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        sub_216129E78((void *)&v38 + 1, (uint64_t)"] ", 2);
        sub_216129E78((void *)&v38 + 1, (uint64_t)"option \"", 8);
        sub_216129E78((void *)&v38 + 1, *v10, v10[1]);
        sub_216129E78((void *)&v38 + 1, (uint64_t)"\" is not available.", 19);
        sub_21612650C((unsigned int *)&v38, (uint64_t)a5);
        *((void *)&v38 + 1) = *MEMORY[0x263F8C2C8];
        *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                              + 24);
        *(void *)&long long v39 = MEMORY[0x263F8C318] + 16;
        if (SBYTE7(v44) < 0) {
          operator delete(__p[0]);
        }
LABEL_42:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2166CA750](v46);
        if (v36)
        {
          uint64_t v37 = (uint64_t *)v36;
          operator delete(v36);
        }
      }
    }
  }
  else
  {
    sub_2161055D0(a5);
  }
}

void sub_216132454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_2161324D0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void *sub_2161324D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    if (*(void *)(a1 + 16))
    {
      double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      if (!*a2)
      {
        sub_216159D74(a2);
        double result = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
        if (!*a2)
        {
          uint64_t v6 = sub_216159D74(a2);
          return sub_2161055D0(v6);
        }
      }
      return result;
    }
    unsigned int v9 = 13;
    uint64_t v8 = (void *)sub_216128C80((uint64_t)v10);
    sub_216129E78(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v10, (uint64_t)") [", 3);
    sub_216129E78(v10, (uint64_t)"normalizer_", 11);
    sub_216129E78(v10, (uint64_t)"] ", 2);
    sub_216129E78(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sub_21612650C(&v9, (uint64_t)a2);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)sub_216128C80((uint64_t)v10);
    sub_216129E78(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v10, (uint64_t)") [", 3);
    sub_216129E78(v10, (uint64_t)"model_", 6);
    sub_216129E78(v10, (uint64_t)"] ", 2);
    sub_216129E78(v10, (uint64_t)"Model is not initialized.", 25);
    sub_21612650C(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x2166CA750](&v12);
}

void sub_2161327F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216132810(void *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  if (*a3) {
    return;
  }
  sub_216159D74(a3);
  uint64_t v6 = (const void *)a1[4];
  if (!v6
    || (uint64_t v7 = __dynamic_cast(v6, (const struct __class_type_info *)&unk_26C6BA5B0, (const struct __class_type_info *)&unk_26C6BA500, 16)) == 0)
  {
    unsigned int v23 = 13;
    uint64_t v20 = (void *)sub_216128C80((uint64_t)v24);
    sub_216129E78(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v24, (uint64_t)") [", 3);
    sub_216129E78(v24, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    sub_216129E78(v24, (uint64_t)"] ", 2);
    sub_216129E78(v24, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sub_21612650C(&v23, (uint64_t)a3);
LABEL_27:
    v24[0] = *(void **)MEMORY[0x263F8C2C8];
    *(void **)((char *)v24 + *(v24[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
    v24[1] = (void *)(MEMORY[0x263F8C318] + 16);
    if (v25 < 0) {
      operator delete(v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166CA750](&v26);
    return;
  }
  uint64_t v8 = v7;
  unsigned int v9 = &unk_26797EB78;
  if (v7[10]) {
    unsigned int v9 = (_DWORD *)v7[10];
  }
  if ((v9[68] - 1) >= 2)
  {
    unsigned int v23 = 13;
    unint64_t v21 = (void *)sub_216128C80((uint64_t)v24);
    sub_216129E78(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v24, (uint64_t)") [", 3);
    sub_216129E78(v24, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    sub_216129E78(v24, (uint64_t)"] ", 2);
    sub_216129E78(v24, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sub_21612650C(&v23, (uint64_t)a3);
    goto LABEL_27;
  }
  sub_21613FDF8((uint64_t)&v23, *a2, a2[1]);
  if (*((int *)v8 + 16) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_21613EB80((uint64_t)(v8 + 7), v10);
      uint64_t v12 = v11;
      if ((*(_DWORD *)(v11 + 60) - 2) >= 3)
      {
        unint64_t v13 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v13 + 23) < 0)
        {
          unint64_t v15 = *(void *)v13;
          uint64_t v14 = *(void *)(v13 + 8);
        }
        else
        {
          uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
          unint64_t v15 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v22[0] = v15;
        v22[1] = v14;
        if (v24 == sub_2161400B0((uint64_t)&v23, (uint64_t)v22)
          && ((unint64_t v16 = *(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v16 + 23) < 0)
            ? (unsigned __int8 *)(v18 = *(unsigned __int8 **)v16, uint64_t v17 = *(void *)(v16 + 8))
            : (uint64_t v17 = *(unsigned __int8 *)(v16 + 23),
               uint64_t v18 = (unsigned __int8 *)(*(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v17 != asc_21639FB8C[(unint64_t)*v18 >> 4]))
        {
          if (!sub_21614D95C(5)) {
LABEL_32:
          }
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          int v19 = 5;
        }
        else
        {
          if (!sub_21614D95C(1)) {
            goto LABEL_32;
          }
          int v19 = 1;
        }
        *(_DWORD *)(v12 + 40) |= 4u;
        *(_DWORD *)(v12 + 6sub_21613F89C(&a9, 0) = v19;
      }
      ++v10;
    }
    while (v10 < *((_DWORD *)v8 + 16));
  }
  sub_2161055D0(a3);
  sub_21612A250((uint64_t)&v23, v24[0]);
}

void sub_216132C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void *sub_216132CB4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  double result = (void *)(*(uint64_t (**)(void *))(*a1 + 88))(a1);
  if (!*a2)
  {
    sub_216159D74(a2);
    uint64_t v5 = (const void *)a1[4];
    if (v5
      && (uint64_t v6 = (int *)__dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6BA5B0, (const struct __class_type_info *)&unk_26C6BA500, 16)) != 0)
    {
      uint64_t v7 = *((void *)v6 + 9);
      if (v7) {
        uint64_t v8 = (uint64_t *)(v7 + 8);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v6[16];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        do
        {
          uint64_t v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sub_21614D95C(1)) {
              sub_216142654();
            }
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 6sub_21613F89C(&a9, 0) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sub_2161055D0(a2);
    }
    else
    {
      unsigned int v13 = 13;
      uint64_t v12 = (void *)sub_216128C80((uint64_t)v14);
      sub_216129E78(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v14, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v14, (uint64_t)") [", 3);
      sub_216129E78(v14, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      sub_216129E78(v14, (uint64_t)"] ", 2);
      sub_216129E78(v14, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sub_21612650C(&v13, (uint64_t)a2);
      v14[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v14[1] = MEMORY[0x263F8C318] + 16;
      if (v15 < 0) {
        operator delete((void *)v14[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (void *)MEMORY[0x2166CA750](&v16);
    }
  }
  return result;
}

void sub_216132F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216132F94()
{
}

void sub_216133578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  std::string __p = (void *)(v10 - 176);
  sub_21613EFD0((void ***)&__p);
  std::string __p = (void *)(v10 - 152);
  sub_21613EFD0((void ***)&__p);
  if (*(char *)(v10 - 105) < 0) {
    operator delete(*(void **)(v10 - 128));
  }
  uint64_t v12 = *(void *)(v10 - 104);
  *(void *)(v10 - 104) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Unwind_Resume(a1);
}

BOOL sub_21613366C(const char *a1, uint64_t a2, uint64_t a3)
{
  sub_216140140((uint64_t)v11);
  size_t v5 = strlen(a1);
  uint64_t v6 = sub_216129E78(v12, (uint64_t)a1, v5);
  if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0)
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x2166CA4C0](v11, a3);
    BOOL v7 = (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](&v14);
  return v7;
}

void sub_216133844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140418((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216133858@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  double result = sub_21613F074(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v9 = (void *)*v8;
        uint64_t v4 = v8[1];
      }
      else
      {
        uint64_t v4 = v4;
        uint64_t v9 = v8;
      }
      uint64_t v10 = (void *)(*result + v6);
      *uint64_t v10 = v9;
      v10[1] = v4;
      ++v7;
      uint64_t v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

uint64_t sub_2161338FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_216159D74(a5);
    if (a4)
    {
      sub_21613F024(a4);
      sub_21614B5F4(&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v16);
      if (!*a5)
      {
        sub_216159D74(a5);
        if (v19) {
          uint64_t v11 = v19 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v18)
        {
          unint64_t v12 = a4[1];
          uint64_t v13 = 8 * v18;
          do
          {
            uint64_t v14 = (long long *)(*(void *)(*(void *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              unint64_t v12 = sub_2161405B0(a4, v14);
            }
            else
            {
              sub_216140550(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        sub_2161055D0(a5);
      }
      return sub_21614B71C(&v16);
    }
    else
    {
      unsigned int v16 = 13;
      char v15 = (void *)sub_216128C80((uint64_t)v17);
      sub_216129E78(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v17, (uint64_t)") [", 3);
      sub_216129E78(v17, (uint64_t)"pieces", 6);
      sub_216129E78(v17, (uint64_t)"] ", 2);
      sub_216129E78(v17, (uint64_t)"output container is null", 24);
      sub_21612650C(&v16, (uint64_t)a5);
      v17[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v17[1] = MEMORY[0x263F8C318] + 16;
      if (v21 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v22);
    }
  }
  return result;
}

void sub_216133BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216133C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_216159D74(a5);
    if (a4)
    {
      a4[1] = *a4;
      sub_21614B5F4(&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v26);
      if (!*a5)
      {
        sub_216159D74(a5);
        if (v29) {
          uint64_t v11 = v29 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v28)
        {
          unint64_t v12 = a4 + 2;
          uint64_t v13 = a4[1];
          uint64_t v14 = v11 + 8 * v28;
          do
          {
            int v15 = *(_DWORD *)(*(void *)v11 + 64);
            if ((unint64_t)v13 >= *v12)
            {
              uint64_t v17 = *a4;
              uint64_t v18 = (v13 - *a4) >> 2;
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62) {
                sub_21610CB04();
              }
              uint64_t v20 = *v12 - (void)v17;
              if (v20 >> 1 > v19) {
                unint64_t v19 = v20 >> 1;
              }
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21)
              {
                uint64_t v22 = (char *)sub_2161129B4((uint64_t)(a4 + 2), v21);
                uint64_t v17 = *a4;
                uint64_t v13 = a4[1];
              }
              else
              {
                uint64_t v22 = 0;
              }
              unsigned int v23 = &v22[4 * v18];
              *(_DWORD *)unsigned int v23 = v15;
              unsigned int v16 = v23 + 4;
              while (v13 != v17)
              {
                int v24 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = &v22[4 * v21];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v13 = v15;
              unsigned int v16 = v13 + 4;
            }
            a4[1] = v16;
            v11 += 8;
            uint64_t v13 = v16;
          }
          while (v11 != v14);
        }
        sub_2161055D0(a5);
      }
      return sub_21614B71C(&v26);
    }
    else
    {
      unsigned int v26 = 13;
      char v25 = (void *)sub_216128C80((uint64_t)v27);
      sub_216129E78(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v27, (uint64_t)") [", 3);
      sub_216129E78(v27, (uint64_t)"ids", 3);
      sub_216129E78(v27, (uint64_t)"] ", 2);
      sub_216129E78(v27, (uint64_t)"output container is null", 24);
      sub_21612650C(&v26, (uint64_t)a5);
      v27[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v27[1] = MEMORY[0x263F8C318] + 16;
      if (v31 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v32);
    }
  }
  return result;
}

void sub_216133F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216133FA0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_216133858(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_216134028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216134044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_216159D74(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_21614B5F4(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 272))(a1, a2, &v10);
      if (!*a4)
      {
        sub_216159D74(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_2161055D0(a4);
      }
      return sub_21614B71C(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_216128C80((uint64_t)v11);
      sub_216129E78(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v11, (uint64_t)") [", 3);
      sub_216129E78(v11, (uint64_t)"detokenized", 11);
      sub_216129E78(v11, (uint64_t)"] ", 2);
      sub_216129E78(v11, (uint64_t)"output container is null", 24);
      sub_21612650C(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v11[1] = MEMORY[0x263F8C318] + 16;
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v13);
    }
  }
  return result;
}

void sub_2161342E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216134308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_216159D74(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_21614B5F4(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 280))(a1, a2, &v10);
      if (!*a4)
      {
        sub_216159D74(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_2161055D0(a4);
      }
      return sub_21614B71C(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_216128C80((uint64_t)v11);
      sub_216129E78(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v11, (uint64_t)") [", 3);
      sub_216129E78(v11, (uint64_t)"detokenized", 11);
      sub_216129E78(v11, (uint64_t)"] ", 2);
      sub_216129E78(v11, (uint64_t)"output container is null", 24);
      sub_21612650C(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v11[1] = MEMORY[0x263F8C318] + 16;
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v13);
    }
  }
  return result;
}

void sub_2161345A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2161345CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_216159D74(a6);
    if (a5)
    {
      uint64_t v13 = *a5;
      uint64_t v14 = (void **)a5[1];
      while (v14 != (void **)v13)
      {
        v14 -= 3;
        char v31 = v14;
        sub_21613EFD0(&v31);
      }
      a5[1] = v13;
      sub_21614C1B0(&v31, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(void *)a1 + 240))(a1, a2, a3, a4, &v31);
      if (!*a6)
      {
        sub_216159D74(a6);
        if (v34) {
          int v15 = (uint64_t *)(v34 + 8);
        }
        else {
          int v15 = 0;
        }
        if (v33)
        {
          unsigned int v16 = &v15[v33];
          do
          {
            uint64_t v17 = *v15;
            int v28 = 0;
            unint64_t v29 = 0;
            unint64_t v30 = 0;
            uint64_t v18 = *(void *)(v17 + 64);
            if (v18) {
              uint64_t v19 = v18 + 8;
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v20 = *(int *)(v17 + 56);
            if (v20)
            {
              unint64_t v21 = 0;
              uint64_t v22 = 8 * v20;
              do
              {
                unint64_t v23 = *(void *)(*(void *)v19 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v21 >= v30)
                {
                  unint64_t v21 = sub_2161405B0((uint64_t *)&v28, (long long *)v23);
                }
                else
                {
                  if (*(char *)(v23 + 23) < 0)
                  {
                    sub_21610A674((unsigned char *)v21, *(void **)v23, *(void *)(v23 + 8));
                  }
                  else
                  {
                    long long v24 = *(_OWORD *)v23;
                    *(void *)(v21 + 16) = *(void *)(v23 + 16);
                    *(_OWORD *)unint64_t v21 = v24;
                  }
                  v21 += 24;
                }
                unint64_t v29 = v21;
                v19 += 8;
                v22 -= 8;
              }
              while (v22);
            }
            unint64_t v25 = a5[1];
            if (v25 >= a5[2])
            {
              uint64_t v26 = sub_216140734(a5, &v28);
            }
            else
            {
              sub_2161406D4((uint64_t)a5, &v28);
              uint64_t v26 = v25 + 24;
            }
            a5[1] = v26;
            long long v38 = &v28;
            sub_21613EFD0((void ***)&v38);
            ++v15;
          }
          while (v15 != v16);
        }
        sub_2161055D0(a6);
      }
      return sub_21614C26C(&v31);
    }
    else
    {
      LODWORD(v31) = 13;
      size_t v27 = (void *)sub_216128C80((uint64_t)v32);
      sub_216129E78(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v32, (uint64_t)") [", 3);
      sub_216129E78(v32, (uint64_t)"pieces", 6);
      sub_216129E78(v32, (uint64_t)"] ", 2);
      sub_216129E78(v32, (uint64_t)"output container is null", 24);
      sub_21612650C((unsigned int *)&v31, (uint64_t)a6);
      v32[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v32[1] = MEMORY[0x263F8C318] + 16;
      if (v36 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v37);
    }
  }
  return result;
}

void sub_216134970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21612659C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161349C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_216159D74(a6);
    if (a5)
    {
      sub_21613F498(a5);
      sub_21614C1B0(&v37, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 240))(a1, a2, a3, a4, &v37);
      if (!*a6)
      {
        sub_216159D74(a6);
        if (v40) {
          uint64_t v13 = (uint64_t *)(v40 + 8);
        }
        else {
          uint64_t v13 = 0;
        }
        if (v39)
        {
          int v33 = &v13[v39];
          do
          {
            uint64_t v14 = *v13;
            std::string __p = 0;
            uint64_t v35 = 0;
            char v36 = 0;
            uint64_t v15 = *(void *)(v14 + 64);
            if (v15) {
              uint64_t v16 = v15 + 8;
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v17 = *(int *)(v14 + 56);
            if (v17)
            {
              uint64_t v18 = 0;
              uint64_t v19 = v16 + 8 * v17;
              do
              {
                int v20 = *(_DWORD *)(*(void *)v16 + 64);
                if (v18 >= v36)
                {
                  uint64_t v22 = (char *)__p;
                  uint64_t v23 = (v18 - (unsigned char *)__p) >> 2;
                  unint64_t v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 62) {
                    sub_21610CB04();
                  }
                  uint64_t v25 = v36 - (unsigned char *)__p;
                  if ((v36 - (unsigned char *)__p) >> 1 > v24) {
                    unint64_t v24 = v25 >> 1;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v26 = v24;
                  }
                  if (v26)
                  {
                    size_t v27 = (char *)sub_2161129B4((uint64_t)&v36, v26);
                    uint64_t v22 = (char *)__p;
                    uint64_t v18 = v35;
                  }
                  else
                  {
                    size_t v27 = 0;
                  }
                  int v28 = &v27[4 * v23];
                  *(_DWORD *)int v28 = v20;
                  unint64_t v21 = v28 + 4;
                  while (v18 != v22)
                  {
                    int v29 = *((_DWORD *)v18 - 1);
                    v18 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  std::string __p = v28;
                  uint64_t v35 = v21;
                  char v36 = &v27[4 * v26];
                  if (v22) {
                    operator delete(v22);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v18 = v20;
                  unint64_t v21 = v18 + 4;
                }
                uint64_t v35 = v21;
                v16 += 8;
                uint64_t v18 = v21;
              }
              while (v16 != v19);
            }
            unint64_t v30 = a5[1];
            if (v30 >= a5[2])
            {
              uint64_t v31 = sub_216140C9C(a5, (uint64_t)&__p);
            }
            else
            {
              sub_216140C48((uint64_t)a5, (uint64_t)&__p);
              uint64_t v31 = v30 + 24;
            }
            a5[1] = v31;
            if (__p)
            {
              uint64_t v35 = (char *)__p;
              operator delete(__p);
            }
            ++v13;
          }
          while (v13 != v33);
        }
        sub_2161055D0(a6);
      }
      return sub_21614C26C(&v37);
    }
    else
    {
      unsigned int v37 = 13;
      uint64_t v32 = (void *)sub_216128C80((uint64_t)v38);
      sub_216129E78(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v38, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v38, (uint64_t)") [", 3);
      sub_216129E78(v38, (uint64_t)"ids", 3);
      sub_216129E78(v38, (uint64_t)"] ", 2);
      sub_216129E78(v38, (uint64_t)"output container is null", 24);
      sub_21612650C(&v37, (uint64_t)a6);
      v38[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v38 + *(void *)(v38[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v38[1] = MEMORY[0x263F8C318] + 16;
      if (v42 < 0) {
        operator delete(v41);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v43);
    }
  }
  return result;
}

void sub_216134DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_216134E00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_216159D74(a6);
    if (a5)
    {
      sub_21613F024(a5);
      sub_21614B5F4(&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        sub_216159D74(a6);
        if (v23) {
          uint64_t v15 = v23 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v22)
        {
          unint64_t v16 = a5[1];
          uint64_t v17 = 8 * v22;
          do
          {
            uint64_t v18 = (long long *)(*(void *)(*(void *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              unint64_t v16 = sub_2161405B0(a5, v18);
            }
            else
            {
              sub_216140550(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        sub_2161055D0(a6);
      }
      return sub_21614B71C(&v20);
    }
    else
    {
      unsigned int v20 = 13;
      uint64_t v19 = (void *)sub_216128C80((uint64_t)v21);
      sub_216129E78(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v21, (uint64_t)") [", 3);
      sub_216129E78(v21, (uint64_t)"pieces", 6);
      sub_216129E78(v21, (uint64_t)"] ", 2);
      sub_216129E78(v21, (uint64_t)"output container is null", 24);
      sub_21612650C(&v20, (uint64_t)a6);
      v21[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v21[1] = MEMORY[0x263F8C318] + 16;
      if (v25 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v26);
    }
  }
  return result;
}

void sub_2161350F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216135124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_216159D74(a6);
    if (a5)
    {
      a5[1] = *a5;
      sub_21614B5F4(&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        sub_216159D74(a6);
        if (v33) {
          uint64_t v15 = v33 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v32)
        {
          unint64_t v16 = a5 + 2;
          uint64_t v17 = a5[1];
          uint64_t v18 = v15 + 8 * v32;
          do
          {
            int v19 = *(_DWORD *)(*(void *)v15 + 64);
            if ((unint64_t)v17 >= *v16)
            {
              unint64_t v21 = *a5;
              uint64_t v22 = (v17 - *a5) >> 2;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                sub_21610CB04();
              }
              uint64_t v24 = *v16 - (void)v21;
              if (v24 >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                uint64_t v26 = (char *)sub_2161129B4((uint64_t)(a5 + 2), v25);
                unint64_t v21 = *a5;
                uint64_t v17 = a5[1];
              }
              else
              {
                uint64_t v26 = 0;
              }
              size_t v27 = &v26[4 * v22];
              *(_DWORD *)size_t v27 = v19;
              unsigned int v20 = v27 + 4;
              while (v17 != v21)
              {
                int v28 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v27 - 1) = v28;
                v27 -= 4;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = &v26[4 * v25];
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v17 = v19;
              unsigned int v20 = v17 + 4;
            }
            a5[1] = v20;
            v15 += 8;
            uint64_t v17 = v20;
          }
          while (v15 != v18);
        }
        sub_2161055D0(a6);
      }
      return sub_21614B71C(&v30);
    }
    else
    {
      unsigned int v30 = 13;
      int v29 = (void *)sub_216128C80((uint64_t)v31);
      sub_216129E78(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v31, (uint64_t)") [", 3);
      sub_216129E78(v31, (uint64_t)"ids", 3);
      sub_216129E78(v31, (uint64_t)"] ", 2);
      sub_216129E78(v31, (uint64_t)"output container is null", 24);
      sub_21612650C(&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v31[1] = MEMORY[0x263F8C318] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v36);
    }
  }
  return result;
}

void sub_2161354AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2161354DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_216159D74(a8);
    if (a7)
    {
      uint64_t v19 = *a7;
      unsigned int v20 = (void **)a7[1];
      while (v20 != (void **)v19)
      {
        v20 -= 4;
        int v39 = v20;
        sub_21613EFD0(&v39);
      }
      a7[1] = v19;
      sub_21614C1B0(&v39, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v39, a9);
      if (!*a8)
      {
        sub_216159D74(a8);
        unint64_t v21 = (long long *)*a7;
        uint64_t v22 = (long long *)a7[1];
        while (v22 != v21)
        {
          v22 -= 2;
          uint64_t v36 = v22;
          sub_21613EFD0((void ***)&v36);
        }
        a7[1] = (uint64_t)v21;
        sub_216135954(a7, v41);
        if (v42) {
          uint64_t v24 = (uint64_t *)(v42 + 8);
        }
        else {
          uint64_t v24 = 0;
        }
        if (v41)
        {
          unint64_t v25 = &v24[v41];
          do
          {
            uint64_t v26 = *v24;
            uint64_t v36 = 0;
            std::string __dst = 0;
            unint64_t v38 = 0;
            sub_2161359E8((uint64_t *)&v36, *(int *)(v26 + 56));
            uint64_t v27 = *(void *)(v26 + 64);
            if (v27) {
              uint64_t v28 = v27 + 8;
            }
            else {
              uint64_t v28 = 0;
            }
            uint64_t v29 = *(int *)(v26 + 56);
            if (v29)
            {
              unint64_t v30 = (unint64_t)__dst;
              uint64_t v31 = 8 * v29;
              do
              {
                unint64_t v32 = *(void *)(*(void *)v28 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v30 >= v38)
                {
                  unint64_t v30 = sub_2161405B0((uint64_t *)&v36, (long long *)v32);
                }
                else
                {
                  if (*(char *)(v32 + 23) < 0)
                  {
                    sub_21610A674((unsigned char *)v30, *(void **)v32, *(void *)(v32 + 8));
                  }
                  else
                  {
                    long long v33 = *(_OWORD *)v32;
                    *(void *)(v30 + 16) = *(void *)(v32 + 16);
                    *(_OWORD *)unint64_t v30 = v33;
                  }
                  v30 += 24;
                }
                std::string __dst = (void *)v30;
                v28 += 8;
                v31 -= 8;
              }
              while (v31);
            }
            LODWORD(v46[0]) = *(_DWORD *)(v26 + 80);
            unint64_t v34 = a7[1];
            if (v34 >= a7[2])
            {
              uint64_t v35 = sub_216141304(a7, &v36, v46);
            }
            else
            {
              sub_216141290((uint64_t)a7, &v36, (float *)v46);
              uint64_t v35 = v34 + 32;
            }
            a7[1] = v35;
            v46[0] = (void **)&v36;
            sub_21613EFD0(v46);
            ++v24;
          }
          while (v24 != v25);
        }
        sub_2161055D0(a8);
      }
      return sub_21614C26C(&v39);
    }
    else
    {
      LODWORD(v39) = 13;
      unint64_t v23 = (void *)sub_216128C80((uint64_t)v40);
      sub_216129E78(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v40, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v40, (uint64_t)") [", 3);
      sub_216129E78(v40, (uint64_t)"pieces", 6);
      sub_216129E78(v40, (uint64_t)"] ", 2);
      sub_216129E78(v40, (uint64_t)"output container is null", 24);
      sub_21612650C((unsigned int *)&v39, (uint64_t)a8);
      v40[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v40 + *(void *)(v40[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v40[1] = MEMORY[0x263F8C318] + 16;
      if (v44 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v45);
    }
  }
  return result;
}

void sub_216135900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21612659C((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_216135954(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21610CB04();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216115A58((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    _OWORD v7[3] = (char *)v7[0] + 32 * v6;
    sub_216141060(a1, v7);
    return sub_216141208(v7);
  }
  return result;
}

void sub_2161359D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216141208((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161359E8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21610CB04();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216129BFC(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    _OWORD v7[3] = v7[0] + 24 * v6;
    sub_21613FBD0(a1, v7);
    return sub_21613FD68((uint64_t)v7);
  }
  return result;
}

void sub_216135A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613FD68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216135A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_216159D74(a8);
    if (a7)
    {
      sub_216129D20(a7);
      sub_21614C1B0(&v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v45, a9);
      if (!*a8)
      {
        int v39 = a8;
        sub_216159D74(a8);
        sub_216129D20(a7);
        sub_216135F4C(a7, v47);
        if (v48) {
          uint64_t v19 = (uint64_t *)(v48 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
        if (v47)
        {
          uint64_t v40 = &v19[v47];
          do
          {
            uint64_t v20 = *v19;
            std::string __p = 0;
            uint64_t v43 = 0;
            char v44 = 0;
            sub_216120BA4(&__p, *(int *)(v20 + 56));
            uint64_t v21 = *(void *)(v20 + 64);
            if (v21) {
              uint64_t v22 = v21 + 8;
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = *(int *)(v20 + 56);
            if (v23)
            {
              uint64_t v24 = v22 + 8 * v23;
              unint64_t v25 = v43;
              do
              {
                int v26 = *(_DWORD *)(*(void *)v22 + 64);
                if (v25 >= v44)
                {
                  uint64_t v28 = (char *)__p;
                  uint64_t v29 = (v25 - (unsigned char *)__p) >> 2;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    sub_21610CB04();
                  }
                  uint64_t v31 = v44 - (unsigned char *)__p;
                  if ((v44 - (unsigned char *)__p) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    long long v33 = (char *)sub_2161129B4((uint64_t)&v44, v32);
                    uint64_t v28 = (char *)__p;
                    unint64_t v25 = v43;
                  }
                  else
                  {
                    long long v33 = 0;
                  }
                  unint64_t v34 = &v33[4 * v29];
                  *(_DWORD *)unint64_t v34 = v26;
                  uint64_t v27 = v34 + 4;
                  while (v25 != v28)
                  {
                    int v35 = *((_DWORD *)v25 - 1);
                    v25 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  std::string __p = v34;
                  uint64_t v43 = v27;
                  char v44 = &v33[4 * v32];
                  if (v28) {
                    operator delete(v28);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v25 = v26;
                  uint64_t v27 = v25 + 4;
                }
                uint64_t v43 = v27;
                v22 += 8;
                unint64_t v25 = v27;
              }
              while (v22 != v24);
            }
            int v41 = *(_DWORD *)(v20 + 80);
            unint64_t v36 = a7[1];
            if (v36 >= a7[2])
            {
              uint64_t v37 = sub_2161416B4(a7, (uint64_t)&__p, &v41);
            }
            else
            {
              sub_21614164C((uint64_t)a7, (uint64_t)&__p, (float *)&v41);
              uint64_t v37 = v36 + 32;
            }
            a7[1] = v37;
            if (__p)
            {
              uint64_t v43 = (char *)__p;
              operator delete(__p);
            }
            ++v19;
          }
          while (v19 != v40);
        }
        sub_2161055D0(v39);
      }
      return sub_21614C26C(&v45);
    }
    else
    {
      unsigned int v45 = 13;
      unint64_t v38 = (void *)sub_216128C80((uint64_t)v46);
      sub_216129E78(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v46, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v46, (uint64_t)") [", 3);
      sub_216129E78(v46, (uint64_t)"ids", 3);
      sub_216129E78(v46, (uint64_t)"] ", 2);
      sub_216129E78(v46, (uint64_t)"output container is null", 24);
      sub_21612650C(&v45, (uint64_t)a8);
      v46[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v46[1] = MEMORY[0x263F8C318] + 16;
      if (v50 < 0) {
        operator delete(v49);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v51);
    }
  }
  return result;
}

void sub_216135F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sub_216135F4C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21610CB04();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216115A58(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    _OWORD v7[3] = v7[0] + 32 * v6;
    sub_216141414(a1, v7);
    return sub_2161415B8((uint64_t)v7);
  }
  return result;
}

void sub_216135FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161415B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216135FE0@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10 = *a6;
  uint64_t v110 = a6[1];
  if (*a6 != v110)
  {
    uint64_t v11 = a5;
    unint64_t v12 = 0;
    char v13 = 0;
    uint64_t v112 = a7 + 48;
    while (1)
    {
      size_t v14 = *(void *)(v10 + 8);
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        int v97 = (void *)sub_216128C80((uint64_t)&__p[1]);
        sub_216129E78(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(&__p[1], (uint64_t)") [", 3);
        sub_216129E78(&__p[1], (uint64_t)"!w.empty()", 10);
        sub_216129E78(&__p[1], (uint64_t)"] ", 2);
        sub_216129E78(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sub_21612650C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      uint64_t v15 = *(unsigned __int8 **)v10;
      uint64_t v16 = *(unsigned int *)(v10 + 16);
      int v111 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v16);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v16))
      {
        uint64_t v17 = *(int **)(a7 + 64);
        if (v17)
        {
          uint64_t v18 = *(int *)(a7 + 56);
          int v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            sub_21612F5FC(__p, v15, v14);
            uint64_t v53 = *(void *)(v20 + 8);
            int64_t v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if (v53) {
              int64_t v54 = (void *)*v54;
            }
            sub_21615AFAC((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            uint64_t v56 = *(void *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 4sub_21613F89C(&a9, 0) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *uint64_t v17 = v19 + 1;
            uint64_t v20 = sub_21614C9B8(*(void *)(a7 + 48));
            uint64_t v51 = *(void *)(a7 + 64);
            uint64_t v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(void *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          int v19 = *(_DWORD *)(a7 + 60);
        }
        sub_21616EBCC(v112, v19 + 1);
        uint64_t v17 = *(int **)(a7 + 64);
        int v19 = *v17;
        goto LABEL_57;
      }
      uint64_t v21 = *v11;
      uint64_t v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        int v98 = (void *)sub_216128C80((uint64_t)&__p[1]);
        sub_216129E78(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(&__p[1], (uint64_t)") [", 3);
        sub_216129E78(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        sub_216129E78(&__p[1], (uint64_t)"] ", 2);
        sub_21612650C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        int v99 = (void *)sub_216128C80((uint64_t)&__p[1]);
        sub_216129E78(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(&__p[1], (uint64_t)") [", 3);
        sub_216129E78(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        sub_216129E78(&__p[1], (uint64_t)"] ", 2);
        sub_21612650C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v24 = *(void *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        uint64_t v100 = (void *)sub_216128C80((uint64_t)&__p[1]);
        sub_216129E78(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(&__p[1], (uint64_t)") [", 3);
        sub_216129E78(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        sub_216129E78(&__p[1], (uint64_t)"] ", 2);
        sub_21612650C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v25 = *(void *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        __int16 v101 = (void *)sub_216128C80((uint64_t)&__p[1]);
        sub_216129E78(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(&__p[1], (uint64_t)") [", 3);
        sub_216129E78(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        sub_216129E78(&__p[1], (uint64_t)"] ", 2);
        sub_21612650C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        unsigned __int16 v102 = (void *)sub_216128C80((uint64_t)&__p[1]);
        sub_216129E78(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(&__p[1], (uint64_t)") [", 3);
        sub_216129E78(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        sub_216129E78(&__p[1], (uint64_t)"] ", 2);
        sub_21612650C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24) {
        size_t v27 = v24;
      }
      else {
        size_t v27 = a3;
      }
      uint64_t v28 = &a2[v27];
      size_t v29 = a3 - v27;
      if (v29 < v26) {
        size_t v26 = v29;
      }
      __src = v28;
      size_t __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            unsigned __int8 v31 = *v15++;
            unsigned __int8 v30 = v31;
            unint64_t v32 = *(int **)(a7 + 64);
            if (!v32) {
              break;
            }
            uint64_t v33 = *(int *)(a7 + 56);
            int v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                sub_21616EBCC(v112, v34 + 1);
                unint64_t v32 = *(int **)(a7 + 64);
                int v34 = *v32;
              }
              *unint64_t v32 = v34 + 1;
              uint64_t v35 = sub_21614C9B8(*(void *)(a7 + 48));
              uint64_t v36 = *(void *)(a7 + 64);
              uint64_t v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(void *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            uint64_t v35 = *(void *)&v32[2 * v33 + 2];
LABEL_27:
            sub_216128388(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __dst.__r_.__value_.__l.__size_;
            }
            int v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(void *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v41 = &__dst;
            }
            else {
              int v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v42 = __dst.__r_.__value_.__l.__size_;
            }
            *(_DWORD *)(v35 + 40) |= 1u;
            sub_21612F5FC(__p, v41, v42);
            uint64_t v43 = *(void *)(v35 + 8);
            char v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if (v43) {
              char v44 = (void *)*v44;
            }
            sub_21615AFAC((uint64_t *)(v35 + 48), (long long *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 4sub_21613F89C(&a9, 0) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 4sub_21613F89C(&a9, 0) = v45 | 6;
              sub_21612F5FC(__p, __src, __len);
              uint64_t v46 = *(void *)(v35 + 8);
              int v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if (v46) {
                int v47 = (void *)*v47;
              }
              sub_21615AFAC((uint64_t *)(v35 + 56), (long long *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0) {
                operator delete(__p[0]);
              }
              int v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v48 | 0x18;
              int v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v45 | 0x1C;
              int v50 = v24;
            }
            *(_DWORD *)(v35 + 4sub_21613F89C(&a9, 0) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (!--v14)
            {
              unint64_t v12 = v23;
              uint64_t v11 = a5;
              goto LABEL_84;
            }
          }
          int v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if (v13)
        {
          uint64_t v57 = sub_21613F564(v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_141;
          }
          uint64_t v20 = v57;
          uint64_t v58 = *(void *)(v57 + 48);
          uint64_t v104 = (uint64_t *)(v57 + 48);
          if (v14 >= 0x17)
          {
            uint64_t v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v71 = v14 | 7;
            }
            uint64_t v103 = v71 + 1;
            int32x4_t v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
            int32x4_t v59 = &__dst;
          }
          unint64_t v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          int v73 = *(char *)(v72 + 23);
          if (v73 >= 0) {
            uint64_t v74 = (const std::string::value_type *)v72;
          }
          else {
            uint64_t v74 = *(const std::string::value_type **)v72;
          }
          if (v73 >= 0) {
            std::string::size_type v75 = *(unsigned __int8 *)(v72 + 23);
          }
          else {
            std::string::size_type v75 = *(void *)(v72 + 8);
          }
          uint64_t v76 = std::string::insert(&__dst, 0, v74, v75);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          uint64_t v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          uint64_t v78 = *(void *)(v20 + 8);
          uint64_t v79 = (void *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          size_t v80 = __len;
          if (v78) {
            uint64_t v79 = (void *)*v79;
          }
          sub_21615AFAC(v104, (long long *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_141:
          }
            sub_21610A714();
          uint64_t v81 = *(void *)(v20 + 56);
          if (__len >= 0x17)
          {
            uint64_t v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17) {
              uint64_t v83 = __len | 7;
            }
            uint64_t v84 = v83 + 1;
            std::string::size_type v82 = (std::string *)operator new(v83 + 1);
            unint64_t v85 = v84 | 0x8000000000000000;
            size_t v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
            std::string::size_type v82 = &__dst;
            if (!__len) {
              goto LABEL_109;
            }
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          int v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0) {
            unsigned int v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          else {
            unsigned int v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          if (v86 >= 0) {
            std::string::size_type v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          }
          else {
            std::string::size_type v88 = *(void *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          int v89 = std::string::insert(&__dst, 0, v87, v88);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          uint64_t v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          uint64_t v91 = *(void *)(v20 + 8);
          int v92 = (void *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v11 = a5;
          if (v91) {
            int v92 = (void *)*v92;
          }
          sub_21615AFAC((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          unint64_t v12 = v23;
          goto LABEL_83;
        }
      }
      uint64_t v60 = *(int **)(a7 + 64);
      if (!v60) {
        break;
      }
      uint64_t v61 = *(int *)(a7 + 56);
      int v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          sub_21616EBCC(v112, v62 + 1);
          uint64_t v60 = *(int **)(a7 + 64);
          int v62 = *v60;
        }
        *uint64_t v60 = v62 + 1;
        uint64_t v20 = sub_21614C9B8(*(void *)(a7 + 48));
        uint64_t v63 = *(void *)(a7 + 64);
        uint64_t v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(void *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      uint64_t v20 = *(void *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_21612F5FC(__p, v15, v14);
      uint64_t v65 = *(void *)(v20 + 8);
      uint64_t v66 = (void *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if (v65) {
        uint64_t v66 = (void *)*v66;
      }
      sub_21615AFAC((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 4sub_21613F89C(&a9, 0) = v67 | 6;
      sub_21612F5FC(__p, __src, __len);
      uint64_t v68 = *(void *)(v20 + 8);
      std::string::size_type v69 = (void *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if (v68) {
        std::string::size_type v69 = (void *)*v69;
      }
      sub_21615AFAC((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 4sub_21613F89C(&a9, 0) = v70 | 0x18;
      LODWORD(v56) = v25;
      unint64_t v12 = v23;
      uint64_t v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      size_t v23 = v12;
LABEL_84:
      v10 += 24;
      char v13 = v111;
      if (v10 == v110) {
        goto LABEL_123;
      }
    }
    int v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  size_t v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    uint64_t result = sub_216136E54(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*a8)
    {
      sub_216159D74(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      sub_21612F5FC(__p, a2, a3);
      uint64_t v94 = *(void *)(a7 + 8);
      int v95 = (void *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if (v94) {
        int v95 = (void *)*v95;
      }
      sub_21615AFAC((uint64_t *)(a7 + 72), (long long *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      return sub_2161055D0(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  int v96 = (void *)sub_216128C80((uint64_t)&__p[1]);
  sub_216129E78(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  sub_216129E78(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_216129E78(&__p[1], (uint64_t)") [", 3);
  sub_216129E78(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_216129E78(&__p[1], (uint64_t)"] ", 2);
  sub_216129E78(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sub_21612650C((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x263F8C2C8];
  *(void **)((char *)&__p[1] + *((void *)__p[1] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v117 = MEMORY[0x263F8C318] + 16;
  if (v119 < 0) {
    operator delete(v118);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x2166CA750](&v120);
}

void sub_216136DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216136E54@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(_DWORD **)a2;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    uint64_t v9 = a3 + 48;
    while (1)
    {
      switch(*v6)
      {
        case 0:
          uint64_t v10 = *(void *)(a3 + 64);
          if (v10) {
            unint64_t v11 = v10 + 8;
          }
          else {
            unint64_t v11 = 0;
          }
          uint64_t v12 = *(int *)(a3 + 56);
          char v13 = (uint64_t *)(v11 + 8 * v12 - 8);
          if (v12) {
            BOOL v14 = (unint64_t)v13 > v11;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14)
          {
            unint64_t v15 = v11 + 8;
            do
            {
              uint64_t v16 = *v13--;
              sub_216141F24(*(void *)(v15 - 8), v16);
              BOOL v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          uint64_t v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            int v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            sub_21616EBCC(v9, v20 + 1);
            uint64_t v18 = *(int **)(a3 + 64);
            int v20 = *v18;
            goto LABEL_35;
          }
          int v19 = *(_DWORD *)(a3 + 56);
          int v20 = *v18;
          if (v19 < *v18)
          {
            int v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_34;
          }
LABEL_35:
          *uint64_t v18 = v20 + 1;
          uint64_t v32 = sub_21614C9B8(*(void *)(a3 + 48));
          uint64_t v33 = *(void *)(a3 + 64);
          uint64_t v34 = *(int *)(a3 + 56);
          int v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(void *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            unint64_t v35 = v21;
            do
            {
              uint64_t v36 = *(void *)(a3 + 64) + 8;
              uint64_t v37 = *(void *)(v36 + 8 * (v35 - 2));
              *(void *)(v36 + 8 * (v35 - 2)) = *(void *)(v36 + 8 * (v35 - 1));
              *(void *)(v36 + 8 * (v35 - 1)) = v37;
              BOOL v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            sub_21615C174((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            unint64_t v38 = sub_21615C18C(__p, "CHECK failed: (index) < (current_size_): ");
            sub_21615C2C8((uint64_t)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)__p);
          }
          uint64_t v39 = *(void *)(*(void *)(a3 + 64) + 8);
          int v40 = sub_216126908(a1[1]);
          size_t v41 = strlen(v40);
          int v42 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          uint64_t v43 = (char *)sub_216126908(a1[1]);
          sub_216126908(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          sub_21612F5FC(__p, v43, v44);
          uint64_t v45 = *(void *)(v39 + 8);
          uint64_t v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if (v45) {
            uint64_t v46 = (void *)*v46;
          }
          sub_21615AFAC((uint64_t *)(v39 + 48), (long long *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          uint64_t v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            int v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            sub_21616EBCC(v9, v24 + 1);
            uint64_t v22 = *(int **)(a3 + 64);
            int v24 = *v22;
            goto LABEL_46;
          }
          uint64_t v23 = *(int *)(a3 + 56);
          int v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            uint64_t v25 = *(void *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_45;
          }
LABEL_46:
          int *v22 = v24 + 1;
          uint64_t v25 = sub_21614C9B8(*(void *)(a3 + 48));
          uint64_t v47 = *(void *)(a3 + 64);
          uint64_t v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(void *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          int v49 = sub_21612698C(a1[1]);
          size_t v50 = strlen(v49);
          int v51 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          uint64_t v52 = (char *)sub_21612698C(a1[1]);
          sub_21612698C(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          sub_21612F5FC(__p, v52, v53);
          uint64_t v54 = *(void *)(v25 + 8);
          int v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if (v54) {
            int v55 = (void *)*v55;
          }
          sub_21615AFAC((uint64_t *)(v25 + 48), (long long *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
LABEL_52:
          if (++v6 == v5) {
            return sub_2161055D0(a4);
          }
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            int v26 = 0;
            do
            {
              uint64_t v27 = sub_21613F564(v9, v26);
              if ((*(unsigned int (**)(uint64_t *, void))(*a1 + 528))(a1, *(unsigned int *)(v27 + 64)))
              {
                uint64_t v28 = (char *)sub_216126884(a1[1]);
                sub_216126884(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                sub_21612F5FC(__p, v28, v29);
                uint64_t v30 = *(void *)(v27 + 8);
                unsigned __int8 v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if (v30) {
                  unsigned __int8 v31 = (void *)*v31;
                }
                sub_21615AFAC((uint64_t *)(v27 + 48), (long long *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (void *)sub_216159ED8(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sub_2161055D0(a4);
}

void sub_216137324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_21613736C(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (!*a5)
  {
    sub_216159D74(a5);
    if (a4)
    {
      sub_21614B794(a4);
      BOOL v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      BOOL v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*a5)
      {
        sub_216159D74(a5);
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(__p);
        if (v19 >= 0) {
          uint64_t v10 = HIBYTE(v19);
        }
        else {
          uint64_t v10 = v18;
        }
        sub_216135FE0(a1, a2, a3, v10, (uint64_t *)&v14, (uint64_t *)__p, a4, a5);
        if (!*a5)
        {
          unint64_t v11 = sub_216159D74(a5);
          sub_2161055D0(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        unint64_t v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(v17);
      }
    }
    else
    {
      LODWORD(v17) = 13;
      uint64_t v12 = (void *)sub_216128C80((uint64_t)&v18);
      sub_216129E78(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(&v18, (uint64_t)") [", 3);
      sub_216129E78(&v18, (uint64_t)"spt", 3);
      sub_216129E78(&v18, (uint64_t)"] ", 2);
      sub_216129E78(&v18, (uint64_t)"output proto is null", 20);
      sub_21612650C((unsigned int *)&v17, (uint64_t)a5);
      uint64_t v18 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&v18 + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v19 = MEMORY[0x263F8C318] + 16;
      if (v21 < 0) {
        operator delete(v20);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166CA750](&v22);
    }
  }
}

void sub_2161376A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_216137704(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a5) {
    return;
  }
  sub_216159D74(a5);
  if (a4)
  {
    sub_21614C2A8(a4);
    int v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*a5)
    {
      sub_216159D74(a5);
      if ((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]))
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v21);
        uint64_t v10 = v21;
        uint64_t v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            uint64_t v12 = *(int **)(a4 + 32);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a4 + 24);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                sub_21616EBCC(a4 + 16, v14 + 1);
                uint64_t v12 = *(int **)(a4 + 32);
                int v14 = *v12;
              }
              *uint64_t v12 = v14 + 1;
              uint64_t v15 = sub_21614CA88(*(void *)(a4 + 16));
              uint64_t v16 = *(void *)(a4 + 32);
              uint64_t v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            uint64_t v15 = *(void *)&v12[2 * v13 + 2];
LABEL_14:
            int v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 8sub_21613F89C(&a9, 0) = v18;
            if (v28 >= 0) {
              uint64_t v19 = HIBYTE(v28);
            }
            else {
              uint64_t v19 = v27;
            }
            sub_216135FE0(a1, a2, a3, v19, (uint64_t *)&v23, (uint64_t *)v10, v15, a5);
            if (*a5) {
              goto LABEL_29;
            }
            sub_216159D74(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sub_2161055D0(a5);
              goto LABEL_29;
            }
          }
          int v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        sub_216128C80((uint64_t)&v30);
        sub_216129E78(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(&v30, (uint64_t)") [", 3);
        sub_216129E78(&v30, (uint64_t)"!nbests.empty()", 15);
        sub_216129E78(&v30, (uint64_t)"] ", 2);
        sub_216129E78(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_21612650C((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x263F8C2C8];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
        uint64_t v31 = MEMORY[0x263F8C318] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2166CA750](v34);
LABEL_29:
        size_t v29 = (void **)&v21;
        sub_216129CCC(&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        sub_216128C80((uint64_t)&v30);
        sub_216129E78(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(&v30, (uint64_t)") [", 3);
        sub_216129E78(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_216129E78(&v30, (uint64_t)"] ", 2);
        sub_216129E78(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_21612650C((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x263F8C2C8];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
        uint64_t v31 = MEMORY[0x263F8C318] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2166CA750](v34);
      }
    }
    if (v23)
    {
      int v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v26);
    }
  }
  else
  {
    LODWORD(v29) = 13;
    int v20 = (void *)sub_216128C80((uint64_t)&v30);
    sub_216129E78(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(&v30, (uint64_t)") [", 3);
    sub_216129E78(&v30, (uint64_t)"nbest_spt", 9);
    sub_216129E78(&v30, (uint64_t)"] ", 2);
    sub_216129E78(&v30, (uint64_t)"output proto is null", 20);
    sub_21612650C((unsigned int *)&v29, (uint64_t)a5);
    uint64_t v30 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v31 = MEMORY[0x263F8C318] + 16;
    if (v33 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166CA750](v34);
  }
}

void sub_216137E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_216129CCC((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216137ED8(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a6) {
    return;
  }
  sub_216159D74(a6);
  if (a5)
  {
    sub_21614B794(a5);
    if (a4 < 513)
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      std::string __p = 0;
      char v33 = 0;
      uint64_t v34 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v35, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          char v33 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(v35);
        }
        return;
      }
      sub_216159D74(a6);
      char v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]);
      if (a4 >= 0) {
        char v17 = v16;
      }
      else {
        char v17 = 0;
      }
      if (v17)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v30);
          if (v30 == v31)
          {
            LODWORD(v38) = 13;
            sub_216128C80((uint64_t)v39);
            sub_216129E78(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_216129E78(v39, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_216129E78(v39, (uint64_t)") [", 3);
            sub_216129E78(v39, (uint64_t)"!nbests.empty()", 15);
            sub_216129E78(v39, (uint64_t)"] ", 2);
            sub_216129E78(v39, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_21612650C((unsigned int *)&v38, (uint64_t)a6);
            sub_21612659C((uint64_t)&v38);
            unint64_t v38 = &v30;
            sub_216129CCC((void ***)&v38);
            goto LABEL_5;
          }
          LODWORD(v29[0]) = 0;
          sub_21611494C(&v38, (v31 - v30) >> 5, v29);
          if (v31 != v30)
          {
            uint64_t v19 = (float *)v38;
            if ((unint64_t)((v31 - v30) >> 5) <= 1) {
              uint64_t v20 = 1;
            }
            else {
              uint64_t v20 = (v31 - v30) >> 5;
            }
            uint64_t v21 = (float *)(v30 + 24);
            do
            {
              float v22 = *v21;
              v21 += 8;
              *v19++ = expf(v22 * a7);
              --v20;
            }
            while (v20);
          }
          uint64_t v23 = sub_216157E60();
          sub_2161417B8((uint64_t)v29, (float *)v38, v39[0]);
          uint64_t v24 = HIBYTE(v37);
          uint64_t v25 = v36;
          int v26 = sub_216141AD8((uint64_t)v29, v23, (double **)v29);
          if ((v24 & 0x80u) == 0) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = v25;
          }
          sub_216135FE0(a1, a2, a3, v27, (uint64_t *)&__p, (uint64_t *)(v30 + 32 * v26), a5, a6);
          uint64_t v28 = *a6;
          if (!*a6) {
            sub_216159D74(a6);
          }
          if (v29[0])
          {
            v29[1] = v29[0];
            operator delete(v29[0]);
          }
          if (v38)
          {
            v39[0] = (float *)v38;
            operator delete(v38);
          }
          unint64_t v38 = &v30;
          sub_216129CCC((void ***)&v38);
          if (v28) {
            goto LABEL_5;
          }
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(&v38);
        if (v37 >= 0) {
          uint64_t v18 = HIBYTE(v37);
        }
        else {
          uint64_t v18 = v36;
        }
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v38) = 13;
          sub_216128C80((uint64_t)v39);
          sub_216129E78(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_216129E78(v39, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_216129E78(v39, (uint64_t)") [", 3);
          sub_216129E78(v39, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_216129E78(v39, (uint64_t)"] ", 2);
          sub_216129E78(v39, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_21612650C((unsigned int *)&v38, (uint64_t)a6);
          sub_21612659C((uint64_t)&v38);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(void *)a1[1] + 56))(&v38, a7);
        if (v37 >= 0) {
          uint64_t v18 = HIBYTE(v37);
        }
        else {
          uint64_t v18 = v36;
        }
      }
      sub_216135FE0(a1, a2, a3, v18, (uint64_t *)&__p, (uint64_t *)&v38, a5, a6);
      if (*a6)
      {
        if (v38)
        {
          v39[0] = (float *)v38;
          operator delete(v38);
        }
        goto LABEL_5;
      }
      sub_216159D74(a6);
      if (v38)
      {
        v39[0] = (float *)v38;
        operator delete(v38);
      }
LABEL_51:
      sub_2161055D0(a6);
      goto LABEL_5;
    }
    LODWORD(v38) = 13;
    uint64_t v15 = (void *)sub_216128C80((uint64_t)v39);
    sub_216129E78(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v39, (uint64_t)") [", 3);
    sub_216129E78(v39, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_216129E78(v39, (uint64_t)"] ", 2);
    sub_216129E78(v39, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_21612650C((unsigned int *)&v38, (uint64_t)a6);
  }
  else
  {
    LODWORD(v38) = 13;
    int v14 = (void *)sub_216128C80((uint64_t)v39);
    sub_216129E78(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v39, (uint64_t)") [", 3);
    sub_216129E78(v39, (uint64_t)"spt", 3);
    sub_216129E78(v39, (uint64_t)"] ", 2);
    sub_216129E78(v39, (uint64_t)"output proto is null", 20);
    sub_21612650C((unsigned int *)&v38, (uint64_t)a6);
  }
  v39[0] = *(float **)MEMORY[0x263F8C2C8];
  *(float **)((char *)v39 + *((void *)v39[0] - 3)) = *(float **)(MEMORY[0x263F8C2C8] + 24);
  v39[1] = (float *)(MEMORY[0x263F8C318] + 16);
  if (v40 < 0) {
    operator delete(v39[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](&v41);
}

void sub_2161386B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  sub_216129CCC((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_2161387A4(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8)))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = 0;
    (*(void (**)(void, char *, size_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*a5)
    {
      sub_216159D74(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(void **)(a1 + 8) + 64))(&v23, a6);
      uint64_t v12 = v23;
      uint64_t v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          int v14 = *(int **)(a4 + 32);
          if (!v14) {
            break;
          }
          uint64_t v15 = *(int *)(a4 + 24);
          int v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              sub_21616EBCC(a4 + 16, v16 + 1);
              int v14 = *(int **)(a4 + 32);
              int v16 = *v14;
            }
            *int v14 = v16 + 1;
            uint64_t v17 = sub_21614CA88(*(void *)(a4 + 16));
            uint64_t v18 = *(void *)(a4 + 32);
            uint64_t v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(void *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          uint64_t v17 = *(void *)&v14[2 * v15 + 2];
LABEL_11:
          int v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 8sub_21613F89C(&a9, 0) = v20;
          if (v30 >= 0) {
            uint64_t v21 = HIBYTE(v30);
          }
          else {
            uint64_t v21 = v29;
          }
          sub_216135FE0((uint64_t *)a1, a2, a3, v21, (uint64_t *)&v25, (uint64_t *)v12, v17, a5);
          if (*a5) {
            goto LABEL_23;
          }
          sub_216159D74(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sub_2161055D0(a5);
            goto LABEL_23;
          }
        }
        int v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      sub_216128C80((uint64_t)&v32);
      sub_216129E78(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(&v32, (uint64_t)") [", 3);
      sub_216129E78(&v32, (uint64_t)"!results.empty()", 16);
      sub_216129E78(&v32, (uint64_t)"] ", 2);
      sub_216129E78(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_21612650C((unsigned int *)&v31, (uint64_t)a5);
      uint64_t v32 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v33 = MEMORY[0x263F8C318] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166CA750](v36);
LABEL_23:
      uint64_t v31 = (void **)&v23;
      sub_216129CCC(&v31);
    }
    if (v25)
    {
      int v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
  }
  else
  {
    LODWORD(v31) = 13;
    float v22 = (void *)sub_216128C80((uint64_t)&v32);
    sub_216129E78(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(&v32, (uint64_t)") [", 3);
    sub_216129E78(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_216129E78(&v32, (uint64_t)"] ", 2);
    sub_216129E78(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_21612650C((unsigned int *)&v31, (uint64_t)a5);
    uint64_t v32 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v33 = MEMORY[0x263F8C318] + 16;
    if (v35 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166CA750](v36);
  }
}

void sub_216138D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_216129CCC((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216138DB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8)))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::string __p = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    (*(void (**)(void, uint64_t, uint64_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      sub_216159D74(a5);
      if (v20 >= 0) {
        uint64_t v12 = &v18;
      }
      else {
        uint64_t v12 = v18;
      }
      if (v20 >= 0) {
        uint64_t v13 = HIBYTE(v20);
      }
      else {
        uint64_t v13 = v19;
      }
      *a4 = (*(float (**)(void, void *, uint64_t, float))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), v12, v13, a6);
      sub_2161055D0(a5);
    }
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v18);
    }
  }
  else
  {
    LODWORD(v18) = 13;
    int v14 = (void *)sub_216128C80((uint64_t)&v19);
    sub_216129E78(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(&v19, (uint64_t)") [", 3);
    sub_216129E78(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_216129E78(&v19, (uint64_t)"] ", 2);
    sub_216129E78(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_21612650C((unsigned int *)&v18, (uint64_t)a5);
    uint64_t v19 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v19 + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v20 = MEMORY[0x263F8C318] + 16;
    if (v22 < 0) {
      operator delete(v21);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166CA750](&v23);
  }
}

void sub_216139088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161390C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_216133858(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_216139158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216139174(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v68 = a3;
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a4) {
    return;
  }
  sub_216159D74(a4);
  if (v4)
  {
    sub_21614B794(v4);
    uint64_t v8 = a1[4];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8)) {
      uint64_t v9 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 24))(a1[4]);
    }
    else {
      uint64_t v9 = (char *)&unk_21636D3C5;
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = v10[1];
        uint64_t v14 = v68;
        uint64_t v15 = *(int **)(v68 + 64);
        if (!v15) {
          break;
        }
        uint64_t v16 = *(int *)(v68 + 56);
        int v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            sub_21616EBCC(v68 + 48, v17 + 1);
            uint64_t v15 = *(int **)(v68 + 64);
            int v17 = *v15;
          }
          *uint64_t v15 = v17 + 1;
          uint64_t v18 = sub_21614C9B8(*(void *)(v14 + 48));
          uint64_t v19 = *(void *)(v14 + 64);
          uint64_t v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(void *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        uint64_t v18 = *(void *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        uint64_t v21 = *(void *)(v18 + 8);
        char v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if (v21) {
          char v22 = (void *)*v22;
        }
        uint64_t v23 = sub_21615AFD0((uint64_t *)(v18 + 48), (uint64_t)v22);
        MEMORY[0x2166CA370](v23, v12, v13);
        int v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 504))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          uint64_t v4 = v68;
          goto LABEL_20;
        }
      }
      int v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sub_216136E54(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*a4) {
      return;
    }
    sub_216159D74(a4);
    uint64_t v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    uint64_t v25 = *(void *)(v4 + 8);
    int v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if (v25) {
      int v26 = (void *)*v26;
    }
    v60[1] = &v61;
    uint64_t v61 = sub_21615AFD0((uint64_t *)(v4 + 72), (uint64_t)v26);
    uint64_t v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    int v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      BOOL v28 = 0;
      int v29 = 0;
      int v30 = 0;
      char v31 = 1;
      while (1)
      {
        uint64_t v32 = sub_21613E8BC(v4 + 48, v30);
        if (!(*(unsigned int (**)(uint64_t *, void))(*a1 + 552))(a1, *(unsigned int *)(v32 + 64))) {
          break;
        }
        ++v30;
LABEL_68:
        uint64_t v4 = v68;
        int v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27) {
          goto LABEL_89;
        }
      }
      sub_216139B14((uint64_t)v59, v29, v30, a4);
      if (*a4) {
        goto LABEL_95;
      }
      sub_216159D74(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            unint64_t v33 = *(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              char v35 = *(unsigned __int8 **)v33;
              size_t v34 = *(void *)(v33 + 8);
            }
            else
            {
              size_t v34 = *(unsigned __int8 *)(v33 + 23);
              char v35 = (unsigned __int8 *)(*(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            uint64_t v36 = *(unsigned int *)(v32 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v36))
            {
              sub_21610B834(&v62, "");
LABEL_58:
              BOOL v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0) {
                operator delete(__p[0]);
              }
              uint64_t v58 = v63;
              *(_OWORD *)std::string __p = v62;
              BOOL v28 = v64;
              if (v63 >= 0) {
                uint64_t v46 = __p;
              }
              else {
                uint64_t v46 = (void **)v62;
              }
              if (v63 >= 0) {
                size_t v47 = HIBYTE(v63);
              }
              else {
                size_t v47 = *((void *)&v62 + 1);
              }
              sub_21613A0AC(v60, v30++, v46, v47);
              int v29 = v30;
              goto LABEL_68;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((uint64_t v40 = a1[4]) == 0
                 || (uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41) & 1) != 0)
                 || (uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(void *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  BOOL v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  BOOL v43 = !v49;
                }
                else
                {
                  BOOL v43 = 0;
                }
                uint64_t v50 = a1[4];
                if (v50)
                {
                  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 24))(v51)) {
                    BOOL v43 = 0;
                  }
                }
              }
              else
              {
                BOOL v43 = 0;
              }
              uint64_t v52 = operator new(0x20uLL);
              int v70 = v52 + 4;
              uint64_t v71 = v52 + 4;
              *uint64_t v52 = &unk_21636D45A;
              v52[1] = 3;
              v52[2] = " ";
              unsigned int v52[3] = 1;
              std::string::size_type v69 = v52;
              sub_21613F0EC(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              long long v62 = __dst;
              uint64_t v63 = v73;
              unint64_t v73 = 0;
              long long __dst = 0uLL;
              BOOL v64 = v43;
              if (v69)
              {
                int v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            uint64_t v37 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 512))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              sub_21610B834(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8) {
              sub_21610A714();
            }
            if (v34 >= 0x17)
            {
              uint64_t v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17) {
                uint64_t v44 = v34 | 7;
              }
              uint64_t v45 = v44 + 1;
              p_dst = (long long *)operator new(v44 + 1);
              *((void *)&__dst + 1) = v34;
              unint64_t v73 = v45 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34) {
                goto LABEL_57;
              }
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((unsigned char *)p_dst + v34) = 0;
            long long v62 = __dst;
            uint64_t v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((unsigned char *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      char v31 = 0;
      goto LABEL_32;
    }
    int v29 = 0;
LABEL_89:
    sub_216139B14((uint64_t)v59, v29, v27, a4);
    if (!*a4)
    {
      sub_216159D74(a4);
      uint64_t v54 = a1[3];
      if (v54)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v54 + 40))(&v62);
        int v55 = v61;
        if (*((char *)v61 + 23) < 0) {
          operator delete((void *)*v61);
        }
        long long v56 = v62;
        v55[2] = v63;
        *(_OWORD *)int v55 = v56;
      }
      sub_2161055D0(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    LODWORD(v62) = 13;
    size_t v53 = (void *)sub_216128C80((uint64_t)&v62 + 8);
    sub_216129E78(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78((void *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78((void *)&v62 + 1, (uint64_t)") [", 3);
    sub_216129E78((void *)&v62 + 1, (uint64_t)"spt", 3);
    sub_216129E78((void *)&v62 + 1, (uint64_t)"] ", 2);
    sub_216129E78((void *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sub_21612650C((unsigned int *)&v62, (uint64_t)a4);
    *((void *)&v62 + 1) = *MEMORY[0x263F8C2C8];
    *(void *)((char *)&v62 + *(void *)(*((void *)&v62 + 1) - 24) + 8) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v63 = MEMORY[0x263F8C318] + 16;
    if (v66 < 0) {
      operator delete(v65);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166CA750](&v67);
  }
}

void sub_216139ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216139B14(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  if (a2 >= a3)
  {
    sub_2161055D0(a4);
  }
  else
  {
    memset(&v37, 0, sizeof(v37));
    int v8 = a2;
    do
    {
      uint64_t v9 = sub_21613E8BC(**(void **)a1 + 48, v8);
      unint64_t v10 = *(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        uint64_t v12 = *(void **)v10;
        size_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        size_t v11 = *(unsigned __int8 *)(v10 + 23);
        uint64_t v12 = (void *)(*(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      int v13 = sub_216127520(v12, v11);
      if (v13 < 0)
      {
        unsigned int v33 = 13;
        sub_216128C80((uint64_t)v34);
        sub_216129E78(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_216129E78(v34, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_216129E78(v34, (uint64_t)") [", 3);
        sub_216129E78(v34, (uint64_t)"(0) <= (byte)", 13);
        sub_216129E78(v34, (uint64_t)"] ", 2);
        sub_21612650C(&v33, (uint64_t)a4);
        goto LABEL_52;
      }
      std::string::append(&v37, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    char v31 = a4;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      int v14 = v37.__r_.__value_.__r.__words[1];
    }
    if (v14 >= 1)
    {
      int v15 = 0;
      while (1)
      {
        unint64_t v32 = 0;
        std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v37.__r_.__value_.__l.__size_;
        }
        if (size < v15) {
          sub_21613F340("string_view::substr");
        }
        unint64_t v17 = v15;
        uint64_t v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v37;
        }
        if (sub_216157D18((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v32) != 65533) {
          break;
        }
        int v19 = v17 + a2;
        if (v32 != 1)
        {
          if (v32 != 3)
          {
            unsigned int v33 = 13;
            sub_216128C80((uint64_t)v34);
            sub_216129E78(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_216129E78(v34, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_216129E78(v34, (uint64_t)") [", 3);
            sub_216129E78(v34, (uint64_t)"(consumed) == (1)", 17);
            sub_216129E78(v34, (uint64_t)"] ", 2);
            sub_21612650C(&v33, (uint64_t)v31);
            goto LABEL_52;
          }
          goto LABEL_23;
        }
        sub_21613A0AC(*(void ***)(a1 + 8), v19, &unk_21636D456, 3uLL);
        LODWORD(v22) = v32;
LABEL_42:
        int v15 = v17 + v22;
        if (v15 >= v14) {
          goto LABEL_49;
        }
      }
      int v19 = v17 + a2;
LABEL_23:
      std::string::size_type v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v20 = v37.__r_.__value_.__l.__size_;
      }
      unint64_t v21 = v20 - v17;
      if (v20 < v17) {
        sub_21613F340("string_view::substr");
      }
      unint64_t v22 = v32;
      uint64_t v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if (v21 >= v32) {
        unint64_t v24 = v32;
      }
      else {
        unint64_t v24 = v21;
      }
      if (v32)
      {
        unint64_t v25 = 0;
        int v26 = (char *)v23 + v17;
        int v27 = v19;
        do
        {
          unint64_t v28 = v22 - 1;
          if (v25 == v28) {
            int v29 = v26;
          }
          else {
            int v29 = "";
          }
          if (v25 == v28) {
            size_t v30 = v24;
          }
          else {
            size_t v30 = 0;
          }
          sub_21613A0AC(*(void ***)(a1 + 8), v27 + v25++, v29, v30);
          unint64_t v22 = v32;
        }
        while (v32 > v25);
      }
      goto LABEL_42;
    }
    int v15 = 0;
LABEL_49:
    if (v15 + a2 == a3)
    {
      sub_2161055D0(v31);
      goto LABEL_55;
    }
    unsigned int v33 = 13;
    sub_216128C80((uint64_t)v34);
    sub_216129E78(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v34, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v34, (uint64_t)") [", 3);
    sub_216129E78(v34, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_216129E78(v34, (uint64_t)"] ", 2);
    sub_21612650C(&v33, (uint64_t)v31);
LABEL_52:
    v34[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v34[1] = MEMORY[0x263F8C318] + 16;
    if (v35 < 0) {
      operator delete((void *)v34[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166CA750](&v36);
LABEL_55:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
}

void sub_21613A044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*(char *)(v11 - 89) < 0) {
    operator delete(*(void **)(v11 - 112));
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21613A0AC(void **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7 = sub_21613F564(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  uint64_t v8 = v7;
  if (a4 >= 0x17)
  {
    uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v10 = a4 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = a4;
    unint64_t v20 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v2sub_21613F89C(&a9, 0) = a4;
  p_dst = &__dst;
  if (a4) {
LABEL_8:
  }
    memmove(p_dst, a3, a4);
  *((unsigned char *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  uint64_t v12 = *(void *)(v8 + 8);
  int v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if (v12) {
    int v13 = (void *)*v13;
  }
  sub_21615AFAC((uint64_t *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  }
  int v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 4sub_21613F89C(&a9, 0) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v17 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  }
  *(_DWORD *)(v8 + 4sub_21613F89C(&a9, 0) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_21613A208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21613A224(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(a1);
  sub_2161359E8(&v19, a2[1] - *a2);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      int v11 = *v9;
      int v18 = v11;
      if (v11 < 0 || v11 >= v8) {
        break;
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      int v13 = v20;
      if ((unint64_t)v20 >= v21)
      {
        uint64_t v14 = (unsigned char *)sub_216141D78(&v19, (uint64_t)&__p);
      }
      else
      {
        sub_216141E88((int)&v21, v20, (uint64_t)&__p);
        uint64_t v14 = v13 + 24;
      }
      unint64_t v20 = v14;
      if (++v9 == v10) {
        goto LABEL_8;
      }
    }
    sub_21613A440("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_216159ED8(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_21613EFD0((void ***)&__p);
}

void sub_21613A3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  sub_21613EFD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_21613A440(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  sub_21612F5FC(&__dst, __src, __len);
  sub_216141C30();
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_21613A4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21613A518(void **a1)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v14);
  uint64_t v2 = v14;
  sub_216159D74(&v14);
  if (!v2) {
    return (*(uint64_t (**)(void *))(*a1[1] + 128))(a1[1]);
  }
  if ((int)sub_216157D08() <= 2)
  {
    char v13 = 0;
    uint64_t v3 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_216129E78(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::string::size_type v5 = sub_216129E78(v4, (uint64_t)") ", 2);
    uint64_t v6 = sub_216129E78(v5, (uint64_t)"LOG(", 4);
    uint64_t v7 = sub_216129E78(v6, (uint64_t)"ERROR", 5);
    unsigned __int8 v8 = sub_216129E78(v7, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v14, a1);
    uint64_t v9 = sub_21615A07C(&v14);
    size_t v10 = strlen(v9);
    int v11 = sub_216129E78(v8, (uint64_t)v9, v10);
    sub_216129E78(v11, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_216159D74(&v14);
    sub_216128E18(&v13);
  }
  return 0;
}

void sub_21613A6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_21613A6C8(void **a1, uint64_t a2, uint64_t a3)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v18);
  uint64_t v6 = v18;
  sub_216159D74(&v18);
  if (!v6) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  }
  if ((int)sub_216157D08() <= 2)
  {
    char v17 = 0;
    uint64_t v7 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_216129E78(v7, (uint64_t)"(", 1);
    unsigned __int8 v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_216129E78(v8, (uint64_t)") ", 2);
    size_t v10 = sub_216129E78(v9, (uint64_t)"LOG(", 4);
    int v11 = sub_216129E78(v10, (uint64_t)"ERROR", 5);
    std::string::size_type v12 = sub_216129E78(v11, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v18, a1);
    char v13 = sub_21615A07C(&v18);
    size_t v14 = strlen(v13);
    uint64_t v15 = sub_216129E78(v12, (uint64_t)v13, v14);
    sub_216129E78(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_216159D74(&v18);
    sub_216128E18(&v17);
  }
  return 0;
}

void sub_21613A868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

const char *sub_21613A890(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_216159D74(&v17);
  if (!v4) {
    return (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  }
  if ((int)sub_216157D08() <= 2)
  {
    char v16 = 0;
    std::string::size_type v5 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_216129E78(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_216129E78(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_216129E78(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_216129E78(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_216129E78(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    int v11 = sub_21615A07C(&v17);
    size_t v12 = strlen(v11);
    char v13 = sub_216129E78(v10, (uint64_t)v11, v12);
    size_t v14 = sub_216129E78(v13, (uint64_t)"\nReturns default value ", 23);
    sub_216129E78(v14, (uint64_t)"", 0);
    sub_216159D74(&v17);
    sub_216128E18(&v16);
  }
  return "";
}

void sub_21613AA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

float sub_21613AA60(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_216159D74(&v17);
  if (!v4) {
    return (*(float (**)(void *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  }
  float v5 = 0.0;
  if ((int)sub_216157D08() <= 2)
  {
    char v16 = 0;
    uint64_t v6 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_216129E78(v6, (uint64_t)"(", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    unsigned __int8 v8 = sub_216129E78(v7, (uint64_t)") ", 2);
    uint64_t v9 = sub_216129E78(v8, (uint64_t)"LOG(", 4);
    size_t v10 = sub_216129E78(v9, (uint64_t)"ERROR", 5);
    int v11 = sub_216129E78(v10, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    size_t v12 = sub_21615A07C(&v17);
    size_t v13 = strlen(v12);
    size_t v14 = sub_216129E78(v11, (uint64_t)v12, v13);
    sub_216129E78(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_216159D74(&v17);
    sub_216128E18(&v16);
  }
  return v5;
}

void sub_21613AC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_21613AC30(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_216159D74(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  }
  if ((int)sub_216157D08() <= 2)
  {
    char v15 = 0;
    float v5 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_216129E78(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_216129E78(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_216129E78(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_216129E78(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_216129E78(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_21615A07C(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_216129E78(v10, (uint64_t)v11, v12);
    sub_216129E78(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_216159D74(&v16);
    sub_216128E18(&v15);
  }
  return 0;
}

void sub_21613ADC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_21613ADF0(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_216159D74(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  }
  if ((int)sub_216157D08() <= 2)
  {
    char v15 = 0;
    float v5 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_216129E78(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_216129E78(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_216129E78(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_216129E78(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_216129E78(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_21615A07C(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_216129E78(v10, (uint64_t)v11, v12);
    sub_216129E78(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_216159D74(&v16);
    sub_216128E18(&v15);
  }
  return 0;
}

void sub_21613AF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_21613AFB0(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_216159D74(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  }
  if ((int)sub_216157D08() <= 2)
  {
    char v15 = 0;
    float v5 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_216129E78(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_216129E78(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_216129E78(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_216129E78(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_216129E78(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_21615A07C(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_216129E78(v10, (uint64_t)v11, v12);
    sub_216129E78(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_216159D74(&v16);
    sub_216128E18(&v15);
  }
  return 0;
}

void sub_21613B148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_21613B170(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_216159D74(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  }
  if ((int)sub_216157D08() <= 2)
  {
    char v15 = 0;
    float v5 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_216129E78(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_216129E78(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_216129E78(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_216129E78(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_216129E78(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_21615A07C(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_216129E78(v10, (uint64_t)v11, v12);
    sub_216129E78(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_216159D74(&v16);
    sub_216128E18(&v15);
  }
  return 0;
}

void sub_21613B308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_21613B330(uint64_t *a1)
{
  uint64_t v2 = sub_216126884(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_21613B3F0(uint64_t *a1)
{
  uint64_t v2 = sub_216126908(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_21613B4B0(uint64_t *a1)
{
  uint64_t v2 = sub_21612698C(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_21613B570(uint64_t *a1)
{
  uint64_t v2 = sub_216126A10(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_21613B630@<X0>(void **a1@<X0>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_216159D74(a3);
    if (a2)
    {
      sub_21613F024(a2);
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 200);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_216128C80((uint64_t)v10);
      sub_216129E78(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v10, (uint64_t)") [", 3);
      sub_216129E78(v10, (uint64_t)"pieces", 6);
      sub_216129E78(v10, (uint64_t)"] ", 2);
      sub_216129E78(v10, (uint64_t)"output container is null", 24);
      sub_21612650C(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v10[1] = MEMORY[0x263F8C318] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v12);
    }
  }
  return result;
}

void sub_21613B8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21613B8C8@<X0>(void **a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_216159D74(a3);
    if (a2)
    {
      a2[1] = *a2;
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 208);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_216128C80((uint64_t)v10);
      sub_216129E78(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_216129E78(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(v10, (uint64_t)") [", 3);
      sub_216129E78(v10, (uint64_t)"ids", 3);
      sub_216129E78(v10, (uint64_t)"] ", 2);
      sub_216129E78(v10, (uint64_t)"output container is null", 24);
      sub_21612650C(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v10[1] = MEMORY[0x263F8C318] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x2166CA750](&v12);
    }
  }
  return result;
}

void sub_21613BB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21613BB60(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 16);
    return v2();
  }
  return result;
}

uint64_t sub_21613BBD8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 24);
    return v2();
  }
  return result;
}

uint64_t sub_21613BC50(uint64_t a1)
{
  return a1;
}

void *sub_21613BC7C@<X0>(_DWORD *a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  size_t v13 = a1;
  unint64_t v14 = a2;
  if (a2 <= 0x13)
  {
    LODWORD(v9) = 13;
    uint64_t v6 = (void *)sub_216128C80((uint64_t)v10);
    sub_216129E78(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v10, (uint64_t)") [", 3);
    sub_216129E78(v10, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    sub_216129E78(v10, (uint64_t)"] ", 2);
    sub_21612650C((unsigned int *)&v9, (uint64_t)a3);
  }
  else if (*a1)
  {
    LODWORD(v9) = 13;
    float v5 = (void *)sub_216128C80((uint64_t)v10);
    sub_216129E78(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v10, (uint64_t)") [", 3);
    sub_216129E78(v10, (uint64_t)"header->sentinel == 0", 21);
    sub_216129E78(v10, (uint64_t)"] ", 2);
    sub_216129E78(v10, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sub_21612650C((unsigned int *)&v9, (uint64_t)a3);
  }
  else
  {
    uint64_t result = sub_216158150(&v13, 0x14uLL, a3);
    if (*a3) {
      return result;
    }
    sub_216159D74(a3);
    if (v14 >= a1[1]) {
      operator new();
    }
    LODWORD(v9) = 13;
    unsigned __int8 v8 = (void *)sub_216128C80((uint64_t)v10);
    sub_216129E78(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_216129E78(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v10, (uint64_t)") [", 3);
    sub_216129E78(v10, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    sub_216129E78(v10, (uint64_t)"] ", 2);
    sub_21612650C((unsigned int *)&v9, (uint64_t)a3);
  }
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x2166CA750](&v12);
}

void sub_21613C7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21612659C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21613C850()
{
}

void sub_21613C8AC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_21613C8D0(uint64_t a1)
{
  uint64_t v2 = a1 + 96;
  MEMORY[0x2166CA370](a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 96);
    uint64_t v3 = *(void *)(a1 + 104);
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 119);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v4(a1, v2, v3);
}

void sub_21613C958()
{
}

void sub_21613CA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21613CA9C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  sub_216142100(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0) {
      sub_21610A674(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else {
      __p[0] = *(std::__fs::filesystem::path *)a2;
    }
    if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v8 = __p;
    }
    else {
      unsigned __int8 v8 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
    }
    int v9 = open((const char *)v8, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
    int v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_52;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    char v11 = (void *)sub_216128C80((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_216129E78(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0) {
      size_t v13 = (unsigned char *)a2;
    }
    else {
      size_t v13 = *(unsigned char **)a2;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
LABEL_66:
    sub_2161422D0(&__p[0].__pn_.__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sub_21612650C((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x263F8C2C8];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166CA750](v29);
    return;
  }
  sub_216142148((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  sub_21614220C((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__pn_.__r_.__value_.__s.__data_[0] != 2) {
    goto LABEL_30;
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_21610A674(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v31;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = __p;
  }
  else {
    unint64_t v14 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  int v15 = open((const char *)v14, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
  int v16 = v15;
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    sub_216128C80((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    std::string::size_type size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v31;
    }
    else {
      uint64_t v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v31.__pn_.__r_.__value_.__l.__size_;
    }
    sub_2161422D0(&__p[0].__pn_.__r_.__value_.__l.__size_, v18, (unsigned char *)v18 + size, 0x22u, 0x5Cu);
    sub_21612650C((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x263F8C2C8];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    goto LABEL_37;
  }
  if (v15 < 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_21610A674(__p, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v30;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  }
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
    }
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      unint64_t v22 = (void *)sub_216128C80((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_216129E78(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        size_t v13 = (unsigned char *)a2;
      }
      else {
        size_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    else
    {
      st_std::string::size_type size = v32.st_size;
      *(void *)(a1 + 16) = v32.st_size;
      unint64_t v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(void *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sub_2161055D0(a4);
        return;
      }
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      uint64_t v23 = (void *)sub_216128C80((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_216129E78(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        size_t v13 = (unsigned char *)a2;
      }
      else {
        size_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
  sub_216128C80((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
  sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_216129E78(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0) {
    unint64_t v25 = (unsigned char *)a2;
  }
  else {
    unint64_t v25 = *(unsigned char **)a2;
  }
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 8);
  }
  sub_2161422D0(&__p[0].__pn_.__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sub_21612650C((unsigned int *)__p, (uint64_t)a4);
  __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x263F8C2C8];
  *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                            + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
  if (v28 < 0) {
    operator delete(v27);
  }
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](v29);
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_21613D3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 217) < 0) {
    operator delete(*(void **)(v14 - 240));
  }
  if (*(char *)(v14 - 193) < 0) {
    operator delete(*(void **)(v14 - 216));
  }
  _Unwind_Resume(exception_object);
}

void sub_21613D464()
{
}

void sub_21613D58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613D5A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 136))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613D60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613EFD0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21613D624@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613D688(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613D6A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 176))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613D708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613F3D0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21613D720@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 184))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613D784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613F444((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21613D79C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 192))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613D800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613EFD0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21613D818@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 200))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613D87C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613D898@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 208))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613D8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613F4F0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21613D914@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 216))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613D978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216129CCC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21613D990@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 152))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613D9F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613DA10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613DA74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613DA90@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 168))(&v3);
  return sub_216159D74(&v3);
}

void sub_21613DAF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float sub_21613DB10(uint64_t a1)
{
  float v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 224))(&v3);
  float v1 = v4;
  sub_216159D74(&v3);
  return v1;
}

void sub_21613DB74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v10 = &unk_26C6C42A8;
  uint64_t v12 = 0;
  size_t v13 = 0;
  char v11 = sub_21614B758();
  uint64_t v8 = sub_21612FD54(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v9, a1, a2, a3, v8);
  sub_216168660((uint64_t)v11, a4);
  sub_216159D74(&v9);
  int v10 = &unk_26C6C42A8;
  if (v13) {
    sub_2161121B0(v13);
  }
}

void sub_21613DC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_2161121B0(a14);
  }
  _Unwind_Resume(a1);
}

void sub_21613DC78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v14 = &unk_26C6C42A8;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v15 = sub_21614B758();
  uint64_t v12 = sub_21612FD54(&v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  sub_216168660((uint64_t)v15, a5);
  sub_216159D74(&v13);
  uint64_t v14 = &unk_26C6C42A8;
  if (v17) {
    sub_2161121B0(v17);
  }
}

void sub_21613DD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_2161121B0(a14);
  }
  _Unwind_Resume(a1);
}

void sub_21613DD94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = &unk_26C6C4308;
  uint64_t v10 = sub_21612FE74((uint64_t)v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v10);
  sub_21612FED8((uint64_t)v12, a5);
  sub_216159D74(&v11);
  v12[0] = &unk_26C6C4308;
  if (v13) {
    sub_2161121B0(v13);
  }
}

void sub_21613DE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_2161121B0(a12);
  }
  _Unwind_Resume(a1);
}

void sub_21613DE98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  v18[1] = 0;
  uint64_t v19 = 0;
  v18[0] = &unk_26C6C4308;
  uint64_t v16 = sub_21612FE74((uint64_t)v18);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_21612FED8((uint64_t)v18, a7);
  sub_216159D74(&v17);
  v18[0] = &unk_26C6C4308;
  if (v19) {
    sub_2161121B0(v19);
  }
}

void sub_21613DFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_2161121B0(a12);
  }
  _Unwind_Resume(a1);
}

void sub_21613DFCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_26C6C42A8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_21614B758();
  uint64_t v6 = sub_21612FD54(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v7, a1, a2, v6);
  sub_216168660((uint64_t)v9, a3);
  sub_216159D74(&v7);
  uint64_t v8 = &unk_26C6C42A8;
  if (v11) {
    sub_2161121B0(v11);
  }
}

void sub_21613E09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_2161121B0(a14);
  }
  _Unwind_Resume(a1);
}

void sub_21613E0C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_26C6C42A8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_21614B758();
  uint64_t v6 = sub_21612FD54(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v7, a1, a2, v6);
  sub_216168660((uint64_t)v9, a3);
  sub_216159D74(&v7);
  uint64_t v8 = &unk_26C6C42A8;
  if (v11) {
    sub_2161121B0(v11);
  }
}

void sub_21613E198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_2161121B0(a14);
  }
  _Unwind_Resume(a1);
}

void sub_21613E1C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_26C6C42A8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_21614B758();
  uint64_t v6 = sub_21612FD54(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v7, a1, a2, v6);
  sub_216168660((uint64_t)v9, a3);
  sub_216159D74(&v7);
  uint64_t v8 = &unk_26C6C42A8;
  if (v11) {
    sub_2161121B0(v11);
  }
}

void sub_21613E294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_2161121B0(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_21613E2C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = &unk_26C6C42A8;
  uint64_t v8 = sub_21614B758();
  a4[2] = 0;
  a4[3] = 0;
  a4[1] = v8;
  uint64_t v9 = sub_21612FD54(a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v11, a1, a2, a3, v9);
  return sub_216159D74(&v11);
}

void sub_21613E378(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_2161121B0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613E394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, float a6@<S0>)
{
  *a5 = &unk_26C6C42A8;
  uint64_t v12 = sub_21614B758();
  a5[2] = 0;
  a5[3] = 0;
  a5[1] = v12;
  uint64_t v13 = sub_21612FD54(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v15, a1, a2, a3, a4, v13, a6);
  return sub_216159D74(&v15);
}

void sub_21613E464(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_2161121B0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613E480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  a5[1] = 0;
  a5[2] = 0;
  *a5 = &unk_26C6C4308;
  uint64_t v9 = sub_21612FE74((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v9);
  return sub_216159D74(&v11);
}

void sub_21613E538(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_2161121B0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613E554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  a7[1] = 0;
  a7[2] = 0;
  *a7 = &unk_26C6C4308;
  uint64_t v15 = sub_21612FE74((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  return sub_216159D74(&v17);
}

void sub_21613E63C(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_2161121B0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613E658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_26C6C42A8;
  uint64_t v6 = sub_21614B758();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_21612FD54(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v9, a1, a2, v7);
  return sub_216159D74(&v9);
}

void sub_21613E708(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_2161121B0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613E724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_26C6C42A8;
  uint64_t v6 = sub_21614B758();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_21612FD54(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v9, a1, a2, v7);
  return sub_216159D74(&v9);
}

void sub_21613E7D4(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_2161121B0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21613E7F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_26C6C42A8;
  uint64_t v6 = sub_21614B758();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_21612FD54(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v9, a1, a2, v7);
  return sub_216159D74(&v9);
}

void sub_21613E8A0(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_2161121B0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21613E8BC(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    float v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    float v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_21613E97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21613E99C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    float v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    float v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_21613EA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21613EA7C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 112);
  return a1;
}

uint64_t sub_21613EB80(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    float v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    float v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_21613EC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_21613EC60(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  uint64_t v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v10 = 0;
  if (a5)
  {
    int v11 = a6;
    if (a3)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v14 = (unsigned __int8 *)(a2 + a3);
      uint64_t v15 = a1 + 2;
      while (2)
      {
        uint64_t v16 = &v10[a2];
        uint64_t v17 = &v10[a2];
LABEL_5:
        uint64_t v18 = a5;
        uint64_t v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14) {
              goto LABEL_5;
            }
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          unint64_t v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            unint64_t v21 = (unsigned __int8 *)(v20 - v10);
            BOOL v22 = v20 >= v10;
            if (!v11) {
              BOOL v22 = v20 > v10;
            }
            if (v22)
            {
              uint64_t v23 = (unsigned __int8 *)(a3 - (void)v10);
              if (v23 >= v21) {
                uint64_t v24 = v21;
              }
              else {
                uint64_t v24 = v23;
              }
              if ((unint64_t)v9 >= *v15)
              {
                uint64_t v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60) {
                  sub_21610CB04();
                }
                uint64_t v26 = *v15 - (void)*a1;
                uint64_t v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
                  uint64_t v27 = v25 + 1;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v28 = v27;
                }
                if (v28) {
                  int v29 = (char *)sub_21612AA90((uint64_t)v15, v28);
                }
                else {
                  int v29 = 0;
                }
                std::__fs::filesystem::path v30 = &v29[16 * v25];
                *(void *)std::__fs::filesystem::path v30 = v16;
                *((void *)v30 + 1) = v24;
                stat v32 = *a1;
                std::__fs::filesystem::path v31 = a1[1];
                unsigned int v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  std::__fs::filesystem::path v31 = *a1;
                }
                uint64_t v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31) {
                  operator delete(v31);
                }
                int v11 = a6;
                uint64_t v15 = a1 + 2;
              }
              else
              {
                *uint64_t v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            uint64_t v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1)) {
              continue;
            }
          }
        }
        break;
      }
    }
  }
LABEL_37:
  BOOL v34 = a3 > (unint64_t)v10;
  unint64_t v35 = a3 - (void)v10;
  if (v34)
  {
    uint64_t v36 = &v10[a2];
    unint64_t v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      uint64_t v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60) {
        sub_21610CB04();
      }
      uint64_t v40 = v37 - (void)*a1;
      uint64_t v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1)) {
        uint64_t v41 = v39 + 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v41;
      }
      if (v42) {
        BOOL v43 = (char *)sub_21612AA90((uint64_t)(a1 + 2), v42);
      }
      else {
        BOOL v43 = 0;
      }
      uint64_t v44 = &v43[16 * v39];
      uint64_t v45 = &v43[16 * v42];
      *(void *)uint64_t v44 = v36;
      *((void *)v44 + 1) = v35;
      uint64_t v38 = v44 + 16;
      size_t v47 = *a1;
      uint64_t v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        uint64_t v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      *uint64_t v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      uint64_t v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_21613EF08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21613EF2C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216129BA8(a1, a2);
    float v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21613EFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_21613EFD0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_21613F024((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_21613F024(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *sub_21613F074(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21612D97C(a1, a2);
    float v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_21613F0D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21613F0EC(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_21612F5FC(&__dst, __src, __len);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = *(char **)v6;
    int64_t v11 = *(void *)(v6 + 8);
    uint64_t v12 = *(const std::string::value_type **)(v6 + 16);
    std::string::size_type v13 = *(void *)(v6 + 24);
    uint64_t v18 = p_dst;
    std::string::size_type v19 = size;
    if (v11)
    {
      uint64_t v14 = sub_21613F284((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v15 = v14;
        uint64_t v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          uint64_t v16 = v15 + v11;
          uint64_t v15 = sub_21613F284((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      std::string::size_type size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_21613F254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21613F284(uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[1];
  if (v4 < a4) {
    return -1;
  }
  if (a3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (void *)(*a1 + a4);
    uint64_t v8 = (char *)(v6 + v4);
    uint64_t v9 = v6 + v4 - (void)v7;
    if (v9 >= a3)
    {
      int v13 = *a2;
      do
      {
        uint64_t v14 = v9 - a3;
        if (v14 == -1) {
          break;
        }
        uint64_t v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15) {
          break;
        }
        uint64_t v10 = v15;
        if (!memcmp(v15, a2, a3)) {
          goto LABEL_6;
        }
        uint64_t v7 = v10 + 1;
        uint64_t v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    uint64_t v10 = v8;
LABEL_6:
    if (v10 == v8) {
      return -1;
    }
    else {
      return (uint64_t)&v10[-v6];
    }
  }
  return a4;
}

void sub_21613F340(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21613F39C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2642668A8, MEMORY[0x263F8C068]);
}

void sub_21613F388(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_21613F39C(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void sub_21613F3D0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_21613EFD0(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21613F444(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_21613F498((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_21613F498(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_21613F4F0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        sub_21613EFD0(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_21613F564(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    uint64_t v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    size_t v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_21613F624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21613F644@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_21613F690(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_21613F67C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21613F690(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C6C95E8;
  sub_21614B5F4(a1 + 3, 0);
  return a1;
}

void sub_21613F6DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21613F6F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C95E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21613F710(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C95E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21613F764(uint64_t a1)
{
  return sub_21614B71C(a1 + 24);
}

void *sub_21613F770@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = sub_21613F7BC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_21613F7A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21613F7BC(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C6C9620;
  sub_21614C1B0(a1 + 3, 0);
  return a1;
}

void sub_21613F808(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21613F81C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21613F83C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9620;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21613F890(uint64_t a1)
{
  return sub_21614C26C(a1 + 24);
}

uint64_t sub_21613F89C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2161542AC();
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21613F8EC(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  sub_21612F5FC(&__dst, __src, __len);
  int v10 = *((char *)a3 + 23);
  if (v10 >= 0) {
    int64_t v11 = a3;
  }
  else {
    int64_t v11 = *a3;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = (size_t)a3[1];
  }
  sub_21613F9F0(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_21613F9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_21613F9F0(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  sub_21612F5FC(&__dst, __src, __len);
  size_t v8 = strlen(a3);
  sub_21613FAE4(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_21613FAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_21613FAE4(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  sub_21612F5FC(&__dst, __src, __len);
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    char v7 = a3;
  }
  else {
    char v7 = *a3;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v8 = (size_t)a3[1];
  }
  sub_21612F5FC(__p, v7, v8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v10 = v13;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_21613FB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21613FBD0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21613FC48((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21613FC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_21613FCE8((uint64_t)v12);
  return a6;
}

uint64_t sub_21613FCE8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21613FD20(a1);
  }
  return a1;
}

void sub_21613FD20(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_21613FD68(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21613FDA0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_21613FDF8(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_21613FE7C((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_21613FE64(_Unwind_Exception *a1)
{
  sub_21612A250(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_21613FE7C(uint64_t **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6 = sub_21613FF04(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_21612A650(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_21613FF04(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_21612A6A8((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_21612A6A8((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (void *)a2[1];
      do
      {
        long long v15 = v14;
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        long long v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_21612A6A8((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    size_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      size_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      size_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_21612A6A8((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_21612A5B0((uint64_t)a1, a3, a5);
}

void *sub_2161400B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = sub_21612A6A8(v5, (uint64_t)(v3 + 4), a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_21612A6A8(v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t sub_216140140(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12sub_21613F89C(&a9, 0) = 24;
  return a1;
}

void sub_2161403F0(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216140418(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](a1 + 128);
  return a1;
}

void *sub_216140550(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_21610A674((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_2161405A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2161405B0(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216129BFC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  BOOL v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_21613FBD0(a1, v15);
  uint64_t v13 = a1[1];
  sub_21613FD68((uint64_t)v15);
  return v13;
}

void sub_2161406C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613FD68((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2161406D4(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = sub_216140858((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_21614072C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216140734(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216129BFC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_216140858(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_216140A20(a1, v14);
  uint64_t v12 = a1[1];
  sub_216140BC0(v14);
  return v12;
}

void sub_216140844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140BC0((void **)va);
  _Unwind_Resume(a1);
}

char *sub_216140858(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216129BA8(result, a4);
    uint64_t result = sub_2161408E0((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_2161408C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_21613EFD0(&a9);
  _Unwind_Resume(a1);
}

char *sub_2161408E0(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_21610A674(v4, *(void **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2161409A0((uint64_t)v9);
  return v4;
}

void sub_21614098C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2161409A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2161409D8(a1);
  }
  return a1;
}

void sub_2161409D8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

uint64_t sub_216140A20(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216140A98((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216140A98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216140B3C((uint64_t)v11);
  return v9;
}

uint64_t sub_216140B3C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216140B74(a1);
  }
  return a1;
}

void sub_216140B74(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_21613EFD0(&v3);
    v1 += 3;
  }
}

void **sub_216140BC0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216140BF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_21613EFD0(&v5);
  }
}

void *sub_216140C48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_216140DB4(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_216140C94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216140C9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_216129BFC(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_216140DB4(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  sub_216140E30(a1, v14);
  uint64_t v12 = a1[1];
  sub_216140FCC((uint64_t)v14);
  return v12;
}

void sub_216140DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216140DB4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216112970(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216140E14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216140E30(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216140EA8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216140EA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216140F4C((uint64_t)v11);
  return v9;
}

uint64_t sub_216140F4C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216140F84(a1);
  }
  return a1;
}

void sub_216140F84(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_216140FCC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216141004(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_216141060(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2161410D8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2161410D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216141184((uint64_t)v11);
  return v9;
}

uint64_t sub_216141184(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2161411BC(a1);
  }
  return a1;
}

void sub_2161411BC(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_21613EFD0(&v3);
    v1 += 4;
  }
}

void **sub_216141208(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_21614123C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_21613EFD0(&v5);
  }
}

float sub_216141290(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_216140858((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_2161412FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216141304(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_216115A58(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_216140858(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_216141060(a1, v16);
  uint64_t v14 = a1[1];
  sub_216141208(v16);
  return v14;
}

void sub_216141400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216141208((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216141414(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21614148C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21614148C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216141538((uint64_t)v11);
  return v9;
}

uint64_t sub_216141538(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216141570(a1);
  }
  return a1;
}

void sub_216141570(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_2161415B8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2161415F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float sub_21614164C(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_216140DB4((void *)v5, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_2161416AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2161416B4(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_216115A58(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_216140DB4(v13, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_216141414(a1, v16);
  uint64_t v14 = a1[1];
  sub_2161415B8((uint64_t)v16);
  return v14;
}

void sub_2161417A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161415B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161417B8(uint64_t a1, float *a2, float *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_216141920((char *)a1, a2, a3, a3 - a2);
  sub_216141814((double **)a1);
  return a1;
}

void sub_2161417F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216141814(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      sub_216141998((uint64_t)a1);
    }
    else
    {
      uint64_t v4 = v2 - v1;
      double v5 = 0.0;
      unint64_t v6 = *a1;
      do
      {
        double v7 = *v6++;
        double v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        double *v1 = *v1 / v5;
        ++v1;
      }
      sub_216141A60(&v16, v4 - 1);
      long long v8 = *a1;
      uint64_t v9 = (uint64_t)(a1[1] - 1);
      uint64_t v10 = v16;
      if (*a1 != (double *)v9)
      {
        unint64_t v11 = v8 + 1;
        double v12 = *v8;
        *uint64_t v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          long long v13 = v10 + 1;
          do
          {
            double v14 = *v11++;
            double v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      long long v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      uint64_t v16 = v8;
      *((void *)&v17 + 1) = v15;
      if (v8)
      {
        *(void *)&long long v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *sub_216141920(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = sub_216112B2C(result, a4);
    double v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_21614197C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216141998(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  double v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  double v7 = (char *)sub_2160FFAA8(v2, v6);
  uint64_t v4 = *(char **)a1;
  float v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  unint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void *sub_216141A60(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112B2C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216141ABC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216141AD8(uint64_t a1, uint64_t a2, double **a3)
{
  double v5 = *a3;
  unint64_t v6 = a3[1];
  unsigned int v7 = sub_216141B90(a2);
  unsigned int v8 = sub_216141B90(a2);
  if (v6 != v5)
  {
    unint64_t v9 = v6 - v5;
    do
    {
      unint64_t v10 = v9 >> 1;
      unint64_t v11 = &v5[v9 >> 1];
      double v13 = *v11;
      uint64_t v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13) {
        unint64_t v9 = v10;
      }
      else {
        double v5 = v12;
      }
    }
    while (v9);
    unint64_t v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t sub_216141B90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_216141C30()
{
  sub_216128C80((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166CA750](&v3);
}

void sub_216141D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613EA7C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216141D78(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  double v14 = a1 + 2;
  if (v6) {
    unsigned int v7 = (char *)sub_216129BFC((uint64_t)(a1 + 2), v6);
  }
  else {
    unsigned int v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[24 * v3];
  double v13 = &v7[24 * v6];
  sub_216141E88(a1 + 16, v11, a2);
  uint64_t v12 = v11 + 24;
  sub_21613FBD0(a1, &v10);
  uint64_t v8 = a1[1];
  sub_21613FD68((uint64_t)&v10);
  return v8;
}

void sub_216141E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613FD68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216141E88(int a1, unsigned char *__dst, uint64_t a3)
{
  unint64_t v3 = __dst;
  size_t v4 = *(void *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  double v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *unint64_t v3 = v8;
    unint64_t v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((unsigned char *)v3 + v4) = 0;
}

uint64_t sub_216141F24(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v2) {
      unint64_t v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)(a2 + 8);
    double v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v4) {
      double v5 = (void *)*v5;
    }
    if (v3 == v5) {
      return (uint64_t)sub_21614B338(a1, a2);
    }
    else {
      return sub_216167B98(a1, a2);
    }
  }
  return a1;
}

uint64_t sub_216141F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_216141FEC((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_216141FD4(_Unwind_Exception *a1)
{
  sub_21612A250(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_216141FEC(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_21613FF04(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_21612A650(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_216142080(void *a1)
{
  sub_2161420B8(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_2161420B8(void *a1)
{
  *a1 = &unk_26C6C4498;
  sub_216142100((uint64_t)a1);
  return a1;
}

void *sub_216142100(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  float result = *(void **)(a1 + 8);
  if (result) {
    float result = (void *)munmap(result, *(void *)(a1 + 16));
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

double sub_216142148@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

double sub_21614220C@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void *sub_2161422D0(void *a1, unsigned char *a2, unsigned char *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    int v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v1sub_21613F89C(&a9, 0) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v15;
  }
  else {
    uint64_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  double v13 = sub_216129E78(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_2161423B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2161423D4(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  std::__fs::filesystem::path::__string_view v3 = *a2;
  uint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  sub_216142434(this, v3, v4);
  return this;
}

void sub_216142418(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_216142434(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    int v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    int v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    double v14 = this;
    if ((v6 & 0x80) != 0) {
      double v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }
    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_2161425AC(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_216142590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161425AC(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21610A714();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void sub_216142654()
{
}

uint64_t sub_216142680(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C46F8;
  sub_216148E8C((void *)(a1 + 96));
  uint64_t v4 = (void **)(a1 + 72);
  sub_21613F444(&v4);
  uint64_t v4 = (void **)(a1 + 48);
  sub_21613F444(&v4);
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216142704(uint64_t a1)
{
  sub_216142680(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21614273C(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x30uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_2161428C0(void *a1)
{
  sub_21613F498(a1 + 6);
  sub_21613F498(a1 + 9);
  a1[1] = "";
  a1[2] = 0;
  a1[4] = a1[3];

  sub_216142918((uint64_t)(a1 + 12));
}

void sub_216142918(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  }
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(void *)(a1 + 8) + v4), 48 * *(void *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
}

void sub_216142994(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  sub_2161428C0((void *)a1);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  unint64_t v6 = (char **)(a1 + 24);
  sub_21612F414((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    unint64_t v7 = (void *)(a1 + 40);
    uint64_t v8 = *(void **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_21639FB8C[(unint64_t)*a2 >> 4]) {
        int v9 = asc_21639FB8C[(unint64_t)*a2 >> 4];
      }
      else {
        int v9 = a3;
      }
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          goto LABEL_76;
        }
        uint64_t v11 = *v7 - (void)*v6;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          double v14 = (char *)sub_2160FFAA8(a1 + 40, v13);
        }
        else {
          double v14 = 0;
        }
        std::string v15 = &v14[8 * v10];
        *(void *)std::string v15 = a2;
        uint64_t v8 = v15 + 8;
        std::string::size_type v17 = *(char **)(a1 + 24);
        char v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          char v16 = *v6;
        }
        *(void *)(a1 + 24) = v15;
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 4sub_21613F89C(&a9, 0) = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *v8++ = a2;
      }
      *(void *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
  }
  unint64_t v19 = *(void *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    uint64_t v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
LABEL_76:
    }
      sub_21610CB04();
    uint64_t v22 = v19 - (void)*v6;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)sub_2160FFAA8(a1 + 40, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = &v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *(void *)uint64_t v26 = a2;
    unsigned __int8 v20 = v26 + 8;
    int v29 = *(char **)(a1 + 24);
    unint64_t v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *((void *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      unint64_t v28 = *v6;
    }
    *(void *)(a1 + 24) = v26;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 4sub_21613F89C(&a9, 0) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *uint64_t v8 = a2;
    unsigned __int8 v20 = v8 + 1;
  }
  *(void *)(a1 + 32) = v20;
  int v31 = (((unint64_t)v20 - *(void *)(a1 + 24)) >> 3) - 1;
  unsigned int v32 = v31 & ~(v31 >> 31);
  sub_216142DD4((uint64_t *)(a1 + 48), v32 + 1);
  sub_216142DD4((uint64_t *)(a1 + 72), v32 + 1);
  uint64_t v33 = 0;
  do
  {
    sub_21612F414((void **)(*(void *)(a1 + 48) + v33), 0x10uLL);
    sub_21612F414((void **)(*(void *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  BOOL v34 = (_DWORD *)sub_21614273C((void *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  unint64_t v35 = *(void ***)(a1 + 72);
  uint64_t v36 = v35[1];
  unint64_t v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    uint64_t v39 = ((char *)v36 - (unsigned char *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v40 = v37 - (void)*v35;
    uint64_t v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
      uint64_t v41 = v39 + 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42) {
      BOOL v43 = (char *)sub_2160FFAA8((uint64_t)(v35 + 2), v42);
    }
    else {
      BOOL v43 = 0;
    }
    uint64_t v44 = &v43[8 * v39];
    uint64_t v45 = &v43[8 * v42];
    *(void *)uint64_t v44 = v34;
    uint64_t v38 = v44 + 8;
    size_t v47 = (char *)*v35;
    uint64_t v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        uint64_t v48 = *((void *)v46 - 1);
        v46 -= 8;
        *((void *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      uint64_t v46 = (char *)*v35;
    }
    *unint64_t v35 = v44;
    v35[1] = v38;
    uint64_t v35[2] = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *uint64_t v36 = v34;
    uint64_t v38 = v36 + 1;
  }
  v35[1] = v38;
  BOOL v49 = (_DWORD *)sub_21614273C((void *)(a1 + 96));
  uint64_t v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  uint64_t v51 = (void **)(*(void *)(a1 + 48) + 24 * v32);
  uint64_t v52 = v51 + 1;
  size_t v53 = v51[1];
  unint64_t v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v56 = ((char *)v53 - (unsigned char *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v57 = v54 - (void)*v51;
    uint64_t v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
      uint64_t v58 = v56 + 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v58;
    }
    if (v59) {
      uint64_t v60 = (char *)sub_2160FFAA8((uint64_t)(v51 + 2), v59);
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = &v60[8 * v56];
    long long v62 = &v60[8 * v59];
    *(void *)uint64_t v61 = v50;
    int v55 = v61 + 8;
    uint64_t v63 = (char *)*v52;
    BOOL v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        uint64_t v65 = *((void *)v63 - 1);
        v63 -= 8;
        *((void *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      uint64_t v63 = (char *)*v51;
    }
    *uint64_t v51 = v61;
    *uint64_t v52 = v55;
    v51[2] = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    void *v53 = v49;
    int v55 = v53 + 1;
  }
  *uint64_t v52 = v55;
}

void sub_216142DD4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_216148F1C(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_216142E7C(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_21614273C((void *)(a1 + 96));
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 2sub_21613F89C(&a9, 0) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * (a3 + a2));
  uint64_t v11 = *(void *)(v9 + 8 * a2);
  *(void *)uint64_t v6 = v11;
  *(void *)(v6 + 8) = (int)v10 - (int)v11;
  uint64_t v12 = (uint64_t **)(*(void *)(a1 + 48) + 24 * a2);
  unint64_t v13 = (void **)(v12 + 1);
  double v14 = v12[1];
  char v16 = (char **)(v12 + 2);
  unint64_t v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    uint64_t v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v19 = v15 - (void)*v12;
    uint64_t v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
      uint64_t v20 = v18 + 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      uint64_t v22 = (char *)sub_2160FFAA8((uint64_t)v16, v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (uint64_t *)&v22[8 * v18];
    unint64_t v24 = &v22[8 * v21];
    *uint64_t v23 = v7;
    std::string::size_type v17 = v23 + 1;
    uint64_t v25 = (char *)*v13;
    uint64_t v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v27;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*v12;
    }
    *uint64_t v12 = v23;
    *unint64_t v13 = v17;
    *char v16 = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *double v14 = v6;
    std::string::size_type v17 = v14 + 1;
  }
  *unint64_t v13 = v17;
  unint64_t v28 = (void **)(*(void *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  int v29 = v28 + 1;
  uint64_t v30 = (uint64_t *)v28[1];
  unint64_t v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    uint64_t v33 = ((char *)v30 - (unsigned char *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v34 = v31 - (void)*v28;
    uint64_t v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
      uint64_t v35 = v33 + 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36) {
      unint64_t v37 = (char *)sub_2160FFAA8((uint64_t)(v28 + 2), v36);
    }
    else {
      unint64_t v37 = 0;
    }
    uint64_t v38 = (uint64_t *)&v37[8 * v33];
    uint64_t v39 = &v37[8 * v36];
    uint64_t *v38 = v7;
    unsigned int v32 = v38 + 1;
    uint64_t v40 = (char *)*v29;
    uint64_t v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        uint64_t v42 = *((void *)v40 - 1);
        v40 -= 8;
        *--uint64_t v38 = v42;
      }
      while (v40 != v41);
      uint64_t v40 = (char *)*v28;
    }
    *unint64_t v28 = v38;
    *int v29 = v32;
    v28[2] = v39;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    *uint64_t v30 = v7;
    unsigned int v32 = v30 + 1;
  }
  *int v29 = v32;
  return v7;
}

void sub_2161430A4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  int v4 = ((a1[4] - a1[3]) >> 3) - 1;
  unsigned int v5 = v4 & ~(v4 >> 31);
  uint64_t v6 = a1[6];
  while (1)
  {
    uint64_t v7 = (uint64_t **)(v6 + 24 * v3);
    int v8 = *v7;
    uint64_t v9 = v7[1];
    if (v8 != v9) {
      break;
    }
LABEL_14:
    if (++v3 == v5 + 1)
    {
      std::string __p = 0;
      uint64_t v46 = 0;
      size_t v47 = 0;
      uint64_t v21 = **(void **)(v6 + 24 * v5);
      int v22 = *(_DWORD *)(v21 + 36);
      uint64_t v23 = *(void *)(v21 + 40);
      if (*(void *)(v23 + 40))
      {
        unint64_t v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            uint64_t v25 = (v24 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61) {
              sub_21610CB04();
            }
            unint64_t v26 = (v47 - (unsigned char *)__p) >> 2;
            if (v26 <= v25 + 1) {
              unint64_t v26 = v25 + 1;
            }
            if ((unint64_t)(v47 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27) {
              unint64_t v28 = (char *)sub_2160FFAA8((uint64_t)&v47, v27);
            }
            else {
              unint64_t v28 = 0;
            }
            int v29 = &v28[8 * v25];
            *(void *)int v29 = v23;
            unint64_t v24 = v29 + 8;
            unint64_t v31 = (char *)__p;
            uint64_t v30 = v46;
            if (v46 != __p)
            {
              do
              {
                uint64_t v32 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              uint64_t v30 = (char *)__p;
            }
            std::string __p = v29;
            uint64_t v46 = v24;
            size_t v47 = &v28[8 * v27];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)unint64_t v24 = v23;
            v24 += 8;
          }
          uint64_t v46 = v24;
          uint64_t v23 = *(void *)(v23 + 40);
        }
        while (*(void *)(v23 + 40));
        uint64_t v33 = __p;
        uint64_t v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          unint64_t v36 = (char *)__p + 8;
          do
          {
            uint64_t v37 = *((void *)v36 - 1);
            *((void *)v36 - 1) = *(void *)v34;
            *(void *)uint64_t v34 = v37;
            v34 -= 8;
            BOOL v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          uint64_t v33 = __p;
          unint64_t v24 = v46;
        }
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v33 = 0;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_216148494((void *)a2, v33, (uint64_t)v24, (v24 - (unsigned char *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        uint64_t v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  uint64_t v10 = (uint64_t **)(a1[9] + 24 * v3);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  while (1)
  {
    uint64_t v13 = *v8;
    *(void *)(*v8 + 4sub_21613F89C(&a9, 0) = 0;
    if (v11 == v12) {
      break;
    }
    uint64_t v14 = 0;
    float v15 = 0.0;
    char v16 = v11;
    do
    {
      uint64_t v18 = *v16++;
      uint64_t v17 = v18;
      float v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        float v15 = v19;
        uint64_t v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14) {
      break;
    }
    *(void *)(v13 + 4sub_21613F89C(&a9, 0) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9) {
      goto LABEL_14;
    }
  }
  if ((int)sub_216157D08() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v39 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
    sub_216129E78(v39, (uint64_t)"(", 1);
    uint64_t v40 = (void *)std::ostream::operator<<();
    uint64_t v41 = sub_216129E78(v40, (uint64_t)") ", 2);
    uint64_t v42 = sub_216129E78(v41, (uint64_t)"LOG(", 4);
    BOOL v43 = sub_216129E78(v42, (uint64_t)"ERROR", 5);
    uint64_t v44 = sub_216129E78(v43, (uint64_t)") ", 2);
    sub_216129E78(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sub_216128E18(&__p);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
}

void sub_2161433A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161433D4(void *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  int v6 = ((a1[4] - a1[3]) >> 3) - 1;
  int v7 = v6 & ~(v6 >> 31);
  unint64_t v8 = a1[16] + a1[17] * a1[18];
  int v29 = 0;
  uint64_t v25 = a2;
  sub_21611494C(a2, v8, &v29);
  uint64_t v9 = 0;
  uint64_t v28 = a1[6];
  unint64_t v26 = a1;
  uint64_t v27 = (v7 + 1);
  do
  {
    uint64_t v10 = (uint64_t *)(v28 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 != v12)
    {
      uint64_t v13 = v26[9] + 24 * v9;
      float v15 = *(void **)v13;
      uint64_t v14 = *(void **)(v13 + 8);
      uint64_t v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          uint64_t v17 = *(unsigned int *)(*(void *)v11 + 24);
          uint64_t v18 = *v15;
          float v19 = *(float *)(v16 + 4 * v17);
          uint64_t v20 = v15;
          do
          {
            float v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19) {
                float v22 = v19;
              }
              else {
                float v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
              }
              if (v19 >= v21) {
                float v21 = v19;
              }
              if (v21 <= (float)(v22 + 50.0))
              {
                double v23 = v21;
                long double v24 = exp((float)(v22 - v21));
                float v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            float v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sub_21614355C(void *a1, float a2)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v6 = a1[16] + a1[17] * a1[18];
  LODWORD(__p[0]) = 0;
  sub_21611494C(v29, v6, __p);
  sub_2161433D4(a1, (uint64_t *)__p, a2);
  uint64_t v7 = 0;
  uint64_t v27 = a1[6];
  unsigned int v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  unint64_t v26 = a1;
  do
  {
    unint64_t v8 = (uint64_t *)(v27 + 24 * v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      uint64_t v11 = (uint64_t **)(v26[9] + 24 * v7);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = (float *)__p[0];
      float v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          uint64_t v16 = *(unsigned int *)(*(void *)v9 + 24);
          float v17 = v15[v16];
          uint64_t v18 = v12;
          do
          {
            uint64_t v19 = *v18++;
            uint64_t v20 = *(unsigned int *)(v19 + 24);
            float v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            float v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  float v22 = v29[0];
  float v23 = *((float *)v29[0] + *(unsigned int *)(**(void **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (float v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_216143700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21614371C(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  if (a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      sub_2161430A4(a1, (uint64_t)&v171);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *(void *)v157 = a4;
      v157[8] = 0;
      int v145 = operator new(0x20uLL);
      *a4 = (uint64_t)v145;
      a4[1] = (uint64_t)v145;
      a4[2] = (uint64_t)v145 + 32;
      a4[1] = sub_2161491D8((uint64_t)(a4 + 2), (uint64_t)&v171, (uint64_t)&v173[1], (uint64_t)v145);
      if (v171)
      {
        *(void *)&long long v172 = v171;
        operator delete(v171);
      }
      return;
    }
  }
  else if (!a2)
  {
    if ((int)sub_216157D08() <= 1)
    {
      LOBYTE(v171) = 0;
      uint64_t v9 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
      sub_216129E78(v9, (uint64_t)"(", 1);
      uint64_t v10 = (void *)std::ostream::operator<<();
      uint64_t v11 = sub_216129E78(v10, (uint64_t)") ", 2);
      uint64_t v12 = sub_216129E78(v11, (uint64_t)"LOG(", 4);
      uint64_t v13 = sub_216129E78(v12, (uint64_t)"WARNING", 7);
      uint64_t v14 = sub_216129E78(v13, (uint64_t)") ", 2);
      sub_216129E78(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sub_216128E18(&v171);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  long long v172 = 0u;
  memset(v173, 0, sizeof(v173));
  uint64_t v171 = &unk_26C6C45A8;
  uint64_t v174 = 512;
  long long v168 = 0uLL;
  uint64_t v169 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v15 = sub_216144908(&v171);
  uint64_t v167 = v15;
  int v16 = ((a1[4] - a1[3]) >> 3) - 1;
  *(void *)uint64_t v15 = **(void **)(a1[6] + 24 * (v16 & ~(v16 >> 31)));
  *(void *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 2sub_21613F89C(&a9, 0) = 0;
  unint64_t v17 = a1[16] + a1[17] * a1[18];
  *(_DWORD *)v157 = 0;
  sub_21611494C(__p, v17, v157);
  if (a3)
  {
    sub_2161433D4(a1, (uint64_t *)v157, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v157;
    std::string __p[2] = *(void **)&v157[16];
    uint64_t v18 = sub_216157E60();
    unsigned int v19 = sub_216141B90(v18);
    float v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    float v21 = -logf(-v20);
  }
  else
  {
    sub_2161430A4(a1, (uint64_t)v165);
    if (v165[0])
    {
      v165[1] = v165[0];
      operator delete(v165[0]);
    }
    float v21 = *(float *)(*(void *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  sub_216144A78((uint64_t *)&v168, &v167);
  int v146 = 0;
  char v147 = 0;
  if (10 * (int)a2 >= 512) {
    int v22 = 512;
  }
  else {
    int v22 = 10 * a2;
  }
  if (v22 <= 1) {
    int v23 = 1;
  }
  else {
    int v23 = v22;
  }
  int v148 = v23;
  while (1)
  {
    long long v24 = v168;
    if ((void)v168 == *((void *)&v168 + 1)) {
      break;
    }
    unsigned int v25 = *(uint64_t **)v168;
    if ((uint64_t)(*((void *)&v168 + 1) - v168) >= 9)
    {
      uint64_t v26 = 0;
      uint64_t v27 = (uint64_t)(*((void *)&v168 + 1) - v168) >> 3;
      uint64_t v28 = (void *)v168;
      do
      {
        int v29 = v28;
        v28 += v26 + 1;
        uint64_t v30 = 2 * v26;
        uint64_t v26 = (2 * v26) | 1;
        uint64_t v31 = v30 + 2;
        if (v31 < v27 && *(float *)(*v28 + 16) < *(float *)(v28[1] + 16))
        {
          ++v28;
          uint64_t v26 = v31;
        }
        *int v29 = *v28;
      }
      while (v26 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      if (v28 == (void *)(*((void *)&v24 + 1) - 8))
      {
        *uint64_t v28 = v25;
      }
      else
      {
        *uint64_t v28 = **((void **)&v24 + 1);
        **((void **)&v24 + 1) = v25;
        sub_216149304(v24, (uint64_t)(v28 + 1), (uint64_t)((uint64_t)v28 - v24 + 8) >> 3);
      }
    }
    *((void *)&v168 + 1) -= 8;
    uint64_t v32 = *v25;
    uint64_t v33 = (void **)a1[9];
    if (*v25 == **v33)
    {
      sub_216144B8C(a4, ((a4[1] - *a4) >> 5) + 1);
      for (uint64_t i = (void *)v25[1]; i[1]; uint64_t i = (void *)i[1])
      {
        uint64_t v35 = a4[1];
        unint64_t v36 = *(void **)(v35 - 24);
        unint64_t v37 = *(void *)(v35 - 16);
        if ((unint64_t)v36 >= v37)
        {
          uint64_t v39 = *(void *)(v35 - 32);
          uint64_t v40 = ((uint64_t)v36 - v39) >> 3;
          if ((unint64_t)(v40 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v41 = v37 - v39;
          uint64_t v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
            uint64_t v42 = v40 + 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            uint64_t v44 = (char *)sub_2160FFAA8(v35 - 16, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v45 = &v44[8 * v40];
          *(void *)uint64_t v45 = *i;
          BOOL v38 = v45 + 8;
          size_t v47 = *(char **)(v35 - 32);
          uint64_t v46 = *(char **)(v35 - 24);
          if (v46 != v47)
          {
            do
            {
              uint64_t v48 = *((void *)v46 - 1);
              v46 -= 8;
              *((void *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != v47);
            uint64_t v46 = *(char **)(v35 - 32);
          }
          *(void *)(v35 - 32) = v45;
          *(void *)(v35 - 24) = v38;
          *(void *)(v35 - 16) = &v44[8 * v43];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *unint64_t v36 = *i;
          BOOL v38 = v36 + 1;
        }
        *(void *)(v35 - 24) = v38;
      }
      uint64_t v49 = a4[1];
      *(_DWORD *)(v49 - 8) = *((_DWORD *)v25 + 4);
      if (a2 == (v49 - *a4) >> 5) {
        break;
      }
    }
    else
    {
      unint64_t v50 = (int)(v33[3 * *(int *)(v32 + 16) + 1] - v33[3 * *(int *)(v32 + 16)]);
      *(_DWORD *)v157 = 0;
      sub_21611494C(v164, v50, v157);
      *(_DWORD *)v157 = 0;
      sub_21611494C(v163, v50, v157);
      *(void *)v157 = 0;
      sub_2161495E4(&v161, v50, v157);
      int v51 = *(_DWORD *)(v32 + 16);
      uint64_t v52 = a1[9];
      if (a3)
      {
        uint64_t v53 = *(void *)(v52 + 24 * v51);
        float v54 = -100000000.0;
        if (*(void *)(v52 + 24 * v51 + 8) != v53)
        {
          unint64_t v55 = 0;
          float v56 = *((float *)__p[0] + *(unsigned int *)(v32 + 24));
          float v54 = -100000000.0;
          do
          {
            float v57 = (float)((float)(*((float *)v25 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(void *)(v53 + 8 * v55) + 24)))
                        + (float)(a5 * *(float *)(*(void *)(v53 + 8 * v55) + 32)))
                - v56;
            *((float *)v164[0] + v55) = v57;
            uint64_t v58 = sub_216157E60();
            unsigned int v59 = sub_216141B90(v58);
            float v60 = logf((float)((float)((float)v59 * 2.3283e-10) + 0.0) + 0.0000001);
            float v61 = v57 - logf(-v60);
            *((float *)v163[0] + v55) = v61;
            if (v61 > v54) {
              float v54 = v61;
            }
            ++v55;
            int v62 = *(_DWORD *)(v32 + 16);
            uint64_t v52 = a1[9];
            uint64_t v53 = *(void *)(v52 + 24 * v62);
          }
          while (v55 < (*(void *)(v52 + 24 * v62 + 8) - v53) >> 3);
          int v51 = *(_DWORD *)(v32 + 16);
        }
        uint64_t v63 = (double *)v161;
        if (v162 != v161)
        {
          float v64 = *((float *)v25 + 4);
          uint64_t v65 = (float *)v163[0];
          if ((unint64_t)((v162 - (unsigned char *)v161) >> 3) <= 1) {
            uint64_t v5 = 1;
          }
          else {
            uint64_t v5 = (v162 - (unsigned char *)v161) >> 3;
          }
          do
          {
            float v66 = *v65++;
            float v67 = expf(v66 - v54);
            float v68 = (float)(v64 - v66) + log1pf(-v67);
            float v69 = v64 - fmaxf(v68, 0.0);
            float v70 = expf(-fabsf(v68));
            *v63++ = (float)(v69 - log1pf(v70));
            --v5;
          }
          while (v5);
        }
      }
      uint64_t v71 = *(void *)(v52 + 24 * v51);
      if (*(void *)(v52 + 24 * v51 + 8) != v71)
      {
        unint64_t v72 = 0;
        do
        {
          uint64_t v73 = *(void *)(v71 + 8 * v72);
          uint64_t v74 = sub_216144908(&v171);
          *(void *)v157 = v74;
          *(void *)uint64_t v74 = v73;
          if (a3)
          {
            *(_DWORD *)(v74 + 2sub_21613F89C(&a9, 0) = *((_DWORD *)v164[0] + v72);
            float v75 = *((double *)v161 + v72);
          }
          else
          {
            *(float *)(v74 + 2sub_21613F89C(&a9, 0) = *(float *)(v73 + 32) + *((float *)v25 + 5);
            float v75 = *(float *)(v73 + 36) + *((float *)v25 + 5);
          }
          *(float *)(v74 + 16) = v75;
          *(void *)(v74 + 8) = v25;
          sub_216144A78((uint64_t *)&v168, v157);
          ++v72;
          uint64_t v71 = *(void *)(a1[9] + 24 * *(int *)(v32 + 16));
        }
        while (v72 < (*(void *)(a1[9] + 24 * *(int *)(v32 + 16) + 8) - v71) >> 3);
      }
      if (!(((unint64_t)(v173[1] + v173[2] * v174) < 0x3B9ACA00) | v147 & 1))
      {
        if ((int)sub_216157D08() <= 1)
        {
          v157[0] = 0;
          uint64_t v76 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
          sub_216129E78(v76, (uint64_t)"(", 1);
          long long v77 = (void *)std::ostream::operator<<();
          uint64_t v78 = sub_216129E78(v77, (uint64_t)") ", 2);
          uint64_t v79 = sub_216129E78(v78, (uint64_t)"LOG(", 4);
          size_t v80 = sub_216129E78(v79, (uint64_t)"WARNING", 7);
          uint64_t v81 = sub_216129E78(v80, (uint64_t)") ", 2);
          sub_216129E78(v81, (uint64_t)"Allocator size exceeds ", 23);
          std::string::size_type v82 = (void *)std::ostream::operator<<();
          sub_216129E78(v82, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sub_216128E18(v157);
        }
        char v147 = 1;
      }
      uint64_t v83 = *((void *)&v168 + 1);
      uint64_t v84 = (void *)v168;
      if (*((void *)&v168 + 1) - (void)v168 >= 0x13879uLL)
      {
        long long v159 = 0uLL;
        uint64_t v160 = 0;
        memset(&v157[8], 0, 40);
        *(void *)v157 = &unk_26C6C45A8;
        uint64_t v158 = 512;
        *(_OWORD *)uint64_t v154 = 0u;
        long long v155 = 0u;
        float v156 = 1.0;
        ++v146;
        if ((int)sub_216157D08() <= 1)
        {
          LOBYTE(v17sub_21613F89C(&a9, 0) = 0;
          unint64_t v85 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
          sub_216129E78(v85, (uint64_t)"(", 1);
          int v86 = (void *)std::ostream::operator<<();
          unsigned int v87 = sub_216129E78(v86, (uint64_t)") ", 2);
          std::string::size_type v88 = sub_216129E78(v87, (uint64_t)"LOG(", 4);
          int v89 = sub_216129E78(v88, (uint64_t)"WARNING", 7);
          long long v90 = sub_216129E78(v89, (uint64_t)") ", 2);
          sub_216129E78(v90, (uint64_t)"Too big agenda size ", 20);
          uint64_t v91 = (void *)std::ostream::operator<<();
          sub_216129E78(v91, (uint64_t)". Shrinking (round ", 19);
          int v92 = (void *)std::ostream::operator<<();
          sub_216129E78(v92, (uint64_t)") down to ", 10);
          uint64_t v93 = (void *)std::ostream::operator<<();
          sub_216129E78(v93, (uint64_t)".", 1);
          sub_216128E18(&v170);
        }
        if (10 * (int)a2 >= 1)
        {
          int v94 = 0;
          while (1)
          {
            v149 = (void *)v168;
            uint64_t v150 = v83;
            unint64_t v95 = *(void *)v168;
            uint64_t v153 = 0;
            uint64_t v170 = 0;
            if (!v95) {
              goto LABEL_181;
            }
            int v96 = &v170;
            unint64_t v97 = (unint64_t)v154[1];
            do
            {
              unint64_t v98 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
              unint64_t v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v98 >> 47) ^ v98);
              unint64_t v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
              if (v97)
              {
                uint8x8_t v101 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  unint64_t v102 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
                  if (v100 >= v97) {
                    unint64_t v102 = v100 % v97;
                  }
                }
                else
                {
                  unint64_t v102 = v100 & (v97 - 1);
                }
                uint64_t v103 = (void *)*((void *)v154[0] + v102);
                if (v103)
                {
                  for (int j = (void *)*v103; j; int j = (void *)*j)
                  {
                    unint64_t v105 = j[1];
                    if (v105 == v100)
                    {
                      if (j[2] == v95)
                      {
                        *int v96 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v105 >= v97) {
                          v105 %= v97;
                        }
                      }
                      else
                      {
                        v105 &= v97 - 1;
                      }
                      if (v105 != v102) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v106 = sub_216144908(v157);
              long long v107 = *(_OWORD *)v95;
              *(void *)(v106 + 16) = *(void *)(v95 + 16);
              *(_OWORD *)uint64_t v106 = v107;
              *int v96 = v106;
              unint64_t v97 = (unint64_t)v154[1];
              if (v154[1])
              {
                uint8x8_t v108 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
                v108.i16[0] = vaddlv_u8(v108);
                if (v108.u32[0] > 1uLL)
                {
                  uint64_t v5 = v100;
                  if ((void *)v100 >= v154[1]) {
                    uint64_t v5 = v100 % (unint64_t)v154[1];
                  }
                }
                else
                {
                  uint64_t v5 = ((unint64_t)v154[1] - 1) & v100;
                }
                uint64_t v109 = (void *)*((void *)v154[0] + v5);
                if (v109)
                {
                  for (k = (void *)*v109; k; k = (void *)*k)
                  {
                    unint64_t v111 = k[1];
                    if (v111 == v100)
                    {
                      if (k[2] == v95) {
                        goto LABEL_170;
                      }
                    }
                    else
                    {
                      if (v108.u32[0] > 1uLL)
                      {
                        if ((void *)v111 >= v154[1]) {
                          v111 %= (unint64_t)v154[1];
                        }
                      }
                      else
                      {
                        v111 &= (unint64_t)v154[1] - 1;
                      }
                      if (v111 != v5) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v112 = operator new(0x20uLL);
              *uint64_t v112 = 0;
              v112[1] = v100;
              v112[2] = v95;
              v112[3] = v106;
              float v113 = (float)(unint64_t)(*((void *)&v155 + 1) + 1);
              if (!v97 || (float)(v156 * (float)v97) < v113)
              {
                BOOL v114 = (v97 & (v97 - 1)) == 0;
                if (v97 < 3) {
                  BOOL v114 = 0;
                }
                unint64_t v115 = (2 * v97) | !v114;
                unint64_t v116 = vcvtps_u32_f32(v113 / v156);
                if (v115 <= v116) {
                  int8x8_t prime = (int8x8_t)v116;
                }
                else {
                  int8x8_t prime = (int8x8_t)v115;
                }
                if (*(void *)&prime == 1)
                {
                  int8x8_t prime = (int8x8_t)2;
                }
                else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                {
                  int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                  unint64_t v97 = (unint64_t)v154[1];
                }
                if (*(void *)&prime <= v97)
                {
                  if (*(void *)&prime < v97)
                  {
                    unint64_t v124 = vcvtps_u32_f32((float)*((unint64_t *)&v155 + 1) / v156);
                    if (v97 < 3
                      || (uint8x8_t v125 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
                    {
                      unint64_t v124 = std::__next_prime(v124);
                    }
                    else
                    {
                      uint64_t v126 = 1 << -(char)__clz(v124 - 1);
                      if (v124 >= 2) {
                        unint64_t v124 = v126;
                      }
                    }
                    if (*(void *)&prime <= v124) {
                      int8x8_t prime = (int8x8_t)v124;
                    }
                    if (*(void *)&prime >= v97)
                    {
                      unint64_t v97 = (unint64_t)v154[1];
                    }
                    else
                    {
                      if (prime) {
                        goto LABEL_126;
                      }
                      __int32 v132 = v154[0];
                      v154[0] = 0;
                      if (v132) {
                        operator delete(v132);
                      }
                      unint64_t v97 = 0;
                      v154[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(void *)&prime >> 61) {
                    sub_2160FFA74();
                  }
                  int v118 = operator new(8 * *(void *)&prime);
                  char v119 = v154[0];
                  v154[0] = v118;
                  if (v119) {
                    operator delete(v119);
                  }
                  uint64_t v120 = 0;
                  v154[1] = (void *)prime;
                  do
                    *((void *)v154[0] + v120++) = 0;
                  while (*(void *)&prime != v120);
                  v121 = (void **)v155;
                  if ((void)v155)
                  {
                    unint64_t v122 = *(void *)(v155 + 8);
                    uint8x8_t v123 = (uint8x8_t)vcnt_s8(prime);
                    v123.i16[0] = vaddlv_u8(v123);
                    if (v123.u32[0] > 1uLL)
                    {
                      if (v122 >= *(void *)&prime) {
                        v122 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v122 &= *(void *)&prime - 1;
                    }
                    *((void *)v154[0] + v122) = &v155;
                    for (m = *v121; m; unint64_t v122 = v128)
                    {
                      unint64_t v128 = m[1];
                      if (v123.u32[0] > 1uLL)
                      {
                        if (v128 >= *(void *)&prime) {
                          v128 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v128 &= *(void *)&prime - 1;
                      }
                      if (v128 != v122)
                      {
                        if (!*((void *)v154[0] + v128))
                        {
                          *((void *)v154[0] + v128) = v121;
                          goto LABEL_151;
                        }
                        int *v121 = (void *)*m;
                        void *m = **((void **)v154[0] + v128);
                        **((void **)v154[0] + v128) = m;
                        m = v121;
                      }
                      unint64_t v128 = v122;
LABEL_151:
                      v121 = (void **)m;
                      m = (void *)*m;
                    }
                  }
                  unint64_t v97 = (unint64_t)prime;
                }
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v100 >= v97) {
                    uint64_t v5 = v100 % v97;
                  }
                  else {
                    uint64_t v5 = v100;
                  }
                }
                else
                {
                  uint64_t v5 = (v97 - 1) & v100;
                }
              }
              v129 = v154[0];
              v130 = (void *)*((void *)v154[0] + v5);
              if (v130)
              {
                *uint64_t v112 = *v130;
LABEL_168:
                void *v130 = v112;
                goto LABEL_169;
              }
              *uint64_t v112 = v155;
              *(void *)&long long v155 = v112;
              v129[v5] = &v155;
              if (*v112)
              {
                unint64_t v131 = *(void *)(*v112 + 8);
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v131 >= v97) {
                    v131 %= v97;
                  }
                }
                else
                {
                  v131 &= v97 - 1;
                }
                v130 = (char *)v154[0] + 8 * v131;
                goto LABEL_168;
              }
LABEL_169:
              ++*((void *)&v155 + 1);
LABEL_170:
              unint64_t v95 = *(void *)(v95 + 8);
              int v96 = (uint64_t *)(v106 + 8);
            }
            while (v95);
LABEL_181:
            uint64_t v153 = v170;
            sub_216144A78((uint64_t *)&v159, &v153);
            if (v150 - (uint64_t)v149 >= 9)
            {
              uint64_t v133 = 0;
              uint64_t v134 = (v150 - (uint64_t)v149) >> 3;
              uint64_t v135 = *v149;
              int v136 = v149;
              do
              {
                int v137 = v136;
                v136 += v133 + 1;
                uint64_t v138 = 2 * v133;
                uint64_t v133 = (2 * v133) | 1;
                uint64_t v139 = v138 + 2;
                if (v139 < v134 && *(float *)(*v136 + 16) < *(float *)(v136[1] + 16))
                {
                  ++v136;
                  uint64_t v133 = v139;
                }
                *int v137 = *v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
              int v140 = (void *)(v150 - 8);
              if (v136 == (void *)(v150 - 8))
              {
                *int v136 = v135;
              }
              else
              {
                *int v136 = *v140;
                *int v140 = v135;
                sub_216149304((uint64_t)v149, (uint64_t)(v136 + 1), v136 + 1 - v149);
              }
            }
            uint64_t v83 = *((void *)&v168 + 1) - 8;
            *((void *)&v168 + 1) -= 8;
            if (++v94 == v148)
            {
              uint64_t v84 = (void *)v168;
              break;
            }
          }
        }
        if (v84)
        {
          *((void *)&v168 + 1) = v84;
          operator delete(v84);
        }
        long long v168 = v159;
        uint64_t v169 = v160;
        long long v141 = v172;
        long long v172 = *(_OWORD *)&v157[8];
        *(_OWORD *)&v157[8] = v141;
        uint64_t v142 = *(void *)&v157[24];
        uint64_t v143 = v174;
        *(void *)&v157[24] = v173[0];
        long long v144 = *(_OWORD *)&v173[1];
        *(_OWORD *)&v173[1] = *(_OWORD *)&v157[32];
        *(_OWORD *)&v157[32] = v144;
        v173[0] = v142;
        uint64_t v174 = v158;
        uint64_t v158 = v143;
        sub_216144C28((uint64_t)v154);
        sub_216144C74(v157);
      }
      if (v161)
      {
        uint64_t v162 = v161;
        operator delete(v161);
      }
      if (v163[0])
      {
        v163[1] = v163[0];
        operator delete(v163[0]);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v168) {
    operator delete((void *)v168);
  }
  sub_216144C74(&v171);
}

void sub_216144798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  sub_216144C28((uint64_t)&a21);
  sub_216144C74(&a27);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  unsigned int v59 = a57;
  sub_216129CCC((void ***)&a27);
  if (v59) {
    operator delete(v59);
  }
  sub_216144C74((void *)(v57 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_216144908(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_216144A78(uint64_t *a1, void *a2)
{
  uint64_t v5 = (void *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)*a1;
    uint64_t v8 = ((uint64_t)v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_2160FFA74();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = *a2;
    uint64_t v6 = (uint64_t)(v13 + 8);
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = (void *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    void *v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  uint64_t v15 = *a1;
  uint64_t v16 = (v6 - *a1) >> 3;

  return sub_216149304(v15, v6, v16);
}

void sub_216144B8C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = a1[1];
        do
        {
          unint64_t v9 = *(void **)(v7 - 32);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v3 - 24) = v8;
            operator delete(v8);
          }
          uint64_t v3 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_216149360(a1, v5);
  }
}

uint64_t sub_216144C28(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_216144C74(void *a1)
{
  *a1 = &unk_26C6C45A8;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x2166CA7C0](*v2, 0x1020C8062D53EE8);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216144D04(void *a1@<X0>, void **a2@<X8>, float a3@<S0>)
{
  if ((int)(((a1[4] - a1[3]) >> 3) - 1) <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    unint64_t v6 = a1[16] + a1[17] * a1[18];
    LODWORD(v48[0]) = 0;
    sub_21611494C(__p, v6, v48);
    sub_2161433D4(a1, (uint64_t *)v48, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v48;
    int v51 = v49;
    uint64_t v46 = sub_216157E60();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v48[0] = 0;
    v48[1] = 0;
    uint64_t v49 = 0;
    int v7 = ((a1[4] - a1[3]) >> 3) - 1;
    uint64_t v8 = **(void **)(a1[6] + 24 * (v7 & ~(v7 >> 31)));
    float v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
    do
    {
      uint64_t v10 = (float *)v48[0];
      v48[1] = v48[0];
      unint64_t v11 = (uint64_t *)(a1[9] + 24 * *(unsigned int *)(v8 + 16));
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      uint64_t v14 = (float *)v48[0];
      if (*v11 != v12)
      {
        do
        {
          float v15 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(void *)v13 + 24))
                                  + (float)(a3 * *(float *)(*(void *)v13 + 32)))
                          - v9));
          if (v10 >= v49)
          {
            uint64_t v16 = (float *)v48[0];
            uint64_t v17 = ((char *)v10 - (char *)v48[0]) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              sub_21610CB04();
            }
            uint64_t v19 = (char *)v49 - (char *)v48[0];
            if (((char *)v49 - (char *)v48[0]) >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              float v21 = (char *)sub_2161129B4((uint64_t)&v49, v20);
              uint64_t v16 = (float *)v48[0];
              uint64_t v10 = (float *)v48[1];
            }
            else
            {
              float v21 = 0;
            }
            int v22 = (float *)&v21[4 * v17];
            float *v22 = v15;
            int v23 = v22 + 1;
            while (v10 != v16)
            {
              int v24 = *((_DWORD *)v10-- - 1);
              *((_DWORD *)v22-- - 1) = v24;
            }
            v48[0] = v22;
            v48[1] = v23;
            uint64_t v49 = (float *)&v21[4 * v20];
            if (v16) {
              operator delete(v16);
            }
            uint64_t v10 = (float *)v23;
          }
          else
          {
            *v10++ = v15;
          }
          v48[1] = v10;
          v13 += 8;
        }
        while (v13 != v12);
        uint64_t v14 = (float *)v48[0];
      }
      sub_2161417B8((uint64_t)v47, v14, v10);
      unsigned int v25 = *(_DWORD *)(v8 + 16);
      uint64_t v26 = a1[9];
      uint64_t v8 = *(void *)(*(void *)(v26 + 24 * v25) + 8 * (int)sub_216141AD8((uint64_t)v47, v46, (double **)v47));
      uint64_t v27 = **(void **)a1[9];
      if (v8 != v27)
      {
        float v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
        int v29 = a2[1];
        unint64_t v28 = (unint64_t)a2[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v31 = ((char *)v29 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v31 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v32 = v28 - (void)*a2;
          uint64_t v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1)) {
            uint64_t v33 = v31 + 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            uint64_t v35 = (char *)sub_2160FFAA8((uint64_t)(a2 + 2), v34);
          }
          else {
            uint64_t v35 = 0;
          }
          unint64_t v36 = &v35[8 * v31];
          *(void *)unint64_t v36 = v8;
          uint64_t v30 = v36 + 8;
          BOOL v38 = (char *)*a2;
          unint64_t v37 = (char *)a2[1];
          if (v37 != *a2)
          {
            do
            {
              uint64_t v39 = *((void *)v37 - 1);
              v37 -= 8;
              *((void *)v36 - 1) = v39;
              v36 -= 8;
            }
            while (v37 != v38);
            unint64_t v37 = (char *)*a2;
          }
          *a2 = v36;
          a2[1] = v30;
          a2[2] = &v35[8 * v34];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *int v29 = v8;
          uint64_t v30 = v29 + 1;
        }
        a2[1] = v30;
      }
      if (v47[0])
      {
        v47[1] = v47[0];
        operator delete(v47[0]);
      }
    }
    while (v8 != v27);
    unint64_t v41 = (unint64_t)*a2;
    uint64_t v40 = (char *)a2[1];
    if (*a2 != v40)
    {
      uint64_t v42 = v40 - 8;
      if ((unint64_t)v42 > v41)
      {
        unint64_t v43 = v41 + 8;
        do
        {
          uint64_t v44 = *(void *)(v43 - 8);
          *(void *)(v43 - 8) = *(void *)v42;
          *(void *)uint64_t v42 = v44;
          v42 -= 8;
          BOOL v45 = v43 >= (unint64_t)v42;
          v43 += 8;
        }
        while (!v45);
      }
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_2161450BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216145128(uint64_t a1, void *a2)
{
  float v4 = *(float *)(a1 + 104);
  uint64_t v5 = ((a2[4] - a2[3]) >> 3) - 1;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  sub_21612D904(&__p, *(int *)(a1 + 92) + 1);
  uint64_t v42 = v5;
  if ((int)v5 < 1) {
    goto LABEL_40;
  }
  uint64_t v43 = 0;
  uint64_t v8 = 0;
  float v9 = v4 + -10.0;
  uint64_t v41 = v6 + (int)v7;
  do
  {
    uint64_t v10 = *(unsigned char **)(a2[3] + 8 * v8);
    unint64_t v11 = (char *)__p;
    unint64_t v12 = (v46 - (unsigned char *)__p) >> 4;
    uint64_t v13 = *(_DWORD **)(a1 + 40);
    uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (void)v10) << 32)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = v10[v15];
        uint64_t v18 = v14 ^ v17;
        unsigned int v19 = v13[v18];
        if ((v19 & 0x800000FF) != v17) {
          break;
        }
        uint64_t v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            unint64_t v20 = &v11[16 * v16];
            *(_DWORD *)unint64_t v20 = v13[v14] & 0x7FFFFFFF;
            *((void *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while (v41 - v10 != v15);
    }
    else
    {
      unsigned int v21 = *v10;
      if (*v10)
      {
        unint64_t v16 = 0;
        uint64_t v22 = 1;
        do
        {
          uint64_t v23 = v14 ^ v21;
          unsigned int v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21) {
            break;
          }
          uint64_t v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              unsigned int v25 = &v11[16 * v16];
              *(_DWORD *)unsigned int v25 = v13[v14] & 0x7FFFFFFF;
              *((void *)v25 + 1) = v22;
            }
            ++v16;
          }
          unsigned int v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        unint64_t v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      char v44 = 1;
      uint64_t v26 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
      sub_216129E78(v26, (uint64_t)"(", 1);
      uint64_t v27 = (void *)std::ostream::operator<<();
      unint64_t v28 = sub_216129E78(v27, (uint64_t)") [", 3);
      int v29 = sub_216129E78(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_216129E78(v29, (uint64_t)"] ", 2);
      sub_216128E18(&v44);
    }
    if (!v16)
    {
LABEL_38:
      uint64_t v40 = sub_216142E7C((uint64_t)a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *(_DWORD *)(a1 + 88);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    uint64_t v30 = 0;
    BOOL v31 = 0;
    do
    {
      while (1)
      {
        uint64_t v32 = (unint64_t *)(a2[3] + v43);
        int v33 = -1;
        do
        {
          unint64_t v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((void *)__p + 2 * v30 + 1)]);
        uint64_t v35 = *((unsigned int *)__p + 4 * v30);
        if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v35)) {
          break;
        }
        uint64_t v36 = v8;
        uint64_t v37 = sub_216142E7C((uint64_t)a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v35)) {
          double v38 = (float)(*(float *)(a1 + 108) * (float)v33) + -0.1;
        }
        else {
          double v38 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v35);
        }
        float v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          BOOL v31 = *(_DWORD *)(v37 + 20) == 1;
          uint64_t v8 = v36;
          break;
        }
        ++v30;
        BOOL v31 = 1;
        uint64_t v8 = v36;
        if (v30 == v16) {
          goto LABEL_39;
        }
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31) {
      goto LABEL_38;
    }
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
}

void sub_2161454FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216145530(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_216159D74((uint64_t *)&__p);
  if (v12)
  {
    sub_216159F90(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_216145748(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v22;
    if (__p != v22)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v16);
          v20[1] = v17;
          unint64_t v18 = a5[1];
          if (v18 >= a5[2])
          {
            uint64_t v19 = sub_216141D78(a5, (uint64_t)v20);
          }
          else
          {
            sub_216141E88(a5 + 16, (unsigned char *)a5[1], (uint64_t)v20);
            uint64_t v19 = v18 + 24;
            a5[1] = v18 + 24;
          }
          a5[1] = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_216159F90(a6, a1 + 96);
    if (__p)
    {
      uint64_t v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_216145718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216145748(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  if (a4 != -1) {
    a5 = a4;
  }
  sub_21612D904(a6, a5);
  unint64_t v12 = sub_216148510(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  sub_216148818((uint64_t)a6, v12);
}

void sub_2161457C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161457E4(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_216159D74((uint64_t *)&__p);
  if (v12)
  {
    sub_216159F90(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_216145748(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v29;
    if (__p != v29)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          unint64_t v18 = *(_DWORD **)(a5 + 8);
          unint64_t v17 = *(void *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            unint64_t v20 = *(_DWORD **)a5;
            uint64_t v21 = ((uint64_t)v18 - *(void *)a5) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              sub_21610CB04();
            }
            uint64_t v23 = v17 - (void)v20;
            if (v23 >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              unsigned int v25 = (char *)sub_2161129B4(a5 + 16, v24);
              unint64_t v20 = *(_DWORD **)a5;
              unint64_t v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              unsigned int v25 = 0;
            }
            uint64_t v26 = &v25[4 * v21];
            *(_DWORD *)uint64_t v26 = v16;
            uint64_t v19 = v26 + 4;
            while (v18 != v20)
            {
              int v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(void *)a5 = v26;
            *(void *)(a5 + 8) = v19;
            *(void *)(a5 + 16) = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *unint64_t v18 = v16;
            uint64_t v19 = v18 + 1;
          }
          *(void *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_216159F90(a6, a1 + 96);
    if (__p)
    {
      int v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_216145A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216145A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216145BA8(a1);
  *(void *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26C6C4608;
  *(void *)(v4 + 8) = a2 + 16;
  sub_216126DA0(v4);
  unint64_t v5 = 0;
  *(void *)(a1 + 104) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)))
  {
    if ((*(unsigned int (**)(void, unint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), v5))
    {
      float v6 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (v6 >= *(float *)(a1 + 104)) {
        float v6 = *(float *)(a1 + 104);
      }
      *(float *)(a1 + 104) = v6;
      float v7 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (*(float *)(a1 + 108) >= v7) {
        float v7 = *(float *)(a1 + 108);
      }
      *(float *)(a1 + 108) = v7;
    }
    ++v5;
  }
  return a1;
}

void sub_216145B88(_Unwind_Exception *a1)
{
  sub_21612679C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216145BA8(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6C3BA0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_26C6C49F0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &unk_26C6C49F0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_21613F89C(&a9, 0) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_2161055D0((void *)(a1 + 96));
  return a1;
}

void sub_216145C4C(_Unwind_Exception *a1)
{
  sub_216125850(v3);
  sub_216125850(v2);
  unint64_t v5 = *v1;
  void *v1 = 0;
  if (v5) {
    sub_216129DFC((uint64_t)v1, v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216145C80(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7 = a4 > 7;
  if (a4 <= 7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = a4 - 8;
  }
  if (v7) {
    float v9 = (char *)(a3 + 2);
  }
  else {
    float v9 = "";
  }
  uint64_t v10 = sub_2161258B4(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  unint64_t v11 = (_DWORD *)(v10 + 104);
  *(void *)uint64_t v10 = &unk_26C6C4608;
  *(_DWORD *)(v10 + 108) = 0;
  unint64_t v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  int v13 = (uint64_t *)(v10 + 96);
  sub_216159F90(&v17, v10 + 96);
  uint64_t v14 = v17;
  sub_216159D74(&v17);
  if (!v14)
  {
    sub_216145DFC(a3, a4, v11, &v17);
    sub_216159F94(v13, &v17);
    sub_216159D74(&v17);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v17, a1);
    uint64_t v15 = v17;
    sub_216159D74(&v17);
    if (!v15)
    {
      sub_216145DFC(a3 + 1, a4 - 4, v12, &v17);
      sub_216159F94(v13, &v17);
      sub_216159D74(&v17);
    }
  }
  return a1;
}

void sub_216145DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216159D74((uint64_t *)va);
  sub_21612679C(v2);
  _Unwind_Resume(a1);
}

void *sub_216145DFC@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    float v6 = (void *)sub_216128C80((uint64_t)v8);
    sub_216129E78(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_216129E78(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v8, (uint64_t)") [", 3);
    sub_216129E78(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_216129E78(v8, (uint64_t)"] ", 2);
    sub_21612650C(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x2166CA750](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_2161055D0(a4);
  }
}

void sub_216145FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216146000(void *a1)
{
  sub_21612679C(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216146038(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1[28])
  {
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sub_216159D74((uint64_t *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sub_216159D74((uint64_t *)&v25);
    if (!a3) {
      goto LABEL_4;
    }
    unsigned int v25 = &unk_26C6C46F8;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = 0;
    uint64_t v32 = &unk_26C6C45C8;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v35 = 0;
    uint64_t v36 = 1024;
    sub_216142994((uint64_t)&v25, a2, a3);
    sub_216145128((uint64_t)a1, &v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_2161430A4(&v25, (uint64_t)&v23);
    unint64_t v8 = v23;
    char v9 = v24;
    if (v23 != v24)
    {
      uint64_t v10 = a4 + 2;
      unint64_t v11 = (char *)a4[1];
      do
      {
        uint64_t v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21610CB04();
          }
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v14;
          }
          uint64_t v16 = (char *)sub_216129BFC((uint64_t)(a4 + 2), v15);
          unint64_t v18 = &v16[24 * v13];
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          unint64_t v20 = (char *)*a4;
          uint64_t v19 = (char *)a4[1];
          uint64_t v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              long long v22 = *(_OWORD *)(v19 - 24);
              *((void *)v21 - 1) = *((void *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            uint64_t v19 = (char *)*a4;
          }
          unint64_t v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      unint64_t v8 = v23;
    }
    if (v8)
    {
      unint64_t v24 = v8;
      operator delete(v8);
    }
    sub_216142680((uint64_t)&v25);
  }
  else
  {
    sub_216146348((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_216146300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sub_216142680((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_216146348(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 16))(&v67);
  if ((void)v67)
  {
    sub_216159D74((uint64_t *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_216159D74((uint64_t *)&v67);
  if (!a3) {
    goto LABEL_3;
  }
  float v8 = *(float *)(a1 + 104);
  uint64_t v9 = (a3 << 32) + 0x100000000;
  uint64_t v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (v9 < 0) {
      sub_21610CB04();
    }
    uint64_t v10 = v9 >> 32;
    uint64_t v11 = 3 * v10;
    uint64_t v12 = (float *)operator new(12 * v10);
    uint64_t v13 = v12;
    do
    {
      *(void *)uint64_t v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v65 = a4;
    int v14 = 0;
    float v15 = v8 + -10.0;
    unint64_t v16 = (int)a3;
    int v62 = (char *)(v12 + 5);
    unint64_t v63 = a3;
    float v64 = v12;
    unint64_t v61 = (int)a3;
    do
    {
      float v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_21639FB8C[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4]) {
        int v18 = asc_21639FB8C[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      }
      else {
        int v18 = a3 - v14;
      }
      if (v16 <= v14) {
        goto LABEL_31;
      }
      uint64_t v19 = 0;
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = a2 + v14;
      unint64_t v23 = v16 - v14;
      unint64_t v24 = (int *)&v62[12 * v14];
      do
      {
        uint64_t v25 = *(void *)(a1 + 40);
        int v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        unsigned int v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26) {
          break;
        }
        if ((v27 & 0x100) != 0)
        {
          uint64_t v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v28))
            {
              double v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              double v29 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v28);
            }
            double v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              float v31 = v30;
              *((float *)v24 - 1) = v31;
              *unint64_t v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      uint64_t v12 = v64;
      a2 = v66;
      unint64_t v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        uint64_t v32 = &v12[3 * v18 + 3 * v14];
        int v34 = *((_DWORD *)v32 + 2);
        long long v33 = (int *)(v32 + 2);
        float v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *long long v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    uint64_t v37 = 0;
    v65[2] = 0;
    double v38 = v65 + 2;
    *uint64_t v65 = 0;
    v65[1] = 0;
    unsigned int v39 = a3;
    do
    {
      uint64_t v40 = &v12[3 * v39];
      uint64_t v42 = (unsigned int *)(v40 + 2);
      unint64_t v41 = *((int *)v40 + 2);
      if (v63 < v41) {
        sub_21613F340("string_view::substr");
      }
      int v43 = v39 - v41;
      uint64_t v44 = v66 + v41;
      if (v63 - v41 >= v43) {
        unint64_t v45 = v43;
      }
      else {
        unint64_t v45 = v63 - v41;
      }
      if ((unint64_t)v37 >= *v38)
      {
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        unint64_t v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48) {
          unint64_t v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555) {
          unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v49 = v48;
        }
        unint64_t v50 = (char *)sub_216129BFC((uint64_t)v38, v49);
        uint64_t v52 = &v50[24 * v47];
        *(void *)uint64_t v52 = v44;
        *((void *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        uint64_t v46 = (char **)v65;
        float v54 = (char *)*v65;
        uint64_t v53 = (char *)v65[1];
        unint64_t v55 = v52;
        if (v53 == (char *)*v65)
        {
          uint64_t v12 = v64;
        }
        else
        {
          uint64_t v12 = v64;
          do
          {
            long long v56 = *(_OWORD *)(v53 - 24);
            *((void *)v55 - 1) = *((void *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          uint64_t v53 = (char *)*v65;
        }
        uint64_t v37 = v52 + 24;
        *uint64_t v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)uint64_t v37 = v44;
        *((void *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        uint64_t v12 = v64;
        uint64_t v46 = (char **)v65;
      }
      v46[1] = v37;
      unsigned int v39 = *v42;
    }
    while ((int)*v42 > 0);
    uint64_t v57 = (long long *)*v46;
    if (*v46 != v37)
    {
      for (uint64_t i = v37 - 24; v57 < (long long *)i; i -= 24)
      {
        long long v67 = *v57;
        long long v59 = v67;
        long long *v57 = *(_OWORD *)i;
        *(_OWORD *)uint64_t i = v59;
        int v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        uint64_t v57 = (long long *)((char *)v57 + 24);
      }
    }
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_216146884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  float v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161468C8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  if (__p[0])
  {
    sub_216159D74((uint64_t *)__p);
LABEL_3:
    memset(__p, 0, 24);
    sub_216129B28((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(void *)&long long v38 = a5;
    BYTE8(v38) = 0;
    uint64_t v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = sub_216129A60((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      return;
    }
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sub_216159D74((uint64_t *)__p);
  if (!a3) {
    goto LABEL_3;
  }
  if (a4 >= 1024) {
    int v12 = 1024;
  }
  else {
    int v12 = a4;
  }
  if (v12 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 1)
  {
    __p[0] = &unk_26C6C46F8;
    memset(&__p[1], 0, 88);
    __p[12] = &unk_26C6C45C8;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v43 = 0;
    uint64_t v44 = 1024;
    sub_216142994((uint64_t)__p, a2, a3);
    sub_216145128(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    int v34 = a5;
    sub_21614371C(__p, v13, 0, (uint64_t *)&v38, 0.0);
    uint64_t v33 = *((void *)&v38 + 1);
    for (uint64_t i = v38; i != v33; i += 32)
    {
      float v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      unint64_t v16 = *(uint64_t **)i;
      float v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = *v16;
          if (v18 >= v37)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)v35) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21610CB04();
            }
            if (0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3) > v21) {
              unint64_t v21 = 0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)v35) >> 3) >= 0x555555555555555) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v21;
            }
            unint64_t v23 = (char *)sub_216129BFC((uint64_t)&v37, v22);
            uint64_t v25 = &v23[24 * v20];
            *(_OWORD *)uint64_t v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            unsigned int v27 = (char *)v35;
            int v26 = v36;
            uint64_t v28 = v25;
            if (v36 != v35)
            {
              do
              {
                long long v29 = *(_OWORD *)(v26 - 24);
                *((void *)v28 - 1) = *((void *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              int v26 = (char *)v35;
            }
            int v18 = v25 + 24;
            float v35 = v28;
            uint64_t v36 = v25 + 24;
            uint64_t v37 = &v23[24 * v24];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_OWORD *)int v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          uint64_t v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      double v30 = (float *)(i + 24);
      unint64_t v31 = v34[1];
      if (v31 >= v34[2])
      {
        uint64_t v32 = sub_2161496DC(v34, (long long **)&v35, v30);
      }
      else
      {
        sub_216149668((uint64_t)v34, (long long **)&v35, v30);
        uint64_t v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        uint64_t v36 = (char *)v35;
        operator delete(v35);
      }
    }
    float v35 = &v38;
    sub_216129CCC((void ***)&v35);
    sub_216142680((uint64_t)__p);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)std::string __p = v38;
    std::string __p[2] = v39;
    unsigned int v39 = 0;
    long long v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    float v35 = a5;
    LOBYTE(v36) = 0;
    int v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = sub_216129A60((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v11 = (void *)v38;
    if ((void)v38)
    {
      *((void *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_216146D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  sub_216129CCC((void ***)&a12);
  sub_216142680((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_216146E00@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&v28);
  if (v28)
  {
    uint64_t result = sub_216159D74((uint64_t *)&v28);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t result = sub_216159D74((uint64_t *)&v28);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v28 = &unk_26C6C46F8;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v34 = 0;
  float v35 = &unk_26C6C45C8;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  uint64_t v39 = 1024;
  sub_216142994((uint64_t)&v28, a2, a3);
  sub_216145128(a1, &v28);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_216144D04(&v28, (void **)&v26, a5);
  uint64_t v11 = v26;
  int v12 = v27;
  if (v26 != v27)
  {
    uint64_t v13 = 0;
    int v14 = a4 + 2;
    do
    {
      uint64_t v15 = *v11;
      if ((unint64_t)v13 >= *v14)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a4] >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3) > v17) {
          unint64_t v17 = 0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a4) >> 3) >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        uint64_t v19 = (char *)sub_216129BFC((uint64_t)(a4 + 2), v18);
        unint64_t v21 = &v19[24 * v16];
        *(_OWORD *)unint64_t v21 = *(_OWORD *)v15;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v15 + 28);
        unint64_t v23 = (char *)*a4;
        unint64_t v22 = (char *)a4[1];
        uint64_t v24 = v21;
        if (v22 != (char *)*a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          unint64_t v22 = (char *)*a4;
        }
        uint64_t v13 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v15 + 28);
        v13 += 24;
      }
      a4[1] = v13;
      ++v11;
    }
    while (v11 != v12);
    uint64_t v11 = v26;
  }
  if (v11)
  {
    unsigned int v27 = v11;
    operator delete(v11);
  }
  return (uint64_t *)sub_216142680((uint64_t)&v28);
}

void sub_21614708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_2161470D0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 16))(&v122);
  if (v122)
  {
    sub_216159D74((uint64_t *)&v122);
LABEL_3:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
  sub_216159D74((uint64_t *)&v122);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v103 = a7;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  unint64_t v136 = 0;
  unint64_t v122 = (void **)&unk_26C6C46F8;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  uint64_t v128 = 0;
  v129 = &unk_26C6C45C8;
  long long v130 = 0u;
  long long v131 = 0u;
  uint64_t v132 = 0;
  uint64_t v133 = 1024;
  sub_216142994((uint64_t)&v122, a2, a3);
  sub_216145128(a1, &v122);
  sub_2161433D4(&v122, (uint64_t *)v121, a8);
  float v16 = *((float *)v121[0]
        + *(unsigned int *)(**(void **)(*((void *)&v125 + 1)
                                        + 24
                                        * ((((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) & ~((int)(((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sub_216157D08() <= 2)
      {
        LOBYTE(__p[0]) = 0;
        uint64_t v34 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
        sub_216129E78(v34, (uint64_t)"(", 1);
        float v35 = (void *)std::ostream::operator<<();
        long long v36 = sub_216129E78(v35, (uint64_t)") ", 2);
        long long v37 = sub_216129E78(v36, (uint64_t)"LOG(", 4);
        uint64_t v38 = sub_216129E78(v37, (uint64_t)"ERROR", 5);
        uint64_t v39 = sub_216129E78(v38, (uint64_t)") ", 2);
        sub_216129E78(v39, (uint64_t)"include_best not supported for wor false", 40);
        sub_216128E18(__p);
      }
      uint64_t v40 = a7;
      goto LABEL_114;
    }
    int v104 = a6;
    uint64_t v107 = a3;
    unint64_t v105 = a2;
    int v118 = 0;
    char v119 = 0;
    uint64_t v120 = 0;
    sub_2161430A4(&v122, (uint64_t)__p);
    unint64_t v17 = (uint64_t *)__p[0];
    unint64_t v18 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      uint64_t v19 = v119;
      do
      {
        uint64_t v20 = *v17;
        if (v19 >= (long long *)v120)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v118) >> 3);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21610CB04();
          }
          if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v22) {
            unint64_t v22 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
            unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_216129BFC((uint64_t)&v120, v23);
          int v26 = &v24[24 * v21];
          *(_OWORD *)int v26 = *(_OWORD *)v20;
          *((_DWORD *)v26 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v28 = v118;
          unsigned int v27 = v119;
          long long v29 = (long long *)v26;
          if (v119 != v118)
          {
            do
            {
              long long v30 = *(long long *)((char *)v27 - 24);
              *((void *)v29 - 1) = *((void *)v27 - 1);
              *(long long *)((char *)v29 - 24) = v30;
              long long v29 = (long long *)((char *)v29 - 24);
              unsigned int v27 = (long long *)((char *)v27 - 24);
            }
            while (v27 != v28);
            unsigned int v27 = v118;
          }
          uint64_t v19 = (long long *)(v26 + 24);
          int v118 = v29;
          char v119 = (long long *)(v26 + 24);
          uint64_t v120 = &v24[24 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *uint64_t v19 = *(_OWORD *)v20;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v19 = (long long *)((char *)v19 + 24);
        }
        char v119 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    double v116 = 0.0;
    long long v31 = v135;
    if ((unint64_t)v135 >= v136)
    {
      uint64_t v33 = sub_216149948(&v134, &v118, &v116);
    }
    else
    {
      *(void *)uint64_t v135 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = 0;
      sub_216129B28(v31, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
      float v32 = v116;
      *((float *)v31 + 6) = v32;
      uint64_t v33 = (uint64_t)(v31 + 32);
    }
    a2 = v105;
    a3 = v107;
    a6 = v104;
    uint64_t v135 = (char *)v33;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v118)
    {
      char v119 = v118;
      operator delete(v118);
    }
  }
  if (a5)
  {
    sub_21614371C(&v122, a4 + 1, 1, (uint64_t *)&v118, a8);
    if (a6)
    {
      sub_216149A5C(&v116, ((char *)v119 - (char *)v118) >> 5);
      long long v42 = v118;
      long long v41 = v119;
      if (v119 != v118)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          if (&v42[v43] != (long long *)(*(void *)&v116 + v44))
          {
            sub_216149B00((char *)(*(void *)&v116 + v44), *(char **)&v42[v43], *((void *)&v42[v43] + 1), (uint64_t)(*((void *)&v42[v43] + 1) - *(void *)&v42[v43]) >> 3);
            long long v42 = v118;
            long long v41 = v119;
          }
          ++v45;
          v44 += 24;
          v43 += 2;
        }
        while (v45 < ((char *)v41 - (char *)v42) >> 5);
      }
      sub_2161430A4(&v122, (uint64_t)__p);
      uint64_t v46 = sub_216149C0C(*(uint64_t *)&v116, *(uint64_t *)&v117, (uint64_t)__p);
      uint64_t v47 = (int)(-1431655765 * ((unint64_t)(v46 - *(void *)&v116) >> 3));
      if (v47 == ((char *)v119 - (char *)v118) >> 5)
      {
        unint64_t v49 = v119 - 2;
        unint64_t v48 = (void *)*((void *)v119 - 4);
        if (v48)
        {
          *((void *)v119 - 3) = v48;
          operator delete(v48);
        }
      }
      else
      {
        sub_216149C7C((__n128 *)&v118[2 * v47 + 2], (__n128 *)v119, (uint64_t)&v118[2 * v47]);
        unint64_t v49 = v69;
        float v70 = v119;
        if (v119 != v69)
        {
          uint64_t v71 = v119;
          do
          {
            uint64_t v73 = (void *)*((void *)v71 - 4);
            v71 -= 2;
            unint64_t v72 = v73;
            if (v73)
            {
              *((void *)v70 - 3) = v72;
              operator delete(v72);
            }
            float v70 = v71;
          }
          while (v71 != v49);
        }
      }
      char v119 = v49;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v116;
      sub_21613F444((void ***)__p);
    }
    uint64_t v74 = (void *)*((void *)v119 - 4);
    uint64_t v109 = v119 - 2;
    float v75 = *((float *)v119 - 2);
    if (v74)
    {
      *((void *)v119 - 3) = v74;
      operator delete(v74);
    }
    char v119 = v109;
    for (uint64_t i = v118; i != v109; i += 2)
    {
      memset(__p, 0, 24);
      long long v77 = *(uint64_t **)i;
      uint64_t v78 = (uint64_t *)*((void *)i + 1);
      if (*(uint64_t **)i == v78)
      {
        float v80 = 0.0;
      }
      else
      {
        uint64_t v79 = 0;
        float v80 = 0.0;
        do
        {
          uint64_t v81 = *v77;
          float v82 = *(float *)(*v77 + 32);
          if (v79 >= __p[2])
          {
            unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)__p[0]) >> 3);
            unint64_t v84 = v83 + 1;
            if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21610CB04();
            }
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v84) {
              unint64_t v84 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555) {
              unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v85 = v84;
            }
            int v86 = (char *)sub_216129BFC((uint64_t)&__p[2], v85);
            std::string::size_type v88 = &v86[24 * v83];
            *(_OWORD *)std::string::size_type v88 = *(_OWORD *)v81;
            *((_DWORD *)v88 + 4) = *(_DWORD *)(v81 + 28);
            long long v90 = (char *)__p[0];
            int v89 = (char *)__p[1];
            uint64_t v91 = v88;
            if (__p[1] != __p[0])
            {
              do
              {
                long long v92 = *(_OWORD *)(v89 - 24);
                *((void *)v91 - 1) = *((void *)v89 - 1);
                *(_OWORD *)(v91 - 24) = v92;
                v91 -= 24;
                v89 -= 24;
              }
              while (v89 != v90);
              int v89 = (char *)__p[0];
            }
            uint64_t v79 = v88 + 24;
            __p[0] = v91;
            __p[1] = v88 + 24;
            std::string __p[2] = &v86[24 * v87];
            if (v89) {
              operator delete(v89);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v79 = *(_OWORD *)v81;
            *((_DWORD *)v79 + 4) = *(_DWORD *)(v81 + 28);
            v79 += 24;
          }
          __p[1] = v79;
          float v80 = v80 + (float)(a8 * v82);
          ++v77;
        }
        while (v77 != v78);
      }
      *(float *)&double v116 = v80 - v16;
      uint64_t v93 = v135;
      if ((unint64_t)v135 >= v136)
      {
        uint64_t v94 = sub_216149CE8(&v134, (long long **)__p, &v116);
      }
      else
      {
        *(void *)uint64_t v135 = 0;
        *((void *)v93 + 1) = 0;
        *((void *)v93 + 2) = 0;
        sub_216129B28(v93, (long long *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v93 + 6) = LODWORD(v116);
        uint64_t v94 = (uint64_t)(v93 + 32);
      }
      uint64_t v135 = (char *)v94;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    uint64_t v95 = v134;
    for (int j = v135; (char *)v95 != j; v95 += 32)
    {
      float v97 = *(float *)(v95 + 24);
      if (v97 != 0.0)
      {
        double v98 = v97 - v75;
        long double v99 = exp(v98);
        if (v98 <= -10.0)
        {
          double v101 = v98 + v99 * -0.5 + v99 * v99 / 24.0 + pow(v99, 4.0) / -2880.0;
        }
        else
        {
          long double v100 = expm1(-v99);
          double v101 = log(-v100);
        }
        float v102 = v101;
        *(float *)(v95 + 24) = v102;
      }
    }
    __p[0] = &v118;
    sub_216129CCC((void ***)__p);
    uint64_t v51 = v134;
    unint64_t v50 = v135;
  }
  else
  {
    uint64_t v51 = v134;
    unint64_t v50 = v135;
    if (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5))
    {
      uint64_t v108 = a3;
      uint64_t v106 = a2;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &unk_26C6C46F8;
        __p[12] = &unk_26C6C45C8;
        long long v112 = 0u;
        long long v113 = 0u;
        uint64_t v114 = 0;
        uint64_t v115 = 1024;
        sub_216142994((uint64_t)__p, a2, a3);
        sub_216145128(a1, __p);
        int v118 = 0;
        char v119 = 0;
        uint64_t v120 = 0;
        sub_216144D04(__p, (void **)&v116, a8);
        double v53 = v116;
        double v52 = v117;
        float v54 = 0.0;
        if (*(void *)&v116 != *(void *)&v117)
        {
          unint64_t v55 = v119;
          do
          {
            uint64_t v56 = **(void **)&v53;
            if (v55 >= (long long *)v120)
            {
              unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v118) >> 3);
              unint64_t v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21610CB04();
              }
              if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v58) {
                unint64_t v58 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
                unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v59 = v58;
              }
              int v60 = (char *)sub_216129BFC((uint64_t)&v120, v59);
              int v62 = &v60[24 * v57];
              *(_OWORD *)int v62 = *(_OWORD *)v56;
              *((_DWORD *)v62 + 4) = *(_DWORD *)(v56 + 28);
              float v64 = v118;
              unint64_t v63 = v119;
              uint64_t v65 = (long long *)v62;
              if (v119 != v118)
              {
                do
                {
                  long long v66 = *(long long *)((char *)v63 - 24);
                  *((void *)v65 - 1) = *((void *)v63 - 1);
                  *(long long *)((char *)v65 - 24) = v66;
                  uint64_t v65 = (long long *)((char *)v65 - 24);
                  unint64_t v63 = (long long *)((char *)v63 - 24);
                }
                while (v63 != v64);
                unint64_t v63 = v118;
              }
              unint64_t v55 = (long long *)(v62 + 24);
              int v118 = v65;
              char v119 = (long long *)(v62 + 24);
              uint64_t v120 = &v60[24 * v61];
              if (v63) {
                operator delete(v63);
              }
            }
            else
            {
              *unint64_t v55 = *(_OWORD *)v56;
              *((_DWORD *)v55 + 4) = *(_DWORD *)(v56 + 28);
              unint64_t v55 = (long long *)((char *)v55 + 24);
            }
            char v119 = v55;
            float v54 = v54 + (float)(a8 * *(float *)(v56 + 32));
            *(void *)&v53 += 8;
          }
          while (*(void *)&v53 != *(void *)&v52);
        }
        float v110 = v54 - v16;
        long long v67 = v135;
        if ((unint64_t)v135 >= v136)
        {
          uint64_t v68 = sub_216149CE8(&v134, &v118, &v110);
        }
        else
        {
          *(void *)uint64_t v135 = 0;
          *((void *)v67 + 1) = 0;
          *((void *)v67 + 2) = 0;
          sub_216129B28(v67, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
          *((float *)v67 + 6) = v110;
          uint64_t v68 = (uint64_t)(v67 + 32);
        }
        a2 = v106;
        a3 = v108;
        uint64_t v135 = (char *)v68;
        if (v116 != 0.0)
        {
          double v117 = v116;
          operator delete(*(void **)&v116);
        }
        if (v118)
        {
          char v119 = v118;
          operator delete(v118);
        }
        sub_216142680((uint64_t)__p);
        uint64_t v51 = v134;
        unint64_t v50 = v135;
      }
      while (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5));
    }
  }
  *uint64_t v103 = v51;
  v103[1] = (uint64_t)v50;
  v103[2] = v136;
  uint64_t v40 = &v134;
LABEL_114:
  *uint64_t v40 = 0;
  v40[1] = 0;
  void v40[2] = 0;
  if (v121[0])
  {
    v121[1] = v121[0];
    operator delete(v121[0]);
  }
  sub_216142680((uint64_t)&v122);
  unint64_t v122 = (void **)&v134;
  sub_216129CCC(&v122);
}

void sub_216147BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46)
{
  if (__p)
  {
    a19 = __p;
    operator delete(__p);
  }
  std::string __p = &a37;
  sub_21613F444((void ***)&__p);
  std::string __p = &a40;
  sub_216129CCC((void ***)&__p);
  unint64_t v49 = *(void **)(v46 + 200);
  if (v49)
  {
    *(void *)(v46 + 208) = v49;
    operator delete(v49);
  }
  sub_216142680((uint64_t)&a46);
  a46 = (void **)(v47 - 160);
  sub_216129CCC(&a46);
  _Unwind_Resume(a1);
}

float sub_216147D44(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v8 = &unk_26C6C46F8;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0;
  uint64_t v15 = &unk_26C6C45C8;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  uint64_t v19 = 1024;
  sub_216142994((uint64_t)&v8, a2, a3);
  sub_216145128(a1, &v8);
  float v6 = sub_21614355C(&v8, a4);
  sub_216142680((uint64_t)&v8);
  return v6;
}

void sub_216147E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216142680((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216147E18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  strcpy(__s, " ");
  size_t v10 = strlen(__s);
  sub_21613EC60((char **)&v43, a2, a3, (unsigned __int8 *)__s, v10, 0);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  sub_216148DD8(&__p, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  long long v11 = __p;
  long long v12 = v46;
  if (__p == v46)
  {
    float v14 = 0.0;
    if (__p)
    {
LABEL_11:
      uint64_t v46 = v11;
      operator delete(v11);
    }
  }
  else
  {
    float v13 = *(float *)(a1 + 104) + -10.0;
    float v14 = 0.0;
    do
    {
      uint64_t v15 = v11[1];
      uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v11, v15);
      if (v16 == *(_DWORD *)(a1 + 88))
      {
        float v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v16)) {
          double v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        }
        else {
          double v17 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v16);
        }
        float v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    long long v11 = __p;
    if (__p) {
      goto LABEL_11;
    }
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  strcpy(__s, " ");
  size_t v18 = strlen(__s);
  sub_21613EC60((char **)&v43, a4, a5, (unsigned __int8 *)__s, v18, 0);
  long long v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  sub_216148DD8(&v40, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  uint64_t v19 = v40;
  uint64_t v20 = v41;
  if (v40 != v41)
  {
    float v21 = *(float *)(a1 + 104) + -10.0;
    float v22 = 0.0;
    do
    {
      uint64_t v23 = v19[1];
      uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v19, v23);
      if (v24 == *(_DWORD *)(a1 + 88))
      {
        float v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v24)) {
          double v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        }
        else {
          double v25 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v24);
        }
        float v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    uint64_t v19 = v40;
    if (!v40) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  float v22 = 0.0;
  if (v40)
  {
LABEL_24:
    long long v41 = v19;
    operator delete(v19);
  }
LABEL_25:
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  float v26 = vabds_f32(v14, v22);
  if (v26 > 0.0000001 && (int)sub_216157D08() <= 1)
  {
    LOBYTE(v43) = 0;
    unsigned int v27 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
    sub_216129E78(v27, (uint64_t)"(", 1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    long long v29 = sub_216129E78(v28, (uint64_t)") ", 2);
    long long v30 = sub_216129E78(v29, (uint64_t)"LOG(", 4);
    long long v31 = sub_216129E78(v30, (uint64_t)"WARNING", 7);
    float v32 = sub_216129E78(v31, (uint64_t)") ", 2);
    uint64_t v33 = sub_216129E78(v32, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    uint64_t v34 = sub_216129E78(v33, a2, a3);
    sub_216129E78(v34, (uint64_t)", Score: ", 9);
    float v35 = (void *)std::ostream::operator<<();
    long long v36 = sub_216129E78(v35, (uint64_t)". Right: ", 9);
    long long v37 = sub_216129E78(v36, a4, a5);
    sub_216129E78(v37, (uint64_t)", Score: ", 9);
    uint64_t v38 = (void *)std::ostream::operator<<();
    sub_216129E78(v38, (uint64_t)".", 1);
    sub_216128E18(&v43);
  }
  return v26 <= 0.0000001;
}

void sub_216148280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161482DC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_216127BCC(a1, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 104);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &__p;
  }
  else {
    unint64_t v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v7 = &__p;
  }
  else {
    unsigned int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 108);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v8 = &__p;
  }
  else {
    float v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v10 = &v13;
  }
  else {
    size_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_21614841C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216148474()
{
  return 1;
}

uint64_t sub_21614847C()
{
  return 1;
}

uint64_t sub_216148484()
{
  return 1;
}

uint64_t sub_21614848C()
{
  return 1;
}

void *sub_216148494(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    uint64_t result = sub_216112B2C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2161484F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216148510(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  std::string::size_type v9 = *(unsigned int **)(a1 + 16);
  unsigned int v10 = *v9;
  if (a5)
  {
    int v11 = *a2;
    unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    unsigned int v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      uint64_t v13 = a5 - 1;
      float v14 = a2 + 1;
      while (1)
      {
        unint64_t v15 = v12;
        if (!v13) {
          goto LABEL_16;
        }
        int v16 = *v14++;
        unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        unsigned int v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16) {
          goto LABEL_14;
        }
      }
    }
  }
  else
  {
    int v17 = *a2;
    if (!*a2)
    {
      unint64_t v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0) {
        int v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      }
      else {
        int v22 = -1;
      }
      goto LABEL_19;
    }
    unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    unsigned int v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      uint64_t v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        unint64_t v15 = v18;
        int v21 = *v19++;
        int v20 = v21;
        if (!v21) {
          goto LABEL_16;
        }
        unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        unsigned int v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20) {
          goto LABEL_14;
        }
      }
    }
  }
  unint64_t v15 = 0;
LABEL_14:
  int v22 = -2;
LABEL_19:
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  int v42 = v22;
  sub_216148848(v43, &v41);
  uint64_t v23 = *((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    unint64_t v24 = 0;
    do
    {
      double v25 = (int *)(*(void *)(*((void *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      int v26 = *v25;
      uint64_t v27 = v25[2];
      int v28 = v25[4];
      *(void *)&long long v44 = v44 + 1;
      *((void *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((void *)&v43[0] + 1) += 8;
        *(void *)&long long v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v29 = a3 + 16 * v24;
        *(_DWORD *)uint64_t v29 = v28;
        *(void *)(v29 + 8) = a5;
        ++v24;
      }
      BOOL v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31) {
        break;
      }
      if (v28 != -2)
      {
        unsigned __int32 v32 = v26 + 1;
        for (int i = 1; i != 256; ++i)
        {
          uint64_t v34 = *(void *)(a1 + 16);
          unint64_t v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          unsigned int v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0) {
              int v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            }
            else {
              int v37 = -1;
            }
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            int v42 = v37;
            sub_216148848(v43, &v41);
          }
        }
      }
      uint64_t v23 = *((void *)&v44 + 1);
    }
    while (*((void *)&v44 + 1));
  }
  else
  {
    unint64_t v24 = 0;
  }
  sub_216148C10(v43);
  return v24;
}

void sub_216148800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216148C10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216148818(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_216148CB8((void **)a1, a2 - v2);
  }
}

__n128 sub_216148848(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_2161488F8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  size_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *size_t v8 = result;
  ++a1[5];
  return result;
}

void sub_2161488F8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::string::size_type v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_2160FFAA8(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::string::size_type v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_2160FF608(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_2160FF720((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::string::size_type v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_2160FFAA8((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_2160FFAA8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_2160FF840(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2160FF958((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_216148BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216148C10(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_2161006B4((uint64_t)a1);
}

void sub_216148CB8(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_21610CB04();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_21612AA90(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_216148DD8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_21612D97C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216148E38(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216148E54(void *a1)
{
  sub_216148E8C(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_216148E8C(void *a1)
{
  *a1 = &unk_26C6C45C8;
  unint64_t v2 = (void *)a1[1];
  BOOL v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x2166CA7C0](*v2, 0x1070C8005A2B047);
      }
      ++v2;
    }
    while (v2 != v3);
    unint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216148F1C(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_216129BFC(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    sub_216149084(a1, &v15);
    sub_216140FCC((uint64_t)&v15);
  }
}

void sub_216149070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216149084(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2161490FC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2161490FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_2161491A0((uint64_t)v11);
  return v9;
}

uint64_t sub_2161491A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216140F84(a1);
  }
  return a1;
}

uint64_t sub_2161491D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_216148494((void *)v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216149294((uint64_t)v8);
  return v4;
}

void sub_216149280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216149294(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216129C7C(a1);
  }
  return a1;
}

void sub_2161492CC(void *a1)
{
  sub_216144C74(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216149304(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v4 = (void *)(result + 8 * v3);
    uint64_t v5 = *v4;
    uint64_t v8 = *(void *)(a2 - 8);
    uint64_t v6 = (void *)(a2 - 8);
    uint64_t v7 = v8;
    float v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        uint64_t v10 = v4;
        *uint64_t v6 = v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
        uint64_t v4 = (void *)(result + 8 * v3);
        uint64_t v5 = *v4;
        uint64_t v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *uint64_t v10 = v7;
    }
  }
  return result;
}

uint64_t sub_216149360(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      uint64_t v15 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(void *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      sub_21610CB04();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    void v19[4] = result;
    if (v12) {
      long long v13 = (char *)sub_216115A58(result, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    _OWORD v19[3] = &v13[32 * v12];
    uint64_t v17 = 32 * a2;
    uint64_t v18 = &v16[32 * a2];
    do
    {
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((void *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    int8x16_t v19[2] = v18;
    sub_216149488(a1, v19);
    return sub_2161415B8((uint64_t)v19);
  }
  return result;
}

void sub_216149474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161415B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216149488(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216149500((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216149500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_2161495AC((uint64_t)v11);
  return v9;
}

uint64_t sub_2161495AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216141570(a1);
  }
  return a1;
}

void *sub_2161495E4(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112B2C(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_21614964C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_216149668(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_216129B28((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_2161496D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2161496DC(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_216115A58(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_216129B28(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_2161497EC(a1, v16);
  uint64_t v14 = a1[1];
  sub_2161415B8((uint64_t)v16);
  return v14;
}

void sub_2161497D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161415B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161497EC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216149864((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216149864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216149910((uint64_t)v11);
  return v9;
}

uint64_t sub_216149910(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216141570(a1);
  }
  return a1;
}

uint64_t sub_216149948(uint64_t *a1, long long **a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  int64_t v20 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_216115A58(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_216129B28(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  sub_2161497EC(a1, v17);
  uint64_t v15 = a1[1];
  sub_2161415B8((uint64_t)v17);
  return v15;
}

void sub_216149A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161415B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216149A5C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216129BA8(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_216149AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_216149B00(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_21610CB04();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_216112B2C(v7, v11);
    long long v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v12 = (void **)(result + 8);
  float v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *char v12 = &v9[v17];
  return result;
}

uint64_t sub_216149C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    while (*(void *)(v3 + 8) - *(void *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

__n128 *sub_216149C7C(__n128 *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  size_t v5 = a2;
  do
  {
    sub_2161254AC(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_216149CE8(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_216115A58(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  size_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_216129B28(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_2161497EC(a1, v16);
  uint64_t v14 = a1[1];
  sub_2161415B8((uint64_t)v16);
  return v14;
}

void sub_216149DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161415B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216149DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_216145BA8(a1);
  *uint64_t v4 = &unk_26C6C4718;
  v4[1] = a2 + 16;
  sub_216126DA0((uint64_t)v4);
  return a1;
}

void sub_216149E48(_Unwind_Exception *a1)
{
  sub_21612679C(v1);
  _Unwind_Resume(a1);
}

void sub_216149E64(void *a1)
{
  sub_21612679C(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216149E9C(uint64_t *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sub_216159D74(&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_216159D74(&v25);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    uint64_t v8 = (int)sub_21612EE2C(a1[2], a2, a3, 0);
    int v9 = (*(uint64_t (**)(uint64_t *, unsigned char *, uint64_t))(*a1 + 112))(a1, a2, v8);
    int v10 = v9;
    char v12 = (char *)a4[1];
    unint64_t v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21610CB04();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*a4) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v18 = (char *)sub_216129BFC((uint64_t)(a4 + 2), v17);
      int64_t v20 = &v18[24 * v14];
      *(void *)int64_t v20 = a2;
      *((void *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      unint64_t v22 = (char *)*a4;
      uint64_t v21 = (char *)a4[1];
      uint64_t v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          long long v24 = *(_OWORD *)(v21 - 24);
          *((void *)v23 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)*a4;
      }
      long long v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)char v12 = a2;
      *((void *)v12 + 1) = v8;
      long long v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_21614A090(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21614A0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_216145BA8(a1);
  *uint64_t v4 = &unk_26C6C44B8;
  v4[1] = a2 + 16;
  sub_216126DA0((uint64_t)v4);
  return a1;
}

void sub_21614A104(_Unwind_Exception *a1)
{
  sub_21612679C(v1);
  _Unwind_Resume(a1);
}

void sub_21614A120(void *a1)
{
  sub_21612679C(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21614A158(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(unsigned __int8 ***__return_ptr))(*(void *)a1 + 16))(&v26);
  if (v26)
  {
    sub_216159D74((uint64_t *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_216159D74((uint64_t *)&v26);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_216127F0C(a2, a3, 0, 0, &v26);
  uint64_t v8 = v26;
  int v9 = v27;
  if (v26 != v27)
  {
    do
    {
      int v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 112))(a1, *v8, v8[1]);
      int v11 = v10;
      long long v13 = (char *)a4[1];
      char v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*a4) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        uint64_t v19 = (char *)sub_216129BFC((uint64_t)(a4 + 2), v18);
        uint64_t v21 = &v19[24 * v15];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        uint64_t v23 = (char *)*a4;
        unint64_t v22 = (char *)a4[1];
        long long v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          unint64_t v22 = (char *)*a4;
        }
        unint64_t v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)long long v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        unint64_t v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    uint64_t v8 = v26;
  }
  if (v8)
  {
    uint64_t v27 = v8;
    operator delete(v8);
  }
}

void sub_21614A370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_21614A3A0()
{
  sub_21615BE08(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_21614C12C((uint64_t)&unk_26797EB48, 0);

  sub_2161686D0((uint64_t)sub_216167AB4, (uint64_t)&unk_26797EB48);
}

void sub_21614A410()
{
  sub_21615BE08(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_21614B540((uint64_t)&unk_26797EAF0, 0);

  sub_2161686D0((uint64_t)sub_216167AB4, (uint64_t)&unk_26797EAF0);
}

void sub_21614A480()
{
  sub_21615BE08(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_21614A4F0((uint64_t)&unk_26797EAA0, 0);

  sub_2161686D0((uint64_t)sub_216167AB4, (uint64_t)&unk_26797EAA0);
}

uint64_t sub_21614A4F0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C4328;
  *(void *)(a1 + 8) = a2;
  sub_21615C794(a1 + 16, a2);
  *(void *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
  if (atomic_load_explicit(dword_26B4ABB78, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABB78);
  }
  *(void *)(a1 + 48) = &qword_26797EE40;
  *(void *)(a1 + 56) = &qword_26797EE40;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_21614A574(_Unwind_Exception *a1)
{
  sub_21615C874(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21614A588(uint64_t a1)
{
  return a1;
}

uint64_t *sub_21614A5C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    uint64_t v4 = sub_21615C18C(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_21615C2C8((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v13);
  }
LABEL_4:
  uint64_t result = (uint64_t *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_26797EE40)
  {
    uint64_t v6 = sub_21614CC78(result);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    uint64_t result = (uint64_t *)MEMORY[0x2166CA800](v7, 0x1012C40EC159624);
  }
  int v9 = *(uint64_t **)(a1 + 56);
  uint64_t v8 = (uint64_t *)(a1 + 56);
  if (v9 != &qword_26797EE40)
  {
    uint64_t v10 = sub_21614CC78(v8);
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    return (uint64_t *)MEMORY[0x2166CA800](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_21614A6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21614A6EC(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(void *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0) {
        operator delete(*(void **)(v2 + 8));
      }
      JUMPOUT(0x2166CA800);
    }
  }
  return result;
}

void sub_21614A768(uint64_t a1)
{
  sub_21614A588(a1);

  JUMPOUT(0x2166CA800);
}

unsigned __int8 *sub_21614A7A0(uint64_t a1)
{
  uint64_t result = sub_21616061C((unsigned __int8 *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(unsigned char **)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        if ((v3 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v5 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(unsigned char **)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_21614A870(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v36 = a2;
  int v5 = 0;
  if ((sub_21614CD4C((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) == 0)
  {
    unint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v36 + 1);
      unsigned int v9 = **(unsigned char **)v36;
      if ((char)**(unsigned char **)v36 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v27 = sub_2161697DC(*(uint64_t *)v36, v10 - 128);
          *(void *)uint64_t v36 = v27;
          if (!v27) {
            goto LABEL_56;
          }
          uint64_t v8 = (char *)v27;
          unsigned int v9 = v28;
          goto LABEL_8;
        }
        uint64_t v8 = (char *)(*(void *)v36 + 2);
      }
      *(void *)uint64_t v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 1u;
          uint64_t v11 = *(void *)(a1 + 8);
          char v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16) {
            goto LABEL_37;
          }
          v5 |= 4u;
          unint64_t v14 = v8 + 1;
          int v15 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          int v16 = *v14;
          int v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            uint64_t v30 = sub_21616972C((uint64_t)v8, v15);
            *(void *)uint64_t v36 = v30;
            *(_DWORD *)(a1 + 64) = v31;
            if (!v30) {
              goto LABEL_56;
            }
          }
          else
          {
            unint64_t v14 = v8 + 2;
LABEL_17:
            *(void *)uint64_t v36 = v14;
            *(_DWORD *)(a1 + 64) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 2u;
          uint64_t v17 = *(void *)(a1 + 8);
          char v12 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if (v17) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 56);
LABEL_22:
          unint64_t v18 = (std::string *)sub_21615AFD0(v13, (uint64_t)v12);
          uint64_t v19 = (void *)sub_216169890(v18, *(char **)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32) {
            goto LABEL_37;
          }
          v5 |= 8u;
          uint64_t v20 = v8 + 1;
          int v21 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *v20;
          int v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v32 = sub_21616972C((uint64_t)v8, v21);
            *(void *)uint64_t v36 = v32;
            *(_DWORD *)(a1 + 68) = v33;
            if (!v32) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v20 = v8 + 2;
LABEL_29:
            *(void *)uint64_t v36 = v20;
            *(_DWORD *)(a1 + 68) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40) {
            goto LABEL_37;
          }
          v5 |= 0x10u;
          uint64_t v23 = v8 + 1;
          int v24 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *v23;
          int v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            uint64_t v34 = sub_21616972C((uint64_t)v8, v24);
            *(void *)uint64_t v36 = v34;
            *(_DWORD *)(a1 + 72) = v35;
            if (!v34) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v23 = v8 + 2;
LABEL_34:
            *(void *)uint64_t v36 = v23;
            *(_DWORD *)(a1 + 72) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9) {
            BOOL v26 = (v9 & 7) == 4;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if (*v7)
            {
              uint64_t v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              uint64_t v29 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
              uint64_t v8 = *(char **)v36;
            }
            uint64_t v19 = sub_216169D4C(v9, v29, v8, a3);
          }
          else
          {
            uint64_t v19 = sub_216161EEC((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_26797EAA0, (unint64_t *)(a1 + 8), a3);
          }
LABEL_23:
          *(void *)uint64_t v36 = v19;
          if (!v19)
          {
LABEL_56:
            *(void *)uint64_t v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if (sub_21614CD4C((uint64_t)a3, (char **)v36, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v36;
}

char *sub_21614ABB4(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_3;
    }
LABEL_11:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 64);
    *unint64_t v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          ++v4;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0) {
        goto LABEL_27;
      }
    }
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
  unint64_t v4 = sub_21614AE6C(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v6 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v6 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_27:
  unint64_t v4 = sub_21614AE6C(a3, 3, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 68);
  *unint64_t v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    unsigned int v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        unsigned int v17 = v16 >> 7;
        ++v4;
        unsigned int v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
  }
  unsigned int v7 = *(_DWORD *)(a1 + 72);
  *unint64_t v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unsigned int v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        ++v4;
        unsigned int v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  uint64_t v19 = sub_216162CE4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(a1 + 8);
  if ((v21 & 1) == 0) {
    return v20;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    int v24 = *(void **)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
  }
  else
  {
    int v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (void)v19) >= (int)v25)
  {
    uint64_t v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }

  return sub_21615B7FC((uint64_t *)a3, (char *)v24, v25, (unint64_t)v19);
}

char *sub_21614AE6C(unint64_t *a1, int a2, const void **a3, char *a4)
{
  if (*((char *)a3 + 23) < 0)
  {
    int64_t v4 = (int64_t)a3[1];
    if (v4 > 127) {
      goto LABEL_24;
    }
  }
  else
  {
    int64_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  unsigned int v5 = 8 * a2;
  uint64_t v6 = 1;
  uint64_t v7 = 2;
  uint64_t v8 = 3;
  uint64_t v9 = 4;
  if ((8 * a2) >> 28) {
    uint64_t v9 = 5;
  }
  if (v5 >= 0x200000) {
    uint64_t v8 = v9;
  }
  if (v5 >= 0x4000) {
    uint64_t v7 = v8;
  }
  if (v5 >= 0x80) {
    uint64_t v6 = v7;
  }
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v6] + 16) >= v4)
  {
    unsigned int v10 = v5 | 2;
    if ((v5 | 2) > 0x7F)
    {
      *a4 = v5 | 0x82;
      unsigned int v12 = v5 >> 7;
      if (v10 >> 14)
      {
        unsigned int v11 = a4 + 2;
        do
        {
          *(v11 - 1) = v12 | 0x80;
          unsigned int v13 = v12 >> 7;
          ++v11;
          unsigned int v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *(v11 - 1) = v13;
      }
      else
      {
        a4[1] = v12;
        unsigned int v11 = a4 + 2;
      }
    }
    else
    {
      *a4 = v10;
      unsigned int v11 = a4 + 1;
    }
    *unsigned int v11 = v4;
    unsigned int v15 = v11 + 1;
    if (*((char *)a3 + 23) >= 0) {
      unsigned int v16 = a3;
    }
    else {
      unsigned int v16 = *a3;
    }
    memcpy(v15, v16, v4);
    return &v15[v4];
  }
LABEL_24:

  return sub_21615BA44(a1, a2, (void **)a3, a4);
}

uint64_t sub_21614AF98(uint64_t a1)
{
  uint64_t result = sub_216165A18(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0) {
    goto LABEL_8;
  }
  if (v3)
  {
    unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v7 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v6;
    }
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0) {
LABEL_7:
  }
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_21614B10C(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6BAC30, (const struct __class_type_info *)&unk_26C6BA6C8, 0))sub_21614D690(); {

  }
  sub_21614B194(a1, (uint64_t)lpsrc);
}

void sub_21614B194(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    uint64_t v4 = sub_21615C18C(v21, "CHECK failed: (&from) != (this): ");
    sub_21615C2C8((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v21);
  }
  sub_2161606BC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 0x1F) != 0)
  {
    if (v13)
    {
      unsigned int v14 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unsigned int v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unsigned int v16 = (void *)*v16;
      }
      sub_21615AF98((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    unsigned int v17 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_21615AF98((uint64_t *)(a1 + 56), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 40) |= v13;
        return;
      }
LABEL_19:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_20;
    }
LABEL_29:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
}

void sub_21614B318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21614B330(uint64_t a1)
{
  return sub_216161B4C(a1 + 16);
}

uint64_t *sub_21614B338(uint64_t a1, uint64_t a2)
{
  sub_216161934(a1 + 16, a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v10 = sub_21614CE8C((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_21:
      unint64_t v11 = sub_21614CE8C((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 4sub_21613F89C(&a9, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 4sub_21613F89C(&a9, 0) = v8;
    uint64_t v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  unint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  uint64_t v12 = *(void *)(v11 + 16);
  long long v13 = *(_OWORD *)v11;
  uint64_t v14 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v14;
  *(_OWORD *)unint64_t v10 = v13;
  *(void *)(v10 + 16) = v12;
  uint64_t v15 = *(void *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4sub_21613F89C(&a9, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4sub_21613F89C(&a9, 0) = v14;
  uint64_t v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if (v15)
  {
    uint64_t v16 = *v9;
    uint64_t v7 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_9:
  uint64_t v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 48) != &qword_26797EE40 || *(uint64_t **)(a2 + 48) != &qword_26797EE40)
  {
    unsigned int v17 = sub_21615AFD0((uint64_t *)(a1 + 48), v16);
    uint64_t v18 = sub_21615AFD0((uint64_t *)(a2 + 48), v16);
    uint64_t v19 = v17[2];
    long long v20 = *(_OWORD *)v17;
    uint64_t v21 = v18[2];
    *(_OWORD *)unsigned int v17 = *(_OWORD *)v18;
    void v17[2] = v21;
    *(_OWORD *)uint64_t v18 = v20;
    void v18[2] = v19;
    uint64_t v7 = *v5 & 1;
    uint64_t v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t result = (uint64_t *)(a1 + 56);
  if (v7) {
    uint64_t v9 = (uint64_t *)*v9;
  }
  if ((uint64_t *)*result != &qword_26797EE40 || *(uint64_t **)(a2 + 56) != &qword_26797EE40)
  {
    unint64_t v23 = sub_21615AFD0(result, (uint64_t)v9);
    uint64_t result = sub_21615AFD0((uint64_t *)(a2 + 56), (uint64_t)v9);
    uint64_t v24 = v23[2];
    long long v25 = *(_OWORD *)v23;
    uint64_t v26 = result[2];
    *(_OWORD *)unint64_t v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)uint64_t result = v25;
    result[2] = v24;
  }
  uint64_t v27 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = v27;
  return result;
}

void *sub_21614B530@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_21614B540(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C3D70;
  *(void *)(a1 + 8) = a2;
  sub_21615C794(a1 + 16, a2);
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (atomic_load_explicit(dword_26B4ABB90, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABB90);
  }
  *(void *)(a1 + 72) = &qword_26797EE40;
  *(_DWORD *)(a1 + 8sub_21613F89C(&a9, 0) = 0;
  return a1;
}

void sub_21614B5D8(_Unwind_Exception *a1)
{
  sub_21614D0C8(v2);
  sub_21615C874(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21614B5F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_21614B63C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    uint64_t v4 = sub_21615C18C(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_21615C2D0((uint64_t)v10);
  }
LABEL_4:
  uint64_t v6 = *(uint64_t **)(v1 + 72);
  uint64_t v5 = (uint64_t *)(v1 + 72);
  if (v6 != &qword_26797EE40)
  {
    uint64_t v7 = sub_21614CC78(v5);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    return MEMORY[0x2166CA800](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_21614B704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21614B720(uint64_t a1)
{
  sub_21614B5F8(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_21614B758()
{
  if (atomic_load_explicit(dword_26B4ABB90, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABB90);
  }
  return &unk_26797EAF0;
}

unsigned __int8 *sub_21614B794(uint64_t a1)
{
  sub_21616061C((unsigned __int8 *)(a1 + 16));
  uint64_t result = sub_21614CF68((unsigned __int8 *)(a1 + 48));
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 8sub_21613F89C(&a9, 0) = 0;
  *(_DWORD *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_21614B828(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v29 = a2;
  int v5 = 0;
  if ((sub_21614CD4C((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v29 + 1);
      unsigned int v9 = **(unsigned char **)v29;
      if (((char)**(unsigned char **)v29 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0) {
        break;
      }
      uint64_t v26 = sub_2161697DC(*(uint64_t *)v29, v10 - 128);
      *(void *)uint64_t v29 = v26;
      if (!v26) {
        goto LABEL_48;
      }
      uint64_t v8 = (char *)v26;
      unsigned int v9 = v27;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 8sub_21613F89C(&a9, 0) = *(_DWORD *)v8;
          *(void *)uint64_t v29 = v8 + 4;
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          uint64_t v15 = v8 - 1;
          while (1)
          {
            uint64_t v16 = (unsigned __int8 *)(v15 + 1);
            *(void *)uint64_t v29 = v15 + 1;
            unsigned int v17 = *(int **)(a1 + 64);
            if (!v17) {
              break;
            }
            uint64_t v18 = *(int *)(a1 + 56);
            int v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 60))
              {
LABEL_29:
                sub_21616EBCC(a1 + 48, v19 + 1);
                unsigned int v17 = *(int **)(a1 + 64);
                int v19 = *v17;
              }
              *unsigned int v17 = v19 + 1;
              uint64_t v20 = sub_21614C9B8(*(void *)(a1 + 48));
              uint64_t v21 = *(void *)(a1 + 64);
              uint64_t v22 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v22 + 1;
              *(void *)(v21 + 8 * v22 + 8) = v20;
              uint64_t v16 = *(unsigned __int8 **)v29;
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_31:
            uint64_t v15 = (char *)sub_21614BAE0(a3, v20, v16);
            *(void *)uint64_t v29 = v15;
            if (!v15) {
              goto LABEL_48;
            }
            if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
              goto LABEL_44;
            }
          }
          int v19 = *(_DWORD *)(a1 + 60);
          goto LABEL_29;
        }
LABEL_14:
        if (v9) {
          BOOL v13 = (v9 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          a3[10].i32[0] = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if (*v7)
          {
            unsigned int v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            unsigned int v28 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
            uint64_t v8 = *(char **)v29;
          }
          uint64_t v14 = sub_216169D4C(v9, v28, v8, a3);
        }
        else
        {
          uint64_t v14 = sub_216161EEC((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_26797EAF0, (unint64_t *)(a1 + 8), a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if (v23) {
        uint64_t v24 = (void *)*v24;
      }
      long long v25 = (std::string *)sub_21615AFD0((uint64_t *)(a1 + 72), (uint64_t)v24);
      uint64_t v14 = (void *)sub_216169890(v25, *(char **)v29, (uint64_t)a3);
LABEL_43:
      *(void *)uint64_t v29 = v14;
      if (!v14)
      {
LABEL_48:
        *(void *)uint64_t v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if (sub_21614CD4C((uint64_t)a3, (char **)v29, a3[11].i32[1])) {
        goto LABEL_2;
      }
    }
    uint64_t v8 = (char *)(*(void *)v29 + 2);
LABEL_7:
    *(void *)uint64_t v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v29;
}

uint64_t sub_21614BAE0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_216169820((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_21614D1B8((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_21614A870(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_21614BBA8(uint64_t a1, char *a2, unint64_t *a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6) {
    uint64_t v4 = sub_21614AE6C(a3, 1, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), a2);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
      }
      uint64_t v9 = sub_21613E8BC(a1 + 48, i);
      *uint64_t v4 = 18;
      unsigned int v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 >> 14)
        {
          int v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            unsigned int v13 = v12 >> 7;
            ++v11;
            unsigned int v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          int v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        int v11 = v4 + 2;
      }
      uint64_t v4 = sub_21614ABB4(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
    }
    int v15 = *(_DWORD *)(a1 + 80);
    *uint64_t v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  uint64_t v16 = sub_216162CE4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  unsigned int v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if ((v18 & 1) == 0) {
    return v17;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (void)v16) >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }

  return sub_21615B7FC((uint64_t *)a3, (char *)v21, v22, (unint64_t)v16);
}

uint64_t sub_21614BD9C(uint64_t a1)
{
  uint64_t v2 = sub_216165A18(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 56);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_21614AF98(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if (v10)
    {
      unint64_t v11 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v13 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v12;
      }
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0) {
      v4 += 5;
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v17 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
    }
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_21614BEA8(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6BAC30, (const struct __class_type_info *)&unk_26C6BA5F8, 0))sub_21614D690(); {

  }
  sub_21614BF30(a1, (uint64_t)lpsrc);
}

void sub_21614BF30(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    uint64_t v4 = sub_21615C18C(v18, "CHECK failed: (&from) != (this): ");
    sub_21615C2C8((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v18);
  }
  sub_2161606BC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_21614D274(a1 + 48, a2 + 48);
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = (void *)*v16;
      }
      sub_21615AF98((uint64_t *)(a1 + 72), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0) {
      *(_DWORD *)(a1 + 8sub_21613F89C(&a9, 0) = *(_DWORD *)(a2 + 80);
    }
    *(_DWORD *)(a1 + 40) |= v13;
  }
}

void sub_21614C060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21614C078(uint64_t a1)
{
  uint64_t result = sub_216161B4C(a1 + 16);
  if (result)
  {
    return sub_21614C0C4(a1 + 48);
  }
  return result;
}

BOOL sub_21614C0C4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_21613E8BC(a1, v2);
  }
  while ((sub_216161B4C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

void *sub_21614C11C@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_21614C12C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C3F28;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
  if (atomic_load_explicit(dword_26B4ABB08, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABB08);
  }
  return a1;
}

void sub_21614C19C(_Unwind_Exception *a1)
{
  sub_21614D424(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21614C1B4(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  BOOL v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    uint64_t v5 = sub_21615C18C(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
LABEL_4:
  sub_21614A6EC(v3);
  sub_21614D424((uint64_t *)(a1 + 16));
  return a1;
}

void sub_21614C24C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  sub_2160F7444(a1);
}

void sub_21614C270(uint64_t a1)
{
  sub_21614C1B4(a1);

  JUMPOUT(0x2166CA800);
}

unsigned __int8 *sub_21614C2A8(uint64_t a1)
{
  uint64_t result = sub_21614D018((unsigned __int8 *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_21614C2FC(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v22 = a2;
  if ((sub_21614CD4C((uint64_t)a3, &v22, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v6 = v22 + 1;
      unsigned int v7 = *v22;
      if ((*v22 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0) {
        break;
      }
      int v19 = (char *)sub_2161697DC((uint64_t)v22, v8 - 128);
      uint64_t v22 = v19;
      if (!v19) {
        return 0;
      }
      unint64_t v6 = v19;
      unsigned int v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = v6 - 1;
        while (1)
        {
          std::string::size_type v12 = (unsigned __int8 *)(v11 + 1);
          uint64_t v22 = v11 + 1;
          int v13 = *(int **)(a1 + 32);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(int *)(a1 + 24);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 28))
            {
LABEL_22:
              sub_21616EBCC(a1 + 16, v15 + 1);
              int v13 = *(int **)(a1 + 32);
              int v15 = *v13;
            }
            *int v13 = v15 + 1;
            uint64_t v16 = sub_21614CA88(*(void *)(a1 + 16));
            uint64_t v17 = *(void *)(a1 + 32);
            uint64_t v18 = *(int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            std::string::size_type v12 = (unsigned __int8 *)v22;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          uint64_t v16 = *(void *)&v13[2 * v14 + 2];
LABEL_24:
          unint64_t v11 = (char *)sub_21614C4DC(a3, v16, v12);
          uint64_t v22 = v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_27;
          }
        }
        int v15 = *(_DWORD *)(a1 + 28);
        goto LABEL_22;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v22;
      }
      if (*v5)
      {
        int v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        int v10 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
        unint64_t v6 = v22;
      }
      uint64_t v22 = (char *)sub_216169D4C(v7, v10, v6, a3);
      if (!v22) {
        return 0;
      }
LABEL_27:
      if (sub_21614CD4C((uint64_t)a3, &v22, a3[11].i32[1])) {
        return v22;
      }
    }
    unint64_t v6 = v22 + 2;
LABEL_6:
    uint64_t v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

uint64_t sub_21614C4DC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_216169820((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_21614D1B8((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_21614B828(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_21614C5A4(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        long long __dst = sub_21615B6E8((uint64_t)a3, __dst);
      }
      uint64_t v8 = sub_21613E99C(a1 + 16, i);
      void *__dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = __dst + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          __dst[2] = v11;
          unsigned int v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        unsigned int v10 = __dst + 2;
      }
      long long __dst = sub_21614BBA8(v8, v10, a3);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return __dst;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)__dst) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }

  return sub_21615B7FC((uint64_t *)a3, (char *)v17, v18, (unint64_t)__dst);
}

uint64_t sub_21614C720(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_21614BD9C(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 4sub_21613F89C(&a9, 0) = v2;
  return v2;
}

void sub_21614C7CC(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6BAC30, (const struct __class_type_info *)&unk_26C6BA650, 0))sub_21614D690(); {

  }
  sub_21614C854(a1, (uint64_t)lpsrc);
}

void sub_21614C854(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    unint64_t v4 = sub_21615C18C(v14, "CHECK failed: (&from) != (this): ");
    sub_21615C2C8((uint64_t)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v14);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      unsigned int v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unsigned int v9 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_21614D4E0(a1 + 16, a2 + 16);
}

void sub_21614C920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21614C938(uint64_t a1)
{
  return sub_21614C940(a1 + 16);
}

BOOL sub_21614C940(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_21613E99C(a1, v2);
    if (!sub_216161B4C(v5 + 16)) {
      break;
    }
  }
  while (sub_21614C0C4(v5 + 48));
  return v3 < 1;
}

void *sub_21614C9A8@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_21614C9B8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26C6BA6C8, 80);
  }
  uint64_t v2 = sub_21615AAE0(a1, 80);
  sub_21614A4F0(v2, a1);
  return v2;
}

void sub_21614CA64(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t sub_21614CA88(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26C6BA5F8, 88);
  }
  uint64_t v2 = sub_21615AAE0(a1, 88);
  sub_21614B540(v2, a1);
  return v2;
}

void sub_21614CB34(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t sub_21614CB58(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26C6BA650, 48);
  }
  uint64_t v2 = sub_21615AAE0(a1, 48);
  sub_21614C12C(v2, a1);
  return v2;
}

void sub_21614CC04(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sub_21614CC28()
{
  return sub_21614C9B8(0);
}

uint64_t sub_21614CC30(uint64_t a1, uint64_t a2)
{
  return sub_21614C9B8(a2);
}

uint64_t sub_21614CC38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_21614CC40()
{
  return 0;
}

uint64_t sub_21614CC48()
{
  return sub_21614CA88(0);
}

uint64_t sub_21614CC50(uint64_t a1, uint64_t a2)
{
  return sub_21614CA88(a2);
}

uint64_t sub_21614CC58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_21614CC60()
{
  return sub_21614CB58(0);
}

uint64_t sub_21614CC68(uint64_t a1, uint64_t a2)
{
  return sub_21614CB58(a2);
}

uint64_t sub_21614CC70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_21614CC78(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    sub_21615C174((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    int v3 = sub_21615C18C(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    sub_21615C2C8((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v6);
    uint64_t result = *a1;
  }
  if (!result)
  {
    sub_21615C174((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    BOOL v4 = sub_21615C18C(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    sub_21615C2C8((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v6);
    return *a1;
  }
  return result;
}

void sub_21614CD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21614CD4C(uint64_t a1, char **a2, int a3)
{
  unint64_t v6 = *a2;
  if (!*a2)
  {
    sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    unint64_t v7 = sub_21615C18C(v13, "CHECK failed: *ptr: ");
    sub_21615C2C8((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v13);
    unint64_t v6 = *a2;
  }
  if ((unint64_t)v6 < *(void *)a1) {
    return 0;
  }
  signed int v9 = v6 - *(_DWORD *)(a1 + 8);
  if (v9 >= 17)
  {
    sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    int v10 = sub_21615C18C(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    sub_21615C2C8((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 28) == v9)
  {
    if (v9 >= 1 && !*(void *)(a1 + 16)) {
      *a2 = 0;
    }
    return 1;
  }
  else
  {
    *a2 = sub_216168EC4(a1, v9, a3);
    return v11 & 1;
  }
}

void sub_21614CE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_21614CE8C(unint64_t *a1)
{
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) == 0)
  {
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    operator new();
  }
  unint64_t v2 = *(void *)v2;
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  if (*(unsigned char *)(v2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v2 + 32) + 32) + 40))(*(void *)(*(void *)(v2 + 32) + 32), &unk_26C6BAD48, 32);
  }
  unint64_t v3 = sub_21615A7E4((void *)v2, 0x20uLL, (uint64_t)sub_21614CF54);
  *(_OWORD *)unint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(void *)unint64_t v3 = v2;
  return v3 + 8;
}

void sub_21614CF54(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

unsigned __int8 *sub_21614CF68(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_21615C174((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_21615C18C(v7, "CHECK failed: (n) >= (0): ");
    sub_21615C2C8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_21615C2D0((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_21614A7A0(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_21614D000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21614D018(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_21615C174((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_21615C18C(v7, "CHECK failed: (n) >= (0): ");
    sub_21615C2C8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_21615C2D0((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_21614B794(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_21614D0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21614D0C8(uint64_t *a1)
{
  sub_21614D104(a1);

  return sub_21614D184(a1);
}

void sub_21614D104(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_21614A588(*v3);
          MEMORY[0x2166CA800](v5, 0x10A1C40E4A317A1);
        }
        ++v3;
        --v4;
      }
      while (v4);
      unint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_21614D184(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_21615A4C8(v2);
  }
  return a1;
}

uint64_t sub_21614D1B8(uint64_t a1, int a2, unsigned int a3)
{
  if (a3 >= 0x7FFFFFF0)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    char v6 = sub_21615C18C(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    sub_21615C2C8((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = a2 - v7 + a3;
  *(void *)a1 = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  return (v7 - v8);
}

void sub_21614D25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21614D274(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_21615C18C(v11, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_21616EBE0((uint64_t *)a1, v5);
    sub_21614D364((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_21614D34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21614D364(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_21614D414(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_21614C9B8(v18);
      sub_21614D414(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_21614D414(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_21614D424(uint64_t *a1)
{
  sub_21614D460(a1);

  return sub_21614D184(a1);
}

void sub_21614D460(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_21614B5F8(*v3);
          MEMORY[0x2166CA800](v5, 0x10A1C40431D3885);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_21614D4E0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_21615C18C(v11, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_21616EBE0((uint64_t *)a1, v5);
    sub_21614D5D0((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_21614D5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21614D5D0(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_21614D680(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_21614CA88(v18);
      sub_21614D680(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_21614D680(uint64_t a1, uint64_t a2)
{
}

void sub_21614D690()
{
  __assert_rtn("down_cast", "casts.h", 94, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void sub_21614D6BC()
{
  sub_21615BE08(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_216154070((uint64_t)&unk_26797EDC8, 0);

  sub_2161686D0((uint64_t)sub_216167AB4, (uint64_t)&unk_26797EDC8);
}

void sub_21614D72C()
{
  sub_21615BE08(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_2161536E0(qword_26797ED88, 0);

  sub_2161686D0((uint64_t)sub_216167AB4, (uint64_t)qword_26797ED88);
}

void sub_21614D79C()
{
  sub_21615BE08(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_216151814((uint64_t)&unk_26797ECC0, 0);

  sub_2161686D0((uint64_t)sub_216167AB4, (uint64_t)&unk_26797ECC0);
}

void sub_21614D80C()
{
  sub_21615BE08(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_216152E2C((uint64_t)&unk_26797ED40, 0);

  sub_2161686D0((uint64_t)sub_216167AB4, (uint64_t)&unk_26797ED40);
}

void sub_21614D87C()
{
  sub_21615BE08(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_21615262C(qword_26797ED18, 0);

  sub_2161686D0((uint64_t)sub_216167AB4, (uint64_t)qword_26797ED18);
}

void sub_21614D8EC()
{
  sub_21615BE08(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_21614D96C((uint64_t)&unk_26797EB78, 0);

  sub_2161686D0((uint64_t)sub_216167AB4, (uint64_t)&unk_26797EB78);
}

BOOL sub_21614D95C(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_21614D96C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C3AA0;
  *(void *)(a1 + 8) = a2;
  sub_21615C794(a1 + 16, a2);
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
  *(void *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_21613F89C(&a9, 0) = a2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_21613F89C(&a9, 0) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (atomic_load_explicit(dword_26B4ABBB0, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABBB0);
  }
  *(void *)(a1 + 152) = &qword_26797EE40;
  *(void *)(a1 + 16sub_21613F89C(&a9, 0) = &qword_26797EE40;
  *(void *)(a1 + 168) = &qword_26797EE40;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = &qword_26797EE40;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24sub_21613F89C(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0x1F4000000001;
  *(void *)(a1 + 28sub_21613F89C(&a9, 0) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_21636D7B0;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(void *)(a1 + 32sub_21613F89C(&a9, 0) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_21614DAA8(_Unwind_Exception *a1)
{
  sub_21616EBC8(v3);
  sub_21616EBC8(v5);
  sub_21616EBC8(v4);
  sub_21616EBC8(v2);
  sub_21615C874(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21614DADC(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_21614DB38(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_21615C174((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    uint64_t v4 = sub_21615C18C(v27, "CHECK failed: GetArena() == nullptr: ");
    sub_21615C2C8((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v27);
  }
LABEL_4:
  if ((uint64_t *)a1[19] != &qword_26797EE40)
  {
    uint64_t v5 = sub_21614CC78(a1 + 19);
    uint64_t v6 = v5;
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x2166CA800](v6, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[20] != &qword_26797EE40)
  {
    uint64_t v7 = sub_21614CC78(a1 + 20);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x2166CA800](v8, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[21] != &qword_26797EE40)
  {
    uint64_t v9 = sub_21614CC78(a1 + 21);
    uint64_t v10 = v9;
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    MEMORY[0x2166CA800](v10, 0x1012C40EC159624);
  }
  if (a1[22])
  {
    uint64_t v11 = sub_21614CC78(a1 + 22);
    uint64_t v12 = v11;
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    MEMORY[0x2166CA800](v12, 0x1012C40EC159624);
  }
  if (a1[23])
  {
    uint64_t v13 = sub_21614CC78(a1 + 23);
    uint64_t v14 = v13;
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    MEMORY[0x2166CA800](v14, 0x1012C40EC159624);
  }
  if (a1[24])
  {
    uint64_t v15 = sub_21614CC78(a1 + 24);
    uint64_t v16 = v15;
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    MEMORY[0x2166CA800](v16, 0x1012C40EC159624);
  }
  if (a1[25])
  {
    uint64_t v17 = sub_21614CC78(a1 + 25);
    uint64_t v18 = v17;
    if (*(char *)(v17 + 23) < 0) {
      operator delete(*(void **)v17);
    }
    MEMORY[0x2166CA800](v18, 0x1012C40EC159624);
  }
  uint64_t result = a1 + 26;
  if (a1[26])
  {
    uint64_t v20 = sub_21614CC78(result);
    uint64_t v21 = v20;
    if (*(char *)(v20 + 23) < 0) {
      operator delete(*(void **)v20);
    }
    uint64_t result = (uint64_t *)MEMORY[0x2166CA800](v21, 0x1012C40EC159624);
  }
  uint64_t v23 = (uint64_t *)a1[27];
  uint64_t v22 = a1 + 27;
  if (v23 != &qword_26797EE40)
  {
    uint64_t v24 = sub_21614CC78(v22);
    uint64_t v25 = v24;
    if (*(char *)(v24 + 23) < 0) {
      operator delete(*(void **)v24);
    }
    return (uint64_t *)MEMORY[0x2166CA800](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_21614DDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21614DE10(uint64_t *a1)
{
  sub_21614DADC(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21614DE48(uint64_t a1)
{
  sub_21616061C((unsigned __int8 *)(a1 + 16));
  sub_216156578(a1 + 56);
  sub_216156578(a1 + 80);
  sub_216156578(a1 + 104);
  uint64_t result = sub_216156578(a1 + 128);
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3) {
    goto LABEL_10;
  }
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_20:
    unint64_t v6 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
  if ((v3 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_16:
  unint64_t v5 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_24:
  uint64_t result = (uint64_t)sub_21615B2C4((std::string *)(a1 + 176), &off_26797B3C8);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = (uint64_t)sub_21615B2C4((std::string *)(a1 + 184), &off_26797B348);
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = (uint64_t)sub_21615B2C4((std::string *)(a1 + 192), &off_26797B368);
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    uint64_t result = (uint64_t)sub_21615B2C4((std::string *)(a1 + 200), &off_26797B388);
    if ((v3 & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_10:
    if ((v3 & 0x100) == 0) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
LABEL_9:
  if ((v3 & 0x80) == 0) {
    goto LABEL_10;
  }
LABEL_28:
  uint64_t result = (uint64_t)sub_21615B2C4((std::string *)(a1 + 208), &off_26797B3A8);
  if ((v3 & 0x100) == 0) {
    goto LABEL_32;
  }
LABEL_29:
  unint64_t v7 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(unsigned char **)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
  }
  else
  {
    *(unsigned char *)unint64_t v7 = 0;
    *(unsigned char *)(v7 + 23) = 0;
  }
LABEL_32:
  if ((v3 & 0xFE00) != 0)
  {
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 239) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(void *)(a1 + 247) = 0;
    *(unsigned char *)(a1 + 271) = 0;
    *(void *)(a1 + 255) = 0;
    *(void *)(a1 + 263) = 0;
    *(_DWORD *)(a1 + 272) = 1;
  }
  if (HIBYTE(v3))
  {
    *(void *)(a1 + 276) = 0x3F7FDF3B00001F40;
    *(void *)(a1 + 284) = 0x3F400000000F4240;
    *(_OWORD *)(a1 + 292) = xmmword_21636D7B0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    *(_WORD *)(a1 + 312) = 257;
    *(_DWORD *)(a1 + 308) = 16843009;
    *(void *)(a1 + 316) = 0x200000001;
  }
  *(_DWORD *)(a1 + 324) = -1;
  *(void *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 31) < 0)
    {
      **(unsigned char **)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v9 + 8) = 0;
      *(unsigned char *)(v9 + 31) = 0;
    }
  }
  return result;
}

char *sub_21614E110(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)v188 = a2;
  char v5 = sub_21614CD4C((uint64_t)a3, (char **)v188, a3[11].i32[1]);
  uint64_t result = *(char **)v188;
  if (v5) {
    return result;
  }
  v187 = (unint64_t *)(a1 + 8);
  unint64_t v7 = (uint64_t *)(a1 + 128);
  uint64_t v8 = (uint64_t *)(a1 + 104);
  unint64_t v9 = (uint64_t *)(a1 + 80);
  uint64_t v10 = (uint64_t *)(a1 + 56);
  while (2)
  {
    uint64_t v11 = result + 1;
    unsigned int v12 = *result;
    if ((*result & 0x80000000) == 0) {
      goto LABEL_7;
    }
    unsigned int v13 = v12 + (*v11 << 7);
    unsigned int v12 = v13 - 128;
    if ((*v11 & 0x80000000) == 0)
    {
      uint64_t v11 = result + 2;
LABEL_7:
      *(void *)v188 = v11;
      goto LABEL_8;
    }
    uint64_t result = (char *)sub_2161697DC((uint64_t)result, v13 - 128);
    *(void *)v188 = result;
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    unsigned int v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (2)
        {
          uint64_t v14 = result + 1;
          *(void *)v188 = result + 1;
          uint64_t v15 = *(int **)(a1 + 72);
          if (!v15)
          {
            int v17 = *(_DWORD *)(a1 + 68);
LABEL_16:
            sub_21616EBCC(a1 + 56, v17 + 1);
            uint64_t v15 = *(int **)(a1 + 72);
            int v17 = *v15;
            goto LABEL_17;
          }
          uint64_t v16 = *(int *)(a1 + 64);
          int v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 64) = v16 + 1;
            uint64_t v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_22;
          }
          if (v17 == *(_DWORD *)(a1 + 68)) {
            goto LABEL_16;
          }
LABEL_17:
          *uint64_t v15 = v17 + 1;
          uint64_t v19 = *v10;
          if (!*v10) {
            operator new();
          }
          if (*(unsigned char *)(v19 + 24)) {
            (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v19 + 32) + 32) + 40))(*(void *)(*(void *)(v19 + 32) + 32), &unk_26C6BC178, 24);
          }
          uint64_t v18 = (std::string *)sub_21615A7E4((void *)v19, 0x18uLL, (uint64_t)sub_216156484);
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          uint64_t v20 = *(void *)(a1 + 72);
          uint64_t v21 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v21 + 1;
          *(void *)(v20 + 8 * v21 + 8) = v18;
          uint64_t v14 = *(char **)v188;
LABEL_22:
          uint64_t result = (char *)sub_216169890(v18, v14, (uint64_t)a3);
          *(void *)v188 = result;
          if (result)
          {
            if (*(void *)a3 <= (unint64_t)result || *result != 10) {
              goto LABEL_273;
            }
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v23 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if (v23) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 152);
        goto LABEL_265;
      case 3u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        char v26 = v11 + 1;
        unint64_t v27 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v28 = *v26;
        int v29 = v27 + (v28 << 7);
        unint64_t v27 = (v29 - 128);
        if (v28 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, (v29 - 128));
          *(void *)v188 = result;
          if (!result) {
            return result;
          }
          unint64_t v27 = v157;
        }
        else
        {
          char v26 = v11 + 2;
LABEL_36:
          *(void *)v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if (*v187) {
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v186 = (std::string *)sub_21614CE8C(v187);
          }
          sub_216169680(3, v27, v186);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800000u;
          *(_DWORD *)(a1 + 272) = v27;
        }
        goto LABEL_273;
      case 4u:
        if (v12 != 32) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        int v31 = v11 + 1;
        LODWORD(v3sub_21613F89C(&a9, 0) = *v11;
        if ((v30 & 0x80) == 0) {
          goto LABEL_43;
        }
        int v32 = *v31;
        uint64_t v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v30);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 276) = v158;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v31 = v11 + 2;
LABEL_43:
          *(void *)v188 = v31;
          *(_DWORD *)(a1 + 276) = v30;
        }
        goto LABEL_273;
      case 5u:
        if (v12 != 42) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (1)
        {
          int v33 = result + 1;
          *(void *)v188 = result + 1;
          uint64_t v34 = *(int **)(a1 + 96);
          if (!v34) {
            break;
          }
          uint64_t v35 = *(int *)(a1 + 88);
          int v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *(_DWORD *)(a1 + 92))
            {
LABEL_51:
              sub_21616EBCC(a1 + 80, v36 + 1);
              uint64_t v34 = *(int **)(a1 + 96);
              int v36 = *v34;
            }
            *uint64_t v34 = v36 + 1;
            uint64_t v38 = *v9;
            if (!*v9) {
              operator new();
            }
            if (*(unsigned char *)(v38 + 24)) {
              (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v38 + 32) + 32) + 40))(*(void *)(*(void *)(v38 + 32) + 32), &unk_26C6BC178, 24);
            }
            int v37 = (std::string *)sub_21615A7E4((void *)v38, 0x18uLL, (uint64_t)sub_216156484);
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            uint64_t v39 = *(void *)(a1 + 96);
            uint64_t v40 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v40 + 1;
            *(void *)(v39 + 8 * v40 + 8) = v37;
            int v33 = *(char **)v188;
            goto LABEL_57;
          }
          *(_DWORD *)(a1 + 88) = v35 + 1;
          int v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_57:
          uint64_t result = (char *)sub_216169890(v37, v33, (uint64_t)a3);
          *(void *)v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 42) {
            goto LABEL_273;
          }
        }
        int v36 = *(_DWORD *)(a1 + 92);
        goto LABEL_51;
      case 6u:
        if (v12 != 48) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200u;
        uint64_t v42 = v11 + 1;
        LODWORD(v41) = *v11;
        if ((v41 & 0x80) == 0) {
          goto LABEL_65;
        }
        int v43 = *v42;
        uint64_t v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v41);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 224) = v159;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v42 = v11 + 2;
LABEL_65:
          *(void *)v188 = v42;
          *(_DWORD *)(a1 + 224) = v41;
        }
        goto LABEL_273;
      case 7u:
        if (v12 != 58) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v44 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if (v44) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 160);
        goto LABEL_265;
      case 0xAu:
        if (v12 != 85) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        int v46 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 28sub_21613F89C(&a9, 0) = v46;
        goto LABEL_255;
      case 0xBu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x800u;
        uint64_t v47 = v11 + 1;
        uint64_t v48 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_76;
        }
        int v49 = *v47;
        uint64_t v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v48);
          *(void *)v188 = result;
          *(void *)(a1 + 232) = v160;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v47 = v11 + 2;
LABEL_76:
          *(void *)v188 = v47;
          *(void *)(a1 + 232) = v48;
        }
        goto LABEL_273;
      case 0xCu:
        if (v12 != 96) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400u;
        uint64_t v51 = v11 + 1;
        LODWORD(v5sub_21613F89C(&a9, 0) = *v11;
        if ((v50 & 0x80) == 0) {
          goto LABEL_81;
        }
        int v52 = *v51;
        uint64_t v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v50);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 228) = v161;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v51 = v11 + 2;
LABEL_81:
          *(void *)v188 = v51;
          *(_DWORD *)(a1 + 228) = v50;
        }
        goto LABEL_273;
      case 0xDu:
        if (v12 != 104) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        long long v54 = v11 + 1;
        LODWORD(v53) = *v11;
        if ((v53 & 0x80) == 0) {
          goto LABEL_86;
        }
        int v55 = *v54;
        uint64_t v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v53);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 24sub_21613F89C(&a9, 0) = v162;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v54 = v11 + 2;
LABEL_86:
          *(void *)v188 = v54;
          *(_DWORD *)(a1 + 24sub_21613F89C(&a9, 0) = v53;
        }
        goto LABEL_273;
      case 0xEu:
        if (v12 != 112) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        unint64_t v57 = v11 + 1;
        LODWORD(v56) = *v11;
        if ((v56 & 0x80) == 0) {
          goto LABEL_91;
        }
        int v58 = *v57;
        uint64_t v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v56);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 284) = v163;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v57 = v11 + 2;
LABEL_91:
          *(void *)v188 = v57;
          *(_DWORD *)(a1 + 284) = v56;
        }
        goto LABEL_273;
      case 0xFu:
        if (v12 != 125) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        int v59 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 288) = v59;
        goto LABEL_255;
      case 0x10u:
        if (v12 != 128) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        uint64_t v61 = v11 + 1;
        LODWORD(v6sub_21613F89C(&a9, 0) = *v11;
        if ((v60 & 0x80) == 0) {
          goto LABEL_98;
        }
        int v62 = *v61;
        uint64_t v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v60);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 292) = v164;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v61 = v11 + 2;
LABEL_98:
          *(void *)v188 = v61;
          *(_DWORD *)(a1 + 292) = v60;
        }
        goto LABEL_273;
      case 0x11u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        float v64 = v11 + 1;
        LODWORD(v63) = *v11;
        if ((v63 & 0x80) == 0) {
          goto LABEL_103;
        }
        int v65 = *v64;
        uint64_t v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v63);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 296) = v165;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v64 = v11 + 2;
LABEL_103:
          *(void *)v188 = v64;
          *(_DWORD *)(a1 + 296) = v63;
        }
        goto LABEL_273;
      case 0x12u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        long long v67 = v11 + 1;
        LODWORD(v66) = *v11;
        if ((v66 & 0x80) == 0) {
          goto LABEL_108;
        }
        int v68 = *v67;
        uint64_t v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v66);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 30sub_21613F89C(&a9, 0) = v166;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v67 = v11 + 2;
LABEL_108:
          *(void *)v188 = v67;
          *(_DWORD *)(a1 + 30sub_21613F89C(&a9, 0) = v66;
        }
        goto LABEL_273;
      case 0x13u:
        if (v12 != 152) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        float v69 = v11 + 1;
        uint64_t v70 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_113;
        }
        int v71 = *v69;
        uint64_t v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v70);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 308) = v167 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v69 = v11 + 2;
LABEL_113:
          *(void *)v188 = v69;
          *(unsigned char *)(a1 + 308) = v70 != 0;
        }
        goto LABEL_273;
      case 0x14u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        uint64_t v73 = v11 + 1;
        LODWORD(v72) = *v11;
        if ((v72 & 0x80) == 0) {
          goto LABEL_118;
        }
        int v74 = *v73;
        uint64_t v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v72);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 304) = v168;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v73 = v11 + 2;
LABEL_118:
          *(void *)v188 = v73;
          *(_DWORD *)(a1 + 304) = v72;
        }
        goto LABEL_273;
      case 0x15u:
        if (v12 != 168) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 2u;
        float v75 = v11 + 1;
        uint64_t v76 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_123;
        }
        int v77 = *v75;
        uint64_t v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v76);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 309) = v169 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v75 = v11 + 2;
LABEL_123:
          *(void *)v188 = v75;
          *(unsigned char *)(a1 + 309) = v76 != 0;
        }
        goto LABEL_273;
      case 0x16u:
        if (v12 != 176) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 8u;
        uint64_t v78 = v11 + 1;
        uint64_t v79 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_128;
        }
        int v80 = *v78;
        uint64_t v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v79);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 311) = v170 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v78 = v11 + 2;
LABEL_128:
          *(void *)v188 = v78;
          *(unsigned char *)(a1 + 311) = v79 != 0;
        }
        goto LABEL_273;
      case 0x17u:
        if (v12 != 184) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 4u;
        uint64_t v81 = v11 + 1;
        uint64_t v82 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_133;
        }
        int v83 = *v81;
        uint64_t v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v82);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 31sub_21613F89C(&a9, 0) = v171 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v81 = v11 + 2;
LABEL_133:
          *(void *)v188 = v81;
          *(unsigned char *)(a1 + 31sub_21613F89C(&a9, 0) = v82 != 0;
        }
        goto LABEL_273;
      case 0x18u:
        if (v12 != 192) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        unint64_t v84 = v11 + 1;
        uint64_t v85 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_138;
        }
        int v86 = *v84;
        uint64_t v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v85);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 245) = v172 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v84 = v11 + 2;
LABEL_138:
          *(void *)v188 = v84;
          *(unsigned char *)(a1 + 245) = v85 != 0;
        }
        goto LABEL_273;
      case 0x19u:
        if (v12 != 200) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        uint64_t v87 = v11 + 1;
        uint64_t v88 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_143;
        }
        int v89 = *v87;
        uint64_t v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v88);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 247) = v173 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v87 = v11 + 2;
LABEL_143:
          *(void *)v188 = v87;
          *(unsigned char *)(a1 + 247) = v88 != 0;
        }
        goto LABEL_273;
      case 0x1Au:
        if (v12 != 208) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        long long v90 = v11 + 1;
        uint64_t v91 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_148;
        }
        int v92 = *v90;
        uint64_t v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v91);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 246) = v174 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v90 = v11 + 2;
LABEL_148:
          *(void *)v188 = v90;
          *(unsigned char *)(a1 + 246) = v91 != 0;
        }
        goto LABEL_273;
      case 0x1Eu:
        if (v12 != 242) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        while (1)
        {
          uint64_t v93 = result + 2;
          *(void *)v188 = result + 2;
          uint64_t v94 = *(int **)(a1 + 120);
          if (!v94) {
            break;
          }
          uint64_t v95 = *(int *)(a1 + 112);
          int v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *(_DWORD *)(a1 + 116))
            {
LABEL_156:
              sub_21616EBCC(a1 + 104, v96 + 1);
              uint64_t v94 = *(int **)(a1 + 120);
              int v96 = *v94;
            }
            *uint64_t v94 = v96 + 1;
            uint64_t v98 = *v8;
            if (!*v8) {
              operator new();
            }
            if (*(unsigned char *)(v98 + 24)) {
              (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v98 + 32) + 32) + 40))(*(void *)(*(void *)(v98 + 32) + 32), &unk_26C6BC178, 24);
            }
            float v97 = (std::string *)sub_21615A7E4((void *)v98, 0x18uLL, (uint64_t)sub_216156484);
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            uint64_t v99 = *(void *)(a1 + 120);
            uint64_t v100 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v100 + 1;
            *(void *)(v99 + 8 * v100 + 8) = v97;
            uint64_t v93 = *(char **)v188;
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 112) = v95 + 1;
          float v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_162:
          uint64_t result = (char *)sub_216169890(v97, v93, (uint64_t)a3);
          *(void *)v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 498) {
            goto LABEL_273;
          }
        }
        int v96 = *(_DWORD *)(a1 + 116);
        goto LABEL_156;
      case 0x1Fu:
        if (v12 != 250) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v12) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x10u;
        uint64_t v109 = v11 + 1;
        uint64_t v110 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_187;
        }
        int v111 = *v109;
        uint64_t v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v110);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 312) = v175 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v109 = v11 + 2;
LABEL_187:
          *(void *)v188 = v109;
          *(unsigned char *)(a1 + 312) = v110 != 0;
        }
        goto LABEL_273;
      case 0x21u:
        if (v12 != 8) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x20u;
        long long v112 = v11 + 1;
        uint64_t v113 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_192;
        }
        int v114 = *v112;
        uint64_t v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v113);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 313) = v176 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v112 = v11 + 2;
LABEL_192:
          *(void *)v188 = v112;
          *(unsigned char *)(a1 + 313) = v113 != 0;
        }
        goto LABEL_273;
      case 0x22u:
        if (v12 != 16) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        uint64_t v115 = v11 + 1;
        uint64_t v116 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_197;
        }
        int v117 = *v115;
        uint64_t v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v116);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 249) = v177 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v115 = v11 + 2;
LABEL_197:
          *(void *)v188 = v115;
          *(unsigned char *)(a1 + 249) = v116 != 0;
        }
        goto LABEL_273;
      case 0x23u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        int v118 = v11 + 1;
        uint64_t v119 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_202;
        }
        int v120 = *v118;
        uint64_t v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v119);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 248) = v178 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v118 = v11 + 2;
LABEL_202:
          *(void *)v188 = v118;
          *(unsigned char *)(a1 + 248) = v119 != 0;
        }
        goto LABEL_273;
      case 0x24u:
        if (v12 != 34) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 4u;
        uint64_t v121 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if (v121) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 168);
        goto LABEL_265;
      case 0x28u:
        if (v12 != 64) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        long long v123 = v11 + 1;
        LODWORD(v122) = *v11;
        if ((v122 & 0x80) == 0) {
          goto LABEL_211;
        }
        int v124 = *v123;
        uint64_t v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v122);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 252) = v179;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v123 = v11 + 2;
LABEL_211:
          *(void *)v188 = v123;
          *(_DWORD *)(a1 + 252) = v122;
        }
        goto LABEL_273;
      case 0x29u:
        if (v12 != 72) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x40u;
        long long v126 = v11 + 1;
        LODWORD(v125) = *v11;
        if ((v125 & 0x80) == 0) {
          goto LABEL_216;
        }
        int v127 = *v126;
        uint64_t v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v125);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 316) = v180;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v126 = v11 + 2;
LABEL_216:
          *(void *)v188 = v126;
          *(_DWORD *)(a1 + 316) = v125;
        }
        goto LABEL_273;
      case 0x2Au:
        if (v12 != 80) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x80u;
        v129 = v11 + 1;
        LODWORD(v128) = *v11;
        if ((v128 & 0x80) == 0) {
          goto LABEL_221;
        }
        int v130 = *v129;
        uint64_t v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v128);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 32sub_21613F89C(&a9, 0) = v181;
          if (!result) {
            return result;
          }
        }
        else
        {
          v129 = v11 + 2;
LABEL_221:
          *(void *)v188 = v129;
          *(_DWORD *)(a1 + 32sub_21613F89C(&a9, 0) = v128;
        }
        goto LABEL_273;
      case 0x2Bu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x100u;
        uint64_t v132 = v11 + 1;
        LODWORD(v131) = *v11;
        if ((v131 & 0x80) == 0) {
          goto LABEL_226;
        }
        int v133 = *v132;
        uint64_t v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v131);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 324) = v182;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v132 = v11 + 2;
LABEL_226:
          *(void *)v188 = v132;
          *(_DWORD *)(a1 + 324) = v131;
        }
        goto LABEL_273;
      case 0x2Cu:
        if (v12 != 98) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 8u;
        uint64_t v153 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if (v153) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_26797B3C8;
        int v137 = (uint64_t *)(a1 + 176);
        goto LABEL_270;
      case 0x2Du:
        if (v12 != 106) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10u;
        uint64_t v134 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if (v134) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_26797B348;
        int v137 = (uint64_t *)(a1 + 184);
        goto LABEL_270;
      case 0x2Eu:
        if (v12 != 114) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20u;
        uint64_t v138 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if (v138) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_26797B368;
        int v137 = (uint64_t *)(a1 + 192);
        goto LABEL_270;
      case 0x2Fu:
        if (v12 != 122) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40u;
        uint64_t v139 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if (v139) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_26797B388;
        int v137 = (uint64_t *)(a1 + 200);
        goto LABEL_270;
      case 0x30u:
        if (v12 != 130) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80u;
        uint64_t v140 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if (v140) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_26797B3A8;
        int v137 = (uint64_t *)(a1 + 208);
LABEL_270:
        uint64_t v152 = (std::string *)sub_21615B10C(v137, v136, (uint64_t)v135);
        goto LABEL_271;
      case 0x31u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        long long v141 = v11 + 1;
        uint64_t v142 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_247;
        }
        int v143 = *v141;
        uint64_t v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v142);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 25sub_21613F89C(&a9, 0) = v183 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v141 = v11 + 2;
LABEL_247:
          *(void *)v188 = v141;
          *(unsigned char *)(a1 + 25sub_21613F89C(&a9, 0) = v142 != 0;
        }
        goto LABEL_273;
      case 0x32u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        long long v144 = v11 + 1;
        uint64_t v145 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_252;
        }
        int v146 = *v144;
        uint64_t v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v145);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 244) = v184 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v144 = v11 + 2;
LABEL_252:
          *(void *)v188 = v144;
          *(unsigned char *)(a1 + 244) = v145 != 0;
        }
        goto LABEL_273;
      case 0x33u:
        if (v12 != 157) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        int v147 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 256) = v147;
LABEL_255:
        *(void *)v188 = v45;
        goto LABEL_273;
      case 0x34u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400000u;
        int v148 = v11 + 1;
        uint64_t v149 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_260;
        }
        int v150 = *v148;
        uint64_t v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          uint64_t result = (char *)sub_216169794((uint64_t)v11, v149);
          *(void *)v188 = result;
          *(void *)(a1 + 264) = v185;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v148 = v11 + 2;
LABEL_260:
          *(void *)v188 = v148;
          *(void *)(a1 + 264) = v149;
        }
        goto LABEL_273;
      case 0x35u:
        if (v12 != 170) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100u;
        uint64_t v151 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if (v151) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 216);
LABEL_265:
        uint64_t v152 = (std::string *)sub_21615AFD0(v25, (uint64_t)v24);
LABEL_271:
        uint64_t result = (char *)sub_216169890(v152, *(char **)v188, (uint64_t)a3);
        goto LABEL_272;
      default:
LABEL_275:
        if (v12) {
          BOOL v155 = (v12 & 7) == 4;
        }
        else {
          BOOL v155 = 1;
        }
        if (v155)
        {
          a3[10].i32[0] = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if (*v187)
          {
            float v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            float v156 = (std::string *)sub_21614CE8C(v187);
            uint64_t v11 = *(char **)v188;
          }
          uint64_t result = (char *)sub_216169D4C(v12, v156, v11, a3);
        }
        else
        {
          uint64_t result = (char *)sub_216161EEC((uint64_t *)(a1 + 16), v12, (unsigned __int8 *)v11, (uint64_t)&unk_26797EB78, v187, a3);
        }
LABEL_272:
        *(void *)v188 = result;
        if (!result) {
          return result;
        }
LABEL_273:
        int v154 = sub_21614CD4C((uint64_t)a3, (char **)v188, a3[11].i32[1]);
        uint64_t result = *(char **)v188;
        if (v154) {
          return result;
        }
        continue;
    }
    break;
  }
  while (1)
  {
    double v101 = result + 2;
    *(void *)v188 = result + 2;
    float v102 = *(int **)(a1 + 144);
    if (!v102) {
      break;
    }
    uint64_t v103 = *(int *)(a1 + 136);
    int v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *(_DWORD *)(a1 + 140))
      {
LABEL_173:
        sub_21616EBCC(a1 + 128, v104 + 1);
        float v102 = *(int **)(a1 + 144);
        int v104 = *v102;
      }
      *float v102 = v104 + 1;
      uint64_t v106 = *v7;
      if (!*v7) {
        operator new();
      }
      if (*(unsigned char *)(v106 + 24)) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v106 + 32) + 32) + 40))(*(void *)(*(void *)(v106 + 32) + 32), &unk_26C6BC178, 24);
      }
      unint64_t v105 = (std::string *)sub_21615A7E4((void *)v106, 0x18uLL, (uint64_t)sub_216156484);
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      uint64_t v107 = *(void *)(a1 + 144);
      uint64_t v108 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v108 + 1;
      *(void *)(v107 + 8 * v108 + 8) = v105;
      double v101 = *(char **)v188;
      goto LABEL_179;
    }
    *(_DWORD *)(a1 + 136) = v103 + 1;
    unint64_t v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_179:
    uint64_t result = (char *)sub_216169890(v105, v101, (uint64_t)a3);
    *(void *)v188 = result;
    if (!result) {
      return result;
    }
    if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 506) {
      goto LABEL_273;
    }
  }
  int v104 = *(_DWORD *)(a1 + 140);
  goto LABEL_173;
}

char *sub_21614F788(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 64);
  if (v6 >= 1)
  {
    for (int i = 0; v6 != i; ++i)
    {
      uint64_t v8 = sub_21615663C(a1 + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        int64_t v9 = *(void *)(v8 + 8);
        if (v9 > 127) {
          goto LABEL_13;
        }
      }
      else
      {
        int64_t v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0) {
          uint64_t v10 = (const void *)v8;
        }
        else {
          uint64_t v10 = *(const void **)v8;
        }
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = sub_21615BC58(a3, 1, v8, a2);
    }
  }
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    a2 = sub_21614AE6C((unint64_t *)a3, 2, (const void **)(*(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v13 = *(int *)(a1 + 272);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    unint64_t v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        unint64_t v18 = v15 >> 7;
        ++a2;
        unint64_t v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0) {
      goto LABEL_38;
    }
  }
LABEL_17:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v12 = *(int *)(a1 + 276);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    unint64_t v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        unint64_t v16 = v14 >> 7;
        ++a2;
        unint64_t v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  int v20 = *(_DWORD *)(a1 + 88);
  if (v20 >= 1)
  {
    for (int j = 0; v20 != j; ++j)
    {
      uint64_t v22 = sub_21615663C(a1 + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        int64_t v23 = *(void *)(v22 + 8);
        if (v23 > 127) {
          goto LABEL_50;
        }
      }
      else
      {
        int64_t v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0) {
          uint64_t v24 = (const void *)v22;
        }
        else {
          uint64_t v24 = *(const void **)v22;
        }
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = sub_21615BC58(a3, 5, v22, a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    unint64_t v26 = *(int *)(a1 + 224);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      unint64_t v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          unint64_t v31 = v28 >> 7;
          ++a2;
          unint64_t v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0) {
        goto LABEL_82;
      }
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_83;
  }
  if ((v11 & 2) == 0) {
    goto LABEL_53;
  }
LABEL_82:
  a2 = sub_21614AE6C((unint64_t *)a3, 7, (const void **)(*(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_86;
  }
LABEL_83:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  int v33 = *(_DWORD *)(a1 + 280);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0) {
      goto LABEL_56;
    }
LABEL_97:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    unint64_t v38 = *(int *)(a1 + 228);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      unint64_t v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          unint64_t v40 = v39 >> 7;
          ++a2;
          unint64_t v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0) {
        goto LABEL_108;
      }
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_58;
    }
LABEL_119:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    unint64_t v46 = *(int *)(a1 + 284);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      unint64_t v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          unint64_t v48 = v47 >> 7;
          ++a2;
          unint64_t v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0) {
        goto LABEL_130;
      }
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_60;
    }
LABEL_133:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    unint64_t v51 = *(int *)(a1 + 292);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      unint64_t v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          unint64_t v53 = v52 >> 7;
          ++a2;
          unint64_t v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0) {
        goto LABEL_144;
      }
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
    goto LABEL_62;
  }
LABEL_86:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v34 = *(void *)(a1 + 232);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    unint64_t v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        unint64_t v36 = v35 >> 7;
        ++a2;
        unint64_t v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0) {
      goto LABEL_97;
    }
  }
LABEL_56:
  if ((v11 & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_108:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v42 = *(int *)(a1 + 240);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    unint64_t v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        unint64_t v44 = v43 >> 7;
        ++a2;
        unint64_t v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0) {
      goto LABEL_119;
    }
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0) {
    goto LABEL_59;
  }
LABEL_130:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  int v50 = *(_DWORD *)(a1 + 288);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0) {
    goto LABEL_133;
  }
LABEL_60:
  if ((v11 & 0x20000000) == 0) {
    goto LABEL_61;
  }
LABEL_144:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v55 = *(int *)(a1 + 296);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    unint64_t v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        unint64_t v57 = v56 >> 7;
        ++a2;
        unint64_t v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
  }
LABEL_62:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v25 = *(int *)(a1 + 300);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    unint64_t v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        unint64_t v29 = v27 >> 7;
        ++a2;
        unint64_t v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if (*(unsigned char *)(a1 + 44))
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    char v59 = *(unsigned char *)(a1 + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    unint64_t v60 = *(int *)(a1 + 304);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      unint64_t v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          unint64_t v62 = v61 >> 7;
          ++a2;
          unint64_t v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  int v64 = *(_DWORD *)(a1 + 44);
  if ((v64 & 2) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    char v65 = *(unsigned char *)(a1 + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0) {
        goto LABEL_182;
      }
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  char v66 = *(unsigned char *)(a1 + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    char v67 = *(unsigned char *)(a1 + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  int v68 = *(_DWORD *)(a1 + 40);
  if ((v68 & 0x4000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    char v69 = *(unsigned char *)(a1 + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0) {
        goto LABEL_195;
      }
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  char v70 = *(unsigned char *)(a1 + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    char v71 = *(unsigned char *)(a1 + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  int v72 = *(_DWORD *)(a1 + 112);
  if (v72 >= 1)
  {
    for (int k = 0; v72 != k; ++k)
    {
      uint64_t v74 = sub_21615663C(a1 + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        int64_t v75 = *(void *)(v74 + 8);
        if (v75 > 127) {
          goto LABEL_207;
        }
      }
      else
      {
        int64_t v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0) {
          uint64_t v76 = (const void *)v74;
        }
        else {
          uint64_t v76 = *(const void **)v74;
        }
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = sub_21615BC58(a3, 30, v74, a2);
    }
  }
  int v77 = *(_DWORD *)(a1 + 136);
  if (v77 >= 1)
  {
    for (int m = 0; v77 != m; ++m)
    {
      uint64_t v79 = sub_21615663C(a1 + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        int64_t v80 = *(void *)(v79 + 8);
        if (v80 > 127) {
          goto LABEL_220;
        }
      }
      else
      {
        int64_t v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0) {
          uint64_t v81 = (const void *)v79;
        }
        else {
          uint64_t v81 = *(const void **)v79;
        }
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = sub_21615BC58(a3, 31, v79, a2);
    }
  }
  int v82 = *(_DWORD *)(a1 + 44);
  if ((v82 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    char v83 = *(unsigned char *)(a1 + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    char v84 = *(unsigned char *)(a1 + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  int v85 = *(_DWORD *)(a1 + 40);
  if ((v85 & 0x40000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    char v86 = *(unsigned char *)(a1 + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0) {
        goto LABEL_232;
      }
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  char v87 = *(unsigned char *)(a1 + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0) {
      goto LABEL_250;
    }
    goto LABEL_241;
  }
LABEL_240:
  a2 = sub_21614AE6C((unint64_t *)a3, 36, (const void **)(*(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v85 & 0x100000) == 0) {
    goto LABEL_250;
  }
LABEL_241:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v88 = *(int *)(a1 + 252);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    unint64_t v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        unint64_t v90 = v89 >> 7;
        ++a2;
        unint64_t v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  int v92 = *(_DWORD *)(a1 + 44);
  if ((v92 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    unint64_t v94 = *(int *)(a1 + 316);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      unint64_t v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          unint64_t v99 = v96 >> 7;
          ++a2;
          unint64_t v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0) {
        goto LABEL_273;
      }
    }
LABEL_252:
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0) {
    goto LABEL_252;
  }
LABEL_273:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v101 = *(int *)(a1 + 320);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    unint64_t v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        unint64_t v103 = v102 >> 7;
        ++a2;
        unint64_t v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
  }
LABEL_253:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v93 = *(int *)(a1 + 324);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    unint64_t v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        unint64_t v97 = v95 >> 7;
        ++a2;
        unint64_t v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  int v105 = *(_DWORD *)(a1 + 40);
  if ((v105 & 8) != 0)
  {
    a2 = sub_21614AE6C((unint64_t *)a3, 44, (const void **)(*(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0) {
        goto LABEL_287;
      }
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = sub_21614AE6C((unint64_t *)a3, 45, (const void **)(*(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0) {
      goto LABEL_288;
    }
    goto LABEL_300;
  }
LABEL_299:
  a2 = sub_21614AE6C((unint64_t *)a3, 46, (const void **)(*(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0) {
      goto LABEL_289;
    }
    goto LABEL_301;
  }
LABEL_300:
  a2 = sub_21614AE6C((unint64_t *)a3, 47, (const void **)(*(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0) {
      goto LABEL_290;
    }
    goto LABEL_302;
  }
LABEL_301:
  a2 = sub_21614AE6C((unint64_t *)a3, 48, (const void **)(*(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0) {
      goto LABEL_291;
    }
    goto LABEL_305;
  }
LABEL_302:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  char v110 = *(unsigned char *)(a1 + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0) {
      goto LABEL_292;
    }
    goto LABEL_308;
  }
LABEL_305:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  char v111 = *(unsigned char *)(a1 + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0) {
      goto LABEL_293;
    }
    goto LABEL_311;
  }
LABEL_308:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  int v112 = *(_DWORD *)(a1 + 256);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
    goto LABEL_294;
  }
LABEL_311:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  unint64_t v113 = *(void *)(a1 + 264);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
LABEL_294:
    a2 = sub_21614AE6C((unint64_t *)a3, 53, (const void **)(*(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL), a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  unint64_t v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      unint64_t v115 = v114 >> 7;
      ++a2;
      unint64_t v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
LABEL_295:
  uint64_t v106 = sub_216162CE4(a1 + 16, 200, 0x20000000, a2, a3);
  uint64_t v107 = v106;
  uint64_t v108 = *(void *)(a1 + 8);
  if ((v108 & 1) == 0) {
    return v107;
  }
  unint64_t v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    int v118 = *(void **)(v117 + 8);
    uint64_t v119 = *(void *)(v117 + 16);
  }
  else
  {
    int v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*a3 - (uint64_t)v106 >= (int)v119)
  {
    uint64_t v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }

  return sub_21615B7FC(a3, (char *)v118, v119, (unint64_t)v106);
}

uint64_t sub_216150950(uint64_t a1)
{
  uint64_t v2 = sub_216165A18(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  uint64_t v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = sub_21615663C(a1 + 56, v5);
      uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(v6 + 8);
      }
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while (v3 != v5);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 88);
  uint64_t v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_21615663C(a1 + 80, v10);
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while (v8 != v10);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 112);
  uint64_t v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    int v15 = 0;
    do
    {
      uint64_t v16 = sub_21615663C(a1 + 104, v15);
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(v16 + 8);
      }
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while (v13 != v15);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 136);
  uint64_t v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = sub_21615663C(a1 + 128, v20);
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while (v18 != v20);
  }
  unsigned int v23 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v23) {
    goto LABEL_33;
  }
  if (v23)
  {
    unint64_t v58 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v59 = *(unsigned __int8 *)(v58 + 23);
    uint64_t v60 = *(void *)(v58 + 8);
    if ((v59 & 0x80u) == 0) {
      uint64_t v60 = v59;
    }
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0) {
        goto LABEL_25;
      }
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  unint64_t v61 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v62 = *(unsigned __int8 *)(v61 + 23);
  uint64_t v63 = *(void *)(v61 + 8);
  if ((v62 & 0x80u) == 0) {
    uint64_t v63 = v62;
  }
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_134;
  }
LABEL_131:
  unint64_t v64 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
  uint64_t v66 = *(void *)(v64 + 8);
  if ((v65 & 0x80u) == 0) {
    uint64_t v66 = v65;
  }
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_137;
  }
LABEL_134:
  unint64_t v67 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  uint64_t v69 = *(void *)(v67 + 8);
  if ((v68 & 0x80u) == 0) {
    uint64_t v69 = v68;
  }
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0) {
      goto LABEL_28;
    }
LABEL_140:
    unint64_t v73 = *(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v74 = *(unsigned __int8 *)(v73 + 23);
    uint64_t v75 = *(void *)(v73 + 8);
    if ((v74 & 0x80u) == 0) {
      uint64_t v75 = v74;
    }
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  unint64_t v70 = *(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v71 = *(unsigned __int8 *)(v70 + 23);
  uint64_t v72 = *(void *)(v70 + 8);
  if ((v71 & 0x80u) == 0) {
    uint64_t v72 = v71;
  }
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0) {
    goto LABEL_140;
  }
LABEL_28:
  if ((v23 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_143:
  unint64_t v76 = *(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  uint64_t v78 = *(void *)(v76 + 8);
  if ((v77 & 0x80u) == 0) {
    uint64_t v78 = v77;
  }
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    unint64_t v24 = *(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v26 = *(void *)(v24 + 8);
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = v25;
    }
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0) {
    goto LABEL_50;
  }
  if ((v23 & 0x100) != 0)
  {
    unint64_t v79 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
    uint64_t v81 = *(void *)(v79 + 8);
    if ((v80 & 0x80u) == 0) {
      uint64_t v81 = v80;
    }
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0) {
        goto LABEL_37;
      }
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  int v82 = *(_DWORD *)(a1 + 224);
  uint64_t v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 10;
  }
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0) {
      goto LABEL_38;
    }
LABEL_158:
    v19 += ((9 * (__clz(*(void *)(a1 + 232) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
LABEL_154:
  int v85 = *(_DWORD *)(a1 + 228);
  uint64_t v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = 10;
  }
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0) {
    goto LABEL_158;
  }
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    int v27 = *(_DWORD *)(a1 + 240);
    uint64_t v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 10;
    }
    v19 += v29 + 1;
  }
LABEL_43:
  uint64_t v30 = v19 + 3;
  if ((v23 & 0x2000) == 0) {
    uint64_t v30 = v19;
  }
  if ((v23 & 0x4000) != 0) {
    v30 += 3;
  }
  if ((v23 & 0x8000) != 0) {
    uint64_t v19 = v30 + 3;
  }
  else {
    uint64_t v19 = v30;
  }
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    uint64_t v31 = v19 + 3;
    if ((v23 & 0x10000) == 0) {
      uint64_t v31 = v19;
    }
    if ((v23 & 0x20000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x40000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x80000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x100000) != 0)
    {
      int v32 = *(_DWORD *)(a1 + 252);
      uint64_t v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 10;
      }
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0) {
      uint64_t v19 = v31 + 6;
    }
    else {
      uint64_t v19 = v31;
    }
    if ((v23 & 0x400000) != 0) {
      v19 += ((9 * (__clz(*(void *)(a1 + 264) | 1) ^ 0x3F) + 73) >> 6) + 2;
    }
    if ((v23 & 0x800000) != 0)
    {
      int v35 = *(_DWORD *)(a1 + 272);
      uint64_t v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 10;
      }
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23)) {
    goto LABEL_94;
  }
  if ((v23 & 0x1000000) != 0)
  {
    int v38 = *(_DWORD *)(a1 + 276);
    uint64_t v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 10;
    }
    v19 += v40 + 1;
  }
  uint64_t v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0) {
    uint64_t v41 = v19;
  }
  if ((v23 & 0x4000000) != 0)
  {
    int v42 = *(_DWORD *)(a1 + 284);
    uint64_t v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 10;
    }
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0) {
    uint64_t v19 = v41 + 5;
  }
  else {
    uint64_t v19 = v41;
  }
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0) {
      goto LABEL_92;
    }
LABEL_164:
    int v91 = *(_DWORD *)(a1 + 296);
    uint64_t v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0) {
      uint64_t v93 = v92;
    }
    else {
      uint64_t v93 = 12;
    }
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_94;
      }
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  int v88 = *(_DWORD *)(a1 + 292);
  uint64_t v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0) {
    uint64_t v90 = v89;
  }
  else {
    uint64_t v90 = 10;
  }
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0) {
    goto LABEL_164;
  }
LABEL_92:
  if ((v23 & 0x40000000) == 0) {
    goto LABEL_93;
  }
LABEL_168:
  int v94 = *(_DWORD *)(a1 + 300);
  uint64_t v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0) {
    uint64_t v96 = v95;
  }
  else {
    uint64_t v96 = 12;
  }
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    int v97 = *(_DWORD *)(a1 + 304);
    uint64_t v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0) {
      uint64_t v99 = v98;
    }
    else {
      uint64_t v99 = 12;
    }
    v19 += v99;
  }
LABEL_94:
  int v45 = *(_DWORD *)(a1 + 44);
  if ((_BYTE)v45)
  {
    uint64_t v46 = v19 + 3;
    if ((v45 & 1) == 0) {
      uint64_t v46 = v19;
    }
    if ((v45 & 2) != 0) {
      v46 += 3;
    }
    if ((v45 & 4) != 0) {
      v46 += 3;
    }
    if ((v45 & 8) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x10) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x20) != 0) {
      uint64_t v19 = v46 + 3;
    }
    else {
      uint64_t v19 = v46;
    }
    if ((v45 & 0x40) != 0)
    {
      int v47 = *(_DWORD *)(a1 + 316);
      uint64_t v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 12;
      }
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      int v50 = *(_DWORD *)(a1 + 320);
      uint64_t v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 12;
      }
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    int v53 = *(_DWORD *)(a1 + 324);
    uint64_t v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0) {
      uint64_t v55 = v54;
    }
    else {
      uint64_t v55 = 12;
    }
    v19 += v55;
  }
  uint64_t v56 = *(void *)(a1 + 8);
  if (v56)
  {
    unint64_t v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0) {
      uint64_t v101 = *(void *)(v100 + 16);
    }
    else {
      uint64_t v101 = *(unsigned __int8 *)(v100 + 31);
    }
    v19 += v101;
  }
  *(_DWORD *)(a1 + 48) = v19;
  return v19;
}

unint64_t sub_216151200(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6BAC30, (const struct __class_type_info *)&unk_26C6BA570, 0))sub_21614D690(); {

  }
  return sub_216151288(a1, (uint64_t)lpsrc);
}

unint64_t sub_216151288(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v45, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    uint64_t v4 = sub_21615C18C(v45, "CHECK failed: (&from) != (this): ");
    sub_21615C2C8((uint64_t)&v44, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v45);
  }
  sub_2161606BC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_21615687C(a1 + 56, a2 + 56);
  sub_21615687C(a1 + 80, a2 + 80);
  sub_21615687C(a1 + 104, a2 + 104);
  unint64_t result = sub_21615687C(a1 + 128, a2 + 128);
  unsigned int v14 = *(_DWORD *)(a2 + 40);
  if (!(_BYTE)v14) {
    goto LABEL_47;
  }
  if (v14)
  {
    int v15 = (long long *)(*(void *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 1u;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    if (v16) {
      uint64_t v17 = (void *)*v17;
    }
    unint64_t result = sub_21615AF98((uint64_t *)(a1 + 152), v15, (uint64_t)v17);
    if ((v14 & 2) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v18 = (long long *)(*(void *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 2u;
  uint64_t v19 = *(void *)(a1 + 8);
  int v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if (v19) {
    int v20 = (void *)*v20;
  }
  unint64_t result = sub_21615AF98((uint64_t *)(a1 + 160), v18, (uint64_t)v20);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v21 = (long long *)(*(void *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 4u;
  uint64_t v22 = *(void *)(a1 + 8);
  unsigned int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if (v22) {
    unsigned int v23 = (void *)*v23;
  }
  unint64_t result = sub_21615AF98((uint64_t *)(a1 + 168), v21, (uint64_t)v23);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_32:
  unint64_t v24 = (long long *)(*(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 8u;
  uint64_t v25 = *(void *)(a1 + 8);
  uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if (v25) {
    uint64_t v26 = (void *)*v26;
  }
  unint64_t result = sub_21615AFC0((uint64_t *)(a1 + 176), v24, (uint64_t)v26);
  if ((v14 & 0x10) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0) {
      goto LABEL_20;
    }
LABEL_38:
    uint64_t v30 = (long long *)(*(void *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    uint64_t v31 = *(void *)(a1 + 8);
    int v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFELL);
    if (v31) {
      int v32 = (void *)*v32;
    }
    unint64_t result = sub_21615AFC0((uint64_t *)(a1 + 192), v30, (uint64_t)v32);
    if ((v14 & 0x40) == 0)
    {
LABEL_21:
      if ((v14 & 0x80) == 0) {
        goto LABEL_47;
      }
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  int v27 = (long long *)(*(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x10u;
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFELL);
  if (v28) {
    uint64_t v29 = (void *)*v29;
  }
  unint64_t result = sub_21615AFC0((uint64_t *)(a1 + 184), v27, (uint64_t)v29);
  if ((v14 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_20:
  if ((v14 & 0x40) == 0) {
    goto LABEL_21;
  }
LABEL_41:
  uint64_t v33 = (long long *)(*(void *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x40u;
  uint64_t v34 = *(void *)(a1 + 8);
  int v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFELL);
  if (v34) {
    int v35 = (void *)*v35;
  }
  unint64_t result = sub_21615AFC0((uint64_t *)(a1 + 200), v33, (uint64_t)v35);
  if ((v14 & 0x80) != 0)
  {
LABEL_44:
    uint64_t v36 = (long long *)(*(void *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x80u;
    uint64_t v37 = *(void *)(a1 + 8);
    int v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFFELL);
    if (v37) {
      int v38 = (void *)*v38;
    }
    unint64_t result = sub_21615AFC0((uint64_t *)(a1 + 208), v36, (uint64_t)v38);
  }
LABEL_47:
  if ((v14 & 0xFF00) == 0) {
    goto LABEL_58;
  }
  if ((v14 & 0x100) != 0)
  {
    uint64_t v41 = (long long *)(*(void *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x100u;
    uint64_t v42 = *(void *)(a1 + 8);
    uint64_t v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFELL);
    if (v42) {
      uint64_t v43 = (void *)*v43;
    }
    unint64_t result = sub_21615AF98((uint64_t *)(a1 + 216), v41, (uint64_t)v43);
    if ((v14 & 0x200) == 0)
    {
LABEL_50:
      if ((v14 & 0x400) == 0) {
        goto LABEL_51;
      }
      goto LABEL_97;
    }
  }
  else if ((v14 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  if ((v14 & 0x400) == 0)
  {
LABEL_51:
    if ((v14 & 0x800) == 0) {
      goto LABEL_52;
    }
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  if ((v14 & 0x800) == 0)
  {
LABEL_52:
    if ((v14 & 0x1000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_99;
  }
LABEL_98:
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  if ((v14 & 0x1000) == 0)
  {
LABEL_53:
    if ((v14 & 0x2000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a1 + 24sub_21613F89C(&a9, 0) = *(_DWORD *)(a2 + 240);
  if ((v14 & 0x2000) == 0)
  {
LABEL_54:
    if ((v14 & 0x4000) == 0) {
      goto LABEL_55;
    }
LABEL_101:
    *(unsigned char *)(a1 + 245) = *(unsigned char *)(a2 + 245);
    if ((v14 & 0x8000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
LABEL_100:
  *(unsigned char *)(a1 + 244) = *(unsigned char *)(a2 + 244);
  if ((v14 & 0x4000) != 0) {
    goto LABEL_101;
  }
LABEL_55:
  if ((v14 & 0x8000) != 0) {
LABEL_56:
  }
    *(unsigned char *)(a1 + 246) = *(unsigned char *)(a2 + 246);
LABEL_57:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_58:
  if ((v14 & 0xFF0000) == 0) {
    goto LABEL_69;
  }
  if ((v14 & 0x10000) != 0)
  {
    *(unsigned char *)(a1 + 247) = *(unsigned char *)(a2 + 247);
    if ((v14 & 0x20000) == 0)
    {
LABEL_61:
      if ((v14 & 0x40000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_105;
    }
  }
  else if ((v14 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  if ((v14 & 0x40000) == 0)
  {
LABEL_62:
    if ((v14 & 0x80000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_106;
  }
LABEL_105:
  *(unsigned char *)(a1 + 249) = *(unsigned char *)(a2 + 249);
  if ((v14 & 0x80000) == 0)
  {
LABEL_63:
    if ((v14 & 0x100000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_107;
  }
LABEL_106:
  *(unsigned char *)(a1 + 25sub_21613F89C(&a9, 0) = *(unsigned char *)(a2 + 250);
  if ((v14 & 0x100000) == 0)
  {
LABEL_64:
    if ((v14 & 0x200000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  if ((v14 & 0x200000) == 0)
  {
LABEL_65:
    if ((v14 & 0x400000) == 0) {
      goto LABEL_66;
    }
LABEL_109:
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    if ((v14 & 0x800000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
LABEL_108:
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  if ((v14 & 0x400000) != 0) {
    goto LABEL_109;
  }
LABEL_66:
  if ((v14 & 0x800000) != 0) {
LABEL_67:
  }
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
LABEL_68:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_69:
  if (!HIBYTE(v14)) {
    goto LABEL_79;
  }
  if ((v14 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
    if ((v14 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v14 & 0x4000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_121;
    }
  }
  else if ((v14 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *(_DWORD *)(a1 + 28sub_21613F89C(&a9, 0) = *(_DWORD *)(a2 + 280);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x8000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x10000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x20000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x40000000) == 0) {
      goto LABEL_77;
    }
LABEL_125:
    *(_DWORD *)(a1 + 30sub_21613F89C(&a9, 0) = *(_DWORD *)(a2 + 300);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_78;
    }
LABEL_126:
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
    goto LABEL_78;
  }
LABEL_124:
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  if ((v14 & 0x40000000) != 0) {
    goto LABEL_125;
  }
LABEL_77:
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_126;
  }
LABEL_78:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_79:
  int v39 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v39) {
    goto LABEL_90;
  }
  if (v39)
  {
    *(unsigned char *)(a1 + 308) = *(unsigned char *)(a2 + 308);
    if ((v39 & 2) == 0)
    {
LABEL_82:
      if ((v39 & 4) == 0) {
        goto LABEL_83;
      }
      goto LABEL_113;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(unsigned char *)(a1 + 309) = *(unsigned char *)(a2 + 309);
  if ((v39 & 4) == 0)
  {
LABEL_83:
    if ((v39 & 8) == 0) {
      goto LABEL_84;
    }
    goto LABEL_114;
  }
LABEL_113:
  *(unsigned char *)(a1 + 31sub_21613F89C(&a9, 0) = *(unsigned char *)(a2 + 310);
  if ((v39 & 8) == 0)
  {
LABEL_84:
    if ((v39 & 0x10) == 0) {
      goto LABEL_85;
    }
    goto LABEL_115;
  }
LABEL_114:
  *(unsigned char *)(a1 + 311) = *(unsigned char *)(a2 + 311);
  if ((v39 & 0x10) == 0)
  {
LABEL_85:
    if ((v39 & 0x20) == 0) {
      goto LABEL_86;
    }
    goto LABEL_116;
  }
LABEL_115:
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  if ((v39 & 0x20) == 0)
  {
LABEL_86:
    if ((v39 & 0x40) == 0) {
      goto LABEL_87;
    }
LABEL_117:
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
    if ((v39 & 0x80) == 0) {
      goto LABEL_89;
    }
    goto LABEL_88;
  }
LABEL_116:
  *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
  if ((v39 & 0x40) != 0) {
    goto LABEL_117;
  }
LABEL_87:
  if ((v39 & 0x80) != 0) {
LABEL_88:
  }
    *(_DWORD *)(a1 + 32sub_21613F89C(&a9, 0) = *(_DWORD *)(a2 + 320);
LABEL_89:
  *(_DWORD *)(a1 + 44) |= v39;
LABEL_90:
  if ((v39 & 0x100) != 0)
  {
    int v40 = *(_DWORD *)(a2 + 324);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(_DWORD *)(a1 + 324) = v40;
  }
  return result;
}

void sub_2161517E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161517FC(uint64_t a1)
{
  return sub_216161B4C(a1 + 16);
}

void *sub_216151804@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "sentencepiece.TrainerSpec");
}

uint64_t sub_216151814(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C3C90;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_26C6C3D30;
  sub_21615C794(a1 + 24, a2);
  *(void *)(a1 + 48) = 0;
  if (atomic_load_explicit(dword_26B4ABB28, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABB28);
  }
  *(void *)(a1 + 56) = &qword_26797EE40;
  *(void *)(a1 + 64) = &qword_26797EE40;
  *(void *)(a1 + 72) = &qword_26797EE40;
  *(_DWORD *)(a1 + 8sub_21613F89C(&a9, 0) = 16843008;
  return a1;
}

void sub_2161518C0(_Unwind_Exception *a1)
{
  sub_21615C874(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2161518D4(uint64_t a1)
{
  return a1;
}

uint64_t *sub_216151910(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    uint64_t v4 = sub_21615C18C(v15, "CHECK failed: GetArena() == nullptr: ");
    sub_21615C2C8((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v15);
  }
LABEL_4:
  if (*(uint64_t **)(a1 + 56) != &qword_26797EE40)
  {
    uint64_t v5 = sub_21614CC78((uint64_t *)(a1 + 56));
    uint64_t v6 = v5;
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x2166CA800](v6, 0x1012C40EC159624);
  }
  unint64_t result = (uint64_t *)(a1 + 64);
  if (*(uint64_t **)(a1 + 64) != &qword_26797EE40)
  {
    uint64_t v8 = sub_21614CC78(result);
    uint64_t v9 = v8;
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    unint64_t result = (uint64_t *)MEMORY[0x2166CA800](v9, 0x1012C40EC159624);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 72);
  int v10 = (uint64_t *)(a1 + 72);
  if (v11 != &qword_26797EE40)
  {
    uint64_t v12 = sub_21614CC78(v10);
    uint64_t v13 = v12;
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    return (uint64_t *)MEMORY[0x2166CA800](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_216151A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216151A7C(uint64_t a1)
{
  return sub_2161518D4(a1 - 16);
}

void sub_216151A84(uint64_t a1)
{
  sub_2161518D4(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216151ABC(uint64_t a1)
{
  sub_2161518D4(a1 - 16);

  JUMPOUT(0x2166CA800);
}

unsigned __int8 *sub_216151AF8(uint64_t a1)
{
  unint64_t result = sub_21616061C((unsigned __int8 *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) == 0)
    {
      if ((v3 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      unint64_t v5 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        if ((v3 & 4) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v5 = 0;
        *(unsigned char *)(v5 + 23) = 0;
        if ((v3 & 4) == 0) {
          goto LABEL_17;
        }
      }
      goto LABEL_14;
    }
    unint64_t v4 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_10;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_14:
    unint64_t v6 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
LABEL_17:
  if ((v3 & 0x78) != 0) {
    *(_DWORD *)(a1 + 8sub_21613F89C(&a9, 0) = 16843008;
  }
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(unsigned char **)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v8 + 8) = 0;
      *(unsigned char *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_216151C08(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v42 = a2;
  int v5 = 0;
  if ((sub_21614CD4C((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v8 = (char *)(*(void *)v42 + 1);
      unsigned int v9 = **(unsigned char **)v42;
      if ((char)**(unsigned char **)v42 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v17 = sub_2161697DC(*(uint64_t *)v42, v10 - 128);
          *(void *)uint64_t v42 = v17;
          if (!v17) {
            goto LABEL_67;
          }
          unint64_t v8 = (char *)v17;
          unsigned int v9 = v18;
          goto LABEL_8;
        }
        unint64_t v8 = (char *)(*(void *)v42 + 2);
      }
      *(void *)uint64_t v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 1u;
          uint64_t v11 = *(void *)(a1 + 8);
          uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v13 = (uint64_t *)(a1 + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 2u;
          uint64_t v19 = *(void *)(a1 + 8);
          uint64_t v12 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if (v19) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v13 = (uint64_t *)(a1 + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24) {
            goto LABEL_48;
          }
          v5 |= 0x10u;
          int v20 = v8 + 1;
          uint64_t v21 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *v20;
          uint64_t v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v36 = sub_216169794((uint64_t)v8, v21);
            *(void *)uint64_t v42 = v36;
            *(unsigned char *)(a1 + 81) = v37 != 0;
            if (!v36) {
              goto LABEL_67;
            }
          }
          else
          {
            int v20 = v8 + 2;
LABEL_29:
            *(void *)uint64_t v42 = v20;
            *(unsigned char *)(a1 + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32) {
            goto LABEL_48;
          }
          v5 |= 0x20u;
          unsigned int v23 = v8 + 1;
          uint64_t v24 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *v23;
          uint64_t v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            uint64_t v38 = sub_216169794((uint64_t)v8, v24);
            *(void *)uint64_t v42 = v38;
            *(unsigned char *)(a1 + 82) = v39 != 0;
            if (!v38) {
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v23 = v8 + 2;
LABEL_34:
            *(void *)uint64_t v42 = v23;
            *(unsigned char *)(a1 + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40) {
            goto LABEL_48;
          }
          v5 |= 0x40u;
          uint64_t v26 = v8 + 1;
          uint64_t v27 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          int v28 = *v26;
          uint64_t v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            uint64_t v40 = sub_216169794((uint64_t)v8, v27);
            *(void *)uint64_t v42 = v40;
            *(unsigned char *)(a1 + 83) = v41 != 0;
            if (!v40) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v26 = v8 + 2;
LABEL_39:
            *(void *)uint64_t v42 = v26;
            *(unsigned char *)(a1 + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 4u;
          uint64_t v29 = *(void *)(a1 + 8);
          uint64_t v12 = (void *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if (v29) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v13 = (uint64_t *)(a1 + 72);
LABEL_44:
          uint64_t v30 = (std::string *)sub_21615AFD0(v13, (uint64_t)v12);
          uint64_t v31 = (void *)sub_216169890(v30, *(char **)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            char v14 = v8 + 1;
            uint64_t v15 = *v8;
            if ((*v8 & 0x80000000) == 0) {
              goto LABEL_18;
            }
            int v16 = *v14;
            uint64_t v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              char v14 = v8 + 2;
LABEL_18:
              *(void *)uint64_t v42 = v14;
              *(unsigned char *)(a1 + 8sub_21613F89C(&a9, 0) = v15 != 0;
              goto LABEL_46;
            }
            uint64_t v34 = sub_216169794((uint64_t)v8, v15);
            *(void *)uint64_t v42 = v34;
            *(unsigned char *)(a1 + 8sub_21613F89C(&a9, 0) = v35 != 0;
            if (!v34) {
              goto LABEL_67;
            }
          }
          else
          {
LABEL_48:
            if (v9) {
              BOOL v32 = (v9 & 7) == 4;
            }
            else {
              BOOL v32 = 1;
            }
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if (*v7)
              {
                uint64_t v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                uint64_t v33 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
                unint64_t v8 = *(char **)v42;
              }
              uint64_t v31 = sub_216169D4C(v9, v33, v8, a3);
            }
            else
            {
              uint64_t v31 = sub_216161EEC((uint64_t *)(a1 + 24), v9, (unsigned __int8 *)v8, (uint64_t)&unk_26797ECC0, (unint64_t *)(a1 + 8), a3);
            }
LABEL_45:
            *(void *)uint64_t v42 = v31;
            if (!v31)
            {
LABEL_67:
              *(void *)uint64_t v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if (sub_21614CD4C((uint64_t)a3, (char **)v42, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 48) |= v5;
  return *(void *)v42;
}

char *sub_21615202C(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    unint64_t v4 = sub_21614AE6C(a3, 1, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_21614AE6C(a3, 2, (const void **)(*(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_11:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
  }
  char v7 = *(unsigned char *)(a1 + 81);
  *unint64_t v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_14:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
  }
  char v8 = *(unsigned char *)(a1 + 82);
  *unint64_t v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_17:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
  }
  char v9 = *(unsigned char *)(a1 + 83);
  *unint64_t v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
LABEL_20:
  unint64_t v4 = sub_21614AE6C(a3, 6, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0) {
    goto LABEL_24;
  }
LABEL_21:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
  }
  char v10 = *(unsigned char *)(a1 + 80);
  *(_WORD *)unint64_t v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  uint64_t v11 = sub_216162CE4(a1 + 24, 201, 0x20000000, v4, (uint64_t *)a3);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v12;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    int v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    int v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v11) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }

  return sub_21615B7FC((uint64_t *)a3, (char *)v16, v17, (unint64_t)v11);
}

uint64_t sub_216152240(uint64_t a1)
{
  uint64_t result = sub_216165A18(a1 + 24);
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0x7F) == 0) {
    goto LABEL_17;
  }
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_22:
    unint64_t v12 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v14 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = v13;
    }
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  unint64_t v9 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0) {
    goto LABEL_22;
  }
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    unint64_t v4 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v6 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = v5;
    }
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v7 = result + 3;
  if ((v3 & 8) == 0) {
    uint64_t v7 = result;
  }
  if ((v3 & 0x10) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x20) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t result = v7 + 2;
  }
  else {
    uint64_t result = v7;
  }
LABEL_17:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    result += v16;
  }
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

void sub_2161523A8(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6BAC30, (const struct __class_type_info *)&unk_26C6BA5C0, 0))sub_21614D690(); {

  }
  sub_216152430(a1, (uint64_t)lpsrc);
}

void sub_216152430(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    unint64_t v4 = sub_21615C18C(v24, "CHECK failed: (&from) != (this): ");
    sub_21615C2C8((uint64_t)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v24);
  }
  sub_2161606BC(a1 + 24, a2 + 24);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      unint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v9 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0x7F) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      sub_21615AF98((uint64_t *)(a1 + 56), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    uint64_t v17 = (long long *)(*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 2u;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_21615AF98((uint64_t *)(a1 + 64), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_30:
    int v20 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v21 = *(void *)(a1 + 8);
    int v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if (v21) {
      int v22 = (void *)*v22;
    }
    sub_21615AF98((uint64_t *)(a1 + 72), v20, (uint64_t)v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_34;
    }
LABEL_33:
    *(unsigned char *)(a1 + 8sub_21613F89C(&a9, 0) = *(unsigned char *)(a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0) {
        goto LABEL_20;
      }
      goto LABEL_35;
    }
LABEL_34:
    *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *(_DWORD *)(a1 + 48) |= v13;
        return;
      }
LABEL_21:
      *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
}

void sub_2161525FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216152614(uint64_t a1)
{
  return sub_216161B4C(a1 + 24);
}

void *sub_21615261C@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "sentencepiece.NormalizerSpec");
}

void *sub_21615262C(void *a1, uint64_t a2)
{
  *a1 = &unk_26C6C3DF0;
  a1[1] = a2;
  a1[2] = 0;
  if (atomic_load_explicit(dword_26B4ABB40, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABB40);
  }
  a1[3] = &qword_26797EE40;
  a1[4] = &qword_26797EE40;
  return a1;
}

uint64_t sub_21615269C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_2161526D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    unint64_t v4 = sub_21615C18C(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_21615C2C8((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v13);
  }
LABEL_4:
  uint64_t result = (uint64_t *)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_26797EE40)
  {
    uint64_t v6 = sub_21614CC78(result);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    uint64_t result = (uint64_t *)MEMORY[0x2166CA800](v7, 0x1012C40EC159624);
  }
  unint64_t v9 = *(uint64_t **)(a1 + 32);
  uint64_t v8 = (uint64_t *)(a1 + 32);
  if (v9 != &qword_26797EE40)
  {
    uint64_t v10 = sub_21614CC78(v8);
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    return (uint64_t *)MEMORY[0x2166CA800](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_2161527E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2161527FC(uint64_t a1)
{
  sub_21615269C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216152834(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  if ((v1 & 3) != 0)
  {
    if (v1)
    {
      unint64_t v2 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)unint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        if ((v1 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v3 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(result + 16) = 0;
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_2161528D0(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v21 = a2;
  if ((sub_21614CD4C((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v7 = (char *)(*(void *)v21 + 1);
      unsigned int v8 = **(unsigned char **)v21;
      if (((char)**(unsigned char **)v21 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((*v7 & 0x80000000) == 0) {
        break;
      }
      uint64_t v19 = sub_2161697DC(*(uint64_t *)v21, v9 - 128);
      *(void *)uint64_t v21 = v19;
      if (!v19)
      {
LABEL_35:
        *(void *)uint64_t v21 = 0;
        return *(void *)v21;
      }
      uint64_t v7 = (char *)v19;
      unsigned int v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v14 = *(void *)(a1 + 8);
          uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if (v14) {
            uint64_t v15 = (void *)*v15;
          }
          uint64_t v16 = (uint64_t *)(a1 + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v15 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if (v17) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v16 = (uint64_t *)(a1 + 24);
LABEL_27:
        uint64_t v18 = (std::string *)sub_21615AFD0(v16, (uint64_t)v15);
        int v13 = (void *)sub_216169890(v18, *(char **)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8) {
        BOOL v11 = (v8 & 7) == 4;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        a3[10].i32[0] = v8 - 1;
        return *(void *)v21;
      }
      if (*v6)
      {
        char v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        char v12 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
        uint64_t v7 = *(char **)v21;
      }
      int v13 = sub_216169D4C(v8, v12, v7, a3);
LABEL_28:
      *(void *)uint64_t v21 = v13;
      if (!v13) {
        goto LABEL_35;
      }
      if (sub_21614CD4C((uint64_t)a3, (char **)v21, a3[11].i32[1])) {
        return *(void *)v21;
      }
    }
    uint64_t v7 = (char *)(*(void *)v21 + 2);
LABEL_7:
    *(void *)uint64_t v21 = v7;
    goto LABEL_8;
  }
  return *(void *)v21;
}

char *sub_216152A7C(uint64_t a1, char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_21614AE6C(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_21614AE6C(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    uint64_t v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    uint64_t v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return sub_21615B7FC((uint64_t *)a3, (char *)v10, v11, (unint64_t)v4);
}

uint64_t sub_216152B68(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 2sub_21613F89C(&a9, 0) = v2;
  return v2;
}

unint64_t sub_216152C40(unint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6BAC30, (const struct __class_type_info *)&unk_26C6BA620, 0))sub_21614D690(); {

  }
  return sub_216152CC8(a1, (uint64_t)lpsrc);
}

unint64_t sub_216152CC8(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    uint64_t v4 = sub_21615C18C(v21, "CHECK failed: (&from) != (this): ");
    sub_21615C2C8((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_21615C2D0((uint64_t)v21);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(v3 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_21614CE8C((unint64_t *)(v3 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    uint64_t result = (unint64_t)std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 1u;
      uint64_t v15 = *(void *)(v3 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t result = sub_21615AF98((uint64_t *)(v3 + 24), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      uint64_t v17 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 2u;
      uint64_t v18 = *(void *)(v3 + 8);
      uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if (v18) {
        uint64_t v19 = (void *)*v19;
      }
      return sub_21615AF98((uint64_t *)(v3 + 32), v17, (uint64_t)v19);
    }
  }
  return result;
}

void sub_216152DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216152E14()
{
  return 1;
}

void *sub_216152E1C@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sub_216152E2C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C3B20;
  *(void *)(a1 + 8) = a2;
  sub_21615C794(a1 + 16, a2);
  *(void *)(a1 + 4sub_21613F89C(&a9, 0) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load_explicit(dword_26B4ABB58, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABB58);
  }
  return a1;
}

void sub_216152EB4(_Unwind_Exception *a1)
{
  sub_216156AA4(v2);
  sub_21615C874(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216152ED0(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    uint64_t v5 = sub_21615C18C(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
LABEL_4:
  sub_21614A6EC(v3);
  sub_216156AA4((uint64_t *)(a1 + 40));
  sub_21615C874(a1 + 16);
  return a1;
}

void sub_216152F70(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  sub_2160F7444(a1);
}

void sub_216152F94(uint64_t a1)
{
  sub_216152ED0(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216152FCC(uint64_t a1)
{
  sub_21616061C((unsigned __int8 *)(a1 + 16));
  uint64_t result = sub_21615671C(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_216153028(uint64_t a1, char *a2, int32x2_t *a3)
{
  char v23 = a2;
  if ((sub_21614CD4C((uint64_t)a3, &v23, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v6 = v23 + 1;
      unsigned int v7 = *v23;
      if ((*v23 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0) {
        break;
      }
      char v20 = (char *)sub_2161697DC((uint64_t)v23, v8 - 128);
      char v23 = v20;
      if (!v20) {
        return 0;
      }
      unint64_t v6 = v20;
      unsigned int v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = v6 - 1;
        while (1)
        {
          std::string::size_type v12 = (unsigned __int8 *)(v11 + 1);
          char v23 = v11 + 1;
          int v13 = *(int **)(a1 + 56);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(int *)(a1 + 48);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 52))
            {
LABEL_20:
              sub_21616EBCC(a1 + 40, v15 + 1);
              int v13 = *(int **)(a1 + 56);
              int v15 = *v13;
            }
            *int v13 = v15 + 1;
            uint64_t v16 = sub_21615585C(*(void *)(a1 + 40));
            uint64_t v17 = *(void *)(a1 + 56);
            uint64_t v18 = *(int *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            std::string::size_type v12 = (unsigned __int8 *)v23;
            goto LABEL_22;
          }
          *(_DWORD *)(a1 + 48) = v14 + 1;
          uint64_t v16 = *(void **)&v13[2 * v14 + 2];
LABEL_22:
          unint64_t v11 = (char *)sub_216153240(a3, (uint64_t)v16, v12);
          char v23 = v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_30;
          }
        }
        int v15 = *(_DWORD *)(a1 + 52);
        goto LABEL_20;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if (*v5)
        {
          uint64_t v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v19 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
          unint64_t v6 = v23;
        }
        int v10 = sub_216169D4C(v7, v19, v6, a3);
      }
      else
      {
        int v10 = sub_216161EEC((uint64_t *)(a1 + 16), v7, (unsigned __int8 *)v6, (uint64_t)&unk_26797ED40, (unint64_t *)(a1 + 8), a3);
      }
      char v23 = (char *)v10;
      if (!v10) {
        return 0;
      }
LABEL_30:
      if (sub_21614CD4C((uint64_t)a3, &v23, a3[11].i32[1])) {
        return v23;
      }
    }
    unint64_t v6 = v23 + 2;
LABEL_6:
    char v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

uint64_t sub_216153240(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_216169820((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_21614D1B8((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_2161528D0(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_216153308(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2) {
        a2 = sub_21615B6E8((uint64_t)a3, a2);
      }
      uint64_t v8 = sub_216156498(a1 + 40, i);
      *a2 = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          unsigned int v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        unsigned int v10 = a2 + 2;
      }
      a2 = sub_216152A7C(v8, v10, a3);
    }
  }
  int v14 = sub_216162CE4(a1 + 16, 200, 0x20000000, a2, (uint64_t *)a3);
  int v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v15;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v2sub_21613F89C(&a9, 0) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (void)v14) >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }

  return sub_21615B7FC((uint64_t *)a3, (char *)v19, v20, (unint64_t)v14);
}

uint64_t sub_2161534A0(uint64_t a1)
{
  uint64_t v2 = sub_216165A18(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 48);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_216152B68(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v4 += v13;
  }
  *(_DWORD *)(a1 + 64) = v4;
  return v4;
}

unint64_t sub_216153550(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6BAC30, (const struct __class_type_info *)&unk_26C6BA588, 0))sub_21614D690(); {

  }
  return sub_2161535D8(a1, (uint64_t)lpsrc);
}

unint64_t sub_2161535D8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    uint64_t v4 = sub_21615C18C(v15, "CHECK failed: (&from) != (this): ");
    sub_21615C2C8((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v15);
  }
  sub_2161606BC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unsigned int v11 = (const std::string::value_type *)v7;
    }
    else {
      unsigned int v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  return sub_216156B60(a1 + 40, a2 + 40);
}

void sub_2161536B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161536C8(uint64_t a1)
{
  return sub_216161B4C(a1 + 16);
}

void *sub_2161536D0@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "sentencepiece.SelfTestData");
}

void *sub_2161536E0(void *a1, uint64_t a2)
{
  *a1 = &unk_26C6C4228;
  a1[1] = a2;
  sub_21615C794((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load_explicit(dword_26B4ABAB8, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABAB8);
  }
  a1[6] = &qword_26797EE40;
  a1[7] = 0x100000000;
  return a1;
}

void sub_216153760(_Unwind_Exception *a1)
{
  sub_21615C874(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216153774(uint64_t a1)
{
  return a1;
}

uint64_t sub_2161537B0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    uint64_t v4 = sub_21615C18C(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_21615C2D0((uint64_t)v10);
  }
LABEL_4:
  unint64_t v6 = *(uint64_t **)(v1 + 48);
  uint64_t v5 = (uint64_t *)(v1 + 48);
  if (v6 != &qword_26797EE40)
  {
    uint64_t v7 = sub_21614CC78(v5);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    return MEMORY[0x2166CA800](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_216153878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216153894(uint64_t a1)
{
  sub_216153774(a1);

  JUMPOUT(0x2166CA800);
}

unsigned __int8 *sub_2161538CC(uint64_t a1)
{
  uint64_t result = sub_21616061C((unsigned __int8 *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  if ((v3 & 6) != 0) {
    *(void *)(a1 + 56) = 0x100000000;
  }
  *(_DWORD *)(a1 + 4sub_21613F89C(&a9, 0) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(unsigned char **)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v6 + 8) = 0;
      *(unsigned char *)(v6 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_216153964(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v27 = a2;
  int v5 = 0;
  if ((sub_21614CD4C((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v27 + 1);
      unsigned int v9 = **(unsigned char **)v27;
      if (((char)**(unsigned char **)v27 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0) {
        break;
      }
      uint64_t v22 = sub_2161697DC(*(uint64_t *)v27, v10 - 128);
      *(void *)uint64_t v27 = v22;
      if (!v22) {
        goto LABEL_48;
      }
      uint64_t v8 = (char *)v22;
      unsigned int v9 = v23;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          int v15 = v8 + 1;
          unint64_t v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_24;
          }
          int v17 = *v15;
          int v18 = v16 + (v17 << 7);
          unint64_t v16 = (v18 - 128);
          if (v17 < 0)
          {
            *(void *)uint64_t v27 = sub_216169794((uint64_t)v8, (v18 - 128));
            if (!*(void *)v27)
            {
LABEL_48:
              *(void *)uint64_t v27 = 0;
              goto LABEL_2;
            }
            unint64_t v16 = v25;
          }
          else
          {
            int v15 = v8 + 2;
LABEL_24:
            *(void *)uint64_t v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if (*v7) {
              uint64_t v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else {
              uint64_t v26 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
            }
            sub_216169680(3, v16, v26);
          }
          else
          {
            *(_DWORD *)(a1 + 40) |= 4u;
            *(_DWORD *)(a1 + 6sub_21613F89C(&a9, 0) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)v8;
          *(void *)uint64_t v27 = v8 + 4;
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v19 = *(void *)(a1 + 8);
        uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if (v19) {
          uint64_t v20 = (void *)*v20;
        }
        uint64_t v21 = (std::string *)sub_21615AFD0((uint64_t *)(a1 + 48), (uint64_t)v20);
        char v14 = (void *)sub_216169890(v21, *(char **)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9) {
        BOOL v13 = (v9 & 7) == 4;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if (*v7)
        {
          uint64_t v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v24 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
          uint64_t v8 = *(char **)v27;
        }
        char v14 = sub_216169D4C(v9, v24, v8, a3);
      }
      else
      {
        char v14 = sub_216161EEC((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)qword_26797ED88, (unint64_t *)(a1 + 8), a3);
      }
LABEL_37:
      *(void *)uint64_t v27 = v14;
      if (!v14) {
        goto LABEL_48;
      }
LABEL_38:
      if (sub_21614CD4C((uint64_t)a3, (char **)v27, a3[11].i32[1])) {
        goto LABEL_2;
      }
    }
    uint64_t v8 = (char *)(*(void *)v27 + 2);
LABEL_7:
    *(void *)uint64_t v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v27;
}

char *sub_216153BEC(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6)
  {
    unint64_t v4 = sub_21614AE6C(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  *unint64_t v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_21615B6E8((uint64_t)a3, v4);
    }
    unint64_t v8 = *(int *)(a1 + 60);
    *unint64_t v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unint64_t v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          unint64_t v10 = v9 >> 7;
          ++v4;
          unint64_t v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  std::string::size_type v12 = sub_216162CE4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  BOOL v13 = v12;
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return v13;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    int v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    int v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)v12) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }

  return sub_21615B7FC((uint64_t *)a3, (char *)v17, v18, (unint64_t)v12);
}

uint64_t sub_216153D98(uint64_t a1)
{
  uint64_t result = sub_216165A18(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0) {
      result += 5;
    }
    if ((v3 & 4) != 0)
    {
      int v7 = *(_DWORD *)(a1 + 60);
      if (v7 < 0) {
        uint64_t v8 = 11;
      }
      else {
        uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      result += v8;
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    result += v11;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_216153E7C(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6BAC30, (const struct __class_type_info *)&unk_26C6BA678, 0))sub_21614D690(); {

  }
  sub_216153F04(a1, (uint64_t)lpsrc);
}

void sub_216153F04(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    unint64_t v4 = sub_21615C18C(v18, "CHECK failed: (&from) != (this): ");
    sub_21615C2C8((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v18);
  }
  sub_2161606BC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 7) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = (void *)*v16;
      }
      sub_21615AF98((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *(_DWORD *)(a1 + 40) |= v13;
          return;
        }
LABEL_17:
        *(_DWORD *)(a1 + 6sub_21613F89C(&a9, 0) = *(_DWORD *)(a2 + 60);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    if ((v13 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
}

void sub_216154040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216154058(uint64_t a1)
{
  return sub_216161B4C(a1 + 16);
}

void *sub_216154060@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sub_216154070(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C3850;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_26C6C3968;
  sub_21615C794(a1 + 24, a2);
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (atomic_load_explicit(dword_26B4ABAD0, memory_order_acquire)) {
    sub_216167D24(dword_26B4ABAD0);
  }
  *(_OWORD *)(a1 + 8sub_21613F89C(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_216154120(_Unwind_Exception *a1)
{
  sub_216156D10(v2);
  sub_21615C874(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216154140(uint64_t a1)
{
  return a1;
}

uint64_t sub_216154184(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    unint64_t v4 = sub_21615C18C(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_21615C2C8((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_21615C2D0((uint64_t)v13);
  }
LABEL_4:
  if ((_UNKNOWN *)v1 != &unk_26797EDC8)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 80);
    if (v5)
    {
      unint64_t v6 = sub_21614DADC(v5);
      MEMORY[0x2166CA800](v6, 0x10A1C4074230EEALL);
    }
    uint64_t v7 = *(void *)(v1 + 88);
    if (v7)
    {
      uint64_t v8 = sub_2161518D4(v7);
      MEMORY[0x2166CA800](v8, 0x10A1C402CDD3876);
    }
    uint64_t v9 = *(void *)(v1 + 96);
    if (v9)
    {
      uint64_t v10 = sub_216152ED0(v9);
      MEMORY[0x2166CA800](v10, 0x10A1C4075D007F8);
    }
    uint64_t result = *(void *)(v1 + 104);
    if (result)
    {
      uint64_t v11 = sub_2161518D4(result);
      return MEMORY[0x2166CA800](v11, 0x10A1C402CDD3876);
    }
  }
  return result;
}

void sub_216154294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161542B0(uint64_t a1)
{
  return sub_216154140(a1 - 16);
}

void sub_2161542B8(uint64_t a1)
{
  sub_216154140(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2161542F0(uint64_t a1)
{
  sub_216154140(a1 - 16);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21615432C(uint64_t a1)
{
  sub_21616061C((unsigned __int8 *)(a1 + 24));
  uint64_t result = (uint64_t)sub_2161567CC((unsigned __int8 *)(a1 + 56));
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0xF) != 0)
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 80);
      if (!v4)
      {
        sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        uint64_t v5 = sub_21615C18C(v15, "CHECK failed: trainer_spec_ != nullptr: ");
        sub_21615C2C8((uint64_t)&v14, (const char **)&v5->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)v15);
        uint64_t v4 = *(void *)(a1 + 80);
      }
      uint64_t result = sub_21614DE48(v4);
    }
    if ((v3 & 2) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (!v6)
      {
        sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        uint64_t v7 = sub_21615C18C(v15, "CHECK failed: normalizer_spec_ != nullptr: ");
        sub_21615C2C8((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)v15);
        uint64_t v6 = *(void *)(a1 + 88);
      }
      uint64_t result = (uint64_t)sub_216151AF8(v6);
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 96);
      if (!v8)
      {
        sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        uint64_t v9 = sub_21615C18C(v15, "CHECK failed: self_test_data_ != nullptr: ");
        sub_21615C2C8((uint64_t)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)v15);
        uint64_t v8 = *(void *)(a1 + 96);
      }
      uint64_t result = sub_216152FCC(v8);
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v10 = *(void *)(a1 + 104);
      if (!v10)
      {
        sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        uint64_t v11 = sub_21615C18C(v15, "CHECK failed: denormalizer_spec_ != nullptr: ");
        sub_21615C2C8((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)v15);
        uint64_t v10 = *(void *)(a1 + 104);
      }
      uint64_t result = (uint64_t)sub_216151AF8(v10);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 31) < 0)
    {
      **(unsigned char **)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v13 + 8) = 0;
      *(unsigned char *)(v13 + 31) = 0;
    }
  }
  return result;
}

void sub_2161544E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_216154510(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v30 = a2;
  if ((sub_21614CD4C((uint64_t)a3, &v30, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (void *)(a1 + 8);
    while (2)
    {
      uint64_t v7 = v30 + 1;
      unsigned int v8 = *v30;
      if (*v30 < 0)
      {
        unsigned int v9 = v8 + (*v7 << 7);
        unsigned int v8 = v9 - 128;
        if (*v7 < 0)
        {
          uint64_t v27 = (char *)sub_2161697DC((uint64_t)v30, v9 - 128);
          uint64_t v30 = v27;
          if (!v27) {
            return 0;
          }
          uint64_t v7 = v27;
          unsigned int v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10) {
                goto LABEL_49;
              }
              uint64_t v10 = v7 - 1;
              break;
            case 2u:
              if (v8 != 18) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 1u;
              uint64_t v18 = *(void *)(a1 + 80);
              if (!v18)
              {
                uint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  uint64_t v19 = (void *)*v19;
                }
                uint64_t v18 = sub_2161556BC((uint64_t)v19);
                *(void *)(a1 + 8sub_21613F89C(&a9, 0) = v18;
                uint64_t v7 = v30;
              }
              uint64_t v20 = (char *)sub_216154970(a3, v18, (unsigned __int8 *)v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 2u;
              uint64_t v21 = *(void *)(a1 + 88);
              if (v21) {
                goto LABEL_45;
              }
              uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                uint64_t v22 = (void *)*v22;
              }
              uint64_t v21 = sub_21615578C((uint64_t)v22);
              *(void *)(a1 + 88) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 4u;
              uint64_t v23 = *(void *)(a1 + 96);
              if (!v23)
              {
                uint64_t v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  uint64_t v24 = (void *)*v24;
                }
                uint64_t v23 = sub_21615592C((uint64_t)v24);
                *(void *)(a1 + 96) = v23;
                uint64_t v7 = v30;
              }
              uint64_t v20 = (char *)sub_216154B00(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 8u;
              uint64_t v21 = *(void *)(a1 + 104);
              if (v21) {
                goto LABEL_45;
              }
              unint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                unint64_t v25 = (void *)*v25;
              }
              uint64_t v21 = sub_21615578C((uint64_t)v25);
              *(void *)(a1 + 104) = v21;
LABEL_44:
              uint64_t v7 = v30;
LABEL_45:
              uint64_t v20 = (char *)sub_216154A38(a3, v21, (unsigned __int8 *)v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8) {
                BOOL v26 = (v8 & 7) == 4;
              }
              else {
                BOOL v26 = 1;
              }
              if (v26)
              {
                a3[10].i32[0] = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if (*v6)
                {
                  uint64_t v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  uint64_t v29 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
                  uint64_t v7 = v30;
                }
                uint64_t v20 = (char *)sub_216169D4C(v8, v29, v7, a3);
              }
              else
              {
                uint64_t v20 = (char *)sub_216161EEC((uint64_t *)(a1 + 24), v8, (unsigned __int8 *)v7, (uint64_t)&unk_26797EDC8, (unint64_t *)(a1 + 8), a3);
              }
LABEL_46:
              uint64_t v30 = v20;
              if (!v20) {
                return 0;
              }
LABEL_47:
              if (sub_21614CD4C((uint64_t)a3, &v30, a3[11].i32[1])) {
                return v30;
              }
              continue;
          }
          while (1)
          {
            uint64_t v11 = (unsigned __int8 *)(v10 + 1);
            uint64_t v30 = v10 + 1;
            uint64_t v12 = *(int **)(a1 + 72);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a1 + 64);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a1 + 68))
              {
LABEL_16:
                sub_21616EBCC(a1 + 56, v14 + 1);
                uint64_t v12 = *(int **)(a1 + 72);
                int v14 = *v12;
              }
              *uint64_t v12 = v14 + 1;
              uint64_t v15 = sub_2161559FC(*(void *)(a1 + 56));
              uint64_t v16 = *(void *)(a1 + 72);
              uint64_t v17 = *(int *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              uint64_t v11 = (unsigned __int8 *)v30;
              goto LABEL_18;
            }
            *(_DWORD *)(a1 + 64) = v13 + 1;
            uint64_t v15 = *(void **)&v12[2 * v13 + 2];
LABEL_18:
            uint64_t v10 = (char *)sub_2161548A8(a3, (uint64_t)v15, v11);
            uint64_t v30 = v10;
            if (!v10) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v10 || *v10 != 10) {
              goto LABEL_47;
            }
          }
          int v14 = *(_DWORD *)(a1 + 68);
          goto LABEL_16;
        }
        uint64_t v7 = v30 + 2;
      }
      break;
    }
    uint64_t v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

uint64_t sub_2161548A8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_216169820((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_21614D1B8((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_216153964(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_216154970(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_216169820((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_21614D1B8((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (uint64_t)sub_21614E110(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_216154A38(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_216169820((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_21614D1B8((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_216151C08(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_216154B00(int32x2_t *a1, uint64_t a2, char *a3)
{
  int v6 = *a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_216169820((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = (char *)result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = a3 + 1;
  }
  int v11 = sub_21614D1B8((uint64_t)a1, (int)v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (uint64_t)sub_216153028(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_216154BC8(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 64);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2) {
        a2 = sub_21615B6E8((uint64_t)a3, a2);
      }
      uint64_t v8 = sub_216128EF4(a1 + 56, i);
      *a2 = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          unsigned int v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        unsigned int v10 = a2 + 2;
      }
      a2 = sub_216153BEC(v8, v10, a3);
    }
  }
  int v14 = *(_DWORD *)(a1 + 48);
  if (v14)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    uint64_t v15 = *(void *)(a1 + 80);
    *a2 = 18;
    unsigned int v16 = *(_DWORD *)(v15 + 48);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        uint64_t v17 = a2 + 3;
        do
        {
          *(v17 - 1) = v18 | 0x80;
          unsigned int v19 = v18 >> 7;
          ++v17;
          unsigned int v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        uint64_t v17 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v16;
      uint64_t v17 = a2 + 2;
    }
    a2 = sub_21614F788(v15, v17, (uint64_t *)a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  uint64_t v21 = *(void *)(a1 + 88);
  *a2 = 26;
  unsigned int v22 = *(_DWORD *)(v21 + 52);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    unsigned int v24 = v22 >> 7;
    if (v22 >> 14)
    {
      uint64_t v23 = a2 + 3;
      do
      {
        *(v23 - 1) = v24 | 0x80;
        unsigned int v25 = v24 >> 7;
        ++v23;
        unsigned int v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      uint64_t v23 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v22;
    uint64_t v23 = a2 + 2;
  }
  a2 = sub_21615202C(v21, v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0) {
      goto LABEL_58;
    }
    goto LABEL_48;
  }
LABEL_38:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_21615B6E8((uint64_t)a3, a2);
  }
  uint64_t v27 = *(void *)(a1 + 96);
  *a2 = 34;
  unsigned int v28 = *(_DWORD *)(v27 + 64);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    unsigned int v30 = v28 >> 7;
    if (v28 >> 14)
    {
      uint64_t v29 = a2 + 3;
      do
      {
        *(v29 - 1) = v30 | 0x80;
        unsigned int v31 = v30 >> 7;
        ++v29;
        unsigned int v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      uint64_t v29 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v28;
    uint64_t v29 = a2 + 2;
  }
  a2 = sub_216153308(v27, v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_21615B6E8((uint64_t)a3, a2);
    }
    uint64_t v33 = *(void *)(a1 + 104);
    *a2 = 42;
    unsigned int v34 = *(_DWORD *)(v33 + 52);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      unsigned int v36 = v34 >> 7;
      if (v34 >> 14)
      {
        uint64_t v35 = a2 + 3;
        do
        {
          *(v35 - 1) = v36 | 0x80;
          unsigned int v37 = v36 >> 7;
          ++v35;
          unsigned int v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        uint64_t v35 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v34;
      uint64_t v35 = a2 + 2;
    }
    a2 = sub_21615202C(v33, v35, a3);
  }
LABEL_58:
  uint64_t v39 = sub_216162CE4(a1 + 24, 200, 0x20000000, a2, (uint64_t *)a3);
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(a1 + 8);
  if ((v41 & 1) == 0) {
    return v40;
  }
  unint64_t v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    char v44 = *(void **)(v43 + 8);
    uint64_t v45 = *(void *)(v43 + 16);
  }
  else
  {
    char v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if ((uint64_t)(*a3 - (void)v39) >= (int)v45)
  {
    uint64_t v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }

  return sub_21615B7FC((uint64_t *)a3, (char *)v44, v45, (unint64_t)v39);
}

uint64_t sub_216154FD4(uint64_t a1)
{
  uint64_t v2 = sub_216165A18(a1 + 24);
  uint64_t v3 = *(int *)(a1 + 64);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_216153D98(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  if ((v10 & 0xF) == 0) {
    goto LABEL_13;
  }
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_16:
    uint64_t v15 = sub_216152240(*(void *)(a1 + 88));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  uint64_t v14 = sub_216150950(*(void *)(a1 + 80));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_10:
  if ((v10 & 4) == 0) {
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v16 = sub_2161534A0(*(void *)(a1 + 96));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    uint64_t v11 = sub_216152240(*(void *)(a1 + 104));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    v4 += v18;
  }
  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

void sub_216155160(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6BAC30, (const struct __class_type_info *)&unk_26C6BA500, 0))sub_21614D690(); {

  }
  sub_2161551E8(a1, (uint64_t)lpsrc);
}

void sub_2161551E8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    uint64_t v4 = sub_21615C18C(v27, "CHECK failed: (&from) != (this): ");
    sub_21615C2C8((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v27);
  }
  sub_2161606BC(a1 + 24, a2 + 24);
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if (*v5) {
      uint64_t v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_21614CE8C((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v7 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v8;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v7 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v7 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v7 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_216156DCC(a1 + 56, a2 + 56);
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0xF) != 0)
  {
    if (v13)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v14 = *(void *)(a1 + 80);
      if (!v14)
      {
        uint64_t v15 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v14 = sub_2161556BC((uint64_t)v15);
        *(void *)(a1 + 8sub_21613F89C(&a9, 0) = v14;
      }
      if (*(void *)(a2 + 80)) {
        uint64_t v16 = *(void **)(a2 + 80);
      }
      else {
        uint64_t v16 = &unk_26797EB78;
      }
      sub_216151288(v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 2u;
      uint64_t v17 = *(void *)(a1 + 88);
      if (!v17)
      {
        uint64_t v18 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v18 = (void *)*v18;
        }
        uint64_t v17 = sub_21615578C((uint64_t)v18);
        *(void *)(a1 + 88) = v17;
      }
      if (*(void *)(a2 + 88)) {
        unsigned int v19 = *(void **)(a2 + 88);
      }
      else {
        unsigned int v19 = &unk_26797ECC0;
      }
      sub_216152430(v17, (uint64_t)v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0) {
          return;
        }
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v20 = *(void *)(a1 + 96);
    if (!v20)
    {
      uint64_t v21 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if (*v5) {
        uint64_t v21 = (void *)*v21;
      }
      uint64_t v20 = sub_21615592C((uint64_t)v21);
      *(void *)(a1 + 96) = v20;
    }
    if (*(void *)(a2 + 96)) {
      unsigned int v22 = *(void **)(a2 + 96);
    }
    else {
      unsigned int v22 = &unk_26797ED40;
    }
    sub_2161535D8(v20, (uint64_t)v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *(_DWORD *)(a1 + 48) |= 8u;
      uint64_t v23 = *(void *)(a1 + 104);
      if (!v23)
      {
        unsigned int v24 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          unsigned int v24 = (void *)*v24;
        }
        uint64_t v23 = sub_21615578C((uint64_t)v24);
        *(void *)(a1 + 104) = v23;
      }
      if (*(void *)(a2 + 104)) {
        unsigned int v25 = *(void **)(a2 + 104);
      }
      else {
        unsigned int v25 = &unk_26797ECC0;
      }
      sub_216152430(v23, (uint64_t)v25);
    }
  }
}

void sub_21615540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216155424(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_21615432C(a1);
    sub_2161551E8(a1, a2);
  }
}

uint64_t sub_216155470(uint64_t a1)
{
  uint64_t result = sub_216161B4C(a1 + 24);
  if (!result) {
    return result;
  }
  uint64_t result = sub_216155654(a1 + 56);
  if (!result) {
    return result;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    if (!v4)
    {
      sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      uint64_t v5 = sub_21615C18C(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      sub_21615C2C8((uint64_t)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v13);
      uint64_t v4 = *(void *)(a1 + 80);
    }
    uint64_t result = sub_216161B4C(v4 + 16);
    if (!result) {
      return result;
    }
    int v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 88);
    if (!v6)
    {
      sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      unint64_t v7 = sub_21615C18C(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      sub_21615C2C8((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v13);
      uint64_t v6 = *(void *)(a1 + 88);
    }
    uint64_t result = sub_216161B4C(v6 + 24);
    if (!result) {
      return result;
    }
    int v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0) {
      return 1;
    }
    uint64_t v10 = *(void *)(a1 + 104);
    if (!v10)
    {
      sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      uint64_t v11 = sub_21615C18C(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_21615C2C8((uint64_t)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v13);
      uint64_t v10 = *(void *)(a1 + 104);
    }
    uint64_t result = sub_216161B4C(v10 + 24);
    if (result) {
      return 1;
    }
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 96);
  if (!v8)
  {
    sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    uint64_t v9 = sub_21615C18C(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    sub_21615C2C8((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v13);
    uint64_t v8 = *(void *)(a1 + 96);
  }
  uint64_t result = sub_216161B4C(v8 + 16);
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    goto LABEL_18;
  }
  return result;
}

void sub_216155624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216155654(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_216128EF4(a1, v2);
  }
  while ((sub_216161B4C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

void *sub_2161556AC@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "sentencepiece.ModelProto");
}

uint64_t sub_2161556BC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26C6BA570, 328);
  }
  uint64_t v2 = sub_21615AAE0(a1, 328);
  sub_21614D96C(v2, a1);
  return v2;
}

void sub_216155768(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t sub_21615578C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26C6BA5C0, 88);
  }
  uint64_t v2 = sub_21615AAE0(a1, 88);
  sub_216151814(v2, a1);
  return v2;
}

void sub_216155838(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

void *sub_21615585C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26C6BA620, 40);
  }
  uint64_t v2 = (void *)sub_21615AAE0(a1, 40);
  sub_21615262C(v2, a1);
  return v2;
}

void sub_216155908(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t sub_21615592C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26C6BA588, 72);
  }
  uint64_t v2 = sub_21615AAE0(a1, 72);
  sub_216152E2C(v2, a1);
  return v2;
}

void sub_2161559D8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

void *sub_2161559FC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26C6BA678, 64);
  }
  uint64_t v2 = (void *)sub_21615AAE0(a1, 64);
  sub_2161536E0(v2, a1);
  return v2;
}

void sub_216155AA8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t sub_216155ACC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_26C6BA500, 112);
  }
  uint64_t v2 = sub_21615AAE0(a1, 112);
  sub_216154070(v2, a1);
  return v2;
}

void sub_216155B78(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_216155B9C()
{
  return sub_2161556BC(0);
}

uint64_t sub_216155BA4(uint64_t a1, uint64_t a2)
{
  return sub_2161556BC(a2);
}

uint64_t sub_216155BAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_216155BB4()
{
  return sub_21615578C(0);
}

uint64_t sub_216155BBC(uint64_t a1, uint64_t a2)
{
  return sub_21615578C(a2);
}

uint64_t sub_216155BC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_216155BCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t sub_216155BD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

uint64_t sub_216155BDC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 82);
}

uint64_t sub_216155BE4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83);
}

uint64_t sub_216155BEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_216155BF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 66);
}

uint64_t sub_216155BFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

uint64_t sub_216155C04(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

void *sub_216155C0C()
{
  return sub_21615585C(0);
}

void *sub_216155C14(uint64_t a1, uint64_t a2)
{
  return sub_21615585C(a2);
}

uint64_t sub_216155C1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_216155C24()
{
  return sub_21615592C(0);
}

uint64_t sub_216155C2C(uint64_t a1, uint64_t a2)
{
  return sub_21615592C(a2);
}

uint64_t sub_216155C34(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void *sub_216155C3C()
{
  return sub_2161559FC(0);
}

void *sub_216155C44(uint64_t a1, uint64_t a2)
{
  return sub_2161559FC(a2);
}

uint64_t sub_216155C4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_216155C54()
{
  return sub_216155ACC(0);
}

uint64_t sub_216155C5C(uint64_t a1, uint64_t a2)
{
  return sub_216155ACC(a2);
}

uint64_t sub_216155C64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_216155C6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

char *sub_216155C74(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B3E0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B3C8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_216155CE0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B360, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B348);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_216155D4C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B380, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B368);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_216155DB8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B3A0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B388);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_216155E24(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B3C0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B3A8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_216155E90(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&unk_26797EB78;
  }
  return v1[248];
}

uint64_t sub_216155EAC(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)&unk_26797EB78;
  if (*(void *)(a1 + 80)) {
    uint64_t v1 = *(unsigned __int8 **)(a1 + 80);
  }
  return (v1[40] >> 3) & 1;
}

char *sub_216155ECC(uint64_t a1, int a2)
{
  uint64_t result = (char *)(*(void *)(sub_216128EF4(a1 + 56, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float sub_216155F04(uint64_t a1, int a2)
{
  return *(float *)(sub_216128EF4(a1 + 56, a2) + 56);
}

BOOL sub_216155F24(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 56, a2) + 60) == 1;
}

BOOL sub_216155F4C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 56, a2) + 60) == 2;
}

BOOL sub_216155F74(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 56, a2) + 60) == 3;
}

BOOL sub_216155F9C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 56, a2) + 60) == 5;
}

BOOL sub_216155FC4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 56, a2) + 60) == 4;
}

BOOL sub_216155FEC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 56, a2) + 60) == 6;
}

char *sub_216156014(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 88);
  if (!v1) {
    uint64_t v1 = (char *)&unk_26797ECC0;
  }
  return v1 + 16;
}

char *sub_216156030(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 104);
  if (!v1) {
    uint64_t v1 = (char *)&unk_26797ECC0;
  }
  return v1 + 16;
}

uint64_t sub_21615604C(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t sub_216156078(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

char *sub_216156080(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B3E0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B3C8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_2161560EC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B360, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B348);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_216156158(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B380, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B368);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_2161561C4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B3A0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B388);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_216156230(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26797B3C0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_21615AC34(&off_26797B3A8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_21615629C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&unk_26797EB78;
  }
  return v1[248];
}

uint64_t sub_2161562B8(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)&unk_26797EB78;
  if (*(void *)(a1 + 64)) {
    uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  }
  return (v1[40] >> 3) & 1;
}

uint64_t sub_2161562D8(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_26797EB78;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

char *sub_216156304(uint64_t a1, int a2)
{
  uint64_t result = (char *)(*(void *)(sub_216128EF4(a1 + 40, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float sub_21615633C(uint64_t a1, int a2)
{
  return *(float *)(sub_216128EF4(a1 + 40, a2) + 56);
}

BOOL sub_21615635C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 40, a2) + 60) == 1;
}

BOOL sub_216156384(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 40, a2) + 60) == 2;
}

BOOL sub_2161563AC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 40, a2) + 60) == 3;
}

BOOL sub_2161563D4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 40, a2) + 60) == 5;
}

BOOL sub_2161563FC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 40, a2) + 60) == 4;
}

BOOL sub_216156424(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_216128EF4(a1 + 40, a2) + 60) == 6;
}

char *sub_21615644C(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 72);
  if (!v1) {
    uint64_t v1 = (char *)&unk_26797ECC0;
  }
  return v1 + 16;
}

char *sub_216156468(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 88);
  if (!v1) {
    uint64_t v1 = (char *)&unk_26797ECC0;
  }
  return v1 + 16;
}

void sub_216156484(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_216156498(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    unsigned int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_216156558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216156578(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_21615C174((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    unsigned int v4 = sub_21615C18C(v6, "CHECK failed: (n) >= (0): ");
    sub_21615C2C8((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    return sub_21615C2D0((uint64_t)v6);
  }
  else if (v1)
  {
    uint64_t v2 = *(void *)(result + 16) + 8;
    do
    {
      uint64_t v3 = *(void *)v2;
      if (*(char *)(*(void *)v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

void sub_216156624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615663C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    unsigned int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    char v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_2161566FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615671C(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_21615C174((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_21615C18C(v7, "CHECK failed: (n) >= (0): ");
    sub_21615C2C8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_21615C2D0((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*(void *)(result + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_216152834(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_2161567B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2161567CC(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_21615C174((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_21615C18C(v7, "CHECK failed: (n) >= (0): ");
    sub_21615C2C8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_21615C2D0((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_2161538CC(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_216156864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615687C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_21615C18C(v11, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_21615C2D0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (const std::string **)(*(void *)(a2 + 16) + 8);
    char v7 = (std::string **)sub_21616EBE0((uint64_t *)v3, v5);
    uint64_t result = (uint64_t)sub_21615696C((std::string *)v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    signed int v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    uint64_t v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
  return result;
}

void sub_216156954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_21615696C(std::string *result, std::string **a2, const std::string **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (std::string::__raw *)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      uint64_t result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    std::string::size_type v18 = v9->__words[0];
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      if (*(unsigned char *)(v18 + 24)) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v18 + 32) + 32) + 40))(*(void *)(*(void *)(v18 + 32) + 32), &unk_26C6BC178, 24);
      }
      unsigned int v22 = (std::string *)sub_21615A7E4((void *)v18, 0x18uLL, (uint64_t)sub_216156484);
      v22->__r_.__value_.__r.__words[0] = 0;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      uint64_t result = std::string::operator=(v22, v21);
      *v20++ = v22;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t *sub_216156AA4(uint64_t *a1)
{
  sub_216156AE0(a1);

  return sub_21614D184(a1);
}

void sub_216156AE0(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_21615269C(*v3);
          MEMORY[0x2166CA800](v5, 0x1081C400F7E8713);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

unint64_t sub_216156B60(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  if (a2 == result)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_21615C18C(v11, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_21615C2D0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    char v7 = (unint64_t *)sub_21616EBE0((uint64_t *)v3, v5);
    uint64_t result = sub_216156C50(v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    signed int v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    uint64_t v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
  return result;
}

void sub_216156C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216156C50(unint64_t result, unint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      unint64_t v15 = *v12++;
      uint64_t result = sub_216156D00(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = sub_21615585C(v18);
      uint64_t result = sub_216156D00(v21, (unint64_t)v22);
      *v20++ = (unint64_t)v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

unint64_t sub_216156D00(uint64_t a1, unint64_t a2)
{
  return sub_216152CC8(a2, a1);
}

uint64_t *sub_216156D10(uint64_t *a1)
{
  sub_216156D4C(a1);

  return sub_21614D184(a1);
}

void sub_216156D4C(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_216153774(*v3);
          MEMORY[0x2166CA800](v5, 0x10A1C40F497E4DALL);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_216156DCC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_21615C18C(v11, "CHECK failed: (&other) != (this): ");
    sub_21615C2C8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    char v7 = (uint64_t *)sub_21616EBE0((uint64_t *)a1, v5);
    sub_216156EBC((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    uint64_t v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
}

void sub_216156EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216156EBC(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_216156F6C(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = sub_2161559FC(v18);
      sub_216156F6C(v21, (uint64_t)v22);
      *v20++ = (uint64_t)v22;
      --v17;
    }
    while (v17);
  }
}

void sub_216156F6C(uint64_t a1, uint64_t a2)
{
}

void sub_216156F7C()
{
}

void sub_216156FC4()
{
}

void sub_216157020(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void *sub_216157044(void *a1, const char *a2, uint64_t a3)
{
  *a1 = &unk_26C6C3A20;
  char v6 = a1 + 1;
  sub_2161055D0(a1 + 1);
  if (a3) {
    operator new();
  }
  char v7 = (void *)MEMORY[0x263F8C0E8];
  a1[2] = MEMORY[0x263F8C0E8];
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0)
  {
    unsigned int v15 = 5;
    sub_216128C80((uint64_t)v16);
    sub_216129E78(v16, (uint64_t)"\"", 1);
    size_t v8 = strlen(a2);
    sub_216129E78(v16, (uint64_t)a2, v8);
    sub_216129E78(v16, (uint64_t)"\": ", 3);
    uint64_t v9 = __error();
    sub_216157F18(*v9);
    if ((v14 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = v14;
    }
    else {
      uint64_t v11 = (uint64_t)__p[1];
    }
    sub_216129E78(v16, (uint64_t)v10, v11);
    sub_21612650C(&v15, (uint64_t)&v19);
    sub_216159F94(v6, &v19);
    sub_216159D74(&v19);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    v16[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v16[1] = MEMORY[0x263F8C318] + 16;
    if (v17 < 0) {
      operator delete((void *)v16[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166CA750](&v18);
  }
  return a1;
}

void sub_2161572B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_216159D74((uint64_t *)(v16 - 56));
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_21612659C((uint64_t)&a15);
  sub_216159D74(v15);
  _Unwind_Resume(a1);
}

void sub_216157334(void *a1)
{
  sub_216157578(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21615736C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216159F90(a2, a1 + 8);
}

BOOL sub_216157378(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  char v6 = sub_2161575FC(v3, a2, v5);
  return (*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_216157448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL sub_21615745C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  unint64_t v3 = (void *)MEMORY[0x263F8C0E8];
  if (v2 == (void *)MEMORY[0x263F8C0E8])
  {
    if ((int)sub_216157D08() <= 2)
    {
      char v11 = 0;
      uint64_t v4 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"filesystem.cc", 13);
      sub_216129E78(v4, (uint64_t)"(", 1);
      unsigned __int8 v5 = (void *)std::ostream::operator<<();
      char v6 = sub_216129E78(v5, (uint64_t)") ", 2);
      char v7 = sub_216129E78(v6, (uint64_t)"LOG(", 4);
      std::locale v8 = sub_216129E78(v7, (uint64_t)"ERROR", 5);
      uint64_t v9 = sub_216129E78(v8, (uint64_t)") ", 2);
      sub_216129E78(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sub_216128E18(&v11);
    }
  }
  else
  {
    sub_2161577EC(a2, *(void **)((char *)v2 + *(void *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_216157564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_216157578(void *a1)
{
  *a1 = &unk_26C6C3A20;
  uint64_t v2 = a1[2];
  if (v2 != MEMORY[0x263F8C0E8] && v2 != 0) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216159D74(a1 + 1);
  return a1;
}

void *sub_2161575FC(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x2166CA470](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    char v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    std::locale v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      _OWORD v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_21615775C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x21615771CLL);
  }
  __cxa_rethrow();
}

void sub_2161577D8(_Unwind_Exception *a1)
{
}

void sub_2161577EC(uint64_t a1, void *a2, void *a3)
{
  sub_21615786C(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  MEMORY[0x2166CA370](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216157850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21615786C(std::string *a1, void *a2, void *a3)
{
  char v11 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    if (a2)
    {
      if (a2[3] == a2[4])
      {
        int v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
        int v5 = v6 == -1;
        if (v6 == -1) {
          a2 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      int v5 = 1;
    }
    BOOL result = sub_2161579CC(&v11);
    if (v5 == result) {
      break;
    }
    std::locale v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4]) {
      std::string::value_type v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v9 = *v8;
    }
    std::string::push_back(a1, v9);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  return result;
}

void sub_21615799C(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_2161579B8(_Unwind_Exception *a1)
{
}

BOOL sub_2161579CC(void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v2[3] != v2[4]) {
      return 0;
    }
    if ((*(unsigned int (**)(void *))(*v2 + 72))(v2) != -1) {
      return *a1 == 0;
    }
    *a1 = 0;
  }
  return 1;
}

uint64_t *sub_216157A4C(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  unint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  int v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x2166CA420](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_216157BD4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2166CA750](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216157C0C()
{
  unsigned int v0 = atomic_load((unsigned int *)&unk_26797B3E8);
  if (v0 != -1) {
    return atomic_load((unsigned int *)&unk_26797B3E8);
  }
  sub_216157C94(&v3);
  uint64_t v1 = MEMORY[0x2166CA5E0](&v3);
  std::random_device::~random_device(&v3);
  return v1;
}

void sub_216157C6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x216157C58);
}

std::random_device *sub_216157C94(std::random_device *a1)
{
  sub_21610B834(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_216157CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216157D08()
{
  return atomic_load((unsigned int *)&unk_26797CEF8);
}

uint64_t sub_216157D18(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  int v3 = (char)*a1;
  if ((v3 & 0x80000000) == 0)
  {
    *a3 = 1;
    return *a1;
  }
  unint64_t v5 = a2 - (void)a1;
  if ((unint64_t)(a2 - (void)a1) >= 2)
  {
    if ((v3 & 0xE0) == 0xC0)
    {
      char v6 = a1[1];
      if (v6 <= -65)
      {
        uint64_t result = v6 & 0x3F | ((v3 & 0x1F) << 6);
        if (result >= 0x80)
        {
          uint64_t v7 = 2;
LABEL_8:
          *a3 = v7;
          return result;
        }
      }
    }
    else if (v5 >= 3)
    {
      if ((v3 & 0xF0) == 0xE0)
      {
        int v8 = (char)a1[1];
        if (v8 <= -65)
        {
          char v9 = a1[2];
          if (v9 <= -65)
          {
            uint64_t result = v9 & 0x3F | ((v8 & 0x3F) << 6) & 0xFFF | ((v3 & 0xF) << 12);
            if (result >= 0x800
              && (((v3 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              uint64_t v7 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v5 >= 4 && (v3 & 0xF8) == 0xF0)
      {
        int v10 = (char)a1[1];
        if (v10 <= -65)
        {
          int v11 = (char)a1[2];
          if (v11 <= -65)
          {
            char v12 = a1[3];
            if (v12 <= -65)
            {
              int v13 = ((v3 & 7) << 18) | ((v10 & 0x3F) << 12);
              uint64_t result = v12 & 0x3F | ((v11 & 0x3F) << 6) | v13;
              if (result >= 0x10000 && (v13 - 57344) < 0x102000)
              {
                uint64_t v7 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *a3 = 1;
  return 65533;
}

uint64_t sub_216157E60()
{
  unsigned int v0 = off_26B4ABBE8;
  if ((*(unsigned char *)off_26B4ABBE8(&off_26B4ABBE8) & 1) == 0)
  {
    sub_216157C0C();
    uint64_t v2 = (_DWORD *)off_26B4ABBD0(&off_26B4ABBD0);
    *uint64_t v2 = v4;
    do
    {
      uint64_t v5 = v3(&off_26B4ABBD0);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(void *)(v3(&off_26B4ABBD0) + 2496) = 0;
    *(unsigned char *)v0(&off_26B4ABBE8) = 1;
  }
  return off_26B4ABBD0(&off_26B4ABBD0);
}

uint64_t sub_216157F18(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  strerror_r(a1, __strerrbuf, 0x3FFuLL);
  sub_216128C80((uint64_t)v4);
  size_t v1 = strlen(__strerrbuf);
  uint64_t v2 = sub_216129E78(v4, (uint64_t)__strerrbuf, v1);
  sub_216129E78(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v4[1] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166CA750](&v6);
}

void sub_2161580A8(_Unwind_Exception *exception_object)
{
}

unint64_t sub_2161580C4(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    sub_216158354();
  }
  return (a1 + a2 - 1) / a2 * a2;
}

void sub_2161580EC(std::string *this)
{
  LOBYTE(size) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((unsigned char *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0) {
        std::string::size_type v3 = this->__r_.__value_.__l.__size_;
      }
    }
    while ((v3 & 3) != 0);
  }
}

void *sub_216158150@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1[1];
  BOOL v5 = v4 >= a2;
  unint64_t v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sub_2161055D0(a3);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)sub_216128C80((uint64_t)v10);
    sub_216129E78(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    sub_216129E78(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_216129E78(v10, (uint64_t)") [", 3);
    sub_216129E78(v10, (uint64_t)"string.size() >= size", 21);
    sub_216129E78(v10, (uint64_t)"] ", 2);
    sub_21612650C(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v10[1] = MEMORY[0x263F8C318] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x2166CA750](&v12);
  }
}

void sub_21615833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216158354()
{
}

uint64_t sub_216158380(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)sub_216145BA8(a1);
  *unint64_t v4 = &unk_26C6C43A8;
  v4[1] = a2 + 16;
  sub_216126DA0((uint64_t)v4);
  return a1;
}

void sub_2161583D0(_Unwind_Exception *a1)
{
  sub_21612679C(v1);
  _Unwind_Resume(a1);
}

void *sub_2161583E8(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t result = (void *)sub_2161258B4(a1, a2, a3, a4);
  void *result = &unk_26C6C43A8;
  return result;
}

void sub_216158420(void *a1)
{
  sub_21612679C(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216158458(uint64_t *a1@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*a1 + 16))(&v66);
  if (v66)
  {
    sub_216159D74((uint64_t *)&v66);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_216159D74((uint64_t *)&v66);
  if (!a3) {
    goto LABEL_3;
  }
  unint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  std::string __p = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  if (a3 >> 59) {
    sub_21610CB04();
  }
  int v8 = 0;
  std::string __p = operator new(32 * a3);
  uint64_t v74 = (char *)__p;
  uint64_t v75 = (char *)__p + 32 * a3;
  memset(v71, 0, sizeof(v71));
  int v72 = 1065353216;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v69 = 0;
  uint64_t v70 = 256;
  v65[0] = (uint64_t)a1;
  v65[1] = (uint64_t)&v66;
  v65[2] = (uint64_t)&__p;
  v65[3] = (uint64_t)&v76;
  v65[4] = (uint64_t)v71;
  uint64_t v66 = &unk_26C6C45E8;
  do
  {
    long long v81 = 0uLL;
    int v9 = sub_21612EE2C(a1[2], a2, a3, (BOOL *)&v80 + 8);
    *(void *)&long long v81 = a2;
    *((void *)&v81 + 1) = v9;
    a3 -= v9;
    if (a3) {
      int v10 = v8 + 1;
    }
    else {
      int v10 = -1;
    }
    LODWORD(v8sub_21613F89C(&a9, 0) = v8 - 1;
    DWORD1(v8sub_21613F89C(&a9, 0) = v10;
    char v11 = v74;
    if (v74 >= v75)
    {
      unsigned __int8 v14 = (char *)__p;
      uint64_t v15 = (v74 - (unsigned char *)__p) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        sub_21610CB04();
      }
      uint64_t v17 = v75 - (unsigned char *)__p;
      if ((v75 - (unsigned char *)__p) >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 59) {
          sub_2160FFA74();
        }
        uint64_t v19 = (char *)operator new(32 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      long long v20 = v81;
      uint64_t v21 = &v19[32 * v15];
      *(_OWORD *)uint64_t v21 = v80;
      *((_OWORD *)v21 + 1) = v20;
      unsigned int v22 = v21;
      if (v11 != v14)
      {
        do
        {
          long long v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        char v11 = v14;
      }
      unsigned int v24 = &v19[32 * v18];
      int v13 = v21 + 32;
      std::string __p = v22;
      uint64_t v74 = v21 + 32;
      uint64_t v75 = v24;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      long long v12 = v81;
      *(_OWORD *)uint64_t v74 = v80;
      *((_OWORD *)v11 + 1) = v12;
      int v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    uint64_t v74 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if ((unint64_t)(v13 - (unsigned char *)__p) >= 0x21)
    {
      unint64_t v25 = 1;
      do
      {
        sub_216158BBC(v65, v25 - 1, v25);
        ++v25;
      }
      while (v25 < (v74 - (unsigned char *)__p) >> 5);
    }
    char v26 = (int **)v76;
    uint64_t v27 = v77;
    if (v76 != v77)
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *v26;
        if (v27 - (char *)v26 >= 9)
        {
          uint64_t v30 = 0;
          uint64_t v31 = (v27 - (char *)v26) >> 3;
          unsigned int v32 = v26;
          do
          {
            uint64_t v33 = v32;
            v32 += v30 + 1;
            uint64_t v34 = 2 * v30;
            uint64_t v30 = (2 * v30) | 1;
            uint64_t v35 = v34 + 2;
            if (v35 < v31)
            {
              unsigned int v36 = v32[1];
              float v37 = *((float *)*v32 + 2);
              float v38 = *((float *)v36 + 2);
              if (v37 < v38 || v37 == v38 && **v32 > *v36)
              {
                ++v32;
                uint64_t v30 = v35;
              }
            }
            *uint64_t v33 = *v32;
          }
          while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
          uint64_t v39 = (int **)(v27 - 8);
          if (v32 == v39)
          {
            *unsigned int v32 = v29;
          }
          else
          {
            *unsigned int v32 = *v39;
            *uint64_t v39 = v29;
            sub_216159130((uint64_t)v26, (uint64_t)(v32 + 1), v32 + 1 - v26);
          }
        }
        v77 -= 8;
        int v40 = *v29;
        uint64_t v41 = *v29;
        uint64_t v42 = __p;
        uint64_t v43 = *((void *)__p + 4 * v41 + 3);
        if (!v43) {
          goto LABEL_58;
        }
        uint64_t v44 = v29[1];
        uint64_t v45 = *((void *)__p + 4 * v44 + 3);
        if (!v45) {
          goto LABEL_58;
        }
        uint64_t v46 = v45 + v43;
        if (v46 != *((void *)v29 + 2)) {
          goto LABEL_58;
        }
        if (a5 > 0.0)
        {
          if (a5 >= 1.0) {
            goto LABEL_58;
          }
          if (!v28) {
            uint64_t v28 = sub_216157E60();
          }
          unsigned int v47 = sub_216141B90(v28);
          if (((double)v47 + (double)sub_216141B90(v28) * 4294967300.0) * 5.42101086e-20 + 0.0 < a5) {
            goto LABEL_58;
          }
          uint64_t v42 = __p;
          int v40 = *v29;
          uint64_t v44 = v29[1];
          uint64_t v41 = *v29;
          uint64_t v46 = *((void *)__p + 4 * v44 + 3) + *((void *)__p + 4 * v41 + 3);
        }
        uint64_t v48 = (char *)&v42[8 * v41];
        uint64_t v49 = (char *)&v42[8 * v44];
        *((void *)v48 + 3) = v46;
        *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
        uint64_t v50 = *((unsigned int *)v49 + 1);
        if ((v50 & 0x80000000) == 0) {
          v42[8 * v50] = v40;
        }
        *((void *)v49 + 2) = "";
        *((void *)v49 + 3) = 0;
        sub_216158BBC(v65, *((_DWORD *)__p + 8 * v41), v40);
        sub_216158BBC(v65, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
        char v26 = (int **)v76;
        uint64_t v27 = v77;
      }
      while (v76 != v77);
    }
    v79[3] = 0;
    uint64_t v51 = operator new(0x20uLL);
    *uint64_t v51 = &unk_26C6C8AC0;
    v51[1] = a1;
    v51[2] = v79;
    v51[3] = v71;
    *((void *)&v81 + 1) = v51;
    sub_2161599B8(&v80, v79);
    sub_2161594A0(&v80);
    int v52 = 0;
    int v53 = (void *)MEMORY[0x263F8C0F8];
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    do
    {
      if (v52 < 0)
      {
        LOBYTE(v8sub_21613F89C(&a9, 0) = 1;
        uint64_t v54 = sub_216129E78(v53, (uint64_t)"bpe_model.cc", 12);
        sub_216129E78(v54, (uint64_t)"(", 1);
        uint64_t v55 = (void *)std::ostream::operator<<();
        uint64_t v56 = sub_216129E78(v55, (uint64_t)") [", 3);
        unint64_t v57 = sub_216129E78(v56, (uint64_t)"(index) >= (0)", 14);
        sub_216129E78(v57, (uint64_t)"] ", 2);
        sub_216128E18(&v80);
      }
      unint64_t v58 = __p;
      if (v52 >= (int)((unint64_t)(v74 - (unsigned char *)__p) >> 5))
      {
        LOBYTE(v8sub_21613F89C(&a9, 0) = 1;
        uint64_t v59 = sub_216129E78(v53, (uint64_t)"bpe_model.cc", 12);
        sub_216129E78(v59, (uint64_t)"(", 1);
        uint64_t v60 = (void *)std::ostream::operator<<();
        unint64_t v61 = sub_216129E78(v60, (uint64_t)") [", 3);
        uint64_t v62 = sub_216129E78(v61, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
        sub_216129E78(v62, (uint64_t)"] ", 2);
        sub_216128E18(&v80);
        unint64_t v58 = __p;
      }
      sub_21615900C((uint64_t)v79, v58[4 * v52 + 2], v58[4 * v52 + 3], (uint64_t)a4);
      int v52 = *((_DWORD *)__p + 8 * v52 + 1);
    }
    while (v52 != -1);
    sub_2161594A0(v79);
  }
  sub_216159068(&v66);
  sub_216144C28((uint64_t)v71);
  if (__p)
  {
    uint64_t v74 = (char *)__p;
    operator delete(__p);
  }
  if (v76)
  {
    uint64_t v77 = (char *)v76;
    operator delete(v76);
  }
}

void sub_216158B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sub_2161594A0((void *)(v33 - 200));
  sub_216159068(&a16);
  sub_216144C28((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sub_216158BBC(uint64_t *a1, int a2, int a3)
{
  if (a2 != -1 && a3 != -1)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *(void *)a1[2];
    if (!*(unsigned char *)(v5 + 32 * a2 + 8))
    {
      uint64_t v6 = a3;
      uint64_t v7 = v5 + 32 * a3;
      if (!*(unsigned char *)(v7 + 8))
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v5 + 32 * a2;
        int v10 = *(unsigned char **)(v9 + 16);
        uint64_t v11 = *(void *)(v7 + 24) + *(void *)(v9 + 24);
        v47[0] = v10;
        v47[1] = v11;
        long long v12 = *(unsigned int **)(v8 + 40);
        unsigned int v13 = *v12;
        if (v11)
        {
          uint64_t v14 = 0;
          uint64_t v15 = v11;
          while (1)
          {
            int v16 = *v10++;
            v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v16;
            unsigned int v13 = v12[v14];
            if ((v13 & 0x800000FF) != v16) {
              break;
            }
            if (!--v15) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          int v17 = *v10;
          if (*v10)
          {
            uint64_t v14 = 0;
            unint64_t v18 = v10 + 1;
            while (1)
            {
              v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v17;
              unsigned int v13 = v12[v14];
              if ((v13 & 0x800000FF) != v17) {
                break;
              }
              int v19 = *v18++;
              int v17 = v19;
              if (!v19) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            uint64_t v14 = 0;
LABEL_17:
            if ((v13 & 0x100) != 0)
            {
              unsigned int v20 = v12[v14 ^ (v13 >> 10 << ((v13 >> 6) & 8))];
              uint64_t v21 = (void *)a1[1];
              uint64_t v22 = v21[5];
              unint64_t v23 = v21[6];
              unint64_t v24 = v21[4];
              if (v24 >= v23)
              {
                unint64_t v24 = 0;
                ++v22;
                v21[4] = 0;
                v21[5] = v22;
              }
              uint64_t v25 = v21[1];
              if (v22 == (v21[2] - v25) >> 3)
              {
                is_mul_ok(v23, 0x18uLL);
                operator new[]();
              }
              uint64_t v26 = *(void *)(v25 + 8 * v22) + 24 * v24;
              v21[4] = v24 + 1;
              *(_DWORD *)uint64_t v26 = a2;
              *(_DWORD *)(v26 + 4) = a3;
              unsigned int v44 = v20 & 0x7FFFFFFF;
              *(float *)(v26 + 8) = (*(float (**)(uint64_t))(*(void *)v8 + 136))(v8);
              *(void *)(v26 + 16) = v11;
              uint64_t v27 = (uint64_t *)a1[3];
              uint64_t v29 = (void *)v27[1];
              unint64_t v28 = v27[2];
              if ((unint64_t)v29 >= v28)
              {
                uint64_t v32 = *v27;
                uint64_t v33 = ((uint64_t)v29 - *v27) >> 3;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 61) {
                  sub_21610CB04();
                }
                uint64_t v35 = v28 - v32;
                if (v35 >> 2 > v34) {
                  unint64_t v34 = v35 >> 2;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  if (v36 >> 61) {
                    sub_2160FFA74();
                  }
                  float v37 = (char *)operator new(8 * v36);
                }
                else
                {
                  float v37 = 0;
                }
                float v38 = (uint64_t *)&v37[8 * v33];
                uint64_t *v38 = v26;
                uint64_t v30 = (uint64_t)(v38 + 1);
                if (v29 == (void *)v32)
                {
                  uint64_t v31 = v44;
                }
                else
                {
                  uint64_t v31 = v44;
                  do
                  {
                    uint64_t v39 = *--v29;
                    *--float v38 = v39;
                  }
                  while (v29 != (void *)v32);
                  uint64_t v29 = (void *)*v27;
                }
                *uint64_t v27 = (uint64_t)v38;
                v27[1] = v30;
                std::string v27[2] = (uint64_t)&v37[8 * v36];
                if (v29) {
                  operator delete(v29);
                }
              }
              else
              {
                *uint64_t v29 = v26;
                uint64_t v30 = (uint64_t)(v29 + 1);
                uint64_t v31 = v44;
              }
              v27[1] = v30;
              sub_216159130(*v27, v30, (v30 - *v27) >> 3);
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v8 + 8) + 128))(*(void *)(v8 + 8), v31))
              {
                uint64_t v41 = *(void *)a1[2];
                __n128 v45 = *(__n128 *)(v41 + 32 * v4 + 16);
                __n128 v46 = *(__n128 *)(v41 + 32 * v6 + 16);
                uint64_t v42 = a1[4];
                uint64_t v48 = v47;
                uint64_t v43 = (__n128 *)sub_2161591C8(v42, (uint64_t)v47, (uint64_t)&unk_21636EABA, &v48);
                __n128 result = v45;
                _OWORD v43[2] = v45;
                v43[3] = v46;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_21615900C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v4 + 48))(v4, v7, &v6);
}

void *sub_216159068(void *a1)
{
  *a1 = &unk_26C6C45E8;
  uint64_t v2 = (void *)a1[1];
  std::string::size_type v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x2166CA7C0](*v2, 0x1000C801E56706BLL);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2161590F8(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)a1 + 56))(0.0);
}

uint64_t sub_216159120()
{
  return 1;
}

uint64_t sub_216159128()
{
  return 0;
}

uint64_t sub_216159130(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = result + 8 * (v3 >> 1);
    uint64_t v6 = *(_DWORD **)v5;
    uint64_t v7 = *(void *)(a2 - 8);
    float v8 = *(float *)(*(void *)v5 + 8);
    float v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(void *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          unint64_t v11 = v4 - 1;
          unint64_t v4 = (v4 - 1) >> 1;
          uint64_t v10 = result + 8 * v4;
          long long v12 = *(_DWORD **)v10;
          float v13 = *(float *)(*(void *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7)) {
            break;
          }
          *(void *)uint64_t v5 = v12;
          uint64_t v5 = result + 8 * v4;
          if (v11 <= 1) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v10 = v5;
LABEL_11:
      *(void *)uint64_t v10 = v7;
    }
  }
  return result;
}

void *sub_2161591C8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  float v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_216159440(a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        uint64_t v18 = a2;
        int v16 = *(uint64_t **)a2;
        size_t v17 = *(void *)(v18 + 8);
        do
        {
          unint64_t v19 = *((void *)v15 + 1);
          if (v19 == v10)
          {
            if (*((void *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11) {
                v19 %= v11;
              }
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v15 = operator new(0x40uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_2161297B4(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t v15 = *v27;
LABEL_40:
    *uint64_t v27 = v15;
    goto LABEL_41;
  }
  *(void *)uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v26 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_21615942C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_216159440(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return sub_2161292A0((uint64_t)&v4, a2, a3);
}

void sub_216159468(void *a1)
{
  sub_216159068(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_2161594A0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216159528()
{
}

__n128 sub_21615953C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C8AC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216159590(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8AC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2161595C8(uint64_t a1, void *a2, void ***a3)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *a3;
  *(void *)&long long v33 = *a2;
  *((void *)&v33 + 1) = v4;
  uint64_t v6 = *(void ***)(a1 + 8);
  uint64_t v7 = ((uint64_t (*)(void **, void, uint64_t))(*v6)[14])(v6, v33, v4);
  if (v7 == -1 || ((*(uint64_t (**)(void *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    unint64_t v10 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (unsigned char *)*v5) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        size_t v17 = (char *)sub_216129BFC((uint64_t)(v5 + 2), v16);
        uint64_t v18 = &v17[24 * v13];
        float v20 = &v17[24 * v19];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        BOOL v22 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v23 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      sub_21610CB04();
    }
  }
  else
  {
    float v8 = sub_2161598A0(*(void **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      unint64_t v9 = (uint64_t *)v8;
      sub_21615900C(*(void *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      sub_21615900C(*(void *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    unint64_t v24 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*v5) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v29 = (char *)sub_216129BFC((uint64_t)(v5 + 2), v28);
        uint64_t v18 = &v29[24 * v25];
        float v20 = &v29[24 * v30];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        uint64_t v31 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v32 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        float v21 = (char *)*v5;
LABEL_16:
        void *v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)unint64_t v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  uint8x8_t v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t sub_216159854(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCAE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216159894()
{
  return &unk_26C6BCAE0;
}

uint64_t **sub_2161598A0(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_216159440((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    uint8x8_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

void *sub_2161599B8(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    int8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216159C18(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2160F7444(a1);
}

void sub_216159C24()
{
  if (!dword_26797EE38)
  {
    unsigned int v0 = sub_216159C70(MEMORY[0x263F8C0F8], "Program terminated with an unrecoverable error.");
    size_t v1 = sub_216159CB8(v0);
    sub_216159D70(v1);
    exit(-1);
  }
  dword_26797EE38 = 2;
}

void *sub_216159C70(void *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return sub_216129E78(a1, (uint64_t)__s, v4);
}

void *sub_216159CB8(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_216159D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t *sub_216159D74(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    sub_21615A17C((uint64_t)a1, v2);
  }
  return a1;
}

void sub_216159DAC()
{
}

void sub_216159EB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_21615A17C((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216159EDC(void *result, void *a2)
{
  if (*a2) {
    operator new();
  }
  void *result = 0;
  return result;
}

void sub_216159F6C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sub_216159F94(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 != *a2)
  {
    if (*a2) {
      operator new();
    }
    *a1 = 0;
    if (v3)
    {
      sub_21615A17C((uint64_t)a1, v3);
    }
  }
}

void sub_21615A058(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

const char *sub_21615A07C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return "";
  }
  __n128 result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0) {
    return *(const char **)result;
  }
  return result;
}

std::string *sub_21615A0A8@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)a1;
  if (*(void *)a1)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    unsigned int v5 = *v3 - 1;
    if (v5 < 0x10) {
      MEMORY[0x2166CA360](a2, off_264267840[v5]);
    }
    std::string::append(a2, ": ");
    int v6 = *(char *)(*(void *)a1 + 31);
    if (v6 >= 0) {
      uint8x8_t v7 = (const std::string::value_type *)(*(void *)a1 + 8);
    }
    else {
      uint8x8_t v7 = *(const std::string::value_type **)(*(void *)a1 + 8);
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(*(void *)a1 + 31);
    }
    else {
      std::string::size_type v8 = *(void *)(*(void *)a1 + 16);
    }
    return std::string::append(a2, v7, v8);
  }
  else
  {
    return (std::string *)sub_21610B834(a2, "OK");
  }
}

void sub_21615A160(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21615A17C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    JUMPOUT(0x2166CA800);
  }
}

void *sub_21615A1E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CF08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CF08))
  {
    operator new();
  }
  unsigned int v0 = (pthread_key_t *)qword_26797CF00;

  return sub_21615A2B0(v0);
}

void sub_21615A278(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1000C4000313F17);
  __cxa_guard_abort(&qword_26797CF08);
  _Unwind_Resume(a1);
}

void *sub_21615A2B0(pthread_key_t *a1)
{
  uint64_t v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    uint64_t v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)uint64_t v2 = xmmword_21636DB80;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t sub_21615A31C(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) < a2)
  {
    sub_21615C174((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    std::locale v4 = sub_21615C18C(v7, "CHECK failed: n <= size_: ");
    sub_21615C2C8((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v7);
  }
  return a1 + a2;
}

void sub_21615A394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21615A3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = v6 + 72;
  if (v6 + 72 > *(void *)(a1 + 16))
  {
    sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    std::string::size_type v8 = sub_21615C18C(v13, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    sub_21615C2C8((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v13);
  }
  unint64_t v9 = (void *)sub_21615A31C(a1, v6);
  *(void *)(a1 + 8) = v7;
  *unint64_t v9 = a3;
  v9[1] = a2;
  void v9[2] = a1;
  v9[5] = sub_21615A31C(a1, v7);
  uint64_t v10 = sub_21615A31C(a1, *(void *)(a1 + 16));
  void v9[3] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[6] = v10;
  return v9;
}

void sub_21615A49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615A4C8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_21615A4E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a2 == -1)
  {
    if (v5) {
      unint64_t v7 = *(void *)v5;
    }
    else {
      unint64_t v7 = 256;
    }
  }
  else
  {
    if (v5) {
      unint64_t v6 = *(void *)(v5 + 8);
    }
    else {
      unint64_t v6 = 0x2000;
    }
    if (v6 >= 2 * a2) {
      unint64_t v7 = 2 * a2;
    }
    else {
      unint64_t v7 = v6;
    }
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    sub_21615C174((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    std::string::size_type v8 = sub_21615C18C(v12, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    sub_21615C2C8((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v12);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (v7 <= a3 + 24) {
    size_t v9 = a3 + 24;
  }
  else {
    size_t v9 = v7;
  }
  if (v5) {
    __n128 result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  }
  else {
    __n128 result = operator new(v9);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 16), v9, memory_order_relaxed);
  return result;
}

void sub_21615A5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21615A5E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = (uint64_t *)sub_21615A4E4(a3, v6, a2);

  return sub_21615AB78(v7, v8, a1, 0, 0);
}

void *sub_21615A644(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (void *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40) {
        uint64_t v7 = 64;
      }
      else {
        uint64_t v7 = 2 * *result;
      }
    }
    else
    {
      uint64_t v7 = 8;
    }
    __n128 result = (void *)sub_21615A6DC(a1, (16 * (_WORD)v7 + 23) & 0xFF0);
    uint64_t v8 = a1[3];
    void *result = v7;
    result[1] = v8;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 2);
    a1[8] = (uint64_t)&result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  a1[7] = (uint64_t)(result + 4);
  return result;
}

unint64_t sub_21615A6DC(uint64_t *a1, unint64_t a2)
{
  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    sub_21615C174((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    std::locale v4 = sub_21615C18C(v9, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    sub_21615C2C8((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v9);
  }
  unint64_t result = a1[5];
  unint64_t v6 = a1[6];
  if (v6 < result)
  {
    sub_21615C174((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    uint64_t v7 = sub_21615C18C(v9, "CHECK failed: (limit_) >= (ptr_): ");
    sub_21615C2C8((uint64_t)&v8, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v9);
    unint64_t result = a1[5];
    unint64_t v6 = a1[6];
  }
  if (v6 - result < a2) {
    return sub_21615AA64(a1, a2);
  }
  a1[5] = result + a2;
  return result;
}

void sub_21615A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_21615A7E4(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_21615A1E0();
  if (v6[1] == a1[3])
  {
    uint64_t explicit = (uint64_t *)v6[2];
    goto LABEL_3;
  }
  size_t v9 = sub_21615A1E0();
  uint64_t explicit = (uint64_t *)atomic_load_explicit(a1 + 1, memory_order_acquire);
  if (explicit && (void *)explicit[1] == v9)
  {
LABEL_3:
    return sub_21615A890(explicit, a2, a3);
  }

  return sub_21615A8F0(a1, a2, a3);
}

unint64_t sub_21615A890(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_21615A6DC(a1, a2);
  unint64_t v6 = v5;
  uint64_t v7 = (unint64_t *)a1[7];
  if (v7 == (unint64_t *)a1[8])
  {
    sub_21615A644(a1, v5, a3);
  }
  else
  {
    unint64_t *v7 = v5;
    v7[1] = a3;
    a1[7] = (uint64_t)(v7 + 2);
  }
  return v6;
}

unint64_t sub_21615A8F0(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_21615A1E0();
  uint64_t v7 = (uint64_t *)sub_21615A99C(a1, (uint64_t)v6);

  return sub_21615A890(v7, a2, a3);
}

unint64_t sub_21615A954(void *a1, unint64_t a2)
{
  std::locale v4 = sub_21615A1E0();
  unint64_t v5 = (uint64_t *)sub_21615A99C(a1, (uint64_t)v4);

  return sub_21615A6DC(v5, a2);
}

unint64_t sub_21615A99C(void *a1, uint64_t a2)
{
  unint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
  if (explicit)
  {
    while (*(void *)(explicit + 8) != a2)
    {
      unint64_t explicit = *(void *)(explicit + 32);
      if (!explicit) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    unint64_t v5 = sub_21615A4E4((uint64_t)a1, -1, 0x48uLL);
    *(_OWORD *)unint64_t v5 = xmmword_21636DB90;
    v5[2] = v6;
    uint64_t v7 = sub_21615A3C8((uint64_t)v5, a2, (uint64_t)a1);
    unint64_t explicit = (unint64_t)v7;
    atomic_ullong v8 = *a1;
    v7[4] = *a1;
    atomic_ullong v9 = v8;
    atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v9, (unint64_t)v7, memory_order_release, memory_order_relaxed);
    if (v9 != v8)
    {
      atomic_ullong v10 = v9;
      do
      {
        v7[4] = v9;
        atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v10, (unint64_t)v7, memory_order_release, memory_order_relaxed);
        BOOL v11 = v10 == v9;
        atomic_ullong v9 = v10;
      }
      while (!v11);
    }
  }
  sub_21615A1E0()[2] = explicit;
  uint64_t v12 = a1[3];
  sub_21615A1E0()[1] = v12;
  atomic_store(explicit, a1 + 1);
  return explicit;
}

uint64_t sub_21615AA64(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  *(void *)(v4 + 8) = *(void *)(v4 + 16) - a1[6] + a1[5];
  unint64_t v5 = sub_21615A5E8(v4, a2, *a1);
  a1[2] = (uint64_t)v5;
  a1[5] = sub_21615A31C((uint64_t)v5, v5[1]);
  a1[6] = sub_21615A31C(a1[2], *(void *)(a1[2] + 16));

  return sub_21615A6DC(a1, a2);
}

unint64_t sub_21615AAE4(void *a1, unint64_t a2)
{
  uint64_t v4 = sub_21615A1E0();
  if (v4[1] == a1[3])
  {
    unint64_t explicit = (uint64_t *)v4[2];
    goto LABEL_3;
  }
  uint64_t v7 = sub_21615A1E0();
  unint64_t explicit = (uint64_t *)atomic_load_explicit(a1 + 1, memory_order_acquire);
  if (explicit && (void *)explicit[1] == v7)
  {
LABEL_3:
    return sub_21615A6DC(explicit, a2);
  }

  return sub_21615A954(a1, a2);
}

uint64_t *sub_21615AB78(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6 = 2;
  if (!a5) {
    uint64_t v6 = 0;
  }
  *a1 = v6 | a4 | a3;
  a1[1] = 24;
  a1[2] = a2;
  if ((a3 & 3) != 0)
  {
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    uint64_t v7 = sub_21615C18C(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v10);
  }
  return a1;
}

void sub_21615AC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615AC24(uint64_t result)
{
  if (result) {
    JUMPOUT(0x2166CA7F0);
  }
  return result;
}

unint64_t sub_21615AC34(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CF10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CF10))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_26797B3F0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797CF10);
  }
  std::mutex::lock(&stru_26797B3F0);
  unint64_t explicit = atomic_load_explicit(a1 + 3, memory_order_acquire);
  if (!explicit)
  {
    sub_21612F5FC(a1, (void *)*a1, a1[1]);
    atomic_store((unint64_t)a1, a1 + 3);
    unint64_t explicit = (unint64_t)a1;
  }
  std::mutex::unlock(&stru_26797B3F0);
  return explicit;
}

unint64_t sub_21615ACF0(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*a1 != a2)
  {
    sub_21614CC78(a1);
    JUMPOUT(0x2166CA370);
  }
  if (!a4) {
    operator new();
  }
  if (*(unsigned char *)(a4 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a4 + 32) + 32) + 40))(*(void *)(*(void *)(a4 + 32) + 32), &unk_26C6BC178, 24);
  }
  unint64_t result = sub_21615A7E4((void *)a4, 0x18uLL, (uint64_t)sub_216156484);
  unint64_t v8 = result;
  if (*((char *)a3 + 23) < 0)
  {
    unint64_t result = (unint64_t)sub_21610A674((unsigned char *)result, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    *(void *)(result + 16) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t result = v9;
  }
  *a1 = v8;
  return result;
}

void sub_21615AE48(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_21615AE6C(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*a1 == a2)
  {
    if (!a4) {
      operator new();
    }
    if (*(unsigned char *)(a4 + 24))
    {
      uint64_t v11 = a4;
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a4 + 32) + 32) + 40))(*(void *)(*(void *)(a4 + 32) + 32), &unk_26C6BC178, 24);
      a4 = v11;
    }
    unint64_t v9 = sub_21615A7E4((void *)a4, 0x18uLL, (uint64_t)sub_216156484);
    uint64_t v10 = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v9 = *a3;
    *(void *)(v9 + 16) = v10;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    *a1 = v9;
  }
  else
  {
    uint64_t v6 = sub_21614CC78(a1);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    long long v8 = *a3;
    *(void *)(v7 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    *((unsigned char *)a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

unint64_t sub_21615AF98(uint64_t *a1, long long *a2, uint64_t a3)
{
  return sub_21615ACF0(a1, (uint64_t)&qword_26797EE40, a2, a3);
}

void sub_21615AFAC(uint64_t *a1, long long *a2, uint64_t a3)
{
}

unint64_t sub_21615AFC0(uint64_t *a1, long long *a2, uint64_t a3)
{
  return sub_21615ACF0(a1, 0, a2, a3);
}

uint64_t *sub_21615AFD0(uint64_t *a1, uint64_t a2)
{
  if ((uint64_t *)*a1 == &qword_26797EE40) {
    return sub_21615AFEC((uint64_t **)a1, a2);
  }
  else {
    return (uint64_t *)sub_21614CC78(a1);
  }
}

uint64_t *sub_21615AFEC(uint64_t **a1, uint64_t a2)
{
  if (*a1 != &qword_26797EE40)
  {
    sub_21615C174((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    uint64_t v4 = sub_21615C18C(v7, "CHECK failed: IsDefault(default_value): ");
    sub_21615C2C8((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v7);
  }
  if (!a2) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a2 + 32) + 32) + 40))(*(void *)(*(void *)(a2 + 32) + 32), &unk_26C6BC178, 24);
  }
  unint64_t result = (uint64_t *)sub_21615A7E4((void *)a2, 0x18uLL, (uint64_t)sub_216156484);
  uint64_t *result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_21615B0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_21615B10C(uint64_t *a1, void *a2, uint64_t a3)
{
  if (*a1) {
    return sub_21614CC78(a1);
  }
  else {
    return sub_21615B128((unint64_t *)a1, a3, a2);
  }
}

unint64_t sub_21615B128(unint64_t *a1, uint64_t a2, void *a3)
{
  if (*a1)
  {
    sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    char v6 = sub_21615C18C(v13, "CHECK failed: IsDefault(default_value): ");
    sub_21615C2C8((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v13);
  }
  unint64_t explicit = atomic_load_explicit(a3 + 3, memory_order_acquire);
  if (explicit)
  {
    if (a2) {
      goto LABEL_5;
    }
LABEL_10:
    operator new();
  }
  unint64_t explicit = sub_21615AC34(a3);
  if (!a2) {
    goto LABEL_10;
  }
LABEL_5:
  if (*(unsigned char *)(a2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a2 + 32) + 32) + 40))(*(void *)(*(void *)(a2 + 32) + 32), &unk_26C6BC178, 24);
  }
  unint64_t v8 = sub_21615A7E4((void *)a2, 0x18uLL, (uint64_t)sub_216156484);
  unint64_t v9 = v8;
  if (*(char *)(explicit + 23) < 0)
  {
    sub_21610A674((unsigned char *)v8, *(void **)explicit, *(void *)(explicit + 8));
  }
  else
  {
    long long v10 = *(_OWORD *)explicit;
    *(void *)(v8 + 16) = *(void *)(explicit + 16);
    *(_OWORD *)unint64_t v8 = v10;
  }
  *a1 = v9;
  return v9;
}

void sub_21615B28C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *sub_21615B2C4(std::string *result, void *a2)
{
  if (result->__r_.__value_.__r.__words[0])
  {
    uint64_t v3 = (std::string *)sub_21614CC78((uint64_t *)result);
    unint64_t explicit = (const std::string *)atomic_load_explicit(a2 + 3, memory_order_acquire);
    if (!explicit) {
      unint64_t explicit = (const std::string *)sub_21615AC34(a2);
    }
    return std::string::operator=(v3, explicit);
  }
  return result;
}

int64_t sub_21615B330(uint64_t a1, char *a2)
{
  while (1)
  {
    unint64_t v5 = *(char **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
    if (!v4)
    {
      int64_t v10 = v5 - a2;
      int64_t v9 = v10 + 16;
      *(void *)(a1 + 8) = a2;
      if (((v10 + 16) & 0x80000000) == 0) {
        return v9;
      }
      goto LABEL_12;
    }
    int v6 = a2 - v5;
    if (a2 <= v5) {
      break;
    }
    if (*(unsigned char *)(a1 + 56))
    {
      sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      uint64_t v7 = sub_21615C18C(v15, "CHECK failed: !had_error_: ");
      sub_21615C2C8((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v15);
    }
    if (v6 >= 17)
    {
      sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      unint64_t v8 = sub_21615C18C(v15, "CHECK failed: overrun <= kSlopBytes: ");
      sub_21615C2C8((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v15);
    }
    a2 = &sub_21615B4C8((char **)a1)[v6];
    if (*(unsigned char *)(a1 + 56)) {
      return 0;
    }
  }
  memcpy(v4, (const void *)(a1 + 16), (size_t)&a2[-a1 - 16]);
  uint64_t v11 = *(char **)a1;
  *(void *)(a1 + 8) += &a2[-a1 - 16];
  int64_t v9 = v11 - a2;
  if (((v11 - a2) & 0x80000000) == 0) {
    return v9;
  }
LABEL_12:
  sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  char v12 = sub_21615C18C(v15, "CHECK failed: s >= 0: ");
  sub_21615C2C8((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  sub_21615C2D0((uint64_t)v15);
  return v9;
}

void sub_21615B4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_21615B4C8(char **a1)
{
  if (*((unsigned char *)a1 + 56))
  {
    sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    uint64_t v2 = sub_21615C18C(v13, "CHECK failed: !had_error_: ");
    sub_21615C2C8((uint64_t)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v13);
  }
  if (a1[6])
  {
    uint64_t v3 = (char *)(a1 + 2);
    unint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    if (v4)
    {
      memcpy(v4, a1 + 2, v5 - v3);
      int v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(char *, std::string *, int *))(*(void *)a1[6] + 16))(a1[6], v13, &v12) & 1) == 0)
        {
          *((unsigned char *)a1 + 56) = 1;
          goto LABEL_14;
        }
        uint64_t v6 = v12;
      }
      while (!v12);
      unint64_t v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*a1;
        *a1 = &v5[v6 - 16];
        a1[1] = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        std::string::size_type v10 = v13[0].__r_.__value_.__r.__words[0];
        sub_21615C174((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        int64_t v9 = sub_21615C18C(v13, "CHECK failed: size > 0: ");
        sub_21615C2C8((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)v13);
        LODWORD(v6) = v12;
        unint64_t v5 = (char *)v10;
      }
      *(_OWORD *)uint64_t v3 = *(_OWORD *)*a1;
      uint64_t v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)uint64_t v3 = *(_OWORD *)v5;
      uint64_t v7 = (char *)(a1 + 4);
    }
    *a1 = v7;
    a1[1] = v5;
  }
  else
  {
    *((unsigned char *)a1 + 56) = 1;
    uint64_t v3 = (char *)(a1 + 2);
LABEL_14:
    *a1 = (char *)(a1 + 4);
  }
  return v3;
}

void sub_21615B660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_21615B680(uint64_t a1, char *a2)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    int64_t v3 = sub_21615B330(a1, a2);
    if (v3) {
      (*(void (**)(void, int64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v3);
    }
    a2 = (char *)(a1 + 16);
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = a1 + 16;
  }
  return a2;
}

char *sub_21615B6E8(uint64_t a1, char *a2)
{
  while (!*(unsigned char *)(a1 + 56))
  {
    int64_t v3 = &a2[-*(void *)a1];
    if ((v3 & 0x80000000) != 0)
    {
      sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      unint64_t v5 = sub_21615C18C(v8, "CHECK failed: overrun >= 0: ");
      sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      uint64_t v4 = sub_21615C18C(v8, "CHECK failed: overrun <= kSlopBytes: ");
      sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      sub_21615C2D0((uint64_t)v8);
    }
    a2 = &sub_21615B4C8((char **)a1)[(int)v3];
    if ((unint64_t)a2 < *(void *)a1) {
      return a2;
    }
  }
  return (char *)(a1 + 16);
}

void sub_21615B7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_21615B7FC(uint64_t *a1, char *a2, int a3, unint64_t a4)
{
  uint64_t v4 = (char *)a4;
  for (int i = sub_21615B8A0(a1, a4); a3 > i; int i = sub_21615B8A0(a1, (unint64_t)v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    uint64_t v4 = sub_21615B6E8((uint64_t)a1, &v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t sub_21615B8A0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 + 16 < a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    unint64_t v5 = sub_21615C18C(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
    uint64_t v3 = *a1;
  }
  return v3 - a2 + 16;
}

void sub_21615B924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_21615B93C(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  if (sub_21615B8A0((uint64_t *)a1, (unint64_t)a4) <= (int)a3)
  {
    unint64_t v8 = sub_21615B680(a1, a4);
    if (((*(uint64_t (**)(void, void *, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), a2, a3) & 1) == 0)
    {
      *(unsigned char *)(a1 + 56) = 1;
      unint64_t v8 = (char *)(a1 + 16);
      *(void *)a1 = a1 + 32;
    }
    return v8;
  }
  if (*(void *)a1 - (void)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return &a4[(int)a3];
  }

  return sub_21615B7FC((uint64_t *)a1, (char *)a2, a3, (unint64_t)a4);
}

char *sub_21615BA44(unint64_t *a1, int a2, void **a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    uint64_t v4 = sub_21615B6E8((uint64_t)a1, a4);
    unint64_t v8 = *a1;
  }
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v9 = *((unsigned int *)a3 + 2);
  }
  if (v8 <= (unint64_t)v4)
  {
    sub_21615C174((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    std::string::size_type v10 = sub_21615C18C(v23, "CHECK failed: ptr < end_: ");
    sub_21615C2C8((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v23);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *uint64_t v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      int v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      int v12 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v11;
    int v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *int v12 = v16;
  size_t v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = *a3;
  }
  return sub_21615BBCC((uint64_t)a1, v18, v9, v17);
}

void sub_21615BBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_21615BBCC(uint64_t a1, void *a2, uint64_t a3, char *__dst)
{
  if (*(unsigned char *)(a1 + 57))
  {
    return sub_21615B93C(a1, a2, a3, __dst);
  }
  else if (*(void *)a1 - (void)__dst < (int)a3)
  {
    return sub_21615B7FC((uint64_t *)a1, (char *)a2, a3, (unint64_t)__dst);
  }
  else
  {
    uint64_t v6 = (int)a3;
    memcpy(__dst, a2, (int)a3);
    return &__dst[v6];
  }
}

char *sub_21615BC58(uint64_t *a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    uint64_t v4 = sub_21615B6E8((uint64_t)a1, a4);
    unint64_t v8 = *a1;
  }
  if (*(char *)(a3 + 23) >= 0) {
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (v8 <= (unint64_t)v4)
  {
    sub_21615C174((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    std::string::size_type v10 = sub_21615C18C(v23, "CHECK failed: ptr < end_: ");
    sub_21615C2C8((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v23);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *uint64_t v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      int v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      int v12 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v11;
    int v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *int v12 = v16;
  size_t v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v18 = (char *)a3;
  }
  else {
    uint64_t v18 = *(char **)a3;
  }
  if (*a1 - (uint64_t)v17 < (int)v9) {
    return sub_21615B7FC(a1, v18, v9, (unint64_t)v17);
  }
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_21615BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21615BE08(int a1, int a2, const std::string::value_type *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a2 > 3014000)
  {
    LODWORD(v2sub_21613F89C(&a9, 0) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v22 = 76;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program requires version ");
    sub_21615C1FC(a2, &v17);
    if ((v19 & 0x80u) == 0) {
      uint64_t v6 = (const std::string::value_type *)&v17;
    }
    else {
      uint64_t v6 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v7 = v19;
    }
    else {
      std::string::size_type v7 = v18;
    }
    std::string::append(&v23, v6, v7);
    std::string::append(&v23, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v25 = 0;
    sub_21610B834(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v9 = v16;
    }
    else {
      std::string::size_type v9 = v15;
    }
    std::string::append(&v23, p_p, v9);
    std::string::append(&v23, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_21615C484(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  if (a1 < 3014000)
  {
    LODWORD(v2sub_21613F89C(&a9, 0) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v22 = 87;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program was compiled against version ");
    sub_21615C1FC(a1, &v17);
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v10 = (const std::string::value_type *)&v17;
    }
    else {
      std::string::size_type v10 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v11 = v19;
    }
    else {
      std::string::size_type v11 = v18;
    }
    std::string::append(&v23, v10, v11);
    std::string::append(&v23, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v25 = 0;
    sub_21610B834(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      int v12 = (const std::string::value_type *)&__p;
    }
    else {
      int v12 = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v13 = v16;
    }
    else {
      std::string::size_type v13 = v15;
    }
    std::string::append(&v23, v12, v13);
    std::string::append(&v23, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_21615C484(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
}

void sub_21615C104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21615C174(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)unint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 4sub_21613F89C(&a9, 0) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

std::string *sub_21615C18C(std::string *a1, const std::string::value_type *a2)
{
  return a1;
}

std::string *sub_21615C1B8(std::string *a1, const std::string::value_type *a2)
{
  uint64_t v3 = a1 + 1;
  std::string::size_type v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string::size_type v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

void *sub_21615C1FC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x80uLL, "%d.%d.%d", a1 / 1000000, a1 / 1000 % 1000, a1 % 1000);
  char __str[127] = 0;
  return sub_21610B834(a2, __str);
}

const char **sub_21615C2C8(uint64_t a1, const char **a2)
{
  return sub_21615C484(a2);
}

uint64_t sub_21615C2D0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_21615C304(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  if ((result & 0x80000000) == 0)
  {
    std::string::size_type v4 = (FILE **)MEMORY[0x263EF8348];
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v5 = (const char *)a4;
    }
    else {
      uint64_t v5 = *(const char **)a4;
    }
    fprintf((FILE *)*MEMORY[0x263EF8348], "[libprotobuf %s %s:%d] %s\n", off_2642678C0[result], a2, a3, v5);
    uint64_t v6 = *v4;
    return fflush(v6);
  }
  return result;
}

std::string *sub_21615C384(std::string *a1, int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x80uLL, "%d", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_21615C404(std::string *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x80uLL, "%lu", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **sub_21615C484(const char **result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result == 3)
  {
    uint64_t v2 = 3;
  }
  else
  {
    int v3 = atomic_load((unsigned int *)&unk_26797CF18);
    if (v3 > 0) {
      goto LABEL_6;
    }
    uint64_t v2 = *(unsigned int *)result;
  }
  unint64_t result = (const char **)off_26B4AB9F0(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    sub_21615C544(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
    __cxa_throw(exception, (struct type_info *)&unk_26C6BACB0, (void (*)(void *))sub_21615C548);
  }
  return result;
}

void sub_21615C530(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21615C54C(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C6C5718;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }

  std::exception::~exception(this);
}

void sub_21615C5AC(std::exception *a1)
{
  sub_21615C54C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21615C5E4(uint64_t a1)
{
  uint64_t result = a1 + 24;
  if (*(char *)(a1 + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_21615C600(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  *(void *)a1 = &unk_26C6C5718;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_21610A674((unsigned char *)v5, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    *(void *)(v5 + 16) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return a1;
}

void sub_21615C66C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21615C680(uint64_t a1, int a2, _OWORD *a3)
{
  if (qword_26797CF20)
  {
    int8x8_t v3 = *(int8x8_t *)(qword_26797CF20 + 8);
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 8);
      unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      unint64_t v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v9 = v7;
        if (v7 >= *(void *)&v3) {
          unint64_t v9 = v7 % *(void *)&v3;
        }
      }
      else
      {
        unint64_t v9 = (*(void *)&v3 - 1) & v7;
      }
      std::string::size_type v10 = *(uint64_t ***)(*(void *)qword_26797CF20 + 8 * v9);
      if (v10)
      {
        for (int i = *v10; i; int i = (uint64_t *)*i)
        {
          unint64_t v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              long long v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(void *)&v3) {
                v12 %= *(void *)&v3;
              }
            }
            else
            {
              v12 &= *(void *)&v3 - 1;
            }
            if (v12 != v9) {
              return 0;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_21615C794(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_21615C7A4(uint64_t a1)
{
  if (!*(void *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      sub_216166AAC(*(unsigned __int8 **)v2, (unsigned __int8 *)(v2 + 8));
    }
    else if (*(_WORD *)(a1 + 10))
    {
      uint64_t v3 = 32 * *(unsigned __int16 *)(a1 + 10);
      unint64_t v4 = (unsigned __int8 *)(v2 + 8);
      do
      {
        sub_2161667F0(v4);
        v4 += 32;
        v3 -= 32;
      }
      while (v3);
    }
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      if (v5)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        sub_21612A250(v5, *(void **)(v5 + 8));
        MEMORY[0x2166CA800](v7, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x2166CA7C0](v5, 0x1062C802AB6010CLL);
    }
  }
  return a1;
}

unsigned __int8 *sub_21615C878(unsigned __int8 *result)
{
  uint64_t v1 = result;
  if (result[9])
  {
    uint64_t v2 = result[8];
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v3 = sub_21615C18C(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_21615C2D0((uint64_t)v10);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)uint64_t v1 = 0;
        break;
      case 9:
      case 12:
        uint64_t result = (unsigned __int8 *)sub_216156578(*(void *)v1);
        break;
      case 10:
      case 11:
        uint64_t result = (unsigned __int8 *)sub_2161672B4(*(void *)v1);
        break;
      default:
        return result;
    }
  }
  else if ((result[10] & 1) == 0)
  {
    uint64_t v4 = result[8];
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v5 = sub_21615C18C(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_21615C2D0((uint64_t)v10);
    }
    int v6 = dword_21636DF18[v4];
    if (v6 == 10)
    {
      uint64_t v8 = **(void **)v1;
      if ((v1[10] & 0x10) != 0) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(v8 + 112))();
      }
      else {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(v8 + 40))();
      }
    }
    else if (v6 == 9)
    {
      uint64_t v7 = *(void *)v1;
      if (*(char *)(*(void *)v1 + 23) < 0)
      {
        **(unsigned char **)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v7 = 0;
        *(unsigned char *)(v7 + 23) = 0;
      }
    }
    v1[10] = v1[10] & 0xF0 | 1;
  }
  return result;
}

void sub_21615CA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615CA94(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_216161A00(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[a3] != 1)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unint64_t v12 = sub_21615C18C(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      std::string::size_type v13 = sub_21615C18C(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[v14] != 1)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unsigned __int8 v16 = sub_21615C18C(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_21615CC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615CCAC(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_216161A00((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[a3] != 1)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      std::string::size_type v15 = sub_21615C18C(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_26C6BAC70, 16);
    }
    char v17 = (uint64_t *)sub_21615A7E4((void *)v16, 0x10uLL, (uint64_t)sub_216166B1C);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      std::string::size_type v18 = sub_21615C18C(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[v19] != 1)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unsigned int v21 = sub_21615C18C(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      int v22 = sub_21615C18C(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_21616C4D4(v23, v24 + 1);
    uint64_t result = sub_21616C974((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_21616C974((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_21615CFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615CFF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_216161A00(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[a3] != 2)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      unint64_t v12 = sub_21615C18C(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      char v13 = sub_21615C18C(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[v14] != 2)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      uint64_t v16 = sub_21615C18C(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(void *)uint64_t v9 = a4;
  return result;
}

void sub_21615D1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615D208(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_216161A00((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[a3] != 2)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      std::string::size_type v15 = sub_21615C18C(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_26C6BAC90, 16);
    }
    char v17 = (uint64_t *)sub_21615A7E4((void *)v16, 0x10uLL, (uint64_t)sub_216166B20);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      std::string::size_type v18 = sub_21615C18C(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[v19] != 2)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      unsigned int v21 = sub_21615C18C(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      int v22 = sub_21615C18C(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_21616D18C(v23, v24 + 1);
    uint64_t result = sub_21616D62C((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_21616D62C((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_21615D50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615D54C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_216161A00(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[a3] != 3)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      unint64_t v12 = sub_21615C18C(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      char v13 = sub_21615C18C(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[v14] != 3)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      uint64_t v16 = sub_21615C18C(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_21615D72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615D764(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_216161A00((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[a3] != 3)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      std::string::size_type v15 = sub_21615C18C(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_26C6BAC80, 16);
    }
    char v17 = (uint64_t *)sub_21615A7E4((void *)v16, 0x10uLL, (uint64_t)sub_216166B24);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      std::string::size_type v18 = sub_21615C18C(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[v19] != 3)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      unsigned int v21 = sub_21615C18C(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      int v22 = sub_21615C18C(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_21616CB30(v23, v24 + 1);
    uint64_t result = sub_21616CFD0((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_21616CFD0((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_21615DA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615DAA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_216161A00(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[a3] != 4)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      unint64_t v12 = sub_21615C18C(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      char v13 = sub_21615C18C(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[v14] != 4)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      uint64_t v16 = sub_21615C18C(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(void *)uint64_t v9 = a4;
  return result;
}

void sub_21615DC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615DCC0(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_216161A00((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[a3] != 4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      std::string::size_type v15 = sub_21615C18C(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_26C6BACA0, 16);
    }
    char v17 = (uint64_t *)sub_21615A7E4((void *)v16, 0x10uLL, (uint64_t)sub_216166B28);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      std::string::size_type v18 = sub_21615C18C(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[v19] != 4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      unsigned int v21 = sub_21615C18C(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      int v22 = sub_21615C18C(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_21616D7E8(v23, v24 + 1);
    uint64_t result = sub_21616DC88((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_21616DC88((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_21615DFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615E004(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5)
{
  uint64_t result = (uint64_t)sub_216161A00(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a4;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[a3] != 6)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      unint64_t v12 = sub_21615C18C(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      char v13 = sub_21615C18C(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[v14] != 6)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      uint64_t v16 = sub_21615C18C(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(float *)uint64_t v9 = a5;
  return result;
}

void sub_21615E1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615E224(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, float a6)
{
  std::string::size_type v11 = sub_216161A00((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a5;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[a3] != 6)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      std::string::size_type v15 = sub_21615C18C(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_26C6BAC60, 16);
    }
    char v17 = (uint64_t *)sub_21615A7E4((void *)v16, 0x10uLL, (uint64_t)sub_216166B2C);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      std::string::size_type v18 = sub_21615C18C(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[v19] != 6)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      unsigned int v21 = sub_21615C18C(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      int v22 = sub_21615C18C(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_21616DE44(v23, v24 + 1);
    uint64_t result = sub_21616E2E4((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
  }
  else
  {
    uint64_t result = sub_21616E2E4((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_21615E530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615E570(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t result = (uint64_t)sub_216161A00(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a4;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[a3] != 5)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      unint64_t v12 = sub_21615C18C(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      char v13 = sub_21615C18C(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[v14] != 5)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      uint64_t v16 = sub_21615C18C(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(double *)uint64_t v9 = a5;
  return result;
}

void sub_21615E758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615E790(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, double a6)
{
  std::string::size_type v11 = sub_216161A00((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a5;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[a3] != 5)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      std::string::size_type v15 = sub_21615C18C(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_26C6BAC50, 16);
    }
    char v17 = (uint64_t *)sub_21615A7E4((void *)v16, 0x10uLL, (uint64_t)sub_216166B30);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      std::string::size_type v18 = sub_21615C18C(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[v19] != 5)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      unsigned int v21 = sub_21615C18C(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      int v22 = sub_21615C18C(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_21616E4A0(v23, v24 + 1);
    uint64_t result = sub_21616E940((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
  }
  else
  {
    uint64_t result = sub_21616E940((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_21615EA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615EADC(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_216161A00(a1, a2);
  uint64_t v9 = (unsigned char *)result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[a3] != 7)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      unint64_t v12 = sub_21615C18C(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    v9[9] = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      char v13 = sub_21615C18C(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    uint64_t v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[v14] != 7)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      uint64_t v16 = sub_21615C18C(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
  }
  v9[10] &= 0xF0u;
  *uint64_t v9 = a4;
  return result;
}

void sub_21615ECBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615ECF4(uint64_t *a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_216161A00((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[a3] != 7)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      std::string::size_type v15 = sub_21615C18C(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_26C6BAC40, 16);
    }
    char v17 = (uint64_t *)sub_21615A7E4((void *)v16, 0x10uLL, (uint64_t)sub_216166B34);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      std::string::size_type v18 = sub_21615C18C(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[v19] != 7)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      unsigned int v21 = sub_21615C18C(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      int v22 = sub_21615C18C(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_21616BE80(v23, v24 + 1);
    uint64_t result = sub_21616C31C((uint64_t)v23);
    *(unsigned char *)(result + v24) = a5;
  }
  else
  {
    uint64_t result = sub_21616C31C((uint64_t)v23);
    *(unsigned char *)(result + v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_21615EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21615F038(uint64_t *a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v9 = sub_216161A00((uint64_t)a1, a2);
  char v10 = v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 9) = 1;
    *((unsigned char *)v9 + 8) = a3;
    *((unsigned char *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_26C6BAC50, 16);
        }
        char v13 = sub_216166B30;
        goto LABEL_31;
      case 2:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_26C6BAC60, 16);
        }
        char v13 = sub_216166B2C;
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_26C6BAC90, 16);
        }
        char v13 = sub_216166B20;
        goto LABEL_31;
      case 4:
      case 6:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_26C6BACA0, 16);
        }
        char v13 = sub_216166B28;
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_26C6BAC70, 16);
        }
        char v13 = sub_216166B1C;
        goto LABEL_31;
      case 7:
      case 13:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_26C6BAC80, 16);
        }
        char v13 = sub_216166B24;
        goto LABEL_31;
      case 8:
        uint64_t v12 = *a1;
        if (!v12) {
LABEL_32:
        }
          operator new();
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_26C6BAC40, 16);
        }
        char v13 = sub_216166B34;
LABEL_31:
        uint64_t v14 = (uint64_t *)sub_21615A7E4((void *)v12, 0x10uLL, (uint64_t)v13);
        *uint64_t v14 = 0;
        v14[1] = v12;
        goto LABEL_43;
      case 9:
      case 12:
        uint64_t v15 = *a1;
        if (!v15) {
          goto LABEL_42;
        }
        if (*(unsigned char *)(v15 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v15 + 32) + 32) + 40))(*(void *)(*(void *)(v15 + 32) + 32), &unk_26C6BACF0, 24);
        }
        uint64_t v16 = (uint64_t *(*)(uint64_t *))sub_216166B38;
        goto LABEL_41;
      case 10:
      case 11:
        uint64_t v15 = *a1;
        if (!v15) {
LABEL_42:
        }
          operator new();
        if (*(unsigned char *)(v15 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v15 + 32) + 32) + 40))(*(void *)(*(void *)(v15 + 32) + 32), &unk_26C6BACC8, 24);
        }
        uint64_t v16 = sub_216166B3C;
LABEL_41:
        uint64_t v14 = (uint64_t *)sub_21615A7E4((void *)v15, 0x18uLL, (uint64_t)v16);
        std::string v14[2] = 0;
        *uint64_t v14 = v15;
        v14[1] = 0;
LABEL_43:
        *char v10 = v14;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

uint64_t sub_21615F4AC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_216161A00(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[a3] != 8)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      uint64_t v12 = sub_21615C18C(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      char v13 = sub_21615C18C(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v15 = sub_21615C18C(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
    if (dword_21636DF18[v14] != 8)
    {
      sub_21615C174((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      uint64_t v16 = sub_21615C18C(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_21615C2C8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_21615C2D0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_21615F68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615F6C4(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  char v11 = sub_216161A00((uint64_t)a1, a2);
  uint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[a3] != 8)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      uint64_t v15 = sub_21615C18C(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_26C6BAC70, 16);
    }
    char v17 = (uint64_t *)sub_21615A7E4((void *)v16, 0x10uLL, (uint64_t)sub_216166B1C);
    *char v17 = 0;
    v17[1] = v16;
    *uint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      std::string::size_type v18 = sub_21615C18C(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_21615C18C(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (dword_21636DF18[v19] != 8)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      unsigned int v21 = sub_21615C18C(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_21615C174((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      int v22 = sub_21615C18C(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_21615C2C8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_21616C4D4(v23, v24 + 1);
    uint64_t result = sub_21616C974((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_21616C974((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_21615F9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21615FA08(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = sub_216161A00((uint64_t)a1, a2);
  uint64_t v8 = (unsigned __int8 *)v7;
  std::string v7[2] = a4;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v10 = sub_21615C18C(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v20);
    }
    if (dword_21636DF18[a3] != 9)
    {
      sub_21615C174((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      char v11 = sub_21615C18C(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_21615C2C8((uint64_t)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v20);
    }
    v8[9] = 0;
    uint64_t v12 = *a1;
    if (!v12) {
      operator new();
    }
    if (*(unsigned char *)(v12 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_26C6BC178, 24);
    }
    char v13 = (void *)sub_21615A7E4((void *)v12, 0x18uLL, (uint64_t)sub_216156484);
    *char v13 = 0;
    v13[1] = 0;
    std::string v13[2] = 0;
    *(void *)uint64_t v8 = v13;
  }
  else
  {
    if (*((unsigned char *)v7 + 9))
    {
      sub_21615C174((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      uint64_t v14 = sub_21615C18C(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v20);
    }
    uint64_t v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v16 = sub_21615C18C(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v20);
    }
    if (dword_21636DF18[v15] != 9)
    {
      sub_21615C174((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      char v17 = sub_21615C18C(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_21615C2C8((uint64_t)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v20);
    }
  }
  v8[10] &= 0xF0u;
  return *(void *)v8;
}

void sub_21615FC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21615FCB0(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = sub_216161A00((uint64_t)a1, a2);
  uint64_t v8 = v7;
  std::string v7[2] = a4;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v10 = sub_21615C18C(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v27);
    }
    if (dword_21636DF18[a3] != 9)
    {
      sub_21615C174((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      char v11 = sub_21615C18C(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_21615C2C8((uint64_t)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v27);
    }
    *((unsigned char *)v8 + 9) = 1;
    *((unsigned char *)v8 + 11) = 0;
    uint64_t v12 = *a1;
    if (!v12) {
      operator new();
    }
    if (*(unsigned char *)(v12 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_26C6BACF0, 24);
    }
    char v13 = (uint64_t *)sub_21615A7E4((void *)v12, 0x18uLL, (uint64_t)sub_216166B38);
    std::string v13[2] = 0;
    *char v13 = v12;
    v13[1] = 0;
    *uint64_t v8 = v13;
  }
  else
  {
    if (!*((unsigned char *)v7 + 9))
    {
      sub_21615C174((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      uint64_t v14 = sub_21615C18C(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v27);
    }
    uint64_t v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v16 = sub_21615C18C(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v27);
    }
    if (dword_21636DF18[v15] != 9)
    {
      sub_21615C174((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      char v17 = sub_21615C18C(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_21615C2C8((uint64_t)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v27);
    }
  }
  uint64_t v18 = (uint64_t)*v8;
  char v19 = *(int **)(v18 + 16);
  if (!v19)
  {
    int v21 = *(_DWORD *)(v18 + 12);
LABEL_22:
    sub_21616EBCC(v18, v21 + 1);
    char v19 = *(int **)(v18 + 16);
    int v21 = *v19;
    goto LABEL_23;
  }
  uint64_t v20 = *(int *)(v18 + 8);
  int v21 = *v19;
  if ((int)v20 < *v19)
  {
    *(_DWORD *)(v18 + 8) = v20 + 1;
    return *(void **)&v19[2 * v20 + 2];
  }
  if (v21 == *(_DWORD *)(v18 + 12)) {
    goto LABEL_22;
  }
LABEL_23:
  *char v19 = v21 + 1;
  uint64_t v23 = *(void *)v18;
  if (!*(void *)v18) {
    operator new();
  }
  if (*(unsigned char *)(v23 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v23 + 32) + 32) + 40))(*(void *)(*(void *)(v23 + 32) + 32), &unk_26C6BC178, 24);
  }
  uint64_t result = (void *)sub_21615A7E4((void *)v23, 0x18uLL, (uint64_t)sub_216156484);
  void *result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v24 = *(void *)(v18 + 16);
  uint64_t v25 = *(int *)(v18 + 8);
  *(_DWORD *)(v18 + 8) = v25 + 1;
  *(void *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_216160028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216160060(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char v9 = sub_216161A00((uint64_t)a1, a2);
  char v10 = v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v12 = sub_21615C18C(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v21);
    }
    if (dword_21636DF18[a3] != 10)
    {
      sub_21615C174((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      char v13 = sub_21615C18C(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_21615C2C8((uint64_t)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v21);
    }
    *((unsigned char *)v10 + 9) = 0;
    *((unsigned char *)v10 + 10) &= 0xFu;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 32))(a4, *a1);
    *char v10 = (uint64_t *)result;
    *((unsigned char *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((unsigned char *)v9 + 9))
    {
      sub_21615C174((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      uint64_t v15 = sub_21615C18C(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_21615C2C8((uint64_t)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v21);
    }
    uint64_t v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v17 = sub_21615C18C(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v21);
    }
    if (dword_21636DF18[v16] != 10)
    {
      sub_21615C174((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      uint64_t v18 = sub_21615C18C(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_21615C2C8((uint64_t)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v21);
    }
    char v19 = *((unsigned char *)v10 + 10);
    *((unsigned char *)v10 + 1sub_21613F89C(&a9, 0) = v19 & 0xF0;
    uint64_t result = (uint64_t)*v10;
    if ((v19 & 0x10) != 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
    }
  }
  return result;
}

void sub_2161602C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2161602F8(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char v9 = sub_216161A00((uint64_t)a1, a2);
  char v10 = (unsigned __int8 *)v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v12 = sub_21615C18C(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v25, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v26);
    }
    if (dword_21636DF18[a3] != 10)
    {
      sub_21615C174((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 762);
      char v13 = sub_21615C18C(v26, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_21615C2C8((uint64_t)&v25, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v26);
    }
    v10[9] = 1;
    uint64_t v14 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v14 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v14 + 32) + 32) + 40))(*(void *)(*(void *)(v14 + 32) + 32), &unk_26C6BACC8, 24);
    }
    uint64_t v15 = (void *)sub_21615A7E4((void *)v14, 0x18uLL, (uint64_t)sub_216166B3C);
    std::string v15[2] = 0;
    *uint64_t v15 = v14;
    v15[1] = 0;
    *(void *)char v10 = v15;
  }
  else
  {
    if (!*((unsigned char *)v9 + 9))
    {
      sub_21615C174((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      uint64_t v16 = sub_21615C18C(v26, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_21615C2C8((uint64_t)&v25, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v26);
    }
    uint64_t v17 = v10[8];
    if ((v17 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v18 = sub_21615C18C(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v25, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v26);
    }
    if (dword_21636DF18[v17] != 10)
    {
      sub_21615C174((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      char v19 = sub_21615C18C(v26, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_21615C2C8((uint64_t)&v25, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v26);
    }
  }
  uint64_t v20 = *(void *)v10;
  int v21 = *(_DWORD **)(*(void *)v10 + 16);
  if (!v21
    || (uint64_t v22 = *(int *)(v20 + 8), (int)v22 >= *v21)
    || (*(_DWORD *)(v20 + 8) = v22 + 1, (uint64_t v23 = *(void *)&v21[2 * v22 + 2]) == 0))
  {
    uint64_t v23 = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 32))(a4, *a1);
    sub_216166C54(*(void *)v10, v23);
  }
  return v23;
}

void sub_2161605E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21616061C(unsigned __int8 *result)
{
  uint64_t v1 = (void *)*((void *)result + 2);
  if (*((unsigned __int16 *)result + 4) >= 0x101u)
  {
    int v6 = (unsigned __int8 *)*v1;
    uint64_t v4 = (unsigned __int8 *)(v1 + 1);
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      do
      {
        uint64_t result = sub_21615C878(v5 + 40);
        uint64_t v7 = (unsigned __int8 *)*((void *)v5 + 1);
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 2);
            BOOL v9 = *(void *)v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)result + 5))
  {
    uint64_t v2 = 32 * *((unsigned __int16 *)result + 5);
    uint64_t v3 = (unsigned __int8 *)(v1 + 1);
    do
    {
      uint64_t result = sub_21615C878(v3);
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_2161606BC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
    uint64_t v7 = &v5[32 * v6];
    uint64_t v8 = *(void *)(a2 + 16);
    if (v4 > 0x100)
    {
      unint64_t v14 = sub_216160A14(v5, v7, *(void **)v8, (void *)(v8 + 8));
    }
    else
    {
      uint64_t v9 = *(unsigned __int16 *)(a2 + 10);
      uint64_t v10 = v8 + 32 * v9;
      BOOL v12 = v6 == 0;
      uint64_t v11 = 0;
      BOOL v12 = v12 || v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8) {
            char v13 = v5 + 32;
          }
          else {
            char v13 = v5;
          }
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            uint64_t v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      unint64_t v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    sub_2161607EC((void *)a1, v14);
  }
  uint64_t v15 = *(int **)(a2 + 16);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x101u)
  {
    char v19 = *(void **)v15;
    sub_216166D88(v19, (void *)v15 + 1, (uint64_t *)a1);
  }
  else if (*(_WORD *)(a2 + 10))
  {
    uint64_t v16 = &v15[8 * *(unsigned __int16 *)(a2 + 10)];
    do
    {
      uint64_t v17 = v15 + 2;
      unsigned int v18 = *v15;
      v15 += 8;
      sub_216160B1C((uint64_t *)a1, v18, v17);
    }
    while (v15 != v16);
  }
}

void *sub_2161607EC(void *result, unint64_t a2)
{
  unint64_t v2 = *((unsigned __int16 *)result + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    unsigned int v4 = result;
    do
    {
      if ((_WORD)v2) {
        LOWORD(v2) = 4 * v2;
      }
      else {
        LOWORD(v2) = 1;
      }
    }
    while ((unsigned __int16)v2 < a2);
    uint64_t v5 = (char *)result[2];
    uint64_t v6 = *((unsigned __int16 *)result + 5);
    uint64_t v7 = (uint64_t *)*result;
    if ((unsigned __int16)v2 < 0x101u)
    {
      size_t v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if (v7[3])
        {
          (*(void (**)(void, void *, size_t))(**(void **)(v7[4] + 32) + 40))(*(void *)(v7[4] + 32), &unk_26C6BAD18, v8);
          size_t v8 = 32 * (unsigned __int16)v2;
        }
        uint64_t result = (void *)sub_21615AAE0(v7, v8);
      }
      else
      {
        uint64_t result = operator new[](v8);
      }
      uint64_t v9 = (uint64_t **)result;
      if (v6) {
        uint64_t result = memmove(result, v5, 32 * v6);
      }
    }
    else
    {
      if (!v7) {
        operator new();
      }
      if (v7[3]) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(v7[4] + 32) + 40))(*(void *)(v7[4] + 32), &unk_26C6BC620, 24);
      }
      uint64_t result = (void *)sub_21615A7E4(v7, 0x18uLL, (uint64_t)sub_2161674CC);
      uint64_t v9 = (uint64_t **)result;
      result[1] = 0;
      uint64_t v10 = result + 1;
      result[2] = 0;
      void *result = result + 1;
      if (v6)
      {
        uint64_t v11 = &v5[32 * v6];
        BOOL v12 = v5;
        do
        {
          int v15 = *(_DWORD *)v12;
          long long v13 = *(_OWORD *)(v12 + 8);
          uint64_t v17 = *((void *)v12 + 3);
          long long v16 = v13;
          uint64_t result = sub_2161674D4(v9, v10, &v15, &v15);
          uint64_t v10 = result;
          v12 += 32;
        }
        while (v12 != v11);
      }
    }
    if (*v4) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v5 == 0;
    }
    if (!v14) {
      uint64_t result = (void *)MEMORY[0x2166CA7C0](v5, 0x1062C802AB6010CLL);
    }
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u) {
      *((_WORD *)v4 + 5) = 0;
    }
  }
  return result;
}

uint64_t sub_216160A14(char *a1, char *a2, void *a3, void *a4)
{
  uint64_t v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    uint64_t v4 = 0;
    do
    {
      int v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          uint64_t v6 = (void *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              uint64_t v6 = (void *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              uint64_t v7 = a3;
              a3 = (void *)a3[2];
            }
            while ((void *)*a3 != v7);
          }
        }
        else
        {
          size_t v8 = (void *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              size_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint64_t v9 = a3;
              a3 = (void *)a3[2];
            }
            while ((void *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = (void *)a3[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)a3[2];
          BOOL v13 = *v12 == (void)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

void sub_216160B1C(uint64_t *a1, uint64_t a2, void *a3)
{
  if (!*((unsigned char *)a3 + 9))
  {
    if (*((unsigned char *)a3 + 10)) {
      return;
    }
    uint64_t v11 = *((unsigned __int8 *)a3 + 8);
    if ((v11 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      BOOL v12 = sub_21615C18C(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v62, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v63);
    }
    switch(v11)
    {
      case 1:
        sub_21615E570((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(double *)a3);
        return;
      case 2:
        sub_21615E004((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(float *)a3);
        return;
      case 3:
      case 16:
      case 18:
        sub_21615CFF0((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
        return;
      case 4:
      case 6:
        sub_21615DAA8((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
        return;
      case 5:
      case 15:
      case 17:
        sub_21615CA94((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      case 7:
      case 13:
        sub_21615D54C((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      case 8:
        sub_21615EADC((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(unsigned char *)a3, a3[2]);
        return;
      case 9:
      case 12:
        int v36 = *((unsigned __int8 *)a3 + 8);
        double v37 = *(double *)a3;
        if (*(char *)(*a3 + 23) < 0)
        {
          sub_21610A674(__p, **(void ***)&v37, *(void *)(*(void *)&v37 + 8));
        }
        else
        {
          long long v38 = **(_OWORD **)&v37;
          uint64_t v61 = *(void *)(*(void *)&v37 + 16);
          *(_OWORD *)std::string __p = v38;
        }
        sub_2161618E0(a1, a2, v36, (__n128 *)__p, (uint64_t *)a3[2]);
        if (SHIBYTE(v61) < 0) {
          operator delete(__p[0]);
        }
        return;
      case 10:
      case 11:
        uint64_t v39 = (uint64_t *)a3[2];
        int v40 = sub_216161A00((uint64_t)a1, a2);
        uint64_t v41 = v40;
        void v40[2] = v39;
        if (v42)
        {
          *((unsigned char *)v40 + 8) = *((unsigned char *)a3 + 8);
          *((unsigned char *)v40 + 11) = *((unsigned char *)a3 + 11);
          *((unsigned char *)v40 + 9) = 0;
          char v43 = *((unsigned char *)v40 + 10) & 0xF;
          if ((*((unsigned char *)a3 + 10) & 0x10) == 0)
          {
            *((unsigned char *)v40 + 1sub_21613F89C(&a9, 0) = v43;
            uint64_t v44 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 32))(*a3, *a1);
            *uint64_t v41 = v44;
LABEL_120:
            (*(void (**)(uint64_t, void))(*(void *)v44 + 64))(v44, *a3);
            goto LABEL_126;
          }
          *((unsigned char *)v40 + 1sub_21613F89C(&a9, 0) = v43 | 0x10;
          uint64_t v59 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, *a1);
          *uint64_t v41 = v59;
          (*(void (**)(uint64_t, void))(*(void *)v59 + 104))(v59, *a3);
        }
        else
        {
          if (*((unsigned __int8 *)v40 + 8) != *((unsigned __int8 *)a3 + 8))
          {
            sub_21615C174((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1026);
            int v53 = sub_21615C18C(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
            sub_21615C2C8((uint64_t)&v62, (const char **)&v53->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v63);
          }
          if (*((unsigned __int8 *)v41 + 11) != *((unsigned __int8 *)a3 + 11))
          {
            sub_21615C174((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1027);
            uint64_t v54 = sub_21615C18C(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
            sub_21615C2C8((uint64_t)&v62, (const char **)&v54->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v63);
          }
          if (*((unsigned char *)v41 + 9))
          {
            sub_21615C174((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1028);
            uint64_t v55 = sub_21615C18C(v63, "CHECK failed: !extension->is_repeated: ");
            sub_21615C2C8((uint64_t)&v62, (const char **)&v55->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v63);
          }
          uint64_t v56 = (uint64_t *)*v41;
          double v57 = *(double *)a3;
          if ((*((unsigned char *)a3 + 10) & 0x10) != 0)
          {
            if ((*((unsigned char *)v41 + 10) & 0x10) != 0)
            {
              (*(void (**)(void, double))(*v56 + 104))(*v41, COERCE_DOUBLE(*(void *)&v57));
              goto LABEL_126;
            }
            double v57 = COERCE_DOUBLE((*(uint64_t (**)(void, void))(**(void **)&v57 + 24))(*a3, *v41));
            uint64_t v58 = *v56;
          }
          else
          {
            uint64_t v58 = *v56;
            if ((*((unsigned char *)v41 + 10) & 0x10) != 0)
            {
              uint64_t v44 = (*(uint64_t (**)(void, double))(v58 + 32))(*v41, COERCE_DOUBLE(*(void *)&v57));
              goto LABEL_120;
            }
          }
          (*(void (**)(uint64_t *, double))(v58 + 64))(v56, COERCE_DOUBLE(*(void *)&v57));
        }
LABEL_126:
        *((unsigned char *)v41 + 10) &= 0xF0u;
        return;
      case 14:
        sub_21615F4AC((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      default:
        return;
    }
  }
  uint64_t v6 = (uint64_t *)a3[2];
  uint64_t v7 = sub_216161A00((uint64_t)a1, a2);
  size_t v8 = (uint64_t *)v7;
  std::string v7[2] = v6;
  uint64_t v10 = v9;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = *((unsigned char *)a3 + 8);
    *((unsigned char *)v7 + 11) = *((unsigned char *)a3 + 11);
    *((unsigned char *)v7 + 9) = 1;
  }
  else
  {
    if (*((unsigned __int8 *)v7 + 8) != *((unsigned __int8 *)a3 + 8))
    {
      sub_21615C174((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 931);
      BOOL v13 = sub_21615C18C(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
      sub_21615C2C8((uint64_t)&v62, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v63);
    }
    if (*((unsigned __int8 *)v8 + 11) != *((unsigned __int8 *)a3 + 11))
    {
      sub_21615C174((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 932);
      BOOL v14 = sub_21615C18C(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
      sub_21615C2C8((uint64_t)&v62, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v63);
    }
    if (!*((unsigned char *)v8 + 9))
    {
      sub_21615C174((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 933);
      int v15 = sub_21615C18C(v63, "CHECK failed: extension->is_repeated: ");
      sub_21615C2C8((uint64_t)&v62, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v63);
    }
  }
  uint64_t v16 = *((unsigned __int8 *)a3 + 8);
  if ((v16 - 19) <= 0xFFFFFFED)
  {
    sub_21615C174((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v17 = sub_21615C18C(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_21615C2C8((uint64_t)&v62, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v63);
  }
  switch(v16)
  {
    case 1:
      if (v10)
      {
        uint64_t v26 = *a1;
        if (!v26) {
          operator new();
        }
        if (*(unsigned char *)(v26 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v26 + 32) + 32) + 40))(*(void *)(*(void *)(v26 + 32) + 32), &unk_26C6BAC50, 16);
        }
        unint64_t v27 = sub_21615A7E4((void *)v26, 0x10uLL, (uint64_t)sub_216166B30);
        *(void *)unint64_t v27 = 0;
        *(void *)(v27 + 8) = v26;
        *size_t v8 = v27;
      }
      else
      {
        unint64_t v27 = *v8;
      }
      sub_21616E9CC((int *)v27, (int *)*a3);
      break;
    case 2:
      if (v10)
      {
        uint64_t v28 = *a1;
        if (!v28) {
          operator new();
        }
        if (*(unsigned char *)(v28 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v28 + 32) + 32) + 40))(*(void *)(*(void *)(v28 + 32) + 32), &unk_26C6BAC60, 16);
        }
        unint64_t v29 = sub_21615A7E4((void *)v28, 0x10uLL, (uint64_t)sub_216166B2C);
        *(void *)unint64_t v29 = 0;
        *(void *)(v29 + 8) = v28;
        *size_t v8 = v29;
      }
      else
      {
        unint64_t v29 = *v8;
      }
      sub_21616E370((int *)v29, (int *)*a3);
      break;
    case 3:
    case 16:
    case 18:
      if (v10)
      {
        uint64_t v20 = *a1;
        if (!v20) {
          operator new();
        }
        if (*(unsigned char *)(v20 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v20 + 32) + 32) + 40))(*(void *)(*(void *)(v20 + 32) + 32), &unk_26C6BAC90, 16);
        }
        unint64_t v21 = sub_21615A7E4((void *)v20, 0x10uLL, (uint64_t)sub_216166B20);
        *(void *)unint64_t v21 = 0;
        *(void *)(v21 + 8) = v20;
        *size_t v8 = v21;
      }
      else
      {
        unint64_t v21 = *v8;
      }
      sub_21616D6B8((int *)v21, (int *)*a3);
      break;
    case 4:
    case 6:
      if (v10)
      {
        uint64_t v24 = *a1;
        if (!v24) {
          operator new();
        }
        if (*(unsigned char *)(v24 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v24 + 32) + 32) + 40))(*(void *)(*(void *)(v24 + 32) + 32), &unk_26C6BACA0, 16);
        }
        unint64_t v25 = sub_21615A7E4((void *)v24, 0x10uLL, (uint64_t)sub_216166B28);
        *(void *)unint64_t v25 = 0;
        *(void *)(v25 + 8) = v24;
        *size_t v8 = v25;
      }
      else
      {
        unint64_t v25 = *v8;
      }
      sub_21616DD14((int *)v25, (int *)*a3);
      break;
    case 5:
    case 14:
    case 15:
    case 17:
      if (v10)
      {
        uint64_t v18 = *a1;
        if (!v18) {
          operator new();
        }
        if (*(unsigned char *)(v18 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v18 + 32) + 32) + 40))(*(void *)(*(void *)(v18 + 32) + 32), &unk_26C6BAC70, 16);
        }
        unint64_t v19 = sub_21615A7E4((void *)v18, 0x10uLL, (uint64_t)sub_216166B1C);
        *(void *)unint64_t v19 = 0;
        *(void *)(v19 + 8) = v18;
        *size_t v8 = v19;
      }
      else
      {
        unint64_t v19 = *v8;
      }
      sub_21616CA00((int *)v19, (int *)*a3);
      break;
    case 7:
    case 13:
      if (v10)
      {
        uint64_t v22 = *a1;
        if (!v22) {
          operator new();
        }
        if (*(unsigned char *)(v22 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v22 + 32) + 32) + 40))(*(void *)(*(void *)(v22 + 32) + 32), &unk_26C6BAC80, 16);
        }
        unint64_t v23 = sub_21615A7E4((void *)v22, 0x10uLL, (uint64_t)sub_216166B24);
        *(void *)unint64_t v23 = 0;
        *(void *)(v23 + 8) = v22;
        *size_t v8 = v23;
      }
      else
      {
        unint64_t v23 = *v8;
      }
      sub_21616D05C((int *)v23, (int *)*a3);
      break;
    case 8:
      if (v10)
      {
        uint64_t v30 = *a1;
        if (!v30) {
          operator new();
        }
        if (*(unsigned char *)(v30 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v30 + 32) + 32) + 40))(*(void *)(*(void *)(v30 + 32) + 32), &unk_26C6BAC40, 16);
        }
        unint64_t v31 = sub_21615A7E4((void *)v30, 0x10uLL, (uint64_t)sub_216166B34);
        *(void *)unint64_t v31 = 0;
        *(void *)(v31 + 8) = v30;
        *size_t v8 = v31;
      }
      else
      {
        unint64_t v31 = *v8;
      }
      sub_21616C3A8((int *)v31, (int *)*a3);
      break;
    case 9:
    case 12:
      if (v10)
      {
        uint64_t v32 = *a1;
        if (!v32) {
          operator new();
        }
        if (*(unsigned char *)(v32 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v32 + 32) + 32) + 40))(*(void *)(*(void *)(v32 + 32) + 32), &unk_26C6BACF0, 24);
        }
        long long v33 = (void *)sub_21615A7E4((void *)v32, 0x18uLL, (uint64_t)sub_216166B38);
        uint64_t v33[2] = 0;
        *long long v33 = v32;
        v33[1] = 0;
        *size_t v8 = (uint64_t)v33;
      }
      else
      {
        long long v33 = (void *)*v8;
      }
      sub_21615687C((uint64_t)v33, *a3);
      break;
    case 10:
    case 11:
      if (v10)
      {
        uint64_t v34 = *a1;
        if (!*a1) {
          operator new();
        }
        if (*(unsigned char *)(v34 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v34 + 32) + 32) + 40))(*(void *)(*(void *)(v34 + 32) + 32), &unk_26C6BACC8, 24);
        }
        uint64_t v35 = (void *)sub_21615A7E4((void *)v34, 0x18uLL, (uint64_t)sub_216166B3C);
        uint64_t v35[2] = 0;
        *uint64_t v35 = v34;
        v35[1] = 0;
        *size_t v8 = (uint64_t)v35;
      }
      double v45 = *(double *)a3;
      if (*(int *)(*(void *)&v45 + 8) >= 1)
      {
        int v46 = 0;
        do
        {
          uint64_t v47 = sub_216166B74(*(uint64_t *)&v45, v46);
          uint64_t v48 = v47;
          uint64_t v49 = *v8;
          uint64_t v50 = *(_DWORD **)(*v8 + 16);
          if (!v50
            || (uint64_t v51 = *(int *)(v49 + 8), (int)v51 >= *v50)
            || (*(_DWORD *)(v49 + 8) = v51 + 1, (uint64_t v52 = *(void *)&v50[2 * v51 + 2]) == 0))
          {
            uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v47 + 32))(v47, *a1);
            sub_216166C54(*v8, v52);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 64))(v52, v48);
          ++v46;
        }
        while (v46 < *(_DWORD *)(*(void *)&v45 + 8));
      }
      break;
    default:
      return;
  }
}

void sub_216161828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

__n128 sub_2161618E0(uint64_t *a1, uint64_t a2, int a3, __n128 *a4, uint64_t *a5)
{
  uint64_t v6 = sub_21615FA08(a1, a2, a3, a5);
  uint64_t v7 = (__n128 *)v6;
  if (*(char *)(v6 + 23) < 0) {
    operator delete(*(void **)v6);
  }
  __n128 result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  __n128 *v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

uint64_t sub_216161934(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (unsigned __int8 *)result;
  if (*(void *)result == *(void *)a2)
  {
    __int16 v4 = *(_WORD *)(result + 8);
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    *(_WORD *)(a2 + 8) = v4;
    __int16 v5 = *(_WORD *)(result + 10);
    *(_WORD *)(result + 1sub_21613F89C(&a9, 0) = *(_WORD *)(a2 + 10);
    *(_WORD *)(a2 + 1sub_21613F89C(&a9, 0) = v5;
    uint64_t v6 = *(void *)(result + 16);
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    sub_2161606BC((uint64_t)&v7, a2);
    sub_21616061C((unsigned __int8 *)a2);
    sub_2161606BC(a2, (uint64_t)v3);
    sub_21616061C(v3);
    sub_2161606BC((uint64_t)v3, (uint64_t)&v7);
    return sub_21615C7A4((uint64_t)&v7);
  }
  return result;
}

void sub_2161619EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21615C7A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_216161A00(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  __int16 v4 = *(uint64_t ***)(a1 + 16);
  if (v3 >= 0x101)
  {
    *((void *)&v14 + 1) = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    LODWORD(v14) = a2;
    return sub_216167410(v4, (int *)&v14, &v14) + 5;
  }
  uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
  uint64_t v7 = &v4[4 * v6];
  if (!*(_WORD *)(a1 + 10))
  {
    if (!*(_WORD *)(a1 + 8)) {
      goto LABEL_18;
    }
    LOWORD(v6) = 0;
LABEL_17:
    *(_WORD *)(a1 + 1sub_21613F89C(&a9, 0) = v6 + 1;
    *(_DWORD *)uint64_t v7 = a2;
    v7[1] = 0;
    __n128 result = v7 + 1;
    std::string v7[2] = 0;
    _OWORD v7[3] = 0;
    return result;
  }
  unint64_t v8 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    unint64_t v9 = v8 >> 1;
    uint64_t v10 = (int *)&v4[4 * (v8 >> 1)];
    int v12 = *v10;
    uint64_t v11 = (uint64_t **)(v10 + 8);
    v8 += ~(v8 >> 1);
    if (v12 < (int)a2) {
      __int16 v4 = v11;
    }
    else {
      unint64_t v8 = v9;
    }
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == a2) {
      return v4 + 1;
    }
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *(_WORD *)(a1 + 10);
      uint64_t v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3) {
    goto LABEL_17;
  }
LABEL_18:
  sub_2161607EC((void *)a1, v6 + 1);
  return (uint64_t **)sub_216161A00(a1, a2);
}

uint64_t sub_216161B4C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    unint64_t v8 = (unsigned __int8 *)*v1;
    uint64_t v7 = (unsigned __int8 *)(v1 + 1);
    uint64_t v6 = v8;
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        uint64_t v4 = sub_216161C20(v6 + 40);
        if (!v4) {
          break;
        }
        unint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            unint64_t v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (unsigned __int8 *)*((void *)v6 + 2);
            BOOL v11 = *(void *)v10 == (void)v6;
            uint64_t v6 = v10;
          }
          while (!v11);
        }
        uint64_t v6 = v10;
      }
      while (v10 != v7);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v3 = *(void *)(a1 + 16) + 32 * *(unsigned __int16 *)(a1 + 10);
      uint64_t v4 = v1 == (void *)v3;
      if (v1 == (void *)v3) {
        break;
      }
      __int16 v5 = (unsigned __int8 *)(v1 + 1);
      if (!sub_216161C20(v5)) {
        break;
      }
      uint64_t v1 = v5 + 24;
      if (*(unsigned __int16 *)(a1 + 8) > 0x100u) {
        sub_216167A88();
      }
    }
  }
  return v4;
}

uint64_t sub_216161C20(unsigned __int8 *a1)
{
  uint64_t v2 = a1[8];
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v3 = sub_21615C18C(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_21615C2C8((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v10);
  }
  if (dword_21636DF18[v2] != 10) {
    return 1;
  }
  if (a1[9])
  {
    uint64_t v4 = *(void *)a1;
    if (*(int *)(*(void *)a1 + 8) >= 1)
    {
      int v5 = 0;
      while (1)
      {
        uint64_t v6 = sub_216166B74(v4, v5);
        if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6) & 1) == 0) {
          break;
        }
        ++v5;
        uint64_t v4 = *(void *)a1;
        if (v5 >= *(_DWORD *)(*(void *)a1 + 8)) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  if (a1[10]) {
    return 1;
  }
  uint64_t v7 = **(void **)a1;
  if ((a1[10] & 0x10) != 0) {
    return ((*(uint64_t (**)(void))(v7 + 72))() & 1) != 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(v7 + 48))();
  if (result) {
    return 1;
  }
  return result;
}

void sub_216161D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216161D90(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned char *a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)a4 + 16))(a4, a3, a5);
  if (result)
  {
    uint64_t v10 = *a5;
    if ((v10 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      BOOL v11 = sub_21615C18C(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v15);
    }
    unsigned int v12 = dword_21636DF64[v10];
    *a6 = 0;
    if (a2 == 2 && a5[1])
    {
      if (v12 > 5)
      {
        sub_21615C174((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 82);
        BOOL v13 = sub_21615C18C(v15, "can't reach here.");
        sub_21615C2C8((uint64_t)&v14, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)v15);
      }
      else
      {
        uint64_t result = 1;
        if (((1 << v12) & 0x1C) == 0)
        {
          *a6 = 1;
          return result;
        }
      }
    }
    return v12 == a2;
  }
  return result;
}

void sub_216161ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216161EEC(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unint64_t *a5, int32x2_t *a6)
{
  unsigned int v9 = a2;
  v16[0] = &unk_26C6C5740;
  v16[1] = a4;
  uint64_t v11 = a2 >> 3;
  unsigned __int8 v15 = 0;
  if (sub_216161D90((uint64_t)a1, a2 & 7, a2 >> 3, (uint64_t)v16, v14, &v15)) {
    return sub_216161FCC(a1, v11, v15, (uint64_t)v14, a5, a3, a6);
  }
  if (*a5) {
    BOOL v13 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else {
    BOOL v13 = (std::string *)sub_21614CE8C(a5);
  }
  return sub_216169D4C(v9, v13, (char *)a3, a6);
}

unsigned __int8 *sub_216161FCC(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5, unsigned __int8 *a6, int32x2_t *a7)
{
  unint64_t v8 = a6;
  uint64_t v11 = a2;
  unsigned int v12 = a1;
  if (a3)
  {
    switch(*(unsigned char *)a4)
    {
      case 1:
        uint64_t v30 = sub_21615F038(a1, a2, 1, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_216169BE4(v30, v8, a7);
        break;
      case 2:
        unint64_t v31 = sub_21615F038(a1, a2, 2, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_216169B68(v31, v8, a7);
        break;
      case 3:
        uint64_t v32 = sub_21615F038(a1, a2, 3, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_216169928((int *)v32, v8, (uint64_t)a7);
        break;
      case 4:
        long long v33 = sub_21615F038(a1, a2, 4, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_216169938((int *)v33, v8, (uint64_t)a7);
        break;
      case 5:
        uint64_t v16 = sub_21615F038(a1, a2, 5, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_216169908((int *)v16, v8, (uint64_t)a7);
        break;
      case 6:
        uint64_t v34 = sub_21615F038(a1, a2, 6, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_216169A70(v34, v8, a7);
        break;
      case 7:
        uint64_t v35 = sub_21615F038(a1, a2, 7, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_216169978(v35, v8, a7);
        break;
      case 8:
        int v36 = sub_21615F038(a1, a2, 8, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_216169968((int *)v36, v8, (uint64_t)a7);
        break;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        sub_21615C174((uint64_t)&v89, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/extension_set_inl.h", 79);
        BOOL v13 = sub_21615C18C(&v89, "Non-primitive types can't be packed.");
        sub_21615C2C8((uint64_t)&v88, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v89);
        goto LABEL_169;
      case 0xD:
        uint64_t v18 = sub_21615F038(a1, a2, 13, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_216169918((int *)v18, v8, (uint64_t)a7);
        break;
      case 0xE:
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_21615F038(a1, a2, 14, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 8);
        uint64_t v90 = a5;
        int v91 = v11;
        unint64_t v8 = (unsigned __int8 *)sub_216166E78((uint64_t)a7, (char *)v8, (uint64_t)&v89);
        goto LABEL_169;
      case 0xF:
        unint64_t v19 = sub_21615F038(a1, a2, 15, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_2161699F4(v19, v8, a7);
        break;
      case 0x10:
        double v37 = sub_21615F038(a1, a2, 16, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_216169AEC(v37, v8, a7);
        break;
      case 0x11:
        uint64_t v20 = sub_21615F038(a1, a2, 17, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_216169948((int *)v20, v8, (uint64_t)a7);
        break;
      case 0x12:
        long long v38 = sub_21615F038(a1, a2, 18, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_216169958((int *)v38, v8, (uint64_t)a7);
        break;
      default:
        goto LABEL_169;
    }
  }
  else
  {
    switch(*(unsigned char *)a4)
    {
      case 1:
        unint64_t v8 = a6 + 8;
        double v39 = *(double *)a6;
        if (*(unsigned char *)(a4 + 1)) {
          sub_21615E790(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v39);
        }
        else {
          sub_21615E570((uint64_t)a1, a2, 1, *(void *)(a4 + 24), v39);
        }
        goto LABEL_169;
      case 2:
        unint64_t v8 = a6 + 4;
        float v40 = *(float *)a6;
        if (*(unsigned char *)(a4 + 1)) {
          sub_21615E224(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v40);
        }
        else {
          sub_21615E004((uint64_t)a1, a2, 2, *(void *)(a4 + 24), v40);
        }
        goto LABEL_169;
      case 3:
        uint64_t v41 = *a6;
        if ((char)*a6 < 0)
        {
          int v67 = v41 + (a6[1] << 7);
          uint64_t v41 = (v67 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_216169794((uint64_t)a6, (v67 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            uint64_t v41 = v84;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v55 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v56 = 3;
          goto LABEL_166;
        }
        uint64_t v79 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v80 = 3;
        goto LABEL_168;
      case 4:
        uint64_t v42 = *a6;
        if ((char)*a6 < 0)
        {
          int v68 = v42 + (a6[1] << 7);
          uint64_t v42 = (v68 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_216169794((uint64_t)a6, (v68 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            uint64_t v42 = v85;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v43 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v44 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v45 = 4;
          goto LABEL_147;
        }
        uint64_t v69 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v70 = 4;
        goto LABEL_149;
      case 5:
        int v21 = *a6;
        if ((char)*a6 < 0)
        {
          int v63 = v21 + (a6[1] << 7);
          int v21 = v63 - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_216169794((uint64_t)a6, (v63 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            int v21 = v81;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v27 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v28 = 5;
          goto LABEL_134;
        }
        uint64_t v65 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v66 = 5;
        int v82 = v21;
        goto LABEL_137;
      case 6:
        unint64_t v8 = a6 + 8;
        uint64_t v42 = *(void *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v43 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v44 = *(uint64_t **)(a4 + 24);
          int v45 = 6;
LABEL_147:
          sub_21615DCC0(a1, a2, v45, v43, v42, v44);
        }
        else
        {
          uint64_t v69 = *(void *)(a4 + 24);
          int v70 = 6;
LABEL_149:
          sub_21615DAA8((uint64_t)a1, a2, v70, v42, v69);
        }
        goto LABEL_169;
      case 7:
        unint64_t v8 = a6 + 4;
        int v25 = *(_DWORD *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v46 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v47 = *(uint64_t **)(a4 + 24);
          int v48 = 7;
          goto LABEL_128;
        }
        uint64_t v71 = *(void *)(a4 + 24);
        int v72 = 7;
        int v73 = *(_DWORD *)a6;
        goto LABEL_130;
      case 8:
        uint64_t v49 = *a6;
        if ((char)*a6 < 0)
        {
          uint64_t v49 = v49 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_216169794((uint64_t)a6, v49);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1)) {
          sub_21615ECF4(v12, v11, 8, *(unsigned __int8 *)(a4 + 2), v49 != 0, *(uint64_t **)(a4 + 24));
        }
        else {
          sub_21615EADC((uint64_t)v12, v11, 8, v49 != 0, *(void *)(a4 + 24));
        }
        goto LABEL_169;
      case 9:
      case 0xC:
        char v14 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v15 = (uint64_t)sub_21615FCB0(a1, a2, 9, v14);
        }
        else {
          uint64_t v15 = sub_21615FA08(a1, a2, 9, v14);
        }
        uint64_t v58 = (std::string *)v15;
        int v59 = *v8;
        if ((char)*v8 < 0)
        {
          uint64_t v61 = sub_216169820((uint64_t)v8, *v8);
          if (!v61)
          {
LABEL_113:
            unint64_t v8 = 0;
            goto LABEL_169;
          }
          uint64_t v60 = (std::string::value_type *)v61;
          int v59 = v62;
        }
        else
        {
          uint64_t v60 = (std::string::value_type *)(v8 + 1);
        }
        return (unsigned __int8 *)sub_216166E0C((uint64_t)a7, v60, v59, v58);
      case 0xA:
        uint64_t v50 = *(void *)(a4 + 8);
        uint64_t v51 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v52 = sub_2161602F8(a1, a2, 10, v50, v51);
        }
        else {
          uint64_t v52 = sub_216160060(a1, a2, 10, v50, v51);
        }
        int v74 = a7[11].i32[0];
        BOOL v75 = __OFSUB__(v74--, 1);
        a7[11].i32[0] = v74;
        if (v74 < 0 != v75) {
          goto LABEL_113;
        }
        ++a7[11].i32[1];
        uint64_t v76 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, int32x2_t *))(*(void *)v52 + 88))(v52, v8, a7);
        a7[11] = vadd_s32(a7[11], (int32x2_t)0xFFFFFFFF00000001);
        __int32 v77 = a7[10].i32[0];
        a7[10].i32[0] = 0;
        if (v77 == ((8 * v11) | 3)) {
          unint64_t v8 = (unsigned __int8 *)v76;
        }
        else {
          unint64_t v8 = 0;
        }
        goto LABEL_169;
      case 0xB:
        uint64_t v22 = *(void *)(a4 + 8);
        unint64_t v23 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v24 = sub_2161602F8(a1, a2, 11, v22, v23);
        }
        else {
          uint64_t v24 = sub_216160060(a1, a2, 11, v22, v23);
        }
        return (unsigned __int8 *)sub_216169594(a7, v24, v8);
      case 0xD:
        int v25 = *a6;
        if ((char)*a6 < 0)
        {
          int v64 = v25 + (a6[1] << 7);
          int v25 = v64 - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_216169794((uint64_t)a6, (v64 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            int v25 = v83;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v46 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v47 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v48 = 13;
LABEL_128:
          sub_21615D764(a1, a2, v48, v46, v25, v47);
        }
        else
        {
          uint64_t v71 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v72 = 13;
          int v73 = v25;
LABEL_130:
          sub_21615D54C((uint64_t)a1, a2, v72, v73, v71);
        }
        goto LABEL_169;
      case 0xE:
        unint64_t v53 = *a6;
        if ((char)*a6 < 0)
        {
          int v78 = v53 + (a6[1] << 7);
          unint64_t v53 = (v78 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_216169794((uint64_t)a6, (v78 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            unint64_t v53 = v86;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if ((*(uint64_t (**)(void, unint64_t))(a4 + 8))(*(void *)(a4 + 16), v53))
        {
          if (*(unsigned char *)(a4 + 1)) {
            sub_21615F6C4(v12, v11, 14, *(unsigned __int8 *)(a4 + 2), v53, *(uint64_t **)(a4 + 24));
          }
          else {
            sub_21615F4AC((uint64_t)v12, v11, 14, v53, *(void *)(a4 + 24));
          }
        }
        else
        {
          if (*a5) {
            uint64_t v87 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            uint64_t v87 = (std::string *)sub_21614CE8C(a5);
          }
          sub_216169680(v11, v53, v87);
        }
        goto LABEL_169;
      case 0xF:
        unint64_t v8 = a6 + 4;
        int v21 = *(_DWORD *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v27 = *(uint64_t **)(a4 + 24);
          int v28 = 15;
          goto LABEL_134;
        }
        uint64_t v65 = *(void *)(a4 + 24);
        int v66 = 15;
        goto LABEL_136;
      case 0x10:
        unint64_t v8 = a6 + 8;
        uint64_t v41 = *(void *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v55 = *(uint64_t **)(a4 + 24);
          int v56 = 16;
          goto LABEL_166;
        }
        uint64_t v79 = *(void *)(a4 + 24);
        int v80 = 16;
        goto LABEL_168;
      case 0x11:
        LODWORD(v29) = *a6;
        if ((char)*a6 < 0)
        {
          uint64_t v29 = v29 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_216169794((uint64_t)a6, v29);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        int v21 = -(v29 & 1) ^ (v29 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v27 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v28 = 17;
LABEL_134:
          sub_21615CCAC(a1, a2, v28, v26, v21, v27);
        }
        else
        {
          uint64_t v65 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v66 = 17;
LABEL_136:
          int v82 = v21;
LABEL_137:
          sub_21615CA94((uint64_t)a1, a2, v66, v82, v65);
        }
        goto LABEL_169;
      case 0x12:
        unint64_t v57 = *a6;
        if ((char)*a6 < 0)
        {
          unint64_t v57 = v57 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_216169794((uint64_t)a6, v57);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        uint64_t v41 = -(uint64_t)(v57 & 1) ^ (v57 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v55 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v56 = 18;
LABEL_166:
          sub_21615D208(a1, a2, v56, v54, v41, v55);
        }
        else
        {
          uint64_t v79 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v80 = 18;
LABEL_168:
          sub_21615CFF0((uint64_t)a1, a2, v80, v41, v79);
        }
LABEL_169:
        uint64_t result = v8;
        break;
      default:
        goto LABEL_169;
    }
  }
  return result;
}

void sub_216162C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_216162CE4(uint64_t a1, signed int a2, int a3, char *a4, uint64_t *a5)
{
  uint64_t v7 = *(unsigned int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    uint64_t v18 = *((void *)v7 + 1);
    uint64_t v17 = v7 + 2;
    uint64_t v16 = v18;
    if (v18)
    {
      unint64_t v19 = v17;
      do
      {
        int v20 = *(_DWORD *)(v16 + 32);
        BOOL v21 = v20 < a2;
        if (v20 >= a2) {
          uint64_t v22 = (uint64_t *)v16;
        }
        else {
          uint64_t v22 = (uint64_t *)(v16 + 8);
        }
        if (!v21) {
          unint64_t v19 = (void *)v16;
        }
        uint64_t v16 = *v22;
      }
      while (*v22);
      if (v19 != (void *)v17)
      {
        do
        {
          uint64_t v23 = *((unsigned int *)v19 + 8);
          if ((int)v23 >= a3) {
            break;
          }
          a4 = sub_216162E14((unsigned char *)v19 + 40, v23, a4, a5);
          uint64_t v24 = (unsigned int *)v19[1];
          if (v24)
          {
            do
            {
              int v25 = v24;
              uint64_t v24 = *(unsigned int **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              int v25 = (unsigned int *)v19[2];
              BOOL v26 = *(void *)v25 == (void)v19;
              unint64_t v19 = v25;
            }
            while (!v26);
          }
          unint64_t v19 = v25;
        }
        while (v25 != v17);
      }
    }
  }
  else
  {
    unint64_t v8 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      unsigned int v9 = &v7[8 * v8];
      do
      {
        unint64_t v10 = v8 >> 1;
        uint64_t v11 = &v7[8 * (v8 >> 1)];
        signed int v13 = *v11;
        unsigned int v12 = v11 + 8;
        v8 += ~(v8 >> 1);
        if (v13 < a2) {
          uint64_t v7 = v12;
        }
        else {
          unint64_t v8 = v10;
        }
      }
      while (v8);
      while (v7 != v9)
      {
        uint64_t v14 = *v7;
        if ((int)v14 >= a3) {
          break;
        }
        a4 = sub_216162E14((unsigned char *)v7 + 8, v14, a4, a5);
        v7 += 8;
      }
    }
  }
  return a4;
}

char *sub_216162E14(unsigned char *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  int v5 = a3;
  if (a1[9])
  {
    if (a1[11])
    {
      if (*((_DWORD *)a1 + 3))
      {
        if (*a4 <= (unint64_t)a3) {
          int v5 = sub_21615B6E8((uint64_t)a4, a3);
        }
        unsigned int v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          char *v5 = (8 * a2) | 0x82;
          unsigned int v32 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            unsigned int v9 = v5 + 2;
            do
            {
              *(v9 - 1) = v32 | 0x80;
              unsigned int v33 = v32 >> 7;
              ++v9;
              unsigned int v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
            *(v9 - 1) = v33;
          }
          else
          {
            v5[1] = v32;
            unsigned int v9 = v5 + 2;
          }
        }
        else
        {
          char *v5 = v8;
          unsigned int v9 = v5 + 1;
        }
        unint64_t v35 = *((int *)a1 + 3);
        if (v35 > 0x7F)
        {
          *unsigned int v9 = v35 | 0x80;
          unint64_t v36 = v35 >> 7;
          if (v35 >> 14)
          {
            int v5 = v9 + 2;
            do
            {
              *(v5 - 1) = v36 | 0x80;
              unint64_t v37 = v36 >> 7;
              ++v5;
              unint64_t v38 = v36 >> 14;
              v36 >>= 7;
            }
            while (v38);
            *(v5 - 1) = v37;
          }
          else
          {
            v9[1] = v36;
            int v5 = v9 + 2;
          }
        }
        else
        {
          *unsigned int v9 = v35;
          int v5 = v9 + 1;
        }
        int v39 = a1[8];
        if ((v39 - 19) <= 0xFFFFFFED)
        {
          sub_21615C174((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
          float v40 = sub_21615C18C(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
          sub_21615C2C8((uint64_t)&v431, (const char **)&v40->__r_.__value_.__l.__data_);
          sub_21615C2D0((uint64_t)v432);
        }
        switch(v39)
        {
          case 1:
            int v63 = *(int **)a1;
            if (**(int **)a1 >= 1)
            {
              int v64 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  int v63 = *(int **)a1;
                }
                *(void *)int v5 = *(void *)sub_21616E814(v63, v64);
                v5 += 8;
                ++v64;
                int v63 = *(int **)a1;
              }
              while (v64 < **(_DWORD **)a1);
            }
            break;
          case 2:
            uint64_t v65 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v66 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  uint64_t v65 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_21616E1B8(v65, v66);
                v5 += 4;
                ++v66;
                uint64_t v65 = *(_DWORD **)a1;
              }
              while (v66 < **(_DWORD **)a1);
            }
            break;
          case 3:
            int v67 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v68 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  int v67 = *(_DWORD **)a1;
                }
                unint64_t v69 = *(void *)sub_21616D500(v67, v68);
                if (v69 > 0x7F)
                {
                  char *v5 = v69 | 0x80;
                  unint64_t v70 = v69 >> 7;
                  if (v69 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v70 | 0x80;
                      unint64_t v71 = v70 >> 7;
                      ++v5;
                      unint64_t v72 = v70 >> 14;
                      v70 >>= 7;
                    }
                    while (v72);
                    *(v5 - 1) = v71;
                  }
                  else
                  {
                    v5[1] = v70;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v69;
                }
                ++v68;
                int v67 = *(_DWORD **)a1;
              }
              while (v68 < **(_DWORD **)a1);
            }
            break;
          case 4:
            int v73 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v74 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  int v73 = *(_DWORD **)a1;
                }
                unint64_t v75 = *(void *)sub_21616DB5C(v73, v74);
                if (v75 > 0x7F)
                {
                  char *v5 = v75 | 0x80;
                  unint64_t v76 = v75 >> 7;
                  if (v75 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v76 | 0x80;
                      unint64_t v77 = v76 >> 7;
                      ++v5;
                      unint64_t v78 = v76 >> 14;
                      v76 >>= 7;
                    }
                    while (v78);
                    *(v5 - 1) = v77;
                  }
                  else
                  {
                    v5[1] = v76;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v75;
                }
                ++v74;
                int v73 = *(_DWORD **)a1;
              }
              while (v74 < **(_DWORD **)a1);
            }
            break;
          case 5:
            uint64_t v42 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v43 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  uint64_t v42 = *(_DWORD **)a1;
                }
                unint64_t v44 = *(int *)sub_21616C848(v42, v43);
                if (v44 > 0x7F)
                {
                  char *v5 = v44 | 0x80;
                  unint64_t v45 = v44 >> 7;
                  if (v44 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v45 | 0x80;
                      unint64_t v46 = v45 >> 7;
                      ++v5;
                      unint64_t v47 = v45 >> 14;
                      v45 >>= 7;
                    }
                    while (v47);
                    *(v5 - 1) = v46;
                  }
                  else
                  {
                    v5[1] = v45;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v44;
                }
                ++v43;
                uint64_t v42 = *(_DWORD **)a1;
              }
              while (v43 < **(_DWORD **)a1);
            }
            break;
          case 6:
            uint64_t v79 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v80 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  uint64_t v79 = *(_DWORD **)a1;
                }
                *(void *)int v5 = *(void *)sub_21616DB5C(v79, v80);
                v5 += 8;
                ++v80;
                uint64_t v79 = *(_DWORD **)a1;
              }
              while (v80 < **(_DWORD **)a1);
            }
            break;
          case 7:
            int v81 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v82 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  int v81 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_21616CEA4(v81, v82);
                v5 += 4;
                ++v82;
                int v81 = *(_DWORD **)a1;
              }
              while (v82 < **(_DWORD **)a1);
            }
            break;
          case 8:
            int v83 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v84 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  int v83 = *(_DWORD **)a1;
                }
                *v5++ = *(unsigned char *)sub_21616C1F0(v83, v84++);
                int v83 = *(_DWORD **)a1;
              }
              while (v84 < **(_DWORD **)a1);
            }
            break;
          case 9:
          case 10:
          case 11:
          case 12:
            sub_21615C174((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1966);
            uint64_t v41 = sub_21615C18C(v432, "Non-primitive types can't be packed.");
            sub_21615C2C8((uint64_t)&v431, (const char **)&v41->__r_.__value_.__l.__data_);
            sub_21615C2D0((uint64_t)v432);
            break;
          case 13:
            int v48 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v49 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  int v48 = *(_DWORD **)a1;
                }
                unsigned int v50 = *(_DWORD *)sub_21616CEA4(v48, v49);
                if (v50 > 0x7F)
                {
                  char *v5 = v50 | 0x80;
                  unsigned int v51 = v50 >> 7;
                  if (v50 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v51 | 0x80;
                      unsigned int v52 = v51 >> 7;
                      ++v5;
                      unsigned int v53 = v51 >> 14;
                      v51 >>= 7;
                    }
                    while (v53);
                    *(v5 - 1) = v52;
                  }
                  else
                  {
                    v5[1] = v51;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v50;
                }
                ++v49;
                int v48 = *(_DWORD **)a1;
              }
              while (v49 < **(_DWORD **)a1);
            }
            break;
          case 14:
            uint64_t v85 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v86 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  uint64_t v85 = *(_DWORD **)a1;
                }
                unint64_t v87 = *(int *)sub_21616C848(v85, v86);
                if (v87 > 0x7F)
                {
                  char *v5 = v87 | 0x80;
                  unint64_t v88 = v87 >> 7;
                  if (v87 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v88 | 0x80;
                      unint64_t v89 = v88 >> 7;
                      ++v5;
                      unint64_t v90 = v88 >> 14;
                      v88 >>= 7;
                    }
                    while (v90);
                    *(v5 - 1) = v89;
                  }
                  else
                  {
                    v5[1] = v88;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v87;
                }
                ++v86;
                uint64_t v85 = *(_DWORD **)a1;
              }
              while (v86 < **(_DWORD **)a1);
            }
            break;
          case 15:
            int v54 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v55 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  int v54 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_21616C848(v54, v55);
                v5 += 4;
                ++v55;
                int v54 = *(_DWORD **)a1;
              }
              while (v55 < **(_DWORD **)a1);
            }
            break;
          case 16:
            int v91 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v92 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  int v91 = *(_DWORD **)a1;
                }
                *(void *)int v5 = *(void *)sub_21616D500(v91, v92);
                v5 += 8;
                ++v92;
                int v91 = *(_DWORD **)a1;
              }
              while (v92 < **(_DWORD **)a1);
            }
            break;
          case 17:
            int v56 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v57 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  int v56 = *(_DWORD **)a1;
                }
                uint64_t v58 = (int *)sub_21616C848(v56, v57);
                unsigned int v59 = (2 * *v58) ^ (*v58 >> 31);
                if (v59 > 0x7F)
                {
                  char *v5 = v59 | 0x80;
                  unsigned int v60 = v59 >> 7;
                  if (v59 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v60 | 0x80;
                      unsigned int v61 = v60 >> 7;
                      ++v5;
                      unsigned int v62 = v60 >> 14;
                      v60 >>= 7;
                    }
                    while (v62);
                    *(v5 - 1) = v61;
                  }
                  else
                  {
                    v5[1] = v60;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v59;
                }
                ++v57;
                int v56 = *(_DWORD **)a1;
              }
              while (v57 < **(_DWORD **)a1);
            }
            break;
          case 18:
            uint64_t v93 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v94 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_21615B6E8((uint64_t)a4, v5);
                  uint64_t v93 = *(_DWORD **)a1;
                }
                uint64_t v95 = (uint64_t *)sub_21616D500(v93, v94);
                unint64_t v96 = (2 * *v95) ^ (*v95 >> 63);
                if (v96 > 0x7F)
                {
                  char *v5 = v96 | 0x80;
                  unint64_t v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v97 | 0x80;
                      unint64_t v98 = v97 >> 7;
                      ++v5;
                      unint64_t v99 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v99);
                    *(v5 - 1) = v98;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v94;
                uint64_t v93 = *(_DWORD **)a1;
              }
              while (v94 < **(_DWORD **)a1);
            }
            break;
          default:
            return v5;
        }
      }
      return v5;
    }
    int v18 = a1[8];
    if ((v18 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unint64_t v19 = sub_21615C18C(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v431, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v432);
    }
    switch(v18)
    {
      case 1:
        int v20 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v21 = 0;
          unsigned int v22 = 8 * a2;
          unsigned int v23 = (8 * a2) | 1;
          char v24 = (8 * a2) | 0x81;
          unsigned int v25 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v26 = v22 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              int v20 = *(_DWORD **)a1;
            }
            uint64_t v27 = *(void *)sub_21616E814(v20, v21);
            if (v23 > 0x7F)
            {
              char *v5 = v24;
              if (v23 >= 0x4000)
              {
                int v28 = v5 + 2;
                unsigned int v29 = v25;
                do
                {
                  *((unsigned char *)v28 - 1) = v29 | 0x80;
                  unsigned int v30 = v29 >> 7;
                  int v28 = (void *)((char *)v28 + 1);
                  unsigned int v31 = v29 >> 14;
                  v29 >>= 7;
                }
                while (v31);
                *((unsigned char *)v28 - 1) = v30;
              }
              else
              {
                v5[1] = v26;
                int v28 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v23;
              int v28 = v5 + 1;
            }
            *int v28 = v27;
            int v5 = (char *)(v28 + 1);
            ++v21;
            int v20 = *(_DWORD **)a1;
          }
          while (v21 < **(_DWORD **)a1);
        }
        return v5;
      case 2:
        unint64_t v100 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v101 = 0;
          unsigned int v102 = (8 * a2) | 5;
          unsigned int v103 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v104 = (8 * a2) >> 7;
          char v105 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              unint64_t v100 = *(_DWORD **)a1;
            }
            int v106 = *(_DWORD *)sub_21616E1B8(v100, v101);
            if (v102 > 0x7F)
            {
              char *v5 = v105;
              if (v102 >= 0x4000)
              {
                uint64_t v107 = v5 + 2;
                unsigned int v108 = v103;
                do
                {
                  *((unsigned char *)v107 - 1) = v108 | 0x80;
                  unsigned int v109 = v108 >> 7;
                  uint64_t v107 = (_DWORD *)((char *)v107 + 1);
                  unsigned int v110 = v108 >> 14;
                  v108 >>= 7;
                }
                while (v110);
                *((unsigned char *)v107 - 1) = v109;
              }
              else
              {
                v5[1] = v104;
                uint64_t v107 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v102;
              uint64_t v107 = v5 + 1;
            }
            *uint64_t v107 = v106;
            int v5 = (char *)(v107 + 1);
            ++v101;
            unint64_t v100 = *(_DWORD **)a1;
          }
          while (v101 < **(_DWORD **)a1);
        }
        return v5;
      case 3:
        char v111 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v112 = 0;
          unsigned int v113 = 8 * a2;
          char v114 = (8 * a2) | 0x80;
          unsigned int v115 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              char v111 = *(_DWORD **)a1;
            }
            unint64_t v116 = *(void *)sub_21616D500(v111, v112);
            if (v113 > 0x7F)
            {
              char *v5 = v114;
              if (v113 >= 0x4000)
              {
                unint64_t v117 = v5 + 2;
                unsigned int v118 = v115;
                do
                {
                  *(v117 - 1) = v118 | 0x80;
                  unsigned int v119 = v118 >> 7;
                  ++v117;
                  unsigned int v120 = v118 >> 14;
                  v118 >>= 7;
                }
                while (v120);
                *(v117 - 1) = v119;
              }
              else
              {
                v5[1] = v113 >> 7;
                unint64_t v117 = v5 + 2;
              }
            }
            else
            {
              unint64_t v117 = v5 + 1;
              char *v5 = v113;
            }
            if (v116 > 0x7F)
            {
              *unint64_t v117 = v116 | 0x80;
              unint64_t v121 = v116 >> 7;
              if (v116 >> 14)
              {
                int v5 = v117 + 2;
                do
                {
                  *(v5 - 1) = v121 | 0x80;
                  unint64_t v122 = v121 >> 7;
                  ++v5;
                  unint64_t v123 = v121 >> 14;
                  v121 >>= 7;
                }
                while (v123);
                *(v5 - 1) = v122;
              }
              else
              {
                v117[1] = v121;
                int v5 = v117 + 2;
              }
            }
            else
            {
              *unint64_t v117 = v116;
              int v5 = v117 + 1;
            }
            ++v112;
            char v111 = *(_DWORD **)a1;
          }
          while (v112 < **(_DWORD **)a1);
        }
        return v5;
      case 4:
        int v124 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v125 = 0;
          unsigned int v126 = 8 * a2;
          char v127 = (8 * a2) | 0x80;
          unsigned int v128 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              int v124 = *(_DWORD **)a1;
            }
            unint64_t v129 = *(void *)sub_21616DB5C(v124, v125);
            if (v126 > 0x7F)
            {
              char *v5 = v127;
              if (v126 >= 0x4000)
              {
                int v130 = v5 + 2;
                unsigned int v131 = v128;
                do
                {
                  *(v130 - 1) = v131 | 0x80;
                  unsigned int v132 = v131 >> 7;
                  ++v130;
                  unsigned int v133 = v131 >> 14;
                  v131 >>= 7;
                }
                while (v133);
                *(v130 - 1) = v132;
              }
              else
              {
                v5[1] = v126 >> 7;
                int v130 = v5 + 2;
              }
            }
            else
            {
              int v130 = v5 + 1;
              char *v5 = v126;
            }
            if (v129 > 0x7F)
            {
              unsigned char *v130 = v129 | 0x80;
              unint64_t v134 = v129 >> 7;
              if (v129 >> 14)
              {
                int v5 = v130 + 2;
                do
                {
                  *(v5 - 1) = v134 | 0x80;
                  unint64_t v135 = v134 >> 7;
                  ++v5;
                  unint64_t v136 = v134 >> 14;
                  v134 >>= 7;
                }
                while (v136);
                *(v5 - 1) = v135;
              }
              else
              {
                v130[1] = v134;
                int v5 = v130 + 2;
              }
            }
            else
            {
              unsigned char *v130 = v129;
              int v5 = v130 + 1;
            }
            ++v125;
            int v124 = *(_DWORD **)a1;
          }
          while (v125 < **(_DWORD **)a1);
        }
        return v5;
      case 5:
        int v137 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v138 = 0;
          unsigned int v139 = 8 * a2;
          char v140 = (8 * a2) | 0x80;
          unsigned int v141 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              int v137 = *(_DWORD **)a1;
            }
            unint64_t v142 = *(int *)sub_21616C848(v137, v138);
            if (v139 > 0x7F)
            {
              char *v5 = v140;
              if (v139 >= 0x4000)
              {
                int v143 = v5 + 2;
                unsigned int v144 = v141;
                do
                {
                  *(v143 - 1) = v144 | 0x80;
                  unsigned int v145 = v144 >> 7;
                  ++v143;
                  unsigned int v146 = v144 >> 14;
                  v144 >>= 7;
                }
                while (v146);
                *(v143 - 1) = v145;
              }
              else
              {
                v5[1] = v139 >> 7;
                int v143 = v5 + 2;
              }
            }
            else
            {
              int v143 = v5 + 1;
              char *v5 = v139;
            }
            if (v142 > 0x7F)
            {
              *int v143 = v142 | 0x80;
              unint64_t v147 = v142 >> 7;
              if (v142 >> 14)
              {
                int v5 = v143 + 2;
                do
                {
                  *(v5 - 1) = v147 | 0x80;
                  unint64_t v148 = v147 >> 7;
                  ++v5;
                  unint64_t v149 = v147 >> 14;
                  v147 >>= 7;
                }
                while (v149);
                *(v5 - 1) = v148;
              }
              else
              {
                v143[1] = v147;
                int v5 = v143 + 2;
              }
            }
            else
            {
              *int v143 = v142;
              int v5 = v143 + 1;
            }
            ++v138;
            int v137 = *(_DWORD **)a1;
          }
          while (v138 < **(_DWORD **)a1);
        }
        return v5;
      case 6:
        int v150 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v151 = 0;
          unsigned int v152 = 8 * a2;
          unsigned int v153 = (8 * a2) | 1;
          char v154 = (8 * a2) | 0x81;
          unsigned int v155 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v156 = v152 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              int v150 = *(_DWORD **)a1;
            }
            uint64_t v157 = *(void *)sub_21616DB5C(v150, v151);
            if (v153 > 0x7F)
            {
              char *v5 = v154;
              if (v153 >= 0x4000)
              {
                int v158 = v5 + 2;
                unsigned int v159 = v155;
                do
                {
                  *((unsigned char *)v158 - 1) = v159 | 0x80;
                  unsigned int v160 = v159 >> 7;
                  int v158 = (void *)((char *)v158 + 1);
                  unsigned int v161 = v159 >> 14;
                  v159 >>= 7;
                }
                while (v161);
                *((unsigned char *)v158 - 1) = v160;
              }
              else
              {
                v5[1] = v156;
                int v158 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v153;
              int v158 = v5 + 1;
            }
            *int v158 = v157;
            int v5 = (char *)(v158 + 1);
            ++v151;
            int v150 = *(_DWORD **)a1;
          }
          while (v151 < **(_DWORD **)a1);
        }
        return v5;
      case 7:
        int v162 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v163 = 0;
          unsigned int v164 = (8 * a2) | 5;
          unsigned int v165 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v166 = (8 * a2) >> 7;
          char v167 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              int v162 = *(_DWORD **)a1;
            }
            int v168 = *(_DWORD *)sub_21616CEA4(v162, v163);
            if (v164 > 0x7F)
            {
              char *v5 = v167;
              if (v164 >= 0x4000)
              {
                uint64_t v169 = v5 + 2;
                unsigned int v170 = v165;
                do
                {
                  *((unsigned char *)v169 - 1) = v170 | 0x80;
                  unsigned int v171 = v170 >> 7;
                  uint64_t v169 = (_DWORD *)((char *)v169 + 1);
                  unsigned int v172 = v170 >> 14;
                  v170 >>= 7;
                }
                while (v172);
                *((unsigned char *)v169 - 1) = v171;
              }
              else
              {
                v5[1] = v166;
                uint64_t v169 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v164;
              uint64_t v169 = v5 + 1;
            }
            *uint64_t v169 = v168;
            int v5 = (char *)(v169 + 1);
            ++v163;
            int v162 = *(_DWORD **)a1;
          }
          while (v163 < **(_DWORD **)a1);
        }
        return v5;
      case 8:
        uint64_t v173 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v174 = 0;
          unsigned int v175 = 8 * a2;
          char v176 = (8 * a2) | 0x80;
          unsigned int v177 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              uint64_t v173 = *(_DWORD **)a1;
            }
            char v178 = *(unsigned char *)sub_21616C1F0(v173, v174);
            if (v175 > 0x7F)
            {
              char *v5 = v176;
              if (v175 >= 0x4000)
              {
                int v179 = v5 + 2;
                unsigned int v180 = v177;
                do
                {
                  *(v179 - 1) = v180 | 0x80;
                  unsigned int v181 = v180 >> 7;
                  ++v179;
                  unsigned int v182 = v180 >> 14;
                  v180 >>= 7;
                }
                while (v182);
                *(v179 - 1) = v181;
              }
              else
              {
                v5[1] = v175 >> 7;
                int v179 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v175;
              int v179 = v5 + 1;
            }
            *int v179 = v178;
            int v5 = v179 + 1;
            ++v174;
            uint64_t v173 = *(_DWORD **)a1;
          }
          while (v174 < **(_DWORD **)a1);
        }
        return v5;
      case 9:
        uint64_t v183 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) < 1) {
          return v5;
        }
        int v184 = 0;
        unsigned int v185 = 8 * a2;
        uint64_t v186 = 4;
        if (((a2 >> 25) & 0xF) != 0) {
          uint64_t v186 = 5;
        }
        unsigned int v187 = (8 * a2) | 2;
        uint64_t v188 = 1;
        if (v185 >= 0x80) {
          uint64_t v188 = 2;
        }
        if (v185 < 0x200000) {
          uint64_t v186 = 3;
        }
        if (v185 >= 0x4000) {
          uint64_t v189 = v186;
        }
        else {
          uint64_t v189 = v188;
        }
        unsigned int v429 = v185 >> 7;
        while (1)
        {
          if (*a4 <= (unint64_t)v5)
          {
            int v5 = sub_21615B6E8((uint64_t)a4, v5);
            uint64_t v183 = *(void *)a1;
          }
          uint64_t v190 = sub_21615663C(v183, v184);
          if (*(char *)(v190 + 23) < 0)
          {
            int64_t v191 = *(void *)(v190 + 8);
            if (v191 > 127) {
              goto LABEL_326;
            }
          }
          else
          {
            int64_t v191 = *(unsigned __int8 *)(v190 + 23);
          }
          if ((uint64_t)(*a4 + ~(unint64_t)&v5[v189] + 16) >= v191)
          {
            if (v187 > 0x7F)
            {
              char *v5 = (8 * a2) | 0x82;
              if (v187 >= 0x4000)
              {
                v192 = v5 + 2;
                unsigned int v193 = (a2 >> 4) & 0x1FFFFFF;
                do
                {
                  *(v192 - 1) = v193 | 0x80;
                  unsigned int v194 = v193 >> 7;
                  ++v192;
                  unsigned int v195 = v193 >> 14;
                  v193 >>= 7;
                }
                while (v195);
                *(v192 - 1) = v194;
              }
              else
              {
                v5[1] = v429;
                v192 = v5 + 2;
              }
            }
            else
            {
              v192 = v5 + 1;
              char *v5 = v187;
            }
            unsigned char *v192 = v191;
            v196 = v192 + 1;
            if (*(char *)(v190 + 23) >= 0) {
              v197 = (const void *)v190;
            }
            else {
              v197 = *(const void **)v190;
            }
            memcpy(v196, v197, v191);
            int v5 = &v196[v191];
            goto LABEL_324;
          }
LABEL_326:
          int v5 = sub_21615BC58(a4, a2, v190, v5);
LABEL_324:
          ++v184;
          uint64_t v183 = *(void *)a1;
          if (v184 >= *(_DWORD *)(*(void *)a1 + 8)) {
            return v5;
          }
        }
      case 10:
        uint64_t v198 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) >= 1)
        {
          int v199 = 0;
          unsigned int v200 = (8 * a2) | 3;
          char v201 = (8 * a2) | 0x83;
          unsigned int v202 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v203 = (8 * a2) | 4;
          unsigned int v204 = (8 * a2) >> 7;
          char v205 = (8 * a2) | 0x84;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              uint64_t v198 = *(void *)a1;
            }
            uint64_t v206 = sub_216166B74(v198, v199);
            if (v200 > 0x7F)
            {
              char *v5 = v201;
              if (v200 >= 0x4000)
              {
                v207 = v5 + 2;
                unsigned int v208 = v202;
                do
                {
                  *(v207 - 1) = v208 | 0x80;
                  unsigned int v209 = v208 >> 7;
                  ++v207;
                  unsigned int v210 = v208 >> 14;
                  v208 >>= 7;
                }
                while (v210);
                *(v207 - 1) = v209;
              }
              else
              {
                v5[1] = v204;
                v207 = v5 + 2;
              }
            }
            else
            {
              v207 = v5 + 1;
              char *v5 = v200;
            }
            v211 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(void *)v206 + 96))(v206, v207, a4);
            if (*a4 <= (unint64_t)v211) {
              v211 = sub_21615B6E8((uint64_t)a4, v211);
            }
            if (v203 > 0x7F)
            {
              char *v211 = v205;
              if (v203 >= 0x4000)
              {
                int v5 = v211 + 2;
                unsigned int v212 = v202;
                do
                {
                  *(v5 - 1) = v212 | 0x80;
                  unsigned int v213 = v212 >> 7;
                  ++v5;
                  unsigned int v214 = v212 >> 14;
                  v212 >>= 7;
                }
                while (v214);
                *(v5 - 1) = v213;
              }
              else
              {
                v211[1] = v204;
                int v5 = v211 + 2;
              }
            }
            else
            {
              int v5 = v211 + 1;
              char *v211 = v203;
            }
            ++v199;
            uint64_t v198 = *(void *)a1;
          }
          while (v199 < *(_DWORD *)(*(void *)a1 + 8));
        }
        return v5;
      case 11:
        uint64_t v215 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) >= 1)
        {
          int v216 = 0;
          unsigned int v217 = (8 * a2) | 2;
          unsigned int v218 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v219 = (8 * a2) >> 7;
          char v220 = (8 * a2) | 0x82;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              uint64_t v215 = *(void *)a1;
            }
            uint64_t v221 = sub_216166B74(v215, v216);
            uint64_t v222 = v221;
            if (v217 > 0x7F)
            {
              char *v5 = v220;
              if (v217 >= 0x4000)
              {
                v223 = v5 + 2;
                unsigned int v224 = v218;
                do
                {
                  *(v223 - 1) = v224 | 0x80;
                  unsigned int v225 = v224 >> 7;
                  ++v223;
                  unsigned int v226 = v224 >> 14;
                  v224 >>= 7;
                }
                while (v226);
                *(v223 - 1) = v225;
              }
              else
              {
                v5[1] = v219;
                v223 = v5 + 2;
              }
            }
            else
            {
              v223 = v5 + 1;
              char *v5 = v217;
            }
            unsigned int v227 = (*(uint64_t (**)(uint64_t))(*(void *)v221 + 80))(v221);
            if (v227 > 0x7F)
            {
              unsigned char *v223 = v227 | 0x80;
              unsigned int v229 = v227 >> 7;
              if (v227 >> 14)
              {
                v228 = v223 + 2;
                do
                {
                  *(v228 - 1) = v229 | 0x80;
                  unsigned int v230 = v229 >> 7;
                  ++v228;
                  unsigned int v231 = v229 >> 14;
                  v229 >>= 7;
                }
                while (v231);
                *(v228 - 1) = v230;
              }
              else
              {
                v223[1] = v229;
                v228 = v223 + 2;
              }
            }
            else
            {
              unsigned char *v223 = v227;
              v228 = v223 + 1;
            }
            int v5 = (char *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v222 + 96))(v222, v228, a4);
            ++v216;
            uint64_t v215 = *(void *)a1;
          }
          while (v216 < *(_DWORD *)(*(void *)a1 + 8));
        }
        return v5;
      case 12:
        uint64_t v232 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) < 1) {
          return v5;
        }
        int v233 = 0;
        unsigned int v234 = 8 * a2;
        uint64_t v235 = 4;
        if (((a2 >> 25) & 0xF) != 0) {
          uint64_t v235 = 5;
        }
        unsigned int v236 = (8 * a2) | 2;
        uint64_t v237 = 1;
        if (v234 >= 0x80) {
          uint64_t v237 = 2;
        }
        if (v234 < 0x200000) {
          uint64_t v235 = 3;
        }
        if (v234 >= 0x4000) {
          uint64_t v238 = v235;
        }
        else {
          uint64_t v238 = v237;
        }
        unsigned int v430 = v234 >> 7;
        break;
      case 13:
        v247 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v248 = 0;
          unsigned int v249 = 8 * a2;
          char v250 = (8 * a2) | 0x80;
          unsigned int v251 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              v247 = *(_DWORD **)a1;
            }
            unsigned int v252 = *(_DWORD *)sub_21616CEA4(v247, v248);
            if (v249 > 0x7F)
            {
              char *v5 = v250;
              if (v249 >= 0x4000)
              {
                v253 = v5 + 2;
                unsigned int v254 = v251;
                do
                {
                  *(v253 - 1) = v254 | 0x80;
                  unsigned int v255 = v254 >> 7;
                  ++v253;
                  unsigned int v256 = v254 >> 14;
                  v254 >>= 7;
                }
                while (v256);
                *(v253 - 1) = v255;
              }
              else
              {
                v5[1] = v249 >> 7;
                v253 = v5 + 2;
              }
            }
            else
            {
              v253 = v5 + 1;
              char *v5 = v249;
            }
            if (v252 > 0x7F)
            {
              unsigned char *v253 = v252 | 0x80;
              unsigned int v257 = v252 >> 7;
              if (v252 >> 14)
              {
                int v5 = v253 + 2;
                do
                {
                  *(v5 - 1) = v257 | 0x80;
                  unsigned int v258 = v257 >> 7;
                  ++v5;
                  unsigned int v259 = v257 >> 14;
                  v257 >>= 7;
                }
                while (v259);
                *(v5 - 1) = v258;
              }
              else
              {
                v253[1] = v257;
                int v5 = v253 + 2;
              }
            }
            else
            {
              unsigned char *v253 = v252;
              int v5 = v253 + 1;
            }
            ++v248;
            v247 = *(_DWORD **)a1;
          }
          while (v248 < **(_DWORD **)a1);
        }
        return v5;
      case 14:
        v260 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v261 = 0;
          unsigned int v262 = 8 * a2;
          char v263 = (8 * a2) | 0x80;
          unsigned int v264 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              v260 = *(_DWORD **)a1;
            }
            unint64_t v265 = *(int *)sub_21616C848(v260, v261);
            if (v262 > 0x7F)
            {
              char *v5 = v263;
              if (v262 >= 0x4000)
              {
                v266 = v5 + 2;
                unsigned int v267 = v264;
                do
                {
                  *(v266 - 1) = v267 | 0x80;
                  unsigned int v268 = v267 >> 7;
                  ++v266;
                  unsigned int v269 = v267 >> 14;
                  v267 >>= 7;
                }
                while (v269);
                *(v266 - 1) = v268;
              }
              else
              {
                v5[1] = v262 >> 7;
                v266 = v5 + 2;
              }
            }
            else
            {
              v266 = v5 + 1;
              char *v5 = v262;
            }
            if (v265 > 0x7F)
            {
              unsigned char *v266 = v265 | 0x80;
              unint64_t v270 = v265 >> 7;
              if (v265 >> 14)
              {
                int v5 = v266 + 2;
                do
                {
                  *(v5 - 1) = v270 | 0x80;
                  unint64_t v271 = v270 >> 7;
                  ++v5;
                  unint64_t v272 = v270 >> 14;
                  v270 >>= 7;
                }
                while (v272);
                *(v5 - 1) = v271;
              }
              else
              {
                v266[1] = v270;
                int v5 = v266 + 2;
              }
            }
            else
            {
              unsigned char *v266 = v265;
              int v5 = v266 + 1;
            }
            ++v261;
            v260 = *(_DWORD **)a1;
          }
          while (v261 < **(_DWORD **)a1);
        }
        return v5;
      case 15:
        v273 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v274 = 0;
          unsigned int v275 = (8 * a2) | 5;
          unsigned int v276 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v277 = (8 * a2) >> 7;
          char v278 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              v273 = *(_DWORD **)a1;
            }
            int v279 = *(_DWORD *)sub_21616C848(v273, v274);
            if (v275 > 0x7F)
            {
              char *v5 = v278;
              if (v275 >= 0x4000)
              {
                v280 = v5 + 2;
                unsigned int v281 = v276;
                do
                {
                  *((unsigned char *)v280 - 1) = v281 | 0x80;
                  unsigned int v282 = v281 >> 7;
                  v280 = (_DWORD *)((char *)v280 + 1);
                  unsigned int v283 = v281 >> 14;
                  v281 >>= 7;
                }
                while (v283);
                *((unsigned char *)v280 - 1) = v282;
              }
              else
              {
                v5[1] = v277;
                v280 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v275;
              v280 = v5 + 1;
            }
            _DWORD *v280 = v279;
            int v5 = (char *)(v280 + 1);
            ++v274;
            v273 = *(_DWORD **)a1;
          }
          while (v274 < **(_DWORD **)a1);
        }
        return v5;
      case 16:
        v284 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v285 = 0;
          unsigned int v286 = 8 * a2;
          unsigned int v287 = (8 * a2) | 1;
          char v288 = (8 * a2) | 0x81;
          unsigned int v289 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v290 = v286 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              v284 = *(_DWORD **)a1;
            }
            uint64_t v291 = *(void *)sub_21616D500(v284, v285);
            if (v287 > 0x7F)
            {
              char *v5 = v288;
              if (v287 >= 0x4000)
              {
                v292 = v5 + 2;
                unsigned int v293 = v289;
                do
                {
                  *((unsigned char *)v292 - 1) = v293 | 0x80;
                  unsigned int v294 = v293 >> 7;
                  v292 = (void *)((char *)v292 + 1);
                  unsigned int v295 = v293 >> 14;
                  v293 >>= 7;
                }
                while (v295);
                *((unsigned char *)v292 - 1) = v294;
              }
              else
              {
                v5[1] = v290;
                v292 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v287;
              v292 = v5 + 1;
            }
            void *v292 = v291;
            int v5 = (char *)(v292 + 1);
            ++v285;
            v284 = *(_DWORD **)a1;
          }
          while (v285 < **(_DWORD **)a1);
        }
        return v5;
      case 17:
        v296 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v297 = 0;
          unsigned int v298 = 8 * a2;
          char v299 = (8 * a2) | 0x80;
          unsigned int v300 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              v296 = *(_DWORD **)a1;
            }
            int v301 = *(_DWORD *)sub_21616C848(v296, v297);
            if (v298 > 0x7F)
            {
              char *v5 = v299;
              if (v298 >= 0x4000)
              {
                v302 = v5 + 2;
                unsigned int v303 = v300;
                do
                {
                  *(v302 - 1) = v303 | 0x80;
                  unsigned int v304 = v303 >> 7;
                  ++v302;
                  unsigned int v305 = v303 >> 14;
                  v303 >>= 7;
                }
                while (v305);
                *(v302 - 1) = v304;
              }
              else
              {
                v5[1] = v298 >> 7;
                v302 = v5 + 2;
              }
            }
            else
            {
              v302 = v5 + 1;
              char *v5 = v298;
            }
            unsigned int v306 = (2 * v301) ^ (v301 >> 31);
            if (v306 > 0x7F)
            {
              unsigned char *v302 = v306 | 0x80;
              unsigned int v307 = v306 >> 7;
              if (v306 >> 14)
              {
                int v5 = v302 + 2;
                do
                {
                  *(v5 - 1) = v307 | 0x80;
                  unsigned int v308 = v307 >> 7;
                  ++v5;
                  unsigned int v309 = v307 >> 14;
                  v307 >>= 7;
                }
                while (v309);
                *(v5 - 1) = v308;
              }
              else
              {
                v302[1] = v307;
                int v5 = v302 + 2;
              }
            }
            else
            {
              unsigned char *v302 = v306;
              int v5 = v302 + 1;
            }
            ++v297;
            v296 = *(_DWORD **)a1;
          }
          while (v297 < **(_DWORD **)a1);
        }
        return v5;
      case 18:
        v310 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v311 = 0;
          unsigned int v312 = 8 * a2;
          char v313 = (8 * a2) | 0x80;
          unsigned int v314 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_21615B6E8((uint64_t)a4, v5);
              v310 = *(_DWORD **)a1;
            }
            uint64_t v315 = *(void *)sub_21616D500(v310, v311);
            if (v312 > 0x7F)
            {
              char *v5 = v313;
              if (v312 >= 0x4000)
              {
                v316 = v5 + 2;
                unsigned int v317 = v314;
                do
                {
                  *(v316 - 1) = v317 | 0x80;
                  unsigned int v318 = v317 >> 7;
                  ++v316;
                  unsigned int v319 = v317 >> 14;
                  v317 >>= 7;
                }
                while (v319);
                *(v316 - 1) = v318;
              }
              else
              {
                v5[1] = v312 >> 7;
                v316 = v5 + 2;
              }
            }
            else
            {
              v316 = v5 + 1;
              char *v5 = v312;
            }
            unint64_t v320 = (2 * v315) ^ (v315 >> 63);
            if (v320 > 0x7F)
            {
              unsigned char *v316 = v320 | 0x80;
              unint64_t v321 = v320 >> 7;
              if (v320 >> 14)
              {
                int v5 = v316 + 2;
                do
                {
                  *(v5 - 1) = v321 | 0x80;
                  unint64_t v322 = v321 >> 7;
                  ++v5;
                  unint64_t v323 = v321 >> 14;
                  v321 >>= 7;
                }
                while (v323);
                *(v5 - 1) = v322;
              }
              else
              {
                v316[1] = v321;
                int v5 = v316 + 2;
              }
            }
            else
            {
              unsigned char *v316 = v320;
              int v5 = v316 + 1;
            }
            ++v311;
            v310 = *(_DWORD **)a1;
          }
          while (v311 < **(_DWORD **)a1);
        }
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (*a4 <= (unint64_t)v5)
      {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
        uint64_t v232 = *(void *)a1;
      }
      uint64_t v239 = sub_21615663C(v232, v233);
      if (*(char *)(v239 + 23) < 0)
      {
        int64_t v240 = *(void *)(v239 + 8);
        if (v240 > 127) {
          goto LABEL_399;
        }
      }
      else
      {
        int64_t v240 = *(unsigned __int8 *)(v239 + 23);
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v238] + 16) >= v240)
      {
        if (v236 > 0x7F)
        {
          char *v5 = (8 * a2) | 0x82;
          if (v236 >= 0x4000)
          {
            v241 = v5 + 2;
            unsigned int v242 = (a2 >> 4) & 0x1FFFFFF;
            do
            {
              *(v241 - 1) = v242 | 0x80;
              unsigned int v243 = v242 >> 7;
              ++v241;
              unsigned int v244 = v242 >> 14;
              v242 >>= 7;
            }
            while (v244);
            *(v241 - 1) = v243;
          }
          else
          {
            v5[1] = v430;
            v241 = v5 + 2;
          }
        }
        else
        {
          v241 = v5 + 1;
          char *v5 = v236;
        }
        unsigned char *v241 = v240;
        v245 = v241 + 1;
        if (*(char *)(v239 + 23) >= 0) {
          v246 = (const void *)v239;
        }
        else {
          v246 = *(const void **)v239;
        }
        memcpy(v245, v246, v240);
        int v5 = &v245[v240];
        goto LABEL_397;
      }
LABEL_399:
      int v5 = sub_21615BC58(a4, a2, v239, v5);
LABEL_397:
      ++v233;
      uint64_t v232 = *(void *)a1;
      if (v233 >= *(_DWORD *)(*(void *)a1 + 8)) {
        return v5;
      }
    }
  }
  if (a1[10]) {
    return v5;
  }
  int v10 = a1[8];
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    sub_21615C174((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v11 = sub_21615C18C(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_21615C2C8((uint64_t)&v431, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v432);
  }
  switch(v10)
  {
    case 1:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 <= 0x7F) {
        goto LABEL_575;
      }
      char *v5 = (8 * a2) | 0x81;
      unsigned int v14 = (8 * a2) >> 7;
      if (!(v13 >> 14)) {
        goto LABEL_602;
      }
      uint64_t v15 = v5 + 2;
      do
      {
        *((unsigned char *)v15 - 1) = v14 | 0x80;
        unsigned int v16 = v14 >> 7;
        uint64_t v15 = (void *)((char *)v15 + 1);
        unsigned int v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      goto LABEL_693;
    case 2:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 <= 0x7F) {
        goto LABEL_571;
      }
      char *v5 = (8 * a2) | 0x85;
      unsigned int v326 = (8 * a2) >> 7;
      if (!(v325 >> 14)) {
        goto LABEL_600;
      }
      v327 = v5 + 2;
      do
      {
        *((unsigned char *)v327 - 1) = v326 | 0x80;
        unsigned int v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        unsigned int v329 = v326 >> 14;
        v326 >>= 7;
      }
      while (v329);
      goto LABEL_689;
    case 3:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      unint64_t v330 = *(void *)a1;
      unsigned int v331 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v331 | 0x80;
        unsigned int v355 = v331 >> 7;
        if (v331 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v355 | 0x80;
            unsigned int v380 = v355 >> 7;
            ++v332;
            unsigned int v381 = v355 >> 14;
            v355 >>= 7;
          }
          while (v381);
          *(v332 - 1) = v380;
        }
        else
        {
          v5[1] = v355;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v331;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v384 = v382 >> 14;
        v382 >>= 7;
      }
      while (v384);
      goto LABEL_718;
    case 4:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      unint64_t v330 = *(void *)a1;
      unsigned int v333 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v333 | 0x80;
        unsigned int v356 = v333 >> 7;
        if (v333 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v356 | 0x80;
            unsigned int v385 = v356 >> 7;
            ++v332;
            unsigned int v386 = v356 >> 14;
            v356 >>= 7;
          }
          while (v386);
          *(v332 - 1) = v385;
        }
        else
        {
          v5[1] = v356;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v333;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v387 = v382 >> 14;
        v382 >>= 7;
      }
      while (v387);
      goto LABEL_718;
    case 5:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      unint64_t v330 = *(int *)a1;
      unsigned int v334 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v334 | 0x80;
        unsigned int v357 = v334 >> 7;
        if (v334 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v357 | 0x80;
            unsigned int v388 = v357 >> 7;
            ++v332;
            unsigned int v389 = v357 >> 14;
            v357 >>= 7;
          }
          while (v389);
          *(v332 - 1) = v388;
        }
        else
        {
          v5[1] = v357;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v334;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v390 = v382 >> 14;
        v382 >>= 7;
      }
      while (v390);
      goto LABEL_718;
    case 6:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 <= 0x7F) {
        goto LABEL_575;
      }
      char *v5 = (8 * a2) | 0x81;
      unsigned int v14 = (8 * a2) >> 7;
      if (!(v13 >> 14)) {
        goto LABEL_602;
      }
      uint64_t v15 = v5 + 2;
      do
      {
        *((unsigned char *)v15 - 1) = v14 | 0x80;
        unsigned int v16 = v14 >> 7;
        uint64_t v15 = (void *)((char *)v15 + 1);
        unsigned int v335 = v14 >> 14;
        v14 >>= 7;
      }
      while (v335);
      goto LABEL_693;
    case 7:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 <= 0x7F) {
        goto LABEL_571;
      }
      char *v5 = (8 * a2) | 0x85;
      unsigned int v326 = (8 * a2) >> 7;
      if (!(v325 >> 14)) {
        goto LABEL_600;
      }
      v327 = v5 + 2;
      do
      {
        *((unsigned char *)v327 - 1) = v326 | 0x80;
        unsigned int v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        unsigned int v336 = v326 >> 14;
        v326 >>= 7;
      }
      while (v336);
      goto LABEL_689;
    case 8:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      LOBYTE(v337) = *a1;
      unsigned int v338 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v338 | 0x80;
        unsigned int v358 = v338 >> 7;
        if (v338 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v358 | 0x80;
            unsigned int v391 = v358 >> 7;
            ++v332;
            unsigned int v392 = v358 >> 14;
            v358 >>= 7;
          }
          while (v392);
          *(v332 - 1) = v391;
        }
        else
        {
          v5[1] = v358;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v338;
        v332 = v5 + 1;
      }
      goto LABEL_677;
    case 9:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      v339 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0)
      {
        int64_t v340 = v339[1];
        if (v340 > 127) {
          return sub_21615BC58(a4, a2, (uint64_t)v339, v5);
        }
      }
      else
      {
        int64_t v340 = *(unsigned __int8 *)(*(void *)a1 + 23);
      }
      unsigned int v364 = 8 * a2;
      uint64_t v365 = 1;
      uint64_t v366 = 2;
      uint64_t v367 = 3;
      uint64_t v368 = 4;
      if ((8 * a2) >> 28) {
        uint64_t v368 = 5;
      }
      if (v364 >= 0x200000) {
        uint64_t v367 = v368;
      }
      if (v364 >= 0x4000) {
        uint64_t v366 = v367;
      }
      if (v364 >= 0x80) {
        uint64_t v365 = v366;
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v365] + 16) < v340) {
        return sub_21615BC58(a4, a2, (uint64_t)v339, v5);
      }
      unsigned int v369 = v364 | 2;
      if ((v364 | 2) <= 0x7F) {
        goto LABEL_633;
      }
      char *v5 = v364 | 0x82;
      unsigned int v370 = v364 >> 7;
      if (!(v369 >> 14)) {
        goto LABEL_635;
      }
      v371 = v5 + 2;
      do
      {
        *(v371 - 1) = v370 | 0x80;
        unsigned int v372 = v370 >> 7;
        ++v371;
        unsigned int v373 = v370 >> 14;
        v370 >>= 7;
      }
      while (v373);
      goto LABEL_727;
    case 10:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      uint64_t v341 = *(void *)a1;
      unsigned int v342 = 8 * a2;
      unsigned int v343 = (8 * a2) | 3;
      unsigned int v344 = (8 * a2) >> 7;
      if (v343 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x83;
        if (v343 >> 14)
        {
          v345 = v5 + 2;
          unsigned int v393 = v342 >> 7;
          do
          {
            *(v345 - 1) = v393 | 0x80;
            unsigned int v394 = v393 >> 7;
            ++v345;
            unsigned int v395 = v393 >> 14;
            v393 >>= 7;
          }
          while (v395);
          *(v345 - 1) = v394;
        }
        else
        {
          v5[1] = v344;
          v345 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v343;
        v345 = v5 + 1;
      }
      v332 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(void *)v341 + 96))(v341, v345, a4);
      if (*a4 <= (unint64_t)v332) {
        v332 = sub_21615B6E8((uint64_t)a4, v332);
      }
      unsigned int v337 = v342 | 4;
      if ((v342 | 4) <= 0x7F) {
        goto LABEL_677;
      }
      char *v332 = v342 | 0x84;
      if (!(v337 >> 14))
      {
        v332[1] = v344;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v344 | 0x80;
        unsigned int v411 = v344 >> 7;
        ++v5;
        unsigned int v412 = v344 >> 14;
        v344 >>= 7;
      }
      while (v412);
      goto LABEL_715;
    case 11:
      if ((a1[10] & 0x10) != 0) {
        return (char *)(*(uint64_t (**)(void, uint64_t, char *, uint64_t *))(**(void **)a1 + 136))(*(void *)a1, a2, v5, a4);
      }
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      uint64_t v346 = *(void *)a1;
      unsigned int v347 = (8 * a2) | 2;
      if (v347 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x82;
        unsigned int v379 = (8 * a2) >> 7;
        if (v347 >> 14)
        {
          v348 = v5 + 2;
          do
          {
            *(v348 - 1) = v379 | 0x80;
            unsigned int v421 = v379 >> 7;
            ++v348;
            unsigned int v422 = v379 >> 14;
            v379 >>= 7;
          }
          while (v422);
          *(v348 - 1) = v421;
        }
        else
        {
          v5[1] = v379;
          v348 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v347;
        v348 = v5 + 1;
      }
      unsigned int v423 = (*(uint64_t (**)(uint64_t))(*(void *)v346 + 80))(v346);
      if (v423 > 0x7F)
      {
        unsigned char *v348 = v423 | 0x80;
        unsigned int v425 = v423 >> 7;
        if (v423 >> 14)
        {
          v424 = v348 + 2;
          do
          {
            *(v424 - 1) = v425 | 0x80;
            unsigned int v426 = v425 >> 7;
            ++v424;
            unsigned int v427 = v425 >> 14;
            v425 >>= 7;
          }
          while (v427);
          *(v424 - 1) = v426;
        }
        else
        {
          v348[1] = v425;
          v424 = v348 + 2;
        }
      }
      else
      {
        unsigned char *v348 = v423;
        v424 = v348 + 1;
      }
      return (char *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v346 + 96))(v346, v424, a4);
    case 12:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      v339 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0)
      {
        int64_t v340 = v339[1];
        if (v340 > 127) {
          return sub_21615BC58(a4, a2, (uint64_t)v339, v5);
        }
      }
      else
      {
        int64_t v340 = *(unsigned __int8 *)(*(void *)a1 + 23);
      }
      unsigned int v374 = 8 * a2;
      uint64_t v375 = 1;
      uint64_t v376 = 2;
      uint64_t v377 = 3;
      uint64_t v378 = 4;
      if ((8 * a2) >> 28) {
        uint64_t v378 = 5;
      }
      if (v374 >= 0x200000) {
        uint64_t v377 = v378;
      }
      if (v374 >= 0x4000) {
        uint64_t v376 = v377;
      }
      if (v374 >= 0x80) {
        uint64_t v375 = v376;
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v375] + 16) < v340) {
        return sub_21615BC58(a4, a2, (uint64_t)v339, v5);
      }
      unsigned int v369 = v374 | 2;
      if ((v374 | 2) > 0x7F)
      {
        char *v5 = v374 | 0x82;
        unsigned int v370 = v374 >> 7;
        if (v369 >> 14)
        {
          v371 = v5 + 2;
          do
          {
            *(v371 - 1) = v370 | 0x80;
            unsigned int v372 = v370 >> 7;
            ++v371;
            unsigned int v419 = v370 >> 14;
            v370 >>= 7;
          }
          while (v419);
LABEL_727:
          *(v371 - 1) = v372;
        }
        else
        {
LABEL_635:
          v5[1] = v370;
          v371 = v5 + 2;
        }
      }
      else
      {
LABEL_633:
        char *v5 = v369;
        v371 = v5 + 1;
      }
      unsigned char *v371 = v340;
      v420 = v371 + 1;
      if (*((char *)v339 + 23) < 0) {
        v339 = (void *)*v339;
      }
      memcpy(v420, v339, v340);
      return &v420[v340];
    case 13:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      unsigned int v337 = *(_DWORD *)a1;
      unsigned int v349 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v349 | 0x80;
        unsigned int v360 = v349 >> 7;
        if (v349 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v360 | 0x80;
            unsigned int v396 = v360 >> 7;
            ++v332;
            unsigned int v397 = v360 >> 14;
            v360 >>= 7;
          }
          while (v397);
          *(v332 - 1) = v396;
        }
        else
        {
          v5[1] = v360;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v349;
        v332 = v5 + 1;
      }
      if (v337 <= 0x7F)
      {
LABEL_677:
        char *v332 = v337;
        return v332 + 1;
      }
      char *v332 = v337 | 0x80;
      unsigned int v398 = v337 >> 7;
      if (!(v337 >> 14))
      {
        v332[1] = v398;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v398 | 0x80;
        unsigned int v411 = v398 >> 7;
        ++v5;
        unsigned int v413 = v398 >> 14;
        v398 >>= 7;
      }
      while (v413);
LABEL_715:
      *(v5 - 1) = v411;
      return v5;
    case 14:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      unint64_t v330 = *(int *)a1;
      unsigned int v350 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v350 | 0x80;
        unsigned int v361 = v350 >> 7;
        if (v350 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v361 | 0x80;
            unsigned int v399 = v361 >> 7;
            ++v332;
            unsigned int v400 = v361 >> 14;
            v361 >>= 7;
          }
          while (v400);
          *(v332 - 1) = v399;
        }
        else
        {
          v5[1] = v361;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v350;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
      {
LABEL_684:
        char *v332 = v330;
        return v332 + 1;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14))
      {
LABEL_686:
        v332[1] = v382;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v414 = v382 >> 14;
        v382 >>= 7;
      }
      while (v414);
LABEL_718:
      *(v5 - 1) = v383;
      return v5;
    case 15:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x85;
        unsigned int v326 = (8 * a2) >> 7;
        if (v325 >> 14)
        {
          v327 = v5 + 2;
          do
          {
            *((unsigned char *)v327 - 1) = v326 | 0x80;
            unsigned int v328 = v326 >> 7;
            v327 = (_DWORD *)((char *)v327 + 1);
            unsigned int v401 = v326 >> 14;
            v326 >>= 7;
          }
          while (v401);
LABEL_689:
          *((unsigned char *)v327 - 1) = v328;
        }
        else
        {
LABEL_600:
          v5[1] = v326;
          v327 = v5 + 2;
        }
      }
      else
      {
LABEL_571:
        char *v5 = v325;
        v327 = v5 + 1;
      }
      _DWORD *v327 = v324;
      return (char *)(v327 + 1);
    case 16:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x81;
        unsigned int v14 = (8 * a2) >> 7;
        if (v13 >> 14)
        {
          uint64_t v15 = v5 + 2;
          do
          {
            *((unsigned char *)v15 - 1) = v14 | 0x80;
            unsigned int v16 = v14 >> 7;
            uint64_t v15 = (void *)((char *)v15 + 1);
            unsigned int v402 = v14 >> 14;
            v14 >>= 7;
          }
          while (v402);
LABEL_693:
          *((unsigned char *)v15 - 1) = v16;
        }
        else
        {
LABEL_602:
          v5[1] = v14;
          uint64_t v15 = v5 + 2;
        }
      }
      else
      {
LABEL_575:
        char *v5 = v13;
        uint64_t v15 = v5 + 1;
      }
      *uint64_t v15 = v12;
      return (char *)(v15 + 1);
    case 17:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      int v351 = *(_DWORD *)a1;
      unsigned int v352 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v352 | 0x80;
        unsigned int v362 = v352 >> 7;
        if (v352 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v362 | 0x80;
            unsigned int v403 = v362 >> 7;
            ++v332;
            unsigned int v404 = v362 >> 14;
            v362 >>= 7;
          }
          while (v404);
          *(v332 - 1) = v403;
        }
        else
        {
          v5[1] = v362;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v352;
        v332 = v5 + 1;
      }
      unsigned int v405 = (2 * v351) ^ (v351 >> 31);
      if (v405 <= 0x7F)
      {
        char *v332 = v405;
        return v332 + 1;
      }
      char *v332 = v405 | 0x80;
      unsigned int v406 = v405 >> 7;
      if (!(v405 >> 14))
      {
        v332[1] = v406;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v406 | 0x80;
        unsigned int v415 = v406 >> 7;
        ++v5;
        unsigned int v416 = v406 >> 14;
        v406 >>= 7;
      }
      while (v416);
      *(v5 - 1) = v415;
      return v5;
    case 18:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_21615B6E8((uint64_t)a4, v5);
      }
      uint64_t v353 = *(void *)a1;
      unsigned int v354 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v354 | 0x80;
        unsigned int v363 = v354 >> 7;
        if (v354 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v363 | 0x80;
            unsigned int v407 = v363 >> 7;
            ++v332;
            unsigned int v408 = v363 >> 14;
            v363 >>= 7;
          }
          while (v408);
          *(v332 - 1) = v407;
        }
        else
        {
          v5[1] = v363;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v354;
        v332 = v5 + 1;
      }
      unint64_t v409 = (2 * v353) ^ (v353 >> 63);
      if (v409 > 0x7F)
      {
        char *v332 = v409 | 0x80;
        unint64_t v410 = v409 >> 7;
        if (v409 >> 14)
        {
          int v5 = v332 + 2;
          do
          {
            *(v5 - 1) = v410 | 0x80;
            unint64_t v417 = v410 >> 7;
            ++v5;
            unint64_t v418 = v410 >> 14;
            v410 >>= 7;
          }
          while (v418);
          *(v5 - 1) = v417;
        }
        else
        {
          v332[1] = v410;
          return v332 + 2;
        }
      }
      else
      {
        char *v332 = v409;
        return v332 + 1;
      }
      return v5;
    default:
      return v5;
  }
}

void sub_216165910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216165A18(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      uint64_t v2 = 0;
      uint64_t v3 = &v1[8 * *(unsigned __int16 *)(a1 + 10)];
      do
      {
        uint64_t v4 = (_DWORD **)(v1 + 2);
        int v5 = *v1;
        v1 += 8;
        v2 += sub_216165ADC(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  unsigned int v8 = *(int **)v1;
  uint64_t v6 = v1 + 2;
  uint64_t v7 = v8;
  if (v8 == v6) {
    return 0;
  }
  uint64_t v2 = 0;
  do
  {
    unint64_t v9 = sub_216165ADC((_DWORD **)v7 + 5, v7[8]);
    int v10 = (int *)*((void *)v7 + 1);
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        int v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (int *)*((void *)v7 + 2);
        BOOL v12 = *(void *)v11 == (void)v7;
        uint64_t v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    uint64_t v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t sub_216165ADC(_DWORD **a1, int a2)
{
  if (*((unsigned char *)a1 + 9))
  {
    int v4 = *((unsigned __int8 *)a1 + 8);
    unsigned __int8 v5 = v4 - 19;
    if (*((unsigned char *)a1 + 11))
    {
      if ((v4 - 19) <= 0xEDu)
      {
        sub_21615C174((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v6 = sub_21615C18C(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_21615C2C8((uint64_t)&v101, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)v102);
      }
      switch(v4)
      {
        case 1:
        case 6:
        case 16:
          uint64_t v21 = 8 * **a1;
          goto LABEL_63;
        case 2:
        case 7:
        case 15:
          uint64_t v21 = 4 * **a1;
          goto LABEL_63;
        case 3:
          uint64_t v27 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v28 = 0;
          do
          {
            v21 += (9 * (__clz(*(void *)sub_21616D500(v27, v28++) | 1) ^ 0x3F) + 73) >> 6;
            uint64_t v27 = *a1;
          }
          while (v28 < **a1);
          goto LABEL_63;
        case 4:
          unsigned int v29 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v30 = 0;
          do
          {
            v21 += (9 * (__clz(*(void *)sub_21616DB5C(v29, v30++) | 1) ^ 0x3F) + 73) >> 6;
            unsigned int v29 = *a1;
          }
          while (v30 < **a1);
          goto LABEL_63;
        case 5:
          unsigned int v31 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v32 = 0;
          do
          {
            unsigned int v33 = (int *)sub_21616C848(v31, v32);
            uint64_t v34 = (9 * (__clz(*v33 | 1) ^ 0x1F) + 73) >> 6;
            if (*v33 >= 0) {
              uint64_t v35 = v34;
            }
            else {
              uint64_t v35 = 10;
            }
            v21 += v35;
            ++v32;
            unsigned int v31 = *a1;
          }
          while (v32 < **a1);
          goto LABEL_63;
        case 8:
          uint64_t v21 = **a1;
          goto LABEL_63;
        case 9:
        case 10:
        case 11:
        case 12:
          sub_21615C174((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1599);
          uint64_t v7 = sub_21615C18C(v102, "Non-primitive types can't be packed.");
          sub_21615C2C8((uint64_t)&v101, (const char **)&v7->__r_.__value_.__l.__data_);
          sub_21615C2D0((uint64_t)v102);
          goto LABEL_7;
        case 13:
          unsigned int v22 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v23 = 0;
          do
          {
            v21 += (9 * (__clz(*(_DWORD *)sub_21616CEA4(v22, v23++) | 1) ^ 0x1F) + 73) >> 6;
            unsigned int v22 = *a1;
          }
          while (v23 < **a1);
          goto LABEL_63;
        case 14:
          unint64_t v36 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v37 = 0;
          do
          {
            unint64_t v38 = (int *)sub_21616C848(v36, v37);
            uint64_t v39 = (9 * (__clz(*v38 | 1) ^ 0x1F) + 73) >> 6;
            if (*v38 >= 0) {
              uint64_t v40 = v39;
            }
            else {
              uint64_t v40 = 10;
            }
            v21 += v40;
            ++v37;
            unint64_t v36 = *a1;
          }
          while (v37 < **a1);
          goto LABEL_63;
        case 17:
          char v24 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v25 = 0;
          do
          {
            unsigned int v26 = (int *)sub_21616C848(v24, v25);
            v21 += (9 * (__clz((2 * *v26) ^ (*v26 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            ++v25;
            char v24 = *a1;
          }
          while (v25 < **a1);
          goto LABEL_63;
        case 18:
          uint64_t v41 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v42 = 0;
          do
          {
            int v43 = (uint64_t *)sub_21616D500(v41, v42);
            v21 += (9 * (__clz((2 * *v43) ^ (*v43 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            ++v42;
            uint64_t v41 = *a1;
          }
          while (v42 < **a1);
LABEL_63:
          *((_DWORD *)a1 + 3) = v21;
          unint64_t v44 = v21 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
          if (v21) {
            unint64_t v8 = v44;
          }
          else {
            unint64_t v8 = 0;
          }
          break;
        default:
LABEL_7:
          unint64_t v8 = 0;
          *((_DWORD *)a1 + 3) = 0;
          break;
      }
    }
    else
    {
      if ((v4 - 19) > 0xEDu)
      {
        int v14 = *((unsigned __int8 *)a1 + 8);
      }
      else
      {
        sub_21615C174((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        unsigned int v13 = sub_21615C18C(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_21615C2C8((uint64_t)&v101, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)v102);
        int v14 = *((unsigned __int8 *)a1 + 8);
        unsigned __int8 v5 = v14 - 19;
      }
      char v15 = v4 == 10;
      if (v5 <= 0xEDu)
      {
        sub_21615C174((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        unsigned int v16 = sub_21615C18C(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_21615C2C8((uint64_t)&v101, (const char **)&v16->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)v102);
      }
      unint64_t v17 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v15;
      switch(v14)
      {
        case 1:
        case 6:
        case 16:
          unsigned int v18 = v17 + 8;
          goto LABEL_27;
        case 2:
        case 7:
        case 15:
          unsigned int v18 = v17 + 4;
LABEL_27:
          unint64_t v8 = v18 * (unint64_t)**a1;
          break;
        case 3:
          unsigned int v50 = *a1;
          int v51 = **a1;
          unint64_t v8 = v17 * (unint64_t)v51;
          if (v51 >= 1)
          {
            int v52 = 0;
            do
            {
              v8 += (9 * (__clz(*(void *)sub_21616D500(v50, v52++) | 1) ^ 0x3F) + 73) >> 6;
              unsigned int v50 = *a1;
            }
            while (v52 < **a1);
          }
          break;
        case 4:
          unsigned int v53 = *a1;
          int v54 = **a1;
          unint64_t v8 = v17 * (unint64_t)v54;
          if (v54 >= 1)
          {
            int v55 = 0;
            do
            {
              v8 += (9 * (__clz(*(void *)sub_21616DB5C(v53, v55++) | 1) ^ 0x3F) + 73) >> 6;
              unsigned int v53 = *a1;
            }
            while (v55 < **a1);
          }
          break;
        case 5:
          int v56 = *a1;
          int v57 = **a1;
          unint64_t v8 = v17 * (unint64_t)v57;
          if (v57 >= 1)
          {
            int v58 = 0;
            do
            {
              unsigned int v59 = (int *)sub_21616C848(v56, v58);
              uint64_t v60 = (9 * (__clz(*v59 | 1) ^ 0x1F) + 73) >> 6;
              if (*v59 >= 0) {
                uint64_t v61 = v60;
              }
              else {
                uint64_t v61 = 10;
              }
              v8 += v61;
              ++v58;
              int v56 = *a1;
            }
            while (v58 < **a1);
          }
          break;
        case 8:
          unint64_t v8 = **a1 + **a1 * (unint64_t)v17;
          break;
        case 9:
          unsigned int v62 = *a1;
          int v63 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v63;
          if (v63 >= 1)
          {
            int v64 = 0;
            do
            {
              uint64_t v65 = sub_21615663C((uint64_t)v62, v64);
              uint64_t v66 = *(unsigned __int8 *)(v65 + 23);
              if ((v66 & 0x80u) != 0) {
                uint64_t v66 = *(void *)(v65 + 8);
              }
              v8 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6);
              ++v64;
              unsigned int v62 = *a1;
            }
            while (v64 < (*a1)[2]);
          }
          break;
        case 10:
          int v67 = *a1;
          int v68 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v68;
          if (v68 >= 1)
          {
            int v69 = 0;
            do
            {
              uint64_t v70 = sub_216166B74((uint64_t)v67, v69);
              v8 += (*(uint64_t (**)(uint64_t))(*(void *)v70 + 72))(v70);
              ++v69;
              int v67 = *a1;
            }
            while (v69 < (*a1)[2]);
          }
          break;
        case 11:
          unint64_t v71 = *a1;
          int v72 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v72;
          if (v72 >= 1)
          {
            int v73 = 0;
            do
            {
              uint64_t v74 = sub_216166B74((uint64_t)v71, v73);
              uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 72))(v74);
              v8 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6);
              ++v73;
              unint64_t v71 = *a1;
            }
            while (v73 < (*a1)[2]);
          }
          break;
        case 12:
          unint64_t v76 = *a1;
          int v77 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v77;
          if (v77 >= 1)
          {
            int v78 = 0;
            do
            {
              uint64_t v79 = sub_21615663C((uint64_t)v76, v78);
              uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
              if ((v80 & 0x80u) != 0) {
                uint64_t v80 = *(void *)(v79 + 8);
              }
              v8 += v80 + ((9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6);
              ++v78;
              unint64_t v76 = *a1;
            }
            while (v78 < (*a1)[2]);
          }
          break;
        case 13:
          int v81 = *a1;
          int v82 = **a1;
          unint64_t v8 = v17 * (unint64_t)v82;
          if (v82 >= 1)
          {
            int v83 = 0;
            do
            {
              v8 += (9 * (__clz(*(_DWORD *)sub_21616CEA4(v81, v83++) | 1) ^ 0x1F) + 73) >> 6;
              int v81 = *a1;
            }
            while (v83 < **a1);
          }
          break;
        case 14:
          int v84 = *a1;
          int v85 = **a1;
          unint64_t v8 = v17 * (unint64_t)v85;
          if (v85 >= 1)
          {
            int v86 = 0;
            do
            {
              unint64_t v87 = (int *)sub_21616C848(v84, v86);
              uint64_t v88 = (9 * (__clz(*v87 | 1) ^ 0x1F) + 73) >> 6;
              if (*v87 >= 0) {
                uint64_t v89 = v88;
              }
              else {
                uint64_t v89 = 10;
              }
              v8 += v89;
              ++v86;
              int v84 = *a1;
            }
            while (v86 < **a1);
          }
          break;
        case 17:
          unint64_t v90 = *a1;
          int v91 = **a1;
          unint64_t v8 = v17 * (unint64_t)v91;
          if (v91 >= 1)
          {
            int v92 = 0;
            do
            {
              uint64_t v93 = (int *)sub_21616C848(v90, v92);
              v8 += (9 * (__clz((2 * *v93) ^ (*v93 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              ++v92;
              unint64_t v90 = *a1;
            }
            while (v92 < **a1);
          }
          break;
        case 18:
          int v94 = *a1;
          int v95 = **a1;
          unint64_t v8 = v17 * (unint64_t)v95;
          if (v95 >= 1)
          {
            int v96 = 0;
            do
            {
              unint64_t v97 = (uint64_t *)sub_21616D500(v94, v96);
              v8 += (9 * (__clz((2 * *v97) ^ (*v97 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              ++v96;
              int v94 = *a1;
            }
            while (v96 < **a1);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if (*((unsigned char *)a1 + 10))
  {
    return 0;
  }
  else
  {
    int v9 = *((unsigned __int8 *)a1 + 8);
    unsigned __int8 v10 = v9 - 19;
    if ((v9 - 19) > 0xEDu)
    {
      int v12 = *((unsigned __int8 *)a1 + 8);
    }
    else
    {
      sub_21615C174((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v11 = sub_21615C18C(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v101, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v102);
      int v12 = *((unsigned __int8 *)a1 + 8);
      unsigned __int8 v10 = v12 - 19;
    }
    char v19 = v9 == 10;
    if (v10 <= 0xEDu)
    {
      sub_21615C174((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      int v20 = sub_21615C18C(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v101, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v102);
    }
    unint64_t v8 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v19;
    switch(v12)
    {
      case 1:
      case 6:
      case 16:
        v8 += 8;
        return v8;
      case 2:
      case 7:
      case 15:
        v8 += 4;
        return v8;
      case 3:
      case 4:
        unint64_t v46 = (unint64_t)*a1;
        goto LABEL_138;
      case 5:
      case 14:
        uint64_t v47 = (9 * (__clz(*(_DWORD *)a1 | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)a1 >= 0) {
          uint64_t v48 = v47;
        }
        else {
          uint64_t v48 = 10;
        }
        v8 += v48;
        return v8;
      case 8:
        return ++v8;
      case 9:
      case 12:
        uint64_t v49 = *((void *)*a1 + 1);
        if (*((char *)*a1 + 23) >= 0) {
          uint64_t v49 = *((unsigned __int8 *)*a1 + 23);
        }
        v8 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 10:
        v8 += (*(uint64_t (**)(void))(*(void *)*a1 + 72))();
        return v8;
      case 11:
        uint64_t v98 = *(void *)*a1;
        if ((*((unsigned char *)a1 + 10) & 0x10) != 0) {
          uint64_t v99 = (*(uint64_t (**)(void))(v98 + 88))();
        }
        else {
          uint64_t v99 = (*(uint64_t (**)(void))(v98 + 72))();
        }
        v8 += v99 + ((9 * (__clz(v99 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 13:
        int v100 = *(_DWORD *)a1;
        goto LABEL_136;
      case 17:
        int v100 = (2 * *(_DWORD *)a1) ^ (*(int *)a1 >> 31);
LABEL_136:
        v8 += (9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 18:
        unint64_t v46 = (2 * (void)*a1) ^ ((uint64_t)*a1 >> 63);
LABEL_138:
        v8 += (9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_2161666D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2161667F0(unsigned __int8 *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[8];
  if (result[9])
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v3 = sub_21615C18C(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_21615C2D0((uint64_t)v11);
    }
    switch(v2)
    {
      case 1:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_21616E93C();
          goto LABEL_32;
        }
        break;
      case 2:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_21616E2E0();
          goto LABEL_32;
        }
        break;
      case 3:
      case 16:
      case 18:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_21616D628();
          goto LABEL_32;
        }
        break;
      case 4:
      case 6:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_21616DC84();
          goto LABEL_32;
        }
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_21616C970();
          goto LABEL_32;
        }
        break;
      case 7:
      case 13:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_21616CFCC();
          goto LABEL_32;
        }
        break;
      case 8:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_21616C318();
LABEL_32:
          uint64_t v8 = 0x1080C4057E67DB5;
          return (unsigned __int8 *)MEMORY[0x2166CA800](v4, v8);
        }
        break;
      case 9:
      case 12:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_21616EBC8();
          goto LABEL_37;
        }
        break;
      case 10:
      case 11:
        int v9 = *(unsigned __int8 **)v1;
        if (v9)
        {
          sub_216167384(v9);
          int v4 = sub_21614D184((uint64_t *)v9);
LABEL_37:
          uint64_t v8 = 0x1020C4014030ADELL;
          return (unsigned __int8 *)MEMORY[0x2166CA800](v4, v8);
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_21615C174((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned __int8 v5 = sub_21615C18C(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_21615C2C8((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_21615C2D0((uint64_t)v11);
    }
    int v6 = dword_21636DF18[v2];
    if (v6 == 10)
    {
      uint64_t result = *(unsigned __int8 **)v1;
      if ((v1[10] & 0x10) != 0)
      {
        if (!result) {
          return result;
        }
      }
      else if (!result)
      {
        return result;
      }
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
    if (v6 == 9)
    {
      uint64_t v7 = *(unsigned __int8 **)v1;
      if (v7)
      {
        if ((char)v7[23] < 0) {
          operator delete(*(void **)v7);
        }
        int v4 = (uint64_t *)v7;
        uint64_t v8 = 0x1012C40EC159624;
        return (unsigned __int8 *)MEMORY[0x2166CA800](v4, v8);
      }
    }
  }
  return result;
}

void sub_216166A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216166A98()
{
}

unsigned __int8 *sub_216166AAC(unsigned __int8 *result, unsigned __int8 *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t result = sub_2161667F0(v3 + 40);
      int v4 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          unsigned __int8 v5 = v4;
          int v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unsigned __int8 v5 = (unsigned __int8 *)*((void *)v3 + 2);
          BOOL v6 = *(void *)v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *sub_216166B3C(uint64_t *a1)
{
  sub_216167384(a1);

  return sub_21614D184(a1);
}

uint64_t sub_216166B74(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    int v4 = sub_21615C18C(v8, "CHECK failed: (index) >= (0): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_21615C174((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    unsigned __int8 v5 = sub_21615C18C(v8, "CHECK failed: (index) < (current_size_): ");
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_216166C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216166C54(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(int **)(result + 16);
  if (!v2) {
    return sub_216166CA8(result, a2);
  }
  uint64_t v3 = *v2;
  if ((int)v3 >= *(_DWORD *)(result + 12)) {
    return sub_216166CA8(result, a2);
  }
  int v4 = v2 + 2;
  uint64_t v5 = *(int *)(result + 8);
  if ((int)v5 < (int)v3) {
    *(void *)&v4[2 * v3] = *(void *)&v4[2 * v5];
  }
  *(void *)&v4[2 * v5] = a2;
  *(_DWORD *)(result + 8) = v5 + 1;
  ++**(_DWORD **)(result + 16);
  return result;
}

uint64_t sub_216166CA8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(int **)(result + 16);
  if (!v4)
  {
    int v5 = *(_DWORD *)(result + 12);
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(result + 8);
  int v6 = *(_DWORD *)(result + 12);
  if (v5 == v6)
  {
LABEL_11:
    uint64_t result = sub_21616EBCC(result, v5 + 1);
    goto LABEL_12;
  }
  uint64_t v7 = *v4;
  if (v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      int v9 = v7 + 1;
      goto LABEL_13;
    }
    *(void *)&v4[2 * v7 + 2] = *(void *)&v4[2 * v5 + 2];
LABEL_12:
    int v4 = *(int **)(v3 + 16);
    int v9 = *v4 + 1;
LABEL_13:
    *int v4 = v9;
    goto LABEL_14;
  }
  uint64_t result = *(void *)&v4[2 * v5 + 2];
  if (result) {
    BOOL v8 = *(void *)v3 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    int v4 = *(int **)(v3 + 16);
  }
LABEL_14:
  uint64_t v10 = *(int *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v10 + 1;
  *(void *)&v4[2 * v10 + 2] = a2;
  return result;
}

uint64_t *sub_216166D88(void *a1, void *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      sub_216160B1C(a3, *((unsigned int *)v5 + 8), v5 + 5);
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      int v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

const std::string::value_type *sub_216166E0C(uint64_t a1, std::string::value_type *__s, int a3, std::string *a4)
{
  if (*(void *)(a1 + 8) - (void)__s + 16 >= a3)
  {
    uint64_t v6 = a3;
    MEMORY[0x2166CA370](a4, __s, a3);
    return &__s[v6];
  }
  else
  {
    return sub_2161692A4(a1, __s, a3, a4);
  }
}

char *sub_216166E78(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v15 = (unint64_t)&result[v5];
    long long v16 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v16;
    uint64_t v20 = *(void *)(a3 + 32);
    uint64_t result = sub_2161670D4(result, v15, (unsigned int **)v19);
    if ((char *)v15 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      long long v10 = *(_OWORD *)(a3 + 16);
      v24[0] = *(_OWORD *)a3;
      v24[1] = v10;
      uint64_t v25 = *(void *)(a3 + 32);
      uint64_t result = sub_2161670D4(result, v8, (unsigned int **)v24);
      if (!result) {
        break;
      }
      signed int v11 = result - *(void *)(a1 + 8);
      if (v11 >= 0x11)
      {
        sub_21615C174((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v12 = sub_21615C18C(&v26, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_21615C2C8((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v26);
      }
      int v13 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v27 = 0;
        v26.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        uint64_t v22 = *(void *)(a3 + 32);
        long long v17 = *(_OWORD *)(a3 + 16);
        v21[0] = *(_OWORD *)a3;
        v21[1] = v17;
        unsigned int v18 = (std::string *)sub_2161670D4((char *)&v26 + v11, (unint64_t)&v26 + v13, (unsigned int **)v21);
        uint64_t result = 0;
        if (v18 && v18 == (std::string *)((char *)&v26 + v13)) {
          return (char *)(*(void *)(a1 + 8) + v13);
        }
        return result;
      }
      int v5 = v5 - v9 - v11;
      if (v5 <= 0)
      {
        sub_21615C174((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        int v14 = sub_21615C18C(&v26, "CHECK failed: (size) > (0): ");
        sub_21615C2C8((uint64_t)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_21615C2D0((uint64_t)&v26);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_2161689D0(a1);
      if (!result) {
        return result;
      }
      result += v11;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_2161670AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

char *sub_2161670D4(char *a1, unint64_t a2, unsigned int **a3)
{
  uint64_t v3 = a1;
  while ((unint64_t)v3 < a2)
  {
    unint64_t v6 = *v3;
    if (*v3 < 0)
    {
      int v7 = v6 + (v3[1] << 7);
      unint64_t v6 = (v7 - 128);
      if (v3[1] < 0)
      {
        uint64_t v3 = (char *)sub_216169794((uint64_t)v3, (v7 - 128));
        if (!v3) {
          return v3;
        }
        unint64_t v6 = v8;
      }
      else
      {
        v3 += 2;
      }
    }
    else
    {
      ++v3;
    }
    if (((unsigned int (*)(unsigned int *, unint64_t))a3[1])(a3[2], v6))
    {
      int v9 = (int *)*a3;
      uint64_t v10 = **a3;
      if (v10 == (*a3)[1])
      {
        int v11 = v10 + 1;
        sub_21616C4D4((int *)*a3, v10 + 1);
        *(_DWORD *)(sub_21616C974((uint64_t)v9) + 4 * v1sub_21613F89C(&a9, 0) = v6;
      }
      else
      {
        *(_DWORD *)(sub_21616C974((uint64_t)*a3) + 4 * v1sub_21613F89C(&a9, 0) = v6;
        int v11 = v10 + 1;
      }
      *int v9 = v11;
    }
    else
    {
      int v12 = *((_DWORD *)a3 + 8);
      int v13 = (unint64_t *)a3[3];
      if (*v13) {
        int v14 = (std::string *)((*v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        int v14 = (std::string *)sub_21614CE8C(v13);
      }
      sub_216169680(v12, v6, v14);
    }
  }
  return v3;
}

char *sub_216167200(uint64_t a1, char *__src, int64_t __n)
{
  *(_DWORD *)(a1 + 84) = 0;
  if (__n >= 17)
  {
    *(_DWORD *)(a1 + 28) = 16;
    unint64_t v6 = &__src[__n - 16];
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = a1 + 40;
    if (*(void *)(a1 + 72) != 1) {
      return __src;
    }
    uint64_t v7 = 2;
    unint64_t v8 = __src;
    goto LABEL_6;
  }
  unint64_t v8 = (char *)(a1 + 40);
  memcpy((void *)(a1 + 40), __src, __n);
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = &v8[__n];
  *(void *)(a1 + 8) = &v8[__n];
  *(void *)(a1 + 16) = 0;
  if (*(void *)(a1 + 72) == 1)
  {
    uint64_t v7 = __src - v8;
LABEL_6:
    *(void *)(a1 + 72) = v7;
  }
  return v8;
}

uint64_t sub_2161672B4(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_21615C174((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    int v5 = sub_21615C18C(v7, "CHECK failed: (n) >= (0): ");
    sub_21615C2C8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_21615C2D0((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*(void *)(result + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_21616736C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216167384(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 2;
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t **sub_216167410(uint64_t **a1, int *a2, _OWORD *a3)
{
  char v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        char v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        char v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x40uLL);
    long long v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    sub_21612A650(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_2161674CC(uint64_t a1)
{
}

uint64_t *sub_2161674D4(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  char v6 = sub_21616755C(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x40uLL);
    long long v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    sub_21612A650(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *sub_21616755C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_216167704(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      int v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      std::string v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *int v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      int v7 = *(uint64_t **)(*v7 + 8);
    }
    int v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        std::string v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        std::string v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        int v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      char v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      _OWORD v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *char v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    std::string v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    int v7 = *(uint64_t **)v12;
  }
  char v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    std::string v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    std::string v7[2] = (uint64_t)v20;
    char v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  char v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  _OWORD v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_216167A88()
{
}

uint64_t sub_216167AB4(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void sub_216167AD8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_216167AEC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CF28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CF28))
  {
    qword_26797EE40 = 0;
    *(void *)algn_26797EE48 = 0;
    qword_26797EE50 = 0;
    sub_2161686D0((uint64_t)sub_216167AD8, (uint64_t)&qword_26797EE40);
    atomic_store(1u, byte_26797EE58);
    __cxa_guard_release(&qword_26797CF28);
  }
}

void sub_216167B80(_Unwind_Exception *a1)
{
}

uint64_t sub_216167B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v4);
  int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void sub_216167CF0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_216167D24(_DWORD *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CF30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CF30))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_26797B438, &dword_2160F5000);
    __cxa_guard_release(&qword_26797CF30);
  }
  pthread_t v2 = pthread_self();
  uint64_t v3 = (uint64_t)v2;
  if (qword_26797CF38)
  {
    if (v2 && v2 == (pthread_t)qword_26797CF38) {
      goto LABEL_5;
    }
  }
  else if (!v2)
  {
LABEL_5:
    if (*a1 != 1)
    {
      sub_21615C174((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 785);
      uint64_t v4 = sub_21615C18C(v6, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      sub_21615C2C8((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v6);
    }
    return;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)byte_26797EE58, memory_order_acquire) & 1) == 0) {
    sub_216167AEC();
  }
  std::mutex::lock(&stru_26797B438);
  qword_26797CF38 = v3;
  sub_216167E90(a1);
  qword_26797CF38 = 0;

  std::mutex::unlock(&stru_26797B438);
}

void sub_216167E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216167E90(_DWORD *result)
{
  if (*result == -1)
  {
    uint64_t v1 = (uint64_t (**)(void))result;
    char *result = 1;
    pthread_t v2 = result + 6;
    int v3 = result[1];
    if (v3 >= 1)
    {
      for (uint64_t i = 0; i < v3; ++i)
      {
        if (*(void *)&v2[2 * i])
        {
          sub_216167E90();
          int v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    uint64_t v5 = v3;
    int v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      uint64_t v7 = 0;
      int v8 = &v2[2 * v5];
      do
      {
        if (**(void **)&v8[2 * v7])
        {
          sub_216167E90();
          int v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    uint64_t result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t sub_216167F40(char *__src, int64_t __n, uint64_t a3, char a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v13 = 0x7FFFFFFF00000000;
  int v14 = dword_26797B430;
  unsigned int v15 = 0x80000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v6 = sub_216167200((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(uint64_t, char *, unsigned char *))(*(void *)a3 + 88))(a3, v6, v9)) {
    BOOL v7 = v13 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3)) {
      return 1;
    }
    sub_21616806C(a3);
  }
  return 0;
}

void *sub_21616805C@<X0>(void *a1@<X8>)
{
  return sub_21610B834(a1, "(cannot determine missing fields for lite message)");
}

uint64_t sub_21616806C(uint64_t a1)
{
  sub_21615C174((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 133);
  sub_216168120("parse", a1, &__p);
  pthread_t v2 = sub_21615C1B8(v6, (const std::string::value_type *)&__p);
  sub_21615C2C8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return sub_21615C2D0((uint64_t)v6);
}

void sub_2161680F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_21615C2D0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_216168120(const std::string::value_type *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, a1);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
  if ((v12 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = v11;
  }
  std::string::append(a3, p_p, v7);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 56))(&__p, a2);
  if ((v12 & 0x80u) == 0) {
    int v8 = (const std::string::value_type *)&__p;
  }
  else {
    int v8 = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = v11;
  }
  std::string::append(a3, v8, v9);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
}

void sub_21616825C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21616829C(uint64_t a1, char *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    sub_2161689A4();
  }
  int64_t v5 = a3;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);

  return sub_216167F40(a2, v5, a1, 1);
}

BOOL sub_216168318(uint64_t a1, std::string *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    sub_21615C174((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 449);
    char v4 = sub_21615C18C(v9, "CHECK failed: IsInitialized(): ");
    sub_216168120("serialize", a1, &__p);
    int64_t v5 = sub_21615C1B8(v4, (const std::string::value_type *)&__p);
    sub_21615C2C8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_21615C2D0((uint64_t)v9);
  }
  return sub_216168424(a1, a2);
}

void sub_2161683F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_21615C2D0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_216168424(uint64_t a1, std::string *a2)
{
  pthread_t v2 = a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v6 = v5;
  unint64_t v7 = v5 >> 31;
  if (v5 >> 31)
  {
    sub_21615C174((uint64_t)v16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 457);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    long long v10 = sub_21615C1B8(v16, (const std::string::value_type *)__p);
    std::string::size_type v11 = sub_21615C18C(v10, " exceeded maximum protobuf size of 2GB: ");
    unsigned __int8 v12 = sub_21615C404(v11, v6);
    sub_21615C2C8((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    std::string::size_type v9 = v16;
    goto LABEL_12;
  }
  std::string::resize(v2, v5 + size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
    pthread_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  *(_OWORD *)&v16[0].__r_.__value_.__l.__data_ = (unint64_t)v2 + size + v6;
  uint64_t v17 = 0;
  __int16 v18 = 0;
  char v19 = byte_26797EE3C & 1;
  if (v16[0].__r_.__value_.__r.__words[0] != (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1))
  {
    sub_21615C174((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    int v8 = sub_21615C18C(__p, "CHECK failed: target + size == res: ");
    sub_21615C2C8((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    std::string::size_type v9 = __p;
LABEL_12:
    sub_21615C2D0((uint64_t)v9);
  }
  return v7 == 0;
}

void sub_216168618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL sub_216168660@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL result = sub_216168318(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_2161686B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161686D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216168804();
  std::mutex::lock((std::mutex *)(v4 + 24));
  unint64_t v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((uint64_t)v5 - *(void *)v4) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_21610CB04();
    }
    uint64_t v10 = v6 - *(void *)v4;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unsigned __int8 v12 = (char *)sub_21612AA90(v4 + 16, v11);
    }
    else {
      unsigned __int8 v12 = 0;
    }
    uint64_t v13 = &v12[16 * v8];
    char v14 = &v12[16 * v11];
    *(void *)uint64_t v13 = a1;
    *((void *)v13 + 1) = a2;
    unint64_t v7 = v13 + 16;
    uint64_t v16 = *(char **)v4;
    uint64_t v15 = *(char **)(v4 + 8);
    if (v15 != *(char **)v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      uint64_t v15 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v13;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v5 = a1;
    v5[1] = a2;
    unint64_t v7 = v5 + 2;
  }
  *(void *)(v4 + 8) = v7;

  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_2161687F0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216168804()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797B480, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797B480))
  {
    operator new();
  }
  return qword_26797B478;
}

void sub_216168894(_Unwind_Exception *a1)
{
}

void sub_2161688AC()
{
  if ((byte_26797CF40 & 1) == 0)
  {
    uint64_t v0 = sub_216168804();
    if (v0)
    {
      uint64_t v1 = sub_2161688FC(v0);
      MEMORY[0x2166CA800](v1, 0x1020C40A0054943);
    }
    byte_26797CF40 = 1;
  }
}

uint64_t sub_2161688FC(uint64_t a1)
{
  pthread_t v2 = *(void **)a1;
  int v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3 - 2;
  if (*(void **)a1 != v3 && v4 > v2)
  {
    do
    {
      unint64_t v6 = (void (*)(void))*v2;
      *pthread_t v2 = *v4;
      *uint64_t v4 = v6;
      uint64_t v7 = v2[1];
      v2[1] = v4[1];
      v4[1] = v7;
      v2 += 2;
      v4 -= 2;
    }
    while (v2 < v4);
    pthread_t v2 = *(void **)a1;
    int v3 = *(void **)(a1 + 8);
  }
  while (v2 != v3)
  {
    ((void (*)(void))*v2)(v2[1]);
    v2 += 2;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_2161689A4()
{
  __assert_rtn("StringPiece", "stringpiece.h", 229, "len >= 0");
}

_OWORD *sub_2161689D0(uint64_t a1)
{
  if (*(int *)(a1 + 28) <= 16)
  {
    sub_21615C174((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 158);
    pthread_t v2 = sub_21615C18C(v7, "CHECK failed: limit_ > kSlopBytes: ");
    sub_21615C2C8((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v7);
  }
  BOOL result = sub_216168A98(a1, 0, -1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (result)
  {
    int v5 = *(_DWORD *)(a1 + 28) + result - v4;
    *(_DWORD *)(a1 + 28) = v5;
    v4 += v5 & (v5 >> 31);
  }
  else
  {
    *(_DWORD *)(a1 + 8sub_21613F89C(&a9, 0) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

void sub_216168A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_216168A98(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_OWORD **)(a1 + 16);
  if (!v3) {
    return v3;
  }
  uint64_t v5 = a1 + 40;
  if (v3 != (_OWORD *)(a1 + 40))
  {
    int v6 = *(_DWORD *)(a1 + 24);
    if (v6 <= 16)
    {
      sub_21615C174((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 105);
      uint64_t v7 = sub_21615C18C(v33, "CHECK failed: size_ > kSlopBytes: ");
      sub_21615C2C8((uint64_t)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v33);
      int v3 = *(_OWORD **)(a1 + 16);
      int v6 = *(_DWORD *)(a1 + 24);
    }
    *(void *)(a1 + 8) = (char *)v3 + v6 - 16;
    *(void *)(a1 + 16) = v5;
    if (*(void *)(a1 + 72) == 1) {
      *(void *)(a1 + 72) = 2;
    }
    return v3;
  }
  *int v3 = *(_OWORD *)*(void *)(a1 + 8);
  if (*(int *)(a1 + 84) < 1) {
    goto LABEL_46;
  }
  int v8 = a3;
  if (a3 < 0) {
    goto LABEL_39;
  }
  if ((a2 & 0x80000000) != 0)
  {
    sub_21615C174((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 53);
    unint64_t v11 = sub_21615C18C(v33, "CHECK failed: overrun >= 0: ");
    sub_21615C2C8((uint64_t)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v33);
LABEL_14:
    unint64_t v12 = a1 + 56;
    uint64_t v13 = (unsigned __int8 *)v3 + (int)a2;
    char v14 = v13;
    while (2)
    {
      int v15 = (char)*v14++;
      int v16 = v15;
      if (v15 < 0)
      {
        int v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          char v14 = v13 + 3;
          uint64_t v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0) {
              break;
            }
            ++v14;
            v20 += 7;
            if (!v20) {
              goto LABEL_39;
            }
          }
        }
        else
        {
          char v14 = v13 + 2;
        }
      }
      if ((unint64_t)v14 <= v12)
      {
        if (!v16) {
          goto LABEL_46;
        }
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            char v14 = sub_216169ED8((char *)v14, v33);
            if (!v14) {
              goto LABEL_39;
            }
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            int v18 = *v14;
            if ((char)*v14 < 0)
            {
              uint64_t v19 = sub_216169820((uint64_t)v14, v18);
              if (!v19) {
                goto LABEL_39;
              }
            }
            else
            {
              uint64_t v19 = (uint64_t)(v14 + 1);
            }
            if ((uint64_t)(v12 - v19) < v18) {
              goto LABEL_39;
            }
            char v14 = (unsigned __int8 *)(v19 + v18);
LABEL_38:
            uint64_t v13 = v14;
            if ((unint64_t)v14 >= v12) {
              goto LABEL_39;
            }
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            BOOL v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17) {
              goto LABEL_46;
            }
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    sub_21615C174((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 54);
    uint64_t v10 = sub_21615C18C(v33, "CHECK failed: overrun <= kSlopBytes: ");
    sub_21615C2C8((uint64_t)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v33);
    goto LABEL_39;
  }
  if (a2 != 16) {
    goto LABEL_14;
  }
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(void, void **, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &__src, a1 + 24))
  {
LABEL_45:
    *(_DWORD *)(a1 + 84) = 0;
LABEL_46:
    if (*(void *)(a1 + 72) == 2) {
      *(void *)(a1 + 72) = *(void *)(a1 + 8) - (void)v3;
    }
    *(void *)(a1 + 8) = a1 + 56;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return v3;
  }
  while (1)
  {
    size_t v21 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(a1 + 84) -= v21;
    if ((int)v21 >= 17)
    {
      unint64_t v27 = *(void *)(a1 + 72);
      uint64_t v26 = (void *)(a1 + 72);
      unint64_t v25 = v27;
      uint64_t v28 = (char *)(v26 - 2);
      unsigned int v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1) {
      break;
    }
    if (v21)
    {
      sub_21615C174((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 137);
      uint64_t v22 = sub_21615C18C(v33, "CHECK failed: size_ == 0: ");
      uint64_t v23 = sub_21615C384(v22, *(_DWORD *)(a1 + 24));
      sub_21615C2C8((uint64_t)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v33);
    }
    if (((*(uint64_t (**)(void, void **, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &__src, a1 + 24) & 1) == 0)goto LABEL_45; {
  }
    }
  memcpy((void *)(a1 + 56), __src, v21);
  unint64_t v30 = *(void *)(a1 + 72);
  uint64_t v26 = (void *)(a1 + 72);
  unint64_t v25 = v30;
  uint64_t v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1) {
    *uint64_t v26 = 1;
  }
  return v3;
}

void sub_216168E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_216168EC4(uint64_t a1, signed int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 28);
  if (v3 < a2) {
    return 0;
  }
  signed int v5 = a2;
  if (v3 == a2)
  {
    sub_21615C174((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 175);
    uint64_t v7 = sub_21615C18C(v19, "CHECK failed: overrun != limit_: ");
    sub_21615C2C8((uint64_t)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= v5)
  {
    sub_21615C174((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 176);
    int v8 = sub_21615C18C(v19, "CHECK failed: overrun < limit_: ");
    sub_21615C2C8((uint64_t)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (*(void *)a1 != *(void *)(a1 + 8) + (v3 & (v3 >> 31)))
  {
    sub_21615C174((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 181);
    unint64_t v9 = sub_21615C18C(v19, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    sub_21615C2C8((uint64_t)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= 0)
  {
    sub_21615C174((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 183);
    uint64_t v10 = sub_21615C18C(v19, "CHECK failed: limit_ > 0: ");
    sub_21615C2C8((uint64_t)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v19);
  }
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    sub_21615C174((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 184);
    unint64_t v11 = sub_21615C18C(v19, "CHECK failed: limit_end_ == buffer_end_: ");
    sub_21615C2C8((uint64_t)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v19);
  }
  while (1)
  {
    if (v5 < 0)
    {
      sub_21615C174((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 188);
      unint64_t v12 = sub_21615C18C(v19, "CHECK failed: overrun >= 0: ");
      sub_21615C2C8((uint64_t)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v19);
    }
    uint64_t v13 = sub_216168A98(a1, v5, a3);
    if (!v13) {
      break;
    }
    uint64_t v14 = *(void *)(a1 + 8);
    int v15 = *(_DWORD *)(a1 + 28) + v13 - v14;
    *(_DWORD *)(a1 + 28) = v15;
    BOOL result = (char *)v13 + v5;
    signed int v5 = result - v14;
    if ((int)result - (int)v14 < 0)
    {
      *(void *)a1 = v14 + (v15 & (v15 >> 31));
      return result;
    }
  }
  if (v5) {
    return 0;
  }
  if (*(int *)(a1 + 28) <= 0)
  {
    sub_21615C174((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 193);
    BOOL v17 = sub_21615C18C(v19, "CHECK failed: limit_ > 0: ");
    sub_21615C2C8((uint64_t)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_21615C2D0((uint64_t)v19);
  }
  BOOL result = *(char **)(a1 + 8);
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8sub_21613F89C(&a9, 0) = 1;
  return result;
}

void sub_216169174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_2161691BC(uint64_t a1, int a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 8) - a2 + 16;
  while (1)
  {
    BOOL v6 = __OFSUB__(a3, v5);
    a3 -= v5;
    if ((a3 < 0) ^ v6 | (a3 == 0))
    {
      sub_21615C174((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      uint64_t v7 = sub_21615C18C(v10, "CHECK failed: size > chunk_size: ");
      sub_21615C2C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v10);
    }
    if (!*(void *)(a1 + 16) || *(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = sub_2161689D0(a1);
    if (!result) {
      return result;
    }
    int v5 = *(_DWORD *)(a1 + 8) - result;
    if (a3 <= v5) {
      return (_OWORD *)((char *)result + a3 + 16);
    }
  }
  return 0;
}

void sub_21616928C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_2161692A4(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5 = a3;
  BOOL v6 = __s;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (a3 >= 50000000) {
      int v10 = 50000000;
    }
    else {
      int v10 = a3;
    }
    std::string::reserve(this, size + v10);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v11 = v8 - v6 + 16;
  while (1)
  {
    BOOL v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_21615C174((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      uint64_t v13 = sub_21615C18C(v16, "CHECK failed: size > chunk_size: ");
      sub_21615C2C8((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v16);
    }
    if (!*(void *)(a1 + 16)) {
      break;
    }
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = (const std::string::value_type *)sub_2161689D0(a1);
    if (!result) {
      return result;
    }
    BOOL v6 = result + 16;
    int v11 = *(_DWORD *)(a1 + 8) - result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_216169414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_21616942C(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5 = a3;
  BOOL v6 = __s;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (a3 >= 50000000) {
      int v10 = 50000000;
    }
    else {
      int v10 = a3;
    }
    std::string::reserve(this, size + v10);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v11 = v8 - v6 + 16;
  while (1)
  {
    BOOL v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_21615C174((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      uint64_t v13 = sub_21615C18C(v16, "CHECK failed: size > chunk_size: ");
      sub_21615C2C8((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_21615C2D0((uint64_t)v16);
    }
    if (!*(void *)(a1 + 16)) {
      break;
    }
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = (const std::string::value_type *)sub_2161689D0(a1);
    if (!result) {
      return result;
    }
    BOOL v6 = result + 16;
    int v11 = *(_DWORD *)(a1 + 8) - result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_21616957C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21615C2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216169598(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_216169820((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = (char *)result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (char *)(a3 + 1);
  }
  int v11 = sub_21614D1B8(a1, (int)v8, v7);
  int v12 = *(_DWORD *)(a1 + 88);
  BOOL v13 = __OFSUB__(v12--, 1);
  *(_DWORD *)(a1 + 88) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 88))(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++*(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 80)) {
    return 0;
  }
  int v15 = *(_DWORD *)(a1 + 28) + v14;
  *(_DWORD *)(a1 + 28) = v15;
  *(void *)a1 = *(void *)(a1 + 8) + (v15 & (v15 >> 31));
  return result;
}

void sub_216169680(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      unint64_t v6 = v5 >> 7;
      unint64_t v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      unint64_t v8 = a2 >> 7;
      unint64_t v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }

  std::string::push_back(this, v8);
}

uint64_t sub_21616972C(uint64_t a1, int a2)
{
  uint64_t result = a1 + 3;
  uint64_t v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 35);
    if ((*(char *)(result - 1) & 0x80000000) == 0) {
      break;
    }
    ++result;
    v4 += 7;
    if (!v4)
    {
      while (*(char *)(a1 + v4 + 5) < 0)
      {
        uint64_t result = 0;
        if (++v4 == 5) {
          return result;
        }
      }
      return a1 + v4 + 6;
    }
  }
  return result;
}

uint64_t sub_216169794(uint64_t a1, uint64_t a2)
{
  a2 = a2;
  uint64_t result = a1 + 3;
  uint64_t v4 = (char *)(a1 + 2);
  uint64_t v5 = 14;
  while (1)
  {
    int v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    ++result;
    v5 += 7;
    if (v5 == 70) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2161697DC(uint64_t a1, int a2)
{
  uint64_t result = a1 + 3;
  uint64_t v4 = (char *)(a1 + 2);
  uint64_t v5 = -21;
  while (1)
  {
    int v6 = *v4++;
    a2 += (v6 - 1) << (v5 + 35);
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    ++result;
    v5 += 7;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216169820(uint64_t a1, int a2)
{
  uint64_t result = a1 + 2;
  uint64_t v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 28);
    if ((*(char *)(result - 1) & 0x80000000) == 0) {
      break;
    }
    ++result;
    v4 += 7;
    if (!v4)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 4);
      uint64_t v6 = a1 + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF) {
        uint64_t v6 = 0;
      }
      if (v5 <= 7) {
        return v6;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

const std::string::value_type *sub_216169890(std::string *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (const std::string::value_type *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = (std::string::value_type *)result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }

  return sub_216166E0C(a3, v6, v5, a1);
}

unsigned __int8 *sub_216169908(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_216169F4C(a3, a2, a1);
}

unsigned __int8 *sub_216169918(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_21616A220(a3, a2, a1);
}

unsigned __int8 *sub_216169928(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_21616A4F4(a3, a2, a1);
}

unsigned __int8 *sub_216169938(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_21616A7C8(a3, a2, a1);
}

unsigned __int8 *sub_216169948(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_21616AA9C(a3, a2, a1);
}

unsigned __int8 *sub_216169958(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_21616AD7C(a3, a2, a1);
}

unsigned __int8 *sub_216169968(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_21616B05C(a3, a2, a1);
}

char *sub_21616997C(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_216169820((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }

  return sub_21616B338(a3, v6, v5, a1);
}