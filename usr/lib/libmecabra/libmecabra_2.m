void sub_2161E41C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;
  uint64_t v44;
  void *v45;

  v44 = 0;
  while (1)
  {
    v45 = *(void **)(v42 + v44 + 232);
    if (v45)
    {
      *(void *)(v42 + v44 + 240) = v45;
      operator delete(v45);
    }
    v44 -= 32;
    if (v44 == -256)
    {
      if (__p) {
        operator delete(__p);
      }
      if (a14) {
        operator delete(a14);
      }
      if (a17) {
        operator delete(a17);
      }
      if (a21) {
        operator delete(a21);
      }
      if (a25) {
        operator delete(a25);
      }
      if (a29) {
        operator delete(a29);
      }
      if (a33) {
        operator delete(a33);
      }
      if (a37) {
        operator delete(a37);
      }
      __cxa_guard_abort(&qword_26797D660);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2161E4330()
{
}

void sub_2161E433C()
{
}

void sub_2161E434C()
{
}

CFStringRef sub_2161E4358(const __CFString *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    CFIndex Length = CFStringGetLength(result);
    if (Length >= 1)
    {
      CFIndex v3 = Length;
      for (CFIndex i = 0; i < v3; i += RangeOfComposedCharactersAtIndex.length)
      {
        CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v1, i);
        if (RangeOfComposedCharactersAtIndex.length == 2)
        {
          int CharacterAtIndex = CFStringGetCharacterAtIndex(v1, RangeOfComposedCharactersAtIndex.location);
          int v7 = CFStringGetCharacterAtIndex(v1, RangeOfComposedCharactersAtIndex.location + 1);
          if ((CharacterAtIndex & 0xFC00) != 0xD800 || (v7 & 0xFC00) != 0xDC00) {
            continue;
          }
          UChar32 v8 = v7 + (CharacterAtIndex << 10) - 56613888;
        }
        else
        {
          if (RangeOfComposedCharactersAtIndex.length != 1)
          {
            if (!RangeOfComposedCharactersAtIndex.length) {
              ++i;
            }
            continue;
          }
          UChar32 v8 = CFStringGetCharacterAtIndex(v1, RangeOfComposedCharactersAtIndex.location);
        }
        if (u_hasBinaryProperty(v8, UCHAR_IDEOGRAPHIC)) {
          return (const __CFString *)1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_2161E4464(char *a1, unsigned int a2)
{
  unsigned int v2 = 67173375;
  if (a2)
  {
    unsigned int v3 = 0;
    uint64_t v4 = a2;
    do
    {
      int v5 = *a1++;
      unsigned int v3 = (1025 * (v3 + v5)) ^ ((1025 * (v3 + v5)) >> 6);
      --v4;
    }
    while (v4);
    unsigned int v2 = 1025 * v3 + 67173375;
  }
  return 32769 * ((9 * (v2 ^ (v2 >> 6))) ^ ((9 * (v2 ^ (v2 >> 6))) >> 11));
}

CFPropertyListRef sub_2161E44AC(char *cStr)
{
  CFStringRef v1 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFPropertyListRef v2 = sub_2161E4520(v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void sub_2161E4508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFPropertyListRef sub_2161E4520(CFStringRef filePath)
{
  CFURLRef v1 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x263EFFB08], filePath, kCFURLPOSIXPathStyle, 0);
  CFPropertyListRef v2 = sub_2161E459C(v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void sub_2161E4584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFPropertyListRef sub_2161E459C(CFURLRef fileURL)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFPropertyListRef v2 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x263EFFB08], fileURL);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = v2;
  if (CFReadStreamOpen(v2))
  {
    CFPropertyListRef v4 = CFPropertyListCreateWithStream(v1, v3, 0, 0, 0, 0);
    CFReadStreamClose(v3);
  }
  else
  {
    CFPropertyListRef v4 = 0;
  }
  CFRelease(v3);
  return v4;
}

void sub_2161E4634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161E6198((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_2161E4650(const __CFString *a1, uint64_t a2)
{
  if (!a1) {
    return a2;
  }
  CFTypeID v3 = CFGetTypeID(a1);
  if (v3 == CFStringGetTypeID())
  {
    uint64_t v4 = 1;
    if (CFStringCompare(a1, @"true", 1uLL) == kCFCompareEqualTo) {
      return v4;
    }
    return CFStringCompare(a1, @"YES", 1uLL) == kCFCompareEqualTo;
  }
  else
  {
    if (v3 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)a1))
    {
      int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
      return valuePtr != 0;
    }
    if (v3 != CFBooleanGetTypeID()) {
      return 0;
    }
    return *MEMORY[0x263EFFB40] == (void)a1;
  }
}

CFURLRef sub_2161E4738(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFStringGetTypeID())
  {
    return CFURLCreateWithFileSystemPath(0, a1, kCFURLPOSIXPathStyle, 1u);
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFURLGetTypeID()) {
    return 0;
  }

  return CFURLCopyAbsoluteURL((CFURLRef)a1);
}

CFURLRef sub_2161E47D8(const __CFString *a1)
{
  if (!a1 || (CFURLRef result = sub_2161E4738(a1)) == 0)
  {
    CFTypeID v2 = (const void *)sub_2161E4814();
    return (CFURLRef)CFRetain(v2);
  }
  return result;
}

uint64_t sub_2161E4814()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EFA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EFA0))
  {
    qword_26797EF98 = (uint64_t)sub_2161E5BD0();
    __cxa_guard_release(&qword_26797EFA0);
  }
  return qword_26797EF98;
}

void sub_2161E4870(_Unwind_Exception *a1)
{
}

uint64_t sub_2161E4888()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D670, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D670))
  {
    qword_26797D668 = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, @"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
    __cxa_guard_release(&qword_26797D670);
  }
  return qword_26797D668;
}

void sub_2161E48F4(_Unwind_Exception *a1)
{
}

uint64_t sub_2161E490C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EF90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EF90))
  {
    qword_26797EF88 = (uint64_t)sub_2161E4980();
    __cxa_guard_release(&qword_26797EF90);
  }
  return qword_26797EF88;
}

void sub_2161E4968(_Unwind_Exception *a1)
{
}

__CFCharacterSet *sub_2161E4980()
{
  Mutable = CFCharacterSetCreateMutable(0);
  v3.location = 12288;
  v3.length = 64;
  CFCharacterSetAddCharactersInRange(Mutable, v3);
  CFCharacterSetAddCharactersInString(Mutable, @",，、。；;？?！!\\”\"“＂＂≪≫】【");
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  CFCharacterSetUnion(Mutable, Predefined);
  return Mutable;
}

uint64_t sub_2161E49DC(uint64_t result)
{
  if (result)
  {
    CFStringRef v1 = (const __CFString *)result;
    if (CEMStringContainsEmoji())
    {
      return 0;
    }
    else
    {
      CFIndex v2 = CFStringGetLength(v1) - 1;
      CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
      v5.location = v2;
      v5.length = 1;
      if (CFStringFindCharacterFromSet(v1, Predefined, v5, 2uLL, 0))
      {
        return 501;
      }
      else
      {
        CFCharacterSetRef v4 = (const __CFCharacterSet *)sub_2161E4888();
        v6.location = v2;
        v6.length = 1;
        if (CFStringFindCharacterFromSet(v1, v4, v6, 2uLL, 0)) {
          return 502;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2161E4A7C(uint64_t *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    uint64_t result = 0;
    *a2 = 0;
    *a3 = 0;
    return result;
  }
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_28;
  }
  v17 = a2;
  BOOL v8 = v6 != 3 || *(_DWORD *)v4 != *(_DWORD *)aIng_0 || *(unsigned __int16 *)(v4 + 4) != (unsigned __int16)aIng_0[2];
  uint64_t v10 = 0;
  char v11 = 0;
  char v12 = 0;
  int v13 = 0;
  uint64_t v14 = MEMORY[0x263EF8318];
  while (1)
  {
    uint64_t v15 = *(unsigned __int16 *)(v4 + 2 * v10);
    if (v15 == 32)
    {
      if ((v12 & 1) == 0) {
        char v11 = v8 & v13;
      }
      char v12 = 1;
      goto LABEL_20;
    }
    if (!sub_216333CBC(*(_WORD *)(v4 + 2 * v10))
      && (v15 > 0xFF || (*(_DWORD *)(v14 + 4 * v15 + 60) & 0x400) == 0))
    {
      break;
    }
LABEL_20:
    v13 |= (unsigned __int16)(v15 - 97) < 0x1Au;
    if (++v10 >= (unint64_t)a1[1])
    {
      int v16 = 1;
      goto LABEL_23;
    }
  }
  int v16 = 0;
LABEL_23:
  a2 = v17;
  LODWORD(v6) = v8 & v16 & v13;
  if (v12)
  {
    uint64_t result = 0;
    unsigned char *v17 = v11 & 1;
    *a3 = v6;
    return result;
  }
  if (*a3 && v6)
  {
    unsigned char *v17 = 0;
    uint64_t result = 1;
    *a3 = 1;
    return result;
  }
LABEL_28:
  uint64_t result = 0;
  *a3 = v6;
  *a2 = v6;
  return result;
}

uint64_t sub_2161E4BF4(char *__s1, uint64_t a2, char *__s2, uint64_t a4, int a5, int a6)
{
  uint64_t result = 0;
  if (a4 == a2) {
    a6 = 1;
  }
  if (a4 >= a2 && a6)
  {
    uint64_t v11 = (2 * a2);
    if (a5)
    {
      if ((int)v11 >= 2)
      {
        uint64_t v12 = 0;
        while (1)
        {
          int v13 = *(unsigned __int16 *)&__s2[v12];
          int v14 = *(unsigned __int16 *)&__s1[v12];
          if (v13 != v14)
          {
            if (v12 == v11) {
              return 0;
            }
            uint64_t result = (uint64_t)sub_216334794(v14, a5);
            if (!result) {
              return result;
            }
            uint64_t v15 = *(unsigned __int16 **)result;
            uint64_t v16 = *(void *)(result + 8) - *(void *)result;
            if (!v16) {
              return 0;
            }
            unint64_t v17 = v16 >> 1;
            if (v17 <= 1) {
              unint64_t v17 = 1;
            }
            while (1)
            {
              int v18 = *v15++;
              if (v13 == v18) {
                break;
              }
              if (!--v17) {
                return 0;
              }
            }
          }
          v12 += 2;
          uint64_t result = 1;
          if ((int)v11 - 1 <= (int)v12) {
            return result;
          }
        }
      }
      return 1;
    }
    else
    {
      return memcmp(__s1, __s2, (int)v11) == 0;
    }
  }
  return result;
}

CFStringRef sub_2161E4CEC(UInt8 *bytes, CFIndex numBytes)
{
  if (numBytes) {
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, numBytes, 0x8000100u, 0);
  }
  else {
    return &stru_26C6FB1C0;
  }
}

BOOL sub_2161E4D20(BOOL result)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (result)
  {
    CFURLRef v1 = (const __CFURL *)result;
    uint64_t result = sub_2161E1A54((const __CFURL *)result);
    if (result)
    {
      if (CFURLSetResourcePropertyForKey(v1, (CFStringRef)*MEMORY[0x263EFFFB0], (CFTypeRef)*MEMORY[0x263EFFB40], 0))
      {
        return 1;
      }
      else
      {
        CFIndex v2 = sub_2162769A4();
        if (CFURLGetFileSystemRepresentation(v1, 1u, buffer, 1024)) {
          CFRange v3 = (char *)buffer;
        }
        else {
          CFRange v3 = (char *)&unk_2163A8923;
        }
        sub_21610B834(__p, v3);
        if (v12 >= 0) {
          uint64_t v10 = __p;
        }
        else {
          LOBYTE(v10) = __p[0];
        }
        sub_21627707C((uint64_t)v2, "failed to set backup exclusion for item at URL: %s", v4, v5, v6, v7, v8, v9, (char)v10);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_2161E4E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFMutableArrayRef sub_2161E4E50(const __CFString *a1, unsigned int a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D680, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D680))
  {
    qword_26797D678 = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, @"12345");
    __cxa_guard_release(&qword_26797D680);
  }
  if (a1)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
    CFIndex Length = CFStringGetLength(a1);
    CFIndex v6 = 0;
    v7.length = Length;
    while (1)
    {
      v7.location = v6;
      if (!CFStringFindCharacterFromSet(a1, (CFCharacterSetRef)qword_26797D678, v7, 0, &v15) || v15.location == v6) {
        break;
      }
      v16.length = a2 - v6 + v15.location;
      v16.location = v6;
      uint64_t v8 = (__CFString *)CFStringCreateWithSubstring(0, a1, v16);
      if (!sub_2161E2498(v8)) {
        goto LABEL_13;
      }
      if (a2)
      {
        uint64_t v11 = [v8 zhuyinSyllableFromPinyinSyllable:v9, v10];
        if (!v11)
        {
LABEL_13:
          CFRelease(v8);
          break;
        }
        char v12 = (const void *)v11;
        int v13 = Mutable;
      }
      else
      {
        int v13 = Mutable;
        char v12 = v8;
      }
      CFArrayAppendValue(v13, v12);
      CFRelease(v8);
      CFIndex v6 = v15.length + v15.location;
      v7.length = Length - (v15.length + v15.location);
      if (Length <= v15.length + v15.location) {
        return Mutable;
      }
    }
    CFRelease(Mutable);
  }
  return 0;
}

void sub_2161E4FBC(_Unwind_Exception *a1)
{
}

__CFArray *sub_2161E4FD4(__int16 **a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, a1[1] - *a1, MEMORY[0x263EFFF70]);
  CFRange v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      __int16 v6 = *v3++;
      __int16 valuePtr = v6;
      CFNumberRef v7 = CFNumberCreate(v5, kCFNumberShortType, &valuePtr);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v7);
    }
    while (v3 != v4);
  }
  return Mutable;
}

void *sub_2161E5080@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t result = sub_21610FC8C(a3, a2);
  if (v3)
  {
    __int16 v6 = (_WORD *)*result;
    do
    {
      int v8 = *a1++;
      __int16 v7 = v8;
      __int16 v9 = v8 + 96;
      if ((v8 - 12353) < 0x54) {
        __int16 v7 = v9;
      }
      *v6++ = v7;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_2161E50D8(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D688))
  {
    __cxa_atexit((void (*)(void *))sub_2161E6334, 0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D688);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D690, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D690))
  {
    *(_OWORD *)v19 = xmmword_21637A998;
    *(_OWORD *)((char *)&v19[1] + 4) = *(long long *)((char *)&xmmword_21637A998 + 12);
    sub_2161E61D0(v19, 7);
    __cxa_atexit((void (*)(void *))sub_2161E5370, &qword_26797D6B0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D690);
  }
  sub_216184F68(a3, byte_2163CA662);
  if (a2)
  {
    __int16 v6 = &a1[a2];
    do
    {
      unsigned int v7 = *a1;
      if ((unsigned __int16)(v7 - 12353) > 0x53u)
      {
        if ((unsigned __int16)(v7 + 255) > 0x5Du)
        {
          uint64_t v12 = qword_26797D6B8;
          if (qword_26797D6B8)
          {
            int v13 = &qword_26797D6B8;
            uint64_t v14 = qword_26797D6B8;
            do
            {
              unsigned int v15 = *(unsigned __int16 *)(v14 + 26);
              BOOL v16 = v15 >= v7;
              if (v15 >= v7) {
                unint64_t v17 = (uint64_t *)v14;
              }
              else {
                unint64_t v17 = (uint64_t *)(v14 + 8);
              }
              if (v16) {
                int v13 = (uint64_t *)v14;
              }
              uint64_t v14 = *v17;
            }
            while (*v17);
            if (v13 != &qword_26797D6B8 && v7 >= *((unsigned __int16 *)v13 + 13))
            {
              while (1)
              {
                while (1)
                {
                  unsigned int v18 = *(unsigned __int16 *)(v12 + 26);
                  if (v18 <= v7) {
                    break;
                  }
                  uint64_t v12 = *(void *)v12;
                  if (!v12) {
                    goto LABEL_36;
                  }
                }
                if (v18 >= v7) {
                  break;
                }
                uint64_t v12 = *(void *)(v12 + 8);
                if (!v12) {
LABEL_36:
                }
                  sub_21613F340("map::at:  key not found");
              }
              LOWORD(v7) = *(_WORD *)(v12 + 28);
            }
          }
        }
        else
        {
          LOWORD(v7) = v7 + 288;
        }
        sub_2161845F8((uint64_t)a3, v7);
      }
      else
      {
        int v8 = &byte_26797BA78[24 * v7 - 296472];
        int v9 = v8[23];
        if (v9 >= 0) {
          uint64_t v10 = v8;
        }
        else {
          uint64_t v10 = *(char **)v8;
        }
        if (v9 >= 0) {
          unint64_t v11 = v8[23];
        }
        else {
          unint64_t v11 = *((void *)v8 + 1);
        }
        sub_216198220((uint64_t)a3, v10, v11);
      }
      ++a1;
    }
    while (a1 != v6);
  }
}

void sub_2161E5330(_Unwind_Exception *a1)
{
}

uint64_t sub_2161E5370(uint64_t a1)
{
  return a1;
}

uint64_t sub_2161E539C(const __CFString *a1)
{
  if (a1 && CFStringGetLength(a1)) {
    sub_2161E1FB8(a1);
  }
  return 0;
}

__CFString *sub_2161E5460(void *a1)
{
  if (*a1 == a1[1]) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  uint64_t v3 = a1[1] - *a1;
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = v3 >> 1;
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v5;
    }
    do
    {
      UniChar chars = 0;
      UniChar chars = *(_WORD *)(*a1 + 2 * v4) + 48;
      CFStringAppendCharacters(Mutable, &chars, 1);
      ++v4;
    }
    while (v6 != v4);
  }
  return Mutable;
}

unsigned char *sub_2161E550C(unsigned char *a1, char *a2, char *a3)
{
  unint64_t v5 = sub_216184F68(a1, a2);
  sub_216184F68(v5 + 24, a3);
  return a1;
}

void sub_2161E5544(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E5560(unsigned char *a1)
{
  CFIndex v2 = sub_216184F68(a1, (char *)L"ng");
  sub_216184F68(v2 + 24, byte_2163CA662);
  return a1;
}

void sub_2161E55A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E55BC(unsigned char *a1, char *a2, char *a3)
{
  unint64_t v5 = sub_216184F68(a1, a2);
  sub_216184F68(v5 + 24, a3);
  return a1;
}

void sub_2161E55F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E5610(unsigned char *a1)
{
  CFIndex v2 = sub_216184F68(a1, "a");
  sub_216184F68(v2 + 24, "a");
  return a1;
}

void sub_2161E5650(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E566C(unsigned char *a1)
{
  CFIndex v2 = sub_216184F68(a1, "a");
  sub_216184F68(v2 + 24, (char *)L"aa");
  return a1;
}

void sub_2161E56AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E56C8(unsigned char *a1, char *a2, char *a3)
{
  unint64_t v5 = sub_216184F68(a1, a2);
  sub_216184F68(v5 + 24, a3);
  return a1;
}

void sub_2161E5700(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E571C(unsigned char *a1, char *a2, char *a3)
{
  unint64_t v5 = sub_216184F68(a1, a2);
  sub_216184F68(v5 + 24, a3);
  return a1;
}

void sub_2161E5754(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E5770(unsigned char *a1, char *a2, char *a3)
{
  unint64_t v5 = sub_216184F68(a1, a2);
  sub_216184F68(v5 + 24, a3);
  return a1;
}

void sub_2161E57A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E57C4(unsigned char *a1)
{
  CFIndex v2 = sub_216184F68(a1, (char *)L"cheung");
  sub_216184F68(v2 + 24, "c");
  return a1;
}

void sub_2161E5804(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E5820(unsigned char *a1, char *a2, char *a3)
{
  unint64_t v5 = sub_216184F68(a1, a2);
  sub_216184F68(v5 + 24, a3);
  return a1;
}

void sub_2161E5858(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E5874(unsigned char *a1, char *a2, char *a3)
{
  unint64_t v5 = sub_216184F68(a1, a2);
  sub_216184F68(v5 + 24, a3);
  return a1;
}

void sub_2161E58AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2161E58C8(unsigned char *a1, char *a2, char *a3)
{
  unint64_t v5 = sub_216184F68(a1, a2);
  sub_216184F68(v5 + 24, a3);
  return a1;
}

void sub_2161E5900(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2161E591C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_2161984AC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  unint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_2161984AC(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)unint64_t v5 = v6;
  }
  return __dst;
}

void sub_2161E5998(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2161E59B4(void ***a1)
{
  uint64_t v1 = *a1;
  CFIndex v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_21619E14C(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_2161E5A38(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21610FD04(a1, a2);
    long long v6 = (_WORD *)a1[1];
    unsigned int v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2161E5AA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161E5ABC(uint64_t *a1, char **a2, char **a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_216129BFC(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned int v15 = v12;
  BOOL v16 = &v12[24 * v5];
  unint64_t v17 = v16;
  unsigned int v18 = &v12[24 * v11];
  sub_2161425AC(v16, *a2, *a3, *a3 - *a2);
  unint64_t v17 = v16 + 24;
  sub_21613FBD0(a1, &v15);
  uint64_t v13 = a1[1];
  sub_21613FD68((uint64_t)&v15);
  return v13;
}

void sub_2161E5BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613FD68((uint64_t)va);
  _Unwind_Resume(a1);
}

CFURLRef sub_2161E5BD0()
{
  CFURLRef v0 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  CFURLRef v1 = CFURLCreateCopyAppendingPathComponent(0, v0, @"Library/Keyboard", 1u);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

void sub_2161E5C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161E5C4C(unsigned __int16 *a1, uint64_t a2)
{
  xmmword_26797D6F0 = 0u;
  *(_OWORD *)&qword_26797D700 = 0u;
  dword_26797D710 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = &a1[16 * a2];
    while (1)
    {
      unint64_t v5 = *v3;
      unint64_t v6 = *((void *)&xmmword_26797D6F0 + 1);
      if (*((void *)&xmmword_26797D6F0 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D6F0 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v2 = *v3;
          if (*((void *)&xmmword_26797D6F0 + 1) <= v5) {
            unint64_t v2 = v5 % *((void *)&xmmword_26797D6F0 + 1);
          }
        }
        else
        {
          unint64_t v2 = (DWORD2(xmmword_26797D6F0) - 1) & v5;
        }
        uint64_t v8 = *(uint64_t ****)(xmmword_26797D6F0 + 8 * v2);
        if (v8)
        {
          for (CFIndex i = *v8; i; CFIndex i = (uint64_t **)*i)
          {
            unint64_t v10 = (unint64_t)i[1];
            if (v10 == v5)
            {
              if (*((unsigned __int16 *)i + 8) == v5) {
                goto LABEL_75;
              }
            }
            else
            {
              if (v7.u32[0] > 1uLL)
              {
                if (v10 >= *((void *)&xmmword_26797D6F0 + 1)) {
                  v10 %= *((void *)&xmmword_26797D6F0 + 1);
                }
              }
              else
              {
                v10 &= *((void *)&xmmword_26797D6F0 + 1) - 1;
              }
              if (v10 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v11 = operator new(0x30uLL);
      *unint64_t v11 = 0;
      v11[1] = v5;
      *((_WORD *)v11 + 8) = v5;
      v11[4] = 0;
      v11[5] = 0;
      v11[3] = 0;
      sub_216182F50(v11 + 3, *((const void **)v3 + 1), *((void *)v3 + 2), (uint64_t)(*((void *)v3 + 2) - *((void *)v3 + 1)) >> 1);
      float v12 = (float)(unint64_t)(qword_26797D708 + 1);
      if (!v6 || (float)(*(float *)&dword_26797D710 * (float)v6) < v12) {
        break;
      }
LABEL_65:
      uint64_t v28 = xmmword_26797D6F0;
      v29 = *(void **)(xmmword_26797D6F0 + 8 * v2);
      if (v29)
      {
        *unint64_t v11 = *v29;
      }
      else
      {
        *unint64_t v11 = qword_26797D700;
        qword_26797D700 = (uint64_t)v11;
        *(void *)(v28 + 8 * v2) = &qword_26797D700;
        if (!*v11) {
          goto LABEL_74;
        }
        unint64_t v30 = *(void *)(*v11 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v30 >= v6) {
            v30 %= v6;
          }
        }
        else
        {
          v30 &= v6 - 1;
        }
        v29 = (void *)(xmmword_26797D6F0 + 8 * v30);
      }
      void *v29 = v11;
LABEL_74:
      ++qword_26797D708;
LABEL_75:
      v3 += 16;
      if (v3 == v4) {
        return;
      }
    }
    BOOL v13 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v13 = 1;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v12 / *(float *)&dword_26797D710);
    if (v14 <= v15) {
      int8x8_t prime = (int8x8_t)v15;
    }
    else {
      int8x8_t prime = (int8x8_t)v14;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_26797D6F0 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26797D6F0 + 1)) {
      goto LABEL_31;
    }
    if (*(void *)&prime < *((void *)&xmmword_26797D6F0 + 1))
    {
      unint64_t v23 = vcvtps_u32_f32((float)(unint64_t)qword_26797D708 / *(float *)&dword_26797D710);
      if (*((void *)&xmmword_26797D6F0 + 1) < 3uLL
        || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D6F0 + 8)),
            v24.i16[0] = vaddlv_u8(v24),
            v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (*(void *)&prime <= v23) {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_26797D6F0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          unint64_t v17 = operator new(8 * *(void *)&prime);
          unsigned int v18 = (void *)xmmword_26797D6F0;
          *(void *)&xmmword_26797D6F0 = v17;
          if (v18) {
            operator delete(v18);
          }
          uint64_t v19 = 0;
          *((int8x8_t *)&xmmword_26797D6F0 + 1) = prime;
          do
            *(void *)(xmmword_26797D6F0 + 8 * v19++) = 0;
          while (*(void *)&prime != v19);
          uint64_t v20 = (void **)qword_26797D700;
          if (qword_26797D700)
          {
            unint64_t v21 = *(void *)(qword_26797D700 + 8);
            uint8x8_t v22 = (uint8x8_t)vcnt_s8(prime);
            v22.i16[0] = vaddlv_u8(v22);
            if (v22.u32[0] > 1uLL)
            {
              if (v21 >= *(void *)&prime) {
                v21 %= *(void *)&prime;
              }
            }
            else
            {
              v21 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797D6F0 + 8 * v21) = &qword_26797D700;
            for (j = *v20; j; unint64_t v21 = v27)
            {
              unint64_t v27 = j[1];
              if (v22.u32[0] > 1uLL)
              {
                if (v27 >= *(void *)&prime) {
                  v27 %= *(void *)&prime;
                }
              }
              else
              {
                v27 &= *(void *)&prime - 1;
              }
              if (v27 != v21)
              {
                if (!*(void *)(xmmword_26797D6F0 + 8 * v27))
                {
                  *(void *)(xmmword_26797D6F0 + 8 * v27) = v20;
                  goto LABEL_56;
                }
                *uint64_t v20 = (void *)*j;
                void *j = **(void **)(xmmword_26797D6F0 + 8 * v27);
                **(void **)(xmmword_26797D6F0 + 8 * v27) = j;
                j = v20;
              }
              unint64_t v27 = v21;
LABEL_56:
              uint64_t v20 = (void **)j;
              j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_60;
        }
        v31 = (void *)xmmword_26797D6F0;
        *(void *)&xmmword_26797D6F0 = 0;
        if (v31) {
          operator delete(v31);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_26797D6F0 + 1) = 0;
      }
    }
LABEL_60:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    goto LABEL_65;
  }
}

void sub_2161E6090(_Unwind_Exception *a1)
{
  sub_2161E60D0(1, v1);
  sub_2161E6130((uint64_t)&xmmword_26797D6F0);
  _Unwind_Resume(a1);
}

void sub_2161E60D0(char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_2161E6130(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void sub_2161E6198(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t *sub_2161E61D0(uint64_t *result, uint64_t a2)
{
  qword_26797D6C0 = 0;
  qword_26797D6B8 = 0;
  qword_26797D6B0 = (uint64_t)&qword_26797D6B8;
  if (a2)
  {
    unint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = (unsigned __int16 *)result + 2 * a2;
    unint64_t v5 = &qword_26797D6B8;
    while (1)
    {
      int v6 = *(_DWORD *)v2;
      if (v5 == &qword_26797D6B8) {
        break;
      }
      uint8x8_t v7 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          uint64_t v8 = v7;
          uint8x8_t v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        uint64_t v9 = &qword_26797D6B8;
        do
        {
          uint64_t v8 = (uint64_t *)v9[2];
          BOOL v10 = *v8 == (void)v9;
          uint64_t v9 = v8;
        }
        while (v10);
      }
      unsigned int v11 = *(unsigned __int16 *)v2;
      if (*((unsigned __int16 *)v8 + 13) < v11) {
        goto LABEL_11;
      }
      if (!v3) {
        goto LABEL_22;
      }
      uint64_t v13 = v3;
      while (1)
      {
        while (1)
        {
          uint64_t v8 = (uint64_t *)v13;
          unsigned int v14 = *(unsigned __int16 *)(v13 + 26);
          if (v14 <= v11) {
            break;
          }
          uint64_t v13 = *v8;
          float v12 = (uint64_t **)v8;
          if (!*v8) {
            goto LABEL_23;
          }
        }
        if (v14 >= v11) {
          break;
        }
        uint64_t v13 = v8[1];
        if (!v13)
        {
          float v12 = (uint64_t **)(v8 + 1);
          goto LABEL_23;
        }
      }
LABEL_24:
      unint64_t v2 = (uint64_t *)((char *)v2 + 4);
      if (v2 == (uint64_t *)v4) {
        return result;
      }
      unint64_t v5 = (uint64_t *)qword_26797D6B0;
      uint64_t v3 = qword_26797D6B8;
    }
    uint64_t v8 = &qword_26797D6B8;
LABEL_11:
    if (v3)
    {
      float v12 = (uint64_t **)(v8 + 1);
      if (v8[1]) {
        goto LABEL_24;
      }
    }
    else
    {
LABEL_22:
      float v12 = (uint64_t **)&qword_26797D6B8;
      uint64_t v8 = &qword_26797D6B8;
    }
LABEL_23:
    unint64_t v15 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v15 + 26) = v6;
    uint64_t result = sub_21612A650((uint64_t **)&qword_26797D6B0, (uint64_t)v8, v12, (uint64_t *)v15);
    goto LABEL_24;
  }
  return result;
}

void sub_2161E6318(_Unwind_Exception *a1)
{
  sub_21612A250((uint64_t)&qword_26797D6B0, v1);
  _Unwind_Resume(a1);
}

void sub_2161E6334()
{
  uint64_t v0 = 0x7E0u;
  do
  {
    if (byte_26797BA78[v0 - 1] < 0) {
      operator delete(*(void **)&byte_26797BA78[v0 - 24]);
    }
    v0 -= 24;
  }
  while (v0);
}

uint64_t *sub_2161E6378(uint64_t *a1)
{
  *a1 = 0;
  *a1 = utrans_openU();
  return a1;
}

void *sub_2161E640C(void *a1)
{
  if (*a1) {
    utrans_close();
  }
  return a1;
}

BOOL sub_2161E6440(void *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!*a1) {
    return 0;
  }
  if (*(char *)(a2 + 23) >= 0) {
    LODWORD(v3) = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  MEMORY[0x270FA5388]();
  unint64_t v5 = (char *)v10 - v4;
  sub_2161E6584(v6, (char *)v10 - v4, v7, 0);
  int v11 = v3;
  int v12 = 0;
  v10[3] = v3;
  utrans_transUChars();
  BOOL v8 = v12 < 1;
  if (v12 <= 0)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_WORD **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(_WORD *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
    sub_216198220(a2, v5, v11);
  }
  return v8;
}

unint64_t sub_2161E6584(uint64_t **a1, void *__dst, unint64_t a3, unint64_t a4)
{
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v9 = (unint64_t)a1[1];
    BOOL v5 = v9 >= a4;
    unint64_t v10 = v9 - a4;
    if (!v5) {
LABEL_17:
    }
      sub_2161C54A8();
    if (v10 >= a3) {
      unint64_t v7 = a3;
    }
    else {
      unint64_t v7 = v10;
    }
    a1 = (uint64_t **)*a1;
    if (v7) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
    BOOL v5 = v4 >= a4;
    unint64_t v6 = v4 - a4;
    if (!v5) {
      goto LABEL_17;
    }
    if (v6 >= a3) {
      unint64_t v7 = a3;
    }
    else {
      unint64_t v7 = v6;
    }
    if (v7) {
LABEL_8:
    }
      memmove(__dst, (char *)a1 + 2 * a4, 2 * v7);
  }
  return v7;
}

uint64_t *sub_2161E65FC(uint64_t *a1)
{
  *a1 = 0;
  *a1 = unum_open();
  return a1;
}

void *sub_2161E667C(void *a1)
{
  if (*a1) {
    unum_close();
  }
  return a1;
}

uint64_t sub_2161E66B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (result)
  {
    *a4 = unum_parseInt64();
    return 1;
  }
  return result;
}

uint64_t sub_2161E6700(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!*a1) {
    return 0;
  }
  int v6 = unum_formatInt64();
  uint64_t v7 = 1;
  if ((a4 & 1) == 0)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      **(_WORD **)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    else
    {
      *(_WORD *)a3 = 0;
      *(unsigned char *)(a3 + 23) = 0;
    }
  }
  sub_216198220(a3, __src, v6);
  return v7;
}

void sub_2161E67D8()
{
}

uint64_t sub_2161E67EC(uint64_t a1, CFDictionaryRef theDict)
{
  if (!theDict) {
    return 0;
  }
  uint64_t result = CFDictionaryContainsKey(theDict, off_26797C578);
  if (!result) {
    return result;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t result = CFDictionaryContainsKey(theDict, off_26797C528);
    if (!result) {
      return result;
    }
    BOOL v5 = (const void **)&off_26797C520;
  }
  else
  {
    uint64_t result = CFDictionaryContainsKey(theDict, off_26797C530);
    if (!result) {
      return result;
    }
    BOOL v5 = (const void **)&off_26797C538;
  }
  uint64_t result = CFDictionaryContainsKey(theDict, *v5);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_2161E6898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, BOOL *a6)
{
  CFDictionaryRef v11 = (const __CFDictionary *)LMLanguageModelCopyTokenAttributes();
  uint64_t v12 = sub_2161E67EC(a1, v11);
  if (v12)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v11, off_26797C578);
    unsigned int v14 = (const void **)&off_26797C530;
    if (*(unsigned char *)(a1 + 16)) {
      unsigned int v14 = (const void **)&off_26797C520;
    }
    CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(v11, *v14);
    BOOL v16 = (const void **)&off_26797C538;
    if (*(unsigned char *)(a1 + 16)) {
      BOOL v16 = (const void **)&off_26797C528;
    }
    CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(v11, *v16);
    *a6 = CEMStringContainsEmoji() != 0;
    sub_2161E212C(Value, (UniChar **)&v22);
    unsigned int v18 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v18;
      operator delete(v18);
    }
    *(_OWORD *)a3 = v22;
    *(void *)(a3 + 16) = v23;
    sub_2161E212C(v15, (UniChar **)&v22);
    uint64_t v19 = *(void **)a4;
    if (*(void *)a4)
    {
      *(void *)(a4 + 8) = v19;
      operator delete(v19);
    }
    *(_OWORD *)a4 = v22;
    *(void *)(a4 + 16) = v23;
    sub_2161E212C(v17, (UniChar **)&v22);
    uint64_t v20 = *(void **)a5;
    if (*(void *)a5)
    {
      *(void *)(a5 + 8) = v20;
      operator delete(v20);
    }
    *(_OWORD *)a5 = v22;
    *(void *)(a5 + 16) = v23;
    CFRelease(v11);
  }
  return v12;
}

uint64_t sub_2161E6A34()
{
  return LMLanguageModelEnumerateDynamicTokensWithBlock();
}

void sub_2161E6AB8(uint64_t a1)
{
  unint64_t v2 = (const void *)LMLanguageModelCopyTokenAttributes();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  CFRelease(v2);
}

void sub_2161E6B30(uint64_t a1, const __CFArray *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(unsigned char *)a1 = 0;
  uint64_t v4 = a1 + 8;
  sub_2161E839C(a1 + 8);
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    CFIndex v6 = Count;
    if (Count < 1)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      CFIndex v8 = 0;
      CFIndex v19 = Count;
      do
      {
        unint64_t v9 = (float *)*((void *)CFArrayGetValueAtIndex(a2, v8) + 3);
        if (!*(unsigned char *)(a1 + 1) || *(unsigned __int16 *)v9 - 123 >= 0xFFFFFFE6)
        {
          ++v7;
          if (v8)
          {
            uint64_t v20 = v7;
            for (CFIndex i = 0; i != v8; ++i)
            {
              CFDictionaryRef v11 = (float *)*((void *)CFArrayGetValueAtIndex(a2, i) + 3);
              int v12 = *(unsigned __int16 *)v11;
              if (*(unsigned char *)(a1 + 1)) {
                BOOL v13 = (v12 - 123) >= 0xFFFFFFE6;
              }
              else {
                BOOL v13 = 1;
              }
              if (v13)
              {
                double v14 = hypotf((float)(v11[1] + (float)(v11[3] * 0.5)) - (float)(v9[1] + (float)(v9[3] * 0.5)), (float)(v11[2] + (float)(v11[4] * 0.5)) - (float)(v9[2] + (float)(v9[4] * 0.5)));
                unsigned __int16 v22 = v12;
                *(void *)buf = &v22;
                CFStringRef v15 = sub_2161E8438(v4, &v22, (uint64_t)&unk_21636EABA, (_WORD **)buf);
                unsigned __int16 v21 = *(_WORD *)v9;
                *(void *)buf = &v21;
                *((double *)sub_2161E8704((uint64_t)(v15 + 3), &v21, (uint64_t)&unk_21636EABA, (_WORD **)buf) + 3) = v14;
                unsigned __int16 v22 = *(_WORD *)v9;
                *(void *)buf = &v22;
                BOOL v16 = sub_2161E8438(v4, &v22, (uint64_t)&unk_21636EABA, (_WORD **)buf);
                unsigned __int16 v21 = *(_WORD *)v11;
                *(void *)buf = &v21;
                *((double *)sub_2161E8704((uint64_t)(v16 + 3), &v21, (uint64_t)&unk_21636EABA, (_WORD **)buf) + 3) = v14;
              }
            }
            CFIndex v6 = v19;
            uint64_t v7 = v20;
          }
        }
        ++v8;
      }
      while (v8 != v6);
    }
    CFStringRef v17 = sub_2162D1CE4(4u);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&buf[4] = v6;
      __int16 v24 = 2048;
      uint64_t v25 = v7;
      _os_log_debug_impl(&dword_2160F5000, v17, OS_LOG_TYPE_DEBUG, "Input layout key count: %ld, valid layout key count: %ld", buf, 0x16u);
      if (!v7) {
        return;
      }
    }
    else if (!v7)
    {
      return;
    }
    CFTypeRef v18 = CFRetain(a2);
    sub_216195B94((const void **)(a1 + 48), v18);
    *(unsigned char *)a1 = 1;
  }
}

double sub_2161E6DD4(uint64_t a1, int a2, int a3)
{
  unsigned __int16 v8 = a2;
  unsigned __int16 v7 = a3;
  double v3 = 0.0;
  if (a2 != a3)
  {
    uint64_t v4 = sub_21618FCC0((void *)(a1 + 8), &v8);
    double v3 = 150.0;
    if (v4)
    {
      BOOL v5 = sub_21618FCC0(v4 + 3, &v7);
      if (v5) {
        return *((double *)v5 + 3);
      }
    }
  }
  return v3;
}

unint64_t sub_2161E6E3C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  CFArrayRef v5 = *(const __CFArray **)(a1 + 48);
  if (!v5 || !*(unsigned char *)a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v5);
  double v11 = *(double *)(a2 + 32);
  double v12 = *(double *)(a2 + 40);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  if (Count < 1)
  {
    unint64_t v30 = 0;
    v29 = 0;
  }
  else
  {
    CFIndex v13 = Count;
    for (CFIndex i = 0; i != v13; ++i)
    {
      CFStringRef v15 = (float *)*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), i) + 3);
      int v16 = *(unsigned __int16 *)v15;
      if ((v16 - 123) >= 0xFFFFFFE6)
      {
        v10.n128_f64[0] = (float)(v15[1] + (float)(v15[3] * 0.5)) - v11;
        double v17 = (float)(v15[2] + (float)(v15[4] * 0.5)) - v12;
        double v18 = v17 * v17 + v10.n128_f64[0] * v10.n128_f64[0];
        if (v38 >= v39)
        {
          uint64_t v20 = ((char *)v38 - (char *)v37) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_21610CB04();
          }
          uint64_t v22 = (char *)v39 - (char *)v37;
          if (((char *)v39 - (char *)v37) >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          __int16 v24 = (char *)sub_21612AA90((uint64_t)&v39, v23);
          uint64_t v26 = (double *)&v24[16 * v20];
          *(_WORD *)uint64_t v26 = v16;
          v26[1] = v18;
          unint64_t v27 = (__n128 *)v38;
          uint64_t v28 = (__n128 *)v26;
          if (v38 != (double *)v37)
          {
            do
            {
              __n128 v10 = v27[-1];
              v28[-1] = v10;
              --v28;
              --v27;
            }
            while (v27 != v37);
            unint64_t v27 = v37;
          }
          CFIndex v19 = v26 + 2;
          v37 = v28;
          v39 = (double *)&v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(_WORD *)v38 = v16;
          v38[1] = v18;
          CFIndex v19 = v38 + 2;
        }
        v38 = v19;
      }
    }
    v29 = (__int16 *)v37;
    unint64_t v30 = (__int16 *)v38;
  }
  unint64_t v31 = 126 - 2 * __clz(((char *)v30 - (char *)v29) >> 4);
  v40 = &unk_26C6C9F60;
  if (v30 == v29) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  sub_2161E70C8(v29, v30, (uint64_t)&v40, v32, 1, v10);
  if (((char *)v38 - (char *)v37) >> 4 < a4) {
    a4 = ((char *)v38 - (char *)v37) >> 4;
  }
  if (a4)
  {
    v33 = v37;
    unint64_t v34 = a4;
    do
    {
      unsigned __int8 v35 = v33->n128_u8[0];
      ++v33;
      *a3++ = v35;
      --v34;
    }
    while (v34);
    goto LABEL_34;
  }
  if (v37) {
LABEL_34:
  }
    operator delete(v37);
  return a4;
}

void sub_2161E708C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2161E70B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 8) < *(double *)(a3 + 8);
}

void sub_2161E70C8(__int16 *a1, __int16 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
uint64_t sub_2161E74C0(uint64_t result, long long *a2, uint64_t a3)
{
  if ((long long *)result != a2)
  {
    uint64_t v4 = result;
    CFArrayRef v5 = (long long *)(result + 16);
    if ((long long *)(result + 16) != a2)
    {
      uint64_t v7 = 0;
      do
      {
        unsigned __int16 v8 = v5;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
        if (result)
        {
          long long v12 = *v8;
          uint64_t v9 = v7;
          while (1)
          {
            uint64_t v10 = v4 + v9;
            *(_WORD *)(v10 + 16) = *(_WORD *)(v4 + v9);
            *(void *)(v10 + 24) = *(void *)(v4 + v9 + 8);
            if (!v9) {
              break;
            }
            v9 -= 16;
            uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
            if ((result & 1) == 0)
            {
              uint64_t v11 = v4 + v9 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v11 = v4;
LABEL_10:
          *(_WORD *)uint64_t v11 = v12;
          *(void *)(v11 + 8) = *((void *)&v12 + 1);
        }
        CFArrayRef v5 = v8 + 1;
        v7 += 16;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_2161E75B4(uint64_t result, long long *a2, uint64_t a3)
{
  if ((long long *)result != a2)
  {
    uint64_t v4 = (long long *)(result + 16);
    if ((long long *)(result + 16) != a2)
    {
      uint64_t v6 = result - 16;
      do
      {
        uint64_t v7 = v4;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
        if (result)
        {
          long long v9 = *v7;
          uint64_t v8 = v6;
          do
          {
            *(_WORD *)(v8 + 32) = *(_WORD *)(v8 + 16);
            *(void *)(v8 + 40) = *(void *)(v8 + 24);
            uint64_t result = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
            v8 -= 16;
          }
          while ((result & 1) != 0);
          *(_WORD *)(v8 + 32) = v9;
          *(void *)(v8 + 40) = *((void *)&v9 + 1);
        }
        uint64_t v4 = v7 + 1;
        v6 += 16;
      }
      while (v7 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_2161E768C(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t a4)
{
  char v8 = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  if (v8)
  {
    __int16 v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      uint64_t v11 = (uint64_t *)(a3 + 4);
      uint64_t result = 1;
      long long v12 = (uint64_t *)(a1 + 4);
LABEL_9:
      uint64_t v14 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    uint64_t v17 = *((void *)a1 + 1);
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v17;
    if ((*(unsigned int (**)(void))(*(void *)a4 + 16))())
    {
      __int16 v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v11 = (uint64_t *)(a3 + 4);
      uint64_t result = 2;
      long long v12 = (uint64_t *)(a2 + 4);
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    __int16 v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    uint64_t v14 = (uint64_t *)(a2 + 4);
    uint64_t v15 = *((void *)a2 + 1);
    *((void *)a2 + 1) = *((void *)a3 + 1);
    *((void *)a3 + 1) = v15;
    if ((*(unsigned int (**)(void))(*(void *)a4 + 16))())
    {
      __int16 v16 = *a1;
      *a1 = *a2;
      long long v12 = (uint64_t *)(a1 + 4);
      *a2 = v16;
      uint64_t result = 2;
LABEL_10:
      uint64_t v19 = *v12;
      *long long v12 = *v14;
      *uint64_t v14 = v19;
      return result;
    }
  }
  return 1;
}

__int16 *sub_2161E77EC(__int16 *a1, unint64_t a2, uint64_t a3)
{
  long long v12 = *(_OWORD *)a1;
  if ((*(uint64_t (**)(void))(*(void *)a3 + 16))())
  {
    uint64_t v6 = a1;
    do
      v6 += 8;
    while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 8;
    do
    {
      uint64_t v6 = v7;
      if ((unint64_t)v7 >= a2) {
        break;
      }
      int v8 = (*(uint64_t (**)(void))(*(void *)a3 + 16))();
      uint64_t v7 = v6 + 8;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < a2)
  {
    do
      a2 -= 16;
    while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
  }
  while ((unint64_t)v6 < a2)
  {
    __int16 v9 = *v6;
    *uint64_t v6 = *(_WORD *)a2;
    *(_WORD *)a2 = v9;
    uint64_t v10 = *((void *)v6 + 1);
    *((void *)v6 + 1) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v10;
    do
      v6 += 8;
    while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
    do
      a2 -= 16;
    while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
  }
  if (v6 - 8 != a1)
  {
    *a1 = *(v6 - 8);
    *((void *)a1 + 1) = *((void *)v6 - 1);
  }
  *(v6 - 8) = v12;
  *((void *)v6 - 1) = *((void *)&v12 + 1);
  return v6;
}

double sub_2161E7964(__int16 *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v13 = *(_OWORD *)a1;
  do
    v6 += 8;
  while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
  unint64_t v7 = (unint64_t)&a1[v6];
  if (v6 == 8)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 16;
    }
    while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
  }
  int v8 = (long long *)&a1[v6];
  if (v7 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      __int16 v10 = *(_WORD *)v8;
      *(_WORD *)int v8 = *(_WORD *)v9;
      *(_WORD *)unint64_t v9 = v10;
      uint64_t v11 = *((void *)v8 + 1);
      *((void *)v8 + 1) = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = v11;
      do
        ++v8;
      while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      do
        v9 -= 16;
      while (!(*(unsigned int (**)(void))(*(void *)a3 + 16))());
    }
    while ((unint64_t)v8 < v9);
  }
  if (v8 - 1 != (long long *)a1)
  {
    *a1 = *((_WORD *)v8 - 8);
    *((void *)a1 + 1) = *((void *)v8 - 1);
  }
  *((_WORD *)v8 - 8) = v13;
  double result = *((double *)&v13 + 1);
  *((void *)v8 - 1) = *((void *)&v13 + 1);
  return result;
}

BOOL sub_2161E7AD4(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
      {
        __int16 v8 = *(_WORD *)a1;
        *(_WORD *)a1 = *((_WORD *)a2 - 8);
        *((_WORD *)a2 - 8) = v8;
        uint64_t v9 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_2161E768C((__int16 *)a1, (__int16 *)(a1 + 16), (__int16 *)a2 - 8, a3);
      return 1;
    case 4:
      sub_2161E7CE4(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 1), a3);
      return 1;
    case 5:
      sub_2161E7DE0(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 1), a3);
      return 1;
    default:
      sub_2161E768C((__int16 *)a1, (__int16 *)(a1 + 16), (__int16 *)(a1 + 32), a3);
      __int16 v10 = (long long *)(a1 + 48);
      if ((long long *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
    {
      long long v16 = *v10;
      uint64_t v13 = v11;
      while (1)
      {
        uint64_t v14 = a1 + v13;
        *(_WORD *)(v14 + 48) = *(_WORD *)(a1 + v13 + 32);
        *(void *)(v14 + 56) = *(void *)(a1 + v13 + 40);
        if (v13 == -32) {
          break;
        }
        v13 -= 16;
        if (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) == 0)
        {
          uint64_t v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      *(_WORD *)uint64_t v15 = v16;
      *(void *)(v15 + 8) = *((void *)&v16 + 1);
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    v11 += 16;
    if (++v10 == a2) {
      return 1;
    }
  }
}

double sub_2161E7CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2161E768C((__int16 *)a1, (__int16 *)a2, (__int16 *)a3, a5);
  if ((*(unsigned int (**)(void))(*(void *)a5 + 16))())
  {
    __int16 v11 = *(_WORD *)a3;
    *(_WORD *)a3 = *(_WORD *)a4;
    *(_WORD *)a4 = v11;
    uint64_t v12 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v12;
    if ((*(unsigned int (**)(void))(*(void *)a5 + 16))())
    {
      __int16 v13 = *(_WORD *)a2;
      *(_WORD *)a2 = *(_WORD *)a3;
      *(_WORD *)a3 = v13;
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v14;
      if ((*(unsigned int (**)(void))(*(void *)a5 + 16))())
      {
        __int16 v15 = *(_WORD *)a1;
        *(_WORD *)a1 = *(_WORD *)a2;
        *(_WORD *)a2 = v15;
        double result = *(double *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(double *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

double sub_2161E7DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v12 = sub_2161E7CE4(a1, a2, a3, a4, a6);
  if ((*(unsigned int (**)(double))(*(void *)a6 + 16))(v12))
  {
    __int16 v14 = *(_WORD *)a4;
    *(_WORD *)a4 = *(_WORD *)a5;
    *(_WORD *)a5 = v14;
    uint64_t v15 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v15;
    if ((*(unsigned int (**)(void))(*(void *)a6 + 16))())
    {
      __int16 v16 = *(_WORD *)a3;
      *(_WORD *)a3 = *(_WORD *)a4;
      *(_WORD *)a4 = v16;
      uint64_t v17 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v17;
      if ((*(unsigned int (**)(void))(*(void *)a6 + 16))())
      {
        __int16 v18 = *(_WORD *)a2;
        *(_WORD *)a2 = *(_WORD *)a3;
        *(_WORD *)a3 = v18;
        uint64_t v19 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v19;
        if ((*(unsigned int (**)(void))(*(void *)a6 + 16))())
        {
          __int16 v20 = *(_WORD *)a1;
          *(_WORD *)a1 = *(_WORD *)a2;
          *(_WORD *)a2 = v20;
          double result = *(double *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(double *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

__int16 *sub_2161E7F1C(uint64_t a1, __int16 *a2, __int16 *a3, uint64_t a4, __n128 a5)
{
  if ((__int16 *)a1 != a2)
  {
    uint64_t v9 = (uint64_t)a2 - a1;
    uint64_t v10 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      __int16 v13 = (long long *)(a1 + 16 * v11);
      do
      {
        a5.n128_f64[0] = sub_2161E80A8(a1, a4, v10, v13--);
        --v12;
      }
      while (v12);
    }
    __int16 v14 = a2;
    if (a2 != a3)
    {
      uint64_t v15 = a2;
      do
      {
        if ((*(unsigned int (**)(__n128))(*(void *)a4 + 16))(a5))
        {
          __int16 v16 = *v15;
          *uint64_t v15 = *(_WORD *)a1;
          *(_WORD *)a1 = v16;
          uint64_t v17 = *((void *)v15 + 1);
          *((void *)v15 + 1) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v17;
          a5.n128_f64[0] = sub_2161E80A8(a1, a4, v10, (long long *)a1);
        }
        v15 += 8;
      }
      while (v15 != a3);
      __int16 v14 = a3;
    }
    if (v9 >= 17)
    {
      uint64_t v18 = (unint64_t)v9 >> 4;
      uint64_t v19 = a2 - 8;
      do
      {
        __int16 v20 = *(_WORD *)a1;
        uint64_t v21 = *(void *)(a1 + 8);
        uint64_t v22 = sub_2161E8210(a1, a4, v18);
        if (v19 == (__int16 *)v22)
        {
          *(_WORD *)uint64_t v22 = v20;
          *(void *)(v22 + 8) = v21;
        }
        else
        {
          *(_WORD *)uint64_t v22 = *v19;
          *(void *)(v22 + 8) = *((void *)v19 + 1);
          __int16 *v19 = v20;
          *((void *)v19 + 1) = v21;
          sub_2161E82D0(a1, v22 + 16, a4, (v22 + 16 - a1) >> 4);
        }
        v19 -= 8;
      }
      while (v18-- > 2);
    }
    return v14;
  }
  return a3;
}

double sub_2161E80A8(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    CFArrayRef v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v10 = ((uint64_t)a4 - a1) >> 3;
      uint64_t v11 = v10 + 1;
      unint64_t v12 = (long long *)(a1 + 16 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*(unsigned int (**)(void))(*(void *)a2 + 16))())
      {
        ++v12;
        uint64_t v11 = v13;
      }
      if (((*(uint64_t (**)(void))(*(void *)a2 + 16))() & 1) == 0)
      {
        long long v18 = *v5;
        do
        {
          uint64_t v15 = v12;
          *(_WORD *)CFArrayRef v5 = *(_WORD *)v12;
          *((void *)v5 + 1) = *((void *)v12 + 1);
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          unint64_t v12 = (long long *)(a1 + 16 * v16);
          uint64_t v17 = 2 * v11 + 2;
          if (v17 < a3)
          {
            if ((*(unsigned int (**)(void))(*(void *)a2 + 16))())
            {
              ++v12;
              uint64_t v16 = v17;
            }
          }
          CFArrayRef v5 = v15;
          uint64_t v11 = v16;
        }
        while (!(*(unsigned int (**)(void))(*(void *)a2 + 16))());
        *(_WORD *)uint64_t v15 = v18;
        double result = *((double *)&v18 + 1);
        *((void *)v15 + 1) = *((void *)&v18 + 1);
      }
    }
  }
  return result;
}

uint64_t sub_2161E8210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*(unsigned int (**)(void))(*(void *)a2 + 16))())
    {
      v9 += 16;
      uint64_t v10 = v11;
    }
    *(_WORD *)a1 = *(_WORD *)v9;
    *(void *)(a1 + 8) = *(void *)(v9 + 8);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double sub_2161E82D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (long long *)(a1 + 16 * (v4 >> 1));
    uint64_t v9 = (long long *)(a2 - 16);
    if ((*(unsigned int (**)(void))(*(void *)a3 + 16))())
    {
      long long v12 = *v9;
      do
      {
        uint64_t v11 = v8;
        *(_WORD *)uint64_t v9 = *(_WORD *)v8;
        *((void *)v9 + 1) = *((void *)v8 + 1);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (long long *)(a1 + 16 * v7);
        uint64_t v9 = v11;
      }
      while (((*(uint64_t (**)(void))(*(void *)a3 + 16))() & 1) != 0);
      *(_WORD *)uint64_t v11 = v12;
      double result = *((double *)&v12 + 1);
      *((void *)v11 + 1) = *((void *)&v12 + 1);
    }
  }
  return result;
}

void sub_2161E839C(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E83F4(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_2161E83F4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      double v3 = (void *)*v2;
      sub_216144C28((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t **sub_2161E8438(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v12 = (unint64_t)i[1];
        if (v12 == v7)
        {
          if (*((unsigned __int16 *)i + 8) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  __int16 v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)__int16 v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_WORD *)v14 + 8) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_2161297B4(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *uint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t **)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_2161E86AC((uint64_t)v24, 0);
  return i;
}

void sub_2161E8694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161E86AC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161E86AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216144C28((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

void *sub_2161E8704(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_2161297B4(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *size_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_2161E8918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2161E892C(_DWORD *a1, const __CFString *a2, uint64_t a3, int a4, int a5)
{
  *a1 = a4;
  a1[1] = a5;
  sub_2161E236C(a2);
}

void sub_2161E8B88(_Unwind_Exception *a1)
{
  sub_216144C28(v6 - 96);
  sub_216144C28(v2);
  if (v1[79] < 0) {
    operator delete(*v5);
  }
  if (v1[55] < 0) {
    operator delete(*v4);
  }
  if (v1[31] < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void sub_2161E8BE0(uint64_t a1, uint64_t *a2)
{
  sub_2161DEDD0((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  CFArrayRef v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

void sub_2161E8C84(int a1, CFStringRef theString)
{
  if (theString)
  {
    CFStringGetLength(theString);
    operator new[]();
  }
  operator new();
}

void sub_2161E8D90(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C404E34198CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2161E8DE8(uint64_t a1, uint64_t *a2, long long *a3, const __CFString *a4, const __CFString *a5, int a6, char a7)
{
  float v14 = (void *)sub_2162A7544(a1, a2 + 1);
  uint64_t v15 = *a2;
  *float v14 = *a2;
  *(void *)(a1 + *(void *)(v15 - 32)) = a2[5];
  long long v16 = *a3;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 20) = v16;
  *(void *)(a1 + 40) = 0;
  unint64_t v17 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (a4) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a4);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 48) = Copy;
  if (a5) {
    CFStringRef v19 = CFStringCreateCopy(*v17, a5);
  }
  else {
    CFStringRef v19 = 0;
  }
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = a6;
  *(_DWORD *)(a1 + 76) = a6;
  *(void *)(a1 + 80) = 0xFFEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 89) = a7;
  size_t v20 = (uint64_t *)(a1 + 96);
  *(_WORD *)(a1 + 90) = 1;
  sub_2161E94D8((void *)(a1 + 96), 1uLL);
  uint64_t v21 = *(void *)(a1 + 96);
  *(void *)(v21 + 32) = 0;
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  uint64_t v22 = *(void *)(a1 + 96);
  *(unsigned char *)(v22 + 38) = 1;
  if (a4)
  {
    __int16 Length = CFStringGetLength(a4);
    uint64_t v22 = *v20;
  }
  else
  {
    __int16 Length = 0;
  }
  *(_WORD *)(v22 + 24) = Length;
  if (a5)
  {
    __int16 v24 = CFStringGetLength(a5);
    uint64_t v22 = *v20;
  }
  else
  {
    __int16 v24 = 0;
  }
  *(_WORD *)(v22 + 26) = v24;
  *(unsigned char *)(v22 + 37) |= 1u;
  *(_DWORD *)uint64_t v22 = 0;
  return a1;
}

void sub_2161E8FA8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 104) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161E8FC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_2162A7650((uint64_t *)a1, a2 + 1, a3);
  uint64_t v7 = *a2;
  *uint64_t v6 = *a2;
  *(void *)(a1 + *(void *)(v7 - 32)) = a2[5];
  long long v8 = *(_OWORD *)(a3 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a3 + 36);
  *(_OWORD *)(a1 + 20) = v8;
  CFStringRef v9 = *(const __CFString **)(a3 + 40);
  uint64_t v10 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (v9) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v9);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 40) = Copy;
  CFStringRef v12 = *(const __CFString **)(a3 + 48);
  if (v12) {
    CFStringRef v13 = CFStringCreateCopy(*v10, v12);
  }
  else {
    CFStringRef v13 = 0;
  }
  *(void *)(a1 + 48) = v13;
  CFStringRef v14 = *(const __CFString **)(a3 + 56);
  if (v14) {
    CFStringRef v15 = CFStringCreateCopy(*v10, v14);
  }
  else {
    CFStringRef v15 = 0;
  }
  *(void *)(a1 + 56) = v15;
  CFStringRef v16 = *(const __CFString **)(a3 + 64);
  if (v16) {
    CFStringRef v17 = CFStringCreateCopy(*v10, v16);
  }
  else {
    CFStringRef v17 = 0;
  }
  *(void *)(a1 + 64) = v17;
  uint64_t v18 = *(void *)(a3 + 80);
  *(void *)(a1 + 72) = *(void *)(a3 + 72);
  *(void *)(a1 + 80) = v18;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a3 + 88);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  sub_21618B3D8((void *)(a1 + 96), *(const void **)(a3 + 96), *(void *)(a3 + 104), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 104) - *(void *)(a3 + 96)) >> 3));
  return a1;
}

uint64_t *sub_2161E9144(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v3 - 32)) = a2[5];
  uint64_t v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  CFArrayRef v5 = (const void *)a1[7];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[8];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[5];
  if (v7) {
    CFRelease(v7);
  }
  long long v8 = (void *)a1[12];
  a1[13] = (uint64_t)v8;
  if (v8) {
    operator delete(v8);
  }
  return a1;
}

CFStringRef sub_2161E9238(void *a1, const __CFString *a2)
{
  CFStringRef result = (CFStringRef)(*(uint64_t (**)(void *))(*a1 + 544))(a1);
  if (a2 && result)
  {
    CFArrayRef v5 = (const void *)a1[5];
    if (v5) {
      CFRelease(v5);
    }
    CFStringRef result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
    a1[5] = result;
  }
  return result;
}

CFMutableStringRef sub_2161E92B4(uint64_t a1)
{
  CFMutableStringRef Mutable = *(CFMutableStringRef *)(a1 + 64);
  if (!Mutable)
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    uint64_t v4 = *(void *)(a1 + 96);
    uint64_t v3 = *(void *)(a1 + 104);
    __int16 v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 416))(a1);
    if ((v5 & 0x4000) != 0 && v3 == v4)
    {
      *(void *)(a1 + 64) = Mutable;
    }
    else
    {
      if ((v5 & 0x4000) != 0) {
        CFStringRef Copy = &stru_26C6FB1C0;
      }
      else {
        CFStringRef Copy = CFStringCreateCopy(0, *(CFStringRef *)(a1 + 56));
      }
      *(void *)(a1 + 64) = Copy;
      CFRelease(Mutable);
      return *(CFMutableStringRef *)(a1 + 64);
    }
  }
  return Mutable;
}

uint64_t sub_2161E936C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 96);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 104) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v2 + 40 * a2 + 24);
  }
}

uint64_t sub_2161E93A8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 96);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 104) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v2 + 40 * a2 + 26);
  }
}

CFStringRef sub_2161E93E4(void *a1)
{
  uint64_t v1 = (_DWORD *)a1[12];
  if (v1 == (_DWORD *)a1[13]) {
    return 0;
  }
  CFStringRef result = (const __CFString *)a1[6];
  if (result)
  {
    if (*v1 == 7) {
      return (const __CFString *)1;
    }
    else {
      return (const __CFString *)sub_2161A1E44(result);
    }
  }
  return result;
}

BOOL sub_2161E9418(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  uint64_t v2 = *(void *)(a1 + 104) - v1;
  if (!v2) {
    return 1;
  }
  unint64_t v3 = v2 / 40;
  if (v3 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v3;
  }
  if (!*(_DWORD *)(v1 + 12)) {
    return 0;
  }
  __int16 v5 = (int *)(v1 + 52);
  uint64_t v6 = 1;
  do
  {
    unint64_t v7 = v6;
    if (v4 == v6) {
      break;
    }
    int v8 = *v5;
    v5 += 10;
    ++v6;
  }
  while (v8);
  return v3 <= v7;
}

CFStringRef sub_2161E9484(uint64_t a1)
{
  UniChar chars = CFStringGetLength(*(CFStringRef *)(a1 + 56)) + 48;
  return CFStringCreateWithCharacters(0, &chars, 1);
}

CFStringRef sub_2161E94C0()
{
  return CFStringCreateCopy(0, &stru_26C6FB1C0);
}

uint64_t sub_2161E94D0(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void *sub_2161E94D8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21618B454(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2161E9558(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *sub_2161E9574(void *a1, const char *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v70 = [a1 a2:a3];
  unint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v70 + 576))();
  if (v3)
  {
    uint64_t v4 = v3;
    if (*v3 != v3[1])
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
      size_t v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v70 + 560))(v70);
      uint64_t v6 = *v5;
      v73 = v5;
      uint64_t v7 = v5[1] - *v5;
      if (!v7) {
        return Mutable;
      }
      v69 = v4;
      CFIndex v8 = 0;
      unint64_t v9 = v7 >> 2;
      uint64_t v74 = 0;
      uint64_t v10 = Mutable;
      do
      {
        if (*(_DWORD *)(v6 + 4 * v8) == 1)
        {
          unint64_t v11 = v8 + 1;
          while (1)
          {
            unint64_t v12 = v11;
            if (v11 >= v9) {
              break;
            }
            int v13 = *(_DWORD *)(v6 + 4 * v11++);
            if (v13 != 1)
            {
              unint64_t v14 = v12 - 1;
              goto LABEL_13;
            }
          }
          unint64_t v14 = v9 - 1;
LABEL_13:
          CFStringRef v16 = (CFIndex *)(*v69 + 16 * v74);
          CFIndex v17 = v16[1];
          CFIndex v75 = v14;
          if (v14 == v8)
          {
            uint64_t v18 = (__int16 *)operator new(2uLL);
            *uint64_t v18 = v17;
            v84 = v18 + 1;
            v85 = v18 + 1;
            __int16 valuePtr = v18;
            CFStringRef v19 = sub_2161E4FD4(&valuePtr);
            operator delete(v18);
            uint64_t v10 = Mutable;
            CFIndex v8 = v75;
          }
          else
          {
            CFIndex v20 = *v16;
            CFStringRef v21 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v70 + 56))(v70);
            v88.location = v20;
            v88.length = v17;
            CFStringRef v22 = CFStringCreateWithSubstring(0, v21, v88);
            (*(void (**)(__int16 **__return_ptr, uint64_t, void))(*(void *)v70 + 432))(&valuePtr, v70, 0);
            char v23 = sub_2161E4FD4(&valuePtr);
            v78 = v23;
            if (valuePtr)
            {
              v84 = valuePtr;
              operator delete(valuePtr);
            }
            CFStringRef v24 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v70 + 232))(v70);
            if (v8 < 1)
            {
              CFIndex v25 = 0;
            }
            else
            {
              CFIndex v25 = 0;
              for (CFIndex i = 0; i != v8; ++i)
              {
                CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v23, i);
                LOWORD(valuePtr) = 0;
                CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr);
                v25 += (unsigned __int16)valuePtr;
              }
            }
            CFIndex v28 = 0;
            if (v75 >= v8)
            {
              if (v9 >= v12) {
                unint64_t v9 = v12;
              }
              CFIndex v29 = v8;
              do
              {
                CFNumberRef v30 = (const __CFNumber *)CFArrayGetValueAtIndex(v23, v29);
                LOWORD(valuePtr) = 0;
                CFNumberGetValue(v30, kCFNumberShortType, &valuePtr);
                v28 += (unsigned __int16)valuePtr;
                ++v29;
              }
              while (v9 != v29);
            }
            v89.location = v25;
            v89.length = v28;
            CFStringRef v31 = CFStringCreateWithSubstring(0, v24, v89);
            CFStringRef v77 = v31;
            CFStringRef v19 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
            cf = v19;
            v90.length = v75 - v8 + 1;
            v90.location = v8;
            CFArrayAppendArray(v19, v23, v90);
            CFIndex v8 = v75;
            uint64_t v10 = Mutable;
            if (CFStringCompare(v22, v31, 0))
            {
              MutableCFStringRef Copy = CFStringCreateMutableCopy(0, 0, v31);
              CFIndex v33 = 0;
              CFIndex v34 = 0;
              v85 = 0;
              v86 = MutableCopy;
              __int16 valuePtr = 0;
              v84 = 0;
              while (v33 < CFArrayGetCount(v19))
              {
                CFNumberRef v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, v33);
                LOWORD(v82.__r_.__value_.__l.__data_) = 0;
                CFNumberGetValue(v35, kCFNumberShortType, &v82);
                CFIndex v36 = v34 + LOWORD(v82.__r_.__value_.__l.__data_);
                CFStringInsert(MutableCopy, v36, @"  ");
                CFIndex v37 = CFStringGetLength(@"  ") + v36;
                CFIndex v38 = v37 - v34;
                v39 = v84;
                if (v84 >= v85)
                {
                  v41 = valuePtr;
                  uint64_t v42 = ((char *)v84 - (char *)valuePtr) >> 4;
                  unint64_t v43 = v42 + 1;
                  if ((unint64_t)(v42 + 1) >> 60) {
                    sub_21610CB04();
                  }
                  uint64_t v44 = (char *)v85 - (char *)valuePtr;
                  if (((char *)v85 - (char *)valuePtr) >> 3 > v43) {
                    unint64_t v43 = v44 >> 3;
                  }
                  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v45 = v43;
                  }
                  if (v45)
                  {
                    v46 = (char *)sub_21612AA90((uint64_t)&v85, v45);
                    v41 = valuePtr;
                    v39 = v84;
                  }
                  else
                  {
                    v46 = 0;
                  }
                  v47 = (__int16 *)&v46[16 * v42];
                  *(void *)v47 = v34;
                  *((void *)v47 + 1) = v38;
                  v48 = v47;
                  if (v39 == v41)
                  {
                    CFIndex v8 = v75;
                  }
                  else
                  {
                    CFIndex v8 = v75;
                    do
                    {
                      *((_OWORD *)v48 - 1) = *((_OWORD *)v39 - 1);
                      v48 -= 8;
                      v39 -= 8;
                    }
                    while (v39 != v41);
                    v41 = valuePtr;
                  }
                  v40 = v47 + 8;
                  __int16 valuePtr = v48;
                  v84 = v47 + 8;
                  v85 = (__int16 *)&v46[16 * v45];
                  if (v41) {
                    operator delete(v41);
                  }
                }
                else
                {
                  *(void *)v84 = v34;
                  *((void *)v39 + 1) = v38;
                  v40 = v39 + 8;
                }
                v84 = v40;
                ++v33;
                CFIndex v34 = v37;
              }
              while (1)
              {
                CFIndex Length = CFStringGetLength(MutableCopy);
                if (Length > CFStringGetLength(v22)) {
                  break;
                }
                MutableCFStringRef Copy = v86;
                CFStringAppend(v86, @"  ");
              }
              CFStringRef v50 = v86;
              sub_2161A2058(v86, v22, &v82);
              __p = 0;
              v80 = 0;
              v81 = 0;
              sub_216185B34(&__p, ((char *)v84 - (char *)valuePtr) >> 4);
              v51 = valuePtr;
              v52 = v84;
              while (v51 != v52)
              {
                uint64_t v53 = *((void *)v51 + 1);
                if (v53 < 1)
                {
                  __int16 v54 = 0;
                }
                else
                {
                  __int16 v54 = 0;
                  uint64_t v55 = *(void *)v51;
                  uint64_t v56 = v53 + *(void *)v51;
                  v57 = &v82;
                  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    v57 = (std::string *)v82.__r_.__value_.__r.__words[0];
                  }
                  do
                  {
                    if ((v57->__r_.__value_.__s.__data_[v55] - 97) < 0x1A) {
                      ++v54;
                    }
                    ++v55;
                  }
                  while (v55 < v56);
                }
                v58 = v80;
                if (v80 >= v81)
                {
                  v60 = (char *)__p;
                  uint64_t v61 = v80 - (unsigned char *)__p;
                  if (v80 - (unsigned char *)__p <= -3) {
                    sub_21610CB04();
                  }
                  uint64_t v62 = v61 >> 1;
                  if (v81 - (unsigned char *)__p <= (unint64_t)((v61 >> 1) + 1)) {
                    uint64_t v63 = v62 + 1;
                  }
                  else {
                    uint64_t v63 = v81 - (unsigned char *)__p;
                  }
                  if ((unint64_t)(v81 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
                    uint64_t v64 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v64 = v63;
                  }
                  if (v64)
                  {
                    v65 = (char *)sub_21610FD44((uint64_t)&v81, v64);
                    v60 = (char *)__p;
                    v58 = v80;
                  }
                  else
                  {
                    v65 = 0;
                  }
                  v66 = &v65[2 * v62];
                  *(_WORD *)v66 = v54;
                  v59 = v66 + 2;
                  while (v58 != v60)
                  {
                    __int16 v67 = *((_WORD *)v58 - 1);
                    v58 -= 2;
                    *((_WORD *)v66 - 1) = v67;
                    v66 -= 2;
                  }
                  __p = v66;
                  v80 = v59;
                  v81 = &v65[2 * v64];
                  if (v60) {
                    operator delete(v60);
                  }
                }
                else
                {
                  *(_WORD *)v80 = v54;
                  v59 = v58 + 2;
                }
                v80 = v59;
                v51 += 8;
              }
              CFStringRef v19 = sub_2161E4FD4((__int16 **)&__p);
              uint64_t v10 = Mutable;
              if (__p)
              {
                v80 = (char *)__p;
                operator delete(__p);
              }
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v82.__r_.__value_.__l.__data_);
              }
              if (valuePtr)
              {
                v84 = valuePtr;
                operator delete(valuePtr);
              }
              if (v50) {
                CFRelease(v50);
              }
              if (cf) {
                CFRelease(cf);
              }
            }
            if (v77) {
              CFRelease(v77);
            }
            if (v78) {
              CFRelease(v78);
            }
            if (v22) {
              CFRelease(v22);
            }
          }
          v91.length = CFArrayGetCount(v19);
          v91.location = 0;
          CFArrayAppendArray(v10, v19, v91);
          if (v19) {
            CFRelease(v19);
          }
          ++v74;
        }
        else
        {
          CFStringRef v15 = CFArrayGetValueAtIndex((CFArrayRef)a2, v8);
          CFArrayAppendValue(v10, v15);
        }
        ++v8;
        uint64_t v6 = *v73;
        unint64_t v9 = (v73[1] - *v73) >> 2;
      }
      while (v8 < v9);
      return v10;
    }
  }

  return (__CFArray *)CFRetain(a2);
}

void sub_2161E9D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,const void *a21,const void *a22,const void *a23,const void *a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  CFNumberRef v35 = *(void **)(v33 - 120);
  if (v35)
  {
    *(void *)(v33 - 112) = v35;
    operator delete(v35);
  }
  sub_2161B5B5C((const void **)(v33 - 96), 0);
  sub_2161BE0C8(&a21, 0);
  sub_2161868BC(&a22, 0);
  sub_216195B94(&a23, 0);
  sub_2161868BC(&a24, 0);
  _Unwind_Resume(a1);
}

void sub_2161E9E18(uint64_t a1, int **a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFString *a6, int a7, unsigned char *a8, double a9, uint64_t a10)
{
  uint64_t v10 = *(void *)(*(void *)a1 + 24);
  if (v10)
  {
    uint64_t v20 = *(void *)(*(void *)(*(void *)a1 + 8) + 32);
    sub_21617DED8(*(void *)(*(void *)a1 + 24));
    unsigned int v21 = atomic_load((unsigned int *)(v10 + 40));
    if (v21 == 2)
    {
      uint64_t v22 = *(void *)v10;
      BOOL v23 = !v22 || v20 == 0;
      if (!v23)
      {
        if (a7)
        {
          if ((sub_2162E4418(a2, v20) & 1) == 0) {
            return;
          }
        }
        else
        {
          uint64_t v20 = v22;
          if (!sub_2162E44EC(a2, v22)) {
            return;
          }
        }
        uint64_t v103 = a5;
        if (a6) {
          BOOL v24 = CFStringGetLength(a6) == 0;
        }
        else {
          BOOL v24 = 1;
        }
        CFStringRef theString = a6;
        double v25 = -7.0;
        if (a7) {
          double v25 = (*(double (**)(uint64_t, uint64_t))(*(void *)v20 + 40))(v20, 2);
        }
        LMLanguageModelCreatePredictionEnumerator();
        uint64_t v105 = 0;
        uint64_t v26 = 0;
        v111 = (uint64_t *)(a10 + 8);
        CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        double v27 = 7.0;
        double v28 = 0.0;
        double v29 = 0.25;
        char theString2 = 1;
        while (1)
        {
          if (!LMPredictionEnumeratorAdvance())
          {
LABEL_169:
            LMPredictionEnumeratorRelease();
            return;
          }
          unsigned int v120 = 0;
          uint64_t v118 = 0;
          double v119 = 0.0;
          LMPredictionEnumeratorGetPrediction();
          if ((a7 & 1) == 0) {
            uint64_t v118 = a2[1] - *a2;
          }
          if (v120 == 2)
          {
            char v30 = !v24;
            if (v26) {
              char v30 = 1;
            }
            if ((v30 & 1) == 0) {
              *a8 = 1;
            }
            if (!a7) {
              double v25 = v119;
            }
            goto LABEL_27;
          }
          if (v24)
          {
            if (v120 < 0x258) {
              goto LABEL_27;
            }
          }
          else if (v120 < 0x258 || v120 == 1000 || v120 == 1003)
          {
            goto LABEL_27;
          }
          if ((a7 & 1) != 0 || *(a2[1] - 1) != v120)
          {
            double v31 = v119;
            if (!sub_2162F0E50(*(void *)(*(void *)(*(void *)a1 + 8) + 32), v120))
            {
              BOOL v32 = v25 <= -0.3;
              if (!v24) {
                BOOL v32 = v25 <= -0.5;
              }
              if (!v32 || v25 + -2.0 > v31) {
                goto LABEL_169;
              }
            }
            uint64_t v34 = v120;
            if (v120 >= 0x258)
            {
              CFNumberRef v35 = *(void **)(*(void *)(*(void *)a1 + 120) + 8);
              if (sub_2162F0E50(*(void *)(*(void *)(*(void *)a1 + 8) + 32), v120))
              {
                uint64_t v36 = *(void *)(*(void *)(*(void *)a1 + 8) + 32);
                CFStringRef v37 = (CFStringRef)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v36 + 32))(v36, v34);
              }
              else
              {
                uint64_t v38 = sub_21629E77C(v35, v34);
                if (!v38 || (*(_WORD *)(v38 + 4) & 0x800) != 0) {
                  goto LABEL_27;
                }
                CFStringRef v37 = sub_21629E658(v35, v34);
              }
              CFTypeRef v117 = v37;
              if (v37) {
                break;
              }
            }
          }
LABEL_27:
          if (++v26 == a4) {
            goto LABEL_169;
          }
        }
        CFStringRef appendedString = v37;
        CFIndex Length = CFStringGetLength(v37);
        if (Length)
        {
          if (!*(unsigned char *)(a3 + 8))
          {
            uint64_t v40 = a10;
            goto LABEL_66;
          }
          uint64_t v40 = a10;
          if (theString2 & 1 | (v105 != v118))
          {
            int v41 = *(unsigned __int8 *)(a3 + 9);
            if (v118 > 1)
            {
              double v28 = dbl_21637AA50[v41 == 0];
              double v42 = 10.0;
              double v43 = 10.5;
            }
            else
            {
              double v28 = dbl_21637AA60[v41 == 0];
              double v42 = 10.0;
              double v43 = 11.0;
            }
            if (*(unsigned char *)(a3 + 9)) {
              double v27 = v42;
            }
            else {
              double v27 = v43;
            }
          }
          if (v119 > -v27)
          {
            if (theString2) {
              double v27 = -(v119 * v28);
            }
LABEL_66:
            CFTypeRef cf = 0;
            sub_2161EB168(v115, 1uLL, &v120);
            LOWORD(v122[0]) = Length;
            sub_2161E5A38(&v112, 1, v122);
            if (v24)
            {
              double v45 = v119 + a9;
              CFStringRef theString2a = 0;
              double v46 = v45 + log2((double)Length) * v29;
LABEL_108:
              if (a7) {
                double v76 = v46 + -0.2;
              }
              else {
                double v76 = v46;
              }
              uint64_t v105 = v118;
              uint64_t v77 = *(void *)(v40 + 16);
              v78 = *(uint64_t **)v40;
              if (v77)
              {
                uint64_t v79 = 4;
                if (!*((unsigned char *)v78 + 56)) {
                  uint64_t v79 = 5;
                }
                if (v76 < *(double *)&v78[v79] + -3.0) {
                  goto LABEL_115;
                }
                if (v77 == v103)
                {
                  uint64_t v80 = a10 + 8;
                  uint64_t v81 = *v111;
                  if (*v111)
                  {
                    do
                    {
                      uint64_t v82 = v81;
                      uint64_t v81 = *(void *)(v81 + 8);
                    }
                    while (v81);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v82 = *(void *)(v80 + 16);
                      BOOL v23 = *(void *)v82 == v80;
                      uint64_t v80 = v82;
                    }
                    while (v23);
                  }
                  uint64_t v83 = 32;
                  if (!*(unsigned char *)(v82 + 56)) {
                    uint64_t v83 = 40;
                  }
                  double v84 = *(double *)(v82 + v83);
                  if (v76 < v84 + -0.5)
                  {
LABEL_115:
                    int v44 = 2;
LABEL_116:
                    double v29 = 0.25;
                    goto LABEL_149;
                  }
                  if (v76 < v84)
                  {
                    int v44 = 4;
                    goto LABEL_116;
                  }
                }
              }
              CFStringRef v85 = appendedString;
              if (theString2a) {
                CFStringRef v85 = theString2a;
              }
              CFStringRef theString2b = v85;
              if (v78 == v111) {
                goto LABEL_137;
              }
              while (1)
              {
                CFStringRef v86 = (const __CFString *)v78[8];
                if (v86)
                {
                  if (CFEqual(v86, theString2b)) {
                    break;
                  }
                }
                v87 = (uint64_t *)v78[1];
                if (v87)
                {
                  do
                  {
                    CFRange v88 = v87;
                    v87 = (uint64_t *)*v87;
                  }
                  while (v87);
                }
                else
                {
                  do
                  {
                    CFRange v88 = (uint64_t *)v78[2];
                    BOOL v23 = *v88 == (void)v78;
                    v78 = v88;
                  }
                  while (!v23);
                }
                v78 = v88;
                if (v88 == v111) {
                  goto LABEL_137;
                }
              }
              if (v78 == v111)
              {
LABEL_137:
                double v29 = 0.25;
                if (*(void *)(v40 + 16) == v103)
                {
                  CFRange v89 = (uint64_t *)(a10 + 8);
                  CFRange v90 = (uint64_t *)*v111;
                  if (*v111)
                  {
                    do
                    {
                      CFRange v91 = v90;
                      CFRange v90 = (uint64_t *)v90[1];
                    }
                    while (v90);
                  }
                  else
                  {
                    do
                    {
                      CFRange v91 = (uint64_t *)v89[2];
                      BOOL v23 = *v91 == (void)v89;
                      CFRange v89 = v91;
                    }
                    while (v23);
                  }
                  sub_2161EB3DC((uint64_t **)a10, v91);
                  sub_2161EB2B0((uint64_t)(v91 + 4));
                  v92 = v91;
                  uint64_t v40 = a10;
                  operator delete(v92);
                }
                if (!a7)
                {
                  sub_2161EB51C((uint64_t **)v40, theString2b, 0, (uint64_t)v115, (uint64_t)&v112, 0, v46);
                  int v44 = 0;
LABEL_149:
                  if (v112)
                  {
                    v113 = (char *)v112;
                    operator delete(v112);
                  }
                  if (v115[0])
                  {
                    v115[1] = v115[0];
                    operator delete(v115[0]);
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                  char theString2 = 0;
                  CFTypeRef v55 = v117;
                  if (!v117)
                  {
LABEL_157:
                    if ((v44 | 4) != 4) {
                      goto LABEL_169;
                    }
                    goto LABEL_27;
                  }
LABEL_156:
                  CFRelease(v55);
                  goto LABEL_157;
                }
                v122[0] = (uint64_t *)operator new(0x78uLL);
                v122[1] = (uint64_t *)(a10 + 8);
                char v123 = 0;
                sub_2161EB1EC((uint64_t)(v122[0] + 4), theString2b, (uint64_t)v115, (uint64_t)&v112, 1, v46 + -0.2, 0.0);
                char v123 = 1;
                v93 = sub_2161EB450(v40, &v121, (uint64_t)(v122[0] + 4));
                if (!*v93)
                {
                  sub_21612A650((uint64_t **)v40, v121, (uint64_t **)v93, v122[0]);
                  v122[0] = 0;
                }
                sub_2161EB4C4((uint64_t)v122, 0);
              }
              else
              {
                uint64_t v94 = 4;
                if (!*((unsigned char *)v78 + 56)) {
                  uint64_t v94 = 5;
                }
                if (v76 <= *(double *)&v78[v94])
                {
                  int v44 = 0;
                  goto LABEL_116;
                }
                double v95 = *(double *)&v78[v94];
                sub_2161EB3DC((uint64_t **)a10, v78);
                sub_2161EB2B0((uint64_t)(v78 + 4));
                operator delete(v78);
                if (a7) {
                  sub_2161EB614((uint64_t **)a10, theString2b, (uint64_t)v115, (uint64_t)&v112, a7, v46 + -0.2, v95);
                }
                else {
                  sub_2161EB704((uint64_t **)a10, theString2b, (uint64_t)v115, (uint64_t)&v112, 0, v95, v46);
                }
                double v29 = 0.25;
              }
              int v44 = 0;
              goto LABEL_149;
            }
            MutableCFStringRef Copy = CFStringCreateMutableCopy(alloc, 0, theString);
            CFTypeRef cf = MutableCopy;
            CFStringAppend(MutableCopy, appendedString);
            sub_21617AAB8((uint64_t)v115, (char *)v115[0], (char *)a2[1] - 4);
            v48 = v112;
            __int16 v106 = CFStringGetLength(theString);
            v49 = v113;
            CFStringRef v50 = (char *)v112 + ((v48 - (unsigned char *)v112) & 0xFFFFFFFFFFFFFFFELL);
            CFStringRef theString2a = MutableCopy;
            if ((unint64_t)v113 < v114)
            {
              if (v50 == v113)
              {
                *(_WORD *)CFStringRef v50 = v106;
                v113 = v50 + 2;
                uint64_t v40 = a10;
              }
              else
              {
                v51 = v113 - 2;
                v52 = v113;
                uint64_t v40 = a10;
                if ((unint64_t)v113 >= 2)
                {
                  do
                  {
                    __int16 v53 = *(_WORD *)v51;
                    v51 += 2;
                    *(_WORD *)v52 = v53;
                    v52 += 2;
                  }
                  while (v51 < v49);
                }
                v113 = v52;
                if (v49 != v50 + 2)
                {
                  __int16 v54 = v50;
                  memmove(&v49[-2 * ((v49 - (v50 + 2)) >> 1)], v50, v49 - (v50 + 2));
                  CFStringRef v50 = v54;
                }
                *(_WORD *)CFStringRef v50 = v106;
              }
LABEL_107:
              double v46 = v119 + a9;
              goto LABEL_108;
            }
            v97 = v48;
            uint64_t v98 = v48 - (unsigned char *)v112;
            __src = (char *)v112 + ((v48 - (unsigned char *)v112) & 0xFFFFFFFFFFFFFFFELL);
            if (v113 - (unsigned char *)v112 <= -3) {
              sub_21610CB04();
            }
            uint64_t v56 = (v113 - (unsigned char *)v112) >> 1;
            v57 = v112;
            if (v114 - (unint64_t)v112 <= v56 + 1) {
              uint64_t v58 = v56 + 1;
            }
            else {
              uint64_t v58 = v114 - (void)v112;
            }
            if (v114 - (unint64_t)v112 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v59 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v59 = v58;
            }
            if (v59) {
              v60 = (char *)sub_21610FD44((uint64_t)&v114, v59);
            }
            else {
              v60 = 0;
            }
            uint64_t v61 = v98 >> 1;
            uint64_t v62 = &v60[2 * (v98 >> 1)];
            uint64_t v63 = &v60[2 * v59];
            if (v98 >> 1 == v59)
            {
              uint64_t v64 = __src;
              if (v98 >= 1)
              {
                if (v61 >= -1) {
                  uint64_t v65 = v61 + 1;
                }
                else {
                  uint64_t v65 = v61 + 2;
                }
                v62 -= v65 & 0xFFFFFFFFFFFFFFFELL;
                goto LABEL_100;
              }
              __p = v60;
              if (v57 == v97) {
                unint64_t v66 = 1;
              }
              else {
                unint64_t v66 = v98;
              }
              __int16 v67 = (char *)sub_21610FD44((uint64_t)&v114, v66);
              uint64_t v62 = &v67[2 * (v66 >> 2)];
              uint64_t v63 = &v67[2 * v68];
              if (__p)
              {
                v69 = &v67[2 * v68];
                operator delete(__p);
                uint64_t v63 = v69;
              }
            }
            uint64_t v64 = __src;
LABEL_100:
            *(_WORD *)uint64_t v62 = v106;
            uint64_t v70 = v62 + 2;
            v71 = v112;
            if (v112 != v64)
            {
              v72 = v64;
              do
              {
                __int16 v73 = *((_WORD *)v72 - 1);
                v72 -= 2;
                *((_WORD *)v62 - 1) = v73;
                v62 -= 2;
              }
              while (v72 != v71);
            }
            int64_t v74 = v113 - v64;
            if (v113 != v64)
            {
              v107 = v70;
              __srca = v63;
              memmove(v70, v64, v113 - v64);
              uint64_t v70 = v107;
              uint64_t v63 = __srca;
            }
            CFIndex v75 = v112;
            v112 = v62;
            v113 = &v70[v74];
            unint64_t v114 = (unint64_t)v63;
            uint64_t v40 = a10;
            if (v75) {
              operator delete(v75);
            }
            goto LABEL_107;
          }
          int v44 = 2;
        }
        else
        {
          int v44 = 4;
        }
        CFTypeRef v55 = appendedString;
        goto LABEL_156;
      }
    }
  }
}

void sub_2161EA7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,const void *a29,const void *a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  sub_2161B5B5C(&a29, 0);
  sub_2161868BC(&a30, 0);
  _Unwind_Resume(a1);
}

void sub_2161EA898(uint64_t a1@<X0>, unsigned char *a2@<X3>, void *a3@<X8>)
{
  *a2 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = a3 + 1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (v3)
  {
    sub_21617DED8(*(void *)(*(void *)a1 + 24));
    unsigned int v4 = atomic_load((unsigned int *)(v3 + 40));
    if (v4 == 2)
    {
      if (*(void *)v3) {
        operator new();
      }
    }
  }
}

void sub_2161EB078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char *a22,char a23)
{
  a22 = &a15;
  sub_2161EB358((void ***)&a22);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);
  sub_2161EB7F4(v23, *(void **)(v23 + 8));
  _Unwind_Resume(a1);
}

void *sub_2161EB168(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112970(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2161EB1D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161EB1EC(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, char a5, double a6, double a7)
{
  *(double *)a1 = a6;
  *(double *)(a1 + 8) = a7;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = a5;
  if (cf) {
    CFTypeRef v10 = CFRetain(cf);
  }
  else {
    CFTypeRef v10 = 0;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_21617B5A4((void *)(a1 + 40), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_216182F50((void *)(a1 + 64), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 1);
  return a1;
}

void sub_2161EB280(_Unwind_Exception *a1)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_2161868BC((const void **)(v1 + 32), 0);
  _Unwind_Resume(a1);
}

void sub_2161EB2B0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(void *)(a1 + 48) = v3;
    operator delete(v3);
  }

  sub_2161868BC((const void **)(a1 + 32), 0);
}

uint64_t sub_2161EB308(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    sub_2161EB2B0(i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2161EB358(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_2161EB2B0(v4);
      }
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_2161EB3DC(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_216167704(v6, a2);
  return v3;
}

uint64_t *sub_2161EB450(uint64_t a1, void *a2, uint64_t a3)
{
  BOOL v5 = *(uint64_t **)(a1 + 8);
  CFStringRef result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    if (*(unsigned char *)(a3 + 24)) {
      uint64_t v6 = (double *)a3;
    }
    else {
      uint64_t v6 = (double *)(a3 + 8);
    }
    double v7 = *v6;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        unint64_t v9 = (double *)(v4 + 4);
        if (!*((unsigned char *)v8 + 56)) {
          unint64_t v9 = (double *)(v8 + 5);
        }
        if (v7 < *v9) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v8;
        CFStringRef result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      if (*v9 < v7) {
        break;
      }
      CFStringRef result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void sub_2161EB4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2161EB2B0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_2161EB51C(uint64_t **a1, const void *a2, int a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  unint64_t v14 = (uint64_t *)(a1 + 1);
  v17[0] = (uint64_t *)operator new(0x78uLL);
  v17[1] = v14;
  sub_2161EB1EC((uint64_t)(v17[0] + 4), a2, a4, a5, a6 != 0, (double)a3, a7);
  char v18 = 1;
  CFStringRef v15 = sub_2161EB450((uint64_t)a1, &v16, (uint64_t)(v17[0] + 4));
  if (!*v15)
  {
    sub_21612A650(a1, v16, (uint64_t **)v15, v17[0]);
    v17[0] = 0;
  }
  sub_2161EB4C4((uint64_t)v17, 0);
}

void sub_2161EB5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161EB4C4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161EB614(uint64_t **a1, const void *a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7)
{
  unint64_t v14 = (uint64_t *)(a1 + 1);
  v17[0] = (uint64_t *)operator new(0x78uLL);
  v17[1] = v14;
  sub_2161EB1EC((uint64_t)(v17[0] + 4), a2, a3, a4, a5 != 0, a6, a7);
  char v18 = 1;
  CFStringRef v15 = sub_2161EB450((uint64_t)a1, &v16, (uint64_t)(v17[0] + 4));
  if (!*v15)
  {
    sub_21612A650(a1, v16, (uint64_t **)v15, v17[0]);
    v17[0] = 0;
  }
  sub_2161EB4C4((uint64_t)v17, 0);
}

void sub_2161EB6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161EB4C4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161EB704(uint64_t **a1, const void *a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7)
{
  unint64_t v14 = (uint64_t *)(a1 + 1);
  v17[0] = (uint64_t *)operator new(0x78uLL);
  v17[1] = v14;
  sub_2161EB1EC((uint64_t)(v17[0] + 4), a2, a3, a4, a5 != 0, a6, a7);
  char v18 = 1;
  CFStringRef v15 = sub_2161EB450((uint64_t)a1, &v16, (uint64_t)(v17[0] + 4));
  if (!*v15)
  {
    sub_21612A650(a1, v16, (uint64_t **)v15, v17[0]);
    v17[0] = 0;
  }
  sub_2161EB4C4((uint64_t)v17, 0);
}

void sub_2161EB7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161EB4C4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_2161EB7F4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2161EB7F4(a1, *a2);
    sub_2161EB7F4(a1, a2[1]);
    sub_2161EB2B0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_2161EB850(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D7E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D7E0))
  {
    sub_2161E65FC(&qword_26797D7D8);
    __cxa_atexit((void (*)(void *))sub_2161E667C, &qword_26797D7D8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D7E0);
  }

  return sub_2161E6700(&qword_26797D7D8, a1, a2, 1);
}

void sub_2161EB908(_Unwind_Exception *a1)
{
}

BOOL sub_2161EB920(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D7E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D7E8))
  {
    sub_216184F68(byte_26797D8A8, (char *)L"Fullwidth-Halfwidth");
    __cxa_atexit((void (*)(void *))sub_216184364, byte_26797D8A8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D7E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D7F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D7F8))
  {
    sub_2161E6378(&qword_26797D7F0);
    __cxa_atexit((void (*)(void *))sub_2161E640C, &qword_26797D7F0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D7F8);
  }

  return sub_2161E6440(&qword_26797D7F0, a1);
}

void sub_2161EBA24(_Unwind_Exception *a1)
{
}

BOOL sub_2161EBA4C(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D800, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D800))
  {
    sub_216184F68(byte_26797D8C0, (char *)L"Halfwidth-Fullwidth");
    __cxa_atexit((void (*)(void *))sub_216184364, byte_26797D8C0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D800);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D810, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D810))
  {
    sub_2161E6378(&qword_26797D808);
    __cxa_atexit((void (*)(void *))sub_2161E640C, &qword_26797D808, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D810);
  }

  return sub_2161E6440(&qword_26797D808, a1);
}

void sub_2161EBB50(_Unwind_Exception *a1)
{
}

uint64_t sub_2161EBB78(const __CFString *a1)
{
  if (a1)
  {
    uint64_t v2 = 0;
    sub_2161E1FB8(a1);
  }
  return 0;
}

void sub_2161EBC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    MEMORY[0x2166CA7C0](v15, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2161EBC6C(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D820, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D820))
  {
    sub_2161E65FC(&qword_26797D818);
    __cxa_atexit((void (*)(void *))sub_2161E667C, &qword_26797D818, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D820);
  }

  return sub_2161E6700(&qword_26797D818, a1, a2, 0);
}

void sub_2161EBD20(_Unwind_Exception *a1)
{
}

uint64_t sub_2161EBD38(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D830))
  {
    sub_2161E65FC(&qword_26797D828);
    __cxa_atexit((void (*)(void *))sub_2161E667C, &qword_26797D828, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D830);
  }

  return sub_2161E6700(&qword_26797D828, a1, a2, 0);
}

void sub_2161EBDF0(_Unwind_Exception *a1)
{
}

uint64_t sub_2161EBE08(uint64_t a1, uint64_t *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D840, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D840))
  {
    sub_2161E65FC(&qword_26797D838);
    __cxa_atexit((void (*)(void *))sub_2161E667C, &qword_26797D838, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D840);
  }
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }

  return sub_2161E66B0(&qword_26797D838, v5, v6, a2);
}

void sub_2161EBECC(_Unwind_Exception *a1)
{
}

uint64_t sub_2161EBEE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D850, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D850))
  {
    sub_2161E65FC(&qword_26797D848);
    __cxa_atexit((void (*)(void *))sub_2161E667C, &qword_26797D848, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D850);
  }

  return sub_2161E66B0(&qword_26797D848, a1, a2, a3);
}

void sub_2161EBFA0(_Unwind_Exception *a1)
{
}

BOOL sub_2161EBFB8(unsigned __int16 *a1, unint64_t a2, void *a3)
{
  *a3 = 0;
  if (!a2) {
    return 1;
  }
  uint64_t v6 = sub_216183BFC("\a0", *a1, 0);
  if (v6 == -1) {
    return 0;
  }
  uint64_t v7 = 1;
  do
  {
    unint64_t v8 = v7;
    uint64_t v9 = *a3 + v6;
    *a3 = v9;
    if (a2 == v8) {
      break;
    }
    *a3 = 10 * v9;
    uint64_t v6 = sub_216183BFC("\a0", a1[v8], 0);
    uint64_t v7 = v8 + 1;
  }
  while (v6 != -1);
  return v8 >= a2;
}

uint64_t sub_2161EC078(uint64_t a1)
{
  uint64_t v1 = a1;
  char v5 = 1;
  LODWORD(__p[0]) = (unsigned __int16)a1;
  if (sub_2161EB920((uint64_t)__p))
  {
    uint64_t v2 = (void **)__p[0];
    if (v5 >= 0) {
      uint64_t v2 = __p;
    }
    uint64_t v1 = *(unsigned __int16 *)v2;
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v1;
}

void sub_2161EC0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2161EC100(__int16 a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D858, memory_order_acquire) & 1) == 0)
  {
    __int16 v2 = a1;
    int v3 = __cxa_guard_acquire(&qword_26797D858);
    a1 = v2;
    if (v3)
    {
      v4[2] = *(_OWORD *)&asc_21637AA88[16];
      v4[3] = unk_21637AAB8;
      v5[0] = xmmword_21637AAC8;
      *(_OWORD *)((char *)v5 + 12) = *(long long *)((char *)&xmmword_21637AAC8 + 12);
      v4[0] = *(_OWORD *)asc_21637AA88;
      v4[1] = *(_OWORD *)&asc_21637AA88[8];
      sub_2161A76DC((uint64_t)qword_26797D908, (unsigned __int16 *)v4, 46);
      __cxa_atexit((void (*)(void *))sub_2161A76D8, qword_26797D908, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D858);
      a1 = v2;
    }
  }
  LOWORD(v4[0]) = a1;
  return sub_21618FCC0(qword_26797D908, (unsigned __int16 *)v4) != 0;
}

void sub_2161EC208(_Unwind_Exception *a1)
{
}

BOOL sub_2161EC220(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  if (Length < 1) {
    return 0;
  }
  UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(a1, Length - 1);

  return sub_2161EC100(CharacterAtIndex);
}

BOOL sub_2161EC274(unsigned __int16 a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D860, memory_order_acquire) & 1) == 0)
  {
    unsigned __int16 v2 = a1;
    int v3 = __cxa_guard_acquire(&qword_26797D860);
    a1 = v2;
    if (v3)
    {
      *(_OWORD *)int v4 = xmmword_21637AAE4;
      *(void *)&v4[7] = 0x53414E5D516B4E03;
      sub_2161A76DC((uint64_t)qword_26797D930, v4, 11);
      __cxa_atexit((void (*)(void *))sub_2161A76D8, qword_26797D930, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D860);
      a1 = v2;
    }
  }
  v4[0] = a1;
  return sub_21618FCC0(qword_26797D930, v4) != 0;
}

void sub_2161EC36C(_Unwind_Exception *a1)
{
}

BOOL sub_2161EC384(__int16 a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D868, memory_order_acquire) & 1) == 0)
  {
    __int16 v2 = a1;
    int v3 = __cxa_guard_acquire(&qword_26797D868);
    a1 = v2;
    if (v3)
    {
      __int16 v5 = 20140;
      v4[0] = xmmword_21637AAFA;
      v4[1] = unk_21637AB0A;
      sub_2161A76DC((uint64_t)qword_26797D958, (unsigned __int16 *)v4, 17);
      __cxa_atexit((void (*)(void *))sub_2161A76D8, qword_26797D958, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D868);
      a1 = v2;
    }
  }
  LOWORD(v4[0]) = a1;
  return sub_21618FCC0(qword_26797D958, (unsigned __int16 *)v4) != 0;
}

void sub_2161EC47C(_Unwind_Exception *a1)
{
}

BOOL sub_2161EC494(unsigned __int16 *a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 3) < 0xFFFFFFFFFFFFFFFELL) {
    return 0;
  }
  int v2 = *a1;
  if (a2 == 1) {
    return v2 == 19975 || v2 == 20740 || v2 == 21315;
  }
  if (v2 != 21315) {
    return 0;
  }
  int v6 = a1[1];
  return v6 == 19975 || v6 == 20740;
}

CFStringRef sub_2161EC500(const __CFString *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    if (CFStringGetLength(result) == 1)
    {
      int CharacterAtIndex = CFStringGetCharacterAtIndex(v1, 0);
      uint64_t v3 = 0;
      while ((unsigned __int16)word_21637AB1C[v3] != CharacterAtIndex)
      {
        if (++v3 == 10)
        {
          int v4 = 0;
          goto LABEL_9;
        }
      }
      int v4 = &word_21637AB1C[v3];
LABEL_9:
      if (v4) {
        BOOL v5 = (char *)v4 - (char *)word_21637AB1C == -2;
      }
      else {
        BOOL v5 = 1;
      }
      return (const __CFString *)!v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFStringRef sub_2161EC588(const __CFString *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    CFIndex Length = CFStringGetLength(result);
    if (Length < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v3 = Length;
      CFIndex v4 = 0;
      while (1)
      {
        UChar32 CharacterAtIndex = CFStringGetCharacterAtIndex(v1, v4);
        if (CharacterAtIndex != 9787 && (u_charType(CharacterAtIndex) - 19) < 0xB) {
          break;
        }
        if (v3 == ++v4) {
          return 0;
        }
      }
      return (const __CFString *)1;
    }
  }
  return result;
}

uint64_t sub_2161EC60C(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if (a3) {
    *a3 = 0;
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    while (1)
    {
      int v11 = *(unsigned __int16 *)(a1 + 2 * v9);
      if ((unsigned __int16)(v11 + 240) < 0xAu) {
        break;
      }
      if ((v11 - 48) < 0xA)
      {
        uint64_t result = 1;
        goto LABEL_13;
      }
      if (a4)
      {
        if (sub_2161EC384(v11)) {
          goto LABEL_12;
        }
      }
      else if (sub_2161EC274(v11))
      {
LABEL_12:
        uint64_t result = 3;
        goto LABEL_13;
      }
      BOOL v12 = 0;
      uint64_t result = 0;
      if (!v9) {
        return result;
      }
LABEL_14:
      if (!v12 && v10 != result)
      {
        if (a3) {
          return v10;
        }
        else {
          return 0;
        }
      }
      ++v9;
      if (a3) {
        *a3 = v9;
      }
      unsigned int v10 = result;
      if (a2 == v9) {
        return result;
      }
    }
    uint64_t result = 2;
LABEL_13:
    BOOL v12 = v9 == 0;
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_2161EC6F4(const __CFString *a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  if (!Length) {
    return 0;
  }
  CFIndex v11 = Length;
  *a5 = 0;
  *a4 = 0;
  *a3 = 0;
  uint64_t v12 = 1;
  *a2 = 0;
  if (Length >= 1)
  {
    for (CFIndex i = 0; i != v11; ++i)
    {
      int CharacterAtIndex = CFStringGetCharacterAtIndex(a1, i);
      int v15 = CharacterAtIndex;
      unsigned int v16 = (unsigned __int16)(CharacterAtIndex + 240);
      if ((CharacterAtIndex - 48) < 0xA || v16 <= 9)
      {
        *a3 = 1;
        if (v16 <= 9) {
          *a2 = 1;
        }
      }
      if (sub_2161EC384(CharacterAtIndex)) {
        *a4 = 1;
      }
      if (v15 == 65292 || v15 == 44) {
        *a5 = 1;
      }
    }
    return 1;
  }
  return v12;
}

uint64_t sub_2161EC7F0(uint64_t a1, unint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D878, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D878))
  {
    qword_26797D870 = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, @"0123456789(.");
    __cxa_guard_release(&qword_26797D878);
  }
  if (a2 >= 2)
  {
    uint64_t v5 = a1 + 2 * a2;
    int v8 = *(unsigned __int16 *)(v5 - 2);
    uint64_t v7 = (unsigned __int16 *)(v5 - 2);
    int v6 = v8;
    unint64_t v9 = 1;
    while (1)
    {
      int v10 = *v7--;
      if (v10 != v6 || !CFCharacterSetIsCharacterMember((CFCharacterSetRef)qword_26797D870, v6)) {
        break;
      }
      if (++v9 > a2)
      {
        char v12 = 1;
        goto LABEL_10;
      }
    }
    char v12 = 0;
    BOOL v11 = v9 > 2;
LABEL_10:
    char v4 = v12 | v11;
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

void sub_2161EC8D0(_Unwind_Exception *a1)
{
}

uint64_t sub_2161EC8E8(unsigned __int16 *a1, uint64_t a2, int a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D8A0, memory_order_acquire) & 1) == 0)
    {
      uint64_t v22 = a1;
      uint64_t v23 = a2;
      int v24 = __cxa_guard_acquire(&qword_26797D8A0);
      a2 = v23;
      int v25 = v24;
      a1 = v22;
      if (v25)
      {
        long long v28 = xmmword_21637AB9A;
        v29[0] = unk_21637ABAA;
        *(_OWORD *)((char *)v29 + 12) = unk_21637ABB6;
        long long v26 = xmmword_21637AB7A;
        long long v27 = unk_21637AB8A;
        sub_2161884A4((uint64_t)&unk_26797D8F0, (unsigned __int16 *)&v26, 38);
        __cxa_atexit((void (*)(void *))sub_216188478, &unk_26797D8F0, &dword_2160F5000);
        __cxa_guard_release(&qword_26797D8A0);
        a1 = v22;
        a2 = v23;
      }
    }
    if (a2)
    {
      if (qword_26797D8F8)
      {
        int v10 = &a1[a2];
        while (1)
        {
          unsigned int v11 = *a1;
          char v12 = &qword_26797D8F8;
          uint64_t v13 = qword_26797D8F8;
          do
          {
            unsigned int v14 = *(unsigned __int16 *)(v13 + 26);
            BOOL v15 = v14 >= v11;
            if (v14 >= v11) {
              unsigned int v16 = (uint64_t *)v13;
            }
            else {
              unsigned int v16 = (uint64_t *)(v13 + 8);
            }
            if (v15) {
              char v12 = (uint64_t *)v13;
            }
            uint64_t v13 = *v16;
          }
          while (*v16);
          if (v12 == &qword_26797D8F8 || v11 < *((unsigned __int16 *)v12 + 13)) {
            break;
          }
          if (++a1 == v10) {
            return 1;
          }
        }
      }
      return 0;
    }
    return 1;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D898, memory_order_acquire) & 1) == 0)
  {
    char v18 = a1;
    uint64_t v19 = a2;
    int v20 = __cxa_guard_acquire(&qword_26797D898);
    a2 = v19;
    int v21 = v20;
    a1 = v18;
    if (v21)
    {
      long long v26 = xmmword_21637AB62;
      *(void *)&long long v27 = 0x2E002800390038;
      sub_2161884A4((uint64_t)&unk_26797D8D8, (unsigned __int16 *)&v26, 12);
      __cxa_atexit((void (*)(void *))sub_216188478, &unk_26797D8D8, &dword_2160F5000);
      __cxa_guard_release(&qword_26797D898);
      a1 = v18;
      a2 = v19;
    }
  }
  if (!a2) {
    return 1;
  }
  if (qword_26797D8E0)
  {
    CFIndex v3 = &a1[a2];
    while (1)
    {
      unsigned int v4 = *a1;
      uint64_t v5 = &qword_26797D8E0;
      uint64_t v6 = qword_26797D8E0;
      do
      {
        unsigned int v7 = *(unsigned __int16 *)(v6 + 26);
        BOOL v8 = v7 >= v4;
        if (v7 >= v4) {
          unint64_t v9 = (uint64_t *)v6;
        }
        else {
          unint64_t v9 = (uint64_t *)(v6 + 8);
        }
        if (v8) {
          uint64_t v5 = (uint64_t *)v6;
        }
        uint64_t v6 = *v9;
      }
      while (*v9);
      if (v5 == &qword_26797D8E0 || v4 < *((unsigned __int16 *)v5 + 13)) {
        break;
      }
      if (++a1 == v3) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_2161ECB5C(_Unwind_Exception *a1)
{
}

void sub_2161ECB84(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a1;
  uint64_t v132 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D880))
  {
    *(_OWORD *)__p = xmmword_21637AB32;
    long long v39 = unk_21637AB42;
    long long v40 = xmmword_21637AB52;
    sub_2161EE26C(__p, 12);
    __cxa_atexit((void (*)(void *))sub_2161ED644, &xmmword_26797D980, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D880);
    uint64_t v6 = a1;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D888))
  {
    uint64_t v33 = a4;
    sub_216184F68(__p, (char *)L"1");
    WORD4(v39) = 49;
    sub_216184F68(&v40, (char *)L"11");
    __int16 v41 = 9734;
    sub_216184F68(v42, "1");
    __int16 v43 = 9834;
    sub_216184F68(v44, "1");
    __int16 v45 = 8594;
    sub_216184F68(v46, (char *)L"2");
    __int16 v47 = 50;
    sub_216184F68(v48, (char *)L"22");
    __int16 v49 = 165;
    sub_216184F68(v50, (char *)L"222");
    __int16 v51 = 36;
    sub_216184F68(v52, (char *)L"2222");
    __int16 v53 = 8364;
    sub_216184F68(v54, "3");
    __int16 v55 = 51;
    sub_216184F68(v56, "3");
    __int16 v57 = 37;
    sub_216184F68(v58, (char *)L"333");
    __int16 v59 = 176;
    sub_216184F68(v60, (char *)L"3333");
    __int16 v61 = 35;
    sub_216184F68(v62, "4");
    __int16 v63 = 52;
    sub_216184F68(v64, "4");
    __int16 v65 = 9675;
    sub_216184F68(v66, (char *)L"444");
    __int16 v67 = -246;
    sub_216184F68(v68, (char *)L"4444");
    __int16 v69 = 12539;
    sub_216184F68(v70, "5");
    __int16 v71 = 53;
    sub_216184F68(v72, "5");
    __int16 v73 = 43;
    sub_216184F68(v74, (char *)L"555");
    __int16 v75 = 215;
    sub_216184F68(v76, (char *)L"5555");
    __int16 v77 = 247;
    sub_216184F68(v78, (char *)word_2163CA96C);
    __int16 v79 = 54;
    sub_216184F68(v80, "6");
    __int16 v81 = 60;
    sub_216184F68(v82, (char *)L"666");
    __int16 v83 = 61;
    sub_216184F68(v84, (char *)L"6666");
    __int16 v85 = 62;
    sub_216184F68(v86, "7");
    __int16 v87 = 55;
    sub_216184F68(v88, "7");
    __int16 v89 = 12300;
    sub_216184F68(v90, (char *)L"777");
    __int16 v91 = 12301;
    sub_216184F68(v92, (char *)L"7777");
    __int16 v93 = -230;
    sub_216184F68(v94, "8");
    __int16 v95 = 56;
    sub_216184F68(v96, "8");
    __int16 v97 = 12306;
    sub_216184F68(v98, (char *)L"888");
    __int16 v99 = 12293;
    sub_216184F68(v100, (char *)L"8888");
    __int16 v101 = 12294;
    sub_216184F68(v102, (char *)word_2163CA93C);
    __int16 v103 = 57;
    sub_216184F68(v104, "9");
    __int16 v105 = 94;
    sub_216184F68(v106, (char *)L"999");
    __int16 v107 = 124;
    sub_216184F68(v108, (char *)L"9999");
    __int16 v109 = 92;
    sub_216184F68(v110, "0");
    __int16 v111 = 48;
    sub_216184F68(v112, "0");
    __int16 v113 = 12316;
    sub_216184F68(v114, (char *)L"000");
    __int16 v115 = 8230;
    sub_216184F68(v116, (char *)L"(");
    __int16 v117 = 40;
    sub_216184F68(v118, (char *)L"((");
    __int16 v119 = 41;
    sub_216184F68(v120, "(");
    __int16 v121 = 91;
    sub_216184F68(v122, "(");
    __int16 v123 = 93;
    sub_216184F68(v124, (char *)L".");
    __int16 v125 = 46;
    sub_216184F68(v126, (char *)L"..");
    __int16 v127 = 44;
    sub_216184F68(v128, ".");
    __int16 v129 = 45;
    sub_216184F68(v130, ".");
    __int16 v131 = 47;
    sub_2161EE6D8((uint64_t)__p, 47);
    uint64_t v34 = 188;
    do
    {
      if (*((char *)&__p[v34 - 1] - 1) < 0) {
        operator delete(__p[v34 - 4]);
      }
      v34 -= 4;
    }
    while (v34 * 8);
    __cxa_atexit((void (*)(void *))sub_2161ED648, &xmmword_26797D9A8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D888);
    a4 = v33;
    uint64_t v6 = a1;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!a2) {
    return;
  }
  unint64_t v8 = 0;
  uint64_t v9 = v6 + 2;
  int v10 = &qword_26797D000;
  CFNumberRef v35 = a3;
  uint64_t v36 = a4;
  do
  {
    unsigned int v11 = (__int16 *)(v6 + 2 * v8);
    unint64_t v12 = (unsigned __int16)*v11;
    if (!*((void *)&xmmword_26797D980 + 1)) {
      goto LABEL_21;
    }
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D980 + 8));
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v14 = (unsigned __int16)*v11;
      if (*((void *)&xmmword_26797D980 + 1) <= v12) {
        unint64_t v14 = v12 % *((void *)&xmmword_26797D980 + 1);
      }
    }
    else
    {
      unint64_t v14 = (DWORD2(xmmword_26797D980) - 1) & v12;
    }
    BOOL v15 = *(uint64_t ****)(v10[304] + 8 * v14);
    if (!v15 || (unsigned int v16 = *v15) == 0)
    {
LABEL_21:
      sub_2161845F8((uint64_t)a4, *v11);
      unint64_t v18 = v8 + 1;
      goto LABEL_22;
    }
    while (1)
    {
      unint64_t v17 = (unint64_t)v16[1];
      if (v17 == v12) {
        break;
      }
      if (v13.u32[0] > 1uLL)
      {
        if (v17 >= *((void *)&xmmword_26797D980 + 1)) {
          v17 %= *((void *)&xmmword_26797D980 + 1);
        }
      }
      else
      {
        v17 &= *((void *)&xmmword_26797D980 + 1) - 1;
      }
      if (v17 != v14) {
        goto LABEL_21;
      }
LABEL_20:
      unsigned int v16 = (uint64_t **)*v16;
      if (!v16) {
        goto LABEL_21;
      }
    }
    if (*((unsigned __int16 *)v16 + 8) != v12) {
      goto LABEL_20;
    }
    unint64_t v19 = v8 + *((unsigned __int8 *)v16 + 18);
    if (a2 < v19) {
      unint64_t v19 = a2;
    }
    if (v19 <= v8 + 1) {
      unint64_t v20 = v8 + 1;
    }
    else {
      unint64_t v20 = v19;
    }
    unint64_t v21 = v8;
    while (1)
    {
      unint64_t v18 = v21 + 1;
      if (v21 + 1 >= v19) {
        break;
      }
      int v22 = *(unsigned __int16 *)(v9 + 2 * v21++);
      if (v12 != v22) {
        goto LABEL_34;
      }
    }
    unint64_t v18 = v20;
LABEL_34:
    if (v6) {
      unint64_t v23 = v18 - v8;
    }
    else {
      unint64_t v23 = 0;
    }
    sub_21617FAAC(__p, v11, v23);
    unint64_t v24 = sub_2161A6920((uint64_t)&qword_26797D9C0, (uint64_t)__p);
    unint64_t v25 = *((void *)&xmmword_26797D9A8 + 1);
    if (*((void *)&xmmword_26797D9A8 + 1))
    {
      unint64_t v26 = v24;
      uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D9A8 + 8));
      v27.i16[0] = vaddlv_u8(v27);
      unint64_t v28 = v27.u32[0];
      if (v27.u32[0] > 1uLL)
      {
        unint64_t v29 = v24;
        if (v24 >= *((void *)&xmmword_26797D9A8 + 1)) {
          unint64_t v29 = v24 % *((void *)&xmmword_26797D9A8 + 1);
        }
      }
      else
      {
        unint64_t v29 = (*((void *)&xmmword_26797D9A8 + 1) - 1) & v24;
      }
      double v31 = *(uint64_t ***)(xmmword_26797D9A8 + 8 * v29);
      if (v31)
      {
        for (CFIndex i = *v31; i; CFIndex i = (uint64_t *)*i)
        {
          unint64_t v32 = i[1];
          if (v26 == v32)
          {
            if (sub_2161A6964((uint64_t)&dword_26797D9C8, (unsigned __int16 *)i + 8, (unsigned __int16 *)__p)) {
              break;
            }
          }
          else
          {
            if (v28 > 1)
            {
              if (v32 >= v25) {
                v32 %= v25;
              }
            }
            else
            {
              v32 &= v25 - 1;
            }
            if (v32 != v29) {
              goto LABEL_55;
            }
          }
        }
      }
      else
      {
LABEL_55:
        CFIndex i = 0;
      }
      a3 = v35;
      a4 = v36;
      int v10 = &qword_26797D000;
    }
    else
    {
      CFIndex i = 0;
    }
    if (SBYTE7(v39) < 0)
    {
      operator delete(__p[0]);
      if (!i) {
        goto LABEL_62;
      }
LABEL_61:
      sub_2161845F8((uint64_t)a4, *((_WORD *)i + 20));
      ++*a3;
      goto LABEL_62;
    }
    if (i) {
      goto LABEL_61;
    }
LABEL_62:
    uint64_t v6 = a1;
LABEL_22:
    unint64_t v8 = v18;
  }
  while (v18 < a2);
}

void sub_2161ED4F8(_Unwind_Exception *a1)
{
  uint64_t v3 = 1504;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0) {
      operator delete(*(void **)(v1 + v3 - 32));
    }
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_26797D888);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2161ED64C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797D890, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797D890))
  {
    v5[0] = 12316;
    sub_216184F68(v6, "0");
    __int16 v7 = 8230;
    sub_216184F68(v8, (char *)L"000");
    __int16 v9 = 9734;
    sub_216184F68(v10, (char *)L"11");
    __int16 v11 = 9834;
    sub_216184F68(v12, "1");
    __int16 v13 = 8594;
    sub_216184F68(v14, "1");
    __int16 v15 = 165;
    sub_216184F68(v16, (char *)L"22");
    __int16 v17 = 36;
    sub_216184F68(v18, (char *)L"222");
    __int16 v19 = 8364;
    sub_216184F68(v20, (char *)L"2222");
    __int16 v21 = 37;
    sub_216184F68(v22, "3");
    __int16 v23 = 176;
    sub_216184F68(v24, (char *)L"333");
    __int16 v25 = 9675;
    sub_216184F68(v26, "4");
    __int16 v27 = -246;
    sub_216184F68(v28, (char *)L"444");
    __int16 v29 = 12539;
    sub_216184F68(v30, (char *)L"4444");
    __int16 v31 = 43;
    sub_216184F68(v32, "5");
    __int16 v33 = 215;
    sub_216184F68(v34, (char *)L"555");
    __int16 v35 = 247;
    sub_216184F68(v36, (char *)L"5555");
    __int16 v37 = 60;
    sub_216184F68(v38, "6");
    __int16 v39 = 61;
    sub_216184F68(v40, (char *)L"666");
    __int16 v41 = 62;
    sub_216184F68(v42, (char *)L"6666");
    __int16 v43 = 12300;
    sub_216184F68(v44, "7");
    __int16 v45 = 12301;
    sub_216184F68(v46, (char *)L"777");
    __int16 v47 = -230;
    sub_216184F68(v48, (char *)L"7777");
    __int16 v49 = 12306;
    sub_216184F68(v50, "8");
    __int16 v51 = 12293;
    sub_216184F68(v52, (char *)L"888");
    __int16 v53 = 12294;
    sub_216184F68(v54, (char *)L"8888");
    __int16 v55 = 94;
    sub_216184F68(v56, "9");
    __int16 v57 = 124;
    sub_216184F68(v58, (char *)L"999");
    __int16 v59 = 92;
    sub_216184F68(v60, (char *)L"9999");
    sub_2161EEBA8(v5, 28);
    uint64_t v4 = 448;
    do
    {
      if (SHIBYTE(v5[v4 - 1]) < 0) {
        operator delete(*(void **)&v5[v4 - 12]);
      }
      v4 -= 16;
    }
    while (v4 * 2);
    __cxa_atexit((void (*)(void *))sub_2161EDCB8, &xmmword_26797D9D0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797D890);
  }
  *a3 = 0;
  operator new[]();
}

void sub_2161EDBE0(_Unwind_Exception *a1)
{
  uint64_t v3 = 896;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0) {
      operator delete(*(void **)(v1 + v3 - 24));
    }
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_26797D890);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_2161EDCBC(const __CFString *a1, const __CFString *a2)
{
  BOOL result = 0;
  uint64_t v32 = *MEMORY[0x263EF8340];
  CFStringRef v31 = a1;
  if (a1 && a2)
  {
    CFIndex Length = CFStringGetLength(v31);
    CFStringRef v6 = a2;
    CFIndex v7 = CFStringGetLength(a2);
    uint64_t v25 = (uint64_t)&v25;
    CFIndex v26 = v7 + 1;
    MEMORY[0x270FA5388](v7);
    __int16 v27 = (char *)&v25 - v8;
    CFIndex v29 = Length;
    if ((Length & 0x8000000000000000) == 0)
    {
      uint64_t v9 = 0;
      uint64_t v28 = 8 * v7 + 8;
      unint64_t v10 = (8 * v7) ^ 0xFFFFFFFFFFFFFFF8;
      uint64_t v30 = (uint64_t *)v27;
      while (v7 < 0)
      {
LABEL_45:
        uint64_t v30 = (uint64_t *)((char *)v30 + v28);
        BOOL v21 = v9++ == v29;
        if (v21) {
          return *(void *)&v27[8 * v26 * v29 + 8 * v7] == 0;
        }
      }
      uint64_t v11 = 0;
      unint64_t v12 = &v27[8 * v9 * v26];
      CFIndex v13 = -1;
      unint64_t v14 = v30;
      while (1)
      {
        if (v9)
        {
          int CharacterAtIndex = CFStringGetCharacterAtIndex(v31, v9 - 1);
          if (v13 == -1)
          {
            int v16 = 0;
            uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            int v16 = CFStringGetCharacterAtIndex(v6, v13);
            if (CharacterAtIndex != v16
              && ((CharacterAtIndex - 12353) < 0x56
               || CharacterAtIndex == 12540
               || CharacterAtIndex == 12316))
            {
              BOOL v21 = CharacterAtIndex == 12316 && v16 == 12540;
              int v17 = v21;
            }
            else
            {
              int v17 = 1;
            }
            uint64_t v20 = *(uint64_t *)((char *)v14 + v10 - 8) + (v17 ^ 1u);
          }
          BOOL v22 = CharacterAtIndex == v16
             || (CharacterAtIndex - 12353) >= 0x56
             && CharacterAtIndex != 12540
             && CharacterAtIndex != 12316
             || CharacterAtIndex == 12316 && v16 == 12540;
          uint64_t v19 = *(uint64_t *)((char *)v14 + v10) + !v22;
          if (v13 == -1) {
            goto LABEL_39;
          }
          CFIndex v18 = v13;
        }
        else
        {
          if (v13 == -1)
          {
            uint64_t v20 = 0;
            uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_39:
            uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_40;
          }
          CFIndex v18 = v11 - 1;
          CFStringGetCharacterAtIndex(v6, v13);
          uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v24 = *(void *)&v12[8 * v18];
LABEL_40:
        if (v19 < v20) {
          uint64_t v20 = v19;
        }
        if (v24 < v20) {
          uint64_t v20 = v24;
        }
        *v14++ = v20;
        ++v11;
        if (v7 == ++v13) {
          goto LABEL_45;
        }
      }
    }
    return *(void *)&v27[8 * v26 * v29 + 8 * v7] == 0;
  }
  return result;
}

uint64_t sub_2161EDF80(_WORD *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (a2 < 1)
    {
      BOOL v5 = 1;
      BOOL v4 = 1;
    }
    else
    {
      int v3 = *a1 & 0xFC00;
      if (v3 == 56320)
      {
        BOOL v4 = 0;
        BOOL v5 = 1;
      }
      else
      {
        uint64_t v6 = 1;
        do
        {
          int v7 = v3;
          uint64_t v8 = v6;
          if (a2 == v6) {
            break;
          }
          int v3 = a1[v6++] & 0xFC00;
        }
        while ((v7 == 55296) != (v3 != 56320));
        BOOL v5 = v7 != 55296;
        BOOL v4 = v8 >= a2;
      }
    }
    return v4 & v5;
  }
  return v2;
}

uint64_t sub_2161EE01C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  CFIndex Length = CFStringGetLength(v7);
  uint64_t v9 = v5 - v6;
  if (v5 == v6) {
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = v9 / 40;
  CFIndex v13 = Length - 1;
  unint64_t v14 = v12 - 1;
  if (v12 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v12;
  }
  unint64_t v16 = v12 - 2;
  do
  {
    if (v10
      || (*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 128))(a2, 0) != 1
      || (UChar32 v17 = CFStringGetCharacterAtIndex(v7, 0), v17 == 9787)
      || (u_charType(v17) - 19) >= 0xB)
    {
      if (v16 != v10
        || (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)a2 + 128))(a2, v14) != 1
        || (UChar32 CharacterAtIndex = CFStringGetCharacterAtIndex(v7, v13), CharacterAtIndex == 9787)
        || (u_charType(CharacterAtIndex) - 19) >= 0xB)
      {
        if (v14 == v10
          || (unsigned int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 352))(a2, v10),
              unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 344))(a2, v10 + 1),
              sub_2161C06A8(a1, v19, v20)))
        {
          ++v11;
        }
      }
    }
    ++v10;
  }
  while (v15 != v10);
  return v11;
}

void sub_2161EE26C(_DWORD *a1, uint64_t a2)
{
  xmmword_26797D980 = 0u;
  *(_OWORD *)&qword_26797D990 = 0u;
  dword_26797D9A0 = 1065353216;
  if (a2)
  {
    int v3 = a1;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = &a1[a2];
    while (1)
    {
      unint64_t v7 = *(unsigned __int16 *)v3;
      if (v5)
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v2 = *(unsigned __int16 *)v3;
          if (v5 <= v7) {
            unint64_t v2 = v7 % v5;
          }
        }
        else
        {
          unint64_t v2 = (v5 - 1) & v7;
        }
        uint64_t v9 = *(uint64_t ****)(xmmword_26797D980 + 8 * v2);
        if (v9)
        {
          for (CFIndex i = *v9; i; CFIndex i = (uint64_t **)*i)
          {
            unint64_t v11 = (unint64_t)i[1];
            if (v11 == v7)
            {
              if (*((unsigned __int16 *)i + 8) == v7) {
                goto LABEL_75;
              }
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= v5) {
                  v11 %= v5;
                }
              }
              else
              {
                v11 &= v5 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v12 = operator new(0x18uLL);
      *unint64_t v12 = 0;
      v12[1] = v7;
      *((_DWORD *)v12 + 4) = *v3;
      float v13 = (float)(unint64_t)(v4 + 1);
      if (!v5 || (float)(*(float *)&dword_26797D9A0 * (float)v5) < v13) {
        break;
      }
LABEL_65:
      uint64_t v29 = xmmword_26797D980;
      uint64_t v30 = *(void **)(xmmword_26797D980 + 8 * v2);
      if (v30)
      {
        *unint64_t v12 = *v30;
      }
      else
      {
        *unint64_t v12 = qword_26797D990;
        qword_26797D990 = (uint64_t)v12;
        *(void *)(v29 + 8 * v2) = &qword_26797D990;
        if (!*v12) {
          goto LABEL_74;
        }
        unint64_t v31 = *(void *)(*v12 + 8);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v31 >= v5) {
            v31 %= v5;
          }
        }
        else
        {
          v31 &= v5 - 1;
        }
        uint64_t v30 = (void *)(xmmword_26797D980 + 8 * v31);
      }
      *uint64_t v30 = v12;
LABEL_74:
      uint64_t v4 = ++qword_26797D998;
LABEL_75:
      if (++v3 == v6) {
        return;
      }
    }
    BOOL v14 = (v5 & (v5 - 1)) != 0;
    if (v5 < 3) {
      BOOL v14 = 1;
    }
    unint64_t v15 = v14 | (2 * v5);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_26797D9A0);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *((void *)&xmmword_26797D980 + 1);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v5)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_26797D998 / *(float *)&dword_26797D9A0);
      if (v5 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v5)
      {
        unint64_t v5 = *((void *)&xmmword_26797D980 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          CFIndex v18 = operator new(8 * *(void *)&prime);
          unsigned int v19 = (void *)xmmword_26797D980;
          *(void *)&xmmword_26797D980 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&xmmword_26797D980 + 1) = prime;
          do
            *(void *)(xmmword_26797D980 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          BOOL v21 = (void **)qword_26797D990;
          if (qword_26797D990)
          {
            unint64_t v22 = *(void *)(qword_26797D990 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797D980 + 8 * v22) = &qword_26797D990;
            for (j = *v21; j; unint64_t v22 = v28)
            {
              unint64_t v28 = j[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(xmmword_26797D980 + 8 * v28))
                {
                  *(void *)(xmmword_26797D980 + 8 * v28) = v21;
                  goto LABEL_56;
                }
                *BOOL v21 = (void *)*j;
                void *j = **(void **)(xmmword_26797D980 + 8 * v28);
                **(void **)(xmmword_26797D980 + 8 * v28) = j;
                j = v21;
              }
              unint64_t v28 = v22;
LABEL_56:
              BOOL v21 = (void **)j;
              j = (void *)*j;
            }
          }
          unint64_t v5 = (unint64_t)prime;
          goto LABEL_60;
        }
        uint64_t v32 = (void *)xmmword_26797D980;
        *(void *)&xmmword_26797D980 = 0;
        if (v32) {
          operator delete(v32);
        }
        unint64_t v5 = 0;
        *((void *)&xmmword_26797D980 + 1) = 0;
      }
    }
LABEL_60:
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v5 <= v7) {
        unint64_t v2 = v7 % v5;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v5 - 1) & v7;
    }
    goto LABEL_65;
  }
}

void sub_2161EE6AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_216144C28((uint64_t)&xmmword_26797D980);
  _Unwind_Resume(a1);
}

void sub_2161EE6D8(uint64_t a1, uint64_t a2)
{
  xmmword_26797D9A8 = 0u;
  *(_OWORD *)&qword_26797D9B8 = 0u;
  dword_26797D9C8 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v35 = a1 + 32 * a2;
    while (1)
    {
      unint64_t v4 = sub_2161A6920((uint64_t)&qword_26797D9C0, v3);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_26797D9A8 + 1);
      if (*((void *)&xmmword_26797D9A8 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D9A8 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v2 = v4;
          if (v4 >= *((void *)&xmmword_26797D9A8 + 1)) {
            unint64_t v2 = v4 % *((void *)&xmmword_26797D9A8 + 1);
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&xmmword_26797D9A8 + 1) - 1) & v4;
        }
        uint64_t v9 = *(unsigned __int16 ***)(xmmword_26797D9A8 + 8 * v2);
        if (v9)
        {
          for (CFIndex i = *v9; i; CFIndex i = *(unsigned __int16 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (sub_2161A6964((uint64_t)&dword_26797D9C8, i + 8, (unsigned __int16 *)v3)) {
                goto LABEL_78;
              }
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v12 = (char *)operator new(0x30uLL);
      *(void *)unint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      float v13 = v12 + 16;
      if (*(char *)(v3 + 23) < 0)
      {
        sub_2161984AC(v13, *(void **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v3;
        *((void *)v12 + 4) = *(void *)(v3 + 16);
        *(_OWORD *)float v13 = v14;
      }
      *((_WORD *)v12 + 20) = *(_WORD *)(v3 + 24);
      float v15 = (float)(unint64_t)(qword_26797D9C0 + 1);
      if (!v6 || (float)(*(float *)&dword_26797D9C8 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = xmmword_26797D9A8;
      uint64_t v32 = *(void **)(xmmword_26797D9A8 + 8 * v2);
      if (v32)
      {
        *(void *)unint64_t v12 = *v32;
      }
      else
      {
        *(void *)unint64_t v12 = qword_26797D9B8;
        qword_26797D9B8 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_26797D9B8;
        if (!*(void *)v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        uint64_t v32 = (void *)(xmmword_26797D9A8 + 8 * v33);
      }
      *uint64_t v32 = v12;
LABEL_77:
      ++qword_26797D9C0;
LABEL_78:
      v3 += 32;
      if (v3 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26797D9C8);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_26797D9A8 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26797D9A8 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26797D9A8 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26797D9C0 / *(float *)&dword_26797D9C8);
      if (*((void *)&xmmword_26797D9A8 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D9A8 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_26797D9A8 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          BOOL v21 = (void *)xmmword_26797D9A8;
          *(void *)&xmmword_26797D9A8 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26797D9A8 + 1) = prime;
          do
            *(void *)(xmmword_26797D9A8 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint8x8_t v23 = (void **)qword_26797D9B8;
          if (qword_26797D9B8)
          {
            unint64_t v24 = *(void *)(qword_26797D9B8 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797D9A8 + 8 * v24) = &qword_26797D9B8;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26797D9A8 + 8 * v30))
                {
                  *(void *)(xmmword_26797D9A8 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *uint8x8_t v23 = (void *)*j;
                void *j = **(void **)(xmmword_26797D9A8 + 8 * v30);
                **(void **)(xmmword_26797D9A8 + 8 * v30) = j;
                j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              uint8x8_t v23 = (void **)j;
              j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v34 = (void *)xmmword_26797D9A8;
        *(void *)&xmmword_26797D9A8 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_26797D9A8 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2161EEB68(_Unwind_Exception *a1)
{
  sub_2161A69E8(1, v1);
  sub_2161A6A48((uint64_t)&xmmword_26797D9A8);
  _Unwind_Resume(a1);
}

void sub_2161EEBA8(unsigned __int16 *a1, uint64_t a2)
{
  xmmword_26797D9D0 = 0u;
  *(_OWORD *)&qword_26797D9E0 = 0u;
  dword_26797D9F0 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0;
    unint64_t v5 = &a1[16 * a2];
    while (1)
    {
      unint64_t v6 = *v3;
      unint64_t v7 = *((void *)&xmmword_26797D9D0 + 1);
      if (*((void *)&xmmword_26797D9D0 + 1))
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D9D0 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v2 = *v3;
          if (*((void *)&xmmword_26797D9D0 + 1) <= v6) {
            unint64_t v2 = v6 % *((void *)&xmmword_26797D9D0 + 1);
          }
        }
        else
        {
          unint64_t v2 = (DWORD2(xmmword_26797D9D0) - 1) & v6;
        }
        uint64_t v9 = *(uint64_t ****)(xmmword_26797D9D0 + 8 * v2);
        if (v9)
        {
          for (CFIndex i = *v9; i; CFIndex i = (uint64_t **)*i)
          {
            unint64_t v11 = (unint64_t)i[1];
            if (v11 == v6)
            {
              if (*((unsigned __int16 *)i + 8) == v6) {
                goto LABEL_78;
              }
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= *((void *)&xmmword_26797D9D0 + 1)) {
                  v11 %= *((void *)&xmmword_26797D9D0 + 1);
                }
              }
              else
              {
                v11 &= *((void *)&xmmword_26797D9D0 + 1) - 1;
              }
              if (v11 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v12 = (char *)operator new(0x30uLL);
      *(void *)unint64_t v12 = 0;
      *((void *)v12 + 1) = v6;
      *((_WORD *)v12 + 8) = v6;
      float v13 = v12 + 24;
      if (*((char *)v3 + 31) < 0)
      {
        sub_2161984AC(v13, *((void **)v3 + 1), *((void *)v3 + 2));
        uint64_t v4 = qword_26797D9E8;
      }
      else
      {
        long long v14 = *(_OWORD *)(v3 + 4);
        *((void *)v12 + 5) = *((void *)v3 + 3);
        *(_OWORD *)float v13 = v14;
      }
      float v15 = (float)(unint64_t)(v4 + 1);
      if (!v7 || (float)(*(float *)&dword_26797D9F0 * (float)v7) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = xmmword_26797D9D0;
      uint64_t v32 = *(void **)(xmmword_26797D9D0 + 8 * v2);
      if (v32)
      {
        *(void *)unint64_t v12 = *v32;
      }
      else
      {
        *(void *)unint64_t v12 = qword_26797D9E0;
        qword_26797D9E0 = (uint64_t)v12;
        *(void *)(v31 + 8 * v2) = &qword_26797D9E0;
        if (!*(void *)v12) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v12 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v33 >= v7) {
            v33 %= v7;
          }
        }
        else
        {
          v33 &= v7 - 1;
        }
        uint64_t v32 = (void *)(xmmword_26797D9D0 + 8 * v33);
      }
      *uint64_t v32 = v12;
LABEL_77:
      uint64_t v4 = ++qword_26797D9E8;
LABEL_78:
      v3 += 16;
      if (v3 == v5) {
        return;
      }
    }
    BOOL v16 = (v7 & (v7 - 1)) != 0;
    if (v7 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26797D9F0);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = *((void *)&xmmword_26797D9D0 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26797D9D0 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26797D9D0 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26797D9E8 / *(float *)&dword_26797D9F0);
      if (*((void *)&xmmword_26797D9D0 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797D9D0 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)&xmmword_26797D9D0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          BOOL v21 = (void *)xmmword_26797D9D0;
          *(void *)&xmmword_26797D9D0 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26797D9D0 + 1) = prime;
          do
            *(void *)(xmmword_26797D9D0 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint8x8_t v23 = (void **)qword_26797D9E0;
          if (qword_26797D9E0)
          {
            unint64_t v24 = *(void *)(qword_26797D9E0 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797D9D0 + 8 * v24) = &qword_26797D9E0;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26797D9D0 + 8 * v30))
                {
                  *(void *)(xmmword_26797D9D0 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *uint8x8_t v23 = (void *)*j;
                void *j = **(void **)(xmmword_26797D9D0 + 8 * v30);
                **(void **)(xmmword_26797D9D0 + 8 * v30) = j;
                j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              uint8x8_t v23 = (void **)j;
              j = (void *)*j;
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v34 = (void *)xmmword_26797D9D0;
        *(void *)&xmmword_26797D9D0 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        *((void *)&xmmword_26797D9D0 + 1) = 0;
      }
    }
LABEL_63:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
    goto LABEL_68;
  }
}

void sub_2161EF008(_Unwind_Exception *a1)
{
  sub_21619AFA0(1, v1);
  sub_21619B000((uint64_t)&xmmword_26797D9D0);
  _Unwind_Resume(a1);
}

uint64_t MecabraCreateWithAdditionalDictionariesAndOptions(unsigned int a1, const void *a2, const void *a3, char a4)
{
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t valuePtr = a1;
  CFNumberRef v10 = CFNumberCreate(v8, kCFNumberCFIndexType, &valuePtr);
  CFDictionarySetValue(Mutable, kMecabraCreationInputMethodTypeKey[0], v10);
  CFRelease(v10);
  if (a2) {
    CFDictionarySetValue(Mutable, kMecabraCreationCustomLearningDictionaryDirectoryKey[0], a2);
  }
  if (a3) {
    CFDictionarySetValue(Mutable, kMecabraCreationCustomAdditionalDictionaryDirectoriesKey[0], a3);
  }
  unint64_t v11 = (const void **)MEMORY[0x263EFFB40];
  if ((a4 & 1) == 0)
  {
    if ((a4 & 2) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    CFDictionarySetValue(Mutable, kMecabraCreationSyncLearningDataKey[0], (const void *)*MEMORY[0x263EFFB38]);
    if ((a4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  CFDictionarySetValue(Mutable, kMecabraCreationUseSpecialSymbolKey[0], (const void *)*MEMORY[0x263EFFB40]);
  if ((a4 & 2) != 0) {
    goto LABEL_11;
  }
LABEL_7:
  if ((a4 & 4) != 0) {
LABEL_8:
  }
    CFDictionarySetValue(Mutable, kMecabraCreationLiteModeKey[0], *v11);
LABEL_9:
  uint64_t v12 = MecabraCreate((uint64_t)Mutable);
  CFRelease(Mutable);
  return v12;
}

uint64_t MecabraCreate(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  unint64_t v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraCreate]", v4, 2u);
    if (a1) {
LABEL_3:
    }
      operator new();
  }
  else if (a1)
  {
    goto LABEL_3;
  }
  return 0;
}

void sub_2161F01DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2161BE0C8(v6, 0);
  sub_2161FAA04(v5, 0);
  sub_2161FCBE0(v4, 0);
  uint64_t v9 = *v7;
  *unint64_t v7 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  MEMORY[0x2166CA800](v3, 0x10E1C405DA12072);
  sub_2161F9CFC((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t MecabraCreateWithOptions(unsigned int a1, const void *a2, char a3)
{
  return MecabraCreateWithAdditionalDictionariesAndOptions(a1, a2, 0, a3);
}

uint64_t MecabraAnalyzeString(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v6 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 134218242;
    unint64_t v11 = a1;
    __int16 v12 = 2112;
    uint64_t v13 = a2;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraAnalyzeString] mecabra:%p string:%@", (uint8_t *)&v10, 0x16u);
    if (!a1) {
      return 0;
    }
  }
  else if (!a1)
  {
    return 0;
  }
  if (!*a1) {
    return 0;
  }
  unint64_t v7 = (void *)MEMORY[0x2166CAF50]();
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t, void, void, void, void))(*(void *)*a1 + 32))(*a1, a2, a3, 0, 0, 0, 0);
  return v8;
}

uint64_t MecabraAnalyzeStringWithContext(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t ptr = a3;
  if (!a1 || !*a1) {
    return 0;
  }
  if (a4) {
    uint64_t v7 = *a4;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    sub_2161F0888(__p, v7);
    int v10 = sub_2162D1CE4(2u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = __p;
      if (v22 < 0) {
        uint64_t v20 = (void **)__p[0];
      }
      *(_DWORD *)buf = 134218754;
      uint8x8_t v25 = a1;
      __int16 v26 = 2112;
      uint64_t v27 = a2;
      __int16 v28 = 2048;
      uint64_t v29 = a3;
      __int16 v30 = 2080;
      uint64_t v31 = v20;
      _os_log_debug_impl(&dword_2160F5000, v10, OS_LOG_TYPE_DEBUG, "[MecabraAnalyzeStringWithContext] mecabra:%p string:%@ options:0x%lx context:%s", buf, 0x2Au);
    }
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v11 = (void *)MEMORY[0x2166CAF50]();
  __int16 v12 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, &ptr);
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))() == 1
    || (*(unsigned int (**)(void))(*(void *)*a1 + 16))() == 17)
  {
    char v14 = 1;
  }
  else
  {
    float v15 = sub_2162D1CE4(0xDu);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      BOOL v16 = v15;
      if (os_signpost_enabled(v15))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v16, OS_SIGNPOST_INTERVAL_BEGIN, v13, "MecabraAnalyzeStringWithContext", (const char *)&unk_2163CBB73, buf, 2u);
      }
    }
    char v14 = 0;
  }
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a2, ptr, v7);
  if ((v14 & 1) == 0)
  {
    unint64_t v17 = sub_2162D1CE4(0xDu);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v18 = v17;
      if (os_signpost_enabled(v17))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v18, OS_SIGNPOST_INTERVAL_END, v13, "MecabraAnalyzeStringWithContext", (const char *)&unk_2163CBB73, buf, 2u);
      }
    }
  }
  return v8;
}

void sub_2161F0864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2161F0888(void *a1, uint64_t a2)
{
  if (a2)
  {
    sub_216140140((uint64_t)v70);
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(a2 + 16);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      unint64_t v6 = (void *)sub_21628F0D0(a2, i);
      CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(v6, v7, v8);
      sub_2161E2FFC(Surface, __s);
      int v10 = __s[0];
      size_t v11 = strlen(__s[0]);
      sub_216129E78(&v71, (uint64_t)__s[0], v11);
      if (v10) {
        MEMORY[0x2166CA7C0](v10, 0x1000C8077774924);
      }
      CFArrayRef v12 = *(const __CFArray **)(a2 + 16);
      if (v12) {
        CFArrayRef v12 = (const __CFArray *)CFArrayGetCount(v12);
      }
      if (i < (uint64_t)v12 - 1)
      {
        LOBYTE(__s[0]) = 124;
        sub_216129E78(&v71, (uint64_t)__s, 1);
      }
    }
    sub_216140140((uint64_t)__s);
    for (CFIndex j = 0; j < CFArrayGetCount(*(CFArrayRef *)(a2 + 32)); ++j)
    {
      char v14 = (void *)sub_21628F1BC(a2, j);
      CFStringRef v17 = (const __CFString *)MecabraCandidateGetSurface(v14, v15, v16);
      sub_2161E2FFC(v17, v60);
      unint64_t v18 = v60[0];
      size_t v19 = strlen(v60[0]);
      sub_216129E78(&v66, (uint64_t)v60[0], v19);
      if (v18) {
        MEMORY[0x2166CA7C0](v18, 0x1000C8077774924);
      }
      if (j < CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) - 1)
      {
        LOBYTE(v60[0]) = 124;
        sub_216129E78(&v66, (uint64_t)v60, 1);
      }
    }
    sub_216140140((uint64_t)v60);
    CFStringRef v20 = *(const __CFString **)(a2 + 88);
    if (v20)
    {
      sub_2161E2FFC(v20, v52);
      BOOL v21 = v52[0];
      size_t v22 = strlen(v52[0]);
      sub_216129E78(&v61, (uint64_t)v52[0], v22);
      if (v21) {
        MEMORY[0x2166CA7C0](v21, 0x1000C8077774924);
      }
    }
    CFStringRef v23 = *(const __CFString **)(a2 + 72);
    if (v23)
    {
      sub_2161E2FFC(v23, &v57);
      unint64_t v24 = v57;
    }
    else
    {
      unint64_t v24 = "N/A";
    }
    sub_21610B834(v58, v24);
    if (v23 && v24) {
      MEMORY[0x2166CA7C0](v24, 0x1000C8077774924);
    }
    sub_216140140((uint64_t)v52);
    __int16 v26 = sub_216129E78(&v53, (uint64_t)"(left[", 6);
    sub_216178BC0((uint64_t)v72, v50);
    if ((v51 & 0x80u) == 0) {
      uint64_t v27 = v50;
    }
    else {
      uint64_t v27 = (void **)v50[0];
    }
    if ((v51 & 0x80u) == 0) {
      uint64_t v28 = v51;
    }
    else {
      uint64_t v28 = (uint64_t)v50[1];
    }
    uint64_t v29 = sub_216129E78(v26, (uint64_t)v27, v28);
    __int16 v30 = sub_216129E78(v29, (uint64_t)"] inline[", 9);
    sub_216178BC0((uint64_t)v67, v48);
    if ((v49 & 0x80u) == 0) {
      uint64_t v31 = v48;
    }
    else {
      uint64_t v31 = (void **)v48[0];
    }
    if ((v49 & 0x80u) == 0) {
      uint64_t v32 = v49;
    }
    else {
      uint64_t v32 = (uint64_t)v48[1];
    }
    unint64_t v33 = sub_216129E78(v30, (uint64_t)v31, v32);
    uint64_t v34 = sub_216129E78(v33, (uint64_t)"] right[", 8);
    sub_216178BC0((uint64_t)v62, __p);
    if ((v47 & 0x80u) == 0) {
      uint64_t v35 = __p;
    }
    else {
      uint64_t v35 = (void **)__p[0];
    }
    if ((v47 & 0x80u) == 0) {
      uint64_t v36 = v47;
    }
    else {
      uint64_t v36 = (uint64_t)__p[1];
    }
    __int16 v37 = sub_216129E78(v34, (uint64_t)v35, v36);
    uint64_t v38 = sub_216129E78(v37, (uint64_t)"] App[", 6);
    if ((v59 & 0x80u) == 0) {
      __int16 v39 = v58;
    }
    else {
      __int16 v39 = (void **)v58[0];
    }
    if ((v59 & 0x80u) == 0) {
      uint64_t v40 = v59;
    }
    else {
      uint64_t v40 = (uint64_t)v58[1];
    }
    __int16 v41 = sub_216129E78(v38, (uint64_t)v39, v40);
    sub_216129E78(v41, (uint64_t)"])", 2);
    if ((char)v47 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v49 < 0) {
      operator delete(v48[0]);
    }
    if ((char)v51 < 0) {
      operator delete(v50[0]);
    }
    sub_216178BC0((uint64_t)v54, a1);
    v52[0] = *(char **)MEMORY[0x263F8C2B8];
    double v42 = v52[0];
    uint64_t v43 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    int v44 = *(char **)(MEMORY[0x263F8C2B8] + 64);
    *(char **)((char *)v52 + *((void *)v52[0] - 3)) = v44;
    uint64_t v45 = v43;
    uint64_t v53 = v43;
    v54[0] = MEMORY[0x263F8C318] + 16;
    if (v55 < 0) {
      operator delete((void *)v54[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166CA750](&v56);
    if ((char)v59 < 0) {
      operator delete(v58[0]);
    }
    v60[0] = v42;
    *(char **)((char *)v60 + *((void *)v42 - 3)) = v44;
    uint64_t v61 = v45;
    v62[0] = MEMORY[0x263F8C318] + 16;
    if (v63 < 0) {
      operator delete((void *)v62[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166CA750](&v64);
    __s[0] = v42;
    *(char **)((char *)__s + *((void *)v42 - 3)) = v44;
    uint64_t v66 = v45;
    v67[0] = MEMORY[0x263F8C318] + 16;
    if (v68 < 0) {
      operator delete((void *)v67[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166CA750](&v69);
    v70[0] = v42;
    *(void *)((char *)v70 + *((void *)v42 - 3)) = v44;
    uint64_t v71 = v45;
    v72[0] = MEMORY[0x263F8C318] + 16;
    if (v73 < 0) {
      operator delete((void *)v72[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (void *)MEMORY[0x2166CA750](&v74);
  }
  else
  {
    return sub_21610B834(a1, "");
  }
}

void sub_2161F0FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58)
{
}

uint64_t MecabraAnalyzeGesturesWithContext(void *a1, const __CFArray *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t ptr = a3;
  if (!a1 || !*a1) {
    return 0;
  }
  if (a4) {
    uint64_t v7 = *a4;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    sub_2161F0888(__p, v7);
    int v10 = sub_2162D1CE4(2u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      CFIndex Count = CFArrayGetCount(a2);
      CFStringRef v20 = __p;
      if (v22 < 0) {
        CFStringRef v20 = (void **)__p[0];
      }
      *(_DWORD *)buf = 134218754;
      uint8x8_t v25 = a1;
      __int16 v26 = 2048;
      CFIndex v27 = Count;
      __int16 v28 = 2048;
      uint64_t v29 = a3;
      __int16 v30 = 2080;
      uint64_t v31 = v20;
      _os_log_debug_impl(&dword_2160F5000, v10, OS_LOG_TYPE_DEBUG, "[MecabraAnalyzeGesturesWithContext] mecabra:%p gestures:%ld options:0x%lx context:%s", buf, 0x2Au);
    }
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  size_t v11 = (void *)MEMORY[0x2166CAF50]();
  CFArrayRef v12 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, &ptr);
  char v14 = sub_2162D1CE4(0xDu);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    float v15 = v14;
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "MecabraAnalyzeGesturesWithContext", (const char *)&unk_2163CBB73, buf, 2u);
    }
  }
  uint64_t v8 = (*(uint64_t (**)(void, const __CFArray *, uint64_t, uint64_t))(*(void *)*a1 + 48))(*a1, a2, ptr, v7);
  uint64_t v16 = sub_2162D1CE4(0xDu);
  if (v13 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    CFStringRef v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v17, OS_SIGNPOST_INTERVAL_END, v13, "MecabraAnalyzeGesturesWithContext", (const char *)&unk_2163CBB73, buf, 2u);
    }
  }
  return v8;
}

void sub_2161F135C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MecabraCreateRemainingGestures(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a1 || !*a1) {
    return 0;
  }
  if (a4) {
    uint64_t v7 = *a4;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = (void *)MEMORY[0x2166CAF50]();
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 56))(*a1, a2, a3, v7);
  return v10;
}

uint64_t MecabraGetNextCandidate(uint64_t a1)
{
  if (!a1 || !*(void *)a1) {
    return 0;
  }
  unint64_t v2 = (void *)MEMORY[0x2166CAF50]();
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 64))();
  return v3;
}

uint64_t MecabraDeclareEndOfSentence(void *a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 134218240;
    uint64_t v8 = a1;
    __int16 v9 = 2048;
    uint64_t v10 = a2;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraDeclareEndOfSentence] mecabra:%p context:%p", (uint8_t *)&v7, 0x16u);
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!a1) {
    return 0;
  }
LABEL_3:
  uint64_t result = 0;
  if (a2 && *a1)
  {
    uint64_t v6 = *a2;
    if (v6)
    {
      (*(void (**)(void, uint64_t))(*(void *)*a1 + 80))(*a1, v6);
      sub_21628F3A8(v6);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t MecabraAcceptInlineCandidates(uint64_t result, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t result = 0;
    if (a2)
    {
      if (*v3)
      {
        uint64_t v4 = *a2;
        if (*a2)
        {
          uint64_t v5 = sub_2162D1CE4(2u);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            sub_216140140((uint64_t)v18);
            for (CFIndex i = 0; i < CFArrayGetCount(*(CFArrayRef *)(v4 + 32)); ++i)
            {
              int v7 = (void *)sub_21628F1BC(v4, i);
              CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(v7, v8, v9);
              sub_2161E2FFC(Surface, buf);
              uint64_t v11 = *(void *)buf;
              size_t v12 = strlen(*(const char **)buf);
              sub_216129E78(&v19, *(uint64_t *)buf, v12);
              if (v11) {
                MEMORY[0x2166CA7C0](v11, 0x1000C8077774924);
              }
              if (i < CFArrayGetCount(*(CFArrayRef *)(v4 + 32)) - 1)
              {
                buf[0] = 124;
                sub_216129E78(&v19, (uint64_t)buf, 1);
              }
            }
            os_signpost_id_t v13 = sub_2162D1CE4(2u);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              sub_216178BC0((uint64_t)v20, v16);
              float v15 = v17 >= 0 ? v16 : (void **)v16[0];
              *(_DWORD *)buf = 134218498;
              *(void *)&uint8_t buf[4] = v3;
              __int16 v24 = 2048;
              uint8x8_t v25 = a2;
              __int16 v26 = 2080;
              CFIndex v27 = v15;
              _os_log_debug_impl(&dword_2160F5000, v13, OS_LOG_TYPE_DEBUG, "[MecabraAcceptInlineCandidates] mecabra:%p context:%p candidates:%s", buf, 0x20u);
              if (v17 < 0) {
                operator delete(v16[0]);
              }
            }
            v18[0] = *MEMORY[0x263F8C2B8];
            uint64_t v14 = *(void *)(MEMORY[0x263F8C2B8] + 72);
            *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
            uint64_t v19 = v14;
            v20[0] = MEMORY[0x263F8C318] + 16;
            if (v21 < 0) {
              operator delete((void *)v20[8]);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x2166CA750](&v22);
          }
          (*(void (**)(void, uint64_t))(*(void *)*v3 + 88))(*v3, v4);
          sub_21628F300(v4);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_2161F18F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216140418((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MecabraCandidateGetSurface(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    uint64_t v6 = *v4;
    if (v5)
    {
      int v7 = *(uint64_t (**)(void *))(v6 + 40);
      uint64_t v8 = v4;
    }
    else
    {
      int v7 = *(uint64_t (**)(void *))(v6 + 24);
      uint64_t v8 = v4;
    }
    return v7(v8);
  }
  return result;
}

uint64_t MecabraRevertLearningForCandidate(void *a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 134218498;
    uint64_t v11 = a1;
    __int16 v12 = 2048;
    os_signpost_id_t v13 = a2;
    __int16 v14 = 2112;
    uint64_t Surface = MecabraCandidateGetSurface(a3, v7, v8);
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraRevertLearningForCandidate] mecabra:%p context:%p candidate:%@", (uint8_t *)&v10, 0x20u);
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!a1) {
    return 0;
  }
LABEL_3:
  uint64_t result = 0;
  if (a3 && a2 && *a1)
  {
    if (*a2) {
      return (*(uint64_t (**)(void, void, void *))(*(void *)*a1 + 96))(*a1, *a2, a3);
    }
    return 0;
  }
  return result;
}

void MecabraCancelAnalysis(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  unint64_t v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 134217984;
    uint64_t v4 = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraCancelAnalysis] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1) {
    (*(void (**)(void))(*(void *)*a1 + 72))(*a1);
  }
}

uint64_t MecabraAcceptCandidate(uint64_t *a1, void *a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 134218498;
    uint64_t v11 = a1;
    __int16 v12 = 2112;
    uint64_t Surface = MecabraCandidateGetSurface(a2, v7, v8);
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraAcceptCandidate] mecabra:%p candidate.surface:%@ isPartial%d", (uint8_t *)&v10, 0x1Cu);
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!a1) {
    return 0;
  }
LABEL_3:
  uint64_t result = *a1;
  if (!*a1) {
    return result;
  }
  if (a2)
  {
    uint64_t result = sub_2161F1D44(a2, v7, v8);
    if (!result) {
      return result;
    }
    uint64_t result = *a1;
  }
  return (*(uint64_t (**)(uint64_t, void *, BOOL))(*(void *)result + 104))(result, a2, a3 != 0);
}

uint64_t sub_2161F1D44(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 72))(result);
    if (result != 1) {
      return (*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 7;
    }
  }
  return result;
}

uint64_t MecabraCancelLastAcceptedCandidate(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unint64_t v2 = sub_2162D1CE4(2u);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  int v4 = 134217984;
  uint64_t v5 = a1;
  _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraCancelLastAcceptedCandidate] mecabra:%p", (uint8_t *)&v4, 0xCu);
  if (!a1) {
    return 0;
  }
LABEL_3:
  uint64_t result = *a1;
  if (*a1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 112))(result);
  }
  return result;
}

uint64_t MecabraSetAdditionalConversionDictionaries(void *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 134217984;
    uint64_t v9 = a1;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraSetAdditionalConversionDictionaries] mecabra:%p", (uint8_t *)&v8, 0xCu);
    if (!a1) {
      return 0;
    }
  }
  else if (!a1)
  {
    return 0;
  }
  if (!*a1) {
    return 0;
  }
  uint64_t v5 = (void *)MEMORY[0x2166CAF50]();
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 248))(*a1, a2);
  return v6;
}

uint64_t MecabraSetAssetDataItemsForType(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 134218498;
    uint64_t v11 = a1;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    __int16 v14 = 2112;
    uint64_t v15 = a3;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraSetAssetDataItemsForType] mecabra:%p type:%ld dataItems:%@", (uint8_t *)&v10, 0x20u);
    if (!a1) {
      return 0;
    }
  }
  else if (!a1)
  {
    return 0;
  }
  if (!*a1) {
    return 0;
  }
  int v7 = (void *)MEMORY[0x2166CAF50]();
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 256))(*a1, a2, a3);
  return v8;
}

__CFArray *MecabraCopyLearningDictionaryNames(char *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  switch(sub_2161E2CB0(a1))
  {
    case 1u:
      int v3 = sub_2162A0478();
      goto LABEL_6;
    case 2u:
      int v3 = sub_21629B7E0();
      goto LABEL_6;
    case 4u:
      int v3 = sub_21629C980();
      goto LABEL_6;
    case 5u:
      int v3 = sub_21629CC88();
LABEL_6:
      CFArrayRef v4 = v3;
      if (v3)
      {
        v6.length = CFArrayGetCount(v3);
        v6.location = 0;
        CFArrayAppendArray(Mutable, v4, v6);
        CFRelease(v4);
      }
      break;
    default:
      return Mutable;
  }
  return Mutable;
}

void MecabraSaveLearningDictionaries(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  unint64_t v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 134217984;
    CFArrayRef v4 = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraSaveLearningDictionaries] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1) {
    (*(void (**)(void))(*(void *)*a1 + 120))(*a1);
  }
}

void MecabraClearLearningDictionaries(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  unint64_t v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 134217984;
    CFArrayRef v4 = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraClearLearningDictionaries] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1) {
    (*(void (**)(void))(*(void *)*a1 + 128))(*a1);
  }
}

unsigned __int8 *MecabraResetLearningDictionaries(int a1, const __CFURL *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  CFArrayRef v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (a2) {
      CFStringRef v6 = CFURLGetString(a2);
    }
    else {
      CFStringRef v6 = 0;
    }
    int v7 = 138412290;
    CFStringRef v8 = v6;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraResetLearningDictionaries] learningDictionaryDirectory:%@", (uint8_t *)&v7, 0xCu);
  }
  sub_21629834C((uint64_t)a2);
  return sub_21625D92C(a1);
}

void MecabraWaitForAsyncDataLoading(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v1 = *a1;
    if (v1)
    {
      int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1);
      unsigned int v3 = sub_2161E2834(v2);
      MecabraWaitForLanguageSpecificAsyncDataLoading(v3);
    }
  }
}

void MecabraWaitForLanguageSpecificAsyncDataLoading(unsigned int a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraWaitForLanguageSpecificAsyncDataLoading] language: %u", buf, 8u);
  }
  sub_21635B240(buf);
  sub_216203CD0(*(uint64_t *)buf, 0xFFFFFFFFFFFFFFFFLL, 0);
  sub_21635B4B0(&v7);
  sub_216203CD0(v7, 0xFFFFFFFFFFFFFFFFLL, 0);
  sub_21617B6A4(&v5);
  sub_21617CF20(v5, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (a1 - 1 <= 1)
  {
    sub_21617B83C(a1, 0, 0, &v3);
    sub_21617CF20(v3, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (v4) {
      sub_2161121B0(v4);
    }
    if (a1 == 1)
    {
      sub_216241AA0(1u, 0, &v3);
      sub_2162041C8(v3, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (v4) {
        sub_2161121B0(v4);
      }
    }
  }
  if (v6) {
    sub_2161121B0(v6);
  }
  if (v8) {
    sub_2161121B0(v8);
  }
  if (v10) {
    sub_2161121B0(v10);
  }
}

void sub_2161F2620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  if (a12) {
    sub_2161121B0(a12);
  }
  if (a14) {
    sub_2161121B0(a14);
  }
  if (a16) {
    sub_2161121B0(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MecabraCreateSyllableSequences(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 >= 1) {
    return (*(uint64_t (**)(void))(**(void **)a1 + 400))();
  }
  else {
    return 0;
  }
}

void MecabraSetIsTypeToSiriMode(void *a1, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned __int8 ptr = a2;
  CFArrayRef v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v13 = a1;
    __int16 v14 = 1024;
    int v15 = a2;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraSetIsTypeToSiriMode] mecabra:%p isTypeToSiriMode:%d", buf, 0x12u);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    uint64_t v5 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v6 = os_signpost_id_make_with_pointer(v5, &ptr);
    uint64_t v7 = sub_2162D1CE4(0xDu);
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      CFStringRef v8 = v7;
      if (os_signpost_enabled(v7))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v13) = ptr;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SetIsTypeToSiriMode", "isTypeToSiriMode:%d", buf, 8u);
      }
    }
    (*(void (**)(void, BOOL))(*(void *)*a1 + 176))(*a1, ptr != 0);
    uint64_t v9 = sub_2162D1CE4(0xDu);
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v10 = v9;
      if (os_signpost_enabled(v9))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v10, OS_SIGNPOST_INTERVAL_END, v6, "SetIsTypeToSiriMode", (const char *)&unk_2163CBB73, buf, 2u);
      }
    }
  }
}

void MecabraSetAddressBookNamePhoneticPairs(void *a1, CFArrayRef theArray)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFIndex ptr = Count;
  uint64_t v5 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    __int16 v14 = a1;
    __int16 v15 = 2048;
    CFIndex v16 = Count;
    _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[MecabraSetAddressBookNamePhoneticPairs] mecabra:%p size:%ld", buf, 0x16u);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    os_signpost_id_t v6 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v7 = os_signpost_id_make_with_pointer(v6, &ptr);
    CFStringRef v8 = sub_2162D1CE4(0xDu);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v9 = v8;
      if (os_signpost_enabled(v8))
      {
        *(_DWORD *)buf = 134217984;
        __int16 v14 = (void *)ptr;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SetAddressBook", "Address book reset (%ld items).", buf, 0xCu);
      }
    }
    (*(void (**)(void, CFArrayRef))(*(void *)*a1 + 144))(*a1, theArray);
    int v10 = sub_2162D1CE4(0xDu);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = v10;
      if (os_signpost_enabled(v10))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v11, OS_SIGNPOST_INTERVAL_END, v7, "SetAddressBook", (const char *)&unk_2163CBB73, buf, 2u);
      }
    }
  }
}

void MecabraSetUserWordKeyPairs(void *a1, CFArrayRef theArray)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFIndex ptr = Count;
  uint64_t v5 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    __int16 v14 = a1;
    __int16 v15 = 2048;
    CFIndex v16 = Count;
    _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[MecabraSetUserWordKeyPairs] mecabra:%p size:%ld", buf, 0x16u);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    os_signpost_id_t v6 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v7 = os_signpost_id_make_with_pointer(v6, &ptr);
    CFStringRef v8 = sub_2162D1CE4(0xDu);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v9 = v8;
      if (os_signpost_enabled(v8))
      {
        *(_DWORD *)buf = 134217984;
        __int16 v14 = (void *)ptr;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SetUserWord", "User word reset (%ld items).", buf, 0xCu);
      }
    }
    (*(void (**)(void, CFArrayRef))(*(void *)*a1 + 152))(*a1, theArray);
    int v10 = sub_2162D1CE4(0xDu);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = v10;
      if (os_signpost_enabled(v10))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v11, OS_SIGNPOST_INTERVAL_END, v7, "SetUserWord", (const char *)&unk_2163CBB73, buf, 2u);
      }
    }
  }
}

void MecabraSetSupplementalLexiconEntries(void *a1, CFArrayRef theArray)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t v5 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 134218240;
    os_signpost_id_t v7 = a1;
    __int16 v8 = 2048;
    CFIndex v9 = Count;
    _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[MecabraSetSupplementalLexiconEntries] mecabra:%p size:%ld", (uint8_t *)&v6, 0x16u);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1) {
    (*(void (**)(void, CFArrayRef))(*(void *)*a1 + 408))(*a1, theArray);
  }
}

uint64_t MecabraFindSupplementalLexiconCandidatesWithinContext(uint64_t result, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (result)
  {
    int v2 = (void *)result;
    uint64_t result = 0;
    if (a2)
    {
      if (*v2)
      {
        uint64_t v3 = *a2;
        CFArrayRef v4 = sub_2162D1CE4(2u);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          sub_2161F0888(__p, v3);
          uint64_t v5 = sub_2162D1CE4(2u);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            int v6 = __p;
            if (v8 < 0) {
              int v6 = (void **)__p[0];
            }
            *(_DWORD *)buf = 134218242;
            uint64_t v10 = v2;
            __int16 v11 = 2080;
            __int16 v12 = v6;
            _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[MecabraFindSupplementalLexiconCandidatesWithinContext] mecabra:%p context:%s", buf, 0x16u);
          }
          if (v8 < 0) {
            operator delete(__p[0]);
          }
        }
        return (*(uint64_t (**)(void, uint64_t))(*(void *)*v2 + 416))(*v2, v3);
      }
    }
  }
  return result;
}

void sub_2161F2EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MecabraPreheatResources(void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 134217984;
    uint64_t v10 = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraPreheatResources] mecabra:%p", (uint8_t *)&v9, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    uint64_t v3 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v4 = os_signpost_id_make_with_pointer(v3, a1);
    uint64_t v5 = sub_2162D1CE4(0xDu);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v6 = v5;
      if (os_signpost_enabled(v5))
      {
        LOWORD(v9) = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MecabraPreheatResources", (const char *)&unk_2163CBB73, (uint8_t *)&v9, 2u);
      }
    }
    (*(void (**)(void))(*(void *)*a1 + 320))(*a1);
    os_signpost_id_t v7 = sub_2162D1CE4(0xDu);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      char v8 = v7;
      if (os_signpost_enabled(v7))
      {
        LOWORD(v9) = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v8, OS_SIGNPOST_INTERVAL_END, v4, "MecabraPreheatResources", (const char *)&unk_2163CBB73, (uint8_t *)&v9, 2u);
      }
    }
  }
}

void MecabraHandleMemoryPressure(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int ptr = a2;
  int v6 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(void *)__int16 v15 = a1;
    *(_WORD *)&v15[8] = 1024;
    *(_DWORD *)&v15[10] = a2;
    __int16 v16 = 2048;
    uint64_t v17 = a3;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraHandleMemoryPressure] mecabra:%p level:%uld, excessMemoryInBytes:%ld", buf, 0x1Cu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    os_signpost_id_t v7 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v8 = os_signpost_id_make_with_pointer(v7, &ptr);
    int v9 = sub_2162D1CE4(0xDu);
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v10 = v9;
      if (os_signpost_enabled(v9))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)__int16 v15 = ptr;
        *(_WORD *)&v15[4] = 2048;
        *(void *)&v15[6] = a3;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "MecabraHandleMemoryPressure", "level: %d, excessMemoryInBytes: %ld", buf, 0x12u);
      }
    }
    (*(void (**)(void, void, uint64_t))(*(void *)*a1 + 328))(*a1, ptr, a3);
    uint64_t v11 = sub_2162D1CE4(0xDu);
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      __int16 v12 = v11;
      if (os_signpost_enabled(v11))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v12, OS_SIGNPOST_INTERVAL_END, v8, "MecabraHandleMemoryPressure", (const char *)&unk_2163CBB73, buf, 2u);
      }
    }
  }
}

void MecabraRelease(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 134217984;
    os_signpost_id_t v4 = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraRelease] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    (*(void (**)(void))(*(void *)*a1 + 160))(*a1);
    if (*a1) {
      (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
    }
  }
  MEMORY[0x2166CA800](a1, 0x20C4093837F09);
}

uint64_t MecabraPredictionAnalyze(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1 || !*a1) {
    return 0;
  }
  uint64_t v10 = (void *)MEMORY[0x2166CAF50]();
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 360))(*a1, a2, a3, a4, a5);
  return v11;
}

uint64_t MecabraPredictionAnalyzeWithContext(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t ptr = a4;
  os_signpost_id_t v8 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    char v21 = a1;
    __int16 v22 = 2048;
    uint64_t v23 = a4;
    _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "[MecabraPredictionAnalyzeWithContext] mecabra:%p options:0x%lx", buf, 0x16u);
    if (!a1) {
      return 0;
    }
  }
  else if (!a1)
  {
    return 0;
  }
  if (!*a1) {
    return 0;
  }
  int v9 = (void *)MEMORY[0x2166CAF50]();
  if (a2) {
    uint64_t v10 = *a2;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v12 = os_signpost_id_make_with_pointer(v11, &ptr);
  uint64_t v13 = sub_2162D1CE4(0xDu);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    __int16 v14 = v13;
    if (os_signpost_enabled(v13))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v12, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_2163CBB73, buf, 2u);
    }
  }
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 368))(*a1, v10, a3, ptr);
  __int16 v16 = sub_2162D1CE4(0xDu);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v17, OS_SIGNPOST_INTERVAL_END, v12, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_2163CBB73, buf, 2u);
    }
  }
  return v15;
}

uint64_t MecabraPredictionAcceptCandidate(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)result;
    if (result) {
      return (*(uint64_t (**)(void))(*(void *)result + 376))();
    }
  }
  return result;
}

uint64_t MecabraPredictionGetNextCandidate(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 384))();
  }
  else {
    return 0;
  }
}

uint64_t MecabraCreateCandidateFromContextString(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v6 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 134218498;
    int v9 = a1;
    __int16 v10 = 2112;
    uint64_t v11 = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraCreateCandidateFromContextString] mecabra:%p string:[%@] isRightContext:%d", (uint8_t *)&v8, 0x1Cu);
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*a1) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 344))(*a1, a2, a3);
    }
  }
  return result;
}

uint64_t MecabraGetLengthForContextString(uint64_t result, const __CFString *a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = 0;
    if (a2)
    {
      if (*(void *)v4)
      {
        int v6 = sub_2162D1CE4(2u);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          int v9 = 134218498;
          uint64_t v10 = v4;
          __int16 v11 = 2112;
          CFStringRef v12 = a2;
          __int16 v13 = 1024;
          int v14 = a3;
          _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraGetLengthForContextString] mecabra:%p string:[%@] isRightContext:%d", (uint8_t *)&v9, 0x1Cu);
        }
        int v7 = (*(uint64_t (**)(void))(**(void **)v4 + 16))();
        int v8 = sub_2161E2834(v7);
        return sub_216284C94(v8, a2, a3 != 0);
      }
    }
  }
  return result;
}

void *MecabraCandidateCopy(void *a1, const char *a2, uint64_t a3)
{
  if (a1) {
    return [a1 copyWithZone:a2];
  }
  return a1;
}

void *MecabraCandidateGetType(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(*[result a2:a3] + 72);
    return (void *)v3();
  }
  return result;
}

uint64_t MecabraCandidateSetDisplayString(void *a1, const char *a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 6) {
    return 0;
  }

  return sub_2163334B0(v5, (CFStringRef)a2);
}

uint64_t MecabraCandidateGetAttributes(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 136);
    return v4();
  }
  return result;
}

uint64_t MecabraCandidateGetAnalysisString(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (void *)v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(void *))(*(void *)v5 + 72))(v5) != 7)
  {
    if ((*(unsigned int (**)(void *))(*(void *)v5 + 72))(v5) == 6) {
      goto LABEL_5;
    }
    return 0;
  }
  uint64_t v5 = sub_2161F3B4C(a1, v6, v7);
LABEL_5:
  int v8 = *(uint64_t (**)(void *))(*(void *)v5 + 56);

  return v8(v5);
}

void *sub_2161F3B4C(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    return __dynamic_cast(result, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  }
  return result;
}

uint64_t MecabraCandidateGetConvertedAnalysisString(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 1
    || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 7)
  {
    int v8 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v6, v7) + 224);
    return v8();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 6) {
    return 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 176);

  return v10(v5);
}

uint64_t MecabraCandidateGetDictionaryReading(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 1
    || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 7)
  {
    int v8 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v6, v7) + 232);
    return v8();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 6) {
    return 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 184);

  return v10(v5);
}

void *MecabraCandidateIsPersonName(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    int v3 = result;
    uint64_t result = (void *)sub_2161F1D44(result, a2, a3);
    if (result)
    {
      int v6 = sub_2161F3B4C(v3, v4, v5);
      return (void *)(*(uint64_t (**)(void *))(*(void *)v6 + 184))(v6);
    }
  }
  return result;
}

uint64_t MecabraCandidateIsExtensionCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 80))(result);
  }
  return result;
}

void *MecabraCandidateIsExtensionForCandidateBar(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = sub_2161F3B4C(a1, a2, a3);
  if (result)
  {
    uint64_t v4 = result;
    if ((*(unsigned int (**)(void *))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(void *))(*(void *)v4 + 72))(v4) == 7)
    {
      return (void *)((*(unsigned int (**)(void *))(*(void *)v4 + 96))(v4) == 68);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MecabraCandidateIsEmojiCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 7)
    {
      int v8 = sub_2161F3B4C(a1, v6, v7);
      return (*(uint64_t (**)(void *))(*(void *)v8 + 176))(v8);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5) & 0x40;
    }
  }
  return result;
}

uint64_t MecabraCandidateIsLearningDictionaryCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 7)
    {
      int v8 = sub_2161F3B4C(a1, v6, v7);
      return (*(unsigned int (**)(void *))(*(void *)v8 + 96))(v8) == 76;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MecabraCandidateIsUserWordCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 7)
    {
      int v8 = sub_2161F3B4C(a1, v6, v7);
      return (*(unsigned int (**)(void *))(*(void *)v8 + 96))(v8) == 85;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MecabraCandidateIsPredictionCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result) {
    return ((*(unsigned int (**)(uint64_t))(*(void *)result + 104))(result) >> 9) & 1;
  }
  return result;
}

void *MecabraCandidateIsFuzzyMatchCandidate(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    int v3 = result;
    uint64_t result = (void *)sub_2161F1D44(result, a2, a3);
    if (result)
    {
      int v6 = sub_2161F3B4C(v3, v4, v5);
      return (void *)(*(uint64_t (**)(void *))(*(void *)v6 + 192))(v6);
    }
  }
  return result;
}

void *MecabraCandidateIsAutocorrectionCandidate(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    int v3 = result;
    uint64_t result = (void *)sub_2161F1D44(result, a2, a3);
    if (result)
    {
      int v6 = sub_2161F3B4C(v3, v4, v5);
      return (void *)(*(uint64_t (**)(void *))(*(void *)v6 + 200))(v6);
    }
  }
  return result;
}

uint64_t MecabraCandidateIsOTAWordlistCandidate(uint64_t result, const char *a2, uint64_t a3)
{
  if (result)
  {
    int v3 = (void *)result;
    uint64_t result = sub_2161F1D44((void *)result, a2, a3);
    if (result)
    {
      uint64_t v6 = [v3 v4:v5];
      if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 104))(v6) & 0x2000) != 0)
      {
        return 1;
      }
      else
      {
        int v9 = sub_2161F3B4C(v3, v7, v8);
        return (*(uint64_t (**)(void *))(*(void *)v9 + 264))(v9);
      }
    }
  }
  return result;
}

void *MecabraCandidateIsRegionalCandidate(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    int v3 = result;
    uint64_t result = (void *)sub_2161F1D44(result, a2, a3);
    if (result)
    {
      uint64_t v6 = [v3 v4:v5];
      return (void *)(((*(unsigned int (**)(uint64_t))(*(void *)v6 + 104))(v6) >> 14) & 1);
    }
  }
  return result;
}

unint64_t MecabraCandidateIsBilingualCandidate(unint64_t result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = [result performSelector:a2 withObject:a3];
    return ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(v3) & 0x80) != 0
        || (*(unsigned int (**)(uint64_t))(*(void *)v3 + 96))(v3) == 71;
  }
  return result;
}

void *MecabraCandidateIsPartialCandidate(void *result, const char *a2, uint64_t a3)
{
  if (result) {
    return (void *)(MecabraCandidateGetMatchedLengthType(result, a2, a3) == 1);
  }
  return result;
}

uint64_t MecabraCandidateGetMatchedLengthType(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 7)
    {
      uint64_t v8 = sub_2161F3B4C(a1, v6, v7);
      LOWORD(result) = (*(uint64_t (**)(void *))(*(void *)v8 + 408))(v8);
    }
    else
    {
      LOWORD(result) = 0;
    }
  }
  return (unsigned __int16)result;
}

void *MecabraCandidateIsMLTapTypingCandidate(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = (void *)sub_2161F1D44(result, a2, a3);
    if (result)
    {
      uint64_t v6 = sub_2161F3B4C(v3, v4, v5);
      return (void *)(*(uint64_t (**)(void *))(*(void *)v6 + 280))(v6);
    }
  }
  return result;
}

uint64_t sub_2161F45D8(void *a1, const char *a2, uint64_t a3)
{
  if (!a1 || !sub_2161F1D44(a1, a2, a3)) {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v4, v5) + 208);

  return v6();
}

void MecabraCreateHandwritingCandidate()
{
}

void sub_2161F46E0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C408D75F3D8);
  _Unwind_Resume(a1);
}

uint64_t sub_2161F4704(uint64_t a1)
{
  int v2 = [MecabraCandidate alloc];

  return [v2 initWithCandidate:v3 a1];
}

void MecabraConversionCandidateCreate(int a1, const __CFString *a2)
{
}

void MecabraProactiveCandidateCreate()
{
}

void sub_2161F4800(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

uint64_t MecabraCandidateGetNextPhraseBoundary(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return -1;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return -1;
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v6, v7) + 368);

  return v8();
}

void *MecabraCandidateGetWordCount(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t result = [result a2:a3];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*(void *)result + 48))(result);
    }
  }
  return result;
}

uint64_t MecabraCandidateGetWordLengthAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = [a1 a2:a3];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v5 + 120))(v5, a2);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    return v8;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  __int16 v11 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v9, v10) + 128);

  return v11();
}

uint64_t MecabraCandidateGetWordReadingLengthAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = [a1 a2:a3];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v5 + 120))(v5, a2);
  if (v7)
  {
    unsigned __int16 v8 = *(uint64_t (**)(void))(*(void *)v7 + 16);
    return v8();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  CFStringRef v12 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v10, v11) + 312);

  return v12();
}

uint64_t MecabraCandidateGetWordDictionaryReadingLengthAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = [a1 a2:a3];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v5 + 120))(v5, a2);
  if (v7)
  {
    unsigned __int16 v8 = *(uint64_t (**)(void))(*(void *)v7 + 16);
    return v8();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  CFStringRef v12 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v10, v11) + 320);

  return v12();
}

uint64_t MecabraCandidateCreateWordLocaleAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  unsigned __int16 v8 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v6, v7) + 328);

  return v8();
}

uint64_t MecabraCandidateWordAtIndexIsFromSystemDictionary(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = [a1 a2:a3];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v5 + 120))(v5, a2);
  if (v7)
  {
    unsigned __int16 v8 = *(uint64_t (**)(void))(*(void *)v7 + 32);
    return v8();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  CFStringRef v12 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v10, v11) + 336);

  return v12();
}

BOOL MecabraCandidateHasAlternativeSurfaceFormForWordAtIndex(void *a1, unint64_t a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DA00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DA00))
  {
    sub_2161C04AC(0);
    qword_26797D9F8 = (uint64_t)&qword_26797EF20;
    __cxa_guard_release(&qword_26797DA00);
  }
  uint64_t v5 = sub_2161F3B4C(a1, (const char *)a2, a3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0);
  BOOL v7 = 0;
  if ((a2 & 0x8000000000000000) != 0) {
    return v7;
  }
  uint64_t v8 = (uint64_t)v6;
  if (!v6) {
    return v7;
  }
  if ((*(uint64_t (**)(void *))(*(void *)v6 + 48))(v6) <= a2) {
    return 0;
  }
  uint64_t v9 = sub_2162319EC(v8, a2);
  unint64_t v11 = v10;
  unsigned int v12 = *(unsigned __int16 *)((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 560))(v8, a2) + 30);
  BOOL v13 = *(unsigned __int16 *)(qword_26797D9F8 + 72) <= v12 && *(unsigned __int16 *)(qword_26797D9F8 + 74) >= v12;
  BOOL v14 = *(unsigned __int16 *)(qword_26797D9F8 + 76) <= v12 && *(unsigned __int16 *)(qword_26797D9F8 + 78) >= v12;
  if (!v13 && !v14) {
    return 0;
  }
  if (v11)
  {
    BOOL v7 = 0;
    for (unint64_t i = 0; i != v11; v7 = i >= v11)
    {
      int v16 = *(unsigned __int16 *)(v9 + 2 * i);
      if ((v16 - 12353) >= 0x56 && v16 != 12540 && v16 != 12316) {
        break;
      }
      ++i;
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void sub_2161F518C(_Unwind_Exception *a1)
{
}

__CFArray *MecabraCandidateCopySyllableLengthArrayForWordAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  uint64_t v8 = sub_2161F3B4C(a1, v6, v7);
  (*(void (**)(void **__return_ptr))(*(void *)v8 + 424))(__p);
  uint64_t v9 = sub_2161E4FD4((__int16 **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_2161F52A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MecabraCandidateGetLcAttrAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v6, v7) + 344);

  return v8();
}

uint64_t MecabraCandidateGetRcAttrAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v6, v7) + 352);

  return v8();
}

uint64_t MecabraCandidateGetTrieValueAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(a1, v6, v7) + 360);

  return v8();
}

uint64_t MecabraCandidateGetKindAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (v4
    && ((uint64_t v5 = (const void *)v4, (*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 1)
     || (*(unsigned int (**)(const void *))(*(void *)v5 + 72))(v5) == 7)
    && (uint64_t v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BA018, 0)) != 0)
  {
    return (unsigned __int16)*(_DWORD *)(*(uint64_t (**)(void *, const char *))(*(void *)v6 + 560))(v6, a2);
  }
  else
  {
    LOWORD(v7) = 0;
  }
  return (unsigned __int16)v7;
}

uint64_t MecabraCandidateGetCostAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v5 = (const void *)result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(const void *))(*(void *)v5 + 72))(v5) == 7)
    {
      uint64_t result = (uint64_t)__dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BA018, 0);
      if (result) {
        return *(int *)((*(uint64_t (**)(uint64_t, const char *))(*(void *)result + 560))(result, a2) + 4);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MecabraCandidateGetLastPrefixValue(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 7)
    {
      uint64_t v8 = sub_2161F3B4C(a1, v6, v7);
      return (*(uint64_t (**)(void *))(*(void *)v8 + 376))(v8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MecabraCandidateGetWeight(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 112);
    return v4();
  }
  return result;
}

uint64_t MecabraCandidateGetKind(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 7)
    {
      uint64_t v8 = sub_2161F3B4C(a1, v6, v7);
      LOWORD(result) = (*(uint64_t (**)(void *))(*(void *)v8 + 96))(v8);
    }
    else
    {
      LOWORD(result) = 0;
    }
  }
  return (unsigned __int16)result;
}

uint64_t MecabraCandidateGetMatchType(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 7)
    {
      uint64_t v8 = sub_2161F3B4C(a1, v6, v7);
      LOWORD(result) = (*(uint64_t (**)(void *))(*(void *)v8 + 416))(v8);
    }
    else
    {
      LOWORD(result) = 0;
    }
  }
  return (unsigned __int16)result;
}

uint64_t MecabraCandidateIsSinglePhraseCandidate(void *a1, const char *a2, uint64_t a3)
{
  return (MecabraCandidateGetMatchType(a1, a2, a3) >> 3) & 1;
}

double MecabraCandidateGetLMProbability(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0.0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return 0.0;
  }
  uint64_t v8 = *(void (**)(void))(*(void *)sub_2161F3B4C(a1, v6, v7) + 392);

  v8();
  return result;
}

uint64_t MecabraCandidateGetBaseCost(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    uint64_t v4 = (const void *)result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(const void *))(*(void *)v4 + 72))(v4) == 7)
    {
      uint64_t result = (uint64_t)__dynamic_cast(v4, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BA018, 0);
      if (result) {
        return (*(int (**)(uint64_t))(*(void *)result + 384))(result);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int *MecabraCandidateGetMatchPenalty(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = (int *)[a1 a2:a3];
  if (result)
  {
    uint64_t v4 = result;
    if ((*(unsigned int (**)(int *))(*(void *)result + 72))(result) == 1
      || (*(unsigned int (**)(int *))(*(void *)v4 + 72))(v4) == 7)
    {
      uint64_t result = (int *)__dynamic_cast(v4, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BA018, 0);
      if (result) {
        return (int *)result[55];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *MecabraCandidateCopySyllableLengthArrayInAnalysisString(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  uint64_t v8 = sub_2161F3B4C(a1, v6, v7);
  (*(void (**)(void **__return_ptr))(*(void *)v8 + 432))(__p);
  unint64_t v11 = sub_2161E4FD4((__int16 **)__p);
  __p[3] = v11;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unsigned int v12 = sub_2161F3B4C(a1, v9, v10);
  if (!(*(unsigned int (**)(void *))(*(void *)v12 + 456))(v12)) {
    return v11;
  }
  BOOL v14 = sub_2161E9574(a1, (const char *)v11, v13);
  if (v11) {
    CFRelease(v11);
  }
  return v14;
}

void sub_2161F5E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *MecabraCandidateCopySyllableLengthArrayInConvertedAnalysisString(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  uint64_t v8 = sub_2161F3B4C(a1, v6, v7);
  (*(void (**)(void **__return_ptr))(*(void *)v8 + 432))(__p);
  uint64_t v9 = sub_2161E4FD4((__int16 **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_2161F5F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *MecabraCandidateCopySyllableLengthArrayInDictionaryReading(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  uint64_t v8 = sub_2161F3B4C(a1, v6, v7);
  (*(void (**)(void **__return_ptr))(*(void *)v8 + 432))(__p);
  uint64_t v9 = sub_2161E4FD4((__int16 **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_2161F609C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *MecabraCandidateIsSupplementalLexiconCandidate(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = [result a2:a3];
    return (void *)((*(unsigned int (**)(uint64_t))(*(void *)v3 + 96))(v3) == 89);
  }
  return result;
}

void *MecabraCandidateGetSupplementalLexiconIdentifiers(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(*objc_msgSend_rawCandidate(result, a2, a3) + 160))();
    return (void *)v3();
  }
  return result;
}

void *MecabraCandidateGetSupplementalLexiconItemPrefix(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*[result a2:a3] + 168);
    return (void *)v3();
  }
  return result;
}

void *MecabraCandidateExactlyCoversInputString(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = (void *)sub_2161F1D44(result, a2, a3);
    if (result)
    {
      uint64_t v6 = [v3 v4:v5];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 96))(v6) == 89)
      {
        uint64_t v9 = sub_2161F3B4C(v3, v7, v8);
        return (void *)(*(uint64_t (**)(void *))(*(void *)v9 + 296))(v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFStringRef sub_2161F6244(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (v4
    && ((uint64_t v7 = v4, (*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 1)
     || (*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 7))
  {
    double LMProbability = MecabraCandidateGetLMProbability(a1, v5, v6);
    uint64_t Surface = MecabraCandidateGetSurface(a1, v9, v10);
    uint64_t AnalysisString = MecabraCandidateGetAnalysisString(a1, v12, v13);
    Converteduint64_t AnalysisString = MecabraCandidateGetConvertedAnalysisString(a1, v15, v16);
    uint64_t DictionaryReading = MecabraCandidateGetDictionaryReading(a1, v18, v19);
    uint64_t v23 = [a1 v21:v22];
    if (v23) {
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 112))(v23);
    }
    double v24 = -1000.0;
    if (LMProbability != -1.79769313e308) {
      double v24 = LMProbability;
    }
    return CFStringCreateWithFormat(0, 0, @"%@ (AS:%@ CAS:%@ DR:%@), %d, %f", Surface, AnalysisString, ConvertedAnalysisString, DictionaryReading, v23, *(void *)&v24);
  }
  else
  {
    uint64_t v26 = MecabraCandidateGetSurface(a1, v5, v6);
    uint64_t v29 = MecabraCandidateGetAnalysisString(a1, v27, v28);
    uint64_t v32 = MecabraCandidateGetConvertedAnalysisString(a1, v30, v31);
    uint64_t v35 = MecabraCandidateGetDictionaryReading(a1, v33, v34);
    uint64_t v38 = [a1 v36:v37];
    if (v38) {
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 112))(v38);
    }
    return CFStringCreateWithFormat(0, 0, @"%@ (AS:%@ CAS:%@ DR:%@), %d", v26, v29, v32, v35, v38);
  }
}

uint64_t MecabraSetCandidateOrderAdjustment(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t result = *(void *)result;
    if (result) {
      return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)result + 168))(result, a2 != 0);
    }
  }
  return result;
}

void **MecabraWorkingSetAddString(void **a1, const char *a2)
{
  return MecabraWorkingSetAddStringWithContext(a1, 0, a2);
}

void **MecabraWorkingSetAddStringWithContext(void **result, uint64_t *a2, const char *a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = (void **)*result;
    if (result)
    {
      uint64_t result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
      if (result <= 0xE && ((1 << (char)result) & 0x5800) != 0)
      {
        uint64_t v7 = (void ***)(*(uint64_t (**)(void))(*(void *)*v3 + 424))(*v3);
        if (a2) {
          uint64_t v8 = *a2;
        }
        else {
          uint64_t v8 = 0;
        }
        return sub_216298DC0(v7, v8, a3);
      }
    }
  }
  return result;
}

void *MecabraWorkingSetContainsString(void *a1, const __CFString *a2)
{
  return MecabraWorkingSetContainsStringWithContext(a1, 0, a2);
}

void *MecabraWorkingSetContainsStringWithContext(void *result, const char **a2, const __CFString *a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = (void *)*result;
    if (result)
    {
      unsigned int v6 = (*(uint64_t (**)(void *))(*result + 16))(result);
      if (v6 > 0xE || ((1 << v6) & 0x5800) == 0)
      {
        return 0;
      }
      else
      {
        uint64_t v8 = (void ***)(*(uint64_t (**)(void))(*(void *)*v3 + 424))(*v3);
        if (a2) {
          uint64_t v9 = *a2;
        }
        else {
          uint64_t v9 = 0;
        }
        return (void *)sub_216298E38(v8, v9, a3);
      }
    }
  }
  return result;
}

uint64_t MecabraDeleteEntryFromLearningDictionary(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)result;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 184))(result);
    }
  }
  return result;
}

uint64_t MecabraDeleteCandidateFromLearningDictionary(uint64_t result, uint64_t a2)
{
  if (result)
  {
    int v2 = (uint64_t *)result;
    uint64_t result = 0;
    if (a2)
    {
      uint64_t v3 = *v2;
      if (v3) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 192))(v3);
      }
    }
  }
  return result;
}

CFMutableArrayRef MecabraCreatePinyinSyllableArray(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0) {
    return (CFMutableArrayRef)(*(uint64_t (**)(void))(*(void *)v1 + 232))();
  }
  else {
    return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
  }
}

uint64_t MecabraSetFuzzyPinyinPairs(void *a1, CFArrayRef theArray)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a1 || !*a1) {
    return 0;
  }
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFIndex ptr = Count;
  unsigned int v6 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v7 = os_signpost_id_make_with_pointer(v6, &ptr);
  uint64_t v8 = sub_2162D1CE4(0xDu);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v9 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_DWORD *)buf = 134217984;
      CFIndex v15 = ptr;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "MecabraSetFuzzyPinyinPairs", "Reset (%ld) fuzzy pairs.", buf, 0xCu);
    }
  }
  uint64_t v5 = (*(uint64_t (**)(void, CFArrayRef))(*(void *)*a1 + 240))(*a1, theArray);
  uint64_t v10 = sub_2162D1CE4(0xDu);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v11 = v10;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v11, OS_SIGNPOST_INTERVAL_END, v7, "MecabraSetFuzzyPinyinPairs", (const char *)&unk_2163CBB73, buf, 2u);
    }
  }
  return v5;
}

uint64_t MecabraGetMaximalCharacterInputCodeLength(int a1, int a2)
{
  if ((a1 - 3) < 0xFFFFFFFE || a2 != 0) {
    return 0;
  }
  uint64_t result = sub_216367114();
  if (result) {
    return *(unsigned __int16 *)(result + 8);
  }
  return result;
}

uint64_t MecabraGetInputCodeForCharacters(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7)
{
  if (result)
  {
    uint64_t v8 = result;
    uint64_t result = 0;
    if ((a4 - 3) >= 0xFFFFFFFE && !a5)
    {
      uint64_t result = sub_216367114();
      if (result)
      {
        if (a4 == 1) {
          int v13 = 1;
        }
        else {
          int v13 = 2;
        }
        return sub_216367238(result, v8, a2, a3, v13, a6, a7);
      }
    }
  }
  return result;
}

uint64_t MecabraSetBuildDynamicDictionariesAsynchronously(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)result;
    if (result) {
      return (*(uint64_t (**)(void))(*(void *)result + 272))();
    }
  }
  return result;
}

uint64_t MecabraCangjieCodeIsValid(unsigned char *a1, unint64_t a2)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_26797DA10, memory_order_acquire) != -1)
  {
    os_signpost_id_t v7 = &v5;
    unsigned int v6 = &v7;
    std::__call_once(&qword_26797DA10, &v6, (void (__cdecl *)(void *))sub_216204654);
  }
  return sub_21628DA78((uint64_t *)qword_26797DA08, a1, a2);
}

uint64_t MecabraSetWubixingStandard(uint64_t result, int a2)
{
  if (result)
  {
    int v2 = (void *)result;
    uint64_t result = *(void *)result;
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result == 10)
      {
        uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*v2 + 424))(*v2);
        return sub_216275A24(v4, a2);
      }
    }
  }
  return result;
}

void *MecabraGetWubixingStandard(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)*result;
    if (result)
    {
      if ((*(unsigned int (**)(void *))(*result + 16))(result) == 10) {
        return (void *)*(unsigned int *)((*(uint64_t (**)(void))(*(void *)*v1 + 424))(*v1) + 344);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MecabraCreateWubixingCodesFromSurface(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *a1;
  if (!v3 || (*(unsigned int (**)(uint64_t))(*(void *)v3 + 16))(v3) != 10) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 424))(*a1);

  return sub_2162759C0(v5, a2);
}

void *MecabraCandidateGetWubixingType(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t result = [result a2:a3];
    if (result)
    {
      uint64_t v3 = result;
      if ((*(unsigned int (**)(void *))(*(void *)result + 72))(result) == 1
        || (*(unsigned int (**)(void *))(*(void *)v3 + 72))(v3) == 7)
      {
        BOOL v4 = ((*(uint64_t (**)(void *))(*(void *)v3 + 104))(v3) & 0x8080) == 0;
        return (void *)(((*(unsigned int (**)(void *))(*(void *)v3 + 104))(v3) >> 14) & 4 | (unint64_t)(2 * v4));
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MecabraSetDebuggingLogEnabled(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)result;
    if (result) {
      return (*(uint64_t (**)(void))(*(void *)result + 288))();
    }
  }
  return result;
}

uint64_t MecabraGetDebuggingLog(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 280))();
  }
  else {
    return 0;
  }
}

uint64_t MecabraCreateCustomDebugInfo(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 296))();
  }
  else {
    return 0;
  }
}

void *MecabraFlushDynamicData(void *result, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (result)
  {
    int v2 = result;
    if (*result)
    {
      BOOL v4 = sub_2162D1CE4(2u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        int v5 = 134217984;
        unsigned int v6 = v2;
        _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraFlushDynamicData] mecabra:%p", (uint8_t *)&v5, 0xCu);
      }
      return (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v2 + 304))(*v2, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void MecabraPerformMaintenance(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 134217984;
    BOOL v4 = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraPerformMaintenance] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1) {
    (*(void (**)(void))(*(void *)*a1 + 312))(*a1);
  }
}

uint64_t MecabraCandidateGetRangeOfWordAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 a2:a3];
  if (!v4) {
    return -1;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v4 + 120))(v4, a2);
  if (!v6)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5) > (unint64_t)a2)
    {
      if (a2)
      {
        uint64_t v9 = 0;
        LODWORD(v10) = 0;
        do
          uint64_t v10 = v10
              + (*(unsigned int (**)(uint64_t, const char *))(*(void *)v5 + 128))(v5, v9++);
        while (a2 != v9);
      }
      else
      {
        uint64_t v10 = 0;
      }
      (*(void (**)(uint64_t, const char *))(*(void *)v5 + 128))(v5, a2);
      return v10;
    }
    return -1;
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)v6 + 24);

  return v7();
}

uint64_t MecabraCreateAlternateWordArrayForWordAtIndex(uint64_t *a1, void *a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *a1;
  if (!v4) {
    return 0;
  }
  if (a2)
  {
    if (sub_2161F1D44(a2, (const char *)a2, a3))
    {
      uint64_t v4 = *a1;
      goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 336);

  return v5();
}

uint64_t MecabraSpecialtyDictionaryCreateWithEntries(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 134217984;
    uint64_t v9 = a2;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryCreateWithEntries] entries:%p", (uint8_t *)&v8, 0xCu);
  }
  uint64_t result = 0;
  if (!a1)
  {
    if (a2) {
      return sub_216339A94(a2, a3);
    }
  }
  return result;
}

CFDataRef MecabraSpecialtyDictionaryGetData(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 134217984;
    uint64_t v5 = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryGetData] dictionary:%p", (uint8_t *)&v4, 0xCu);
    if (a1) {
      return sub_21633A1DC(a1);
    }
  }
  else if (a1)
  {
    return sub_21633A1DC(a1);
  }
  return 0;
}

uint64_t MecabraSpecialtyDictionaryCreateWithData(int a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 134217984;
    uint64_t v7 = a2;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryCreateWithData] dictionaryData:%p", (uint8_t *)&v6, 0xCu);
  }
  uint64_t result = 0;
  if (!a1)
  {
    if (a2) {
      sub_216339B28();
    }
  }
  return result;
}

BOOL MecabraAddSpecialtyDictionary(BOOL result, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (result)
  {
    int v3 = (void *)result;
    uint64_t result = 0;
    if (a2)
    {
      if (*v3)
      {
        if ((*(unsigned int (**)(void))(*(void *)*v3 + 16))(*v3) == 1)
        {
          int v4 = sub_2162D1CE4(2u);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            int v6 = 134218240;
            uint64_t v7 = v3;
            __int16 v8 = 2048;
            uint64_t v9 = a2;
            _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraAddSpecialtyDictionary] mecabra:%p dictionary:%p", (uint8_t *)&v6, 0x16u);
          }
          uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*v3 + 424))(*v3);
          return (*(unsigned int (**)(void, void))(**(void **)(v5 + 192) + 160))(*(void *)(v5 + 192), *a2) != 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL MecabraRemoveSpecialtyDictionary(BOOL result, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (result)
  {
    int v3 = (void *)result;
    uint64_t result = 0;
    if (a2)
    {
      if (*v3)
      {
        if ((*(unsigned int (**)(void))(*(void *)*v3 + 16))(*v3) == 1)
        {
          int v4 = sub_2162D1CE4(2u);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            int v6 = 134218240;
            uint64_t v7 = v3;
            __int16 v8 = 2048;
            uint64_t v9 = a2;
            _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraRemoveSpecialtyDictionary] mecabra:%p dictionary:%p", (uint8_t *)&v6, 0x16u);
          }
          uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*v3 + 424))(*v3);
          return (*(unsigned int (**)(void, void))(**(void **)(v5 + 192) + 168))(*(void *)(v5 + 192), *a2) != 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void MecabraSpecialtyDictionaryEnumerateEntries(uint64_t *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 134217984;
    int v4 = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryEnumerateEntries] dictionary:%p", (uint8_t *)&v3, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  sub_21633A244(a1);
}

uint64_t MecabraSpecialtyDictionaryRelease(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v1 = (uint64_t **)result;
    int v2 = sub_2162D1CE4(2u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 134217984;
      uint64_t v5 = v1;
      _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryRelease] dictionary:%p", (uint8_t *)&v4, 0xCu);
    }
    int v3 = sub_21633A0D0(v1);
    return MEMORY[0x2166CA800](v3, 0x60C40149E097CLL);
  }
  return result;
}

uint64_t MecabraWordPropertiesCreate(uint64_t a1, uint64_t a2)
{
  int v4 = [MecabraWordProperties alloc];

  return [v4 initWithString:v5 language:a1];
}

uint64_t MecabraWordPropertiesGetProperty(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F9A6D0](a1, sel_valueForKey_, a2);
}

uint64_t MecabraWordPropertiesGetSortedRadicalList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F9A6D0](MecabraWordProperties, sel_sortedRadicalList, a3);
}

void MecabraAdaptToTokenizedText(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 134217984;
    __int16 v8 = a1;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraAdaptToTokenizedText] mecabra:%p", (uint8_t *)&v7, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (a3)
  {
    if (*a1) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 200))(*a1, a2, a3);
    }
  }
}

void MecabraAdaptToTokenizedTextWithEffectiveTime(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  __int16 v8 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 134217984;
    uint64_t v10 = a1;
    _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "[MecabraAdaptToTokenizedTextWithEffectiveTime] mecabra:%p", (uint8_t *)&v9, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (a3)
  {
    if (*a1) {
      (*(void (**)(void, uint64_t, uint64_t, double))(*(void *)*a1 + 208))(*a1, a2, a3, a4);
    }
  }
}

void MecabraAdaptToUntokenizedText(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  __int16 v8 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 134217984;
    uint64_t v10 = a1;
    _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "[MecabraAdaptToUntokenizedText] mecabra:%p", (uint8_t *)&v9, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (a3)
  {
    if (*a1) {
      (*(void (**)(void, uint64_t, uint64_t, double))(*(void *)*a1 + 216))(*a1, a2, a3, a4);
    }
  }
}

double MecabraGetLastOfflineAdaptationTime(uint64_t *a1)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v1 = *a1;
  if (!v1) {
    return 0.0;
  }
  (*(void (**)(void))(*(void *)v1 + 224))();
  return result;
}

id MecabraCreateFacemarkCandidates(void *a1)
{
  return MecabraCreateFacemarkCandidatesWithContext(a1, 0);
}

id MecabraCreateFacemarkCandidatesWithContext(void *a1, uint64_t *a2)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *a1;
  if (!v3) {
    return 0;
  }
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  unsigned int v6 = sub_2161E2834(v5);
  if (v6 > 5 || ((1 << v6) & 0x27) == 0) {
    return 0;
  }
  unsigned int v8 = v6;
  id v9 = objc_alloc_init(MEMORY[0x263EFF980]);
  unsigned int v12 = [MEMORY[0x263EFF9C0] setValue:v10 forKey:v11];
  if (a2) {
    uint64_t v13 = *a2;
  }
  else {
    uint64_t v13 = 0;
  }
  if ((*(unsigned int (**)(void, __CFString *, uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, kMecabraAnalysisStringForFacemark[0], 16386, v13))
  {
    uint64_t v17 = (*(uint64_t (**)(void))(*(void *)*a1 + 64))();
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      do
      {
        uint64_t Surface = MecabraCandidateGetSurface(v18, v15, v16);
        if ((objc_msgSend_containsObject_(v12, v20, Surface) & 1) == 0)
        {
          uint64_t v23 = MecabraCandidateGetSurface(v18, v21, v22);
          [v12 addObject:v24];
          if (!v8)
          {
            MecabraCandidateGetSurface(v18, v25, v26);
            sub_2161F803C();
          }
          [v9 addObject:v25];
        }
        uint64_t v18 = (void *)(*(uint64_t (**)(void))(*(void *)*a1 + 64))();
      }
      while (v18);
    }
  }
  if (v8 || *(unsigned char *)sub_2161A2A80()) {
    [v12 removeAllObjects];
  }
  if (v8 - 1 < 2 || v8 == 5) {
    unint64_t v28 = 3;
  }
  else {
    unint64_t v28 = v8;
  }
  uint64_t v29 = (uint64_t *)sub_2162D8C20();
  __int16 v30 = sub_2162D8CB8(v29, v28, off_26797C900[0], off_26797C868[0]);
  uint64_t v32 = (void *)MEMORY[0x263EFF8C0];
  if (*((char *)v30 + 23) >= 0) {
    uint64_t v33 = [NSString stringWithCString:v31 encoding:v30];
  }
  else {
    uint64_t v33 = [NSString stringWithCString:v31 encoding:4];
  }
  uint64_t v35 = [v32 arrayWithContentsOfFile:v34];
  if (v35)
  {
    uint64_t v36 = (void *)v35;
    id v37 = objc_alloc_init(MEMORY[0x263EFF980]);
    memset(v58, 0, sizeof(v58));
    if (objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v38, (uint64_t)v58, v60, 16))
    {
      uint64_t v40 = (void *)**((void **)&v58[0] + 1);
      [**((void ***)&v58[0] + 1) objectForKey:v39];
      [v40 objectForKey:v41];
      sub_2161F803C();
    }
    if (v37)
    {
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      uint64_t v42 = [v37 countByEnumeratingWithState:v39 objects:(void *)&v54 count:v59];
      if (v42)
      {
        uint64_t v45 = v42;
        uint64_t v46 = *(void *)v55;
        do
        {
          for (uint64_t i = 0; i != v45; ++i)
          {
            if (*(void *)v55 != v46) {
              objc_enumerationMutation(v37);
            }
            v48 = *(void **)(*((void *)&v54 + 1) + 8 * i);
            uint64_t v49 = MecabraCandidateGetSurface(v48, v43, v44);
            if ((objc_msgSend_containsObject_(v12, v50, v49) & 1) == 0)
            {
              uint64_t v51 = MecabraCandidateGetSurface(v48, v43, v44);
              [v12 addObject:v51];
              [v9 addObject:(uint64_t)v48];
            }
          }
          uint64_t v45 = [v37 countByEnumeratingWithState:v43 objects:(void *)&v54 count:v59];
        }
        while (v45);
      }
    }
  }
  return v9;
}

void sub_2161F803C()
{
}

void sub_2161F80B0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

void MecabraSetDynamicLanguageModelAppContext(void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 138412546;
    uint64_t v6 = a2;
    __int16 v7 = 2048;
    unsigned int v8 = a1;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraSetDynamicLanguageModelAppContext] %@ (mecabra:%p)", (uint8_t *)&v5, 0x16u);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1) {
    (*(void (**)(void, uint64_t))(*(void *)*a1 + 136))(*a1, a2);
  }
}

uint64_t MecabraEnumerateSyllabifiedStringLengths(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    double result = *(void *)result;
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 392))(result, a3, a4, a5);
    }
  }
  return result;
}

void MecabraCreateCPGesture()
{
}

void MecabraCreateTypeGesture()
{
}

void MecabraCreateTypeGestureWithTouchEvent()
{
}

void MecabraGestureAddKeyAndLoglikelihoodPair(uint64_t a1, __int16 a2, float a3)
{
  if (a1) {
    sub_216268C5C(*(void **)(a1 + 24), a2, a3);
  }
}

void MecabraCreateLayoutKey()
{
}

void sub_2161F8480(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1060C40B5E1536ALL);
  _Unwind_Resume(a1);
}

void MecabraSetKeyboardLayout(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 134217984;
    uint64_t v6 = a1;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraSetKeyboardLayout] mecabra:%p", (uint8_t *)&v5, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1) {
    (*(void (**)(void, uint64_t))(*(void *)*a1 + 264))(*a1, a2);
  }
}

uint64_t MecabraCreateSegments(uint64_t *a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t v2 = *a1) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 352))();
  }
  else {
    return 0;
  }
}

uint64_t MecabraConvertedKanaCreateFromRomajiString(const __CFString *a1)
{
  if (a1)
  {
    long long v2 = 0u;
    *(_OWORD *)capacity = 0u;
    int v4 = 1065353216;
    sub_216183CEC(a1);
  }
  return 0;
}

void sub_2161F875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216144C28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MecabraConvertedKanaGetKana(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t MecabraConvertedKanaGetAlignment(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

CFTypeRef *MecabraConvertedKanaRelease(CFTypeRef *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFRelease(*result);
    CFRelease(v1[1]);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t MecabraReverseConvertedRomajiCreateFromKanaString(const __CFString *a1)
{
  if (a1)
  {
    uint64_t v2 = 0;
    sub_2161E1FB8(a1);
  }
  return 0;
}

void sub_2161F88DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    MEMORY[0x2166CA7C0](v15, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void MecabraJapaneseLMCreate(CFTypeRef cf, CFTypeRef a2)
{
  if (cf)
  {
    CFRetain(cf);
    if (a2)
    {
      CFRetain(a2);
      goto LABEL_14;
    }
  }
  else if (a2)
  {
    CFRetain(a2);
    int v4 = 0;
    goto LABEL_7;
  }
  int v4 = 1;
LABEL_7:
  CFStringRef v5 = sub_2162D9D28("ja");
  CFURLRef v6 = CFURLCreateCopyAppendingPathComponent(0, (CFURLRef)v5, off_26797B560, 1u);
  if (v5) {
    CFRelease(v5);
  }
  if (cf)
  {
    if (!v4) {
LABEL_14:
    }
      operator new();
  }
  else
  {
    CFURLCreateCopyAppendingPathComponent(0, v6, off_26797B568, 0);
    if (!v4) {
      goto LABEL_14;
    }
  }
  CFURLCreateCopyAppendingPathComponent(0, v6, off_26797B578, 0);
  goto LABEL_14;
}

void sub_2161F8B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  MEMORY[0x2166CA800](v4, 0x10B1C406662A6EBLL);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *MecabraJapaneseLMRelease(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    if (v1) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t MecabraJapaneseLMIsValid(uint64_t result)
{
  if (result)
  {
    double result = *(void *)result;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    }
  }
  return result;
}

CFStringRef MecabraInputStringCreateForSentencePiece(const __CFString *a1, void *a2, uint64_t a3)
{
  CFStringRef v3 = a1;
  if (a1)
  {
    if (a1->isa
      && sub_2161F1D44(a2, (const char *)a2, a3)
      && (uint64_t v7 = sub_2161F3B4C(a2, v5, v6)) != 0
      && (unsigned int v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0)) != 0)
    {
      uint64_t v9 = v8;
      (*(void (**)(void *))(*(void *)v8 + 544))(v8);
      (*(void (**)(void *))(*(void *)v9 + 304))(v9);
      (*(void (**)(void **__return_ptr))(**((void **)v3->isa + 1) + 32))(__p);
      if (v13 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      CFStringRef v3 = CFStringCreateWithCString(0, (const char *)v10, 0x8000100u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_2161F8F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *MecabraSentencePieceIDsCreateForCandidate(__CFArray *a1, void *a2, uint64_t a3)
{
  CFMutableArrayRef Mutable = a1;
  if (a1)
  {
    if (*(void *)a1
      && sub_2161F1D44(a2, (const char *)a2, a3)
      && (uint64_t v7 = sub_2161F3B4C(a2, v5, v6)) != 0
      && __dynamic_cast(v7, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0))
    {
      (*(void (**)(_DWORD **__return_ptr))(**(void **)Mutable + 16))(&v13);
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, v14 - v13, MEMORY[0x263EFFF70]);
      unsigned int v8 = v13;
      uint64_t v9 = v14;
      if (v13 != v14)
      {
        do
        {
          int valuePtr = *v8;
          CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          CFArrayAppendValue(Mutable, v10);
          if (v10) {
            CFRelease(v10);
          }
          ++v8;
        }
        while (v8 != v9);
        unsigned int v8 = v13;
      }
      if (v8)
      {
        BOOL v14 = v8;
        operator delete(v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return Mutable;
}

void sub_2161F907C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MecabraGetRNNLMProbabilities(const void **a1, void **a2, int64_t a3, void *a4)
{
  if (!a1) {
    return 0;
  }
  int64_t v4 = a3;
  uint64_t v5 = 0;
  if (!a3) {
    return v5;
  }
  uint64_t v6 = a2;
  if (!a2) {
    return v5;
  }
  unsigned int v8 = *a1;
  if (!v8) {
    return v5;
  }
  int v10 = (*(uint64_t (**)(const void *))(*(void *)v8 + 56))(v8);
  uint64_t v11 = *a1;
  if (v10 != 1)
  {
    if ((*(unsigned int (**)(const void *))(*(void *)v11 + 56))(v11) == 2)
    {
      uint64_t v11 = *a1;
      if (*a1)
      {
        unsigned int v12 = (const struct __class_type_info *)&unk_26C6B9CC0;
        goto LABEL_11;
      }
LABEL_13:
      char v13 = 0;
      goto LABEL_14;
    }
    return 0;
  }
  if (!v11) {
    goto LABEL_13;
  }
  unsigned int v12 = (const struct __class_type_info *)&unk_26C6B9A58;
LABEL_11:
  char v13 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B9E80, v12, 0);
LABEL_14:
  sub_2162EF4B4((uint64_t)v23, 0);
  (*(void (**)(void *, void *))(*(void *)v13 + 32))(v13, v23);
  memset(v22, 0, sizeof(v22));
  sub_2161F93EC(v22, v4);
  if (v4 < 1)
  {
LABEL_20:
    (*(void (**)(void **__return_ptr, void *, uint64_t *, void))(*(void *)v13 + 64))(&__p, v13, v22, 0);
    uint64_t v18 = __p;
    if (a4 && v21 != __p) {
      memmove(a4, __p, v21 - (unsigned char *)__p);
    }
    if (v18)
    {
      char v21 = v18;
      operator delete(v18);
    }
    uint64_t v5 = 1;
  }
  else
  {
    while (1)
    {
      uint64_t v16 = sub_2161F3B4C(*v6, v14, v15);
      if (!v16) {
        break;
      }
      uint64_t v17 = __dynamic_cast(v16, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0);
      if (!v17) {
        break;
      }
      (*(void (**)(void **__return_ptr, void *, void *))(*(void *)v13 + 16))(&__p, v13, v17);
      sub_2161F94A0(v22, (uint64_t)&__p);
      if (__p)
      {
        char v21 = __p;
        operator delete(__p);
      }
      ++v6;
      if (!--v4) {
        goto LABEL_20;
      }
    }
    uint64_t v5 = 0;
  }
  __p = v22;
  sub_21613F444((void ***)&__p);
  sub_2161DEA90(v23);
  return v5;
}

void sub_2161F939C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __p = &a12;
  sub_21613F444((void ***)&__p);
  sub_2161DEA90(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2161F93EC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21610CB04();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216129BFC(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_216140E30(a1, v7);
    return sub_216140FCC((uint64_t)v7);
  }
  return result;
}

void sub_2161F948C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2161F94A0(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    char v13 = (char *)sub_216129BFC(v4, v12);
    BOOL v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)BOOL v14 = 0;
    *(_OWORD *)BOOL v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    sub_216140E30(a1, v17);
    unsigned int v8 = (void *)a1[1];
    sub_216140FCC((uint64_t)v17);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unsigned int v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_2161F95D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MecabraJapaneseLMRerankerCreate(uint64_t a1, uint64_t a2, unsigned int a3)
{
  CFStringRef v4 = sub_2162D9D28("ja");
  CFURLRef v5 = CFURLCreateCopyAppendingPathComponent(0, (CFURLRef)v4, off_26797B580, 0);
  unint64_t v6 = sub_2161A2A80();
  if (sub_21627E724((uint64_t)v6, v5))
  {
    sub_21628E390(a3, 0, v6);
    operator new();
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

void sub_2161F9808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  CFURLRef v5 = va_arg(va1, const void *);
  MEMORY[0x2166CA800](v3, 0xF1C40D1B72B11);
  sub_21617DB94((const void **)va, 0);
  sub_21617DB94((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void *MecabraJapaneseLMRerankerRelease(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[3];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    if (*v1) {
      (*(void (**)(void))(*(void *)*v1 + 8))(*v1);
    }
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t MecabraJapaneseLMRerankCandidates(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4)
{
  v25[4] = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  CFStringRef v4 = a4;
  uint64_t v5 = 0;
  if (a4)
  {
    unint64_t v6 = (void **)a2;
    if (a2)
    {
      if (*(void *)(a1 + 24))
      {
        uint64_t v8 = a3;
        uint64_t v19 = &unk_26C6BE968;
        memset(v20, 0, sizeof(v20));
        int v21 = 1065353216;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v22 = 0;
        if (a3 < 1)
        {
LABEL_11:
          sub_2161C04AC(0);
          sub_2162EF4B4((uint64_t)v18, (uint64_t)&qword_26797EF20);
          (*(void (**)(void, void **, void **))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), &v19, v18);
          unint64_t v12 = v22;
          for (uint64_t i = v23; v12 != i; ++v12)
          {
            uint64_t v14 = *v12;
            *unint64_t v12 = 0;
            uint64_t v15 = [MecabraCandidate alloc];
            *v4++ = [v15 initWithCandidate:v16];
          }
          sub_2161DEA90(v18);
          uint64_t v5 = 1;
        }
        else
        {
          while (1)
          {
            unint64_t v9 = sub_2161F3B4C(*v6, a2, a3);
            if (!v9) {
              break;
            }
            unint64_t v10 = (uint64_t (***)(void))__dynamic_cast(v9, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0);
            if (!v10) {
              break;
            }
            v18[0] = (void *)(**v10)(v10);
            v25[0] = &unk_26C6B5430;
            v25[3] = v25;
            sub_216215760(&v19, v18, 1, 0, (uint64_t)v25);
            sub_21618B96C(v25);
            unint64_t v11 = v18[0];
            v18[0] = 0;
            if (v11) {
              (*(void (**)(void *))(*(void *)v11 + 16))(v11);
            }
            ++v6;
            if (!--v8) {
              goto LABEL_11;
            }
          }
          uint64_t v5 = 0;
        }
        uint64_t v19 = &unk_26C6BE968;
        v18[0] = &v22;
        sub_21618B5DC((void ***)v18);
        sub_216144C28((uint64_t)v20);
      }
    }
  }
  return v5;
}

void sub_2161F9BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

CFDictionaryRef MecabraJapaneseCopyParameters()
{
  uint64_t v0 = sub_2161A2A80();

  return sub_21627ED68((uint64_t)v0);
}

uint64_t MecabraJapaneseUpdateParameters(const __CFDictionary *a1)
{
  uint64_t v2 = sub_2161A2A80();
  return sub_21627E80C((uint64_t)v2, a1);
}

uint64_t MecabraGetConversionEngine(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 424))();
  }
  else {
    return 0;
  }
}

const void **sub_2161F9CFC(const void **a1)
{
  return a1;
}

void sub_2161F9D78(uint64_t a1)
{
  sub_2161FA97C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161F9DB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2161F9DB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_2161F9DC0(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4, const __CFArray *a5, const __CFArray *a6)
{
  unint64_t v11 = *(__CFArray **)(a1 + 64);
  if (v11) {
    CFArrayRemoveAllValues(v11);
  }
  *(_DWORD *)(a1 + 56) = 0;
  unint64_t v12 = *(__CFSet **)(a1 + 72);
  if (v12) {
    CFSetRemoveAllValues(v12);
  }
  uint64_t v13 = *(void *)(a1 + 16);

  return sub_21628051C(v13, a2, a3, 0, a5, a6);
}

uint64_t sub_2161F9E44(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(__CFArray **)(a1 + 64);
  if (v8) {
    CFArrayRemoveAllValues(v8);
  }
  *(_DWORD *)(a1 + 56) = 0;
  unint64_t v9 = *(__CFSet **)(a1 + 72);
  if (v9) {
    CFSetRemoveAllValues(v9);
  }
  if (a4)
  {
    CFStringRef v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 1168);
      if (v11) {
        sub_2162F09FC(v11, v10);
      }
    }
    CFStringRef v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 1168);
      if (v13) {
        sub_2162F0ABC(v13, v12);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);

  return sub_2162810B4(v14, a2, a3, a4);
}

unint64_t sub_2161F9EE8(uint64_t a1, CFArrayRef theArray, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(__CFArray **)(a1 + 64);
  if (v8) {
    CFArrayRemoveAllValues(v8);
  }
  *(_DWORD *)(a1 + 56) = 0;
  unint64_t v9 = *(__CFSet **)(a1 + 72);
  if (v9) {
    CFSetRemoveAllValues(v9);
  }
  if (a4)
  {
    CFStringRef v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 1168);
      if (v11) {
        sub_2162F09FC(v11, v10);
      }
    }
    CFStringRef v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 1168);
      if (v13) {
        sub_2162F0ABC(v13, v12);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);

  return sub_2161D0590(v14, theArray, a3, a4);
}

void *sub_2161F9F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2162811A4(*(void *)(a1 + 16), a2, a3, a4);
}

void *sub_2161F9F94(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)sub_21628160C(i);
    unint64_t v6 = v3;
    if (!v3) {
      break;
    }
    uint64_t v7 = [v3 v4:v5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 6) {
      break;
    }
    if (MecabraCandidateGetSurface(v6, v8, v9))
    {
      uint64_t v12 = [v6 v10:v11];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89) {
        return v6;
      }
      CFSetRef v15 = *(const __CFSet **)(a1 + 72);
      uint64_t Surface = (const void *)MecabraCandidateGetSurface(v6, v13, v14);
      if (!CFSetContainsValue(v15, Surface))
      {
        uint64_t v19 = *(__CFSet **)(a1 + 72);
        CFStringRef v20 = (const void *)MecabraCandidateGetSurface(v6, v17, v18);
        CFSetAddValue(v19, v20);
        return v6;
      }
    }
  }
  return v6;
}

void sub_2161FA080(uint64_t a1)
{
}

uint64_t sub_2161FA088(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = sub_216192194(a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x263EFFB40];

  return sub_216280B54(v2, 0, 0, v3);
}

uint64_t sub_2161FA0F0(void *a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    CFStringRef v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          if (a1[3]) {
            [v4 v9:v10];
          }
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v12 = (__CFSet *)a1[9];
  if (v12) {
    CFSetRemoveAllValues(v12);
  }
LABEL_11:
  uint64_t v13 = a1[2];

  return sub_216281F0C(v13, a2);
}

uint64_t sub_2161FA1F0(uint64_t a1, const char *a2, void *a3)
{
  return sub_2162814F4(*(void *)(a1 + 16), a2, a3);
}

uint64_t sub_2161FA1F8(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = *(__CFSet **)(a1 + 72);
  if (v6) {
    CFSetRemoveAllValues(v6);
  }
  uint64_t v7 = *(void *)(a1 + 16);

  return sub_216280B54(v7, a2, a3, 1);
}

uint64_t sub_2161FA254(uint64_t a1)
{
  return sub_216298230(*(void *)(*(void *)(a1 + 16) + 176));
}

uint64_t sub_2161FA260(uint64_t a1)
{
  return sub_216281F9C(*(void *)(a1 + 16));
}

uint64_t sub_2161FA268(uint64_t a1)
{
  return sub_2163658D4(*(void *)(*(void *)(a1 + 16) + 1168));
}

uint64_t sub_2161FA274(uint64_t a1, const __CFString *a2)
{
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 1168);
  if (result) {
    return sub_2162F09FC(result, a2);
  }
  return result;
}

uint64_t sub_2161FA288(uint64_t a1, uint64_t a2)
{
  return sub_2161DAD98(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FA290(uint64_t a1, uint64_t a2)
{
  return sub_2161DAEF0(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FA298(uint64_t a1)
{
  return sub_2162978A0(*(void *)(*(void *)(a1 + 16) + 176), 1);
}

uint64_t sub_2161FA2B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 176) + 104))();
}

uint64_t sub_2161FA2DC(uint64_t a1, void *a2, uint64_t a3)
{
  char v5 = (const void *)[a2 a2:a3];
  if (!v5
    || (uint64_t v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) == 0)
  {
    uint64_t v11 = (const void *)[a2 v6:v7];
    if (v11) {
      __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
    return 0;
  }
  if (!(*(unsigned int (**)(void *, void, void))(*(void *)v8 + 248))(v8, 0, 0)) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 176) + 96);

  return v9();
}

BOOL sub_2161FA418(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  return sub_2162A5824(*(void *)(*(void *)(a1 + 16) + 176), a2, a3, 0, 0);
}

BOOL sub_2161FA42C(uint64_t a1, uint64_t a2, const __CFArray *a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  double v6 = a4;
  return sub_2162A5824(*(void *)(v4 + 176), a2, a3, 0, &v6);
}

void sub_2161FA460(uint64_t a1, uint64_t a2, CFStringRef theString, double a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 + 1048);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  v6[2] = sub_2161DACCC;
  v6[3] = &unk_26426B960;
  v6[4] = v4;
  v6[5] = a2;
  *(double *)&v6[6] = a4;
  sub_2162923D0(v5, theString, (uint64_t)v6);
}

uint64_t sub_2161FA4E0(uint64_t a1)
{
  return MEMORY[0x270F46B28](*(void *)(*(void *)(*(void *)(a1 + 16) + 1168) + 8));
}

CFMutableArrayRef sub_2161FA4F0()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
}

uint64_t sub_2161FA508()
{
  return 0;
}

BOOL sub_2161FA510(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_2161959B4(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    BOOL result = sub_2161FA5F4(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  sub_2161DCB10(*(void **)(a1 + 16));
  return 1;
}

BOOL sub_2161FA5F4(uint64_t a1, int a2, const __CFArray *a3)
{
  BOOL v4 = sub_2161959B4(*(void *)(a1 + 32), a2, a3);
  if (v4) {
    sub_2161DCB10(*(void **)(a1 + 16));
  }
  return v4;
}

void sub_2161FA630(uint64_t a1, const __CFArray *a2)
{
}

uint64_t sub_2161FA638(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 229) = a2;
  return result;
}

uint64_t sub_2161FA644(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 1008);
}

uint64_t sub_2161FA650(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 1024) = a2;
  return result;
}

__CFDictionary *sub_2161FA65C(uint64_t a1, int a2, const __CFDictionary *a3)
{
  return sub_21628319C(*(void **)(a1 + 16), a2, a3);
}

uint64_t sub_2161FA664(uint64_t a1)
{
  return sub_2161DB170(*(void *)(a1 + 16));
}

uint64_t sub_2161FA66C(uint64_t a1)
{
  return sub_2161DB1EC(*(void *)(a1 + 16));
}

void sub_2161FA674(uint64_t a1)
{
}

uint64_t sub_2161FA67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2161DB4FC(*(void *)(a1 + 16), a2, a3);
}

uint64_t sub_2161FA684()
{
  return 0;
}

uint64_t sub_2161FA68C(uint64_t a1, const __CFString *a2)
{
  return sub_2161DD978(*(void *)(a1 + 16), a2);
}

CFMutableArrayRef sub_2161FA694(uint64_t a1, const __CFString *a2)
{
  if (*(_DWORD *)(a1 + 8) == 1) {
    return sub_2161DBD74(*(void *)(a1 + 16), a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_2161FA6B0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

uint64_t sub_2161FA78C(uint64_t a1, uint64_t a2)
{
  return sub_2162810B4(*(void *)(a1 + 16), &stru_26C6FB1C0, 0, a2);
}

uint64_t sub_2161FA7A4(uint64_t result, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(result + 24))
    {
      uint64_t v4 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 2
        || (uint64_t v7 = objc_msgSend_rawCandidate(a2, v5, v6),
            BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7),
            result == 3))
      {
        return [a2 v5:v6];
      }
    }
  }
  return result;
}

uint64_t sub_2161FA858(uint64_t a1)
{
  return sub_21628160C(*(void *)(a1 + 16));
}

uint64_t sub_2161FA864()
{
  return 0;
}

uint64_t sub_2161FA86C(uint64_t a1, uint64_t a2)
{
  return sub_2161DB048(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FA874(uint64_t a1, uint64_t a2)
{
  return sub_21628200C(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FA87C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_2161FA884(uint64_t a1)
{
  sub_21617DB94((const void **)(a1 + 40), 0);
  sub_2161868BC((const void **)(a1 + 32), 0);
  sub_2161868BC((const void **)(a1 + 24), 0);
  BOOL v3 = (void **)a1;
  sub_2161FA8F4(&v3);
  return MEMORY[0x2166CA800](a1, 0x1060C405F2C909FLL);
}

void sub_2161FA8F4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    CFArrayRef v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_2161868BC(--v4, 0);
      while (v4 != v2);
      CFArrayRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2161FA97C(uint64_t a1)
{
  BOOL v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4) {
    sub_2161FA884(v4);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    MEMORY[0x2166CA800](v5, 0xC400A2AC0F1);
  }
  sub_2161CF7C8((uint64_t *)(a1 + 16), 0);
  return a1;
}

uint64_t *sub_2161FAA04(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    sub_2161868BC((const void **)(v2 + 152), 0);
    sub_2161868BC((const void **)(v2 + 144), 0);
    sub_2161868BC((const void **)(v2 + 136), 0);
    sub_2161868BC((const void **)(v2 + 128), 0);
    sub_2161868BC((const void **)(v2 + 120), 0);
    sub_21617DB94((const void **)(v2 + 112), 0);
    sub_216182BB8((const void **)(v2 + 96), 0);
    BOOL v3 = *(void **)(v2 + 72);
    if (v3)
    {
      *(void *)(v2 + 80) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(v2 + 48);
    if (v4)
    {
      *(void *)(v2 + 56) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(char **)(v2 + 24);
    if (v5)
    {
      do
      {
        uint64_t v6 = *(char **)v5;
        uint64_t v8 = (void **)(v5 + 24);
        sub_2161FB708(&v8);
        operator delete(v5);
        uint64_t v5 = v6;
      }
      while (v6);
    }
    uint64_t v7 = *(void **)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v7) {
      operator delete(v7);
    }
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2161FAB24(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2161FB7A8(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2161FAB78(uint64_t a1)
{
  sub_2161FBD04(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161FABB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2161FABB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_2161FABC0(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  uint64_t v10 = *(__CFArray **)(a1 + 64);
  if (v10) {
    CFArrayRemoveAllValues(v10);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v11 = *(__CFSet **)(a1 + 72);
  if (v11) {
    CFSetRemoveAllValues(v11);
  }
  uint64_t v12 = *(void *)(a1 + 16);

  return sub_2162F77F4(v12, a2, a3, a4, a5);
}

uint64_t sub_2161FAC58(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(__CFArray **)(a1 + 64);
  if (v8) {
    CFArrayRemoveAllValues(v8);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v9 = *(__CFSet **)(a1 + 72);
  if (v9) {
    CFSetRemoveAllValues(v9);
  }
  if (a4)
  {
    CFStringRef v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 104);
      if (v11) {
        sub_2163487D8(v11, v10);
      }
    }
    CFStringRef v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 104);
      if (v13) {
        sub_2163488E4(v13, v12);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);

  return sub_2162F8654(v14, a2, a3, a4);
}

uint64_t sub_2161FACFC(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(__CFArray **)(a1 + 64);
  if (v8) {
    CFArrayRemoveAllValues(v8);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v9 = *(__CFSet **)(a1 + 72);
  if (v9) {
    CFSetRemoveAllValues(v9);
  }
  if (a4)
  {
    CFStringRef v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 104);
      if (v11) {
        sub_2163487D8(v11, v10);
      }
    }
    CFStringRef v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 104);
      if (v13) {
        sub_2163488E4(v13, v12);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);

  return sub_2162F8A98(v14, a2, a3, a4);
}

uint64_t sub_2161FADA0()
{
  return 0;
}

void *sub_2161FADA8(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    BOOL v3 = (void *)(*(uint64_t (**)(void))(**(void **)(i + 72) + 48))(*(void *)(i + 72));
    uint64_t v6 = v3;
    if (!v3) {
      break;
    }
    uint64_t v7 = [v3 v4:v5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 6) {
      break;
    }
    if (MecabraCandidateGetSurface(v6, v8, v9))
    {
      uint64_t v12 = [v6 v10:v11];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89) {
        return v6;
      }
      CFSetRef v15 = *(const __CFSet **)(a1 + 72);
      uint64_t Surface = (const void *)MecabraCandidateGetSurface(v6, v13, v14);
      if (!CFSetContainsValue(v15, Surface))
      {
        uint64_t v19 = *(__CFSet **)(a1 + 72);
        CFStringRef v20 = (const void *)MecabraCandidateGetSurface(v6, v17, v18);
        CFSetAddValue(v19, v20);
        return v6;
      }
    }
  }
  return v6;
}

uint64_t sub_2161FAEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 112);
  BOOL v3 = sub_216192194(a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x263EFFB40];
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, void, BOOL))(*(void *)v2 + 56);

  return v4(v2, 0, 0, v3);
}

uint64_t sub_2161FAF48(void *a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    uint64_t v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          if (a1[3]) {
            [v4 v9:v10];
          }
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v12 = (__CFSet *)a1[9];
  if (v12) {
    CFSetRemoveAllValues(v12);
  }
LABEL_11:
  uint64_t v13 = *(uint64_t (**)(void))(**(void **)(a1[2] + 112) + 48);

  return v13();
}

uint64_t sub_2161FB06C(uint64_t a1, const char *a2, void *a3)
{
  return sub_2162FC3F8(*(void *)(a1 + 16), a2, a3);
}

uint64_t sub_2161FB074(uint64_t a1)
{
  uint64_t v2 = *(__CFSet **)(a1 + 72);
  if (v2) {
    CFSetRemoveAllValues(v2);
  }
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 112) + 56);

  return v3();
}

uint64_t sub_2161FB0E8(uint64_t a1)
{
  return sub_216298230(*(void *)(*(void *)(a1 + 16) + 112));
}

uint64_t sub_2161FB0F4(uint64_t a1)
{
  return sub_2162978A0(*(void *)(*(void *)(a1 + 16) + 112), 1);
}

uint64_t sub_2161FB104(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  sub_2162978A0(*(void *)(v1 + 112), 1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 112) + 128);

  return v2();
}

void sub_2161FB164(uint64_t a1, const __CFString *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 104);
  if (v2) {
    sub_2163487D8(v2, a2);
  }
}

void sub_2161FB178(uint64_t a1, uint64_t a2)
{
}

void sub_2161FB180(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_2161FB188(uint64_t a1)
{
  return sub_2162978A0(*(void *)(*(void *)(a1 + 16) + 112), 1);
}

uint64_t sub_2161FB1A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 112) + 104))();
}

uint64_t sub_2161FB1CC(uint64_t a1, void *a2, uint64_t a3)
{
  char v5 = (const void *)[a2 a2:a3];
  if (!v5
    || (uint64_t v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) == 0)
  {
    uint64_t v11 = (const void *)[a2 v6:v7];
    if (v11) {
      __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
    return 0;
  }
  if (!(*(unsigned int (**)(void *, void, void))(*(void *)v8 + 248))(v8, 0, 0)) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 112) + 96);

  return v9();
}

double sub_2161FB314()
{
  return 0.0;
}

CFMutableArrayRef sub_2161FB31C()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
}

uint64_t sub_2161FB334()
{
  return 0;
}

uint64_t sub_2161FB33C(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_216227930(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_2161FB420(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  sub_2162FC4F4(*(void **)(a1 + 16));
  return 1;
}

uint64_t sub_2161FB420(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4 = sub_216227930(*(void *)(a1 + 32), a2, a3);
  if (v4) {
    sub_2162FC4F4(*(void **)(a1 + 16));
  }
  return v4;
}

BOOL sub_2161FB45C(uint64_t a1, const __CFArray *a2)
{
  return sub_2162FD3E0(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FB464(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 208) = a2;
  return result;
}

uint64_t sub_2161FB470()
{
  return 0;
}

uint64_t sub_2161FB47C()
{
  return 0;
}

uint64_t sub_2161FB484(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 112) + 88))();
}

uint64_t sub_2161FB4B0(uint64_t a1)
{
  return sub_2162FC480(*(void *)(a1 + 16));
}

void *sub_2161FB4BC(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 1)
  {
    uint64_t result = *(void **)(result[2] + 112);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 24))();
    }
  }
  return result;
}

uint64_t sub_2161FB4F8()
{
  return 0;
}

void sub_2161FB500(uint64_t a1, const __CFString *a2)
{
}

uint64_t sub_2161FB508()
{
  return 0;
}

uint64_t sub_2161FB510(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

uint64_t sub_2161FB5EC(uint64_t a1, uint64_t a2)
{
  return sub_2162F8654(*(void *)(a1 + 16), &stru_26C6FB1C0, 0, a2);
}

uint64_t sub_2161FB604(uint64_t result, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(result + 24))
    {
      uint64_t v4 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 2
        || (uint64_t v7 = objc_msgSend_rawCandidate(a2, v5, v6),
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7),
            result == 3))
      {
        return [a2 v5:v6];
      }
    }
  }
  return result;
}

uint64_t sub_2161FB6B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 72) + 48))();
}

uint64_t sub_2161FB6E8()
{
  return 0;
}

void sub_2161FB6F0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_2161FB6F8(uint64_t a1, uint64_t a2)
{
  return sub_2162FC9D4(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FB700(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_2161FB708(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2161FB75C((uint64_t *)v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void sub_2161FB75C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_2161121B0(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_2161FB7A8(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 200);
  uint64_t v2 = (void *)(a1 + 200);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_2161DFB94((uint64_t)v2, v3);
  }
  uint64_t v5 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v5) {
    sub_2161DFB94(a1 + 192, v5);
  }
  uint64_t v6 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_2161FBA04((void **)(a1 + 144), 0);
  sub_2161FBA04((void **)(a1 + 136), 0);
  sub_2161FBA54((const void ***)(a1 + 128), 0);
  sub_2161FBAF0((uint64_t *)(a1 + 120), 0);
  uint64_t v11 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_2161FBBE4((const void ***)(a1 + 104), 0);
  uint64_t v12 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  sub_2161FBCB4((uint64_t *)(a1 + 88), 0);
  sub_2161FBCB4((uint64_t *)(a1 + 80), 0);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }

  return sub_21618B4F0(a1);
}

void *sub_2161FBA04(void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216305830(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

const void ***sub_2161FBA54(const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_2161FBAB8(v2, 0);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2161FBAB8(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_2161FBAF0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2161FBB40(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2161FBB40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  sub_2161FBBAC((const void **)(a1 + 8), 0);
  sub_2161BE090((const void **)a1, 0);
  return a1;
}

void sub_2161FBBAC(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

const void **sub_2161FBBE4(const void ***a1, const void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2161FBC34(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

const void **sub_2161FBC34(const void **a1)
{
  return a1;
}

void sub_2161FBC7C(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_2161FBCB4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21630AF24(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2161FBD04(uint64_t a1)
{
  uint64_t v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  sub_2161FAA04((uint64_t *)(a1 + 32), 0);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    MEMORY[0x2166CA800](v4, 0xC400A2AC0F1);
  }
  sub_2161FAB24((uint64_t *)(a1 + 16), 0);
  return a1;
}

uint64_t sub_2161FBD88(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2161FC868(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2161FBDDC(uint64_t a1)
{
  sub_2161FCB0C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161FBE14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2161FBE1C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

void sub_2161FBE24(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  uint64_t v10 = *(__CFArray **)(a1 + 64);
  if (v10) {
    CFArrayRemoveAllValues(v10);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v11 = *(__CFSet **)(a1 + 72);
  if (v11) {
    CFSetRemoveAllValues(v11);
  }
  uint64_t v12 = *(void *)(a1 + 16);

  sub_21624BA60(v12, a2, a3, a4, a5);
}

BOOL sub_2161FBEBC(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(__CFArray **)(a1 + 64);
  if (v8) {
    CFArrayRemoveAllValues(v8);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v9 = *(__CFSet **)(a1 + 72);
  if (v9) {
    CFSetRemoveAllValues(v9);
  }
  if (a4)
  {
    CFStringRef v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 96);
      if (v11) {
        sub_2163487D8(v11, v10);
      }
    }
    CFStringRef v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 96);
      if (v13) {
        sub_2163488E4(v13, v12);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);

  return sub_21624D918(v14, a2, a3, a4);
}

uint64_t sub_2161FBF60(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(__CFArray **)(a1 + 64);
  if (v8) {
    CFArrayRemoveAllValues(v8);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v9 = *(__CFSet **)(a1 + 72);
  if (v9) {
    CFSetRemoveAllValues(v9);
  }
  if (a4)
  {
    CFStringRef v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 96);
      if (v11) {
        sub_2163487D8(v11, v10);
      }
    }
    CFStringRef v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 96);
      if (v13) {
        sub_2163488E4(v13, v12);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);

  return sub_21624C970(v14, a2, a3, a4);
}

uint64_t sub_2161FC004()
{
  return 0;
}

void *sub_2161FC00C(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(void))(**(void **)(i + 72) + 48))(*(void *)(i + 72));
    uint64_t v6 = v3;
    if (!v3) {
      break;
    }
    uint64_t v7 = [v3 v4:v5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 6) {
      break;
    }
    if (MecabraCandidateGetSurface(v6, v8, v9))
    {
      uint64_t v12 = [v6 v10:v11];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89) {
        return v6;
      }
      CFSetRef v15 = *(const __CFSet **)(a1 + 72);
      uint64_t Surface = (const void *)MecabraCandidateGetSurface(v6, v13, v14);
      if (!CFSetContainsValue(v15, Surface))
      {
        uint64_t v19 = *(__CFSet **)(a1 + 72);
        CFStringRef v20 = (const void *)MecabraCandidateGetSurface(v6, v17, v18);
        CFSetAddValue(v19, v20);
        return v6;
      }
    }
  }
  return v6;
}

uint64_t sub_2161FC120(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 16) + 104) + 56))(*(void *)(*(void *)(a1 + 16) + 104), 0, 0, 1);
}

uint64_t sub_2161FC158(void *a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    uint64_t v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          if (a1[3]) {
            [v4 v9:v10];
          }
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v12 = (__CFSet *)a1[9];
  if (v12) {
    CFSetRemoveAllValues(v12);
  }
LABEL_11:
  uint64_t v13 = *(uint64_t (**)(void))(**(void **)(a1[2] + 104) + 48);

  return v13();
}

uint64_t sub_2161FC27C(uint64_t a1, const char *a2, void *a3)
{
  return sub_21624E0A8(*(void *)(a1 + 16), a2, a3);
}

uint64_t sub_2161FC284(uint64_t a1)
{
  uint64_t v2 = *(__CFSet **)(a1 + 72);
  if (v2) {
    CFSetRemoveAllValues(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 104) + 56);

  return v3();
}

uint64_t sub_2161FC2F8(uint64_t a1)
{
  return sub_216298230(*(void *)(*(void *)(a1 + 16) + 104));
}

uint64_t sub_2161FC304(uint64_t a1)
{
  return sub_2162978A0(*(void *)(*(void *)(a1 + 16) + 104), 1);
}

uint64_t sub_2161FC314(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  sub_2162978A0(*(void *)(v1 + 104), 1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 104) + 128);

  return v2();
}

void sub_2161FC374(uint64_t a1, const __CFString *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 96);
  if (v2) {
    sub_2163487D8(v2, a2);
  }
}

void sub_2161FC388(uint64_t a1, uint64_t a2)
{
}

void sub_2161FC390(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_2161FC3A4()
{
  return 0;
}

uint64_t sub_2161FC3AC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (const void *)[a2 a2:a3];
  if (v4
    && (uint64_t v7 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) != 0)
  {
    (*(void (**)(void *, void, void))(*(void *)v7 + 248))(v7, 0, 0);
  }
  else
  {
    uint64_t v8 = (const void *)[a2 v5:v6];
    if (v8) {
      __dynamic_cast(v8, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
  }
  return 0;
}

double sub_2161FC4A8()
{
  return 0.0;
}

CFMutableArrayRef sub_2161FC4B0()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
}

uint64_t sub_2161FC4C8()
{
  return 0;
}

uint64_t sub_2161FC4D0(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_216227930(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_2161FC5B4(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  sub_21624DCD4(*(void **)(a1 + 16));
  return 1;
}

uint64_t sub_2161FC5B4(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4 = sub_216227930(*(void *)(a1 + 32), a2, a3);
  if (v4) {
    sub_21624DCD4(*(void **)(a1 + 16));
  }
  return v4;
}

void sub_2161FC5F0(uint64_t a1, const __CFArray *a2)
{
}

uint64_t sub_2161FC5FC(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 224) = a2;
  return result;
}

uint64_t sub_2161FC608()
{
  return 0;
}

uint64_t sub_2161FC614()
{
  return 0;
}

uint64_t sub_2161FC61C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 104) + 88))();
}

uint64_t sub_2161FC648(uint64_t a1)
{
  return sub_21624BFB0(*(void *)(a1 + 16));
}

uint64_t sub_2161FC658()
{
  return 0;
}

void sub_2161FC660(uint64_t a1, const __CFString *a2)
{
}

uint64_t sub_2161FC668()
{
  return 0;
}

uint64_t sub_2161FC670(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

BOOL sub_2161FC74C(uint64_t a1, uint64_t a2)
{
  return sub_21624D918(*(void *)(a1 + 16), &stru_26C6FB1C0, 0, a2);
}

uint64_t sub_2161FC764(uint64_t result, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(result + 24))
    {
      uint64_t v4 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 2
        || (uint64_t v7 = objc_msgSend_rawCandidate(a2, v5, v6),
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7),
            result == 3))
      {
        return [a2 v5:v6];
      }
    }
  }
  return result;
}

uint64_t sub_2161FC818(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 72) + 48))();
}

uint64_t sub_2161FC848()
{
  return 0;
}

void sub_2161FC850(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_2161FC858()
{
  return 0;
}

uint64_t sub_2161FC860(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_2161FC868(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216195B94((const void **)(a1 + 208), 0);
  sub_2161FCAD0(a1 + 168);
  uint64_t v3 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_2161FBAF0((uint64_t *)(a1 + 112), 0);
  uint64_t v8 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_2161FBBE4((const void ***)(a1 + 96), 0);
  uint64_t v9 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  sub_21618B4F0(a1 + 8);
  return a1;
}

uint64_t sub_2161FCAD0(uint64_t a1)
{
  sub_2161E83F4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2161FCB0C(uint64_t a1)
{
  uint64_t v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  sub_2161FAA04((uint64_t *)(a1 + 32), 0);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    MEMORY[0x2166CA800](v4, 0xC400A2AC0F1);
  }
  sub_2161FBD88((uint64_t *)(a1 + 16), 0);
  return a1;
}

uint64_t sub_2161FCB90(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2162B83D8(result, a2, a3);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2161FCBE0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21625E5BC(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2161FCC34(uint64_t a1)
{
  sub_2161FDA58(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161FCC6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2161FCC74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

void sub_2161FCC7C(uint64_t a1)
{
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v3 = *(__CFSet **)(a1 + 72);
  if (v3) {
    CFSetRemoveAllValues(v3);
  }

  sub_2162B8784();
}

BOOL sub_2161FCD14(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(__CFArray **)(a1 + 64);
  if (v8) {
    CFArrayRemoveAllValues(v8);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v9 = *(__CFSet **)(a1 + 72);
  if (v9) {
    CFSetRemoveAllValues(v9);
  }
  if (a4)
  {
    CFStringRef v10 = *(const __CFString **)(a4 + 72);
    if (v10) {
      sub_2162F09FC(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32), v10);
    }
    CFStringRef v11 = *(const __CFString **)(a4 + 80);
    if (v11) {
      sub_2162F0ABC(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32), v11);
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);

  return sub_2162B8940(v12, a2, a3, a4);
}

BOOL sub_2161FCDB8(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(__CFArray **)(a1 + 64);
  if (v8) {
    CFArrayRemoveAllValues(v8);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v9 = *(__CFSet **)(a1 + 72);
  if (v9) {
    CFSetRemoveAllValues(v9);
  }
  if (a4)
  {
    CFStringRef v10 = *(const __CFString **)(a4 + 72);
    if (v10) {
      sub_2162F09FC(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32), v10);
    }
    CFStringRef v11 = *(const __CFString **)(a4 + 80);
    if (v11) {
      sub_2162F0ABC(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32), v11);
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);

  return sub_2162B89D0(v12, a2, a3, a4);
}

__CFArray *sub_2161FCE5C(uint64_t a1, const __CFArray *a2, __int16 a3, uint64_t a4)
{
  return sub_2162BA608(*(void *)(a1 + 16), a2, a3, a4);
}

void *sub_2161FCE64(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v3 = sub_2162BA80C(i);
    uint64_t v6 = v3;
    if (!v3) {
      break;
    }
    uint64_t v7 = [v3 v4:v5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 6) {
      break;
    }
    if (MecabraCandidateGetSurface(v6, v8, v9))
    {
      uint64_t v12 = [v6 v10:v11];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89) {
        return v6;
      }
      CFSetRef v15 = *(const __CFSet **)(a1 + 72);
      uint64_t Surface = (const void *)MecabraCandidateGetSurface(v6, v13, v14);
      if (!CFSetContainsValue(v15, Surface))
      {
        uint64_t v19 = *(__CFSet **)(a1 + 72);
        CFStringRef v20 = (const void *)MecabraCandidateGetSurface(v6, v17, v18);
        CFSetAddValue(v19, v20);
        return v6;
      }
    }
  }
  return v6;
}

const void *sub_2161FCF54(uint64_t a1, uint64_t a2)
{
  return sub_2162BAA5C(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FCF60(void *a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    uint64_t v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          uint64_t v12 = (void *)a1[3];
          if (v12)
          {
            uint64_t v13 = [v4 v9:v10];
            sub_21625F328(v12, v13);
          }
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v14 = (__CFSet *)a1[9];
  if (v14) {
    CFSetRemoveAllValues(v14);
  }
LABEL_11:
  uint64_t v15 = a1[2];

  return sub_2162BA98C(v15, a2);
}

uint64_t sub_2161FD06C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_2162BABC4(*(void *)(a1 + 16), a2, a3);
}

uint64_t sub_2161FD074(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(__CFSet **)(a1 + 72);
  if (v6) {
    CFSetRemoveAllValues(v6);
  }
  uint64_t v7 = *(void *)(a1 + 16);

  return sub_2162BA870(v7, a2, a3);
}

uint64_t sub_2161FD0CC(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 416);
  if (result) {
    return sub_216298230(result);
  }
  return result;
}

uint64_t sub_2161FD0E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32);
  (*(void (**)(uint64_t))(*(void *)v1 + 56))(v1);

  return LMLanguageModelResetDynamicData();
}

uint64_t sub_2161FD150(uint64_t a1, const __CFString *a2)
{
  uint64_t result = sub_2162F09FC(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32), a2);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v5 + 16) + 32);
    return sub_2162F09FC(v6, a2);
  }
  return result;
}

void sub_2161FD1B4(uint64_t a1, const void *a2)
{
  sub_2162D3610(*(void *)(*(void *)(a1 + 16) + 280), a2, 0);
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2B8(v4, (const __CFArray *)a2);
  }
}

void sub_2161FD210(uint64_t a1, const void *a2)
{
  sub_2162D3610(*(void *)(*(void *)(a1 + 16) + 280), a2, 1);
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2F0(v4, (const __CFArray *)a2);
  }
}

uint64_t sub_2161FD26C(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 416);
  if (result) {
    return sub_2162978A0(result, 1);
  }
  return result;
}

uint64_t sub_2161FD284(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 16) + 416);
  if (v2) {
    *(unsigned char *)(v2 + 121) = a2;
  }
  return result;
}

uint64_t sub_2161FD29C(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 416);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  return result;
}

uint64_t sub_2161FD2D0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (const void *)[a2 a2:a3];
  if (!v5
    || (uint64_t v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) == 0)
  {
    uint64_t v12 = (const void *)[a2 v6:v7];
    if (v12) {
      __dynamic_cast(v12, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
    return 0;
  }
  if (!(*(unsigned int (**)(void *, void, void))(*(void *)v8 + 248))(v8, 0, 0)) {
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 416);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)v9 + 96);

  return v10();
}

void sub_2161FD418(uint64_t a1, uint64_t a2, const __CFString *a3, double a4)
{
}

uint64_t sub_2161FD420(uint64_t a1)
{
  return MEMORY[0x270F46B28](*(void *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32) + 8));
}

__CFArray *sub_2161FD434(uint64_t a1)
{
  return sub_216319314(*(void *)(*(void *)(a1 + 16) + 384) + 80);
}

uint64_t sub_2161FD444(uint64_t a1, const void *a2)
{
  return sub_2162B8330(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FD44C(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_216227930(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_2161FD53C(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  sub_2162BB318(*(void **)(a1 + 16));
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7) {
    sub_21625E68C(v7);
  }
  return 1;
}

uint64_t sub_2161FD53C(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4 = sub_216227930(*(void *)(a1 + 32), a2, a3);
  if (v4)
  {
    sub_2162BB318(*(void **)(a1 + 16));
    CFArrayRef v5 = *(void **)(a1 + 24);
    if (v5) {
      sub_21625E68C(v5);
    }
  }
  return v4;
}

void sub_2161FD584(uint64_t a1, const __CFArray *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  sub_21628B718(*(void *)(*(void *)(v3 + 384) + 1320), a2);

  sub_2161E6B30(v3 + 288, a2);
}

uint64_t sub_2161FD5CC(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 24);
  *(unsigned char *)(*(void *)(*(void *)(result + 16) + 280) + 256) = a2;
  if (v2)
  {
    *(unsigned char *)(v2 + 304) = a2;
    *(unsigned char *)(v2 + 400) = a2;
  }
  return result;
}

uint64_t sub_2161FD5E8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 424);
}

uint64_t sub_2161FD5F4(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 440) = a2;
  return result;
}

__CFDictionary *sub_2161FD600(uint64_t a1, int a2)
{
  return sub_2162BB3E4(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FD608(uint64_t a1)
{
  return sub_2162BB480(*(void *)(a1 + 16));
}

void sub_2161FD610(uint64_t a1)
{
  sub_2162BB4FC(*(void *)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    sub_21625E86C(v2);
  }
}

void sub_2161FD65C(uint64_t a1)
{
}

void sub_2161FD668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2162BBC68(*(void *)(a1 + 16), a2, a3);
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625E7E0(v4, 1);
  }
}

CFArrayRef sub_2161FD6B8(uint64_t a1, void *a2, unint64_t a3)
{
  return sub_2162BB568(*(void *)(a1 + 16), a2, a3);
}

void sub_2161FD6C0()
{
}

uint64_t sub_2161FD6C8()
{
  return 0;
}

uint64_t sub_2161FD6D0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

uint64_t sub_2161FD834(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (a2)
    {
      CFStringRef v9 = *(const __CFString **)(a2 + 72);
      if (v9)
      {
        sub_2162F09FC(*(void *)(*(void *)(v6 + 16) + 32), v9);
        uint64_t v6 = *(void *)(a1 + 24);
      }
      CFStringRef v10 = *(const __CFString **)(a2 + 80);
      if (v10)
      {
        sub_2162F0ABC(*(void *)(*(void *)(v6 + 16) + 32), v10);
        uint64_t v6 = *(void *)(a1 + 24);
      }
    }
    return sub_21625EA44(v6, a2, a3, a4);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    return sub_2162B8940(v12, &stru_26C6FB1C0, 0, a2);
  }
}

void sub_2161FD944(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v5 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 2
        || (uint64_t v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 3))
      {
        CFStringRef v9 = *(void **)(a1 + 24);
        uint64_t v10 = [a2 v6:v7];
        sub_21625F328(v9, v10);
      }
    }
  }
}

void *sub_2161FDA0C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    return (void *)sub_21625F27C(v4, a2, a3);
  }
  else {
    return sub_2162BA80C(*(void *)(a1 + 16));
  }
}

void sub_2161FDA24(uint64_t a1, const UniChar *a2, CFIndex a3, uint64_t a4)
{
}

__CFArray *sub_2161FDA2C(uint64_t a1, unint64_t a2)
{
  return sub_2162EB504(*(void **)(*(void *)(a1 + 16) + 384), a2);
}

void sub_2161FDA38(uint64_t a1, const void *a2)
{
}

uint64_t sub_2161FDA48(uint64_t a1, uint64_t a2)
{
  return sub_2162BBB60(*(void *)(a1 + 16), a2);
}

uint64_t sub_2161FDA50(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_2161FDA58(uint64_t a1)
{
  uint64_t v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  sub_2161FAA04((uint64_t *)(a1 + 32), 0);
  sub_2161FCBE0((uint64_t *)(a1 + 24), 0);
  sub_2161FCB90((uint64_t *)(a1 + 16), 0, v4);
  return a1;
}

void sub_2161FDAD0(uint64_t a1)
{
  sub_2161FEB8C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161FDB08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2161FDB10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_2161FDB18(uint64_t a1)
{
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v3 = *(__CFSet **)(a1 + 72);
  if (v3) {
    CFSetRemoveAllValues(v3);
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);

  return v4();
}

uint64_t sub_2161FDBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);

  return v8();
}

uint64_t sub_2161FDCC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 32);

  return v8();
}

uint64_t sub_2161FDDB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

void *sub_2161FDDE0(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)i + 48))(i);
    uint64_t v6 = v3;
    if (!v3) {
      break;
    }
    uint64_t v7 = [v3 v4:v5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 6) {
      break;
    }
    if (MecabraCandidateGetSurface(v6, v8, v9))
    {
      uint64_t v12 = [v6 v10:v11];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89) {
        return v6;
      }
      CFSetRef v15 = *(const __CFSet **)(a1 + 72);
      uint64_t Surface = (const void *)MecabraCandidateGetSurface(v6, v13, v14);
      if (!CFSetContainsValue(v15, Surface))
      {
        uint64_t v19 = *(__CFSet **)(a1 + 72);
        CFStringRef v20 = (const void *)MecabraCandidateGetSurface(v6, v17, v18);
        CFSetAddValue(v19, v20);
        return v6;
      }
    }
  }
  return v6;
}

uint64_t sub_2161FDEF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))();
}

uint64_t sub_2161FDF18(uint64_t a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    uint64_t v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          uint64_t v12 = *(void **)(a1 + 24);
          if (v12)
          {
            uint64_t v13 = [v4 v9:v10];
            sub_21625F328(v12, v13);
          }
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v14 = *(__CFSet **)(a1 + 72);
  if (v14) {
    CFSetRemoveAllValues(v14);
  }
LABEL_11:
  CFSetRef v15 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 72);

  return v15();
}

uint64_t sub_2161FE044(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))();
}

uint64_t sub_2161FE06C(uint64_t a1)
{
  uint64_t v2 = *(__CFSet **)(a1 + 72);
  if (v2) {
    CFSetRemoveAllValues(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 56);

  return v3();
}

uint64_t sub_2161FE0E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88))();
}

uint64_t sub_2161FE10C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))();
}

uint64_t sub_2161FE134(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))();
}

uint64_t sub_2161FE15C(uint64_t a1, const __CFString *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v5 + 16) + 32);
    return sub_2162F09FC(v6, a2);
  }
  return result;
}

void sub_2161FE1D8(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2B8(v4, a2);
  }
}

void sub_2161FE24C(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2F0(v4, a2);
  }
}

uint64_t sub_2161FE2C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 144))();
}

uint64_t sub_2161FE2E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 152))();
}

uint64_t sub_2161FE314(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 160))();
}

uint64_t sub_2161FE33C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (const void *)[a2 a2:a3];
  if (!v5
    || (uint64_t v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) == 0)
  {
    uint64_t v11 = (const void *)[a2 v6:v7];
    if (v11) {
      __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
    return 0;
  }
  if (!(*(unsigned int (**)(void *, void, void))(*(void *)v8 + 248))(v8, 0, 0)) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 168);

  return v9();
}

uint64_t sub_2161FE474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))();
}

uint64_t sub_2161FE49C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t sub_2161FE4C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t sub_2161FE4EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 200))();
}

uint64_t sub_2161FE514(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

uint64_t sub_2161FE53C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 208))();
}

uint64_t sub_2161FE564(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_216227930(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_2161FE674(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7) {
    sub_21625E68C(v7);
  }
  return 1;
}

uint64_t sub_2161FE674(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4 = sub_216227930(*(void *)(a1 + 32), a2, a3);
  if (v4)
  {
    (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
    CFArrayRef v5 = *(void **)(a1 + 24);
    if (v5) {
      sub_21625E68C(v5);
    }
  }
  return v4;
}

uint64_t sub_2161FE6E0(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    *(unsigned char *)(v5 + 304) = a2;
    *(unsigned char *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_2161FE73C()
{
  return 0;
}

uint64_t sub_2161FE748()
{
  return 0;
}

uint64_t sub_2161FE750(uint64_t a1)
{
  return sub_216192078(*(uint64_t **)(a1 + 16));
}

void sub_2161FE758(uint64_t a1)
{
  sub_216192078(*(uint64_t **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    sub_21625E86C(v2);
  }
}

void sub_2161FE7AC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    sub_21625E7E0(v1, 1);
  }
}

uint64_t sub_2161FE7C0()
{
  return 0;
}

void sub_2161FE7C8()
{
}

uint64_t sub_2161FE7D0()
{
  return 0;
}

uint64_t sub_2161FE7D8(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

uint64_t sub_2161FE93C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (a2)
    {
      CFStringRef v9 = *(const __CFString **)(a2 + 72);
      if (v9)
      {
        sub_2162F09FC(*(void *)(*(void *)(v6 + 16) + 32), v9);
        uint64_t v6 = *(void *)(a1 + 24);
      }
      CFStringRef v10 = *(const __CFString **)(a2 + 80);
      if (v10)
      {
        sub_2162F0ABC(*(void *)(*(void *)(v6 + 16) + 32), v10);
        uint64_t v6 = *(void *)(a1 + 24);
      }
    }
    return sub_21625EA44(v6, a2, a3, a4);
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);
    return v12();
  }
}

void sub_2161FEA6C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v5 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 2
        || (uint64_t v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 3))
      {
        CFStringRef v9 = *(void **)(a1 + 24);
        uint64_t v10 = [a2 v6:v7];
        sub_21625F328(v9, v10);
      }
    }
  }
}

uint64_t sub_2161FEB34(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    return sub_21625F27C(v4, a2, a3);
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
  }
}

uint64_t sub_2161FEB70()
{
  return 0;
}

uint64_t sub_2161FEB7C()
{
  return 0;
}

uint64_t sub_2161FEB84(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_2161FEB8C(uint64_t a1)
{
  uint64_t v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  sub_2161FAA04((uint64_t *)(a1 + 32), 0);
  sub_2161FCBE0((uint64_t *)(a1 + 24), 0);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_2161FEC28(uint64_t a1)
{
  sub_2161FFCE4(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161FEC60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2161FEC68(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_2161FEC70(uint64_t a1)
{
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v3 = *(__CFSet **)(a1 + 72);
  if (v3) {
    CFSetRemoveAllValues(v3);
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);

  return v4();
}

uint64_t sub_2161FED28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);

  return v8();
}

uint64_t sub_2161FEE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 32);

  return v8();
}

uint64_t sub_2161FEF10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

void *sub_2161FEF38(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)i + 48))(i);
    uint64_t v6 = v3;
    if (!v3) {
      break;
    }
    uint64_t v7 = [v3 v4:v5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 6) {
      break;
    }
    if (MecabraCandidateGetSurface(v6, v8, v9))
    {
      uint64_t v12 = [v6 v10:v11];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89) {
        return v6;
      }
      CFSetRef v15 = *(const __CFSet **)(a1 + 72);
      uint64_t Surface = (const void *)MecabraCandidateGetSurface(v6, v13, v14);
      if (!CFSetContainsValue(v15, Surface))
      {
        uint64_t v19 = *(__CFSet **)(a1 + 72);
        CFStringRef v20 = (const void *)MecabraCandidateGetSurface(v6, v17, v18);
        CFSetAddValue(v19, v20);
        return v6;
      }
    }
  }
  return v6;
}

uint64_t sub_2161FF048(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))();
}

uint64_t sub_2161FF070(uint64_t a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    uint64_t v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          uint64_t v12 = *(void **)(a1 + 24);
          if (v12)
          {
            uint64_t v13 = [v4 v9:v10];
            sub_21625F328(v12, v13);
          }
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v14 = *(__CFSet **)(a1 + 72);
  if (v14) {
    CFSetRemoveAllValues(v14);
  }
LABEL_11:
  CFSetRef v15 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 72);

  return v15();
}

uint64_t sub_2161FF19C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))();
}

uint64_t sub_2161FF1C4(uint64_t a1)
{
  uint64_t v2 = *(__CFSet **)(a1 + 72);
  if (v2) {
    CFSetRemoveAllValues(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 56);

  return v3();
}

uint64_t sub_2161FF23C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88))();
}

uint64_t sub_2161FF264(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))();
}

uint64_t sub_2161FF28C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))();
}

uint64_t sub_2161FF2B4(uint64_t a1, const __CFString *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v5 + 16) + 32);
    return sub_2162F09FC(v6, a2);
  }
  return result;
}

void sub_2161FF330(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2B8(v4, a2);
  }
}

void sub_2161FF3A4(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2F0(v4, a2);
  }
}

uint64_t sub_2161FF418(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 144))();
}

uint64_t sub_2161FF440(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 152))();
}

uint64_t sub_2161FF46C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 160))();
}

uint64_t sub_2161FF494(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (const void *)[a2 a2:a3];
  if (!v5
    || (uint64_t v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) == 0)
  {
    uint64_t v11 = (const void *)[a2 v6:v7];
    if (v11) {
      __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
    return 0;
  }
  if (!(*(unsigned int (**)(void *, void, void))(*(void *)v8 + 248))(v8, 0, 0)) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 168);

  return v9();
}

uint64_t sub_2161FF5CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))();
}

uint64_t sub_2161FF5F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t sub_2161FF61C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t sub_2161FF644(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 200))();
}

uint64_t sub_2161FF66C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

uint64_t sub_2161FF694(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 208))();
}

uint64_t sub_2161FF6BC(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_216227930(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_2161FF7CC(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7) {
    sub_21625E68C(v7);
  }
  return 1;
}

uint64_t sub_2161FF7CC(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4 = sub_216227930(*(void *)(a1 + 32), a2, a3);
  if (v4)
  {
    (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
    CFArrayRef v5 = *(void **)(a1 + 24);
    if (v5) {
      sub_21625E68C(v5);
    }
  }
  return v4;
}

uint64_t sub_2161FF838(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    *(unsigned char *)(v5 + 304) = a2;
    *(unsigned char *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_2161FF894()
{
  return 0;
}

uint64_t sub_2161FF8A0()
{
  return 0;
}

uint64_t sub_2161FF8A8(uint64_t a1)
{
  return sub_216192078(*(uint64_t **)(a1 + 16));
}

void sub_2161FF8B0(uint64_t a1)
{
  sub_216192078(*(uint64_t **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    sub_21625E86C(v2);
  }
}

void sub_2161FF904(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    sub_21625E7E0(v1, 1);
  }
}

uint64_t sub_2161FF918()
{
  return 0;
}

void sub_2161FF920()
{
}

uint64_t sub_2161FF928()
{
  return 0;
}

uint64_t sub_2161FF930(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

uint64_t sub_2161FFA94(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (a2)
    {
      CFStringRef v9 = *(const __CFString **)(a2 + 72);
      if (v9)
      {
        sub_2162F09FC(*(void *)(*(void *)(v6 + 16) + 32), v9);
        uint64_t v6 = *(void *)(a1 + 24);
      }
      CFStringRef v10 = *(const __CFString **)(a2 + 80);
      if (v10)
      {
        sub_2162F0ABC(*(void *)(*(void *)(v6 + 16) + 32), v10);
        uint64_t v6 = *(void *)(a1 + 24);
      }
    }
    return sub_21625EA44(v6, a2, a3, a4);
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);
    return v12();
  }
}

void sub_2161FFBC4(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v5 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 2
        || (uint64_t v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 3))
      {
        CFStringRef v9 = *(void **)(a1 + 24);
        uint64_t v10 = [a2 v6:v7];
        sub_21625F328(v9, v10);
      }
    }
  }
}

uint64_t sub_2161FFC8C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    return sub_21625F27C(v4, a2, a3);
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
  }
}

uint64_t sub_2161FFCC8()
{
  return 0;
}

uint64_t sub_2161FFCD4()
{
  return 0;
}

uint64_t sub_2161FFCDC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_2161FFCE4(uint64_t a1)
{
  uint64_t v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  sub_2161FAA04((uint64_t *)(a1 + 32), 0);
  sub_2161FCBE0((uint64_t *)(a1 + 24), 0);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_2161FFD80(uint64_t a1)
{
  sub_216200E3C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2161FFDB8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2161FFDC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_2161FFDC8(uint64_t a1)
{
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v3 = *(__CFSet **)(a1 + 72);
  if (v3) {
    CFSetRemoveAllValues(v3);
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);

  return v4();
}

uint64_t sub_2161FFE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);

  return v8();
}

uint64_t sub_2161FFF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 32);

  return v8();
}

uint64_t sub_216200068(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

void *sub_216200090(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)i + 48))(i);
    uint64_t v6 = v3;
    if (!v3) {
      break;
    }
    uint64_t v7 = [v3 v4:v5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 6) {
      break;
    }
    if (MecabraCandidateGetSurface(v6, v8, v9))
    {
      uint64_t v12 = [v6 v10:v11];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89) {
        return v6;
      }
      CFSetRef v15 = *(const __CFSet **)(a1 + 72);
      uint64_t Surface = (const void *)MecabraCandidateGetSurface(v6, v13, v14);
      if (!CFSetContainsValue(v15, Surface))
      {
        uint64_t v19 = *(__CFSet **)(a1 + 72);
        CFStringRef v20 = (const void *)MecabraCandidateGetSurface(v6, v17, v18);
        CFSetAddValue(v19, v20);
        return v6;
      }
    }
  }
  return v6;
}

uint64_t sub_2162001A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))();
}

uint64_t sub_2162001C8(uint64_t a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    uint64_t v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          uint64_t v12 = *(void **)(a1 + 24);
          if (v12)
          {
            uint64_t v13 = [v4 v9:v10];
            sub_21625F328(v12, v13);
          }
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v14 = *(__CFSet **)(a1 + 72);
  if (v14) {
    CFSetRemoveAllValues(v14);
  }
LABEL_11:
  CFSetRef v15 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 72);

  return v15();
}

uint64_t sub_2162002F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))();
}

uint64_t sub_21620031C(uint64_t a1)
{
  uint64_t v2 = *(__CFSet **)(a1 + 72);
  if (v2) {
    CFSetRemoveAllValues(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 56);

  return v3();
}

uint64_t sub_216200394(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88))();
}

uint64_t sub_2162003BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))();
}

uint64_t sub_2162003E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))();
}

uint64_t sub_21620040C(uint64_t a1, const __CFString *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v5 + 16) + 32);
    return sub_2162F09FC(v6, a2);
  }
  return result;
}

void sub_216200488(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2B8(v4, a2);
  }
}

void sub_2162004FC(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2F0(v4, a2);
  }
}

uint64_t sub_216200570(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 144))();
}

uint64_t sub_216200598(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 152))();
}

uint64_t sub_2162005C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 160))();
}

uint64_t sub_2162005EC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (const void *)[a2 a2:a3];
  if (!v5
    || (uint64_t v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) == 0)
  {
    uint64_t v11 = (const void *)[a2 v6 v7];
    if (v11) {
      __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
    return 0;
  }
  if (!(*(unsigned int (**)(void *, void, void))(*(void *)v8 + 248))(v8, 0, 0)) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 168);

  return v9();
}

uint64_t sub_216200724(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))();
}

uint64_t sub_21620074C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t sub_216200774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t sub_21620079C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 200))();
}

uint64_t sub_2162007C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

uint64_t sub_2162007EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 208))();
}

uint64_t sub_216200814(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_216227930(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_216200924(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7) {
    sub_21625E68C(v7);
  }
  return 1;
}

uint64_t sub_216200924(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4 = sub_216227930(*(void *)(a1 + 32), a2, a3);
  if (v4)
  {
    (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
    CFArrayRef v5 = *(void **)(a1 + 24);
    if (v5) {
      sub_21625E68C(v5);
    }
  }
  return v4;
}

uint64_t sub_216200990(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    *(unsigned char *)(v5 + 304) = a2;
    *(unsigned char *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_2162009EC()
{
  return 0;
}

uint64_t sub_2162009F8()
{
  return 0;
}

uint64_t sub_216200A00(uint64_t a1)
{
  return sub_216192078(*(uint64_t **)(a1 + 16));
}

void sub_216200A08(uint64_t a1)
{
  sub_216192078(*(uint64_t **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    sub_21625E86C(v2);
  }
}

void sub_216200A5C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    sub_21625E7E0(v1, 1);
  }
}

uint64_t sub_216200A70()
{
  return 0;
}

void sub_216200A78()
{
}

uint64_t sub_216200A80()
{
  return 0;
}

uint64_t sub_216200A88(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

uint64_t sub_216200BEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (a2)
    {
      CFStringRef v9 = *(const __CFString **)(a2 + 72);
      if (v9)
      {
        sub_2162F09FC(*(void *)(*(void *)(v6 + 16) + 32), v9);
        uint64_t v6 = *(void *)(a1 + 24);
      }
      CFStringRef v10 = *(const __CFString **)(a2 + 80);
      if (v10)
      {
        sub_2162F0ABC(*(void *)(*(void *)(v6 + 16) + 32), v10);
        uint64_t v6 = *(void *)(a1 + 24);
      }
    }
    return sub_21625EA44(v6, a2, a3, a4);
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);
    return v12();
  }
}

void sub_216200D1C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v5 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 2
        || (uint64_t v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 3))
      {
        CFStringRef v9 = *(void **)(a1 + 24);
        uint64_t v10 = [a2 v6:v7];
        sub_21625F328(v9, v10);
      }
    }
  }
}

uint64_t sub_216200DE4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    return sub_21625F27C(v4, a2, a3);
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
  }
}

uint64_t sub_216200E20()
{
  return 0;
}

uint64_t sub_216200E2C()
{
  return 0;
}

uint64_t sub_216200E34(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_216200E3C(uint64_t a1)
{
  uint64_t v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  sub_2161FAA04((uint64_t *)(a1 + 32), 0);
  sub_2161FCBE0((uint64_t *)(a1 + 24), 0);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_216200ED8(uint64_t a1)
{
  sub_216201F94(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216200F10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_216200F18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_216200F20(uint64_t a1)
{
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v3 = *(__CFSet **)(a1 + 72);
  if (v3) {
    CFSetRemoveAllValues(v3);
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);

  return v4();
}

uint64_t sub_216200FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);

  return v8();
}

uint64_t sub_2162010CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 32);

  return v8();
}

uint64_t sub_2162011C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

void *sub_2162011E8(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)i + 48))(i);
    uint64_t v6 = v3;
    if (!v3) {
      break;
    }
    uint64_t v7 = [v3 v4:v5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 6) {
      break;
    }
    if (MecabraCandidateGetSurface(v6, v8, v9))
    {
      uint64_t v12 = [v6 v10:v11];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89) {
        return v6;
      }
      CFSetRef v15 = *(const __CFSet **)(a1 + 72);
      uint64_t Surface = (const void *)MecabraCandidateGetSurface(v6, v13, v14);
      if (!CFSetContainsValue(v15, Surface))
      {
        uint64_t v19 = *(__CFSet **)(a1 + 72);
        CFStringRef v20 = (const void *)MecabraCandidateGetSurface(v6, v17, v18);
        CFSetAddValue(v19, v20);
        return v6;
      }
    }
  }
  return v6;
}

uint64_t sub_2162012F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))();
}

uint64_t sub_216201320(uint64_t a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    uint64_t v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          uint64_t v12 = *(void **)(a1 + 24);
          if (v12)
          {
            uint64_t v13 = [v4 v9:v10];
            sub_21625F328(v12, v13);
          }
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v14 = *(__CFSet **)(a1 + 72);
  if (v14) {
    CFSetRemoveAllValues(v14);
  }
LABEL_11:
  CFSetRef v15 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 72);

  return v15();
}

uint64_t sub_21620144C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))();
}

uint64_t sub_216201474(uint64_t a1)
{
  uint64_t v2 = *(__CFSet **)(a1 + 72);
  if (v2) {
    CFSetRemoveAllValues(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 56);

  return v3();
}

uint64_t sub_2162014EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88))();
}

uint64_t sub_216201514(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))();
}

uint64_t sub_21620153C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))();
}

uint64_t sub_216201564(uint64_t a1, const __CFString *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v5 + 16) + 32);
    return sub_2162F09FC(v6, a2);
  }
  return result;
}

void sub_2162015E0(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2B8(v4, a2);
  }
}

void sub_216201654(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2F0(v4, a2);
  }
}

uint64_t sub_2162016C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 144))();
}

uint64_t sub_2162016F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 152))();
}

uint64_t sub_21620171C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 160))();
}

uint64_t sub_216201744(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (const void *)[a2 a2:a3];
  if (!v5
    || (uint64_t v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) == 0)
  {
    uint64_t v11 = (const void *)[a2 v6:v7];
    if (v11) {
      __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
    return 0;
  }
  if (!(*(unsigned int (**)(void *, void, void))(*(void *)v8 + 248))(v8, 0, 0)) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 168);

  return v9();
}

uint64_t sub_21620187C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))();
}

uint64_t sub_2162018A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t sub_2162018CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t sub_2162018F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 200))();
}

uint64_t sub_21620191C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

uint64_t sub_216201944(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 208))();
}

uint64_t sub_21620196C(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_216227930(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_216201A7C(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7) {
    sub_21625E68C(v7);
  }
  return 1;
}

uint64_t sub_216201A7C(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4 = sub_216227930(*(void *)(a1 + 32), a2, a3);
  if (v4)
  {
    (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
    CFArrayRef v5 = *(void **)(a1 + 24);
    if (v5) {
      sub_21625E68C(v5);
    }
  }
  return v4;
}

uint64_t sub_216201AE8(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    *(unsigned char *)(v5 + 304) = a2;
    *(unsigned char *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_216201B44()
{
  return 0;
}

uint64_t sub_216201B50()
{
  return 0;
}

uint64_t sub_216201B58(uint64_t a1)
{
  return sub_216192078(*(uint64_t **)(a1 + 16));
}

void sub_216201B60(uint64_t a1)
{
  sub_216192078(*(uint64_t **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    sub_21625E86C(v2);
  }
}

void sub_216201BB4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    sub_21625E7E0(v1, 1);
  }
}

uint64_t sub_216201BC8()
{
  return 0;
}

void sub_216201BD0()
{
}

uint64_t sub_216201BD8()
{
  return 0;
}

uint64_t sub_216201BE0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

uint64_t sub_216201D44(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (a2)
    {
      CFStringRef v9 = *(const __CFString **)(a2 + 72);
      if (v9)
      {
        sub_2162F09FC(*(void *)(*(void *)(v6 + 16) + 32), v9);
        uint64_t v6 = *(void *)(a1 + 24);
      }
      CFStringRef v10 = *(const __CFString **)(a2 + 80);
      if (v10)
      {
        sub_2162F0ABC(*(void *)(*(void *)(v6 + 16) + 32), v10);
        uint64_t v6 = *(void *)(a1 + 24);
      }
    }
    return sub_21625EA44(v6, a2, a3, a4);
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);
    return v12();
  }
}

void sub_216201E74(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v5 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 2
        || (uint64_t v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 3))
      {
        CFStringRef v9 = *(void **)(a1 + 24);
        uint64_t v10 = [a2 v6:v7];
        sub_21625F328(v9, v10);
      }
    }
  }
}

uint64_t sub_216201F3C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    return sub_21625F27C(v4, a2, a3);
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
  }
}

uint64_t sub_216201F78()
{
  return 0;
}

uint64_t sub_216201F84()
{
  return 0;
}

uint64_t sub_216201F8C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_216201F94(uint64_t a1)
{
  uint64_t v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  sub_2161FAA04((uint64_t *)(a1 + 32), 0);
  sub_2161FCBE0((uint64_t *)(a1 + 24), 0);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_216202030(uint64_t a1)
{
  sub_2162030EC(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216202068(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_216202070(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_216202078(uint64_t a1)
{
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v3 = *(__CFSet **)(a1 + 72);
  if (v3) {
    CFSetRemoveAllValues(v3);
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);

  return v4();
}

uint64_t sub_216202130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);

  return v8();
}

uint64_t sub_216202224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFArray **)(a1 + 64);
  if (v6) {
    CFArrayRemoveAllValues(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v7 = *(__CFSet **)(a1 + 72);
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  if (a4)
  {
    if (*(void *)(a4 + 72)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
    }
    if (*(void *)(a4 + 80)) {
      (*(void (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 32);

  return v8();
}

uint64_t sub_216202318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

void *sub_216202340(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)i + 48))(i);
    uint64_t v6 = v3;
    if (!v3) {
      break;
    }
    uint64_t v7 = [v3 v4:v5];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 6) {
      break;
    }
    if (MecabraCandidateGetSurface(v6, v8, v9))
    {
      uint64_t v12 = [v6 v10:v11];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89) {
        return v6;
      }
      CFSetRef v15 = *(const __CFSet **)(a1 + 72);
      uint64_t Surface = (const void *)MecabraCandidateGetSurface(v6, v13, v14);
      if (!CFSetContainsValue(v15, Surface))
      {
        uint64_t v19 = *(__CFSet **)(a1 + 72);
        CFStringRef v20 = (const void *)MecabraCandidateGetSurface(v6, v17, v18);
        CFSetAddValue(v19, v20);
        return v6;
      }
    }
  }
  return v6;
}

uint64_t sub_216202450(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))();
}

uint64_t sub_216202478(uint64_t a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    uint64_t v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          uint64_t v12 = *(void **)(a1 + 24);
          if (v12)
          {
            uint64_t v13 = [v4 v9:v10];
            sub_21625F328(v12, v13);
          }
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v14 = *(__CFSet **)(a1 + 72);
  if (v14) {
    CFSetRemoveAllValues(v14);
  }
LABEL_11:
  CFSetRef v15 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 72);

  return v15();
}

uint64_t sub_2162025A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))();
}

uint64_t sub_2162025CC(uint64_t a1)
{
  uint64_t v2 = *(__CFSet **)(a1 + 72);
  if (v2) {
    CFSetRemoveAllValues(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 56);

  return v3();
}

uint64_t sub_216202644(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88))();
}

uint64_t sub_21620266C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))();
}

uint64_t sub_216202694(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))();
}

uint64_t sub_2162026BC(uint64_t a1, const __CFString *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v5 + 16) + 32);
    return sub_2162F09FC(v6, a2);
  }
  return result;
}

void sub_216202738(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2B8(v4, a2);
  }
}

void sub_2162027AC(uint64_t a1, const __CFArray *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    sub_21625F2F0(v4, a2);
  }
}

uint64_t sub_216202820(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 144))();
}

uint64_t sub_216202848(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 152))();
}

uint64_t sub_216202874(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 160))();
}

uint64_t sub_21620289C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (const void *)[a2 a2:a3];
  if (!v5
    || (uint64_t v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) == 0)
  {
    uint64_t v11 = (const void *)[a2 v6:v7];
    if (v11) {
      __dynamic_cast(v11, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
    return 0;
  }
  if (!(*(unsigned int (**)(void *, void, void))(*(void *)v8 + 248))(v8, 0, 0)) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 168);

  return v9();
}

uint64_t sub_2162029D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))();
}

uint64_t sub_2162029FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t sub_216202A24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t sub_216202A4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 200))();
}

uint64_t sub_216202A74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

uint64_t sub_216202A9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 208))();
}

uint64_t sub_216202AC4(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_216227930(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_216202BD4(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7) {
    sub_21625E68C(v7);
  }
  return 1;
}

uint64_t sub_216202BD4(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4 = sub_216227930(*(void *)(a1 + 32), a2, a3);
  if (v4)
  {
    (*(void (**)(void))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16));
    CFArrayRef v5 = *(void **)(a1 + 24);
    if (v5) {
      sub_21625E68C(v5);
    }
  }
  return v4;
}

uint64_t sub_216202C40(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    *(unsigned char *)(v5 + 304) = a2;
    *(unsigned char *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_216202C9C()
{
  return 0;
}

uint64_t sub_216202CA8()
{
  return 0;
}

uint64_t sub_216202CB0(uint64_t a1)
{
  return sub_216192078(*(uint64_t **)(a1 + 16));
}

void sub_216202CB8(uint64_t a1)
{
  sub_216192078(*(uint64_t **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    sub_21625E86C(v2);
  }
}

void sub_216202D0C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    sub_21625E7E0(v1, 1);
  }
}

uint64_t sub_216202D20()
{
  return 0;
}

void sub_216202D28()
{
}

uint64_t sub_216202D30()
{
  return 0;
}

uint64_t sub_216202D38(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

uint64_t sub_216202E9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (a2)
    {
      CFStringRef v9 = *(const __CFString **)(a2 + 72);
      if (v9)
      {
        sub_2162F09FC(*(void *)(*(void *)(v6 + 16) + 32), v9);
        uint64_t v6 = *(void *)(a1 + 24);
      }
      CFStringRef v10 = *(const __CFString **)(a2 + 80);
      if (v10)
      {
        sub_2162F0ABC(*(void *)(*(void *)(v6 + 16) + 32), v10);
        uint64_t v6 = *(void *)(a1 + 24);
      }
    }
    return sub_21625EA44(v6, a2, a3, a4);
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);
    return v12();
  }
}

void sub_216202FCC(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v5 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 2
        || (uint64_t v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 3))
      {
        CFStringRef v9 = *(void **)(a1 + 24);
        uint64_t v10 = [a2 v6:v7];
        sub_21625F328(v9, v10);
      }
    }
  }
}

uint64_t sub_216203094(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    return sub_21625F27C(v4, a2, a3);
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
  }
}

uint64_t sub_2162030D0()
{
  return 0;
}

uint64_t sub_2162030DC()
{
  return 0;
}

uint64_t sub_2162030E4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_2162030EC(uint64_t a1)
{
  uint64_t v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  sub_2161FAA04((uint64_t *)(a1 + 32), 0);
  sub_2161FCBE0((uint64_t *)(a1 + 24), 0);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_216203184(uint64_t a1, _DWORD *a2)
{
  *(void *)a1 = &unk_26C6C1DD8;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x263EFFFA0]);
  operator new();
}

void sub_2162032FC(_Unwind_Exception *a1)
{
  sub_2161BE0C8(v4, 0);
  sub_2161FAA04(v3, 0);
  sub_2161FCBE0(v2, 0);
  sub_21620334C(v1, 0);
  _Unwind_Resume(a1);
}

id ***sub_21620334C(id ***result, id **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_21632929C((uint64_t)(v2 + 1));
    sub_21623E67C(v2, 0);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2162033BC(uint64_t a1)
{
  sub_216203C5C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162033F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2162033FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_216203404(uint64_t a1)
{
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v3 = *(__CFSet **)(a1 + 72);
  if (v3) {
    CFSetRemoveAllValues(v3);
  }
  return 0;
}

uint64_t sub_216203444(uint64_t a1)
{
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v3 = *(__CFSet **)(a1 + 72);
  if (v3) {
    CFSetRemoveAllValues(v3);
  }
  return 0;
}

uint64_t sub_216203484(uint64_t a1)
{
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v3 = *(__CFSet **)(a1 + 72);
  if (v3) {
    CFSetRemoveAllValues(v3);
  }
  return 0;
}

uint64_t sub_2162034C4()
{
  return 0;
}

uint64_t sub_2162034CC()
{
  return 0;
}

uint64_t sub_2162034DC(uint64_t a1, uint64_t a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    uint64_t v4 = (void *)sub_21628F1BC(a2, 0);
    char v5 = sub_2162591E0((uint64_t)v4);
    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [v4 v6:v7];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 2
          || (uint64_t v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 3))
        {
          uint64_t v12 = *(void **)(a1 + 24);
          if (v12)
          {
            uint64_t v13 = [v4 v9:v10];
            sub_21625F328(v12, v13);
          }
          return 1;
        }
      }
    }
  }
  else
  {
    sub_2162591E0(0);
  }
  uint64_t v14 = *(__CFSet **)(a1 + 72);
  if (v14) {
    CFSetRemoveAllValues(v14);
  }
  return 1;
}

uint64_t sub_2162035CC()
{
  return 0;
}

uint64_t sub_2162035D4(uint64_t a1)
{
  uint64_t v1 = *(__CFSet **)(a1 + 72);
  if (v1) {
    CFSetRemoveAllValues(v1);
  }
  return 0;
}

uint64_t sub_2162035F8()
{
  return 0;
}

uint64_t sub_216203608(uint64_t result, const __CFString *a2)
{
  uint64_t v2 = *(void *)(result + 24);
  if (v2) {
    return sub_2162F09FC(*(void *)(*(void *)(v2 + 16) + 32), a2);
  }
  return result;
}

void sub_216203620(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2) {
    sub_21625F2B8(v2, a2);
  }
}

void sub_216203630(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2) {
    sub_21625F2F0(v2, a2);
  }
}

uint64_t sub_21620364C()
{
  return 0;
}

uint64_t sub_216203654(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (const void *)[a2 a2:a3];
  if (v4
    && (uint64_t v7 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0)) != 0)
  {
    (*(void (**)(void *, void, void))(*(void *)v7 + 248))(v7, 0, 0);
  }
  else
  {
    uint64_t v8 = (const void *)[a2 v5:v6];
    if (v8) {
      __dynamic_cast(v8, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    }
  }
  return 0;
}

double sub_216203750()
{
  return 0.0;
}

CFMutableArrayRef sub_216203758()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0);
}

uint64_t sub_216203770()
{
  return 0;
}

uint64_t sub_216203778(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    CFArrayRef v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x263EFFF70]);
    LOBYTE(v4) = sub_216227930(*(void *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_216203860(a1, 2, 0);
    if (!result) {
      return result;
    }
  }
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7) {
    sub_21625E68C(v7);
  }
  return 1;
}

uint64_t sub_216203860(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4 = sub_216227930(*(void *)(a1 + 32), a2, a3);
  if (v4)
  {
    CFArrayRef v5 = *(void **)(a1 + 24);
    if (v5) {
      sub_21625E68C(v5);
    }
  }
  return v4;
}

uint64_t sub_2162038A4(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    *(unsigned char *)(v2 + 304) = a2;
    *(unsigned char *)(v2 + 400) = a2;
  }
  return result;
}

uint64_t sub_2162038B8()
{
  return 0;
}

uint64_t sub_2162038C4()
{
  return 0;
}

uint64_t sub_2162038CC()
{
  return 1;
}

void sub_2162038D4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    sub_21625E86C(v1);
  }
}

void sub_2162038E8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    sub_21625E7E0(v1, 1);
  }
}

uint64_t sub_2162038FC()
{
  return 0;
}

void sub_216203904()
{
}

uint64_t sub_21620390C()
{
  return 0;
}

uint64_t sub_216203914(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2161E2834(*(_DWORD *)(a1 + 8));
    MecabraContextCreateMutable();
  }
  return 0;
}

uint64_t sub_216203A78(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    if (a2)
    {
      CFStringRef v9 = *(const __CFString **)(a2 + 72);
      if (v9)
      {
        sub_2162F09FC(*(void *)(*(void *)(result + 16) + 32), v9);
        uint64_t result = *(void *)(a1 + 24);
      }
      CFStringRef v10 = *(const __CFString **)(a2 + 80);
      if (v10)
      {
        sub_2162F0ABC(*(void *)(*(void *)(result + 16) + 32), v10);
        uint64_t result = *(void *)(a1 + 24);
      }
    }
    return sub_21625EA44(result, a2, a3, a4);
  }
  return result;
}

void sub_216203B64(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v5 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 72))(v5) == 2
        || (uint64_t v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 3))
      {
        CFStringRef v9 = *(void **)(a1 + 24);
        uint64_t v10 = [a2 v6:v7];
        sub_21625F328(v9, v10);
      }
    }
  }
}

uint64_t sub_216203C2C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return sub_21625F27C(result, a2, a3);
  }
  return result;
}

uint64_t sub_216203C40()
{
  return 0;
}

uint64_t sub_216203C4C()
{
  return 0;
}

uint64_t sub_216203C54(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_216203C5C(uint64_t a1)
{
  uint64_t v3 = (const void **)(a1 + 64);
  uint64_t v2 = *(__CFArray **)(a1 + 64);
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  sub_216195B5C((const void **)(a1 + 72), 0);
  sub_2161BE0C8(v3, 0);
  sub_2161FAA04((uint64_t *)(a1 + 32), 0);
  sub_2161FCBE0((uint64_t *)(a1 + 24), 0);
  sub_21620334C((id ***)(a1 + 16), 0);
  return a1;
}

uint64_t sub_216203CD0(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  sub_216203D58(a1);
  if (a2)
  {
    unsigned int v6 = atomic_load((unsigned int *)(a1 + 40));
    if (v6 == 1)
    {
      intptr_t v7 = dispatch_group_wait(*(dispatch_group_t *)(a1 + 8), a2);
      if (a3)
      {
        if (v7) {
          (*(void (**)(uint64_t))(a3 + 16))(a3);
        }
      }
    }
  }
  unsigned int v8 = atomic_load((unsigned int *)(a1 + 40));
  if (v8 == 2) {
    return *(void *)a1;
  }
  else {
    return 0;
  }
}

void sub_216203D58(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 24);
  v4[0] = sub_216203DCC;
  v4[1] = 0;
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    v6[0] = v4;
    v6[1] = &v3;
    uint64_t v5 = v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_216203E80);
  }
}

void sub_216203DCC(uint64_t a1)
{
  sub_21617E030(a1 + 136);
  atomic_store(1u, (unsigned int *)(a1 + 40));
  v5[0] = 0;
  v5[1] = v5;
  _OWORD v5[2] = 0x2020000000;
  v5[3] = a1;
  uint64_t v2 = *(NSObject **)(a1 + 8);
  uint64_t v3 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  void v4[2] = sub_216203EB0;
  v4[3] = &unk_26426B9D8;
  _OWORD v4[4] = v5;
  v4[5] = a1;
  dispatch_group_async(v2, v3, v4);
  _Block_object_dispose(v5, 8);
}

uint64_t sub_216203E80(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(uint64_t (**)(void *))v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = (void *)(*(void *)(*a1)[1] + (v3 >> 1));
  if (v3) {
    return (*(uint64_t (**)(void))(*v4 + v2))();
  }
  else {
    return v2(v4);
  }
}

void sub_216203EB0(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(std::mutex **)(v2 + 136);
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 144) = 0;
  uint64_t v4 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v5 = os_signpost_id_make_with_pointer(v4, (const void *)v2);
  unsigned int v6 = sub_2162D1CE4(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    intptr_t v7 = v6;
    if (os_signpost_enabled(v6))
    {
      unsigned int v8 = (void *)(v2 + 112);
      if (*(char *)(v2 + 135) < 0) {
        unsigned int v8 = (void *)*v8;
      }
      int v14 = 136315138;
      CFSetRef v15 = v8;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "AsyncResourceInit", "Async resource load with key: [%s]", (uint8_t *)&v14, 0xCu);
    }
  }
  CFStringRef v9 = *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16))();
  uint64_t v11 = *v9;
  *CFStringRef v9 = v10;
  if (v11) {
    sub_216204058((uint64_t)v9, v11);
  }
  atomic_store(2u, (unsigned int *)(v2 + 40));
  uint64_t v12 = sub_2162D1CE4(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v13 = v12;
    if (os_signpost_enabled(v12))
    {
      LOWORD(v14) = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v13, OS_SIGNPOST_INTERVAL_END, v5, "AsyncResourceInit", (const char *)&unk_2163CBB73, (uint8_t *)&v14, 2u);
    }
  }
  std::mutex::unlock(v3);
}

void sub_21620403C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216204058(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (const void **)(a2 + 8);
    os_signpost_id_t v5 = (void **)(a2 + 56);
    sub_21613F444(&v5);
    os_signpost_id_t v5 = (void **)(a2 + 32);
    sub_2162040DC(&v5);
    sub_2161868BC(v3, 0);
    sub_2161FBBAC((const void **)a2, 0);
    return MEMORY[0x2166CA800](a2, 0x1060C404B74122BLL);
  }
  return result;
}

void sub_2162040DC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void ***)**a1;
  if (v2)
  {
    uint64_t v4 = (const void ***)v1[1];
    os_signpost_id_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unsigned int v6 = v4 - 3;
        sub_216204168((uint64_t)(v4 - 3), *(v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      os_signpost_id_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216204168(uint64_t a1, const void **a2)
{
  if (a2)
  {
    sub_216204168(a1, *a2);
    sub_216204168(a1, a2[1]);
    sub_2161A108C(a2 + 6, 0);
    operator delete(a2);
  }
}

uint64_t sub_2162041C8(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  sub_216204250(a1);
  if (a2)
  {
    unsigned int v6 = atomic_load((unsigned int *)(a1 + 40));
    if (v6 == 1)
    {
      intptr_t v7 = dispatch_group_wait(*(dispatch_group_t *)(a1 + 8), a2);
      if (a3)
      {
        if (v7) {
          (*(void (**)(uint64_t))(a3 + 16))(a3);
        }
      }
    }
  }
  unsigned int v8 = atomic_load((unsigned int *)(a1 + 40));
  if (v8 == 2) {
    return *(void *)a1;
  }
  else {
    return 0;
  }
}

void sub_216204250(uint64_t a1)
{
  uint64_t v2 = (std::once_flag::_State_type *)(a1 + 24);
  v4[0] = sub_2162042C4;
  v4[1] = 0;
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    v6[0] = v4;
    v6[1] = &v3;
    os_signpost_id_t v5 = v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_216204378);
  }
}

void sub_2162042C4(uint64_t a1)
{
  sub_21617E030(a1 + 136);
  atomic_store(1u, (unsigned int *)(a1 + 40));
  v5[0] = 0;
  v5[1] = v5;
  _OWORD v5[2] = 0x2020000000;
  v5[3] = a1;
  uint64_t v2 = *(NSObject **)(a1 + 8);
  uint64_t v3 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  void v4[2] = sub_2162043A8;
  v4[3] = &unk_26426B9D8;
  _OWORD v4[4] = v5;
  v4[5] = a1;
  dispatch_group_async(v2, v3, v4);
  _Block_object_dispose(v5, 8);
}

uint64_t sub_216204378(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(uint64_t (**)(void *))v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = (void *)(*(void *)(*a1)[1] + (v3 >> 1));
  if (v3) {
    return (*(uint64_t (**)(void))(*v4 + v2))();
  }
  else {
    return v2(v4);
  }
}

void sub_2162043A8(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(std::mutex **)(v2 + 136);
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 144) = 0;
  uint64_t v4 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v5 = os_signpost_id_make_with_pointer(v4, (const void *)v2);
  unsigned int v6 = sub_2162D1CE4(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    intptr_t v7 = v6;
    if (os_signpost_enabled(v6))
    {
      unsigned int v8 = (void *)(v2 + 112);
      if (*(char *)(v2 + 135) < 0) {
        unsigned int v8 = (void *)*v8;
      }
      int v14 = 136315138;
      CFSetRef v15 = v8;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "AsyncResourceInit", "Async resource load with key: [%s]", (uint8_t *)&v14, 0xCu);
    }
  }
  CFStringRef v9 = *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16))();
  uint64_t v11 = *v9;
  *CFStringRef v9 = v10;
  if (v11) {
    sub_216204550((uint64_t)v9, v11);
  }
  atomic_store(2u, (unsigned int *)(v2 + 40));
  uint64_t v12 = sub_2162D1CE4(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v13 = v12;
    if (os_signpost_enabled(v12))
    {
      LOWORD(v14) = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v13, OS_SIGNPOST_INTERVAL_END, v5, "AsyncResourceInit", (const char *)&unk_2163CBB73, (uint8_t *)&v14, 2u);
    }
  }
  std::mutex::unlock(v3);
}

void sub_216204534(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_216204550(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_2162045B4((language_modeling::v1::LanguageModelSession **)(a2 + 16), 0);
    sub_216204604((language_modeling::v1::LanguageModel **)(a2 + 8), 0);
    JUMPOUT(0x2166CA800);
  }
}

language_modeling::v1::LanguageModelSession *sub_2162045B4(language_modeling::v1::LanguageModelSession **a1, language_modeling::v1::LanguageModelSession *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    language_modeling::v1::LanguageModelSession::~LanguageModelSession(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

language_modeling::v1::LanguageModel *sub_216204604(language_modeling::v1::LanguageModel **a1, language_modeling::v1::LanguageModel *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    language_modeling::v1::LanguageModel::~LanguageModel(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_216204654()
{
}

void sub_21620469C(uint64_t a1)
{
  uint64_t v2 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  *(void *)a1 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  *(void *)(a1 + 8) = CFArrayCreateMutable(0, 0, v2);
  *(void *)(a1 + 16) = CFArrayCreateMutable(0, 0, v2);
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = CFArrayCreateMutable(0, 0, v2);

  bzero((void *)(a1 + 36), 0x258uLL);
}

void sub_216204730(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }
  os_signpost_id_t v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
  }
}

void sub_216204798(const __CFString *a1, uint64_t a2, int a3)
{
  CFIndex Length = CFStringGetLength(a1);
  if (a3 != 2)
  {
    CFStringCreateMutableCopy(0, 0, a1);
    operator new[]();
  }
  CFIndex v7 = Length - 1;
  if (Length >= 1)
  {
    CFIndex v20 = Length;
    CFIndex v8 = 0;
    CFIndex v9 = 0;
    unsigned __int8 v10 = 4;
    while (1)
    {
      unsigned __int8 v11 = v10;
      int CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v9);
      uint64_t v13 = 0;
      while ((unsigned __int16)word_216381EE2[v13] != CharacterAtIndex)
      {
        if (++v13 == 21) {
          goto LABEL_9;
        }
      }
      if (v13 != -1) {
        break;
      }
LABEL_9:
      if ((CharacterAtIndex - 12583) <= 2
        && (&off_26426B9F8)[(__int16)(CharacterAtIndex - 12583)] - "'1(1)1" != -2)
      {
        unsigned __int8 v10 = 1;
        if (!v9) {
          goto LABEL_40;
        }
        goto LABEL_34;
      }
      uint64_t v14 = 0;
      while ((unsigned __int16)word_216381F16[v14] != CharacterAtIndex)
      {
        if (++v14 == 13) {
          goto LABEL_16;
        }
      }
      if (v14 != -1)
      {
        unsigned __int8 v10 = 2;
        if (!v9) {
          goto LABEL_40;
        }
        goto LABEL_34;
      }
LABEL_16:
      uint64_t v15 = 0;
      while ((unsigned __int16)word_216381F32[v15] != CharacterAtIndex)
      {
        if (++v15 == 5)
        {
          uint64_t v16 = 0;
          goto LABEL_23;
        }
      }
      uint64_t v16 = &word_216381F32[v15];
LABEL_23:
      BOOL v17 = (char *)v16 - (char *)word_216381F32 == -2 || v16 == 0;
      if (v17) {
        unsigned __int8 v10 = 4;
      }
      else {
        unsigned __int8 v10 = 3;
      }
      if (v9) {
        goto LABEL_34;
      }
LABEL_40:
      BOOL v17 = v9++ == v7;
      if (v17)
      {
        v22.length = v20 - v8;
        v22.location = v8;
        CFStringRef v19 = CFStringCreateWithSubstring(0, a1, v22);
        sub_216205CB4(v19, a2);
        if (v19) {
          CFRelease(v19);
        }
        return;
      }
    }
    unsigned __int8 v10 = 0;
    if (!v9) {
      goto LABEL_40;
    }
LABEL_34:
    if (v11 >= v10 || v11 == 4 || v10 == 4)
    {
      v21.length = v9 - v8;
      v21.location = v8;
      CFStringRef v18 = CFStringCreateWithSubstring(0, a1, v21);
      sub_216205CB4(v18, a2);
      if (v18) {
        CFRelease(v18);
      }
      CFIndex v8 = v9;
    }
    goto LABEL_40;
  }
}

void sub_216205B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_216205C50(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0;
  }
  os_signpost_id_t v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = 0;
}

void sub_216205CB4(const __CFString *value, uint64_t a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), value);
  CFIndex Length = CFStringGetLength(value);
  int CharacterAtIndex = CFStringGetCharacterAtIndex(value, 0);
  uint64_t v6 = 0;
  UniChar chars = CharacterAtIndex;
  while ((unsigned __int16)word_216381EE2[v6] != CharacterAtIndex)
  {
    if (++v6 == 21) {
      goto LABEL_6;
    }
  }
  if (v6 == -1)
  {
LABEL_6:
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, &stru_26C6FB1C0);
    CFIndex v7 = 0;
    CFIndex v8 = Length - 1;
    goto LABEL_10;
  }
  CFStringRef v9 = CFStringCreateWithCharacters(0, &chars, 1);
  CFStringRef v17 = v9;
  CFArrayAppendValue(*(CFMutableArrayRef *)a2, v9);
  if (v9) {
    CFRelease(v9);
  }
  CFIndex v8 = Length - 1;
  CFIndex v7 = 1;
  --Length;
LABEL_10:
  int v10 = CFStringGetCharacterAtIndex(value, v8);
  uint64_t v11 = 0;
  UniChar v16 = v10;
  while ((unsigned __int16)word_216381F32[v11] != v10)
  {
    if (++v11 == 5) {
      goto LABEL_15;
    }
  }
  if (v11 == -1)
  {
LABEL_15:
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), &stru_26C6FB1C0);
    goto LABEL_19;
  }
  CFStringRef v12 = CFStringCreateWithCharacters(0, &v16, 1);
  CFStringRef v17 = v12;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), v12);
  if (v12) {
    CFRelease(v12);
  }
  --Length;
LABEL_19:
  v19.location = v7;
  v19.length = Length;
  CFStringRef v13 = CFStringCreateWithSubstring(0, value, v19);
  CFStringRef v17 = v13;
  CFIndex v14 = CFStringGetLength(v13);
  uint64_t v15 = *(__CFArray **)(a2 + 8);
  if (v14) {
    CFArrayAppendValue(v15, v13);
  }
  else {
    CFArrayAppendValue(v15, &stru_26C6FB1C0);
  }
  ++*(_DWORD *)(a2 + 32);
  if (v13) {
    CFRelease(v13);
  }
}

void sub_216205E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216205EAC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  *a3 = 0;
  operator new[]();
}

uint64_t sub_216206744(uint64_t theChar)
{
  if (theChar)
  {
    int v1 = theChar;
    if ((unsigned __int16)(theChar - 58) > 0xFFF5u)
    {
      return 8;
    }
    else
    {
      if (sub_2162069B8(theChar)) {
        return 12;
      }
      if ((unsigned __int16)((v1 & 0xFFDF) - 91) >= 0xFFE6u)
      {
        if ((v1 - 65) >= 0x1A)
        {
          if ((v1 - 97) <= 0x15 && ((1 << (v1 - 97)) & 0x304111) != 0) {
            return 6;
          }
          else {
            return 7;
          }
        }
        else
        {
          return 11;
        }
      }
      else
      {
        if (v1 > 91)
        {
          if (v1 == 92) {
            return 4;
          }
          if (v1 == 94 || v1 == 126) {
            return 3;
          }
          return 9;
        }
        if (v1 == 39) {
          return 5;
        }
        if (v1 != 45)
        {
          if (v1 == 47) {
            return 2;
          }
          return 9;
        }
        return 1;
      }
    }
  }
  return theChar;
}

const char *sub_216206858(const char *a1, int a2)
{
  if (a2) {
    uint64_t v3 = (const char *)&unk_26797C358;
  }
  else {
    uint64_t v3 = (const char *)&unk_26797C426;
  }
  unsigned __int16 v4 = strlen(a1);
  unsigned __int16 v5 = v4;
  if (!v4) {
    return v3;
  }
  uint64_t v6 = (unsigned __int16)strlen(v3) - v4;
  if ((int)v6 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  CFIndex v8 = v3;
  do
  {
    uint64_t v9 = v5;
    int v10 = v8;
    uint64_t v11 = a1;
    while (1)
    {
      int v13 = *(unsigned __int8 *)v10++;
      int v12 = v13;
      int v14 = *(unsigned __int8 *)v11++;
      if (v12 != v14) {
        break;
      }
      if (!--v9) {
        return &v3[v7];
      }
    }
    uint64_t result = 0;
    ++v7;
    ++v8;
  }
  while (v7 != v6);
  return result;
}

uint64_t sub_21620691C(const __CFString *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (CFEqual(a1, @"zh")) {
    return 26;
  }
  if (CFEqual(a1, @"sh")) {
    return 27;
  }
  if (CFStringCompare(a1, @"ch", 0)) {
    return CFStringGetCharacterAtIndex(a1, 0) - 97;
  }
  return 28;
}

uint64_t sub_2162069B8(UniChar theChar)
{
  CFCharacterSetRef v2 = (const __CFCharacterSet *)qword_26797DA18;
  if (!qword_26797DA18)
  {
    qword_26797DA18 = (uint64_t)CFCharacterSetCreateMutable(0);
    v5.location = 12549;
    v5.length = 37;
    CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_26797DA18, v5);
    v6.location = 713;
    v6.length = 3;
    CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_26797DA18, v6);
    v7.location = 711;
    v7.length = 1;
    CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_26797DA18, v7);
    v8.location = 729;
    v8.length = 1;
    CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_26797DA18, v8);
    CFCharacterSetRef v2 = (const __CFCharacterSet *)qword_26797DA18;
  }

  return CFCharacterSetIsCharacterMember(v2, theChar);
}

uint64_t sub_216206A40(const char *a1)
{
  int v1 = *a1;
  if (!*a1) {
    return 0xFFFFFFFFLL;
  }
  if (!strcmp(a1, "zh")) {
    return 26;
  }
  if (!strcmp(a1, "sh")) {
    return 27;
  }
  if (!strcmp(a1, "ch")) {
    return 28;
  }
  return (v1 - 97);
}

uint64_t sub_216206AC4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = sub_216307320(a1, a2, 0, a3);
  *(void *)uint64_t v6 = &unk_26C6C06F0;
  *(_DWORD *)(v6 + 108) = a4;
  *(void *)(v6 + 136) = 0;
  *(void *)(v6 + 112) = -1;
  *(void *)(v6 + 120) = 0;
  *(void *)(v6 + 126) = 0;
  *(void *)(a1 + 144) = sub_216206B6C(v6);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 40) = 8;
  return a1;
}

void sub_216206B58(_Unwind_Exception *a1)
{
  sub_2163073E4(v1);
  _Unwind_Resume(a1);
}

__CFString *sub_216206B6C(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(*(void *)(a1 + 8) + 16);
  if (!v2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1) {
    return 0;
  }
  unint64_t v4 = Count;
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  uint64_t v6 = 15;
  if (v4 >= 0xF)
  {
    CFIndex v7 = v4 - 15;
  }
  else
  {
    uint64_t v6 = v4;
    CFIndex v7 = 0;
  }
  CFIndex v8 = v7 + v6;
  do
  {
    uint64_t v9 = (void *)sub_21628F0D0(*(void *)(a1 + 8), v7);
    if (!MecabraCandidateGetSurface(v9, v10, v11)) {
      break;
    }
    CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(v9, v12, v13);
    CFStringAppend(Mutable, Surface);
    ++v7;
  }
  while (v7 < v8);
  return Mutable;
}

uint64_t sub_216206C28(void *a1)
{
  *a1 = &unk_26C6C06F0;
  CFArrayRef v2 = (const void *)a1[17];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[18];
  if (v3) {
    CFRelease(v3);
  }
  unint64_t v4 = (const void *)a1[19];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = a1[32];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  uint64_t v6 = (void *)a1[29];
  if (v6)
  {
    a1[30] = v6;
    operator delete(v6);
  }
  CFIndex v7 = (void *)a1[26];
  if (v7)
  {
    a1[27] = v7;
    operator delete(v7);
  }
  CFIndex v8 = (void *)a1[23];
  if (v8)
  {
    a1[24] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[20];
  if (v9)
  {
    a1[21] = v9;
    operator delete(v9);
  }

  return sub_2163073E4((uint64_t)a1);
}

void sub_216206D10(void *a1)
{
  sub_216206C28(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216206D48(uint64_t a1@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((*(unsigned char *)(a1 + 108) & 4) != 0) {
    operator new();
  }
  CFArrayRef v4 = *(const __CFArray **)(*(void *)(a1 + 8) + 16);
  if (v4)
  {
    uint64_t Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      do
      {
        if (*(void *)(a1 + 32) <= (unint64_t)(((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3)) {
          break;
        }
        uint64_t v6 = Count--;
        CFIndex v7 = (void *)sub_21628F0D0(*(void *)(a1 + 8), Count);
        int v10 = v7;
        if (v7 && objc_msgSend_rawCandidate(v7, v8, v9))
        {
          uint64_t v13 = [v10 v11:v12];
          uint64_t v14 = v13;
          UniChar v16 = (uint64_t *)a2[1];
          unint64_t v15 = (unint64_t)a2[2];
          if ((unint64_t)v16 >= v15)
          {
            uint64_t v18 = ((char *)v16 - (unsigned char *)*a2) >> 3;
            if ((unint64_t)(v18 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v19 = v15 - (void)*a2;
            uint64_t v20 = v19 >> 2;
            if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
              uint64_t v20 = v18 + 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21) {
              CFRange v22 = (char *)sub_2160FFAA8((uint64_t)(a2 + 2), v21);
            }
            else {
              CFRange v22 = 0;
            }
            uint64_t v23 = (uint64_t *)&v22[8 * v18];
            *uint64_t v23 = v14;
            CFStringRef v17 = v23 + 1;
            uint8x8_t v25 = (char *)*a2;
            uint64_t v24 = (char *)a2[1];
            if (v24 != *a2)
            {
              do
              {
                uint64_t v26 = *((void *)v24 - 1);
                v24 -= 8;
                *--uint64_t v23 = v26;
              }
              while (v24 != v25);
              uint64_t v24 = (char *)*a2;
            }
            *a2 = v23;
            a2[1] = v17;
            a2[2] = &v22[8 * v21];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *UniChar v16 = v13;
            CFStringRef v17 = v16 + 1;
          }
          a2[1] = v17;
        }
      }
      while (v6 > 1);
    }
  }
}

void sub_216206FAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216206FF8(uint64_t a1)
{
  sub_216307994(a1);
  *(unsigned char *)(a1 + 104) = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return;
  }
  if (*(_DWORD *)(v2 + 64) == 21)
  {
LABEL_6:
    *(_WORD *)(a1 + 131) = 257;
    return;
  }
  uint64_t v3 = sub_216308080(a1);
  if (!v3) {
    goto LABEL_62;
  }
  uint64_t v4 = v3;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 72))(v3) == 6
    || (*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 7)
  {
    goto LABEL_6;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4))
  {
LABEL_62:
    *(unsigned char *)(a1 + 128) = 1;
    return;
  }
  CFStringRef v5 = *(const __CFString **)(a1 + 144);
  if (v5 && CFStringGetLength(v5) >= 1) {
    operator new();
  }
  if ((*(unsigned char *)(a1 + 108) & 8) == 0
    && (uint64_t v6 = sub_216308080(a1), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 6)
    && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6) != 7
    && (CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6)) != 0
    && CFStringGetLength(v7)
    && (uint64_t v8 = *(void *)(a1 + 24), (v9 = *(unsigned int **)(v8 + 40)) != 0)
    && (sub_21617DED8(*(void *)(v8 + 40)), unsigned int v10 = atomic_load(v9 + 10), v10 == 2)
    && (uint64_t v174 = *(void *)v9) != 0)
  {
    CFArrayRef v11 = *(const __CFArray **)(a1 + 96);
    CFIndex Count = CFArrayGetCount(v11);
    CFAllocatorRef v176 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    p_isa = &Mutable->isa;
    if (Count >= 1)
    {
      uint64_t v14 = 0;
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, Count + v14 - 1);
        if (!sub_2161A1F24(ValueAtIndex)) {
          break;
        }
        if (v14) {
          CFStringInsert(Mutable, 0, @" ");
        }
        CFStringInsert(Mutable, 0, ValueAtIndex);
        --v14;
      }
      while (Count + v14 > 0);
    }
    CFIndex Length = CFStringGetLength(Mutable);
    CFAllocatorRef v17 = v176;
    if (!Length) {
      goto LABEL_149;
    }
    *(void *)(a1 + 56) = *(void *)(a1 + 48);
    v173 = (void *)(a1 + 48);
    uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 104);
    (*(void (**)(uint64_t, CFMutableStringRef, void, CFIndex))(*(void *)v18 + 16))(v18, Mutable, 0, Length);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 96));
    do
    {
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v18 + 24))(v18)) {
        break;
      }
      v195.location = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18);
      v195.length = v19;
      CFStringRef v20 = CFStringCreateWithSubstring(v17, Mutable, v195);
      CFIndex v21 = 0;
      CFStringRef p_p_isa = v20;
      while (1)
      {
        CFIndex v22 = CFStringGetLength(v20);
        if (v22 <= v21) {
          break;
        }
        if ((CFStringGetCharacterAtIndex(v20, v21) & 0xF800 | 0x400) == 0xDC00)
        {
          *(void *)(a1 + 56) = *(void *)(a1 + 48);
          CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 96));
          goto LABEL_55;
        }
        ++v21;
      }
      uint64_t v23 = CFStringCompare(v20, @"i", 0) ? (__CFString *)v20 : @"I";
      int v24 = (*(uint64_t (**)(uint64_t, __CFString *))(*(void *)v174 + 16))(v174, v23);
      int v25 = v24;
      CFIndex v27 = *(_DWORD **)(a1 + 56);
      unint64_t v26 = *(void *)(a1 + 64);
      if ((unint64_t)v27 >= v26)
      {
        uint64_t v29 = (_DWORD *)*v173;
        uint64_t v30 = ((uint64_t)v27 - *v173) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v32 = v26 - (void)v29;
        if (v32 >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_2161129B4(a1 + 64, v33);
          uint64_t v29 = *(_DWORD **)(a1 + 48);
          CFIndex v27 = *(_DWORD **)(a1 + 56);
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = &v34[4 * v30];
        *(_DWORD *)uint64_t v35 = v25;
        unint64_t v28 = v35 + 4;
        if (v27 == v29)
        {
          CFAllocatorRef v17 = v176;
        }
        else
        {
          CFAllocatorRef v17 = v176;
          do
          {
            int v36 = *--v27;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          while (v27 != v29);
        }
        *(void *)(a1 + 48) = v35;
        *(void *)(a1 + 56) = v28;
        *(void *)(a1 + 64) = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *CFIndex v27 = v24;
        unint64_t v28 = v27 + 1;
        CFAllocatorRef v17 = v176;
      }
      *(void *)(a1 + 56) = v28;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 96), v20);
LABEL_55:
      if (v20) {
        CFRelease(v20);
      }
    }
    while (v22 <= v21);
    id v37 = *(char **)(a1 + 48);
    uint64_t v38 = *(void *)(a1 + 56);
    uint64_t v39 = (v38 - (uint64_t)v37) >> 2;
    if (v39 && (v39 != 1 || *(_DWORD *)(v38 - 4)))
    {
      sub_21617AAB8((uint64_t)v173, v37, byte_21637B8F0);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 96), 0, &stru_26C6FB1C0);
      char v40 = 1;
    }
    else
    {
LABEL_149:
      char v40 = 0;
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    char v40 = 0;
  }
  *(unsigned char *)(a1 + 104) = v40;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_26797DA20, memory_order_acquire) != -1)
  {
    p_isa = &v185;
    CFStringRef p_p_isa = (const __CFString *)&p_isa;
    std::__call_once(&qword_26797DA20, &p_p_isa, (void (__cdecl *)(void *))sub_216208BCC);
  }
  CFStringRef v41 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  CFStringRef p_p_isa = 0;
  p_CFStringRef p_p_isa = (uint64_t)&p_p_isa;
  uint64_t v191 = 0x2000000000;
  LOBYTE(v192) = 1;
  p_isa = (void *)MEMORY[0x263EF8330];
  uint64_t v179 = 0x40000000;
  uint64_t v180 = (uint64_t)sub_216208AD8;
  v181 = &unk_26426BA40;
  v182 = &p_p_isa;
  uint64_t v183 = (uint64_t)v41;
  sub_2161E25DC(v41, 1, (uint64_t)&p_isa);
  char v42 = *(unsigned char *)(p_p_p_isa + 24);
  _Block_object_dispose(&p_p_isa, 8);
  *(unsigned char *)(a1 + 128) = v42;
  uint64_t v43 = sub_216308080(a1);
  int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 72))(v43);
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 24))(v43);
  CFIndex v46 = -1;
  if (v45 && v44 != 5)
  {
    CFStringRef v47 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 24))(v43);
    CFIndex v46 = CFStringGetLength(v47);
  }
  *(void *)(a1 + 112) = v46;
  if ((v44 - 4) >= 0xFFFFFFFE)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v43 + 192))(v43))
    {
      uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 192))(v43);
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 184))(v43);
      CFStringRef Copy = CFStringCreateWithFormat(0, 0, @"%@%@", v48, v49);
    }
    else
    {
      CFAllocatorRef v51 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v52 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 184))(v43);
      CFStringRef Copy = CFStringCreateCopy(v51, v52);
    }
    *(void *)(a1 + 136) = Copy;
    if (v44 == 3)
    {
      *(unsigned char *)(a1 + 129) = ((*(uint64_t (**)(uint64_t))(*(void *)v43 + 104))(v43) & 0x18) != 0;
      *(unsigned char *)(a1 + 130) = ((*(uint64_t (**)(uint64_t))(*(void *)v43 + 104))(v43) & 0x400) != 0;
      *(void *)(a1 + 120) = CFStringGetLength(*(CFStringRef *)(a1 + 136));
    }
  }
  if (*(unsigned char *)(a1 + 130)) {
    *(_WORD *)(a1 + 131) = 257;
  }
  if (*(uint64_t *)(a1 + 120) > 0) {
    goto LABEL_79;
  }
  CFArrayRef v60 = *(const __CFArray **)(*(void *)(a1 + 8) + 16);
  if (!v60) {
    goto LABEL_79;
  }
  CFIndex v61 = CFArrayGetCount(v60);
  if (!v61) {
    goto LABEL_79;
  }
  CFIndex v62 = v61;
  uint64_t v63 = sub_216308080(a1);
  if (!v63) {
    goto LABEL_93;
  }
  uint64_t v64 = v63;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 72))(v63) == 5) {
    goto LABEL_79;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v64 + 72))(v64) != 2)
  {
LABEL_93:
    int v65 = *(_DWORD *)(a1 + 108);
    if (v62 == 1 && (v65 & 4) == 0) {
      goto LABEL_95;
    }
    uint64_t v88 = (v62 - 2) & ~((v62 - 2) >> 63);
    if (v62 - 1 >= v88)
    {
      while (1)
      {
        __int16 v89 = (void *)sub_21628F0D0(*(void *)(a1 + 8), --v62);
        if (v89)
        {
          v92 = v89;
          if (objc_msgSend_rawCandidate(v89, v90, v91))
          {
            uint64_t v95 = [v92 v93:v94];
            CFStringRef v96 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v95 + 24))(v95);
            if (sub_2161E2ED0(v96) > 1) {
              break;
            }
          }
        }
        if (v62 <= v88) {
          goto LABEL_79;
        }
      }
      if ((v65 & 4) == 0) {
        goto LABEL_95;
      }
    }
LABEL_79:
    CFStringRef v53 = *(const __CFString **)(a1 + 144);
    if (v53)
    {
      CFStringRef v54 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v53);
      *(void *)(a1 + 152) = v54;
      if (v54 && CFStringGetLength(v54))
      {
        CFIndex v55 = CFStringGetLength(*(CFStringRef *)(a1 + 152));
        CFStringRef v56 = *(const __CFString **)(a1 + 152);
        if (v56 && (uint64_t v57 = *(void *)(a1 + 120), v57 >= 1))
        {
          if (*(unsigned char *)(a1 + 129) || *(void *)(a1 + 136) && (*(unsigned char *)(a1 + 108) & 8) != 0) {
            *(unsigned char *)(a1 + 132) = 1;
          }
          unint64_t v58 = *(void *)(a1 + 176);
          unsigned __int8 v59 = *(uint64_t **)(a1 + 168);
          if ((unint64_t)v59 >= v58)
          {
            uint64_t v82 = *(uint64_t **)(a1 + 160);
            uint64_t v83 = v59 - v82;
            if ((unint64_t)(v83 + 1) >> 61) {
              sub_21610CB04();
            }
            unint64_t v84 = v58 - (void)v82;
            unint64_t v85 = (uint64_t)(v58 - (void)v82) >> 2;
            if (v85 <= v83 + 1) {
              unint64_t v85 = v83 + 1;
            }
            if (v84 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v86 = v85;
            }
            if (v86)
            {
              __int16 v87 = (char *)sub_2160FFAA8(a1 + 176, v86);
              uint64_t v82 = *(uint64_t **)(a1 + 160);
              unsigned __int8 v59 = *(uint64_t **)(a1 + 168);
            }
            else
            {
              __int16 v87 = 0;
            }
            __int16 v105 = (uint64_t *)&v87[8 * v83];
            __int16 v106 = &v87[8 * v86];
            *__int16 v105 = v57;
            __int16 v81 = v105 + 1;
            while (v59 != v82)
            {
              uint64_t v107 = *--v59;
              *--__int16 v105 = v107;
            }
            *(void *)(a1 + 160) = v105;
            *(void *)(a1 + 168) = v81;
            *(void *)(a1 + 176) = v106;
            if (v82) {
              operator delete(v82);
            }
          }
          else
          {
            uint64_t *v59 = v57;
            __int16 v81 = v59 + 1;
          }
          *(void *)(a1 + 168) = v81;
        }
        else
        {
          if ((*(unsigned char *)(a1 + 108) & 2) == 0)
          {
            p_isa = 0;
            sub_2161E1FB8(v56);
          }
          if (v55 > 0)
          {
            char v68 = (void **)(a1 + 160);
            for (uint64_t i = v55;
                  i > 0;
                  i -= CFStringGetRangeOfComposedCharactersAtIndex((CFStringRef)*(void *)(a1 + 152), v55 - i).length)
            {
              uint64_t v71 = *(uint64_t **)(a1 + 168);
              unint64_t v70 = *(void *)(a1 + 176);
              if ((unint64_t)v71 >= v70)
              {
                char v73 = (uint64_t *)*v68;
                uint64_t v74 = ((char *)v71 - (unsigned char *)*v68) >> 3;
                unint64_t v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 61) {
                  sub_21610CB04();
                }
                uint64_t v76 = v70 - (void)v73;
                if (v76 >> 2 > v75) {
                  unint64_t v75 = v76 >> 2;
                }
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v77 = v75;
                }
                if (v77)
                {
                  v78 = (char *)sub_2160FFAA8(a1 + 176, v77);
                  char v73 = *(uint64_t **)(a1 + 160);
                  uint64_t v71 = *(uint64_t **)(a1 + 168);
                }
                else
                {
                  v78 = 0;
                }
                __int16 v79 = (uint64_t *)&v78[8 * v74];
                *__int16 v79 = i;
                v72 = v79 + 1;
                while (v71 != v73)
                {
                  uint64_t v80 = *--v71;
                  *--__int16 v79 = v80;
                }
                *(void *)(a1 + 160) = v79;
                *(void *)(a1 + 168) = v72;
                *(void *)(a1 + 176) = &v78[8 * v77];
                if (v73) {
                  operator delete(v73);
                }
              }
              else
              {
                uint64_t *v71 = i;
                v72 = v71 + 1;
              }
              *(void *)(a1 + 168) = v72;
            }
          }
        }
      }
    }
    else
    {
      *(void *)(a1 + 152) = 0;
    }
    return;
  }
LABEL_95:
  uint64_t v66 = *(void *)(a1 + 8);
  if (*(void *)(v66 + 16))
  {
    CFIndex v67 = CFArrayGetCount(*(CFArrayRef *)(v66 + 16));
    uint64_t v66 = *(void *)(a1 + 8);
  }
  else
  {
    CFIndex v67 = 0;
  }
  __int16 v97 = (void *)sub_21628F0D0(v66, v67 - 1);
  if (MecabraCandidateIsEmojiCandidate(v97, v98, v99)
    || (uint64_t v102 = objc_msgSend_rawCandidate(v97, v100, v101),
        (*(unsigned int (**)(uint64_t))(*(void *)v102 + 72))(v102) == 6)
    || (*(unsigned int (**)(uint64_t))(*(void *)v102 + 72))(v102) == 7)
  {
    *(unsigned char *)(a1 + 131) = 1;
  }
  else
  {
    uint64_t v170 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 8) + 32) + 32);
    v108 = (const void *)[v97 v103:v104];
    CFStringRef v109 = sub_2163080F8(a1, v108);
    CFStringRef v110 = v109;
    if (!v109)
    {
      CFAllocatorRef v111 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v112 = (const __CFString *)(*(uint64_t (**)(const void *))(*(void *)v108 + 24))(v108);
      CFStringRef v109 = CFStringCreateCopy(v111, v112);
    }
    *(void *)(a1 + 152) = v109;
    *(unsigned char *)(a1 + 133) = v110 != 0;
    CFIndex v113 = CFStringGetLength(v109);
    uint64_t v114 = (*(uint64_t (**)(const void *))(*(void *)v108 + 48))(v108);
    __int16 v115 = *(int **)(a1 + 24);
    uint64_t v177 = *(void *)(*((void *)v115 + 9) + 8);
    unsigned int v175 = *v115;
    uint64_t v116 = (*(uint64_t (**)(const void *))(*(void *)v108 + 32))(v108);
    if (v114)
    {
      uint64_t v117 = v116;
      uint64_t v118 = 0;
      v172 = (void **)(a1 + 160);
      v171 = (void **)(a1 + 184);
      while (1)
      {
        uint64_t v119 = (*(uint64_t (**)(const void *, uint64_t))(*(void *)v108 + 120))(v108, v118);
        if (!v119) {
          break;
        }
        unsigned int v120 = (unsigned int *)v119;
        uint64_t v121 = (*(uint64_t (**)(uint64_t))(*(void *)v119 + 24))(v119);
        if (v121 < 0 || v121 + v122 > v113) {
          break;
        }
        unint64_t v123 = v113 - (*(uint64_t (**)(unsigned int *))(*(void *)v120 + 24))(v120);
        if (v123 <= 0xE)
        {
          p_isa = 0;
          uint64_t v179 = (uint64_t)&p_isa;
          uint64_t v180 = 0x2000000000;
          v181 = 0;
          CFStringRef p_p_isa = (const __CFString *)MEMORY[0x263EF8330];
          p_CFStringRef p_p_isa = 0x40000000;
          uint64_t v191 = (uint64_t)sub_2162086D4;
          v192 = &unk_264266D58;
          v193 = &p_isa;
          uint64_t v194 = a1;
          sub_2162D47DC(v120, v177, v175, v117, 0, 0, (uint64_t)&p_p_isa);
          __int16 v125 = *(unint64_t **)(a1 + 168);
          unint64_t v124 = *(void *)(a1 + 176);
          if ((unint64_t)v125 >= v124)
          {
            __int16 v127 = (unint64_t *)*v172;
            uint64_t v128 = ((char *)v125 - (unsigned char *)*v172) >> 3;
            unint64_t v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61) {
              goto LABEL_229;
            }
            uint64_t v130 = v124 - (void)v127;
            if (v130 >> 2 > v129) {
              unint64_t v129 = v130 >> 2;
            }
            if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v131 = v129;
            }
            if (v131)
            {
              uint64_t v132 = (char *)sub_2160FFAA8(a1 + 176, v131);
              __int16 v127 = *(unint64_t **)(a1 + 160);
              __int16 v125 = *(unint64_t **)(a1 + 168);
            }
            else
            {
              uint64_t v132 = 0;
            }
            v133 = (unint64_t *)&v132[8 * v128];
            unint64_t *v133 = v123;
            v126 = v133 + 1;
            while (v125 != v127)
            {
              unint64_t v134 = *--v125;
              *--v133 = v134;
            }
            *(void *)(a1 + 160) = v133;
            *(void *)(a1 + 168) = v126;
            *(void *)(a1 + 176) = &v132[8 * v131];
            if (v127) {
              operator delete(v127);
            }
          }
          else
          {
            *__int16 v125 = v123;
            v126 = v125 + 1;
          }
          *(void *)(a1 + 168) = v126;
          uint64_t v135 = v179;
          v137 = *(char **)(a1 + 192);
          unint64_t v136 = *(void *)(a1 + 200);
          if ((unint64_t)v137 >= v136)
          {
            v139 = (char *)*v171;
            uint64_t v140 = (v137 - (unsigned char *)*v171) >> 3;
            unint64_t v141 = v140 + 1;
            if ((unint64_t)(v140 + 1) >> 61) {
LABEL_229:
            }
              sub_21610CB04();
            uint64_t v142 = v136 - (void)v139;
            if (v142 >> 2 > v141) {
              unint64_t v141 = v142 >> 2;
            }
            if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v143 = v141;
            }
            if (v143)
            {
              v144 = (char *)sub_2160FFAA8(a1 + 200, v143);
              v139 = *(char **)(a1 + 184);
              v137 = *(char **)(a1 + 192);
            }
            else
            {
              v144 = 0;
            }
            v145 = &v144[8 * v140];
            *(void *)v145 = *(void *)(v135 + 24);
            v138 = v145 + 8;
            while (v137 != v139)
            {
              uint64_t v146 = *((void *)v137 - 1);
              v137 -= 8;
              *((void *)v145 - 1) = v146;
              v145 -= 8;
            }
            *(void *)(a1 + 184) = v145;
            *(void *)(a1 + 192) = v138;
            *(void *)(a1 + 200) = &v144[8 * v143];
            if (v139) {
              operator delete(v139);
            }
          }
          else
          {
            *(void *)v137 = *(void *)(v179 + 24);
            v138 = v137 + 8;
          }
          *(void *)(a1 + 192) = v138;
          _Block_object_dispose(&p_isa, 8);
        }
        if (++v118 == v114) {
          goto LABEL_199;
        }
      }
      CFRelease(*(CFTypeRef *)(a1 + 152));
      *(void *)(a1 + 152) = 0;
      *(unsigned char *)(a1 + 131) = 1;
    }
LABEL_199:
    if (*(void *)(a1 + 152)) {
      BOOL v147 = (unint64_t)v113 > 0xE;
    }
    else {
      BOOL v147 = 1;
    }
    if (!v147)
    {
      uint64_t v185 = 0;
      v186 = &v185;
      uint64_t v187 = 0x2000000000;
      uint64_t v188 = 0;
      unint64_t v148 = v170 - 1;
      if (v170 != 1)
      {
        CFIndex v149 = v67 - v148;
        if ((v149 & 0x8000000000000000) == 0)
        {
          uint64_t v150 = 1;
          do
          {
            v151 = (void *)sub_21628F0D0(*(void *)(a1 + 8), v149);
            uint64_t v154 = [v151 v152:v153];
            if ((*(unsigned int (**)(uint64_t))(*(void *)v154 + 72))(v154) == 3
              || (*(unsigned int (**)(uint64_t))(*(void *)v154 + 72))(v154) == 6
              || (*(unsigned int (**)(uint64_t))(*(void *)v154 + 72))(v154) == 7)
            {
              break;
            }
            CFStringRef v155 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v154 + 32))(v154);
            CFIndex v156 = CFStringGetLength(v155);
            uint64_t v157 = (*(uint64_t (**)(uint64_t))(*(void *)v154 + 32))(v154);
            for (uint64_t j = (*(uint64_t (**)(uint64_t))(*(void *)v154 + 48))(v154) - 1; ; --j)
            {
              if (j < 0 || v186[3] >= v148)
              {
                uint64_t v163 = v150;
                goto LABEL_218;
              }
              uint64_t v159 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v154 + 120))(v154, j);
              v160 = (unsigned int *)v159;
              if (!v159) {
                break;
              }
              uint64_t v161 = (*(uint64_t (**)(uint64_t))(*(void *)v159 + 24))(v159);
              uint64_t v163 = 0;
              if (v161 < 0 || v161 + v162 > v156) {
                goto LABEL_218;
              }
              p_isa = (void *)MEMORY[0x263EF8330];
              uint64_t v179 = 0x40000000;
              uint64_t v180 = (uint64_t)sub_2162087D0;
              v181 = &unk_26426BA18;
              v182 = (const __CFString **)&v185;
              uint64_t v183 = a1;
              uint64_t v184 = v170 - 1;
              sub_2162D47DC(v160, v177, v175, v157, 0, 1, (uint64_t)&p_isa);
            }
            uint64_t v163 = 0;
LABEL_218:
            BOOL v147 = v149-- < 1;
            if (v147) {
              break;
            }
            if (v186[3] >= v148) {
              break;
            }
            uint64_t v150 = v163;
          }
          while ((v163 & 1) != 0);
        }
      }
      _Block_object_dispose(&v185, 8);
    }
    uint64_t v164 = *(void *)(a1 + 184);
    uint64_t v165 = *(void *)(a1 + 192) - v164;
    if (v165 >= 9)
    {
      unint64_t v166 = (unint64_t)v165 >> 3;
      uint64_t v167 = *(void *)((v165 & 0xFFFFFFFFFFFFFFF8) + v164 - 8);
      uint64_t v168 = v164 - 16;
      do
      {
        v167 += *(void *)(v168 + 8 * v166);
        *(void *)(v168 + 8 * v166) = v167;
        uint64_t v169 = v166 - 2;
        --v166;
      }
      while (v169 > 0);
    }
  }
}

void sub_2162085BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2161B5B5C((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2162086D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void **)(a1 + 40);
  CFStringRef v7 = (char *)v6[27];
  unint64_t v8 = v6[28];
  if ((unint64_t)v7 >= v8)
  {
    unsigned int v10 = (char *)v6[26];
    uint64_t v11 = (v7 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62) {
      sub_21610CB04();
    }
    unint64_t v12 = v8 - (void)v10;
    unint64_t v13 = (uint64_t)(v8 - (void)v10) >> 1;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      unint64_t v15 = (char *)sub_2161129B4((uint64_t)(v6 + 28), v14);
      unsigned int v10 = (char *)v6[26];
      CFStringRef v7 = (char *)v6[27];
    }
    else
    {
      unint64_t v15 = 0;
    }
    UniChar v16 = &v15[4 * v11];
    CFAllocatorRef v17 = &v15[4 * v14];
    *(_DWORD *)UniChar v16 = a4;
    uint64_t v9 = v16 + 4;
    while (v7 != v10)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    v6[26] = v16;
    v6[27] = v9;
    v6[28] = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)CFStringRef v7 = a4;
    uint64_t v9 = v7 + 4;
  }
  v6[27] = v9;
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void sub_2162087D0(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned char *a5)
{
  int v46 = a4;
  uint64_t v7 = a1[5];
  sub_21617AAB8(v7 + 208, *(char **)(v7 + 208), (char *)&v46);
  unint64_t v8 = *(char **)(v7 + 192);
  unint64_t v9 = *(void *)(v7 + 200);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = *(char **)(v7 + 184);
    uint64_t v12 = (v8 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      sub_21610CB04();
    }
    unint64_t v13 = v9 - (void)v11;
    unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 2;
    if (v14 <= v12 + 1) {
      unint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      UniChar v16 = (char *)sub_2160FFAA8(v7 + 200, v15);
      uint64_t v11 = *(char **)(v7 + 184);
      unint64_t v8 = *(char **)(v7 + 192);
    }
    else
    {
      UniChar v16 = 0;
    }
    CFAllocatorRef v17 = &v16[8 * v12];
    int v18 = &v16[8 * v15];
    *(void *)CFAllocatorRef v17 = 1;
    unsigned int v10 = v17 + 8;
    while (v8 != v11)
    {
      uint64_t v19 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v17 - 1) = v19;
      v17 -= 8;
    }
    *(void *)(v7 + 184) = v17;
    *(void *)(v7 + 192) = v10;
    *(void *)(v7 + 200) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(void *)unint64_t v8 = 1;
    unsigned int v10 = v8 + 8;
  }
  CFIndex v21 = (char **)(v7 + 160);
  CFStringRef v20 = *(char **)(v7 + 160);
  *(void *)(v7 + 192) = v10;
  CFIndex v22 = *(char **)(v7 + 168);
  unint64_t v23 = *(void *)(v7 + 176);
  if ((unint64_t)v22 < v23)
  {
    if (v20 == v22)
    {
      *(void *)CFStringRef v20 = 0;
      *(void *)(v7 + 168) = v20 + 8;
    }
    else
    {
      int v24 = v20 + 8;
      int v25 = v22 - 8;
      unint64_t v26 = *(void **)(v7 + 168);
      while (v25 < v22)
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *v26++ = v27;
      }
      *(void *)(v7 + 168) = v26;
      if (v22 != v24) {
        memmove(&v22[-8 * ((v22 - v24) >> 3)], v20, v22 - v24);
      }
      *(void *)CFStringRef v20 = 0;
    }
    goto LABEL_46;
  }
  unint64_t v28 = ((v22 - v20) >> 3) + 1;
  if (v28 >> 61) {
    sub_21610CB04();
  }
  uint64_t v29 = v23 - (void)v20;
  if (v29 >> 2 > v28) {
    unint64_t v28 = v29 >> 2;
  }
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v30 = v28;
  }
  if (!v30)
  {
    unint64_t v33 = 0;
    goto LABEL_36;
  }
  unint64_t v31 = (char *)sub_2160FFAA8(v7 + 176, v30);
  unint64_t v33 = v31;
  if (!v32)
  {
LABEL_36:
    uint64_t v35 = (char *)sub_2160FFAA8(v7 + 176, 1uLL);
    uint64_t v34 = &v35[8 * v36];
    if (v33) {
      operator delete(v33);
    }
    unint64_t v33 = v35;
    goto LABEL_39;
  }
  uint64_t v34 = &v31[8 * v32];
LABEL_39:
  *(void *)unint64_t v33 = 0;
  id v37 = v33 + 8;
  uint64_t v38 = *v21;
  if (*v21 != v20)
  {
    uint64_t v39 = v20;
    do
    {
      uint64_t v40 = *((void *)v39 - 1);
      v39 -= 8;
      *((void *)v33 - 1) = v40;
      v33 -= 8;
    }
    while (v39 != v38);
  }
  CFStringRef v41 = *(char **)(v7 + 168);
  int64_t v42 = v41 - v20;
  if (v41 != v20) {
    memmove(v37, v20, v41 - v20);
  }
  uint64_t v43 = *(void **)(v7 + 160);
  *(void *)(v7 + 160) = v33;
  *(void *)(v7 + 168) = &v37[v42];
  *(void *)(v7 + 176) = v34;
  if (v43) {
    operator delete(v43);
  }
LABEL_46:
  uint64_t v44 = *(void *)(a1[4] + 8);
  unint64_t v45 = *(void *)(v44 + 24) + 1;
  *(void *)(v44 + 24) = v45;
  if (v45 >= a1[6]) {
    *a5 = 1;
  }
}

void sub_216208A68(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216208A80(uint64_t a1)
{
  CFStringRef v1 = *(const __CFString **)(a1 + 152);
  return !v1 || CFStringGetLength(v1) == 0;
}

BOOL sub_216208AB8(void *a1)
{
  return a1[5] > (unint64_t)((uint64_t)(a1[7] - a1[6]) >> 2);
}

uint64_t sub_216208AD0()
{
  return 0;
}

void sub_216208AD8(uint64_t a1, CFRange range, unsigned char *a3)
{
  CFStringRef v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFStringRef *)(a1 + 40), range);
  if (CFStringGetLength(v5) > 1
    || (CFCharacterSetRef v6 = (const __CFCharacterSet *)qword_26797DA28,
        v8.length = CFStringGetLength(v5),
        v8.location = 0,
        !CFStringFindCharacterFromSet(v5, v6, v8, 0, 0))
    || CFStringGetLength(v5) == 1
    && (UTF32Char CharacterAtIndex = CFStringGetCharacterAtIndex(v5, 0), sub_2161A1DB8(CharacterAtIndex)))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  *a3 = 1;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_216208BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216208BCC()
{
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  MutableCFStringRef Copy = CFCharacterSetCreateMutableCopy(0, Predefined);
  CFCharacterSetRef v2 = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  CFCharacterSetUnion(MutableCopy, v2);
  CFCharacterSetRef v3 = CFCharacterSetGetPredefined(kCFCharacterSetSymbol);
  CFCharacterSetUnion(MutableCopy, v3);
  qword_26797DA28 = (uint64_t)MutableCopy;
}

_DWORD *sub_216208C30(_DWORD *result, unsigned __int16 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  *uint64_t result = 0;
  if ((a3 & 1) == 0)
  {
    if (a3 < 2)
    {
      uint64_t v6 = 0;
LABEL_9:
      *a6 = v6;
      sub_216205EAC(a4, v6, result);
    }
    unint64_t v7 = a3 >> 1;
    CFRange v8 = (_WORD *)a4;
    while (1)
    {
      int v10 = *a2++;
      __int16 v9 = v10;
      if (v10 != 42) {
        *v8++ = v9;
      }
      uint64_t v6 = ((uint64_t)v8 - a4) >> 1;
      if (v6 >= a5) {
        break;
      }
      if (!--v7) {
        goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t sub_216208C98(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 1) == 0) {
    sub_216205EAC(a5, a6 >> 1, a4);
  }
  return 0;
}

uint64_t sub_216208D94(int a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DA30, memory_order_acquire) & 1) == 0)
  {
    int v4 = a1;
    int v5 = __cxa_guard_acquire(&qword_26797DA30);
    a1 = v4;
    if (v5)
    {
      v6[0] = xmmword_21637B920;
      v6[1] = xmmword_21637B930;
      void v6[2] = xmmword_21637B940;
      v6[3] = xmmword_21637B950;
      v6[4] = xmmword_21637B960;
      v6[5] = xmmword_21637B970;
      v6[6] = xmmword_21637B980;
      sub_216208F0C((char *)v6, 0x1CuLL);
      __cxa_atexit((void (*)(void *))sub_216208FBC, &qword_26797DA38, &dword_2160F5000);
      __cxa_guard_release(&qword_26797DA30);
      a1 = v4;
    }
  }
  CFStringRef v1 = (unsigned __int16 *)qword_26797DA38;
  if (qword_26797DA38 != qword_26797DA40)
  {
    while (*v1 != a1 && v1[1] != a1)
    {
      v1 += 2;
      if (v1 == (unsigned __int16 *)qword_26797DA40) {
        return 0;
      }
    }
  }
  if (v1 == (unsigned __int16 *)qword_26797DA40) {
    return 0;
  }
  if (*v1 == a1) {
    ++v1;
  }
  return *v1;
}

void sub_216208EF4(_Unwind_Exception *a1)
{
}

char *sub_216208F0C(char *result, unint64_t a2)
{
  qword_26797DA38 = 0;
  qword_26797DA40 = 0;
  qword_26797DA48 = 0;
  if (a2)
  {
    if (a2 >> 62) {
      sub_21610CB04();
    }
    CFCharacterSetRef v3 = result;
    uint64_t v4 = 4 * a2;
    uint64_t result = (char *)operator new(4 * a2);
    uint64_t v5 = 0;
    qword_26797DA38 = (uint64_t)result;
    qword_26797DA40 = (uint64_t)result;
    qword_26797DA48 = (uint64_t)&result[4 * a2];
    do
    {
      *(_DWORD *)&result[v5] = *(_DWORD *)&v3[v5];
      v5 += 4;
    }
    while (v4 != v5);
    qword_26797DA40 = (uint64_t)&result[v5];
  }
  return result;
}

void sub_216208F98(_Unwind_Exception *exception_object)
{
  if (qword_26797DA38)
  {
    qword_26797DA40 = qword_26797DA38;
    operator delete((void *)qword_26797DA38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216208FBC(uint64_t a1)
{
  CFCharacterSetRef v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216208FF0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  __p = 0;
  CFStringRef v41 = 0;
  int64_t v42 = 0;
  memset(v39, 0, sizeof(v39));
  if (*(_DWORD *)a3 == 1)
  {
    CFRange v8 = *(_WORD **)(a3 + 72);
    uint64_t v9 = *(void *)(a3 + 80);
    int v10 = *(_WORD **)(a3 + 56);
    uint64_t v11 = *(void *)(a3 + 64);
    sub_21620B0C4(*(long long **)(a3 + 16), *(long long **)(a3 + 24), &v43);
    sub_2161BF794(v8, &v8[v9], (uint64_t)&__p);
    sub_2161BF794(v10, &v10[v11], (uint64_t)v39);
    unint64_t v13 = __p;
    uint64_t v12 = v41;
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v14 = v12 - v13;
  sub_216185B34(&__p, a5 + ((v12 - v13) >> 1));
  if (a5)
  {
    unint64_t v15 = &a4[a5];
    do
    {
      int v16 = *a4;
      if (v16 != 32)
      {
        CFAllocatorRef v17 = v41;
        if (v41 >= v42)
        {
          uint64_t v19 = (char *)__p;
          uint64_t v20 = v41 - (unsigned char *)__p;
          if (v41 - (unsigned char *)__p <= -3) {
            sub_21610CB04();
          }
          uint64_t v21 = v20 >> 1;
          if (v42 - (unsigned char *)__p <= (unint64_t)((v20 >> 1) + 1)) {
            uint64_t v22 = v21 + 1;
          }
          else {
            uint64_t v22 = v42 - (unsigned char *)__p;
          }
          if ((unint64_t)(v42 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v23 = v22;
          }
          if (v23)
          {
            int v24 = (char *)sub_21610FD44((uint64_t)&v42, v23);
            uint64_t v19 = (char *)__p;
            CFAllocatorRef v17 = v41;
          }
          else
          {
            int v24 = 0;
          }
          int v25 = &v24[2 * v21];
          *(_WORD *)int v25 = v16;
          int v18 = v25 + 2;
          while (v17 != v19)
          {
            __int16 v26 = *((_WORD *)v17 - 1);
            v17 -= 2;
            *((_WORD *)v25 - 1) = v26;
            v25 -= 2;
          }
          __p = v25;
          CFStringRef v41 = v18;
          int64_t v42 = &v24[2 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_WORD *)CFStringRef v41 = v16;
          int v18 = v17 + 2;
        }
        CFStringRef v41 = v18;
      }
      ++a4;
    }
    while (a4 != v15);
  }
  uint64_t v27 = v14 >> 1;
  if (__p) {
    CFIndex v28 = ((v41 - (unsigned char *)__p) >> 1) - v27;
  }
  else {
    CFIndex v28 = 0;
  }
  sub_2162924A0(*(void *)(a2 + 16), (const UniChar *)__p + v27, v28, (const UniChar ***)&v46);
  unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - (uint64_t)v43) >> 3);
  sub_2162096FC((uint64_t)&v43, v29 + ((v47 - (unsigned char *)v46) >> 4));
  unint64_t v30 = v47;
  if (v47 != v46)
  {
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 40 * v29;
    unint64_t v30 = (char *)v46;
    do
    {
      uint64_t v34 = (char *)v43;
      uint64_t v35 = (char *)v43 + v33;
      *((void *)v35 + 4) = 0;
      *(_OWORD *)uint64_t v35 = 0u;
      *((_OWORD *)v35 + 1) = 0u;
      v35[38] = 2;
      unint64_t v36 = *(void *)&v30[v31 + 8];
      *((_WORD *)v35 + 12) = v36;
      v35[37] = 1;
      *(_DWORD *)uint64_t v35 = 0;
      sub_216292B40(*(void *)(a2 + 16), *(void **)&v30[v31], v36, (uint64_t)buf);
      if ((v50 & 0x80u) == 0) {
        id v37 = buf;
      }
      else {
        id v37 = *(uint8_t **)buf;
      }
      if ((v50 & 0x80u) == 0) {
        uint64_t v38 = v50;
      }
      else {
        uint64_t v38 = v49;
      }
      sub_2161BF794(v37, &v37[2 * v38], (uint64_t)v39);
      *(_WORD *)&v34[v33 + 28] = v38;
      if ((char)v50 < 0) {
        operator delete(*(void **)buf);
      }
      ++v32;
      unint64_t v30 = (char *)v46;
      v33 += 40;
      v31 += 16;
    }
    while (v32 < (v47 - (unsigned char *)v46) >> 4);
  }
  if (v30)
  {
    CFStringRef v47 = v30;
    operator delete(v30);
  }
  operator new();
}

void sub_216209618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void sub_2162096FC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_21620B264((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 40 * a2;
  }
}

void sub_216209738(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v41[4] = *MEMORY[0x263EF8340];
  *(void *)a3 = &unk_26C6BE968;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 48) = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4) & 1) != 0)
  {
    uint64_t v6 = a2[1];
    if (a2[2] == v6)
    {
LABEL_17:
      (*(void (**)(void, void *))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a2);
      (*(void (**)(void))(**(void **)(a1 + 40) + 88))(*(void *)(a1 + 40));
      uint64_t v18 = *(void *)(a1 + 48);
      long long v30 = xmmword_216370310;
      *(void *)&long long v31 = 10;
      DWORD2(v31) = 1077936128;
      v41[0] = &unk_26C6C8858;
      v41[3] = v41;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 16))(&v39);
      sub_21618B8E8(v41);
      BYTE8(v30) = 0;
      *(void *)&long long v30 = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      uint64_t v38 = 0;
      uint64_t v19 = v39;
      for (uint64_t i = v40; v19 != i; v19 += 32)
      {
        if (*(void *)(a1 + 56))
        {
          if (*(char *)(v19 + 23) < 0)
          {
            uint64_t v22 = *(unsigned char **)v19;
            size_t v21 = *(void *)(v19 + 8);
          }
          else
          {
            size_t v21 = *(unsigned __int8 *)(v19 + 23);
            uint64_t v22 = (unsigned char *)v19;
          }
          if (sub_216209CE0(a1, v22, v21)) {
            continue;
          }
        }
        if (*(char *)(v19 + 23) < 0)
        {
          int v24 = *(char **)v19;
          uint64_t v23 = *(void *)(v19 + 8);
        }
        else
        {
          uint64_t v23 = *(unsigned __int8 *)(v19 + 23);
          int v24 = (char *)v19;
        }
        sub_2161BC294(v24, v23, (uint64_t)__p);
        if ((v29 & 0x80u) == 0) {
          int v25 = (unsigned __int16 *)__p;
        }
        else {
          int v25 = (unsigned __int16 *)__p[0];
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v26 = v29;
        }
        else {
          uint64_t v26 = (uint64_t)__p[1];
        }
        sub_216208FF0((uint64_t)&v27, a1, (uint64_t)&v30, v25, v26);
      }
      *(void *)&long long v30 = &v39;
      sub_216175BF4((void ***)&v30);
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        unint64_t v9 = *(void *)(a2[10] + 8 * v8);
        uint64_t v10 = a2[4];
        if (v9 >= (a2[5] - v10) >> 1)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v11 = v10 + 2 * v9;
          uint64_t v12 = v10 ? *(unsigned __int16 *)(v6 + v7 + 24) : 0;
        }
        unint64_t v13 = *(void *)(a2[13] + 8 * v8);
        uint64_t v14 = a2[7];
        if (v13 >= (a2[8] - v14) >> 1)
        {
          uint64_t v15 = 0;
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v15 = v14 + 2 * v13;
          uint64_t v16 = *(unsigned __int16 *)(v6 + v7 + 28);
          uint64_t v17 = v14 ? v16 : 0;
        }
        if (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v15, v17, v11, v12) & 4) == 0)break; {
        ++v8;
        }
        uint64_t v6 = a2[1];
        v7 += 40;
        if (v8 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v6) >> 3)) {
          goto LABEL_17;
        }
      }
    }
  }
}

void sub_216209C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_21618B8E8((void *)(v36 - 128));
  sub_21618A144(v35);
  _Unwind_Resume(a1);
}

BOOL sub_216209CE0(uint64_t a1, unsigned char *__s2, size_t a3)
{
  if (a3)
  {
    if (__s2[a3 - 1] == 32) {
      size_t v4 = a3 - 1;
    }
    else {
      size_t v4 = a3;
    }
  }
  else
  {
    size_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int ***)(a1 + 56);
  uint64_t v6 = **v5;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = **v5;
    while (1)
    {
      uint64_t v9 = v7 + (v8 >> 1);
      uint64_t v10 = v5[1];
      uint64_t v11 = (uint64_t)(*v5 + 1);
      unint64_t v12 = *(unsigned int *)(v11 + 8 * v9);
      BOOL v13 = (unint64_t)v10 >= v12;
      size_t v14 = (size_t)v10 - v12;
      if (!v13) {
        break;
      }
      size_t v15 = *(unsigned int *)(v11 + ((8 * v9) | 4));
      if (v14 >= v15) {
        size_t v16 = v15;
      }
      else {
        size_t v16 = v14;
      }
      int v17 = (char)sub_21617905C((char *)*v5 + v12, v16, __s2, v4);
      if (v17 >= 0) {
        v8 >>= 1;
      }
      else {
        v8 += ~(v8 >> 1);
      }
      if (v17 < 0) {
        uint64_t v7 = v9 + 1;
      }
      if (!v8) {
        goto LABEL_21;
      }
    }
LABEL_29:
    sub_21613F340("string_view::substr");
  }
  uint64_t v7 = 0;
LABEL_21:
  if (v7 == v6) {
    return 0;
  }
  uint64_t v19 = v5[1];
  uint64_t v20 = (uint64_t)(*v5 + 1);
  unint64_t v21 = *(unsigned int *)(v20 + 8 * v7);
  BOOL v13 = (unint64_t)v19 >= v21;
  size_t v22 = (size_t)v19 - v21;
  if (!v13) {
    goto LABEL_29;
  }
  size_t v23 = *(unsigned int *)(v20 + ((8 * v7) | 4));
  if (v22 >= v23) {
    size_t v24 = v23;
  }
  else {
    size_t v24 = v22;
  }
  return (sub_21617905C(__s2, v4, (char *)*v5 + v21, v24) & 0x80u) == 0;
}

uint64_t sub_216209E20(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  unint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  BOOL v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 24) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_216209E74(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v119[0] = *MEMORY[0x263EF8340];
  *(void *)a6 = &unk_26C6BE968;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_DWORD *)(a6 + 40) = 1065353216;
  *(void *)(a6 + 56) = 0;
  *(void *)(a6 + 64) = 0;
  *(void *)(a6 + 48) = 0;
  uint64_t v7 = a1[5];
  if (v7)
  {
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7) ^ 1;
    if (!a3) {
      LOBYTE(v12) = 1;
    }
    if ((v12 & 1) == 0
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 408))(a3) != 1
      && (*(unsigned char *)sub_2161A2A80() || (*(unsigned char *)(a1[1] + 3) & 2) != 0))
    {
      if ((uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3)) == 0
        || (uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 560))(a3, v13 - 1),
            sub_2161C04AC(0),
            *(unsigned char *)(v14 + 38) == 1)
        || ((unsigned int v15 = *(unsigned __int16 *)(v14 + 30), WORD2(qword_26797EF80) <= v15)
          ? (BOOL v16 = HIWORD(qword_26797EF80) >= v15)
          : (BOOL v16 = 0),
            !v16))
      {
        (*(void (**)(void, uint64_t))(*(void *)a1[5] + 32))(a1[5], a2);
        v103[0] = 1;
        v103[1] = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
        char v104 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 200))(a3);
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 304))(a3);
        __int16 v105 = 0;
        __int16 v106 = 0;
        uint64_t v107 = 0;
        sub_21618B3D8(&v105, *(const void **)v17, *(void *)(v17 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 3));
        uint64_t v18 = *(void *)(a3 + 64);
        int v19 = *(char *)(a3 + 87);
        BOOL v20 = v19 < 0;
        if (v19 >= 0) {
          uint64_t v18 = a3 + 64;
        }
        uint64_t v21 = *(unsigned __int8 *)(a3 + 87);
        if (v20) {
          uint64_t v21 = *(void *)(a3 + 72);
        }
        uint64_t v108 = v18;
        uint64_t v109 = v21;
        uint64_t v110 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 552))(a3);
        uint64_t v111 = v22;
        uint64_t v112 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 544))(a3);
        uint64_t v113 = v23;
        memset(__p, 0, sizeof(__p));
        (*(void (**)(void **__return_ptr))(*(void *)a1[5] + 16))(v99);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        __p[0] = v99[0];
        *(_OWORD *)&__p[1] = *(_OWORD *)&v99[1];
        size_t v24 = v105;
        int v25 = v106;
        if (v105 != v106 && v99[0] != v99[1] && *((_DWORD *)v99[1] - 1))
        {
          uint64_t v94 = a1[5];
          uint64_t v26 = (char *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v94 + 8) + 8) + 512))(*(void *)(*(void *)(v94 + 8) + 8));
          if (v27 >= v27 - 3) {
            v27 -= 3;
          }
          sub_2161BC294(v26, v27, (uint64_t)v99);
          uint64_t v28 = v25 - v24;
          uint64_t v29 = (v25 - v24) / 40;
          uint64_t v30 = v29 - 1;
          long long v31 = v99[0];
          char v32 = HIBYTE(v99[2]);
          if (SHIBYTE(v99[2]) >= 0) {
            long long v33 = (char *)HIBYTE(v99[2]);
          }
          else {
            long long v33 = (char *)v99[1];
          }
          if (v33)
          {
            if (v28 >= 41)
            {
              long long v34 = (char *)*((unsigned __int16 *)v105 + 20 * v30 + 12);
              if (v33 > v34)
              {
                unint64_t v35 = v29 - 2;
                uint64_t v36 = (unsigned __int16 *)((char *)v105 + 40 * v29 - 56);
                while (1)
                {
                  unsigned int v37 = *v36;
                  v36 -= 20;
                  v34 += v37;
                  if ((HIBYTE(v99[2]) & 0x80) != 0)
                  {
                    uint64_t v38 = (char *)v99[1];
                    if (v34 == v99[1]) {
                      goto LABEL_44;
                    }
                  }
                  else
                  {
                    uint64_t v38 = (char *)HIBYTE(v99[2]);
                    if (v34 == (char *)HIBYTE(v99[2])) {
                      goto LABEL_45;
                    }
                  }
                  if (v34 > v38) {
                    break;
                  }
                  BOOL v20 = (uint64_t)v35-- <= 0;
                  if (v20) {
                    goto LABEL_43;
                  }
                }
                uint64_t v39 = sub_2162D1CE4(0xAu);
                if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v40 = sub_2162D1CE4(0xAu);
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                  {
                    sub_2162C3FCC(*(void *)(v94 + 8), v99);
                    v92 = v99;
                    if (SHIBYTE(v99[2]) < 0) {
                      v92 = (void **)v99[0];
                    }
                    LODWORD(v117) = 136315138;
                    *(void *)((char *)&v117 + 4) = v92;
                    _os_log_debug_impl(&dword_2160F5000, v40, OS_LOG_TYPE_DEBUG, "\t subwords %s", (uint8_t *)&v117, 0xCu);
                    if (SHIBYTE(v99[2]) < 0) {
                      operator delete(v99[0]);
                    }
                  }
                }
                uint64_t v30 = -1;
              }
            }
          }
LABEL_43:
          unint64_t v35 = v30;
          if (v32 < 0) {
LABEL_44:
          }
            operator delete(v31);
LABEL_45:
          if ((v35 & 0x8000000000000000) == 0)
          {
            unint64_t v41 = 0;
            if (v35)
            {
              int64_t v42 = v105;
              uint64_t v43 = 26;
              unint64_t v44 = v35;
              do
              {
                v41 += *(unsigned __int16 *)((char *)v105 + v43);
                v43 += 40;
                --v44;
              }
              while (v44);
              if (a5 < v41) {
                goto LABEL_62;
              }
            }
            else
            {
              int64_t v42 = v105;
            }
            uint64_t v45 = a4 + 2 * v41;
            unint64_t v46 = a5 - v41;
            *(void *)&long long v117 = v45;
            *((void *)&v117 + 1) = v46;
            unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v106 - v42) >> 3);
            BOOL v20 = v47 > v35;
            unint64_t v48 = v47 - v35;
            if (!v20) {
              goto LABEL_57;
            }
            unint64_t v49 = 0;
            unsigned __int8 v50 = (unsigned __int16 *)&v42[40 * v35 + 26];
            do
            {
              unsigned int v51 = *v50;
              v50 += 20;
              v49 += v51;
              --v48;
            }
            while (v48);
            if (v46 >= v49)
            {
LABEL_57:
              sub_216183E18((uint64_t *)&v117, 0, 0, 0, v99);
              if (SHIBYTE(__p[5]) < 0) {
                operator delete(__p[3]);
              }
              *(_OWORD *)&__p[3] = *(_OWORD *)v99;
              __p[5] = v99[2];
              CFStringRef v52 = (char *)__p[1];
              if (__p[0] == __p[1])
              {
                CFStringRef v52 = (char *)__p[0];
              }
              else
              {
                CFStringRef v53 = (char *)__p[1] - 4;
                if (*(_DWORD *)(*(void *)(v94 + 8) + 52) == *((_DWORD *)__p[1] - 1))
                {
                  __p[1] = (char *)__p[1] - 4;
                  v52 -= 4;
                  if (__p[0] == v53) {
                    goto LABEL_62;
                  }
                }
              }
              if (v106 - (unsigned char *)v105 > 79)
              {
                uint64_t v82 = (v106 - (unsigned char *)v105) / 0x28uLL - v35;
                if (v82 >= 1)
                {
                  uint64_t v83 = v109;
                  uint64_t v84 = v111;
                  unint64_t v85 = (unsigned __int16 *)(v106 - 16);
                  unint64_t v86 = (v106 - (unsigned char *)v105) / 0x28uLL - v35;
                  uint64_t v87 = v113;
                  do
                  {
                    v83 -= v85[1];
                    v84 -= v85[2];
                    unsigned int v88 = *v85;
                    v85 -= 20;
                    v87 -= v88;
                    --v86;
                  }
                  while (v86);
                  v106 -= 40 * v82;
                  uint64_t v109 = v83;
                  uint64_t v111 = v84;
                  uint64_t v113 = v87;
                }
                __p[1] = v52 - 4;
                uint64_t v81 = HIBYTE(__p[5]);
                BOOL v79 = SHIBYTE(__p[5]) < 0;
                uint64_t v80 = __p[4];
                if (SHIBYTE(__p[5]) >= 0) {
                  CFIndex v55 = &__p[3];
                }
                else {
                  CFIndex v55 = (void **)__p[3];
                }
              }
              else
              {
                BOOL v79 = SHIBYTE(__p[5]) < 0;
                uint64_t v80 = __p[4];
                if (SHIBYTE(__p[5]) >= 0) {
                  CFIndex v55 = &__p[3];
                }
                else {
                  CFIndex v55 = (void **)__p[3];
                }
                uint64_t v81 = HIBYTE(__p[5]);
              }
              if (v79) {
                uint64_t v56 = (uint64_t)v80;
              }
              else {
                uint64_t v56 = v81;
              }
              if (!v56) {
                goto LABEL_127;
              }
LABEL_63:
              if (v103[0] != 1 || v105 == v106 || __p[0] == __p[1]) {
                goto LABEL_127;
              }
              __int16 v93 = v55;
              uint64_t v95 = v56;
              if (*(v106 - 2) != 1)
              {
                unsigned int v77 = *((unsigned __int16 *)v106 - 5);
                sub_2161C04AC(0);
                if (sub_2161C09E0((uint64_t)&qword_26797EF20, v77)) {
                  goto LABEL_127;
                }
                if (sub_2161C08D8((uint64_t)&qword_26797EF20, v77))
                {
                  v78 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * v77 + 5]);
                  if ((unint64_t)v78[1] >= 3)
                  {
                    uint64_t v89 = 0;
                    uint64_t v90 = *v78;
                    while (word_2163CB654[v89] == *(_WORD *)(v90 + v89 * 2))
                    {
                      if (++v89 == 3) {
                        goto LABEL_127;
                      }
                    }
                    uint64_t v91 = 0;
                    while (*(unsigned __int16 *)&aBBkb_0[v91] == *(unsigned __int16 *)(v90 + v91))
                    {
                      v91 += 2;
                      if (v91 == 6) {
                        goto LABEL_127;
                      }
                    }
                  }
                }
                if (WORD4(xmmword_26797EF70) <= v77 && WORD5(xmmword_26797EF70) >= v77) {
                  goto LABEL_73;
                }
              }
              uint64_t v57 = *(void *)(*(void *)(a1[5] + 8) + 8);
              uint64_t v58 = (*(uint64_t (**)(uint64_t, void))(*(void *)v57 + 512))(v57, *((unsigned int *)__p[1] - 1));
              unint64_t v60 = v59;
              if (!sub_2161BC240(v58, v59))
              {
LABEL_73:
                uint64_t v64 = a1[5];
                long long v117 = 0uLL;
                uint64_t v118 = 0;
                sub_216140DB4(&v117, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
                memset(v99, 0, sizeof(v99));
                *(void *)buf = v99;
                LOBYTE(v97) = 0;
                v99[0] = operator new(0x18uLL);
                v99[1] = v99[0];
                v99[2] = (char *)v99[0] + 24;
                v99[1] = sub_21618B69C((uint64_t)&v99[2], (uint64_t)&v117, (uint64_t)v119, (void *)v99[0]);
                (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t))(*(void *)v64 + 64))(v102, v64, v99, 1);
                if (v102[0])
                {
                  v102[1] = v102[0];
                  operator delete(v102[0]);
                }
                *(void *)buf = v99;
                sub_21613F444((void ***)buf);
                if ((void)v117)
                {
                  *((void *)&v117 + 1) = v117;
                  operator delete((void *)v117);
                }
                (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[5] + 96))(&v101);
                (*(void (**)(uint64_t, void))(*(void *)v101 + 24))(v101, *((unsigned int *)__p[1] - 1));
                uint64_t v65 = a1[6];
                uint64_t v66 = v101;
                *(_OWORD *)uint64_t v99 = xmmword_216370320;
                v99[2] = (void *)16;
                int v100 = 1082130432;
                uint64_t v116 = 0;
                CFIndex v67 = operator new(0x20uLL);
                *CFIndex v67 = &unk_26C6C8800;
                v67[1] = a1;
                v67[2] = v93;
                v67[3] = v95;
                uint64_t v116 = v67;
                (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, void **, void *))(*(void *)v65 + 16))(&v117, v65, v66, 2, v99, v115);
                sub_21618B8E8(v115);
                uint64_t v68 = *((void *)&v117 + 1);
                for (uint64_t i = v117; i != v68; i += 32)
                {
                  if (a1[7])
                  {
                    if (*(char *)(i + 23) < 0)
                    {
                      uint64_t v71 = *(unsigned char **)i;
                      size_t v70 = *(void *)(i + 8);
                    }
                    else
                    {
                      size_t v70 = *(unsigned __int8 *)(i + 23);
                      uint64_t v71 = (unsigned char *)i;
                    }
                    if (sub_216209CE0((uint64_t)a1, v71, v70)) {
                      continue;
                    }
                  }
                  if (*(char *)(i + 23) < 0)
                  {
                    char v73 = *(char **)i;
                    uint64_t v72 = *(void *)(i + 8);
                  }
                  else
                  {
                    uint64_t v72 = *(unsigned __int8 *)(i + 23);
                    char v73 = (char *)i;
                  }
                  sub_2161BC294(v73, v72, (uint64_t)v99);
                  if (SHIBYTE(v99[2]) >= 0) {
                    uint64_t v74 = (unsigned __int16 *)v99;
                  }
                  else {
                    uint64_t v74 = (unsigned __int16 *)v99[0];
                  }
                  if (SHIBYTE(v99[2]) >= 0) {
                    uint64_t v75 = HIBYTE(v99[2]);
                  }
                  else {
                    uint64_t v75 = (uint64_t)v99[1];
                  }
                  sub_216208FF0((uint64_t)&v98, (uint64_t)a1, (uint64_t)v103, v74, v75);
                }
                v99[0] = &v117;
                sub_216175BF4((void ***)v99);
                uint64_t v76 = v101;
                uint64_t v101 = 0;
                if (v76) {
                  (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
                }
                goto LABEL_127;
              }
              if (v60 >= v60 - 3) {
                unint64_t v61 = v60 - 3;
              }
              else {
                unint64_t v61 = v60;
              }
              uint64_t v62 = *(void *)(*(void *)(a1[5] + 8) + 8);
              int v63 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v62 + 504))(v62, v58, v61);
              if (v63)
              {
                *((_DWORD *)__p[1] - 1) = v63;
                goto LABEL_73;
              }
LABEL_127:
              if (SHIBYTE(__p[5]) < 0) {
                operator delete(__p[3]);
              }
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (v105)
              {
                __int16 v106 = v105;
                operator delete(v105);
              }
              return;
            }
          }
        }
LABEL_62:
        CFStringRef v54 = sub_216268B0C();
        CFIndex v55 = (void **)*v54;
        uint64_t v56 = v54[1];
        if (!v56) {
          goto LABEL_127;
        }
        goto LABEL_63;
      }
    }
  }
}

void sub_21620AD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (v37 < 0) {
    operator delete(v36);
  }
  sub_216209E20((uint64_t)&a32);
  sub_21618A144(v35);
  _Unwind_Resume(a1);
}

void *sub_21620AF40(void *a1)
{
  *a1 = &unk_26C6BFF80;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21620AFB0(void *a1)
{
  *a1 = &unk_26C6BFF80;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21620B040(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  if (!result) {
    __assert_rtn("setLM", "JapaneseRNNLMPredictor.h", 42, "lm->type() != NeuralLanguageModelEngineType::None");
  }
  *(void *)(a1 + 40) = a2;
  *(void *)(*(void *)(a1 + 48) + 16) = a2;
  return result;
}

uint64_t sub_21620B0BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

long long *sub_21620B0C4(long long *a1, long long *a2, void **a3)
{
  BOOL v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  size_t v4 = a2;
  do
  {
    sub_21620B128(&v6, v3);
    BOOL v3 = (long long *)((char *)v3 + 40);
  }
  while (v3 != v4);
  return v4;
}

void ***sub_21620B128(void ***a1, long long *a2)
{
  size_t v4 = *a1;
  uint64_t v5 = (char *)(*a1)[1];
  uint64_t v6 = *a1;
  uint64_t v9 = (char *)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*v4) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666) {
      sub_21618B344();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (unsigned char *)*v4) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x333333333333333) {
      unint64_t v16 = 0x666666666666666;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      uint64_t v17 = (char *)sub_21618B4A8(v7, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = &v17[40 * v13];
    int v19 = &v17[40 * v16];
    long long v20 = *a2;
    long long v21 = a2[1];
    *((void *)v18 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    int v12 = v18 + 40;
    uint64_t v23 = (char *)*v4;
    uint64_t v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        long long v24 = *(_OWORD *)(v22 - 40);
        long long v25 = *(_OWORD *)(v22 - 24);
        *((void *)v18 - 1) = *((void *)v22 - 1);
        *(_OWORD *)(v18 - 24) = v25;
        *(_OWORD *)(v18 - 40) = v24;
        v18 -= 40;
        v22 -= 40;
      }
      while (v22 != v23);
      uint64_t v22 = (char *)*v4;
    }
    *size_t v4 = v18;
    v4[1] = v12;
    void v4[2] = v19;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v10 = *a2;
    long long v11 = a2[1];
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v10;
    *((_OWORD *)v5 + 1) = v11;
    int v12 = v5 + 40;
  }
  v4[1] = v12;
  return a1;
}

void sub_21620B264(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      sub_21618B344();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int v12 = (char *)sub_21618B4A8(v4, v11);
    }
    else {
      int v12 = 0;
    }
    unint64_t v14 = &v12[40 * v8];
    unint64_t v15 = &v12[40 * v11];
    size_t v16 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    int v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 40);
        long long v21 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void sub_21620B404()
{
}

void *sub_21620B418()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C6C8858;
  return result;
}

void sub_21620B450(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C8858;
}

uint64_t sub_21620B478()
{
  return 1;
}

uint64_t sub_21620B480(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21620B4C0()
{
  return &unk_26C6BCA70;
}

void sub_21620B4D0()
{
}

__n128 sub_21620B4E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C8800;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21620B538(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8800;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_21620B570(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  sub_2161BC294(*(char **)a2, *(void *)(a2 + 8), (uint64_t)&__p);
  unsigned __int8 v4 = v18;
  if ((char)v18 < 0)
  {
    if (!v17) {
      goto LABEL_9;
    }
    p_p = __p;
    if (*((_WORD *)__p + v17 - 1) != 9601) {
      goto LABEL_9;
    }
    uint64_t v5 = --v17;
  }
  else
  {
    if (!v18 || *((_WORD *)&__p + v18 - 1) != 9601) {
      goto LABEL_9;
    }
    uint64_t v5 = --v18;
    p_p = &__p;
  }
  p_p[v5] = 0;
  unsigned __int8 v4 = v18;
LABEL_9:
  if ((v4 & 0x80u) == 0) {
    uint64_t v7 = &__p;
  }
  else {
    uint64_t v7 = __p;
  }
  if ((v4 & 0x80u) == 0) {
    unint64_t v8 = v4;
  }
  else {
    unint64_t v8 = v17;
  }
  sub_216292B40(*(void *)(v3 + 16), v7, v8, (uint64_t)v13);
  if ((char)v18 < 0) {
    operator delete(__p);
  }
  unint64_t v9 = v14;
  unint64_t v10 = v13;
  if ((v14 & 0x80u) != 0)
  {
    unint64_t v10 = (void **)v13[0];
    unint64_t v9 = (unint64_t)v13[1];
  }
  v15[0] = v10;
  v15[1] = v9;
  BOOL v11 = sub_216184E04(a1 + 16, (uint64_t)v15);
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
  return v11;
}

void sub_21620B68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21620B6BC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21620B6FC()
{
  return &unk_26C6BCA60;
}

uint64_t sub_21620B708(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = *(const __CFString **)a1;
  CFStringRef v5 = *(CFStringRef *)a2;
  if (v4)
  {
    if (!v5) {
      return 1;
    }
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetLength(*(CFStringRef *)a2);
    unint64_t v8 = (UniChar *)off_26B4ABC18();
    v20.location = 0;
    v20.length = Length;
    CFStringGetCharacters(v9, v20, v8);
    unint64_t v10 = (UniChar *)off_26B4ABC30();
    v21.location = 0;
    v21.length = v7;
    CFStringGetCharacters(v11, v21, v10);
    uint64_t v12 = 2 * Length;
    if (2 * v7 < 2 * Length) {
      uint64_t v12 = 2 * v7;
    }
    if (v12 >= 1)
    {
      unsigned int v13 = *(unsigned __int8 *)v8;
      unsigned int v14 = *(unsigned __int8 *)v10;
      if (v13 != v14) {
        return v13 < v14;
      }
      uint64_t v15 = 0;
      while (v12 - 1 != v15)
      {
        unsigned int v16 = *((unsigned __int8 *)v8 + v15 + 1);
        unsigned int v17 = *((unsigned __int8 *)v10 + ++v15);
        if (v16 != v17)
        {
          uint64_t result = v16 < v17;
          if (v15 >= v12) {
            return Length < v7;
          }
          return result;
        }
      }
    }
    return Length < v7;
  }
  else
  {
    if (v5) {
      return 0;
    }
    return *(void *)(a1 + 8) < *(void *)(a2 + 8);
  }
}

uint64_t sub_21620B850(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF448;
  uint64_t v2 = *(_opaque_pthread_t **)(a1 + 8);
  if (v2)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 97));
    pthread_join(v2, 0);
  }
  uint64_t v3 = *(void ***)(a1 + 24);
  if (v3) {
    sub_21628D4F4(v3);
  }
  sub_216195B94((const void **)(a1 + 104), 0);
  sub_216144C28(a1 + 56);
  CFStringRef v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
  }
  return a1;
}

void sub_21620B914(uint64_t a1)
{
  sub_21620B850(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21620B94C(uint64_t a1)
{
  sched_param v4 = (sched_param)5;
  uint64_t v2 = pthread_self();
  pthread_setschedparam(v2, 1, &v4);
  sub_21620B998(a1);
  return 0;
}

void sub_21620B998(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 97));
  if (v1) {
    return;
  }
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v3 & 1) == 0)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 97));
    if ((v4 & 1) == 0)
    {
      CFArrayRef v5 = *(const __CFArray **)(a1 + 104);
      if (v5)
      {
        unint64_t v6 = (unint64_t)&v128;
        long long v119 = 0u;
        long long v120 = 0u;
        long long v117 = 0u;
        long long v118 = 0u;
        long long v116 = 0u;
        float v121 = 1.0;
        int v122 = 0;
        uint64_t v123 = 0;
        CFIndex v124 = 0;
        if (*(_DWORD *)(a1 + 112) == 3)
        {
          long long v114 = 0uLL;
          v115[0] = 0;
          CFIndex Count = CFArrayGetCount(v5);
          sub_21620C9A8(&v114, Count);
          if (Count >= 1)
          {
            CFIndex v8 = 0;
            CFStringRef v9 = (const __CFString *)*MEMORY[0x263EFFD08];
            do
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v8);
              CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconReadingKey[0]);
              CFStringRef v12 = Value;
              if (Value) {
                BOOL v13 = Value == v9;
              }
              else {
                BOOL v13 = 1;
              }
              if (!v13)
              {
                CFIndex Length = CFStringGetLength(Value);
                if (Length > 127) {
                  goto LABEL_45;
                }
                if (Length) {
                  goto LABEL_22;
                }
              }
              CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconSurfaceKey[0]);
              CFStringRef v12 = v14;
              if (v14) {
                BOOL v15 = v14 == v9;
              }
              else {
                BOOL v15 = 1;
              }
              if (!v15)
              {
                CFIndex v16 = CFStringGetLength(v14);
                if (v16)
                {
                  if (v16 < 128)
                  {
LABEL_22:
                    (*(void (**)(UniChar **__return_ptr, uint64_t, const __CFString *))(*(void *)a1 + 16))(&v126, a1, v12);
                    unsigned __int8 v18 = v126;
                    if ((unint64_t)((char *)v127 - (char *)v126) <= 0xFE)
                    {
                      uint64_t v19 = *((void *)&v114 + 1);
                      if (*((void *)&v114 + 1) >= v115[0])
                      {
                        uint64_t v21 = (uint64_t)(*((void *)&v114 + 1) - v114) >> 4;
                        unint64_t v22 = v21 + 1;
                        if ((unint64_t)(v21 + 1) >> 60) {
                          sub_21610CB04();
                        }
                        uint64_t v23 = v115[0] - v114;
                        if ((uint64_t)(v115[0] - v114) >> 3 > v22) {
                          unint64_t v22 = v23 >> 3;
                        }
                        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v24 = v22;
                        }
                        unint64_t v131 = v115;
                        if (v24) {
                          unint64_t v24 = (unint64_t)sub_21620DECC(v24);
                        }
                        else {
                          uint64_t v25 = 0;
                        }
                        uint64_t v26 = (void *)(v24 + 16 * v21);
                        unint64_t v27 = v24 + 16 * v25;
                        unint64_t v130 = v27;
                        *uint64_t v26 = 0;
                        v26[1] = 0;
                        CFRange v20 = (const void **)(v26 + 2);
                        v129.i64[1] = (uint64_t)(v26 + 2);
                        uint64_t v28 = (void *)*((void *)&v114 + 1);
                        uint64_t v29 = (void *)v114;
                        if (*((void *)&v114 + 1) == (void)v114)
                        {
                          int64x2_t v31 = vdupq_n_s64(*((unint64_t *)&v114 + 1));
                        }
                        else
                        {
                          do
                          {
                            uint64_t v30 = *(v28 - 2);
                            v28 -= 2;
                            *uint64_t v28 = 0;
                            *(v26 - 2) = v30;
                            v26 -= 2;
                            v26[1] = v28[1];
                          }
                          while (v28 != v29);
                          int64x2_t v31 = (int64x2_t)v114;
                          CFRange v20 = (const void **)v129.i64[1];
                          unint64_t v27 = v130;
                        }
                        *(void *)&long long v114 = v26;
                        *((void *)&v114 + 1) = v20;
                        int64x2_t v129 = v31;
                        unint64_t v32 = v115[0];
                        v115[0] = v27;
                        unint64_t v130 = v32;
                        uint64_t v128 = (void **)v31.i64[0];
                        sub_21620DF04((uint64_t)&v128);
                      }
                      else
                      {
                        **((void **)&v114 + 1) = 0;
                        *(void *)(v19 + 8) = 0;
                        CFRange v20 = (const void **)(v19 + 16);
                      }
                      *((void *)&v114 + 1) = v20;
                      if (v126 == v127)
                      {
                        sub_216195954(v20 - 2, v12);
                      }
                      else
                      {
                        CFStringRef v33 = CFStringCreateWithCharacters(0, v126, v127 - v126);
                        sub_2161868BC(v20 - 2, v33);
                      }
                      *(void *)(*((void *)&v114 + 1) - 8) = v8;
                      unsigned __int8 v18 = v126;
                    }
                    if (v18)
                    {
                      __int16 v127 = v18;
                      operator delete(v18);
                    }
                  }
                }
              }
LABEL_45:
              ++v8;
            }
            while (v8 != Count);
          }
          unint64_t v34 = 126 - 2 * __clz((uint64_t)(*((void *)&v114 + 1) - v114) >> 4);
          if (*((void *)&v114 + 1) == (void)v114) {
            uint64_t v35 = 0;
          }
          else {
            uint64_t v35 = v34;
          }
          sub_21620DF58(v114, *((const void ***)&v114 + 1), v35, 1);
          if ((void)v114 != *((void *)&v114 + 1))
          {
            sub_21620C884(*(CFArrayRef *)(a1 + 104), v114, *((uint64_t *)&v114 + 1));
            CFArrayRef v36 = *(const __CFArray **)(a1 + 104);
            unint64_t v37 = sub_21620C884(v36, v114, *((uint64_t *)&v114 + 1));
            sub_216185B34((void **)&v116, v37);
            sub_21620D9B8((void **)&v117 + 1, (uint64_t)(*((void *)&v114 + 1) - v114) >> 4);
            sub_21620DAA8((uint64_t)&v116, 0);
            uint64_t v38 = v114;
            if (*((void *)&v114 + 1) != (void)v114)
            {
              CFStringRef v39 = 0;
              unint64_t v40 = 0;
              while (1)
              {
                CFDictionaryRef v41 = (const __CFDictionary *)CFArrayGetValueAtIndex(v36, *(void *)(v38 + 16 * v40 + 8));
                CFStringRef v42 = (const __CFString *)CFDictionaryGetValue(v41, kMecabraSupplementalLexiconSurfaceKey[0]);
                CFStringRef v43 = v42;
                if (v42) {
                  CFIndex v44 = CFStringGetLength(v42);
                }
                else {
                  CFIndex v44 = 0;
                }
                if (v124 < v44) {
                  CFIndex v124 = v44;
                }
                CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v41, kMecabraSupplementalLexiconItemPrefixKey[0]);
                int valuePtr = 0;
                CFNumberGetValue(v45, kCFNumberSInt32Type, &valuePtr);
                unint64_t v46 = (unsigned __int16)valuePtr;
                unint64_t v47 = *((void *)&v119 + 1);
                if (*((void *)&v119 + 1))
                {
                  uint8x8_t v48 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v119 + 8));
                  v48.i16[0] = vaddlv_u8(v48);
                  if (v48.u32[0] > 1uLL)
                  {
                    unint64_t v6 = (unsigned __int16)valuePtr;
                    if (*((void *)&v119 + 1) <= (unint64_t)(unsigned __int16)valuePtr) {
                      unint64_t v6 = (unint64_t)(unsigned __int16)valuePtr % *((void *)&v119 + 1);
                    }
                  }
                  else
                  {
                    unint64_t v6 = (DWORD2(v119) - 1) & (unint64_t)(unsigned __int16)valuePtr;
                  }
                  unint64_t v49 = *(uint64_t ****)(v119 + 8 * v6);
                  if (v49)
                  {
                    for (uint64_t i = *v49; i; uint64_t i = (uint64_t **)*i)
                    {
                      unint64_t v51 = (unint64_t)i[1];
                      if (v51 == (unsigned __int16)valuePtr)
                      {
                        if (*((unsigned __int16 *)i + 8) == (unsigned __int16)valuePtr) {
                          goto LABEL_95;
                        }
                      }
                      else
                      {
                        if (v48.u32[0] > 1uLL)
                        {
                          if (v51 >= *((void *)&v119 + 1)) {
                            v51 %= *((void *)&v119 + 1);
                          }
                        }
                        else
                        {
                          v51 &= *((void *)&v119 + 1) - 1;
                        }
                        if (v51 != v6) {
                          break;
                        }
                      }
                    }
                  }
                }
                CFStringRef v52 = operator new(0x18uLL);
                void *v52 = 0;
                v52[1] = v46;
                *((_WORD *)v52 + 8) = v46;
                float v53 = (float)(unint64_t)(*((void *)&v120 + 1) + 1);
                if (!v47 || (float)(v121 * (float)v47) < v53)
                {
                  BOOL v54 = (v47 & (v47 - 1)) != 0;
                  if (v47 < 3) {
                    BOOL v54 = 1;
                  }
                  unint64_t v55 = v54 | (2 * v47);
                  unint64_t v56 = vcvtps_u32_f32(v53 / v121);
                  if (v55 <= v56) {
                    size_t v57 = v56;
                  }
                  else {
                    size_t v57 = v55;
                  }
                  sub_2161297B4((uint64_t)&v119, v57);
                  unint64_t v47 = *((void *)&v119 + 1);
                  if ((*((void *)&v119 + 1) & (*((void *)&v119 + 1) - 1)) != 0)
                  {
                    if (*((void *)&v119 + 1) <= v46) {
                      unint64_t v6 = v46 % *((void *)&v119 + 1);
                    }
                    else {
                      unint64_t v6 = v46;
                    }
                  }
                  else
                  {
                    unint64_t v6 = (DWORD2(v119) - 1) & v46;
                  }
                }
                uint64_t v58 = v119;
                unint64_t v59 = *(void **)(v119 + 8 * v6);
                if (v59) {
                  break;
                }
                void *v52 = v120;
                *(void *)&long long v120 = v52;
                *(void *)(v58 + 8 * v6) = &v120;
                if (*v52)
                {
                  unint64_t v60 = *(void *)(*v52 + 8);
                  if ((v47 & (v47 - 1)) != 0)
                  {
                    if (v60 >= v47) {
                      v60 %= v47;
                    }
                  }
                  else
                  {
                    v60 &= v47 - 1;
                  }
                  unint64_t v59 = (void *)(v119 + 8 * v60);
                  goto LABEL_93;
                }
LABEL_94:
                ++*((void *)&v120 + 1);
LABEL_95:
                if (!v40)
                {
                  __int16 v62 = valuePtr;
LABEL_99:
                  sub_21620DBA4((uint64_t)&v116, *(CFStringRef *)(v114 + 16 * v40), v43, v62);
                  goto LABEL_100;
                }
                CFComparisonResult v61 = CFStringCompare(v39, *(CFStringRef *)(v114 + 16 * v40), 0);
                __int16 v62 = valuePtr;
                if (v61) {
                  goto LABEL_99;
                }
                sub_21620DD48((uint64_t)&v116, v43, valuePtr);
LABEL_100:
                CFArrayRef v63 = (const __CFArray *)CFDictionaryGetValue(v41, kMecabraSupplementalLexiconIdentifiersKey[0]);
                CFIndex v64 = CFArrayGetCount(v63);
                sub_21620DAA8((uint64_t)&v116, v64);
                sub_2161A28DC(&v128, v64);
                uint64_t v65 = (void **)v129.i64[0];
                if ((void **)v129.i64[0] == v128)
                {
                  uint64_t v69 = 0;
                }
                else
                {
                  uint64_t v66 = 0;
                  unint64_t v67 = 0;
                  do
                  {
                    CFNumberRef v68 = (const __CFNumber *)CFArrayGetValueAtIndex(v63, v67);
                    CFNumberGetValue(v68, kCFNumberCFIndexType, &v128[v66]);
                    ++v67;
                    uint64_t v65 = v128;
                    ++v66;
                  }
                  while (v67 < (v129.i64[0] - (uint64_t)v128) >> 3);
                  uint64_t v69 = (v129.i64[0] - (uint64_t)v128) >> 1;
                }
                sub_2161BF794(v65, (_WORD *)v65 + (v69 & 0x7FFFFFFFFFFFFFFCLL), (uint64_t)&v116);
                v122 += v69;
                if (v128)
                {
                  v129.i64[0] = (uint64_t)v128;
                  operator delete(v128);
                }
                uint64_t v38 = v114;
                CFStringRef v39 = *(const __CFString **)(v114 + 16 * v40++);
                if (v40 >= (uint64_t)(*((void *)&v114 + 1) - v114) >> 4) {
                  goto LABEL_168;
                }
              }
              void *v52 = *v59;
LABEL_93:
              void *v59 = v52;
              goto LABEL_94;
            }
            goto LABEL_168;
          }
        }
        else
        {
          long long v114 = 0uLL;
          v115[0] = 0;
          CFIndex v70 = CFArrayGetCount(v5);
          uint64_t v71 = v70;
          if (v70 >= 0) {
            uint64_t v72 = v70;
          }
          else {
            uint64_t v72 = v70 + 1;
          }
          uint64_t v73 = v72 >> 1;
          sub_21620C9A8(&v114, v72 >> 1);
          if (v71 >= 2)
          {
            uint64_t v74 = 0;
            CFStringRef v75 = (const __CFString *)*MEMORY[0x263EFFD08];
            do
            {
              CFStringRef v76 = (const __CFString *)CFArrayGetValueAtIndex(v5, 2 * v74);
              CFStringRef v77 = (const __CFString *)CFArrayGetValueAtIndex(v5, (2 * v74) | 1);
              CFStringRef v78 = v77;
              CFIndex v79 = 0;
              if (v77 && v77 != v75) {
                CFIndex v79 = CFStringGetLength(v77);
              }
              if (v76
                && v76 != v75
                && CFStringGetLength(v76)
                && v79 <= 127
                && (*(_DWORD *)(a1 + 112) != 2 || (sub_2161E36C8(v76) & 1) == 0))
              {
                if (v79 || (CFStringRef v78 = v76, CFStringGetLength(v76) <= 127))
                {
                  (*(void (**)(UniChar **__return_ptr, uint64_t, const __CFString *))(*(void *)a1 + 16))(&v126, a1, v78);
                  uint64_t v80 = v126;
                  if ((unint64_t)((char *)v127 - (char *)v126) <= 0xFE)
                  {
                    uint64_t v81 = *((void *)&v114 + 1);
                    if (*((void *)&v114 + 1) >= v115[0])
                    {
                      uint64_t v83 = (uint64_t)(*((void *)&v114 + 1) - v114) >> 4;
                      unint64_t v84 = v83 + 1;
                      if ((unint64_t)(v83 + 1) >> 60) {
                        sub_21610CB04();
                      }
                      uint64_t v85 = v115[0] - v114;
                      if ((uint64_t)(v115[0] - v114) >> 3 > v84) {
                        unint64_t v84 = v85 >> 3;
                      }
                      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v86 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v86 = v84;
                      }
                      unint64_t v131 = v115;
                      if (v86) {
                        unint64_t v86 = (unint64_t)sub_21620DECC(v86);
                      }
                      else {
                        uint64_t v87 = 0;
                      }
                      unsigned int v88 = (void *)(v86 + 16 * v83);
                      unint64_t v89 = v86 + 16 * v87;
                      unint64_t v130 = v89;
                      *unsigned int v88 = 0;
                      v88[1] = 0;
                      uint64_t v82 = (const void **)(v88 + 2);
                      v129.i64[1] = (uint64_t)(v88 + 2);
                      uint64_t v90 = (void *)*((void *)&v114 + 1);
                      uint64_t v91 = (void *)v114;
                      if (*((void *)&v114 + 1) == (void)v114)
                      {
                        int64x2_t v93 = vdupq_n_s64(*((unint64_t *)&v114 + 1));
                      }
                      else
                      {
                        do
                        {
                          uint64_t v92 = *(v90 - 2);
                          v90 -= 2;
                          *uint64_t v90 = 0;
                          *(v88 - 2) = v92;
                          v88 -= 2;
                          v88[1] = v90[1];
                        }
                        while (v90 != v91);
                        int64x2_t v93 = (int64x2_t)v114;
                        uint64_t v82 = (const void **)v129.i64[1];
                        unint64_t v89 = v130;
                      }
                      *(void *)&long long v114 = v88;
                      *((void *)&v114 + 1) = v82;
                      int64x2_t v129 = v93;
                      unint64_t v94 = v115[0];
                      v115[0] = v89;
                      unint64_t v130 = v94;
                      uint64_t v128 = (void **)v93.i64[0];
                      sub_21620DF04((uint64_t)&v128);
                    }
                    else
                    {
                      **((void **)&v114 + 1) = 0;
                      *(void *)(v81 + 8) = 0;
                      uint64_t v82 = (const void **)(v81 + 16);
                    }
                    *((void *)&v114 + 1) = v82;
                    if (v126 == v127)
                    {
                      sub_216195954(v82 - 2, v78);
                    }
                    else
                    {
                      CFStringRef v95 = CFStringCreateWithCharacters(0, v126, v127 - v126);
                      sub_2161868BC(v82 - 2, v95);
                    }
                    *(void *)(*((void *)&v114 + 1) - 8) = v74;
                    uint64_t v80 = v126;
                  }
                  if (v80)
                  {
                    __int16 v127 = v80;
                    operator delete(v80);
                  }
                }
              }
              ++v74;
            }
            while (v74 != v73);
          }
          unint64_t v96 = 126 - 2 * __clz((uint64_t)(*((void *)&v114 + 1) - v114) >> 4);
          if (*((void *)&v114 + 1) == (void)v114) {
            uint64_t v97 = 0;
          }
          else {
            uint64_t v97 = v96;
          }
          sub_21620DF58(v114, *((const void ***)&v114 + 1), v97, 1);
          uint64_t v99 = *((void *)&v114 + 1);
          uint64_t v98 = v114;
          if ((void)v114 != *((void *)&v114 + 1))
          {
            CFArrayRef v100 = *(const __CFArray **)(a1 + 104);
            uint64_t v101 = 1;
            do
            {
              CFStringRef v102 = (const __CFString *)CFArrayGetValueAtIndex(v100, 2 * *(void *)(v98 + 8));
              CFIndex v103 = CFStringGetLength(v102);
              CFIndex v104 = v101 + v103 + CFStringGetLength(*(CFStringRef *)v98);
              uint64_t v101 = v104 + 4;
              v98 += 16;
            }
            while (v98 != v99);
            sub_216185B34((void **)&v116, v104 + 4);
            sub_21620D9B8((void **)&v117 + 1, (uint64_t)(*((void *)&v114 + 1) - v114) >> 4);
            sub_21620DAA8((uint64_t)&v116, 0);
            uint64_t v105 = v114;
            if (*((void *)&v114 + 1) != (void)v114)
            {
              uint64_t v106 = 0;
              CFStringRef v107 = 0;
              unint64_t v108 = 0;
              do
              {
                CFStringRef v109 = (const __CFString *)CFArrayGetValueAtIndex(v100, 2 * *(void *)(v105 + v106 + 8));
                CFStringRef v110 = v109;
                if (v109) {
                  CFIndex v111 = CFStringGetLength(v109);
                }
                else {
                  CFIndex v111 = 0;
                }
                if (v124 < v111) {
                  CFIndex v124 = v111;
                }
                if (v106 && CFEqual(v107, *(CFStringRef *)(v114 + v106))) {
                  sub_21620DD48((uint64_t)&v116, v110, 0);
                }
                else {
                  sub_21620DBA4((uint64_t)&v116, *(CFStringRef *)(v114 + v106), v110, 0);
                }
                uint64_t v105 = v114;
                CFStringRef v107 = *(const __CFString **)(v114 + v106);
                ++v108;
                v106 += 16;
              }
              while (v108 < (uint64_t)(*((void *)&v114 + 1) - v114) >> 4);
            }
LABEL_168:
            uint64_t v128 = (void **)&v114;
            sub_21620DE44(&v128);
            unsigned __int8 v112 = atomic_load((unsigned __int8 *)(a1 + 97));
            if ((v112 & 1) == 0)
            {
              uint64_t v113 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
              if (v113)
              {
                v113[8] = 0;
                *((_OWORD *)v113 + 2) = 0u;
                *((_OWORD *)v113 + 3) = 0u;
                *(_OWORD *)uint64_t v113 = 0u;
                *((_OWORD *)v113 + 1) = 0u;
                *(void *)(a1 + 24) = v113;
                if (sub_2162140DC((uint64_t)v113, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118 - *((void *)&v117 + 1)) >> 3), *((uint64_t *)&v117 + 1)) != -1)operator new(); {
                uint64_t v113 = *(void **)(a1 + 24);
                }
              }
              else
              {
                *(void *)(a1 + 24) = 0;
              }
              sub_21628D4F4((void **)v113);
              *(void *)(a1 + 24) = 0;
            }
            goto LABEL_176;
          }
        }
        uint64_t v128 = (void **)&v114;
        sub_21620DE44(&v128);
LABEL_176:
        sub_21620C950((uint64_t)&v116);
      }
    }
  }

  sub_216195B94((const void **)(a1 + 104), 0);
}

void sub_21620C6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x2166CA800](v7, 0x10A1C40079592F6);
  sub_21620C950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21620C794(uint64_t a1, const void *a2, int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2)
  {
    sub_2161AC6F8((const void **)(a1 + 104), a2);
    if (a3)
    {
      pthread_attr_init(&v7);
      pthread_attr_setdetachstate(&v7, 1);
      CFArrayRef v5 = (void *)(a1 + 8);
      int v6 = pthread_create((pthread_t *)(a1 + 8), &v7, (void *(__cdecl *)(void *))sub_21620B94C, (void *)a1);
      pthread_attr_destroy(&v7);
      if (v6) {
        *CFArrayRef v5 = 0;
      }
    }
    else
    {
      sub_21620B998(a1);
    }
  }
}

uint64_t sub_21620C884(CFArrayRef theArray, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 1;
  }
  uint64_t v4 = a2;
  uint64_t v6 = 1;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, *(void *)(v4 + 8));
    CFStringRef v8 = *(const __CFString **)v4;
    v4 += 16;
    CFIndex Length = CFStringGetLength(v8);
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconSurfaceKey[0]);
    CFIndex v11 = CFStringGetLength(Value);
    CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconIdentifiersKey[0]);
    v6 += Length + v11 + 4 * (CFArrayGetCount(v12) & 0x1FFFFFFFFFFFFFFFLL) + 5;
  }
  while (v4 != a3);
  return v6;
}

uint64_t sub_21620C950(uint64_t a1)
{
  sub_216144C28(a1 + 48);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unsigned __int8 v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_21620C99C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void *sub_21620C9A8(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60) {
      sub_21610CB04();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    BOOL v15 = result + 2;
    uint64_t v4 = (char *)sub_21620DECC(a2);
    pthread_attr_t v7 = *v2;
    uint64_t v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      CFStringRef v8 = &v4[v3];
    }
    else
    {
      CFStringRef v8 = &v4[v3];
      do
      {
        uint64_t v9 = *((void *)v6 - 2);
        v6 -= 16;
        *(void *)uint64_t v6 = 0;
        *((void *)v8 - 2) = v9;
        v8 -= 16;
        *((void *)v8 + 1) = *((void *)v6 + 1);
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    *uint64_t v2 = v8;
    v2[1] = &v4[v3];
    int64x2_t v13 = v10;
    CFIndex v11 = v2[2];
    v2[2] = &v4[16 * v5];
    CFStringRef v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)sub_21620DF04((uint64_t)&v12);
  }
  return result;
}

uint64_t sub_21620CA6C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 0;
  }
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v8 & 1) == 0 || !*(void *)(a1 + 16)) {
    return 0;
  }
  if ((a7 & 0x40) != 0)
  {
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    CFIndex v11 = *(unsigned int **)(a1 + 24);
    *((void *)&v13 + 1) = a3;
    LODWORD(v14) = 2 * a4;
    *((void *)&v14 + 1) = a6;
    *(void *)&long long v15 = a5;
    *((void *)&v15 + 1) = a8;
    LODWORD(v16) = 1;
    *((void *)&v17 + 1) = (char *)v18 + 2;
    BYTE1(v18[0]) = 1;
    v12[0] = (uint64_t)v11;
    v12[1] = a2;
    return sub_21634D9C0(v11, (uint64_t)v12);
  }
  else
  {
    uint64_t v9 = *(int **)(a1 + 24);
    v12[0] = 0;
    if ((a7 & 0x700) != 0) {
      sub_21634B89C((uint64_t)v9, *v9, v12, a3, 2 * a4, a6, a5, -1, (uint64_t)a3, (a7 >> 7) & 0xE, 0);
    }
    else {
      sub_21628D6C4((uint64_t)v9, *v9, a3, 2 * a4, a6, (unint64_t *)v12, a5, (__int16)a3);
    }
    return v12[0];
  }
}

void sub_21620CBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 96));
    if (v5)
    {
      uint64_t v6 = *(unsigned int (****)(void, uint64_t, uint64_t, unsigned int *))(a1 + 16);
      if (v6)
      {
        unsigned int v15 = 0;
        if ((**v6)(v6, a2, 2 * a3, &v15))
        {
          sub_21620CCCC(a1, v15, &v13);
          char v12 = 0;
          unsigned __int8 v8 = v13;
          uint64_t v9 = v14;
          if (v13 != v14)
          {
            int64x2_t v10 = v13;
            do
            {
              (*(void (**)(uint64_t, char *, char *))(a4 + 16))(a4, v10, &v12);
              v10 += 56;
              if (v12) {
                BOOL v11 = 1;
              }
              else {
                BOOL v11 = v10 == v9;
              }
            }
            while (!v11);
          }
          if (v8) {
            operator delete(v8);
          }
        }
      }
    }
  }
}

void sub_21620CCB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21620CCCC(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  v27[0] = a1 + 32;
  if (a2)
  {
    v27[1] = *(void *)(a1 + 32) + 2 * a2;
    uint64_t v4 = sub_21620ED24(v27);
    uint64_t v6 = v5;
    unsigned int v7 = sub_21620ED90(v27);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v7)
    {
      unsigned int v8 = v7;
      uint64_t v9 = (char *)sub_21620EF18(v7);
      unsigned int v10 = 0;
      char v12 = &v9[56 * v11];
      *a3 = v9;
      a3[1] = v9;
      a3[2] = v12;
      long long v13 = v9;
      do
      {
        sub_21620EDE0(v27, v4, v6, (uint64_t)&v28);
        if (v13 >= v12)
        {
          unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v9) >> 3) + 1;
          if (v17 > 0x492492492492492) {
            sub_21610CB04();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((v12 - v9) >> 3) > v17) {
            unint64_t v17 = 0xDB6DB6DB6DB6DB6ELL * ((v12 - v9) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v12 - v9) >> 3)) >= 0x249249249249249) {
            unint64_t v18 = 0x492492492492492;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            unint64_t v18 = (unint64_t)sub_21620EF18(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          unint64_t v20 = v18 + 8 * ((v13 - v9) >> 3);
          long long v21 = v29;
          *(_OWORD *)unint64_t v20 = v28;
          *(_OWORD *)(v20 + 16) = v21;
          *(_OWORD *)(v20 + 32) = v30;
          *(void *)(v20 + 48) = v31;
          if (v13 == v9)
          {
            uint64_t v26 = (char *)(v18 + 8 * ((v13 - v9) >> 3));
          }
          else
          {
            unint64_t v22 = v18 + 8 * ((v13 - v9) >> 3);
            do
            {
              long long v23 = *(_OWORD *)(v13 - 56);
              long long v24 = *(_OWORD *)(v13 - 40);
              long long v25 = *(_OWORD *)(v13 - 24);
              uint64_t v26 = (char *)(v22 - 56);
              *(void *)(v22 - 8) = *((void *)v13 - 1);
              *(_OWORD *)(v22 - 24) = v25;
              *(_OWORD *)(v22 - 40) = v24;
              *(_OWORD *)(v22 - 56) = v23;
              v13 -= 56;
              v22 -= 56;
            }
            while (v13 != v9);
          }
          char v12 = (char *)(v18 + 56 * v19);
          long long v13 = (char *)(v20 + 56);
          *a3 = v26;
          a3[1] = (char *)(v20 + 56);
          a3[2] = v12;
          if (v9) {
            operator delete(v9);
          }
          uint64_t v9 = v26;
        }
        else
        {
          long long v14 = v28;
          long long v15 = v29;
          long long v16 = v30;
          *((void *)v13 + 6) = v31;
          *((_OWORD *)v13 + 1) = v15;
          *((_OWORD *)v13 + 2) = v16;
          *(_OWORD *)long long v13 = v14;
          v13 += 56;
        }
        a3[1] = v13;
        ++v10;
      }
      while (v10 < v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_21620CEE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21620CF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (result)
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(a1 + 96));
    if (v7)
    {
      uint64_t result = *(void **)(a1 + 16);
      if (result)
      {
        v8[0] = &unk_26C6F52C8;
        v8[1] = a1;
        v8[2] = a3;
        v8[3] = v8;
        (*(void (**)(void *, uint64_t, void *))(*result + 80))(result, a2, v8);
        return sub_216198AB4(v8);
      }
    }
  }
  return result;
}

void sub_21620D000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198AB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21620D014(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  _DWORD v10[4] = *MEMORY[0x263EF8340];
  if (*((_DWORD *)result + 28) == 3)
  {
    uint64_t v3 = result;
    unsigned __int8 v4 = atomic_load(result + 96);
    if (v4)
    {
      if (*((void *)result + 2))
      {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
        if (result)
        {
          __int16 v7 = *(_WORD *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 48))(a2, 0, 0);
          uint64_t v8 = *((void *)v3 + 2);
          uint64_t v9 = operator new(0x20uLL);
          *uint64_t v9 = &unk_26C6F5348;
          v9[1] = v3;
          v9[2] = a3;
          *((_WORD *)v9 + 12) = v7;
          v10[3] = v9;
          sub_21621162C(v8, a2, (uint64_t)v10, 1u, 1);
          return (unsigned __int8 *)sub_216198AB4(v10);
        }
      }
    }
  }
  return result;
}

void sub_21620D154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198AB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21620D168(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = a4;
  if (a3)
  {
    unsigned __int8 v4 = result;
    unsigned __int8 v5 = atomic_load(result + 96);
    if (v5)
    {
      uint64_t result = (unsigned __int8 *)*((void *)result + 2);
      if (result)
      {
        v7[0] = &unk_26C6C86F8;
        v7[1] = v4;
        v7[2] = &v6;
        v7[3] = v7;
        (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, void *))(*(void *)result + 16))(result, a2, 2 * a3, v7);
        return (unsigned __int8 *)sub_216198FB8(v7);
      }
    }
  }
  return result;
}

void sub_21620D234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21620D248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD v10[4] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (result)
  {
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 96));
    if (v9)
    {
      uint64_t result = *(void **)(a1 + 16);
      if (result)
      {
        v10[0] = &unk_26C6F53C8;
        v10[1] = a1;
        v10[2] = a3;
        v10[3] = v10;
        (*(void (**)(void *, uint64_t, void *, uint64_t))(*result + 112))(result, a2, v10, a4);
        return sub_216198AB4(v10);
      }
    }
  }
  return result;
}

void sub_21620D34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198AB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21620D360(unsigned __int8 *result, uint64_t a2, uint64_t a3, int a4)
{
  v12[4] = *MEMORY[0x263EF8340];
  if (*((_DWORD *)result + 28) == 3)
  {
    unsigned __int8 v4 = result;
    unsigned __int8 v5 = atomic_load(result + 96);
    if (v5)
    {
      if (*((void *)result + 2))
      {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
        if (result)
        {
          __int16 v9 = *(_WORD *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 48))(a2, 0, 0);
          uint64_t v10 = *((void *)v4 + 2);
          uint64_t v11 = operator new(0x20uLL);
          *uint64_t v11 = &unk_26C6F54C8;
          v11[1] = v4;
          v11[2] = a3;
          *((_WORD *)v11 + 12) = v9;
          v12[3] = v11;
          sub_21620D4B8(v10, a2, 1, (uint64_t)v12, a4);
          return (unsigned __int8 *)sub_216198AB4(v12);
        }
      }
    }
  }
  return result;
}

void sub_21620D4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198AB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21620D4B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  v6[4] = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C6F5448;
  v6[1] = a4;
  v6[3] = v6;
  sub_216211898(a1, a2, a3, (uint64_t)v6, a5);
  return sub_216211814(v6);
}

void sub_21620D53C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216211814((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21620D550(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(result + 96));
  if (v5)
  {
    if (*(void *)(result + 16))
    {
      char v27 = 0;
      uint64_t v6 = *(void *)(result + 32);
      uint64_t v7 = *(void *)(result + 40);
      uint64_t v21 = result + 32;
      unint64_t v22 = v6 + 2;
      if (v7 - v6 >= 3)
      {
        while (1)
        {
          uint64_t v12 = sub_21620ED24(&v21);
          uint64_t v14 = v13;
          uint64_t result = sub_21620ED90(&v21);
          if (result) {
            break;
          }
LABEL_13:
          if (v22 >= *(void *)(v21 + 8)) {
            return result;
          }
        }
        unsigned int v15 = result;
        int v16 = 0;
        while (1)
        {
          sub_21620EDE0(&v21, v12, v14, (uint64_t)v24);
          uint64_t v17 = (a4 - v26) & ~((a4 - v26) >> 63);
          uint64_t v18 = v26 + a4;
          if (a3 < v26 + a4) {
            uint64_t v18 = a3;
          }
          uint64_t v19 = v18 - v17;
          uint64_t v20 = a2 + 2 * v17;
          if (!a2) {
            uint64_t v19 = 0;
          }
          v23[0] = v20;
          v23[1] = v19;
          uint64_t result = sub_21620EE48(v23, v25, v26, 0);
          if (result != -1)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, char *))(a5 + 16))(a5, v24, &v27);
            if (v27) {
              break;
            }
          }
          if (++v16 >= v15) {
            goto LABEL_13;
          }
        }
      }
    }
  }
  return result;
}

void sub_21620D68C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3
    && (unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 96)), (v6 & 1) != 0)
    && (uint64_t v7 = *(void (****)(void, uint64_t, uint64_t, unsigned int *))(a1 + 16)) != 0)
  {
    unsigned int v8 = 0;
    (**v7)(v7, a2, 2 * a3, &v8);
    sub_21620CCCC(a1, v8, (char **)a4);
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
}

void sub_21620D71C(const __CFString *a1@<X1>, UniChar **a2@<X8>)
{
  sub_2161E212C(a1, &v9);
  uint64_t v3 = v9;
  unsigned __int8 v4 = v10;
  if (v9 == v10) {
    goto LABEL_15;
  }
  char v5 = 0;
  unsigned __int8 v6 = v9;
  do
  {
    unsigned int v7 = *v6;
    if (v7 >= 0x41 && v7 <= 0x30F4 && (unsigned __int16)(v7 - 91) >= 0x3046u)
    {
      if (v7 <= 0x30A0)
      {
        if (v7 - 65 > 0x19)
        {
LABEL_11:
          char v5 = 1;
          goto LABEL_12;
        }
        __int16 v8 = 32;
      }
      else
      {
        __int16 v8 = -96;
      }
      *unsigned __int8 v6 = v8 + v7;
      goto LABEL_11;
    }
LABEL_12:
    ++v6;
  }
  while (v6 != v4);
  if (v5)
  {
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v11;
    return;
  }
LABEL_15:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v3)
  {
    uint64_t v10 = v3;
    operator delete(v3);
  }
}

void sub_21620D7EC(uint64_t a1, const __CFString *a2)
{
}

void sub_21620D90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_21620D944(uint64_t a1)
{
  sub_21620B850(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21620D980(uint64_t a1)
{
  sub_21620B850(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21620D9B8(void **a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21610CB04();
    }
    uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    unsigned __int8 v4 = (char *)sub_216178CAC(a2);
    char v5 = &v4[24 * v3];
    unsigned int v7 = &v4[24 * v6];
    __int16 v9 = (char *)*a1;
    __int16 v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *(_OWORD *)(v8 - 24);
        *((void *)v10 - 1) = *((void *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v8 -= 24;
      }
      while (v8 != v9);
      __int16 v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

char *sub_21620DAA8(uint64_t a1, __int16 a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 88);
  uint64_t v6 = *(char **)a1;
  char v5 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v12 = v5 - v6;
    if (v5 - v6 <= -3) {
      sub_21610CB04();
    }
    uint64_t v13 = v12 >> 1;
    unint64_t v14 = v8 - (void)v6;
    if (v14 <= (v12 >> 1) + 1) {
      unint64_t v15 = v13 + 1;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v16 = v15;
    }
    if (v16)
    {
      uint64_t v17 = (char *)sub_21610FD44(v7, v16);
      uint64_t v18 = *(char **)a1;
      char v5 = *(char **)(a1 + 8);
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = v6;
    }
    uint64_t v10 = &v17[2 * v13];
    uint64_t v19 = &v17[2 * v16];
    *(_WORD *)uint64_t v10 = 0;
    long long v11 = v10 + 2;
    while (v5 != v18)
    {
      __int16 v20 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v10 - 1) = v20;
      v10 -= 2;
    }
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v19;
    if (v18)
    {
      operator delete(v18);
      uint64_t v10 = *(char **)a1;
    }
  }
  else
  {
    *(_WORD *)char v5 = 0;
    uint64_t v10 = v6;
    long long v11 = v5 + 2;
  }
  uint64_t result = &v6[2 * v4];
  *(void *)(a1 + 8) = v11;
  uint64_t v22 = *(unsigned int *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v22 + 1;
  *(_WORD *)&v10[2 * v22] = a2;
  return result;
}

char *sub_21620DBA4(uint64_t a1, CFStringRef theString, const __CFString *a3, __int16 a4)
{
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v10 = *(void **)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = *(void *)(a1 + 24);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v12) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      unint64_t v16 = (unint64_t)sub_216178CAC(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (void *)(v16 + 24 * v13);
    unint64_t v19 = v16 + 24 * v17;
    *uint64_t v18 = 0;
    v18[1] = 0;
    void v18[2] = 0;
    long long v11 = v18 + 3;
    uint64_t v21 = *(char **)(a1 + 24);
    __int16 v20 = *(char **)(a1 + 32);
    if (v20 != v21)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *(v18 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v18 - 3) = v22;
        v18 -= 3;
        v20 -= 24;
      }
      while (v20 != v21);
      __int16 v20 = *(char **)(a1 + 24);
    }
    *(void *)(a1 + 24) = v18;
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    long long v11 = v10 + 3;
    v10[2] = 0;
  }
  *(void *)(a1 + 32) = v11;
  *((_DWORD *)v11 - 2) = *(_DWORD *)(a1 + 88);
  *(v11 - 2) = 2 * Length;
  sub_21620DAA8(a1, Length);
  *(void *)(*(void *)(a1 + 32) - 24) = sub_21620DDC0(a1, theString);
  *(void *)(a1 + 96) = sub_21620DAA8(a1, 1);
  __int16 v23 = CFStringGetLength(a3);
  sub_21620DAA8(a1, v23);
  sub_21620DDC0(a1, a3);

  return sub_21620DAA8(a1, a4);
}

char *sub_21620DD48(uint64_t a1, CFStringRef theString, __int16 a3)
{
  ++**(_WORD **)(a1 + 96);
  __int16 Length = CFStringGetLength(theString);
  sub_21620DAA8(a1, Length);
  sub_21620DDC0(a1, theString);

  return sub_21620DAA8(a1, a3);
}

uint64_t sub_21620DDC0(uint64_t a1, CFStringRef theString)
{
  uint64_t v4 = *(void *)a1 + 2 * *(unsigned int *)(a1 + 88);
  CFIndex Length = CFStringGetLength(theString);
  sub_216184BFC(a1, Length + ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1));
  v7.location = 0;
  v7.length = Length;
  CFStringGetCharacters(theString, v7, (UniChar *)(*(void *)a1 + 2 * *(unsigned int *)(a1 + 88)));
  *(_DWORD *)(a1 + 88) += Length;
  return v4;
}

void sub_21620DE44(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_2161868BC(v4, 0);
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_21620DECC(unint64_t a1)
{
  if (a1 >> 60) {
    sub_2160FFA74();
  }
  return operator new(16 * a1);
}

uint64_t sub_21620DF04(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_2161868BC((const void **)(i - 16), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21620DF58(unint64_t a1, const void **a2, uint64_t a3, char a4)
{
void sub_21620E7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, const void *a13)
{
}

void sub_21620E894(uint64_t a1, uint64_t a2)
{
  char v4 = *(const void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  uint64_t v6 = *(const void **)a2;
  *(void *)a2 = 0;
  sub_2161868BC((const void **)a1, v6);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_2161868BC((const void **)a2, v4);
  *(void *)(a2 + 8) = v5;
}

void sub_21620E8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = sub_21620B708(a2, a1);
  int v7 = sub_21620B708(a3, a2);
  if (v6)
  {
    if (v7)
    {
      uint64_t v8 = a1;
    }
    else
    {
      sub_21620E894(a1, a2);
      if (!sub_21620B708(a3, a2)) {
        return;
      }
      uint64_t v8 = a2;
    }
    uint64_t v9 = a3;
  }
  else
  {
    if (!v7) {
      return;
    }
    sub_21620E894(a2, a3);
    if (!sub_21620B708(a2, a1)) {
      return;
    }
    uint64_t v8 = a1;
    uint64_t v9 = a2;
  }

  sub_21620E894(v8, v9);
}

BOOL sub_21620E9B8(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (uint64_t)(a2 - 2);
      if (sub_21620B708((uint64_t)(a2 - 2), a1)) {
        sub_21620E894(a1, v6);
      }
      return 1;
    case 3:
      sub_21620E8EC(a1, a1 + 16, (uint64_t)(a2 - 2));
      return 1;
    case 4:
      sub_21620EBA8(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      sub_21620EC50(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2));
      return 1;
    default:
      uint64_t v7 = a1 + 32;
      sub_21620E8EC(a1, a1 + 16, a1 + 32);
      uint64_t v8 = (const void **)(a1 + 48);
      if ((const void **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (sub_21620B708((uint64_t)v8, v7))
    {
      uint64_t v11 = *v8;
      uint64_t v12 = v8[1];
      *uint64_t v8 = 0;
      uint64_t v17 = v11;
      uint64_t v18 = v12;
      uint64_t v13 = v9;
      while (1)
      {
        uint64_t v14 = a1 + v13;
        unint64_t v15 = *(const void **)(a1 + v13 + 32);
        *(void *)(a1 + v13 + 32) = 0;
        sub_2161868BC((const void **)(a1 + v13 + 48), v15);
        *(void *)(a1 + v13 + 56) = *(void *)(a1 + v13 + 40);
        if (v13 == -32) {
          break;
        }
        v13 -= 16;
        if ((sub_21620B708((uint64_t)&v17, v14 + 16) & 1) == 0)
        {
          uint64_t v16 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      sub_2161868BC((const void **)v16, v17);
      *(void *)(v16 + 8) = v18;
      if (++v10 == 8) {
        return v8 + 2 == a2;
      }
    }
    uint64_t v7 = (uint64_t)v8;
    v9 += 16;
    v8 += 2;
    if (v8 == a2) {
      return 1;
    }
  }
}

void sub_21620EB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_21620EBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_21620E8EC(a1, a2, a3);
  if (sub_21620B708(a4, a3))
  {
    sub_21620E894(a3, a4);
    if (sub_21620B708(a3, a2))
    {
      sub_21620E894(a2, a3);
      if (sub_21620B708(a2, a1))
      {
        sub_21620E894(a1, a2);
      }
    }
  }
}

void sub_21620EC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_21620EBA8(a1, a2, a3, a4);
  if (sub_21620B708(a5, a4))
  {
    sub_21620E894(a4, a5);
    if (sub_21620B708(a4, a3))
    {
      sub_21620E894(a3, a4);
      if (sub_21620B708(a3, a2))
      {
        sub_21620E894(a2, a3);
        if (sub_21620B708(a2, a1))
        {
          sub_21620E894(a1, a2);
        }
      }
    }
  }
}

uint64_t sub_21620ED24(void *a1)
{
  unsigned int v2 = sub_21620ED90(a1);
  uint64_t result = a1[1];
  unint64_t v4 = result + 2 * v2;
  if (v4 > *(void *)(*a1 + 8)) {
    __assert_rtn("readString", "DynamicDictionary.cpp", 296, "m_ptr + keyLen <= m_data.data() + m_data.size()");
  }
  a1[1] = v4;
  return result;
}

uint64_t sub_21620ED90(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)a1[1];
  if ((unint64_t)v1 >= *(void *)(*a1 + 8)) {
    __assert_rtn("readUniChar", "DynamicDictionary.cpp", 290, "m_ptr < m_data.data() + m_data.size()");
  }
  uint64_t v2 = *v1;
  a1[1] = v1 + 1;
  return v2;
}

uint64_t sub_21620EDE0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = sub_21620ED24(a1);
  *(void *)(a4 + 24) = v6;
  uint64_t result = sub_21620ED90(a1);
  *(_WORD *)(a4 + 32) = result;
  if (result)
  {
    uint64_t result = sub_21620ED90(a1);
    uint64_t v8 = a1[1];
    a1[1] = v8 + 8 * result;
    *(void *)(a4 + 4sub_2161868BC(&a9, 0) = v8;
    *(void *)(a4 + 48) = result;
  }
  return result;
}

uint64_t sub_21620EE48(void *a1, unsigned __int16 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[1];
  if (v4 < a4) {
    return -1;
  }
  if (a3)
  {
    uint64_t v5 = (unsigned __int16 *)(*a1 + 2 * a4);
    uint64_t v6 = *a1 + 2 * v4;
    for (uint64_t i = (v6 - (uint64_t)v5) >> 1; i >= a3; uint64_t i = (v6 - 2 - (uint64_t)v8) >> 1)
    {
      if (i - a3 == -1) {
        break;
      }
      uint64_t v10 = i + 1;
      uint64_t v8 = v5;
      while (*v5 != *a2)
      {
        ++v5;
        --v10;
        ++v8;
        if (a3 == v10) {
          goto LABEL_5;
        }
      }
      uint64_t v11 = 0;
      while (a2[v11] == v5[v11])
      {
        if (a3 == ++v11) {
          goto LABEL_6;
        }
      }
      ++v5;
    }
LABEL_5:
    uint64_t v8 = (unsigned __int16 *)v6;
    uint64_t v5 = (unsigned __int16 *)v6;
LABEL_6:
    if (v5 == (unsigned __int16 *)v6) {
      return -1;
    }
    else {
      return ((uint64_t)v8 - *a1) >> 1;
    }
  }
  return a4;
}

void *sub_21620EF18(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    sub_2160FFA74();
  }
  return operator new(56 * a1);
}

char *sub_21620EF64(char *result, __int16 *a2, __int16 *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21610FD04(result, a4);
    uint64_t v7 = (_WORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      __int16 v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_21620EFBC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21620EFD8(void *a1, uint64_t a2)
{
  _OWORD v4[4] = *MEMORY[0x263EF8340];
  *a1 = &unk_26C6F4DF0;
  a1[1] = a2;
  v4[0] = &unk_26C6F4E78;
  v4[3] = v4;
  sub_21620FBF8((uint64_t)(a1 + 2), (uint64_t)v4);
  sub_21620FC78(v4);
  return a1;
}

BOOL sub_21620F080(uint64_t a1, unsigned __int8 *a2, unsigned int a3, _DWORD *a4, uint8x8_t a5)
{
  int v6 = sub_21628D540(*(void *)(a1 + 8), a2, a3, a5);
  *a4 = v6;
  return v6 != 0;
}

void sub_21620F0B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 && (a3 & 1) == 0)
  {
    char v16 = 0;
    (*(void (**)(void ****__return_ptr))(*(void *)a1 + 24))(&v15);
    int v14 = 0;
    if (a3)
    {
      unint64_t v8 = 0;
      do
      {
        (*(void (**)(void ****__return_ptr, uint64_t, void ***, unint64_t, uint64_t))(*(void *)a1 + 40))(&v13, a1, v15, a2 + v8, 2);
        uint64_t v9 = v13;
        uint64_t v13 = 0;
        uint64_t v10 = v15;
        unint64_t v15 = v9;
        if (v10)
        {
          sub_21620FD54((uint64_t)&v15, v10);
          uint64_t v11 = v13;
          uint64_t v13 = 0;
          if (v11) {
            sub_21620FD54((uint64_t)&v13, v11);
          }
        }
        if (((*(uint64_t (**)(uint64_t, void ***))(*(void *)a1 + 32))(a1, v15) & 1) == 0) {
          break;
        }
        if ((*(unsigned int (**)(uint64_t, void ***, int *))(*(void *)a1 + 48))(a1, v15, &v14))
        {
          sub_21620FCFC(a4, (uint64_t)&v14, a2, v8 + 2);
          if (v16) {
            break;
          }
        }
        unint64_t v8 = (int)v8 + 2;
      }
      while (v8 < a3);
    }
    uint64_t v12 = v15;
    unint64_t v15 = 0;
    if (v12) {
      sub_21620FD54((uint64_t)&v15, v12);
    }
  }
}

void sub_21620F248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void ***a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    sub_21620FD54((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_21620F26C(uint64_t a1, void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  v18[4] = *MEMORY[0x263EF8340];
  if ((a3 & 1) == 0)
  {
    (*(void (**)(void ****__return_ptr))(*(void *)a1 + 24))(&v17);
    (*(void (**)(void *__return_ptr, uint64_t, void ***, void *, size_t))(*(void *)a1 + 40))(v18, a1, v17, a2, a3);
    uint64_t v10 = v17;
    uint64_t v17 = (void ***)v18[0];
    v18[0] = 0;
    if (v10)
    {
      sub_21620FD54((uint64_t)&v17, v10);
      uint64_t v11 = (void ***)v18[0];
      v18[0] = 0;
      if (v11) {
        sub_21620FD54((uint64_t)v18, v11);
      }
    }
    if ((*(uint64_t (**)(uint64_t, void ***))(*(void *)a1 + 32))(a1, v17))
    {
      sub_21612F5FC(__p, a2, a3);
      uint64_t v12 = v17;
      uint64_t v13 = operator new(0x28uLL);
      *uint64_t v13 = &unk_26C6F4EF8;
      v13[1] = __p;
      v13[2] = a2;
      v13[3] = a3;
      v13[4] = a4;
      v18[3] = v13;
      (*(void (**)(uint64_t, void ***, void *, uint64_t))(*(void *)a1 + 56))(a1, v12, v18, a5);
      sub_216198FB8(v18);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    int v14 = v17;
    uint64_t v17 = 0;
    if (v14) {
      sub_21620FD54((uint64_t)&v17, v14);
    }
  }
}

void sub_21620F444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void ***a16, uint64_t a17)
{
  sub_216198FB8(&a17);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = a16;
  a16 = 0;
  if (v18) {
    sub_21620FD54((uint64_t)&a16, v18);
  }
  _Unwind_Resume(a1);
}

void sub_21620F49C()
{
}

void sub_21620F528(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x60C405BB7FD7CLL);
  _Unwind_Resume(a1);
}

BOOL sub_21620F54C(uint64_t a1, _OWORD *a2)
{
  return *a2 != 0 && (**(unsigned char **)a2 & 3) != 0;
}

void sub_21620F570(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_2162100D0((uint64_t)&v12, a2);
  for (; a4; --a4)
  {
    uint64_t v6 = sub_21621AF08();
    (*(void (**)(void ***__return_ptr))(**(void **)(v6 + 8 * (*(_DWORD *)v12 & 3)) + 16))(&v10);
    sub_21621AB84((void ***)&v12, &v10);
    uint64_t v7 = v11;
    uint64_t v11 = 0;
    if (v7)
    {
      unint64_t v8 = sub_21620FE6C(v7);
      MEMORY[0x2166CA800](v8, 0x20C4093837F09);
    }
    uint64_t v9 = v10;
    uint64_t v10 = 0;
    if (v9) {
      MEMORY[0x2166CA800](v9, 0x1010C40E4C6A875);
    }
    if (v12 == 0 || (*(unsigned char *)v12 & 3) == 0) {
      sub_216210064();
    }
    ++a3;
  }
  operator new();
}

void sub_21620F6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21620FDCC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21620F728(void *a1, _DWORD **a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  if (result)
  {
    uint64_t v7 = sub_21621AF08();
    uint64_t v8 = a1[1];
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 8 * (**a2 & 3));
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v9 + 40))(v9, v8, a2);
    }
    else
    {
      int v10 = 0;
    }
    *a3 = v10;
    return v10 != 0;
  }
  return result;
}

void sub_21620F7D8(uint64_t a1, _DWORD **a2, uint64_t a3, int a4)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    if (a4)
    {
      if (a4 >= 0) {
        unint64_t v8 = 2 * a4;
      }
      else {
        unint64_t v8 = 0;
      }
      if (v8 >= 0x101)
      {
        uint64_t v9 = sub_2162D1CE4(0);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_2160F5000, v9, OS_LOG_TYPE_ERROR, "Search depth is beyond limit. May not return all expected results.", buf, 2u);
        }
      }
      int v10 = off_26B4ABC60;
      if ((*(unsigned char *)off_26B4ABC60(&off_26B4ABC60) & 1) == 0)
      {
        buf[0] = 0;
        uint64_t v13 = (void *)off_26B4ABC48(&off_26B4ABC48);
        sub_216210280(v13, 0x100uLL, buf);
        _tlv_atexit((void (__cdecl *)(void *))sub_2162101D8, v13);
        *(unsigned char *)v10(&off_26B4ABC6sub_2161868BC(&a9, 0) = 1;
      }
      *(void *)buf = 0;
      unint64_t v15 = buf;
      uint64_t v16 = 0x2000000000;
      char v17 = 0;
      sub_21621AF08();
      off_26B4ABC48(&off_26B4ABC48);
      uint64_t v12 = *(void *)(v11 + 8 * (**a2 & 3));
      (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
      _Block_object_dispose(buf, 8);
    }
    else
    {
      *(_DWORD *)buf = 0;
      char v18 = 0;
      if ((*(unsigned int (**)(uint64_t, _DWORD **, uint8_t *))(*(void *)a1 + 48))(a1, a2, buf)) {
        sub_21620FCFC(a3, (uint64_t)buf, 0, 0);
      }
    }
  }
}

void sub_21620FA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_21620FA60(void *a1)
{
  *a1 = &unk_26C6F4DF0;
  uint64_t v2 = a1 + 2;
  sub_216210300(a1 + 1, 0);
  sub_21620FC78(v2);
  return a1;
}

void sub_21620FAB8(void *a1)
{
  *a1 = &unk_26C6F4DF0;
  uint64_t v1 = a1 + 2;
  sub_216210300(a1 + 1, 0);
  sub_21620FC78(v1);

  JUMPOUT(0x2166CA800);
}

void sub_21620FB34()
{
}

void *sub_21620FB48()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C6F4E78;
  return result;
}

void sub_21620FB80(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6F4E78;
}

uint64_t sub_21620FBAC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F4ED8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21620FBEC()
{
  return &unk_26C6F4ED8;
}

uint64_t sub_21620FBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_21620FC78(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_21620FCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, a2, &v7, &v6);
}

void sub_21620FD54(uint64_t a1, void ***a2)
{
  if (a2)
  {
    sub_21620FE1C(a2 + 1, 0);
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      MEMORY[0x2166CA800](v3, 0x1010C40E4C6A875);
    }
    JUMPOUT(0x2166CA800);
  }
}

void ***sub_21620FDCC(void ***a1)
{
  sub_21620FE1C(a1 + 1, 0);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    MEMORY[0x2166CA800](v2, 0x1010C40E4C6A875);
  }
  return a1;
}

void **sub_21620FE1C(void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21620FE6C(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void **sub_21620FE6C(void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_216170B58(v2);
  }
  *a1 = 0;
  return a1;
}

void sub_21620FEA8()
{
}

__n128 sub_21620FEBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6F4EF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_21620FF10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F4EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21620FF48(uint64_t a1, uint64_t a2, const void **a3, size_t *a4)
{
  return sub_21620FF9C((std::string **)(a1 + 8), a2, a3, a4);
}

uint64_t sub_21620FF50(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F4F58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21620FF90()
{
  return &unk_26C6F4F58;
}

uint64_t sub_21620FF9C(std::string **a1, uint64_t a2, const void **a3, size_t *a4)
{
  size_t v6 = *a4;
  uint64_t v7 = a1[2];
  unint64_t v8 = (unint64_t)v7 + *a4;
  uint64_t v9 = *a1;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t size = v9->__r_.__value_.__l.__size_;
  }
  else {
    unint64_t size = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  }
  uint64_t v11 = *a3;
  if (size < v8)
  {
    std::string::resize(v9, (std::string::size_type)v7 + *a4, 0);
    uint64_t v9 = *a1;
    uint64_t v7 = a1[2];
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  memcpy((char *)v7 + (void)v9, v11, v6);
  uint64_t v12 = (uint64_t)a1[3];
  uint64_t v13 = *a1;
  if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
  }

  return sub_21620FCFC(v12, a2, (uint64_t)v13, v8);
}

void sub_216210064()
{
}

void sub_2162100AC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x60C405BB7FD7CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2162100D0(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  sub_21621AC58((void ***)a1, a2);
  return a1;
}

void sub_2162100FC(_Unwind_Exception *a1)
{
  sub_21620FE1C(v1 + 1, 0);
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    MEMORY[0x2166CA800](v3, 0x1010C40E4C6A875);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216210134@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797C510, memory_order_acquire) & 1) == 0)
  {
    int v3 = __cxa_guard_acquire(&qword_26797C510);
    uint64_t v1 = a1;
    if (v3)
    {
      qword_26797C500 = 0;
      *(void *)algn_26797C508 = 0;
      __cxa_atexit((void (*)(void *))sub_21620FDCC, &qword_26797C500, &dword_2160F5000);
      __cxa_guard_release(&qword_26797C510);
      uint64_t v1 = a1;
    }
  }

  return sub_2162100D0(v1, &qword_26797C500);
}

uint64_t sub_2162101D8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_21621020C(uint64_t a1, int a2, uint64_t a3, unsigned char *a4)
{
  int v10 = a2;
  size_t v6 = (uint64_t *)off_26B4ABC48();
  uint64_t result = sub_21620FCFC(v8, (uint64_t)&v10, *v6, v7);
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216210280(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_21610ED94(a1, a2);
    size_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_2162102E4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216210300(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)sub_216210330((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_216210330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_216210384(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 48))(*(void *)(a1 + 48));
}

uint64_t sub_2162103AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 8))();
}

uint64_t sub_2162103D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))();
}

uint64_t sub_2162103FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24))();
}

void *sub_216210424(void *a1)
{
  *a1 = &unk_26C6F4F78;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  *a1 = &unk_26C6F4DF0;
  sub_216210300(a1 + 1, 0);
  sub_21620FC78(a1 + 2);
  return a1;
}

void sub_2162104C8(void *a1)
{
  *a1 = &unk_26C6F4F78;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  *a1 = &unk_26C6F4DF0;
  sub_216210300(a1 + 1, 0);
  sub_21620FC78(a1 + 2);

  JUMPOUT(0x2166CA800);
}

void *sub_21621058C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21621162C(a1, a2, a3, 1u, 0);
}

void *sub_216210598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2162105DC(a1, a2, a3, 1u, 0);
}

void *sub_2162105A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21621162C(a1, a2, a3, 0, 0);
}

void *sub_2162105B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2162105DC(a1, a2, a3, 0, 0);
}

void *sub_2162105BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_21620D4B8(a1, a2, 0, a3, a4);
}

void *sub_2162105CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_216211898(a1, a2, 0, a3, a4);
}

void *sub_2162105DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  v23[4] = *MEMORY[0x263EF8340];
  int v10 = off_26B4ABC90;
  if ((*(unsigned char *)off_26B4ABC90(&off_26B4ABC90) & 1) == 0)
  {
    unint64_t v19 = (void *)off_26B4ABC78(&off_26B4ABC78);
    sub_216210E8C(v19, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210850, v19);
    *(unsigned char *)v10(&off_26B4ABC9sub_2161868BC(&a9, 0) = 1;
  }
  uint64_t v11 = off_26B4ABCC0;
  if ((*(unsigned char *)off_26B4ABCC0(&off_26B4ABCC0) & 1) == 0)
  {
    char v20 = (void *)off_26B4ABCA8(&off_26B4ABCA8);
    sub_216210F04(v20, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210884, v20);
    *(unsigned char *)v11(&off_26B4ABCCsub_2161868BC(&a9, 0) = 1;
  }
  char v22 = 0;
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = &unk_26C6F50C8;
  v12[1] = a1;
  uint64_t v12[2] = a3;
  *((_DWORD *)v12 + 6) = a5;
  v23[3] = v12;
  (*(void (**)(void ****__return_ptr, uint64_t))(*(void *)a1 + 24))(&v21, a1);
  off_26B4ABC78(&off_26B4ABC78);
  uint64_t v13 = (uint64_t *)off_26B4ABCA8(&off_26B4ABCA8);
  sub_2162108B8(a1, a2, (uint64_t)v23, v14, a4, 0, 0, &v22, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  char v17 = v21;
  unint64_t v21 = 0;
  if (v17) {
    sub_21620FD54((uint64_t)&v21, v17);
  }
  return sub_2162115A8(v23);
}

void sub_216210820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void ***);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v11 = v12;
  uint64_t v12 = 0;
  if (v11) {
    sub_21620FD54((uint64_t)va, v11);
  }
  sub_2162115A8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216210850(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_216210884(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2162108B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned __int8 a7, unsigned char *a8, float a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  uint64_t v18 = a13;
  uint64_t v17 = a14;
  uint64_t v20 = a10;
  uint64_t v19 = a11;
  v60[4] = *MEMORY[0x263EF8340];
  unsigned __int8 v59 = a7;
  if (*a8) {
    return;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), a4) & 1) == 0) {
    __assert_rtn("ambiguousDfsTraverse", "AmbiguousTrieAdapter.hpp", 137, "m_trie->isValid(curCursor)");
  }
  unint64_t v27 = a12;
  uint64_t v50 = a1;
  if (a5 && (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) != v27) {
    goto LABEL_10;
  }
  LODWORD(v58) = 0;
  if ((a7 & 1) == 0)
  {
    if (!(*(unsigned int (**)(void, uint64_t, unint64_t *))(**(void **)(a1 + 48) + 48))(*(void *)(a1 + 48), a4, &v58))goto LABEL_9; {
    uint64_t v20 = a10;
    }
    uint64_t v19 = a11;
    uint64_t v18 = a13;
    uint64_t v17 = a14;
  }
  sub_216210F7C(a3, a4, v20, 2 * v19, v18, v17, v27, (uint64_t)a8, a9);
LABEL_9:
  if (*a8) {
    return;
  }
LABEL_10:
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) <= v27) {
    return;
  }
  unint64_t v54 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 16))(a2, v27);
  unint64_t v58 = 0;
  if (!v54) {
    return;
  }
  unint64_t v28 = 0;
  HIDWORD(v49) = a17;
  uint64_t v29 = a15;
  uint64_t v30 = a16;
  double v31 = a9;
  while (1)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 72))(a2, v29, v30, v27, v28))goto LABEL_30; {
    double v57 = 0.0;
    }
    double v57 = (*(double (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 32))(a2, v27, v58)
        + v31;
    unint64_t v56 = 0;
    unint64_t v56 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 40))(a2, v27, v58)
        + v27;
    uint64_t v33 = (__int16 *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 48))(a2, v27, v58);
    uint64_t v34 = v32;
    unint64_t v35 = v56;
    if (v56 == v27 && (v49 & 0x100000000) != 0) {
      goto LABEL_30;
    }
    if (v32) {
      break;
    }
    float v47 = v57;
    LOBYTE(v49) = v56 == v27;
    sub_2162108B8(v50, a2, a3, a4, a5, a6, v59, a8, v47, a10, a11, v56, a13, a14, v29, v30, v49);
LABEL_30:
    unint64_t v28 = v58 + 1;
    unint64_t v58 = v28;
    if (v28 >= v54) {
      return;
    }
  }
  (*(void (**)(void ****__return_ptr))(**(void **)(v50 + 48) + 40))(&v55);
  if (!(*(unsigned int (**)(void, void ***))(**(void **)(v50 + 48) + 32))(*(void *)(v50 + 48), v55)) {
    goto LABEL_23;
  }
  uint64_t v36 = a10;
  uint64_t v37 = a11;
  uint64_t v38 = 2 * a11;
  uint64_t v39 = v34;
  do
  {
    __int16 v40 = *v33++;
    *(_WORD *)(v36 + v38) = v40;
    v38 += 2;
    --v39;
  }
  while (v39);
  uint64_t v41 = a13;
  if (a13)
  {
    *(void *)(a13 + 8 * a14) = v58;
    uint64_t v37 = a11;
  }
  float v42 = v57;
  LOBYTE(v49) = v35 == v27;
  sub_2162108B8(v50, a2, a3, v55, a5, a6, v59, a8, v42, v36, v37 + v34, v56, v41, a14 + 1, v27, v58, v49);
  if (!*a8)
  {
LABEL_23:
    int64_t v43 = v55;
    unint64_t v55 = 0;
    if (v43) {
      sub_21620FD54((uint64_t)&v55, v43);
    }
    if (a6)
    {
      unint64_t v44 = v56;
      if (v44 == (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2))
      {
        if ((*(unsigned int (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 56))(a2, v27, v58))
        {
          unint64_t v45 = v58;
          unint64_t v46 = operator new(0x68uLL);
          void *v46 = &unk_26C6F5038;
          v46[1] = v50;
          v46[2] = a4;
          v46[3] = &a10;
          v46[4] = &a11;
          v46[5] = &a13;
          v46[6] = &a14;
          v46[7] = &v58;
          v46[8] = &v59;
          v46[9] = a3;
          v46[10] = &v57;
          v46[11] = &v56;
          v46[12] = a8;
          v60[3] = v46;
          (*(void (**)(uint64_t, unint64_t, unint64_t, void *))(*(void *)a2 + 64))(a2, v27, v45, v60);
          sub_2162112FC(v60);
        }
      }
    }
    goto LABEL_30;
  }
  uint8x8_t v48 = v55;
  unint64_t v55 = 0;
  if (v48) {
    sub_21620FD54((uint64_t)&v55, v48);
  }
}

void sub_216210E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

void *sub_216210E8C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21610FD04(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_216210EE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216210F04(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112B2C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216210F60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216210F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  float v16 = a9;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v12 = a6;
  uint64_t v13 = a5;
  uint64_t v11 = a7;
  uint64_t v9 = *(void *)(a1 + 24);
  if (!v9) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)v9 + 48))(v9, a2, &v16, &v15, &v14, &v13, &v12, &v11, a8);
}

void sub_216210FF8()
{
}

__n128 sub_21621100C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_26C6F5038;
  *(_OWORD *)(v2 + 4sub_2161868BC(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_216211080(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5038;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 4sub_2161868BC(&a9, 0) = result;
  return result;
}

void sub_2162110D8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
}

uint64_t sub_2162110EC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F50A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21621112C()
{
  return &unk_26C6F50A8;
}

void sub_216211138(uint64_t *a1, __int16 *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v8 = *a1;
  (*(void (**)(void ****__return_ptr))(**(void **)(*a1 + 48) + 40))(&v16);
  if (!(*(unsigned int (**)(void, void ***))(**(void **)(v8 + 48) + 32))(*(void *)(v8 + 48), v16)) {
    goto LABEL_13;
  }
  if (a3)
  {
    uint64_t v9 = (_WORD *)(*(void *)a1[2] + 2 * *(void *)a1[3]);
    uint64_t v10 = a3;
    do
    {
      __int16 v11 = *a2++;
      *v9++ = v11;
      --v10;
    }
    while (v10);
  }
  uint64_t v12 = *(void *)a1[4];
  if (v12) {
    *(void *)(v12 + 8 * *(void *)a1[5]) = *(void *)a1[6];
  }
  int v15 = 0;
  if (!*(unsigned char *)a1[7])
  {
    if (!(*(unsigned int (**)(void, void ***, int *))(**(void **)(v8 + 48) + 48))(*(void *)(v8 + 48), v16, &v15))goto LABEL_11; {
    uint64_t v12 = *(void *)a1[4];
    }
  }
  float v13 = *(double *)a1[9];
  sub_216210F7C(a1[8], (uint64_t)v16, *(void *)a1[2], 2 * (*(void *)a1[3] + a3), v12, *(void *)a1[5] + 1, *(void *)a1[10], a1[11], v13);
LABEL_11:
  if (*(unsigned char *)a1[11]) {
    *a4 = 1;
  }
LABEL_13:
  uint64_t v14 = v16;
  float v16 = 0;
  if (v14) {
    sub_21620FD54((uint64_t)&v16, v14);
  }
}

void sub_2162112D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void ***a10)
{
  __int16 v11 = a10;
  a10 = 0;
  if (v11) {
    sub_21620FD54((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162112FC(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216211384()
{
}

__n128 sub_216211398(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_26C6F50C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2162113EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F50C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216211424(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  return sub_216211480((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_216211434(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5128)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216211474()
{
  return &unk_26C6F5128;
}

uint64_t sub_216211480(uint64_t *a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v9 = *a3;
  uint64_t v10 = *a4;
  uint64_t v11 = *a5;
  uint64_t v12 = *a6;
  uint64_t v13 = *a7;
  uint64_t v14 = *a8;
  uint64_t v15 = *a1;
  v17[0] = 0;
  v17[1] = v9;
  (*(void (**)(void, uint64_t, _DWORD *))(**(void **)(v15 + 48) + 48))(*(void *)(v15 + 48), a2, v17);
  return sub_21621153C(a1[1], (uint64_t)v17, v10, v11, v12, v13, v14 - *((int *)a1 + 4));
}

uint64_t sub_21621153C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a4;
  uint64_t v13 = a3;
  uint64_t v10 = a6;
  uint64_t v11 = a5;
  uint64_t v9 = a7;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v7 + 48))(v7, a2, &v13, &v12, &v11, &v10, &v9);
}

void *sub_2162115A8(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_21621162C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  v6[4] = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C6F5148;
  v6[1] = a3;
  v6[3] = v6;
  sub_2162105DC(a1, a2, (uint64_t)v6, a4, a5);
  return sub_216211814(v6);
}

void sub_2162116B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216211814((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2162116C8()
{
}

void *sub_2162116DC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C6F5148;
  result[1] = v3;
  return result;
}

uint64_t sub_216211724(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F5148;
  a2[1] = v2;
  return result;
}

uint64_t sub_216211750(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_2162117B4(*(void *)(a1 + 8), a2, *a3, *a4, *a7);
}

uint64_t sub_216211768(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F51A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162117A8()
{
  return &unk_26C6F51A8;
}

uint64_t sub_2162117B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a3;
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v5 + 48))(v5, a2, &v9, &v8, &v7);
}

void *sub_216211814(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216211898(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  v23[4] = *MEMORY[0x263EF8340];
  uint64_t v10 = off_26B4ABCF0;
  if ((*(unsigned char *)off_26B4ABCF0(&off_26B4ABCF0) & 1) == 0)
  {
    uint64_t v19 = (void *)off_26B4ABCD8(&off_26B4ABCD8);
    sub_216210E8C(v19, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210850, v19);
    *(unsigned char *)v10(&off_26B4ABCFsub_2161868BC(&a9, 0) = 1;
  }
  uint64_t v11 = off_26B4ABD20;
  if ((*(unsigned char *)off_26B4ABD20(&off_26B4ABD20) & 1) == 0)
  {
    uint64_t v20 = (void *)off_26B4ABD08(&off_26B4ABD08);
    sub_216210F04(v20, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210884, v20);
    *(unsigned char *)v11(&off_26B4ABD2sub_2161868BC(&a9, 0) = 1;
  }
  char v22 = 0;
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = &unk_26C6F51C8;
  v12[1] = a1;
  uint64_t v12[2] = a4;
  *((_DWORD *)v12 + 6) = a3;
  *((_DWORD *)v12 + 7) = a5;
  v23[3] = v12;
  (*(void (**)(void ****__return_ptr, uint64_t))(*(void *)a1 + 24))(&v21, a1);
  off_26B4ABCD8(&off_26B4ABCD8);
  uint64_t v13 = (uint64_t *)off_26B4ABD08(&off_26B4ABD08);
  sub_2162108B8(a1, a2, (uint64_t)v23, v14, 1u, 1u, 1u, &v22, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  uint64_t v17 = v21;
  unint64_t v21 = 0;
  if (v17) {
    sub_21620FD54((uint64_t)&v21, v17);
  }
  return sub_2162115A8(v23);
}

void sub_216211ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void ***);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v11 = v12;
  uint64_t v12 = 0;
  if (v11) {
    sub_21620FD54((uint64_t)va, v11);
  }
  sub_2162115A8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_216211B10()
{
}

__n128 sub_216211B24(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F51C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216211B78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F51C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216211BB0(uint64_t a1, uint64_t a2, float *a3, const void **a4, size_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
}

uint64_t sub_216211BD8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F52A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216211C18()
{
  return &unk_26C6F52A8;
}

void sub_216211C24(uint64_t *a1, uint64_t a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  v26[4] = *MEMORY[0x263EF8340];
  float v25 = a9;
  uint64_t v23 = a5;
  size_t v24 = a4;
  uint64_t v21 = a7;
  uint64_t v22 = a6;
  uint64_t v14 = *a1;
  if (((*(uint64_t (**)(void))(**(void **)(*a1 + 48) + 32))(*(void *)(*a1 + 48)) & 1) == 0) {
    __assert_rtn("operator()", "AmbiguousTrieAdapter.hpp", 44, "m_trie->isValid(cursor)");
  }
  __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  sub_216211DEC(&__p, a3, (uint64_t)a3 + a4, a4);
  uint64_t v15 = a1[1];
  uint64_t v16 = *(void *)(v14 + 48);
  uint64_t v17 = operator new(0x50uLL);
  void *v17 = &unk_26C6F5238;
  v17[1] = &v24;
  _DWORD v17[2] = &__p;
  v17[3] = v15;
  v17[4] = &v25;
  void v17[5] = &v23;
  v17[6] = &v22;
  v17[7] = &v21;
  v17[8] = a1 + 2;
  v17[9] = a8;
  v26[3] = v17;
  (*(void (**)(uint64_t, uint64_t, void *, void))(*(void *)v16 + 56))(v16, a2, v26, *((unsigned int *)a1 + 5));
  sub_216198FB8(v26);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
}

void sub_216211DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_216211DEC(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    size_t v6 = result;
    __n128 result = sub_21610ED94(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216211E4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216211E6C()
{
}

__n128 sub_216211E80(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_26C6F5238;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4sub_2161868BC(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216211EEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5238;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 4sub_2161868BC(&a9, 0) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_216211F3C(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  return sub_216211F90(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_216211F44(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5298)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216211F84()
{
  return &unk_26C6F5298;
}

uint64_t sub_216211F90(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v11 = *(void **)a1;
  uint64_t v10 = *(unint64_t **)(a1 + 8);
  unint64_t v12 = *v11 + *a4;
  unint64_t v13 = v10[1] - *v10;
  if (v12 > v13) {
    sub_216179360(v10, v12 - v13);
  }
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
      *(unsigned char *)(**(void **)(a1 + 8) + **(void **)a1 + i) = *(unsigned char *)(v8 + i);
  }
  uint64_t v15 = *(uint64_t **)(a1 + 32);
  int v16 = **(_DWORD **)(a1 + 24);
  v18[0] = *a2;
  v18[1] = v16;
  uint64_t result = sub_21621153C(*(void *)(a1 + 16), (uint64_t)v18, **(void **)(a1 + 8), v12, *v15, **(void **)(a1 + 40), **(void **)(a1 + 48) - **(int **)(a1 + 56));
  **(unsigned char **)(a1 + 64) = (**(unsigned __int8 **)(a1 + 64) | *a5) != 0;
  return result;
}

void sub_21621208C()
{
}

__n128 sub_2162120A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6F52C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2162120EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F52C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21621211C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  sub_21620CCCC(*(void *)(a1 + 8), *(_DWORD *)a2, &v13);
  uint64_t v9 = v13;
  uint64_t v10 = v14;
  if (v13 != v14)
  {
    uint64_t v11 = v13;
    do
    {
      sub_21621223C(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v11, (uint64_t)a6, *(float *)(a2 + 4));
      v11 += 56;
      if (*a6) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v11 == v10;
      }
    }
    while (!v12);
  }
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_2162121D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162121F0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5328)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216212230()
{
  return &unk_26C6F5328;
}

uint64_t sub_21621223C(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  float v5 = a4;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float *, uint64_t))(*(void *)a1 + 48))(a1, a2, &v5, a3);
}

void sub_216212294()
{
}

__n128 sub_2162122A8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F5348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2162122FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216212334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  sub_21620CCCC(*(void *)(a1 + 8), *(_DWORD *)a2, &v12);
  uint64_t v9 = (unsigned __int16 *)v12;
  uint64_t v10 = (unsigned __int16 *)v13;
  if (v12 != v13)
  {
    do
    {
      while (v9[16] != *(unsigned __int16 *)(a1 + 24))
      {
        v9 += 28;
        if (v9 == v10) {
          goto LABEL_10;
        }
      }
      sub_21621223C(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v9, (uint64_t)a6, *(float *)(a2 + 4));
      v9 += 28;
      if (*a6) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v9 == v10;
      }
    }
    while (!v11);
LABEL_10:
    uint64_t v9 = (unsigned __int16 *)v12;
  }
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_216212410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216212428(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F53A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216212468()
{
  return &unk_26C6F53A8;
}

void sub_216212478()
{
}

__n128 sub_21621248C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6C86F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2162124D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C86F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216212508(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  sub_21620CCCC(*(void *)(a1 + 8), *a2, &v11);
  uint64_t v7 = v11;
  uint64_t v8 = v12;
  if (v11 != v12)
  {
    uint64_t v9 = v11;
    do
    {
      (*(void (**)(void))(**(void **)(a1 + 16) + 16))();
      v9 += 56;
      if (*a5) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v9 == v8;
      }
    }
    while (!v10);
  }
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_2162125C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162125DC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21621261C()
{
  return &unk_26C6BCA30;
}

void sub_21621262C()
{
}

__n128 sub_216212640(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6F53C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21621268C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F53C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2162126BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  sub_21620CCCC(*(void *)(a1 + 8), *(_DWORD *)a2, &v13);
  uint64_t v9 = v13;
  BOOL v10 = v14;
  if (v13 != v14)
  {
    BOOL v11 = v13;
    do
    {
      sub_21621223C(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v11, (uint64_t)a6, *(float *)(a2 + 4));
      v11 += 56;
      if (*a6) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v11 == v10;
      }
    }
    while (!v12);
  }
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_216212778(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216212790(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5428)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162127D0()
{
  return &unk_26C6F5428;
}

void sub_2162127E0()
{
}

void *sub_2162127F4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C6F5448;
  result[1] = v3;
  return result;
}

uint64_t sub_21621283C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F5448;
  a2[1] = v2;
  return result;
}

uint64_t sub_216212868(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_2162117B4(*(void *)(a1 + 8), a2, *a3, *a4, *a7);
}

uint64_t sub_216212880(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F54A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162128C0()
{
  return &unk_26C6F54A8;
}

void sub_2162128D0()
{
}

__n128 sub_2162128E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F54C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216212938(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F54C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216212970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  sub_21620CCCC(*(void *)(a1 + 8), *(_DWORD *)a2, &v12);
  uint64_t v9 = (unsigned __int16 *)v12;
  BOOL v10 = (unsigned __int16 *)v13;
  if (v12 != v13)
  {
    do
    {
      while (v9[16] != *(unsigned __int16 *)(a1 + 24))
      {
        v9 += 28;
        if (v9 == v10) {
          goto LABEL_10;
        }
      }
      sub_21621223C(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v9, (uint64_t)a6, *(float *)(a2 + 4));
      v9 += 28;
      if (*a6) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v9 == v10;
      }
    }
    while (!v11);
LABEL_10:
    uint64_t v9 = (unsigned __int16 *)v12;
  }
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_216212A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216212A64(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5528)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216212AA4()
{
  return &unk_26C6F5528;
}

uint64_t sub_216212AB0(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6)
{
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = a5;
  *(_WORD *)(a1 + 34) = a6;
  CFIndex Length = CFStringGetLength(theString);
  *(void *)(a1 + 8) = Length;
  uint64_t v9 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
  *(void *)a1 = v9;
  v11.length = *(void *)(a1 + 8);
  v11.location = 0;
  CFStringGetCharacters(theString, v11, v9);
  return a1;
}

uint64_t sub_216212B20(__int16 a1, int a2, int a3)
{
  if (a3) {
    uint64_t result = 512;
  }
  else {
    uint64_t result = 1;
  }
  if ((a1 & 0x800) != 0)
  {
    int v5 = 290;
    return result | v5;
  }
  else
  {
    switch(a2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 5:
      case 12:
        int v5 = 34;
        return result | v5;
      case 4:
        int v5 = 66;
        return result | v5;
      case 6:
        int v5 = 130;
        return result | v5;
      case 7:
      case 15:
        int v5 = 8226;
        return result | v5;
      case 9:
        uint64_t result = result | 4;
        break;
      case 10:
        uint64_t result = result | 8;
        break;
      case 11:
        uint64_t result = result | 0x10;
        break;
      case 14:
        uint64_t result = result | 0x800;
        break;
      case 16:
        int v5 = 16418;
        return result | v5;
      case 17:
        uint64_t result = result | 0x200000;
        break;
      default:
        return result;
    }
  }
  return result;
}

unint64_t sub_216212C04(unsigned int *a1, unsigned __int16 *a2, unint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, uint8x8_t a9)
{
  int v12 = a3;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v23 = a5;
  unint64_t v22 = 0;
  v17[0] = v24;
  v17[1] = v24;
  if (a3) {
    a8 = 0;
  }
  int v18 = a8;
  if (a8) {
    sub_216208C30(v21, a2, a3, (uint64_t)&v19, 256, &v20);
  }
  sub_216212CF8((uint64_t)a1, *a1, &v22, a2, v12, a4, &v23, a6, a9, a7, 0, 0, (uint64_t)v17);
  return v22;
}

uint64_t sub_216212CF8(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned char *a4, int a5, unsigned int a6, void *a7, unint64_t a8, uint8x8_t a9, uint64_t a10, int a11, int a12, uint64_t a13)
{
  int v19 = a2 & 3;
  if (v19 == 1)
  {
    unint64_t v22 = (unsigned int *)(*(void *)(a1 + 16) + (a2 - 1));
    if (!a5)
    {
LABEL_31:
      if (v22[1]
        && (!*(_DWORD *)(a13 + 16)
         || sub_216208C98(a13 + 544, a13 + 20, *(void *)(a13 + 536), (_DWORD *)(a13 + 1148), *(void *)a13, *(void *)(a13 + 8) - *(void *)a13)))
      {
        if (*a7)
        {
          --*a7;
        }
        else if (a8)
        {
          unsigned int v67 = v22[1];
          unint64_t v68 = *a3;
          unint64_t v69 = *a3 + 1;
          *a3 = v69;
          *(_DWORD *)(a10 + 24 * v68 + 8) = v67;
          if (v69 >= a8) {
            return 1;
          }
        }
        else
        {
          ++*a3;
        }
      }
      goto LABEL_36;
    }
    if (a5 == 2 && a6 == 2)
    {
      int v23 = *(unsigned __int16 *)a4;
    }
    else
    {
      if (a5 != 1 || a6 != 1) {
        goto LABEL_36;
      }
      int v23 = *a4;
    }
    if (v23 == 42) {
      goto LABEL_31;
    }
LABEL_36:
    if (a12) {
      unsigned int v28 = a6;
    }
    else {
      unsigned int v28 = 0;
    }
    if (a12) {
      uint64_t v29 = -(uint64_t)(int)a6;
    }
    else {
      uint64_t v29 = 0;
    }
    unsigned int v30 = v28 + a5;
    if (!(v28 + a5)) {
      return 0;
    }
    double v31 = (unsigned __int8 *)(v22 + 2);
    unint64_t v32 = (unint64_t)v22 + *v22 + 4;
    if ((unint64_t)v31 >= v32) {
      return 0;
    }
    uint64_t v71 = a3;
    uint64_t v33 = &a4[v29];
    unint64_t v72 = a8;
    uint64_t v34 = &v33[v30];
    while (1)
    {
      unint64_t v35 = *(void **)(a13 + 8);
      uint64_t v37 = v31 + 1;
      size_t v36 = *v31;
      if (a6 == 2)
      {
        if (a11)
        {
          if ((v36 & 1) == 0) {
            goto LABEL_97;
          }
          uint8x8_t v48 = (unsigned __int16 *)(v31 + 2);
          uint64_t v49 = (v36 - 1) >> 1;
          uint64_t v50 = v33;
          uint64_t v51 = v30 >> 1;
        }
        else if (v30)
        {
          if ((v36 & 1) == 0 || *v33 != *v37) {
            goto LABEL_97;
          }
          if (v30 == 1 && v36 == 1) {
            goto LABEL_89;
          }
          uint8x8_t v48 = (unsigned __int16 *)(v31 + 2);
          uint64_t v49 = (v36 - 1) >> 1;
          uint64_t v51 = (v30 - 1) >> 1;
          uint64_t v50 = v33 + 1;
        }
        else
        {
          if (v36) {
            goto LABEL_97;
          }
          uint64_t v49 = v36 >> 1;
          uint64_t v50 = v33;
          uint64_t v51 = v30 >> 1;
          uint8x8_t v48 = (unsigned __int16 *)(v31 + 1);
        }
        if (sub_216213FEC(v50, v51, v48, v49)) {
          goto LABEL_89;
        }
      }
      else if (a6 == 1)
      {
        uint64_t v38 = &v37[v36];
        uint64_t v39 = v33;
        __int16 v40 = v37;
        if (v36)
        {
          __int16 v40 = v37;
          uint64_t v39 = v33;
          do
          {
            int v41 = *v39;
            if (v41 == 42) {
              break;
            }
            if (v41 != 63 && v41 != *v40) {
              goto LABEL_97;
            }
            ++v39;
            ++v40;
          }
          while (v40 < v38);
        }
        if (v40 < v38)
        {
          int64_t v43 = 0;
          unint64_t v44 = 0;
          do
          {
            if (v39 >= v34) {
              goto LABEL_68;
            }
            int v45 = *v39;
            if (v45 == 42)
            {
              if (++v39 == v34) {
                goto LABEL_89;
              }
              unint64_t v44 = v40 + 1;
              int64_t v43 = v39;
              continue;
            }
            if (v45 == 63 || v45 == *v40)
            {
              ++v39;
              ++v40;
            }
            else
            {
LABEL_68:
              __int16 v40 = v44++;
              uint64_t v39 = v43;
            }
          }
          while (v40 < v38);
        }
        if (v39 < v34)
        {
          int64_t v47 = v34 - v39;
          while (*v39 == 42)
          {
            ++v39;
            if (!--v47)
            {
              uint64_t v39 = &v33[v30];
              break;
            }
          }
        }
        if (v39 == v34)
        {
LABEL_89:
          memcpy(v35, v37, v36);
          if (!*(_DWORD *)(a13 + 16)
            || sub_216208C98(a13 + 544, a13 + 20, *(void *)(a13 + 536), (_DWORD *)(a13 + 1148), *(void *)a13, (unint64_t)v35 + v36 - *(void *)a13))
          {
            if (*a7)
            {
              --*a7;
            }
            else if (v72)
            {
              int v52 = *(_DWORD *)&v37[v36];
              unint64_t v53 = *v71;
              unint64_t v54 = *v71 + 1;
              unint64_t *v71 = v54;
              *(_DWORD *)(a10 + 24 * v53 + 8) = v52;
              if (v54 >= v72) {
                return 1;
              }
            }
            else
            {
              ++*v71;
            }
          }
        }
      }
LABEL_97:
      double v31 = &v37[v36 + 4];
      if ((unint64_t)v31 >= v32) {
        return 0;
      }
    }
  }
  if (v19 == 2)
  {
    uint64_t v24 = *(void *)(a1 + 8);
    uint64_t v25 = (a2 - 2);
    uint64_t v20 = (int *)(v24 + v25);
    if (!a5) {
      goto LABEL_18;
    }
    if (a5 == 1 || a6 != 2)
    {
      int v26 = *a4;
      if (a6 != 1) {
        goto LABEL_109;
      }
    }
    else
    {
      if (a5)
      {
        LOBYTE(v26) = *a4;
        goto LABEL_109;
      }
      int v26 = *(unsigned __int16 *)a4;
    }
    if (v26 == 42) {
      goto LABEL_102;
    }
    if (2 * (v26 == 63)) {
      return sub_2162139E4(a1, a2, (uint64_t)a3, a9, (uint64_t)&a4[a6], a5 - a6, a6, (uint64_t)a7, a8, a10, a13);
    }
LABEL_109:
    **(unsigned char **)(a13 + 8) = v26;
    uint64_t v56 = *(void *)(a13 + 8) + 1;
    *(void *)(a13 + 8) = v56;
    unint64_t v57 = *a4;
    uint64_t v58 = v57 >> 5;
    unsigned int v59 = v20[(v57 >> 5) + 1];
    if ((v59 >> v57))
    {
      if (v57 >= 0x20)
      {
        int v60 = 0;
        if (v58 <= 1) {
          uint64_t v58 = 1;
        }
        else {
          uint64_t v58 = v58;
        }
        CFIndex v64 = (unsigned int *)(v25 + v24 + 4);
        do
        {
          unsigned int v65 = *v64++;
          a9 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
          a9.i16[0] = vaddlv_u8(a9);
          v60 += a9.i32[0];
          --v58;
        }
        while (v58);
      }
      else
      {
        int v60 = 0;
      }
      a9.i32[0] = v59 & ~(-1 << (v57 & 0x1F));
      uint8x8_t v66 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
      v66.i16[0] = vaddlv_u8(v66);
      if (sub_216212CF8(a1, v20[v60 + v66.i32[0] + 10], a3)) {
        return 1;
      }
      uint64_t v56 = *(void *)(a13 + 8);
    }
    uint64_t result = 0;
    uint64_t v55 = v56 - 1;
    goto LABEL_127;
  }
  if (v19 != 3) {
    return 0;
  }
  uint64_t v20 = (int *)(*(void *)(a1 + 8) + (a2 - 3));
  if (a5)
  {
    if (a5 == 1 || a6 != 2)
    {
      int v21 = *a4;
      if (a6 != 1) {
        goto LABEL_104;
      }
    }
    else
    {
      if (a5)
      {
        LOBYTE(v21) = *a4;
        goto LABEL_104;
      }
      int v21 = *(unsigned __int16 *)a4;
    }
    if (v21 != 42)
    {
      if (!(2 * (v21 == 63)))
      {
LABEL_104:
        *(unsigned char *)(*(void *)(a13 + 8))++ = v21;
        uint64_t result = sub_216212CF8(a1, v20[*a4 + 1], a3);
        if (!result)
        {
          uint64_t v55 = *(void *)(a13 + 8) - 1;
LABEL_127:
          *(void *)(a13 + 8) = v55;
          return result;
        }
        return 1;
      }
      return sub_2162139E4(a1, a2, (uint64_t)a3, a9, (uint64_t)&a4[a6], a5 - a6, a6, (uint64_t)a7, a8, a10, a13);
    }
LABEL_102:
    LODWORD(v7sub_2161868BC(&a9, 0) = 0;
    return sub_216213388(a1, a2, (uint64_t)a3, (uint64_t)&a4[a6], a5 - a6, a6, (uint64_t)a7, a8, a10, v70, a13);
  }
LABEL_18:
  if (!*v20) {
    return 0;
  }
  if (!*(_DWORD *)(a13 + 16)
    || (uint64_t result = sub_216208C98(a13 + 544, a13 + 20, *(void *)(a13 + 536), (_DWORD *)(a13 + 1148), *(void *)a13, *(void *)(a13 + 8) - *(void *)a13), result))
  {
    if (*a7)
    {
      uint64_t result = 0;
      --*a7;
      return result;
    }
    if (!a8)
    {
      uint64_t result = 0;
      ++*a3;
      return result;
    }
    int v61 = *v20;
    unint64_t v62 = *a3;
    unint64_t v63 = *a3 + 1;
    *a3 = v63;
    *(_DWORD *)(a10 + 24 * v62 + 8) = v61;
    return v63 >= a8;
  }
  return result;
}

uint64_t sub_216213388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v16 = a2;
  uint64_t v18 = 1;
  HIDWORD(v82) = 1;
  if (sub_216212CF8(a1, a2, a3)) {
    return v18;
  }
  uint64_t v20 = a1;
  uint64_t v84 = a7;
  int v83 = a6;
  if ((v16 & 3) == 2)
  {
    unint64_t v46 = 0;
    int64_t v47 = *(unsigned char **)(a11 + 8);
    uint64_t v48 = *(void *)(v20 + 8) + (v16 - 2);
    uint64_t v49 = a5;
    uint64_t v50 = a4;
    uint64_t v51 = a3;
    uint64_t v52 = v20;
    while (1)
    {
      if (v46 >> 5 <= 1) {
        uint64_t v53 = 1;
      }
      else {
        uint64_t v53 = v46 >> 5;
      }
      unsigned char *v47 = v46;
      unint64_t v54 = (unsigned char *)(*(void *)(a11 + 8) + 1);
      *(void *)(a11 + 8) = v54;
      unsigned int v55 = *(_DWORD *)(v48 + 4 * (v46 >> 5) + 4);
      if ((v55 >> v46))
      {
        char v56 = v46 & 0x1F;
        if (v83 == 2)
        {
          if (v46 >= 0x20u)
          {
            int v59 = 0;
            CFIndex v64 = (unsigned int *)(v48 + 4);
            do
            {
              unsigned int v65 = *v64++;
              int8x8_t v19 = vcnt_s8((int8x8_t)v65);
              v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
              v59 += v19.i32[0];
              --v53;
            }
            while (v53);
          }
          else
          {
            int v59 = 0;
          }
          v19.i32[0] = v55 & ~(-1 << v56);
          int8x8_t v19 = vcnt_s8(v19);
          v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
          uint64_t v66 = *(unsigned int *)(v48 + 4 * (v59 + v19.i32[0]) + 40);
          int v67 = *(_DWORD *)(v48 + 4 * (v59 + v19.i32[0]) + 40) & 3;
          switch(v67)
          {
            case 1:
              uint64_t v18 = 1;
              LODWORD(v82) = 1;
              int v63 = sub_216213388(v52, v66, v51, v50, v49, 2, v84, a8, a9, v82, a11);
              goto LABEL_59;
            case 2:
              unint64_t v72 = 0;
              uint64_t v73 = *(void *)(v52 + 8) + (v66 - 2);
              while (1)
              {
                uint64_t v74 = v72 >> 5;
                if (v72 >> 5 <= 1) {
                  uint64_t v74 = 1;
                }
                *unint64_t v54 = v72;
                uint64_t v75 = *(void *)(a11 + 8) + 1;
                *(void *)(a11 + 8) = v75;
                unsigned int v76 = *(_DWORD *)(v73 + 4 * (v72 >> 5) + 4);
                if ((v76 >> v72))
                {
                  int v77 = 0;
                  if (v72 >= 0x20u)
                  {
                    CFStringRef v78 = (unsigned int *)(v73 + 4);
                    do
                    {
                      unsigned int v79 = *v78++;
                      int8x8_t v19 = vcnt_s8((int8x8_t)v79);
                      v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
                      v77 += v19.i32[0];
                      --v74;
                    }
                    while (v74);
                  }
                  v19.i32[0] = v76 & ~(-1 << (v72 & 0x1F));
                  uint8x8_t v80 = (uint8x8_t)vcnt_s8(v19);
                  v80.i16[0] = vaddlv_u8(v80);
                  LODWORD(v82) = 0;
                  if (sub_216213388(v52, *(unsigned int *)(v73 + 4 * (v77 + v80.i32[0]) + 40), v51, v50, v49, 2, v84, a8, a9, v82, a11))return 1; {
                  uint64_t v75 = *(void *)(a11 + 8);
                  }
                }
                unint64_t v54 = (unsigned char *)(v75 - 1);
                *(void *)(a11 + 8) = v75 - 1;
                if (++v72 == 256) {
                  goto LABEL_60;
                }
              }
            case 3:
              uint64_t v68 = 0;
              uint64_t v69 = *(void *)(v52 + 8) + (v66 - 3) + 4;
              do
              {
                *unint64_t v54 = v68;
                uint64_t v70 = *(void *)(a11 + 8) + 1;
                *(void *)(a11 + 8) = v70;
                uint64_t v71 = *(unsigned int *)(v69 + 4 * v68);
                if ((v71 & 3) != 0)
                {
                  LODWORD(v82) = 0;
                  if (sub_216213388(v52, v71, v51, v50, v49, 2, v84, a8, a9, v82, a11)) {
                    return 1;
                  }
                  uint64_t v70 = *(void *)(a11 + 8);
                }
                unint64_t v54 = (unsigned char *)(v70 - 1);
                *(void *)(a11 + 8) = v54;
                ++v68;
              }
              while (v68 != 256);
              break;
          }
        }
        else if (v83 == 1)
        {
          if (v46 >= 0x20u)
          {
            int v57 = 0;
            int v60 = (unsigned int *)(v48 + 4);
            uint64_t v58 = v84;
            do
            {
              unsigned int v61 = *v60++;
              int8x8_t v19 = vcnt_s8((int8x8_t)v61);
              v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
              v57 += v19.i32[0];
              --v53;
            }
            while (v53);
          }
          else
          {
            int v57 = 0;
            uint64_t v58 = v84;
          }
          v19.i32[0] = v55 & ~(-1 << v56);
          uint8x8_t v62 = (uint8x8_t)vcnt_s8(v19);
          v62.i16[0] = vaddlv_u8(v62);
          LODWORD(v82) = 0;
          uint64_t v18 = 1;
          int v63 = sub_216213388(v52, *(unsigned int *)(v48 + 4 * (v57 + v62.i32[0]) + 40), v51, v50, v49, 1, v58, a8, a9, v82, a11);
LABEL_59:
          if (v63) {
            return v18;
          }
        }
      }
LABEL_60:
      int64_t v47 = (unsigned char *)(*(void *)(a11 + 8) - 1);
      *(void *)(a11 + 8) = v47;
      if (++v46 == 256) {
        return 0;
      }
    }
  }
  if ((v16 & 3) == 3)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *(void *)(v20 + 8) + (v16 - 3);
    int v23 = *(unsigned char **)(a11 + 8);
    uint64_t v24 = a5;
    uint64_t v25 = a4;
    uint64_t v26 = a3;
    uint64_t v27 = v20;
    do
    {
      *int v23 = v21;
      unsigned int v28 = (unsigned char *)(*(void *)(a11 + 8) + 1);
      *(void *)(a11 + 8) = v28;
      uint64_t v29 = *(unsigned int *)(v22 + 4 * v21 + 4);
      int v30 = *(_DWORD *)(v22 + 4 * v21 + 4) & 3;
      if ((v29 & 3) != 0)
      {
        if (v83 == 2)
        {
          if (v30 == 2)
          {
            unint64_t v36 = 0;
            uint64_t v37 = *(void *)(v27 + 8) + (v29 - 2);
            while (1)
            {
              uint64_t v38 = v36 >> 5;
              if (v36 >> 5 <= 1) {
                uint64_t v38 = 1;
              }
              *unsigned int v28 = v36;
              uint64_t v39 = *(void *)(a11 + 8) + 1;
              *(void *)(a11 + 8) = v39;
              unsigned int v40 = *(_DWORD *)(v37 + 4 * (v36 >> 5) + 4);
              if ((v40 >> v36))
              {
                if (v36 >= 0x20u)
                {
                  int v41 = 0;
                  int64_t v43 = (unsigned int *)(v37 + 4);
                  uint64_t v42 = v84;
                  do
                  {
                    unsigned int v44 = *v43++;
                    int8x8_t v19 = vcnt_s8((int8x8_t)v44);
                    v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
                    v41 += v19.i32[0];
                    --v38;
                  }
                  while (v38);
                }
                else
                {
                  int v41 = 0;
                  uint64_t v42 = v84;
                }
                v19.i32[0] = v40 & ~(-1 << (v36 & 0x1F));
                uint8x8_t v45 = (uint8x8_t)vcnt_s8(v19);
                v45.i16[0] = vaddlv_u8(v45);
                LODWORD(v82) = 0;
                if (sub_216213388(v27, *(unsigned int *)(v37 + 4 * (v41 + v45.i32[0]) + 40), v26, v25, v24, 2, v42, a8, a9, v82, a11))return 1; {
                uint64_t v39 = *(void *)(a11 + 8);
                }
              }
              unsigned int v28 = (unsigned char *)(v39 - 1);
              *(void *)(a11 + 8) = v39 - 1;
              if (++v36 == 256) {
                goto LABEL_31;
              }
            }
          }
          if (v30 != 3)
          {
            uint64_t v18 = 1;
            LODWORD(v82) = 1;
            int v31 = sub_216213388(v27, v29, v26, v25, v24, 2, v84, a8, a9, v82, a11);
LABEL_30:
            if (v31) {
              return v18;
            }
            goto LABEL_31;
          }
          uint64_t v32 = 0;
          uint64_t v33 = *(void *)(v27 + 8) + (v29 - 3) + 4;
          do
          {
            *unsigned int v28 = v32;
            uint64_t v34 = *(void *)(a11 + 8) + 1;
            *(void *)(a11 + 8) = v34;
            uint64_t v35 = *(unsigned int *)(v33 + 4 * v32);
            if ((v35 & 3) != 0)
            {
              LODWORD(v82) = 0;
              if (sub_216213388(v27, v35, v26, v25, v24, 2, v84, a8, a9, v82, a11)) {
                return 1;
              }
              uint64_t v34 = *(void *)(a11 + 8);
            }
            unsigned int v28 = (unsigned char *)(v34 - 1);
            *(void *)(a11 + 8) = v28;
            ++v32;
          }
          while (v32 != 256);
        }
        else if (v83 == 1)
        {
          LODWORD(v82) = 0;
          uint64_t v18 = 1;
          int v31 = sub_216213388(v27, v29, v26, v25, v24, 1, v84, a8, a9, v82, a11);
          goto LABEL_30;
        }
      }
LABEL_31:
      int v23 = (unsigned char *)(*(void *)(a11 + 8) - 1);
      *(void *)(a11 + 8) = v23;
      ++v21;
    }
    while (v21 != 256);
  }
  return 0;
}

uint64_t sub_2162139E4(uint64_t a1, int a2, uint64_t a3, uint8x8_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a2 & 3) == 2)
  {
    unint64_t v34 = 0;
    uint64_t v35 = *(unsigned char **)(a11 + 8);
    uint64_t v65 = *(void *)(a1 + 8) + (a2 - 2);
    while (1)
    {
      if (v34 >> 5 <= 1) {
        uint64_t v36 = 1;
      }
      else {
        uint64_t v36 = v34 >> 5;
      }
      *uint64_t v35 = v34;
      uint64_t v37 = (unsigned char *)(*(void *)(a11 + 8) + 1);
      *(void *)(a11 + 8) = v37;
      unsigned int v38 = *(_DWORD *)(v65 + 4 * (v34 >> 5) + 4);
      if ((v38 >> v34))
      {
        char v39 = v34 & 0x1F;
        if (a7 == 2)
        {
          if (v34 >= 0x20u)
          {
            int v41 = 0;
            uint8x8_t v45 = (unsigned int *)(v65 + 4);
            do
            {
              unsigned int v46 = *v45++;
              a4 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
              a4.i16[0] = vaddlv_u8(a4);
              v41 += a4.i32[0];
              --v36;
            }
            while (v36);
          }
          else
          {
            int v41 = 0;
          }
          a4.i32[0] = v38 & ~(-1 << v39);
          a4 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
          a4.i16[0] = vaddlv_u8(a4);
          uint64_t v47 = *(unsigned int *)(v65 + 4 * (v41 + a4.i32[0]) + 40);
          int v48 = *(_DWORD *)(v65 + 4 * (v41 + a4.i32[0]) + 40) & 3;
          switch(v48)
          {
            case 1:
              uint64_t v18 = 1;
              if (sub_216212CF8(a1, v47, a3)) {
                return v18;
              }
              break;
            case 2:
              unint64_t v53 = 0;
              uint64_t v54 = *(void *)(a1 + 8) + (v47 - 2);
              while (1)
              {
                uint64_t v55 = v53 >> 5;
                if (v53 >> 5 <= 1) {
                  uint64_t v55 = 1;
                }
                unsigned char *v37 = v53;
                uint64_t v56 = *(void *)(a11 + 8) + 1;
                *(void *)(a11 + 8) = v56;
                unsigned int v57 = *(_DWORD *)(v54 + 4 * (v53 >> 5) + 4);
                if ((v57 >> v53))
                {
                  if (v53 >= 0x20u)
                  {
                    int v58 = 0;
                    int v59 = (unsigned int *)(v54 + 4);
                    do
                    {
                      unsigned int v60 = *v59++;
                      a4 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
                      a4.i16[0] = vaddlv_u8(a4);
                      v58 += a4.i32[0];
                      --v55;
                    }
                    while (v55);
                  }
                  else
                  {
                    int v58 = 0;
                  }
                  a4.i32[0] = v57 & ~(-1 << (v53 & 0x1F));
                  uint8x8_t v61 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
                  v61.i16[0] = vaddlv_u8(v61);
                  if (sub_216212CF8(a1, *(unsigned int *)(v54 + 4 * (v58 + v61.i32[0]) + 40), a3))return 1; {
                  uint64_t v56 = *(void *)(a11 + 8);
                  }
                }
                uint64_t v37 = (unsigned char *)(v56 - 1);
                *(void *)(a11 + 8) = v56 - 1;
                if (++v53 == 256) {
                  goto LABEL_71;
                }
              }
            case 3:
              uint64_t v49 = 0;
              uint64_t v50 = *(void *)(a1 + 8) + (v47 - 3) + 4;
              do
              {
                unsigned char *v37 = v49;
                uint64_t v51 = *(void *)(a11 + 8) + 1;
                *(void *)(a11 + 8) = v51;
                uint64_t v52 = *(unsigned int *)(v50 + 4 * v49);
                if ((v52 & 3) != 0)
                {
                  if (sub_216212CF8(a1, v52, a3)) {
                    return 1;
                  }
                  uint64_t v51 = *(void *)(a11 + 8);
                }
                uint64_t v37 = (unsigned char *)(v51 - 1);
                *(void *)(a11 + 8) = v37;
                ++v49;
              }
              while (v49 != 256);
              break;
          }
        }
        else if (a7 == 1)
        {
          if (v34 >= 0x20u)
          {
            int v40 = 0;
            uint64_t v42 = (unsigned int *)(v65 + 4);
            do
            {
              unsigned int v43 = *v42++;
              a4 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
              a4.i16[0] = vaddlv_u8(a4);
              v40 += a4.i32[0];
              --v36;
            }
            while (v36);
          }
          else
          {
            int v40 = 0;
          }
          a4.i32[0] = v38 & ~(-1 << v39);
          uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
          v44.i16[0] = vaddlv_u8(v44);
          uint64_t v18 = 1;
          if (sub_216212CF8(a1, *(unsigned int *)(v65 + 4 * (v40 + v44.i32[0]) + 40), a3)) {
            return v18;
          }
        }
      }
LABEL_71:
      uint64_t v35 = (unsigned char *)(*(void *)(a11 + 8) - 1);
      *(void *)(a11 + 8) = v35;
      if (++v34 == 256) {
        return 0;
      }
    }
  }
  if ((a2 & 3) == 3)
  {
    uint64_t v13 = 0;
    uint64_t v64 = *(void *)(a1 + 8) + (a2 - 3);
    uint64_t v14 = *(unsigned char **)(a11 + 8);
    do
    {
      *uint64_t v14 = v13;
      uint64_t v15 = (unsigned char *)(*(void *)(a11 + 8) + 1);
      *(void *)(a11 + 8) = v15;
      uint64_t v16 = *(unsigned int *)(v64 + 4 * v13 + 4);
      int v17 = *(_DWORD *)(v64 + 4 * v13 + 4) & 3;
      if ((v16 & 3) != 0)
      {
        if (a7 == 2)
        {
          if (v17 == 2)
          {
            unint64_t v25 = 0;
            uint64_t v26 = *(void *)(a1 + 8) + (v16 - 2);
            while (1)
            {
              uint64_t v27 = v25 >> 5;
              if (v25 >> 5 <= 1) {
                uint64_t v27 = 1;
              }
              *uint64_t v15 = v25;
              uint64_t v28 = *(void *)(a11 + 8) + 1;
              *(void *)(a11 + 8) = v28;
              unsigned int v29 = *(_DWORD *)(v26 + 4 * (v25 >> 5) + 4);
              if ((v29 >> v25))
              {
                if (v25 >= 0x20u)
                {
                  int v30 = 0;
                  int v31 = (unsigned int *)(v26 + 4);
                  do
                  {
                    unsigned int v32 = *v31++;
                    a4 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
                    a4.i16[0] = vaddlv_u8(a4);
                    v30 += a4.i32[0];
                    --v27;
                  }
                  while (v27);
                }
                else
                {
                  int v30 = 0;
                }
                a4.i32[0] = v29 & ~(-1 << (v25 & 0x1F));
                uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
                v33.i16[0] = vaddlv_u8(v33);
                if (sub_216212CF8(a1, *(unsigned int *)(v26 + 4 * (v30 + v33.i32[0]) + 40), a3))return 1; {
                uint64_t v28 = *(void *)(a11 + 8);
                }
              }
              uint64_t v15 = (unsigned char *)(v28 - 1);
              *(void *)(a11 + 8) = v28 - 1;
              if (++v25 == 256) {
                goto LABEL_30;
              }
            }
          }
          if (v17 != 3)
          {
            uint64_t v18 = 1;
            uint64_t v19 = a1;
            uint64_t v20 = a3;
LABEL_29:
            if (sub_216212CF8(v19, v16, v20)) {
              return v18;
            }
            goto LABEL_30;
          }
          uint64_t v21 = 0;
          uint64_t v22 = *(void *)(a1 + 8) + (v16 - 3) + 4;
          do
          {
            *uint64_t v15 = v21;
            uint64_t v23 = *(void *)(a11 + 8) + 1;
            *(void *)(a11 + 8) = v23;
            uint64_t v24 = *(unsigned int *)(v22 + 4 * v21);
            if ((v24 & 3) != 0)
            {
              if (sub_216212CF8(a1, v24, a3)) {
                return 1;
              }
              uint64_t v23 = *(void *)(a11 + 8);
            }
            uint64_t v15 = (unsigned char *)(v23 - 1);
            *(void *)(a11 + 8) = v15;
            ++v21;
          }
          while (v21 != 256);
        }
        else if (a7 == 1)
        {
          uint64_t v18 = 1;
          uint64_t v19 = a1;
          uint64_t v20 = a3;
          goto LABEL_29;
        }
      }
LABEL_30:
      uint64_t v14 = (unsigned char *)(*(void *)(a11 + 8) - 1);
      *(void *)(a11 + 8) = v14;
      ++v13;
    }
    while (v13 != 256);
  }
  return 0;
}

BOOL sub_216213FEC(_WORD *a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  long long v4 = &a3[a4];
  int v5 = a1;
  if (a4 >= 1)
  {
    do
    {
      int v6 = (unsigned __int16)*v5;
      if (v6 == 42) {
        break;
      }
      if (v6 != 63 && v6 != *a3) {
        return 0;
      }
      ++v5;
      ++a3;
    }
    while (a3 < v4);
  }
  uint64_t v8 = &a1[a2];
  if (a3 < v4)
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
    while (v5 && v5 < v8)
    {
      int v11 = (unsigned __int16)*v5;
      if (v11 == 42)
      {
        if (++v5 == v8) {
          return 1;
        }
        BOOL v10 = a3 + 1;
        uint64_t v9 = v5;
      }
      else
      {
        if (v11 != 63 && v11 != *a3) {
          break;
        }
        ++v5;
        ++a3;
      }
LABEL_24:
      if (a3 >= v4) {
        goto LABEL_25;
      }
    }
    a3 = v10++;
    int v5 = v9;
    goto LABEL_24;
  }
LABEL_25:
  if (v5)
  {
    while (v5 < v8 && *v5 == 42)
      ++v5;
  }
  return v5 == v8;
}

uint64_t sub_2162140DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v33 = 1024;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v15 = 0x10000;
  uint64_t v19 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
  int v18 = 0;
  bzero(v19, 0x10000uLL);
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  unint64_t v20 = 0x10000;
  uint64_t v24 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
  int v23 = 0;
  bzero(v24, 0x10000uLL);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  size_t v25 = *(void *)(a1 + 40);
  int v6 = *(void **)(a1 + 8);
  long long v30 = *(_OWORD *)(a1 + 56);
  uint64_t v29 = a1 + 48;
  int v31 = v6;
  int v28 = 1;
  bzero(v6, v25);
  unint64_t v7 = sub_2162146D8(&v15, 1028, 4);
  uint64_t v8 = (v7 >> 2) | 0x300000000;
  if (v7 == -1) {
    uint64_t v8 = 0;
  }
  uint64_t v32 = v8;
  if (a2)
  {
    uint64_t v9 = (unsigned int *)(a3 + 16);
    while (1)
    {
      uint64_t v10 = *((void *)v9 - 1);
      if ((unint64_t)(v10 - 257) < 0xFFFFFFFFFFFFFF00) {
        return 0xFFFFFFFFLL;
      }
      int v11 = (unsigned __int8 *)*((void *)v9 - 2);
      unsigned int v12 = *v9;
      v9 += 6;
      sub_216214258((unint64_t)&v15, v32, v11, v10, v12);
      if (!--a2) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    unint64_t v15 = v16;
    unint64_t v20 = (v22 & 0xFFFFFFFC)
        + (unint64_t)*(unsigned int *)((char *)v24 + (v22 & 0xFFFFFFFC))
        + 4;
    unint64_t v21 = v20;
    uint64_t v13 = sub_216214410((uint64_t)&v15, a1);
    if (v19) {
      free(v19);
    }
    if (v24) {
      free(v24);
    }
  }
  return v13;
}

unint64_t sub_216214258(unint64_t result, int a2, unsigned __int8 *a3, int a4, unsigned int a5)
{
  uint64_t v6 = *(void *)(result + 56);
  uint64_t v7 = (4 * a2);
  uint64_t v8 = (unsigned int *)(v6 + v7);
  if (!a4)
  {
LABEL_19:
    *uint64_t v8 = a5;
    return result;
  }
  int v9 = a4;
  unint64_t v11 = result;
  unsigned int v12 = (unint64_t *)(result + 64);
  while (1)
  {
    uint64_t v13 = *a3;
    uint64_t v14 = &v8[v13];
    unsigned int v16 = v14[1];
    unint64_t v15 = v14 + 1;
    int v17 = v16 & 3;
    unint64_t v18 = (unint64_t)v16 >> 2;
    if (v17 != 3) {
      break;
    }
    uint64_t result = v18 | 0x300000000;
    ++a3;
    LODWORD(v19) = v9 - 1;
LABEL_18:
    uint64_t v7 = (4 * result);
    uint64_t v8 = (unsigned int *)(v6 + v7);
    int v9 = v19;
    if (!v19) {
      goto LABEL_19;
    }
  }
  if (v17 != 1)
  {
    if (v17) {
      return result;
    }
    if (*(void *)(v11 + 80) != *(void *)(v11 + 72)) {
      *(void *)(v11 + 72) = (*(void *)(v11 + 80) & 0xFFFFFFFCLL)
    }
                            + *(unsigned int *)(*(void *)(v11 + 120) + (*(void *)(v11 + 80) & 0xFFFFFFFCLL))
                            + 4;
    uint64_t result = sub_2162146D8(v12, *(unsigned int *)(v11 + 200), 4);
    if (result == -1) {
      unint64_t v18 = 0;
    }
    else {
      unint64_t v18 = (result >> 2) | 0x100000000;
    }
    *unint64_t v15 = HIDWORD(v18) | (4 * v18);
  }
  unint64_t v20 = (int *)(*(void *)(v11 + 120) + (4 * v18));
  size_t v19 = (v9 - 1);
  if (v9 == 1)
  {
    v20[1] = a5;
    int v24 = 4;
    goto LABEL_22;
  }
  uint64_t v21 = *v20;
  if (!v21)
  {
    *(void *)unint64_t v20 = 4;
    uint64_t v21 = 4;
  }
  ++a3;
  uint64_t v22 = (v9 + 4);
  uint64_t v23 = v21 + 4;
  if (v23 + v22 >= (unint64_t)*(unsigned int *)(v11 + 200))
  {
    uint64_t result = sub_2162147D4((unint64_t *)v11);
    uint64_t v6 = *(void *)(v11 + 56);
    *(_DWORD *)(v6 + v7 + 4 * v13 + 4) = HIDWORD(result) | (4 * result);
    goto LABEL_18;
  }
  *((unsigned char *)v20 + v23) = v19;
  size_t v25 = (char *)v20 + v23 + 1;
  uint64_t result = (unint64_t)memcpy(v25, a3, v19);
  *(_DWORD *)&v25[v19] = a5;
  int v24 = *v20 + v22;
LABEL_22:
  *unint64_t v20 = v24;
  return result;
}

uint64_t sub_216214410(uint64_t a1, uint64_t a2)
{
  long long v4 = (unint64_t *)(a1 + 128);
  uint64_t v5 = sub_2162146D8((unint64_t *)(a1 + 128), 24, 4);
  unint64_t v6 = sub_216214918(a1, *(void *)(a1 + 192), v4, 1);
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v8 = sub_2162146D8(v4, *(void *)(a1 + 72), 4096);
  if (v8 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = v8;
  memcpy((void *)(*(void *)(a1 + 184) + v8), *(const void **)(a1 + 120), *(void *)(a1 + 72));
  uint64_t v10 = *(char **)(a1 + 184);
  unint64_t v11 = &v10[v5];
  int v12 = HIDWORD(v6) + 4 * v6;
  *(_DWORD *)unint64_t v11 = 1;
  *((_DWORD *)v11 + 1) = v12;
  *((_DWORD *)v11 + 2) = v7;
  *((_DWORD *)v11 + 3) = v9;
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(unsigned int *)(a1 + 200);
  *((_DWORD *)v11 + 4) = *(void *)(a1 + 72);
  *((_DWORD *)v11 + 5) = v14;
  *(_DWORD *)a2 = v12;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = v14;
  size_t v15 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v15;
  unsigned int v16 = *(uint64_t (**)(void))(a1 + 168);
  if (v16) {
    int v17 = (char *)v16();
  }
  else {
    int v17 = (char *)malloc_type_realloc(v10, v15, 0x21AF457BuLL);
  }
  size_t v19 = v17;
  uint64_t result = 0;
  *(void *)(a1 + 184) = v19;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = &v19[v9];
  return result;
}

uint64_t sub_216214528(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v5 = 1;
  if (a1)
  {
    uint64_t v6 = a2;
    if (a2)
    {
      uint64_t v7 = a3;
      if (a3)
      {
        uint64_t v8 = a4;
        if (a4)
        {
          int v37 = 1024;
          unint64_t v20 = 0;
          uint64_t v21 = 0;
          unint64_t v19 = 0x10000;
          uint64_t v23 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
          int v22 = 0;
          bzero(v23, 0x10000uLL);
          unint64_t v25 = 0;
          uint64_t v26 = 0;
          unint64_t v24 = 0x10000;
          int v28 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
          int v27 = 0;
          bzero(v28, 0x10000uLL);
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          size_t v29 = *(void *)(a1 + 40);
          unint64_t v11 = *(void **)(a1 + 8);
          long long v34 = *(_OWORD *)(a1 + 56);
          uint64_t v33 = a1 + 48;
          uint64_t v35 = v11;
          int v32 = 1;
          bzero(v11, v29);
          unint64_t v12 = sub_2162146D8(&v19, 1028, 4);
          uint64_t v13 = (v12 >> 2) | 0x300000000;
          if (v12 == -1) {
            uint64_t v13 = 0;
          }
          uint64_t v36 = v13;
          while (1)
          {
            uint64_t v15 = *v8++;
            int v14 = v15;
            if ((unint64_t)(v15 - 257) <= 0xFFFFFFFFFFFFFEFFLL) {
              break;
            }
            int v17 = *v7++;
            unsigned int v16 = v17;
            LODWORD(v17) = *a5++;
            sub_216214258((unint64_t)&v19, v36, v16, v14, v17);
            if (!--v6)
            {
              unint64_t v19 = v20;
              unint64_t v24 = (v26 & 0xFFFFFFFC)
                  + (unint64_t)*(unsigned int *)((char *)v28 + (v26 & 0xFFFFFFFC))
                  + 4;
              unint64_t v25 = v24;
              uint64_t v5 = sub_216214410((uint64_t)&v19, a1);
              if (v23) {
                free(v23);
              }
              if (v28) {
                free(v28);
              }
              return v5;
            }
          }
          if (v23) {
            free(v23);
          }
          if (v28) {
            free(v28);
          }
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return v5;
}

uint64_t sub_2162146D8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (a3 + a1[1] - 1) & -a3;
  unint64_t v6 = v5 + a2;
  if (v5 + a2 <= *a1)
  {
LABEL_13:
    a1[1] = v6;
    a1[2] = v5;
    return v5;
  }
  while (1)
  {
    int v7 = 2 * (int)v4 ? 2 * v4 : 0x10000;
    if (!*((_DWORD *)a1 + 6)) {
      break;
    }
    uint64_t v8 = (uint64_t (*)(void *, void, unint64_t))a1[5];
    uint64_t v9 = (void *)a1[7];
    unint64_t v4 = v7;
    if (!v8)
    {
      uint64_t v10 = (char *)malloc_type_realloc(v9, v7, 0x64A7BD1uLL);
      a1[7] = (unint64_t)v10;
      *(_DWORD *)a1[4] = 1;
      goto LABEL_11;
    }
    a1[7] = v8(v9, v7, a1[6]);
LABEL_12:
    *a1 = v4;
    if (v6 <= v4) {
      goto LABEL_13;
    }
  }
  unint64_t v4 = v7;
  uint64_t v10 = (char *)malloc_type_realloc((void *)a1[7], v7, 0x2715C904uLL);
  a1[7] = (unint64_t)v10;
  if (v10)
  {
LABEL_11:
    bzero(&v10[*a1], v4 - *a1);
    goto LABEL_12;
  }
  return -1;
}

uint64_t sub_2162147D4(unint64_t *a1)
{
  v15[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = MEMORY[0x270FA5388]();
  unint64_t v4 = (_DWORD *)((char *)v15 - ((v3 + 19) & 0x1FFFFFFF0));
  uint64_t v6 = (4 * v5);
  int v7 = (unsigned int *)(*(void *)(v2 + 120) + v6);
  size_t v8 = *v7;
  *unint64_t v4 = v8;
  memcpy(v4 + 1, v7 + 1, v8);
  if (a1[10] == v6)
  {
    bzero(v7, a1[9] - v6);
    a1[9] = a1[10];
  }
  unint64_t v9 = sub_2162146D8(a1, 1028, 4);
  if (v9 == -1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (v9 >> 2) | 0x300000000;
  }
  *(_DWORD *)(a1[7] + (4 * v10)) = v4[1];
  unint64_t v11 = (unsigned __int8 *)(v4 + 2);
  unint64_t v12 = (unint64_t)v4 + v8 + 4;
  if ((unint64_t)(v4 + 2) < v12)
  {
    do
    {
      unint64_t v13 = (unint64_t)&v11[*v11 + 5];
      sub_216214258(a1, v10);
      unint64_t v11 = (unsigned __int8 *)v13;
    }
    while (v13 < v12);
  }
  return v10;
}

unint64_t sub_216214918(uint64_t a1, unint64_t a2, unint64_t *a3, int a4)
{
  LODWORD(v4) = a2;
  unint64_t v5 = HIDWORD(a2);
  if (HIDWORD(a2) == 3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (4 * a2);
    int32x4_t v11 = 0uLL;
    v12.i64[0] = 0x300000003;
    v12.i64[1] = 0x300000003;
    do
    {
      int32x4_t v11 = vsubq_s32(v11, vtstq_s32(*(int32x4_t *)(v10 + v9 + 4 + v8), v12));
      v8 += 16;
    }
    while (v8 != 1024);
    if (a4 || (unsigned int v13 = vaddvq_s32(v11), v13 >= 0x21))
    {
      unint64_t v24 = sub_2162146D8(a3, 1028, 4);
      uint64_t v25 = 0;
      if (v24 == -1) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = (v24 >> 2) | 0x300000000;
      }
      uint64_t v26 = (4 * v4);
      int v27 = (int *)(v9 + v10);
      int v29 = *v27;
      int v28 = v27 + 1;
      *(_DWORD *)(a3[7] + v26) = v29;
      uint64_t v30 = v26 + 4;
      do
      {
        uint64_t v31 = sub_216214918(a1, ((unint64_t)v28[v25] >> 2) | ((unint64_t)(v28[v25] & 3) << 32), a3, 0);
        *(_DWORD *)(a3[7] + v30 + v25 * 4) = HIDWORD(v31) + 4 * v31;
        ++v25;
      }
      while (v25 != 256);
    }
    else
    {
      unint64_t v14 = sub_2162146D8(a3, 4 * v13 + 40, 4);
      uint64_t v15 = 0;
      if (v14 == -1) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = (v14 >> 2) | 0x200000000;
      }
      uint64_t v16 = (4 * v4);
      int v17 = (int *)(v9 + v10);
      int v19 = *v17;
      unint64_t v18 = v17 + 1;
      uint64_t v20 = a3[7] + v16;
      *(_DWORD *)uint64_t v20 = v19;
      *(unsigned char *)(v20 + 37) = v13;
      do
      {
        unint64_t v21 = sub_216214918(a1, ((unint64_t)v18[v15] >> 2) | ((unint64_t)(v18[v15] & 3) << 32), a3, 0);
        if (HIDWORD(v21))
        {
          uint64_t v22 = a3[7] + v16;
          uint64_t v23 = *(unsigned __int8 *)(v22 + 36);
          *(unsigned char *)(v22 + 36) = v23 + 1;
          *(_DWORD *)(v22 + 4 * v23 + 4sub_2161868BC(&a9, 0) = HIDWORD(v21) + 4 * v21;
          *(_DWORD *)(v22 + 4 * (v15 >> 5) + 4) |= 1 << v15;
        }
        ++v15;
      }
      while (v15 != 256);
    }
    unint64_t v5 = HIDWORD(v4);
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t sub_216214AEC(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v4 = (uint64_t *)sub_2162D8C20();
  unint64_t v5 = (char *)sub_2162D8CB8(v4, a2, off_26797C900[0], @"sys.dic");
  uint64_t v10 = (void *)MEMORY[0x263EF8330];
  uint64_t v11 = 0x40000000;
  int32x4_t v12 = sub_2161A0748;
  unsigned int v13 = (void **)&unk_264266C08;
  int v15 = a2;
  unint64_t v14 = v5;
  sub_21619FED8(v5, (uint64_t)&v10, 0, (void *)a1);
  *(void *)(a1 + 16) = sub_216322AAC(a2);
  int v6 = a2 - 1;
  if ((a2 - 1) > 4)
  {
    uint64_t v7 = 0;
    int v8 = 0;
  }
  else
  {
    uint64_t v7 = dword_21637DA94[v6];
    int v8 = dword_21637DAA8[v6];
  }
  *(_DWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 28) = v8;
  *(void *)(a1 + 32) = 0;
  uint64_t v10 = &unk_26C6C7AF0;
  uint64_t v11 = a1;
  unsigned int v13 = &v10;
  sub_216214C70((void *)a1, v7, (uint64_t)&v10);
  sub_2162150F4(&v10);
  return a1;
}

void sub_216214C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162150F4((uint64_t *)va);
  unint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    sub_2161121B0(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216214C70(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 40))(*a1) == a2)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)v6 + 48);
      return v7();
    }
LABEL_10:
    sub_21610B7AC();
  }
  (*(void (**)(void, uint64_t))(*(void *)*a1 + 48))(*a1, a2);
  uint64_t v9 = *(void *)(a3 + 24);
  if (!v9) {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)*a1 + 48);

  return v10();
}

void sub_216214DB0()
{
}

void sub_216214E28(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1060C40E039F83FLL);
  _Unwind_Resume(a1);
}

void *sub_216214E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = a3;
  uint64_t v5 = *(unsigned int *)(a1 + 28);
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_26C6C7A98;
  v6[1] = a1;
  void v6[2] = a2;
  v6[3] = &v8;
  v9[3] = v6;
  sub_216214C70((void *)a1, v5, (uint64_t)v9);
  return sub_2162150F4(v9);
}

void sub_216214EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162150F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216214F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v10 = a4;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = operator new(0x28uLL);
  *uint64_t v8 = &unk_26C6C7A40;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = &v10;
  v11[3] = v8;
  sub_216214C70((void *)a1, v7, (uint64_t)v11);
  return sub_2162150F4(v11);
}

void sub_216214FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162150F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216214FE0()
{
}

void *sub_216214FF4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C6C7AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_21621503C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7AF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_216215068(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  uint64_t v2 = *v1;
  if (*(void *)(*v1 + 16)
    && (unint64_t v3 = *(int *)(v2 + 36), v5 = v2 + 128, v4 = *(void *)(v2 + 128), v3 < (*(void *)(v5 + 8) - v4) >> 2)
    && (unsigned int v6 = *(_DWORD *)(v4 + 4 * v3)) != 0)
  {
    uint64_t v7 = v6 >> 1;
  }
  else
  {
    uint64_t v7 = 15;
  }
  v1[4] = v7;
  return result;
}

uint64_t sub_2162150A8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC800)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162150E8()
{
  return &unk_26C6BC800;
}

void *sub_2162150F4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21621517C()
{
}

__n128 sub_216215190(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C7A98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2162151E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C7A98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void **sub_21621521C(uint64_t **a1)
{
  return sub_216350944(*a1[1], *a1[2], 2 * a1[2][1], 0, *a1[3]);
}

uint64_t sub_216215240(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC7F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216215280()
{
  return &unk_26C6BC7F0;
}

void sub_216215290()
{
}

__n128 sub_2162152A4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6C7A40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2162152F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C7A40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void **sub_216215330(uint64_t a1)
{
  return sub_216350944(**(void **)(a1 + 8), **(void **)(a1 + 16), 2 * *(void *)(*(void *)(a1 + 16) + 8), 2 * *(void *)(a1 + 24), **(void **)(a1 + 32));
}

uint64_t sub_216215354(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC7E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216215394()
{
  return &unk_26C6BC7E0;
}

void ***sub_2162153A0(void ***a1)
{
  sub_21620FE1C(a1 + 1, 0);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    MEMORY[0x2166CA800](v2, 0x1010C40E4C6A875);
  }
  return a1;
}

uint64_t sub_2162153F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) == v1) {
    return -1;
  }
  unint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *(void *)(v1 + 8 * v3);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 7)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8 * v3);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 408))(v5) != 2) {
        break;
      }
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 48);
    if (v3 >= (*(void *)(a1 + 56) - v1) >> 3) {
      return -1;
    }
  }
  return v3;
}

uint64_t sub_2162154E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) == v1) {
    return -1;
  }
  unint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *(void *)(v1 + 8 * v3);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 7)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8 * v3);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 408))(v5)) {
        break;
      }
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 48);
    if (v3 >= (*(void *)(a1 + 56) - v1) >> 3) {
      return -1;
    }
  }
  return v3;
}

uint64_t sub_2162155D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) == v1) {
    return -1;
  }
  unint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *(void *)(v1 + 8 * v3);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4) == 7)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8 * v3);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 408))(v5) != 1) {
        break;
      }
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 48);
    if (v3 >= (*(void *)(a1 + 56) - v1) >> 3) {
      return -1;
    }
  }
  return v3;
}

uint64_t sub_2162156C8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v2 == v3) {
    return -1;
  }
  while ((*(unsigned int (**)(void))(**(void **)v2 + 96))() != a2)
  {
    v2 += 8;
    if (v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *(void *)(a1 + 56)) {
    return -1;
  }
  else {
    return (v2 - *(void *)(a1 + 48)) >> 3;
  }
}

uint64_t sub_216215760(void *a1, void **a2, int a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  if (!*a2) {
    return 0;
  }
  if (a4) {
    *a4 = 0;
  }
  v34[0] = v5;
  if (sub_2161DE698(a1 + 1, v34))
  {
    if (a3 != 2)
    {
      v34[0] = *a2;
      if (v34[0] && (uint64_t v11 = sub_2161DE698(a1 + 1, v34)) != 0) {
        uint64_t v12 = (uint64_t)v11[3];
      }
      else {
        uint64_t v12 = -1;
      }
      int v19 = *(void **)(a1[6] + 8 * v12);
      uint64_t v33 = v19;
      if (!a3) {
        goto LABEL_15;
      }
      uint64_t v20 = *a2;
      uint64_t v21 = *(void *)(a5 + 24);
      v34[0] = v19;
      uint64_t v35 = v20;
      if (!v21) {
        sub_21610B7AC();
      }
      if ((*(unsigned int (**)(uint64_t, void **, void **))(*(void *)v21 + 48))(v21, v34, &v35))
      {
LABEL_15:
        sub_21621811C(a1 + 1, &v33);
        uint64_t v35 = *a2;
        v34[0] = &v35;
        sub_216218198((float *)a1 + 2, &v35, (uint64_t)&unk_21636EABA, (void **)v34)[3] = v12;
        uint64_t v22 = a1[6];
        uint64_t v23 = *a2;
        *a2 = 0;
        uint64_t v24 = *(void *)(v22 + 8 * v12);
        *(void *)(v22 + 8 * v12) = v23;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        }
        if (a4) {
          *a4 = 1;
        }
      }
    }
    return 0;
  }
  unsigned int v13 = a1 + 6;
  uint64_t v14 = (uint64_t)(a1[7] - a1[6]) >> 3;
  uint64_t v35 = *a2;
  v34[0] = &v35;
  sub_216218198((float *)a1 + 2, &v35, (uint64_t)&unk_21636EABA, (void **)v34)[3] = v14;
  int v15 = (void *)a1[7];
  unint64_t v16 = a1[8];
  if ((unint64_t)v15 >= v16)
  {
    uint64_t v26 = ((uint64_t)v15 - *v13) >> 3;
    if ((unint64_t)(v26 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v27 = v16 - *v13;
    uint64_t v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
      uint64_t v28 = v26 + 1;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    v34[4] = a1 + 8;
    if (v29) {
      uint64_t v30 = (char *)sub_2160FFAA8((uint64_t)(a1 + 8), v29);
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = &v30[8 * v26];
    v34[0] = v30;
    v34[1] = v31;
    v34[3] = &v30[8 * v29];
    int v32 = *a2;
    *a2 = 0;
    *(void *)uint64_t v31 = v32;
    v34[2] = v31 + 8;
    sub_2161DE834(a1 + 6, v34);
    unint64_t v18 = (void *)a1[7];
    sub_2161DE9E4(v34);
  }
  else
  {
    int v17 = *a2;
    *a2 = 0;
    *int v15 = v17;
    unint64_t v18 = v15 + 1;
    a1[7] = v18;
  }
  a1[7] = v18;
  return 1;
}

void sub_2162159EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161DE9E4((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216215A00(void *a1, uint64_t a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[6];
  uint64_t v4 = (uint64_t *)a1[7];
  sub_21621987C((uint64_t)v9, a2);
  if ((uint64_t)v4 - v3 < 1)
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = (uint64_t *)sub_2162185F8(((uint64_t)v4 - v3) >> 3);
    uint64_t v7 = v6;
  }
  sub_21621865C(v3, v4, (uint64_t)v9, ((uint64_t)v4 - v3) >> 3, v5, v7);
  if (v5) {
    operator delete(v5);
  }
  sub_216199290(v9);
  return sub_216215AF8(a1);
}

void sub_216215AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  sub_216199290(&a10);
  _Unwind_Resume(a1);
}

void *sub_216215AF8(void *result)
{
  uint64_t v1 = result[6];
  if (result[7] != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    uint64_t v4 = (float *)(result + 1);
    do
    {
      uint64_t v5 = *(void *)(v1 + 8 * v3);
      uint64_t v6 = &v5;
      __n128 result = sub_216218198(v4, &v5, (uint64_t)&unk_21636EABA, &v6);
      result[3] = v3++;
      uint64_t v1 = v2[6];
    }
    while (v3 < (v2[7] - v1) >> 3);
  }
  return result;
}

uint64_t sub_216215B8C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)(a1 + 48);
  if (a3 > (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) {
    return 0;
  }
  uint64_t v15 = *a2;
  uint64_t v7 = sub_2161DE698((void *)(a1 + 8), &v15);
  if (v7)
  {
    unint64_t v8 = (unint64_t)v7[3];
    if (v8 < a3) {
      return 0;
    }
    if (v8 != -1)
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8 * v8);
      sub_21621811C((void *)(a1 + 8), &v15);
      sub_216217588((uint64_t *)(*(void *)(a1 + 48) + 8 * v8 + 8), *(uint64_t **)(a1 + 56), (uint64_t *)(*(void *)(a1 + 48) + 8 * v8));
      uint64_t v11 = v10;
      uint64_t v12 = *(void **)(a1 + 56);
      if (v12 != v10)
      {
        do
        {
          uint64_t v14 = *--v12;
          uint64_t v13 = v14;
          *uint64_t v12 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
          }
        }
        while (v12 != v11);
      }
      *(void *)(a1 + 56) = v11;
    }
  }
  sub_216215CB0(v5, *(void *)(a1 + 48) + 8 * a3, a2);
  sub_216215AF8((void *)a1);
  return 1;
}

uint64_t *sub_216215CB0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (uint64_t *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v5 >= v10)
  {
    unint64_t v17 = ((uint64_t)(v5 - v6) >> 3) + 1;
    if (v17 >> 61) {
      sub_21610CB04();
    }
    uint64_t v19 = v10 - v6;
    if (v19 >> 2 > v17) {
      unint64_t v17 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v17;
    }
    uint64_t v55 = a1 + 2;
    if (v20) {
      uint64_t v21 = (char *)sub_2160FFAA8((uint64_t)(a1 + 2), v20);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v23 = (uint64_t *)&v21[8 * v8];
    uint64_t v52 = v21;
    *(void *)&long long v53 = v23;
    *((void *)&v53 + 1) = v23;
    uint64_t v54 = &v21[8 * v20];
    if (v8 == v20)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v32 = 1;
        }
        else {
          unint64_t v32 = v7 >> 2;
        }
        uint64_t v59 = v11;
        uint64_t v33 = (char *)sub_2160FFAA8(v11, v32);
        uint64_t v35 = (uint64_t *)v53;
        uint64_t v36 = *((void *)&v53 + 1) - v53;
        if (*((void *)&v53 + 1) == (void)v53)
        {
          int64x2_t v42 = vdupq_n_s64(v53);
          unint64_t v38 = (unint64_t)&v33[8 * (v32 >> 2)];
        }
        else
        {
          uint64_t v37 = v36 >> 3;
          unint64_t v38 = (unint64_t)&v33[8 * (v32 >> 2) + (v36 & 0xFFFFFFFFFFFFFFF8)];
          uint64_t v39 = 8 * v37;
          int v40 = &v33[8 * (v32 >> 2)];
          do
          {
            uint64_t v41 = *v35;
            *v35++ = 0;
            *(void *)int v40 = v41;
            v40 += 8;
            v39 -= 8;
          }
          while (v39);
          int64x2_t v42 = (int64x2_t)v53;
        }
        unsigned int v43 = v54;
        uint64_t v56 = v52;
        uint64_t v52 = v33;
        *(void *)&long long v53 = &v33[8 * (v32 >> 2)];
        int64x2_t v57 = v42;
        *((void *)&v53 + 1) = v38;
        uint64_t v54 = &v33[8 * v34];
        int v58 = v43;
        sub_2161DE9E4(&v56);
        uint64_t v25 = (char *)*((void *)&v53 + 1);
        uint64_t v23 = (uint64_t *)v53;
      }
      else
      {
        if (v8 >= -1) {
          uint64_t v24 = v8 + 1;
        }
        else {
          uint64_t v24 = v8 + 2;
        }
        sub_216217588((uint64_t *)&v21[8 * v8], v23, &v23[-(v24 >> 1)]);
        uint64_t v23 = (uint64_t *)(v53 - 8 * (v24 >> 1));
        *(void *)&long long v53 = v23;
      }
    }
    else
    {
      uint64_t v25 = &v21[8 * v8];
    }
    uint64_t v44 = *a3;
    *a3 = 0;
    *(void *)uint64_t v25 = v44;
    *((void *)&v53 + 1) = v25 + 8;
    sub_2161DE8AC(v11, (uint64_t)v9, v9, *a1, (void *)*a1, (uint64_t)v23, (uint64_t)v23);
    *(void *)&long long v53 = v45;
    unsigned int v46 = (uint64_t *)a1[1];
    uint64_t v47 = (void *)*((void *)&v53 + 1);
    if (v46 != v9)
    {
      do
      {
        uint64_t v48 = *v9;
        *v9++ = 0;
        *v47++ = v48;
      }
      while (v9 != v46);
      uint64_t v45 = v53;
      uint64_t v9 = (uint64_t *)a1[1];
    }
    uint64_t v49 = (void *)*a1;
    *a1 = v45;
    a1[1] = (uint64_t)v47;
    uint64_t v50 = a1[2];
    a1[2] = (uint64_t)v54;
    *((void *)&v53 + 1) = v9;
    uint64_t v54 = (char *)v50;
    uint64_t v52 = v49;
    *(void *)&long long v53 = v49;
    sub_2161DE9E4(&v52);
  }
  else
  {
    if (v9 == (uint64_t *)v5)
    {
      uint64_t v22 = *a3;
      *a3 = 0;
      *uint64_t v9 = v22;
      a1[1] = (uint64_t)(v9 + 1);
    }
    else
    {
      uint64_t v12 = v9 + 1;
      uint64_t v13 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        uint64_t v15 = (void *)a1[1];
      }
      else
      {
        uint64_t v14 = (uint64_t *)(v5 - 8);
        uint64_t v15 = (void *)a1[1];
        do
        {
          uint64_t v16 = *v14;
          *v14++ = 0;
          *v15++ = v16;
        }
        while ((unint64_t)v14 < v5);
      }
      a1[1] = (uint64_t)v15;
      if ((void *)v5 != v12)
      {
        uint64_t v26 = 8 * ((uint64_t)(v5 - (void)v12) >> 3);
        uint64_t v27 = v6 + 8 * v8 - 8;
        do
        {
          uint64_t v28 = *(void *)(v27 + v26);
          *(void *)(v27 + v26) = 0;
          uint64_t v29 = *v13;
          *uint64_t v13 = v28;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
          }
          --v13;
          v26 -= 8;
        }
        while (v26);
      }
      uint64_t v30 = *a3;
      *a3 = 0;
      uint64_t v31 = *v9;
      *uint64_t v9 = v30;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
      }
    }
    return v9;
  }
  return v23;
}

void sub_216215FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_216215FFC(uint64_t a1, uint64_t **a2, unint64_t a3)
{
  if (a3 > (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (void *)(a1 + 8);
  do
  {
    uint64_t v11 = *v3;
    if (!v11 || (uint64_t v9 = sub_2161DE698(v8, &v11)) == 0 || (unint64_t)v9[3] >= v7 + a3) {
      v7 += sub_216215B8C(a1, v3, v7 + a3);
    }
    ++v3;
  }
  while (v3 != v4);
  return v7;
}

void sub_2162160BC(void *a1)
{
  long long v58 = 0uLL;
  v59[0] = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  uint64_t v52 = 0;
  long long v53 = 0;
  unint64_t v54 = 0;
  unint64_t v3 = (char *)a1[6];
  uint64_t v4 = (char *)a1[7];
  uint64_t v2 = a1 + 6;
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *(void *)v3;
      uint64_t v6 = *(void *)(*(void *)v3 + 8);
      if (v6)
      {
        if (v6 < 1)
        {
          uint64_t v11 = v53;
          if ((unint64_t)v53 >= v54)
          {
            uint64_t v21 = v53 - v52;
            if ((unint64_t)(v21 + 1) >> 61) {
LABEL_75:
            }
              sub_21610CB04();
            unint64_t v22 = (uint64_t)(v54 - (void)v52) >> 2;
            if (v22 <= v21 + 1) {
              unint64_t v22 = v21 + 1;
            }
            if (v54 - (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v22;
            }
            uint64_t v64 = &v54;
            if (v23)
            {
              uint64_t v24 = (uint64_t *)sub_2160FFAA8((uint64_t)&v54, v23);
              uint64_t v5 = *(void *)v3;
            }
            else
            {
              uint64_t v24 = 0;
            }
            uint64_t v27 = &v24[v21];
            unsigned int v60 = v24;
            uint8x8_t v61 = v27;
            int v63 = &v24[v23];
            *(void *)unint64_t v3 = 0;
            *uint64_t v27 = v5;
            uint8x8_t v62 = v27 + 1;
            sub_2161DE834((uint64_t *)&v52, &v60);
            uint64_t v12 = v53;
            sub_2161DE9E4((void **)&v60);
          }
          else
          {
            *(void *)unint64_t v3 = 0;
            *uint64_t v11 = v5;
            uint64_t v12 = v11 + 1;
          }
          long long v53 = v12;
        }
        else
        {
          uint64_t v7 = v56;
          if ((unint64_t)v56 >= v57)
          {
            uint64_t v13 = v56 - v55;
            if ((unint64_t)(v13 + 1) >> 61) {
              goto LABEL_75;
            }
            unint64_t v14 = (uint64_t)(v57 - (void)v55) >> 2;
            if (v14 <= v13 + 1) {
              unint64_t v14 = v13 + 1;
            }
            if (v57 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v14;
            }
            uint64_t v64 = &v57;
            if (v15)
            {
              uint64_t v16 = (uint64_t *)sub_2160FFAA8((uint64_t)&v57, v15);
              uint64_t v5 = *(void *)v3;
            }
            else
            {
              uint64_t v16 = 0;
            }
            uint64_t v25 = &v16[v13];
            unsigned int v60 = v16;
            uint8x8_t v61 = v25;
            int v63 = &v16[v15];
            *(void *)unint64_t v3 = 0;
            *uint64_t v25 = v5;
            uint8x8_t v62 = v25 + 1;
            sub_2161DE834((uint64_t *)&v55, &v60);
            uint64_t v8 = v56;
            sub_2161DE9E4((void **)&v60);
          }
          else
          {
            *(void *)unint64_t v3 = 0;
            *uint64_t v7 = v5;
            uint64_t v8 = v7 + 1;
          }
          uint64_t v56 = v8;
        }
      }
      else
      {
        uint64_t v9 = (uint64_t *)*((void *)&v58 + 1);
        if (*((void *)&v58 + 1) >= v59[0])
        {
          uint64_t v17 = (uint64_t)(*((void *)&v58 + 1) - v58) >> 3;
          if ((unint64_t)(v17 + 1) >> 61) {
            goto LABEL_75;
          }
          unint64_t v18 = (uint64_t)(v59[0] - v58) >> 2;
          if (v18 <= v17 + 1) {
            unint64_t v18 = v17 + 1;
          }
          if (v59[0] - (void)v58 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          uint64_t v64 = v59;
          if (v19)
          {
            unint64_t v20 = (uint64_t *)sub_2160FFAA8((uint64_t)v59, v19);
            uint64_t v5 = *(void *)v3;
          }
          else
          {
            unint64_t v20 = 0;
          }
          uint64_t v26 = &v20[v17];
          unsigned int v60 = v20;
          uint8x8_t v61 = v26;
          int v63 = &v20[v19];
          *(void *)unint64_t v3 = 0;
          *uint64_t v26 = v5;
          uint8x8_t v62 = v26 + 1;
          sub_2161DE834((uint64_t *)&v58, &v60);
          unint64_t v10 = (void *)*((void *)&v58 + 1);
          sub_2161DE9E4((void **)&v60);
        }
        else
        {
          *(void *)unint64_t v3 = 0;
          *uint64_t v9 = v5;
          unint64_t v10 = v9 + 1;
        }
        *((void *)&v58 + 1) = v10;
      }
      v3 += 8;
    }
    while (v3 != v4);
    unint64_t v3 = (char *)*v2;
  }
  if (v3)
  {
    sub_21618B630(v2);
    operator delete((void *)*v2);
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  long long v28 = v58;
  a1[8] = v59[0];
  uint64_t v29 = a1 + 8;
  *((_OWORD *)a1 + 3) = v28;
  v59[0] = 0;
  long long v58 = 0uLL;
  uint64_t v30 = (uint64_t)v55;
  uint64_t v31 = (uint64_t)v56;
  unint64_t v32 = v56 - v55;
  if ((char *)v56 - (char *)v55 < 1)
  {
    uint64_t v33 = 0;
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v33 = (uint64_t *)sub_2162185F8(v56 - v55);
    uint64_t v35 = v34;
  }
  sub_216219914(v30, v31, v32, v33, v35);
  if (v33) {
    operator delete(v33);
  }
  uint64_t v36 = v55;
  uint64_t v37 = v56;
  while (v36 != v37)
  {
    uint64_t v38 = a1[6];
    uint64_t v39 = a1[7] - v38;
    if (*(void *)(*v36 + 8) - 1 >= (unint64_t)(v39 >> 3)) {
      uint64_t v40 = v39 >> 3;
    }
    else {
      uint64_t v40 = *(void *)(*v36 + 8) - 1;
    }
    sub_216215CB0(v2, v38 + 8 * v40, v36++);
  }
  uint64_t v41 = v52;
  int64x2_t v42 = v53;
  if (v52 != v53)
  {
    unsigned int v43 = (void *)a1[7];
    do
    {
      if ((unint64_t)v43 >= *v29)
      {
        uint64_t v45 = ((uint64_t)v43 - *v2) >> 3;
        if ((unint64_t)(v45 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v46 = *v29 - *v2;
        uint64_t v47 = v46 >> 2;
        if (v46 >> 2 <= (unint64_t)(v45 + 1)) {
          uint64_t v47 = v45 + 1;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        uint64_t v64 = a1 + 8;
        if (v48) {
          uint64_t v49 = (uint64_t *)sub_2160FFAA8((uint64_t)(a1 + 8), v48);
        }
        else {
          uint64_t v49 = 0;
        }
        uint64_t v50 = &v49[v45];
        unsigned int v60 = v49;
        uint8x8_t v61 = v50;
        int v63 = &v49[v48];
        uint64_t v51 = *v41;
        uint64_t *v41 = 0;
        *uint64_t v50 = v51;
        uint8x8_t v62 = v50 + 1;
        sub_2161DE834(v2, &v60);
        unsigned int v43 = (void *)a1[7];
        sub_2161DE9E4((void **)&v60);
      }
      else
      {
        uint64_t v44 = *v41;
        uint64_t *v41 = 0;
        *v43++ = v44;
        a1[7] = v43;
      }
      a1[7] = v43;
      ++v41;
    }
    while (v41 != v42);
  }
  sub_216215AF8(a1);
  unsigned int v60 = (uint64_t *)&v52;
  sub_21618B5DC((void ***)&v60);
  unsigned int v60 = (uint64_t *)&v55;
  sub_21618B5DC((void ***)&v60);
  unsigned int v60 = (uint64_t *)&v58;
  sub_21618B5DC((void ***)&v60);
}

void sub_216216540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 88) = &a9;
  sub_21618B5DC((void ***)(v15 - 88));
  a9 = &a12;
  sub_21618B5DC((void ***)&a9);
  a12 = (void **)&a15;
  sub_21618B5DC(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_2162165C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v6 + 8 * a2);
  *(void *)(v6 + 8 * a2) = 0;
  *a3 = v7;
  uint64_t v13 = v7;
  sub_21621811C((void *)(a1 + 8), &v13);
  __n128 result = sub_216217588((uint64_t *)(*(void *)(a1 + 48) + 8 * a2 + 8), *(uint64_t **)(a1 + 56), (uint64_t *)(*(void *)(a1 + 48) + 8 * a2));
  unint64_t v10 = v9;
  uint64_t v11 = *(void **)(a1 + 56);
  while (v11 != v10)
  {
    uint64_t v12 = (uint64_t *)*--v11;
    __n128 result = v12;
    *uint64_t v11 = 0;
    if (v12) {
      __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
    }
  }
  *(void *)(a1 + 56) = v10;
  return result;
}

void sub_216216670(_Unwind_Exception *exception_object)
{
  *uint64_t v2 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162166B0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_216215AF8(a1);
}

void sub_2162166E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21621671C(void *a1, unint64_t **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = 126 - 2 * __clz(v5 - v4);
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_216217614(v4, v5, (uint64_t)&v13, v7, 1);
  uint64_t v9 = (uint64_t *)*a2;
  uint64_t v8 = (uint64_t *)a2[1];
  while (v9 != v8)
  {
    sub_2162165C0((uint64_t)a1, *v9, &v12);
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    }
    ++v9;
  }
  return sub_216215AF8(a1);
}

void *sub_2162167D8(void *result, unint64_t a2)
{
  uint64_t v2 = result[7] - result[6];
  if (v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = v2 >> 3;
    while (v5 > a2)
    {
      sub_2162165C0((uint64_t)v4, --v5, &v7);
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      }
    }
    return sub_216215AF8(v4);
  }
  return result;
}

void *sub_216216894(void *result, uint64_t **a2, unint64_t a3)
{
  if (a3 < (uint64_t)(result[7] - result[6]) >> 3)
  {
    unint64_t v5 = result;
    uint64_t v10 = *a2;
    uint64_t v6 = (float *)(result + 1);
    __n128 result = sub_2161DE698(result + 1, &v10);
    if (!result)
    {
      uint64_t v7 = v5[6];
      uint64_t v10 = *(uint64_t **)(v7 + 8 * a3);
      sub_21621811C(v6, &v10);
      uint64_t v8 = *(uint64_t **)(v7 + 8 * a3);
      *(void *)(v7 + 8 * a3) = *a2;
      *a2 = v8;
      uint64_t v9 = *(void *)(v7 + 8 * a3);
      uint64_t v10 = &v9;
      __n128 result = sub_216218198(v6, &v9, (uint64_t)&unk_21636EABA, &v10);
      result[3] = a3;
    }
  }
  return result;
}

void *sub_216216950(void *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = (uint64_t)(result[7] - result[6]) >> 3;
  if (v3 > a2 && a2 != a3 && v3 > a3)
  {
    uint64_t v7 = (uint64_t)result;
    sub_2162165C0((uint64_t)result, a2, &v8);
    sub_216215B8C(v7, (uint64_t *)&v8, a3);
    __n128 result = v8;
    uint64_t v8 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
  }
  return result;
}

void sub_2162169E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216216A20(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned int a5)
{
  v24[20] = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_2162D1CE4(a2);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = a3;
    _os_log_debug_impl(&dword_2160F5000, v7, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    uint64_t v14 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v15 = *MEMORY[0x263F8C2B8];
    do
    {
      uint64_t v11 = *(void *)(v8 + 8 * v9);
      if (v9 >= 0x10 && !a4) {
        break;
      }
      sub_216140140((uint64_t)buf);
      sub_216129E78(&v21, (uint64_t)"#", 1);
      ++v9;
      std::ostream::operator<<();
      sub_216178BC0((uint64_t)v22, __p);
      if (v19 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      (*(void (**)(uint64_t, void, void **, void))(*(void *)v11 + 528))(v11, a2, v12, a5);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      *(void *)buf = v15;
      *(void *)&buf[*(void *)(v15 - 24)] = v14;
      uint64_t v21 = v10;
      v22[0] = MEMORY[0x263F8C318] + 16;
      if (v23 < 0) {
        operator delete((void *)v22[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2166CA750](v24);
      uint64_t v8 = *(void *)(a1 + 48);
    }
    while (v9 < (*(void *)(a1 + 56) - v8) >> 3);
  }
}

void sub_216216CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_216140418((uint64_t)&a20);
  _Unwind_Resume(a1);
}

BOOL sub_216216D1C(uint64_t **a1, uint64_t *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v4 = (*(uint64_t (**)(uint64_t *))(**a1 + 96))(*a1);
  int v5 = (*(uint64_t (**)(void))(*(void *)*a2 + 96))();
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_26797DA50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_26797DA50))
  {
    qword_26797DA58 = (uint64_t)&unk_26C6C77D8;
    qword_26797DA70 = (uint64_t)&qword_26797DA58;
    qword_26797DA78[0] = &unk_26C6C7830;
    qword_26797DA90 = (uint64_t)qword_26797DA78;
    qword_26797DA98[0] = &unk_26C6C7888;
    qword_26797DAB0 = (uint64_t)qword_26797DA98;
    __cxa_atexit((void (*)(void *))sub_216217198, &qword_26797DA58, &dword_2160F5000);
    __cxa_guard_release(qword_26797DA50);
  }
  for (uint64_t i = 0; i != 12; i += 4)
  {
    uint64_t v7 = &qword_26797DA50[i];
    uint64_t v8 = (char *)qword_26797DA50[i + 4];
    if (v8)
    {
      if (v7 + 1 == (__guard *)v8)
      {
        long long v28 = v27;
        (*(void (**)(char *, void *))(v7[1] + 24))((char *)v7 + 8, v27);
        uint64_t v9 = (uint64_t)v28;
      }
      else
      {
        uint64_t v9 = (*(uint64_t (**)(__guard))(*(void *)v8 + 16))(qword_26797DA50[i + 4]);
        long long v28 = (void *)v9;
      }
    }
    else
    {
      uint64_t v9 = 0;
      long long v28 = 0;
    }
    if (sub_21621806C(v9, v4, v5))
    {
      sub_21621A490(v27);
      return 1;
    }
    char v10 = sub_21621806C((uint64_t)v28, v5, v4);
    sub_21621A490(v27);
    if (v10) {
      return 0;
    }
  }
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  v25[0] = &unk_26C6C7780;
  uint64_t v26 = v25;
  int v13 = (*(uint64_t (**)(uint64_t *))(*v11 + 408))(v11);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 408))(v12);
  if (sub_2162180C4((uint64_t)v26, v13, v14))
  {
    sub_21621A8DC(v25);
    return 1;
  }
  char v16 = sub_2162180C4((uint64_t)v26, v14, v13);
  sub_21621A8DC(v25);
  if (v16) {
    return 0;
  }
  int v17 = (*(uint64_t (**)(void))(**a1 + 112))();
  int v18 = (*(uint64_t (**)(void))(*(void *)*a2 + 112))();
  uint64_t v19 = **a1;
  if (v17 == v18)
  {
    CFStringRef v20 = (const __CFString *)(*(uint64_t (**)(void))(v19 + 24))();
    CFIndex Length = CFStringGetLength(v20);
    CFStringRef v22 = (const __CFString *)(*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    return Length < CFStringGetLength(v22);
  }
  else
  {
    int v24 = (*(uint64_t (**)(void))(v19 + 112))();
    return v24 < (*(int (**)(void))(*(void *)*a2 + 112))();
  }
}

void sub_21621716C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21621A8DC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_216217198(uint64_t a1)
{
  for (uint64_t i = 64; i != -32; i -= 32)
    sub_21621A490((void *)(a1 + i));
  return a1;
}

BOOL sub_2162171D4(void *a1, uint64_t *a2)
{
  int v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 408))(*a1);
  int v5 = (*(uint64_t (**)(void))(*(void *)*a2 + 408))();
  if (v4 == 1 && v5 != 1) {
    return 0;
  }
  if (v4 != 1 && v5 == 1) {
    return 1;
  }
  uint64_t v8 = *a1;
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
  double v10 = (*(double (**)(uint64_t))(*(void *)v8 + 392))(v8);
  if (v10 == -1.79769313e308) {
    double v11 = -100.0;
  }
  else {
    double v11 = v10;
  }
  uint64_t v12 = (double *)sub_2161A2A80();
  int v13 = (int)(v12[1] * (double)v9 - (double)*((int *)v12 + 1) * v11);
  uint64_t v14 = *a2;
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 112))(v14);
  double v16 = (*(double (**)(uint64_t))(*(void *)v14 + 392))(v14);
  if (v16 == -1.79769313e308) {
    double v17 = -100.0;
  }
  else {
    double v17 = v16;
  }
  int v18 = (double *)sub_2161A2A80();
  return v13 < (int)(v18[1] * (double)v15 - (double)*((int *)v18 + 1) * v17);
}

BOOL sub_2162173DC(void **a1, void **a2)
{
  unsigned int v4 = sub_216217488(*a1);
  unsigned int v5 = sub_216217488(*a2);
  if (v4 != v5) {
    return v4 < v5;
  }
  int v6 = (*(uint64_t (**)(void))(**a1 + 112))();
  return v6 < (*(int (**)(void))(**a2 + 112))();
}

BOOL sub_216217488(void *a1)
{
  if ((*(unsigned int (**)(void *))(*a1 + 96))(a1)) {
    return 0;
  }
  unsigned int v5 = (void *)a1[4];
  unsigned int v4 = a1 + 4;
  unint64_t v3 = v5;
  int v6 = *((char *)v4 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    unint64_t v3 = v4;
  }
  uint64_t v8 = *((unsigned __int8 *)v4 + 23);
  if (v7) {
    uint64_t v8 = v4[1];
  }
  return *((unsigned __int16 *)v3 + v8 - 1) - 12593 < 0x33;
}

BOOL sub_21621750C(void *a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 112))(*a1);
  return v3 < (*(int (**)(void))(**(void **)a2 + 112))();
}

uint64_t *sub_216217588(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4;
      *unsigned int v4 = 0;
      uint64_t v7 = *a3;
      *a3 = v6;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
      }
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

unint64_t *sub_216217614(unint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  double v10 = result;
  while (2)
  {
    double v11 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          double v10 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v40 = *(a2 - 1);
                unint64_t v41 = *v11;
                if (v40 > *v11)
                {
                  *double v11 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                unint64_t v42 = v11[1];
                unint64_t v43 = *(a2 - 1);
                if (v42 <= v43) {
                  unint64_t v44 = *(a2 - 1);
                }
                else {
                  unint64_t v44 = v11[1];
                }
                if (v42 >= v43) {
                  unint64_t v42 = *(a2 - 1);
                }
                *(a2 - 1) = v42;
                v11[1] = v44;
                unint64_t v45 = *(a2 - 1);
                if (v45 <= *v11) {
                  unint64_t v46 = *v11;
                }
                else {
                  unint64_t v46 = *(a2 - 1);
                }
                if (v45 >= *v11) {
                  unint64_t v45 = *v11;
                }
                *(a2 - 1) = v45;
                unint64_t v48 = *v11;
                unint64_t v47 = v11[1];
                if (v46 <= v47) {
                  unint64_t v48 = v11[1];
                }
                if (v46 < v47) {
                  unint64_t v47 = v46;
                }
                *double v11 = v48;
                v11[1] = v47;
                break;
              case 4uLL:
                unint64_t v50 = v11[1];
                unint64_t v49 = v11[2];
                if (*v11 <= v49) {
                  unint64_t v51 = v11[2];
                }
                else {
                  unint64_t v51 = *v11;
                }
                if (*v11 < v49) {
                  unint64_t v49 = *v11;
                }
                v11[2] = v49;
                *double v11 = v51;
                unint64_t v52 = *(a2 - 1);
                if (v50 <= v52) {
                  unint64_t v53 = *(a2 - 1);
                }
                else {
                  unint64_t v53 = v50;
                }
                if (v50 < v52) {
                  unint64_t v52 = v50;
                }
                *(a2 - 1) = v52;
                unint64_t v54 = *v11;
                if (*v11 <= v53) {
                  unint64_t v55 = v53;
                }
                else {
                  unint64_t v55 = *v11;
                }
                if (*v11 >= v53) {
                  unint64_t v54 = v53;
                }
                *double v11 = v55;
                v11[1] = v54;
                unint64_t v56 = v11[2];
                unint64_t v57 = *(a2 - 1);
                if (v56 <= v57) {
                  unint64_t v58 = *(a2 - 1);
                }
                else {
                  unint64_t v58 = v11[2];
                }
                if (v56 >= v57) {
                  unint64_t v56 = *(a2 - 1);
                }
                *(a2 - 1) = v56;
                unint64_t v59 = v11[1];
                if (v59 <= v58) {
                  unint64_t v60 = v58;
                }
                else {
                  unint64_t v60 = v11[1];
                }
                if (v59 >= v58) {
                  unint64_t v59 = v58;
                }
                v11[1] = v60;
                v11[2] = v59;
                break;
              case 5uLL:
                unint64_t v61 = *v11;
                unint64_t v62 = v11[1];
                if (*v11 <= v62) {
                  unint64_t v63 = v11[1];
                }
                else {
                  unint64_t v63 = *v11;
                }
                if (*v11 >= v62) {
                  unint64_t v61 = v11[1];
                }
                *double v11 = v63;
                v11[1] = v61;
                unint64_t v64 = v11[3];
                unint64_t v65 = *(a2 - 1);
                if (v64 <= v65) {
                  unint64_t v66 = *(a2 - 1);
                }
                else {
                  unint64_t v66 = v11[3];
                }
                if (v64 >= v65) {
                  unint64_t v64 = *(a2 - 1);
                }
                *(a2 - 1) = v64;
                v11[3] = v66;
                unint64_t v67 = *(a2 - 1);
                unint64_t v68 = v11[2];
                if (v67 <= v68) {
                  unint64_t v69 = v11[2];
                }
                else {
                  unint64_t v69 = *(a2 - 1);
                }
                if (v67 >= v68) {
                  unint64_t v67 = v11[2];
                }
                *(a2 - 1) = v67;
                unint64_t v71 = v11[2];
                unint64_t v70 = v11[3];
                unint64_t v72 = v11[1];
                if (v69 <= v70) {
                  unint64_t v71 = v11[3];
                }
                if (v69 < v70) {
                  unint64_t v70 = v69;
                }
                v11[2] = v71;
                v11[3] = v70;
                unint64_t v73 = *(a2 - 1);
                if (v72 <= v73) {
                  unint64_t v74 = *(a2 - 1);
                }
                else {
                  unint64_t v74 = v72;
                }
                if (v72 < v73) {
                  unint64_t v73 = v72;
                }
                *(a2 - 1) = v73;
                unint64_t v75 = *v11;
                unint64_t v77 = v11[2];
                unint64_t v76 = v11[3];
                if (v76 <= *v11) {
                  unint64_t v78 = *v11;
                }
                else {
                  unint64_t v78 = v11[3];
                }
                if (v76 >= *v11) {
                  unint64_t v76 = *v11;
                }
                if (v78 <= v77) {
                  unint64_t v75 = v11[2];
                }
                if (v78 < v77) {
                  unint64_t v77 = v78;
                }
                if (v76 <= v74) {
                  unint64_t v79 = v74;
                }
                else {
                  unint64_t v79 = v76;
                }
                if (v76 >= v74) {
                  unint64_t v76 = v74;
                }
                if (v79 <= v77) {
                  unint64_t v74 = v77;
                }
                *double v11 = v75;
                v11[1] = v74;
                if (v79 >= v77) {
                  unint64_t v80 = v77;
                }
                else {
                  unint64_t v80 = v79;
                }
                v11[2] = v80;
                v11[3] = v76;
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v81 = v11 + 1;
            BOOL v83 = v11 == a2 || v81 == a2;
            if (a5)
            {
              if (!v83)
              {
                uint64_t v84 = 8;
                uint64_t v85 = v11;
                do
                {
                  unint64_t v87 = *v85;
                  unint64_t v86 = v85[1];
                  uint64_t v85 = v81;
                  if (v86 > v87)
                  {
                    uint64_t v88 = v84;
                    do
                    {
                      *(unint64_t *)((char *)v11 + v88) = v87;
                      uint64_t v89 = v88 - 8;
                      if (v88 == 8)
                      {
                        uint64_t v90 = v11;
                        goto LABEL_158;
                      }
                      unint64_t v87 = *(unint64_t *)((char *)v11 + v88 - 16);
                      v88 -= 8;
                    }
                    while (v86 > v87);
                    uint64_t v90 = (unint64_t *)((char *)v11 + v89);
LABEL_158:
                    *uint64_t v90 = v86;
                  }
                  uint64_t v81 = v85 + 1;
                  v84 += 8;
                }
                while (v85 + 1 != a2);
              }
            }
            else if (!v83)
            {
              do
              {
                unint64_t v117 = *v10;
                unint64_t v116 = v10[1];
                double v10 = v81;
                if (v116 > v117)
                {
                  do
                  {
                    unint64_t *v81 = v117;
                    unint64_t v117 = *(v81 - 2);
                    --v81;
                  }
                  while (v116 > v117);
                  unint64_t *v81 = v116;
                }
                uint64_t v81 = v10 + 1;
              }
              while (v10 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v91 = (v13 - 2) >> 1;
              int64_t v92 = v91;
              do
              {
                int64_t v93 = v92;
                if (v91 >= v92)
                {
                  uint64_t v94 = (2 * v92) | 1;
                  CFStringRef v95 = &v11[v94];
                  if (2 * v93 + 2 < (uint64_t)v13)
                  {
                    unint64_t v97 = v95[1];
                    BOOL v96 = *v95 > v97;
                    if (*v95 < v97) {
                      unint64_t v97 = *v95;
                    }
                    if (v96)
                    {
                      ++v95;
                      uint64_t v94 = 2 * v93 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v97 = *v95;
                  }
                  uint64_t v98 = &v11[v93];
                  unint64_t v99 = *v98;
                  if (v97 <= *v98)
                  {
                    do
                    {
                      *uint64_t v98 = v97;
                      uint64_t v98 = v95;
                      if (v91 < v94) {
                        break;
                      }
                      uint64_t v100 = (2 * v94) | 1;
                      CFStringRef v95 = &v11[v100];
                      uint64_t v94 = 2 * v94 + 2;
                      if (v94 < (uint64_t)v13)
                      {
                        unint64_t v97 = *v95;
                        __n128 result = v95 + 1;
                        unint64_t v101 = v95[1];
                        BOOL v102 = *v95 > v101;
                        if (*v95 >= v101) {
                          unint64_t v97 = v95[1];
                        }
                        if (*v95 > v101) {
                          ++v95;
                        }
                        if (!v102) {
                          uint64_t v94 = v100;
                        }
                      }
                      else
                      {
                        unint64_t v97 = *v95;
                        uint64_t v94 = v100;
                      }
                    }
                    while (v97 <= v99);
                    *uint64_t v98 = v99;
                  }
                }
                int64_t v92 = v93 - 1;
              }
              while (v93);
              uint64_t v103 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v104 = 0;
                unint64_t v105 = *v11;
                uint64_t v106 = v11;
                do
                {
                  CFStringRef v107 = &v106[v104 + 1];
                  uint64_t v108 = (2 * v104) | 1;
                  uint64_t v104 = 2 * v104 + 2;
                  if (v104 < v103)
                  {
                    unint64_t v110 = *v107;
                    unint64_t v109 = v107[1];
                    if (*v107 >= v109) {
                      unint64_t v110 = v107[1];
                    }
                    if (*v107 <= v109) {
                      uint64_t v104 = v108;
                    }
                    else {
                      ++v107;
                    }
                  }
                  else
                  {
                    unint64_t v110 = *v107;
                    uint64_t v104 = v108;
                  }
                  *uint64_t v106 = v110;
                  uint64_t v106 = v107;
                }
                while (v104 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
                if (v107 == --a2)
                {
                  unint64_t *v107 = v105;
                }
                else
                {
                  unint64_t *v107 = *a2;
                  *a2 = v105;
                  uint64_t v111 = (char *)v107 - (char *)v11 + 8;
                  if (v111 >= 9)
                  {
                    unint64_t v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                    uint64_t v113 = &v11[v112];
                    unint64_t v114 = *v113;
                    unint64_t v115 = *v107;
                    if (*v113 > *v107)
                    {
                      do
                      {
                        unint64_t *v107 = v114;
                        CFStringRef v107 = v113;
                        if (!v112) {
                          break;
                        }
                        unint64_t v112 = (v112 - 1) >> 1;
                        uint64_t v113 = &v11[v112];
                        unint64_t v114 = *v113;
                      }
                      while (*v113 > v115);
                      unint64_t *v107 = v115;
                    }
                  }
                }
                BOOL v96 = v103-- <= 2;
              }
              while (!v96);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          int v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x401)
          {
            sub_216217D4C(v10, &v10[v13 >> 1], a2 - 1);
            sub_216217D4C(v10 + 1, v15 - 1, a2 - 2);
            sub_216217D4C(v10 + 2, &v10[v14 + 1], a2 - 3);
            __n128 result = sub_216217D4C(v15 - 1, v15, &v10[v14 + 1]);
            unint64_t v16 = *v10;
            *double v10 = *v15;
            *int v15 = v16;
          }
          else
          {
            __n128 result = sub_216217D4C(&v10[v13 >> 1], v10, a2 - 1);
          }
          --a4;
          unint64_t v17 = *v10;
          if ((a5 & 1) != 0 || *(v10 - 1) > v17) {
            break;
          }
          if (v17 <= *(a2 - 1))
          {
            unint64_t v32 = v10 + 1;
            do
            {
              double v11 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 <= *v11);
          }
          else
          {
            double v11 = v10;
            do
            {
              unint64_t v31 = v11[1];
              ++v11;
            }
            while (v17 <= v31);
          }
          uint64_t v33 = a2;
          if (v11 < a2)
          {
            uint64_t v33 = a2;
            do
              unint64_t v34 = *--v33;
            while (v17 > v34);
          }
          if (v11 < v33)
          {
            unint64_t v35 = *v11;
            unint64_t v36 = *v33;
            do
            {
              *double v11 = v36;
              unint64_t *v33 = v35;
              do
              {
                unint64_t v37 = v11[1];
                ++v11;
                unint64_t v35 = v37;
              }
              while (v17 <= v37);
              do
              {
                unint64_t v38 = *--v33;
                unint64_t v36 = v38;
              }
              while (v17 > v38);
            }
            while (v11 < v33);
          }
          uint64_t v39 = v11 - 1;
          BOOL v5 = v11 - 1 >= v10;
          BOOL v6 = v11 - 1 == v10;
          if (v11 - 1 != v10) {
            *double v10 = *v39;
          }
          a5 = 0;
          unint64_t *v39 = v17;
        }
        uint64_t v18 = 0;
        do
          unint64_t v19 = v10[++v18];
        while (v19 > v17);
        CFStringRef v20 = &v10[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *--v21;
          }
          while (v23 <= v17);
        }
        else
        {
          do
            unint64_t v22 = *--v21;
          while (v22 <= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v29 = v20 - 1;
        }
        else
        {
          unint64_t v24 = *v21;
          uint64_t v25 = &v10[v18];
          uint64_t v26 = v21;
          do
          {
            *uint64_t v25 = v24;
            *uint64_t v26 = v19;
            do
            {
              unint64_t v27 = v25[1];
              ++v25;
              unint64_t v19 = v27;
            }
            while (v27 > v17);
            do
            {
              unint64_t v28 = *--v26;
              unint64_t v24 = v28;
            }
            while (v28 <= v17);
          }
          while (v25 < v26);
          uint64_t v29 = v25 - 1;
        }
        if (v29 != v10) {
          *double v10 = *v29;
        }
        unint64_t *v29 = v17;
        if (v20 >= v21) {
          break;
        }
LABEL_33:
        __n128 result = (unint64_t *)sub_216217614(v10, v29, a3, a4, a5 & 1);
        a5 = 0;
        double v11 = v29 + 1;
      }
      BOOL v30 = sub_216217DBC(v10, v29);
      double v11 = v29 + 1;
      __n128 result = (unint64_t *)sub_216217DBC(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

unint64_t *sub_216217D4C(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      unint64_t v6 = *result;
      if (*a2 > *result)
      {
        *__n128 result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *__n128 result = v3;
      *a2 = v4;
      if (*a3 <= v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *__n128 result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_216217DBC(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      unint64_t v3 = *(a2 - 1);
      unint64_t v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      unint64_t v20 = a1[1];
      unint64_t v21 = *(a2 - 1);
      if (v20 <= v21) {
        unint64_t v22 = *(a2 - 1);
      }
      else {
        unint64_t v22 = a1[1];
      }
      if (v20 >= v21) {
        unint64_t v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      a1[1] = v22;
      unint64_t v23 = *(a2 - 1);
      if (v23 <= *a1) {
        unint64_t v24 = *a1;
      }
      else {
        unint64_t v24 = *(a2 - 1);
      }
      if (v23 >= *a1) {
        unint64_t v23 = *a1;
      }
      *(a2 - 1) = v23;
      unint64_t v26 = *a1;
      unint64_t v25 = a1[1];
      if (v24 <= v25) {
        unint64_t v26 = a1[1];
      }
      if (v24 < v25) {
        unint64_t v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      unint64_t v48 = a1[1];
      unint64_t v47 = a1[2];
      if (*a1 <= v47) {
        unint64_t v49 = a1[2];
      }
      else {
        unint64_t v49 = *a1;
      }
      if (*a1 < v47) {
        unint64_t v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      unint64_t v50 = *(a2 - 1);
      if (v48 <= v50) {
        unint64_t v51 = *(a2 - 1);
      }
      else {
        unint64_t v51 = v48;
      }
      if (v48 < v50) {
        unint64_t v50 = v48;
      }
      *(a2 - 1) = v50;
      unint64_t v52 = *a1;
      if (*a1 <= v51) {
        unint64_t v53 = v51;
      }
      else {
        unint64_t v53 = *a1;
      }
      if (*a1 >= v51) {
        unint64_t v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      unint64_t v54 = a1[2];
      unint64_t v55 = *(a2 - 1);
      if (v54 <= v55) {
        unint64_t v56 = *(a2 - 1);
      }
      else {
        unint64_t v56 = a1[2];
      }
      if (v54 >= v55) {
        unint64_t v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      unint64_t v57 = a1[1];
      if (v57 <= v56) {
        unint64_t v58 = v56;
      }
      else {
        unint64_t v58 = a1[1];
      }
      if (v57 >= v56) {
        unint64_t v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      unint64_t v27 = *a1;
      unint64_t v28 = a1[1];
      if (*a1 <= v28) {
        unint64_t v29 = a1[1];
      }
      else {
        unint64_t v29 = *a1;
      }
      if (*a1 >= v28) {
        unint64_t v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      unint64_t v30 = a1[3];
      unint64_t v31 = *(a2 - 1);
      if (v30 <= v31) {
        unint64_t v32 = *(a2 - 1);
      }
      else {
        unint64_t v32 = a1[3];
      }
      if (v30 >= v31) {
        unint64_t v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      a1[3] = v32;
      unint64_t v33 = *(a2 - 1);
      unint64_t v34 = a1[2];
      if (v33 <= v34) {
        unint64_t v35 = a1[2];
      }
      else {
        unint64_t v35 = *(a2 - 1);
      }
      if (v33 >= v34) {
        unint64_t v33 = a1[2];
      }
      *(a2 - 1) = v33;
      unint64_t v37 = a1[2];
      unint64_t v36 = a1[3];
      unint64_t v38 = a1[1];
      if (v35 <= v36) {
        unint64_t v37 = a1[3];
      }
      if (v35 < v36) {
        unint64_t v36 = v35;
      }
      a1[2] = v37;
      a1[3] = v36;
      unint64_t v39 = *(a2 - 1);
      if (v38 <= v39) {
        unint64_t v40 = *(a2 - 1);
      }
      else {
        unint64_t v40 = v38;
      }
      if (v38 < v39) {
        unint64_t v39 = v38;
      }
      *(a2 - 1) = v39;
      unint64_t v41 = *a1;
      unint64_t v43 = a1[2];
      unint64_t v42 = a1[3];
      if (v42 <= *a1) {
        unint64_t v44 = *a1;
      }
      else {
        unint64_t v44 = a1[3];
      }
      if (v42 >= *a1) {
        unint64_t v42 = *a1;
      }
      if (v44 <= v43) {
        unint64_t v41 = a1[2];
      }
      if (v44 < v43) {
        unint64_t v43 = v44;
      }
      if (v42 <= v40) {
        unint64_t v45 = v40;
      }
      else {
        unint64_t v45 = v42;
      }
      if (v42 >= v40) {
        unint64_t v42 = v40;
      }
      if (v45 <= v43) {
        unint64_t v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43) {
        unint64_t v46 = v43;
      }
      else {
        unint64_t v46 = v45;
      }
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      unint64_t v6 = a1 + 2;
      unint64_t v5 = a1[2];
      unint64_t v8 = *a1;
      unint64_t v7 = a1[1];
      if (v7 <= v5) {
        unint64_t v9 = a1[2];
      }
      else {
        unint64_t v9 = a1[1];
      }
      if (v7 < v5) {
        unint64_t v5 = a1[1];
      }
      if (v5 <= v8) {
        unint64_t v10 = *a1;
      }
      else {
        unint64_t v10 = v5;
      }
      if (v5 >= v8) {
        unint64_t v5 = *a1;
      }
      *unint64_t v6 = v5;
      if (v10 <= v9) {
        unint64_t v11 = v9;
      }
      else {
        unint64_t v11 = v8;
      }
      if (v10 >= v9) {
        unint64_t v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    unint64_t v15 = *v12;
    unint64_t v16 = *v6;
    if (*v12 > v16)
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 8;
        if (v17 == 8) {
          break;
        }
        unint64_t v16 = *(unint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (v15 <= v16)
        {
          unint64_t v19 = (unint64_t *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      unint64_t v19 = a1;
LABEL_27:
      unint64_t *v19 = v15;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    unint64_t v6 = v12;
    v14 += 8;
    if (++v12 == a2) {
      return 1;
    }
  }
}

uint64_t sub_21621806C(uint64_t a1, int a2, int a3)
{
  int v5 = a2;
  int v4 = a3;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

uint64_t sub_2162180C4(uint64_t a1, int a2, int a3)
{
  int v5 = a2;
  int v4 = a3;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

uint64_t *sub_21621811C(void *a1, void *a2)
{
  __n128 result = (uint64_t *)sub_2161DE698(a1, a2);
  if (result)
  {
    sub_216218154(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_216218154(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_2161DF850(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_216218198(float *a1, void *a2, uint64_t a3, void **a4)
{
  unsigned int v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 144))();
  unint64_t v9 = v8;
  unint64_t v10 = *((void *)a1 + 1);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v10 <= v8) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if ((*(uint64_t (**)(void, void))(*(void *)v14[2] + 152))(v14[2], *a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = 0;
  v14[1] = v9;
  v14[2] = **a4;
  v14[3] = 0;
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *((void *)a1 + 1);
    if (*(void *)&prime > v10) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          unint64_t v22 = operator new(8 * *(void *)&prime);
          unint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          unint64_t v25 = (void *)*((void *)a1 + 2);
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = a1 + 4;
            unint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *unint64_t v25 = *v31;
                  void *v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  unint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_55:
                unint64_t v25 = v31;
                unint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v10 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  unint64_t v33 = *(void **)a1;
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  if (v34)
  {
    *uint64_t v14 = *v34;
LABEL_72:
    *unint64_t v34 = v14;
    goto LABEL_73;
  }
  *uint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v33[v4] = a1 + 4;
  if (*v14)
  {
    unint64_t v35 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10) {
        v35 %= v10;
      }
    }
    else
    {
      v35 &= v10 - 1;
    }
    unint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v14;
}

void sub_2162185E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2162185F8(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    __n128 result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_21621865C(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    unsigned int v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      uint64_t v9 = *(void *)(a3 + 24);
      if (!v9) {
        sub_21610B7AC();
      }
      unint64_t v10 = a2 - 1;
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v9 + 48))(v9, a2 - 1, v8);
      if (result)
      {
        uint64_t v11 = *v8;
        *unsigned int v8 = *v10;
        *unint64_t v10 = v11;
      }
    }
    else
    {
      unint64_t v12 = a4;
      if ((uint64_t)a4 <= 0)
      {
        return sub_2162188B8(result, a2, a3);
      }
      else
      {
        uint64_t v14 = a5;
        unint64_t v15 = a4 >> 1;
        float v16 = (uint64_t *)(result + 8 * (a4 >> 1));
        unint64_t v17 = a4 >> 1;
        if ((uint64_t)v12 <= a6)
        {
          sub_216218AAC(result, v16, a3, v17, a5);
          sub_216218AAC((uint64_t)&v8[v12 >> 1], a2, a3, v12 - (v12 >> 1), &v14[v15]);
          __n128 result = sub_216218EC0((uint64_t)v14, &v14[v15], &v14[v15], &v14[v12], v8, a3);
          if (v14)
          {
            do
            {
              __n128 result = *v14;
              *uint64_t v14 = 0;
              if (result) {
                __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
              }
              ++v14;
              --v12;
            }
            while (v12);
          }
        }
        else
        {
          sub_21621865C(result, v16, a3, v17, a5, a6);
          sub_21621865C(&v8[v12 >> 1], a2, a3, v12 - (v12 >> 1), v14, a6);
          return sub_21621907C((uint64_t)v8, &v8[v12 >> 1], (uint64_t)a2, a3, v12 >> 1, v12 - (v12 >> 1), v14, a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2162188B8(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    BOOL v4 = (uint64_t *)result;
    int v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      unsigned int v8 = (void *)result;
      do
      {
        uint64_t v9 = *(void *)(a3 + 24);
        if (!v9) {
          sub_21610B7AC();
        }
        unint64_t v10 = v5;
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v9 + 48))(v9, v5, v8);
        if (result)
        {
          uint64_t v11 = *v10;
          *unint64_t v10 = 0;
          uint64_t v21 = v11;
          uint64_t v12 = v7;
          while (1)
          {
            int v13 = (uint64_t *)((char *)v4 + v12);
            uint64_t v15 = *(uint64_t *)((char *)v4 + v12);
            uint64_t v14 = *(uint64_t *)((char *)v4 + v12 + 8);
            *int v13 = 0;
            v13[1] = v15;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
            }
            if (!v12) {
              break;
            }
            uint64_t v16 = *(void *)(a3 + 24);
            if (!v16) {
              sub_21610B7AC();
            }
            char v17 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v16 + 48))(v16, &v21, (uint64_t)v4 + v12 - 8);
            v12 -= 8;
            if ((v17 & 1) == 0)
            {
              BOOL v18 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_14;
            }
          }
          BOOL v18 = v4;
LABEL_14:
          uint64_t v19 = v21;
          uint64_t v21 = 0;
          uint64_t v20 = *v18;
          *BOOL v18 = v19;
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
          }
          __n128 result = v21;
          uint64_t v21 = 0;
          if (result) {
            __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
          }
        }
        int v5 = v10 + 1;
        v7 += 8;
        unsigned int v8 = v10;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

void sub_216218A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216218AAC(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v9 = (uint64_t *)result;
    if (a4 == 2)
    {
      uint64_t v11 = *(void *)(a3 + 24);
      if (!v11) {
        sub_21610B7AC();
      }
      uint64_t v12 = a2 - 1;
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, a2 - 1, v9);
      if (result) {
        int v13 = v12;
      }
      else {
        int v13 = v9;
      }
      if (result) {
        uint64_t v14 = v9;
      }
      else {
        uint64_t v14 = v12;
      }
      uint64_t v15 = *v13;
      *int v13 = 0;
      *a5 = v15;
      uint64_t v16 = *v14;
      *uint64_t v14 = 0;
      a5[1] = v16;
    }
    else if (a4 == 1)
    {
      uint64_t v10 = *(void *)result;
      *(void *)__n128 result = 0;
      *a5 = v10;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v33 = (uint64_t *)(result + 8 * (a4 >> 1));
      sub_21621865C(result, v33, a3, a4 >> 1, a5, a4 >> 1);
      __n128 result = sub_21621865C(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      uint64_t v34 = 0;
      unint64_t v35 = &v9[a4 >> 1];
      while (v35 != a2)
      {
        uint64_t v36 = *(void *)(a3 + 24);
        if (!v36) {
          sub_21610B7AC();
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v36 + 48))(v36, v35, v9);
        if (result)
        {
          uint64_t v37 = *v35;
          *v35++ = 0;
        }
        else
        {
          uint64_t v37 = *v9;
          *v9++ = 0;
        }
        uint64_t v38 = v34 + 1;
        a5[v34++] = v37;
        if (v9 == v33)
        {
          if (v35 != a2)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = v35[v39];
              v35[v39] = 0;
              a5[v39 + v38] = v40;
              ++v39;
            }
            while (&v35[v39] != a2);
          }
          return result;
        }
      }
      if (v9 != v33)
      {
        uint64_t v41 = 0;
        do
        {
          uint64_t v42 = v9[v41];
          v9[v41] = 0;
          a5[v41 + v34] = v42;
          ++v41;
        }
        while (&v9[v41] != v33);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      uint64_t v17 = *(void *)result;
      *(void *)__n128 result = 0;
      BOOL v18 = (uint64_t *)(result + 8);
      *a5 = v17;
      if ((uint64_t *)(result + 8) != a2)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 1;
        uint64_t v21 = a5;
        do
        {
          uint64_t v22 = *(void *)(a3 + 24);
          if (!v22) {
LABEL_49:
          }
            sub_21610B7AC();
          unint64_t v23 = v21;
          __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v22 + 48))(v22, v18, v21++);
          ++v20;
          if (result)
          {
            uint64_t v24 = *v23;
            *unint64_t v23 = 0;
            v23[1] = v24;
            unint64_t v25 = a5;
            if (v23 != a5)
            {
              uint64_t v26 = v19;
              while (1)
              {
                uint64_t v27 = *(void *)(a3 + 24);
                if (!v27) {
                  goto LABEL_49;
                }
                unint64_t v28 = (uint64_t *)((char *)a5 + v26 - 8);
                if (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v27 + 48))(v27, v18, v28))break; {
                uint64_t v29 = *v28;
                }
                *unint64_t v28 = 0;
                uint64_t v30 = *(uint64_t *)((char *)a5 + v26);
                *(uint64_t *)((char *)a5 + v26) = v29;
                if (v30) {
                  (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
                }
                v26 -= 8;
                if (!v26)
                {
                  unint64_t v25 = a5;
                  goto LABEL_30;
                }
              }
              unint64_t v25 = (uint64_t *)((char *)a5 + v26);
            }
LABEL_30:
            uint64_t v32 = *v18;
            *BOOL v18 = 0;
            __n128 result = *v25;
            *unint64_t v25 = v32;
            if (result) {
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            }
          }
          else
          {
            uint64_t v31 = *v18;
            *BOOL v18 = 0;
            *uint64_t v21 = v31;
          }
          ++v18;
          v19 += 8;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_216218EC0(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  if ((uint64_t *)result == a2)
  {
LABEL_17:
    while (a3 != a4)
    {
      uint64_t v15 = *a3;
      *a3 = 0;
      __n128 result = *a5;
      *a5 = v15;
      if (result) {
        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      }
      ++a3;
      ++a5;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      uint64_t v12 = *(void *)(a6 + 24);
      if (!v12) {
        sub_21610B7AC();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, a3, v11))
      {
        uint64_t v13 = *a3;
        *a3 = 0;
        __n128 result = *a5;
        *a5 = v13;
        if (result) {
          __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        }
        ++a3;
      }
      else
      {
        uint64_t v14 = *v11;
        *uint64_t v11 = 0;
        __n128 result = *a5;
        *a5 = v14;
        if (result) {
          __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        }
        ++v11;
      }
      ++a5;
      if (v11 == a2) {
        goto LABEL_17;
      }
    }
    if (v11 != a2)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = v11[v16];
        v11[v16] = 0;
        __n128 result = a5[v16];
        a5[v16] = v17;
        if (result) {
          __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        }
        ++v16;
      }
      while (&v11[v16] != a2);
    }
  }
  return result;
}

uint64_t sub_21621907C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v55 = a6;
  if (a6)
  {
    uint64_t v11 = (uint64_t *)result;
    while (a5 > a8 && v55 > a8)
    {
      if (!a5) {
        return result;
      }
      unint64_t v12 = 0;
      uint64_t v13 = -a5;
      while (1)
      {
        uint64_t v14 = *(void *)(a4 + 24);
        if (!v14) {
          sub_21610B7AC();
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v14 + 48))(v14, a2, &v11[v12 / 8]);
        if (result) {
          break;
        }
        v12 += 8;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = v55;
      if (-v13 >= v55)
      {
        if (v13 == -1)
        {
          uint64_t v48 = v11[v12 / 8];
          v11[v12 / 8] = *a2;
          *a2 = v48;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v22 = -v13;
        }
        else {
          uint64_t v22 = 1 - v13;
        }
        sub_21621987C((uint64_t)v56, a4);
        uint64_t v50 = v22 >> 1;
        uint64_t v19 = &v11[(v22 >> 1) + v12 / 8];
        BOOL v18 = a2;
        if (a2 != (uint64_t *)a3)
        {
          unint64_t v23 = (a3 - (uint64_t)a2) >> 3;
          BOOL v18 = a2;
          do
          {
            if (!v57) {
              sub_21610B7AC();
            }
            uint64_t v24 = &v18[v23 >> 1];
            int v25 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v57 + 48))(v57, v24, v19);
            if (v25) {
              v23 += ~(v23 >> 1);
            }
            else {
              v23 >>= 1;
            }
            if (v25) {
              BOOL v18 = v24 + 1;
            }
          }
          while (v23);
        }
        sub_216199290(v56);
        uint64_t v51 = v18 - a2;
        uint64_t v16 = v55;
      }
      else
      {
        if (v55 >= 0) {
          uint64_t v17 = v55;
        }
        else {
          uint64_t v17 = v55 + 1;
        }
        uint64_t v51 = v17 >> 1;
        BOOL v18 = &a2[v17 >> 1];
        uint64_t v19 = a2;
        if ((char *)a2 - (char *)v11 != v12)
        {
          unint64_t v20 = (uint64_t)((char *)a2 - (char *)v11 - v12) >> 3;
          uint64_t v19 = &v11[v12 / 8];
          do
          {
            uint64_t v21 = *(void *)(a4 + 24);
            if (!v21) {
              sub_21610B7AC();
            }
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, v18, &v19[v20 >> 1]))
            {
              v20 >>= 1;
            }
            else
            {
              v19 += (v20 >> 1) + 1;
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
          uint64_t v16 = v55;
        }
        uint64_t v50 = (uint64_t)((char *)v19 - (char *)v11 - v12) >> 3;
      }
      if (v19 == a2)
      {
        uint64_t v26 = v18;
      }
      else if (v18 == a2)
      {
        uint64_t v26 = v19;
      }
      else
      {
        uint64_t v26 = sub_2162197F4(v19, a2, v18);
      }
      a5 = -(v50 + v13);
      uint64_t v27 = v16;
      uint64_t v28 = v16 - v51;
      if (v50 + v51 >= v27 - (v50 + v51) - v13)
      {
        __n128 result = sub_21621907C(v26, v18, a3, a4, -(v50 + v13), v28, a7, a8);
        a2 = v19;
        a5 = v50;
        uint64_t v28 = v51;
        a3 = (uint64_t)v26;
        uint64_t v11 = (uint64_t *)((char *)v11 + v12);
      }
      else
      {
        __n128 result = sub_21621907C(&v11[v12 / 8], v19, v26, a4, v50, v51, a7, a8);
        uint64_t v11 = v26;
        a2 = v18;
      }
      uint64_t v55 = v28;
      if (!v28) {
        return result;
      }
    }
    if (a5 <= v55)
    {
      if (v11 != a2)
      {
        uint64_t v40 = 0;
        unint64_t v30 = 0;
        uint64_t v31 = a7;
        do
        {
          uint64_t v41 = v11[v40];
          v11[v40] = 0;
          a7[v40] = v41;
          ++v30;
          ++v40;
        }
        while (&v11[v40] != a2);
        if (!(v40 * 8)) {
          goto LABEL_83;
        }
        uint64_t v42 = &a7[v40];
        unint64_t v43 = v11;
        unint64_t v44 = a7;
        do
        {
          if (a2 == (uint64_t *)a3)
          {
            __n128 result = sub_2162196F0((uint64_t)v44, v42, v43);
            break;
          }
          uint64_t v45 = *(void *)(a4 + 24);
          if (!v45) {
            sub_21610B7AC();
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v45 + 48))(v45, a2, v44))
          {
            uint64_t v46 = *a2;
            *a2 = 0;
            __n128 result = *v11;
            *uint64_t v11 = v46;
            if (result) {
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            }
            ++a2;
          }
          else
          {
            uint64_t v47 = *v44;
            *unint64_t v44 = 0;
            __n128 result = *v11;
            *uint64_t v11 = v47;
            if (result) {
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            }
            ++v44;
          }
          ++v11;
          ++v43;
        }
        while (v42 != v44);
LABEL_83:
        if (v31)
        {
          unint64_t v49 = 0;
          do
          {
            __n128 result = a7[v49];
            a7[v49] = 0;
            if (result) {
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            }
            ++v49;
          }
          while (v49 < v30);
        }
      }
    }
    else if ((uint64_t *)a3 != a2)
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      uint64_t v31 = a7;
      do
      {
        uint64_t v32 = a2[v29];
        a2[v29] = 0;
        a7[v29] = v32;
        ++v30;
        ++v29;
      }
      while (&a2[v29] != (uint64_t *)a3);
      if (!(v29 * 8)) {
        goto LABEL_83;
      }
      uint64_t v33 = (uint64_t)&a7[v29];
      uint64_t v34 = (uint64_t *)(a3 - 8);
      while (1)
      {
        if (a2 == v11)
        {
          __n128 result = sub_216219774(v33, a7, a3);
          goto LABEL_83;
        }
        uint64_t v35 = *(void *)(a4 + 24);
        if (!v35) {
          sub_21610B7AC();
        }
        uint64_t v36 = a2 - 1;
        uint64_t v37 = (uint64_t *)(v33 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v35 + 48))(v35, v33 - 8, a2 - 1)) {
          break;
        }
        uint64_t v39 = *v37;
        uint64_t *v37 = 0;
        __n128 result = *v34;
        *uint64_t v34 = v39;
        uint64_t v36 = a2;
        v33 -= 8;
        if (result) {
          goto LABEL_61;
        }
LABEL_62:
        a3 -= 8;
        --v34;
        a2 = v36;
        if ((void *)v33 == a7) {
          goto LABEL_83;
        }
      }
      uint64_t v38 = *v36;
      *uint64_t v36 = 0;
      __n128 result = *v34;
      *uint64_t v34 = v38;
      if (!result) {
        goto LABEL_62;
      }
LABEL_61:
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      goto LABEL_62;
    }
  }
  return result;
}

void sub_216219670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a12)
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void *)(a12 + 8 * v18);
      *(void *)(a12 + 8 * v18) = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
      }
      ++v18;
    }
    while (v18 < v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162196F0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)result != a2)
  {
    int v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = *v5;
      *int v5 = 0;
      __n128 result = *a3;
      *a3 = v6;
      if (result) {
        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_216219774(uint64_t result, void *a2, uint64_t a3)
{
  if ((void *)result != a2)
  {
    BOOL v4 = (void *)result;
    int v5 = (uint64_t *)(a3 - 8);
    do
    {
      uint64_t v6 = *--v4;
      *BOOL v4 = 0;
      __n128 result = *v5;
      *int v5 = v6;
      if (result) {
        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      }
      --v5;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t *sub_2162197F4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  __n128 result = a1 + 1;
  for (uint64_t i = a2; ; *result++ = *i)
  {
    *i++ = v3;
    if (i == a3) {
      break;
    }
    if (result == a2) {
      a2 = i;
    }
    uint64_t v3 = *result;
  }
  if (result != a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = a2;
    while (1)
    {
      unsigned int v8 = v6;
      while (1)
      {
        uint64_t v9 = *v6;
        *v8++ = *v7;
        *v7++ = v9;
        if (v7 != a3) {
          break;
        }
        uint64_t v6 = v8;
        uint64_t v7 = a2;
        if (v8 == a2) {
          return result;
        }
      }
      if (v8 == a2) {
        a2 = v7;
      }
      ++v6;
    }
  }
  return result;
}

uint64_t sub_21621987C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_216219914(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      uint64_t v7 = *(void *)(a2 - 8);
      uint64_t v8 = *(void *)result;
      if (*(void *)(v7 + 8) < *(void *)(*(void *)result + 8))
      {
        *(void *)__n128 result = v7;
        *(void *)(a2 - 8) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (result != a2)
      {
        uint64_t v15 = (uint64_t *)(result + 8);
        if (result + 8 != a2)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (uint64_t *)result;
          do
          {
            uint64_t v18 = *v17;
            uint64_t v17 = v15;
            uint64_t v19 = *v15;
            if (*(void *)(*v15 + 8) < *(void *)(v18 + 8))
            {
              uint64_t v20 = 0;
              *uint64_t v15 = 0;
              for (uint64_t i = v16; ; i -= 8)
              {
                uint64_t v22 = (uint64_t *)((char *)v6 + i);
                *uint64_t v22 = 0;
                v22[1] = v18;
                if (v20) {
                  (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
                }
                if (!i) {
                  break;
                }
                unint64_t v23 = (uint64_t *)((char *)v6 + i);
                uint64_t v18 = *(uint64_t *)((char *)v6 + i - 8);
                if (*(void *)(v19 + 8) >= *(void *)(v18 + 8)) {
                  goto LABEL_22;
                }
                uint64_t v20 = *v22;
              }
              unint64_t v23 = v6;
LABEL_22:
              __n128 result = *v23;
              *unint64_t v23 = v19;
              if (result) {
                __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
              }
            }
            uint64_t v15 = v17 + 1;
            v16 += 8;
          }
          while (v17 + 1 != (uint64_t *)a2);
        }
      }
    }
    else
    {
      uint64_t v11 = a4;
      unint64_t v12 = a3 >> 1;
      uint64_t v13 = result + 8 * (a3 >> 1);
      unint64_t v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_216219D0C(result, v13, v14, a4);
        uint64_t v24 = &v11[v12];
        __n128 result = sub_216219D0C((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v24);
        int v25 = &v11[a3];
        uint64_t v26 = v24;
        uint64_t v27 = v11;
        while (v26 != v25)
        {
          uint64_t v28 = *v26;
          uint64_t v29 = *v27;
          if (*(void *)(*v26 + 8) >= *(void *)(*v27 + 8))
          {
            *uint64_t v27 = 0;
            __n128 result = *v6;
            *uint64_t v6 = v29;
            if (result) {
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            }
            ++v27;
          }
          else
          {
            *uint64_t v26 = 0;
            __n128 result = *v6;
            *uint64_t v6 = v28;
            if (result) {
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            }
            ++v26;
          }
          ++v6;
          if (v27 == v24)
          {
            if (v26 != v25)
            {
              uint64_t v30 = 0;
              do
              {
                uint64_t v31 = v26[v30];
                v26[v30] = 0;
                __n128 result = v6[v30];
                v6[v30] = v31;
                if (result) {
                  __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
                }
                ++v30;
              }
              while (&v26[v30] != v25);
            }
            goto LABEL_47;
          }
        }
        if (v27 != v24)
        {
          uint64_t v32 = 0;
          do
          {
            uint64_t v33 = v27[v32];
            v27[v32] = 0;
            __n128 result = v6[v32];
            v6[v32] = v33;
            if (result) {
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            }
            ++v32;
          }
          while (&v27[v32] != v24);
        }
LABEL_47:
        if (v11)
        {
          unint64_t v34 = a3;
          do
          {
            __n128 result = *v11;
            *uint64_t v11 = 0;
            if (result) {
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            }
            ++v11;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        sub_216219914(result, v13, v14, a4, a5);
        sub_216219914(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v11, a5);
        return sub_216219F70((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
  return result;
}

void sub_216219CBC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v1 + 8 * v4);
      *(void *)(v1 + 8 * v4) = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      }
      ++v4;
    }
    while (v4 < v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216219D0C(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_11:
      uint64_t v13 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      *unint64_t v4 = v13;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(void *)(a2 - 8);
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v10 = *(void *)(*(void *)result + 8);
      BOOL v11 = v9 < v10;
      if (v9 >= v10) {
        unint64_t v12 = (void *)result;
      }
      else {
        unint64_t v12 = (void *)(a2 - 8);
      }
      if (!v11) {
        uint64_t v8 = *(void *)result;
      }
      *unint64_t v12 = 0;
      *a4 = v8;
      unint64_t v4 = a4 + 1;
      if (!v11) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_11;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v27 = result + 8 * (a3 >> 1);
      sub_216219914(result, v27, a3 >> 1, a4, a3 >> 1);
      __n128 result = sub_216219914(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v28 = v6 + 8 * (a3 >> 1);
      while (v28 != a2)
      {
        uint64_t v29 = *(void *)v28;
        uint64_t v30 = *(void *)v6;
        if (*(void *)(*(void *)v28 + 8) >= *(void *)(*(void *)v6 + 8))
        {
          *(void *)uint64_t v6 = 0;
          v6 += 8;
          uint64_t v29 = v30;
        }
        else
        {
          *(void *)unint64_t v28 = 0;
          v28 += 8;
        }
        *v4++ = v29;
        if (v6 == v27)
        {
          if (v28 != a2)
          {
            unint64_t v31 = 0;
            do
            {
              uint64_t v32 = *(void *)(v28 + v31);
              *(void *)(v28 + v31) = 0;
              v4[v31 / 8] = v32;
              v31 += 8;
            }
            while (v28 + v31 != a2);
          }
          return result;
        }
      }
      if (v6 != v27)
      {
        unint64_t v33 = 0;
        do
        {
          uint64_t v34 = *(void *)(v6 + v33);
          *(void *)(v6 + v33) = 0;
          v4[v33 / 8] = v34;
          v33 += 8;
        }
        while (v6 + v33 != v27);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *(void *)result;
      *(void *)__n128 result = 0;
      uint64_t v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a4;
        do
        {
          uint64_t v18 = v17;
          uint64_t v20 = *v17++;
          uint64_t v19 = v20;
          uint64_t v21 = *(void *)v15;
          if (*(void *)(*(void *)v15 + 8) >= *(void *)(v20 + 8))
          {
            *(void *)uint64_t v15 = 0;
            uint64_t *v17 = v21;
          }
          else
          {
            *uint64_t v18 = 0;
            v18[1] = v19;
            uint64_t v22 = v4;
            if (v18 != v4)
            {
              uint64_t v23 = v16;
              while (1)
              {
                uint64_t v22 = (uint64_t *)((char *)v4 + v23);
                uint64_t v24 = *(uint64_t *)((char *)v4 + v23 - 8);
                if (*(void *)(*(void *)v15 + 8) >= *(void *)(v24 + 8)) {
                  break;
                }
                uint64_t v25 = *v22;
                *(v22 - 1) = 0;
                *uint64_t v22 = v24;
                if (v25) {
                  (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
                }
                v23 -= 8;
                if (!v23)
                {
                  uint64_t v22 = v4;
                  break;
                }
              }
            }
            uint64_t v26 = *(void *)v15;
            *(void *)uint64_t v15 = 0;
            __n128 result = *v22;
            *uint64_t v22 = v26;
            if (result) {
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            }
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_216219F70(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    BOOL v11 = (uint64_t *)result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return result;
      }
      unint64_t v12 = 0;
      uint64_t v13 = -a4;
      while (1)
      {
        uint64_t v14 = v11[v12 / 8];
        if (*(void *)(*a2 + 8) < *(void *)(v14 + 8)) {
          break;
        }
        v12 += 8;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      unint64_t v67 = a6;
      if (-v13 >= v8)
      {
        if (v13 == -1)
        {
          v11[v12 / 8] = *a2;
          *a2 = v14;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v26 = -v13;
        }
        else {
          uint64_t v26 = 1 - v13;
        }
        uint64_t v25 = v26 >> 1;
        uint64_t v19 = &v11[(v26 >> 1) + v12 / 8];
        uint64_t v18 = a2;
        if (a2 != (uint64_t *)a3)
        {
          unint64_t v27 = (a3 - (uint64_t)a2) >> 3;
          uint64_t v18 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v18[v27 >> 1];
            uint64_t v31 = *v29;
            uint64_t v30 = v29 + 1;
            v27 += ~(v27 >> 1);
            if (*(void *)(v31 + 8) < *(void *)(*v19 + 8)) {
              uint64_t v18 = v30;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v17 = v18 - a2;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v16 = v8;
        }
        else {
          uint64_t v16 = v8 + 1;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = &a2[v16 >> 1];
        uint64_t v19 = a2;
        if ((char *)a2 - (char *)v11 != v12)
        {
          unint64_t v20 = (uint64_t)((char *)a2 - (char *)v11 - v12) >> 3;
          uint64_t v19 = &v11[v12 / 8];
          do
          {
            unint64_t v21 = v20 >> 1;
            uint64_t v22 = &v19[v20 >> 1];
            uint64_t v24 = *v22;
            uint64_t v23 = v22 + 1;
            v20 += ~(v20 >> 1);
            if (*(void *)(*v18 + 8) < *(void *)(v24 + 8)) {
              unint64_t v20 = v21;
            }
            else {
              uint64_t v19 = v23;
            }
          }
          while (v20);
        }
        uint64_t v25 = (uint64_t)((char *)v19 - (char *)v11 - v12) >> 3;
      }
      unint64_t v66 = &v11[v12 / 8];
      if (v19 == a2)
      {
        uint64_t v38 = v18;
      }
      else if (v18 == a2)
      {
        uint64_t v38 = v19;
      }
      else
      {
        uint64_t v32 = a2;
        uint64_t v33 = a3;
        uint64_t v34 = a7;
        uint64_t v35 = v25;
        uint64_t v36 = v17;
        uint64_t v37 = sub_2162197F4(v19, v32, v18);
        uint64_t v17 = v36;
        uint64_t v25 = v35;
        a7 = v34;
        a3 = v33;
        uint64_t v38 = v37;
      }
      a4 = -(v25 + v13);
      uint64_t v39 = v8 - v17;
      if (v25 + v17 >= v8 - (v25 + v17) - v13)
      {
        uint64_t v44 = v25;
        uint64_t v45 = -(v25 + v13);
        uint64_t v46 = v17;
        uint64_t v43 = a7;
        __n128 result = sub_216219F70(v38, v18, a3, v45, v39, v67);
        a2 = v19;
        a6 = v67;
        uint64_t v39 = v46;
        a4 = v44;
        a3 = (uint64_t)v38;
        BOOL v11 = v66;
      }
      else
      {
        uint64_t v40 = &v11[v12 / 8];
        uint64_t v41 = v19;
        uint64_t v42 = a3;
        a6 = v67;
        uint64_t v43 = a7;
        __n128 result = sub_216219F70(v40, v41, v38, v25, v17, v67);
        a3 = v42;
        BOOL v11 = v38;
        a2 = v18;
      }
      uint64_t v8 = v39;
      a7 = v43;
      if (!v39) {
        return result;
      }
    }
    if (a4 > v8)
    {
      if ((uint64_t *)a3 == a2) {
        return result;
      }
      uint64_t v47 = 0;
      unint64_t v48 = 0;
      do
      {
        uint64_t v49 = a2[v47];
        a2[v47] = 0;
        a6[v47] = v49;
        ++v48;
        ++v47;
      }
      while (&a2[v47] != (uint64_t *)a3);
      if (!(v47 * 8)) {
        goto LABEL_75;
      }
      uint64_t v50 = (uint64_t)&a6[v47];
      uint64_t v51 = (uint64_t *)(a3 - 8);
      while (1)
      {
        if (a2 == v11)
        {
          __n128 result = sub_216219774(v50, a6, a3);
          goto LABEL_75;
        }
        unint64_t v53 = a2 - 1;
        uint64_t v52 = *(a2 - 1);
        uint64_t v54 = *(void *)(v50 - 8);
        if (*(void *)(v54 + 8) < *(void *)(v52 + 8)) {
          break;
        }
        *(void *)(v50 - 8) = 0;
        __n128 result = *v51;
        uint64_t *v51 = v54;
        unint64_t v53 = a2;
        v50 -= 8;
        if (result) {
          goto LABEL_54;
        }
LABEL_55:
        a3 -= 8;
        --v51;
        a2 = v53;
        if ((void *)v50 == a6) {
          goto LABEL_75;
        }
      }
      *unint64_t v53 = 0;
      __n128 result = *v51;
      uint64_t *v51 = v52;
      if (!result) {
        goto LABEL_55;
      }
LABEL_54:
      uint64_t v55 = a3;
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      a3 = v55;
      goto LABEL_55;
    }
    if (v11 != a2)
    {
      uint64_t v56 = 0;
      unint64_t v48 = 0;
      do
      {
        uint64_t v57 = v11[v56];
        v11[v56] = 0;
        a6[v56] = v57;
        ++v48;
        ++v56;
      }
      while (&v11[v56] != a2);
      if (!(v56 * 8)) {
        goto LABEL_75;
      }
      uint64_t v58 = &a6[v56];
      unint64_t v59 = v11;
      uint64_t v60 = (uint64_t)a6;
      do
      {
        if (a2 == (uint64_t *)a3)
        {
          __n128 result = sub_2162196F0(v60, v58, v59);
          break;
        }
        uint64_t v61 = *a2;
        uint64_t v62 = *(void *)v60;
        if (*(void *)(*a2 + 8) >= *(void *)(*(void *)v60 + 8))
        {
          *(void *)uint64_t v60 = 0;
          __n128 result = *v11;
          *BOOL v11 = v62;
          if (result)
          {
            uint64_t v64 = a3;
            __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            a3 = v64;
          }
          v60 += 8;
        }
        else
        {
          *a2 = 0;
          __n128 result = *v11;
          *BOOL v11 = v61;
          if (result)
          {
            uint64_t v63 = a3;
            __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
            a3 = v63;
          }
          ++a2;
        }
        ++v11;
        ++v59;
      }
      while (v58 != (uint64_t *)v60);
LABEL_75:
      if (a6)
      {
        unint64_t v65 = 0;
        do
        {
          __n128 result = a6[v65];
          a6[v65] = 0;
          if (result) {
            __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
          }
          ++v65;
        }
        while (v65 < v48);
      }
    }
  }
  return result;
}

void sub_21621A43C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      *(void *)(v2 + 8 * v4) = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      }
      ++v4;
    }
    while (v4 < v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21621A490(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21621A518()
{
}

void *sub_21621A52C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C6C77D8;
  return result;
}

void sub_21621A564(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C77D8;
}

BOOL sub_21621A58C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 != 83 && *a3 == 83;
}

uint64_t sub_21621A5A8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC770)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21621A5E8()
{
  return &unk_26C6BC770;
}

void sub_21621A5F8()
{
}

void *sub_21621A60C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C6C7830;
  return result;
}

void sub_21621A644(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C7830;
}

BOOL sub_21621A66C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3 = *a2 - 74;
  BOOL v4 = v3 > 6;
  int v5 = (1 << v3) & 0x45;
  if (v4 || v5 == 0) {
    return 0;
  }
  return *a3 == 88 || *a3 == 67;
}

uint64_t sub_21621A6B0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC780)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21621A6F0()
{
  return &unk_26C6BC780;
}

void sub_21621A700()
{
}

void *sub_21621A714()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C6C7888;
  return result;
}

void sub_21621A74C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C7888;
}

BOOL sub_21621A774(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3 = *a2 - 66;
  BOOL v4 = v3 > 0x16;
  int v5 = (1 << v3) & 0x404801;
  return !v4 && v5 != 0 && *a3 == 67;
}

uint64_t sub_21621A7B4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC790)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21621A7F4()
{
  return &unk_26C6BC790;
}

void sub_21621A804()
{
}

void *sub_21621A818()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C6C7780;
  return result;
}

void sub_21621A850(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C7780;
}

BOOL sub_21621A878(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 != 1 && *a3 == 1;
}

uint64_t sub_21621A890(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC760)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21621A8D0()
{
  return &unk_26C6BC760;
}

void *sub_21621A8DC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_21621A960(void *result, char a2)
{
  result[1] = 0;
  *__n128 result = 0;
  if ((a2 & 1) == 0) {
    operator new();
  }
  return result;
}

void sub_21621A9E4(_Unwind_Exception *a1)
{
  sub_21620FE1C(v2, 0);
  uint64_t v4 = *v1;
  *unint64_t v1 = 0;
  if (v4) {
    MEMORY[0x2166CA800](v4, 0x1010C40E4C6A875);
  }
  _Unwind_Resume(a1);
}

void sub_21621AA1C(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_21621AA90(_Unwind_Exception *a1)
{
  sub_21620FE1C(v1 + 1, 0);
  unsigned int v3 = *v1;
  *unint64_t v1 = 0;
  if (v3) {
    MEMORY[0x2166CA800](v3, 0x1010C40E4C6A875);
  }
  _Unwind_Resume(a1);
}

void sub_21621AAC8(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_21621AB4C(_Unwind_Exception *a1)
{
  sub_21620FE1C(v1 + 1, 0);
  unsigned int v3 = *v1;
  *unint64_t v1 = 0;
  if (v3) {
    MEMORY[0x2166CA800](v3, 0x1010C40E4C6A875);
  }
  _Unwind_Resume(a1);
}

void **sub_21621AB84(void ***a1, void ***a2)
{
  uint64_t v4 = a1 + 1;
  sub_21620FE1C(a1 + 1, 0);
  __n128 result = *a1;
  *a1 = 0;
  if (result) {
    __n128 result = (void **)MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    *a2 = 0;
    __n128 result = *a1;
    *a1 = v6;
    if (result)
    {
      JUMPOUT(0x2166CA800);
    }
  }
  else
  {
    uint64_t v7 = a2[1];
    if (v7)
    {
      a2[1] = 0;
      return sub_21620FE1C(v4, v7);
    }
  }
  return result;
}

uint64_t sub_21621AC58(void ***a1, void *a2)
{
  sub_21620FE1C(a1 + 1, 0);
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    MEMORY[0x2166CA800](v4, 0x1010C40E4C6A875);
  }
  if (*a2) {
    operator new();
  }
  uint64_t result = a2[1];
  if (result) {
    sub_21621AD80();
  }
  return result;
}

void sub_21621AD80()
{
}

void sub_21621ADD8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_21621ADFC(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  operator new();
}

uint64_t sub_21621AF08()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EFB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EFB0))
  {
    operator new();
  }
  return qword_26797EFA8;
}

void sub_21621AF80(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x20C40DC1BFBCFLL);
  __cxa_guard_abort(&qword_26797EFB0);
  _Unwind_Resume(a1);
}

unint64_t sub_21621AFB8(uint64_t a1, uint64_t a2, int **a3)
{
  return (**a3 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(a2 + 8);
}

uint64_t sub_21621AFD0(uint64_t a1, uint64_t a2, int **a3, unsigned int a4)
{
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(sub_21621AF08()
                                         + 8
                                         * (*(_DWORD *)(*(void *)(a2 + 8)
                                                      + (**a3 & 0xFFFFFFFFFFFFFFFCLL)
                                                      + 4 * a4
                                                      + 4) & 3))
                           + 32);

  return v4();
}

void sub_21621B064(uint64_t a1, uint64_t a2, int **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void *)(a2 + 8);
  unint64_t v13 = **a3 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v27 = 0;
  unint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  v30[0] = 0;
  uint64_t v14 = *(unsigned int *)(v12 + v13);
  if (v14)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, unsigned char *))(a7 + 16))(a7, v14, a4, v30);
    BOOL v15 = *((unsigned char *)v28 + 24) != 0;
  }
  else
  {
    BOOL v15 = 0;
  }
  if (a5 - 1 >= a4 && !v15)
  {
    uint64_t v16 = sub_21621AF08();
    if (!*((unsigned char *)v28 + 24))
    {
      uint64_t v17 = v16;
      unint64_t v18 = 0;
      uint64_t v19 = v13 + v12 + 4;
      do
      {
        (*(void (**)(_DWORD **__return_ptr))(**(void **)(v17 + 8 * (*(_DWORD *)(v19 + 4 * v18) & 3))
                                                      + 32))(&v25);
        if (a6) {
          *(unsigned char *)(a6 + a4) = v18;
        }
        v24[0] = MEMORY[0x263EF8330];
        v24[1] = 0x40000000;
        void v24[2] = sub_21621B2D0;
        v24[3] = &unk_264266DA8;
        v24[4] = a7;
        v24[5] = &v27;
        uint64_t v20 = *(void *)(v17 + 8 * (*v25 & 3));
        (*(void (**)(uint64_t, uint64_t, _DWORD **, unint64_t, uint64_t, uint64_t, void *))(*(void *)v20 + 24))(v20, a2, &v25, a4 + 1, a5, a6, v24);
        unint64_t v21 = v26;
        uint64_t v26 = 0;
        if (v21)
        {
          uint64_t v22 = sub_21620FE6C(v21);
          MEMORY[0x2166CA800](v22, 0x20C4093837F09);
        }
        uint64_t v23 = v25;
        uint64_t v25 = 0;
        if (v23) {
          MEMORY[0x2166CA800](v23, 0x1010C40E4C6A875);
        }
        if (v18 > 0xFE) {
          break;
        }
        ++v18;
      }
      while (!*((unsigned char *)v28 + 24));
    }
  }
  _Block_object_dispose(&v27, 8);
}

void sub_21621B2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_21621B2D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t sub_21621B320(uint64_t a1, uint64_t a2, int **a3)
{
  return *(unsigned int *)(*(void *)(a2 + 8) + (**a3 & 0xFFFFFFFFFFFFFFFCLL));
}

uint64_t sub_21621B338@<X0>(uint64_t a1@<X1>, int **a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = **a2 & 0xFFFFFFFFFFFFFFFCLL;
  unsigned int v6 = a3 >> 5;
  uint64_t v7 = v4 + v5 + 4 * (a3 >> 5);
  unsigned int v9 = *(_DWORD *)(v7 + 4);
  uint64_t v8 = (_DWORD *)(v7 + 4);
  if ((v9 >> a3))
  {
    char v11 = a3 & 0x1F;
    uint64_t v12 = sub_21621AF08();
    if (a3 >= 0x20)
    {
      int v14 = 0;
      if (v6 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v6;
      }
      uint64_t v17 = (unsigned int *)(v5 + v4 + 4);
      do
      {
        unsigned int v18 = *v17++;
        int8x8_t v13 = vcnt_s8((int8x8_t)v18);
        v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
        v14 += v13.i32[0];
        --v16;
      }
      while (v16);
    }
    else
    {
      int v14 = 0;
    }
    v13.i32[0] = *v8 & ~(-1 << v11);
    uint8x8_t v19 = (uint8x8_t)vcnt_s8(v13);
    v19.i16[0] = vaddlv_u8(v19);
    uint64_t v20 = *(uint64_t (**)(void))(**(void **)(v12
                                            + 8
                                            * (*(_DWORD *)(v4 + v5 + 4 * (v19.i32[0] + v14) + 40) & 3))
                              + 32);
    return v20();
  }
  else
  {
    return sub_216210134(a4);
  }
}

void sub_21621B490(uint64_t a1, uint64_t a2, int **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void *)(a2 + 8);
  unint64_t v13 = **a3 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v14 = v12 + v13;
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x2000000000;
  v40[0] = 0;
  uint64_t v15 = *(unsigned int *)(v12 + v13);
  if (v15)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, char *))(a7 + 16))(a7, v15, a4, v40);
    BOOL v16 = *((unsigned char *)v38 + 24) != 0;
  }
  else
  {
    BOOL v16 = 0;
  }
  unint64_t v33 = a4;
  if (a5 - 1 >= a4 && !v16)
  {
    uint64_t v17 = sub_21621AF08();
    uint8x8_t v19 = v38;
    if (!*((unsigned char *)v38 + 24))
    {
      uint64_t v20 = v17;
      unint64_t v21 = 0;
      uint64_t v22 = v13 + v12 + 4;
      do
      {
        if (v21 >> 5 <= 1) {
          uint64_t v23 = 1;
        }
        else {
          uint64_t v23 = v21 >> 5;
        }
        unsigned int v24 = *(_DWORD *)(v14 + 4 * (v21 >> 5) + 4);
        if ((v24 >> v21))
        {
          if (v21 >= 0x20u)
          {
            int v25 = 0;
            uint64_t v26 = (unsigned int *)v22;
            do
            {
              unsigned int v27 = *v26++;
              int8x8_t v18 = vcnt_s8((int8x8_t)v27);
              v18.i16[0] = vaddlv_u8((uint8x8_t)v18);
              v25 += v18.i32[0];
              --v23;
            }
            while (v23);
          }
          else
          {
            int v25 = 0;
          }
          v18.i32[0] = v24 & ~(-1 << (v21 & 0x1F));
          uint8x8_t v28 = (uint8x8_t)vcnt_s8(v18);
          v28.i16[0] = vaddlv_u8(v28);
          (*(void (**)(_DWORD **__return_ptr))(**(void **)(v20
                                                                      + 8
                                                                      * (*(_DWORD *)(v14
                                                                                   + 4
                                                                                   * (v25 + v28.i32[0])
                                                                                   + 40) & 3))
                                                        + 32))(&v35);
          if (a6) {
            *(unsigned char *)(a6 + v33) = v21;
          }
          v34[0] = MEMORY[0x263EF8330];
          v34[1] = 0x40000000;
          v34[2] = sub_21621B790;
          v34[3] = &unk_26426BA68;
          v34[4] = a7;
          v34[5] = &v37;
          uint64_t v29 = *(void *)(v20 + 8 * (*v35 & 3));
          (*(void (**)(uint64_t, uint64_t, _DWORD **, unint64_t, uint64_t, uint64_t, void *))(*(void *)v29 + 24))(v29, a2, &v35, v33 + 1, a5, a6, v34);
          uint64_t v30 = v36;
          uint64_t v36 = 0;
          if (v30)
          {
            uint64_t v31 = sub_21620FE6C(v30);
            MEMORY[0x2166CA800](v31, 0x20C4093837F09);
          }
          uint64_t v32 = v35;
          uint64_t v35 = 0;
          if (v32) {
            MEMORY[0x2166CA800](v32, 0x1010C40E4C6A875);
          }
          uint8x8_t v19 = v38;
        }
        if (v21 > 0xFE) {
          break;
        }
        ++v21;
      }
      while (!*((unsigned char *)v19 + 24));
    }
  }
  _Block_object_dispose(&v37, 8);
}

void sub_21621B760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_21621B790(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t sub_21621B7E0(uint64_t a1, uint64_t a2, int **a3)
{
  return *(unsigned int *)(*(void *)(a2 + 8) + (**a3 & 0xFFFFFFFFFFFFFFFCLL));
}

uint64_t sub_21621B7F8@<X0>(uint64_t a1@<X1>, int **a2@<X2>, char a3@<W3>, void *a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = *a2;
  unsigned int v6 = (unsigned __int8 *)*((void *)*a2 + 1);
  if (v6)
  {
    uint64_t v8 = (unsigned __int8 *)(*(void *)(a1 + 16) + (*v5 & 0xFFFFFFFFFFFFFFFCLL));
    memset(__dst, 0, sizeof(__dst));
    if (v6 <= v8 + 4)
    {
      if (v6 != v8 + 4) {
        goto LABEL_7;
      }
      uint64_t v12 = v8 + 8;
      LOBYTE(__dst[0]) = a3;
      size_t v11 = 1;
    }
    else
    {
      uint64_t v9 = *v6;
      size_t v10 = *((unsigned __int8 *)v5 + 16);
      memcpy(__dst, v6 + 1, v10);
      size_t v11 = v10 + 1;
      *((unsigned char *)__dst + v1sub_2161868BC(&a9, 0) = a3;
      if (v10 >= v9) {
        uint64_t v12 = &v6[v9 + 5];
      }
      else {
        uint64_t v12 = v6;
      }
    }
    unint64_t v14 = (unint64_t)&v8[*(unsigned int *)v8 + 4];
    while ((unint64_t)v12 < v14)
    {
      size_t v15 = *v12;
      if (v11 <= v15)
      {
        int v16 = memcmp(v12 + 1, __dst, v11);
        if (v16 > 0) {
          break;
        }
        if (!v16)
        {
          sub_21621AAC8(a4);
        }
      }
      v12 += v15 + 5;
    }
  }
LABEL_7:

  return sub_216210134((uint64_t)a4);
}

void sub_21621B9C4(uint64_t a1, uint64_t a2, int **a3, unint64_t a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a3;
  uint64_t v8 = (unsigned int *)*((void *)*a3 + 1);
  if (v8)
  {
    BOOL v14 = 0;
    unsigned __int8 v31 = 0;
    size_t v15 = (unsigned int *)(*(void *)(a2 + 16) + (*v7 & 0xFFFFFFFFFFFFFFFCLL));
    int v16 = v15 + 1;
    if (v8 == v15 + 1)
    {
      uint64_t v17 = *v8;
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unsigned __int8 *))(a7 + 16))(a7, v17, a4, &v31);
        BOOL v14 = v31 != 0;
      }
      else
      {
        BOOL v14 = 0;
      }
    }
    if (a5 - 1 >= a4 && !v14)
    {
      memset(__dst, 0, sizeof(__dst));
      uint64_t v18 = (unsigned __int8 *)*((void *)*a3 + 1);
      if (v18 <= (unsigned __int8 *)v16)
      {
        size_t v20 = 0;
        unint64_t v21 = (unsigned __int8 *)(v15 + 2);
      }
      else
      {
        uint64_t v19 = *v18;
        size_t v20 = *((unsigned __int8 *)*a3 + 16);
        memcpy(__dst, v18 + 1, v20);
        if (v20 <= v19) {
          unint64_t v21 = v18;
        }
        else {
          unint64_t v21 = &v18[v19 + 5];
        }
      }
      uint64_t v30 = (void *)(a6 + a4);
      unint64_t v22 = a4 - v20;
      do
      {
        if (v21 >= (unsigned __int8 *)v16 + *v15) {
          break;
        }
        unsigned int v25 = *v21;
        uint64_t v23 = (char *)(v21 + 1);
        uint64_t v24 = v25;
        size_t v26 = v25 - v20;
        if (v25 < v20 || a5 && v26 > a5) {
          goto LABEL_20;
        }
        int v27 = memcmp(v23, __dst, v20);
        if (v27 > 0) {
          return;
        }
        if (v27 || (uint64_t v29 = *(unsigned int *)&v23[v24], !v29))
        {
LABEL_20:
          int v28 = 0;
        }
        else
        {
          if (a6)
          {
            memcpy(v30, &v23[v20], v26);
            uint64_t v29 = *(unsigned int *)&v23[v24];
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t, unsigned __int8 *))(a7 + 16))(a7, v29, v22 + v24, &v31);
          int v28 = v31;
        }
        unint64_t v21 = (unsigned __int8 *)&v23[v24 + 4];
      }
      while (!v28);
    }
  }
}

void sub_21621BBD8(void *a1@<X8>)
{
}

uint64_t sub_21621BBFC(uint64_t a1, uint64_t a2, int **a3)
{
  unsigned int v3 = (unsigned int *)*((void *)*a3 + 1);
  if (v3 == (unsigned int *)(*(void *)(a2 + 16) + (**a3 & 0xFFFFFFFFFFFFFFFCLL) + 4)) {
    return *v3;
  }
  uint64_t v4 = *(unsigned __int8 *)v3;
  if (v4 == *((unsigned __int8 *)*a3 + 16))
  {
    unsigned int v3 = (unsigned int *)((char *)v3 + v4 + 1);
    return *v3;
  }
  return 0;
}

uint64_t sub_21621BC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(*(void *)a3 + 16) + *(void *)(*(void *)a3 + 8);
}

void sub_21621BC64(void *a1@<X8>)
{
}

uint64_t sub_21621BC70()
{
  return 0;
}

void sub_21621BC7C()
{
}

void sub_21621BC94()
{
}

void sub_21621BCAC()
{
}

void sub_21621BCC4()
{
}

uint64_t sub_21621BCD8()
{
  return 0;
}

void sub_21621BCE0()
{
}

void sub_21621BD64(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40DA06FFE4);
  _Unwind_Resume(a1);
}

void sub_21621BD88()
{
}

void sub_21621BE0C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40DA06FFE4);
  _Unwind_Resume(a1);
}

void sub_21621BE30()
{
}

void sub_21621BF00(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C4082D69C80);
  _Unwind_Resume(a1);
}

void sub_21621BF24()
{
}

void sub_21621BFAC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C409BCD7C24);
  _Unwind_Resume(a1);
}

void sub_21621BFD0()
{
}

void sub_21621C058(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C4054BF6589);
  _Unwind_Resume(a1);
}

uint64_t sub_21621C07C(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 16) = 850045863;
  *(void *)a1 = &unk_26C6C05A8;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2161868BC(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  CFLocaleRef v3 = sub_2161E29D0(a2);
  if (v3)
  {
    *(void *)(a1 + 8) = ChineseTokenizerCreate();
    CFRelease(v3);
  }
  return a1;
}

void sub_21621C120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161BE090((const void **)va, 0);
  std::mutex::~mutex(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_21621C148(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C05A8;
  if (*(void *)(a1 + 8)) {
    ChineseTokenizerRelease();
  }
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_21621C1A4(uint64_t a1)
{
  sub_21621C148(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21621C1DC(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v1 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    ChineseTokenizerSetString();
    std::mutex::unlock(v1);
  }
}

void sub_21621C268(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21621C27C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return MEMORY[0x270F91858]();
  }
  return result;
}

uint64_t sub_21621C28C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return MEMORY[0x270F91868]();
  }
  return result;
}

uint64_t sub_21621C2A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return MEMORY[0x270F91878]();
  }
  return result;
}

uint64_t sub_21621C2B0(uint64_t a1, const __CFURL *a2, uint64_t a3)
{
  unsigned int v6 = sub_2161A2A80();
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 850045863;
  *(void *)a1 = v6;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2161868BC(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  unsigned int v7 = 5489;
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = 1;
  uint64_t v9 = 21;
  *(_DWORD *)(a1 + 8sub_2161868BC(&a9, 0) = 5489;
  do
  {
    int v10 = 1812433253 * (v7 ^ (v7 >> 30));
    unsigned int v7 = v10 + v8;
    *(_DWORD *)(a1 + 4 * v9) = v9 + v10 - 20;
    ++v8;
    ++v9;
  }
  while (v9 != 644);
  *(void *)(a1 + 2576) = 0;
  *(void *)(a1 + 2584) = a3;
  *(void *)(a1 + 2592) = sub_2161E29D0(0);
  unsigned int rep = std::chrono::system_clock::now().__d_.__rep_;
  *(_DWORD *)__src = rep;
  for (uint64_t i = 1; i != 624; ++i)
  {
    unsigned int rep = i + 1812433253 * (rep ^ (rep >> 30));
    *(_DWORD *)&__src[4 * i] = rep;
  }
  *(void *)&__src[2496] = 0;
  memcpy((void *)(a1 + 80), __src, 0x9C8uLL);
  sub_21628DB6C(0, a2, @"emoji_adornment.plist", __p);
  if (v17 >= 0) {
    unint64_t v13 = (char *)__p;
  }
  else {
    unint64_t v13 = (char *)__p[0];
  }
  if (!stat(v13, (stat *)__src))
  {
    CFPropertyListRef v14 = sub_2161E44AC(v13);
    sub_216182BB8((const void **)(a1 + 8), v14);
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_21621C428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_2161BE090(v16, 0);
  std::mutex::~mutex(v15);
  sub_216182BB8(v14, 0);
  _Unwind_Resume(a1);
}

BOOL sub_21621C474(uint64_t a1, const __CFAllocator *a2, void *a3)
{
  uint64_t v5 = a3[1];
  uint64_t v6 = (a3[2] - v5) / 40;
  unsigned int v7 = (int *)(v5 + 40 * v6 - 40);
  do
  {
    BOOL v8 = v6-- < 1;
    if (v8) {
      return 0;
    }
    int v9 = *v7;
    v7 -= 10;
  }
  while (v9 == 7);
  __p = 0;
  unint64_t v101 = 0;
  BOOL v102 = 0;
  sub_216185B34(&__p, 5uLL);
  unint64_t v10 = v6 + 1;
  uint64_t v11 = 5;
  if (v6 + 1 > 5) {
    uint64_t v11 = v6 + 1;
  }
  uint64_t v12 = v11 - 5;
  if (v10 >= 6)
  {
    uint64_t v13 = 0;
    size_t v15 = (unint64_t *)a3[10];
    uint64_t v16 = a3[4];
    char v17 = (unsigned __int16 *)(a3[1] + 24);
    uint64_t v18 = (v6 - 4) & ~((v6 - 4) >> 63);
    do
    {
      unint64_t v19 = *v15++;
      if (v19 >= (a3[5] - v16) >> 1)
      {
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = *v17;
        if (!v16) {
          uint64_t v20 = 0;
        }
      }
      v13 += v20;
      v17 += 20;
      --v18;
    }
    while (v18);
  }
  else
  {
    uint64_t v13 = 0;
  }
  CFAllocatorRef alloc = a2;
  if (v12 >= (uint64_t)v10)
  {
    uint64_t v21 = 0;
    unsigned int v25 = v101;
  }
  else
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = a3[4];
      if (*(void *)(a3[10] + 8 * v12) >= (unint64_t)((a3[5] - v22) >> 1))
      {
        uint64_t v23 = 0;
      }
      else if (v22)
      {
        uint64_t v23 = *(unsigned __int16 *)(a3[1] + 40 * v12 + 24);
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = v101;
      if (v101 >= (unsigned __int16 *)v102)
      {
        size_t v26 = (unsigned __int16 *)__p;
        uint64_t v27 = (char *)v101 - (unsigned char *)__p;
        if ((char *)v101 - (unsigned char *)__p <= -3) {
          sub_21610CB04();
        }
        uint64_t v28 = v27 >> 1;
        if (v102 - (unsigned char *)__p <= (unint64_t)((v27 >> 1) + 1)) {
          uint64_t v29 = v28 + 1;
        }
        else {
          uint64_t v29 = v102 - (unsigned char *)__p;
        }
        if ((unint64_t)(v102 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v30 = v29;
        }
        if (v30)
        {
          unsigned __int8 v31 = (char *)sub_21610FD44((uint64_t)&v102, v30);
          size_t v26 = (unsigned __int16 *)__p;
          uint64_t v24 = v101;
        }
        else
        {
          unsigned __int8 v31 = 0;
        }
        uint64_t v32 = (unsigned __int16 *)&v31[2 * v28];
        *uint64_t v32 = v23;
        unsigned int v25 = v32 + 1;
        while (v24 != v26)
        {
          unsigned __int16 v33 = *--v24;
          *--uint64_t v32 = v33;
        }
        __p = v32;
        unint64_t v101 = v25;
        BOOL v102 = &v31[2 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *unint64_t v101 = v23;
        unsigned int v25 = v24 + 1;
      }
      unint64_t v101 = v25;
      v21 += v23;
      BOOL v8 = v12++ < v6;
    }
    while (v8);
  }
  uint64_t v34 = a3[4];
  if (v34) {
    uint64_t v35 = v21;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v86 = v35;
  uint64_t v96 = 0;
  unint64_t v97 = &v96;
  uint64_t v98 = 0x2000000000;
  int v99 = 0;
  v90[0] = MEMORY[0x263EF8330];
  v90[1] = 0x40000000;
  int64_t v91 = sub_21621CC30;
  int64_t v92 = &unk_264266DD0;
  uint64_t v94 = a1;
  CFAllocatorRef v95 = alloc;
  int64_t v93 = &v96;
  if (!*(void *)(a1 + 8)) {
    goto LABEL_116;
  }
  uint64_t v36 = (unsigned __int16 *)__p;
  if (__p == v25) {
    goto LABEL_116;
  }
  BOOL v79 = 0;
  uint64_t v81 = v34 + 2 * v13;
  CFAllocatorRef alloca = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v37 = v35;
  while (1)
  {
    uint64_t v38 = *v36;
    CFIndex v39 = v34 ? v37 : 0;
    uint64_t v40 = (UniChar *)CFStringCreateWithCharacters(0, (const UniChar *)(v81 + 2 * (v86 - v37)), v39);
    v103[0] = v40;
    MutableCFStringRef Copy = CFStringCreateMutableCopy(alloca, v39, (CFStringRef)v40);
    uint64_t v104 = MutableCopy;
    CFStringLowercase(MutableCopy, *(CFLocaleRef *)(a1 + 2592));
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), MutableCopy);
    CFDictionaryRef v43 = Value;
    if (!Value) {
      goto LABEL_59;
    }
    CFTypeID v44 = CFGetTypeID(Value);
    if (v44 != CFDictionaryGetTypeID()) {
      goto LABEL_59;
    }
    CFArrayRef v45 = (const __CFArray *)CFDictionaryGetValue(v43, @"emojis");
    CFArrayRef v46 = v45;
    if (!v45) {
      goto LABEL_60;
    }
    CFTypeID v47 = CFGetTypeID(v45);
    if (v47 == CFArrayGetTypeID())
    {
      CFBooleanRef v48 = (const __CFBoolean *)CFDictionaryGetValue(v43, @"shuffle");
      CFBooleanRef v49 = v48;
      if (v48)
      {
        CFTypeID v50 = CFGetTypeID(v48);
        if (v50 == CFBooleanGetTypeID()) {
          BOOL v79 = CFBooleanGetValue(v49) != 0;
        }
      }
    }
    else
    {
LABEL_59:
      CFArrayRef v46 = 0;
    }
LABEL_60:
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (v40) {
      CFRelease(v40);
    }
    if (v46) {
      break;
    }
    v37 -= v38;
    if (++v36 == v25) {
      goto LABEL_116;
    }
  }
  uint64_t Count = CFArrayGetCount(v46);
  CFArrayRef v52 = CFArrayCreateMutableCopy(alloca, Count, v46);
  uint64_t v104 = v52;
  if (v79)
  {
    unint64_t v78 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (Count >= 1)
    {
      uint64_t v53 = a1 + 80;
      unint64_t v54 = Count;
      uint64_t v80 = Count;
      uint64_t v82 = v52;
      while (1)
      {
        CFAllocatorRef allocb = (CFAllocatorRef)(v54 - 1);
        if (v54 != 1) {
          break;
        }
        unint64_t v65 = 0;
LABEL_105:
        CFArrayRef v52 = v82;
        CFArrayExchangeValuesAtIndices(v82, (CFIndex)allocb, v65);
        BOOL v8 = v54 > 1;
        unint64_t v54 = (unint64_t)allocb;
        uint64_t Count = v80;
        if (!v8) {
          goto LABEL_106;
        }
      }
      unint64_t v55 = __clz(v54);
      uint64_t v56 = 63;
      if (((v54 << v55) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v56 = 64;
      }
      unint64_t v57 = v56 - v55;
      if ((v57 & 0x1F) != 0) {
        unint64_t v58 = (v57 >> 5) + 1;
      }
      else {
        unint64_t v58 = v57 >> 5;
      }
      unint64_t v59 = v57 / v58;
      if (v59 >= 0x40) {
        unint64_t v60 = 0;
      }
      else {
        unint64_t v60 = (-1 << (v57 / v58)) & 0x100000000;
      }
      if ((v60 ^ 0x100000000) <= v60 / v58)
      {
LABEL_82:
        unint64_t v61 = v58 - v57 % v58;
        if (v59 >= 0x3F) {
          goto LABEL_91;
        }
        char v89 = v59 + 1;
        unint64_t v62 = 0x80000000uLL >> v59 << (v59 + 1);
        if (v59) {
          unsigned int v63 = 0xFFFFFFFF >> -(char)v59;
        }
        else {
          unsigned int v63 = 0;
        }
        if (v59 >= 0x1F) {
          unsigned int v64 = -1;
        }
        else {
          unsigned int v64 = 0xFFFFFFFF >> ~(_BYTE)v59;
        }
      }
      else
      {
        unint64_t v59 = v57 / ++v58;
        if (v59 <= 0x3F)
        {
          unint64_t v60 = (-1 << (v57 / v58)) & 0x100000000;
          goto LABEL_82;
        }
        unint64_t v60 = 0;
        unint64_t v61 = v58 - (v57 % v58);
        unint64_t v59 = 64;
LABEL_91:
        unint64_t v62 = 0;
        unsigned int v64 = -1;
        unsigned int v63 = 0xFFFFFFFF >> -(char)v59;
        char v89 = v59 + 1;
      }
      unint64_t v87 = v54;
      do
      {
        unint64_t v66 = v58;
        unint64_t v65 = 0;
        if (v61)
        {
          for (uint64_t i = 0; i != v61; ++i)
          {
            do
              unsigned int v68 = sub_216141B90(v53);
            while (v60 <= v68);
            unint64_t v69 = v65 << v59;
            if (v59 >= 0x40) {
              unint64_t v69 = 0;
            }
            unint64_t v65 = v69 + (v68 & v63);
          }
        }
        unint64_t v70 = v61;
        unint64_t v58 = v66;
        if (v61 < v66)
        {
          do
          {
            do
              unsigned int v71 = sub_216141B90(v53);
            while (v62 <= v71);
            unint64_t v72 = v65 << v89;
            if (v59 >= 0x3F) {
              unint64_t v72 = 0;
            }
            unint64_t v65 = v72 + (v71 & v64);
            ++v70;
            unint64_t v58 = v66;
          }
          while (v70 != v66);
        }
        unint64_t v54 = v87;
      }
      while (v65 >= v87);
      goto LABEL_105;
    }
LABEL_106:
    std::mutex::unlock(v78);
  }
  if (Count >= 1)
  {
    for (CFIndex j = 0; j != Count; ++j)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v52, j);
      CFStringRef v75 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v76 = CFGetTypeID(ValueAtIndex);
        if (v76 == CFStringGetTypeID())
        {
          sub_2161E212C(v75, v103);
          ((void (*)(void *))v91)(v90);
          if (v103[0])
          {
            v103[1] = v103[0];
            operator delete(v103[0]);
          }
        }
      }
    }
  }
  if (v52) {
    CFRelease(v52);
  }
LABEL_116:
  BOOL v14 = *((_DWORD *)v97 + 6) > 0;
  _Block_object_dispose(&v96, 8);
  if (__p)
  {
    unint64_t v101 = (unsigned __int16 *)__p;
    operator delete(__p);
  }
  return v14;
}

void sub_21621CB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  sub_2161BE0C8((const void **)(v28 - 96), 0);
  _Block_object_dispose(&a23, 8);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21621CC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __p[4] = *(void **)MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned char ***)(a1 + 40);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DAC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DAC0))
  {
    if (**v5) {
      int v6 = 3;
    }
    else {
      int v6 = 1;
    }
    dword_26797DAB8 = v6;
    __cxa_guard_release(&qword_26797DAC0);
  }
  if (a3)
  {
    int v10 = 0x20000;
    long long v9 = 0u;
    long long v8 = 0u;
    WORD2(v9) = a3;
    int v7 = 7;
    sub_216268B0C();
    sub_216268B0C();
    sub_21621CFC4(__p, 1uLL, (long long *)&v7);
    operator new();
  }
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

void sub_21621CF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 16))(a13);
  }
  _Unwind_Resume(a1);
}

void *sub_21621CFC4(void *a1, unint64_t a2, long long *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21618B454(a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = v6 + 40 * a2;
    uint64_t v8 = 40 * a2;
    do
    {
      long long v9 = *a3;
      long long v10 = a3[1];
      *(void *)(v6 + 32) = *((void *)a3 + 4);
      *(_OWORD *)uint64_t v6 = v9;
      *(_OWORD *)(v6 + 16) = v10;
      v6 += 40;
      v8 -= 40;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_21621D03C(_Unwind_Exception *exception_object)
{
  CFLocaleRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21621D058(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v10 = 0;
  v11[0] = &unk_26C6F55C8;
  v11[1] = a4;
  v11[2] = a3;
  v11[3] = v11;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 24))(&v9);
  sub_21621D1B8(a1, a2, (uint64_t)v11, v9, 1u, 0, 1u, &v10, 0.0, (uint64_t)v12, 0, a3, 0, 0, -1, 0, 0);
  uint64_t v7 = v9;
  uint64_t v9 = 0;
  if (v7) {
    MEMORY[0x2166CA800](v7, 0x1000C4052888210);
  }
  return sub_21621DC6C(v11);
}

void sub_21621D17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (a10) {
    MEMORY[0x2166CA800](a10, 0x1000C4052888210);
  }
  sub_21621DC6C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_21621D1B8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned __int8 a7, unsigned char *a8, float a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  uint64_t v18 = a13;
  uint64_t v17 = a14;
  uint64_t v20 = a10;
  uint64_t v19 = a11;
  _OWORD v58[4] = *MEMORY[0x263EF8340];
  unsigned __int8 v57 = a7;
  if (*a8) {
    return result;
  }
  unint64_t v26 = result;
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(result + 8) + 32))(*(void *)(result + 8), a4) & 1) == 0) {
    __assert_rtn("ambiguousDfsTraverse", "AmbiguousTrieAdapter.hpp", 137, "m_trie->isValid(curCursor)");
  }
  unint64_t v27 = a12;
  unint64_t v48 = v26;
  if (a5 && (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) != v27) {
    goto LABEL_10;
  }
  unint64_t v56 = 0;
  if ((a7 & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, unint64_t *))(**(void **)(v26 + 8) + 48))(*(void *)(v26 + 8), a4, &v56);
    if (!result) {
      goto LABEL_9;
    }
    uint64_t v20 = a10;
    uint64_t v19 = a11;
    uint64_t v18 = a13;
    uint64_t v17 = a14;
  }
  uint64_t result = sub_21621D7B0(a3, a4, v20, 2 * v19, v18, v17, v27, (uint64_t)a8, a9);
LABEL_9:
  if (*a8) {
    return result;
  }
LABEL_10:
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (result <= v27) {
    return result;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 16))(a2, v27);
  unint64_t v52 = result;
  unint64_t v56 = 0;
  if (!result) {
    return result;
  }
  unint64_t v28 = 0;
  HIDWORD(v47) = a17;
  uint64_t v29 = a15;
  uint64_t v30 = a16;
  double v31 = a9;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 72))(a2, v29, v30, v27, v28);
    if (!result) {
      goto LABEL_30;
    }
    double v55 = 0.0;
    double v55 = (*(double (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 32))(a2, v27, v56)
        + v31;
    unint64_t v54 = 0;
    unint64_t v54 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 40))(a2, v27, v56)
        + v27;
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 48))(a2, v27, v56);
    unsigned __int16 v33 = (__int16 *)result;
    uint64_t v34 = v32;
    unint64_t v35 = v54;
    if (v54 == v27 && (v47 & 0x100000000) != 0) {
      goto LABEL_30;
    }
    if (v32) {
      break;
    }
    float v46 = v55;
    LOBYTE(v47) = v54 == v27;
    uint64_t result = sub_21621D1B8(v48, a2, a3, a4, a5, a6, v57, a8, v46, a10, a11, v54, a13, a14, v29, v30, v47);
LABEL_30:
    unint64_t v28 = v56 + 1;
    unint64_t v56 = v28;
    if (v28 >= v52) {
      return result;
    }
  }
  (*(void (**)(unint64_t *__return_ptr))(**(void **)(v48 + 8) + 40))(&v53);
  if (!(*(unsigned int (**)(void, unint64_t))(**(void **)(v48 + 8) + 32))(*(void *)(v48 + 8), v53))goto LABEL_23; {
  uint64_t v36 = a10;
  }
  uint64_t v37 = a11;
  uint64_t v38 = 2 * a11;
  uint64_t v39 = v34;
  do
  {
    __int16 v40 = *v33++;
    *(_WORD *)(v36 + v38) = v40;
    v38 += 2;
    --v39;
  }
  while (v39);
  uint64_t v41 = a13;
  if (a13)
  {
    *(void *)(a13 + 8 * a14) = v56;
    uint64_t v37 = a11;
  }
  float v42 = v55;
  LOBYTE(v47) = v35 == v27;
  sub_21621D1B8(v48, a2, a3, v53, a5, a6, v57, a8, v42, v36, v37 + v34, v54, v41, a14 + 1, v27, v56, v47);
  if (!*a8)
  {
LABEL_23:
    uint64_t result = v53;
    unint64_t v53 = 0;
    if (result) {
      uint64_t result = MEMORY[0x2166CA800](result, 0x1000C4052888210);
    }
    if (a6)
    {
      unint64_t v43 = v54;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      if (v43 == result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 56))(a2, v27, v56);
        if (result)
        {
          unint64_t v44 = v56;
          CFArrayRef v45 = operator new(0x68uLL);
          *CFArrayRef v45 = &unk_26C6F5548;
          v45[1] = v48;
          v45[2] = a4;
          v45[3] = &a10;
          v45[4] = &a11;
          v45[5] = &a13;
          v45[6] = &a14;
          v45[7] = &v56;
          v45[8] = &v57;
          v45[9] = a3;
          v45[10] = &v55;
          v45[11] = &v54;
          v45[12] = a8;
          v58[3] = v45;
          (*(void (**)(uint64_t, unint64_t, unint64_t, void *))(*(void *)a2 + 64))(a2, v27, v44, v58);
          uint64_t result = (unint64_t)sub_2162112FC(v58);
        }
      }
    }
    goto LABEL_30;
  }
  uint64_t result = v53;
  unint64_t v53 = 0;
  if (result) {
    return MEMORY[0x2166CA800](result, 0x1000C4052888210);
  }
  return result;
}

void sub_21621D76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

uint64_t sub_21621D7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  float v16 = a9;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v12 = a6;
  uint64_t v13 = a5;
  uint64_t v11 = a7;
  uint64_t v9 = *(void *)(a1 + 24);
  if (!v9) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)v9 + 48))(v9, a2, &v16, &v15, &v14, &v13, &v12, &v11, a8);
}

void sub_21621D82C()
{
}

__n128 sub_21621D840(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_26C6F5548;
  *(_OWORD *)(v2 + 4sub_2161868BC(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_21621D8B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5548;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 4sub_2161868BC(&a9, 0) = result;
  return result;
}

uint64_t sub_21621D90C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_21621D96C((uint64_t *)(a1 + 8), *(__int16 **)a2, *(void *)(a2 + 8), a3);
}

uint64_t sub_21621D920(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F55A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21621D960()
{
  return &unk_26C6F55A8;
}

uint64_t sub_21621D96C(uint64_t *a1, __int16 *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v8 = *a1;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*a1 + 8) + 40))(&v16);
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v8 + 8) + 32))(*(void *)(v8 + 8), v16)) {
    goto LABEL_13;
  }
  if (a3)
  {
    uint64_t v9 = (_WORD *)(*(void *)a1[2] + 2 * *(void *)a1[3]);
    uint64_t v10 = a3;
    do
    {
      __int16 v11 = *a2++;
      *v9++ = v11;
      --v10;
    }
    while (v10);
  }
  uint64_t v12 = *(void *)a1[4];
  if (v12) {
    *(void *)(v12 + 8 * *(void *)a1[5]) = *(void *)a1[6];
  }
  uint64_t v15 = 0;
  if (!*(unsigned char *)a1[7])
  {
    if (!(*(unsigned int (**)(void, uint64_t, uint64_t *))(**(void **)(v8 + 8) + 48))(*(void *)(v8 + 8), v16, &v15))goto LABEL_11; {
    uint64_t v12 = *(void *)a1[4];
    }
  }
  float v13 = *(double *)a1[9];
  sub_21621D7B0(a1[8], v16, *(void *)a1[2], 2 * (*(void *)a1[3] + a3), v12, *(void *)a1[5] + 1, *(void *)a1[10], a1[11], v13);
LABEL_11:
  if (*(unsigned char *)a1[11]) {
    *a4 = 1;
  }
LABEL_13:
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    return MEMORY[0x2166CA800](result, 0x1000C4052888210);
  }
  return result;
}

void sub_21621DB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x2166CA800](a10, 0x1000C4052888210);
  }
  _Unwind_Resume(exception_object);
}

void sub_21621DB4C()
{
}

__n128 sub_21621DB60(uint64_t a1)
{
  long long v2 = (char *)operator new(0x18uLL);
  *(void *)long long v2 = &unk_26C6F55C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21621DBAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F55C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21621DBDC(uint64_t result, uint64_t a2, float *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  if (!*(unsigned char *)(a2 + 3)) {
    return sub_21621D7B0(*(void *)(result + 8), a2, *a4, *a5, 0, 0, *a8 - *(void *)(result + 16), a9, *a3);
  }
  return result;
}

uint64_t sub_21621DC20(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5628)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21621DC60()
{
  return &unk_26C6F5628;
}

void *sub_21621DC6C(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_21621DCF0(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C64A8;
  sub_21621DDAC(a1, 1);
  sub_21612A250(a1 + 136, *(void **)(a1 + 144));
  if (*(void *)(a1 + 104))
  {
    sub_2161FB75C((uint64_t *)(a1 + 104));
    operator delete(*(void **)(a1 + 104));
  }
  CFLocaleRef v3 = (void **)(a1 + 80);
  sub_2161FB708(&v3);
  CFLocaleRef v3 = (void **)(a1 + 56);
  sub_2161FB708(&v3);
  CFLocaleRef v3 = (void **)(a1 + 32);
  sub_2161FB708(&v3);
  CFLocaleRef v3 = (void **)(a1 + 8);
  sub_2161FB708(&v3);
  return a1;
}

void sub_21621DDAC(uint64_t a1, int a2)
{
  sub_2161FB75C((uint64_t *)(a1 + 8));
  sub_2161FB75C((uint64_t *)(a1 + 32));
  if (a2)
  {
    sub_2161FB75C((uint64_t *)(a1 + 56));
    sub_2161FB75C((uint64_t *)(a1 + 80));
    sub_2161FB75C((uint64_t *)(a1 + 104));
  }
  else
  {
    long long v4 = *(long long **)(a1 + 104);
    if (v4 != *(long long **)(a1 + 112))
    {
      do
      {
        if ((*(unsigned int (**)(void))(**(void **)v4 + 64))() == 6)
        {
          ++v4;
          long long v5 = *(long long **)(a1 + 112);
        }
        else
        {
          sub_21621F18C((uint64_t)&v11, v4 + 1, *(long long **)(a1 + 112), (uint64_t)v4);
          long long v5 = v6;
          uint64_t v7 = *(long long **)(a1 + 112);
          if (v7 != v6)
          {
            do
            {
              uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 - 1);
              if (v8) {
                sub_2161121B0(v8);
              }
              --v7;
            }
            while (v7 != v5);
          }
          *(void *)(a1 + 112) = v5;
        }
      }
      while (v4 != v5);
    }
  }
  uint64_t v10 = *(void **)(a1 + 144);
  uint64_t v9 = (void *)(a1 + 144);
  sub_21612A250((uint64_t)(v9 - 1), v10);
  *(v9 - 1) = v9;
  *uint64_t v9 = 0;
  v9[1] = 0;
}

void sub_21621DEB8(uint64_t a1)
{
  sub_21621DCF0(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_21621DEF0(void *result, long long *a2)
{
  CFLocaleRef v3 = (char **)result;
  long long v4 = result + 2;
  unint64_t v5 = result[2];
  uint64_t v6 = (void *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = ((uint64_t)v6 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_21610CB04();
    }
    uint64_t v11 = v5 - *result;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    unsigned int v25 = v4;
    float v13 = (char *)sub_21620DECC(v12);
    uint64_t v15 = &v13[16 * v9];
    long long v16 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v16 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v15 + 16;
    uint64_t v18 = *v3;
    uint64_t v17 = v3[1];
    if (v17 == *v3)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v15 - 1) = v19;
        v15 -= 16;
        *(void *)uint64_t v17 = 0;
        *((void *)v17 + 1) = 0;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)v3;
    }
    *CFLocaleRef v3 = v15;
    v3[1] = v8;
    int64x2_t v23 = v20;
    uint64_t v21 = v3[2];
    v3[2] = &v13[16 * v14];
    uint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    __n128 result = (void *)sub_21621EF1C((uint64_t)&v22);
  }
  else
  {
    *uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    v6[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (char *)(v6 + 2);
  }
  v3[1] = v8;
  return result;
}

uint64_t sub_21621E01C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 112);
  while (1)
  {
    if (v3 == v4)
    {
      uint64_t v6 = operator new(0x40uLL);
      v6[1] = 0;
      void v6[2] = 0;
      *uint64_t v6 = &unk_26C6C98C0;
      v6[3] = &unk_26C6C64C8;
      operator new[]();
    }
    if ((*(unsigned int (**)(void))(**(void **)v3 + 64))() == 7)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 32))();
      if (result == a2) {
        break;
      }
    }
    v3 += 16;
  }
  return result;
}

void sub_21621E21C(_Unwind_Exception *a1)
{
  sub_2161121B0(v1);
  _Unwind_Resume(a1);
}

void **sub_21621E244(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21610CB04();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_21612AA90((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    _DWORD v18[2] = v15 + 16;
    sub_21621EF7C(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_21621F104(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_21621E34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21621F104((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21621E360(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6)
{
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v12 = (uint64_t *)(a1 + 56);
  if (v13 == *(void *)(a1 + 64))
  {
    uint64_t v17 = 0;
    uint64_t v15 = *(void **)(a1 + 56);
    if (!a5) {
      return v17;
    }
    goto LABEL_12;
  }
  uint64_t v14 = -v13;
  uint64_t v15 = *(void **)(a1 + 56);
  while (1)
  {
    uint64_t v16 = *v15;
    if (*(unsigned __int16 *)(*(void *)(*v15 + 8) + 2) == *(unsigned __int16 *)(a2 + 2)
      && (*(unsigned int (**)(void))(*(void *)v16 + 40))(*v15) == a3
      && *(unsigned __int8 *)(v16 + 16) == a4
      && !*(void *)(v16 + 120)
      && !*(void *)(v16 + 128))
    {
      break;
    }
    v15 += 2;
    v14 -= 16;
    if (v15 == *(void **)(a1 + 64))
    {
      uint64_t v17 = 0;
      uint64_t v13 = (uint64_t)v15;
      if (a5) {
        goto LABEL_12;
      }
      return v17;
    }
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (a5)
  {
    uint64_t v17 = 0;
    goto LABEL_12;
  }
  sub_21621F18C((uint64_t)v44, (long long *)(16 - v14), *(long long **)(a1 + 64), -v14);
  uint64_t v13 = (uint64_t)v41;
  float v42 = *(void **)(a1 + 64);
  if (v42 != v41)
  {
    do
    {
      unint64_t v43 = (std::__shared_weak_count *)*(v42 - 1);
      if (v43) {
        sub_2161121B0(v43);
      }
      v42 -= 2;
    }
    while (v42 != (void *)v13);
  }
  *(void *)(a1 + 64) = v13;
  uint64_t v17 = 1;
  if (a5)
  {
LABEL_12:
    if (v15 == (void *)v13)
    {
      uint64_t v18 = *(unsigned __int16 *)(a2 + 2);
      char v19 = *(unsigned char *)(a2 + 8);
      uint64_t v20 = a1 + 8;
      uint64_t v21 = 8;
      if ((v19 & 2) == 0)
      {
        uint64_t v21 = 32;
        uint64_t v20 = a1 + 32;
      }
      uint64_t v22 = *(void *)(a1 + v21);
      uint64_t v23 = *(void *)(v20 + 8);
      while (v22 != v23)
      {
        if ((*(unsigned int (**)(void))(**(void **)v22 + 40))() == a3
          && *(unsigned __int16 *)(*(void *)(*(void *)v22 + 8) + 2) == v18)
        {
          return v17;
        }
        v22 += 16;
      }
      if ((v19 & 2) != 0)
      {
        double v31 = *(void **)(a1 + 32);
        uint64_t v32 = *(void **)(a1 + 40);
        while (v31 != v32)
        {
          if ((*(unsigned int (**)(void))(*(void *)*v31 + 40))() == a3
            && ((*(uint64_t (**)(void, uint64_t))(*(void *)*v31 + 104))(*v31, v18) & 1) != 0)
          {
            return v17;
          }
          v31 += 2;
        }
      }
      int v24 = *(_DWORD *)(a1 + 160);
      unsigned int v25 = (char *)operator new(0xA8uLL);
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *(void *)unsigned int v25 = &unk_26C6C9818;
      unint64_t v26 = v25 + 24;
      float v27 = a6;
      v25[40] = a4;
      *((_DWORD *)v25 + 11) = v24;
      v25[48] = 0;
      *((float *)v25 + 13) = v27;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_OWORD *)(v25 + 72) = 0u;
      *((_DWORD *)v25 + 22) = 1065353216;
      *((_OWORD *)v25 + 6) = 0u;
      *((_OWORD *)v25 + 7) = 0u;
      *((_DWORD *)v25 + 32) = 1065353216;
      *((void *)v25 + 3) = &unk_26C6C6658;
      *((void *)v25 + 4) = a2;
      *((_WORD *)v25 + 68) = a3;
      *((void *)v25 + 18) = 0;
      *((void *)v25 + 19) = 0;
      v25[160] = 1;
      unint64_t v28 = *(void *)(a1 + 72);
      uint64_t v29 = *(void **)(a1 + 64);
      if ((unint64_t)v29 >= v28)
      {
        uint64_t v33 = ((uint64_t)v29 - *v12) >> 4;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60) {
          sub_21610CB04();
        }
        uint64_t v35 = v28 - *v12;
        if (v35 >> 3 > v34) {
          unint64_t v34 = v35 >> 3;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        v44[4] = (void *)(a1 + 72);
        uint64_t v37 = (char *)sub_21612AA90(a1 + 72, v36);
        uint64_t v38 = &v37[16 * v33];
        v44[0] = v37;
        v44[1] = v38;
        v44[3] = &v37[16 * v39];
        *(void *)uint64_t v38 = v26;
        *((void *)v38 + 1) = v25;
        v44[2] = v38 + 16;
        sub_21621EF7C(v12, v44);
        uint64_t v30 = *(void **)(a1 + 64);
        sub_21621F104(v44);
      }
      else
      {
        void *v29 = v26;
        v29[1] = v25;
        uint64_t v30 = v29 + 2;
      }
      *(void *)(a1 + 64) = v30;
      return 1;
    }
  }
  return v17;
}

void sub_21621E714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21621F104((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21621E738(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8 = *(void *)(a1 + 104);
  if (v8 == *(void *)(a1 + 112))
  {
    char v9 = 0;
LABEL_15:
    int v12 = 2;
  }
  else
  {
    char v9 = 0;
    while (1)
    {
      if ((*(unsigned int (**)(void))(**(void **)v8 + 64))() == 6)
      {
        BOOL v10 = sub_216320FBC(*(void *)v8, a2);
        BOOL v11 = v10;
        int v12 = v10;
        if (v10 && (a5 & 1) == 0)
        {
          sub_21621F18C((uint64_t)&v19, (long long *)(v8 + 16), *(long long **)(a1 + 112), v8);
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)(a1 + 112);
          if (v15 != v13)
          {
            do
            {
              uint64_t v16 = *(std::__shared_weak_count **)(v15 - 8);
              if (v16) {
                sub_2161121B0(v16);
              }
              v15 -= 16;
            }
            while (v15 != v14);
          }
          *(void *)(a1 + 112) = v14;
          char v9 = 1;
          int v12 = 2;
        }
        if (v11) {
          break;
        }
      }
      v8 += 16;
      if (v8 == *(void *)(a1 + 112)) {
        goto LABEL_15;
      }
    }
  }
  uint64_t result = (v12 == 2) & v9;
  if (v12 == 2)
  {
    if (a5)
    {
      uint64_t v18 = operator new(0x68uLL);
      v18[1] = 0;
      _DWORD v18[2] = 0;
      *uint64_t v18 = &unk_26C6C9888;
      sub_216320D84(v18 + 3);
    }
  }
  return result;
}

void sub_21621E998(_Unwind_Exception *a1)
{
  sub_2161121B0(v1);
  _Unwind_Resume(a1);
}

void sub_21621E9C0(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 136);
  if (*(void *)(a1 + 128))
  {
    uint64_t v3 = (void *)(a1 + 144);
    sub_21612A250(a1 + 136, *(void **)(a1 + 144));
    uint64_t v4 = a1 + 8;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 136) = v3;
    *uint64_t v3 = 0;
    *(void *)(a1 + 152) = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6 == v5 && *(void *)(a1 + 40) == *(void *)(a1 + 32))
    {
      uint64_t v13 = *(uint64_t **)(a1 + 104);
      uint64_t v14 = *(uint64_t **)(a1 + 112);
      while (v13 != v14)
      {
        __int16 v15 = *(_WORD *)(a1 + 128);
        uint64_t v16 = *v13;
        v13 += 2;
        unsigned __int16 v17 = v15 - (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16) + 1;
        sub_216179580(v1, &v17, &v17);
      }
    }
    else
    {
      BOOL v7 = v6 == v5;
      uint64_t v8 = 8;
      if (v7)
      {
        uint64_t v8 = 32;
        uint64_t v4 = a1 + 32;
      }
      char v9 = *(uint64_t **)(a1 + v8);
      BOOL v10 = *(uint64_t **)(v4 + 8);
      while (v9 != v10 && (*(unsigned int (**)(void))(*(void *)*v9 + 64))() != 2)
      {
        __int16 v11 = *(_WORD *)(a1 + 128);
        uint64_t v12 = *v9;
        v9 += 2;
        unsigned __int16 v18 = v11 - (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 1;
        sub_216179580(v1, &v18, &v18);
      }
    }
  }
  else
  {
    unsigned __int16 v19 = 0;
    sub_216179580((uint64_t **)(a1 + 136), &v19, &v19);
  }
}

uint64_t sub_21621EB50(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  long long v2 = *(void **)(a1 + 40);
  while (1)
  {
    if (v1 == v2) {
      return 0;
    }
    uint64_t v3 = *v1;
    if ((*(unsigned int (**)(void))(*(void *)*v1 + 64))(*v1) == 1
      && *(_WORD *)(*(void *)(v3 + 8) + 2) == 20)
    {
      break;
    }
    v1 += 2;
  }
  return 1;
}

uint64_t sub_21621EBD8(void *a1, _WORD *a2, int a3)
{
  *a2 = 0;
  uint64_t v4 = a1 + 1;
  if (a1[2] == a1[1] && a1[5] == a1[4]) {
    return 0;
  }
  uint64_t v5 = 4;
  if (a3) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v4 = a1 + 4;
  }
  uint64_t v6 = (uint64_t *)a1[v5];
  BOOL v7 = (uint64_t *)v4[1];
  if (v6 == v7) {
    return 0;
  }
  uint64_t v8 = 0;
  do
  {
    unsigned int v9 = (*(uint64_t (**)(void))(*(void *)*v6 + 40))();
    if (v9 > (unsigned __int16)*a2)
    {
      *a2 = v9;
      uint64_t v8 = *v6;
    }
    v6 += 2;
  }
  while (v6 != v7);
  return v8;
}

uint64_t sub_21621ECA0(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  while (v6 != v7)
  {
    BOOL v8 = *(unsigned char *)(*(void *)v6 + 16) == 0;
    if (*(unsigned char *)(*(void *)v6 + 16) || sub_21632279C(a2, *(unsigned __int16 **)(*(void *)v6 + 8), a3)) {
      return v8;
    }
    v6 += 16;
  }
  uint64_t v10 = a1[4];
  uint64_t v9 = a1[5];
  if (v10 == v9) {
    return 0;
  }
  while (1)
  {
    if (*(unsigned char *)(*(void *)v10 + 16))
    {
      int v11 = 0;
      int v12 = 1;
      return v12 & v11;
    }
    if (sub_21632279C(a2, *(unsigned __int16 **)(*(void *)v10 + 8), a3)) {
      break;
    }
    v10 += 16;
    if (v10 == v9)
    {
      int v12 = 0;
      return v12 & v11;
    }
  }
  int v12 = 1;
  int v11 = 1;
  return v12 & v11;
}

uint64_t sub_21621ED78(void *a1, int a2, char a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; i != (uint64_t *)a1[2]; i += 2)
  {
    uint64_t v4 = *i;
    if (*(unsigned __int16 *)(*(void *)(*i + 8) + 2) == a2) {
      return v4;
    }
  }
  for (CFIndex j = (uint64_t *)a1[7]; j != (uint64_t *)a1[8]; j += 2)
  {
    uint64_t v4 = *j;
    if (*(unsigned __int16 *)(*(void *)(*j + 8) + 2) == a2) {
      return v4;
    }
  }
  if ((a3 & 1) == 0)
  {
    for (k = (uint64_t *)a1[4]; k != (uint64_t *)a1[5]; k += 2)
    {
      uint64_t v4 = *k;
      if (*(unsigned __int16 *)(*(void *)(*k + 8) + 2) == a2) {
        return v4;
      }
    }
    for (m = (uint64_t *)a1[10]; m != (uint64_t *)a1[11]; m += 2)
    {
      uint64_t v4 = *m;
      if (*(unsigned __int16 *)(*(void *)(*m + 8) + 2) == a2) {
        return v4;
      }
    }
  }
  return 0;
}

uint64_t sub_21621EE28(void *a1, int a2, int a3, char a4)
{
  BOOL v8 = (void *)a1[1];
  uint64_t v9 = (void *)a1[2];
  while (v8 != v9)
  {
    if (*(unsigned __int16 *)(*(void *)(*v8 + 8) + 2) == a2
      && (*(unsigned int (**)(void))(*(void *)*v8 + 40))(*v8) == a3)
    {
      return *v8;
    }
    v8 += 2;
  }
  if ((a4 & 1) == 0)
  {
    BOOL v8 = (void *)a1[4];
    int v11 = (void *)a1[5];
    while (v8 != v11)
    {
      if (*(unsigned __int16 *)(*(void *)(*v8 + 8) + 2) == a2
        && (*(unsigned int (**)(void))(*(void *)*v8 + 40))(*v8) == a3)
      {
        return *v8;
      }
      v8 += 2;
    }
  }
  return 0;
}

uint64_t sub_21621EF1C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      sub_2161121B0(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21621EF7C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21621EFF4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21621EFF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21621F088((uint64_t)v12);
  return v10;
}

uint64_t sub_21621F088(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21621F0C0(a1);
  }
  return a1;
}

void sub_21621F0C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_2161121B0(v3);
    }
    v1 += 16;
  }
}

void **sub_21621F104(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_21621F138(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_2161121B0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

long long *sub_21621F18C(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        sub_2161121B0(v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_21621F1F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C98C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21621F218(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C98C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21621F26C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21621F294(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21621F2B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9818;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21621F308(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21621F330(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21621F350(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21621F3A4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_21621F3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2161868BC(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2161868BC(&a9, 0) = 0u;
  *(void *)(a1 + 136) = a4;
  *(void *)a1 = &unk_26C6C5DA8;
  sub_216240020((void *)(a1 + 144), a2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(double *)(a1 + 20sub_2161868BC(&a9, 0) = *(float *)(sub_2161A1184(1u) + 4);
  return a1;
}

void sub_21621F470(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 184) = v6;
    operator delete(v6);
  }
  sub_2162408EC(v2);
  sub_21621F4A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21621F4A8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5790;
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v6 = (void **)(a1 + 48);
  sub_216129CCC(&v6);
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_21621F530(uint64_t *a1)
{
  a1[23] = a1[22];
  return sub_21618C36C(a1);
}

void sub_21621F53C(uint64_t *a1, uint64_t a2, int a3)
{
  if (a1[6] != a1[7])
  {
    if (*(_DWORD *)(a2 + 64) == 1 || (uint64_t v6 = a1[11], v6 != a1[10]) && *(_DWORD *)(v6 - 4) == 2) {
      (*(void (**)(uint64_t *))(*a1 + 16))(a1);
    }
  }

  sub_21618C678(a1, a2, a3);
}

void sub_21621F5E0(void *a1, uint64_t a2)
{
  uint64_t v5 = (void *)a1[23];
  unint64_t v4 = a1[24];
  if ((unint64_t)v5 >= v4)
  {
    long long v7 = (void *)a1[22];
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_2160FFA74();
      }
      int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      int v12 = 0;
    }
    char v13 = &v12[8 * v8];
    *(void *)char v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = (void *)a1[22];
    }
    a1[22] = v13;
    a1[23] = v6;
    a1[24] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  a1[23] = v6;
}

uint64_t sub_21621F6CC(int a1, char *__s)
{
  uint64_t v258 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DAC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DAC8))
  {
    sub_21610B834(__p, "ml");
    int v11 = 0;
    sub_21610B834(v12, "mn");
    int v13 = 1;
    sub_21610B834(v14, "qw");
    int v15 = 2;
    sub_21610B834(v16, "qa");
    int v17 = 3;
    sub_21610B834(v18, "wq");
    int v19 = 4;
    sub_21610B834(v20, "we");
    int v21 = 5;
    sub_21610B834(v22, "wa");
    int v23 = 6;
    sub_21610B834(v24, "ws");
    int v25 = 7;
    sub_21610B834(v26, "ew");
    int v27 = 8;
    sub_21610B834(v28, "er");
    int v29 = 9;
    sub_21610B834(v30, "es");
    int v31 = 10;
    sub_21610B834(v32, "ed");
    int v33 = 11;
    sub_21610B834(v34, "re");
    int v35 = 12;
    sub_21610B834(v36, "rt");
    int v37 = 13;
    sub_21610B834(v38, "rd");
    int v39 = 14;
    sub_21610B834(v40, "rf");
    int v41 = 15;
    sub_21610B834(v42, "tr");
    int v43 = 16;
    sub_21610B834(v44, "ty");
    int v45 = 17;
    sub_21610B834(v46, "tf");
    int v47 = 18;
    sub_21610B834(v48, "tg");
    int v49 = 19;
    sub_21610B834(v50, "yt");
    int v51 = 20;
    sub_21610B834(v52, "yu");
    int v53 = 21;
    sub_21610B834(v54, "yg");
    int v55 = 22;
    sub_21610B834(v56, "yh");
    int v57 = 23;
    sub_21610B834(v58, "uy");
    int v59 = 24;
    sub_21610B834(v60, "ui");
    int v61 = 25;
    sub_21610B834(v62, "uh");
    int v63 = 26;
    sub_21610B834(v64, "uj");
    int v65 = 27;
    sub_21610B834(v66, "iu");
    int v67 = 28;
    sub_21610B834(v68, "io");
    int v69 = 29;
    sub_21610B834(v70, "ij");
    int v71 = 30;
    sub_21610B834(v72, "ik");
    int v73 = 31;
    sub_21610B834(v74, "oi");
    int v75 = 32;
    sub_21610B834(v76, "op");
    int v77 = 33;
    sub_21610B834(v78, "ok");
    int v79 = 34;
    sub_21610B834(v80, "ol");
    int v81 = 35;
    sub_21610B834(v82, "po");
    int v83 = 36;
    sub_21610B834(v84, "pl");
    int v85 = 37;
    sub_21610B834(v86, "aq");
    int v87 = 38;
    sub_21610B834(v88, "aw");
    int v89 = 39;
    sub_21610B834(v90, "as");
    int v91 = 40;
    sub_21610B834(v92, "az");
    int v93 = 41;
    sub_21610B834(v94, "sw");
    int v95 = 42;
    sub_21610B834(v96, "se");
    int v97 = 43;
    sub_21610B834(v98, "sa");
    int v99 = 44;
    sub_21610B834(v100, "sd");
    int v101 = 45;
    sub_21610B834(v102, "sz");
    int v103 = 46;
    sub_21610B834(v104, "sx");
    int v105 = 47;
    sub_21610B834(v106, "de");
    int v107 = 48;
    sub_21610B834(v108, "dr");
    int v109 = 49;
    sub_21610B834(v110, "ds");
    int v111 = 50;
    sub_21610B834(v112, "df");
    int v113 = 51;
    sub_21610B834(v114, "dz");
    int v115 = 52;
    sub_21610B834(v116, "dx");
    int v117 = 53;
    sub_21610B834(v118, "dc");
    int v119 = 54;
    sub_21610B834(v120, "fr");
    int v121 = 55;
    sub_21610B834(v122, "ft");
    int v123 = 56;
    sub_21610B834(v124, "fd");
    int v125 = 57;
    sub_21610B834(v126, "fg");
    int v127 = 58;
    sub_21610B834(v128, "fx");
    int v129 = 59;
    sub_21610B834(v130, "fc");
    int v131 = 60;
    sub_21610B834(v132, "fv");
    int v133 = 61;
    sub_21610B834(v134, "gt");
    int v135 = 62;
    sub_21610B834(v136, "gy");
    int v137 = 63;
    sub_21610B834(v138, "gf");
    int v139 = 64;
    sub_21610B834(v140, "gh");
    int v141 = 65;
    sub_21610B834(v142, "gc");
    int v143 = 66;
    sub_21610B834(v144, "gv");
    int v145 = 67;
    sub_21610B834(v146, "gb");
    int v147 = 68;
    sub_21610B834(v148, "hy");
    int v149 = 69;
    sub_21610B834(v150, "hu");
    int v151 = 70;
    sub_21610B834(v152, "hg");
    int v153 = 71;
    sub_21610B834(v154, "hj");
    int v155 = 72;
    sub_21610B834(v156, "hv");
    int v157 = 73;
    sub_21610B834(v158, "hb");
    int v159 = 74;
    sub_21610B834(v160, "hn");
    int v161 = 75;
    sub_21610B834(v162, "ju");
    int v163 = 76;
    sub_21610B834(v164, "ji");
    int v165 = 77;
    sub_21610B834(v166, "jh");
    int v167 = 78;
    sub_21610B834(v168, "jk");
    int v169 = 79;
    sub_21610B834(v170, "jb");
    int v171 = 80;
    sub_21610B834(v172, "jn");
    int v173 = 81;
    sub_21610B834(v174, "jm");
    int v175 = 82;
    sub_21610B834(v176, "ki");
    int v177 = 83;
    sub_21610B834(v178, "ko");
    int v179 = 84;
    sub_21610B834(v180, "kj");
    int v181 = 85;
    sub_21610B834(v182, "kl");
    int v183 = 86;
    sub_21610B834(v184, "kn");
    int v185 = 87;
    sub_21610B834(v186, "km");
    int v187 = 88;
    sub_21610B834(v188, "lo");
    int v189 = 89;
    sub_21610B834(v190, "lp");
    int v191 = 90;
    sub_21610B834(v192, "lk");
    int v193 = 91;
    sub_21610B834(v194, "lm");
    int v195 = 92;
    sub_21610B834(v196, "za");
    int v197 = 93;
    sub_21610B834(v198, "zs");
    int v199 = 94;
    sub_21610B834(v200, "zd");
    int v201 = 95;
    sub_21610B834(v202, "zx");
    int v203 = 96;
    sub_21610B834(v204, "xz");
    int v205 = 97;
    sub_21610B834(v206, "xc");
    int v207 = 98;
    sub_21610B834(v208, "xs");
    int v209 = 99;
    sub_21610B834(v210, "xd");
    int v211 = 100;
    sub_21610B834(v212, "xf");
    int v213 = 101;
    sub_21610B834(v214, "cx");
    int v215 = 102;
    sub_21610B834(v216, "cv");
    int v217 = 103;
    sub_21610B834(v218, "cd");
    int v219 = 104;
    sub_21610B834(v220, "cf");
    int v221 = 105;
    sub_21610B834(v222, "cg");
    int v223 = 106;
    sub_21610B834(v224, "vf");
    int v225 = 107;
    sub_21610B834(v226, "vg");
    int v227 = 108;
    sub_21610B834(v228, "vh");
    int v229 = 109;
    sub_21610B834(v230, "vc");
    int v231 = 110;
    sub_21610B834(v232, "vb");
    int v233 = 111;
    sub_21610B834(v234, "bv");
    int v235 = 112;
    sub_21610B834(v236, "bn");
    int v237 = 113;
    sub_21610B834(v238, "bg");
    int v239 = 114;
    sub_21610B834(v240, "bh");
    int v241 = 115;
    sub_21610B834(v242, "bj");
    int v243 = 116;
    sub_21610B834(v244, "nb");
    int v245 = 117;
    sub_21610B834(v246, "nm");
    int v247 = 118;
    sub_21610B834(v248, "nh");
    int v249 = 119;
    sub_21610B834(v250, "nj");
    int v251 = 120;
    sub_21610B834(v252, "nk");
    int v253 = 121;
    sub_21610B834(v254, "mj");
    int v255 = 122;
    sub_21610B834(v256, "mk");
    int v257 = 123;
    sub_216220EE0((uint64_t)qword_26797DAD0, (unsigned __int8 *)__p, 124);
    uint64_t v7 = 496;
    do
    {
      if (*((char *)&__p[v7 - 1] - 1) < 0) {
        operator delete(__p[v7 - 4]);
      }
      v7 -= 4;
    }
    while (v7 * 8);
    __cxa_atexit((void (*)(void *))sub_21622093C, qword_26797DAD0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DAC8);
  }
  sub_21610B834(__p, __s);
  uint64_t v3 = sub_21618241C(qword_26797DAD0, (unsigned __int8 *)__p);
  unint64_t v4 = v3;
  if ((v10 & 0x80000000) == 0)
  {
    if (v3) {
      goto LABEL_4;
    }
    return -1;
  }
  operator delete(__p[0]);
  if (!v4) {
    return -1;
  }
LABEL_4:
  sub_21610B834(__p, __s);
  uint64_t v8 = __p;
  uint64_t v5 = *((unsigned int *)sub_216221284((uint64_t)qword_26797DAD0, (unsigned __int8 *)__p, (uint64_t)&unk_21636EABA, (long long **)&v8)+ 10);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_2162206C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v19 = 3968;
  while (1)
  {
    if (*(char *)(v17 + v19 - 9) < 0) {
      operator delete(*(void **)(v17 + v19 - 32));
    }
    v19 -= 32;
    if (!v19)
    {
      __cxa_guard_abort(&qword_26797DAC8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_216220940(void *a1, unsigned __int16 **a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = *a2;
    do
    {
      unsigned int v8 = *v7;
      v7 += 2;
      v6 += strlen((&off_26426EF10)[2 * v8]);
    }
    while (v7 != v5);
  }
  uint64_t v9 = a1[4] - a1[3];
  uint64_t v10 = v6 - (v9 >> 2);
  if (v10 < 0) {
    uint64_t v10 = (v9 >> 2) - v6;
  }
  if ((unint64_t)v10 > 1) {
    goto LABEL_9;
  }
  uint64_t v12 = v9 >> 2;
  if (v6 >= v9 >> 2)
  {
    if (v4 == v5)
    {
LABEL_40:
      char v32 = 1;
    }
    else
    {
      uint64_t v26 = 0;
      while (1)
      {
        int v27 = (&off_26426EF10)[2 * *v4];
        size_t v28 = strlen(v27);
        size_t v29 = v28;
        if (v28) {
          break;
        }
LABEL_39:
        v26 += v29;
        v4 += 2;
        if (v4 == v5) {
          goto LABEL_40;
        }
      }
      uint64_t v30 = v26;
      size_t v31 = v28;
      while (1)
      {
        BOOL v2 = v12 == v30;
        if (v12 == v30 || (sub_2162690A4(*(void *)(a1[22] + 8 * v30), *v27) & 1) == 0) {
          break;
        }
        ++v27;
        ++v30;
        if (!--v31) {
          goto LABEL_39;
        }
      }
      char v32 = 0;
    }
    LOBYTE(v11) = v32 | v2;
  }
  else
  {
    if (v4 == v5)
    {
LABEL_9:
      LOBYTE(v11) = 0;
      return v11 & 1;
    }
    uint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = (&off_26426EF10)[2 * *v4];
      size_t v15 = strlen(v14);
      if (v15) {
        break;
      }
LABEL_30:
      LOBYTE(v11) = 0;
      v4 += 2;
      if (v4 == v5) {
        return v11 & 1;
      }
    }
    size_t v16 = v15;
    uint64_t v17 = a1[22];
    while (1)
    {
      uint64_t v18 = *(void *)(v17 + 8 * v13);
      uint64_t v19 = *(unsigned __int16 **)(v18 + 8);
      if (v19 == *(unsigned __int16 **)(v18 + 16)) {
        int v20 = 0;
      }
      else {
        int v20 = *v19;
      }
      int v21 = v20 << 24;
      if ((v20 & 0xFB) == 0x61 || v21 == 1862270976)
      {
        if (v13 + 1 != (a1[23] - v17) >> 3)
        {
          uint64_t v22 = *(void *)(v17 + 8 * (v13 + 1));
          int v23 = *(unsigned __int16 **)(v22 + 8);
          if (v23 == *(unsigned __int16 **)(v22 + 16)) {
            int v24 = 0;
          }
          else {
            int v24 = *v23;
          }
          if (v21 == v24 << 24) {
            ++v13;
          }
        }
        uint64_t v18 = *(void *)(v17 + 8 * v13);
      }
      char v25 = *v14++;
      int v11 = sub_2162690A4(v18, v25);
      if (!v11) {
        break;
      }
      ++v13;
      uint64_t v17 = a1[22];
      if (v13 == (a1[23] - v17) >> 3) {
        break;
      }
      if (!--v16) {
        goto LABEL_30;
      }
    }
  }
  return v11 & 1;
}

void sub_216220B70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v5 = 0;
    unint64_t v6 = a1 + 6;
    uint64_t v7 = (uint64_t)(a1 + 8);
    do
    {
      unsigned int v8 = (int **)(v2 + 32 * v5);
      if (*v8 != v8[1])
      {
        if (!(*(unsigned int (**)(uint64_t *))(*a1 + 104))(a1)) {
          return;
        }
        if ((*(unsigned int (**)(uint64_t *, int **))(*a1 + 96))(a1, v8))
        {
          sub_21610FC8C(__p, v8[1] - *v8);
          uint64_t v9 = *v8;
          uint64_t v10 = __p[0];
          uint64_t v11 = (char *)v8[1] - (char *)*v8;
          if (v11)
          {
            unint64_t v12 = v11 >> 2;
            if (v12 <= 1) {
              unint64_t v12 = 1;
            }
            uint64_t v13 = __p[0];
            do
            {
              int v14 = *v9++;
              *v13++ = v14;
              --v12;
            }
            while (v12);
          }
          uint64_t v15 = (char *)__p[1] - (char *)v10;
          if (a1[9] <= (unint64_t)(v15 >> 1)) {
            uint64_t v16 = v15 >> 1;
          }
          else {
            uint64_t v16 = a1[9];
          }
          a1[9] = v16;
          uint64_t v17 = v8[3];
          uint64_t v18 = (void *)a1[7];
          unint64_t v19 = a1[8];
          if ((unint64_t)v18 >= v19)
          {
            uint64_t v21 = ((uint64_t)v18 - *v6) >> 5;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 59) {
              sub_21610CB04();
            }
            uint64_t v23 = v19 - *v6;
            if (v23 >> 4 > v22) {
              unint64_t v22 = v23 >> 4;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            v33[4] = v7;
            char v25 = (char *)sub_216115A58(v7, v24);
            uint64_t v26 = &v25[32 * v21];
            v33[0] = v25;
            v33[1] = v26;
            v33[3] = &v25[32 * v27];
            *(void *)uint64_t v26 = 0;
            *((void *)v26 + 1) = 0;
            *((void *)v26 + 2) = 0;
            *(_OWORD *)uint64_t v26 = *(_OWORD *)__p;
            *((void *)v26 + 2) = v32;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v32 = 0;
            *((void *)v26 + 3) = v17;
            v33[2] = v26 + 32;
            sub_21618E840(v6, v33);
            uint64_t v28 = a1[7];
            sub_2161415B8((uint64_t)v33);
            size_t v29 = __p[0];
            a1[7] = v28;
            unint64_t v30 = v28 - a1[6];
            if (v29)
            {
              __p[1] = v29;
              operator delete(v29);
              if (v30 >= 0x41) {
                return;
              }
            }
            else if (v30 > 0x40)
            {
              return;
            }
          }
          else
          {
            *uint64_t v18 = 0;
            v18[1] = 0;
            _DWORD v18[2] = 0;
            *(_OWORD *)uint64_t v18 = *(_OWORD *)__p;
            _DWORD v18[2] = v32;
            void v18[3] = v17;
            int v20 = v18 + 4;
            a1[7] = (uint64_t)v20;
            if ((unint64_t)v20 - a1[6] >= 0x41) {
              return;
            }
          }
        }
      }
      ++v5;
      uint64_t v2 = *a2;
    }
    while (v5 < (a2[1] - *a2) >> 5);
  }
}

void sub_216220DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216220E24(void *a1)
{
  sub_216220E78(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216220E5C(uint64_t a1)
{
  return a1 + 144;
}

BOOL sub_216220E64(uint64_t a1, double a2, double a3)
{
  return a3 - *(double *)(a1 + 200) <= a2;
}

uint64_t sub_216220E78(void *a1)
{
  *a1 = &unk_26C6C5DA8;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  sub_2162408EC((uint64_t)(a1 + 18));

  return sub_21621F4A8((uint64_t)a1);
}

uint64_t sub_216220EE0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_216220F58(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_216220F44(_Unwind_Exception *a1)
{
  sub_2161E05C4(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216220F58(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_216129260(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_21612970C(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_2162211D8(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_2161297B4(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_2162211B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_216129A00((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_2162211D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_21610A674(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v8 + 1sub_2161868BC(&a9, 0) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216221268(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216129A00(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_216221284(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_216129260(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_21612970C(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  BOOL v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)BOOL v18 = 0;
  *((_DWORD *)i + 1sub_2161868BC(&a9, 0) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_2161297B4(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *uint64_t v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  void *v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_2162214F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216129A00(v11, v10);
  _Unwind_Resume(a1);
}

void *sub_216221510(void *a1, _DWORD *a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(sub_21621AF08() + 8 * (*a2 & 3));
    (*(void (**)(uint64_t, _DWORD *))(*(void *)v4 + 32))(v4, a2);
  }
  else
  {
    sub_21621A960(a1, 0);
  }
  return a1;
}

_DWORD **sub_216221584(_DWORD **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(uint64_t (**)(void))(**(void **)(sub_21621AF08() + 8 * (**result & 3)) + 24);
    return (_DWORD **)v2();
  }
  return result;
}

_DWORD **sub_21622161C(_DWORD **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(uint64_t (**)(void))(**(void **)(sub_21621AF08() + 8 * (**result & 3)) + 24);
    return (_DWORD **)v2();
  }
  return result;
}

uint64_t sub_2162216C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))();
}

uint64_t sub_2162216E8(void *a1)
{
  for (uint64_t i = a1[1]; ; uint64_t i = a1[1])
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)i + 48))(i);
    if (!v3 || !(*(unsigned int (**)(void *, uint64_t))(*a1 + 40))(a1, v3)) {
      break;
    }
  }
  return v3;
}

uint64_t sub_216221774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

BOOL sub_21622179C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (void *)(v3 + 24);
  uint64_t v6 = [a2 a2:a3];
  return sub_2161DE698(v4, &v6) != 0;
}

void *sub_2162217F4(void *a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  *a1 = &unk_26C6C2EA8;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = a3;
  a1[5] = _Block_copy(aBlock);
  return a1;
}

void sub_216221848(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216221884(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C2EA8;
  _Block_release(*(const void **)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216221904(uint64_t a1)
{
  sub_216221884(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21622193C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 32);

  return v2();
}

uint64_t sub_2162219B8(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8));
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_216221A2C(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    uint64_t v2 = sub_2162216E8((void *)a1);
    *(void *)(a1 + 24) = v2;
  }
  uint64_t v5 = (void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v2) {
      goto LABEL_5;
    }
LABEL_11:
    if (!v4) {
      return v4;
    }
    goto LABEL_14;
  }
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v2);
  *(void *)(a1 + 32) = v4;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    goto LABEL_11;
  }
LABEL_5:
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    uint64_t v7 = 24;
    if (v6 == 1) {
      uint64_t v7 = 32;
    }
    else {
      uint64_t v5 = v3;
    }
    uint64_t v4 = *(void *)(a1 + v7);
  }
  else
  {
    uint64_t v5 = v3;
    uint64_t v4 = v2;
  }
LABEL_14:
  *uint64_t v5 = 0;
  return v4;
}

void sub_216221B08()
{
}

uint64_t sub_216221B1C()
{
  return 0;
}

void sub_216221B28()
{
}

CFURLRef sub_216221B3C(const __CFURL *a1)
{
  CFStringRef PathComponent = CFURLCopyLastPathComponent(a1);
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @".%@.lock", PathComponent);
  CFRelease(PathComponent);
  CFURLRef v4 = CFURLCreateCopyDeletingLastPathComponent(0, a1);
  CFURLRef v5 = CFURLCreateCopyAppendingPathComponent(0, v4, v3, 0);
  CFRelease(v4);
  CFRelease(v3);
  return v5;
}

uint64_t sub_216221BD4(const __CFURL *a1)
{
  CFURLRef v1 = sub_216221B3C(a1);
  uint64_t v2 = (const char *)sub_216221C48(v1);
  CFRelease(v1);
  uint64_t v3 = open(v2, 514, 420);
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  return v3;
}

uint64_t sub_216221C48(const __CFURL *a1)
{
  CFURLRef v1 = CFURLCopyAbsoluteURL(a1);
  CFStringRef v2 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  CFRelease(v1);
  if (v2)
  {
    CFIndex Length = CFStringGetLength(v2);
    CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    operator new[]();
  }
  return 0;
}

__CFString *sub_216221D00(int a1)
{
  CFURLRef v1 = @"completion-learning-dictionary-zh-Hant";
  if (a1 != 2) {
    CFURLRef v1 = 0;
  }
  if (a1 == 1) {
    return @"completion-learning-dictionary-zh-Hans";
  }
  else {
    return v1;
  }
}

__CFString *sub_216221D24(int a1)
{
  CFURLRef v1 = @"completion-learning-zh-Hant.dictionary";
  if (a1 != 2) {
    CFURLRef v1 = 0;
  }
  if (a1 == 1) {
    return @"completion-learning-zh-Hans.dictionary";
  }
  else {
    return v1;
  }
}

void sub_216221D48()
{
}

void sub_216221E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_2161121B0(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216221E78(uint64_t a1)
{
  CFStringRef v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_2161121B0(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216221EB8(int a1, CFStringRef theString)
{
  memset(buffer, 0, sizeof(buffer));
  CFIndex Length = CFStringGetLength(theString);
  sub_216184BFC((uint64_t)buffer, Length);
  v5.location = 0;
  v5.length = Length;
  CFStringGetCharacters(theString, v5, buffer[0]);
  sub_216221D48();
}

void sub_216221F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216221F68()
{
}

void sub_21622202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_2161121B0(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216222054(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_216222064(uint64_t *a1, void *a2, unsigned __int16 ***a3, uint64_t a4)
{
  __p = 0;
  unint64_t v48 = 0;
  int v49 = 0;
  uint64_t v6 = *a1;
  if (a1[1] == *a1)
  {
    float v21 = 0;
    unint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    LODWORD(v1sub_2161868BC(&a9, 0) = 0;
    do
    {
      uint64_t v11 = *(unsigned __int16 *)(v6 + 2 * v9) - 48;
      if (v8 >= v49)
      {
        uint8x8_t v12 = __p;
        uint64_t v13 = (v8 - __p) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v15 = v49 - __p;
        if ((v49 - __p) >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          float v17 = (char *)sub_2161129B4((uint64_t)&v49, v16);
          uint8x8_t v12 = __p;
          unint64_t v8 = v48;
        }
        else
        {
          float v17 = 0;
        }
        BOOL v18 = &v17[4 * v13];
        *(_DWORD *)BOOL v18 = v11;
        long long v19 = v18 + 4;
        while (v8 != v12)
        {
          int v20 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v18 - 1) = v20;
          v18 -= 4;
        }
        __p = v18;
        int v49 = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
        unint64_t v8 = v19;
      }
      else
      {
        *(_DWORD *)unint64_t v8 = v11;
        v8 += 4;
      }
      unint64_t v48 = v8;
      uint64_t v10 = v11 + (int)v10;
      ++v9;
      uint64_t v6 = *a1;
    }
    while (v9 < (a1[1] - *a1) >> 1);
    float v21 = __p;
  }
  if (a2[1] - *a2 == v10)
  {
    unint64_t v22 = (unint64_t)(v8 - v21) >> 2;
    uint64_t v23 = (v22 - 1);
    if ((int)v22 - 1 < 0)
    {
      uint64_t v44 = 1;
      if (!v21) {
        return v44;
      }
      goto LABEL_59;
    }
    while (1)
    {
      float v21 = __p;
      unint64_t v24 = *(int *)&__p[4 * v23];
      v10 -= v24;
      size_t v25 = **a3;
      if (v24) {
        BOOL v26 = v25 == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (!v26)
      {
        unint64_t v27 = 0;
        uint64_t v28 = *a2 + v10;
        do
        {
          size_t v25 = sub_21632279C((uint64_t)a3, v25, *(char *)(v28 + v27++));
          if (v25) {
            BOOL v29 = v27 >= v24;
          }
          else {
            BOOL v29 = 1;
          }
        }
        while (!v29);
      }
      if (!v25) {
        break;
      }
      int v30 = v25[1];
      if (v30 == 0xFFFF) {
        break;
      }
      uint64_t v32 = *(_WORD **)(a4 + 8);
      unint64_t v31 = *(void *)(a4 + 16);
      if ((unint64_t)v32 >= v31)
      {
        unint64_t v34 = *(_WORD **)a4;
        uint64_t v35 = (uint64_t)v32 - *(void *)a4;
        if (v35 <= -3) {
          sub_21610CB04();
        }
        uint64_t v36 = v35 >> 1;
        unint64_t v37 = v31 - (void)v34;
        if (v37 <= (v35 >> 1) + 1) {
          unint64_t v38 = v36 + 1;
        }
        else {
          unint64_t v38 = v37;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v39 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v39 = v38;
        }
        if (v39)
        {
          __int16 v40 = (char *)sub_21610FD44(a4 + 16, v39);
          unint64_t v34 = *(_WORD **)a4;
          uint64_t v32 = *(_WORD **)(a4 + 8);
          LOWORD(v3sub_2161868BC(&a9, 0) = v25[1];
        }
        else
        {
          __int16 v40 = 0;
        }
        int v41 = &v40[2 * v36];
        *(_WORD *)int v41 = v30;
        int v33 = v41 + 2;
        while (v32 != v34)
        {
          __int16 v42 = *--v32;
          *((_WORD *)v41 - 1) = v42;
          v41 -= 2;
        }
        *(void *)a4 = v41;
        *(void *)(a4 + 8) = v33;
        *(void *)(a4 + 16) = &v40[2 * v39];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *uint64_t v32 = v30;
        int v33 = v32 + 1;
      }
      *(void *)(a4 + 8) = v33;
      if (v23-- <= 0)
      {
        uint64_t v44 = 1;
        float v21 = __p;
        if (__p) {
          goto LABEL_59;
        }
        return v44;
      }
    }
  }
  uint64_t v44 = 0;
  if (v21) {
LABEL_59:
  }
    operator delete(v21);
  return v44;
}

void sub_216222348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216222370(uint64_t a1)
{
  uint64_t v2 = sub_2162223B8(a1);
  return !v2 || v2 == sub_21622248C(a1);
}

uint64_t sub_2162223B8(uint64_t a1)
{
  sub_21610B834(__p, off_26797C540[0]);
  uint64_t v2 = sub_216178FA4(a1, __p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if ((void **)(a1 + 8) == v2) {
    return 0;
  }
  uint64_t v3 = (*(uint64_t (**)(void *))(*(void *)v2[7] + 16))(v2[7]);
  CFURLRef v4 = *(unsigned __int16 **)v3;
  CFRange v5 = *(unsigned __int16 **)(v3 + 8);
  if (*(unsigned __int16 **)v3 == v5) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    unsigned int v7 = *v4++;
    uint64_t result = result + v7 - 48;
  }
  while (v4 != v5);
  return result;
}

void sub_216222470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21622248C(uint64_t a1)
{
  sub_21610B834(__p, off_26797C588);
  uint64_t v2 = sub_216178FA4(a1, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = (void *)(*(uint64_t (**)(void *))(*(void *)v2[7] + 16))(v2[7]);
  return (uint64_t)(v3[1] - *v3) >> 1;
}

void sub_216222518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216222534(uint64_t a1, unsigned __int16 ***a2, char a3, void **a4, unsigned char *a5)
{
  *a5 = 0;
  unint64_t v24 = 0;
  size_t v25 = 0;
  uint64_t v26 = 0;
  sub_21610B834(&__p, off_26797C580[0]);
  uint64_t v10 = sub_216178FA4(a1, &__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  uint64_t v11 = (uint64_t *)(*(uint64_t (**)(void *))(*(void *)v10[7] + 16))(v10[7]);
  __p = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  sub_21610B834(v19, off_26797C518);
  uint8x8_t v12 = sub_216178FA4(a1, v19);
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  if ((void **)(a1 + 8) == v12
    || (uint64_t v13 = (*(uint64_t (**)(void *))(*(void *)v12[7] + 16))(v12[7]), &__p == (void **)v13)
    || (sub_21618F924((char *)&__p, *(char **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 1), v22 == __p)|| (sub_21634F8BC(v11, &v24, a3) & 1) == 0|| (char v14 = sub_216222064((uint64_t *)&__p, &v24, a2, (uint64_t)a4), *a5 = v14, (v14 & 1) == 0))
  {
    uint64_t v16 = *v11;
    uint64_t v15 = v11[1];
    uint64_t v17 = (v15 - *v11) >> 1;
    v19[1] = 0;
    int v20 = 0;
    v19[0] = 0;
    sub_216223680((char *)v19, v15, v15, v16, v16, v17);
    BOOL v18 = *a4;
    if (*a4)
    {
      a4[1] = v18;
      operator delete(v18);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    *(_OWORD *)a4 = *(_OWORD *)v19;
    a4[2] = v20;
  }
  if (__p)
  {
    unint64_t v22 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    size_t v25 = v24;
    operator delete(v24);
  }
}

void sub_216222748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162227B4(CFDictionaryRef theDict, unsigned __int16 ***a2, void **a3, int a4, unsigned char *a5)
{
  char v6 = a4;
  *a5 = 0;
  if (a4)
  {
    uint64_t result = CFDictionaryContainsKey(theDict, off_26797C520);
    if (!result) {
      return result;
    }
    uint64_t v11 = (const void **)&off_26797C528;
    uint64_t result = CFDictionaryContainsKey(theDict, off_26797C528);
    if (!result) {
      return result;
    }
    uint8x8_t v12 = (const void **)&off_26797C520;
  }
  else
  {
    uint64_t result = CFDictionaryContainsKey(theDict, off_26797C530);
    if (!result) {
      return result;
    }
    uint64_t v11 = (const void **)&off_26797C538;
    uint64_t result = CFDictionaryContainsKey(theDict, off_26797C538);
    if (!result) {
      return result;
    }
    uint8x8_t v12 = (const void **)&off_26797C530;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, *v12);
  CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(theDict, *v11);
  if (Value) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    return 0;
  }
  CFStringRef v16 = v14;
  sub_2161E212C(Value, (UniChar **)&v26);
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_2161E212C(v16, (UniChar **)__p);
  if (sub_21634F8BC((uint64_t *)&v26, &v23, v6))
  {
    int v18 = sub_216222064((uint64_t *)__p, &v23, a2, (uint64_t)a3);
    *a5 = v18;
    if (!v18) {
      goto LABEL_18;
    }
  }
  else if (!*a5)
  {
LABEL_18:
    float v21 = 0;
    long long v20 = 0uLL;
    sub_216223680((char *)&v20, (uint64_t)v27, (uint64_t)v27, (uint64_t)v26, (uint64_t)v26, (v27 - (unsigned char *)v26) >> 1);
    long long v19 = *a3;
    if (*a3)
    {
      a3[1] = v19;
      operator delete(v19);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    *(_OWORD *)a3 = v20;
    a3[2] = v21;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v23)
  {
    unint64_t v24 = v23;
    operator delete(v23);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  return 1;
}

void sub_216222988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162229D0(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x4002000000;
  long long v19 = sub_216222BF4;
  long long v20 = sub_216222C18;
  memset(v21, 0, 24);
  if (a1)
  {
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    void v15[2] = sub_216222C44;
    v15[3] = &unk_264267678;
    v15[4] = &v16;
    sub_216233930(a1, a2, a3, a4, (uint64_t)v15);
    char v6 = v17;
    unint64_t v7 = v17[5];
    unint64_t v8 = (void *)v17[6];
    if (v8 != (void *)v7)
    {
      v23[0] = (void **)sub_216222D78;
      sub_2161925A8(v7, v8, (uint64_t (**)(uint64_t, uint64_t))v23, 126 - 2 * __clz((uint64_t)((uint64_t)v8 - v7) >> 5), 1);
      char v6 = v17;
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    uint64_t v9 = v6[5];
    uint64_t v10 = v6[6];
    v21[3] = a5;
    char v22 = 0;
    uint64_t v11 = v10 - v9;
    if (v10 != v9)
    {
      if (v11 < 0) {
        sub_21610CB04();
      }
      uint8x8_t v12 = (char *)sub_216115A58(a5 + 16, v11 >> 5);
      *(void *)a5 = v12;
      *(void *)(a5 + 8) = v12;
      *(void *)(a5 + 16) = &v12[32 * v13];
      uint64_t v25 = v12;
      uint64_t v26 = v12;
      v23[0] = (void **)(a5 + 16);
      v23[1] = (void **)&v25;
      void v23[2] = (void **)&v26;
      CFStringRef v14 = (uint64_t *)v12;
      char v24 = 0;
      do
      {
        sub_21619420C(v14, v9);
        *((_DWORD *)v14 + 6) = *(_DWORD *)(v9 + 24);
        CFStringRef v14 = (uint64_t *)(v26 + 32);
        v26 += 32;
        v9 += 32;
      }
      while (v9 != v10);
      char v24 = 1;
      sub_2162236F4((uint64_t)v23);
      *(void *)(a5 + 8) = v14;
    }
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  _Block_object_dispose(&v16, 8);
  v23[0] = (void **)v21;
  sub_2161921F0(v23);
}

void sub_216222BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_2161921F0((void ***)va1);
  _Block_object_dispose(va, 8);
  sub_2161921F0((void ***)va1);
  _Unwind_Resume(a1);
}

__n128 sub_216222BF4(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_2161868BC(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_216222C18(uint64_t a1)
{
  CFURLRef v1 = (void **)(a1 + 40);
  sub_2161921F0(&v1);
}

void *sub_216222C44(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  unint64_t v6 = *(void *)(v5 + 48);
  unint64_t v7 = *(void *)(v5 + 56);
  if (v6 >= v7)
  {
    uint64_t v10 = *(void *)(v5 + 40);
    uint64_t v11 = (uint64_t)(v6 - v10) >> 5;
    if ((unint64_t)(v11 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v12 = v7 - v10;
    uint64_t v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v20 = v5 + 56;
    if (v14) {
      uint64_t v15 = (char *)sub_216115A58(v5 + 56, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = v15;
    uint64_t v17 = (uint64_t *)&v15[32 * v11];
    uint64_t v18 = v17;
    long long v19 = &v15[32 * v14];
    *((_DWORD *)sub_21619420C(v17, a2) + 6) = a3;
    v18 += 4;
    sub_21619236C((uint64_t *)(v5 + 40), &v16);
    unint64_t v9 = *(void *)(v5 + 48);
    __n128 result = sub_21619252C(&v16);
  }
  else
  {
    __n128 result = sub_21619420C(*(uint64_t **)(v5 + 48), a2);
    *(_DWORD *)(v6 + 24) = a3;
    unint64_t v9 = v6 + 32;
    *(void *)(v5 + 48) = v6 + 32;
  }
  *(void *)(v5 + 48) = v9;
  return result;
}

void sub_216222D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 48) = v10;
  _Unwind_Resume(exception_object);
}

BOOL sub_216222D78(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) > *(_DWORD *)(a2 + 24);
}

void sub_216222D8C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v17[0] = a4;
  v17[1] = a5;
  uint64_t v16 = a3;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  if (a1)
  {
    int v8 = a3;
    if (a6)
    {
      uint64_t v11 = operator new(0x28uLL);
      *uint64_t v11 = &unk_26C6F5648;
      v11[1] = a7;
      v11[2] = a2;
      v11[3] = &v16;
      void v11[4] = v17;
      long long v19 = v11;
      sub_216233D38(a1, a2, v8, (uint64_t)v18, -1);
    }
    else
    {
      uint64_t v12 = operator new(0x28uLL);
      *uint64_t v12 = &unk_26C6F5648;
      v12[1] = a7;
      uint64_t v12[2] = a2;
      void v12[3] = &v16;
      v12[4] = v17;
      long long v19 = v12;
      sub_216233B80(a1, a2, v8, (uint64_t)v18);
    }
    sub_2162252B8(v18);
    unint64_t v13 = a7[1];
    unint64_t v14 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - *a7) >> 3));
    if (v13 == *a7) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    sub_21622375C(*a7, v13, v15, 1);
  }
}

void sub_216222EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2162252B8((void ***)va);
  sub_2162249EC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216222F20(uint64_t a1, char *a2)
{
  sub_21610B834(__p, a2);
  uint64_t v3 = sub_216178FA4(a1, __p);
  uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)v3[7] + 16))(v3[7]);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_216222F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216222FB8(uint64_t a1, char *a2)
{
  sub_21610B834(__p, a2);
  uint64_t v3 = sub_216178FA4(a1, __p);
  uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)v3[7] + 24))(v3[7]);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_216223034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216223050(void *a1)
{
  *a1 = &unk_26C6BD708;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2162230A0(void *a1)
{
  *a1 = &unk_26C6BD708;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216223110(uint64_t a1)
{
  return a1 + 8;
}

void sub_216223118()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3C0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C220], MEMORY[0x263F8C178]);
}

void sub_216223164()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3C0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C220], MEMORY[0x263F8C178]);
}

void *sub_2162231B0(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = sub_21610FD04(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216223210(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21622322C(void *__dst, long long *a2, void *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  uint64_t v6 = a3[1];
  __dst[3] = *a3;
  __dst[4] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void sub_21622329C()
{
}

uint64_t sub_2162232B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_2162232B8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        sub_2161936EC((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216223344(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216129BFC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = (uint64_t *)&v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  sub_21619420C(v14, a2);
  uint64_t v15 = v14 + 3;
  sub_21622344C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216223604(&v13);
  return v11;
}

void sub_216223438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216223604((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21622344C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2162234C4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2162234C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      uint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *uint64_t v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  sub_216223588((uint64_t)v16);
  return v14;
}

uint64_t sub_216223588(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2162235C0(a1);
  }
  return a1;
}

void sub_2162235C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    sub_2161936EC(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **sub_216223604(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216223638(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_2161936EC(i - 24, *(void **)(i - 16));
  }
}

char *sub_216223680(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    uint64_t v8 = result;
    uint64_t result = sub_21610FD04(result, a6);
    uint64_t v9 = (_WORD *)*((void *)v8 + 1);
    while (a3 != a5)
    {
      __int16 v10 = *(_WORD *)(a3 - 2);
      a3 -= 2;
      *v9++ = v10;
    }
    *((void *)v8 + 1) = v9;
  }
  return result;
}

void sub_2162236D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162236F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 8);
    uint64_t v3 = **(void **)(a1 + 16);
    if (v3 != v2)
    {
      uint64_t v4 = v3 - 32;
      do
      {
        sub_2161936EC(v4, *(void **)(v4 + 8));
        BOOL v5 = v4 == v2;
        v4 -= 32;
      }
      while (!v5);
    }
  }
  return a1;
}

void sub_21622375C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v10) >> 3);
          if (!(!v5 & v4))
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 48))
                {
                  sub_216193444((uint64_t *)a1, a2 - 56);
                  uint64_t v120 = *(void *)(a1 + 40);
                  uint64_t v56 = v120;
                  long long v119 = *(_OWORD *)(a1 + 24);
                  long long v57 = v119;
                  uint64_t v58 = *(void *)(a2 - 16);
                  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 32);
                  *(void *)(a1 + 4sub_2161868BC(&a9, 0) = v58;
                  *(void *)(a2 - 16) = v56;
                  *(_OWORD *)(a2 - 32) = v57;
                  LODWORD(v56) = *(_DWORD *)(a1 + 48);
                  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(a2 - 8) = v56;
                }
                break;
              case 3:
                sub_216224430((uint64_t *)a1, a1 + 56, a2 - 56);
                break;
              case 4:
                sub_21622485C(a1, a1 + 56, a1 + 112, a2 - 56);
                break;
              case 5:
                sub_2162242A8(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1343)
          {
            if (a4)
            {
              if (a1 != a2)
              {
                int v59 = (void *)(a1 + 56);
                if (a1 + 56 != a2)
                {
                  uint64_t v60 = 0;
                  int v61 = (void *)a1;
                  do
                  {
                    unint64_t v62 = v59;
                    int v63 = *((_DWORD *)v61 + 26);
                    if (v63 > *((_DWORD *)v61 + 12))
                    {
                      unsigned int v64 = v61 + 8;
                      uint64_t v65 = v61[8];
                      *(void *)&long long v119 = *v62;
                      *((void *)&v119 + 1) = v65;
                      uint64_t v120 = v61[9];
                      if (v120)
                      {
                        *(void *)(v65 + 16) = (char *)&v119 + 8;
                        *unint64_t v62 = v64;
                        *unsigned int v64 = 0;
                        v61[9] = 0;
                      }
                      else
                      {
                        *(void *)&long long v119 = (char *)&v119 + 8;
                      }
                      long long __p = *((_OWORD *)v61 + 5);
                      uint64_t v122 = v61[12];
                      v61[11] = 0;
                      v61[12] = 0;
                      v61[10] = 0;
                      int v123 = v63;
                      uint64_t v66 = v60;
                      while (1)
                      {
                        sub_216224988(a1 + v66 + 56, a1 + v66);
                        if (!v66) {
                          break;
                        }
                        int v67 = *(_DWORD *)(a1 + v66 - 8);
                        v66 -= 56;
                        if (v123 <= v67)
                        {
                          uint64_t v68 = a1 + v66 + 56;
                          goto LABEL_84;
                        }
                      }
                      uint64_t v68 = a1;
LABEL_84:
                      sub_216224988(v68, (uint64_t)&v119);
                      if (SHIBYTE(v122) < 0) {
                        operator delete((void *)__p);
                      }
                      sub_2161936EC((uint64_t)&v119, *((void **)&v119 + 1));
                    }
                    int v59 = v62 + 7;
                    v60 += 56;
                    int v61 = v62;
                  }
                  while (v62 + 7 != (void *)a2);
                }
              }
            }
            else if (a1 != a2)
            {
              uint64_t v106 = (void *)(a1 + 56);
              if (a1 + 56 != a2)
              {
                do
                {
                  int v107 = v106;
                  int v108 = *(_DWORD *)(a1 + 104);
                  if (v108 > *(_DWORD *)(a1 + 48))
                  {
                    int v109 = (void *)(a1 + 64);
                    uint64_t v110 = *(void *)(a1 + 64);
                    *(void *)&long long v119 = *v107;
                    *((void *)&v119 + 1) = v110;
                    uint64_t v120 = *(void *)(a1 + 72);
                    if (v120)
                    {
                      *(void *)(v110 + 16) = (char *)&v119 + 8;
                      void *v107 = v109;
                      *int v109 = 0;
                      *(void *)(a1 + 72) = 0;
                    }
                    else
                    {
                      *(void *)&long long v119 = (char *)&v119 + 8;
                    }
                    long long __p = *(_OWORD *)(a1 + 80);
                    uint64_t v122 = *(void *)(a1 + 96);
                    *(void *)(a1 + 88) = 0;
                    *(void *)(a1 + 96) = 0;
                    *(void *)(a1 + 8sub_2161868BC(&a9, 0) = 0;
                    int v123 = v108;
                    do
                    {
                      sub_216224988(a1 + 56, a1);
                      uint64_t v111 = a1 - 56;
                      int v112 = *(_DWORD *)(a1 - 8);
                      a1 -= 56;
                    }
                    while (v123 > v112);
                    sub_216224988(v111 + 56, (uint64_t)&v119);
                    if (SHIBYTE(v122) < 0) {
                      operator delete((void *)__p);
                    }
                    sub_2161936EC((uint64_t)&v119, *((void **)&v119 + 1));
                  }
                  uint64_t v106 = v107 + 7;
                  a1 = (uint64_t)v107;
                }
                while (v107 + 7 != (void *)a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v69 = (unint64_t)(v12 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  uint64_t v73 = a1 + 56 * v72;
                  if (2 * v71 + 2 < v12)
                  {
                    int v74 = *(_DWORD *)(v73 + 48);
                    int v75 = *(_DWORD *)(v73 + 104);
                    v73 += 56 * (v74 > v75);
                    if (v74 > v75) {
                      uint64_t v72 = 2 * v71 + 2;
                    }
                  }
                  uint64_t v76 = a1 + 56 * v71;
                  int v77 = *(_DWORD *)(v76 + 48);
                  if (*(_DWORD *)(v73 + 48) <= v77)
                  {
                    *(void *)&long long v119 = *(void *)v76;
                    unint64_t v78 = (void *)(v76 + 8);
                    uint64_t v79 = *(void *)(v76 + 8);
                    *((void *)&v119 + 1) = v79;
                    uint64_t v120 = *(void *)(v76 + 16);
                    if (v120)
                    {
                      *(void *)(v79 + 16) = (char *)&v119 + 8;
                      *(void *)uint64_t v76 = v78;
                      void *v78 = 0;
                      *(void *)(v76 + 16) = 0;
                    }
                    else
                    {
                      *(void *)&long long v119 = (char *)&v119 + 8;
                    }
                    long long v80 = *(_OWORD *)(v76 + 24);
                    uint64_t v122 = *(void *)(v76 + 40);
                    long long __p = v80;
                    *(void *)(v76 + 32) = 0;
                    *(void *)(v76 + 4sub_2161868BC(&a9, 0) = 0;
                    *(void *)(v76 + 24) = 0;
                    int v123 = v77;
                    do
                    {
                      uint64_t v81 = v73;
                      sub_216224988(v76, v73);
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v82 = (2 * v72) | 1;
                      uint64_t v73 = a1 + 56 * v82;
                      if (2 * v72 + 2 < v12)
                      {
                        int v83 = *(_DWORD *)(v73 + 48);
                        int v84 = *(_DWORD *)(v73 + 104);
                        v73 += 56 * (v83 > v84);
                        if (v83 > v84) {
                          uint64_t v82 = 2 * v72 + 2;
                        }
                      }
                      uint64_t v76 = v81;
                      uint64_t v72 = v82;
                    }
                    while (*(_DWORD *)(v73 + 48) <= v123);
                    sub_216224988(v81, (uint64_t)&v119);
                    if (SHIBYTE(v122) < 0) {
                      operator delete((void *)__p);
                    }
                    sub_2161936EC((uint64_t)&v119, *((void **)&v119 + 1));
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              int64_t v85 = v11 / 0x38uLL;
              uint64_t v86 = (void *)(a1 + 8);
              int v87 = (long long *)(a1 + 24);
              do
              {
                uint64_t v88 = *(void **)(a1 + 8);
                int v113 = *(void ***)a1;
                unint64_t v114 = v88;
                if (*(void *)(a1 + 16))
                {
                  v88[2] = &v114;
                  *(void *)a1 = v86;
                  void *v86 = 0;
                  *(void *)(a1 + 16) = 0;
                }
                else
                {
                  int v113 = &v114;
                }
                uint64_t v89 = 0;
                long long v90 = *v87;
                uint64_t v117 = *(void *)(a1 + 40);
                long long v116 = v90;
                *(void *)(a1 + 32) = 0;
                *(void *)(a1 + 4sub_2161868BC(&a9, 0) = 0;
                *(void *)int v87 = 0;
                int v118 = *(_DWORD *)(a1 + 48);
                uint64_t v91 = a1;
                do
                {
                  uint64_t v92 = v91 + 56 * v89 + 56;
                  uint64_t v93 = (2 * v89) | 1;
                  uint64_t v94 = 2 * v89 + 2;
                  if (v94 < v85)
                  {
                    int v95 = *(_DWORD *)(v92 + 48);
                    int v96 = *(_DWORD *)(v92 + 104);
                    v92 += 56 * (v95 > v96);
                    if (v95 > v96) {
                      uint64_t v93 = v94;
                    }
                  }
                  sub_216224988(v91, v92);
                  uint64_t v91 = v92;
                  uint64_t v89 = v93;
                }
                while (v93 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                a2 -= 56;
                if (v92 == a2)
                {
                  sub_216224988(v92, (uint64_t)&v113);
                }
                else
                {
                  sub_216224988(v92, a2);
                  sub_216224988(a2, (uint64_t)&v113);
                  uint64_t v97 = v92 - a1 + 56;
                  if (v97 >= 57)
                  {
                    unint64_t v98 = (v97 / 0x38uLL - 2) >> 1;
                    uint64_t v99 = a1 + 56 * v98;
                    int v100 = *(_DWORD *)(v92 + 48);
                    if (*(_DWORD *)(v99 + 48) > v100)
                    {
                      *(void *)&long long v119 = *(void *)v92;
                      int v101 = (void *)(v92 + 8);
                      uint64_t v102 = *(void *)(v92 + 8);
                      *((void *)&v119 + 1) = v102;
                      uint64_t v120 = *(void *)(v92 + 16);
                      if (v120)
                      {
                        *(void *)(v102 + 16) = (char *)&v119 + 8;
                        *(void *)uint64_t v92 = v101;
                        *int v101 = 0;
                        *(void *)(v92 + 16) = 0;
                      }
                      else
                      {
                        *(void *)&long long v119 = (char *)&v119 + 8;
                      }
                      long long v103 = *(_OWORD *)(v92 + 24);
                      uint64_t v122 = *(void *)(v92 + 40);
                      long long __p = v103;
                      *(void *)(v92 + 32) = 0;
                      *(void *)(v92 + 4sub_2161868BC(&a9, 0) = 0;
                      *(void *)(v92 + 24) = 0;
                      int v123 = v100;
                      do
                      {
                        uint64_t v104 = v99;
                        sub_216224988(v92, v99);
                        if (!v98) {
                          break;
                        }
                        unint64_t v98 = (v98 - 1) >> 1;
                        uint64_t v99 = a1 + 56 * v98;
                        uint64_t v92 = v104;
                      }
                      while (*(_DWORD *)(v99 + 48) > v123);
                      sub_216224988(v104, (uint64_t)&v119);
                      if (SHIBYTE(v122) < 0) {
                        operator delete((void *)__p);
                      }
                      sub_2161936EC((uint64_t)&v119, *((void **)&v119 + 1));
                    }
                  }
                }
                if (SHIBYTE(v117) < 0) {
                  operator delete((void *)v116);
                }
                sub_2161936EC((uint64_t)&v113, v114);
              }
              while (v85-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = a1 + 56 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 < 0x1C01)
          {
            sub_216224430((uint64_t *)v14, a1, a2 - 56);
          }
          else
          {
            sub_216224430((uint64_t *)a1, v14, a2 - 56);
            uint64_t v15 = 56 * v13;
            sub_216224430((uint64_t *)(a1 + 56), v15 + a1 - 56, a2 - 112);
            sub_216224430((uint64_t *)(a1 + 112), a1 + 56 + v15, a2 - 168);
            sub_216224430((uint64_t *)(v15 + a1 - 56), v14, a1 + 56 + v15);
            sub_216193444((uint64_t *)a1, v14);
            uint64_t v120 = *(void *)(a1 + 40);
            uint64_t v16 = v120;
            long long v119 = *(_OWORD *)(a1 + 24);
            long long v17 = v119;
            long long v18 = *(_OWORD *)(v14 + 24);
            *(void *)(a1 + 4sub_2161868BC(&a9, 0) = *(void *)(v14 + 40);
            *(_OWORD *)(a1 + 24) = v18;
            *(void *)(v14 + 4sub_2161868BC(&a9, 0) = v16;
            *(_OWORD *)(v14 + 24) = v17;
            LODWORD(v16) = *(_DWORD *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(v14 + 48);
            *(_DWORD *)(v14 + 48) = v16;
          }
          --a3;
          if (a4) {
            break;
          }
          int v19 = *(_DWORD *)(a1 + 48);
          if (*(_DWORD *)(a1 - 8) > v19) {
            break;
          }
          int v41 = (void *)(a1 + 8);
          uint64_t v42 = *(void *)(a1 + 8);
          *(void *)&long long v119 = *(void *)a1;
          *((void *)&v119 + 1) = v42;
          uint64_t v120 = *(void *)(a1 + 16);
          if (v120)
          {
            *(void *)(v42 + 16) = (char *)&v119 + 8;
            *(void *)a1 = v41;
            void *v41 = 0;
            *(void *)(a1 + 16) = 0;
          }
          else
          {
            *(void *)&long long v119 = (char *)&v119 + 8;
          }
          long long v43 = *(_OWORD *)(a1 + 24);
          uint64_t v122 = *(void *)(a1 + 40);
          long long __p = v43;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 4sub_2161868BC(&a9, 0) = 0;
          *(void *)(a1 + 24) = 0;
          int v123 = v19;
          if (v19 <= *(_DWORD *)(a2 - 8))
          {
            unint64_t v46 = a1 + 56;
            do
            {
              unint64_t v10 = v46;
              if (v46 >= a2) {
                break;
              }
              int v47 = *(_DWORD *)(v46 + 48);
              v46 += 56;
            }
            while (v19 <= v47);
          }
          else
          {
            uint64_t v44 = a1;
            do
            {
              unint64_t v10 = v44 + 56;
              int v45 = *(_DWORD *)(v44 + 104);
              v44 += 56;
            }
            while (v19 <= v45);
          }
          unint64_t v48 = a2;
          if (v10 < a2)
          {
            unint64_t v49 = a2;
            do
            {
              unint64_t v48 = v49 - 56;
              int v50 = *(_DWORD *)(v49 - 8);
              v49 -= 56;
            }
            while (v19 > v50);
          }
          while (v10 < v48)
          {
            sub_216193444((uint64_t *)v10, v48);
            uint64_t v51 = *(void *)(v10 + 40);
            long long v52 = *(_OWORD *)(v10 + 24);
            uint64_t v53 = *(void *)(v48 + 40);
            *(_OWORD *)(v10 + 24) = *(_OWORD *)(v48 + 24);
            *(void *)(v10 + 4sub_2161868BC(&a9, 0) = v53;
            *(_OWORD *)(v48 + 24) = v52;
            *(void *)(v48 + 4sub_2161868BC(&a9, 0) = v51;
            LODWORD(v51) = *(_DWORD *)(v10 + 48);
            *(_DWORD *)(v10 + 48) = *(_DWORD *)(v48 + 48);
            *(_DWORD *)(v48 + 48) = v51;
            do
            {
              int v54 = *(_DWORD *)(v10 + 104);
              v10 += 56;
            }
            while (v123 <= v54);
            do
            {
              int v55 = *(_DWORD *)(v48 - 8);
              v48 -= 56;
            }
            while (v123 > v55);
          }
          if (v10 - 56 != a1) {
            sub_216224988(a1, v10 - 56);
          }
          sub_216224988(v10 - 56, (uint64_t)&v119);
          if (SHIBYTE(v122) < 0) {
            operator delete((void *)__p);
          }
          sub_2161936EC((uint64_t)&v119, *((void **)&v119 + 1));
          a4 = 0;
        }
        uint64_t v20 = (void *)(a1 + 8);
        uint64_t v21 = *(void *)(a1 + 8);
        *(void *)&long long v119 = *(void *)a1;
        *((void *)&v119 + 1) = v21;
        uint64_t v120 = *(void *)(a1 + 16);
        if (v120)
        {
          *(void *)(v21 + 16) = (char *)&v119 + 8;
          *(void *)a1 = v20;
          *uint64_t v20 = 0;
          *(void *)(a1 + 16) = 0;
        }
        else
        {
          *(void *)&long long v119 = (char *)&v119 + 8;
        }
        uint64_t v22 = 0;
        long long v23 = *(_OWORD *)(a1 + 24);
        uint64_t v122 = *(void *)(a1 + 40);
        long long __p = v23;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 4sub_2161868BC(&a9, 0) = 0;
        *(void *)(a1 + 24) = 0;
        int v24 = *(_DWORD *)(a1 + 48);
        int v123 = v24;
        do
        {
          int v25 = *(_DWORD *)(a1 + v22 + 104);
          v22 += 56;
        }
        while (v25 > v24);
        unint64_t v26 = a1 + v22;
        unint64_t v27 = a2;
        if (v22 == 56)
        {
          unint64_t v30 = a2;
          while (v26 < v30)
          {
            unint64_t v28 = v30 - 56;
            int v31 = *(_DWORD *)(v30 - 8);
            v30 -= 56;
            if (v31 > v24) {
              goto LABEL_24;
            }
          }
          unint64_t v28 = v30;
        }
        else
        {
          do
          {
            unint64_t v28 = v27 - 56;
            int v29 = *(_DWORD *)(v27 - 8);
            v27 -= 56;
          }
          while (v29 <= v24);
        }
LABEL_24:
        if (v26 >= v28)
        {
          uint64_t v39 = v26 - 56;
        }
        else
        {
          unint64_t v32 = v26;
          unint64_t v33 = v28;
          do
          {
            sub_216193444((uint64_t *)v32, v33);
            uint64_t v34 = *(void *)(v32 + 40);
            long long v35 = *(_OWORD *)(v32 + 24);
            uint64_t v36 = *(void *)(v33 + 40);
            *(_OWORD *)(v32 + 24) = *(_OWORD *)(v33 + 24);
            *(void *)(v32 + 4sub_2161868BC(&a9, 0) = v36;
            *(_OWORD *)(v33 + 24) = v35;
            *(void *)(v33 + 4sub_2161868BC(&a9, 0) = v34;
            LODWORD(v34) = *(_DWORD *)(v32 + 48);
            *(_DWORD *)(v32 + 48) = *(_DWORD *)(v33 + 48);
            *(_DWORD *)(v33 + 48) = v34;
            do
            {
              int v37 = *(_DWORD *)(v32 + 104);
              v32 += 56;
            }
            while (v37 > v123);
            do
            {
              int v38 = *(_DWORD *)(v33 - 8);
              v33 -= 56;
            }
            while (v38 <= v123);
          }
          while (v32 < v33);
          uint64_t v39 = v32 - 56;
        }
        if (v39 != a1) {
          sub_216224988(a1, v39);
        }
        sub_216224988(v39, (uint64_t)&v119);
        if (SHIBYTE(v122) < 0) {
          operator delete((void *)__p);
        }
        sub_2161936EC((uint64_t)&v119, *((void **)&v119 + 1));
        if (v26 >= v28) {
          break;
        }
LABEL_39:
        sub_21622375C(a1, v39, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = v39 + 56;
      }
      BOOL v40 = sub_2162245EC(a1, v39);
      unint64_t v10 = v39 + 56;
      if (sub_2162245EC(v39 + 56, a2)) {
        break;
      }
      if (!v40) {
        goto LABEL_39;
      }
    }
    a2 = v39;
    if (!v40) {
      continue;
    }
    break;
  }
}

__n128 sub_2162242A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_21622485C(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)(a5 + 48) > *(_DWORD *)(a4 + 48))
  {
    sub_216193444((uint64_t *)a4, a5);
    uint64_t v11 = *(void *)(a4 + 40);
    __n128 result = *(__n128 *)(a4 + 24);
    uint64_t v12 = *(void *)(a5 + 40);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(void *)(a4 + 4sub_2161868BC(&a9, 0) = v12;
    *(__n128 *)(a5 + 24) = result;
    *(void *)(a5 + 4sub_2161868BC(&a9, 0) = v11;
    LODWORD(v11) = *(_DWORD *)(a4 + 48);
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(a5 + 48);
    *(_DWORD *)(a5 + 48) = v11;
    if (*(_DWORD *)(a4 + 48) > *(_DWORD *)(a3 + 48))
    {
      sub_216193444((uint64_t *)a3, a4);
      uint64_t v13 = *(void *)(a3 + 40);
      __n128 result = *(__n128 *)(a3 + 24);
      uint64_t v14 = *(void *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(void *)(a3 + 4sub_2161868BC(&a9, 0) = v14;
      *(__n128 *)(a4 + 24) = result;
      *(void *)(a4 + 4sub_2161868BC(&a9, 0) = v13;
      LODWORD(v13) = *(_DWORD *)(a3 + 48);
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
      *(_DWORD *)(a4 + 48) = v13;
      if (*(_DWORD *)(a3 + 48) > *(_DWORD *)(a2 + 48))
      {
        sub_216193444((uint64_t *)a2, a3);
        uint64_t v15 = *(void *)(a2 + 40);
        __n128 result = *(__n128 *)(a2 + 24);
        uint64_t v16 = *(void *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(void *)(a2 + 4sub_2161868BC(&a9, 0) = v16;
        *(__n128 *)(a3 + 24) = result;
        *(void *)(a3 + 4sub_2161868BC(&a9, 0) = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 48);
        *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
        *(_DWORD *)(a3 + 48) = v15;
        if (*(_DWORD *)(a2 + 48) > *(_DWORD *)(a1 + 48))
        {
          sub_216193444((uint64_t *)a1, a2);
          uint64_t v17 = *(void *)(a1 + 40);
          __n128 result = *(__n128 *)(a1 + 24);
          uint64_t v18 = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 4sub_2161868BC(&a9, 0) = v18;
          *(__n128 *)(a2 + 24) = result;
          *(void *)(a2 + 4sub_2161868BC(&a9, 0) = v17;
          LODWORD(v17) = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
          *(_DWORD *)(a2 + 48) = v17;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_216224430(uint64_t *result, uint64_t a2, uint64_t a3)
{
  char v5 = result;
  uint64_t v7 = (int *)(a2 + 48);
  int v6 = *(_DWORD *)(a2 + 48);
  uint64_t v8 = (int *)(result + 6);
  unint64_t v10 = (int *)(a3 + 48);
  int v9 = *(_DWORD *)(a3 + 48);
  if (v6 > *((_DWORD *)result + 12))
  {
    uint64_t v11 = (long long *)(result + 3);
    if (v9 <= v6)
    {
      __n128 result = sub_216193444(result, a2);
      uint64_t v21 = v5[5];
      long long v22 = *v11;
      uint64_t v23 = *(void *)(a2 + 40);
      *uint64_t v11 = *(_OWORD *)(a2 + 24);
      v5[5] = v23;
      *(_OWORD *)(a2 + 24) = v22;
      *(void *)(a2 + 4sub_2161868BC(&a9, 0) = v21;
      LODWORD(v21) = *((_DWORD *)v5 + 12);
      *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a2 + 48) = v21;
      if (*v10 <= (int)v21) {
        return result;
      }
      __n128 result = sub_216193444((uint64_t *)a2, a3);
      uint64_t v24 = *(void *)(a2 + 40);
      long long v25 = *(_OWORD *)(a2 + 24);
      uint64_t v26 = *(void *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a2 + 4sub_2161868BC(&a9, 0) = v26;
      *(_OWORD *)(a3 + 24) = v25;
      *(void *)(a3 + 4sub_2161868BC(&a9, 0) = v24;
      uint64_t v8 = v7;
    }
    else
    {
      __n128 result = sub_216193444(result, a3);
      uint64_t v12 = v5[5];
      long long v13 = *v11;
      uint64_t v14 = *(void *)(a3 + 40);
      *uint64_t v11 = *(_OWORD *)(a3 + 24);
      v5[5] = v14;
      *(_OWORD *)(a3 + 24) = v13;
      *(void *)(a3 + 4sub_2161868BC(&a9, 0) = v12;
    }
    uint64_t v7 = v10;
    goto LABEL_10;
  }
  if (v9 > v6)
  {
    __n128 result = sub_216193444((uint64_t *)a2, a3);
    uint64_t v15 = *(void *)(a2 + 40);
    long long v16 = *(_OWORD *)(a2 + 24);
    uint64_t v17 = *(void *)(a3 + 40);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(void *)(a2 + 4sub_2161868BC(&a9, 0) = v17;
    *(_OWORD *)(a3 + 24) = v16;
    *(void *)(a3 + 4sub_2161868BC(&a9, 0) = v15;
    LODWORD(v15) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_DWORD *)(a3 + 48) = v15;
    if (*(_DWORD *)(a2 + 48) > *v8)
    {
      __n128 result = sub_216193444(v5, a2);
      uint64_t v18 = v5[5];
      long long v19 = *(_OWORD *)(v5 + 3);
      uint64_t v20 = *(void *)(a2 + 40);
      *(_OWORD *)(v5 + 3) = *(_OWORD *)(a2 + 24);
      v5[5] = v20;
      *(_OWORD *)(a2 + 24) = v19;
      *(void *)(a2 + 4sub_2161868BC(&a9, 0) = v18;
LABEL_10:
      int v27 = *v8;
      *uint64_t v8 = *v7;
      *uint64_t v7 = v27;
    }
  }
  return result;
}

BOOL sub_2162245EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 48))
      {
        sub_216193444((uint64_t *)a1, a2 - 56);
        uint64_t v6 = *(void *)(a1 + 40);
        long long v7 = *(_OWORD *)(a1 + 24);
        uint64_t v8 = *(void *)(a2 - 16);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 4sub_2161868BC(&a9, 0) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(void *)(a2 - 16) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
        return 1;
      }
      return result;
    case 3:
      sub_216224430((uint64_t *)a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      sub_21622485C(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      sub_2162242A8(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      uint64_t v9 = a1 + 112;
      sub_216224430((uint64_t *)a1, a1 + 56, a1 + 112);
      uint64_t v10 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)(v10 + 48);
    if (v13 > *(_DWORD *)(v9 + 48))
    {
      uint64_t v14 = (void *)(v10 + 8);
      uint64_t v15 = *(void **)(v10 + 8);
      long long v19 = *(void ***)v10;
      uint64_t v20 = v15;
      if (*(void *)(v10 + 16))
      {
        void v15[2] = &v20;
        *(void *)uint64_t v10 = v14;
        *uint64_t v14 = 0;
        *(void *)(v10 + 16) = 0;
      }
      else
      {
        long long v19 = &v20;
      }
      long long __p = *(_OWORD *)(v10 + 24);
      uint64_t v23 = *(void *)(v10 + 40);
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 4sub_2161868BC(&a9, 0) = 0;
      *(void *)(v10 + 24) = 0;
      int v24 = v13;
      uint64_t v16 = v11;
      while (1)
      {
        sub_216224988(a1 + v16 + 168, a1 + v16 + 112);
        if (v16 == -112) {
          break;
        }
        int v17 = *(_DWORD *)(a1 + v16 + 104);
        v16 -= 56;
        if (v24 <= v17)
        {
          uint64_t v18 = a1 + v16 + 168;
          goto LABEL_15;
        }
      }
      uint64_t v18 = a1;
LABEL_15:
      sub_216224988(v18, (uint64_t)&v19);
      if (SHIBYTE(v23) < 0) {
        operator delete((void *)__p);
      }
      ++v12;
      sub_2161936EC((uint64_t)&v19, v20);
      if (v12 == 8) {
        return v10 + 56 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 56;
    v10 += 56;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 sub_21622485C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_216224430((uint64_t *)a1, a2, a3);
  if (*(_DWORD *)(a4 + 48) > *(_DWORD *)(a3 + 48))
  {
    sub_216193444((uint64_t *)a3, a4);
    uint64_t v9 = *(void *)(a3 + 40);
    __n128 result = *(__n128 *)(a3 + 24);
    uint64_t v10 = *(void *)(a4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(void *)(a3 + 4sub_2161868BC(&a9, 0) = v10;
    *(__n128 *)(a4 + 24) = result;
    *(void *)(a4 + 4sub_2161868BC(&a9, 0) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 48);
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
    *(_DWORD *)(a4 + 48) = v9;
    if (*(_DWORD *)(a3 + 48) > *(_DWORD *)(a2 + 48))
    {
      sub_216193444((uint64_t *)a2, a3);
      uint64_t v11 = *(void *)(a2 + 40);
      __n128 result = *(__n128 *)(a2 + 24);
      uint64_t v12 = *(void *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a2 + 4sub_2161868BC(&a9, 0) = v12;
      *(__n128 *)(a3 + 24) = result;
      *(void *)(a3 + 4sub_2161868BC(&a9, 0) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_DWORD *)(a3 + 48) = v11;
      if (*(_DWORD *)(a2 + 48) > *(_DWORD *)(a1 + 48))
      {
        sub_216193444((uint64_t *)a1, a2);
        uint64_t v13 = *(void *)(a1 + 40);
        __n128 result = *(__n128 *)(a1 + 24);
        uint64_t v14 = *(void *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(void *)(a1 + 4sub_2161868BC(&a9, 0) = v14;
        *(__n128 *)(a2 + 24) = result;
        *(void *)(a2 + 4sub_2161868BC(&a9, 0) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
        *(_DWORD *)(a2 + 48) = v13;
      }
    }
  }
  return result;
}

__n128 sub_216224988(uint64_t a1, uint64_t a2)
{
  sub_216193680(a1, (void *)a2);
  uint64_t v4 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v4);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(void *)(a1 + 4sub_2161868BC(&a9, 0) = *(void *)(a2 + 40);
  *(__n128 *)uint64_t v4 = result;
  *(unsigned char *)(a2 + 47) = 0;
  *(_WORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_2162249EC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_216224A70(v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216224A70(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(void **)(a1 + 8);

  sub_2161936EC(a1, v2);
}

void sub_216224AB8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_216224B20(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216224B5C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216224B94(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216224BC4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BBFE0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

_OWORD *sub_216224C08(uint64_t **a1, void **a2, uint64_t a3)
{
  char v5 = (void **)sub_21619458C((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x48uLL);
    v9[1] = a1 + 1;
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    char v10 = 1;
    sub_21612A650(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_216194688((uint64_t)v9, 0);
  }
  return v6;
}

void sub_216224CD0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_216224D38(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216224D74(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216224DAC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216224DDC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BBFF8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216224E24()
{
}

__n128 sub_216224E38(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6F5648;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_216224E8C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5648;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216224EC4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t **a7, uint64_t *a8)
{
  int v10 = *a4;
  sub_216336F9C(*(void *)(a1 + 16), **(void **)(a1 + 32), **(void **)(a1 + 24), *a7, *a8, (unint64_t)v45);
  if ((v46 & 0x80u) == 0) {
    uint64_t v11 = v45;
  }
  else {
    uint64_t v11 = (void **)v45[0];
  }
  if ((v46 & 0x80u) == 0) {
    unint64_t v12 = v46;
  }
  else {
    unint64_t v12 = (unint64_t)v45[1];
  }
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21617FB50();
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (v12 >= 0xB)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v12 | 3) != 0xB) {
      uint64_t v15 = v12 | 3;
    }
    uint64_t v14 = sub_21610FD44((uint64_t)__p, v15 + 1);
    __p[1] = (void *)v12;
    unint64_t v44 = v16 | 0x8000000000000000;
    __p[0] = v14;
  }
  else
  {
    HIBYTE(v44) = v12;
    uint64_t v14 = __p;
    if (!v12) {
      goto LABEL_16;
    }
  }
  uint64_t v17 = 2 * v12;
  do
  {
    __int16 v18 = *(_WORD *)v11;
    uint64_t v11 = (void **)((char *)v11 + 2);
    *v14++ = v18;
    v17 -= 2;
  }
  while (v17);
LABEL_16:
  *uint64_t v14 = 0;
  unint64_t v19 = *(void *)(v13 + 16);
  unint64_t v20 = *(void *)(v13 + 8);
  if (v20 >= v19)
  {
    uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - *(void *)v13) >> 3);
    if ((unint64_t)(v21 + 1) > 0x492492492492492) {
      sub_21610CB04();
    }
    unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v19 - *(void *)v13) >> 3);
    uint64_t v23 = 2 * v22;
    if (2 * v22 <= v21 + 1) {
      uint64_t v23 = v21 + 1;
    }
    if (v22 >= 0x249249249249249) {
      unint64_t v24 = 0x492492492492492;
    }
    else {
      unint64_t v24 = v23;
    }
    uint64_t v51 = v13 + 16;
    if (v24)
    {
      if (v24 > 0x492492492492492) {
        sub_2160FFA74();
      }
      long long v25 = (uint64_t *)operator new(56 * v24);
    }
    else
    {
      long long v25 = 0;
    }
    int v47 = v25;
    unint64_t v48 = &v25[7 * v21];
    unint64_t v49 = v48;
    int v50 = (char *)&v25[7 * v24];
    uint64_t v26 = sub_21619420C(v48, a3);
    void v26[5] = v44;
    *(_OWORD *)(v26 + 3) = *(_OWORD *)__p;
    __p[1] = 0;
    unint64_t v44 = 0;
    __p[0] = 0;
    *((_DWORD *)v26 + 12) = v10;
    int v27 = v48;
    unint64_t v28 = v49 + 7;
    v49 += 7;
    unint64_t v30 = *(uint64_t **)v13;
    int v29 = *(uint64_t **)(v13 + 8);
    if (v29 == *(uint64_t **)v13)
    {
      BOOL v40 = *(uint64_t **)(v13 + 8);
    }
    else
    {
      uint64_t v31 = 0;
      do
      {
        unint64_t v32 = &v27[v31];
        *(v32 - 7) = v29[v31 - 7];
        unint64_t v33 = &v29[v31 - 6];
        uint64_t v34 = *v33;
        v27[v31 - 6] = *v33;
        uint64_t v35 = (uint64_t)&v27[v31 - 6];
        uint64_t v36 = v29[v31 - 5];
        *(v32 - 5) = v36;
        if (v36)
        {
          *(void *)(v34 + 16) = v35;
          v29[v31 - 7] = (uint64_t)v33;
          uint64_t *v33 = 0;
          v29[v31 - 5] = 0;
        }
        else
        {
          *(v32 - 7) = v35;
        }
        int v37 = &v27[v31];
        int v38 = &v29[v31];
        long long v39 = *(_OWORD *)&v29[v31 - 4];
        *(v37 - 2) = v29[v31 - 2];
        *((_OWORD *)v37 - 2) = v39;
        *(v38 - 3) = 0;
        *(v38 - 2) = 0;
        *(v38 - 4) = 0;
        *((_DWORD *)v37 - 2) = v29[v31 - 1];
        v31 -= 7;
      }
      while (&v29[v31] != v30);
      BOOL v40 = *(uint64_t **)v13;
      int v29 = *(uint64_t **)(v13 + 8);
      int v27 = (uint64_t *)((char *)v27 + v31 * 8);
      unint64_t v28 = v49;
    }
    *(void *)uint64_t v13 = v27;
    int v47 = v40;
    unint64_t v48 = v40;
    *(void *)(v13 + 8) = v28;
    unint64_t v49 = v29;
    int v41 = *(char **)(v13 + 16);
    *(void *)(v13 + 16) = v50;
    int v50 = v41;
    sub_216225268((uint64_t)&v47);
    int v42 = SHIBYTE(v44);
    *(void *)(v13 + 8) = v28;
    if (v42 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    sub_21619420C(*(uint64_t **)(v13 + 8), a3);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)__p;
    *(void *)(v20 + 4sub_2161868BC(&a9, 0) = v44;
    *(_DWORD *)(v20 + 48) = v10;
    *(void *)(v13 + 8) = v20 + 56;
  }
  if ((char)v46 < 0) {
    operator delete(v45[0]);
  }
}

void sub_2162251CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21622521C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F56A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21622525C()
{
  return &unk_26C6F56A8;
}

uint64_t sub_216225268(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_216224A70(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_2162252B8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_21622533C(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    __assert_rtn("ReadingMappedString", "ReadingMappedString.cpp", 20, "unmappedString");
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  *(void *)a1 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  *(void *)(a1 + 8) = 0;
  if (a3 && a4)
  {
    v29[0] = 0;
    v29[1] = v29;
    _OWORD v29[2] = 0xE002000000;
    v29[3] = sub_21622564C;
    v29[4] = nullsub_241;
    CFIndex Length = CFStringGetLength(a2);
    v29[21] = a2;
    uint64_t v32 = 0;
    CFIndex v33 = Length;
    if (CFStringGetCharactersPtr(a2)) {
      CStringPtr = 0;
    }
    else {
      CStringPtr = CFStringGetCStringPtr(a2, 0x600u);
    }
    uint64_t v35 = 0;
    uint64_t v31 = CStringPtr;
    uint64_t v34 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = &v25;
    uint64_t v27 = 0x2000000000;
    char v28 = 1;
    v24[0] = 0;
    v24[1] = v24;
    void v24[2] = 0x2000000000;
    void v24[3] = 0;
    uint64_t v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x2000000000;
    uint64_t v23 = 0;
    v18[0] = 0;
    v18[1] = v18;
    _DWORD v18[2] = 0x2000000000;
    __int16 v19 = 0;
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x2000000000;
    __int16 v17 = 0;
    v15[0] = 0;
    v15[1] = v15;
    void v15[2] = 0x2000000000;
    v15[3] = 0;
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 0x40000000;
    v14[2] = sub_2162256B4;
    void v14[3] = &unk_264266DF8;
    v14[4] = v24;
    v14[5] = &v25;
    v14[6] = v18;
    v14[7] = v29;
    v14[8] = v16;
    v14[9] = &v20;
    v14[12] = a4;
    v14[13] = a2;
    v14[10] = v15;
    v14[11] = a3;
    sub_2161E25DC(a2, 0, (uint64_t)v14);
    uint64_t v11 = (const UniChar *)v21[3];
    if (v11)
    {
      if (*((unsigned char *)v26 + 24))
      {
        CFIndex v12 = CFStringGetLength(*(CFStringRef *)a1);
        *(void *)(a1 + 8) = CFStringCreateWithCharacters(v8, v11, v12);
        uint64_t v11 = (const UniChar *)v21[3];
        *(unsigned char *)(a1 + 16) = 0;
        if (!v11) {
          goto LABEL_15;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 16) = 0;
      }
      MEMORY[0x2166CA7C0](v11, 0x1000C80BDFB0063);
    }
    else
    {
      *(unsigned char *)(a1 + 16) = *((unsigned char *)v26 + 24);
    }
LABEL_15:
    _Block_object_dispose(v15, 8);
    _Block_object_dispose(v16, 8);
    _Block_object_dispose(v18, 8);
    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(v24, 8);
    _Block_object_dispose(&v25, 8);
    _Block_object_dispose(v29, 8);
    return a1;
  }
  *(unsigned char *)(a1 + 16) = 0;
  return a1;
}

void sub_2162255E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

__n128 sub_21622564C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 4sub_2161868BC(&a9, 0) = v2;
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  long long v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 12sub_2161868BC(&a9, 0) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  __n128 result = *(__n128 *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 184);
  long long v10 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a1 + 20sub_2161868BC(&a9, 0) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(__n128 *)(a1 + 168) = result;
  return result;
}

void sub_2162256B4(uint64_t a1, int64_t a2, uint64_t a3, unsigned char *a4)
{
  CFIndex v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v8 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 88)))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
    return;
  }
  if (a3 != 1)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
    {
      for (*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
            ;
            ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
      {
        uint64_t v13 = *(void *)(a1 + 80);
        uint64_t v14 = *(void *)(*(void *)(v13 + 8) + 24);
        if (v14 >= a3) {
          break;
        }
        int64_t v15 = v14 + a2;
        if (v14 + a2 < 0 || (uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8), v17 = *(void *)(v16 + 200), v17 <= v15))
        {
          __int16 v19 = 0;
        }
        else
        {
          uint64_t v18 = *(void *)(v16 + 176);
          if (v18)
          {
            __int16 v19 = *(_WORD *)(v18 + 2 * (*(void *)(v16 + 192) + v15));
          }
          else
          {
            uint64_t v20 = *(void *)(v16 + 184);
            if (v20)
            {
              __int16 v19 = *(char *)(v20 + *(void *)(v16 + 192) + v15);
            }
            else
            {
              if (*(void *)(v16 + 216) <= v15 || (int64_t v21 = *(void *)(v16 + 208), v21 > v15))
              {
                int64_t v22 = v15 - 4;
                if ((unint64_t)v15 < 4) {
                  int64_t v22 = 0;
                }
                if (v22 + 64 < v17) {
                  int64_t v17 = v22 + 64;
                }
                *(void *)(v16 + 208) = v22;
                *(void *)(v16 + 216) = v17;
                v35.location = *(void *)(v16 + 192) + v22;
                v35.length = v17 - v22;
                CFStringGetCharacters(*(CFStringRef *)(v16 + 168), v35, (UniChar *)(v16 + 40));
                int64_t v21 = *(void *)(v16 + 208);
                uint64_t v13 = *(void *)(a1 + 80);
              }
              __int16 v19 = *(_WORD *)(v16 + 40 + 2 * (v15 - v21));
            }
          }
        }
        *(_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)
                 + 2 * (*(void *)(*(void *)(v13 + 8) + 24) + a2)) = v19;
      }
    }
    goto LABEL_41;
  }
  if (a2 < 0 || (v9 = *(void *)(*(void *)(a1 + 56) + 8), int64_t v10 = *(void *)(v9 + 200), v10 <= a2))
  {
    __int16 v12 = 0;
  }
  else
  {
    uint64_t v11 = *(void *)(v9 + 176);
    if (v11)
    {
      __int16 v12 = *(_WORD *)(v11 + 2 * (*(void *)(v9 + 192) + a2));
    }
    else
    {
      uint64_t v32 = *(void *)(v9 + 184);
      if (v32)
      {
        __int16 v12 = *(char *)(v32 + *(void *)(v9 + 192) + a2);
      }
      else
      {
        if (*(void *)(v9 + 216) <= a2 || (int64_t v33 = *(void *)(v9 + 208), v33 > a2))
        {
          int64_t v34 = a2 - 4;
          if ((unint64_t)a2 < 4) {
            int64_t v34 = 0;
          }
          if (v34 + 64 < v10) {
            int64_t v10 = v34 + 64;
          }
          *(void *)(v9 + 208) = v34;
          *(void *)(v9 + 216) = v10;
          v36.location = *(void *)(v9 + 192) + v34;
          v36.length = v10 - v34;
          CFStringGetCharacters(*(CFStringRef *)(v9 + 168), v36, (UniChar *)(v9 + 40));
          int64_t v33 = *(void *)(v9 + 208);
        }
        __int16 v12 = *(_WORD *)(v9 + 40 + 2 * (a2 - v33));
      }
    }
  }
  *(_WORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v12;
  uint64_t v23 = *(void *)(a1 + 96);
  uint64_t v24 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v25 = *(void *)(v23 + 32);
  if (v25)
  {
    uint64_t v26 = v23 + 32;
    do
    {
      unsigned int v27 = *(unsigned __int16 *)(v25 + 32);
      BOOL v28 = v27 >= v24;
      if (v27 >= v24) {
        int v29 = (uint64_t *)v25;
      }
      else {
        int v29 = (uint64_t *)(v25 + 8);
      }
      if (v28) {
        uint64_t v26 = v25;
      }
      uint64_t v25 = *v29;
    }
    while (*v29);
    if (v26 != v23 + 32 && *(unsigned __int16 *)(v26 + 32) <= v24)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      *(_WORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = sub_216199E90(v23, v24, ValueAtIndex);
      if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)
        && *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) != *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
      {
        CFStringGetLength(*(CFStringRef *)(a1 + 104));
        operator new[]();
      }
      uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      if (!v30) {
        goto LABEL_41;
      }
      LOWORD(v24) = *(_WORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      goto LABEL_40;
    }
  }
  uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  if (v30) {
LABEL_40:
  }
    *(_WORD *)(v30 + 2 * a2) = v24;
LABEL_41:
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t sub_216225B1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  __int16 v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 1;
  uint64_t v7 = 0;
  CFIndex v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  if (a2)
  {
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 0x40000000;
    void v6[2] = sub_216225D74;
    v6[3] = &unk_26426BA90;
    v6[6] = v3;
    _OWORD v6[7] = a2;
    v6[4] = &v11;
    void v6[5] = &v7;
    v6[8] = v2;
    sub_2161E2500(v3, v2, (uint64_t)v6);
    BOOL v4 = *((unsigned char *)v12 + 24) == 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  if (!v4 && v2)
  {
    if (v8[3]) {
      operator new();
    }
    operator new();
  }
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  return 0;
}

void sub_216225D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x2166CA800](v11, 0x1060C40285832E9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 80), 8);
  _Unwind_Resume(a1);
}

void *sub_216225D74(void *result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  long long v5 = (unsigned __int16 *)(result[6] + 2 * a2);
  unsigned int v6 = *v5;
  if (((unsigned __int16)(v6 + 0x2000) >> 8) > 0x18u)
  {
    uint64_t v16 = result[5];
LABEL_18:
    uint64_t v17 = *(void *)(*(void *)(v16 + 8) + 24);
    if (v17) {
      *(_WORD *)(v17 + 2 * a2) = v6;
    }
    return result;
  }
  if (a3 == 1)
  {
    uint64_t v7 = result[7];
    uint64_t v10 = *(void *)(v7 + 8);
    uint64_t v8 = v7 + 8;
    uint64_t v9 = v10;
    if (!v10) {
      goto LABEL_15;
    }
    uint64_t v11 = v8;
    do
    {
      unsigned int v12 = *(unsigned __int16 *)(v9 + 26);
      BOOL v13 = v12 >= v6;
      if (v12 >= v6) {
        char v14 = (uint64_t *)v9;
      }
      else {
        char v14 = (uint64_t *)(v9 + 8);
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      uint64_t v9 = *v14;
    }
    while (*v14);
    if (v11 == v8 || *(unsigned __int16 *)(v11 + 26) > v6 || *(unsigned __int16 *)(v11 + 28) == v6)
    {
LABEL_15:
      *(unsigned char *)(*(void *)(result[4] + 8) + 24) = 0;
      *a4 = 1;
      int64_t v15 = result + 5;
    }
    else
    {
      int64_t v15 = result + 5;
      if (!*(void *)(*(void *)(result[5] + 8) + 24)) {
        operator new[]();
      }
      LOWORD(v6) = *(_WORD *)(v11 + 28);
    }
    uint64_t v16 = *v15;
    goto LABEL_18;
  }
  uint64_t v18 = *(void *)(*(void *)(result[5] + 8) + 24);
  if (v18)
  {
    size_t v19 = 2 * a3;
    return memcpy((void *)(v18 + 2 * a2), v5, v19);
  }
  return result;
}

uint64_t sub_216225EDC(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

uint64_t sub_216225F1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:a2];
  uint64_t v10 = v8;
  if (a2) {
    [v8 setObject:v9 forKeyedSubscript:(uint64_t)a2];
  }
  if (a3) {
    [v10 setObject:a3 forKeyedSubscript:@"inputMethodIdentifier"];
  }
  [v10 addEntriesFromDictionary:v9];
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void *))(*(void *)a1 + 16);

  return v11(a1, @"com.apple.languageIntelligenceCJK", v10);
}

uint64_t sub_216225FE8(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      __int16 v7 = *(_WORD *)(v6 + 16);
      if ((v7 & 2) != 0)
      {
        CFDictionaryAddValue(a2, @"userDictionaryConversionCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
        __int16 v7 = *(_WORD *)(v6 + 16);
        if ((v7 & 4) == 0)
        {
LABEL_6:
          if ((v7 & 8) == 0) {
            goto LABEL_7;
          }
          goto LABEL_26;
        }
      }
      else if ((v7 & 4) == 0)
      {
        goto LABEL_6;
      }
      CFDictionaryAddValue(a2, @"learningDictionaryConversionCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
      __int16 v7 = *(_WORD *)(v6 + 16);
      if ((v7 & 8) == 0)
      {
LABEL_7:
        if ((v7 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_27;
      }
LABEL_26:
      CFDictionaryAddValue(a2, @"addressBookConversionCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
      __int16 v7 = *(_WORD *)(v6 + 16);
      if ((v7 & 0x10) == 0)
      {
LABEL_8:
        if ((v7 & 0x20) == 0) {
          goto LABEL_9;
        }
        goto LABEL_28;
      }
LABEL_27:
      CFDictionaryAddValue(a2, @"autocorrectionCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
      __int16 v7 = *(_WORD *)(v6 + 16);
      if ((v7 & 0x20) == 0)
      {
LABEL_9:
        if ((v7 & 0x40) == 0) {
          goto LABEL_10;
        }
        goto LABEL_29;
      }
LABEL_28:
      CFDictionaryAddValue(a2, @"otaRegionalLexiconCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
      __int16 v7 = *(_WORD *)(v6 + 16);
      if ((v7 & 0x40) == 0)
      {
LABEL_10:
        if ((v7 & 0x100) == 0) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
LABEL_29:
      CFDictionaryAddValue(a2, @"otaNonRegionalLexiconCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
      if ((*(_WORD *)(v6 + 16) & 0x100) == 0)
      {
LABEL_12:
        uint64_t v8 = *(void *)(a1 + 32);
        if (!v8) {
          sub_21610B7AC();
        }
        unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
        uint64_t result = 1;
        BOOL v10 = v9 > 5;
        int v11 = (1 << v9) & 0x26;
        if (!v10 && v11 != 0)
        {
          __int16 v13 = *(_WORD *)(v6 + 16);
          if (v13)
          {
            CFDictionaryAddValue(a2, @"abbreviatedCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
            __int16 v13 = *(_WORD *)(v6 + 16);
            if ((v13 & 0x80) == 0)
            {
LABEL_19:
              if ((v13 & 0x200) == 0) {
                return 1;
              }
LABEL_20:
              CFDictionaryAddValue(a2, @"dialectPhraseCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
              return 1;
            }
          }
          else if ((v13 & 0x80) == 0)
          {
            goto LABEL_19;
          }
          CFDictionaryAddValue(a2, @"fuzzyPinyinCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
          if ((*(_WORD *)(v6 + 16) & 0x200) == 0) {
            return 1;
          }
          goto LABEL_20;
        }
        return result;
      }
LABEL_11:
      CFDictionaryAddValue(a2, @"englishLexiconCandidatePresented", (const void *)*MEMORY[0x263EFFB40]);
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_216226284(uint64_t a1)
{
  return a1;
}

void sub_2162262B0(uint64_t a1)
{
  sub_2162262FC((void *)(a1 + 8));

  JUMPOUT(0x2166CA800);
}

void *sub_2162262FC(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_216226380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_216226400(uint64_t a1, unint64_t a2)
{
  v13[3] = *MEMORY[0x263EF8340];
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  uint64_t v4 = (uint64_t **)(a1 + 24);
  *(void *)(a1 + 4sub_2161868BC(&a9, 0) = 0;
  long long v5 = (uint64_t *)sub_2162D8C20();
  uint64_t v6 = (char *)sub_2162D8CB8(v5, a2, off_26797C900[0], off_26797C888[0]);
  if (v6[23] < 0) {
    uint64_t v6 = *(char **)v6;
  }
  sub_216226684(v6, (uint64_t)"r", 1, v13);
  __int16 v7 = (std::__shared_weak_count *)v13[1];
  if (v13[0])
  {
    uint64_t v8 = *(unsigned int **)v13[0];
    if (*(_DWORD *)(*(void *)v13[0] + 4) == 1 && v8[2] == 293715527 && *v8)
    {
      unint64_t v9 = 0;
      uint64_t v10 = 5;
      do
      {
        LODWORD(v13[0]) = v8[v10];
        unsigned int v11 = v8[v10 + 1];
        if (v11) {
          sub_2162272DC((uint64_t **)a1, (unsigned int *)v13, v13);
        }
        if ((v11 & 2) != 0) {
          sub_2162272DC(v4, (unsigned int *)v13, v13);
        }
        ++v9;
        v10 += 2;
      }
      while (v9 < *v8);
    }
  }
  if (v7) {
    sub_2161121B0(v7);
  }
  return a1;
}

void sub_216226684(char *__s@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  sub_21610B834(__p, __s);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  v8[2] = sub_216226AA8;
  v8[3] = &unk_264266E18;
  v8[4] = __s;
  void v8[5] = a2;
  char v9 = a3;
  sub_216226758((unsigned __int8 *)__p, (uint64_t)v8, 0, a4);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21622673C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216226758(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797C598, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797C598))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797C5E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797C5E0))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797C5A0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797C5E0);
  }
  uint64_t v21 = 0;
  int64_t v22 = 0;
  std::mutex::lock(&stru_26797C5A0);
  uint64_t v8 = sub_21618241C((void *)qword_26797C590, a1);
  char v9 = v8;
  if (!v8
    || (uint64_t v10 = (std::__shared_weak_count *)*((void *)v8 + 6)) == 0
    || (v10->__shared_owners_ != -1 ? (BOOL v11 = a3 == 0) : (BOOL v11 = 0), !v11))
  {
    unsigned int v12 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, a1);
    char v14 = sub_2162D1CE4(0xDu);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int64_t v15 = v14;
      if (os_signpost_enabled(v14))
      {
        if ((a1[23] & 0x80u) == 0) {
          uint64_t v16 = a1;
        }
        else {
          uint64_t v16 = *(unsigned __int8 **)a1;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v16;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "SingletonResourceManagerLoad", "Load resource with key: [%s]", buf, 0xCu);
      }
    }
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    sub_216226B18((uint64_t)&v21, v17);
  }
  uint64_t v18 = std::__shared_weak_count::lock(v10);
  if (v18) {
    uint64_t v19 = *((void *)v9 + 5);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v21 = v19;
  int64_t v22 = v18;
  std::mutex::unlock(&stru_26797C5A0);
  uint64_t v20 = v22;
  *a4 = v21;
  a4[1] = v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v22) {
      sub_2161121B0(v22);
    }
  }
}

void sub_216226A48(_Unwind_Exception *a1)
{
}

void sub_216226AA8()
{
}

void sub_216226AF4(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1012C403EBA5055);
  _Unwind_Resume(a1);
}

void sub_216226B18(uint64_t a1, uint64_t a2)
{
  sub_216226B60(&v2, a2);
}

void sub_216226B60(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_216226BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216226D84((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_216226BF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216226C28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_216226CB4(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_216226C70(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC040)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216226CB4(uint64_t a1)
{
  long long v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*(unsigned char *)(a1 + 68))
    {
      munmap(*(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      if (*(_DWORD *)(a1 + 64) != 2) {
        goto LABEL_10;
      }
      uint64_t v3 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
      int v4 = open(v3, 2);
      int v5 = v4;
      long long v2 = *(void **)a1;
      if ((v4 & 0x80000000) == 0)
      {
        write(v4, *(const void **)a1, *(void *)(a1 + 8));
        close(v5);
        long long v2 = *(void **)a1;
      }
      if (v2) {
LABEL_10:
      }
        MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
    }
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_216226D84(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216226CB4(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_216226DD4(uint64_t a1, char *a2, char *a3, int a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  sub_21610B834((void *)(a1 + 16), a2);
  sub_21610B834((void *)(a1 + 40), a3);
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = a4;
  if (!strcmp(a3, "r"))
  {
    *(_DWORD *)(a1 + 64) = 0;
    int v8 = open(a2, 0);
  }
  else
  {
    if (strcmp(a3, "r+"))
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_2162270C8((uint64_t)exception, 1);
LABEL_16:
      __cxa_throw(exception, (struct type_info *)&unk_26C6B9108, (void (*)(void *))sub_216227068);
    }
    *(_DWORD *)(a1 + 64) = 514;
    int v8 = open(a2, 514, 384);
  }
  int v9 = v8;
  if (v8 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_2162270C8((uint64_t)exception, 2);
    goto LABEL_16;
  }
  if (fstat(v8, &v15) < 0)
  {
    close(v9);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_2162270C8((uint64_t)exception, 3);
    goto LABEL_16;
  }
  st_unint64_t size = v15.st_size;
  *(void *)(a1 + 8) = v15.st_size;
  if (!a4) {
    operator new[]();
  }
  if (st_size)
  {
    BOOL v11 = mmap(0, st_size, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v9, 0);
    if (v11 == (void *)-1)
    {
      close(v9);
      char v14 = __cxa_allocate_exception(0x20uLL);
      sub_2162270C8((uint64_t)v14, 4);
      __cxa_throw(v14, (struct type_info *)&unk_26C6B9108, (void (*)(void *))sub_216227068);
    }
    *(void *)a1 = v11;
  }
  close(v9);
  return a1;
}

void sub_216227010(_Unwind_Exception *a1)
{
  __cxa_free_exception(v4);
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_216227068(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C6BD010;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

uint64_t sub_2162270C8(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26C6BD010;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      std::operator+<char>();
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)v3);
      }
      *(_OWORD *)uint64_t v3 = v5;
      *(void *)(v3 + 16) = v6;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_2162271FC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

void sub_21622724C(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C6BD010;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162272C0(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t **sub_2162272DC(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_21612A650(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

BOOL sub_216227398(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v5 = a1[2];
    if (*(_WORD *)(v5 + 2 * v3 - 2) != 32)
    {
      uint64_t v6 = a1[6];
      uint64_t v7 = a1[7];
      if (v6 != v7)
      {
        int v10 = *(_DWORD *)(v7 - 4);
        uint64_t v9 = v7 - 4;
        uint64_t v11 = *(void *)(a2 + 8);
        if (*(_DWORD *)(v11 + 52) == v10)
        {
          a1[7] = v9;
          unsigned int v12 = v3 + 1;
          while (1)
          {
            unsigned int v13 = v12 - 2;
            if ((int)(v12 - 2) < 0) {
              break;
            }
            --v12;
            if (*(_WORD *)(v5 + 2 * v13) == 32)
            {
              a1[2] = v5 + 2 * v12;
              a1[3] = v3 - v12;
              return v6 != v9;
            }
          }
          return v6 != v9;
        }
        else
        {
          uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v11 + 8) + 512))(*(void *)(v11 + 8));
          unint64_t v16 = v15;
          if (sub_2161BC240(v14, v15)
            && (v16 >= v16 - 3 ? (unint64_t v17 = v16 - 3) : (unint64_t v17 = v16),
                (int v18 = (*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(*(void *)(a2 + 8)
                                                                                                  + 8)
                                                                                    + 504))(*(void *)(*(void *)(a2 + 8) + 8), v14, v17)) != 0))
          {
            *(_DWORD *)(a1[7] - 4) = v18;
            uint64_t v19 = a1[3];
            unsigned int v20 = v19 + 1;
            while (1)
            {
              unsigned int v21 = v20 - 2;
              if ((int)(v20 - 2) < 0) {
                break;
              }
              uint64_t v22 = a1[2];
              --v20;
              if (*(_WORD *)(v22 + 2 * v21) == 32)
              {
                a1[2] = v22 + 2 * v20;
                a1[3] = v19 - v20;
                return 1;
              }
            }
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return a3;
}

BOOL sub_216227508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = *(unsigned __int16 *)(a2 + 2 * a3 - 2) == 32;
  uint64_t v6 = a3 - v5;
  uint64_t v7 = *(void **)(a1 + 40);
  if (!v7 || (uint64_t v8 = 1, (sub_216305CF4(v7, a2, a3 - v5, 1) & 1) == 0))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = 0;
    if (v9)
    {
      LODWORD(v11) = 0;
      if (sub_216357BCC(v9, a2, v6, &v11) && (v11 & 6) != 0) {
        return 1;
      }
    }
  }
  return v8;
}

void sub_2162275AC(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4)
{
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (*(_DWORD *)a2 == 1)
  {
    sub_2161BF794(*(_WORD **)(a2 + 16), (_WORD *)(*(void *)(a2 + 16) + 2 * *(void *)(a2 + 24)), (uint64_t)&__p);
    uint64_t v7 = (v12 - (uint64_t)__p) >> 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_216185B34(&__p, v7 + a4);
  p_p = &__p;
  if (a4)
  {
    uint64_t v8 = 2 * a4;
    do
    {
      __int16 v14 = *a3;
      sub_216192280((uint64_t *)&p_p, &v14);
      ++a3;
      v8 -= 2;
    }
    while (v8);
  }
  if (*(_WORD *)(v12 - 2) == 32) {
    v12 -= 2;
  }
  uint64_t v9 = *(const __CFLocale ***)(a1 + 32);
  if (v9) {
    CFLocaleRef v10 = *v9;
  }
  else {
    CFLocaleRef v10 = 0;
  }
  sub_2161E2874(v10);
  operator new();
}

void sub_21622775C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162277D8(uint64_t a1, unsigned int a2)
{
  unsigned int v13 = a2;
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    BOOL v5 = (uint64_t *)(a1 + 8);
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v7 = a2;
      if (v4 <= a2) {
        unint64_t v7 = a2 % v4;
      }
    }
    else
    {
      unint64_t v7 = (v4 - 1) & a2;
    }
    uint64_t v8 = *(uint64_t ***)(*v5 + 8 * v7);
    if (v8)
    {
      for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v10 = i[1];
        if (v10 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            uint64_t v11 = sub_2162298B8(v5, a2, &v13);
            sub_2161FB75C(v11 + 3);
            break;
          }
        }
        else
        {
          if (v6.u32[0] > 1uLL)
          {
            if (v10 >= v4) {
              v10 %= v4;
            }
          }
          else
          {
            v10 &= v4 - 1;
          }
          if (v10 != v7) {
            break;
          }
        }
      }
    }
  }
  if (a2 == 3)
  {
    *(_WORD *)(a1 + 4) = 0;
    uint64_t v12 = (const void **)(a1 + 128);
    goto LABEL_21;
  }
  if (a2 == 2)
  {
    sub_216182BB8((const void **)(a1 + 96), 0);
    *(unsigned char *)(a1 + 4) = 0;
    *(_WORD *)(a1 + 6) = 0;
    sub_2161868BC((const void **)(a1 + 136), 0);
    sub_2161868BC((const void **)(a1 + 144), 0);
    uint64_t v12 = (const void **)(a1 + 152);
LABEL_21:
    sub_2161868BC(v12, 0);
  }
  *(void *)(a1 + 8sub_2161868BC(&a9, 0) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
}

uint64_t sub_216227930(uint64_t a1, int a2, CFArrayRef theArray)
{
  *(_WORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 106) = 0;
  if (a2 == 1)
  {
    uint64_t v8 = sub_21622853C(a1, theArray);
LABEL_11:
    uint64_t v5 = v8;
    goto LABEL_12;
  }
  if (a2 == 3)
  {
    uint64_t v8 = sub_2162288A8(a1, theArray);
    goto LABEL_11;
  }
  uint64_t v5 = 0;
  if (a2 == 2)
  {
    if (theArray
      && CFArrayGetCount(theArray)
      && (ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0), CFTypeID v7 = CFGetTypeID(ValueAtIndex), v7 == CFURLGetTypeID()))
    {
      uint64_t v8 = sub_2162279FC(a1, theArray);
    }
    else
    {
      uint64_t v8 = (uint64_t)sub_216227B2C(a1, theArray);
    }
    goto LABEL_11;
  }
LABEL_12:
  sub_216228B10((void *)a1);
  return v5;
}

uint64_t sub_2162279FC(uint64_t a1, const __CFArray *a2)
{
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  int v5 = 0;
  for (CFIndex i = 0; i < CFArrayGetCount(a2); ++i)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
    CFTypeID v8 = CFGetTypeID(ValueAtIndex);
    if (v8 == CFURLGetTypeID())
    {
      if (sub_2162D95E4((const __CFURL *)ValueAtIndex))
      {
        if (v5) {
          int v5 = 1;
        }
        else {
          int v5 = sub_21622930C(a1, (CFURLRef)ValueAtIndex);
        }
      }
      else
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  unsigned int v9 = sub_2162293D4(a1, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return (v5 | v9) & 1;
}

void sub_216227B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161BE0C8((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFArrayRef sub_216227B2C(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  if (!theArray
    || CFArrayGetCount(theArray) != 1
    || (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0)) == 0)
  {
    sub_2162277D8(a1, 2u);
    return 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, kMecabraAssetDataFilePathsKey);
  sub_2162277D8(a1, 2u);
  if (!Value) {
    return Value;
  }
  if (CFArrayGetCount(Value) > 50) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(Value);
  long long v70 = 0uLL;
  int64_t v71 = 0;
  long long v68 = 0uLL;
  int64_t v69 = 0;
  CFMutableStringRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x263EFFFA0]);
  if (Count >= 1)
  {
    CFIndex v8 = 0;
    os_log_t oslog = (os_log_t)(a1 + 120);
    unsigned int v9 = &v71;
    unint64_t v10 = &v69;
    do
    {
      uint64_t v11 = CFArrayGetValueAtIndex(Value, v8);
      uint64_t v12 = (uint64_t)v10;
      CFStringRef v13 = sub_216228CE4(v11);
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
      __int16 v14 = sub_2162D1CE4(9u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        _os_log_debug_impl(&dword_2160F5000, v14, OS_LOG_TYPE_DEBUG, "[Mecabra] Set Non-regional assets: %@", (uint8_t *)&buf, 0xCu);
      }
      unint64_t v10 = (void *)v12;
      if (v13)
      {
        if (!CFSetContainsValue(Mutable, v13))
        {
          CFSetAddValue(Mutable, v13);
          uint64_t v15 = (uint64_t)v9;
          switch(sub_216228D8C((uint64_t)v13))
          {
            case 1u:
              unint64_t v16 = (void *)*((void *)&v68 + 1);
              if (*((void *)&v68 + 1) >= (unint64_t)v69)
              {
                unsigned int v27 = (void *)v68;
                uint64_t v28 = (uint64_t)(*((void *)&v68 + 1) - v68) >> 3;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 61) {
LABEL_119:
                }
                  sub_21610CB04();
                uint64_t v30 = (uint64_t)&v69[-v68];
                if ((uint64_t)&v69[-v68] >> 2 > v29) {
                  unint64_t v29 = v30 >> 2;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                uint64_t v76 = v12;
                if (v31)
                {
                  uint64_t v32 = (char *)sub_2160FFAA8(v12, v31);
                  unint64_t v16 = (void *)*((void *)&v68 + 1);
                  unsigned int v27 = (void *)v68;
                }
                else
                {
                  uint64_t v32 = 0;
                }
                CFRange v36 = (CFStringRef *)&v32[8 * v28];
                int v37 = &v32[8 * v31];
                int v75 = v37;
                cf.__r_.__value_.__r.__words[0] = 0;
                *CFRange v36 = v13;
                buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v36 + 1);
                if (v16 == v27)
                {
                  unint64_t v17 = v36 + 1;
                  unsigned int v9 = (void *)v15;
                }
                else
                {
                  unsigned int v9 = (void *)v15;
                  do
                  {
                    CFStringRef v38 = (const __CFString *)*--v16;
                    *unint64_t v16 = 0;
                    *--CFRange v36 = v38;
                  }
                  while (v16 != v27);
                  unint64_t v17 = (void *)buf.__r_.__value_.__r.__words[2];
                  int v37 = v75;
                }
                long long v41 = v68;
                *(void *)&long long v68 = v36;
                *((void *)&v68 + 1) = v17;
                *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v41;
                int v42 = v69;
                int64_t v69 = v37;
                int v75 = v42;
                buf.__r_.__value_.__r.__words[0] = v41;
                sub_216195B08((uint64_t)&buf);
              }
              else
              {
                cf.__r_.__value_.__r.__words[0] = 0;
                **((void **)&v68 + 1) = v13;
                unint64_t v17 = v16 + 1;
              }
              *((void *)&v68 + 1) = v17;
              break;
            case 2u:
              uint64_t v19 = (void *)*((void *)&v70 + 1);
              if (*((void *)&v70 + 1) >= (unint64_t)v71)
              {
                unsigned int v21 = (void *)v70;
                uint64_t v22 = (uint64_t)(*((void *)&v70 + 1) - v70) >> 3;
                unint64_t v23 = v22 + 1;
                if ((unint64_t)(v22 + 1) >> 61) {
                  goto LABEL_119;
                }
                uint64_t v24 = (uint64_t)&v71[-v70];
                if ((uint64_t)&v71[-v70] >> 2 > v23) {
                  unint64_t v23 = v24 >> 2;
                }
                if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v25 = v23;
                }
                uint64_t v76 = v15;
                if (v25)
                {
                  uint64_t v26 = (char *)sub_2160FFAA8(v15, v25);
                  uint64_t v19 = (void *)*((void *)&v70 + 1);
                  unsigned int v21 = (void *)v70;
                }
                else
                {
                  uint64_t v26 = 0;
                }
                int64_t v33 = (CFStringRef *)&v26[8 * v22];
                int64_t v34 = &v26[8 * v25];
                int v75 = v34;
                cf.__r_.__value_.__r.__words[0] = 0;
                CFStringRef *v33 = v13;
                buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 1);
                if (v19 == v21)
                {
                  unsigned int v20 = v33 + 1;
                  unsigned int v9 = (void *)v15;
                }
                else
                {
                  unsigned int v9 = (void *)v15;
                  do
                  {
                    CFStringRef v35 = (const __CFString *)*--v19;
                    void *v19 = 0;
                    *--int64_t v33 = v35;
                  }
                  while (v19 != v21);
                  unsigned int v20 = (void *)buf.__r_.__value_.__r.__words[2];
                  int64_t v34 = v75;
                }
                long long v39 = v70;
                *(void *)&long long v70 = v33;
                *((void *)&v70 + 1) = v20;
                *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v39;
                BOOL v40 = v71;
                int64_t v71 = v34;
                int v75 = v40;
                buf.__r_.__value_.__r.__words[0] = v39;
                sub_216195B08((uint64_t)&buf);
              }
              else
              {
                cf.__r_.__value_.__r.__words[0] = 0;
                **((void **)&v70 + 1) = v13;
                unsigned int v20 = v19 + 1;
              }
              *((void *)&v70 + 1) = v20;
              break;
            case 3u:
              *(unsigned char *)(a1 + 4) = 1;
              *(unsigned char *)(a1 + 6) = 1;
              goto LABEL_12;
            case 4u:
              *(unsigned char *)(a1 + 7) = 1;
              int v18 = (const void **)(a1 + 136);
              goto LABEL_25;
            case 7u:
              if (!oslog->isa || CFStringCompare(v13, (CFStringRef)oslog->isa, 0))
              {
                sub_216195954((const void **)&oslog->isa, v13);
                *(unsigned char *)(a1 + 106) = 1;
              }
              goto LABEL_12;
            case 8u:
              int v18 = (const void **)(a1 + 144);
              goto LABEL_25;
            case 9u:
              int v18 = (const void **)(a1 + 152);
LABEL_25:
              sub_216195954(v18, v13);
              goto LABEL_12;
            default:
              goto LABEL_12;
          }
          unint64_t v10 = (void *)v12;
        }
LABEL_12:
        if (cf.__r_.__value_.__r.__words[0]) {
          CFRelease(cf.__r_.__value_.__l.__data_);
        }
      }
      ++v8;
    }
    while (v8 != Count);
  }
  sub_21610B834(&cf, "");
  int v45 = (const __CFString **)*((void *)&v70 + 1);
  unint64_t v44 = (const __CFString **)v70;
  if ((void)v70 != *((void *)&v70 + 1))
  {
    unsigned int v46 = 0;
    do
    {
      sub_2161E3AE8(*v44, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      sub_216226684((char *)p_buf, (uint64_t)"r", 1, v77);
      if (*(void *)v77)
      {
        unint64_t v48 = **(unsigned int ***)v77;
        if (*(_DWORD *)(**(void **)v77 + 8) == 1 && v48[3] == 293715535 && *v48 > v46)
        {
          std::string::operator=(&cf, &buf);
          unsigned int v46 = *v48;
        }
      }
      if (v78) {
        sub_2161121B0(v78);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      ++v44;
    }
    while (v44 != v45);
  }
  std::string::size_type size = HIBYTE(cf.__r_.__value_.__r.__words[2]);
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = cf.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_102;
  }
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string cf = &cf;
  }
  else {
    p_std::string cf = (std::string *)cf.__r_.__value_.__r.__words[0];
  }
  sub_216226684((char *)p_cf, (uint64_t)"r", 1, &buf);
  long long v51 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  if (buf.__r_.__value_.__r.__words[0])
  {
    uint64_t v52 = *(void *)buf.__r_.__value_.__l.__data_;
    CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v54 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (*(_DWORD *)(v52 + 4))
    {
      unint64_t v55 = 0;
      uint64_t v56 = (unsigned __int16 *)(*(void *)v51 + 24);
      do
      {
        unsigned int v58 = *v56;
        long long v57 = v56 + 1;
        CFStringRef v59 = CFStringCreateWithCharacters(v53, v57, v58);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
        uint64_t v60 = &v57[v58];
        int v61 = *(_DWORD *)v60;
        uint64_t v56 = (unsigned __int16 *)(v60 + 2);
        int valuePtr = v61;
        CFNumberRef v62 = CFNumberCreate(v53, kCFNumberSInt32Type, &valuePtr);
        *(void *)int v77 = v62;
        CFDictionaryAddValue(v54, v59, v62);
        if (v62) {
          CFRelease(v62);
        }
        if (v59) {
          CFRelease(v59);
        }
        ++v55;
      }
      while (v55 < *(unsigned int *)(v52 + 4));
    }
  }
  else
  {
    int v54 = 0;
  }
  if (*((void *)&v51 + 1)) {
    sub_2161121B0(*((std::__shared_weak_count **)&v51 + 1));
  }
  if (!v54) {
    goto LABEL_103;
  }
  if (*(__CFDictionary **)(a1 + 96) == v54)
  {
    CFRelease(v54);
LABEL_102:
    LODWORD(v54) = 0;
    goto LABEL_103;
  }
  sub_216182BB8((const void **)(a1 + 96), v54);
  LODWORD(v54) = 1;
LABEL_103:
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(cf.__r_.__value_.__l.__data_);
  }
  BOOL v63 = sub_216228E80(a1, 2u, (const __CFString **)v68, *((const __CFString ***)&v68 + 1));
  if (*(void *)(a1 + 144)) {
    BOOL v64 = 0;
  }
  else {
    BOOL v64 = (*(unsigned __int8 *)(a1 + 7) | *(unsigned __int8 *)(a1 + 4) | *(unsigned __int8 *)(a1 + 106)) == 0;
  }
  int v66 = !v64 || *(void *)(a1 + 152) != 0 || v63;
  CFArrayRef Value = (const __CFArray *)(v54 | v66);
  if (Value == 1) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  sub_2161FA8F4((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  sub_2161FA8F4((void ***)&buf);
  return Value;
}

void sub_216228344()
{
  if (v1 < 0) {
    operator delete(v0);
  }
  JUMPOUT(0x2162284D4);
}

void sub_21622834C()
{
}

void sub_216228368(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2160F7444(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2162284B0()
{
}

void sub_2162284BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_2161868BC((const void **)va, 0);
  JUMPOUT(0x2162284E4);
}

BOOL sub_21622853C(uint64_t a1, const __CFArray *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  sub_2162277D8(a1, 1u);
  if (!a2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a2);
  CFMutableStringRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x263EFFFA0]);
  v33[2] = Mutable;
  long long v32 = 0uLL;
  v33[0] = 0;
  if (Count >= 1)
  {
    CFIndex v5 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v5);
      if (ValueAtIndex)
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, kMecabraAssetDataFilePathsKey);
        CFArrayRef v8 = Value;
        if (Value)
        {
          CFIndex v9 = CFArrayGetCount(Value);
          if (v9 >= 1) {
            break;
          }
        }
      }
LABEL_31:
      if (++v5 == Count)
      {
        uint64_t v28 = (const __CFString **)*((void *)&v32 + 1);
        unsigned int v27 = (const __CFString **)v32;
        goto LABEL_35;
      }
    }
    CFIndex v10 = 0;
    while (1)
    {
      uint64_t v11 = CFArrayGetValueAtIndex(v8, v10);
      CFStringRef v12 = sub_216228CE4(v11);
      CFStringRef v34 = v12;
      CFStringRef v13 = sub_2162D1CE4(9u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 138412290;
        *(void ***)((char *)buf + 4) = &v12->isa;
        _os_log_debug_impl(&dword_2160F5000, v13, OS_LOG_TYPE_DEBUG, "[Mecabra] Set region lexicon: %@", (uint8_t *)buf, 0xCu);
        if (!v12) {
          goto LABEL_30;
        }
      }
      else if (!v12)
      {
        goto LABEL_30;
      }
      if (!CFSetContainsValue(Mutable, v12))
      {
        CFSetAddValue(Mutable, v12);
        __int16 v14 = (void *)*((void *)&v32 + 1);
        if (*((void *)&v32 + 1) < v33[0])
        {
          **((void **)&v32 + 1) = v12;
          *((void *)&v32 + 1) = v14 + 1;
          goto LABEL_30;
        }
        uint64_t v15 = (void *)v32;
        uint64_t v16 = (uint64_t)(*((void *)&v32 + 1) - v32) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v18 = v33[0] - v32;
        if ((uint64_t)(v33[0] - v32) >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        int v37 = v33;
        if (v19)
        {
          unsigned int v20 = (char *)sub_2160FFAA8((uint64_t)v33, v19);
          __int16 v14 = (void *)*((void *)&v32 + 1);
          uint64_t v15 = (void *)v32;
        }
        else
        {
          unsigned int v20 = 0;
        }
        unsigned int v21 = &v20[8 * v16];
        uint64_t v22 = &v20[8 * v19];
        CFRange v36 = v22;
        CFStringRef v34 = 0;
        *(void *)unsigned int v21 = v12;
        unint64_t v23 = (void **)(v21 + 8);
        buf[2] = (void **)(v21 + 8);
        if (v14 == v15)
        {
          CFStringRef v12 = 0;
        }
        else
        {
          do
          {
            uint64_t v24 = *--v14;
            *__int16 v14 = 0;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v14 != v15);
          unint64_t v23 = buf[2];
          uint64_t v22 = v36;
          CFStringRef v12 = v34;
        }
        long long v25 = v32;
        *(void *)&long long v32 = v21;
        *(_OWORD *)&buf[1] = v25;
        uint64_t v26 = (char *)v33[0];
        v33[0] = v22;
        CFRange v36 = v26;
        buf[0] = (void **)v25;
        sub_216195B08((uint64_t)buf);
        *((void *)&v32 + 1) = v23;
        if (!v12) {
          goto LABEL_30;
        }
      }
      CFRelease(v12);
LABEL_30:
      if (++v10 == v9) {
        goto LABEL_31;
      }
    }
  }
  uint64_t v28 = 0;
  unsigned int v27 = 0;
LABEL_35:
  BOOL v29 = sub_216228E80(a1, 1u, v27, v28);
  if (v29) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  buf[0] = (void **)&v32;
  sub_2161FA8F4(buf);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v29;
}

void sub_21622883C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162288A8(uint64_t a1, const __CFArray *a2)
{
  buf[3] = *MEMORY[0x263EF8340];
  sub_2162277D8(a1, 3u);
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    CFMutableStringRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x263EFFFA0]);
    buf[0] = Mutable;
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
        if (ValueAtIndex)
        {
          CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, kMecabraAssetDataFilePathsKey);
          CFArrayRef v9 = v8;
          if (v8)
          {
            CFIndex v10 = CFArrayGetCount(v8);
            if (v10 >= 1)
            {
              for (CFIndex j = 0; v10 != j; ++j)
              {
                CFStringRef v12 = CFArrayGetValueAtIndex(v9, j);
                if (v12)
                {
                  CFStringRef v13 = sub_216228CE4(v12);
                  CFStringRef value = v13;
                  if (v13)
                  {
                    if (!CFSetContainsValue(Mutable, v13))
                    {
                      CFSetAddValue(Mutable, value);
                      if (sub_216228D8C((uint64_t)value) == 3) {
                        goto LABEL_17;
                      }
                    }
                    if (value) {
                      CFRelease(value);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    CFStringRef value = 0;
LABEL_17:
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (value)
    {
      __int16 v14 = sub_2162D1CE4(9u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 138412290;
        *(void *)((char *)buf + 4) = value;
        _os_log_debug_impl(&dword_2160F5000, v14, OS_LOG_TYPE_DEBUG, "[Mecabra] Set dialect language model: %@", (uint8_t *)buf, 0xCu);
      }
      sub_2161868BC((const void **)(a1 + 128), value);
    }
    *(_WORD *)(a1 + 4) = 257;
    *(unsigned char *)(a1 + 104) = 1;
  }
  return a2 != 0;
}

void sub_216228AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_216228B10(void *a1)
{
  for (CFIndex i = (void *)a1[3]; i; CFIndex i = (void *)*i)
  {
    uint64_t v3 = (uint64_t *)i[3];
    unint64_t v4 = (uint64_t *)i[4];
    while (v3 != v4)
    {
      char v5 = (*(uint64_t (**)(void))(*(void *)*v3 + 24))();
      uint64_t v6 = *v3;
      if (v5)
      {
        uint64_t v11 = (void *)a1[10];
        unint64_t v10 = a1[11];
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v19 = a1[9];
          uint64_t v20 = ((uint64_t)v11 - v19) >> 3;
          if ((unint64_t)(v20 + 1) >> 61) {
LABEL_42:
          }
            sub_21610CB04();
          uint64_t v21 = v10 - v19;
          uint64_t v22 = v21 >> 2;
          if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23) {
            unint64_t v23 = (unint64_t)sub_216188754(v23);
          }
          else {
            uint64_t v24 = 0;
          }
          BOOL v29 = (void *)(v23 + 8 * v20);
          void *v29 = v6;
          CFStringRef v12 = v29 + 1;
          unint64_t v31 = (char *)a1[9];
          uint64_t v30 = (char *)a1[10];
          if (v30 != v31)
          {
            do
            {
              uint64_t v32 = *((void *)v30 - 1);
              v30 -= 8;
              *--BOOL v29 = v32;
            }
            while (v30 != v31);
            uint64_t v30 = (char *)a1[9];
          }
          a1[9] = v29;
          a1[10] = v12;
          a1[11] = v23 + 8 * v24;
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *uint64_t v11 = v6;
          CFStringRef v12 = v11 + 1;
        }
        a1[10] = v12;
      }
      else
      {
        CFArrayRef v8 = (void *)a1[7];
        unint64_t v7 = a1[8];
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v13 = a1[6];
          uint64_t v14 = ((uint64_t)v8 - v13) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
            goto LABEL_42;
          }
          uint64_t v15 = v7 - v13;
          uint64_t v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
            uint64_t v16 = v14 + 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            unint64_t v17 = (unint64_t)sub_216188754(v17);
          }
          else {
            uint64_t v18 = 0;
          }
          long long v25 = (void *)(v17 + 8 * v14);
          *long long v25 = v6;
          CFArrayRef v9 = v25 + 1;
          unsigned int v27 = (char *)a1[6];
          uint64_t v26 = (char *)a1[7];
          if (v26 != v27)
          {
            do
            {
              uint64_t v28 = *((void *)v26 - 1);
              v26 -= 8;
              *--long long v25 = v28;
            }
            while (v26 != v27);
            uint64_t v26 = (char *)a1[6];
          }
          a1[6] = v25;
          a1[7] = v9;
          a1[8] = v17 + 8 * v18;
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *CFArrayRef v8 = v6;
          CFArrayRef v9 = v8 + 1;
        }
        a1[7] = v9;
      }
      v3 += 2;
    }
  }
}

CFStringRef sub_216228CE4(const void *a1)
{
  CFTypeRef cf = 0;
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID()) {
    return CFURLCopyFileSystemPath((CFURLRef)a1, kCFURLPOSIXPathStyle);
  }
  CFTypeID v3 = CFGetTypeID(a1);
  if (v3 == CFStringGetTypeID()) {
    sub_216195954(&cf, a1);
  }
  return (CFStringRef)cf;
}

void sub_216228D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216228D8C(uint64_t result)
{
  if (result)
  {
    CFStringRef v1 = (const __CFString *)result;
    if (CFStringFind((CFStringRef)result, @"ucm", 0).location == -1)
    {
      if (CFStringHasSuffix(v1, @".dic"))
      {
        return 1;
      }
      else if (CFStringHasSuffix(v1, @".lm"))
      {
        return 3;
      }
      else if (CFStringHasSuffix(v1, @".rnnlm"))
      {
        return 4;
      }
      else if (CFStringHasSuffix(v1, @"Wubixing"))
      {
        return 7;
      }
      else if (CFStringHasSuffix(v1, @"customized_lexicon.dat"))
      {
        return 8;
      }
      else if (CFStringFind(v1, @"blocklist", 0).location == -1)
      {
        return 0;
      }
      else
      {
        return 9;
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

BOOL sub_216228E80(uint64_t a1, unsigned int a2, const __CFString **a3, const __CFString **a4)
{
  unsigned int v57 = a2;
  uint64_t v4 = 50;
  if (a2 != 2) {
    uint64_t v4 = 0;
  }
  if (a2 == 1) {
    unint64_t v5 = 2;
  }
  else {
    unint64_t v5 = v4;
  }
  if (!v5) {
    return 0;
  }
  unint64_t v7 = a3;
  unsigned int v8 = a2;
  int v54 = 0;
  unint64_t v55 = 0;
  uint64_t v56 = 0;
  if (a3 == a4)
  {
    uint64_t v14 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    do
    {
      CFStringRef v11 = *v7;
      int v12 = sub_2161E2834(*(_DWORD *)a1);
      sub_2161E3AE8(v11, __p);
      v58[0] = (void **)MEMORY[0x263EF8330];
      v58[1] = (void **)0x40000000;
      v58[2] = (void **)sub_2161A0748;
      void v58[3] = (void **)&unk_264266C08;
      int v59 = v12;
      _OWORD v58[4] = __p;
      sub_21619FED8((char *)__p, (uint64_t)v58, 0, &v53);
      if (v52 < 0) {
        operator delete(__p[0]);
      }
      if ((void)v53)
      {
        unsigned int v13 = *(_DWORD *)(v53 + 32);
        if (v13 >= v10)
        {
          sub_2162294C4((uint64_t *)&v54, &v53);
          unsigned int v10 = v13;
        }
      }
      if (*((void *)&v53 + 1)) {
        sub_2161121B0(*((std::__shared_weak_count **)&v53 + 1));
      }
      ++v7;
    }
    while (v7 != a4);
    uint64_t v14 = (uint64_t *)v54;
    uint64_t v15 = v55;
    if (v54 == v55)
    {
      unsigned int v8 = a2;
    }
    else
    {
      unsigned int v8 = a2;
      while (1)
      {
        uint64_t v17 = *v14;
        uint64_t v16 = (std::__shared_weak_count *)v14[1];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          unsigned int v18 = *(_DWORD *)(v17 + 32);
          sub_2161121B0(v16);
          if (v18 < v10) {
            break;
          }
          goto LABEL_23;
        }
        if (*(_DWORD *)(v17 + 32) < v10) {
          break;
        }
LABEL_23:
        v14 += 2;
        if (v14 == (uint64_t *)v15)
        {
          uint64_t v14 = (uint64_t *)v15;
          goto LABEL_39;
        }
      }
      if (v14 != (uint64_t *)v15)
      {
        uint64_t v20 = (char *)(v14 + 2);
        if (v14 + 2 != (uint64_t *)v15)
        {
          do
          {
            uint64_t v22 = *(void *)v20;
            uint64_t v21 = (std::__shared_weak_count *)*((void *)v20 + 1);
            if (v21)
            {
              atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
              unsigned int v23 = *(_DWORD *)(v22 + 32);
              sub_2161121B0(v21);
              if (v23 >= v10)
              {
                long long v24 = *(_OWORD *)v20;
LABEL_35:
                *(void *)uint64_t v20 = 0;
                *((void *)v20 + 1) = 0;
                long long v25 = (std::__shared_weak_count *)v14[1];
                *(_OWORD *)uint64_t v14 = v24;
                if (v25) {
                  sub_2161121B0(v25);
                }
                v14 += 2;
              }
            }
            else if (*(_DWORD *)(v22 + 32) >= v10)
            {
              long long v24 = *(unint64_t *)v20;
              goto LABEL_35;
            }
            v20 += 16;
          }
          while (v20 != v15);
        }
      }
    }
  }
LABEL_39:
  sub_2162295E0((uint64_t)&v54, (uint64_t)v14, (uint64_t)v55);
  unint64_t v26 = (v55 - v54) >> 4;
  if (v26 > v5) {
    sub_2162295E0((uint64_t)&v54, (uint64_t)&v54[16 * v5], (uint64_t)&v54[16 * v26]);
  }
  unsigned int v27 = sub_2162298B8((uint64_t *)(a1 + 8), v8, &v57);
  uint64_t v28 = v27;
  BOOL v29 = v27 + 3;
  if (v27 + 3 != (uint64_t *)&v54)
  {
    unint64_t v31 = v54;
    uint64_t v30 = v55;
    int64_t v32 = v55 - v54;
    unint64_t v33 = (v55 - v54) >> 4;
    uint64_t v34 = v27[5];
    CFStringRef v35 = (void *)v27[3];
    if (v33 <= (v34 - (uint64_t)v35) >> 4)
    {
      unint64_t v42 = (v27[4] - (uint64_t)v35) >> 4;
      if (v42 >= v33)
      {
        unsigned int v46 = sub_216229848((uint64_t *)v54, (uint64_t *)v55, v35);
        for (CFIndex i = (void *)v28[4]; i != v46; i -= 2)
        {
          unint64_t v48 = (std::__shared_weak_count *)*(i - 1);
          if (v48) {
            sub_2161121B0(v48);
          }
        }
        v28[4] = (uint64_t)v46;
      }
      else
      {
        long long v43 = (uint64_t *)&v54[16 * v42];
        sub_216229848((uint64_t *)v54, v43, v35);
        for (CFIndex j = (uint64_t *)v28[4]; v43 != (uint64_t *)v30; v43 += 2)
        {
          uint64_t *j = *v43;
          uint64_t v45 = v43[1];
          j[1] = v45;
          if (v45) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
          }
          j += 2;
        }
        v28[4] = (uint64_t)j;
      }
    }
    else
    {
      if (v35)
      {
        sub_2161FB75C(v27 + 3);
        operator delete((void *)*v29);
        uint64_t v34 = 0;
        uint64_t *v29 = 0;
        v29[1] = 0;
        _OWORD v29[2] = 0;
      }
      if (v32 < 0) {
        goto LABEL_71;
      }
      uint64_t v36 = v34 >> 3;
      if (v34 >> 3 <= v33) {
        uint64_t v36 = v33;
      }
      unint64_t v37 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v36;
      if (v37 >> 60) {
LABEL_71:
      }
        sub_21610CB04();
      uint64_t v38 = sub_21612AA90((uint64_t)(v28 + 5), v37);
      void v28[3] = (uint64_t)v38;
      v28[4] = (uint64_t)v38;
      v28[5] = (uint64_t)&v38[2 * v39];
      if (v31 != v30)
      {
        BOOL v40 = v38;
        do
        {
          void *v40 = *(void *)v31;
          uint64_t v41 = *((void *)v31 + 1);
          v40[1] = v41;
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          v38 += 2;
          v31 += 16;
          v40 += 2;
        }
        while (v31 != v30);
      }
      v28[4] = (uint64_t)v38;
    }
  }
  BOOL v19 = v54 != v55;
  v58[0] = (void **)&v54;
  sub_2161FB708(v58);
  return v19;
}

void sub_2162292BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  sub_2161FB708(&a11);
  _Unwind_Resume(a1);
}

void sub_2162292F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2162292DCLL);
}

uint64_t sub_21622930C(uint64_t a1, CFURLRef relativeURL)
{
  CFURLRef v3 = CFURLCopyAbsoluteURL(relativeURL);
  if (!v3) {
    return 0;
  }
  CFURLRef v4 = v3;
  unint64_t v5 = *(const void **)(a1 + 112);
  if (v5 && CFEqual(v3, v5)
    || sub_2161E2834(*(_DWORD *)a1) != 5
    || (uint64_t v6 = sub_216351058(), !sub_2163511B8(v6, v4)))
  {
    uint64_t v7 = 0;
  }
  else
  {
    sub_216229464((const void **)(a1 + 112), v4);
    uint64_t v7 = 1;
    *(unsigned char *)(a1 + 105) = 1;
  }
  CFRelease(v4);
  return v7;
}

void sub_2162293BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFArrayRef sub_2162293D4(uint64_t a1, CFArrayRef theArray)
{
  if (!theArray || !CFArrayGetCount(theArray)) {
    return 0;
  }
  CFArrayRef v4 = sub_2162D9720(theArray);
  CFArrayRef v5 = sub_216227B2C(a1, v4);
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

void sub_21622944C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216195B94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216229464(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_21617DB94(a1, cf);
  }
}

void **sub_2162294C4(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21610CB04();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_21612AA90((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    _DWORD v18[2] = v15 + 16;
    sub_216229704(a1, v18);
    CFArrayRef v9 = (void *)a1[1];
    uint64_t result = sub_21621F104(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    CFArrayRef v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2162295CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21621F104((void **)va);
  _Unwind_Resume(a1);
}

void sub_2162295E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 != v6)
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      do
      {
        uint64_t v8 = (void *)(v3 + v7);
        long long v9 = *(_OWORD *)(v3 + v7);
        *uint64_t v8 = 0;
        v8[1] = 0;
        uint64_t v10 = *(std::__shared_weak_count **)(v3 + 8);
        *(_OWORD *)uint64_t v3 = v9;
        if (v10) {
          sub_2161121B0(v10);
        }
        v3 += 16;
      }
      while (v3 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (v5 != v3)
    {
      unint64_t v11 = *(std::__shared_weak_count **)(v5 - 8);
      if (v11) {
        sub_2161121B0(v11);
      }
      v5 -= 16;
    }
    *(void *)(a1 + 8) = v3;
  }
}

CFDictionaryRef sub_216229684(uint64_t a1, const void *a2, int a3)
{
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 96);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFNumberRef v5 = result;
      CFTypeID v6 = CFGetTypeID(result);
      if (v6 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
        return (const __CFDictionary *)((valuePtr & a3) != 0);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_216229704(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21622977C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21622977C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216229810((uint64_t)v12);
  return v10;
}

uint64_t sub_216229810(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21621F0C0(a1);
  }
  return a1;
}

void *sub_216229848(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        sub_2161121B0(v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void *sub_2162298B8(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    long long v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 2;
  uint64_t v10 = operator new(0x30uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  _DWORD v10[4] = 0;
  void v10[5] = 0;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_2160FFA74();
  }
  BOOL v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  uint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    uint64_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *uint64_t v22 = *v28;
          *uint64_t v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          uint64_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        uint64_t v22 = v28;
        uint64_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint64_t v30 = *a1;
  unint64_t v31 = *(void **)(*a1 + 8 * v6);
  if (v31)
  {
    *uint64_t v10 = *v31;
LABEL_72:
    void *v31 = v10;
    goto LABEL_73;
  }
  *uint64_t v10 = *v12;
  *uint64_t v12 = v10;
  *(void *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    unint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_216229CA0(_Unwind_Exception *a1)
{
  sub_216229CB8(1, v1);
  _Unwind_Resume(a1);
}

void sub_216229CB8(char a1, void **__p)
{
  if (a1)
  {
    unint64_t v3 = __p + 3;
    sub_2161FB708(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_216229D04(void *a1, uint64_t *a2, int a3)
{
  if (((*(uint64_t (**)(void))(*(void *)*a2 + 32))() & 1) == 0 && !a3)
  {
    unint64_t v6 = a1[5];
    unint64_t v7 = (void *)a1[4];
    if ((unint64_t)v7 < v6)
    {
      uint64_t v8 = *a2;
      *a2 = 0;
      *unint64_t v7 = v8;
      long long v9 = v7 + 1;
LABEL_36:
      a1[4] = v9;
      return *(v9 - 1);
    }
    uint64_t v18 = a1[3];
    uint64_t v19 = ((uint64_t)v7 - v18) >> 3;
    if (!((unint64_t)(v19 + 1) >> 61))
    {
      uint64_t v20 = v6 - v18;
      uint64_t v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
        uint64_t v21 = v19 + 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      unint64_t v44 = a1 + 5;
      if (v22) {
        unint64_t v22 = (unint64_t)sub_216188754(v22);
      }
      else {
        uint64_t v23 = 0;
      }
      unint64_t v31 = (void *)(v22 + 8 * v19);
      unint64_t v32 = v22 + 8 * v23;
      unint64_t v43 = v32;
      uint64_t v33 = *a2;
      *a2 = 0;
      void *v31 = v33;
      long long v9 = v31 + 1;
      v42.i64[1] = (uint64_t)(v31 + 1);
      CFStringRef v35 = (void *)a1[3];
      uint64_t v34 = (void *)a1[4];
      if (v34 == v35)
      {
        int64x2_t v37 = vdupq_n_s64((unint64_t)v34);
      }
      else
      {
        do
        {
          uint64_t v36 = *--v34;
          *uint64_t v34 = 0;
          *--unint64_t v31 = v36;
        }
        while (v34 != v35);
        int64x2_t v37 = *(int64x2_t *)(a1 + 3);
        long long v9 = (void *)v42.i64[1];
        unint64_t v32 = v43;
      }
      a1[3] = v31;
      a1[4] = v9;
      int64x2_t v42 = v37;
      unint64_t v39 = a1[5];
      a1[5] = v32;
      unint64_t v43 = v39;
      uint64_t v41 = v37.i64[0];
      sub_21622A97C((uint64_t)&v41);
      goto LABEL_36;
    }
LABEL_38:
    sub_21610CB04();
  }
  unint64_t v10 = a1[2];
  unint64_t v11 = (void *)a1[1];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = ((uint64_t)v11 - *a1) >> 3;
    if ((unint64_t)(v13 + 1) >> 61) {
      goto LABEL_38;
    }
    uint64_t v14 = v10 - *a1;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    unint64_t v44 = a1 + 2;
    if (v16) {
      unint64_t v16 = (unint64_t)sub_216188754(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint8x8_t v24 = (void *)(v16 + 8 * v13);
    unint64_t v25 = v16 + 8 * v17;
    unint64_t v43 = v25;
    uint64_t v26 = *a2;
    *a2 = 0;
    *uint8x8_t v24 = v26;
    long long v9 = v24 + 1;
    v42.i64[1] = (uint64_t)(v24 + 1);
    uint64_t v28 = (void *)*a1;
    uint64_t v27 = (void *)a1[1];
    if (v27 == (void *)*a1)
    {
      int64x2_t v30 = vdupq_n_s64((unint64_t)v27);
    }
    else
    {
      do
      {
        uint64_t v29 = *--v27;
        *uint64_t v27 = 0;
        *--uint8x8_t v24 = v29;
      }
      while (v27 != v28);
      int64x2_t v30 = *(int64x2_t *)a1;
      long long v9 = (void *)v42.i64[1];
      unint64_t v25 = v43;
    }
    *a1 = v24;
    a1[1] = v9;
    int64x2_t v42 = v30;
    unint64_t v38 = a1[2];
    a1[2] = v25;
    unint64_t v43 = v38;
    uint64_t v41 = v30.i64[0];
    sub_21622A97C((uint64_t)&v41);
  }
  else
  {
    uint64_t v12 = *a2;
    *a2 = 0;
    *unint64_t v11 = v12;
    long long v9 = v11 + 1;
  }
  a1[1] = v9;
  return *(v9 - 1);
}

uint64_t sub_216229F40(void *a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(void))(**(void **)a2 + 32))())
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v34);
    CFArrayRef v4 = a1 + 4;
    uint64_t v5 = (void *)a1[4];
    unint64_t v13 = a1[5];
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v16 = (void *)a1[3];
      uint64_t v17 = v5 - v16;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        sub_21610CB04();
      }
      uint64_t v19 = v13 - (void)v16;
      if (v19 >> 2 > v18) {
        unint64_t v18 = v19 >> 2;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      unint64_t v38 = a1 + 5;
      if (v20)
      {
        unint64_t v20 = (unint64_t)sub_216188754(v20);
        unint64_t v16 = (void *)a1[3];
        uint64_t v5 = (void *)a1[4];
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v26 = (void *)(v20 + 8 * v17);
      unint64_t v27 = v20 + 8 * v21;
      unint64_t v37 = v27;
      uint64_t v28 = v34;
      uint64_t v34 = 0;
      *uint64_t v26 = v28;
      *((void *)&v36 + 1) = v26 + 1;
      if (v5 == v16)
      {
        uint64_t v15 = v26 + 1;
      }
      else
      {
        do
        {
          uint64_t v29 = *--v5;
          *uint64_t v5 = 0;
          *--uint64_t v26 = v29;
        }
        while (v5 != v16);
        uint64_t v15 = (void *)*((void *)&v36 + 1);
        unint64_t v27 = v37;
      }
      long long v30 = *(_OWORD *)(a1 + 3);
      a1[3] = v26;
      a1[4] = v15;
      long long v36 = v30;
      unint64_t v31 = a1[5];
      a1[5] = v27;
      goto LABEL_33;
    }
LABEL_12:
    uint64_t v14 = v34;
    uint64_t v34 = 0;
    *uint64_t v5 = v14;
    uint64_t v15 = v5 + 1;
    *CFArrayRef v4 = v15;
    goto LABEL_34;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v34);
  CFArrayRef v4 = a1 + 1;
  uint64_t v5 = (void *)a1[1];
  unint64_t v6 = a1[2];
  if ((unint64_t)v5 < v6) {
    goto LABEL_12;
  }
  unint64_t v7 = (void *)*a1;
  uint64_t v8 = ((uint64_t)v5 - *a1) >> 3;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61) {
    sub_21610CB04();
  }
  uint64_t v10 = v6 - (void)v7;
  if (v10 >> 2 > v9) {
    unint64_t v9 = v10 >> 2;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  unint64_t v38 = a1 + 2;
  if (v11)
  {
    unint64_t v11 = (unint64_t)sub_216188754(v11);
    unint64_t v7 = (void *)*a1;
    uint64_t v5 = (void *)a1[1];
  }
  else
  {
    uint64_t v12 = 0;
  }
  unint64_t v22 = (void *)(v11 + 8 * v8);
  unint64_t v23 = v11 + 8 * v12;
  unint64_t v37 = v23;
  uint64_t v24 = v34;
  uint64_t v34 = 0;
  *unint64_t v22 = v24;
  *((void *)&v36 + 1) = v22 + 1;
  if (v5 == v7)
  {
    uint64_t v15 = v22 + 1;
  }
  else
  {
    do
    {
      uint64_t v25 = *--v5;
      *uint64_t v5 = 0;
      *--unint64_t v22 = v25;
    }
    while (v5 != v7);
    uint64_t v15 = (void *)*((void *)&v36 + 1);
    unint64_t v23 = v37;
  }
  long long v30 = *(_OWORD *)a1;
  *a1 = v22;
  a1[1] = v15;
  long long v36 = v30;
  unint64_t v31 = a1[2];
  a1[2] = v23;
LABEL_33:
  unint64_t v37 = v31;
  uint64_t v35 = v30;
  sub_21622A97C((uint64_t)&v35);
LABEL_34:
  *CFArrayRef v4 = v15;
  uint64_t v32 = v34;
  uint64_t v34 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t result = *(void *)(*v4 - 8);
  ++*(void *)(result + 8);
  return result;
}

void sub_21622A200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21622A240(void *result, char a2, uint64_t a3, unsigned char *a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *result;
  uint64_t v9 = result[1];
  while (v8 != v9 && (!a4 || !*a4))
  {
    uint64_t v10 = *(void *)(a3 + 24);
    if (!v10) {
LABEL_15:
    }
      sub_21610B7AC();
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v8);
    v8 += 8;
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = v7[3];
    uint64_t v11 = v7[4];
    while (v12 != v11 && (!a4 || !*a4))
    {
      uint64_t v13 = *(void *)(a3 + 24);
      if (!v13) {
        goto LABEL_15;
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, v12);
      v12 += 8;
    }
  }
  return result;
}

uint64_t sub_21622A324(uint64_t a1, uint64_t a2)
{
  CFArrayRef v4 = (uint64_t **)(a1 + 48);
  uint64_t v5 = *(uint64_t **)(a1 + 48);
  unint64_t v6 = (uint64_t *)(a1 + 56);
  if (v5 != (uint64_t *)(a1 + 56))
  {
    while (1)
    {
      uint64_t v7 = v5[4];
      if (*(double *)(v7 + 32) == *(double *)(a2 + 32) && *(void *)(v7 + 64) == *(void *)(a2 + 64)) {
        break;
      }
      uint64_t v8 = (uint64_t *)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
      if (v9 == v6) {
        goto LABEL_14;
      }
    }
  }
  if (v5 != v6)
  {
    uint64_t v11 = v5[4];
    if (*(double *)(v11 + 56) >= *(double *)(a2 + 56)) {
      return 0;
    }
    sub_21622A5E4(*(void *)v11, v11);
    sub_21622A9F8(v4, v5);
    operator delete(v5);
  }
LABEL_14:
  if (*(void *)(a1 + 64) == 80)
  {
    uint64_t v12 = (uint64_t *)*v6;
    if (*v6)
    {
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = (uint64_t *)v12[1];
      }
      while (v12);
    }
    else
    {
      uint64_t v15 = v6;
      do
      {
        uint64_t v13 = (uint64_t *)v15[2];
        BOOL v10 = *v13 == (void)v15;
        uint64_t v15 = v13;
      }
      while (v10);
    }
    sub_21622A5E4(*(void *)v13[4], v13[4]);
    unint64_t v16 = (uint64_t *)*v6;
    if (*v6)
    {
      do
      {
        uint64_t v17 = v16;
        unint64_t v16 = (uint64_t *)v16[1];
      }
      while (v16);
    }
    else
    {
      unint64_t v18 = v6;
      do
      {
        uint64_t v17 = (uint64_t *)v18[2];
        BOOL v10 = *v17 == (void)v18;
        unint64_t v18 = v17;
      }
      while (v10);
    }
    sub_21622A9F8(v4, v17);
    operator delete(v17);
  }
  uint64_t v19 = (uint64_t *)*v6;
  unint64_t v20 = v6;
  if (*v6)
  {
    double v21 = *(double *)(a2 + 56);
    while (1)
    {
      while (1)
      {
        unint64_t v20 = v19;
        double v22 = *(double *)(v19[4] + 56);
        if (v21 <= v22) {
          break;
        }
        uint64_t v19 = (uint64_t *)*v19;
        unint64_t v6 = v20;
        if (!*v20) {
          goto LABEL_35;
        }
      }
      if (v22 <= v21) {
        break;
      }
      uint64_t v19 = (uint64_t *)v19[1];
      if (!v19)
      {
        unint64_t v6 = v20 + 1;
        goto LABEL_35;
      }
    }
  }
  else
  {
LABEL_35:
    unint64_t v23 = (uint64_t *)operator new(0x28uLL);
    v23[4] = a2;
    *unint64_t v23 = 0;
    v23[1] = 0;
    void v23[2] = (uint64_t)v20;
    *unint64_t v6 = (uint64_t)v23;
    uint64_t v24 = (uint64_t *)**v4;
    if (v24)
    {
      *CFArrayRef v4 = v24;
      uint64_t v25 = (uint64_t *)*v6;
    }
    else
    {
      uint64_t v25 = v23;
    }
    sub_21612A6F4(*(uint64_t **)(a1 + 56), v25);
    ++*(void *)(a1 + 64);
  }
  uint64_t v26 = *(void **)a2;
  unint64_t v27 = *(uint64_t **)(*(void *)a2 + 40);
  unint64_t v28 = *(void *)(*(void *)a2 + 48);
  if ((unint64_t)v27 >= v28)
  {
    uint64_t v30 = v26[4];
    uint64_t v31 = ((uint64_t)v27 - v30) >> 3;
    if ((unint64_t)(v31 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v32 = v28 - v30;
    uint64_t v33 = v32 >> 2;
    if (v32 >> 2 <= (unint64_t)(v31 + 1)) {
      uint64_t v33 = v31 + 1;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34) {
      uint64_t v35 = (char *)sub_2160FFAA8(*(void *)a2 + 48, v34);
    }
    else {
      uint64_t v35 = 0;
    }
    long long v36 = &v35[8 * v31];
    unint64_t v37 = &v35[8 * v34];
    *(void *)long long v36 = a2;
    uint64_t v29 = v36 + 8;
    unint64_t v39 = (char *)v26[4];
    unint64_t v38 = (char *)v26[5];
    if (v38 != v39)
    {
      do
      {
        uint64_t v40 = *((void *)v38 - 1);
        v38 -= 8;
        *((void *)v36 - 1) = v40;
        v36 -= 8;
      }
      while (v38 != v39);
      unint64_t v38 = (char *)v26[4];
    }
    v26[4] = v36;
    void v26[5] = v29;
    v26[6] = v37;
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    *unint64_t v27 = a2;
    uint64_t v29 = v27 + 1;
  }
  void v26[5] = v29;
  return 1;
}

uint64_t sub_21622A5E4(uint64_t result, uint64_t a2)
{
  CFTypeID v2 = *(void **)(result + 40);
  unint64_t v3 = *(void **)(result + 32);
  if (v3 != v2)
  {
    while (*v3 != a2)
    {
      if (++v3 == v2)
      {
        unint64_t v3 = *(void **)(result + 40);
        break;
      }
    }
  }
  CFArrayRef v4 = v3 + 1;
  if (v3 != v2 && v4 != v2)
  {
    do
    {
      if (*v4 != a2) {
        *v3++ = *v4;
      }
      ++v4;
    }
    while (v4 != v2);
    CFTypeID v2 = *(void **)(result + 40);
  }
  if (v2 != v3) {
    *(void *)(result + 4sub_2161868BC(&a9, 0) = v3;
  }
  return result;
}

uint64_t sub_21622A698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_21622A6EC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_216140140((uint64_t)v7);
  v12.__locale_ = (std::locale::__imp *)&unk_26C6C78E0;
  uint64_t v13 = v7;
  uint64_t v14 = &v12;
  sub_21622A240(a1, 0, (uint64_t)&v12, 0);
  sub_21622AC58(&v12);
  std::ios_base::getloc((const std::ios_base *)((char *)&v9[-1] + *(void *)(v8 - 24)));
  uint64_t v4 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  std::ostream::flush();
  sub_216178BC0((uint64_t)v9, a2);
  v7[0] = *MEMORY[0x263F8C2B8];
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v8 = v5;
  v9[0] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166CA750](&v11);
}

void sub_21622A940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21622AC58((void *)(v9 - 88));
  sub_216140418((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21622A97C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_21622A9F8(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_216167704(v6, a2);
}

void sub_21622AA50()
{
}

void *sub_21622AA64(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C6C78E0;
  result[1] = v3;
  return result;
}

uint64_t sub_21622AAAC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C78E0;
  a2[1] = v2;
  return result;
}

void sub_21622AAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(*(void *)(a1 + 8) + 16);
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 48))(__p);
  if ((v11 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v4 = v11;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  BOOL v5 = sub_216129E78(v2, (uint64_t)v3, v4);
  sub_216129E78(v5, (uint64_t)"(", 1);
  unint64_t v6 = (void *)std::ostream::operator<<();
  sub_216129E78(v6, (uint64_t)", ", 2);
  uint64_t v7 = (void *)std::ostream::operator<<();
  sub_216129E78(v7, (uint64_t)", ", 2);
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_216129E78(v8, (uint64_t)", ", 2);
  uint64_t v9 = (void *)std::ostream::operator<<();
  sub_216129E78(v9, (uint64_t)"), ", 3);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21622ABF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21622AC0C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC7A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21622AC4C()
{
  return &unk_26C6BC7A0;
}

void *sub_21622AC58(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_21622ACDC(int a1, __CFDictionary *a2, void *lpsrc, char a4)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t v7 = (uint64_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  uint64_t result = 0;
  if ((a4 & 1) == 0)
  {
    if (v7)
    {
      uint64_t result = sub_2162E42F8((uint64_t)v7);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *))(*v7 + 56))(v7);
        if (result)
        {
          CFStringRef v9 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*v7 + 56))(v7);
          uint64_t result = CFStringGetLength(v9);
          if (result)
          {
            if (v7[1] < 1) {
              return 0;
            }
            unsigned int v10 = (*(uint64_t (**)(uint64_t *))(*v7 + 416))(v7);
            if ((v10 & 0x4000000) == 0) {
              return 0;
            }
            unsigned int v11 = v10;
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797BA68, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_26797BA68))
            {
              off_26797BA60 = sub_2161A2A80();
              __cxa_guard_release(&qword_26797BA68);
            }
            int v12 = (v11 >> 2) & 1;
            if (!*(unsigned char *)off_26797BA60) {
              LOBYTE(v12) = 1;
            }
            if ((~v11 & 0x6000000) != 0 || (v12 & 1) == 0)
            {
              if (((*(uint64_t (**)(uint64_t *))(*v7 + 416))(v7) & 0x6000002) != 0x4000002
                || *(unsigned char *)sub_2161A2A80() && (*(unsigned int (**)(uint64_t *))(*v7 + 96))(v7) == 68)
              {
                uint64_t v13 = 10;
              }
              else
              {
                uint64_t v13 = v7[1] - 1;
              }
            }
            else
            {
              uint64_t v13 = 0;
            }
            sub_216235C50(a1, a2, v13);
            CFStringRef v14 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
            sub_216235D04(a1, a2, v14);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

void sub_21622AF68(_Unwind_Exception *a1)
{
}

void sub_21622AF84()
{
}

uint64_t sub_21622AF98(const __CFArray *a1)
{
  if (!a1) {
    __assert_rtn("getCPGestureCount", "GestureUtils.cpp", 19, "gestures");
  }
  if (CFArrayGetCount(a1) < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  CFIndex v3 = 0;
  do
  {
    CFDictionaryRef ValueAtIndex = (unsigned int (****)(void))CFArrayGetValueAtIndex(a1, v3);
    if ((**ValueAtIndex[3])(ValueAtIndex[3]) == 2) {
      ++v2;
    }
    ++v3;
  }
  while (v3 < CFArrayGetCount(a1));
  return v2;
}

CFStringRef sub_21622B054(const __CFArray *a1)
{
  if (!a1) {
    __assert_rtn("createTypingGestureString", "GestureUtils.cpp", 32, "gestures");
  }
  CFIndex Count = CFArrayGetCount(a1);
  long long __p = 0;
  unint64_t v20 = 0;
  double v21 = 0;
  sub_216185B34(&__p, Count);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      uint64_t v4 = *((void *)CFArrayGetValueAtIndex(a1, i) + 3);
      if (!(**(unsigned int (***)(uint64_t))v4)(v4)
        || (**(unsigned int (***)(uint64_t))v4)(v4) == 1)
      {
        __int16 v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
        __int16 v6 = v5;
        uint64_t v7 = v20;
        if (v20 >= v21)
        {
          CFStringRef v9 = (char *)__p;
          uint64_t v10 = v20 - (unsigned char *)__p;
          if (v20 - (unsigned char *)__p <= -3) {
            sub_21610CB04();
          }
          uint64_t v11 = v10 >> 1;
          if (v21 - (unsigned char *)__p <= (unint64_t)((v10 >> 1) + 1)) {
            uint64_t v12 = v11 + 1;
          }
          else {
            uint64_t v12 = v21 - (unsigned char *)__p;
          }
          if ((unint64_t)(v21 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v13 = v12;
          }
          if (v13)
          {
            CFStringRef v14 = (char *)sub_21610FD44((uint64_t)&v21, v13);
            CFStringRef v9 = (char *)__p;
            uint64_t v7 = v20;
          }
          else
          {
            CFStringRef v14 = 0;
          }
          uint64_t v15 = &v14[2 * v11];
          *(_WORD *)uint64_t v15 = v6;
          uint64_t v8 = v15 + 2;
          while (v7 != v9)
          {
            __int16 v16 = *((_WORD *)v7 - 1);
            v7 -= 2;
            *((_WORD *)v15 - 1) = v16;
            v15 -= 2;
          }
          long long __p = v15;
          unint64_t v20 = v8;
          double v21 = &v14[2 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(_WORD *)unint64_t v20 = v5;
          uint64_t v8 = v7 + 2;
        }
        unint64_t v20 = v8;
      }
    }
  }
  CFStringRef v17 = CFStringCreateWithCharacters(0, (const UniChar *)__p, (v20 - (unsigned char *)__p) >> 1);
  if (__p)
  {
    unint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  return v17;
}

void sub_21622B264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_21622B28C(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    if (CFArrayGetCount(result) == 1)
    {
      CFDictionaryRef ValueAtIndex = (unsigned int (****)(void))CFArrayGetValueAtIndex(v1, 0);
      return (const __CFArray *)((**ValueAtIndex[3])(ValueAtIndex[3]) == 3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFMutableArrayRef sub_21622B304(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v2 = a1;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFIndex Count = CFArrayGetCount(v2);
  if (Count >= 1)
  {
    CFIndex v4 = 0;
    unint64_t v28 = Mutable;
    CFArrayRef v29 = v2;
    while (1)
    {
      uint64_t v5 = *((void *)CFArrayGetValueAtIndex(v2, v4) + 3);
      if (!(**(unsigned int (***)(uint64_t))v5)(v5)
        || (**(unsigned int (***)(uint64_t))v5)(v5) == 1)
      {
        break;
      }
LABEL_47:
      if (++v4 == Count) {
        return Mutable;
      }
    }
    __int16 v6 = *(unsigned __int16 **)(v5 + 8);
    uint64_t v7 = *(unsigned __int16 **)(v5 + 16);
    if (v6 == v7)
    {
      unint64_t v20 = 0;
      double v21 = 0;
      unint64_t v10 = 0;
      v31 &= 0xFFFF0000;
    }
    else
    {
      uint64_t v8 = 0;
      CFStringRef v9 = 0;
      unint64_t v10 = 0;
      do
      {
        unsigned int v1 = v1 & 0xFFFF0000 | *v6;
        unsigned int v11 = *((_DWORD *)v6 + 1);
        if ((unint64_t)v9 >= v10)
        {
          uint64_t v12 = ((char *)v9 - (char *)v8) >> 3;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            sub_21610CB04();
          }
          if ((uint64_t)(v10 - (void)v8) >> 2 > v13) {
            unint64_t v13 = (uint64_t)(v10 - (void)v8) >> 2;
          }
          if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            unint64_t v14 = (unint64_t)sub_216188754(v14);
          }
          else {
            uint64_t v15 = 0;
          }
          __int16 v16 = (unsigned int *)(v14 + 8 * v12);
          *__int16 v16 = v1;
          v16[1] = v11;
          CFStringRef v17 = v16;
          while (v9 != v8)
          {
            uint64_t v18 = *((void *)v9 - 1);
            v9 -= 2;
            *((void *)v17 - 1) = v18;
            v17 -= 2;
          }
          unint64_t v10 = v14 + 8 * v15;
          CFStringRef v9 = v16 + 2;
          if (v8) {
            operator delete(v8);
          }
          uint64_t v8 = v17;
        }
        else
        {
          *CFStringRef v9 = v1;
          v9[1] = v11;
          v9 += 2;
        }
        v6 += 4;
      }
      while (v6 != v7);
      unsigned int v19 = v31 & 0xFFFF0000;
      v31 &= 0xFFFF0000;
      if ((unint64_t)v9 < v10)
      {
        *CFStringRef v9 = v19;
        v9[1] = 0;
LABEL_43:
        CFMutableArrayRef Mutable = v28;
        CFArrayRef v2 = v29;
        CFDataRef v26 = CFDataCreate(0, (const UInt8 *)v8, (char *)v9 - (char *)v8 + 8);
        CFArrayAppendValue(v28, v26);
        if (v26) {
          CFRelease(v26);
        }
        if (v8) {
          operator delete(v8);
        }
        goto LABEL_47;
      }
      unint64_t v20 = v8;
      double v21 = v9;
    }
    uint64_t v22 = ((char *)v21 - (char *)v20) >> 3;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61) {
      sub_21610CB04();
    }
    if ((uint64_t)(v10 - (void)v20) >> 2 > v23) {
      unint64_t v23 = (uint64_t)(v10 - (void)v20) >> 2;
    }
    if (v10 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      unint64_t v24 = (unint64_t)sub_216188754(v24);
    }
    CFStringRef v9 = (unsigned int *)(v24 + 8 * v22);
    *(void *)CFStringRef v9 = v31;
    uint64_t v8 = v9;
    if (v21 != v20)
    {
      uint64_t v8 = v9;
      do
      {
        uint64_t v25 = *((void *)v21 - 1);
        v21 -= 2;
        *((void *)v8 - 1) = v25;
        v8 -= 2;
      }
      while (v21 != v20);
    }
    if (v20) {
      operator delete(v20);
    }
    goto LABEL_43;
  }
  return Mutable;
}

void sub_21622B5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_21622B624(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
}

uint64_t sub_21622B658(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12 = *a1;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, double, double, double, double))off_26797EFC0;
  unint64_t v20 = off_26797EFC0;
  if (!off_26797EFC0)
  {
    unint64_t v14 = (void *)sub_21622C4E4();
    void v18[3] = (uint64_t)dlsym(v14, "ITTouchTranscoderSessionAddEvent");
    off_26797EFC0 = (_UNKNOWN *)v18[3];
    unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, double, double, double, double))v18[3];
  }
  _Block_object_dispose(&v17, 8);
  if (!v13)
  {
    dlerror();
    __int16 v16 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v17, 8);
    _Unwind_Resume(v16);
  }
  uint64_t result = v13(v12, a2, a3, a4, a5, a6);
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_21622B7C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v8 = 0;
  CFStringRef v9 = &v8;
  uint64_t v10 = 0x2000000000;
  CFIndex v4 = (uint64_t (*)(uint64_t, uint64_t))off_26797EFC8;
  unsigned int v11 = off_26797EFC8;
  if (!off_26797EFC8)
  {
    uint64_t v5 = (void *)sub_21622C4E4();
    v9[3] = (uint64_t)dlsym(v5, "ITTouchTranscoderSessionEnumerateCandidates");
    off_26797EFC8 = (_UNKNOWN *)v9[3];
    CFIndex v4 = (uint64_t (*)(uint64_t, uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    dlerror();
    uint64_t v7 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v7);
  }
  return v4(v3, a2);
}

uint64_t sub_21622B8E0(uint64_t *a1, int a2, const void *a3)
{
  uint64_t v6 = sub_21622C350();
  uint64_t v7 = 0;
  if (!a3 || !v6)
  {
LABEL_25:
    *a1 = v7;
    return (uint64_t)a1;
  }
  CFTypeRef cf = 0;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v27 = 0;
  unint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  CFStringRef v9 = (const void **)qword_26797DAF8;
  uint64_t v30 = (void *)qword_26797DAF8;
  if (!qword_26797DAF8)
  {
    *(void *)std::string buf = MEMORY[0x263EF8330];
    uint64_t v23 = 0x40000000;
    unint64_t v24 = sub_21622C590;
    uint64_t v25 = &unk_26426BD78;
    CFDataRef v26 = &v27;
    uint64_t v10 = (void *)sub_21622C4E4();
    void v28[3] = (uint64_t)dlsym(v10, "kITTouchTranscoderLocaleKey");
    qword_26797DAF8 = *(void *)(v26[1] + 24);
    CFStringRef v9 = (const void **)v28[3];
  }
  _Block_object_dispose(&v27, 8);
  if (v9)
  {
    CFDictionaryAddValue(Mutable, *v9, a3);
    if (a2)
    {
      uint64_t v27 = 0;
      unint64_t v28 = &v27;
      uint64_t v29 = 0x2000000000;
      unsigned int v11 = (const void **)qword_26797DB08;
      uint64_t v30 = (void *)qword_26797DB08;
      if (!qword_26797DB08)
      {
        *(void *)std::string buf = MEMORY[0x263EF8330];
        uint64_t v23 = 0x40000000;
        unint64_t v24 = sub_21622C630;
        uint64_t v25 = &unk_26426BDA0;
        CFDataRef v26 = &v27;
        uint64_t v12 = (void *)sub_21622C4E4();
        void v28[3] = (uint64_t)dlsym(v12, "kITTouchTranscoderInstanceTypeValueTapTyping");
        qword_26797DB08 = *(void *)(v26[1] + 24);
LABEL_11:
        unsigned int v11 = (const void **)v28[3];
      }
    }
    else
    {
      uint64_t v27 = 0;
      unint64_t v28 = &v27;
      uint64_t v29 = 0x2000000000;
      unsigned int v11 = (const void **)qword_26797DB00;
      uint64_t v30 = (void *)qword_26797DB00;
      if (!qword_26797DB00)
      {
        *(void *)std::string buf = MEMORY[0x263EF8330];
        uint64_t v23 = 0x40000000;
        unint64_t v24 = sub_21622C5E0;
        uint64_t v25 = &unk_264267710;
        CFDataRef v26 = &v27;
        unint64_t v13 = (void *)sub_21622C4E4();
        void v28[3] = (uint64_t)dlsym(v13, "kITTouchTranscoderInstanceTypeValueContinuousPath");
        qword_26797DB00 = *(void *)(v26[1] + 24);
        goto LABEL_11;
      }
    }
    _Block_object_dispose(&v27, 8);
    if (v11)
    {
      unint64_t v14 = *v11;
      uint64_t v27 = 0;
      unint64_t v28 = &v27;
      uint64_t v29 = 0x2000000000;
      uint64_t v15 = (const void **)qword_26797DB10;
      uint64_t v30 = (void *)qword_26797DB10;
      if (!qword_26797DB10)
      {
        *(void *)std::string buf = MEMORY[0x263EF8330];
        uint64_t v23 = 0x40000000;
        unint64_t v24 = sub_21622C680;
        uint64_t v25 = &unk_26426BDC8;
        CFDataRef v26 = &v27;
        __int16 v16 = (void *)sub_21622C4E4();
        void v28[3] = (uint64_t)dlsym(v16, "kITTouchTranscoderInstanceTypeKey");
        qword_26797DB10 = *(void *)(v26[1] + 24);
        uint64_t v15 = (const void **)v28[3];
      }
      _Block_object_dispose(&v27, 8);
      if (v15)
      {
        CFDictionaryAddValue(Mutable, *v15, v14);
        uint64_t v27 = 0;
        unint64_t v28 = &v27;
        uint64_t v29 = 0x2000000000;
        uint64_t v17 = off_26797DB18;
        uint64_t v30 = off_26797DB18;
        if (!off_26797DB18)
        {
          *(void *)std::string buf = MEMORY[0x263EF8330];
          uint64_t v23 = 0x40000000;
          unint64_t v24 = sub_21622C6D0;
          uint64_t v25 = &unk_26426BDF0;
          CFDataRef v26 = &v27;
          uint64_t v18 = (void *)sub_21622C4E4();
          void v28[3] = (uint64_t)dlsym(v18, "ITTouchTranscoderCreateWithKeyboardLayout");
          off_26797DB18 = *(_UNKNOWN **)(v26[1] + 24);
          uint64_t v17 = (void *)v28[3];
        }
        _Block_object_dispose(&v27, 8);
        if (v17)
        {
          uint64_t v7 = ((uint64_t (*)(__CFDictionary *, void, void, CFTypeRef *))v17)(Mutable, 0, 0, &cf);
          if (cf)
          {
            uint64_t v19 = sub_2162D1CE4(3u);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_error_impl(&dword_2160F5000, v19, OS_LOG_TYPE_ERROR, "Failed to create touch transcoder", buf, 2u);
            }
            CFRelease(cf);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_25;
        }
      }
    }
  }
  dlerror();
  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_21622BD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(a1);
}

void sub_21622BDEC()
{
}

void sub_21622BE84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161DFC94((const void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_21622BEBC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = *result;
    uint64_t v8 = 0;
    CFStringRef v9 = &v8;
    uint64_t v10 = 0x2000000000;
    uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))off_26797EFD0;
    unsigned int v11 = off_26797EFD0;
    if (!off_26797EFD0)
    {
      uint64_t v6 = (void *)sub_21622C4E4();
      v9[3] = (uint64_t)dlsym(v6, "ITTouchTranscoderUpdateKeyboardLayout");
      off_26797EFD0 = (_UNKNOWN *)v9[3];
      uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v9[3];
    }
    _Block_object_dispose(&v8, 8);
    if (!v5)
    {
      dlerror();
      uint64_t v7 = (_Unwind_Exception *)abort_report_np();
      _Block_object_dispose(&v8, 8);
      _Unwind_Resume(v7);
    }
    return (uint64_t *)v5(v4, v2, 0x6DB6DB6DB6DB6DB7 * ((v3 - v2) >> 3));
  }
  return result;
}

uint64_t sub_21622C008(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v2 = (uint64_t (*)(uint64_t))off_26797EFD8;
  CFStringRef v9 = off_26797EFD8;
  if (!off_26797EFD8)
  {
    uint64_t v3 = (void *)sub_21622C4E4();
    v7[3] = (uint64_t)dlsym(v3, "ITTouchTranscoderCreateSession");
    off_26797EFD8 = (_UNKNOWN *)v7[3];
    uint64_t v2 = (uint64_t (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    uint64_t v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(v1);
}

uint64_t sub_21622C120(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v2 = (uint64_t (*)(uint64_t))off_26797EFE0;
  CFStringRef v9 = off_26797EFE0;
  if (!off_26797EFE0)
  {
    uint64_t v3 = (void *)sub_21622C4E4();
    v7[3] = (uint64_t)dlsym(v3, "ITCandidateGetScore");
    off_26797EFE0 = (_UNKNOWN *)v7[3];
    uint64_t v2 = (uint64_t (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    uint64_t v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(v1);
}

uint64_t sub_21622C238(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v2 = (uint64_t (*)(uint64_t))off_26797EFE8;
  CFStringRef v9 = off_26797EFE8;
  if (!off_26797EFE8)
  {
    uint64_t v3 = (void *)sub_21622C4E4();
    v7[3] = (uint64_t)dlsym(v3, "ITCandidateGetString");
    off_26797EFE8 = (_UNKNOWN *)v7[3];
    uint64_t v2 = (uint64_t (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    uint64_t v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(v1);
}

uint64_t sub_21622C350()
{
  if (!qword_26797EFB8) {
    qword_26797EFB8 = _sl_dlopen();
  }
  return qword_26797EFB8;
}

uint64_t sub_21622C420()
{
  uint64_t result = _sl_dlopen();
  qword_26797EFB8 = result;
  return result;
}

void *sub_21622C494(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "ITTouchTranscoderSessionAddEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EFC0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_21622C4E4()
{
  uint64_t v0 = sub_21622C350();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *sub_21622C540(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "ITTouchTranscoderSessionEnumerateCandidates");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EFC8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21622C590(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "kITTouchTranscoderLocaleKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797DAF8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21622C5E0(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "kITTouchTranscoderInstanceTypeValueContinuousPath");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797DB00 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21622C630(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "kITTouchTranscoderInstanceTypeValueTapTyping");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797DB08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21622C680(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "kITTouchTranscoderInstanceTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797DB10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21622C6D0(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "ITTouchTranscoderCreateWithKeyboardLayout");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797DB18 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21622C720(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "ITTouchTranscoderUpdateKeyboardLayout");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EFD0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21622C770(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "ITTouchTranscoderCreateSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EFD8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21622C7C0(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "ITCandidateGetScore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EFE0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21622C810(uint64_t a1)
{
  uint64_t v2 = (void *)sub_21622C4E4();
  uint64_t result = dlsym(v2, "ITCandidateGetString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EFE8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_21622C860(uint64_t a1, long long *a2, const __CFString *a3, const __CFString *a4, int a5, char a6)
{
  *(void *)a1 = &unk_26C6BE7D0;
  uint64_t v8 = (void *)sub_2161E8DE8(a1, (uint64_t *)&off_26C6BCD10, a2, a3, a4, a5, a6);
  *uint64_t v8 = off_26C6BE1B8;
  v8[15] = &off_26C6BE400;
  CFIndex Length = CFStringGetLength(a3);
  *(void *)(a1 + 128) = &unk_26C6C59C0;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = Length;
  *(void *)(a1 + 168) = 0xFFFFFFFFLL;
  *(void *)(a1 + 16sub_2161868BC(&a9, 0) = 64;
  return a1;
}

void sub_21622C940(_Unwind_Exception *a1)
{
  sub_2161E9144(v1, (uint64_t *)&off_26C6BCD10);
  _Unwind_Resume(a1);
}

uint64_t sub_21622C95C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return a1 + 128;
  }
}

void sub_21622C96C()
{
}

void sub_21622CA7C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40BE1B2566);
  _Unwind_Resume(a1);
}

void sub_21622CAB8()
{
}

uint64_t *sub_21622CAD4(uint64_t *a1)
{
  return sub_2161E9144(a1, (uint64_t *)&off_26C6BCD10);
}

void sub_21622CAE0(uint64_t *a1)
{
  sub_2161E9144(a1, (uint64_t *)&off_26C6BCD10);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21622CB20()
{
  return 0;
}

uint64_t sub_21622CB28(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if ((v1 & 2) != 0) {
    return 77;
  }
  if ((v1 & 8) != 0) {
    return 65;
  }
  if ((v1 & 0x10) != 0) {
    return 85;
  }
  if ((v1 & 4) != 0) {
    return 76;
  }
  return (v1 << 10 >> 31) & 0x59;
}

uint64_t sub_21622CB9C(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1) >> 6) & 1;
}

uint64_t sub_21622CBD8()
{
  return 0;
}

uint64_t sub_21622CBE0(uint64_t a1, uint64_t *a2, const __CFString *a3, const __CFString *a4, int a5)
{
  uint64_t v13 = 0;
  int v14 = a5;
  uint64_t v15 = 0;
  uint64_t v8 = (void *)(sub_2161E8DE8(a1, a2 + 1, (long long *)&v13, a3, a4, 0, 0) + 120);
  uint64_t v9 = a2[7];
  *uint64_t v8 = v9;
  *(void *)((char *)v8 + *(void *)(v9 - 32)) = a2[8];
  uint64_t v10 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v10 - 32)) = a2[9];
  *(void *)(a1 + 12sub_2161868BC(&a9, 0) = a2[10];
  if (a3) {
    CFIndex Length = CFStringGetLength(a3);
  }
  else {
    CFIndex Length = 0;
  }
  *(void *)(a1 + 128) = &unk_26C6C59C0;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = Length;
  *(void *)(a1 + 168) = 0xFFFFFFFFLL;
  *(void *)(a1 + 16sub_2161868BC(&a9, 0) = 64;
  return a1;
}

void sub_21622CDD4(_Unwind_Exception *a1)
{
  sub_2161E9144(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_21622CDEC(uint64_t a1, const __CFString *a2, const __CFString *a3, int a4)
{
  *(void *)a1 = &unk_26C6BE7D0;
  uint64_t v9 = 0;
  int v10 = a4;
  uint64_t v11 = 0;
  uint64_t v6 = (void *)sub_2161E8DE8(a1, (uint64_t *)&off_26C6BCCB8, (long long *)&v9, a2, a3, 0, 0);
  *uint64_t v6 = off_26C6BDEB0;
  v6[15] = &off_26C6BE0F8;
  if (a2) {
    CFIndex Length = CFStringGetLength(a2);
  }
  else {
    CFIndex Length = 0;
  }
  *(void *)(a1 + 128) = &unk_26C6C59C0;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = Length;
  *(void *)(a1 + 168) = 0xFFFFFFFFLL;
  *(void *)(a1 + 16sub_2161868BC(&a9, 0) = 64;
  return a1;
}

void sub_21622CEF0(_Unwind_Exception *a1)
{
  sub_2161E9144(v1, (uint64_t *)&off_26C6BCCB8);
  _Unwind_Resume(a1);
}

uint64_t sub_21622CF0C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return a1 + 128;
  }
}

__CFString *sub_21622CF1C(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (v3 >= 1)
  {
    uint64_t v4 = v3;
    uint64_t v5 = 0;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      unsigned int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v5);
      CFStringRef v8 = CFStringCreateWithFormat(v6, 0, @"%d", v7);
      CFStringAppend(Mutable, v8);
      CFRelease(v8);
      ++v5;
    }
    while (v4 != v5);
  }
  return Mutable;
}

void sub_21622D024()
{
}

void sub_21622D0AC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40BE1B2566);
  _Unwind_Resume(a1);
}

void sub_21622D0D0(void *a1, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  if (v2 != v3)
  {
    uint64_t v4 = a1;
    uint64_t v5 = 0;
    unint64_t v6 = (v3 - v2) >> 3;
    unint64_t v75 = v6;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    unint64_t v76 = v6;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(a2 + 48) + 8 * v5);
      CFStringRef v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 304))(v7);
      unsigned int v9 = *(unsigned __int16 *)(*v8 + 40 * (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7) - 8);
      sub_2161C04AC(0);
      BOOL v10 = sub_21622E010((uint64_t)&qword_26797EF20, v9);
      if (!v10)
      {
        uint64_t v17 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * v9 + 5]);
        unint64_t v18 = v17[1];
        if (v18 >= 3)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *v17;
          uint64_t v21 = v20 + 2 * v18 - 6;
          while (word_2163CB674[v19] == *(_WORD *)(v21 + v19 * 2))
          {
            if (++v19 == 3)
            {
              uint64_t v22 = 0;
              while (word_2163CB66C[v22] == *(_WORD *)(v20 + v22 * 2))
              {
                if (++v22 == 3)
                {
                  if ((unsigned __int16)word_26797EF6C <= v9 && (unsigned __int16)word_26797EF6E >= v9) {
                    goto LABEL_6;
                  }
                  goto LABEL_94;
                }
              }
              goto LABEL_94;
            }
          }
        }
        goto LABEL_94;
      }
LABEL_6:
      uint64_t v77 = v75 - ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3) + *v4;
      if (v77 < 1) {
        return;
      }
      if (v10)
      {
        uint64_t v79 = qword_26797DB50;
        if (atomic_load_explicit((atomic_uchar *volatile)&qword_26797DB40, memory_order_acquire)) {
          goto LABEL_30;
        }
        uint64_t v11 = v5;
        uint64_t v12 = v4;
        if (!__cxa_guard_acquire(&qword_26797DB40)) {
          goto LABEL_106;
        }
        __int16 v91 = 112;
        sub_216184F68(v92, (char *)L"で");
        sub_216184F68(v93, (char *)L"で");
        __int16 v94 = 272;
        sub_21622E1A0(qword_26797DB50, (uint64_t)__dst, 2uLL);
        for (uint64_t i = 0; i != -112; i -= 56)
        {
          int v14 = &__dst[i];
          if ((char)v93[i + 23] < 0) {
            operator delete((void *)v14[10]);
          }
          if (*((char *)v14 + 79) < 0) {
            operator delete((void *)v14[7]);
          }
        }
        uint64_t v15 = &qword_26797DB40;
        __int16 v16 = qword_26797DB50;
      }
      else
      {
        uint64_t v79 = qword_26797DB68;
        if (atomic_load_explicit((atomic_uchar *volatile)&qword_26797DB48, memory_order_acquire)) {
          goto LABEL_30;
        }
        uint64_t v11 = v5;
        uint64_t v12 = v4;
        if (!__cxa_guard_acquire(&qword_26797DB48))
        {
LABEL_106:
          uint64_t v4 = v12;
          uint64_t v5 = v11;
LABEL_30:
          if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 408))(v7) != 1)
          {
            (*(void (**)(uint64_t))(*(void *)v7 + 544))(v7);
            if (v24)
            {
              (*(void (**)(uint64_t))(*(void *)v7 + 552))(v7);
              if (v25)
              {
                CFDataRef v26 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 544))(v7);
                sub_21617FAAC(v87, v26, v27);
                unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 552))(v7);
                sub_21617FAAC(v85, v28, v29);
                unint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((v79[1] - *v79) >> 3);
                if (v30 >= v77) {
                  unint64_t v30 = v77;
                }
                if (v30)
                {
                  long long __p = 0;
                  int v83 = 0;
                  int v84 = 0;
                  unsigned int v31 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 304))(v7);
                  sub_2161C1AC0(&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v31[1] - *v31) >> 3) + 1);
                  uint64_t v32 = (long long **)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 304))(v7);
                  uint64_t v33 = *v32;
                  unint64_t v34 = v32[1];
                  if (*v32 != v34)
                  {
                    uint64_t v35 = v83;
                    do
                    {
                      if (v35 >= (_OWORD *)v84)
                      {
                        unint64_t v38 = __p;
                        unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v35 - (unsigned char *)__p) >> 3);
                        unint64_t v40 = v39 + 1;
                        if (v39 + 1 > 0x666666666666666) {
                          sub_21618B344();
                        }
                        if (0x999999999999999ALL * ((v84 - (unsigned char *)__p) >> 3) > v40) {
                          unint64_t v40 = 0x999999999999999ALL * ((v84 - (unsigned char *)__p) >> 3);
                        }
                        if (0xCCCCCCCCCCCCCCCDLL * ((v84 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
                          unint64_t v41 = 0x666666666666666;
                        }
                        else {
                          unint64_t v41 = v40;
                        }
                        if (v41)
                        {
                          int64x2_t v42 = (char *)sub_21618B4A8((uint64_t)&v84, v41);
                          unint64_t v38 = __p;
                          uint64_t v35 = v83;
                        }
                        else
                        {
                          int64x2_t v42 = 0;
                        }
                        unint64_t v43 = &v42[40 * v39];
                        long long v44 = *v33;
                        long long v45 = v33[1];
                        *((void *)v43 + 4) = *((void *)v33 + 4);
                        *(_OWORD *)unint64_t v43 = v44;
                        *((_OWORD *)v43 + 1) = v45;
                        if (v35 == v38)
                        {
                          unint64_t v49 = &v42[40 * v39];
                        }
                        else
                        {
                          unsigned int v46 = &v42[40 * v39];
                          do
                          {
                            long long v47 = *(_OWORD *)((char *)v35 - 40);
                            long long v48 = *(_OWORD *)((char *)v35 - 24);
                            unint64_t v49 = v46 - 40;
                            *((void *)v46 - 1) = *((void *)v35 - 1);
                            *(_OWORD *)(v46 - 24) = v48;
                            *(_OWORD *)(v46 - 4sub_2161868BC(&a9, 0) = v47;
                            uint64_t v35 = (_OWORD *)((char *)v35 - 40);
                            v46 -= 40;
                          }
                          while (v35 != v38);
                        }
                        uint64_t v35 = v43 + 40;
                        long long __p = v49;
                        int v83 = v43 + 40;
                        int v84 = &v42[40 * v41];
                        if (v38) {
                          operator delete(v38);
                        }
                      }
                      else
                      {
                        long long v36 = *v33;
                        long long v37 = v33[1];
                        *((void *)v35 + 4) = *((void *)v33 + 4);
                        *uint64_t v35 = v36;
                        v35[1] = v37;
                        uint64_t v35 = (_OWORD *)((char *)v35 + 40);
                      }
                      int v83 = (char *)v35;
                      uint64_t v33 = (long long *)((char *)v33 + 40);
                    }
                    while (v33 != v34);
                  }
                  uint64_t v50 = *v79;
                  if (0x6DB6DB6DB6DB6DB7 * ((v79[1] - *v79) >> 3))
                  {
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DB28, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_26797DB28))
                    {
                      sub_2161C04AC(0);
                      qword_26797DB20 = (uint64_t)&qword_26797EF20;
                      __cxa_guard_release(&qword_26797DB28);
                    }
                    long long v51 = (const void **)v50;
                    unint64_t v52 = *(unsigned __int16 *)(v50 + 48);
                    if (v52 <= 0x24E) {
                      unsigned __int16 v53 = word_21637826A[v52];
                    }
                    else {
                      unsigned __int16 v53 = 0;
                    }
                    if (*(char *)(v50 + 23) < 0) {
                      uint64_t v54 = *(void *)(v50 + 8);
                    }
                    else {
                      LOWORD(v54) = *(unsigned __int8 *)(v50 + 23);
                    }
                    uint64_t v55 = v50;
                    uint64_t v56 = v50 + 24;
                    int v57 = *(char *)(v55 + 47);
                    if (v57 < 0) {
                      uint64_t v58 = *(void *)(v56 + 8);
                    }
                    else {
                      LOWORD(v58) = v57;
                    }
                    __int16 v59 = *((_WORD *)sub_216268B0C() + 4);
                    uint64_t v60 = v83;
                    if (v83 >= v84)
                    {
                      unint64_t v62 = 0xCCCCCCCCCCCCCCCDLL * ((v83 - (unsigned char *)__p) >> 3);
                      unint64_t v63 = v62 + 1;
                      if (v62 + 1 > 0x666666666666666) {
                        sub_21618B344();
                      }
                      if (0x999999999999999ALL * ((v84 - (unsigned char *)__p) >> 3) > v63) {
                        unint64_t v63 = 0x999999999999999ALL * ((v84 - (unsigned char *)__p) >> 3);
                      }
                      if (0xCCCCCCCCCCCCCCCDLL * ((v84 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
                        unint64_t v64 = 0x666666666666666;
                      }
                      else {
                        unint64_t v64 = v63;
                      }
                      if (v64) {
                        uint64_t v65 = (char *)sub_21618B4A8((uint64_t)&v84, v64);
                      }
                      else {
                        uint64_t v65 = 0;
                      }
                      int v66 = &v65[40 * v62];
                      *((void *)v66 + 1) = 0;
                      *((void *)v66 + 2) = 0;
                      *(void *)int v66 = 0;
                      *((_WORD *)v66 + 12) = v54;
                      *((_WORD *)v66 + 13) = v59;
                      *((_WORD *)v66 + 14) = v58;
                      *((_WORD *)v66 + 15) = v53;
                      *((_WORD *)v66 + 16) = v53;
                      *((_WORD *)v66 + 17) = 0;
                      v66[36] = 0;
                      *(_WORD *)(v66 + 37) = 513;
                      v66[39] = 0;
                      long long v68 = (char *)__p;
                      int v67 = v83;
                      int64_t v69 = v66;
                      if (v83 != __p)
                      {
                        do
                        {
                          long long v70 = *(_OWORD *)(v67 - 40);
                          long long v71 = *(_OWORD *)(v67 - 24);
                          *((void *)v69 - 1) = *((void *)v67 - 1);
                          *(_OWORD *)(v69 - 24) = v71;
                          *(_OWORD *)(v69 - 4sub_2161868BC(&a9, 0) = v70;
                          v69 -= 40;
                          v67 -= 40;
                        }
                        while (v67 != v68);
                        int v67 = v68;
                      }
                      int v61 = v66 + 40;
                      long long __p = v69;
                      int v83 = v66 + 40;
                      int v84 = &v65[40 * v64];
                      if (v67) {
                        operator delete(v67);
                      }
                    }
                    else
                    {
                      *(void *)int v83 = 0;
                      *((void *)v60 + 1) = 0;
                      *((void *)v60 + 2) = 0;
                      *((_WORD *)v60 + 12) = v54;
                      *((_WORD *)v60 + 13) = v59;
                      *((_WORD *)v60 + 14) = v58;
                      *((_WORD *)v60 + 15) = v53;
                      *((_WORD *)v60 + 16) = v53;
                      *((_WORD *)v60 + 17) = 0;
                      v60[36] = 0;
                      *(_WORD *)(v60 + 37) = 513;
                      int v61 = v60 + 40;
                      v60[39] = 0;
                    }
                    int v83 = v61;
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DB38, memory_order_acquire) & 1) == 0)
                    {
                      if (__cxa_guard_acquire(&qword_26797DB38))
                      {
                        qword_26797DB30 = (uint64_t)sub_2161A2A80();
                        __cxa_guard_release(&qword_26797DB38);
                      }
                    }
                    sub_21622E0BC(v87, v51, (uint64_t)&v81);
                    sub_21622E0BC((const void **)v85, (const void **)v56, (uint64_t)&v80);
                    (*(void (**)(uint64_t))(*(void *)v7 + 112))(v7);
                    (*(void (**)(uint64_t))(*(void *)v7 + 416))(v7);
                    operator new();
                  }
                  sub_21622E188();
                }
                if (v86 < 0) {
                  operator delete(v85[0]);
                }
                uint64_t v4 = a1;
                if (v88 < 0) {
                  operator delete((void *)v87[0]);
                }
              }
            }
          }
          goto LABEL_94;
        }
        sub_216184F68(__dst, "_0");
        sub_216184F68(v90, "_0");
        __int16 v91 = 107;
        sub_216184F68(v92, (char *)L"て");
        sub_216184F68(v93, (char *)L"て");
        __int16 v94 = 270;
        sub_21622E1A0(qword_26797DB68, (uint64_t)__dst, 2uLL);
        for (uint64_t j = 0; j != -112; j -= 56)
        {
          uint64_t v73 = &__dst[j];
          if ((char)v93[j + 23] < 0) {
            operator delete((void *)v73[10]);
          }
          if (*((char *)v73 + 79) < 0) {
            operator delete((void *)v73[7]);
          }
        }
        uint64_t v15 = &qword_26797DB48;
        __int16 v16 = qword_26797DB68;
      }
      uint64_t v79 = v16;
      __cxa_atexit((void (*)(void *))sub_21622E31C, v16, &dword_2160F5000);
      __cxa_guard_release(v15);
      uint64_t v4 = v12;
      uint64_t v5 = v11;
      if (v7) {
        goto LABEL_30;
      }
LABEL_94:
      ++v5;
    }
    while (v5 != v76);
  }
}

void sub_21622DD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v50 = 0;
  uint64_t v51 = v48 - 208;
  while (1)
  {
    uint64_t v52 = v51 + v50;
    if (*(char *)(v51 + v50 + 103) < 0) {
      operator delete(*(void **)(v52 + 80));
    }
    if (*(char *)(v52 + 79) < 0) {
      operator delete(*(void **)(v52 + 56));
    }
    v50 -= 56;
    if (v50 == -112)
    {
      __cxa_guard_abort(&qword_26797DB48);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_21622E010(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * a2 + 5]);
  unint64_t v3 = v2[1];
  if (v3 >= 3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *v2;
    uint64_t v7 = v6 + 2 * v3 - 6;
    while (word_2163CB664[v5] == *(_WORD *)(v7 + v5 * 2))
    {
      if (++v5 == 3)
      {
        uint64_t v8 = 0;
        while (word_2163CB66C[v8] == *(_WORD *)(v6 + v8 * 2))
        {
          if (++v8 == 3)
          {
            if (*(unsigned __int16 *)(a1 + 76) > a2) {
              return 0;
            }
            return *(unsigned __int16 *)(a1 + 78) >= a2;
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_21622E0BC@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    unint64_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v5 = (unint64_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v6 = (unint64_t)a2[1];
  }
  uint64_t result = sub_21618083C(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      unsigned int v9 = a1;
    }
    else {
      unsigned int v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, 2 * v5);
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v10 = a2;
    }
    else {
      BOOL v10 = *a2;
    }
    uint64_t result = (uint64_t)memmove(&v8[2 * v5], v10, 2 * v6);
  }
  *(_WORD *)&v8[2 * v5 + 2 * v6] = 0;
  return result;
}

void sub_21622E188()
{
}

void *sub_21622E1A0(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x492492492492493) {
      sub_21610CB04();
    }
    uint64_t v5 = 56 * a3;
    unint64_t v6 = (char *)operator new(56 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      uint64_t v8 = &v6[v7];
      unsigned int v9 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_2161984AC(v8, *(void **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *((void *)v8 + 2) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v8 = v10;
      }
      uint64_t v11 = &v6[v7 + 24];
      uint64_t v12 = (void **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        sub_2161984AC(v11, *v12, *(void *)(a2 + v7 + 32));
      }
      else
      {
        long long v13 = *(_OWORD *)v12;
        *(void *)&v6[v7 + 40] = *(void *)(a2 + v7 + 40);
        *(_OWORD *)uint64_t v11 = v13;
      }
      *(_WORD *)&v6[v7 + 48] = *(_WORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_21622E2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **sub_21622E31C(void **a1)
{
  unint64_t v3 = a1;
  sub_21622E354(&v3);
  return a1;
}

void sub_21622E354(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_21619E14C(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_21622E3D8(void *a1, const char *a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = [a1 a2:a3];
  if (!v3) {
    return 0;
  }
  unint64_t v6 = (void *)v3;
  uint64_t v7 = [MEMORY[0x263F08850] v4 v5];
  uint64_t v10 = [v6 stringByStandardizingPath:v8];

  return MEMORY[0x270F9A6D0](v7, sel_removeItemAtPath_error_, v10);
}

void sub_21622E448(uint64_t *a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v275 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(void *)(a4 + 8);
  uint64_t v7 = (unsigned __int16 *)sub_2161A2A80();
  sub_2161C04AC(0);
  if (v6 <= v7[205])
  {
    uint64_t v8 = a1[1];
    unint64_t v9 = **(void **)(v8 + 80);
    uint64_t v10 = *(void *)(v8 + 32);
    unint64_t v11 = (*(void *)(v8 + 40) - v10) >> 1;
    if (v11 <= v9) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v10 + 2 * v9;
    }
    if (v10) {
      unint64_t v13 = v11 - v9;
    }
    else {
      unint64_t v13 = 0;
    }
    BOOL v14 = v11 > v9;
    unint64_t v15 = **(void **)(v8 + 104);
    uint64_t v16 = *(void *)(v8 + 56);
    if (!v14) {
      unint64_t v13 = 0;
    }
    unint64_t v211 = v13;
    unint64_t v17 = (*(void *)(v8 + 64) - v16) >> 1;
    uint64_t v18 = v16 + 2 * v15;
    if (v17 <= v15) {
      uint64_t v18 = 0;
    }
    uint64_t v212 = v18;
    uint64_t v213 = v12;
    unint64_t v19 = v16 ? v17 - v15 : 0;
    BOOL v14 = v17 > v15;
    uint64_t v22 = v8 + 8;
    uint64_t v20 = *(void *)(v8 + 8);
    uint64_t v21 = *(void *)(v22 + 8);
    unint64_t v23 = v14 ? v19 : 0;
    unint64_t v210 = v23;
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
    unint64_t v25 = (v24 - v7[204]) & ~((uint64_t)(v24 - v7[204]) >> 63);
    if (v25 <= v24)
    {
      unsigned __int16 v26 = 0;
      v206 = &v249;
      int v207 = &v248;
      int v205 = v244;
      int v223 = a2 + 1;
      v208 = v7;
      unint64_t v209 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      int v219 = a2;
      v226 = a1;
      while (1)
      {
        unint64_t v27 = (void *)a1[1];
        uint64_t v28 = *(void *)(v27[13] + 8 * v25);
        unint64_t v29 = v210 - v28;
        uint64_t v30 = v212 + 2 * v28;
        uint64_t v31 = *(void *)(v27[10] + 8 * v25);
        if (!v212) {
          unint64_t v29 = 0;
        }
        unint64_t v225 = v29;
        v218 = (char *)(v213 + 2 * v31);
        uint64_t v32 = v213 ? v211 - v31 : 0;
        unint64_t v217 = v32;
        unint64_t v215 = v25;
        if (v25 == v24) {
          break;
        }
        uint64_t v33 = v27[1] + 40 * v25;
        uint64_t v34 = *(unsigned __int16 *)(v33 + 24);
        uint64_t v35 = *(unsigned __int16 *)(v33 + 28);
        BOOL v36 = !v34 || v35 == 0;
        if (v36) {
          break;
        }
        if (!v213) {
          uint64_t v34 = 0;
        }
        *(void *)std::string buf = v218;
        *(void *)&uint8_t buf[8] = v34;
        if (!v212) {
          uint64_t v35 = 0;
        }
        *(void *)&long long v274 = v30;
        *((void *)&v274 + 1) = v35;
        memset(__s1, 0, sizeof(__s1));
        int v245 = 0;
        v246 = 0;
        uint64_t v247 = 0;
        (*(void (**)(uint64_t, long long *, uint8_t *, void, void **, void **))(*(void *)v226[3] + 40))(v226[3], &v274, buf, v26, __s1, &v245);
        v204 = __s1[0];
        if (__s1[0] == __s1[1]) {
          unsigned int v203 = 0;
        }
        else {
          unsigned int v203 = *(unsigned __int16 *)__s1[0];
        }
        if (!v26 || (sub_2161C06A8((uint64_t)&qword_26797EF20, v26, v203) & 1) != 0)
        {
          if (v245)
          {
            v246 = v245;
            operator delete(v245);
            v204 = __s1[0];
          }
          if (v204)
          {
            __s1[1] = v204;
            operator delete(v204);
          }
          __int16 v214 = v203;
LABEL_33:
          int v245 = 0;
          v246 = &v245;
          uint64_t v247 = 0x4002000000;
          v248 = sub_21622FE14;
          int v249 = sub_21622FE38;
          memset(v250, 0, sizeof(v250));
          uint64_t v37 = *v226;
          uint64_t v39 = *a3;
          uint64_t v38 = a3[1];
          unsigned int v40 = *(_DWORD *)v226[2];
          if (*(unsigned char *)sub_2161A2A80()) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = (v40 >> 4) & 1;
          }
          if ((v40 & 0x20) != 0) {
            uint64_t v42 = v41;
          }
          else {
            uint64_t v42 = 0;
          }
          uint64_t v43 = *(unsigned int *)v226[2];
          v243[0] = MEMORY[0x263EF8330];
          v243[1] = 0x40000000;
          v244[0] = sub_21622FE64;
          v244[1] = &unk_264266E60;
          v244[2] = &v245;
          void v244[3] = v208;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, unint64_t, uint64_t, void *, void *, void (**)(uint64_t), __n128 (**)(void *, uint64_t)))(*(void *)v37 + 176))(v37, v39, 2 * v38, (v40 >> 5) & 1, v42, v30, 2 * v225, v43, v243, v205, v206, v207);
          uint64_t v45 = v246[5];
          uint64_t v44 = v246[6];
          if (v208[184] >= (unsigned __int16)(-29127 * ((v44 - v45) >> 3))) {
            uint64_t v46 = (unsigned __int16)(-29127 * ((v44 - v45) >> 3));
          }
          else {
            uint64_t v46 = v208[184];
          }
          uint64_t v230 = v46;
          if (!v46) {
            goto LABEL_309;
          }
          int v235 = (void *)v246[6];
          if (v46 != 1)
          {
            unint64_t v47 = ~((unint64_t)(v46 - 2) >> 1);
            uint64_t v48 = (uint64_t *)(v45 + 72 * ((unint64_t)(v46 - 2) >> 1));
            do
            {
              sub_21623053C(v45, v230, v48);
              v48 -= 9;
              BOOL v198 = __CFADD__(v47++, 1);
            }
            while (!v198);
          }
          unint64_t v49 = (void *)(v45 + 72 * v230);
          uint64_t v50 = v235;
          if (v49 != v235)
          {
            int v239 = (void **)(v45 + 40);
            uint64_t v51 = (void **)(v45 + 16);
            uint64_t v52 = 72 * v230;
            do
            {
              uint64_t v53 = v45 + v52;
              unint64_t v54 = *(unsigned __int8 *)(v45 + v52 + 63);
              char v55 = v54;
              if ((v54 & 0x80u) != 0) {
                unint64_t v54 = *(void *)(v45 + v52 + 48);
              }
              unint64_t v56 = *(unsigned __int8 *)(v45 + 63);
              if ((v56 & 0x80u) != 0) {
                unint64_t v56 = *(void *)(v45 + 48);
              }
              if (v54 < v56)
              {
                __s1[0] = *(void **)v53;
                LOWORD(__s1[1]) = *(_WORD *)(v53 + 8);
                uint64_t v57 = *(void *)(v53 + 16);
                *(void *)std::string buf = *(void *)(v53 + 24);
                *(void *)&buf[7] = *(void *)(v53 + 31);
                char v58 = *(unsigned char *)(v53 + 39);
                *(void *)(v53 + 24) = 0;
                *(void *)(v53 + 32) = 0;
                *(void *)(v53 + 16) = 0;
                uint64_t v60 = (void **)(v53 + 40);
                uint64_t v59 = *(void *)(v53 + 40);
                uint64_t v61 = *(void *)(v45 + v52 + 48);
                *(void *)((char *)&v274 + 7) = *(void *)(v45 + v52 + 55);
                *(void *)&long long v274 = v61;
                *(void *)(v53 + 48) = 0;
                *(void *)(v53 + 56) = 0;
                *(void *)(v53 + 4sub_2161868BC(&a9, 0) = 0;
                int v62 = *(_DWORD *)(v53 + 64);
                unint64_t v63 = *(void **)v45;
                *(_WORD *)(v53 + 8) = *(_WORD *)(v45 + 8);
                *(void *)uint64_t v53 = v63;
                long long v64 = *(_OWORD *)v51;
                *(void *)(v53 + 32) = *(void *)(v45 + 32);
                *(_OWORD *)(v53 + 16) = v64;
                *(unsigned char *)(v45 + 39) = 0;
                *(unsigned char *)(v45 + 16) = 0;
                if (*(char *)(v53 + 63) < 0) {
                  operator delete(*v60);
                }
                long long v65 = *(_OWORD *)v239;
                *(void *)(v53 + 56) = *(void *)(v45 + 56);
                *(_OWORD *)uint64_t v60 = v65;
                *(unsigned char *)(v45 + 63) = 0;
                *(unsigned char *)(v45 + 4sub_2161868BC(&a9, 0) = 0;
                *(_DWORD *)(v53 + 64) = *(_DWORD *)(v45 + 64);
                *(void **)uint64_t v45 = __s1[0];
                *(_WORD *)(v45 + 8) = __s1[1];
                if (*(char *)(v45 + 39) < 0) {
                  operator delete(*v51);
                }
                *(void *)(v45 + 16) = v57;
                *(void *)(v45 + 24) = *(void *)buf;
                *(void *)(v45 + 31) = *(void *)&buf[7];
                *(unsigned char *)(v45 + 39) = v58;
                if (*(char *)(v45 + 63) < 0) {
                  operator delete(*v239);
                }
                *(void *)(v45 + 4sub_2161868BC(&a9, 0) = v59;
                *(void *)(v45 + 48) = v274;
                *(void *)(v45 + 55) = *(void *)((char *)&v274 + 7);
                *(unsigned char *)(v45 + 63) = v55;
                *(_DWORD *)(v45 + 64) = v62;
                sub_21623053C(v45, v230, (uint64_t *)v45);
                uint64_t v50 = v235;
              }
              v52 += 72;
            }
            while ((void *)(v45 + v52) != v50);
          }
          if (v230 > 1)
          {
            uint64_t v66 = v230;
            do
            {
              uint64_t v67 = 0;
              long long v68 = v49;
              *(void *)std::string buf = *(void *)v45;
              *(_WORD *)&uint8_t buf[8] = *(_WORD *)(v45 + 8);
              uint64_t v69 = *(void *)(v45 + 16);
              *(void *)&long long v273 = *(void *)(v45 + 24);
              *(void *)((char *)&v273 + 7) = *(void *)(v45 + 31);
              char v232 = *(unsigned char *)(v45 + 39);
              *(void *)(v45 + 24) = 0;
              *(void *)(v45 + 32) = 0;
              *(void *)(v45 + 16) = 0;
              uint64_t v236 = *(void *)(v45 + 40);
              long long v70 = *(void **)(v45 + 48);
              *(void **)((char *)v268 + 7) = *(void **)(v45 + 55);
              v268[0] = v70;
              char v240 = *(unsigned char *)(v45 + 63);
              *(void *)(v45 + 4sub_2161868BC(&a9, 0) = 0;
              *(void *)(v45 + 48) = 0;
              *(void *)(v45 + 56) = 0;
              uint64_t v71 = v45;
              int v72 = *(_DWORD *)(v45 + 64);
              do
              {
                uint64_t v73 = v67 + 1;
                uint64_t v74 = v71 + 72 * (v67 + 1);
                uint64_t v75 = 2 * v67;
                uint64_t v67 = (2 * v67) | 1;
                uint64_t v76 = v75 + 2;
                if (v75 + 2 < v66)
                {
                  unint64_t v77 = *(void *)(v71 + 72 * v73 + 48);
                  if (*(char *)(v74 + 63) >= 0) {
                    unint64_t v77 = *(unsigned __int8 *)(v74 + 63);
                  }
                  unint64_t v78 = *(unsigned __int8 *)(v74 + 135);
                  if ((v78 & 0x80u) != 0) {
                    unint64_t v78 = *(void *)(v74 + 120);
                  }
                  v74 += 72 * (v77 < v78);
                  if (v77 < v78) {
                    uint64_t v67 = v76;
                  }
                }
                uint64_t v79 = *(void **)v74;
                *(_WORD *)(v71 + 8) = *(_WORD *)(v74 + 8);
                *(void *)uint64_t v71 = v79;
                long long v80 = (void **)(v71 + 16);
                if (*(char *)(v71 + 39) < 0) {
                  operator delete(*v80);
                }
                uint64_t v81 = (void **)(v74 + 16);
                long long v82 = *(_OWORD *)(v74 + 16);
                *(void *)(v71 + 32) = *(void *)(v74 + 32);
                *(_OWORD *)long long v80 = v82;
                *(unsigned char *)(v74 + 39) = 0;
                *(unsigned char *)(v74 + 16) = 0;
                int v83 = (void **)(v71 + 40);
                if (*(char *)(v71 + 63) < 0) {
                  operator delete(*v83);
                }
                long long v84 = *(_OWORD *)(v74 + 40);
                *(void *)(v71 + 56) = *(void *)(v74 + 56);
                *(_OWORD *)int v83 = v84;
                *(unsigned char *)(v74 + 63) = 0;
                *(unsigned char *)(v74 + 4sub_2161868BC(&a9, 0) = 0;
                *(_DWORD *)(v71 + 64) = *(_DWORD *)(v74 + 64);
                uint64_t v71 = v74;
              }
              while (v67 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
              int64_t v85 = (void **)(v74 + 40);
              v49 -= 9;
              if ((void *)v74 == v68 - 9)
              {
                uint64_t v106 = *(void *)buf;
                *(_WORD *)(v74 + 8) = *(_WORD *)&buf[8];
                *(void *)uint64_t v74 = v106;
                if (*(char *)(v74 + 39) < 0) {
                  operator delete(*v81);
                }
                *(void *)(v74 + 16) = v69;
                uint64_t v107 = v273;
                *(void *)(v74 + 31) = *(void *)((char *)&v273 + 7);
                *(void *)(v74 + 24) = v107;
                *(unsigned char *)(v74 + 39) = v232;
                if (*(char *)(v74 + 63) < 0) {
                  operator delete(*v85);
                }
                *(void *)(v74 + 4sub_2161868BC(&a9, 0) = v236;
                int v108 = v268[0];
                *(void **)(v74 + 55) = *(void **)((char *)v268 + 7);
                *(void *)(v74 + 48) = v108;
                *(unsigned char *)(v74 + 63) = v240;
                *(_DWORD *)(v74 + 64) = v72;
              }
              else
              {
                uint64_t v86 = *v49;
                *(_WORD *)(v74 + 8) = *((_WORD *)v68 - 32);
                *(void *)uint64_t v74 = v86;
                if (*(char *)(v74 + 39) < 0) {
                  operator delete(*v81);
                }
                long long v87 = *(_OWORD *)(v68 - 7);
                *(void *)(v74 + 32) = *(v68 - 5);
                *(_OWORD *)uint64_t v81 = v87;
                *((unsigned char *)v68 - 33) = 0;
                *((unsigned char *)v68 - 56) = 0;
                if (*(char *)(v74 + 63) < 0) {
                  operator delete(*v85);
                }
                long long v88 = *((_OWORD *)v68 - 2);
                *(void *)(v74 + 56) = *(v68 - 2);
                *(_OWORD *)int64_t v85 = v88;
                *((unsigned char *)v68 - 9) = 0;
                *((unsigned char *)v68 - 32) = 0;
                *(_DWORD *)(v74 + 64) = *((_DWORD *)v68 - 2);
                void *v49 = *(void *)buf;
                *((_WORD *)v68 - 32) = *(_WORD *)&buf[8];
                if (*((char *)v68 - 33) < 0) {
                  operator delete((void *)*(v68 - 7));
                }
                *(v68 - 7) = v69;
                *(v68 - 6) = v273;
                *(void *)((char *)v68 - 41) = *(void *)((char *)&v273 + 7);
                *((unsigned char *)v68 - 33) = v232;
                if (*((char *)v68 - 9) < 0) {
                  operator delete((void *)*(v68 - 4));
                }
                *(v68 - 4) = v236;
                *(v68 - 3) = v268[0];
                *(void *)((char *)v68 - 17) = *(void **)((char *)v268 + 7);
                *((unsigned char *)v68 - 9) = v240;
                *((_DWORD *)v68 - 2) = v72;
                uint64_t v89 = v74 + 72 - v45;
                if (v89 >= 73)
                {
                  unint64_t v90 = (v89 / 0x48uLL - 2) >> 1;
                  unint64_t v91 = v45 + 72 * v90;
                  unint64_t v92 = *(unsigned __int8 *)(v91 + 63);
                  if ((v92 & 0x80u) != 0) {
                    unint64_t v92 = *(void *)(v91 + 48);
                  }
                  uint64_t v93 = *(void *)(v74 + 48);
                  if (*(char *)(v74 + 63) >= 0) {
                    unint64_t v94 = *(unsigned __int8 *)(v74 + 63);
                  }
                  else {
                    unint64_t v94 = *(void *)(v74 + 48);
                  }
                  if (v92 < v94)
                  {
                    char v241 = *(unsigned char *)(v74 + 63);
                    uint64_t v95 = *(void **)v74;
                    LOWORD(__s1[1]) = *(_WORD *)(v74 + 8);
                    __s1[0] = v95;
                    uint64_t v233 = *(void *)(v74 + 16);
                    uint64_t v96 = *(void *)(v74 + 24);
                    *(void *)((char *)&v274 + 7) = *(void *)(v74 + 31);
                    *(void *)&long long v274 = v96;
                    char v220 = *(unsigned char *)(v74 + 39);
                    void *v81 = 0;
                    *(void *)(v74 + 24) = 0;
                    *(void *)(v74 + 32) = 0;
                    char v237 = *(unsigned char *)(v74 + 40);
                    LODWORD(v96) = *(_DWORD *)(v74 + 41);
                    *(_DWORD *)((char *)&v259 + 3) = *(_DWORD *)(v74 + 44);
                    LODWORD(v259) = v96;
                    LODWORD(v96) = *(_DWORD *)(v74 + 59);
                    LODWORD(v256) = *(_DWORD *)(v74 + 56);
                    *(_DWORD *)((char *)&v256 + 3) = v96;
                    *(void *)(v74 + 48) = 0;
                    *(void *)(v74 + 56) = 0;
                    unint64_t *v85 = 0;
                    int v97 = *(_DWORD *)(v74 + 64);
                    do
                    {
                      unint64_t v98 = v91;
                      uint64_t v99 = *(void *)v91;
                      *(_WORD *)(v74 + 8) = *(_WORD *)(v98 + 8);
                      *(void *)uint64_t v74 = v99;
                      int v100 = (void **)(v74 + 16);
                      if (*(char *)(v74 + 39) < 0) {
                        operator delete(*v100);
                      }
                      long long v101 = *(_OWORD *)(v98 + 16);
                      *(void *)(v74 + 32) = *(void *)(v98 + 32);
                      *(_OWORD *)int v100 = v101;
                      *(unsigned char *)(v98 + 39) = 0;
                      *(unsigned char *)(v98 + 16) = 0;
                      uint64_t v102 = (void **)(v74 + 40);
                      if (*(char *)(v74 + 63) < 0) {
                        operator delete(*v102);
                      }
                      long long v103 = *(_OWORD *)(v98 + 40);
                      *(void *)(v74 + 56) = *(void *)(v98 + 56);
                      *(_OWORD *)uint64_t v102 = v103;
                      *(unsigned char *)(v98 + 63) = 0;
                      *(unsigned char *)(v98 + 4sub_2161868BC(&a9, 0) = 0;
                      *(_DWORD *)(v74 + 64) = *(_DWORD *)(v98 + 64);
                      if (!v90) {
                        break;
                      }
                      unint64_t v90 = (v90 - 1) >> 1;
                      unint64_t v91 = v45 + 72 * v90;
                      unint64_t v104 = *(unsigned __int8 *)(v91 + 63);
                      if ((v104 & 0x80u) != 0) {
                        unint64_t v104 = *(void *)(v91 + 48);
                      }
                      uint64_t v74 = v98;
                    }
                    while (v104 < v94);
                    *(void **)unint64_t v98 = __s1[0];
                    *(_WORD *)(v98 + 8) = __s1[1];
                    if (*(char *)(v98 + 39) < 0) {
                      operator delete(*(void **)(v98 + 16));
                    }
                    uint64_t v105 = v274;
                    *(void *)(v98 + 16) = v233;
                    *(void *)(v98 + 24) = v105;
                    *(void *)(v98 + 31) = *(void *)((char *)&v274 + 7);
                    *(unsigned char *)(v98 + 39) = v220;
                    if (*(char *)(v98 + 63) < 0) {
                      operator delete(*(void **)(v98 + 40));
                    }
                    *(unsigned char *)(v98 + 4sub_2161868BC(&a9, 0) = v237;
                    *(_DWORD *)(v98 + 41) = v259;
                    *(_DWORD *)(v98 + 44) = *(_DWORD *)((char *)&v259 + 3);
                    *(void *)(v98 + 48) = v93;
                    *(_DWORD *)(v98 + 56) = v256;
                    *(_DWORD *)(v98 + 59) = *(_DWORD *)((char *)&v256 + 3);
                    *(unsigned char *)(v98 + 63) = v241;
                    *(_DWORD *)(v98 + 64) = v97;
                  }
                }
              }
              BOOL v14 = v66-- <= 2;
            }
            while (!v14);
          }
          uint64_t v109 = 0;
          uint64_t v110 = v219;
LABEL_115:
          uint64_t v111 = v246[5];
          int v112 = (_WORD *)(v111 + 72 * v109);
          sub_216230084((char **)v253, v112 + 20);
          sub_216230084((char **)__p, v112 + 8);
          v228 = sub_2161A2A80();
          sub_2162301F0((uint64_t *)&v274, (void *)v112 + 5);
          sub_2162301F0((uint64_t *)&v273, (void *)v112 + 2);
          uint64_t v242 = v109;
          int v113 = (const void **)v273;
          if (*((void *)&v274 + 1) - (void)v274 != *((void *)&v273 + 1) - (void)v273)
          {
            int v125 = 0;
LABEL_143:
            uint64_t v126 = v242;
            goto LABEL_144;
          }
          int v221 = v112;
          uint64_t v222 = v111;
          if (*((void *)&v274 + 1) == (void)v274)
          {
            uint64_t v115 = 0;
            unint64_t v119 = v225;
            goto LABEL_166;
          }
          unint64_t v114 = 0;
          if ((unint64_t)((*((void *)&v274 + 1) - (void)v274) / 24) <= 1) {
            uint64_t v115 = 1;
          }
          else {
            uint64_t v115 = (*((void *)&v274 + 1) - (void)v274) / 24;
          }
          long long v116 = (char *)(v274 + 23);
          unint64_t v117 = v217;
          int v118 = v218;
          unint64_t v119 = v225;
          do
          {
            if (!v119)
            {
              uint64_t v110 = v219;
              goto LABEL_169;
            }
            if (*v116 < 0) {
              unint64_t v120 = *(void *)(v116 - 15);
            }
            else {
              unint64_t v120 = *v116;
            }
            if (v119 < v120
              || (*((char *)v113 + 23) < 0
                ? (const void *)(v122 = *v113, unint64_t v121 = (unint64_t)v113[1])
                : (unint64_t v121 = *((unsigned __int8 *)v113 + 23), v122 = v113),
                  v122 ? (unint64_t v123 = v121) : (unint64_t v123 = 0),
                  (unint64_t v124 = v117 - v123, v117 < v123) || !v118 && v123 || memcmp(v118, v122, 2 * v123)))
            {
              int v125 = 0;
              uint64_t v110 = v219;
              goto LABEL_143;
            }
            v119 -= v120;
            BOOL v36 = v118 == 0;
            v118 += 2 * v123;
            if (v36) {
              unint64_t v117 = 0;
            }
            else {
              unint64_t v117 = v124;
            }
            ++v114;
            v113 += 3;
            v116 += 24;
          }
          while (v115 != v114);
          uint64_t v110 = v219;
LABEL_166:
          unint64_t v114 = v115;
          uint64_t v126 = v242;
          if (v119)
          {
            int v125 = 0;
            goto LABEL_144;
          }
LABEL_169:
          *(_OWORD *)std::string buf = 0u;
          long long v271 = 0u;
          int v272 = 1065353216;
          unint64_t v262 = 0;
          unint64_t v136 = v226;
          sub_216183E18(a3, &v262, (uint64_t)buf, (*(_DWORD *)v226[2] >> 30) & 1, v268);
          if (v269 < 0) {
            operator delete(v268[0]);
          }
          if ((*(unsigned char *)v226[2] & 0x20) == 0 || *v228)
          {
            BOOL v137 = 0;
            goto LABEL_174;
          }
          *(_OWORD *)__s1 = *(_OWORD *)a4;
          uint64_t v180 = v274;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v274 + 1) - v274) >> 3) <= v114)
          {
            int v191 = 2;
            goto LABEL_305;
          }
          int v181 = (char *)__s1[1];
          uint64_t v182 = 24 * v114;
          unint64_t v183 = v114;
          while (1)
          {
            uint64_t v184 = v180 + v182;
            if (*(char *)(v180 + v182 + 23) >= 0) {
              int v185 = (void *)(v180 + v182);
            }
            else {
              int v185 = *(void **)v184;
            }
            v259 = v185;
            unint64_t v186 = *(unsigned __int8 *)(v184 + 23);
            if ((v186 & 0x80u) != 0) {
              unint64_t v186 = *(void *)(v184 + 8);
            }
            v260 = (void *)v186;
            if ((unint64_t)v181 < v186
              || (v186 ? (BOOL v187 = __s1[0] == 0) : (BOOL v187 = 0), v187 || memcmp(__s1[0], v185, 2 * v186)))
            {
              if (!sub_216184E04((uint64_t)__s1, (uint64_t)&v259))
              {
                int v191 = 1;
LABEL_304:
                uint64_t v110 = v219;
LABEL_305:
                BOOL v137 = v191 != 2;
LABEL_174:
                uint64_t v138 = *(void *)(a4 + 8);
                unint64_t v139 = v262;
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DB88, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_26797DB88))
                {
                  qword_26797DB80 = (uint64_t)sub_2161A2A80();
                  __cxa_guard_release(&qword_26797DB88);
                  uint64_t v110 = v219;
                  unint64_t v136 = v226;
                }
                uint64_t v140 = 0;
                if (v114)
                {
                  int v141 = (char *)(v274 + 23);
                  unint64_t v142 = v114;
                  do
                  {
                    if (*v141 < 0) {
                      uint64_t v143 = *(void *)(v141 - 15);
                    }
                    else {
                      uint64_t v143 = *v141;
                    }
                    v140 += v143;
                    v141 += 24;
                    --v142;
                  }
                  while (v142);
                }
                unint64_t v144 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v274 + 1) - v274) >> 3);
                unint64_t v145 = 0;
                unint64_t v146 = v144 - v114;
                if (v144 > v114)
                {
                  int v147 = (char *)(v274 + 24 * v114 + 23);
                  do
                  {
                    if (*v147 < 0) {
                      uint64_t v148 = *(void *)(v147 - 15);
                    }
                    else {
                      uint64_t v148 = *v147;
                    }
                    v145 += v148;
                    v147 += 24;
                    --v146;
                  }
                  while (v146);
                }
                unint64_t v149 = v138 - v139;
                if (v137 && v149 < (unint64_t)(float)(*(float *)(qword_26797DB80 + 400) * (float)v145))
                {
                  int v125 = 0;
                  uint64_t v126 = v242;
                }
                else
                {
                  uint64_t v126 = v242;
                  if (v149 + v225 >= (unint64_t)(float)(*(float *)(qword_26797DB80 + 392) * (float)(v145 + v140)))
                  {
                    BOOL v216 = v137;
                    __s1[0] = (void *)v136[4];
                    HIWORD(v15sub_2161868BC(&a9, 0) = 0;
                    *(_OWORD *)&__s1[1] = 0u;
                    long long v264 = 0u;
                    long long v265 = 0u;
                    long long v266 = 0u;
                    long long v267 = 0u;
                    int v151 = v144 - v114;
                    if ((int)v144 <= (int)v114)
                    {
                      unsigned int v165 = 0;
                      unsigned __int16 v178 = 0;
                      uint64_t v238 = 0;
                    }
                    else
                    {
                      unsigned __int16 v152 = 0;
                      unint64_t v153 = 0;
                      unint64_t v154 = 0;
                      v224 = (_WORD *)(v222 + 72 * v242 + 4);
                      uint64_t v234 = (int)v144 - 1 - (uint64_t)(int)v114;
                      uint64_t v238 = 0;
                      uint64_t v155 = 24 * (int)v114;
                      do
                      {
                        uint64_t v156 = v274;
                        uint64_t v157 = v274 + v155;
                        uint64_t v158 = v273;
                        uint64_t v159 = v238;
                        if (v154 > *(void *)(a4 + 8)) {
                          uint64_t v159 = v238 + 1;
                        }
                        uint64_t v238 = v159;
                        if (v153 >= a3[1])
                        {
                          uint64_t v231 = 0;
                        }
                        else
                        {
                          if (*(char *)(v157 + 23) < 0) {
                            uint64_t v160 = *(void *)(v274 + v155 + 8);
                          }
                          else {
                            uint64_t v160 = *(unsigned __int8 *)(v157 + 23);
                          }
                          v259 = (void *)(v160 + v154);
                          int v161 = sub_21619C5BC(buf, (unint64_t *)&v259);
                          if (v161)
                          {
                            uint64_t v162 = v161[3] - v153;
                          }
                          else
                          {
                            if (*(char *)(v157 + 23) < 0) {
                              uint64_t v163 = *(void *)(v156 + v155 + 8);
                            }
                            else {
                              uint64_t v163 = *(unsigned __int8 *)(v157 + 23);
                            }
                            if (a3[1] - v153 >= 2 * v163) {
                              uint64_t v162 = 2 * v163;
                            }
                            else {
                              uint64_t v162 = a3[1] - v153;
                            }
                          }
                          uint64_t v231 = v162;
                        }
                        uint64_t v164 = (_WORD *)(v158 + v155);
                        v259 = 0;
                        v260 = 0;
                        uint64_t v261 = 0;
                        v256 = 0;
                        int v257 = 0;
                        uint64_t v258 = 0;
                        BOOL v198 = v234-- != 0;
                        if (v198 || (unsigned int v165 = (unsigned __int16)*v224, !*v224))
                        {
                          unint64_t v166 = (uint64_t *)(v156 + v155);
                          if (*(char *)(v156 + v155 + 23) < 0)
                          {
                            uint64_t v168 = *v166;
                            uint64_t v167 = v166[1];
                          }
                          else
                          {
                            uint64_t v167 = *(unsigned __int8 *)(v156 + v155 + 23);
                            uint64_t v168 = v156 + v155;
                          }
                          uint64_t v169 = v226[3];
                          if (!v168) {
                            uint64_t v167 = 0;
                          }
                          v255[0] = v168;
                          v255[1] = v167;
                          uint64_t v170 = (uint64_t *)(v158 + v155);
                          if (*(char *)(v158 + v155 + 23) < 0)
                          {
                            uint64_t v172 = *v170;
                            uint64_t v171 = v170[1];
                          }
                          else
                          {
                            uint64_t v171 = *(unsigned __int8 *)(v158 + v155 + 23);
                            uint64_t v172 = v158 + v155;
                          }
                          if (!v172) {
                            uint64_t v171 = 0;
                          }
                          v254[0] = v172;
                          v254[1] = v171;
                          (*(void (**)(uint64_t, void *, void *, void, void **, void **))(*(void *)v169 + 40))(v169, v255, v254, v152, &v259, &v256);
                          if (v259 == v260) {
                            unsigned int v165 = 0;
                          }
                          else {
                            unsigned int v165 = *(unsigned __int16 *)v259;
                          }
                        }
                        uint64_t v173 = v158 + v155;
                        if (*(char *)(v158 + v155 + 23) < 0)
                        {
                          uint64_t v164 = *(_WORD **)v173;
                          uint64_t v174 = *(void *)(v173 + 8);
                        }
                        else
                        {
                          uint64_t v174 = *(unsigned __int8 *)(v158 + v155 + 23);
                        }
                        int v175 = (uint64_t *)(v156 + v155);
                        if (*(char *)(v156 + v155 + 23) < 0)
                        {
                          uint64_t v157 = *v175;
                          uint64_t v176 = v175[1];
                        }
                        else
                        {
                          uint64_t v176 = *(unsigned __int8 *)(v156 + v155 + 23);
                        }
                        sub_2161DEB04(__s1, v164, v174, v231, (_WORD *)v157, v176, v165, v165);
                        if (*((char *)v175 + 23) < 0) {
                          uint64_t v177 = *(void *)(v156 + v155 + 8);
                        }
                        else {
                          uint64_t v177 = *((unsigned __int8 *)v175 + 23);
                        }
                        if (v256)
                        {
                          int v257 = v256;
                          operator delete(v256);
                        }
                        if (v259)
                        {
                          v260 = v259;
                          operator delete(v259);
                        }
                        v154 += v177;
                        v153 += v231;
                        v155 += 24;
                        unsigned __int16 v178 = v152;
                        unsigned __int16 v152 = v165;
                        --v151;
                      }
                      while (v151);
                    }
                    uint64_t v110 = v219;
                    if (a3[1])
                    {
                      sub_2161C04AC(0);
                      if (v238 == 2)
                      {
                        int v195 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * v178 + 4]);
                        if (v195[1] == 4)
                        {
                          uint64_t v196 = 0;
                          uint64_t v197 = *v195;
                          while (asc_2163C8FD0[v196] == *(_WORD *)(v197 + v196 * 2))
                          {
                            if (++v196 == 4)
                            {
                              BOOL v198 = WORD4(xmmword_26797EF70) <= v165 && WORD5(xmmword_26797EF70) >= v165;
                              if (v198)
                              {
LABEL_306:
                                int v125 = 0;
                                uint64_t v126 = v242;
                                goto LABEL_294;
                              }
                              int v199 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * v165]);
                              if (v199[1] == 3)
                              {
                                uint64_t v200 = 0;
                                uint64_t v201 = *v199;
                                while (asc_2163C999C[v200] == *(_WORD *)(v201 + v200 * 2))
                                {
                                  int v125 = 0;
                                  ++v200;
                                  uint64_t v126 = v242;
                                  if (v200 == 3) {
                                    goto LABEL_294;
                                  }
                                }
                              }
                              break;
                            }
                          }
                        }
                      }
                      else if (v238 == 1)
                      {
                        v192 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * v165 + 4]);
                        if (v192[1] == 4)
                        {
                          uint64_t v193 = 0;
                          uint64_t v194 = *v192;
                          while (asc_2163C8FD0[v193] == *(_WORD *)(v194 + v193 * 2))
                          {
                            if (++v193 == 4) {
                              goto LABEL_306;
                            }
                          }
                        }
                      }
                    }
                    LOWORD(v15sub_2161868BC(&a9, 0) = *v221;
                    log2f((float)v150 / 100.0);
                    uint64_t v126 = v242;
                    uint64_t v202 = sub_2161DECC4(__s1);
                    int v125 = (void *)v202;
                    if (v202) {
                      (*(void (**)(uint64_t, BOOL))(*(void *)v202 + 512))(v202, v216);
                    }
LABEL_294:
                    if (*((void *)&v267 + 1)) {
                      CFRelease(*((CFTypeRef *)&v267 + 1));
                    }
                    *((void *)&v267 + 1) = 0;
                    if ((void)v266)
                    {
                      *((void *)&v266 + 1) = v266;
                      operator delete((void *)v266);
                    }
                    if (*((void *)&v264 + 1))
                    {
                      *(void *)&long long v265 = *((void *)&v264 + 1);
                      operator delete(*((void **)&v264 + 1));
                    }
                    if (__s1[1])
                    {
                      __s1[2] = __s1[1];
                      operator delete(__s1[1]);
                    }
                  }
                  else
                  {
                    int v125 = 0;
                  }
                }
                sub_216144C28((uint64_t)buf);
LABEL_144:
                __s1[0] = &v273;
                sub_21613EFD0((void ***)__s1);
                __s1[0] = &v274;
                sub_21613EFD0((void ***)__s1);
                int v251 = v125;
                if (v125)
                {
                  (*(void (**)(void *, uint64_t, const char *, uint64_t))(*(void *)v125 + 528))(v125, 10, "Adding a phrase candidate", 1);
                  LOBYTE(v274) = 0;
                  __s1[0] = v125;
                  int v127 = sub_2161DE698(v223, __s1);
                  if (v127)
                  {
                    uint64_t v128 = v127[3];
                    if (v128 != (uint64_t *)-1)
                    {
                      uint64_t v129 = *(void *)(v110[6] + 8 * (void)v128);
                      if (!(*(unsigned int (**)(uint64_t))(*(void *)v129 + 408))(v129)
                        && ((*(uint64_t (**)(uint64_t))(*(void *)v129 + 200))(v129) & 1) == 0)
                      {
                        int v179 = sub_2162D1CE4(0xAu);
                        if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
                        {
                          LOWORD(__s1[0]) = 0;
                          _os_log_debug_impl(&dword_2160F5000, v179, OS_LOG_TYPE_DEBUG, " ∟ Rejected", (uint8_t *)__s1, 2u);
                        }
                        int v251 = 0;
                        goto LABEL_158;
                      }
                    }
                  }
                  __s1[0] = &unk_26C6B5430;
                  *(void *)&long long v264 = __s1;
                  char v130 = sub_216215760(v110, &v251, 0, &v274, (uint64_t)__s1);
                  sub_21618B96C(__s1);
                  if ((_BYTE)v274) {
                    char v131 = v130;
                  }
                  else {
                    char v131 = 1;
                  }
                  if (v131)
                  {
                    if ((v130 & 1) == 0)
                    {
                      uint64_t v132 = sub_2162D1CE4(0xAu);
                      if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)std::string buf = 0;
                        int v133 = v132;
                        unint64_t v134 = " ∟ Rejected";
                        goto LABEL_277;
                      }
                    }
                  }
                  else
                  {
                    int v135 = sub_2162D1CE4(0xAu);
                    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)std::string buf = 0;
                      int v133 = v135;
                      unint64_t v134 = " ∟ Replaced";
LABEL_277:
                      _os_log_debug_impl(&dword_2160F5000, v133, OS_LOG_TYPE_DEBUG, v134, buf, 2u);
                    }
                  }
                  int v125 = v251;
                  int v251 = 0;
                  if (v125) {
LABEL_158:
                  }
                    (*(void (**)(void *))(*(void *)v125 + 16))(v125);
                }
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                if (v253[0])
                {
                  v253[1] = v253[0];
                  operator delete(v253[0]);
                }
                uint64_t v109 = v126 + 1;
                if (v109 == v230)
                {
LABEL_309:
                  _Block_object_dispose(&v245, 8);
                  __s1[0] = v250;
                  sub_216230350((void ***)__s1);
                  a1 = v226;
                  LOWORD(v203) = v214;
                  goto LABEL_310;
                }
                goto LABEL_115;
              }
              int v181 = (char *)__s1[1];
            }
            if (*(char *)(v184 + 23) < 0) {
              unint64_t v188 = *(void *)(v184 + 8);
            }
            else {
              unint64_t v188 = *(unsigned __int8 *)(v184 + 23);
            }
            if ((unint64_t)v181 > v188)
            {
              int v189 = &v181[-v188];
              v190 = (char *)__s1[0] + 2 * v188;
              int v181 = __s1[0] ? v189 : 0;
              __s1[0] = v190;
              __s1[1] = v181;
              ++v183;
              uint64_t v180 = v274;
              v182 += 24;
              if (v183 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v274 + 1) - v274) >> 3)) {
                continue;
              }
            }
            int v191 = 2;
            goto LABEL_304;
          }
        }
        if (v245)
        {
          v246 = v245;
          operator delete(v245);
          v204 = __s1[0];
        }
        a1 = v226;
        if (v204)
        {
          __s1[1] = v204;
          operator delete(v204);
        }
LABEL_310:
        unint64_t v25 = v215 + 1;
        unsigned __int16 v26 = v203;
        unint64_t v24 = v209;
        if (v215 + 1 > v209) {
          return;
        }
      }
      __int16 v214 = 0;
      goto LABEL_33;
    }
  }
}

void sub_21622FC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,void *a59,uint64_t a60)
{
  __cxa_guard_abort(&qword_26797DB88);
  int v62 = (void ***)sub_216144C28(v60 - 224);
  *(void *)(v60 - 224) = v60 - 184;
  sub_21613EFD0(v62);
  *(void *)(v60 - 224) = v60 - 160;
  sub_21613EFD0((void ***)(v60 - 224));
  if (__p)
  {
    a57 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  _Block_object_dispose(&a47, 8);
  *(void *)(v60 - 224) = a21;
  sub_216230350((void ***)(v60 - 224));
  _Unwind_Resume(a1);
}

__n128 sub_21622FE14(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_2161868BC(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_21622FE38(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_216230350(&v1);
}

uint64_t sub_21622FE64(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  unint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8);
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  if (v7 >= v8)
  {
    uint64_t v11 = v6[5];
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - v11) >> 3);
    if (v12 + 1 > 0x38E38E38E38E38ELL) {
      sub_21610CB04();
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v11) >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v12 + 1) {
      uint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v14;
    }
    unint64_t v29 = v6 + 7;
    if (v15)
    {
      if (v15 > 0x38E38E38E38E38ELL) {
        sub_2160FFA74();
      }
      uint64_t v16 = (char *)operator new(72 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unsigned __int16 v26 = v16;
    v27.i64[0] = (uint64_t)&v16[72 * v12];
    v27.i64[1] = v27.i64[0];
    uint64_t v28 = &v16[72 * v15];
    sub_21623042C(v27.i64[0], a2);
    uint64_t v17 = v27.i64[0];
    uint64_t v10 = v27.i64[0] + 72;
    uint64_t v19 = v6[5];
    unint64_t v18 = v6[6];
    if (v18 == v19)
    {
      int64x2_t v24 = vdupq_n_s64(v18);
    }
    else
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 72);
        v18 -= 72;
        __int16 v21 = *(_WORD *)(v18 + 8);
        *(void *)(v17 - 72) = v20;
        v17 -= 72;
        *(_WORD *)(v17 + 8) = v21;
        long long v22 = *(_OWORD *)(v18 + 16);
        *(void *)(v17 + 32) = *(void *)(v18 + 32);
        *(_OWORD *)(v17 + 16) = v22;
        *(void *)(v18 + 24) = 0;
        *(void *)(v18 + 32) = 0;
        *(void *)(v18 + 16) = 0;
        long long v23 = *(_OWORD *)(v18 + 40);
        *(void *)(v17 + 56) = *(void *)(v18 + 56);
        *(_OWORD *)(v17 + 4sub_2161868BC(&a9, 0) = v23;
        *(void *)(v18 + 48) = 0;
        *(void *)(v18 + 56) = 0;
        *(void *)(v18 + 4sub_2161868BC(&a9, 0) = 0;
        *(_DWORD *)(v17 + 64) = *(_DWORD *)(v18 + 64);
      }
      while (v18 != v19);
      int64x2_t v24 = *(int64x2_t *)(v6 + 5);
    }
    void v6[5] = v17;
    v6[6] = v10;
    int64x2_t v27 = v24;
    unint64_t v25 = (char *)v6[7];
    _OWORD v6[7] = v28;
    uint64_t v28 = v25;
    unsigned __int16 v26 = (char *)v24.i64[0];
    uint64_t result = sub_2162304EC((uint64_t)&v26);
  }
  else
  {
    uint64_t result = sub_21623042C(v6[6], a2);
    uint64_t v10 = v7 + 72;
    v6[6] = v7 + 72;
  }
  v6[6] = v10;
  if (0x8E38E38E38E38E39
     * ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48)
                - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) >> 3) == *(unsigned __int16 *)(*(void *)(a1 + 40) + 352))
    *a3 = 1;
  return result;
}

void sub_216230064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162304EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216230084(char **a1, unsigned __int16 *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v2 = *((char *)a2 + 23);
  unint64_t v3 = *((void *)a2 + 1);
  if (v2 >= 0) {
    unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  if (v3 >= 2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = v3 >> 1;
    if (v2 >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = *(unsigned __int16 **)a2;
    }
    unint64_t v9 = a1 + 2;
    do
    {
      int v10 = *v8;
      if (v10 != 124)
      {
        if ((unint64_t)v5 >= *v9)
        {
          unint64_t v12 = *a1;
          uint64_t v13 = v5 - *a1;
          if (v13 <= -3) {
            sub_21610CB04();
          }
          uint64_t v14 = v13 >> 1;
          unint64_t v15 = *v9 - (void)v12;
          if (v15 <= (v13 >> 1) + 1) {
            uint64_t v16 = v14 + 1;
          }
          else {
            uint64_t v16 = *v9 - (void)v12;
          }
          if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v18 = (char *)sub_21610FD44((uint64_t)v9, v17);
            unint64_t v12 = *a1;
            uint64_t v5 = a1[1];
          }
          else
          {
            unint64_t v18 = 0;
          }
          uint64_t v19 = &v18[2 * v14];
          *(_WORD *)uint64_t v19 = v10;
          uint64_t v11 = v19 + 2;
          while (v5 != v12)
          {
            __int16 v20 = *((_WORD *)v5 - 1);
            v5 -= 2;
            *((_WORD *)v19 - 1) = v20;
            v19 -= 2;
          }
          *a1 = v19;
          a1[1] = v11;
          a1[2] = &v18[2 * v17];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(_WORD *)uint64_t v5 = v10;
          uint64_t v11 = v5 + 2;
        }
        a1[1] = v11;
        uint64_t v5 = v11;
      }
      ++v8;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_2162301D0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162301F0(uint64_t *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  unint64_t v4 = a2[1];
  if ((v3 & 0x80u) != 0)
  {
    a2 = (void *)*a2;
    unint64_t v3 = v4;
  }
  uint64_t v13 = a2;
  if (v3 <= 1)
  {
    uint64_t v12 = 0;
LABEL_17:
    uint64_t result = sub_216230878(a1, &v13, (unint64_t *)&v12);
    goto LABEL_18;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = v3 >> 1;
  uint64_t v8 = (v3 >> 1) - 1;
  unint64_t v9 = (char *)a2;
  do
  {
    if (v6 && *(_WORD *)v9 == 124)
    {
      if (v8 == v6) {
        goto LABEL_14;
      }
      uint64_t v12 = (v9 - (char *)a2) >> 1;
      if ((unint64_t)v5 >= a1[2])
      {
        uint64_t v5 = (void *)sub_216230878(a1, &v13, (unint64_t *)&v12);
      }
      else
      {
        sub_21617FAAC(v5, a2, (v9 - (char *)a2) >> 1);
        v5 += 3;
        a1[1] = (uint64_t)v5;
      }
      a1[1] = (uint64_t)v5;
      a2 = v9 + 2;
      uint64_t v13 = v9 + 2;
    }
    v9 += 2;
LABEL_14:
    ++v6;
  }
  while (v7 != v6);
  unint64_t v10 = a1[2];
  uint64_t v12 = (v9 - (char *)a2) >> 1;
  if ((unint64_t)v5 >= v10) {
    goto LABEL_17;
  }
  sub_21617FAAC(v5, a2, (v9 - (char *)a2) >> 1);
  uint64_t result = (uint64_t)(v5 + 3);
  a1[1] = (uint64_t)(v5 + 3);
LABEL_18:
  a1[1] = result;
  return result;
}

void sub_216230324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_21613EFD0(&a10);
  _Unwind_Resume(a1);
}

void sub_216230350(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_2162303D4(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2162303D4(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0)
  {
    int v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

uint64_t sub_21623042C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(void *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_21610A674((unsigned char *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  uint64_t v6 = (unsigned char *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    sub_21610A674(v6, (void *)a2[5], a2[6]);
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 5);
    *(void *)(a1 + 56) = a2[7];
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  return a1;
}

void sub_2162304D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162304EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    sub_2162303D4(i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21623053C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0x8E38E38E38E38E39 * (((uint64_t)a3 - a1) >> 3)))
    {
      uint64_t v8 = (0x1C71C71C71C71C72 * (((uint64_t)a3 - a1) >> 3)) | 1;
      unint64_t v9 = (uint64_t *)(a1 + 72 * v8);
      if (0x1C71C71C71C71C72 * (((uint64_t)a3 - a1) >> 3) + 2 < a2)
      {
        unint64_t v10 = *((unsigned __int8 *)v9 + 63);
        if ((v10 & 0x80u) != 0) {
          unint64_t v10 = *(void *)(a1 + 72 * v8 + 48);
        }
        unint64_t v11 = *((unsigned __int8 *)v9 + 135);
        if ((v11 & 0x80u) != 0) {
          unint64_t v11 = v9[15];
        }
        v9 += 9 * (v10 < v11);
        if (v10 < v11) {
          uint64_t v8 = 0x1C71C71C71C71C72 * (((uint64_t)a3 - a1) >> 3) + 2;
        }
      }
      unint64_t v12 = *((unsigned __int8 *)v9 + 63);
      if ((v12 & 0x80u) != 0) {
        unint64_t v12 = v9[6];
      }
      if (*((char *)a3 + 63) >= 0) {
        unint64_t v13 = *((unsigned __int8 *)a3 + 63);
      }
      else {
        unint64_t v13 = a3[6];
      }
      if (v12 >= v13)
      {
        uint64_t v28 = a3[6];
        char v29 = *((unsigned char *)a3 + 63);
        uint64_t v32 = *a3;
        __int16 v33 = *((_WORD *)a3 + 4);
        uint64_t v26 = a3[2];
        *(void *)uint64_t v34 = a3[3];
        *(void *)&v34[7] = *(uint64_t *)((char *)a3 + 31);
        char v25 = *((unsigned char *)a3 + 39);
        a3[2] = 0;
        a3[3] = 0;
        char v27 = *((unsigned char *)a3 + 40);
        *(_DWORD *)&v31[3] = *((_DWORD *)a3 + 11);
        *(_DWORD *)uint64_t v31 = *(_DWORD *)((char *)a3 + 41);
        *(_DWORD *)&void v30[3] = *(_DWORD *)((char *)a3 + 59);
        *(_DWORD *)uint64_t v30 = *((_DWORD *)a3 + 14);
        a3[4] = 0;
        a3[5] = 0;
        a3[6] = 0;
        a3[7] = 0;
        int v14 = *((_DWORD *)a3 + 16);
        do
        {
          unint64_t v15 = v9;
          uint64_t v16 = *v9;
          *((_WORD *)v4 + 4) = *((_WORD *)v15 + 4);
          *uint64_t v4 = v16;
          uint64_t v17 = (void **)(v4 + 2);
          if (*((char *)v4 + 39) < 0) {
            operator delete(*v17);
          }
          long long v18 = *((_OWORD *)v15 + 1);
          _OWORD v4[4] = v15[4];
          *(_OWORD *)uint64_t v17 = v18;
          *((unsigned char *)v15 + 39) = 0;
          *((unsigned char *)v15 + 16) = 0;
          uint64_t v19 = (void **)(v4 + 5);
          if (*((char *)v4 + 63) < 0) {
            operator delete(*v19);
          }
          long long v20 = *(_OWORD *)(v15 + 5);
          v4[7] = v15[7];
          *(_OWORD *)uint64_t v19 = v20;
          *((unsigned char *)v15 + 63) = 0;
          *((unsigned char *)v15 + 4sub_2161868BC(&a9, 0) = 0;
          *((_DWORD *)v4 + 16) = *((_DWORD *)v15 + 16);
          if (v6 < v8) {
            break;
          }
          uint64_t v21 = (2 * v8) | 1;
          unint64_t v9 = (uint64_t *)(a1 + 72 * v21);
          if (2 * v8 + 2 < a2)
          {
            unint64_t v22 = *((unsigned __int8 *)v9 + 63);
            if ((v22 & 0x80u) != 0) {
              unint64_t v22 = *(void *)(a1 + 72 * v21 + 48);
            }
            unint64_t v23 = *((unsigned __int8 *)v9 + 135);
            if ((v23 & 0x80u) != 0) {
              unint64_t v23 = v9[15];
            }
            v9 += 9 * (v22 < v23);
            if (v22 < v23) {
              uint64_t v21 = 2 * v8 + 2;
            }
          }
          unint64_t v24 = *((unsigned __int8 *)v9 + 63);
          if ((v24 & 0x80u) != 0) {
            unint64_t v24 = v9[6];
          }
          uint64_t v4 = v15;
          uint64_t v8 = v21;
        }
        while (v24 >= v13);
        *((_WORD *)v15 + 4) = v33;
        *unint64_t v15 = v32;
        if (*((char *)v15 + 39) < 0) {
          operator delete((void *)v15[2]);
        }
        void v15[2] = v26;
        v15[3] = *(void *)v34;
        *(uint64_t *)((char *)v15 + 31) = *(void *)&v34[7];
        *((unsigned char *)v15 + 39) = v25;
        if (*((char *)v15 + 63) < 0) {
          operator delete((void *)v15[5]);
        }
        *((unsigned char *)v15 + 4sub_2161868BC(&a9, 0) = v27;
        *(_DWORD *)((char *)v15 + 41) = *(_DWORD *)v31;
        *((_DWORD *)v15 + 11) = *(_DWORD *)&v31[3];
        v15[6] = v28;
        *((_DWORD *)v15 + 14) = *(_DWORD *)v30;
        *(_DWORD *)((char *)v15 + 59) = *(_DWORD *)&v30[3];
        *((unsigned char *)v15 + 63) = v29;
        *((_DWORD *)v15 + 16) = v14;
      }
    }
  }
}

uint64_t sub_216230878(uint64_t *a1, void **a2, unint64_t *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_216129BFC(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  unint64_t v15 = v12;
  uint64_t v16 = &v12[24 * v5];
  uint64_t v17 = v16;
  long long v18 = &v12[24 * v11];
  sub_21617FAAC(v16, *a2, *a3);
  uint64_t v17 = v16 + 24;
  sub_21617FB68(a1, &v15);
  uint64_t v13 = a1[1];
  sub_21613FD68((uint64_t)&v15);
  return v13;
}

void sub_216230974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613FD68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216230988(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4, void *a5, unint64_t a6, void *a7, unint64_t a8, int a9, int a10, char a11, uint64_t a12, int a13, int a14, int a15)
{
  unint64_t v23 = (void *)sub_2162A7544(a1, a2 + 1);
  v23[3] = &unk_26C6BE7E8;
  uint64_t v24 = *a2;
  *unint64_t v23 = *a2;
  *(void *)(a1 + *(void *)(v24 - 32)) = a2[5];
  *(void *)(a1 + 24) = &unk_26C6C0F40;
  if (a3) {
    sub_21617FAAC((void *)(a1 + 32), a3, a4);
  }
  else {
    sub_216184F68((unsigned char *)(a1 + 32), byte_2163CA662);
  }
  CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (*(char *)(a1 + 55) < 0)
  {
    char v27 = *(const UniChar **)(a1 + 32);
    CFIndex v26 = *(void *)(a1 + 40);
  }
  else
  {
    CFIndex v26 = *(unsigned __int8 *)(a1 + 55);
    char v27 = (const UniChar *)(a1 + 32);
  }
  *(void *)(a1 + 56) = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], v27, v26);
  if (a5) {
    sub_21617FAAC((void *)(a1 + 64), a5, a6);
  }
  else {
    sub_216184F68((unsigned char *)(a1 + 64), byte_2163CA662);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    char v29 = *(const UniChar **)(a1 + 64);
    CFIndex v28 = *(void *)(a1 + 72);
  }
  else
  {
    CFIndex v28 = *(unsigned __int8 *)(a1 + 87);
    char v29 = (const UniChar *)(a1 + 64);
  }
  CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  *(void *)(a1 + 88) = CFStringCreateWithCharactersNoCopy(v25, v29, v28, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  sub_21617FAAC((void *)(a1 + 96), a7, a8);
  if (*(char *)(a1 + 119) < 0)
  {
    uint64_t v32 = *(const UniChar **)(a1 + 96);
    CFIndex v31 = *(void *)(a1 + 104);
  }
  else
  {
    CFIndex v31 = *(unsigned __int8 *)(a1 + 119);
    uint64_t v32 = (const UniChar *)(a1 + 96);
  }
  CFStringRef v33 = CFStringCreateWithCharactersNoCopy(v25, v32, v31, v30);
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 12sub_2161868BC(&a9, 0) = v33;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_21618B3D8((void *)(a1 + 136), *(const void **)a12, *(void *)(a12 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a12 + 8) - *(void *)a12) >> 3));
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v34 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v34 = *(unsigned __int8 *)(a1 + 87);
  }
  *(void *)(a1 + 16sub_2161868BC(&a9, 0) = v34;
  *(_DWORD *)(a1 + 168) = a9;
  *(_DWORD *)(a1 + 172) = a9;
  *(int64x2_t *)(a1 + 176) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 192) = -1;
  *(unsigned char *)(a1 + 20sub_2161868BC(&a9, 0) = a11;
  *(_DWORD *)(a1 + 204) = a13;
  *(_DWORD *)(a1 + 208) = a14;
  *(_DWORD *)(a1 + 212) = a15;
  *(_WORD *)(a1 + 216) = 256;
  *(unsigned char *)(a1 + 218) = 0;
  *(_DWORD *)(a1 + 22sub_2161868BC(&a9, 0) = a10;
  *(_WORD *)(a1 + 224) = 0;
  *(void *)(a1 + 24sub_2161868BC(&a9, 0) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  uint64_t v35 = *(void *)(a1 + 136);
  uint64_t v36 = *(void *)(a1 + 144) - v35;
  if (v36)
  {
    uint64_t v37 = (unsigned __int128)(v36 * (__int128)0x6666666666666667) >> 64;
    unint64_t v38 = (v37 >> 4) + ((unint64_t)v37 >> 63);
    if (v38 <= 1) {
      uint64_t v39 = 1;
    }
    else {
      uint64_t v39 = (v37 >> 4) + ((unint64_t)v37 >> 63);
    }
    char v40 = *(unsigned char *)(v35 + 37);
    if (v40)
    {
      uint64_t v42 = (char *)(v35 + 77);
      uint64_t v43 = 1;
      do
      {
        unint64_t v44 = v43;
        if (v39 == v43) {
          break;
        }
        char v45 = *v42;
        v42 += 40;
        ++v43;
      }
      while ((v45 & 1) != 0);
      BOOL v41 = v44 >= v38;
    }
    else
    {
      BOOL v41 = 0;
    }
    *(unsigned char *)(a1 + 217) = v41;
    if (*(_DWORD *)(v35 + 8) == 6) {
      *(unsigned char *)(a1 + 216) = (v40 & 4) != 0;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 217) = 1;
  }
  return a1;
}

void sub_216230CC4(_Unwind_Exception *a1)
{
  sub_2161868BC(v5, 0);
  sub_2161868BC(v4, 0);
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v6);
  }
  sub_2161868BC((const void **)(v1 + 88), 0);
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  sub_2161868BC((const void **)(v1 + 56), 0);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_216230D50()
{
}

uint64_t sub_216230D58(uint64_t a1, void *a2, unint64_t a3, void *a4, unint64_t a5, void *a6, unint64_t a7, int a8, int a9, char a10, uint64_t a11, int a12, int a13, int a14)
{
  *(void *)a1 = &unk_26C6BE7D0;
  unint64_t v22 = (void *)sub_2162A7544(a1, (uint64_t *)&off_26C6BCE90);
  *unint64_t v22 = off_26C6C0CF0;
  void v22[3] = &unk_26C6C0F40;
  unint64_t v23 = (const UniChar *)(v22 + 4);
  if (a2) {
    sub_21617FAAC(v22 + 4, a2, a3);
  }
  else {
    sub_216184F68((unsigned char *)v22 + 32, byte_2163CA662);
  }
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (*(char *)(a1 + 55) < 0)
  {
    CFIndex v26 = *(const UniChar **)(a1 + 32);
    CFIndex v25 = *(void *)(a1 + 40);
  }
  else
  {
    CFIndex v25 = *(unsigned __int8 *)(a1 + 55);
    CFIndex v26 = v23;
  }
  *(void *)(a1 + 56) = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], v26, v25);
  if (a4) {
    sub_21617FAAC((void *)(a1 + 64), a4, a5);
  }
  else {
    sub_216184F68((unsigned char *)(a1 + 64), byte_2163CA662);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    CFIndex v28 = *(const UniChar **)(a1 + 64);
    CFIndex v27 = *(void *)(a1 + 72);
  }
  else
  {
    CFIndex v27 = *(unsigned __int8 *)(a1 + 87);
    CFIndex v28 = (const UniChar *)(a1 + 64);
  }
  CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  *(void *)(a1 + 88) = CFStringCreateWithCharactersNoCopy(v24, v28, v27, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  sub_21617FAAC((void *)(a1 + 96), a6, a7);
  if (*(char *)(a1 + 119) < 0)
  {
    CFIndex v31 = *(const UniChar **)(a1 + 96);
    CFIndex v30 = *(void *)(a1 + 104);
  }
  else
  {
    CFIndex v30 = *(unsigned __int8 *)(a1 + 119);
    CFIndex v31 = (const UniChar *)(a1 + 96);
  }
  CFStringRef v32 = CFStringCreateWithCharactersNoCopy(v24, v31, v30, v29);
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 12sub_2161868BC(&a9, 0) = v32;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_21618B3D8((void *)(a1 + 136), *(const void **)a11, *(void *)(a11 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 3));
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v33 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v33 = *(unsigned __int8 *)(a1 + 87);
  }
  *(void *)(a1 + 16sub_2161868BC(&a9, 0) = v33;
  *(_DWORD *)(a1 + 168) = a8;
  *(_DWORD *)(a1 + 172) = a8;
  *(int64x2_t *)(a1 + 176) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 192) = -1;
  *(unsigned char *)(a1 + 20sub_2161868BC(&a9, 0) = a10;
  *(_DWORD *)(a1 + 204) = a12;
  *(_DWORD *)(a1 + 208) = a13;
  *(_DWORD *)(a1 + 212) = a14;
  *(_WORD *)(a1 + 216) = 256;
  *(unsigned char *)(a1 + 218) = 0;
  *(_DWORD *)(a1 + 22sub_2161868BC(&a9, 0) = a9;
  *(_WORD *)(a1 + 224) = 0;
  *(void *)(a1 + 24sub_2161868BC(&a9, 0) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  uint64_t v34 = *(void *)(a1 + 136);
  uint64_t v35 = *(void *)(a1 + 144) - v34;
  if (v35)
  {
    uint64_t v36 = (unsigned __int128)(v35 * (__int128)0x6666666666666667) >> 64;
    unint64_t v37 = (v36 >> 4) + ((unint64_t)v36 >> 63);
    if (v37 <= 1) {
      uint64_t v38 = 1;
    }
    else {
      uint64_t v38 = (v36 >> 4) + ((unint64_t)v36 >> 63);
    }
    char v39 = *(unsigned char *)(v34 + 37);
    if (v39)
    {
      BOOL v41 = (char *)(v34 + 77);
      uint64_t v42 = 1;
      do
      {
        unint64_t v43 = v42;
        if (v38 == v42) {
          break;
        }
        char v44 = *v41;
        v41 += 40;
        ++v42;
      }
      while ((v44 & 1) != 0);
      BOOL v40 = v43 >= v37;
    }
    else
    {
      BOOL v40 = 0;
    }
    *(unsigned char *)(a1 + 217) = v40;
    if (*(_DWORD *)(v34 + 8) == 6) {
      *(unsigned char *)(a1 + 216) = (v39 & 4) != 0;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 217) = 1;
  }
  return a1;
}

void sub_216231038(_Unwind_Exception *a1)
{
  sub_2161868BC(v5, 0);
  sub_2161868BC(v4, 0);
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v6);
  }
  sub_2161868BC((const void **)(v1 + 88), 0);
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  sub_2161868BC((const void **)(v1 + 56), 0);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_2162310C4()
{
}

uint64_t sub_2162310CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6BE7D0;
  uint64_t v4 = sub_2162A7650((uint64_t *)a1, (uint64_t *)&off_26C6BCE90, a2);
  *uint64_t v4 = (uint64_t)off_26C6C0CF0;
  v4[3] = (uint64_t)&unk_26C6C0F40;
  unint64_t v5 = v4 + 4;
  uint64_t v33 = (const UniChar **)v5;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_2161984AC(v5, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    _OWORD v5[2] = *(void *)(a2 + 48);
    *(_OWORD *)unint64_t v5 = v6;
  }
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a2 + 87) < 0)
  {
    sub_2161984AC((unsigned char *)(a1 + 64), *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 8sub_2161868BC(&a9, 0) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v7;
  }
  *(void *)(a1 + 88) = 0;
  if (*(char *)(a2 + 119) < 0)
  {
    sub_2161984AC((unsigned char *)(a1 + 96), *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v8;
  }
  *(_OWORD *)(a1 + 12sub_2161868BC(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  sub_21618B3D8((void *)(a1 + 136), *(const void **)(a2 + 136), *(void *)(a2 + 144), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
  *(void *)(a1 + 16sub_2161868BC(&a9, 0) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 20sub_2161868BC(&a9, 0) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 204) = *(void *)(a2 + 204);
  int v9 = *(_DWORD *)(a2 + 212);
  char v10 = *(unsigned char *)(a2 + 216);
  __int16 v11 = *(_WORD *)(a2 + 217);
  int v12 = *(_DWORD *)(a2 + 220);
  __int16 v13 = *(_WORD *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 212) = v9;
  *(unsigned char *)(a1 + 216) = v10;
  *(_WORD *)(a1 + 217) = v11;
  *(_DWORD *)(a1 + 22sub_2161868BC(&a9, 0) = v12;
  *(_WORD *)(a1 + 224) = v13;
  *(void *)(a1 + 24sub_2161868BC(&a9, 0) = 0;
  *(void *)(a1 + 248) = 0;
  int v14 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (*(char *)(a1 + 55) < 0)
  {
    CFIndex v15 = *(void *)(a1 + 40);
    if (!v15) {
      goto LABEL_16;
    }
    uint64_t v16 = *v33;
  }
  else
  {
    CFIndex v15 = *(unsigned __int8 *)(a1 + 55);
    if (!*(unsigned char *)(a1 + 55)) {
      goto LABEL_16;
    }
    uint64_t v16 = (const UniChar *)v33;
  }
  uint64_t v17 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  CFStringRef v18 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], v16, v15);
  sub_2161868BC((const void **)(a1 + 56), v18);
  int v14 = v17;
LABEL_16:
  uint64_t v19 = (CFAllocatorRef *)MEMORY[0x263EFFB28];
  if (*(char *)(a1 + 87) < 0)
  {
    CFIndex v20 = *(void *)(a1 + 72);
    if (!v20) {
      goto LABEL_22;
    }
    uint64_t v21 = *(const UniChar **)(a1 + 64);
  }
  else
  {
    CFIndex v20 = *(unsigned __int8 *)(a1 + 87);
    if (!*(unsigned char *)(a1 + 87)) {
      goto LABEL_22;
    }
    uint64_t v21 = (const UniChar *)(a1 + 64);
  }
  unint64_t v22 = v14;
  unint64_t v23 = (CFAllocatorRef *)MEMORY[0x263EFFB28];
  CFStringRef v24 = CFStringCreateWithCharactersNoCopy(*v14, v21, v20, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  sub_2161868BC((const void **)(a1 + 88), v24);
  uint64_t v19 = v23;
  int v14 = v22;
LABEL_22:
  if (*(void *)(a2 + 120))
  {
    if (*(char *)(a1 + 119) < 0)
    {
      CFIndex v26 = *(const UniChar **)(a1 + 96);
      CFIndex v25 = *(void *)(a1 + 104);
    }
    else
    {
      CFIndex v25 = *(unsigned __int8 *)(a1 + 119);
      CFIndex v26 = (const UniChar *)(a1 + 96);
    }
    CFStringRef v27 = CFStringCreateWithCharactersNoCopy(*v14, v26, v25, *v19);
    sub_2161868BC((const void **)(a1 + 120), v27);
  }
  CFIndex v28 = *(const void **)(a2 + 128);
  if (v28) {
    sub_216195954((const void **)(a1 + 128), v28);
  }
  CFAllocatorRef v29 = *(const void **)(a2 + 232);
  if (v29) {
    sub_2161DE7D4((const void **)(a1 + 232), v29);
  }
  CFIndex v30 = *(const void **)(a2 + 240);
  if (v30) {
    sub_2161AC6F8((const void **)(a1 + 240), v30);
  }
  CFIndex v31 = *(const void **)(a2 + 248);
  if (v31) {
    sub_2161AC698((const void **)(a1 + 248), v31);
  }
  return a1;
}

void sub_2162313F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, const void **a14)
{
  sub_2161868BC(v15, 0);
  if (*(char *)(v14 + 87) < 0) {
    operator delete(*a12);
  }
  sub_2161868BC(a14, 0);
  if (*(char *)(v14 + 55) < 0) {
    operator delete(*a13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2162314BC(uint64_t a1, void *lpsrc)
{
  if (!lpsrc
    || (uint64_t v4 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BA018, 0)) == 0|| (v5 = v4, (*(unsigned int (**)(unsigned __int8 *))(*(void *)v4 + 88))(v4)))
  {
    return sub_2162A7808(a1, (uint64_t)lpsrc);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 89
    && (*(unsigned int (**)(unsigned __int8 *))(*(void *)v5 + 96))(v5) != 89
    || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) != 89
    && (*(unsigned int (**)(unsigned __int8 *))(*(void *)v5 + 96))(v5) == 89)
  {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 89
    && (*(unsigned int (**)(unsigned __int8 *))(*(void *)v5 + 96))(v5) == 89)
  {
    CFNumberRef v7 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
    CFNumberRef v8 = (const __CFNumber *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v5 + 168))(v5);
    if (CFNumberCompare(v7, v8, 0) == kCFCompareEqualTo)
    {
      int v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
      char v10 = (const void *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v5 + 160))(v5);
      uint64_t result = CFEqual(v9, v10);
      if (!result) {
        return result;
      }
      __int16 v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 544))(a1);
      uint64_t v13 = v12;
      uint64_t v14 = (const void *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v5 + 544))(v5);
      if (v13 == v15) {
        return memcmp(v11, v14, 2 * v13) == 0;
      }
    }
    return 0;
  }
  int v16 = *(char *)(a1 + 55);
  uint64_t v17 = *(void *)(a1 + 40);
  if (v16 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 55);
  }
  uint64_t v18 = v5[55];
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *((void *)v5 + 5);
  }
  if (v17 != v18) {
    return 0;
  }
  if (!v17) {
    return 1;
  }
  if (v16 >= 0) {
    CFIndex v20 = (unsigned __int16 *)(a1 + 32);
  }
  else {
    CFIndex v20 = *(unsigned __int16 **)(a1 + 32);
  }
  if (v19 >= 0) {
    uint64_t v21 = (unsigned __int16 *)(v5 + 32);
  }
  else {
    uint64_t v21 = (unsigned __int16 *)*((void *)v5 + 4);
  }
  uint64_t v22 = v17 - 1;
  do
  {
    int v24 = *v20++;
    int v23 = v24;
    int v26 = *v21++;
    int v25 = v26;
    BOOL v28 = v22-- != 0;
    uint64_t result = v25 == v23;
  }
  while (v25 == v23 && v28);
  return result;
}

void sub_21623188C(uint64_t a1, char *a2, uint64_t a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  for (uint64_t i = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]); a3; --a3)
  {
    CFNumberRef v8 = CFNumberCreate(v6, kCFNumberCFIndexType, a2);
    CFArrayAppendValue(i, v8);
    if (v8) {
      CFRelease(v8);
    }
    a2 += 8;
  }

  sub_216195B94((const void **)(a1 + 240), i);
}

void sub_21623194C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216195244((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_216231964(uint64_t a1)
{
  return ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1) & 1) == 0
      && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 408))(a1) == 0;
}

uint64_t sub_2162319EC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    do
      v5 += (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 568))(a1, v4++);
    while (a2 != v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 544))(a1);
  (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 568))(a1, a2);
  return v6 + 2 * v5;
}

uint64_t sub_216231AE8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 144) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v2 + 40 * a2 + 24);
  }
}

uint64_t sub_216231B24(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 144) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v2 + 40 * a2 + 26);
  }
}

BOOL sub_216231B60(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 136);
  return 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 144) - v2) >> 3) > a2 && *(_DWORD *)(v2 + 40 * a2 + 12) != 0;
}

uint64_t sub_216231BA4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 144) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v2 + 40 * a2 + 30);
  }
}

uint64_t sub_216231BE0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 144) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v2 + 40 * a2 + 32);
  }
}

uint64_t sub_216231C1C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    unint64_t v2 = *(void *)(a1 + 72);
  }
  else {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 87);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    while (1)
    {
      v4 += (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, v3);
      if (v4 > v2) {
        return v3;
      }
      if (++v3 >= (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 48);
    return v5(a1);
  }
}

uint64_t sub_216231D48(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 144) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned int *)(v2 + 40 * a2 + 12);
  }
}

uint64_t sub_216231D84(uint64_t *a1, unint64_t a2)
{
  sub_2161C04AC(0);
  while (1)
  {
    unint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) - 1;
    uint64_t v5 = *a1;
    if (a2 >= v4) {
      break;
    }
    unsigned int v6 = (*(uint64_t (**)(uint64_t *, unint64_t))(v5 + 352))(a1, a2++);
    unsigned int v7 = (*(uint64_t (**)(uint64_t *, unint64_t))(*a1 + 344))(a1, a2);
    if (sub_2161C06A8((uint64_t)&qword_26797EF20, v6, v7)) {
      return a2 - 1;
    }
  }
  return (*(uint64_t (**)(uint64_t *))(v5 + 48))(a1) - 1;
}

uint64_t sub_216231EA8(uint64_t a1, uint64_t a2)
{
  sub_2161C04AC(0);
  do
  {
    uint64_t v4 = a2;
    if (!a2) {
      break;
    }
    --a2;
    unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 352))(a1, v4 - 1);
    unsigned int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 344))(a1, v4);
  }
  while (!sub_2161C06A8((uint64_t)&qword_26797EF20, v5, v6));
  return v4;
}

uint64_t sub_216231F88(uint64_t a1)
{
  uint64_t result = sub_216231C1C(a1);
  if (result)
  {
    return sub_216231EA8(a1, result - 1);
  }
  return result;
}

uint64_t sub_216231FD4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    do
      v5 += (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 320))(a1, v4++);
    while (a2 != v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 552))(a1);
  (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 320))(a1, a2);
  return v6 + 2 * v5;
}

uint64_t sub_2162320D0(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t sub_2162320D8(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 136) + 40 * a2 + 28);
}

void sub_2162320EC(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (!a2) {
    a3 = 0;
  }
  sub_21617FAAC(&__dst, a2, a3);
  uint64_t v6 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = __dst;
  *(void *)(a1 + 112) = v15;
  unsigned int v7 = *(__int16 **)a4;
  uint64_t v8 = *(void *)(a4 + 8) - *(void *)a4;
  if (v8)
  {
    unint64_t v9 = v8 >> 1;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    char v10 = (_WORD *)(*(void *)(a1 + 136) + 28);
    do
    {
      __int16 v11 = *v7++;
      *char v10 = v11;
      v10 += 20;
      --v9;
    }
    while (v9);
  }
  if (*(char *)(a1 + 119) < 0)
  {
    uint64_t v6 = *(void ***)(a1 + 96);
    CFIndex v12 = *(void *)(a1 + 104);
  }
  else
  {
    CFIndex v12 = *(unsigned __int8 *)(a1 + 119);
  }
  CFStringRef v13 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UniChar *)v6, v12, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  sub_2161868BC((const void **)(a1 + 120), v13);
}

uint64_t sub_2162321C8(uint64_t a1)
{
  uint64_t v2 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 544))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 544))(a1);
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  int v4 = *v2;
  if (v4 != 32 && (v4 & 0xFFFFFFDF) - 65 > 0x19) {
    return 0;
  }
  uint64_t v6 = 1;
  while (v3 != v6)
  {
    int v7 = v2[v6++];
    if (v7 != 32 && (v7 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      unint64_t v9 = v6 - 1;
      return v9 >= v3;
    }
  }
  unint64_t v9 = v3;
  return v9 >= v3;
}

uint64_t sub_2162322B4(uint64_t a1)
{
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
    return 0;
  }
  sub_2161C04AC(0);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
    return 1;
  }
  unint64_t v2 = 0;
  do
  {
    int v3 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 344))(a1, v2);
    BOOL v5 = (unsigned __int16)word_26797EF62 == v3
      || (unsigned __int16)word_26797EF64 == v3
      || (unsigned __int16)word_26797EF66 == v3;
    uint64_t v6 = v5;
    if (!v5) {
      break;
    }
    ++v2;
  }
  while (v2 < (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1));
  return v6;
}

uint64_t sub_2162323E0(uint64_t a1)
{
  return *(void *)(a1 + 240);
}

uint64_t sub_2162323E8(uint64_t a1)
{
  return *(void *)(a1 + 248);
}

void sub_2162323F0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(a2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v7 = sub_2162D1CE4(a2);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = *(void *)(a1 + 8);
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(a1);
      if ((*(int (**)(uint64_t))(*(void *)a1 + 96))(a1) < 32) {
        int v8 = 63;
      }
      else {
        int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 408))(a1))
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 408))(a1) == 2) {
          unint64_t v9 = "prefix";
        }
        else {
          unint64_t v9 = "partial";
        }
      }
      else
      {
        unint64_t v9 = "exact";
      }
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
      double v12 = (*(double (**)(uint64_t))(*(void *)a1 + 392))(a1);
      if (v12 >= -100.0) {
        unint64_t v13 = *(void *)&v12;
      }
      else {
        unint64_t v13 = 0xC059000000000000;
      }
      if (*(double *)(a1 + 184) >= -100.0) {
        unint64_t v14 = *(void *)(a1 + 184);
      }
      else {
        unint64_t v14 = 0xC059000000000000;
      }
      int v15 = *(_DWORD *)(a1 + 220);
      int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      uint64_t v17 = *(void *)(a1 + 8);
      int v18 = *(_DWORD *)(a1 + 192);
      *(_DWORD *)std::string buf = 136318722;
      uint64_t v24 = a3;
      __int16 v25 = 2048;
      uint64_t v26 = v22;
      __int16 v27 = 2112;
      uint64_t v28 = v21;
      __int16 v29 = 2112;
      uint64_t v30 = v20;
      __int16 v31 = 2112;
      uint64_t v32 = v19;
      __int16 v33 = 1024;
      int v34 = v8;
      __int16 v35 = 2080;
      uint64_t v36 = v9;
      __int16 v37 = 1024;
      int v38 = v10;
      __int16 v39 = 1024;
      int v40 = v11;
      __int16 v41 = 2048;
      unint64_t v42 = v13;
      __int16 v43 = 2048;
      unint64_t v44 = v14;
      __int16 v45 = 1024;
      int v46 = v15;
      __int16 v47 = 1024;
      int v48 = v16;
      __int16 v49 = 2048;
      uint64_t v50 = v17;
      __int16 v51 = 1024;
      int v52 = v18;
      _os_log_debug_impl(&dword_2160F5000, v7, OS_LOG_TYPE_DEBUG, "%s (%ld): [%@] (%@/%@), type: %c, length: %s, cost: %d, base-cost: %d, prob: %3.3lf, static prob: %3.3lf penalty: %d autocorrected: %d, rank: %ld, rank(static LM): %d", buf, 0x80u);
    }
  }
}

uint64_t sub_2162327C4(unsigned int a1)
{
  uint64_t v1 = &qword_26797E000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EFF8, memory_order_acquire) & 1) == 0)
  {
    unsigned int v12 = a1;
    int v10 = __cxa_guard_acquire(&qword_26797EFF8);
    uint64_t v1 = &qword_26797E000;
    int v11 = v10;
    a1 = v12;
    if (v11)
    {
      qword_26797EFF0 = (uint64_t)&unk_21637F0D8;
      __cxa_guard_release(&qword_26797EFF8);
      uint64_t v1 = &qword_26797E000;
      a1 = v12;
    }
  }
  unint64_t v2 = (_DWORD *)v1[510];
  unint64_t v3 = 293;
  int v4 = v2;
  do
  {
    unint64_t v5 = v3 >> 1;
    uint64_t v6 = &v4[v3 >> 1];
    unsigned int v8 = *v6;
    int v7 = v6 + 1;
    v3 += ~(v3 >> 1);
    if (v8 < a1) {
      int v4 = v7;
    }
    else {
      unint64_t v3 = v5;
    }
  }
  while (v3);
  if (v4 == v2 + 293 || *v4 != a1) {
    return -1;
  }
  else {
    return v4 - v2;
  }
}

void sub_216232898(uint64_t a1, CFTypeRef cf, uint64_t a3, unsigned int a4, int a5, int a6, int a7)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 4) = 0u;
  uint64_t v10 = a1 + 4;
  *(_DWORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 2sub_2161868BC(&a9, 0) = 0u;
  int v11 = (std::string *)(a1 + 8);
  uint64_t v12 = a1 + 48;
  *(_DWORD *)(a1 + 8sub_2161868BC(&a9, 0) = a4;
  *(_DWORD *)(a1 + 84) = a6;
  *(_DWORD *)(a1 + 88) = a7;
  *(_DWORD *)(a1 + 92) = a5;
  if (cf) {
    CFTypeRef v13 = CFRetain(cf);
  }
  else {
    CFTypeRef v13 = 0;
  }
  *(void *)(v10 + 92) = v13;
  for (uint64_t i = *(const std::string **)a3; ; uint64_t i = (const std::string *)((char *)i + 32))
  {
    if (i == *(const std::string **)(a3 + 8)) {
      goto LABEL_9;
    }
    if (i[1].__r_.__value_.__s.__data_[4]) {
      break;
    }
  }
  std::string::operator=(v11, i);
LABEL_9:
  if (v12 != a3) {
    sub_2162343EC(v12, *(std::string **)a3, *(long long **)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a4 > 5 || ((1 << a4) & 0x34) == 0) {
    operator new();
  }
  sub_216232BF4();
  std::mutex::lock(&stru_26797C5F8);
  if (CFURLGetFileSystemRepresentation((CFURLRef)cf, 1u, buffer, 1024)) {
    int v15 = (char *)buffer;
  }
  else {
    int v15 = (char *)&unk_2163A8923;
  }
  sub_21610B834(&__p, v15);
  operator new();
}

void sub_216232B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  MEMORY[0x2166CA800](v23, 0x10A0C403A2516C0);
  sub_21617DB94(v25, 0);
  sub_216175BF4((void ***)&__p);
  sub_216233070(v24, 0);
  sub_21623491C(a10, 0);
  if (*(char *)(v21 + 31) < 0) {
    operator delete(*v22);
  }
  _Unwind_Resume(a1);
}

void sub_216232BF4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DB90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DB90))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &unk_26797C5F8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DB90);
  }
}

void sub_216232C6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(uint64_t **)(v1 + 32);
  if (v2) {
    sub_216238210(v2);
  }
  *(_DWORD *)(v1 + 4) = 0;
}

uint64_t sub_216232C9C(uint64_t a1, _DWORD *a2)
{
  sub_216232BF4();
  std::mutex::lock(&stru_26797C5F8);
  uint64_t v4 = sub_216235F50(*(void *)(a1 + 40), a2);
  std::mutex::unlock(&stru_26797C5F8);
  return v4;
}

void sub_216232CF0(_Unwind_Exception *a1)
{
}

BOOL sub_216232D08(uint64_t a1)
{
  sub_216232BF4();
  std::mutex::lock(&stru_26797C5F8);
  BOOL v2 = sub_216237C70(*(void *)(a1 + 40));
  std::mutex::unlock(&stru_26797C5F8);
  return v2;
}

void sub_216232D54(_Unwind_Exception *a1)
{
}

void sub_216232D6C(uint64_t a1, int a2)
{
  sub_216232BF4();
  std::mutex::lock(&stru_26797C5F8);
  sub_216236A7C(*(void *)(a1 + 40), a2);

  std::mutex::unlock(&stru_26797C5F8);
}

void sub_216232DC4(_Unwind_Exception *a1)
{
}

void sub_216232DDC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_216232BF4();
  std::mutex::lock(&stru_26797C5F8);
  sub_216237C24(*(void *)(a1 + 40) + 56);
  std::mutex::unlock(&stru_26797C5F8);
  sub_21622E3D8(*(void **)(a1 + 96), v2, v3);
  sub_216232C9C(a1, (_DWORD *)(a1 + 4));
  sub_2162335C8(a1);
  sub_216232D08(a1);
  sub_216232D6C(a1, *(_DWORD *)(a1 + 92));
  uint64_t v4 = sub_2162D1CE4(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v5 = CFURLGetString(*(CFURLRef *)(a1 + 96));
    int v6 = 138412290;
    CFStringRef v7 = v5;
    _os_log_error_impl(&dword_2160F5000, v4, OS_LOG_TYPE_ERROR, "Corruption of learning dictionary detected. Database has been reset: %@", (uint8_t *)&v6, 0xCu);
  }
}

void sub_216232EE0(_Unwind_Exception *a1)
{
}

uint64_t sub_216232EF8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_216238298(result);
    sub_216232BF4();
    std::mutex::lock(&stru_26797C5F8);
    sub_216236FF8(*(void *)(a1 + 40), (const char *)(a1 + 8));
  }
  *(unsigned char *)a1 = 0;
  return result;
}

void sub_216232FAC(_Unwind_Exception *a1)
{
}

uint64_t sub_216232FC4(uint64_t a1)
{
  sub_216232D08(a1);
  if (*(void *)(a1 + 40))
  {
    sub_216232BF4();
    std::mutex::lock(&stru_26797C5F8);
    sub_216233070((uint64_t *)(a1 + 40), 0);
    std::mutex::unlock(&stru_26797C5F8);
  }
  sub_21617DB94((const void **)(a1 + 96), 0);
  uint64_t v3 = (void **)(a1 + 48);
  sub_216175BF4(&v3);
  sub_216233070((uint64_t *)(a1 + 40), 0);
  sub_21623491C((uint64_t *)(a1 + 32), 0);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_216233070(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216235EE4(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2162330C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(void ****)(a1 + 40);
  CFStringRef v7 = *v6;
  if (*v6 == v6[1])
  {
LABEL_6:
    uint64_t v13 = 0;
    unint64_t v14 = &v13;
    uint64_t v15 = 0x2000000000;
    int v16 = 1;
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 0x40000000;
    uint64_t v12[2] = sub_216233208;
    void v12[3] = &unk_26426BEB8;
    v12[6] = a2;
    v12[7] = a3;
    v12[4] = &v13;
    void v12[5] = a1;
    int v9 = sub_216237B5C((uint64_t)v6, (uint64_t)v12);
    if (v9 != 1)
    {
      if (v9 != 2)
      {
        uint64_t v10 = *((unsigned int *)v14 + 6);
        goto LABEL_12;
      }
      sub_216232DDC(a1);
    }
    uint64_t v10 = 3;
LABEL_12:
    _Block_object_dispose(&v13, 8);
    return v10;
  }
  uint64_t v8 = (void **)(a2 + 8);
  while (v8 != sub_216178FA4(a2, v7))
  {
    v7 += 4;
    if (v7 == v6[1])
    {
      int v6 = *(void ****)(a1 + 40);
      goto LABEL_6;
    }
  }
  return 3;
}

void sub_2162331F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_216233208(void *a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[5];
  ++*(_DWORD *)(v2 + 4);
  uint64_t v3 = a1[6];
  if (!*(void *)(v2 + 32)) {
    sub_216237798(*(void *)(v2 + 40), v3);
  }
  uint64_t v4 = sub_216178FA4(a1[6], (void **)(v2 + 8));
  CFStringRef v5 = (uint64_t *)(*(uint64_t (**)(void *))(*(void *)v4[7] + 16))(v4[7]);
  int v6 = (void *)sub_216238DBC(*(void **)(v2 + 32), *v5, (v5[1] - *v5) >> 1);
  if (v6)
  {
    int v7 = sub_216237870(*(uint64_t **)(v2 + 40), v3, v6);
    int v8 = v7;
    int ptr = v7;
    uint64_t v10 = (uint64_t *)(v2 + 40);
    uint64_t v9 = *(void *)(v2 + 40);
    if (v8 != -1)
    {
      sub_2162364E4(v9, v8, *(_DWORD *)(v2 + 4));
      int v11 = (int *)a1[7];
      if (v11) {
        *int v11 = v8;
      }
      *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 0;
      goto LABEL_12;
    }
  }
  else
  {
    int ptr = -1;
    uint64_t v10 = (uint64_t *)(v2 + 40);
    uint64_t v9 = *(void *)(v2 + 40);
  }
  int v12 = sub_216236564(v9, a1[6], *(_DWORD *)(v2 + 4));
  sub_2162334FC(v2, a1[6], v12, 1);
  uint64_t v13 = (int *)a1[7];
  if (v13) {
    *uint64_t v13 = v12;
  }
LABEL_12:
  uint64_t v14 = *(void *)(v2 + 32);
  if (v14) {
    int v15 = *(_DWORD *)(v14 + 8);
  }
  else {
    int v15 = sub_216236394(*v10);
  }
  if (v15 > *(_DWORD *)(v2 + 88))
  {
    int v16 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v17 = os_signpost_id_make_with_pointer(v16, &ptr);
    uint64_t v18 = sub_2162D1CE4(0xDu);
    if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v19 = v18;
      if (os_signpost_enabled(v18))
      {
        uint64_t v20 = *(void *)(v2 + 32);
        if (v20) {
          int v21 = *(_DWORD *)(v20 + 8);
        }
        else {
          int v21 = sub_216236394(*v10);
        }
        int v26 = *(_DWORD *)(v2 + 84);
        int v25 = *(_DWORD *)(v2 + 88);
        *(_DWORD *)std::string buf = 67109632;
        int v29 = v21;
        __int16 v30 = 1024;
        int v31 = v25;
        __int16 v32 = 1024;
        int v33 = v26;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v17, "LearningDictionaryRebuild", "curSize: %d, rebuildThreshold: %d, newSize: %d", buf, 0x14u);
      }
    }
    sub_21623683C();
  }
  uint64_t v22 = *(void *)(v2 + 40);
  int v23 = *(_DWORD *)(v2 + 4);

  return sub_2162367E4(v22, v23);
}

uint64_t sub_2162334FC(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (*(void *)(result + 32))
  {
    uint64_t v6 = result;
    int v7 = sub_216178FA4(a2, (void **)(result + 8));
    uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v7[7] + 16))(v7[7]);
    uint64_t v9 = *(void **)(v6 + 32);
    uint64_t v10 = *(void **)v8;
    uint64_t v11 = (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 1;
    if (a4)
    {
      return sub_216238840(v9, v10, v11, a3);
    }
    else
    {
      return sub_216238C80(v9, (uint64_t)v10, v11, a3);
    }
  }
  return result;
}

uint64_t sub_2162335C8(uint64_t a1)
{
  sub_216232BF4();
  std::mutex::lock(&stru_26797C5F8);
  uint64_t v2 = *(void *)(a1 + 40);
  sub_2162413B0((void *)(v2 + 64));
  sub_216237F54(v2 + 56);
  *(unsigned char *)(v2 + 144) = 1;
  sub_216237C70(*(void *)(a1 + 40));
  std::mutex::unlock(&stru_26797C5F8);
  uint64_t result = sub_216232EF8(a1);
  *(unsigned char *)a1 = 1;
  return result;
}

void sub_21623363C(_Unwind_Exception *a1)
{
}

uint64_t sub_216233654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  v8[2] = sub_2162336F8;
  v8[3] = &unk_264267588;
  v8[4] = a1;
  void v8[5] = a2;
  void v8[6] = a4;
  int v6 = sub_216237B5C(v5, (uint64_t)v8);
  if (v6 == 1) {
    return 0;
  }
  if (v6 == 2) {
    sub_216232DDC(a1);
  }
  return 1;
}

void sub_2162336F8(uint64_t a1)
{
}

void sub_216233780()
{
}

void sub_216233810(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216233818(uint64_t a1)
{
  v1[0] = 0;
  v1[1] = v1;
  v1[2] = 0x2000000000;
  char v2 = 0;
  sub_216237144(*(uint64_t **)(a1 + 40));
}

void sub_2162338B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_2162338CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a5 = 1;
  }
  return result;
}

void sub_216233930(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x2000000000;
    char v9 = 0;
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    void v7[2] = sub_2162339F0;
    v7[3] = &unk_26426BF28;
    void v7[5] = v8;
    v7[6] = a1;
    v7[4] = a5;
    sub_216238E34(v6, a2, a3, a4, (uint64_t)v7);
    _Block_object_dispose(v8, 8);
  }
}

void sub_2162339D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_2162339F0(void *a1, int a2, unsigned char *a3)
{
  uint64_t v5 = a1[6];
  int v8 = 0;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v6 = v7;
  if (sub_216236B34(*(uint64_t **)(v5 + 40), a2, &v8)) {
    (*(void (**)(void))(a1[4] + 16))(a1[4]);
  }
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
    *a3 = 1;
  }
  sub_2161936EC((uint64_t)&v6, v7[0]);
}

void sub_216233A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *sub_216233AB4(void *result, uint64_t a2, uint64_t a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)result[4];
  if (v3)
  {
    uint64_t v6 = result;
    char v8 = 0;
    int v7 = operator new(0x20uLL);
    *int v7 = &unk_26C6F56C8;
    v7[1] = v6;
    void v7[2] = a3;
    v7[3] = &v8;
    v9[3] = v7;
    sub_2162395E0(v3, a2, (uint64_t)v9);
    return sub_216234B98(v9);
  }
  return result;
}

void sub_216233B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216234B98((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216233B80(void *result, uint64_t a2, int a3, uint64_t a4)
{
  void v11[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (unint64_t *)result[4];
  if (v4)
  {
    char v8 = result;
    char v10 = 0;
    char v9 = operator new(0x20uLL);
    *char v9 = &unk_26C6F5748;
    v9[1] = v8;
    void v9[2] = a4;
    v9[3] = &v10;
    v11[3] = v9;
    sub_2162396A0(v4, a2, a3, (uint64_t)v11);
    return sub_216234E70(v11);
  }
  return result;
}

void sub_216233C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216234E70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216233C5C(void *result, uint64_t a2, uint64_t a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)result[4];
  if (v3)
  {
    uint64_t v6 = result;
    char v8 = 0;
    int v7 = operator new(0x20uLL);
    *int v7 = &unk_26C6F57C8;
    v7[1] = v6;
    void v7[2] = a3;
    v7[3] = &v8;
    v9[3] = v7;
    sub_216239748(v3, a2, (uint64_t)v9);
    return sub_216234B98(v9);
  }
  return result;
}

void sub_216233D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216234B98((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216233D38(void *result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  void v13[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = (unint64_t *)result[4];
  if (v5)
  {
    char v10 = result;
    char v12 = 0;
    uint64_t v11 = operator new(0x20uLL);
    *uint64_t v11 = &unk_26C6F5848;
    v11[1] = v10;
    v11[2] = a4;
    v11[3] = &v12;
    v13[3] = v11;
    sub_216239808(v5, a2, a3, (uint64_t)v13, a5);
    return sub_216234E70(v13);
  }
  return result;
}

void sub_216233E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216234E70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216233E1C(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 32);
  if (a2) {
    unint64_t v5 = (unint64_t)a3 >> 1;
  }
  else {
    unint64_t v5 = 0;
  }
  return sub_216238840(v4, a2, v5, a4);
}

uint64_t MecabraCreateArrayWithContentOfLegacyPhraseLearningDictionary_0(const __CFURL *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  if (sub_2161CC224(a1, 1))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    v6[3] = (uint64_t)Mutable;
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 0x40000000;
    void v4[2] = sub_216233F70;
    v4[3] = &unk_26426BF50;
    _OWORD v4[4] = &v5;
    uint64_t v9 = MEMORY[0x263EF8330];
    uint64_t v10 = 0x40000000;
    uint64_t v11 = sub_216222054;
    char v12 = &unk_264267568;
    uint64_t v13 = v4;
    sub_2161CC5BC();
  }
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_216233F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_216233F70(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v5 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], *(const UniChar **)a2, *(void *)(a2 + 8));
  CFStringRef v6 = CFStringCreateWithCharacters(v4, *(const UniChar **)(a2 + 16), *(void *)(a2 + 24));
  CFStringRef v7 = CFStringCreateWithFormat(v4, 0, @"%@,%@", v5, v6);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v7);
  CFRelease(v5);
  CFRelease(v6);

  CFRelease(v7);
}

void MecabraCreateArrayWithContentOfPhraseLearningDictionary_0(const __CFURL *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2000000000;
  void v20[3] = 0;
  int64x2_t v18 = 0uLL;
  unint64_t v19 = 0;
  sub_21610B834(v15, off_26797C580[0]);
  *(_DWORD *)os_signpost_id_t v17 = 0;
  *(_WORD *)&v17[4] = 1;
  v17[6] = 0;
  uint64_t v2 = v18.i64[1];
  if (v18.i64[1] >= v19)
  {
    CFAllocatorRef v4 = sub_216234740(&v18, (long long *)v15);
  }
  else
  {
    if (SHIBYTE(v16) < 0)
    {
      sub_21610A674((unsigned char *)v18.i64[1], v15[0], (unint64_t)v15[1]);
    }
    else
    {
      long long v3 = *(_OWORD *)v15;
      *(void *)(v18.i64[1] + 16) = v16;
      *(_OWORD *)uint64_t v2 = v3;
    }
    int v5 = *(_DWORD *)v17;
    *(_DWORD *)(v2 + 27) = *(_DWORD *)&v17[3];
    *(_DWORD *)(v2 + 24) = v5;
    CFAllocatorRef v4 = (char *)(v2 + 32);
  }
  v18.i64[1] = (uint64_t)v4;
  sub_21610B834(v12, off_26797C588);
  memset(v14, 0, 7);
  uint64_t v6 = v18.i64[1];
  if (v18.i64[1] >= v19)
  {
    uint64_t v8 = sub_216234740(&v18, (long long *)v12);
  }
  else
  {
    if (SHIBYTE(v13) < 0)
    {
      sub_21610A674((unsigned char *)v18.i64[1], v12[0], (unint64_t)v12[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)v12;
      *(void *)(v18.i64[1] + 16) = v13;
      *(_OWORD *)uint64_t v6 = v7;
    }
    int v9 = v14[0];
    *(_DWORD *)(v6 + 27) = *(_DWORD *)((char *)v14 + 3);
    *(_DWORD *)(v6 + 24) = v9;
    uint64_t v8 = (char *)(v6 + 32);
  }
  v18.i64[1] = (uint64_t)v8;
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024)) {
    uint64_t v10 = (char *)buffer;
  }
  else {
    uint64_t v10 = (char *)&unk_2163A8923;
  }
  sub_21610B834(&__p, v10);
  sub_216235DA8((uint64_t)buffer, (long long **)&v18, &__p);
}

void sub_2162342D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  a29 = &a36;
  sub_216175BF4((void ***)&a29);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_216234378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@,%@", a2, a3);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v4);

  CFRelease(v4);
}

void sub_2162343EC(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    sub_21618B7D8((uint64_t *)a1);
    if (a4 >> 59) {
      sub_21610CB04();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_216234534((void *)a1, v12);
    uint64_t v13 = sub_216234578(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    int v15 = (std::string *)((char *)__str + 32 * v14);
    sub_2162346CC(__str, v15, v9);
    uint64_t v13 = sub_216234578(v8, (long long *)v15, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_2162346CC(__str, (std::string *)a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0) {
        operator delete(*(void **)(v18 - 32));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_216234524(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21623452C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_216234534(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_21610CB04();
  }
  uint64_t result = (char *)sub_216115A58((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *sub_216234578(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v13 = __dst;
  unint64_t v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_21610A674(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v8 = v14;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
        uint64_t v8 = v4;
      }
      int v9 = *((_DWORD *)v6 + 6);
      *(_DWORD *)(v4 + 27) = *(_DWORD *)((char *)v6 + 27);
      *((_DWORD *)v4 + 6) = v9;
      v6 += 2;
      uint64_t v4 = v8 + 32;
      unint64_t v14 = v8 + 32;
    }
    while (v6 != a3);
  }
  char v12 = 1;
  sub_21623464C((uint64_t)v11);
  return v4;
}

void sub_216234638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21623464C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216234684(a1);
  }
  return a1;
}

void sub_216234684(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 32;
  }
}

std::string *sub_2162346CC(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str == a2) {
    return __str;
  }
  int v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    int v6 = *(_DWORD *)((char *)v4[1].__r_.__value_.__r.__words + 3);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)this[1].__r_.__value_.__r.__words + 3) = v6;
    this = (std::string *)((char *)this + 32);
    uint64_t v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

char *sub_216234740(int64x2_t *a1, long long *a2)
{
  uint64_t v3 = a1->i64[0];
  uint64_t v4 = (a1->i64[1] - a1->i64[0]) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_21610CB04();
  }
  uint64_t i64 = (uint64_t)a1[1].i64;
  uint64_t v8 = a1[1].i64[0] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v27 = a1 + 1;
  if (v9) {
    uint64_t v10 = (char *)sub_216115A58(i64, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[32 * v4];
  uint64_t v24 = v10;
  v25.i64[0] = (uint64_t)v11;
  v25.i64[1] = (uint64_t)v11;
  int v26 = &v10[32 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v13 = (char *)v25.i64[1];
    uint64_t v11 = (char *)v25.i64[0];
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
    uint64_t v13 = &v10[32 * v4];
  }
  unint64_t v14 = &v10[32 * v4];
  int v15 = *((_DWORD *)a2 + 6);
  *(_DWORD *)(v14 + 27) = *(_DWORD *)((char *)a2 + 27);
  *((_DWORD *)v14 + 6) = v15;
  uint64_t v16 = a1->i64[0];
  unint64_t v17 = a1->u64[1];
  if (v17 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v17);
  }
  else
  {
    do
    {
      long long v18 = *(_OWORD *)(v17 - 32);
      *((void *)v11 - 2) = *(void *)(v17 - 16);
      *((_OWORD *)v11 - 2) = v18;
      *(void *)(v17 - 24) = 0;
      *(void *)(v17 - 16) = 0;
      *(void *)(v17 - 32) = 0;
      int v19 = *(_DWORD *)(v17 - 8);
      *(_DWORD *)(v11 - 5) = *(_DWORD *)(v17 - 5);
      *((_DWORD *)v11 - 2) = v19;
      v11 -= 32;
      v17 -= 32;
    }
    while (v17 != v16);
    int64x2_t v20 = *a1;
  }
  int v21 = v13 + 32;
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)(v13 + 32);
  int64x2_t v25 = v20;
  uint64_t v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v26;
  int v26 = v22;
  uint64_t v24 = (char *)v20.i64[0];
  sub_2162348B8((uint64_t)&v24);
  return v21;
}

void sub_2162348A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162348B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162348B8(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21623491C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216238180(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_216234970()
{
}

__n128 sub_216234984(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F56C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2162349D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F56C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216234A10(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned char *a7)
{
  int v10 = *a2;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  uint64_t v13 = *a6;
  uint64_t v14 = *(void *)(a1 + 8);
  int v17 = 0;
  v16[0] = 0;
  v16[1] = 0;
  int v15 = v16;
  if (sub_216236B34(*(uint64_t **)(v14 + 40), v10, &v17)) {
    sub_216234B34(*(void *)(*(void *)(a1 + 16) + 24), a3, (uint64_t)&v15, v17, v11, v12, v13);
  }
  if (**(unsigned char **)(a1 + 24)) {
    *a7 = 1;
  }
  sub_2161936EC((uint64_t)&v15, v16[0]);
}

void sub_216234AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_216234AE8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5728)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216234B28()
{
  return &unk_26C6F5728;
}

uint64_t sub_216234B34(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v11 = a4;
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v8 = a7;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, a2, a3, &v11, &v10, &v9, &v8);
}

void *sub_216234B98(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216234C20()
{
}

__n128 sub_216234C34(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F5748;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216234C88(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5748;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216234CC0(void *a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, unsigned char *a9)
{
  int v11 = *a2;
  uint64_t v12 = *a4;
  uint64_t v13 = *a5;
  uint64_t v14 = *a6;
  uint64_t v15 = *a7;
  uint64_t v16 = *a8;
  uint64_t v17 = a1[1];
  int v20 = 0;
  v19[0] = 0;
  v19[1] = 0;
  long long v18 = v19;
  if (sub_216236B34(*(uint64_t **)(v17 + 40), v11, &v20)) {
    sub_216234DFC(*(void *)(a1[2] + 24), a3, (uint64_t)&v18, v20, v12, v13, v14, v15, v16, a1[3]);
  }
  if (*(unsigned char *)a1[3]) {
    *a9 = 1;
  }
  sub_2161936EC((uint64_t)&v18, v19[0]);
}

void sub_216234D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

uint64_t sub_216234DB0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F57A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216234DF0()
{
  return &unk_26C6F57A8;
}

uint64_t sub_216234DFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v15 = a4;
  uint64_t v13 = a6;
  uint64_t v14 = a5;
  uint64_t v11 = a8;
  uint64_t v12 = a7;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, &v15, &v14, &v13, &v12, &v11, &a9, a10);
}

void *sub_216234E70(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216234EF8()
{
}

__n128 sub_216234F0C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F57C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216234F60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F57C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216234F98(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned char *a7)
{
  int v10 = *a2;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  uint64_t v13 = *a6;
  uint64_t v14 = *(void *)(a1 + 8);
  int v17 = 0;
  v16[0] = 0;
  v16[1] = 0;
  int v15 = v16;
  if (sub_216236B34(*(uint64_t **)(v14 + 40), v10, &v17)) {
    sub_216234B34(*(void *)(*(void *)(a1 + 16) + 24), a3, (uint64_t)&v15, v17, v11, v12, v13);
  }
  if (**(unsigned char **)(a1 + 24)) {
    *a7 = 1;
  }
  sub_2161936EC((uint64_t)&v15, v16[0]);
}

void sub_216235058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_216235070(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5828)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162350B0()
{
  return &unk_26C6F5828;
}

void sub_2162350C0()
{
}

__n128 sub_2162350D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F5848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216235128(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216235160(void *a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, unsigned char *a9)
{
  int v11 = *a2;
  uint64_t v12 = *a4;
  uint64_t v13 = *a5;
  uint64_t v14 = *a6;
  uint64_t v15 = *a7;
  uint64_t v16 = *a8;
  uint64_t v17 = a1[1];
  int v20 = 0;
  v19[0] = 0;
  v19[1] = 0;
  long long v18 = v19;
  if (sub_216236B34(*(uint64_t **)(v17 + 40), v11, &v20)) {
    sub_216234DFC(*(void *)(a1[2] + 24), a3, (uint64_t)&v18, v20, v12, v13, v14, v15, v16, a1[3]);
  }
  if (*(unsigned char *)a1[3]) {
    *a9 = 1;
  }
  sub_2161936EC((uint64_t)&v18, v19[0]);
}

void sub_216235238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

uint64_t sub_216235250(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F58A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216235290()
{
  return &unk_26C6F58A8;
}

void sub_21623529C(_DWORD *a1, int a2)
{
  *a1 = a2;
  sub_21622BDEC();
}

void sub_2162352F0(_Unwind_Exception *a1)
{
  sub_2161DFBF8(v2, 0);
  sub_2161DFC94(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216235314(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  if (v1)
  {
    uint64_t v2 = result;
    __n128 result = sub_21622C350();
    if (result)
    {
      if (*v1)
      {
        sub_21622C008(*(uint64_t **)(v2 + 8));
        operator new();
      }
    }
  }
  return result;
}

void sub_2162353A0(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 && sub_21622C350() && a2 && *v2)
  {
    long long __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    v8[0] = &unk_26C6C7BA0;
    v8[1] = &__p;
    void v8[3] = v8;
    sub_21628FC38(a2, (uint64_t)v8);
    sub_216235B00(v8);
    sub_21622BEBC(*(uint64_t **)(a1 + 8), (uint64_t *)&__p);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
}

void sub_216235480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162354AC(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 && sub_21622C350() && a2 && *v2)
  {
    memset(__p, 0, sizeof(__p));
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
        sub_216235578((double **)__p, ValueAtIndex[3]);
      }
    }
    sub_21622BEBC(*(uint64_t **)(a1 + 8), (uint64_t *)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
}

void sub_21623555C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216235578(double **a1, uint64_t a2)
{
  float v3 = *(float *)(a2 + 4);
  float v4 = *(float *)(a2 + 8);
  double v5 = v3;
  double v6 = v4;
  float v7 = *(float *)(a2 + 12);
  float v8 = *(float *)(a2 + 16);
  double v9 = v7;
  double v10 = v8;
  double v11 = (float)(v3 + (float)(v7 * 0.5));
  double v12 = (float)(v4 + (float)(v8 * 0.5));
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v15 = a1[1];
  unint64_t v14 = (unint64_t)a1[2];
  if ((unint64_t)v15 >= v14)
  {
    uint64_t v17 = *a1;
    uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * (v15 - *a1);
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) > 0x492492492492492) {
      sub_21610CB04();
    }
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - (void)v17) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x249249249249249) {
      unint64_t v21 = 0x492492492492492;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 > 0x492492492492492) {
        sub_2160FFA74();
      }
      uint64_t v22 = (char *)operator new(56 * v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    int v23 = (double *)&v22[56 * v18];
    *int v23 = v11;
    v23[1] = v12;
    void v23[2] = v5;
    v23[3] = v6;
    v23[4] = v9;
    void v23[5] = v10;
    *((void *)v23 + 6) = v13;
    uint64_t v16 = v23 + 7;
    if (v15 != v17)
    {
      do
      {
        long long v24 = *(_OWORD *)(v15 - 7);
        long long v25 = *(_OWORD *)(v15 - 5);
        long long v26 = *(_OWORD *)(v15 - 3);
        *(v23 - 1) = *(v15 - 1);
        *(_OWORD *)(v23 - 3) = v26;
        *(_OWORD *)(v23 - 5) = v25;
        *(_OWORD *)(v23 - 7) = v24;
        v23 -= 7;
        v15 -= 7;
      }
      while (v15 != v17);
      uint64_t v15 = *a1;
    }
    *a1 = v23;
    a1[1] = v16;
    a1[2] = (double *)&v22[56 * v21];
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v15 = v11;
    v15[1] = v12;
    void v15[2] = v5;
    v15[3] = v6;
    void v15[4] = v9;
    void v15[5] = v10;
    uint64_t v16 = v15 + 7;
    *((void *)v15 + 6) = v13;
  }
  a1[1] = v16;
}

uint64_t *sub_216235728(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = (void *)result[1];
  if (v2)
  {
    float v4 = result;
    __n128 result = (uint64_t *)sub_21622C350();
    if (result)
    {
      if (*v2)
      {
        __n128 result = (uint64_t *)v4[2];
        if (result)
        {
          int v5 = *(_DWORD *)(a2 + 64) - 1;
          if (v5 > 2) {
            uint64_t v6 = 1;
          }
          else {
            uint64_t v6 = qword_216380250[v5];
          }
          double v7 = *(double *)(a2 + 32);
          double v8 = *(double *)(a2 + 40);
          double v9 = *(double *)(a2 + 48);
          double v10 = *(double *)(a2 + 56);
          return (uint64_t *)sub_21622B658(result, v6, v7, v8, v9, v10);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2162357C4(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t result = sub_21622C350();
  if (!result) {
    return result;
  }
  if (!*v2) {
    return 0;
  }
  uint64_t result = 0;
  if (a2 && *(void *)(a1 + 16))
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (Count < 1) {
      return 1;
    }
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    while (1)
    {
      double v9 = (const void *)*((void *)CFArrayGetValueAtIndex(a2, v8) + 3);
      if (!v9) {
        break;
      }
      double v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6B97B0, 0);
      if (!v10) {
        break;
      }
      sub_216235728((uint64_t *)a1, (uint64_t)v10);
      ++v8;
      uint64_t result = 1;
      if (v7 == v8) {
        return result;
      }
    }
    sub_2161DFBF8((const void ***)(a1 + 16), 0);
    return 0;
  }
  return result;
}

void sub_2162358E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    v4[0] = 0;
    v4[1] = v4;
    void v4[2] = 0x2000000000;
    char v5 = 0;
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 0x40000000;
    v3[2] = sub_216235998;
    v3[3] = &unk_264266EA8;
    v3[4] = a2;
    v3[5] = v4;
    sub_21622B7C0(v2, (uint64_t)v3);
    _Block_object_dispose(v4, 8);
  }
}

void sub_216235980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_216235998(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v8 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = sub_21622C238(&v8);
  sub_21622C120(&v8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, v6, *(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a3 = 1;
  }
  return result;
}

void sub_216235A24()
{
}

void *sub_216235A38(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C6C7BA0;
  result[1] = v3;
  return result;
}

uint64_t sub_216235A80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7BA0;
  a2[1] = v2;
  return result;
}

void sub_216235AAC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_216235AB4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC820)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216235AF4()
{
  return &unk_26C6BC820;
}

void *sub_216235B00(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_216235B84(int a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v5 = (uint64_t *)result;
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      sub_216235C50(result, a2, v5[1]);
      CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
      sub_216235D04((int)v6, a2, v6);
      return 1;
    }
  }
  return result;
}

void sub_216235C50(int a1, CFMutableDictionaryRef theDict, uint64_t a3)
{
  uint64_t v5 = (const void *)*MEMORY[0x263EFFB40];
  CFDictionaryAddValue(theDict, @"conversionCandidateAccepted", (const void *)*MEMORY[0x263EFFB40]);
  if ((unint64_t)a3 >= 4)
  {
    if (a3 >= 10) {
      return;
    }
  }
  else
  {
    CFDictionaryAddValue(theDict, *(&off_26426BF98)[a3], v5);
  }

  CFDictionaryAddValue(theDict, @"top10ConversionCandidateAccepted", v5);
}

void sub_216235D04(int a1, __CFDictionary *a2, CFStringRef theString)
{
  int valuePtr = CFStringGetLength(theString);
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(a2, @"acceptedCandidateLength", v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_216235D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_216235D94()
{
}

void sub_216235DA8(uint64_t a1, long long **a2, long long *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_216237CC4((char *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 5);
  if (*((char *)a3 + 23) < 0)
  {
    sub_21610A674((unsigned char *)(a1 + 24), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(a1 + 4sub_216195244(&a9, 0) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v5;
  }
  operator new();
}

void sub_216235E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216175BF4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216235EE4(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 152);
  if (v2) {
    _Block_release(v2);
  }
  sub_216237D9C(a1 + 56);
  sub_216237D4C((uint64_t *)(a1 + 48), 0);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  CFNumberRef v4 = (void **)a1;
  sub_216175BF4(&v4);
  return a1;
}

uint64_t sub_216235F50(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v3 = a1 + 56;
  if (!v4)
  {
    *a2 = 0;
    long long v5 = (char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      long long v5 = *(char **)v5;
    }
    sub_216235FB4(v3, v5);
    sub_2162360A8();
  }
  return 1;
}

void sub_216235FA4(void *a1)
{
}

uint64_t sub_216235FB4(uint64_t result, char *a2)
{
  if (!*(void *)result)
  {
    uint64_t v3 = (sqlite3 **)result;
    sub_2161B4568((std::string *)(result + 64), a2);
    LODWORD(result) = sqlite3_open_v2(":memory:", v3, 3145730, 0);
    if (result)
    {
LABEL_3:
      if (result == 11 || result == 26)
      {
        uint64_t result = sub_216237F54((uint64_t)v3);
        if (result) {
          return result;
        }
        exception = __cxa_allocate_exception(4uLL);
        int v5 = 1;
      }
      else
      {
        exception = __cxa_allocate_exception(4uLL);
        int v5 = 2;
      }
      _DWORD *exception = v5;
      __cxa_throw(exception, (struct type_info *)&unk_26C6B9418, 0);
    }
    if (stat(a2, &v6))
    {
      return sub_216237EA8((uint64_t)v3);
    }
    else
    {
      uint64_t result = sub_216237DF4((uint64_t)v3, 0);
      if (result) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void sub_2162360A8()
{
  sub_21623F518((uint64_t)&__p);
  sub_216236760();
}

void sub_216236160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216236190(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 152);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = (sqlite3 **)(a1 + 56);
  sub_2162361F4(v3, "DROP TABLE Assist");

  return sub_2162361F4(v3, "DROP TABLE Words");
}

uint64_t sub_2162361F4(sqlite3 **a1, const char *a2)
{
  uint64_t result = sqlite3_exec(*a1, a2, 0, 0, 0);
  if (result == 26 || result == 11)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B9418, 0);
  }
  return result;
}

BOOL sub_216236248(uint64_t a1, sqlite3 **a2)
{
  sub_21623F124(*(uint64_t **)(a1 + 48), "Words", &__p);
  sub_2162361F4(a2, "PRAGMA journal_mode = WAL;");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (sub_2162361F4(a2, (const char *)p_p)) {
    goto LABEL_11;
  }
  sub_21623F340((uint64_t)&v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v8;
  uint64_t v4 = (v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? &__p
     : (std::string *)v8.__r_.__value_.__r.__words[0];
  if (sub_2162361F4(a2, (const char *)v4))
  {
LABEL_11:
    BOOL v5 = 0;
  }
  else
  {
    sub_21623F42C((uint64_t)&v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v8;
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v7 = &__p;
    }
    else {
      CFIndex v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    BOOL v5 = sub_2162361F4(a2, (const char *)v7) == 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_216236370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216236394(uint64_t a1)
{
  uint64_t v1 = sub_2162363F0(a1, 10);
  if (sub_216241214(v1) != 100) {
    return 0;
  }
  uint64_t v2 = *(sqlite3_stmt **)(v1 + 8);

  return sqlite3_column_int(v2, 0);
}

uint64_t sub_2162363F0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  if (!v2) {
    goto LABEL_13;
  }
  uint64_t v3 = a1 + 96;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < a2;
    if (v4 >= a2) {
      stat v6 = (uint64_t *)v2;
    }
    else {
      stat v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == a1 + 96 || *(_DWORD *)(v3 + 32) > a2 || (uint64_t v7 = *(void *)(v3 + 40)) == 0)
  {
LABEL_13:
    sub_21623E82C(*(uint64_t **)(a1 + 48), a2, (uint64_t)&__p);
    sub_216237A80();
  }
  sqlite3_reset(*(sqlite3_stmt **)(v7 + 8));
  sqlite3_clear_bindings(*(sqlite3_stmt **)(v7 + 8));
  return v7;
}

void sub_2162364C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162364E4(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_2162363F0(a1, 5);
  sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 1, a3);
  sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 2, a2);
  *(unsigned char *)(a1 + 144) = 1;

  return sub_216241214(v6);
}

sqlite3_int64 sub_216236564(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_2162363F0(a1, 2);
  sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 1, a3);
  uint64_t v7 = *(void *)a1;
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    int v8 = 2;
    do
    {
      double v9 = sub_216178FA4(a2, (void **)v7)[7];
      int v10 = *(_DWORD *)(v7 + 24);
      if (v10 == 1)
      {
        int v12 = (*(uint64_t (**)(void *))(*(void *)v9 + 24))(v9);
        sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), v8, v12);
      }
      else if (!v10)
      {
        uint64_t v11 = (*(uint64_t (**)(void *))(*(void *)v9 + 16))(v9);
        sub_21624125C(v6, v8, *(const void **)v11, (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 1, *(unsigned __int8 *)(v7 + 30));
      }
      ++v8;
      v7 += 32;
    }
    while (v7 != *(void *)(a1 + 8));
  }
  sub_216241214(v6);
  *(unsigned char *)(a1 + 144) = 1;
  uint64_t v13 = *(sqlite3 **)(a1 + 56);

  return sqlite3_last_insert_rowid(v13);
}

void sub_216236698()
{
}

void sub_216236748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216237F98((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216236760()
{
}

void sub_2162367C0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t sub_2162367E4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_2162363F0(a1, 6);
  sqlite3_bind_int(*(sqlite3_stmt **)(v4 + 8), 1, a2);
  uint64_t result = sub_216241214(v4);
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

void sub_21623683C()
{
}

void sub_216236A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t *a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216237F98(&a17, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216236A7C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_2162363F0(a1, 9);
  sqlite3_bind_int(*(sqlite3_stmt **)(v4 + 8), 1, a2);
  uint64_t result = sub_216241214(v4);
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

uint64_t sub_216236AD4(uint64_t a1, double a2)
{
  uint64_t v4 = sub_2162363F0(a1, 7);
  sqlite3_bind_double(*(sqlite3_stmt **)(v4 + 8), 1, a2);
  uint64_t result = sub_216241214(v4);
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

uint64_t sub_216236B34(uint64_t *a1, int a2, int *a3)
{
  uint64_t result = sub_2162363F0((uint64_t)a1, 4);
  if (result)
  {
    uint64_t v7 = result;
    sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a2);
    if (sub_216241214(v7) == 100)
    {
      *a3 = sqlite3_column_int(*(sqlite3_stmt **)(v7 + 8), 0);
      uint64_t v8 = *a1;
      if (a1[1] != *a1)
      {
        unint64_t v9 = 0;
        do
        {
          int v10 = *(_DWORD *)(v8 + 32 * v9 + 24);
          if (!v10)
          {
            uint64_t v11 = sqlite3_column_blob(*(sqlite3_stmt **)(v7 + 8), (int)v9 + 1);
            int v12 = sqlite3_column_bytes(*(sqlite3_stmt **)(v7 + 8), v9 + 1);
            memset(v13, 0, sizeof(v13));
            sub_216182F50(v13, v11, (uint64_t)v11 + (v12 & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v12 >> 1);
            operator new();
          }
          if (v10 == 1)
          {
            sqlite3_column_int(*(sqlite3_stmt **)(v7 + 8), v9 + 1);
            operator new();
          }
          ++v9;
          uint64_t v8 = *a1;
        }
        while (v9 < (a1[1] - *a1) >> 5);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_216236DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17)
{
  if (a15) {
    sub_2161121B0(a15);
  }
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216236E2C()
{
  sub_21623F604(&v0);
  sub_216236760();
}

void sub_216236FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216236FF8(uint64_t a1, const char *a2)
{
  char v3 = 0;
  sub_21623F098(a2, &__p);
  sub_216236760();
}

void sub_216237108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216237144(uint64_t *a1)
{
  sub_21623F8A8(a1, &v1);
  sub_216236760();
}

void sub_216237480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24)
{
  sub_216237F98(&a24, 0);
  if (*(char *)(v24 - 89) < 0) {
    operator delete(*(void **)(v24 - 112));
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x21623745CLL);
  }
  _Unwind_Resume(a1);
}

void sub_2162375A0(uint64_t a1, uint64_t a2)
{
  sub_21623F7B0(*(uint64_t **)(a1 + 48), a2, &__p);
  sub_216236760();
}

void sub_216237758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216237798(uint64_t a1, uint64_t a2)
{
  v2[0] = 0;
  v2[1] = v2;
  v2[2] = 0x2000000000;
  int v3 = -1;
  sub_2162375A0(a1, a2);
}

void sub_216237840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_216237858(uint64_t result, int a2, unsigned char *a3)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *a3 = 1;
  return result;
}

uint64_t sub_216237870(uint64_t *a1, uint64_t a2, void *a3)
{
  int v3 = a3 + 1;
  uint64_t v4 = (void *)*a3;
  if ((void *)*a3 == a3 + 1) {
    return 0xFFFFFFFFLL;
  }
  LODWORD(v7) = -1;
  while (1)
  {
    uint64_t v8 = *((unsigned int *)v4 + 7);
    uint64_t v9 = sub_2162363F0((uint64_t)a1, 1);
    BOOL v10 = sub_216237938(a1, v9, v8, a2, 0);
    uint64_t v7 = v10 ? v8 : v7;
    if (v10) {
      break;
    }
    uint64_t v11 = (void *)v4[1];
    if (v11)
    {
      do
      {
        int v12 = v11;
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        int v12 = (void *)v4[2];
        BOOL v13 = *v12 == (void)v4;
        uint64_t v4 = v12;
      }
      while (!v13);
    }
    uint64_t v4 = v12;
    if (v12 == v3) {
      return v7;
    }
  }
  return v8;
}

BOOL sub_216237938(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, a3);
  uint64_t v9 = *a1;
  if (*a1 != a1[1])
  {
    int v10 = 2;
    do
    {
      if (!*(unsigned char *)(v9 + 28))
      {
        uint64_t v11 = sub_216178FA4(a4, (void **)v9);
        if ((void **)(a4 + 8) == v11)
        {
          if ((a5 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          int v12 = v11[7];
          int v13 = *(_DWORD *)(v9 + 24);
          if (v13 == 1)
          {
            int v16 = (*(uint64_t (**)(void *))(*(void *)v12 + 24))(v12);
            int v14 = v10 + 1;
            sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), v10, v16);
            goto LABEL_11;
          }
          if (!v13)
          {
            int v14 = v10 + 1;
            uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)v12 + 16))(v12);
            sub_21624125C(a2, v10, *(const void **)v15, (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 1, *(unsigned __int8 *)(v9 + 30));
LABEL_11:
            int v10 = v14;
          }
        }
      }
      v9 += 32;
    }
    while (v9 != a1[1]);
  }
  return sub_216241214(a2) == 100;
}

void sub_216237A80()
{
}

void sub_216237AE4(_Unwind_Exception *a1, int a2)
{
  uint64_t v5 = v3;
  MEMORY[0x2166CA800](v5, 0x20C40960023A9);
  if (a2 == 1)
  {
    if (*(_DWORD *)__cxa_begin_catch(a1) == 1)
    {
      sub_2162413B0((void *)(v2 + 8));
      sub_216237F54(v2);
    }
    __cxa_end_catch();
    JUMPOUT(0x216237AD0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216237B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (sqlite3 **)(a1 + 56);
  BOOL v6 = sub_2162361F4((sqlite3 **)(a1 + 56), "BEGIN IMMEDIATE") == 0;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  sub_2162361F4(v5, "COMMIT");
  BOOL v6 = 0;
  *(unsigned char *)(a1 + 144) = 1;
  sub_216237FFC((uint64_t)&v5);
  return 0;
}

void sub_216237BE8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x216237BD4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216237C24(uint64_t a1)
{
  if (*(void *)a1)
  {
    sub_2162413B0((void *)(a1 + 8));
    if (sqlite3_close(*(sqlite3 **)a1)) {
      return 0;
    }
    *(void *)a1 = 0;
  }
  return 1;
}

BOOL sub_216237C70(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 144)) {
    return 1;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_216236AD4(a1, Current);
  BOOL result = sub_216237DF4(a1 + 56, 1) == 0;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

char *sub_216237CC4(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    sub_216234534(result, a4);
    BOOL result = sub_216234578((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_216237D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216175BF4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216237D4C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21623E7D4(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_216237D9C(uint64_t a1)
{
  if (*(void *)a1)
  {
    sub_2162413B0((void *)(a1 + 8));
    sqlite3_close(*(sqlite3 **)a1);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  sub_21624136C(a1 + 8);
  return a1;
}

uint64_t sub_216237DF4(uint64_t a1, int a2)
{
  ppDb = 0;
  uint64_t v4 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v4 = *(const char **)v4;
  }
  uint64_t v5 = sqlite3_open(v4, &ppDb);
  if (!v5)
  {
    if (a2) {
      p_ppDb = (sqlite3 **)a1;
    }
    else {
      p_ppDb = &ppDb;
    }
    uint64_t v7 = *p_ppDb;
    if (a2) {
      uint64_t v8 = &ppDb;
    }
    else {
      uint64_t v8 = (sqlite3 **)a1;
    }
    uint64_t v9 = sqlite3_backup_init(*v8, "main", v7, "main");
    if (v9)
    {
      uint64_t v10 = v9;
      sqlite3_backup_step(v9, -1);
      sqlite3_backup_finish(v10);
    }
    uint64_t v5 = sqlite3_errcode(ppDb);
  }
  if (ppDb) {
    sqlite3_close(ppDb);
  }
  return v5;
}

uint64_t sub_216237EA8(uint64_t a1)
{
  uint64_t v4 = (sqlite3 **)a1;
  BOOL v5 = sub_2162361F4((sqlite3 **)a1, "BEGIN IMMEDIATE") == 0;
  if (!sub_216236248(*(void *)(a1 + 56), (sqlite3 **)a1))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 3;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B9418, 0);
  }
  sub_2162361F4(v4, "COMMIT");
  BOOL v5 = 0;
  return sub_216237FFC((uint64_t)&v4);
}

void sub_216237F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216237F54(uint64_t a1)
{
  return 1;
}

void sub_216237F88(void *a1)
{
}

uint64_t **sub_216237F98(uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_2162411C8(v2);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_216237FFC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2162361F4(*(sqlite3 ***)a1, "ROLLBACK");
  }
  return a1;
}

void sub_21623803C()
{
}

void sub_21623813C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10A1C4028A83BA9);
  MEMORY[0x2166CA800](v1, 0x10A1C40240D44B1);
  _Unwind_Resume(a1);
}

uint64_t sub_216238180(uint64_t a1)
{
  sub_216238210((uint64_t *)a1);
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  BOOL v5 = (void **)(a1 + 40);
  sub_216175BF4(&v5);
  BOOL v5 = (void **)(a1 + 16);
  sub_216239B24(&v5);
  uint64_t v3 = *(void *)a1;
  *(void *)a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  return a1;
}

void sub_216238210(uint64_t *a1)
{
  (*(void (**)(uint64_t))(*(void *)*a1 + 96))(*a1);
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 24;
      sub_21612A250(v2 - 24, *(void **)(v2 - 16));
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[3] = v3;
  sub_216175C48(a1 + 5);
  *((_DWORD *)a1 + 2) = 0;
}

void *sub_216238298(uint64_t a1)
{
  uint64_t v2 = (char **)(a1 + 40);
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 5;
  sub_216238210((uint64_t *)a1);
  sub_2162382F4(v2, v3);
  uint64_t result = sub_2162383CC((uint64_t *)(a1 + 16));
  *(unsigned char *)(a1 + 72) = 1;
  return result;
}

uint64_t sub_2162382F4(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_216239BB0();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    BOOL v6 = (char *)sub_216115A58(result, a2);
    uint64_t v8 = *a1;
    unint64_t v9 = (unint64_t)a1[1];
    if ((char *)v9 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64(v9);
      uint64_t v10 = &v6[v5];
    }
    else
    {
      uint64_t v10 = &v6[v5];
      do
      {
        long long v11 = *(_OWORD *)(v9 - 32);
        *((void *)v10 - 2) = *(void *)(v9 - 16);
        *((_OWORD *)v10 - 2) = v11;
        *(void *)(v9 - 24) = 0;
        *(void *)(v9 - 16) = 0;
        *(void *)(v9 - 32) = 0;
        *((_DWORD *)v10 - 2) = *(_DWORD *)(v9 - 8);
        v10 -= 32;
        v9 -= 32;
      }
      while ((char *)v9 != v8);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v15 = v12;
    int v13 = a1[2];
    a1[2] = &v6[32 * v7];
    int v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_21617591C((uint64_t)&v14);
  }
  return result;
}

void *sub_2162383CC(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t v2 = a1 + 2;
  unint64_t v3 = v4;
  uint64_t v5 = (void *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_216239BB0();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    v14[4] = v2;
    if (v10) {
      long long v11 = (char *)sub_216129BFC((uint64_t)v2, v10);
    }
    else {
      long long v11 = 0;
    }
    int64x2_t v12 = &v11[24 * v7];
    v14[0] = v11;
    v14[1] = v12;
    void v14[3] = &v11[24 * v10];
    *((void *)v12 + 2) = 0;
    *((void *)v12 + 1) = 0;
    *(void *)int64x2_t v12 = v12 + 8;
    _DWORD v14[2] = v12 + 24;
    sub_216239BC8(a1, v14);
    BOOL v6 = (void *)a1[1];
    sub_216239C6C(v14);
  }
  else
  {
    _OWORD v5[2] = 0;
    v5[1] = 0;
    *uint64_t v5 = v5 + 1;
    BOOL v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return v6 - 3;
}

void sub_2162384DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216239C6C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162384F0(void *a1)
{
  (*(void (**)(void))(*(void *)*a1 + 96))(*a1);
  *((unsigned char *)a1 + 72) = 0;
  unint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  if (v2 != v3)
  {
    sub_216239CE8(v2, v3, 126 - 2 * __clz((uint64_t)(v3 - v2) >> 5), 1);
    unint64_t v4 = (uint64_t *)a1[5];
    uint64_t v5 = (uint64_t *)a1[6];
    if (v5 == v4)
    {
      unint64_t v4 = (uint64_t *)a1[6];
    }
    else
    {
      uint64_t v6 = 0;
      LODWORD(i) = 0;
      do
      {
        unint64_t v8 = &v4[4 * v6];
        LODWORD(v32) = *((_DWORD *)v8 + 6);
        sub_21623CE70((uint64_t *)&v30, (int *)&v32, 1);
        for (unint64_t i = (int)i; ; sub_21623CEF0((uint64_t *)&v30, *(_DWORD *)(v9 + 32 * i + 24), *(_DWORD *)(v9 + 32 * i + 24)))
        {
          ++i;
          uint64_t v9 = a1[5];
          if (i >= (a1[6] - v9) >> 5) {
            break;
          }
          unint64_t v10 = (unsigned __int8 *)(v9 + 32 * i);
          uint64_t v11 = v10[23];
          if ((v11 & 0x80u) == 0) {
            uint64_t v12 = v10[23];
          }
          else {
            uint64_t v12 = *((void *)v10 + 1);
          }
          uint64_t v13 = *((unsigned __int8 *)v8 + 23);
          int v14 = (char)v13;
          if ((v13 & 0x80u) != 0) {
            uint64_t v13 = v8[1];
          }
          if (v12 != v13) {
            break;
          }
          if (v14 >= 0) {
            int64x2_t v15 = (unsigned __int8 *)v8;
          }
          else {
            int64x2_t v15 = (unsigned __int8 *)*v8;
          }
          if ((v11 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v15, *((void *)v10 + 1))) {
              break;
            }
          }
          else if (v10[23])
          {
            while (*v10 == *v15)
            {
              ++v10;
              ++v15;
              if (!--v11) {
                goto LABEL_21;
              }
            }
            break;
          }
LABEL_21:
          ;
        }
        uint64_t v16 = a1[2];
        uint64_t v17 = (uint64_t *)a1[3];
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - v16) >> 3);
        int v29 = -1431655765 * (((uint64_t)v17 - v16) >> 3);
        unint64_t v19 = v30;
        unint64_t v20 = a1[4];
        if ((unint64_t)v17 >= v20)
        {
          if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_216239BB0();
          }
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v16) >> 3);
          uint64_t v23 = 2 * v22;
          if (2 * v22 <= v18 + 1) {
            uint64_t v23 = v18 + 1;
          }
          if (v22 >= 0x555555555555555) {
            unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v24 = v23;
          }
          uint64_t v36 = a1 + 4;
          if (v24) {
            long long v25 = (char *)sub_216129BFC((uint64_t)(a1 + 4), v24);
          }
          else {
            long long v25 = 0;
          }
          __int16 v32 = (uint64_t *)v25;
          int v33 = (uint64_t *)&v25[24 * v18];
          uint64_t v34 = v33;
          __int16 v35 = &v25[24 * v24];
          sub_21623AE48(v33, v19, v31);
          v34 += 3;
          sub_216239BC8(a1 + 2, &v32);
          unint64_t v21 = (uint64_t *)a1[3];
          sub_216239C6C((void **)&v32);
        }
        else
        {
          sub_21623AE48(v17, v30, v31);
          unint64_t v21 = v17 + 3;
          a1[3] = v17 + 3;
        }
        a1[3] = v21;
        if (*((char *)v8 + 23) < 0)
        {
          __int16 v27 = v8;
          unint64_t v8 = (uint64_t *)*v8;
          uint64_t v26 = v27[1];
        }
        else
        {
          uint64_t v26 = *((unsigned __int8 *)v8 + 23);
        }
        (*(void (**)(void, uint64_t *, uint64_t, int *))(*(void *)*a1 + 80))(*a1, v8, v26, &v29);
        sub_21612A250((uint64_t)&v30, v31[0]);
        uint64_t v6 = (int)i;
        unint64_t v4 = (uint64_t *)a1[5];
        uint64_t v5 = (uint64_t *)a1[6];
      }
      while ((int)i < (unint64_t)(((char *)v5 - (char *)v4) >> 5));
    }
    __int16 v32 = v4;
    int v33 = v5;
    a1[5] = 0;
    a1[6] = 0;
    uint64_t v34 = (uint64_t *)a1[7];
    a1[7] = 0;
    __int16 v30 = (void **)&v32;
    sub_216175BF4(&v30);
  }
  return 1;
}

void sub_216238800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

uint64_t sub_216238840(void *a1, void *__src, uint64_t a3, int a4)
{
  uint64_t result = 0;
  if (a3 && (a3 & 0x7FFFFFFFFFFFFF80) == 0)
  {
    ++*((_DWORD *)a1 + 2);
    if (*((unsigned char *)a1 + 72))
    {
      sub_21612F5FC(__p, __src, 2 * a3);
      unint64_t v8 = a1[7];
      unint64_t v9 = a1[6];
      if (v9 >= v8)
      {
        uint64_t v21 = a1[5];
        uint64_t v22 = (uint64_t)(v9 - v21) >> 5;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59) {
          sub_216239BB0();
        }
        uint64_t v24 = v8 - v21;
        if (v24 >> 4 > v23) {
          unint64_t v23 = v24 >> 4;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        uint64_t v60 = a1 + 7;
        uint64_t v26 = (char *)sub_216115A58((uint64_t)(a1 + 7), v25);
        uint64_t v28 = &v26[32 * v22];
        long long v29 = *(_OWORD *)__p;
        *((void *)v28 + 2) = v56;
        *(_OWORD *)uint64_t v28 = v29;
        __p[1] = 0;
        unint64_t v56 = 0;
        __p[0] = 0;
        *((_DWORD *)v28 + 6) = a4;
        __int16 v30 = v28 + 32;
        uint64_t v31 = a1[5];
        unint64_t v32 = a1[6];
        if (v32 == v31)
        {
          int64x2_t v34 = vdupq_n_s64(v32);
        }
        else
        {
          do
          {
            long long v33 = *(_OWORD *)(v32 - 32);
            *((void *)v28 - 2) = *(void *)(v32 - 16);
            *((_OWORD *)v28 - 2) = v33;
            *(void *)(v32 - 24) = 0;
            *(void *)(v32 - 16) = 0;
            *(void *)(v32 - 32) = 0;
            *((_DWORD *)v28 - 2) = *(_DWORD *)(v32 - 8);
            v28 -= 32;
            v32 -= 32;
          }
          while (v32 != v31);
          int64x2_t v34 = *(int64x2_t *)(a1 + 5);
        }
        a1[5] = v28;
        a1[6] = v30;
        int64x2_t v58 = v34;
        __int16 v41 = (char *)a1[7];
        a1[7] = &v26[32 * v27];
        uint64_t v59 = v41;
        uint64_t v57 = v34.i64[0];
        sub_21617591C((uint64_t)&v57);
        int v42 = SHIBYTE(v56);
        a1[6] = v30;
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)__p;
        *(void *)(v9 + 16) = v56;
        *(_OWORD *)unint64_t v9 = v10;
        *(_DWORD *)(v9 + 24) = a4;
        a1[6] = v9 + 32;
      }
      return 1;
    }
    int v54 = 0;
    uint64_t v11 = 2 * a3;
    int v12 = (**(uint64_t (***)(void, void *, uint64_t, int *))*a1)(*a1, __src, 2 * a3, &v54);
    int v14 = a1 + 2;
    uint64_t v13 = a1[2];
    if (v12)
    {
      int64x2_t v15 = (uint64_t *)(v13 + 24 * v54);
      uint64_t v16 = v15[1];
      if (v16)
      {
        uint64_t v17 = v15 + 1;
        do
        {
          int v18 = *(_DWORD *)(v16 + 28);
          BOOL v19 = v18 < a4;
          if (v18 >= a4) {
            unint64_t v20 = (uint64_t *)v16;
          }
          else {
            unint64_t v20 = (uint64_t *)(v16 + 8);
          }
          if (!v19) {
            uint64_t v17 = (uint64_t *)v16;
          }
          uint64_t v16 = *v20;
        }
        while (*v20);
        if (v17 != v15 + 1 && *((_DWORD *)v17 + 7) <= a4) {
          return 0;
        }
      }
      sub_21623CEF0(v15, a4, a4);
      return 1;
    }
    int v35 = -1431655765 * ((unint64_t)(a1[3] - v13) >> 3);
    int v53 = a4;
    int v54 = v35;
    sub_21623CE70((uint64_t *)__p, &v53, 1);
    unint64_t v36 = a1[3];
    unint64_t v37 = a1[4];
    if (v36 >= v37)
    {
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v14) >> 3);
      unint64_t v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_216239BB0();
      }
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v14) >> 3);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0x555555555555555) {
        unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v46 = v44;
      }
      uint64_t v60 = a1 + 4;
      if (v46) {
        __int16 v47 = (char *)sub_216129BFC((uint64_t)(a1 + 4), v46);
      }
      else {
        __int16 v47 = 0;
      }
      __int16 v49 = (void **)&v47[24 * v43];
      uint64_t v57 = (uint64_t)v47;
      v58.i64[0] = (uint64_t)v49;
      uint64_t v59 = &v47[24 * v46];
      void *v49 = __p[0];
      uint64_t v50 = __p[1];
      v49[1] = __p[1];
      __int16 v51 = (char *)(v49 + 1);
      int v52 = v56;
      v49[2] = v56;
      if (v52)
      {
        v50[2] = v51;
        __p[0] = &__p[1];
        __p[1] = 0;
        unint64_t v56 = 0;
      }
      else
      {
        void *v49 = v51;
      }
      v58.i64[1] = (uint64_t)(v49 + 3);
      sub_216239BC8(a1 + 2, &v57);
      unint64_t v48 = a1[3];
      sub_216239C6C((void **)&v57);
    }
    else
    {
      *(void **)unint64_t v36 = __p[0];
      int v38 = __p[1];
      *(void **)(v36 + 8) = __p[1];
      unint64_t v39 = v36 + 8;
      int v40 = v56;
      *(void *)(v36 + 16) = v56;
      if (v40)
      {
        v38[2] = v39;
        __p[0] = &__p[1];
        __p[1] = 0;
        unint64_t v56 = 0;
      }
      else
      {
        *(void *)unint64_t v36 = v39;
      }
      unint64_t v48 = v36 + 24;
    }
    a1[3] = v48;
    sub_21612A250((uint64_t)__p, (void *)__p[1]);
    return (*(uint64_t (**)(void, void *, uint64_t, int *))(*(void *)*a1 + 80))(*a1, __src, v11, &v54);
  }
  return result;
}

void sub_216238C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
}

uint64_t sub_216238C80(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v16 = 0;
  uint64_t v7 = 2 * a3;
  if (!(**(unsigned int (***)(void, uint64_t, uint64_t, unsigned int *))*a1)(*a1, a2, 2 * a3, &v16)) {
    return 1;
  }
  unsigned int v8 = v16;
  uint64_t v9 = a1[2] + 24 * v16;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v9 + 8;
  do
  {
    int v12 = *(_DWORD *)(v10 + 28);
    BOOL v13 = v12 < a4;
    if (v12 >= a4) {
      int v14 = (uint64_t *)v10;
    }
    else {
      int v14 = (uint64_t *)(v10 + 8);
    }
    if (!v13) {
      uint64_t v11 = v10;
    }
    uint64_t v10 = *v14;
  }
  while (*v14);
  if (v11 == v9 + 8 || *(_DWORD *)(v11 + 28) > a4) {
    return 0;
  }
  --*((_DWORD *)a1 + 2);
  sub_2161EB3DC((uint64_t **)v9, (uint64_t *)v11);
  operator delete((void *)v11);
  if (!*(void *)(a1[2] + 24 * v8 + 16)) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 88))(*a1, a2, v7);
  }
  else {
    return 1;
  }
}

uint64_t sub_216238DBC(void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = 0;
  if ((**(unsigned int (***)(void, uint64_t, uint64_t, int *))*a1)(*a1, a2, 2 * a3, &v5)) {
    return a1[2] + 24 * v5;
  }
  else {
    return 0;
  }
}

void sub_216238E34(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  if (*(_DWORD *)(a1 + 8))
  {
    if (a4 == 512)
    {
      sub_216238E58(a1, a5);
    }
    else if (a3)
    {
      sub_216238F40(a1, a2, a3, a4, a5);
    }
  }
}

uint64_t sub_216238E58(uint64_t result, uint64_t a2)
{
  char v14 = 0;
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v2 = *(void *)(result + 24);
  if (v2 != v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = (void *)(v3 + 24 * v6);
      uint64_t v10 = (void *)*v7;
      unsigned int v8 = v7 + 1;
      uint64_t v9 = v10;
      if (v10 != v8) {
        break;
      }
LABEL_12:
      if (0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3) <= ++v6) {
        return result;
      }
    }
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, char *))(a2 + 16))(a2, *((unsigned int *)v9 + 7), &v14);
      if (v14) {
        break;
      }
      uint64_t v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          uint64_t v9 = v12;
        }
        while (!v13);
      }
      uint64_t v9 = v12;
      if (v12 == v8)
      {
        uint64_t v3 = *(void *)(v5 + 16);
        uint64_t v2 = *(void *)(v5 + 24);
        goto LABEL_12;
      }
    }
  }
  return result;
}

void sub_216238F40(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  char v5 = a4;
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v18 = a5;
  if ((a4 & 0x78) != 0 || (a4 & 0x82) == 0x82)
  {
    sub_216336768(a2, a3, (a4 >> 2) & 0x3E, 0, 0, &v23);
    int64x2_t v15 = *(unsigned int (****)(void))a1;
    if ((v5 & 4) != 0)
    {
      BOOL v19 = (void **)&unk_26C6C8B70;
      uint64_t v20 = a1;
      uint64_t v21 = &v18;
      uint64_t v22 = &v19;
      ((void (*)(unsigned int (***)(void), void **, void ***))(*v15)[15])(v15, &v23, &v19);
    }
    else
    {
      BOOL v19 = (void **)&unk_26C6C8B70;
      uint64_t v20 = a1;
      uint64_t v21 = &v18;
      uint64_t v22 = &v19;
      if ((v5 & 2) != 0) {
        ((void (*)(unsigned int (***)(void), void **, void ***, uint64_t))(*v15)[17])(v15, &v23, &v19, 0xFFFFFFFFLL);
      }
      else {
        ((void (*)(unsigned int (***)(void), void **, void ***))(*v15)[13])(v15, &v23, &v19);
      }
    }
    sub_216198AB4(&v19);
    unint64_t v23 = &unk_26C6F4D68;
    BOOL v19 = (void **)&v24;
    sub_2161986EC(&v19);
    return;
  }
  uint64_t v7 = 2 * a3;
  if ((a4 & 4) != 0)
  {
    unsigned int v16 = *(unsigned int (****)(void))a1;
    unint64_t v23 = &unk_26C6C8BC8;
    uint64_t v24 = a1;
    unint64_t v25 = &v18;
    uint64_t v26 = &v23;
    ((void (*)(unsigned int (***)(void), unsigned __int16 *, uint64_t, void **))(*v16)[1])(v16, a2, v7, &v23);
LABEL_21:
    sub_216198FB8(&v23);
    return;
  }
  if ((a4 & 2) != 0)
  {
    uint64_t v17 = *(unsigned int (****)(void))a1;
    unint64_t v23 = &unk_26C6C8BC8;
    uint64_t v24 = a1;
    unint64_t v25 = &v18;
    uint64_t v26 = &v23;
    ((void (*)(unsigned int (***)(void), unsigned __int16 *, uint64_t, void **, uint64_t))(*v17)[2])(v17, a2, v7, &v23, 0xFFFFFFFFLL);
    goto LABEL_21;
  }
  LODWORD(v23) = 0;
  if ((***(unsigned int (****)(void))a1)())
  {
    LOBYTE(v19) = 0;
    unsigned int v8 = (void *)(*(void *)(a1 + 16) + 24 * v23);
    uint64_t v11 = (void *)*v8;
    uint64_t v9 = v8 + 1;
    uint64_t v10 = v11;
    if (v11 != v9)
    {
      do
      {
        (*(void (**)(uint64_t, void, void ***))(v18 + 16))(v18, *((unsigned int *)v10 + 7), &v19);
        if ((_BYTE)v19) {
          break;
        }
        int v12 = (void *)v10[1];
        if (v12)
        {
          do
          {
            BOOL v13 = v12;
            int v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            BOOL v13 = (void *)v10[2];
            BOOL v14 = *v13 == (void)v10;
            uint64_t v10 = v13;
          }
          while (!v14);
        }
        uint64_t v10 = v13;
      }
      while (v13 != v9);
    }
  }
}

void sub_216239294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  a14 = &unk_26C6F4D68;
  a10 = (void **)&a15;
  sub_2161986EC(&a10);
  _Unwind_Resume(a1);
}

void **sub_2162392FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void ***__return_ptr))(**(void **)a1 + 24))(&v6);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  sub_21620FE1C((void ***)(a2 + 8), v3);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    char v5 = sub_21620FE6C(result);
    return (void **)MEMORY[0x2166CA800](v5, 0x20C4093837F09);
  }
  return result;
}

void **sub_21623938C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void ***__return_ptr))(**(void **)a1 + 40))(&v6);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  sub_21620FE1C((void ***)(a2 + 8), v3);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    char v5 = sub_21620FE6C(result);
    return (void **)MEMORY[0x2166CA800](v5, 0x20C4093837F09);
  }
  return result;
}

uint64_t sub_216239420(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(result + 8))
  {
    char v11 = 0;
    uint64_t v3 = (void *)(*(void *)(result + 16) + 24 * a2);
    uint64_t v6 = (void *)*v3;
    unint64_t v4 = v3 + 1;
    char v5 = v6;
    if (v6 != v4)
    {
      do
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, void, char *))(a3 + 16))(a3, *((unsigned int *)v5 + 7), &v11);
        if (v11) {
          break;
        }
        unsigned int v8 = (void *)v5[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            unsigned int v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v5[2];
            BOOL v10 = *v9 == (void)v5;
            char v5 = v9;
          }
          while (!v10);
        }
        char v5 = v9;
      }
      while (v9 != v4);
    }
  }
  return result;
}

void *sub_2162394CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = a6;
  uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, *(void *)(a2 + 8));
  if (result)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = *(void *)(a2 + 8);
    v14[0] = &unk_26C6C8B18;
    v14[1] = &v13;
    _DWORD v14[2] = a5;
    void v14[3] = v14;
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v11 + 56))(v11, v12, v14, a4);
    return sub_216198FB8(v14);
  }
  return result;
}

void sub_2162395CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_2162395E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void v5[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  v5[0] = &unk_26C6F5E18;
  v5[1] = a1;
  _OWORD v5[2] = a3;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v3 + 104))(v3, a2, v5);
  return sub_216198AB4(v5);
}

void sub_21623968C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198AB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_2162396A0(unint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  v6[4] = *MEMORY[0x263EF8340];
  unint64_t v4 = *a1;
  v6[0] = &unk_26C6F5E98;
  v6[1] = a1;
  void v6[2] = a4;
  v6[3] = v6;
  sub_21623BE74(v4, a2, (uint64_t)v6, 1u, a3);
  return sub_216211814(v6);
}

void sub_216239734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216211814((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216239748(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void v5[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  v5[0] = &unk_26C6F5F18;
  v5[1] = a1;
  _OWORD v5[2] = a3;
  v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v3 + 136))(v3, a2, v5);
  return sub_216198AB4(v5);
}

void sub_2162397F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198AB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216239808(unint64_t *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  v7[4] = *MEMORY[0x263EF8340];
  unint64_t v5 = *a1;
  v7[0] = &unk_26C6F6098;
  v7[1] = a1;
  void v7[2] = a4;
  v7[3] = v7;
  sub_2162398A8(v5, a2, a3, (uint64_t)v7, a5);
  return sub_216211814(v7);
}

void sub_216239894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216211814((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_2162398A8(unint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  void v24[4] = *MEMORY[0x263EF8340];
  BOOL v10 = off_26B4ABDB0;
  if ((*(unsigned char *)off_26B4ABDB0(&off_26B4ABDB0) & 1) == 0)
  {
    uint64_t v20 = (void *)off_26B4ABD98(&off_26B4ABD98);
    sub_216210E8C(v20, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210850, v20);
    *(unsigned char *)v10(&off_26B4ABDBsub_216195244(&a9, 0) = 1;
  }
  uint64_t v11 = off_26B4ABDE0;
  if ((*(unsigned char *)off_26B4ABDE0(&off_26B4ABDE0) & 1) == 0)
  {
    uint64_t v21 = (void *)off_26B4ABDC8(&off_26B4ABDC8);
    sub_216210F04(v21, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210884, v21);
    *(unsigned char *)v11(&off_26B4ABDEsub_216195244(&a9, 0) = 1;
  }
  char v23 = 0;
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = &unk_26C6F5F98;
  v12[1] = a1;
  uint64_t v12[2] = a4;
  *((_DWORD *)v12 + 6) = a3;
  *((_DWORD *)v12 + 7) = a5;
  void v24[3] = v12;
  (*(void (**)(void ***__return_ptr, unint64_t))(*(void *)a1 + 24))(&v22, a1);
  off_26B4ABD98(&off_26B4ABD98);
  uint64_t v13 = (uint64_t *)off_26B4ABDC8(&off_26B4ABDC8);
  sub_21623C0F0(a1, a2, (uint64_t)v24, v14, 1u, 1u, 1u, &v23, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  uint64_t v17 = v22;
  uint64_t v22 = 0;
  if (v17)
  {
    uint64_t v18 = sub_21620FE6C(v17);
    MEMORY[0x2166CA800](v18, 0x20C4093837F09);
  }
  return sub_21623CC0C(v24);
}

void sub_216239AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void **);
  uint64_t v13 = va_arg(va1, void);
  sub_21620FE1C((void ***)va, 0);
  sub_21623CC0C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_216239B24(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        sub_21612A250((uint64_t)(v4 - 24), *((void **)v4 - 2));
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216239BB0()
{
}

uint64_t *sub_216239BC8(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      uint64_t v7 = (uint64_t *)(v2 + v5 - 16);
      uint64_t v8 = *v7;
      *(void *)(v4 + v5 - 16) = *v7;
      uint64_t v9 = v4 + v5 - 16;
      uint64_t v10 = *(void *)(v2 + v5 - 8);
      *(void *)(v6 - 8) = v10;
      if (v10)
      {
        *(void *)(v8 + 16) = v9;
        *(void *)(v2 + v5 - 24) = v7;
        *uint64_t v7 = 0;
        *(void *)(v2 + v5 - 8) = 0;
      }
      else
      {
        *(void *)(v6 - 24) = v9;
      }
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v11 = *result;
  *uint64_t result = v4;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void **sub_216239C6C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216239CA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_21612A250(i - 24, *(void **)(i - 16));
  }
}

void sub_216239CE8(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  while (2)
  {
    uint64_t v10 = (long long *)(a2 - 32);
    uint64_t v102 = (long long *)(a2 - 64);
    unint64_t v104 = (void **)a2;
    uint64_t v11 = (long long *)(a2 - 96);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = a2 - v12;
        uint64_t v14 = (uint64_t)(a2 - v12) >> 5;
        if (v5 || !v4)
        {
          switch(v14)
          {
            case 0:
            case 1:
              return;
            case 2:
              if ((sub_216179024(v10, (void **)a1) & 0x80) != 0)
              {
                long long v44 = *(_OWORD *)a1;
                uint64_t v107 = *(void *)(a1 + 16);
                *(_OWORD *)std::string __p = v44;
                long long v45 = *v10;
                *(void *)(a1 + 16) = *((void *)v10 + 2);
                *(_OWORD *)a1 = v45;
                long long v46 = *(_OWORD *)__p;
                *((void *)v10 + 2) = v107;
                *uint64_t v10 = v46;
                int v47 = *(_DWORD *)(a1 + 24);
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
                *(_DWORD *)(a2 - 8) = v47;
              }
              break;
            case 3:
              sub_21623A988((long long *)a1, (long long *)(a1 + 32), v10);
              break;
            case 4:
              sub_21623AD48(a1, a1 + 32, a1 + 64, (uint64_t)v10);
              break;
            case 5:
              sub_21623A83C(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)v10);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v13 <= 767)
        {
          if (a4)
          {
            if (a1 != a2)
            {
              unint64_t v48 = (void *)(a1 + 32);
              if (a1 + 32 != a2)
              {
                uint64_t v49 = 0;
                unint64_t v50 = a1;
                do
                {
                  __int16 v51 = v48;
                  if ((sub_216179024(v48, (void **)v50) & 0x80) != 0)
                  {
                    long long v52 = *(_OWORD *)v51;
                    uint64_t v107 = v51[2];
                    *(_OWORD *)std::string __p = v52;
                    v51[1] = 0;
                    v51[2] = 0;
                    void *v51 = 0;
                    int v108 = *(_DWORD *)(v50 + 56);
                    uint64_t v53 = v49;
                    while (1)
                    {
                      uint64_t v54 = a1 + v53;
                      char v55 = (void **)(a1 + v53 + 32);
                      if (*(char *)(a1 + v53 + 55) < 0) {
                        operator delete(*v55);
                      }
                      *(_OWORD *)char v55 = *(_OWORD *)v54;
                      *(void *)(a1 + v53 + 48) = *(void *)(v54 + 16);
                      *(unsigned char *)(v54 + 23) = 0;
                      *(unsigned char *)uint64_t v54 = 0;
                      *(_DWORD *)(v54 + 56) = *(_DWORD *)(v54 + 24);
                      if (!v53) {
                        break;
                      }
                      v53 -= 32;
                      if ((sub_216179024(__p, (void **)(v53 + a1)) & 0x80) == 0)
                      {
                        uint64_t v56 = a1 + v53 + 32;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v56 = a1;
LABEL_84:
                    if (*(char *)(v56 + 23) < 0) {
                      operator delete(*(void **)v56);
                    }
                    long long v57 = *(_OWORD *)__p;
                    *(void *)(v56 + 16) = v107;
                    *(_OWORD *)uint64_t v56 = v57;
                    *(_DWORD *)(v56 + 24) = v108;
                    a2 = (unint64_t)v104;
                  }
                  unint64_t v48 = v51 + 4;
                  v49 += 32;
                  unint64_t v50 = (unint64_t)v51;
                }
                while (v51 + 4 != (void *)a2);
              }
            }
          }
          else if (a1 != a2)
          {
            unint64_t v92 = (void *)(a1 + 32);
            if (a1 + 32 != a2)
            {
              uint64_t v93 = (_DWORD *)(a1 + 56);
              do
              {
                unint64_t v94 = v92;
                if ((sub_216179024(v92, (void **)a1) & 0x80) != 0)
                {
                  long long v95 = *(_OWORD *)v94;
                  uint64_t v107 = v94[2];
                  *(_OWORD *)std::string __p = v95;
                  v94[1] = 0;
                  v94[2] = 0;
                  *unint64_t v94 = 0;
                  int v108 = *(_DWORD *)(a1 + 56);
                  uint64_t v96 = v93;
                  do
                  {
                    int v97 = (void **)(v96 - 6);
                    if (*((char *)v96 - 1) < 0) {
                      operator delete(*v97);
                    }
                    *(_OWORD *)int v97 = *(_OWORD *)(v96 - 14);
                    *((void *)v96 - 1) = *((void *)v96 - 5);
                    *((unsigned char *)v96 - 33) = 0;
                    *((unsigned char *)v96 - 56) = 0;
                    unint64_t v98 = v96 - 8;
                    *uint64_t v96 = *(v96 - 8);
                    char v99 = sub_216179024(__p, (void **)v96 - 11);
                    v96 -= 8;
                  }
                  while (v99 < 0);
                  int v100 = (void **)(v98 - 6);
                  if (*((char *)v98 - 1) < 0) {
                    operator delete(*v100);
                  }
                  long long v101 = *(_OWORD *)__p;
                  *((void *)v98 - 1) = v107;
                  *(_OWORD *)int v100 = v101;
                  HIBYTE(v107) = 0;
                  LOBYTE(__p[0]) = 0;
                  *unint64_t v98 = v108;
                  a2 = (unint64_t)v104;
                }
                unint64_t v92 = v94 + 4;
                v93 += 8;
                a1 = (unint64_t)v94;
              }
              while (v94 + 4 != (void *)a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            int64_t v58 = (unint64_t)(v14 - 2) >> 1;
            int64_t v59 = v58;
            do
            {
              int64_t v60 = v59;
              if (v58 >= v59)
              {
                uint64_t v61 = (2 * v59) | 1;
                unint64_t v62 = a1 + 32 * v61;
                if (2 * v59 + 2 < v14 && (sub_216179024((void *)(a1 + 32 * v61), (void **)(v62 + 32)) & 0x80u) != 0)
                {
                  v62 += 32;
                  uint64_t v61 = 2 * v60 + 2;
                }
                unint64_t v63 = a1 + 32 * v60;
                if ((sub_216179024((void *)v62, (void **)v63) & 0x80) == 0)
                {
                  long long v64 = *(_OWORD *)v63;
                  uint64_t v107 = *(void *)(v63 + 16);
                  *(_OWORD *)std::string __p = v64;
                  *(void *)(v63 + 8) = 0;
                  *(void *)(v63 + 16) = 0;
                  *(void *)unint64_t v63 = 0;
                  int v108 = *(_DWORD *)(a1 + 32 * v60 + 24);
                  do
                  {
                    unint64_t v65 = v62;
                    if (*(char *)(v63 + 23) < 0) {
                      operator delete(*(void **)v63);
                    }
                    long long v66 = *(_OWORD *)v62;
                    *(void *)(v63 + 16) = *(void *)(v62 + 16);
                    *(_OWORD *)unint64_t v63 = v66;
                    *(unsigned char *)(v62 + 23) = 0;
                    *(unsigned char *)unint64_t v62 = 0;
                    *(_DWORD *)(v63 + 24) = *(_DWORD *)(v62 + 24);
                    if (v58 < v61) {
                      break;
                    }
                    uint64_t v67 = (2 * v61) | 1;
                    unint64_t v62 = a1 + 32 * v67;
                    uint64_t v68 = 2 * v61 + 2;
                    if (v68 < v14 && (sub_216179024((void *)(a1 + 32 * v67), (void **)(v62 + 32)) & 0x80u) != 0)
                    {
                      v62 += 32;
                      uint64_t v67 = v68;
                    }
                    unint64_t v63 = v65;
                    uint64_t v61 = v67;
                  }
                  while ((sub_216179024((void *)v62, __p) & 0x80) == 0);
                  if (*(char *)(v65 + 23) < 0) {
                    operator delete(*(void **)v65);
                  }
                  long long v69 = *(_OWORD *)__p;
                  *(void *)(v65 + 16) = v107;
                  *(_OWORD *)unint64_t v65 = v69;
                  *(_DWORD *)(v65 + 24) = v108;
                }
              }
              int64_t v59 = v60 - 1;
            }
            while (v60);
            uint64_t v70 = (unint64_t)v13 >> 5;
            uint64_t v71 = v104;
            do
            {
              uint64_t v72 = 0;
              uint64_t v73 = v71;
              uint64_t v74 = *(void **)a1;
              *(void *)&long long v109 = *(void *)(a1 + 8);
              *(void *)((char *)&v109 + 7) = *(void *)(a1 + 15);
              char v105 = *(unsigned char *)(a1 + 23);
              *(void *)(a1 + 8) = 0;
              *(void *)(a1 + 16) = 0;
              *(void *)a1 = 0;
              int v103 = *(_DWORD *)(a1 + 24);
              unint64_t v75 = a1;
              do
              {
                uint64_t v76 = v75 + 32 * v72 + 32;
                uint64_t v77 = 2 * v72;
                uint64_t v72 = (2 * v72) | 1;
                uint64_t v78 = v77 + 2;
                if (v77 + 2 < v70 && (sub_216179024((void *)v76, (void **)(v76 + 32)) & 0x80u) != 0)
                {
                  v76 += 32;
                  uint64_t v72 = v78;
                }
                if (*(char *)(v75 + 23) < 0) {
                  operator delete(*(void **)v75);
                }
                long long v79 = *(_OWORD *)v76;
                *(void *)(v75 + 16) = *(void *)(v76 + 16);
                *(_OWORD *)unint64_t v75 = v79;
                *(unsigned char *)(v76 + 23) = 0;
                *(unsigned char *)uint64_t v76 = 0;
                *(_DWORD *)(v75 + 24) = *(_DWORD *)(v76 + 24);
                unint64_t v75 = v76;
              }
              while (v72 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
              v71 -= 4;
              int v80 = *(char *)(v76 + 23);
              if ((void **)v76 == v73 - 4)
              {
                if (v80 < 0) {
                  operator delete(*(void **)v76);
                }
                *(void *)uint64_t v76 = v74;
                uint64_t v90 = *(void *)((char *)&v109 + 7);
                *(void *)(v76 + 8) = v109;
                *(void *)(v76 + 15) = v90;
                *(unsigned char *)(v76 + 23) = v105;
                *(_DWORD *)(v76 + 24) = v103;
              }
              else
              {
                if (v80 < 0) {
                  operator delete(*(void **)v76);
                }
                long long v81 = *(_OWORD *)v71;
                *(void *)(v76 + 16) = *(v73 - 2);
                *(_OWORD *)uint64_t v76 = v81;
                *((unsigned char *)v73 - 9) = 0;
                *((unsigned char *)v73 - 32) = 0;
                *(_DWORD *)(v76 + 24) = *((_DWORD *)v73 - 2);
                if (*((char *)v73 - 9) < 0) {
                  operator delete(*v71);
                }
                *(v73 - 4) = v74;
                long long v82 = (void *)v109;
                *(void **)((char *)v73 - 17) = *(void **)((char *)&v109 + 7);
                *(v73 - 3) = v82;
                *((unsigned char *)v73 - 9) = v105;
                *((_DWORD *)v73 - 2) = v103;
                uint64_t v83 = v76 + 32 - a1;
                if (v83 >= 33)
                {
                  unint64_t v84 = (((unint64_t)v83 >> 5) - 2) >> 1;
                  unint64_t v85 = a1 + 32 * v84;
                  if ((sub_216179024((void *)v85, (void **)v76) & 0x80) != 0)
                  {
                    long long v86 = *(_OWORD *)v76;
                    uint64_t v107 = *(void *)(v76 + 16);
                    *(_OWORD *)std::string __p = v86;
                    *(void *)(v76 + 8) = 0;
                    *(void *)(v76 + 16) = 0;
                    *(void *)uint64_t v76 = 0;
                    int v108 = *(_DWORD *)(v76 + 24);
                    do
                    {
                      uint64_t v87 = v85;
                      if (*(char *)(v76 + 23) < 0) {
                        operator delete(*(void **)v76);
                      }
                      long long v88 = *(_OWORD *)v85;
                      *(void *)(v76 + 16) = *(void *)(v85 + 16);
                      *(_OWORD *)uint64_t v76 = v88;
                      *(unsigned char *)(v85 + 23) = 0;
                      *(unsigned char *)unint64_t v85 = 0;
                      *(_DWORD *)(v76 + 24) = *(_DWORD *)(v85 + 24);
                      if (!v84) {
                        break;
                      }
                      unint64_t v84 = (v84 - 1) >> 1;
                      unint64_t v85 = a1 + 32 * v84;
                      uint64_t v76 = v87;
                    }
                    while ((sub_216179024((void *)v85, __p) & 0x80) != 0);
                    if (*(char *)(v87 + 23) < 0) {
                      operator delete(*(void **)v87);
                    }
                    long long v89 = *(_OWORD *)__p;
                    *(void *)(v87 + 16) = v107;
                    *(_OWORD *)uint64_t v87 = v89;
                    *(_DWORD *)(v87 + 24) = v108;
                  }
                }
              }
            }
            while (v70-- > 2);
          }
          return;
        }
        unint64_t v15 = (unint64_t)v14 >> 1;
        unint64_t v16 = a1 + 32 * ((unint64_t)v14 >> 1);
        if ((unint64_t)v13 <= 0x1000)
        {
          sub_21623A988((long long *)v16, (long long *)a1, v10);
        }
        else
        {
          sub_21623A988((long long *)a1, (long long *)v16, v10);
          sub_21623A988((long long *)(a1 + 32), (long long *)(v16 - 32), v102);
          sub_21623A988((long long *)(a1 + 64), (long long *)(a1 + 32 + 32 * v15), v11);
          sub_21623A988((long long *)(v16 - 32), (long long *)v16, (long long *)(a1 + 32 + 32 * v15));
          long long v17 = *(_OWORD *)a1;
          uint64_t v107 = *(void *)(a1 + 16);
          *(_OWORD *)std::string __p = v17;
          uint64_t v18 = *(void *)(v16 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v16;
          *(void *)(a1 + 16) = v18;
          long long v19 = *(_OWORD *)__p;
          *(void *)(v16 + 16) = v107;
          *(_OWORD *)unint64_t v16 = v19;
          LODWORD(v18) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(v16 + 24);
          *(_DWORD *)(v16 + 24) = v18;
        }
        --a3;
        if ((a4 & 1) != 0 || (sub_216179024((void *)(a1 - 32), (void **)a1) & 0x80) != 0) {
          break;
        }
        long long v33 = *(_OWORD *)a1;
        uint64_t v107 = *(void *)(a1 + 16);
        *(_OWORD *)std::string __p = v33;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        int v108 = *(_DWORD *)(a1 + 24);
        if ((sub_216179024(__p, (void **)v10) & 0x80) != 0)
        {
          unint64_t v12 = a1;
          a2 = (unint64_t)v104;
          do
            v12 += 32;
          while ((sub_216179024(__p, (void **)v12) & 0x80) == 0);
        }
        else
        {
          int64x2_t v34 = (void **)(a1 + 32);
          a2 = (unint64_t)v104;
          do
          {
            unint64_t v12 = (unint64_t)v34;
            if (v34 >= v104) {
              break;
            }
            char v35 = sub_216179024(__p, v34);
            int64x2_t v34 = (void **)(v12 + 32);
          }
          while ((v35 & 0x80) == 0);
        }
        unint64_t v36 = a2;
        if (v12 < a2)
        {
          unint64_t v36 = a2;
          do
            v36 -= 32;
          while ((sub_216179024(__p, (void **)v36) & 0x80) != 0);
        }
        while (v12 < v36)
        {
          long long v37 = *(_OWORD *)v12;
          uint64_t v110 = *(void **)(v12 + 16);
          long long v109 = v37;
          long long v38 = *(_OWORD *)v36;
          *(void *)(v12 + 16) = *(void *)(v36 + 16);
          *(_OWORD *)unint64_t v12 = v38;
          long long v39 = v109;
          *(void *)(v36 + 16) = v110;
          *(_OWORD *)unint64_t v36 = v39;
          int v40 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v36 + 24);
          *(_DWORD *)(v36 + 24) = v40;
          do
            v12 += 32;
          while ((sub_216179024(__p, (void **)v12) & 0x80) == 0);
          do
            v36 -= 32;
          while ((sub_216179024(__p, (void **)v36) & 0x80) != 0);
        }
        __int16 v41 = (void **)(v12 - 32);
        BOOL v4 = v12 - 32 >= a1;
        BOOL v5 = v12 - 32 == a1;
        if (v12 - 32 != a1)
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v42 = *(_OWORD *)v41;
          *(void *)(a1 + 16) = *(void *)(v12 - 16);
          *(_OWORD *)a1 = v42;
          *(unsigned char *)(v12 - 9) = 0;
          *(unsigned char *)(v12 - 32) = 0;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(v12 - 8);
        }
        if (*(char *)(v12 - 9) < 0) {
          operator delete(*v41);
        }
        long long v43 = *(_OWORD *)__p;
        *(void *)(v12 - 16) = v107;
        *(_OWORD *)__int16 v41 = v43;
        HIBYTE(v107) = 0;
        LOBYTE(__p[0]) = 0;
        *(_DWORD *)(v12 - 8) = v108;
        if (SHIBYTE(v107) < 0) {
          operator delete(__p[0]);
        }
LABEL_40:
        a4 = 0;
      }
      uint64_t v20 = 0;
      long long v21 = *(_OWORD *)a1;
      uint64_t v107 = *(void *)(a1 + 16);
      *(_OWORD *)std::string __p = v21;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      int v108 = *(_DWORD *)(a1 + 24);
      do
        v20 += 32;
      while ((sub_216179024((void *)(v20 + a1), __p) & 0x80) != 0);
      unint64_t v22 = a1 + v20;
      char v23 = v104;
      if (v20 == 32)
      {
        char v23 = v104;
        do
        {
          if (v22 >= (unint64_t)v23) {
            break;
          }
          v23 -= 4;
        }
        while ((sub_216179024(v23, __p) & 0x80) == 0);
      }
      else
      {
        do
          v23 -= 4;
        while ((sub_216179024(v23, __p) & 0x80) == 0);
      }
      unint64_t v12 = a1 + v20;
      if (v22 >= (unint64_t)v23)
      {
        a2 = (unint64_t)v104;
      }
      else
      {
        uint64_t v24 = v23;
        a2 = (unint64_t)v104;
        do
        {
          long long v25 = *(_OWORD *)v12;
          uint64_t v110 = *(void **)(v12 + 16);
          long long v109 = v25;
          long long v26 = *(_OWORD *)v24;
          *(void *)(v12 + 16) = v24[2];
          *(_OWORD *)unint64_t v12 = v26;
          long long v27 = v109;
          void v24[2] = v110;
          *(_OWORD *)uint64_t v24 = v27;
          int v28 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v12 + 24) = *((_DWORD *)v24 + 6);
          *((_DWORD *)v24 + 6) = v28;
          do
            v12 += 32;
          while ((sub_216179024((void *)v12, __p) & 0x80) != 0);
          do
            v24 -= 4;
          while ((sub_216179024(v24, __p) & 0x80) == 0);
        }
        while (v12 < (unint64_t)v24);
      }
      long long v29 = (void **)(v12 - 32);
      if (v12 - 32 != a1)
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v30 = *(_OWORD *)v29;
        *(void *)(a1 + 16) = *(void *)(v12 - 16);
        *(_OWORD *)a1 = v30;
        *(unsigned char *)(v12 - 9) = 0;
        *(unsigned char *)(v12 - 32) = 0;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(v12 - 8);
      }
      if (*(char *)(v12 - 9) < 0) {
        operator delete(*v29);
      }
      long long v31 = *(_OWORD *)__p;
      *(void *)(v12 - 16) = v107;
      *(_OWORD *)long long v29 = v31;
      HIBYTE(v107) = 0;
      LOBYTE(__p[0]) = 0;
      *(_DWORD *)(v12 - 8) = v108;
      if (SHIBYTE(v107) < 0) {
        operator delete(__p[0]);
      }
      if (v22 < (unint64_t)v23)
      {
LABEL_39:
        sub_216239CE8(a1, v12 - 32, a3, a4 & 1);
        goto LABEL_40;
      }
      BOOL v32 = sub_21623AAF8(a1, v12 - 32);
      if (sub_21623AAF8(v12, a2)) {
        break;
      }
      if (!v32) {
        goto LABEL_39;
      }
    }
    a2 = v12 - 32;
    if (!v32) {
      continue;
    }
    break;
  }
}

__n128 sub_21623A83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_21623AD48(a1, a2, a3, a4);
  if ((sub_216179024((void *)a5, (void **)a4) & 0x80) != 0)
  {
    uint64_t v11 = *(void *)(a4 + 16);
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(void *)(a5 + 16) = v11;
    LODWORD(v11) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a5 + 24) = v11;
    if ((sub_216179024((void *)a4, (void **)a3) & 0x80) != 0)
    {
      uint64_t v14 = *(void *)(a3 + 16);
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v16;
      *(_OWORD *)a4 = v15;
      *(void *)(a4 + 16) = v14;
      LODWORD(v14) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 24) = v14;
      if ((sub_216179024((void *)a3, (void **)a2) & 0x80) != 0)
      {
        uint64_t v17 = *(void *)(a2 + 16);
        __n128 v18 = *(__n128 *)a2;
        uint64_t v19 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v19;
        *(__n128 *)a3 = v18;
        *(void *)(a3 + 16) = v17;
        LODWORD(v17) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 24) = v17;
        if ((sub_216179024((void *)a2, (void **)a1) & 0x80) != 0)
        {
          uint64_t v20 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v21 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v20;
          LODWORD(v2sub_216195244(&a9, 0) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a2 + 24) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_21623A988(long long *a1, long long *a2, long long *a3)
{
  char v6 = sub_216179024(a2, (void **)a1);
  uint64_t result = sub_216179024(a3, (void **)a2);
  if (v6 < 0)
  {
    if ((char)result < 0)
    {
      long long v15 = (int *)a1 + 6;
      uint64_t v19 = *((void *)a1 + 2);
      long long v20 = *a1;
      uint64_t v22 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v22;
    }
    else
    {
      uint64_t v16 = *((void *)a1 + 2);
      long long v17 = *a1;
      uint64_t v18 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v18;
      *a2 = v17;
      *((void *)a2 + 2) = v16;
      long long v15 = (int *)a2 + 6;
      LODWORD(v18) = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v18;
      uint64_t result = sub_216179024(a3, (void **)a2);
      if ((result & 0x80) == 0) {
        return result;
      }
      uint64_t v19 = *((void *)a2 + 2);
      long long v20 = *a2;
      uint64_t v21 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v21;
    }
    *a3 = v20;
    *((void *)a3 + 2) = v19;
    uint64_t v11 = (int *)a3 + 6;
    goto LABEL_10;
  }
  if ((char)result < 0)
  {
    uint64_t v8 = *((void *)a2 + 2);
    long long v9 = *a2;
    uint64_t v10 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v10;
    *a3 = v9;
    *((void *)a3 + 2) = v8;
    uint64_t v11 = (int *)a2 + 6;
    LODWORD(v8) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = v8;
    uint64_t result = sub_216179024(a2, (void **)a1);
    if ((result & 0x80) != 0)
    {
      uint64_t v12 = *((void *)a1 + 2);
      long long v13 = *a1;
      uint64_t v14 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v14;
      *a2 = v13;
      *((void *)a2 + 2) = v12;
      long long v15 = (int *)a1 + 6;
LABEL_10:
      int v23 = *v15;
      *long long v15 = *v11;
      *uint64_t v11 = v23;
    }
  }
  return result;
}

BOOL sub_21623AAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v6 = (_OWORD *)(a2 - 32);
      if ((sub_216179024((void *)(a2 - 32), (void **)a1) & 0x80) != 0)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *char v6 = v8;
        *(void *)(a2 - 16) = v7;
        LODWORD(v7) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v7;
      }
      return 1;
    case 3:
      sub_21623A988((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      sub_21623AD48(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_21623A83C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      uint64_t v10 = (void **)(a1 + 64);
      sub_21623A988((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v11 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((sub_216179024((void *)v11, v10) & 0x80) != 0)
    {
      long long v19 = *(_OWORD *)v11;
      uint64_t v20 = *(void *)(v11 + 16);
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)uint64_t v11 = 0;
      int v21 = *(_DWORD *)(v11 + 24);
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        uint64_t v16 = (void **)(a1 + v14 + 96);
        if (*(char *)(a1 + v14 + 119) < 0) {
          operator delete(*v16);
        }
        *(_OWORD *)uint64_t v16 = *(_OWORD *)(v15 + 64);
        *(void *)(a1 + v14 + 112) = *(void *)(v15 + 80);
        *(unsigned char *)(v15 + 87) = 0;
        *(unsigned char *)(v15 + 64) = 0;
        *(_DWORD *)(v15 + 12sub_216195244(&a9, 0) = *(_DWORD *)(v15 + 88);
        if (v14 == -64) {
          break;
        }
        char v17 = sub_216179024(&v19, (void **)(a1 + v14 + 32));
        v14 -= 32;
        if ((v17 & 0x80) == 0)
        {
          uint64_t v18 = a1 + v14 + 96;
          goto LABEL_14;
        }
      }
      uint64_t v18 = a1;
LABEL_14:
      if (*(char *)(v18 + 23) < 0) {
        operator delete(*(void **)v18);
      }
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + 16) = v20;
      HIBYTE(v2sub_216195244(&a9, 0) = 0;
      LOBYTE(v19) = 0;
      *(_DWORD *)(v18 + 24) = v21;
      if (++v13 == 8) {
        return v11 + 32 == a2;
      }
    }
    uint64_t v10 = (void **)v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_21623AD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_21623A988((long long *)a1, (long long *)a2, (long long *)a3);
  if ((sub_216179024((void *)a4, (void **)a3) & 0x80) != 0)
  {
    uint64_t v9 = *(void *)(a3 + 16);
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v9;
    if ((sub_216179024((void *)a3, (void **)a2) & 0x80) != 0)
    {
      uint64_t v12 = *(void *)(a2 + 16);
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v14;
      *(_OWORD *)a3 = v13;
      *(void *)(a3 + 16) = v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v12;
      if ((sub_216179024((void *)a2, (void **)a1) & 0x80) != 0)
      {
        uint64_t v15 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v16 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v15;
        LODWORD(v15) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v15;
      }
    }
  }
  return result;
}

uint64_t *sub_21623AE48(uint64_t *a1, void *a2, void *a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      sub_21623AEF8(a1, v4, *((_DWORD *)v6 + 7), *((_DWORD *)v6 + 7));
      uint64_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          char v6 = v8;
        }
        while (!v9);
      }
      char v6 = v8;
    }
    while (v8 != a3);
  }
  return a1;
}

void sub_21623AEE0(_Unwind_Exception *a1)
{
  sub_21612A250(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_21623AEF8(uint64_t *result, uint64_t *a2, int a3, int a4)
{
  BOOL v5 = (uint64_t **)a2;
  char v6 = (uint64_t **)result;
  uint64_t v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (int v8 = *((_DWORD *)a2 + 7), v8 > a3))
  {
    BOOL v9 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      uint64_t v11 = a2;
LABEL_16:
      if (v9) {
        char v17 = (uint64_t **)v11;
      }
      else {
        char v17 = (uint64_t **)a2;
      }
      if (v9) {
        long long v13 = (uint64_t **)(v11 + 1);
      }
      else {
        long long v13 = (uint64_t **)a2;
      }
      if (*v13) {
        return result;
      }
      BOOL v5 = v17;
LABEL_43:
      int v23 = (uint64_t *)operator new(0x20uLL);
      *((_DWORD *)v23 + 7) = a4;
      return sub_21612A650(v6, (uint64_t)v5, v13, v23);
    }
    if (v9)
    {
      long long v10 = (uint64_t *)*a2;
      do
      {
        uint64_t v11 = v10;
        long long v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        uint64_t v11 = (uint64_t *)v15[2];
        BOOL v16 = *v11 == (void)v15;
        uint64_t v15 = v11;
      }
      while (v16);
    }
    if (*((_DWORD *)v11 + 7) < a3) {
      goto LABEL_16;
    }
    uint64_t v18 = *v7;
    long long v13 = (uint64_t **)(result + 1);
    BOOL v5 = (uint64_t **)(result + 1);
    if (!*v7) {
      goto LABEL_43;
    }
    while (1)
    {
      while (1)
      {
        BOOL v5 = (uint64_t **)v18;
        int v19 = *((_DWORD *)v18 + 7);
        if (v19 <= a3) {
          break;
        }
        uint64_t v18 = (uint64_t *)*v18;
        long long v13 = v5;
        if (!*v5) {
          goto LABEL_43;
        }
      }
      if (v19 >= a3) {
        break;
      }
      uint64_t v18 = (uint64_t *)v18[1];
      if (!v18) {
        goto LABEL_30;
      }
    }
  }
  else
  {
    if (v8 >= a3) {
      return result;
    }
    long long v13 = (uint64_t **)(a2 + 1);
    uint64_t v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        long long v13 = (uint64_t **)v12;
        uint64_t v12 = (uint64_t *)*v12;
        BOOL v5 = v13;
        uint64_t v14 = v13;
      }
      while (v12);
    }
    else
    {
      uint64_t v14 = (uint64_t **)a2;
      do
      {
        uint64_t v20 = (uint64_t *)v14;
        uint64_t v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v20);
    }
    if (v14 == v7) {
      goto LABEL_43;
    }
    if (*((_DWORD *)v14 + 7) > a3) {
      goto LABEL_43;
    }
    int v21 = *v7;
    long long v13 = (uint64_t **)(result + 1);
    BOOL v5 = (uint64_t **)(result + 1);
    if (!*v7) {
      goto LABEL_43;
    }
    while (1)
    {
      while (1)
      {
        BOOL v5 = (uint64_t **)v21;
        int v22 = *((_DWORD *)v21 + 7);
        if (v22 <= a3) {
          break;
        }
        int v21 = (uint64_t *)*v21;
        long long v13 = v5;
        if (!*v5) {
          goto LABEL_43;
        }
      }
      if (v22 >= a3) {
        break;
      }
      int v21 = (uint64_t *)v21[1];
      if (!v21)
      {
LABEL_30:
        long long v13 = v5 + 1;
        goto LABEL_43;
      }
    }
  }
  return result;
}

void sub_21623B0C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 20)) {
    __assert_rtn("init", "BurstTrieAdapter.h", 280, "m_mutable");
  }
  uint64_t v2 = *(char **)(a1 + 8);
  if (v2) {
    sub_21616F7D0(v2);
  }
  sub_21616F758(*(_DWORD *)(a1 + 16), 0);
  *(void *)(a1 + 8) = v3;
  if (!v3) {
    __assert_rtn("init", "BurstTrieAdapter.h", 285, "m_trie");
  }
}

BOOL sub_21623B150(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4)
{
  BOOL result = 0;
  if (a3)
  {
    if ((a3 & 1) == 0) {
      return sub_216170650(*(void **)(a1 + 8), a2, a3, a4, 0) != 0;
    }
  }
  return result;
}

void sub_21623B18C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 && a3 && (a3 & 1) == 0)
  {
    char v12 = 0;
    uint64_t v7 = sub_21617097C(*(void *)(a1 + 8), 0, 0);
    unint64_t v10 = 0;
    int v11 = 0;
    do
    {
      if (!sub_2161715B0((uint64_t)v7, (unsigned __int8 *)(a2 + v10), 2u, v8, v9)) {
        break;
      }
      if (sub_216172268(v7, &v11))
      {
        sub_21620FCFC(a4, (uint64_t)&v11, a2, v10 + 2);
        if (v12) {
          break;
        }
      }
      unint64_t v10 = (int)v10 + 2;
    }
    while (v10 < a3);
    sub_216170B58(v7);
  }
}

void *sub_21623B258(void *result, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  v6[4] = *MEMORY[0x263EF8340];
  if (a3)
  {
    if ((a3 & 1) == 0)
    {
      BOOL v5 = (void *)result[1];
      v6[0] = &unk_26C6F5980;
      v6[1] = a4;
      v6[3] = v6;
      sub_21616F860(v5, a2, a3, 0, (uint64_t)v6, 2 * a5);
      return sub_21617543C(v6);
    }
  }
  return result;
}

void sub_21623B2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617543C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21623B304()
{
}

void sub_21623B378(_Unwind_Exception *a1)
{
  uint64_t v3 = sub_21620FE6C(v1);
  MEMORY[0x2166CA800](v3, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

BOOL sub_21623B3A0(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

void sub_21623B3B0()
{
}

void sub_21623B494(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t sub_21623B4CC(uint64_t a1, _DWORD **a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (result) {
    return sub_216172268(*a2, a3) != 0;
  }
  return result;
}

void *sub_21623B52C(uint64_t a1, void **a2, uint64_t a3, int a4)
{
  v6[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  v6[0] = &unk_26C6F5A00;
  v6[1] = a3;
  v6[3] = v6;
  sub_2161709F0(v4, 0, (uint64_t)v6, 2 * a4);
  return sub_216176310(v6);
}

void sub_21623B5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216176310((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21623B5D4(uint64_t a1)
{
  sub_21623B974(a1);

  JUMPOUT(0x2166CA800);
}

BOOL sub_21623B60C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (!*(unsigned char *)(a1 + 20)) {
    __assert_rtn("addEntry", "BurstTrieAdapter.h", 117, "m_mutable");
  }
  if (!a2) {
    return 0;
  }
  BOOL result = 0;
  if (a3)
  {
    if ((a3 & 1) == 0) {
      return sub_21616F44C(*(void *)(a1 + 8), a2, a3, *a4);
    }
  }
  return result;
}

BOOL sub_21623B678(uint64_t a1, char *a2, int a3)
{
  if (!*(unsigned char *)(a1 + 20)) {
    __assert_rtn("removeEntry", "BurstTrieAdapter.h", 126, "m_mutable");
  }
  return sub_21616FC48(*(_DWORD **)(a1 + 8), a2, a3) != 0;
}

void sub_21623B6C4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 20)) {
    __assert_rtn("clear", "BurstTrieAdapter.h", 133, "m_mutable");
  }

  sub_21623B0C8(a1);
}

void sub_21623B714()
{
}

void *sub_21623B728(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_26C6F5980;
  result[1] = v3;
  return result;
}

uint64_t sub_21623B770(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F5980;
  a2[1] = v2;
  return result;
}

uint64_t sub_21623B79C(uint64_t result, uint64_t a2, uint64_t *a3, unsigned char **a4)
{
  if (!**a4)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = *(void *)(result + 8);
    int v8 = sub_21616F618(*a3);
    uint64_t v6 = sub_21616F5FC(v4);
    unsigned int v7 = sub_21616F60C(v4);
    return sub_21620FCFC(v5, (uint64_t)&v8, v6, v7);
  }
  return result;
}

uint64_t sub_21623B814(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F59E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623B854()
{
  return &unk_26C6F59E0;
}

void sub_21623B864()
{
}

void *sub_21623B878(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_26C6F5A00;
  result[1] = v3;
  return result;
}

uint64_t sub_21623B8C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F5A00;
  a2[1] = v2;
  return result;
}

uint64_t sub_21623B8EC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int *a5)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *a4;
  uint64_t v7 = *(void *)(a1 + 8);
  int v9 = *a5;
  return sub_21620FCFC(v7, (uint64_t)&v9, v5, v6);
}

uint64_t sub_21623B928(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5A60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623B968()
{
  return &unk_26C6F5A60;
}

uint64_t sub_21623B974(uint64_t a1)
{
  *(void *)a1 = &unk_26C6F58C8;
  sub_21616F7D0(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_21623B9C0(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 24))(*(void *)(a1 + 24));
}

uint64_t sub_21623B9E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 8))();
}

uint64_t sub_21623BA10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

uint64_t sub_21623BA38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))();
}

uint64_t sub_21623BA60(void *a1)
{
  *a1 = &unk_26C6F5B70;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }

  return sub_21623B974((uint64_t)a1);
}

void sub_21623BAE0(void *a1)
{
  *a1 = &unk_26C6F5B70;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  sub_21623B974((uint64_t)a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21623BB74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))();
}

uint64_t sub_21623BB9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))();
}

uint64_t sub_21623BBC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96))();
}

void *sub_21623BBEC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21623BDD8(a1, a2, a3, 1u);
}

void *sub_21623BBF4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21623BE74(a1, a2, a3, 1u, 0);
}

void *sub_21623BC00(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21623BDD8(a1, a2, a3, 0);
}

void *sub_21623BC08(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21623BE74(a1, a2, a3, 0, 0);
}

void *sub_21623BC14(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C6F5D98;
  v5[1] = a3;
  v5[3] = v5;
  sub_2162398A8(a1, a2, 0, (uint64_t)v5, a4);
  return sub_216211814(v5);
}

void sub_21623BCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216211814((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21623BCB4(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_2162398A8(a1, a2, 0, a3, a4);
}

uint64_t sub_21623BCC4(void *a1)
{
  *a1 = &unk_26C6F5B70;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }

  return sub_21623B974((uint64_t)a1);
}

void sub_21623BD44(void *a1)
{
  *a1 = &unk_26C6F5B70;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  sub_21623B974((uint64_t)a1);

  JUMPOUT(0x2166CA800);
}

void *sub_21623BDD8(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C6F5D18;
  v5[1] = a3;
  v5[3] = v5;
  sub_21623BE74(a1, a2, (uint64_t)v5, a4, 0);
  return sub_216211814(v5);
}

void sub_21623BE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216211814((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21623BE74(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  void v24[4] = *MEMORY[0x263EF8340];
  unint64_t v10 = off_26B4ABD50;
  if ((*(unsigned char *)off_26B4ABD50(&off_26B4ABD50) & 1) == 0)
  {
    uint64_t v20 = (void *)off_26B4ABD38(&off_26B4ABD38);
    sub_216210E8C(v20, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210850, v20);
    *(unsigned char *)v10(&off_26B4ABD5sub_216195244(&a9, 0) = 1;
  }
  int v11 = off_26B4ABD80;
  if ((*(unsigned char *)off_26B4ABD80(&off_26B4ABD80) & 1) == 0)
  {
    int v21 = (void *)off_26B4ABD68(&off_26B4ABD68);
    sub_216210F04(v21, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210884, v21);
    *(unsigned char *)v11(&off_26B4ABD8sub_216195244(&a9, 0) = 1;
  }
  char v23 = 0;
  char v12 = operator new(0x20uLL);
  *char v12 = &unk_26C6F5C98;
  v12[1] = a1;
  uint64_t v12[2] = a3;
  *((_DWORD *)v12 + 6) = a5;
  void v24[3] = v12;
  (*(void (**)(void ***__return_ptr, unint64_t))(*(void *)a1 + 24))(&v22, a1);
  off_26B4ABD38(&off_26B4ABD38);
  long long v13 = (uint64_t *)off_26B4ABD68(&off_26B4ABD68);
  sub_21623C0F0(a1, a2, (uint64_t)v24, v14, a4, 0, 0, &v23, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  char v17 = v22;
  int v22 = 0;
  if (v17)
  {
    uint64_t v18 = sub_21620FE6C(v17);
    MEMORY[0x2166CA800](v18, 0x20C4093837F09);
  }
  return sub_21623CC0C(v24);
}

void sub_21623C0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  int v11 = va_arg(va1, void **);
  uint64_t v13 = va_arg(va1, void);
  sub_21620FE1C((void ***)va, 0);
  sub_21623CC0C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_21623C0F0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned __int8 a7, unsigned char *a8, float a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  uint64_t v18 = a13;
  uint64_t v17 = a14;
  uint64_t v20 = a10;
  uint64_t v19 = a11;
  v60[4] = *MEMORY[0x263EF8340];
  unsigned __int8 v59 = a7;
  if (!*a8)
  {
    unint64_t v26 = result;
    if (((*(uint64_t (**)(void, uint64_t))(**(void **)(result + 24) + 32))(*(void *)(result + 24), a4) & 1) == 0) {
      __assert_rtn("ambiguousDfsTraverse", "AmbiguousTrieAdapter.hpp", 137, "m_trie->isValid(curCursor)");
    }
    unint64_t v27 = a12;
    unint64_t v50 = v26;
    if (a5)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) != v27) {
        goto LABEL_36;
      }
    }
    LODWORD(v58) = 0;
    if ((a7 & 1) != 0
      || (BOOL result = (*(uint64_t (**)(void, uint64_t, unint64_t *))(**(void **)(v26 + 24) + 48))(*(void *)(v26 + 24), a4, &v58), result))
    {
      BOOL result = sub_21623C6D8(*(void *)(a3 + 24), a4, v20, 2 * v19, v18, v17, v27, (uint64_t)a8, a9);
    }
    if (!*a8)
    {
LABEL_36:
      BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      if (result > v27)
      {
        BOOL result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 16))(a2, v27);
        unint64_t v54 = result;
        unint64_t v58 = 0;
        if (result)
        {
          unint64_t v28 = 0;
          HIDWORD(v49) = a17;
          uint64_t v29 = a15;
          uint64_t v30 = a16;
          double v31 = a9;
          do
          {
            BOOL result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 72))(a2, v29, v30, v27, v28);
            if (result)
            {
              double v57 = 0.0;
              double v57 = (*(double (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 32))(a2, v27, v58)+ v31;
              unint64_t v56 = 0;
              unint64_t v56 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 40))(a2, v27, v58)+ v27;
              BOOL result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 48))(a2, v27, v58);
              long long v33 = (__int16 *)result;
              uint64_t v34 = v32;
              unint64_t v35 = v56;
              if (v56 != v27 || (v49 & 0x100000000) == 0)
              {
                if (v32)
                {
                  (*(void (**)(unint64_t *__return_ptr))(**(void **)(v50 + 24) + 40))(&v55);
                  if ((*(unsigned int (**)(void, unint64_t))(**(void **)(v50 + 24) + 32))(*(void *)(v50 + 24), v55))
                  {
                    uint64_t v36 = a10;
                    uint64_t v37 = a11;
                    uint64_t v38 = 2 * a11;
                    uint64_t v39 = v34;
                    do
                    {
                      __int16 v40 = *v33++;
                      *(_WORD *)(v36 + v38) = v40;
                      v38 += 2;
                      --v39;
                    }
                    while (v39);
                    uint64_t v41 = a13;
                    if (a13)
                    {
                      *(void *)(a13 + 8 * a14) = v58;
                      uint64_t v37 = a11;
                    }
                    float v42 = v57;
                    LOBYTE(v49) = v35 == v27;
                    sub_21623C0F0(v50, a2, a3, v55, a5, a6, v59, a8, v42, v36, v37 + v34, v56, v41, a14 + 1, v27, v58, v49);
                    if (*a8)
                    {
                      BOOL result = v55;
                      unint64_t v55 = 0;
                      if (result)
                      {
                        unint64_t v48 = sub_21620FE6C((void **)result);
                        return MEMORY[0x2166CA800](v48, 0x20C4093837F09);
                      }
                      return result;
                    }
                  }
                  BOOL result = v55;
                  unint64_t v55 = 0;
                  if (result)
                  {
                    long long v43 = sub_21620FE6C((void **)result);
                    BOOL result = MEMORY[0x2166CA800](v43, 0x20C4093837F09);
                  }
                  if (a6)
                  {
                    unint64_t v44 = v56;
                    BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
                    if (v44 == result)
                    {
                      BOOL result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 56))(a2, v27, v58);
                      if (result)
                      {
                        unint64_t v45 = v58;
                        long long v46 = operator new(0x68uLL);
                        void *v46 = &unk_26C6F5C18;
                        v46[1] = v50;
                        v46[2] = a4;
                        void v46[3] = &a10;
                        v46[4] = &a11;
                        v46[5] = &a13;
                        v46[6] = &a14;
                        v46[7] = &v58;
                        v46[8] = &v59;
                        v46[9] = a3;
                        v46[10] = &v57;
                        v46[11] = &v56;
                        v46[12] = a8;
                        void v60[3] = v46;
                        (*(void (**)(uint64_t, unint64_t, unint64_t, void *))(*(void *)a2 + 64))(a2, v27, v45, v60);
                        BOOL result = (unint64_t)sub_2162112FC(v60);
                      }
                    }
                  }
                }
                else
                {
                  float v47 = v57;
                  LOBYTE(v49) = v56 == v27;
                  BOOL result = sub_21623C0F0(v50, a2, a3, a4, a5, a6, v59, a8, v47, a10, a11, v56, a13, a14, v29, v30, v49);
                }
              }
            }
            unint64_t v28 = v58 + 1;
            unint64_t v58 = v28;
          }
          while (v28 < v54);
        }
      }
    }
  }
  return result;
}

void sub_21623C6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

uint64_t sub_21623C6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  float v15 = a9;
  uint64_t v13 = a4;
  uint64_t v14 = a3;
  uint64_t v11 = a6;
  uint64_t v12 = a5;
  uint64_t v10 = a7;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 48))(a1, a2, &v15, &v14, &v13, &v12, &v11, &v10, a8);
}

void sub_21623C750()
{
}

__n128 sub_21623C764(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_26C6F5C18;
  *(_OWORD *)(v2 + 4sub_216195244(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_21623C7D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5C18;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 4sub_216195244(&a9, 0) = result;
  return result;
}

void **sub_21623C830(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  long long v5 = *(__int16 **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  (*(void (**)(void ***__return_ptr))(**(void **)(v7 + 24) + 40))(&v16);
  if (!(*(unsigned int (**)(void, void **))(**(void **)(v7 + 24) + 32))(*(void *)(v7 + 24), v16)) {
    goto LABEL_13;
  }
  if (v6)
  {
    int v8 = (_WORD *)(**(void **)(a1 + 24) + 2 * **(void **)(a1 + 32));
    uint64_t v9 = v6;
    do
    {
      __int16 v10 = *v5++;
      *v8++ = v10;
      --v9;
    }
    while (v9);
  }
  uint64_t v11 = **(void **)(a1 + 40);
  if (v11) {
    *(void *)(v11 + 8 * **(void **)(a1 + 48)) = **(void **)(a1 + 56);
  }
  int v15 = 0;
  if (!**(unsigned char **)(a1 + 64))
  {
    if (!(*(unsigned int (**)(void, void **, int *))(**(void **)(v7 + 24) + 48))(*(void *)(v7 + 24), v16, &v15))goto LABEL_11; {
    uint64_t v11 = **(void **)(a1 + 40);
    }
  }
  float v12 = **(double **)(a1 + 80);
  sub_21623C6D8(*(void *)(*(void *)(a1 + 72) + 24), (uint64_t)v16, **(void **)(a1 + 24), 2 * (**(void **)(a1 + 32) + v6), v11, **(void **)(a1 + 48) + 1, **(void **)(a1 + 88), *(void *)(a1 + 96), v12);
LABEL_11:
  if (**(unsigned char **)(a1 + 96)) {
    *a3 = 1;
  }
LABEL_13:
  __n128 result = v16;
  unint64_t v16 = 0;
  if (result)
  {
    uint64_t v14 = sub_21620FE6C(result);
    return (void **)MEMORY[0x2166CA800](v14, 0x20C4093837F09);
  }
  return result;
}

void sub_21623C9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (a10)
  {
    uint64_t v11 = sub_21620FE6C(a10);
    MEMORY[0x2166CA800](v11, 0x20C4093837F09);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21623CA14(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5C78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623CA54()
{
  return &unk_26C6F5C78;
}

void sub_21623CA64()
{
}

__n128 sub_21623CA78(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_26C6F5C98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21623CACC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5C98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21623CB04(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v9 = *a3;
  uint64_t v10 = *a4;
  uint64_t v11 = *a5;
  uint64_t v12 = *a6;
  uint64_t v13 = *a7;
  uint64_t v14 = *a8;
  uint64_t v15 = *(void *)(a1 + 8);
  v17[0] = 0;
  v17[1] = v9;
  (*(void (**)(void, uint64_t, _DWORD *))(**(void **)(v15 + 24) + 48))(*(void *)(v15 + 24), a2, v17);
  return sub_21621153C(*(void *)(a1 + 16), (uint64_t)v17, v10, v11, v12, v13, v14 - *(int *)(a1 + 24));
}

uint64_t sub_21623CBC0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5CF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623CC00()
{
  return &unk_26C6F5CF8;
}

void *sub_21623CC0C(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21623CC94()
{
}

void *sub_21623CCA8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C6F5D18;
  result[1] = v3;
  return result;
}

uint64_t sub_21623CCF0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F5D18;
  a2[1] = v2;
  return result;
}

uint64_t sub_21623CD1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_2162117B4(*(void *)(a1 + 8), a2, *a3, *a4, *a7);
}

uint64_t sub_21623CD34(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5D78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623CD74()
{
  return &unk_26C6F5D78;
}

void sub_21623CD84()
{
}

void *sub_21623CD98(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C6F5D98;
  result[1] = v3;
  return result;
}

uint64_t sub_21623CDE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F5D98;
  a2[1] = v2;
  return result;
}

uint64_t sub_21623CE0C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_2162117B4(*(void *)(a1 + 8), a2, *a3, *a4, *a7);
}

uint64_t sub_21623CE24(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5DF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623CE64()
{
  return &unk_26C6F5DF8;
}

uint64_t *sub_21623CE70(uint64_t *a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  long long v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_21623AEF8(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_21623CED8(_Unwind_Exception *a1)
{
  sub_21612A250(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_21623CEF0(uint64_t *result, int a2, int a3)
{
  long long v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  long long v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        long long v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_21612A650(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void sub_21623CFA0()
{
}

__n128 sub_21623CFB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6C8B70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21623D000(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8B70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21623D030(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  unint64_t v6 = *a2;
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 24) - v7) >> 3) <= v6)
  {
    uint64_t v17 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18[0] = 0;
      _os_log_error_impl(&dword_2160F5000, v17, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", (uint8_t *)v18, 2u);
    }
  }
  else
  {
    int v8 = (void *)(v7 + 24 * v6);
    uint64_t v11 = (void *)*v8;
    int v9 = v8 + 1;
    uint64_t v10 = v11;
    if (v11 != v9)
    {
      do
      {
        (*(void (**)(void))(**(void **)(a1 + 16) + 16))();
        if (*a6) {
          break;
        }
        uint64_t v14 = (void *)v10[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (void *)v10[2];
            BOOL v16 = *v15 == (void)v10;
            uint64_t v10 = v15;
          }
          while (!v16);
        }
        uint64_t v10 = v15;
      }
      while (v15 != v9);
    }
  }
}

uint64_t sub_21623D144(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623D184()
{
  return &unk_26C6BCB00;
}

void sub_21623D194()
{
}

__n128 sub_21623D1A8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6C8BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21623D1F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21623D224(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  if (!*a5)
  {
    uint64_t v5 = result;
    unint64_t v6 = (void *)(*(void *)(*(void *)(result + 8) + 16) + 24 * *a2);
    int v9 = (void *)*v6;
    uint64_t v7 = v6 + 1;
    int v8 = v9;
    if (v9 != v7)
    {
      do
      {
        __n128 result = (*(uint64_t (**)(void))(**(void **)(v5 + 16) + 16))();
        if (*a5) {
          break;
        }
        uint64_t v11 = (void *)v8[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (void *)v8[2];
            BOOL v13 = *v12 == (void)v8;
            int v8 = v12;
          }
          while (!v13);
        }
        int v8 = v12;
      }
      while (v12 != v7);
    }
  }
  return result;
}

uint64_t sub_21623D2D8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623D318()
{
  return &unk_26C6BCB10;
}

void sub_21623D328()
{
}

__n128 sub_21623D33C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6C8B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21623D388(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21623D3B8(uint64_t a1, uint64_t a2, const void **a3, size_t *a4)
{
  memcpy(*(void **)(a1 + 16), *a3, *a4);
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 16);

  return v5();
}

uint64_t sub_21623D428(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCAF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623D468()
{
  return &unk_26C6BCAF0;
}

void sub_21623D478()
{
}

__n128 sub_21623D48C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6F5E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21623D4D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21623D508(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned char *a6)
{
  unint64_t v6 = *a2;
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 24) - v7) >> 3) <= v6)
  {
    int v21 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22[0] = 0;
      _os_log_error_impl(&dword_2160F5000, v21, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", (uint8_t *)v22, 2u);
    }
  }
  else
  {
    int v8 = (void *)(v7 + 24 * v6);
    uint64_t v11 = (void *)*v8;
    int v9 = v8 + 1;
    uint64_t v10 = v11;
    if (v11 != v9)
    {
      uint64_t v15 = *a3;
      uint64_t v16 = *a4;
      uint64_t v17 = *a5;
      do
      {
        sub_21623D690(*(void *)(*(void *)(a1 + 16) + 24), *((_DWORD *)v10 + 7), (uint64_t)a2, v15, v16, v17);
        if (*a6) {
          break;
        }
        uint64_t v18 = (void *)v10[1];
        if (v18)
        {
          do
          {
            uint64_t v19 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            uint64_t v19 = (void *)v10[2];
            BOOL v20 = *v19 == (void)v10;
            uint64_t v10 = v19;
          }
          while (!v20);
        }
        uint64_t v10 = v19;
      }
      while (v19 != v9);
    }
  }
}

uint64_t sub_21623D644(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5E78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623D684()
{
  return &unk_26C6F5E78;
}

uint64_t sub_21623D690(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10 = a2;
  uint64_t v8 = a5;
  uint64_t v9 = a4;
  uint64_t v7 = a6;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v10, a3, &v9, &v8, &v7);
}

void sub_21623D6F8()
{
}

__n128 sub_21623D70C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6F5E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21623D758(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21623D788(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, unsigned char *a8)
{
  unint64_t v8 = *a2;
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 24) - v9) >> 3) <= v8)
  {
    long long v25 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_2160F5000, v25, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", buf, 2u);
    }
  }
  else
  {
    int v10 = (void *)(v9 + 24 * v8);
    BOOL v13 = (void *)*v10;
    uint64_t v11 = v10 + 1;
    uint64_t v12 = v13;
    if (v13 != v11)
    {
      uint64_t v17 = *a3;
      uint64_t v18 = *a4;
      uint64_t v19 = *a5;
      uint64_t v20 = *a6;
      uint64_t v21 = *a7;
      do
      {
        sub_21623D928(*(void *)(*(void *)(a1 + 16) + 24), *((_DWORD *)v12 + 7), (uint64_t)a2, v17, v18, v19, v20, v21, (uint64_t)a8);
        if (*a8) {
          break;
        }
        int v22 = (void *)v12[1];
        if (v22)
        {
          do
          {
            char v23 = v22;
            int v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            char v23 = (void *)v12[2];
            BOOL v24 = *v23 == (void)v12;
            uint64_t v12 = v23;
          }
          while (!v24);
        }
        uint64_t v12 = v23;
      }
      while (v23 != v11);
    }
  }
}

uint64_t sub_21623D8DC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5EF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623D91C()
{
  return &unk_26C6F5EF8;
}

uint64_t sub_21623D928(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v15 = a2;
  uint64_t v13 = a5;
  uint64_t v14 = a4;
  uint64_t v11 = a7;
  uint64_t v12 = a6;
  uint64_t v10 = a8;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 48))(a1, &v15, a3, &v14, &v13, &v12, &v11, &v10, a9);
}

void sub_21623D9A4()
{
}

__n128 sub_21623D9B8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6F5F18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21623DA04(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5F18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21623DA34(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned char *a6)
{
  unint64_t v6 = *a2;
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 24) - v7) >> 3) <= v6)
  {
    uint64_t v21 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22[0] = 0;
      _os_log_error_impl(&dword_2160F5000, v21, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", (uint8_t *)v22, 2u);
    }
  }
  else
  {
    unint64_t v8 = (void *)(v7 + 24 * v6);
    uint64_t v11 = (void *)*v8;
    uint64_t v9 = v8 + 1;
    uint64_t v10 = v11;
    if (v11 != v9)
    {
      uint64_t v15 = *a3;
      uint64_t v16 = *a4;
      uint64_t v17 = *a5;
      do
      {
        sub_21623D690(*(void *)(*(void *)(a1 + 16) + 24), *((_DWORD *)v10 + 7), (uint64_t)a2, v15, v16, v17);
        if (*a6) {
          break;
        }
        uint64_t v18 = (void *)v10[1];
        if (v18)
        {
          do
          {
            uint64_t v19 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            uint64_t v19 = (void *)v10[2];
            BOOL v20 = *v19 == (void)v10;
            uint64_t v10 = v19;
          }
          while (!v20);
        }
        uint64_t v10 = v19;
      }
      while (v19 != v9);
    }
  }
}

uint64_t sub_21623DB70(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F5F78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623DBB0()
{
  return &unk_26C6F5F78;
}

void sub_21623DBC0()
{
}

__n128 sub_21623DBD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F5F98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21623DC28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F5F98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21623DC60(uint64_t a1, uint64_t a2, int *a3, const void **a4, size_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = *a4;
  size_t v12 = *a5;
  uint64_t v13 = *a6;
  uint64_t v14 = *a7;
  uint64_t v15 = *a8;
  int v27 = *a3;
  uint64_t v25 = v13;
  size_t v26 = v12;
  uint64_t v23 = v15;
  uint64_t v24 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (((*(uint64_t (**)(void))(**(void **)(v16 + 24) + 32))(*(void *)(v16 + 24)) & 1) == 0) {
    __assert_rtn("operator()", "AmbiguousTrieAdapter.hpp", 44, "m_trie->isValid(cursor)");
  }
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_216211DEC(&__p, v11, (uint64_t)v11 + v12, v12);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(v16 + 24);
  uint64_t v19 = operator new(0x50uLL);
  void *v19 = &unk_26C6F6008;
  v19[1] = &v26;
  v19[2] = &__p;
  v19[3] = v17;
  v19[4] = &v27;
  uint64_t v19[5] = &v25;
  v19[6] = &v24;
  v19[7] = &v23;
  v19[8] = a1 + 24;
  v19[9] = a9;
  void v28[3] = v19;
  (*(void (**)(uint64_t, uint64_t, void *, void))(*(void *)v18 + 56))(v18, a2, v28, *(unsigned int *)(a1 + 28));
  sub_216198FB8(v28);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_21623DE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21623DE38(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6078)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623DE78()
{
  return &unk_26C6F6078;
}

void sub_21623DE88()
{
}

__n128 sub_21623DE9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_26C6F6008;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4sub_216195244(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21623DF08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6008;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 4sub_216195244(&a9, 0) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_21623DF58(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v11 = *(void **)(a1 + 8);
  uint64_t v10 = *(unint64_t **)(a1 + 16);
  unint64_t v12 = *v11 + *a4;
  unint64_t v13 = v10[1] - *v10;
  if (v12 > v13) {
    sub_216179360(v10, v12 - v13);
  }
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
      *(unsigned char *)(**(void **)(a1 + 16) + **(void **)(a1 + 8) + i) = *(unsigned char *)(v8 + i);
  }
  uint64_t v15 = *(uint64_t **)(a1 + 40);
  int v16 = **(_DWORD **)(a1 + 32);
  v18[0] = *a2;
  v18[1] = v16;
  uint64_t result = sub_21621153C(*(void *)(a1 + 24), (uint64_t)v18, **(void **)(a1 + 16), v12, *v15, **(void **)(a1 + 48), **(void **)(a1 + 56) - **(int **)(a1 + 64));
  **(unsigned char **)(a1 + 72) = (**(unsigned __int8 **)(a1 + 72) | *a5) != 0;
  return result;
}

uint64_t sub_21623E050(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6068)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623E090()
{
  return &unk_26C6F6068;
}

void sub_21623E0A0()
{
}

__n128 sub_21623E0B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6F6098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21623E100(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21623E130(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, unsigned char *a8)
{
  unint64_t v8 = *a2;
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 8) + 24) - v9) >> 3) <= v8)
  {
    uint64_t v25 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_2160F5000, v25, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", buf, 2u);
    }
  }
  else
  {
    uint64_t v10 = (void *)(v9 + 24 * v8);
    unint64_t v13 = (void *)*v10;
    uint64_t v11 = v10 + 1;
    unint64_t v12 = v13;
    if (v13 != v11)
    {
      uint64_t v17 = *a3;
      uint64_t v18 = *a4;
      uint64_t v19 = *a5;
      uint64_t v20 = *a6;
      uint64_t v21 = *a7;
      do
      {
        sub_21623D928(*(void *)(*(void *)(a1 + 16) + 24), *((_DWORD *)v12 + 7), (uint64_t)a2, v17, v18, v19, v20, v21, (uint64_t)a8);
        if (*a8) {
          break;
        }
        uint64_t v22 = (void *)v12[1];
        if (v22)
        {
          do
          {
            uint64_t v23 = v22;
            uint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            uint64_t v23 = (void *)v12[2];
            BOOL v24 = *v23 == (void)v12;
            unint64_t v12 = v23;
          }
          while (!v24);
        }
        unint64_t v12 = v23;
      }
      while (v23 != v11);
    }
  }
}

uint64_t sub_21623E284(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F60F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21623E2C4()
{
  return &unk_26C6F60F8;
}

uint64_t sub_21623E2D0(int a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5) & 2) != 0)
      {
        CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
        CFIndex Length = CFStringGetLength(v6);
        if (Length == 1)
        {
          unint64_t v8 = &off_26426BCD0;
LABEL_10:
          CFDictionaryAddValue(a2, *v8, (const void *)*MEMORY[0x263EFFB40]);
          goto LABEL_11;
        }
        if (Length >= 2)
        {
          unint64_t v8 = &off_26426BCD8;
          goto LABEL_10;
        }
      }
LABEL_11:
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5) & 0x8080) == 0) {
        CFDictionaryAddValue(a2, @"shapeBasedPinyinConvertedCandidateAccepted", (const void *)*MEMORY[0x263EFFB40]);
      }
      return 1;
    }
  }
  return result;
}

void sub_21623E448()
{
}

void sub_21623E45C()
{
}

void sub_21623E4BC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void **sub_21623E4E0(void **result, const char *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t result = (void **)*result;
    if (result)
    {
      if (objc_msgSend_containsObject_(result, a2, (uint64_t)a2)) {
        [v2 removeObject:v4];
      }
      if (objc_msgSend_count(*v2, v4, v5) == 500) {
        [v2 removeObjectAtIndex:0];
      }
      [v2 addObject:v6];
      uint64_t v9 = [*v2 objc_msgSend_array:v7, v8];
      uint64_t v10 = v2[1];
      return (void **)MEMORY[0x270F9A6D0](v9, sel_writeToFile_atomically_, v10);
    }
  }
  return result;
}

uint64_t *sub_21623E57C(uint64_t *a1, const char *a2, void *a3)
{
  v22[2] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    int v4 = (int)a2;
    uint64_t v5 = [a3 a2:a3];
    uint64_t v7 = @"LearningSet_zh_Hant.plist";
    if (v4 == 1) {
      uint64_t v7 = @"LearningSet_zh_Hans.plist";
    }
    v22[0] = v5;
    v22[1] = v7;
    uint64_t v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v6, v22, count:2];
    id v10 = (id)[v8 componentsJoinedByString:v9];
    a1[1] = (uint64_t)v10;
    unint64_t v12 = [MEMORY[0x263EFF8C0] arrayWithContentsOfFile:v11];
    if ((unint64_t)objc_msgSend_count(v12, v13, v14) >= 0x1F5)
    {
      uint64_t v17 = [v12 v15:v16];
      unint64_t v12 = [v12 subarrayWithRange:NSMakeRange(v18, v17 - 500)];
    }
    id v19 = objc_alloc(MEMORY[0x263EFF9B0]);
    *a1 = [v19 initWithArray:v20];
  }
  return a1;
}

id *sub_21623E67C(id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21623E6CC(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

id *sub_21623E6CC(id *a1)
{
  return a1;
}

uint64_t sub_21623E704(uint64_t a1, uint64_t a2, char *__s, char *a4)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v7 = (std::string *)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v8 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  if (a1 != a2) {
    sub_2162343EC(a1, *(std::string **)a2, *(long long **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  sub_2161B4568(v8, __s);
  sub_2161B4568(v7, a4);
  return a1;
}

void sub_21623E79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  a10 = (void **)v10;
  sub_216175BF4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_21623E7D4(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  long long v3 = (void **)a1;
  sub_216175BF4(&v3);
  return a1;
}

double sub_21623E82C@<D0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  switch(a2)
  {
    case 1:
      sub_21610B834(&__dst, "SELECT Identifier FROM Words WHERE Identifier = ? ");
      uint64_t v6 = *a1;
      uint64_t v5 = a1[1];
      if (*a1 != v5)
      {
        do
        {
          if (!*(unsigned char *)(v6 + 28) && !*(unsigned char *)(v6 + 29))
          {
            std::string::append(&__dst, " AND ", 5uLL);
            int v7 = *(char *)(v6 + 23);
            if (v7 >= 0) {
              uint64_t v8 = (const std::string::value_type *)v6;
            }
            else {
              uint64_t v8 = *(const std::string::value_type **)v6;
            }
            if (v7 >= 0) {
              std::string::size_type v9 = *(unsigned __int8 *)(v6 + 23);
            }
            else {
              std::string::size_type v9 = *(void *)(v6 + 8);
            }
            std::string::append(&__dst, v8, v9);
            std::string::append(&__dst, " = ?", 4uLL);
            uint64_t v5 = a1[1];
          }
          v6 += 32;
        }
        while (v6 != v5);
      }
      goto LABEL_45;
    case 2:
      sub_21623ECE4(&__dst, a1, (uint64_t)(a1 + 3));
      goto LABEL_45;
    case 3:
      sub_21623ECE4(&__dst, a1, (uint64_t)(a1 + 6));
      goto LABEL_45;
    case 4:
      sub_21610B834(&__dst, "SELECT Seed");
      for (uint64_t i = *a1; i != a1[1]; i += 32)
      {
        std::string::append(&__dst, ", ", 2uLL);
        int v12 = *(char *)(i + 23);
        if (v12 >= 0) {
          unint64_t v13 = (const std::string::value_type *)i;
        }
        else {
          unint64_t v13 = *(const std::string::value_type **)i;
        }
        if (v12 >= 0) {
          std::string::size_type v14 = *(unsigned __int8 *)(i + 23);
        }
        else {
          std::string::size_type v14 = *(void *)(i + 8);
        }
        std::string::append(&__dst, v13, v14);
      }
      std::string::append(&__dst, " FROM Words WHERE Identifier = ?", 0x20uLL);
      goto LABEL_45;
    case 5:
      uint64_t v10 = (std::string *)qword_26797DC50;
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBB0, memory_order_acquire)) {
        goto LABEL_41;
      }
      uint64_t v16 = &qword_26797DBB0;
      if (!__cxa_guard_acquire(&qword_26797DBB0)) {
        goto LABEL_41;
      }
      uint64_t v10 = (std::string *)qword_26797DC50;
      sub_21610B834(qword_26797DC50, "UPDATE Words SET Seed = ? WHERE Identifier = ?");
      goto LABEL_51;
    case 6:
      uint64_t v10 = (std::string *)&qword_26797DC50[6];
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBC0, memory_order_acquire)) {
        goto LABEL_41;
      }
      uint64_t v16 = &qword_26797DBC0;
      if (!__cxa_guard_acquire(&qword_26797DBC0)) {
        goto LABEL_41;
      }
      uint64_t v10 = (std::string *)&qword_26797DC50[6];
      sub_21610B834(&qword_26797DC50[6], "UPDATE Assist SET LastSeedCFArrayRef Value = ? WHERE Identifier = 1");
      goto LABEL_51;
    case 7:
      uint64_t v10 = (std::string *)&qword_26797DC50[9];
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBC8, memory_order_acquire)) {
        goto LABEL_41;
      }
      uint64_t v16 = &qword_26797DBC8;
      if (!__cxa_guard_acquire(&qword_26797DBC8)) {
        goto LABEL_41;
      }
      uint64_t v10 = (std::string *)&qword_26797DC50[9];
      sub_21610B834(&qword_26797DC50[9], "UPDATE Assist SET LastUpdateTime = ? WHERE Identifier = 1");
      goto LABEL_51;
    case 8:
      uint64_t v10 = (std::string *)&qword_26797DC50[3];
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBB8, memory_order_acquire)) {
        goto LABEL_41;
      }
      uint64_t v16 = &qword_26797DBB8;
      if (!__cxa_guard_acquire(&qword_26797DBB8)) {
        goto LABEL_41;
      }
      uint64_t v10 = (std::string *)&qword_26797DC50[3];
      sub_21610B834(&qword_26797DC50[3], "UPDATE Words SET Identifier = ? WHERE Identifier = ?");
      goto LABEL_51;
    case 9:
      uint64_t v10 = (std::string *)&qword_26797DC50[12];
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBD0, memory_order_acquire)) {
        goto LABEL_41;
      }
      uint64_t v16 = &qword_26797DBD0;
      if (!__cxa_guard_acquire(&qword_26797DBD0)) {
        goto LABEL_41;
      }
      uint64_t v10 = (std::string *)&qword_26797DC50[12];
      sub_21610B834(&qword_26797DC50[12], "UPDATE Assist SET Version = ? WHERE Identifier = 1");
LABEL_51:
      __cxa_atexit(MEMORY[0x263F8C0B8], v10, &dword_2160F5000);
      __cxa_guard_release(v16);
LABEL_41:
      std::string::operator=((std::string *)a3, v10);
      break;
    case 10:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBD8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797DBD8))
      {
        sub_21610B834(byte_26797DCC8, "SELECT COUNT(*) FROM Words");
        __cxa_atexit(MEMORY[0x263F8C0B8], byte_26797DCC8, &dword_2160F5000);
        __cxa_guard_release(&qword_26797DBD8);
      }
      if (byte_26797DCC8[23] < 0) {
        sub_21610A674(&__dst, *(void **)byte_26797DCC8, *(unint64_t *)&byte_26797DCC8[8]);
      }
      else {
        std::string __dst = *(std::string *)byte_26797DCC8;
      }
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
LABEL_45:
      double result = *(double *)&__dst.__r_.__value_.__l.__data_;
      *(std::string *)a3 = __dst;
      break;
    default:
      return result;
  }
  return result;
}

void sub_21623EC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_guard_abort(&qword_26797DBD0);
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(a1);
}

std::string *sub_21623ECE4(std::string *a1, uint64_t *a2, uint64_t a3)
{
  sub_21610B834(&v19, "INSERT INTO ");
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    int v7 = (const std::string::value_type *)a3;
  }
  else {
    int v7 = *(const std::string::value_type **)a3;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a3 + 8);
  }
  std::string::size_type v9 = std::string::append(&v19, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v20, " (Seed", 6uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = *a2; i != a2[1]; i += 32)
  {
    std::string::append(a1, ", ", 2uLL);
    int v14 = *(char *)(i + 23);
    if (v14 >= 0) {
      uint64_t v15 = (const std::string::value_type *)i;
    }
    else {
      uint64_t v15 = *(const std::string::value_type **)i;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(i + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(i + 8);
    }
    std::string::append(a1, v15, v16);
  }
  std::string::append(a1, ") VALUES (?", 0xBuLL);
  if (a2[1] != *a2)
  {
    unint64_t v17 = 0;
    do
    {
      std::string::append(a1, ",?", 2uLL);
      ++v17;
    }
    while (v17 < (a2[1] - *a2) >> 5);
  }
  return std::string::append(a1, ")", 1uLL);
}

void sub_21623EE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21623EEB8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DB98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DB98))
  {
    sub_21610B834(qword_26797DC08, "DELETE FROM Words WHERE Identifier = ?");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26797DC08, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DB98);
  }
  return qword_26797DC08;
}

void sub_21623EF40(_Unwind_Exception *a1)
{
}

void *sub_21623EF58()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DBA0))
  {
    sub_21610B834(qword_26797DC20, "SELECT Identifier FROM Words ORDER BY Seed DESC");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26797DC20, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DBA0);
  }
  return qword_26797DC20;
}

void sub_21623EFE0(_Unwind_Exception *a1)
{
}

void *sub_21623EFF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DBA8))
  {
    sub_21610B834(qword_26797DC38, "SELECT Identifier FROM Words ORDER BY Identifier ASC");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26797DC38, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DBA8);
  }
  return qword_26797DC38;
}

void sub_21623F080(_Unwind_Exception *a1)
{
}

std::string *sub_21623F098@<X0>(const char *a1@<X1>, std::string *a2@<X8>)
{
  sub_21610B834(a2, "SELECT Identifier, ");
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  std::string::size_type v4 = strlen(a1);
  std::string::append(a2, a1, v4);
  return std::string::append(a2, " FROM Words", 0xBuLL);
}

void sub_21623F108(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21623F124@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  sub_21610B834(&v22, "CREATE TABLE ");
  sub_21610B834(__p, a2);
  if ((v21 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v7 = v21;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::size_type v8 = std::string::append(&v22, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  long long v10 = std::string::append(&v23, " (Identifier INTEGER PRIMARY KEY, Seed INTEGER", 0x2EuLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = *a1;
  if (*a1 != a1[1])
  {
    while (1)
    {
      std::string::append(a3, ", ", 2uLL);
      int v13 = *(char *)(v12 + 23);
      int v14 = v13 >= 0 ? (const std::string::value_type *)v12 : *(const std::string::value_type **)v12;
      std::string::size_type v15 = v13 >= 0 ? *(unsigned __int8 *)(v12 + 23) : *(void *)(v12 + 8);
      std::string::append(a3, v14, v15);
      std::string::append(a3, " ", 1uLL);
      int v16 = *(_DWORD *)(v12 + 24);
      if (v16 == 1) {
        break;
      }
      if (!v16)
      {
        unint64_t v17 = "BLOB";
        std::string::size_type v18 = 4;
LABEL_24:
        std::string::append(a3, v17, v18);
      }
      v12 += 32;
      if (v12 == a1[1]) {
        return std::string::append(a3, ")", 1uLL);
      }
    }
    unint64_t v17 = "INTEGER";
    std::string::size_type v18 = 7;
    goto LABEL_24;
  }
  return std::string::append(a3, ")", 1uLL);
}

void sub_21623F2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_21623F340(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DBE0))
  {
    sub_21610B834(&xmmword_26797DCE0, "CREATE TABLE Assist (Identifier INTEGER PRIMARY KEY, LastSeedValue INTEGER, LastUpdateTime REAL, Version INTEGER DEFAULT 0)");
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26797DCE0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DBE0);
  }
  if (byte_26797DCF7 < 0)
  {
    long long v2 = xmmword_26797DCE0;
    sub_21610A674((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_26797DCE0;
    *(void *)(a1 + 16) = unk_26797DCF0;
  }
}

void sub_21623F414(_Unwind_Exception *a1)
{
}

void sub_21623F42C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DBE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DBE8))
  {
    sub_21610B834(&xmmword_26797DCF8, "INSERT INTO Assist (LastSeedValue, LastUpdateTime, Version) VALUES (0, 0, 0)");
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26797DCF8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DBE8);
  }
  if (byte_26797DD0F < 0)
  {
    long long v2 = xmmword_26797DCF8;
    sub_21610A674((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_26797DCF8;
    *(void *)(a1 + 16) = unk_26797DD08;
  }
}

void sub_21623F500(_Unwind_Exception *a1)
{
}

void sub_21623F518(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_26797DBF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_26797DBF0))
  {
    sub_21610B834(&xmmword_26797DD10, "SELECT LastSeedValue FROM Assist WHERE Identifier = 1");
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26797DD10, &dword_2160F5000);
    __cxa_guard_release(qword_26797DBF0);
  }
  if (byte_26797DD27 < 0)
  {
    long long v2 = xmmword_26797DD10;
    sub_21610A674((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_26797DD10;
    *(void *)(a1 + 16) = unk_26797DD20;
  }
}

void sub_21623F5EC(_Unwind_Exception *a1)
{
}

void sub_21623F604(std::string *a1@<X8>)
{
  sub_21610B834(&v11, "SELECT ");
  std::string::size_type v2 = strlen(off_26797C580[0]);
  long long v3 = std::string::append(&v11, off_26797C580[0], v2);
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v12, ", ", 2uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v7 = strlen(off_26797C588);
  std::string::size_type v8 = std::string::append(&v13, off_26797C588, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  long long v10 = std::string::append(&v14, " FROM Words", 0xBuLL);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_21623F74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21623F7B0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  double result = sub_21610B834(a3, "SELECT Identifier FROM Words WHERE ");
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 != v8)
  {
    char v9 = 1;
    do
    {
      double result = sub_216178FA4(a2, (void **)v7);
      if ((void *)(a2 + 8) != result)
      {
        if ((v9 & 1) == 0) {
          std::string::append(a3, " AND ", 5uLL);
        }
        int v10 = *(char *)(v7 + 23);
        if (v10 >= 0) {
          std::string v11 = (const std::string::value_type *)v7;
        }
        else {
          std::string v11 = *(const std::string::value_type **)v7;
        }
        if (v10 >= 0) {
          std::string::size_type v12 = *(unsigned __int8 *)(v7 + 23);
        }
        else {
          std::string::size_type v12 = *(void *)(v7 + 8);
        }
        std::string::append(a3, v11, v12);
        double result = std::string::append(a3, " = ?", 4uLL);
        char v9 = 0;
      }
      v7 += 32;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_21623F88C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_21623F8A8@<X0>(uint64_t *a1@<X1>, std::string *a2@<X8>)
{
  sub_21610B834(a2, "SELECT Identifier, Seed, ");
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    for (char i = 0; ; char i = 1)
    {
      uint64_t v8 = (const char *)(v4 + v5);
      if ((*(char *)(v4 + v5 + 23) & 0x80000000) == 0) {
        break;
      }
      uint64_t v8 = *(const char **)v8;
      if (i) {
        goto LABEL_7;
      }
LABEL_8:
      std::string::size_type v9 = strlen(v8);
      std::string::append(a2, v8, v9);
      ++v6;
      uint64_t v4 = *a1;
      v5 += 32;
      if (v6 >= (a1[1] - *a1) >> 5) {
        return std::string::append(a2, " FROM Words", 0xBuLL);
      }
    }
    if ((i & 1) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    std::string::append(a2, ", ", 2uLL);
    goto LABEL_8;
  }
  return std::string::append(a2, " FROM Words", 0xBuLL);
}

void sub_21623F980(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21623F9A0(uint64_t a1)
{
  uint64_t result = sub_216240BA8();
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) != 0;
  }
  return result;
}

uint64_t sub_21623F9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v10 = 0;
  std::string v11 = &v10;
  uint64_t v12 = 0x2000000000;
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))off_26797F008;
  std::string v13 = off_26797F008;
  if (!off_26797F008)
  {
    uint64_t v7 = (void *)sub_216240D3C();
    void v11[3] = (uint64_t)dlsym(v7, "ITDecoderSetLinguisticContext");
    off_26797F008 = (_UNKNOWN *)v11[3];
    unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (!v6)
  {
    dlerror();
    std::string::size_type v9 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v10, 8);
    _Unwind_Resume(v9);
  }
  return v6(v5, a2, a3);
}

uint64_t sub_21623FB50(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  std::string::size_type v2 = (uint64_t (*)(uint64_t))off_26797F010;
  std::string::size_type v9 = off_26797F010;
  if (!off_26797F010)
  {
    long long v3 = (void *)sub_216240D3C();
    v7[3] = (uint64_t)dlsym(v3, "ITDecoderClearNeuralNetworkBuffer");
    off_26797F010 = (_UNKNOWN *)v7[3];
    std::string::size_type v2 = (uint64_t (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    uint64_t v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(v1);
}

uint64_t sub_21623FC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v12 = 0;
  std::string v13 = &v12;
  uint64_t v14 = 0x2000000000;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))off_26797F018;
  std::string::size_type v15 = off_26797F018;
  if (!off_26797F018)
  {
    std::string::size_type v9 = (void *)sub_216240D3C();
    v13[3] = (uint64_t)dlsym(v9, "ITDecoderEnumerateCandidates");
    off_26797F018 = (_UNKNOWN *)v13[3];
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v8)
  {
    dlerror();
    std::string v11 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v12, 8);
    _Unwind_Resume(v11);
  }
  return v8(v7, a2, a3, a4);
}

uint64_t sub_21623FDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))off_26797F020;
  uint64_t v12 = off_26797F020;
  if (!off_26797F020)
  {
    uint64_t v6 = (void *)sub_216240D3C();
    v10[3] = (uint64_t)dlsym(v6, "ITCandidateEnumerateTokenIDs");
    off_26797F020 = (_UNKNOWN *)v10[3];
    uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v10[3];
  }
  _Block_object_dispose(&v9, 8);
  if (!v5)
  {
    dlerror();
    uint64_t v8 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(v8);
  }
  return v5(a2, a3);
}

uint64_t sub_21623FF08(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  long long v3 = (uint64_t (*)(uint64_t))off_26797F028;
  uint64_t v10 = off_26797F028;
  if (!off_26797F028)
  {
    uint64_t v4 = (void *)sub_216240D3C();
    void v8[3] = (uint64_t)dlsym(v4, "ITCandidateGetScore");
    off_26797F028 = (_UNKNOWN *)v8[3];
    long long v3 = (uint64_t (*)(uint64_t))v8[3];
  }
  _Block_object_dispose(&v7, 8);
  if (!v3)
  {
    dlerror();
    uint64_t v6 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v7, 8);
    _Unwind_Resume(v6);
  }
  return v3(a2);
}

void *sub_216240020(void *a1, uint64_t a2)
{
  *a1 = &unk_26C6C63F8;
  a1[1] = a2;
  a1[2] = sub_216240114(*(void *)(a2 + 72));
  uint64_t v4 = (const void *)sub_2162406E0();
  if (*(_DWORD *)(a2 + 4) == 2) {
    uint64_t v5 = @"zh-Hant";
  }
  else {
    uint64_t v5 = @"zh-Hans";
  }
  uint64_t v6 = sub_2162401A0(v4, v5, (const void *)a1[2]);
  a1[3] = v6;
  uint64_t v7 = a1[1];
  uint64_t v8 = *(void *)(v7 + 72);
  if (v8)
  {
    sub_21617D02C(*(void *)(v8 + 8), a1, (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))sub_2162407E8);
    uint64_t v7 = a1[1];
    uint64_t v6 = a1[3];
  }
  *(unsigned char *)(v7 + 96) = v6 != 0;
  return a1;
}

void sub_2162400E8(_Unwind_Exception *a1)
{
  sub_216240980(v2, 0);
  sub_21617DB94(v1, 0);
  _Unwind_Resume(a1);
}

CFURLRef sub_216240114(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 5)) {
    return 0;
  }
  uint64_t v1 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 168) + 24))(*(void *)(a1 + 168), *(void *)(*(void *)(a1 + 8) + 32));
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = (const __CFString *)v1;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];

  return CFURLCreateWithFileSystemPath(v3, v2, kCFURLPOSIXPathStyle, 1u);
}

uint64_t sub_2162401A0(const void *a1, const void *a2, const void *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (!sub_216240BA8()) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  err[1] = Mutable;
  CFErrorRef v26 = 0;
  int v27 = &v26;
  uint64_t v28 = 0x2000000000;
  uint64_t v7 = (const void **)qword_26797DD68;
  uint64_t v29 = (void *)qword_26797DD68;
  if (!qword_26797DD68)
  {
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 0x40000000;
    uint64_t v32 = sub_216240ED8;
    long long v33 = &unk_26426C078;
    uint64_t v34 = &v26;
    uint64_t v8 = (void *)sub_216240D3C();
    uint64_t v9 = dlsym(v8, "kITDecoderLocaleKey");
    *((void *)v34[1] + 3) = v9;
    qword_26797DD68 = *((void *)v34[1] + 3);
    uint64_t v7 = (const void **)v27[3];
  }
  _Block_object_dispose(&v26, 8);
  if (!v7) {
    goto LABEL_31;
  }
  CFDictionarySetValue(Mutable, *v7, a2);
  CFErrorRef v26 = 0;
  int v27 = &v26;
  uint64_t v28 = 0x2000000000;
  uint64_t v10 = (const void **)qword_26797DD70;
  uint64_t v29 = (void *)qword_26797DD70;
  if (!qword_26797DD70)
  {
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 0x40000000;
    uint64_t v32 = sub_216240F28;
    long long v33 = &unk_26426C0A0;
    uint64_t v34 = &v26;
    uint64_t v11 = (void *)sub_216240D3C();
    uint64_t v12 = dlsym(v11, "kITDecoderNeuralTypeKey");
    *((void *)v34[1] + 3) = v12;
    qword_26797DD70 = *((void *)v34[1] + 3);
    uint64_t v10 = (const void **)v27[3];
  }
  _Block_object_dispose(&v26, 8);
  if (!v10) {
    goto LABEL_31;
  }
  CFDictionarySetValue(Mutable, *v10, a1);
  if (!a3) {
    goto LABEL_13;
  }
  CFErrorRef v26 = 0;
  int v27 = &v26;
  uint64_t v28 = 0x2000000000;
  std::string v13 = (const void **)qword_26797DD78;
  uint64_t v29 = (void *)qword_26797DD78;
  if (!qword_26797DD78)
  {
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 0x40000000;
    uint64_t v32 = sub_216240F78;
    long long v33 = &unk_26426C0C8;
    uint64_t v34 = &v26;
    uint64_t v14 = (void *)sub_216240D3C();
    std::string::size_type v15 = dlsym(v14, "kITTouchTranscoderBundleURLKey");
    *((void *)v34[1] + 3) = v15;
    qword_26797DD78 = *((void *)v34[1] + 3);
    std::string v13 = (const void **)v27[3];
  }
  _Block_object_dispose(&v26, 8);
  if (!v13)
  {
LABEL_31:
    dlerror();
    abort_report_np();
    __break(1u);
  }
  CFDictionarySetValue(Mutable, *v13, a3);
LABEL_13:
  err[0] = 0;
  CFErrorRef v26 = 0;
  int v27 = &v26;
  uint64_t v28 = 0x2000000000;
  CFErrorRef v16 = (CFErrorRef)off_26797DD80;
  uint64_t v29 = off_26797DD80;
  if (!off_26797DD80)
  {
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 0x40000000;
    uint64_t v32 = sub_216240FC8;
    long long v33 = &unk_26426C0F0;
    uint64_t v34 = &v26;
    unint64_t v17 = (void *)sub_216240D3C();
    std::string::size_type v18 = dlsym(v17, "ITDecoderCreate");
    *((void *)v34[1] + 3) = v18;
    off_26797DD80 = (_UNKNOWN *)*((void *)v34[1] + 3);
    CFErrorRef v16 = v27[3];
  }
  _Block_object_dispose(&v26, 8);
  if (!v16) {
    goto LABEL_31;
  }
  uint64_t v19 = ((uint64_t (*)(__CFError *, CFErrorRef *))v16)(Mutable, err);
  if (v19) {
    goto LABEL_24;
  }
  CFErrorRef v20 = err[0];
  if (!err[0])
  {
    std::string v23 = sub_2162D1CE4(0);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_2160F5000, v23, OS_LOG_TYPE_ERROR, "Failed to create CTC decoder: (null)", (uint8_t *)&buf, 2u);
      if (!Mutable) {
        return v19;
      }
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  CFErrorRef v26 = err[0];
  CFStringRef v21 = CFErrorCopyDescription(err[0]);
  CFStringRef v30 = v21;
  std::string v22 = sub_2162D1CE4(0);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v21;
    _os_log_error_impl(&dword_2160F5000, v22, OS_LOG_TYPE_ERROR, "Failed to create CTC decoder: %@", (uint8_t *)&buf, 0xCu);
    if (!v21) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v21) {
LABEL_20:
  }
    CFRelease(v21);
LABEL_21:
  CFRelease(v20);
LABEL_24:
  if (Mutable) {
LABEL_25:
  }
    CFRelease(Mutable);
  return v19;
}

void sub_216240668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162406E0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v0 = qword_26797DD58;
  uint64_t v7 = qword_26797DD58;
  if (!qword_26797DD58)
  {
    uint64_t v1 = (void *)sub_216240D3C();
    v5[3] = (uint64_t)dlsym(v1, "kITDecoderNeuralTypeValueTap");
    qword_26797DD58 = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    CFAllocatorRef v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(void *)v0;
}

void sub_2162407E8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CFURLRef v3 = sub_216240114(*(void *)(*(void *)(a2 + 8) + 72));
    CFURLRef v4 = v3;
    uint64_t v5 = *(const void **)(a2 + 16);
    if (v3)
    {
      if (v5 && CFEqual(v3, v5))
      {
        CFRelease(v4);
        return;
      }
    }
    else if (!v5)
    {
      return;
    }
    uint64_t v6 = (const void *)sub_2162406E0();
    if (*(_DWORD *)(*(void *)(a2 + 8) + 4) == 2) {
      uint64_t v7 = @"zh-Hant";
    }
    else {
      uint64_t v7 = @"zh-Hans";
    }
    uint64_t v8 = (const void *)sub_2162401A0(v6, v7, v4);
    sub_216240980((const void **)(a2 + 24), v8);
    *(unsigned char *)(*(void *)(a2 + 8) + 96) = *(void *)(a2 + 24) != 0;
    sub_21617DB94((const void **)(a2 + 16), v4);
  }
}

void sub_2162408C8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2162408EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
  if (v2) {
    sub_21617D07C(*(void *)(v2 + 8), (const void *)a1);
  }
  sub_216240980((const void **)(a1 + 24), 0);
  sub_21617DB94((const void **)(a1 + 16), 0);
  return a1;
}

void sub_216240948(uint64_t a1)
{
  sub_2162408EC(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216240980(const void **a1, const void *a2)
{
  CFURLRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void *sub_2162409B8(void *a1, uint64_t a2)
{
  *a1 = &unk_26C6C5800;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  CFURLRef v4 = (const void **)qword_26797DD60;
  uint64_t v12 = qword_26797DD60;
  if (!qword_26797DD60)
  {
    uint64_t v5 = (void *)sub_216240D3C();
    v10[3] = (uint64_t)dlsym(v5, "kITDecoderNeuralTypeValuePath");
    qword_26797DD60 = v10[3];
    CFURLRef v4 = (const void **)v10[3];
  }
  _Block_object_dispose(&v9, 8);
  if (!v4)
  {
    dlerror();
    uint64_t v8 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(v8);
  }
  if (*(_DWORD *)(a2 + 4) == 2) {
    uint64_t v6 = @"zh-Hant";
  }
  else {
    uint64_t v6 = @"zh-Hans";
  }
  a1[1] = sub_2162401A0(*v4, v6, 0);
  return a1;
}

uint64_t sub_216240B18(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_216240B20(uint64_t a1)
{
  return a1;
}

void sub_216240B50(uint64_t a1)
{
  sub_216240980((const void **)(a1 + 8), 0);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216240BA0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_216240BA8()
{
  if (!qword_26797F000) {
    qword_26797F000 = _sl_dlopen();
  }
  return qword_26797F000;
}

uint64_t sub_216240C78()
{
  uint64_t result = _sl_dlopen();
  qword_26797F000 = result;
  return result;
}

void *sub_216240CEC(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "ITDecoderSetLinguisticContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797F008 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_216240D3C()
{
  uint64_t v0 = sub_216240BA8();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *sub_216240D98(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "ITDecoderClearNeuralNetworkBuffer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797F010 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216240DE8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "ITDecoderEnumerateCandidates");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797F018 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216240E38(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "ITCandidateEnumerateTokenIDs");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797F020 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216240E88(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "ITCandidateGetScore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797F028 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216240ED8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "kITDecoderLocaleKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797DD68 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216240F28(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "kITDecoderNeuralTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797DD70 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216240F78(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "kITTouchTranscoderBundleURLKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797DD78 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216240FC8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "ITDecoderCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797DD80 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216241018(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
}

void *sub_21624104C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "kITDecoderNeuralTypeValueTap");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797DD58 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_21624109C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_216240D3C();
  uint64_t result = dlsym(v2, "kITDecoderNeuralTypeValuePath");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797DD60 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_2162410EC(uint64_t a1, const char *a2)
{
  CFURLRef v3 = *(sqlite3 **)(a1 + 16);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t result = sqlite3_prepare_v2(v3, a2, -1, (sqlite3_stmt **)(a1 + 8), 0);
  if (result)
  {
    if (result == 26 || result == 11)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1;
      goto LABEL_10;
    }
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 4;
LABEL_10:
    __cxa_throw(exception, (struct type_info *)&unk_26C6B9418, 0);
  }
  return result;
}

uint64_t sub_216241168(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, int a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  sub_2162410EC(a1, a4);
  if (a2 && *(void *)(a1 + 8)) {
    sub_21624146C(*(uint64_t ***)a1, (int *)a1, a5);
  }
  return a1;
}

sqlite3_stmt *sub_2162411C8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFURLRef v4 = a1;
    sub_216241710(v2, (unint64_t *)&v4);
  }
  uint64_t result = (sqlite3_stmt *)a1[1];
  if (result)
  {
    uint64_t result = (sqlite3_stmt *)sqlite3_finalize(result);
    a1[1] = 0;
  }
  return result;
}

uint64_t sub_216241214(uint64_t a1)
{
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a1 + 8));
  if (result == 26 || result == 11)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1;
    __cxa_throw(exception, (struct type_info *)&unk_26C6B9418, 0);
  }
  return result;
}

uint64_t sub_21624125C(uint64_t a1, int a2, const void *a3, uint64_t a4, int a5)
{
  if (a5 && !a4)
  {
    uint64_t v7 = sub_216268B64();
    a3 = (const void *)*v7;
    a4 = v7[1];
  }
  int v8 = 2 * a4;
  uint64_t v9 = *(sqlite3_stmt **)(a1 + 8);

  return sqlite3_bind_blob(v9, a2, a3, v8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void *sub_2162412B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  uint64_t result = (void *)sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), a2);
  if (result > 1)
  {
    uint64_t v7 = (uint64_t)(int)result >> 1;
    sub_21610FC8C(a3, v7);
    int v8 = *a3;
    uint64_t v9 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 8), a2);
    return memcpy(v8, v9, 2 * v7);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_216241350(_Unwind_Exception *exception_object)
{
  CFURLRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21624136C(uint64_t a1)
{
  return a1;
}

void sub_2162413B0(void *a1)
{
  sub_21624178C((uint64_t *)&v6, (uint64_t)a1);
  uint64_t v2 = v6;
  if (v6 != v7)
  {
    do
    {
      sub_2162411C8(v2[4]);
      CFURLRef v3 = v2[1];
      if (v3)
      {
        do
        {
          CFURLRef v4 = (void **)v3;
          CFURLRef v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          CFURLRef v4 = (void **)v2[2];
          BOOL v5 = *v4 == v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v7);
  }
  sub_2162414D4(a1);
  sub_21612A250((uint64_t)&v6, v7[0]);
}

void sub_216241454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t **sub_21624146C(uint64_t **a1, int *a2, int a3)
{
  int v6 = a3;
  uint64_t v7 = a2;
  sub_216241590(a1, (unint64_t *)&v7, (uint64_t *)&v7);
  uint64_t v7 = &v6;
  uint64_t result = sub_21624164C(a1 + 3, &v6, (uint64_t)&unk_21636EABA, &v7);
  result[5] = (uint64_t *)a2;
  return result;
}

void sub_2162414D4(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  CFURLRef v3 = (void *)a1[3];
  CFURLRef v4 = a1 + 4;
  if (v3 != a1 + 4)
  {
    do
    {
      uint64_t v5 = v3[5];
      if (v5)
      {
        sub_2162411C8((uint64_t *)v3[5]);
        MEMORY[0x2166CA800](v5, 0x20C40960023A9);
      }
      int v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          CFURLRef v3 = v7;
        }
        while (!v8);
      }
      CFURLRef v3 = v7;
    }
    while (v7 != v4);
  }
  sub_21612A250(v2, (void *)a1[4]);
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = v4;
}

uint64_t *sub_216241590(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    _DWORD v10[4] = *a3;
    sub_21612A650(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t **sub_21624164C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_21612A650(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_216241710(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  CFURLRef v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      CFURLRef v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_2161EB3DC((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *sub_21624178C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_2162417E4(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2162417CC(_Unwind_Exception *a1)
{
  sub_21612A250(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2162417E4(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    CFURLRef v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      uint64_t result = sub_216241870(v5, v6, v4 + 4, v4 + 4);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          CFURLRef v4 = v8;
        }
        while (!v9);
      }
      CFURLRef v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_216241870(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  BOOL v6 = (uint64_t **)sub_2162418F8(a1, a2, &v11, &v10, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_21612A650(a1, v11, v8, v7);
  }
  return v7;
}

void *sub_2162418F8(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      std::string v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        std::string v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    CFErrorRef v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          CFErrorRef v16 = (void *)*v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        CFErrorRef v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      unint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    CFErrorRef v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          CFStringRef v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          CFErrorRef v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        CFErrorRef v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      CFStringRef v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_216241AA0(unsigned int a1@<W0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v6 = sub_2161E2A24(a1);
  sub_21610B834(&v37, v6);
  unint64_t v7 = std::string::append(&v37, "-UniLM", 6uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v36 = v7->__r_.__value_.__r.__words[2];
  long long ptr = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  BOOL v9 = sub_2162D1CE4(0xDu);
  if (os_signpost_enabled(v9))
  {
    p_long long ptr = &ptr;
    if (v36 < 0) {
      p_long long ptr = (long long *)ptr;
    }
    LODWORD(v37.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_ptr;
    _os_signpost_emit_with_name_impl(&dword_2160F5000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "getSharedUniLanguageModel", "Creating UniLM with identifier [%s]", (uint8_t *)&v37, 0xCu);
  }
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 1174405120;
  v31[2] = sub_216242534;
  v31[3] = &unk_26C6C9CD8;
  if (SHIBYTE(v36) < 0)
  {
    sub_21610A674(&__p, (void *)ptr, *((unint64_t *)&ptr + 1));
  }
  else
  {
    long long __p = ptr;
    uint64_t v33 = v36;
  }
  unsigned int v34 = a1;
  if (qword_26797EEB0 != -1) {
    dispatch_once(&qword_26797EEB0, &unk_26C6CA200);
  }
  v37.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  v37.__r_.__value_.__l.__size_ = 0x40000000;
  v37.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_216242EB8;
  uint64_t v38 = &unk_2642675B0;
  __int16 v40 = &ptr;
  uint64_t v41 = qword_26797EEA8;
  char v42 = 0;
  uint64_t v39 = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DD90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DD90))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DD98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DD98))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797C638, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DD98);
  }
  std::mutex::lock(&stru_26797C638);
  uint64_t v11 = (void *)qword_26797DD88;
  unint64_t v12 = sub_216129260(qword_26797DD88 + 24, (uint64_t)&ptr);
  int8x8_t v13 = (int8x8_t)v11[1];
  if (!*(void *)&v13) {
    goto LABEL_31;
  }
  unint64_t v14 = v12;
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
  v15.i16[0] = vaddlv_u8(v15);
  unint64_t v16 = v15.u32[0];
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v17 = v12;
    if (v12 >= *(void *)&v13) {
      unint64_t v17 = v12 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v17 = (*(void *)&v13 - 1) & v12;
  }
  unint64_t v18 = *(unsigned __int8 ***)(*v11 + 8 * v17);
  if (!v18 || (uint64_t v19 = *v18) == 0)
  {
LABEL_31:
    unint64_t v22 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v23 = os_signpost_id_make_with_pointer(v22, &ptr);
    BOOL v24 = sub_2162D1CE4(0xDu);
    if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v25 = v24;
      if (os_signpost_enabled(v24))
      {
        CFErrorRef v26 = &ptr;
        if (v36 < 0) {
          CFErrorRef v26 = (long long *)ptr;
        }
        int buf = 136315138;
        *(void *)buf_4 = v26;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v25, OS_SIGNPOST_INTERVAL_BEGIN, v23, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    ((void (*)(std::string *))v37.__r_.__value_.__r.__words[2])(&v37);
    operator new();
  }
  uint64_t v20 = (uint64_t)(v11 + 4);
  while (1)
  {
    unint64_t v21 = *((void *)v19 + 1);
    if (v21 == v14) {
      break;
    }
    if (v16 > 1)
    {
      if (v21 >= *(void *)&v13) {
        v21 %= *(void *)&v13;
      }
    }
    else
    {
      v21 &= *(void *)&v13 - 1;
    }
    if (v21 != v17) {
      goto LABEL_31;
    }
LABEL_30:
    uint64_t v19 = *(unsigned __int8 **)v19;
    if (!v19) {
      goto LABEL_31;
    }
  }
  if ((sub_21612970C(v20, v19 + 16, (unsigned __int8 *)&ptr) & 1) == 0) {
    goto LABEL_30;
  }
  int v27 = (std::__shared_weak_count *)*((void *)v19 + 6);
  if (!v27) {
    goto LABEL_31;
  }
  if (v27->__shared_owners_ == -1 || a2 != 0) {
    goto LABEL_31;
  }
  uint64_t v29 = std::__shared_weak_count::lock(v27);
  if (v29) {
    uint64_t v30 = *((void *)v19 + 5);
  }
  else {
    uint64_t v30 = 0;
  }
  std::mutex::unlock(&stru_26797C638);
  *a3 = v30;
  a3[1] = v29;
  if (v29)
  {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_2161121B0(v29);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)ptr);
  }
}

void sub_21624244C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void sub_216242534(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_2162D1CE4(7u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v3 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v3 = (void *)*v3;
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[getSharedUniLanguageModel] Actually creating UniLM with identifier [%s]", buf, 0xCu);
  }
  operator new();
}

void sub_216242998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_216242AB8(unsigned int *a1)
{
  if (a1)
  {
    sub_216242AB8(*(void *)a1);
    sub_216242AB8(*((void *)a1 + 1));
    uint64_t v2 = a1[20];
    if (v2 != -1) {
      ((void (*)(char *, unsigned int *))off_26C6F6108[v2])(&v3, a1 + 14);
    }
    a1[20] = -1;
    if (*((char *)a1 + 55) < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void sub_216242B5C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t *sub_216242B70(uint64_t **a1, void **a2, _OWORD **a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    long long v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = (uint64_t *)operator new(0x58uLL);
    uint64_t v11 = *a3;
    uint64_t v12 = *((void *)*a3 + 2);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = v12;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    *((unsigned char *)v10 + 56) = 0;
    *((_DWORD *)v10 + 2sub_216195244(&a9, 0) = 0;
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *unint64_t v6 = v10;
    int8x8_t v13 = (uint64_t *)**a1;
    unint64_t v14 = v10;
    if (v13)
    {
      *a1 = v13;
      unint64_t v14 = *v6;
    }
    sub_21612A6F4(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      long long v8 = (uint64_t **)v5;
      BOOL v9 = v5 + 4;
      if ((sub_216179024(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      unint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((sub_216179024(v9, a2) & 0x80) == 0) {
      break;
    }
    unint64_t v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  uint64_t v10 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v10;
}

uint64_t sub_216242C78(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C6F6108[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

void sub_216242CF8(unsigned int *a1)
{
  if (a1)
  {
    sub_216242CF8(*(void *)a1);
    sub_216242CF8(*((void *)a1 + 1));
    uint64_t v2 = a1[20];
    if (v2 != -1) {
      ((void (*)(char *, unsigned int *))off_26C6F6118[v2])(&v3, a1 + 14);
    }
    a1[20] = -1;
    if (*((char *)a1 + 55) < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void sub_216242D9C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t *sub_216242DB0(uint64_t **a1, void **a2, _OWORD **a3)
{
  unint64_t v6 = a1 + 1;
  long long v5 = a1[1];
  if (!v5)
  {
    long long v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = (uint64_t *)operator new(0x58uLL);
    uint64_t v11 = *a3;
    uint64_t v12 = *((void *)*a3 + 2);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = v12;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    *((_DWORD *)v10 + 14) = 0;
    *((_DWORD *)v10 + 2sub_216195244(&a9, 0) = 0;
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *unint64_t v6 = v10;
    int8x8_t v13 = (uint64_t *)**a1;
    unint64_t v14 = v10;
    if (v13)
    {
      *a1 = v13;
      unint64_t v14 = *v6;
    }
    sub_21612A6F4(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      long long v8 = (uint64_t **)v5;
      BOOL v9 = v5 + 4;
      if ((sub_216179024(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      long long v5 = *v8;
      unint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((sub_216179024(v9, a2) & 0x80) == 0) {
      break;
    }
    unint64_t v6 = v8 + 1;
    long long v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  uint64_t v10 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v10;
}

void sub_216242EB8()
{
}

void sub_216242FA0(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 144)) {
    std::mutex::unlock(*(std::mutex **)(v1 + 136));
  }
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v3);
  }
  std::mutex::~mutex(v2);
  uint64_t v5 = *(void *)v1;
  *(void *)uint64_t v1 = 0;
  if (v5) {
    sub_216204550(v1, v5);
  }
  MEMORY[0x2166CA800](v1, 0x10F2C40E01BBEB9);
  _Unwind_Resume(a1);
}

void sub_216243014(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21624304C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_2162430D8(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_216243094(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B4FE0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2162430D8(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = atomic_load((unsigned int *)(a1 + 40));
  if (v2 == 1)
  {
    char v3 = (uint64_t *)(a1 + 112);
    do
    {
      dispatch_time_t v4 = dispatch_time(0, 1000000);
      if (sub_2162041C8(a1, v4, 0)) {
        break;
      }
      unsigned int v5 = atomic_load((unsigned int *)(a1 + 40));
      if (v5 == 2) {
        break;
      }
      unint64_t v6 = sub_2162D1CE4(1u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = a1 + 112;
        if (*(char *)(a1 + 135) < 0) {
          uint64_t v8 = *v3;
        }
        *(_DWORD *)int buf = 136315138;
        uint64_t v12 = v8;
        _os_log_error_impl(&dword_2160F5000, v6, OS_LOG_TYPE_ERROR, "Still waiting for resource [%s] to complete in background.", buf, 0xCu);
      }
      unsigned int v7 = atomic_load((unsigned int *)(a1 + 40));
    }
    while (v7 == 1);
  }
  std::mutex::lock((std::mutex *)(a1 + 48));
  _Block_release(*(const void **)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  std::mutex::unlock((std::mutex *)(a1 + 48));
  if (*(unsigned char *)(a1 + 144)) {
    std::mutex::unlock(*(std::mutex **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = 0;
  if (v9) {
    sub_216204550(a1, v9);
  }
  return a1;
}

void sub_216243274(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2160F7444(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216243284(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7)
{
  uint64_t result = 0;
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  uint64_t v24 = a4;
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    if (a2) {
      BOOL v14 = a3 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = v14;
    if (v14)
    {
      unsigned int v16 = 1;
LABEL_13:
      if (!sub_216288234(a1, a5, &v24, &v23, a7, v16, 0, a3) && ((v15 | a6 ^ 1) & 1) == 0)
      {
        uint64_t v22 = 2 * sub_2161846A4((uint64_t)a2, a3 >> 1);
        if (v22)
        {
          uint64_t v31 = 0;
          memset(v30, 0, sizeof(v30));
          long long v27 = 0u;
          uint64_t v28 = 0;
          v25[0] = a1;
          v25[1] = 0;
          v25[2] = 0;
          void v25[3] = a2;
          v25[4] = a3;
          void v25[5] = a5;
          long long v26 = (unint64_t)a7;
          LODWORD(v27) = 2;
          uint64_t v29 = (char *)v30 + (a3 - v22) + 2;
          LOBYTE(v30[0]) = 1;
          BYTE1(v30[0]) = a3 != v22;
          sub_216243460(a1, (uint64_t)v25, 1, a2, a3 - v22, &a2[(a3 - v22)], v22, 0, 0.0, 0, (unint64_t *)&v23, 0, 0);
        }
      }
      return v23;
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 8);
      unsigned int v18 = 1;
      unint64_t v19 = a3;
      uint64_t v20 = a2;
      while (1)
      {
        int v21 = *v20++;
        unsigned int v16 = *(_DWORD *)(v17 + 8 * v18) + v21 + 1;
        if (*(_DWORD *)(v17 + 8 * v16 + 4) != v18) {
          return 0;
        }
        unsigned int v18 = v16;
        if (!--v19) {
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

BOOL sub_216243460(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, void *a6, uint64_t a7, _WORD *a8, float a9, int a10, unint64_t *a11, BOOL a12, int a13)
{
  uint64_t v13 = a7;
  uint64_t v15 = a3;
  uint64_t v18 = a1;
  BOOL v19 = a12;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = *(unsigned int *)(v20 + 8 * a3);
  int v22 = *(_DWORD *)(a2 + 64);
  __src = a6;
  if (v22 == 2)
  {
    if (a7 | a5 | a10) {
      goto LABEL_10;
    }
    if (*(_DWORD *)(v20 + 8 * v21 + 4) == a3)
    {
      if (a13)
      {
        int v26 = *(_DWORD *)(v20 + 8 * v21);
        if (v26 < 0)
        {
          if (*(void *)(a2 + 40))
          {
            int v27 = -v26;
            if (*(unsigned char *)(a2 + 81)) {
              BOOL v28 = !a12;
            }
            else {
              BOOL v28 = 1;
            }
            float v29 = 0.0;
            if (!v28) {
              float v29 = a9;
            }
            unint64_t v30 = *a11;
            uint64_t v31 = *(void *)(a2 + 48) + 24 * *a11;
            *(_WORD *)(v31 + 12) = *(_DWORD *)(a2 + 88) - a2 + *(_DWORD *)(a2 + 72) - 98;
            *(unsigned char *)(v31 + 1) = a12;
            *(unsigned char *)uint64_t v31 = *(unsigned char *)(a2 + 82);
            *(float *)(v31 + 4) = v29;
            *(_DWORD *)(v31 + 8) = v27;
            *a11 = v30 + 1;
            if (v30 + 1 >= *(void *)(a2 + 40)) {
              return 1;
            }
          }
          else
          {
            ++*a11;
          }
        }
      }
    }
    if (*(unsigned char *)(a2 + 97))
    {
      uint64_t v61 = (v21 + 1);
      for (unsigned int i = 257; i >= 2; --i)
      {
        if (*(_DWORD *)(*(void *)(v18 + 8) + 8 * v61 + 4) == v15)
        {
          uint64_t v63 = v13;
          ++*(void *)(a2 + 72);
          uint64_t v25 = 1;
          uint64_t v64 = v18;
          uint64_t v65 = v18;
          long long v66 = a4;
          uint64_t v67 = a8;
          if (sub_216243460(v65, a2, v61, a4, 0, a6, 0, a9)) {
            return v25;
          }
          --*(void *)(a2 + 72);
          a6 = __src;
          uint64_t v13 = v63;
          a8 = v67;
          a4 = v66;
          uint64_t v18 = v64;
          uint64_t v15 = a3;
        }
        uint64_t v61 = (v61 + 1);
      }
    }
    goto LABEL_10;
  }
  if (v22 != 1)
  {
    if (!v22 && !(a7 | a5 | a10))
    {
      if (*(_DWORD *)(v20 + 8 * v21 + 4) != a3) {
        return 0;
      }
      int v23 = *(_DWORD *)(v20 + 8 * v21);
      return v23 < 0 && sub_216244A48(a2, a12, -v23, a11, a9);
    }
LABEL_10:
    if (a5)
    {
      uint64_t v20 = *(void *)(v18 + 8);
      LODWORD(v21) = *(_DWORD *)(v20 + 8 * v15);
LABEL_13:
      uint64_t v24 = v21 + *a4 + 1;
      return *(_DWORD *)(v20 + 8 * v24 + 4) == v15
          && sub_216243460(v18, a2, v24, a4 + 1, (a5 - 1), a6, v13, a9);
    }
    goto LABEL_29;
  }
  if (a5) {
    goto LABEL_13;
  }
  if (*(_DWORD *)(v20 + 8 * v21 + 4) == a3)
  {
    int v32 = *(_DWORD *)(v20 + 8 * v21);
    if (v32 < 0)
    {
      unsigned __int8 v59 = a8;
      int v60 = sub_216244A48(a2, a12, -v32, a11, a9);
      a8 = v59;
      a6 = __src;
      if (v60) {
        return 1;
      }
    }
  }
LABEL_29:
  if (a10)
  {
    if (!*(unsigned char *)(a2 + 81)
      || (uint64_t v33 = (char *)a8 - *(void *)(a2 + 24), (v33 & 1) != 0)
      || (uint64_t v34 = *(unsigned int *)(a2 + 32), (v34 & 1) != 0)
      || v34 < 2
      || (uint64_t v35 = *(void *)(a2 + 56), (v35 & 1) != 0)
      || (int64_t v36 = a8,
          int v37 = sub_2161BFC5C(*(int **)(a2 + 8), *(CFArrayRef **)(a2 + 16), a9, (v33 >> 1) + 1, (v35 + (unint64_t)v33) >> 1, (unint64_t)(v35 + v34) >> 1, (uint64_t)v77, 0xEuLL), a8 = v36, a6 = __src, !v37))
    {
      v77[0] = *a8;
      float v78 = a9;
      int v37 = 1;
    }
    else if (v37 < 1)
    {
      return 0;
    }
    uint64_t v69 = v18;
    uint64_t v70 = v15;
    uint64_t v39 = 0;
    uint64_t v68 = a8;
    BOOL v38 = 1;
    __int16 v40 = (float *)v77;
    unint64_t v41 = v37;
    while (1)
    {
      unint64_t v74 = 0;
      uint64_t v75 = 0;
      if (!v19) {
        BOOL v19 = *(unsigned __int16 *)v40 != *v68;
      }
      if (!*(void *)(a2 + 8) && !*(void *)(a2 + 16)
        || *(unsigned char *)(a2 + 82) && (!*(unsigned char *)(a2 + 80) || !*(unsigned char *)(a2 + 96)))
      {
        break;
      }
      uint64_t v42 = sub_216183408(v19, (uint64_t)a6, v13, *(unsigned __int16 *)v40, v76, 16, (uint64_t)&v75, &v74);
      a6 = __src;
      if (v42 != -2)
      {
        uint64_t v43 = v42;
        if (v42 == -1) {
          return v38;
        }
        unint64_t v44 = v74;
        if (v74 <= 7)
        {
          uint64_t v45 = *(void **)(a2 + 88);
          if (!v42)
          {
LABEL_56:
            int v47 = sub_216243460(v69, a2, v70, v76, v43, v75, v44, v40[1]);
            a6 = __src;
            if (v47) {
              return v38;
            }
            *(void *)(a2 + 88) = v45;
            goto LABEL_58;
          }
LABEL_54:
          memcpy(v45, a6, v13);
          long long v46 = (_WORD *)(*(void *)(a2 + 88) + v13);
          *(void *)(a2 + 88) = v46;
          unint64_t v44 = v74;
          if (!v74)
          {
            _WORD *v46 = *(_WORD *)v40;
            *(void *)(a2 + 88) += 2;
            unint64_t v44 = v74;
          }
          goto LABEL_56;
        }
      }
LABEL_58:
      BOOL v38 = ++v39 < v41;
      v40 += 2;
      if (v41 == v39) {
        return 0;
      }
    }
    v76[0] = *(_WORD *)v40;
    unint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v43 = 2;
    uint64_t v45 = *(void **)(a2 + 88);
    goto LABEL_54;
  }
  if (!v13) {
    return 0;
  }
  if (!*(unsigned char *)(a2 + 96)) {
    return 0;
  }
  uint64_t v48 = *(void *)(a2 + 88);
  uint64_t v49 = a6;
  unint64_t v50 = sub_216183C5C((char *)a6, v13);
  if (!v50) {
    return 0;
  }
  __int16 v51 = v50;
  uint64_t v73 = v48;
  memcpy(*(void **)(a2 + 88), v49, v13);
  *(void *)(a2 + 88) += v13;
  if (*(_DWORD *)(a2 + 32) == v13 && *(_DWORD *)(a2 + 64) == 2) {
    *(unsigned char *)(a2 + 97) = 0;
  }
  uint64_t v52 = *(void *)v51;
  if (*((void *)v51 + 1) == *(void *)v51)
  {
LABEL_73:
    *(void *)(a2 + 88) = v73;
    return 0;
  }
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  uint64_t v25 = 1;
  while (1)
  {
    unint64_t v55 = (uint64_t *)(v52 + v53);
    if (*((char *)v55 + 23) < 0)
    {
      double v57 = (uint64_t *)*v55;
      uint64_t v56 = v55[1];
    }
    else
    {
      uint64_t v56 = *((unsigned __int8 *)v55 + 23);
      double v57 = v55;
    }
    if (sub_216243460(v18, a2, v15, v57, v56, 0, 0, a9)) {
      return v25;
    }
    ++v54;
    uint64_t v52 = *(void *)v51;
    v53 += 24;
    if (v54 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v51 + 1) - *(void *)v51) >> 3)) {
      goto LABEL_73;
    }
  }
}

unint64_t sub_216243B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  uint64_t v10 = a4;
  unint64_t v9 = 0;
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    sub_216243B64(a1, a5, &v10, &v9, a6, 1u, a2, a3, a7, 0);
    return v9;
  }
  return v7;
}

BOOL sub_216243B64(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v14 = a10;
  if (a8)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      if (a7)
      {
        if (a8 + v17)
        {
          if ((((_BYTE)a8 + (_BYTE)v17) & 1) == 0)
          {
            BOOL v19 = sub_216334794(*(unsigned __int16 *)(a7 + v18), a9);
            if (v19) {
              break;
            }
          }
        }
      }
      uint64_t v20 = *(void *)(a1 + 8);
      unsigned int v21 = *(_DWORD *)(v20 + 8 * a6) + *(unsigned __int8 *)(a7 + v18) + 1;
      if (*(_DWORD *)(v20 + 8 * v21 + 4) != a6) {
        return 0;
      }
      ++v18;
      --v17;
      a6 = v21;
      if (!(a8 + v17))
      {
        a6 = v21;
        goto LABEL_11;
      }
    }
    unint64_t v34 = a2;
    uint64_t v24 = *v19;
    unint64_t v25 = (char *)v19[1] - (char *)*v19;
    if ((int)(v25 >> 1) >= 1)
    {
      uint64_t v26 = 0;
      uint64_t v27 = v25 & 0x1FFFFFFFELL;
      while (1)
      {
        BOOL v28 = v14 || v26 == 0;
        uint64_t v29 = *(void *)(a1 + 8);
        if (!v28) {
          int v14 = 1;
        }
        uint64_t v30 = *(_DWORD *)(v29 + 8 * a6) + *((unsigned __int8 *)v24 + v26) + 1;
        if (*(_DWORD *)(v29 + 8 * v30 + 4) == a6
          && *(_DWORD *)(v29
                       + 8 * (*(_DWORD *)(v29 + 8 * v30) + *((unsigned __int8 *)v24 + v26 + 1) + 1)
                       + 4) == v30
          && sub_216243B64(a1, v34, a3, a4, a5))
        {
          break;
        }
        v26 += 2;
        if (v27 == v26) {
          return 0;
        }
      }
      return 1;
    }
    return 0;
  }
  uint64_t v20 = *(void *)(a1 + 8);
LABEL_11:
  uint64_t v22 = *(unsigned int *)(v20 + 8 * a6);
  if (*(_DWORD *)(v20 + 8 * v22 + 4) != a6) {
    return 0;
  }
  int v23 = *(_DWORD *)(v20 + 8 * v22);
  if ((v23 & 0x80000000) == 0) {
    return 0;
  }
  if (*a3)
  {
    --*a3;
    return 0;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v31 = *a4;
  uint64_t v32 = a5 + 24 * *a4;
  *(_WORD *)(v32 + 12) = (a10 != 0) << 8;
  *a4 = ++v31;
  *(_DWORD *)(v32 + 8) = -v23;
  return v31 >= a2;
}

unint64_t sub_216243D8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = 0;
  unint64_t v8 = 0;
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    sub_216243DE8(a1, a4, &v8, a5, 1u, a2, a3, a2, a6, 0);
    return v8;
  }
  return v6;
}

uint64_t sub_216243DE8(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, __int16 a8, int a9, int a10)
{
  if (!a7) {
    return 0;
  }
  int v16 = 0;
  uint64_t v17 = 0;
  int v18 = a10;
  __int16 v19 = a6 - a8;
  while (1)
  {
    if (a6)
    {
      if (a7 != v17 && ((a7 + v16) & 1) == 0)
      {
        uint64_t v20 = sub_216334794(*(unsigned __int16 *)(a6 + v17), a9);
        if (v20) {
          break;
        }
      }
    }
    uint64_t v21 = *(void *)(a1 + 8);
    uint64_t v22 = *(_DWORD *)(v21 + 8 * a5) + *(unsigned __int8 *)(a6 + v17) + 1;
    if (*(_DWORD *)(v21 + 8 * v22 + 4) != a5) {
      return 0;
    }
    uint64_t v23 = *(unsigned int *)(v21 + 8 * v22);
    if (*(_DWORD *)(v21 + 8 * v23 + 4) == v22)
    {
      if (a2)
      {
        int v24 = *(_DWORD *)(v21 + 8 * v23);
        if (v24 < 0)
        {
          unint64_t v25 = *a3;
          uint64_t v26 = a4 + 24 * *a3;
          __int16 v27 = a10 ? (v19 + v17 + 1) | 0x100 : v19 + (unsigned __int16)v17 + 1;
          *(_WORD *)(v26 + 12) = v27;
          *a3 = v25 + 1;
          *(_DWORD *)(v26 + 8) = -v24;
          if (v25 + 1 >= a2) {
            return 1;
          }
        }
      }
    }
    ++v17;
    --v16;
    a5 = v22;
    if (a7 == v17) {
      return 0;
    }
  }
  BOOL v28 = *v20;
  unint64_t v29 = (char *)v20[1] - (char *)*v20;
  if ((int)(v29 >> 1) < 1) {
    return 0;
  }
  uint64_t v30 = 0;
  __int16 v43 = a6 - a8 + v17 + 2;
  uint64_t v31 = v29 & 0x1FFFFFFFELL;
  while (1)
  {
    if (v18) {
      BOOL v32 = 1;
    }
    else {
      BOOL v32 = v30 == 0;
    }
    uint64_t v33 = *(void *)(a1 + 8);
    if (!v32) {
      int v18 = 1;
    }
    uint64_t v34 = *(_DWORD *)(v33 + 8 * a5) + *((unsigned __int8 *)v28 + v30) + 1;
    if (*(_DWORD *)(v33 + 8 * v34 + 4) == a5)
    {
      uint64_t v35 = *(_DWORD *)(v33 + 8 * v34) + *((unsigned __int8 *)v28 + v30 + 1) + 1;
      if (*(_DWORD *)(v33 + 8 * v35 + 4) == v34)
      {
        uint64_t v36 = *(unsigned int *)(v33 + 8 * v35);
        if (*(_DWORD *)(v33 + 8 * v36 + 4) == v35)
        {
          int v37 = *(_DWORD *)(v33 + 8 * v36);
          if (v37 < 0)
          {
            unint64_t v38 = *a3;
            uint64_t v39 = a4 + 24 * *a3;
            __int16 v40 = v43;
            if (v18) {
              __int16 v40 = v43 | 0x100;
            }
            *(_WORD *)(v39 + 12) = v40;
            unint64_t v41 = v38 + 1;
            *a3 = v41;
            *(_DWORD *)(v39 + 8) = -v37;
            if (v41 >= a2) {
              break;
            }
          }
        }
        if (sub_216243DE8(a1, a2, a3, a4)) {
          break;
        }
      }
    }
    v30 += 2;
    if (v31 == v30) {
      return 0;
    }
  }
  return 1;
}

unint64_t sub_216244078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  uint64_t v10 = a4;
  unint64_t v9 = 0;
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    sub_2162440E0(a1, a5, &v10, &v9, a6, 1u, a2, a3, a2, a7, 0);
    return v9;
  }
  return v7;
}

uint64_t sub_2162440E0(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  unsigned int v12 = a6;
  int v15 = a11;
  if (a8)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      if (a7)
      {
        if (a8 + v17)
        {
          if ((((_BYTE)a8 + (_BYTE)v17) & 1) == 0)
          {
            __int16 v19 = sub_216334794(*(unsigned __int16 *)(a7 + v18), a10);
            if (v19) {
              break;
            }
          }
        }
      }
      uint64_t v20 = *(void *)(a1 + 8);
      a6 = *(_DWORD *)(v20 + 8 * v12) + *(unsigned __int8 *)(a7 + v18) + 1;
      if (*(_DWORD *)(v20 + 8 * a6 + 4) != v12) {
        return 0;
      }
      ++v18;
      --v17;
      unsigned int v12 = a6;
      if (!(a8 + v17)) {
        goto LABEL_9;
      }
    }
    uint64_t v22 = *v19;
    unint64_t v23 = (char *)v19[1] - (char *)*v19;
    if ((int)(v23 >> 1) < 1) {
      return 0;
    }
    uint64_t v29 = a5;
    uint64_t v24 = 0;
    uint64_t v25 = v23 & 0x1FFFFFFFELL;
    while (1)
    {
      if (v15) {
        BOOL v26 = 1;
      }
      else {
        BOOL v26 = v24 == 0;
      }
      uint64_t v27 = *(void *)(a1 + 8);
      if (!v26) {
        int v15 = 1;
      }
      uint64_t v28 = *(_DWORD *)(v27 + 8 * v12) + *((unsigned __int8 *)v22 + v24) + 1;
      if (*(_DWORD *)(v27 + 8 * v28 + 4) == v12
        && *(_DWORD *)(v27
                     + 8 * (*(_DWORD *)(v27 + 8 * v28) + *((unsigned __int8 *)v22 + v24 + 1) + 1)
                     + 4) == v28
        && sub_2162440E0(a1, a2, a3, a4, v29))
      {
        break;
      }
      v24 += 2;
      if (v25 == v24) {
        return 0;
      }
    }
    return 1;
  }
  else
  {
LABEL_9:
    return sub_216244ACC(a1, a2, a3, a4, a5, a6, 0, a7 - a9, a11);
  }
}

uint64_t sub_2162442D8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void *a8)
{
  unsigned int v12 = a2;
  if (a4)
  {
    int v16 = 0;
    uint64_t v17 = 0;
    while (1)
    {
      if (a3)
      {
        if (a4 != v17 && ((a4 + v16) & 1) == 0)
        {
          uint64_t v18 = sub_216334794(*(unsigned __int16 *)(a3 + v17), 14);
          if (v18) {
            break;
          }
        }
      }
      uint64_t v19 = *(void *)(a1 + 8);
      int v20 = *(unsigned __int8 *)(a3 + v17);
      unsigned int v21 = *(_DWORD *)(v19 + 8 * v12) + v20 + 1;
      if (*(_DWORD *)(v19 + 8 * v21 + 4) != v12) {
        return 0;
      }
      *(unsigned char *)(a7 + v17++) = v20;
      --v16;
      unsigned int v12 = v21;
      if (a4 == v17)
      {
        a7 += v17;
        goto LABEL_11;
      }
    }
    unint64_t v26 = (char *)v18[1] - (char *)*v18;
    if ((int)(v26 >> 1) >= 1)
    {
      uint64_t v27 = (v26 >> 1);
      for (unsigned int i = (char *)*v18 + 1; ; i += 2)
      {
        *(unsigned char *)(a7 + v17) = *(i - 1);
        uint64_t v29 = *(void *)(a1 + 8);
        uint64_t v30 = *(_DWORD *)(v29 + 8 * v12) + *(i - 1) + 1;
        if (*(_DWORD *)(v29 + 8 * v30 + 4) == v12)
        {
          *(unsigned char *)(a7 + v17 + 1) = *i;
          if (*(_DWORD *)(*(void *)(a1 + 8)
                         + 8 * (*(_DWORD *)(*(void *)(a1 + 8) + 8 * v30) + *i + 1)
                         + 4) == v30)
          {
            if (sub_2162442D8(a1)) {
              break;
            }
          }
        }
        if (!--v27) {
          return 0;
        }
      }
      return 1;
    }
  }
  else
  {
    unsigned int v21 = a2;
LABEL_11:
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = *(unsigned int *)(v22 + 8 * v21);
    if (*(_DWORD *)(v22 + 8 * v23 + 4) == v21)
    {
      int v24 = *(_DWORD *)(v22 + 8 * v23);
      if (v24 < 0)
      {
        uint64_t result = 0;
        if (-v24 != a5) {
          return result;
        }
        *a8 = a7 - a6;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_2162444D4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v6 = 0;
  uint64_t v14 = 0;
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    unsigned int v7 = 1;
    unint64_t v8 = (unsigned char *)a5;
    if (a2 && a3)
    {
      unsigned int v9 = 1;
      unint64_t v8 = (unsigned char *)a5;
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        int v12 = *a2++;
        char v11 = v12;
        unsigned int v7 = *(_DWORD *)(v10 + 8 * v9) + v12 + 1;
        if (*(_DWORD *)(v10 + 8 * v7 + 4) != v9) {
          return 0;
        }
        *v8++ = v11;
        unsigned int v9 = v7;
        if (!--a3) {
          goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      sub_216244578(a1, v7, a6, a4, a5, v8, &v14);
      return v14;
    }
  }
  return v6;
}

uint64_t sub_216244578(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5, unsigned char *a6, void *a7)
{
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(unsigned int *)(v10 + 8 * a2);
  if (a3 && *(_DWORD *)(v10 + 8 * v11 + 4) == a2 && (int v12 = *(_DWORD *)(v10 + 8 * v11), v12 < 0) && -v12 == a4)
  {
    *a7 = &a6[-a5];
    return 1;
  }
  else
  {
    int v14 = 0;
    int v15 = v11 + 1;
    uint64_t v13 = 1;
    while (1)
    {
      *a6 = v14;
      if (*(_DWORD *)(*(void *)(a1 + 8) + 8 * (v15 + v14) + 4) == a2)
      {
        if (sub_216244578(a1)) {
          break;
        }
      }
      if (++v14 == 256) {
        return 0;
      }
    }
  }
  return v13;
}

uint64_t sub_216244674(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned char *a5)
{
  uint64_t v5 = 0;
  uint64_t v7 = 0;
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    sub_2162446CC((uint64_t **)a1, 1u, a2, a3, a4, (uint64_t)a5, a5, &v7);
    return v7;
  }
  return v5;
}

uint64_t **sub_2162446CC(uint64_t **result, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unsigned char *a7, void *a8)
{
  unsigned int v11 = a2;
  uint64_t v12 = (uint64_t)result;
  if (a4)
  {
    int v24 = a8;
    int v15 = 0;
    uint64_t v16 = 0;
    while (1)
    {
      if (a3)
      {
        if (a4 != v16 && ((a4 + v15) & 1) == 0)
        {
          uint64_t result = sub_216334794(*(unsigned __int16 *)(a3 + v16), 14);
          if (result) {
            break;
          }
        }
      }
      uint64_t v17 = *(void *)(v12 + 8);
      int v18 = *(unsigned __int8 *)(a3 + v16);
      a2 = *(_DWORD *)(v17 + 8 * v11) + v18 + 1;
      if (*(_DWORD *)(v17 + 8 * a2 + 4) != v11) {
        return result;
      }
      a7[v16++] = v18;
      --v15;
      unsigned int v11 = a2;
      if (a4 == v16)
      {
        a7 += v16;
        a8 = v24;
        goto LABEL_10;
      }
    }
    unint64_t v19 = (char *)result[1] - (char *)*result;
    if ((int)(v19 >> 1) >= 1)
    {
      uint64_t v20 = (v19 >> 1);
      unsigned int v21 = (char *)*result + 1;
      do
      {
        a7[v16] = *(v21 - 1);
        uint64_t v22 = *(void *)(v12 + 8);
        uint64_t v23 = *(_DWORD *)(v22 + 8 * v11) + *(v21 - 1) + 1;
        if (*(_DWORD *)(v22 + 8 * v23 + 4) == v11)
        {
          a7[v16 + 1] = *v21;
          if (*(_DWORD *)(*(void *)(v12 + 8)
                         + 8 * (*(_DWORD *)(*(void *)(v12 + 8) + 8 * v23) + *v21 + 1)
                         + 4) == v23)
            uint64_t result = (uint64_t **)sub_2162446CC(v12);
        }
        v21 += 2;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
LABEL_10:
    return (uint64_t **)sub_216244578(v12, a2, 0, a5, a6, a7, a8);
  }
  return result;
}

unint64_t sub_2162448C0(uint64_t a1, _WORD *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, char a10)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24) < 2uLL) {
    return 0;
  }
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t v17 = 0x10000;
  v15[0] = 0;
  v15[1] = a6;
  void v15[2] = a7;
  v15[3] = a2;
  void v15[4] = a3;
  void v15[5] = a4;
  v15[6] = a5;
  v15[7] = a8;
  BYTE1(v17) = a10;
  long long v16 = a9;
  int v18 = (char *)v19 + 2;
  BYTE1(v19[0]) = 1;
  unint64_t v14 = 0;
  if (!sub_216243460(a1, (uint64_t)v15, 1, 0, 0, 0, 0, a2, 0.0, a3, &v14, 0, 0))
  {
    LOBYTE(v19[0]) = v16 == 2;
    BYTE2(v17) = 0;
    *((void *)&v16 + 1) = 0;
    sub_216243460(a1, (uint64_t)v15, 1, 0, 0, 0, 0, a2, 0.0, a3, &v14, 0, 0);
  }
  return v14;
}

uint64_t sub_216244A48(uint64_t a1, int a2, int a3, unint64_t *a4, float a5)
{
  if (*(void *)(a1 + 40))
  {
    unint64_t v5 = *a4;
    int v6 = *(_DWORD *)(a1 + 72);
    unint64_t v7 = *a4 + 1;
    *a4 = v7;
    unint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48) + 24 * v5;
    if (*(unsigned char *)(a1 + 81)) {
      BOOL v10 = a2 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      a5 = 0.0;
    }
    *(_WORD *)(v9 + 12) = *(_DWORD *)(a1 + 88) - a1 + v6 - 98;
    *(unsigned char *)(v9 + 1) = a2;
    *(unsigned char *)uint64_t v9 = *(unsigned char *)(a1 + 82);
    *(float *)(v9 + 4) = a5;
    *(_DWORD *)(v9 + 8) = a3;
    if (v7 >= v8) {
      return 1;
    }
  }
  else
  {
    ++*a4;
  }
  return 0;
}

uint64_t sub_216244ACC(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4, uint64_t a5, unsigned int a6, int a7, uint64_t a8, int a9)
{
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(unsigned int *)(v14 + 8 * a6);
  if (a7)
  {
    if (*(_DWORD *)(v14 + 8 * v15 + 4) == a6)
    {
      int v16 = *(_DWORD *)(v14 + 8 * v15);
      if (v16 < 0)
      {
        if (*a3)
        {
          --*a3;
        }
        else if (a2)
        {
          unint64_t v22 = *a4;
          uint64_t v23 = a5 + 24 * *a4;
          __int16 v24 = a8 | 0x100;
          if (!a9) {
            __int16 v24 = a8;
          }
          *(_WORD *)(v23 + 12) = v24;
          unint64_t v25 = v22 + 1;
          *a4 = v25;
          *(_DWORD *)(v23 + 8) = -v16;
          if (v25 >= a2) {
            return 1;
          }
        }
        else
        {
          ++*a4;
        }
      }
    }
  }
  uint64_t v17 = a8 + 1;
  uint64_t v18 = (v15 + 1);
  int v19 = 257;
  uint64_t v20 = 1;
  while (*(_DWORD *)(*(void *)(a1 + 8) + 8 * v18 + 4) != a6
       || !sub_216244ACC(a1, a2, a3, a4, a5, v18, 1, v17, a9))
  {
    uint64_t v18 = (v18 + 1);
    if (--v19 <= 1) {
      return 0;
    }
  }
  return v20;
}

uint64_t sub_216244C24(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4)
{
  if (*(void *)(a1 + 8)) {
    BOOL v4 = a4 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  unint64_t v8 = a3;
  int v9 = *a3;
  BOOL v10 = &a3[v9 == 12306];
  unint64_t v11 = a4 - (v9 == 12306);
  if (v11 == 7)
  {
    char v13 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    if (v11 != 8) {
      return v5;
    }
    uint64_t v12 = 0;
    while ((unsigned __int16)word_2163CB67C[v12] != v10[3])
    {
      if (++v12 == 4) {
        return 0;
      }
    }
    if (v12 == -1) {
      return 0;
    }
    char v13 = 1;
  }
  BOOL v14 = 0;
  for (unint64_t i = 0; i != v11; v14 = i >= v11)
  {
    if (i == 3) {
      char v16 = v13;
    }
    else {
      char v16 = 0;
    }
    if ((v16 & 1) == 0)
    {
      int v17 = v10[i];
      unsigned int v18 = v17 - 48;
      unsigned int v19 = (unsigned __int16)(v17 + 240);
      if (v18 >= 0xA && v19 > 9) {
        break;
      }
    }
    ++i;
  }
  if (!v14) {
    return 0;
  }
  int v73 = *a3;
  BOOL v70 = v9 == 12306;
  int v21 = sub_21628DCE0(**(_DWORD **)a1);
  unint64_t v22 = (char *)operator new(7uLL);
  int v71 = v21 ^ 1;
  uint64_t v90 = v22;
  unint64_t v91 = v22;
  unint64_t v92 = v22 + 7;
  uint64_t v23 = &v8[a4];
  uint64_t v72 = (uint64_t)v8;
  do
  {
    int32_t v24 = u_charDigitValue(*v8);
    if ((v24 & 0x80000000) == 0)
    {
      char v25 = v24 + 48;
      if (v22 >= v92)
      {
        unint64_t v27 = (unint64_t)v90;
        uint64_t v28 = v22 - v90;
        uint64_t v29 = v22 - v90 + 1;
        if (v29 < 0) {
          sub_21610CB04();
        }
        unint64_t v30 = v92 - v90;
        if (2 * (v92 - v90) > (unint64_t)v29) {
          uint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v31 = v29;
        }
        if (v31) {
          BOOL v32 = (char *)operator new(v31);
        }
        else {
          BOOL v32 = 0;
        }
        uint64_t v33 = &v32[v28];
        uint64_t v34 = &v32[v28];
        *uint64_t v34 = v25;
        unint64_t v26 = v34 + 1;
        if (v22 != (char *)v27)
        {
          uint64_t v35 = &v22[~v27];
          do
          {
            char v36 = *--v22;
            (v35--)[(void)v32] = v36;
          }
          while (v22 != (char *)v27);
          unint64_t v22 = v90;
          uint64_t v33 = v32;
        }
        uint64_t v90 = v33;
        unint64_t v92 = &v32[v31];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *unint64_t v22 = v25;
        unint64_t v26 = v22 + 1;
      }
      unint64_t v91 = v26;
      unint64_t v22 = v26;
    }
    ++v8;
  }
  while (v8 != v23);
  int v37 = v90;
  if (v22 - v90 == 7)
  {
    uint64_t v87 = 0;
    long long v88 = 0;
    unint64_t v89 = 0;
    sub_216185B34((void **)&v87, 9uLL);
    if (v73 == 12306)
    {
      unint64_t v38 = v88;
      if ((unint64_t)v88 >= v89)
      {
        __int16 v40 = v87;
        uint64_t v41 = v88 - v87;
        if (v88 - v87 <= -3) {
          sub_21610CB04();
        }
        uint64_t v42 = v41 >> 1;
        if (v89 - (unint64_t)v87 <= (v41 >> 1) + 1) {
          uint64_t v43 = v42 + 1;
        }
        else {
          uint64_t v43 = v89 - (void)v87;
        }
        if (v89 - (unint64_t)v87 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v44 = v43;
        }
        if (v44)
        {
          uint64_t v45 = (char *)sub_21610FD44((uint64_t)&v89, v44);
          __int16 v40 = v87;
          unint64_t v38 = v88;
        }
        else
        {
          uint64_t v45 = 0;
        }
        long long v46 = &v45[2 * v42];
        int v47 = &v45[2 * v44];
        *(_WORD *)long long v46 = 12306;
        uint64_t v39 = v46 + 2;
        while (v38 != v40)
        {
          __int16 v48 = *((_WORD *)v38 - 1);
          v38 -= 2;
          *((_WORD *)v46 - 1) = v48;
          v46 -= 2;
        }
        uint64_t v87 = v46;
        long long v88 = v39;
        unint64_t v89 = (unint64_t)v47;
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *(_WORD *)long long v88 = 12306;
        uint64_t v39 = v38 + 2;
      }
      long long v88 = v39;
      int v37 = v90;
    }
    uint64_t v49 = 0;
    std::string __dst = &v87;
    do
    {
      LOWORD(__p[0]) = v37[v49];
      sub_216192280((uint64_t *)&__dst, __p);
      ++v49;
    }
    while (v49 != 3);
    unint64_t v50 = v88;
    if ((unint64_t)v88 >= v89)
    {
      uint64_t v52 = v87;
      uint64_t v53 = v88 - v87;
      if (v88 - v87 <= -3) {
        sub_21610CB04();
      }
      uint64_t v54 = v53 >> 1;
      if (v89 - (unint64_t)v87 <= (v53 >> 1) + 1) {
        uint64_t v55 = v54 + 1;
      }
      else {
        uint64_t v55 = v89 - (void)v87;
      }
      if (v89 - (unint64_t)v87 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v56 = v55;
      }
      if (v56)
      {
        double v57 = (char *)sub_21610FD44((uint64_t)&v89, v56);
        uint64_t v52 = v87;
        unint64_t v50 = v88;
      }
      else
      {
        double v57 = 0;
      }
      unint64_t v58 = &v57[2 * v54];
      unsigned __int8 v59 = &v57[2 * v56];
      *(_WORD *)unint64_t v58 = 45;
      __int16 v51 = v58 + 2;
      while (v50 != v52)
      {
        __int16 v60 = *((_WORD *)v50 - 1);
        v50 -= 2;
        *((_WORD *)v58 - 1) = v60;
        v58 -= 2;
      }
      uint64_t v87 = v58;
      long long v88 = v51;
      unint64_t v89 = (unint64_t)v59;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      *(_WORD *)long long v88 = 45;
      __int16 v51 = v50 + 2;
    }
    uint64_t v61 = 0;
    long long v88 = v51;
    std::string __dst = &v87;
    do
    {
      LOWORD(__p[0]) = v37[v61 + 3];
      sub_216192280((uint64_t *)&__dst, __p);
      ++v61;
    }
    while (v61 != 4);
    if (v73 == 12306) {
      int v62 = 1;
    }
    else {
      int v62 = v71;
    }
    if (v62 != 1) {
      goto LABEL_108;
    }
    IntPropertyCFArrayRef Value = u_getIntPropertyValue(*(unsigned __int16 *)(v72 + 2), UCHAR_EAST_ASIAN_WIDTH);
    if (IntPropertyValue == 5 || IntPropertyValue == 3)
    {
      uint64_t v65 = sub_21617FAAC(&__dst, v87, (v88 - v87) >> 1);
      sub_2161EBA4C((uint64_t)v65);
      long long v88 = v87;
      unint64_t v66 = HIBYTE(v85);
      if (v85 >= 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = __dst;
      }
      if (v85 < 0) {
        unint64_t v66 = (unint64_t)v84;
      }
      sub_2161BF794(p_dst, &p_dst[v66], (uint64_t)&v87);
      if (SHIBYTE(v85) < 0) {
        operator delete(__dst);
      }
    }
    if (v73 != 12306) {
LABEL_108:
    }
      sub_216245310(a1, a2, v72, a4, v72, a4, v72, a4);
    std::string __dst = 0;
    unint64_t v84 = &__dst;
    uint64_t v85 = 0x2000000000;
    int v86 = 0;
    uint64_t v68 = *(void *)(a1 + 8);
    int v37 = v90;
    sub_21612F5FC(__p, v90, v91 - v90);
    char v79 = v62;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    sub_216182F50(&v76, v87, (uint64_t)v88, (v88 - v87) >> 1);
    BOOL v80 = v70;
    sub_2161AACE4(v68, (const void **)__p);
    if (v82 < 0) {
      operator delete(__p[0]);
    }
    int v69 = *((_DWORD *)v84 + 6);
    if (v76)
    {
      uint64_t v77 = v76;
      operator delete(v76);
    }
    uint64_t v5 = (2 * v69) | 1u;
    _Block_object_dispose(&__dst, 8);
    if (v87)
    {
      long long v88 = v87;
      operator delete(v87);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v37) {
    operator delete(v37);
  }
  return v5;
}

void sub_216245254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  char v36 = *(void **)(v34 - 136);
  if (v36)
  {
    *(void *)(v34 - 128) = v36;
    operator delete(v36);
  }
  int v37 = *(void **)(v34 - 112);
  if (v37)
  {
    *(void *)(v34 - 104) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void sub_216245310(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8 = a8;
  __int16 v9 = a6;
  __int16 v10 = a4;
  if (a5 || !a6)
  {
    if (a8) {
      BOOL v11 = a7 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11 && a4 <= 0xFF)
    {
      uint64_t v12 = operator new(0x28uLL);
      v12[1] = 0;
      uint64_t v12[2] = 0;
      *uint64_t v12 = 0;
      *((_WORD *)v12 + 12) = v8;
      *((_WORD *)v12 + 13) = v10;
      *((_WORD *)v12 + 14) = v9;
      *(void *)((char *)v12 + 3sub_216195244(&a9, 0) = 0;
      *((_WORD *)v12 + 19) = 2;
      operator new();
    }
  }
}

void sub_2162455AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16))(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_216245664(uint64_t a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_216245310(v6, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 1);
  }
  if (a2) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = 0;
  }
  sub_216245310(v6, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 56), *(void *)(a1 + 64), (uint64_t)a2, v7);
  long long __p = 0;
  size_t v31 = 0;
  unint64_t v32 = 0;
  sub_216185B34(&__p, 0x5BuLL);
  if (!*(unsigned char *)(a1 + 97))
  {
    __int16 v8 = v31;
    if ((unint64_t)v31 >= v32)
    {
      __int16 v10 = (char *)__p;
      uint64_t v11 = v31 - (unsigned char *)__p;
      if (v31 - (unsigned char *)__p <= -3) {
        sub_21610CB04();
      }
      uint64_t v12 = v11 >> 1;
      if (v32 - (unint64_t)__p <= (v11 >> 1) + 1) {
        uint64_t v13 = v12 + 1;
      }
      else {
        uint64_t v13 = v32 - (void)__p;
      }
      if (v32 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v14 = v13;
      }
      if (v14)
      {
        uint64_t v15 = (char *)sub_21610FD44((uint64_t)&v32, v14);
        __int16 v10 = (char *)__p;
        __int16 v8 = v31;
      }
      else
      {
        uint64_t v15 = 0;
      }
      char v16 = &v15[2 * v12];
      int v17 = &v15[2 * v14];
      *(_WORD *)char v16 = 12306;
      __int16 v9 = v16 + 2;
      while (v8 != v10)
      {
        __int16 v18 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *((_WORD *)v16 - 1) = v18;
        v16 -= 2;
      }
      long long __p = v16;
      size_t v31 = v9;
      unint64_t v32 = (unint64_t)v17;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(_WORD *)size_t v31 = 12306;
      __int16 v9 = v8 + 2;
    }
    size_t v31 = v9;
  }
  sub_2161BF794(*(_WORD **)(a1 + 72), *(_WORD **)(a1 + 80), (uint64_t)&__p);
  unsigned int v19 = v31;
  if ((unint64_t)v31 >= v32)
  {
    int v21 = (char *)__p;
    uint64_t v22 = v31 - (unsigned char *)__p;
    if (v31 - (unsigned char *)__p <= -3) {
      sub_21610CB04();
    }
    uint64_t v23 = v22 >> 1;
    if (v32 - (unint64_t)__p <= (v22 >> 1) + 1) {
      uint64_t v24 = v23 + 1;
    }
    else {
      uint64_t v24 = v32 - (void)__p;
    }
    if (v32 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v25 = v24;
    }
    if (v25)
    {
      unint64_t v26 = (char *)sub_21610FD44((uint64_t)&v32, v25);
      int v21 = (char *)__p;
      unsigned int v19 = v31;
    }
    else
    {
      unint64_t v26 = 0;
    }
    unint64_t v27 = &v26[2 * v23];
    uint64_t v28 = &v26[2 * v25];
    *(_WORD *)unint64_t v27 = 32;
    uint64_t v20 = v27 + 2;
    while (v19 != v21)
    {
      __int16 v29 = *((_WORD *)v19 - 1);
      v19 -= 2;
      *((_WORD *)v27 - 1) = v29;
      v27 -= 2;
    }
    long long __p = v27;
    size_t v31 = v20;
    unint64_t v32 = (unint64_t)v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_WORD *)size_t v31 = 32;
    uint64_t v20 = v19 + 2;
  }
  size_t v31 = v20;
  sub_2161BF794(a2, &a2[a3], (uint64_t)&__p);
  sub_216245310(v6, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 56), *(void *)(a1 + 64), (uint64_t)__p, (v31 - (unsigned char *)__p) >> 1);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (__p)
  {
    size_t v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_216245940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216245964(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_216195244(&a9, 0) = 0;
  unsigned int v2 = (void *)(a1 + 72);
  v2[2] = 0;
  return sub_216182F50(v2, *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 1);
}

void sub_216245980(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8sub_216195244(&a9, 0) = v2;
    operator delete(v2);
  }
}

BOOL sub_216245998(uint64_t a1, uint64_t a2)
{
  if (a2 < 1)
  {
    return 1;
  }
  else
  {
    BOOL v2 = 0;
    for (uint64_t i = 0; i != a2; v2 = i >= a2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 2 * i);
      if ((v4 - 12549) >= 0x25)
      {
        uint64_t v5 = 0;
        while ((unsigned __int16)word_216381F32[v5] != v4)
        {
          if (++v5 == 5) {
            return v2;
          }
        }
        if (v5 == -1) {
          break;
        }
      }
      ++i;
    }
  }
  return v2;
}

uint64_t sub_216245A0C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F038, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F038))
  {
    qword_26797F030 = (uint64_t)sub_216245A80();
    __cxa_guard_release(&qword_26797F038);
  }
  return qword_26797F030;
}

void sub_216245A68(_Unwind_Exception *a1)
{
}

CFPropertyListRef sub_216245A80()
{
  uint64_t v0 = (uint64_t *)sub_2162D8C20();
  uint64_t v1 = (const char *)sub_2162D8D64(v0, 2uLL, off_26797C900[0], off_26797C8C8[0], 0);
  if (v1[23] >= 0) {
    BOOL v2 = v1;
  }
  else {
    BOOL v2 = *(const char **)v1;
  }
  CFStringRef v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
  CFPropertyListRef v4 = sub_2161E4520(v3);
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

void sub_216245B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216245B28(const __CFArray *a1)
{
  uint64_t v2 = sub_216245A0C();
  if (!v2) {
    return 0;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)v2;
  if (CFArrayGetCount(a1) < 1) {
    return 1;
  }
  CFIndex v4 = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  do
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v4);
    CFIndex v7 = CFStringGetLength(ValueAtIndex) - 1;
    int CharacterAtIndex = CFStringGetCharacterAtIndex(ValueAtIndex, v7);
    uint64_t v9 = 0;
    while ((unsigned __int16)word_216381F32[v9] != CharacterAtIndex)
    {
      if (++v9 == 5) {
        goto LABEL_9;
      }
    }
    if (v9 == -1)
    {
LABEL_9:
      CFArrayRef Value = CFDictionaryGetValue(v3, ValueAtIndex);
      goto LABEL_11;
    }
    v14.location = 0;
    v14.length = v7;
    CFStringRef v11 = CFStringCreateWithSubstring(v5, ValueAtIndex, v14);
    CFArrayRef Value = CFDictionaryGetValue(v3, v11);
    CFRelease(v11);
LABEL_11:
    BOOL v12 = Value != 0;
    if (!Value) {
      break;
    }
    CFArraySetValueAtIndex(a1, v4++, Value);
  }
  while (v4 < CFArrayGetCount(a1));
  return v12;
}

void sub_216245C68(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    uint64_t v6 = &a1[a2];
    CFIndex v7 = a1;
    while (2)
    {
      for (uint64_t i = 0; i != 5; ++i)
      {
        if (*v7 == (unsigned __int16)word_216381F32[i])
        {
          if (v7 != v6)
          {
            uint64_t v9 = (char *)v7 - (char *)a1;
            if ((char *)v7 - (char *)a1 != -2)
            {
              __int16 v10 = 0;
              uint64_t v11 = 0;
              BOOL v12 = a3 + 2;
              while (2)
              {
                uint64_t v13 = v9 >> 1;
                uint64_t v14 = (v9 >> 1) - v11 + 1;
                if ((unint64_t)v10 >= *v12)
                {
                  uint64_t v15 = *a3;
                  uint64_t v16 = v10 - *a3;
                  unint64_t v17 = v16 + 1;
                  if ((unint64_t)(v16 + 1) >> 61) {
                    sub_21610CB04();
                  }
                  uint64_t v18 = *v12 - (void)v15;
                  if (v18 >> 2 > v17) {
                    unint64_t v17 = v18 >> 2;
                  }
                  unint64_t v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v17;
                  if (v19)
                  {
                    uint64_t v20 = (char *)sub_2160FFAA8((uint64_t)(a3 + 2), v19);
                    uint64_t v15 = *a3;
                    __int16 v10 = a3[1];
                  }
                  else
                  {
                    uint64_t v20 = 0;
                  }
                  int v21 = (uint64_t *)&v20[8 * v16];
                  *int v21 = v14;
                  uint64_t v22 = v21 + 1;
                  while (v10 != v15)
                  {
                    uint64_t v23 = *--v10;
                    *--int v21 = v23;
                  }
                  *a3 = v21;
                  a3[1] = v22;
                  a3[2] = (uint64_t *)&v20[8 * v19];
                  if (v15) {
                    operator delete(v15);
                  }
                  __int16 v10 = v22;
                }
                else
                {
                  *v10++ = v14;
                }
                a3[1] = v10;
                uint64_t v11 = v13 + 1;
                if (a2 > v13 + 1)
                {
                  uint64_t v24 = &a1[v11];
LABEL_30:
                  uint64_t v25 = 0;
                  while (*v24 != (unsigned __int16)word_216381F32[v25])
                  {
                    if (++v25 == 5)
                    {
                      if (++v24 != v6) {
                        goto LABEL_30;
                      }
                      return;
                    }
                  }
                  if (v24 != v6)
                  {
                    uint64_t v9 = (char *)v24 - (char *)a1;
                    if (v9 != -2) {
                      continue;
                    }
                  }
                }
                break;
              }
            }
          }
          return;
        }
      }
      if (++v7 != v6) {
        continue;
      }
      break;
    }
  }
}

void sub_216245E2C(_Unwind_Exception *exception_object)
{
  CFDictionaryRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216245E4C(const __CFString *a1)
{
}

void sub_216245FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_216246008(void *a1)
{
  *a1 = &unk_26C6BDE30;
  sub_216246060((uint64_t)a1);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216246060(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  CFDictionaryRef v3 = *(void **)(a1 + 16);
  uint64_t v2 = a1 + 8;
  if (v1 != v3)
  {
    do
    {
      if (*v1) {
        (*(void (**)(void))(*(void *)*v1 + 8))(*v1);
      }
      ++v1;
    }
    while (v1 != v3);
    uint64_t v1 = *(void **)v2;
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0;
  if (v1)
  {
    operator delete(v1);
  }
}

void sub_216246104(void *a1)
{
  sub_216246008(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21624613C()
{
}

void sub_216246288(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40CAE7B1C5);
  _Unwind_Resume(a1);
}

void sub_2162462AC()
{
}

uint64_t sub_2162462C4(int a1, CFMutableDictionaryRef theDict, uint64_t a3, char a4)
{
  uint64_t result = 0;
  if (a3 && (a4 & 1) == 0)
  {
    uint64_t v6 = *(unsigned __int8 *)(a3 + 87);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a3 + 72);
    }
    if (v6)
    {
      return 0;
    }
    else
    {
      __int16 v8 = (const void *)*MEMORY[0x263EFFB40];
      CFDictionaryAddValue(theDict, @"predictionCandidateAccepted", (const void *)*MEMORY[0x263EFFB40]);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 96))(a3);
      uint64_t result = 1;
      int v10 = v9 - 67;
      uint64_t v11 = &off_26426BB60;
      switch(v10)
      {
        case 0:
          uint64_t v11 = &off_26426BB78;
          goto LABEL_14;
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 8:
        case 11:
        case 12:
          return result;
        case 4:
          uint64_t v11 = &off_26426BB38;
          goto LABEL_14;
        case 7:
        case 9:
          uint64_t v11 = &off_26426BB70;
          goto LABEL_14;
        case 10:
          goto LABEL_14;
        case 13:
          uint64_t v11 = &off_26426BB68;
          goto LABEL_14;
        default:
          if (&off_26426BB60 != 88) {
            return result;
          }
          uint64_t v11 = &off_26426BB48;
LABEL_14:
          CFDictionaryAddValue(theDict, *v11, v8);
          uint64_t result = 1;
          break;
      }
    }
  }
  return result;
}

void sub_216246434()
{
}

void sub_216246448()
{
}

void sub_216246558(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F3C4074548AAFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_21624657C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, int a9, int a10, unsigned __int16 **a11, uint64_t a12, int a13, unsigned __int8 a14, uint64_t a15)
{
  v56[5] = a3;
  v56[6] = a4;
  void v56[3] = a5;
  v56[4] = a6;
  v56[1] = a7;
  v56[2] = a8;
  if (a5)
  {
    if (a7)
    {
      long long __p = 0;
      uint64_t v55 = 0;
      v56[0] = 0;
      if (a8 <= 0x20 && a6 <= 0x20)
      {
        if (a8 && a6)
        {
          unint64_t v17 = 0;
          unint64_t v18 = 0;
          unint64_t v19 = 0;
          unint64_t v20 = a8 - 1;
          while (1)
          {
            unint64_t v21 = v18;
            while (1)
            {
              unint64_t v22 = v21 + 1;
              if (v20 == v21 || ((1 << v21) & a10) != 0) {
                break;
              }
              ++v21;
              if (a8 == v22)
              {
                unint64_t v22 = -1;
                break;
              }
            }
            uint64_t v23 = 0;
            while (a6 - v19 - 1 != v23 && ((1 << (v19 + v23)) & a9) == 0)
            {
              if (a6 - v19 == ++v23) {
                goto LABEL_56;
              }
            }
            if (v22 == -1) {
              break;
            }
            unint64_t v24 = v19 + v23;
            if (v19 + v23 == -2) {
              break;
            }
            unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - __p) >> 3);
            unint64_t v26 = *a11;
            if (v25 >= a11[1] - *a11 || v22 <= v18 || v24 < v19) {
              break;
            }
            __int16 v27 = v23 + 1;
            __int16 v51 = v23 + 1;
            unint64_t v52 = v19 + v23;
            if (*(unsigned char *)(a2 + 56))
            {
              unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - __p) >> 3);
              unint64_t v49 = v18;
              sub_2161D9054(a2, v19 + a15);
              __int16 v29 = v28;
              if (sub_2161D9054(a2, a15 + 1 + v19 + v23)) {
                BOOL v31 = v30 == 0;
              }
              else {
                BOOL v31 = 1;
              }
              if (v31) {
                __int16 v27 = 0;
              }
              else {
                __int16 v27 = v30 - v29;
              }
              unint64_t v26 = *a11;
              unint64_t v17 = v55;
              unint64_t v24 = v19 + v23;
              unint64_t v25 = v48;
              unint64_t v18 = v49;
            }
            __int16 v32 = a14;
            if (v18) {
              __int16 v32 = 0;
            }
            __int16 v33 = v32 - v18 + v22;
            unsigned __int16 v34 = v26[v25];
            if ((unint64_t)v17 >= v56[0])
            {
              __int16 v50 = v33;
              unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - __p) >> 3);
              unint64_t v36 = v35 + 1;
              if (v35 + 1 > 0x666666666666666) {
                sub_21618B344();
              }
              if (0x999999999999999ALL * ((uint64_t)(v56[0] - (void)__p) >> 3) > v36) {
                unint64_t v36 = 0x999999999999999ALL * ((uint64_t)(v56[0] - (void)__p) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v56[0] - (void)__p) >> 3) >= 0x333333333333333) {
                unint64_t v37 = 0x666666666666666;
              }
              else {
                unint64_t v37 = v36;
              }
              if (v37) {
                unint64_t v38 = (char *)sub_21618B4A8((uint64_t)v56, v37);
              }
              else {
                unint64_t v38 = 0;
              }
              uint64_t v39 = &v38[40 * v35];
              *(_DWORD *)uint64_t v39 = 3;
              *((_DWORD *)v39 + 5) = 0;
              *(void *)(v39 + 12) = 0;
              *(void *)(v39 + 4) = 0;
              *((_WORD *)v39 + 12) = v50;
              *((_WORD *)v39 + 13) = v27;
              *((_WORD *)v39 + 14) = v51;
              *((_WORD *)v39 + 15) = v34;
              *((_WORD *)v39 + 16) = v34;
              *((_WORD *)v39 + 17) = 0;
              v39[36] = 0;
              *(_WORD *)(v39 + 37) = 513;
              v39[39] = 0;
              __int16 v40 = v55;
              uint64_t v41 = v39;
              if (v55 != __p)
              {
                do
                {
                  long long v42 = *(_OWORD *)(v40 - 40);
                  long long v43 = *(_OWORD *)(v40 - 24);
                  *((void *)v41 - 1) = *((void *)v40 - 1);
                  *(_OWORD *)(v41 - 24) = v43;
                  *(_OWORD *)(v41 - 4sub_216195244(&a9, 0) = v42;
                  v41 -= 40;
                  v40 -= 40;
                }
                while (v40 != __p);
                __int16 v40 = __p;
              }
              unint64_t v17 = v39 + 40;
              long long __p = v41;
              v56[0] = &v38[40 * v37];
              if (v40)
              {
                uint64_t v44 = v39 + 40;
                operator delete(v40);
                unint64_t v17 = v44;
              }
              unint64_t v24 = v52;
            }
            else
            {
              *(_DWORD *)unint64_t v17 = 3;
              *(void *)(v17 + 12) = 0;
              *(void *)(v17 + 4) = 0;
              *((_DWORD *)v17 + 5) = 0;
              *((_WORD *)v17 + 12) = v33;
              *((_WORD *)v17 + 13) = v27;
              *((_WORD *)v17 + 14) = v51;
              *((_WORD *)v17 + 15) = v34;
              *((_WORD *)v17 + 16) = v34;
              *((_WORD *)v17 + 17) = 0;
              v17[36] = 0;
              *(_WORD *)(v17 + 37) = 513;
              v17[39] = 0;
              v17 += 40;
            }
            uint64_t v55 = v17;
            if (v22 < a8)
            {
              unint64_t v19 = v24 + 1;
              unint64_t v18 = v22;
              if (v24 + 1 < a6) {
                continue;
              }
            }
            goto LABEL_52;
          }
        }
        else
        {
LABEL_52:
          sub_2161C04AC(0);
          uint64_t v45 = *a11;
          long long v46 = a11[1];
          if (*a11 == v46) {
LABEL_55:
          }
            sub_216246448();
          while (qword_26797EF20 > (unint64_t)*v45)
          {
            if (++v45 == v46) {
              goto LABEL_55;
            }
          }
        }
LABEL_56:
        if (__p) {
          operator delete(__p);
        }
      }
    }
  }
  return 0;
}

void sub_2162469F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216246A18(uint64_t a1, uint64_t a2)
{
  sub_2161C04AC(0);
  if (!a2) {
    return a2;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4 - 1;
  do
  {
    uint64_t v6 = v5;
    if (!v5) {
      break;
    }
    --v5;
    unsigned int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 352))(a2, v6 - 1);
    unsigned int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 344))(a2, v6);
  }
  while (!sub_2161C06A8((uint64_t)&qword_26797EF20, v7, v8));
  uint64_t v22 = a1;
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)unint64_t v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  int v9 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
  int v10 = (_WORD *)(a2 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    int v10 = *(_WORD **)(a2 + 96);
    if (v6)
    {
LABEL_8:
      uint64_t v11 = 0;
      uint64_t v12 = 1;
      do
      {
        unsigned int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 568))(a2, v12 - 1);
        __int16 v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 312))(a2, v12 - 1);
        unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 320))(a2, v12 - 1);
        __int16 v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 344))(a2, v12 - 1);
        __int16 v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 352))(a2, v12 - 1);
        sub_2161DEB04(&v22, v9, v13, v14, v10, v15, v16, v17);
        unsigned int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 568))(a2, v12 - 1);
        unsigned int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 320))(a2, v12 - 1);
        unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 320))(a2, v12 - 1);
        v9 += v18;
        v10 += v19;
        ++v12;
        v11 += v20;
      }
      while (v6 + 1 != v12);
    }
  }
  else if (v6)
  {
    goto LABEL_8;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 112))(a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 96))(a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 408))(a2);
  a2 = sub_2161DECC4(&v22);
  if (cf[1]) {
    CFRelease(cf[1]);
  }
  cf[1] = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24[1])
  {
    *(void **)&long long v25 = v24[1];
    operator delete(v24[1]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  return a2;
}

void sub_216246ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2161DED70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216246EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v38 = a1;
      *(_OWORD *)uint64_t v39 = 0u;
      *(_OWORD *)__int16 v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      uint64_t v6 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 544))(v2);
      unsigned int v7 = (_WORD *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        unsigned int v7 = *(_WORD **)(v2 + 96);
      }
      if (*(char *)(v2 + 87) >= 0) {
        uint64_t v8 = v2 + 64;
      }
      else {
        uint64_t v8 = *(void *)(v2 + 64);
      }
      uint64_t v9 = v5 - 1;
      if (v5 == 1)
      {
        uint64_t v31 = 0;
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v31 = 0;
        do
        {
          unsigned int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 568))(v2, v10);
          __int16 v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 312))(v2, v10);
          unsigned int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 320))(v2, v10);
          __int16 v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 344))(v2, v10);
          __int16 v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 352))(v2, v10);
          sub_2161DEB04(&v38, v6, v11, v12, v7, v13, v14, v15);
          unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 568))(v2, v10);
          unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 320))(v2, v10);
          unsigned int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 312))(v2, v10);
          unsigned int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 312))(v2, v10);
          v6 += v16;
          v7 += v17;
          v8 += 2 * v18;
          ++v10;
          v31 += v19;
        }
        while (v9 != v10);
      }
      unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 568))(v2, v9);
      uint64_t v37 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 320))(v2, v9) - 1;
      uint64_t v21 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 320))(v2, v9);
      memset(v35, 0, sizeof(v35));
      int v36 = 1065353216;
      if (!v8) {
        uint64_t v21 = 0;
      }
      v32[0] = v8;
      v32[1] = v21;
      sub_216183E18(v32, 0, (uint64_t)v35, 0, &__p);
      if (v34 < 0) {
        operator delete(__p);
      }
      uint64_t v22 = sub_21619C5BC(v35, (unint64_t *)&v37);
      if (v22)
      {
        uint64_t v23 = v22[3];
        uint64_t v24 = v37;
        __int16 v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 344))(v2, v9);
        __int16 v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 352))(v2, v9);
        sub_2161DEB04(&v38, v6, v20 - 1, v23, v7, v24, v25, v26);
        unint64_t v27 = v37;
        sub_216144C28((uint64_t)v35);
        if (*(char *)(v2 + 119) < 0) {
          uint64_t v28 = *(void *)(v2 + 96);
        }
        else {
          uint64_t v28 = v2 + 96;
        }
        uint64_t v29 = v27 + v31;
        if (!v28) {
          uint64_t v29 = 0;
        }
        *(void *)&v35[0] = v28;
        *((void *)&v35[0] + 1) = v29;
        (*(void (**)(uint64_t))(*(void *)v2 + 112))(v2);
        (*(void (**)(uint64_t))(*(void *)v2 + 96))(v2);
        (*(void (**)(uint64_t))(*(void *)v2 + 408))(v2);
        uint64_t v2 = sub_2161DECC4(&v38);
      }
      else
      {
        sub_216144C28((uint64_t)v35);
        uint64_t v2 = 0;
      }
      if (*((void *)&v43 + 1)) {
        CFRelease(*((CFTypeRef *)&v43 + 1));
      }
      *((void *)&v43 + 1) = 0;
      if ((void)v42)
      {
        *((void *)&v42 + 1) = v42;
        operator delete((void *)v42);
      }
      if (v40[1])
      {
        *(void **)&long long v41 = v40[1];
        operator delete(v40[1]);
      }
      if (v39[0])
      {
        v39[1] = v39[0];
        operator delete(v39[0]);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_216247528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216144C28((uint64_t)va);
  sub_2161DED70((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_216247568(void *a1, unint64_t a2)
{
  sub_2162475CC();
  sub_21617FAAC(__p, a1, a2);
  uint64_t v4 = sub_216248084((unsigned __int16 *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4 != 0;
}

void sub_2162475CC()
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DDA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DDA0))
  {
    sub_216184F68(__dst, (char *)L"今日");
    if (SHIBYTE(v40) < 0)
    {
      sub_2161984AC(&v41, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      long long v41 = *(_OWORD *)__dst;
      uint64_t v42 = v40;
    }
    __int16 v43 = 0;
    sub_216184F68(v37, (char *)L"明日");
    if (SHIBYTE(v38) < 0)
    {
      sub_2161984AC(&v44, v37[0], (unint64_t)v37[1]);
    }
    else
    {
      long long v44 = *(_OWORD *)v37;
      uint64_t v45 = v38;
    }
    __int16 v46 = 1;
    sub_216184F68(&v35, byte_2163CB796);
    if (SHIBYTE(v36) < 0)
    {
      sub_2161984AC(&v47, (void *)v35, *((unint64_t *)&v35 + 1));
    }
    else
    {
      long long v47 = v35;
      uint64_t v48 = v36;
    }
    __int16 v49 = 2;
    sub_216184F68(v33, byte_2163CB79E);
    if (SHIBYTE(v34) < 0)
    {
      sub_2161984AC(&v50, v33[0], (unint64_t)v33[1]);
    }
    else
    {
      long long v50 = *(_OWORD *)v33;
      uint64_t v51 = v34;
    }
    __int16 v52 = 3;
    sub_216184F68(&v31, asc_2163CB7A8);
    if (SHIBYTE(v32) < 0)
    {
      sub_2161984AC(&v53, (void *)v31, *((unint64_t *)&v31 + 1));
    }
    else
    {
      long long v53 = v31;
      uint64_t v54 = v32;
    }
    __int16 v55 = 4;
    sub_216184F68(v29, byte_2163CB7B2);
    if (SHIBYTE(v30) < 0)
    {
      sub_2161984AC(&v56, v29[0], (unint64_t)v29[1]);
    }
    else
    {
      long long v56 = *(_OWORD *)v29;
      uint64_t v57 = v30;
    }
    __int16 v58 = 4;
    sub_216184F68(&v27, (char *)L"昨日");
    if (SHIBYTE(v28) < 0)
    {
      sub_2161984AC(&v59, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      long long v59 = v27;
      uint64_t v60 = v28;
    }
    __int16 v61 = 255;
    sub_216184F68(v25, byte_2163CB7BC);
    if (SHIBYTE(v26) < 0)
    {
      sub_2161984AC(&v62, v25[0], (unint64_t)v25[1]);
    }
    else
    {
      long long v62 = *(_OWORD *)v25;
      uint64_t v63 = v26;
    }
    __int16 v64 = 254;
    sub_216184F68(&v23, byte_2163CB7C4);
    if (SHIBYTE(v24) < 0)
    {
      sub_2161984AC(&v65, (void *)v23, *((unint64_t *)&v23 + 1));
    }
    else
    {
      long long v65 = v23;
      uint64_t v66 = v24;
    }
    __int16 v67 = 256;
    sub_216184F68(v21, "eg\bg");
    if (SHIBYTE(v22) < 0)
    {
      sub_2161984AC(&v68, v21[0], (unint64_t)v21[1]);
    }
    else
    {
      long long v68 = *(_OWORD *)v21;
      uint64_t v69 = v22;
    }
    __int16 v70 = 257;
    sub_216184F68(&v19, byte_2163CB7D0);
    if (SHIBYTE(v20) < 0)
    {
      sub_2161984AC(&v71, (void *)v19, *((unint64_t *)&v19 + 1));
    }
    else
    {
      long long v71 = v19;
      uint64_t v72 = v20;
    }
    __int16 v73 = 258;
    sub_216184F68(v17, "HQ\bg");
    if (SHIBYTE(v18) < 0)
    {
      sub_2161984AC(&v74, v17[0], (unint64_t)v17[1]);
    }
    else
    {
      long long v74 = *(_OWORD *)v17;
      uint64_t v75 = v18;
    }
    __int16 v76 = 511;
    sub_216184F68(&v15, aHq);
    if (SHIBYTE(v16) < 0)
    {
      sub_2161984AC(&v77, (void *)v15, *((unint64_t *)&v15 + 1));
    }
    else
    {
      long long v77 = v15;
      uint64_t v78 = v16;
    }
    __int16 v79 = 510;
    sub_216184F68(v13, byte_2163CB7E6);
    if (SHIBYTE(v14) < 0)
    {
      sub_2161984AC(&v80, v13[0], (unint64_t)v13[1]);
    }
    else
    {
      long long v80 = *(_OWORD *)v13;
      uint64_t v81 = v14;
    }
    __int16 v82 = 512;
    sub_216184F68(v11, "egt^");
    if (SHIBYTE(v12) < 0)
    {
      sub_2161984AC(&v83, v11[0], (unint64_t)v11[1]);
    }
    else
    {
      long long v83 = *(_OWORD *)v11;
      uint64_t v84 = v12;
    }
    __int16 v85 = 513;
    sub_216184F68(v9, byte_2163CB7F2);
    if (SHIBYTE(v10) < 0)
    {
      sub_2161984AC(&v86, v9[0], (unint64_t)v9[1]);
    }
    else
    {
      long long v86 = *(_OWORD *)v9;
      uint64_t v87 = v10;
    }
    __int16 v88 = 514;
    sub_216184F68(v7, byte_2163CB7FA);
    if (SHIBYTE(v8) < 0)
    {
      sub_2161984AC(&v89, v7[0], (unint64_t)v7[1]);
    }
    else
    {
      long long v89 = *(_OWORD *)v7;
      uint64_t v90 = v8;
    }
    __int16 v91 = 767;
    sub_216184F68(v5, "(ft^");
    if (SHIBYTE(v6) < 0)
    {
      sub_2161984AC(&v92, v5[0], (unint64_t)v5[1]);
    }
    else
    {
      long long v92 = *(_OWORD *)v5;
      uint64_t v93 = v6;
    }
    __int16 v94 = 767;
    sub_216184F68(v3, byte_2163CB806);
    if (SHIBYTE(v4) < 0)
    {
      sub_2161984AC(&v95, v3[0], (unint64_t)v3[1]);
    }
    else
    {
      long long v95 = *(_OWORD *)v3;
      uint64_t v96 = v4;
    }
    __int16 v97 = 766;
    sub_216184F68(__p, "HQ");
    if (SHIBYTE(v2) < 0)
    {
      sub_2161984AC(&v98, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v98 = *(_OWORD *)__p;
      uint64_t v99 = v2;
    }
    __int16 v100 = 765;
    sub_2162499F8((uint64_t *)&v41, 20);
    uint64_t v0 = 80;
    do
    {
      if (SHIBYTE(__dst[v0 + 1]) < 0) {
        operator delete(__dst[v0 - 1]);
      }
      v0 -= 4;
    }
    while (v0 * 8);
    if (SHIBYTE(v2) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v4) < 0) {
      operator delete(v3[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7[0]);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)v15);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete((void *)v19);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[0]);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v29[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(v37[0]);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(__dst[0]);
    }
    __cxa_atexit((void (*)(void *))sub_216249EF0, &xmmword_26797F040, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DDA0);
  }
}

void sub_216247D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  if (a88 < 0) {
    operator delete(a87);
  }
  if (a90 < 0) {
    operator delete(a89);
  }
  for (; v91 != &a91; v91 -= 32)
  {
    if (*(v91 - 9) < 0) {
      operator delete(*((void **)v91 - 4));
    }
  }
  __cxa_guard_abort(&qword_26797DDA0);
  _Unwind_Resume(a1);
}

void sub_216248070()
{
}

void sub_21624807C()
{
}

unsigned __int16 *sub_216248084(unsigned __int16 *a1)
{
  unint64_t v2 = sub_2161A6920((uint64_t)&qword_26797F058, (uint64_t)a1);
  unint64_t v3 = *((void *)&xmmword_26797F040 + 1);
  if (!*((void *)&xmmword_26797F040 + 1)) {
    return 0;
  }
  unint64_t v4 = v2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797F040 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
    if (v2 >= *((void *)&xmmword_26797F040 + 1)) {
      unint64_t v7 = v2 % *((void *)&xmmword_26797F040 + 1);
    }
  }
  else
  {
    unint64_t v7 = (*((void *)&xmmword_26797F040 + 1) - 1) & v2;
  }
  uint64_t v8 = *(unsigned __int16 ***)(xmmword_26797F040 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = *(unsigned __int16 **)i)
  {
    unint64_t v10 = *((void *)i + 1);
    if (v4 == v10)
    {
      if (sub_2161A6964((uint64_t)&dword_26797F060, i + 8, a1)) {
        return i;
      }
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3) {
          v10 %= v3;
        }
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

__CFArray *sub_216248198(void *a1, const char *a2, uint64_t a3)
{
  CFMutableArrayRef Mutable = (__CFArray *)a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DDB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DDB0))
  {
    qword_26797DDA8 = [MEMORY[0x263EFF960] localeWithLocaleIdentifier:@"ja_JP"];
    __cxa_guard_release(&qword_26797DDB0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DDC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DDC0))
  {
    qword_26797DDB8 = [MEMORY[0x263EFF960] localeWithLocaleIdentifier:a2];
    __cxa_guard_release(&qword_26797DDC0);
  }
  if (qword_26797DE00 != -1) {
    dispatch_once(&qword_26797DE00, &unk_26C6C9F80);
  }
  [qword_26797DDC8 setYear:a2];
  [qword_26797DDC8 setMonth:v6];
  [objc_msgSend_setDay_((void *)qword_26797DDC8, v7, 0x7FFFFFFFFFFFFFFFLL);
  if (Mutable)
  {
    uint64_t v8 = (void *)qword_26797DDC8;
    sub_2162475CC();
    sub_21617FAAC(__p, a1, (unint64_t)Mutable);
    unsigned int v11 = sub_216248084((unsigned __int16 *)__p);
    if (v89 < 0) {
      operator delete(__p[0]);
    }
    if (v11)
    {
      uint64_t v10 = *((char *)v11 + 40);
      int v12 = *((unsigned __int8 *)v11 + 41);
      if (v12 == 2)
      {
        [v8 setYear:v9];
      }
      else if (v12 == 1)
      {
        [v8 setMonth:v9];
      }
      else if (!*((unsigned char *)v11 + 41))
      {
        [v8 setDay:v9];
      }
    }
    uint64_t v13 = (uint64_t *)MEMORY[0x263EFF3F8];
    if (!a3)
    {
      if (sub_2161E2FA8("MECABRA_TEST"))
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DE10, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797DE10))
        {
          qword_26797DE08 = (uint64_t)objc_alloc_init(MEMORY[0x263EFF918]);
          __cxa_guard_release(&qword_26797DE10);
        }
        [qword_26797DE08 setYear:v14];
        [qword_26797DE08 setMonth:v16];
        [qword_26797DE08 setDay:v17];
        long long v19 = [MEMORY[0x263EFF8F0] calendarWithIdentifier:v18];
        uint64_t v21 = [v19 dateFromComponents:v20];
      }
      else
      {
        uint64_t v21 = [MEMORY[0x263EFF910] dateWithTimeIntervalSince1970:v14];
      }
      a3 = v21;
    }
    if (objc_msgSend_day((void *)qword_26797DDC8, v9, v10) == 0x7FFFFFFFFFFFFFFFLL
      && objc_msgSend_month((void *)qword_26797DDC8, v22, v23) == 0x7FFFFFFFFFFFFFFFLL
      && objc_msgSend_year((void *)qword_26797DDC8, v24, v25) == 0x7FFFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 6, MEMORY[0x263EFFF70]);
    long long v27 = [MEMORY[0x263EFF8F0] calendarWithIdentifier:v26];
    uint64_t v29 = [v27 dateByAddingComponents:v28 toDate:qword_26797DDC8 options:a3];
    if (objc_msgSend_day((void *)qword_26797DDC8, v30, v31) != 0x7FFFFFFFFFFFFFFFLL)
    {
      [objc_msgSend_setCalendar_((void *)qword_26797DDD0, v32, qword_26797DDD8);
      [qword_26797DDD0 setDateFormat:@"M/d"];
      long long v56 = (const void *)[qword_26797DDD0 stringFromDate:v55];
      CFArrayAppendValue(Mutable, v56);
      [qword_26797DDD0 setDateStyle:1];
      long long v59 = (const void *)[qword_26797DDD0 stringFromDate:v58];
      CFArrayAppendValue(Mutable, v59);
      [qword_26797DDD0 setDateFormat:@"M月d日(E)"];
      long long v62 = (const void *)[qword_26797DDD0 stringFromDate:v61];
      CFArrayAppendValue(Mutable, v62);
      [qword_26797DDD0 setDateStyle:v63];
      long long v65 = (const void *)[qword_26797DDD0 stringFromDate:v64];
      CFArrayAppendValue(Mutable, v65);
      [qword_26797DDD0 setCalendar:v66];
      [qword_26797DDD0 setDateStyle:v67];
      [qword_26797DDD0 setDateFormat:@"Gy年M月d日"];
      __int16 v70 = (const void *)[qword_26797DDD0 stringFromDate:v69];
      CFArrayAppendValue(Mutable, v70);
      [qword_26797DDD0 setDateFormat:@"GGGGGyy/MM/dd"];
      __int16 v73 = (const void *)[qword_26797DDD0 stringFromDate:v72];
      CFArrayAppendValue(Mutable, v73);
      [qword_26797DDD0 setDateFormat:@"EEEE"];
      long long v53 = (const void *)[qword_26797DDD0 stringFromDate:v75];
      goto LABEL_32;
    }
    if (objc_msgSend_month((void *)qword_26797DDC8, v32, v33) != 0x7FFFFFFFFFFFFFFFLL)
    {
      [qword_26797DDD0 setCalendar:v34];
      [qword_26797DDD0 setDateFormat:@"M月"];
      uint64_t v78 = (const void *)[qword_26797DDD0 stringFromDate:v77];
      CFArrayAppendValue(Mutable, v78);
      [qword_26797DDD0 setLocale:v79];
      [qword_26797DDD0 setDateFormat:@"MMMM"];
      __int16 v82 = (const void *)[qword_26797DDD0 stringFromDate:v81];
      CFArrayAppendValue(Mutable, v82);
      [objc_msgSend_setLocale_((void *)qword_26797DDD0, v83, qword_26797DDA8)];
      uint64_t v85 = [qword_26797DDD8 componentFromDate:v84 isLeapMonth:8 isLeapYear:v29];
      long long v53 = (const void *)[qword_26797DDE8 objectAtIndex:v86 - 1];
      goto LABEL_32;
    }
    if (objc_msgSend_year((void *)qword_26797DDC8, v34, v35) != 0x7FFFFFFFFFFFFFFFLL)
    {
      [qword_26797DDD0 setCalendar:v36];
      [qword_26797DDD0 setDateFormat:@"y年"];
      uint64_t v39 = (const void *)[qword_26797DDD0 stringFromDate:v38];
      CFArrayAppendValue(Mutable, v39);
      [qword_26797DDD0 setCalendar:v40];
      [qword_26797DDD0 setDateFormat:@"Gy年"];
      __int16 v43 = (const void *)[qword_26797DDD0 stringFromDate:v42];
      CFArrayAppendValue(Mutable, v43);
      [qword_26797DDD0 setDateFormat:@"GGGGGy"];
      __int16 v46 = (const void *)[qword_26797DDD0 stringFromDate:v45];
      CFArrayAppendValue(Mutable, v46);
      uint64_t v48 = [qword_26797DDD8 component:v47 fromDate:v29];
      if (v48 >= 1)
      {
        unint64_t v50 = (v48 + 8) % 0xCuLL;
        uint64_t v51 = (const void *)[qword_26797DDF0 objectAtIndexedSubscript:v49];
        CFArrayAppendValue(Mutable, v51);
        long long v53 = (const void *)[qword_26797DDF8 objectAtIndexedSubscript:v52];
LABEL_32:
        CFArrayAppendValue(Mutable, v53);
      }
    }
  }
  return Mutable;
}

void sub_216248770(_Unwind_Exception *a1)
{
}

void *sub_2162487A8()
{
  qword_26797DDC8 = (uint64_t)objc_alloc_init(MEMORY[0x263EFF918]);
  qword_26797DDD8 = (uint64_t)(id)[MEMORY[0x263EFF8F0] calendarWithIdentifier:v0];
  qword_26797DDE0 = (uint64_t)(id)[MEMORY[0x263EFF8F0] calendarWithIdentifier:v1];
  qword_26797DDD0 = (uint64_t)objc_alloc_init(MEMORY[0x263F08790]);
  [objc_msgSend_setLocale_((void *)qword_26797DDD0, v2, qword_26797DDA8)];
  [qword_26797DDD0 setFormatterBehavior:v3];
  [qword_26797DDD0 setTimeStyle:v4];
  qword_26797DDE8 = &unk_26C6FFFF8;
  qword_26797DDF0 = &unk_26C700010;
  uint64_t result = &unk_26C700028;
  qword_26797DDF8 = (uint64_t)result;
  return result;
}

void sub_216248878(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 - 2 <= 2)
  {
    uint8x8_t v5 = *(_WORD **)a1;
    if (v4 == 4) {
      unint64_t v6 = 2;
    }
    else {
      unint64_t v6 = 1;
    }
    long long __p = 0;
    uint64_t v258 = 0;
    if (v4 > 2)
    {
      if (a2) {
        __int16 v8 = 58;
      }
      else {
        __int16 v8 = -230;
      }
      int v246 = a2;
      __int16 v247 = v8;
      uint64_t v7 = 2;
      unint64_t v9 = v6;
      do
      {
        if (v4 - v9 == 2) {
          int v10 = 100;
        }
        else {
          int v10 = 10;
        }
        if (v9 == v4 - 2 && a3 / v10 <= 24 && a3 % v10 <= 59)
        {
          unsigned int v11 = __p;
          int v12 = v258;
          v252 = __p;
          if (v4 == 4)
          {
            if (__p >= v258)
            {
              if ((unint64_t)(v258 - __p) <= 1) {
                uint64_t v14 = 1;
              }
              else {
                uint64_t v14 = v258 - __p;
              }
              if ((unint64_t)(v258 - __p) >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v15 = v14;
              }
              uint64_t v17 = (char *)sub_21610FD44((uint64_t)&v258, v15);
              uint64_t v18 = __p;
              long long v19 = __p;
              *(_WORD *)uint64_t v17 = *v5;
              unsigned int v11 = v17 + 2;
              uint64_t v20 = v17;
              while (v19 != __p)
              {
                __int16 v21 = *((_WORD *)v19 - 1);
                v19 -= 2;
                *((_WORD *)v20 - 1) = v21;
                v20 -= 2;
              }
              int v12 = &v17[2 * v16];
              long long __p = v20;
              uint64_t v258 = v12;
              if (v18)
              {
                operator delete(v18);
                int v12 = v258;
              }
            }
            else
            {
              *(_WORD *)long long __p = *v5;
              unsigned int v11 = __p + 2;
            }
            v252 = v11;
            uint64_t v13 = 1;
          }
          else
          {
            uint64_t v13 = 0;
          }
          if (v11 >= v12)
          {
            uint64_t v23 = __p;
            uint64_t v24 = v11 - __p;
            if (v11 - __p <= -3) {
              goto LABEL_422;
            }
            uint64_t v25 = v24 >> 1;
            unint64_t v26 = v12 - __p;
            if (v26 <= (v24 >> 1) + 1) {
              unint64_t v27 = v25 + 1;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v26 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v28 = v27;
            }
            if (v28)
            {
              uint64_t v29 = (char *)sub_21610FD44((uint64_t)&v258, v28);
              uint64_t v23 = __p;
              unsigned int v11 = v252;
            }
            else
            {
              uint64_t v29 = 0;
            }
            uint64_t v30 = &v29[2 * v25];
            *(_WORD *)uint64_t v30 = v5[v13];
            uint64_t v22 = (__int16 *)(v30 + 2);
            while (v11 != v23)
            {
              __int16 v31 = *((_WORD *)v11 - 1);
              v11 -= 2;
              *((_WORD *)v30 - 1) = v31;
              v30 -= 2;
            }
            int v12 = &v29[2 * v28];
            long long __p = v30;
            uint64_t v258 = v12;
            if (v23)
            {
              operator delete(v23);
              int v12 = v258;
            }
          }
          else
          {
            *(_WORD *)unsigned int v11 = v5[v13];
            uint64_t v22 = (__int16 *)(v11 + 2);
          }
          if (v22 >= (__int16 *)v12)
          {
            uint64_t v33 = (__int16 *)__p;
            uint64_t v34 = (char *)v22 - __p;
            if ((char *)v22 - __p <= -3) {
              sub_21610CB04();
            }
            uint64_t v35 = v34 >> 1;
            unint64_t v36 = v12 - __p;
            if (v36 <= (v34 >> 1) + 1) {
              unint64_t v37 = v35 + 1;
            }
            else {
              unint64_t v37 = v36;
            }
            if (v36 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v38 = v37;
            }
            if (v38)
            {
              uint64_t v39 = (char *)sub_21610FD44((uint64_t)&v258, v38);
              uint64_t v33 = (__int16 *)__p;
            }
            else
            {
              uint64_t v39 = 0;
            }
            uint64_t v40 = (__int16 *)&v39[2 * v35];
            __int16 *v40 = v247;
            uint64_t v32 = (char *)(v40 + 1);
            while (v22 != v33)
            {
              __int16 v41 = *--v22;
              *--uint64_t v40 = v41;
            }
            int v12 = &v39[2 * v38];
            long long __p = (char *)v40;
            uint64_t v258 = v12;
            if (v33)
            {
              operator delete(v33);
              int v12 = v258;
            }
          }
          else
          {
            *uint64_t v22 = v247;
            uint64_t v32 = (char *)(v22 + 1);
          }
          uint64_t v42 = v13 + 1;
          if (v32 >= v12)
          {
            long long v44 = __p;
            uint64_t v45 = v32 - __p;
            if (v32 - __p < -2) {
              goto LABEL_422;
            }
            uint64_t v46 = v45 >> 1;
            unint64_t v47 = v12 - __p;
            if (v47 <= (v45 >> 1) + 1) {
              unint64_t v48 = v46 + 1;
            }
            else {
              unint64_t v48 = v47;
            }
            if (v47 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v49 = v48;
            }
            if (v49)
            {
              unint64_t v50 = (char *)sub_21610FD44((uint64_t)&v258, v49);
              long long v44 = __p;
            }
            else
            {
              unint64_t v50 = 0;
            }
            uint64_t v51 = &v50[2 * v46];
            *(_WORD *)uint64_t v51 = v5[v42];
            __int16 v43 = v51 + 2;
            while (v32 != v44)
            {
              __int16 v52 = *((_WORD *)v32 - 1);
              v32 -= 2;
              *((_WORD *)v51 - 1) = v52;
              v51 -= 2;
            }
            int v12 = &v50[2 * v49];
            long long __p = v51;
            uint64_t v258 = v12;
            if (v44)
            {
              operator delete(v44);
              int v12 = v258;
            }
          }
          else
          {
            *(_WORD *)uint64_t v32 = v5[v42];
            __int16 v43 = v32 + 2;
          }
          uint64_t v53 = v13 | 2;
          if (v43 >= v12)
          {
            uint64_t v54 = __p;
            uint64_t v55 = v43 - __p;
            if (v43 - __p < -2) {
              goto LABEL_422;
            }
            uint64_t v56 = v55 >> 1;
            unint64_t v57 = v12 - __p;
            if (v57 <= (v55 >> 1) + 1) {
              unint64_t v58 = v56 + 1;
            }
            else {
              unint64_t v58 = v57;
            }
            if (v57 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v59 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v59 = v58;
            }
            if (v59)
            {
              uint64_t v60 = (char *)sub_21610FD44((uint64_t)&v258, v59);
              uint64_t v54 = __p;
            }
            else
            {
              uint64_t v60 = 0;
            }
            __int16 v61 = &v60[2 * v56];
            *(_WORD *)__int16 v61 = v5[v53];
            while (v43 != v54)
            {
              __int16 v62 = *((_WORD *)v43 - 1);
              v43 -= 2;
              *((_WORD *)v61 - 1) = v62;
              v61 -= 2;
            }
            long long __p = v61;
            uint64_t v258 = &v60[2 * v59];
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            *(_WORD *)__int16 v43 = v5[v53];
          }
          (*(void (**)(void))(a4 + 16))();
          uint64_t v63 = __p;
          __int16 v64 = v258;
          int v253 = __p;
          if (v4 == 4)
          {
            if (__p >= v258)
            {
              if ((unint64_t)(v258 - __p) <= 1) {
                uint64_t v66 = 1;
              }
              else {
                uint64_t v66 = v258 - __p;
              }
              if ((unint64_t)(v258 - __p) >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v67 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v67 = v66;
              }
              uint64_t v69 = (char *)sub_21610FD44((uint64_t)&v258, v67);
              __int16 v70 = __p;
              long long v71 = __p;
              *(_WORD *)uint64_t v69 = *v5;
              uint64_t v63 = v69 + 2;
              uint64_t v72 = v69;
              while (v71 != __p)
              {
                __int16 v73 = *((_WORD *)v71 - 1);
                v71 -= 2;
                *((_WORD *)v72 - 1) = v73;
                v72 -= 2;
              }
              __int16 v64 = &v69[2 * v68];
              long long __p = v72;
              uint64_t v258 = v64;
              if (v70)
              {
                operator delete(v70);
                __int16 v64 = v258;
              }
            }
            else
            {
              *(_WORD *)long long __p = *v5;
              uint64_t v63 = __p + 2;
            }
            int v253 = v63;
            uint64_t v65 = 1;
          }
          else
          {
            uint64_t v65 = 0;
          }
          if (v63 >= v64)
          {
            uint64_t v75 = __p;
            uint64_t v76 = v63 - __p;
            if (v63 - __p < -2) {
              goto LABEL_422;
            }
            uint64_t v77 = v76 >> 1;
            unint64_t v78 = v64 - __p;
            if (v78 <= (v76 >> 1) + 1) {
              unint64_t v79 = v77 + 1;
            }
            else {
              unint64_t v79 = v78;
            }
            if (v78 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v80 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v80 = v79;
            }
            if (v80)
            {
              uint64_t v81 = (char *)sub_21610FD44((uint64_t)&v258, v80);
              uint64_t v75 = __p;
              uint64_t v63 = v253;
            }
            else
            {
              uint64_t v81 = 0;
            }
            __int16 v82 = &v81[2 * v77];
            *(_WORD *)__int16 v82 = v5[v65];
            long long v74 = v82 + 2;
            while (v63 != v75)
            {
              __int16 v83 = *((_WORD *)v63 - 1);
              v63 -= 2;
              *((_WORD *)v82 - 1) = v83;
              v82 -= 2;
            }
            __int16 v64 = &v81[2 * v80];
            long long __p = v82;
            uint64_t v258 = v64;
            if (v75)
            {
              operator delete(v75);
              __int16 v64 = v258;
            }
          }
          else
          {
            *(_WORD *)uint64_t v63 = v5[v65];
            long long v74 = v63 + 2;
          }
          if (v74 >= v64)
          {
            uint64_t v85 = __p;
            uint64_t v86 = v74 - __p;
            if (v74 - __p <= -3) {
              sub_21610CB04();
            }
            uint64_t v87 = v86 >> 1;
            unint64_t v88 = v64 - __p;
            if (v88 <= (v86 >> 1) + 1) {
              unint64_t v89 = v87 + 1;
            }
            else {
              unint64_t v89 = v88;
            }
            if (v88 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v90 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v90 = v89;
            }
            if (v90)
            {
              __int16 v91 = (char *)sub_21610FD44((uint64_t)&v258, v90);
              uint64_t v85 = __p;
            }
            else
            {
              __int16 v91 = 0;
            }
            long long v92 = &v91[2 * v87];
            *(_WORD *)long long v92 = 26178;
            uint64_t v84 = v92 + 2;
            while (v74 != v85)
            {
              __int16 v93 = *((_WORD *)v74 - 1);
              v74 -= 2;
              *((_WORD *)v92 - 1) = v93;
              v92 -= 2;
            }
            __int16 v64 = &v91[2 * v90];
            long long __p = v92;
            uint64_t v258 = v64;
            if (v85)
            {
              operator delete(v85);
              __int16 v64 = v258;
            }
          }
          else
          {
            *(_WORD *)long long v74 = 26178;
            uint64_t v84 = v74 + 2;
          }
          uint64_t v94 = v65 + 1;
          if (v84 >= v64)
          {
            uint64_t v96 = __p;
            uint64_t v97 = v84 - __p;
            if (v84 - __p < -2) {
              goto LABEL_422;
            }
            uint64_t v98 = v97 >> 1;
            unint64_t v99 = v64 - __p;
            if (v99 <= (v97 >> 1) + 1) {
              unint64_t v100 = v98 + 1;
            }
            else {
              unint64_t v100 = v99;
            }
            if (v99 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v101 = v100;
            }
            if (v101)
            {
              uint64_t v102 = (char *)sub_21610FD44((uint64_t)&v258, v101);
              uint64_t v96 = __p;
            }
            else
            {
              uint64_t v102 = 0;
            }
            int v103 = &v102[2 * v98];
            *(_WORD *)int v103 = v5[v94];
            long long v95 = v103 + 2;
            while (v84 != v96)
            {
              __int16 v104 = *((_WORD *)v84 - 1);
              v84 -= 2;
              *((_WORD *)v103 - 1) = v104;
              v103 -= 2;
            }
            __int16 v64 = &v102[2 * v101];
            long long __p = v103;
            uint64_t v258 = v64;
            if (v96)
            {
              operator delete(v96);
              __int16 v64 = v258;
            }
          }
          else
          {
            *(_WORD *)uint64_t v84 = v5[v94];
            long long v95 = v84 + 2;
          }
          uint64_t v105 = v65 | 2;
          if (v95 >= v64)
          {
            uint64_t v107 = __p;
            uint64_t v108 = v95 - __p;
            if (v95 - __p < -2) {
LABEL_422:
            }
              sub_21610CB04();
            uint64_t v109 = v108 >> 1;
            unint64_t v110 = v64 - __p;
            if (v110 <= (v108 >> 1) + 1) {
              unint64_t v111 = v109 + 1;
            }
            else {
              unint64_t v111 = v110;
            }
            if (v110 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v112 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v112 = v111;
            }
            if (v112)
            {
              int v113 = (char *)sub_21610FD44((uint64_t)&v258, v112);
              uint64_t v107 = __p;
            }
            else
            {
              int v113 = 0;
            }
            unint64_t v114 = &v113[2 * v109];
            *(_WORD *)unint64_t v114 = v5[v105];
            uint64_t v106 = v114 + 2;
            while (v95 != v107)
            {
              __int16 v115 = *((_WORD *)v95 - 1);
              v95 -= 2;
              *((_WORD *)v114 - 1) = v115;
              v114 -= 2;
            }
            __int16 v64 = &v113[2 * v112];
            long long __p = v114;
            uint64_t v258 = v64;
            if (v107)
            {
              operator delete(v107);
              __int16 v64 = v258;
            }
          }
          else
          {
            *(_WORD *)long long v95 = v5[v105];
            uint64_t v106 = v95 + 2;
          }
          if (v106 >= v64)
          {
            long long v116 = __p;
            uint64_t v117 = v106 - __p;
            if (v106 - __p <= -3) {
              sub_21610CB04();
            }
            uint64_t v118 = v117 >> 1;
            unint64_t v119 = v64 - __p;
            if (v119 <= (v117 >> 1) + 1) {
              unint64_t v120 = v118 + 1;
            }
            else {
              unint64_t v120 = v119;
            }
            if (v119 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v121 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v121 = v120;
            }
            if (v121)
            {
              uint64_t v122 = (char *)sub_21610FD44((uint64_t)&v258, v121);
              long long v116 = __p;
            }
            else
            {
              uint64_t v122 = 0;
            }
            unint64_t v123 = &v122[2 * v118];
            *(_WORD *)unint64_t v123 = 20998;
            while (v106 != v116)
            {
              __int16 v124 = *((_WORD *)v106 - 1);
              v106 -= 2;
              *((_WORD *)v123 - 1) = v124;
              v123 -= 2;
            }
            long long __p = v123;
            uint64_t v258 = &v122[2 * v121];
            if (v116) {
              operator delete(v116);
            }
          }
          else
          {
            *(_WORD *)uint64_t v106 = 20998;
          }
          (*(void (**)(void))(a4 + 16))();
        }
        BOOL v133 = v9++ == 2;
      }
      while (!v133);
      a2 = v246;
    }
    else if (v6 <= 1)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v7 = v6;
    }
    if (a2) {
      __int16 v125 = 47;
    }
    else {
      __int16 v125 = -241;
    }
    __int16 v248 = v125;
    do
    {
      if (v4 - v6 == 2) {
        int v126 = 100;
      }
      else {
        int v126 = 10;
      }
      int v127 = (unsigned __int16)*v5;
      if (v127 != 48 && v127 != 65296)
      {
        int v128 = (unsigned __int16)v5[v6];
        if (v128 != 48)
        {
          unsigned int v129 = a3 / v126;
          int v130 = a3 % v126;
          unsigned int v131 = a3 / v126 - 1;
          BOOL v132 = v130 < 1 || v131 > 0xB;
          BOOL v133 = v132 || v128 == 65296;
          if (!v133 && v130 <= word_216381F8C[v131])
          {
            unint64_t v134 = __p;
            int v135 = v258;
            v254 = __p;
            if (v129 < 0xA)
            {
              uint64_t v136 = 0;
            }
            else
            {
              if (__p >= v258)
              {
                if ((unint64_t)(v258 - __p) <= 1) {
                  uint64_t v137 = 1;
                }
                else {
                  uint64_t v137 = v258 - __p;
                }
                if ((unint64_t)(v258 - __p) >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v138 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v138 = v137;
                }
                uint64_t v140 = (char *)sub_21610FD44((uint64_t)&v258, v138);
                int v141 = __p;
                unint64_t v142 = __p;
                *(_WORD *)uint64_t v140 = *v5;
                unint64_t v134 = v140 + 2;
                uint64_t v143 = v140;
                while (v142 != __p)
                {
                  __int16 v144 = *((_WORD *)v142 - 1);
                  v142 -= 2;
                  *((_WORD *)v143 - 1) = v144;
                  v143 -= 2;
                }
                int v135 = &v140[2 * v139];
                long long __p = v143;
                uint64_t v258 = v135;
                if (v141)
                {
                  operator delete(v141);
                  int v135 = v258;
                }
              }
              else
              {
                *(_WORD *)long long __p = v127;
                unint64_t v134 = __p + 2;
              }
              v254 = v134;
              uint64_t v136 = 1;
            }
            if (v134 >= v135)
            {
              unint64_t v146 = __p;
              uint64_t v147 = v134 - __p;
              if (v134 - __p <= -3) {
                goto LABEL_423;
              }
              uint64_t v148 = v147 >> 1;
              unint64_t v149 = v135 - __p;
              if (v149 <= (v147 >> 1) + 1) {
                unint64_t v150 = v148 + 1;
              }
              else {
                unint64_t v150 = v149;
              }
              if (v149 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v151 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v151 = v150;
              }
              if (v151)
              {
                unsigned __int16 v152 = (char *)sub_21610FD44((uint64_t)&v258, v151);
                unint64_t v146 = __p;
                unint64_t v134 = v254;
              }
              else
              {
                unsigned __int16 v152 = 0;
              }
              unint64_t v153 = &v152[2 * v148];
              *(_WORD *)unint64_t v153 = v5[v136];
              unint64_t v145 = v153 + 2;
              while (v134 != v146)
              {
                __int16 v154 = *((_WORD *)v134 - 1);
                v134 -= 2;
                *((_WORD *)v153 - 1) = v154;
                v153 -= 2;
              }
              int v135 = &v152[2 * v151];
              long long __p = v153;
              uint64_t v258 = v135;
              if (v146)
              {
                operator delete(v146);
                int v135 = v258;
              }
            }
            else
            {
              *(_WORD *)unint64_t v134 = v5[v136];
              unint64_t v145 = v134 + 2;
            }
            if (v145 >= v135)
            {
              uint64_t v156 = __p;
              uint64_t v157 = v145 - __p;
              if (v145 - __p <= -3) {
                sub_21610CB04();
              }
              uint64_t v158 = v157 >> 1;
              unint64_t v159 = v135 - __p;
              if (v159 <= (v157 >> 1) + 1) {
                unint64_t v160 = v158 + 1;
              }
              else {
                unint64_t v160 = v159;
              }
              if (v159 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v161 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v161 = v160;
              }
              if (v161)
              {
                uint64_t v162 = (char *)sub_21610FD44((uint64_t)&v258, v161);
                uint64_t v156 = __p;
              }
              else
              {
                uint64_t v162 = 0;
              }
              uint64_t v163 = (__int16 *)&v162[2 * v158];
              *uint64_t v163 = v248;
              uint64_t v155 = (char *)(v163 + 1);
              while (v145 != v156)
              {
                __int16 v164 = *((_WORD *)v145 - 1);
                v145 -= 2;
                *--uint64_t v163 = v164;
              }
              int v135 = &v162[2 * v161];
              long long __p = (char *)v163;
              uint64_t v258 = v135;
              if (v156)
              {
                operator delete(v156);
                int v135 = v258;
              }
            }
            else
            {
              *(_WORD *)unint64_t v145 = v248;
              uint64_t v155 = v145 + 2;
            }
            uint64_t v165 = v136 + 1;
            int v255 = v155;
            if (v130 >= 10)
            {
              if (v155 >= v135)
              {
                uint64_t v167 = __p;
                uint64_t v168 = v155 - __p;
                if (v155 - __p < -2) {
                  goto LABEL_423;
                }
                uint64_t v169 = v168 >> 1;
                unint64_t v170 = v135 - __p;
                if (v170 <= (v168 >> 1) + 1) {
                  unint64_t v171 = v169 + 1;
                }
                else {
                  unint64_t v171 = v170;
                }
                if (v170 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v172 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v172 = v171;
                }
                if (v172)
                {
                  uint64_t v173 = (char *)sub_21610FD44((uint64_t)&v258, v172);
                  uint64_t v167 = __p;
                }
                else
                {
                  uint64_t v173 = 0;
                }
                uint64_t v174 = &v173[2 * v169];
                *(_WORD *)uint64_t v174 = v5[v165];
                unint64_t v166 = v174 + 2;
                while (v155 != v167)
                {
                  __int16 v175 = *((_WORD *)v155 - 1);
                  v155 -= 2;
                  *((_WORD *)v174 - 1) = v175;
                  v174 -= 2;
                }
                int v135 = &v173[2 * v172];
                long long __p = v174;
                uint64_t v258 = v135;
                if (v167)
                {
                  operator delete(v167);
                  int v135 = v258;
                }
              }
              else
              {
                *(_WORD *)uint64_t v155 = v5[v165];
                unint64_t v166 = v155 + 2;
              }
              uint64_t v165 = v136 | 2;
              int v255 = v166;
              uint64_t v155 = v166;
            }
            if (v155 >= v135)
            {
              uint64_t v176 = __p;
              uint64_t v177 = v155 - __p;
              if (v155 - __p < -2) {
                goto LABEL_423;
              }
              uint64_t v178 = v177 >> 1;
              unint64_t v179 = v135 - __p;
              if (v179 <= (v177 >> 1) + 1) {
                unint64_t v180 = v178 + 1;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v179 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v181 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v181 = v180;
              }
              if (v181)
              {
                uint64_t v182 = (char *)sub_21610FD44((uint64_t)&v258, v181);
                uint64_t v176 = __p;
                uint64_t v155 = v255;
              }
              else
              {
                uint64_t v182 = 0;
              }
              unint64_t v183 = &v182[2 * v178];
              *(_WORD *)unint64_t v183 = v5[v165];
              while (v155 != v176)
              {
                __int16 v184 = *((_WORD *)v155 - 1);
                v155 -= 2;
                *((_WORD *)v183 - 1) = v184;
                v183 -= 2;
              }
              long long __p = v183;
              uint64_t v258 = &v182[2 * v181];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(_WORD *)uint64_t v155 = v5[v165];
            }
            (*(void (**)(void))(a4 + 16))();
            int v185 = __p;
            unint64_t v186 = v258;
            v256 = __p;
            if (v129 < 0xA)
            {
              uint64_t v187 = 0;
            }
            else
            {
              if (__p >= v258)
              {
                if ((unint64_t)(v258 - __p) <= 1) {
                  uint64_t v188 = 1;
                }
                else {
                  uint64_t v188 = v258 - __p;
                }
                if ((unint64_t)(v258 - __p) >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v189 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v189 = v188;
                }
                int v191 = (char *)sub_21610FD44((uint64_t)&v258, v189);
                v192 = __p;
                uint64_t v193 = __p;
                *(_WORD *)int v191 = *v5;
                int v185 = v191 + 2;
                uint64_t v194 = v191;
                while (v193 != __p)
                {
                  __int16 v195 = *((_WORD *)v193 - 1);
                  v193 -= 2;
                  *((_WORD *)v194 - 1) = v195;
                  v194 -= 2;
                }
                unint64_t v186 = &v191[2 * v190];
                long long __p = v194;
                uint64_t v258 = v186;
                if (v192)
                {
                  operator delete(v192);
                  unint64_t v186 = v258;
                }
              }
              else
              {
                *(_WORD *)long long __p = *v5;
                int v185 = __p + 2;
              }
              v256 = v185;
              uint64_t v187 = 1;
            }
            if (v185 >= v186)
            {
              uint64_t v197 = __p;
              uint64_t v198 = v185 - __p;
              if (v185 - __p < -2) {
                goto LABEL_423;
              }
              uint64_t v199 = v198 >> 1;
              unint64_t v200 = v186 - __p;
              if (v200 <= (v198 >> 1) + 1) {
                unint64_t v201 = v199 + 1;
              }
              else {
                unint64_t v201 = v200;
              }
              if (v200 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v202 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v202 = v201;
              }
              if (v202)
              {
                unsigned int v203 = (char *)sub_21610FD44((uint64_t)&v258, v202);
                uint64_t v197 = __p;
                int v185 = v256;
              }
              else
              {
                unsigned int v203 = 0;
              }
              v204 = &v203[2 * v199];
              *(_WORD *)v204 = v5[v187];
              uint64_t v196 = v204 + 2;
              while (v185 != v197)
              {
                __int16 v205 = *((_WORD *)v185 - 1);
                v185 -= 2;
                *((_WORD *)v204 - 1) = v205;
                v204 -= 2;
              }
              unint64_t v186 = &v203[2 * v202];
              long long __p = v204;
              uint64_t v258 = v186;
              if (v197)
              {
                operator delete(v197);
                unint64_t v186 = v258;
              }
            }
            else
            {
              *(_WORD *)int v185 = v5[v187];
              uint64_t v196 = v185 + 2;
            }
            if (v196 >= v186)
            {
              int v207 = __p;
              uint64_t v208 = v196 - __p;
              if (v196 - __p <= -3) {
                sub_21610CB04();
              }
              uint64_t v209 = v208 >> 1;
              unint64_t v210 = v186 - __p;
              if (v210 <= (v208 >> 1) + 1) {
                unint64_t v211 = v209 + 1;
              }
              else {
                unint64_t v211 = v210;
              }
              if (v210 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v212 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v212 = v211;
              }
              if (v212)
              {
                uint64_t v213 = (char *)sub_21610FD44((uint64_t)&v258, v212);
                int v207 = __p;
              }
              else
              {
                uint64_t v213 = 0;
              }
              __int16 v214 = &v213[2 * v209];
              *(_WORD *)__int16 v214 = 26376;
              v206 = v214 + 2;
              while (v196 != v207)
              {
                __int16 v215 = *((_WORD *)v196 - 1);
                v196 -= 2;
                *((_WORD *)v214 - 1) = v215;
                v214 -= 2;
              }
              unint64_t v186 = &v213[2 * v212];
              long long __p = v214;
              uint64_t v258 = v186;
              if (v207)
              {
                operator delete(v207);
                unint64_t v186 = v258;
              }
            }
            else
            {
              *(_WORD *)uint64_t v196 = 26376;
              v206 = v196 + 2;
            }
            uint64_t v216 = v187 + 1;
            int v257 = v206;
            if (v130 >= 10)
            {
              if (v206 >= v186)
              {
                v218 = __p;
                uint64_t v219 = v206 - __p;
                if (v206 - __p < -2) {
                  goto LABEL_423;
                }
                uint64_t v220 = v219 >> 1;
                unint64_t v221 = v186 - __p;
                if (v221 <= (v219 >> 1) + 1) {
                  unint64_t v222 = v220 + 1;
                }
                else {
                  unint64_t v222 = v221;
                }
                if (v221 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v223 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v223 = v222;
                }
                if (v223)
                {
                  v224 = (char *)sub_21610FD44((uint64_t)&v258, v223);
                  v218 = __p;
                }
                else
                {
                  v224 = 0;
                }
                unint64_t v225 = &v224[2 * v220];
                *(_WORD *)unint64_t v225 = v5[v216];
                unint64_t v217 = v225 + 2;
                while (v206 != v218)
                {
                  __int16 v226 = *((_WORD *)v206 - 1);
                  v206 -= 2;
                  *((_WORD *)v225 - 1) = v226;
                  v225 -= 2;
                }
                unint64_t v186 = &v224[2 * v223];
                long long __p = v225;
                uint64_t v258 = v186;
                if (v218)
                {
                  operator delete(v218);
                  unint64_t v186 = v258;
                }
              }
              else
              {
                *(_WORD *)v206 = v5[v216];
                unint64_t v217 = v206 + 2;
              }
              uint64_t v216 = v187 | 2;
              int v257 = v217;
              v206 = v217;
            }
            if (v206 >= v186)
            {
              v228 = __p;
              uint64_t v229 = v206 - __p;
              if (v206 - __p < -2) {
LABEL_423:
              }
                sub_21610CB04();
              uint64_t v230 = v229 >> 1;
              unint64_t v231 = v186 - __p;
              if (v231 <= (v229 >> 1) + 1) {
                unint64_t v232 = v230 + 1;
              }
              else {
                unint64_t v232 = v231;
              }
              if (v231 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v233 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v233 = v232;
              }
              if (v233)
              {
                uint64_t v234 = (char *)sub_21610FD44((uint64_t)&v258, v233);
                v228 = __p;
                v206 = v257;
              }
              else
              {
                uint64_t v234 = 0;
              }
              int v235 = &v234[2 * v230];
              *(_WORD *)int v235 = v5[v216];
              int v227 = v235 + 2;
              while (v206 != v228)
              {
                __int16 v236 = *((_WORD *)v206 - 1);
                v206 -= 2;
                *((_WORD *)v235 - 1) = v236;
                v235 -= 2;
              }
              unint64_t v186 = &v234[2 * v233];
              long long __p = v235;
              uint64_t v258 = v186;
              if (v228)
              {
                operator delete(v228);
                unint64_t v186 = v258;
              }
            }
            else
            {
              *(_WORD *)v206 = v5[v216];
              int v227 = v206 + 2;
            }
            if (v227 >= v186)
            {
              char v237 = __p;
              uint64_t v238 = v227 - __p;
              if (v227 - __p <= -3) {
                sub_21610CB04();
              }
              uint64_t v239 = v238 >> 1;
              unint64_t v240 = v186 - __p;
              if (v240 <= (v238 >> 1) + 1) {
                unint64_t v241 = v239 + 1;
              }
              else {
                unint64_t v241 = v240;
              }
              if (v240 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v242 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v242 = v241;
              }
              if (v242)
              {
                int v243 = (char *)sub_21610FD44((uint64_t)&v258, v242);
                char v237 = __p;
              }
              else
              {
                int v243 = 0;
              }
              v244 = &v243[2 * v239];
              *(_WORD *)v244 = 26085;
              while (v227 != v237)
              {
                __int16 v245 = *((_WORD *)v227 - 1);
                v227 -= 2;
                *((_WORD *)v244 - 1) = v245;
                v244 -= 2;
              }
              long long __p = v244;
              uint64_t v258 = &v243[2 * v242];
              if (v237) {
                operator delete(v237);
              }
            }
            else
            {
              *(_WORD *)int v227 = 26085;
            }
            (*(void (**)(void))(a4 + 16))();
          }
        }
      }
      BOOL v133 = v6++ == v7;
    }
    while (!v133);
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_2162499A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2162499F8(uint64_t *result, uint64_t a2)
{
  xmmword_26797F040 = 0u;
  *(_OWORD *)&qword_26797F050 = 0u;
  dword_26797F060 = 1065353216;
  if (a2)
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t v34 = &result[4 * a2];
    while (1)
    {
      unint64_t v3 = (unint64_t)&xmmword_26797F040 + 8;
      unint64_t v4 = sub_2161A6920((uint64_t)&qword_26797F058, v2);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_26797F040 + 1);
      if (*((void *)&xmmword_26797F040 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797F040 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v3 = v4;
          if (v4 >= *((void *)&xmmword_26797F040 + 1)) {
            unint64_t v3 = v4 % *((void *)&xmmword_26797F040 + 1);
          }
        }
        else
        {
          unint64_t v3 = (*((void *)&xmmword_26797F040 + 1) - 1) & v4;
        }
        unint64_t v9 = *(unsigned __int16 ***)(xmmword_26797F040 + 8 * v3);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int16 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              uint64_t result = (uint64_t *)sub_2161A6964((uint64_t)&dword_26797F060, i + 8, (unsigned __int16 *)v2);
              if (result) {
                goto LABEL_77;
              }
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v3) {
                break;
              }
            }
          }
        }
      }
      int v12 = (char *)operator new(0x30uLL);
      v35[0] = (uint64_t)v12;
      v35[1] = (uint64_t)&qword_26797F050;
      char v36 = 0;
      *(void *)int v12 = 0;
      *((void *)v12 + 1) = v5;
      uint64_t v13 = v12 + 16;
      if (*(char *)(v2 + 23) < 0)
      {
        sub_2161984AC(v13, *(void **)v2, *(void *)(v2 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v2;
        *((void *)v12 + 4) = *(void *)(v2 + 16);
        *(_OWORD *)uint64_t v13 = v14;
      }
      *((_WORD *)v12 + 2sub_216195244(&a9, 0) = *(_WORD *)(v2 + 24);
      char v36 = 1;
      float v15 = (float)(unint64_t)(qword_26797F058 + 1);
      if (v6 && (float)(*(float *)&dword_26797F060 * (float)v6) >= v15) {
        goto LABEL_68;
      }
      BOOL v16 = (v6 & (v6 - 1)) == 0;
      if (v6 < 3) {
        BOOL v16 = 0;
      }
      unint64_t v17 = (2 * v6) | !v16;
      unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26797F060);
      int8x8_t prime = (int8x8_t)(v17 <= v18 ? v18 : v17);
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v6 = *((void *)&xmmword_26797F040 + 1);
      if (*(void *)&prime > *((void *)&xmmword_26797F040 + 1)) {
        break;
      }
      if (*(void *)&prime < *((void *)&xmmword_26797F040 + 1))
      {
        unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26797F058 / *(float *)&dword_26797F060);
        if (*((void *)&xmmword_26797F040 + 1) < 3uLL
          || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797F040 + 8)),
              v27.i16[0] = vaddlv_u8(v27),
              v27.u32[0] > 1uLL))
        {
          unint64_t v26 = std::__next_prime(v26);
        }
        else
        {
          uint64_t v28 = 1 << -(char)__clz(v26 - 1);
          if (v26 >= 2) {
            unint64_t v26 = v28;
          }
        }
        if (*(void *)&prime <= v26) {
          int8x8_t prime = (int8x8_t)v26;
        }
        if (*(void *)&prime >= v6)
        {
          unint64_t v6 = *((void *)&xmmword_26797F040 + 1);
        }
        else
        {
          if (prime) {
            break;
          }
          uint64_t v33 = (void *)xmmword_26797F040;
          *(void *)&xmmword_26797F040 = 0;
          if (v33) {
            operator delete(v33);
          }
          unint64_t v6 = 0;
          *((void *)&xmmword_26797F040 + 1) = 0;
        }
      }
LABEL_63:
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v5 >= v6) {
          unint64_t v3 = v5 % v6;
        }
        else {
          unint64_t v3 = v5;
        }
      }
      else
      {
        unint64_t v3 = (v6 - 1) & v5;
      }
LABEL_68:
      __int16 v31 = *(void **)(xmmword_26797F040 + 8 * v3);
      if (v31)
      {
        *(void *)v35[0] = *v31;
        void *v31 = v35[0];
      }
      else
      {
        *(void *)v35[0] = qword_26797F050;
        qword_26797F050 = v35[0];
        *(void *)(xmmword_26797F040 + 8 * v3) = &qword_26797F050;
        if (*(void *)v35[0])
        {
          unint64_t v32 = *(void *)(*(void *)v35[0] + 8);
          if ((v6 & (v6 - 1)) != 0)
          {
            if (v32 >= v6) {
              v32 %= v6;
            }
          }
          else
          {
            v32 &= v6 - 1;
          }
          *(void *)(xmmword_26797F040 + 8 * v32) = v35[0];
        }
      }
      v35[0] = 0;
      ++qword_26797F058;
      uint64_t result = sub_216249EF4(v35);
LABEL_77:
      v2 += 32;
      if ((uint64_t *)v2 == v34) {
        return result;
      }
    }
    if (*(void *)&prime >> 61) {
      sub_2160FFA74();
    }
    uint64_t v20 = operator new(8 * *(void *)&prime);
    __int16 v21 = (void *)xmmword_26797F040;
    *(void *)&xmmword_26797F040 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *((int8x8_t *)&xmmword_26797F040 + 1) = prime;
    do
      *(void *)(xmmword_26797F040 + 8 * v22++) = 0;
    while (*(void *)&prime != v22);
    uint64_t v23 = (void **)qword_26797F050;
    if (qword_26797F050)
    {
      unint64_t v24 = *(void *)(qword_26797F050 + 8);
      uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        if (v24 >= *(void *)&prime) {
          v24 %= *(void *)&prime;
        }
      }
      else
      {
        v24 &= *(void *)&prime - 1;
      }
      *(void *)(xmmword_26797F040 + 8 * v24) = &qword_26797F050;
      for (j = *v23; j; unint64_t v24 = v30)
      {
        unint64_t v30 = j[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(xmmword_26797F040 + 8 * v30))
          {
            *(void *)(xmmword_26797F040 + 8 * v3sub_216195244(&a9, 0) = v23;
            goto LABEL_59;
          }
          *uint64_t v23 = (void *)*j;
          void *j = **(void **)(xmmword_26797F040 + 8 * v30);
          **(void **)(xmmword_26797F040 + 8 * v3sub_216195244(&a9, 0) = j;
          uint64_t j = v23;
        }
        unint64_t v30 = v24;
LABEL_59:
        uint64_t v23 = (void **)j;
        uint64_t j = (void *)*j;
      }
    }
    unint64_t v6 = (unint64_t)prime;
    goto LABEL_63;
  }
  return result;
}

void sub_216249EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216249EF4((uint64_t *)va);
  sub_2161A6A48((uint64_t)&xmmword_26797F040);
  _Unwind_Resume(a1);
}

uint64_t *sub_216249EF4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_216249F48()
{
}

double sub_216249F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
  if (v6)
  {
    uint8x8_t v7 = (unsigned __int16 *)v5;
    uint64_t v8 = 2 * v6;
    while (1)
    {
      UChar32 v9 = *v7;
      int v10 = u_charType(v9);
      BOOL v11 = v9 != 12295 && v10 == 10;
      BOOL v12 = v11;
      int v13 = 1;
      if (v10 == 11 || v12 || (v9 - 13056) < 0x7B || (v9 - 13183) <= 0x80) {
        break;
      }
      ++v7;
      v8 -= 2;
      if (!v8) {
        goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_14:
    int v13 = 0;
  }
  long long v14 = (double *)sub_2161A2A80();
  float v15 = v14;
  BOOL v16 = *(_DWORD **)a3;
  unint64_t v17 = *(_DWORD **)(a3 + 8);
  uint64_t v18 = a1;
  if (*(_DWORD **)a3 == v17)
  {
LABEL_24:
    double v21 = 0.0;
    if (!v13) {
      return v21;
    }
  }
  else
  {
    uint64_t v19 = *(void *)(*(void *)(a1 + 8) + 8);
    uint64_t v20 = *(_DWORD **)a3;
    do
    {
      if (*(_DWORD *)(v19 + 60) == *v20 || *(_DWORD *)(v19 + 56) == *v20) {
        return v14[14];
      }
      ++v20;
    }
    while (v20 != v17);
    while (*v16)
    {
      if (++v16 == v17) {
        goto LABEL_24;
      }
    }
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2)) {
    return 0.0;
  }
  unint64_t v22 = 0;
  double v21 = 0.0;
  long long v71 = v15;
  do
  {
    uint64_t v23 = (_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 560))(a2, v22);
    if ((*v23 - 3) < 2) {
      goto LABEL_124;
    }
    if (*v23 == 9)
    {
      double v21 = v21 + v15[13];
      goto LABEL_124;
    }
    unint64_t v24 = v23;
    uint64_t v25 = sub_2162319EC(a2, v22);
    uint64_t v73 = v26;
    long long v74 = (unsigned __int16 *)v25;
    (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(v18 + 8) + 8) + 40))(&__str);
    unint64_t v77 = 0;
    unint64_t v78 = 0;
    BOOL v27 = 0;
    BOOL v75 = 0;
    char v28 = 0;
    int v29 = 0;
LABEL_31:
    char v30 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    while ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v29 >= HIBYTE(__str.__r_.__value_.__r.__words[2])) {
        goto LABEL_93;
      }
      std::string::size_type v33 = v29;
      int v34 = v29 + 1;
      unsigned int v35 = __str.__r_.__value_.__s.__data_[v29];
      if ((__str.__r_.__value_.__s.__data_[v29] & 0x80000000) == 0)
      {
LABEL_43:
        int v29 = v34;
        goto LABEL_67;
      }
      std::string::size_type v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_45:
      if (v36 == v34) {
        goto LABEL_91;
      }
      uint64_t v37 = v34;
      if (v35 < 0xE0)
      {
        if (v35 < 0xC2) {
          goto LABEL_91;
        }
        int v40 = v35 & 0x1F;
      }
      else
      {
        if (v35 > 0xEF)
        {
          if (v35 > 0xF4) {
            goto LABEL_91;
          }
          unint64_t v41 = p_str->__r_.__value_.__s.__data_[v34];
          if (((byte_216381FC0[v41 >> 4] >> (v35 + 16)) & 1) == 0) {
            goto LABEL_91;
          }
          uint64_t v42 = v29 + 2;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            __int16 v43 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_ == v42) {
              goto LABEL_91;
            }
          }
          else
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == v42) {
              goto LABEL_91;
            }
            __int16 v43 = &__str;
          }
          unsigned int v39 = v43->__r_.__value_.__s.__data_[v42] ^ 0x80;
          if (v39 > 0x3F)
          {
LABEL_91:
            double v57 = 0.0;
            if ((v28 & 1) == 0) {
              goto LABEL_121;
            }
            unint64_t v58 = v78 + 1;
            goto LABEL_94;
          }
          int v34 = v29 + 2;
          int v38 = v41 & 0x3F | ((v35 - 240) << 6);
        }
        else
        {
          int v38 = v35 & 0xF;
          if (((a00000000000000[v35 & 0xF] >> (p_str->__r_.__value_.__s.__data_[v34] >> 5)) & 1) == 0) {
            goto LABEL_91;
          }
          unsigned int v39 = p_str->__r_.__value_.__s.__data_[v34] & 0x3F;
        }
        if (size == ++v34) {
          goto LABEL_91;
        }
        uint64_t v37 = v34;
        int v40 = v39 | (v38 << 6);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v44 = &__str;
      }
      else {
        long long v44 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      unsigned int v45 = v44->__r_.__value_.__s.__data_[v37] ^ 0x80;
      if (v45 > 0x3F) {
        goto LABEL_91;
      }
      unsigned int v35 = v45 | (v40 << 6);
      int v29 = v34 + 1;
LABEL_67:
      if (v35 != 32)
      {
        std::string::basic_string(&v79, &__str, v33, v29 - v33, (std::allocator<char> *)v81);
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v46 = &v79;
        }
        else {
          uint64_t v46 = (std::string *)v79.__r_.__value_.__r.__words[0];
        }
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = v79.__r_.__value_.__l.__size_;
        }
        uint64_t v48 = *(void *)(*(void *)(*(void *)(v18 + 8) + 8) + 8);
        int v49 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(void *)v48 + 504))(v48, v46, v47);
        BOOL v50 = v49 == 0;
        if (v49)
        {
          BOOL v51 = 0;
        }
        else
        {
          int v52 = u_charType(v35);
          BOOL v53 = 1;
          if (v52 != 27 && v35 - 65038 >= 2 && v35 != 8205) {
            BOOL v53 = v52 == 26;
          }
          int v76 = v75 && v53;
          if (v76)
          {
            BOOL v51 = v53;
          }
          else
          {
            uint64_t v54 = sub_2162327C4(v35);
            BOOL v51 = v53;
            unint64_t v55 = v78;
            if (v54 == -1) {
              unint64_t v55 = v78 + 1;
            }
            unint64_t v78 = v55;
          }
          unint64_t v56 = v77;
          if (v27) {
            unint64_t v56 = v77 + (v76 ^ 1u);
          }
          unint64_t v77 = v56;
          uint64_t v18 = a1;
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        v28 |= v50;
        BOOL v27 = v50;
        BOOL v75 = v51;
        float v15 = v71;
        goto LABEL_31;
      }
    }
    if (v29 < SLODWORD(__str.__r_.__value_.__r.__words[1]))
    {
      std::string::size_type v33 = v29;
      int v34 = v29 + 1;
      unsigned int v35 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + v29);
      if ((*(char *)(__str.__r_.__value_.__r.__words[0] + v29) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      std::string::size_type v36 = __str.__r_.__value_.__l.__size_;
      goto LABEL_45;
    }
LABEL_93:
    double v57 = 0.0;
    unint64_t v58 = v78;
    if ((v28 & 1) == 0) {
      goto LABEL_121;
    }
LABEL_94:
    int v59 = v24[1];
    uint64_t v60 = (double *)sub_2161A2A80();
    UChar32 v61 = *v74;
    if (v61 == 9787 || (u_charType(v61) - 19) > 0xA)
    {
      if (v59 < 18001)
      {
        double v62 = 0.0;
        if (v59 >= 3001) {
          double v62 = ((double)v59 + -3000.0) / 15000.0 * v60[8] + 0.0;
        }
      }
      else
      {
        double v62 = v60[8] + 0.0;
      }
      if (!v73) {
        goto LABEL_120;
      }
      if (v73 == 1)
      {
        double v63 = v60[11];
      }
      else
      {
        int v64 = *v74;
        if ((v64 - 12353) < 0x56 || v64 == 12316 || v64 == 12540) {
          goto LABEL_120;
        }
        BOOL v65 = 0;
        for (unint64_t i = 1; i != v73; ++i)
        {
          int v67 = v74[i];
          if ((v67 - 12353) >= 0x56 && v67 != 12540 && v67 != 12316) {
            break;
          }
          BOOL v65 = i >= v73 - 1;
        }
        if (!v65) {
          goto LABEL_120;
        }
        double v63 = v60[12];
      }
      double v62 = v62 + v63;
    }
    else
    {
      double v62 = v60[7];
    }
LABEL_120:
    double v57 = v62 + (double)v58 * v15[9] + (double)v77 * v15[10];
    char v30 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_121:
    if (v30 < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    double v21 = v21 + v57;
LABEL_124:
    ++v22;
  }
  while (v22 < (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2));
  return v21;
}

void sub_21624A618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_21624A658(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  uint64_t v80 = -1;
  uint64_t v8 = (double *)sub_2161A2A80();
  UChar32 v9 = v8;
  uint64_t v10 = *(void *)(a2 + 48);
  if ((*(void *)(a2 + 56) - v10) >> 3 >= (unint64_t)*((unsigned __int16 *)v8 + 156)) {
    unint64_t v11 = *((unsigned __int16 *)v8 + 156);
  }
  else {
    unint64_t v11 = (*(void *)(a2 + 56) - v10) >> 3;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12 && ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12) & 1) != 0)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a3);
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    sub_2161F93EC(&v77, v11);
    uint64_t v70 = a3;
    long long v71 = v9;
    sub_21617B620(v76, (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3, &v80);
    uint64_t v13 = *(void *)(a2 + 48);
    if (*(void *)(a2 + 56) != v13)
    {
      unint64_t v14 = 0;
      do
      {
        uint64_t v15 = *(void *)(v13 + 8 * v14);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 408))(v15) == 1
          || 0xAAAAAAAAAAAAAAABLL * ((v78 - v77) >> 3) >= v11)
        {
          break;
        }
        int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 96))(v15);
        int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 408))(v15);
        if (v16 != 71 && (v16 != 76 && v16 != 74 || v17))
        {
          *((void *)v76[0] + v14) = 0xAAAAAAAAAAAAAAABLL * ((v78 - v77) >> 3);
          (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 8) + 16))(__p);
          sub_2161F94A0(&v77, (uint64_t)__p);
          if (*(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
        }
        ++v14;
        uint64_t v13 = *(void *)(a2 + 48);
      }
      while (v14 < (*(void *)(a2 + 56) - v13) >> 3);
    }
    uint64_t v18 = sub_2162D1CE4(0xCu);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      int v66 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      int v67 = "Montreal";
      if (v66 == 1) {
        int v67 = "RNNLM";
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v67;
      _os_log_debug_impl(&dword_2160F5000, v18, OS_LOG_TYPE_DEBUG, "[Inference Engine: %s]", __p, 0xCu);
    }
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 64))(v75);
    uint64_t v19 = v71;
    unint64_t v20 = (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3;
    *(void *)long long __p = 0;
    sub_2161495E4(a4, v20, __p);
    uint64_t v21 = v70;
    uint64_t v22 = *(void *)(a2 + 48);
    if (*(void *)(a2 + 56) != v22)
    {
      unint64_t v23 = 0;
      uint64_t v68 = a4;
      uint64_t v72 = a1;
      while (1)
      {
        unint64_t v24 = *(int **)(v22 + 8 * v23);
        if ((*(unsigned int (**)(int *))(*(void *)v24 + 408))(v24) == 1) {
          goto LABEL_89;
        }
        if (((*(unsigned int (**)(int *))(*(void *)v24 + 96))(v24) == 76
           || (*(unsigned int (**)(int *))(*(void *)v24 + 96))(v24) == 74)
          && !(*(unsigned int (**)(int *))(*(void *)v24 + 408))(v24))
        {
          (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 8) + 16))(__p);
          double v28 = sub_216249F5C(a1, (uint64_t)v24, (uint64_t)__p);
          if (*(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          double v25 = 0.0;
          goto LABEL_33;
        }
        if ((*(unsigned int (**)(int *))(*(void *)v24 + 96))(v24) == 71) {
          break;
        }
        uint64_t v26 = *((void *)v76[0] + v23);
        if (v26 == -1)
        {
          double v25 = v19[5];
          goto LABEL_32;
        }
        float v27 = *((float *)v75[0] + v26);
        double v28 = sub_216249F5C(a1, (uint64_t)v24, v77 + 24 * v26);
        double v25 = v27;
LABEL_33:
        double v29 = 0.0;
        if ((*(unsigned int (**)(int *))(*(void *)v24 + 96))(v24) != 71) {
          double v29 = (*(double (**)(void, uint64_t, int *))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v21, v24)* 0.1;
        }
        if ((**(_DWORD **)(a1 + 24) & 0x6000002) == 0x4000002) {
          double v30 = 0.0;
        }
        else {
          double v30 = v19[3];
        }
        uint64_t v31 = (*(uint64_t (**)(int *))(*(void *)v24 + 48))(v24);
        if (v31)
        {
          uint64_t v32 = v31 - 1;
          if (*(_DWORD *)(*(uint64_t (**)(int *, uint64_t))(*(void *)v24 + 560))(v24, v31 - 1) == 8
            || *(_DWORD *)(*(uint64_t (**)(int *, uint64_t))(*(void *)v24 + 560))(v24, v32) == 10)
          {
            double v30 = v19[4];
            std::string::size_type v33 = (const void *)(*(uint64_t (**)(int *))(*(void *)v24 + 544))(v24);
            unint64_t v35 = v34;
            uint64_t v36 = (*(uint64_t (**)(int *))(*(void *)v24 + 552))(v24);
            unint64_t v73 = v37;
            if (v35 < 5 || (uint64_t v38 = *(void *)(a2 + 48), *(void *)(a2 + 56) == v38))
            {
LABEL_75:
              a1 = v72;
            }
            else
            {
              unsigned int v39 = (const void *)v36;
              unint64_t v69 = v23;
              unint64_t v40 = 0;
              while (1)
              {
                unint64_t v41 = *(int **)(v38 + 8 * v40);
                if (v41 != v24 && (*(unsigned int (**)(int *))(*(void *)v41 + 408))(v41) != 1)
                {
                  uint64_t v42 = (const void *)(*(uint64_t (**)(int *))(*(void *)v41 + 544))(v41);
                  unint64_t v44 = v43;
                  uint64_t v45 = (*(uint64_t (**)(int *))(*(void *)v41 + 552))(v41);
                  BOOL v47 = v33 || v44 == 0;
                  BOOL v48 = v47;
                  BOOL v49 = v35 >= v44 && v44 + 2 >= v35;
                  if (v49 && v48)
                  {
                    BOOL v51 = (const void *)v45;
                    unint64_t v52 = v46;
                    int v53 = memcmp(v33, v42, 2 * v44);
                    BOOL v54 = v39 || v52 == 0;
                    BOOL v55 = v54;
                    BOOL v56 = !v53 && v73 >= v52;
                    BOOL v57 = !v56 || !v55;
                    if (!v57 && !memcmp(v39, v51, 2 * v52)) {
                      break;
                    }
                  }
                }
                ++v40;
                uint64_t v38 = *(void *)(a2 + 48);
                if (v40 >= (*(void *)(a2 + 56) - v38) >> 3)
                {
                  a4 = v68;
                  unint64_t v23 = v69;
                  uint64_t v21 = v70;
                  uint64_t v19 = v71;
                  goto LABEL_75;
                }
              }
              uint64_t v65 = *((void *)v76[0] + v40);
              uint64_t v21 = v70;
              a1 = v72;
              if (v65 != -1 && v25 > *((float *)v75[0] + v65)) {
                double v25 = *((float *)v75[0] + v65);
              }
              a4 = v68;
              unint64_t v23 = v69;
              uint64_t v19 = v71;
            }
          }
        }
        double v58 = v30 * (double)v24[55] / v19[2];
        *(double *)(*a4 + 8 * v23) = v29 + v28 + v25 - v58;
        int v59 = sub_2162D1CE4(0xCu);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v60 = sub_2162D1CE4(0xCu);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            UChar32 v61 = (void *)(*(uint64_t (**)(int *))(*(void *)v24 + 544))(v24);
            sub_2161E30A8(v61, v62, &v74);
            double v63 = &v74;
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              double v63 = (std::string *)v74.__r_.__value_.__r.__words[0];
            }
            uint64_t v64 = *(void *)(*a4 + 8 * v23);
            *(_DWORD *)long long __p = 136316418;
            *(void *)&__p[4] = v63;
            *(_WORD *)&__p[12] = 2048;
            *(double *)&__p[14] = v25;
            __int16 v82 = 2048;
            uint64_t v83 = v64;
            __int16 v84 = 2048;
            double v85 = -v28;
            __int16 v86 = 2048;
            double v87 = -v29;
            __int16 v88 = 2048;
            double v89 = v58;
            _os_log_debug_impl(&dword_2160F5000, v60, OS_LOG_TYPE_DEBUG, "[%s] Adjust Static LM Score: %.3f -> %.3f Penalties: (UNK: %.3f, LM: %.3f, Match: %.3f)", __p, 0x3Eu);
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
          }
        }
        ++v23;
        uint64_t v22 = *(void *)(a2 + 48);
        if (v23 >= (*(void *)(a2 + 56) - v22) >> 3) {
          goto LABEL_89;
        }
      }
      double v25 = (*(double (**)(int *))(*(void *)v24 + 392))(v24);
LABEL_32:
      double v28 = 0.0;
      goto LABEL_33;
    }
LABEL_89:
    if (v75[0])
    {
      v75[1] = v75[0];
      operator delete(v75[0]);
    }
    if (v76[0])
    {
      v76[1] = v76[0];
      operator delete(v76[0]);
    }
    *(void *)long long __p = &v77;
    sub_21613F444((void ***)__p);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_21624B0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  a31 = &a27;
  sub_21613F444((void ***)&a31);
  _Unwind_Resume(a1);
}

void sub_21624B18C(const void *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v3 = os_signpost_id_make_with_pointer(v2, a1);
  unint64_t v4 = sub_2162D1CE4(0xDu);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = v4;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)int buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "MecabraThaiInit", "ThaiEngine engine init", buf, 2u);
    }
  }
  operator new();
}

void sub_21624B68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161FBD88((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_21624B988()
{
  MEMORY[0x2166CA800](v0, 0x60C4045F868BCLL);
  JUMPOUT(0x21624B864);
}

void sub_21624B9A8()
{
}

void sub_21624B9B0()
{
  MEMORY[0x2166CA800](v0, 0x10E1C4017B55C18);
  JUMPOUT(0x21624B894);
}

void sub_21624B9D0()
{
}

void sub_21624B9D8()
{
  MEMORY[0x2166CA800](v0, 0x60C4082687C62);
  JUMPOUT(0x21624B8A0);
}

void sub_21624B9F8()
{
}

void sub_21624BA00()
{
  MEMORY[0x2166CA800](v0, 0x10F3C4082E6510BLL);
  JUMPOUT(0x21624B8D0);
}

void sub_21624BA20()
{
}

void sub_21624BA28()
{
}

void sub_21624BA30()
{
  MEMORY[0x2166CA800](v0, 0x10A1C4010E18BA4);
  JUMPOUT(0x21624B930);
}

void sub_21624BA50()
{
}

void sub_21624BA58()
{
}

void sub_21624BA60(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v8 = sub_2162D1CE4(3u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 138412290;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "[ThaiEngine::analyzeString] analysisStr: [%@]", buf, 0xCu);
  }
  os_signpost_id_t ptr = 0;
  UChar32 v9 = sub_2162D1CE4(0xDu);
  os_signpost_id_t ptr = os_signpost_id_make_with_pointer(v9, &ptr);
  uint64_t v10 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v11 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v12 = v10;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)int buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v11, "MecabraAnalyzeStringWithContext", (const char *)&unk_2163CBB73, buf, 2u);
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 104) + 32))(*(void *)(a1 + 104));
  sub_2162978A0(*(void *)(a1 + 104), 1);
  if (a2 && a5)
  {
    CFIndex Length = CFStringGetLength(a2);
    if (Length <= CFArrayGetCount(a5)) {
      operator new();
    }
  }
  *(void *)int buf = &unk_26C6BE968;
  *(_OWORD *)&uint8_t buf[8] = 0u;
  long long v18 = 0u;
  int v19 = 1065353216;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  sub_2161E212C(a2, (UniChar **)__p);
  sub_216356BDC((uint64_t)__p[0], ((char *)__p[1] - (char *)__p[0]) >> 1, 0, (uint64_t *)v15);
  sub_21624C028(a1, (uint64_t)buf, (uint64_t)v15, (uint64_t)__p);
}

void sub_21624BD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  MEMORY[0x2166CA800](v19, 0x60C40AA6EF139);
  sub_21624F668((const void ***)&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21624BE34(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72));
  unint64_t v4 = sub_2162D1CE4(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v11[0] = 0;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[ThaiEngine::fillResultCandidateSet] Final Candidates", (uint8_t *)v11, 2u);
  }
  uint64_t v5 = *(uint64_t **)(a2 + 48);
  uint64_t v6 = *(uint64_t **)(a2 + 56);
  if (v5 != v6)
  {
    unint64_t v7 = 1;
    do
    {
      uint64_t v8 = *v5;
      *(void *)(*v5 + 8) = v7;
      if (v7 <= 4)
      {
        (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v8 + 528))(v8, 12, "Autocorrected", 1);
        uint64_t v8 = *v5;
      }
      *v5++ = 0;
      UChar32 v9 = (void *)sub_2161F4704(v8);
      (*(void (**)(void, void *))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), v9);

      ++v7;
    }
    while (v5 != v6);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 64))(*(void *)(a1 + 72));
}

uint64_t sub_21624BFB0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 80))(*(void *)(a1 + 104));
  os_signpost_id_t v3 = *(uint64_t **)(a1 + 96);
  if (v3)
  {
    uint64_t result = *v3;
    if (*v3)
    {
      return MEMORY[0x270F46FD8]();
    }
  }
  return result;
}

void sub_21624C028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  sub_21632BA18(*(void **)a4, (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 1, (uint64_t)v4);
}

void sub_21624C7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  unint64_t v14 = va_arg(va1, const void *);
  sub_216250938((void *)(v12 - 192));
  sub_21624E130((const void **)va, 0);
  sub_216308B50((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_21624C968()
{
}

uint64_t sub_21624C970(uint64_t a1, CFArrayRef theArray, int a3, uint64_t a4)
{
  if (!theArray) {
    return 0;
  }
  if (!CFArrayGetCount(theArray))
  {
    sub_21624CAE8(a1, a4, a3);
    sub_21624CC38(a1);
    return 1;
  }
  uint64_t v8 = sub_21622AF98(theArray);
  if (!v8)
  {
    CFStringRef v11 = sub_21622B054(theArray);
    if (v11)
    {
      CFStringRef v12 = v11;
      CFIndex Length = CFStringGetLength(v11);
      BOOL v10 = Length != 0;
      if (Length)
      {
        sub_21624CAE8(a1, a4, a3);
        CFArrayRef v16 = sub_21622B304(theArray);
        sub_21624BA60(a1, v12, v14, v15, v16);
      }
      CFRelease(v12);
      return v10;
    }
    return 0;
  }
  if (v8 != CFArrayGetCount(theArray)) {
    return 0;
  }

  return sub_21624CE68(a1, theArray, a3, a4);
}

void sub_21624CAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_21624CAE8(uint64_t a1, uint64_t a2, int a3)
{
  if (a2) {
    operator new();
  }
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v6 = *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_2161C19CC(a1 + 8, v6);
  *(unsigned char *)(*(void *)(a1 + 104) + 96) = 1;
  uint64_t result = sub_216325BD8(a3, 0, 0);
  *(_DWORD *)(a1 + 56) = result;
  return result;
}

void sub_21624CC14(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4095D43ACALL);
  _Unwind_Resume(a1);
}

uint64_t sub_21624CC38(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  os_signpost_id_t ptr = 0;
  uint64_t v2 = sub_2162D1CE4(0xDu);
  os_signpost_id_t ptr = os_signpost_id_make_with_pointer(v2, &ptr);
  os_signpost_id_t v3 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v4 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = v3;
    if (os_signpost_enabled(v3))
    {
      LOWORD(v1sub_216195B94(&a9, 0) = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_2163CBB73, (uint8_t *)&v10, 2u);
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 120) + 16))(&v10);
  *(void *)int buf = &unk_26C6C7308;
  uint64_t v15 = sub_21621750C;
  CFArrayRef v16 = buf;
  sub_216215A00(&v10, (uint64_t)buf);
  sub_216199290(buf);
  sub_216216A20((uint64_t)&v10, 5u, (uint64_t)"Final", 0, 1u);
  sub_21624BE34(a1, (uint64_t)&v10);
  uint64_t v6 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v7 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v8 = v6;
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)int buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v8, OS_SIGNPOST_INTERVAL_END, v7, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_2163CBB73, buf, 2u);
    }
  }
  BOOL v10 = &unk_26C6BE968;
  *(void *)int buf = &v12;
  sub_21618B5DC((void ***)buf);
  sub_216144C28((uint64_t)&v11);
  return 1;
}

void sub_21624CE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21624CE68(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  void v46[3] = *MEMORY[0x263EF8340];
  sub_21624CAE8(a1, a4, a3);
  if (a4) {
    *(void *)(*(void *)(a1 + 216) + 144) = a4;
  }
  (*(void (**)(void))(**(void **)(a1 + 104) + 32))(*(void *)(a1 + 104));
  sub_2162978A0(*(void *)(a1 + 104), 1);
  (*(void (**)(void))(**(void **)(a1 + 216) + 16))(*(void *)(a1 + 216));
  CFIndex Count = CFArrayGetCount(a2);
  CFIndex v8 = Count - 1;
  if (Count < 1)
  {
LABEL_18:
    if (*(void *)(*(void *)(a1 + 216) + 16) - *(void *)(*(void *)(a1 + 216) + 8) < 0x10uLL) {
      return 0;
    }
    theArray[0] = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
    memset(v37, 0, sizeof(v37));
    unint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v22 = *(void *)(a1 + 216);
    uint64_t v23 = operator new(0x28uLL);
    *uint64_t v23 = &unk_26C6C7FC0;
    v23[1] = a1;
    void v23[2] = theArray;
    v23[3] = v37;
    v23[4] = &v34;
    *(void *)&long long v44 = v23;
    sub_216278FB0(v22, 0x32uLL, (uint64_t)&v42, 1);
    sub_21618FF18(&v42);
    unint64_t v24 = v34;
    uint64_t v20 = v34 != v35;
    if (v34 != v35)
    {
      double v25 = sub_2162D1CE4(0xFu);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        CFArrayRef v26 = theArray[0];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
        CFIndex v28 = 0;
        uint64_t v42 = Mutable;
        while (v28 < CFArrayGetCount(v26))
        {
          CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v26, v28);
          double v30 = sub_21624D87C(ValueAtIndex, @"|");
          *(void *)int buf = v30;
          CFArrayAppendValue(Mutable, v30);
          if (v30) {
            CFRelease(v30);
          }
          ++v28;
        }
        sub_216325E20((unint64_t)"[CPSearch]", Mutable, &v34);
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      CFIndex v31 = 0;
      uint64_t v42 = (__CFArray *)&unk_26C6BE968;
      long long v43 = 0u;
      long long v44 = 0u;
      int v45 = 1065353216;
      memset(v46, 0, 24);
      while (v31 < CFArrayGetCount(theArray[0]))
      {
        CFArrayRef v32 = (const __CFArray *)CFArrayGetValueAtIndex(theArray[0], v31);
        std::string::size_type v33 = sub_21624D87C(v32, 0);
        if (CFStringGetLength(v33))
        {
          *(_DWORD *)int buf = 0;
          theArray[1] = 0;
          sub_2161E1FB8(v33);
        }
        if (v33) {
          CFRelease(v33);
        }
        ++v31;
      }
      *(void *)int buf = &unk_26C6C7308;
      unint64_t v40 = sub_21621750C;
      unint64_t v41 = buf;
      sub_216215A00(&v42, (uint64_t)buf);
      sub_216199290(buf);
      sub_216325D74(&v42);
      uint64_t v20 = v20;
      sub_21624BE34(a1, (uint64_t)&v42);
      uint64_t v42 = (__CFArray *)&unk_26C6BE968;
      *(void *)int buf = v46;
      sub_21618B5DC((void ***)buf);
      sub_216144C28((uint64_t)&v43);
      unint64_t v24 = v34;
    }
    if (v24)
    {
      unint64_t v35 = v24;
      operator delete(v24);
    }
    if (v37[0]) {
      operator delete(v37[0]);
    }
    if (theArray[0]) {
      CFRelease(theArray[0]);
    }
    return v20;
  }
  CFIndex v9 = Count;
  BOOL v10 = (const void *)*((void *)CFArrayGetValueAtIndex(a2, 0) + 3);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6BA4B8, 0);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = v11;
  BOOL v13 = 0;
  CFIndex v14 = 1;
  do
  {
    if (v14 - 1 >= v8 || (uint64_t v15 = (const void *)*((void *)CFArrayGetValueAtIndex(a2, v14) + 3)) == 0)
    {
      uint64_t v17 = *(void **)(a1 + 216);
LABEL_12:
      BOOL v18 = 1;
      goto LABEL_13;
    }
    CFArrayRef v16 = __dynamic_cast(v15, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6BA4B8, 0);
    uint64_t v17 = *(void **)(a1 + 216);
    if (!v16) {
      goto LABEL_12;
    }
    BOOL v18 = v12[16] == 2;
LABEL_13:
    if (!sub_216277498(v17, (uint64_t)v12, v18)) {
      break;
    }
    BOOL v13 = v14 >= v9;
    if (v9 == v14) {
      break;
    }
    uint64_t v19 = (const void *)*((void *)CFArrayGetValueAtIndex(a2, v14) + 3);
    if (!v19) {
      break;
    }
    uint64_t v12 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6BA4B8, 0);
    ++v14;
  }
  while (v12);
  if (v13) {
    goto LABEL_18;
  }
  return 0;
}

void sub_21624D6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21624D830(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 & 0x1000000) != 0) {
    return 1;
  }
  if ((a3 & 0x800000) == 0) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 58) & 4) != 0) {
    return 1;
  }
  return sub_216348AE8(*(uint64_t **)(a1 + 96), a2) ^ 1;
}

__CFString *sub_21624D87C(const __CFArray *a1, const __CFString *a2)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v6 = Count - 1;
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; i != v7; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
      CFStringAppend(Mutable, ValueAtIndex);
      if (a2 && i < v6) {
        CFStringAppend(Mutable, a2);
      }
    }
  }
  return Mutable;
}

BOOL sub_21624D918(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  if (a2)
  {
    CFArrayRef v5 = (const __CFArray *)a4;
    sub_21624CAE8(a1, a4, a3);
    if (v5)
    {
      sub_21628F494((uint64_t)v5);
      CFArrayRef v5 = (const __CFArray *)*((void *)v5 + 6);
    }
    if (CFStringGetLength(a2) >= 1) {
      sub_21624BA60(a1, a2, v7, v8, v5);
    }
    sub_21624CC38(a1);
  }
  return a2 != 0;
}

void sub_21624D998(uint64_t a1, const __CFString *a2)
{
  sub_2161E212C(a2, (UniChar **)&__p);
  sub_216197098();
}

void sub_21624DA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 16))(a9);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21624DAA0(uint64_t a1, int a2)
{
  if (*(char *)(a1 + 55) >= 0) {
    int v4 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    int v4 = *(_DWORD *)(a1 + 40);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, v5);
  int v7 = v4 - a2;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  switch(v9)
  {
    case 'A':
      unsigned int v13 = (int)(*(float *)(a1 + 96) * -4400.0) + 20000;
      if (v7 >= 1) {
        uint64_t v8 = v13 + 6000 * v7;
      }
      else {
        uint64_t v8 = v13;
      }
      break;
    case 'U':
      uint64_t v8 = ((int)(*(float *)(a1 + 96) * -4400.0) + 8000);
      break;
    case 'L':
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      int v11 = 1000 * v7;
      if (v7 <= 0) {
        int v11 = 0;
      }
      unsigned int v12 = v11 - 8000 * v6 + v8;
      if (v10) {
        uint64_t v8 = v12;
      }
      else {
        uint64_t v8 = 5000;
      }
      break;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1) & 1) == 0) {
    *(_DWORD *)(a1 + 136) = 83;
  }
  CFIndex v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 480);

  return v14(a1, v8);
}

void sub_21624DCD4(void *a1)
{
  if (*(unsigned char *)(*a1 + 7))
  {
    CFURLRef v2 = CFURLCreateWithFileSystemPath(0, *(CFStringRef *)(*a1 + 136), kCFURLPOSIXPathStyle, 1u);
    v8[1] = v2;
    if (v2)
    {
      CFURLRef v3 = v2;
      sub_216325274(v2, @"th.rnnlm", @"th", v8);
      uint64_t v4 = v8[0];
      if (v8[0])
      {
        v8[0] = 0;
        uint64_t v5 = a1[10];
        a1[10] = v4;
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
          uint64_t v4 = a1[10];
          uint64_t v5 = v8[0];
        }
        *(void *)(*(void *)(a1[16] + 16) + 8) = v4;
        uint64_t v6 = a1[15];
        uint64_t v7 = a1[10];
        *(void *)(v6 + 16) = v7;
        *(void *)(*(void *)(v6 + 24) + 16) = v7;
        *(unsigned char *)(*a1 + 7) = 0;
        v8[0] = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      CFRelease(v3);
    }
  }
}

void sub_21624DDE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_21624DDFC(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator new();
  }
}

void sub_21624DEE0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator new();
  }
}

void sub_21624DFC4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator new();
  }
}

uint64_t sub_21624E0A8(uint64_t a1, const char *a2, void *a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v4 = *(void **)(*(void *)(a1 + 104) + 104);
  if (!v4) {
    return 0;
  }
  CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(a3, a2, (uint64_t)a3);
  CFStringRef v8 = (const __CFString *)MecabraCandidateGetSurface(v4, v6, v7);
  if (CFStringCompare(Surface, v8, 0)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 104);

  return sub_216298230(v10);
}

void sub_21624E130(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_21624E168(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    int v9 = (long long *)((char *)a2 - 88);
    uint64_t v10 = (char *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (uint64_t)v10;
          uint64_t v11 = (char *)a2 - v10;
          uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * (((char *)a2 - v10) >> 3);
          if (!(!v5 & v4))
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 80))
                {
                  sub_21624F1DC((uint64_t *)a1, v9);
                  int v47 = *(_DWORD *)(a1 + 80);
                  *(_DWORD *)(a1 + 8sub_216195B94(&a9, 0) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v47;
                }
                break;
              case 3:
                sub_21624EDC8(a1, a1 + 88, (uint64_t)v9);
                break;
              case 4:
                sub_21624F34C(a1, a1 + 88, a1 + 176, (uint64_t)v9);
                break;
              case 5:
                sub_21624F34C(a1, a1 + 88, a1 + 176, a1 + 264);
                if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 344))
                {
                  sub_21624F1DC((uint64_t *)(a1 + 264), v9);
                  int v48 = *(_DWORD *)(a1 + 344);
                  *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v48;
                  if (*(_DWORD *)(a1 + 344) > *(_DWORD *)(a1 + 256))
                  {
                    sub_21624F1DC((uint64_t *)(a1 + 176), (long long *)(a1 + 264));
                    int v49 = *(_DWORD *)(a1 + 256);
                    int v50 = *(_DWORD *)(a1 + 344);
                    *(_DWORD *)(a1 + 256) = v50;
                    *(_DWORD *)(a1 + 344) = v49;
                    if (v50 > *(_DWORD *)(a1 + 168))
                    {
                      sub_21624F1DC((uint64_t *)(a1 + 88), (long long *)(a1 + 176));
                      int v51 = *(_DWORD *)(a1 + 168);
                      int v52 = *(_DWORD *)(a1 + 256);
                      *(_DWORD *)(a1 + 168) = v52;
                      *(_DWORD *)(a1 + 256) = v51;
                      if (v52 > *(_DWORD *)(a1 + 80))
                      {
                        sub_21624F1DC((uint64_t *)a1, (long long *)(a1 + 88));
                        int v53 = *(_DWORD *)(a1 + 80);
                        *(_DWORD *)(a1 + 8sub_216195B94(&a9, 0) = *(_DWORD *)(a1 + 168);
                        *(_DWORD *)(a1 + 168) = v53;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 2111)
          {
            if (a4)
            {
              if ((long long *)a1 != a2)
              {
                uint64_t v54 = a1 + 88;
                if ((long long *)(a1 + 88) != a2)
                {
                  uint64_t v55 = 0;
                  uint64_t v56 = a1;
                  do
                  {
                    uint64_t v57 = v54;
                    int v58 = *(_DWORD *)(v56 + 168);
                    if (v58 > *(_DWORD *)(v56 + 80))
                    {
                      long long v59 = *(_OWORD *)v57;
                      uint64_t v113 = *(void *)(v57 + 16);
                      *(_OWORD *)uint64_t v112 = v59;
                      *(void *)(v57 + 8) = 0;
                      *(void *)(v57 + 16) = 0;
                      *(void *)uint64_t v57 = 0;
                      *(_OWORD *)unint64_t v114 = *(_OWORD *)(v56 + 112);
                      uint64_t v115 = *(void *)(v56 + 128);
                      *(void *)(v56 + 112) = 0;
                      *(void *)(v56 + 12sub_216195B94(&a9, 0) = 0;
                      *(_OWORD *)long long __p = *(_OWORD *)(v56 + 136);
                      uint64_t v117 = *(void *)(v56 + 152);
                      *(void *)(v56 + 128) = 0;
                      *(void *)(v56 + 136) = 0;
                      *(void *)(v56 + 144) = 0;
                      *(void *)(v56 + 152) = 0;
                      int v118 = *(_DWORD *)(v56 + 160);
                      __int16 v119 = *(_WORD *)(v56 + 164);
                      uint64_t v60 = v55;
                      int v120 = v58;
                      while (1)
                      {
                        sub_21624F408(a1 + v60 + 88, (long long *)(a1 + v60));
                        if (!v60) {
                          break;
                        }
                        int v61 = *(_DWORD *)(a1 + v60 - 8);
                        v60 -= 88;
                        if (v120 <= v61)
                        {
                          uint64_t v62 = a1 + v60 + 88;
                          goto LABEL_88;
                        }
                      }
                      uint64_t v62 = a1;
LABEL_88:
                      sub_21624F408(v62, (long long *)v112);
                      if (__p[0])
                      {
                        __p[1] = __p[0];
                        operator delete(__p[0]);
                      }
                      if (v114[0])
                      {
                        v114[1] = v114[0];
                        operator delete(v114[0]);
                      }
                      if (SHIBYTE(v113) < 0) {
                        operator delete(v112[0]);
                      }
                    }
                    uint64_t v54 = v57 + 88;
                    v55 += 88;
                    uint64_t v56 = v57;
                  }
                  while ((long long *)(v57 + 88) != a2);
                }
              }
            }
            else if ((long long *)a1 != a2)
            {
              uint64_t v96 = a1 + 88;
              if ((long long *)(a1 + 88) != a2)
              {
                do
                {
                  uint64_t v97 = v96;
                  int v98 = *(_DWORD *)(a1 + 168);
                  if (v98 > *(_DWORD *)(a1 + 80))
                  {
                    long long v99 = *(_OWORD *)v97;
                    uint64_t v113 = *(void *)(v97 + 16);
                    *(_OWORD *)uint64_t v112 = v99;
                    *(void *)(v97 + 8) = 0;
                    *(void *)(v97 + 16) = 0;
                    *(void *)uint64_t v97 = 0;
                    *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 112);
                    uint64_t v115 = *(void *)(a1 + 128);
                    *(void *)(a1 + 112) = 0;
                    *(void *)(a1 + 12sub_216195B94(&a9, 0) = 0;
                    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 136);
                    uint64_t v117 = *(void *)(a1 + 152);
                    *(void *)(a1 + 128) = 0;
                    *(void *)(a1 + 136) = 0;
                    *(void *)(a1 + 144) = 0;
                    *(void *)(a1 + 152) = 0;
                    int v118 = *(_DWORD *)(a1 + 160);
                    __int16 v119 = *(_WORD *)(a1 + 164);
                    int v120 = v98;
                    do
                    {
                      sub_21624F408(a1 + 88, (long long *)a1);
                      uint64_t v100 = a1 - 88;
                      int v101 = *(_DWORD *)(a1 - 8);
                      a1 -= 88;
                    }
                    while (v120 > v101);
                    sub_21624F408(v100 + 88, (long long *)v112);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v114[0])
                    {
                      v114[1] = v114[0];
                      operator delete(v114[0]);
                    }
                    if (SHIBYTE(v113) < 0) {
                      operator delete(v112[0]);
                    }
                  }
                  uint64_t v96 = v97 + 88;
                  a1 = v97;
                }
                while ((long long *)(v97 + 88) != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)a1 != a2)
            {
              int64_t v63 = (unint64_t)(v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  uint64_t v67 = a1 + 88 * v66;
                  if (2 * v65 + 2 < v12)
                  {
                    int v68 = *(_DWORD *)(a1 + 88 * v66 + 80);
                    int v69 = *(_DWORD *)(v67 + 168);
                    v67 += 88 * (v68 > v69);
                    if (v68 > v69) {
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  int v70 = *(_DWORD *)(a1 + 88 * v65 + 80);
                  if (*(_DWORD *)(v67 + 80) <= v70)
                  {
                    uint64_t v71 = a1 + 88 * v65;
                    long long v72 = *(_OWORD *)v71;
                    uint64_t v113 = *(void *)(v71 + 16);
                    *(_OWORD *)uint64_t v112 = v72;
                    *(void *)(v71 + 8) = 0;
                    *(void *)(v71 + 16) = 0;
                    *(void *)uint64_t v71 = 0;
                    *(_OWORD *)unint64_t v114 = *(_OWORD *)(v71 + 24);
                    uint64_t v115 = *(void *)(v71 + 40);
                    *(void *)(v71 + 24) = 0;
                    *(void *)(v71 + 32) = 0;
                    *(void *)(v71 + 4sub_216195B94(&a9, 0) = 0;
                    *(_OWORD *)long long __p = *(_OWORD *)(v71 + 48);
                    uint64_t v117 = *(void *)(v71 + 64);
                    *(void *)(v71 + 48) = 0;
                    *(void *)(v71 + 56) = 0;
                    *(void *)(v71 + 64) = 0;
                    int v73 = *(_DWORD *)(v71 + 72);
                    __int16 v119 = *(_WORD *)(v71 + 76);
                    int v118 = v73;
                    int v120 = v70;
                    do
                    {
                      uint64_t v74 = v67;
                      sub_21624F408(v71, (long long *)v67);
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v75 = (2 * v66) | 1;
                      uint64_t v67 = a1 + 88 * v75;
                      if (2 * v66 + 2 < v12)
                      {
                        int v76 = *(_DWORD *)(a1 + 88 * v75 + 80);
                        int v77 = *(_DWORD *)(v67 + 168);
                        v67 += 88 * (v76 > v77);
                        if (v76 > v77) {
                          uint64_t v75 = 2 * v66 + 2;
                        }
                      }
                      uint64_t v71 = v74;
                      uint64_t v66 = v75;
                    }
                    while (*(_DWORD *)(v67 + 80) <= v70);
                    sub_21624F408(v74, (long long *)v112);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v114[0])
                    {
                      v114[1] = v114[0];
                      operator delete(v114[0]);
                    }
                    if (SHIBYTE(v113) < 0) {
                      operator delete(v112[0]);
                    }
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              int64_t v78 = v11 / 0x58uLL;
              do
              {
                uint64_t v79 = 0;
                long long v80 = *(_OWORD *)a1;
                uint64_t v104 = *(void *)(a1 + 16);
                *(_OWORD *)int v103 = v80;
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                *(_OWORD *)uint64_t v105 = *(_OWORD *)(a1 + 24);
                uint64_t v106 = *(void *)(a1 + 40);
                *(void *)(a1 + 24) = 0;
                *(void *)(a1 + 32) = 0;
                *(void *)(a1 + 4sub_216195B94(&a9, 0) = 0;
                *(_OWORD *)uint64_t v107 = *(_OWORD *)(a1 + 48);
                uint64_t v108 = *(void *)(a1 + 64);
                *(void *)(a1 + 48) = 0;
                *(void *)(a1 + 56) = 0;
                *(void *)(a1 + 64) = 0;
                int v81 = *(_DWORD *)(a1 + 72);
                __int16 v110 = *(_WORD *)(a1 + 76);
                int v109 = v81;
                int v111 = *(_DWORD *)(a1 + 80);
                uint64_t v82 = a1;
                do
                {
                  uint64_t v83 = v79 + 1;
                  uint64_t v84 = v82 + 88 * (v79 + 1);
                  uint64_t v85 = (2 * v79) | 1;
                  uint64_t v86 = 2 * v79 + 2;
                  if (v86 < v78)
                  {
                    int v87 = *(_DWORD *)(v82 + 88 * v83 + 80);
                    int v88 = *(_DWORD *)(v84 + 168);
                    v84 += 88 * (v87 > v88);
                    if (v87 > v88) {
                      uint64_t v85 = v86;
                    }
                  }
                  sub_21624F408(v82, (long long *)v84);
                  uint64_t v82 = v84;
                  uint64_t v79 = v85;
                }
                while (v85 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                a2 = (long long *)((char *)a2 - 88);
                if ((long long *)v84 == a2)
                {
                  sub_21624F408(v84, (long long *)v103);
                }
                else
                {
                  sub_21624F408(v84, a2);
                  sub_21624F408((uint64_t)a2, (long long *)v103);
                  uint64_t v89 = v84 - a1 + 88;
                  if (v89 >= 89)
                  {
                    unint64_t v90 = (v89 / 0x58uLL - 2) >> 1;
                    int v91 = *(_DWORD *)(v84 + 80);
                    if (*(_DWORD *)(a1 + 88 * v90 + 80) > v91)
                    {
                      long long v92 = *(_OWORD *)v84;
                      uint64_t v113 = *(void *)(v84 + 16);
                      *(_OWORD *)uint64_t v112 = v92;
                      *(void *)(v84 + 8) = 0;
                      *(void *)(v84 + 16) = 0;
                      *(void *)uint64_t v84 = 0;
                      *(_OWORD *)unint64_t v114 = *(_OWORD *)(v84 + 24);
                      uint64_t v115 = *(void *)(v84 + 40);
                      *(void *)(v84 + 24) = 0;
                      *(void *)(v84 + 32) = 0;
                      *(void *)(v84 + 4sub_216195B94(&a9, 0) = 0;
                      *(_OWORD *)long long __p = *(_OWORD *)(v84 + 48);
                      uint64_t v117 = *(void *)(v84 + 64);
                      *(void *)(v84 + 48) = 0;
                      *(void *)(v84 + 56) = 0;
                      *(void *)(v84 + 64) = 0;
                      int v93 = *(_DWORD *)(v84 + 72);
                      __int16 v119 = *(_WORD *)(v84 + 76);
                      int v118 = v93;
                      int v120 = v91;
                      do
                      {
                        uint64_t v94 = v84;
                        uint64_t v84 = a1 + 88 * v90;
                        sub_21624F408(v94, (long long *)v84);
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                      }
                      while (*(_DWORD *)(a1 + 88 * v90 + 80) > v91);
                      sub_21624F408(v84, (long long *)v112);
                      if (__p[0])
                      {
                        __p[1] = __p[0];
                        operator delete(__p[0]);
                      }
                      if (v114[0])
                      {
                        v114[1] = v114[0];
                        operator delete(v114[0]);
                      }
                      if (SHIBYTE(v113) < 0) {
                        operator delete(v112[0]);
                      }
                    }
                  }
                }
                if (v107[0])
                {
                  v107[1] = v107[0];
                  operator delete(v107[0]);
                }
                if (v105[0])
                {
                  v105[1] = v105[0];
                  operator delete(v105[0]);
                }
                if (SHIBYTE(v104) < 0) {
                  operator delete(v103[0]);
                }
              }
              while (v78-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          CFIndex v14 = (long long *)(a1 + 88 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 < 0x2C01)
          {
            sub_21624EDC8((uint64_t)v14, a1, (uint64_t)v9);
          }
          else
          {
            sub_21624EDC8(a1, (uint64_t)v14, (uint64_t)v9);
            uint64_t v15 = 88 * v13;
            sub_21624EDC8(a1 + 88, a1 + v15 - 88, (uint64_t)(a2 - 11));
            sub_21624EDC8(a1 + 176, a1 + 88 + v15, (uint64_t)a2 - 264);
            sub_21624EDC8(a1 + v15 - 88, (uint64_t)v14, a1 + 88 + v15);
            sub_21624F1DC((uint64_t *)a1, v14);
            int v16 = *(_DWORD *)(a1 + 80);
            *(_DWORD *)(a1 + 8sub_216195B94(&a9, 0) = *(_DWORD *)(a1 + v15 + 80);
            *(_DWORD *)(a1 + v15 + 8sub_216195B94(&a9, 0) = v16;
          }
          --a3;
          if (a4) {
            break;
          }
          int v17 = *(_DWORD *)(a1 + 80);
          if (*(_DWORD *)(a1 - 8) > v17) {
            goto LABEL_12;
          }
          long long v35 = *(_OWORD *)a1;
          uint64_t v113 = *(void *)(a1 + 16);
          *(_OWORD *)uint64_t v112 = v35;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 24);
          uint64_t v115 = *(void *)(a1 + 40);
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 4sub_216195B94(&a9, 0) = 0;
          *(_OWORD *)long long __p = *(_OWORD *)(a1 + 48);
          uint64_t v117 = *(void *)(a1 + 64);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          *(void *)(a1 + 64) = 0;
          int v36 = *(_DWORD *)(a1 + 72);
          __int16 v119 = *(_WORD *)(a1 + 76);
          int v118 = v36;
          int v120 = v17;
          if (v17 <= *((_DWORD *)a2 - 2))
          {
            unint64_t v39 = a1 + 88;
            do
            {
              uint64_t v10 = (char *)v39;
              if (v39 >= (unint64_t)a2) {
                break;
              }
              int v40 = *(_DWORD *)(v39 + 80);
              v39 += 88;
            }
            while (v17 <= v40);
          }
          else
          {
            uint64_t v37 = a1;
            do
            {
              uint64_t v10 = (char *)(v37 + 88);
              int v38 = *(_DWORD *)(v37 + 168);
              v37 += 88;
            }
            while (v17 <= v38);
          }
          unint64_t v41 = a2;
          if (v10 < (char *)a2)
          {
            uint64_t v42 = a2;
            do
            {
              unint64_t v41 = (long long *)((char *)v42 - 88);
              int v43 = *((_DWORD *)v42 - 2);
              uint64_t v42 = (long long *)((char *)v42 - 88);
            }
            while (v17 > v43);
          }
          while (v10 < (char *)v41)
          {
            sub_21624F1DC((uint64_t *)v10, v41);
            int v44 = *((_DWORD *)v10 + 20);
            *((_DWORD *)v10 + 2sub_216195B94(&a9, 0) = *((_DWORD *)v41 + 20);
            *((_DWORD *)v41 + 2sub_216195B94(&a9, 0) = v44;
            do
            {
              int v45 = *((_DWORD *)v10 + 42);
              v10 += 88;
            }
            while (v120 <= v45);
            do
            {
              int v46 = *((_DWORD *)v41 - 2);
              unint64_t v41 = (long long *)((char *)v41 - 88);
            }
            while (v120 > v46);
          }
          if (v10 - 88 != (char *)a1) {
            sub_21624F408(a1, (long long *)(v10 - 88));
          }
          sub_21624F408((uint64_t)(v10 - 88), (long long *)v112);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v114[0])
          {
            v114[1] = v114[0];
            operator delete(v114[0]);
          }
          if (SHIBYTE(v113) < 0) {
            operator delete(v112[0]);
          }
          a4 = 0;
        }
        int v17 = *(_DWORD *)(a1 + 80);
LABEL_12:
        uint64_t v18 = 0;
        long long v19 = *(_OWORD *)a1;
        uint64_t v113 = *(void *)(a1 + 16);
        *(_OWORD *)uint64_t v112 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        *(_OWORD *)unint64_t v114 = *(_OWORD *)(a1 + 24);
        uint64_t v115 = *(void *)(a1 + 40);
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 4sub_216195B94(&a9, 0) = 0;
        *(_OWORD *)long long __p = *(_OWORD *)(a1 + 48);
        uint64_t v117 = *(void *)(a1 + 64);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        int v20 = *(_DWORD *)(a1 + 72);
        __int16 v119 = *(_WORD *)(a1 + 76);
        int v118 = v20;
        int v120 = v17;
        do
        {
          int v21 = *(_DWORD *)(a1 + v18 + 168);
          v18 += 88;
        }
        while (v21 > v17);
        unint64_t v22 = a1 + v18;
        uint64_t v23 = a2;
        if (v18 == 88)
        {
          CFArrayRef v26 = a2;
          while (v22 < (unint64_t)v26)
          {
            unint64_t v24 = (long long *)((char *)v26 - 88);
            int v27 = *((_DWORD *)v26 - 2);
            CFArrayRef v26 = (long long *)((char *)v26 - 88);
            if (v27 > v17) {
              goto LABEL_22;
            }
          }
          unint64_t v24 = v26;
        }
        else
        {
          do
          {
            unint64_t v24 = (long long *)((char *)v23 - 88);
            int v25 = *((_DWORD *)v23 - 2);
            uint64_t v23 = (long long *)((char *)v23 - 88);
          }
          while (v25 <= v17);
        }
LABEL_22:
        if (v22 >= (unint64_t)v24)
        {
          std::string::size_type v33 = (long long *)(v22 - 88);
        }
        else
        {
          unint64_t v28 = v22;
          double v29 = v24;
          do
          {
            sub_21624F1DC((uint64_t *)v28, v29);
            int v30 = *(_DWORD *)(v28 + 80);
            *(_DWORD *)(v28 + 8sub_216195B94(&a9, 0) = *((_DWORD *)v29 + 20);
            *((_DWORD *)v29 + 2sub_216195B94(&a9, 0) = v30;
            do
            {
              int v31 = *(_DWORD *)(v28 + 168);
              v28 += 88;
            }
            while (v31 > v120);
            do
            {
              int v32 = *((_DWORD *)v29 - 2);
              double v29 = (long long *)((char *)v29 - 88);
            }
            while (v32 <= v120);
          }
          while (v28 < (unint64_t)v29);
          std::string::size_type v33 = (long long *)(v28 - 88);
        }
        if (v33 != (long long *)a1) {
          sub_21624F408(a1, v33);
        }
        sub_21624F408((uint64_t)v33, (long long *)v112);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v114[0])
        {
          v114[1] = v114[0];
          operator delete(v114[0]);
        }
        if (SHIBYTE(v113) < 0) {
          operator delete(v112[0]);
        }
        if (v22 >= (unint64_t)v24) {
          break;
        }
LABEL_41:
        sub_21624E168(a1, v33, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = (char *)v33 + 88;
      }
      BOOL v34 = sub_21624EEC8(a1, (uint64_t)v33);
      uint64_t v10 = (char *)v33 + 88;
      if (sub_21624EEC8((uint64_t)v33 + 88, (uint64_t)a2)) {
        break;
      }
      if (!v34) {
        goto LABEL_41;
      }
    }
    a2 = v33;
    if (!v34) {
      continue;
    }
    break;
  }
}

void sub_21624EDC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (int *)(a2 + 80);
  int v6 = *(_DWORD *)(a2 + 80);
  CFStringRef v8 = (int *)(a1 + 80);
  uint64_t v10 = (int *)(a3 + 80);
  int v9 = *(_DWORD *)(a3 + 80);
  if (v6 > *(_DWORD *)(a1 + 80))
  {
    if (v9 <= v6)
    {
      sub_21624F1DC((uint64_t *)a1, (long long *)a2);
      int v12 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 8sub_216195B94(&a9, 0) = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a2 + 8sub_216195B94(&a9, 0) = v12;
      if (*v10 <= v12) {
        return;
      }
      sub_21624F1DC((uint64_t *)a2, (long long *)a3);
      CFStringRef v8 = v7;
    }
    else
    {
      sub_21624F1DC((uint64_t *)a1, (long long *)a3);
    }
    uint64_t v7 = v10;
    goto LABEL_10;
  }
  if (v9 > v6)
  {
    sub_21624F1DC((uint64_t *)a2, (long long *)a3);
    int v11 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 8sub_216195B94(&a9, 0) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a3 + 8sub_216195B94(&a9, 0) = v11;
    if (*(_DWORD *)(a2 + 80) > *v8)
    {
      sub_21624F1DC((uint64_t *)a1, (long long *)a2);
LABEL_10:
      int v13 = *v8;
      *CFStringRef v8 = *v7;
      *uint64_t v7 = v13;
    }
  }
}

BOOL sub_21624EEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x2E8BA2E8BA2E8BA3 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 80))
      {
        sub_21624F1DC((uint64_t *)a1, (long long *)(a2 - 88));
        int v6 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)(a1 + 8sub_216195B94(&a9, 0) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
        return 1;
      }
      return result;
    case 3:
      sub_21624EDC8(a1, a1 + 88, a2 - 88);
      return 1;
    case 4:
      sub_21624F34C(a1, a1 + 88, a1 + 176, a2 - 88);
      return 1;
    case 5:
      sub_21624F34C(a1, a1 + 88, a1 + 176, a1 + 264);
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 344))
      {
        sub_21624F1DC((uint64_t *)(a1 + 264), (long long *)(a2 - 88));
        int v16 = *(_DWORD *)(a1 + 344);
        *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v16;
        if (*(_DWORD *)(a1 + 344) > *(_DWORD *)(a1 + 256))
        {
          sub_21624F1DC((uint64_t *)(a1 + 176), (long long *)(a1 + 264));
          int v17 = *(_DWORD *)(a1 + 256);
          int v18 = *(_DWORD *)(a1 + 344);
          *(_DWORD *)(a1 + 256) = v18;
          *(_DWORD *)(a1 + 344) = v17;
          if (v18 > *(_DWORD *)(a1 + 168))
          {
            sub_21624F1DC((uint64_t *)(a1 + 88), (long long *)(a1 + 176));
            int v19 = *(_DWORD *)(a1 + 168);
            int v20 = *(_DWORD *)(a1 + 256);
            *(_DWORD *)(a1 + 168) = v20;
            *(_DWORD *)(a1 + 256) = v19;
            if (v20 > *(_DWORD *)(a1 + 80))
            {
              sub_21624F1DC((uint64_t *)a1, (long long *)(a1 + 88));
              int v21 = *(_DWORD *)(a1 + 80);
              *(_DWORD *)(a1 + 8sub_216195B94(&a9, 0) = *(_DWORD *)(a1 + 168);
              *(_DWORD *)(a1 + 168) = v21;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 176;
      sub_21624EDC8(a1, a1 + 88, a1 + 176);
      uint64_t v8 = a1 + 264;
      if (a1 + 264 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    int v11 = *(_DWORD *)(v8 + 80);
    if (v11 > *(_DWORD *)(v7 + 80))
    {
      *(_OWORD *)unint64_t v22 = *(_OWORD *)v8;
      uint64_t v23 = *(void *)(v8 + 16);
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(_OWORD *)unint64_t v24 = *(_OWORD *)(v8 + 24);
      uint64_t v25 = *(void *)(v8 + 40);
      *(void *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 4sub_216195B94(&a9, 0) = 0;
      *(_OWORD *)long long __p = *(_OWORD *)(v8 + 48);
      uint64_t v27 = *(void *)(v8 + 64);
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      *(void *)(v8 + 48) = 0;
      int v12 = *(_DWORD *)(v8 + 72);
      __int16 v29 = *(_WORD *)(v8 + 76);
      int v28 = v12;
      uint64_t v13 = v9;
      int v30 = v11;
      while (1)
      {
        sub_21624F408(a1 + v13 + 264, (long long *)(a1 + v13 + 176));
        if (v13 == -176) {
          break;
        }
        int v14 = *(_DWORD *)(a1 + v13 + 168);
        v13 -= 88;
        if (v30 <= v14)
        {
          uint64_t v15 = a1 + v13 + 264;
          goto LABEL_13;
        }
      }
      uint64_t v15 = a1;
LABEL_13:
      sub_21624F408(v15, (long long *)v22);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(v22[0]);
      }
      if (++v10 == 8) {
        return v8 + 88 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 88;
    v8 += 88;
    if (v8 == a2) {
      return 1;
    }
  }
}

__n128 sub_21624F1DC(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  *(void *)int v19 = a1[1];
  *(void *)&v19[7] = *(uint64_t *)((char *)a1 + 15);
  char v5 = *((unsigned char *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v7 = *(_OWORD *)(a1 + 3);
  int v6 = a1 + 3;
  uint64_t v8 = a1[5];
  *int v6 = 0;
  a1[4] = 0;
  a1[5] = 0;
  long long v15 = v7;
  __n128 v16 = *((__n128 *)a1 + 3);
  uint64_t v9 = a1[8];
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  __int16 v18 = *((_WORD *)a1 + 38);
  int v17 = *((_DWORD *)a1 + 18);
  long long v10 = *a2;
  a1[2] = *((void *)a2 + 2);
  *(_OWORD *)a1 = v10;
  *((unsigned char *)a2 + 23) = 0;
  *(_WORD *)a2 = 0;
  sub_2161254AC((uint64_t)v6, (__n128 *)((char *)a2 + 24));
  sub_2161254AC((uint64_t)(a1 + 6), (__n128 *)a2 + 3);
  int v11 = *((_DWORD *)a2 + 18);
  *((_WORD *)a1 + 38) = *((_WORD *)a2 + 38);
  *((_DWORD *)a1 + 18) = v11;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v4;
  *((void *)a2 + 1) = *(void *)v19;
  *(void *)((char *)a2 + 15) = *(void *)&v19[7];
  *((unsigned char *)a2 + 23) = v5;
  int v12 = (void *)*((void *)a2 + 3);
  if (v12)
  {
    *((void *)a2 + 4) = v12;
    operator delete(v12);
  }
  *(long long *)((char *)a2 + 24) = v15;
  *((void *)a2 + 5) = v8;
  uint64_t v13 = (void *)*((void *)a2 + 6);
  if (v13)
  {
    *((void *)a2 + 7) = v13;
    operator delete(v13);
  }
  __n128 result = v16;
  a2[3] = (__int128)v16;
  *((void *)a2 + 8) = v9;
  *((_DWORD *)a2 + 18) = v17;
  *((_WORD *)a2 + 38) = v18;
  return result;
}

void sub_21624F34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_21624EDC8(a1, a2, a3);
  if (*(_DWORD *)(a4 + 80) > *(_DWORD *)(a3 + 80))
  {
    sub_21624F1DC((uint64_t *)a3, (long long *)a4);
    int v8 = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a3 + 8sub_216195B94(&a9, 0) = *(_DWORD *)(a4 + 80);
    *(_DWORD *)(a4 + 8sub_216195B94(&a9, 0) = v8;
    if (*(_DWORD *)(a3 + 80) > *(_DWORD *)(a2 + 80))
    {
      sub_21624F1DC((uint64_t *)a2, (long long *)a3);
      int v9 = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a2 + 8sub_216195B94(&a9, 0) = *(_DWORD *)(a3 + 80);
      *(_DWORD *)(a3 + 8sub_216195B94(&a9, 0) = v9;
      if (*(_DWORD *)(a2 + 80) > *(_DWORD *)(a1 + 80))
      {
        sub_21624F1DC((uint64_t *)a1, (long long *)a2);
        int v10 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)(a1 + 8sub_216195B94(&a9, 0) = *(_DWORD *)(a2 + 80);
        *(_DWORD *)(a2 + 8sub_216195B94(&a9, 0) = v10;
      }
    }
  }
}

uint64_t sub_21624F408(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(_WORD *)a2 = 0;
  sub_2161254AC(a1 + 24, (__n128 *)((char *)a2 + 24));
  sub_2161254AC(a1 + 48, (__n128 *)a2 + 3);
  int v5 = *((_DWORD *)a2 + 18);
  *(_WORD *)(a1 + 76) = *((_WORD *)a2 + 38);
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 8sub_216195B94(&a9, 0) = *((_DWORD *)a2 + 20);
  return a1;
}

void sub_21624F488(void ***a1)
{
  uint64_t v1 = *a1;
  CFURLRef v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_2161981B8(v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21624F510()
{
}

void *sub_21624F524()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C6C8018;
  return result;
}

void sub_21624F55C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C8018;
}

BOOL sub_21624F584(uint64_t a1, unsigned __int16 *a2)
{
  return *a2 - 3585 < 0x5B;
}

uint64_t sub_21624F598(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC8F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21624F5D8()
{
  return &unk_26C6BC8F0;
}

void *sub_21624F5E4(void *a1)
{
  CFURLRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

const void **sub_21624F668(const void ***a1, const void **a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216273404(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21624F6BC()
{
}

__n128 sub_21624F6D0(uint64_t a1)
{
  CFURLRef v2 = (char *)operator new(0x28uLL);
  *(void *)CFURLRef v2 = &unk_26C6C7FC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_21624F724(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C7FC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21624F75C(uint64_t a1, void **a2, uint64_t a3, double *a4)
{
  int v5 = *a2;
  double v6 = *a4;
  uint64_t v7 = *(void *)(a1 + 8);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  int v9 = *(const void **)(*v5 + 112);
  if (v9
    && CFStringGetLength(*(CFStringRef *)(*v5 + 112))
    && (sub_21624D830(v7, (uint64_t)v9, *(_DWORD *)(*v5 + 104)) & 1) == 0)
  {
    int v10 = *(_DWORD *)(*v5 + 104);
    CFArrayAppendValue(Mutable, v9);
    BOOL v11 = (v10 & 0x3800002) != 0;
    while (1)
    {
      int v5 = (void *)v5[1];
      if (!v5 || ((*(uint64_t (**)(void))(*(void *)*v5 + 24))() & 1) != 0) {
        break;
      }
      int v12 = *(const void **)(*v5 + 112);
      if (!v12
        || !CFStringGetLength(*(CFStringRef *)(*v5 + 112))
        || (sub_21624D830(v7, (uint64_t)v12, *(_DWORD *)(*v5 + 104)) & 1) != 0)
      {
        goto LABEL_4;
      }
      BOOL v11 = v11 || (*(_DWORD *)(*v5 + 104) & 0x3800002) != 0;
      CFArrayAppendValue(Mutable, v12);
    }
    if (CFArrayGetCount(Mutable))
    {
      uint64_t v13 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
      CFIndex Count = CFArrayGetCount(Mutable);
      while (Count > 0)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, --Count);
        CFArrayAppendValue(v13, ValueAtIndex);
      }
      CFArrayAppendValue(**(CFMutableArrayRef **)(a1 + 16), v13);
      uint64_t v16 = *(void *)(a1 + 24);
      BOOL v32 = v11;
      sub_21624FAA8(v16, &v32);
      uint64_t v17 = *(void *)(a1 + 32);
      __int16 v18 = *(float **)(v17 + 8);
      unint64_t v19 = *(void *)(v17 + 16);
      if ((unint64_t)v18 >= v19)
      {
        unint64_t v22 = *(float **)v17;
        uint64_t v23 = ((uint64_t)v18 - *(void *)v17) >> 2;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v25 = v19 - (void)v22;
        if (v25 >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          uint64_t v27 = (char *)sub_2161129B4(v17 + 16, v26);
          unint64_t v22 = *(float **)v17;
          __int16 v18 = *(float **)(v17 + 8);
        }
        else
        {
          uint64_t v27 = 0;
        }
        int v28 = (float *)&v27[4 * v23];
        __int16 v29 = &v27[4 * v26];
        float v30 = v6;
        *int v28 = v30;
        int v21 = v28 + 1;
        while (v18 != v22)
        {
          int v31 = *((_DWORD *)v18-- - 1);
          *((_DWORD *)v28-- - 1) = v31;
        }
        *(void *)uint64_t v17 = v28;
        *(void *)(v17 + 8) = v21;
        *(void *)(v17 + 16) = v29;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        float v20 = v6;
        *__int16 v18 = v20;
        int v21 = v18 + 1;
      }
      *(void *)(v17 + 8) = v21;
      if (v13) {
        CFRelease(v13);
      }
    }
  }
LABEL_4:
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_21624FA0C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21624FA5C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC8E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21624FA9C()
{
  return &unk_26C6BC8E0;
}

void sub_21624FAA8(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      sub_21610CB04();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_21624FB50((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  int v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void sub_21624FB50(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_21610CB04();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    sub_21612A378(&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    int v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    sub_21624FC10(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_21624FBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21624FC10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (v4)
  {
    unint64_t v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v6 = v5 - 1;
  }
  unint64_t v7 = v6 >> 6;
  if (v5 >= 0x41) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  *(void *)(*a1 + 8 * v8) = 0;
LABEL_9:
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)a3;
  int v11 = *(_DWORD *)(a3 + 8);
  uint64_t v12 = *a1 + 8 * (v4 >> 6);
  uint64_t v18 = *(void *)a2;
  int v19 = v9;
  uint64_t v16 = v10;
  int v17 = v11;
  uint64_t v14 = v12;
  int v15 = v4 & 0x3F;
  sub_21624FCB8(&v18, &v16, &v14, (uint64_t)&v13);
}

void sub_21624FCB8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  sub_21624FD48((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_21624FD48(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (int i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void sub_21624FE1C()
{
}

__n128 sub_21624FE30(uint64_t a1)
{
  CFURLRef v2 = (char *)operator new(0x18uLL);
  *(void *)CFURLRef v2 = &unk_26C6C8C20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21624FE7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8C20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21624FEAC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v24 = *a4;
  uint64_t v6 = (__int16 **)sub_216222F20(a3, off_26797C588);
  sub_2162500BC(&v22, *v6, v6[1], v6[1] - *v6);
  uint64_t v7 = HIBYTE(v23);
  if (v23 < 0) {
    uint64_t v7 = *((void *)&v22 + 1);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (v7 == *(void *)(v8 + 8))
  {
    if (v23 >= 0) {
      uint64_t v9 = &v22;
    }
    else {
      uint64_t v9 = (long long *)v22;
    }
    __int16 v10 = memcmp(v9, *(const void **)v8, 2 * v7) != 0;
  }
  else
  {
    __int16 v10 = 1;
  }
  int v11 = *(_DWORD *)(a2 + 4);
  uint64_t v16 = v23;
  *(_OWORD *)int v15 = v22;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  *(_OWORD *)int v17 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v19 = 0u;
  int v20 = v11;
  __int16 v21 = v10;
  int v12 = *(uint64_t **)(a1 + 8);
  unint64_t v13 = v12[1];
  if (v13 >= v12[2])
  {
    uint64_t v14 = sub_21625015C(v12, (long long *)v15, &v24);
  }
  else
  {
    sub_216250284((void *)v12[1], (long long *)v15, &v24);
    uint64_t v14 = v13 + 88;
    v12[1] = v13 + 88;
  }
  v12[1] = v14;
  if (__p[1])
  {
    *(void **)&long long v19 = __p[1];
    operator delete(__p[1]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
}

void sub_216250014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v19 - 41) < 0) {
    operator delete(*(void **)(v19 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216250070(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162500B0()
{
  return &unk_26C6BCB20;
}

void *sub_2162500BC(void *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_21617FB50();
  }
  if (a4 > 0xA)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a4 | 3) != 0xB) {
      uint64_t v8 = a4 | 3;
    }
    __n128 result = sub_21610FD44((uint64_t)result, v8 + 1);
    v4[1] = a4;
    void v4[2] = v9 | 0x8000000000000000;
    *unint64_t v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    __int16 v10 = *a2++;
    *(_WORD *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 2);
  }
  *(_WORD *)unint64_t v4 = 0;
  return result;
}

uint64_t sub_21625015C(uint64_t *a1, long long *a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x1745D1745D1745DLL) {
    unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    int v12 = (char *)sub_2162503E0(v9, v11);
  }
  else {
    int v12 = 0;
  }
  int v15 = v12;
  uint64_t v16 = &v12[88 * v5];
  uint64_t v18 = &v12[88 * v11];
  sub_216250284(v16, a2, a3);
  int v17 = v16 + 88;
  sub_216250368(a1, &v15);
  uint64_t v13 = a1[1];
  sub_2162504D0((uint64_t)&v15);
  return v13;
}

void sub_216250270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162504D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216250284(void *__dst, long long *a2, _DWORD *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_2161984AC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v6;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_216198430(__dst + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  __dst[6] = 0;
  __dst[7] = 0;
  __dst[8] = 0;
  sub_216182F50(__dst + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 1);
  int v7 = *((_DWORD *)a2 + 18);
  *((_WORD *)__dst + 38) = *((_WORD *)a2 + 38);
  *((_DWORD *)__dst + 18) = v7;
  *((_DWORD *)__dst + 2sub_216195B94(&a9, 0) = *a3;
  return __dst;
}

void sub_216250334(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216250368(uint64_t *a1, void *a2)
{
  sub_21625042C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *sub_2162503E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_2160FFA74();
  }
  return operator new(88 * a2);
}

__n128 sub_21625042C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a7 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 88);
      *(void *)(v9 - 72) = *(void *)(a3 + v7 - 72);
      *(_OWORD *)(v9 - 88) = v10;
      *(void *)(v8 - 8sub_216195B94(&a9, 0) = 0;
      *(void *)(v8 - 72) = 0;
      *(void *)(v8 - 88) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(_OWORD *)(v9 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v9 - 48) = *(void *)(a3 + v7 - 48);
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v9 - 4sub_216195B94(&a9, 0) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 40);
      *(__n128 *)(v9 - 4sub_216195B94(&a9, 0) = result;
      *(void *)(v9 - 24) = *(void *)(a3 + v7 - 24);
      *(void *)(v8 - 4sub_216195B94(&a9, 0) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      int v12 = *(_DWORD *)(a3 + v7 - 16);
      *(_WORD *)(v9 - 12) = *(_WORD *)(a3 + v7 - 12);
      *(_DWORD *)(v9 - 16) = v12;
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 88;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_2162504D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    sub_2161981B8(i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_216250520(void *a1)
{
  CFURLRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2162505A8()
{
}

__n128 sub_2162505BC(uint64_t a1)
{
  CFURLRef v2 = (char *)operator new(0x28uLL);
  *(void *)CFURLRef v2 = &unk_26C6C8CD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_216250610(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8CD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216250648(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (**(int **)(a1 + 32) >= 2) {
    *a4 = 1;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 == *(void *)(v4 + 8)) {
    memcmp(*(const void **)(a2 + 16), *(const void **)v4, 2 * v5);
  }
  sub_216197098();
}

void sub_216250868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2162508EC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21625092C()
{
  return &unk_26C6BCB40;
}

void *sub_216250938(void *a1)
{
  CFURLRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2162509C0()
{
}

__n128 sub_2162509D4(uint64_t a1)
{
  CFURLRef v2 = (char *)operator new(0x28uLL);
  *(void *)CFURLRef v2 = &unk_26C6C8C78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_216250A28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216250A60(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (**(int **)(a1 + 32) >= 2) {
    *a4 = 1;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 == *(void *)(v4 + 8)) {
    memcmp(*(const void **)(a2 + 16), *(const void **)v4, 2 * v5);
  }
  sub_216197098();
}

void sub_216250C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216250D04(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216250D44()
{
  return &unk_26C6BCB30;
}

void sub_216250D54()
{
}

__n128 sub_216250D68(uint64_t a1)
{
  CFURLRef v2 = (char *)operator new(0x20uLL);
  *(void *)CFURLRef v2 = &unk_26C6C8D28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216250DBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8D28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216250DF4(uint64_t a1, uint64_t a2)
{
  CFURLRef v2 = *(void **)(a1 + 16);
  uint64_t v3 = v2[5] - 1;
  if (!*v2) {
    uint64_t v3 = 0;
  }
  if (*(void *)(a2 + 24) == v3) {
    memcmp(*(const void **)(a2 + 16), (const void *)(*v2 + 2), 2 * v3);
  }
  sub_216197098();
}

void sub_216251008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21625108C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162510CC()
{
  return &unk_26C6BCB50;
}

void sub_2162510DC()
{
}

__n128 sub_2162510F0(uint64_t a1)
{
  CFURLRef v2 = (char *)operator new(0x20uLL);
  *(void *)CFURLRef v2 = &unk_26C6C8D80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216251144(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8D80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21625117C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3 == *(void *)(v2 + 8)) {
    memcmp(*(const void **)(a2 + 16), *(const void **)v2, 2 * v3);
  }
  sub_216197098();
}

void sub_216251388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21625140C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21625144C()
{
  return &unk_26C6BCB60;
}

void sub_2162514F0()
{
  uint64_t v0 = (uint64_t *)sub_2162D8C20();
  uint64_t v1 = (char *)sub_2162D8D64(v0, 3uLL, off_26797C900[0], off_26797C8D8[0], 0);
  int v2 = v1[23];
  if (v2 >= 0) {
    uint64_t v3 = (const UInt8 *)v1;
  }
  else {
    uint64_t v3 = *(const UInt8 **)v1;
  }
  if (v2 >= 0) {
    CFIndex v4 = v1[23];
  }
  else {
    CFIndex v4 = *((void *)v1 + 1);
  }
  CFURLRef v5 = CFURLCreateFromFileSystemRepresentation(0, v3, v4, 0);
  qword_26797DE18 = [MecabraWordProperties informationDictionaryAtPath:v6];
  if (v5)
  {
    CFRelease(v5);
  }
}

void sub_2162515DC()
{
  uint64_t v0 = (uint64_t *)sub_2162D8C20();
  uint64_t v1 = (char *)sub_2162D8D64(v0, 3uLL, off_26797C900[0], off_26797C8E0[0], 0);
  int v2 = v1[23];
  if (v2 >= 0) {
    uint64_t v3 = (const UInt8 *)v1;
  }
  else {
    uint64_t v3 = *(const UInt8 **)v1;
  }
  if (v2 >= 0) {
    CFIndex v4 = v1[23];
  }
  else {
    CFIndex v4 = *((void *)v1 + 1);
  }
  CFURLRef v5 = CFURLCreateFromFileSystemRepresentation(0, v3, v4, 0);
  qword_26797DE28 = [MecabraWordProperties informationDictionaryAtPath:v6];
  if (v5)
  {
    CFRelease(v5);
  }
}

void sub_2162517DC()
{
  uint64_t v0 = (uint64_t *)sub_2162D8C20();
  uint64_t v1 = (char *)sub_2162D8D64(v0, 3uLL, off_26797C900[0], off_26797C8D0[0], 0);
  int v2 = v1[23];
  if (v2 >= 0) {
    uint64_t v3 = (const UInt8 *)v1;
  }
  else {
    uint64_t v3 = *(const UInt8 **)v1;
  }
  if (v2 >= 0) {
    CFIndex v4 = v1[23];
  }
  else {
    CFIndex v4 = *((void *)v1 + 1);
  }
  CFURLRef v7 = CFURLCreateFromFileSystemRepresentation(0, v3, v4, 0);
  id v5 = objc_alloc(MEMORY[0x263EFF8C0]);
  qword_26797DE38 = [v5 initWithContentsOfURL:v6];
}

uint64_t sub_2162527D0(void *a1, uint64_t a2)
{
  sub_21619EFA8(a2, "dicdir", (uint64_t)v9);
  sub_21610B834(__p, "char.bin");
  sub_2161CB960((uint64_t)v9, (uint64_t)__p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v8;
  }
  else {
    uint64_t v3 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  uint64_t v4 = sub_2162528CC(a1, (char *)v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  return v4;
}

void sub_216252884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162528CC(void *a1, char *a2)
{
  if ((sub_21617E494((uint64_t)(a1 + 1), a2, "r") & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(a1[49] - 24) + 392), 0);
    uint64_t v21 = sub_216129E78(a1 + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/char_property.cpp", 70);
    sub_216129E78(v21, (uint64_t)"(", 1);
    long long v22 = (void *)std::ostream::operator<<();
    uint64_t v23 = sub_216129E78(v22, (uint64_t)") [", 3);
    int v24 = sub_216129E78(v23, (uint64_t)"cmmap_.open(filename, \"r\")", 26);
    uint64_t v25 = "] ";
    size_t v26 = 2;
LABEL_25:
    sub_216129E78(v24, (uint64_t)v25, v26);
    return 0;
  }
  uint64_t v4 = (int *)a1[2];
  int v5 = *v4;
  if (((32 * *v4) | 4u) + 262140 != a1[3])
  {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(a1[49] - 24) + 392), 0);
    uint64_t v27 = sub_216129E78(a1 + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/char_property.cpp", 70);
    sub_216129E78(v27, (uint64_t)"(", 1);
    int v28 = (void *)std::ostream::operator<<();
    __int16 v29 = sub_216129E78(v28, (uint64_t)") [", 3);
    float v30 = sub_216129E78(v29, (uint64_t)"fsize == cmmap_.size()", 22);
    int v31 = sub_216129E78(v30, (uint64_t)"] ", 2);
    BOOL v32 = sub_216129E78(v31, (uint64_t)"invalid file size: ", 19);
    size_t v26 = strlen(a2);
    int v24 = v32;
    uint64_t v25 = a2;
    goto LABEL_25;
  }
  uint64_t v6 = v4 + 1;
  char v7 = (char *)a1[44];
  a1[45] = v7;
  if (v5)
  {
    int v8 = 0;
    uint64_t v9 = (char **)(a1 + 44);
    char v10 = a1 + 46;
    do
    {
      if ((unint64_t)v7 >= *v10)
      {
        uint64_t v11 = (v7 - *v9) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v12 = *v10 - (void)*v9;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          int v15 = (char *)sub_2160FFAA8((uint64_t)(a1 + 46), v14);
        }
        else {
          int v15 = 0;
        }
        uint64_t v16 = &v15[8 * v11];
        *(void *)uint64_t v16 = v6;
        char v7 = v16 + 8;
        uint64_t v18 = (char *)a1[44];
        int v17 = (char *)a1[45];
        if (v17 != v18)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          int v17 = *v9;
        }
        a1[44] = v16;
        a1[45] = v7;
        a1[46] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)char v7 = v6;
        v7 += 8;
      }
      v6 += 8;
      a1[45] = v7;
      ++v8;
    }
    while (v8 != v5);
  }
  a1[47] = v6;
  return 1;
}

uint64_t (*sub_216252B5C(uint64_t a1))(void *a1, char *a2, uint64_t a3)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 64);
  if (v2 && ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2) & 1) == 0)
  {
    if (**(unsigned char **)(a1 + 32)) {
      return sub_216252C28;
    }
    BOOL v3 = (*(unsigned char *)(*(void *)(a1 + 16) + 2) & 0x80) == 0;
    uint64_t v4 = sub_216252C34;
    int v5 = sub_216252D40;
  }
  else
  {
    BOOL v3 = (*(unsigned char *)(*(void *)(a1 + 16) + 2) & 0x80) == 0;
    uint64_t v4 = sub_216252D4C;
    int v5 = sub_21625304C;
  }
  if (v3) {
    return v5;
  }
  else {
    return v4;
  }
}

uint64_t sub_216252C28(void *a1, char *a2, uint64_t a3)
{
  return sub_216253814(a1, a2, a3, 1.05);
}

uint64_t sub_216252C34(void *a1, char *a2, uint64_t a3)
{
  uint64_t result = sub_2162539D8(a1, a2, a3);
  if (!result)
  {
    int v8 = sub_2161F3B4C(a1, v6, v7);
    uint64_t v11 = sub_2161F3B4C(a2, v9, v10);
    int v12 = (*(uint64_t (**)(void *))(*(void *)v8 + 112))(v8);
    if (v12 >= (*(int (**)(void *))(*(void *)v11 + 112))(v11))
    {
      int v13 = (*(uint64_t (**)(void *))(*(void *)v8 + 112))(v8);
      return v13 > (*(int (**)(void *))(*(void *)v11 + 112))(v11);
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t sub_216252D40(void *a1, char *a2, uint64_t a3)
{
  return sub_216253814(a1, a2, a3, 1.15);
}

uint64_t sub_216252D4C(void *a1, char *a2, uint64_t a3)
{
  int v5 = sub_2161F3B4C(a1, a2, a3);
  char v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 104))(v5);
  char v7 = (*(uint64_t (**)(void *))(*(void *)v5 + 104))(v5);
  CFStringRef v8 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v5 + 24))(v5);
  CFIndex Length = CFStringGetLength(v8);
  if ((v7 & 4) != 0
    && ((uint64_t v12 = Length, (*(unsigned int (**)(void *))(*(void *)v5 + 200))(v5))
      ? (BOOL v13 = v12 < 5)
      : (BOOL v13 = 0),
        v13))
  {
    unsigned int v15 = 2;
  }
  else
  {
    if ((v6 & 0x10) != 0) {
      int v14 = 1;
    }
    else {
      int v14 = 2;
    }
    if ((v6 & 4) != 0) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = v14;
    }
  }
  uint64_t v16 = sub_2161F3B4C(a2, v10, v11);
  char v17 = (*(uint64_t (**)(void *))(*(void *)v16 + 104))(v16);
  char v18 = (*(uint64_t (**)(void *))(*(void *)v16 + 104))(v16);
  CFStringRef v19 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v16 + 24))(v16);
  CFIndex v20 = CFStringGetLength(v19);
  if ((v18 & 4) != 0
    && ((uint64_t v22 = v20, (*(unsigned int (**)(void *))(*(void *)v16 + 200))(v16))
      ? (BOOL v23 = v22 < 5)
      : (BOOL v23 = 0),
        v23))
  {
    unsigned int v24 = 2;
  }
  else if ((v17 & 4) != 0)
  {
    unsigned int v24 = 0;
  }
  else if ((v17 & 0x10) != 0)
  {
    unsigned int v24 = 1;
  }
  else
  {
    unsigned int v24 = 2;
  }
  if (v15 < v24) {
    return -1;
  }
  if (v15 > v24) {
    return 1;
  }
  uint64_t result = sub_2162539D8(a1, a2, v21);
  if (!result)
  {
    int v28 = sub_2161F3B4C(a1, v26, v27);
    int v31 = sub_2161F3B4C(a2, v29, v30);
    int v32 = (*(uint64_t (**)(void *))(*(void *)v28 + 112))(v28);
    if (v32 < (*(int (**)(void *))(*(void *)v31 + 112))(v31)) {
      return -1;
    }
    int v33 = (*(uint64_t (**)(void *))(*(void *)v28 + 112))(v28);
    return v33 > (*(int (**)(void *))(*(void *)v31 + 112))(v31);
  }
  return result;
}

uint64_t sub_21625304C(void *a1, char *a2, uint64_t a3)
{
  int v5 = sub_2161F3B4C(a1, a2, a3);
  char v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 104))(v5);
  if ((v6 & 0x10) != 0) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  if ((v6 & 4) != 0) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = sub_2161F3B4C(a2, v7, v8);
  char v12 = (*(uint64_t (**)(void *))(*(void *)v11 + 104))(v11);
  if ((v12 & 0x10) != 0) {
    unsigned int v14 = 1;
  }
  else {
    unsigned int v14 = 2;
  }
  if ((v12 & 4) != 0) {
    unsigned int v14 = 0;
  }
  if (v10 < v14) {
    return -1;
  }
  if (v10 > v14) {
    return 1;
  }

  return sub_216253814(a1, a2, v13, 1.15);
}

uint64_t (*sub_216253138(uint64_t a1))(void *a1, char *a2, uint64_t a3)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) + 64);
  if (!v1) {
    return sub_21625304C;
  }
  if ((*(unsigned int (**)(void))(*(void *)v1 + 24))(*(void *)(*(void *)(a1 + 24) + 64))) {
    return sub_21625304C;
  }
  return sub_216252D40;
}

uint64_t (*sub_2162531B8(uint64_t a1))(void *a1, char *a2, uint64_t a3)
{
  if ((*(unsigned char *)(*(void *)(a1 + 24) + 25) & 0x40) != 0) {
    return sub_2162531E8;
  }
  else {
    return sub_2162532D0;
  }
}

uint64_t sub_2162531E8(void *a1, char *a2, uint64_t a3)
{
  int v5 = sub_2161F3B4C(a1, a2, a3);
  char v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 104))(v5);
  if ((v6 & 0x10) != 0) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  if ((v6 & 4) != 0) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = sub_2161F3B4C(a2, v7, v8);
  char v12 = (*(uint64_t (**)(void *))(*(void *)v11 + 104))(v11);
  if ((v12 & 0x10) != 0) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = 2;
  }
  if ((v12 & 4) != 0) {
    unsigned int v13 = 0;
  }
  if (v10 < v13) {
    return -1;
  }
  if (v10 > v13) {
    return 1;
  }

  return sub_2162532D0(a1, a2, 0);
}

uint64_t sub_2162532D0(void *a1, char *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v5 = sub_2161F3B4C(a1, a2, a3);
  uint64_t v8 = sub_2161F3B4C(a2, v6, v7);
  CFStringRef Length = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v5 + 56))(v5);
  CFStringRef v12 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v8 + 56))(v8);
  if (!Length && (unsigned int v13 = sub_2162D1CE4(3u), os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)))
  {
    uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v5 + 24))(v5);
    int v25 = 138412290;
    uint64_t v26 = v23;
    _os_log_fault_impl(&dword_2160F5000, v13, OS_LOG_TYPE_FAULT, "Failed to create analysis string for [%@].", (uint8_t *)&v25, 0xCu);
    if (v12) {
      goto LABEL_6;
    }
  }
  else if (v12)
  {
    goto LABEL_6;
  }
  unsigned int v14 = sub_2162D1CE4(3u);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
  {
    uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v8 + 24))(v8);
    int v25 = 138412290;
    uint64_t v26 = v24;
    _os_log_fault_impl(&dword_2160F5000, v14, OS_LOG_TYPE_FAULT, "Failed to create analysis string for [%@].", (uint8_t *)&v25, 0xCu);
  }
LABEL_6:
  if (Length) {
    CFStringRef Length = (const __CFString *)CFStringGetLength(Length);
  }
  if (v12) {
    CFIndex v15 = CFStringGetLength(v12);
  }
  else {
    CFIndex v15 = 0;
  }
  if (Length == (const __CFString *)v15)
  {
    uint64_t v16 = sub_2161F3B4C(a1, v10, v11);
    CFStringRef v19 = sub_2161F3B4C(a2, v17, v18);
    int v20 = (*(uint64_t (**)(void *))(*(void *)v16 + 112))(v16);
    if (v20 >= (*(int (**)(void *))(*(void *)v19 + 112))(v19))
    {
      int v22 = (*(uint64_t (**)(void *))(*(void *)v16 + 112))(v16);
      return v22 > (*(int (**)(void *))(*(void *)v19 + 112))(v19);
    }
    else
    {
      return -1;
    }
  }
  else if ((uint64_t)Length < v15)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

uint64_t (*sub_2162535B8(void *a1))(void *a1, char *a2, uint64_t a3)
{
  uint64_t v1 = sub_2162531E8;
  if ((*(unsigned char *)(a1[3] + 25) & 0x40) == 0)
  {
    if (CFArrayGetCount(*(CFArrayRef *)(*a1 + 8))) {
      return sub_21625362C;
    }
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1[1] + 8));
    uint64_t v1 = sub_2162531E8;
    if (Count) {
      return sub_21625362C;
    }
  }
  return v1;
}

uint64_t sub_21625362C(void *a1, char *a2, uint64_t a3)
{
  int v5 = sub_2161F3B4C(a1, a2, a3);
  char v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 104))(v5);
  if ((v6 & 0x10) != 0) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  if ((v6 & 4) != 0) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = sub_2161F3B4C(a2, v7, v8);
  char v12 = (*(uint64_t (**)(void *))(*(void *)v11 + 104))(v11);
  if ((v12 & 0x10) != 0) {
    unsigned int v15 = 1;
  }
  else {
    unsigned int v15 = 2;
  }
  if ((v12 & 4) != 0) {
    unsigned int v15 = 0;
  }
  if (v10 < v15) {
    return -1;
  }
  if (v10 > v15) {
    return 1;
  }
  char v17 = sub_2161F3B4C(a1, v13, v14);
  int v20 = sub_2161F3B4C(a2, v18, v19);
  int v21 = (*(uint64_t (**)(void *))(*(void *)v17 + 112))(v17);
  if (v21 < (*(int (**)(void *))(*(void *)v20 + 112))(v20)) {
    return -1;
  }
  int v22 = (*(uint64_t (**)(void *))(*(void *)v17 + 112))(v17);
  return v22 > (*(int (**)(void *))(*(void *)v20 + 112))(v20);
}

uint64_t (*sub_2162537BC())(void *a1, char *a2, uint64_t a3)
{
  return sub_2162537D0;
}

uint64_t sub_2162537D0(void *a1, char *a2, uint64_t a3)
{
  CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(a1, a2, a3);
  CFIndex Length = CFStringGetLength(Surface);
  CFStringRef v8 = (const __CFString *)MecabraCandidateGetSurface(a2, v6, v7);
  CFIndex v9 = CFStringGetLength(v8);
  if (Length > v9) {
    return -1;
  }
  else {
    return Length < v9;
  }
}

uint64_t sub_216253814(void *a1, char *a2, uint64_t a3, double a4)
{
  uint64_t v7 = sub_2161F3B4C(a1, a2, a3);
  unsigned int v10 = sub_2161F3B4C(a2, v8, v9);
  double v11 = (*(double (**)(void *))(*(void *)v7 + 392))(v7);
  double v14 = (*(double (**)(void *))(*(void *)v10 + 392))(v10);
  if (v11 <= v14)
  {
    if (v11 >= v14 || (v16 = v14 * a4, uint64_t result = v16 > v11, v16 <= v11))
    {
LABEL_9:
      char v17 = sub_2161F3B4C(a1, v12, v13);
      int v20 = sub_2161F3B4C(a2, v18, v19);
      int v21 = (*(uint64_t (**)(void *))(*(void *)v17 + 112))(v17);
      if (v21 >= (*(int (**)(void *))(*(void *)v20 + 112))(v20))
      {
        int v22 = (*(uint64_t (**)(void *))(*(void *)v17 + 112))(v17);
        return v22 > (*(int (**)(void *))(*(void *)v20 + 112))(v20);
      }
      else
      {
        return -1;
      }
    }
  }
  else
  {
    if (v11 * a4 <= v14) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = -1;
    }
    if (!result) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_2162539D8(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = sub_2161F3B4C(a1, a2, a3);
  uint64_t v7 = sub_2161F3B4C(a2, v5, v6);
  double v8 = (*(double (**)(void *))(*(void *)v4 + 392))(v4);
  double v9 = (*(double (**)(void *))(*(void *)v7 + 392))(v7);
  char v10 = (*(uint64_t (**)(void *))(*(void *)v4 + 104))(v4);
  CFStringRef v11 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v4 + 24))(v4);
  CFIndex Length = CFStringGetLength(v11);
  if ((v10 & 4) != 0)
  {
    uint64_t v14 = Length;
    int v15 = (*(uint64_t (**)(void *))(*(void *)v4 + 200))(v4);
    if (v14 < 5) {
      int v13 = v15;
    }
    else {
      int v13 = 0;
    }
  }
  else
  {
    int v13 = 0;
  }
  char v16 = (*(uint64_t (**)(void *))(*(void *)v7 + 104))(v7);
  CFStringRef v17 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v7 + 24))(v7);
  CFIndex v18 = CFStringGetLength(v17);
  if ((v16 & 4) != 0)
  {
    uint64_t v20 = v18;
    unsigned int v21 = (*(uint64_t (**)(void *))(*(void *)v7 + 200))(v7);
    if (v20 < 5) {
      unsigned int v19 = v21;
    }
    else {
      unsigned int v19 = 0;
    }
  }
  else
  {
    unsigned int v19 = 0;
  }
  if ((v13 | v19) == 1)
  {
    int v22 = v13 ^ 1 | v19;
    uint64_t v23 = (uint64_t)((unint64_t)((v13 ^ 1) & v19) << 63) >> 63;
    if (v22 == 1) {
      return v23;
    }
    else {
      return 1;
    }
  }
  else if (v8 <= v9)
  {
    return v8 < v9 && v9 * 1.15 > v8;
  }
  else if (v8 * 1.15 <= v9)
  {
    return 0;
  }
  else
  {
    return -1;
  }
}

BOOL sub_216253C2C(uint64_t *a1, uint64_t *a2, void *a3, int a4, uint64_t a5, uint64_t a6, __int16 a7)
{
  __int16 v7 = a7;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DE50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DE50))
  {
    sub_2161C04AC(0);
    word_26797DE48 = word_26797EF54;
    __cxa_guard_release(&qword_26797DE50);
    __int16 v7 = a7;
  }
  uint64_t v11 = *a1;
  if (!*a1) {
    operator new();
  }
  if (!*(unsigned char *)(v11 + 837))
  {
    sub_2161B8210(v11, a4, 0, 7);
    uint64_t v11 = *a1;
  }
  long long __p = 0;
  unint64_t v39 = 0;
  int v40 = 0;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v35 = v11;
  if (v13 == *a2)
  {
    int v15 = 0;
  }
  else
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 3);
    if (v14 > 0x666666666666666) {
      sub_21610CB04();
    }
    int v15 = (char *)sub_216253FD4(v14);
    long long __p = v15;
    unint64_t v39 = v15;
    int v40 = &v15[40 * v16];
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
  }
  if (v13 != v12)
  {
    unint64_t v17 = 0;
    __int16 v18 = word_26797DE48;
    do
    {
      unsigned int v19 = (uint64_t *)(*a3 + 24 * v17);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1] - *v19;
      int v22 = (uint64_t *)(v12 + 24 * v17);
      uint64_t v23 = *v22;
      uint64_t v24 = v22[1] - *v22;
      if (v15 >= v40)
      {
        uint64_t v26 = (char *)__p;
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - (unsigned char *)__p) >> 3) + 1;
        if (v27 > 0x666666666666666) {
          sub_21610CB04();
        }
        if (0x999999999999999ALL * ((v40 - (unsigned char *)__p) >> 3) > v27) {
          unint64_t v27 = 0x999999999999999ALL * ((v40 - (unsigned char *)__p) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v40 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)sub_216253FD4(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = (void *)(v28 + 8 * ((v15 - (unsigned char *)__p) >> 3));
        *uint64_t v30 = v23;
        v30[1] = v24;
        v30[2] = v20;
        void v30[3] = v21;
        *((_WORD *)v30 + 16) = v18;
        *((_WORD *)v30 + 17) = v18;
        __int16 v7 = a7;
        *((_WORD *)v30 + 18) = a7;
        int v31 = (char *)v30;
        if (v15 != v26)
        {
          do
          {
            long long v32 = *(_OWORD *)(v15 - 40);
            long long v33 = *(_OWORD *)(v15 - 24);
            *((void *)v31 - 1) = *((void *)v15 - 1);
            *(_OWORD *)(v31 - 24) = v33;
            *(_OWORD *)(v31 - 4sub_216195B94(&a9, 0) = v32;
            v31 -= 40;
            v15 -= 40;
          }
          while (v15 != v26);
          int v15 = v26;
        }
        int v25 = v30 + 5;
        long long __p = v31;
        int v40 = (char *)(v28 + 40 * v29);
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)int v15 = v23;
        *((void *)v15 + 1) = v24;
        *((void *)v15 + 2) = v20;
        *((void *)v15 + 3) = v21;
        *((_WORD *)v15 + 16) = v18;
        *((_WORD *)v15 + 17) = v18;
        int v25 = v15 + 40;
        *((_WORD *)v15 + 18) = v7;
      }
      unint64_t v39 = v25;
      ++v17;
      uint64_t v12 = *a2;
      int v15 = (char *)v25;
    }
    while (v17 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  sub_2161B9310(v35, (const void ***)&__p);
  if (__p)
  {
    unint64_t v39 = __p;
    operator delete(__p);
  }
  return v35 != 0;
}

void sub_216253F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *sub_216253FD4(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    sub_2160FFA74();
  }
  return operator new(40 * a1);
}

void sub_21625401C(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t v4 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= a2)
  {
    sub_216254148(a1, a2 + 1);
    uint64_t v4 = *a1;
  }
  uint64_t v7 = v4 + 24 * a2;
  double v9 = (_DWORD **)(v7 + 8);
  double v8 = *(_DWORD **)(v7 + 8);
  uint64_t v11 = (char **)(v7 + 16);
  unint64_t v10 = *(void *)(v7 + 16);
  if ((unint64_t)v8 >= v10)
  {
    uint64_t v13 = *(_DWORD **)v7;
    uint64_t v14 = ((uint64_t)v8 - *(void *)v7) >> 2;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      sub_21610CB04();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      __int16 v18 = (char *)sub_2161129B4((uint64_t)v11, v17);
      double v8 = *v9;
      uint64_t v13 = *(_DWORD **)v7;
    }
    else
    {
      __int16 v18 = 0;
    }
    unsigned int v19 = &v18[4 * v14];
    uint64_t v20 = &v18[4 * v17];
    *(_DWORD *)unsigned int v19 = a3;
    uint64_t v12 = v19 + 4;
    while (v8 != v13)
    {
      int v21 = *--v8;
      *((_DWORD *)v19 - 1) = v21;
      v19 -= 4;
    }
    *(void *)uint64_t v7 = v19;
    *double v9 = v12;
    *uint64_t v11 = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *double v8 = a3;
    uint64_t v12 = v8 + 1;
  }
  *double v9 = v12;
}

void sub_216254148(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_216254428(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        double v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_2162541F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v28 = 0u;
  long long v29 = 0u;
  int v30 = 1065353216;
  unint64_t v27 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4 == *a1)
  {
    uint64_t result = sub_216144C28((uint64_t)&v28);
LABEL_23:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
  {
    uint64_t v8 = (uint64_t *)(v3 + 24 * v7);
    uint64_t v9 = *v8;
    if (*v8 == v8[1])
    {
      uint64_t v10 = *v8;
    }
    else
    {
      sub_216254608((uint64_t)&v28, &v27, &v27);
      unint64_t v7 = v27;
      uint64_t v3 = *a1;
      uint64_t v4 = a1[1];
      uint64_t v9 = *(void *)(*a1 + 24 * v27);
      uint64_t v10 = *(void *)(*a1 + 24 * v27 + 8);
    }
    uint64_t v11 = v10 - v9;
    if ((unint64_t)v11 <= 4) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v11 >> 2;
    }
    v6 += 1 + v12;
    unint64_t v27 = ++v7;
  }
  while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3));
  int v13 = DWORD2(v29);
  uint64_t result = sub_216144C28((uint64_t)&v28);
  if (!v6) {
    goto LABEL_23;
  }
  LODWORD(v28) = -1;
  uint64_t result = (uint64_t)sub_2161EB168(a2, v6 + 2, &v28);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  unint64_t v17 = (v16 - *a1) / 24;
  uint64_t v18 = *a2;
  unsigned int v19 = (_DWORD *)(*a2 + 4 * v6);
  _DWORD *v19 = v13;
  v19[1] = v17 - 1;
  if (v16 != v15)
  {
    uint64_t v20 = 0;
    unsigned int v21 = 0;
    if (v17 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v17;
    }
    do
    {
      uint64_t v23 = (char **)(v15 + 24 * v20);
      uint64_t v24 = *v23;
      int v25 = v23[1];
      if (v24 != v25)
      {
        if (v25 - v24 == 4)
        {
          *(_DWORD *)(v18 + 4 * v2sub_216195B94(&a9, 0) = *(_DWORD *)v24;
        }
        else
        {
          *(_DWORD *)(v18 + 4 * v2sub_216195B94(&a9, 0) = (v21 << 8) | ((v25 - v24) >> 2) | 0x80000000;
          do
          {
            int v26 = *(_DWORD *)v24;
            v24 += 4;
            uint64_t result = v17 + v21;
            *(_DWORD *)(v18 + 4 * result) = v26;
            ++v21;
          }
          while (v24 != v25);
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  return result;
}

void sub_2162543B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216144C28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2162543C4(uint64_t **result, uint64_t *a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = (uint64_t *)a3;
  result[2] = (uint64_t *)(a3 + 1);
  if (a2)
  {
    uint64_t v3 = a2[1];
    if (v3)
    {
      uint64_t v4 = *a2;
      if (*(_DWORD *)(*a2 + 4 * v3 - 8))
      {
        unint64_t v5 = *(unsigned int *)(v4 + 4 * a3);
        if (v5 != -1)
        {
          if ((v5 & 0x80000000) == 0) {
            return result;
          }
          uint64_t v6 = ((v5 >> 8) & 0x7FFFFF) + *(unsigned int *)(v4 + 4 * v3 - 4) + 1;
          result[1] = (uint64_t *)v6;
          a3 = v6 + v5;
        }
      }
    }
  }
  result[2] = (uint64_t *)a3;
  return result;
}

void sub_216254428(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21617AF38();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_216129BFC(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    sub_216254590(a1, &v15);
    sub_216140FCC((uint64_t)&v15);
  }
}

void sub_21625457C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216254590(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21617B4C8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216254608(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_2161297B4(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216254810(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216254824(uint64_t a1, int a2, CFTypeRef cf, uint64_t a4)
{
  if (cf)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFDataGetTypeID())
    {
      int v26 = a2;
      uint64_t v27 = a4;
      BytePtr = CFDataGetBytePtr((CFDataRef)cf);
      unint64_t Length = CFDataGetLength((CFDataRef)cf);
      long long __p = 0;
      long long v29 = 0;
      int v30 = 0;
      if (Length >= 8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        unint64_t v13 = Length >> 3;
        do
        {
          BOOL v14 = &BytePtr[8 * v12];
          unint64_t v15 = v14 + 4;
          if (v11 >= v30)
          {
            uint64_t v16 = (v11 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v16 + 1) >> 61) {
              sub_216254B1C();
            }
            unint64_t v17 = (v30 - (unsigned char *)__p) >> 2;
            if (v17 <= v16 + 1) {
              unint64_t v17 = v16 + 1;
            }
            if ((unint64_t)(v30 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v17;
            }
            uint64_t v19 = (char *)sub_2160FFAA8((uint64_t)&v30, v18);
            unsigned int v21 = &v19[8 * v16];
            *(_WORD *)unsigned int v21 = *(_WORD *)v14;
            *((_DWORD *)v21 + 1) = *v15;
            uint64_t v23 = (char *)__p;
            uint64_t v22 = v29;
            uint64_t v24 = v21;
            if (v29 != __p)
            {
              do
              {
                uint64_t v25 = *((void *)v22 - 1);
                v22 -= 8;
                *((void *)v24 - 1) = v25;
                v24 -= 8;
              }
              while (v22 != v23);
              uint64_t v22 = (char *)__p;
            }
            unint64_t v11 = v21 + 8;
            long long __p = v24;
            long long v29 = v21 + 8;
            int v30 = &v19[8 * v20];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *(_WORD *)unint64_t v11 = *(_WORD *)v14;
            *((_DWORD *)v11 + 1) = *v15;
            v11 += 8;
          }
          long long v29 = v11;
          ++v12;
        }
        while (v12 != v13);
      }
      sub_2162549F8(a1, v26, (float **)&__p, v27);
      if (__p)
      {
        long long v29 = (char *)__p;
        operator delete(__p);
      }
    }
  }
}

void sub_2162549D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162549F8(uint64_t result, int a2, float **a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = (unsigned __int16 *)a3[1];
  if (*a3 != (float *)v5)
  {
    uint64_t v7 = result;
    uint64_t v8 = 0;
    for (uint64_t i = (unsigned __int16 *)(v4 + 2); *(i - 4) != a2; i += 4)
    {
      ++v8;
      if (*(i - 4)) {
        BOOL v10 = i == v5;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10) {
        return result;
      }
    }
    uint64_t v11 = 0;
    float v12 = *((float *)i - 1);
    do
    {
      if (v8)
      {
        if (!*(_WORD *)v4) {
          break;
        }
        float v13 = v12 - v4[1];
        float v14 = 1.0;
        if (v13 > 0.0)
        {
          float v14 = 0.0;
          if (v13 < *(float *)v7) {
            float v14 = 1.0 - (float)((float)(v13 * 100.0) / (float)(*(float *)v7 * 100.0));
          }
        }
        if (v14 >= *(float *)(v7 + 4))
        {
          v15[0] = *(unsigned __int16 *)v4;
          *(float *)&v15[1] = v14;
          uint64_t result = (*(uint64_t (**)(uint64_t, _DWORD *))(a4 + 16))(a4, v15);
          if ((unint64_t)++v11 > *(void *)(v7 + 8)) {
            break;
          }
        }
      }
      v4 += 2;
      --v8;
    }
    while (v4 != (float *)v5);
  }
  return result;
}

void sub_216254B1C()
{
}

void sub_216254B34(void *a1, uint64_t a2)
{
  *a1 = a2;
  sub_216214DB0();
}

void sub_216254C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_21625823C(v16, 0);
      sub_21625823C(v15 + 1, 0);
      uint64_t v20 = *v15;
      *unint64_t v15 = 0;
      if (v20) {
        sub_2162581E4((uint64_t)v15, v20);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void sub_216254CF4(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C6BE418;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

uint64_t sub_216254D54(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  sub_21635F8DC(*(void *)(a1 + 16));
  sub_21635F8DC(*(void *)(a1 + 24));
  *(_DWORD *)(a1 + 4sub_216195B94(&a9, 0) = 0;
  sub_21625823C((uint64_t *)(a1 + 24), 0);
  sub_21625823C(v2, 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    sub_2162581E4(a1 + 8, v3);
  }
  return a1;
}

void sub_216254DCC()
{
}

void sub_216254E14(_Unwind_Exception *a1, int a2)
{
  uint64_t v4 = v2;
  MEMORY[0x2166CA800](v4, 0x1060C40C17344BBLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x216254E04);
  }
  _Unwind_Resume(a1);
}

void sub_216254E64(int a1, CFStringRef theString, uint64_t a3, char a4)
{
  if ((a4 & 8) == 0 && CFStringGetLength(theString) >= 3) {
    sub_2161E208C();
  }
}

void sub_21625505C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v27) {
    MEMORY[0x2166CA7C0](v27, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(a1);
}

__n128 sub_2162550A4(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_216195B94(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2162550C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t sub_2162550E0(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (!a3)
  {
    uint64_t v5 = *(uint64_t **)(result + 40);
    unint64_t v6 = (char *)sub_216322CC4(v5[4], *(_WORD **)(a2 + 8));
    int v8 = v7;
    v15[0] = (uint64_t)v6;
    v15[1] = v7;
    _DWORD v14[2] = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v5[4] + 24))(v5[4], *(void *)(a2 + 8), 1);
    void v14[3] = v9;
    uint64_t v10 = (2 * v8);
    if (v10)
    {
      unsigned int v11 = 0;
      do
      {
        int v12 = *v6++;
        unsigned int v11 = (1025 * (v11 + v12)) ^ ((1025 * (v11 + v12)) >> 6);
        --v10;
      }
      while (v10);
    }
    uint64_t v13 = sub_216225B1C(v15, *(void *)(*(void *)(*v5 + 88) + 8));
    sub_21625828C(v14, v13);
  }
  *a4 = 1;
  return result;
}

void sub_2162552C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  MEMORY[0x2166CA800](v10, 0x10E1C40CFE76A11);
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216255300(uint64_t result, uint64_t **a2)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = (void *)sub_2161F4704(v6);
      __n128 result = sub_21635F9E0(v3, v7, v8);
    }
    while (v4 != v5);
    uint64_t v4 = *a2;
  }
  a2[1] = v4;
  v3[3] = *v3;
  return result;
}

void sub_216255364(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 4sub_216195B94(&a9, 0) = a3;
  CFStringGetLength(*(CFStringRef *)(a2 + 152));
  operator new[]();
}

void sub_21625586C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162558F0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[0] = 0;
  v18[1] = v18;
  _DWORD v18[2] = 0x2000000000;
  void v18[3] = 0;
  v17[0] = 0;
  v17[1] = v17;
  _DWORD v17[2] = 0x2000000000;
  v17[3] = 0;
  unint64_t v7 = a2[1] - 1;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  void v16[3] = 0;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  uint64_t v15[2] = sub_216258430;
  v15[3] = &unk_26426C190;
  void v15[4] = v18;
  void v15[5] = v17;
  v15[6] = v16;
  v15[7] = a1;
  uint8_t v15[8] = a2;
  v15[9] = a4;
  v15[10] = a3;
  v15[11] = a5;
  sub_216214F10(a1[1], (uint64_t)a2, v7 < 2, (uint64_t)v15);
  uint64_t v8 = *(void *)(*a1 + 136);
  uint64_t v9 = *(uint64_t **)(v8 + 48);
  uint64_t v10 = *(uint64_t **)(v8 + 56);
  if (v9 != v10)
  {
    uint64_t v11 = 2 * (v7 < 2);
    do
    {
      int v12 = *(_DWORD *)*a1 - 1;
      if (v12 > 4) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = dword_216382B44[v12];
      }
      uint64_t v14 = *v9;
      (*(void (**)(uint64_t, uint64_t))(*(void *)*v9 + 48))(*v9, v13);
      sub_216350944(v14, *a2, 2 * a2[1], v11, (uint64_t)v15);
      ++v9;
    }
    while (v9 != v10);
  }
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v18, 8);
}

void sub_216255A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

__n128 sub_216255AD0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 4sub_216195B94(&a9, 0) = v2;
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  long long v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 12sub_216195B94(&a9, 0) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  __n128 result = *(__n128 *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 184);
  long long v10 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a1 + 20sub_216195B94(&a9, 0) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(__n128 *)(a1 + 168) = result;
  return result;
}

void sub_216255B38(uint64_t a1, const __CFString *a2, uint64_t a3, CFIndex a4, CFIndex a5, UniChar *a6, uint64_t a7)
{
  if (a2)
  {
    CFIndex v8 = a4;
    uint64_t v10 = *(void *)(*(void *)(*(void *)a1 + 88) + 8);
    if (v10)
    {
      while (1)
      {
        CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(a2, v8);
        CFIndex v13 = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
        if (RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length == CFStringGetLength(a2)) {
          break;
        }
        if (RangeOfComposedCharactersAtIndex.length == 1)
        {
          if (RangeOfComposedCharactersAtIndex.location < 0)
          {
            unsigned __int16 v36 = 0;
            uint64_t v34 = a1;
          }
          else
          {
            CFIndex v33 = *(void *)(a3 + 160);
            uint64_t v34 = a1;
            if (v33 <= RangeOfComposedCharactersAtIndex.location)
            {
              unsigned __int16 v36 = 0;
            }
            else
            {
              uint64_t v35 = *(void *)(a3 + 136);
              if (v35)
              {
                unsigned __int16 v36 = *(_WORD *)(v35 + 2 * (*(void *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location));
              }
              else
              {
                uint64_t v58 = *(void *)(a3 + 144);
                if (v58)
                {
                  unsigned __int16 v36 = *(char *)(v58 + *(void *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location);
                }
                else
                {
                  if (*(void *)(a3 + 176) <= RangeOfComposedCharactersAtIndex.location
                    || (CFIndex v60 = *(void *)(a3 + 168), v60 > RangeOfComposedCharactersAtIndex.location))
                  {
                    CFIndex v61 = RangeOfComposedCharactersAtIndex.location - 4;
                    if (RangeOfComposedCharactersAtIndex.location < 4uLL) {
                      CFIndex v61 = 0;
                    }
                    if (v61 + 64 < v33) {
                      CFIndex v33 = v61 + 64;
                    }
                    *(void *)(a3 + 168) = v61;
                    *(void *)(a3 + 176) = v33;
                    v73.CFIndex location = *(void *)(a3 + 152) + v61;
                    v73.length = v33 - v61;
                    CFStringGetCharacters(*(CFStringRef *)(a3 + 128), v73, (UniChar *)a3);
                    CFIndex v60 = *(void *)(a3 + 168);
                  }
                  unsigned __int16 v36 = *(_WORD *)(a3 + 2 * (RangeOfComposedCharactersAtIndex.location - v60));
                }
              }
            }
          }
          sub_216199F90(v10, v36, &v67);
          uint64_t v54 = v68;
          if (v68 != v67)
          {
            unint64_t v56 = 0;
            CFIndex v57 = RangeOfComposedCharactersAtIndex.location - v8;
            uint64_t v54 = v67;
            do
            {
              a6[v57] = *(_WORD *)&v54[2 * v56];
              sub_216255B38(v34, a2, a3, RangeOfComposedCharactersAtIndex.location + 1, a5 - 1, a6 + 1, a7);
              ++v56;
              uint64_t v54 = v67;
            }
            while (v56 < (v68 - v67) >> 1);
          }
LABEL_78:
          if (v54)
          {
            int v68 = v54;
            operator delete(v54);
          }
          return;
        }
        if (v8 <= RangeOfComposedCharactersAtIndex.location) {
          CFIndex location = RangeOfComposedCharactersAtIndex.location;
        }
        else {
          CFIndex location = v8;
        }
        CFIndex v15 = v13 - location;
        if (v13 - location >= 1)
        {
          uint64_t v16 = &a6[-v8];
          CFIndex v17 = -location;
          CFIndex v18 = location + 64;
          do
          {
            if ((unint64_t)location >= 4) {
              uint64_t v19 = 4;
            }
            else {
              uint64_t v19 = location;
            }
            if (location < 0 || (CFIndex v20 = *(void *)(a3 + 160), v20 <= location))
            {
              UniChar v22 = 0;
            }
            else
            {
              uint64_t v21 = *(void *)(a3 + 136);
              if (v21)
              {
                UniChar v22 = *(_WORD *)(v21 + 2 * (location + *(void *)(a3 + 152)));
              }
              else
              {
                uint64_t v23 = *(void *)(a3 + 144);
                if (v23)
                {
                  UniChar v22 = *(char *)(v23 + *(void *)(a3 + 152) + location);
                }
                else
                {
                  if (*(void *)(a3 + 176) <= location || (CFIndex v24 = *(void *)(a3 + 168), v24 > location))
                  {
                    uint64_t v25 = v19 + v17;
                    CFIndex v26 = v18 - v19;
                    CFIndex v27 = location - v19;
                    CFIndex v28 = v27 + 64;
                    if (v27 + 64 >= v20) {
                      CFIndex v28 = *(void *)(a3 + 160);
                    }
                    *(void *)(a3 + 168) = v27;
                    *(void *)(a3 + 176) = v28;
                    if (v20 >= v26) {
                      CFIndex v20 = v26;
                    }
                    v70.length = v20 + v25;
                    v70.CFIndex location = v27 + *(void *)(a3 + 152);
                    CFStringGetCharacters(*(CFStringRef *)(a3 + 128), v70, (UniChar *)a3);
                    CFIndex v24 = *(void *)(a3 + 168);
                  }
                  UniChar v22 = *(_WORD *)(a3 - 2 * v24 + 2 * location);
                }
              }
            }
            v16[location++] = v22;
            --v17;
            ++v18;
          }
          while (v13 != location);
        }
        a5 -= v15;
        a6 += v15;
        uint64_t v10 = *(void *)(*(void *)(*(void *)a1 + 88) + 8);
        CFIndex v8 = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
        if (!v10) {
          goto LABEL_33;
        }
      }
      if (RangeOfComposedCharactersAtIndex.length == 1)
      {
        if (RangeOfComposedCharactersAtIndex.location < 0
          || (CFIndex v30 = *(void *)(a3 + 160), v30 <= RangeOfComposedCharactersAtIndex.location))
        {
          unsigned __int16 v32 = 0;
        }
        else
        {
          uint64_t v31 = *(void *)(a3 + 136);
          if (v31)
          {
            unsigned __int16 v32 = *(_WORD *)(v31 + 2 * (*(void *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location));
          }
          else
          {
            uint64_t v59 = *(void *)(a3 + 144);
            if (v59)
            {
              unsigned __int16 v32 = *(char *)(v59 + *(void *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location);
            }
            else
            {
              if (*(void *)(a3 + 176) <= RangeOfComposedCharactersAtIndex.location
                || (CFIndex v62 = *(void *)(a3 + 168), v62 > RangeOfComposedCharactersAtIndex.location))
              {
                CFIndex v63 = RangeOfComposedCharactersAtIndex.location - 4;
                if (RangeOfComposedCharactersAtIndex.location < 4uLL) {
                  CFIndex v63 = 0;
                }
                if (v63 + 64 < v30) {
                  CFIndex v30 = v63 + 64;
                }
                *(void *)(a3 + 168) = v63;
                *(void *)(a3 + 176) = v30;
                v74.CFIndex location = *(void *)(a3 + 152) + v63;
                v74.length = v30 - v63;
                CFStringGetCharacters(*(CFStringRef *)(a3 + 128), v74, (UniChar *)a3);
                CFIndex v62 = *(void *)(a3 + 168);
              }
              unsigned __int16 v32 = *(_WORD *)(a3 + 2 * (RangeOfComposedCharactersAtIndex.location - v62));
            }
          }
        }
        sub_216199F90(v10, v32, &v67);
        uint64_t v54 = v68;
        if (v68 != v67)
        {
          unint64_t v55 = 0;
          uint64_t v54 = v67;
          do
          {
            a6[RangeOfComposedCharactersAtIndex.location - v8] = *(_WORD *)&v54[2 * v55];
            (*(void (**)(uint64_t))(a7 + 16))(a7);
            ++v55;
            uint64_t v54 = v67;
          }
          while (v55 < (v68 - v67) >> 1);
        }
        goto LABEL_78;
      }
      if (RangeOfComposedCharactersAtIndex.length >= 1)
      {
        uint64_t v37 = 0;
        CFIndex v38 = -RangeOfComposedCharactersAtIndex.location;
        CFIndex v39 = RangeOfComposedCharactersAtIndex.location + 64;
        unint64_t v40 = RangeOfComposedCharactersAtIndex.location;
        do
        {
          if (v40 >= 4) {
            uint64_t v41 = 4;
          }
          else {
            uint64_t v41 = v40;
          }
          CFIndex v42 = RangeOfComposedCharactersAtIndex.location + v37;
          if (RangeOfComposedCharactersAtIndex.location + v37 < 0 || (CFIndex v43 = *(void *)(a3 + 160), v43 <= v42))
          {
            UniChar v45 = 0;
          }
          else
          {
            uint64_t v44 = *(void *)(a3 + 136);
            if (v44)
            {
              UniChar v45 = *(_WORD *)(v44 + 2 * (RangeOfComposedCharactersAtIndex.location + v37 + *(void *)(a3 + 152)));
            }
            else
            {
              uint64_t v46 = *(void *)(a3 + 144);
              if (v46)
              {
                UniChar v45 = *(char *)(v46 + *(void *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location + v37);
              }
              else
              {
                if (*(void *)(a3 + 176) <= v42 || (CFIndex v47 = *(void *)(a3 + 168), v47 > v42))
                {
                  uint64_t v48 = v41 + v38;
                  CFIndex v49 = v39 - v41;
                  uint64_t v50 = -v41;
                  uint64_t v51 = 64 - v41;
                  CFIndex v52 = v37 + RangeOfComposedCharactersAtIndex.location - v41;
                  CFIndex v53 = RangeOfComposedCharactersAtIndex.location + v37 + v51;
                  if (v53 >= v43) {
                    CFIndex v53 = *(void *)(a3 + 160);
                  }
                  *(void *)(a3 + 168) = v52;
                  *(void *)(a3 + 176) = v53;
                  if (v43 >= v49) {
                    CFIndex v43 = v49;
                  }
                  v72.length = v43 + v48;
                  v72.CFIndex location = RangeOfComposedCharactersAtIndex.location + v37 + v50 + *(void *)(a3 + 152);
                  CFStringGetCharacters(*(CFStringRef *)(a3 + 128), v72, (UniChar *)a3);
                  CFIndex v47 = *(void *)(a3 + 168);
                }
                UniChar v45 = *(_WORD *)(a3 + 2 * RangeOfComposedCharactersAtIndex.location - 2 * v47 + 2 * v37);
              }
            }
          }
          *(UniChar *)((char *)&a6[v37++] + 2 * RangeOfComposedCharactersAtIndex.location - 2 * v8) = v45;
          ++v40;
          --v38;
          ++v39;
        }
        while (RangeOfComposedCharactersAtIndex.length != v37);
      }
    }
    else
    {
      CFIndex v13 = a4;
LABEL_33:
      v71.CFIndex location = v13;
      v71.length = a5;
      CFStringGetCharacters(a2, v71, a6);
    }
    long long v29 = *(void (**)(void))(a7 + 16);
    v29();
  }
}

void sub_2162560A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162560C8(uint64_t a1)
{
  long long v2 = *(uint64_t **)(a1 + 48);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  if (*(uint64_t *)(a1 + 72) >= 1 && v3 != 0)
  {
    int64_t v8 = *(void *)(a1 + 64);
    int64_t v9 = -v8;
    int64_t v10 = v8 + 64;
    do
    {
      if ((unint64_t)v8 >= 4) {
        uint64_t v11 = 4;
      }
      else {
        uint64_t v11 = v8;
      }
      LOWORD(v26[0]) = 0;
      if (v8 < 0 || (uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8), v13 = *(void *)(v12 + 200), v13 <= v8))
      {
        __int16 v15 = 0;
      }
      else
      {
        uint64_t v14 = *(void *)(v12 + 176);
        if (v14)
        {
          __int16 v15 = *(_WORD *)(v14 + 2 * (v8 + *(void *)(v12 + 192)));
        }
        else
        {
          uint64_t v18 = *(void *)(v12 + 184);
          if (v18)
          {
            __int16 v15 = *(char *)(v18 + *(void *)(v12 + 192) + v8);
          }
          else
          {
            if (*(void *)(v12 + 216) <= v8 || (int64_t v19 = *(void *)(v12 + 208), v19 > v8))
            {
              uint64_t v20 = v11 + v9;
              int64_t v21 = v10 - v11;
              int64_t v22 = v8 - v11;
              int64_t v23 = v22 + 64;
              if (v22 + 64 >= v13) {
                int64_t v23 = *(void *)(v12 + 200);
              }
              *(void *)(v12 + 208) = v22;
              *(void *)(v12 + 216) = v23;
              if (v13 >= v21) {
                int64_t v13 = v21;
              }
              v27.length = v13 + v20;
              v27.CFIndex location = v22 + *(void *)(v12 + 192);
              CFStringGetCharacters(*(CFStringRef *)(v12 + 168), v27, (UniChar *)(v12 + 40));
              int64_t v19 = *(void *)(v12 + 208);
            }
            __int16 v15 = *(_WORD *)(v12 - 2 * v19 + 2 * v8 + 40);
          }
        }
      }
      LOWORD(v26[0]) = v15;
      uint64_t CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      uint64_t v3 = CursorByAdvancingWithCharacters;
      ++v8;
      --v9;
      ++v10;
    }
    while (v8 < *(void *)(a1 + 72) + *(void *)(a1 + 64) && CursorByAdvancingWithCharacters != 0);
  }
  sub_2162562A8((uint64_t)v26, *v2, v3, *(void **)(a1 + 80), *(void *)(a1 + 88), *(unsigned char *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 72);
  if (!v5) {
    uint64_t v6 = 0;
  }
  v25[0] = *(void *)(a1 + 96);
  v25[1] = v6;
  v24[0] = v5;
  v24[1] = v6;
  sub_2162558F0(v2, v25, (uint64_t)v24, (uint64_t)v26, *(void *)(*(void *)(a1 + 40) + 8) + 40);
  return sub_216256674(v26);
}

void sub_216256294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216256674((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162562A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_216195B94(&a9, 0) = *(void *)(a4[20] + 8 * a5);
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = a6;
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a2 + 8) + 32) + 32);
  uint64_t v10 = v9 - 1;
  uint64_t v11 = a4[27] - a4[26];
  if (a6)
  {
    uint64_t v12 = (CFStringRef *)(a4 + 18);
    goto LABEL_11;
  }
  if (!v11 || (int64_t v13 = (void *)a4[23], (void *)a4[24] == v13) || (v14 = v11 >> 2, v14 != *v13))
  {
    uint64_t v12 = (CFStringRef *)(a4 + 19);
LABEL_11:
    CFStringRef v17 = *v12;
    unint64_t Length = CFStringGetLength(*v12);
    unint64_t v19 = *(void *)(a1 + 40);
    BOOL v20 = Length >= v19;
    CFIndex v21 = Length - v19;
    if (v20) {
      v22.length = v21;
    }
    else {
      v22.length = 0;
    }
    v22.CFIndex location = 0;
    CFStringRef v25 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], v17, v22);
    operator new();
  }
  uint64_t v15 = v14 - v13[a5];
  if (v15 >= v9)
  {
    uint64_t v16 = v15 - v10;
    uint64_t v15 = v10;
  }
  else
  {
    if (v15 < v10) {
      sub_216256598(a1 + 16);
    }
    uint64_t v16 = 0;
  }
  if (v15 >= 1) {
    sub_216257EC8(v8, *(void *)(a1 + 24), (char *)(a4[26] + 4 * v16), (char *)(a4[26] + 4 * v16 + 4 * v15), v15);
  }
  LMLanguageModelJointProbability();
  *(double *)(a1 + 48) = -v23;
  return a1;
}

void sub_2162564EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v15 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 24) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_216256598(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  unint64_t v3 = *(void *)(a1 + 16);
  long long v4 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v7 = ((uint64_t)v4 - *(void *)a1) >> 2;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62) {
      sub_21610CB04();
    }
    uint64_t v9 = v3 - (void)v6;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = (char *)sub_2161129B4(v2, v10);
      uint64_t v6 = *(_DWORD **)a1;
      long long v4 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[4 * v7];
    int64_t v13 = &v11[4 * v10];
    *(_DWORD *)uint64_t v12 = 1;
    uint64_t v5 = v12 + 4;
    while (v4 != v6)
    {
      int v14 = *--v4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *long long v4 = 1;
    uint64_t v5 = v4 + 1;
  }
  *(void *)(a1 + 8) = v5;
}

void *sub_216256674(void *a1)
{
  sub_21628CD70(*(uint64_t **)(*(void *)(*a1 + 72) + 8));
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_2162566BC(void *a1, long long *a2)
{
  *a1 = &unk_26C6BE418;
  unint64_t v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3[2] = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v3 = v4;
  }
  return a1;
}

void sub_216256724(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_216256738(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C6BE418;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162567AC(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_2162567C8(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = a2;
    unint64_t v10 = a2 - 1;
    uint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (char *)v9 - (char *)v11;
          uint64_t v13 = v9 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v53 = *a1;
                double v54 = (*(double (**)(void))(*(void *)*(a2 - 1) + 176))(*(a2 - 1));
                if (v54 < (*(double (**)(uint64_t))(*(void *)v53 + 176))(v53))
                {
                  uint64_t v55 = *a1;
                  *a1 = *(a2 - 1);
                  *(a2 - 1) = v55;
                }
                break;
              case 3:
                sub_216257668(a1, a1 + 1, v10);
                break;
              case 4:
                sub_216257B24(a1, a1 + 1, a1 + 2, v10);
                break;
              case 5:
                sub_216257CBC(a1, a1 + 1, a1 + 2, a1 + 3, v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 191)
          {
            unint64_t v56 = a1 + 1;
            BOOL v58 = a1 == v9 || v56 == v9;
            if (a4)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                CFIndex v60 = a1;
                do
                {
                  uint64_t v62 = *v60;
                  uint64_t v61 = v60[1];
                  CFIndex v60 = v56;
                  double v63 = (*(double (**)(uint64_t))(*(void *)v61 + 176))(v61);
                  if (v63 < (*(double (**)(uint64_t))(*(void *)v62 + 176))(v62))
                  {
                    uint64_t v64 = *v60;
                    uint64_t v65 = v59;
                    while (1)
                    {
                      *(uint64_t *)((char *)a1 + v65 + 8) = *(uint64_t *)((char *)a1 + v65);
                      if (!v65) {
                        break;
                      }
                      uint64_t v66 = *(uint64_t *)((char *)a1 + v65 - 8);
                      double v67 = (*(double (**)(uint64_t))(*(void *)v64 + 176))(v64);
                      v65 -= 8;
                      if (v67 >= (*(double (**)(uint64_t))(*(void *)v66 + 176))(v66))
                      {
                        int v68 = (uint64_t *)((char *)a1 + v65 + 8);
                        goto LABEL_81;
                      }
                    }
                    int v68 = a1;
LABEL_81:
                    *int v68 = v64;
                  }
                  unint64_t v56 = v60 + 1;
                  v59 += 8;
                }
                while (v60 + 1 != a2);
              }
            }
            else if (!v58)
            {
              do
              {
                uint64_t v107 = *a1;
                uint64_t v106 = a1[1];
                a1 = v56;
                double v108 = (*(double (**)(uint64_t))(*(void *)v106 + 176))(v106);
                if (v108 < (*(double (**)(uint64_t))(*(void *)v107 + 176))(v107))
                {
                  uint64_t v109 = *a1;
                  __int16 v110 = a1;
                  do
                  {
                    int v111 = v110;
                    uint64_t v112 = *--v110;
                    uint64_t *v111 = v112;
                    uint64_t v113 = *(v111 - 2);
                    double v114 = (*(double (**)(uint64_t))(*(void *)v109 + 176))(v109);
                  }
                  while (v114 < (*(double (**)(uint64_t))(*(void *)v113 + 176))(v113));
                  *__int16 v110 = v109;
                }
                unint64_t v56 = a1 + 1;
              }
              while (a1 + 1 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != v9)
            {
              int64_t v69 = (unint64_t)(v13 - 2) >> 1;
              int64_t v115 = v69;
              do
              {
                int64_t v70 = v69;
                if (v115 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  CFRange v72 = &a1[v71];
                  if (2 * v69 + 2 < v13)
                  {
                    uint64_t v73 = v72[1];
                    double v74 = (*(double (**)(void))(*(void *)*v72 + 176))();
                    if (v74 < (*(double (**)(uint64_t))(*(void *)v73 + 176))(v73))
                    {
                      ++v72;
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  uint64_t v75 = &a1[v70];
                  uint64_t v76 = *v75;
                  double v77 = (*(double (**)(void))(*(void *)*v72 + 176))();
                  if (v77 >= (*(double (**)(uint64_t))(*(void *)v76 + 176))(v76))
                  {
                    uint64_t v78 = *v75;
                    do
                    {
                      uint64_t v79 = v72;
                      *uint64_t v75 = *v72;
                      if (v115 < v71) {
                        break;
                      }
                      uint64_t v80 = 2 * v71;
                      uint64_t v71 = (2 * v71) | 1;
                      CFRange v72 = &a1[v71];
                      uint64_t v81 = v80 + 2;
                      if (v80 + 2 < v13)
                      {
                        uint64_t v82 = v72[1];
                        double v83 = (*(double (**)(void))(*(void *)*v72 + 176))();
                        if (v83 < (*(double (**)(uint64_t))(*(void *)v82 + 176))(v82))
                        {
                          ++v72;
                          uint64_t v71 = v81;
                        }
                      }
                      double v84 = (*(double (**)(void))(*(void *)*v72 + 176))();
                      uint64_t v75 = v79;
                    }
                    while (v84 >= (*(double (**)(uint64_t))(*(void *)v78 + 176))(v78));
                    *uint64_t v79 = v78;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v85 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v86 = 0;
                uint64_t v116 = *a1;
                uint64_t v87 = v85 - 2;
                if (v85 < 2) {
                  uint64_t v87 = v85 - 1;
                }
                uint64_t v88 = v87 >> 1;
                uint64_t v89 = a1;
                do
                {
                  unint64_t v90 = v89;
                  v89 += v86 + 1;
                  uint64_t v91 = 2 * v86;
                  uint64_t v86 = (2 * v86) | 1;
                  uint64_t v92 = v91 + 2;
                  if (v91 + 2 < v85)
                  {
                    uint64_t v93 = v89[1];
                    double v94 = (*(double (**)(void))(*(void *)*v89 + 176))();
                    if (v94 < (*(double (**)(uint64_t))(*(void *)v93 + 176))(v93))
                    {
                      ++v89;
                      uint64_t v86 = v92;
                    }
                  }
                  *unint64_t v90 = *v89;
                }
                while (v86 <= v88);
                long long v95 = a2 - 1;
                if (v89 == a2 - 1)
                {
                  *uint64_t v89 = v116;
                  uint64_t v97 = v85 - 1;
                }
                else
                {
                  *uint64_t v89 = *v95;
                  *long long v95 = v116;
                  uint64_t v96 = (char *)v89 - (char *)a1 + 8;
                  uint64_t v97 = v85 - 1;
                  if (v96 >= 9)
                  {
                    unint64_t v98 = (((unint64_t)v96 >> 3) - 2) >> 1;
                    long long v99 = &a1[v98];
                    uint64_t v100 = *v89;
                    double v101 = (*(double (**)(void))(*(void *)*v99 + 176))();
                    if (v101 < (*(double (**)(uint64_t))(*(void *)v100 + 176))(v100))
                    {
                      uint64_t v102 = *v89;
                      do
                      {
                        int v103 = v99;
                        *uint64_t v89 = *v99;
                        if (!v98) {
                          break;
                        }
                        unint64_t v98 = (v98 - 1) >> 1;
                        long long v99 = &a1[v98];
                        double v104 = (*(double (**)(void))(*(void *)*v99 + 176))();
                        uint64_t v89 = v103;
                      }
                      while (v104 < (*(double (**)(uint64_t))(*(void *)v102 + 176))(v102));
                      *int v103 = v102;
                    }
                  }
                }
                --a2;
                BOOL v105 = v85 <= 2;
                uint64_t v85 = v97;
              }
              while (!v105);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = &a1[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_216257668(v15, a1, v10);
          }
          else
          {
            sub_216257668(a1, v15, v10);
            sub_216257668(a1 + 1, v15 - 1, a2 - 2);
            sub_216257668(a1 + 2, &a1[v14 + 1], a2 - 3);
            sub_216257668(v15 - 1, v15, &a1[v14 + 1]);
            uint64_t v16 = *a1;
            *a1 = *v15;
            *uint64_t v15 = v16;
          }
          --a3;
          if (a4) {
            break;
          }
          uint64_t v17 = *a1;
          double v18 = (*(double (**)(void))(*(void *)*(a1 - 1) + 176))(*(a1 - 1));
          if (v18 < (*(double (**)(uint64_t))(*(void *)v17 + 176))(v17)) {
            break;
          }
          uint64_t v36 = *a1;
          uint64_t v37 = *v10;
          double v38 = (*(double (**)(uint64_t))(*(void *)*a1 + 176))(*a1);
          if (v38 >= (*(double (**)(uint64_t))(*(void *)v37 + 176))(v37))
          {
            uint64_t v41 = a1 + 1;
            do
            {
              uint64_t v11 = v41;
              if (v41 >= v9) {
                break;
              }
              ++v41;
              uint64_t v42 = *v11;
              double v43 = (*(double (**)(uint64_t))(*(void *)v36 + 176))(v36);
            }
            while (v43 >= (*(double (**)(uint64_t))(*(void *)v42 + 176))(v42));
          }
          else
          {
            uint64_t v11 = a1;
            do
            {
              uint64_t v39 = v11[1];
              ++v11;
              double v40 = (*(double (**)(uint64_t))(*(void *)v36 + 176))(v36);
            }
            while (v40 >= (*(double (**)(uint64_t))(*(void *)v39 + 176))(v39));
          }
          uint64_t v44 = v9;
          if (v11 < v9)
          {
            uint64_t v44 = v9;
            do
            {
              uint64_t v45 = *--v44;
              double v46 = (*(double (**)(uint64_t))(*(void *)v36 + 176))(v36);
            }
            while (v46 < (*(double (**)(uint64_t))(*(void *)v45 + 176))(v45));
          }
          while (v11 < v44)
          {
            uint64_t v47 = *v11;
            *uint64_t v11 = *v44;
            *uint64_t v44 = v47;
            do
            {
              uint64_t v48 = v11[1];
              ++v11;
              double v49 = (*(double (**)(uint64_t))(*(void *)v36 + 176))(v36);
            }
            while (v49 >= (*(double (**)(uint64_t))(*(void *)v48 + 176))(v48));
            do
            {
              uint64_t v50 = *--v44;
              double v51 = (*(double (**)(uint64_t))(*(void *)v36 + 176))(v36);
            }
            while (v51 < (*(double (**)(uint64_t))(*(void *)v50 + 176))(v50));
          }
          CFIndex v52 = v11 - 1;
          BOOL v4 = v11 - 1 >= a1;
          BOOL v5 = v11 - 1 == a1;
          if (v11 - 1 != a1) {
            *a1 = *v52;
          }
          a4 = 0;
          uint64_t *v52 = v36;
        }
        uint64_t v19 = 0;
        uint64_t v20 = *a1;
        do
        {
          double v21 = (*(double (**)(uint64_t))(*(void *)a1[v19 + 1] + 176))(a1[v19 + 1]);
          ++v19;
        }
        while (v21 < (*(double (**)(uint64_t))(*(void *)v20 + 176))(v20));
        CFRange v22 = &a1[v19];
        if (v19 == 1)
        {
          uint64_t v9 = a2;
          do
          {
            if (v22 >= v9) {
              break;
            }
            uint64_t v25 = *--v9;
            double v26 = (*(double (**)(uint64_t))(*(void *)v25 + 176))(v25);
          }
          while (v26 >= (*(double (**)(uint64_t))(*(void *)v20 + 176))(v20));
        }
        else
        {
          do
          {
            uint64_t v23 = *--v9;
            double v24 = (*(double (**)(uint64_t))(*(void *)v23 + 176))(v23);
          }
          while (v24 >= (*(double (**)(uint64_t))(*(void *)v20 + 176))(v20));
        }
        if (v22 >= v9)
        {
          uint64_t v34 = v22 - 1;
        }
        else
        {
          CFRange v27 = &a1[v19];
          CFIndex v28 = v9;
          do
          {
            uint64_t v29 = *v27;
            *CFRange v27 = *v28;
            *CFIndex v28 = v29;
            do
            {
              uint64_t v30 = v27[1];
              ++v27;
              double v31 = (*(double (**)(uint64_t))(*(void *)v30 + 176))(v30);
            }
            while (v31 < (*(double (**)(uint64_t))(*(void *)v20 + 176))(v20));
            do
            {
              uint64_t v32 = *--v28;
              double v33 = (*(double (**)(uint64_t))(*(void *)v32 + 176))(v32);
            }
            while (v33 >= (*(double (**)(uint64_t))(*(void *)v20 + 176))(v20));
          }
          while (v27 < v28);
          uint64_t v34 = v27 - 1;
        }
        if (v34 != a1) {
          *a1 = *v34;
        }
        *uint64_t v34 = v20;
        BOOL v4 = v22 >= v9;
        uint64_t v9 = a2;
        if (v4) {
          break;
        }
LABEL_33:
        sub_2162567C8(a1, v34, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v34 + 1;
      }
      BOOL v35 = sub_216257884(a1, v34);
      uint64_t v11 = v34 + 1;
      if (sub_216257884(v34 + 1, a2)) {
        break;
      }
      if (!v35) {
        goto LABEL_33;
      }
    }
    a2 = v34;
    if (!v35) {
      continue;
    }
    break;
  }
}

void sub_216257668(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  double v7 = (*(double (**)(void))(*(void *)*a2 + 176))();
  double v8 = (*(double (**)(uint64_t))(*(void *)v6 + 176))(v6);
  uint64_t v9 = *a2;
  double v10 = (*(double (**)(void))(*(void *)*a3 + 176))();
  (*(void (**)(uint64_t))(*(void *)v9 + 176))(v9);
  if (v7 >= v8)
  {
    if (v10 < v11)
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      double v15 = (*(double (**)(void))(*(void *)*a2 + 176))();
      if (v15 < (*(double (**)(uint64_t))(*(void *)v14 + 176))(v14))
      {
        uint64_t v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
  else
  {
    uint64_t v12 = *a1;
    if (v10 >= v11)
    {
      *a1 = *a2;
      *a2 = v12;
      double v17 = (*(double (**)(void))(*(void *)*a3 + 176))();
      if (v17 < (*(double (**)(uint64_t))(*(void *)v12 + 176))(v12))
      {
        uint64_t v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v12;
    }
  }
}

BOOL sub_216257884(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *a1;
      double v7 = (*(double (**)(void))(*(void *)*(a2 - 1) + 176))(*(a2 - 1));
      if (v7 < (*(double (**)(uint64_t))(*(void *)v6 + 176))(v6))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_216257668(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_216257B24(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_216257CBC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      sub_216257668(a1, a1 + 1, a1 + 2);
      double v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = *v9;
    double v14 = (*(double (**)(void))(*(void *)*v10 + 176))();
    if (v14 < (*(double (**)(uint64_t))(*(void *)v13 + 176))(v13))
    {
      uint64_t v15 = *v10;
      uint64_t v16 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16 + 24) = *(uint64_t *)((char *)a1 + v16 + 16);
        if (v16 == -16) {
          break;
        }
        uint64_t v17 = *(uint64_t *)((char *)a1 + v16 + 8);
        double v18 = (*(double (**)(uint64_t))(*(void *)v15 + 176))(v15);
        v16 -= 8;
        if (v18 >= (*(double (**)(uint64_t))(*(void *)v17 + 176))(v17))
        {
          uint64_t v19 = (uint64_t *)((char *)a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      uint64_t *v19 = v15;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

void sub_216257B24(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  sub_216257668(a1, a2, a3);
  uint64_t v8 = *a3;
  double v9 = (*(double (**)(void))(*(void *)*a4 + 176))();
  if (v9 < (*(double (**)(uint64_t))(*(void *)v8 + 176))(v8))
  {
    uint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    uint64_t v11 = *a2;
    double v12 = (*(double (**)(void))(*(void *)*a3 + 176))();
    if (v12 < (*(double (**)(uint64_t))(*(void *)v11 + 176))(v11))
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      double v15 = (*(double (**)(void))(*(void *)*a2 + 176))();
      if (v15 < (*(double (**)(uint64_t))(*(void *)v14 + 176))(v14))
      {
        uint64_t v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
}

void sub_216257CBC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_216257B24(a1, a2, a3, a4);
  uint64_t v10 = *a4;
  double v11 = (*(double (**)(void))(*(void *)*a5 + 176))();
  if (v11 < (*(double (**)(uint64_t))(*(void *)v10 + 176))(v10))
  {
    uint64_t v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    uint64_t v13 = *a3;
    double v14 = (*(double (**)(void))(*(void *)*a4 + 176))();
    if (v14 < (*(double (**)(uint64_t))(*(void *)v13 + 176))(v13))
    {
      uint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = *a2;
      double v17 = (*(double (**)(void))(*(void *)*a3 + 176))();
      if (v17 < (*(double (**)(uint64_t))(*(void *)v16 + 176))(v16))
      {
        uint64_t v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        uint64_t v19 = *a1;
        double v20 = (*(double (**)(void))(*(void *)*a2 + 176))();
        if (v20 < (*(double (**)(uint64_t))(*(void *)v19 + 176))(v19))
        {
          uint64_t v21 = *a1;
          *a1 = *a2;
          *a2 = v21;
        }
      }
    }
  }
}

char *sub_216257EC8(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  BOOL v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  double v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      sub_21610CB04();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_2161129B4(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    CFIndex v28 = &v18[4 * v15];
    long long __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)CFIndex v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    BOOL v35 = v30;
    BOOL v5 = sub_21617B400((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    double v24 = &v5[4 * a5];
    uint64_t v25 = &v23[-4 * a5];
    double v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      double v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)double v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_2162580A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2162580D8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  double v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *double v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_21610CB04();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = sub_216112970(v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void sub_2162581E4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      sub_2161121B0(v2);
    }
    JUMPOUT(0x2166CA800);
  }
}

uint64_t sub_21625823C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21635F874(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21625828C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_216258300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162583E0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_21625831C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216258354(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_216225EDC(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_21625839C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC010)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2162583E0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216225EDC(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_216258430(uint64_t a1, _WORD **a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v6 = sub_216322CC4(*(void *)(v4 + 32), a2[1]);
  uint64_t v8 = v7;
  int v130 = (_DWORD *)v4;
  uint64_t v9 = (*(uint64_t (**)(void, _WORD *, uint64_t))(**(void **)(v4 + 32) + 24))(*(void *)(v4 + 32), a2[1], 1);
  unint64_t v11 = v10;
  unint64_t v131 = v10;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = &v8[-v5];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6 + 2 * v5;
  double v12 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v12 != 0.0) {
    goto LABEL_37;
  }
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v13 = *(uint64_t **)(a1 + 80);
  uint64_t v15 = *v13;
  uint64_t v16 = v13[1];
  LODWORD(v135) = 0;
  sub_21628CDA8(*(uint64_t **)(*(void *)(*(void *)v14 + 72) + 8), v15, v16, &v135);
  uint64_t v139 = 0;
  v140[0] = 0;
  long long __p = 0;
  sub_21617B5A4(&__p, *(const void **)(v14 + 16), *(void *)(v14 + 24), (uint64_t)(*(void *)(v14 + 24) - *(void *)(v14 + 16)) >> 2);
  uint64_t v18 = v139;
  size_t v17 = (char *)v140[0];
  if ((unint64_t)v139 >= v140[0])
  {
    uint64_t v20 = (char *)__p;
    uint64_t v21 = (v139 - (unsigned char *)__p) >> 2;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 62) {
      goto LABEL_194;
    }
    uint64_t v23 = v140[0] - (void)__p;
    if ((uint64_t)(v140[0] - (void)__p) >> 1 > v22) {
      unint64_t v22 = v23 >> 1;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      uint64_t v25 = (char *)sub_2161129B4((uint64_t)v140, v24);
      uint64_t v20 = (char *)__p;
      uint64_t v18 = v139;
    }
    else
    {
      uint64_t v25 = 0;
    }
    double v26 = &v25[4 * v21];
    size_t v17 = &v25[4 * v24];
    *(_DWORD *)double v26 = v135;
    uint64_t v19 = v26 + 4;
    while (v18 != v20)
    {
      int v27 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v26 - 1) = v27;
      v26 -= 4;
    }
    long long __p = v26;
    uint64_t v139 = v19;
    v140[0] = v17;
    if (v20)
    {
      operator delete(v20);
      size_t v17 = (char *)v140[0];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v139 = v135;
    uint64_t v19 = v18 + 4;
  }
  uint64_t v139 = v19;
  if (v19 >= v17)
  {
    uint64_t v29 = (char *)__p;
    uint64_t v30 = (v19 - (unsigned char *)__p) >> 2;
    unint64_t v31 = v30 + 1;
    if (!((unint64_t)(v30 + 1) >> 62))
    {
      uint64_t v32 = v17 - (unsigned char *)__p;
      if (v32 >> 1 > v31) {
        unint64_t v31 = v32 >> 1;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33)
      {
        uint64_t v34 = (char *)sub_2161129B4((uint64_t)v140, v33);
        uint64_t v29 = (char *)__p;
        uint64_t v19 = v139;
      }
      else
      {
        uint64_t v34 = 0;
      }
      BOOL v35 = &v34[4 * v30];
      uint64_t v36 = &v34[4 * v33];
      *(_DWORD *)BOOL v35 = 2;
      CFIndex v28 = v35 + 4;
      while (v19 != v29)
      {
        int v37 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v35 - 1) = v37;
        v35 -= 4;
      }
      long long __p = v35;
      uint64_t v139 = v28;
      v140[0] = v36;
      if (v29) {
        operator delete(v29);
      }
      goto LABEL_34;
    }
LABEL_194:
    sub_21610CB04();
  }
  *(_DWORD *)uint64_t v19 = 2;
  CFIndex v28 = v19 + 4;
LABEL_34:
  uint64_t v139 = v28;
  LMLanguageModelJointProbability();
  double v39 = v38;
  if (__p)
  {
    uint64_t v139 = (char *)__p;
    operator delete(__p);
  }
  *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = -v39;
  double v12 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
LABEL_37:
  double v40 = *(void ***)(a1 + 72);
  uint64_t v41 = (char *)v40[2];
  uint64_t v42 = (char *)v40[3];
  if (v41 == v42) {
    int v43 = 0;
  }
  else {
    int v43 = *((_DWORD *)v42 - 1);
  }
  int v44 = v130[10];
  BOOL v47 = v42 - v41 == 4 && v43 == 1 || v43 == 502;
  if (((*a2)[2] & 0x800) != 0 && !v47) {
    return;
  }
  int v127 = v40 + 2;
  BOOL v126 = v47;
  long long __p = 0;
  uint64_t v139 = 0;
  v140[0] = 0;
  int v135 = 0;
  uint64_t v136 = 0;
  unint64_t v137 = 0;
  uint64_t v48 = *(uint64_t **)(*((void *)*v40 + 9) + 8);
  unsigned int v129 = v40;
  char v128 = v44;
  if (v11)
  {
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    do
    {
      uint64_t v51 = *(unsigned __int16 *)(v9 + 2 * v49) - 48;
      LODWORD(v132) = 0;
      sub_21628CDA8(v48, v6 + 2 * v50, v51, &v132);
      CFIndex v52 = v136;
      if ((unint64_t)v136 >= v137)
      {
        double v54 = (char *)v135;
        int64_t v55 = (v136 - (unsigned char *)v135) >> 2;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v57 = v137 - (void)v135;
        if ((uint64_t)(v137 - (void)v135) >> 1 > v56) {
          unint64_t v56 = v57 >> 1;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        if (v58)
        {
          uint64_t v59 = (char *)sub_2161129B4((uint64_t)&v137, v58);
          double v54 = (char *)v135;
          CFIndex v52 = v136;
        }
        else
        {
          uint64_t v59 = 0;
        }
        CFIndex v60 = &v59[4 * v55];
        *(_DWORD *)CFIndex v60 = v132;
        uint64_t v53 = v60 + 4;
        while (v52 != v54)
        {
          int v61 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *((_DWORD *)v60 - 1) = v61;
          v60 -= 4;
        }
        int v135 = v60;
        uint64_t v136 = v53;
        unint64_t v137 = (unint64_t)&v59[4 * v58];
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v136 = v132;
        uint64_t v53 = v52 + 4;
      }
      uint64_t v136 = v53;
      uint64_t v62 = v139;
      if ((unint64_t)v139 >= v140[0])
      {
        uint64_t v64 = (char *)__p;
        uint64_t v65 = (v139 - (unsigned char *)__p) >> 3;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v67 = v140[0] - (void)__p;
        if ((uint64_t)(v140[0] - (void)__p) >> 2 > v66) {
          unint64_t v66 = v67 >> 2;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          int64_t v69 = (char *)sub_2160FFAA8((uint64_t)v140, v68);
          uint64_t v64 = (char *)__p;
          uint64_t v62 = v139;
        }
        else
        {
          int64_t v69 = 0;
        }
        int64_t v70 = (uint64_t *)&v69[8 * v65];
        *int64_t v70 = v51;
        double v63 = (char *)(v70 + 1);
        while (v62 != v64)
        {
          uint64_t v71 = *((void *)v62 - 1);
          v62 -= 8;
          *--int64_t v70 = v71;
        }
        long long __p = v70;
        uint64_t v139 = v63;
        v140[0] = &v69[8 * v68];
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        *(void *)uint64_t v139 = v51;
        double v63 = v62 + 8;
      }
      uint64_t v139 = v63;
      v50 += v51;
      ++v49;
    }
    while (v49 < v131);
  }
  else
  {
    if (!v40[1]) {
      goto LABEL_109;
    }
    unint64_t v72 = (unint64_t)v40[5];
    if ((unint64_t)v8 <= v72) {
      goto LABEL_109;
    }
    while (1)
    {
      uint64_t v73 = *(void *)(*((void *)*v40 + 11) + 8);
      unsigned int v74 = *(unsigned __int16 *)(v6 + 2 * v72);
      uint64_t v77 = *(void *)(v73 + 8);
      uint64_t v75 = v73 + 8;
      uint64_t v76 = v77;
      if (v77)
      {
        uint64_t v78 = v75;
        do
        {
          unsigned int v79 = *(unsigned __int16 *)(v76 + 26);
          BOOL v80 = v79 >= v74;
          if (v79 >= v74) {
            uint64_t v81 = (uint64_t *)v76;
          }
          else {
            uint64_t v81 = (uint64_t *)(v76 + 8);
          }
          if (v80) {
            uint64_t v78 = v76;
          }
          uint64_t v76 = *v81;
        }
        while (*v81);
        if (v78 != v75 && *(unsigned __int16 *)(v78 + 26) <= v74) {
          LOWORD(v74) = *(_WORD *)(v78 + 28);
        }
      }
      LOWORD(v132) = v74;
      uint64_t CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      if (!CursorByAdvancingWithCharacters) {
        break;
      }
      if ((char *)++v72 == v8) {
        goto LABEL_105;
      }
    }
    if ((char *)v72 != v8) {
      goto LABEL_109;
    }
LABEL_105:
    if (LMLexiconCursorHasEntries())
    {
      int TokenID = 0;
      if (CursorByAdvancingWithCharacters && *v48) {
        int TokenID = LMLexiconCursorFirstTokenID();
      }
    }
    else
    {
LABEL_109:
      int TokenID = 0;
    }
    double v84 = v136;
    if ((unint64_t)v136 >= v137)
    {
      uint64_t v86 = (char *)v135;
      int64_t v87 = (v136 - (unsigned char *)v135) >> 2;
      unint64_t v88 = v87 + 1;
      if ((unint64_t)(v87 + 1) >> 62) {
        sub_21610CB04();
      }
      uint64_t v89 = v137 - (void)v135;
      if ((uint64_t)(v137 - (void)v135) >> 1 > v88) {
        unint64_t v88 = v89 >> 1;
      }
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v90 = v88;
      }
      if (v90)
      {
        uint64_t v91 = (char *)sub_2161129B4((uint64_t)&v137, v90);
        uint64_t v86 = (char *)v135;
        double v84 = v136;
      }
      else
      {
        uint64_t v91 = 0;
      }
      uint64_t v92 = &v91[4 * v87];
      uint64_t v93 = &v91[4 * v90];
      *(_DWORD *)uint64_t v92 = TokenID;
      uint64_t v85 = v92 + 4;
      while (v84 != v86)
      {
        int v94 = *((_DWORD *)v84 - 1);
        v84 -= 4;
        *((_DWORD *)v92 - 1) = v94;
        v92 -= 4;
      }
      int v135 = v92;
      uint64_t v136 = v85;
      unint64_t v137 = (unint64_t)v93;
      if (v86) {
        operator delete(v86);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v136 = TokenID;
      uint64_t v85 = v84 + 4;
    }
    uint64_t v136 = v85;
    long long v95 = v139;
    if ((unint64_t)v139 >= v140[0])
    {
      uint64_t v97 = (char *)__p;
      uint64_t v98 = (v139 - (unsigned char *)__p) >> 3;
      unint64_t v99 = v98 + 1;
      if ((unint64_t)(v98 + 1) >> 61) {
        sub_21610CB04();
      }
      uint64_t v100 = v140[0] - (void)__p;
      if ((uint64_t)(v140[0] - (void)__p) >> 2 > v99) {
        unint64_t v99 = v100 >> 2;
      }
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v101 = v99;
      }
      if (v101)
      {
        uint64_t v102 = (char *)sub_2160FFAA8((uint64_t)v140, v101);
        uint64_t v97 = (char *)__p;
        long long v95 = v139;
      }
      else
      {
        uint64_t v102 = 0;
      }
      int v103 = &v102[8 * v98];
      double v104 = &v102[8 * v101];
      *(void *)int v103 = v8;
      uint64_t v96 = v103 + 8;
      while (v95 != v97)
      {
        uint64_t v105 = *((void *)v95 - 1);
        v95 -= 8;
        *((void *)v103 - 1) = v105;
        v103 -= 8;
      }
      long long __p = v103;
      uint64_t v139 = v96;
      v140[0] = v104;
      if (v97) {
        operator delete(v97);
      }
    }
    else
    {
      *(void *)uint64_t v139 = v8;
      uint64_t v96 = v95 + 8;
    }
    uint64_t v139 = v96;
  }
  BOOL v132 = 0;
  BOOL v133 = 0;
  uint64_t v134 = 0;
  uint64_t v106 = (char *)v129[2];
  uint64_t v107 = (uint64_t)v129[3];
  if (v106 == (char *)v107) {
    int v108 = 0;
  }
  else {
    int v108 = *(_DWORD *)(v107 - 4);
  }
  BOOL v111 = v107 - (void)v106 == 4 && v108 == 1 || v108 == 502;
  if (v127 == &v132)
  {
    uint64_t v112 = 0;
  }
  else
  {
    sub_2162580D8((char *)&v132, v106, v107, (v107 - (uint64_t)v106) >> 2);
    uint64_t v112 = (uint64_t)v133;
  }
  sub_216257EC8((uint64_t)&v132, v112, (char *)v135, v136, (v136 - (unsigned char *)v135) >> 2);
  LMLanguageModelJointProbability();
  double v114 = -v113;
  if (v111)
  {
    LMLanguageModelJointProbability();
    double v114 = v115 * -0.5 + v114 * 0.5;
  }
  int v116 = LMLanguageModelTokenSequenceIsBlocklisted() ^ 1;
  if ((v128 & 2) != 0 || (v116 & 1) == 0)
  {
    if (!*((unsigned char *)v129 + 56) || ((v116 ^ 1) & 1) != 0) {
      goto LABEL_180;
    }
    goto LABEL_177;
  }
  if (*((unsigned char *)v129 + 56))
  {
    if (v126)
    {
LABEL_177:
      log2((double)(unint64_t)v129[5]);
      goto LABEL_178;
    }
    BOOL v118 = (v128 & 8) == 0;
    double v117 = 0.0;
    double v119 = -2.0;
    goto LABEL_172;
  }
  double v117 = 0.0;
  if (!v126 && ((v128 & 8) != 0 || (unint64_t)v129[5] <= 2))
  {
    if ((v128 & 8) != 0)
    {
LABEL_174:
      if (v114 + v117 >= v12)
      {
        int v116 = 0;
        goto LABEL_180;
      }
      double v120 = v114 - *((double *)v129 + 6);
      int v116 = v120 < 5.0;
      if (!*((unsigned char *)v129 + 56) || v120 >= 5.0) {
        goto LABEL_180;
      }
      goto LABEL_177;
    }
    BOOL v118 = (unsigned char *)v129[3] - (unsigned char *)v129[2] == 4;
    double v117 = -0.15;
    double v119 = -0.5;
LABEL_172:
    if (v118) {
      double v117 = v119;
    }
    goto LABEL_174;
  }
LABEL_178:
  int v116 = 1;
LABEL_180:
  if (v132)
  {
    BOOL v133 = v132;
    operator delete(v132);
  }
  if (v135)
  {
    uint64_t v136 = (char *)v135;
    operator delete(v135);
  }
  if (__p)
  {
    uint64_t v139 = (char *)__p;
    operator delete(__p);
  }
  if (v116)
  {
    uint64_t v121 = (2 * *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    if (v121)
    {
      unsigned int v122 = 0;
      unint64_t v123 = *(char **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      do
      {
        int v124 = *v123++;
        unsigned int v122 = (1025 * (v122 + v124)) ^ ((1025 * (v122 + v124)) >> 6);
        --v121;
      }
      while (v121);
    }
    uint64_t v125 = sub_216225B1C(*(uint64_t **)(a1 + 64), *(void *)(*(void *)(*(void *)v130 + 88) + 8));
    sub_21625828C(&__p, v125);
  }
}

void sub_216258FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216259064(int a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  unint64_t v5 = (unint64_t)v4;
  if (!v4) {
    return v5;
  }
  if (!sub_2162E42F8((uint64_t)v4)) {
    return 0;
  }
  CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(unint64_t))(*(void *)v5 + 440))(v5);
  valuePtr[1] = v6;
  unint64_t v5 = v6 != 0;
  if (v6)
  {
    CFStringRef v7 = v6;
    valuePtr[0] = CFStringGetLength(v6);
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberCFIndexType, valuePtr);
    CFDictionaryAddValue(a2, @"acceptedSyllableLength", v8);
    if (v8) {
      CFRelease(v8);
    }
    CFRelease(v7);
  }
  return v5;
}

void sub_216259198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  sub_216195244((const void **)va, 0);
  sub_2161868BC((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_2162591CC()
{
}

uint64_t sub_2162591E0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = objc_opt_class();
    return MEMORY[0x270F9A6D0](v1, sel_isMemberOfClass_, v2);
  }
  return result;
}

uint64_t sub_21625922C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [MEMORY[0x263F08850] a2:a3];

  return MEMORY[0x270F9A6D0](v4, sel_removeItemAtURL_error_, a1);
}

uint64_t sub_216259270(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [MEMORY[0x263EFFA40] a2:a3];
  uint64_t v6 = [NSString stringWithCString:a1 encoding:4];

  return MEMORY[0x270F9A6D0](v4, sel_BOOLForKey_, v6);
}

void *sub_2162592CC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [MEMORY[0x263EFFA40] a2:a3];
  uint64_t v6 = [NSString stringWithCString:a1 encoding:1];
  uint64_t result = [v4 stringForKey:v7];
  if (result)
  {
    return [result UTF8String];
  }
  return result;
}

uint64_t sub_21625933C()
{
  if (qword_26797DE58 != -1) {
    dispatch_once(&qword_26797DE58, &unk_26C6C9FC0);
  }
  return qword_26797DE60;
}

void sub_216259380()
{
  uint64_t v0 = sub_2161E1880("/System/Library/PrivateFrameworks/ProofReader.framework");
  uint64_t v3 = [v0 stringByStandardizingPath:v1];
  qword_26797DE60 = (uint64_t)(id)[MEMORY[0x263F086E0] bundleWithPath:v4];

  CFRelease(v0);
}

CFStringRef sub_2162593E0(CFStringRef theString, int a2, char a3)
{
  if (a3)
  {
    MutableCFStringRef Copy = CFStringCreateMutableCopy(0, 0, theString);
    if (sub_2161E2834(a2) == 2 || sub_2161E2834(a2) == 5) {
      CFStringRef v6 = @"Traditional - Simplified";
    }
    else {
      CFStringRef v6 = @"Simplified - Traditional";
    }
    CFStringTransform(MutableCopy, 0, v6, 0);
    return MutableCopy;
  }
  else
  {
    return CFStringCreateCopy(0, theString);
  }
}

uint64_t sub_21625947C(int a1)
{
  if (qword_26797DE80 != -1) {
    dispatch_once(&qword_26797DE80, &unk_26C6CA260);
  }
  switch(a1)
  {
    case 5:
      return qword_26797DE78;
    case 2:
      return qword_26797DE70;
    case 1:
      return qword_26797DE68;
  }
  return 0;
}

void *sub_216259504()
{
  qword_26797DE68 = &unk_26C700058;
  qword_26797DE70 = &unk_26C700070;
  uint64_t result = &unk_26C700088;
  qword_26797DE78 = (uint64_t)result;
  return result;
}

uint64_t sub_216259558(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (qword_26797DE90 != -1) {
    dispatch_once(&qword_26797DE90, &unk_26C6CA2C0);
  }
  uint64_t result = [a1 a2:a3];
  if (result)
  {
    unint64_t v7 = result;
    if (objc_msgSend__fastCharacterContents(a1, v5, v6))
    {
      return uset_containsAllCodePoints() != 0;
    }
    else
    {
      uint64_t v9 = 0;
      while (1)
      {
        if (v7 >= 0x100)
        {
          uint64_t v10 = 256;
          [a1 getCharacters:v8 range:v9];
        }
        else
        {
          uint64_t v10 = v7;
          [a1 getCharacters:v8 range:v9];
        }
        uint64_t result = uset_containsAllCodePoints();
        if (!result) {
          break;
        }
        v9 += v10;
        v7 -= v10;
        if (!v7) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_216259674(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = sub_216259694(a1, a2, a3);
  qword_26797DE88 = result;
  return result;
}

uint64_t sub_216259694(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  HIDWORD(v9) = 0;
  uint64_t v3 = [@"[[:Hani:]]" lengthWithOptions:a2];
  if (objc_msgSend__fastCharacterContents(@"[[:Hani:]]", v4, v5))
  {
    uint64_t result = uset_openPattern();
  }
  else
  {
    MEMORY[0x270FA5388]();
    [@"[[:Hani:]]" getCharacters:v8 range:NSMakeRange((uint64_t)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), 0) v3];
    uint64_t result = uset_openPattern();
  }
  if (SHIDWORD(v9) >= 1)
  {
    if (result)
    {
      uset_close();
      return 0;
    }
  }
  return result;
}

uint64_t sub_216259794(unsigned int a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_26426C1B0 + (int)a1);
  }
}

void *sub_2162597B4(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_21625D050((uint64_t)(a1 + 1));
  a1[55] = sub_2161A2A80();
  sub_2161C04AC(0);
  a1[56] = &qword_26797EF20;
  a1[57] = a3;
  a1[2] = a2;
  return a1;
}

void sub_216259818(_Unwind_Exception *a1)
{
  sub_2161C6D08(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21625982C(uint64_t result, uint64_t a2, int a3, unsigned __int8 a4)
{
  uint64_t v4 = *(void *)(a2 + 64);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 8) >> 1;
    int v6 = *(unsigned __int16 *)(a2 + 88) >> 1;
  }
  else
  {
    int v6 = *(unsigned __int16 *)(a2 + 88) >> 1;
    LOWORD(v5) = v6;
  }
  *(_WORD *)(result + 26) = v5;
  *(_DWORD *)(result + 2sub_216195B94(&a9, 0) = v6;
  __int16 v7 = *(_WORD *)(a2 + 104);
  if ((v7 & 0x10) != 0)
  {
    int v9 = 8;
  }
  else if ((v7 & 0x20) != 0)
  {
    int v9 = 10;
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(a2 + 109) - 7;
    if (v8 > 4) {
      int v9 = 0;
    }
    else {
      int v9 = dword_216382BA8[(char)v8];
    }
  }
  int v10 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(result + 8) = *(unsigned __int8 *)(a2 + 109);
  *(_DWORD *)(result + 12) = v10;
  int v11 = *(__int16 *)(a2 + 84);
  *(_DWORD *)uint64_t result = v9;
  *(_DWORD *)(result + 4) = v11;
  HIDWORD(v12) = *(_DWORD *)(a2 + 92);
  LODWORD(v12) = HIDWORD(v12);
  *(_DWORD *)(result + 3sub_216195B94(&a9, 0) = v12 >> 16;
  *(unsigned char *)(result + 36) = *(unsigned char *)(a2 + 108);
  if (((a3 == 1) & a4) != 0) {
    char v13 = 4;
  }
  else {
    char v13 = 0;
  }
  *(unsigned char *)(result + 37) = v13 | (8 * (*(unsigned char *)(a2 + 107) != 0)) | *(unsigned char *)(result + 37) & 0xF0 | (2 * (*(unsigned char *)(a2 + 106) != 0)) | (*(unsigned char *)(a2 + 106) == 0);
  *(_WORD *)(result + 24) = a3;
  if (v4) {
    LODWORD(v4) = *(unsigned __int8 *)(v4 + 14);
  }
  *(_DWORD *)(result + 16) = v4;
  return result;
}

void sub_216259928(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, int a7)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  unsigned int v9 = *(_DWORD *)a1[57];
  memset(v53, 0, sizeof(v53));
  memset(v52, 0, sizeof(v52));
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  if (a2)
  {
    BOOL v48 = 0;
    int v10 = 0;
    int v11 = 0;
    int v12 = (v9 >> 5) & 1;
    uint64_t v13 = a2;
    do
    {
      int v14 = *(unsigned __int8 *)(v13 + 109);
      if (v14 != 2)
      {
        if (a5 < 1)
        {
          v11 += *(__int16 *)(v13 + 84);
          int v15 = *(__int16 *)(v13 + 86);
          if (*(void *)v13)
          {
            v11 += (*(uint64_t (**)(uint64_t, void, void))(*(void *)*a1 + 64))(*a1, *(unsigned __int16 *)(*(void *)v13 + 92), *(unsigned __int16 *)(v13 + 94));
            int v14 = *(unsigned __int8 *)(v13 + 109);
          }
          v10 += v15;
          if (v14 != 3)
          {
            unsigned int v16 = sub_216355CA0(*a1, v13, v12, word_26797DEC8, 0x80u);
            int v17 = v16;
            if (v16)
            {
              uint64_t v18 = v16;
              sub_216184B80((char *)v53, (char *)word_26797DEC8, v16);
              uint64_t v19 = *(void *)(v13 + 64);
              if (v19) {
                sub_216184B80((char *)v52, *(char **)v19, (unint64_t)*(unsigned int *)(v19 + 8) >> 1);
              }
              uint64_t v56 = 0;
              long long v54 = 0u;
              long long v55 = 0u;
              sub_21625982C((uint64_t)&v54, v13, v17, a6);
              if (*(unsigned __int16 *)(a1[56] + 50) == *(unsigned __int16 *)(v13 + 94))
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DE98, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_26797DE98))
                {
                  v57[5] = *(_OWORD *)&off_26426C238;
                  v57[6] = xmmword_26426C248;
                  v57[7] = unk_26426C258;
                  v57[8] = xmmword_26426C268;
                  v57[1] = *(_OWORD *)&off_26426C1F8;
                  v57[2] = xmmword_26426C208;
                  v57[3] = *(_OWORD *)&off_26426C218;
                  v57[4] = xmmword_26426C228;
                  v57[0] = xmmword_26426C1E8;
                  sub_2161E010C((uint64_t)&qword_26797DEA0, v57, 9);
                  __cxa_atexit((void (*)(void *))sub_2161DA4F4, &qword_26797DEA0, &dword_2160F5000);
                  __cxa_guard_release(&qword_26797DE98);
                }
                unint64_t v20 = sub_2161E03F4((uint64_t)&unk_26797DEB8, word_26797DEC8, v18);
                if (qword_26797DEA8)
                {
                  uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)qword_26797DEA8);
                  v21.i16[0] = vaddlv_u8(v21);
                  if (v21.u32[0] > 1uLL)
                  {
                    unint64_t v22 = v20;
                    if (v20 >= qword_26797DEA8) {
                      unint64_t v22 = v20 % qword_26797DEA8;
                    }
                  }
                  else
                  {
                    unint64_t v22 = (qword_26797DEA8 - 1) & v20;
                  }
                  uint64_t v23 = *(void **)(qword_26797DEA0 + 8 * v22);
                  if (v23)
                  {
                    for (uint64_t i = (void *)*v23; i; uint64_t i = (void *)*i)
                    {
                      unint64_t v25 = i[1];
                      if (v20 == v25)
                      {
                        if (i[3] == v18)
                        {
                          double v26 = (unsigned __int16 *)i[2];
                          uint64_t v27 = v18;
                          CFIndex v28 = (__int16 *)word_26797DEC8;
                          while ((unsigned __int16)*v28 == *v26)
                          {
                            ++v26;
                            ++v28;
                            if (!--v27) {
                              goto LABEL_34;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v21.u32[0] > 1uLL)
                        {
                          if (v25 >= qword_26797DEA8) {
                            v25 %= (unint64_t)qword_26797DEA8;
                          }
                        }
                        else
                        {
                          v25 &= qword_26797DEA8 - 1;
                        }
                        if (v25 != v22) {
                          break;
                        }
                      }
                    }
                  }
                }
                LODWORD(v54) = 5;
              }
LABEL_34:
              uint64_t v29 = v50;
              if (v50 >= v51)
              {
                unint64_t v33 = __p;
                unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v50 - __p) >> 3) + 1;
                if (v34 > 0x666666666666666) {
                  sub_21618B344();
                }
                if (0x999999999999999ALL * ((v51 - __p) >> 3) > v34) {
                  unint64_t v34 = 0x999999999999999ALL * ((v51 - __p) >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((v51 - __p) >> 3) >= 0x333333333333333) {
                  unint64_t v35 = 0x666666666666666;
                }
                else {
                  unint64_t v35 = v34;
                }
                if (v35)
                {
                  uint64_t v36 = (char *)sub_21618B4A8((uint64_t)&v51, v35);
                  unint64_t v33 = __p;
                  uint64_t v29 = v50;
                }
                else
                {
                  uint64_t v36 = 0;
                }
                int v37 = &v36[8 * ((v50 - __p) >> 3)];
                long long v38 = v54;
                long long v39 = v55;
                *((void *)v37 + 4) = v56;
                *(_OWORD *)int v37 = v38;
                *((_OWORD *)v37 + 1) = v39;
                if (v29 == v33)
                {
                  int v43 = &v36[8 * ((v50 - __p) >> 3)];
                }
                else
                {
                  double v40 = &v36[8 * ((v50 - __p) >> 3)];
                  do
                  {
                    long long v41 = *(_OWORD *)(v29 - 40);
                    long long v42 = *(_OWORD *)(v29 - 24);
                    int v43 = v40 - 40;
                    *((void *)v40 - 1) = *((void *)v29 - 1);
                    *(_OWORD *)(v40 - 24) = v42;
                    *(_OWORD *)(v40 - 4sub_216195B94(&a9, 0) = v41;
                    v29 -= 40;
                    v40 -= 40;
                  }
                  while (v29 != v33);
                }
                uint64_t v32 = v37 + 40;
                long long __p = v43;
                uint64_t v51 = &v36[40 * v35];
                if (v33) {
                  operator delete(v33);
                }
              }
              else
              {
                long long v30 = v54;
                long long v31 = v55;
                *((void *)v50 + 4) = v56;
                *(_OWORD *)uint64_t v50 = v30;
                *((_OWORD *)v50 + 1) = v31;
                uint64_t v32 = v50 + 40;
              }
              uint64_t v50 = v32;
            }
            BOOL v44 = v48 || *(unsigned char *)(v13 + 106) != 0;
            BOOL v48 = v44;
          }
        }
        else
        {
          --a5;
        }
      }
      uint64_t v13 = *(void *)(v13 + 8);
    }
    while (v13);
  }
  if (a7) {
    sub_216356080(a2, 1, a5);
  }
  sub_216268B0C();
  operator new();
}

void sub_216259F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void sub_216259FCC(uint64_t a1, _WORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_WORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    unsigned int v8 = *(_WORD **)a1;
    uint64_t v9 = (uint64_t)v6 - *(void *)a1;
    if (v9 <= -3) {
      sub_21610CB04();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v5 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      int v14 = (char *)sub_21610FD44(v4, v13);
      unsigned int v8 = *(_WORD **)a1;
      int v6 = *(_WORD **)(a1 + 8);
    }
    else
    {
      int v14 = 0;
    }
    int v15 = &v14[2 * v10];
    unsigned int v16 = &v14[2 * v13];
    *(_WORD *)int v15 = *a2;
    __int16 v7 = v15 + 2;
    while (v6 != v8)
    {
      __int16 v17 = *--v6;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int v6 = *a2;
    __int16 v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t sub_21625A0B0(uint64_t a1, void *a2, uint64_t *a3, int a4, int *a5, unsigned int *a6)
{
  v123[4] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t))(*(void *)*a3 + 544))(*a3);
  if (!v12) {
    return 0;
  }
  int v116 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 408))(*a3);
  uint64_t v13 = *a3;
  if (a6)
  {
    (*(void (**)(uint64_t, void))(*(void *)v13 + 480))(*a3, *a6);
    (*(void (**)(void))(*(void *)*a3 + 488))();
    int v14 = *a6;
    int v15 = v116;
  }
  else
  {
    sub_2161C04AC(0);
    unsigned int v16 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 304))(v13);
    uint64_t v17 = *v16;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16[1] - *v16) >> 3) < 2
      || *(unsigned char *)(v17 + 38) == 1
      || *(unsigned char *)(v17 + 78) == 1)
    {
      goto LABEL_35;
    }
    unsigned int v18 = *(unsigned __int16 *)(v17 + 30);
    unsigned int v19 = *(unsigned __int16 *)(v17 + 70);
    __s1 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 544))(v13);
    uint64_t v20 = *(unsigned __int16 *)(*v16 + 24);
    sub_2161C04AC(0);
    if ((unsigned __int16)xmmword_26797EF70 > v18 || WORD1(xmmword_26797EF70) < v18)
    {
      BOOL v22 = WORD5(xmmword_26797EF70) < v18 || WORD4(xmmword_26797EF70) > v18;
      BOOL v23 = !v22 || HIWORD(xmmword_26797EF70) == v18;
      if (!v23 && WORD6(xmmword_26797EF70) != v18) {
        goto LABEL_35;
      }
    }
    sub_2161C04AC(0);
    BOOL v25 = (unsigned __int16)xmmword_26797EF70 <= v19 && WORD1(xmmword_26797EF70) >= v19;
    if (v25
      || (WORD4(xmmword_26797EF70) <= v19 ? (BOOL v26 = WORD5(xmmword_26797EF70) >= v19) : (BOOL v26 = 0),
          v26
       || (HIWORD(xmmword_26797EF70) != v19 ? (BOOL v27 = WORD6(xmmword_26797EF70) == v19) : (BOOL v27 = 1),
           v27
        || v18 == HIWORD(xmmword_26797EF70)
        && (v19 != (unsigned __int16)qword_26797EF80 ? (BOOL v111 = v19 == WORD1(qword_26797EF80)) : (BOOL v111 = 1), v111))))
    {
LABEL_35:
      int v28 = 0;
    }
    else
    {
      int v28 = 2000;
      if (v20 == 2)
      {
        if (!memcmp(__s1, "g0Y0", 2 * v20)) {
          int v28 = 0;
        }
        else {
          int v28 = 2000;
        }
      }
    }
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 544))(v13);
    uint64_t v30 = *v16;
    uint64_t v115 = a1;
    if (v16[1] != *v16)
    {
      uint64_t v31 = v29;
      unint64_t v32 = 0;
      int v33 = 0;
      uint64_t v34 = 24;
      do
      {
        int v35 = sub_2161EC60C(v31, *(unsigned __int16 *)(v30 + v34), 0, 0);
        if (v33 == v35) {
          int v36 = 15000;
        }
        else {
          int v36 = 25000;
        }
        if (v35) {
          BOOL v37 = v33 == 0;
        }
        else {
          BOOL v37 = 1;
        }
        if (v37) {
          int v36 = 0;
        }
        v28 += v36;
        uint64_t v30 = *v16;
        v31 += 2 * *(unsigned __int16 *)(*v16 + v34);
        ++v32;
        v34 += 40;
        int v33 = v35;
      }
      while (v32 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16[1] - *v16) >> 3));
    }
    uint64_t v38 = *a3;
    int v39 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 112))(*a3);
    (*(void (**)(uint64_t, void))(*(void *)v38 + 480))(v38, (v39 + v28));
    uint64_t v40 = *a3;
    uint64_t v41 = (*(unsigned int (**)(uint64_t))(*(void *)*a3 + 384))(*a3) + v28;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 488))(v40, v41);
    long long v42 = (_DWORD *)*a3;
    int v15 = v116;
    a1 = v115;
    if (v116 != 1) {
      v42[55] += v28;
    }
    int v14 = (*(uint64_t (**)(_DWORD *))(*(void *)v42 + 112))(v42);
  }
  uint64_t v43 = *(void *)*a3;
  if (v15 != 1)
  {
    int v61 = (unsigned __int16 *)(*(uint64_t (**)(void))(v43 + 544))();
    if (a4)
    {
      uint64_t v63 = v62;
      if (v62)
      {
        uint64_t v64 = v61;
        if (*v61 != 32)
        {
          uint64_t v66 = MEMORY[0x263EF8318];
          while (1)
          {
            unsigned int v68 = *v64++;
            uint64_t v67 = v68;
            if (!(v68 <= 0x7FuLL ? *(_DWORD *)(v66 + 4 * v67 + 60) & 0x40000 : __maskrune(v67, 0x40000uLL))) {
              break;
            }
            if (!--v63)
            {
              int64_t v70 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)*a3 + 544))(*a3);
              uint64_t v72 = v71;
              __p[0] = 0;
              __p[1] = 0;
              *(void *)&long long v118 = 0;
              (*(void (**)(void))(*(void *)*a3 + 544))();
              sub_216185B34(__p, v73 + 1);
              unsigned int v74 = (char *)__p[1];
              if (__p[1] >= (void *)v118)
              {
                uint64_t v76 = (char *)__p[0];
                int64_t v77 = (char *)__p[1] - (char *)__p[0];
                if ((char *)__p[1] - (char *)__p[0] <= -3) {
                  sub_21610CB04();
                }
                uint64_t v78 = v77 >> 1;
                if ((unint64_t)v118 - (unint64_t)__p[0] <= (v77 >> 1) + 1) {
                  uint64_t v79 = v78 + 1;
                }
                else {
                  uint64_t v79 = v118 - (unint64_t)__p[0];
                }
                if ((unint64_t)v118 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v80 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v80 = v79;
                }
                if (v80)
                {
                  uint64_t v81 = (char *)sub_21610FD44((uint64_t)&v118, v80);
                  uint64_t v76 = (char *)__p[0];
                  unsigned int v74 = (char *)__p[1];
                }
                else
                {
                  uint64_t v81 = 0;
                }
                uint64_t v98 = &v81[2 * v78];
                unint64_t v99 = &v81[2 * v80];
                *(_WORD *)uint64_t v98 = 32;
                uint64_t v75 = v98 + 2;
                while (v74 != v76)
                {
                  __int16 v100 = *((_WORD *)v74 - 1);
                  v74 -= 2;
                  *((_WORD *)v98 - 1) = v100;
                  v98 -= 2;
                }
                __p[0] = v98;
                __p[1] = v75;
                *(void *)&long long v118 = v99;
                if (v76) {
                  operator delete(v76);
                }
              }
              else
              {
                *(_WORD *)__p[1] = 32;
                uint64_t v75 = v74 + 2;
              }
              __p[1] = v75;
              sub_2161BF794(v70, &v70[v72], (uint64_t)__p);
              uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)*a3 + 304))(*a3);
              double v120 = 0;
              uint64_t v121 = 0;
              unsigned int v122 = 0;
              sub_21618B3D8(&v120, *(const void **)v101, *(void *)(v101 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v101 + 8) - *(void *)v101) >> 3));
              if (v120 != v121)
              {
                ++v120[12];
                (*(void (**)(void))(*(void *)*a3 + 200))();
                sub_216268B0C();
                (*(void (**)(void))(*(void *)*a3 + 112))();
                (*(void (**)(uint64_t))(*(void *)*a3 + 376))(*a3);
                (*(void (**)(uint64_t))(*(void *)*a3 + 408))(*a3);
                operator new();
              }
              uint64_t v87 = 0;
              if (v120)
              {
                uint64_t v121 = v120;
                operator delete(v120);
              }
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_133;
            }
          }
        }
      }
    }
    (*(void (**)(uint64_t, double))(*(void *)*a3 + 400))(*a3, 0.0);
    uint64_t v65 = *a3;
    *(void *)(v65 + 184) = 0;
    sub_2161C60D0((void **)(a1 + 8), v65);
    goto LABEL_135;
  }
  if ((*(uint64_t (**)(void))(v43 + 48))() != 1 || (**(unsigned char **)(a1 + 456) & 4) != 0) {
    goto LABEL_108;
  }
  BOOL v44 = (void *)*a3;
  int v45 = *(char *)(*a3 + 87);
  uint64_t v46 = v45 >= 0 ? *a3 + 64 : *(void *)(*a3 + 64);
  unint64_t v47 = v45 >= 0 ? *(unsigned __int8 *)(*a3 + 87) : v44[9];
  BOOL v48 = (unsigned __int16 *)(*(uint64_t (**)(void *))(*v44 + 544))(v44);
  if (!v48 || v49 == 0) {
    goto LABEL_109;
  }
  int v51 = *v48;
  unsigned int v52 = v51 - 48;
  unsigned int v53 = (unsigned __int16)(v51 + 240);
  if (v52 >= 0xA && v53 > 9) {
    goto LABEL_109;
  }
  uint64_t v55 = 1;
  while (v49 != v55)
  {
    int v56 = v48[v55];
    unsigned int v57 = v56 - 48;
    ++v55;
    unsigned int v58 = (unsigned __int16)(v56 + 240);
    if (v57 >= 0xA && v58 >= 0xA)
    {
      unint64_t v60 = v55 - 1;
      goto LABEL_98;
    }
  }
  unint64_t v60 = v49;
LABEL_98:
  if (v60 < v49 || !v47) {
    goto LABEL_109;
  }
  unint64_t v82 = 0;
  while (1)
  {
    int v83 = *(unsigned __int16 *)(v46 + 2 * v82);
    unsigned int v84 = v83 - 48;
    unsigned int v85 = (unsigned __int16)(v83 + 240);
    if (v84 >= 0xA && v85 > 9) {
      break;
    }
    if (v47 == ++v82)
    {
      unint64_t v82 = v47;
      break;
    }
  }
  if (v49 >= v82)
  {
LABEL_109:
    int v112 = v14;
    sub_2161A2A80();
    uint64_t v88 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a3 + 560))(*a3, 0);
    __s1a = (char *)*(unsigned __int16 *)(v88 + 24);
    *(_OWORD *)long long __p = *(_OWORD *)v88;
    long long v118 = *(_OWORD *)(v88 + 16);
    uint64_t v119 = *(void *)(v88 + 32);
    uint64_t v89 = operator new(0x28uLL);
    uint64_t v121 = (_WORD *)v89 + 20;
    unsigned int v122 = (char *)v89 + 40;
    long long v90 = v118;
    *uint64_t v89 = *(_OWORD *)__p;
    v89[1] = v90;
    *((void *)v89 + 4) = v119;
    double v120 = v89;
    if (!a4
      || !__s1a
      || (uint64_t v91 = v89, *(_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)*a3 + 544))(*a3) == 32)
      || (uint64_t v92 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)*a3 + 544))(*a3)) == 0)
    {
LABEL_120:
      (*(void (**)(void))(*(void *)*a3 + 112))();
      (*(void (**)(uint64_t))(*(void *)*a3 + 544))(*a3);
      sub_216268B0C();
      operator new();
    }
    uint64_t v93 = MEMORY[0x263EF8318];
    int v94 = __s1a;
    do
    {
      unsigned int v96 = *v92++;
      uint64_t v95 = v96;
      if (v96 <= 0x7FuLL) {
        int v97 = *(_DWORD *)(v93 + 4 * v95 + 60) & 0x40000;
      }
      else {
        int v97 = __maskrune(v95, 0x40000uLL);
      }
      if (!v97) {
        goto LABEL_120;
      }
      --v94;
    }
    while (v94);
    uint64_t v87 = 0;
    uint64_t v121 = v91;
    operator delete(v91);
    int v14 = v112;
  }
  else
  {
LABEL_108:
    uint64_t v87 = 0;
  }
LABEL_133:
  uint64_t v102 = *a3;
  *a3 = 0;
  if (v102)
  {
    (*(void (**)(uint64_t))(*(void *)v102 + 16))(v102);
LABEL_135:
    uint64_t v87 = *a3;
  }
  if (!v87) {
    return 0;
  }
  int v103 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v87 + 304))(v87);
  if (*v103 != v103[1] && *(_DWORD *)*v103 == 9 && ((*(uint64_t (**)(void))(*(void *)*a3 + 176))() & 1) != 0) {
    return 0;
  }
  if (v15 == 1) {
    uint64_t v106 = "[ME::addCandidateFromMecabNode] Adding a partial candidate";
  }
  else {
    uint64_t v106 = "[ME::addCandidateFromMecabNode] Adding a non-partial candidate";
  }
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)*a3 + 528))(*a3, 3, v106, 1);
  if (v15 == 1) {
    int v14 = (*(uint64_t (**)(void))(*(void *)*a3 + 112))();
  }
  uint64_t v107 = (void *)*a3;
  *a3 = 0;
  __p[0] = v107;
  v123[0] = &unk_26C6B5430;
  v123[3] = v123;
  uint64_t v104 = sub_216215760(a2, __p, 1, 0, (uint64_t)v123);
  sub_21618B96C(v123);
  int v108 = __p[0];
  __p[0] = 0;
  if (v108) {
    (*(void (**)(void *))(*(void *)v108 + 16))(v108);
  }
  char v109 = v104 ^ 1;
  if (!a5) {
    char v109 = 1;
  }
  if ((v109 & 1) == 0)
  {
    int v110 = *a5;
    if (*a5 <= v14) {
      int v110 = v14;
    }
    *a5 = v110;
    return 1;
  }
  return v104;
}

void sub_21625B008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21625B174(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, void *a5, uint64_t a6, int a7, unsigned __int8 a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11 = a5;
  uint64_t v94 = *MEMORY[0x263EF8340];
  BOOL v87 = 0;
  BOOL v64 = sub_21628E128(a5, &v87);
  if (v11[8] != v11[7] || a4 != 0)
  {
    uint64_t v15 = *(void *)(a10 + 184);
    if (a7) {
      int v16 = 4;
    }
    else {
      int v16 = 0;
    }
    unsigned int v17 = *(_DWORD *)a1[57];
    int v18 = (*(uint64_t (**)(void))(*(void *)*a1 + 224))();
    int v19 = sub_21628DC44(v17, v18);
    uint64_t v68 = v15;
    unint64_t v20 = *(void *)v11[10];
    uint64_t v21 = v11[4];
    unint64_t v22 = (v11[5] - v21) >> 1;
    if (v21) {
      uint64_t v23 = v22 - v20;
    }
    else {
      uint64_t v23 = 0;
    }
    BOOL v24 = v22 > v20;
    unint64_t v25 = *(void *)v11[13];
    uint64_t v26 = v11[7];
    if (!v24) {
      uint64_t v23 = 0;
    }
    uint64_t v74 = v23;
    unint64_t v27 = (v11[8] - v26) >> 1;
    if (v27 <= v25) {
      int v28 = 0;
    }
    else {
      int v28 = (char *)(v26 + 2 * v25);
    }
    if (v26) {
      unint64_t v29 = v27 - v25;
    }
    else {
      unint64_t v29 = 0;
    }
    if (v27 <= v25) {
      unint64_t v29 = 0;
    }
    uint64_t v70 = v11[1];
    uint64_t v71 = v11[2];
    int v30 = !v87 || v64;
    long long __p = 0;
    unsigned int v85 = 0;
    uint64_t v86 = 0;
    sub_216184B80((char *)&__p, v28, v29 - v87);
    uint64_t v63 = a2;
    unint64_t v32 = __p;
    uint64_t v31 = v85;
    sub_216184B80((char *)&__p, a3, a4);
    unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v71 - v70) >> 3);
    unint64_t v72 = v33;
    if (v30)
    {
      uint64_t v34 = v33 - *(unsigned __int16 *)(a1[55] + 340);
      unint64_t v33 = v34 & ~(v34 >> 63);
    }
    if ((~*(_DWORD *)a1[57] & 0x81000000) != 0)
    {
      uint64_t v75 = a4;
    }
    else
    {
      uint64_t v35 = sub_2162154E4(v63);
      if (v35 == -1) {
        uint64_t v36 = a4;
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v75 = v36;
      if (v35 != -1 && a4)
      {
        uint64_t v37 = *(void *)(*(void *)(v63 + 48) + 8 * v35);
        uint64_t v40 = *(char **)(v37 + 64);
        uint64_t v38 = v37 + 64;
        int v39 = v40;
        int v41 = *(char *)(v38 + 23);
        if (v41 >= 0) {
          int v39 = (char *)v38;
        }
        a3 = v39;
        uint64_t v42 = *(void *)(v38 + 8);
        if (v41 >= 0) {
          uint64_t v42 = v41;
        }
        uint64_t v75 = v42;
      }
    }
    if (v33 <= v72)
    {
      unsigned int v67 = v19 & 0xFFFFFFDF | v16;
      uint64_t v45 = (v31 - v32) >> 1;
      uint64_t v46 = "exact";
      if (a7) {
        uint64_t v46 = "prefix";
      }
      uint64_t v62 = v46;
      unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v71 - v70) >> 3);
      uint64_t v48 = a4;
      uint64_t v43 = v68;
      uint64_t v65 = v45;
      uint64_t v66 = v11;
      while (1)
      {
        if (v33 == v47) {
          uint64_t v49 = v45;
        }
        else {
          uint64_t v49 = *(void *)(v11[13] + 8 * v33);
        }
        if (v48 || (unint64_t)(v74 - *(void *)(v11[10] + 8 * v33)) >= 2)
        {
          uint64_t v50 = v45 - v49;
          uint64_t v79 = &unk_26C6BE8C8;
          char v83 = 0;
          uint64_t v81 = 0;
          uint64_t v82 = 0;
          uint64_t v80 = 0;
          int v51 = (void **)v43;
          if (*(unsigned char *)(v43 + 32))
          {
            int v51 = (void **)v43;
            if (v45 != v49)
            {
              sub_2162E0CB0((uint64_t)&v80, v45 - v49);
              uint64_t v52 = 0;
              do
              {
                LOWORD(__src) = 0;
                LOWORD(__src) = *((_WORD *)__p + v49 + v52);
                sub_2161C4D0C((uint64_t)&v79, v52++, &__src, 1uLL, 1, 0, 0xFFFFFF, -1, 0.0, 255);
              }
              while (v50 != v52);
              sub_2162E1C9C(&v80, v81, *(long long ***)(v43 + 8), *(long long ***)(v43 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v43 + 16) - *(void *)(v43 + 8)) >> 3));
              char v83 = 1;
              int v51 = &v79;
              uint64_t v48 = a4;
            }
          }
          *(void *)(a10 + 184) = v51;
          unsigned int v53 = (const UniChar *)((char *)__p + 2 * v49);
          if (__p) {
            CFIndex v54 = v50 + v48;
          }
          else {
            CFIndex v54 = 0;
          }
          uint64_t v55 = (uint64_t *)sub_21628DE00(v53, v54, a6);
          CFStringRef v56 = CFStringCreateWithCharacters(0, v53, v54);
          unsigned int v57 = sub_2162D1CE4(3u);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = v62;
            __int16 v90 = 2112;
            CFStringRef v91 = v56;
            __int16 v92 = 1024;
            unsigned int v93 = v67;
            _os_log_debug_impl(&dword_2160F5000, v57, OS_LOG_TYPE_DEBUG, "[MJ::makeMecabSingleWordCandidates] Searching single-word %s candidates for [%@] with option: 0x%.6X", buf, 0x1Cu);
          }
          if (sub_2163560D4(*a1, (uint64_t)v53, v54, v55, 0, v67))
          {
            if (v55) {
              uint64_t v77 = v55[2];
            }
            else {
              uint64_t v77 = 0;
            }
            uint64_t v59 = (*(uint64_t (**)(void))(*(void *)*a1 + 240))();
            if (v59)
            {
              if ((*(_DWORD *)a1[57] & 0x4000000) != 0) {
                uint64_t v60 = v54;
              }
              else {
                uint64_t v60 = v75;
              }
              if ((*(_DWORD *)a1[57] & 0x4000000) != 0) {
                uint64_t v61 = (uint64_t)v53;
              }
              else {
                uint64_t v61 = (uint64_t)a3;
              }
              sub_216259928(a1, v59, v61, v60, v77, a8, 0);
            }
            int v58 = 0;
          }
          else
          {
            int v58 = 4;
          }
          unint64_t v11 = v66;
          uint64_t v43 = v68;
          if (v56) {
            CFRelease(v56);
          }
          if (v55)
          {
            free((void *)*v55);
            MEMORY[0x2166CA800](v55, 0x1010C40B1660244);
          }
          uint64_t v79 = &unk_26C6BE8C8;
          *(void *)int buf = &v80;
          sub_2161C4FA0((void ***)buf);
          unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v71 - v70) >> 3);
          uint64_t v48 = a4;
          uint64_t v45 = v65;
          if ((v58 | 4) != 4) {
            goto LABEL_41;
          }
        }
        else
        {
          unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v71 - v70) >> 3);
        }
        if (++v33 > v47) {
          goto LABEL_41;
        }
      }
    }
    uint64_t v43 = v68;
LABEL_41:
    *(void *)(a10 + 184) = v43;
    if (__p)
    {
      unsigned int v85 = __p;
      operator delete(__p);
    }
  }
  return 0;
}

void sub_21625C284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v74 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v74;
    operator delete(v74);
  }
  uint64_t v75 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v75;
    operator delete(v75);
  }
  (*(void (**)(uint64_t))(*(void *)v72 + 16))(v72);
  sub_2161868BC(&a64, 0);
  sub_2161DFF98(&a65, 0);
  a66 = a50;
  STACK[0x270] = a43;
  sub_2161C4FA0((void ***)&STACK[0x270]);
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21625C43C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, unsigned __int8 a8)
{
  if (a5 < 2) {
    return 0;
  }
  uint64_t v14 = *a1;
  unsigned int v15 = *(_DWORD *)a1[57];
  int v16 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 224))(*a1);
  uint64_t v17 = sub_21628DD68(v15, v16);
  uint64_t result = sub_2163560D4(v14, a4, a5, a6, 0, v17);
  if (result)
  {
    if (a6) {
      uint64_t v19 = a6[2];
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v18 = (*(uint64_t (**)(void))(*(void *)*a1 + 240))();
    if (v18) {
      sub_216259928(a1, v18, a4, a5, v19, a8, 0);
    }
    return 1;
  }
  return result;
}

void sub_21625CC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  MEMORY[0x2166CA800](v20, 0x10F3C4074548AAFLL);
  uint64_t v23 = *(void **)(v21 - 128);
  if (v23)
  {
    *(void *)(v21 - 12sub_216195B94(&a9, 0) = v23;
    operator delete(v23);
  }
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 16))(a20);
  }
  _Unwind_Resume(a1);
}

void sub_21625CD20(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  __int16 v7 = sub_2162D1CE4(3u);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a3 + 48);
    for (uint64_t i = *(void *)(a3 + 56); v8 != i; v8 += 8)
    {
      uint64_t v10 = sub_2162D1CE4(3u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = (*(uint64_t (**)(void))(**(void **)v8 + 24))();
        int v12 = (*(uint64_t (**)(void))(**(void **)v8 + 112))();
        *(_DWORD *)int buf = 138412546;
        uint64_t v21 = v11;
        __int16 v22 = 1024;
        int v23 = v12;
        _os_log_debug_impl(&dword_2160F5000, v10, OS_LOG_TYPE_DEBUG, "Partial phrase: %@ (weight: %d)", buf, 0x12u);
      }
    }
  }
  uint64_t v13 = *(void ***)(a3 + 48);
  uint64_t v14 = *(void ***)(a3 + 56);
  if (v13 != v14)
  {
    if (*v13)
    {
      int v15 = (*(uint64_t (**)(void *))(*(void *)*v13 + 112))(*v13) + 4000;
      uint64_t v13 = *(void ***)(a3 + 48);
      uint64_t v14 = *(void ***)(a3 + 56);
    }
    else
    {
      int v15 = 4000;
    }
    for (; v13 != v14; ++v13)
    {
      if ((*(int (**)(void))(*(void *)*v13 + 112))() < v15)
      {
        int v16 = *v13;
        ++*a4;
        (*(void (**)(void *))(*(void *)v16 + 480))(v16);
        (*(void (**)(void *, uint64_t, const char *, uint64_t))(*(void *)*v13 + 528))(*v13, 3, "Adding a partial phrase candidate", 1);
        v19[0] = &unk_26C6B5430;
        v19[3] = v19;
        char v17 = sub_216215760(a2, v13, 1, 0, (uint64_t)v19);
        sub_21618B96C(v19);
        if ((v17 & 1) == 0)
        {
          uint64_t v18 = sub_2162D1CE4(3u);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_debug_impl(&dword_2160F5000, v18, OS_LOG_TYPE_DEBUG, "∟ rejected", buf, 2u);
          }
        }
      }
    }
  }
}

void sub_21625D034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21618B96C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21625D050(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C07E8;
  *(void *)(a1 + 8) = 0;
  sub_2161808CC(a1 + 16);
  sub_2161055D0((void *)(a1 + 360));
  sub_2160F6FA0((_OWORD *)(a1 + 368));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  return a1;
}

void sub_21625D0BC(_Unwind_Exception *a1)
{
  sub_2161055D8(v2);
  sub_21618098C(v1);
  _Unwind_Resume(a1);
}

__CFArray *sub_21625D0E0(int a1, uint64_t a2, uint64_t a3, const __CFString *a4)
{
  uint64_t v4 = a3;
  if (!a3) {
    return (__CFArray *)v4;
  }
  if (!sub_21625D1D4(a1)) {
    return 0;
  }
  if (a1 == 5 && a4) {
    sub_216245E4C(a4);
  }

  return sub_2162891EC();
}

void sub_21625D1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21625D1D4(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797DFC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797DFC8))
  {
    *(_OWORD *)&qword_26797DFE0 = 0u;
    xmmword_26797DFD0 = 0u;
    dword_26797DFF0 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_21625D964, &xmmword_26797DFD0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797DFC8);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v42 = 0;
  unsigned int v3 = sub_2161E2834(a1) + 1;
  if (v3 <= 7)
  {
    int v4 = 1 << v3;
    if ((v4 & 0x5C) != 0)
    {
      __int16 v5 = 26746;
    }
    else
    {
      if ((v4 & 0xA1) != 0) {
        return 0;
      }
      __int16 v5 = 24938;
    }
    HIBYTE(v42) = 2;
    LOWORD(__p[0]) = v5;
    BYTE2(__p[0]) = 0;
  }
  if (!sub_21625DA20((unsigned __int8 *)__p))
  {
    if (v42 >= 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    CFStringRef cf = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)v6, 0x8000100u);
    unint64_t v7 = sub_216129260((uint64_t)&qword_26797DFE8, (uint64_t)__p);
    unint64_t v8 = v7;
    unint64_t v9 = *((void *)&xmmword_26797DFD0 + 1);
    if (*((void *)&xmmword_26797DFD0 + 1))
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797DFD0 + 8));
      v10.i16[0] = vaddlv_u8(v10);
      unint64_t v11 = v10.u32[0];
      if (v10.u32[0] > 1uLL)
      {
        unint64_t v1 = v7;
        if (v7 >= *((void *)&xmmword_26797DFD0 + 1)) {
          unint64_t v1 = v7 % *((void *)&xmmword_26797DFD0 + 1);
        }
      }
      else
      {
        unint64_t v1 = (*((void *)&xmmword_26797DFD0 + 1) - 1) & v7;
      }
      uint64_t v13 = *(unsigned __int8 ***)(xmmword_26797DFD0 + 8 * v1);
      if (v13)
      {
        for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
        {
          unint64_t v15 = *((void *)i + 1);
          if (v15 == v8)
          {
            if (sub_21612970C((uint64_t)&dword_26797DFF0, i + 16, (unsigned __int8 *)__p)) {
              goto LABEL_89;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v9) {
                v15 %= v9;
              }
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v1) {
              break;
            }
          }
        }
      }
    }
    int v16 = operator new(0x30uLL);
    char v17 = v16;
    v43[0] = v16;
    v43[1] = &qword_26797DFE0;
    char v44 = 0;
    *int v16 = 0;
    v16[1] = v8;
    if (SHIBYTE(v42) < 0)
    {
      sub_21610A674((unsigned char *)v16 + 16, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *((_OWORD *)v16 + 1) = *(_OWORD *)__p;
      void v16[4] = v42;
    }
    void v17[5] = CEMCreateEmojiLocaleData();
    char v44 = 1;
    float v18 = (float)(unint64_t)(qword_26797DFE8 + 1);
    if (v9 && (float)(*(float *)&dword_26797DFF0 * (float)v9) >= v18)
    {
LABEL_79:
      uint64_t v34 = *(uint64_t **)(xmmword_26797DFD0 + 8 * v1);
      uint64_t v35 = v43[0];
      if (v34)
      {
        *(void *)v43[0] = *v34;
      }
      else
      {
        *(void *)v43[0] = qword_26797DFE0;
        qword_26797DFE0 = v35;
        *(void *)(xmmword_26797DFD0 + 8 * v1) = &qword_26797DFE0;
        if (!*(void *)v35) {
          goto LABEL_88;
        }
        unint64_t v36 = *(void *)(*(void *)v35 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v36 >= v9) {
            v36 %= v9;
          }
        }
        else
        {
          v36 &= v9 - 1;
        }
        uint64_t v34 = (uint64_t *)(xmmword_26797DFD0 + 8 * v36);
      }
      *uint64_t v34 = v35;
LABEL_88:
      v43[0] = 0;
      ++qword_26797DFE8;
      sub_21625DB34((uint64_t)v43);
LABEL_89:
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_91;
    }
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v18 / *(float *)&dword_26797DFF0);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *((void *)&xmmword_26797DFD0 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26797DFD0 + 1)) {
      goto LABEL_45;
    }
    if (*(void *)&prime < *((void *)&xmmword_26797DFD0 + 1))
    {
      unint64_t v29 = vcvtps_u32_f32((float)(unint64_t)qword_26797DFE8 / *(float *)&dword_26797DFF0);
      if (*((void *)&xmmword_26797DFD0 + 1) < 3uLL
        || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797DFD0 + 8)),
            v30.i16[0] = vaddlv_u8(v30),
            v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)&xmmword_26797DFD0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          int v23 = operator new(8 * *(void *)&prime);
          uint64_t v24 = (void *)xmmword_26797DFD0;
          *(void *)&xmmword_26797DFD0 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *((int8x8_t *)&xmmword_26797DFD0 + 1) = prime;
          do
            *(void *)(xmmword_26797DFD0 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          uint64_t v26 = (void **)qword_26797DFE0;
          if (qword_26797DFE0)
          {
            unint64_t v27 = *(void *)(qword_26797DFE0 + 8);
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797DFD0 + 8 * v27) = &qword_26797DFE0;
            for (j = *v26; j; unint64_t v27 = v33)
            {
              unint64_t v33 = j[1];
              if (v28.u32[0] > 1uLL)
              {
                if (v33 >= *(void *)&prime) {
                  v33 %= *(void *)&prime;
                }
              }
              else
              {
                v33 &= *(void *)&prime - 1;
              }
              if (v33 != v27)
              {
                if (!*(void *)(xmmword_26797DFD0 + 8 * v33))
                {
                  *(void *)(xmmword_26797DFD0 + 8 * v33) = v26;
                  goto LABEL_70;
                }
                *uint64_t v26 = (void *)*j;
                void *j = **(void **)(xmmword_26797DFD0 + 8 * v33);
                **(void **)(xmmword_26797DFD0 + 8 * v33) = j;
                uint64_t j = v26;
              }
              unint64_t v33 = v27;
LABEL_70:
              uint64_t v26 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_74;
        }
        int v39 = (void *)xmmword_26797DFD0;
        *(void *)&xmmword_26797DFD0 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v9 = 0;
        *((void *)&xmmword_26797DFD0 + 1) = 0;
      }
    }
LABEL_74:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v1 = v8 % v9;
      }
      else {
        unint64_t v1 = v8;
      }
    }
    else
    {
      unint64_t v1 = (v9 - 1) & v8;
    }
    goto LABEL_79;
  }
LABEL_91:
  uint64_t v37 = sub_21625DA20((unsigned __int8 *)__p);
  if (!v37) {
    sub_21613F340("unordered_map::at: key not found");
  }
  int v12 = v37 + 40;
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  return v12;
}

void sub_21625D794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__CFArray *MecabraCopyEmojiCharacterArrayForString(int a1, uint64_t a2)
{
  if (a1 == 1) {
    int v2 = 11;
  }
  else {
    int v2 = 12;
  }
  return sub_21625D0E0(v2, 0, a2, 0);
}

__CFArray *MecabraCopyEmojiCharacterArrayForStringWithReading(int a1, uint64_t a2, const __CFString *a3)
{
  return sub_21625D0E0(a1, 0, a2, a3);
}

unsigned __int8 *sub_21625D824(int a1, int a2, uint64_t a3)
{
  uint64_t result = sub_21625D1D4(a1);
  if (result)
  {
    uint64_t v6 = *(void *)result;
    if (a2 == 2) {
      unsigned int v7 = 5;
    }
    else {
      unsigned int v7 = 4;
    }
    if (a2 == 1) {
      uint64_t v8 = 6;
    }
    else {
      uint64_t v8 = v7;
    }
    return (unsigned __int8 *)MEMORY[0x270F18C08](v6, v8, a3);
  }
  return result;
}

unsigned __int8 *sub_21625D88C(int a1, uint64_t a2)
{
  uint64_t result = sub_21625D1D4(a1);
  if (result)
  {
    uint64_t v4 = *(void *)result;
    return (unsigned __int8 *)MEMORY[0x270F18BF8](v4, a2);
  }
  return result;
}

unsigned __int8 *sub_21625D8D8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_21625D1D4(a1);
  if (result)
  {
    uint64_t v6 = *(void *)result;
    return (unsigned __int8 *)MEMORY[0x270F18C10](v6, a2, a3);
  }
  return result;
}

unsigned __int8 *sub_21625D92C(int a1)
{
  uint64_t result = sub_21625D1D4(a1);
  if (result)
  {
    uint64_t v2 = *(void *)result;
    return (unsigned __int8 *)MEMORY[0x270F18C18](v2);
  }
  return result;
}

uint64_t sub_21625D964(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned int v3 = (void *)*v2;
      sub_21625D9C4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_21625D9C4(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 24) = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    unsigned int v3 = *(void **)a1;
    operator delete(v3);
  }
}

unsigned __int8 *sub_21625DA20(unsigned __int8 *a1)
{
  unint64_t v2 = sub_216129260((uint64_t)&qword_26797DFE8, (uint64_t)a1);
  unint64_t v3 = *((void *)&xmmword_26797DFD0 + 1);
  if (!*((void *)&xmmword_26797DFD0 + 1)) {
    return 0;
  }
  unint64_t v4 = v2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797DFD0 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
    if (v2 >= *((void *)&xmmword_26797DFD0 + 1)) {
      unint64_t v7 = v2 % *((void *)&xmmword_26797DFD0 + 1);
    }
  }
  else
  {
    unint64_t v7 = (*((void *)&xmmword_26797DFD0 + 1) - 1) & v2;
  }
  uint64_t v8 = *(unsigned __int8 ***)(xmmword_26797DFD0 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t i = *v8; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v10 = *((void *)i + 1);
    if (v10 == v4)
    {
      if (sub_21612970C((uint64_t)&dword_26797DFF0, i + 16, a1)) {
        return i;
      }
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3) {
          v10 %= v3;
        }
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return i;
}

void sub_21625DB34(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21625D9C4((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_21625DB8C(void *a1, unsigned int *a2, uint64_t a3)
{
  int v6 = *a2;
  *a1 = *a2;
  int v7 = sub_2161E2834(v6);
  if (v7 == 5)
  {
    uint64_t v8 = sub_216351058();
    int v7 = sub_2163510E8(v8, 5);
  }
  sub_2163284B4((uint64_t)(a1 + 1), v7, *((void *)a2 + 5), *((void *)a2 + 6), *((void *)a2 + 7), a3, *((unsigned char *)a2 + 8), *((unsigned char *)a2 + 9));
}

void sub_21625E2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  int v12 = va_arg(va1, void **);
  sub_21626012C((void **)va1);
  sub_2162603B4((uint64_t *)va, 0);
  sub_2162601D8((void ***)va);
  int v12 = a4;
  sub_2162601D8((void ***)va);
  uint64_t v11 = v4[55];
  v4[55] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_21625FF0C(v4 + 53, 0);
  sub_2162B3534(v9);
  sub_2162B3534(v8);
  sub_21625E4A0(v7, 0);
  sub_21625E450(v6, 0);
  sub_21625823C(v4 + 24, 0);
  sub_21625823C(v4 + 23, 0);
  sub_21632929C(v5);
  _Unwind_Resume(a1);
}

void sub_21625E428()
{
  MEMORY[0x2166CA800](v0, 0x1020C404C310C12);
  JUMPOUT(0x21625E3D4);
}

void sub_21625E448()
{
}

uint64_t sub_21625E450(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216263718(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_21625E4A0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216254D54(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

BOOL sub_21625E4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 2) {
    return 0;
  }
  LMVocabularyGetSharedVocabulary();
  return LMVocabularyContainsLemmaForCharacters() != 0;
}

void sub_21625E540()
{
}

void sub_21625E598(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1060C4077409654);
  _Unwind_Resume(a1);
}

uint64_t sub_21625E5BC(uint64_t a1)
{
  unint64_t v4 = (void **)(a1 + 472);
  sub_2162601D8(&v4);
  unint64_t v4 = (void **)(a1 + 448);
  sub_2162601D8(&v4);
  uint64_t v2 = *(void *)(a1 + 440);
  *(void *)(a1 + 44sub_216195B94(&a9, 0) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_21625FF0C((uint64_t *)(a1 + 424), 0);
  sub_2162B3534((uint64_t *)(a1 + 312));
  sub_2162B3534((uint64_t *)(a1 + 216));
  sub_21625E4A0((uint64_t *)(a1 + 208), 0);
  sub_21625E450((uint64_t *)(a1 + 200), 0);
  sub_21625823C((uint64_t *)(a1 + 192), 0);
  sub_21625823C((uint64_t *)(a1 + 184), 0);
  sub_21632929C(a1 + 8);
  return a1;
}

void sub_21625E68C(void *a1)
{
  uint64_t v2 = a1[54];
  if (*(unsigned char *)(v2 + 105))
  {
    if (sub_21625E708(a1)) {
      return;
    }
    uint64_t v2 = a1[54];
  }
  if (*(unsigned char *)(v2 + 104))
  {
    sub_21625E7E0(a1, 0);
    unint64_t v3 = (int *)(a1 + 1);
    sub_216329454(v3);
    sub_216329694(v3);
  }
}

uint64_t sub_21625E708(void *a1)
{
  if (sub_2161E2834(*(_DWORD *)a1) == 5)
  {
    sub_21625E7E0(a1, 0);
    sub_216329754((uint64_t)(a1 + 1), 5);
    sub_216254DCC();
  }
  return 0;
}

void sub_21625E7BC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1020C404C310C12);
  _Unwind_Resume(a1);
}

void sub_21625E7E0(void *a1, int a2)
{
  sub_216329374(a1 + 1, a2);
  uint64_t v3 = a1[25];
  if (v3)
  {
    *(_DWORD *)(v3 + 8) = 0;
    sub_21635F8DC(*(void *)(v3 + 16));
    sub_21628B218(*(uint64_t **)(v3 + 48));
  }
  uint64_t v4 = a1[26];
  if (v4)
  {
    sub_21635F8DC(*(void *)(v4 + 16));
    sub_21635F8DC(*(void *)(v4 + 24));
    *(_DWORD *)(v4 + 4sub_216195B94(&a9, 0) = 0;
  }
  sub_21635F8DC(a1[41]);
  sub_21635F8DC(a1[29]);
  sub_21635F8DC(a1[24]);
  uint64_t v5 = a1[23];

  sub_21635F8DC(v5);
}

void sub_21625E86C(void *a1)
{
  sub_21625E7E0(a1, 1);
  uint64_t v2 = a1[25];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    if (v3)
    {
      sub_21627E3B0(v3);
    }
  }
}

void sub_21625E8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int v7 = sub_2161E2A24(*(_DWORD *)(a1 + 8));
  uint64_t v8 = (const char *)CFStringCreateWithCString(0, v7, 0x8000100u);
  unint64_t v10 = *(void **)a2;
  unint64_t v9 = *(void **)(a2 + 8);
  while (v10 != v9)
  {
    (*(void (**)(void, CFMutableDictionaryRef, uint64_t, void))(*(void *)*v10 + 16))(*v10, Mutable, a3, 0);
    ++v10;
  }
  uint64_t v11 = sub_2161E2A50(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v11, 0x8000100u);
  sub_216225F1C(*(void *)(a1 + 440), v8, (uint64_t)v12, (uint64_t)Mutable);
  if (v12) {
    CFRelease(v12);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_21625EA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, const void *);
  sub_2161868BC((const void **)va, 0);
  sub_2161868BC((const void **)va1, 0);
  sub_2161DFB5C((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21625EA44(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2)
  {
    if (*(_DWORD *)(*(void *)(a1 + 416) + 4) <= 7u) {
      sub_21628F494(a2);
    }
    sub_216192194(a2, kMecabraContextOptionPrivateMode);
  }
  LMLanguageModelSetParameterValue();
  if (*(void *)(*(void *)(*(void *)(a1 + 16) + 32) + 8)
    && **(void **)(*(void *)(a1 + 80) + 8)
    && *(void *)(*(void *)(a1 + 96) + 8))
  {
    sub_21625E7E0((void *)a1, 0);
    *(_DWORD *)(a1 + 4) = (a4 << 8) & 0x4000;
    *(void *)(a1 + 408) = a3;
    sub_21621BF24();
  }
  return 0;
}

void sub_21625F204(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21625F27C(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 16) + 32) + 8)
    && **(void **)(*(void *)(a1 + 80) + 8)
    && *(void *)(*(void *)(a1 + 96) + 8))
  {
    return sub_21635F948(*(void **)(a1 + 184), a2, a3);
  }
  else
  {
    return 0;
  }
}

void sub_21625F2B8(void *a1, const __CFArray *a2)
{
  if (*(void *)(*(void *)(a1[2] + 32) + 8) && **(void **)(a1[10] + 8))
  {
    if (*(void *)(a1[12] + 8)) {
      sub_2162B35DC((uint64_t)(a1 + 39), a2);
    }
  }
}

void sub_21625F2F0(void *a1, const __CFArray *a2)
{
  if (*(void *)(*(void *)(a1[2] + 32) + 8) && **(void **)(a1[10] + 8))
  {
    if (*(void *)(a1[12] + 8)) {
      sub_2162B35DC((uint64_t)(a1 + 27), a2);
    }
  }
}

void sub_21625F328(void *a1, uint64_t a2)
{
  if (a2)
  {
    sub_21625E8C0((uint64_t)a1, (uint64_t)(a1 + 59), a2);
    if (*(void *)(*(void *)(a1[2] + 32) + 8))
    {
      if (**(void **)(a1[10] + 8) && *(void *)(a1[12] + 8))
      {
        sub_21625E7E0(a1, 0);
      }
    }
  }
}

void sub_21625F3A8(int a1, uint64_t a2, int a3)
{
  CFStringRef v4 = *(const __CFString **)(a2 + 144);
  if (v4)
  {
    uint64_t v21 = 0;
    __int16 v22 = &v21;
    uint64_t v23 = 0x3002000000;
    uint64_t v24 = sub_21625F730;
    uint64_t v25 = sub_21625F740;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFTypeRef cf = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v4);
    int v7 = (__CFString *)v22[5];
    if (v7)
    {
      CFStringTrimWhitespace(v7);
      uint64_t v17 = 0;
      float v18 = &v17;
      uint64_t v19 = 0x2000000000;
      CFIndex Length = 0;
      CFIndex Length = CFStringGetLength((CFStringRef)v22[5]);
      uint64_t v8 = v18[3];
      if (v8)
      {
        if (a3)
        {
          uint64_t v13 = 0;
          uint64_t v14 = &v13;
          uint64_t v15 = 0x2000000000;
          uint64_t v16 = 0;
          CFStringRef v9 = (const __CFString *)v22[5];
          v12[0] = MEMORY[0x263EF8330];
          v12[1] = 0x40000000;
          uint64_t v12[2] = sub_21625F74C;
          void v12[3] = &unk_26426C280;
          v12[4] = &v21;
          void v12[5] = &v13;
          v12[6] = &v17;
          sub_2161E25DC(v9, 1, (uint64_t)v12);
          v10.length = v18[3];
          if (v10.length >= 2 && v14[3] <= 4)
          {
            v10.CFIndex location = 0;
            CFStringRef v11 = CFStringCreateWithSubstring(v6, (CFStringRef)v22[5], v10);
            sub_21625F82C(a1, v11);
          }
          _Block_object_dispose(&v13, 8);
        }
        else if (v8 >= 1)
        {
          sub_21625F82C(a1, (CFStringRef)v22[5]);
        }
      }
      _Block_object_dispose(&v17, 8);
    }
    _Block_object_dispose(&v21, 8);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_21625F6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  CFStringRef v11 = va_arg(va1, const void *);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  sub_2161868BC((const void **)va, 0);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  sub_2161B5B5C((const void **)(v9 + 40), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21625F730(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_216195B94(&a9, 0) = 0;
  *(void *)(result + 4sub_216195B94(&a9, 0) = v2;
  return result;
}

void sub_21625F740(uint64_t a1)
{
}

void sub_21625F74C(void *a1, CFRange range, unsigned char *a3)
{
  CFIndex length = range.length;
  v7.CFIndex location = range.location;
  v7.CFIndex length = length;
  CFStringRef v6 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFStringRef *)(*(void *)(a1[4] + 8) + 40), v7);
  if (!CEMStringIsSingleEmoji() || *(uint64_t *)(*(void *)(a1[5] + 8) + 24) > 14)
  {
    *a3 = 1;
    if (!v6) {
      return;
    }
    goto LABEL_6;
  }
  *(void *)(*(void *)(a1[6] + 8) + 24) -= length;
  ++*(void *)(*(void *)(a1[5] + 8) + 24);
  if (v6) {
LABEL_6:
  }
    CFRelease(v6);
}

void sub_21625F814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_21625F82C(int a1, CFStringRef theString)
{
  if (theString) {
    CFStringGetLength(theString);
  }
  sub_2161E208C();
}

void sub_21625FD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,const void *a25)
{
  if (__p) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
  (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
  sub_2161868BC(&a25, 0);
  sub_2161868BC((const void **)(v27 - 120), 0);
  sub_216195B94((const void **)(v27 - 112), 0);
  sub_2161868BC((const void **)(v27 - 104), 0);
  if (a10) {
    MEMORY[0x2166CA7C0](a10, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_21625FF0C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_21612A250(v2 + 24, *(void **)(v2 + 32));
    sub_21612A250(v2, *(void **)(v2 + 8));
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_21625FF7C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21625FFF4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21625FFF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_21626008C((uint64_t)v13);
  return v11;
}

uint64_t sub_21626008C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2162600C4((void *)a1);
  }
  return a1;
}

void *sub_2162600C4(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_21626012C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_216260164(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    CFStringRef v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_2162601D8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_21626022C(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_21626022C(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    CFStringRef v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_21626029C()
{
}

void *sub_2162602B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C6C7D58;
  result[1] = v3;
  return result;
}

uint64_t sub_2162602F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7D58;
  a2[1] = v2;
  return result;
}

uint64_t sub_216260324(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 13)) {
    return (*(uint64_t (**)(void, void))(**(void **)(v1 + 176) + 16))(*(void *)(v1 + 176), *(void *)(*(void *)(v1 + 16) + 32));
  }
  else {
    return 0;
  }
}

uint64_t sub_216260368(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC870)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162603A8()
{
  return &unk_26C6BC870;
}

uint64_t *sub_2162603B4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_2161B62B0((void *)(v2 + 8));
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_216260418()
{
}

void *sub_21626042C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C6C7DB0;
  result[1] = v3;
  return result;
}

uint64_t sub_216260474(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7DB0;
  a2[1] = v2;
  return result;
}

uint64_t sub_2162604A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 13)) {
    return (*(uint64_t (**)(void, void))(**(void **)(v1 + 176) + 16))(*(void *)(v1 + 176), *(void *)(*(void *)(v1 + 16) + 32));
  }
  else {
    return 0;
  }
}

uint64_t sub_2162604E4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC880)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216260524()
{
  return &unk_26C6BC880;
}

uint64_t sub_216260530(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(double *)(a1 + 16) = a4;
  if (a3)
  {
    uint64_t v5 = a3 + 8;
    unint64_t v6 = *(unsigned __int8 *)(a3 + 8);
    *(void *)(a1 + 24) = a2;
    *(void *)(a1 + 32) = a3 + 24;
    uint64_t v14 = 0;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 32))(a2, &v14);
    uint64_t v8 = (const void *)v7;
    uint64_t v9 = v14;
    if (v14 - 2 < 0)
    {
      if (2 - v14 >= v6) {
        unint64_t v11 = v6;
      }
      else {
        unint64_t v11 = 2 - v14;
      }
      CFStringRef v12 = (char *)(a1 - 4 * v14 + 8);
      memcpy(&v12[-4 * v11], (const void *)(v5 - 4 * v11), 4 * v11);
      memcpy(v12, v8, 4 * v9);
      char v10 = v11 + v9;
    }
    else
    {
      *(void *)a1 = *(void *)(v7 + 4 * (v14 - 2));
      char v10 = 2;
    }
  }
  else
  {
    *(void *)(a1 + 24) = a2;
    *(void *)(a1 + 32) = 0;
    char v10 = 1;
    *(_DWORD *)(a1 + 4) = 1;
  }
  *(unsigned char *)(a1 + 8) = v10;
  return a1;
}

double sub_21626062C(uint64_t a1, uint64_t a2)
{
  unint64_t v15 = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a2 + 32))(a2, &v15);
  double v4 = 0.0;
  if (v15 - 127 >= 0xFFFFFFFFFFFFFF82)
  {
    uint64_t v5 = (const void *)v3;
    unint64_t v6 = (unsigned char *)(a1 + 8);
    LMLanguageModelConditionalProbability();
    double v4 = -v7;
    unint64_t v8 = v15;
    if (v15 >= 2)
    {
      BOOL v9 = *v6 != 0;
      if (*v6) {
        uint64_t v10 = -1;
      }
      else {
        uint64_t v10 = 0;
      }
      memcpy(&unk_26797F068, &v6[4 * v10], 4 * (*v6 != 0));
      memcpy((char *)&unk_26797F068 + 4 * v9, v5, 4 * v8);
      unint64_t v11 = (char *)&unk_26797F068 + 4 * v9 - 4;
      unint64_t v12 = 1;
      do
      {
        LMLanguageModelConditionalProbability();
        double v4 = v4 - v13;
        ++v12;
        v11 += 4;
      }
      while (v12 < v15);
    }
  }
  return v4;
}

void *sub_21626076C(void *result, int a2)
{
  uint64_t v2 = result[1];
  if ((unint64_t)(v2 - *result) >= 9)
  {
    double v4 = result;
    uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(v2 - 8) + 56))(*(void *)(v2 - 8));
    if (result == a2)
    {
      uint64_t v5 = v4[1];
      double v7 = *(void **)(v5 - 8);
      unint64_t v6 = (void *)(v5 - 8);
      uint64_t result = v7;
      *unint64_t v6 = 0;
      if (v7) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      v4[1] = v6;
    }
  }
  return result;
}

uint64_t sub_216260808(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  if (*a1 == v6 || (*(unsigned int (**)(void))(**(void **)(v6 - 8) + 56))(*(void *)(v6 - 8)) != a2)
  {
    if (a2 == 1) {
      operator new();
    }
    if (!a2) {
      operator new();
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1[1] - 8) + 16))(*(void *)(a1[1] - 8), a3);
}

void sub_216260ADC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216260B0C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)a1 == v6
    || (*(unsigned int (**)(void))(**(void **)(v6 - 8) + 56))(*(void *)(v6 - 8)) != a2)
  {
    if (a2 == 2) {
      operator new();
    }
    if (a2 == 1) {
      operator new();
    }
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 8) - 8) + 40))(*(void *)(*(void *)(a1 + 8) - 8), a3);
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_216260DE0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

CFMutableStringRef sub_216260E10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2 == a2[1] || *a1 == a1[1]) {
    return 0;
  }
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 != v8)
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)v7 + 56))() == 2)
      {
        uint64_t v11 = *a2;
        uint64_t v12 = a2[1];
        unint64_t v13 = (v12 - *a2) >> 3;
        if (v9 < v13)
        {
          while (1)
          {
            uint64_t v14 = *(void *)(v11 + 8 * v9);
            unint64_t v15 = *(void *)(v14 + 8);
            if (v10 < v15) {
              break;
            }
LABEL_11:
            unint64_t v10 = 0;
            if (++v9 == v13)
            {
              unint64_t v9 = (v12 - *a2) >> 3;
              goto LABEL_41;
            }
          }
          long long v16 = (char *)(*(void *)(v14 + 32) + 4 * v10 + 3);
          while (1)
          {
            char v17 = *v16;
            v16 += 4;
            if (v17) {
              break;
            }
            if (v15 == ++v10) {
              goto LABEL_11;
            }
          }
        }
        unint64_t v25 = v10;
        if (v9 < v13)
        {
          while (1)
          {
            uint64_t v26 = *(void **)(v11 + 8 * v9);
            if (v25 < v26[1]) {
              break;
            }
LABEL_22:
            unint64_t v25 = 0;
            unint64_t v10 = 0;
            if (++v9 >= (v12 - v11) >> 3) {
              goto LABEL_41;
            }
          }
          uint64_t v27 = v26[2];
          uint8x8_t v28 = (char *)(v26[4] + 4 * v25 + 3);
          while (1)
          {
            char v29 = *v28;
            v28 += 4;
            if ((v29 & 1) == 0) {
              break;
            }
            CFStringRef v30 = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(v27 + 2 * v25), 0);
            CFStringAppend(Mutable, v30);
            ++v25;
            uint64_t v11 = *a2;
            if (v25 >= *(void *)(*(void *)(*a2 + 8 * v9) + 8))
            {
              uint64_t v12 = a2[1];
              goto LABEL_22;
            }
          }
        }
        unint64_t v10 = v25;
      }
      else
      {
        if ((*(unsigned int (**)(void))(**(void **)v7 + 56))() == 1)
        {
          CFIndex Length = CFStringGetLength(Mutable);
          CFStringRef v19 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)v7 + 48))();
          CFIndex v20 = CFStringGetLength(v19);
          CFIndex v21 = v20;
          uint64_t v23 = *(CFIndex **)(a3 + 8);
          unint64_t v22 = *(void *)(a3 + 16);
          if ((unint64_t)v23 >= v22)
          {
            uint64_t v31 = *(CFIndex **)a3;
            uint64_t v32 = ((uint64_t)v23 - *(void *)a3) >> 4;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 60) {
              sub_21610CB04();
            }
            uint64_t v34 = v22 - (void)v31;
            if (v34 >> 3 > v33) {
              unint64_t v33 = v34 >> 3;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              unint64_t v36 = (char *)sub_21612AA90(a3 + 16, v35);
              uint64_t v31 = *(CFIndex **)a3;
              uint64_t v23 = *(CFIndex **)(a3 + 8);
            }
            else
            {
              unint64_t v36 = 0;
            }
            uint64_t v37 = (CFIndex *)&v36[16 * v32];
            CFIndex *v37 = Length;
            v37[1] = v21;
            uint64_t v38 = v37;
            if (v23 != v31)
            {
              do
              {
                *((_OWORD *)v38 - 1) = *((_OWORD *)v23 - 1);
                v38 -= 2;
                v23 -= 2;
              }
              while (v23 != v31);
              uint64_t v31 = *(CFIndex **)a3;
            }
            uint64_t v24 = v37 + 2;
            *(void *)a3 = v38;
            *(void *)(a3 + 8) = v37 + 2;
            *(void *)(a3 + 16) = &v36[16 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *uint64_t v23 = Length;
            v23[1] = v20;
            uint64_t v24 = v23 + 2;
          }
          *(void *)(a3 + 8) = v24;
        }
        CFStringRef v39 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)v7 + 48))();
        CFStringAppend(Mutable, v39);
      }
LABEL_41:
      v7 += 8;
    }
    while (v7 != v8);
  }
  return Mutable;
}

__CFString *sub_216261140(void *a1, uint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  if ((*(void *)(a2 + 40) & 0x300) != 0x100)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    theString[1] = Mutable;
    unint64_t v33 = *(void *)(a2 + 8);
    if (!v33 || !*(void *)(a2 + 48)) {
      return Mutable;
    }
    unint64_t v34 = *(void *)(a2 + 48);
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v31 = *(void *)(a2 + 16);
    uint64_t v32 = *(void *)(a2 + 32);
    int v30 = *(_DWORD *)a2;
    CFAllocatorRef alloc = v7;
    while (1)
    {
      uint64_t v12 = (unsigned __int8 *)(v32 + 4 * v9);
      if ((v12[3] & 3) == 0) {
        break;
      }
      theString[0] = 0;
      unint64_t v13 = (const void *)sub_2163101A8(*(unsigned __int16 *)(v31 + 2 * v9), *(_DWORD *)a2);
      sub_216195954((const void **)theString, v13);
      CFStringRef v14 = theString[0];
      if (v30 == 1)
      {
        CFIndex Length = CFStringGetLength(theString[0]);
        v16.CFIndex length = *v12;
        CFStringRef v14 = theString[0];
        if (Length != v16.length)
        {
          v16.CFIndex location = 0;
          CFStringRef v14 = CFStringCreateWithSubstring(v7, theString[0], v16);
          if (theString[0]) {
            CFRelease(theString[0]);
          }
          theString[0] = v14;
        }
      }
      CFStringAppend(Mutable, v14);
      CFIndex v17 = *(unsigned __int8 *)(v32 + 4 * v9 + 1);
      if (theString[0]) {
        CFRelease(theString[0]);
      }
      v34 -= v17;
      ++v9;
LABEL_18:
      if (v9 < v33)
      {
        a3 += v17;
        if (v34) {
          continue;
        }
      }
      return Mutable;
    }
    while (v11 < (uint64_t)(a1[1] - *a1) >> 3)
    {
      char v18 = (*(uint64_t (**)(void))(**(void **)(*a1 + 8 * v11) + 24))(*(void *)(*a1 + 8 * v11));
      uint64_t v19 = a3 - v10;
      if (a3 < v10) {
        char v20 = 1;
      }
      else {
        char v20 = v18;
      }
      if ((v20 & 1) == 0
        && a3 <= (*(uint64_t (**)(void))(**(void **)(*a1 + 8 * v11) + 32))(*(void *)(*a1 + 8 * v11))
               + v10)
      {
        uint64_t v21 = *(void *)(*a1 + 8 * v11);
        uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21);
        if (v34 >= v22 - v19) {
          CFIndex v17 = v22 - v19;
        }
        else {
          CFIndex v17 = v34;
        }
        if ((*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21))
        {
          CFStringRef v23 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
          if (v17 + v19 <= CFStringGetLength(v23))
          {
            v37.CFIndex location = a3 - v10;
            v37.CFIndex length = v17;
            CFStringRef v24 = CFStringCreateWithSubstring(alloc, v23, v37);
            theString[0] = v24;
            CFStringAppend(Mutable, v24);
            uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(*a1 + 8 * v11) + 32))(*(void *)(*a1 + 8 * v11));
            unint64_t v26 = v34 - v17;
            v34 -= v17;
            if (v9 < v33 && v26)
            {
              uint64_t v27 = (char *)(v32 + 3 + 4 * v9);
              while (1)
              {
                char v28 = *v27;
                v27 += 4;
                if ((v28 & 3) != 0) {
                  break;
                }
                if (v33 == ++v9)
                {
                  unint64_t v9 = v33;
                  break;
                }
              }
            }
            if (v24) {
              CFRelease(v24);
            }
            v10 += v25;
            ++v11;
            CFAllocatorRef v7 = alloc;
            goto LABEL_18;
          }
        }
        break;
      }
      v10 += (*(uint64_t (**)(void))(**(void **)(*a1 + 8 * v11) + 32))(*(void *)(*a1 + 8 * v11));
      ++v11;
    }
    if (!Mutable) {
      return Mutable;
    }
    CFRelease(Mutable);
    return 0;
  }

  return sub_2163052DC(a2);
}

void sub_216261530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2161B5B5C((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21626157C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 == v3 || *(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 + a3;
  uint64_t v8 = *(void *)a1 + 8;
  do
  {
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v8 - 8) + 32))(*(void *)(v8 - 8));
    unsigned int v10 = (*(uint64_t (**)(void))(**(void **)(v8 - 8) + 24))(*(void *)(v8 - 8));
    if (a2 < v9 + v6) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = 0;
    }
    if (v6 < v7) {
      uint64_t result = v11;
    }
    else {
      uint64_t result = 0;
    }
    if (result) {
      break;
    }
    v6 += v9;
    BOOL v12 = v8 == v3;
    v8 += 8;
  }
  while (!v12);
  return result;
}

void *sub_216261654(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    double v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_2162616C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_21626173C(void *a1)
{
  *a1 = &unk_26C6C5878;
  sub_216261818((uint64_t)(a1 + 1));
  return a1;
}

void sub_216261780(void *a1)
{
  *a1 = &unk_26C6C5878;
  sub_216261818((uint64_t)(a1 + 1));

  JUMPOUT(0x2166CA800);
}

void sub_2162617E4(uint64_t a1, __int16 a2)
{
}

uint64_t sub_2162617EC()
{
  return 0;
}

uint64_t sub_2162617F4(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 1;
}

uint64_t sub_216261808(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_216261810()
{
  return 0;
}

uint64_t sub_216261818(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  sub_2161868BC((const void **)a1, 0);
  return a1;
}

void sub_216261858(uint64_t a1, __int16 a2)
{
  uint64_t v4 = a1 + 24;
  unint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(char **)(a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(char **)(a1 + 8);
    uint64_t v9 = v6 - v8;
    if (v6 - v8 <= -3) {
      sub_21610CB04();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v5 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      CFStringRef v14 = (char *)sub_21610FD44(v4, v13);
      uint64_t v8 = *(char **)(a1 + 8);
      uint64_t v6 = *(char **)(a1 + 16);
    }
    else
    {
      CFStringRef v14 = 0;
    }
    unint64_t v15 = &v14[2 * v10];
    CFRange v16 = &v14[2 * v13];
    *(_WORD *)unint64_t v15 = a2;
    uint64_t v7 = v15 + 2;
    while (v6 != v8)
    {
      __int16 v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)uint64_t v6 = a2;
    uint64_t v7 = v6 + 2;
  }
  *(void *)(a1 + 16) = v7;
  CFStringRef v18 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], *(const UniChar **)(a1 + 8), ((uint64_t)v7 - *(void *)(a1 + 8)) >> 1);

  sub_2161868BC((const void **)a1, v18);
}

void *sub_21626196C(void *a1)
{
  *a1 = &unk_26C6C5F30;
  sub_216261818((uint64_t)(a1 + 2));
  return a1;
}

void sub_2162619B0(void *a1)
{
  *a1 = &unk_26C6C5F30;
  sub_216261818((uint64_t)(a1 + 2));

  JUMPOUT(0x2166CA800);
}

void sub_216261A14(uint64_t a1, __int16 a2)
{
}

uint64_t sub_216261A1C()
{
  return 1;
}

uint64_t sub_216261A24(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_216261A2C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t sub_216261A34(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_216261A3C()
{
  return 1;
}

void sub_216261A48()
{
}

uint64_t sub_216261A60()
{
  return 1;
}

uint64_t sub_216261A68(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_216261A70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t sub_216261A78()
{
  return 0;
}

uint64_t sub_216261A80()
{
  return 2;
}

uint64_t sub_216261A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  *(void *)a1 = &unk_26C6BE7D0;
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  double v10 = (*(double (**)(uint64_t))(*(void *)a2 + 392))(a2);
  sub_2162A7544(a1, (uint64_t *)&off_26C6BCF78);
  *(_DWORD *)(a1 + 2sub_216195B94(&a9, 0) = v9;
  *(unsigned char *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = v10;
  *(void *)a1 = off_26C6C66F0;
  *(void *)(a1 + 4sub_216195B94(&a9, 0) = &off_26C6C6958;
  uint64_t v11 = (**(uint64_t (***)(void))(a2 + *(void *)(*(void *)a2 - 32)))();
  *(_OWORD *)(a1 + 72) = 0u;
  unint64_t v12 = (int64x2_t *)(a1 + 72);
  *(void *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 560))(a2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_216195B94(&a9, 0) = 0;
  sub_216263224((void *)(a1 + 104), *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 2);
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFStringRef v16 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2);
  if (v16) {
    __int16 v17 = CFStringCreateMutable(v14, 0);
  }
  else {
    __int16 v17 = 0;
  }
  CFStringRef v18 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  CFStringAppend(Mutable, v18);
  if (v17) {
    CFStringAppend(v17, v16);
  }
  CFStringRef v19 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  CFIndex Length = CFStringGetLength(v19);
  if (a4)
  {
    uint64_t v21 = Length;
    uint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *(unsigned int *)(a3 + 4 * v22);
      CFStringRef v24 = (char *)operator new(0x78uLL);
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 2) = 0;
      *(void *)CFStringRef v24 = &unk_26C6C9770;
      uint64_t v25 = v24 + 24;
      sub_2162C2404((uint64_t)(v24 + 24), v23, v21, a5, a6);
      if (!v24[112]) {
        break;
      }
      unint64_t v26 = *(char ***)(a1 + 80);
      unint64_t v27 = *(void *)(a1 + 88);
      if ((unint64_t)v26 >= v27)
      {
        uint64_t v29 = ((uint64_t)v26 - v12->i64[0]) >> 4;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60) {
          sub_21610CB04();
        }
        uint64_t v31 = v27 - v12->i64[0];
        if (v31 >> 3 > v30) {
          unint64_t v30 = v31 >> 3;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        uint64_t v52 = a1 + 88;
        unint64_t v33 = (char *)sub_21620DECC(v32);
        unint64_t v35 = &v33[16 * v29];
        *(void *)unint64_t v35 = v25;
        *((void *)v35 + 1) = v24;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
        CFRange v37 = *(void **)(a1 + 72);
        unint64_t v36 = *(void **)(a1 + 80);
        if (v36 == v37)
        {
          int64x2_t v40 = vdupq_n_s64((unint64_t)v36);
          uint64_t v38 = &v33[16 * v29];
        }
        else
        {
          uint64_t v38 = &v33[16 * v29];
          do
          {
            long long v39 = *((_OWORD *)v36 - 1);
            v36 -= 2;
            *((_OWORD *)v38 - 1) = v39;
            v38 -= 16;
            *unint64_t v36 = 0;
            v36[1] = 0;
          }
          while (v36 != v37);
          int64x2_t v40 = *v12;
        }
        char v28 = v35 + 16;
        *(void *)(a1 + 72) = v38;
        *(void *)(a1 + 8sub_216195B94(&a9, 0) = v35 + 16;
        int64x2_t v50 = v40;
        uint64_t v41 = *(void *)(a1 + 88);
        *(void *)(a1 + 88) = &v33[16 * v34];
        uint64_t v51 = v41;
        uint64_t v49 = v40.i64[0];
        sub_21621EF1C((uint64_t)&v49);
      }
      else
      {
        *unint64_t v26 = v25;
        v26[1] = v24;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
        char v28 = v26 + 2;
      }
      *(void *)(a1 + 8sub_216195B94(&a9, 0) = v28;
      CFStringAppend(Mutable, *((CFStringRef *)v24 + 9));
      (*(void (**)(char *))(*(void *)v25 + 24))(v25);
      uint64_t v43 = v42;
      if (v17)
      {
        CFStringRef v44 = (const __CFString *)(*(uint64_t (**)(char *))(*(void *)v25 + 64))(v25);
        CFStringAppend(v17, v44);
      }
      v21 += v43;
      sub_2161121B0((std::__shared_weak_count *)v24);
      if (++v22 == a4) {
        goto LABEL_28;
      }
    }
    sub_2161121B0((std::__shared_weak_count *)v24);
  }
LABEL_28:
  *(void *)(a1 + 56) = Mutable;
  *(void *)(a1 + 64) = v17;
  *(_DWORD *)(a1 + 96) = sub_2161E539C(Mutable);
  return a1;
}

void sub_216261F58(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  int v9 = *a3;
  if (*a3)
  {
    *(void *)(v7 + 112) = v9;
    operator delete(v9);
  }
  sub_2162632A0((void ***)va);
  uint64_t v10 = *(void *)(v7 + 48);
  *(void *)(v7 + 48) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216261FF8(uint64_t a1)
{
  *(void *)a1 = off_26C6C66F0;
  *(void *)(a1 + 4sub_216195B94(&a9, 0) = &off_26C6C6958;
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(void *)(a1 + 112) = v4;
    operator delete(v4);
  }
  uint64_t v7 = (void **)(a1 + 72);
  sub_2162632A0(&v7);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  return a1;
}

void sub_2162620D0(uint64_t a1)
{
  sub_216261FF8(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216262108(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0 || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) <= a2) {
    return 0;
  }
  unint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 48))(*(void *)(a1 + 48));
  if (a2 >= v4) {
    return *(void *)(*(void *)(a1 + 72) + 16 * (a2 - v4));
  }
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a1 + 48) + 120);

  return v5();
}

uint64_t sub_2162621E4(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  else {
    return 0;
  }
  return v2;
}

uint64_t sub_216262250(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result)
  {
    unsigned __int16 v2 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v2();
  }
  return result;
}

uint64_t sub_2162622C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 312))();
}

void sub_2162622F0(void **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 - 1) > 1)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    (*(void (**)(void **__return_ptr))(*a1[6] + 432))(&v10);
    uint64_t v7 = 0;
    std::string __dst = 0;
    uint64_t v9 = 0;
    for (unint64_t i = (*(uint64_t (**)(void *))(*a1[6] + 48))(a1[6]);
          i < ((uint64_t (*)(void **))(*a1)[6])(a1);
          ++i)
    {
      ((void (*)(void **__return_ptr, void **, unint64_t))(*a1)[53])(&__p, a1, i);
      sub_216263328((uint64_t)&v7, (uint64_t)__dst, (char *)__p, v13, (v13 - (unsigned char *)__p) >> 1);
      if (__p)
      {
        uint64_t v13 = (char *)__p;
        operator delete(__p);
      }
    }
    sub_216185B34((void **)a3, (((unsigned char *)__dst - (unsigned char *)v7) >> 1) + ((v11 - (unsigned char *)v10) >> 1));
    sub_216263328(a3, *(void *)(a3 + 8), (char *)v10, v11, (v11 - (unsigned char *)v10) >> 1);
    sub_216263328(a3, *(void *)(a3 + 8), (char *)v7, (char *)__dst, ((unsigned char *)__dst - (unsigned char *)v7) >> 1);
    if (v7)
    {
      std::string __dst = v7;
      operator delete(v7);
    }
    if (v10)
    {
      uint64_t v11 = (char *)v10;
      operator delete(v10);
    }
  }
  else
  {
    uint64_t v5 = *(void (**)(void))(*a1[6] + 432);
    v5();
  }
}

void sub_2162624FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  CFStringRef v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_21626256C(uint64_t a1)
{
  long long __p = 0;
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, i);
      (*(void (**)(void **__return_ptr))(*(void *)v4 + 56))(&v23);
      uint64_t v5 = v24;
      if (v24 != v23)
      {
        uint64_t v6 = 0;
        if ((unint64_t)(((unsigned char *)v24 - (unsigned char *)v23) >> 1) <= 1) {
          uint64_t v7 = 1;
        }
        else {
          uint64_t v7 = ((unsigned char *)v24 - (unsigned char *)v23) >> 1;
        }
        uint64_t v8 = v26;
        do
        {
          __int16 v9 = *((_WORD *)v23 + v6) + 48;
          if (v8 >= v27)
          {
            uint64_t v11 = (char *)__p;
            uint64_t v12 = v8 - (unsigned char *)__p;
            if (v8 - (unsigned char *)__p <= -3) {
              sub_21610CB04();
            }
            uint64_t v13 = v12 >> 1;
            if (v27 - (unsigned char *)__p <= (unint64_t)((v12 >> 1) + 1)) {
              uint64_t v14 = v13 + 1;
            }
            else {
              uint64_t v14 = v27 - (unsigned char *)__p;
            }
            if ((unint64_t)(v27 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v15 = v14;
            }
            if (v15)
            {
              CFStringRef v16 = (char *)sub_21610FD44((uint64_t)&v27, v15);
              uint64_t v11 = (char *)__p;
              uint64_t v8 = v26;
            }
            else
            {
              CFStringRef v16 = 0;
            }
            uint64_t v17 = &v16[2 * v13];
            *(_WORD *)uint64_t v17 = v9;
            uint64_t v10 = v17 + 2;
            while (v8 != v11)
            {
              __int16 v18 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *((_WORD *)v17 - 1) = v18;
              v17 -= 2;
            }
            long long __p = v17;
            unint64_t v26 = v10;
            unint64_t v27 = &v16[2 * v15];
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            *(_WORD *)uint64_t v8 = v9;
            uint64_t v10 = v8 + 2;
          }
          unint64_t v26 = v10;
          ++v6;
          uint64_t v8 = v10;
        }
        while (v6 != v7);
        uint64_t v5 = v23;
      }
      if (v5)
      {
        CFStringRef v24 = v5;
        operator delete(v5);
      }
    }
    CFStringRef v19 = (const UniChar *)__p;
    char v20 = v26;
  }
  else
  {
    char v20 = 0;
    CFStringRef v19 = 0;
  }
  CFStringRef v21 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], v19, (v20 - (char *)v19) >> 1);
  if (__p)
  {
    unint64_t v26 = (char *)__p;
    operator delete(__p);
  }
  return v21;
}

void sub_21626278C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *sub_2162627CC(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, i);
      CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 72))(v6);
      CFStringAppend(Mutable, v7);
      CFRelease(v7);
    }
  }
  return Mutable;
}

uint64_t sub_2162628C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_2162628EC()
{
  return 0;
}

uint64_t sub_2162628F4()
{
  return 1;
}

uint64_t sub_2162628FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_216262904(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if ((v1 & 2) != 0) {
    return 77;
  }
  if ((v1 & 8) != 0) {
    return 65;
  }
  if ((v1 & 0x10) != 0) {
    return 85;
  }
  if ((v1 & 4) != 0) {
    return 76;
  }
  return (v1 << 10 >> 31) & 0x59;
}

uint64_t sub_216262978(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_216262980()
{
  return 0;
}

uint64_t sub_216262988(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1) >> 6) & 1;
}

BOOL sub_2162629C4(uint64_t a1, char a2, char a3)
{
  BOOL result = 1;
  if ((a2 & 1) == 0 && (a3 & 1) == 0) {
    return ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) & 0x40) == 0;
  }
  return result;
}

uint64_t sub_216262A1C(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1) >> 1) & 1;
}

uint64_t sub_216262A58(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1) >> 13) & 1;
}

uint64_t sub_216262A94(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1) >> 14) & 1;
}

BOOL sub_216262AD0(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 560))(a1);
  uint64_t v2 = *(_DWORD **)v1;
  uint64_t v3 = *(_DWORD **)(v1 + 8);
  if (*(_DWORD **)v1 != v3)
  {
    while (*v2 != 1)
    {
      if (++v2 == v3)
      {
        uint64_t v2 = *(_DWORD **)(v1 + 8);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t sub_216262B40()
{
  return 0;
}

uint64_t sub_216262B48()
{
  return 0;
}

uint64_t sub_216262B50()
{
  return 0;
}

uint64_t sub_216262B58()
{
  return 0;
}

double sub_216262B60(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t sub_216262B68(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

uint64_t sub_216262B70()
{
  return 0;
}

uint64_t sub_216262B78()
{
  return 0;
}

void sub_216262B80()
{
}

void sub_216262EF4(_Unwind_Exception *a1, uint64_t a2, void **a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = *a3;
  if (*a3)
  {
    *(void *)(v3 + 112) = v5;
    operator delete(v5);
  }
  sub_2162632A0((void ***)va);
  uint64_t v6 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  MEMORY[0x2166CA800](v3, 0x10E1C40E0ACAB4CLL);
  _Unwind_Resume(a1);
}

void sub_216262FAC()
{
}

uint64_t sub_216262FC8(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_216262FD0(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_216262FD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 48))(*(void *)(a1 + 48))
       + ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
}

uint64_t sub_21626302C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 56))();
}

uint64_t sub_216263054(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 88))();
}

uint64_t sub_21626307C(uint64_t a1)
{
  return (*(unsigned int (**)(void))(**(void **)(a1 + 48) + 104))(*(void *)(a1 + 48)) | 0x200;
}

uint64_t sub_2162630BC()
{
  return 0;
}

uint64_t sub_2162630C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_2162630CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 192))();
}

uint64_t sub_2162630F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 200))();
}

uint64_t sub_21626311C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 208))();
}

uint64_t sub_216263144(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 216))();
}

uint64_t sub_21626316C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 224))();
}

uint64_t sub_216263194(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_21626319C()
{
  return 1;
}

uint64_t sub_2162631A4()
{
  return 2;
}

uint64_t sub_2162631AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 416))();
}

uint64_t sub_2162631DC()
{
  return 0;
}

uint64_t sub_2162631E4()
{
  return 0;
}

uint64_t sub_2162631EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 552))();
}

uint64_t sub_21626321C(uint64_t a1)
{
  return a1 + 104;
}

void *sub_216263224(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = sub_216112970(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216263284(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162632A0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          sub_2161121B0(v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_216263328(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    uint64_t v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(void *)a1) >> 1) < 0) {
      sub_21610CB04();
    }
    uint64_t v14 = (__dst - (uint64_t)v13) >> 1;
    unint64_t v15 = v10 - (void)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(void *)a1) >> 1)) {
      unint64_t v16 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 1);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v17 = v16;
    }
    uint64_t v37 = v9;
    if (v17) {
      __int16 v18 = (char *)sub_21610FD44(v9, v17);
    }
    else {
      __int16 v18 = 0;
    }
    char v28 = &v18[2 * v14];
    long long __p = v18;
    uint64_t v34 = v28;
    unint64_t v36 = &v18[2 * v17];
    uint64_t v29 = 2 * a5;
    unint64_t v30 = &v28[2 * a5];
    do
    {
      __int16 v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)char v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    unint64_t v35 = v30;
    uint64_t v5 = sub_216185DE0((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    CFStringRef v21 = &__src[2 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_18:
    CFStringRef v24 = &v5[2 * a5];
    uint64_t v25 = &v23[-2 * a5];
    unint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unint64_t v26 = v23;
      do
      {
        __int16 v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)unint64_t v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  CFStringRef v21 = &__src[2 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_2162634F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216263530(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216263550(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9770;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162635A4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2162635CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  operator new();
}

void sub_2162636B0(_Unwind_Exception *a1)
{
  sub_21625823C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216263718(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 16);
  *((_DWORD *)v3 - 2) = 0;
  sub_21635F8DC(v2);
  sub_21628B218(*(uint64_t **)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_216195B94(&a9, 0) = 0;
  if (v4) {
    MEMORY[0x2166CA800](v4, 0x60C4044C4A2DFLL);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v5) {
    MEMORY[0x2166CA800](v5, 0x60C4044C4A2DFLL);
  }
  sub_21625823C(v3, 0);
  return a1;
}

void sub_2162637A4()
{
}

void sub_2162637FC(_Unwind_Exception *a1, int a2)
{
  MEMORY[0x2166CA800](v2, 0x1020C40EB9B8EADLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2162637E8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216263848(uint64_t a1, uint64_t a2, char a3)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v7 = **(void **)(a1 + 32);
    uint64_t v6 = *(void *)(v7 + 24);
    if (v6)
    {
      sub_21617DED8(*(void *)(v7 + 24));
      goto LABEL_6;
    }
    return 0;
  }
  uint64_t v5 = **(void **)(a1 + 40);
  uint64_t v6 = *(void *)(v5 + 56);
  if (!v6) {
    return 0;
  }
  sub_216204250(*(void *)(v5 + 56));
LABEL_6:
  unsigned int v8 = atomic_load((unsigned int *)(v6 + 40));
  if (v8 != 2 || !*(void *)v6) {
    return 0;
  }
  uint64_t result = 0;
  if ((a3 & 8) == 0 && !*(unsigned char *)(a2 + 128))
  {
    CFStringRef v10 = *(const __CFString **)(a2 + 144);
    if (!v10 || (unint64_t)CFStringGetLength(v10) < 2 || CEMStringContainsEmoji()) {
      return 0;
    }
    if ((a3 & 4) != 0) {
      sub_2161E1FB8(v10);
    }
    return 1;
  }
  return result;
}

void sub_21626399C(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162639C4(uint64_t a1, uint64_t a2, int a3, char a4, unsigned char *a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232))
  {
    LMLanguageModelCreatePredictionEnumerator();
    if (LMPredictionEnumeratorAdvance())
    {
      LODWORD(__p) = 0;
      if (LMPredictionEnumeratorGetPrediction() >= 1
        && LMLanguageModelTokenHasAttributes()
        && LMLanguageModelCopyTokenAttributes())
      {
        operator new();
      }
    }
    LMPredictionEnumeratorRelease();
  }
  if (!*(unsigned char *)(a2 + 104))
  {
    if (sub_216263848(a1, a2, a3))
    {
      CFTypeRef v52 = (CFTypeRef)10;
      BOOL v53 = (a3 & 4) != 0;
      char v54 = a4 ^ 1;
      if (*(unsigned char *)(a1 + 24)) {
        sub_21627DBD0(*(void *)(a1 + 40), a5, &__p);
      }
      else {
        sub_2161EA898(*(void *)(a1 + 32), a5, &__p);
      }
      if (__p != &v58) {
        operator new();
      }
      sub_2161EB7F4((uint64_t)&__p, v58);
      return;
    }
    uint64_t v23 = (void *)(a2 + 48);
    if (CFArrayGetCount(*(CFArrayRef *)(a2 + 96)) != (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2) {
      return;
    }
    *(_DWORD *)(a1 + 8) = a3;
    CFTypeRef v52 = 0;
    if (*(unsigned char *)(a2 + 128))
    {
      if ((a3 & 0x28) != 0)
      {
        int v46 = 0;
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E000, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797E000))
        {
          qword_26797DFF8 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberFloatType, &unk_216382FA4);
          __cxa_guard_release(&qword_26797E000);
        }
        LMLanguageModelSetParameterValue();
        int v46 = 1;
      }
    }
    else
    {
      sub_2161AC6F8(&v52, *(CFTypeRef *)(a2 + 96));
      uint64_t v24 = *(void *)(*(void *)(*(void *)a1 + 8) + 32);
      if (!sub_2162E43B0((uint64_t)v23) || (sub_2162E4418(v23, v24) & 1) == 0)
      {
LABEL_53:
        if (v52) {
          CFRelease(v52);
        }
        return;
      }
      int v46 = 0;
    }
    sub_2162F0B98();
    LMLanguageModelCreatePredictionEnumerator();
    CFTypeRef cf = 0;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      if (LMPredictionEnumeratorAdvance() != 1) {
        break;
      }
      uint64_t v55 = 0;
      if (LMPredictionEnumeratorGetPrediction() < 1) {
        break;
      }
    }
    while (LMLanguageModelTokenHasAttributes());
    if (v46)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E010, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797E010))
      {
        qword_26797E008 = (uint64_t)CFNumberCreate(alloc, kCFNumberFloatType, &unk_216382FA8);
        __cxa_guard_release(&qword_26797E010);
      }
      LMLanguageModelSetParameterValue();
    }
    LMPredictionEnumeratorRelease();
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_53;
  }
  CFArrayRef v9 = *(const __CFArray **)(a2 + 96);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 56) - v10;
    uint64_t v12 = v11 >> 2;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 96));
    if (v11 >> 2 == Count && Count != 0)
    {
      uint64_t v15 = *(void *)(*(void *)a1 + 40);
      if (v15)
      {
        sub_21617DED8(*(void *)(*(void *)a1 + 40));
        unsigned int v16 = atomic_load((unsigned int *)(v15 + 40));
        if (v16 == 2)
        {
          if (*(void *)v15)
          {
            if (v11 < 1)
            {
              CFIndex v19 = v12 - 1;
              if ((*(_DWORD *)(v10 + 4 * (v12 - 1)) - 1) >= 0x1F3)
              {
LABEL_57:
                LMLanguageModelCreatePredictionEnumerator();
                if (v11 < 1) {
                  CFStringRef ValueAtIndex = 0;
                }
                else {
                  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v19);
                }
                if (LMPredictionEnumeratorAdvance())
                {
                  CFAllocatorRef v50 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
                  do
                  {
                    uint64_t v55 = 0;
                    uint64_t Prediction = LMPredictionEnumeratorGetPrediction();
                    if (Prediction < 1) {
                      break;
                    }
                    if (v60[0] >= 0x1F4u)
                    {
                      int v51 = *(unsigned __int8 *)(a2 + 105);
                      long long __p = 0;
                      int v58 = 0;
                      unint64_t v59 = 0;
                      unint64_t v26 = *(unsigned int **)(*(void *)a1 + 40);
                      if (v26)
                      {
                        sub_21617DED8(*(void *)(*(void *)a1 + 40));
                        unsigned int v27 = atomic_load(v26 + 10);
                        if (v27 == 2)
                        {
                          uint64_t v28 = *(void *)v26;
                          if (*(void *)v26)
                          {
                            uint64_t v29 = 0;
                            CFMutableStringRef Mutable = 0;
                            CFTypeRef v52 = 0;
                            while (1)
                            {
                              if (v60[v29] < 0x1F4u) {
                                goto LABEL_102;
                              }
                              CFStringRef v31 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 32))(v28);
                              if (v52) {
                                CFRelease(v52);
                              }
                              CFTypeRef v52 = v31;
                              if (!v31) {
                                goto LABEL_102;
                              }
                              CFIndex Length = CFStringGetLength(v31);
                              __int16 v33 = Length;
                              BOOL v34 = Prediction != 1;
                              if (Length != 1) {
                                BOOL v34 = 0;
                              }
                              if (Length <= 1 && !v34)
                              {
LABEL_102:
                                if (!Mutable) {
                                  goto LABEL_110;
                                }
                                if (CFStringGetLength(Mutable) >= 2)
                                {
                                  CFTypeRef cf = (CFTypeRef)sub_21628B494(*(void *)(a1 + 48), (uint64_t)ValueAtIndex, Mutable, v51 == 0);
                                  operator new();
                                }
                                goto LABEL_109;
                              }
                              if (!Mutable) {
                                CFMutableStringRef Mutable = CFStringCreateMutable(v50, 0);
                              }
                              if (sub_216264CBC(a1, v31, 134)) {
                                break;
                              }
                              if (!v51 || v29)
                              {
                                CFStringAppend(Mutable, @" ");
                                ++v33;
                                CFStringRef v31 = (const __CFString *)v52;
                              }
                              CFStringAppend(Mutable, v31);
                              unint64_t v36 = v58;
                              if ((unint64_t)v58 >= v59)
                              {
                                uint64_t v38 = (char *)__p;
                                int64_t v39 = v58 - (unsigned char *)__p;
                                if (v58 - (unsigned char *)__p <= -3) {
                                  sub_21610CB04();
                                }
                                uint64_t v40 = v39 >> 1;
                                if (v59 - (unint64_t)__p <= (v39 >> 1) + 1) {
                                  uint64_t v41 = v40 + 1;
                                }
                                else {
                                  uint64_t v41 = v59 - (void)__p;
                                }
                                if (v59 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
                                  uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  uint64_t v42 = v41;
                                }
                                if (v42)
                                {
                                  uint64_t v43 = (char *)sub_21610FD44((uint64_t)&v59, v42);
                                  uint64_t v38 = (char *)__p;
                                  unint64_t v36 = v58;
                                }
                                else
                                {
                                  uint64_t v43 = 0;
                                }
                                CFStringRef v44 = &v43[2 * v40];
                                *(_WORD *)CFStringRef v44 = v33;
                                uint64_t v37 = v44 + 2;
                                while (v36 != v38)
                                {
                                  __int16 v45 = *((_WORD *)v36 - 1);
                                  v36 -= 2;
                                  *((_WORD *)v44 - 1) = v45;
                                  v44 -= 2;
                                }
                                long long __p = v44;
                                int v58 = v37;
                                unint64_t v59 = (unint64_t)&v43[2 * v42];
                                if (v38) {
                                  operator delete(v38);
                                }
                              }
                              else
                              {
                                *(_WORD *)int v58 = v33;
                                uint64_t v37 = v36 + 2;
                              }
                              int v58 = v37;
                              if (++v29 == Prediction) {
                                goto LABEL_102;
                              }
                            }
                            if (!Mutable) {
                              goto LABEL_110;
                            }
LABEL_109:
                            CFRelease(Mutable);
LABEL_110:
                            if (v52) {
                              CFRelease(v52);
                            }
                          }
                        }
                        if (__p)
                        {
                          int v58 = (char *)__p;
                          operator delete(__p);
                        }
                      }
                    }
                  }
                  while ((LMPredictionEnumeratorAdvance() & 1) != 0);
                }
                LMPredictionEnumeratorRelease();
              }
            }
            else
            {
              CFIndex v17 = 0;
              while (1)
              {
                CFStringRef v18 = (const __CFString *)CFArrayGetValueAtIndex(v9, v17);
                if (sub_216264D40(v18)) {
                  break;
                }
                if (v12 == ++v17)
                {
                  CFIndex v19 = v12 - 1;
                  if ((*(_DWORD *)(v10 + 4 * (v12 - 1)) - 1) < 0x1F3) {
                    return;
                  }
                  uint64_t v20 = v11 >> 2;
                  while (1)
                  {
                    uint64_t v21 = v20 - 1;
                    CFStringRef v22 = (const __CFString *)CFArrayGetValueAtIndex(v9, v20 - 1);
                    if (sub_216264CBC(a1, v22, 2)) {
                      break;
                    }
                    --v20;
                    if (v21 <= 0)
                    {
                      uint64_t v20 = v21 - 1;
                      break;
                    }
                  }
                  if (v12 <= v20) {
                    return;
                  }
                  goto LABEL_57;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_216264B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29,uint64_t a30,uint64_t a31,char a32,void *__p,uint64_t a34)
{
}

uint64_t sub_216264CBC(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  if (!theString) {
    return 0;
  }
  uint64_t result = CFStringGetLength(theString);
  if (result)
  {
    if (sub_216264D40(theString))
    {
      return 1;
    }
    else
    {
      uint64_t v7 = *(uint64_t **)(a1 + 48);
      return sub_21628B354(v7, theString, a3);
    }
  }
  return result;
}

BOOL sub_216264D40(const __CFString *a1)
{
  uint64_t v2 = 1;
  if (CFStringCompare(a1, @"taiwan", 1uLL)) {
    return CFStringCompare(a1, @"tibet", 1uLL) == kCFCompareEqualTo;
  }
  return v2;
}

void sub_216264D98(uint64_t a1, const __CFURL *a2)
{
  *(void *)a1 = &unk_26C6BFCC0;
  *(void *)(a1 + 8) = 0;
  sub_216265050((void *)(a1 + 16), a2, "", 0);
  sub_216265050((void *)(a1 + 24), a2, "logJointProb", 0xCuLL);
  sub_216265050((void *)(a1 + 32), a2, "batch32", 7uLL);
  sub_216265050((void *)(a1 + 40), a2, "logJointProb_batch32", 0x14uLL);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = &unk_26C6BF760;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = 1;
  sub_216195B94((const void **)(a1 + 56), 0);
  CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  operator new();
}

void sub_216264F94(_Unwind_Exception *a1)
{
  sub_2162680EC(v5);
  sub_2162680EC(v4);
  sub_2162680EC(v3);
  uint64_t v7 = v1[1];
  *uint64_t v1 = v2;
  v1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  _Unwind_Resume(a1);
}

void sub_216265050(void *a1, CFURLRef url, char *a3, unint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (!url)
  {
    *a1 = 0;
    return;
  }
  CFErrorRef error = 0;
  if (!CFURLResourceIsReachable(url, &error))
  {
    CFStringRef v11 = CFErrorCopyDescription(error);
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    uint64_t v12 = sub_2162D1CE4(7u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buffer = 138412290;
      *(void *)&buffer[4] = v11;
      _os_log_debug_impl(&dword_2160F5000, v12, OS_LOG_TYPE_DEBUG, "Montreal assets are not reachable: %@", buffer, 0xCu);
    }
    CFRelease(error);
    *a1 = 0;
    if (v11) {
      CFRelease(v11);
    }
    return;
  }
  if (CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024)) {
    unsigned int v8 = (char *)buffer;
  }
  else {
    unsigned int v8 = (char *)&unk_2163A8923;
  }
  sub_21610B834(__p, v8);
  char v9 = v38;
  if ((v38 & 0x80000000) == 0)
  {
    if (v38)
    {
      uint64_t v10 = (char *)__p;
      goto LABEL_16;
    }
LABEL_54:
    *a1 = 0;
    if ((v9 & 0x80) == 0) {
      return;
    }
    goto LABEL_63;
  }
  if (!__p[1]) {
    goto LABEL_54;
  }
  uint64_t v10 = (char *)__p[0];
LABEL_16:
  sub_21610B834(&v36, v10);
  if (a4)
  {
    sub_2161425AC(&v40, a3, &a3[a4], a4);
    uint64_t v13 = std::string::insert(&v40, 0, "#", 1uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    unint64_t v47 = (void *(*)(uint64_t))v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)buffer = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v47) >= 0) {
      uint64_t v15 = buffer;
    }
    else {
      uint64_t v15 = *(UInt8 **)buffer;
    }
    if (SHIBYTE(v47) >= 0) {
      std::string::size_type v16 = HIBYTE(v47);
    }
    else {
      std::string::size_type v16 = *(void *)&buffer[8];
    }
    std::string::append(&v36, (const std::string::value_type *)v15, v16);
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)buffer);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex v17 = &v36;
  }
  else {
    CFIndex v17 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v36.__r_.__value_.__l.__size_;
  }
  CFURLRef v19 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v17, size, 0);
  keys = 0;
  uint64_t v45 = 0;
  v40.__r_.__value_.__r.__words[0] = 0;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v40;
  v40.__r_.__value_.__r.__words[2] = 0x2000000000;
  uint64_t v20 = (void **)qword_26797E040;
  uint64_t v41 = (void *)qword_26797E040;
  if (!qword_26797E040)
  {
    *(void *)buffer = MEMORY[0x263EF8330];
    *(void *)&buffer[8] = 0x40000000;
    unint64_t v47 = sub_2162678A8;
    uint64_t v48 = &unk_264266F60;
    uint64_t v49 = &v40;
    uint64_t v21 = (void *)sub_2162678F8();
    CFStringRef v22 = dlsym(v21, "kMRLNeuralNetworkOptionModelURLKey");
    *(void *)(v49->__r_.__value_.__l.__size_ + 24) = v22;
    qword_26797E040 = *(void *)(v49->__r_.__value_.__l.__size_ + 24);
    uint64_t v20 = *(void ***)(v40.__r_.__value_.__l.__size_ + 24);
  }
  _Block_object_dispose(&v40, 8);
  if (!v20) {
    goto LABEL_65;
  }
  keys = *v20;
  v40.__r_.__value_.__r.__words[0] = 0;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v40;
  v40.__r_.__value_.__r.__words[2] = 0x2000000000;
  uint64_t v23 = (uint64_t *)qword_26797E048;
  uint64_t v41 = (void *)qword_26797E048;
  if (!qword_26797E048)
  {
    *(void *)buffer = MEMORY[0x263EF8330];
    *(void *)&buffer[8] = 0x40000000;
    unint64_t v47 = sub_216267A7C;
    uint64_t v48 = &unk_26426C2E0;
    uint64_t v49 = &v40;
    uint64_t v24 = (void *)sub_2162678F8();
    uint64_t v25 = dlsym(v24, "kMRLNeuralNetworkOptionModelTypeKey");
    *(void *)(v49->__r_.__value_.__l.__size_ + 24) = v25;
    qword_26797E048 = *(void *)(v49->__r_.__value_.__l.__size_ + 24);
    uint64_t v23 = *(uint64_t **)(v40.__r_.__value_.__l.__size_ + 24);
  }
  _Block_object_dispose(&v40, 8);
  if (!v23) {
    goto LABEL_65;
  }
  uint64_t v45 = *v23;
  values = v19;
  uint64_t v43 = 0;
  v40.__r_.__value_.__r.__words[0] = 0;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v40;
  v40.__r_.__value_.__r.__words[2] = 0x2000000000;
  unint64_t v26 = (uint64_t *)qword_26797E050;
  uint64_t v41 = (void *)qword_26797E050;
  if (!qword_26797E050)
  {
    *(void *)buffer = MEMORY[0x263EF8330];
    *(void *)&buffer[8] = 0x40000000;
    unint64_t v47 = sub_216267ACC;
    uint64_t v48 = &unk_26426C308;
    uint64_t v49 = &v40;
    unsigned int v27 = (void *)sub_2162678F8();
    uint64_t v28 = dlsym(v27, "kMRLNeuralNetworkModelTypeE5RT");
    *(void *)(v49->__r_.__value_.__l.__size_ + 24) = v28;
    qword_26797E050 = *(void *)(v49->__r_.__value_.__l.__size_ + 24);
    unint64_t v26 = *(uint64_t **)(v40.__r_.__value_.__l.__size_ + 24);
  }
  _Block_object_dispose(&v40, 8);
  if (!v26) {
    goto LABEL_65;
  }
  uint64_t v43 = *v26;
  CFDictionaryRef v29 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  v40.__r_.__value_.__r.__words[0] = 0;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v40;
  v40.__r_.__value_.__r.__words[2] = 0x2000000000;
  unint64_t v30 = (uint64_t (*)(CFDictionaryRef, CFErrorRef *))off_26797E058;
  uint64_t v41 = off_26797E058;
  if (!off_26797E058)
  {
    *(void *)buffer = MEMORY[0x263EF8330];
    *(void *)&buffer[8] = 0x40000000;
    unint64_t v47 = sub_216267B1C;
    uint64_t v48 = &unk_26426C330;
    uint64_t v49 = &v40;
    CFStringRef v31 = (void *)sub_2162678F8();
    unint64_t v32 = dlsym(v31, "MRLNeuralNetworkCreate");
    *(void *)(v49->__r_.__value_.__l.__size_ + 24) = v32;
    off_26797E058 = *(_UNKNOWN **)(v49->__r_.__value_.__l.__size_ + 24);
    unint64_t v30 = *(uint64_t (**)(CFDictionaryRef, CFErrorRef *))(v40.__r_.__value_.__l.__size_ + 24);
  }
  _Block_object_dispose(&v40, 8);
  if (!v30)
  {
LABEL_65:
    dlerror();
    abort_report_np();
    __break(1u);
  }
  __int16 v33 = (const void *)v30(v29, &error);
  if (!error)
  {
    *a1 = v33;
    if (!v29) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  CFStringRef v34 = CFErrorCopyDescription(error);
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  unint64_t v35 = sub_2162D1CE4(7u);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buffer = 138412290;
    *(void *)&buffer[4] = v34;
    _os_log_debug_impl(&dword_2160F5000, v35, OS_LOG_TYPE_DEBUG, "Montreal model creation by MRLNeuralNetworkCreate caught an error: %@", buffer, 0xCu);
  }
  CFRelease(error);
  *a1 = 0;
  if (v34) {
    CFRelease(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v29) {
LABEL_57:
  }
    CFRelease(v29);
LABEL_58:
  if (v19) {
    CFRelease(v19);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v38 < 0) {
LABEL_63:
  }
    operator delete(__p[0]);
}

void sub_2162656C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162657F4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF760;
  sub_216195B94((const void **)(a1 + 8), 0);
  return a1;
}

void sub_21626583C(uint64_t a1, const __CFURL *a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C6BFCC0;
  *(void *)(a1 + 8) = 0;
  sub_216265050((void *)(a1 + 16), a2, "", 0);
  sub_216265050((void *)(a1 + 24), a2, "logJointProb", 0xCuLL);
  sub_216265050((void *)(a1 + 32), a2, "batch32", 7uLL);
  sub_216265050((void *)(a1 + 40), a2, "logJointProb_batch32", 0x14uLL);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = &unk_26C6BF760;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *(_DWORD *)(a1 + 64) = 1;
  sub_216195B94((const void **)(a1 + 56), 0);
  CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  operator new();
}

void sub_216265A78(_Unwind_Exception *a1)
{
  sub_2162680EC(v5);
  sub_2162680EC(v4);
  sub_2162680EC(v3);
  uint64_t v7 = v1[1];
  *uint64_t v1 = v2;
  v1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  _Unwind_Resume(a1);
}

BOOL sub_216265B34(void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[2];
  BOOL v3 = v2 != 0;
  if (!v2)
  {
    uint64_t v4 = sub_2162D1CE4(3u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v9) = 0;
      _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::isModelAvaiable] model for prediction isn't avaiable.", (uint8_t *)&v9, 2u);
    }
  }
  if (!a1[3])
  {
    uint64_t v5 = sub_2162D1CE4(3u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315138;
      uint64_t v10 = "logJointProb";
      _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::isModelAvaiable] model for joint probability isn't avaiable. Does the bundle contain function name '%s'?", (uint8_t *)&v9, 0xCu);
    }
    BOOL v3 = 0;
  }
  if (!a1[4])
  {
    uint64_t v6 = sub_2162D1CE4(3u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315138;
      uint64_t v10 = "batch32";
      _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::isModelAvaiable] model for batched prediction isn't avaiable. Does the bundle contain function name '%s'?", (uint8_t *)&v9, 0xCu);
    }
    BOOL v3 = 0;
  }
  if (!a1[5])
  {
    uint64_t v7 = sub_2162D1CE4(3u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315138;
      uint64_t v10 = "logJointProb_batch32";
      _os_log_debug_impl(&dword_2160F5000, v7, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::isModelAvaiable] model for batched joint probability isn't avaiable. Does the bundle contain function name '%s'?", (uint8_t *)&v9, 0xCu);
    }
    return 0;
  }
  return v3;
}

void sub_216265D14(void *a1@<X0>, uint64_t **a2@<X1>, int a3@<W2>, float **a4@<X8>)
{
  if (0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2) - 33 <= 0xFFFFFFFFFFFFFFE3)
  {
    uint64_t v7 = sub_2162D1CE4(3u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_debug_impl(&dword_2160F5000, v7, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::jointProbabilitySingleInference]", buf, 2u);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    operator new();
  }
  unsigned int v8 = sub_2162D1CE4(3u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::jointProbabilityBatchedInference]", buf, 2u);
  }
  uint64_t v75 = *a2;
  uint64_t v76 = a2[1];
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v76 - *a2);
  *(_DWORD *)int buf = 0;
  unint64_t v74 = v9;
  sub_21611494C(a4, v9, buf);
  CFArrayRef v10 = (const __CFArray *)a1[7];
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (v10 && CFArrayGetCount(v10))
  {
    for (unint64_t i = 0; i < CFArrayGetCount(v10); ++i)
    {
      uint64_t v13 = 32;
      do
      {
        v87.CFIndex location = i;
        v87.CFIndex length = 1;
        CFArrayAppendArray(Mutable, v10, v87);
        --v13;
      }
      while (v13);
    }
  }
  long long v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 == v15)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    v79[0] = 0;
    int64x2_t v78 = 0uLL;
  }
  else
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v18 = *v14;
      uint64_t v17 = v14[1];
      v14 += 3;
      unint64_t v19 = (v17 - v18) >> 2;
      if (v16 <= v19) {
        unint64_t v16 = v19;
      }
    }
    while (v14 != v15);
    float v82 = (float)*(int *)(a1[1] + 48);
    v79[0] = 0;
    int64x2_t v78 = 0uLL;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        sub_21610CB04();
      }
      uint64_t v86 = v79;
      uint64_t v20 = (char *)sub_216178CAC(v16);
      *(void *)int buf = v20;
      v84.i64[0] = (uint64_t)v20;
      CFStringRef v22 = &v20[24 * v21];
      v84.i64[1] = (uint64_t)v20;
      unsigned int v85 = v22;
      uint64_t v23 = (void *)v78.i64[1];
      uint64_t v24 = (void *)v78.i64[0];
      if (v78.i64[1] == v78.i64[0])
      {
        int64x2_t v27 = vdupq_n_s64(v78.u64[1]);
        uint64_t v25 = v20;
      }
      else
      {
        uint64_t v25 = v20;
        do
        {
          *((void *)v25 - 3) = 0;
          *((void *)v25 - 2) = 0;
          v25 -= 24;
          *((void *)v25 + 2) = 0;
          long long v26 = *(_OWORD *)(v23 - 3);
          v23 -= 3;
          *(_OWORD *)uint64_t v25 = v26;
          *((void *)v25 + 2) = v23[2];
          *uint64_t v23 = 0;
          v23[1] = 0;
          void v23[2] = 0;
        }
        while (v23 != v24);
        int64x2_t v27 = v78;
        uint64_t v20 = (char *)v84.i64[1];
        CFStringRef v22 = v85;
      }
      v78.i64[0] = (uint64_t)v25;
      v78.i64[1] = (uint64_t)v20;
      int64x2_t v84 = v27;
      unint64_t v30 = (char *)v79[0];
      v79[0] = v22;
      unsigned int v85 = v30;
      *(void *)int buf = v27.i64[0];
      sub_216267DA0((uint64_t)buf);
      for (unint64_t j = 0; j != v16; ++j)
      {
        sub_21611494C(value, 0x20uLL, &v82);
        uint64_t v32 = (char *)a2[1] - (char *)*a2;
        if (v32)
        {
          unint64_t v33 = v32 / 24;
          CFStringRef v34 = (float *)value[0];
          if (v33 <= 1) {
            unint64_t v33 = 1;
          }
          unint64_t v35 = *a2 + 1;
          do
          {
            uint64_t v36 = *(v35 - 1);
            if (j < (*v35 - v36) >> 2) {
              *CFStringRef v34 = (float)*(int *)(v36 + 4 * j);
            }
            ++v34;
            v35 += 3;
            --v33;
          }
          while (v33);
        }
        uint64_t v37 = v78.i64[1];
        if (v78.i64[1] >= v79[0])
        {
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v78.i64[1] - v78.i64[0]) >> 3) + 1;
          if (v38 > 0xAAAAAAAAAAAAAAALL) {
            sub_21610CB04();
          }
          if (0x5555555555555556 * ((v79[0] - v78.i64[0]) >> 3) > v38) {
            unint64_t v38 = 0x5555555555555556 * ((v79[0] - v78.i64[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v79[0] - v78.i64[0]) >> 3) >= 0x555555555555555) {
            unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v39 = v38;
          }
          uint64_t v86 = v79;
          std::string v40 = (char *)sub_216178CAC(v39);
          uint64_t v41 = &v40[8 * ((v78.i64[1] - v78.i64[0]) >> 3)];
          *(void *)int buf = v40;
          v84.i64[0] = (uint64_t)v41;
          unsigned int v85 = &v40[24 * v42];
          *(void *)uint64_t v41 = 0;
          *((void *)v41 + 1) = 0;
          *((void *)v41 + 2) = 0;
          *(_OWORD *)uint64_t v41 = *(_OWORD *)value;
          *((void *)v41 + 2) = v81;
          value[0] = 0;
          value[1] = 0;
          uint64_t v81 = 0;
          uint64_t v43 = v41 + 24;
          v84.i64[1] = (uint64_t)(v41 + 24);
          CFStringRef v44 = (void *)v78.i64[1];
          uint64_t v45 = (void *)v78.i64[0];
          uint64_t v46 = v84.i64[0];
          if (v78.i64[1] == v78.i64[0])
          {
            int64x2_t v48 = vdupq_n_s64(v78.u64[1]);
          }
          else
          {
            do
            {
              *(void *)(v46 - 24) = 0;
              *(void *)(v46 - 16) = 0;
              v46 -= 24;
              *(void *)(v46 + 16) = 0;
              long long v47 = *(_OWORD *)(v44 - 3);
              v44 -= 3;
              *(_OWORD *)uint64_t v46 = v47;
              *(void *)(v46 + 16) = v44[2];
              *CFStringRef v44 = 0;
              v44[1] = 0;
              v44[2] = 0;
            }
            while (v44 != v45);
            int64x2_t v48 = v78;
            uint64_t v43 = (void *)v84.i64[1];
          }
          v78.i64[0] = v46;
          int64x2_t v84 = v48;
          uint64_t v49 = (char *)v79[0];
          v79[0] = v85;
          unsigned int v85 = v49;
          *(void *)int buf = v48.i64[0];
          sub_216267DA0((uint64_t)buf);
          v78.i64[1] = (uint64_t)v43;
          if (value[0])
          {
            value[1] = value[0];
            operator delete(value[0]);
          }
        }
        else
        {
          *(void *)v78.i64[1] = 0;
          *(void *)(v37 + 8) = 0;
          *(void *)(v37 + 16) = 0;
          *(_OWORD *)uint64_t v37 = *(_OWORD *)value;
          *(void *)(v37 + 16) = v81;
          v78.i64[1] = v37 + 24;
        }
      }
      uint64_t v29 = v78.i64[1];
      uint64_t v28 = v78.i64[0];
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
    }
  }
  if (v29 - v28 != 24)
  {
    unint64_t v50 = 0;
    if (v74 <= 1) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = v74;
    }
    do
    {
      sub_2162667DC(a1[5], @"input", 32, *(void *)(v28 + 24 * v50++));
      sub_2162667DC(a1[5], @"label", 32, *(void *)(v78.i64[0] + 24 * v50));
      sub_21626691C(a1[5], (uint64_t)Mutable);
      CFArrayRef v52 = (const __CFArray *)sub_216266AD8(a1[5]);
      sub_216266DF4(Mutable, v52);
      BOOL v53 = (__int16 *)sub_216266BF4(a1[5]);
      if (v76 != v75)
      {
        char v54 = *a4;
        uint64_t v55 = *a2 + 1;
        uint64_t v56 = v51;
        do
        {
          if (v50 < (uint64_t)(*v55 - *(v55 - 1)) >> 2)
          {
            _H0 = *v53;
            __asm { FCVT            D0, H0 }
            *(float *)&_D0 = *v54 + _D0 * 0.434294482;
            *char v54 = *(float *)&_D0;
          }
          ++v54;
          ++v53;
          v55 += 3;
          --v56;
        }
        while (v56);
      }
      uint64_t v28 = v78.i64[0];
    }
    while (v50 < 0xAAAAAAAAAAAAAAABLL * ((v78.i64[1] - v78.i64[0]) >> 3) - 1);
  }
  if (v76 != v75 && a3)
  {
    uint64_t v63 = 0;
    if (v74 <= 1) {
      uint64_t v64 = 1;
    }
    else {
      uint64_t v64 = v74;
    }
    do
    {
      uint64_t v65 = a1[9];
      uint64_t v66 = &(*a2)[3 * v63];
      uint64_t v68 = *v66;
      uint64_t v67 = v66[1];
      int64_t v69 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
      unint64_t v70 = (v67 - v68) >> 2;
      unint64_t v71 = v70 - 15;
      if (v70 < 0xF) {
        unint64_t v71 = 0;
      }
      if (v71 < v70)
      {
        if (v70 >= 0xF) {
          uint64_t v72 = 15;
        }
        else {
          uint64_t v72 = (v67 - v68) >> 2;
        }
        CFIndex v73 = v63 + 32 * v70 - 32 * v72;
        do
        {
          v88.CFIndex location = v73;
          v88.CFIndex length = 1;
          CFArrayAppendArray(v69, Mutable, v88);
          v73 += 32;
          --v72;
        }
        while (v72);
      }
      if (v69)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(v65 + 8), v69);
        CFRelease(v69);
      }
      ++v63;
    }
    while (v63 != v64);
  }
  *(void *)int buf = &v78;
  sub_216267E04((void ***)buf);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_2162665D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v24 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_216266708(unsigned __int16 *a1, CFArrayRef theArray)
{
  if (theArray && CFArrayGetCount(theArray))
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v5 = *a1;
    if (Count <= v5)
    {
      MutableCFStringRef Copy = CFArrayCreateMutableCopy(0, Count, theArray);
      uint64_t v7 = (const void **)(a1 + 4);
    }
    else
    {
      CFMutableStringRef Mutable = CFArrayCreateMutable(0, v5, MEMORY[0x263EFFF70]);
      v11.CFIndex length = *a1;
      v11.CFIndex location = Count - v11.length;
      CFArrayAppendArray(Mutable, theArray, v11);
      uint64_t v7 = (const void **)(a1 + 4);
      MutableCFStringRef Copy = Mutable;
    }
    sub_2161BE0C8(v7, MutableCopy);
  }
  else
  {
    unint64_t v9 = (__CFArray *)*((void *)a1 + 1);
    CFArrayRemoveAllValues(v9);
  }
}

uint64_t sub_2162667DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  unsigned int v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))off_26797E020;
  uint64_t v15 = off_26797E020;
  if (!off_26797E020)
  {
    unint64_t v9 = (void *)sub_2162678F8();
    void v13[3] = (uint64_t)dlsym(v9, "MRLNeuralNetworkSetInput");
    off_26797E020 = (_UNKNOWN *)v13[3];
    unsigned int v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v8)
  {
    dlerror();
    CFRange v11 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v12, 8);
    _Unwind_Resume(v11);
  }
  return v8(a1, a2, a3, 1, a4, 0);
}

uint64_t sub_21626691C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  unint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, void))off_26797E028;
  CFRange v11 = off_26797E028;
  if (!off_26797E028)
  {
    CFIndex v5 = (void *)sub_2162678F8();
    v9[3] = (uint64_t)dlsym(v5, "MRLNeuralNetworkPredict");
    off_26797E028 = (_UNKNOWN *)v9[3];
    uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, void))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    dlerror();
    uint64_t v7 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v7);
  }
  return v4(a1, a2, 0);
}

void sub_216266A40(unsigned __int16 *a1, CFArrayRef theArray)
{
  CFArrayRef v4 = (const __CFArray *)*((void *)a1 + 1);
  if (v4)
  {
    while (CFArrayGetCount(v4) >= *a1)
    {
      CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)a1 + 1), 0);
      CFArrayRef v4 = (const __CFArray *)*((void *)a1 + 1);
    }
  }
  if (CFArrayGetCount(theArray) != 1) {
    __assert_rtn("extendStates", "MontrealLanguageModel.cpp", 193, "CFArrayGetCount(other) == otherExpectedSize");
  }
  CFIndex v5 = (__CFArray *)*((void *)a1 + 1);

  sub_216266DF4(v5, theArray);
}

uint64_t sub_216266AD8(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v2 = (uint64_t (*)(uint64_t, void))off_26797E030;
  unint64_t v9 = off_26797E030;
  if (!off_26797E030)
  {
    BOOL v3 = (void *)sub_2162678F8();
    v7[3] = (uint64_t)dlsym(v3, "MRLNeuralNetworkCopyStates");
    off_26797E030 = (_UNKNOWN *)v7[3];
    uint64_t v2 = (uint64_t (*)(uint64_t, void))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    CFIndex v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(a1, 0);
}

uint64_t sub_216266BF4(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v2 = (uint64_t (*)(uint64_t, __CFString *, void))off_26797E038;
  unint64_t v9 = off_26797E038;
  if (!off_26797E038)
  {
    BOOL v3 = (void *)sub_2162678F8();
    v7[3] = (uint64_t)dlsym(v3, "MRLNeuralNetworkGetOutput");
    off_26797E038 = (_UNKNOWN *)v7[3];
    uint64_t v2 = (uint64_t (*)(uint64_t, __CFString *, void))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    CFIndex v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(a1, @"logits", 0);
}

void sub_216266D18(void *a1, unsigned __int16 *a2)
{
  BOOL v3 = (const void **)(a2 + 4);
  uint64_t v2 = *((void *)a2 + 1);
  if (v2)
  {
    *((void *)a2 + 1) = 0;
    *a1 = v2;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, *a2, MEMORY[0x263EFFF70]);
    sub_2161BE0C8(v3, Mutable);
  }
  else
  {
    *a1 = 0;
  }
}

void sub_216266D88(_Unwind_Exception *a1)
{
  sub_2161BE0C8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_216266DA0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_2161BE0C8((const void **)(v2 + 8), 0);
    MEMORY[0x2166CA800](v2, 0x1020C400CC4F872);
  }
  return a1;
}

void sub_216266DF4(__CFArray *a1, CFArrayRef theArray)
{
  v5.CFIndex length = CFArrayGetCount(theArray);
  v5.CFIndex location = 0;
  CFArrayAppendArray(a1, theArray, v5);

  CFRelease(theArray);
}

void sub_216266E48(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(const void ***)a1;
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    if (*v2) {
      __dynamic_cast(*v2, (const struct __class_type_info *)&unk_26C6B9768, (const struct __class_type_info *)&unk_26C6B9B08, 0);
    }
    operator new();
  }
}

void sub_216267320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_2161BE0C8((const void **)&__p, 0);
  sub_216266DA0(&a18);
  uint64_t v20 = *(void **)v18;
  if (*(void *)v18)
  {
    *(void *)(v18 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_2162673AC(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 16))(&__p);
  operator new();
}

void sub_2162675DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216267634(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

void sub_21626763C(uint64_t a1, CFIndex a2)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 72) + 8), a2);
  CFArrayCreateCopy(v2, ValueAtIndex);
  operator new();
}

void sub_2162676C4(uint64_t a1)
{
  sub_216267FE8(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2162676FC(void **a1)
{
  (*(void (**)(void **__return_ptr))(*a1[1] + 24))(__p);
  ((void (*)(void **, void **))(*a1)[13])(a1, __p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216267794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162677B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t sub_2162677D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 1, a2 + 8);
}

uint64_t sub_216267810(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void *))(*(void *)a1 + 72))(a1, *a2, (uint64_t)(a2[1] - *a2) >> 1, a2 + 3);
}

BOOL sub_216267848(void *a1)
{
  uint64_t v1 = a1[1];
  return v1 && *(void *)(v1 + 8) && sub_216265B34(a1);
}

uint64_t sub_216267864()
{
  return 2;
}

uint64_t sub_21626786C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t *sub_216267874@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2162C4050(*(void *)(a1 + 8), a2, *(_DWORD *)(a1 + 64), a3);
}

BOOL sub_21626788C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8) != 0;
}

uint64_t sub_2162678A0()
{
  return 0;
}

void *sub_2162678A8(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)sub_2162678F8();
  uint64_t result = dlsym(v2, "kMRLNeuralNetworkOptionModelURLKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797E040 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_2162678F8()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!qword_26797E018)
  {
    v3[1] = MEMORY[0x263EF8330];
    v3[2] = 0x40000000;
    v3[3] = sub_216267A08;
    v3[4] = &unk_26426C2B8;
    v3[5] = v3;
    long long v4 = xmmword_26426C2A0;
    uint64_t v5 = 0;
    qword_26797E018 = _sl_dlopen();
    uint64_t v1 = (void *)v3[0];
    uint64_t v0 = qword_26797E018;
    if (qword_26797E018)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      uint64_t v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return qword_26797E018;
}

uint64_t sub_216267A08()
{
  uint64_t result = _sl_dlopen();
  qword_26797E018 = result;
  return result;
}

void *sub_216267A7C(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)sub_2162678F8();
  uint64_t result = dlsym(v2, "kMRLNeuralNetworkOptionModelTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797E048 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216267ACC(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)sub_2162678F8();
  uint64_t result = dlsym(v2, "kMRLNeuralNetworkModelTypeE5RT");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26797E050 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216267B1C(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)sub_2162678F8();
  uint64_t result = dlsym(v2, "MRLNeuralNetworkCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797E058 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216267B6C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF760;
  sub_216195B94((const void **)(a1 + 8), 0);

  JUMPOUT(0x2166CA800);
}

void sub_216267BD4(uint64_t a1)
{
}

uint64_t sub_216267C58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void *sub_216267C60(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)sub_2162678F8();
  uint64_t result = dlsym(v2, "MRLNeuralNetworkSetInput");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797E020 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216267CB0(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)sub_2162678F8();
  uint64_t result = dlsym(v2, "MRLNeuralNetworkPredict");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797E028 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216267D00(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)sub_2162678F8();
  uint64_t result = dlsym(v2, "MRLNeuralNetworkCopyStates");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797E030 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216267D50(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)sub_2162678F8();
  uint64_t result = dlsym(v2, "MRLNeuralNetworkGetOutput");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797E038 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_216267DA0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    long long v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216267E04(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        long long v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_216267E94(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216112970(a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_216267EF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216267F0C(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 1;
      uint64_t v6 = v5 | 1;
      uint64_t v7 = (int *)(result + 4 * (v5 | 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = *a2;
      if (v8 < a3 && *(short float *)(v9 + 2 * *v7) > *(short float *)(v9 + 2 * v7[1]))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      short float v12 = *(short float *)(v9 + 2 * v11);
      if (*(short float *)(v9 + 2 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (int *)(result + 4 * v6);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(short float *)(v9 + 2 * *v7) > *(short float *)(v9 + 2 * v7[1]))
          {
            ++v7;
            uint64_t v6 = v14;
          }
          uint64_t v10 = *v7;
        }
        while (*(short float *)(v9 + 2 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_216267FE8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BFCC0;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)(a1 + 48) = &unk_26C6BF760;
  sub_216195B94((const void **)(a1 + 56), 0);
  sub_2162680EC((const void **)(a1 + 40));
  sub_2162680EC((const void **)(a1 + 32));
  sub_2162680EC((const void **)(a1 + 24));
  sub_2162680EC((const void **)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26C6C05E8;
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_2162680EC(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
}

uint64_t sub_216268120(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C0230;
  sub_2161BE0C8((const void **)(a1 + 8), 0);
  return a1;
}

void sub_216268168(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C0230;
  sub_2161BE0C8((const void **)(a1 + 8), 0);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162681D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    uint64_t v3 = a2;
    int64_t v4 = (char *)result;
    while (1)
    {
      unint64_t v6 = 0;
      uint64_t v7 = 2 * v3;
      while (*(_WORD *)&v4[2 * v6] == 12387)
      {
        ++v6;
        v7 -= 2;
        if (!v7)
        {
          unint64_t v6 = ((v3 - 1) & 0x7FFFFFFFFFFFFFFFLL) + 1;
          break;
        }
      }
      if (v3 - 1 >= v6) {
        unint64_t v8 = v6;
      }
      else {
        unint64_t v8 = v3 - 1;
      }
      uint64_t v9 = sub_2162683EC(*(unsigned __int16 *)&v4[2 * v8]);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      if (v8)
      {
        if (v10)
        {
          uint64_t v13 = 0;
          while (*(unsigned __int16 *)v9 != (unsigned __int16)word_21638304A[v13])
          {
            if (++v13 == 6) {
              goto LABEL_17;
            }
          }
        }
        --v8;
        uint64_t v11 = sub_2162683EC(*(unsigned __int16 *)&v4[2 * v8]);
        unint64_t v12 = v14;
      }
LABEL_17:
      if (!v4) {
        break;
      }
      if (v3 - v8 < 2) {
        break;
      }
      uint64_t v15 = &v4[2 * v8];
      if (!sub_2162684AC(*(unsigned __int16 *)v15)
        || !sub_2162684AC(*((unsigned __int16 *)v15 + 1))
        || byte_21638314C[*(unsigned __int16 *)v15 - 12353] < 0)
      {
        break;
      }
      uint64_t v16 = 0;
      char v17 = -1;
      do
      {
        if (*((unsigned __int16 *)v15 + 1) == word_2163831A0[v16]) {
          char v17 = v16;
        }
        ++v16;
      }
      while (v16 != 9);
      if (v17 < 0) {
        break;
      }
      unint64_t v18 = 9 * byte_21638314C[*(unsigned __int16 *)v15 - 12353] + v17;
      if (v18 > 0xCE) {
        break;
      }
      unint64_t v19 = (char *)*(&off_26426C700 + v18);
      if (!*(_WORD *)v19) {
        break;
      }
      unint64_t v20 = 0;
      do
        uint64_t v21 = &v19[2 * v20++];
      while (*((_WORD *)v21 + 1));
      if (!v20) {
        break;
      }
      unint64_t v22 = v8 + 2;
      if (v8) {
        goto LABEL_41;
      }
LABEL_42:
      uint64_t result = sub_216198220((uint64_t)a3, v19, v20);
      if (v4)
      {
        v4 += 2 * v22;
        v3 -= v22;
        if (v3) {
          continue;
        }
      }
      return result;
    }
    unint64_t v22 = v8 + 1;
    if (v12) {
      unint64_t v19 = v11;
    }
    else {
      unint64_t v19 = v4;
    }
    if (v12 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = v12;
    }
    if (!v8) {
      goto LABEL_42;
    }
    do
    {
LABEL_41:
      sub_2161845F8((uint64_t)a3, *(_WORD *)v19);
      --v8;
    }
    while (v8);
    goto LABEL_42;
  }
  return result;
}

void sub_2162683CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2162683EC(unsigned int a1)
{
  if (sub_2162684AC(a1))
  {
    uint64_t result = (char *)*(&off_26426C460 + a1 - 12353);
    if (*(_WORD *)result)
    {
      uint64_t v3 = 0;
      do
        int64_t v4 = &result[2 * v3++];
      while (*((_WORD *)v4 + 1));
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t result = byte_2163CA662;
    while (word_2163831B2[v5] != a1)
    {
      if (++v5 == 6) {
        return result;
      }
    }
    uint64_t result = (char *)*(&off_26426CD78 + v5);
    if (*(_WORD *)result)
    {
      uint64_t v6 = 0;
      do
        uint64_t v7 = &result[2 * v6++];
      while (*((_WORD *)v7 + 1));
    }
  }
  return result;
}

BOOL sub_2162684AC(unsigned int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E068, memory_order_acquire) & 1) == 0)
  {
    unsigned int v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_26797E068);
    a1 = v4;
    if (v3)
    {
      word_26797E060 = 12437;
      __cxa_guard_release(&qword_26797E068);
      a1 = v4;
    }
  }
  return a1 > 0x3040 && (unsigned __int16)word_26797E060 > a1;
}

uint64_t sub_21626852C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F270, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F270))
  {
    operator new();
  }
  return qword_26797F268;
}

void sub_2162685A0(_Unwind_Exception *a1)
{
}

uint64_t sub_2162685B8(uint64_t a1)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = sub_216268650;
  block[3] = &unk_26426C3F0;
  block[4] = a1;
  if (qword_26797F278 != -1) {
    dispatch_once(&qword_26797F278, block);
  }
  return a1;
}

void sub_216268650(uint64_t a1)
{
  uint64_t v1 = *(dispatch_group_t **)(a1 + 32);
  uint64_t v2 = (char *)sub_2161E1880("/System/Library/PrivateFrameworks/EmojiFoundation.framework/EmojiFoundation");
  __path[1] = v2;
  if (v2)
  {
    int v3 = v2;
    sub_2161E2FFC((const __CFString *)v2, __path);
    unsigned int v4 = __path[0];
    uint64_t v5 = dlopen(__path[0], 2);
    if (v4) {
      MEMORY[0x2166CA7C0](v4, 0x1000C8077774924);
    }
    if (v5)
    {
      qword_26797F280 = (uint64_t)objc_getClass("EMFEmojiLocaleData");
      qword_26797F288 = (uint64_t)objc_getClass("EMFEmojiPreferencesService");
      qword_26797F290 = (uint64_t)objc_getClass("EMFEmojiToken");
    }
    *uint64_t v1 = dispatch_group_create();
    CFRelease(v3);
  }
  else
  {
    *uint64_t v1 = dispatch_group_create();
  }
}

void sub_216268730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216268770(NSObject **a1, unsigned int a2, uint64_t a3)
{
  if (qword_26797F280) {
    BOOL v3 = qword_26797F288 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && qword_26797F290 != 0)
  {
    uint64_t v7 = sub_216259794(a2);
    if (v7)
    {
      uint64_t v9 = [qword_26797F280 emojiLocaleDataWithLocaleIdentifier:v8];
      uint64_t v11 = [qword_26797F290 emojiTokenWithString:v10 localeData:a3];
      if (v11)
      {
        uint64_t v13 = v11;
        unint64_t v14 = [qword_26797F288 sharedServiceWithMachName:v12];
        uint64_t v15 = *a1;
        unint64_t v18 = [v14 dispatchQueue:v16, v17];
        v19[0] = MEMORY[0x263EF8330];
        v19[1] = 3221225472;
        v19[2] = sub_216268874;
        v19[3] = &unk_26426C418;
        void v19[4] = v14;
        uint64_t v19[5] = v13;
        dispatch_group_async(v15, v18, v19);
      }
    }
  }
}

uint64_t sub_216268874(uint64_t a1, const char *a2, uint64_t a3)
{
  unsigned int v4 = [*(void **)(a1 + 32) a2:a3];
  [v4 objc_msgSend_didUseEmoji:v5 *(void *)(a1 + 40)];
  uint64_t v8 = [*(void **)(a1 + 32) v6:v7];

  return MEMORY[0x270F9A6D0](v8, sel_writeEmojiDefaults, v9);
}

uint64_t sub_2162688BC(uint64_t a1, const char *a2)
{
  if (qword_26797F280) {
    BOOL v2 = qword_26797F288 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2 || qword_26797F290 == 0) {
    return 0;
  }
  uint64_t v5 = [objc_msgSend_sharedServiceWithMachName_((void *)qword_26797F288, a2, 0);
  uint64_t v7 = [qword_26797F290 emojiTokenWithString:v6 localeData:a2];
  if (!objc_msgSend_supportsSkinToneVariants(v7, v8, v9)) {
    return 0;
  }
  unint64_t v12 = [v5 preferences:v10 with:v11];
  UsedVariantEmojiForEmojunint64_t i = [v12 lastUsedVariantEmojiForEmoji:v13 lastUsedVariantEmoji:v7];

  return [UsedVariantEmojiForEmoji stringWithFormat:v15, v16];
}

uint64_t sub_216268968@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result <= 5 && ((1 << result) & 0x34) != 0) {
    operator new();
  }
  *a2 = 0;
  return result;
}

void sub_216268A20(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4004C96B00);
  _Unwind_Resume(a1);
}

void sub_216268A44(int a1)
{
  BOOL v2 = (uint64_t *)sub_2162D8C20();
  if (a1 == 5) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 1;
  }
  if (a1 == 13) {
    unint64_t v4 = 5;
  }
  else {
    unint64_t v4 = v3;
  }
  sub_2162D8CB8(v2, v4, off_26797C900[0], off_26797C880[0]);
  operator new();
}

void sub_216268AE0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10B0C40A1109CE3);
  _Unwind_Resume(a1);
}

uint64_t *sub_216268B0C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F2A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F2A8))
  {
    qword_26797F298 = 0;
    unk_26797F2A0 = 0;
    __cxa_guard_release(&qword_26797F2A8);
  }
  return &qword_26797F298;
}

uint64_t *sub_216268B64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F2C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F2C0))
  {
    qword_26797F2B0 = (uint64_t)L"";
    *(void *)algn_26797F2B8 = 0;
    __cxa_guard_release(&qword_26797F2C0);
  }
  return &qword_26797F2B0;
}

BOOL sub_216268BC4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) < v2) {
    return 0;
  }
  unsigned int v3 = *(const void **)a1;
  return (!v2 || v3 != 0) && memcmp(v3, *(const void **)a2, 2 * v2) == 0;
}

BOOL sub_216268C14(uint64_t *a1, const void *a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  BOOL v4 = v3 >= a3;
  unint64_t v5 = v3 - a3;
  if (v4 && ((uint64_t v6 = *a1, !a3) || v6)) {
    return memcmp((const void *)(v6 + 2 * v5), a2, 2 * a3) == 0;
  }
  else {
    return 0;
  }
}

void sub_216268C5C(void *a1, __int16 a2, double a3)
{
  unint64_t v8 = a1[3];
  uint64_t v6 = (uint64_t)(a1 + 3);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    unint64_t v12 = (void **)(v6 - 16);
    uint64_t v13 = *(void *)(v6 - 16);
    uint64_t v14 = (uint64_t)(v9 - v13) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_216254B1C();
    }
    uint64_t v16 = v7 - v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    unint64_t v18 = (char *)sub_2160FFAA8(v6, v17);
    unint64_t v19 = (float *)&v18[8 * v14];
    uint64_t v21 = &v18[8 * v20];
    *(_WORD *)unint64_t v19 = a2;
    float v22 = a3;
    v19[1] = v22;
    uint64_t v11 = (char *)(v19 + 2);
    uint64_t v24 = (char *)a1[1];
    uint64_t v23 = (char *)a1[2];
    if (v23 != v24)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v19 - 1) = v25;
        v19 -= 2;
      }
      while (v23 != v24);
      uint64_t v23 = (char *)*v12;
    }
    a1[1] = v19;
    a1[2] = v11;
    a1[3] = v21;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *(_WORD *)unint64_t v9 = a2;
    float v10 = a3;
    *(float *)(v9 + 4) = v10;
    uint64_t v11 = (char *)(v9 + 8);
  }
  a1[2] = v11;
}

BOOL sub_216268D4C(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 8))(a2)) {
    return 0;
  }
  int v5 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return v5 == (**(unsigned int (***)(uint64_t))a2)(a2);
}

__CFString *sub_216268E34(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  uint64_t v3 = (**(uint64_t (***)(uint64_t))a1)(a1);
  CFStringAppendFormat(Mutable, 0, @"{type:%d,%c,", v3, *(unsigned __int16 *)(a1 + 32));
  int v5 = *(unsigned __int16 **)(a1 + 8);
  for (unint64_t i = *(unsigned __int16 **)(a1 + 16); v5 != i; v5 += 4)
  {
    uint64_t v6 = *v5;
    if (v5 == i - 4) {
      CFStringAppendFormat(Mutable, 0, @"%c:%.2f", v6, *((float *)v5 + 1));
    }
    else {
      CFStringAppendFormat(Mutable, 0, @"%c:%.2f,", v6, *((float *)v5 + 1));
    }
    unint64_t i = *(unsigned __int16 **)(a1 + 16);
  }
  CFStringAppend(Mutable, @"}\n");
  return Mutable;
}

BOOL sub_216268F34(uint64_t a1, const void *a2)
{
  BOOL result = sub_216268D4C(a1, (uint64_t)a2);
  if (result)
  {
    int v5 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6B97B0, 0);
    if (!v5) {
      __cxa_bad_cast();
    }
    if (vabdd_f64(*((double *)v5 + 4), *(double *)(a1 + 32)) >= 2.22044605e-16
      || vabdd_f64(*((double *)v5 + 5), *(double *)(a1 + 40)) >= 2.22044605e-16
      || vabdd_f64(*((double *)v5 + 6), *(double *)(a1 + 48)) >= 2.22044605e-16
      || vabdd_f64(*((double *)v5 + 7), *(double *)(a1 + 56)) >= 2.22044605e-16)
    {
      return 0;
    }
    else
    {
      return (*((unsigned char *)v5 + 68) == 0) ^ (*(unsigned char *)(a1 + 68) != 0);
    }
  }
  return result;
}

uint64_t sub_216269034(uint64_t result, uint64_t a2)
{
  char v6 = 0;
  unint64_t v2 = *(float **)(result + 8);
  uint64_t v3 = *(unsigned __int16 **)(result + 16);
  if (v2 != (float *)v3)
  {
    do
    {
      BOOL result = (*(uint64_t (**)(uint64_t, void, char *, float))(a2 + 16))(a2, *(unsigned __int16 *)v2, &v6, v2[1]);
      v2 += 2;
      if (v6) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = v2 == (float *)v3;
      }
    }
    while (!v5);
  }
  return result;
}

uint64_t sub_2162690A4(uint64_t a1, char a2)
{
  uint64_t v6 = 0;
  unint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  void v4[2] = sub_216269164;
  void v4[3] = &unk_26426C440;
  char v5 = a2;
  _OWORD v4[4] = &v6;
  sub_216269034(a1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_21626914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_216269164(uint64_t result, int a2, unsigned char *a3)
{
  if (a2 == *(char *)(result + 40))
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

__CFString *sub_216269188(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  uint64_t v3 = (**(uint64_t (***)(uint64_t))a1)(a1);
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  CFStringAppendFormat(Mutable, 0, @"{type:%d,%c,%d,%.2f,%.2f,%.2f,%.2f,%d,", v3, v4, *(unsigned int *)(a1 + 64), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 68));
  uint64_t v6 = *(unsigned __int16 **)(a1 + 8);
  for (unint64_t i = *(unsigned __int16 **)(a1 + 16); v6 != i; v6 += 4)
  {
    uint64_t v7 = *v6;
    if (v6 == i - 4) {
      CFStringAppendFormat(Mutable, 0, @"%c:%.2f", v7, *((float *)v6 + 1));
    }
    else {
      CFStringAppendFormat(Mutable, 0, @"%c:%.2f,", v7, *((float *)v6 + 1));
    }
    unint64_t i = *(unsigned __int16 **)(a1 + 16);
  }
  CFStringAppendFormat(Mutable, 0, @"}\n");
  return Mutable;
}

void sub_2162692D8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  v44[4] = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  unint64_t v30 = &v29;
  uint64_t v31 = 0x4812000000;
  uint64_t v32 = sub_216269584;
  unint64_t v33 = sub_2162695A8;
  CFStringRef v34 = "";
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  long long __p = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2020000000;
  void v28[3] = 0;
  v39[0] = MEMORY[0x263EF8330];
  v39[1] = 3321888768;
  std::string v40 = sub_2162695C0;
  uint64_t v41 = &unk_26C6F6130;
  uint64_t v42 = v28;
  sub_216269B0C((uint64_t)v44, a3);
  uint64_t v43 = &v29;
  unint64_t v12 = *(float **)(a1 + 8);
  uint64_t v11 = *(unsigned __int16 **)(a1 + 16);
  char v38 = 0;
  if (v12 != (float *)v11)
  {
    unint64_t v13 = 0;
    float v14 = 0.0;
    do
    {
      if (v38) {
        BOOL v15 = 1;
      }
      else {
        BOOL v15 = v13 >= a2;
      }
      if (v15) {
        break;
      }
      float v16 = v12[1];
      float v17 = v16;
      if (v13)
      {
        BOOL v18 = v16 >= a6 && (float)(v14 - v16) <= a5;
        float v17 = v14;
        if (!v18) {
          break;
        }
      }
      ((void (*)(void *, void, char *))v40)(v39, *(unsigned __int16 *)v12, &v38);
      ++v13;
      v12 += 2;
      float v14 = v17;
    }
    while (v12 != (float *)v11);
  }
  unint64_t v19 = v30;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v20 = (char *)v19[6];
  uint64_t v21 = (char *)v19[7];
  uint64_t v22 = v21 - v20;
  if (v21 != v20)
  {
    if (v22 < 0) {
      sub_216254B1C();
    }
    uint64_t v23 = sub_2160FFAA8((uint64_t)(a4 + 2), v22 >> 3);
    uint64_t v24 = 0;
    *a4 = v23;
    a4[1] = v23;
    a4[2] = &v23[v25];
    long long v26 = v23;
    do
    {
      uint64_t v27 = *(void *)v20;
      v20 += 8;
      *v26++ = v27;
      ++v24;
    }
    while (v20 != v21);
    a4[1] = &v23[v24];
  }
  sub_21624F5E4(v44);
  _Block_object_dispose(v28, 8);
  _Block_object_dispose(&v29, 8);
  if (__p)
  {
    uint64_t v36 = __p;
    operator delete(__p);
  }
}

void sub_216269528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_216269584(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_2162695A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_2162695C0(uint64_t a1, __int16 a2, float a3)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) || (sub_216198D5C(a1 + 48, a2) & 1) == 0)
  {
    uint64_t v6 = *(void **)(*(void *)(a1 + 40) + 8);
    unint64_t v7 = v6[7];
    unint64_t v8 = v6[8];
    if (v7 >= v8)
    {
      uint64_t v10 = v6[6];
      uint64_t v11 = (uint64_t)(v7 - v10) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        sub_216254B1C();
      }
      uint64_t v13 = v8 - v10;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      BOOL v15 = (char *)sub_2160FFAA8((uint64_t)(v6 + 8), v14);
      float v16 = (float *)&v15[8 * v11];
      BOOL v18 = &v15[8 * v17];
      *(_WORD *)float v16 = a2;
      v16[1] = a3;
      char v9 = (char *)(v16 + 2);
      uint64_t v20 = (char *)v6[6];
      unint64_t v19 = (char *)v6[7];
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v16 - 1) = v21;
          v16 -= 2;
        }
        while (v19 != v20);
        unint64_t v19 = (char *)v6[6];
      }
      v6[6] = v16;
      _OWORD v6[7] = v9;
      v6[8] = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_WORD *)unint64_t v7 = a2;
      *(float *)(v7 + 4) = a3;
      char v9 = (char *)(v7 + 8);
    }
    _OWORD v6[7] = v9;
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t sub_2162696F0(uint64_t a1, uint64_t a2)
{
  return sub_216269B0C(a1 + 48, a2 + 48);
}

void *sub_2162696FC(uint64_t a1)
{
  return sub_21624F5E4((void *)(a1 + 48));
}

CFStringRef sub_216269704(uint64_t (***a1)(void))
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v2 = (**a1)(a1);
  return CFStringCreateWithFormat(v1, 0, @"type:%d;", v2);
}

uint64_t sub_216269770()
{
  return 0;
}

uint64_t sub_216269778(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 32);
}

void *sub_216269780(void *a1)
{
  *a1 = &unk_26C6BE888;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2162697D0(void *a1)
{
  *a1 = &unk_26C6BE888;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216269840()
{
  return 0;
}

uint64_t sub_216269850()
{
  return 3;
}

uint64_t sub_216269858(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF840;
  unsigned int v4 = (void **)(a1 + 32);
  sub_21613F444(&v4);
  *(void *)a1 = &unk_26C6BE888;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2162698DC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF840;
  unsigned int v4 = (void **)(a1 + 32);
  sub_21613F444(&v4);
  *(void *)a1 = &unk_26C6BE888;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return MEMORY[0x2166CA800](a1, 0xA1C40B41E38F6);
}

uint64_t sub_216269974()
{
  return 1;
}

uint64_t sub_21626997C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 70);
}

void *sub_216269984(void *a1)
{
  *a1 = &unk_26C6BE888;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2162699D4(void *a1)
{
  *a1 = &unk_26C6BE888;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216269A44()
{
  return 2;
}

void *sub_216269A4C(void *a1)
{
  *a1 = &unk_26C6BE888;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216269A9C(void *a1)
{
  *a1 = &unk_26C6BE888;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216269B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_216269BA4(uint64_t a1, void *a2, const void *a3, void *a4, uint64_t a5, int a6, char a7, unsigned int a8)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_21626FFC4((void *)a1, *(const void **)a5, *(void *)(a5 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 1));
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 4sub_216195B94(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_DWORD *)(a1 + 176) = a6;
  *(unsigned char *)(a1 + 18sub_216195B94(&a9, 0) = a7;
  float v16 = operator new(0xAuLL);
  __src = a2;
  std::string v40 = a4;
  unsigned int v41 = a8;
  uint64_t v17 = (char *)(v16 + 5);
  void v16[4] = 0;
  *(void *)float v16 = 0;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v16 + 5;
  *(void *)(a1 + 112) = v16 + 5;
  BOOL v18 = *(_WORD **)a5;
  unint64_t v19 = *(_WORD **)(a5 + 8);
  if (*(_WORD **)a5 != v19)
  {
    do
    {
      __int16 v20 = v18[4];
      unint64_t v21 = ((unint64_t)(unsigned __int16)(v18[2] + *((_WORD *)v17 - 3)) << 32) | ((unint64_t)*((unsigned __int16 *)v17 - 2) << 48) | ((unint64_t)(unsigned __int16)(v18[1] + *((_WORD *)v17 - 4)) << 16) | (unsigned __int16)(*v18 + *((_WORD *)v17 - 5));
      unint64_t v22 = *(void *)(a1 + 112);
      if ((unint64_t)v17 >= v22)
      {
        uint64_t v23 = *(void *)(a1 + 96);
        unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v17[-v23] >> 1);
        unint64_t v25 = v24 + 1;
        if (v24 + 1 > 0x1999999999999999) {
          sub_21610CB04();
        }
        unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v23) >> 1);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0xCCCCCCCCCCCCCCCLL) {
          unint64_t v27 = 0x1999999999999999;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27) {
          unint64_t v27 = (unint64_t)sub_21627006C(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        unint64_t v29 = v27 + 10 * v24;
        *(void *)unint64_t v29 = v21;
        *(_WORD *)(v29 + 8) = v20;
        uint64_t v31 = *(_WORD **)(a1 + 96);
        unint64_t v30 = *(_WORD **)(a1 + 104);
        unint64_t v32 = v29;
        if (v30 != v31)
        {
          do
          {
            uint64_t v33 = *(void *)(v30 - 5);
            v30 -= 5;
            __int16 v34 = v30[4];
            *(void *)(v32 - 1sub_216195B94(&a9, 0) = v33;
            v32 -= 10;
            *(_WORD *)(v32 + 8) = v34;
          }
          while (v30 != v31);
          unint64_t v30 = *(_WORD **)(a1 + 96);
        }
        uint64_t v17 = (char *)(v29 + 10);
        *(void *)(a1 + 96) = v32;
        *(void *)(a1 + 104) = v29 + 10;
        *(void *)(a1 + 112) = v27 + 10 * v28;
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *(void *)uint64_t v17 = v21;
        *((_WORD *)v17 + 4) = v20;
        v17 += 10;
      }
      *(void *)(a1 + 104) = v17;
      v18 += 5;
    }
    while (v18 != v19);
  }
  sub_216184BFC(a1 + 24, *((unsigned __int16 *)v17 - 5));
  sub_216184BFC(a1 + 48, *(unsigned __int16 *)(*(void *)(a1 + 104) - 8));
  sub_216184BFC(a1 + 72, *(unsigned __int16 *)(*(void *)(a1 + 104) - 6));
  memcpy(*(void **)(a1 + 24), __src, 2 * *(unsigned __int16 *)(*(void *)(a1 + 104) - 10));
  memcpy(*(void **)(a1 + 48), a3, 2 * *(unsigned __int16 *)(*(void *)(a1 + 104) - 8));
  memcpy(*(void **)(a1 + 72), v40, 2 * *(unsigned __int16 *)(*(void *)(a1 + 104) - 6));
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v36 = (*(void *)(a1 + 32) - v35) >> 1;
  if (!v35) {
    uint64_t v36 = 0;
  }
  v42[0] = *(void *)(a1 + 24);
  v42[1] = v36;
  sub_216183E18(v42, (unint64_t *)(a1 + 120), a1 + 136, (v41 >> 30) & 1, &v43);
  if ((v45 & 0x80) != 0)
  {
    uint64_t v37 = v43;
    *(_WORD *)(a1 + 128) = v44;
    operator delete(v37);
  }
  else
  {
    *(_WORD *)(a1 + 128) = v45;
  }
  return a1;
}

void sub_216269EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15)
{
  sub_216144C28(v16);
  BOOL v18 = *(void **)(v15 + 96);
  if (v18)
  {
    *(void *)(v15 + 104) = v18;
    operator delete(v18);
  }
  unint64_t v19 = *a13;
  if (*a13)
  {
    *(void *)(v15 + 8sub_216195B94(&a9, 0) = v19;
    operator delete(v19);
  }
  __int16 v20 = *a14;
  if (*a14)
  {
    *(void *)(v15 + 56) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *a15;
  if (*a15)
  {
    *(void *)(v15 + 32) = v21;
    operator delete(v21);
  }
  unint64_t v22 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216269F20(uint64_t a1, void *a2, unint64_t a3, uint64_t *a4, int a5, int a6, int a7, int a8)
{
  unint64_t v14 = sub_21617FAAC((void *)a1, a2, a3);
  void v14[3] = 0;
  void v14[4] = 0;
  void v14[5] = 0;
  sub_2162700B4(v14 + 3, *a4, a4[1], 0xD37A6F4DE9BD37A7 * ((a4[1] - *a4) >> 3));
  *(_DWORD *)(a1 + 52) = a6;
  *(_DWORD *)(a1 + 56) = a7;
  *(_DWORD *)(a1 + 6sub_216195B94(&a9, 0) = 0;
  *(_DWORD *)(a1 + 64) = a8;
  sub_216269FF4(a1, a5);
  return a1;
}

void sub_216269FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161DDA68((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void sub_216269FF4(uint64_t a1, int a2)
{
  unint64_t v17 = 0;
  unint64_t v4 = sub_21626AA18(a1);
  if (v4)
  {
    uint64_t v5 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v5 = *(void *)a1;
    }
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 32);
    if (v6 == v7)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      do
      {
        v8 += *(unsigned __int16 *)(*(void *)(v6 + 104) - 10);
        v6 += 184;
      }
      while (v6 != v7);
    }
    uint64_t v10 = v5 + 2 * v8;
    if (v5) {
      uint64_t v11 = v4;
    }
    else {
      uint64_t v11 = 0;
    }
    v13[0] = v10;
    v13[1] = v11;
    sub_216183E18(v13, &v17, 0, (*(_DWORD *)(a1 + 56) >> 30) & 1, &v14);
    if ((char)v16 < 0)
    {
      int v12 = v15;
      operator delete(v14);
    }
    else
    {
      int v12 = v16;
    }
    int v9 = -10000 * (v12 - v17);
  }
  else
  {
    int v9 = 0;
  }
  *(_DWORD *)(a1 + 48) = v9 + a2;
}

uint64_t sub_21626A0D8(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = (char *)(a2 + 8);
  int v7 = *((char *)a2 + 87);
  if (v7 >= 0) {
    uint64_t v8 = a2 + 8;
  }
  else {
    uint64_t v8 = (void *)a2[8];
  }
  if (v7 >= 0) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = a2[9];
  }
  uint64_t v10 = sub_21617FAAC((void *)a1, v8, v9);
  v10[3] = 0;
  uint64_t v81 = (void **)(v10 + 3);
  _DWORD v10[4] = 0;
  void v10[5] = 0;
  *((_DWORD *)v10 + 13) = *((_DWORD *)a2 + 55);
  *((_DWORD *)v10 + 14) = a3;
  uint64_t v82 = a1;
  *(_DWORD *)(a1 + 6sub_216195B94(&a9, 0) = (*(uint64_t (**)(void *))(*a2 + 408))(a2);
  *(_DWORD *)(a1 + 64) = (*(uint64_t (**)(void *))(*a2 + 96))(a2);
  CFRange v88 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E078, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E078))
  {
    sub_2161C04AC(0);
    qword_26797E070 = (uint64_t)&qword_26797EF20;
    __cxa_guard_release(&qword_26797E078);
  }
  char v83 = (void *)(*(uint64_t (**)(void *))(*a2 + 304))(a2);
  uint64_t v84 = (*(uint64_t (**)(void *))(*a2 + 48))(a2);
  int v11 = *((char *)a2 + 87);
  BOOL v12 = v11 < 0;
  uint64_t v13 = (char *)a2[8];
  if (v11 >= 0) {
    uint64_t v13 = v6;
  }
  unint64_t v14 = *((unsigned __int8 *)a2 + 87);
  if (v12) {
    unint64_t v14 = a2[9];
  }
  int v97 = v13;
  unint64_t v98 = v14;
  uint64_t v15 = (*(uint64_t (**)(void *))(*a2 + 552))(a2);
  unint64_t v17 = v16;
  uint64_t v18 = (*(uint64_t (**)(void *))(*a2 + 544))(a2);
  unint64_t v20 = v19;
  unint64_t v21 = sub_2161849E4((uint64_t *)&v97, *(_DWORD *)(a1 + 56));
  unint64_t v22 = sub_2161846A4(v15, v17);
  unint64_t v23 = sub_2161846A4(v18, v20);
  uint64_t v86 = (char *)v18;
  CFRange v87 = (char *)v15;
  if (v21
    && v21 == v23
    && v21 == v22
    && (*(unsigned char *)(a1 + 56) & 0x20) != 0
    && (*(unsigned int (**)(void *))(*a2 + 96))(a2) != 71)
  {
    int v80 = (*(uint64_t (**)(void *))(*a2 + 408))(a2);
    unint64_t v24 = v20;
    if (!v80)
    {
      v98 -= v21;
      v17 -= v21;
      unint64_t v24 = v20 - v21;
    }
  }
  else
  {
    unint64_t v24 = v20;
  }
  long long v95 = 0uLL;
  unint64_t v96 = 0;
  long long __p = 0;
  unsigned int v93 = 0;
  unint64_t v94 = 0;
  if (v84)
  {
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    double v31 = (double)v98;
    do
    {
      unint64_t v90 = v17;
      uint64_t v91 = v27;
      unint64_t v32 = (unsigned __int16 *)(*v83 + 40 * v27);
      unsigned int v33 = v32[13];
      unsigned int v34 = v32[14];
      unsigned int v35 = v32[12];
      unsigned __int16 v36 = v32[15];
      unsigned __int16 v37 = v32[16];
      uint64_t v85 = v30;
      LOWORD(v32) = v98 - v30;
      unint64_t v89 = v24;
      unsigned __int16 v38 = v24 - v28;
      unsigned int v39 = (unsigned __int16)(v98 - v30);
      unsigned __int16 v40 = v17 - v29;
      if (v33 >= (unsigned __int16)v32) {
        uint64_t v41 = v39;
      }
      else {
        uint64_t v41 = v33;
      }
      if (v34 >= v40) {
        uint64_t v42 = v40;
      }
      else {
        uint64_t v42 = v34;
      }
      if (v35 >= v38) {
        uint64_t v43 = v38;
      }
      else {
        uint64_t v43 = v35;
      }
      if ((unint64_t)v26 >= v94)
      {
        uint64_t v46 = v42;
        unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - v25) >> 1) + 1;
        if (v48 > 0x1999999999999999) {
          sub_21610CB04();
        }
        uint64_t v47 = v43;
        uint64_t v44 = v29;
        uint64_t v45 = v28;
        if (0x999999999999999ALL * ((uint64_t)(v94 - (void)v25) >> 1) > v48) {
          unint64_t v48 = 0x999999999999999ALL * ((uint64_t)(v94 - (void)v25) >> 1);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v94 - (void)v25) >> 1) >= 0xCCCCCCCCCCCCCCCLL) {
          unint64_t v49 = 0x1999999999999999;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49) {
          unint64_t v49 = (unint64_t)sub_21627006C(v49);
        }
        else {
          uint64_t v50 = 0;
        }
        uint64_t v51 = (_WORD *)(v49 + 2 * ((v26 - v25) >> 1));
        _WORD *v51 = v41;
        v51[1] = v46;
        v51[2] = v47;
        v51[3] = v36;
        v51[4] = v37;
        CFArrayRef v52 = v51;
        if (v26 != v25)
        {
          do
          {
            uint64_t v53 = *(void *)(v26 - 10);
            v26 -= 10;
            __int16 v54 = *((_WORD *)v26 + 4);
            *(void *)(v52 - 5) = v53;
            v52 -= 5;
            v52[4] = v54;
          }
          while (v26 != v25);
          unint64_t v25 = (char *)__p;
        }
        unint64_t v26 = (char *)(v51 + 5);
        long long __p = v52;
        unsigned int v93 = (char *)(v51 + 5);
        unint64_t v94 = v49 + 10 * v50;
        if (v25) {
          operator delete(v25);
        }
        unint64_t v25 = (char *)v52;
      }
      else
      {
        uint64_t v44 = v29;
        uint64_t v45 = v28;
        *(_WORD *)unint64_t v26 = v41;
        uint64_t v46 = v42;
        *((_WORD *)v26 + 1) = v42;
        uint64_t v47 = v43;
        *((_WORD *)v26 + 2) = v43;
        *((_WORD *)v26 + 3) = v36;
        *((_WORD *)v26 + 4) = v37;
        v26 += 10;
      }
      unsigned int v93 = v26;
      if (v91 == v84 - 1
        || (uint64_t v55 = qword_26797E070,
            unsigned int v56 = (*(uint64_t (**)(void *))(*v88 + 352))(v88),
            uint64_t v27 = v91 + 1,
            unsigned int v57 = (*(uint64_t (**)(void *, uint64_t))(*v88 + 344))(v88, v91 + 1),
            sub_2161C06A8(v55, v56, v57)))
      {
        unint64_t v25 = (char *)__p;
        if (__p == v26)
        {
          unint64_t v58 = 0;
          unint64_t v60 = v90;
        }
        else
        {
          unint64_t v58 = 0;
          unint64_t v59 = (char *)__p;
          unint64_t v60 = v90;
          do
          {
            unsigned int v61 = *(unsigned __int16 *)v59;
            v59 += 10;
            v58 += v61;
          }
          while (v59 != v26);
        }
        double v62 = (double)v58 * (double)(*(int (**)(void *))(*v88 + 112))(v88) / v31;
        int v63 = (int)v62;
        uint64_t v64 = v97;
        uint64_t v65 = *((void *)&v95 + 1);
        if (*((void *)&v95 + 1) >= v96)
        {
          unint64_t v67 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((void *)&v95 + 1) - v95) >> 3);
          unint64_t v68 = v67 + 1;
          if (v67 + 1 > 0x1642C8590B21642) {
            sub_21610CB04();
          }
          if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v96 - v95) >> 3) > v68) {
            unint64_t v68 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v96 - v95) >> 3);
          }
          if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v96 - v95) >> 3) >= 0xB21642C8590B21) {
            unint64_t v69 = 0x1642C8590B21642;
          }
          else {
            unint64_t v69 = v68;
          }
          int v103 = &v96;
          if (v69) {
            unint64_t v69 = (unint64_t)sub_2162701C8(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          unint64_t v99 = (void **)v69;
          uint64_t v100 = v69 + 184 * v67;
          uint64_t v101 = v100;
          unint64_t v102 = v69 + 184 * v70;
          sub_216269BA4(v100, v64, v87, v86, (uint64_t)&__p, v63, 0, *(_DWORD *)(v82 + 56));
          v101 += 184;
          sub_216270214((uint64_t *)&v95, &v99);
          uint64_t v66 = *((void *)&v95 + 1);
          sub_2162703B0((uint64_t)&v99);
          unint64_t v25 = (char *)__p;
        }
        else
        {
          sub_216269BA4(*((uint64_t *)&v95 + 1), v97, v87, v86, (uint64_t)&__p, (int)v62, 0, *(_DWORD *)(v82 + 56));
          uint64_t v66 = v65 + 184;
        }
        uint64_t v30 = 0;
        uint64_t v29 = 0;
        uint64_t v28 = 0;
        *((void *)&v95 + 1) = v66;
        uint64_t v71 = *(void *)(v66 - 80);
        uint64_t v72 = *(unsigned __int16 *)(v71 - 10);
        v97 += 2 * v72;
        v98 -= v72;
        uint64_t v73 = *(unsigned __int16 *)(v71 - 8);
        unint64_t v17 = v60 - v73;
        uint64_t v74 = *(unsigned __int16 *)(v71 - 6);
        v86 += 2 * v74;
        v87 += 2 * v73;
        unint64_t v24 = v89 - v74;
        unsigned int v93 = v25;
        uint64_t v27 = v91 + 1;
        unint64_t v26 = v25;
      }
      else
      {
        uint64_t v30 = v85 + v41;
        uint64_t v29 = v44 + v46;
        uint64_t v28 = v45 + v47;
        unint64_t v24 = v89;
        unint64_t v17 = v90;
      }
    }
    while (v27 != v84);
  }
  uint64_t v75 = *v81;
  if (*v81)
  {
    uint64_t v76 = *(void *)(v82 + 32);
    uint64_t v77 = *v81;
    if ((void *)v76 != v75)
    {
      do
      {
        v76 -= 184;
        sub_2161DDAEC(v76);
      }
      while ((void *)v76 != v75);
      uint64_t v77 = *v81;
    }
    *(void *)(v82 + 32) = v75;
    operator delete(v77);
    char *v81 = 0;
    v81[1] = 0;
    v81[2] = 0;
  }
  *(_OWORD *)(v82 + 24) = v95;
  *(void *)(v82 + 4sub_216195B94(&a9, 0) = v96;
  unint64_t v96 = 0;
  long long v95 = 0uLL;
  int v78 = (*(uint64_t (**)(void *))(*v88 + 112))(v88);
  sub_216269FF4(v82, v78);
  if (__p) {
    operator delete(__p);
  }
  unint64_t v99 = (void **)&v95;
  sub_2161DDA68(&v99);
  return v82;
}

void sub_21626A964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  a25 = a9;
  sub_2161DDA68((void ***)&a25);
  if (*(char *)(a11 + 23) < 0) {
    operator delete(*(void **)a11);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_21626AA18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 == v2)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    do
    {
      v3 += *(unsigned __int16 *)(*(void *)(v1 + 104) - 10);
      v1 += 184;
    }
    while (v1 != v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 > v3) {
      return v4 - v3;
    }
  }
  else
  {
    unint64_t v4 = *(unsigned __int8 *)(a1 + 23);
    if (v3 < v4) {
      return v4 - v3;
    }
  }
  return 0;
}

double sub_21626AA78(uint64_t a1, void *a2, unint64_t a3)
{
  sub_21617FAAC(&__dst, a2, a3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v6;
  return result;
}

uint64_t sub_21626AAC8(uint64_t a1)
{
  uint64_t v18 = 0;
  uint64_t v2 = a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v2 = *(void *)a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 == v4)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      v5 += *(unsigned __int16 *)(*(void *)(v3 + 104) - 10);
      v3 += 184;
    }
    while (v3 != v4);
  }
  uint64_t v6 = v2 + 2 * v5;
  unint64_t v7 = sub_21626AA18(a1);
  if (v2) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  v14[0] = v6;
  v14[1] = v8;
  sub_216183E18(v14, (unint64_t *)&v18, 0, (*(_DWORD *)(a1 + 56) >> 30) & 1, &v15);
  int v9 = *(_DWORD *)(a1 + 48);
  uint64_t v10 = v18;
  if ((char)v17 < 0)
  {
    int v11 = v16;
    operator delete(v15);
  }
  else
  {
    int v11 = v17;
  }
  int v12 = v11 - v10;
  if (v10 > 0) {
    ++v12;
  }
  return (v9 + 10000 * v12);
}

uint64_t sub_21626ABA4(uint64_t *a1, uint64_t a2)
{
  v29[6] = *MEMORY[0x263EF8340];
  sub_216140140((uint64_t)v14);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      sub_2162706C0((uint64_t)buf, v4);
      sub_2161E30A8(v25, *(v28 - 3), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v8 = sub_216129E78(&v15, (uint64_t)p_p, size);
      sub_216129E78(v8, (uint64_t)" ", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_216144C28((uint64_t)v29);
      if (v27)
      {
        uint64_t v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        unint64_t v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        unint64_t v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        unint64_t v22 = v21;
        operator delete(v21);
      }
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      v4 += 184;
    }
    while (v4 != v5);
  }
  int v9 = sub_2162D1CE4(8u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    sub_216178BC0((uint64_t)v16, &__p);
    int v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "logSegments";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = a2;
    __int16 v20 = 2080;
    unint64_t v21 = v12;
    _os_log_debug_impl(&dword_2160F5000, v9, OS_LOG_TYPE_DEBUG, "[%s] %s: %s\n", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v14[0] = *MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v15 = v10;
  v16[0] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166CA750](&v18);
}

void sub_21626AEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_21626AF08(uint64_t a1)
{
  sub_216144C28(a1 + 136);
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 8sub_216195B94(&a9, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}