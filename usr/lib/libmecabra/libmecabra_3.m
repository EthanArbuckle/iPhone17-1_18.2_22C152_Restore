void *sub_21626AF84(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_216270174(a1, a3);
    a1[1] = sub_216270A94(a2, a2 + 184 * a3, a1[1]);
  }
  return a1;
}

void sub_21626AFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2161DDA68(&a9);
  _Unwind_Resume(a1);
}

void *sub_21626B01C(void *result, uint64_t a2, uint64_t a3)
{
  v3 = result;
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = (*(void *)(a3 + 32) - v4) >> 3;
  unint64_t v6 = 0xD37A6F4DE9BD37A7 * v5 - 1;
  if (0xD37A6F4DE9BD37A7 * v5 == 1)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    v8 = (uint64_t *)(v4 + 104);
    do
    {
      uint64_t v9 = *v8;
      v8 += 23;
      v7 += *(unsigned __int16 *)(v9 - 10);
      --v6;
    }
    while (v6);
  }
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  unint64_t v12 = 0;
  if (v11 != v10 && v7 >= 1)
  {
    v14 = (uint64_t *)(v10 + 104);
    do
    {
      uint64_t v15 = *v14;
      v14 += 23;
      v7 -= *(unsigned __int16 *)(v15 - 10);
      ++v12;
    }
    while (v12 < 0xD37A6F4DE9BD37A7 * ((v11 - v10) >> 3) && v7 > 0);
  }
  if (!v7)
  {
    *result = 0;
    result[1] = 0;
    uint64_t v16 = v10 + 184 * v12;
    result[2] = 0;
    if (v11 != v16)
    {
      sub_216270174(result, 0xD37A6F4DE9BD37A7 * ((v11 - v16) >> 3));
      result = (void *)sub_216270A94(v16, v11, v3[1]);
      v3[1] = result;
    }
  }
  else
  {
LABEL_15:
    *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

void sub_21626B144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2161DDA68(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21626B164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21 = 0;
  v22 = 0;
  uint64_t v23 = 0;
  if (a1 == a2)
  {
    int v7 = 0;
    unint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = a1;
    do
    {
      sub_2161BF794(*(_WORD **)(v5 + 72), (_WORD *)(*(void *)(v5 + 72) + 2 * *(unsigned __int16 *)(*(void *)(v5 + 104) - 6)), (uint64_t)&v21);
      v5 += 184;
    }
    while (v5 != a2);
    unint64_t v6 = (char *)v21;
    int v7 = v22;
  }
  uint64_t v8 = v7 - v6;
  uint64_t v9 = v8 >> 1;
  if (v6) {
    unint64_t v10 = v8 >> 1;
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(a3 + 72);
  unint64_t v12 = *(unsigned __int16 *)(*(void *)(a3 + 104) - 6);
  if (!v11) {
    unint64_t v12 = 0;
  }
  if (v10 < v12) {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    unint64_t v13 = 0;
    while (*(unsigned __int16 *)(v11 + 2 * v13) == *(unsigned __int16 *)&v6[2 * v13])
    {
      if (v12 == ++v13)
      {
        unint64_t v13 = v12;
        break;
      }
    }
    if (v13 && (float)((float)(unint64_t)v9 * 0.6) < (float)v13)
    {
      BOOL v14 = 0;
      for (i = 0; i != v13; BOOL v14 = i >= v13)
      {
        int v16 = *(unsigned __int16 *)(v11 + 2 * i);
        if ((v16 - 12353) >= 0x56 && v16 != 12540 && v16 != 12316) {
          break;
        }
        ++i;
      }
      if (!v14)
      {
        uint64_t v19 = 1;
        if (!v6) {
          return v19;
        }
        goto LABEL_34;
      }
    }
  }
  uint64_t v19 = 0;
  if (v6)
  {
LABEL_34:
    v22 = v6;
    operator delete(v6);
  }
  return v19;
}

void sub_21626B2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21626B2E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E088, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E088))
  {
    sub_2161C04AC(0);
    qword_26797E080 = (uint64_t)&qword_26797EF20;
    __cxa_guard_release(&qword_26797E088);
  }
  uint64_t v45 = *(void *)(a2 + 8);
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)v47 = 0u;
  long long v48 = 0u;
  *(_OWORD *)v49 = 0u;
  *(_OWORD *)theDict = 0u;
  uint64_t v8 = *(uint64_t **)(a3 + 24);
  uint64_t v9 = *(uint64_t **)(a3 + 32);
  if (v8 == v9) {
    goto LABEL_18;
  }
  do
  {
    uint64_t v10 = *v8;
    if (v8[1] != *v8)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        sub_2161DEB04(&v45, (_WORD *)(v8[9] + 2 * *(unsigned __int16 *)(v8[12] + v11 + 4)), *(unsigned __int16 *)(v10 + v11 + 4), *(_WORD *)(v10 + v11), (_WORD *)(v8[6] + 2 * *(unsigned __int16 *)(v8[12] + v11 + 2)), *(unsigned __int16 *)(v10 + v11 + 2), *(_WORD *)(v10 + v11 + 6), *(_WORD *)(v10 + v11 + 8));
        ++v12;
        uint64_t v10 = *v8;
        v11 += 10;
      }
      while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((v8[1] - *v8) >> 1));
    }
    v8 += 23;
  }
  while (v8 != v9);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(a3 + 32);
  if (v13 == v14)
  {
LABEL_18:
    BOOL v19 = 0;
    unint64_t v20 = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(v14 - 176);
    if (*(void *)(v14 - 184) == v15)
    {
      BOOL v19 = 0;
    }
    else
    {
      int v16 = *(unsigned __int16 *)(v15 - 4);
      BOOL v19 = v16 == 1607 || v16 == 1612 || (v16 - 1609) < 2;
    }
    unint64_t v20 = 0;
    do
    {
      v20 += *(unsigned __int16 *)(*(void *)(v13 + 104) - 10);
      v13 += 184;
    }
    while (v13 != v14);
  }
  unint64_t v21 = a4[1];
  sub_21626AAC8(a3);
  BOOL v22 = v21 > v20;
  uint64_t v23 = v21 - v20;
  if (v22)
  {
    uint64_t v24 = *a4;
    int v25 = *(unsigned __int16 *)(*a4 + 2 * a4[1] - 2);
    if (v25 != 12289 && v25 != 65292)
    {
      uint64_t v40 = 0;
      while ((unsigned __int16)word_216383144[v40] != v25)
      {
        if (++v40 == 4)
        {
          if ((v25 - 12300) < 2 || (v25 - 65288) < 2) {
            break;
          }
          BOOL v19 = 0;
          if (v23) {
            goto LABEL_30;
          }
          goto LABEL_41;
        }
      }
    }
    --v23;
    BOOL v19 = 1;
    if (v23)
    {
LABEL_30:
      uint64_t v27 = v24 + 2 * v20;
      if (v24) {
        uint64_t v28 = v23;
      }
      else {
        uint64_t v28 = 0;
      }
      v44[0] = v27;
      v44[1] = v28;
      sub_216183E18(v44, 0, 0, (**(_DWORD **)a2 >> 30) & 1, __p);
      if ((v52 & 0x80u) == 0) {
        v29 = __p;
      }
      else {
        v29 = *(_WORD **)__p;
      }
      if ((v52 & 0x80u) == 0) {
        uint64_t v30 = v52;
      }
      else {
        uint64_t v30 = *(void *)&__p[8];
      }
      sub_2161DEB04(&v45, v29, v30, v23, v29, v30, 0, 0);
      if ((char)v52 < 0) {
        operator delete(*(void **)__p);
      }
    }
LABEL_41:
    if (v19)
    {
      int v31 = *(unsigned __int16 *)(*a4 + 2 * a4[1] - 2);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E0A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797E0A8))
      {
        sub_2161C04AC(0);
        qword_26797E0A0 = (uint64_t)&qword_26797EF20;
        __cxa_guard_release(&qword_26797E0A8);
      }
      if (v31 == 12289 || v31 == 65292)
      {
        uint64_t v42 = 587;
      }
      else
      {
        uint64_t v41 = 0;
        uint64_t v42 = 582;
        while ((unsigned __int16)word_216383144[v41] != v31)
        {
          if (++v41 == 4)
          {
            __int16 v33 = 0;
            uint64_t v42 = 585;
            if (v31 > 65287)
            {
              if (v31 == 65288) {
                break;
              }
              int v43 = 65289;
            }
            else
            {
              if (v31 == 12300) {
                break;
              }
              int v43 = 12301;
            }
            if (v31 == v43)
            {
              uint64_t v42 = 584;
              break;
            }
            goto LABEL_50;
          }
        }
      }
      __int16 v33 = word_21637826A[v42];
LABEL_50:
      BOOL v19 = 1;
      v34 = (_WORD *)(*a4 + 2 * a4[1] - 2);
      sub_2161DEB04(&v45, v34, 1, 1, v34, 1, v33, v33);
    }
  }
  v35 = sub_2162D1CE4(8u);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__p = 136315394;
    *(void *)&__p[4] = "createCandidateFromAnalysis";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v19;
    _os_log_debug_impl(&dword_2160F5000, v35, OS_LOG_TYPE_DEBUG, "[%s] endingWithPunctuation:%d", __p, 0x12u);
  }
  v36 = kMecabraCandidateAttributeIsEndingWithPunctuation[0];
  if (v19) {
    v37 = (const void **)MEMORY[0x263EFFB40];
  }
  else {
    v37 = (const void **)MEMORY[0x263EFFB38];
  }
  v38 = theDict[1];
  if (!theDict[1])
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    sub_2161DFB5C((const void **)&theDict[1], Mutable);
    v38 = theDict[1];
  }
  CFDictionarySetValue(v38, v36, *v37);
  *a1 = sub_2161DECC4(&v45);
  if (theDict[1]) {
    CFRelease(theDict[1]);
  }
  theDict[1] = 0;
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
  if (v47[1])
  {
    *(void **)&long long v48 = v47[1];
    operator delete(v47[1]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
}

void sub_21626B80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void *sub_21626B880(uint64_t a1, uint64_t *a2)
{
  result = (void *)*a2;
  if (*a2)
  {
    result[1] = 1;
    (*(void (**)(void *, uint64_t, const char *, uint64_t))(*result + 528))(result, 8, "candidate to be added to top", 1);
    return (void *)sub_216215B8C(a1, a2, 0);
  }
  return result;
}

uint64_t sub_21626B918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  v112[19] = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 48) == *(void *)(a3 + 56) || !*(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v7 = a3;
  uint64_t v8 = sub_2162D1CE4(8u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = (__CFString *)CFStringCreateWithCharacters(0, *(const UniChar **)a2, *(void *)(a2 + 8));
    __p = v9;
    uint64_t v10 = sub_2162D1CE4(8u);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if (!v9) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = "stabilizeCandidates";
    __int16 v107 = 2112;
    *(void *)v108 = v9;
    _os_log_debug_impl(&dword_2160F5000, v10, OS_LOG_TYPE_DEBUG, "[%s] raw analysis string: %@", buf, 0x16u);
    if (v9) {
LABEL_6:
    }
      CFRelease(v9);
  }
LABEL_7:
  if (*a4 == a4[1]) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = **a4;
  }
  unint64_t v12 = *(void *)(a2 + 8);
  uint64_t v92 = v7;
  if (v12 <= 1)
  {
    uint64_t v13 = sub_2162D1CE4(8u);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = "updateBestAnalysis";
      _os_log_debug_impl(&dword_2160F5000, v13, OS_LOG_TYPE_DEBUG, "[%s] reset best analysis for short input", buf, 0xCu);
    }
    uint64_t v14 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v14) {
      sub_2161DDA00(a1 + 16, v14);
    }
    goto LABEL_34;
  }
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v93 = v11;
  if (!v15) {
    goto LABEL_26;
  }
  int v16 = *(UniChar **)a2;
  if (*(char *)(v15 + 23) < 0)
  {
    unint64_t v17 = *(void *)(v15 + 8);
    if (v17)
    {
      v18 = *(char **)v15;
      goto LABEL_21;
    }
LABEL_26:
    if (!a6)
    {
      if (v93)
      {
        CFStringRef v24 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v93 + 56))(v93);
        if ((unint64_t)CFStringGetLength(v24) < *(void *)(a2 + 8))
        {
          int v25 = sub_2162D1CE4(8u);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v90 = (*(uint64_t (**)(uint64_t))(*(void *)v93 + 24))(v93);
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "updateBestAnalysis";
            __int16 v107 = 2112;
            *(void *)v108 = v90;
            _os_log_debug_impl(&dword_2160F5000, v25, OS_LOG_TYPE_DEBUG, "[%s] updating best analysis from history: %@", buf, 0x16u);
          }
          operator new();
        }
      }
      v80 = sub_2162D1CE4(8u);
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = "updateBestAnalysis";
        _os_log_debug_impl(&dword_2160F5000, v80, OS_LOG_TYPE_DEBUG, "[%s] updating best analysis from converted analysis string", buf, 0xCu);
      }
      v100[0] = 0;
      sub_216183E18((uint64_t *)a2, (unint64_t *)v100, 0, (**(_DWORD **)a1 >> 30) & 1, buf);
      operator new();
    }
    goto LABEL_27;
  }
  unint64_t v17 = *(unsigned __int8 *)(v15 + 23);
  if (!*(unsigned char *)(v15 + 23)) {
    goto LABEL_26;
  }
  v18 = *(char **)(a1 + 16);
LABEL_21:
  uint64_t v19 = 0;
  uint64_t v20 = *(void *)(v15 + 24);
  uint64_t v21 = *(void *)(v15 + 32);
  uint64_t v22 = v20;
  while (v17 > v12 || memcmp(v18, v16, 2 * v17))
  {
    if ((v21 - v20) / 184 == v19) {
      goto LABEL_26;
    }
    uint64_t v23 = *(unsigned __int16 *)(*(void *)(v22 + 104) - 10);
    v17 -= v23;
    v18 += 2 * v23;
    ++v19;
    v22 += 184;
  }
  if (a6 && v19) {
LABEL_27:
  }
    operator new();
  uint64_t v7 = v92;
  if (v19)
  {
    if (v22 == v21)
    {
      uint64_t v81 = v20;
    }
    else
    {
      uint64_t v81 = v20;
      do
      {
        sub_2161254AC(v20, (__n128 *)v22);
        sub_2161254AC(v20 + 24, (__n128 *)(v22 + 24));
        sub_2161254AC(v20 + 48, (__n128 *)(v22 + 48));
        sub_2161254AC(v20 + 72, (__n128 *)(v22 + 72));
        sub_2161254AC(v20 + 96, (__n128 *)(v22 + 96));
        uint64_t v82 = *(void *)(v22 + 120);
        *(_WORD *)(v20 + 128) = *(_WORD *)(v22 + 128);
        *(void *)(v20 + 120) = v82;
        sub_2161E8BE0(v20 + 136, (uint64_t *)(v22 + 136));
        int v83 = *(_DWORD *)(v22 + 176);
        *(unsigned char *)(v20 + 180) = *(unsigned char *)(v22 + 180);
        *(_DWORD *)(v20 + 176) = v83;
        v81 += 184;
        v22 += 184;
        v20 += 184;
      }
      while (v22 != v21);
      uint64_t v21 = *(void *)(v15 + 32);
    }
    while (v21 != v81)
    {
      v21 -= 184;
      sub_2161DDAEC(v21);
    }
    *(void *)(v15 + 32) = v81;
    uint64_t v15 = *(void *)(a1 + 16);
    int v16 = *(UniChar **)a2;
    unint64_t v12 = *(void *)(a2 + 8);
  }
  sub_21626AA78(v15, v16, v12);
  v86 = sub_2162D1CE4(8u);
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = "updateBestAnalysis";
    __int16 v107 = 2048;
    *(void *)v108 = v19;
    _os_log_debug_impl(&dword_2160F5000, v86, OS_LOG_TYPE_DEBUG, "[%s] updating best analysis from previous best analysis (segment gap: %zu)", buf, 0x16u);
  }
LABEL_34:
  v26 = *(const UniChar **)a2;
  unint64_t v27 = *(void *)(a2 + 8);
  if ((**(unsigned char **)a1 & 0x20) == 0)
  {
    if (!v27) {
      goto LABEL_46;
    }
    BOOL v28 = 0;
    for (unint64_t i = 0; i != v27; v28 = i >= v27)
    {
      UniChar v30 = v26[i];
      BOOL v33 = (unsigned __int16)((v30 & 0xFFDF) - 65) >= 0x1Au;
      unsigned int v31 = (unsigned __int16)(v30 + 191);
      unsigned __int16 v32 = v30 + 223;
      BOOL v33 = v33 && v31 >= 0x1A;
      if (v33 && v32 > 0x19u) {
        break;
      }
      ++i;
    }
    if (v28)
    {
LABEL_46:
      v35 = sub_2162D1CE4(8u);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = "stabilizeCandidates";
        _os_log_debug_impl(&dword_2160F5000, v35, OS_LOG_TYPE_DEBUG, "[%s] Temporary Roman mode ", buf, 0xCu);
      }
      return 0;
    }
  }
  int v38 = v26[v27 - 1];
  if (v38 != 12289 && v38 != 65292)
  {
    uint64_t v79 = 0;
    while ((unsigned __int16)word_216383144[v79] != v38)
    {
      if (++v79 == 4)
      {
        if ((v38 - 12300) < 2 || (v38 - 65288) < 2) {
          break;
        }
        goto LABEL_61;
      }
    }
  }
  uint64_t v40 = *(void *)(a1 + 16);
  if (!v40 || (sub_21626B2E0((uint64_t *)buf, a1, v40, (uint64_t *)a2), (uint64_t v41 = *(void *)buf) == 0))
  {
LABEL_61:
    uint64_t v102 = 0;
    sub_216183E18((uint64_t *)a2, (unint64_t *)&v102, 0, (**(_DWORD **)a1 >> 30) & 1, v100);
    unint64_t v45 = v101;
    if ((v101 & 0x80u) != 0) {
      unint64_t v45 = (unint64_t)v100[1];
    }
    unint64_t v91 = v45;
    if ((v101 & 0x80u) == 0) {
      v46 = v100;
    }
    else {
      v46 = (void **)v100[0];
    }
    if (a6 && ((*(void (**)(uint64_t))(*(void *)a6 + 544))(a6), (uint64_t v48 = v47) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)a6 + 552))(a6);
      uint64_t v94 = 0;
      if (!v91) {
        goto LABEL_101;
      }
      unint64_t v50 = v49;
      if (v91 <= v49) {
        goto LABEL_101;
      }
      v51 = *(void **)(v92 + 48);
      unsigned __int8 v52 = *(void **)(v92 + 56);
      if (v51 != v52)
      {
        while (1)
        {
          if (((*(uint64_t (**)(void))(*(void *)*v51 + 88))() & 1) == 0
            && (*(unsigned int (**)(void))(*(void *)*v51 + 408))(*v51) != 1)
          {
            uint64_t v94 = *v51;
            uint64_t v53 = (const void *)(*(uint64_t (**)(void))(*(void *)*v51 + 544))();
            unint64_t v55 = v54;
            v56 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 544))(a6);
            if (v55 >= v57)
            {
              BOOL v58 = v53 || v57 == 0;
              if (v58 && !memcmp(v53, v56, 2 * v57))
              {
                int v59 = *(unsigned __int16 *)((*(uint64_t (**)(uint64_t))(*(void *)v94 + 544))(v94) + 2 * v48);
                BOOL v60 = (v59 - 12353) < 0x56 || v59 == 12540;
                if (!v60 && v59 != 12316) {
                  break;
                }
                int v62 = *((unsigned __int16 *)v46 + v50);
                if ((v62 - 12353) >= 0x56 && v62 != 12540 && v62 != 12316) {
                  break;
                }
                if (v59 == v62) {
                  break;
                }
              }
            }
          }
          if (++v51 == v52) {
            goto LABEL_100;
          }
        }
LABEL_101:
        if (v102 < 1) {
          goto LABEL_112;
        }
        uint64_t v66 = *(void *)(a1 + 16);
        if (!v66) {
          goto LABEL_112;
        }
        if (!a6 && v94)
        {
          int v67 = sub_21626AAC8(*(void *)(a1 + 16));
          if ((int)(v67 - (*(uint64_t (**)(uint64_t))(*(void *)v94 + 112))(v94)) > 4999) {
            goto LABEL_112;
          }
          uint64_t v66 = *(void *)(a1 + 16);
        }
        sub_21626B2E0((uint64_t *)&__p, a1, v66, (uint64_t *)a2);
        v68 = __p;
        if (__p)
        {
          v69 = sub_2162D1CE4(8u);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
          {
            int v87 = sub_21626AAC8(*(void *)(a1 + 16));
            int v88 = v94;
            if (v94) {
              int v88 = (*(uint64_t (**)(uint64_t))(*(void *)v94 + 112))(v94);
            }
            v89 = "enabled";
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = "stabilizeCandidates";
            __int16 v107 = 1024;
            *(_DWORD *)v108 = v87;
            if (!a6) {
              v89 = "disabled";
            }
            *(_WORD *)&v108[4] = 1024;
            *(_DWORD *)&v108[6] = v88;
            *(_WORD *)v109 = 2080;
            *(void *)&v109[2] = v89;
            _os_log_debug_impl(&dword_2160F5000, v69, OS_LOG_TYPE_DEBUG, "[%s] there is incomplete romaji and best analysis(weight:%d) can be trusted over top candidate(weight:%d) when truncated input is %s", buf, 0x22u);
          }
          uint64_t v99 = (uint64_t)v68;
          sub_21626B880(v92, &v99);
          uint64_t v70 = v99;
          uint64_t v99 = 0;
          if (v70) {
            (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
          }
          uint64_t v36 = 1;
LABEL_159:
          if ((char)v101 < 0) {
            operator delete(v100[0]);
          }
          return v36;
        }
LABEL_112:
        v71 = sub_2162D1CE4(8u);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG) && *(void *)(a5 + 56) != *(void *)(a5 + 48))
        {
          unint64_t v72 = 0;
          uint64_t v73 = *MEMORY[0x263F8C2B8];
          uint64_t v75 = *(void *)(MEMORY[0x263F8C2B8] + 64);
          uint64_t v74 = *(void *)(MEMORY[0x263F8C2B8] + 72);
          do
          {
            sub_216140140((uint64_t)buf);
            sub_216129E78(&v108[2], (uint64_t)"Last-bunsetsu candidate #", 25);
            unint64_t v76 = v72 + 1;
            std::ostream::operator<<();
            uint64_t v77 = *(void *)(*(void *)(a5 + 48) + 8 * v72);
            sub_216178BC0((uint64_t)v109, &__p);
            if (v105 >= 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v77 + 528))(v77, 8, p_p, 1);
            if (v105 < 0) {
              operator delete(__p);
            }
            *(void *)buf = v73;
            *(void *)&buf[*(void *)(v73 - 24)] = v75;
            *(void *)&v108[2] = v74;
            *(void *)v109 = MEMORY[0x263F8C318] + 16;
            if (v111 < 0) {
              operator delete(v110);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x2166CA750](v112);
            unint64_t v72 = v76;
          }
          while (v76 < (uint64_t)(*(void *)(a5 + 56) - *(void *)(a5 + 48)) >> 3);
        }
        if (v94)
        {
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v94 + 528))(v94, 8, "top candidate", 1);
          operator new();
        }
        uint64_t v36 = 0;
        goto LABEL_159;
      }
    }
    else
    {
      uint64_t v63 = sub_2162155D4(v7);
      if (v63 != -1)
      {
        uint64_t v64 = *(void *)(*(void *)(v7 + 48) + 8 * v63);
        if (v64)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v64 + 88))(v64)) {
            uint64_t v65 = 0;
          }
          else {
            uint64_t v65 = v64;
          }
          uint64_t v94 = v65;
          goto LABEL_101;
        }
      }
    }
LABEL_100:
    uint64_t v94 = 0;
    goto LABEL_101;
  }
  uint64_t v42 = sub_2161DE698((void *)(v7 + 8), buf);
  if (!v42
    || (int v43 = v42[3], v43 == (uint64_t *)-1)
    || (uint64_t v44 = *(void *)(*(void *)(v7 + 48) + 8 * (void)v43),
        (*(unsigned int (**)(uint64_t))(*(void *)v44 + 408))(v44)))
  {
    (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
    goto LABEL_61;
  }
  v84 = sub_2162D1CE4(8u);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = "stabilizeCandidates";
    _os_log_debug_impl(&dword_2160F5000, v84, OS_LOG_TYPE_DEBUG, "[%s] candidate has a punctuation, using best analysis", buf, 0xCu);
  }
  uint64_t v103 = v41;
  sub_21626B880(v7, &v103);
  uint64_t v85 = v103;
  uint64_t v103 = 0;
  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 16))(v85);
  }
  return 1;
}

void sub_21626FA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  __cxa_guard_abort(&qword_26797E098);
  sub_2161868BC((const void **)&a50, 0);
  if (a60 < 0) {
    operator delete(__p);
  }
  a33 = (uint64_t)&a36;
  sub_2161DDA68((void ***)&a33);
  uint64_t v61 = a39;
  a39 = 0;
  if (v61) {
    sub_2161DDA00((uint64_t)&a39, v61);
  }
  uint64_t v62 = a40;
  a40 = 0;
  if (v62) {
    sub_2161DDA00((uint64_t)&a40, v62);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

void *sub_21626FFC4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x199999999999999ALL) {
      sub_21610CB04();
    }
    result = sub_21627006C(a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 10 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_216270050(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21627006C(unint64_t a1)
{
  if (a1 >= 0x199999999999999ALL) {
    sub_2160FFA74();
  }
  return operator new(10 * a1);
}

void *sub_2162700B4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    result = sub_216270174(result, a4);
    uint64_t v7 = v6[1];
    if (a2 != a3)
    {
      uint64_t v8 = 0;
      do
      {
        result = (void *)sub_2162706C0(v7 + v8, a2 + v8);
        v8 += 184;
      }
      while (a2 + v8 != a3);
      v7 += v8;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_21627013C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_216270174(void *a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    sub_21610CB04();
  }
  result = (char *)sub_2162701C8(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

void *sub_2162701C8(unint64_t a1)
{
  if (a1 >= 0x1642C8590B21643) {
    sub_2160FFA74();
  }
  return operator new(184 * a1);
}

uint64_t *sub_216270214(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 184) = 0;
      *(void *)(v6 - 176) = 0;
      *(void *)(v6 - 168) = 0;
      *(_OWORD *)(v6 - 184) = *(_OWORD *)(v2 + v5 - 184);
      *(void *)(v6 - 168) = *(void *)(v2 + v5 - 168);
      *(void *)(v7 - 184) = 0;
      *(void *)(v7 - 176) = 0;
      *(void *)(v7 - 168) = 0;
      *(void *)(v6 - 160) = 0;
      *(void *)(v6 - 152) = 0;
      *(void *)(v6 - 144) = 0;
      *(_OWORD *)(v6 - 160) = *(_OWORD *)(v2 + v5 - 160);
      *(void *)(v6 - 144) = *(void *)(v2 + v5 - 144);
      *(void *)(v7 - 160) = 0;
      *(void *)(v7 - 152) = 0;
      *(void *)(v7 - 144) = 0;
      *(void *)(v6 - 136) = 0;
      *(void *)(v6 - 128) = 0;
      *(void *)(v6 - 120) = 0;
      *(_OWORD *)(v6 - 136) = *(_OWORD *)(v2 + v5 - 136);
      *(void *)(v6 - 120) = *(void *)(v2 + v5 - 120);
      *(void *)(v7 - 136) = 0;
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = 0;
      *(void *)(v6 - 112) = 0;
      *(void *)(v6 - 104) = 0;
      *(void *)(v6 - 96) = 0;
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(void *)(v6 - 96) = *(void *)(v2 + v5 - 96);
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = 0;
      *(void *)(v7 - 96) = 0;
      *(void *)(v6 - 88) = 0;
      *(void *)(v6 - 80) = 0;
      *(void *)(v6 - 72) = 0;
      *(_OWORD *)(v6 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(void *)(v6 - 72) = *(void *)(v2 + v5 - 72);
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 72) = 0;
      uint64_t v8 = *(void *)(v2 + v5 - 64);
      *(_WORD *)(v6 - 56) = *(_WORD *)(v2 + v5 - 56);
      *(void *)(v6 - 64) = v8;
      uint64_t v9 = *(void *)(v2 + v5 - 48);
      *(void *)(v7 - 48) = 0;
      *(void *)(v6 - 48) = v9;
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v7 - 40) = 0;
      uint64_t v10 = *(void *)(v2 + v5 - 32);
      *(void *)(v4 + v5 - 32) = v10;
      uint64_t v11 = *(void *)(v2 + v5 - 24);
      *(void *)(v6 - 24) = v11;
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v2 + v5 - 16);
      if (v11)
      {
        unint64_t v12 = *(void *)(v10 + 8);
        unint64_t v13 = *(void *)(v6 - 40);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13) {
            v12 %= v13;
          }
        }
        else
        {
          v12 &= v13 - 1;
        }
        *(void *)(v9 + 8 * v12) = v4 + v5 - 32;
        *(void *)(v2 + v5 - 32) = 0;
        *(void *)(v2 + v5 - 24) = 0;
      }
      int v14 = *(_DWORD *)(v7 - 8);
      *(unsigned char *)(v6 - 4) = *(unsigned char *)(v7 - 4);
      *(_DWORD *)(v6 - 8) = v14;
      v5 -= 184;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v15 = *result;
  char *result = v4;
  a2[1] = v15;
  uint64_t v16 = result[1];
  result[1] = a2[2];
  a2[2] = v16;
  uint64_t v17 = result[2];
  result[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2162703B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    sub_2161DDAEC(i - 184);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **sub_216270400(uint64_t **result, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5 = a3;
  if (result != a2)
  {
    uint64_t v4 = (uint64_t)result;
    do
    {
      result = sub_216270450(&v5, v4);
      v4 += 184;
    }
    while ((uint64_t **)v4 != a2);
  }
  return result;
}

uint64_t **sub_216270450(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  uint64_t v6 = (unint64_t *)(*a1 + 2);
  if (v5 >= *v6)
  {
    unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v5 - *v4) >> 3);
    if (v8 + 1 > 0x1642C8590B21642) {
      sub_21610CB04();
    }
    unint64_t v9 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(*v6 - *v4) >> 3);
    if (v9 <= v8 + 1) {
      unint64_t v9 = v8 + 1;
    }
    if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*v6 - *v4) >> 3) >= 0xB21642C8590B21) {
      unint64_t v10 = 0x1642C8590B21642;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v17 = v6;
    if (v10) {
      unint64_t v10 = (unint64_t)sub_2162701C8(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v13 = v10;
    uint64_t v14 = v10 + 184 * v8;
    unint64_t v16 = v10 + 184 * v11;
    sub_2162706C0(v14, a2);
    uint64_t v15 = v14 + 184;
    sub_216270214(v4, &v13);
    uint64_t v7 = v4[1];
    sub_2162703B0((uint64_t)&v13);
  }
  else
  {
    sub_2162706C0((*a1)[1], a2);
    uint64_t v7 = v5 + 184;
    v4[1] = v5 + 184;
  }
  v4[1] = v7;
  return a1;
}

void sub_216270584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162703B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162705A4(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x1642C8590B21642) {
    sub_21610CB04();
  }
  uint64_t v6 = a1 + 2;
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21) {
    unint64_t v7 = 0x1642C8590B21642;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_2162701C8(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v11 = v7;
  uint64_t v12 = v7 + 184 * v2;
  unint64_t v14 = v7 + 184 * v8;
  sub_2162706C0(v12, a2);
  uint64_t v13 = v12 + 184;
  sub_216270214(a1, &v11);
  uint64_t v9 = a1[1];
  sub_2162703B0((uint64_t)&v11);
  return v9;
}

void sub_2162706AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162703B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162706C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_21626FFC4((void *)a1, *(const void **)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216182F50((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 1);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_216182F50((void *)(a1 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 1);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_216182F50((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  unint64_t v4 = a1 + 96;
  *(void *)(a1 + 112) = 0;
  sub_21626FFC4((void *)(a1 + 96), *(const void **)(a2 + 96), *(void *)(a2 + 104), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 1));
  uint64_t v5 = *(void *)(a2 + 120);
  __int16 v6 = *(_WORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = 0u;
  unint64_t v7 = (uint64_t *)(a1 + 136);
  *(_WORD *)(a1 + 128) = v6;
  *(void *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  sub_2161297B4(a1 + 136, *(void *)(a2 + 144));
  uint64_t v8 = *(void **)(a2 + 152);
  if (v8)
  {
    uint64_t v9 = (void *)(a1 + 152);
    unint64_t v10 = *(void *)(a1 + 144);
    do
    {
      unint64_t v11 = v8[2];
      if (v10)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v4 = v8[2];
          if (v10 <= v11) {
            unint64_t v4 = v11 % v10;
          }
        }
        else
        {
          unint64_t v4 = v11 & (v10 - 1);
        }
        uint64_t v13 = *(void **)(*v7 + 8 * v4);
        if (v13)
        {
          for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
          {
            unint64_t v15 = i[1];
            if (v15 == v11)
            {
              if (i[2] == v11) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v10) {
                  v15 %= v10;
                }
              }
              else
              {
                v15 &= v10 - 1;
              }
              if (v15 != v4) {
                break;
              }
            }
          }
        }
      }
      unint64_t v16 = operator new(0x20uLL);
      *unint64_t v16 = 0;
      v16[1] = v11;
      *((_OWORD *)v16 + 1) = *((_OWORD *)v8 + 1);
      float v17 = (float)(unint64_t)(*(void *)(a1 + 160) + 1);
      float v18 = *(float *)(a1 + 168);
      if (!v10 || (float)(v18 * (float)v10) < v17)
      {
        BOOL v19 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3) {
          BOOL v19 = 1;
        }
        unint64_t v20 = v19 | (2 * v10);
        unint64_t v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21) {
          size_t v22 = v21;
        }
        else {
          size_t v22 = v20;
        }
        sub_2161297B4(a1 + 136, v22);
        unint64_t v10 = *(void *)(a1 + 144);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v10 <= v11) {
            unint64_t v4 = v11 % v10;
          }
          else {
            unint64_t v4 = v11;
          }
        }
        else
        {
          unint64_t v4 = (v10 - 1) & v11;
        }
      }
      uint64_t v23 = *v7;
      CFStringRef v24 = *(void **)(*v7 + 8 * v4);
      if (v24)
      {
        *unint64_t v16 = *v24;
      }
      else
      {
        *unint64_t v16 = *v9;
        *uint64_t v9 = v16;
        *(void *)(v23 + 8 * v4) = v9;
        if (!*v16) {
          goto LABEL_40;
        }
        unint64_t v25 = *(void *)(*v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v25 >= v10) {
            v25 %= v10;
          }
        }
        else
        {
          v25 &= v10 - 1;
        }
        CFStringRef v24 = (void *)(*v7 + 8 * v25);
      }
      *CFStringRef v24 = v16;
LABEL_40:
      ++*(void *)(a1 + 160);
LABEL_41:
      uint64_t v8 = (void *)*v8;
    }
    while (v8);
  }
  int v26 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v26;
  return a1;
}

void sub_2162709EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12)
{
  sub_216144C28(v13);
  unint64_t v15 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 104) = v15;
    operator delete(v15);
  }
  unint64_t v16 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 80) = v16;
    operator delete(v16);
  }
  float v17 = *a11;
  if (*a11)
  {
    *(void *)(v12 + 56) = v17;
    operator delete(v17);
  }
  float v18 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 32) = v18;
    operator delete(v18);
  }
  BOOL v19 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216270A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_2162706C0(a3 + v6, a1 + v6);
      v6 += 184;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_216270AF4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 184;
    do
    {
      sub_2161DDAEC(v4 + v2);
      v2 -= 184;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216270B18(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v5 = a1;
  uint64_t v6 = 0;
  int v7 = 0x7FFFFFFF;
  do
  {
    if ((*(unsigned int (**)(void))(*(void *)*v5 + 408))(*v5) != 1)
    {
      uint64_t v8 = (const void *)(*(uint64_t (**)(void))(*(void *)*v5 + 544))(*v5);
      unint64_t v10 = v9;
      unint64_t v11 = *(const void **)(a3 + 72);
      unint64_t v12 = v11 ? *(unsigned __int16 *)(*(void *)(a3 + 104) - 6) : 0;
      if (v7 > (*(int (**)(void))(*(void *)*v5 + 112))() && v10 >= v12)
      {
        if (v8) {
          BOOL v14 = 1;
        }
        else {
          BOOL v14 = v12 == 0;
        }
        if (v14 && !memcmp(v8, v11, 2 * v12))
        {
          int v7 = (*(uint64_t (**)(void))(*(void *)*v5 + 112))();
          uint64_t v6 = *v5;
        }
      }
    }
    ++v5;
  }
  while (v5 != a2);
  return v6;
}

uint64_t sub_216270C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = a4;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)a1 = &unk_26C6C58C8;
  uint64_t v5 = a1 + 168;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 0;
  sub_2162409B8((void *)(a1 + 200), a2);
  sub_21617A878(v5, 0xAuLL);
  return a1;
}

void sub_216270D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216240980((const void **)(v2 + 208), 0);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 176) = v5;
    operator delete(v5);
  }
  sub_216129CCC((void ***)va);
  sub_21621F4A8(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216270D7C(uint64_t a1)
{
  sub_216129D20((uint64_t *)(a1 + 144));
  *(_DWORD *)(a1 + 192) = 0;

  return sub_21618C36C((uint64_t *)a1);
}

void sub_216270DBC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (void *)(a1 + 48);
  if (*(void *)(a1 + 48) != *(void *)(a1 + 56))
  {
    if (*(_DWORD *)(a2 + 64) == 1
      || (uint64_t v7 = *(void *)(a1 + 88), v7 != *(void *)(a1 + 80)) && *(_DWORD *)(v7 - 4) == 2)
    {
      sub_2162731D8((uint64_t *)(a1 + 144));
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 48);
      *(void *)(a1 + 160) = *(void *)(a1 + 64);
      v6[1] = 0;
      v6[2] = 0;
      *uint64_t v6 = 0;
      *(_DWORD *)(a1 + 192) = 0;
      sub_21618C36C((uint64_t *)a1);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)(v8 - *(void *)(a1 + 24)) >= 5)
  {
    uint64_t v9 = *(void *)(a1 + 80);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 88) - v9) >> 3) >= 2)
    {
      int v10 = *(_DWORD *)(a1 + 192);
      if (v10)
      {
        if (!*(unsigned char *)(v9 + 8 * ((*(void *)(a1 + 88) - v9) >> 3) - 8)) {
          *(_DWORD *)(v8 - 4) = v10;
        }
      }
    }
  }

  sub_21618C678((uint64_t *)a1, a2, a3);
}

uint64_t sub_216270EB4()
{
  MEMORY[0x270FA5388]();
  uint64_t v1 = v0;
  uint64_t v409 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E0B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E0B0))
  {
    sub_21610B834(__p, "gh");
    int v10 = 1;
    sub_21610B834(v11, "gy");
    int v12 = 2;
    sub_21610B834(v13, "gt");
    int v14 = 3;
    sub_21610B834(v15, "fg");
    int v16 = 4;
    sub_21610B834(v17, "ft");
    int v18 = 5;
    sub_21610B834(v19, "fr");
    int v20 = 6;
    sub_21610B834(v21, "dr");
    int v22 = 7;
    sub_21610B834(v23, "de");
    int v24 = 8;
    sub_21610B834(v25, "se");
    int v26 = 9;
    sub_21610B834(v27, "sw");
    int v28 = 10;
    sub_21610B834(v29, "aw");
    int v30 = 11;
    sub_21610B834(v31, "aq");
    int v32 = 12;
    sub_21610B834(v33, "ws");
    int v34 = 13;
    sub_21610B834(v35, "ed");
    int v36 = 14;
    sub_21610B834(v37, "rd");
    int v38 = 15;
    sub_21610B834(v39, "rf");
    int v40 = 16;
    sub_21610B834(v41, "tf");
    int v42 = 17;
    sub_21610B834(v43, "tg");
    int v44 = 18;
    sub_21610B834(v45, "yg");
    int v46 = 19;
    sub_21610B834(v47, "yh");
    int v48 = 20;
    sub_21610B834(v49, "yu");
    int v50 = 21;
    sub_21610B834(v51, "uh");
    int v52 = 22;
    sub_21610B834(v53, "uj");
    int v54 = 23;
    sub_21610B834(v55, "iu");
    int v56 = 24;
    sub_21610B834(v57, "ij");
    int v58 = 25;
    sub_21610B834(v59, "io");
    int v60 = 26;
    sub_21610B834(v61, "oi");
    int v62 = 27;
    sub_21610B834(v63, "ik");
    int v64 = 28;
    sub_21610B834(v65, "ju");
    int v66 = 29;
    sub_21610B834(v67, "hu");
    int v68 = 30;
    sub_21610B834(v69, "hy");
    int v70 = 31;
    sub_21610B834(v71, "gf");
    int v72 = 32;
    sub_21610B834(v73, "fd");
    int v74 = 33;
    sub_21610B834(v75, "df");
    int v76 = 34;
    sub_21610B834(v77, "ds");
    int v78 = 35;
    sub_21610B834(v79, "er");
    int v80 = 36;
    sub_21610B834(v81, "xc");
    int v82 = 37;
    sub_21610B834(v83, "ty");
    int v84 = 38;
    sub_21610B834(v85, "yt");
    int v86 = 39;
    sub_21610B834(v87, "uy");
    int v88 = 40;
    sub_21610B834(v89, "ui");
    int v90 = 41;
    sub_21610B834(v91, "tr");
    int v92 = 42;
    sub_21610B834(v93, "rt");
    int v94 = 43;
    sub_21610B834(v95, "re");
    int v96 = 44;
    sub_21610B834(v97, "ew");
    int v98 = 45;
    sub_21610B834(v99, "es");
    int v100 = 46;
    sub_21610B834(v101, "sd");
    int v102 = 47;
    sub_21610B834(v103, "xd");
    int v104 = 48;
    sub_21610B834(v105, "xz");
    int v106 = 49;
    sub_21610B834(v107, "cx");
    int v108 = 50;
    sub_21610B834(v109, "cf");
    int v110 = 51;
    sub_21610B834(v111, "fc");
    int v112 = 52;
    sub_21610B834(v113, "gv");
    int v114 = 53;
    sub_21610B834(v115, "hg");
    int v116 = 54;
    sub_21610B834(v117, "hj");
    int v118 = 55;
    sub_21610B834(v119, "jh");
    int v120 = 56;
    sub_21610B834(v121, "hb");
    int v122 = 57;
    sub_21610B834(v123, "bn");
    int v124 = 58;
    sub_21610B834(v125, "nb");
    int v126 = 59;
    sub_21610B834(v127, "bh");
    int v128 = 60;
    sub_21610B834(v129, "sa");
    int v130 = 61;
    sub_21610B834(v131, "as");
    int v132 = 62;
    sub_21610B834(v133, "vg");
    int v134 = 63;
    sub_21610B834(v135, "vb");
    int v136 = 64;
    sub_21610B834(v137, "we");
    int v138 = 65;
    sub_21610B834(v139, "sz");
    int v140 = 66;
    sub_21610B834(v141, "zs");
    int v142 = 67;
    sub_21610B834(v143, "cv");
    int v144 = 68;
    sub_21610B834(v145, "vc");
    int v146 = 69;
    sub_21610B834(v147, "bv");
    int v148 = 70;
    sub_21610B834(v149, "dx");
    int v150 = 71;
    sub_21610B834(v151, "op");
    int v152 = 72;
    sub_21610B834(v153, "lo");
    int v154 = 73;
    sub_21610B834(v155, "lk");
    int v156 = 74;
    sub_21610B834(v157, "kl");
    int v158 = 75;
    sub_21610B834(v159, "km");
    int v160 = 76;
    sub_21610B834(v161, "mn");
    int v162 = 77;
    sub_21610B834(v163, "nm");
    int v164 = 78;
    sub_21610B834(v165, "zx");
    int v166 = 79;
    sub_21610B834(v167, "ok");
    int v168 = 80;
    sub_21610B834(v169, "ko");
    int v170 = 81;
    sub_21610B834(v171, "kj");
    int v172 = 82;
    sub_21610B834(v173, "jk");
    int v174 = 83;
    sub_21610B834(v175, "jn");
    int v176 = 84;
    sub_21610B834(v177, "nj");
    int v178 = 85;
    sub_21610B834(v179, "az");
    int v180 = 86;
    sub_21610B834(v181, "ji");
    int v182 = 87;
    sub_21610B834(v183, "po");
    int v184 = 88;
    sub_21610B834(v185, "mk");
    int v186 = 89;
    sub_21610B834(v187, "wq");
    int v188 = 90;
    sub_21610B834(v189, "qw");
    int v190 = 91;
    sub_21610B834(v191, "ol");
    int v192 = 92;
    sub_21610B834(v193, "qa");
    int v194 = 93;
    sub_21610B834(v195, "ki");
    int v196 = 94;
    sub_21610B834(v197, "wa");
    int v198 = 95;
    sub_21610B834(v199, "za");
    int v200 = 96;
    sub_21610B834(v201, "lp");
    int v202 = 97;
    sub_21610B834(v203, "ml");
    int v204 = 98;
    sub_21610B834(v205, "lm");
    int v206 = 99;
    sub_21610B834(v207, "pl");
    int v208 = 100;
    sub_21610B834(v209, "GH");
    int v210 = 101;
    sub_21610B834(v211, "GY");
    int v212 = 102;
    sub_21610B834(v213, "GT");
    int v214 = 103;
    sub_21610B834(v215, "FG");
    int v216 = 104;
    sub_21610B834(v217, "FT");
    int v218 = 105;
    sub_21610B834(v219, "FR");
    int v220 = 106;
    sub_21610B834(v221, "DR");
    int v222 = 107;
    sub_21610B834(v223, "DE");
    int v224 = 108;
    sub_21610B834(v225, "SE");
    int v226 = 109;
    sub_21610B834(v227, "SW");
    int v228 = 110;
    sub_21610B834(v229, "AW");
    int v230 = 111;
    sub_21610B834(v231, "AQ");
    int v232 = 112;
    sub_21610B834(v233, "WS");
    int v234 = 113;
    sub_21610B834(v235, "ED");
    int v236 = 114;
    sub_21610B834(v237, "RD");
    int v238 = 115;
    sub_21610B834(v239, "RF");
    int v240 = 116;
    sub_21610B834(v241, "TF");
    int v242 = 117;
    sub_21610B834(v243, "TG");
    int v244 = 118;
    sub_21610B834(v245, "YG");
    int v246 = 119;
    sub_21610B834(v247, "YH");
    int v248 = 120;
    sub_21610B834(v249, "YU");
    int v250 = 121;
    sub_21610B834(v251, "UH");
    int v252 = 122;
    sub_21610B834(v253, "UJ");
    int v254 = 123;
    sub_21610B834(v255, "IU");
    int v256 = 124;
    sub_21610B834(v257, "IJ");
    int v258 = 125;
    sub_21610B834(v259, "IO");
    int v260 = 126;
    sub_21610B834(v261, "OI");
    int v262 = 127;
    sub_21610B834(v263, "IK");
    int v264 = 128;
    sub_21610B834(v265, "JU");
    int v266 = 129;
    sub_21610B834(v267, "HU");
    int v268 = 130;
    sub_21610B834(v269, "HY");
    int v270 = 131;
    sub_21610B834(v271, "GF");
    int v272 = 132;
    sub_21610B834(v273, "FD");
    int v274 = 133;
    sub_21610B834(v275, "DF");
    int v276 = 134;
    sub_21610B834(v277, "DS");
    int v278 = 135;
    sub_21610B834(v279, "ER");
    int v280 = 136;
    sub_21610B834(v281, "XC");
    int v282 = 137;
    sub_21610B834(v283, "TY");
    int v284 = 138;
    sub_21610B834(v285, "YT");
    int v286 = 139;
    sub_21610B834(v287, "UY");
    int v288 = 140;
    sub_21610B834(v289, "UI");
    int v290 = 141;
    sub_21610B834(v291, "TR");
    int v292 = 142;
    sub_21610B834(v293, "RT");
    int v294 = 143;
    sub_21610B834(v295, "RE");
    int v296 = 144;
    sub_21610B834(v297, "EW");
    int v298 = 145;
    sub_21610B834(v299, "ES");
    int v300 = 146;
    sub_21610B834(v301, "SD");
    int v302 = 147;
    sub_21610B834(v303, "XD");
    int v304 = 148;
    sub_21610B834(v305, "XZ");
    int v306 = 149;
    sub_21610B834(v307, "CX");
    int v308 = 150;
    sub_21610B834(v309, "CF");
    int v310 = 151;
    sub_21610B834(v311, "FC");
    int v312 = 152;
    sub_21610B834(v313, "GV");
    int v314 = 153;
    sub_21610B834(v315, "HG");
    int v316 = 154;
    sub_21610B834(v317, "HJ");
    int v318 = 155;
    sub_21610B834(v319, "JH");
    int v320 = 156;
    sub_21610B834(v321, "HB");
    int v322 = 157;
    sub_21610B834(v323, "BN");
    int v324 = 158;
    sub_21610B834(v325, "NB");
    int v326 = 159;
    sub_21610B834(v327, "BH");
    int v328 = 160;
    sub_21610B834(v329, "SA");
    int v330 = 161;
    sub_21610B834(v331, "AS");
    int v332 = 162;
    sub_21610B834(v333, "VG");
    int v334 = 163;
    sub_21610B834(v335, "VB");
    int v336 = 164;
    sub_21610B834(v337, "WE");
    int v338 = 165;
    sub_21610B834(v339, "SZ");
    int v340 = 166;
    sub_21610B834(v341, "ZS");
    int v342 = 167;
    sub_21610B834(v343, "CV");
    int v344 = 168;
    sub_21610B834(v345, "VC");
    int v346 = 169;
    sub_21610B834(v347, "BV");
    int v348 = 170;
    sub_21610B834(v349, "DX");
    int v350 = 171;
    sub_21610B834(v351, "OP");
    int v352 = 172;
    sub_21610B834(v353, "LO");
    int v354 = 173;
    sub_21610B834(v355, "LK");
    int v356 = 174;
    sub_21610B834(v357, "KL");
    int v358 = 175;
    sub_21610B834(v359, "KM");
    int v360 = 176;
    sub_21610B834(v361, "MN");
    int v362 = 177;
    sub_21610B834(v363, "NM");
    int v364 = 178;
    sub_21610B834(v365, "ZX");
    int v366 = 179;
    sub_21610B834(v367, "OK");
    int v368 = 180;
    sub_21610B834(v369, "KO");
    int v370 = 181;
    sub_21610B834(v371, "KJ");
    int v372 = 182;
    sub_21610B834(v373, "JK");
    int v374 = 183;
    sub_21610B834(v375, "JN");
    int v376 = 184;
    sub_21610B834(v377, "NJ");
    int v378 = 185;
    sub_21610B834(v379, "AZ");
    int v380 = 186;
    sub_21610B834(v381, "JI");
    int v382 = 187;
    sub_21610B834(v383, "PO");
    int v384 = 188;
    sub_21610B834(v385, "MK");
    int v386 = 189;
    sub_21610B834(v387, "WQ");
    int v388 = 190;
    sub_21610B834(v389, "QW");
    int v390 = 191;
    sub_21610B834(v391, "OL");
    int v392 = 192;
    sub_21610B834(v393, "QA");
    int v394 = 193;
    sub_21610B834(v395, "KI");
    int v396 = 194;
    sub_21610B834(v397, "WA");
    int v398 = 195;
    sub_21610B834(v399, "ZA");
    int v400 = 196;
    sub_21610B834(v401, "LP");
    int v402 = 197;
    sub_21610B834(v403, "ML");
    int v404 = 198;
    sub_21610B834(v405, "LM");
    int v406 = 199;
    sub_21610B834(v407, "PL");
    int v408 = 200;
    sub_216220EE0((uint64_t)qword_26797E0B8, (unsigned __int8 *)__p, 200);
    for (uint64_t i = 0; i != -800; i -= 4)
    {
      if (SHIBYTE(v407[i + 2]) < 0) {
        operator delete((void *)v407[i]);
      }
    }
    __cxa_atexit((void (*)(void *))sub_21622093C, qword_26797E0B8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E0B0);
  }
  sub_21610B834(__p, v1);
  uint64_t v2 = sub_21618241C(qword_26797E0B8, (unsigned __int8 *)__p);
  unint64_t v3 = v2;
  if ((v9 & 0x80000000) == 0)
  {
    if (v2) {
      goto LABEL_4;
    }
    return -1;
  }
  operator delete(__p[0]);
  if (!v3) {
    return -1;
  }
LABEL_4:
  sub_21610B834(__p, v1);
  uint64_t v7 = __p;
  uint64_t v4 = *((unsigned int *)sub_216221284((uint64_t)qword_26797E0B8, (unsigned __int8 *)__p, (uint64_t)&unk_21636EABA, (long long **)&v7)+ 10);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_2162728F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  BOOL v19 = (char *)(v17 + 6391);
  uint64_t v20 = -6400;
  unint64_t v21 = v19;
  while (1)
  {
    int v22 = *v21;
    v21 -= 32;
    if (v22 < 0) {
      operator delete(*(void **)(v19 - 23));
    }
    BOOL v19 = v21;
    v20 += 32;
    if (!v20)
    {
      __cxa_guard_abort(&qword_26797E0B0);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_216272CA0(uint64_t result, char *a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 192) = a4;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      result = __toupper(*a2);
      *a2++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_216272CE0(uint64_t a1)
{
  if (*(void *)(a1 + 144) != *(void *)(a1 + 152))
  {
    uint64_t v2 = (_OWORD *)(a1 + 48);
    if (*(void *)(a1 + 48) != *(void *)(a1 + 56))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 32);
        if ((unint64_t)(v4 - 10) >= 0xFFFFFFFFFFFFFFF8)
        {
          unsigned long long v57 = 0uLL;
          uint64_t v58 = 0;
          sub_2162731D8((uint64_t *)&v57);
          unsigned long long v57 = *(_OWORD *)(a1 + 48);
          uint64_t v58 = *(void *)(a1 + 64);
          *uint64_t v2 = 0u;
          v2[1] = 0u;
          uint64_t v5 = *(unsigned __int16 ***)(a1 + 144);
          uint64_t v47 = *(unsigned __int16 ***)(a1 + 152);
          if (v5 != v47)
          {
            unint64_t v6 = v4 - 1;
            uint64_t v46 = 1 - v4;
            do
            {
              uint64_t v7 = *v5;
              uint64_t v8 = v5[1];
              unint64_t v9 = v8 - *v5;
              if (v9 >= v6)
              {
                if (v9 - v6 >= v9)
                {
                  uint64_t v13 = 0;
                }
                else
                {
                  int v14 = *(_DWORD **)(a1 + 168);
                  unint64_t v15 = &v7[v9];
                  uint64_t v16 = v46;
                  do
                    *v14++ = v15[v16] + 1000;
                  while (!__CFADD__(v16++, 1));
                  uint64_t v13 = v6;
                }
              }
              else
              {
                int v10 = *(_DWORD **)(a1 + 168);
                *int v10 = 1;
                if (v7 == v8)
                {
                  uint64_t v13 = 1;
                }
                else
                {
                  uint64_t v11 = 1;
                  do
                  {
                    int v12 = *v7++;
                    uint64_t v13 = v11 + 1;
                    v10[v11++] = v12 + 1000;
                  }
                  while (v7 != v8);
                }
              }
              uint64_t v18 = *((void *)&v57 + 1);
              unsigned long long v20 = v57;
              uint64_t v48 = v20 >> 64;
              for (uint64_t i = v20; i != v18; i += 32)
              {
                double v21 = *((double *)v5 + 3) + *(double *)(i + 24);
                uint64_t v22 = *(void *)(a1 + 56);
                if ((unint64_t)(v22 - *(void *)(a1 + 48)) < 0x140 || v21 > *(double *)(v22 - 8))
                {
                  __dst[0] = 0;
                  __dst[1] = 0;
                  uint64_t v56 = 0;
                  sub_216182F50(__dst, *v5, (uint64_t)v5[1], v5[1] - *v5);
                  sub_216263328((uint64_t)__dst, (uint64_t)__dst[1], *(char **)i, *(char **)(i + 8), (uint64_t)(*(void *)(i + 8) - *(void *)i) >> 1);
                  sub_2161BC064(&__p, 1uLL);
                  unint64_t v23 = 0;
                  uint64_t v24 = v13;
                  do
                  {
                    if (v23 >= (uint64_t)(*(void *)(i + 8) - *(void *)i) >> 1) {
                      break;
                    }
                    uint64_t v25 = *(unsigned __int16 *)(*(void *)i + 2 * v23) + 1000;
                    double v26 = (*(double (**)(void, uint64_t, void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v25, *(void *)(a1 + 168), v24);
                    float v27 = *(float *)(sub_2161A1184(1u) + 8);
                    *(_DWORD *)(*(void *)(a1 + 168) + 4 * v24) = v25;
                    double v28 = (*(double (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v25);
                    float v29 = *(float *)(sub_2161A1184(1u) + 8);
                    int v30 = v53;
                    if (v53 >= v54)
                    {
                      int v32 = (char *)__p;
                      uint64_t v33 = (v53 - (unsigned char *)__p) >> 2;
                      unint64_t v34 = v33 + 1;
                      if ((unint64_t)(v33 + 1) >> 62) {
                        sub_21610CB04();
                      }
                      uint64_t v35 = v54 - (unsigned char *)__p;
                      if ((v54 - (unsigned char *)__p) >> 1 > v34) {
                        unint64_t v34 = v35 >> 1;
                      }
                      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v36 = v34;
                      }
                      if (v36)
                      {
                        v37 = (char *)sub_2161129B4((uint64_t)&v54, v36);
                        int v32 = (char *)__p;
                        int v30 = v53;
                      }
                      else
                      {
                        v37 = 0;
                      }
                      int v38 = &v37[4 * v33];
                      *(_DWORD *)int v38 = v25;
                      unsigned int v31 = v38 + 4;
                      while (v30 != v32)
                      {
                        int v39 = *((_DWORD *)v30 - 1);
                        v30 -= 4;
                        *((_DWORD *)v38 - 1) = v39;
                        v38 -= 4;
                      }
                      __p = v38;
                      uint64_t v53 = v31;
                      int v54 = &v37[4 * v36];
                      if (v32) {
                        operator delete(v32);
                      }
                    }
                    else
                    {
                      *(_DWORD *)uint64_t v53 = v25;
                      unsigned int v31 = v30 + 4;
                    }
                    ++v24;
                    uint64_t v53 = v31;
                    double v21 = v21 + v26 * v27 - v28 * v29;
                    ++v23;
                  }
                  while (v23 != v6);
                  *(_OWORD *)unint64_t v49 = *(_OWORD *)__dst;
                  uint64_t v50 = v56;
                  __dst[0] = 0;
                  __dst[1] = 0;
                  uint64_t v56 = 0;
                  double v51 = v21;
                  sub_21618E3E0(a1, (unint64_t)v49, 0xAuLL);
                  if (v49[0])
                  {
                    v49[1] = v49[0];
                    operator delete(v49[0]);
                  }
                  if (__p)
                  {
                    uint64_t v53 = (char *)__p;
                    operator delete(__p);
                  }
                  if (__dst[0])
                  {
                    __dst[1] = __dst[0];
                    operator delete(__dst[0]);
                  }
                }
                uint64_t v18 = v48;
              }
              v5 += 4;
            }
            while (v5 != v47);
            int v40 = *(uint64_t **)(a1 + 48);
            uint64_t v41 = *(uint64_t **)(a1 + 56);
            if (v40 != v41)
            {
              unint64_t v42 = *(void *)(a1 + 72);
              do
              {
                uint64_t v44 = *v40;
                uint64_t v43 = v40[1];
                v40 += 4;
                unint64_t v45 = (v43 - v44) >> 1;
                if (v42 <= v45) {
                  unint64_t v42 = v45;
                }
              }
              while (v40 != v41);
              *(void *)(a1 + 72) = v42;
            }
          }
          v49[0] = &v57;
          sub_216129CCC((void ***)v49);
        }
      }
    }
  }
}

void sub_216273104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  __p = &a25;
  sub_216129CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_216273174(uint64_t a1)
{
  sub_216273214(a1);

  JUMPOUT(0x2166CA800);
}

BOOL sub_2162731AC(void *a1)
{
  return a1[3] == a1[4] && a1[18] == a1[19];
}

uint64_t sub_2162731D0(uint64_t a1)
{
  return a1 + 200;
}

void sub_2162731D8(uint64_t *a1)
{
  if (*a1)
  {
    sub_216129D20(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216273214(uint64_t a1)
{
  sub_216240980((const void **)(a1 + 208), 0);
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 144);
  sub_216129CCC(&v4);
  return sub_21621F4A8(a1);
}

uint64_t sub_216273270(uint64_t a1, const void *a2, CFTypeRef cf)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = (const void **)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  if (a2) {
    sub_2161AC6F8((const void **)a1, a2);
  }
  if (cf) {
    sub_216195954(v5, cf);
  }
  sub_216273304((const void **)a1);
  return a1;
}

void sub_2162732D4(_Unwind_Exception *a1)
{
  sub_2161DFB5C(v1 + 2, 0);
  sub_2161868BC(v2, 0);
  sub_216195B94(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216273304(const void **a1)
{
  uint64_t v2 = sub_2162769A4();
  if (*v2 && (v2[9] & 4) != 0 && *a1)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    uint64_t v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    sub_2161DFB5C(a1 + 2, Mutable);
    CFDictionarySetValue((CFMutableDictionaryRef)a1[2], @"keys", *a1);
    CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v3, 0, v4, v5);
    CFDictionarySetValue((CFMutableDictionaryRef)a1[2], @"log likelihoods", v7);
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_2162733EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216182BB8((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void **sub_216273404(const void **a1)
{
  return a1;
}

void sub_216273454(uint64_t a1)
{
  uint64_t v2 = (const void **)(a1 + 16);
  if (*(void *)(a1 + 16)) {
    sub_2162734B8(a1);
  }
  sub_2161DFB5C(v2, 0);
  sub_216195B94((const void **)a1, 0);

  sub_2161868BC((const void **)(a1 + 8), 0);
}

void sub_2162734B8(uint64_t a1)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_26797E0E8, memory_order_acquire) != -1)
  {
    CFErrorRef error = (CFErrorRef)&v13;
    p_CFErrorRef error = &error;
    std::__call_once(&qword_26797E0E8, &p_error, (void (__cdecl *)(void *))sub_216273A0C);
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFAllocatorRef v3 = (__CFDateFormatter *)qword_26797E0E0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFStringRef StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(v2, v3, Current);
  CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"/tmp/GeometryModel/%@-%@.plist", *(void *)(a1 + 8), StringWithAbsoluteTime);
  CFURLRef v7 = CFURLCreateWithFileSystemPath(0, v6, kCFURLPOSIXPathStyle, 0);
  CFErrorRef error = 0;
  CFDataRef v8 = CFPropertyListCreateData(v2, *(CFPropertyListRef *)(a1 + 16), kCFPropertyListXMLFormat_v1_0, 0, &error);
  unint64_t v9 = CFWriteStreamCreateWithFile(0, v7);
  if (v9)
  {
    int v10 = v9;
    if (CFWriteStreamOpen(v9))
    {
      BytePtr = CFDataGetBytePtr(v8);
      CFIndex Length = CFDataGetLength(v8);
      CFWriteStreamWrite(v10, BytePtr, Length);
      CFWriteStreamClose(v10);
    }
    CFRelease(v10);
  }
  CFRelease(StringWithAbsoluteTime);
  CFRelease(v6);
  CFRelease(v7);
  CFRelease(v8);
}

void sub_216273624(const void **a1, const void *a2, const __CFString *a3)
{
  sub_216273454((uint64_t)a1);
  if (a2)
  {
    if (a3)
    {
      CFTypeID v6 = CFGetTypeID(a2);
      if (v6 == CFArrayGetTypeID())
      {
        uint64_t Length = CFStringGetLength(a3);
        if (Length == CFArrayGetCount((CFArrayRef)a2))
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, Length, MEMORY[0x263EFFF70]);
          if (Length >= 1)
          {
            for (CFIndex i = 0; i != Length; ++i)
            {
              int CharacterAtIndex = CFStringGetCharacterAtIndex(a3, i);
              unsigned __int16 v11 = CharacterAtIndex;
              if ((CharacterAtIndex - 65) < 0x1A || (CharacterAtIndex - 12353) <= 0x52)
              {
                char v13 = CFDataCreateMutable(0, 8);
                *(_DWORD *)bytes = v11;
                *(_DWORD *)&bytes[4] = 0;
                CFDataAppendBytes(v13, bytes, 8);
                CFArrayAppendValue(Mutable, v13);
                CFRelease(v13);
              }
              else
              {
                ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
                CFArrayAppendValue(Mutable, ValueAtIndex);
              }
            }
          }
          if (Mutable)
          {
            sub_216195B94(a1, Mutable);
            sub_216195954(a1 + 1, a3);
            sub_216273304(a1);
          }
        }
      }
    }
  }
}

const UInt8 *sub_21627378C(CFArrayRef *a1, CFIndex a2)
{
  if (a2 < 0) {
    return 0;
  }
  CFArrayRef v3 = *a1;
  if (!v3 || CFArrayGetCount(v3) <= a2) {
    return 0;
  }
  CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*a1, a2);

  return CFDataGetBytePtr(ValueAtIndex);
}

CFArrayRef sub_2162737F4(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      CFIndex Count = CFArrayGetCount(v1);
      CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      result = (const __CFArray *)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
      if (Count >= 1)
      {
        theString = (__CFString *)result;
        CFIndex v19 = Count;
        CFIndex v4 = 0;
        CFArrayRef v20 = v1;
        do
        {
          CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v1, v4);
          if (ValueAtIndex)
          {
            CFDataRef v6 = ValueAtIndex;
            CFTypeID v7 = CFGetTypeID(ValueAtIndex);
            if (v7 == CFDataGetTypeID())
            {
              CFIndex Length = CFDataGetLength(v6);
              if (Length)
              {
                unint64_t v9 = Length;
                CFMutableStringRef Mutable = CFStringCreateMutable(v3, 0);
                BytePtr = CFDataGetBytePtr(v6);
                if (v9 < 8) {
                  __assert_rtn("createStringFromGeometryData", "GeometryModel.cpp", 201, "numKeys > 0");
                }
                int v12 = (float *)BytePtr;
                uint64_t v13 = 0;
                unint64_t v14 = v9 >> 3;
                do
                {
                  if (!*(_WORD *)v12) {
                    break;
                  }
                  if (v13) {
                    CFStringRef v15 = @",";
                  }
                  else {
                    CFStringRef v15 = @"{";
                  }
                  CFStringAppend(Mutable, v15);
                  CFStringRef v16 = CFStringCreateWithFormat(v3, 0, @"%C:%f", *(unsigned __int16 *)v12, v12[1]);
                  CFStringAppend(Mutable, v16);
                  if (v16) {
                    CFRelease(v16);
                  }
                  ++v13;
                  v12 += 2;
                }
                while (v14 != v13);
                if (CFStringGetLength(Mutable) <= 0) {
                  CFStringRef v17 = @"{0:0}";
                }
                else {
                  CFStringRef v17 = @"};";
                }
                CFStringAppend(Mutable, v17);
                CFIndex Count = v19;
                CFArrayRef v1 = v20;
                if (Mutable)
                {
                  CFStringAppend(theString, Mutable);
                  CFRelease(Mutable);
                }
              }
            }
          }
          ++v4;
        }
        while (v4 != Count);
        return (const __CFArray *)theString;
      }
    }
  }
  return result;
}

void sub_2162739E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216273A0C()
{
  CFLocaleRef System = CFLocaleGetSystem();
  qword_26797E0E0 = (uint64_t)CFDateFormatterCreate(0, System, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  CFDateFormatterSetFormat((CFDateFormatterRef)qword_26797E0E0, @"yyyy-MM-dd@HHmm.ssSS");

  return mkdir("/tmp/GeometryModel", 0x1C0u);
}

void sub_216273A68()
{
  CFStringRef v0 = (const __CFString *)LXAnalyzerCandidateCopySurface();
  sub_2161E236C(v0);
}

void sub_216273AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void **sub_216273AD0(const void **a1, const void *a2, int a3, const void *a4)
{
  int valuePtr = a3;
  *a1 = 0;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F51318], a2);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F512F0], v8);
  if (a4) {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F512E8], a4);
  }
  unint64_t v9 = (const void *)LXAnalyzerCreate();
  sub_2161FBAB8(a1, v9);
  if (v8) {
    CFRelease(v8);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return a1;
}

void sub_216273BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2161DFB5C((const void **)va, 0);
  sub_2161FBAB8(v3, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216273C30(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return LXAnalyzerEnumerateCandidatesWithLattice();
  }
  return result;
}

void sub_216273CA8(uint64_t a1, const void *a2, unsigned char *a3)
{
  char v7 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef cf = 0;
  sub_216273EA0(&cf, a2);
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5) {
    sub_21610B7AC();
  }
  (*(void (**)(uint64_t, CFTypeRef *, char *))(*(void *)v5 + 48))(v5, &cf, &v7);
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    *a3 = 1;
  }
}

void sub_216273D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

char *sub_216273D58(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    CFDataRef v6 = result;
    sub_216129BA8(result, a4);
    uint64_t result = sub_216273DE0((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_216273DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_21613EFD0(&a9);
  _Unwind_Resume(a1);
}

char *sub_216273DE0(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  unsigned __int16 v11 = __dst;
  int v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    CFDataRef v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_2161984AC(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      CFDataRef v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      int v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2161DEFF4((uint64_t)v9);
  return v4;
}

void sub_216273E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216273EA0(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_216273F00(a1, cf);
  }
}

void sub_216273F00(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void *MecabraCreateASCIIStringFromWubixing(void *a1)
{
  return MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(0xAu, a1);
}

void *MecabraCreateWubixingStringFromASCII(void *a1)
{
  return MecabraInputKeyPropertiesCreateInputKeyFromASCIIString(0xAu, a1);
}

uint64_t sub_216273F50(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_26C6BF198;
  uint64_t v4 = a1[37];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[44];
  a1[44] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[42];
  a1[42] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[41];
  a1[41] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[40];
  a1[40] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a1[39];
  a1[39] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  sub_2161FCB90(a1 + 36, 0, a3);

  return sub_216190328((uint64_t)a1);
}

void sub_2162740CC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_216273F50(a1, a2, a3);

  JUMPOUT(0x2166CA800);
}

void sub_216274104(uint64_t a1)
{
  if (qword_26797E110 != -1) {
    dispatch_once(&qword_26797E110, &unk_26C6CA220);
  }
  sub_2161900B4(a1);
}

void sub_2162742EC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10E1C407767CB23);
  uint64_t v6 = v1[44];
  v1[44] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v1[42];
  v1[42] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v1[41];
  v1[41] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v1[40];
  v1[40] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *v3;
  uint64_t *v3 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_2161FCB90(v1 + 36, 0, v5);
  sub_216190328((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216274428(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 304))();
}

uint64_t sub_216274458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2 && a3)
  {
    uint64_t v5 = (void *)sub_2162759C0(*(void *)(a1 + 32), a3);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v3 = [v5 countByEnumeratingWithState:v6 objects:v13 count:16];
    if (v3)
    {
      uint64_t v8 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          if (objc_msgSend_hasPrefix_(v10, v7, a2))
          {
            uint64_t v3 = [v10 copyWithZone:v7];
            goto LABEL_13;
          }
        }
        uint64_t v3 = [v5 countByEnumeratingWithState:v7 objects:&v13 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }
LABEL_13:
    if (v5) {
      CFRelease(v5);
    }
  }
  return v3;
}

void sub_216274588(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2160F7444(exception_object);
}

uint64_t sub_2162745C0(uint64_t a1)
{
  v19[1] = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a1 + 344);
  uint64_t v3 = &off_26426BCF8;
  if (v2 != 1) {
    uint64_t v3 = &off_26426BCF0;
  }
  if (v2 == 2) {
    uint64_t v4 = &off_26426BD00;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = NSString;
  uint64_t v7 = sub_2161E2A24(*(_DWORD *)(a1 + 72));
  uint64_t v9 = (const char *)[v6 stringWithUTF8String:v8];
  uint64_t v10 = NSString;
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(a1);
  int v12 = sub_2161E2A50(v11, 0);
  uint64_t v14 = [v10 stringWithUTF8String:v13];
  uint64_t v18 = @"wubixingStandard";
  v19[0] = v5;
  uint64_t v16 = [NSDictionary dictionaryWithObjects:v15 forKeys:(uint64_t)v19 count:&v18];
  return sub_216225F1C(*(void *)(a1 + 352), v9, v14, v16);
}

id sub_2162746EC()
{
  InputKeys = (void *)MecabraInputKeyPropertiesGetInputKeys(2);
  uint64_t v2 = [InputKeys stringByAppendingString:v1];
  qword_26797E0F0 = (uint64_t)(id)[MEMORY[0x263F08708] characterSetWithCharactersInString:v3];
  id result = (id)[(id)qword_26797E0F0 invertedSet:v4 withOptions:v5];
  qword_26797E0F8 = (uint64_t)result;
  return result;
}

void *sub_216274748(void *a1, __CFString *a2, int a3)
{
  uint64_t v4 = a2;
  if (a3)
  {
    uint64_t v6 = off_264269870;
    int v7 = 98306;
  }
  else
  {
    uint64_t v8 = [a2 rangeOfString:@"z"];
    uint64_t v6 = off_264269868;
    int v7 = 32770;
    if (v8 && v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v4 = (__CFString *)[v4 stringByReplacingOccurrencesOfString:v9 withString:@"z"];
      uint64_t v6 = off_264269880;
      int v7 = 32770;
    }
  }
  uint64_t v10 = (uint64_t)*v6;
  v63[0] = 0;
  v63[1] = 0;
  v61[1] = 0;
  int v62 = v63;
  int v60 = v61;
  v61[0] = 0;
  sub_2161910A8(a1, (uint64_t)&v60, v4, v10, (uint64_t)&v62, v7);
  int v11 = v60;
  uint64_t v58 = 0;
  int v59 = 0;
  unsigned long long v57 = 0;
  if (v60 == v61)
  {
    uint64_t v18 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    long long v13 = v60;
    do
    {
      unint64_t v14 = v12;
      long long v15 = v13[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = (void **)v15;
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void **)v13[2];
          BOOL v17 = *v16 == v13;
          long long v13 = v16;
        }
        while (!v17);
      }
      ++v12;
      long long v13 = v16;
    }
    while (v16 != v61);
    if (v14 >= 0x1FFFFFFFFFFFFFFFLL) {
      sub_21610CB04();
    }
    uint64_t v18 = sub_2160FFAA8((uint64_t)&v59, v12);
    unsigned long long v57 = v18;
    int v59 = &v18[v19];
    do
    {
      void *v18 = v11[4];
      CFArrayRef v20 = (void *)v11[1];
      if (v20)
      {
        do
        {
          double v21 = (void **)v20;
          CFArrayRef v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          double v21 = (void **)v11[2];
          BOOL v17 = *v21 == v11;
          int v11 = v21;
        }
        while (!v17);
      }
      ++v18;
      int v11 = v21;
    }
    while (v21 != v61);
    uint64_t v22 = v57;
    uint64_t v58 = v18;
  }
  unint64_t v23 = 126 - 2 * __clz(((char *)v18 - v22) >> 3);
  __p = sub_21618770C;
  if (v18 == (void *)v22) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  sub_216276030((uint64_t)v22, v18, (uint64_t (**)(void))&__p, v24, 1);
  float v27 = [MEMORY[0x263EFF980] floatValue];
  double v28 = v27;
  if (a3)
  {
    sub_216196560(v27, (uint64_t *)v57, v58, 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_61;
  }
  int v30 = (uint64_t *)v57;
  float v29 = v58;
  unint64_t v55 = 0;
  uint64_t v56 = 0;
  __p = 0;
  if (v57 != v58)
  {
    uint64_t v53 = v27;
    do
    {
      uint64_t v31 = *v30;
      int v32 = v55;
      if (v55 >= v56)
      {
        uint64_t v34 = (v55 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v34 + 1) >> 61) {
          sub_21610CB04();
        }
        unint64_t v35 = (v56 - (unsigned char *)__p) >> 2;
        if (v35 <= v34 + 1) {
          unint64_t v35 = v34 + 1;
        }
        if ((unint64_t)(v56 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        if (v36) {
          v37 = (char *)sub_2160FFAA8((uint64_t)&v56, v36);
        }
        else {
          v37 = 0;
        }
        int v38 = &v37[8 * v34];
        *(void *)int v38 = v31;
        uint64_t v33 = v38 + 8;
        int v40 = (char *)__p;
        int v39 = v55;
        if (v55 != __p)
        {
          do
          {
            uint64_t v41 = *((void *)v39 - 1);
            v39 -= 8;
            *((void *)v38 - 1) = v41;
            v38 -= 8;
          }
          while (v39 != v40);
          int v39 = (char *)__p;
        }
        __p = v38;
        unint64_t v55 = v33;
        uint64_t v56 = &v37[8 * v36];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *(void *)unint64_t v55 = v31;
        uint64_t v33 = v32 + 8;
      }
      unint64_t v55 = v33;
      uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
      uint64_t v43 = sub_21625D0E0(10, 0, v42, 0);
      CFArrayRef v64 = v43;
      if (v43)
      {
        uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
        sub_21625D824(10, 0, v44);
        if (CFArrayGetCount(v43) >= 1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v64, 0);
          (*(void (**)(uint64_t))(*(void *)v31 + 112))(v31);
          (*(void (**)(uint64_t))(*(void *)v31 + 80))(v31);
          sub_2161903FC(a1, 64, ValueAtIndex);
        }
        CFRelease(v43);
      }
      ++v30;
    }
    while (v30 != v29);
    uint64_t v47 = (uint64_t *)__p;
    uint64_t v46 = (uint64_t *)v55;
    if (__p == v55)
    {
      double v28 = v53;
      if (v55)
      {
LABEL_60:
        unint64_t v55 = (char *)v46;
        operator delete(v46);
      }
    }
    else
    {
      uint64_t v48 = -1;
      double v28 = v53;
      do
      {
        uint64_t v49 = *v47;
        if (v48)
        {
          uint64_t v50 = (void *)sub_2161F4704(v49);
          [v53 addObject:(uint64_t)v50];
        }
        else if (v49)
        {
          (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
        }
        ++v47;
        --v48;
      }
      while (v47 != v46);
      uint64_t v46 = (uint64_t *)__p;
      if (__p) {
        goto LABEL_60;
      }
    }
  }
LABEL_61:
  if (v57)
  {
    uint64_t v58 = (uint64_t *)v57;
    operator delete(v57);
  }
  sub_21612A250((uint64_t)&v60, v61[0]);
  sub_21612A250((uint64_t)&v62, v63[0]);
  return v28;
}

void sub_216274D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,char a21,void *a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_21612A250((uint64_t)&a18, a19);
  sub_21612A250((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

unint64_t sub_216274DB8(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  unint64_t v5 = a3;
  unint64_t result = [a2 count:a2 with:a3];
  if (result > v5)
  {
    int v10 = 0;
    do
    {
      int v11 = [a2 objectAtIndexedSubscript:v9];
      if (!MecabraCandidateIsEmojiCandidate(v11, v12, v13))
      {
        uint64_t v16 = [v11 v14:v15];
        if (!v16)
        {
          int v10 = 0;
          if (a4) {
            goto LABEL_8;
          }
LABEL_7:
          [*(void **)(a1 + 40) addObject:v14];
          goto LABEL_8;
        }
        int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 80))(v16);
      }
      if (((v10 ^ a4) & 1) == 0) {
        goto LABEL_7;
      }
LABEL_8:
      ++v5;
      unint64_t result = [a2 count:v14, v15];
    }
    while (v5 < result);
  }
  return result;
}

uint64_t sub_216274E8C(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(__CFString **)(result + 24);
  if (v3)
  {
    uint64_t v4 = result;
    if (objc_msgSend_length(*(void **)(result + 24), a2, a3))
    {
      uint64_t v5 = *(void *)(v4 + 320);
      if (v5)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 97));
        if ((v6 & 1) == 0)
        {
          unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v5 + 96));
          if (v7)
          {
            uint64_t v8 = *(void *)(v4 + 312);
            *(void *)(v4 + 312) = *(void *)(v4 + 320);
            *(void *)(v4 + 32sub_216273F00(&a9, 0) = 0;
            if (v8) {
              (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
            }
          }
        }
      }
      sub_216275B38(v4, (uint64_t *)(v4 + 312), v3, 32784, 0x7FFFLL);
    }
    uint64_t v9 = sub_216274748((void *)v4, v3, 0);
    id v10 = sub_2161915A0((void *)v4, v3);
    if (objc_msgSend_count(v9, v11, v12))
    {
      uint64_t v14 = 0;
      while (1)
      {
        uint64_t v15 = [v9 objectAtIndexedSubscript:v13];
        CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(v15, v16, v17);
        if (CFStringGetLength(Surface) != 1 && !MecabraCandidateIsEmojiCandidate(v15, v13, v19)) {
          break;
        }
        uint64_t v20 = [v15 v13:v19];
        if (v20)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)v20 + 80))(v20)) {
            break;
          }
        }
        [*(void **)(v4 + 40) addObject:v13];
        if (++v14 >= (unint64_t)objc_msgSend_count(v9, v21, v22)) {
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      uint64_t v14 = 0;
    }
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    uint64_t v25 = [v10 countByEnumeratingWithState:v13 objects:&v75 count:v80];
    if (v25)
    {
      uint64_t v26 = *(void *)v76;
      do
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v76 != v26) {
            objc_enumerationMutation(v10);
          }
          double v28 = *(void **)(*((void *)&v75 + 1) + 8 * i);
          uint64_t v29 = [v28 v23:v24];
          if ((!v29 || ((*(uint64_t (**)(uint64_t))(*(void *)v29 + 80))(v29) & 1) == 0)
            && (MecabraCandidateGetWubixingType(v28, v23, v24) & 2) == 0)
          {
            [*(void **)(v4 + 40) addObject:v23];
          }
        }
        uint64_t v25 = [v10 countByEnumeratingWithState:v23 objects:v80 count:16];
      }
      while (v25);
    }
    sub_216274DB8(v4, v9, v14, 0);
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    uint64_t v33 = [v10 countByEnumeratingWithState:v30 objects:(id *)&v71 count:v79];
    if (v33)
    {
      uint64_t v34 = *(void *)v72;
      do
      {
        for (uint64_t j = 0; j != v33; ++j)
        {
          if (*(void *)v72 != v34) {
            objc_enumerationMutation(v10);
          }
          unint64_t v36 = *(void **)(*((void *)&v71 + 1) + 8 * j);
          uint64_t v37 = [v36 v31:v32];
          if (v37 && ((*(uint64_t (**)(uint64_t))(*(void *)v37 + 80))(v37) & 1) != 0
            || (MecabraCandidateGetWubixingType(v36, v31, v38) & 2) != 0)
          {
            [*(void **)(v4 + 40) addObject:v31];
          }
        }
        uint64_t v33 = [v10 countByEnumeratingWithState:v31 objects:(id *)&v71 count:v79];
      }
      while (v33);
    }
    if (objc_msgSend_length(v3, v31, v32))
    {
      uint64_t v39 = *(void *)(v4 + 336);
      if (v39)
      {
        unsigned __int8 v40 = atomic_load((unsigned __int8 *)(v39 + 97));
        if ((v40 & 1) == 0)
        {
          unsigned __int8 v41 = atomic_load((unsigned __int8 *)(v39 + 96));
          if (v41)
          {
            uint64_t v42 = *(void *)(v4 + 328);
            *(void *)(v4 + 328) = *(void *)(v4 + 336);
            *(void *)(v4 + 336) = 0;
            if (v42) {
              (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
            }
          }
        }
      }
      sub_216275B38(v4, (uint64_t *)(v4 + 328), v3, 32776, 5);
    }
    sub_216274DB8(v4, v9, v14, 1);
    if ((*(unsigned char *)(v4 + 32) & 2) == 0)
    {
      unint64_t v45 = *(void **)(v4 + 40);
      id v46 = sub_2161915A0((void *)v4, v3);
      [v45 addObjectsFromArray:v47];
    }
    uint64_t v48 = (uint64_t *)(v4 + 288);
    if (!*(void *)(v4 + 288))
    {
      uint64_t v49 = (const void *)sub_2161E4814();
      CFRetain(v49);
      operator new();
    }
    uint64_t v50 = [MEMORY[0x263EFF980] v43:v44];
    if (sub_2162B8940(*(void *)(v4 + 288), v3, *(void *)(v4 + 32) & 0x40, *(void *)(v4 + 256)))
    {
      for (k = sub_2162BA80C(*v48); k; k = sub_2162BA80C(*v48))
      {
        if (qword_26797E100 != -1) {
          dispatch_once(&qword_26797E100, &unk_26C6CA000);
        }
        if (MecabraCandidateGetMatchedLengthType(k, v51, v52) != 1)
        {
          uint64_t v56 = (void *)MecabraCandidateGetSurface(k, v54, v55);
          if ((objc_msgSend_rangeOfCharacterFromSet_(v56, v57, qword_26797E0F0) == 0x7FFFFFFFFFFFFFFFLL
             || objc_msgSend_rangeOfCharacterFromSet_(v56, v58, qword_26797E0F8) == 0x7FFFFFFFFFFFFFFFLL
             && objc_msgSend_length(v56, v66, v67) != 1)
            && (!MecabraCandidateIsEmojiCandidate(k, v58, v59)
             || (uint64_t v62 = objc_msgSend_rawCandidate(k, v60, v61)) == 0
             || ((*(uint64_t (**)(uint64_t))(*(void *)v62 + 80))(v62) & 1) == 0)
            && (MecabraCandidateIsAutocorrectionCandidate(k, v60, v61)
             || MecabraCandidateIsBilingualCandidate((unint64_t)k, v63, v64)
             || (sub_2161F45D8(k, v63, v65) & 1) == 0))
          {
            [v50 addObject:v63];
          }
        }
      }
    }
    unint64_t result = [*(void **)(v4 + 40) addObjectsFromArray:v51];
    if ((*(unsigned char *)(v4 + 32) & 2) == 0)
    {
      int v68 = *(void **)(v4 + 40);
      v69 = sub_216274748((void *)v4, v3, 1);
      return [v68 addObjectsFromArray:v70];
    }
  }
  return result;
}

void sub_216275484(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162754D8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  BOOL result = 0;
  if (objc_msgSend_length(a2, (const char *)a2, (uint64_t)a3) == 1)
  {
    char isEqualToString = [a3 isEqualToString:@"IDXPrefixMatch"];
    if (a4 >= 20 && (isEqualToString & 1) != 0) {
      return 1;
    }
  }
  return result;
}

void sub_216275538()
{
  CFStringRef v0 = (uint64_t *)sub_2162D8C20();
  CFArrayRef v1 = (const UInt8 *)sub_2162D8D64(v0, 1uLL, off_26797C900[0], off_26797C8B0[0], 0);
  int v2 = *((char *)v1 + 23);
  if (v2 >= 0) {
    CFIndex v3 = v1[23];
  }
  else {
    CFIndex v3 = *((void *)v1 + 1);
  }
  if (v3)
  {
    if (v2 >= 0) {
      uint64_t v4 = v1;
    }
    else {
      uint64_t v4 = *(const UInt8 **)v1;
    }
    CFURLCreateFromFileSystemRepresentation(0, v4, v3, 1u);
  }
  operator new();
}

void sub_216275618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166CA800](v2, 0x10E1C404196B466);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFIndex sub_216275650(void *a1, int a2, CFArrayRef theArray)
{
  CFIndex result = CFArrayGetCount(theArray);
  if (result)
  {
    CFIndex result = CFArrayGetCount(theArray);
    if ((result & 1) == 0) {
      operator new();
    }
  }
  *a1 = 0;
  return result;
}

void sub_216275718(_Unwind_Exception *a1)
{
  *CFArrayRef v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void *sub_216275750(void *a1, CFArrayRef theArray)
{
  if (theArray && CFArrayGetCount(theArray))
  {
    sub_216275650(&v6, (int)a1, theArray);
    CFIndex result = (void *)a1[40];
    a1[40] = v6;
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v5();
    }
  }
  else
  {
    return sub_216275814(a1, 1);
  }
  return result;
}

void *sub_216275814(void *result, int a2)
{
  uint64_t v2 = result;
  if (a2 == 2)
  {
    uint64_t v5 = result[41];
    v2[41] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    CFIndex result = (void *)v2[42];
    v2[42] = 0;
    if (result) {
      goto LABEL_6;
    }
  }
  else if (a2 == 1)
  {
    uint64_t v3 = result[39];
    v2[39] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    CFIndex result = (void *)v2[40];
    v2[40] = 0;
    if (result)
    {
LABEL_6:
      uint64_t v4 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v4();
    }
  }
  return result;
}

void *sub_2162758F8(void *a1, CFArrayRef theArray)
{
  if (theArray && CFArrayGetCount(theArray))
  {
    sub_216275650(&v6, (int)a1, theArray);
    CFIndex result = (void *)a1[42];
    a1[42] = v6;
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v5();
    }
  }
  else
  {
    return sub_216275814(a1, 2);
  }
  return result;
}

uint64_t sub_2162759C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [MecabraWordProperties alloc];
  uint64_t v6 = [v4 initWithString:v5 language:a2];
  uint64_t v8 = [v6 wubixingCodesForStandard:v7 count:*(unsigned int *)(a1 + 344)];

  return [v8 copyWithZone:v9];
}

uint64_t sub_216275A24(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 344) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 344) = a2;
    (*(void (**)(void))(**(void **)(result + 296) + 128))(*(void *)(result + 296));
    return sub_2162745C0(v2);
  }
  return result;
}

void *sub_216275A9C(uint64_t a1, void *a2)
{
  return MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(0xAu, a2);
}

BOOL sub_216275AA4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_2161E4888();
  if (MecabraCandidateIsEmojiCandidate(a2, v4, v5)) {
    return 0;
  }
  CFStringRef Surface = (void *)MecabraCandidateGetSurface(a2, v6, v7);
  return [Surface rangeOfCharacterFromSet:v10] == 0x7FFFFFFFFFFFFFFFLL;
}

void *sub_216275AFC(uint64_t a1, const char *a2)
{
  CFIndex result = *(void **)(a1 + 16);
  if (result) {
    return (void *)([result rangeOfString:@"z"] == NSNotFound);
  }
  return result;
}

uint64_t sub_216275B30(uint64_t a1)
{
  return *(void *)(a1 + 296);
}

void sub_216275B38(uint64_t a1, uint64_t *a2, const __CFString *a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 256);
  if (!v10)
  {
    if (!*a2) {
      return;
    }
    goto LABEL_9;
  }
  if (sub_216192194(v10, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x263EFFB40] && *a2 != 0)
  {
LABEL_9:
    sub_2161E212C(a3, &v16);
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x2020000000;
    void v15[3] = 0;
    uint64_t v12 = *a2;
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    v13[2] = sub_216275C90;
    void v13[3] = &unk_26426E0D0;
    int v14 = a4;
    v13[4] = a3;
    v13[5] = v15;
    v13[6] = a1;
    v13[7] = a5;
    sub_21620CBD0(v12, (uint64_t)v16, v17 - v16, (uint64_t)v13);
    _Block_object_dispose(v15, 8);
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
  }
}

void sub_216275C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  uint64_t v12 = *(void **)(v10 - 72);
  if (v12)
  {
    *(void *)(v10 - 64) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216275C90(uint64_t result, uint64_t a2)
{
  CFIndex v2 = *(void *)(a2 + 24);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)(result + 48);
    CFStringRef v5 = CFStringCreateWithCharacters(0, *(const UniChar **)(a2 + 16), v2);
    sub_2161903FC(v4, *(unsigned int *)(v3 + 64), v5);
  }
  return result;
}

void sub_216275D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216275D84(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_2161AF1F8(*(void *)(a1 + 8), a4, a5, &v24, &v22);
  LODWORD(v12) = 0;
  switch((char)v22)
  {
    case 1:
      LODWORD(v12) = *(unsigned __int8 *)v24;
      break;
    case 2:
      LODWORD(v12) = *(unsigned __int16 *)v24;
      break;
    case 4:
      LODWORD(v12) = *v24;
      break;
    case 8:
      uint64_t v12 = *(void *)v24;
      break;
    default:
      break;
  }
  int v13 = *(_DWORD *)(a1 + 344);
  if (v13 == 1) {
    int v14 = 4;
  }
  else {
    int v14 = 2;
  }
  if (v13 == 2) {
    int v15 = 8;
  }
  else {
    int v15 = v14;
  }
  if ((v15 & v12) != 0)
  {
    id v21 = (id)sub_216190050(v25, v23);
    if (!objc_msgSend_isEqualToString_(a3, v16, @"IDXPrefixMatch")
      || (unint64_t)objc_msgSend_length(a2, v17, v18) > 2
      || (unint64_t)objc_msgSend_length(v21, v19, v20) <= 1)
    {
      (*(void (**)(uint64_t, id, void, uint64_t, uint64_t))(a7 + 16))(a7, v21, v12 >> 4, v12 & 1, a6);
    }
  }
}

uint64_t sub_216275F64(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 2) {
    int v3 = 65540;
  }
  else {
    int v3 = 4;
  }
  return (v3 & 0xFFFF7FFF | (((sub_216222FB8(a2, off_26797C570) >> 1) & 1) << 15)) ^ 0x8000;
}

uint64_t sub_216275FB4(uint64_t a1, uint64_t a2)
{
  return (sub_216222FB8(a2, off_26797C570) >> 2) & 1;
}

uint64_t sub_216275FE0()
{
  return 10;
}

uint64_t sub_216275FE8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 304) = a2;
  return result;
}

uint64_t sub_216275FF0()
{
  return 0;
}

CFArrayRef sub_216275FF8()
{
  CFArrayRef result = CFArrayCreate(0, (const void **)&off_26797C678, 2, MEMORY[0x263EFFF70]);
  qword_26797E108 = (uint64_t)result;
  return result;
}

uint64_t sub_216276030(uint64_t result, uint64_t *a2, uint64_t (**a3)(void), uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    int v11 = a2 - 1;
    int v84 = a2 - 2;
    int v87 = a2;
    int v82 = a2 - 3;
    uint64_t v12 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = v12;
          int v13 = v87;
          uint64_t v14 = (char *)v87 - (char *)v12;
          uint64_t v15 = v87 - v12;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                CFArrayRef result = ((uint64_t (*)(void, uint64_t))*a3)(*(v87 - 1), *v10);
                if (result)
                {
                  uint64_t v42 = *v10;
                  *uint64_t v10 = *(v87 - 1);
                  *(v87 - 1) = v42;
                }
                break;
              case 3:
                CFArrayRef result = sub_216188F38(v10, v10 + 1, v11, a3);
                break;
              case 4:
                CFArrayRef result = sub_2161891E4(v10, v10 + 1, v10 + 2, v11, a3);
                break;
              case 5:
                CFArrayRef result = sub_216189298(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            uint64_t v43 = v10 + 1;
            BOOL v45 = v10 == v87 || v43 == v87;
            if (a5)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                uint64_t v47 = v10;
                do
                {
                  uint64_t v49 = *v47;
                  uint64_t v48 = v47[1];
                  uint64_t v47 = v43;
                  CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = *v47;
                    uint64_t v51 = v46;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v51 + 8) = *(uint64_t *)((char *)v10 + v51);
                      if (!v51) {
                        break;
                      }
                      CFArrayRef result = ((uint64_t (*)(uint64_t, void))*a3)(v50, *(uint64_t *)((char *)v10 + v51 - 8));
                      v51 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v52 = (uint64_t *)((char *)v10 + v51 + 8);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v52 = v10;
LABEL_81:
                    *uint64_t v52 = v50;
                  }
                  uint64_t v43 = v47 + 1;
                  v46 += 8;
                }
                while (v47 + 1 != v87);
              }
            }
            else if (!v45)
            {
              do
              {
                uint64_t v77 = *v10;
                uint64_t v76 = v10[1];
                uint64_t v10 = v43;
                CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v76, v77);
                if (result)
                {
                  uint64_t v78 = *v10;
                  uint64_t v79 = v10;
                  do
                  {
                    int v80 = v79;
                    uint64_t v81 = *--v79;
                    uint64_t *v80 = v81;
                    CFArrayRef result = ((uint64_t (*)(uint64_t, void))*a3)(v78, *(v80 - 2));
                  }
                  while ((result & 1) != 0);
                  *uint64_t v79 = v78;
                }
                uint64_t v43 = v10 + 1;
              }
              while (v10 + 1 != v87);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != v87)
            {
              int64_t v53 = (unint64_t)(v15 - 2) >> 1;
              int64_t v85 = v53;
              do
              {
                int64_t v54 = v53;
                if (v85 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  uint64_t v56 = &v10[v55];
                  if (2 * v53 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                  {
                    ++v56;
                    uint64_t v55 = 2 * v54 + 2;
                  }
                  unsigned long long v57 = &v10[v54];
                  CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, *v57);
                  if ((result & 1) == 0)
                  {
                    int64_t v83 = v54;
                    uint64_t v58 = *v57;
                    do
                    {
                      uint64_t v59 = v56;
                      *unsigned long long v57 = *v56;
                      if (v85 < v55) {
                        break;
                      }
                      uint64_t v60 = (2 * v55) | 1;
                      uint64_t v56 = &v10[v60];
                      if (2 * v55 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                      {
                        ++v56;
                        uint64_t v60 = 2 * v55 + 2;
                      }
                      CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, v58);
                      unsigned long long v57 = v59;
                      uint64_t v55 = v60;
                    }
                    while (!result);
                    *uint64_t v59 = v58;
                    int v13 = v87;
                    int64_t v54 = v83;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v61 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v62 = v13;
                uint64_t v63 = 0;
                uint64_t v64 = v61 - 2;
                uint64_t v86 = *v10;
                if (v61 < 2) {
                  uint64_t v64 = v61 - 1;
                }
                uint64_t v65 = v64 >> 1;
                int v66 = v10;
                do
                {
                  uint64_t v67 = &v66[v63 + 1];
                  uint64_t v68 = (2 * v63) | 1;
                  uint64_t v69 = 2 * v63 + 2;
                  if (v69 < v61)
                  {
                    CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v66[v63 + 1], v66[v63 + 2]);
                    if (result)
                    {
                      ++v67;
                      uint64_t v68 = v69;
                    }
                  }
                  *int v66 = *v67;
                  int v66 = v67;
                  uint64_t v63 = v68;
                }
                while (v68 <= v65);
                int v13 = v62 - 1;
                if (v67 == v62 - 1)
                {
                  *uint64_t v67 = v86;
                }
                else
                {
                  *uint64_t v67 = *v13;
                  *int v13 = v86;
                  uint64_t v70 = (char *)v67 - (char *)v10 + 8;
                  if (v70 >= 9)
                  {
                    unint64_t v71 = (((unint64_t)v70 >> 3) - 2) >> 1;
                    long long v72 = &v10[v71];
                    CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, *v67);
                    if (result)
                    {
                      uint64_t v73 = *v67;
                      do
                      {
                        long long v74 = v72;
                        *uint64_t v67 = *v72;
                        if (!v71) {
                          break;
                        }
                        unint64_t v71 = (v71 - 1) >> 1;
                        long long v72 = &v10[v71];
                        CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, v73);
                        uint64_t v67 = v74;
                      }
                      while ((result & 1) != 0);
                      *long long v74 = v73;
                    }
                  }
                }
              }
              while (v61-- > 2);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          uint64_t v17 = &v10[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            sub_216188F38(v17, v10, v11, a3);
          }
          else
          {
            sub_216188F38(v10, v17, v11, a3);
            sub_216188F38(v10 + 1, v17 - 1, v84, a3);
            sub_216188F38(v10 + 2, &v10[v16 + 1], v82, a3);
            int v13 = v87;
            sub_216188F38(v17 - 1, v17, &v10[v16 + 1], a3);
            uint64_t v18 = *v10;
            *uint64_t v10 = *v17;
            *uint64_t v17 = v18;
          }
          --a4;
          if (a5 & 1) != 0 || (((uint64_t (*)(void, uint64_t))*a3)(*(v10 - 1), *v10)) {
            break;
          }
          uint64_t v33 = *v10;
          CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v10, *v11);
          if (result)
          {
            uint64_t v12 = v10;
            do
            {
              uint64_t v34 = v12[1];
              ++v12;
              CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v34);
            }
            while ((result & 1) == 0);
          }
          else
          {
            unint64_t v35 = v10 + 1;
            do
            {
              uint64_t v12 = v35;
              if (v35 >= v87) {
                break;
              }
              ++v35;
              CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, *v12);
            }
            while (!result);
          }
          unint64_t v36 = v87;
          if (v12 < v87)
          {
            unint64_t v36 = v87;
            do
            {
              uint64_t v37 = *--v36;
              CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v37);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v36)
          {
            uint64_t v38 = *v12;
            *uint64_t v12 = *v36;
            uint64_t *v36 = v38;
            do
            {
              uint64_t v39 = v12[1];
              ++v12;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v33, v39));
            do
            {
              uint64_t v40 = *--v36;
              CFArrayRef result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v40);
            }
            while ((result & 1) != 0);
          }
          unsigned __int8 v41 = v12 - 1;
          BOOL v5 = v12 - 1 >= v10;
          BOOL v6 = v12 - 1 == v10;
          if (v12 - 1 != v10) {
            *uint64_t v10 = *v41;
          }
          a5 = 0;
          *unsigned __int8 v41 = v33;
        }
        uint64_t v19 = 0;
        uint64_t v20 = *v10;
        do
          char v21 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[++v19], v20);
        while ((v21 & 1) != 0);
        uint64_t v22 = &v10[v19];
        unsigned __int8 v23 = v13;
        if (v19 == 1)
        {
          unsigned __int8 v23 = v13;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v25 = *--v23;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v25, v20) & 1) == 0);
        }
        else
        {
          do
            uint64_t v24 = *--v23;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v24, v20));
        }
        if (v22 >= v23)
        {
          uint64_t v31 = v22 - 1;
        }
        else
        {
          uint64_t v26 = &v10[v19];
          float v27 = v23;
          do
          {
            uint64_t v28 = *v26;
            uint64_t *v26 = *v27;
            *float v27 = v28;
            do
            {
              uint64_t v29 = v26[1];
              ++v26;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v20) & 1) != 0);
            do
              uint64_t v30 = *--v27;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v30, v20));
          }
          while (v26 < v27);
          uint64_t v31 = v26 - 1;
        }
        if (v31 != v10) {
          *uint64_t v10 = *v31;
        }
        *uint64_t v31 = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        CFArrayRef result = sub_216276030(v10, v31, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v31 + 1;
      }
      BOOL v32 = sub_2162767DC(v10, v31, a3);
      uint64_t v12 = v31 + 1;
      CFArrayRef result = sub_2162767DC(v31 + 1, v87, a3);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v31;
    if (!v32) {
      continue;
    }
    return result;
  }
}

BOOL sub_2162767DC(void *a1, void *a2, uint64_t (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_216188F38(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_2161891E4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_216189298(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      sub_216188F38(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          unint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

char *sub_2162769A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E118))
  {
    sub_216276AC8();
    __cxa_atexit((void (*)(void *))sub_216276A34, &byte_26797E120, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E118);
  }
  return &byte_26797E120;
}

void sub_216276A1C(_Unwind_Exception *a1)
{
}

uint64_t sub_216276A34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  if (*(unsigned char *)(a1 + 24)) {
    fclose(*(FILE **)(a1 + 16));
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_216276AC8()
{
  byte_26797E120 = 0;
  Boolean keyExistsAndHasValidFormat = 0;
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"MecabraLogLevel", (CFStringRef)*MEMORY[0x263EFFE48], &keyExistsAndHasValidFormat);
  if (AppIntegerValue > 7 || AppIntegerValue < 0 || keyExistsAndHasValidFormat == 0) {
    int v3 = 0x7FFFFFFF;
  }
  else {
    int v3 = AppIntegerValue;
  }
  dword_26797E124 = v3;
  qword_26797E140 = 0;
  qword_26797E128 = 0;
  qword_26797E130 = 0;
  byte_26797E138 = 0;
  if (sub_2161E2FA8("DEBUG_PRINT_NODES")) {
    qword_26797E128 |= 2uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_WORD_GROUPS")) {
    qword_26797E128 |= 0x1000uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_SYLLABLE_LATTICE")) {
    qword_26797E128 |= 0x2000uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_SAMPLE_LATTICE")) {
    qword_26797E128 |= 0x2000000uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_CONNECTED_NODES")) {
    qword_26797E128 |= 4uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_HYPOTHESES")) {
    qword_26797E128 |= 0xCuLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_HYPOTHESIS_SETS")) {
    qword_26797E128 |= 0x10uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_SYLLABLE_HYPOTHESIS")) {
    qword_26797E128 |= 0x1000000uLL;
  }
  if (sub_2161E2FA8("DEBUG_HOMOPHONE_PHRASES")) {
    qword_26797E128 |= 0x40uLL;
  }
  if (sub_2161E2FA8("DEBUG_NGRAM_SCORE")) {
    qword_26797E128 |= 0x80uLL;
  }
  if (sub_2161E2FA8("DEBUG_NGRAM_QUANTIZATION")) {
    qword_26797E128 |= 0x100uLL;
  }
  if (sub_2161E2FA8("DEBUG_PINYIN_TEXT_CHECKING")) {
    qword_26797E128 |= 0x200uLL;
  }
  if (sub_2161E2FA8("MECABRA_LOG_TIMING")) {
    qword_26797E128 |= 0x20uLL;
  }
  if (sub_2161E2FA8("MECABRA_LOG_STATISTICS")) {
    qword_26797E128 |= 0x800uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_CHARACTER_LATTICE")) {
    qword_26797E128 |= 0x80000uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_BEST_BACKTRACE")) {
    qword_26797E128 |= 0x4000uLL;
  }
  if (sub_2161E2FA8("DEBUG_RERANKING")) {
    qword_26797E128 |= 0x8000uLL;
  }
  if (sub_2161E2FA8("DEBUG_LEARNING")) {
    qword_26797E128 |= 0x10000uLL;
  }
  if (sub_2161E2FA8("DEBUG_DYNAMIC_CANDIDATES")) {
    qword_26797E128 |= 0x20000uLL;
  }
  if (sub_2161E2FA8("DEBUG_ENGINE")) {
    qword_26797E128 |= 0x40000uLL;
  }
  if (sub_2161E2FA8("DEBUG_PREDICTION")) {
    qword_26797E128 |= 0x100000uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRINT_ADAPTATION")) {
    qword_26797E128 |= 0x200000uLL;
  }
  if (sub_2161E2FA8("DEBUG_PRUNING")) {
    qword_26797E128 |= 0x400000uLL;
  }
  uint64_t result = sub_2161E2FA8("DEBUG_LIVE_CONVERSION");
  if (result)
  {
    qword_26797E128 |= 0x800000uLL;
  }
  else if (!qword_26797E128)
  {
    goto LABEL_65;
  }
  byte_26797E120 = 1;
  uint64_t v7 = getenv("MECABRA_LOG_DESTINATION");
  if (v7 || (result = (uint64_t)sub_2162592CC((uint64_t)"MECABRA_LOG_DESTINATION", v5, v6), (uint64_t v7 = (char *)result) != 0))
  {
    uint64_t result = (uint64_t)fopen(v7, "a+");
    qword_26797E130 = result;
    if (!result)
    {
      uint64_t result = fprintf((FILE *)*MEMORY[0x263EF8348], "Cannot open specified log file %s.\nAll logging is turned off.\n", v7);
      byte_26797E120 = 0;
      return result;
    }
    byte_26797E138 = 1;
  }
  else
  {
    qword_26797E130 = *MEMORY[0x263EF8348];
  }
LABEL_65:
  if (byte_26797E120)
  {
    if (sub_2161E2FA8("MECABRA_LOG_BUFFERED")) {
      operator new();
    }
    operator new();
  }
  return result;
}

void sub_216276F5C(_Unwind_Exception *exception_object)
{
  uint64_t v2 = qword_26797E140;
  qword_26797E140 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216276FA0(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)result)
  {
    if ((*(void *)(result + 8) & a2) != 0) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t *))(**(void **)(result + 32) + 16))(*(void *)(result + 32), a3, &a9);
    }
  }
  return result;
}

uint64_t sub_216277010(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)result)
  {
    if ((*(void *)(result + 8) & a2) != 0) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t *))(**(void **)(result + 32) + 16))(*(void *)(result + 32), a3, &a9);
    }
  }
  return result;
}

void sub_21627707C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  vsprintf(cStr, a2, &a9);
  CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v9)
  {
    CFStringRef v10 = v9;
    CFLog();
    CFRelease(v10);
  }
}

uint64_t sub_216277118(uint64_t a1, const char *a2, va_list a3)
{
  return vfprintf(*(FILE **)(a1 + 8), a2, a3);
}

void sub_216277124()
{
}

uint64_t sub_216277138(uint64_t a1)
{
  return fflush(*(FILE **)(a1 + 8));
}

uint64_t sub_216277140(uint64_t a1, char *__format, va_list a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = vsnprintf(__str, 0x400uLL, __format, a3);
  BOOL v5 = (std::string *)(a1 + 16);
  if ((v4 & 0x80000000) != 0)
  {
    std::string::append(v5, "Log message exceeded the 1024-byte length limit.", 0x30uLL);
  }
  else
  {
    std::string::size_type v6 = strlen(__str);
    std::string::append(v5, __str, v6);
  }
  return v4;
}

uint64_t sub_2162771F4(uint64_t a1)
{
  uint64_t v2 = *(FILE **)(a1 + 8);
  int v3 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    int v3 = *(const char **)v3;
  }
  fputs(v3, v2);
  uint64_t result = fflush(*(FILE **)(a1 + 8));
  if (*(char *)(a1 + 39) < 0)
  {
    **(unsigned char **)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 39) = 0;
  }
  return result;
}

uint64_t sub_216277254(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD360;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_2162772A4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD360;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216277314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C6BECB8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_21627AD50((void *)(a1 + 32), 256);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_216273F00(&a9, 0) = 0u;
  *(void *)(a1 + 152) = a2;
  sub_216269B0C(a1 + 160, a3);
  return a1;
}

void sub_2162773C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v6 = *v4;
  *uint64_t v4 = 0;
  if (v6) {
    sub_21627ADF8((uint64_t)v4, v6);
  }
  sub_21618B4F0(v3);
  sub_21627ADA0(v2);
  sub_21627AB70((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216277404(uint64_t a1)
{
  CFArrayRef v1 = (void *)(a1 + 8);
  sub_21627ABC4(a1 + 8, *(uint64_t **)(a1 + 8));
  sub_216277448((uint64_t)(v1 + 3));
  v1[11] = v1[10];
  v1[14] = v1[13];
}

void sub_216277448(uint64_t a1)
{
  uint64_t v2 = *(void ***)a1;
  if (*(void *)a1 < *(void *)(a1 + 8))
  {
    do
    {
      uint64_t v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < *(void *)(a1 + 8));
    uint64_t v2 = *(void ***)a1;
  }
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
}

BOOL sub_216277498(void *a1, uint64_t a2, int a3)
{
  v51[19] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[11];
  uint64_t v5 = a1[12];
  uint64_t v3 = a1 + 11;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3);
  unint64_t v7 = v6 + 2;
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1[2] - a1[1];
  if (v6 + 2 >= v9 >> 3)
  {
    uint64_t v13 = (uint64_t)(a1 + 20);
    uint64_t v14 = *(__int16 **)(a2 + 8);
    if (v14 == *(__int16 **)(a2 + 16)) {
      __int16 v15 = 0;
    }
    else {
      __int16 v15 = *v14;
    }
    uint64_t v41 = v9;
    if (sub_216198D5C(v13, v15))
    {
      unint64_t v16 = v6 + 1;
      uint64_t v17 = *(__int16 **)(a2 + 8);
      if (v17 == *(__int16 **)(a2 + 16)) {
        __int16 v18 = 0;
      }
      else {
        __int16 v18 = *v17;
      }
      sub_2163337EC((uint64_t)v3, a2, v18);
      if (v5 == v4
        || *(_DWORD *)(*v3 + 8 * ((v5 - v4) >> 3) - 4) == 2 && *(_DWORD *)(*v3 + 8 * ((v5 - v4) >> 3) + 36) != 2)
      {
        uint64_t v19 = a1[17];
        a1[17] = 0;
        if (v19) {
          sub_21627ADF8((uint64_t)(a1 + 17), v19);
        }
      }
      sub_216277FF0(a1, a2, v6 + 1, 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3), 1);
      sub_216278678(a1, v6 + 1);
      uint64_t v20 = a1[2];
      unsigned __int8 v23 = *(void **)(v20 - 8);
      char v21 = (uint64_t *)(v20 - 8);
      uint64_t v22 = v23;
      if (*v23 == v23[1] && v22[3] == v22[4]
        || v5 != v4
        && (*(_DWORD *)(*v3 + 8 * ((v5 - v4) >> 3) - 4) != 2 || *(_DWORD *)(*v3 + 8 * ((v5 - v4) >> 3) + 36) == 2)
        && !v22[8]
        && *(void *)(*(void *)(*v8 + 0x6666666666666668 * ((v5 - v4) >> 3)) + 64))
      {
        sub_21627ABC4((uint64_t)v8, v21);
        sub_216277FF0(a1, a2, v6 + 1, 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3), 0);
        sub_216278678(a1, v6 + 1);
      }
      uint64_t v24 = sub_2162769A4();
      if (*v24 && (v24[11] & 2) != 0)
      {
        uint64_t v25 = sub_2162769A4();
        sub_216140140((uint64_t)&v47);
        if (v16 < v7)
        {
          sub_216129E78(&v48, (uint64_t)"ColumnIndex = ", 14);
          uint64_t v26 = (void *)std::ostream::operator<<();
          sub_216129E78(v26, (uint64_t)", sampleIndex = ", 16);
          float v27 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
          uint64_t v28 = std::locale::use_facet(&v44, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
          std::locale::~locale(&v44);
          std::ostream::put();
          std::ostream::flush();
          sub_21622A6EC(*(void **)(*v8 + 8 * v16), &v44);
          uint64_t v29 = (v46 & 0x80u) == 0 ? &v44 : (std::locale *)v44.__locale_;
          uint64_t v30 = (v46 & 0x80u) == 0 ? v46 : v45;
          sub_216129E78(&v48, (uint64_t)v29, v30);
          if ((char)v46 < 0) {
            operator delete(v44.__locale_);
          }
        }
        sub_216178BC0((uint64_t)v49, v42);
        uint64_t v47 = *MEMORY[0x263F8C2B8];
        uint64_t v31 = *(void *)(MEMORY[0x263F8C2B8] + 72);
        *(uint64_t *)((char *)&v47 + *(void *)(v47 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
        uint64_t v48 = v31;
        v49[0] = MEMORY[0x263F8C318] + 16;
        if (v50 < 0) {
          operator delete((void *)v49[8]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2166CA750](v51);
        if (v43 >= 0) {
          uint64_t v37 = v42;
        }
        else {
          uint64_t v37 = (void **)v42[0];
        }
        sub_216276FA0((uint64_t)v25, 0x2000000u, (uint64_t)v37, v32, v33, v34, v35, v36, v40);
        if (v43 < 0) {
          operator delete(v42[0]);
        }
      }
      uint64_t v38 = sub_2162769A4();
      uint64_t v9 = v41;
      if (*v38 && (v38[9] & 0x40) != 0)
      {
        sub_216278758((uint64_t)a1, ((uint64_t)(a1[2] - a1[1]) >> 3) - 1, 0x50uLL, 0);
        uint64_t v9 = v41;
      }
    }
    if (a3) {
      operator new();
    }
  }
  return v7 >= v9 >> 3;
}

void sub_216277F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (v32) {
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216277FF0(void *result, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  v38[4] = *MEMORY[0x263EF8340];
  if (!a3) {
    return result;
  }
  char v5 = a5;
  uint64_t v9 = result;
  uint64_t v10 = result[1];
  uint64_t v11 = result[2];
  if (v11 == v10) {
    operator new();
  }
  if (a3 == (v11 - v10) >> 3) {
    operator new();
  }
  memset(v34, 0, sizeof(v34));
  LODWORD(v35) = 1065353216;
  if (!a4)
  {
    BOOL v13 = 0;
LABEL_13:
    uint64_t v14 = result[11];
    uint64_t v15 = result[12] - v14;
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3);
    if (v15) {
      int v17 = *(unsigned __int16 *)(v14 + 34);
    }
    else {
      int v17 = 0;
    }
    if (v16 <= a4) {
      int v19 = 0;
    }
    else {
      int v19 = *(unsigned __int16 *)(v14 + 40 * a4 + 34);
    }
    BOOL v18 = v17 == v19;
    goto LABEL_21;
  }
  uint64_t v12 = result[11];
  BOOL v13 = *(_DWORD *)(v12 + 40 * a4 - 4) != 2
     || *(_DWORD *)(v12 + 40 * a4 + 36) == 2
     || *(void *)(*(void *)(result[1] + 8 * a3 - 8) + 64) == 0;
  if (a4 <= 2) {
    goto LABEL_13;
  }
  BOOL v18 = 0;
LABEL_21:
  v38[0] = &unk_26C6F6170;
  v38[1] = result;
  v38[3] = v38;
  float v20 = -2.0;
  if (!a5) {
    float v20 = -5.0;
  }
  float v21 = 0.8;
  if (a5)
  {
    unint64_t v22 = 2;
  }
  else
  {
    float v21 = 5.0;
    unint64_t v22 = 5;
  }
  sub_2162692D8(a2, v22, (uint64_t)v38, &__p, v21, v20);
  uint64_t v23 = v11 - 8;
  sub_21624F5E4(v38);
  if (!v13) {
    goto LABEL_28;
  }
  uint64_t v24 = v9[1];
  uint64_t v25 = *(void **)(v24 + 8 * (a3 - 1));
  uint64_t v26 = v25[9];
  float v27 = operator new(0x58uLL);
  *float v27 = &unk_26C6C7410;
  v27[1] = v9;
  v27[2] = a2;
  void v27[3] = v23;
  v27[4] = a3;
  v27[5] = a4;
  v27[6] = v26;
  *((unsigned char *)v27 + 56) = v5;
  v27[8] = v34;
  v27[9] = &__p;
  *((unsigned char *)v27 + 8sub_216273F00(&a9, 0) = v18;
  uint64_t v37 = v27;
  sub_21622A240(v25, 0, (uint64_t)v36, 0);
  sub_21622AC58(v36);
  uint64_t v28 = *(void **)(v24 + 8 * (a3 - 1));
  uint64_t v29 = operator new(0x48uLL);
  void *v29 = &unk_26C6F61E0;
  v29[1] = v9;
  v29[2] = a2;
  void v29[3] = v23;
  v29[4] = a3;
  v29[5] = a4;
  v29[6] = v26;
  v29[7] = v34;
  *((unsigned char *)v29 + 64) = v5;
  uint64_t v37 = v29;
  sub_21622A240(v28, 0, (uint64_t)v36, 0);
  sub_21622AC58(v36);
  if (**(void **)(v24 + 8 * (a3 - 1)) != *(void *)(*(void *)(v24 + 8 * (a3 - 1)) + 8))
  {
LABEL_28:
    uint64_t v30 = (float *)__p;
    uint64_t v31 = v33;
    while (v30 != (float *)v31)
    {
      (*(void (**)(void *, uint64_t, unint64_t, void, BOOL, float))(*v9 + 48))(v9, v23, a4, *(unsigned __int16 *)v30, v18, v30[1]);
      v30 += 2;
    }
  }
  if (!a4
    && (v5 & 1) == 0
    && **(void **)v23 == *(void *)(*(void *)v23 + 8)
    && *(void *)(*(void *)v23 + 24) == *(void *)(*(void *)v23 + 32))
  {
    sub_216278838(v9, a3);
  }
  if (__p)
  {
    uint64_t v33 = (unsigned __int16 *)__p;
    operator delete(__p);
  }
  return (void *)sub_216144C28((uint64_t)v34);
}

void sub_2162785FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_216144C28((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *sub_216278678(void *result, unint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = result[1];
  if (a2 <= (result[2] - v2) >> 3)
  {
    uint64_t v4 = v2 + 8 * a2;
    char v5 = *(void **)v4;
    if (**(void **)v4 != *(void *)(*(void *)v4 + 8))
    {
      unint64_t v6 = result;
      unint64_t v7 = operator new(0x20uLL);
      *unint64_t v7 = &unk_26C6C74C0;
      v7[1] = v6;
      v7[2] = a2;
      v7[3] = v4;
      v8[3] = v7;
      sub_21622A240(v5, 1, (uint64_t)v8, 0);
      return sub_21622AC58(v8);
    }
  }
  return result;
}

void sub_216278744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21622AC58((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216278758(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  v16[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = sub_2162769A4();
  sub_216276FA0((uint64_t)v8, 0x4000u, (uint64_t)"Nbest for column %lu\n", v9, v10, v11, v12, v13, a2);
  uint64_t v14 = operator new(0x20uLL);
  void *v14 = &unk_26C6C85F0;
  v14[1] = a1;
  *((unsigned char *)v14 + 16) = a4;
  v14[3] = a2;
  v16[3] = v14;
  sub_216278FB0(a1, a3, (uint64_t)v16, a4);
  return sub_21618FF18(v16);
}

void sub_216278824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21618FF18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216278838(void *a1, unint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *, void))(*a1 + 24))(a1, *(void *)(a1[1] + 8 * a2));
  if (v4)
  {
    sub_2162788B8((uint64_t)a1, a2, v4, 0, 0);
  }
}

void sub_2162788B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (a2 > (*(void *)(a1 + 16) - v5) >> 3) {
    return;
  }
  uint64_t v11 = *(void **)(v5 + 8 * a2);
  uint64_t v12 = v11[9];
  uint64_t v13 = *(void *)(a1 + 88);
  double v14 = *(double *)(v13 + 40 * v12 + 24);
  if (a5)
  {
    double v15 = *(double *)(a5 + 32);
    unint64_t v16 = v11[8];
    if (v16 < 0x50) {
      goto LABEL_26;
    }
    int v17 = v11 + 7;
    BOOL v18 = (void *)v11[7];
    if (v18)
    {
      do
      {
        int v19 = v18;
        BOOL v18 = (void *)v18[1];
      }
      while (v18);
    }
    else
    {
      do
      {
        int v19 = (void *)v17[2];
        BOOL v20 = *v19 == (void)v17;
        int v17 = v19;
      }
      while (v20);
    }
    if (*(double *)(v19[4] + 56) < v15)
    {
LABEL_26:
      float v21 = (double *)(v13 + 40 * *(void *)(*(void *)a5 + 16));
      long double v22 = hypot(*(double *)(v13 + 40 * v12) - *v21, *(double *)(v13 + 40 * v12 + 8) - v21[1]);
      double v23 = *(double *)(a5 + 16);
      double v24 = *(double *)(a5 + 24) + v14 - v21[3] - v22;
      long double v25 = v24 / (v22 + v23);
      double v26 = -(pow(v14 * 0.00666666667, 0.6) * fmin(v25 / 0.3, 1.0));
      if (a4) {
        double v27 = *(double *)(a4 + 48);
      }
      else {
        double v27 = 0.0;
      }
      double v29 = v27 + *(double *)(a3 + 24) * 0.8;
      unint64_t v31 = *(void *)(a3 + 64) + *(void *)(a4 + 72);
      unint64_t v32 = *(void *)(*(void *)(a1 + 112) + 8 * v12);
      double v33 = (double)(v32 - v31);
      if (v32 <= v31) {
        double v33 = -0.0;
      }
      double v34 = v15 + v26 + v29 - v33;
      if (v16 < 0x50) {
        goto LABEL_27;
      }
      uint64_t v37 = (void *)v11[7];
      uint64_t v36 = v11 + 7;
      uint64_t v35 = v37;
      if (v37)
      {
        do
        {
          uint64_t v38 = v35;
          uint64_t v35 = (void *)v35[1];
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v38 = (void *)v36[2];
          BOOL v20 = *v38 == (void)v36;
          uint64_t v36 = v38;
        }
        while (v20);
      }
      if (*(double *)(v38[4] + 56) < v34)
      {
LABEL_27:
        uint64_t v39 = *(void *)(a5 + 64);
LABEL_38:
        unsigned __int8 v46 = sub_216278CD0((char **)(a1 + 32));
        *(void *)unsigned __int8 v46 = a3;
        *((void *)v46 + 1) = a4;
        *((double *)v46 + 2) = v23;
        *((double *)v46 + 3) = v24;
        *((double *)v46 + 4) = v15;
        *((double *)v46 + 5) = v26;
        *((double *)v46 + 6) = v29;
        *((double *)v46 + 7) = v34;
        *((void *)v46 + 8) = v39;
        *((void *)v46 + 9) = v31;
        uint64_t v47 = *(void *)(v5 + 8 * a2);
        sub_21622A324(v47, (uint64_t)v46);
        return;
      }
    }
    return;
  }
  if (a2 && a4)
  {
    double v23 = (*(double (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a3, a4) + 0.0;
    double v24 = vabdd_f64(v14, v23);
    double v15 = (*(double (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)a1 + 64))(a1, a3, a4, 0.3);
    double v26 = -(pow(*(double *)(*(void *)(a1 + 88) + 40 * v12 + 24) * 0.00666666667, 0.6) * fmin(v24 / v23 / 0.3, 1.0));
    double v28 = *(double *)(a3 + 24);
    uint64_t v11 = *(void **)(v5 + 8 * a2);
LABEL_17:
    double v29 = *(double *)(a4 + 48) + v28 * 0.8;
    uint64_t v30 = *(void *)(a4 + 72);
    goto LABEL_29;
  }
  double v28 = *(double *)(a3 + 24);
  double v26 = 0.0;
  if (a4)
  {
    double v23 = 0.0;
    double v24 = 0.0;
    double v15 = 0.0;
    goto LABEL_17;
  }
  uint64_t v30 = 0;
  double v15 = 0.0;
  double v29 = v28 * 0.8 + 0.0;
  double v24 = 0.0;
  double v23 = 0.0;
LABEL_29:
  unint64_t v40 = *(void *)(*(void *)(a1 + 112) + 8 * v12);
  unint64_t v31 = *(void *)(a3 + 64) + v30;
  double v41 = (double)(v40 - v31);
  if (v40 <= v31) {
    double v41 = -0.0;
  }
  double v34 = v29 + v15 + v26 - v41;
  if (v11[8] < 0x50uLL) {
    goto LABEL_37;
  }
  std::locale v44 = (void *)v11[7];
  char v43 = v11 + 7;
  uint64_t v42 = v44;
  if (v44)
  {
    do
    {
      uint64_t v45 = v42;
      uint64_t v42 = (void *)v42[1];
    }
    while (v42);
  }
  else
  {
    do
    {
      uint64_t v45 = (void *)v43[2];
      BOOL v20 = *v45 == (void)v43;
      char v43 = v45;
    }
    while (v20);
  }
  if (*(double *)(v45[4] + 56) < v34)
  {
LABEL_37:
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a3, a4);
    goto LABEL_38;
  }
}

char *sub_216278CD0(char **a1)
{
  uint64_t v2 = a1[3];
  if (v2)
  {
    uint64_t v4 = a1[4];
    uint64_t v3 = a1[5];
    size_t v5 = v4 - v2;
    if ((char *)(0xCCCCCCCCCCCCCCCDLL * ((v4 - v2) >> 4)) != v3) {
      goto LABEL_22;
    }
  }
  else
  {
    size_t v5 = 80 * (void)a1[5];
  }
  uint64_t v4 = (char *)malloc_type_malloc(v5, 0x106004000061B68uLL);
  unint64_t v6 = (unint64_t)a1[2];
  unint64_t v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_2160FFAA8((uint64_t)(a1 + 2), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    double v14 = &v13[8 * v9];
    double v15 = &v13[8 * v12];
    *(void *)double v14 = v4;
    uint64_t v8 = v14 + 8;
    int v17 = *a1;
    unint64_t v16 = a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      unint64_t v16 = *a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(void *)unint64_t v7 = v4;
    uint64_t v8 = v7 + 8;
  }
  a1[1] = v8;
  a1[3] = v4;
LABEL_22:
  ++*((_DWORD *)a1 + 12);
  a1[4] = v4 + 80;
  return v4;
}

void sub_216278E14(void *a1, uint64_t a2, unint64_t a3)
{
  if (a3 == 1) {
    return;
  }
  unint64_t v6 = (void **)(a1[1] + 8 * a3);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 32))();
  uint64_t v8 = (*(uint64_t (**)(void *, void **, uint64_t, uint64_t))(*a1 + 88))(a1, v6, a2, v7);
  if (!v8)
  {
    uint64_t v15 = sub_216229F40(*v6, a2);
    if (!v7) {
      return;
    }
    uint64_t v16 = v15;
    int v17 = *(uint64_t **)(*(void *)a2 + 32);
    uint64_t v18 = *(uint64_t **)(*(void *)a2 + 40);
    while (v17 != v18)
    {
      uint64_t v19 = *v17++;
      sub_2162788B8((uint64_t)a1, a3, v16, *(void *)(v19 + 8), v19);
    }
    BOOL v20 = (unsigned char *)(v16 + 56);
    goto LABEL_22;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)a2;
  unint64_t v11 = *(void *)(v10 + 64);
  unint64_t v12 = *(void *)(v8 + 64);
  if (v11 <= v12) {
    uint64_t v13 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v10 + 64);
  }
  double v14 = *(double *)(v10 + 24);
  if (v14 > *(double *)(v8 + 24))
  {
    *(void *)(v8 + 16) = *(void *)(v10 + 16);
    *(double *)(v8 + 24) = v14;
LABEL_13:
    *(void *)(v8 + 64) = v13;
    goto LABEL_14;
  }
  if (v12 < v11) {
    goto LABEL_13;
  }
LABEL_14:
  if (v7)
  {
    BOOL v20 = (unsigned char *)(v8 + 56);
    float v21 = *(uint64_t **)(v10 + 32);
    if (!*(unsigned char *)(v8 + 56))
    {
      long double v22 = *(uint64_t **)(v10 + 40);
      if (v21 != v22)
      {
        do
        {
          uint64_t v23 = *v21++;
          sub_2162788B8((uint64_t)a1, a3, v9, *(void *)(v23 + 8), v23);
        }
        while (v21 != v22);
        float v21 = *(uint64_t **)(v10 + 32);
      }
    }
    if (v21 != *(uint64_t **)(v10 + 40)) {
LABEL_22:
    }
      *BOOL v20 = 1;
  }
}

void sub_216278FB0(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    unint64_t v6 = (uint64_t *)(a1 + 136);
  }
  else {
    unint64_t v6 = (uint64_t *)(*(void *)(a1 + 16) - 8);
  }
  uint64_t v7 = *v6;
  uint64_t v8 = *(void **)(v7 + 48);
  uint64_t v9 = (void *)(v7 + 56);
  if (v8 != (void *)(v7 + 56))
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v8[4];
      unint64_t v12 = sub_2161CC0A0((void *)v11);
      if (v12)
      {
        uint64_t v13 = v12;
        sub_21618E37C(a3, v11, (uint64_t)v12, *(double *)(v11 + 56));
        CFRelease(v13);
        if (++v10 >= a2) {
          break;
        }
      }
      double v14 = (void *)v8[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          double v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v8[2];
          BOOL v16 = *v15 == (void)v8;
          uint64_t v8 = v15;
        }
        while (!v16);
      }
      uint64_t v8 = v15;
    }
    while (v15 != v9);
  }
}

void sub_21627909C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162790B4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  v13[4] = *MEMORY[0x263EF8340];
  sub_216269B0C((uint64_t)v13, a6);
  sub_216277314(a1, a5, (uint64_t)v13);
  sub_21624F5E4(v13);
  *(void *)a1 = &unk_26C6BFE80;
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 20sub_216273F00(&a9, 0) = a3;
  if (a3) {
    uint64_t v11 = *(void *)(a3 + 32);
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)(a1 + 208) = v11;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 24sub_216273F00(&a9, 0) = a4;
  return a1;
}

void sub_21627918C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21624F5E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162791A8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BECB8;
  sub_21624F5E4((void *)(a1 + 160));
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    sub_21627ADF8(a1 + 136, v2);
  }
  uint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 12sub_216273F00(&a9, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 88);
  if (v4)
  {
    *(void *)(a1 + 96) = v4;
    operator delete(v4);
  }
  sub_21627ADA0(a1 + 32);
  unint64_t v6 = (void **)(a1 + 8);
  sub_21627AB70(&v6);
  return a1;
}

void sub_216279240(void *a1)
{
  uint64_t v2 = a1 + 1;
  CFArrayRef v1 = (uint64_t *)a1[1];
  a1[28] = a1[27];
  sub_21627ABC4((uint64_t)(a1 + 1), v1);
  sub_216277448((uint64_t)(v2 + 3));
  v2[11] = v2[10];
  v2[14] = v2[13];
}

void sub_21627928C(void *a1, void *a2)
{
  (*(void (**)(void *))(*a1 + 16))(a1);
  uint64_t v4 = a2[1] - *a2;
  uint64_t v5 = v4 >> 1;
  unint64_t v6 = (v4 >> 1) + 1;
  unint64_t v7 = a1[26];
  BOOL v8 = v6 >= v7;
  unint64_t v9 = v6 - v7;
  if (v8) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  if (v10 < v4 >> 1)
  {
    uint64_t v11 = (void **)(a1 + 27);
    unint64_t v12 = a1 + 29;
    uint64_t v13 = (int *)a1[28];
    do
    {
      int v14 = *(unsigned __int16 *)(*a2 + 2 * v10) + 1000;
      if ((unint64_t)v13 >= *v12)
      {
        BOOL v16 = (int *)*v11;
        uint64_t v17 = ((char *)v13 - (unsigned char *)*v11) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v19 = *v12 - (void)v16;
        if (v19 >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          float v21 = (char *)sub_2161129B4((uint64_t)(a1 + 29), v20);
          BOOL v16 = (int *)a1[27];
          uint64_t v13 = (int *)a1[28];
        }
        else
        {
          float v21 = 0;
        }
        long double v22 = (int *)&v21[4 * v17];
        int *v22 = v14;
        uint64_t v15 = v22 + 1;
        while (v13 != v16)
        {
          int v23 = *--v13;
          *--long double v22 = v23;
        }
        a1[27] = v22;
        a1[28] = v15;
        a1[29] = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *uint64_t v13 = v14;
        uint64_t v15 = v13 + 1;
      }
      a1[28] = v15;
      ++v10;
      uint64_t v13 = v15;
    }
    while (v10 != v5);
  }
}

unsigned __int16 *sub_2162793EC(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = *((_DWORD *)result + 60);
  if (v5 == 1)
  {
    char v6 = 49;
    switch(a5)
    {
      case 711:
        char v6 = 51;
        break;
      case 712:
        goto LABEL_17;
      case 713:
        break;
      case 714:
        char v6 = 50;
        break;
      case 715:
        char v6 = 52;
        break;
      default:
        if (a5 == 729) {
          char v6 = 53;
        }
        else {
LABEL_17:
        }
          char v6 = a5 + 49;
        break;
    }
  }
  else if (v5)
  {
    char v6 = 0;
  }
  else
  {
    char v6 = a5;
  }
  unint64_t v7 = *(unsigned __int16 **)(*(void *)a3 + 72);
  if (v7)
  {
    uint64_t result = sub_21632279C(*((void *)result + 24), v7, v6);
    if (result)
    {
      if (v5
        || v6 != 118
        || (v8 = &(&off_26426EF10)[2 * result[1]], (unint64_t v9 = v8[1]) != 0) && (*v8)[(void)v9 - 1] == 118)
      {
        operator new();
      }
    }
  }
  return result;
}

void sub_2162795DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_21627962C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(a1 + 240);
  if (v4 == 1)
  {
    char v5 = 49;
    switch(a4)
    {
      case 711:
        char v5 = 51;
        break;
      case 712:
        goto LABEL_13;
      case 713:
        break;
      case 714:
        char v5 = 50;
        break;
      case 715:
        char v5 = 52;
        break;
      default:
        if (a4 == 729) {
          char v5 = 53;
        }
        else {
LABEL_13:
        }
          char v5 = a4 + 49;
        break;
    }
  }
  else if (v4)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = a4;
  }
  uint64_t result = *(unsigned __int16 **)(a1 + 192);
  unint64_t v7 = **(unsigned __int16 ***)result;
  if (v7)
  {
    uint64_t result = sub_21632279C((uint64_t)result, v7, v5);
    if (result) {
      operator new();
    }
  }
  return result;
}

void sub_2162797C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216279818()
{
}

void sub_2162798F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216279930()
{
}

void sub_216279A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_216279A4C(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v5 = *(void *)(a2 + 72);
  if (v5) {
    uint64_t v5 = *(unsigned __int16 *)(v5 + 2);
  }
  int v6 = *(_DWORD *)(a1 + 240);
  if (v6 == 2)
  {
    char v10 = 0;
    uint64_t v11 = &off_2642710F0;
LABEL_8:
    BOOL v8 = &v11[2 * v5];
    unint64_t v9 = (unint64_t)v8[1];
    char v7 = 1;
    goto LABEL_9;
  }
  if (v6 != 1)
  {
    char v10 = 0;
    uint64_t v11 = &off_26426EF10;
    goto LABEL_8;
  }
  char v7 = 0;
  BOOL v8 = (char **)(&off_264274F30 + 2 * v5);
  unint64_t v9 = 2 * (void)v8[1];
  char v10 = 1;
LABEL_9:
  unint64_t v12 = *v8;
  v28[0] = (uint64_t)*v8;
  v28[1] = v9;
  char v29 = v10;
  double v13 = sub_2161894AC(v28, *(unsigned char **)(a1 + 152));
  if (!a3 || ((*(uint64_t (**)(void))(**(void **)a3 + 24))() & 1) != 0) {
    return v13;
  }
  uint64_t v14 = *(void *)(*(void *)a3 + 72);
  if (v14) {
    uint64_t v14 = *(unsigned __int16 *)(v14 + 2);
  }
  int v15 = *(_DWORD *)(a1 + 240);
  if (v15 == 2)
  {
    char v19 = 0;
    unint64_t v20 = &off_2642710F0;
LABEL_18:
    uint64_t v17 = &v20[2 * v14];
    unint64_t v18 = (unint64_t)v17[1];
    char v16 = 1;
    goto LABEL_19;
  }
  if (v15 != 1)
  {
    char v19 = 0;
    unint64_t v20 = &off_26426EF10;
    goto LABEL_18;
  }
  char v16 = 0;
  uint64_t v17 = (char **)(&off_264274F30 + 2 * v14);
  unint64_t v18 = 2 * (void)v17[1];
  char v19 = 1;
LABEL_19:
  unint64_t v21 = v9 >> v10;
  if (v9 >> v10)
  {
    if (v7) {
      LOWORD(v21) = *v12;
    }
    else {
      LOWORD(v21) = *(_WORD *)v12;
    }
  }
  double v22 = v13 + a3[2];
  unint64_t v23 = v18 >> v19;
  if (v23)
  {
    double v24 = *v17;
    uint64_t v25 = (v23 - 1) << v19;
    if (v16) {
      unsigned __int16 v26 = v24[v25];
    }
    else {
      unsigned __int16 v26 = *(_WORD *)&v24[v25];
    }
  }
  else
  {
    unsigned __int16 v26 = 0;
  }
  return v22 + sub_216189468((unsigned __int16)v21, v26, *(unsigned char **)(a1 + 152));
}

double sub_216279C14(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5 = *(double *)(a3 + 32);
  sub_216288AB4(a2, *(void *)(a1 + 200), (void *)a3, (int **)(a1 + 216));
  return v5 + v6 + a4;
}

uint64_t sub_216279C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *(void *)(a2 + 72);
    if (v3) {
      uint64_t v3 = *(unsigned __int16 *)(v3 + 2);
    }
    return v3 + 542 * *(void *)(a3 + 64);
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 72);
    if (v5) {
      return *(unsigned __int16 *)(v5 + 2);
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_216279C90(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[2];
  if (v2 > 1) {
    return 1;
  }
  if (v2) {
    return (*(uint64_t (**)(void))(***(void ***)(*a2 + 32) + 32))();
  }
  return 0;
}

uint64_t sub_216279CE0(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  v11[0] = &unk_26C6C87A8;
  v11[1] = a3;
  void v11[3] = v11;
  uint64_t v5 = v4 + 24;
  uint64_t v6 = 24;
  if (a4)
  {
    uint64_t v6 = 0;
    uint64_t v5 = v4;
  }
  char v7 = *(uint64_t **)(v4 + v6);
  BOOL v8 = *(uint64_t **)(v5 + 8);
  while (1)
  {
    if (v7 == v8)
    {
      uint64_t v9 = 0;
      goto LABEL_9;
    }
    if (sub_21622A698((uint64_t)v11, *v7)) {
      break;
    }
    ++v7;
  }
  uint64_t v9 = *v7;
LABEL_9:
  sub_21627BE2C(v11);
  return v9;
}

void sub_216279DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21627BE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216279DC0(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 240) != 1) {
    return 0;
  }
  uint64_t v2 = 0;
  while ((unsigned __int16)word_216381F32[v2] != a2)
  {
    if (++v2 == 5)
    {
      uint64_t v3 = 0;
      goto LABEL_8;
    }
  }
  uint64_t v3 = &word_216381F32[v2];
LABEL_8:
  if (v3) {
    BOOL v5 = (char *)v3 - (char *)word_216381F32 == -2;
  }
  else {
    BOOL v5 = 1;
  }
  return !v5;
}

uint64_t sub_216279E18(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  v13[4] = *MEMORY[0x263EF8340];
  sub_216269B0C((uint64_t)v13, a4);
  sub_216277314(a1, a3, (uint64_t)v13);
  sub_21624F5E4(v13);
  *(void *)a1 = &unk_26C6BFA20;
  CFLocaleRef v7 = CFLocaleCreate(0, a2);
  int v8 = sub_2161E2874(v7);
  if (v7) {
    CFRelease(v7);
  }
  *(void *)(a1 + 20sub_216273F00(&a9, 0) = 0;
  *(_DWORD *)(a1 + 192) = v8;
  *(void *)(a1 + 208) = 0;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F51318], a2);
  char v10 = (const void *)LXLexiconCreate();
  sub_2161FBBAC((const void **)(a1 + 200), v10);
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  sub_2161A108C((const void **)(a1 + 208), RootCursor);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return a1;
}

void sub_216279F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21627A010(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (!LXCursorHasEntries()) {
      operator new();
    }
    return LXCursorEnumerateEntries();
  }
  return result;
}

void sub_21627A158(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 72);
  *(void *)(v1 - 72) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21627A1B4()
{
}

void sub_21627A268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21627A2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const void *)LXCursorCreateByAdvancingWithUTF16();
  sub_21627A010(a2, (uint64_t)v3);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_21627A384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_21627A39C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const void *)LXCursorCreateByAdvancingWithUTF16();
  sub_21627A010(a2, (uint64_t)v3);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_21627A434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_21627A44C()
{
}

void sub_21627A508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21627A564()
{
}

void sub_21627A620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21627A67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  sub_21627A2C4(a1, a2);
  if ((a6 & 1) == 0 && *(_DWORD *)(a1 + 192) == 6 && sub_216208D94(a5))
  {
    sub_21627A2C4(a1, a2);
  }
}

void sub_21627A72C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  sub_21627A39C(a1, a2);
  if ((a5 & 1) == 0 && *(_DWORD *)(a1 + 192) == 6 && sub_216208D94(a4))
  {
    sub_21627A39C(a1, a2);
  }
}

double sub_21627A7D4(uint64_t a1, uint64_t a2, double *a3)
{
  CFStringRef v5 = *(const __CFString **)(a2 + 112);
  if (!v5)
  {
    LODWORD(v15) = 0;
    double v8 = 0.0;
    goto LABEL_14;
  }
  CFLocaleRef v7 = *(unsigned char **)(a1 + 152);
  double v8 = 0.0;
  if (CFStringGetLength(*(CFStringRef *)(a2 + 112)))
  {
    CFIndex Length = CFStringGetLength(v5);
    CFIndex v10 = Length - 2;
    if (Length >= 2)
    {
      CFIndex v11 = 0;
      do
      {
        int CharacterAtIndex = CFStringGetCharacterAtIndex(v5, v11++);
        int v13 = CFStringGetCharacterAtIndex(v5, v11);
        double v14 = 0.0;
        if (v7 && *v7) {
          double v14 = sub_2161E6DD4((uint64_t)v7, CharacterAtIndex, v13);
        }
        double v8 = v8 + v14;
      }
      while (v11 - 1 != v10);
    }
  }
  CFStringRef v15 = *(const __CFString **)(a2 + 112);
  if (!v15)
  {
LABEL_14:
    if (!a3) {
      return v8;
    }
    goto LABEL_15;
  }
  if (CFStringGetLength(v15))
  {
    LODWORD(v15) = CFStringGetCharacterAtIndex(v15, 0);
    if (!a3) {
      return v8;
    }
  }
  else
  {
    LODWORD(v15) = 0;
    if (!a3) {
      return v8;
    }
  }
LABEL_15:
  if (((*(uint64_t (**)(void))(**(void **)a3 + 24))() & 1) == 0)
  {
    double v16 = a3[2];
    CFStringRef v17 = *(const __CFString **)(*(void *)a3 + 112);
    if (v17 && CFStringGetLength(v17))
    {
      CFIndex v18 = CFStringGetLength(v17);
      int v19 = CFStringGetCharacterAtIndex(v17, v18 - 1);
    }
    else
    {
      int v19 = 0;
    }
    double v20 = v8 + v16;
    unint64_t v21 = *(unsigned char **)(a1 + 152);
    double v22 = 0.0;
    if (v21 && *v21) {
      double v22 = sub_2161E6DD4((uint64_t)v21, (int)v15, v19);
    }
    return v20 + v22;
  }
  return v8;
}

double sub_21627A970(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(double *)(a4 + 32) + *(double *)(a3 + 96) + a1;
}

uint64_t sub_21627A984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v3 = *(void *)(a3 + 64);
  }
  else {
    uint64_t v3 = 0;
  }
  return *(void *)(a2 + 88) + v3;
}

uint64_t sub_21627A9A0(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[2];
  if (v2 > 1) {
    return 1;
  }
  if (v2 == 1) {
    return (*(uint64_t (**)(void))(***(void ***)(*a2 + 32) + 32))();
  }
  return 0;
}

uint64_t sub_21627A9F0(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  v11[0] = &unk_26C6C8750;
  v11[1] = a3;
  void v11[3] = v11;
  uint64_t v5 = v4 + 24;
  uint64_t v6 = 24;
  if (a4)
  {
    uint64_t v6 = 0;
    uint64_t v5 = v4;
  }
  CFLocaleRef v7 = *(uint64_t **)(v4 + v6);
  double v8 = *(uint64_t **)(v5 + 8);
  while (1)
  {
    if (v7 == v8)
    {
      uint64_t v9 = 0;
      goto LABEL_9;
    }
    if (sub_21622A698((uint64_t)v11, *v7)) {
      break;
    }
    ++v7;
  }
  uint64_t v9 = *v7;
LABEL_9:
  sub_21627BE2C(v11);
  return v9;
}

void sub_21627AABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21627BE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_21627AAD0(uint64_t a1, __int16 a2)
{
  return (a2 & 0xFFFC) == 0xE48 && *(_DWORD *)(a1 + 192) == 6;
}

uint64_t sub_21627AAF0()
{
  return 0;
}

void sub_21627AAFC(void *a1)
{
  sub_21627AC84(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21627AB38(uint64_t a1)
{
  sub_21627ACE4(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21627AB70(void ***a1)
{
  unint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    sub_21627ABC4((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_21627ABC4(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(uint64_t **)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      if (v6) {
        uint64_t result = sub_21627ADF8((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_21627AC28(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      sub_21627ADF8(i - 8, v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21627AC84(void *a1)
{
  *a1 = &unk_26C6BFE80;
  unint64_t v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }

  return sub_2162791A8((uint64_t)a1);
}

uint64_t sub_21627ACE4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BFA20;
  unint64_t v2 = (const void **)(a1 + 200);
  sub_2161A108C((const void **)(a1 + 208), 0);
  sub_2161FBBAC(v2, 0);

  return sub_2162791A8(a1);
}

void *sub_21627AD50(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[5] = a2;
  sub_216277448((uint64_t)a1);
  return a1;
}

void sub_21627AD84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21627ADA0(uint64_t a1)
{
  unint64_t v2 = *(void ***)a1;
  if (*(void *)a1 < *(void *)(a1 + 8))
  {
    do
    {
      uint64_t v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < *(void *)(a1 + 8));
    unint64_t v2 = *(void ***)a1;
  }
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_21627ADF8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_21612A250(a2 + 48, *(void **)(a2 + 56));
    uint64_t v4 = (void **)(a2 + 24);
    sub_21627AE68(&v4);
    uint64_t v4 = (void **)a2;
    sub_21627AE68(&v4);
    return MEMORY[0x2166CA800](a2, 0x1020C409D1DDB13);
  }
  return result;
}

void sub_21627AE68(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_21627AEBC(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_21627AEBC(void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_21627AF2C()
{
}

void *sub_21627AF40(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6F6170;
  result[1] = v3;
  return result;
}

uint64_t sub_21627AF88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F6170;
  a2[1] = v2;
  return result;
}

uint64_t sub_21627AFB4(uint64_t a1, unsigned __int16 *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), *a2);
}

uint64_t sub_21627AFE0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC6B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21627B020()
{
  return &unk_26C6BC6B0;
}

void sub_21627B030()
{
}

__n128 sub_21627B044(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_26C6C7410;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4sub_2161A108C(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21627B0B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C7410;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 4sub_2161A108C(&a9, 0) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void *sub_21627B100(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 8);
  unint64_t v16 = *(void *)(*(void *)a2 + 16);
  __n128 result = sub_21619C5BC(*(void **)(a1 + 64), &v16);
  if (result)
  {
    if (!*((unsigned char *)result + 24)) {
      return result;
    }
    goto LABEL_12;
  }
  if (v16 == *(void *)(a1 + 48))
  {
    BOOL v6 = 1;
  }
  else
  {
    uint64_t v7 = v4[11];
    double v8 = (double *)(v7 + 40 * v16);
    uint64_t v9 = (double *)(v7 + 40 * *(void *)(a1 + 40));
    double v10 = hypot(*v9 - *v8, v9[1] - v8[1]);
    double v11 = v9[3] - v8[3];
    BOOL v6 = v11 - v10 <= 140.0 && (v11 - v10 <= 70.0 || v11 <= v10 * 2.2);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  CFStringRef v17 = &v16;
  __n128 result = sub_21627B2C4(v12, &v16, (uint64_t)&unk_21636EABA, &v17);
  *((unsigned char *)result + 24) = v6;
  if (v6)
  {
LABEL_12:
    int v13 = *(float ***)(a1 + 72);
    double v14 = *v13;
    CFStringRef v15 = (unsigned __int16 *)v13[1];
    while (v14 != (float *)v15)
    {
      __n128 result = (void *)(*(uint64_t (**)(void *, void, uint64_t, void, void, void, float))(*v4 + 40))(v4, *(void *)(a1 + 24), a2, *(void *)(a1 + 40), *(unsigned __int16 *)v14, *(unsigned __int8 *)(a1 + 80), v14[1]);
      v14 += 2;
    }
  }
  return result;
}

uint64_t sub_21627B278(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC6C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21627B2B8()
{
  return &unk_26C6BC6C0;
}

void *sub_21627B2C4(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    double v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      double v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          double v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  double v11 = operator new(0x20uLL);
  *double v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((unsigned char *)v11 + 24) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_2161297B4(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  double v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *double v11 = *v20;
LABEL_38:
    *double v20 = v11;
    goto LABEL_39;
  }
  *double v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    double v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_21627B4D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21627B4EC()
{
}

__n128 sub_21627B500(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_26C6F61E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4sub_2161A108C(&a9, 0) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_21627B564(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F61E0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 4sub_2161A108C(&a9, 0) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21627B5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = *(void *)(*(void *)a2 + 16);
  unint64_t v8 = *(void *)(v6 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = *(void *)(*(void *)a2 + 16);
      if (v8 <= v7) {
        unint64_t v2 = v7 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
    double v10 = *(void ***)(*(void *)v6 + 8 * v2);
    if (v10)
    {
      double v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          double v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  double v11 = operator new(0x20uLL);
  *double v11 = 0;
  v11[1] = v7;
  v11[2] = v7;
  *((unsigned char *)v11 + 24) = 0;
  float v13 = (float)(unint64_t)(*(void *)(v6 + 24) + 1);
  float v14 = *(float *)(v6 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_2161297B4(v6, v18);
    unint64_t v8 = *(void *)(v6 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)v6;
  double v20 = *(void **)(*(void *)v6 + 8 * v2);
  if (v20)
  {
    *double v11 = *v20;
LABEL_38:
    *double v20 = v11;
    goto LABEL_39;
  }
  *double v11 = *(void *)(v6 + 16);
  *(void *)(v6 + 16) = v11;
  *(void *)(v19 + 8 * v2) = v6 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    double v20 = (void *)(*(void *)v6 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(v6 + 24);
LABEL_40:
  if (*((unsigned char *)v11 + 24)) {
    BOOL v22 = 1;
  }
  else {
    BOOL v22 = *(unsigned char *)(a1 + 64) == 0;
  }
  if (v22)
  {
    unint64_t v23 = *(void *)(a1 + 32);
    sub_216278E14(v5, a2, v23);
  }
}

void sub_21627B800(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21627B814(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6240)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21627B854()
{
  return &unk_26C6F6240;
}

void sub_21627B864()
{
}

__n128 sub_21627B878(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C6C7468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21627B8C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C7468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21627B8F4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_21627B900(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC6D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21627B940()
{
  return &unk_26C6BC6D0;
}

void sub_21627B950()
{
}

__n128 sub_21627B964(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26C6C74C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21627B9B8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C74C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21627B9F0(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(*a2 + 56))
  {
    uint64_t v3 = *(void *)(a1 + 16) - *(void *)(*a2 + 8);
    if (v3 >= 0)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 8 * v3);
      uint64_t v6 = *(void **)(v5 + 48);
      unint64_t v7 = (void *)(v5 + 56);
      if (v6 != (void *)(v5 + 56))
      {
        do
        {
          sub_2162788B8(v4, *(void *)(a1 + 16), *a2, v6[4], 0);
          uint8x8_t v9 = (void *)v6[1];
          if (v9)
          {
            do
            {
              double v10 = v9;
              uint8x8_t v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              double v10 = (void *)v6[2];
              BOOL v11 = *v10 == (void)v6;
              uint64_t v6 = v10;
            }
            while (!v11);
          }
          uint64_t v6 = v10;
        }
        while (v10 != v7);
      }
    }
  }
}

uint64_t sub_21627BAB0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC6E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21627BAF0()
{
  return &unk_26C6BC6E0;
}

void sub_21627BB00()
{
}

__n128 sub_21627BB14(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26C6C85F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21627BB68(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C85F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21627BBA0(uint64_t a1, uint64_t a2, const __CFString **a3)
{
  CFStringRef v3 = *a3;
  uint64_t v4 = sub_2162769A4();
  sub_2161E2FFC(v3, &v12);
  uint64_t v5 = v12;
  uint64_t result = sub_216276FA0((uint64_t)v4, 0x4000u, (uint64_t)"%s(%.2f, %.2f, %.2f, %.2f, %.2f, %ld/%ld, %.2f, %.2f)\n", v6, v7, v8, v9, v10, v12);
  if (v5)
  {
    JUMPOUT(0x2166CA7C0);
  }
  return result;
}

void sub_21627BCA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21627BCCC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21627BD0C()
{
  return &unk_26C6BCA00;
}

void sub_21627BD1C()
{
}

void *sub_21627BD30(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C87A8;
  result[1] = v3;
  return result;
}

uint64_t sub_21627BD78(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C87A8;
  a2[1] = v2;
  return result;
}

BOOL sub_21627BDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a1 + 8);
  return *(_DWORD *)(*(void *)a2 + 80) == *(_DWORD *)(v2 + 80)
      && *(void *)(*(void *)a2 + 8) == *(void *)(v2 + 8) + 1;
}

uint64_t sub_21627BDE0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21627BE20()
{
  return &unk_26C6BCA50;
}

void *sub_21627BE2C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21627BEB4()
{
}

void *sub_21627BEC8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C8750;
  result[1] = v3;
  return result;
}

uint64_t sub_21627BF10(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C8750;
  a2[1] = v2;
  return result;
}

BOOL sub_21627BF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a1 + 8);
  return *(void *)(*(void *)a2 + 88) == *(void *)(v2 + 88)
      && *(void *)(*(void *)a2 + 8) == *(void *)(v2 + 8) + 1;
}

uint64_t sub_21627BF78(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21627BFB8()
{
  return &unk_26C6BCA40;
}

uint64_t sub_21627BFC4(uint64_t a1, char *a2, unint64_t a3, void *a4, unint64_t a5, char a6, int a7, int a8, float a9, int a10, int a11, char a12)
{
  *(void *)a1 = &unk_26C6BE7D0;
  unint64_t v21 = (void *)sub_2162A7544(a1, (uint64_t *)&off_26C6BCE20);
  void *v21 = off_26C6C0288;
  void v21[3] = &unk_26C6C04B8;
  BOOL v22 = (unsigned __int16 *)(v21 + 4);
  if (a3) {
    sub_21617FAAC(v21 + 4, a2, a3);
  }
  else {
    sub_216184F68((unsigned char *)v21 + 32, byte_2163CA662);
  }
  *(void *)(a1 + 56) = CFStringCreateWithCharacters(0, (const UniChar *)a2, a3);
  if (a5) {
    sub_21617FAAC((void *)(a1 + 64), a4, a5);
  }
  else {
    sub_216184F68((unsigned char *)(a1 + 64), byte_2163CA662);
  }
  CFStringRef v23 = CFStringCreateWithCharacters(0, (const UniChar *)a4, a5);
  *(void *)(a1 + 12sub_2161A108C(&a9, 0) = 0;
  *(void *)(a1 + 88) = v23;
  *(float *)(a1 + 96) = a9;
  *(void *)(a1 + 104) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = a7;
  *(_DWORD *)(a1 + 14sub_2161A108C(&a9, 0) = a8;
  *(_DWORD *)(a1 + 144) = a10;
  *(_DWORD *)(a1 + 148) = a11;
  *(unsigned char *)(a1 + 152) = 1;
  *(unsigned char *)(a1 + 153) = a6;
  uint64_t v24 = a1 + 160;
  *(unsigned char *)(a1 + 154) = 0;
  sub_2161E94D8((void *)(a1 + 160), 1uLL);
  uint64_t v25 = *(void *)(a1 + 160);
  *(void *)(v25 + 32) = 0;
  *(_OWORD *)uint64_t v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  if (!a3 || *(_DWORD *)(a1 + 140) != 4 || a12)
  {
    if (!a12) {
      goto LABEL_30;
    }
    int v30 = *(char *)(a1 + 55);
    BOOL v31 = v30 < 0;
    unint64_t v32 = *(unsigned __int16 **)(a1 + 32);
    if (v30 >= 0) {
      unint64_t v32 = v22;
    }
    uint64_t v33 = *(unsigned __int8 *)(a1 + 55);
    if (v31) {
      uint64_t v33 = *(void *)(a1 + 40);
    }
    if (v33)
    {
      double v34 = &v32[v33];
      uint64_t v35 = v32;
      while (2)
      {
        uint64_t v36 = 0;
        while (*(unsigned __int16 *)&a112141718191a1[v36] != *v35)
        {
          v36 += 2;
          if (v36 == 38)
          {
            uint64_t v47 = v32;
            while (2)
            {
              uint64_t v48 = 0;
              while (*(unsigned __int16 *)&aO1p1q1r1s1t1u1_0[v48] != *v47)
              {
                v48 += 2;
                if (v48 == 24)
                {
                  uint64_t v49 = 2 * v33 - 2;
                  do
                  {
                    __int16 v50 = *v32++;
                    unsigned int v51 = (unsigned __int16)(v50 + 10332);
                    BOOL v52 = v51 >= 0xD45C;
                    BOOL v37 = v51 < 0xD45C;
                    BOOL v53 = !v52 || v49 == 0;
                    v49 -= 2;
                  }
                  while (!v53);
                  goto LABEL_59;
                }
              }
              BOOL v37 = 0;
              if (++v47 != v34) {
                continue;
              }
              goto LABEL_59;
            }
          }
        }
        BOOL v37 = 0;
        if (++v35 != v34) {
          continue;
        }
        break;
      }
    }
    else
    {
LABEL_30:
      BOOL v37 = 0;
    }
LABEL_59:
    uint64_t v40 = *(void *)(a1 + 160);
    *(unsigned char *)(v40 + 38) = v37;
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v54 = *(void *)(a1 + 40);
    }
    else {
      LOWORD(v54) = *(unsigned __int8 *)(a1 + 55);
    }
    *(_WORD *)(v40 + 24) = v54;
    LODWORD(v54) = *(char *)(a1 + 87);
    if ((v54 & 0x80000000) != 0) {
      uint64_t v54 = *(void *)(a1 + 72);
    }
    else {
      LOWORD(v54) = v54;
    }
    *(_WORD *)(v40 + 26) = v54;
    LODWORD(v54) = *(char *)(a1 + 87);
    if ((v54 & 0x80000000) != 0) {
      uint64_t v54 = *(void *)(a1 + 72);
    }
    else {
      LOWORD(v54) = v54;
    }
    *(_WORD *)(v40 + 28) = v54;
    goto LABEL_86;
  }
  uint64_t v26 = 2 * a3;
  double v27 = a2;
  while ((unsigned __int16)((unsigned __int16)(*(_WORD *)v27 + 21504) >> 2) >= 0xAE9u
       && (unsigned __int16)(*(_WORD *)v27 - 12593) >= 0x33u)
  {
    v27 += 2;
    v26 -= 2;
    if (!v26)
    {
      double v27 = &a2[2 * a3];
      break;
    }
  }
  if (*(char *)(a1 + 55) < 0)
  {
    char v29 = *(unsigned __int16 **)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v28 = *(unsigned __int8 *)(a1 + 55);
    char v29 = v22;
  }
  sub_21630E7A0(v29, v28, &__p);
  unint64_t v38 = v27 - a2;
  if ((char)v76 < 0)
  {
    __int16 v39 = v75;
    operator delete(__p);
  }
  else
  {
    __int16 v39 = v76;
  }
  uint64_t v40 = *(void *)v24;
  *(unsigned char *)(*(void *)v24 + 38) = 0;
  if (!(unsigned __int16)(v38 >> 1))
  {
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v46 = *(void *)(a1 + 40);
    }
    else {
      LOWORD(v46) = *(unsigned __int8 *)(a1 + 55);
    }
    *(_WORD *)(v40 + 24) = v46;
    LODWORD(v46) = *(char *)(a1 + 87);
    if ((v46 & 0x80000000) != 0) {
      uint64_t v46 = *(void *)(a1 + 72);
    }
    else {
      LOWORD(v46) = v46;
    }
    *(_WORD *)(v40 + 26) = v46;
    *(_WORD *)(v40 + 28) = v39;
LABEL_86:
    uint64_t v63 = (unsigned char *)(v40 + 37);
LABEL_87:
    *v63 |= 1u;
    *(_DWORD *)uint64_t v40 = 0;
    return a1;
  }
  unint64_t v41 = v38 >> 1;
  *(_WORD *)(v40 + 24) = v38 >> 1;
  *(_WORD *)(v40 + 26) = v38 >> 1;
  *(_WORD *)(v40 + 28) = v38 >> 1;
  *(unsigned char *)(v40 + 37) |= 1u;
  uint64_t v42 = *(unsigned __int16 **)(a1 + 32);
  if (*(char *)(a1 + 55) >= 0) {
    uint64_t v42 = v22;
  }
  if (v42) {
    uint64_t v43 = (unsigned __int16)(v38 >> 1);
  }
  else {
    uint64_t v43 = 0;
  }
  if (v43)
  {
    uint64_t v44 = 2 * v43;
    while (*v42 - 48 < 0xA)
    {
      ++v42;
      v44 -= 2;
      if (!v44) {
        goto LABEL_45;
      }
    }
    int v45 = 1;
  }
  else
  {
LABEL_45:
    int v45 = 5;
  }
  *(_DWORD *)uint64_t v40 = v45;
  if ((unsigned __int16)(v38 >> 1) != a3)
  {
    unint64_t v55 = *(void *)(a1 + 176);
    unint64_t v56 = *(void *)(a1 + 168);
    if (v56 >= v55)
    {
      __int16 v73 = v39;
      unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v56 - v40) >> 3);
      if (v58 + 1 > 0x666666666666666) {
        sub_21618B344();
      }
      unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v55 - v40) >> 3);
      uint64_t v60 = 2 * v59;
      if (2 * v59 <= v58 + 1) {
        uint64_t v60 = v58 + 1;
      }
      if (v59 >= 0x333333333333333) {
        unint64_t v61 = 0x666666666666666;
      }
      else {
        unint64_t v61 = v60;
      }
      if (v61) {
        uint64_t v62 = (char *)sub_21618B4A8(a1 + 176, v61);
      }
      else {
        uint64_t v62 = 0;
      }
      uint64_t v65 = &v62[40 * v58];
      int v66 = &v62[40 * v61];
      *((void *)v65 + 4) = 0;
      *(_OWORD *)uint64_t v65 = 0u;
      *((_OWORD *)v65 + 1) = 0u;
      unsigned long long v57 = v65 + 40;
      uint64_t v68 = *(char **)(a1 + 160);
      uint64_t v67 = *(char **)(a1 + 168);
      if (v67 == v68)
      {
        __int16 v39 = v73;
      }
      else
      {
        __int16 v39 = v73;
        do
        {
          long long v69 = *(_OWORD *)(v67 - 40);
          long long v70 = *(_OWORD *)(v67 - 24);
          *((void *)v65 - 1) = *((void *)v67 - 1);
          *(_OWORD *)(v65 - 24) = v70;
          *(_OWORD *)(v65 - 4sub_2161A108C(&a9, 0) = v69;
          v65 -= 40;
          v67 -= 40;
        }
        while (v67 != v68);
        uint64_t v67 = *(char **)v24;
      }
      *(void *)(a1 + 16sub_2161A108C(&a9, 0) = v65;
      *(void *)(a1 + 168) = v57;
      *(void *)(a1 + 176) = v66;
      if (v67) {
        operator delete(v67);
      }
    }
    else
    {
      *(void *)(v56 + 32) = 0;
      *(_OWORD *)unint64_t v56 = 0u;
      *(_OWORD *)(v56 + 16) = 0u;
      unsigned long long v57 = (char *)(v56 + 40);
    }
    *(void *)(a1 + 168) = v57;
    *((void *)v57 - 1) = 0;
    *(_OWORD *)(v57 - 24) = 0u;
    *(_OWORD *)(v57 - 4sub_2161A108C(&a9, 0) = 0u;
    uint64_t v71 = *(void *)(a1 + 168);
    uint64_t v40 = v71 - 40;
    *(unsigned char *)(v71 - 2) = 0;
    *(_WORD *)(v71 - 16) = a3 - v41;
    if (*(char *)(a1 + 87) < 0) {
      uint64_t v72 = *(void *)(a1 + 72);
    }
    else {
      LOWORD(v72) = *(unsigned __int8 *)(a1 + 87);
    }
    *(_WORD *)(v71 - 14) = v72 - v41;
    *(_WORD *)(v71 - 12) = v39 - (v38 >> 1);
    uint64_t v63 = (unsigned char *)(v71 - 3);
    goto LABEL_87;
  }
  return a1;
}

void sub_21627C57C(_Unwind_Exception *a1)
{
  uint64_t v8 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 168) = v8;
    operator delete(v8);
  }
  sub_216195B94(v6, 0);
  sub_216195244(v5, 0);
  sub_2161868BC((const void **)(v1 + 88), 0);
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  sub_2161868BC((const void **)(v1 + 56), 0);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_21627C610(uint64_t a1, char *a2, CFIndex capacity)
{
  uint64_t v3 = capacity;
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, capacity, MEMORY[0x263EFFF70]);
  if (v3 >= 1)
  {
    do
    {
      CFNumberRef v7 = CFNumberCreate(0, kCFNumberCFIndexType, a2);
      CFArrayAppendValue(Mutable, v7);
      if (v7) {
        CFRelease(v7);
      }
      a2 += 8;
      --v3;
    }
    while (v3);
  }

  sub_216195B94((const void **)(a1 + 128), Mutable);
}

void sub_21627C6C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216195244((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFLocaleRef sub_21627C6E0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 168) - v2;
  BOOL v4 = v3 && 0xCCCCCCCCCCCCCCCDLL * (v3 >> 3) > a2;
  if (!v4 || *(unsigned char *)(v2 + 38) == 1) {
    return 0;
  }
  int v6 = *(_DWORD *)(v2 + 40 * a2);
  if (v6 == 1)
  {
    CFStringRef v8 = @"en_US";
  }
  else
  {
    if (v6 == 5 && v3 == 40) {
      return 0;
    }
    int v7 = *(_DWORD *)(a1 + 140);
    if (v7 == 4)
    {
      CFStringRef v8 = @"ko_KR";
      return CFLocaleCreate(0, v8);
    }
    if (v7 != 6) {
      return 0;
    }
    CFStringRef v8 = @"th_TH";
  }
  return CFLocaleCreate(0, v8);
}

void sub_21627C778(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(a1);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (*v5 != v7)
  {
    CFIndex v8 = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      uint64_t v10 = *(unsigned __int16 *)(v6 + 24);
      if ((*(unsigned char *)(v6 + 37) & 0x10) != 0)
      {
        v12.location = v8;
        v12.length = *(unsigned __int16 *)(v6 + 24);
        CFStringRef v11 = CFStringCreateWithSubstring(v9, v4, v12);
        sub_21627C89C(a2, (uint64_t)v11);
        if (v11) {
          CFRelease(v11);
        }
      }
      v8 += v10;
      v6 += 40;
    }
    while (v6 != v7);
  }
}

void sub_21627C884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21627C89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_21627C8F0(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  CFIndex v8 = sub_2162D1CE4(a2);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    return;
  }
  CFAllocatorRef v9 = sub_2162D1CE4(a2);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v15 = *(const __CFString **)(a1 + 8);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v26 = v16;
    if ((*(int (**)(uint64_t))(*(void *)a1 + 96))(a1) < 32) {
      int v17 = 63;
    }
    else {
      int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 408))(a1)) {
      size_t v18 = "prefix";
    }
    else {
      size_t v18 = "exact";
    }
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    double v20 = *(float *)(a1 + 96);
    double v21 = (*(double (**)(uint64_t))(*(void *)a1 + 392))(a1);
    if (v21 >= -100.0) {
      unint64_t v22 = *(void *)&v21;
    }
    else {
      unint64_t v22 = 0xC059000000000000;
    }
    int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
    uint64_t v24 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136317698;
    uint64_t v28 = a3;
    __int16 v29 = 2048;
    CFStringRef v30 = v15;
    __int16 v31 = 2112;
    uint64_t v32 = v26;
    __int16 v33 = 2112;
    uint64_t v34 = v25;
    __int16 v35 = 1024;
    int v36 = v17;
    __int16 v37 = 2080;
    unint64_t v38 = v18;
    __int16 v39 = 1024;
    int v40 = v19;
    __int16 v41 = 2048;
    double v42 = v20;
    __int16 v43 = 2048;
    unint64_t v44 = v22;
    __int16 v45 = 1024;
    int v46 = v23;
    __int16 v47 = 2048;
    uint64_t v48 = v24;
    _os_log_debug_impl(&dword_2160F5000, v9, OS_LOG_TYPE_DEBUG, "%s (%ld): [%@] (%@), type: %c, length: %s, cost: %d, geometry: %.3f, prob: %3.3lf, autocorrected: %d, rank: %ld", buf, 0x64u);
    if (!a4) {
      return;
    }
  }
  else if (!a4)
  {
    return;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1))
  {
    CFIndex v10 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      CFIndex v12 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v11);
      v50.location = v10;
      v50.length = v12;
      CFStringRef v13 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 56), v50);
      float v14 = sub_2162D1CE4(a2);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        break;
      }
      if (v13) {
        goto LABEL_8;
      }
LABEL_9:
      v10 += v12;
      if (++v11 >= (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1)) {
        return;
      }
    }
    *(_DWORD *)buf = 134218242;
    uint64_t v28 = v11 + 1;
    __int16 v29 = 2112;
    CFStringRef v30 = v13;
    _os_log_debug_impl(&dword_2160F5000, v14, OS_LOG_TYPE_DEBUG, "   #%lu: [%@]\n", buf, 0x16u);
    if (!v13) {
      goto LABEL_9;
    }
LABEL_8:
    CFRelease(v13);
    goto LABEL_9;
  }
}

void sub_21627CD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21627CD6C()
{
}

void sub_21627CF20(_Unwind_Exception *a1)
{
  sub_2161868BC(v3, 0);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x2166CA800](v1, 0x10F3C402D14F19CLL);
  _Unwind_Resume(a1);
}

void sub_21627CFA8(uint64_t a1)
{
  sub_21627D370(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21627CFE0(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_21627CFE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_21627D00C()
{
  return 0;
}

unint64_t sub_21627D014(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3);
}

uint64_t sub_21627D030(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t sub_21627D038()
{
  return 1;
}

uint64_t sub_21627D040()
{
  return 0;
}

uint64_t sub_21627D048()
{
  return 0;
}

uint64_t sub_21627D050(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_21627D058()
{
  return 1;
}

uint64_t sub_21627D060(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_21627D068()
{
  return 0;
}

uint64_t sub_21627D070(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 160);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 168) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v2 + 40 * a2 + 24);
  }
}

uint64_t sub_21627D0AC()
{
  return 0;
}

uint64_t sub_21627D0B4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v1 = *(char **)(a1 + 32);
    uint64_t v2 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v1 = (char *)(a1 + 32);
    LODWORD(v2) = *(unsigned __int8 *)(a1 + 55);
  }
  uint64_t v3 = (2 * v2);
  if (v3)
  {
    unsigned int v4 = 0;
    do
    {
      int v5 = *v1++;
      unsigned int v4 = (1025 * (v4 + v5)) ^ ((1025 * (v4 + v5)) >> 6);
      --v3;
    }
    while (v3);
    unsigned int v6 = 9 * v4;
  }
  else
  {
    unsigned int v6 = 0;
  }
  return 32769 * (v6 ^ (v6 >> 11));
}

uint64_t sub_21627D108(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t sub_21627D110(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

BOOL sub_21627D118(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 69) {
    return 1;
  }
  CFStringRef v3 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);

  return sub_2161A1E44(v3);
}

uint64_t sub_21627D1AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 153);
}

uint64_t sub_21627D1B4()
{
  return 0;
}

__CFString *sub_21627D1BC()
{
  return &stru_26C6FB1C0;
}

uint64_t sub_21627D1C8(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_21627D1D0()
{
  return 1;
}

uint64_t sub_21627D1D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t sub_21627D1E0()
{
  return 0;
}

uint64_t sub_21627D1E8()
{
  return 0;
}

uint64_t sub_21627D1F0(uint64_t a1)
{
  return a1 + 160;
}

uint64_t sub_21627D1F8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 160);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 168) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v2 + 40 * a2 + 26);
  }
}

uint64_t sub_21627D234(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 160);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 168) - v2) >> 3) <= a2) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v2 + 40 * a2 + 28);
  }
}

uint64_t sub_21627D270(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)a1 + 256))();
  }
}

uint64_t sub_21627D2A8()
{
  return 0;
}

uint64_t sub_21627D2B0()
{
  return 0;
}

uint64_t sub_21627D2B8()
{
  return 0;
}

BOOL sub_21627D2C0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 144) == 2;
}

double sub_21627D2D0(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

uint64_t sub_21627D2D8(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  return result;
}

uint64_t sub_21627D2E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t sub_21627D2E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 148);
}

uint64_t sub_21627D2F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  return result;
}

uint64_t sub_21627D300(uint64_t result, char a2)
{
  *(unsigned char *)(result + 153) = a2;
  return result;
}

__n128 sub_21627D308(__n128 *a1, __n128 *a2)
{
  int v5 = a1 + 10;
  unsigned int v4 = (void *)a1[10].n128_u64[0];
  if (v4)
  {
    a1[10].n128_u64[1] = (unint64_t)v4;
    operator delete(v4);
    v5->n128_u64[0] = 0;
    v5->n128_u64[1] = 0;
    v5[1].n128_u64[0] = 0;
  }
  __n128 result = *a2;
  a1[10] = *a2;
  a1[11].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_21627D368()
{
}

uint64_t sub_21627D370(uint64_t a1)
{
  *(void *)a1 = off_26C6C0288;
  *(void *)(a1 + 24) = &unk_26C6C04B8;
  uint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  sub_216195B94((const void **)(a1 + 128), 0);
  sub_216195244((const void **)(a1 + 120), 0);
  sub_2161868BC((const void **)(a1 + 88), 0);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  sub_2161868BC((const void **)(a1 + 56), 0);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_21627D434(void *a1)
{
  sub_21634A708(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21627D46C(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void *))(*a1 + 104))(a1))
  {
    v13[0] = 0;
    v13[1] = v13;
    v13[2] = 0x2000000000;
    char v14 = 0;
    unsigned int v6 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 104))(a1, a2);
    uint64_t v7 = operator new(2uLL);
    *uint64_t v7 = 42;
    uint64_t v8 = a1[1];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1174405120;
    v9[2] = sub_21627D614;
    void v9[3] = &unk_26C6C9D48;
    v9[6] = a1;
    __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    sub_216182F50(&__p, v7, (uint64_t)(v7 + 1), 1);
    v9[4] = a3;
    v9[5] = v13;
    sub_216239420(v8, v6, (uint64_t)v9);
    if (__p)
    {
      uint64_t v11 = __p;
      operator delete(__p);
    }
    operator delete(v7);
    _Block_object_dispose(v13, 8);
  }
}

void sub_21627D5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v19);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_21627D614(void *a1, uint64_t a2, unsigned char *a3)
{
  int v4 = a2;
  unsigned int v6 = (void *)a1[6];
  double v21 = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  memset(v20, 0, sizeof(v20));
  __p = 0;
  size_t v18 = 0;
  uint64_t v19 = 0;
  BOOL v16 = 0;
  if (sub_2161E6898(v6[42], a2, (uint64_t)&v21, (uint64_t)v20, (uint64_t)&__p, &v16))
  {
    int v10 = v4;
    __int16 v11 = 4 * v16;
    __int16 v12 = 0;
    int v13 = 0;
    char v14 = &v10;
    uint64_t v8 = v6[2];
    uint64_t v9 = v6[3];
    uint64_t v7 = v6 + 2;
    sub_21634ECA8(v7, (uint64_t *)&v21, (uint64_t *)&__p, a1 + 7, *((_DWORD *)v7 + 6));
    uint64_t v15 = *v7 + v9 - v8;
    (*(void (**)(void))(a1[4] + 16))();
    if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
      *a3 = 1;
    }
  }
  if (__p)
  {
    size_t v18 = __p;
    operator delete(__p);
  }
  if (v20[0]) {
    operator delete(v20[0]);
  }
  if (v21)
  {
    unint64_t v22 = v21;
    operator delete(v21);
  }
}

void sub_21627D73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  uint64_t v19 = *(void **)(v17 - 72);
  if (v19)
  {
    *(void *)(v17 - 64) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21627D778(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return sub_216182F50(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 1);
}

void sub_21627D794(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

uint64_t sub_21627D7AC()
{
  return 14;
}

uint64_t sub_21627D7B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_21627D7BC()
{
  return 1;
}

uint64_t sub_21627D7C4()
{
  return 0;
}

uint64_t sub_21627D7D4(int a1, CFMutableDictionaryRef theDict)
{
  if (!theDict) {
    __assert_rtn("handleCandidate", "PredictionCandidateDisplayedTracker.cpp", 17, "payload");
  }
  CFStringRef v3 = (const void *)*MEMORY[0x263EFFB40];
  CFDictionaryAddValue(theDict, @"completionCandidatesAppeared", (const void *)*MEMORY[0x263EFFB40]);
  CFDictionaryAddValue(theDict, @"predictionCandidateListDisplayed", v3);
  return 1;
}

void sub_21627D85C()
{
}

void *sub_21627D870(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  int v4 = sub_2162769A4();
  int v5 = (*((_DWORD *)v4 + 2) >> 5) & 1;
  if (!*v4) {
    LOBYTE(v5) = 0;
  }
  *((unsigned char *)__dst + 24) = v5;
  *((unsigned char *)__dst + 25) = 0;
  __dst[6] = 0;
  return __dst;
}

void sub_21627D8E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21627D900(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 25))
    {
      __n128 result = gettimeofday(&v11, 0);
      *(unsigned char *)(v2 + 25) = 0;
      *(double *)(v2 + 48) = *(double *)(v2 + 48)
                           + (double)(v11.tv_usec - *(_DWORD *)(v2 + 40)) / 1000000.0
                           + (double)(v11.tv_sec - *(void *)(v2 + 32));
      if (a2)
      {
        int v4 = sub_2162769A4();
        uint64_t v10 = v2;
        if (*(char *)(v2 + 23) < 0) {
          uint64_t v10 = *(void *)v2;
        }
        return sub_216276FA0((uint64_t)v4, 0x20u, (uint64_t)"[%s] paused at (%lu, %lu), total time elapsed %.8f seconds\n", v5, v6, v7, v8, v9, v10);
      }
    }
  }
  return result;
}

unsigned char *sub_21627D9C8(unsigned char *result)
{
  if (result[24])
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_2162769A4();
    uint64_t v8 = (uint64_t)v1;
    if ((char)v1[23] < 0) {
      uint64_t v8 = *(void *)v1;
    }
    sub_216276FA0((uint64_t)v2, 0x20u, (uint64_t)"[%s] Total time elapsed %.8f seconds\n", v3, v4, v5, v6, v7, v8);
    __n128 result = (unsigned char *)*((void *)sub_2162769A4() + 4);
    if (result)
    {
      uint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 24);
      return (unsigned char *)v9();
    }
  }
  return result;
}

void *sub_21627DA74(void *__dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  unint64_t v4 = *(void *)(a2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5 == 4)
  {
    if ((v3 & 0x80u) == 0) {
      timeval v11 = (_DWORD *)a2;
    }
    else {
      timeval v11 = *(_DWORD **)a2;
    }
    if (*v11 == 1047736124)
    {
      __dst = sub_21610B834(__dst, "");
      int v10 = 2;
      goto LABEL_34;
    }
  }
  else if (v5 == 3)
  {
    uint64_t v6 = (v3 & 0x80u) == 0 ? (unsigned __int16 *)a2 : *(unsigned __int16 **)a2;
    int v7 = *v6;
    int v8 = *((unsigned __int8 *)v6 + 2);
    if (v7 == 29500 && v8 == 62)
    {
      __dst = sub_21610B834(__dst, "");
      int v10 = 1;
      goto LABEL_34;
    }
  }
  if ((v3 & 0x80) != 0)
  {
    __int16 v12 = *(unsigned char **)a2;
    if (*v12 == 120 && v12[v4 - 1] == 120 && v4 > 1)
    {
      __dst = sub_21610A674(__dst, v12, v4);
      goto LABEL_33;
    }
    __dst = sub_21610A674(__dst, v12, v4);
    int v10 = 0;
  }
  else
  {
    if (*(unsigned char *)a2 == 120 && v3 >= 2 && *(unsigned char *)(a2 + v3 - 1) == 120)
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      __dst[2] = *(void *)(a2 + 16);
LABEL_33:
      int v10 = 3;
      goto LABEL_34;
    }
    int v10 = 0;
    *(_OWORD *)__dst = *(_OWORD *)a2;
    __dst[2] = *(void *)(a2 + 16);
  }
LABEL_34:
  *((_DWORD *)v2 + 6) = v10;
  return __dst;
}

void sub_21627DBD0(uint64_t a1@<X0>, unsigned char *a2@<X3>, void *a3@<X8>)
{
  *a2 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = a3 + 1;
  uint64_t v3 = *(void *)(*(void *)a1 + 56);
  if (v3)
  {
    sub_216204250(*(void *)(*(void *)a1 + 56));
    unsigned int v4 = atomic_load((unsigned int *)(v3 + 40));
    if (v4 == 2)
    {
      if (*(void *)v3) {
        operator new();
      }
    }
  }
}

void sub_21627E224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,char a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&a23);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
  sub_2161EB7F4(v33, *(void **)(v33 + 8));
  _Unwind_Resume(a1);
}

void sub_21627E3B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 56);
  if (v1)
  {
    sub_216204250(*(void *)(*(void *)a1 + 56));
    unsigned int v3 = atomic_load((unsigned int *)(v1 + 40));
    if (v3 == 2)
    {
      if (*(void *)v1)
      {
        unsigned int v4 = *(unsigned int **)(*(void *)a1 + 56);
        sub_216204250((uint64_t)v4);
        atomic_load(v4 + 10);
        uint64_t v5 = *(void *)(*(void *)v4 + 8);
        MEMORY[0x270F46C80](v5);
      }
    }
  }
}

void sub_21627E438(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        language_modeling::v1::Prediction::~Prediction((language_modeling::v1::Prediction *)(v4 - 8));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double sub_21627E4BC(uint64_t a1)
{
  *(unsigned char *)a1 = 1;
  *(_OWORD *)(a1 + 8) = xmmword_2163847B0;
  *(_DWORD *)(a1 + 4) = 5000;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0x3FC999999999999AuLL);
  *(_OWORD *)(a1 + 4sub_2161A108C(&a9, 0) = xmmword_2163847C0;
  *(_OWORD *)(a1 + 56) = xmmword_2163847D0;
  *(_OWORD *)(a1 + 72) = xmmword_2163847E0;
  *(_OWORD *)(a1 + 88) = xmmword_2163847F0;
  *(_OWORD *)(a1 + 104) = xmmword_216384800;
  *(_OWORD *)(a1 + 12sub_2161A108C(&a9, 0) = xmmword_216384810;
  *(_OWORD *)(a1 + 136) = xmmword_216384820;
  *(_OWORD *)(a1 + 152) = xmmword_216384830;
  *(_OWORD *)(a1 + 168) = xmmword_216384840;
  *(_OWORD *)(a1 + 184) = xmmword_216384850;
  *(_OWORD *)(a1 + 20sub_2161A108C(&a9, 0) = xmmword_216384860;
  *(_OWORD *)(a1 + 224) = xmmword_216384870;
  *(void *)(a1 + 216) = 0x4008000000000000;
  *(int32x2_t *)(a1 + 24sub_2161A108C(&a9, 0) = vdup_n_s32(0x3A98u);
  *(_WORD *)(a1 + 256) = 1;
  *(unsigned char *)(a1 + 264) = 1;
  *(_WORD *)(a1 + 28sub_2161A108C(&a9, 0) = 1;
  *(_OWORD *)(a1 + 288) = xmmword_216384880;
  *(void *)(a1 + 304) = 0x19006400180010;
  *(_WORD *)(a1 + 312) = 32;
  *(_DWORD *)(a1 + 328) = 196610;
  *(void *)(a1 + 336) = 0x80002012C7FFFLL;
  *(_DWORD *)(a1 + 352) = 983050;
  *(_DWORD *)(a1 + 368) = 655365;
  *(_WORD *)(a1 + 376) = 3;
  *(void *)(a1 + 392) = 0x3F0000003E99999ALL;
  *(_DWORD *)(a1 + 40sub_2161A108C(&a9, 0) = 1060320051;
  *(_OWORD *)(a1 + 404) = xmmword_216384890;
  *(_WORD *)(a1 + 42sub_2161A108C(&a9, 0) = 2;
  *(_DWORD *)(a1 + 432) = 5;
  *(_DWORD *)(a1 + 44sub_2161A108C(&a9, 0) = 0x1FFFF;
  *(_WORD *)(a1 + 444) = 3000;
  *(_DWORD *)(a1 + 448) = 1070386381;
  *(_DWORD *)(a1 + 464) = 45878700;
  *(void *)(a1 + 472) = 0x640FA24057803E8;
  *(_WORD *)(a1 + 48sub_2161A108C(&a9, 0) = 500;
  *(_DWORD *)(a1 + 496) = 65540000;
  *(_DWORD *)(a1 + 512) = 65537500;
  *(_DWORD *)(a1 + 52sub_2161A108C(&a9, 0) = 458815536;
  *(_WORD *)(a1 + 524) = 5000;
  *(void *)(a1 + 528) = 0x300000002;
  *(_DWORD *)(a1 + 536) = 65538000;
  *(_DWORD *)(a1 + 552) = 327683000;
  *(_DWORD *)(a1 + 56sub_2161A108C(&a9, 0) = 655362;
  *(_WORD *)(a1 + 564) = 20000;
  *(_DWORD *)(a1 + 568) = 1080033280;
  *(void *)(a1 + 576) = 850045863;
  *(void *)(a1 + 632) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 60sub_2161A108C(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 248) = a1;
  *(void *)(a1 + 272) = a1;
  *(void *)(a1 + 344) = a1;
  *(void *)(a1 + 36sub_2161A108C(&a9, 0) = a1;
  *(void *)(a1 + 384) = a1;
  *(void *)(a1 + 424) = a1;
  *(void *)(a1 + 456) = a1;
  *(void *)(a1 + 488) = a1;
  *(void *)(a1 + 504) = a1;
  *(void *)(a1 + 544) = a1;
  *(void *)(a1 + 32sub_2161A108C(&a9, 0) = a1;
  return result;
}

BOOL sub_21627E724(uint64_t a1, const __CFURL *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  unsigned int v4 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  int v5 = CFReadStreamOpen(v4);
  if (v5)
  {
    CFDictionaryRef v6 = (const __CFDictionary *)CFPropertyListCreateWithStream(v3, v4, 0, 0, 0, 0);
    CFReadStreamClose(v4);
    sub_21627E80C(a1, v6);
    if (v6) {
      CFRelease(v6);
    }
  }
  if (v4) {
    CFRelease(v4);
  }
  return v5 != 0;
}

void sub_21627E7DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161E6198((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21627E80C(uint64_t a1, const __CFDictionary *a2)
{
  unsigned int v4 = (std::mutex *)(a1 + 576);
  std::mutex::lock((std::mutex *)(a1 + 576));
  CFNumberRef v5 = sub_21627ECD8(a2, @"kEmbedded");
  if ((unint64_t)v5 >> 32) {
    *(unsigned char *)a1 = v5 == 1;
  }
  CFNumberRef v6 = sub_21627ECD8(a2, @"kJointProbabilityCostFactor");
  if ((unint64_t)v6 >> 32) {
    *(_DWORD *)(a1 + 4) = v6;
  }
  CFNumberRef v7 = sub_21627ED1C(a2, @"kDiscriminativeCostWeight");
  if (v8) {
    *(void *)(a1 + 8) = v7;
  }
  CFNumberRef v9 = sub_21627ED1C(a2, @"kCostFactor");
  if (v10) {
    *(void *)(a1 + 16) = v9;
  }
  CFNumberRef v11 = sub_21627ED1C(a2, @"kMatchPenaltyWeight");
  if (v12) {
    *(void *)(a1 + 24) = v11;
  }
  CFNumberRef v13 = sub_21627ED1C(a2, @"kMatchPenaltyWeightForSpecialToken");
  if (v14) {
    *(void *)(a1 + 32) = v13;
  }
  CFNumberRef v15 = sub_21627ED1C(a2, @"kSingleWordLMScore");
  if (v16) {
    *(void *)(a1 + 4sub_2161A108C(&a9, 0) = v15;
  }
  CFNumberRef v17 = sub_21627ED1C(a2, @"kDynamicLMScoreWeight");
  if (v18) {
    *(void *)(a1 + 48) = v17;
  }
  CFNumberRef v19 = sub_21627ED1C(a2, @"kSymbolUnkPenalty");
  if (v20) {
    *(void *)(a1 + 56) = v19;
  }
  CFNumberRef v21 = sub_21627ED1C(a2, @"kMaxUnkPenalty");
  if (v22) {
    *(void *)(a1 + 64) = v21;
  }
  CFNumberRef v23 = sub_21627ED1C(a2, @"kRareUnkPenalty");
  if (v24) {
    *(void *)(a1 + 72) = v23;
  }
  CFNumberRef v25 = sub_21627ED1C(a2, @"kConsecutiveUnkPenalty");
  if (v26) {
    *(void *)(a1 + 8sub_2161A108C(&a9, 0) = v25;
  }
  CFNumberRef v27 = sub_21627ED1C(a2, @"kSingleUnkCharWordPenalty");
  if (v28) {
    *(void *)(a1 + 88) = v27;
  }
  CFNumberRef v29 = sub_21627ED1C(a2, @"kSingleUnkCharWithOkuriganaWordPenalty");
  if (v30) {
    *(void *)(a1 + 96) = v29;
  }
  CFNumberRef v31 = sub_21627ED1C(a2, @"kDynamicKatakanaPenalty");
  if (v32) {
    *(void *)(a1 + 104) = v31;
  }
  CFNumberRef v33 = sub_21627ED1C(a2, @"kOtherSymbolOrLetterPenalty");
  if (v34) {
    *(void *)(a1 + 112) = v33;
  }
  CFNumberRef v35 = sub_21627ED1C(a2, @"kPenaltyForDynamicNumbers");
  if (v36) {
    *(void *)(a1 + 12sub_2161A108C(&a9, 0) = v35;
  }
  CFNumberRef v37 = sub_21627ED1C(a2, @"kPenaltyForArabicNumberByReading");
  if (v38) {
    *(void *)(a1 + 128) = v37;
  }
  CFNumberRef v39 = sub_21627ED1C(a2, @"kPenaltyForArabicNumberAtEOSByReading");
  if (v40) {
    *(void *)(a1 + 136) = v39;
  }
  CFNumberRef v41 = sub_21627ED1C(a2, @"kPenaltyForArabicNumberSingleWordOnHWKeyboard");
  if (v42) {
    *(void *)(a1 + 144) = v41;
  }
  CFNumberRef v43 = sub_21627ED1C(a2, @"kPenaltyForWordWithArabicNumber");
  if (v44) {
    *(void *)(a1 + 152) = v43;
  }
  CFNumberRef v45 = sub_21627ED1C(a2, @"kPenaltyForUnlikelyNumberUnitCombination");
  if (v46) {
    *(void *)(a1 + 16sub_2161A108C(&a9, 0) = v45;
  }
  CFNumberRef v47 = sub_21627ED1C(a2, @"kPenaltyForSymbolConversion");
  if (v48) {
    *(void *)(a1 + 168) = v47;
  }
  CFNumberRef v49 = sub_21627ED1C(a2, @"kPenaltyForKanjiNumberWithUnit");
  if (v50) {
    *(void *)(a1 + 176) = v49;
  }
  CFNumberRef v51 = sub_21627ED1C(a2, @"kRewardForSingleNumberConversion");
  if (v52) {
    *(void *)(a1 + 20sub_2161A108C(&a9, 0) = v51;
  }
  CFNumberRef v53 = sub_21627ED1C(a2, @"kRewardForNumberWithUnit");
  if (v54) {
    *(void *)(a1 + 208) = v53;
  }
  CFNumberRef v55 = sub_21627ED1C(a2, @"kRewardForNumberWithParticle");
  if (v56) {
    *(void *)(a1 + 216) = v55;
  }
  CFNumberRef v57 = sub_21627ECD8(a2, @"kNumLexicalPreferenceTargetsForSWKeyboard");
  if ((unint64_t)v57 >> 32) {
    *(_DWORD *)(a1 + 528) = v57;
  }
  CFNumberRef v58 = sub_21627ECD8(a2, @"kNumLexicalPreferenceTargetsForHWKeyboard");
  if ((unint64_t)v58 >> 32) {
    *(_DWORD *)(a1 + 532) = v58;
  }
  CFNumberRef v59 = sub_21627ECD8(a2, @"kMaxNumExactCandidatesForSWKeyboard");
  if ((unint64_t)v59 >> 32) {
    *(_DWORD *)(a1 + 224) = v59;
  }
  CFNumberRef v60 = sub_21627ECD8(a2, @"kMaxNumExactCandidatesForHWKeyboard");
  if ((unint64_t)v60 >> 32) {
    *(_DWORD *)(a1 + 228) = v60;
  }
  double v61 = COERCE_DOUBLE(sub_21627ED1C(a2, @"kMaxNumPrefixCandidates"));
  if (v62) {
    *(_DWORD *)(a1 + 232) = (int)v61;
  }
  CFNumberRef v63 = sub_21627ECD8(a2, @"kSinglePhraseExactMatchCandidatePruningThreshold");
  if ((unint64_t)v63 >> 32) {
    *(_DWORD *)(a1 + 236) = v63;
  }
  CFNumberRef v64 = sub_21627ECD8(a2, @"kMultiPhraseExactMatchCandidatePruningThreshold");
  if ((unint64_t)v64 >> 32) {
    *(_DWORD *)(a1 + 24sub_2161A108C(&a9, 0) = v64;
  }
  double v65 = COERCE_DOUBLE(sub_21627ED1C(a2, @"kPrefixMatchCandidatePruningThreshold"));
  if (v66) {
    *(_DWORD *)(a1 + 244) = (int)v65;
  }
  std::mutex::unlock(v4);
  return 1;
}

void sub_21627EC3C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFNumberRef sub_21627ECD8(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    unsigned int valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberIntType, &valuePtr)) {
      return (const __CFNumber *)(valuePtr | 0x100000000);
    }
    else {
      return 0;
    }
  }
  return result;
}

CFNumberRef sub_21627ED1C(const __CFDictionary *a1, const void *a2)
{
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    uint64_t valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberDoubleType, &valuePtr)) {
      return (const __CFNumber *)valuePtr;
    }
    else {
      return 0;
    }
  }
  return result;
}

CFDictionaryRef sub_21627ED68(uint64_t a1)
{
  __dst[35] = *(const void **)MEMORY[0x263EF8340];
  memcpy(__dst, &off_26426E0F0, 0x118uLL);
  values[0] = CFNumberCreate(0, kCFNumberIntType, (const void *)a1);
  values[1] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 4));
  values[2] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 8));
  values[3] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 16));
  values[4] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 24));
  values[5] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 32));
  values[6] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 40));
  values[7] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 48));
  values[8] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 56));
  values[9] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 64));
  values[10] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 72));
  values[11] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 80));
  values[12] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 88));
  values[13] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 96));
  values[14] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 104));
  values[15] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 112));
  values[16] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 120));
  values[17] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 128));
  values[18] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 136));
  values[19] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 144));
  values[20] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 152));
  values[21] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 160));
  values[22] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 168));
  values[23] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 176));
  values[24] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 200));
  values[25] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 208));
  values[26] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 216));
  values[27] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 528));
  values[28] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 532));
  values[29] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 224));
  values[30] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 228));
  values[31] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 232));
  values[32] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 236));
  values[33] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 240));
  values[34] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 244));
  CFDictionaryRef v2 = CFDictionaryCreate(0, __dst, (const void **)values, 35, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  for (uint64_t i = 0; i != 35; ++i)
    CFRelease(values[i]);
  return v2;
}

uint64_t sub_21627F0DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6BEA10;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_26C6BE968;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(void *)(a1 + 8sub_2161A108C(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = &unk_26C6BE968;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2161A108C(&a9, 0) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 172) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 20sub_2161A108C(&a9, 0) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16sub_2161A108C(&a9, 0) = 0u;
  *(_DWORD *)(a1 + 208) = 0;
  char v3 = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 229) = 1;
  *(unsigned char *)(a1 + 23sub_2161A108C(&a9, 0) = v3;
  *(_OWORD *)(a1 + 248) = 0u;
  sub_21625D050(a1 + 264);
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 72sub_2161A108C(&a9, 0) = 850045863;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 76sub_2161A108C(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(void *)(a1 + 816) = &unk_26C6BE8C8;
  *(void *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(unsigned char *)(a1 + 848) = 0;
  *(void *)(a1 + 856) = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  *(void *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(unsigned char *)(a1 + 876) = 0;
  *(void *)(a1 + 88sub_2161A108C(&a9, 0) = 850045863;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 92sub_2161A108C(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 932) = 0u;
  sub_21610B834(__p, "Conversion");
  sub_21627D870((void *)(a1 + 952), (long long *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  sub_2161BED68(a1 + 1008);
  return a1;
}

void sub_21627F2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 + 975) < 0) {
    operator delete(*v20);
  }
  std::mutex::~mutex(v24);
  uint64_t v29 = *(void *)(v19 + 864);
  *(void *)(v19 + 864) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
  }
  sub_2161B5B5C((const void **)(v19 + 856), 0);
  *(void *)(v19 + 816) = v28;
  a14 = v19 + 824;
  sub_2161C4FA0((void ***)&a14);
  uint64_t v30 = *(void *)(v19 + 800);
  *(void *)(v19 + 80sub_2161A108C(&a9, 0) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *(void *)(v19 + 792);
  *(void *)(v19 + 792) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  char v32 = (uint64_t *)(v19 + 712);
  uint64_t v33 = *(void *)(v19 + 784);
  *(void *)(v19 + 784) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  std::mutex::~mutex(v27);
  uint64_t v34 = *v32;
  *char v32 = 0;
  if (v34) {
    sub_2161E04B0(v19 + 712, v34);
  }
  uint64_t v35 = *(void *)(v19 + 704);
  *(void *)(v19 + 704) = 0;
  if (v35) {
    MEMORY[0x2166CA800](v35, 0x70C40F770AEC6);
  }
  sub_2162835D8(v26, 0);
  sub_2161C6D08(a11);
  uint64_t v36 = *(void *)(v25 + 24);
  *(void *)(v25 + 24) = 0;
  if (v36) {
    sub_2161DFF14(v25 + 24, v36);
  }
  CFNumberRef v37 = *(void **)v25;
  if (*(void *)v25)
  {
    *(void *)(v19 + 24sub_2161A108C(&a9, 0) = v37;
    operator delete(v37);
  }
  sub_2161868BC(v22, 0);
  sub_21624F668(v23, 0);
  uint64_t v38 = *v21;
  uint64_t *v21 = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 336))(v38);
  }
  uint64_t v39 = *(void *)(v19 + 176);
  *(void *)(v19 + 176) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = *(void *)(v19 + 168);
  *(void *)(v19 + 168) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  sub_21618A144(a12);
  sub_21618A144(a13);
  uint64_t v41 = *(void *)(v19 + 16);
  *(void *)(v19 + 16) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21627F57C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BEA10;
  CFDictionaryRef v2 = (void **)(a1 + 952);
  sub_21627D9C8((unsigned char *)(a1 + 952));
  sub_2161BEE34(a1 + 1008);
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 880));
  uint64_t v3 = *(void *)(a1 + 864);
  *(void *)(a1 + 864) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  sub_2161B5B5C((const void **)(a1 + 856), 0);
  *(void *)(a1 + 816) = &unk_26C6BE8C8;
  char v16 = (void **)(a1 + 824);
  sub_2161C4FA0(&v16);
  uint64_t v4 = *(void *)(a1 + 800);
  *(void *)(a1 + 80sub_2161A108C(&a9, 0) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 792);
  *(void *)(a1 + 792) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 784);
  *(void *)(a1 + 784) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 720));
  uint64_t v7 = *(void *)(a1 + 712);
  *(void *)(a1 + 712) = 0;
  if (v7) {
    sub_2161E04B0(a1 + 712, v7);
  }
  uint64_t v8 = *(void *)(a1 + 704);
  *(void *)(a1 + 704) = 0;
  if (v8) {
    MEMORY[0x2166CA800](v8, 0x70C40F770AEC6);
  }
  sub_2162835D8((uint64_t *)(a1 + 696), 0);
  sub_2161C6D08(a1 + 264);
  uint64_t v9 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v9) {
    sub_2161DFF14(a1 + 256, v9);
  }
  char v10 = *(void **)(a1 + 232);
  if (v10)
  {
    *(void *)(a1 + 24sub_2161A108C(&a9, 0) = v10;
    operator delete(v10);
  }
  sub_2161868BC((const void **)(a1 + 216), 0);
  sub_21624F668((const void ***)(a1 + 200), 0);
  uint64_t v11 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 336))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  *(void *)(a1 + 96) = &unk_26C6BE968;
  char v16 = (void **)(a1 + 144);
  sub_21618B5DC(&v16);
  sub_216144C28(a1 + 104);
  *(void *)(a1 + 24) = &unk_26C6BE968;
  char v16 = (void **)(a1 + 72);
  sub_21618B5DC(&v16);
  sub_216144C28(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

uint64_t sub_21627F8BC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(__CFString **)(a1 + 856);
  v9.length = CFStringGetLength(v6);
  v9.location = 0;
  CFStringDelete(v6, v9);
  sub_21627F9A4(a1, 0, a2, a3);
  std::mutex::lock((std::mutex *)(a1 + 880));
  *(_DWORD *)(a1 + 944) = 0;
  sub_21624F668((const void ***)(a1 + 200), 0);
  (*(void (**)(void, void))(**(void **)(a1 + 192) + 216))(*(void *)(a1 + 192), 0);
  uint64_t v7 = sub_21627FDB0(a1, 0, a2, a3, 0, 1);
  std::mutex::unlock((std::mutex *)(a1 + 880));
  return v7;
}

void sub_21627F990(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21627F9A4(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  sub_2162978A0(*(void *)(a1 + 176), 1);
  sub_2162979E4(*(void *)(a1 + 176));
  if (a2) {
    sub_2161BEEE4((unsigned char *)(a1 + 1008), a2, 0, a3, a4, 0);
  }
  if (a4) {
    operator new();
  }
  uint64_t v8 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t result = *(void *)(a1 + 864);
  *(void *)(a1 + 864) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

void sub_21627FD6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21627FDB0(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4, const __CFArray *a5, char a6)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E150, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E150))
  {
    qword_26797E148 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797E150);
  }
  uint64_t v12 = *(void *)(a1 + 176);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    sub_2162978A0(*(void *)(a1 + 176), 1);
    *(unsigned char *)(*(void *)(a1 + 176) + 96) = (a3 & 0x80) == 0;
  }
  *(_DWORD *)(a1 + 872) = 1;
  *(unsigned char *)(a1 + 876) = 0;
  sub_2162E0CB0(a1 + 824, 0);
  *(unsigned char *)(a1 + 848) = 0;
  if ((a6 & 1) == 0)
  {
    if (!a2 || !CFStringGetLength(a2))
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 208) = 0;
      return result;
    }
    if (!*(_DWORD *)(a1 + 208)) {
      *(_DWORD *)(a1 + 208) = 1;
    }
    if (a3 >> 31
      && (uint64_t v13 = *(void *)(a1 + 864)) != 0
      && (*(uint64_t (**)(void))(*(void *)v13 + 232))(*(void *)(a1 + 864))
      && (*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13)
      && (CFStringRef v14 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 232))(v13),
          CFStringGetLength(v14))
      && (CFStringRef v15 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13),
          CFStringGetLength(v15)))
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
      if (v16)
      {
        CFStringRef v17 = (const __CFString *)v16;
        CFIndex v18 = 0;
        while (v18 < CFStringGetLength(v17))
        {
          int CharacterAtIndex = CFStringGetCharacterAtIndex(v17, v18++);
          if ((CharacterAtIndex & 0xFFFFFFDF) - 65 < 0x1A) {
            goto LABEL_19;
          }
        }
      }
      CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
      CFStringRef v48 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
      CFStringAppend(Mutable, v48);
      CFStringAppend(Mutable, a2);
      sub_2161868BC((const void **)(a1 + 216), Mutable);
    }
    else
    {
LABEL_19:
      sub_21628049C(a1, a2);
    }
  }
  *(_DWORD *)(a1 + 184) = sub_21628E390(a3, a4, (unsigned char *)qword_26797E148);
  if (sub_2161E36C8(a2)) {
    *(_DWORD *)(a1 + 184) |= 4u;
  }
  if (a2)
  {
    CFIndex Length = CFStringGetLength(a2);
    if (*(unsigned char *)qword_26797E148)
    {
      unint64_t v21 = Length;
      if (Length >= 1
        && (CFStringGetCharacterAtIndex(a2, 0) - 65 < 0x1A
         || v21 >= 2 && CFStringGetCharacterAtIndex(a2, 1) - 65 <= 0x19))
      {
        int v22 = *(_DWORD *)(a1 + 184);
        if ((v22 & 0x4000000) != 0)
        {
          *(_DWORD *)(a1 + 184) = v22 & 0xFFFFFFDF;
          if ((v22 & 4) != 0) {
            *(_DWORD *)(a1 + 184) = v22 & 0xFFFFFFDD;
          }
        }
      }
    }
  }
  if ((a3 & 0x40000) != 0 || *(unsigned char *)(a1 + 230))
  {
    LOBYTE(v24) = 0;
  }
  else
  {
    int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
    if (v24) {
      LOBYTE(v24) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
    }
  }
  *(unsigned char *)(a1 + 228) = v24;
  *(_DWORD *)(a1 + 808) = 0;
  if (a4)
  {
    uint64_t v25 = sub_216192194(a4, kMecabraContextOptionDisabledLearningBasedGenerationBigramPhrase);
    char v26 = (const void *)*MEMORY[0x263EFFB40];
    if (v25 == (const void *)*MEMORY[0x263EFFB40]) {
      *(unsigned char *)(a1 + 808) = 1;
    }
    if (sub_216192194(a4, kMecabraContextOptionDisabledLearningBasedGenerationUnigramPhrase) == v26) {
      *(unsigned char *)(a1 + 809) = 1;
    }
    if (sub_216192194(a4, kMecabraContextOptionDisabledLearningBasedGenerationLexicalPreference) == v26) {
      *(unsigned char *)(a1 + 81sub_2161A108C(&a9, 0) = 1;
    }
    if (sub_216192194(a4, kMecabraContextOptionDisabledLearningBasedGenerationNonLexicalPreference) == v26) {
      *(unsigned char *)(a1 + 811) = 1;
    }
    if (sub_216192194(a4, kMecabraContextOptionPrivateMode) == v26)
    {
      *(_DWORD *)(a1 + 808) = 16843009;
      uint64_t v27 = *(void *)(a1 + 176);
      if (v27) {
        *(unsigned char *)(v27 + 96) = 0;
      }
    }
  }
  uint64_t v28 = (char **)(a1 + 232);
  *(void *)(a1 + 24sub_2161A108C(&a9, 0) = *(void *)(a1 + 232);
  if (a5 && CFArrayGetCount(a5) >= 1)
  {
    CFIndex v29 = 0;
    do
    {
      CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a5, v29);
      uint64_t v33 = sub_2161F3B4C(ValueAtIndex, v31, v32);
      uint64_t v34 = v33;
      uint64_t v36 = *(void **)(a1 + 240);
      unint64_t v35 = *(void *)(a1 + 248);
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v38 = ((char *)v36 - *v28) >> 3;
        if ((unint64_t)(v38 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v39 = v35 - (void)*v28;
        uint64_t v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
          uint64_t v40 = v38 + 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41) {
          char v42 = (char *)sub_2160FFAA8(a1 + 248, v41);
        }
        else {
          char v42 = 0;
        }
        CFNumberRef v43 = &v42[8 * v38];
        *(void *)CFNumberRef v43 = v34;
        CFNumberRef v37 = v43 + 8;
        CFNumberRef v45 = *(char **)(a1 + 232);
        char v44 = *(char **)(a1 + 240);
        if (v44 != v45)
        {
          do
          {
            uint64_t v46 = *((void *)v44 - 1);
            v44 -= 8;
            *((void *)v43 - 1) = v46;
            v43 -= 8;
          }
          while (v44 != v45);
          char v44 = *v28;
        }
        *(void *)(a1 + 232) = v43;
        *(void *)(a1 + 24sub_2161A108C(&a9, 0) = v37;
        *(void *)(a1 + 248) = &v42[8 * v41];
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        void *v36 = v33;
        CFNumberRef v37 = v36 + 1;
      }
      *(void *)(a1 + 24sub_2161A108C(&a9, 0) = v37;
      ++v29;
    }
    while (v29 < CFArrayGetCount(a5));
  }
  return 1;
}

void sub_216280360(_Unwind_Exception *a1)
{
}

unint64_t sub_216280378(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 848)) {
    return 0;
  }
  uint64_t v3 = *(const void **)(a2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = __dynamic_cast(v3, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6B9B70, 0);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (unsigned __int16 **)v4[4];
  if (v5 == (unsigned __int16 **)v4[5]) {
    return 0;
  }
  uint64_t v6 = *v5;
  if (*(void *)(v4[4] + 8) - (void)v6 != 4) {
    return 0;
  }
  unint64_t v7 = *v6;
  if (*v6)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 832) - *(void *)(a1 + 824)) >> 3);
    if (v8 > v7)
    {
      int v9 = v6[1];
      v11.location = 0;
      v11.length = v8 - v7;
      CFStringDelete(*(CFMutableStringRef *)(a1 + 856), v11);
      sub_216337210((uint64_t **)(a1 + 816), v7, v9);
      std::mutex::lock((std::mutex *)(a1 + 880));
      *(_DWORD *)(a1 + 944) = 0;
      unint64_t v7 = 1;
      *(_DWORD *)(a1 + 872) = 1;
      *(unsigned char *)(a1 + 876) = 0;
      std::mutex::unlock((std::mutex *)(a1 + 880));
      return v7;
    }
    return 0;
  }
  return v7;
}

uint64_t sub_216280490(uint64_t a1)
{
  return sub_2162978A0(*(void *)(a1 + 176), 1);
}

uint64_t sub_21628049C(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = (const void **)(a1 + 216);
  CFStringRef Copy = CFStringCreateCopy(0, a2);
  sub_2161868BC(v3, Copy);
  uint64_t result = *(void *)(a1 + 864);
  *(void *)(a1 + 864) = 0;
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v6();
  }
  return result;
}

uint64_t sub_21628051C(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4, const __CFArray *a5, const __CFArray *a6)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v12 = sub_2162D1CE4(3u);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    int v19 = 138412290;
    CFStringRef v20 = a2;
    _os_log_debug_impl(&dword_2160F5000, v12, OS_LOG_TYPE_DEBUG, "[MecabraEngine::analyzeString] analysisStr: [%@]", (uint8_t *)&v19, 0xCu);
  }
  std::mutex::lock((std::mutex *)(a1 + 880));
  uint64_t v13 = *(CFArrayRef **)(a1 + 200);
  *(_DWORD *)(a1 + 944) = 0;
  if (v13)
  {
    if (a5)
    {
      CFIndex v14 = *v13 ? CFArrayGetCount(*v13) : 0;
      if (v14 > CFArrayGetCount(a5))
      {
        if (a2)
        {
          CFStringRef v15 = *(const __CFString **)(a1 + 216);
          if (v15)
          {
            if (!CFStringHasPrefix(v15, a2)) {
              *(_DWORD *)(a1 + 208) = 1;
            }
          }
        }
      }
    }
    sub_21624F668((const void ***)(a1 + 200), 0);
    (*(void (**)(void, void))(**(void **)(a1 + 192) + 216))(*(void *)(a1 + 192), 0);
  }
  if (a2)
  {
    if (a5)
    {
      CFIndex Length = CFStringGetLength(a2);
      if (Length <= CFArrayGetCount(a5)) {
        operator new();
      }
    }
  }
  uint64_t v17 = sub_21627FDB0(a1, a2, a3, a4, a6, 0);
  if (v17) {
    operator new();
  }
  std::mutex::unlock((std::mutex *)(a1 + 880));
  return v17;
}

void sub_2162807C0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x60C40AA6EF139);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216280820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef Count = *(const __CFArray **)(a2 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  uint64_t v7 = 0;
  unint64_t v8 = (char *)Count - a3;
  CFIndex v9 = (CFIndex)Count - a3;
  while (v9-- >= 1)
  {
    CFRange v11 = (void *)sub_21628F0D0(a2, v9);
    MecabraCandidateGetSurface(v11, v12, v13);
    IsSingleEmojuint64_t i = CEMStringIsSingleEmoji();
    if (IsSingleEmoji) {
      uint64_t v15 = v7 + 1;
    }
    else {
      uint64_t v15 = v7;
    }
    if (IsSingleEmoji)
    {
      unint64_t v16 = v7 + 1;
      uint64_t v7 = v15;
      if (v16 < 3) {
        continue;
      }
    }
    goto LABEL_12;
  }
  uint64_t v15 = v7;
LABEL_12:
  uint64_t v17 = (uint64_t)&v8[-v15 - 4];
  if (v17 < 0) {
    uint64_t v17 = -1;
  }
  uint64_t v18 = v17 + 1;
  if (v17 + 1 >= (uint64_t)v8) {
    return 1;
  }
  uint64_t v19 = 0;
  uint64_t v32 = *MEMORY[0x263F8C2B8];
  uint64_t v30 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  uint64_t v31 = *(void *)(MEMORY[0x263F8C2B8] + 64);
  LODWORD(v2sub_2161A108C(&a9, 0) = 1;
  do
  {
    uint64_t v21 = (void *)sub_21628F0D0(a2, v18 + v19);
    int v22 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG) && sub_2161F3B4C(v21, v23, v24))
    {
      sub_216140140((uint64_t)v35);
      sub_216129E78(&v36, (uint64_t)"[ME::acceptLeftContext] #", 25);
      std::ostream::operator<<();
      uint64_t v27 = sub_2161F3B4C(v21, v25, v26);
      sub_216178BC0((uint64_t)v37, __p);
      if (v34 >= 0) {
        uint64_t v28 = __p;
      }
      else {
        uint64_t v28 = (void **)__p[0];
      }
      (*(void (**)(void *, uint64_t, void **, uint64_t))(*(void *)v27 + 528))(v27, 6, v28, 1);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      v35[0] = v32;
      *(void *)((char *)v35 + *(void *)(v32 - 24)) = v31;
      uint64_t v36 = v30;
      v37[0] = MEMORY[0x263F8C318] + 16;
      if (v38 < 0) {
        operator delete((void *)v37[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2166CA750](&v39);
    }
    uint64_t v20 = v20 & sub_216280B54(a1, v21, 0, 0);
    ++v19;
  }
  while (v18 + v19 < (uint64_t)v8);
  return v20;
}

void sub_216280B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_216140418((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_216280B54(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a4)
  {
    unint64_t v8 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v20 = 138412802;
      uint64_t Surface = MecabraCandidateGetSurface(a2, v9, v10);
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 1024;
      int v25 = 1;
      _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "[ME::acceptCandidate] S:%@ isPartial:%d performLearning:%d", (uint8_t *)&v20, 0x18u);
    }
  }
  if (*(_DWORD *)(a1 + 872) != 2) {
    *(_DWORD *)(a1 + 872) = 2;
  }
  BOOL v11 = 0;
  *(unsigned char *)(a1 + 876) = 0;
  if (a4) {
    BOOL v11 = *(unsigned char *)(a1 + 230) == 0;
  }
  uint64_t v12 = (*(uint64_t (**)(void, void *, uint64_t, BOOL))(**(void **)(a1 + 176) + 56))(*(void *)(a1 + 176), a2, a3, v11);
  uint64_t v13 = *(void **)(*(void *)(a1 + 176) + 104);
  if (sub_2161F3B4C(v13, v14, v15))
  {
    uint64_t v18 = sub_2161F3B4C(v13, v16, v17);
    (*(void (**)(void *, uint64_t, const char *, uint64_t))(*(void *)v18 + 528))(v18, 6, "[ME::acceptCandidate] Accepted", 1);
  }
  return v12;
}

uint64_t sub_216280CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 32));
  CFIndex v7 = Count - 1;
  if (Count < 1) {
    return 1;
  }
  CFIndex v8 = Count;
  CFIndex v9 = 0;
  uint64_t v10 = v36;
  uint64_t v31 = *MEMORY[0x263F8C2B8];
  unsigned int v11 = a3 ^ 1;
  uint64_t v28 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  uint64_t v29 = *(void *)(MEMORY[0x263F8C2B8] + 64);
  LODWORD(v12) = 1;
  unsigned int v30 = a3 ^ 1;
  do
  {
    uint64_t v13 = (void *)sub_21628F1BC(v4, v9);
    CFIndex v14 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG) && sub_2161F3B4C(v13, v15, v16))
    {
      CFIndex v17 = v8;
      uint64_t v18 = v4;
      uint64_t v19 = a3;
      uint64_t v20 = a1;
      uint64_t v21 = (uint64_t)v10;
      sub_216140140((uint64_t)v34);
      sub_216129E78(&v35, (uint64_t)"[ME::acceptInlineContext] #", 27);
      std::ostream::operator<<();
      __int16 v24 = sub_2161F3B4C(v13, v22, v23);
      sub_216178BC0(v21, __p);
      if (v33 >= 0) {
        int v25 = __p;
      }
      else {
        int v25 = (void **)__p[0];
      }
      (*(void (**)(void *, uint64_t, void **, uint64_t))(*(void *)v24 + 528))(v24, 6, v25, 1);
      uint64_t v10 = (void *)v21;
      if (v33 < 0) {
        operator delete(__p[0]);
      }
      v34[0] = v31;
      *(void *)((char *)v34 + *(void *)(v31 - 24)) = v29;
      uint64_t v35 = v28;
      v36[0] = MEMORY[0x263F8C318] + 16;
      a1 = v20;
      if (v37 < 0) {
        operator delete((void *)v36[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2166CA750](&v38);
      a3 = v19;
      uint64_t v4 = v18;
      CFIndex v8 = v17;
      unsigned int v11 = v30;
    }
    if (v9 < v7) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v11;
    }
    uint64_t v12 = v12 & sub_216280B54(a1, v13, v26, a3);
    ++v9;
  }
  while (v8 != v9);
  return v12;
}

void sub_216280FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_216140418((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_216280FFC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = sub_2161A2A80();
  *(_DWORD *)(a1 + 184) = sub_21628E390(a2, a3, v6) & 0xFDFFFFFF;
  if ((a2 & 0x40000) != 0 || *(unsigned char *)(a1 + 230))
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
    }
  }
  *(unsigned char *)(a1 + 228) = result;
  return result;
}

uint64_t sub_2162810B4(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4)
{
  CFIndex v8 = sub_2161A2A80();
  if (!a2) {
    return 0;
  }
  CFIndex v9 = v8;
  sub_21627F9A4(a1, a2, a3, a4);
  if (CFStringGetLength(a2) < 1)
  {
    sub_216280FFC(a1, a3, a4);
    return 1;
  }
  if (!a4)
  {
    CFArrayRef v10 = 0;
    goto LABEL_9;
  }
  CFArrayRef v10 = *(const __CFArray **)(a4 + 48);
  if (*v9)
  {
LABEL_9:
    CFArrayRef v11 = 0;
    goto LABEL_10;
  }
  CFArrayRef v11 = (const __CFArray *)sub_21628EAAC(a4, a2);
LABEL_10:

  return sub_21628051C(a1, a2, a3, a4, v10, v11);
}

void *sub_2162811A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a4 + 32));
  if (!Count) {
    return 0;
  }
  CFIndex v7 = (void *)sub_21628F1BC(a4, Count - 1);
  CFArrayRef v10 = (const void *)[v7 v8:v9];
  if (!v10) {
    return 0;
  }
  CFArrayRef v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BA018, 0);
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = (uint64_t *)(*(uint64_t (**)(void *))(*(void *)v11 + 304))(v11);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (*v13 == v15)
    {
      unsigned __int16 v16 = 0;
    }
    else
    {
      unsigned __int16 v16 = 0;
      do
      {
        v16 += *(_WORD *)(v14 + 20);
        v14 += 40;
      }
      while (v14 != v15);
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 832) - *(void *)(a1 + 824)) >> 3);
    if (v17 <= v16) {
      int v18 = 0;
    }
    else {
      int v18 = (unsigned __int16)(v17 - v16);
    }
    uint64_t v19 = (*(uint64_t (**)(void *))(*(void *)v12 + 48))(v12);
    if (v19) {
      int v20 = *(_DWORD *)(*v13 + 40 * v19 - 24) << 16;
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = operator new(4uLL);
    _DWORD *v21 = v20 | v18;
    __p = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    sub_216182F50(&__p, v21, (uint64_t)(v21 + 1), 2);
    uint64_t v23 = 0;
    __int16 v24 = 0;
    v25[0] = 0;
    v25[1] = &v23;
    char v26 = 0;
    uint64_t v23 = operator new(0x18uLL);
    __int16 v24 = v23;
    v25[0] = v23 + 3;
    __int16 v24 = sub_21618F744((uint64_t)v25, (uint64_t)&__p, (uint64_t)&v30, v23);
    if (__p)
    {
      uint64_t v28 = __p;
      operator delete(__p);
    }
    CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    operator new();
  }
  return v12;
}

void sub_216281454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162814F4(uint64_t a1, const char *a2, void *a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v4 = *(void **)(*(void *)(a1 + 176) + 104);
  if (!v4) {
    return 0;
  }
  CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(a3, a2, (uint64_t)a3);
  CFStringRef v8 = (const __CFString *)MecabraCandidateGetSurface(v4, v6, v7);
  if (CFStringCompare(Surface, v8, 0)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 176);

  return sub_216298230(v10);
}

void sub_21628157C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  if (*(_DWORD *)(a1 + 944) == 1)
  {
    *(_DWORD *)(a1 + 944) = 2;
    (*(void (**)(void))(**(void **)(a1 + 192) + 144))(*(void *)(a1 + 192));
  }

  std::mutex::unlock(v2);
}

void sub_2162815F8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21628160C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  *(_DWORD *)(a1 + 944) = 1;
  std::mutex::unlock(v2);
  if (!*(unsigned char *)(a1 + 876))
  {
    os_signpost_id_t ptr = 0;
    uint64_t v3 = sub_2162D1CE4(0xDu);
    os_signpost_id_t ptr = os_signpost_id_make_with_pointer(v3, &ptr);
    uint64_t v4 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v5 = ptr;
    if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v6 = v4;
      if (os_signpost_enabled(v4))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "MecabraAnalyzeStringWithContext", (const char *)&unk_2163CBB73, buf, 2u);
      }
    }
    (*(void (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16));
    sub_216281874(a1, a1 + 24, a1 + 96);
    (*(void (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16));
    uint64_t v7 = *(uint64_t **)(a1 + 72);
    CFStringRef v8 = *(uint64_t **)(a1 + 80);
    while (v7 != v8)
    {
      uint64_t v9 = *v7;
      *v7++ = 0;
      uint64_t v10 = (void *)sub_2161F4704(v9);
      (*(void (**)(void, void *))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v10);
    }
    sub_2161DEDD0((void *)(a1 + 32));
    sub_21618B630((void *)(a1 + 72));
    (*(void (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
    CFArrayRef v11 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v12 = ptr;
    if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v13 = v11;
      if (os_signpost_enabled(v11))
      {
        *(_WORD *)unsigned __int16 v16 = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v13, OS_SIGNPOST_INTERVAL_END, v12, "MecabraAnalyzeStringWithContext", (const char *)&unk_2163CBB73, v16, 2u);
      }
    }
  }
  std::mutex::lock(v2);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16));
  *(_DWORD *)(a1 + 944) = 0;
  std::mutex::unlock(v2);
  return v14;
}

void sub_216281860(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_216281874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(a1 + 872);
  if (v5 == 2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, a2);
  }
  else if (v5 == 1)
  {
    uint64_t v7 = a1 + 816;
    if (*(void *)(a1 + 832) != *(void *)(a1 + 824) && *(unsigned char *)(a1 + 848))
    {
      sub_2161DEDD0((void *)(a2 + 8));
      sub_21618B630((void *)(a2 + 48));
      sub_2161DEDD0((void *)(a3 + 8));
      sub_21618B630((void *)(a3 + 48));
      sub_21628049C(a1, *(const __CFString **)(a1 + 856));
      operator new();
    }
    CFStringRef v8 = sub_2162D1CE4(3u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "[ME::convert] [%@]", buf, 0xCu);
    }
    sub_2161DEDD0((void *)(a2 + 8));
    sub_21618B630((void *)(a2 + 48));
    sub_2161DEDD0((void *)(a3 + 8));
    sub_21618B630((void *)(a3 + 48));
    if (*(void *)(a1 + 216))
    {
      unsigned int v9 = *(_DWORD *)(a1 + 184);
      if ((v9 & 0x100000) != 0)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a2);
      }
      else
      {
        sub_216336EA0(*(unsigned __int16 **)(*(void *)(a1 + 256) + 96), *(void *)(*(void *)(a1 + 256) + 104), (v9 >> 6) & 8 | v9 & 0x20 | (v9 >> 4) & 0x10 | ((char)v9 >> 7) & 6, *(int **)(a1 + 256), *(CFArrayRef **)(a1 + 200), (uint64_t)buf);
        sub_2161DDBC0((void ***)(a1 + 824));
        *(_OWORD *)(a1 + 824) = *(_OWORD *)&buf[8];
        *(void *)(a1 + 84sub_2161A108C(&a9, 0) = v28;
        *(void *)&buf[16] = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 848) = v29;
        *(void *)buf = &unk_26C6BE8C8;
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v26 = &buf[8];
        sub_2161C4FA0((void ***)&v26);
        *(unsigned char *)(a1 + 848) = 0;
        *(void *)(*(void *)(a1 + 256) + 184) = v7;
        uint64_t v10 = *(unsigned __int8 **)(a1 + 800);
        if (!v10) {
          goto LABEL_31;
        }
        uint64_t v11 = *(void *)(a1 + 256);
        uint64_t v12 = *(void *)(v11 + 112);
        uint64_t v13 = *(void *)(v11 + 120);
        uint64_t v14 = *(void *)(v11 + 184);
        int v24 = 0;
        long long v26 = *(_OWORD *)(v11 + 80);
        v25[0] = v12 + 2;
        v25[1] = v13 - 1;
        BOOL v15 = (*(_DWORD *)(a1 + 184) & 2) == 0;
        unsigned __int16 v16 = operator new(0x30uLL);
        if (v15)
        {
          *unsigned __int16 v16 = &unk_26C6C8598;
          v16[1] = v25;
          v16[2] = a1;
          v16[3] = a2;
          v16[4] = &v26;
          void v16[5] = &v24;
          uint64_t v28 = v16;
          sub_21620D014(v10, v14, (uint64_t)buf);
        }
        else
        {
          *unsigned __int16 v16 = &unk_26C6C8540;
          v16[1] = v25;
          v16[2] = a1;
          v16[3] = a2;
          v16[4] = &v26;
          void v16[5] = &v24;
          uint64_t v28 = v16;
          sub_21620D360(v10, v14, (uint64_t)buf, -1);
        }
        sub_216250938(buf);
        if (!v24)
        {
LABEL_31:
          if (*(unsigned char *)(a1 + 976))
          {
            gettimeofday((timeval *)(a1 + 984), 0);
            *(unsigned char *)(a1 + 977) = 1;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a2, a3);
          sub_21627D900(a1 + 952, 0);
          std::mutex::lock((std::mutex *)(a1 + 880));
          if (*(_DWORD *)(a1 + 944) == 2)
          {
            sub_2161DEDD0((void *)(a2 + 8));
            sub_21618B630((void *)(a2 + 48));
            std::mutex::unlock((std::mutex *)(a1 + 880));
          }
          else
          {
            std::mutex::unlock((std::mutex *)(a1 + 880));
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 272))(a1, a2);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 208))(a1, a2, a3);
            if (*(void *)(a1 + 864)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a2);
            }
            sub_216216A20(a2, 0xCu, (uint64_t)"## Final ##", 0, 1u);
            uint64_t v17 = *(void *)(a2 + 48);
            uint64_t v18 = *(void *)(a2 + 56);
            uint64_t v19 = v18 - v17;
            if (v18 != v17)
            {
              uint64_t v20 = 0;
              unint64_t v21 = v19 >> 3;
              if (v21 <= 1) {
                unint64_t v21 = 1;
              }
              do
              {
                uint64_t v22 = *(void *)(v17 + 8 * v20++);
                *(void *)(v22 + 8) = v20;
              }
              while (v21 != v20);
            }
            sub_216183268((_WORD *)a2);
          }
        }
      }
    }
  }
  *(unsigned char *)(a1 + 876) = 1;
}

void sub_216281ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216250938((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216281F0C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 876) = 0;
  sub_2162979E4(*(void *)(a1 + 176));
  uint64_t result = sub_216280820(a1, a2, 0);
  if (result)
  {
    BOOL v5 = sub_216192194(a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x263EFFB40];
    return sub_216280CF4(a1, a2, v5);
  }
  return result;
}

uint64_t sub_216281F9C(uint64_t a1)
{
  sub_2162978A0(*(void *)(a1 + 176), 1);
  uint64_t result = *(void *)(a1 + 192);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 112);
    return v3();
  }
  return result;
}

uint64_t sub_21628200C(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x7002000000;
  uint64_t v14 = sub_216282234;
  BOOL v15 = sub_2162822A4;
  unsigned __int16 v16 = &unk_26C6BE968;
  memset(v17, 0, sizeof(v17));
  int v18 = 1065353216;
  memset(v19, 0, sizeof(v19));
  uint64_t v3 = *(void *)(a1 + 800);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  v10[2] = sub_216282304;
  v10[3] = &unk_264266FA8;
  v10[4] = &v11;
  v10[5] = a1;
  sub_2162E05F0(v3, a2, (uint64_t)v10);
  (*(void (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16));
  uint64_t v4 = (uint64_t *)v12[11];
  BOOL v5 = (uint64_t *)v12[12];
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    *uint64_t v4 = 0;
    uint64_t v7 = (void *)sub_2161F4704(v6);
    (*(void (**)(void, void *))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v7);

    ++v4;
  }
  (*(void (**)(void, uint64_t (*)(void *, char *, uint64_t), uint64_t))(**(void **)(a1 + 16)
                                                                                           + 32))(*(void *)(a1 + 16), sub_2162537D0, 1);
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8);
  _Block_object_dispose(&v11, 8);
  unsigned __int16 v16 = &unk_26C6BE968;
  uint64_t v20 = (void **)v19;
  sub_21618B5DC(&v20);
  sub_216144C28((uint64_t)v17);
  return v8;
}

void sub_216282210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  sub_21618A144(v8);
  _Unwind_Resume(a1);
}

__n128 sub_216282234(void *a1, uint64_t a2)
{
  a1[5] = &unk_26C6BE968;
  sub_216283568((uint64_t)(a1 + 6), (uint64_t *)(a2 + 48));
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 11) = result;
  a1[13] = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  return result;
}

uint64_t sub_2162822A4(uint64_t a1)
{
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = &unk_26C6BE968;
  uint64_t v3 = (void **)(a1 + 88);
  sub_21618B5DC(&v3);
  return sub_216144C28(a1 + 48);
}

uint64_t sub_216282304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 176))(*(void *)(a1 + 40));
  BOOL v5 = (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);

  return sub_216287278(v4, v5, v6, v7, a2, 1000, 0, 0);
}

void sub_216282380(const void *a1, uint64_t a2, int *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  BOOL v5 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v6 = os_signpost_id_make_with_pointer(v5, a1);
  unint64_t v7 = sub_2162D1CE4(0xDu);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v8 = v7;
    if (os_signpost_enabled(v7))
    {
      int v9 = *a3;
      v10[0] = 67109120;
      v10[1] = v9;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "MecabraEngineOpen", "Open MecabraEngine with input method: %d", (uint8_t *)v10, 8u);
    }
  }
  sub_2161CB214();
}

void sub_21628269C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C4010E18BA4);
  _Unwind_Resume(a1);
}

void sub_2162826E4(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_26C6BE968;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 4sub_2161A108C(&a9, 0) = 1065353216;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v1 = &unk_26C6BE968;
  long long v2 = 0u;
  long long v3 = 0u;
  int v4 = 1065353216;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  operator new();
}

void sub_216282884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  sub_21618A144((uint64_t)&a9);
  sub_21618A144(v9);
  _Unwind_Resume(a1);
}

void sub_21628290C(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a1[98];
  if (v7)
  {
    sub_21620D68C(v7, a5, a6, (uint64_t)&v17);
    uint64_t v11 = v17;
    uint64_t v12 = v18;
    if (v17 != v18)
    {
      int v13 = 12000;
      do
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
        LOBYTE(v16) = 1;
        LODWORD(v15) = 0;
        HIDWORD(v15) = v13;
        sub_2162859A8(v14, a2, a3, a4, *v11, v11[1], v11[2], v11[3], v15, 0, 0, v16, 65, 0, 1);
        ++v13;
        v11 += 7;
      }
      while (v11 != v12);
      uint64_t v11 = v17;
    }
    if (v11)
    {
      int v18 = v11;
      operator delete(v11);
    }
  }
}

void sub_216282A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216282A28(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a1[99];
  if (v7)
  {
    sub_21620D68C(v7, a5, a6, (uint64_t)&v17);
    uint64_t v11 = v17;
    uint64_t v12 = v18;
    if (v17 != v18)
    {
      int v13 = 7000;
      do
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
        LOBYTE(v16) = 1;
        LODWORD(v15) = 0;
        HIDWORD(v15) = v13;
        sub_2162859A8(v14, a2, a3, a4, *v11, v11[1], v11[2], v11[3], v15, 0, 0, v16, 85, 0, 1);
        ++v13;
        v11 += 7;
      }
      while (v11 != v12);
      uint64_t v11 = v17;
    }
    if (v11)
    {
      int v18 = v11;
      operator delete(v11);
    }
  }
}

void sub_216282B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216282B44(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 800))
  {
    uint64_t v4 = *(void *)(a1 + 256);
    uint64_t v5 = *(unsigned __int16 **)(v4 + 80);
    unint64_t v6 = *(void *)(v4 + 88);
    uint64_t v7 = *(void *)(v4 + 112);
    uint64_t v8 = *(void *)(v4 + 120);
    uint64_t v10 = (unsigned char *)(a1 + 184);
    unsigned int v9 = *(_DWORD *)(a1 + 184);
    v16[0] = 0;
    sub_216336EA0(v5, v6, (v9 >> 6) & 8 | v9 & 0x20 | (v9 >> 4) & 0x10 | ((char)v9 >> 7) & 6, (int *)v4, *(CFArrayRef **)(a1 + 200), (uint64_t)&v14);
    v18[0] = v5;
    v18[1] = v6;
    v17[0] = v7;
    v17[1] = v8;
    uint64_t v11 = *(void *)(a1 + 800);
    if ((*v10 & 2) != 0)
    {
      int v13 = operator new(0x38uLL);
      *int v13 = &unk_26C6C8490;
      v13[1] = v17;
      v13[2] = v16;
      void v13[3] = &v14;
      v13[4] = a1;
      void v13[5] = a2;
      v13[6] = v18;
      uint64_t v20 = v13;
      sub_21620D248(v11, (uint64_t)&v14, (uint64_t)v19, 0xFFFFFFFFLL);
    }
    else
    {
      uint64_t v12 = operator new(0x30uLL);
      *uint64_t v12 = &unk_26C6C84E8;
      v12[1] = v17;
      v12[2] = a1;
      v12[3] = a2;
      v12[4] = v18;
      v12[5] = v16;
      uint64_t v20 = v12;
      sub_21620CF04(v11, (uint64_t)&v14, (uint64_t)v19);
    }
    sub_216250938(v19);
    uint64_t v14 = &unk_26C6BE8C8;
    v19[0] = (void **)&v15;
    sub_2161C4FA0(v19);
  }
}

void sub_216282D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  unsigned int v9 = va_arg(va2, void **);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_216250938((uint64_t *)va2);
  va_copy((va_list)v9, va);
  sub_2161C4FA0((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_216282D64(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (std::mutex *)(a1 + 720);
  if (std::mutex::try_lock((std::mutex *)(a1 + 720)))
  {
    sub_21628290C((void *)a1, a2, a3, a4, a5, a6);
    sub_216282A28((void *)a1, a2, a3, a4, a5, a6);
    sub_216282B44(a1, (uint64_t)a2);
    std::mutex::unlock(v12);
  }
}

void sub_216282E30(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_216282E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  int v11 = *(_DWORD *)(a1 + 944);
  std::mutex::unlock(v10);
  if (v11 != 2)
  {
    std::mutex::lock((std::mutex *)(a1 + 720));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a2, a3, a4, a5);
    (*(void (**)(void))(**(void **)(a1 + 192) + 72))(*(void *)(a1 + 192));
    std::mutex::unlock((std::mutex *)(a1 + 720));
  }
}

void sub_216282F4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_216282F60(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  int v5 = *(_DWORD *)(a1 + 944);
  std::mutex::unlock(v4);
  if (v5 != 2)
  {
    uint64_t v6 = *(void **)(a1 + 256);
    if (!*(unsigned char *)(a1 + 809))
    {
      uint64_t v7 = *(uint64_t **)(a1 + 704);
      if (*(unsigned char *)(v6[23] + 32)) {
        sub_216349744(v7, (uint64_t)a2, *(void *)(a1 + 256));
      }
      else {
        sub_21634925C((uint64_t)v7, a2, (uint64_t)(v6 + 10), v6[14], v6[15]);
      }
      if ((*(unsigned char *)(a1 + 184) & 0x20) != 0) {
        sub_21634925C(*(void *)(a1 + 704), a2, (uint64_t)(v6 + 10), v6[12], v6[13]);
      }
    }
    sub_21632EC78(*(void *)(a1 + 712), (uint64_t)a2, (uint64_t)(v6 + 10));
    if ((*(unsigned char *)(a1 + 187) & 2) == 0)
    {
      uint64_t v8 = v6[12];
      unint64_t v9 = v6[13];
      uint64_t v10 = v6[14];
      uint64_t v11 = v6[15];
      sub_216282D64(a1, a2, v8, v9, v10, v11);
    }
  }
}

void sub_216283050(uint64_t a1, uint64_t a2)
{
  long long v2 = *(void **)(a2 + 48);
  for (uint64_t i = *(void **)(a2 + 56); v2 != i; ++v2)
  {
    if ((*(unsigned int (**)(void))(*(void *)*v2 + 96))() != 83)
    {
      (*(double (**)(void))(*(void *)*v2 + 392))(*v2);
      (*(void (**)(void))(*(void *)*v2 + 112))();
      sub_2161A2A80();
      (*(void (**)(void))(*(void *)*v2 + 480))();
    }
  }
}

__CFDictionary *sub_21628319C(void *a1, int a2, const __CFDictionary *a3)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    if (a2 == 2)
    {
      unint64_t v9 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
      int v16 = v9;
      uint64_t v10 = (void *)a1[18];
      uint64_t v11 = (void *)a1[19];
      while (v10 != v11)
      {
        uint64_t v12 = (uint64_t (***)(void))(*v10 + *(void *)(*(void *)*v10 - 32));
        uint64_t v13 = (**v12)(v12);
        uint64_t v14 = (void *)sub_2161F4704(v13);
        CFArrayAppendValue(v9, v14);

        ++v10;
      }
      CFDictionarySetValue(Mutable, @"candidates", v9);
      if (v9) {
        CFRelease(v9);
      }
    }
    else if (a2 == 1)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a3, @"wordListFile");
      if (Value)
      {
        sub_2161E2FFC(Value, &v16);
        uint64_t v8 = v16;
        (*(void (**)(void *, __CFArray *))(*a1 + 144))(a1, v16);
        if (v8) {
          MEMORY[0x2166CA7C0](v8, 0x1000C8077774924);
        }
      }
    }
  }
  return Mutable;
}

void sub_21628332C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    MEMORY[0x2166CA7C0](v10, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

double sub_216283378()
{
  return 0.0;
}

void *sub_216283384(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  a1[3] = 0;
  *a1 = &unk_26C6BF840;
  a1[5] = 0;
  a1[6] = 0;
  sub_21628342C(a1 + 4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  return a1;
}

void sub_2162833F4(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_26C6BE888;
  uint64_t v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21628342C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216129BA8(result, a4);
    __n128 result = sub_2162834B4((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216283494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_21613F444(&a9);
  _Unwind_Resume(a1);
}

void *sub_2162834B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_216182F50(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 1);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_21618F7F8((uint64_t)v8);
  return v4;
}

void sub_216283554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216283568(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)__n128 result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t *sub_2162835D8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    sub_2161C6D08(v2 + 8);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_216283638(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_216283674()
{
}

__n128 sub_216283688(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26C6C8540;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_2162836E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8540;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4sub_2161A108C(&a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216283724(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 == *(void *)(v5 + 8)) {
    uint64_t v7 = 2 * (memcmp(*(const void **)a2, *(const void **)v5, 2 * v6) != 0);
  }
  else {
    uint64_t v7 = 2;
  }
  BOOL v8 = !sub_216268BC4(a2, v5);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t result = sub_216287278(v9, *(void **)(a1 + 24), **(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), a2, (**(_DWORD **)(a1 + 40) + 1000), v7, v8);
  ++**(_DWORD **)(a1 + 40);
  return result;
}

uint64_t sub_2162837FC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC9E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21628383C()
{
  return &unk_26C6BC9E0;
}

void sub_21628384C()
{
}

__n128 sub_216283860(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26C6C8598;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_2162838BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8598;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4sub_2161A108C(&a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2162838FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = v6 != *(void *)(v4 + 8) || memcmp(*(const void **)a2, *(const void **)v4, 2 * v6) != 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 176))(v5);
  uint64_t result = sub_216287278(v8, *(void **)(a1 + 24), **(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), a2, (**(_DWORD **)(a1 + 40) + 1000), 0, v7);
  ++**(_DWORD **)(a1 + 40);
  return result;
}

uint64_t sub_2162839B8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC9F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162839F8()
{
  return &unk_26C6BC9F0;
}

void sub_216283A08()
{
}

__n128 sub_216283A1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26C6C8490;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4sub_2161A108C(&a9, 0) = result;
  return result;
}

__n128 sub_216283A78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8490;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4sub_2161A108C(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216283AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(v6 + 8);
  BOOL v8 = sub_216268BC4(a2, v6);
  BOOL v9 = v8;
  uint64_t v10 = (**(_DWORD **)(a1 + 16) + 1000);
  uint64_t v11 = 2 * (v5 != v7);
  if (v5 != v7 && !v8)
  {
    if (v5 && (**(_WORD **)a2 & 0xFFDFu) - 65 <= 0x19) {
      unint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24));
    }
    if (v7 >= 2) {
      int v12 = 0;
    }
    else {
      int v12 = 20000;
    }
    uint64_t v10 = (v12 + v10);
    uint64_t v11 = 2;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t result = sub_216287278(v13, *(void **)(a1 + 40), **(void **)(a1 + 48), *(void *)(*(void *)(a1 + 48) + 8), a2, v10, v11, !v9);
  ++**(_DWORD **)(a1 + 16);
  return result;
}

uint64_t sub_216283BE4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC9C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216283C24()
{
  return &unk_26C6BC9C0;
}

void sub_216283C34()
{
}

__n128 sub_216283C48(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26C6C84E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_216283CA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C84E8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4sub_2161A108C(&a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216283CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = v6 != *(void *)(v4 + 8) || memcmp(*(const void **)a2, *(const void **)v4, 2 * v6) != 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 176))(v5);
  uint64_t result = sub_216287278(v8, *(void **)(a1 + 24), **(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), a2, (**(_DWORD **)(a1 + 40) + 1000), 0, v7);
  ++**(_DWORD **)(a1 + 40);
  return result;
}

uint64_t sub_216283DA0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC9D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216283DE0()
{
  return &unk_26C6BC9D0;
}

id sub_216283DEC(void *a1, const char *a2, uint64_t a3)
{
  id v3 = a1;
  uint64_t v4 = [a1 length:a2, a3];
  if (v4 != 1)
  {
    uint64_t v8 = 0;
    BOOL v9 = &v8;
    uint64_t v10 = 0x3052000000;
    uint64_t v11 = sub_216283EF4;
    int v12 = sub_216283F04;
    uint64_t v13 = 0;
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    v7[2] = sub_216283F10;
    v7[3] = &unk_26426B830;
    v7[4] = &v8;
    [v3 enumerateSubstringsInRange:v5 options:v4 usingBlock:v7];
    id v3 = (id)v9[5];
    _Block_object_dispose(&v8, 8);
  }
  return v3;
}

void sub_216283EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_216283EF4(uint64_t a1, uint64_t a2)
{
}

void sub_216283F04(uint64_t a1)
{
}

uint64_t sub_216283F10(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t result = [a2 copyWithZone:a3];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4sub_2161A108C(&a9, 0) = result;
  *a7 = 1;
  return result;
}

void *sub_216283F50(void *a1, const char *a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v5 = [MEMORY[0x263EFF980] a2:a3];
  uint64_t v7 = [a1 componentsSeparatedByString:v6];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v9 = [v7 countByEnumeratingWithState:v8 objects:v24 count:16];
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v21 != v12) {
          objc_enumerationMutation(v7);
        }
        uint64_t v14 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        if (!objc_msgSend_hasPrefix_(v14, v10, @"s:"))
        {
          if (objc_msgSend_hasPrefix_(v14, v10, @"t:"))
          {
            int v16 = @"t:";
            if (v3 == 1) {
              continue;
            }
LABEL_12:
            uint64_t v17 = [v16 v10:v15];
            uint64_t v14 = [v14 substringFromIndex:v18];
          }
          [v5 addObject:v10];
          continue;
        }
        if (v3 != 2)
        {
          int v16 = @"s:";
          if (v3 != 5) {
            goto LABEL_12;
          }
        }
      }
      uint64_t v11 = [v7 countByEnumeratingWithState:v10 objects:&v20 count:16];
    }
    while (v11);
  }
  return v5;
}

uint64_t sub_2162840DC(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if ((unint64_t)(a3 - 5) <= 0xFFFFFFFFFFFFFFFBLL)
  {
    char v34 = [MEMORY[0x263F08690] currentHandler:a2, a3];
    [v34 handleFailureInMethod:v35 object:a2 file:@"NSString+CharacterInformationAdditions.mm" lineNumber:89 description:@"Invalid parameter not satisfying: %@", @"toneNumber >= 1 && toneNumber <= 4"];
  }
  else
  {
    uint64_t v8 = a1;
    if (objc_msgSend_rangeOfString_(a1, a2, @"v") != 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v8 = [v4 stringByReplacingOccurrencesOfString:v6 withString:@"ü"];
    }
    if (qword_26797E160 != -1) {
      dispatch_once(&qword_26797E160, &unk_26C6CA020);
    }
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = sub_216284424;
    block[3] = &unk_26426E2B8;
    block[4] = v4;
    block[5] = a2;
    if (qword_26797E170 != -1) {
      dispatch_once(&qword_26797E170, block);
    }
    if (qword_26797E158 && qword_26797E168)
    {
      uint64_t v9 = [MEMORY[0x263F08708] whitespaceCharacterSet:v6, v7];
      uint64_t v13 = [v8 rangeOfCharacterFromSet:v10 options:v9];
      if (v13 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v13 = [v8 length:v11, v12];
      }
      unint64_t v14 = [v8 rangeOfCharacterFromSet:v11 options:1 range:v13];
      unint64_t v16 = [v8 rangeOfCharacterFromSet:v15 options:5 range:v13];
      if (v14 != 0x7FFFFFFFFFFFFFFFLL && v16 != 0x7FFFFFFFFFFFFFFFLL)
      {
        unint64_t v18 = v16 - v14;
        if (v16 >= v14)
        {
          unint64_t v19 = v18 + 1;
          long long v20 = [v8 substringWithRange:v17, v14, v18 + 1];
          long long v23 = (__CFString *)(id)[v20 mutableCopyWithZone:v21];
          if (objc_msgSend_objectForKey_((void *)qword_26797E168, v24, (uint64_t)v23))
          {
            long long v26 = [[(void *)qword_26797E168 objectForKey:v25] longLongValue];
            uint64_t v29 = [v26 v27:v28] + 1;
          }
          else
          {
            uint64_t v29 = 0x8000000000000000;
          }
          __int16 v36 = word_216384E94[a3 - 1];
          uint64_t v30 = [NSString stringWithCharacters:(uint64_t)&v36 length:1];
          [v23 insertString:v31 atIndex:v30];
          CFStringNormalize(v23, kCFStringNormalizationFormC);
          return [v8 stringByReplacingCharactersInRange:v32 withString:v14];
        }
      }
    }
  }
  return (uint64_t)v4;
}

void sub_21628438C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 1)
  {
    id v9 = objc_begin_catch(exception_object);
    [objc_msgSend_callStackSymbols(v9, v10, v11)];
    NSLog(&stru_26C6FDFE0.isa);
    objc_end_catch();
    JUMPOUT(0x216284304);
  }
  _Unwind_Resume(exception_object);
}

id sub_2162843F0(uint64_t a1, const char *a2)
{
  id result = (id)[MEMORY[0x263F08708] characterSetWithCharactersInString:a2];
  qword_26797E158 = (uint64_t)result;
  return result;
}

uint64_t sub_216284424(uint64_t a1, const char *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  v19[8] = xmmword_26426E288;
  v19[9] = *(_OWORD *)off_26426E298;
  long long v20 = @"üe";
  v19[4] = xmmword_26426E248;
  v19[5] = *(_OWORD *)&off_26426E258;
  v19[6] = xmmword_26426E268;
  v19[7] = *(_OWORD *)&off_26426E278;
  v19[0] = xmmword_26426E208;
  v19[1] = *(_OWORD *)&off_26426E218;
  void v19[2] = xmmword_26426E228;
  void v19[3] = *(_OWORD *)&off_26426E238;
  v6[0] = [NSNumber numberWithUnsignedInteger:a2];
  v6[1] = v6[0];
  v6[2] = v6[0];
  v6[3] = v6[0];
  v6[4] = v6[0];
  v6[5] = v6[0];
  v6[6] = v6[0];
  v6[7] = v6[0];
  v6[8] = v6[0];
  uint64_t v7 = [NSNumber numberWithUnsignedInteger:v2];
  uint64_t v8 = v7;
  uint64_t v9 = v7;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v6[0];
  uint64_t v13 = v7;
  uint64_t v14 = v7;
  uint64_t v15 = v7;
  uint64_t v16 = v7;
  uint64_t v17 = v7;
  uint64_t v18 = v7;
  id v3 = objc_alloc(NSDictionary);
  uint64_t result = [v3 initWithObjects:v4, v6, v19, 21];
  qword_26797E168 = result;
  return result;
}

uint64_t sub_216284528(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = [a1 length:a2 with:a3];
  if (qword_26797E190 != -1) {
    dispatch_once(&qword_26797E190, &unk_26C6CA120);
  }
  uint64_t v7 = qword_26797E188;

  return [a1 compare:v5 options:512 range:v6 locale:v7];
}

uint64_t sub_2162845B0(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = [a1 length:a2 with:a3];
  if (qword_26797E1A0 != -1) {
    dispatch_once(&qword_26797E1A0, &unk_26C6CA140);
  }
  uint64_t v7 = qword_26797E198;

  return [a1 compare:v5 options:512 range:v6 locale:v7];
}

uint64_t sub_216284638(void *a1, const char *a2, void *a3)
{
  uint64_t v6 = [a1 a2:a3];
  if (qword_26797E1A0 != -1) {
    dispatch_once(&qword_26797E1A0, &unk_26C6CA140);
  }
  uint64_t v7 = [a1 compare:v5 options:512 range:0 locale:qword_26797E198];
  uint64_t v10 = [a1 length:v8];
  if (v10)
  {
    uint64_t v13 = v10;
    if (v10 == objc_msgSend_length(a3, v11, v12))
    {
      uint64_t v15 = v13 - 1;
      uint64_t v16 = [a1 substringToIndex:v14];
      uint64_t v18 = [a3 substringToIndex:v17];
      if (objc_msgSend_isEqualToString_(v16, v19, v18))
      {
        uint64_t v21 = [a1 substringFromIndex:v20];
        uint64_t v24 = [a3 substringFromIndex:v22];
        uint64_t v25 = 0;
        do
        {
          long long v26 = off_26426E2D8[v25];
          int isEqualToString = [v26 isEqualToString:v23];
          unsigned int v29 = [v26 isEqualToString:v28];
          if (v29) {
            uint64_t v30 = 1;
          }
          else {
            uint64_t v30 = v7;
          }
          if (isEqualToString) {
            uint64_t v7 = (isEqualToString & v29) - 1;
          }
          else {
            uint64_t v7 = v30;
          }
          if (isEqualToString) {
            break;
          }
          if (v29) {
            break;
          }
        }
        while (v25++ != 4);
      }
    }
  }
  return v7;
}

__CFString *sub_216284798(void *a1, const char *a2, uint64_t a3)
{
  id v3 = (__CFString *)(id)[a1 mutableCopyWithZone:a2];
  CFStringTransform(v3, 0, (CFStringRef)*MEMORY[0x263EFFF50], 0);
  return v3;
}

__CFString *sub_2162847DC(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = [a1 length];
  if (!v4) {
    return &stru_26C6FB1C0;
  }
  uint64_t v6 = v4 - 1;
  int v7 = [a1 characterAtIndex:v5 - 1];
  uint64_t result = (__CFString *)[a1 substringToIndex:v6];
  uint64_t v11 = result;
  if ((v7 - 49) > 3)
  {
    if (v7 != 53) {
      return (__CFString *)a1;
    }
  }
  else
  {
    uint64_t v12 = [a1 characterAtIndex:v10] - 48;
    uint64_t v14 = [v11 stringByReplacingOccurrencesOfString:v13 withString:@"ü"];
    return (__CFString *)MEMORY[0x270F9A6D0](v14, sel_stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber_, v12);
  }
  return result;
}

__CFString *sub_2162848A0(void *a1, const char *a2, uint64_t a3)
{
  id v3 = a1;
  uint64_t v4 = [a1 length:a2, a3];
  if (!v4) {
    return &stru_26C6FB1C0;
  }
  uint64_t v6 = v4 - 1;
  int v7 = [v3 characterAtIndex:v5 - 1];
  if ((v7 - 49) <= 4)
  {
    int v10 = v7;
    uint64_t v13 = [v3 substringToIndex:v8];
    if (qword_26797E1B0 != -1) {
      dispatch_once(&qword_26797E1B0, &unk_26C6CA180);
    }
    uint64_t v14 = (void *)qword_26797E1A8;
    uint64_t v15 = [v13 lowercaseString:v11, v12];
    uint64_t v17 = [v14 objectForKey:v16];
    if (objc_msgSend_length(v17, v18, v19))
    {
      uint64_t v21 = off_26426E2D8[(v10 - 48) - 1];
      return (__CFString *)[v17 stringByAppendingString:v20];
    }
    return (__CFString *)v3;
  }
  if (qword_26797E1B0 != -1) {
    dispatch_once(&qword_26797E1B0, &unk_26C6CA180);
  }
  long long v23 = (void *)qword_26797E1A8;
  uint64_t v25 = [v3 lowercaseString:v8, v9];

  return (__CFString *)[v23 objectForKey:v24];
}

__CFString *sub_2162849F8(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = (__CFString *)[a1 a2:a3];
  if (result) {
    return off_26426E2D8[objc_msgSend_characterAtIndex_(a1, v5, (uint64_t)&result[-1].length + 7) - 49];
  }
  return result;
}

void *sub_216284A40(void *a1, const char *a2, uint64_t a3)
{
  if (qword_26797E180 != -1) {
    dispatch_once(&qword_26797E180, &unk_26C6CA320);
  }
  uint64_t v4 = [a1 length:a2 with:a3];
  uint64_t v8 = [MEMORY[0x263F089D8] v5:v6];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      unsigned int v10 = [a1 characterAtIndex:i];
      if (v10 - 49 <= 4)
      {
        uint64_t v11 = [qword_26797E178 objectAtIndex:v7 - 49];
        [v8 appendFormat:@"%@", v11];
      }
    }
  }
  return v8;
}

uint64_t sub_216284B18()
{
  id v0 = objc_alloc(MEMORY[0x263EFF8C0]);
  uint64_t result = [v0 initWithObjects:v1, @"⼀", @"⼁", @"⼃", @"⼂", @"乛", 0];
  qword_26797E178 = result;
  return result;
}

uint64_t sub_216284B80()
{
  id v0 = objc_alloc(MEMORY[0x263EFF960]);
  uint64_t result = [v0 initWithLocaleIdentifier:@"zh-Hans"];
  qword_26797E188 = result;
  return result;
}

uint64_t sub_216284BB4()
{
  id v0 = objc_alloc(MEMORY[0x263EFF960]);
  uint64_t result = [v0 initWithLocaleIdentifier:@"zh-Hant"];
  qword_26797E198 = result;
  return result;
}

void sub_216284BE8()
{
  id v0 = (uint64_t *)sub_2162D8C20();
  uint64_t v1 = (char *)sub_2162D8D64(v0, 3uLL, off_26797C900[0], off_26797C8C0[0], 0);
  int v2 = v1[23];
  if (v2 >= 0) {
    id v3 = (const UInt8 *)v1;
  }
  else {
    id v3 = *(const UInt8 **)v1;
  }
  if (v2 >= 0) {
    CFIndex v4 = v1[23];
  }
  else {
    CFIndex v4 = *((void *)v1 + 1);
  }
  CFURLRef v5 = CFURLCreateFromFileSystemRepresentation(0, v3, v4, 0);
  id v6 = objc_alloc(NSDictionary);
  qword_26797E1A8 = [v6 initWithContentsOfURL:v7];
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t sub_216284C94(int a1, CFStringRef theString, char a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E1C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E1C8))
  {
    qword_26797E1C0 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797E1C8);
  }
  __p = 0;
  CFNumberRef v51 = 0;
  v52[0] = 0;
  unint64_t Length = CFStringGetLength(theString);
  unint64_t v6 = Length;
  if (Length)
  {
    if (Length >> 60) {
      sub_21610CB04();
    }
    int v7 = (char *)sub_21612AA90((uint64_t)v52, Length);
    __p = &v7[(unint64_t)v51 & 0xFFFFFFFFFFFFFFF0];
    CFNumberRef v51 = (char *)__p;
    v52[0] = &v7[16 * v8];
  }
  if (v6)
  {
    for (unint64_t i = 0; i < v6; i += RangeOfComposedCharactersAtIndex.length)
    {
      CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(theString, i);
      uint64_t v11 = v51;
      if ((unint64_t)v51 >= v52[0])
      {
        uint64_t v13 = (char *)__p;
        uint64_t v14 = (v51 - (unsigned char *)__p) >> 4;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
          sub_21610CB04();
        }
        uint64_t v16 = v52[0] - (void)__p;
        if ((uint64_t)(v52[0] - (void)__p) >> 3 > v15) {
          unint64_t v15 = v16 >> 3;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)sub_21612AA90((uint64_t)v52, v17);
          uint64_t v13 = (char *)__p;
          uint64_t v11 = v51;
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (CFRange *)&v18[16 * v14];
        *uint64_t v19 = RangeOfComposedCharactersAtIndex;
        long long v20 = v19;
        if (v11 != v13)
        {
          do
          {
            v20[-1] = *((CFRange *)v11 - 1);
            --v20;
            v11 -= 16;
          }
          while (v11 != v13);
          uint64_t v13 = (char *)__p;
        }
        uint64_t v12 = v19 + 1;
        __p = v20;
        CFNumberRef v51 = (char *)&v19[1];
        v52[0] = &v18[16 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)CFNumberRef v51 = RangeOfComposedCharactersAtIndex.location;
        *((void *)v11 + 1) = RangeOfComposedCharactersAtIndex.length;
        uint64_t v12 = (CFRange *)(v11 + 16);
      }
      CFNumberRef v51 = (char *)v12;
    }
  }
  if ((a3 & 1) == 0 && __p != v51)
  {
    uint64_t v21 = v51 - 16;
    if (v51 - 16 > __p)
    {
      uint64_t v22 = (char *)__p + 16;
      do
      {
        long long v23 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v22 - 1) = *(_OWORD *)v21;
        *(_OWORD *)uint64_t v21 = v23;
        v21 -= 16;
        BOOL v24 = v22 >= v21;
        v22 += 16;
      }
      while (!v24);
    }
  }
  if (!a1 && !*(unsigned char *)qword_26797E1C0)
  {
    CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
    long long v26 = (CFIndex *)__p;
    if (__p == v51)
    {
      uint64_t v28 = 0;
    }
    else
    {
      CFCharacterSetRef v27 = Predefined;
      uint64_t v28 = 0;
      do
      {
        v53.location = *v26;
        CFIndex v29 = v26[1];
        v53.length = v29;
        if (CFStringFindCharacterFromSet(theString, v27, v53, 0, 0)) {
          break;
        }
        v28 += v29;
        v26 += 2;
      }
      while (v26 != (CFIndex *)v51);
    }
    if (v28 >= 10) {
      uint64_t v39 = 10;
    }
    else {
      uint64_t v39 = v28;
    }
    goto LABEL_78;
  }
  CFCharacterSetRef v30 = (const __CFCharacterSet *)sub_21628528C();
  if (a1 || (a3 & 1) != 0)
  {
    if (a1 == 4)
    {
      CFCharacterSetRef v30 = (const __CFCharacterSet *)qword_26797E1D8;
      if (!qword_26797E1D8)
      {
        CFCharacterSetRef v32 = (const __CFCharacterSet *)sub_21628528C();
        qword_26797E1D8 = (uint64_t)CFCharacterSetCreateMutableCopy(0, v32);
        CFCharacterSetRemoveCharactersInString((CFMutableCharacterSetRef)qword_26797E1D8, @"'‘’");
        CFCharacterSetRef v30 = (const __CFCharacterSet *)qword_26797E1D8;
      }
    }
  }
  else
  {
    CFCharacterSetRef v30 = (const __CFCharacterSet *)qword_26797E1D0;
    if (!qword_26797E1D0)
    {
      CFCharacterSetRef v31 = (const __CFCharacterSet *)sub_21628528C();
      qword_26797E1D0 = (uint64_t)CFCharacterSetCreateMutableCopy(0, v31);
      CFCharacterSetRemoveCharactersInString((CFMutableCharacterSetRef)qword_26797E1D0, @"(<[{（＜［｛「『【〈《");
      CFCharacterSetRemoveCharactersInString((CFMutableCharacterSetRef)qword_26797E1D0, @"、");
      CFCharacterSetRef v30 = (const __CFCharacterSet *)qword_26797E1D0;
    }
  }
  sub_2161E212C(theString, (UniChar **)v49);
  CFStringRef v47 = 0;
  CFStringRef theStringa = 0;
  CFStringRef cf = 0;
  if (__p == v51
    || (CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x263EFFB28],
        CFStringRef v34 = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v49[0] + *(void *)__p, *((void *)__p + 1), (CFAllocatorRef)*MEMORY[0x263EFFB28]), v35 = (char *)__p, theStringa = v34, v51 == __p))
  {
    uint64_t v39 = 0;
    goto LABEL_70;
  }
  uint64_t v36 = 0;
  CFStringRef v37 = 0;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  do
  {
    uint64_t v40 = (CFIndex *)&v35[v36];
    v54.location = *v40;
    CFIndex v41 = v40[1];
    v54.length = v41;
    if (CFStringFindCharacterFromSet(theString, v30, v54, 0, 0)) {
      break;
    }
    if (v38 != ((v51 - (unsigned char *)__p) >> 4) - 1) {
      CFStringRef v47 = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v49[0] + *(void *)((char *)__p + v36 + 16), *(void *)((char *)__p + v36 + 24), v33);
    }
    if (CFStringGetLength(v34))
    {
      CFStringRef v37 = theStringa;
      int CharacterAtIndex = CFStringGetCharacterAtIndex(theStringa, 0);
      CFStringRef v43 = cf;
      if (!cf)
      {
        CFStringRef v34 = v47;
        if (CharacterAtIndex == 32)
        {
          if (!v47) {
            goto LABEL_70;
          }
          v55.length = CFStringGetLength(v47);
          v55.location = 0;
          if (CFStringFindCharacterFromSet(v47, v30, v55, 0, 0)) {
            goto LABEL_68;
          }
        }
        goto LABEL_63;
      }
      if (CharacterAtIndex == 32 && sub_216285300(cf) && (sub_216285300(v47) & 1) != 0) {
        goto LABEL_67;
      }
    }
    else
    {
      CFStringRef v43 = cf;
      CFStringRef v37 = theStringa;
      if (!cf)
      {
        CFStringRef v34 = v47;
LABEL_63:
        CFStringRef cf = v37;
        goto LABEL_64;
      }
    }
    CFRelease(v43);
    CFStringRef cf = v37;
    CFStringRef v34 = v47;
LABEL_64:
    CFStringRef v47 = 0;
    CFStringRef theStringa = v34;
    v39 += v41;
    ++v38;
    uint64_t v35 = (char *)__p;
    v36 += 16;
  }
  while (v38 < (v51 - (unsigned char *)__p) >> 4);
  if (!v37) {
    goto LABEL_70;
  }
  CFStringRef v43 = v37;
LABEL_67:
  CFRelease(v43);
  CFStringRef v34 = v47;
  if (!v47) {
    goto LABEL_70;
  }
LABEL_68:
  CFRelease(v34);
LABEL_70:
  if (theStringa) {
    CFRelease(theStringa);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
LABEL_78:
  if (__p)
  {
    CFNumberRef v51 = (char *)__p;
    operator delete(__p);
  }
  return v39;
}

void sub_2162851EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
}

uint64_t sub_21628528C()
{
  uint64_t result = qword_26797E1B8;
  if (!qword_26797E1B8)
  {
    CFMutableStringRef Mutable = CFCharacterSetCreateMutable(0);
    qword_26797E1B8 = (uint64_t)Mutable;
    CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
    CFCharacterSetUnion(Mutable, Predefined);
    id v3 = (__CFCharacterSet *)qword_26797E1B8;
    CFCharacterSetRef v4 = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
    CFCharacterSetUnion(v3, v4);
    CFCharacterSetRemoveCharactersInString((CFMutableCharacterSetRef)qword_26797E1B8, @"'- ");
    return qword_26797E1B8;
  }
  return result;
}

uint64_t sub_216285300(const __CFString *a1)
{
  if (!a1) {
    return 1;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = Length - 1;
  if (Length < 1) {
    return 1;
  }
  CFIndex v4 = Length;
  CFIndex v5 = 0;
  while (1)
  {
    unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v5);
    if (CharacterAtIndex >> 10 == 54 && v5 < v3) {
      LOWORD(CharacterAtIndex) = CFStringGetCharacterAtIndex(a1, ++v5) + ((_WORD)CharacterAtIndex << 10) + 9216;
    }
    if (!u_hasBinaryProperty((unsigned __int16)CharacterAtIndex, UCHAR_IDEOGRAPHIC)
      && u_getIntPropertyValue((unsigned __int16)CharacterAtIndex, UCHAR_EAST_ASIAN_WIDTH) != 3
      && !uscript_hasScript())
    {
      uint64_t result = uscript_hasScript();
      if (!result) {
        break;
      }
    }
    if (++v5 >= v4) {
      return 1;
    }
  }
  return result;
}

void *sub_2162853E8(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = sub_2161A2A80();
  sub_2161C04AC(0);
  a1[2] = &qword_26797EF20;
  a1[3] = sub_2161E29D0(0);
  return a1;
}

uint64_t sub_216285438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a6 || !a7)
  {
    if (a3) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7 && a5 <= 0xFF) {
      operator new();
    }
  }
  return 0;
}

void sub_2162855C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x2166CA800](v14, 0x10F3C4074548AAFLL);
  _Unwind_Resume(a1);
}

void sub_2162855FC(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, unsigned __int16 *a5, uint64_t a6)
{
  v23[4] = *MEMORY[0x263EF8340];
  sub_2161E5080(a5, a6, &__p);
  uint64_t v12 = (void *)sub_216285438(0, (uint64_t)__p, (v21 - (unsigned char *)__p) >> 1, a3, a4, (uint64_t)a5, a6);
  uint64_t v13 = v12;
  uint64_t v19 = v12;
  if (!v12) {
    goto LABEL_13;
  }
  uint64_t v22 = v12;
  uint64_t v14 = sub_2161DE698(a2 + 1, &v22);
  if (!v14)
  {
    __int16 v17 = *(_WORD *)(*(void *)(a1 + 8) + 432);
    goto LABEL_10;
  }
  unint64_t v15 = v14[3];
  unint64_t v16 = *(__int16 *)(*(void *)(a1 + 8) + 432);
  __int16 v17 = *(_WORD *)(*(void *)(a1 + 8) + 432);
  if (v15 == (uint64_t *)-1)
  {
LABEL_10:
    unint64_t v16 = v17;
    goto LABEL_11;
  }
  if (*(_WORD *)(*(void *)(a1 + 8) + 432)) {
    BOOL v18 = (unint64_t)v15 >= v16;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
LABEL_11:
    v13[1] = v16;
    (*(void (**)(void *, uint64_t, const char *, uint64_t))(*v13 + 528))(v13, 3, "Adding a single dynamic word candidate", 1);
    v23[0] = &unk_26C6B5430;
    void v23[3] = v23;
    sub_216215760(a2, (void **)&v19, 0, 0, (uint64_t)v23);
    sub_21618B96C(v23);
    uint64_t v13 = v19;
    uint64_t v19 = 0;
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v19 = 0;
LABEL_12:
  (*(void (**)(void *))(*v13 + 16))(v13);
LABEL_13:
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_216285808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 16))(a13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21628587C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, unsigned __int16 *a5, uint64_t a6)
{
  __int16 v12 = *(_WORD *)(*(void *)(a1 + 16) + 48);
  uint64_t v13 = __p;
  sub_2161E50D8(a5, a6, __p);
  unsigned __int8 v14 = v19;
  if ((v19 & 0x80u) == 0)
  {
    uint64_t v15 = v19;
  }
  else
  {
    uint64_t v13 = (void **)__p[0];
    uint64_t v15 = (uint64_t)__p[1];
  }
  if (a6 != v15 || memcmp(a5, v13, 2 * a6))
  {
    LOBYTE(v17) = 1;
    HIWORD(v16) = v12;
    LOWORD(v16) = v12;
    sub_2162859A8(a1, a2, a3, a4, (uint64_t)a5, a6, (uint64_t)v13, v15, v16, 0, 1023, v17, 83, 0, 2);
    unsigned __int8 v14 = v19;
  }
  if ((v14 & 0x80) != 0) {
    operator delete(__p[0]);
  }
}

void sub_21628598C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162859A8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, int a13, int a14, int a15)
{
  v26[4] = *MEMORY[0x263EF8340];
  HIDWORD(v17) = a13 - 65;
  LODWORD(v17) = a13 - 65;
  unsigned int v16 = v17 >> 2;
  if (v16 > 6) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = dword_216384E9C[v16];
  }
  unsigned __int8 v19 = (void *)sub_216285438(v18, a7, a8, a3, a4, a5, a6);
  uint64_t v25 = v19;
  if (!v19) {
    return 0;
  }
  v19[1] = a11;
  (*(void (**)(void *, uint64_t, const char *, uint64_t))(*v19 + 528))(v19, 3, "Adding a single dynamic word candidate", 1);
  v26[0] = &unk_26C6B5430;
  v26[3] = v26;
  uint64_t v20 = sub_216215760(a2, &v25, a15, 0, (uint64_t)v26);
  sub_21618B96C(v26);
  if ((v20 & 1) == 0)
  {
    uint64_t v21 = sub_2162D1CE4(3u);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_2160F5000, v21, OS_LOG_TYPE_DEBUG, " ∟ Rejected", buf, 2u);
    }
  }
  uint64_t v22 = v25;
  uint64_t v25 = 0;
  if (v22) {
    (*(void (**)(void *))(*(void *)v22 + 16))(v22);
  }
  return v20;
}

void sub_216285B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 16))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216285BE4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = *(__int16 *)(*(void *)(a1 + 8) + 440);
  LOBYTE(v9) = 1;
  *(void *)((char *)&v8 + 2) = *(unsigned __int16 *)(*(void *)(a1 + 16) + 48);
  LOWORD(v8) = *(_WORD *)(*(void *)(a1 + 16) + 48);
  return sub_2162859A8(a1, a2, a3, a4, a5, a6, a5, a6, v8, 0, v6 & ~(v6 >> 31), v9, 83, 0, 2);
}

void sub_216285C48(uint64_t a1, const UniChar *a2, unint64_t a3, int a4, uint64_t a5)
{
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v11 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  CFIndex Length = CFStringGetLength(v11);
  MutableCFStringRef Copy = CFStringCreateMutableCopy(v10, Length, v11);
  CFStringNormalize(MutableCopy, kCFStringNormalizationFormKC);
  CFStringRef v14 = (const __CFString *)sub_2161EBB78(MutableCopy);
  if (CFEqual(MutableCopy, v14)) {
    goto LABEL_76;
  }
  if (CFEqual(v11, MutableCopy))
  {
    CFIndex v15 = CFStringGetLength(v11);
    CFMutableStringRef v16 = CFStringCreateMutableCopy(v10, v15, v11);
    CFIndex v17 = CFStringGetLength(v11);
    CFMutableStringRef v18 = CFStringCreateMutableCopy(v10, v17, v11);
    CFStringLowercase(v16, *(CFLocaleRef *)(a1 + 24));
    CFStringUppercase(v18, *(CFLocaleRef *)(a1 + 24));
    CFComparisonResult v52 = CFStringCompare(v16, v11, 0);
    CFComparisonResult v51 = CFStringCompare(v18, v11, 0);
    uint64_t v19 = *(void *)(a1 + 8);
    if (a3)
    {
      uint64_t v50 = *(void *)(a1 + 8);
      UChar32 v20 = *a2;
      if ((v20 - 12353) < 0x56) {
        goto LABEL_15;
      }
      unint64_t v21 = 1;
      int v22 = *a2;
      BOOL v23 = 1;
      do
      {
        if (v22 == 12316 || v22 == 12540) {
          break;
        }
        BOOL v23 = v21 < a3;
        if (a3 == v21) {
          break;
        }
        int v22 = a2[v21++];
      }
      while ((v22 - 12353) >= 0x56);
      if (v23)
      {
LABEL_15:
        uint64_t v25 = 0;
LABEL_16:
        CFComparisonResult v26 = v52;
LABEL_52:
        BOOL v32 = 0;
        if (a3 && a2 && !**(unsigned char **)(a1 + 8))
        {
          int v43 = *a2;
          if ((v43 - 48) < 0xA || (unsigned __int16)(v43 + 240) <= 9u)
          {
            uint64_t v44 = 1;
            while (a3 != v44)
            {
              int v45 = a2[v44];
              unsigned int v46 = v45 - 48;
              ++v44;
              unsigned int v47 = (unsigned __int16)(v45 + 240);
              if (v46 >= 0xA && v47 >= 0xA)
              {
                unint64_t v49 = v44 - 1;
                goto LABEL_67;
              }
            }
            unint64_t v49 = a3;
LABEL_67:
            BOOL v32 = v49 >= a3;
          }
          else
          {
            BOOL v32 = 0;
          }
        }
LABEL_68:
        (*(void (**)(uint64_t, const __CFString *, uint64_t, BOOL))(a5 + 16))(a5, v11, v25, v32);
        if (v26) {
          (*(void (**)(uint64_t, CFMutableStringRef, void, void))(a5 + 16))(a5, v16, 0, 0);
        }
        if (v51) {
          (*(void (**)(uint64_t, CFMutableStringRef, void, void))(a5 + 16))(a5, v18, 0, 0);
        }
        (*(void (**)(uint64_t, const __CFString *, void, void))(a5 + 16))(a5, v14, 0, 0);
        CFStringReplaceAll(v16, v14);
        CFStringReplaceAll(v18, v14);
        CFStringLowercase(v16, *(CFLocaleRef *)(a1 + 24));
        CFStringUppercase(v18, *(CFLocaleRef *)(a1 + 24));
        (*(void (**)(uint64_t, CFMutableStringRef, void, void))(a5 + 16))(a5, v16, 0, 0);
        (*(void (**)(uint64_t, CFMutableStringRef, void, void))(a5 + 16))(a5, v18, 0, 0);
        if (v18) {
          CFRelease(v18);
        }
        if (v16) {
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if ((a4 - 19) < 4)
      {
        uint64_t v25 = 1;
        goto LABEL_16;
      }
      uint64_t v40 = 2 * a3;
      CFIndex v41 = a2;
      CFComparisonResult v26 = v52;
      do
      {
        int v42 = *v41;
        if (v42 == 46 || v42 == 64)
        {
          uint64_t v25 = 1;
          goto LABEL_52;
        }
        ++v41;
        v40 -= 2;
      }
      while (v40);
      if (u_isupper(v20) || a3 >= 2 && u_isupper(a2[1]))
      {
        uint64_t v25 = *(__int16 *)(v50 + 418);
        goto LABEL_52;
      }
      uint64_t v19 = v50;
      if (v52 == kCFCompareEqualTo)
      {
        uint64_t v25 = 0;
        goto LABEL_52;
      }
    }
    else
    {
      BOOL v32 = 0;
      uint64_t v25 = (a4 - 23) > 0xFFFFFFFB;
      if ((a4 - 23) > 0xFFFFFFFB)
      {
        CFComparisonResult v26 = v52;
        goto LABEL_68;
      }
      CFComparisonResult v26 = v52;
      if (v52 == kCFCompareEqualTo) {
        goto LABEL_68;
      }
    }
    uint64_t v25 = *(__int16 *)(v19 + 420);
    goto LABEL_52;
  }
  if (CFStringCompare(v11, v14, 0))
  {
    (*(void (**)(uint64_t, const __CFString *, void, void))(a5 + 16))(a5, v11, 0, 0);
    goto LABEL_76;
  }
  CFIndex v27 = CFStringGetLength(v11);
  CFMutableStringRef v16 = CFStringCreateMutableCopy(v10, v27, v11);
  CFIndex v28 = CFStringGetLength(v11);
  CFMutableStringRef v29 = CFStringCreateMutableCopy(v10, v28, v11);
  CFStringLowercase(v16, *(CFLocaleRef *)(a1 + 24));
  CFStringUppercase(v29, *(CFLocaleRef *)(a1 + 24));
  CFComparisonResult v30 = CFStringCompare(v16, v11, 0);
  CFComparisonResult v53 = CFStringCompare(v29, v11, 0);
  if (**(unsigned char **)(a1 + 8)) {
    goto LABEL_18;
  }
  BOOL v31 = 0;
  if (a2 && a3)
  {
    int v33 = *a2;
    if ((v33 - 48) >= 0xA && (unsigned __int16)(v33 + 240) > 9u)
    {
LABEL_18:
      BOOL v31 = 0;
      goto LABEL_19;
    }
    uint64_t v34 = 1;
    while (a3 != v34)
    {
      int v35 = a2[v34];
      unsigned int v36 = v35 - 48;
      ++v34;
      unsigned int v37 = (unsigned __int16)(v35 + 240);
      if (v36 >= 0xA && v37 >= 0xA)
      {
        unint64_t v39 = v34 - 1;
        goto LABEL_84;
      }
    }
    unint64_t v39 = a3;
LABEL_84:
    BOOL v31 = v39 >= a3;
  }
LABEL_19:
  (*(void (**)(uint64_t, const __CFString *, void, BOOL))(a5 + 16))(a5, v11, 0, v31);
  if (v30) {
    (*(void (**)(uint64_t, CFMutableStringRef, void, void))(a5 + 16))(a5, v16, 0, 0);
  }
  if (v53) {
    (*(void (**)(uint64_t, CFMutableStringRef, void, void))(a5 + 16))(a5, v29, 0, 0);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v16) {
LABEL_75:
  }
    CFRelease(v16);
LABEL_76:
  if (v14) {
    CFRelease(v14);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v11) {
    CFRelease(v11);
  }
}

void sub_2162861E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFIndex v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  BOOL v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  int v9 = va_arg(va3, const void *);
  va_copy(va4, va3);
  CFStringRef v11 = va_arg(va4, const void *);
  sub_2161B5B5C((const void **)va, 0);
  sub_2161B5B5C((const void **)va1, 0);
  sub_2161868BC((const void **)va2, 0);
  sub_2161B5B5C((const void **)va3, 0);
  sub_2161868BC((const void **)va4, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21628629C(uint64_t a1, uint64_t a2, const UniChar *a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  __int16 v7 = *(_WORD *)(*(void *)(a1 + 16) + 48);
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  int v17 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  char v15 = 0;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  _DWORD v10[2] = sub_2162863A4;
  v10[3] = &unk_264266FD0;
  void v10[6] = a1;
  v10[7] = a3;
  v10[8] = a4;
  v10[9] = a2;
  v10[10] = a5;
  v10[11] = a6;
  __int16 v11 = v7;
  v10[4] = &v12;
  v10[5] = v16;
  sub_216285C48(a1, a3, a4, a7, (uint64_t)v10);
  uint64_t v8 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(v16, 8);
  return v8;
}

void sub_216286380(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_2162863A4(uint64_t a1, const __CFString *a2)
{
}

void sub_21628652C(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216286554(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56) == v2) {
    return 0;
  }
  uint64_t v3 = a2;
  unint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(v2 + 8 * v5);
    __int16 v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 544))(v6);
    int v9 = v8;
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 408))(v6)
      && sub_216247568(v7, (unint64_t)v9))
    {
      CFAllocatorRef v10 = sub_216248198(v7, v9, 0);
      v42[1] = v10;
      if (v10)
      {
        CFArrayRef v11 = v10;
        if (**(unsigned char **)(a1 + 8))
        {
          uint64_t v12 = sub_2162153F0(v3);
          uint64_t v13 = (*(void *)(v3 + 56) - *(void *)(v3 + 48)) >> 3;
          if (v12 != -1) {
            LODWORD(v13) = v12;
          }
          int v14 = v13 + 2;
          int v15 = v14 <= 3 ? 3 : v14;
        }
        else
        {
          int v15 = 3;
        }
        CFIndex v16 = 0;
        uint64_t v40 = 0;
        CFIndex v41 = 0;
        v42[0] = 0;
        while (v16 < CFArrayGetCount(v11))
        {
          if (v15 == *(__int16 *)(*(void *)(a1 + 8) + 432)) {
            int v17 = v15 + 1;
          }
          else {
            int v17 = v15;
          }
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, v16);
          sub_2161E212C(ValueAtIndex, (UniChar **)&__p);
          unint64_t v19 = *(unsigned __int8 *)(v6 + 87);
          uint64_t v21 = *(void *)(v6 + 64);
          unint64_t v20 = *(void *)(v6 + 72);
          uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 552))(v6);
          if ((v19 & 0x80u) == 0) {
            uint64_t v24 = v6 + 64;
          }
          else {
            uint64_t v24 = v21;
          }
          if ((v19 & 0x80u) == 0) {
            unint64_t v25 = v19;
          }
          else {
            unint64_t v25 = v20;
          }
          uint64_t v26 = sub_216285438(0, (uint64_t)__p, (v39 - (unsigned char *)__p) >> 1, v24, v25, v23, v22);
          uint64_t v27 = v26;
          *(void *)(v26 + 8) = v17;
          CFIndex v28 = v41;
          if ((unint64_t)v41 >= v42[0])
          {
            uint64_t v30 = v41 - v40;
            if ((unint64_t)(v30 + 1) >> 61) {
              sub_21610CB04();
            }
            unint64_t v31 = (uint64_t)(v42[0] - (void)v40) >> 2;
            if (v31 <= v30 + 1) {
              unint64_t v31 = v30 + 1;
            }
            if (v42[0] - (void)v40 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            v43[4] = v42;
            if (v32) {
              int v33 = (char *)sub_2160FFAA8((uint64_t)v42, v32);
            }
            else {
              int v33 = 0;
            }
            uint64_t v34 = (uint64_t *)&v33[8 * v30];
            v43[0] = v33;
            v43[1] = v34;
            void v43[3] = &v33[8 * v32];
            uint64_t *v34 = v27;
            v43[2] = v34 + 1;
            sub_2161DE834((uint64_t *)&v40, v43);
            CFMutableStringRef v29 = v41;
            sub_2161DE9E4(v43);
          }
          else
          {
            *CFIndex v41 = v26;
            CFMutableStringRef v29 = v28 + 1;
          }
          CFIndex v41 = v29;
          if (__p)
          {
            unint64_t v39 = __p;
            operator delete(__p);
          }
          int v15 = v17 + 1;
          ++v16;
        }
        uint64_t v3 = a2;
        uint64_t v35 = sub_216215FFC(a2, &v40, v5 + 1);
        v43[0] = &v40;
        sub_21618B5DC((void ***)v43);
        CFRelease(v11);
        if (v35) {
          break;
        }
      }
    }
    ++v5;
    uint64_t v2 = *(void *)(v3 + 48);
    if (v5 >= (*(void *)(v3 + 56) - v2) >> 3) {
      return 0;
    }
  }
  return 1;
}

void sub_216286894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,const void *a21,__int16 a22,char a23,char a24)
{
}

BOOL sub_216286904(uint64_t a1, void *a2, unsigned __int16 *a3, unint64_t a4, int a5)
{
  int v10 = sub_2161EC60C((uint64_t)a3, a4, 0, 0);
  unsigned int v11 = v10 - 1;
  if ((v10 - 1) > 1) {
    return v11 < 2;
  }
  int v12 = v10;
  BOOL v13 = v10 == 1;
  unint64_t v14 = 0;
  if (a4)
  {
    while (1)
    {
      int v15 = a3[v14];
      BOOL v16 = v15 == 48 || v15 == 65296;
      if (!v16 && v15 != 12295) {
        break;
      }
      if (a4 == ++v14)
      {
        unint64_t v14 = a4;
        break;
      }
    }
  }
  uint64_t v51 = 0;
  CFComparisonResult v52 = &v51;
  uint64_t v53 = 0x2000000000;
  int v54 = a5;
  sub_21617FAAC(&__dst, a3, a4);
  uint64_t v18 = HIBYTE(v50);
  if (v50 >= 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (void ***)__dst;
  }
  if (v50 < 0) {
    uint64_t v18 = v49;
  }
  if (p_dst) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = 0;
  }
  int v21 = *((_DWORD *)v52 + 6);
  *((_DWORD *)v52 + 6) = v21 + 1;
  LOBYTE(v42) = 0;
  sub_2162859A8(a1, a2, (uint64_t)a3, a4, (uint64_t)a3, a4, (uint64_t)p_dst, v20, 0, 0, v21, v42, 83, 0, 2);
  if (v12 == 1)
  {
    if (!sub_2161EBA4C((uint64_t)&__dst)) {
      goto LABEL_34;
    }
LABEL_25:
    uint64_t v22 = HIBYTE(v50);
    if (v50 >= 0) {
      uint64_t v23 = &__dst;
    }
    else {
      uint64_t v23 = (void ***)__dst;
    }
    if (v50 < 0) {
      uint64_t v22 = v49;
    }
    if (v23) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = 0;
    }
    int v25 = *((_DWORD *)v52 + 6);
    *((_DWORD *)v52 + 6) = v25 + 1;
    LOBYTE(v43) = 0;
    sub_2162859A8(a1, a2, (uint64_t)a3, a4, (uint64_t)a3, a4, (uint64_t)v23, v24, 0, 0, v25, v43, 83, 0, 2);
    goto LABEL_34;
  }
  if (sub_2161EB920((uint64_t)&__dst)) {
    goto LABEL_25;
  }
LABEL_34:
  if (SHIBYTE(v50) < 0) {
    operator delete(__dst);
  }
  if (a4 <= 0x12)
  {
    uint64_t v26 = 0;
    if (a4)
    {
      uint64_t v27 = a3;
      unint64_t v28 = a4;
      do
      {
        unsigned int v30 = *v27++;
        uint64_t v29 = v30;
        if (v30 >> 4 <= 0xFF0) {
          uint64_t v31 = -48;
        }
        else {
          uint64_t v31 = -65296;
        }
        uint64_t v26 = v29 + 10 * v26 + v31;
        --v28;
      }
      while (v28);
      if (v26 >= 1000)
      {
        __dst = 0;
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        int v32 = *((_DWORD *)v52 + 6);
        *((_DWORD *)v52 + 6) = v32 + 2;
        BOOL v33 = v12 == 1;
        if (v12 == 1) {
          int v34 = v32 + 1;
        }
        else {
          int v34 = v32;
        }
        if (v33) {
          int v35 = v32;
        }
        else {
          int v35 = v32 + 1;
        }
        if (sub_2161EBD38(v26, (uint64_t)&__dst))
        {
          unsigned int v36 = v50 >= 0 ? (void **)&__dst : __dst;
          uint64_t v37 = v50 >= 0 ? HIBYTE(v50) : v49;
          LOBYTE(v43) = 0;
          sub_2162859A8(a1, a2, (uint64_t)a3, a4, (uint64_t)a3, a4, (uint64_t)v36, v37, 0, 0, v35, v43, 83, 0, 1);
          if (sub_2161EBA4C((uint64_t)&__dst))
          {
            if (v50 >= 0) {
              unint64_t v38 = &__dst;
            }
            else {
              unint64_t v38 = (void ***)__dst;
            }
            if (v50 >= 0) {
              uint64_t v39 = HIBYTE(v50);
            }
            else {
              uint64_t v39 = v49;
            }
            LOBYTE(v44) = 0;
            sub_2162859A8(a1, a2, (uint64_t)a3, a4, (uint64_t)a3, a4, (uint64_t)v38, v39, 0, 0, v34, v44, 83, 0, 1);
          }
        }
        if (SHIBYTE(v50) < 0) {
          operator delete(__dst);
        }
      }
    }
    v46[0] = MEMORY[0x263EF8330];
    v46[1] = 0x40000000;
    v46[2] = sub_216286D7C;
    v46[3] = &unk_26426E330;
    v46[6] = a4;
    v46[7] = a3;
    BOOL v47 = v13;
    v46[8] = a4;
    v46[9] = v26;
    v46[10] = a2;
    v46[4] = &v51;
    v46[5] = a1;
    v45[0] = MEMORY[0x263EF8330];
    v45[1] = 0x40000000;
    v45[2] = sub_216286E90;
    void v45[3] = &unk_26426E380;
    v45[6] = v26;
    v45[7] = v14;
    v45[8] = a2;
    v45[9] = a3;
    v45[10] = a4;
    v45[4] = &v51;
    v45[5] = a1;
    if (**(unsigned char **)(a1 + 8))
    {
      sub_216286D7C((uint64_t)v46);
      uint64_t v40 = v45;
    }
    else
    {
      sub_216286E90((uint64_t)v45);
      uint64_t v40 = v46;
    }
    ((void (*)(void))v40[2])();
  }
  _Block_object_dispose(&v51, 8);
  return v11 < 2;
}

void sub_216286D44(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_216286D7C(uint64_t a1)
{
  if (*(void *)(a1 + 48) <= 4uLL)
  {
    int v1 = *(unsigned __int8 *)(a1 + 88);
    int v2 = *(_DWORD *)(a1 + 72);
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 0x40000000;
    v3[2] = sub_216286E18;
    v3[3] = &unk_26426E308;
    uint64_t v5 = *(void *)(a1 + 80);
    long long v6 = *(_OWORD *)(a1 + 56);
    long long v4 = *(_OWORD *)(a1 + 32);
    sub_216248878(a1 + 56, v1, v2, (uint64_t)v3);
  }
}

uint64_t sub_216286E18(void *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = (void *)a1[6];
  uint64_t v5 = a1[7];
  unint64_t v6 = a1[8];
  if (a2) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[5];
  uint64_t v9 = *(void *)(a1[4] + 8);
  int v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  LOBYTE(v12) = 0;
  return sub_2162859A8(v8, v4, v5, v6, v5, v6, a2, v7, 0, 0, v10, v12, 83, 0, 1);
}

void sub_216286E90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v1 = *(void *)(a1 + 56);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = sub_216286F18;
  v3[3] = &unk_26426E358;
  uint64_t v5 = *(void *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 72);
  long long v4 = *(_OWORD *)(a1 + 32);
  sub_21619C240(v2, v1, (uint64_t)v3);
}

uint64_t sub_216286F18(void *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = (void *)a1[6];
  uint64_t v5 = a1[7];
  unint64_t v6 = a1[8];
  if (a2) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[5];
  uint64_t v9 = *(void *)(a1[4] + 8);
  int v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  LOBYTE(v12) = 0;
  return sub_2162859A8(v8, v4, v5, v6, v5, v6, a2, v7, 0, 0, v10, v12, 83, 0, 1);
}

uint64_t sub_216286F90(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const UniChar *a5, CFIndex a6, int a7)
{
  v25[4] = *MEMORY[0x263EF8340];
  BOOL v13 = sub_216268B64();
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  BOOL v16 = sub_216268B64();
  uint64_t v17 = sub_216285438(7, a3, a4, v14, v15, *v16, v16[1]);
  if (!v17) {
    return 0;
  }
  uint64_t v18 = v17;
  CFTypeRef cf = CFStringCreateWithCharacters(0, a5, a6);
  sub_216195954((const void **)(v18 + 128), cf);
  *(void *)(v18 + 8) = a7;
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v18 + 528))(v18, 3, "Adding a single dynamic word candidate", 1);
  *(void *)buf = v18;
  v25[0] = &unk_26C6B5430;
  void v25[3] = v25;
  uint64_t v19 = sub_216215760(a2, (void **)buf, 1, 0, (uint64_t)v25);
  sub_21618B96C(v25);
  uint64_t v20 = *(void *)buf;
  *(void *)buf = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
  }
  if ((v19 & 1) == 0)
  {
    int v21 = sub_2162D1CE4(3u);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_2160F5000, v21, OS_LOG_TYPE_DEBUG, " ∟ Rejected", buf, 2u);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

void sub_2162871CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216287278(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17[4] = *MEMORY[0x263EF8340];
  unsigned int v11 = (const void **)sub_216285438(11, *(void *)(a5 + 16), *(void *)(a5 + 24), a3, a4, *(void *)a5, *(void *)(a5 + 8));
  sub_21623188C((uint64_t)v11, *(char **)(a5 + 40), *(void *)(a5 + 48));
  LODWORD(valuePtr) = *(unsigned __int16 *)(a5 + 32);
  CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  sub_216195244(v11 + 31, v12);
  (*((void (**)(const void **, uint64_t))*v11 + 64))(v11, a8);
  uint64_t valuePtr = v11;
  v17[0] = &unk_26C6B5430;
  void v17[3] = v17;
  uint64_t v13 = sub_216215760(a2, (void **)&valuePtr, 1, 0, (uint64_t)v17);
  sub_21618B96C(v17);
  uint64_t v14 = valuePtr;
  uint64_t valuePtr = 0;
  if (v14) {
    (*((void (**)(const void **))*v14 + 2))(v14);
  }
  return v13;
}

void sub_216287418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21618B96C((uint64_t *)va);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 16))(a6);
  }
  _Unwind_Resume(a1);
}

void *sub_21628748C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)sub_216307320(a1, a2, 0, a3);
  void *result = &unk_26C6C2568;
  uint64_t v6 = result[3];
  result[14] = *(void *)(*(void *)(*(void *)(v6 + 8) + 32) + 32) - 1;
  result[15] = 0;
  result[16] = 0;
  result[17] = a4;
  result[4] = *(void *)(*(void *)(*(void *)(v6 + 8) + 32) + 32);
  result[5] = -1;
  return result;
}

void sub_216287504(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *(void **)(a1 + 136);
  if (v5 && objc_msgSend_rawCandidate(v5, a2, a3))
  {
    CFArrayRef v7 = *(const __CFArray **)(*(void *)(a1 + 8) + 16);
    if (v7) {
      CFIndex Count = CFArrayGetCount(v7);
    }
    else {
      CFIndex Count = 0;
    }
    while (1)
    {
      BOOL v9 = Count-- < 1;
      if (v9) {
        break;
      }
      int v10 = *(const void **)(a1 + 136);
      if (v10 == sub_21628F0D0(*(void *)(a1 + 8), Count))
      {
        uint64_t v13 = [*(void **)(a1 + 136) performSelector:v11 withObject:v12];
        uint64_t v14 = v13;
        unint64_t v15 = (unint64_t)a4[2];
        BOOL v16 = (uint64_t *)a4[1];
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = ((char *)v16 - (unsigned char *)*a4) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v19 = v15 - (void)*a4;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            uint64_t v22 = (char *)sub_2160FFAA8((uint64_t)(a4 + 2), v21);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = (uint64_t *)&v22[8 * v18];
          uint64_t v24 = &v22[8 * v21];
          *uint64_t v23 = v14;
          uint64_t v17 = v23 + 1;
          uint64_t v26 = (char *)*a4;
          int v25 = (char *)a4[1];
          if (v25 != *a4)
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *--uint64_t v23 = v27;
            }
            while (v25 != v26);
            int v25 = (char *)*a4;
          }
          *a4 = v23;
          a4[1] = v17;
          a4[2] = v24;
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *BOOL v16 = v13;
          uint64_t v17 = v16 + 1;
        }
        a4[1] = v17;
        if (Count + 1 >= 2 && v17 != *a4)
        {
          CFIndex v28 = Count - 1;
          do
          {
            if (*(void *)(a1 + 32) <= (unint64_t)(((unsigned char *)a4[1] - (unsigned char *)*a4) >> 3)) {
              break;
            }
            uint64_t v29 = (void *)sub_21628F0D0(*(void *)(a1 + 8), v28);
            int v32 = v29;
            if (v29 && objc_msgSend_rawCandidate(v29, v30, v31))
            {
              uint64_t v35 = [v32 v33:v34];
              uint64_t v36 = v35;
              unint64_t v38 = (uint64_t *)a4[1];
              unint64_t v37 = (unint64_t)a4[2];
              if ((unint64_t)v38 >= v37)
              {
                uint64_t v40 = ((char *)v38 - (unsigned char *)*a4) >> 3;
                if ((unint64_t)(v40 + 1) >> 61) {
                  sub_21610CB04();
                }
                uint64_t v41 = v37 - (void)*a4;
                uint64_t v42 = v41 >> 2;
                if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
                  uint64_t v42 = v40 + 1;
                }
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v42;
                }
                if (v43) {
                  int v44 = (char *)sub_2160FFAA8((uint64_t)(a4 + 2), v43);
                }
                else {
                  int v44 = 0;
                }
                int v45 = (uint64_t *)&v44[8 * v40];
                *int v45 = v36;
                uint64_t v39 = v45 + 1;
                BOOL v47 = (char *)*a4;
                unsigned int v46 = (char *)a4[1];
                if (v46 != *a4)
                {
                  do
                  {
                    uint64_t v48 = *((void *)v46 - 1);
                    v46 -= 8;
                    *--int v45 = v48;
                  }
                  while (v46 != v47);
                  unsigned int v46 = (char *)*a4;
                }
                *a4 = v45;
                a4[1] = v39;
                a4[2] = &v44[8 * v43];
                if (v46) {
                  operator delete(v46);
                }
              }
              else
              {
                uint64_t *v38 = v35;
                uint64_t v39 = v38 + 1;
              }
              a4[1] = v39;
            }
            BOOL v9 = v28-- <= 0;
          }
          while (!v9);
        }
        return;
      }
    }
  }
}

void sub_216287778(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162877AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 12sub_2161A108C(&a9, 0) = a2;
  return result;
}

void *sub_2162877B4(void *result, uint64_t a2)
{
  if (!a2) {
    result[16] = (uint64_t)(result[7] - result[6]) >> 2;
  }
  return result;
}

BOOL sub_2162877D0(void *a1)
{
  return !a1[15] || (unint64_t)(((uint64_t)(a1[7] - a1[6]) >> 2) - a1[16]) < a1[14];
}

void sub_216287808(uint64_t a1)
{
  sub_2163073E4(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_216287840(uint64_t a1, int *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = malloc_type_malloc(0x58uLL, 0x10B0040A3C4D6A3uLL);
  if (result)
  {
    result[4] = a1;
    result[5] = a4;
    void *result = a2;
    *((_DWORD *)result + 2sub_2161A108C(&a9, 0) = 0;
    if (a2 && a3 >= 0x10)
    {
      *((_DWORD *)result + 2sub_2161A108C(&a9, 0) = a1 == 0;
      int v9 = *a2;
      result[1] = a2 + 4;
      if (v9 == 1953655141) {
        int v10 = a2[3];
      }
      else {
        int v10 = 0;
      }
      *((_DWORD *)result + 4) = v10;
      unint64_t v11 = (a3 - 16) >> 3;
    }
    else
    {
      unint64_t v11 = 0;
      result[1] = 0;
      *((_DWORD *)result + 4) = 0;
    }
    result[3] = v11;
  }
  return result;
}

void sub_2162878F8(_DWORD *a1)
{
  if (a1)
  {
    if (a1[20])
    {
      uint64_t v2 = *(void **)a1;
      if (*(void *)a1) {
        free(v2);
      }
    }
    free(a1);
  }
}

uint64_t sub_216287948(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(a1 + 24) < 2uLL) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (a3)
  {
    uint64_t v5 = 1;
    while (1)
    {
      uint64_t v6 = *(unsigned int *)(v4 + 8 * v5);
      if ((v6 & 0x80000000) != 0) {
        return 4294967294;
      }
      uint64_t v7 = v6 + *a2 + 1;
      if (*(_DWORD *)(v4 + 8 * v7 + 4) != v5) {
        return 0xFFFFFFFFLL;
      }
      ++a2;
      uint64_t v5 = v7;
      if (!--a3) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = 1;
LABEL_10:
    uint64_t v8 = *(unsigned int *)(v4 + 8 * v7);
    uint64_t result = 0xFFFFFFFFLL;
    if (*(_DWORD *)(v4 + 8 * v8 + 4) == v7)
    {
      int v9 = *(_DWORD *)(v4 + 8 * v8);
      if (v9 < 0) {
        return -v9;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t sub_2162879E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t result = 0;
  if (a3 && *(void *)(a1 + 24) >= 2uLL)
  {
    uint64_t result = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 8);
    LODWORD(v9) = *(_DWORD *)(v8 + 8);
    LODWORD(v1sub_2161A108C(&a9, 0) = 1;
    do
    {
      int v11 = v10;
      uint64_t v10 = v9 + *(unsigned __int8 *)(a2 + v7) + 1;
      if (*(_DWORD *)(v8 + 8 * v10 + 4) != v11) {
        break;
      }
      uint64_t v9 = *(unsigned int *)(v8 + 8 * v10);
      if (*(_DWORD *)(v8 + 8 * v9 + 4) == v10)
      {
        int v12 = *(_DWORD *)(v8 + 8 * v9);
        if (v12 < 0)
        {
          if (a4)
          {
            uint64_t v13 = a5 + 24 * result;
            *(_DWORD *)(v13 + 8) = -v12;
            *(_WORD *)(v13 + 12) = v7 + 1;
            if (++result >= a4) {
              return result;
            }
          }
          else
          {
            ++result;
          }
        }
      }
      ++v7;
    }
    while (a3 != v7);
  }
  return result;
}

uint64_t sub_216287A90(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 <= 1)
  {
    unint64_t v9 = v8 + 0x2000;
    uint64_t v10 = *(uint64_t (**)(_DWORD *, size_t, void))(a1 + 32);
    int v11 = *(_DWORD **)a1;
    size_t v12 = 8 * v9 + 16;
    if (v10)
    {
      uint64_t v13 = (char *)v10(v11, v12, *(void *)(a1 + 40));
      *(void *)a1 = v13;
    }
    else
    {
      uint64_t v13 = (char *)malloc_type_realloc(v11, v12, 0x86994945uLL);
      *(void *)a1 = v13;
      if (!*(_DWORD *)(a1 + 80)) {
        *(_DWORD *)(a1 + 8sub_2161A108C(&a9, 0) = 1;
      }
    }
    if (!v13) {
      return 0xFFFFFFFFLL;
    }
    *(void *)(a1 + 8) = v13 + 16;
    if (!*(void *)(a1 + 32)) {
      bzero(&v13[8 * *(void *)(a1 + 24) + 16], 8 * (v9 - *(void *)(a1 + 24)));
    }
    *(void *)(a1 + 24) = v9;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 16);
  if (!v14)
  {
    unint64_t v15 = *(_DWORD **)a1;
    *(void *)unint64_t v15 = 0x1074726965;
    v15[2] = 65793;
    *(void *)(*(void *)(a1 + 8) + 8) = 1;
    unsigned int v14 = 1;
    *(_DWORD *)(a1 + 16) = 1;
  }
  unint64_t v16 = 0;
  unsigned int v17 = 1;
  while (1)
  {
    if (a3 == v16)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      if (v14 < v17)
      {
        unsigned int v19 = 0;
        goto LABEL_26;
      }
      unsigned int v19 = *(_DWORD *)(v18 + 8 * v17);
    }
    else
    {
      int v20 = v14 >= v17 ? *(_DWORD *)(*(void *)(a1 + 8) + 8 * v17) : 0;
      unsigned int v19 = v20 + *(unsigned __int8 *)(a2 + v16) + 1;
    }
    if (v14 < v19)
    {
      if (v17) {
        goto LABEL_30;
      }
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(a1 + 8);
LABEL_26:
    if (*(_DWORD *)(v18 + 8 * v19 + 4) != v17)
    {
LABEL_30:
      int v22 = -a4;
      while (1)
      {
        if (v16 == a3) {
          int v23 = 0;
        }
        else {
          int v23 = *(unsigned __int8 *)(a2 + v16) + 1;
        }
        unsigned int v52 = v17;
        unsigned int v24 = *(_DWORD *)(a1 + 16);
        if (v24 < v17 || !*(_DWORD *)(*(void *)(a1 + 8) + 8 * v17))
        {
          for (int i = 1; ; ++i)
          {
            unsigned int v26 = i + v23;
            int v27 = v24 >= i + v23 ? *(_DWORD *)(*(void *)(a1 + 8) + 8 * v26 + 4) : 0;
            if (v26 != 1 && v27 == 0) {
              break;
            }
          }
          if (sub_216287F68(a1, v17, i) == -1)
          {
LABEL_76:
            uint64_t v45 = 0xFFFFFFFFLL;
            goto LABEL_80;
          }
          unsigned int v24 = *(_DWORD *)(a1 + 16);
        }
        if (v24 >= v17) {
          int v29 = *(_DWORD *)(*(void *)(a1 + 8) + 8 * v17);
        }
        else {
          int v29 = 0;
        }
        unsigned int v30 = v29 + v23;
        BOOL v31 = v24 >= v29 + v23 && *(_DWORD *)(*(void *)(a1 + 8) + 8 * v30 + 4) != 0;
        if (v30 != 1 && !v31)
        {
          int v32 = v17;
          unsigned int v17 = v30;
          goto LABEL_69;
        }
        uint64_t v33 = sub_21628836C(a1, v17, (uint64_t)v54);
        if (v30 != 1)
        {
          if (v24 >= v30)
          {
            unsigned int v36 = *(_DWORD *)(*(void *)(a1 + 8) + 8 * v30 + 4);
            unint64_t v37 = sub_21628836C(a1, v36, (uint64_t)v53);
            if (v33 + 1 >= v37)
            {
              unint64_t v35 = v37;
              goto LABEL_63;
            }
          }
          else
          {
            unint64_t v34 = sub_21628836C(a1, 0, (uint64_t)v53);
            if (v33 + 1 >= v34)
            {
              unint64_t v35 = v34;
              unsigned int v36 = 0;
LABEL_63:
              unint64_t v38 = v53;
              uint64_t v39 = a1;
              unsigned int v40 = v17;
              unsigned int v41 = v36;
              __int16 v42 = 0;
              int v43 = 0;
              goto LABEL_64;
            }
          }
        }
        unint64_t v38 = v54;
        uint64_t v39 = a1;
        unsigned int v40 = v17;
        unsigned int v41 = v17;
        unint64_t v35 = v33;
        __int16 v42 = v23;
        int v43 = 1;
LABEL_64:
        if (sub_2162883D8(v39, v40, v41, (uint64_t)v38, v35, v42, v43, &v52) == -1) {
          goto LABEL_76;
        }
        int v32 = v52;
        unsigned int v24 = *(_DWORD *)(a1 + 16);
        if (v24 >= v52) {
          int v44 = *(_DWORD *)(*(void *)(a1 + 8) + 8 * v52);
        }
        else {
          int v44 = 0;
        }
        unsigned int v17 = v44 + v23;
LABEL_69:
        if ((v24 < v17 || !*(_DWORD *)(*(void *)(a1 + 8) + 8 * v17 + 4))
          && (sub_216288150(a1, v17, v32) == -1 || !v23 && sub_216287F68(a1, v17, v22) == -1))
        {
          goto LABEL_76;
        }
        if (++v16 > a3) {
          goto LABEL_79;
        }
      }
    }
    int v21 = *(_DWORD *)(v18 + 8 * v19);
    if (v21 < 0) {
      break;
    }
LABEL_28:
    ++v16;
    unsigned int v17 = v19;
    if (v16 > a3) {
      goto LABEL_79;
    }
  }
  uint64_t v45 = 0;
  if (!(v21 + a4)) {
    goto LABEL_80;
  }
  if (sub_216287F68(a1, v19, -a4) == -1) {
    return 0xFFFFFFFFLL;
  }
LABEL_79:
  uint64_t v45 = 0;
LABEL_80:
  uint64_t v46 = *(unsigned int *)(a1 + 16);
  BOOL v47 = *(_DWORD **)a1;
  *(_DWORD *)(*(void *)a1 + 12) = v46;
  if ((unint64_t)(*(void *)(a1 + 24) + ~v46) <= 0x101)
  {
    uint64_t v48 = (v46 + 259);
    uint64_t v49 = *(uint64_t (**)(void))(a1 + 32);
    if (v49)
    {
      uint64_t v50 = (char *)v49();
      *(void *)a1 = v50;
    }
    else
    {
      uint64_t v50 = (char *)malloc_type_realloc(v47, 8 * v48 + 16, 0x86994945uLL);
      *(void *)a1 = v50;
      if (!*(_DWORD *)(a1 + 80)) {
        *(_DWORD *)(a1 + 8sub_2161A108C(&a9, 0) = 1;
      }
    }
    if (v50)
    {
      *(void *)(a1 + 8) = v50 + 16;
      if (!*(void *)(a1 + 32)) {
        bzero(&v50[8 * *(void *)(a1 + 24) + 16], 8 * (v48 - *(void *)(a1 + 24)));
      }
      *(void *)(a1 + 24) = v48;
      return v45;
    }
    return 0xFFFFFFFFLL;
  }
  return v45;
}

uint64_t sub_216287F68(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 <= a2)
  {
    unint64_t v7 = v6 + 0x2000;
    unint64_t v8 = *(uint64_t (**)(void *, size_t, void))(a1 + 32);
    unint64_t v9 = *(void **)a1;
    size_t v10 = 8 * v7 + 16;
    if (v8)
    {
      int v11 = (char *)v8(v9, v10, *(void *)(a1 + 40));
      *(void *)a1 = v11;
      if (!v11) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_7;
    }
    int v11 = (char *)malloc_type_realloc(v9, v10, 0x86994945uLL);
    *(void *)a1 = v11;
    if (*(_DWORD *)(a1 + 80))
    {
      if (v11)
      {
LABEL_7:
        *(void *)(a1 + 8) = v11 + 16;
        if (!*(void *)(a1 + 32)) {
          bzero(&v11[8 * *(void *)(a1 + 24) + 16], 8 * (v7 - *(void *)(a1 + 24)));
        }
        *(void *)(a1 + 24) = v7;
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8sub_2161A108C(&a9, 0) = 1;
      if (v11) {
        goto LABEL_7;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_10:
  if (*(_DWORD *)(a1 + 16) < a2) {
    *(_DWORD *)(a1 + 16) = a2;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a1 + 8) + 8 * a2) = a3;
  return result;
}

uint64_t sub_21628804C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = 0;
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = 1;
  while (1)
  {
    if (a3 == v4)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      if (v5 < v6)
      {
        unsigned int v8 = 0;
        goto LABEL_14;
      }
      unsigned int v8 = *(_DWORD *)(v7 + 8 * v6);
    }
    else
    {
      int v9 = v5 >= v6 ? *(_DWORD *)(*(void *)(a1 + 8) + 8 * v6) : 0;
      unsigned int v8 = v9 + *(unsigned __int8 *)(a2 + v4) + 1;
    }
    if (v5 >= v8) {
      break;
    }
    if (v6) {
      return 0xFFFFFFFFLL;
    }
LABEL_16:
    ++v4;
    unsigned int v6 = v8;
    if (v4 > a3) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
LABEL_14:
  if (*(_DWORD *)(v7 + 8 * v8 + 4) != v6) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_DWORD *)(v7 + 8 * v8) & 0x80000000) == 0) {
    goto LABEL_16;
  }
  uint64_t result = sub_216287F68(a1, v8, 0);
  if (result != -1)
  {
    int v11 = sub_216288150(a1, v8, 0);
    uint64_t result = 0;
    if (v11 == -1) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_216288150(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 <= a2)
  {
    unint64_t v7 = v6 + 0x2000;
    unsigned int v8 = *(uint64_t (**)(void *, size_t, void))(a1 + 32);
    int v9 = *(void **)a1;
    size_t v10 = 8 * v7 + 16;
    if (v8)
    {
      int v11 = (char *)v8(v9, v10, *(void *)(a1 + 40));
      *(void *)a1 = v11;
      if (!v11) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_7;
    }
    int v11 = (char *)malloc_type_realloc(v9, v10, 0x86994945uLL);
    *(void *)a1 = v11;
    if (*(_DWORD *)(a1 + 80))
    {
      if (v11)
      {
LABEL_7:
        *(void *)(a1 + 8) = v11 + 16;
        if (!*(void *)(a1 + 32)) {
          bzero(&v11[8 * *(void *)(a1 + 24) + 16], 8 * (v7 - *(void *)(a1 + 24)));
        }
        *(void *)(a1 + 24) = v7;
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8sub_2161A108C(&a9, 0) = 1;
      if (v11) {
        goto LABEL_7;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_10:
  if (*(_DWORD *)(a1 + 16) < a2) {
    *(_DWORD *)(a1 + 16) = a2;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a1 + 8) + 8 * a2 + 4) = a3;
  return result;
}

uint64_t sub_216288234(uint64_t a1, unint64_t a2, void *a3, uint64_t *a4, uint64_t a5, unsigned int a6, int a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(unsigned int *)(v14 + 8 * a6);
  if (a7)
  {
    if (*(_DWORD *)(v14 + 8 * v15 + 4) == a6)
    {
      int v16 = *(_DWORD *)(v14 + 8 * v15);
      if (v16 < 0)
      {
        if (*a3)
        {
          --*a3;
        }
        else if (a2)
        {
          uint64_t v22 = *a4;
          uint64_t v23 = a5 + 24 * *a4;
          *(_DWORD *)(v23 + 8) = -v16;
          *a4 = v22 + 1;
          *(_WORD *)(v23 + 12) = a8;
          if (v22 + 1 >= a2) {
            return 1;
          }
        }
        else
        {
          ++*a4;
        }
      }
    }
  }
  uint64_t v17 = a8 + 1;
  uint64_t v18 = (v15 + 1);
  int v19 = 257;
  uint64_t v20 = 1;
  while (*(_DWORD *)(*(void *)(a1 + 8) + 8 * v18 + 4) != a6
       || !sub_216288234(a1, a2, a3, a4, a5, v18, 1, v17))
  {
    uint64_t v18 = (v18 + 1);
    if (--v19 <= 1) {
      return 0;
    }
  }
  return v20;
}

uint64_t sub_21628836C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= a2) {
    int v4 = *(_DWORD *)(*(void *)(a1 + 8) + 8 * a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    if (v3 >= v4 + (int)v5) {
      int v7 = *(_DWORD *)(*(void *)(a1 + 8) + 8 * (v4 + v5) + 4);
    }
    else {
      int v7 = 0;
    }
    if (v7 == a2) {
      *(_WORD *)(a3 + 2 * v6++) = v5;
    }
    ++v5;
  }
  while (v5 != 257);
  return v6;
}

uint64_t sub_2162883D8(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, unint64_t a5, __int16 a6, int a7, unsigned int *a8)
{
  unsigned int v14 = *(_DWORD *)(a1 + 16);
  if (v14 >= a3)
  {
    int v15 = *(_DWORD *)(*(void *)(a1 + 8) + 8 * a3);
    if (a7)
    {
LABEL_3:
      unint64_t v16 = 0;
      *(_WORD *)(a4 + 2 * a5) = a6;
      int v17 = 1;
      do
      {
        unsigned int v18 = v17 + *(__int16 *)(a4 + 2 * v16);
        if (v14 >= v18) {
          int v19 = *(_DWORD *)(*(void *)(a1 + 8) + 8 * v18 + 4);
        }
        else {
          int v19 = 0;
        }
        ++v16;
        if (v18 == 1 || v19 != 0)
        {
          ++v17;
          unint64_t v16 = 0;
        }
      }
      while (v16 < a5 + 1);
      goto LABEL_25;
    }
  }
  else
  {
    int v15 = 0;
    if (a7) {
      goto LABEL_3;
    }
  }
  unint64_t v21 = 0;
  int v17 = 1;
  do
  {
    unsigned int v22 = v17 + *(__int16 *)(a4 + 2 * v21);
    if (v14 >= v22) {
      int v23 = *(_DWORD *)(*(void *)(a1 + 8) + 8 * v22 + 4);
    }
    else {
      int v23 = 0;
    }
    ++v21;
    if (v22 == 1 || v23 != 0)
    {
      ++v17;
      unint64_t v21 = 0;
    }
  }
  while (v21 < a5);
LABEL_25:
  uint64_t result = sub_216287F68(a1, a3, v17);
  if (result != -1)
  {
    unint64_t v38 = a8;
    if (a5)
    {
      uint64_t v26 = 0;
      while (1)
      {
        unsigned int v27 = *(_DWORD *)(a1 + 16);
        int v28 = v27 >= a3 ? *(_DWORD *)(*(void *)(a1 + 8) + 8 * a3) : 0;
        int v29 = *(__int16 *)(a4 + 2 * v26);
        uint64_t v30 = (v15 + v29);
        int v31 = v27 >= v30 ? *(_DWORD *)(*(void *)(a1 + 8) + 8 * (v15 + v29)) : 0;
        unsigned int v32 = v28 + v29;
        uint64_t result = sub_216287F68(a1, v28 + v29, v31);
        if (result == -1) {
          break;
        }
        uint64_t result = sub_216288150(a1, v32, a3);
        if (result == -1) {
          break;
        }
        if (*(_DWORD *)(a1 + 16) >= v30 && *(int *)(*(void *)(a1 + 8) + 8 * v30) >= 1)
        {
          int v33 = 0;
          do
          {
            unsigned int v34 = *(_DWORD *)(a1 + 16);
            int v35 = v34 >= v30 ? *(_DWORD *)(*(void *)(a1 + 8) + 8 * v30) : 0;
            unsigned int v36 = v35 + v33;
            if (v35 + v33 > v34) {
              break;
            }
            if (*(_DWORD *)(*(void *)(a1 + 8) + 8 * v36 + 4) == v30)
            {
              uint64_t result = sub_216288150(a1, v36, v32);
              if (result == -1) {
                return result;
              }
            }
          }
          while (++v33 != 257);
        }
        uint64_t result = sub_216287F68(a1, v30, 0);
        if (result == -1) {
          break;
        }
        uint64_t result = sub_216288150(a1, v30, 0);
        if (result == -1) {
          break;
        }
        ++v26;
        if (v30 == a2 && a2 != a3) {
          a2 = v32;
        }
        if (v26 == a5) {
          goto LABEL_54;
        }
      }
    }
    else
    {
LABEL_54:
      uint64_t result = 0;
      unsigned int *v38 = a2;
    }
  }
  return result;
}

uint64_t sub_21628866C(int a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
      int v7 = (const void **)MEMORY[0x263EFFB40];
      if (v6 >= 2)
      {
        unsigned int v8 = (const void *)*MEMORY[0x263EFFB40];
        CFDictionaryAddValue(a2, @"phraseCandidateAccepted", (const void *)*MEMORY[0x263EFFB40]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 288))(v5)) {
          CFDictionaryAddValue(a2, @"dialectPhraseCandidateAccepted", v8);
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 96))(v5) == 76)
      {
        int v9 = &off_26426BB00;
      }
      else if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 96))(v5) == 85)
      {
        int v9 = &off_26426BAF8;
      }
      else if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 96))(v5) == 65)
      {
        int v9 = &off_26426BB08;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 96))(v5) != 77)
        {
LABEL_17:
          if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 80))(v5)) {
            CFDictionaryAddValue(a2, @"extensionCandidateAccepted", *v7);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 176))(v5)) {
            CFDictionaryAddValue(a2, @"emojiCandidateAccepted", *v7);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 264))(v5)) {
            CFDictionaryAddValue(a2, @"otaNonRegionalLexiconCandidateAccepted", *v7);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 272))(v5)) {
            CFDictionaryAddValue(a2, @"otaRegionalLexiconCandidateAccepted", *v7);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 200))(v5)) {
            CFDictionaryAddValue(a2, @"autocorrectionCandidateAccepted", *v7);
          }
          if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 416))(v5) & 0x400) != 0) {
            CFDictionaryAddValue(a2, @"fuzzyPinyinEnabled", *v7);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 192))(v5)) {
            CFDictionaryAddValue(a2, @"fuzzyPinyinCandidateAccepted", *v7);
          }
          return 1;
        }
        int v9 = &off_26426BAB8;
      }
      CFDictionaryAddValue(a2, *v9, *v7);
      goto LABEL_17;
    }
  }
  return result;
}

void sub_216288AA0()
{
}

uint64_t sub_216288AB4(uint64_t a1, uint64_t a2, void *a3, int **a4)
{
  int v5 = *(_DWORD *)(a1 + 84);
  if (a3)
  {
    uint64_t v6 = 0;
    int v7 = *a4;
    unsigned int v8 = a4[1];
    uint64_t v9 = 1;
    while (1)
    {
      int v10 = *(_DWORD *)(*a3 + 80);
      if (v10 == 1)
      {
        if (v7 != v8)
        {
          int v11 = v8 - 1;
          size_t v12 = v8 - 1;
          do
          {
            uint64_t v13 = v6;
            int v14 = *v12--;
            *((_DWORD *)&unk_26797F2C8 + v9--) = v14;
            if (v6) {
              break;
            }
            uint64_t v6 = 1;
            BOOL v15 = v11 == v7;
            int v11 = v12;
          }
          while (!v15);
          goto LABEL_16;
        }
        int v10 = 1;
      }
      else if (v5 == 1)
      {
        unsigned __int16 v16 = v10 - 1000;
        unsigned int v17 = v16;
        unsigned int v18 = (__int16 *)((char *)&unk_21638FFB4 + 2 * v16 - 28);
        int v19 = &aXxxxxfffffyyyy[v16 - 428];
        if (v17 < 0x1AC) {
          int v19 = v18;
        }
        int v10 = (unsigned __int16)*v19 + 1000;
      }
      *((_DWORD *)&unk_26797F2C8 + v9--) = v10;
      a3 = (void *)a3[1];
      uint64_t v13 = v6;
LABEL_16:
      if (!v13)
      {
        uint64_t v6 = 1;
        if (a3) {
          continue;
        }
      }
      uint64_t v20 = v13 + 1;
      goto LABEL_20;
    }
  }
  uint64_t v20 = 0;
  uint64_t v9 = 1;
LABEL_20:
  uint64_t v21 = *(unsigned int *)(a1 + 80);
  if (v5 == 1 && (v21 - 1) >= 2)
  {
    int v23 = &aXxxxxfffffyyyy[(unsigned __int16)(v21 - 1000) - 428];
    if ((unsigned __int16)(v21 - 1000) < 0x1ACu) {
      int v23 = (__int16 *)((char *)&unk_21638FFB4 + 2 * (unsigned __int16)(v21 - 1000) - 28);
    }
    uint64_t v21 = (unsigned __int16)*v23 + 1000;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)a2 + 40))(a2, v21, (char *)&unk_26797F2C8 + 4 * v9 + 4, v20);
}

BOOL sub_216288C00(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)(a1 + 72) + 8) & 2) != 0) {
    return 1;
  }
  uint64_t v2 = sub_2163100C0();
  return *(_DWORD *)(a1 + 84) == 1 && sub_21618FCC0(v2, (unsigned __int16 *)(*(void *)(a1 + 72) + 2)) != 0;
}

void sub_216288C60(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 84);
  if (v2 == 2)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6) {
      uint64_t v6 = *(unsigned __int16 *)(v6 + 2);
    }
    uint64_t v4 = 2 * v6;
    int v5 = &off_2642710F0;
    goto LABEL_10;
  }
  if (v2 != 1)
  {
    if (v2)
    {
      int v7 = "";
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3) {
      uint64_t v3 = *(unsigned __int16 *)(v3 + 2);
    }
    uint64_t v4 = 2 * v3;
    int v5 = &off_26426EF10;
LABEL_10:
    int v7 = v5[v4];
LABEL_15:
    sub_21610B834(a2, v7);
    return;
  }
  uint64_t v8 = *(void *)(a1 + 72);
  if (v8) {
    uint64_t v8 = *(unsigned __int16 *)(v8 + 2);
  }
  sub_2161E30A8(*(&off_264274F30 + 2 * v8), (unint64_t)*(&off_264274F30 + 2 * v8 + 1), a2);
}

uint64_t sub_216288CE4(uint64_t a1, CFTypeRef cf, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a8;
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a7;
  *(void *)a1 = &unk_26C6BF6D8;
  if (cf)
  {
    *(void *)(a1 + 72) = CFRetain(cf);
    *(unsigned char *)(a1 + 8sub_2161A108C(&a9, 0) = a4;
    uint64_t v11 = LXCursorHash();
  }
  else
  {
    uint64_t v11 = 0;
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 8sub_2161A108C(&a9, 0) = a4;
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if (a3)
  {
    LXEntryGetProbability();
    *(void *)(a1 + 96) = v12;
    uint64_t v13 = (const void *)LXEntryCopyString();
    sub_2161868BC((const void **)(a1 + 112), v13);
    *(_DWORD *)(a1 + 104) = LXEntryGetMetaFlags();
    *(void *)(a1 + 88) = sub_2161E539C(*(const __CFString **)(a1 + 112));
  }
  return a1;
}

void sub_216288DF0(_Unwind_Exception *a1)
{
  sub_2161A108C((const void **)(v1 + 72), 0);
  *(void *)uint64_t v1 = v2;
  uint64_t v4 = *(void **)(v1 + 32);
  if (v4)
  {
    *(void *)(v1 + 4sub_2161A108C(&a9, 0) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_216288E38(void *a1)
{
  *a1 = &unk_26C6BE840;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216288E88(void *a1)
{
  *a1 = &unk_26C6BE840;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

void sub_216288EF8()
{
}

BOOL sub_216288F84(uint64_t a1)
{
  return *(_DWORD *)(a1 + 80) == 1;
}

uint64_t sub_216288F94()
{
  return 0;
}

void sub_216288FA8(uint64_t a1)
{
  sub_21628916C(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216288FE0()
{
}

void sub_2162890D0(_Unwind_Exception *a1)
{
  sub_2161A108C(v3, 0);
  *uint64_t v1 = v2;
  int v5 = (void *)v1[4];
  if (v5)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  MEMORY[0x2166CA800](v1, 0x10E1C4004FE7129);
  _Unwind_Resume(a1);
}

uint64_t sub_21628911C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

BOOL sub_216289124()
{
  return LXCursorHasEntries() != 0;
}

uint64_t sub_216289148()
{
  return 1;
}

void *sub_216289150@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  CFStringRef v2 = *(const __CFString **)(a1 + 112);
  if (v2) {
    return sub_2161E3AE8(v2, a2);
  }
  else {
    return sub_21610B834(a2, "");
  }
}

uint64_t sub_21628916C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF6D8;
  sub_2161868BC((const void **)(a1 + 112), 0);
  sub_2161A108C((const void **)(a1 + 72), 0);
  *(void *)a1 = &unk_26C6BE840;
  CFStringRef v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 4sub_2161A108C(&a9, 0) = v2;
    operator delete(v2);
  }
  return a1;
}

__CFArray *sub_2162891EC()
{
  CFArrayRef EmojiTokensForString = (const __CFArray *)CEMEmojiLocaleDataCreateEmojiTokensForString();
  if (!EmojiTokensForString) {
    return 0;
  }
  CFArrayRef v1 = EmojiTokensForString;
  uint64_t Count = CFArrayGetCount(EmojiTokensForString);
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], Count, MEMORY[0x263EFFF70]);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFArrayGetValueAtIndex(v1, i);
      String = (const char *)CEMEmojiTokenGetString();
      uint64_t v6 = sub_21626852C();
      uint64_t v7 = sub_2162688BC(v6, String);
      if (v7) {
        uint64_t v8 = (const void *)v7;
      }
      else {
        uint64_t v8 = String;
      }
      CFArrayAppendValue(Mutable, v8);
    }
  }
  CFRelease(v1);
  return Mutable;
}

void sub_2162892E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216195B94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_21628930C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v25[4] = *MEMORY[0x263EF8340];
  *(void *)a3 = &unk_26C6BE968;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 4sub_2161A108C(&a9, 0) = 1065353216;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 48) = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4) & 1) != 0)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    (*(void (**)(void))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16));
    uint64_t v6 = *(void *)(a1 + 24);
    long long v18 = xmmword_216370310;
    *(void *)&long long v19 = 10;
    DWORD2(v19) = 1077936128;
    v25[0] = &unk_26C6C8E88;
    void v25[3] = v25;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 16))(&v23);
    sub_21618B8E8(v25);
    *(void *)&long long v18 = 0;
    DWORD2(v18) = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)uint64_t v21 = 0u;
    uint64_t v22 = 0;
    uint64_t v7 = v23;
    uint64_t v8 = v24;
    if (v23 != v24)
    {
      do
      {
        if (*(char *)(v7 + 23) < 0)
        {
          int v10 = *(char **)v7;
          uint64_t v9 = *(void *)(v7 + 8);
        }
        else
        {
          uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
          int v10 = (char *)v7;
        }
        sub_2161BC294(v10, v9, (uint64_t)&__p);
        if ((v17 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v17 & 0x80u) == 0) {
          uint64_t v12 = v17;
        }
        else {
          uint64_t v12 = v16;
        }
        if (!sub_216227508(a1, (uint64_t)p_p, v12))
        {
          if ((v17 & 0x80u) == 0) {
            uint64_t v13 = (__int16 *)&__p;
          }
          else {
            uint64_t v13 = (__int16 *)__p;
          }
          if ((v17 & 0x80u) == 0) {
            uint64_t v14 = v17;
          }
          else {
            uint64_t v14 = v16;
          }
          sub_2162275AC(a1, (uint64_t)&v18, v13, v14);
        }
        if ((char)v17 < 0) {
          operator delete(__p);
        }
        v7 += 32;
      }
      while (v7 != v8);
      if (v21[0])
      {
        v21[1] = v21[0];
        operator delete(v21[0]);
      }
    }
    *(void *)&long long v18 = &v23;
    sub_216175BF4((void ***)&v18);
  }
}

void sub_2162897C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_21618B8E8((void *)(v31 - 160));
  sub_21618A144(v30);
  _Unwind_Resume(a1);
}

void sub_2162898A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  *(void *)a4 = &unk_26C6BE968;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_DWORD *)(a4 + 4sub_2161A108C(&a9, 0) = 1065353216;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 48) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
    char v9 = a3 ? v8 : 0;
    if (v9)
    {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
      LODWORD(v28) = 1;
      HIDWORD(v28) = *(_DWORD *)(a3 + 96);
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
      uint64_t v11 = *(void *)(a3 + 32);
      int v29 = v10;
      int v12 = *(char *)(a3 + 55);
      if (v12 >= 0) {
        uint64_t v13 = a3 + 32;
      }
      else {
        uint64_t v13 = v11;
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(a3 + 55);
      }
      else {
        uint64_t v14 = *(void *)(a3 + 40);
      }
      uint64_t v30 = v13;
      uint64_t v31 = v14;
      uint64_t v15 = *(unsigned __int8 *)(a3 + 87);
      uint64_t v16 = a3 + 64;
      if ((v15 & 0x80u) != 0)
      {
        uint64_t v16 = *(void *)(a3 + 64);
        uint64_t v15 = *(void *)(a3 + 72);
      }
      uint64_t v32 = v16;
      uint64_t v33 = v15;
      __p[1] = 0;
      uint64_t v35 = 0;
      __p[0] = 0;
      sub_21618B040(*(void ***)(a1 + 16));
      *(_OWORD *)__p = *(_OWORD *)v24;
      uint64_t v35 = v25;
      if (sub_216227398(&v28, *(void *)(a1 + 16), 0))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        uint64_t v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        sub_216140DB4(&v39, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
        v24[0] = 0;
        v24[1] = 0;
        uint64_t v25 = 0;
        unsigned int v36 = v24;
        char v37 = 0;
        v24[0] = operator new(0x18uLL);
        v24[1] = v24[0];
        uint64_t v25 = (uint64_t)v24[0] + 24;
        v24[1] = sub_21618B69C((uint64_t)&v25, (uint64_t)&v39, (uint64_t)&v42, (void *)v24[0]);
        (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t))(*(void *)v17 + 64))(v27, v17, v24, 1);
        if (v27[0])
        {
          v27[1] = v27[0];
          operator delete(v27[0]);
        }
        unsigned int v36 = v24;
        sub_21613F444(&v36);
        if (v39)
        {
          unsigned int v40 = v39;
          operator delete(v39);
        }
        (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 16) + 96))(&v36);
        (*((void (**)(void **, void))*v36 + 3))(v36, *((unsigned int *)__p[1] - 1));
        uint64_t v18 = *(void *)(a1 + 24);
        *(_OWORD *)uint64_t v24 = xmmword_216370320;
        uint64_t v25 = 16;
        int v26 = 1082130432;
        v38[0] = &unk_26C6B5748;
        v38[3] = v38;
        (*(void (**)(uint64_t **__return_ptr))(*(void *)v18 + 16))(&v39);
        sub_21618B8E8(v38);
        if (v39 != v40 && *((float *)v39 + 6) >= -1.7)
        {
          if (*((char *)v39 + 23) < 0)
          {
            long long v20 = (char *)*v39;
            uint64_t v19 = v39[1];
          }
          else
          {
            uint64_t v19 = *((unsigned __int8 *)v39 + 23);
            long long v20 = (char *)v39;
          }
          sub_2161BC294(v20, v19, (uint64_t)v24);
          if (v25 >= 0) {
            uint64_t v21 = (__int16 *)v24;
          }
          else {
            uint64_t v21 = (__int16 *)v24[0];
          }
          if (v25 >= 0) {
            uint64_t v22 = HIBYTE(v25);
          }
          else {
            uint64_t v22 = (uint64_t)v24[1];
          }
          sub_2162275AC(a1, (uint64_t)&v28, v21, v22);
        }
        v24[0] = &v39;
        sub_216175BF4((void ***)v24);
        uint64_t v23 = v36;
        unsigned int v36 = 0;
        if (v23) {
          (*((void (**)(void **))*v23 + 1))(v23);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_216289FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_21618B8E8((void *)(v34 - 184));
  if (a31) {
    (*(void (**)(uint64_t))(*(void *)a31 + 8))(a31);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_21618A144(v33);
  _Unwind_Resume(a1);
}

void *sub_21628A124(void *a1)
{
  *a1 = &unk_26C6BDE70;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21628A194(void *a1)
{
  *a1 = &unk_26C6BDE70;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x2166CA800);
}

void sub_21628A228()
{
}

void *sub_21628A23C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6C8E88;
  return result;
}

void sub_21628A274(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C8E88;
}

uint64_t sub_21628A29C()
{
  return 1;
}

uint64_t sub_21628A2A4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21628A2E4()
{
  return &unk_26C6BCB90;
}

void sub_21628A2F4()
{
}

void *sub_21628A308()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6B5748;
  return result;
}

void sub_21628A340(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6B5748;
}

uint64_t sub_21628A368()
{
  return 1;
}

uint64_t sub_21628A370(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5100)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21628A3B0()
{
  return &unk_26C6B5100;
}

uint64_t sub_21628A3BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F3D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F3D0))
  {
    operator new();
  }
  return qword_26797F3C8;
}

void sub_21628A434(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x20C400FA29667);
  __cxa_guard_abort(&qword_26797F3D0);
  _Unwind_Resume(a1);
}

void sub_21628A46C(void *a1)
{
}

void sub_21628A4D8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x2166CA800](v3, 0x1020C40F89CB87BLL);
  uint64_t v5 = (std::__shared_weak_count *)v1[5];
  if (v5) {
    sub_2161121B0(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[3];
  if (v6) {
    sub_2161121B0(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[1];
  if (v7) {
    sub_2161121B0(v7);
  }
  _Unwind_Resume(a1);
}

void sub_21628A53C(uint64_t *a1, const __CFString *a2, __int16 a3, unsigned int a4, uint64_t a5, int a6, double a7)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  if (!a2 || !a4) {
    return;
  }
  if (a6 == 2)
  {
    uint64_t v12 = a1[4];
    uint64_t v13 = (std::__shared_weak_count *)a1[5];
    if (!v13) {
      goto LABEL_7;
    }
LABEL_6:
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
  if (a6 != 1)
  {
    uint64_t v12 = *a1;
    uint64_t v13 = (std::__shared_weak_count *)a1[1];
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = a1[2];
  uint64_t v13 = (std::__shared_weak_count *)a1[3];
  if (v13) {
    goto LABEL_6;
  }
LABEL_7:
  int v96 = v13;
  sub_216203D58(v12);
  unsigned int v14 = atomic_load((unsigned int *)(v12 + 40));
  if (v14 != 2 || !*(void *)v12) {
    goto LABEL_127;
  }
  sub_216203D58(v12);
  unsigned int v15 = atomic_load((unsigned int *)(v12 + 40));
  if (v15 == 2) {
    uint64_t v16 = *(void **)v12;
  }
  else {
    uint64_t v16 = 0;
  }
  CFIndex Length = CFStringGetLength(a2);
  uint64_t v99 = 0;
  int v100 = 0;
  uint64_t v101 = 0;
  uint64_t v18 = operator new(0x30uLL);
  void *v18 = &unk_26C6C8908;
  v18[1] = a1;
  if (a4 >= 4) {
    __int16 v19 = 4;
  }
  else {
    __int16 v19 = a4;
  }
  void v18[2] = Length;
  v18[3] = &v99;
  *((_WORD *)v18 + 16) = a4;
  *((double *)v18 + 5) = a7;
  *((void *)&v103 + 1) = v18;
  sub_21635CF04(v16, a2, (uint64_t)__p, (unsigned __int16)(v19 + a4), a3, a7);
  sub_21628C3B0(__p);
  long long v103 = 0u;
  long long v104 = 0u;
  *(_OWORD *)__p = 0u;
  while (1)
  {
    long long v20 = (const void **)v99;
    if (v99 == v100) {
      break;
    }
    uint64_t v21 = (char *)__p[1];
    uint64_t v22 = (char *)v103;
    uint64_t v23 = v103 - (unint64_t)__p[1];
    uint64_t v24 = (uint64_t)(v103 - (unint64_t)__p[1]) >> 3;
    if ((void *)v103 == __p[1]) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = 170 * v24 - 1;
    }
    if (v25 == *((void *)&v104 + 1) + (void)v104)
    {
      if ((unint64_t)v104 >= 0xAA)
      {
        *(void *)&long long v104 = v104 - 170;
        int v26 = (char *)__p[1] + 8;
        uint64_t v27 = *(void *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((void)v103 == *((void *)&v103 + 1))
        {
          uint64_t v28 = __p[0];
          if (v26 <= __p[0])
          {
            if ((void *)v103 == __p[0]) {
              unint64_t v44 = 1;
            }
            else {
              unint64_t v44 = (uint64_t)(v103 - (unint64_t)__p[0]) >> 2;
            }
            if (v44 >> 61) {
              goto LABEL_131;
            }
            uint64_t v45 = (char *)operator new(8 * v44);
            uint64_t v47 = v22 - v26;
            BOOL v46 = v22 == v26;
            uint64_t v22 = &v45[8 * (v44 >> 2)];
            if (!v46)
            {
              uint64_t v22 = &v45[8 * (v44 >> 2) + (v47 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v48 = 8 * (v47 >> 3);
              uint64_t v49 = &v45[8 * (v44 >> 2)];
              do
              {
                uint64_t v50 = *(void *)v26;
                v26 += 8;
                *(void *)uint64_t v49 = v50;
                v49 += 8;
                v48 -= 8;
              }
              while (v48);
            }
            __p[0] = v45;
            __p[1] = &v45[8 * (v44 >> 2)];
            *(void *)&long long v103 = v22;
            *((void *)&v103 + 1) = &v45[8 * v44];
            if (v28)
            {
              operator delete(v28);
              uint64_t v22 = (char *)v103;
            }
          }
          else
          {
            uint64_t v29 = (v26 - (char *)__p[0]) >> 3;
            if (v29 >= -1) {
              uint64_t v30 = v29 + 1;
            }
            else {
              uint64_t v30 = v29 + 2;
            }
            uint64_t v31 = &v26[-8 * (v30 >> 1)];
            uint64_t v32 = v103 - (void)v26;
            if ((char *)v103 != v26)
            {
              memmove(&v26[-8 * (v30 >> 1)], v26, v103 - (void)v26);
              uint64_t v22 = (char *)__p[1];
            }
            uint64_t v33 = &v22[-8 * (v30 >> 1)];
            uint64_t v22 = &v31[v32];
            __p[1] = v33;
            *(void *)&long long v103 = &v31[v32];
          }
        }
        *(void *)uint64_t v22 = v27;
LABEL_56:
        uint64_t v22 = (char *)(v103 + 8);
        *(void *)&long long v103 = v103 + 8;
        goto LABEL_57;
      }
      uint64_t v34 = (char *)*((void *)&v103 + 1);
      uint64_t v35 = (char *)__p[0];
      if (v24 < (unint64_t)((uint64_t)(*((void *)&v103 + 1) - (unint64_t)__p[0]) >> 3))
      {
        unsigned int v36 = operator new(0xFF0uLL);
        char v37 = v36;
        if (v34 == v22)
        {
          if (v21 == v35)
          {
            if (v22 == v21) {
              unint64_t v68 = 1;
            }
            else {
              unint64_t v68 = (v34 - v21) >> 2;
            }
            if (v68 >> 61) {
              goto LABEL_131;
            }
            long long v69 = (char *)operator new(8 * v68);
            unsigned int v52 = &v69[(2 * v68 + 6) & 0xFFFFFFFFFFFFFFF8];
            long long v70 = v52;
            if (v22 != v21)
            {
              uint64_t v71 = 8 * v24;
              uint64_t v72 = &v69[(2 * v68 + 6) & 0xFFFFFFFFFFFFFFF8];
              __int16 v73 = v21;
              long long v70 = &v52[8 * v24];
              do
              {
                uint64_t v74 = *(void *)v73;
                v73 += 8;
                *(void *)uint64_t v72 = v74;
                v72 += 8;
                v71 -= 8;
              }
              while (v71);
            }
            __p[0] = v69;
            __p[1] = &v69[(2 * v68 + 6) & 0xFFFFFFFFFFFFFFF8];
            *(void *)&long long v103 = v70;
            *((void *)&v103 + 1) = &v69[8 * v68];
            if (v21)
            {
              operator delete(v21);
              unsigned int v52 = (char *)__p[1];
            }
          }
          else
          {
            unsigned int v52 = v21;
          }
          *((void *)v52 - 1) = v37;
          unsigned __int8 v76 = (char *)__p[1];
          __int16 v75 = (char *)v103;
          __p[1] = (char *)__p[1] - 8;
          uint64_t v77 = *(void *)__p[1];
          __p[1] = v76;
          if ((void)v103 == *((void *)&v103 + 1))
          {
            uint64_t v78 = __p[0];
            if (v76 <= __p[0])
            {
              if ((void *)v103 == __p[0]) {
                unint64_t v83 = 1;
              }
              else {
                unint64_t v83 = (uint64_t)(v103 - (unint64_t)__p[0]) >> 2;
              }
              if (v83 >> 61) {
                goto LABEL_131;
              }
              int v84 = (char *)operator new(8 * v83);
              uint64_t v85 = v75 - v76;
              BOOL v46 = v75 == v76;
              __int16 v75 = &v84[8 * (v83 >> 2)];
              if (!v46)
              {
                __int16 v75 = &v84[8 * (v83 >> 2) + (v85 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v86 = 8 * (v85 >> 3);
                int v87 = &v84[8 * (v83 >> 2)];
                do
                {
                  uint64_t v88 = *(void *)v76;
                  v76 += 8;
                  *(void *)int v87 = v88;
                  v87 += 8;
                  v86 -= 8;
                }
                while (v86);
              }
              __p[0] = v84;
              __p[1] = &v84[8 * (v83 >> 2)];
              *(void *)&long long v103 = v75;
              *((void *)&v103 + 1) = &v84[8 * v83];
              if (v78)
              {
                operator delete(v78);
                __int16 v75 = (char *)v103;
              }
            }
            else
            {
              uint64_t v79 = (v76 - (char *)__p[0]) >> 3;
              if (v79 >= -1) {
                uint64_t v80 = v79 + 1;
              }
              else {
                uint64_t v80 = v79 + 2;
              }
              uint64_t v81 = &v76[-8 * (v80 >> 1)];
              uint64_t v82 = v103 - (void)v76;
              if ((char *)v103 != v76)
              {
                memmove(&v76[-8 * (v80 >> 1)], v76, v103 - (void)v76);
                unsigned __int8 v76 = (char *)__p[1];
              }
              __int16 v75 = &v81[v82];
              __p[1] = &v76[-8 * (v80 >> 1)];
              *(void *)&long long v103 = &v81[v82];
            }
          }
          *(void *)__int16 v75 = v77;
        }
        else
        {
          *(void *)uint64_t v22 = v36;
        }
        goto LABEL_56;
      }
      if (*((void **)&v103 + 1) == __p[0]) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)(*((void *)&v103 + 1) - (unint64_t)__p[0]) >> 2;
      }
      if (v38 >> 61) {
LABEL_131:
      }
        sub_2160FFA74();
      uint64_t v39 = (char *)operator new(8 * v38);
      unsigned int v40 = operator new(0xFF0uLL);
      uint64_t v41 = &v39[8 * v24];
      uint64_t v42 = &v39[8 * v38];
      if (v24 == v38)
      {
        if (v23 < 1)
        {
          if (v22 == v21) {
            unint64_t v53 = 1;
          }
          else {
            unint64_t v53 = v23 >> 2;
          }
          if (v53 >> 61) {
            sub_2160FFA74();
          }
          uint64_t v41 = (char *)operator new(8 * v53);
          uint64_t v42 = &v41[8 * v53];
          operator delete(v39);
          uint64_t v21 = (char *)__p[1];
          uint64_t v22 = (char *)v103;
          uint64_t v39 = v41;
        }
        else
        {
          unint64_t v43 = v24 + 2;
          if (v24 >= -1) {
            unint64_t v43 = v24 + 1;
          }
          v41 -= 8 * (v43 >> 1);
        }
      }
      *(void *)uint64_t v41 = v40;
      int v54 = v41 + 8;
      if (v22 != v21)
      {
        do
        {
          if (v41 == v39)
          {
            if (v54 >= v42)
            {
              if (v42 == v41) {
                unint64_t v59 = 1;
              }
              else {
                unint64_t v59 = (v42 - v41) >> 2;
              }
              if (v59 >> 61) {
                sub_2160FFA74();
              }
              CFNumberRef v60 = (char *)operator new(8 * v59);
              uint64_t v39 = v60;
              uint64_t v55 = &v60[(2 * v59 + 6) & 0xFFFFFFFFFFFFFFF8];
              char v56 = v55;
              uint64_t v61 = v54 - v41;
              if (v54 != v41)
              {
                char v56 = &v55[v61 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v62 = 8 * (v61 >> 3);
                CFNumberRef v63 = &v60[(2 * v59 + 6) & 0xFFFFFFFFFFFFFFF8];
                CFNumberRef v64 = v41;
                do
                {
                  uint64_t v65 = *(void *)v64;
                  v64 += 8;
                  *(void *)CFNumberRef v63 = v65;
                  v63 += 8;
                  v62 -= 8;
                }
                while (v62);
              }
              uint64_t v42 = &v60[8 * v59];
              operator delete(v41);
            }
            else
            {
              uint64_t v57 = (v42 - v54) >> 3;
              if (v57 >= -1) {
                unint64_t v58 = v57 + 1;
              }
              else {
                unint64_t v58 = v57 + 2;
              }
              char v56 = &v54[8 * (v58 >> 1)];
              uint64_t v55 = &v41[8 * (v58 >> 1)];
              if (v54 == v41)
              {
                uint64_t v39 = v54;
              }
              else
              {
                memmove(&v41[8 * (v58 >> 1)], v41, v54 - v41);
                uint64_t v39 = v41;
              }
            }
          }
          else
          {
            uint64_t v55 = v41;
            char v56 = v54;
          }
          uint64_t v66 = *((void *)v22 - 1);
          v22 -= 8;
          *((void *)v55 - 1) = v66;
          uint64_t v41 = v55 - 8;
          int v54 = v56;
        }
        while (v22 != __p[1]);
      }
      uint64_t v67 = __p[0];
      __p[0] = v39;
      __p[1] = v41;
      uint64_t v22 = v54;
      *(void *)&long long v103 = v54;
      *((void *)&v103 + 1) = v42;
      uint64_t v13 = v96;
      if (v67)
      {
        operator delete(v67);
        uint64_t v22 = (char *)v103;
      }
    }
LABEL_57:
    if (v22 == __p[1]) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = *((void *)__p[1] + (*((void *)&v104 + 1) + (void)v104) / 0xAAuLL)
    }
          + 24 * ((*((void *)&v104 + 1) + (void)v104) % 0xAAuLL);
    sub_21628BAC4(v51, v20[2], v20[1], *(double *)v20);
    ++*((void *)&v104 + 1);
    sub_21628ADDC((uint64_t *)&v99);
  }
  char v98 = 0;
  do
  {
    if (!*((void *)&v104 + 1)) {
      break;
    }
    unint64_t v89 = *((void *)&v104 + 1) + v104 - 1;
    uint64_t v90 = *((void *)__p[1] + v89 / 0xAA);
    unint64_t v91 = v89 % 0xAA;
    int v92 = (const void *)LXEntryCopyString();
    sub_21628AFFC(*(void *)(a5 + 24), (uint64_t)v92, *(void *)(v90 + 24 * v91 + 8), (uint64_t)&v98, *(double *)(v90 + 24 * v91));
    unint64_t v93 = *((void *)__p[1] + (*((void *)&v104 + 1) + (void)v104 - 1) / 0xAAuLL)
        + 24 * ((*((void *)&v104 + 1) + (void)v104 - 1) % 0xAAuLL);
    sub_21628BB80((const void **)(v93 + 16), 0);
    sub_2161868BC((const void **)(v93 + 8), 0);
    uint64_t v94 = 170 * ((uint64_t)(v103 - (unint64_t)__p[1]) >> 3) - 1;
    if ((void *)v103 == __p[1]) {
      uint64_t v94 = 0;
    }
    uint64_t v95 = (*((void *)&v104 + 1))--;
    if ((unint64_t)(v94 - (v95 + v104) - 339) <= 0xFFFFFFFFFFFFFEABLL)
    {
      operator delete(*(void **)(v103 - 8));
      *(void *)&long long v103 = v103 - 8;
    }
    if (v92) {
      CFRelease(v92);
    }
  }
  while (!v98);
  sub_21628B060((uint64_t)__p);
  if (v99)
  {
    sub_21628BBB8((uint64_t)&v99, (uint64_t)v99);
    operator delete(v99);
  }
LABEL_127:
  if (v13) {
    sub_2161121B0(v13);
  }
}

void sub_21628AD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  operator delete(v20);
  operator delete(v19);
  sub_21628B060((uint64_t)&a19);
  sub_21628B1DC(&a15);
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(a1);
}

void sub_21628ADDC(uint64_t *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v3 - *a1;
  if (v4 >= 25)
  {
    int64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    sub_21628BAC4((uint64_t)&v21, *(const void **)(v2 + 16), *(CFTypeRef *)(v2 + 8), *(double *)v2);
    uint64_t v6 = 0;
    uint64_t v7 = v2;
    do
    {
      uint64_t v8 = v7 + 24 * v6 + 24;
      uint64_t v9 = (2 * v6) | 1;
      uint64_t v10 = 2 * v6 + 2;
      if (v10 < v5 && sub_21628BD44(v7 + 24 * v6 + 24, v7 + 24 * v6 + 48))
      {
        v8 += 24;
        uint64_t v9 = v10;
      }
      *(void *)uint64_t v7 = *(void *)v8;
      uint64_t v11 = *(const void **)(v8 + 16);
      *(void *)(v8 + 16) = 0;
      sub_21628BB80((const void **)(v7 + 16), v11);
      uint64_t v12 = *(const void **)(v8 + 8);
      *(void *)(v8 + 8) = 0;
      sub_2161868BC((const void **)(v7 + 8), v12);
      uint64_t v7 = v8;
      uint64_t v6 = v9;
    }
    while (v9 <= (uint64_t)((unint64_t)(v5 - 2) >> 1));
    uint64_t v13 = (const void **)(v8 + 16);
    if (v8 == v3 - 24)
    {
      *(void *)uint64_t v8 = v21;
      CFTypeRef v18 = cf;
      CFTypeRef cf = 0;
      sub_21628BB80(v13, v18);
      CFTypeRef v19 = v22;
      CFTypeRef v22 = 0;
      sub_2161868BC((const void **)(v8 + 8), v19);
    }
    else
    {
      *(void *)uint64_t v8 = *(void *)(v3 - 24);
      unsigned int v14 = *(const void **)(v3 - 8);
      *(void *)(v3 - 8) = 0;
      sub_21628BB80(v13, v14);
      unsigned int v15 = *(const void **)(v3 - 16);
      *(void *)(v3 - 16) = 0;
      sub_2161868BC((const void **)(v8 + 8), v15);
      *(void *)(v3 - 24) = v21;
      CFTypeRef v16 = cf;
      CFTypeRef cf = 0;
      sub_21628BB80((const void **)(v3 - 8), v16);
      CFTypeRef v17 = v22;
      CFTypeRef v22 = 0;
      sub_2161868BC((const void **)(v3 - 16), v17);
      sub_21628BC1C(v2, v8 + 24, 0xAAAAAAAAAAAAAAABLL * ((v8 + 24 - v2) >> 3));
    }
    uint64_t v1 = (uint64_t)a1;
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef cf = 0;
    if (v22) {
      CFRelease(v22);
    }
    uint64_t v3 = a1[1];
  }
  sub_21628BBB8(v1, v3 - 24);
}

void sub_21628AFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21628AFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v8 = a2;
  uint64_t v7 = a3;
  double v6 = a5;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, double *, uint64_t))(*(void *)a1 + 48))(a1, &v8, &v7, &v6, a4);
}

uint64_t sub_21628B060(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    double v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        sub_21628BB80((const void **)(v7 + 16), 0);
        sub_2161868BC((const void **)(v7 + 8), 0);
        v7 += 24;
        if (v7 - (void)*v6 == 4080)
        {
          unint64_t v9 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 85;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 170;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_21628B1DC(uint64_t *a1)
{
  if (*a1)
  {
    sub_21628BBB8((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_21628B218(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_216203D58(*a1);
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 40));
  if (v3 == 2 && *(void *)v2)
  {
    uint64_t v4 = *a1;
    sub_216203D58(*a1);
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 40));
    if (v5 == 2) {
      uint64_t v6 = *(void *)v4;
    }
    else {
      uint64_t v6 = 0;
    }
    sub_21635C46C(v6);
  }
  uint64_t v7 = a1[6];
  if (v7)
  {
    unint64_t v8 = *(void **)(v7 + 8);
    if (v8)
    {
      if (sub_21622C350() && *v8)
      {
        uint64_t v9 = a1[6];
        sub_216235314(v9);
      }
    }
  }
}

void sub_21628B2CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_216203D58(v2);
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 40));
  if (v3 == 2 && *(void *)v2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    sub_216203D58(v4);
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 40));
    if (v5 == 2) {
      uint64_t v6 = *(void *)v4;
    }
    else {
      uint64_t v6 = 0;
    }
    sub_21635C46C(v6);
  }
}

CFIndex sub_21628B354(uint64_t *a1, CFStringRef theString, uint64_t a3)
{
  v14[4] = *MEMORY[0x263EF8340];
  if (!theString) {
    return 0;
  }
  CFIndex result = CFStringGetLength(theString);
  if (!result) {
    return result;
  }
  uint64_t v7 = *a1;
  sub_216203D58(*a1);
  unsigned int v8 = atomic_load((unsigned int *)(v7 + 40));
  if (v8 != 2 || !*(void *)v7) {
    return 0;
  }
  uint64_t v9 = *a1;
  sub_216203D58(v9);
  unsigned int v10 = atomic_load((unsigned int *)(v9 + 40));
  if (v10 == 2) {
    unint64_t v11 = *(void ***)v9;
  }
  else {
    unint64_t v11 = 0;
  }
  char v13 = 0;
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = &unk_26C6C88B0;
  v12[1] = a3;
  v12[2] = theString;
  v12[3] = &v13;
  v14[3] = v12;
  sub_21635CE90(v11, theString, (uint64_t)v14, 0xFFFFFFFFuLL, -INFINITY);
  sub_21628C3B0(v14);
  return v13 != 0;
}

void sub_21628B480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21628C3B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21628B494(uint64_t a1, uint64_t a2, const __CFString *a3, int a4)
{
  v21[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  if (!a2) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  sub_216203D58(v7);
  unsigned int v8 = atomic_load((unsigned int *)(v7 + 40));
  if (v8 != 2 || !*(void *)v7) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  sub_216203D58(v9);
  unsigned int v10 = atomic_load((unsigned int *)(v9 + 40));
  if (v10 == 2) {
    unint64_t v11 = *(void ***)v9;
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v19 = 0;
  if (a4)
  {
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    v22.length = CFStringGetLength(a3) - 1;
    v22.location = 1;
    uint64_t v15 = CFStringCreateWithSubstring(v14, a3, v22);
  }
  else
  {
    uint64_t v15 = CFRetain(a3);
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  }
  cf[1] = v15;
  CFStringRef v16 = CFStringCreateWithFormat(v14, 0, @"%@%@", v20, v15);
  cf[0] = v16;
  CFTypeRef v17 = operator new(0x28uLL);
  *(void *)CFTypeRef v17 = &unk_26C6C89B8;
  v17[8] = a4;
  *((void *)v17 + 2) = &v19;
  *((void *)v17 + 3) = &v20;
  *((void *)v17 + 4) = cf;
  void v21[3] = v17;
  sub_21635CE90(v11, v16, (uint64_t)v21, 0xFFFFFFFFuLL, -INFINITY);
  sub_21628C3B0(v21);
  uint64_t v12 = v19;
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v12;
}

void sub_21628B650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21628B6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    unsigned int v3 = *(void **)(v2 + 8);
    if (v3)
    {
      if (sub_21622C350() && *v3)
      {
        uint64_t v6 = *(void *)(a1 + 48);
        sub_2162353A0(v6, a2);
      }
    }
  }
}

void sub_21628B718(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    unsigned int v3 = *(void **)(v2 + 8);
    if (v3)
    {
      if (sub_21622C350() && *v3)
      {
        uint64_t v6 = *(void *)(a1 + 48);
        sub_2162354AC(v6, a2);
      }
    }
  }
}

uint64_t *sub_21628B790(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result[6];
  if (v2)
  {
    unsigned int v3 = *(void **)(v2 + 8);
    if (v3)
    {
      unsigned int v5 = result;
      CFIndex result = (uint64_t *)sub_21622C350();
      if (result)
      {
        if (*v3)
        {
          uint64_t v6 = (uint64_t *)v5[6];
          return sub_216235728(v6, a2);
        }
      }
    }
  }
  return result;
}

uint64_t sub_21628B808(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t result = sub_21622C350();
  if (!result) {
    return result;
  }
  return *v2 && (uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 16)) != 0 && (*(_DWORD *)(v5 + 8) - 5) < 0x60;
}

void sub_21628B870(uint64_t a1, __int16 a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    uint64_t v6 = *(void **)(v5 + 8);
    if (v6)
    {
      if (sub_21622C350())
      {
        if (*v6)
        {
          int v20 = 0;
          uint64_t v12 = *(void *)(a1 + 48);
          v13[0] = MEMORY[0x263EF8330];
          v13[1] = 0x40000000;
          v13[2] = sub_21628B950;
          void v13[3] = &unk_264266FF0;
          v13[4] = a1;
          *(double *)&void v13[5] = a4;
          *(double *)&v13[6] = a5;
          __int16 v14 = a2;
          uint64_t v15 = a3;
          CFStringRef v16 = &v20;
          uint64_t v17 = a1;
          int v18 = 0;
          __int16 v19 = a2;
          sub_2162358E0(v12, (uint64_t)v13);
        }
      }
    }
  }
}

double *sub_21628B950(double *result, const __CFString *a2, unsigned char *a3, float a4)
{
  v10[4] = *MEMORY[0x263EF8340];
  if (result[5] > a4) {
    goto LABEL_3;
  }
  uint64_t v6 = result;
  uint64_t v7 = (uint64_t *)*((void *)result + 4);
  double v8 = result[6];
  uint64_t v9 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v9 = &unk_26C6C8960;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(v6 + 7);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v6 + 9);
  v10[3] = v9;
  sub_21628A53C(v7, a2, 0, 4u, (uint64_t)v10, 0, v8);
  uint64_t result = (double *)sub_2161B608C(v10);
  if (*((_DWORD *)v6 + 22) >= (int)*((unsigned __int16 *)v6 + 46)) {
LABEL_3:
  }
    *a3 = 1;
  return result;
}

void sub_21628BA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161B608C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21628BA60(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = result;
      uint64_t result = sub_21622C350();
      if (result)
      {
        if (*v2)
        {
          uint64_t v4 = *(void *)(v3 + 48);
          return sub_216235314(v4);
        }
      }
    }
  }
  return result;
}

uint64_t sub_21628BAC4(uint64_t a1, const void *a2, CFTypeRef cf, double a4)
{
  *(double *)a1 = a4;
  uint64_t v6 = (void *)(a1 + 8);
  if (cf) {
    CFTypeRef v7 = CFRetain(cf);
  }
  else {
    CFTypeRef v7 = 0;
  }
  *uint64_t v6 = v7;
  if (a2) {
    CFTypeRef v8 = CFRetain(a2);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *(void *)(a1 + 16) = v8;
  return a1;
}

void sub_21628BB2C(_Unwind_Exception *a1)
{
  sub_2161868BC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21628BB44(uint64_t a1)
{
  return a1;
}

void sub_21628BB80(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_21628BBB8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 24)
  {
    sub_21628BB80((const void **)(i - 8), 0);
    sub_2161868BC((const void **)(i - 16), 0);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_21628BC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v5 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v6 = (const void **)(a1 + 24 * v5);
    CFTypeRef v7 = (const void **)(a2 - 24);
    if (sub_21628BD44((uint64_t)v6, a2 - 24))
    {
      sub_21628BAC4((uint64_t)&v13, *(const void **)(a2 - 8), *(CFTypeRef *)(a2 - 16), *(double *)(a2 - 24));
      do
      {
        CFTypeRef v8 = v6;
        *CFTypeRef v7 = *v6;
        uint64_t v9 = v6[2];
        v6[2] = 0;
        sub_21628BB80(v7 + 2, v9);
        unsigned int v10 = v6[1];
        v6[1] = 0;
        sub_2161868BC(v7 + 1, v10);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (const void **)(a1 + 24 * v5);
        CFTypeRef v7 = v8;
      }
      while (sub_21628BD44((uint64_t)v6, (uint64_t)&v13));
      void *v8 = v13;
      CFTypeRef v11 = cf;
      CFTypeRef cf = 0;
      sub_21628BB80(v8 + 2, v11);
      CFTypeRef v12 = v14;
      CFTypeRef v14 = 0;
      sub_2161868BC(v8 + 1, v12);
      if (cf) {
        CFRelease(cf);
      }
      CFTypeRef cf = 0;
      if (v14) {
        CFRelease(v14);
      }
    }
  }
}

void sub_21628BD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21628BB44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21628BD44(uint64_t a1, uint64_t a2)
{
  unint64_t Length = CFStringGetLength(*(CFStringRef *)(a1 + 8));
  unint64_t v5 = CFStringGetLength(*(CFStringRef *)(a2 + 8));
  double v6 = *(double *)a1;
  double v7 = *(double *)a2;
  if (Length == v5 || vabdd_f64(v6, v7) > 0.3) {
    return v6 > v7;
  }
  else {
    return Length < v5;
  }
}

void sub_21628BDC0()
{
}

__n128 sub_21628BDD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26C6C8908;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_21628BE30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8908;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4sub_2161A108C(&a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21628BE70(uint64_t a1)
{
  v2[0] = 0;
  v2[1] = v2;
  v2[2] = 0x2000000000;
  v2[3] = *(void *)(a1 + 24);
  CFStringRef v1 = (const __CFString *)LXCursorCopyTraversedCharacters();
  CFStringGetLength(v1);
  LXCursorEnumerateEntries();
  CFRelease(v1);
  _Block_object_dispose(v2, 8);
}

void sub_21628BF60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_21628BF80(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21628BFC0()
{
  return &unk_26C6BCA90;
}

void sub_21628BFCC(uint64_t a1, const void *a2)
{
  char MetaFlags = LXEntryGetMetaFlags();
  if ((MetaFlags & 2) == 0)
  {
    if ((MetaFlags & 0x84) != 0)
    {
      if (*(unsigned char *)(a1 + 66)) {
        return;
      }
      double v5 = -1.0;
    }
    else
    {
      double v5 = 0.0;
    }
    LXEntryGetProbability();
    double v7 = v5 + v6;
    if (v7 >= *(double *)(a1 + 40))
    {
      unint64_t v8 = *(void *)(a1 + 48);
      if (v7 >= -3.8 || v8 >= 3)
      {
        unsigned int v10 = *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *v10) >> 3) >= *(unsigned __int16 *)(a1 + 64))
        {
          double v13 = *(double *)v11;
          unint64_t Length = CFStringGetLength(*(CFStringRef *)(v11 + 8));
          if (v8 == Length || vabdd_f64(v7, v13) > 0.3)
          {
            if (v7 <= v13) {
              return;
            }
          }
          else if (v8 >= Length)
          {
            return;
          }
          unsigned int v10 = *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          unint64_t v12 = v10[1];
        }
        unint64_t v15 = v10[2];
        if (v12 >= v15)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *v10) >> 3);
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21610CB04();
          }
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v10) >> 3);
          uint64_t v19 = 2 * v18;
          if (2 * v18 <= v17 + 1) {
            uint64_t v19 = v17 + 1;
          }
          if (v18 >= 0x555555555555555) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v19;
          }
          uint64_t v34 = v10 + 2;
          if (v20)
          {
            if (v20 > 0xAAAAAAAAAAAAAAALL) {
              sub_2160FFA74();
            }
            uint64_t v21 = (char *)operator new(24 * v20);
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v30 = v21;
          uint64_t v31 = &v21[24 * v17];
          uint64_t v32 = (uint64_t)v31;
          uint64_t v33 = &v21[24 * v20];
          sub_21628BAC4((uint64_t)v31, a2, *(CFTypeRef *)(a1 + 56), v7);
          uint64_t v22 = (uint64_t)v31;
          uint64_t v32 = (uint64_t)(v31 + 24);
          uint64_t v24 = *v10;
          uint64_t v23 = v10[1];
          *(void *)&long long v38 = v31;
          *((void *)&v38 + 1) = v31;
          long long v37 = v38;
          v35[0] = v10 + 2;
          v35[1] = &v37;
          void v35[2] = &v38;
          char v36 = 0;
          while (v23 != v24)
          {
            double v25 = *(double *)(v23 - 24);
            v23 -= 24;
            sub_21628BAC4(v22 - 24, *(const void **)(v23 + 16), *(CFTypeRef *)(v23 + 8), v25);
            uint64_t v22 = *((void *)&v38 + 1) - 24;
            *((void *)&v38 + 1) -= 24;
          }
          char v36 = 1;
          sub_21628C348((uint64_t)v35);
          uint64_t v26 = *v10;
          *unsigned int v10 = v22;
          uint64_t v30 = (char *)v26;
          uint64_t v31 = (char *)v26;
          uint64_t v27 = v10[1];
          uint64_t v16 = v32;
          v10[1] = v32;
          uint64_t v32 = v27;
          uint64_t v28 = v10[2];
          _DWORD v10[2] = (uint64_t)v33;
          uint64_t v33 = (char *)v28;
          sub_21628C2DC((uint64_t)&v30);
        }
        else
        {
          sub_21628BAC4(v12, a2, *(CFTypeRef *)(a1 + 56), v7);
          uint64_t v16 = v12 + 24;
          v10[1] = v12 + 24;
        }
        v10[1] = v16;
        sub_21628BC1C(*v10, v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - *v10) >> 3));
        uint64_t v29 = *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (0xAAAAAAAAAAAAAAABLL * ((v29[1] - *v29) >> 3) > *(unsigned __int16 *)(a1 + 64)) {
          sub_21628ADDC(v29);
        }
      }
    }
  }
}

void sub_21628C2AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21628C2DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21628C2DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_21628BB80((const void **)(i - 8), 0);
    sub_2161868BC((const void **)(i - 16), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21628C348(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      sub_21628BB80((const void **)(v3 + 16), 0);
      sub_2161868BC((const void **)(v3 + 8), 0);
      v3 += 24;
    }
  }
  return a1;
}

void *sub_21628C3B0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21628C438()
{
}

__n128 sub_21628C44C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C88B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21628C4A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C88B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21628C4D8()
{
  return LXCursorEnumerateEntries();
}

uint64_t sub_21628C558(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21628C598()
{
  return &unk_26C6BCA80;
}

void sub_21628C5A4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  double v5 = *(BOOL **)(a1 + 56);
  if ((*(void *)(a1 + 32) & LXEntryGetMetaFlags()) != 0)
  {
    CFStringRef v6 = (const __CFString *)LXEntryCopyString();
    *double v5 = CFEqual(v6, *(CFStringRef *)(a1 + 40));
    if (v6) {
      CFRelease(v6);
    }
  }
  if (*v5)
  {
    if (a3) {
      *a3 = 1;
    }
    **(unsigned char **)(a1 + 48) = 1;
  }
}

void sub_21628C650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_21628C66C()
{
}

__n128 sub_21628C680(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6C89B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_21628C6D4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C89B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21628C70C()
{
  return LXCursorEnumerateEntries();
}

uint64_t sub_21628C794(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCAB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21628C7D4()
{
  return &unk_26C6BCAB0;
}

void sub_21628C7E0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFStringRef v5 = (const __CFString *)LXEntryCopyString();
  if (CFStringHasPrefix(v5, **(CFStringRef **)(a1 + 32)))
  {
    CFIndex Length = CFStringGetLength(**(CFStringRef **)(a1 + 32));
    int v7 = *(unsigned __int8 *)(a1 + 56);
    CFIndex v8 = CFStringGetLength(v5);
    if (v7) {
      v9.location = Length;
    }
    else {
      v9.location = Length + 1;
    }
    v9.length = v8 - v9.location;
    **(void **)(a1 + 4sub_2161A108C(&a9, 0) = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, v9);
    *a3 = 1;
    **(unsigned char **)(a1 + 48) = 1;
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_21628C8A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_21628C8C4()
{
}

__n128 sub_21628C8D8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6C8960;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_21628C92C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8960;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21628C964(uint64_t a1, uint64_t *a2, uint64_t *a3, double *a4, uint64_t a5)
{
  uint64_t result = sub_21628AFFC(*(void *)(*(void *)(a1 + 16) + 24), *a2, *a3, a5, *a4);
  ++**(_DWORD **)(a1 + 24);
  return result;
}

uint64_t sub_21628C9B0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCAA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21628C9F0()
{
  return &unk_26C6BCAA0;
}

uint64_t sub_21628C9FC(int a1, void *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      (*(void (**)(unsigned __int16 **__return_ptr, uint64_t, uint64_t))(*(void *)v5 + 432))(&v23, v5, 1);
      CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
      uint64_t v8 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:v7];
      unsigned int v10 = v23;
      uint64_t v11 = v24;
      if (v23 == v24)
      {
        unint64_t v12 = 0;
        if (!v23)
        {
LABEL_30:
          if (v12)
          {
            [a2 addEntriesFromDictionary:v9];
            return 1;
          }
          return 0;
        }
LABEL_29:
        uint64_t v24 = v10;
        operator delete(v10);
        goto LABEL_30;
      }
      unint64_t v12 = (void *)v8;
      int v13 = 0;
      int v14 = 0;
      LODWORD(v15) = 0;
      do
      {
        uint64_t v15 = *v10 + (uint64_t)(int)v15;
        int CharacterAtIndex = CFStringGetCharacterAtIndex(v6, v15 - 1);
        uint64_t v17 = 0;
        while ((unsigned __int16)word_2163CB894[v17] != CharacterAtIndex)
        {
          if (++v17 == 5)
          {
            unint64_t v18 = 0;
            goto LABEL_11;
          }
        }
        unint64_t v18 = &word_2163CB894[v17];
LABEL_11:
        if (v18) {
          BOOL v19 = (char *)v18 - (char *)word_2163CB894 == -2;
        }
        else {
          BOOL v19 = 1;
        }
        int v20 = v19;
        v14 |= v20 ^ 1;
        v13 |= v20;
        ++v10;
      }
      while (v10 != v11);
      int v21 = v13 ^ 1;
      if ((v14 ^ 1) & 1) != 0 || (v21)
      {
        if ((v14 ^ 1 | v13))
        {
          if ((v14 | v21)) {
            goto LABEL_28;
          }
          uint64_t v22 = &off_26426BAE0;
        }
        else
        {
          uint64_t v22 = &off_26426BAD8;
        }
      }
      else
      {
        uint64_t v22 = &off_26426BAE8;
      }
      [v12 setObject:MEMORY[0x263EFFA88] forKeyedSubscript:v9];
LABEL_28:
      unsigned int v10 = v23;
      if (!v23) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
  }
  return result;
}

void sub_21628CC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21628CC50()
{
}

uint64_t *sub_21628CC64(uint64_t *a1, unsigned int a2)
{
  *a1 = 0;
  a1[1] = 0;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFLocaleRef v5 = sub_2161E29D0(a2);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F512A8], v5);
  if (a2 - 1 <= 1) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F512C0], (const void *)*MEMORY[0x263EFFB40]);
  }
  *a1 = LMLexiconCreate();
  CFRelease(Mutable);
  CFRelease(v5);
  if (*a1) {
    a1[1] = LMLexiconGetRootCursor();
  }
  return a1;
}

void *sub_21628CD3C(void *a1)
{
  if (*a1) {
    LMLexiconRelease();
  }
  return a1;
}

uint64_t sub_21628CD70(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    LMLexiconResetCursors();
    uint64_t result = LMLexiconGetRootCursor();
    a1[1] = result;
  }
  return result;
}

uint64_t sub_21628CDA8(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = LMLexiconGetCursorByAdvancingWithCharacters();
    if (result)
    {
      uint64_t result = LMLexiconCursorHasEntries();
      if (result)
      {
        if (a4) {
          *a4 = LMLexiconCursorFirstTokenID();
        }
        return 1;
      }
    }
  }
  return result;
}

void sub_21628CE20(uint64_t a1, const __CFString *a2)
{
}

void sub_21628CEC0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t sub_21628CEE4(uint64_t a1, const __CFString *a2)
{
  if (a2) {
    sub_2161E1FB8(a2);
  }
  return 0;
}

void sub_21628CF88(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

BOOL sub_21628CFAC(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4, void *a5, unint64_t a6, unint64_t *a7, uint64_t a8, uint8x8_t a9, int a10, uint64_t a11)
{
  int v17 = a2 & 3;
  switch(v17)
  {
    case 1:
      uint64_t v22 = (unsigned int *)(*(void *)(a1 + 16) + (a2 - 1));
      if (!a4)
      {
        unsigned int v23 = v22[1];
        if (a10 && v23 != 0)
        {
          if (*a5)
          {
            --*a5;
          }
          else if (a6)
          {
            unint64_t v63 = *a7;
            uint64_t v64 = a8 + 24 * *a7;
            *(_WORD *)(v64 + 12) = (_WORD)a3 - a11;
            *a7 = v63 + 1;
            *(_DWORD *)(v64 + 8) = v23;
            if (v63 + 1 >= a6) {
              return 1;
            }
          }
          else
          {
            ++*a7;
          }
        }
      }
      double v25 = (char *)(v22 + 2);
      unint64_t v26 = (unint64_t)v22 + *v22 + 4;
      if ((unint64_t)(v22 + 2) < v26)
      {
        __int16 v69 = (_WORD)a3 - a11;
        do
        {
          unsigned int v29 = *v25;
          uint64_t v27 = v25 + 1;
          uint64_t v28 = v29;
          BOOL v30 = v29 >= a4;
          BOOL v31 = v29 > a4;
          if (!a10) {
            BOOL v30 = v31;
          }
          if (v30)
          {
            int v32 = memcmp(v27, a3, (int)a4);
            if (v32 > 0) {
              return 0;
            }
            if (!v32)
            {
              if (*a5)
              {
                --*a5;
              }
              else if (a6)
              {
                unint64_t v33 = *a7;
                uint64_t v34 = a8 + 24 * *a7;
                *(_WORD *)(v34 + 12) = v69 + v28;
                int v35 = *(_DWORD *)&v27[v28];
                *a7 = ++v33;
                *(_DWORD *)(v34 + 8) = v35;
                if (v33 >= a6) {
                  return 1;
                }
              }
              else
              {
                ++*a7;
              }
            }
          }
          double v25 = &v27[v28 + 4];
        }
        while ((unint64_t)v25 < v26);
      }
      return 0;
    case 2:
      uint64_t v36 = *(void *)(a1 + 8);
      uint64_t v37 = (a2 - 2);
      long long v38 = (int *)(v36 + v37);
      if (a4)
      {
        unint64_t v39 = *a3;
        uint64_t v40 = v39 >> 5;
        unsigned int v41 = v38[(v39 >> 5) + 1];
        if (((v41 >> v39) & 1) == 0) {
          return 0;
        }
        char v42 = v39 & 0x1F;
        if (v39 >= 0x20)
        {
          int v43 = 0;
          if (v40 <= 1) {
            uint64_t v40 = 1;
          }
          else {
            uint64_t v40 = v40;
          }
          unint64_t v59 = (unsigned int *)(v37 + v36 + 4);
          do
          {
            unsigned int v60 = *v59++;
            a9 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
            a9.i16[0] = vaddlv_u8(a9);
            v43 += a9.i32[0];
            --v40;
          }
          while (v40);
        }
        else
        {
          int v43 = 0;
        }
        a9.i32[0] = v41 & ~(-1 << v42);
        uint8x8_t v61 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
        v61.i16[0] = vaddlv_u8(v61);
        int v21 = sub_21628CFAC(a1, v38[v43 + v61.i32[0] + 10], a3 + 1, a4 - 1, a5, a6, a7, a8, 0, a11);
        return v21 != 0;
      }
      if (a10)
      {
        int v49 = *v38;
        if (*v38)
        {
          if (*a5)
          {
            --*a5;
          }
          else if (a6)
          {
            unint64_t v67 = *a7;
            uint64_t v68 = a8 + 24 * *a7;
            *(_WORD *)(v68 + 12) = (_WORD)a3 - a11;
            *a7 = v67 + 1;
            *(_DWORD *)(v68 + 8) = v49;
            if (v67 + 1 >= a6) {
              return 1;
            }
          }
          else
          {
            ++*a7;
          }
        }
      }
      unint64_t v50 = 0;
      uint64_t v51 = a3 + 1;
      uint64_t v52 = v37 + v36 + 4;
      uint64_t v48 = 1;
      while (1)
      {
        uint64_t v53 = v50 >> 5 <= 1 ? 1 : v50 >> 5;
        unsigned int v54 = v38[(v50 >> 5) + 1];
        if ((v54 >> v50))
        {
          if ((v50 & 0xE0) != 0)
          {
            int v55 = 0;
            char v56 = (unsigned int *)v52;
            do
            {
              unsigned int v57 = *v56++;
              a9 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
              a9.i16[0] = vaddlv_u8(a9);
              v55 += a9.i32[0];
              --v53;
            }
            while (v53);
          }
          else
          {
            int v55 = 0;
          }
          a9.i32[0] = v54 & ~(-1 << (v50 & 0x1F));
          uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
          v58.i16[0] = vaddlv_u8(v58);
          if (sub_21628CFAC(a1, v38[v55 + v58.i32[0] + 10], v51, 0, a5, a6, a7, a8, 1, a11))break; {
        }
          }
        if (++v50 == 256) {
          return 0;
        }
      }
      break;
    case 3:
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = (a2 - 3);
      int v20 = (int *)(v18 + v19);
      if (a4)
      {
        int v21 = sub_21628CFAC(a1, v20[*a3 + 1], a3 + 1, a4 - 1, a5, a6, a7, a8, 0, a11);
        return v21 != 0;
      }
      if (a10)
      {
        int v44 = *v20;
        if (v44)
        {
          if (*a5)
          {
            --*a5;
          }
          else if (a6)
          {
            unint64_t v65 = *a7;
            uint64_t v66 = a8 + 24 * *a7;
            *(_WORD *)(v66 + 12) = (_WORD)a3 - a11;
            *a7 = v65 + 1;
            *(_DWORD *)(v66 + 8) = v44;
            if (v65 + 1 >= a6) {
              return 1;
            }
          }
          else
          {
            ++*a7;
          }
        }
      }
      uint64_t v45 = 0;
      BOOL v46 = a3 + 1;
      uint64_t v47 = v19 + v18 + 4;
      uint64_t v48 = 1;
      while (!sub_21628CFAC(a1, *(unsigned int *)(v47 + v45), v46, 0, a5, a6, a7, a8, 1, a11))
      {
        v45 += 4;
        if (v45 == 1024) {
          return 0;
        }
      }
      break;
    default:
      return 0;
  }
  return v48;
}

float sub_21628D460(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
  if (v8)
  {
    LODWORD(v9) = 0;
    v8[1] = 0u;
    v8[2] = 0u;
    _OWORD *v8 = 0u;
    *((void *)v8 + 7) = a1;
    *((void *)v8 + 8) = a2;
    *((void *)v8 + 1) = a3;
    *((void *)v8 + 5) = a4;
    *((void *)v8 + 6) = 0;
    if (a3)
    {
      if (a4 >= 0x18)
      {
        *(_DWORD *)uint64_t v8 = *(_DWORD *)(a3 + 4);
        *((void *)v8 + 2) = a3 + *(unsigned int *)(a3 + 12);
        uint64_t v9 = *(void *)(a3 + 16);
        *(void *)&long long v10 = v9;
        *((void *)&v10 + 1) = HIDWORD(v9);
        *(_OWORD *)((char *)v8 + 24) = v10;
      }
    }
  }
  return *(float *)&v9;
}

void sub_21628D4F4(void **a1)
{
  if (a1)
  {
    if (*((_DWORD *)a1 + 12)) {
      free(a1[1]);
    }
    free(a1);
  }
}

uint64_t sub_21628D540(uint64_t a1, unsigned __int8 *__s2, unsigned int a3, uint8x8_t a4)
{
  CFStringRef v6 = (unsigned int *)a1;
  while (1)
  {
    unsigned int v7 = *v6;
    int v8 = v7 & 3;
    if (v8 != 2) {
      break;
    }
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = v7 - 2;
    uint64_t v9 = (char *)(v10 + v11);
    if (!a3) {
      return *(unsigned int *)v9;
    }
    unint64_t v12 = *__s2;
    uint64_t v13 = v12 >> 5;
    unsigned int v14 = *(_DWORD *)&v9[4 * (v12 >> 5) + 4];
    if (((v14 >> v12) & 1) == 0) {
      return 0;
    }
    if (v12 >= 0x20)
    {
      int v15 = 0;
      if (v13 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v13;
      }
      uint64_t v16 = (unsigned int *)(v10 + v11 + 4);
      do
      {
        unsigned int v17 = *v16++;
        a4 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        a4.i16[0] = vaddlv_u8(a4);
        v15 += a4.i32[0];
        --v13;
      }
      while (v13);
    }
    else
    {
      int v15 = 0;
    }
    a4.i32[0] = v14 & ~(-1 << (v12 & 0x1F));
    a4 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
    a4.i16[0] = vaddlv_u8(a4);
    CFStringRef v6 = (unsigned int *)&v9[4 * (v15 + a4.i32[0]) + 40];
LABEL_16:
    --a3;
    ++__s2;
  }
  if (v8 == 3)
  {
    uint64_t v9 = (char *)(*(void *)(a1 + 8) + v7 - 3);
    if (!a3) {
      return *(unsigned int *)v9;
    }
    CFStringRef v6 = (unsigned int *)&v9[4 * *__s2 + 4];
    goto LABEL_16;
  }
  if (v8 != 1) {
    return 0;
  }
  uint64_t v18 = (_DWORD *)(*(void *)(a1 + 16) + v7 - 1);
  uint64_t v9 = (char *)(v18 + 1);
  if (a3)
  {
    int v20 = *v18;
    uint64_t v19 = (unsigned __int8 *)(v18 + 2);
    int v21 = (unsigned __int8 *)&v9[v20];
    while (v19 < v21)
    {
      unsigned int v24 = *v19;
      uint64_t v22 = (char *)(v19 + 1);
      uint64_t v23 = v24;
      int v25 = v24 - a3;
      if (v24 >= a3) {
        size_t v26 = a3;
      }
      else {
        size_t v26 = v23;
      }
      int v27 = memcmp(v22, __s2, v26);
      if (v27) {
        int v28 = v27;
      }
      else {
        int v28 = v25;
      }
      if ((v28 & 0x80000000) == 0)
      {
        if (v28) {
          return 0;
        }
        uint64_t v9 = &v22[v23];
        return *(unsigned int *)v9;
      }
      uint64_t v19 = (unsigned __int8 *)&v22[v23 + 4];
    }
    return 0;
  }
  return *(unsigned int *)v9;
}

uint64_t sub_21628D6C4(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4, unint64_t a5, unint64_t *a6, uint64_t a7, __int16 a8)
{
  int v13 = a2 & 3;
  if (v13 == 1)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 16) + (a2 - 1));
    uint64_t v18 = v17 + 1;
    int v19 = v17[1];
    if (v19)
    {
      if (!a5)
      {
        ++*a6;
        if (!a4) {
          return 0;
        }
        goto LABEL_13;
      }
      unint64_t v20 = *a6;
      uint64_t v21 = a7 + 24 * *a6;
      *(_WORD *)(v21 + 12) = (_WORD)a3 - a8;
      *a6 = v20 + 1;
      *(_DWORD *)(v21 + 8) = v19;
      if (v20 + 1 >= a5) {
        return 1;
      }
    }
    if (!a4) {
      return 0;
    }
LABEL_13:
    unsigned int v23 = *v17;
    uint64_t v22 = (char *)(v17 + 2);
    unint64_t v24 = (unint64_t)v18 + v23;
    if ((unint64_t)v22 < v24)
    {
      __int16 v25 = (_WORD)a3 - a8;
      do
      {
        unsigned int v28 = *v22;
        size_t v26 = v22 + 1;
        size_t v27 = v28;
        if (v28 <= a4)
        {
          int v29 = memcmp(v26, a3, v27);
          if (v29 > 0) {
            return 0;
          }
          if (!v29)
          {
            if (a5)
            {
              unint64_t v30 = *a6;
              uint64_t v31 = a7 + 24 * *a6;
              *(_WORD *)(v31 + 12) = v25 + v27;
              int v32 = *(_DWORD *)&v26[v27];
              *a6 = ++v30;
              *(_DWORD *)(v31 + 8) = v32;
              if (v30 >= a5) {
                return 1;
              }
            }
            else
            {
              ++*a6;
            }
          }
        }
        uint64_t v22 = &v26[v27 + 4];
      }
      while ((unint64_t)v22 < v24);
    }
    return 0;
  }
  if (v13 == 2)
  {
    uint64_t v33 = *(void *)(a1 + 8);
    uint64_t v34 = (a2 - 2);
    int v35 = *(_DWORD *)(v33 + v34);
    if (v35)
    {
      if (!a5)
      {
        ++*a6;
        if (!a4) {
          return 0;
        }
LABEL_28:
        unint64_t v38 = *a3;
        uint64_t v39 = v38 >> 5;
        if (((*(_DWORD *)(v33 + v34 + 4 * (v38 >> 5) + 4) >> v38) & 1) == 0) {
          return 0;
        }
        if (v38 >= 0x20)
        {
          int v41 = 0;
          if (v39 <= 1) {
            uint64_t v39 = 1;
          }
          else {
            uint64_t v39 = v39;
          }
          char v42 = (unsigned int *)(v34 + v33 + 4);
          do
          {
            unsigned int v43 = *v42++;
            uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
            v44.i16[0] = vaddlv_u8(v44);
            v41 += v44.i32[0];
            --v39;
          }
          while (v39);
        }
LABEL_42:
        uint64_t result = sub_21628D6C4();
        if (!result) {
          return result;
        }
        return 1;
      }
      unint64_t v36 = *a6;
      uint64_t v37 = a7 + 24 * *a6;
      *(_WORD *)(v37 + 12) = (_WORD)a3 - a8;
      *a6 = v36 + 1;
      *(_DWORD *)(v37 + 8) = v35;
      if (v36 + 1 >= a5) {
        return 1;
      }
    }
    if (!a4) {
      return 0;
    }
    goto LABEL_28;
  }
  if (v13 != 3) {
    return 0;
  }
  int v14 = *(_DWORD *)(*(void *)(a1 + 8) + (a2 - 3));
  if (!v14)
  {
LABEL_7:
    if (a4) {
      goto LABEL_42;
    }
    return 0;
  }
  if (!a5)
  {
    ++*a6;
    if (!a4) {
      return 0;
    }
    goto LABEL_42;
  }
  unint64_t v15 = *a6;
  uint64_t v16 = a7 + 24 * *a6;
  *(_WORD *)(v16 + 12) = (_WORD)a3 - a8;
  *a6 = v15 + 1;
  *(_DWORD *)(v16 + 8) = v14;
  if (v15 + 1 < a5) {
    goto LABEL_7;
  }
  return 1;
}

BOOL sub_21628D990(void *a1)
{
  uint64_t v2 = (uint64_t *)sub_2162D8C20();
  uint64_t v3 = (const char *)sub_2162D8D64(v2, 2uLL, off_26797C900[0], off_26797C8A0[0], 0);
  if (v3[23] < 0)
  {
    if (*((void *)v3 + 1) > 0x400uLL) {
      return 0;
    }
    uint64_t v3 = *(const char **)v3;
  }
  int v4 = open(v3, 0);
  if (v4 == -1) {
    return 0;
  }
  int v5 = v4;
  if (fstat(v4, &v9) != -1)
  {
    CFStringRef v6 = mmap(0, v9.st_size, 1, 1, v5, 0);
    if (v6 != (_DWORD *)-1 && *v6 == -894645588)
    {
      off_t st_size = v9.st_size;
      *a1 = v6;
      a1[1] = st_size;
    }
  }
  close(v5);
  return *a1 != 0;
}

uint64_t sub_21628DA78(uint64_t *a1, unsigned char *a2, unint64_t a3)
{
  LOBYTE(v3) = 0;
  if (a2 && a3 - 6 >= 0xFFFFFFFFFFFFFFFBLL)
  {
    uint64_t v4 = *a1;
    if (!*a1)
    {
      LOBYTE(v3) = 0;
      return v3 & 1;
    }
    uint64_t v3 = a1[1];
    if (v3)
    {
      unint64_t v5 = 0;
      BOOL v6 = 0;
      unsigned int v7 = 0;
      while (1)
      {
        if (v5)
        {
          int v8 = a2[v5];
          if (v8 == 122)
          {
            char v10 = 1;
LABEL_27:
            LOBYTE(v3) = v6 | v10;
            return v3 & 1;
          }
          LOBYTE(v9) = v8 - 97;
          if ((v8 - 97) > 0x19) {
            goto LABEL_25;
          }
        }
        else
        {
          unsigned int v9 = *a2 - 97;
          if (v9 > 0x19) {
            goto LABEL_25;
          }
          unsigned int v7 = (unsigned __int16 *)(v4 + *(unsigned int *)(v4 + 4 + 4 * (*a2 - 97)));
        }
        char v10 = v9;
        unsigned int v11 = *v7;
        unsigned int v12 = (v11 >> 10) & 0x1F;
        unsigned int v13 = v11 & 0x3FF;
        for (BOOL i = v12 >= v9; !i && v13 != 0; BOOL i = v12 >= v9)
        {
          v7 += v13;
          unsigned int v11 = *v7;
          unsigned int v12 = (v11 >> 10) & 0x1F;
          unsigned int v13 = v11 & 0x3FF;
        }
        if (v12 != v9)
        {
LABEL_25:
          char v10 = 0;
          goto LABEL_27;
        }
        if (a3 - 1 > v5)
        {
          if ((v11 & 0x8000) == 0) {
            goto LABEL_25;
          }
          ++v7;
        }
        BOOL v6 = ++v5 >= a3;
        if (v5 == a3) {
          goto LABEL_27;
        }
      }
    }
  }
  return v3 & 1;
}

void sub_21628DB6C(CFStringRef theString@<X0>, const __CFURL *a2@<X1>, const __CFString *a3@<X2>, void *a4@<X8>)
{
  if (theString)
  {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theString);
    if (!Copy) {
      goto LABEL_7;
    }
LABEL_6:
    sub_2161E3AE8(Copy, a4);
    CFRelease(Copy);
    return;
  }
  CFURLRef v7 = (const __CFURL *)sub_2161E0A88(a2);
  if (v7)
  {
    CFURLRef v8 = v7;
    CFStringRef Copy = sub_2161E190C(v7, a3);
    CFRelease(v8);
    if (Copy) {
      goto LABEL_6;
    }
  }
LABEL_7:

  sub_21610B834(a4, "");
}

void sub_21628DC28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21628DC44(unsigned int a1, int a2)
{
  unsigned int v4 = a1 >> 18;
  unsigned int v5 = a1 >> 5;
  unsigned int v6 = a1 >> 8;
  int v7 = sub_21628DCE0(a1);
  if ((a1 & 0x80) != 0) {
    int v8 = 802;
  }
  else {
    int v8 = 34;
  }
  int v9 = (2 * a1) & 0x400 | ((v6 & 1) << 12) | v8;
  if (((a2 | v7) & (a1 >> 4)) != 0) {
    v9 |= 0x80u;
  }
  unsigned int v10 = (a1 >> 6) & 0x40000 | ((v5 & 1) << 6) | v6 & 0x20000 | ((v4 & 1) << 20) | v9;
  if (v7) {
    return v10 | 0x80000;
  }
  else {
    return v10;
  }
}

uint64_t sub_21628DCE0(unsigned int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F3E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F3E0))
  {
    qword_26797F3D8 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797F3E0);
  }
  if (*(unsigned char *)qword_26797F3D8) {
    return (a1 >> 26) & 1;
  }
  else {
    return 1;
  }
}

void sub_21628DD50(_Unwind_Exception *a1)
{
}

uint64_t sub_21628DD68(unsigned int a1, int a2)
{
  unsigned int v4 = a1 >> 18;
  unsigned int v5 = a1 >> 8;
  int v6 = sub_21628DCE0(a1);
  if ((a1 & 0x80) != 0) {
    int v7 = 800;
  }
  else {
    int v7 = 32;
  }
  int v8 = (2 * a1) & 0x400 | ((v5 & 1) << 12) | v7;
  if (((a2 | v6) & (a1 >> 4)) != 0) {
    v8 |= 0x80u;
  }
  unsigned int v9 = (2 * a1) & 0x44 | (a1 >> 6) & 0x40000 | v5 & 0x20000 | ((v4 & 1) << 20) | v8;
  if (v6) {
    return v9 | 0x80000;
  }
  else {
    return v9;
  }
}

uint64_t sub_21628DE00(const UniChar *a1, CFIndex a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E1F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E1F0))
  {
    sub_2161C04AC(0);
    qword_26797E1E8 = (uint64_t)&qword_26797EF20;
    __cxa_guard_release(&qword_26797E1F0);
  }
  if (a3)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3))
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3))
      {
        int v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 304))(a3);
        if (*v6 != v6[1])
        {
          uint64_t v7 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a3 + 304))(a3) + 8);
          if (*(unsigned char *)(v7 - 2) != 1 && !sub_2161C0B80(qword_26797E1E8, *(_WORD *)(v7 - 8)))
          {
            CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
            CFStringRef v11 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
            CFIndex Length = CFStringGetLength(v11);
            CFIndex v13 = Length;
            if (Length >= *(unsigned __int16 *)(v7 - 14)) {
              CFIndex v14 = *(unsigned __int16 *)(v7 - 14);
            }
            else {
              CFIndex v14 = Length;
            }
            CFStringRef v15 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
            v18.location = v13 - v14;
            v18.length = v14;
            CFStringRef v16 = CFStringCreateWithSubstring(0, v15, v18);
            CFStringAppendFormat(Mutable, 0, @"%@\tF", v16);
            CFStringAppendCharacters(Mutable, word_216385738, 1);
            CFStringAppendFormat(Mutable, 0, @"\n");
            CFRelease(v16);
            CFStringRef v17 = CFStringCreateWithCharacters(v9, a1, a2);
            CFStringAppend(Mutable, v17);
            CFStringGetLength(Mutable);
            CFRelease(v17);
            CFStringAppendFormat(Mutable, 0, @"\nEOS");
            operator new();
          }
        }
      }
    }
  }
  return 0;
}

void sub_21628E0F0(_Unwind_Exception *a1)
{
}

BOOL sub_21628E128(void *a1, BOOL *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2] - v2;
  if (!v3) {
    return 0;
  }
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 3) - 1;
  unint64_t v5 = *(void *)(a1[10] + 8 * v4);
  uint64_t v6 = a1[4];
  if (v5 >= (a1[5] - v6) >> 1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    if (!a2) {
      goto LABEL_9;
    }
LABEL_8:
    *a2 = v7[v8 - 1] == 32;
    goto LABEL_9;
  }
  uint64_t v7 = (unsigned __int16 *)(v6 + 2 * v5);
  unint64_t v8 = *(unsigned __int16 *)(v2 + 40 * v4 + 24);
  if (!v6) {
    unint64_t v8 = 0;
  }
  if (a2) {
    goto LABEL_8;
  }
LABEL_9:
  BOOL result = 0;
  if (v8 && v7)
  {
    int v10 = *v7;
    if (v10 != 32 && (v10 & 0xFFFFFFDF) - 65 > 0x19) {
      return 0;
    }
    uint64_t v11 = 1;
    while (v8 != v11)
    {
      int v12 = v7[v11++];
      if (v12 != 32 && (v12 & 0xFFFFFFDF) - 65 >= 0x1A)
      {
        unint64_t v14 = v11 - 1;
        return v14 >= v8;
      }
    }
    unint64_t v14 = v8;
    return v14 >= v8;
  }
  return result;
}

uint64_t sub_21628E210(uint64_t *a1)
{
  if (!a1[1] || *(_WORD *)*a1 == 32) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = MEMORY[0x263EF8318];
  do
  {
    unint64_t v5 = *(unsigned __int16 *)(*a1 + 2 * v3);
    if (v5 <= 0x7F)
    {
      if ((*(_DWORD *)(v4 + 4 * v5 + 60) & 0x40000) == 0) {
        return 1;
      }
    }
    else if (!__maskrune(v5, 0x40000uLL))
    {
      return 1;
    }
    ++v3;
    unint64_t v6 = a1[1];
  }
  while (v3 < v6);
  if (v6)
  {
    uint64_t v7 = (unsigned __int16 *)*a1;
    if (*a1)
    {
      int v8 = *v7;
      unsigned int v9 = v8 - 48;
      unsigned int v10 = (unsigned __int16)(v8 + 240);
      if (v9 < 0xA || v10 < 0xA) {
        return 1;
      }
      unint64_t v12 = 0;
      CFIndex v13 = v7 + 1;
      while (v6 - 1 != v12)
      {
        int v14 = v13[v12];
        unsigned int v15 = v14 - 48;
        ++v12;
        unsigned int v16 = (unsigned __int16)(v14 + 240);
        if (v15 < 0xA || v16 <= 9)
        {
          if (v12 >= v6) {
            break;
          }
          return 1;
        }
      }
    }
  }
  sub_216183E18(a1, 0, 0, 0, v25);
  unint64_t v18 = v26;
  if ((v26 & 0x80u) == 0) {
    int v19 = v25;
  }
  else {
    int v19 = (void **)v25[0];
  }
  if ((v26 & 0x80u) != 0) {
    unint64_t v18 = (unint64_t)v25[1];
  }
  if (!v18)
  {
    BOOL v2 = 0;
    if (((char)v26 & 0x80000000) == 0) {
      return v2;
    }
LABEL_40:
    operator delete(v25[0]);
    return v2;
  }
  uint64_t v20 = 2 * v18 - 2;
  do
  {
    int v21 = *(unsigned __int16 *)v19;
    int v19 = (void **)((char *)v19 + 2);
    unsigned int v22 = (v21 & 0xFFFFFFDF) - 65;
    BOOL v2 = v22 < 0x1A;
    BOOL v23 = v22 < 0x1A || v20 == 0;
    v20 -= 2;
  }
  while (!v23);
  if ((char)v26 < 0) {
    goto LABEL_40;
  }
  return v2;
}

uint64_t sub_21628E390(unsigned int a1, uint64_t a2, unsigned char *a3)
{
  int v4 = ~a1 & 2;
  if (a1) {
    v4 |= 0x2000000u;
  }
  int v5 = a1 & 0x1000000;
  if ((a1 & 0x100) != 0) {
    int v5 = 32;
  }
  int v6 = (a1 >> 12) & 4 | v5 | (a1 >> 2) & 0x11 | v4;
  if ((a1 & 8) == 0)
  {
    unsigned int v7 = (a1 >> 12) & 4 | v5 | (a1 >> 2) & 0x11 | v4;
    goto LABEL_12;
  }
  unsigned int v7 = v6 | 0x140;
  if ((a1 & 0x20000000) != 0 || !*a3)
  {
LABEL_12:
    if ((a1 & 0x20000000) != 0)
    {
      int v8 = v7 | 0x4000000;
      unsigned int v7 = v7 & 0xFBFFFFED | 0x4000002;
      if ((a1 & 1) == 0) {
        unsigned int v7 = v8;
      }
      BOOL v9 = (*(void *)&a1 & 0x400002) != 2;
      BOOL v10 = *a3 == 0;
      if (!*a3) {
        BOOL v9 = 1;
      }
      if (!v9) {
        v7 |= 0x2000002u;
      }
      if ((v7 & 0x2000000) == 0) {
        BOOL v10 = 1;
      }
      if (!v10) {
        v7 |= 0x10000000u;
      }
    }
    goto LABEL_23;
  }
  if ((a1 & 0x100) == 0) {
    unsigned int v7 = v6 | 0x3C0;
  }
LABEL_23:
  uint64_t v11 = (a1 >> 19) & 8 | a1 & 0x40000000 | (a1 >> 26 << 31) | (a1 >> 7) & 0x100000 | v7;
  if (a2)
  {
    unint64_t v12 = sub_216192194(a2, kMecabraContextOptionSuppressSensitiveWords);
    CFIndex v13 = (const void *)*MEMORY[0x263EFFB40];
    if (v12 == (const void *)*MEMORY[0x263EFFB40]) {
      LODWORD(v11) = v11 | 0x20000000;
    }
    if (sub_216192194(a2, kMecabraContextOptionHistorySimulation) == v13) {
      LODWORD(v11) = v11 | 0x10000000;
    }
    if (sub_216192194(a2, kMecabraContextOptionNoPruning) == v13) {
      LODWORD(v11) = v11 | 0x800000;
    }
    if (sub_216192194(a2, kMecabraContextOptionPrivateMode) == v13) {
      return v11 | 0x40000;
    }
    else {
      return v11;
    }
  }
  return v11;
}

uint64_t sub_21628E550(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1) == a6)
  {
LABEL_2:
    unint64_t v12 = a5;
    return a3 == v12;
  }
  unint64_t v14 = a3 - a4;
  uint64_t v25 = a2;
  while (2)
  {
    uint64_t v15 = a2 + 2 * a5;
LABEL_6:
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v6);
    if (result)
    {
      uint64_t v16 = 0;
      uint64_t v26 = v6;
      while (1)
      {
        uint64_t v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 48))(a1, v6, v16);
        unint64_t v19 = v18;
        uint64_t v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 40))(a1, v6, v16);
        if (!v19)
        {
          v6 += v20;
          if ((*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1) != v6) {
            goto LABEL_6;
          }
          goto LABEL_2;
        }
        if (a3 <= a5)
        {
          unint64_t v23 = 0;
          unint64_t v12 = a5;
        }
        else
        {
          uint64_t v27 = v20;
          uint64_t v21 = 0;
          unint64_t v12 = a5;
          while (1)
          {
            if (v14 <= a5)
            {
              unint64_t v22 = *(unsigned __int16 *)(v17 + 2 * v21);
              if (v22 <= 0x7F)
              {
                if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v22 + 60) & 0x100) == 0) {
                  goto LABEL_22;
                }
              }
              else if (!__maskrune(v22, 0x100uLL))
              {
                goto LABEL_22;
              }
            }
            if (*(unsigned __int16 *)(v15 + 2 * v21) != *(unsigned __int16 *)(v17 + 2 * v21)) {
              break;
            }
            unint64_t v23 = v21 + 1;
            if (a5 + v21 + 1 < a3)
            {
              unint64_t v12 = v23 + a5;
              ++v21;
              if (v23 < v19) {
                continue;
              }
            }
            unint64_t v12 = a5 + v23;
            goto LABEL_23;
          }
          unint64_t v12 = a5 + v21;
LABEL_22:
          unint64_t v23 = v21;
LABEL_23:
          uint64_t v6 = v26;
          uint64_t v20 = v27;
        }
        uint64_t v24 = *a1;
        if (v23 == v19) {
          break;
        }
        if (++v16 >= (unint64_t)(*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 16))(a1, v6)) {
          return 0;
        }
      }
      v6 += v20;
      a5 = v12;
      a2 = v25;
      if ((*(uint64_t (**)(uint64_t *))(v24 + 24))(a1) != v6) {
        continue;
      }
      return a3 == v12;
    }
    return result;
  }
}

void sub_21628E7FC(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X7>, void *a5@<X8>)
{
  if (a1)
  {
    if (a2)
    {
      __int16 v5 = a3;
      if (a3)
      {
        __int16 v6 = a4;
        if (a4)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E1F8, memory_order_acquire) & 1) == 0)
          {
            if (__cxa_guard_acquire(&qword_26797E1F8))
            {
              sub_2161C04AC(0);
              word_26797E1E0 = 1310;
              __cxa_guard_release(&qword_26797E1F8);
            }
          }
          long long v10 = 0u;
          int v11 = 0;
          long long v9 = 0u;
          WORD2(v1sub_2161A108C(&a9, 0) = v6;
          WORD4(v1sub_2161A108C(&a9, 0) = v5;
          int v8 = 7;
          WORD6(v1sub_2161A108C(&a9, 0) = word_26797E1E0;
          WORD5(v1sub_2161A108C(&a9, 0) = word_26797E1E0;
          sub_21621CFC4(&__p, 1uLL, (long long *)&v8);
          operator new();
        }
      }
    }
  }
  *a5 = 0;
}

void sub_21628EA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

const void *sub_21628EAAC(uint64_t a1, CFStringRef theString)
{
  CFIndex Length = CFStringGetLength(theString);
  if (!Length) {
    return 0;
  }
  v9.length = Length - 1;
  v9.location = 0;
  CFStringRef v5 = CFStringCreateWithSubstring(0, theString, v9);
  if (!v5) {
    return 0;
  }
  CFStringRef v6 = v5;
  unsigned int v7 = sub_21628EB44(a1, v5);
  CFRelease(v6);
  return v7;
}

void sub_21628EB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *sub_21628EB44(uint64_t a1, const void *a2)
{
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), a2)) {
    return 0;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 40);

  return CFDictionaryGetValue(v4, a2);
}

CFIndex sub_21628EB9C(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  CFIndex v5 = 0;
  unint64_t Length = 0;
  do
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v4);
    if (CFStringGetLength(ValueAtIndex) > Length)
    {
      unint64_t Length = CFStringGetLength(ValueAtIndex);
      CFIndex v5 = v4;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_21628EC2C(uint64_t a1, CFAllocatorRef allocator)
{
  *(void *)a1 = &unk_26C6BF798;
  *(void *)(a1 + 8) = 0;
  CFIndex v4 = (const void **)(a1 + 8);
  *(void *)(a1 + 16) = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
  *(void *)(a1 + 24) = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
  *(void *)(a1 + 32) = CFArrayCreateMutable(allocator, 0, MEMORY[0x263EFFF70]);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = Mutable;
  *(void *)(a1 + 56) = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2161A108C(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8sub_2161A108C(&a9, 0) = 0u;
  *(unsigned char *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0;
  if (allocator) {
    sub_21628EDC0(v4, allocator);
  }
  return a1;
}

void sub_21628ED4C(_Unwind_Exception *a1)
{
  sub_216195B94(v4, 0);
  sub_2161DFB5C(v3, 0);
  sub_2161BE0C8(v2 + 4, 0);
  sub_2161BE0C8(v2 + 3, 0);
  sub_2161BE0C8(v2 + 2, 0);
  sub_2162902F8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_21628EDC0(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_2162902F8(a1, cf);
  }
}

uint64_t sub_21628EE20(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6BF798;
  *(void *)(a1 + 8) = 0;
  CFIndex v4 = (const void **)(a1 + 8);
  CFArrayRef v5 = *(const __CFArray **)(a2 + 16);
  if (v5) {
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v5);
  }
  else {
    MutableCFArrayRef Copy = 0;
  }
  *(void *)(a1 + 16) = MutableCopy;
  CFArrayRef v7 = *(const __CFArray **)(a2 + 24);
  if (v7) {
    CFMutableArrayRef v8 = CFArrayCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v7);
  }
  else {
    CFMutableArrayRef v8 = 0;
  }
  *(void *)(a1 + 24) = v8;
  CFArrayRef v9 = *(const __CFArray **)(a2 + 32);
  if (v9) {
    CFMutableArrayRef v10 = CFArrayCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v9);
  }
  else {
    CFMutableArrayRef v10 = 0;
  }
  *(void *)(a1 + 32) = v10;
  CFDictionaryRef v11 = *(const __CFDictionary **)(a2 + 40);
  if (v11) {
    CFMutableDictionaryRef v12 = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v11);
  }
  else {
    CFMutableDictionaryRef v12 = 0;
  }
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = v12;
  CFArrayRef v13 = *(const __CFArray **)(a2 + 48);
  if (v13) {
    CFArrayRef Copy = CFArrayCreateCopy(*(CFAllocatorRef *)(a2 + 8), v13);
  }
  else {
    CFArrayRef Copy = 0;
  }
  *(void *)(a1 + 48) = Copy;
  CFDictionaryRef v15 = *(const __CFDictionary **)(a2 + 56);
  if (v15) {
    CFMutableDictionaryRef v16 = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v15);
  }
  else {
    CFMutableDictionaryRef v16 = 0;
  }
  int v17 = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = v16;
  *(_DWORD *)(a1 + 64) = v17;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_2161A108C(&a9, 0) = 0u;
  *(void *)(a1 + 8sub_2161A108C(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0;
  unint64_t v18 = *(const void **)(a2 + 8);
  if (v18) {
    sub_21628EDC0(v4, v18);
  }
  unint64_t v19 = *(const void **)(a2 + 72);
  if (v19) {
    sub_216195954((const void **)(a1 + 72), v19);
  }
  return a1;
}

void sub_21628EF7C(_Unwind_Exception *a1)
{
  sub_216195B94(v3, 0);
  sub_2161DFB5C(v1 + 5, 0);
  sub_2161BE0C8(v1 + 4, 0);
  sub_2161BE0C8(v1 + 3, 0);
  sub_2161BE0C8(v1 + 2, 0);
  sub_2162902F8(v2, 0);
  _Unwind_Resume(a1);
}

void sub_21628EFF0()
{
}

CFStringRef sub_21628EFF8(void *a1)
{
  CFStringRef result = (const __CFString *)sub_2162591E0((uint64_t)a1);
  if (result)
  {
    CFStringRef result = (const __CFString *)MecabraCandidateGetSurface(a1, v3, v4);
    if (result) {
      return (const __CFString *)(CFStringGetLength(result) > 0);
    }
  }
  return result;
}

BOOL sub_21628F038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef v6 = *(const __CFArray **)(a1 + 16);
  if (v6) {
    CFIndex Count = CFArrayGetCount(v6);
  }
  else {
    CFIndex Count = 0;
  }
  BOOL result = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = a2 + a3;
    if (a2 + a3 <= Count)
    {
      if (a3 >= 1)
      {
        do
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), --v9);
        while (v9 > a2);
      }
      CFArrayRef v10 = *(const __CFArray **)(a1 + 16);
      if (v10) {
        CFArrayRef v10 = (const __CFArray *)CFArrayGetCount(v10);
      }
      return (uint64_t)v10 < Count;
    }
  }
  return result;
}

const void *sub_21628F0D0(uint64_t a1, CFIndex idx)
{
  if (idx < 0) {
    return 0;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 0;
  }
  CFArrayRef v5 = *(const __CFArray **)(a1 + 16);

  return CFArrayGetValueAtIndex(v5, idx);
}

BOOL sub_21628F134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  BOOL result = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = a2 + a3;
    if (a2 + a3 <= Count)
    {
      if (a3 >= 1)
      {
        do
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), --v8);
        while (v8 > a2);
      }
      return CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) < Count;
    }
  }
  return result;
}

const void *sub_21628F1BC(uint64_t a1, CFIndex a2)
{
  if (a2 < 0 || CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) <= a2) {
    return 0;
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 32);

  return CFArrayGetValueAtIndex(v4, a2);
}

void sub_21628F21C(uint64_t a1, const void *a2)
{
  CFIndex v3 = (const void **)(a1 + 88);
  sub_2161868BC((const void **)(a1 + 88), 0);
  if (a2)
  {
    sub_216195954(v3, a2);
  }
}

__CFString *sub_21628F274(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 16);
  if (!v2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v2);
  if (!Count) {
    return 0;
  }
  uint64_t v4 = Count;
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  if (v4 >= 1)
  {
    for (CFIndex i = 0; i != v4; ++i)
    {
      CFArrayRef v7 = (void *)sub_21628F0D0(a1, i);
      CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(v7, v8, v9);
      CFStringAppend(Mutable, Surface);
    }
  }
  return Mutable;
}

BOOL sub_21628F300(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  v4.location = 0;
  v4.length = Count;
  CFArrayAppendArray(*(CFMutableArrayRef *)(a1 + 16), *(CFArrayRef *)(a1 + 32), v4);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 32));
  return Count > 0;
}

void sub_21628F350(uint64_t a1, int a2, CFArrayRef theArray)
{
  if (theArray) {
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theArray);
  }
  else {
    CFArrayRef Copy = 0;
  }

  sub_216195B94((const void **)(a1 + 48), Copy);
}

void sub_21628F3A8(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  sub_21628F134(a1, 0, Count);
  CFArrayRef v3 = *(const __CFArray **)(a1 + 16);
  if (v3) {
    CFIndex v4 = CFArrayGetCount(v3);
  }
  else {
    CFIndex v4 = 0;
  }
  sub_21628F038(a1, 0, v4);
  sub_2161868BC((const void **)(a1 + 88), 0);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 40));
  sub_216195B94((const void **)(a1 + 48), 0);

  sub_2161868BC((const void **)(a1 + 72), 0);
}

void sub_21628F43C(uint64_t a1, const void *a2)
{
  CFArrayRef v3 = (const void **)(a1 + 72);
  sub_2161868BC((const void **)(a1 + 72), 0);
  if (a2)
  {
    sub_216195954(v3, a2);
  }
}

void sub_21628F494(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  CFArrayRef v2 = sub_2162D1CE4(4u);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    return;
  }
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFIndex v4 = CFStringCreateMutable(0, 0);
  CFArrayRef v5 = CFStringCreateMutable(0, 0);
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 16);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    if (i) {
      CFStringAppend(Mutable, @" ");
    }
    uint64_t v8 = sub_21628F0D0(a1, i);
    if (sub_2162591E0((uint64_t)v8))
    {
      uint64_t v9 = (void *)sub_21628F0D0(a1, i);
      CFStringRef v12 = sub_21628F8B4(v9, v10, v11);
      CFStringAppend(Mutable, v12);
      CFRelease(v12);
    }
  }
  for (CFIndex j = 0; j < CFArrayGetCount(*(CFArrayRef *)(a1 + 32)); ++j)
  {
    if (j) {
      CFStringAppend(v5, @" ");
    }
    unint64_t v14 = sub_21628F1BC(a1, j);
    if (sub_2162591E0((uint64_t)v14))
    {
      CFDictionaryRef v15 = (void *)sub_21628F1BC(a1, j);
      CFStringRef v18 = sub_21628F8B4(v15, v16, v17);
      CFStringAppend(v5, v18);
      CFRelease(v18);
    }
  }
  for (CFIndex k = 0; k < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)); ++k)
  {
    if (k) {
      CFStringAppend(v4, @" ");
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), k);
    if (sub_2162591E0((uint64_t)ValueAtIndex))
    {
      uint64_t v21 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), k);
      CFStringRef v24 = sub_21628F8B4(v21, v22, v23);
      CFStringAppend(v4, v24);
      CFRelease(v24);
    }
  }
  uint64_t v25 = sub_2162D1CE4(4u);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    uint64_t v33 = Mutable;
    __int16 v34 = 2112;
    int v35 = v5;
    __int16 v36 = 2112;
    uint64_t v37 = v4;
    _os_log_debug_impl(&dword_2160F5000, v25, OS_LOG_TYPE_DEBUG, "Candidates: [Left: %@] [Inline: %@] [Right: %@]", buf, 0x20u);
  }
  uint64_t v26 = sub_2162D1CE4(4u);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    int v29 = *(__CFString **)(a1 + 72);
    *(_DWORD *)buf = 138412290;
    uint64_t v33 = v29;
    _os_log_debug_impl(&dword_2160F5000, v26, OS_LOG_TYPE_DEBUG, "App Context: %@", buf, 0xCu);
  }
  uint64_t v27 = sub_2162D1CE4(4u);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    int v30 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    LODWORD(v33) = v30;
    _os_log_debug_impl(&dword_2160F5000, v27, OS_LOG_TYPE_DEBUG, "Text Content Type: %d", buf, 8u);
  }
  unsigned int v28 = sub_2162D1CE4(4u);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    int v31 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)buf = 67109120;
    LODWORD(v33) = v31;
    _os_log_debug_impl(&dword_2160F5000, v28, OS_LOG_TYPE_DEBUG, "Shuangpin Type: %d", buf, 8u);
    if (!v5) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v5) {
LABEL_33:
  }
    CFRelease(v5);
LABEL_34:
  if (v4) {
    CFRelease(v4);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_21628F82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_21628F8B4(void *a1, const char *a2, uint64_t a3)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t Surface = MecabraCandidateGetSurface(a1, a2, a3);
  if (a1)
  {
    uint64_t v8 = [a1 v5:v6];
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 72))(v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  return CFStringCreateWithFormat(v4, 0, @"%@:(%d)", Surface, v9);
}

void sub_21628F948(uint64_t a1, const void *a2)
{
  CFArrayRef v3 = (const void **)(a1 + 80);
  sub_2161868BC((const void **)(a1 + 80), 0);
  if (a2)
  {
    sub_216195954(v3, a2);
  }
}

void sub_21628F9A0(uint64_t a1, const __CFArray *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 96) = 0;
  uint64_t v4 = a1 + 104;
  sub_2161E839C(a1 + 104);
  if (a2)
  {
    uint64_t v18 = a1;
    CFIndex Count = CFArrayGetCount(a2);
    CFIndex v6 = Count;
    if (Count < 1)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      CFIndex v8 = 0;
      CFIndex v19 = Count;
      do
      {
        uint64_t v9 = (float *)*((void *)CFArrayGetValueAtIndex(a2, v8) + 3);
        if (*(unsigned __int16 *)v9 - 123 >= 0xFFFFFFE6)
        {
          ++v7;
          if (v8)
          {
            uint64_t v20 = v7;
            for (CFIndex i = 0; i != v8; ++i)
            {
              uint64_t v11 = (float *)*((void *)CFArrayGetValueAtIndex(a2, i) + 3);
              int v12 = *(unsigned __int16 *)v11;
              if ((v12 - 123) >= 0xFFFFFFE6)
              {
                double v13 = hypotf((float)(v11[1] + (float)(v11[3] * 0.5)) - (float)(v9[1] + (float)(v9[3] * 0.5)), (float)(v11[2] + (float)(v11[4] * 0.5)) - (float)(v9[2] + (float)(v9[4] * 0.5)));
                unsigned __int16 v22 = v12;
                *(void *)buf = &v22;
                unint64_t v14 = sub_2161E8438(v4, &v22, (uint64_t)&unk_21636EABA, (_WORD **)buf);
                unsigned __int16 v21 = *(_WORD *)v9;
                *(void *)buf = &v21;
                *((double *)sub_2161E8704((uint64_t)(v14 + 3), &v21, (uint64_t)&unk_21636EABA, (_WORD **)buf) + 3) = v13;
                unsigned __int16 v22 = *(_WORD *)v9;
                *(void *)buf = &v22;
                CFDictionaryRef v15 = sub_2161E8438(v4, &v22, (uint64_t)&unk_21636EABA, (_WORD **)buf);
                unsigned __int16 v21 = *(_WORD *)v11;
                *(void *)buf = &v21;
                *((double *)sub_2161E8704((uint64_t)(v15 + 3), &v21, (uint64_t)&unk_21636EABA, (_WORD **)buf) + 3) = v13;
              }
            }
            CFIndex v6 = v19;
            uint64_t v7 = v20;
          }
        }
        ++v8;
      }
      while (v8 != v6);
    }
    CFMutableDictionaryRef v16 = sub_2162D1CE4(4u);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v24 = 2048;
      uint64_t v25 = v7;
      _os_log_debug_impl(&dword_2160F5000, v16, OS_LOG_TYPE_DEBUG, "Input layout key count: %ld, valid layout key count: %ld", buf, 0x16u);
    }
    if (v7)
    {
      CFTypeRef v17 = CFRetain(a2);
      sub_216195B94((const void **)(v18 + 144), v17);
      *(unsigned char *)(v18 + 96) = 1;
    }
  }
}

CFIndex sub_21628FC38(uint64_t a1, uint64_t a2)
{
  CFIndex result = *(void *)(a1 + 144);
  if (result)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      CFIndex v5 = result;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), i);
        uint64_t v8 = *(void *)(a2 + 24);
        if (!v8) {
          sub_21610B7AC();
        }
        CFIndex result = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 48))(v8, ValueAtIndex[3]);
      }
    }
  }
  return result;
}

double sub_21628FCD0(uint64_t a1, int a2, int a3)
{
  unsigned __int16 v8 = a2;
  unsigned __int16 v7 = a3;
  double v3 = 0.0;
  if (a2 != a3)
  {
    uint64_t v4 = sub_21618FCC0((void *)(a1 + 104), &v8);
    double v3 = 150.0;
    if (v4)
    {
      CFIndex v5 = sub_21618FCC0(v4 + 3, &v7);
      if (v5) {
        return *((double *)v5 + 3);
      }
    }
  }
  return v3;
}

unint64_t sub_21628FD38(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  CFArrayRef v5 = *(const __CFArray **)(a1 + 144);
  if (!v5 || !*(unsigned char *)(a1 + 96)) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v5);
  double v11 = *(double *)(a2 + 32);
  double v12 = *(double *)(a2 + 40);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (Count < 1)
  {
    int v30 = 0;
    int v29 = 0;
  }
  else
  {
    CFIndex v13 = Count;
    for (CFIndex i = 0; i != v13; ++i)
    {
      CFDictionaryRef v15 = (float *)*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), i) + 3);
      int v16 = *(unsigned __int16 *)v15;
      if ((v16 - 97) <= 0x19)
      {
        v10.n128_f64[0] = (float)(v15[1] + (float)(v15[3] * 0.5)) - v11;
        double v17 = (float)(v15[2] + (float)(v15[4] * 0.5)) - v12;
        double v18 = v17 * v17 + v10.n128_f64[0] * v10.n128_f64[0];
        if (v38 >= v39)
        {
          uint64_t v20 = ((char *)v38 - (char *)v37) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_21610CB04();
          }
          uint64_t v22 = (char *)v39 - (char *)v37;
          if (((char *)v39 - (char *)v37) >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          __int16 v24 = (char *)sub_21612AA90((uint64_t)&v39, v23);
          uint64_t v26 = (double *)&v24[16 * v20];
          *(_WORD *)uint64_t v26 = v16;
          v26[1] = v18;
          uint64_t v27 = (__n128 *)v38;
          unsigned int v28 = (__n128 *)v26;
          if (v38 != (double *)v37)
          {
            do
            {
              __n128 v10 = v27[-1];
              v28[-1] = v10;
              --v28;
              --v27;
            }
            while (v27 != v37);
            uint64_t v27 = v37;
          }
          CFIndex v19 = v26 + 2;
          uint64_t v37 = v28;
          uint64_t v39 = (double *)&v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(_WORD *)uint64_t v38 = v16;
          v38[1] = v18;
          CFIndex v19 = v38 + 2;
        }
        uint64_t v38 = v19;
      }
    }
    int v29 = (__int16 *)v37;
    int v30 = (__int16 *)v38;
  }
  unint64_t v31 = 126 - 2 * __clz(((char *)v30 - (char *)v29) >> 4);
  uint64_t v40 = &unk_26C6CA040;
  if (v30 == v29) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  sub_2161E70C8(v29, v30, (uint64_t)&v40, v32, 1, v10);
  if (((char *)v38 - (char *)v37) >> 4 < a4) {
    a4 = ((char *)v38 - (char *)v37) >> 4;
  }
  if (a4)
  {
    uint64_t v33 = v37;
    unint64_t v34 = a4;
    do
    {
      unsigned __int8 v35 = v33->n128_u8[0];
      ++v33;
      *a3++ = v35;
      --v34;
    }
    while (v34);
    goto LABEL_34;
  }
  if (v37) {
LABEL_34:
  }
    operator delete(v37);
  return a4;
}

void sub_21628FF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21628FFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 8) < *(double *)(a3 + 8);
}

CFMutableArrayRef sub_21628FFC4(const __CFString *a1, uint64_t a2)
{
  if (a2)
  {
    double v3 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
    if (a1 && *(void *)(a2 + 48))
    {
      CFArrayGetCount(*(CFArrayRef *)(a2 + 48));
      CFStringGetLength(a1);
      CFArrayCreateMutable(*v3, 0, MEMORY[0x263EFFF70]);
      goto LABEL_8;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (a1)
    {
LABEL_8:
      CFStringGetLength(a1);
      sub_2161E208C();
    }
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (a1) {
      goto LABEL_8;
    }
  }
  return Mutable;
}

void sub_2162901C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_216283638(&a9, 0);
  if (v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(a1);
}

BOOL sub_216290218(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  if (Count < 1)
  {
    return 0;
  }
  else
  {
    CFIndex v3 = Count;
    CFIndex v4 = 0;
    BOOL v5 = 1;
    do
    {
      CFIndex v6 = (void *)sub_21628F1BC(a1, v4);
      if (v6)
      {
        uint64_t v9 = [v6 v7:v8];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 96))(v9) == 89) {
          break;
        }
      }
      BOOL v5 = ++v4 < v3;
    }
    while (v3 != v4);
  }
  return v5;
}

void sub_2162902C0(uint64_t a1)
{
  sub_216290330(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2162902F8(const void **a1, const void *a2)
{
  CFIndex v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_216290330(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF798;
  CFArrayRef v2 = (const void **)(a1 + 8);
  sub_216195B94((const void **)(a1 + 144), 0);
  sub_2161FCAD0(a1 + 104);
  sub_2161868BC((const void **)(a1 + 88), 0);
  sub_2161868BC((const void **)(a1 + 80), 0);
  sub_2161868BC((const void **)(a1 + 72), 0);
  sub_2161DFB5C((const void **)(a1 + 56), 0);
  sub_216195B94((const void **)(a1 + 48), 0);
  sub_2161DFB5C((const void **)(a1 + 40), 0);
  sub_2161BE0C8((const void **)(a1 + 32), 0);
  sub_2161BE0C8((const void **)(a1 + 24), 0);
  sub_2161BE0C8((const void **)(a1 + 16), 0);
  sub_2162902F8(v2, 0);
  return a1;
}

void sub_216290400(uint64_t a1, uint64_t a2)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 24) + 16))(&v81);
  BOOL v5 = v81;
  if (v81 == v82) {
    goto LABEL_94;
  }
  if ((**(_DWORD **)(a1 + 16) & 0x40000) != 0)
  {
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 32) + 16))(&v78);
  }
  uint64_t v6 = *(void *)(a2 + 56) - *(void *)(a2 + 48);
  if (!v6)
  {
    CFIndex v13 = 0;
    int v16 = 0;
    double v17 = 0;
    uint64_t v8 = 0;
    goto LABEL_62;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF9) {
    sub_21610CB04();
  }
  uint64_t v8 = (__n128 *)sub_21620DECC(v6 >> 3);
  uint64_t v9 = *(void *)(a2 + 56) - *(void *)(a2 + 48);
  if (!v9)
  {
    CFIndex v13 = 0;
    int v16 = 0;
LABEL_61:
    double v17 = v8;
    goto LABEL_62;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF9) {
    sub_21610CB04();
  }
  uint64_t v10 = v7;
  double v11 = (__n128 *)sub_21620DECC(v9 >> 3);
  CFIndex v13 = v11;
  uint64_t v14 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56) == v14)
  {
    int v16 = v11;
    goto LABEL_61;
  }
  unint64_t v15 = 0;
  __int16 v75 = &v11[v12];
  unsigned __int8 v76 = &v8[v10];
  int v16 = v11;
  double v17 = v8;
  do
  {
    double v18 = *(double **)(v14 + 8 * v15);
    if ((*(unsigned int (**)(double *))(*(void *)v18 + 408))(v18) == 1) {
      break;
    }
    if (v15 >= (v82 - (unsigned char *)v81) >> 3) {
      double v19 = -1.79769313e308;
    }
    else {
      double v19 = *((double *)v81 + v15);
    }
    if (v15 >= (v79 - (unsigned char *)v78) >> 3) {
      double v20 = -1.79769313e308;
    }
    else {
      double v20 = *((double *)v78 + v15);
    }
    double v21 = v19;
    if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      uint64_t v22 = (double *)sub_2161A2A80();
      double v23 = __exp10(v19);
      double v24 = v22[6];
      double v25 = __exp10(v20);
      double v21 = log10(v23 + v24 * v25);
    }
    int v26 = (*(uint64_t (**)(double *))(*(void *)v18 + 112))(v18);
    uint64_t v27 = sub_2161A2A80();
    double v28 = *((double *)v27 + 1);
    int v29 = *((_DWORD *)v27 + 1);
    int v30 = (*(uint64_t (**)(double *))(*(void *)v18 + 112))(v18);
    unint64_t v31 = (double *)sub_2161A2A80();
    (*(void (**)(double *, double))(*(void *)v18 + 400))(v18, -((double)(int)(v28 * (double)v26 - (double)v29 * v21) - v31[1] * (double)v30) / (double)*((int *)v31 + 1));
    v18[23] = v19;
    if (v17 >= v76)
    {
      uint64_t v32 = v17 - v8;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60) {
        sub_21610CB04();
      }
      if (((char *)v76 - (char *)v8) >> 3 > v33) {
        unint64_t v33 = ((char *)v76 - (char *)v8) >> 3;
      }
      if ((unint64_t)((char *)v76 - (char *)v8) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v33;
      }
      unsigned __int8 v35 = (char *)sub_21620DECC(v34);
      uint64_t v37 = (__n128 *)&v35[16 * v32];
      v37->n128_f64[0] = v19;
      v37->n128_u64[1] = v15;
      if (v17 == v8)
      {
        uint64_t v39 = v17;
        uint64_t v8 = (__n128 *)&v35[16 * v32];
      }
      else
      {
        uint64_t v38 = (__n128 *)&v35[16 * v32];
        do
        {
          v38[-1] = v17[-1];
          --v38;
          --v17;
        }
        while (v17 != v8);
        uint64_t v39 = v8;
        uint64_t v8 = v38;
      }
      unsigned __int8 v76 = (__n128 *)&v35[16 * v36];
      double v17 = v37 + 1;
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      v17->n128_f64[0] = v19;
      v17->n128_u64[1] = v15;
      ++v17;
    }
    int v40 = (*(uint64_t (**)(double *))(*(void *)v18 + 112))(v18);
    int v41 = (double *)sub_2161A2A80();
    int v42 = (int)(v41[1] * (double)v40 - (double)*((int *)v41 + 1) * v19);
    if (v16 >= v75)
    {
      uint64_t v43 = v16 - v13;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
        sub_21610CB04();
      }
      if (((char *)v75 - (char *)v13) >> 3 > v44) {
        unint64_t v44 = ((char *)v75 - (char *)v13) >> 3;
      }
      if ((unint64_t)((char *)v75 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v44;
      }
      BOOL v46 = (char *)sub_21620DECC(v45);
      uint64_t v48 = (__n128 *)&v46[16 * v43];
      v48->n128_u32[0] = v42;
      v48->n128_u64[1] = v15;
      if (v16 == v13)
      {
        unint64_t v50 = (__n128 *)&v46[16 * v43];
      }
      else
      {
        int v49 = (__n128 *)&v46[16 * v43];
        do
        {
          unint64_t v50 = v49 - 1;
          v49[-1] = v16[-1];
          --v16;
          --v49;
        }
        while (v16 != v13);
      }
      __int16 v75 = (__n128 *)&v46[16 * v47];
      int v16 = v48 + 1;
      if (v13) {
        operator delete(v13);
      }
      CFIndex v13 = v50;
    }
    else
    {
      v16->n128_u32[0] = v42;
      v16->n128_u64[1] = v15;
      ++v16;
    }
    uint64_t v51 = sub_2162D1CE4(0xCu);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v52 = (void *)(*(uint64_t (**)(double *))(*(void *)v18 + 544))(v18);
      sub_2161E30A8(v52, v53, &__p);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      int v84 = p_p;
      __int16 v85 = 2048;
      double v86 = v19;
      __int16 v87 = 2048;
      double v88 = v20;
      __int16 v89 = 2048;
      double v90 = v21;
      _os_log_debug_impl(&dword_2160F5000, v51, OS_LOG_TYPE_DEBUG, "[%s] static LM: %f dynamic LM: %f interpolated: %f", buf, 0x2Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    ++v15;
    uint64_t v14 = *(void *)(a2 + 48);
  }
  while (v15 < (*(void *)(a2 + 56) - v14) >> 3);
LABEL_62:
  if ((char *)v17 - (char *)v8 < 16)
  {
LABEL_66:
    v59.n128_f64[0] = sub_216290C34(v8, v17, v17 - v8, 0, 0, v4);
  }
  else
  {
    int v55 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v56 = v17 - v8;
    while (1)
    {
      unsigned int v57 = (__n128 *)operator new(16 * v56, v55);
      if (v57) {
        break;
      }
      BOOL v58 = v56 > 1;
      v56 >>= 1;
      if (!v58) {
        goto LABEL_66;
      }
    }
    unsigned int v60 = v57;
    sub_216290C34(v8, v17, v17 - v8, v57, v56, v4);
    operator delete(v60);
  }
  if (v17 != v8)
  {
    uint64_t v61 = 0;
    uint64_t v62 = *(void *)(a2 + 48);
    if ((unint64_t)(v17 - v8) <= 1) {
      uint64_t v63 = 1;
    }
    else {
      uint64_t v63 = v17 - v8;
    }
    uint64_t v64 = &v8->n128_u64[1];
    do
    {
      unint64_t v65 = *v64;
      v64 += 2;
      *(_DWORD *)(*(void *)(v62 + 8 * v65) + 192) = v61++;
    }
    while (v63 != v61);
  }
  if ((char *)v16 - (char *)v13 < 16)
  {
LABEL_78:
    sub_2162917BC(v13, v16, v16 - v13, 0, 0, v59);
  }
  else
  {
    uint64_t v66 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v67 = v16 - v13;
    while (1)
    {
      uint64_t v68 = (__n128 *)operator new(16 * v67, v66);
      if (v68) {
        break;
      }
      BOOL v58 = v67 > 1;
      v67 >>= 1;
      if (!v58) {
        goto LABEL_78;
      }
    }
    __int16 v69 = v68;
    sub_2162917BC(v13, v16, v16 - v13, v68, v67, v59);
    operator delete(v69);
  }
  if (v16 != v13)
  {
    uint64_t v70 = 0;
    uint64_t v71 = *(void *)(a2 + 48);
    if ((unint64_t)(v16 - v13) <= 1) {
      uint64_t v72 = 1;
    }
    else {
      uint64_t v72 = v16 - v13;
    }
    __int16 v73 = &v13->n128_u64[1];
    do
    {
      unint64_t v74 = *v73;
      v73 += 2;
      *(_DWORD *)(*(void *)(v71 + 8 * v74) + 196) = v70++;
    }
    while (v72 != v70);
    goto LABEL_88;
  }
  if (v13) {
LABEL_88:
  }
    operator delete(v13);
  if (v8) {
    operator delete(v8);
  }
  if (v78)
  {
    uint64_t v79 = v78;
    operator delete(v78);
  }
  BOOL v5 = v81;
LABEL_94:
  if (v5)
  {
    uint64_t v82 = v5;
    operator delete(v5);
  }
}

void sub_216290B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216290C20()
{
}

double sub_216290C34(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  if (a3 < 2) {
    return a6.n128_f64[0];
  }
  uint64_t v7 = (unint64_t *)a1;
  if (a3 == 2)
  {
    a6.n128_u64[0] = a2[-1].n128_u64[0];
    double v8 = a1->n128_f64[0];
    if (a6.n128_f64[0] == a1->n128_f64[0]) {
      int v9 = 0;
    }
    else {
      int v9 = -127;
    }
    if (a6.n128_f64[0] > a1->n128_f64[0]) {
      int v9 = 1;
    }
    if (a6.n128_f64[0] < a1->n128_f64[0]) {
      int v9 = -1;
    }
    if (v9
      || ((unint64_t v10 = a2[-1].n128_u64[1], v11 = a1->n128_u64[1], v12 = v10 == v11, v10 < v11)
        ? (LOBYTE(v9) = -1)
        : (LOBYTE(v9) = 1),
          !v12))
    {
      if ((char)v9 >= 1)
      {
        a1->n128_u64[0] = a6.n128_u64[0];
        a2[-1].n128_f64[0] = v8;
        unint64_t v13 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v13;
      }
    }
    return a6.n128_f64[0];
  }
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2) {
      return a6.n128_f64[0];
    }
    n128_u64 = a1[1].n128_u64;
    if (&a1[1] == a2) {
      return a6.n128_f64[0];
    }
    uint64_t v22 = 0;
    double v23 = a1;
    while (1)
    {
      double v24 = v23;
      double v23 = (__n128 *)n128_u64;
      a6.n128_u64[0] = *n128_u64;
      double v25 = v24->n128_f64[0];
      BOOL v26 = *(double *)n128_u64 < v24->n128_f64[0];
      BOOL v27 = *(double *)n128_u64 <= v24->n128_f64[0];
      if (*(double *)n128_u64 == v24->n128_f64[0]) {
        int v28 = 0;
      }
      else {
        int v28 = -127;
      }
      if (!v27) {
        int v28 = 1;
      }
      if (v26) {
        int v28 = -1;
      }
      if (v28
        || ((v29 = v24[1].n128_u64[1], unint64_t v30 = v24->n128_u64[1], v31 = v29 == v30, v29 < v30)
          ? (LOBYTE(v28) = -1)
          : (LOBYTE(v28) = 1),
            !v31))
      {
        if ((char)v28 >= 1)
        {
          unint64_t v32 = v24[1].n128_u64[1];
          uint64_t v33 = v22;
          while (1)
          {
            uint64_t v34 = v33;
            unsigned __int8 v35 = (double *)((char *)a1->n128_f64 + v33);
            void v35[2] = v25;
            void v35[3] = v35[1];
            if (!v34) {
              break;
            }
            double v25 = *(v35 - 2);
            if (a6.n128_f64[0] == v25) {
              int v36 = 0;
            }
            else {
              int v36 = -127;
            }
            if (a6.n128_f64[0] > v25) {
              int v36 = 1;
            }
            if (a6.n128_f64[0] < v25) {
              int v36 = -1;
            }
            if (v36
              || ((v37 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v34), BOOL v38 = v32 == v37, v32 < v37)
                ? (LOBYTE(v36) = -1)
                : (LOBYTE(v36) = 1),
                  !v38))
            {
              int v39 = (char)v36;
              uint64_t v33 = v34 - 16;
              if (v39 > 0) {
                continue;
              }
            }
            int v40 = (__n128 *)((char *)a1 + v34);
            goto LABEL_56;
          }
          int v40 = a1;
LABEL_56:
          v40->n128_u64[0] = a6.n128_u64[0];
          v40->n128_u64[1] = v32;
        }
      }
      n128_u64 = v23[1].n128_u64;
      v22 += 16;
      if (&v23[1] == a2) {
        return a6.n128_f64[0];
      }
    }
  }
  int v16 = (unint64_t *)a4;
  unint64_t v17 = a3 >> 1;
  double v18 = &a1[a3 >> 1];
  unint64_t v19 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    sub_216290C34(a1, v18, v19, a4, a5);
    sub_216290C34(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v16, a5);
    a6.n128_f64[0] = sub_216291258(v7, &v7[2 * (a3 >> 1)], a2->n128_u64, a3 >> 1, a3 - (a3 >> 1), v16, a5, v20);
    return a6.n128_f64[0];
  }
  __n128 v41 = sub_216290F6C(a1, v18, v19, a4, a6);
  int v42 = (__n128 *)&v16[2 * v17];
  a6.n128_u64[0] = sub_216290F6C((__n128 *)&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v42, v41).n128_u64[0];
  uint64_t v43 = v42;
  unint64_t v44 = &v16[2 * a3];
  while (v43 != (__n128 *)v44)
  {
    a6.n128_u64[0] = *v16;
    if (v43->n128_f64[0] == *(double *)v16) {
      int v45 = 0;
    }
    else {
      int v45 = -127;
    }
    if (v43->n128_f64[0] > *(double *)v16) {
      int v45 = 1;
    }
    if (v43->n128_f64[0] < *(double *)v16) {
      int v46 = -1;
    }
    else {
      int v46 = v45;
    }
    if (!v46)
    {
      unint64_t v47 = v43->n128_u64[1];
      unint64_t v48 = v16[1];
      BOOL v49 = v47 == v48;
      LOBYTE(v46) = v47 < v48 ? -1 : 1;
      if (v49) {
        goto LABEL_77;
      }
    }
    if ((char)v46 <= 0)
    {
      unint64_t v47 = v16[1];
LABEL_77:
      *uint64_t v7 = a6.n128_u64[0];
      v7[1] = v47;
      v16 += 2;
      goto LABEL_78;
    }
    *uint64_t v7 = v43->n128_u64[0];
    v7[1] = v43->n128_u64[1];
    ++v43;
LABEL_78:
    v7 += 2;
    if (v16 == (unint64_t *)v42)
    {
      if (v43 != (__n128 *)v44)
      {
        unint64_t v50 = 0;
        do
        {
          uint64_t v51 = &v43[v50 / 0x10];
          uint64_t v52 = &v7[v50 / 8];
          a6.n128_u64[0] = v43[v50 / 0x10].n128_u64[0];
          *uint64_t v52 = a6.n128_u64[0];
          v52[1] = v43[v50 / 0x10].n128_u64[1];
          v50 += 16;
        }
        while (&v51[1] != (__n128 *)v44);
      }
      return a6.n128_f64[0];
    }
  }
  if (v16 != (unint64_t *)v42)
  {
    uint64_t v53 = 0;
    do
    {
      unsigned int v54 = (__n128 *)&v16[v53];
      int v55 = &v7[v53];
      a6.n128_u64[0] = v16[v53];
      *int v55 = a6.n128_u64[0];
      v55[1] = v16[v53 + 1];
      v53 += 2;
    }
    while (&v54[1] != v42);
  }
  return a6.n128_f64[0];
}

__n128 sub_216290F6C(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  if (a3)
  {
    BOOL v5 = a4;
    double v8 = a1;
    if (a3 == 2)
    {
      int v9 = a2 - 1;
      double v10 = a2[-1].n128_f64[0];
      if (v10 == a1->n128_f64[0]) {
        int v11 = 0;
      }
      else {
        int v11 = -127;
      }
      if (v10 > a1->n128_f64[0]) {
        int v11 = 1;
      }
      if (v10 < a1->n128_f64[0]) {
        int v11 = -1;
      }
      if (!v11
        && ((unint64_t v12 = a2[-1].n128_u64[1], v13 = a1->n128_u64[1], v14 = v12 == v13, v12 < v13)
          ? (LOBYTE(v11) = -1)
          : (LOBYTE(v11) = 1),
            v14)
        || (char)v11 < 1)
      {
        *a4 = *a1;
        CFIndex result = *v9;
      }
      else
      {
        *a4 = *v9;
        CFIndex result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      CFIndex result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      unsigned __int8 v35 = &a1[a3 >> 1];
      sub_216290C34(a1, v35, a3 >> 1, a4, a3 >> 1);
      sub_216290C34(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      int v36 = &v8[a3 >> 1];
      while (v36 != a2)
      {
        if (v36->n128_f64[0] == v8->n128_f64[0]) {
          int v37 = 0;
        }
        else {
          int v37 = -127;
        }
        if (v36->n128_f64[0] > v8->n128_f64[0]) {
          int v37 = 1;
        }
        if (v36->n128_f64[0] < v8->n128_f64[0]) {
          int v37 = -1;
        }
        if (!v37
          && ((v38 = v36->n128_u64[1], v39 = v8->n128_u64[1], BOOL v40 = v38 == v39, v38 < v39)
            ? (LOBYTE(v37) = -1)
            : (LOBYTE(v37) = 1),
              v40)
          || (char)v37 < 1)
        {
          __n128 v42 = *v8++;
          CFIndex result = v42;
        }
        else
        {
          __n128 v41 = *v36++;
          CFIndex result = v41;
        }
        *v5++ = result;
        if (v8 == v35)
        {
          if (v36 != a2)
          {
            uint64_t v43 = 0;
            do
            {
              CFIndex result = v36[v43];
              v5[v43++] = result;
            }
            while (&v36[v43] != a2);
          }
          return result;
        }
      }
      if (v8 != v35)
      {
        uint64_t v44 = 0;
        do
        {
          CFIndex result = v8[v44];
          v5[v44++] = result;
        }
        while (&v8[v44] != v35);
      }
    }
    else if (a1 != a2)
    {
      CFIndex result = *a1;
      *a4 = *a1;
      n128_f64 = a1[1].n128_f64;
      if (&a1[1] != a2)
      {
        uint64_t v16 = 0;
        unint64_t v17 = (double *)a4;
        double v18 = (double *)a4;
        do
        {
          double v19 = *v18;
          v18 += 2;
          __n128 v20 = (__n128 *)n128_f64;
          BOOL v21 = *n128_f64 < v19;
          BOOL v22 = *n128_f64 <= v19;
          if (*n128_f64 == v19) {
            int v23 = 0;
          }
          else {
            int v23 = -127;
          }
          if (!v22) {
            int v23 = 1;
          }
          if (v21) {
            int v23 = -1;
          }
          if (!v23
            && ((unint64_t v24 = v8[1].n128_u64[1], v25 = *((void *)v17 + 1), v26 = v24 == v25, v24 < v25)
              ? (LOBYTE(v23) = -1)
              : (LOBYTE(v23) = 1),
                v26)
            || (char)v23 < 1)
          {
            CFIndex result = *v20;
            *(__n128 *)double v18 = *v20;
          }
          else
          {
            *(_OWORD *)double v18 = *(_OWORD *)v17;
            BOOL v27 = a4;
            if (v17 != (double *)a4)
            {
              uint64_t v28 = v16;
              while (1)
              {
                double v29 = *(double *)((char *)a4[-1].n128_f64 + v28);
                if (v20->n128_f64[0] == v29) {
                  int v30 = 0;
                }
                else {
                  int v30 = -127;
                }
                if (v20->n128_f64[0] > v29) {
                  int v30 = 1;
                }
                if (v20->n128_f64[0] < v29) {
                  int v30 = -1;
                }
                if (!v30)
                {
                  unint64_t v31 = v8[1].n128_u64[1];
                  unint64_t v32 = *(unint64_t *)((char *)&a4->n128_u64[-1] + v28);
                  BOOL v33 = v31 == v32;
                  LOBYTE(v3sub_2161A108C(&a9, 0) = v31 < v32 ? -1 : 1;
                  if (v33) {
                    break;
                  }
                }
                if ((char)v30 < 1)
                {
                  BOOL v27 = (__n128 *)((char *)a4 + v28);
                  goto LABEL_57;
                }
                v17 -= 2;
                uint64_t v34 = (char *)a4 + v28;
                *(double *)uint64_t v34 = v29;
                *((void *)v34 + 1) = *(unint64_t *)((char *)&a4->n128_u64[-1] + v28);
                v28 -= 16;
                if (!v28)
                {
                  BOOL v27 = a4;
                  goto LABEL_57;
                }
              }
              BOOL v27 = (__n128 *)v17;
            }
LABEL_57:
            result.n128_u64[0] = v20->n128_u64[0];
            v27->n128_u64[0] = v20->n128_u64[0];
            v27->n128_u64[1] = v8[1].n128_u64[1];
          }
          n128_f64 = v20[1].n128_f64;
          v16 += 16;
          unint64_t v17 = v18;
          double v8 = v20;
        }
        while (&v20[1] != a2);
      }
    }
  }
  return result;
}

double sub_216291258(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, __n128 a8)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (a4)
      {
        unint64_t v10 = 0;
        a8.n128_u64[0] = *a2;
        uint64_t v11 = -a4;
        while (1)
        {
          double v12 = *(double *)&a1[v10 / 8];
          if (a8.n128_f64[0] == v12) {
            int v13 = 0;
          }
          else {
            int v13 = -127;
          }
          if (a8.n128_f64[0] > v12) {
            int v13 = 1;
          }
          if (a8.n128_f64[0] < v12) {
            int v13 = -1;
          }
          if (v13
            || ((v14 = a2[1], unint64_t v15 = a1[v10 / 8 + 1], v16 = v14 == v15, v14 < v15)
              ? (LOBYTE(v13) = -1)
              : (LOBYTE(v13) = 1),
                !v16))
          {
            if ((char)v13 > 0) {
              break;
            }
          }
          v10 += 16;
          if (__CFADD__(v11++, 1)) {
            return a8.n128_f64[0];
          }
        }
        uint64_t v18 = -v11;
        if (-v11 >= a5)
        {
          if (v11 == -1)
          {
            uint64_t v78 = &a1[v10 / 8];
            *uint64_t v78 = a8.n128_u64[0];
            *(double *)a2 = v12;
            unint64_t v79 = v78[1];
            v78[1] = a2[1];
            a2[1] = v79;
            return a8.n128_f64[0];
          }
          if (v11 > 0) {
            uint64_t v18 = 1 - v11;
          }
          uint64_t v31 = v18 >> 1;
          BOOL v22 = &a1[2 * (v18 >> 1) + v10 / 8];
          if (a2 == a3)
          {
            uint64_t v20 = 0;
          }
          else
          {
            uint64_t v20 = 0;
            double v33 = *(double *)v22;
            unint64_t v34 = v22[1];
            unint64_t v35 = ((char *)a3 - (char *)a2) >> 4;
            do
            {
              unint64_t v36 = v35 >> 1;
              unint64_t v37 = v20 + (v35 >> 1);
              double v38 = *(double *)&a2[2 * v37];
              if (v38 == v33) {
                int v39 = 0;
              }
              else {
                int v39 = -127;
              }
              if (v38 > v33) {
                int v39 = 1;
              }
              if (v38 < v33) {
                int v39 = -1;
              }
              if (v39
                || ((unint64_t v40 = a2[2 * v20 + 1 + 2 * v36], v41 = v40 == v34, v40 < v34)
                  ? (LOBYTE(v39) = -1)
                  : (LOBYTE(v39) = 1),
                    !v41))
              {
                if ((char)v39 >= 1)
                {
                  uint64_t v20 = v37 + 1;
                  unint64_t v36 = v35 + ~v36;
                }
              }
              unint64_t v35 = v36;
            }
            while (v36);
          }
          uint64_t v32 = (16 * v20) >> 4;
          BOOL v21 = &a2[2 * v20];
        }
        else
        {
          if (a5 >= 0) {
            uint64_t v19 = a5;
          }
          else {
            uint64_t v19 = a5 + 1;
          }
          uint64_t v20 = v19 >> 1;
          BOOL v21 = &a2[2 * v20];
          BOOL v22 = &a1[v10 / 8];
          if ((char *)a2 - (char *)a1 != v10)
          {
            double v23 = *(double *)v21;
            unint64_t v24 = v21[1];
            unint64_t v25 = (uint64_t)((char *)a2 - (char *)a1 - v10) >> 4;
            BOOL v22 = &a1[v10 / 8];
            do
            {
              unint64_t v26 = v25 >> 1;
              BOOL v27 = &v22[2 * (v25 >> 1)];
              if (*(double *)v27 == v23) {
                int v28 = 0;
              }
              else {
                int v28 = -127;
              }
              if (*(double *)v27 < v23) {
                int v28 = 1;
              }
              if (*(double *)v27 > v23) {
                int v28 = -1;
              }
              if (!v28 && ((v29 = v27[1], BOOL v30 = v29 == v24, v29 > v24) ? (LOBYTE(v28) = -1) : (LOBYTE(v28) = 1), v30)
                || (char)v28 <= 0)
              {
                BOOL v22 = v27 + 2;
                unint64_t v26 = v25 + ~v26;
              }
              unint64_t v25 = v26;
            }
            while (v26);
          }
          uint64_t v31 = (uint64_t)((char *)v22 - (char *)a1 - v10) >> 4;
          uint64_t v32 = v20;
        }
        __n128 v42 = v21;
        if (v22 != a2)
        {
          __n128 v42 = v22;
          if (v20)
          {
            uint64_t v43 = &a2[2 * v20];
            double v44 = *(double *)v22;
            unint64_t *v22 = a8.n128_u64[0];
            *(double *)a2 = v44;
            unint64_t v45 = v22[1];
            v22[1] = a2[1];
            a2[1] = v45;
            __n128 v42 = v22 + 2;
            if (v20 != 1)
            {
              int v46 = a2 + 2;
              do
              {
                if (v42 == a2) {
                  a2 = v46;
                }
                unint64_t v47 = *v42;
                *__n128 v42 = *v46;
                *int v46 = v47;
                unint64_t v48 = v42[1];
                v42[1] = v46[1];
                v46[1] = v48;
                v42 += 2;
                v46 += 2;
              }
              while (v46 != v43);
            }
            if (v42 != a2)
            {
              BOOL v49 = v42;
              unint64_t v50 = a2;
              do
              {
                while (1)
                {
                  unint64_t v51 = *v49;
                  *BOOL v49 = *v50;
                  *unint64_t v50 = v51;
                  unint64_t v52 = v49[1];
                  v49[1] = v50[1];
                  v50[1] = v52;
                  v49 += 2;
                  v50 += 2;
                  if (v50 == v43) {
                    break;
                  }
                  if (v49 == a2) {
                    a2 = v50;
                  }
                }
                unint64_t v50 = a2;
              }
              while (v49 != a2);
            }
          }
        }
        a4 = -(v31 + v11);
        uint64_t v53 = a5 - v32;
        if (v31 + v32 >= a5 - (v31 + v32) - v11)
        {
          __n128 v59 = a6;
          unsigned int v60 = &a1[v10 / 8];
          sub_216291258(v42, v21, a3, -(v31 + v11), a5 - v32, a6, a7);
          a1 = v60;
          a6 = v59;
          a2 = v22;
          uint64_t v53 = v32;
          a4 = v31;
          a3 = v42;
        }
        else
        {
          unsigned int v54 = v22;
          int v55 = a3;
          uint64_t v56 = v31;
          unsigned int v57 = a6;
          BOOL v58 = v21;
          sub_216291258(&a1[v10 / 8], v54, v42, v56, v32, a6, a7);
          a2 = v58;
          a3 = v55;
          a6 = v57;
          a1 = v42;
        }
        a5 = v53;
        if (v53) {
          continue;
        }
      }
      return a8.n128_f64[0];
    }
    if (a4 > a5)
    {
      if (a3 == a2) {
        return a8.n128_f64[0];
      }
      uint64_t v61 = 0;
      do
      {
        a8 = *(__n128 *)&a2[v61];
        *(__n128 *)&a6[v61] = a8;
        v61 += 2;
      }
      while (&a2[v61] != a3);
      if (!(v61 * 8)) {
        return a8.n128_f64[0];
      }
      uint64_t v62 = &a6[v61];
      for (CFIndex i = a3 - 2; ; i -= 2)
      {
        if (a2 == a1)
        {
          uint64_t v80 = 0;
          do
          {
            uint64_t v81 = &i[v80];
            a8.n128_u64[0] = v62[v80 - 2];
            *uint64_t v81 = a8.n128_u64[0];
            v81[1] = v62[v80 - 1];
            v80 -= 2;
          }
          while (&v62[v80] != a6);
          return a8.n128_f64[0];
        }
        double v64 = *((double *)a2 - 2);
        a8.n128_u64[0] = *(v62 - 2);
        if (a8.n128_f64[0] == v64) {
          int v65 = 0;
        }
        else {
          int v65 = -127;
        }
        if (a8.n128_f64[0] > v64) {
          int v65 = 1;
        }
        if (a8.n128_f64[0] < v64) {
          int v66 = -1;
        }
        else {
          int v66 = v65;
        }
        if (!v66)
        {
          unint64_t v67 = *(v62 - 1);
          unint64_t v68 = *(a2 - 1);
          BOOL v69 = v67 == v68;
          LOBYTE(v66) = v67 < v68 ? -1 : 1;
          if (v69) {
            goto LABEL_109;
          }
        }
        if ((char)v66 <= 0) {
          break;
        }
        *(double *)CFIndex i = v64;
        unint64_t v67 = *(a2 - 1);
        a2 -= 2;
LABEL_110:
        i[1] = v67;
        if (v62 == a6) {
          return a8.n128_f64[0];
        }
      }
      unint64_t v67 = *(v62 - 1);
LABEL_109:
      *CFIndex i = a8.n128_u64[0];
      v62 -= 2;
      goto LABEL_110;
    }
    if (a1 != a2)
    {
      uint64_t v70 = 0;
      do
      {
        a8 = *(__n128 *)&a1[v70];
        *(__n128 *)&a6[v70] = a8;
        v70 += 2;
      }
      while (&a1[v70] != a2);
      if (v70 * 8)
      {
        uint64_t v71 = &a6[v70];
        uint64_t v72 = (uint64_t)&a6[v70 - 2];
        while (1)
        {
          if (a2 == a3)
          {
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = &a1[v82];
              int v84 = &a6[v82];
              a8.n128_u64[0] = a6[v82];
              *unint64_t v83 = a8.n128_u64[0];
              v83[1] = a6[v82 + 1];
              v82 += 2;
            }
            while ((unint64_t *)v72 != v84);
            return a8.n128_f64[0];
          }
          a8.n128_u64[0] = *a6;
          if (*(double *)a2 == *(double *)a6) {
            int v73 = 0;
          }
          else {
            int v73 = -127;
          }
          if (*(double *)a2 > *(double *)a6) {
            int v73 = 1;
          }
          if (*(double *)a2 < *(double *)a6) {
            int v74 = -1;
          }
          else {
            int v74 = v73;
          }
          if (!v74)
          {
            unint64_t v75 = a2[1];
            unint64_t v76 = a6[1];
            BOOL v77 = v75 == v76;
            LOBYTE(v74) = v75 < v76 ? -1 : 1;
            if (v77) {
              goto LABEL_134;
            }
          }
          if ((char)v74 <= 0) {
            break;
          }
          *a1 = *a2;
          a1[1] = a2[1];
          a2 += 2;
LABEL_135:
          a1 += 2;
          if (v71 == a6) {
            return a8.n128_f64[0];
          }
        }
        unint64_t v75 = a6[1];
LABEL_134:
        *a1 = a8.n128_u64[0];
        a1[1] = v75;
        a6 += 2;
        goto LABEL_135;
      }
    }
  }
  return a8.n128_f64[0];
}

void sub_2162917BC(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      signed __int32 v8 = a2[-1].n128_i32[0];
      unsigned __int32 v9 = a1->n128_u32[0];
      char v10 = -1;
      if (v8 >= (signed __int32)a1->n128_u32[0]) {
        char v10 = 1;
      }
      if (v8 == v9)
      {
        unint64_t v11 = a2[-1].n128_u64[1];
        unint64_t v12 = a1->n128_u64[1];
        BOOL v13 = v11 >= v12;
        BOOL v14 = v11 == v12;
        char v10 = -1;
        if (v13) {
          char v10 = 1;
        }
        if (v14) {
          char v10 = 0;
        }
      }
      if (v10 < 0)
      {
        a1->n128_u32[0] = v8;
        a2[-1].n128_u32[0] = v9;
        unint64_t v15 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v15;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        BOOL v22 = a1 + 1;
        if (&a1[1] != a2)
        {
          uint64_t v23 = 0;
          unint64_t v24 = a1;
          do
          {
            unint64_t v25 = v22;
            signed __int32 v26 = v22->n128_u32[0];
            signed __int32 v27 = v24->n128_u32[0];
            if (v26 >= (signed __int32)v24->n128_u32[0]) {
              char v28 = 1;
            }
            else {
              char v28 = -1;
            }
            if (v26 == v27)
            {
              unint64_t v29 = v24[1].n128_u64[1];
              unint64_t v30 = v24->n128_u64[1];
              BOOL v31 = v29 == v30;
              char v28 = v29 >= v30 ? 1 : -1;
              if (v31) {
                char v28 = 0;
              }
            }
            if (v28 < 0)
            {
              unint64_t v32 = v24[1].n128_u64[1];
              uint64_t v33 = v23;
              while (1)
              {
                unint64_t v34 = (char *)a1 + v33;
                *((_DWORD *)v34 + 4) = v27;
                *((void *)v34 + 3) = *(unint64_t *)((char *)&a1->n128_u64[1] + v33);
                if (!v33) {
                  break;
                }
                signed __int32 v27 = *((_DWORD *)v34 - 4);
                if (v26 >= v27) {
                  char v35 = 1;
                }
                else {
                  char v35 = -1;
                }
                if (v26 == v27)
                {
                  unint64_t v36 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v33);
                  BOOL v37 = v32 == v36;
                  char v35 = v32 >= v36 ? 1 : -1;
                  if (v37) {
                    char v35 = 0;
                  }
                }
                v33 -= 16;
                if ((v35 & 0x80) == 0)
                {
                  uint64_t v38 = (uint64_t)&a1[1] + v33;
                  goto LABEL_46;
                }
              }
              uint64_t v38 = (uint64_t)a1;
LABEL_46:
              *(_DWORD *)uint64_t v38 = v26;
              *(void *)(v38 + 8) = v32;
            }
            BOOL v22 = v25 + 1;
            v23 += 16;
            unint64_t v24 = v25;
          }
          while (&v25[1] != a2);
        }
      }
    }
    else
    {
      uint64_t v18 = a4;
      unint64_t v19 = a3 >> 1;
      uint64_t v20 = &a1[a3 >> 1];
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v39 = sub_216291AB0(a1, v20, v21, a4, a6);
        unint64_t v40 = &v18[v19];
        sub_216291AB0(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v40, v39);
        BOOL v41 = &v18[a3];
        __n128 v42 = v40;
        while (v42 != v41)
        {
          unsigned __int32 v43 = v42->n128_u32[0];
          if ((signed __int32)v42->n128_u32[0] >= (signed __int32)v18->n128_u32[0]) {
            char v44 = 1;
          }
          else {
            char v44 = -1;
          }
          if (v43 == v18->n128_u32[0])
          {
            unint64_t v45 = v42->n128_u64[1];
            unint64_t v46 = v18->n128_u64[1];
            BOOL v47 = v45 == v46;
            char v44 = v45 >= v46 ? 1 : -1;
            if (v47) {
              char v44 = 0;
            }
          }
          if (v44 < 0)
          {
            unint64_t v48 = v42;
          }
          else
          {
            unsigned __int32 v43 = v18->n128_u32[0];
            unint64_t v48 = v18;
          }
          unint64_t v49 = v48->n128_u64[1];
          if (v44 < 0) {
            ++v42;
          }
          else {
            ++v18;
          }
          v7->n128_u32[0] = v43;
          v7->n128_u64[1] = v49;
          ++v7;
          if (v18 == v40)
          {
            if (v42 != v41)
            {
              uint64_t v50 = 0;
              do
              {
                unint64_t v51 = &v42[v50];
                unint64_t v52 = &v7[v50];
                v52->n128_u32[0] = v42[v50].n128_u32[0];
                v52->n128_u64[1] = v42[v50++].n128_u64[1];
              }
              while (&v51[1] != v41);
            }
            return;
          }
        }
        if (v18 != v40)
        {
          uint64_t v53 = 0;
          do
          {
            unsigned int v54 = &v18[v53];
            int v55 = &v7[v53];
            v55->n128_u32[0] = v18[v53].n128_u32[0];
            v55->n128_u64[1] = v18[v53++].n128_u64[1];
          }
          while (&v54[1] != v40);
        }
      }
      else
      {
        sub_2162917BC(a1, v20, v21, a4, a5);
        sub_2162917BC(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v18, a5);
        sub_216291D4C((char *)v7, (int *)&v7[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), (int *)v18, a5);
      }
    }
  }
}

__n128 sub_216291AB0(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  if (a3)
  {
    BOOL v5 = a4;
    signed __int32 v8 = a1;
    if (a3 == 2)
    {
      unsigned __int32 v9 = a2 - 1;
      signed __int32 v10 = a2[-1].n128_i32[0];
      BOOL v11 = v10 == a1->n128_u32[0];
      if (v10 >= (signed __int32)a1->n128_u32[0]) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v11)
      {
        unint64_t v13 = a2[-1].n128_u64[1];
        unint64_t v14 = a1->n128_u64[1];
        BOOL v15 = v13 >= v14;
        BOOL v16 = v13 == v14;
        char v12 = -1;
        if (v15) {
          char v12 = 1;
        }
        if (v16) {
          char v12 = 0;
        }
      }
      if (v12 < 0)
      {
        *a4 = *v9;
        CFIndex result = *a1;
      }
      else
      {
        *a4 = *a1;
        CFIndex result = *v9;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      CFIndex result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v36 = &a1[a3 >> 1];
      sub_2162917BC(a1, v36, a3 >> 1, a4, a3 >> 1);
      sub_2162917BC(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      BOOL v37 = &v8[a3 >> 1];
      while (v37 != a2)
      {
        if ((signed __int32)v37->n128_u32[0] >= (signed __int32)v8->n128_u32[0]) {
          char v38 = 1;
        }
        else {
          char v38 = -1;
        }
        if (v37->n128_u32[0] == v8->n128_u32[0])
        {
          unint64_t v39 = v37->n128_u64[1];
          unint64_t v40 = v8->n128_u64[1];
          BOOL v41 = v39 == v40;
          char v38 = v39 >= v40 ? 1 : -1;
          if (v41) {
            char v38 = 0;
          }
        }
        if (v38 < 0)
        {
          __n128 v43 = *v37++;
          CFIndex result = v43;
        }
        else
        {
          __n128 v42 = *v8++;
          CFIndex result = v42;
        }
        *v5++ = result;
        if (v8 == v36)
        {
          if (v37 != a2)
          {
            uint64_t v44 = 0;
            do
            {
              CFIndex result = v37[v44];
              v5[v44++] = result;
            }
            while (&v37[v44] != a2);
          }
          return result;
        }
      }
      if (v8 != v36)
      {
        uint64_t v45 = 0;
        do
        {
          CFIndex result = v8[v45];
          v5[v45++] = result;
        }
        while (&v8[v45] != v36);
      }
    }
    else if (a1 != a2)
    {
      CFIndex result = *a1;
      *a4 = *a1;
      unint64_t v17 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v18 = 0;
        unint64_t v19 = a4;
        uint64_t v20 = a4;
        do
        {
          unint64_t v21 = v17;
          signed __int32 v22 = v20->n128_u32[0];
          ++v20;
          BOOL v23 = v17->n128_u32[0] == v22;
          if ((signed __int32)v17->n128_u32[0] >= v22) {
            char v24 = 1;
          }
          else {
            char v24 = -1;
          }
          if (v23)
          {
            unint64_t v25 = v8[1].n128_u64[1];
            unint64_t v26 = v19->n128_u64[1];
            BOOL v27 = v25 == v26;
            char v24 = v25 >= v26 ? 1 : -1;
            if (v27) {
              char v24 = 0;
            }
          }
          if (v24 < 0)
          {
            CFIndex result = *v19;
            *uint64_t v20 = *v19;
            char v28 = a4;
            if (v19 != a4)
            {
              uint64_t v29 = v18;
              while (1)
              {
                signed __int32 v30 = *(__int32 *)((char *)a4[-1].n128_i32 + v29);
                if ((signed __int32)v21->n128_u32[0] >= v30) {
                  char v31 = 1;
                }
                else {
                  char v31 = -1;
                }
                if (v21->n128_u32[0] == v30)
                {
                  unint64_t v32 = v8[1].n128_u64[1];
                  unint64_t v33 = *(unint64_t *)((char *)&a4->n128_u64[-1] + v29);
                  BOOL v34 = v32 == v33;
                  if (v32 >= v33) {
                    char v31 = 1;
                  }
                  else {
                    char v31 = -1;
                  }
                  if (v34) {
                    char v31 = 0;
                  }
                }
                if ((v31 & 0x80) == 0) {
                  break;
                }
                char v35 = (char *)a4 + v29;
                *(_DWORD *)char v35 = v30;
                *((void *)v35 + 1) = *(unint64_t *)((char *)&a4->n128_u64[-1] + v29);
                v29 -= 16;
                if (!v29)
                {
                  char v28 = a4;
                  goto LABEL_48;
                }
              }
              char v28 = (__n128 *)((char *)a4 + v29);
            }
LABEL_48:
            v28->n128_u32[0] = v21->n128_u32[0];
            v28->n128_u64[1] = v8[1].n128_u64[1];
          }
          else
          {
            CFIndex result = *v21;
            *uint64_t v20 = *v21;
          }
          unint64_t v17 = v21 + 1;
          v18 += 16;
          unint64_t v19 = v20;
          signed __int32 v8 = v21;
        }
        while (&v21[1] != a2);
      }
    }
  }
  return result;
}

char *sub_216291D4C(char *result, int *a2, char *a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      unint64_t v10 = 0;
      int v11 = *a2;
      uint64_t v12 = -a4;
      while (1)
      {
        int v13 = *(_DWORD *)&result[v10];
        if (v11 >= v13) {
          char v14 = 1;
        }
        else {
          char v14 = -1;
        }
        if (v11 == v13)
        {
          unint64_t v15 = *((void *)a2 + 1);
          unint64_t v16 = *(void *)&result[v10 + 8];
          BOOL v17 = v15 == v16;
          char v14 = v15 >= v16 ? 1 : -1;
          if (v17) {
            char v14 = 0;
          }
        }
        if (v14 < 0) {
          break;
        }
        v10 += 16;
        if (__CFADD__(v12++, 1)) {
          return result;
        }
      }
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          unint64_t v79 = (int *)&result[v10];
          *unint64_t v79 = v11;
          *a2 = v13;
          uint64_t v80 = *((void *)v79 + 1);
          *((void *)v79 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v80;
          return result;
        }
        if (v12 <= 0) {
          uint64_t v33 = -v12;
        }
        else {
          uint64_t v33 = 1 - v12;
        }
        uint64_t v32 = v33 >> 1;
        signed __int32 v22 = (int *)&result[16 * (v33 >> 1) + v10];
        unint64_t v21 = a2;
        if (a2 != (int *)a3)
        {
          int v34 = *v22;
          unint64_t v35 = *((void *)v22 + 1);
          unint64_t v36 = (a3 - (char *)a2) >> 4;
          unint64_t v21 = a2;
          do
          {
            unint64_t v37 = v36 >> 1;
            char v38 = &v21[4 * (v36 >> 1)];
            if (*v38 >= v34) {
              char v39 = 1;
            }
            else {
              char v39 = -1;
            }
            if (*v38 == v34)
            {
              unint64_t v40 = *((void *)v38 + 1);
              BOOL v41 = v40 == v35;
              char v39 = v40 >= v35 ? 1 : -1;
              if (v41) {
                char v39 = 0;
              }
            }
            __n128 v42 = v38 + 4;
            v36 += ~v37;
            if (v39 < 0) {
              unint64_t v21 = v42;
            }
            else {
              unint64_t v36 = v37;
            }
          }
          while (v36);
        }
        uint64_t v20 = ((char *)v21 - (char *)a2) >> 4;
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v19 = a5;
        }
        else {
          uint64_t v19 = a5 + 1;
        }
        uint64_t v20 = v19 >> 1;
        unint64_t v21 = &a2[4 * (v19 >> 1)];
        signed __int32 v22 = a2;
        if ((char *)a2 - result != v10)
        {
          int v23 = *v21;
          unint64_t v24 = *((void *)v21 + 1);
          unint64_t v25 = (uint64_t)((char *)a2 - result - v10) >> 4;
          signed __int32 v22 = (int *)&result[v10];
          do
          {
            unint64_t v26 = v25 >> 1;
            BOOL v27 = &v22[4 * (v25 >> 1)];
            if (*v27 <= v23) {
              char v28 = 1;
            }
            else {
              char v28 = -1;
            }
            if (*v27 == v23)
            {
              unint64_t v29 = *((void *)v27 + 1);
              BOOL v30 = v29 == v24;
              char v28 = v29 <= v24 ? 1 : -1;
              if (v30) {
                char v28 = 0;
              }
            }
            char v31 = v27 + 4;
            v25 += ~v26;
            if (v28 < 0) {
              unint64_t v25 = v26;
            }
            else {
              signed __int32 v22 = v31;
            }
          }
          while (v25);
        }
        uint64_t v32 = (uint64_t)((char *)v22 - result - v10) >> 4;
      }
      if (v22 == a2)
      {
        uint64_t v45 = v21;
      }
      else if (v21 == a2)
      {
        uint64_t v45 = v22;
      }
      else
      {
        int v43 = *v22;
        int *v22 = v11;
        *a2 = v43;
        uint64_t v44 = *((void *)v22 + 1);
        *((void *)v22 + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v44;
        uint64_t v45 = v22 + 4;
        for (CFIndex i = a2 + 4; i != v21; i += 4)
        {
          if (v45 == a2) {
            a2 = i;
          }
          int v47 = *v45;
          *uint64_t v45 = *i;
          *CFIndex i = v47;
          uint64_t v48 = *((void *)v45 + 1);
          *((void *)v45 + 1) = *((void *)i + 1);
          *((void *)i + 1) = v48;
          v45 += 4;
        }
        if (v45 != a2)
        {
          unint64_t v49 = v45;
          uint64_t v50 = a2;
          do
          {
            while (1)
            {
              int v51 = *v49;
              *unint64_t v49 = *v50;
              *uint64_t v50 = v51;
              uint64_t v52 = *((void *)v49 + 1);
              *((void *)v49 + 1) = *((void *)v50 + 1);
              *((void *)v50 + 1) = v52;
              v49 += 4;
              v50 += 4;
              if (v50 == v21) {
                break;
              }
              if (v49 == a2) {
                a2 = v50;
              }
            }
            uint64_t v50 = a2;
          }
          while (v49 != a2);
        }
      }
      a4 = -v32 - v12;
      uint64_t v53 = a5 - v20;
      if (v32 + v20 >= a5 - (v32 + v20) - v12)
      {
        uint64_t v56 = v21;
        unsigned int v57 = (int *)&result[v10];
        sub_216291D4C(v45, v56, a3, a4, a5 - v20, a6, a7);
        CFIndex result = (char *)v57;
        a2 = v22;
        uint64_t v53 = v20;
        a4 = v32;
        a3 = (char *)v45;
      }
      else
      {
        unsigned int v54 = v22;
        int v55 = a3;
        sub_216291D4C(&result[v10], v54, v45, v32, v20, a6, a7);
        a3 = v55;
        CFIndex result = (char *)v45;
        a2 = v21;
      }
      a5 = v53;
      if (!v53) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (result != (char *)a2)
      {
        uint64_t v69 = 0;
        do
        {
          *(_OWORD *)&a6[v69] = *(_OWORD *)&result[v69 * 4];
          v69 += 4;
        }
        while (&result[v69 * 4] != (char *)a2);
        if (v69 * 4)
        {
          uint64_t v70 = &a6[v69];
          uint64_t v71 = (uint64_t)&a6[v69 - 4];
          while (a2 != (int *)a3)
          {
            int v72 = *a2;
            if (*a2 >= *a6) {
              char v73 = 1;
            }
            else {
              char v73 = -1;
            }
            if (v72 == *a6)
            {
              unint64_t v74 = *((void *)a2 + 1);
              unint64_t v75 = *((void *)a6 + 1);
              BOOL v76 = v74 == v75;
              char v73 = v74 >= v75 ? 1 : -1;
              if (v76) {
                char v73 = 0;
              }
            }
            if (v73 < 0)
            {
              BOOL v77 = a2;
            }
            else
            {
              int v72 = *a6;
              BOOL v77 = a6;
            }
            if (v73 < 0) {
              a2 += 4;
            }
            uint64_t v78 = *((void *)v77 + 1);
            if ((v73 & 0x80) == 0) {
              a6 += 4;
            }
            *(_DWORD *)CFIndex result = v72;
            *((void *)result + 1) = v78;
            result += 16;
            if (v70 == a6) {
              return result;
            }
          }
          uint64_t v83 = 0;
          do
          {
            int v84 = (int *)&result[v83 * 4];
            __int16 v85 = &a6[v83];
            int *v84 = a6[v83];
            *((void *)v84 + 1) = *(void *)&a6[v83 + 2];
            v83 += 4;
          }
          while ((int *)v71 != v85);
        }
      }
    }
    else if (a3 != (char *)a2)
    {
      uint64_t v58 = 0;
      do
      {
        *(_OWORD *)&a6[v58] = *(_OWORD *)&a2[v58];
        v58 += 4;
      }
      while (&a2[v58] != (int *)a3);
      if (v58 * 4)
      {
        __n128 v59 = &a6[v58];
        unsigned int v60 = (int *)(a3 - 8);
        while (a2 != (int *)result)
        {
          int v61 = *(a2 - 4);
          int v62 = *(v59 - 4);
          if (v62 >= v61) {
            char v63 = 1;
          }
          else {
            char v63 = -1;
          }
          if (v62 == v61)
          {
            unint64_t v64 = *((void *)v59 - 1);
            unint64_t v65 = *((void *)a2 - 1);
            BOOL v66 = v64 == v65;
            char v63 = v64 >= v65 ? 1 : -1;
            if (v66) {
              char v63 = 0;
            }
          }
          if (v63 < 0)
          {
            unint64_t v67 = a2;
          }
          else
          {
            int v61 = *(v59 - 4);
            unint64_t v67 = v59;
          }
          if (v63 < 0) {
            a2 -= 4;
          }
          uint64_t v68 = *((void *)v67 - 1);
          if ((v63 & 0x80) == 0) {
            v59 -= 4;
          }
          *(v60 - 2) = v61;
          *(void *)unsigned int v60 = v68;
          v60 -= 4;
          if (v59 == a6) {
            return result;
          }
        }
        unint64_t v81 = 0;
        do
        {
          uint64_t v82 = &v60[v81];
          *(v82 - 2) = v59[v81 - 4];
          *(void *)uint64_t v82 = *(void *)&v59[v81 - 2];
          v81 -= 4;
        }
        while (&v59[v81] != a6);
      }
    }
  }
  return result;
}

uint64_t sub_216292238(uint64_t a1, const __CFString *a2)
{
  *(void *)a1 = 10000;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2161A108C(&a9, 0) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  sub_2161297B4(a1 + 32, 0x2710uLL);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  *(void *)(a1 + 72) = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  *(void *)(a1 + 8sub_2161A108C(&a9, 0) = CFLocaleCreate(v4, @"en");
  v6.location = 0;
  v6.length = 0;
  *(void *)(a1 + 88) = CFStringTokenizerCreate(v4, 0, v6, 4uLL, *(CFLocaleRef *)(a1 + 72));
  v7.location = 0;
  v7.length = 0;
  *(void *)(a1 + 96) = CFStringTokenizerCreate(v4, 0, v7, 1uLL, *(CFLocaleRef *)(a1 + 72));
  return a1;
}

void sub_216292320(_Unwind_Exception *a1)
{
  sub_2161BE090(v3, 0);
  sub_2161E05C4(v2);
  sub_2161DF178(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216292368(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    CFRelease(v2);
  }
  CFIndex v3 = *(const void **)(a1 + 96);
  if (v3) {
    CFRelease(v3);
  }
  sub_2161BE090((const void **)(a1 + 80), 0);
  sub_2161BE090((const void **)(a1 + 72), 0);
  sub_2161E05C4(a1 + 32);
  sub_2161DF178((uint64_t *)(a1 + 8));
  return a1;
}

void sub_2162923D0(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  if (theString)
  {
    CFAllocatorRef v4 = *(__CFStringTokenizer **)(a1 + 96);
    if (v4)
    {
      char v10 = 0;
      v11.length = CFStringGetLength(theString);
      v11.location = 0;
      CFStringTokenizerSetString(v4, theString, v11);
      do
      {
        if (!CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 96))) {
          break;
        }
        CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(void *)(a1 + 96));
        if (CurrentTokenRange.location != -1)
        {
          CFStringRef v8 = CFStringCreateWithSubstring(0, theString, CurrentTokenRange);
          if (v8)
          {
            CFStringRef v9 = v8;
            (*(void (**)(uint64_t, CFStringRef, char *))(a3 + 16))(a3, v8, &v10);
            CFRelease(v9);
          }
        }
      }
      while (!v10);
    }
  }
}

void sub_2162924A0(uint64_t a1@<X0>, const UniChar *a2@<X1>, CFIndex a3@<X2>, const UniChar ***a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*(void *)(a1 + 88)) {
    BOOL v5 = a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFStringRef v8 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
    CFStringRef v9 = *(__CFStringTokenizer **)(a1 + 88);
    v24.CFIndex length = CFStringGetLength(v8);
    v24.location = 0;
    CFStringTokenizerSetString(v9, v8, v24);
    char v10 = 0;
    while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 88)))
    {
      CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(void *)(a1 + 88));
      if (CurrentTokenRange.location != -1)
      {
        uint64_t v12 = &a2[CurrentTokenRange.location];
        if (a2) {
          CFIndex length = CurrentTokenRange.length;
        }
        else {
          CFIndex length = 0;
        }
        unint64_t v14 = (unint64_t)a4[2];
        if ((unint64_t)v10 >= v14)
        {
          unint64_t v16 = *a4;
          uint64_t v17 = ((char *)v10 - (char *)*a4) >> 4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            sub_21610CB04();
          }
          uint64_t v19 = v14 - (void)v16;
          if (v19 >> 3 > v18) {
            unint64_t v18 = v19 >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            if (v20 >> 60) {
              sub_2160FFA74();
            }
            unint64_t v21 = (char *)operator new(16 * v20);
          }
          else
          {
            unint64_t v21 = 0;
          }
          signed __int32 v22 = (const UniChar **)&v21[16 * v17];
          int *v22 = v12;
          v22[1] = (const UniChar *)length;
          int v23 = v22;
          if (v10 != v16)
          {
            do
            {
              *((_OWORD *)v23 - 1) = *((_OWORD *)v10 - 1);
              v23 -= 2;
              v10 -= 2;
            }
            while (v10 != v16);
            char v10 = *a4;
          }
          unint64_t v15 = v22 + 2;
          *a4 = v23;
          a4[1] = v22 + 2;
          a4[2] = (const UniChar **)&v21[16 * v20];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *char v10 = v12;
          v10[1] = (const UniChar *)length;
          unint64_t v15 = v10 + 2;
        }
        a4[1] = v15;
        char v10 = v15;
      }
    }
    if (v8) {
      CFRelease(v8);
    }
  }
}

void sub_21629265C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  CFAllocatorRef v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

__CFArray *sub_21629269C(uint64_t a1, CFStringRef theString)
{
  CFMutableArrayRef Mutable = 0;
  if (theString)
  {
    if (*(void *)(a1 + 88))
    {
      CFIndex Length = CFStringGetLength(theString);
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, Length, MEMORY[0x263EFFF70]);
      if (Mutable)
      {
        CFRange v6 = *(__CFStringTokenizer **)(a1 + 88);
        v11.CFIndex length = CFStringGetLength(theString);
        v11.location = 0;
        CFStringTokenizerSetString(v6, theString, v11);
        while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 88)))
        {
          CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(void *)(a1 + 88));
          if (CurrentTokenRange.location != -1)
          {
            CFStringRef v8 = CFStringCreateWithSubstring(0, theString, CurrentTokenRange);
            if (v8)
            {
              CFStringRef v9 = v8;
              CFArrayAppendValue(Mutable, v8);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
  return Mutable;
}

uint64_t sub_216292770(uint64_t a1, const __CFString *a2)
{
  if (a2 && *(void *)(a1 + 88)) {
    sub_2161E1FB8(a2);
  }
  return 0;
}

void sub_2162929A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v23) {
    MEMORY[0x2166CA7C0](v23, 0x1000C80BDFB0063);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v22) {
    MEMORY[0x2166CA7C0](v22, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216292A40(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 32;
  int v13 = a2;
  BOOL v5 = sub_2161DF384(a1 + 32, (unsigned __int16 *)a2, (uint64_t)&unk_21636EABA, &v13);
  CFRange v6 = (long long *)*((void *)v5 + 5);
  CFStringRef v8 = *(long long **)(a1 + 8);
  CFRange v7 = (uint64_t *)(a1 + 8);
  if (v8 == v6)
  {
    CFStringRef v9 = (char *)*((void *)v5 + 5);
  }
  else
  {
    CFStringRef v9 = (char *)operator new(0x40uLL);
    *(void *)CFStringRef v9 = 0;
    *((void *)v9 + 1) = 0;
    sub_2161E591C(v9 + 16, v6 + 1);
    uint64_t v10 = *v7;
    *(void *)(v10 + 8) = v9;
    *CFRange v7 = (uint64_t)v9;
    *(void *)CFStringRef v9 = v10;
    *((void *)v9 + 1) = v7;
    uint64_t v11 = *(void *)v6;
    *(void *)(v11 + 8) = *((void *)v6 + 1);
    **((void **)v6 + 1) = v11;
    sub_21619E14C((uint64_t)(v6 + 1));
    operator delete(v6);
    int v13 = a2;
    *((void *)sub_2161DF384(v4, (unsigned __int16 *)a2, (uint64_t)&unk_21636EABA, &v13) + 5) = v9;
  }
  return v9 + 40;
}

void sub_216292B2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216292B40(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a1 + 88)) {
    BOOL v5 = a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    sub_216184F68((unsigned char *)a4, byte_2163CA662);
  }
  else
  {
    sub_21617FAAC(__dst, a2, a3);
    if (sub_216292ED0((void *)(a1 + 32), (unsigned __int16 *)__dst))
    {
      CFStringRef v9 = sub_216292A40(a1, (long long *)__dst);
      if (v9[23] < 0)
      {
        sub_2161984AC((unsigned char *)a4, *(void **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *(_OWORD *)v9;
        *(void *)(a4 + 16) = *((void *)v9 + 2);
        *(_OWORD *)a4 = v10;
      }
    }
    else
    {
      CFTypeRef v35 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UniChar *)a2, a3, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
      uint64_t v11 = *(__CFStringTokenizer **)(a1 + 88);
      v40.CFIndex length = CFStringGetLength((CFStringRef)v35);
      v40.location = 0;
      CFStringTokenizerSetString(v11, (CFStringRef)v35, v40);
      LOWORD(cf) = 0;
      sub_2161E5A38(&__p, 3 * a3, &cf);
      for (unint64_t i = 0; ; unint64_t i = v17)
      {
        if (!CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 88)))
        {
          sub_21617FAAC((void *)a4, __p, i);
          sub_2161DF984((void *)a1, (long long *)__dst, (long long *)a4);
          goto LABEL_37;
        }
        CFStringRef v13 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(*(CFStringTokenizerRef *)(a1 + 88), 0x400000uLL);
        CFStringRef v14 = v13;
        CFTypeRef cf = v13;
        if (!v13) {
          break;
        }
        CFIndex Length = CFStringGetLength(v13);
        CFIndex v16 = Length;
        unint64_t v17 = Length + i;
        unint64_t v18 = (UniChar *)__p;
        uint64_t v19 = v33;
        int64_t v20 = v33 - (unsigned char *)__p;
        if (Length + i > (v33 - (unsigned char *)__p) >> 1)
        {
          unint64_t v21 = v17 - (v20 >> 1);
          if (v21 <= (v34 - v33) >> 1)
          {
            bzero(v33, ((2 * v17 - v20 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
            uint64_t v33 = &v19[2 * v21];
          }
          else
          {
            if ((v17 & 0x8000000000000000) != 0) {
              sub_21610CB04();
            }
            if (v34 - (unsigned char *)__p <= v17) {
              uint64_t v22 = Length + i;
            }
            else {
              uint64_t v22 = v34 - (unsigned char *)__p;
            }
            if ((unint64_t)(v34 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v23 = v22;
            }
            CFRange v24 = (char *)sub_21610FD44((uint64_t)&v34, v23);
            uint64_t v26 = v25;
            BOOL v27 = &v24[2 * (v20 >> 1)];
            bzero(v27, ((2 * v17 - v20 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
            char v28 = (char *)__p;
            for (CFIndex j = v33; j != v28; j -= 2)
            {
              __int16 v30 = *((_WORD *)j - 1);
              *((_WORD *)v27 - 1) = v30;
              v27 -= 2;
            }
            std::string __p = v27;
            uint64_t v33 = &v24[2 * v17];
            int v34 = &v24[2 * v26];
            if (v28) {
              operator delete(v28);
            }
          }
          unint64_t v18 = (UniChar *)__p;
        }
        v39.location = 0;
        v39.CFIndex length = v16;
        CFStringGetCharacters(v14, v39, &v18[i]);
        if (cf) {
          CFRelease(cf);
        }
      }
      sub_216184F68((unsigned char *)a4, byte_2163CA662);
LABEL_37:
      if (__p)
      {
        uint64_t v33 = (char *)__p;
        operator delete(__p);
      }
      if (v35) {
        CFRelease(v35);
      }
    }
    if (v37 < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_216292E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, uint64_t a14, const void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2161868BC(&a15, 0);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_216292ED0(void *a1, unsigned __int16 *a2)
{
  unint64_t v4 = sub_2161A6920((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(unsigned __int16 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_2161A6964(v12, v11 + 8, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int16 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_216292FD4(int a1, std::string *__str)
{
  sub_2161E3C40(__str, &v3);
  int v2 = sub_21629E1F0((uint64_t)&v3);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  fprintf((FILE *)*MEMORY[0x263EF8348], "dictionary ID = %d\n", v2);
  operator new();
}

void sub_2162932BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  sub_2162153A0((void ***)va1);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

void sub_21629333C(void *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21629329CLL);
}

void sub_21629336C(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = (uint64_t)*a2;
  unint64_t v3 = **a2;
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 56);
    unint64_t v8 = (uint64_t *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 8);
    if (v3 >= (*(void *)(v5 + 16) - v7) >> 2)
    {
      sub_21617A878((uint64_t)v8, v3 + 1);
      uint64_t v7 = *v8;
    }
    if (!*(_DWORD *)(v7 + 4 * v3))
    {
      int v9 = sub_21629E3DC(*(_DWORD *)(a1 + 64), -1431655765 * ((v2 - v6) >> 2));
      uint64_t v10 = *(void *)(v5 + 8);
      if (v3 >= (*(void *)(v5 + 16) - v10) >> 2)
      {
        sub_21617A878((uint64_t)v8, v3 + 1);
        uint64_t v10 = *v8;
      }
      *(_DWORD *)(v10 + 4 * v3) = v9;
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
}

void sub_216293450(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v5 = (FILE **)MEMORY[0x263EF8348];
  uint64_t v6 = *(const char **)(v2 + 56);
  if (v6[23] < 0) {
    uint64_t v6 = *(const char **)v6;
  }
  fprintf((FILE *)*MEMORY[0x263EF8348], "Error has occured when process word in %s ... \n", v6);
  fprintf(*v5, "Word ID = %d, token offset = %zu\n", v4, v3);
  *uint64_t v1 = 1;
  __cxa_end_catch();
}

uint64_t ReverseDictionaryBuild(int a1, const char **a2)
{
  v77[11] = *MEMORY[0x263EF8340];
  int v4 = a2[1];
  if (strcmp(v4, "build"))
  {
    if (strcmp(v4, "verify"))
    {
      fwrite("Incorrect commandline arguments!\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
      sub_216294018(*a2);
      exit(1);
    }
    unsigned int v60 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = (int *)MEMORY[0x263EF89E8];
    *MEMORY[0x263EF89E8] = 1;
    unint64_t v8 = (uint64_t *)MEMORY[0x263EF89E0];
    do
    {
      while (1)
      {
        while (1)
        {
          LODWORD(v7sub_2161A108C(&a9, 0) = 0;
          int v9 = getopt_long(a1, (char *const *)a2, "s:i:d:", (const option *)&off_26797C6C8, (int *)&v70);
          if (v9 <= 104) {
            break;
          }
          if (v9 == 105)
          {
            uint64_t v6 = *v8;
          }
          else if (v9 == 115)
          {
            uint64_t v5 = (const char *)*v8;
          }
        }
        if (v9 != 100) {
          break;
        }
        unsigned int v60 = (char *)*v8;
      }
    }
    while (v9 != -1);
    if (v5)
    {
      if (v6)
      {
        if (v60)
        {
          uint64_t v10 = *v7;
          if (~v10 + a1 == 1)
          {
            if (!strcmp(v5, "zh-Hans") || !strcmp(v5, "zh-Hant") || !strcmp(v5, "yue-Hant"))
            {
              __s = (char *)a2[v10 + 1];
              id v37 = [NSString alloc];
              uint64_t v39 = [NSString stringWithCString:v38 encoding:4];
              BOOL v41 = [v37 initWithContentsOfFile:v40 encoding:v39 error:0];
              int v43 = [v41 componentsSeparatedByString:v42];
              uint64_t v58 = v41;
              memset(v61, 0, sizeof(v61));
              int v62 = 1065353216;
              *(_OWORD *)std::string __p = 0u;
              long long v66 = 0u;
              long long v67 = 0u;
              long long v68 = 0u;
              uint64_t v47 = [v43 countByEnumeratingWithState:v44 objects:&v70 count:16];
              if (v47)
              {
                uint64_t v48 = *(void *)v66;
                do
                {
                  for (uint64_t i = 0; i != v47; ++i)
                  {
                    if (*(void *)v66 != v48) {
                      objc_enumerationMutation(v43);
                    }
                    uint64_t v50 = (void *)*((void *)__p[1] + i);
                    if (objc_msgSend_length(v50, v45, v46))
                    {
                      uint64_t v51 = [v50 rangeOfString:@" "];
                      CFStringRef v53 = (const __CFString *)[v50 substringToIndex:v52];
                      int v55 = [v50 substringFromIndex:v54 + 1];
                      [v55 getCString:v56 maxLength:100 encoding:4];
                      int v57 = atoi(v75);
                      sub_2161E3AE8(v53, v63);
                      uint64_t v69 = v63;
                      *((_DWORD *)sub_216221284((uint64_t)v61, (unsigned __int8 *)v63, (uint64_t)&unk_21636EABA, (long long **)&v69)+ 1sub_2161A108C(&a9, 0) = v57;
                      if (v64 < 0) {
                        operator delete(v63[0]);
                      }
                    }
                  }
                  uint64_t v47 = [v43 countByEnumeratingWithState:v45 objects:&v70 count:16];
                }
                while (v47);
              }

              sub_21610B834(v75, __s);
              sub_21610B834(__p, v60);
              v63[0] = 0;
              operator new();
            }
            fwrite("Locale can must be zh-Hans or zh-Hant or yue-Hant.\n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
            return 0;
          }
          uint64_t v17 = (FILE *)*MEMORY[0x263EF8348];
          unint64_t v18 = "Incorrect number of arguments.\n";
          size_t v19 = 31;
        }
        else
        {
          uint64_t v17 = (FILE *)*MEMORY[0x263EF8348];
          unint64_t v18 = "Directory of source dictionaries is required.\n";
          size_t v19 = 46;
        }
      }
      else
      {
        uint64_t v17 = (FILE *)*MEMORY[0x263EF8348];
        unint64_t v18 = "Word-ID map is required.\n";
        size_t v19 = 25;
      }
    }
    else
    {
      uint64_t v17 = (FILE *)*MEMORY[0x263EF8348];
      unint64_t v18 = "Locale is required.\n";
      size_t v19 = 20;
    }
LABEL_37:
    fwrite(v18, v19, 1uLL, v17);
    sub_216294018(*a2);
    return 0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = (int *)MEMORY[0x263EF89E8];
  *MEMORY[0x263EF89E8] = 1;
  uint64_t v13 = (const char **)MEMORY[0x263EF89E0];
  do
  {
    while (1)
    {
      LODWORD(v7sub_2161A108C(&a9, 0) = 0;
      int v14 = getopt_long(a1, (char *const *)a2, "l:", (const option *)&off_26797C688, (int *)&v70);
      if (v14 != 108) {
        break;
      }
      uint64_t v11 = *v13;
    }
  }
  while (v14 != -1);
  uint64_t v15 = *v12;
  signed int v16 = ~v15 + a1;
  if (v16 <= 1)
  {
    uint64_t v17 = (FILE *)*MEMORY[0x263EF8348];
    unint64_t v18 = "Too few arguments.\n";
    size_t v19 = 19;
    goto LABEL_37;
  }
  if (!v11)
  {
    uint64_t v17 = (FILE *)*MEMORY[0x263EF8348];
    unint64_t v18 = "Language is not specified.\n";
    size_t v19 = 27;
    goto LABEL_37;
  }
  uint64_t v20 = v16;
  unint64_t v21 = &a2[v15];
  uint64_t v22 = (char *)v21[v16];
  if (!strcmp("zh-Hans", v11))
  {
    int v24 = 1;
  }
  else if (!strcmp("zh-Hant", v11))
  {
    int v24 = 2;
  }
  else
  {
    if (strcmp("yue-Hant", v11))
    {
      uint64_t v17 = (FILE *)*MEMORY[0x263EF8348];
      unint64_t v18 = "Language must be \"zh-Hans\" or \"zh-Hant\". or \"yue-Hant\".";
      size_t v19 = 55;
      goto LABEL_37;
    }
    int v24 = 5;
  }
  *(void *)unint64_t v75 = 0;
  BOOL v76 = 0;
  v77[0] = 0;
  uint64_t v25 = v20 - 1;
  if (v20 != 1)
  {
    uint64_t v26 = (char **)(v21 + 1);
    do
    {
      sub_21610B834(__p, *v26);
      BOOL v27 = v76;
      if ((unint64_t)v76 >= v77[0])
      {
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v76[-*(void *)v75] >> 3);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        if (0x5555555555555556 * ((uint64_t)(v77[0] - *(void *)v75) >> 3) > v30) {
          unint64_t v30 = 0x5555555555555556 * ((uint64_t)(v77[0] - *(void *)v75) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77[0] - *(void *)v75) >> 3) >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v30;
        }
        unint64_t v74 = v77;
        if (v31) {
          uint64_t v32 = (char *)sub_216129BFC((uint64_t)v77, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v33 = &v32[24 * v29];
        uint64_t v70 = v32;
        uint64_t v71 = v33;
        char v73 = &v32[24 * v31];
        long long v34 = *(_OWORD *)__p;
        *((void *)v33 + 2) = v66;
        *(_OWORD *)uint64_t v33 = v34;
        __p[1] = 0;
        *(void *)&long long v66 = 0;
        __p[0] = 0;
        int v72 = v33 + 24;
        sub_21613FBD0((uint64_t *)v75, &v70);
        CFTypeRef v35 = v76;
        sub_21613FD68((uint64_t)&v70);
        BOOL v76 = v35;
        if (SBYTE7(v66) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v28 = *(_OWORD *)__p;
        *((void *)v76 + 2) = v66;
        *BOOL v27 = v28;
        BOOL v76 = (char *)v27 + 24;
      }
      ++v26;
      --v25;
    }
    while (v25);
  }
  sub_21610B834(__p, v22);
  LODWORD(v7sub_2161A108C(&a9, 0) = v24;
  int v72 = 0;
  char v73 = 0;
  uint64_t v71 = 0;
  if (v76 != *(char **)v75) {
    sub_216292FD4((int)&v70, *(std::string **)v75);
  }
  BOOL v36 = sub_21629E4F0((const char *)__p, (const void **)&v71);
  if (v71)
  {
    int v72 = v71;
    operator delete(v71);
  }
  if (SBYTE7(v66) < 0) {
    operator delete(__p[0]);
  }
  if (!v36) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "Failed to build reverse dictionary %s.\n", v22);
  }
  uint64_t v70 = v75;
  sub_21613EFD0((void ***)&v70);
  return 0;
}

#error "216293EF8: call analysis failed (funcsize=24)"

size_t sub_216294018(const char *a1)
{
  uint64_t v2 = (FILE **)MEMORY[0x263EF8348];
  fwrite("Usage:\n", 7uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
  fprintf(*v2, "%s <command> [args] [DictionaryFileName+] ReverseDictionaryFileName\n", a1);
  fwrite("\tbuild:\n", 8uLL, 1uLL, *v2);
  fwrite("\tDictionaryFileName argument is required for build command.", 0x3BuLL, 1uLL, *v2);
  fwrite("\t\t-l|--language: \"zh-Hans\" or \"zh-Hant\" or \"yue-Hant\".\n", 0x37uLL, 1uLL, *v2);
  fwrite("\tverify:\n", 9uLL, 1uLL, *v2);
  fwrite("\t\t-s|--locale: Locale.\n", 0x17uLL, 1uLL, *v2);
  fwrite("\t\t-i|--id: Word to word ID mapping file.\n", 0x29uLL, 1uLL, *v2);
  uint64_t v3 = *v2;

  return fwrite("\t\t-d|--directory: Directory containing source dictionaries.\n", 0x3CuLL, 1uLL, v3);
}

uint64_t sub_216294128(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21629E19C(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

const void *sub_216294180(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 == -1 || v1 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 8))) {
    return 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 8);
  CFIndex v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4 + 1;

  return CFArrayGetValueAtIndex(v3, v4);
}

unint64_t sub_2162941E8(uint64_t a1, unint64_t a2)
{
  for (unint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8)); a2 < result; unint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8)))
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a2);
    uint64_t v8 = [ValueAtIndex valueAtIndex:v6, v7];
    int v9 = &v8;
    sub_21629640C((float *)(a1 + 24), &v8, (uint64_t)&unk_21636EABA, &v9)[3] = a2++;
  }
  return result;
}

void sub_21629428C(uint64_t a1, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *), int a3)
{
  CFArrayRef v6 = *(const __CFArray **)(a1 + 8);
  v8.CFIndex length = CFArrayGetCount(v6);
  v8.location = 0;
  CFArraySortValues(v6, v8, a2, 0);
  if (a3)
  {
    sub_2162941E8(a1, 0);
  }
}

CFIndex sub_21629430C(uint64_t a1, uint64_t a2)
{
  CFIndex v4 = 0;
  do
  {
    CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
    if (v4 >= result) {
      break;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v4);
    char v7 = 0;
    CFIndex result = (*(uint64_t (**)(uint64_t, const void *, char *))(a2 + 16))(a2, ValueAtIndex, &v7);
    ++v4;
  }
  while (!v7);
  return result;
}

void *sub_216294388(void *a1)
{
  uint64_t v2 = (__CFArray *)a1[1];
  if (v2) {
    CFArrayRemoveAllValues(v2);
  }
  CFIndex result = sub_2161DEDD0(a1 + 3);
  a1[2] = -1;
  return result;
}

CFIndex sub_2162943C4(uint64_t a1)
{
  sub_2161DEDD0((void *)(a1 + 24));
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (result) {
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t sub_2162943FC(uint64_t a1, void *a2)
{
  return sub_216294408(a1, a2, 1, 0);
}

uint64_t sub_216294408(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  int v5 = a3;
  if (a2)
  {
    uint64_t v8 = [a2 a2:a3];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 6)
    {
LABEL_19:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), a2);
      return 1;
    }
    uint64_t v11 = [a2 v9:v10];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11) == 5)
    {
      uint64_t v12 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 96))(v12) == 89)
      {
        unint64_t v29 = (uint64_t *)[a2 a2:a3];
        uint64_t v13 = sub_2161DE698((void *)(a1 + 24), &v29);
        if (!v13 || v13[3] == (uint64_t *)-1)
        {
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
          uint64_t v28 = [a2 v15:v16];
          unint64_t v29 = &v28;
          sub_21629640C((float *)(a1 + 24), &v28, (uint64_t)&unk_21636EABA, &v29)[3] = Count;
          goto LABEL_19;
        }
        return 0;
      }
    }
  }
  uint64_t v17 = (uint64_t *)sub_2161F3B4C(a2, (const char *)a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*v17 + 240))(v17);
  if (!result) {
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, v17)) {
    return 0;
  }
  unint64_t v29 = (uint64_t *)[a2 v19:v20];
  unint64_t v21 = sub_2161DE698((void *)(a1 + 24), &v29);
  if (!v21 || (CFIndex v22 = (CFIndex)v21[3], v22 == -1))
  {
    CFIndex v27 = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
    uint64_t v28 = (uint64_t)v17;
    unint64_t v29 = &v28;
    sub_21629640C((float *)(a1 + 24), &v28, (uint64_t)&unk_21636EABA, &v29)[3] = v27;
    goto LABEL_19;
  }
  if (v5 == 2) {
    return 0;
  }
  CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v22);
  uint64_t v26 = sub_2161F3B4C(ValueAtIndex, v24, v25);
  if (!v5
    || (uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)a1 + 72))(a1, v26, v17),
        result))
  {
    unint64_t v29 = v17;
    sub_21621811C((void *)(a1 + 24), &v29);
    uint64_t v28 = (uint64_t)v17;
    unint64_t v29 = &v28;
    sub_21629640C((float *)(a1 + 24), &v28, (uint64_t)&unk_21636EABA, &v29)[3] = v22;
    CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), v22, a2);
    if (a4)
    {
      uint64_t result = 0;
      *a4 = 1;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_2162946F4(uint64_t a1, uint64_t a2)
{
  CFIndex v4 = a2 + 1;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (Count >= v4) {
    uint64_t v6 = a2 + 1;
  }
  else {
    uint64_t v6 = Count;
  }
  if (v6 < 1) {
    return -1;
  }
  CFIndex v7 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v7);
    if (MecabraCandidateIsMLTapTypingCandidate(ValueAtIndex, v9, v10)) {
      break;
    }
    if (v6 == ++v7) {
      return -1;
    }
  }
  return v7;
}

CFIndex sub_216294768(uint64_t a1)
{
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (result)
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), 0);
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)sub_2161F3B4C(ValueAtIndex, v4, v5) + 504);
    return v6();
  }
  return result;
}

CFIndex sub_2162947F8(uint64_t a1, CFIndex a2, uint64_t a3)
{
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (a2 < result)
  {
    if (a2 + a3 >= result) {
      CFIndex v7 = result;
    }
    else {
      CFIndex v7 = a2 + a3;
    }
    if (a2 < v7)
    {
      do
      {
        CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a2);
        uint64_t v11 = *(void *)sub_2161F3B4C(ValueAtIndex, v9, v10);
        CFIndex result = (*(uint64_t (**)(void))(v11 + 504))();
        ++a2;
      }
      while (v7 != a2);
    }
  }
  return result;
}

uint64_t sub_2162948A4(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = [a2 a2:a3];
  if (!result) {
    return result;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 8)) <= (unint64_t)a3) {
    return 0;
  }
  uint64_t v14 = [a2 v7:v8];
  int v9 = sub_2161DE698((void *)(a1 + 24), &v14);
  if (!v9 || (uint64_t v10 = v9[3], v10 == (uint64_t *)-1))
  {
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), a3, a2);
    goto LABEL_11;
  }
  if ((uint64_t)v10 <= a3) {
    return 0;
  }
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), a3, a2);
  CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), (CFIndex)v10 + 1);
  uint64_t v14 = [ValueAtIndex valueAtIndex:v12, v13];
  sub_21621811C((void *)(a1 + 24), &v14);
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), (CFIndex)v10 + 1);
LABEL_11:
  sub_2162941E8(a1, 0);
  return 1;
}

uint64_t sub_2162949B0(uint64_t a1, CFArrayRef theArray, void *a3)
{
  if (CFArrayGetCount(theArray) != a3[2]) {
    return 0;
  }
  for (CFIndex i = 0; i < CFArrayGetCount(theArray); ++i)
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
    uint64_t v25 = (uint64_t *)[ValueAtIndex valueAtIndex:v8, v9];
    uint64_t v10 = sub_2161DE698((void *)(a1 + 24), &v25);
    if (v10) {
      uint64_t v11 = (uint64_t)v10[3];
    }
    else {
      uint64_t v11 = -1;
    }
    if (v11 != -1) {
      return 0;
    }
  }
  uint64_t v15 = (void *)*a3;
  uint64_t v13 = a3 + 1;
  uint64_t v14 = v15;
  if (v15 != v13)
  {
    CFIndex v16 = 0;
    do
    {
      CFIndex v17 = v14[4];
      unint64_t v18 = (void *)CFArrayGetValueAtIndex(theArray, v16);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), v17, v18);
      uint64_t v24 = [v18 v19:v20];
      uint64_t v25 = &v24;
      sub_21629640C((float *)(a1 + 24), &v24, (uint64_t)&unk_21636EABA, &v25)[3] = v17;
      unint64_t v21 = (void *)v14[1];
      if (v21)
      {
        do
        {
          CFIndex v22 = v21;
          unint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          CFIndex v22 = (void *)v14[2];
          BOOL v23 = *v22 == (void)v14;
          uint64_t v14 = v22;
        }
        while (!v23);
      }
      ++v16;
      uint64_t v14 = v22;
    }
    while (v22 != v13);
  }
  sub_2162941E8(a1, 0);
  return 1;
}

uint64_t sub_216294B28(CFArrayRef *a1, void *a2, unint64_t a3)
{
  if (CFArrayGetCount(a1[1]) <= a3)
  {
    CFIndex v7 = (uint64_t (*)(CFArrayRef *, void *))*((void *)*a1 + 2);
    return v7(a1, a2);
  }
  else
  {
    return sub_2162948A4((uint64_t)a1, a2, a3);
  }
}

void *sub_216294BCC(uint64_t a1)
{
  uint64_t result = sub_216294388((void *)a1);
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 8sub_2161A108C(&a9, 0) = 0;
  return result;
}

CFIndex sub_216294BF8(uint64_t a1)
{
  CFIndex result = sub_2162943C4(a1);
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 8sub_2161A108C(&a9, 0) = 0;
  return result;
}

void *sub_216294C24(uint64_t a1)
{
  while (1)
  {
    unint64_t v2 = *(void *)(a1 + 16);
    if (v2 == -1 || v2 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 8))) {
      break;
    }
    CFArrayRef v3 = *(const __CFArray **)(a1 + 8);
    CFIndex v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4 + 1;
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v4);
    if (MecabraCandidateIsAutocorrectionCandidate(ValueAtIndex, v6, v7))
    {
      unint64_t v8 = *(void *)(a1 + 72) + 1;
      *(void *)(a1 + 72) = v8;
      if (v8 > 5 && *(unsigned char *)(a1 + 80) != 0) {
        CFStringRef ValueAtIndex = 0;
      }
      if (ValueAtIndex) {
        return ValueAtIndex;
      }
    }
    else if (*(unsigned char *)(a1 + 80))
    {
      if (ValueAtIndex) {
        return ValueAtIndex;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 8sub_2161A108C(&a9, 0) = 1;
      if (ValueAtIndex) {
        return ValueAtIndex;
      }
    }
  }
  return 0;
}

BOOL sub_216294CD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(uint64_t *))(*a3 + 104))(a3);
  uint64_t v7 = 1;
  if ((v6 & 0x10) != 0) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  if ((v6 & 4) != 0) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = v8;
  }
  char v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if ((v10 & 0x10) != 0) {
    unsigned int v11 = 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if ((v10 & 4) != 0) {
    unsigned int v11 = 0;
  }
  if (v9 >= v11)
  {
    if (v9 > v11) {
      return 0;
    }
    int v12 = (*(uint64_t (**)(uint64_t *))(*a3 + 112))(a3);
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    if (v12 > v13) {
      return 0;
    }
    uint64_t v15 = *a3;
    if (v12 == v13)
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t *))(v15 + 56))(a3);
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
      if (!v16)
      {
        CFIndex v22 = sub_2162D1CE4(3u);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
        {
          uint64_t v23 = (*(uint64_t (**)(uint64_t *))(*a3 + 24))(a3);
          int v26 = 138412290;
          uint64_t v27 = v23;
          _os_log_fault_impl(&dword_2160F5000, v22, OS_LOG_TYPE_FAULT, "Failed to create analysis string for [%@].", (uint8_t *)&v26, 0xCu);
        }
        return 0;
      }
      if (v17)
      {
        CFStringRef v18 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*a3 + 56))(a3);
        CFIndex Length = CFStringGetLength(v18);
        CFStringRef v20 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
        return Length > CFStringGetLength(v20);
      }
      uint64_t v24 = sub_2162D1CE4(3u);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      {
        uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
        int v26 = 138412290;
        uint64_t v27 = v25;
        _os_log_fault_impl(&dword_2160F5000, v24, OS_LOG_TYPE_FAULT, "Failed to create analysis string for [%@].", (uint8_t *)&v26, 0xCu);
      }
    }
    else if (((*(uint64_t (**)(uint64_t *))(v15 + 416))(a3) & 0x800) == 0)
    {
      if ((*(unsigned int (**)(uint64_t *))(*a3 + 256))(a3))
      {
        uint64_t v21 = *(void *)(*(void *)(a1 + 64) + 64);
        if ((!v21 || (*(unsigned int (**)(uint64_t))(*(void *)v21 + 24))(v21))
          && ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2) < 2
           || (*(uint64_t (**)(uint64_t *))(*a3 + 48))(a3) != 1))
        {
          return 0;
        }
      }
    }
    return 1;
  }
  return v7;
}

void sub_2162950E0(uint64_t a1)
{
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x3002000000;
  uint64_t v15 = sub_21629530C;
  uint64_t v16 = sub_21629531C;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x4002000000;
  int v8 = sub_216295328;
  v11[0] = 0;
  v11[1] = 0;
  unsigned int v9 = sub_216295364;
  char v10 = v11;
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  v4[3] = 0;
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2000000000;
  v3[3] = 1;
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = sub_216295374;
  v2[3] = &unk_264267060;
  v2[7] = &v5;
  v2[8] = a1;
  void v2[4] = v3;
  v2[5] = v4;
  v2[6] = &v12;
  sub_21629430C(a1, (uint64_t)v2);
  if (CFArrayGetCount((CFArrayRef)v13[5]) >= 1) {
    sub_2162949B0(a1, (CFArrayRef)v13[5], v6 + 5);
  }
  _Block_object_dispose(v3, 8);
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(&v5, 8);
  sub_21612A250((uint64_t)&v10, v11[0]);
  _Block_object_dispose(&v12, 8);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_2162952B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  sub_21612A250(v34, a33);
  _Block_object_dispose((const void *)(v35 - 96), 8);
  sub_2161BE0C8(v33, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21629530C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_2161A108C(&a9, 0) = 0;
  *(void *)(result + 4sub_2161A108C(&a9, 0) = v2;
  return result;
}

void sub_21629531C(uint64_t a1)
{
}

void *sub_216295328(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  CFIndex v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_216295364(uint64_t a1)
{
}

void sub_216295374(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1[8];
  uint64_t v5 = sub_2161F3B4C(a2, (const char *)a2, a3);
  uint64_t v6 = *(void *)(v3[4] + 8);
  uint64_t v7 = *(void *)(*(void *)(v3[5] + 8) + 24);
  theArray = *(__CFArray **)(*(void *)(v3[6] + 8) + 40);
  uint64_t v8 = *(void *)(v3[7] + 8);
  int v9 = **(_DWORD **)(v4 + 64);
  uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v5 + 24))(v5);
  CFStringRef v11 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v5 + 232))(v5);
  uint64_t v12 = sub_21625D0E0(v9, 0, v10, v11);
  if (v12)
  {
    int v13 = v12;
    CFIndex Count = CFArrayGetCount(v12);
    if (Count <= 0)
    {
      CFRelease(v13);
    }
    else
    {
      CFIndex v15 = Count;
      char v38 = v3;
      CFIndex v16 = 0;
      uint64_t v17 = 0;
      char v18 = 0;
      size_t v19 = (void *)(v4 + 24);
      uint64_t v39 = (uint64_t **)(v8 + 40);
      CFRange v40 = (uint64_t **)(v8 + 48);
      BOOL v41 = v19;
      __n128 v42 = v13;
      do
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v13, v16);
        uint64_t v21 = (*(uint64_t (**)(void *, const void *))(*(void *)v5 + 536))(v5, ValueAtIndex);
        if (!v21) {
          break;
        }
        uint64_t v22 = v21;
        uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v5 + 112))(v5);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 480))(v22, v23);
        BOOL v24 = v7 <= 1 && v17 <= 0;
        BOOL v25 = !v24;
        (*(void (**)(uint64_t, BOOL))(*(void *)v22 + 504))(v22, v25);
        int v26 = (void *)sub_2161F4704(v22);
        uint64_t v44 = [v26 v27:v28];
        if (sub_2161DE698(v19, &v44))
        {
        }
        else
        {
          CFIndex v29 = v15;
          uint64_t v30 = v7;
          uint64_t v31 = v6;
          uint64_t v32 = *(void *)(v6 + 24);
          uint64_t v33 = v40;
          while (1)
          {
            uint64_t v34 = *v33;
            uint64_t v35 = v33;
            if (!*v33) {
              break;
            }
            while (1)
            {
              uint64_t v33 = (uint64_t **)v34;
              uint64_t v36 = v34[4];
              if (v36 > v32) {
                break;
              }
              if (v36 >= v32) {
                goto LABEL_20;
              }
              uint64_t v34 = v33[1];
              if (!v34)
              {
                uint64_t v35 = v33 + 1;
                goto LABEL_19;
              }
            }
          }
LABEL_19:
          id v37 = (uint64_t *)operator new(0x28uLL);
          v37[4] = v32;
          sub_21612A650(v39, (uint64_t)v33, v35, v37);
LABEL_20:
          CFArrayAppendValue(theArray, v26);

          uint64_t v6 = v31;
          ++*(void *)(v31 + 24);
          ++v17;
          char v18 = 1;
          uint64_t v7 = v30;
          CFIndex v15 = v29;
          size_t v19 = v41;
          int v13 = v42;
        }
        ++v16;
      }
      while (v16 != v15);
      CFRelease(v13);
      uint64_t v3 = v38;
      if (v18) {
        ++*(void *)(*(void *)(v38[5] + 8) + 24);
      }
    }
  }
  ++*(void *)(*(void *)(v3[4] + 8) + 24);
}

CFDictionaryRef sub_216295694(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) & 0x10) != 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);

  return sub_216229684(v4, v5, 2);
}

BOOL sub_216295740(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6 = (*(uint64_t (**)(uint64_t *))(*a3 + 112))(a3);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  if (v6 != v7) {
    return v6 < v7;
  }

  return sub_216294CD0(a1, a2, a3);
}

void *sub_2162957FC(void *a1)
{
  *a1 = &unk_26C6BF908;
  uint64_t v2 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v2, 0);
  return a1;
}

void sub_216295854(void *a1)
{
  *a1 = &unk_26C6BF908;
  unint64_t v1 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v1, 0);

  JUMPOUT(0x2166CA800);
}

void sub_2162958CC(uint64_t a1, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *), int a3)
{
  sub_21629428C(a1, a2, a3);
  if ((*(_DWORD *)(*(void *)(a1 + 64) + 24) & 0x4010) == 0x10 && CFArrayGetCount(*(CFArrayRef *)(a1 + 8)))
  {
    uint64_t v35 = 0;
    uint64_t v36 = (uint64_t)&v35;
    uint64_t v37 = 0x2000000000;
    char v38 = 0;
    uint64_t v58 = 0;
    __n128 v59 = &v58;
    uint64_t v60 = 0x2000000000;
    uint64_t v61 = 0;
    uint64_t v43 = MEMORY[0x263EF8330];
    uint64_t v44 = 0x40000000;
    uint64_t v45 = sub_216295D6C;
    uint64_t v46 = &unk_26426E3F0;
    uint64_t v48 = &v58;
    unint64_t v49 = (uint64_t *)a1;
    uint64_t v47 = &v35;
    sub_21629430C(a1, (uint64_t)&v43);
    _Block_object_dispose(&v58, 8);
    _Block_object_dispose(&v35, 8);
  }
  if ((*(unsigned char *)(*(void *)(a1 + 64) + 25) & 0x40) != 0)
  {
    uint64_t v58 = 0;
    __n128 v59 = &v58;
    uint64_t v60 = 0x2000000000;
    LOBYTE(v61) = 1;
    uint64_t v54 = 0;
    int v55 = &v54;
    uint64_t v56 = 0x2000000000;
    uint64_t v57 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = &v50;
    uint64_t v52 = 0x2000000000;
    uint64_t v53 = 0;
    uint64_t v43 = MEMORY[0x263EF8330];
    uint64_t v44 = 0x40000000;
    uint64_t v45 = sub_216295FAC;
    uint64_t v46 = &unk_2642675D8;
    uint64_t v47 = &v58;
    uint64_t v48 = &v54;
    unint64_t v49 = &v50;
    sub_21629430C(a1, (uint64_t)&v43);
    int v7 = (void *)v55[3];
    if (v7 && v51[3])
    {
      uint64_t v8 = [v7 v5:v6];
      if (v8) {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = [v51[3] v9:v10];
      if (v12) {
        LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 112))(v12);
      }
      double v15 = (double)(unint64_t)(int)v12 * 0.1;
      if ((unint64_t)v15 <= 0xA) {
        unint64_t v16 = 10;
      }
      else {
        unint64_t v16 = (unint64_t)v15;
      }
      uint64_t v17 = [v55[3] v13:v14];
      (*(void (**)(uint64_t, void))(*(void *)v17 + 480))(v17, (v11 + v16));
      char v18 = (void *)v55[3];
      size_t v19 = (void *)v51[3];
      uint64_t v22 = sub_2161F3B4C(v18, v20, v21);
      char v23 = (*(uint64_t (**)(void *))(*(void *)v22 + 104))(v22);
      if ((v23 & 0x10) != 0) {
        int v26 = 1;
      }
      else {
        int v26 = 2;
      }
      if ((v23 & 4) != 0) {
        unsigned int v27 = 0;
      }
      else {
        unsigned int v27 = v26;
      }
      uint64_t v28 = sub_2161F3B4C(v19, v24, v25);
      char v29 = (*(uint64_t (**)(void *))(*(void *)v28 + 104))(v28);
      if ((v29 & 0x10) != 0) {
        unsigned int v32 = 1;
      }
      else {
        unsigned int v32 = 2;
      }
      if ((v29 & 4) != 0) {
        unsigned int v32 = 0;
      }
      if (v27 >= v32 && (v27 > v32 || sub_2162532D0(v18, (char *)v19, 0) == 1))
      {
        v41[0] = 0;
        v41[1] = v41;
        v41[2] = 0x2000000000;
        char v42 = 1;
        uint64_t v35 = MEMORY[0x263EF8330];
        uint64_t v36 = 0x40000000;
        uint64_t v37 = (uint64_t)sub_216296030;
        char v38 = &unk_26426E418;
        uint64_t v39 = v41;
        unint64_t v40 = v16;
        sub_21629430C(a1, (uint64_t)&v35);
        CFArrayRef v34 = *(const __CFArray **)(a1 + 8);
        v62.CFIndex length = CFArrayGetCount(v34);
        v62.location = 0;
        CFArraySortValues(v34, v62, a2, 0);
        _Block_object_dispose(v41, 8);
      }
      else
      {
        uint64_t v33 = [v55[3] v30:v31];
        (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 480))(v33, v11);
      }
    }
    _Block_object_dispose(&v50, 8);
    _Block_object_dispose(&v54, 8);
    _Block_object_dispose(&v58, 8);
  }
}

void sub_216295D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_216295D6C(void *a1, void *a2, unsigned char *a3)
{
  if (!*(void *)(*(void *)(a1[4] + 8) + 24))
  {
    char v18 = (const void *)[a2 a2:a3];
    if (v18)
    {
      uint64_t v21 = __dynamic_cast(v18, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BAE58, 0);
      if (MecabraCandidateIsAutocorrectionCandidate(a2, v22, v23))
      {
        if (v21) {
          *(double *)(*(void *)(a1[5] + 8) + 24) = (*(double (**)(void *))(*(void *)v21 + 392))(v21);
        }
        goto LABEL_15;
      }
    }
    else if (MecabraCandidateIsAutocorrectionCandidate(a2, v19, v20))
    {
      goto LABEL_15;
    }
LABEL_14:
    *a3 = 1;
    goto LABEL_15;
  }
  uint64_t v6 = a1[6];
  if (!MecabraCandidateIsAutocorrectionCandidate(a2, (const char *)a2, (uint64_t)a3))
  {
    int v9 = (const void *)[a2 v7:v8];
    if (!v9
      || (uint64_t v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BAE58, 0)) == 0|| (*(double (**)(void *))(*(void *)v10 + 392))(v10) > *(double *)(*(void *)(a1[5] + 8) + 24)+ -1.3)
    {
      sub_2162941E8(v6, 0);
      uint64_t v24 = [a2 v11:v12];
      int v13 = sub_2161DE698((void *)(v6 + 24), &v24);
      if (v13)
      {
        uint64_t v14 = v13[3];
        if (v14 != (uint64_t *)-1)
        {
          CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v6 + 8), 0, a2);
          CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 8), (CFIndex)v14 + 1);
          uint64_t v24 = [ValueAtIndex valueAtIndex:v16 atIndex:v17];
          sub_21621811C((void *)(v6 + 24), &v24);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 8), (CFIndex)v14 + 1);
        }
      }
    }
    goto LABEL_14;
  }
LABEL_15:
  ++*(void *)(*(void *)(a1[4] + 8) + 24);
}

uint64_t sub_216295FAC(void *a1, void *a2, unsigned char *a3)
{
  int v6 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
  uint64_t result = MecabraCandidateGetMatchedLengthType(a2, (const char *)a2, (uint64_t)a3);
  if (v6)
  {
    if (result == 2)
    {
      *(void *)(*(void *)(a1[5] + 8) + 24) = a2;
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
      return result;
    }
  }
  else
  {
    if (result == 2) {
      return result;
    }
    *(void *)(*(void *)(a1[6] + 8) + 24) = a2;
  }
  *a3 = 1;
  return result;
}

uint64_t sub_216296030(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
  if (*(unsigned char *)(v3 + 24))
  {
    *(unsigned char *)(v3 + 24) = 0;
  }
  else
  {
    uint64_t v5 = result;
    uint64_t result = MecabraCandidateGetMatchedLengthType(a2, (const char *)a2, a3);
    if (result == 2)
    {
      uint64_t v8 = [a2 v6:v7];
      uint64_t v11 = [a2 v9:v10];
      if (v11) {
        LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 112))(v11);
      }
      uint64_t v12 = (v11 + *(_DWORD *)(v5 + 40));
      int v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 480);
      return v13(v8, v12);
    }
  }
  return result;
}

BOOL sub_216296114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  return v4 < (*(int (**)(uint64_t))(*(void *)a2 + 112))(a2);
}

uint64_t sub_216296190()
{
  return 0;
}

void *sub_21629619C(void *a1)
{
  *a1 = &unk_26C6BF908;
  uint64_t v2 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v2, 0);
  return a1;
}

void sub_2162961F4(void *a1)
{
  *a1 = &unk_26C6BF908;
  unint64_t v1 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v1, 0);

  JUMPOUT(0x2166CA800);
}

void *sub_21629626C(void *a1)
{
  *a1 = &unk_26C6BF908;
  uint64_t v2 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v2, 0);
  return a1;
}

void sub_2162962C4(void *a1)
{
  *a1 = &unk_26C6BF908;
  unint64_t v1 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v1, 0);

  JUMPOUT(0x2166CA800);
}

void *sub_21629633C(void *a1)
{
  *a1 = &unk_26C6BF908;
  uint64_t v2 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v2, 0);
  return a1;
}

void sub_216296394(void *a1)
{
  *a1 = &unk_26C6BF908;
  unint64_t v1 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v1, 0);

  JUMPOUT(0x2166CA800);
}

void *sub_21629640C(float *a1, void *a2, uint64_t a3, void **a4)
{
  unsigned int v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 144))();
  unint64_t v9 = v8;
  unint64_t v10 = *((void *)a1 + 1);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v10 <= v8) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if ((*(uint64_t (**)(void, void))(*(void *)v14[2] + 152))(v14[2], *a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v9;
  v14[2] = **a4;
  v14[3] = 0;
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *((void *)a1 + 1);
    if (*(void *)&prime > v10) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          uint64_t v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          uint64_t v25 = (void *)*((void *)a1 + 2);
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = a1 + 4;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *uint64_t v25 = *v31;
                  *uint64_t v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_55:
                uint64_t v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v10 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v33 = *(void **)a1;
  CFArrayRef v34 = *(void **)(*(void *)a1 + 8 * v4);
  if (v34)
  {
    void *v14 = *v34;
LABEL_72:
    void *v34 = v14;
    goto LABEL_73;
  }
  void *v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v33[v4] = a1 + 4;
  if (*v14)
  {
    unint64_t v35 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10) {
        v35 %= v10;
      }
    }
    else
    {
      v35 &= v10 - 1;
    }
    CFArrayRef v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v14;
}

void sub_216296858(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21629686C(uint64_t a1, CFTypeRef cf, int a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6BEEE8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (cf) {
    CFTypeRef v5 = CFRetain(cf);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = v5;
  *(_DWORD *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  operator new();
}

void sub_216296ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void **);
  sub_21626012C((void **)va1);
  sub_2162603B4((uint64_t *)va, 0);
  sub_2162601D8((void ***)va);
  uint64_t v5 = *(void *)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_2161BE0C8((const void **)(v2 + 56), 0);
  uint64_t v6 = (void **)(v2 + 16);
  sub_216175BF4((void ***)va);
  sub_2162973E0(v3, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21629703C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 128))(a2);
}

void *sub_216297064(void *a1)
{
  *a1 = &unk_26C6BEEE8;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, (CFNotificationName)qword_26797C748, 0);
  uint64_t v3 = (void *)a1[14];
  if (v3)
  {

    a1[14] = 0;
  }
  unint64_t v4 = (void *)a1[13];
  if (v4)
  {

    a1[13] = 0;
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  unsigned int v8 = (void **)(a1 + 9);
  sub_2162601D8(&v8);
  uint64_t v6 = a1[8];
  a1[8] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_2161BE0C8((const void **)a1 + 7, 0);
  unsigned int v8 = (void **)(a1 + 2);
  sub_216175BF4(&v8);
  sub_2162973E0(a1 + 1, 0);
  return a1;
}

BOOL sub_216297164(uint64_t *a1)
{
  uint64_t v1 = a1[5];
  if (v1)
  {
    if (!a1[1])
    {
      sub_216175C48(a1 + 2);
      CFURLRef v3 = (const __CFURL *)a1[5];
      CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
      if (sub_2161E26B0(v3, v4))
      {
        (*(void (**)(uint64_t *, uint64_t *))(*a1 + 176))(a1, a1 + 2);
        sub_21629733C((uint64_t)a1);
        operator new();
      }
    }
  }
  return v1 != 0;
}

void sub_216297318(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F2C40B10B6BF7);
  _Unwind_Resume(a1);
}

void sub_21629733C(uint64_t a1)
{
  CFArrayRef v1 = (const __CFArray *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (v1)
  {
    CFArrayRef v2 = v1;
    CFIndex Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        sub_21625922C((uint64_t)ValueAtIndex, v7, v8);
      }
    }
    CFRelease(v2);
  }
}

uint64_t sub_2162973E0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216232FC4(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_216297434(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_2161F1D44(a2, (const char *)a2, a3);
  if (result)
  {
    if (a2)
    {
      uint64_t v7 = [a2 v5:v6];
      return (*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) != 7;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_2162974A0(uint64_t a1)
{
  sub_2162973E0((uint64_t *)(a1 + 8), 0);

  sub_216175C48((uint64_t *)(a1 + 16));
}

void *sub_2162974E0(void *result)
{
  if (!result[1])
  {
    if (result[5]) {
      return (void *)(*(uint64_t (**)(void))(*result + 16))();
    }
  }
  return result;
}

uint64_t sub_216297518(unsigned char *a1, uint64_t a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 32));
  if (a1[96]) {
    BOOL v5 = Count <= 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = !v5;
  if (v6 == 1)
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    CFIndex v9 = Count - 1;
    do
    {
      unint64_t v10 = sub_21628F1BC(a2, v8);
      (*(void (**)(unsigned char *, const void *, BOOL, uint64_t))(*(void *)a1 + 56))(a1, v10, v8++ < v9, 1);
    }
    while (v7 != v8);
  }
  return v6;
}

uint64_t sub_2162975CC(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  int v5 = a3;
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a4)
  {
    CFIndex v8 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v22 = 138413058;
      *(void *)&v22[4] = MecabraCandidateGetSurface(a2, (const char *)a2, a3);
      __int16 v23 = 1024;
      int v24 = v5;
      __int16 v25 = 1024;
      int v26 = 1;
      __int16 v27 = 1024;
      BOOL v28 = MecabraCandidateIsOTAWordlistCandidate((uint64_t)a2, v20, v21) != 0;
      _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "[MecabraLearner::acceptCandidate] %@ isPartial:%d performLearning:%d isOTAWordlist:%d", v22, 0x1Eu);
    }
  }
  uint64_t Surface = MecabraCandidateGetSurface(a2, (const char *)a2, a3);
  if ((v5 & 1) == 0)
  {
    CFStringRef v10 = (const __CFString *)Surface;
    if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) && (sub_2161A1E44(v10) & a4) == 1)
    {
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
      unsigned int v12 = sub_2161E2834(v11);
      if (CFStringGetLength(v10) >= 1)
      {
        CFIndex v13 = 0;
        do
        {
          CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v10, v13);
          CFAllocatorRef Default = CFAllocatorGetDefault();
          CFStringRef v16 = CFStringCreateWithSubstring(Default, v10, RangeOfComposedCharactersAtIndex);
          *(void *)uint64_t v22 = v16;
          if (v16)
          {
            float v17 = (NSObject **)sub_21626852C();
            sub_216268770(v17, v12, (uint64_t)v16);
            CFRelease(v16);
          }
          v13 += RangeOfComposedCharactersAtIndex.length;
        }
        while (v13 < CFStringGetLength(v10));
      }
    }
  }
  sub_2162978A0(a1, a4);
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 248))(a1, a2);
    if (!result) {
      return result;
    }
    unint64_t v19 = *(void **)(a1 + 104);
    if (v19) {

    }
    *(void *)(a1 + 104) = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 232))(a1, a2);
    *(unsigned char *)(a1 + 12sub_2161A108C(&a9, 0) = v5;
    *(unsigned char *)(a1 + 122) = a4;
    (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
  }
  else
  {
    sub_2162979E4(a1);
  }
  return 1;
}

void sub_216297870(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162978A0(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 104);
  if (!v3) {
    return 0;
  }
  if (a2)
  {
    int v5 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t Surface = MecabraCandidateGetSurface(*(void **)(a1 + 104), v6, v7);
      int v13 = *(unsigned __int8 *)(a1 + 122);
      int v14 = 138412802;
      uint64_t v15 = Surface;
      __int16 v16 = 1024;
      int v17 = 1;
      __int16 v18 = 1024;
      int v19 = v13;
      _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[MecabraLearner::flushAcceptedCandidate] S:%@ performLearning:%d shouldLearn:%d", (uint8_t *)&v14, 0x18u);
    }
    BOOL v8 = *(unsigned char *)(a1 + 122) != 0;
    uint64_t v3 = *(void *)(a1 + 104);
  }
  else
  {
    BOOL v8 = 0;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, BOOL))(*(void *)a1 + 64))(a1, v3, *(unsigned __int8 *)(a1 + 120), v8);
  CFStringRef v10 = *(void **)(a1 + 104);
  if (v10)
  {

    *(void *)(a1 + 104) = 0;
  }
  *(unsigned char *)(a1 + 12sub_2161A108C(&a9, 0) = 0;
  *(unsigned char *)(a1 + 122) = 0;
  return v9;
}

void sub_2162979E4(uint64_t a1)
{
  CFArrayRef v2 = sub_2162D1CE4(6u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v5 = 0;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraLearner::resetInternalState]", v5, 2u);
  }
  uint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {

    *(void *)(a1 + 112) = 0;
  }
  CFIndex v4 = *(void **)(a1 + 104);
  if (v4)
  {

    *(void *)(a1 + 104) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
  *(unsigned char *)(a1 + 12sub_2161A108C(&a9, 0) = 0;
  *(unsigned char *)(a1 + 122) = 0;
}

BOOL sub_216297AA8(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  *(void *)&v48[5] = *MEMORY[0x263EF8340];
  if (!a4 || (BOOL v8 = sub_2162D1CE4(6u), !os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)))
  {
    if (a2) {
      goto LABEL_4;
    }
LABEL_46:
    sub_2162979E4(a1);
    return a2 != 0;
  }
  if (a2) {
    uint64_t Surface = (__CFString *)MecabraCandidateGetSurface(a2, (const char *)a2, a3);
  }
  else {
    uint64_t Surface = @"NULL";
  }
  *(_DWORD *)buf = 138412802;
  *(void *)&uint8_t buf[4] = Surface;
  __int16 v47 = 1024;
  *(_DWORD *)uint64_t v48 = a3;
  v48[2] = 1024;
  *(_DWORD *)&v48[3] = 1;
  _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "[MecabraLearner::actuallyAcceptCandidate] S:[%@] isPartial:%d performLearning:%d", buf, 0x18u);
  if (!a2) {
    goto LABEL_46;
  }
LABEL_4:
  int v11 = sub_2161F3B4C(a2, (const char *)a2, a3);
  int v12 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96) && a4)
  {
    if (MecabraCandidateIsEmojiCandidate(a2, v9, v10))
    {
      uint64_t v13 = (*(uint64_t (**)(void *))(*(void *)v11 + 472))(v11);
      uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v11 + 24))(v11);
      uint64_t v15 = sub_2162D1CE4(6u);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v13;
        __int16 v47 = 2112;
        *(void *)uint64_t v48 = v14;
        _os_log_debug_impl(&dword_2160F5000, v15, OS_LOG_TYPE_DEBUG, "[MecabraLearner::actuallyAcceptCandidate] key: %@, emoji %@", buf, 0x16u);
        if (v13)
        {
LABEL_9:
          if (v14)
          {
            int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
            sub_21625D8D8(v16, v13, v14);
          }
        }
      }
      else if (v13)
      {
        goto LABEL_9;
      }
    }
    int v12 = *(unsigned __int8 *)(a1 + 96);
  }
  if (v12)
  {
    if (sub_2161F1D44(a2, v9, v10))
    {
      if (MecabraCandidateGetAnalysisString(a2, v17, v18))
      {
        if (MecabraCandidateGetSurface(a2, v19, v20))
        {
          BOOL v21 = CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) > 0;
          if ((*(unsigned int (**)(void *, uint64_t, BOOL))(*(void *)v11 + 248))(v11, a3, v21))
          {
            if (a4)
            {
              sub_216298068(a1, (uint64_t)v11, a3);
              if (a3)
              {
                CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), a2);
                uint64_t v22 = sub_2162D1CE4(6u);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v25 = MecabraCandidateGetSurface(a2, v23, v24);
                  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
                  *(_DWORD *)buf = 138412546;
                  *(void *)&uint8_t buf[4] = v25;
                  __int16 v47 = 2048;
                  *(void *)uint64_t v48 = Count;
                  _os_log_debug_impl(&dword_2160F5000, v22, OS_LOG_TYPE_DEBUG, "[MecabraLearner::actuallyAcceptCandidate] adding %@ to partial candidates (total count: %lu)", buf, 0x16u);
                }
                goto LABEL_28;
              }
LABEL_24:
              if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) >= 1)
              {
                CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), a2);
                if (a4)
                {
                  uint64_t MatchType = MecabraCandidateGetMatchType(a2, v28, v29);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, MatchType);
                }
                CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
              }
              goto LABEL_28;
            }
            if ((a3 & 1) == 0) {
              goto LABEL_24;
            }
          }
        }
      }
    }
  }
LABEL_28:
  int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (sub_2161E2834(v31)) {
    BOOL v32 = 0;
  }
  else {
    BOOL v32 = a4 == 0;
  }
  if (!v32)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    *(void *)buf = Mutable;
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
    unsigned int v35 = sub_2161E2834(v34);
    uint64_t v36 = sub_2161E2A24(v35);
    uint64_t v37 = (const char *)CFStringCreateWithCString(0, v36, 0x8000100u);
    int v38 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
    __int16 v39 = (*(uint64_t (**)(void *))(*(void *)v11 + 416))(v11);
    unint64_t v40 = sub_2161E2A50(v38, v39);
    CFStringRef v41 = CFStringCreateWithCString(0, v40, 0x8000100u);
    char v42 = *(void **)(a1 + 72);
    uint64_t v43 = *(void **)(a1 + 80);
    while (v42 != v43)
    {
      (*(void (**)(void, CFMutableDictionaryRef, void *, uint64_t))(*(void *)*v42 + 16))(*v42, Mutable, v11, a3);
      ++v42;
    }
    sub_216225F1C(*(void *)(a1 + 64), v37, (uint64_t)v41, (uint64_t)Mutable);
    if (v41) {
      CFRelease(v41);
    }
    if (v37) {
      CFRelease(v37);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  uint64_t v44 = *(void **)(a1 + 112);
  if (v44) {

  }
  *(void *)(a1 + 112) = a2;
  return a2 != 0;
}

void sub_216298004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216298068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(6u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    int v11 = 138413058;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    __int16 v17 = 1024;
    int v18 = a3;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[MecabraLearner::registerCandidate] AS:%@ DR:%@ S:%@ isPartial:%d", (uint8_t *)&v11, 0x26u);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a2, a3);
  }
  return result;
}

uint64_t sub_216298230(uint64_t a1)
{
  CFArrayRef v2 = *(void **)(a1 + 104);
  if (v2)
  {

    *(void *)(a1 + 104) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {

    *(void *)(a1 + 112) = 0;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
  if (Count >= 1) {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), Count - 1);
  }
  *(unsigned char *)(a1 + 12sub_2161A108C(&a9, 0) = CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) > 0;
  *(unsigned char *)(a1 + 122) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  return 1;
}

BOOL sub_2162982CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return !v1 || sub_216232D08(v1);
}

uint64_t sub_2162982E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t sub_216298304(uint64_t a1)
{
  sub_2162979E4(a1);
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    return sub_2162335C8(result);
  }
  return result;
}

void sub_21629834C(uint64_t a1)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, (CFNotificationName)qword_26797C748, 0, 0, 0);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = sub_21632CD64;
  v5[3] = &unk_264267330;
  v5[4] = a1;
  sub_21632C500("FacemarkLearning", (uint64_t)v5, 0, &v3);
  sub_21632DC70(v3);
  if (v4) {
    sub_2161121B0(v4);
  }
}

void sub_216298404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_2161121B0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_21629841C(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    __int16 v23 = sub_2162D1CE4(6u);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v24 = "[MecabraLearner::sendCandidateNotification] Invalid candidate: candidate shouldn't be null";
    goto LABEL_18;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    __int16 v23 = sub_2162D1CE4(6u);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v24 = "[MecabraLearner::sendCandidateNotification] Failed to create CFMutableDictionaryRef";
LABEL_18:
    _os_log_debug_impl(&dword_2160F5000, v23, OS_LOG_TYPE_DEBUG, v24, buf, 2u);
    return;
  }
  CFIndex v4 = Mutable;
  int v5 = kMecabraLearningValidatorCandidateAnalysisStringKey[0];
  uint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  CFDictionaryAddValue(v4, v5, v6);
  uint64_t v7 = kMecabraLearningValidatorCandidateConvertedAnalysisStringKey[0];
  uint64_t v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
  CFDictionaryAddValue(v4, v7, v8);
  uint64_t v9 = kMecabraLearningValidatorCandidateSurfaceKey[0];
  uint64_t v10 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  CFDictionaryAddValue(v4, v9, v10);
  int v11 = kMecabraLearningValidatorCandidateDictionaryReadingKey[0];
  uint64_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2);
  CFDictionaryAddValue(v4, v11, v12);
  __int16 v13 = kMecabraLearningValidatorCandidateWordBoundaryKey[0];
  uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
  __int16 v15 = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v16 = *v14;
  if (v14[1] - *v14 != 40)
  {
    unint64_t v17 = 0;
    __int16 v18 = 0;
    uint64_t v19 = 24;
    do
    {
      v18 += *(_WORD *)(v16 + v19);
      __int16 valuePtr = v18;
      CFNumberRef v20 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
      *(void *)buf = v20;
      CFArrayAppendValue(v15, v20);
      if (v20) {
        CFRelease(v20);
      }
      ++v17;
      uint64_t v16 = *v14;
      v19 += 40;
    }
    while (v17 < 0xCCCCCCCCCCCCCCCDLL * ((v14[1] - *v14) >> 3) - 1);
  }
  CFDictionaryAddValue(v4, v13, v15);
  if (v15) {
    CFRelease(v15);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, kMecabraLearningValidatorNotificationName, 0, v4, 1u);
  uint64_t v22 = sub_2162D1CE4(6u);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2);
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v25;
    __int16 v29 = 2112;
    uint64_t v30 = v26;
    _os_log_debug_impl(&dword_2160F5000, v22, OS_LOG_TYPE_DEBUG, "[MecabraLearner::sendCandidateNotification] sent notification: reading %@ surface: %@", buf, 0x16u);
  }
  CFRelease(v4);
}

void sub_21629882C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2161DFB5C((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162988A4()
{
  return 1;
}

uint64_t sub_2162988B4()
{
  return 0;
}

uint64_t sub_2162988BC()
{
  return 0;
}

void sub_2162988CC()
{
}

void *sub_2162988E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C75C8;
  result[1] = v3;
  return result;
}

uint64_t sub_216298928(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C75C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_216298954(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8));

  return sub_2161E2834(v1);
}

uint64_t sub_2162989A0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC710)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162989E0()
{
  return &unk_26C6BC710;
}

uint64_t *sub_2162989EC(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_2162262FC((void *)(v1 + 8));
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_216298A50()
{
}

void *sub_216298A64(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7620;
  result[1] = v3;
  return result;
}

uint64_t sub_216298AAC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7620;
  a2[1] = v2;
  return result;
}

uint64_t sub_216298AD8(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 264))(*(void *)(a1 + 8), *a2);
}

uint64_t sub_216298B0C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC720)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216298B4C()
{
  return &unk_26C6BC720;
}

uint64_t *sub_216298B58(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_2161C9BD8((void *)(v1 + 8));
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_216298BBC()
{
}

void *sub_216298BD0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7678;
  result[1] = v3;
  return result;
}

uint64_t sub_216298C18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7678;
  a2[1] = v2;
  return result;
}

uint64_t sub_216298C44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))();
}

uint64_t sub_216298C74(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC730)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216298CB4()
{
  return &unk_26C6BC730;
}

void sub_216298CC0()
{
}

void sub_216298D18(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1060C401CBA31CDLL);
  _Unwind_Resume(a1);
}

void sub_216298D3C()
{
}

void sub_216298DA8(_Unwind_Exception *a1)
{
  sub_21623E67C(v1, 0);
  _Unwind_Resume(a1);
}

void **sub_216298DC0(void ***a1, uint64_t a2, const char *a3)
{
  if (!a2
    || (uint64_t result = (void **)sub_216192194(a2, kMecabraContextOptionPrivateMode), result != (void **)*MEMORY[0x263EFFB40]))
  {
    uint64_t v6 = *a1;
    return sub_21623E4E0(v6, a3);
  }
  return result;
}

BOOL sub_216298E38(void ***a1, const char *a2, const __CFString *a3)
{
  if ((!a2 || sub_216192194((uint64_t)a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x263EFFB40])
    && (objc_msgSend_containsObject_(**a1, a2, (uint64_t)a3) & 1) != 0)
  {
    return 1;
  }
  CFIndex Length = CFStringGetLength(a3);
  CFStringRef theString = a3;
  uint64_t v29 = 0;
  CFIndex v30 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a3);
  CStringPtr = 0;
  __int16 v27 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a3, 0x600u);
  }
  int64_t v31 = 0;
  int64_t v32 = 0;
  BOOL v28 = CStringPtr;
  if (Length >= 1)
  {
    uint64_t v8 = 0;
    int64_t v9 = 0;
    BOOL v10 = 0;
    int64_t v11 = 0;
    uint64_t v12 = 64;
    do
    {
      if ((unint64_t)v11 >= 4) {
        uint64_t v13 = 4;
      }
      else {
        uint64_t v13 = v11;
      }
      CFIndex v14 = v30;
      if (v30 <= v11)
      {
        UniChar v15 = 0;
      }
      else if (v27)
      {
        UniChar v15 = v27[v11 + v29];
      }
      else if (v28)
      {
        UniChar v15 = v28[v29 + v11];
      }
      else
      {
        if (v32 <= v11 || v9 > v11)
        {
          uint64_t v20 = v13 + v8;
          uint64_t v21 = v12 - v13;
          int64_t v22 = v11 - v13;
          CFIndex v23 = v22 + 64;
          if (v22 + 64 >= v30) {
            CFIndex v23 = v30;
          }
          int64_t v31 = v22;
          int64_t v32 = v23;
          if (v30 >= v21) {
            CFIndex v14 = v21;
          }
          v33.CFIndex length = v14 + v20;
          v33.location = v22 + v29;
          CFStringGetCharacters(theString, v33, v25);
          int64_t v9 = v31;
        }
        UniChar v15 = v25[v11 - v9];
      }
      char v16 = ~(_BYTE)v15;
      uint64_t v17 = v15 >> 5;
      int v18 = 1 << v16;
      if ((v18 & dword_2163865E8[v17]) == 0
        && (dword_2163885E8[v17] & v18) == 0
        && (dword_21638A5E8[v17] & v18) == 0)
      {
        break;
      }
      BOOL v10 = ++v11 >= Length;
      --v8;
      ++v12;
    }
    while (Length != v11);
  }
  else
  {
    return 1;
  }
  return v10;
}

void sub_21629904C()
{
}

void sub_2162990B8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40A1F7DA0CLL);
  _Unwind_Resume(a1);
}

void sub_2162990DC(uint64_t a1, const void *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  sub_21629686C(a1, a2, 1);
}

void sub_2162996C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  sub_21626012C((void **)va1);
  sub_21629D64C((uint64_t *)va, 0);
  int v5 = (std::__shared_weak_count *)v2[20];
  if (v5) {
    sub_2161121B0(v5);
  }
  sub_2161868BC(v3, 0);
  sub_216297064(v2);
  _Unwind_Resume(a1);
}

void sub_2162997EC()
{
}

void *sub_2162997F4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BFD40;
  uint64_t v2 = *(void *)(a1 + 144);
  if (v2)
  {
    uint64_t v3 = sub_216232FC4(v2);
    MEMORY[0x2166CA800](v3, 0x10F2C40B10B6BF7);
  }
  CFIndex v4 = *(std::__shared_weak_count **)(a1 + 160);
  if (v4) {
    sub_2161121B0(v4);
  }
  sub_2161868BC((const void **)(a1 + 128), 0);

  return sub_216297064((void *)a1);
}

uint64_t sub_216299884()
{
  return 2500;
}

uint64_t sub_21629988C()
{
  return 3000;
}

uint64_t sub_216299894(void *a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  CFURLRef v2 = (const __CFURL *)a1[5];
  if (!v2 || a1[1]) {
    return 1;
  }
  CFStringRef v5 = CFURLGetString(v2);
  uint64_t v6 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v7 = os_signpost_id_make_with_pointer(v6, a1);
  uint64_t v8 = sub_2162D1CE4(0xDu);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int64_t v9 = v8;
    if (os_signpost_enabled(v8))
    {
      int v10 = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
      int64_t v11 = @"N/A";
      if (v5) {
        int64_t v11 = (__CFString *)v5;
      }
      v24[0] = 67109378;
      v24[1] = v10;
      __int16 v25 = 2112;
      uint64_t v26 = v11;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SeaweedChineseLearner", "Begin init for learner type [%d] at [%@]", (uint8_t *)v24, 0x12u);
    }
  }
  BOOL v3 = sub_216297164(a1);
  if (v3)
  {
    if (a1[1])
    {
      sub_2162D36FC(a1[17]);
      uint64_t v12 = a1[1];
      if (v12) {
        sub_2162D3970(a1[17], v12);
      }
    }
  }
  if (a1[5])
  {
    CFArrayRef v13 = (const __CFArray *)(*(uint64_t (**)(void *))(*a1 + 160))(a1);
    if (v13)
    {
      CFArrayRef v14 = v13;
      CFIndex Count = CFArrayGetCount(v13);
      if (Count >= 1)
      {
        CFIndex v16 = Count;
        for (CFIndex i = 0; i != v16; ++i)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v14, i);
          sub_21625922C((uint64_t)ValueAtIndex, v19, v20);
        }
      }
      CFRelease(v14);
    }
  }
  int v21 = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
  sub_21625D88C(v21, 1);
  int64_t v22 = sub_2162D1CE4(0xDu);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    CFIndex v23 = v22;
    if (os_signpost_enabled(v22))
    {
      LOWORD(v24[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v23, OS_SIGNPOST_INTERVAL_END, v7, "SeaweedChineseLearner", (const char *)&unk_2163CBB73, (uint8_t *)v24, 2u);
    }
  }
  return v3;
}

unsigned __int8 *sub_216299B08(uint64_t a1)
{
  sub_2162973E0((uint64_t *)(a1 + 8), 0);
  sub_216175C48((uint64_t *)(a1 + 16));
  sub_2162D3AE0(*(void **)(a1 + 136));
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);

  return sub_21625D88C(v2, 0);
}

void *sub_216299B80(void *a1)
{
  if (!a1[1] && a1[5]) {
    (*(void (**)(void *))(*a1 + 16))(a1);
  }
  int v2 = (void *)a1[17];

  return sub_2162D2508(v2);
}

void *sub_216299BEC(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 136);
  if (result[41])
  {
    uint64_t v2 = result[40];
    if (v2)
    {
      *(void *)(v2 + 24) = *(void *)(v2 + 16);
      return sub_2162D3BDC((uint64_t)result);
    }
  }
  return result;
}

uint64_t sub_216299C10(uint64_t a1, __CFString *theString, __CFString *a3, CFMutableStringRef a4, char a5)
{
  if (!*(unsigned char *)(a1 + 96)) {
    return 0;
  }
  if (!theString || (a5 & 1) != 0)
  {
    if (!theString) {
      return 0;
    }
LABEL_10:
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 3, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue(Mutable, off_26797C578, theString);
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
    if ((unint64_t)a3 | (unint64_t)a4)
    {
      CFIndex v16 = 0;
      uint64_t v17 = 0;
      if (a3)
      {
LABEL_12:
        if (v15 == 5)
        {
          CFDictionarySetValue(Mutable, off_26797C520, a3);
          if (!a4) {
            goto LABEL_31;
          }
LABEL_28:
          CFIndex v30 = (const void **)&off_26797C528;
LABEL_30:
          CFDictionarySetValue(Mutable, *v30, a4);
          goto LABEL_31;
        }
        CFDictionarySetValue(Mutable, off_26797C530, a3);
        if (!a4) {
          goto LABEL_31;
        }
LABEL_29:
        CFIndex v30 = (const void **)&off_26797C538;
        goto LABEL_30;
      }
    }
    else
    {
      int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
      int v19 = sub_2161E2834(v18);
      CFStringRef v20 = (const __CFString *)sub_216367844(theString, v19);
      if (!v20)
      {
        uint64_t v12 = sub_2162D3D18(*(void *)(a1 + 136), Mutable);
LABEL_35:
        CFRelease(Mutable);
        return v12;
      }
      CFStringRef v21 = v20;
      CFMutableArrayRef v22 = sub_2161E4E50(v20, v15 == 5);
      if (v22)
      {
        CFArrayRef v23 = v22;
        CFStringRef cf = v21;
        CFIndex v16 = CFStringCreateMutable(v13, 0);
        a4 = CFStringCreateMutable(v13, 0);
        CFIndex Count = CFArrayGetCount(v23);
        if (Count >= 1)
        {
          CFIndex v25 = Count;
          for (CFIndex i = 0; i != v25; ++i)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v23, i);
            CFStringAppend(v16, ValueAtIndex);
            CFIndex Length = CFStringGetLength(ValueAtIndex);
            CFStringRef v29 = CFStringCreateWithFormat(v13, 0, @"%ld", Length);
            CFStringAppend(a4, v29);
            CFRelease(v29);
          }
        }
        CFRelease(v23);
        CFStringRef v21 = cf;
      }
      else
      {
        a4 = 0;
        CFIndex v16 = 0;
      }
      CFRelease(v21);
      uint64_t v17 = a4;
      a3 = v16;
      if (v16) {
        goto LABEL_12;
      }
    }
    if (!a4)
    {
LABEL_31:
      uint64_t v12 = sub_2162D3D18(*(void *)(a1 + 136), Mutable);
      if (v16) {
        CFRelease(v16);
      }
      if (v17) {
        CFRelease(v17);
      }
      goto LABEL_35;
    }
    if (v15 == 5) {
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  CFIndex v9 = CFStringGetLength(theString);
  uint64_t v12 = 0;
  if (v9 && v9 <= 15)
  {
    if ((sub_216259558(theString, v10, v11) & 1) == 0 && (sub_2161A1F24(theString) & 1) == 0) {
      return 0;
    }
    goto LABEL_10;
  }
  return v12;
}

void sub_216299F18(void *a1, uint64_t a2, const __CFString **a3)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = v9;
  sub_216299FE8((int)&v8, a3[1], a3[2], a3[4], a3[5], 1);
  int v7 = 0;
  int v5 = sub_2162330C0(a2, (uint64_t)&v8, (uint64_t)&v7);
  if (a1[18] != a2)
  {
    if (v5 == 1)
    {
      sub_2162D3E00(a1[17], (uint64_t)&v8, v7);
    }
    else if (v5 == 2)
    {
      uint64_t v6 = a1[1];
      if (v6) {
        sub_2162D3970(a1[17], v6);
      }
    }
  }
  sub_2161936EC((uint64_t)&v8, v9[0]);
}

void sub_216299FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_216299FE8(int a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, int a6)
{
  memset(&__p, 0, sizeof(__p));
  if (a2 || a6)
  {
    sub_2161B4568(&__p, off_26797C580[0]);
    sub_216221EB8(a1, a2);
  }
  if (a3)
  {
    sub_2161B4568(&__p, off_26797C588);
    sub_216221EB8(a1, a3);
  }
  if (a4)
  {
    sub_2161B4568(&__p, off_26797C518);
    sub_216221EB8(a1, a4);
  }
  if (a5)
  {
    sub_2161B4568(&__p, off_26797C540[0]);
    sub_216221EB8(a1, a5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21629A14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21629A168(CFArrayRef *a1, unsigned int a2)
{
  v52[16] = *MEMORY[0x263EF8340];
  if (CFArrayGetCount(a1[7]) >= 2)
  {
    unsigned int v46 = a2;
    id v4 = objc_alloc_init(MEMORY[0x263F089D8]);
    id v5 = objc_alloc_init(MEMORY[0x263F089D8]);
    id v47 = objc_alloc_init(MEMORY[0x263F089D8]);
    uint64_t v6 = (__CFString *)objc_alloc_init(MEMORY[0x263F089D8]);
    CFIndex Count = CFArrayGetCount(a1[7]);
    CFArrayRef v8 = a1[7];
    if (Count < 1)
    {
LABEL_14:
      CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      uint64_t v36 = [v8 countByEnumeratingWithState:v33 objects:&v48 count:16];
      if (v36)
      {
        uint64_t v37 = *(void *)v49;
        while (2)
        {
          for (uint64_t i = 0; i != v36; ++i)
          {
            if (*(void *)v49 != v37) {
              objc_enumerationMutation(v8);
            }
            __int16 v39 = sub_2161F3B4C(*(void **)(*((void *)&v48 + 1) + 8 * i), v34, v35);
            CFStringRef v40 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v39 + 440))(v39);
            CFStringRef v41 = v40;
            if (v40)
            {
              if (!CFStringGetLength(v40))
              {
                v54.CFIndex length = CFStringGetLength(Mutable);
                v54.location = 0;
                CFStringDelete(Mutable, v54);
                goto LABEL_26;
              }
              CFStringAppend(Mutable, v41);
              CFRelease(v41);
            }
          }
          uint64_t v36 = [v8 countByEnumeratingWithState:v34 objects:(id *)&v48 count:16];
          if (v36) {
            continue;
          }
          break;
        }
      }
LABEL_26:
      if (objc_msgSend_length(v4, v34, v35) && objc_msgSend_length(v5, v42, v43))
      {
        CFIndex v44 = CFArrayGetCount(a1[7]);
        sub_21629CFB8(v52, v5, v4, Mutable, v47, v46, v44, 32);
        (*((void (**)(CFArrayRef *, void *))*a1 + 27))(a1, v52);
        (*((void (**)(CFArrayRef *, id, void))*a1 + 34))(a1, v4, (v46 >> 14) & 1);
        CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v6);
        sub_2161868BC((const void **)a1 + 16, Copy);
        sub_21629D188(v52);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    else
    {
      CFIndex v9 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v8, v9);
        uint64_t v13 = [ValueAtIndex valueAtIndex:v11, v12];
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
        uint64_t DictionaryReading = MecabraCandidateGetDictionaryReading(ValueAtIndex, v15, v16);
        if (!DictionaryReading)
        {
          if ((*((unsigned int (**)(CFArrayRef *))*a1 + 19))(a1) == 5) {
            uint64_t DictionaryReading = MecabraCandidateGetAnalysisString(ValueAtIndex, v17, v18);
          }
          else {
            uint64_t DictionaryReading = 0;
          }
        }
        if (!MecabraCandidateGetSurface(ValueAtIndex, v17, v18) || !DictionaryReading) {
          break;
        }
        [v4 appendString:v20];
        [v5 appendString:DictionaryReading];
        uint64_t v24 = *(void *)sub_2161F3B4C(ValueAtIndex, v22, v23);
        CFIndex v25 = (const void *)(*(uint64_t (**)(void))(v24 + 448))();
        [v47 appendString:v26];
        CFStringRef v29 = sub_2161F3B4C(ValueAtIndex, v27, v28);
        if ((*(unsigned int (**)(void *))(*(void *)v29 + 216))(v29)) {
          [v6 appendString:@"1"];
        }
        else {
          [v6 appendString:v30];
        }
        CFRelease(v25);
        ++v9;
        CFIndex v31 = CFArrayGetCount(a1[7]);
        CFArrayRef v8 = a1[7];
        if (v31 <= v9) {
          goto LABEL_14;
        }
      }
    }
  }
}

void sub_21629A600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21629D188((uint64_t *)va);
  _Unwind_Resume(a1);
}

CFIndex sub_21629A620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 416))(a2);
  if ((v6 & 0x4800) == 0x800
    || (CFIndex result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2),
        CFStringRef v8 = (const __CFString *)result,
        (v6 & 0x4000) == 0)
    && !result)
  {
    CFIndex result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    CFStringRef v8 = (const __CFString *)result;
  }
  if (v8)
  {
    CFIndex result = CFStringGetLength(v8);
    if (result >= 1)
    {
      (*(void (**)(uint64_t, const __CFString *))(*(void *)a2 + 496))(a2, v8);
      CFIndex result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, a3);
      if (result)
      {
        CFIndex v9 = (__CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 440))(a2);
        int v10 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 448))(a2);
        uint64_t v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
        if (v9) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = &stru_26C6FB1C0;
        }
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
        int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
        sub_21629CFB8(v15, v8, v11, v12, v10, v6, v13, v14);
        (*(void (**)(uint64_t, void *))(*(void *)a1 + 216))(a1, v15);
        if (v9) {
          CFRelease(v9);
        }
        if (v10) {
          CFRelease(v10);
        }
        return (CFIndex)sub_21629D188(v15);
      }
    }
  }
  return result;
}

void sub_21629A8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21629D188((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_21629A908(uint64_t a1, char a2)
{
  return (a2 & 1) == 0 && CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) < 1;
}

uint64_t sub_21629A93C(void *a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 121) || *(void *)(a2 + 24) != 1)
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a1 + 280))(a1, a2);
    if (!result) {
      return result;
    }
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x800) != 0)
    {
      if (a1[18])
      {
        sub_21629CFB8(v7, *(const void **)(a2 + 8), *(const void **)(a2 + 16), &stru_26C6FB1C0, &stru_26C6FB1C0, v5, *(void *)(a2 + 24), 256);
        (*(void (**)(void *, void, void *))(*a1 + 208))(a1, a1[18], v7);
        sub_21629D188(v7);
        return 1;
      }
    }
    else
    {
      uint64_t v6 = a1[1];
      if (v6)
      {
        (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 208))(a1, v6, a2);
        return 1;
      }
    }
  }
  return 0;
}

void sub_21629AA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21629D188((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21629AA74(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a2
    && (uint64_t v8 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3),
        (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8) == 7))
  {
    sub_2162978A0(a1, a4);
    if (*(unsigned char *)(a1 + 96))
    {
      uint64_t v11 = *(void *)(a1 + 152);
      CFStringRef v12 = (const __CFString *)[a2 v9:v10];
      return sub_21632D588(v11, v12, 0);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (MecabraCandidateIsEmojiCandidate(a2, (const char *)a2, a3))
    {
      uint64_t v16 = [a2 v14:v15];
      if (v16)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)v16 + 104))(v16) & 0x200) != 0)
        {
          int v19 = (const void *)[a2 v17:v18];
          if (v19)
          {
            CFStringRef v20 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B94A0, 0);
            if (v20)
            {
              CFStringRef v21 = v20;
              uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v20 + 192))(v20);
              uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v21 + 184))(v21);
              uint64_t v24 = sub_2162D1CE4(6u);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                int v26 = 138412546;
                uint64_t v27 = v22;
                __int16 v28 = 2112;
                uint64_t v29 = v23;
                _os_log_debug_impl(&dword_2160F5000, v24, OS_LOG_TYPE_DEBUG, "[MecabraLearner::engineSpecificCandidateRegistration] key: %@, emoji %@", (uint8_t *)&v26, 0x16u);
              }
              int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
              sub_21625D8D8(v25, v22, v23);
            }
          }
        }
      }
    }
    sub_2161868BC((const void **)(a1 + 128), 0);
    return sub_2162975CC(a1, a2, a3, a4);
  }
}

uint64_t sub_21629AD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  uint64_t v5 = sub_216233654(a2, a3, (uint64_t)v9, (uint64_t)v8);
  if (*(void *)(a1 + 144) != a2) {
    uint64_t v5 = sub_2162D3874(*(void *)(a1 + 136), v8, v9);
  }
  uint64_t v6 = v5;
  uint64_t v10 = (void **)v8;
  sub_2162232B8(&v10);
  return v6;
}

void sub_21629ADC8(_Unwind_Exception *a1)
{
  *(void *)(v2 - 4sub_2161A108C(&a9, 0) = v1;
  sub_2162232B8((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_21629ADE0(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a2 || MecabraCandidateIsEmojiCandidate(a2, (const char *)a2, a3)) {
    return 0;
  }
  int Kind = MecabraCandidateGetKind(a2, v5, v6);
  uint64_t v11 = 8;
  if (Kind == 84) {
    uint64_t v11 = 144;
  }
  uint64_t v12 = *(void *)(a1 + v11);
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v22 = v23;
  uint64_t v13 = sub_2161F3B4C(a2, v9, v10);
  if (v13) {
    CFStringRef v16 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v13 + 440))(v13);
  }
  else {
    CFStringRef v16 = 0;
  }
  CFStringRef DictionaryReading = (const __CFString *)MecabraCandidateGetDictionaryReading(a2, v14, v15);
  CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(a2, v18, v19);
  sub_216299FE8((int)&v22, DictionaryReading, Surface, v16, 0, 0);
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v7 = sub_21629AD34(a1, v12, (uint64_t)&v22);
  sub_2161936EC((uint64_t)&v22, v23[0]);
  return v7;
}

void sub_21629AF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_21629AF20(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v6 = v7;
  sub_216299FE8((int)&v6, a2, a3, 0, 0, 0);
  uint64_t v4 = sub_21629AD34(a1, *(void *)(a1 + 8), (uint64_t)&v6);
  sub_2161936EC((uint64_t)&v6, v7[0]);
  return v4;
}

void sub_21629AF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_21629AFA8(uint64_t a1, uint64_t *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E200, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E200))
  {
    sub_21610B834(&xmmword_26797E218, off_26797C580[0]);
    dword_26797E230 = 0;
    word_26797E234 = 1;
    byte_26797E236 = 0;
    sub_21610B834(qword_26797E238, off_26797C588);
    *(int *)((char *)&dword_26797E250 + 3) = 0;
    dword_26797E250 = 0;
    sub_21610B834(qword_26797E258, off_26797C518);
    *(int *)((char *)&dword_26797E270 + 3) = 0;
    dword_26797E270 = 0;
    sub_21610B834(qword_26797E278, off_26797C540[0]);
    *(int *)((char *)&dword_26797E290 + 3) = 0;
    dword_26797E290 = 0;
    sub_21610B834(qword_26797E298, off_26797C548[0]);
    dword_26797E2B0 = 0;
    word_26797E2B4 = 256;
    byte_26797E2B6 = 0;
    sub_21610B834(qword_26797E2B8, off_26797C550[0]);
    dword_26797E2D0 = 1;
    word_26797E2D4 = 256;
    byte_26797E2D6 = 0;
    __cxa_atexit((void (*)(void *))sub_21629D80C, 0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E200);
  }
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  sub_21629D1F4((char *)&v3, &xmmword_26797E218, (long long *)&unk_26797E2D8, 6uLL);
  sub_21618B7D8(a2);
  *(_OWORD *)a2 = v3;
  a2[2] = v4;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  uint64_t v5 = (void **)&v3;
  sub_216175BF4(&v5);
}

void sub_21629B184(_Unwind_Exception *a1)
{
}

__CFString *sub_21629B1C0()
{
  return @"LearningDictionary";
}

uint64_t sub_21629B1CC(uint64_t a1)
{
  uint64_t result = sub_216298304(a1);
  long long v3 = *(void **)(a1 + 136);
  uint64_t v4 = v3[38];
  if (v4) {
    *(void *)(v4 + 24) = *(void *)(v4 + 16);
  }
  uint64_t v5 = v3[39];
  if (v5) {
    *(void *)(v5 + 24) = *(void *)(v5 + 16);
  }
  uint64_t v6 = v3[40];
  if (v6) {
    *(void *)(v6 + 24) = *(void *)(v6 + 16);
  }
  return result;
}

uint64_t sub_21629B224(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_2161F1D44(a2, (const char *)a2, a3);
  if (result)
  {
    if (a2
      && (uint64_t v7 = objc_msgSend_rawCandidate(a2, v5, v6),
          (*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7) == 7))
    {
      return 0;
    }
    else
    {
      uint64_t v8 = [a2 v5:v6];
      return ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8) & 0x100) == 0;
    }
  }
  return result;
}

uint64_t sub_21629B2C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = sub_216232D08(v2);
  }
  else {
    BOOL v3 = 1;
  }
  return v3 & sub_21632D984(*(void *)(a1 + 152));
}

BOOL sub_21629B308(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v2 = a1[19];

  return sub_21632D8BC(v2);
}

BOOL sub_21629B360(uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = *(const __CFString **)(a2 + 8);
  CFStringRef v3 = *(const __CFString **)(a2 + 16);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  return !v4
      && (unint64_t)(CFStringGetLength(v2) - 65) >= 0xFFFFFFFFFFFFFFC0
      && (unint64_t)(CFStringGetLength(v3) - 1) < 0x10;
}

uint64_t sub_21629B3B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 168);
  if (*(unsigned char *)(v1 + 5)) {
    return (*(uint64_t (**)(void, void))(**(void **)(v1 + 168) + 16))(*(void *)(v1 + 168), *(void *)(*(void *)(v1 + 8) + 32));
  }
  else {
    return 0;
  }
}

__CFString *sub_21629B3FC(int a1, void *lpsrc)
{
  if (lpsrc
    && (CFStringRef v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BB158, 0)) != 0)
  {
    CFStringRef v3 = (int **)(*(uint64_t (**)(void *))(*(void *)v2 + 560))(v2);
    BOOL v4 = *v3;
    uint64_t v5 = v3[1];
    uint64_t v6 = &off_26426BCA8;
    if (*v3 != v5)
    {
      char v7 = 0;
      char v8 = 0;
      do
      {
        int v9 = *v4++;
        v8 |= v9 == 2;
        v7 |= v9 != 2;
      }
      while (v4 != v5);
      uint64_t v10 = &off_26426BCB0;
      if (v7) {
        uint64_t v10 = &off_26426BCB8;
      }
      if (v8) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = &off_26426BCA8;
  }
  return *v6;
}

void sub_21629B4F8(uint64_t a1, const void *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  sub_2162990DC(a1, a2);
}

void sub_21629B69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  sub_21626012C((void **)va1);
  sub_21629D7AC((uint64_t *)va);
  sub_2162997F4(v2);
  _Unwind_Resume(a1);
}

BOOL sub_21629B6F8(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_21629B360(a1, a2);
  if (result)
  {
    BOOL result = 1;
    if (*(_DWORD *)(a2 + 52) == 1)
    {
      CFStringRef v5 = *(const __CFString **)(a2 + 8);
      CFStringRef v6 = *(const __CFString **)(a2 + 16);
      if (CFEqual(v5, v6))
      {
        if (CFStringGetLength(v6) == 1)
        {
          int CharacterAtIndex = CFStringGetCharacterAtIndex(v6, 0);
          if ((CharacterAtIndex - 105) <= 0xD && ((1 << (CharacterAtIndex - 105)) & 0x3001) != 0) {
            return 0;
          }
        }
        v9[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
        v9[1] = 4;
        if (sub_216333B8C((uint64_t)v9, v5)) {
          return 0;
        }
      }
    }
  }
  return result;
}

__CFArray *sub_21629B7E0()
{
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(Mutable, @"DynamicPhraseLexicon_zh_Hans.db");
  CFArrayAppendValue(Mutable, @"PhraseLearning_zh_Hans.db");
  CFArrayAppendValue(Mutable, @"PhraseLearning_zh_Hans.dictionary");
  CFArrayAppendValue(Mutable, @"StructuralPinyinLearning_zh_Hans.db");
  CFArrayAppendValue(Mutable, @"StructuralPinyinLearning_zh_Hans.dictionary");
  CFArrayAppendValue(Mutable, @"facemark.dat");
  return Mutable;
}

__CFString *sub_21629B878()
{
  return @"DynamicPhraseLexicon_zh_Hans.db";
}

uint64_t sub_21629B884()
{
  return 0;
}

uint64_t sub_21629B88C()
{
  return 0;
}

__CFArray *sub_21629B894(uint64_t a1, const __CFURL *a2)
{
  if (!a2) {
    return 0;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFURLRef v4 = sub_2161E27E0(a2, @"PhraseLearning_zh_Hans.db");
  if (v4)
  {
    CFURLRef v5 = v4;
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v5);
  }
  CFURLRef v6 = sub_2161E27E0(a2, @"PhraseLearning_zh_Hans.dictionary");
  if (v6)
  {
    CFURLRef v7 = v6;
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v7);
  }
  CFURLRef v8 = sub_2161E27E0(a2, @"StructuralPinyinLearning_zh_Hans.dictionary");
  if (v8)
  {
    CFURLRef v9 = v8;
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v9);
  }
  return Mutable;
}

uint64_t sub_21629B968(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = sub_216297518(a1, a2);
  uint64_t v3 = sub_2161C5600();
  CFURLRef v4 = *(const void **)(v3 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(v3 + 48) = 0;
  }
  return v2;
}

void sub_21629B9A8(uint64_t a1, CFStringRef theString, int a3)
{
  v105[16] = *(void **)MEMORY[0x263EF8340];
  if (theString) {
    CFIndex Length = CFStringGetLength(theString);
  }
  else {
    CFIndex Length = 0;
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v8 = *(void *)(*(void *)(v7 + 72) + 8);
  if (v8) {
    BOOL v9 = Length < 2;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9 || Length > 12) {
    return;
  }
  int v93 = a3;
  if ((unint64_t)Length <= 3)
  {
    if (!sub_21628CEE4(v8, theString))
    {
      uint64_t v82 = sub_2161C5600();
      sub_2161C5978(v82, (const char *)1, theString, a3);
      return;
    }
    uint64_t v7 = *(void *)(a1 + 168);
  }
  CFStringRef v91 = theString;
  uint64_t v92 = a1;
  std::string __p = 0;
  uint64_t v99 = 0;
  int v100 = 0;
  uint64_t v11 = *(void **)(a1 + 56);
  uint64_t v95 = *(void *)(*(void *)(v7 + 72) + 8);
  *(_OWORD *)uint64_t v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  uint64_t v14 = [v11 countByEnumeratingWithState:theString count:v101 objects:v105];
  if (v14)
  {
    CFStringRef v90 = 0;
    CFIndex v96 = 0;
    uint64_t v97 = *(void *)v102;
    uint64_t v94 = v11;
LABEL_17:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(void *)v102 != v97) {
        objc_enumerationMutation(v11);
      }
      CFStringRef v16 = [*((void **)v101[1] + v15) v12:v13];
      uint64_t v17 = v16;
      if (!v16) {
        goto LABEL_118;
      }
      uint64_t v18 = *v16;
      uint64_t v19 = __dynamic_cast(v16, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BB158, 0);
      if (!v19) {
        goto LABEL_118;
      }
      CFStringRef v20 = v19;
      CFStringRef v21 = (const __CFString *)(*(uint64_t (**)(void *))(v18 + 32))(v17);
      CFStringRef v22 = v21;
      if (!v21) {
        goto LABEL_118;
      }
      CFIndex v23 = CFStringGetLength(v21);
      if ((*(unsigned int (**)(void *))(*(void *)v20 + 96))(v20) == 76)
      {
        if (v23 > 4) {
          goto LABEL_118;
        }
        if (v23 >= 2 && v23 > v96 && (sub_21628CEE4(v95, v22) & 1) == 0)
        {
          CFIndex v96 = v23;
          CFStringRef v90 = v22;
          if (v23 == 4) {
            goto LABEL_88;
          }
        }
      }
      uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v20 + 568))(v20);
      if (!v25 || (uint64_t v27 = *(char **)v25, v26 = *(char **)(v25 + 8), *(char **)v25 == v26))
      {
        uint64_t v37 = v99;
        if (v99 >= (CFIndex *)v100)
        {
          __int16 v39 = __p;
          uint64_t v40 = v99 - __p;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
LABEL_121:
          }
            sub_21610CB04();
          uint64_t v42 = v100 - (char *)__p;
          if ((v100 - (char *)__p) >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v41;
          }
          if (v12)
          {
            uint64_t v43 = (char *)sub_2160FFAA8((uint64_t)&v100, v12);
            __int16 v39 = __p;
            uint64_t v37 = v99;
          }
          else
          {
            uint64_t v43 = 0;
          }
          long long v49 = (CFIndex *)&v43[8 * v40];
          *long long v49 = v23;
          int v38 = v49 + 1;
          while (v37 != v39)
          {
            CFIndex v50 = *--v37;
            *--long long v49 = v50;
          }
          std::string __p = v49;
          int v100 = &v43[8 * v12];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *uint64_t v99 = v23;
          int v38 = v99 + 1;
        }
        uint64_t v99 = v38;
        goto LABEL_66;
      }
      if (v26 - v27 >= 1)
      {
        uint64_t v28 = (v26 - v27) >> 3;
        uint64_t v29 = v99;
        uint64_t v30 = (char *)v99 - (char *)__p;
        CFIndex v31 = (CFIndex *)((char *)__p + (((char *)v99 - (char *)__p) & 0xFFFFFFFFFFFFFFF8));
        if (v28 > (v100 - (char *)v99) >> 3)
        {
          uint64_t v32 = v30 >> 3;
          unint64_t v33 = (v30 >> 3) + v28;
          if (v33 >> 61) {
            goto LABEL_121;
          }
          uint64_t v34 = v100 - (char *)__p;
          if ((v100 - (char *)__p) >> 2 > v33) {
            unint64_t v33 = v34 >> 2;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v33;
          }
          if (v12)
          {
            uint64_t v35 = (char *)sub_2160FFAA8((uint64_t)&v100, v12);
            unint64_t v36 = v12;
          }
          else
          {
            uint64_t v35 = 0;
            unint64_t v36 = 0;
          }
          int v55 = &v35[8 * v32];
          uint64_t v56 = &v55[8 * v28];
          uint64_t v57 = 8 * v28;
          uint64_t v58 = v55;
          do
          {
            uint64_t v59 = *(void *)v27;
            v27 += 8;
            *(void *)uint64_t v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
          if (__p != v31)
          {
            uint64_t v60 = (char *)__p + (((char *)v99 - (char *)__p) & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v61 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v55 - 1) = v61;
              v55 -= 8;
            }
            while (v60 != (char *)__p);
          }
          if (v99 != v31) {
            memmove(v56, v31, (char *)v99 - (char *)v31);
          }
          CFRange v62 = __p;
          std::string __p = (CFIndex *)v55;
          uint64_t v99 = (CFIndex *)&v56[(char *)v99 - (char *)v31];
          int v100 = &v35[8 * v36];
          uint64_t v11 = v94;
          if (v62) {
            operator delete(v62);
          }
          goto LABEL_66;
        }
        uint64_t v44 = (char *)v99 - (char *)v31;
        uint64_t v45 = v99 - v31;
        if (v45 >= v28)
        {
          unsigned int v46 = &v27[8 * v28];
          long long v48 = v99;
          uint64_t v11 = v94;
        }
        else
        {
          unsigned int v46 = &v27[8 * v45];
          int64_t v47 = v26 - v46;
          if (v26 != v46) {
            memmove(v99, &v27[8 * v45], v26 - v46);
          }
          long long v48 = (CFIndex *)((char *)v99 + v47);
          uint64_t v99 = (CFIndex *)((char *)v99 + v47);
          BOOL v9 = v44 < 1;
          uint64_t v11 = v94;
          if (v9) {
            goto LABEL_66;
          }
        }
        long long v51 = &v48[-v28];
        uint64_t v52 = v48;
        while (v51 < v29)
        {
          CFIndex v53 = *v51++;
          *v52++ = v53;
        }
        CFRange v54 = &v31[v28];
        uint64_t v99 = v52;
        if (v48 != v54) {
          memmove(&v48[-(v48 - v54)], v31, (char *)v48 - (char *)v54);
        }
        size_t v13 = v46 - v27;
        if (v46 != v27) {
          memmove(v31, v27, v13);
        }
      }
LABEL_66:
      if (++v15 == v14)
      {
        uint64_t v63 = [v11 countByEnumeratingWithState:v12 objects:v105 count:16];
        uint64_t v14 = v63;
        if (!v63)
        {
          CFStringRef v22 = v90;
          if (!v90) {
            break;
          }
LABEL_88:
          uint64_t v64 = sub_2161C5600();
          sub_2161C5978(v64, (const char *)1, v22, v93);
          goto LABEL_118;
        }
        goto LABEL_17;
      }
    }
  }
  unint64_t v65 = __p;
  if (__p == v99)
  {
    CFIndex v70 = 0;
    uint64_t v69 = 0;
    CFIndex v67 = 0;
    CFIndex v66 = 0;
    CFStringRef v71 = v91;
    uint64_t v72 = v92;
  }
  else
  {
    CFIndex v66 = 0;
    CFIndex v67 = 0;
    CFIndex v68 = 0;
    uint64_t v69 = 0;
    CFIndex v70 = 0;
    CFStringRef v71 = v91;
    uint64_t v72 = v92;
    do
    {
      uint64_t v74 = *v65++;
      uint64_t v73 = v74;
      uint64_t v75 = v74 + v69;
      CFIndex v76 = v74 + v68;
      BOOL v77 = v69 > 1;
      BOOL v78 = v69 > v67;
      BOOL v79 = !v77 || !v78;
      if (v77 && v78) {
        uint64_t v80 = v69;
      }
      else {
        uint64_t v80 = v67;
      }
      if (v79) {
        CFIndex v81 = v66;
      }
      else {
        CFIndex v81 = v70;
      }
      CFIndex v68 = v76;
      if (v73 < 3)
      {
        uint64_t v69 = v75;
      }
      else
      {
        CFIndex v70 = v76;
        uint64_t v69 = 0;
      }
      if (v73 >= 3)
      {
        CFIndex v67 = v80;
        CFIndex v66 = v81;
      }
    }
    while (v65 != v99);
  }
  BOOL v83 = v69 > 1;
  BOOL v84 = v69 > v67;
  if (v83 && v84) {
    CFIndex v85 = v69;
  }
  else {
    CFIndex v85 = v67;
  }
  if (v83 && v84) {
    CFIndex v86 = v70;
  }
  else {
    CFIndex v86 = v66;
  }
  if (v85)
  {
    if (v86 + v85 <= CFStringGetLength(v71))
    {
      v107.location = v86;
      v107.CFIndex length = v85;
      CFStringRef v87 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], v71, v107);
      CFStringRef v88 = v87;
      if (v87)
      {
        CFIndex v89 = CFStringGetLength(v87);
        (*(void (**)(void, const __CFString *, void, CFIndex))(**(void **)(*(void *)(v72 + 168)
                                                                                          + 104)
                                                                            + 16))(*(void *)(*(void *)(v72 + 168) + 104), v88, 0, v89);
        sub_2161E1FB8(v88);
      }
    }
  }
LABEL_118:
  if (__p) {
    operator delete(__p);
  }
}

void sub_21629C8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21629C964()
{
  return *(void *)(sub_2161C5600() + 48);
}

__CFArray *sub_21629C980()
{
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(Mutable, @"DynamicPhraseLexicon_zh_Hant_pinyin.db");
  CFArrayAppendValue(Mutable, @"PhraseLearning_zh_Hant_pinyin.db");
  CFArrayAppendValue(Mutable, @"PhraseLearning_zh_Hant_pinyin.dictionary");
  CFArrayAppendValue(Mutable, @"StructuralPinyinLearning_zh_Hant_pinyin.db");
  CFArrayAppendValue(Mutable, @"StructuralPinyinLearning_zh_Hant_pinyin.dictionary");
  CFArrayAppendValue(Mutable, @"facemark.dat");
  return Mutable;
}

__CFString *sub_21629CA18()
{
  return @"DynamicPhraseLexicon_zh_Hant_pinyin.db";
}

uint64_t sub_21629CA24()
{
  return 0;
}

uint64_t sub_21629CA2C()
{
  return 0;
}

__CFArray *sub_21629CA34(uint64_t a1, const __CFURL *a2)
{
  if (!a2) {
    return 0;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFURLRef v4 = sub_2161E27E0(a2, @"PhraseLearning_zh_Hant_pinyin.db");
  if (v4)
  {
    CFURLRef v5 = v4;
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v5);
  }
  CFURLRef v6 = sub_2161E27E0(a2, @"PhraseLearning_zh_Hant_pinyin.dictionary");
  if (v6)
  {
    CFURLRef v7 = v6;
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v7);
  }
  CFURLRef v8 = sub_2161E27E0(a2, @"StructuralPinyinLearning_zh_Hant_pinyin.dictionary");
  if (v8)
  {
    CFURLRef v9 = v8;
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v9);
  }
  return Mutable;
}

void sub_21629CB08(uint64_t a1, const void *a2)
{
}

void sub_21629CC44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21626012C((void **)va);
  sub_2162997F4(v2);
  _Unwind_Resume(a1);
}

__CFArray *sub_21629CC88()
{
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(Mutable, @"DynamicPhraseLexicon_zh_Hant_zhuyin.db");
  CFArrayAppendValue(Mutable, @"PhraseLearning_zh_Hant_zhuyin.db");
  CFArrayAppendValue(Mutable, @"PhraseLearning_zh_Hant_zhuyin.dictionary");
  CFArrayAppendValue(Mutable, @"StructuralZhuyinLearning_zh_Hant_zhuyin.db");
  CFArrayAppendValue(Mutable, @"StructuralZhuyinLearning_zh_Hant_zhuyin.dictionary");
  CFArrayAppendValue(Mutable, @"facemark.dat");
  return Mutable;
}

__CFString *sub_21629CD20()
{
  return @"DynamicPhraseLexicon_zh_Hant_zhuyin.db";
}

uint64_t sub_21629CD2C()
{
  return 0;
}

uint64_t sub_21629CD34()
{
  return 0;
}

__CFArray *sub_21629CD3C(uint64_t a1, const __CFURL *a2)
{
  if (!a2) {
    return 0;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFURLRef v4 = sub_2161E27E0(a2, @"PhraseLearning_zh_Hant_zhuyin.db");
  if (v4)
  {
    CFURLRef v5 = v4;
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v5);
  }
  CFURLRef v6 = sub_2161E27E0(a2, @"PhraseLearning_zh_Hant_zhuyin.dictionary");
  if (v6)
  {
    CFURLRef v7 = v6;
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v7);
  }
  CFURLRef v8 = sub_2161E27E0(a2, @"StructuralZhuyinLearning_zh_Hant_zhuyin.dictionary");
  if (v8)
  {
    CFURLRef v9 = v8;
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v9);
  }
  return Mutable;
}

void sub_21629CE10(uint64_t a1, uint64_t a2)
{
}

__CFString *sub_21629CE78()
{
  return @"DynamicPhraseLexicon_yue_Hant.db";
}

uint64_t sub_21629CE84()
{
  return 0;
}

uint64_t sub_21629CE8C()
{
  return 0;
}

void sub_21629CEA4(uint64_t a1)
{
  sub_2162997F4(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21629CEDC()
{
  return 4;
}

void sub_21629CEE8(uint64_t a1)
{
  sub_2162997F4(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21629CF20()
{
  return 13;
}

uint64_t sub_21629CF28()
{
  return 0;
}

void sub_21629CF34(uint64_t a1)
{
  sub_2162997F4(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21629CF6C()
{
  return 2;
}

void sub_21629CF78(uint64_t a1)
{
  sub_2162997F4(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21629CFB0()
{
  return 5;
}

void *sub_21629CFB8(void *a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6, uint64_t a7, int a8)
{
  size_t v13 = sub_21629D058(a1, a2, a3, a7);
  *size_t v13 = &unk_26C6BD4C8;
  v13[4] = a4;
  void v13[5] = a5;
  *((_DWORD *)v13 + 12) = a6;
  *((_DWORD *)v13 + 13) = a8;
  if (a4)
  {
    CFRetain(a4);
    a5 = (const void *)a1[5];
  }
  if (a5) {
    CFRetain(a5);
  }
  return a1;
}

void sub_21629D044(_Unwind_Exception *a1)
{
  sub_21629D0B8(v1);
  _Unwind_Resume(a1);
}

void *sub_21629D058(void *a1, CFTypeRef cf, CFTypeRef a3, uint64_t a4)
{
  *a1 = &unk_26C6BCFD0;
  a1[1] = cf;
  a1[2] = a3;
  a1[3] = a4;
  if (cf)
  {
    CFRetain(cf);
    a3 = (CFTypeRef)a1[2];
  }
  if (a3) {
    CFRetain(a3);
  }
  return a1;
}

void *sub_21629D0B8(void *a1)
{
  *a1 = &unk_26C6BCFD0;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void sub_21629D114(void *a1)
{
  sub_21629D188(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21629D150(void *a1)
{
  sub_21629D0B8(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_21629D188(void *a1)
{
  *a1 = &unk_26C6BD4C8;
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }

  return sub_21629D0B8(a1);
}

char *sub_21629D1F4(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    CFURLRef v6 = result;
    sub_216234534(result, a4);
    BOOL result = sub_21629D27C((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_21629D25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216175BF4(&a9);
  _Unwind_Resume(a1);
}

char *sub_21629D27C(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  CFURLRef v4 = __dst;
  size_t v13 = __dst;
  uint64_t v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    CFURLRef v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_21610A674(v4, *(void **)v6, *((void *)v6 + 1));
        CFURLRef v8 = v14;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)CFURLRef v4 = v7;
        CFURLRef v8 = v4;
      }
      int v9 = *((_DWORD *)v6 + 6);
      *(_DWORD *)(v4 + 27) = *(_DWORD *)((char *)v6 + 27);
      *((_DWORD *)v4 + 6) = v9;
      v6 += 2;
      CFURLRef v4 = v8 + 32;
      uint64_t v14 = v8 + 32;
    }
    while (v6 != a3);
  }
  char v12 = 1;
  sub_21623464C((uint64_t)v11);
  return v4;
}

void sub_21629D33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_21629D350(uint64_t a1, const char *a2)
{
  id result = (id)[MEMORY[0x263F08708] characterSetWithCharactersInString:a2, @"了着还的我是你不在个有和啊他与她没"];
  qword_26797E208 = (uint64_t)result;
  return result;
}

void sub_21629D388()
{
}

void *sub_21629D39C(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7938;
  result[1] = v3;
  return result;
}

uint64_t sub_21629D3E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7938;
  a2[1] = v2;
  return result;
}

uint64_t sub_21629D410(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 152))();
}

uint64_t sub_21629D438(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC7B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21629D478()
{
  return &unk_26C6BC7B0;
}

uint64_t *sub_21629D484(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    sub_2161A0A5C((void *)(v2 + 8));
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21629D4E8()
{
}

void *sub_21629D4FC(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7990;
  result[1] = v3;
  return result;
}

uint64_t sub_21629D544(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7990;
  a2[1] = v2;
  return result;
}

uint64_t sub_21629D570(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 128);
}

uint64_t sub_21629D57C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC7C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21629D5BC()
{
  return &unk_26C6BC7C0;
}

void *sub_21629D5C8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_21629D64C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    sub_21629D5C8((void *)(v2 + 8));
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21629D6B0()
{
}

void *sub_21629D6C4(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7BF8;
  result[1] = v3;
  return result;
}

uint64_t sub_21629D70C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7BF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_21629D738(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 152))();
}

uint64_t sub_21629D760(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC830)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21629D7A0()
{
  return &unk_26C6BC830;
}

uint64_t *sub_21629D7AC(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_2161A0A5C((void *)(v1 + 8));
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21629D80C()
{
  for (uint64_t i = 0; i != -192; i -= 32)
  {
    if (*((char *)&unk_26797E200 + i + 207) < 0) {
      operator delete(*(void **)((char *)&unk_26797E200 + i + 184));
    }
  }
}

unsigned int *sub_21629D854(unsigned int *a1, unsigned int a2, uint64_t *a3, const void **a4)
{
  *a1 = a2;
  *(_OWORD *)(a1 + 6) = 0u;
  uint64_t v40 = (uint64_t *)(a1 + 6);
  long long v7 = (int *)(a1 + 16);
  *(_OWORD *)(a1 + 2) = 0u;
  *(_OWORD *)(a1 + 1sub_2161A108C(&a9, 0) = 0u;
  sub_21629DE60(a2, 0, (void *)a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    if (!a3[1]) {
      return a1;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (!*((unsigned char *)a3 + 23))
  {
    return a1;
  }
  sub_216226684((char *)a3, (uint64_t)"r", 1, &v44);
  long long v8 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = 0uLL;
  int v9 = (std::__shared_weak_count *)*((void *)a1 + 2);
  *(_OWORD *)(a1 + 2) = v8;
  if (v9)
  {
    sub_2161121B0(v9);
    if (v44.__r_.__value_.__l.__size_) {
      sub_2161121B0((std::__shared_weak_count *)v44.__r_.__value_.__l.__size_);
    }
  }
  if (!*(void *)(*(void *)v7 + 8))
  {
    sub_216128C80((uint64_t)&v44);
    sub_216129E78(&v44, (uint64_t)"Failed to load character map for language ", 42);
    std::ostream::operator<<();
    exception = __cxa_allocate_exception(0x20uLL);
    sub_216178BC0((uint64_t)&v44.__r_.__value_.__l.__size_, &v42);
    sub_21629E7D0(exception, &v42);
    __cxa_throw(exception, (struct type_info *)&unk_26C6BB140, (void (*)(void *))sub_21629DF8C);
  }
  if (*a1 - 1 >= 2 && *a1 != 5)
  {
    sub_216128C80((uint64_t)&v44);
    int v38 = (void *)std::ostream::operator<<();
    sub_216129E78(v38, (uint64_t)" is unsupported language value.", 31);
    __int16 v39 = __cxa_allocate_exception(0x20uLL);
    sub_216178BC0((uint64_t)&v44.__r_.__value_.__l.__size_, &v41);
    sub_21629E7D0(v39, &v41);
    __cxa_throw(v39, (struct type_info *)&unk_26C6BB140, (void (*)(void *))sub_21629DF8C);
  }
  uint64_t v10 = 0;
  uint64_t v11 = **((void **)a1 + 1);
  *((void *)a1 + 6) = v11;
  *((void *)a1 + 7) = v11 + *(unsigned int *)(v11 + 4);
  do
  {
    char v12 = "";
    if (v10 <= 2) {
      char v12 = off_26426E438[v10];
    }
    sub_21610B834(&v51, v12);
    std::string::size_type v13 = v53;
    unsigned __int8 v14 = v53;
    if ((v53 & 0x80u) != 0) {
      std::string::size_type v13 = v52;
    }
    if (v13)
    {
      if (*((char *)a4 + 23) >= 0) {
        size_t v15 = *((unsigned __int8 *)a4 + 23);
      }
      else {
        size_t v15 = (size_t)a4[1];
      }
      sub_21612A88C((uint64_t)&v44, v15 + 1);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFStringRef v16 = &v44;
      }
      else {
        CFStringRef v16 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if (v15)
      {
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v17 = a4;
        }
        else {
          uint64_t v17 = *a4;
        }
        memmove(v16, v17, v15);
      }
      *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 47;
      if ((v53 & 0x80u) == 0) {
        uint64_t v18 = (const std::string::value_type *)&v51;
      }
      else {
        uint64_t v18 = v51;
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v19 = v53;
      }
      else {
        std::string::size_type v19 = v52;
      }
      CFStringRef v20 = std::string::append(&v44, v18, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      int64_t v50 = v20->__r_.__value_.__r.__words[2];
      long long v49 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      unsigned int v22 = *a1;
      v44.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
      v44.__r_.__value_.__l.__size_ = 0x40000000;
      v44.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_2161A0748;
      uint64_t v45 = &unk_264266C08;
      unsigned int v47 = v22;
      unsigned int v46 = &v49;
      sub_21619FED8((char *)&v49, (uint64_t)&v44, 0, &v48);
      if ((void)v48)
      {
        unsigned int v23 = *a1;
        if (*a1 == 1 || v23 == 5 || v23 == 2) {
          (*(void (**)(void))(*(void *)v48 + 48))();
        }
        sub_2162294C4(v40, &v48);
      }
      else
      {
        if (!v10)
        {
          sub_216128C80((uint64_t)&v44);
          unint64_t v33 = sub_216129E78(&v44, (uint64_t)"Failed to open dictionary ", 26);
          if (v50 >= 0) {
            uint64_t v34 = &v49;
          }
          else {
            uint64_t v34 = (long long *)v49;
          }
          if (v50 >= 0) {
            uint64_t v35 = HIBYTE(v50);
          }
          else {
            uint64_t v35 = *((void *)&v49 + 1);
          }
          sub_216129E78(v33, (uint64_t)v34, v35);
          unint64_t v36 = __cxa_allocate_exception(0x20uLL);
          sub_216178BC0((uint64_t)&v44.__r_.__value_.__l.__size_, &v43);
          sub_21629E7D0(v36, &v43);
          __cxa_throw(v36, (struct type_info *)&unk_26C6BB140, (void (*)(void *))sub_21629DF8C);
        }
        uint64_t v24 = sub_2162769A4();
        if (v50 >= 0) {
          CFIndex v31 = &v49;
        }
        else {
          LOBYTE(v31) = v49;
        }
        sub_21627707C((uint64_t)v24, "Failed to open dictionary : %s", v25, v26, v27, v28, v29, v30, (char)v31);
      }
      if (*((void *)&v48 + 1)) {
        sub_2161121B0(*((std::__shared_weak_count **)&v48 + 1));
      }
      if (SHIBYTE(v50) < 0) {
        operator delete((void *)v49);
      }
      unsigned __int8 v14 = v53;
    }
    if ((v14 & 0x80) != 0) {
      operator delete(v51);
    }
    ++v10;
  }
  while (v10 != 3);
  return a1;
}

void sub_21629DD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      sub_21613EA7C((uint64_t)&a30);
      uint64_t v40 = *(std::__shared_weak_count **)(v35 + 72);
      if (v40) {
        sub_2161121B0(v40);
      }
      *(void *)(v38 - 16sub_2161A108C(&a9, 0) = a11;
      sub_2161FB708((void ***)(v38 - 160));
      long long v41 = *(std::__shared_weak_count **)(v35 + 16);
      if (v41) {
        sub_2161121B0(v41);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

void sub_21629DE60(unsigned int a1@<W0>, int a2@<W1>, void *a3@<X8>)
{
  CFURLRef v6 = sub_2161E2A24(a1);
  long long v7 = (unsigned __int8 *)sub_21610B834(&v14, v6);
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  char v13 = 0;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  v8[2] = sub_21629EC2C;
  void v8[3] = &unk_264267088;
  v8[4] = &v10;
  unsigned int v9 = a1;
  sub_21629E8DC(v7, (uint64_t)v8, 0, a3);
  if (a2 && !*((unsigned char *)v11 + 24)) {
    sub_21629ECA8();
  }
  _Block_object_dispose(&v10, 8);
  if (v15 < 0) {
    operator delete(v14);
  }
}

void sub_21629DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  uint64_t v11 = *(std::__shared_weak_count **)(v8 + 8);
  if (v11) {
    sub_2161121B0(v11);
  }
  _Block_object_dispose(va, 8);
  if (*(char *)(v9 - 33) < 0) {
    operator delete(*(void **)(v9 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_21629DF8C(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C6C6B20;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

void sub_21629DFEC(unint64_t a1@<X0>, void *a2@<X8>)
{
  CFURLRef v4 = (uint64_t *)sub_2162D8C20();
  CFURLRef v5 = (const UInt8 *)sub_2162D8CB8(v4, a1, off_26797C900[0], @"sys.dic");
  int v6 = *((char *)v5 + 23);
  if (v6 >= 0) {
    long long v7 = v5;
  }
  else {
    long long v7 = *(const UInt8 **)v5;
  }
  if (v6 >= 0) {
    CFIndex v8 = v5[23];
  }
  else {
    CFIndex v8 = *((void *)v5 + 1);
  }
  CFURLRef v9 = CFURLCreateFromFileSystemRepresentation(0, v7, v8, 0);
  if (v9)
  {
    CFURLRef v10 = v9;
    CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, v9);
    CFStringRef v12 = CFURLCopyFileSystemPath(PathComponent, kCFURLPOSIXPathStyle);
    sub_2161E3AE8(v12, a2);
    if (v12) {
      CFRelease(v12);
    }
    if (PathComponent) {
      CFRelease(PathComponent);
    }
    CFRelease(v10);
  }
  else
  {
    sub_21610B834(a2, "");
  }
}

void sub_21629E0D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_21629E0F0(unsigned int *a1, unint64_t a2)
{
  CFURLRef v4 = (uint64_t *)sub_2162D8C20();
  CFURLRef v5 = sub_2162D8CB8(v4, a2, off_26797C900[0], off_26797C890[0]);
  sub_21629DFEC(a2, __p);
  sub_21629D854(a1, a2, v5, (const void **)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_21629E180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21629E19C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_2161121B0(v2);
  }
  CFURLRef v5 = (void **)(a1 + 24);
  sub_2161FB708(&v5);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_2161121B0(v3);
  }
  return a1;
}

uint64_t sub_21629E1F0(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (v2 == 14)
  {
    if (v3 >= 0) {
      char v13 = (uint64_t *)a1;
    }
    else {
      char v13 = *(uint64_t **)a1;
    }
    uint64_t v14 = *v13;
    uint64_t v15 = *(uint64_t *)((char *)v13 + 6);
    if (v14 == 0x656D656C70707573 && v15 == 0x6369642E746E656DLL) {
      return 1;
    }
LABEL_34:
    sub_216128C80((uint64_t)&v23);
    int v17 = *(char *)(a1 + 23);
    if (v17 >= 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = *(void *)a1;
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v19 = *(void *)(a1 + 8);
    }
    CFStringRef v20 = sub_216129E78(&v23, v18, v19);
    sub_216129E78(v20, (uint64_t)" is not a recognized source dictionary name.", 44);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_216178BC0((uint64_t)&v24, &v22);
    sub_21629E7D0(exception, &v22);
    __cxa_throw(exception, (struct type_info *)&unk_26C6BB140, (void (*)(void *))sub_21629DF8C);
  }
  if (v2 == 9)
  {
    if (v3 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    uint64_t v10 = *(void *)v9;
    int v11 = *(unsigned __int8 *)(v9 + 8);
    if (v10 == 0x69642E646578696DLL && v11 == 99) {
      return 2;
    }
    goto LABEL_34;
  }
  if (v2 != 7) {
    goto LABEL_34;
  }
  CFURLRef v4 = v3 >= 0 ? (int *)a1 : *(int **)a1;
  int v5 = *v4;
  int v6 = *(int *)((char *)v4 + 3);
  if (v5 != 779319667 || v6 != 1667851310) {
    goto LABEL_34;
  }
  return 0;
}

void sub_21629E394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_21613EA7C((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_21629E3DC(char a1, unsigned int a2)
{
  if (a2 >= 0x200000)
  {
    sub_216128C80((uint64_t)&v6);
    sub_216129E78(&v6, (uint64_t)"Token offset ", 13);
    int v3 = (void *)std::ostream::operator<<();
    sub_216129E78(v3, (uint64_t)" is out of range. The max offset value is 0x1FFFFF.", 51);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_216178BC0((uint64_t)&v7, &v5);
    sub_21629E7D0(exception, &v5);
    __cxa_throw(exception, (struct type_info *)&unk_26C6BB140, (void (*)(void *))sub_21629DF8C);
  }
  return ((a1 & 3) << 22) | a2;
}

void sub_21629E4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_21613EA7C((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

BOOL sub_21629E4F0(const char *a1, const void **a2)
{
  __ptr[0] = (unint64_t)((unsigned char *)a2[1] - (unsigned char *)*a2) >> 2;
  __ptr[1] = 8;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v3 = fopen(a1, "w+");
  if (!v3) {
    return 0;
  }
  CFURLRef v4 = v3;
  if (fwrite(__ptr, 8uLL, 1uLL, v3))
  {
    long long v5 = *a2;
    uint64_t v6 = a2[1];
    if (v6 == *a2)
    {
      sub_21617A878((uint64_t)a2, 1uLL);
      long long v5 = *a2;
      uint64_t v6 = a2[1];
    }
    BOOL v7 = fwrite(v5, 4uLL, (v6 - (unsigned char *)v5) >> 2, v4) >= ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 2;
  }
  else
  {
    BOOL v7 = 0;
  }
  fclose(v4);
  return v7;
}

uint64_t sub_21629E5C4(void *a1, unsigned int *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = a3;
  uint64_t v6 = 0;
  do
  {
    BOOL v7 = (unsigned int *)a1[6];
    if (!v7) {
      break;
    }
    unsigned int v9 = *a2++;
    uint64_t v8 = v9;
    if (*v7 <= v9) {
      break;
    }
    unint64_t v10 = *(unsigned int *)(a1[7] + 4 * v8);
    uint64_t v11 = (v10 >> 22) & 3;
    if (!v10 || v11 == 3) {
      break;
    }
    sub_216350C88(*(void **)(a1[3] + 16 * v11), v10 & 0x1FFFFF);
    v6 += v13;
    --v3;
  }
  while (v3);
  return v6;
}

CFStringRef sub_21629E658(void *a1, unsigned int a2)
{
  uint64_t v2 = (unsigned int *)a1[6];
  if (!v2 || *v2 <= a2) {
    return 0;
  }
  unint64_t v3 = *(unsigned int *)(a1[7] + 4 * a2);
  uint64_t v4 = (v3 >> 22) & 3;
  if (!v3 || v4 == 3) {
    return 0;
  }
  sub_216350C88(*(void **)(a1[3] + 16 * v4), v3 & 0x1FFFFF);
  if (!v7) {
    return 0;
  }

  return sub_21619A5CC();
}

CFStringRef sub_21629E6F4(void *a1, unsigned int a2)
{
  uint64_t v2 = (unsigned int *)a1[6];
  if (!v2 || *v2 <= a2) {
    return 0;
  }
  unint64_t v3 = *(unsigned int *)(a1[7] + 4 * a2);
  uint64_t v4 = (v3 >> 22) & 3;
  if (!v3 || v4 == 3) {
    return 0;
  }
  uint64_t v7 = (const UniChar *)sub_216350C88(*(void **)(a1[3] + 16 * v4), v3 & 0x1FFFFF);
  if (!v8) {
    return 0;
  }

  return CFStringCreateWithCharacters(0, v7, v8);
}

uint64_t sub_21629E77C(void *a1, unsigned int a2)
{
  uint64_t v2 = (unsigned int *)a1[6];
  if (v2
    && *v2 > a2
    && (unint64_t v3 = *(unsigned int *)(a1[7] + 4 * a2), v3)
    && (uint64_t v4 = (v3 >> 22) & 3, v4 != 3))
  {
    return *(void *)(*(void *)(a1[3] + 16 * v4) + 56) + 12 * (v3 & 0x1FFFFF);
  }
  else
  {
    return 0;
  }
}

void *sub_21629E7D0(void *a1, long long *a2)
{
  *a1 = &unk_26C6C6B20;
  unint64_t v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3[2] = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v3 = v4;
  }
  return a1;
}

void sub_21629E838(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_21629E84C(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C6C6B20;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21629E8C0(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_21629E8DC(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797C758, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797C758))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797C7A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797C7A0))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797C760, &dword_2160F5000);
    __cxa_guard_release(&qword_26797C7A0);
  }
  uint64_t v21 = 0;
  long long v22 = 0;
  std::mutex::lock(&stru_26797C760);
  CFIndex v8 = sub_21618241C((void *)qword_26797C750, a1);
  unsigned int v9 = v8;
  if (!v8
    || (unint64_t v10 = (std::__shared_weak_count *)*((void *)v8 + 6)) == 0
    || (v10->__shared_owners_ != -1 ? (BOOL v11 = a3 == 0) : (BOOL v11 = 0), !v11))
  {
    CFStringRef v12 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, a1);
    uint64_t v14 = sub_2162D1CE4(0xDu);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v15 = v14;
      if (os_signpost_enabled(v14))
      {
        if ((a1[23] & 0x80u) == 0) {
          CFStringRef v16 = a1;
        }
        else {
          CFStringRef v16 = *(unsigned __int8 **)a1;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v16;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "SingletonResourceManagerLoad", "Load resource with key: [%s]", buf, 0xCu);
      }
    }
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    sub_21629ED3C((uint64_t)&v21, v17);
  }
  uint64_t v18 = std::__shared_weak_count::lock(v10);
  if (v18) {
    uint64_t v19 = *((void *)v9 + 5);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v21 = v19;
  long long v22 = v18;
  std::mutex::unlock(&stru_26797C760);
  CFStringRef v20 = v22;
  *a4 = v21;
  a4[1] = v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v22) {
      sub_2161121B0(v22);
    }
  }
}

void sub_21629EBCC(_Unwind_Exception *a1)
{
}

void sub_21629EC2C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  operator new();
}

void sub_21629EC84(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

void sub_21629ECA8()
{
}

void sub_21629ED18(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1020C404C310C12);
  _Unwind_Resume(a1);
}

void sub_21629ED3C(uint64_t a1, uint64_t a2)
{
  sub_21629ED84(&v2, a2);
}

void sub_21629ED84(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21629EDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_21629EE9C((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21629EE18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21629EE50(uint64_t a1)
{
}

uint64_t sub_21629EE58(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC0E8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_21629EE9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v2 = (void *)(a2 + 8);
    uint64_t v3 = *(void *)(a2 + 8);
    *long long v2 = 0;
    if (v3) {
      sub_21629EEFC((uint64_t)v2, v3);
    }
    JUMPOUT(0x2166CA800);
  }
}

void sub_21629EEFC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_21619A724(a2 + 24, *(void **)(a2 + 32));
    sub_21612A250(a2, *(void **)(a2 + 8));
    JUMPOUT(0x2166CA800);
  }
}

void sub_21629EF60(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_21629EFBC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1020C404C310C12);
  _Unwind_Resume(a1);
}

void sub_21629EFE0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, CFTypeRef cf)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_21629686C(a1, cf, 2);
}

void sub_21629F900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  sub_21626012C(&a14);
  sub_2162A9010(v16);
  sub_2161DEA90(v15);
  uint64_t v18 = v14[25];
  v14[25] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v14[24];
  v14[24] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_2162973E0(v14 + 23, 0);
  sub_2162973E0(v14 + 22, 0);
  sub_216175BF4(&a9);
  sub_216175BF4(&a9);
  sub_216297064(v14);
  _Unwind_Resume(a1);
}

BOOL sub_21629FB98(uint64_t a1)
{
  v13[2] = *MEMORY[0x263EF8340];
  sub_216297164((uint64_t *)a1);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    sub_21629FCA4(a1);
    char v3 = 0;
    uint64_t v4 = 0;
    v13[0] = @"Lexierra_ja_JP-dynamic-text.dat";
    v13[1] = @"LexicalLearning_ja_JP.dat";
    do
    {
      char v5 = v3;
      CFURLRef v6 = sub_2161E26B0(*(const __CFURL **)(a1 + 40), (const __CFString *)v13[v4]);
      if (v6)
      {
        CFURLRef v7 = v6;
        sub_2161E4D20((BOOL)v6);
        CFRelease(v7);
      }
      char v3 = 1;
      uint64_t v4 = 1;
    }
    while ((v5 & 1) == 0);
    CFURLRef v8 = sub_2161E26B0(*(const __CFURL **)(a1 + 40), @"Lexierra_ja_JP-dynamic-text.dat");
    if (v8)
    {
      CFURLRef v9 = v8;
      if (sub_2161E1A54(v8)) {
        sub_21625922C((uint64_t)v9, v10, v11);
      }
      CFRelease(v9);
    }
    sub_21625D88C(1, 1);
  }
  return v2 != 0;
}

uint64_t sub_21629FCA4(uint64_t result)
{
  if (*(unsigned char *)(result + 96))
  {
    uint64_t v1 = result;
    if (!*(void *)(result + 176))
    {
      if (!*(void *)(result + 8) && *(void *)(result + 40)) {
        (*(void (**)(uint64_t))(*(void *)result + 16))(result);
      }
      CFURLRef v2 = *(const __CFURL **)(v1 + 40);
      if (v2)
      {
        CFURLRef v36 = sub_2161E26B0(v2, @"DynamicBigramPhraseLexicon_ja_JP.db");
        if (v36) {
          operator new();
        }
        CFURLRef v2 = *(const __CFURL **)(v1 + 40);
      }
      CFURLRef v36 = sub_2161E26B0(v2, @"DynamicPersonNameLexicon_ja_JP.db");
      if (v36) {
        operator new();
      }
      sub_2162A907C(v1 + 376, *(const __CFURL **)(v1 + 40));
      sub_2162229D0(*(void *)(v1 + 8), 0, 0, 0x200u, (uint64_t)&v36);
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v30 = 0;
      CFIndex v31 = 0;
      unint64_t v32 = 0;
      sub_2162A0268((uint64_t *)&v33, (v37 - v36) >> 5);
      sub_2162A0268((uint64_t *)&v30, (v37 - v36) >> 5);
      uint64_t v28 = v1;
      uint64_t v3 = (uint64_t)v36;
      CFURLRef v4 = v37;
      if (v36 != v37)
      {
        char v5 = off_26797C580;
        CFURLRef v29 = v37;
        do
        {
          uint64_t v6 = sub_216222F20(v3, *v5);
          uint64_t v7 = sub_216222F20(v3, off_26797C588);
          CFURLRef v8 = (void *)sub_216222F20(v3, off_26797C568[0]);
          uint64_t v9 = *(void *)(v6 + 8) - *(void *)v6;
          unint64_t v10 = v8[1] - *v8;
          if ((unint64_t)((v9 >> 1) - 6) >= 0xFFFFFFFFFFFFFFFCLL
            && v10 != 2
            && ((unint64_t)v9 < 9 || v10 >= 6))
          {
            uint64_t v14 = *(unsigned __int16 **)v7;
            uint64_t v13 = *(void *)(v7 + 8);
            if (v13 == *(void *)v7) {
              goto LABEL_32;
            }
            uint64_t v15 = v5;
            BOOL v16 = 0;
            uint64_t v17 = 0;
            unint64_t v18 = (v13 - (uint64_t)v14) >> 1;
            do
            {
              UBlockCode Code = ublock_getCode(v14[v17]);
              if ((Code - 58) > 0x25 || ((1 << (Code - 58)) & 0x3000203003) == 0) {
                break;
              }
              BOOL v16 = ++v17 >= v18;
            }
            while (v18 != v17);
            char v5 = v15;
            CFURLRef v4 = v29;
            if (v16)
            {
LABEL_32:
              uint64_t v21 = v34;
              if ((unint64_t)v34 >= v35)
              {
                uint64_t v22 = sub_2162A6770((uint64_t *)&v33, v6);
              }
              else
              {
                void *v34 = 0;
                v21[1] = 0;
                v21[2] = 0;
                sub_216182F50(v21, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 1);
                uint64_t v22 = (uint64_t)(v21 + 3);
              }
              uint64_t v34 = (void *)v22;
              uint64_t v23 = v31;
              if ((unint64_t)v31 >= v32)
              {
                uint64_t v24 = sub_2162A6770((uint64_t *)&v30, v7);
              }
              else
              {
                *CFIndex v31 = 0;
                v23[1] = 0;
                v23[2] = 0;
                sub_216182F50(v23, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 1);
                uint64_t v24 = (uint64_t)(v23 + 3);
              }
              CFIndex v31 = (void *)v24;
            }
          }
          v3 += 32;
        }
        while ((const __CFURL *)v3 != v4);
      }
      uint64_t v25 = *(void *)(v28 + 192);
      if (v25) {
        sub_2161B9900(v25);
      }
      sub_216253C2C((uint64_t *)(v28 + 192), (uint64_t *)&v33, &v30, 200, 200, 0, 10000);
      uint64_t v38 = (void ***)&v30;
      sub_21613F444((void ***)&v38);
      uint64_t v30 = &v33;
      sub_21613F444((void ***)&v30);
      unint64_t v33 = &v36;
      sub_2161921F0((void ***)&v33);
      uint64_t v26 = *(void *)(v28 + 200);
      if (!v26) {
        operator new();
      }
      sub_2161B9900(v26);
      uint64_t v27 = *(void *)(v28 + 200);
      return sub_2161B8210(v27, 200, 0, 7);
    }
  }
  return result;
}

void sub_2162A0104(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F3C4023F7E159);
  _Unwind_Resume(a1);
}

uint64_t sub_2162A01D4()
{
  return 1;
}

unsigned __int8 *sub_2162A01DC(uint64_t *a1)
{
  sub_2162973E0(a1 + 1, 0);
  sub_216175C48(a1 + 2);
  sub_2162973E0(a1 + 22, 0);
  sub_2162973E0(a1 + 23, 0);
  sub_2162973E0(a1 + 50, 0);
  sub_2162973E0(a1 + 51, 0);
  sub_2161B9900(a1[24]);
  sub_2161B9900(a1[25]);

  return sub_21625D88C(1, 0);
}

uint64_t sub_2162A0268(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21610CB04();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216129BFC(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_2162A661C(a1, v7);
    return sub_216140FCC((uint64_t)v7);
  }
  return result;
}

void sub_2162A0308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFString *sub_2162A031C()
{
  return @"DynamicPhraseLexicon_ja_JP.db";
}

__CFArray *sub_2162A0328(uint64_t a1, const __CFURL *a2)
{
  if (!a2) {
    return 0;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFURLRef v4 = sub_2161E27E0(a2, @"PhraseLearning_ja_JP.dictionary");
  if (v4) {
    CFArrayAppendValue(Mutable, v4);
  }
  CFURLRef v5 = sub_2161E27E0(a2, @"PhraseLearning_ja_JP.db");
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFArrayAppendValue(Mutable, v5);
  }
  CFURLRef v6 = sub_2161E27E0(a2, @"BigramLearning_ja_JP.dictionary");
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFArrayAppendValue(Mutable, v6);
  }
  CFURLRef v7 = sub_2161E27E0(a2, @"BigramLearning_ja_JP.db");
  if (v6) {
    CFRelease(v6);
  }
  if (v7)
  {
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
  }
  return Mutable;
}

void sub_2162A0460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFArray *sub_2162A0478()
{
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(Mutable, @"LexicalLearning_ja_JP.db");
  CFArrayAppendValue(Mutable, @"Lexierra_ja_JP-dynamic-text.dat");
  CFArrayAppendValue(Mutable, @"LexicalLearning_ja_JP.dat");
  CFArrayAppendValue(Mutable, @"DynamicBigramPhraseLexicon_ja_JP.db");
  CFArrayAppendValue(Mutable, @"BigramLearning_ja_JP.db");
  CFArrayAppendValue(Mutable, @"BigramLearning_ja_JP.dictionary");
  CFArrayAppendValue(Mutable, @"PhraseLearning_ja_JP.db");
  CFArrayAppendValue(Mutable, @"PhraseLearning_ja_JP.dictionary");
  return Mutable;
}

uint64_t sub_2162A052C(void *a1)
{
  sub_216298304((uint64_t)a1);
  uint64_t v2 = a1[22];
  if (v2) {
    sub_2162335C8(v2);
  }
  uint64_t v3 = a1[23];
  if (v3) {
    sub_2162335C8(v3);
  }
  sub_2162AE6D0((uint64_t)(a1 + 47));
  uint64_t result = a1[30];
  if (result)
  {
    return sub_2163658D4(result);
  }
  return result;
}

CFStringRef sub_2162A0594(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  CFStringRef result = *(const __CFString **)(a2 + 16);
  if (!result) {
    return result;
  }
  if (!*(void *)(a2 + 8)) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(result);
  unint64_t v6 = CFStringGetLength(*(CFStringRef *)(a2 + 8));
  CFStringRef result = 0;
  BOOL v7 = (unint64_t)(Length - 33) < 0xFFFFFFFFFFFFFFE0 || v6 == 0;
  if (v7 || v6 > 0x20) {
    return result;
  }
  CFStringRef v8 = *(const __CFString **)(a2 + 16);
  if (v8)
  {
    CFIndex v9 = CFStringGetLength(*(CFStringRef *)(a2 + 16));
    if (v9)
    {
      unint64_t v10 = v9;
      int CharacterAtIndex = CFStringGetCharacterAtIndex(v8, 0);
      if ((CharacterAtIndex - 48) < 0xA || (unsigned __int16)(CharacterAtIndex + 240) <= 9u)
      {
        CFIndex v12 = 1;
        do
        {
          unint64_t v13 = v12;
          if (v10 == v12) {
            break;
          }
          int v14 = CFStringGetCharacterAtIndex(v8, v12);
          CFIndex v12 = v13 + 1;
        }
        while ((v14 - 48) < 0xA || (unsigned __int16)(v14 + 240) < 0xAu);
        if (v13 >= v10)
        {
          CFStringRef v15 = *(const __CFString **)(a2 + 8);
          if (v15)
          {
            CFIndex v16 = CFStringGetLength(*(CFStringRef *)(a2 + 8));
            if (v16)
            {
              unint64_t v17 = v16;
              int v18 = CFStringGetCharacterAtIndex(v15, 0);
              unsigned int v19 = (unsigned __int16)(v18 + 240);
              if ((v18 - 48) >= 0xA)
              {
                BOOL v20 = v19 >= 9;
                BOOL v21 = v19 == 9;
              }
              else
              {
                BOOL v20 = 0;
                BOOL v21 = 0;
              }
              if (v21 || !v20)
              {
                CFIndex v22 = 1;
                do
                {
                  unint64_t v23 = v22;
                  if (v17 == v22) {
                    break;
                  }
                  int v24 = CFStringGetCharacterAtIndex(v15, v22);
                  CFIndex v22 = v23 + 1;
                }
                while ((v24 - 48) < 0xA || (unsigned __int16)(v24 + 240) < 0xAu);
                if (v23 >= v17) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  CFStringRef result = (const __CFString *)sub_2161EDCBC(*(const __CFString **)(a2 + 16), *(const __CFString **)(a2 + 8));
  if (result)
  {
    uint64_t v25 = sub_2162D1CE4(6u);
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG);
    if (v26)
    {
      uint64_t v28 = *(void *)(a2 + 8);
      uint64_t v27 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 138412546;
      uint64_t v30 = v27;
      __int16 v31 = 2112;
      uint64_t v32 = v28;
      _os_log_debug_impl(&dword_2160F5000, v25, OS_LOG_TYPE_DEBUG, "[MJL::registerToLearningDictionary] Learning phrase %@ (%@)", buf, 0x16u);
    }
    sub_2162A0A00(v26, *(void *)(a1 + 8), a2);
  }
  return result;
}

void sub_2162A0940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C80BDFB0063);
  }
  if (v10) {
    MEMORY[0x2166CA7C0](v10, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162A09A0(void *a1)
{
  *a1 = &unk_26C6BDE50;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  return sub_21629D0B8(a1);
}

void sub_2162A0A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = 0;
  CFURLRef v5 = v6;
  CFStringRef v3 = *(const __CFString **)(a3 + 8);
  sub_21610B834(&__p, off_26797C580[0]);
  sub_216221EB8((int)&v5, v3);
}

void sub_2162A0B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16)
{
}

void sub_2162A0BD4(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) >= 2)
  {
    CFIndex v2 = 0;
    CFURLRef v36 = 0;
    CFURLRef v37 = 0;
    uint64_t v38 = 0;
    while (1)
    {
      uint64_t Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
      if (v2 >= Count) {
        break;
      }
      CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v2);
      BOOL v7 = sub_2161F3B4C(ValueAtIndex, v5, v6);
      CFStringRef v8 = v7;
      CFIndex v9 = v37;
      if (v37 >= v38)
      {
        uint64_t v11 = (v37 - (unsigned char *)v36) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          sub_21610CB04();
        }
        unint64_t v12 = (v38 - (unsigned char *)v36) >> 2;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        if ((unint64_t)(v38 - (unsigned char *)v36) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          int v14 = (char *)sub_2160FFAA8((uint64_t)&v38, v13);
        }
        else {
          int v14 = 0;
        }
        CFStringRef v15 = &v14[8 * v11];
        *(void *)CFStringRef v15 = v8;
        uint64_t v10 = v15 + 8;
        unint64_t v17 = (char *)v36;
        CFIndex v16 = v37;
        if (v37 != v36)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          CFIndex v16 = (char *)v36;
        }
        CFURLRef v36 = v15;
        CFURLRef v37 = v10;
        uint64_t v38 = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)CFURLRef v37 = v7;
        uint64_t v10 = v9 + 8;
      }
      CFURLRef v37 = v10;
      ++v2;
    }
    std::string __p = 0;
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    unsigned int v19 = v36;
    int64_t v20 = v37 - (unsigned char *)v36;
    if (v37 != v36)
    {
      if (v20 < 0) {
        sub_21610CB04();
      }
      std::string __p = sub_2160FFAA8((uint64_t)&v35, v20 >> 3);
      unint64_t v35 = (char *)__p + 8 * v21;
      uint64_t Count = (uint64_t)memmove(__p, v19, v20);
      uint64_t v34 = (char *)__p + 8 * (v20 >> 3);
    }
    CFIndex v22 = (__CFString *)sub_2162A1128(Count, (uint64_t **)&__p);
    if (__p)
    {
      uint64_t v34 = (char *)__p;
      operator delete(__p);
    }
    unint64_t v23 = (char *)v36;
    int v24 = v37;
    double v25 = 0.0;
    while (v23 != v24)
    {
      double v25 = v25 + (*(double (**)(void))(**(void **)v23 + 392))(*(void *)v23);
      v23 += 8;
    }
    (*((void (**)(__CFString *, double))v22->isa + 50))(v22, v25);
    (*((void (**)(__CFString *))v22->isa + 68))(v22);
    if (v26 < 5)
    {
      uint64_t v28 = sub_2162D1CE4(6u);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = (*((uint64_t (**)(__CFString *))v22->isa + 3))(v22);
        uint64_t v30 = (*((uint64_t (**)(__CFString *))v22->isa + 29))(v22);
        *(_DWORD *)buf = 138412546;
        uint64_t v40 = v29;
        __int16 v41 = 2112;
        uint64_t v42 = v30;
        _os_log_debug_impl(&dword_2160F5000, v28, OS_LOG_TYPE_DEBUG, "[MJL::combinePartialCandidatesAndRegister] Registering as a single phrase: %@ (%@)", buf, 0x16u);
      }
      sub_2162A1DE0(a1, (uint64_t)v22, 0, 0, 1, 0);
    }
    else
    {
      *(void *)(a1 + 264) = *(void *)(a1 + 256);
      *(void *)(a1 + 288) = *(void *)(a1 + 280);
      *(void *)(a1 + 312) = *(void *)(a1 + 304);
      *(void *)(a1 + 336) = *(void *)(a1 + 328);
      *(void *)(a1 + 36sub_2161A108C(&a9, 0) = *(void *)(a1 + 352);
      sub_2162EF56C((void *)(a1 + 248));
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
      uint64_t v27 = sub_2162D1CE4(6u);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = (*((uint64_t (**)(__CFString *))v22->isa + 3))(v22);
        uint64_t v32 = (*((uint64_t (**)(__CFString *))v22->isa + 29))(v22);
        *(_DWORD *)buf = 138412546;
        uint64_t v40 = v31;
        __int16 v41 = 2112;
        uint64_t v42 = v32;
        _os_log_debug_impl(&dword_2160F5000, v27, OS_LOG_TYPE_DEBUG, "[MJL::combinePartialCandidatesAndRegister] Registering as a phrase sequence: %@ (%@)", buf, 0x16u);
      }
      sub_2162A19A8(a1, v22, 0);
    }
    sub_2162A3314((void *)a1, v22, 1);
    (*((void (**)(__CFString *))v22->isa + 2))(v22);
    if (v36)
    {
      CFURLRef v37 = (char *)v36;
      operator delete(v36);
    }
  }
}

void sub_2162A1094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2162A1128(uint64_t a1, uint64_t **a2)
{
  CFIndex v2 = *a2;
  uint64_t v59 = a2[1];
  if (*a2 != v59)
  {
    CFIndex v76 = 0;
    BOOL v77 = 0;
    uint64_t v78 = 0;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    CFIndex v70 = 0;
    CFStringRef v71 = 0;
    uint64_t v72 = 0;
    std::string __p = 0;
    CFIndex v68 = 0;
    uint64_t v69 = 0;
    uint64_t v61 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = 0;
    CFIndex v66 = 0;
    CFRange v62 = 0;
    uint64_t v63 = 0;
    while (1)
    {
      uint64_t v3 = *v2;
      if ((*(uint64_t (**)(uint64_t))(*(void *)*v2 + 88))(*v2)) {
        break;
      }
      uint64_t v60 = v2;
      CFURLRef v4 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 544))(v3);
      uint64_t v6 = v5;
      int v7 = *(char *)(v3 + 87);
      if (v7 >= 0) {
        CFStringRef v8 = (_WORD *)(v3 + 64);
      }
      else {
        CFStringRef v8 = *(_WORD **)(v3 + 64);
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(v3 + 87);
      }
      else {
        uint64_t v9 = *(void *)(v3 + 72);
      }
      uint64_t v10 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 552))(v3);
      uint64_t v12 = v11;
      sub_2161BF794(v4, &v4[v6], (uint64_t)&v70);
      sub_2161BF794(v8, &v8[v9], (uint64_t)&v76);
      sub_2161BF794(v10, &v10[v12], (uint64_t)&v73);
      uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 304))(v3);
      if (v13[1] == *v13)
      {
        uint64_t v43 = v62;
      }
      else
      {
        unint64_t v14 = 0;
        do
        {
          __int16 v15 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v3 + 352))(v3, v14);
          __int16 v16 = v15;
          unint64_t v17 = v68;
          if (v68 >= v69)
          {
            unsigned int v19 = (char *)__p;
            uint64_t v20 = v68 - (unsigned char *)__p;
            if (v68 - (unsigned char *)__p <= -3) {
              sub_21610CB04();
            }
            uint64_t v21 = v20 >> 1;
            if (v69 - (unsigned char *)__p <= (unint64_t)((v20 >> 1) + 1)) {
              uint64_t v22 = v21 + 1;
            }
            else {
              uint64_t v22 = v69 - (unsigned char *)__p;
            }
            if ((unint64_t)(v69 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v23 = v22;
            }
            if (v23)
            {
              int v24 = (char *)sub_21610FD44((uint64_t)&v69, v23);
              unsigned int v19 = (char *)__p;
              unint64_t v17 = v68;
            }
            else
            {
              int v24 = 0;
            }
            double v25 = &v24[2 * v21];
            *(_WORD *)double v25 = v16;
            uint64_t v18 = v25 + 2;
            while (v17 != v19)
            {
              __int16 v26 = *((_WORD *)v17 - 1);
              v17 -= 2;
              *((_WORD *)v25 - 1) = v26;
              v25 -= 2;
            }
            std::string __p = v25;
            CFIndex v68 = v18;
            uint64_t v69 = &v24[2 * v23];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *(_WORD *)CFIndex v68 = v15;
            uint64_t v18 = v17 + 2;
          }
          CFIndex v68 = v18;
          __int16 v27 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v3 + 320))(v3, v14);
          __int16 v28 = v27;
          uint64_t v29 = v65;
          if (v65 >= v66)
          {
            uint64_t v31 = (char *)v64;
            uint64_t v32 = v65 - (unsigned char *)v64;
            if (v65 - (unsigned char *)v64 <= -3) {
              sub_21610CB04();
            }
            uint64_t v33 = v32 >> 1;
            if (v66 - (unsigned char *)v64 <= (unint64_t)((v32 >> 1) + 1)) {
              uint64_t v34 = v33 + 1;
            }
            else {
              uint64_t v34 = v66 - (unsigned char *)v64;
            }
            if ((unint64_t)(v66 - (unsigned char *)v64) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v35 = v34;
            }
            if (v35)
            {
              CFURLRef v36 = (char *)sub_21610FD44((uint64_t)&v66, v35);
              uint64_t v31 = (char *)v64;
              uint64_t v29 = v65;
            }
            else
            {
              CFURLRef v36 = 0;
            }
            CFURLRef v37 = &v36[2 * v33];
            *(_WORD *)CFURLRef v37 = v28;
            uint64_t v30 = v37 + 2;
            while (v29 != v31)
            {
              __int16 v38 = *((_WORD *)v29 - 1);
              v29 -= 2;
              *((_WORD *)v37 - 1) = v38;
              v37 -= 2;
            }
            uint64_t v64 = v37;
            unint64_t v65 = v30;
            CFIndex v66 = &v36[2 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(_WORD *)unint64_t v65 = v27;
            uint64_t v30 = v29 + 2;
          }
          unint64_t v65 = v30;
          uint64_t v39 = *v13 + 40 * v14;
          uint64_t v40 = v62;
          if (v62 >= v63)
          {
            std::string v44 = v61;
            unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v62 - v61) >> 3) + 1;
            if (v45 > 0x666666666666666) {
              sub_21618B344();
            }
            if (0x999999999999999ALL * ((v63 - v61) >> 3) > v45) {
              unint64_t v45 = 0x999999999999999ALL * ((v63 - v61) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v63 - v61) >> 3) >= 0x333333333333333) {
              unint64_t v46 = 0x666666666666666;
            }
            else {
              unint64_t v46 = v45;
            }
            if (v46)
            {
              unsigned int v47 = (char *)sub_21618B4A8((uint64_t)&v63, v46);
              std::string v44 = v61;
              uint64_t v40 = v62;
            }
            else
            {
              unsigned int v47 = 0;
            }
            long long v48 = &v47[8 * ((v62 - v61) >> 3)];
            long long v49 = *(_OWORD *)v39;
            long long v50 = *(_OWORD *)(v39 + 16);
            *((void *)v48 + 4) = *(void *)(v39 + 32);
            *(_OWORD *)long long v48 = v49;
            *((_OWORD *)v48 + 1) = v50;
            if (v40 == v44)
            {
              CFRange v54 = &v47[8 * ((v62 - v61) >> 3)];
            }
            else
            {
              long long v51 = &v47[8 * ((v62 - v61) >> 3)];
              do
              {
                long long v52 = *(_OWORD *)(v40 - 40);
                long long v53 = *(_OWORD *)(v40 - 24);
                CFRange v54 = v51 - 40;
                *((void *)v51 - 1) = *((void *)v40 - 1);
                *(_OWORD *)(v51 - 24) = v53;
                *(_OWORD *)(v51 - 4sub_2161A108C(&a9, 0) = v52;
                v40 -= 40;
                v51 -= 40;
              }
              while (v40 != v44);
            }
            uint64_t v43 = v48 + 40;
            uint64_t v61 = v54;
            uint64_t v63 = &v47[40 * v46];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            long long v41 = *(_OWORD *)v39;
            long long v42 = *(_OWORD *)(v39 + 16);
            *((void *)v62 + 4) = *(void *)(v39 + 32);
            *(_OWORD *)CFRange v62 = v41;
            *((_OWORD *)v62 + 1) = v42;
            uint64_t v43 = v62 + 40;
          }
          CFRange v62 = v43;
          ++v14;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13[1] - *v13) >> 3) > v14);
      }
      if ((*((_DWORD *)v43 - 10) - 5) < 0xFFFFFFFE)
      {
        if (v70)
        {
          if (v71 != v70 && *((_WORD *)v71 - 1) == 32)
          {
            v71 -= 2;
            if (*((_WORD *)v43 - 8)) {
              --*((_WORD *)v43 - 8);
            }
          }
        }
        if (v76)
        {
          if (v77 != v76 && *((_WORD *)v77 - 1) == 32)
          {
            v77 -= 2;
            if (*((_WORD *)v43 - 7)) {
              --*((_WORD *)v43 - 7);
            }
          }
        }
        if (v73)
        {
          if (v74 != v73 && *((_WORD *)v74 - 1) == 32)
          {
            v74 -= 2;
            if (*((_WORD *)v43 - 6)) {
              --*((_WORD *)v43 - 6);
            }
          }
        }
      }
      CFIndex v2 = v60 + 1;
      if (v60 + 1 == v59)
      {
        uint64_t v55 = **a2;
        uint64_t v56 = *(a2[1] - 1);
        (*(void (**)(uint64_t))(*(void *)v55 + 112))(v55);
        (*(void (**)(uint64_t))(*(void *)v56 + 408))(v56);
        (*(void (**)(uint64_t))(*(void *)v55 + 416))(v55);
        operator new();
      }
    }
    if (v61) {
      operator delete(v61);
    }
    if (v64)
    {
      unint64_t v65 = (char *)v64;
      operator delete(v64);
    }
    if (__p)
    {
      CFIndex v68 = (char *)__p;
      operator delete(__p);
    }
    if (v70)
    {
      CFStringRef v71 = (char *)v70;
      operator delete(v70);
    }
    if (v73)
    {
      uint64_t v74 = v73;
      operator delete(v73);
    }
    if (v76)
    {
      BOOL v77 = v76;
      operator delete(v76);
    }
  }
  return 0;
}

void sub_2162A1884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  MEMORY[0x2166CA800](v28, 0x10F3C4074548AAFLL);
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  uint64_t v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(void *)(v29 - 128) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(v29 - 112);
  if (v32)
  {
    *(void *)(v29 - 104) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void sub_2162A1944(void *a1)
{
  a1[33] = a1[32];
  a1[36] = a1[35];
  a1[39] = a1[38];
  a1[42] = a1[41];
  a1[45] = a1[44];
  sub_2162EF56C(a1 + 31);
  CFIndex v2 = (__CFArray *)a1[7];

  CFArrayRemoveAllValues(v2);
}

void sub_2162A19A8(uint64_t a1, __CFString *a2, char a3)
{
  if ((a3 & 1) != 0 || CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) > 0) {
    return;
  }
  if (!*(unsigned char *)sub_2161A2A80())
  {
    unint64_t v6 = sub_2161EE01C(*(void *)(a1 + 224), (uint64_t)a2);
    if (v6 < 3)
    {
      int v9 = 0;
      int v5 = 0;
      if (v6 != 2) {
        goto LABEL_10;
      }
    }
    else
    {
      int v7 = sub_2162A1DE0(a1, (uint64_t)a2, 3uLL, 0, 0, 0);
      int v8 = v7 | sub_2162A1DE0(a1, (uint64_t)a2, 3uLL, 1uLL, 0, 0);
      int v9 = v8 | sub_2162A1DE0(a1, (uint64_t)a2, 3uLL, 2uLL, 0, 0);
    }
    int v10 = sub_2162A1DE0(a1, (uint64_t)a2, 2uLL, 0, 0, 0);
    int v5 = v9 | v10 | sub_2162A1DE0(a1, (uint64_t)a2, 2uLL, 1uLL, 0, 0);
    goto LABEL_10;
  }
  int v5 = 0;
LABEL_10:
  if ((*((uint64_t (**)(__CFString *))a2->isa + 59))(a2))
  {
    CFStringRef v11 = (const __CFString *)(*((uint64_t (**)(__CFString *))a2->isa + 59))(a2);
    if (CFStringGetLength(v11)
      && ((*((void (**)(__CFString *))a2->isa + 68))(a2), v12)
      && (*((uint64_t (**)(__CFString *))a2->isa + 6))(a2))
    {
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v14 = (const __CFString *)(*((uint64_t (**)(__CFString *))a2->isa + 59))(a2);
      CFStringRef Copy = CFStringCreateCopy(v13, v14);
      __int16 v16 = (const UniChar *)(*((uint64_t (**)(__CFString *))a2->isa + 68))(a2);
      CFStringRef v18 = CFStringCreateWithCharacters(0, v16, v17);
      __int16 v19 = *(_WORD *)(*(void *)(*((uint64_t (**)(__CFString *))a2->isa + 38))(a2) + 30);
      uint64_t v20 = operator new(2uLL);
      *uint64_t v20 = v19;
      v22[1] = v20 + 1;
      v22[2] = v20 + 1;
      v22[0] = v20;
      sub_2162A6888(v23, Copy, v18, 0, 0, (uint64_t)v22, 1);
      operator delete(v20);
      unsigned int v21 = sub_2162A0594(a1, (uint64_t)v23);
      v23[0] = &unk_26C6BDE50;
      if (__p)
      {
        double v25 = __p;
        operator delete(__p);
      }
      sub_21629D0B8(v23);
    }
    else
    {
      unsigned int v21 = 0;
    }
  }
  else
  {
    unsigned int v21 = sub_2162A1DE0(a1, (uint64_t)a2, 1uLL, 0, 1, 1);
  }
  if ((v5 | v21) == 1 && os_variant_has_internal_diagnostics() && (sub_2162A4E6C(a1, a2) & 1) == 0) {
    sub_21629841C(a1, (uint64_t)a2);
  }

  sub_2162A3314((void *)a1, a2, 0);
}

void sub_2162A1DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2162A09A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162A1DE0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  if (!a2
    || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2) & 1) != 0)
  {
    char v9 = 0;
    return v9 & 1;
  }
  uint64_t v138 = a1;
  if (a5)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
    (*(void (**)(uint64_t))(*(void *)a2 + 544))(a2);
    if (v12)
    {
      BOOL v13 = 0;
      for (i = 0; i != v12; BOOL v13 = i >= v12)
      {
        int v15 = *(unsigned __int16 *)(v11 + 2 * i);
        if ((v15 - 12449) >= 0x5A && v15 != 12540 && v15 != 12316) {
          break;
        }
        ++i;
      }
      if (!v13)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 184))(a2)) {
          goto LABEL_20;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2) == 79)
        {
          if (*(char *)(a2 + 119) < 0) {
            uint64_t v19 = *(void *)(a2 + 104);
          }
          else {
            LOWORD(v19) = *(unsigned __int8 *)(a2 + 119);
          }
          if ((unsigned __int16)v19 <= 8u)
          {
            uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
            (*(void (**)(uint64_t))(*(void *)a2 + 544))(a2);
            if (!v21) {
              goto LABEL_20;
            }
            unint64_t v22 = v21;
            BOOL v23 = 0;
            for (j = 0; j != v22; BOOL v23 = j >= v22)
            {
              UBlockCode Code = ublock_getCode(*(unsigned __int16 *)(v20 + 2 * j));
              if ((Code - 58) > 0x25 || ((1 << (Code - 58)) & 0x3000203003) == 0) {
                break;
              }
              ++j;
            }
            if (v23)
            {
LABEL_20:
              CFStringRef v18 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
              (*(void (**)(uint64_t))(*(void *)a2 + 232))(a2);
              if (*(void *)(a1 + 184))
              {
                *(void *)&__dst[8] = 0;
                *(void *)&__dst[16] = 0;
                *(void *)__dst = &__dst[8];
                sub_21610B834(v168, off_26797C7A8[0]);
                sub_216221EB8((int)__dst, v18);
              }
            }
          }
        }
      }
    }
    int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
    int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 408))(a2);
    BOOL v30 = (v27 - 65) < 0x15 && ((0x107A01u >> (v27 - 65)) & 1) != 0 || v27 == 80 && v28 == 0;
    int v134 = v30;
  }
  else
  {
    int v134 = 0;
  }
  uint64_t v31 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  uint64_t v34 = sub_2162D1CE4(6u);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v119 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    uint64_t v120 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    v121 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2);
    *(_DWORD *)__dst = 138414082;
    *(void *)&__dst[4] = v119;
    *(_WORD *)&__dst[12] = 2112;
    *(void *)&__dst[14] = v120;
    *(_WORD *)&__dst[22] = 2112;
    int v156 = v121;
    __int16 v157 = 2048;
    *(void *)int v158 = a3;
    *(_WORD *)&v158[8] = 2048;
    *(void *)&v158[10] = a4;
    *(_WORD *)&v158[18] = 1024;
    *(_DWORD *)&v158[20] = a5;
    __int16 v159 = 1024;
    int v160 = v134;
    __int16 v161 = 1024;
    int v162 = a6;
    _os_log_debug_impl(&dword_2160F5000, v34, OS_LOG_TYPE_DEBUG, "[MJL::registerPhraseSequence] S:%@ AS:%@ DR:%@ phraseSize:%lu skipPhraseCount:%lu NonPhraseLearning:%d lexicalLearning:%d shouldLearnBigram:%d", __dst, 0x46u);
  }
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
  __int16 v38 = (const UniChar *)(a2 + 96);
  if (*(char *)(a2 + 119) < 0) {
    __int16 v38 = *(const UniChar **)v38;
  }
  *(void *)int v168 = v35;
  unint64_t v169 = 0;
  long long v171 = 0u;
  long long v172 = 0u;
  int v170 = v38;
  v173 = 0;
  uint64_t v39 = *(void **)(a1 + 112);
  if (!v39) {
    goto LABEL_56;
  }
  uint64_t v40 = *(void **)(a1 + 104);
  uint64_t v41 = [*(void **)(a1 + 112) v36:v37];
  char v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 88))(v41);
  char v45 = v40 ? v42 : 1;
  if (v45) {
    goto LABEL_56;
  }
  uint64_t v46 = [v39 v43:v44];
  if ((*(uint64_t (**)(uint64_t))(*(void *)v46 + 88))(v46)) {
    goto LABEL_56;
  }
  int v108 = sub_2161F3B4C(v39, v47, v48);
  char v111 = sub_2161F3B4C(v40, v109, v110);
  MutableCFStringRef Copy = 0;
  if (v108 && v111)
  {
    uint64_t v113 = *(void *)(a1 + 256);
    uint64_t v112 = *(void *)(a1 + 264);
    if (0xCCCCCCCCCCCCCCCDLL * ((v112 - v113) >> 3) <= (*(uint64_t (**)(void *))(*(void *)v111 + 48))(v111))
    {
LABEL_56:
      MutableCFStringRef Copy = 0;
      goto LABEL_57;
    }
    (*(void (**)(void *))(*(void *)v108 + 544))(v108);
    if (v114 == 1
      && (uint64_t v115 = *(void *)(a1 + 224),
          unsigned int v116 = (*(uint64_t (**)(void *, void))(*(void *)v108 + 352))(v108, 0),
          *(unsigned __int16 *)(v115 + 88) <= v116)
      && *(unsigned __int16 *)(v115 + 90) >= v116)
    {
      uint64_t v123 = *(void *)(a1 + 256);
      uint64_t v122 = *(void *)(a1 + 264);
      uint64_t v124 = (*(uint64_t (**)(void *))(*(void *)v111 + 48))(v111);
      unint64_t v125 = *(void *)(*(void *)(a1 + 328)
                       + 8 * sub_2161DEE38((void *)(a1 + 248), ~v124 - 0x3333333333333333 * ((v122 - v123) >> 3)));
      uint64_t v126 = *(void *)(a1 + 280);
      unint64_t v127 = (*(void *)(a1 + 288) - v126) >> 1;
      if (v127 <= v125) {
        int v128 = 0;
      }
      else {
        int v128 = (const UniChar *)(v126 + 2 * v125);
      }
      if (v126) {
        unint64_t v129 = v127 - v125;
      }
      else {
        unint64_t v129 = 0;
      }
      if (v127 <= v125) {
        unint64_t v130 = 0;
      }
      else {
        unint64_t v130 = v129;
      }
      (*(void (**)(void *))(*(void *)v111 + 544))(v111);
      MutableCFStringRef Copy = 0;
      if (v128 && v130 >= v131) {
        MutableCFStringRef Copy = (__CFString *)CFStringCreateWithCharacters(0, v128, v130 - v131);
      }
    }
    else
    {
      CFStringRef v117 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v108 + 24))(v108);
      MutableCFStringRef Copy = CFStringCreateMutableCopy(0, 0, v117);
      if (MutableCopy)
      {
        int v118 = MutableCopy;
        CFStringTrimWhitespace(MutableCopy);
        MutableCFStringRef Copy = v118;
      }
    }
  }
LABEL_57:
  CFStringRef cf = MutableCopy;
  CFStringRef theString = MutableCopy;
  int v151 = 0;
  v149[0] = 0;
  v149[1] = 0;
  uint64_t v150 = 0;
  v147[0] = 0;
  v147[1] = 0;
  uint64_t v148 = 0;
  unint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  sub_2162EFEB4((void *)(a1 + 248), v50, (uint64_t *)v149, v147, (_WORD *)&v151 + 1, &v151);
  if (v32 != v33)
  {
    int v143 = 0;
    unint64_t v51 = (v32 - v33) / 40;
    unint64_t v142 = v51 - 1;
    unint64_t v133 = 0;
    uint64_t v52 = 0;
    uint64_t v132 = a1 + 376;
    if (v51 <= 1) {
      unint64_t v51 = 1;
    }
    unint64_t v137 = v51;
    while (1)
    {
      unint64_t v53 = v52;
      uint64_t v54 = sub_216231FD4(a2, v52);
      uint64_t v56 = v55;
      uint64_t v57 = sub_2162319EC(a2, v53);
      if (!v56) {
        goto LABEL_184;
      }
      unint64_t v59 = v58;
      if (!v58) {
        goto LABEL_184;
      }
      uint64_t v60 = (UniChar *)v57;
      unsigned int v61 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 352))(a2, v53);
      unsigned int v62 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 344))(a2);
      if (sub_2162ADD60(v60, v59, v61))
      {
        if (v61 <= 0x64F) {
          __int16 v136 = word_216378708[v61];
        }
        else {
          __int16 v136 = 0;
        }
        unsigned int v141 = v62;
        if ((unsigned __int16)v151 <= 0x64FuLL) {
          __int16 v63 = word_216378708[(unsigned __int16)v151];
        }
        else {
          __int16 v63 = 0;
        }
        if (HIWORD(v151) <= 0x64FuLL) {
          __int16 v64 = word_216378708[HIWORD(v151)];
        }
        else {
          __int16 v64 = 0;
        }
        if (v141 <= 0x64F) {
          __int16 v65 = word_216378708[v141];
        }
        else {
          __int16 v65 = 0;
        }
        memset(buf, 0, sizeof(buf));
        uint64_t v175 = 0;
        if (v53 < v142)
        {
          CFIndex v66 = (void *)sub_2162319EC(a2, v53 + 1);
          sub_21617FAAC(__dst, v66, v67);
          if (SHIBYTE(v175) < 0) {
            operator delete(*(void **)buf);
          }
          *(_OWORD *)buf = *(_OWORD *)__dst;
          uint64_t v175 = *(void *)&__dst[16];
        }
        sub_2162A6988(__dst, (long long *)v147, (long long *)v149, xmmword_216386280, (long long *)buf, xmmword_216386280, v63, v64, v136, v65, 0);
        int v69 = *(char *)(a2 + 87);
        BOOL v70 = v69 < 0;
        CFStringRef v71 = *(unsigned __int16 **)(a2 + 64);
        if (v69 >= 0) {
          CFStringRef v71 = (unsigned __int16 *)(a2 + 64);
        }
        uint64_t v72 = *(unsigned __int8 *)(a2 + 87);
        if (v70) {
          uint64_t v72 = *(void *)(a2 + 72);
        }
        int v73 = sub_2162AAF88(v132, v54, v56, v60, v59, (unsigned __int16 *)__dst, v134, v68, v71, v72);
        if (v167 < 0) {
          operator delete(__p);
        }
        if (v165 < 0) {
          operator delete(v164);
        }
        if (v163 < 0) {
          operator delete(*(void **)&v158[14]);
        }
        if ((v158[13] & 0x80000000) != 0) {
          operator delete(v156);
        }
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        if (SHIBYTE(v175) < 0) {
          operator delete(*(void **)buf);
        }
        v143 |= v73;
        unsigned int v62 = v141;
      }
      if (SHIBYTE(v148) < 0) {
        operator delete(v147[0]);
      }
      *(_OWORD *)v147 = *(_OWORD *)v149;
      uint64_t v148 = v150;
      HIBYTE(v15sub_2161A108C(&a9, 0) = 0;
      LOWORD(v149[0]) = 0;
      sub_21617FAAC(__dst, v60, v59);
      if (SHIBYTE(v150) < 0) {
        operator delete(v149[0]);
      }
      *(_OWORD *)v149 = *(_OWORD *)__dst;
      uint64_t v150 = *(void *)&__dst[16];
      LOWORD(v151) = HIWORD(v151);
      HIWORD(v151) = v61;
      __int16 v74 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 352))(a2, v53);
      unint64_t v75 = v169 + (unsigned __int16)v59;
      if (!*(void *)v168) {
        unint64_t v75 = 0;
      }
      unint64_t v76 = v170 ? v171 + (unsigned __int16)v56 : 0;
      unint64_t v169 = v75;
      *(void *)&long long v171 = v76;
      if (v75 > 0x20 || v76 > 0x20) {
        goto LABEL_184;
      }
      __int16 v77 = v74;
      DWORD2(v171) |= 1 << (v75 - 1);
      HIDWORD(v171) |= 1 << (v76 - 1);
      uint64_t v78 = (char *)*((void *)&v172 + 1);
      if (*((void *)&v172 + 1) >= (unint64_t)v173)
      {
        uint64_t v80 = (char *)v172;
        uint64_t v81 = *((void *)&v172 + 1) - v172;
        if ((uint64_t)(*((void *)&v172 + 1) - v172) <= -3) {
          sub_21610CB04();
        }
        uint64_t v82 = v81 >> 1;
        if ((unint64_t)&v173[-v172] <= (v81 >> 1) + 1) {
          uint64_t v83 = v82 + 1;
        }
        else {
          uint64_t v83 = (uint64_t)&v173[-v172];
        }
        if ((unint64_t)&v173[-v172] >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v84 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v84 = v83;
        }
        if (v84)
        {
          CFIndex v85 = (char *)sub_21610FD44((uint64_t)&v173, v84);
          uint64_t v78 = (char *)*((void *)&v172 + 1);
          uint64_t v80 = (char *)v172;
        }
        else
        {
          CFIndex v85 = 0;
        }
        CFIndex v86 = &v85[2 * v82];
        *(_WORD *)CFIndex v86 = v77;
        BOOL v79 = v86 + 2;
        while (v78 != v80)
        {
          __int16 v87 = *((_WORD *)v78 - 1);
          v78 -= 2;
          *((_WORD *)v86 - 1) = v87;
          v86 -= 2;
        }
        *(void *)&long long v172 = v86;
        *((void *)&v172 + 1) = v79;
        v173 = &v85[2 * v84];
        if (v80) {
          operator delete(v80);
        }
      }
      else
      {
        **((_WORD **)&v172 + 1) = v74;
        BOOL v79 = v78 + 2;
      }
      *((void *)&v172 + 1) = v79;
      if (!a3 && v53 == v142) {
        break;
      }
      if (a3 && ((sub_2161C067C(*(void *)(v138 + 224), v61, v62) & 1) != 0 || v53 == v142))
      {
        ++v133;
        uint64_t v52 = v53 + 1;
        uint64_t v88 = v138;
        if (!((a3 - a4 + v133) % a3)) {
          goto LABEL_128;
        }
      }
      else
      {
        uint64_t v52 = v53 + 1;
      }
LABEL_179:
      if (v52 == v137) {
        goto LABEL_184;
      }
    }
    uint64_t v88 = v138;
    uint64_t v52 = v53 + 1;
LABEL_128:
    unint64_t v89 = v169;
    if (v169 >= 3)
    {
      CFStringRef v90 = *(__int16 **)v168;
      if (sub_2161EC100(**(_WORD **)v168) || sub_2161EC100(v90[v89 - 1])) {
        goto LABEL_179;
      }
    }
    if (a3 && v133 <= a4)
    {
      if (cf) {
        CFRelease(cf);
      }
      CFStringRef v91 = 0;
      CFStringRef theString = 0;
LABEL_178:
      *(void *)v168 += 2 * v169;
      unint64_t v169 = 0;
      CFRange v107 = &v170[v171];
      long long v171 = 0uLL;
      int v170 = v107;
      *((void *)&v172 + 1) = v172;
      CFStringRef cf = v91;
      goto LABEL_179;
    }
    CFStringRef v146 = CFStringCreateWithCharacters(0, v170, v171);
    CFStringRef v145 = CFStringCreateWithCharacters(0, *(const UniChar **)v168, v169);
    sub_2162A6888(__dst, v146, v145, SHIDWORD(v171), SDWORD2(v171), (uint64_t)&v172, (uint64_t)(*((void *)&v172 + 1) - v172) >> 1);
    if ((unint64_t)v156 > 0xFF) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = sub_2162A0594(v88, (uint64_t)__dst);
    }
    if (!*(void *)(v88 + 176) || !a6)
    {
      CFStringRef v93 = cf;
      if (v92)
      {
LABEL_169:
        CFStringRef v91 = v145;
        CFStringRef v145 = 0;
        if (!v93)
        {
LABEL_171:
          CFStringRef theString = v91;
          *(void *)__dst = &unk_26C6BDE50;
          if (*(void *)&v158[6])
          {
            *(void *)&v158[14] = *(void *)&v158[6];
            operator delete(*(void **)&v158[6]);
          }
          sub_21629D0B8(__dst);
          if (v145) {
            CFRelease(v145);
          }
          if (v146) {
            CFRelease(v146);
          }
          v143 |= v92;
          goto LABEL_178;
        }
LABEL_170:
        CFRelease(v93);
        goto LABEL_171;
      }
LABEL_159:
      CFStringRef v91 = 0;
      if (!v93) {
        goto LABEL_171;
      }
      goto LABEL_170;
    }
    CFStringRef v93 = cf;
    if (cf && v92)
    {
      CFIndex Length = CFStringGetLength(cf);
      CFStringRef v95 = theString;
      if (Length == 1)
      {
        unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex(theString, 0);
        uint64_t v97 = (unsigned __int16 *)&unk_2163CB8DA;
        unint64_t v98 = 14;
        do
        {
          unint64_t v99 = v98 >> 1;
          int v100 = &v97[v98 >> 1];
          unsigned int v102 = *v100;
          uint64_t v101 = v100 + 1;
          v98 += ~(v98 >> 1);
          if (v102 < CharacterAtIndex) {
            uint64_t v97 = v101;
          }
          else {
            unint64_t v98 = v99;
          }
        }
        while (v98);
        if (v97 != (unsigned __int16 *)&unk_2163CB8F6 && *v97 <= CharacterAtIndex) {
          goto LABEL_167;
        }
      }
      v103.i64[0] = *(void *)(v88 + 176);
      v103.i64[1] = (uint64_t)v95;
      if (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v103), (int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)&__dst[8], *(int8x16_t *)&__dst[8], 8uLL))))))
      {
        CFStringRef v93 = v95;
        goto LABEL_169;
      }
      CFIndex v104 = CFStringGetLength(v95);
      CFIndex v105 = CFStringGetLength(*(CFStringRef *)&__dst[16]);
      unint64_t v106 = CFStringGetLength(*(CFStringRef *)&__dst[8]);
      if ((unint64_t)(v105 - 33) < 0xFFFFFFFFFFFFFFE0) {
        goto LABEL_167;
      }
      CFStringRef v93 = v95;
      if (v106 && v106 <= 0x20 && v104)
      {
        if (sub_2161EDCBC(*(const __CFString **)&__dst[16], *(const __CFString **)&__dst[8]))
        {
          v154[0] = 0;
          v154[1] = 0;
          v153 = v154;
          sub_21610B834(buf, "FirstSurface");
          sub_216221EB8((int)&v153, v95);
        }
LABEL_167:
        CFStringRef v93 = v95;
      }
    }
    if (v92) {
      goto LABEL_169;
    }
    goto LABEL_159;
  }
  LOBYTE(v143) = 0;
LABEL_184:
  if (SHIBYTE(v148) < 0) {
    operator delete(v147[0]);
  }
  char v9 = v143;
  if (SHIBYTE(v150) < 0) {
    operator delete(v149[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  if ((void)v172)
  {
    *((void *)&v172 + 1) = v172;
    operator delete((void *)v172);
  }
  return v9 & 1;
}

void sub_2162A3170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33,const void *a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,const void *a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  sub_2161936EC((uint64_t)&a50, a53);
  sub_2162A09A0(&a55);
  sub_2161868BC(&a33, 0);
  sub_2161868BC(&a34, 0);
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  sub_2161868BC(&a49, 0);
  unint64_t v58 = *(void **)(v56 - 168);
  if (v58)
  {
    *(void *)(v56 - 16sub_2161A108C(&a9, 0) = v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void sub_2162A3314(void *a1, const __CFString *a2, char a3)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  if (!a2) {
    return;
  }
  CFStringRef v4 = a2;
  if ((*((uint64_t (**)(const __CFString *))a2->isa + 11))(a2)) {
    return;
  }
  uint64_t v6 = a1[30];
  if (!v6) {
    return;
  }
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[33] - a1[32]) >> 3);
  if (a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = (*((uint64_t (**)(const __CFString *))v4->isa + 6))(v4);
    uint64_t v6 = a1[30];
  }
  unint64_t v9 = v7 - v8;
  uint64_t v10 = *(void *)(v6 + 32);
  BOOL v11 = __OFSUB__(v7 - v8, v10);
  uint64_t v12 = v7 - v8 - v10;
  if (v12 < 0 != v11) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v13 + 1;
  uint64_t v70 = v9;
  uint64_t v64 = v9 - (v13 + 1);
  CFIndex v15 = (*((uint64_t (**)(const __CFString *))v4->isa + 6))(v4) + v64;
  __int16 v16 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], v15, MEMORY[0x263EFFF70]);
  uint64_t v78 = theArray;
  CFMutableStringRef Mutable = CFArrayCreateMutable(alloc, v15, v16);
  __int16 v77 = Mutable;
  sub_216184F68(__dst, (char *)L" ");
  uint64_t v72 = Mutable;
  if (v70 > v13 + 1)
  {
    uint64_t v18 = 40 * v13;
    CFStringRef str = v4;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x263EFFB28];
    do
    {
      unint64_t v19 = *(void *)(a1[41] + 8 * v14);
      uint64_t v20 = a1[35];
      if (v19 >= (a1[36] - v20) >> 1)
      {
        unint64_t v21 = 0;
        std::string::size_type v22 = 0;
      }
      else
      {
        unint64_t v21 = (const UniChar *)(v20 + 2 * v19);
        if (v20) {
          std::string::size_type v22 = *(unsigned __int16 *)(a1[32] + v18 + 64);
        }
        else {
          std::string::size_type v22 = 0;
        }
      }
      BOOL v23 = a1;
      if ((v76 & 0x80u) == 0) {
        unint64_t v24 = v76;
      }
      else {
        unint64_t v24 = (unint64_t)__dst[1];
      }
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v81.__r_.__value_.__l.__size_ = v22;
      if ((v76 & 0x80u) == 0) {
        double v25 = __dst;
      }
      else {
        double v25 = (void **)__dst[0];
      }
      BOOL v26 = sub_216268C14((uint64_t *)&v81, v25, v24);
      int v27 = 0;
      std::string::size_type v28 = 0;
      std::string::size_type v29 = v22 - v24;
      if (!v21) {
        std::string::size_type v29 = 0;
      }
      if (v26) {
        std::string::size_type v22 = v29;
      }
      unint64_t v30 = *(void *)(v23[44] + 8 * v14);
      uint64_t v31 = v23[38];
      if (v30 < (v23[39] - v31) >> 1)
      {
        int v27 = (const UniChar *)(v31 + 2 * v30);
        if (v31) {
          std::string::size_type v28 = *(unsigned __int16 *)(v23[32] + v18 + 68);
        }
        else {
          std::string::size_type v28 = 0;
        }
      }
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      v81.__r_.__value_.__l.__size_ = v28;
      BOOL v32 = sub_216268C14((uint64_t *)&v81, v25, v24);
      CFIndex v33 = v28 - v24;
      if (!v27) {
        CFIndex v33 = 0;
      }
      if (v32) {
        CFIndex v34 = v33;
      }
      else {
        CFIndex v34 = v28;
      }
      CFStringRef v35 = CFStringCreateWithCharactersNoCopy(alloc, v21, v22, contentsDeallocator);
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
      CFArrayAppendValue(theArray, v35);
      a1 = v23;
      CFMutableStringRef Mutable = v72;
      CFStringRef v4 = str;
      CFStringRef v36 = CFStringCreateWithCharactersNoCopy(alloc, v27, v34, contentsDeallocator);
      *(void *)&long long __p = v36;
      CFArrayAppendValue(v72, v36);
      if (v36) {
        CFRelease(v36);
      }
      if (v35) {
        CFRelease(v35);
      }
      ++v14;
      v18 += 40;
    }
    while (v14 < v70);
  }
  uint64_t v37 = (void *)(*((uint64_t (**)(const __CFString *))v4->isa + 38))(v4);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  CFStringRef contentsDeallocatora = (const __CFString *)(*((uint64_t (**)(const __CFString *))v4->isa + 3))(v4);
  CFStringRef v71 = v37;
  CFStringRef stra = (const __CFString *)(*((uint64_t (**)(const __CFString *))v4->isa + 29))(v4);
  uint64_t v63 = (uint64_t)a1;
  if (v38 != v39)
  {
    uint64_t v40 = 0;
    CFIndex v41 = 0;
    CFIndex v42 = 0;
    unint64_t v43 = (v38 - v39) / 40;
    if (v43 <= 1) {
      unint64_t v43 = 1;
    }
    unint64_t v65 = v43;
    uint64_t v44 = 24;
    do
    {
      CFIndex v45 = *(unsigned __int16 *)(*v71 + v44);
      unsigned int v46 = (*((uint64_t (**)(const __CFString *, uint64_t))v4->isa + 40))(v4, v40);
      v88.location = v42;
      v88.CFIndex length = v45;
      CFStringRef v47 = CFStringCreateWithSubstring(alloc, contentsDeallocatora, v88);
      v89.location = v41;
      v89.CFIndex length = v46;
      CFStringRef v48 = CFStringCreateWithSubstring(alloc, stra, v89);
      CFArrayAppendValue(theArray, v47);
      CFArrayAppendValue(Mutable, v48);
      CFRelease(v47);
      CFRelease(v48);
      v42 += v45;
      v41 += v46;
      ++v40;
      v44 += 40;
    }
    while (v65 != v40);
  }
  long long v49 = sub_2162D1CE4(6u);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v59 = (*((uint64_t (**)(const __CFString *))v4->isa + 3))(v4);
    std::string::size_type v60 = (*((uint64_t (**)(const __CFString *))v4->isa + 7))(v4);
    uint64_t v61 = (*((uint64_t (**)(const __CFString *))v4->isa + 29))(v4);
    LODWORD(v81.__r_.__value_.__l.__data_) = 138413314;
    *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = v59;
    WORD2(v81.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = v60;
    HIWORD(v81.__r_.__value_.__r.__words[2]) = 2112;
    uint64_t v82 = v61;
    __int16 v83 = 2112;
    uint64_t v84 = @"online";
    __int16 v85 = 2048;
    uint64_t v86 = v64;
    _os_log_debug_impl(&dword_2160F5000, v49, OS_LOG_TYPE_DEBUG, "[MJL::incrementUsageCount] %@ (%@/%@) type:%@ contextWordCount:%ld", (uint8_t *)&v81, 0x34u);
  }
  unint64_t v50 = sub_2162D1CE4(6u);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
  {
    CFIndex v51 = 0;
    memset(&v81, 0, sizeof(v81));
    while (v51 < CFArrayGetCount(theArray))
    {
      if (v64 == v51) {
        std::string::append(&v81, "|| ", 3uLL);
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v51);
      sub_2161E3AE8(ValueAtIndex, &__p);
      if ((v80 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v80 & 0x80u) == 0) {
        std::string::size_type v54 = v80;
      }
      else {
        std::string::size_type v54 = *((void *)&__p + 1);
      }
      std::string::append(&v81, p_p, v54);
      if ((char)v80 < 0) {
        operator delete((void *)__p);
      }
      std::string::push_back(&v81, 47);
      CFStringRef v55 = (const __CFString *)CFArrayGetValueAtIndex(v72, v51);
      sub_2161E3AE8(v55, &__p);
      if ((v80 & 0x80u) == 0) {
        uint64_t v56 = (const std::string::value_type *)&__p;
      }
      else {
        uint64_t v56 = (const std::string::value_type *)__p;
      }
      if ((v80 & 0x80u) == 0) {
        std::string::size_type v57 = v80;
      }
      else {
        std::string::size_type v57 = *((void *)&__p + 1);
      }
      std::string::append(&v81, v56, v57);
      if ((char)v80 < 0) {
        operator delete((void *)__p);
      }
      std::string::push_back(&v81, 32);
      ++v51;
    }
    unint64_t v58 = sub_2162D1CE4(6u);
    CFMutableStringRef Mutable = v72;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v62 = &v81;
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v62 = (std::string *)v81.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v62;
      _os_log_debug_impl(&dword_2160F5000, v58, OS_LOG_TYPE_DEBUG, "[MJL::incrementUsageCount] %s", (uint8_t *)&__p, 0xCu);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
  }
  sub_2162A5760(v63, 0, theArray, Mutable, v64, 0);
  if ((char)v76 < 0)
  {
    operator delete(__dst[0]);
    if (!Mutable) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if (Mutable) {
LABEL_77:
  }
    CFRelease(Mutable);
LABEL_78:
  if (theArray) {
    CFRelease(theArray);
  }
}

void sub_2162A3AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,const void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_2161BE0C8(&a24, 0);
  sub_2161BE0C8(&a25, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162A3BA0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_2161F1D44(a2, (const char *)a2, a3);
  if (result)
  {
    uint64_t v7 = [a2 v5:v6];
    if (v7) {
      return (*(unsigned int (**)(uint64_t))(*(void *)v7 + 88))(v7) ^ 1;
    }
    else {
      return 1;
    }
  }
  return result;
}

__CFString *sub_2162A3C08(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 416))(a2) & 0x4000000) != 0)
  {
    int v5 = &off_26426BCC8;
  }
  else
  {
    unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 416))(a2);
    int v4 = sub_21628DCE0(v3);
    int v5 = &off_26426BCA8;
    if (v4) {
      int v5 = &off_26426BCC0;
    }
  }
  return *v5;
}

uint64_t sub_2162A3CB8(uint64_t a1, uint64_t a2)
{
  if (a2
    && ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2) & 1) == 0
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 72))(a2) != 7)
  {
    uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
    long long __p = 0;
    CFStringRef v47 = 0;
    v48[0] = 0;
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 552))(a2);
    if (v38)
    {
      uint64_t v6 = 0;
      unsigned int v7 = 0;
      int v41 = 0;
      uint64_t v8 = v5;
      do
      {
        unsigned int v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, v6);
        __int16 v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 312))(a2, v6);
        unsigned int v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 320))(a2, v6);
        unsigned int v40 = v7;
        __int16 v39 = v9;
        uint64_t v10 = (int *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2) + 40 * v6);
        int v11 = *v10;
        int v12 = v10[1];
        unsigned int v13 = v10[3];
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 344))(a2, v6);
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 352))(a2, v6);
        int v45 = 0;
        if (!v13 || (v13 >> 28 ? (BOOL v16 = v13 >> 28 == 5) : (BOOL v16 = 1), !v16))
        {
          unsigned int v17 = **(_DWORD **)(a1 + 512);
          int v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 224))(*(void *)(a1 + 208));
          sub_21628DC44(v17, v18);
          v54[0] = 0;
          v54[1] = v54;
          v54[2] = 0x2000000000;
          char v55 = 0;
          uint64_t v19 = v43;
          if (!v8) {
            uint64_t v19 = 0;
          }
          uint64_t v52 = v8;
          uint64_t v53 = v19;
          uint64_t v20 = v44;
          if (!v4) {
            uint64_t v20 = 0;
          }
          uint64_t v50 = v4;
          uint64_t v51 = v20;
          v48[1] = MEMORY[0x263EF8330];
          v48[2] = 0x40000000;
          v48[3] = sub_2162A4724;
          v48[4] = &unk_2642670B0;
          __int16 v49 = v15;
          v48[5] = v54;
          v48[6] = &v45;
          sub_216355E2C();
        }
        int v45 = v12;
        if (!(v14 | v15))
        {
          CFStringRef v21 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
          if (sub_2161E36C8(v21))
          {
            uint64_t v14 = *(unsigned __int16 *)(*(void *)(a1 + 224) + 50);
            uint64_t v15 = v14;
          }
          else
          {
            uint64_t v14 = 0;
            uint64_t v15 = 0;
          }
        }
        int v22 = v45;
        char v23 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 248))(a2, 0, 0);
        char v24 = v23;
        double v25 = v47;
        if ((unint64_t)v47 >= v48[0])
        {
          unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - (unsigned char *)__p) >> 3);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0x666666666666666) {
            sub_21618B344();
          }
          if (0x999999999999999ALL * ((uint64_t)(v48[0] - (void)__p) >> 3) > v29) {
            unint64_t v29 = 0x999999999999999ALL * ((uint64_t)(v48[0] - (void)__p) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48[0] - (void)__p) >> 3) >= 0x333333333333333) {
            unint64_t v30 = 0x666666666666666;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            uint64_t v31 = (char *)sub_21618B4A8((uint64_t)v48, v30);
          }
          else {
            uint64_t v31 = 0;
          }
          BOOL v32 = &v31[8 * ((v47 - (unsigned char *)__p) >> 3)];
          *(_DWORD *)BOOL v32 = v11;
          *((_DWORD *)v32 + 1) = v22;
          *((void *)v32 + 1) = 0;
          *((void *)v32 + 2) = 0;
          *((_WORD *)v32 + 12) = v44;
          *((_WORD *)v32 + 13) = v39;
          *((_WORD *)v32 + 14) = v43;
          *((_WORD *)v32 + 15) = v14;
          *((_WORD *)v32 + 16) = v15;
          *((_WORD *)v32 + 17) = 0;
          v32[36] = 0;
          v32[37] = v24;
          *((_WORD *)v32 + 19) = 2;
          CFIndex v34 = (char *)__p;
          CFIndex v33 = v47;
          CFStringRef v35 = &v31[40 * v28];
          if (v47 == __p)
          {
            uint64_t v26 = v40;
          }
          else
          {
            uint64_t v26 = v40;
            do
            {
              long long v36 = *(_OWORD *)(v33 - 40);
              long long v37 = *(_OWORD *)(v33 - 24);
              *((void *)v35 - 1) = *((void *)v33 - 1);
              *(_OWORD *)(v35 - 24) = v37;
              *(_OWORD *)(v35 - 4sub_2161A108C(&a9, 0) = v36;
              v35 -= 40;
              v33 -= 40;
            }
            while (v33 != v34);
            CFIndex v33 = v34;
          }
          int v27 = v32 + 40;
          long long __p = v35;
          CFStringRef v47 = v32 + 40;
          v48[0] = &v31[40 * v30];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)CFStringRef v47 = v11;
          *((_DWORD *)v25 + 1) = v22;
          *((void *)v25 + 1) = 0;
          *((void *)v25 + 2) = 0;
          *((_WORD *)v25 + 12) = v44;
          uint64_t v26 = v40;
          *((_WORD *)v25 + 13) = v39;
          *((_WORD *)v25 + 14) = v43;
          *((_WORD *)v25 + 15) = v14;
          *((_WORD *)v25 + 16) = v15;
          *((_WORD *)v25 + 17) = 0;
          v25[36] = 0;
          v25[37] = v23;
          int v27 = v25 + 40;
          *((_WORD *)v25 + 19) = 2;
        }
        CFStringRef v47 = v27;
        v8 += 2 * v43;
        v4 += 2 * v44;
        v41 += v45
             + (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 208) + 64))(*(void *)(a1 + 208), v26, v14);
        ++v6;
        unsigned int v7 = v15;
      }
      while (v6 != v38);
    }
    else
    {
      uint64_t v15 = 0;
    }
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 208) + 64))(*(void *)(a1 + 208), v15, 0);
    (*(void (**)(uint64_t))(*(void *)a2 + 376))(a2);
    (*(void (**)(uint64_t))(*(void *)a2 + 96))(a2);
    (*(void (**)(uint64_t))(*(void *)a2 + 408))(a2);
    (*(void (**)(uint64_t))(*(void *)a2 + 416))(a2);
    operator new();
  }
  return 0;
}

void sub_2162A4664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  MEMORY[0x2166CA800](v27, 0x10F3C40C8E81E66);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2162A4724(uint64_t result, uint64_t a2, unsigned char *a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 94);
  if (v3 == *(unsigned __int16 *)(result + 48) && *(unsigned __int16 *)(a2 + 92) == v3)
  {
    **(_DWORD **)(result + 4sub_2161A108C(&a9, 0) = *(__int16 *)(a2 + 84);
    *a3 = 1;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

id sub_2162A4764(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = [a2 a2:a3];
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 88))(v4))
  {
    if (a2)
    {
      uint64_t v7 = [a2 v5:v6];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 88))(v7))
      {
        CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(a2, v8, v9);
        sub_2161E212C(Surface, &v39);
        CFStringRef AnalysisString = (const __CFString *)MecabraCandidateGetAnalysisString(a2, v11, v12);
        sub_2161E212C(AnalysisString, (UniChar **)__p);
        if ((**(unsigned char **)(a1 + 512) & 0x20) == 0)
        {
          CFStringRef v16 = (const __CFString *)MecabraCandidateGetAnalysisString(a2, v14, v15);
          sub_2161E1FB8(v16);
        }
        CFStringRef v35 = (const __CFString *)MecabraCandidateGetAnalysisString(a2, v14, v15);
        sub_216184774(v35);
      }
    }
  }
  else
  {
    uint64_t v17 = [a2 v5:v6];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 72))(v17) == 7)
    {
      if (a2)
      {
        if (objc_msgSend_rawCandidate(a2, v18, v19))
        {
          uint64_t v22 = [a2 v20:v21];
          if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 72))(v22) == 7)
          {
            *(_WORD *)operator new(2uLL) = 9787;
            CFStringRef v25 = (const __CFString *)MecabraCandidateGetSurface(a2, v23, v24);
            sub_2161E212C(v25, &v39);
            int v27 = (int)v39;
            int v26 = v40;
            unint64_t v28 = (char *)operator new(0x28uLL);
            __p[1] = v28 + 40;
            __p[2] = v28 + 40;
            *((void *)v28 + 1) = 0;
            *((void *)v28 + 2) = 0;
            *(void *)unint64_t v28 = 0;
            *((_WORD *)v28 + 12) = (v26 - v27) >> 1;
            *(void *)(v28 + 26) = 0x647064700010001;
            *((_WORD *)v28 + 17) = 0;
            v28[36] = 0;
            *(_WORD *)(v28 + 37) = 513;
            v28[39] = 0;
            __p[0] = v28;
            operator new();
          }
        }
      }
    }
    else if (a2)
    {
      uint64_t v29 = [a2 v18:v19];
      if (((*(uint64_t (**)(uint64_t))(*(void *)v29 + 88))(v29) & 1) == 0)
      {
        BOOL v32 = sub_2161F3B4C(a2, v30, v31);
        uint64_t v33 = sub_2162A3CB8(a1, (uint64_t)v32);
        uint64_t v34 = sub_2161F4704(v33);
        if (v34) {
          return (id)v34;
        }
      }
    }
  }

  return a2;
}

void sub_2162A4C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  char v23 = *(void **)(v21 - 72);
  if (v23)
  {
    *(void *)(v21 - 64) = v23;
    operator delete(v23);
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_2162A4DB0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = [a2 a2:a3];
  if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5))
  {
    a1[33] = a1[32];
    a1[36] = a1[35];
    a1[39] = a1[38];
    a1[42] = a1[41];
    a1[45] = a1[44];
    sub_2162EF56C(a1 + 31);
  }
  else
  {
    uint64_t v8 = sub_2161F3B4C(a2, v6, v7);
    sub_2162EFB10((uint64_t)(a1 + 31), (uint64_t)v8);
  }
}

uint64_t sub_2162A4E6C(uint64_t a1, void *a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (a2)
  {
    (*(void (**)(void *))(*a2 + 552))(a2);
    if (!v4) {
      goto LABEL_52;
    }
    (*(void (**)(void *))(*a2 + 544))(a2);
    if (!v5
      || ((*(uint64_t (**)(void *))(*a2 + 176))(a2) & 1) != 0
      || (*(unsigned int (**)(void *))(*a2 + 96))(a2) == 89
      || (*(unsigned int (**)(void *))(*a2 + 96))(a2) == 85
      || (*(unsigned int (**)(void *))(*a2 + 96))(a2) == 76)
    {
      goto LABEL_52;
    }
    for (unint64_t i = (_DWORD *)a2[17]; i != (_DWORD *)a2[18]; i += 10)
    {
      if (*i == 4) {
        goto LABEL_52;
      }
    }
    if ((*(unsigned int (**)(void *))(*a2 + 96))(a2) == 83
      || (*(unsigned int (**)(void *))(*a2 + 96))(a2) == 79)
    {
      goto LABEL_52;
    }
    uint64_t v15 = (*(uint64_t (**)(void *))(*a2 + 304))(a2);
    std::string::size_type v57 = 0;
    uint64_t v58 = 0;
    long long __p = 0;
    sub_21618B3D8(&__p, *(const void **)v15, *(void *)(v15 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3));
    CFStringRef v16 = v57;
    if (v57 == __p)
    {
LABEL_45:
      int v34 = 0;
    }
    else
    {
      unint64_t v17 = 0;
      CFStringRef v16 = __p;
      while (1)
      {
        int v18 = v16[10 * v17];
        int v50 = v18;
        if (v18) {
          BOOL v19 = v18 == 10;
        }
        else {
          BOOL v19 = 1;
        }
        int v20 = !v19;
        int v53 = v20;
        chars = (UniChar *)sub_2162319EC((uint64_t)a2, v17);
        CFIndex numChars = v21;
        uint64_t v22 = sub_216231FD4((uint64_t)a2, v17);
        uint64_t v24 = (const UniChar *)v22;
        CFIndex v25 = v23;
        if (v23)
        {
          BOOL v26 = 0;
          for (j = 0; j != v23; BOOL v26 = j >= v23)
          {
            int v28 = *(unsigned __int16 *)(v22 + 2 * j);
            if ((v28 - 12353) >= 0x56 && v28 != 12540 && v28 != 12316) {
              break;
            }
            ++j;
          }
        }
        else
        {
          BOOL v26 = 1;
        }
        UChar32 v31 = *chars;
        BOOL v52 = v31 != 9787 && (u_charType(v31) - 19) < 0xB;
        BOOL v32 = sub_2162D1CE4(6u);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          charsa = (UniChar *)CFStringCreateWithCharacters(0, chars, numChars);
          CFStringRef v33 = CFStringCreateWithCharacters(0, v24, v25);
          *(_DWORD *)buf = 134218754;
          unint64_t v60 = v17 + 1;
          __int16 v61 = 2112;
          uint64_t v62 = (uint64_t)charsa;
          __int16 v63 = 2112;
          uint64_t v64 = (uint64_t)v33;
          __int16 v65 = 1024;
          LODWORD(v66) = v50;
          _os_log_debug_impl(&dword_2160F5000, v32, OS_LOG_TYPE_DEBUG, "[MecabraJapanese::isValidLearningCandidate] %zu-th Word validation: (%@/%@), kind: %d", buf, 0x26u);
        }
        if ((v53 | v52 | !v26)) {
          break;
        }
        ++v17;
        CFStringRef v16 = __p;
        if (v17 >= 0xCCCCCCCCCCCCCCCDLL * (((char *)v57 - (unsigned char *)__p) >> 3)) {
          goto LABEL_45;
        }
      }
      CFStringRef v35 = sub_2162D1CE4(6u);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v60 = v17 + 1;
        _os_log_debug_impl(&dword_2160F5000, v35, OS_LOG_TYPE_DEBUG, "[MecabraJapanese::isValidLearningCandidate] %zu-th Word validation: skipped.", buf, 0xCu);
      }
      int v34 = 1;
      CFStringRef v16 = __p;
    }
    if (v16)
    {
      std::string::size_type v57 = v16;
      operator delete(v16);
    }
    if (v34)
    {
LABEL_52:
      long long v36 = sub_2162D1CE4(6u);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v38 = (*(uint64_t (**)(void *))(*a2 + 24))(a2);
        uint64_t v39 = (*(uint64_t (**)(void *))(*a2 + 56))(a2);
        uint64_t v40 = (*(uint64_t (**)(void *))(*a2 + 232))(a2);
        int v41 = (*(uint64_t (**)(void *))(*a2 + 96))(a2);
        *(_DWORD *)buf = 138413058;
        unint64_t v60 = v38;
        __int16 v61 = 2112;
        uint64_t v62 = v39;
        __int16 v63 = 2112;
        uint64_t v64 = v40;
        __int16 v65 = 1024;
        LODWORD(v66) = v41;
        _os_log_debug_impl(&dword_2160F5000, v36, OS_LOG_TYPE_DEBUG, "[MecabraJapanese::isValidLearningCandidate] Skipped validation: %@ (%@/%@), kind: %c", buf, 0x26u);
      }
      return 1;
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E2E0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797E2E0))
      {
        qword_26797E2E8 = (uint64_t)&unk_2163CB8C8;
        qword_26797E2F0 = 8;
        __cxa_guard_release(&qword_26797E2E0);
      }
      CFIndex v42 = (const void *)(*(uint64_t (**)(void *))(*a2 + 552))(a2);
      if (v43 == qword_26797E2F0 && !memcmp(v42, (const void *)qword_26797E2E8, 2 * v43)) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = sub_2162A6414(a1, (uint64_t)a2);
      }
      unsigned int v44 = sub_2162D1CE4(6u);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        if (v9) {
          int v45 = "true";
        }
        else {
          int v45 = "false";
        }
        uint64_t v46 = (*(uint64_t (**)(void *))(*a2 + 24))(a2);
        uint64_t v47 = (*(uint64_t (**)(void *))(*a2 + 56))(a2);
        uint64_t v48 = (*(uint64_t (**)(void *))(*a2 + 232))(a2);
        int v49 = (*(uint64_t (**)(void *))(*a2 + 96))(a2);
        *(_DWORD *)buf = 136316162;
        unint64_t v60 = (unint64_t)v45;
        __int16 v61 = 2112;
        uint64_t v62 = v46;
        __int16 v63 = 2112;
        uint64_t v64 = v47;
        __int16 v65 = 2112;
        uint64_t v66 = v48;
        __int16 v67 = 1024;
        int v68 = v49;
        _os_log_debug_impl(&dword_2160F5000, v44, OS_LOG_TYPE_DEBUG, "[MecabraJapanese::isValidLearningCandidate] %s: %@ (%@/%@), kind: %c", buf, 0x30u);
      }
    }
  }
  else
  {
    uint64_t v7 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = v8;
      uint64_t v11 = v8[3](0);
      uint64_t v12 = v10[7](0);
      uint64_t v13 = v10[29](0);
      int v14 = v10[12](0);
      *(_DWORD *)buf = 138413058;
      unint64_t v60 = v11;
      __int16 v61 = 2112;
      uint64_t v62 = v12;
      __int16 v63 = 2112;
      uint64_t v64 = v13;
      __int16 v65 = 1024;
      LODWORD(v66) = v14;
      _os_log_debug_impl(&dword_2160F5000, v7, OS_LOG_TYPE_DEBUG, "[MecabraJapanese::isValidLearningCandidate] Failed to convert to Japanese Conversion Candidate: %@ (%@/%@), kind: %c", buf, 0x26u);
    }
    return 0;
  }
  return v9;
}

void sub_2162A572C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162A5760(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFArray *a4, uint64_t a5, double *a6)
{
  if (!*(void *)(a1 + 240)) {
    return 0;
  }
  sub_2162A5914(a3, a4, v14);
  uint64_t v11 = (void *)v14[0];
  if (v14[0] != v14[1])
  {
    BOOL v12 = (int)sub_2162A5D70(a1, a2, a3, v14, a5, a6) > 0;
    if (!v11) {
      return v12;
    }
    goto LABEL_7;
  }
  BOOL v12 = 0;
  if (v14[0]) {
LABEL_7:
  }
    operator delete(v11);
  return v12;
}

void sub_2162A580C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162A5824(uint64_t a1, uint64_t a2, CFArrayRef theArray, uint64_t a4, double *a5)
{
  uint64_t Count = CFArrayGetCount(theArray);
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], Count, MEMORY[0x263EFFF70]);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      int v14 = (const void *)sub_216292770(*(void *)(a1 + 232), ValueAtIndex);
      CFArrayAppendValue(Mutable, v14);
      CFRelease(v14);
    }
  }
  BOOL v15 = sub_2162A5760(a1, a2, theArray, Mutable, a4, a5);
  CFRelease(Mutable);
  return v15;
}

void sub_2162A5914(const __CFArray *a1@<X2>, const __CFArray *a2@<X3>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long __p = operator new(4uLL);
  _DWORD *__p = 1;
  int v18 = (char *)(__p + 1);
  BOOL v19 = (char *)(__p + 1);
  if (CFArrayGetCount(a1) >= 1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, 0);
    CFArrayGetValueAtIndex(a2, 0);
    sub_2161E1FB8(ValueAtIndex);
  }
  uint64_t v7 = __p + 1;
  uint64_t v6 = v19;
  if (v18 >= v19)
  {
    uint64_t v9 = __p;
    uint64_t v10 = 2;
    uint64_t v11 = v19 - (char *)__p;
    if ((unint64_t)((v19 - (char *)__p) >> 1) > 2) {
      uint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_2161129B4((uint64_t)&v19, v12);
      uint64_t v9 = __p;
      uint64_t v7 = __p + 1;
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = v13 + 4;
    uint64_t v6 = &v13[4 * v12];
    _DWORD *v14 = 2;
    uint64_t v8 = v14 + 1;
    while (v7 != v9)
    {
      int v15 = *--v7;
      *--int v14 = v15;
    }
    long long __p = v14;
    BOOL v19 = v6;
    if (v9)
    {
      operator delete(v9);
      uint64_t v6 = v19;
    }
  }
  else
  {
    *(_DWORD *)int v18 = 2;
    uint64_t v8 = __p + 2;
  }
  *a3 = __p;
  a3[1] = v8;
  a3[2] = v6;
}

void sub_2162A5CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162A5D70(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t *a4, uint64_t a5, double *a6)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v9 = sub_2162D1CE4(7u);
  BOOL v30 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  uint64_t v10 = *a4;
  unint64_t v11 = (a4[1] - *a4) >> 2;
  if (v11 > a5)
  {
    unsigned int v31 = 0;
    while (1)
    {
      if (a2 != 1 || a5 < 1 || a5 >= v11 - 1) {
        goto LABEL_8;
      }
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, a5 - 1);
      if ((sub_2161EC588(ValueAtIndex) & 1) == 0) {
        break;
      }
LABEL_37:
      ++a5;
      uint64_t v10 = *a4;
      unint64_t v11 = (a4[1] - *a4) >> 2;
      if (a5 >= v11) {
        return v31;
      }
    }
    uint64_t v10 = *a4;
LABEL_8:
    uint64_t v13 = *(void *)(a1 + 240);
    uint64_t v14 = a5 - *(void *)(v13 + 32);
    if (v14 >= -1) {
      uint64_t v15 = v14 + 1;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = a5 - v15;
    if (v30)
    {
      double v17 = sub_2163668E4(v13, (_DWORD *)(v10 + 4 * v15), v16 + 1);
      sub_2162F0D24(*(void *)(a1 + 240), a2, *(unsigned int *)(*a4 + 4 * a5), *a4 + 4 * v15, a5 - v15, a6);
      double v18 = sub_2163668E4(*(void *)(a1 + 240), (_DWORD *)(*a4 + 4 * v15), v16 + 1);
      memset(&v33, 0, sizeof(v33));
      if (a5 >= v15)
      {
        do
        {
          CFStringRef v19 = (const __CFString *)sub_216365930(*(void *)(a1 + 240));
          sub_2161E3AE8(v19, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v33, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::append(&v33, " (", 2uLL);
          std::to_string(&__p, *(_DWORD *)(*a4 + 4 * v15));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v22 = &__p;
          }
          else {
            uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v33, (const std::string::value_type *)v22, v23);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::append(&v33, ") ", 2uLL);
          if (v19) {
            CFRelease(v19);
          }
        }
        while (v15++ < a5);
      }
      CFIndex v25 = sub_2162D1CE4(7u);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        BOOL v26 = &v33;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          BOOL v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v17;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        double v35 = v18;
        _os_log_debug_impl(&dword_2160F5000, v25, OS_LOG_TYPE_DEBUG, "[MJL::incrementUsageCount] Incrementing usage counts for %s (probability: %lf -> %lf)", (uint8_t *)&__p, 0x20u);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      sub_2162F0D24(v13, a2, *(unsigned int *)(v10 + 4 * a5), v10 + 4 * v15, a5 - v15, a6);
    }
    ++v31;
    goto LABEL_37;
  }
  return 0;
}

void sub_2162A6098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162A6108(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2162A617C(uint64_t a1, uint64_t *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E2D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E2D8))
  {
    sub_21610B834(&xmmword_26797E2F8, off_26797C580[0]);
    dword_26797E310 = 0;
    word_26797E314 = 1;
    byte_26797E316 = 1;
    sub_21610B834(qword_26797E318, off_26797C588);
    dword_26797E330 = 0;
    word_26797E334 = 0;
    byte_26797E336 = 1;
    sub_21610B834(qword_26797E338, off_26797C560[0]);
    dword_26797E350 = 1;
    word_26797E354 = 0;
    byte_26797E356 = 1;
    sub_21610B834(qword_26797E358, off_26797C558[0]);
    dword_26797E370 = 1;
    word_26797E374 = 0;
    byte_26797E376 = 1;
    sub_21610B834(qword_26797E378, off_26797C568[0]);
    dword_26797E390 = 0;
    word_26797E394 = 0;
    byte_26797E396 = 1;
    __cxa_atexit((void (*)(void *))sub_2162A6CD8, 0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E2D8);
  }
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  sub_21629D1F4((char *)&v3, &xmmword_26797E2F8, (long long *)&qword_26797E398, 5uLL);
  sub_21618B7D8(a2);
  *(_OWORD *)a2 = v3;
  a2[2] = v4;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  uint64_t v5 = (void **)&v3;
  sub_216175BF4(&v5);
}

void sub_2162A6334(_Unwind_Exception *a1)
{
}

__CFString *sub_2162A6370()
{
  return @"LearningDictionaryJapanese";
}

uint64_t sub_2162A637C()
{
  return 500;
}

uint64_t sub_2162A6384()
{
  return 600;
}

uint64_t sub_2162A638C(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    BOOL v3 = !sub_216232D08(v2);
  }
  else {
    LOBYTE(v3) = 0;
  }
  uint64_t v4 = a1[22];
  if (v4) {
    BOOL v5 = !sub_216232D08(v4);
  }
  else {
    LOBYTE(v5) = 0;
  }
  int v6 = sub_2162AC078((uint64_t)(a1 + 47));
  uint64_t v7 = a1[23];
  if (v7) {
    BOOL v8 = sub_216232D08(v7);
  }
  else {
    BOOL v8 = 1;
  }
  if (v3 || v5) {
    return 0;
  }
  else {
    return v6 & v8;
  }
}

uint64_t sub_2162A6414(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2))
  {
    uint64_t v10 = sub_216231FD4(a2, 0);
    uint64_t v11 = v3;
    uint64_t v8 = sub_2162319EC(a2, 0);
    uint64_t v9 = v4;
    v6[0] = 0;
    v6[1] = v6;
    void v6[2] = 0x2000000000;
    char v7 = 0;
    sub_216355E2C();
  }
  return 1;
}

void sub_2162A6590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_2162A65A8(uint64_t result, uint64_t a2, unsigned char *a3)
{
  *a3 = 1;
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_2162A65C4(uint64_t a1)
{
  sub_2162A6B34(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162A65FC()
{
  return 0;
}

uint64_t sub_2162A6604()
{
  return 0;
}

uint64_t sub_2162A660C()
{
  return 1;
}

uint64_t sub_2162A6614()
{
  return 0;
}

uint64_t sub_2162A661C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2162A6694((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2162A6694(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_2162A6738((uint64_t)v11);
  return v9;
}

uint64_t sub_2162A6738(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216140F84(a1);
  }
  return a1;
}

uint64_t sub_2162A6770(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  double v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216129BFC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_216182F50(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  v15 += 24;
  sub_2162A661C(a1, v14);
  uint64_t v12 = a1[1];
  sub_216140FCC((uint64_t)v14);
  return v12;
}

void sub_2162A6874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2162A6888(void *a1, const void *a2, const void *a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = sub_21629D058(a1, a2, a3, a7);
  *uint64_t v11 = &unk_26C6BDE50;
  *((_DWORD *)v11 + 8) = a4;
  *((_DWORD *)v11 + 9) = a5;
  v11[6] = 0;
  v11[7] = 0;
  void v11[5] = 0;
  sub_216182F50(v11 + 5, *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 1);
  return a1;
}

void sub_2162A6900(_Unwind_Exception *a1)
{
  sub_21629D0B8(v1);
  _Unwind_Resume(a1);
}

void sub_2162A6914(void *a1)
{
  *a1 = &unk_26C6BDE50;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_21629D0B8(a1);

  JUMPOUT(0x2166CA800);
}

char *sub_2162A6988(char *__dst, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_2161984AC(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v18 = *a3;
    *((void *)__dst + 2) = *((void *)a3 + 2);
    *(_OWORD *)__dst = v18;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_2161984AC(__dst + 24, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *((void *)__dst + 5) = *((void *)a2 + 2);
    *(_OWORD *)(__dst + 24) = v19;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_2161984AC(__dst + 48, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v20 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *((_OWORD *)__dst + 3) = v20;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_2161984AC(__dst + 72, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v21 = *a5;
    *((void *)__dst + 11) = *((void *)a5 + 2);
    *(_OWORD *)(__dst + 72) = v21;
  }
  uint64_t v22 = __dst + 96;
  if (*((char *)a6 + 23) < 0)
  {
    sub_2161984AC(v22, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v23 = *a6;
    *((void *)__dst + 14) = *((void *)a6 + 2);
    *(_OWORD *)uint64_t v22 = v23;
  }
  *((_WORD *)__dst + 6sub_2161A108C(&a9, 0) = a9;
  *((_WORD *)__dst + 61) = a8;
  *((_WORD *)__dst + 62) = a7;
  *((_WORD *)__dst + 63) = a10;
  *((_WORD *)__dst + 64) = a11;
  return __dst;
}

void sub_2162A6AD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162A6B34(uint64_t a1)
{
  sub_2162A9010(a1 + 376);
  sub_2161DEA90((void *)(a1 + 248));
  uint64_t v2 = *(void *)(a1 + 200);
  *(void *)(a1 + 20sub_2161A108C(&a9, 0) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_2162973E0((uint64_t *)(a1 + 184), 0);
  sub_2162973E0((uint64_t *)(a1 + 176), 0);
  unint64_t v5 = (void **)(a1 + 152);
  sub_216175BF4(&v5);
  unint64_t v5 = (void **)(a1 + 128);
  sub_216175BF4(&v5);
  return sub_216297064((void *)a1);
}

void sub_2162A6C10()
{
}

void *sub_2162A6C24()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6C79E8;
  return result;
}

void sub_2162A6C5C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C79E8;
}

uint64_t sub_2162A6C84()
{
  return 0;
}

uint64_t sub_2162A6C8C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC7D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162A6CCC()
{
  return &unk_26C6BC7D0;
}

void sub_2162A6CD8()
{
  for (uint64_t i = 0; i != -160; i -= 32)
  {
    if (*((char *)&unk_26797E2D8 + i + 183) < 0) {
      operator delete(*(void **)((char *)&unk_26797E2D8 + i + 160));
    }
  }
}

void sub_2162A6D20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    (*(void (**)(void **__return_ptr, uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 40))(&v29, a1, a2, a3, a6);
    uint64_t v12 = v29;
    if (v29 != v30)
    {
      uint64_t v13 = a2[6];
      if (a2[7] != v13)
      {
        unint64_t v14 = 0;
        do
        {
          double v15 = -20.0;
          if (v14 < (v30 - (unsigned char *)v29) >> 3) {
            double v15 = *((double *)v29 + v14);
          }
          uint64_t v16 = *(float **)(v13 + 8 * v14);
          uint64_t v17 = *(void *)(a4 + 24);
          *(double *)buf = v16[24];
          *(double *)&__p.__r_.__value_.__l.__data_ = v15;
          if (!v17) {
            sub_21610B7AC();
          }
          uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v17 + 48))(v17, buf, &__p);
          (*(void (**)(float *, double))(*(void *)v16 + 400))(v16, v15);
          (*(void (**)(float *, uint64_t))(*(void *)v16 + 480))(v16, v18);
          long long v19 = sub_2162D1CE4(0xCu);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            int v20 = *((char *)v16 + 55);
            if (v20 >= 0) {
              long long v21 = v16 + 8;
            }
            else {
              long long v21 = (void *)*((void *)v16 + 4);
            }
            if (v20 >= 0) {
              unint64_t v22 = *((unsigned __int8 *)v16 + 55);
            }
            else {
              unint64_t v22 = *((void *)v16 + 5);
            }
            sub_2161E30A8(v21, v22, &__p);
            int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v24 = __p.__r_.__value_.__r.__words[0];
            float v25 = v16[24];
            (*(void (**)(float *))(*(void *)v16 + 392))(v16);
            ++v14;
            *(_DWORD *)buf = 134219010;
            p_p = &__p;
            if (v23 < 0) {
              p_p = (std::string *)v24;
            }
            *(void *)&uint8_t buf[4] = v14;
            __int16 v32 = 2080;
            std::string v33 = p_p;
            __int16 v34 = 1024;
            int v35 = v18;
            __int16 v36 = 2048;
            double v37 = v25;
            __int16 v38 = 2048;
            uint64_t v39 = v26;
            _os_log_debug_impl(&dword_2160F5000, v19, OS_LOG_TYPE_DEBUG, "%zu: [%s] cost: %d (geometry: %.3f, LM: %.3f)", buf, 0x30u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            ++v14;
          }
          uint64_t v13 = a2[6];
        }
        while (v14 < (a2[7] - v13) >> 3);
      }
      sub_216215A00(a2, a5);
      uint64_t v12 = v29;
    }
    if (v12)
    {
      BOOL v30 = v12;
      operator delete(v12);
    }
  }
}

void sub_2162A7040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162A708C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3 >= a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 && ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8) & 1) != 0)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a3);
    memset(v35, 0, sizeof(v35));
    sub_2161F93EC(v35, v7);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 8) + 16))(__p);
        sub_2161F94A0(v35, (uint64_t)__p);
        if (*(void *)__p)
        {
          *(void *)&__p[8] = *(void *)__p;
          operator delete(*(void **)__p);
        }
      }
    }
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 64))(v34);
    unint64_t v12 = (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3;
    *(void *)std::string __p = 0;
    sub_2161495E4(a5, v12, __p);
    uint64_t v13 = *(void *)(a2 + 48);
    if (*(void *)(a2 + 56) != v13)
    {
      unint64_t v14 = 0;
      do
      {
        if (v14 >= v7)
        {
          double v20 = 0.0;
          double v21 = -20.0;
        }
        else
        {
          double v15 = (void *)(v35[0] + 24 * v14);
          uint64_t v16 = (_DWORD *)*v15;
          uint64_t v17 = (_DWORD *)v15[1];
          if (v16 == v17)
          {
            unint64_t v18 = 0;
          }
          else
          {
            unint64_t v18 = 0;
            do
            {
              if (!*v16++) {
                ++v18;
              }
            }
            while (v16 != v17);
          }
          double v20 = -(double)v18;
          double v21 = *((float *)v34[0] + v14);
        }
        uint64_t v22 = *(void *)(v13 + 8 * v14);
        *(double *)(*a5 + 8 * v14) = v21 + v20;
        int v23 = sub_2162D1CE4(0xCu);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG) && v20 != 0.0)
        {
          std::string::size_type v24 = sub_2162D1CE4(0xCu);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            int v27 = *(void **)(v22 + 32);
            uint64_t v26 = v22 + 32;
            float v25 = v27;
            int v28 = *(char *)(v26 + 23);
            if (v28 >= 0) {
              uint64_t v29 = (void *)v26;
            }
            else {
              uint64_t v29 = v25;
            }
            if (v28 >= 0) {
              unint64_t v30 = *(unsigned __int8 *)(v26 + 23);
            }
            else {
              unint64_t v30 = *(void *)(v26 + 8);
            }
            sub_2161E30A8(v29, v30, &v33);
            unsigned int v31 = (std::string *)v33.__r_.__value_.__r.__words[0];
            uint64_t v32 = *(void *)(*a5 + 8 * v14);
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v31 = &v33;
            }
            *(_DWORD *)std::string __p = 134219010;
            *(void *)&__p[4] = v14 + 1;
            *(_WORD *)&__p[12] = 2080;
            *(void *)&__p[14] = v31;
            __int16 v37 = 2048;
            double v38 = v21;
            __int16 v39 = 2048;
            uint64_t v40 = v32;
            __int16 v41 = 2048;
            double v42 = -v20;
            _os_log_debug_impl(&dword_2160F5000, v24, OS_LOG_TYPE_DEBUG, "%zu: [%s] Adjust Static LM Score: %.3f -> %.3f UNK Penalty: %.3f", __p, 0x34u);
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v33.__r_.__value_.__l.__data_);
            }
          }
        }
        ++v14;
        uint64_t v13 = *(void *)(a2 + 48);
      }
      while (v14 < (*(void *)(a2 + 56) - v13) >> 3);
    }
    if (v34[0])
    {
      v34[1] = v34[0];
      operator delete(v34[0]);
    }
    *(void *)std::string __p = v35;
    sub_21613F444((void ***)__p);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_2162A740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  a21 = &a18;
  sub_21613F444((void ***)&a21);
  _Unwind_Resume(a1);
}

void sub_2162A7480()
{
}

BOOL sub_2162A7494(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

double sub_2162A74A4(void *a1)
{
  if (!(*(unsigned int (**)(void *))(*a1 + 24))(a1)) {
    return 0.0;
  }
  uint64_t v2 = *(void (**)(void))(**(void **)(*(void *)(a1[1] + 8) + 8) + 520);

  v2();
  return result;
}

uint64_t sub_2162A7544(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  *(void *)double result = v2;
  *(void *)(result + *(void *)(v2 - 32)) = a2[2];
  *(void *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 0;
  uint64_t v3 = *a2;
  *(void *)double result = *a2;
  *(void *)(result + *(void *)(v3 - 32)) = a2[3];
  return result;
}

uint64_t *sub_2162A7650(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  void *result = v3;
  *(uint64_t *)((char *)result + *(void *)(v3 - 32)) = a2[2];
  result[1] = *(void *)(a3 + 8);
  uint64_t v4 = *a2;
  void *result = *a2;
  *(uint64_t *)((char *)result + *(void *)(v4 - 32)) = a2[3];
  return result;
}

void *sub_2162A775C()
{
  return &unk_2163864A8;
}

CFIndex sub_2162A7768(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 216))(a1)) {
    return 0;
  }
  CFStringRef v2 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  CFIndex result = CFStringGetLength(v2);
  if (result) {
    result -= CFStringGetCharacterAtIndex(v2, 0) == 32;
  }
  return result;
}

BOOL sub_2162A7808(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 89
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2) != 89
    || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) != 89
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2) == 89)
  {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1) == 89
    || (*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2) == 89)
  {
    CFNumberRef v4 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
    CFNumberRef v5 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 168))(a2);
    if (CFNumberCompare(v4, v5, 0)) {
      return 0;
    }
    unint64_t v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    uint64_t v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
    return CFEqual(v7, v8) != 0;
  }
  else
  {
    return sub_21617AD18(a1, a2);
  }
}

void sub_2162A7A50(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(a2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v7 = sub_2162D1CE4(a2);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = a1[1];
      uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
      uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
      uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 232))(a1);
      if ((*(int (**)(void *))(*a1 + 96))(a1) < 32) {
        int v10 = 63;
      }
      else {
        int v10 = (*(uint64_t (**)(void *))(*a1 + 96))(a1);
      }
      if ((*(unsigned int (**)(void *))(*a1 + 408))(a1))
      {
        if ((*(unsigned int (**)(void *))(*a1 + 408))(a1) == 2) {
          uint64_t v11 = "prefix";
        }
        else {
          uint64_t v11 = "partial";
        }
      }
      else
      {
        uint64_t v11 = "exact";
      }
      int v12 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
      int v13 = (*(uint64_t (**)(void *))(*a1 + 384))(a1);
      double v14 = (*(double (**)(void *))(*a1 + 392))(a1);
      if (v14 >= -100.0) {
        unint64_t v15 = *(void *)&v14;
      }
      else {
        unint64_t v15 = 0xC059000000000000;
      }
      int v16 = (*(uint64_t (**)(void *))(*a1 + 200))(a1);
      *(_DWORD *)buf = 136317698;
      uint64_t v20 = a3;
      __int16 v21 = 2048;
      uint64_t v22 = v18;
      __int16 v23 = 2112;
      uint64_t v24 = v17;
      __int16 v25 = 2112;
      uint64_t v26 = v8;
      __int16 v27 = 2112;
      uint64_t v28 = v9;
      __int16 v29 = 1024;
      int v30 = v10;
      __int16 v31 = 2080;
      uint64_t v32 = v11;
      __int16 v33 = 1024;
      int v34 = v12;
      __int16 v35 = 1024;
      int v36 = v13;
      __int16 v37 = 2048;
      unint64_t v38 = v15;
      __int16 v39 = 1024;
      int v40 = v16;
      _os_log_debug_impl(&dword_2160F5000, v7, OS_LOG_TYPE_DEBUG, "%s (%ld): [%@] (%@/%@), type: %c, length: %s, cost: %d, base-cost: %d, prob: %3.3lf, autocorrected: %d", buf, 0x60u);
    }
  }
}

uint64_t IndexedSearchDictionaryBuild(int a1, void *a2)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  id v4 = objc_alloc_init(MEMORY[0x263F086B0]);
  NSLog(&cfstr_BuildingDictio.isa, a2[3]);
  if (a1 == 4)
  {
    uint64_t v6 = [NSString stringWithUTF8String:a2[1]];
    uint64_t v8 = [NSDictionary dictionaryWithContentsOfFile:v7];
    if (v8)
    {
      int v10 = (__CFString *)v8;
      uint64_t v11 = [NSString stringWithUTF8String:a2[3]];
      CFURLRef isDirectory = (const __CFURL *)[NSURL fileURLWithPath:v12 isDirectory:v11];
      if (isDirectory)
      {
        CFURLRef v14 = isDirectory;
        if (sub_2161AF5AC(isDirectory, v10))
        {
          uint64_t v16 = [NSString stringWithUTF8String:a2[2]];
          uint64_t v17 = sub_2161AEC30(0, v14, 0);
          long long v19 = [v10 objectForKeyedSubscript:v18];
          int hasSuffix = [v19 hasSuffix:v20];
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          uint64_t v22 = [NSString stringWithContentsOfFile:v21 usedEncoding:&v74 error:&v73];
          if (v22)
          {
            uint64_t v24 = (void *)v22;
            __int16 v25 = [MEMORY[0x263EFF980] arrayWithCapacity:v23];
            __int16 v27 = [MEMORY[0x263EFF980] arrayWithCapacity:v26];
            unint64_t v30 = [v24 length:v28 v29];
            if (v30 >= 2)
            {
              unint64_t v32 = v30;
              uint64_t v33 = 0;
              uint64_t v34 = 1;
              do
              {
                unint64_t v71 = 0;
                uint64_t v72 = 0;
                uint64_t v70 = 0;
                [objc_msgSend_getLineStart_end_contentsEnd_forRange_(v24, v31, (uint64_t)&v72, &v71, &v70, v34, 1);
                int v36 = [v24 substringWithRange:v35];
                unint64_t v38 = [v36 componentsSeparatedByString:v37];
                if ((unint64_t)objc_msgSend_count(v38, v39, v40) < 3)
                {
                  NSLog(&cfstr_BadDictionaryD.isa, v36);
                }
                else
                {
                  uint64_t v42 = [v38 objectAtIndex:v41];
                  [v25 addObject:v42];
                  int v45 = [v38 objectAtIndexedSubscript:v44];
                  uint64_t v47 = [v45 dataUsingEncoding:v46];
                  int v49 = [v38 objectAtIndexedSubscript:v48];
                  if (hasSuffix)
                  {
                    unsigned int v52 = [v49 v50:v51];
                    if (v52 >= 0x10)
                    {
                      fwrite("Wrong originalFlag. \n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
                      exit(1);
                    }
                    uint64_t v75 = v47;
                    uint64_t v76 = [NSNumber numberWithUnsignedInteger:16 * v33 + v52];
                    uint64_t v55 = [MEMORY[0x263EFF8C0] arrayWithObjects:v54, &v75, 2];
                    CFDictionaryRef v57 = (const __CFDictionary *)[NSDictionary dictionaryWithObjects:v56 forKeys:v55];
                  }
                  else
                  {
                    BOOL v58 = [v49 rangeOfString:@"1"] != 0x7FFFFFFFFFFFFFFFLL;
                    uint64_t v75 = v47;
                    uint64_t v76 = [NSNumber numberWithUnsignedInteger:v59];
                    uint64_t v77 = [NSNumber numberWithShort:v60];
                    uint64_t v62 = [MEMORY[0x263EFF8C0] arrayWithObjects:v61, (void*)&v75, 3];
                    CFDictionaryRef v57 = (const __CFDictionary *)[NSDictionary dictionaryWithObjects:v63 forKeys:v62];
                  }
                  uint64_t v64 = sub_2161AF2E4((uint64_t)v17, v57);
                  [v27 addObject:v65];

                  ++v33;
                }
                uint64_t v34 = v71;
              }
              while (v71 < v32);
            }
            int v66 = sub_2161AF500((uint64_t)v17, (uint64_t)v25, (uint64_t)v27, 0);
            CFRelease(v17);

            if (v66)
            {
              NSLog(&cfstr_DictionaryWasB.isa);
              return 0;
            }
            goto LABEL_23;
          }
          NSLog(&cfstr_ReadingDiction.isa, v16, v73);
          CFRelease(v17);
        }

LABEL_23:
        NSLog(&cfstr_ErrorBuildingD.isa, v68);
        return 0xFFFFFFFFLL;
      }
      NSLog(&cfstr_CanTCreateUrlF.isa, v11);
    }
    else
    {
      NSLog(&cfstr_CanTReadTempla.isa, v6);
    }
  }
  else
  {
    NSLog(&cfstr_SUsageTemplate.isa, *a2);
  }
  return 0xFFFFFFFFLL;
}

unint64_t sub_2162A81EC(unsigned int a1, unint64_t *a2, int a3)
{
  unint64_t v3 = *a2;
  if (*a2 == -1) {
    return 0;
  }
  if (a3) {
    unsigned int v4 = 0x80000000;
  }
  else {
    unsigned int v4 = 1;
  }
  if (v3 <= 0x20) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = *a2;
  }
  unint64_t v6 = *a2;
  while (v5 != v6)
  {
    unsigned int v7 = a1 << v6;
    if (!a3) {
      unsigned int v7 = a1 >> v6;
    }
    ++v6;
    if ((v7 & v4) != 0) {
      goto LABEL_16;
    }
  }
  unint64_t v6 = -1;
LABEL_16:
  *a2 = v6;
  if (v3 || !a3)
  {
    uint64_t v10 = v6;
    unint64_t v6 = v3;
  }
  else
  {
    uint64_t v9 = 32;
    if (v6 > 0x20) {
      uint64_t v9 = v6;
    }
    uint64_t v10 = v6;
    while (v9 != v10)
    {
      int v11 = a1 << v10++;
      if (v11 < 0) {
        goto LABEL_26;
      }
    }
    uint64_t v10 = -1;
LABEL_26:
    *a2 = v10;
  }
  if (v10 == -1 && a3) {
    return 33 - v6;
  }
  unint64_t v12 = v10 - v6;
  if (v10 == -1) {
    return 0;
  }
  else {
    return v12;
  }
}

uint64_t sub_2162A82B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v72[20] = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2161A108C(&a9, 0) = 0u;
  long long v19 = (uint64_t *)(a1 + 40);
  uint64_t v18 = (uint64_t *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12sub_2161A108C(&a9, 0) = 1065353216;
  *(void *)(a1 + 128) = 0xFF1FFF0130013002;
  sub_21610B834(buf, "Reading");
  int v36 = 0;
  __int16 v37 = 1;
  char v38 = 1;
  sub_21610B834(v39, "Surface");
  int v40 = 0;
  __int16 v41 = 0;
  char v42 = 1;
  sub_21610B834(v43, "LeftSurface1");
  int v44 = 0;
  __int16 v45 = 0;
  char v46 = 1;
  sub_21610B834(v47, "LeftSurface2");
  int v48 = 0;
  __int16 v49 = 0;
  char v50 = 1;
  sub_21610B834(&v51, "RightSurface1");
  int v52 = 0;
  __int16 v53 = 0;
  char v54 = 1;
  sub_21610B834(v55, "POS");
  int v56 = 1;
  __int16 v57 = 0;
  char v58 = 1;
  sub_21610B834(v59, "LeftPOS1");
  int v60 = 1;
  __int16 v61 = 0;
  char v62 = 1;
  sub_21610B834(v63, "LeftPOS2");
  int v64 = 1;
  __int16 v65 = 0;
  char v66 = 1;
  sub_21610B834(v67, "RightPOS1");
  int v68 = 1;
  __int16 v69 = 0;
  char v70 = 1;
  __dst[1] = 0;
  __int16 v21 = 0;
  __dst[0] = 0;
  v31.__locale_ = (std::locale::__imp *)__dst;
  LOBYTE(v32[0]) = 0;
  __dst[0] = operator new(0x120uLL);
  __dst[1] = __dst[0];
  __int16 v21 = (char *)__dst[0] + 288;
  __dst[1] = sub_21629D27C((uint64_t)&v21, (long long *)buf, v71, (char *)__dst[0]);
  sub_21618B7D8(v19);
  *(_OWORD *)(a1 + 4sub_2161A108C(&a9, 0) = *(_OWORD *)__dst;
  *(void *)(a1 + 56) = v21;
  __dst[1] = 0;
  __int16 v21 = 0;
  __dst[0] = 0;
  v31.__locale_ = (std::locale::__imp *)__dst;
  sub_216175BF4((void ***)&v31);
  uint64_t v5 = 36;
  do
  {
    if (SHIBYTE(v32[v5 + 2]) < 0) {
      operator delete((void *)v32[v5]);
    }
    v5 -= 4;
  }
  while (v5 * 8);
  sub_21610B834(buf, "Key");
  int v36 = 0;
  __int16 v37 = 1;
  char v38 = 1;
  sub_21610B834(v39, "Feature");
  int v40 = 0;
  __int16 v41 = 0;
  char v42 = 1;
  sub_21610B834(v43, "IntValue");
  int v44 = 1;
  __int16 v45 = 0;
  char v46 = 1;
  sub_21610B834(v47, "StrValue");
  int v48 = 0;
  __int16 v49 = 0;
  char v50 = 1;
  __dst[1] = 0;
  __int16 v21 = 0;
  __dst[0] = 0;
  v31.__locale_ = (std::locale::__imp *)__dst;
  LOBYTE(v32[0]) = 0;
  __dst[0] = operator new(0x80uLL);
  __dst[1] = __dst[0];
  __int16 v21 = (char *)__dst[0] + 128;
  __dst[1] = sub_21629D27C((uint64_t)&v21, (long long *)buf, &v51, (char *)__dst[0]);
  sub_21618B7D8(v18);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)__dst;
  *(void *)(a1 + 8sub_2161A108C(&a9, 0) = v21;
  __dst[1] = 0;
  __int16 v21 = 0;
  __dst[0] = 0;
  v31.__locale_ = (std::locale::__imp *)__dst;
  sub_216175BF4((void ***)&v31);
  for (uint64_t i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v47[i + 2]) < 0) {
      operator delete((void *)v47[i]);
    }
  }
  unsigned int v7 = (uint64_t *)sub_2162D8C20();
  uint64_t v8 = (char *)sub_2162D8D64(v7, 0, off_26797C900[0], off_26797C8F0[0], 0);
  uint64_t v9 = sub_2162D1CE4(9u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (v8[23] >= 0) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = *(char **)v8;
    }
    *(_DWORD *)buf = 138412546;
    *(__CFString **)&uint8_t buf[4] = off_26797C8F0[0];
    __int16 v34 = 2080;
    __int16 v35 = v17;
    _os_log_debug_impl(&dword_2160F5000, v9, OS_LOG_TYPE_DEBUG, "[JLPL::loadLexicalRules] Loading %@ (%s)", buf, 0x16u);
  }
  sub_21613025C((uint64_t *)buf);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v30 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  __int16 v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v10 = (std::locale::id *)MEMORY[0x263F8C108];
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  int v11 = std::locale::use_facet(&v31, v10);
  unsigned __int8 v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v31);
  int v13 = sub_2161575FC(buf, (uint64_t)&v23, v12);
  if ((*((unsigned char *)v13 + *(void *)(*v13 - 24) + 32) & 5) == 0)
  {
    if (v25 >= 0) {
      CFURLRef v14 = (char *)&v23;
    }
    else {
      CFURLRef v14 = (char *)v23;
    }
    if (v25 >= 0) {
      uint64_t v15 = HIBYTE(v25);
    }
    else {
      uint64_t v15 = v24;
    }
    sub_2161E35D8(v14, 9, v15, (uint64_t *)&v22);
    sub_2161E22D0(v22);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v23);
  }
  if (v26 != v27) {
    sub_2162AF464(a1 + 88, (unsigned __int16 *)__p, (uint64_t)__p, &v26);
  }
  __dst[0] = &v26;
  sub_2162AEBEC((void ***)__dst);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  *(void *)buf = *MEMORY[0x263F8C2A8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166CA430]((char *)&v35 + 2);
  std::istream::~istream();
  MEMORY[0x2166CA750](v72);
  return a1;
}

void sub_2162A8D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  a35 = (uint64_t)&a65;
  sub_2162AEBEC((void ***)&a35);
  if (a72 < 0) {
    operator delete(__p);
  }
  sub_216130420(&STACK[0x220]);
  sub_2162AFA54(v72 + 88);
  a35 = a13;
  sub_216175BF4((void ***)&a35);
  a35 = a14;
  sub_216175BF4((void ***)&a35);
  sub_2162973E0((uint64_t *)(v72 + 32), 0);
  sub_2162973E0(a11, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162A9010(uint64_t a1)
{
  sub_2162AFA54(a1 + 88);
  unint64_t v3 = (void **)(a1 + 64);
  sub_216175BF4(&v3);
  unint64_t v3 = (void **)(a1 + 40);
  sub_216175BF4(&v3);
  sub_2162973E0((uint64_t *)(a1 + 32), 0);
  sub_2162973E0((uint64_t *)(a1 + 24), 0);
  return a1;
}

uint64_t sub_2162A907C(uint64_t a1, const __CFURL *a2)
{
  if (a2)
  {
    CFURLRef v3 = sub_2161E26B0(a2, @"LexicalLearning_ja_JP.db");
    CFURLRef v4 = sub_2161E26B0(a2, @"NonLexicalLearning_ja_JP.db");
    if (v3)
    {
      if (v4) {
        operator new();
      }
      CFRelease(v3);
    }
    else if (v4)
    {
      CFRelease(v4);
    }
  }
  return 0;
}

void sub_2162A91F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  MEMORY[0x2166CA800](v10, 0x10F2C40B10B6BF7);
  sub_21617DB94(&a9, 0);
  sub_21617DB94(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162A9248(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v6 = a2;
  CFStringRef v2 = &v6;
  sub_2162229D0(*(void *)(a1 + 32), &v6, 1uLL, 0, (uint64_t)v5);
  if (v5[1] != v5[0]) {
    CFStringRef v2 = *(unsigned __int16 **)sub_216222F20(v5[0], "StrValue");
  }
  uint64_t v3 = *v2;
  unsigned int v7 = (void **)v5;
  sub_2161921F0(&v7);
  return v3;
}

void sub_2162A92C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 24) = &a10;
  sub_2161921F0((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_2162A92DC(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6)
{
  __p[5] = *(void **)MEMORY[0x263EF8340];
  if (*(void *)(a1 + 32)) {
    BOOL v6 = a3 == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6 || a6 != 1 || *(_WORD *)(a4 + 126)) {
    return 0;
  }
  int v7 = *a2;
  unsigned int v8 = *a5;
  if (v8 > 0xFF00)
  {
    if (v8 == 65281)
    {
      if (v7 != 65281 && v7 != 33) {
        return 0;
      }
      *(_WORD *)(a1 + 132) = v7;
    }
    else
    {
      if (v8 != 65311 || v7 != 65311 && v7 != 63) {
        return 0;
      }
      *(_WORD *)(a1 + 134) = v7;
    }
LABEL_27:
    sub_21610B834(__p, "Key");
    sub_216221D48();
  }
  if (v8 == 12289)
  {
    if (v7 != 44 && v7 != 65292 && v7 != 12289) {
      return 0;
    }
    *(_WORD *)(a1 + 13sub_2161A108C(&a9, 0) = v7;
    goto LABEL_27;
  }
  if (v8 == 12290 && (v7 == 46 || v7 == 65294 || v7 == 12290))
  {
    *(_WORD *)(a1 + 128) = v7;
    goto LABEL_27;
  }
  return 0;
}

void sub_2162A9610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162A969C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 32))
  {
    uint64_t v8 = a4;
    uint64_t v31 = 0;
    if (sub_2161EC60C(a4, a5, &v31, 1))
    {
      if (v31)
      {
        uint64_t v27 = v8;
        if (v31 != a5)
        {
          sub_2162AF2E8(&v28, a6 + 72);
          goto LABEL_25;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E398, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797E398))
        {
          sub_216184F68(__dst, (char *)L"日");
          sub_216184F68(__p, (char *)L"日");
          sub_216184F68(v62, "\bg");
          sub_2161DA4F8((uint64_t)v44, (long long *)__p, 2uLL);
          sub_2162AECC0(v63, (long long *)__dst, v44);
          sub_216184F68(v42, "\bg");
          sub_216184F68(&v59, (char *)L"日");
          sub_216184F68(v60, "\bg");
          sub_2161DA4F8((uint64_t)v41, &v59, 2uLL);
          sub_2162AECC0(&v64, (long long *)v42, v41);
          sub_216184F68(v39, (char *)L"時");
          sub_216184F68(&v55, (char *)L"時");
          sub_216184F68(v57, (char *)word_2163CAB80);
          sub_216184F68(v58, byte_2163CB8F8);
          sub_2161DA4F8((uint64_t)v38, &v55, 3uLL);
          sub_2162AECC0(&v66, (long long *)v39, v38);
          sub_216184F68(v36, (char *)word_2163CAB80);
          sub_216184F68(v51, (char *)L"時");
          sub_216184F68(v53, (char *)word_2163CAB80);
          sub_216184F68(v54, byte_2163CB8F8);
          sub_2161DA4F8((uint64_t)v35, (long long *)v51, 3uLL);
          sub_2162AECC0(v67, (long long *)v36, v35);
          sub_216184F68(v33, byte_2163CB8F8);
          sub_216184F68(v48, (char *)L"時");
          sub_216184F68(v49, (char *)word_2163CAB80);
          sub_216184F68(v50, byte_2163CB8F8);
          sub_2161DA4F8((uint64_t)v32, (long long *)v48, 3uLL);
          sub_2162AECC0(v68, (long long *)v33, v32);
          sub_2162AED58((uint64_t)v63, 5);
          for (uint64_t i = 24; i != -6; i -= 6)
            sub_2162AEC70((uint64_t)&v63[i]);
          uint64_t v47 = v32;
          sub_21613EFD0((void ***)&v47);
          for (uint64_t j = 0; j != -72; j -= 24)
          {
            if ((char)v50[j + 23] < 0) {
              operator delete(*(void **)&v50[j]);
            }
          }
          if (v34 < 0) {
            operator delete(v33[0]);
          }
          v48[0] = v35;
          sub_21613EFD0((void ***)v48);
          for (uint64_t k = 0; k != -72; k -= 24)
          {
            if ((char)v54[k + 23] < 0) {
              operator delete(*(void **)&v54[k]);
            }
          }
          if (v37 < 0) {
            operator delete(v36[0]);
          }
          v51[0] = v38;
          sub_21613EFD0((void ***)v51);
          for (uint64_t m = 0; m != -72; m -= 24)
          {
            if ((char)v58[m + 23] < 0) {
              operator delete(*(void **)&v58[m]);
            }
          }
          if (v40 < 0) {
            operator delete(v39[0]);
          }
          *(void *)&long long v55 = v41;
          sub_21613EFD0((void ***)&v55);
          for (uint64_t n = 0; n != -48; n -= 24)
          {
            if ((char)v60[n + 23] < 0) {
              operator delete(*(void **)&v60[n]);
            }
          }
          if (v43 < 0) {
            operator delete(v42[0]);
          }
          *(void *)&long long v55 = v44;
          sub_21613EFD0((void ***)&v55);
          for (iuint64_t i = 0; ii != -48; ii -= 24)
          {
            if ((char)v62[ii + 23] < 0) {
              operator delete(*(void **)&v62[ii]);
            }
          }
          if (v46 < 0) {
            operator delete(__dst[0]);
          }
          __cxa_atexit((void (*)(void *))sub_2162AECBC, &xmmword_26797E3B0, &dword_2160F5000);
          __cxa_guard_release(&qword_26797E398);
        }
        unint64_t v9 = sub_2161A6920((uint64_t)&qword_26797E3C8, a6 + 72);
        unint64_t v10 = *((void *)&xmmword_26797E3B0 + 1);
        if (*((void *)&xmmword_26797E3B0 + 1))
        {
          unint64_t v11 = v9;
          uint8x8_t v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797E3B0 + 8));
          v12.i16[0] = vaddlv_u8(v12);
          unint64_t v13 = v12.u32[0];
          if (v12.u32[0] > 1uLL)
          {
            unint64_t v14 = v9;
            if (v9 >= *((void *)&xmmword_26797E3B0 + 1)) {
              unint64_t v14 = v9 % *((void *)&xmmword_26797E3B0 + 1);
            }
          }
          else
          {
            unint64_t v14 = (*((void *)&xmmword_26797E3B0 + 1) - 1) & v9;
          }
          uint64_t v15 = *(unsigned __int16 ***)(xmmword_26797E3B0 + 8 * v14);
          if (v15)
          {
            for (juint64_t j = *v15; jj; juint64_t j = *(unsigned __int16 **)jj)
            {
              unint64_t v17 = *((void *)jj + 1);
              if (v11 == v17)
              {
                if (sub_2161A6964((uint64_t)&dword_26797E3D0, jj + 8, (unsigned __int16 *)(a6 + 72)))
                {
                  uint64_t v28 = 0;
                  uint64_t v29 = 0;
                  uint64_t v30 = 0;
                  sub_216273D58((char *)&v28, *((long long **)jj + 5), *((long long **)jj + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)jj + 6) - *((void *)jj + 5)) >> 3));
                  uint64_t v8 = v27;
                  goto LABEL_25;
                }
              }
              else
              {
                if (v13 > 1)
                {
                  if (v17 >= v10) {
                    v17 %= v10;
                  }
                }
                else
                {
                  v17 &= v10 - 1;
                }
                if (v17 != v14) {
                  break;
                }
              }
            }
          }
        }
        sub_2162AF2E8(&v28, a6 + 72);
        uint64_t v8 = v27;
LABEL_25:
        if (v29 != v28)
        {
          sub_2162A6988((char *)v63, (long long *)(a6 + 24), (long long *)a6, &xmmword_216386500, v28, &xmmword_216386518, *(_WORD *)(a6 + 124), *(_WORD *)(a6 + 122), *(_WORD *)(a6 + 120), *(_WORD *)(a6 + 126), *(_WORD *)(a6 + 128));
          v51[0] = 0;
          v51[1] = 0;
          uint64_t v52 = 0;
          if (a5 == v31)
          {
            HIBYTE(v52) = 0;
            LOWORD(v51[0]) = 0;
            uint64_t v18 = L"NW:RS1=";
            long long v19 = &v65;
          }
          else
          {
            sub_21617FAAC(&v55, (void *)(v8 + 2 * v31), a5 - v31);
            *(_OWORD *)long long v51 = v55;
            uint64_t v52 = v56;
            long long v19 = v51;
            uint64_t v18 = L"NW:SFX=";
          }
          sub_2162AF394((uint64_t)v48, v18, (const void **)v19);
          *((void *)&v55 + 1) = 0;
          uint64_t v56 = 0;
          *(void *)&long long v55 = (char *)&v55 + 8;
          sub_21610B834(__p, "Key");
          sub_216221D48();
        }
        v63[0] = &v28;
        sub_21613EFD0((void ***)v63);
      }
    }
  }
  return 0;
}

void sub_2162A9FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  for (uint64_t i = 192; i != -48; i -= 48)
    sub_2162AEC70(v73 + i);
  a68 = (uint64_t)&a23;
  sub_21613EFD0((void ***)&a68);
  uint64_t v76 = 0;
  while (1)
  {
    if (*((char *)&a69 + v76 + 71) < 0) {
      operator delete(*(void **)((char *)&a69 + v76 + 48));
    }
    v76 -= 24;
    if (v76 == -72)
    {
      if (a31 < 0) {
        operator delete(__p);
      }
      a69 = &a32;
      sub_21613EFD0((void ***)&a69);
      uint64_t v77 = 0;
      while (1)
      {
        if (*((char *)&a72 + v77 + 71) < 0) {
          operator delete(*(void **)((char *)&a72 + v77 + 48));
        }
        v77 -= 24;
        if (v77 == -72)
        {
          if (a40 < 0) {
            operator delete(a35);
          }
          a72 = &a41;
          sub_21613EFD0((void ***)&a72);
          uint64_t v78 = 0;
          while (1)
          {
            if (*((char *)&a73 + v78 + 71) < 0) {
              operator delete(*(void **)((char *)&a73 + v78 + 48));
            }
            v78 -= 24;
            if (v78 == -72)
            {
              if (a49 < 0) {
                operator delete(a44);
              }
              a73 = (uint64_t)&a50;
              sub_21613EFD0((void ***)&a73);
              uint64_t v79 = 0;
              while (1)
              {
                if (*((char *)&STACK[0x240] + v79 + 47) < 0) {
                  operator delete(*(void **)((char *)&STACK[0x240] + v79 + 24));
                }
                v79 -= 24;
                if (v79 == -48)
                {
                  if (a58 < 0) {
                    operator delete(a53);
                  }
                  a73 = (uint64_t)&a59;
                  sub_21613EFD0((void ***)&a73);
                  uint64_t v80 = 0;
                  while (1)
                  {
                    if (*((char *)&STACK[0x270] + v80 + 47) < 0) {
                      operator delete(*(void **)((char *)&STACK[0x270] + v80 + 24));
                    }
                    v80 -= 24;
                    if (v80 == -48)
                    {
                      if (a67 < 0) {
                        operator delete(a62);
                      }
                      __cxa_guard_abort(&qword_26797E398);
                      _Unwind_Resume(a1);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2162AA400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24))
  {
    int v9 = 0;
    __int16 v10 = 256;
    int v11 = 0;
    sub_2162AABDC(*(unsigned __int16 **)a1, a6, &v9);
    v8[0] = 0;
    v8[1] = 0;
    int v7 = v8;
    sub_21610B834(__p, "Reading");
    sub_216221D48();
  }
  return 0;
}

void sub_2162AAAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_2162AABDC(unsigned __int16 *result, unsigned __int16 *a2, unsigned char *a3)
{
  unint64_t v3 = a2[60];
  if (v3 <= 0x24E) {
    unsigned int v4 = word_21637826A[v3];
  }
  else {
    unsigned int v4 = 0;
  }
  unint64_t v5 = a2[61];
  if (v5 <= 0x24E) {
    unsigned int v6 = word_21637826A[v5];
  }
  else {
    unsigned int v6 = 0;
  }
  unint64_t v7 = a2[62];
  if (v7 <= 0x24E) {
    unsigned int v8 = word_21637826A[v7];
  }
  else {
    unsigned int v8 = 0;
  }
  unint64_t v9 = a2[63];
  if (v9 <= 0x24E) {
    unsigned int v10 = word_21637826A[v9];
  }
  else {
    unsigned int v10 = 0;
  }
  int v11 = (unsigned __int16 **)(&off_264269960 + 2 * word_216372A0A[7 * v4]);
  uint8x8_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v13 == (unsigned __int16 *)2)
  {
    char v15 = 0;
    uint64_t v16 = L"記号";
    unint64_t v17 = v12;
    while (1)
    {
      char v18 = v15;
      if (*(unsigned __int16 *)v16 != *v17) {
        break;
      }
      ++v17;
      ++v16;
      char v15 = 1;
      if (v18) {
        goto LABEL_68;
      }
    }
  }
  else if (v13 == (unsigned __int16 *)4)
  {
    uint64_t v14 = 0;
    while ((unsigned __int16)asc_2163C99E4[v14] == v12[v14])
    {
      if (++v14 == 4) {
        goto LABEL_68;
      }
    }
  }
  unsigned int v19 = result[38];
  if (v19 > v4 || result[39] < v4)
  {
    unsigned int v20 = result[36];
    if (v20 <= v4 && result[37] >= v4)
    {
      if (result[44] <= v10 && result[45] >= v10 || v19 <= v10 && result[39] >= v10) {
        a3[8] = 1;
      }
      uint64_t v26 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * v4 + 1]);
      if (v26[1] == 4)
      {
        uint64_t v27 = 0;
        uint64_t v28 = *v26;
        while (asc_2163C93BE[v27] == *(_WORD *)(v28 + v27 * 2))
        {
          if (++v27 == 4)
          {
            uint64_t v29 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * v6 + 1]);
            if (v29[1] == 3)
            {
              uint64_t v30 = 0;
              uint64_t v31 = *v29;
              while (asc_2163C8EFA[v30] == *(_WORD *)(v31 + v30 * 2))
              {
                if (++v30 == 3)
                {
                  unint64_t v32 = &off_264269960 + 2 * word_216372A0A[7 * v6 + 6];
                  if (v32[1] == (_UNKNOWN *)1 && *(_WORD *)*v32 == 12398)
                  {
                    a3[6] = 1;
                    uint64_t v33 = a3 + 2;
                    goto LABEL_69;
                  }
                  return result;
                }
              }
            }
            return result;
          }
        }
      }
    }
    else if (v13 == (unsigned __int16 *)3)
    {
      uint64_t v21 = 0;
      while ((unsigned __int16)asc_2163C9872[v21] == v12[v21])
      {
        if (++v21 == 3)
        {
          if (v20 <= v6 && result[37] >= v6) {
            goto LABEL_67;
          }
          if (result[44] <= v6 && result[45] >= v6 && v20 <= v8 && result[37] >= v8)
          {
            a3[6] = 1;
            a3[2] = 1;
            goto LABEL_72;
          }
          return result;
        }
      }
    }
    return result;
  }
  unsigned int v22 = result[36];
  if (v22 <= v6 && result[37] >= v6)
  {
LABEL_67:
    a3[1] = 1;
LABEL_68:
    uint64_t v33 = a3 + 6;
    goto LABEL_69;
  }
  if (result[44] <= v6 && result[45] >= v6 && v22 <= v8 && result[37] >= v8)
  {
    *(_WORD *)(a3 + 1) = 257;
    a3[6] = 1;
LABEL_72:
    uint64_t v33 = a3 + 7;
LABEL_69:
    *uint64_t v33 = 1;
    return result;
  }
  if (result[42] <= v4 && result[43] >= v4)
  {
    __int16 v23 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * v6 + 1]);
    if (v23[1] == 4)
    {
      uint64_t v24 = 0;
      uint64_t v25 = *v23;
      while (asc_2163C8E80[v24] == *(_WORD *)(v25 + v24 * 2))
      {
        if (++v24 == 4) {
          goto LABEL_68;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2162AAF88(uint64_t a1, uint64_t a2, uint64_t a3, UniChar *chars, CFIndex numChars, unsigned __int16 *a6, int a7, int a8, unsigned __int16 *a9, uint64_t a10)
{
  CFStringRef v17 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], chars, numChars, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (CEMStringIsSingleEmoji())
  {
    uint64_t v18 = 0;
  }
  else if (sub_2162A92DC(a1, chars, numChars, (uint64_t)a6, a9, a10))
  {
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v18 = sub_2162A969C(a1, v19, v20, (uint64_t)chars, numChars, (uint64_t)a6);
    if (((v18 | a7 ^ 1) & 1) == 0) {
      uint64_t v18 = sub_2162AA400(a1, a2, a3, (uint64_t)chars, numChars, a6);
    }
  }
  if (v17) {
    CFRelease(v17);
  }
  return v18;
}

void sub_2162AB0A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_2162AB0B8(unsigned __int16 **a1, unsigned __int16 *a2, void **a3, void **a4, void **a5, void **a6, void **a7, int a8, unsigned __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int16 a12, char a13)
{
  uint64_t v14 = a7;
  char v15 = a6;
  uint64_t v16 = a5;
  uint64_t v18 = a3;
  uint64_t v19 = a2;
  unsigned int v20 = a10;
  uint64_t v164 = *MEMORY[0x263EF8340];
  int v156 = 0;
  __int16 v157 = 256;
  int v158 = 0;
  if (a13)
  {
    LOBYTE(v156) = *a5 != a5[1];
    BYTE1(v156) = *a4 != a4[1];
    BYTE2(v156) = *a3 != a3[1];
    HIBYTE(v156) = *a6 != a6[1];
    LOBYTE(v157) = *a7 != a7[1];
    HIBYTE(v157) = a10 != 0;
    LOBYTE(v158) = a9 != 0;
    BYTE1(v158) = a8 != 0;
    BYTE2(v158) = a11 != 0;
    HIBYTE(v158) = a12 != 0;
  }
  else
  {
    sub_2162AABDC(*a1, a2, &v156);
    unsigned int v20 = a10;
  }
  unint64_t v21 = v19[60];
  if (v21 <= 0x24E) {
    int v22 = word_21637826A[v21];
  }
  else {
    int v22 = 0;
  }
  int v138 = a8;
  if (v20 <= 0x24E) {
    int v23 = word_21637826A[v20];
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = &word_216372A0A[7 * v22];
  uint64_t v25 = (unsigned __int16 **)(&off_264269960 + 2 * *v24);
  uint64_t v26 = *v25;
  uint64_t v27 = &word_216372A0A[7 * v23];
  uint64_t v28 = (unsigned __int16 **)(&off_264269960 + 2 * *v27);
  uint64_t v29 = *v28;
  unint64_t v140 = (unint64_t)v28[1];
  uint64_t v30 = (unsigned __int16 **)(&off_264269960 + 2 * v24[1]);
  uint64_t v31 = *v30;
  unint64_t v142 = (unint64_t)v30[1];
  unint64_t v143 = (unint64_t)v25[1];
  unint64_t v32 = (unsigned __int16 **)(&off_264269960 + 2 * v27[1]);
  unsigned int v141 = *v32;
  unint64_t v137 = (unint64_t)v32[1];
  uint64_t v33 = sub_2162D1CE4(6u);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    sub_216140140((uint64_t)v151);
    __src = v31;
    v139 = v16;
    sub_216140140((uint64_t)v146);
    char v34 = sub_216129E78(&v152, (uint64_t)"[", 1);
    int v35 = *((char *)v19 + 71);
    if (v35 >= 0) {
      int v36 = v19 + 24;
    }
    else {
      int v36 = (void *)*((void *)v19 + 6);
    }
    if (v35 >= 0) {
      unint64_t v37 = *((unsigned __int8 *)v19 + 71);
    }
    else {
      unint64_t v37 = *((void *)v19 + 7);
    }
    sub_2161E30A8(v36, v37, &v159);
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v38 = &v159;
    }
    else {
      char v38 = (std::string *)v159.__r_.__value_.__r.__words[0];
    }
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v159.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v159.__r_.__value_.__l.__size_;
    }
    char v40 = sub_216129E78(v34, (uint64_t)v38, size);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v159.__r_.__value_.__l.__data_);
    }
    sub_216129E78(v40, (uint64_t)"] ", 2);
    __int16 v41 = sub_216129E78(&v147, (uint64_t)"[", 1);
    sub_2161E30A8(*v139, ((unsigned char *)v139[1] - (unsigned char *)*v139) >> 1, &v159);
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v42 = &v159;
    }
    else {
      char v42 = (std::string *)v159.__r_.__value_.__r.__words[0];
    }
    if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v159.__r_.__value_.__l.__size_;
    }
    int v44 = sub_216129E78(v41, (uint64_t)v42, v43);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v159.__r_.__value_.__l.__data_);
    }
    sub_216129E78(v44, (uint64_t)"] ", 2);
    int v135 = HIBYTE(v157);
    if (HIBYTE(v157))
    {
      sub_216129E78(&v152, (uint64_t)"POS:(", 5);
      __int16 v45 = (void *)std::ostream::operator<<();
      char v46 = sub_216129E78(v45, (uint64_t)")", 1);
      sub_2161E30A8(v26, v143, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v47 = &v159;
      }
      else {
        uint64_t v47 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v48 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v159.__r_.__value_.__l.__size_;
      }
      __int16 v49 = sub_216129E78(v46, (uint64_t)v47, v48);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      char v50 = sub_216129E78(v49, (uint64_t)",", 1);
      sub_2161E30A8(__src, v142, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v51 = &v159;
      }
      else {
        long long v51 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v52 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v52 = v159.__r_.__value_.__l.__size_;
      }
      __int16 v53 = sub_216129E78(v50, (uint64_t)v51, v52);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v53, (uint64_t)" ", 1);
      sub_216129E78(&v147, (uint64_t)"POS:(", 5);
      char v54 = (void *)std::ostream::operator<<();
      long long v55 = sub_216129E78(v54, (uint64_t)")", 1);
      sub_2161E30A8(v29, v140, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v56 = &v159;
      }
      else {
        uint64_t v56 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = v159.__r_.__value_.__l.__size_;
      }
      char v58 = sub_216129E78(v55, (uint64_t)v56, v57);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      long long v59 = sub_216129E78(v58, (uint64_t)",", 1);
      sub_2161E30A8(v141, v137, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v60 = &v159;
      }
      else {
        int v60 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v61 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v61 = v159.__r_.__value_.__l.__size_;
      }
      char v62 = sub_216129E78(v59, (uint64_t)v60, v61);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v62, (uint64_t)" ", 1);
    }
    if ((_BYTE)v158)
    {
      sub_216129E78(&v152, (uint64_t)"LeftPOS1:", 9);
      __int16 v63 = (void *)std::ostream::operator<<();
      sub_216129E78(v63, (uint64_t)" ", 1);
      sub_216129E78(&v147, (uint64_t)"LeftPOS1:", 9);
      int v64 = (void *)std::ostream::operator<<();
      sub_216129E78(v64, (uint64_t)" ", 1);
    }
    if (BYTE1(v158))
    {
      sub_216129E78(&v152, (uint64_t)"LeftPOS2:", 9);
      __int16 v65 = (void *)std::ostream::operator<<();
      sub_216129E78(v65, (uint64_t)" ", 1);
      sub_216129E78(&v147, (uint64_t)"LeftPOS2:", 9);
      char v66 = (void *)std::ostream::operator<<();
      sub_216129E78(v66, (uint64_t)" ", 1);
    }
    if (BYTE2(v158))
    {
      sub_216129E78(&v152, (uint64_t)"RightPOS1:", 10);
      __int16 v67 = (void *)std::ostream::operator<<();
      sub_216129E78(v67, (uint64_t)" ", 1);
      sub_216129E78(&v147, (uint64_t)"RightPOS1:", 10);
      int v68 = (void *)std::ostream::operator<<();
      sub_216129E78(v68, (uint64_t)" ", 1);
    }
    if (HIBYTE(v158))
    {
      sub_216129E78(&v152, (uint64_t)"RightPOS2:", 10);
      uint64_t v69 = (void *)std::ostream::operator<<();
      sub_216129E78(v69, (uint64_t)" ", 1);
      sub_216129E78(&v147, (uint64_t)"RightPOS2:", 10);
      char v70 = (void *)std::ostream::operator<<();
      sub_216129E78(v70, (uint64_t)" ", 1);
    }
    if (BYTE1(v156))
    {
      unint64_t v71 = sub_216129E78(&v152, (uint64_t)"LeftSurface1:", 13);
      int v72 = *((char *)v19 + 23);
      if (v72 >= 0) {
        uint64_t v73 = v19;
      }
      else {
        uint64_t v73 = *(unsigned __int16 **)v19;
      }
      if (v72 >= 0) {
        unint64_t v74 = *((unsigned __int8 *)v19 + 23);
      }
      else {
        unint64_t v74 = *((void *)v19 + 1);
      }
      sub_2161E30A8(v73, v74, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v75 = &v159;
      }
      else {
        uint64_t v75 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v159.__r_.__value_.__l.__size_;
      }
      uint64_t v77 = sub_216129E78(v71, (uint64_t)v75, v76);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v77, (uint64_t)" ", 1);
      uint64_t v78 = sub_216129E78(&v147, (uint64_t)"LeftSurface1:", 13);
      sub_2161E30A8(*a4, ((unsigned char *)a4[1] - (unsigned char *)*a4) >> 1, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v79 = &v159;
      }
      else {
        uint64_t v79 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v80 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v80 = v159.__r_.__value_.__l.__size_;
      }
      std::string v81 = sub_216129E78(v78, (uint64_t)v79, v80);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v81, (uint64_t)" ", 1);
    }
    if (BYTE2(v156))
    {
      uint64_t v82 = sub_216129E78(&v152, (uint64_t)"LeftSurface2:", 13);
      int v83 = *((char *)v19 + 47);
      if (v83 >= 0) {
        uint64_t v84 = v19 + 12;
      }
      else {
        uint64_t v84 = (void *)*((void *)v19 + 3);
      }
      if (v83 >= 0) {
        unint64_t v85 = *((unsigned __int8 *)v19 + 47);
      }
      else {
        unint64_t v85 = *((void *)v19 + 4);
      }
      sub_2161E30A8(v84, v85, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v86 = &v159;
      }
      else {
        uint64_t v86 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v87 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v87 = v159.__r_.__value_.__l.__size_;
      }
      CFRange v88 = sub_216129E78(v82, (uint64_t)v86, v87);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v88, (uint64_t)" ", 1);
      CFRange v89 = sub_216129E78(&v147, (uint64_t)"LeftSurface2:", 13);
      sub_2161E30A8(*v18, ((unsigned char *)v18[1] - (unsigned char *)*v18) >> 1, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFStringRef v90 = &v159;
      }
      else {
        CFStringRef v90 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v91 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v91 = v159.__r_.__value_.__l.__size_;
      }
      unsigned int v92 = sub_216129E78(v89, (uint64_t)v90, v91);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v92, (uint64_t)" ", 1);
    }
    if (HIBYTE(v156))
    {
      CFStringRef v93 = sub_216129E78(&v152, (uint64_t)"RightSurface1:", 14);
      int v94 = *((char *)v19 + 95);
      if (v94 >= 0) {
        CFStringRef v95 = v19 + 36;
      }
      else {
        CFStringRef v95 = (void *)*((void *)v19 + 9);
      }
      if (v94 >= 0) {
        unint64_t v96 = *((unsigned __int8 *)v19 + 95);
      }
      else {
        unint64_t v96 = *((void *)v19 + 10);
      }
      sub_2161E30A8(v95, v96, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v97 = &v159;
      }
      else {
        uint64_t v97 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v98 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v98 = v159.__r_.__value_.__l.__size_;
      }
      unint64_t v99 = sub_216129E78(v93, (uint64_t)v97, v98);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v99, (uint64_t)" ", 1);
      int v100 = sub_216129E78(&v147, (uint64_t)"RightSurface1:", 14);
      sub_2161E30A8(*v15, ((unsigned char *)v15[1] - (unsigned char *)*v15) >> 1, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v101 = &v159;
      }
      else {
        uint64_t v101 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v102 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v102 = v159.__r_.__value_.__l.__size_;
      }
      int64x2_t v103 = sub_216129E78(v100, (uint64_t)v101, v102);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v103, (uint64_t)" ", 1);
    }
    if ((_BYTE)v157)
    {
      CFIndex v104 = sub_216129E78(&v152, (uint64_t)"RightSurface2:", 14);
      int v105 = *((char *)v19 + 119);
      if (v105 >= 0) {
        unint64_t v106 = v19 + 48;
      }
      else {
        unint64_t v106 = (void *)*((void *)v19 + 12);
      }
      if (v105 >= 0) {
        unint64_t v107 = *((unsigned __int8 *)v19 + 119);
      }
      else {
        unint64_t v107 = *((void *)v19 + 13);
      }
      sub_2161E30A8(v106, v107, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v108 = &v159;
      }
      else {
        int v108 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v109 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v109 = v159.__r_.__value_.__l.__size_;
      }
      uint64_t v110 = sub_216129E78(v104, (uint64_t)v108, v109);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v110, (uint64_t)" ", 1);
      char v111 = sub_216129E78(&v147, (uint64_t)"RightSurface2:", 14);
      sub_2161E30A8(*v14, ((unsigned char *)v14[1] - (unsigned char *)*v14) >> 1, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v112 = &v159;
      }
      else {
        uint64_t v112 = (std::string *)v159.__r_.__value_.__r.__words[0];
      }
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v113 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v113 = v159.__r_.__value_.__l.__size_;
      }
      uint64_t v114 = sub_216129E78(v111, (uint64_t)v112, v113);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
      sub_216129E78(v114, (uint64_t)" ", 1);
    }
    int v134 = v19;
    uint64_t v115 = sub_2162D1CE4(6u);
    unint64_t v133 = v18;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v127 = v15;
      int v128 = v14;
      sub_216178BC0((uint64_t)v153, &v159);
      int v129 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
      std::string::size_type v130 = v159.__r_.__value_.__r.__words[0];
      sub_216178BC0((uint64_t)v148, v144);
      unint64_t v131 = &v159;
      if (v129 < 0) {
        unint64_t v131 = (std::string *)v130;
      }
      if (v145 >= 0) {
        uint64_t v132 = v144;
      }
      else {
        uint64_t v132 = (void **)v144[0];
      }
      *(_DWORD *)buf = 136315394;
      __int16 v161 = v131;
      __int16 v162 = 2080;
      char v163 = v132;
      _os_log_debug_impl(&dword_2160F5000, v115, OS_LOG_TYPE_DEBUG, "[LPL::matchFeature] Comparing(%s) with(%s)", buf, 0x16u);
      if (v145 < 0) {
        operator delete(v144[0]);
      }
      uint64_t v14 = v128;
      char v15 = v127;
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v159.__r_.__value_.__l.__data_);
      }
    }
    unsigned int v116 = v14;
    v146[0] = *MEMORY[0x263F8C2B8];
    uint64_t v117 = v146[0];
    uint64_t v118 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    uint64_t v119 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    *(void *)((char *)v146 + *(void *)(v146[0] - 24)) = v119;
    uint64_t v120 = v118;
    uint64_t v147 = v118;
    v148[0] = MEMORY[0x263F8C318] + 16;
    if (v149 < 0) {
      operator delete((void *)v148[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166CA750](&v150);
    v151[0] = v117;
    *(void *)((char *)v151 + *(void *)(v117 - 24)) = v119;
    uint64_t v152 = v120;
    v153[0] = MEMORY[0x263F8C318] + 16;
    if (v154 < 0) {
      operator delete((void *)v153[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2166CA750](&v155);
    uint64_t v14 = v116;
    uint64_t v18 = v133;
    uint64_t v19 = v134;
    uint64_t v31 = __src;
    uint64_t v16 = v139;
    int v121 = v135;
  }
  else
  {
    int v121 = HIBYTE(v157);
  }
  uint64_t v123 = v141;
  unint64_t v122 = v142;
  unint64_t v124 = v143;
  if (v121)
  {
    if (a10 != 407 && v19[60] == 407 || v143 != v140) {
      return 0;
    }
    if (v143)
    {
      while (*v29 == *v26)
      {
        ++v26;
        ++v29;
        if (!--v124) {
          goto LABEL_185;
        }
      }
      return 0;
    }
LABEL_185:
    if (v142 != v137) {
      return 0;
    }
    if (v142)
    {
      while (*v123 == *v31)
      {
        ++v31;
        ++v123;
        if (!--v122) {
          goto LABEL_189;
        }
      }
      return 0;
    }
  }
LABEL_189:
  if ((_BYTE)v158) {
    BOOL v125 = v19[61] == a9;
  }
  else {
    BOOL v125 = 1;
  }
  if (!v125 || BYTE1(v158) && v19[62] != v138 || BYTE2(v158) && v19[63] != a11 || HIBYTE(v158) && v19[64] != a12) {
    return 0;
  }
  if ((!(_BYTE)v156 || (BOOL result = sub_2162AC010((unsigned char *)v19 + 48, *v16, v16[1])))
    && (!BYTE1(v156) || (BOOL result = sub_2162AC010(v19, *a4, a4[1])))
    && (!BYTE2(v156) || (BOOL result = sub_2162AC010((unsigned char *)v19 + 24, *v18, v18[1])))
    && (!HIBYTE(v156) || (BOOL result = sub_2162AC010((unsigned char *)v19 + 72, *v15, v15[1]))))
  {
    if (!(_BYTE)v157) {
      return 1;
    }
    BOOL result = sub_2162AC010((unsigned char *)v19 + 96, *v14, v14[1]);
    if (result) {
      return 1;
    }
  }
  return result;
}

void sub_2162ABF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v64 - 137) < 0) {
    operator delete(*(void **)(v64 - 160));
  }
  sub_216140418((uint64_t)&a29);
  sub_216140418((uint64_t)&a64);
  _Unwind_Resume(a1);
}

BOOL sub_2162AC010(unsigned char *a1, unsigned char *a2, unsigned char *a3)
{
  if ((char)a1[23] < 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4)
    {
      int64_t v3 = a3 - a2;
      if (v4 != v3 >> 1) {
        return 0;
      }
      a1 = *(unsigned char **)a1;
      return memcmp(a1, a2, v3) == 0;
    }
  }
  else if (a1[23])
  {
    int64_t v3 = a3 - a2;
    if (a1[23] != v3 >> 1) {
      return 0;
    }
    return memcmp(a1, a2, v3) == 0;
  }
  return a3 == a2;
}

uint64_t sub_2162AC078(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    BOOL v3 = sub_216232D08(v2);
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = sub_216232D08(v4);
  }
  else {
    BOOL v5 = 1;
  }
  return v3 & v5;
}

uint64_t sub_2162AC0C8(uint64_t a1, char *a2, uint64_t a3, void *a4, int a5, char a6, char a7)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  if (!a2
    || ((*(uint64_t (**)(char *))(*(void *)a2 + 88))(a2) & 1) != 0
    || (*(unsigned int (**)(char *))(*(void *)a2 + 96))(a2) == 80
    || (*(unsigned int (**)(char *))(*(void *)a2 + 96))(a2) == 89)
  {
    return 0;
  }
  uint8x8_t v12 = (void *)(*(uint64_t (**)(char *))(*(void *)a2 + 304))(a2);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  char v167 = v12;
  char v15 = (char *)(*(uint64_t (**)(char *))(*(void *)a2 + 544))(a2);
  unint64_t v17 = v16;
  __s1 = v15;
  v209[0] = v15;
  v209[1] = v16;
  uint64_t v18 = (unsigned __int16 *)(a2 + 96);
  uint64_t v176 = a2;
  if (a2[119] < 0) {
    uint64_t v18 = *(unsigned __int16 **)v18;
  }
  __src = v18;
  if (a5)
  {
    if (v16 && *(_WORD *)v15 == 32 && sub_2162ADC50(v209)) {
      return 0;
    }
  }
  uint64_t v203 = *(void *)(a1 + 8);
  long long v204 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  long long v207 = 0u;
  long long v208 = 0u;
  int v202 = 0;
  memset(&v201, 0, sizeof(v201));
  memset(&v200, 0, sizeof(v200));
  sub_2162EFEB4(a4, 0, (uint64_t *)&v201, (void **)&v200.__r_.__value_.__l.__data_, (_WORD *)&v202 + 1, &v202);
  if (HIWORD(v202) <= 0x64FuLL) {
    __int16 v174 = word_216378708[HIWORD(v202)];
  }
  else {
    __int16 v174 = 0;
  }
  if ((unsigned __int16)v202 <= 0x64FuLL) {
    __int16 v19 = word_216378708[(unsigned __int16)v202];
  }
  else {
    __int16 v19 = 0;
  }
  sub_21617FAAC(&v198, __s1, v17);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v167[1] - *v167) >> 3) <= 1)
  {
    long long v196 = 0uLL;
    uint64_t v197 = 0;
  }
  else
  {
    sub_21617FAAC(&v196, &__s1[2 * *(unsigned __int16 *)(*v167 + 24)], *(unsigned __int16 *)(*v167 + 64));
  }
  long long __p = 0uLL;
  uint64_t v195 = 0;
  if (v13 == v14)
  {
LABEL_378:
    uint64_t v10 = 0;
    goto LABEL_379;
  }
  uint64_t v169 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  uint64_t v159 = v13 - v14;
  if ((unint64_t)((v13 - v14) / 40) <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = (v13 - v14) / 40;
  }
  uint64_t v160 = v22;
  do
  {
    int v166 = v21;
    int v23 = v176;
    __int16 v163 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v176 + 312))(v176, v20);
    unsigned int v175 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v23 + 320))(v23, v20);
    unint64_t v180 = *(unsigned __int16 *)(*v167 + 40 * v20 + 24);
    int v165 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v23 + 352))(v23, v20);
    uint64_t v177 = v20;
    unsigned int v24 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v23 + 344))(v23, v20);
    unsigned int v164 = v24;
    if (v24 <= 0x64F) {
      __int16 v173 = word_216378708[v24];
    }
    else {
      __int16 v173 = 0;
    }
    uint64_t v168 = v20 + 1;
    unsigned int v25 = (*(uint64_t (**)(char *))(*(void *)v176 + 344))(v176);
    if (v25 <= 0x64F) {
      __int16 v26 = word_216378708[v25];
    }
    else {
      __int16 v26 = 0;
    }
    unint64_t v27 = v177 + 2;
    unsigned int v28 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v176 + 344))(v176, v177 + 2);
    if (v28 <= 0x64F) {
      __int16 v29 = word_216378708[v28];
    }
    else {
      __int16 v29 = 0;
    }
    if (v27 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v167[1] - *v167) >> 3))
    {
      __dst[0] = 0;
      __dst[1] = 0;
      uint64_t v183 = 0;
    }
    else
    {
      sub_21617FAAC(__dst, &__s1[2 * *(unsigned __int16 *)(*v167 + 40 * v177 + 24) + 2 * *(unsigned __int16 *)(*v167 + 40 * v168 + 24)], *(unsigned __int16 *)(*v167 + 40 * v27 + 24));
    }
    if (SHIBYTE(v195) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)__dst;
    uint64_t v195 = v183;
    sub_2162A6988((char *)__dst, (long long *)&v200, (long long *)&v201, &v198, &v196, &__p, v19, v174, v173, v26, v29);
    unsigned int v30 = *(_DWORD *)(*(uint64_t (**)(char *, uint64_t))(*(void *)v176 + 560))(v176, v177) - 3;
    if (v30 < 2 || (a6 & 1) != 0) {
      goto LABEL_58;
    }
    uint64_t v31 = *(void *)(a1 + 24);
    if (v31)
    {
      if (!v175 || (**(_DWORD **)(a1 + 16) & 0x4000000) == 0 || *__src == 9787) {
        goto LABEL_49;
      }
      if ((u_charType(*__src) - 19) >= 0xB)
      {
        uint64_t v31 = *(void *)(a1 + 24);
LABEL_49:
        if (__src) {
          unint64_t v32 = v175;
        }
        else {
          unint64_t v32 = 0;
        }
        unint64_t v157 = v32;
        sub_2162229D0(v31, __src, v32, 0, (uint64_t)&v217);
        unsigned int v158 = v30;
        std::string::size_type size = v217.__r_.__value_.__l.__size_;
        std::string::size_type v33 = v217.__r_.__value_.__r.__words[0];
        if (v217.__r_.__value_.__r.__words[0] != v217.__r_.__value_.__l.__size_)
        {
          uint64_t v34 = 0;
          do
          {
            std::string::size_type v35 = v33;
            uint64_t v36 = v33 + v34;
            uint64_t v171 = sub_216222F20(v33 + v34, "Surface");
            uint64_t v170 = sub_216222F20(v36, "Reading");
            unint64_t v37 = (void **)sub_216222F20(v36, "Surface");
            char v38 = (void **)sub_216222F20(v36, "LeftSurface1");
            __int16 v39 = (void **)sub_216222F20(v36, "LeftSurface2");
            char v40 = (void **)sub_216222F20(v36, "RightSurface1");
            unsigned __int16 v41 = sub_216222FB8(v36, "POS");
            unsigned __int16 v42 = sub_216222FB8(v36, "LeftPOS1");
            unsigned __int16 v43 = sub_216222FB8(v36, "LeftPOS2");
            unsigned __int16 v44 = sub_216222FB8(v36, "RightPOS1");
            if (sub_2162AB0B8((unsigned __int16 **)a1, (unsigned __int16 *)__dst, v39, v38, v37, v40, (void **)&unk_216386530, v43, v42, v41, v44, 0, 0))
            {
              sub_2161DEB04(&v203, *(_WORD **)v171, (uint64_t)(*(void *)(v171 + 8) - *(void *)v171) >> 1, v163, *(_WORD **)v170, (uint64_t)(*(void *)(v170 + 8) - *(void *)v170) >> 1, v165, v164);
              std::string::size_type v61 = sub_2162D1CE4(6u);
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
              {
                if (__s1) {
                  unint64_t v100 = v180;
                }
                else {
                  unint64_t v100 = 0;
                }
                sub_2161E30A8(__s1, v100, &v215);
                if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v101 = &v215;
                }
                else {
                  uint64_t v101 = (std::string *)v215.__r_.__value_.__r.__words[0];
                }
                sub_2161E30A8(__src, v157, &v214);
                int v102 = SHIBYTE(v214.__r_.__value_.__r.__words[2]);
                std::string::size_type v103 = v214.__r_.__value_.__r.__words[0];
                sub_2161E30A8(*(void **)v171, (uint64_t)(*(void *)(v171 + 8) - *(void *)v171) >> 1, &v213);
                CFIndex v104 = &v214;
                if (v102 < 0) {
                  CFIndex v104 = (std::string *)v103;
                }
                int v105 = &v213;
                if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  int v105 = (std::string *)v213.__r_.__value_.__r.__words[0];
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v101;
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v104;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                v219 = v105;
                __int16 v220 = 1024;
                int v221 = v165;
                __int16 v222 = 1024;
                unsigned int v223 = v164;
                __int16 v224 = 1024;
                int v225 = v192;
                __int16 v226 = 1024;
                int v227 = v193;
                _os_log_debug_impl(&dword_2160F5000, v61, OS_LOG_TYPE_DEBUG, "[LPL::applyLexicalPreferences] %s (%s) => %s (lc:%d rc:%d f-lc:%d f-rc:%d)", (uint8_t *)&buf, 0x38u);
                if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v213.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v214.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v215.__r_.__value_.__l.__data_);
                }
              }
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
              sub_2161921F0((void ***)&buf);
              goto LABEL_297;
            }
            if (v34 == 480) {
              break;
            }
            std::string::size_type v33 = v35;
            v34 += 32;
          }
          while (v34 + v35 != size);
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
        sub_2161921F0((void ***)&buf);
        unsigned int v30 = v158;
LABEL_58:
        if (v30 < 2) {
          goto LABEL_80;
        }
      }
    }
    sub_21617FAAC(&v212, __src, v175);
    unint64_t v45 = sub_2161A6920(a1 + 112, (uint64_t)&v212);
    int8x8_t v46 = *(int8x8_t *)(a1 + 96);
    if (!*(void *)&v46) {
      goto LABEL_76;
    }
    unint64_t v47 = v45;
    uint8x8_t v48 = (uint8x8_t)vcnt_s8(v46);
    v48.i16[0] = vaddlv_u8(v48);
    unint64_t v49 = v48.u32[0];
    if (v48.u32[0] > 1uLL)
    {
      unint64_t v50 = v45;
      if (v45 >= *(void *)&v46) {
        unint64_t v50 = v45 % *(void *)&v46;
      }
    }
    else
    {
      unint64_t v50 = (*(void *)&v46 - 1) & v45;
    }
    long long v51 = *(unsigned __int16 ***)(*(void *)(a1 + 88) + 8 * v50);
    if (!v51 || (std::string::size_type v52 = *v51) == 0)
    {
LABEL_75:
      v46.i8[0] = 0;
      goto LABEL_76;
    }
    while (1)
    {
      unint64_t v53 = *((void *)v52 + 1);
      if (v47 == v53) {
        break;
      }
      if (v49 > 1)
      {
        if (v53 >= *(void *)&v46) {
          v53 %= *(void *)&v46;
        }
      }
      else
      {
        v53 &= *(void *)&v46 - 1;
      }
      if (v53 != v50) {
        goto LABEL_75;
      }
LABEL_74:
      std::string::size_type v52 = *(unsigned __int16 **)v52;
      if (!v52) {
        goto LABEL_75;
      }
    }
    if (!sub_2161A6964(a1 + 120, v52 + 8, (unsigned __int16 *)&v212)) {
      goto LABEL_74;
    }
    uint64_t v67 = *((void *)v52 + 5);
    uint64_t v66 = *((void *)v52 + 6);
    while (1)
    {
      if (v67 == v66)
      {
        char v84 = 0;
        goto LABEL_218;
      }
      int v68 = *(char *)(v67 + 95);
      if (v68 >= 0) {
        uint64_t v69 = (__int16 *)(v67 + 72);
      }
      else {
        uint64_t v69 = *(__int16 **)(v67 + 72);
      }
      if (v68 >= 0) {
        uint64_t v70 = *(unsigned __int8 *)(v67 + 95);
      }
      else {
        uint64_t v70 = *(void *)(v67 + 80);
      }
      memset(&buf, 0, sizeof(buf));
      sub_21620EF64((char *)&buf, v69, &v69[v70], v70);
      int v71 = *(char *)(v67 + 47);
      if (v71 >= 0) {
        int v72 = (__int16 *)(v67 + 24);
      }
      else {
        int v72 = *(__int16 **)(v67 + 24);
      }
      if (v71 >= 0) {
        uint64_t v73 = *(unsigned __int8 *)(v67 + 47);
      }
      else {
        uint64_t v73 = *(void *)(v67 + 32);
      }
      memset(&v217, 0, sizeof(v217));
      sub_21620EF64((char *)&v217, v72, &v72[v73], v73);
      int v74 = *(char *)(v67 + 71);
      if (v74 >= 0) {
        uint64_t v75 = (__int16 *)(v67 + 48);
      }
      else {
        uint64_t v75 = *(__int16 **)(v67 + 48);
      }
      if (v74 >= 0) {
        uint64_t v76 = *(unsigned __int8 *)(v67 + 71);
      }
      else {
        uint64_t v76 = *(void *)(v67 + 56);
      }
      memset(&v215, 0, sizeof(v215));
      sub_21620EF64((char *)&v215, v75, &v75[v76], v76);
      int v77 = *(char *)(v67 + 119);
      if (v77 >= 0) {
        uint64_t v78 = (__int16 *)(v67 + 96);
      }
      else {
        uint64_t v78 = *(__int16 **)(v67 + 96);
      }
      if (v77 >= 0) {
        uint64_t v79 = *(unsigned __int8 *)(v67 + 119);
      }
      else {
        uint64_t v79 = *(void *)(v67 + 104);
      }
      memset(&v214, 0, sizeof(v214));
      sub_21620EF64((char *)&v214, v78, &v78[v79], v79);
      int v80 = *(char *)(v67 + 143);
      if (v80 >= 0) {
        std::string v81 = (__int16 *)(v67 + 120);
      }
      else {
        std::string v81 = *(__int16 **)(v67 + 120);
      }
      if (v80 >= 0) {
        uint64_t v82 = *(unsigned __int8 *)(v67 + 143);
      }
      else {
        uint64_t v82 = *(void *)(v67 + 128);
      }
      memset(&v213, 0, sizeof(v213));
      sub_21620EF64((char *)&v213, v81, &v81[v82], v82);
      BOOL v83 = sub_2162AB0B8((unsigned __int16 **)a1, (unsigned __int16 *)__dst, (void **)&v215.__r_.__value_.__l.__data_, (void **)&v217.__r_.__value_.__l.__data_, (void **)&buf.__r_.__value_.__l.__data_, (void **)&v214.__r_.__value_.__l.__data_, (void **)&v213.__r_.__value_.__l.__data_, *(unsigned __int16 *)(v67 + 148), *(_WORD *)(v67 + 146), *(_WORD *)(v67 + 144), *(_WORD *)(v67 + 150), *(_WORD *)(v67 + 152), 1);
      if (v213.__r_.__value_.__r.__words[0])
      {
        v213.__r_.__value_.__l.__size_ = v213.__r_.__value_.__r.__words[0];
        operator delete(v213.__r_.__value_.__l.__data_);
      }
      if (v214.__r_.__value_.__r.__words[0])
      {
        v214.__r_.__value_.__l.__size_ = v214.__r_.__value_.__r.__words[0];
        operator delete(v214.__r_.__value_.__l.__data_);
      }
      if (v215.__r_.__value_.__r.__words[0])
      {
        v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
        operator delete(v215.__r_.__value_.__l.__data_);
      }
      if (v217.__r_.__value_.__r.__words[0])
      {
        v217.__r_.__value_.__l.__size_ = v217.__r_.__value_.__r.__words[0];
        operator delete(v217.__r_.__value_.__l.__data_);
      }
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (v83) {
        break;
      }
      v67 += 160;
    }
    if (*(char *)(v67 + 23) < 0)
    {
      unint64_t v99 = *(_WORD **)v67;
      uint64_t v95 = *(void *)(v67 + 8);
      if (v95 != v180 || memcmp(__s1, *(const void **)v67, 2 * v180))
      {
        std::string::size_type v96 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
        BOOL v97 = (v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v98 = &v212;
        }
        else {
          std::string::size_type v98 = (std::string *)v212.__r_.__value_.__r.__words[0];
        }
        goto LABEL_213;
      }
LABEL_224:
      char v54 = 0;
      char v84 = 1;
      goto LABEL_218;
    }
    uint64_t v95 = *(unsigned __int8 *)(v67 + 23);
    if (v180 == v95 && !memcmp(__s1, (const void *)v67, 2 * v95)) {
      goto LABEL_224;
    }
    std::string::size_type v96 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
    BOOL v97 = (v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v98 = &v212;
    }
    else {
      std::string::size_type v98 = (std::string *)v212.__r_.__value_.__r.__words[0];
    }
    unint64_t v99 = (_WORD *)v67;
LABEL_213:
    if (v97) {
      std::string::size_type v106 = v212.__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v106 = v96;
    }
    sub_2161DEB04(&v203, v99, v95, v163, v98, v106, v165, v164);
    unint64_t v107 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
    {
      if (__s1) {
        unint64_t v137 = v180;
      }
      else {
        unint64_t v137 = 0;
      }
      sub_2161E30A8(__s1, v137, &v217);
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v138 = &v217;
      }
      else {
        int v138 = (std::string *)v217.__r_.__value_.__r.__words[0];
      }
      if (__src) {
        unint64_t v139 = v175;
      }
      else {
        unint64_t v139 = 0;
      }
      sub_2161E30A8(__src, v139, &v215);
      int v140 = SHIBYTE(v215.__r_.__value_.__r.__words[2]);
      std::string::size_type v141 = v215.__r_.__value_.__r.__words[0];
      int v142 = *(char *)(v67 + 23);
      if (v142 >= 0) {
        unint64_t v143 = (void *)v67;
      }
      else {
        unint64_t v143 = *(void **)v67;
      }
      if (v142 >= 0) {
        unint64_t v144 = *(unsigned __int8 *)(v67 + 23);
      }
      else {
        unint64_t v144 = *(void *)(v67 + 8);
      }
      sub_2161E30A8(v143, v144, &v214);
      char v145 = &v215;
      if (v140 < 0) {
        char v145 = (std::string *)v141;
      }
      CFStringRef v146 = &v214;
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        CFStringRef v146 = (std::string *)v214.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v138;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v145;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v219 = v146;
      _os_log_debug_impl(&dword_2160F5000, v107, OS_LOG_TYPE_DEBUG, "[LPL::applyLexicalRules] Rewriting %s (%s) => %s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v214.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v215.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v217.__r_.__value_.__l.__data_);
      }
    }
    char v84 = 1;
    char v54 = 1;
LABEL_218:
    v46.i8[0] = v84 & v54;
LABEL_76:
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v212.__r_.__value_.__l.__data_);
      if (v46.i8[0]) {
        goto LABEL_297;
      }
    }
    else if (v46.i8[0])
    {
      goto LABEL_297;
    }
LABEL_80:
    if (a7) {
      goto LABEL_269;
    }
    if (!*(void *)(a1 + 32)) {
      goto LABEL_269;
    }
    uint64_t v216 = 0;
    int v55 = sub_2161EC60C((uint64_t)__s1, v180, &v216, 1);
    if (!v55) {
      goto LABEL_269;
    }
    uint64_t v56 = v216;
    if (!v216) {
      goto LABEL_269;
    }
    if ((v189 & 0x80u) == 0) {
      unint64_t v57 = v189;
    }
    else {
      unint64_t v57 = (unint64_t)v188[1];
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E3A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797E3A8))
    {
      qword_26797E3A0 = (uint64_t)sub_2161A2A80();
      __cxa_guard_release(&qword_26797E3A8);
    }
    if (v56 == v180 && !v57 && !*(unsigned char *)qword_26797E3A0)
    {
      int v58 = sub_2161EC60C((uint64_t)__src, v175, 0, 0);
      if ((v55 - 3) >= 0xFFFFFFFE && v58 == v55) {
        goto LABEL_269;
      }
    }
    memset(&v215, 0, sizeof(v215));
    if (v180 == v216)
    {
      *((unsigned char *)&v215.__r_.__value_.__s + 23) = 0;
      LOWORD(v215.__r_.__value_.__l.__data_) = 0;
      long long v59 = L"NW:RS1=";
      int v60 = (std::string *)v188;
    }
    else
    {
      sub_21617FAAC(&buf, &__s1[2 * v216], v180 - v216);
      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v215.__r_.__value_.__l.__data_);
      }
      std::string v215 = buf;
      int v60 = &v215;
      long long v59 = L"NW:SFX=";
    }
    sub_2162AF394((uint64_t)&v214, v59, (const void **)&v60->__r_.__value_.__l.__data_);
    if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v62 = (unsigned __int16 *)&v214;
    }
    else {
      char v62 = (unsigned __int16 *)v214.__r_.__value_.__r.__words[0];
    }
    if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v63 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v63 = v214.__r_.__value_.__l.__size_;
    }
    sub_2162229D0(*(void *)(a1 + 32), v62, v63, 0, (uint64_t)&v213);
    if (v213.__r_.__value_.__l.__size_ == v213.__r_.__value_.__r.__words[0]
      || (int v64 = sub_216222FB8((uint64_t)v213.__r_.__value_.__l.__data_, "IntValue"), v64 == v55))
    {
      int v65 = 2;
      goto LABEL_264;
    }
    sub_21617FAAC(&v212, __s1, v180);
    if (v55 == 2)
    {
      sub_2161EB920((uint64_t)&v212);
      v211.__r_.__value_.__r.__words[0] = 0;
      goto LABEL_164;
    }
    v211.__r_.__value_.__r.__words[0] = 0;
    if (v55 != 3)
    {
LABEL_164:
      if (sub_2161EBE08((uint64_t)&v212, (uint64_t *)&v211)) {
        goto LABEL_165;
      }
LABEL_250:
      int v65 = 2;
      goto LABEL_262;
    }
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v85 = &v212;
    }
    else {
      unint64_t v85 = (std::string *)v212.__r_.__value_.__r.__words[0];
    }
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v86 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v86 = v212.__r_.__value_.__l.__size_;
    }
    if ((sub_2161EBEE4((uint64_t)v85, v86, (uint64_t *)&v211) & 1) == 0) {
      goto LABEL_250;
    }
LABEL_165:
    std::string::size_type v87 = (std::string *)v212.__r_.__value_.__r.__words[0];
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v87 = &v212;
    }
    std::string::size_type v88 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v88 = v212.__r_.__value_.__l.__size_;
    }
    std::string::size_type v89 = 0;
    if (v88)
    {
      while (1)
      {
        int v90 = *((unsigned __int16 *)&v87->__r_.__value_.__l.__data_ + v89);
        BOOL v91 = v90 == 48 || v90 == 65296;
        if (!v91 && v90 != 12295) {
          break;
        }
        if (v88 == ++v89)
        {
          std::string::size_type v89 = v88;
          break;
        }
      }
    }
    BOOL v93 = v211.__r_.__value_.__r.__words[0] == 0;
    sub_216184F68(&buf, byte_2163CA662);
    std::string::size_type v94 = v89 - v93;
    switch(v64)
    {
      case 3:
        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
        {
          *(_WORD *)v212.__r_.__value_.__l.__data_ = 0;
          v212.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          LOWORD(v212.__r_.__value_.__l.__data_) = 0;
          *((unsigned char *)&v212.__r_.__value_.__s + 23) = 0;
        }
        if (v94) {
          char v108 = 0;
        }
        else {
          char v108 = sub_2161EB850((uint64_t)v211.__r_.__value_.__l.__data_, (uint64_t)&v212);
        }
        break;
      case 2:
        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
        {
          *(_WORD *)v212.__r_.__value_.__l.__data_ = 0;
          v212.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          LOWORD(v212.__r_.__value_.__l.__data_) = 0;
          *((unsigned char *)&v212.__r_.__value_.__s + 23) = 0;
        }
        if (sub_2161EBC6C((uint64_t)v211.__r_.__value_.__l.__data_, (uint64_t)&v212)) {
          char v108 = sub_2161EBA4C((uint64_t)&v212);
        }
        else {
          char v108 = 0;
        }
        if (v94)
        {
          std::string::size_type v110 = v94;
          do
          {
            sub_2161845F8((uint64_t)&buf, 65296);
            --v110;
          }
          while (v110);
          goto LABEL_239;
        }
        break;
      case 1:
        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
        {
          *(_WORD *)v212.__r_.__value_.__l.__data_ = 0;
          v212.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          LOWORD(v212.__r_.__value_.__l.__data_) = 0;
          *((unsigned char *)&v212.__r_.__value_.__s + 23) = 0;
        }
        char v108 = sub_2161EBC6C((uint64_t)v211.__r_.__value_.__l.__data_, (uint64_t)&v212);
        std::string::size_type v109 = v94;
        if (v94)
        {
          do
          {
            sub_2161845F8((uint64_t)&buf, 48);
            --v109;
          }
          while (v109);
          goto LABEL_239;
        }
        break;
      default:
        char v108 = 0;
LABEL_239:
        if (v94)
        {
          sub_21622E0BC((const void **)&buf.__r_.__value_.__l.__data_, (const void **)&v212.__r_.__value_.__l.__data_, (uint64_t)&v217);
          if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v212.__r_.__value_.__l.__data_);
          }
          std::string v212 = v217;
        }
        break;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if ((v108 & 1) == 0) {
      goto LABEL_250;
    }
    if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v111 = v215.__r_.__value_.__l.__size_;
      if (v215.__r_.__value_.__l.__size_)
      {
        uint64_t v112 = (std::string *)v215.__r_.__value_.__r.__words[0];
LABEL_253:
        sub_216198220((uint64_t)&v212, v112, v111);
      }
    }
    else
    {
      std::string::size_type v111 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
      if (*((unsigned char *)&v215.__r_.__value_.__s + 23))
      {
        uint64_t v112 = &v215;
        goto LABEL_253;
      }
    }
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v113 = &v212;
    }
    else {
      std::string::size_type v113 = (std::string *)v212.__r_.__value_.__r.__words[0];
    }
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v114 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v114 = v212.__r_.__value_.__l.__size_;
    }
    sub_2161DEB04(&v203, v113, v114, v163, __src, v175, v165, v164);
    uint64_t v115 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
    {
      if (__s1) {
        unint64_t v147 = v180;
      }
      else {
        unint64_t v147 = 0;
      }
      sub_2161E30A8(__s1, v147, &v217);
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v148 = &v217;
      }
      else {
        uint64_t v148 = (std::string *)v217.__r_.__value_.__r.__words[0];
      }
      if (__src) {
        unint64_t v149 = v175;
      }
      else {
        unint64_t v149 = 0;
      }
      sub_2161E30A8(__src, v149, &v211);
      int v150 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
      std::string::size_type v151 = v211.__r_.__value_.__r.__words[0];
      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v152 = &v212;
      }
      else {
        uint64_t v152 = (std::string *)v212.__r_.__value_.__r.__words[0];
      }
      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v153 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v153 = v212.__r_.__value_.__l.__size_;
      }
      sub_2161E30A8(v152, v153, &v210);
      char v154 = &v211;
      if (v150 < 0) {
        char v154 = (std::string *)v151;
      }
      uint64_t v155 = &v210;
      if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v155 = (std::string *)v210.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v148;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v154;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v219 = v155;
      __int16 v220 = 1024;
      int v221 = v165;
      __int16 v222 = 1024;
      unsigned int v223 = v164;
      __int16 v224 = 1024;
      int v225 = v192;
      __int16 v226 = 1024;
      int v227 = v193;
      _os_log_debug_impl(&dword_2160F5000, v115, OS_LOG_TYPE_DEBUG, "[LPL::applyNonLexicalPreferences] %s (%s) => %s (lc:%d rc:%d f-lc:%d f-rc:%d)", (uint8_t *)&buf, 0x38u);
      if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v210.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v211.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v217.__r_.__value_.__l.__data_);
      }
    }
    int v65 = 1;
LABEL_262:
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v212.__r_.__value_.__l.__data_);
    }
LABEL_264:
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v213;
    sub_2161921F0((void ***)&buf);
    if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v214.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v215.__r_.__value_.__l.__data_);
    }
    if (v65 == 2)
    {
LABEL_269:
      int v116 = sub_21628DCE0(**(_DWORD **)(a1 + 16)) ^ 1;
      if (v159 != 40) {
        LOBYTE(v116) = 1;
      }
      if (v116) {
        goto LABEL_294;
      }
      if (v180)
      {
        BOOL v117 = 0;
        for (unint64_t i = 0; i != v180; v117 = i >= v180)
        {
          __int16 v119 = *(_WORD *)&__s1[2 * i];
          BOOL v122 = (unsigned __int16)((v119 & 0xFFDF) - 65) >= 0x1Au;
          unsigned int v120 = (unsigned __int16)(v119 + 191);
          unsigned __int16 v121 = v119 + 223;
          BOOL v122 = v122 && v120 >= 0x1A;
          if (v122 && v121 > 0x19u) {
            break;
          }
          ++i;
        }
        if (!v117) {
          goto LABEL_294;
        }
      }
      if (!v175) {
        goto LABEL_294;
      }
      BOOL v124 = 0;
      for (j = 0; j != v175; BOOL v124 = ++j >= (unint64_t)v175)
      {
        unsigned __int16 v126 = __src[j];
        BOOL v122 = (unsigned __int16)((v126 & 0xFFDF) - 65) >= 0x1Au;
        unsigned int v127 = (unsigned __int16)(v126 + 191);
        unsigned __int16 v128 = v126 + 223;
        if (v122 && v127 >= 0x1A && v128 > 0x19u) {
          break;
        }
      }
      if (v124)
      {
LABEL_294:
        sub_2161DEB04(&v203, __s1, v180, v163, __src, v175, v165, v164);
        int v131 = 0;
        goto LABEL_298;
      }
      sub_2161E5080(__src, v175, &buf);
      sub_2161DEB04(&v203, buf.__r_.__value_.__l.__data_, (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 1, v163, __src, v175, v165, v164);
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
LABEL_297:
    int v131 = 1;
LABEL_298:
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v200.__r_.__value_.__l.__data_);
    }
    std::string v200 = v201;
    *((unsigned char *)&v201.__r_.__value_.__s + 23) = 0;
    LOWORD(v201.__r_.__value_.__l.__data_) = 0;
    uint64_t v132 = v177;
    if (v177)
    {
      LODWORD(v132) = 0;
      unint64_t v133 = (unsigned __int16 *)(v207 + 24);
      uint64_t v134 = v169;
      do
      {
        int v135 = *v133;
        v133 += 20;
        LODWORD(v132) = v132 + v135;
        v134 -= 40;
      }
      while (v134);
      uint64_t v132 = (int)v132;
    }
    if ((void)v204) {
      unint64_t v136 = *(unsigned __int16 *)(v207 + 40 * v177 + 24);
    }
    else {
      unint64_t v136 = 0;
    }
    sub_21617FAAC(&buf, (void *)(v204 + 2 * v132), v136);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v201.__r_.__value_.__l.__data_);
    }
    std::string v201 = buf;
    if (SHIBYTE(v199) < 0) {
      operator delete((void *)v198);
    }
    long long v198 = v196;
    uint64_t v199 = v197;
    long long v196 = __p;
    uint64_t v197 = v195;
    HIBYTE(v195) = 0;
    LOWORD(__p) = 0;
    if (v191 < 0) {
      operator delete(v190);
    }
    if ((char)v189 < 0) {
      operator delete(v188[0]);
    }
    if (v187 < 0) {
      operator delete(v186);
    }
    if (v185 < 0) {
      operator delete(v184);
    }
    if (SHIBYTE(v183) < 0) {
      operator delete(__dst[0]);
    }
    int v21 = v166 | v131;
    __int16 v19 = v174;
    __src += v175;
    v169 += 40;
    uint64_t v20 = v168;
    __s1 += 2 * v180;
    __int16 v174 = v173;
  }
  while (v168 != v160);
  if ((v21 & 1) == 0) {
    goto LABEL_378;
  }
  (*(void (**)(char *))(*(void *)v176 + 112))(v176);
  (*(void (**)(char *))(*(void *)v176 + 96))(v176);
  (*(void (**)(char *))(*(void *)v176 + 408))(v176);
  uint64_t v10 = sub_2161DECC4(&v203);
  if (v10)
  {
    uint64_t v156 = (*(uint64_t (**)(char *))(*(void *)v176 + 200))(v176);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 512))(v10, v156);
  }
LABEL_379:
  if (SHIBYTE(v195) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v197) < 0) {
    operator delete((void *)v196);
  }
  if (SHIBYTE(v199) < 0) {
    operator delete((void *)v198);
  }
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v200.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v208 + 1)) {
    CFRelease(*((CFTypeRef *)&v208 + 1));
  }
  *((void *)&v208 + 1) = 0;
  if ((void)v207)
  {
    *((void *)&v207 + 1) = v207;
    operator delete((void *)v207);
  }
  if (*((void *)&v205 + 1))
  {
    *(void *)&long long v206 = *((void *)&v205 + 1);
    operator delete(*((void **)&v205 + 1));
  }
  if ((void)v204)
  {
    *((void *)&v204 + 1) = v204;
    operator delete((void *)v204);
  }
  return v10;
}

void sub_2162AD984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_26797E3A8);
  sub_2162A6108((uint64_t)&a40);
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  sub_2161DED70((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

BOOL sub_2162ADC50(void *a1)
{
  if (!a1[1]) {
    return 0;
  }
  unint64_t v2 = 0;
  uint64_t v3 = MEMORY[0x263EF8318];
  do
  {
    unint64_t v4 = *(unsigned __int16 *)(*a1 + 2 * v2);
    if (v4 <= 0x7F) {
      int v5 = *(_DWORD *)(v3 + 4 * v4 + 60) & 0x40000;
    }
    else {
      int v5 = __maskrune(v4, 0x40000uLL);
    }
    BOOL result = v5 != 0;
    if (!v5) {
      break;
    }
    ++v2;
  }
  while (v2 < a1[1]);
  return result;
}

uint64_t sub_2162ADCDC(unsigned __int16 **a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    uint64_t v2 = 2 * (void)v1;
    uint64_t v3 = *a1;
    uint64_t result = 1;
    do
    {
      unsigned int v5 = *v3;
      if (v5 > 0xFF00)
      {
        unsigned int v6 = v5 - 65281;
        BOOL v7 = v6 > 0x1E;
        int v8 = (1 << v6) & 0x40002801;
        if (!v7 && v8 != 0) {
          return result;
        }
      }
      else if (v5 - 12289 < 2 || v5 == 44 || v5 == 46)
      {
        return result;
      }
      ++v3;
      v2 -= 2;
    }
    while (v2);
  }
  return 0;
}

BOOL sub_2162ADD60(unsigned __int16 *a1, unint64_t a2, unsigned int a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F3F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F3F0))
  {
    sub_2161C04AC(0);
    qword_26797F3E8 = (uint64_t)&qword_26797EF20;
    __cxa_guard_release(&qword_26797F3F0);
  }
  if (*(unsigned __int16 *)(qword_26797F3E8 + 88) <= a3 && *(unsigned __int16 *)(qword_26797F3E8 + 90) >= a3) {
    return 0;
  }
  if (a3 > 0x64F) {
    return 1;
  }
  int v6 = (unsigned __int16)word_216378708[a3];
  if (v6 != 409 && v6 != 407) {
    return 1;
  }
  if (a2 > 5) {
    return 0;
  }
  if (a2)
  {
    int v8 = 0;
    int v9 = 0;
    int v10 = 0;
    uint64_t v11 = 2 * a2;
    do
    {
      UChar32 v12 = *a1;
      if ((v12 - 12353) < 0x56 || v12 == 12540 || v12 == 12316)
      {
        ++v10;
      }
      else if ((v12 - 12449) < 0x5A || v12 == 12540 || v12 == 12316)
      {
        ++v9;
      }
      else
      {
        UBlockCode Code = ublock_getCode(v12);
        if ((Code - 58) <= 0x25 && ((1 << (Code - 58)) & 0x3000203003) != 0) {
          ++v8;
        }
      }
      ++a1;
      v11 -= 2;
    }
    while (v11);
  }
  else
  {
    int v10 = 0;
    int v9 = 0;
    int v8 = 0;
  }
  BOOL result = 1;
  if (a2 != v10 && a2 != v9 && (a2 > 3 || a2 != v8)) {
    return a2 == v8 + v10 && v8 != 0;
  }
  return result;
}

void sub_2162ADF30(_Unwind_Exception *a1)
{
}

uint64_t sub_2162ADF48(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v4 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
  unint64_t v5 = 0;
  char v6 = 0;
  long long __p = 0;
  unint64_t v45 = 0;
  int8x8_t v46 = 0;
  while (v5 < (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2))
  {
    unsigned int v7 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 568))(a2, v5);
    if (v7 >= 2)
    {
      int v8 = &v4[v7];
      sub_2161BF794(v4, v8, (uint64_t)&__p);
      unint64_t v4 = v8;
      goto LABEL_96;
    }
    int v10 = (unsigned __int16)*v4++;
    int v9 = v10;
    int v11 = a1[64];
    if (v11 != 12290 && (v9 == 46 || v9 == 65294 || v9 == 12290))
    {
      UChar32 v12 = v45;
      if (v45 >= v46)
      {
        uint64_t v13 = (char *)__p;
        uint64_t v19 = v45 - (unsigned char *)__p;
        if (v45 - (unsigned char *)__p <= -3) {
          goto LABEL_102;
        }
        uint64_t v20 = v19 >> 1;
        if (v46 - (unsigned char *)__p <= (unint64_t)((v19 >> 1) + 1)) {
          uint64_t v21 = v20 + 1;
        }
        else {
          uint64_t v21 = v46 - (unsigned char *)__p;
        }
        if ((unint64_t)(v46 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v17 = v21;
        }
        if (v17)
        {
          uint64_t v18 = (char *)sub_21610FD44((uint64_t)&v46, v17);
          uint64_t v13 = (char *)__p;
          UChar32 v12 = v45;
          LOWORD(v11) = a1[64];
        }
        else
        {
          uint64_t v18 = 0;
        }
        unint64_t v27 = &v18[2 * v20];
        *(_WORD *)unint64_t v27 = v11;
        __int16 v26 = v27 + 2;
        while (v12 != v13)
        {
          __int16 v28 = *((_WORD *)v12 - 1);
          v12 -= 2;
          *((_WORD *)v27 - 1) = v28;
          v27 -= 2;
        }
        goto LABEL_92;
      }
    }
    else
    {
      int v11 = a1[65];
      if (v11 != 12289 && (v9 == 44 || v9 == 65292 || v9 == 12289))
      {
        UChar32 v12 = v45;
        if (v45 >= v46)
        {
          uint64_t v13 = (char *)__p;
          uint64_t v22 = v45 - (unsigned char *)__p;
          if (v45 - (unsigned char *)__p < -2) {
            goto LABEL_102;
          }
          uint64_t v23 = v22 >> 1;
          if (v46 - (unsigned char *)__p <= (unint64_t)((v22 >> 1) + 1)) {
            uint64_t v24 = v23 + 1;
          }
          else {
            uint64_t v24 = v46 - (unsigned char *)__p;
          }
          if ((unint64_t)(v46 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v17 = v24;
          }
          if (v17)
          {
            uint64_t v18 = (char *)sub_21610FD44((uint64_t)&v46, v17);
            uint64_t v13 = (char *)__p;
            UChar32 v12 = v45;
            LOWORD(v11) = a1[65];
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v27 = &v18[2 * v23];
          *(_WORD *)unint64_t v27 = v11;
          __int16 v26 = v27 + 2;
          while (v12 != v13)
          {
            __int16 v38 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v27 - 1) = v38;
            v27 -= 2;
          }
          goto LABEL_92;
        }
      }
      else
      {
        int v11 = a1[66];
        if (v11 == 65281 || v9 != 65281)
        {
          int v11 = a1[67];
          UChar32 v12 = v45;
          if (v11 == 65311 || v9 != 65311)
          {
            if (v45 >= v46)
            {
              __int16 v29 = (char *)__p;
              uint64_t v30 = v45 - (unsigned char *)__p;
              if (v45 - (unsigned char *)__p < -2) {
                goto LABEL_102;
              }
              uint64_t v31 = v30 >> 1;
              if (v46 - (unsigned char *)__p <= (unint64_t)((v30 >> 1) + 1)) {
                uint64_t v32 = v31 + 1;
              }
              else {
                uint64_t v32 = v46 - (unsigned char *)__p;
              }
              if ((unint64_t)(v46 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v33 = v32;
              }
              if (v33)
              {
                uint64_t v34 = (char *)sub_21610FD44((uint64_t)&v46, v33);
                __int16 v29 = (char *)__p;
                UChar32 v12 = v45;
              }
              else
              {
                uint64_t v34 = 0;
              }
              char v40 = &v34[2 * v31];
              *(_WORD *)char v40 = v9;
              __int16 v26 = v40 + 2;
              while (v12 != v29)
              {
                __int16 v41 = *((_WORD *)v12 - 1);
                v12 -= 2;
                *((_WORD *)v40 - 1) = v41;
                v40 -= 2;
              }
              long long __p = v40;
              unint64_t v45 = v26;
              int8x8_t v46 = &v34[2 * v33];
              if (v29) {
                operator delete(v29);
              }
              goto LABEL_95;
            }
            *(_WORD *)unint64_t v45 = v9;
            unsigned int v25 = v12 + 2;
            goto LABEL_49;
          }
          if (v45 >= v46)
          {
            uint64_t v13 = (char *)__p;
            uint64_t v35 = v45 - (unsigned char *)__p;
            if (v45 - (unsigned char *)__p < -2) {
LABEL_102:
            }
              sub_21610CB04();
            uint64_t v36 = v35 >> 1;
            if (v46 - (unsigned char *)__p <= (unint64_t)((v35 >> 1) + 1)) {
              uint64_t v37 = v36 + 1;
            }
            else {
              uint64_t v37 = v46 - (unsigned char *)__p;
            }
            if ((unint64_t)(v46 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v17 = v37;
            }
            if (v17)
            {
              uint64_t v18 = (char *)sub_21610FD44((uint64_t)&v46, v17);
              uint64_t v13 = (char *)__p;
              UChar32 v12 = v45;
              LOWORD(v11) = a1[67];
            }
            else
            {
              uint64_t v18 = 0;
            }
            unint64_t v27 = &v18[2 * v36];
            *(_WORD *)unint64_t v27 = v11;
            __int16 v26 = v27 + 2;
            while (v12 != v13)
            {
              __int16 v42 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *((_WORD *)v27 - 1) = v42;
              v27 -= 2;
            }
            goto LABEL_92;
          }
        }
        else
        {
          UChar32 v12 = v45;
          if (v45 >= v46)
          {
            uint64_t v13 = (char *)__p;
            uint64_t v14 = v45 - (unsigned char *)__p;
            if (v45 - (unsigned char *)__p < -2) {
              goto LABEL_102;
            }
            uint64_t v15 = v14 >> 1;
            if (v46 - (unsigned char *)__p <= (unint64_t)((v14 >> 1) + 1)) {
              uint64_t v16 = v15 + 1;
            }
            else {
              uint64_t v16 = v46 - (unsigned char *)__p;
            }
            if ((unint64_t)(v46 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v17 = v16;
            }
            if (v17)
            {
              uint64_t v18 = (char *)sub_21610FD44((uint64_t)&v46, v17);
              uint64_t v13 = (char *)__p;
              UChar32 v12 = v45;
              LOWORD(v11) = a1[66];
            }
            else
            {
              uint64_t v18 = 0;
            }
            unint64_t v27 = &v18[2 * v15];
            *(_WORD *)unint64_t v27 = v11;
            __int16 v26 = v27 + 2;
            while (v12 != v13)
            {
              __int16 v39 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *((_WORD *)v27 - 1) = v39;
              v27 -= 2;
            }
LABEL_92:
            long long __p = v27;
            unint64_t v45 = v26;
            int8x8_t v46 = &v18[2 * v17];
            if (v13) {
              operator delete(v13);
            }
            char v6 = 1;
            goto LABEL_95;
          }
        }
      }
    }
    *(_WORD *)UChar32 v12 = v11;
    unsigned int v25 = v12 + 2;
    char v6 = 1;
LABEL_49:
    __int16 v26 = v25;
LABEL_95:
    unint64_t v45 = v26;
LABEL_96:
    ++v5;
  }
  if (v6) {
    operator new();
  }
  if (__p)
  {
    unint64_t v45 = (char *)__p;
    operator delete(__p);
  }
  return 0;
}

void sub_2162AE684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162AE6D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    sub_2162335C8(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    return sub_2162335C8(result);
  }
  return result;
}

void sub_2162AE720(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_2162AE7B8(uint64_t a1, long long *a2, long long *a3)
{
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_2161984AC((unsigned char *)(a1 + 24), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 4sub_2161A108C(&a9, 0) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v6;
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_2161984AC((unsigned char *)(a1 + 48), *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    *(void *)(a1 + 64) = *((void *)a3 + 5);
    *(_OWORD *)(a1 + 48) = v7;
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_2161984AC((unsigned char *)(a1 + 72), *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v8 = a3[3];
    *(void *)(a1 + 88) = *((void *)a3 + 8);
    *(_OWORD *)(a1 + 72) = v8;
  }
  if (*((char *)a3 + 95) < 0)
  {
    sub_2161984AC((unsigned char *)(a1 + 96), *((void **)a3 + 9), *((void *)a3 + 10));
  }
  else
  {
    long long v9 = *(long long *)((char *)a3 + 72);
    *(void *)(a1 + 112) = *((void *)a3 + 11);
    *(_OWORD *)(a1 + 96) = v9;
  }
  int v10 = (unsigned char *)(a1 + 120);
  if (*((char *)a3 + 119) < 0)
  {
    sub_2161984AC(v10, *((void **)a3 + 12), *((void *)a3 + 13));
  }
  else
  {
    long long v11 = a3[6];
    *(void *)(a1 + 136) = *((void *)a3 + 14);
    *(_OWORD *)int v10 = v11;
  }
  uint64_t v12 = *((void *)a3 + 15);
  *(_WORD *)(a1 + 152) = *((_WORD *)a3 + 64);
  *(void *)(a1 + 144) = v12;
  return a1;
}

void sub_2162AE900(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162AE97C(unint64_t a1)
{
  if (a1 >= 0x19999999999999ALL) {
    sub_2160FFA74();
  }
  return operator new(160 * a1);
}

char *sub_2162AE9C4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_2161984AC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_2161984AC(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_2161984AC(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_2161984AC(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_2161984AC(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  long long v9 = __dst + 120;
  if (*((char *)a2 + 143) < 0)
  {
    sub_2161984AC(v9, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)long long v9 = v10;
  }
  uint64_t v11 = *((void *)a2 + 18);
  *((_WORD *)__dst + 76) = *((_WORD *)a2 + 76);
  *((void *)__dst + 18) = v11;
  return __dst;
}

void sub_2162AEB20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162AEB9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    sub_2162AE720(i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2162AEBEC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        sub_2162AE720(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2162AEC70(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_21613EFD0(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *sub_2162AECC0(unsigned char *__dst, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_2161984AC(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = 0;
  sub_216273D58(__dst + 24, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return __dst;
}

void sub_2162AED3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162AED58(uint64_t a1, uint64_t a2)
{
  xmmword_26797E3B0 = 0u;
  *(_OWORD *)&qword_26797E3C0 = 0u;
  dword_26797E3D0 = 1065353216;
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v35 = a1 + 48 * a2;
    while (1)
    {
      unint64_t v3 = (unint64_t)&xmmword_26797E3B0 + 8;
      unint64_t v4 = sub_2161A6920((uint64_t)&qword_26797E3C8, v2);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_26797E3B0 + 1);
      if (*((void *)&xmmword_26797E3B0 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797E3B0 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v3 = v4;
          if (v4 >= *((void *)&xmmword_26797E3B0 + 1)) {
            unint64_t v3 = v4 % *((void *)&xmmword_26797E3B0 + 1);
          }
        }
        else
        {
          unint64_t v3 = (*((void *)&xmmword_26797E3B0 + 1) - 1) & v4;
        }
        long long v9 = *(unsigned __int16 ***)(xmmword_26797E3B0 + 8 * v3);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int16 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (sub_2161A6964((uint64_t)&dword_26797E3D0, i + 8, (unsigned __int16 *)v2)) {
                goto LABEL_78;
              }
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = (char *)operator new(0x40uLL);
      uint64_t v13 = v12;
      v36[0] = v12;
      v36[1] = &qword_26797E3C0;
      char v37 = 0;
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      if (*(char *)(v2 + 23) < 0)
      {
        sub_2161984AC(v12 + 16, *(void **)v2, *(void *)(v2 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v2;
        *((void *)v12 + 4) = *(void *)(v2 + 16);
        *((_OWORD *)v12 + 1) = v14;
      }
      *((void *)v13 + 5) = 0;
      *((void *)v13 + 6) = 0;
      *((void *)v13 + 7) = 0;
      sub_216273D58(v13 + 40, *(long long **)(v2 + 24), *(long long **)(v2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 32) - *(void *)(v2 + 24)) >> 3));
      char v37 = 1;
      float v15 = (float)(unint64_t)(qword_26797E3C8 + 1);
      if (!v6 || (float)(*(float *)&dword_26797E3D0 * (float)v6) < v15) {
        break;
      }
LABEL_68:
      uint64_t v31 = *(uint64_t **)(xmmword_26797E3B0 + 8 * v3);
      uint64_t v32 = v36[0];
      if (v31)
      {
        *(void *)v36[0] = *v31;
      }
      else
      {
        *(void *)v36[0] = qword_26797E3C0;
        qword_26797E3C0 = v32;
        *(void *)(xmmword_26797E3B0 + 8 * v3) = &qword_26797E3C0;
        if (!*(void *)v32) {
          goto LABEL_77;
        }
        unint64_t v33 = *(void *)(*(void *)v32 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6) {
            v33 %= v6;
          }
        }
        else
        {
          v33 &= v6 - 1;
        }
        uint64_t v31 = (uint64_t *)(xmmword_26797E3B0 + 8 * v33);
      }
      *uint64_t v31 = v32;
LABEL_77:
      v36[0] = 0;
      ++qword_26797E3C8;
      sub_216185ADC((uint64_t)v36);
LABEL_78:
      v2 += 48;
      if (v2 == v35) {
        return;
      }
    }
    BOOL v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_26797E3D0);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_26797E3B0 + 1);
    if (*(void *)&prime > *((void *)&xmmword_26797E3B0 + 1)) {
      goto LABEL_34;
    }
    if (*(void *)&prime < *((void *)&xmmword_26797E3B0 + 1))
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)qword_26797E3C8 / *(float *)&dword_26797E3D0);
      if (*((void *)&xmmword_26797E3B0 + 1) < 3uLL
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797E3B0 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_26797E3B0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = (void *)xmmword_26797E3B0;
          *(void *)&xmmword_26797E3B0 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)&xmmword_26797E3B0 + 1) = prime;
          do
            *(void *)(xmmword_26797E3B0 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void **)qword_26797E3C0;
          if (qword_26797E3C0)
          {
            unint64_t v24 = *(void *)(qword_26797E3C0 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797E3B0 + 8 * v24) = &qword_26797E3C0;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(void *)(xmmword_26797E3B0 + 8 * v30))
                {
                  *(void *)(xmmword_26797E3B0 + 8 * v3sub_2161A108C(&a9, 0) = v23;
                  goto LABEL_59;
                }
                *uint64_t v23 = (void *)*j;
                *uint64_t j = **(void **)(xmmword_26797E3B0 + 8 * v30);
                **(void **)(xmmword_26797E3B0 + 8 * v3sub_2161A108C(&a9, 0) = j;
                uint64_t j = v23;
              }
              unint64_t v30 = v24;
LABEL_59:
              uint64_t v23 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v34 = (void *)xmmword_26797E3B0;
        *(void *)&xmmword_26797E3B0 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_26797E3B0 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2162AF240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216185ADC((uint64_t)va);
  sub_2162AF288((uint64_t)&xmmword_26797E3B0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162AF288(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216185398((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_2162AF2E8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = (char *)operator new(0x18uLL);
  *a1 = v4;
  a1[1] = v4;
  unint64_t v5 = v4 + 24;
  a1[2] = v4 + 24;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_2161984AC(v4, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    *((void *)v4 + 2) = *(void *)(a2 + 16);
  }
  a1[1] = v5;
  return a1;
}

void sub_2162AF374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_21613EFD0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2162AF394(uint64_t a1, _WORD *a2, const void **a3)
{
  if (*a2)
  {
    uint64_t v5 = 0;
    do
      uint64_t v6 = v5 + 1;
    while (a2[++v5]);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (*((char *)a3 + 23) >= 0) {
    unint64_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    unint64_t v8 = (unint64_t)a3[1];
  }
  uint64_t result = sub_21618083C(a1, v8 + v6);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v10 = (char *)result;
  }
  else {
    uint64_t v10 = *(char **)result;
  }
  if (v6) {
    uint64_t result = (uint64_t)memmove(v10, a2, 2 * v6);
  }
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v11 = a3;
    }
    else {
      unint64_t v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(&v10[2 * v6], v11, 2 * v8);
  }
  *(_WORD *)&v10[2 * v6 + 2 * v8] = 0;
  return result;
}

void sub_2162AF464(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = sub_2161A6920(a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  unint64_t v49 = v9;
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    float v15 = *(unsigned __int16 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int16 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (sub_2161A6964(a1 + 32, i + 8, a2)) {
            return;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v18 = (void *)(a1 + 16);
  uint64_t v19 = operator new(0x40uLL);
  uint64_t v20 = v19;
  v50[0] = v19;
  v50[1] = a1 + 16;
  char v51 = 0;
  *uint64_t v19 = 0;
  v19[1] = v11;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2161984AC((unsigned char *)v19 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v19 + 1) = *(_OWORD *)a3;
    v19[4] = *(void *)(a3 + 16);
  }
  v20[5] = 0;
  v20[6] = 0;
  v20[7] = 0;
  uint64_t v21 = *a4;
  uint64_t v22 = a4[1];
  std::string::size_type v52 = v20 + 5;
  char v53 = 0;
  if (v22 != v21)
  {
    unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v22 - v21) >> 5);
    if (v23 >= 0x19999999999999ALL) {
      sub_21610CB04();
    }
    unint64_t v24 = (char *)sub_2162AE97C(v23);
    uint64_t v25 = 0;
    v20[5] = v24;
    v20[6] = v24;
    v20[7] = &v24[160 * v26];
    do
    {
      sub_2162AE9C4(&v24[v25], (long long *)(v21 + v25));
      v25 += 160;
    }
    while (v21 + v25 != v22);
    v20[6] = &v24[v25];
  }
  char v51 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    BOOL v29 = 1;
    if (v12 >= 3) {
      BOOL v29 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v12);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      int8x8_t prime = (int8x8_t)v31;
    }
    else {
      int8x8_t prime = (int8x8_t)v30;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
      unint64_t v4 = v11;
    }
    else
    {
      unint64_t v4 = v11;
      if ((*(void *)&prime & (*(void *)&prime - 1)) != 0) {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if (*(void *)&prime > v12) {
      goto LABEL_38;
    }
    if (*(void *)&prime < v12)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (*(void *)&prime <= v39) {
        int8x8_t prime = (int8x8_t)v39;
      }
      if (*(void *)&prime >= v12)
      {
        unint64_t v12 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_38:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          unint64_t v33 = operator new(8 * *(void *)&prime);
          uint64_t v34 = *(void **)a1;
          *(void *)a1 = v33;
          if (v34) {
            operator delete(v34);
          }
          uint64_t v35 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v35++) = 0;
          while (*(void *)&prime != v35);
          uint64_t v36 = (void *)*v18;
          if (*v18)
          {
            unint64_t v37 = v36[1];
            uint8x8_t v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(void *)&prime) {
                v37 %= *(void *)&prime;
              }
            }
            else
            {
              v37 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v37) = v18;
            __int16 v42 = (void *)*v36;
            if (*v36)
            {
              do
              {
                unint64_t v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(void *)&prime) {
                    v43 %= *(void *)&prime;
                  }
                }
                else
                {
                  v43 &= *(void *)&prime - 1;
                }
                if (v43 != v37)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v43))
                  {
                    *(void *)(*(void *)a1 + 8 * v43) = v36;
                    goto LABEL_63;
                  }
                  void *v36 = *v42;
                  *__int16 v42 = **(void **)(*(void *)a1 + 8 * v43);
                  **(void **)(*(void *)a1 + 8 * v43) = v42;
                  __int16 v42 = v36;
                }
                unint64_t v43 = v37;
LABEL_63:
                uint64_t v36 = v42;
                __int16 v42 = (void *)*v42;
                unint64_t v37 = v43;
              }
              while (v42);
            }
          }
          unint64_t v12 = (unint64_t)prime;
          goto LABEL_67;
        }
        uint8x8_t v48 = *(void **)a1;
        *(void *)a1 = 0;
        if (v48) {
          operator delete(v48);
        }
        unint64_t v12 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_67:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v4 >= v12) {
        v4 %= v12;
      }
    }
    else
    {
      v4 &= v12 - 1;
    }
  }
  unsigned __int16 v44 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v45 = v50[0];
  if (v44)
  {
    *(void *)v50[0] = *v44;
    int8x8_t v46 = v49;
LABEL_79:
    *unsigned __int16 v44 = v45;
    goto LABEL_80;
  }
  *(void *)v50[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v45;
  *(void *)(*(void *)a1 + 8 * v4) = v18;
  int8x8_t v46 = v49;
  if (*(void *)v45)
  {
    unint64_t v47 = *(void *)(*(void *)v45 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v47 >= v12) {
        v47 %= v12;
      }
    }
    else
    {
      v47 &= v12 - 1;
    }
    unsigned __int16 v44 = (void *)(*(void *)a1 + 8 * v47);
    goto LABEL_79;
  }
LABEL_80:
  v50[0] = 0;
  ++*v46;
  sub_2162AF9B4((uint64_t)v50);
}

void sub_2162AF958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2162AF9B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2162AF9B4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2162AFA0C((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_2162AFA0C(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_2162AEBEC(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_2162AFA54(uint64_t a1)
{
  sub_2162AFA90(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2162AFA90(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_2162AFA0C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

int64_t sub_2162AFAD4@<X0>(int64_t result@<X0>, int *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (result >= 1)
  {
    int64_t v6 = result;
    sub_2162B039C((char **)a4, result);
    do
    {
      int v8 = *a2++;
      uint64_t v9 = &unk_26C6C59C0;
      int v10 = v8;
      long long v11 = *a3;
      uint64_t v13 = 0xFFFFFFFFLL;
      uint64_t v12 = 64;
      uint64_t result = sub_21617A4A0((char **)a4, (uint64_t)&v9);
      ++a3;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_2162AFB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_2162AFBB4(const __CFString *a1)
{
  uint64_t v1 = 0;
  sub_2161E1FB8(a1);
}

void sub_2162AFEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    MEMORY[0x2166CA7C0](a13, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162AFF08(uint64_t a1, const __CFString *a2, int64_t a3, int *a4, long long *a5, int a6)
{
  *(_WORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6BD540;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_26C6BD610;
  *(_DWORD *)(a1 + 32) = a6;
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = 0;
  sub_2162AFAD4(a3, a4, a5, a1 + 48);
  sub_2162AFBB4(a2);
}

void sub_2162AFFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_21617B004(&a9);
  sub_2161868BC(v9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162B0010(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  else {
    return 0;
  }
  return v2;
}

uint64_t sub_2162B007C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 56) - v2) >> 4);
  uint64_t v4 = v2 + 48 * a2;
  if (v3 >= a2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_2162B00B4(uint64_t a1)
{
  return sub_2161E539C(*(const __CFString **)(a1 + 40));
}

void sub_2162B00BC()
{
}

void sub_2162B01A0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C408D75F3D8);
  _Unwind_Resume(a1);
}

void sub_2162B01D8()
{
}

uint64_t sub_2162B01F4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD540;
  *(void *)(a1 + 24) = &unk_26C6BD610;
  unint64_t v3 = (void **)(a1 + 48);
  sub_21617B004(&v3);
  sub_2161868BC((const void **)(a1 + 40), 0);
  return a1;
}

uint64_t sub_2162B0278(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD540;
  *(void *)(a1 + 24) = &unk_26C6BD610;
  unint64_t v3 = (void **)(a1 + 48);
  sub_21617B004(&v3);
  sub_2161868BC((const void **)(a1 + 40), 0);
  return MEMORY[0x2166CA800](a1, 0x10E1C408D75F3D8);
}

uint64_t sub_2162B0310(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_2162B0318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_2162B033C()
{
  return 0;
}

unint64_t sub_2162B0344(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4);
}

uint64_t sub_2162B0360()
{
  return 0;
}

uint64_t sub_2162B036C()
{
  return 4;
}

uint64_t sub_2162B0374()
{
  return 0;
}

uint64_t sub_2162B037C()
{
  return 0;
}

uint64_t sub_2162B0384(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_2162B038C()
{
  return 0;
}

uint64_t sub_2162B0394()
{
  return 0;
}

uint64_t sub_2162B039C(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_21617AF38();
    }
    uint64_t v5 = (a1[1] - *a1) / 48;
    uint64_t v19 = result;
    int64_t v6 = (char *)sub_21617AF50(result, a2);
    int v8 = *a1;
    unint64_t v9 = (unint64_t)a1[1];
    if ((char *)v9 == *a1)
    {
      int64x2_t v14 = vdupq_n_s64(v9);
      long long v11 = &v6[48 * v5];
    }
    else
    {
      uint64_t v10 = (uint64_t)&v6[48 * v5 - 48];
      long long v11 = &v6[48 * v5];
      do
      {
        *((void *)v11 - 6) = &unk_26C6C59C0;
        v11 -= 48;
        long long v12 = *(_OWORD *)(v9 - 40);
        long long v13 = *(_OWORD *)(v9 - 24);
        *((void *)v11 + 5) = *(void *)(v9 - 8);
        *(_OWORD *)(v11 + 24) = v13;
        *(_OWORD *)(v11 + 8) = v12;
        v10 -= 48;
        v9 -= 48;
      }
      while ((char *)v9 != v8);
      int64x2_t v14 = *(int64x2_t *)a1;
    }
    *a1 = v11;
    a1[1] = &v6[48 * v5];
    int64x2_t v17 = v14;
    float v15 = a1[2];
    a1[2] = &v6[48 * v7];
    unint64_t v18 = v15;
    uint64_t v16 = v14.i64[0];
    return sub_21617AF98((uint64_t)&v16);
  }
  return result;
}

BOOL sub_2162B04CC(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  for (BOOL result = 1; v3 < a2[1] + *a2; ++v3)
  {
    int v6 = (1 << u_charType(*(unsigned __int16 *)(a1 + 2 * v3))) & 0x80020E;
    BOOL result = v6 != 0;
    if (!v6) {
      break;
    }
  }
  return result;
}

void sub_2162B054C(uint64_t a1, char *__src, unsigned __int16 *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a5 + 16;
    do
    {
      if (__src) {
        unint64_t v12 = *a3;
      }
      else {
        unint64_t v12 = 0;
      }
      int v13 = sub_216365E98(*(void *)(a1 + 32), __src, v12, 0);
      int v14 = v13;
      uint64_t v16 = *(_DWORD **)(a5 + 8);
      unint64_t v15 = *(void *)(a5 + 16);
      if ((unint64_t)v16 >= v15)
      {
        unint64_t v18 = *(_DWORD **)a5;
        uint64_t v19 = ((uint64_t)v16 - *(void *)a5) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v21 = v15 - (void)v18;
        if (v21 >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          unint64_t v23 = (char *)sub_2161129B4(v11, v22);
          unint64_t v18 = *(_DWORD **)a5;
          uint64_t v16 = *(_DWORD **)(a5 + 8);
        }
        else
        {
          unint64_t v23 = 0;
        }
        unint64_t v24 = &v23[4 * v19];
        *(_DWORD *)unint64_t v24 = v14;
        int64x2_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *--v16;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        *(void *)a5 = v24;
        *(void *)(a5 + 8) = v17;
        *(void *)(a5 + 16) = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v16 = v13;
        int64x2_t v17 = v16 + 1;
      }
      *(void *)(a5 + 8) = v17;
      unsigned int v26 = *a3++;
      __src += 2 * v26;
      ++v10;
    }
    while (v10 != a4);
  }
}

void sub_2162B0688(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, int a5, const UniChar *a6, int a7, int a8, double a9, uint64_t a10)
{
  int v19 = *(unsigned __int8 *)sub_2161A2A80();
  unsigned int v20 = a8 & 0x2000000;
  if (a5 || v20)
  {
    __int16 v27 = a3;
    if (v20 | v19) {
      double v21 = -3.0;
    }
    else {
      double v21 = -2.0;
    }
    v41[0] = 0;
    v41[1] = v41;
    v41[2] = 0x2000000000;
    void v41[3] = 0;
    v40[0] = 0;
    v40[1] = v40;
    v40[2] = 0x2000000000;
    v40[3] = 0;
    v36[0] = 0;
    v36[1] = v36;
    void v36[2] = 0x4002000000;
    void v36[3] = sub_2162B0918;
    v36[4] = sub_2162B093C;
    long long __p = 0;
    uint8x8_t v38 = 0;
    uint64_t v39 = 0;
    sub_21617B5A4(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    __int16 v22 = a4;
    if (a7 < 1) {
      CFStringRef v23 = 0;
    }
    else {
      CFStringRef v23 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a6, (unsigned __int16)a7, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
    }
    uint64_t v24 = *(void *)(a1 + 32);
    int v25 = *(const void **)a2;
    uint64_t v26 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 0x40000000;
    uint64_t v28[2] = sub_2162B0954;
    v28[3] = &unk_2642670D8;
    *(double *)&v28[8] = v21;
    __int16 v30 = a7;
    char v34 = v20 >> 25;
    char v35 = v19;
    v28[9] = v23;
    v28[10] = a10;
    *(double *)&v28[11] = a9;
    v28[12] = a6;
    __int16 v31 = v27;
    __int16 v32 = v22;
    __int16 v33 = a5;
    int v29 = a8;
    v28[4] = v36;
    v28[5] = v41;
    v28[6] = v40;
    v28[7] = a1;
    sub_2162F0D4C(v24, (uint64_t)v25, v26, 8, 1, (uint64_t)v28);
    if (v23) {
      CFRelease(v23);
    }
    _Block_object_dispose(v36, 8);
    if (__p)
    {
      uint8x8_t v38 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v40, 8);
    _Block_object_dispose(v41, 8);
  }
}

void sub_2162B08CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  _Block_object_dispose(&a26, 8);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v32 - 168), 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

__n128 sub_2162B0918(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_2161A108C(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2162B093C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_2162B0954(uint64_t a1, _DWORD *a2, uint64_t a3, double a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a3 < 1 || *a2 < 0x1F4u || *(double *)(a1 + 64) >= a4) {
    goto LABEL_57;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  CFStringRef v11 = (const __CFString *)sub_216365930(*(void *)(v10 + 32));
  CFStringRef v12 = (const __CFString *)sub_216292770(*(void *)(v10 + 16), v11);
  CFStringRef v13 = v12;
  if (v12) {
    CFIndex Length = CFStringGetLength(v12);
  }
  else {
    CFIndex Length = 0;
  }
  CFIndex v15 = *(__int16 *)(a1 + 108);
  if (Length >= (v15 & ~((int)v15 >> 31))) {
    CFIndex v16 = v15 & ~((int)v15 >> 31);
  }
  else {
    CFIndex v16 = Length;
  }
  if (v13) {
    BOOL v17 = v11 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    if ((CFStringRef v18 = *(const __CFString **)(a1 + 72)) == 0
      || !v16
      || ((v19.location = 0, v19.CFIndex length = v16, Length <= v15)
        ? (CFComparisonResult v20 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 72), v13, v19, 0))
        : (CFComparisonResult v20 = CFStringCompareWithOptions(v13, v18, v19, 0)),
          v20 == kCFCompareEqualTo))
    {
      if (!*(unsigned char *)(a1 + 116)) {
        sub_21619EB00(v10, v13);
      }
      double v21 = *(void **)(*(void *)(a1 + 32) + 8);
      __int16 v22 = (char *)v21[6];
      unint64_t v23 = v21[7];
      if ((unint64_t)v22 >= v23)
      {
        int v25 = (char *)v21[5];
        uint64_t v26 = (v22 - v25) >> 2;
        if ((unint64_t)(v26 + 1) >> 62) {
          sub_21610CB04();
        }
        unint64_t v27 = v23 - (void)v25;
        unint64_t v28 = (uint64_t)(v23 - (void)v25) >> 1;
        if (v28 <= v26 + 1) {
          unint64_t v28 = v26 + 1;
        }
        if (v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29)
        {
          __int16 v30 = (char *)sub_2161129B4((uint64_t)(v21 + 7), v29);
          int v25 = (char *)v21[5];
          __int16 v22 = (char *)v21[6];
        }
        else
        {
          __int16 v30 = 0;
        }
        __int16 v31 = &v30[4 * v26];
        uint64_t v32 = &v30[4 * v29];
        *(_DWORD *)__int16 v31 = *a2;
        uint64_t v24 = v31 + 4;
        while (v22 != v25)
        {
          int v33 = *((_DWORD *)v22 - 1);
          v22 -= 4;
          *((_DWORD *)v31 - 1) = v33;
          v31 -= 4;
        }
        void v21[5] = v31;
        v21[6] = v24;
        v21[7] = v32;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(_DWORD *)__int16 v22 = *a2;
        uint64_t v24 = v22 + 4;
      }
      v21[6] = v24;
      double v34 = 0.0;
      if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48)
         - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) >= 5uLL)
        double v34 = -sub_216366594(*(void *)(v10 + 32), 2, (_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) - 8), 2);
      uint64_t v35 = Length - *(__int16 *)(a1 + 108);
      if ((*(unsigned char *)(a1 + 117) || (sub_2161EC500(v11) & 1) == 0)
        && v34 < 2.5
        && (v35 & 0x8000000000000000) == 0
        && (*(unsigned char *)(a1 + 116) || sub_2162B0E14(v11)))
      {
        long double v36 = log((double)v35 + 1.0);
        sub_2162B0EE4(*(int64x2_t **)(a1 + 80), *(void *)(*(void *)(a1 + 32) + 8) + 40, v36 * 0.0 + *(double *)(a1 + 88) + a4);
      }
      if (sub_2161EC220(v11)) {
        goto LABEL_52;
      }
      if ((__int16)(*(_WORD *)(a1 + 108) - v16) < 1)
      {
        if (*(unsigned char *)(a1 + 116)) {
          goto LABEL_52;
        }
        uint64_t v37 = 0;
      }
      else
      {
        uint64_t v37 = *(void *)(a1 + 96) + 2 * v16;
      }
      sub_2162B0688(v10, *(void *)(*(void *)(a1 + 32) + 8) + 40, (unsigned __int16)(*(_WORD *)(a1 + 110) + Length), *(unsigned __int16 *)(a1 + 112), (unsigned __int16)(*(_WORD *)(a1 + 114) - 1), v37, *(double *)(a1 + 88) + a4);
LABEL_52:
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) -= 4;
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
  }
  uint8x8_t v38 = sub_2162D1CE4(0xAu);
  os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG);
  if (v13) {
    CFRelease(v13);
  }
  if (v11) {
    CFRelease(v11);
  }
LABEL_57:
  uint64_t v39 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v40 = *(void *)(v39 + 24) + 1;
  *(void *)(v39 + 24) = v40;
  if (v40 > 0x20
    || *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) > (unint64_t)*(unsigned __int16 *)(a1 + 112))
  {
    *a6 = 1;
  }
}

void sub_2162B0DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, const void *);
  sub_2161868BC((const void **)va, 0);
  sub_2161868BC((const void **)va1, 0);
  _Unwind_Resume(a1);
}

CFStringRef sub_2162B0E14(const __CFString *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    __n128 result = (const __CFString *)CFStringGetLength(result);
    if (result)
    {
      if (CFStringGetCharacterAtIndex(v1, (CFIndex)&result[-1].length + 7) == 12387)
      {
        return 0;
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E3E0, memory_order_acquire) & 1) == 0)
        {
          if (__cxa_guard_acquire(&qword_26797E3E0))
          {
            qword_26797E3D8 = (uint64_t)CFSetCreate(0, (const void **)off_26797C7E0, 3, MEMORY[0x263EFFFA0]);
            __cxa_guard_release(&qword_26797E3E0);
          }
        }
        return (const __CFString *)(CFSetContainsValue((CFSetRef)qword_26797E3D8, v1) == 0);
      }
    }
  }
  return result;
}

void sub_2162B0ECC(_Unwind_Exception *a1)
{
}

uint64_t sub_2162B0EE4(int64x2_t *a1, uint64_t a2, double a3)
{
  unint64_t v6 = a1[1].u64[0];
  unint64_t v7 = a1->u64[1];
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - a1->i64[0]) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v11 = v6 - a1->i64[0];
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v27 = a1 + 1;
    if (v13)
    {
      if (v13 >> 59) {
        sub_2160FFA74();
      }
      int v14 = (char *)operator new(32 * v13);
    }
    else
    {
      int v14 = 0;
    }
    CFIndex v15 = &v14[32 * v10];
    uint64_t v24 = v14;
    v25.i64[0] = (uint64_t)v15;
    v25.i64[1] = (uint64_t)v15;
    uint64_t v26 = &v14[32 * v13];
    *(double *)CFIndex v15 = a3;
    *((void *)v15 + 2) = 0;
    *((void *)v15 + 3) = 0;
    *((void *)v15 + 1) = 0;
    sub_21617B5A4((void *)v15 + 1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    uint64_t v16 = v25.i64[0];
    uint64_t v9 = v25.i64[1] + 32;
    v25.i64[1] += 32;
    uint64_t v18 = a1->i64[0];
    unint64_t v17 = a1->u64[1];
    if (v17 == a1->i64[0])
    {
      int64x2_t v22 = vdupq_n_s64(v17);
    }
    else
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = v16 + v19;
        uint64_t v21 = v17 + v19;
        *(void *)(v20 - 32) = *(void *)(v17 + v19 - 32);
        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - 8) = 0;
        *(void *)(v20 - 24) = 0;
        *(_OWORD *)(v20 - 24) = *(_OWORD *)(v17 + v19 - 24);
        *(void *)(v20 - 8) = *(void *)(v17 + v19 - 8);
        *(void *)(v21 - 24) = 0;
        *(void *)(v21 - 16) = 0;
        *(void *)(v21 - 8) = 0;
        v19 -= 32;
      }
      while (v17 + v19 != v18);
      int64x2_t v22 = *a1;
      uint64_t v9 = v25.i64[1];
      v16 += v19;
    }
    a1->i64[0] = v16;
    a1->i64[1] = v9;
    int64x2_t v25 = v22;
    unint64_t v23 = (char *)a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v26;
    uint64_t v26 = v23;
    uint64_t v24 = (char *)v22.i64[0];
    uint64_t result = sub_2162B3340((uint64_t)&v24);
  }
  else
  {
    *(double *)unint64_t v7 = a3;
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 8) = 0;
    uint64_t result = (uint64_t)sub_21617B5A4((void *)(v7 + 8), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    uint64_t v9 = v7 + 32;
    a1->i64[1] = v7 + 32;
  }
  a1->i64[1] = v9;
  return result;
}

void sub_2162B108C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162B3340((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2162B10AC(uint64_t a1, uint64_t *a2, const __CFString *a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t *a7, void *a8, unint64_t a9, uint64_t a10, uint64_t a11, const __CFString *a12, unsigned int a13)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  sub_2161A2A80();
  char v62 = a8;
  if (*(_DWORD *)(a8[1] - 4) != 2)
  {
    CFStringRef str = a3;
    int v60 = a7;
    unint64_t v18 = a9;
    long long __p = 0;
    int v65 = 0;
    v66[0] = 0;
    uint64_t v19 = *a2;
    unint64_t v20 = -a10 - 0x3333333333333333 * ((a2[1] - *a2) >> 3);
    if (v20 <= a9)
    {
      unsigned __int16 v21 = 0;
      unsigned __int16 v22 = 0;
    }
    else
    {
      unsigned __int16 v21 = 0;
      unsigned __int16 v22 = 0;
      unint64_t v23 = 0;
      do
      {
        uint64_t v24 = v19 + 40 * v18;
        long long buf = *(_OWORD *)(v24 + 4);
        long long v73 = *(_OWORD *)(v24 + 20);
        char v74 = *(unsigned char *)(v24 + 36);
        char v25 = *(unsigned char *)(v24 + 39);
        char v26 = *(unsigned char *)(v24 + 37) | 1;
        if ((unint64_t)v23 >= v66[0])
        {
          unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - __p) >> 3);
          unint64_t v30 = v29 + 1;
          if (v29 + 1 > 0x666666666666666) {
            sub_21618B344();
          }
          if (0x999999999999999ALL * ((uint64_t)(v66[0] - (void)__p) >> 3) > v30) {
            unint64_t v30 = 0x999999999999999ALL * ((uint64_t)(v66[0] - (void)__p) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66[0] - (void)__p) >> 3) >= 0x333333333333333) {
            unint64_t v31 = 0x666666666666666;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31) {
            uint64_t v32 = (char *)sub_21618B4A8((uint64_t)v66, v31);
          }
          else {
            uint64_t v32 = 0;
          }
          int v33 = &v32[40 * v29];
          *(_DWORD *)int v33 = 0;
          *(_OWORD *)(v33 + 4) = buf;
          *(_OWORD *)(v33 + 2sub_2161A108C(&a9, 0) = v73;
          v33[36] = v74;
          v33[37] = v26;
          v33[38] = 2;
          v33[39] = v25;
          double v34 = v65;
          uint64_t v35 = v33;
          if (v65 != __p)
          {
            do
            {
              long long v36 = *(_OWORD *)(v34 - 40);
              long long v37 = *(_OWORD *)(v34 - 24);
              *((void *)v35 - 1) = *((void *)v34 - 1);
              *(_OWORD *)(v35 - 24) = v37;
              *(_OWORD *)(v35 - 4sub_2161A108C(&a9, 0) = v36;
              v35 -= 40;
              v34 -= 40;
            }
            while (v34 != __p);
            double v34 = __p;
          }
          unint64_t v23 = v33 + 40;
          long long __p = v35;
          v66[0] = &v32[40 * v31];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v23 = 0;
          long long v27 = buf;
          long long v28 = v73;
          v23[36] = v74;
          *(_OWORD *)(v23 + 2sub_2161A108C(&a9, 0) = v28;
          *(_OWORD *)(v23 + 4) = v27;
          v23[37] = v26;
          v23[38] = 2;
          v23[39] = v25;
          v23 += 40;
        }
        int v65 = v23;
        uint64_t v19 = *a2;
        uint64_t v38 = *a2 + 40 * v18;
        v21 += *(_WORD *)(v38 + 28);
        v22 += *(_WORD *)(v38 + 24);
        ++v18;
      }
      while (v18 != v20);
    }
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    uint64_t v40 = a1;
    CFStringRef theString = CFStringCreateMutable(0, 0);
    unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) - a10;
    if (v41 >= (uint64_t)(v62[1] - *v62) >> 2)
    {
LABEL_51:
      if ((uint64_t)sub_2161849E4(v60, a13) >= 1)
      {
        CFMutableStringRef v70 = 0;
        CFStringRef v71 = 0;
        sub_2161E1FB8(a12);
      }
      v76.CFIndex length = v22;
      v76.locatiouint64_t n = 0;
      CFStringRef v55 = CFStringCreateWithSubstring(0, str, v76);
      v66[1] = v55;
      v77.CFIndex length = v21;
      v77.locatiouint64_t n = 0;
      CFStringRef v56 = CFStringCreateWithSubstring(0, a4, v77);
      CFStringRef v71 = v56;
      MutableCFStringRef Copy = CFStringCreateMutableCopy(0, 0, v55);
      CFMutableStringRef v70 = MutableCopy;
      int v58 = CFStringCreateMutableCopy(0, 0, v56);
      uint64_t v69 = v58;
      CFStringAppend(MutableCopy, Mutable);
      CFStringAppend(v58, theString);
      uint64_t v68 = 0;
      sub_2161E1FB8(MutableCopy);
    }
    while (1)
    {
      *(void *)&long long buf = 0;
      CFStringRef v67 = 0;
      CFStringRef v42 = (const __CFString *)sub_216365930(*(void *)(v40 + 32));
      *(void *)&long long buf = v42;
      CFStringRef v43 = (const __CFString *)sub_216292770(*(void *)(v40 + 16), v42);
      CFStringRef v67 = v43;
      if (sub_2161EC220(v42)) {
        break;
      }
      __int16 Length = CFStringGetLength(v42);
      if (v43) {
        __int16 v45 = CFStringGetLength(v43);
      }
      else {
        __int16 v45 = 0;
      }
      CFStringAppend(Mutable, v42);
      if (v43) {
        CFStringAppend(theString, v43);
      }
      if ((unint64_t)v65 >= v66[0])
      {
        unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - __p) >> 3) + 1;
        if (v47 > 0x666666666666666) {
          sub_21618B344();
        }
        if (0x999999999999999ALL * ((uint64_t)(v66[0] - (void)__p) >> 3) > v47) {
          unint64_t v47 = 0x999999999999999ALL * ((uint64_t)(v66[0] - (void)__p) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66[0] - (void)__p) >> 3) >= 0x333333333333333) {
          unint64_t v48 = 0x666666666666666;
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48) {
          unint64_t v49 = (char *)sub_21618B4A8((uint64_t)v66, v48);
        }
        else {
          unint64_t v49 = 0;
        }
        unint64_t v50 = &v49[8 * ((v65 - __p) >> 3)];
        *((void *)v50 + 1) = 0;
        *((void *)v50 + 2) = 0;
        *(void *)unint64_t v50 = 0;
        *((_WORD *)v50 + 12) = Length;
        *((_WORD *)v50 + 13) = 0;
        *((_WORD *)v50 + 14) = v45;
        *(_DWORD *)(v50 + 3sub_2161A108C(&a9, 0) = 0;
        *(_DWORD *)(v50 + 33) = 0;
        *(_WORD *)(v50 + 37) = 513;
        v50[39] = 0;
        char v51 = v65;
        std::string::size_type v52 = v50;
        if (v65 != __p)
        {
          do
          {
            long long v53 = *(_OWORD *)(v51 - 40);
            long long v54 = *(_OWORD *)(v51 - 24);
            *((void *)v52 - 1) = *((void *)v51 - 1);
            *(_OWORD *)(v52 - 24) = v54;
            *(_OWORD *)(v52 - 4sub_2161A108C(&a9, 0) = v53;
            v52 -= 40;
            v51 -= 40;
          }
          while (v51 != __p);
          char v51 = __p;
        }
        int8x8_t v46 = v50 + 40;
        long long __p = v52;
        v66[0] = &v49[40 * v48];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(void *)int v65 = 0;
        *((void *)v65 + 1) = 0;
        *((void *)v65 + 2) = 0;
        *((_WORD *)v65 + 12) = Length;
        *((_WORD *)v65 + 13) = 0;
        *((_WORD *)v65 + 14) = v45;
        *(_DWORD *)(v65 + 3sub_2161A108C(&a9, 0) = 0;
        *(_DWORD *)(v65 + 33) = 0;
        *(_WORD *)(v65 + 37) = 513;
        int8x8_t v46 = v65 + 40;
        v65[39] = 0;
      }
      int v65 = v46;
      if (v43) {
        CFRelease(v43);
      }
      uint64_t v40 = a1;
      if (v42) {
        CFRelease(v42);
      }
      if (++v41 >= (uint64_t)(v62[1] - *v62) >> 2) {
        goto LABEL_51;
      }
    }
    if (v43) {
      CFRelease(v43);
    }
    if (v42) {
      CFRelease(v42);
    }
    if (theString) {
      CFRelease(theString);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_2162B1A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162B1C00(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  unint64_t v7 = (void *)a7;
  uint64_t v133 = *MEMORY[0x263EF8340];
  v128[0] = a3;
  v128[1] = a4;
  uint64_t v126 = a5;
  unint64_t v127 = a6;
  *(void *)a7 = &unk_26C6BE968;
  *(_OWORD *)(a7 + 8) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_DWORD *)(a7 + 4sub_2161A108C(&a9, 0) = 1065353216;
  *(void *)(a7 + 48) = 0;
  *(void *)(a7 + 56) = 0;
  *(void *)(a7 + 64) = 0;
  if (!a2) {
    return;
  }
  if (!*(void *)(a1 + 32)) {
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 408))(a2) == 1) {
    return;
  }
  BOOL v117 = sub_2161A2A80();
  if (!*v117 && (*(unsigned char *)(*(void *)(a1 + 8) + 3) & 2) == 0) {
    return;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)a2 + 528))(a2, 10, "[MJNP::expandPhrasesWithLanguageModel] Handling n-gram expansion from", 1);
  uint64_t v113 = v126;
  unint64_t v9 = v127;
  if ((**(unsigned char **)(a1 + 8) & 0x20) != 0 && v127)
  {
    do
    {
      int v10 = *(unsigned __int16 *)(v126 - 2 + 2 * v9);
      unsigned int v11 = v10 - 97;
      unsigned int v12 = (unsigned __int16)(v10 + 191);
      if (v11 >= 0x1A && v12 > 0x19) {
        break;
      }
      --v9;
    }
    while (v9);
  }
  if (!v126) {
    unint64_t v9 = 0;
  }
  unint64_t v114 = v9;
  uint64_t v118 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
  std::string::size_type v109 = v7 + 6;
  unint64_t v14 = 0;
  CFAllocatorRef v111 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFAllocatorRef v110 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  while (0xCCCCCCCCCCCCCCCDLL * ((v118[1] - *v118) >> 3) > v14)
  {
    if (!v14 && (**(_DWORD **)(a1 + 8) & 0x2000000) != 0) {
      goto LABEL_129;
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
    uint64_t v115 = v16;
    __src = (char *)v15;
    v131[0] = 0;
    long long v130 = 0uLL;
    uint64_t v18 = *v118;
    uint64_t v17 = v118[1];
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - v18) >> 3);
    if (v20 == v14)
    {
      LOWORD(v21) = 0;
      goto LABEL_43;
    }
    unsigned __int16 v22 = (void *)v19;
    int v21 = 0;
    BOOL v23 = 0;
    int v24 = 0;
    unint64_t v25 = 0;
    unint64_t v26 = v20 - v14;
    do
    {
      uint64_t v27 = sub_216231FD4(a2, v25);
      uint64_t v29 = v28;
      uint64_t v30 = sub_2162319EC(a2, v25);
      char v32 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v27, v29, v30, v31);
      v24 |= (*(unsigned char *)(*v22 + 40 * v25 + 37) & 2) >> 1;
      if ((v24 & 1) == 0 && (v32 & 4) == 0)
      {
        unint64_t v7 = (void *)a7;
        int v65 = sub_2162D1CE4(0xAu);
        if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_79;
        }
        uint64_t v66 = (const UniChar *)sub_216231FD4(a2, v25);
        CFIndex v68 = v67;
        uint64_t v69 = (const UniChar *)sub_2162319EC(a2, v25);
        CFIndex v71 = v70;
        CFStringRef v72 = CFStringCreateWithCharactersNoCopy(v111, v66, v68, v110);
        CFStringRef v123 = v72;
        long long v73 = (__CFString *)CFStringCreateWithCharactersNoCopy(v111, v69, v71, v110);
        long long __p = v73;
        char v74 = sub_2162D1CE4(0xAu);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v72;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v73;
          _os_log_debug_impl(&dword_2160F5000, v74, OS_LOG_TYPE_DEBUG, "[MJNP::getAndCheckContextSurfaceAndReadingFromCandidate] %@ %@ is an invalid context word.", buf, 0x16u);
          if (!v73)
          {
LABEL_77:
            if (v72) {
              CFRelease(v72);
            }
LABEL_79:
            if (!v23) {
              goto LABEL_80;
            }
LABEL_43:
            if (v114 >= (unsigned __int16)v21) {
              __int16 v45 = (const UniChar *)(v113 + 2 * (unsigned __int16)v21);
            }
            else {
              __int16 v45 = 0;
            }
            int v46 = *v117;
            memset(buf, 0, sizeof(buf));
            sub_2162B054C(a1, __src, (unsigned __int16 *)v130, -(uint64_t)v14 - 0x3333333333333333 * ((v118[1] - *v118) >> 3), (uint64_t)buf);
            BOOL v47 = v46 == 0;
            int v48 = 2;
            if (v47) {
              int v49 = v14 != 0;
            }
            else {
              int v49 = 2;
            }
            CFStringRef v123 = 0;
            CFStringRef v124 = 0;
            uint64_t v125 = 0;
            if (*(_DWORD *)(*(void *)&buf[8] - 4) >= 0x1F4u)
            {
              int v50 = **(_DWORD **)(a1 + 8);
              if (!sub_2161EC100(*(_WORD *)&__src[2 * v115 - 2]))
              {
                double v51 = sub_2163668E4(*(void *)(a1 + 32), *(_DWORD **)buf, (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
                int v52 = (__int16)(v114 - v21);
                sub_2162B0688(a1, (uint64_t)buf, 0, 3, v49, v45, v52, v50, v51, (uint64_t)&v123);
                __int16 v53 = v127 - v114;
                long long __p = 0;
                unsigned __int16 v121 = 0;
                BOOL v122 = 0;
                sub_216185B34(&__p, (v52 & ~(v52 >> 31)) + (__int16)(v127 - v114));
                long long v54 = v121;
                if (v52 >= 1 && v45)
                {
                  uint64_t v55 = 0;
                  do
                  {
                    if (v54 >= v122)
                    {
                      unint64_t v57 = (char *)__p;
                      uint64_t v58 = v54 - (unsigned char *)__p;
                      if (v54 - (unsigned char *)__p <= -3) {
                        sub_21610CB04();
                      }
                      uint64_t v59 = v58 >> 1;
                      if (v122 - (unsigned char *)__p <= (unint64_t)((v58 >> 1) + 1)) {
                        uint64_t v60 = v59 + 1;
                      }
                      else {
                        uint64_t v60 = v122 - (unsigned char *)__p;
                      }
                      if ((unint64_t)(v122 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
                        uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v61 = v60;
                      }
                      if (v61)
                      {
                        char v62 = (char *)sub_21610FD44((uint64_t)&v122, v61);
                        unint64_t v57 = (char *)__p;
                        long long v54 = v121;
                      }
                      else
                      {
                        char v62 = 0;
                      }
                      std::string::size_type v63 = &v62[2 * v59];
                      *(_WORD *)std::string::size_type v63 = v45[v55];
                      CFStringRef v56 = v63 + 2;
                      while (v54 != v57)
                      {
                        __int16 v64 = *((_WORD *)v54 - 1);
                        v54 -= 2;
                        *((_WORD *)v63 - 1) = v64;
                        v63 -= 2;
                      }
                      long long __p = v63;
                      unsigned __int16 v121 = v56;
                      BOOL v122 = &v62[2 * v61];
                      if (v57) {
                        operator delete(v57);
                      }
                    }
                    else
                    {
                      *(_WORD *)long long v54 = v45[v55];
                      CFStringRef v56 = v54 + 2;
                    }
                    unsigned __int16 v121 = v56;
                    ++v55;
                    long long v54 = v56;
                  }
                  while (v55 != (unsigned __int16)v52);
                }
                else
                {
                  CFStringRef v56 = v121;
                }
                uint64_t v75 = v53;
                if ((int)v75 < 1)
                {
                  uint64_t v78 = v56;
                }
                else
                {
                  uint64_t v76 = 0;
                  uint64_t v77 = v126 + 2 * v127 - 2 * v53;
                  do
                  {
                    if (v56 >= v122)
                    {
                      uint64_t v79 = (char *)__p;
                      uint64_t v80 = v56 - (unsigned char *)__p;
                      if (v56 - (unsigned char *)__p <= -3) {
                        sub_21610CB04();
                      }
                      uint64_t v81 = v80 >> 1;
                      if (v122 - (unsigned char *)__p <= (unint64_t)((v80 >> 1) + 1)) {
                        uint64_t v82 = v81 + 1;
                      }
                      else {
                        uint64_t v82 = v122 - (unsigned char *)__p;
                      }
                      if ((unint64_t)(v122 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
                        uint64_t v83 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v83 = v82;
                      }
                      if (v83)
                      {
                        char v84 = (char *)sub_21610FD44((uint64_t)&v122, v83);
                        uint64_t v79 = (char *)__p;
                        CFStringRef v56 = v121;
                      }
                      else
                      {
                        char v84 = 0;
                      }
                      unint64_t v85 = &v84[2 * v81];
                      *(_WORD *)unint64_t v85 = *(_WORD *)(v77 + 2 * v76);
                      uint64_t v78 = v85 + 2;
                      while (v56 != v79)
                      {
                        __int16 v86 = *((_WORD *)v56 - 1);
                        v56 -= 2;
                        *((_WORD *)v85 - 1) = v86;
                        v85 -= 2;
                      }
                      long long __p = v85;
                      unsigned __int16 v121 = v78;
                      BOOL v122 = &v84[2 * v83];
                      if (v79) {
                        operator delete(v79);
                      }
                    }
                    else
                    {
                      *(_WORD *)CFStringRef v56 = *(_WORD *)(v77 + 2 * v76);
                      uint64_t v78 = v56 + 2;
                    }
                    unsigned __int16 v121 = v78;
                    ++v76;
                    CFStringRef v56 = v78;
                  }
                  while (v76 != v75);
                }
                CFStringRef v87 = CFStringCreateWithCharacters(0, (const UniChar *)__p, (v78 - (unsigned char *)__p) >> 1);
                CFStringRef v88 = v124;
                unint64_t v7 = (void *)a7;
                if (v123 != v124)
                {
                  p_info = (const void **)&v123->info;
                  while (1)
                  {
                    if (!*v117)
                    {
LABEL_117:
                      unsigned int v96 = **(_DWORD **)(a1 + 8);
                      BOOL v97 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
                      CFStringRef v98 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
                      CFStringRef v99 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2);
                      uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
                      LODWORD(v108) = 88;
                      sub_2162B10AC(a1, v97, v98, v99, v100, (uint64_t)v128, &v126, p_info, 0, v14, v108, v87, v96);
                      goto LABEL_118;
                    }
                    if (*p_info != p_info[1]) {
                      break;
                    }
LABEL_118:
                    CFStringRef v101 = (const __CFString *)(p_info + 3);
                    p_info += 4;
                    if (v101 == v88) {
                      goto LABEL_119;
                    }
                  }
                  uint64_t v91 = *v118;
                  uint64_t v90 = v118[1];
                  CFStringRef v129 = 0;
                  CFStringRef v92 = (const __CFString *)sub_216365930(*(void *)(a1 + 32));
                  BOOL v93 = *p_info;
                  std::string::size_type v94 = p_info[1];
                  CFStringRef v129 = v92;
                  if (0xCCCCCCCCCCCCCCCDLL * ((v90 - v91) >> 3) + 1 == (v94 - v93) >> 2
                    && *(void *)buf != *(void *)&buf[8]
                    && !memcmp(v93, *(const void **)buf, (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2)
                    && (sub_2161EC500(v92) & 1) != 0)
                  {
                    char v95 = 0;
                    if (!v92)
                    {
LABEL_116:
                      if (v95) {
                        goto LABEL_117;
                      }
                      goto LABEL_118;
                    }
                  }
                  else
                  {
                    char v95 = 1;
                    if (!v92) {
                      goto LABEL_116;
                    }
                  }
                  CFRelease(v92);
                  goto LABEL_116;
                }
LABEL_119:
                if (v87) {
                  CFRelease(v87);
                }
                if (__p)
                {
                  unsigned __int16 v121 = (char *)__p;
                  operator delete(__p);
                }
                int v48 = 0;
              }
            }
            long long __p = &v123;
            sub_2162B33A4((void ***)&__p);
            if (*(void *)buf)
            {
              *(void *)&uint8_t buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }
            goto LABEL_126;
          }
        }
        else if (!v73)
        {
          goto LABEL_77;
        }
        CFRelease(v73);
        goto LABEL_77;
      }
      __int16 v33 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 568))(a2, v25);
      __int16 v34 = v33;
      uint64_t v35 = (char *)*((void *)&v130 + 1);
      if (*((void *)&v130 + 1) >= v131[0])
      {
        long long v37 = (char *)v130;
        uint64_t v38 = *((void *)&v130 + 1) - v130;
        if ((uint64_t)(*((void *)&v130 + 1) - v130) <= -3) {
          sub_21610CB04();
        }
        uint64_t v39 = v38 >> 1;
        if (v131[0] - (void)v130 <= (unint64_t)((v38 >> 1) + 1)) {
          uint64_t v40 = v39 + 1;
        }
        else {
          uint64_t v40 = v131[0] - v130;
        }
        if (v131[0] - (void)v130 >= 0x7FFFFFFFFFFFFFFEuLL) {
          uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v41 = v40;
        }
        if (v41)
        {
          CFStringRef v42 = (char *)sub_21610FD44((uint64_t)v131, v41);
          uint64_t v35 = (char *)*((void *)&v130 + 1);
          long long v37 = (char *)v130;
        }
        else
        {
          CFStringRef v42 = 0;
        }
        CFStringRef v43 = &v42[2 * v39];
        *(_WORD *)CFStringRef v43 = v34;
        long long v36 = v43 + 2;
        while (v35 != v37)
        {
          __int16 v44 = *((_WORD *)v35 - 1);
          v35 -= 2;
          *((_WORD *)v43 - 1) = v44;
          v43 -= 2;
        }
        *(void *)&long long v130 = v43;
        *((void *)&v130 + 1) = v36;
        v131[0] = &v42[2 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        **((_WORD **)&v130 + 1) = v33;
        long long v36 = v35 + 2;
      }
      *((void *)&v130 + 1) = v36;
      v21 += (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 320))(a2, v25++);
      BOOL v23 = v25 >= v26;
    }
    while (v25 != v26);
    unint64_t v7 = (void *)a7;
    if ((v24 & 1) == 0) {
      goto LABEL_43;
    }
LABEL_80:
    int v48 = 4;
LABEL_126:
    if ((void)v130)
    {
      *((void *)&v130 + 1) = v130;
      operator delete((void *)v130);
    }
    if ((v48 | 4) == 4)
    {
LABEL_129:
      if (++v14 == 3) {
        break;
      }
      continue;
    }
    break;
  }
  *(void *)&long long v130 = &unk_26C6C7308;
  *((void *)&v130 + 1) = sub_2162171D4;
  v131[1] = &v130;
  sub_216215A00(v7, (uint64_t)&v130);
  sub_216199290(&v130);
  int v102 = sub_2162D1CE4(0xBu);
  BOOL v103 = os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG);
  uint64_t v104 = v7[7] - v7[6];
  if (!v103) {
    goto LABEL_139;
  }
  if ((unint64_t)v104 >= 0x19)
  {
    unint64_t v105 = 3;
    do
    {
      std::string::size_type v106 = sub_2162D1CE4(0xBu);
      if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v107 = (*(uint64_t (**)(void))(**(void **)(*v109 + 8 * v105) + 24))(*(void *)(*v109 + 8 * v105));
        LODWORD(v13sub_2161A108C(&a9, 0) = 138412290;
        *(void *)((char *)&v130 + 4) = v107;
        _os_log_debug_impl(&dword_2160F5000, v106, OS_LOG_TYPE_DEBUG, "Pruning %@ (n-gram expansion)", (uint8_t *)&v130, 0xCu);
      }
      ++v105;
      uint64_t v104 = v7[7] - v7[6];
    }
    while (v105 < v104 >> 3);
LABEL_139:
    if ((unint64_t)v104 >= 0x21) {
      sub_2162167D8(v7, 3uLL);
    }
  }
}

void sub_2162B284C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162B296C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const UniChar *a5@<X4>, CFIndex a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  v107[0] = a3;
  v107[1] = a4;
  unint64_t v105 = a5;
  CFIndex v106 = a6;
  *(void *)a7 = &unk_26C6BE968;
  *(_OWORD *)(a7 + 8) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_DWORD *)(a7 + 4sub_2161A108C(&a9, 0) = 1065353216;
  *(void *)(a7 + 56) = 0;
  *(void *)(a7 + 64) = 0;
  *(void *)(a7 + 48) = 0;
  if (!*(void *)(a1 + 32) || a2[2] == a2[1] || sub_2162EFAB0(a2)) {
    return;
  }
  std::string::size_type v89 = (void *)a7;
  unsigned int v11 = (unsigned __int16 *)sub_2161A2A80();
  uint64_t v12 = 4;
  if (!a4) {
    uint64_t v12 = 8;
  }
  unint64_t v87 = v12;
  uint64_t v13 = v11[164];
  int v102 = 0;
  BOOL v103 = 0;
  uint64_t v104 = 0;
  long long __p = 0;
  uint64_t v100 = 0;
  CFStringRef v101 = 0;
  uint64_t v15 = a2[1];
  unint64_t v14 = (long long *)a2[2];
  unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v14 - v15) >> 3);
  int v88 = v13;
  unint64_t v17 = (v16 - (*(void *)(*(void *)(a1 + 32) + 32) + v13)) & ~((uint64_t)(v16
                                                                             - (*(void *)(*(void *)(a1 + 32) + 32)
                                                                              + v13)) >> 63);
  if (v16 <= v17)
  {
    double v51 = 0;
    int v50 = 0;
    unsigned __int16 v18 = 0;
    unsigned __int16 v19 = 0;
LABEL_57:
    unint64_t v52 = *(void *)(a2[10] + 8 * v17);
    uint64_t v53 = a2[4];
    uint64_t v54 = a2[5] - v53;
    uint64_t v55 = (char *)(v53 + 2 * v52);
    if (v52 >= v54 >> 1) {
      CFStringRef v56 = 0;
    }
    else {
      CFStringRef v56 = v55;
    }
    if (v56) {
      CFIndex v57 = v19;
    }
    else {
      CFIndex v57 = 0;
    }
    unint64_t v58 = *(void *)(a2[13] + 8 * v17);
    uint64_t v59 = a2[7];
    uint64_t v60 = a2[8] - v59;
    uint64_t v61 = (const UniChar *)(v59 + 2 * v58);
    if (v58 >= v60 >> 1) {
      char v62 = 0;
    }
    else {
      char v62 = v61;
    }
    if (v62) {
      CFIndex v63 = v18;
    }
    else {
      CFIndex v63 = 0;
    }
    unsigned int v96 = 0;
    BOOL v97 = 0;
    uint64_t v98 = 0;
    sub_21620B0C4((long long *)(v15 + 40 * v17), v14, &v96);
    BOOL v93 = 0;
    std::string::size_type v94 = 0;
    uint64_t v95 = 0;
    sub_2162B054C(a1, v56, v102, v50 - v51, (uint64_t)&v93);
    double v64 = sub_2163668E4(*(void *)(a1 + 32), v93, (v94 - (unsigned char *)v93) >> 2);
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    sub_2162B0688(a1, (uint64_t)&v93, 0, 3, v88, v105, (__int16)v106, **(_DWORD **)(a1 + 8), v64, (uint64_t)&v90);
    CFStringRef v65 = CFStringCreateWithCharacters(0, v62, v63);
    CFStringRef v66 = CFStringCreateWithCharacters(0, (const UniChar *)v56, v57);
    CFStringRef v67 = CFStringCreateWithCharacters(0, v105, v106);
    uint64_t v68 = v90;
    if (v91 != v90)
    {
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      do
      {
        if (*(void *)(v68 + v69 + 8) != *(void *)(v68 + v69 + 16))
        {
          CFStringRef v71 = (const __CFString *)sub_216365930(*(void *)(a1 + 32));
          CFStringRef v72 = v71;
          if (v71)
          {
            CFIndex Length = CFStringGetLength(v71);
            if (Length && CFStringGetCharacterAtIndex(v72, Length - 1) != 12387)
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E3E0, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_26797E3E0))
              {
                qword_26797E3D8 = (uint64_t)CFSetCreate(0, (const void **)off_26797C7E0, 3, MEMORY[0x263EFFFA0]);
                __cxa_guard_release(&qword_26797E3E0);
              }
              BOOL v74 = CFSetContainsValue((CFSetRef)qword_26797E3D8, v72) == 0;
            }
            else
            {
              BOOL v74 = 0;
            }
            CFRelease(v72);
            if (v74)
            {
              LODWORD(v85) = 66;
              sub_2162B10AC(a1, (uint64_t *)&v96, v66, v65, 0, (uint64_t)v107, (uint64_t *)&v105, (void *)(v90 + v69 + 8), (v94 - (unsigned char *)v93) >> 2, 0, v85, v67, **(_DWORD **)(a1 + 8));
            }
          }
        }
        ++v70;
        uint64_t v68 = v90;
        v69 += 32;
      }
      while (v70 < (v91 - v90) >> 5);
    }
    *(void *)long long buf = &unk_26C6C7308;
    *(void *)&uint8_t buf[8] = sub_2162171D4;
    CFAllocatorRef v110 = buf;
    sub_216215A00(v89, (uint64_t)buf);
    sub_216199290(buf);
    uint64_t v75 = v89[6];
    uint64_t v76 = v89[7] - v75;
    unint64_t v77 = 0;
    if (v87 >= v76 >> 3) {
      uint64_t v78 = v76 >> 3;
    }
    else {
      uint64_t v78 = v87;
    }
    if (v78)
    {
      do
      {
        if ((*(double (**)(void))(**(void **)(v75 + 8 * v77) + 392))(*(void *)(v75 + 8 * v77)) < -100.0) {
          break;
        }
        ++v77;
        uint64_t v75 = v89[6];
        uint64_t v79 = v89[7] - v75;
        unint64_t v80 = v87 >= v79 >> 3 ? v79 >> 3 : v87;
      }
      while (v77 < v80);
    }
    sub_2162167D8(v89, v77);
    if (v67) {
      CFRelease(v67);
    }
    if (v66) {
      CFRelease(v66);
    }
    if (v65) {
      CFRelease(v65);
    }
    *(void *)long long buf = &v90;
    sub_2162B33A4((void ***)buf);
    if (v93)
    {
      std::string::size_type v94 = v93;
      operator delete(v93);
    }
    if (v96)
    {
      BOOL v97 = v96;
      operator delete(v96);
    }
    goto LABEL_103;
  }
  unsigned __int16 v18 = 0;
  unsigned __int16 v19 = 0;
  uint64_t v86 = (v16 - (*(void *)(*(void *)(a1 + 32) + 32) + v13)) & ~((uint64_t)(v16
                                                                             - (*(void *)(*(void *)(a1 + 32) + 32)
                                                                              + v13)) >> 63);
  unint64_t v20 = v86;
  while (1)
  {
    unint64_t v21 = *(void *)(a2[10] + 8 * v20);
    uint64_t v22 = a2[4];
    if (v21 >= (a2[5] - v22) >> 1)
    {
      BOOL v23 = 0;
      CFIndex v24 = 0;
    }
    else
    {
      BOOL v23 = (const UniChar *)(v22 + 2 * v21);
      CFIndex v24 = v22 ? *(unsigned __int16 *)(v15 + 40 * v20 + 24) : 0;
    }
    unint64_t v25 = *(void *)(a2[13] + 8 * v20);
    uint64_t v26 = a2[7];
    if (v25 >= (a2[8] - v26) >> 1)
    {
      uint64_t v27 = 0;
      CFIndex v28 = 0;
    }
    else
    {
      uint64_t v27 = (const UniChar *)(v26 + 2 * v25);
      CFIndex v28 = v26 ? *(unsigned __int16 *)(v15 + 40 * v20 + 28) : 0;
    }
    if (*(void *)(*(void *)(a1 + 32) + 32) + v20 > 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v14 - v15) >> 3))
    {
      int v29 = (*(uint64_t (**)(void, const UniChar *, CFIndex, const UniChar *, CFIndex))(**(void **)(a1 + 24)
                                                                                                  + 32))(*(void *)(a1 + 24), v27, v28, v23, v24);
      if ((v29 & 4) == 0) {
        break;
      }
    }
    uint64_t v30 = v103;
    if (v103 >= v104)
    {
      char v32 = v102;
      uint64_t v33 = (char *)v103 - (char *)v102;
      if ((char *)v103 - (char *)v102 <= -3) {
        goto LABEL_116;
      }
      uint64_t v34 = v33 >> 1;
      if ((char *)v104 - (char *)v102 <= (unint64_t)((v33 >> 1) + 1)) {
        uint64_t v35 = v34 + 1;
      }
      else {
        uint64_t v35 = (char *)v104 - (char *)v102;
      }
      if ((unint64_t)((char *)v104 - (char *)v102) >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v36 = v35;
      }
      if (v36)
      {
        long long v37 = (char *)sub_21610FD44((uint64_t)&v104, v36);
        char v32 = v102;
        uint64_t v30 = v103;
      }
      else
      {
        long long v37 = 0;
      }
      uint64_t v38 = (unsigned __int16 *)&v37[2 * v34];
      unsigned __int16 *v38 = v24;
      uint64_t v31 = v38 + 1;
      while (v30 != v32)
      {
        unsigned __int16 v39 = *--v30;
        *--uint64_t v38 = v39;
      }
      int v102 = v38;
      BOOL v103 = v31;
      uint64_t v104 = (unsigned __int16 *)&v37[2 * v36];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *BOOL v103 = v24;
      uint64_t v31 = v30 + 1;
    }
    BOOL v103 = v31;
    uint64_t v40 = v100;
    if (v100 >= v101)
    {
      CFStringRef v42 = (char *)__p;
      uint64_t v43 = v100 - (unsigned char *)__p;
      if (v100 - (unsigned char *)__p < -2) {
LABEL_116:
      }
        sub_21610CB04();
      uint64_t v44 = v43 >> 1;
      if (v101 - (unsigned char *)__p <= (unint64_t)((v43 >> 1) + 1)) {
        uint64_t v45 = v44 + 1;
      }
      else {
        uint64_t v45 = v101 - (unsigned char *)__p;
      }
      if ((unint64_t)(v101 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v46 = v45;
      }
      if (v46)
      {
        BOOL v47 = (char *)sub_21610FD44((uint64_t)&v101, v46);
        CFStringRef v42 = (char *)__p;
        uint64_t v40 = v100;
      }
      else
      {
        BOOL v47 = 0;
      }
      int v48 = &v47[2 * v44];
      *(_WORD *)int v48 = v28;
      uint64_t v41 = v48 + 2;
      while (v40 != v42)
      {
        __int16 v49 = *((_WORD *)v40 - 1);
        v40 -= 2;
        *((_WORD *)v48 - 1) = v49;
        v48 -= 2;
      }
      long long __p = v48;
      uint64_t v100 = v41;
      CFStringRef v101 = &v47[2 * v46];
      if (v42) {
        operator delete(v42);
      }
    }
    else
    {
      *(_WORD *)uint64_t v100 = v28;
      uint64_t v41 = v40 + 2;
    }
    uint64_t v100 = v41;
    v19 += v24;
    v18 += v28;
    ++v20;
    uint64_t v15 = a2[1];
    unint64_t v14 = (long long *)a2[2];
    if (v20 >= 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v14 - v15) >> 3))
    {
      double v51 = v102;
      int v50 = v103;
      unint64_t v17 = v86;
      goto LABEL_57;
    }
  }
  uint64_t v81 = sub_2162D1CE4(0xAu);
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v82 = (__CFString *)CFStringCreateWithCharacters(0, v27, v28);
    unsigned int v96 = v82;
    uint64_t v83 = (__CFString *)CFStringCreateWithCharacters(0, v23, v24);
    BOOL v93 = v83;
    char v84 = sub_2162D1CE4(0xAu);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v82;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v83;
      __int16 v109 = 1024;
      LODWORD(v11sub_2161A108C(&a9, 0) = v29;
      _os_log_debug_impl(&dword_2160F5000, v84, OS_LOG_TYPE_DEBUG, "getAndCheckContextSurfaceAndReadingFromHistory: %@ %@ (attr: %d) is an invalid context word.", buf, 0x1Cu);
      if (!v83)
      {
LABEL_112:
        if (v82) {
          CFRelease(v82);
        }
        goto LABEL_103;
      }
    }
    else if (!v83)
    {
      goto LABEL_112;
    }
    CFRelease(v83);
    goto LABEL_112;
  }
LABEL_103:
  if (__p)
  {
    uint64_t v100 = (char *)__p;
    operator delete(__p);
  }
  if (v102)
  {
    BOOL v103 = v102;
    operator delete(v102);
  }
}

void sub_2162B31E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21,const void *a22,const void *a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  __cxa_guard_abort(&qword_26797E3E0);
  sub_2161868BC(&a21, 0);
  sub_2161868BC(&a22, 0);
  sub_2161868BC(&a23, 0);
  *(void *)(v36 - 144) = &a24;
  sub_2162B33A4((void ***)(v36 - 144));
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  uint64_t v38 = *(void **)(v36 - 200);
  if (v38)
  {
    *(void *)(v36 - 192) = v38;
    operator delete(v38);
  }
  sub_21618A144(a20);
  _Unwind_Resume(a1);
}

void sub_2162B332C()
{
}

uint64_t sub_2162B3340(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2162B33A4(void ***a1)
{
  CFStringRef v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2162B3430(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_2162B34C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[1];
  v1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *v1;
  *CFStringRef v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2162B3534(uint64_t *a1)
{
  uint64_t v2 = a1 + 2;
  sub_21635F8DC(a1[2]);
  std::mutex::~mutex((std::mutex *)(a1 + 3));
  sub_21625823C(v2, 0);
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_2162B35DC(uint64_t a1, CFArrayRef theArray)
{
  if (theArray && CFArrayGetCount(theArray))
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count)
    {
      uint64_t v5 = Count;
      if ((Count & 1) == 0)
      {
        CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], Count, MEMORY[0x263EFFF70]);
        if (v5 >= 1)
        {
          CFIndex v7 = 0;
          CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFD08];
          do
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v7);
            if (ValueAtIndex != v8)
            {
              CFStringRef v10 = ValueAtIndex;
              if (CFStringGetLength(ValueAtIndex))
              {
                CFIndex length = CFStringGetRangeOfComposedCharactersAtIndex(v10, 0).length;
                if (length < CFStringGetLength(v10))
                {
                  CFArrayAppendValue(Mutable, v10);
                  CFArrayAppendValue(Mutable, v10);
                }
              }
            }
            v7 += 2;
          }
          while (v7 < v5);
        }
        if (Mutable)
        {
          if (CFArrayGetCount(Mutable))
          {
            std::mutex::lock((std::mutex *)(a1 + 24));
            operator new();
          }
          CFRelease(Mutable);
        }
      }
    }
  }
  else
  {
    sub_2162B383C((uint64_t *)a1);
  }
}

void sub_2162B3828(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2162B383C(uint64_t *a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  std::mutex::unlock(v2);
}

void sub_2162B38DC(uint64_t *a1)
{
  unint64_t v6 = (std::mutex *)(a1 + 3);
  char v7 = 0;
  if (sub_2162B3998((uint64_t)&v6))
  {
    uint64_t v2 = a1[1];
    if (v2)
    {
      unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 97));
      if ((v3 & 1) == 0)
      {
        unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v2 + 96));
        if (v4)
        {
          uint64_t v5 = *a1;
          *a1 = a1[1];
          a1[1] = 0;
          if (v5) {
            (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
          }
        }
      }
    }
  }
  if (v7) {
    std::mutex::unlock(v6);
  }
}

void sub_2162B397C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162B3998(uint64_t a1)
{
  uint64_t v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t result = std::mutex::try_lock(v2);
      *(unsigned char *)(a1 + 8) = result;
      return result;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::try_lock: already locked");
  return sub_2162B39F0();
}

void sub_2162B39F0(uint64_t *a1, const __CFString *a2, uint64_t *a3, uint64_t a4)
{
  sub_2162B38DC(a1);
  if (*a1)
  {
    uint64_t v9 = *a3;
    uint64_t v8 = a3[1];
    if (v8 != *a3)
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(void *)(v9 + 8 * v10);
        if ((unint64_t)(v11 - 10) < 0xFFFFFFFFFFFFFFF7) {
          break;
        }
        if (a4 == -1 || v11 == a4)
        {
          sub_2161E212C(a2, (UniChar **)&__p);
          if (__p) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          uint64_t v13 = (unsigned __int8 *)*a1;
          v14[0] = MEMORY[0x263EF8330];
          v14[1] = 0x40000000;
          void v14[2] = sub_2162B3B48;
          uint64_t v14[3] = &unk_2642670F8;
          v14[4] = a1;
          void v14[5] = v11;
          sub_21620D168(v13, (uint64_t)__p + 2 * (((unint64_t)(v16 - (unsigned char *)__p) >> 1) - v11), v12, (uint64_t)v14);
          if (__p)
          {
            unint64_t v16 = __p;
            operator delete(__p);
          }
          uint64_t v9 = *a3;
          uint64_t v8 = a3[1];
        }
        ++v10;
      }
      while (v10 < (v8 - v9) >> 3);
    }
  }
}

void sub_2162B3B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162B3B48(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 24) > *(void *)(a1 + 40))
  {
    unsigned __int8 v4 = *(const UniChar **)(a2 + 16);
    if (v4) {
      CFIndex v5 = *(void *)(a1 + 40);
    }
    else {
      CFIndex v5 = 0;
    }
    CFStringRef v6 = CFStringCreateWithCharacters(0, v4, v5);
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v8 = *(void *)(a1 + 40);
    unsigned __int8 v9 = sub_2161E4358(v6);
    uint64_t v10 = v7 - v8;
    if (v9)
    {
      if (v10 <= 3)
      {
        unint64_t v11 = *(void *)(a1 + 40);
LABEL_10:
        uint64_t v12 = *(void *)(a2 + 16);
        uint64_t v13 = (char *)(v12 + 2 * v11);
        if (v12) {
          CFIndex v14 = v7 - v8;
        }
        else {
          CFIndex v14 = 0;
        }
        CFStringCreateWithCharacters(0, (const UniChar *)(v12 + 2 * v11), v14);
        uint64_t v15 = (2 * v14);
        if (v15)
        {
          unsigned int v16 = 0;
          do
          {
            int v17 = *v13++;
            unsigned int v16 = (1025 * (v16 + v17)) ^ ((1025 * (v16 + v17)) >> 6);
            --v15;
          }
          while (v15);
        }
        operator new();
      }
    }
    else
    {
      unint64_t v11 = *(void *)(a1 + 40);
      if (v11 > 2 || v10 <= 2) {
        goto LABEL_10;
      }
    }
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_2162B3D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, const void *);
  if (a5) {
    sub_2161121B0(a5);
  }
  MEMORY[0x2166CA800](v5, 0x10A1C4025EE9B24);
  sub_2161868BC((const void **)va, 0);
  sub_2161868BC((const void **)va1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162B3DB0(uint64_t *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x30uLL);
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = &unk_26C6C9578;
  uint64_t result = sub_21622533C((uint64_t)(v8 + 3), a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2162B3E2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2162B3E44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2162B3E64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9578;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162B3EB8(uint64_t a1)
{
  return sub_216225EDC(a1 + 24);
}

uint64_t sub_2162B3EC4(void *a1, int a2)
{
  uint64_t v2 = sub_2162B3F00(a1, a2);
  int v3 = sub_21635265C(*(void *)(v2 + 56));
  return sub_21635265C(*(void *)(v2 + 64)) | v3;
}

uint64_t sub_2162B3F00(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t result = a1[4];
    if (!result) {
      operator new();
    }
  }
  else if (a2 == 1)
  {
    uint64_t result = a1[3];
    if (!result) {
      operator new();
    }
  }
  else if (a2)
  {
    return 0;
  }
  else
  {
    uint64_t result = a1[2];
    if (!result) {
      operator new();
    }
  }
  return result;
}

void sub_2162B401C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1060C40E5902F1BLL);
  _Unwind_Resume(a1);
}

void sub_2162B4048(void *a1, const void *a2, int a3)
{
  uint64_t v5 = sub_2162B3F00(a1, a3);
  sub_2161BD338(v5, a2);
  if (a3 == 2) {
    operator new();
  }
}

void sub_2162B415C(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 2:
      uint64_t v3 = a1[4];
      goto LABEL_5;
    case 1:
      uint64_t v3 = a1[3];
      goto LABEL_5;
    case 0:
      uint64_t v3 = a1[2];
LABEL_5:
      sub_2161BDF60(v3, (char **)a3);
      return;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
}

uint64_t sub_2162B4194(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2161BD19C(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2162B41E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, __CFArray *a11)
{
  uint64_t v11 = MEMORY[0x270FA5388]();
  unint64_t v160 = v17;
  uint64_t v198 = *MEMORY[0x263EF8340];
  if (v18 != 2037345641) {
    return 4294960183;
  }
  if ((unint64_t)v12 > 0xC8) {
    return 4294960179;
  }
  uint64_t v20 = v11;
  uint64_t v21 = 0;
  while (*(_DWORD *)&aKoyhdnihsnihuk[v21 + 20] != v14)
  {
    v21 += 4;
    if (v21 == 12) {
      return 4294960183;
    }
  }
  char v172 = 0;
  *(_DWORD *)s = 0;
  uint64_t v153 = v11;
  if (v15)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      uint64_t v23 = 0;
      while (*(_DWORD *)(v16 + 4 * i) != *(_DWORD *)&aKoyhdnihsnihuk[4 * v23])
      {
        if (++v23 == 5) {
          return 4294960183;
        }
      }
      if (*((unsigned char *)s + v23)) {
        return 4294960185;
      }
      *((unsigned char *)s + v23) = 1;
    }
    if (v14 == 1025515552)
    {
      unint64_t v24 = 0;
      unsigned int v25 = 1;
      long long v182 = 0u;
      long long v183 = 0u;
      long long v180 = 0u;
      long long v181 = 0u;
      unsigned __int8 v164 = 0;
      char v139 = -1;
      char v140 = -1;
      char v141 = -1;
      char v158 = -1;
      int v138 = 255;
      while (1)
      {
        int v26 = *(_DWORD *)(v16 + 4 * v24);
        uint64_t result = 4294960184;
        if (v26 <= 1751740018)
        {
          if (v26 == 1718971253)
          {
            if (v141 != -1) {
              return 4294960185;
            }
            *((void *)&v180 + v24) = &v184;
            v179[v24] = 0;
            char v141 = v25 - 1;
            goto LABEL_35;
          }
          if (v26 != 1751740004) {
            return result;
          }
          uint64_t v20 = v153;
          if (v140 != -1) {
            return 4294960185;
          }
          *((void *)&v180 + v24) = &v166;
          v179[v24] = 2;
          char v140 = v25 - 1;
        }
        else
        {
          if (v26 == 1751740019)
          {
            if (v138 != 255) {
              return 4294960185;
            }
            *((void *)&v180 + v24) = &v167;
            v179[v24] = 2;
            int v138 = (v25 - 1);
LABEL_35:
            uint64_t v20 = v153;
            goto LABEL_36;
          }
          if (v26 == 1835360622)
          {
            if (v139 != -1) {
              return 4294960185;
            }
            *((void *)&v180 + v24) = &v165[1];
            v179[v24] = 4;
            char v139 = v25 - 1;
            goto LABEL_35;
          }
          if (v26 != 1752788843) {
            return result;
          }
          uint64_t v20 = v153;
          if (v158 != -1) {
            return 4294960185;
          }
          *((void *)&v180 + v24) = v186;
          char v158 = v25 - 1;
        }
LABEL_36:
        unint64_t v24 = v25++;
        if (v24 >= v15) {
          goto LABEL_40;
        }
      }
    }
    return 4294960178;
  }
  if (v14 != 1025515552) {
    return 4294960178;
  }
  long long v182 = 0u;
  long long v183 = 0u;
  int v138 = 255;
  long long v180 = 0u;
  long long v181 = 0u;
  unsigned __int8 v164 = 0;
  char v158 = -1;
  char v141 = -1;
  char v140 = -1;
  char v139 = -1;
LABEL_40:
  uint64_t v27 = 0;
  __int16 v166 = 0;
  memset(v165, 0, sizeof(v165));
  int v162 = 0;
  unsigned int v163 = 0;
  uint64_t v28 = v12 >> 1;
  uint64_t v29 = v12 >> 1;
  uint64_t v30 = v12 >> 1;
  uint64_t v159 = v12;
  while (v30)
  {
    int v31 = *(unsigned __int16 *)(v13 + v27 * 2);
    v187[v27++] = v31;
    --v30;
    if (!v31)
    {
      if (v30)
      {
        bzero(&v187[v27], 2 * v28 - v27 * 2);
        uint64_t v12 = v159;
      }
      break;
    }
  }
  *(unsigned __int16 *)((char *)v187 + v12) = 0;
  __int16 v167 = 30;
  if (*(unsigned __int16 *)(v20 + 82) <= 5u)
  {
    LODWORD(v142) = 0;
    LODWORD(v137) = 0;
    v165[0] = 0;
  }
  else
  {
    sub_216367B18(*(void *)(v20 + 84) + 160, (unsigned __int8 *)v187, (unsigned __int16)v12, v178, v165);
    if (v165[0] && (int v32 = sub_2162B5684((uint64_t)v178, v165[0], 9u, v170, 8u)) != 0)
    {
      int v33 = v32;
      LODWORD(v137) = 0;
      LODWORD(v142) = 0;
      int v34 = 0;
      uint64_t v148 = (UInt8 *)v180;
      do
      {
        if (sub_2162B5718(v34, (uint64_t)v178, v165[0], &__dst, &v164, v170) == -11) {
          goto LABEL_74;
        }
        if (v158 != -1)
        {
          uint64_t v35 = v176;
          uint64_t v36 = 7 * v176;
          uint64_t v37 = v164;
          signed int v38 = v164 - v36 - 9 + (((v164 - v36 - 9) & 0x8000u) >> 15);
          int v39 = v38 >> 1;
          uint64_t v40 = (uint64_t)v38 >> 1;
          size_t v41 = 2 * v39;
          CFStringRef v42 = (unsigned __int16 *)&v177[v36];
          uint64_t v43 = v186;
          while (v40)
          {
            int v44 = *v42++;
            *v43++ = v44;
            v41 -= 2;
            --v40;
            if (!v44)
            {
              if (v40) {
                bzero(v43, v41);
              }
              break;
            }
          }
          v179[v158] = v37 - 7 * v35 - 9;
        }
        if (v141 != -1)
        {
          if (v176 && v176 <= 0x49u)
          {
            size_t v45 = 7 * v176;
            v179[v141] = v45;
            memmove(*((void **)&v180 + v141), v177, v45);
          }
          else
          {
            v179[v141] = 0;
          }
        }
        if (v140 != -1) {
          **((_WORD **)&v180 + v14sub_2161A108C(&a9, 0) = bswap32(*(unsigned __int16 *)&v175[1]) >> 16;
        }
        if (v139 != -1) {
          **((_DWORD **)&v180 + v139) = bswap32(*(unsigned int *)&v175[3]);
        }
        if (v138 != 255)
        {
          if (v176) {
            __int16 v46 = 7;
          }
          else {
            __int16 v46 = 30;
          }
          __int16 v167 = v46;
        }
        unint64_t v142 = (v142 + 1);
        if (v142 <= v160)
        {
LABEL_74:
          uint64_t v12 = v159;
        }
        else
        {
          sub_2162B57A4(v148, v179[0], a11);
          unint64_t v137 = (v137 + 1);
          uint64_t v12 = v159;
          if (a9 - 1 < v137) {
            return 0;
          }
        }
        ++v34;
      }
      while (v34 != v33);
    }
    else
    {
      LODWORD(v142) = 0;
      LODWORD(v137) = 0;
      uint64_t v12 = v159;
    }
  }
  uint64_t v47 = 0;
  __int16 v167 = 14;
  *(_DWORD *)&v165[1] = 0;
  unsigned __int8 v169 = 0;
  uint64_t v168 = 1;
  uint64_t v48 = v153;
  while (v29)
  {
    int v49 = v187[v47];
    v197[v47++] = v49;
    --v29;
    if (!v49)
    {
      if (v29)
      {
        bzero(&v197[v47], 2 * v28 - v47 * 2);
        uint64_t v12 = v159;
      }
      break;
    }
  }
  *(UChar *)((char *)v197 + v12) = 0;
  uint64_t v188 = 0x100010001;
  __int16 v189 = 1;
  uint64_t v190 = 0;
  uint64_t v191 = 0x1000100010001;
  int v192 = 0;
  __int16 v50 = u_strlen(v197);
  int v143 = 0;
  unsigned int v151 = 0;
  if (*(unsigned __int16 *)(v153 + 82) >= 7u)
  {
    unsigned __int8 v51 = 0;
    unsigned int v151 = 0;
    int v143 = 0;
    while (1)
    {
      sub_216367D68(*(void *)(v48 + 84) + 192, (uint64_t)v197, 2 * (v50 & 0x7FFF), &v195, &v169, (uint64_t)&v168);
      uint64_t v52 = v169;
      if (!v169) {
        goto LABEL_145;
      }
      unsigned int v147 = bswap32(v195) >> 16;
      char v144 = v196;
      int v53 = 0;
      if (v169 < 5u) {
        break;
      }
      int v54 = 4;
      do
      {
        if (*((unsigned __int8 *)&v195 + v54) == 255 && *((unsigned __int8 *)&v195 + v54 + 1) == 255)
        {
          v54 += 4;
          ++v53;
        }
        v54 += 2;
      }
      while (v54 < v169);
      if ((v53 & 0x80000000) == 0) {
        break;
      }
      int v56 = 0;
      int v55 = 0;
LABEL_142:
      if (!(v55 | v56))
      {
        v173[v143] = v147;
        v161[v143] = v144;
        *(_DWORD *)&v173[2 * v143++ + 5] = SWORD2(v168);
      }
      uint64_t v48 = v153;
      __int16 v50 = u_strlen(v197);
      if (*(unsigned __int16 *)(v153 + 82) <= 6u) {
        goto LABEL_145;
      }
    }
    int v55 = 0;
    int v56 = 0;
    int v57 = 0;
    UChar v146 = WORD2(v168);
    int v145 = -WORD2(v168);
    while (1)
    {
      BOOL v58 = v57 != 0;
      int v59 = 4;
      if (v52 >= 5 && v57)
      {
        int v60 = 0;
        int v59 = 4;
        do
        {
          if (*((unsigned __int8 *)&v195 + v59) == 255 && *((unsigned __int8 *)&v195 + v59 + 1) == 255)
          {
            v59 += 2;
            ++v60;
          }
          v59 += 2;
          BOOL v58 = v60 != v57;
        }
        while (v60 != v57 && v59 < (int)v52);
      }
      if (v58) {
        goto LABEL_137;
      }
      __int16 v61 = *(_WORD *)&v194[v59 + 254];
      __int16 v193 = v61;
      if (v59 >= (int)v52)
      {
        unsigned int v67 = v61;
        unsigned __int8 v63 = 2;
      }
      else
      {
        uint64_t v62 = v59;
        unsigned __int8 v63 = 2;
        do
        {
          int v64 = *((unsigned __int8 *)&v195 + v62);
          int v65 = *((unsigned __int8 *)&v195 + v62 + 1);
          if (v64 == 255 && v65 == 255) {
            break;
          }
          v194[v63 - 2] = v64;
          uint64_t v66 = v63 | 1;
          v63 += 2;
          v194[v66 - 2] = v65;
          v62 += 2;
        }
        while (v62 < v52);
        unsigned int v67 = v193;
      }
      if ((v67 & 0xFC) == 0xC8)
      {
        int v56 = 1;
      }
      else
      {
        int v55 = 1;
        BOOL v68 = v67 > 0x17 || ((1 << v67) & 0x80400C) == 0;
        if (v68 && v67 - 220 >= 2) {
          int v55 = 0;
        }
        if (v51 <= 0x31u)
        {
          int bytes = v56;
          uint64_t v69 = &s[36 * v51];
          v69[33] = v146;
          unint64_t v70 = v69 + 33;
          if (v67 - 112 < 4 || v67 == 121) {
            *unint64_t v70 = v145;
          }
          unsigned int v71 = HIBYTE(v193);
          if (v67 <= 0x9F
            && HIBYTE(v193) == 3
            && !*(unsigned __int16 *)((char *)&v187[129] + (((429496730 * (unint64_t)v67) >> 31) & 0x3E)))
          {
            goto LABEL_137;
          }
          int v149 = v55;
          uint64_t v72 = v63 - 2;
          int v73 = v72 + ((unsigned __int16)(v72 & 0x8000) >> 15);
          int v74 = v73 >> 1;
          uint64_t v75 = (uint64_t)v73 >> 1;
          size_t v76 = 2 * v74;
          unint64_t v77 = (unsigned __int16 *)v194;
          uint64_t v78 = &s[36 * v51];
          while (v75)
          {
            int v79 = *v77++;
            *v78++ = v79;
            v76 -= 2;
            --v75;
            if (!v79)
            {
              if (v75) {
                bzero(v78, v76);
              }
              break;
            }
          }
          *(UChar *)((char *)&s[36 * v51] + v72) = 0;
          char v80 = sub_2162B55B0(v67);
          uint64_t v81 = &s[36 * v51];
          *((unsigned char *)v81 + 68) = v80;
          unint64_t v82 = 0xA01000206uLL >> (8 * v71);
          if (v71 >= 5) {
            LOBYTE(v82) = 11;
          }
          *((unsigned char *)v81 + 69) = v82;
          v81[35] = v147;
          ++v151;
          int v56 = bytes;
          int v55 = v149;
        }
        ++v51;
      }
LABEL_137:
      BOOL v68 = v57++ == v53;
      if (v68) {
        goto LABEL_142;
      }
    }
  }
LABEL_145:
  if (v151)
  {
    LODWORD(v83) = v137;
    unint64_t v84 = a9 - 1;
    uint64_t v85 = (UInt8 *)v180;
    uint64_t v86 = s;
    LODWORD(v87) = v142;
    int v88 = (unint64_t *)&v179[v158];
    uint64_t v89 = v151;
    uint64_t v90 = v159;
    int v91 = a10;
    while (1)
    {
      if (v91)
      {
        int v92 = *((unsigned __int8 *)v86 + 69);
        if (v92 == 1 || v92 == 10) {
          goto LABEL_173;
        }
      }
      if ((__int16)v86[33] != v90) {
        goto LABEL_173;
      }
      sub_2162D7D88(v186, v86, 0x42uLL);
      if (!v186[0]) {
        goto LABEL_172;
      }
      UChar v94 = v86[35];
      __int16 v166 = v94 + sub_2162B580C(*((unsigned __int8 *)v86 + 68), *((unsigned __int8 *)v86 + 69)) + 1000;
      if (v158 != -1) {
        *int v88 = 2 * u_strlen(v86);
      }
      unint64_t v95 = (v87 + 1);
      if (v95 <= v160)
      {
        uint64_t v90 = v159;
        int v91 = a10;
      }
      else
      {
        sub_2162B57A4(v85, v179[0], a11);
        unint64_t v83 = (v83 + 1);
        uint64_t v90 = v159;
        int v91 = a10;
        if (v84 < v83) {
          return 0;
        }
      }
      if (v158 != -1) {
        break;
      }
      LODWORD(v87) = v87 + 1;
LABEL_173:
      v86 += 36;
      if (!--v89) {
        goto LABEL_176;
      }
    }
    if (!v91 || *((unsigned char *)v86 + 69) != 6)
    {
      int32_t v96 = u_strlen(v86);
      if ((int)sub_2162B58F4(*(unsigned __int16 **)(v153 + 44), v86, 2 * v96, *((unsigned __int8 *)v86 + 69), v185, v88) >= 1)
      {
        unint64_t v95 = (v87 + 2);
        if (v95 > v160)
        {
          UChar v97 = v86[35];
          __int16 v166 = v97 + sub_2162B580C(*((unsigned __int8 *)v86 + 68), (*((unsigned char *)v86 + 69) + 1)) + 1000;
          *(UChar *)((char *)v185 + *v88) = 0;
          sub_2162D7D88(v186, v185, 0x42uLL);
          sub_2162B57A4(v85, v179[0], a11);
          unint64_t v83 = (v83 + 1);
          if (v84 < v83) {
            return 0;
          }
        }
      }
    }
    int32_t v98 = u_strlen(v86);
    if ((int)sub_2162B5AE8(*(unsigned __int16 **)(v153 + 44), *(_WORD **)(v153 + 60), v86, 2 * v98, *((unsigned __int8 *)v86 + 69), (uint64_t)v185, v88) < 1)
    {
      LODWORD(v87) = v95;
    }
    else
    {
      unint64_t v87 = (v95 + 1);
      if (v87 > v160)
      {
        UChar v99 = v86[35];
        __int16 v166 = v99 + sub_2162B580C(*((unsigned __int8 *)v86 + 68), (*((unsigned char *)v86 + 69) + 2)) + 1000;
        *(UChar *)((char *)v185 + *v88) = 0;
        sub_2162D7D88(v186, v185, 0x42uLL);
        sub_2162B57A4(v85, v179[0], a11);
        unint64_t v83 = (v83 + 1);
        uint64_t v90 = v159;
        int v91 = a10;
        if (v84 < v83) {
          return 0;
        }
        goto LABEL_173;
      }
    }
LABEL_172:
    uint64_t v90 = v159;
    int v91 = a10;
    goto LABEL_173;
  }
  LODWORD(v87) = v142;
  LODWORD(v83) = v137;
  LOWORD(v9sub_2161A108C(&a9, 0) = v159;
LABEL_176:
  if (v143)
  {
    uint64_t v100 = 0;
    CFStringRef v101 = (UInt8 *)v180;
    unint64_t v102 = a9 - 1;
    int v157 = (__int16)v90;
    BOOL v103 = (unint64_t *)&v179[v158];
    do
    {
      int v104 = 0;
      int v162 = 0;
      uint64_t v105 = *(unsigned int *)&v173[2 * v100 + 5];
      __int16 v106 = v173[v100];
      uint64_t v150 = v100;
      char v107 = v161[v100];
      __int16 bytesa = v106;
      char v152 = v107;
      do
      {
        unsigned int v163 = 0;
        if (sub_216361194(v153, v187, v157, v105, (uint64_t)s, &v162, (int *)&v163, 0, v106, v107)) {
          break;
        }
        int v108 = a10;
        if (v104 == v162) {
          break;
        }
        if (v163)
        {
          uint64_t v109 = v105;
          unint64_t v110 = 0;
          uint64_t v111 = s;
          uint64_t v112 = v159;
          while (1)
          {
            if (v108)
            {
              int v113 = *((unsigned __int8 *)v111 + 69);
              if (v113 == 1 || v113 == 10) {
                goto LABEL_209;
              }
            }
            if ((__int16)v111[33] != v112) {
              goto LABEL_209;
            }
            sub_2162D7D88(v186, v111, 0x42uLL);
            if (!v186[0]) {
              goto LABEL_208;
            }
            if (v158 != -1) {
              *BOOL v103 = 2 * u_strlen(v111);
            }
            UChar v115 = v111[35];
            __int16 v166 = v115 + sub_2162B580C(*((unsigned __int8 *)v111 + 68), *((unsigned __int8 *)v111 + 69)) + 1000;
            unint64_t v116 = (v87 + 1);
            if (v116 <= v160)
            {
              uint64_t v112 = v159;
              int v108 = a10;
            }
            else
            {
              sub_2162B57A4(v101, v179[0], a11);
              unint64_t v83 = (v83 + 1);
              uint64_t v112 = v159;
              int v108 = a10;
              if (v102 < v83) {
                return 0;
              }
            }
            if (v158 != -1) {
              break;
            }
            LODWORD(v87) = v87 + 1;
LABEL_209:
            ++v110;
            v111 += 36;
            if (v110 >= v163)
            {
              int v104 = v162;
              uint64_t v105 = v109;
              __int16 v106 = bytesa;
              char v107 = v152;
              goto LABEL_212;
            }
          }
          if (!v108 || *((unsigned char *)v111 + 69) != 6)
          {
            int32_t v117 = u_strlen(v111);
            if ((int)sub_2162B58F4(*(unsigned __int16 **)(v153 + 44), v111, 2 * v117, *((unsigned __int8 *)v111 + 69), v185, v103) >= 1)
            {
              unint64_t v116 = (v87 + 2);
              if (v116 > v160)
              {
                UChar v118 = v111[35];
                __int16 v166 = v118
                     + sub_2162B580C(*((unsigned __int8 *)v111 + 68), (*((unsigned char *)v111 + 69) + 1))
                     + 1000;
                *(UChar *)((char *)v185 + *v103) = 0;
                sub_2162D7D88(v186, v185, 0x42uLL);
                sub_2162B57A4(v101, v179[0], a11);
                unint64_t v83 = (v83 + 1);
                if (v102 < v83) {
                  return 0;
                }
              }
            }
          }
          int32_t v119 = u_strlen(v111);
          if ((int)sub_2162B5AE8(*(unsigned __int16 **)(v153 + 44), *(_WORD **)(v153 + 60), v111, 2 * v119, *((unsigned __int8 *)v111 + 69), (uint64_t)v185, v103) < 1)
          {
            LODWORD(v87) = v116;
          }
          else
          {
            unint64_t v87 = (v116 + 1);
            if (v87 > v160)
            {
              UChar v120 = v111[35];
              __int16 v166 = v120
                   + sub_2162B580C(*((unsigned __int8 *)v111 + 68), (*((unsigned char *)v111 + 69) + 2))
                   + 1000;
              *(UChar *)((char *)v185 + *v103) = 0;
              sub_2162D7D88(v186, v185, 0x42uLL);
              sub_2162B57A4(v101, v179[0], a11);
              unint64_t v83 = (v83 + 1);
              uint64_t v112 = v159;
              int v108 = a10;
              if (v102 < v83) {
                return 0;
              }
              goto LABEL_209;
            }
          }
LABEL_208:
          uint64_t v112 = v159;
          int v108 = a10;
          goto LABEL_209;
        }
        int v104 = v162;
LABEL_212:
        ;
      }
      while (v104 > 0);
      uint64_t v100 = v150 + 1;
    }
    while (v150 + 1 != v143);
  }
  __int16 v167 = 29;
  if (*(unsigned __int16 *)(v153 + 82) >= 5u)
  {
    sub_216367B18(*(void *)(v153 + 84) + 128, (unsigned __int8 *)v187, (unsigned __int16)v159, v178, v165);
    if (v165[0])
    {
      int v121 = sub_2162B5684((uint64_t)v178, v165[0], 8u, v170, 7u);
      if (v121)
      {
        int v122 = v121;
        int v123 = 0;
        bytesb = (UInt8 *)v180;
        LODWORD(v124) = v87;
        do
        {
          if (sub_2162B5718(v123, (uint64_t)v178, v165[0], &__dst, &v164, v170) != -11)
          {
            if (v158 != -1)
            {
              uint64_t v125 = v175[6];
              uint64_t v126 = 7 * v175[6];
              uint64_t v127 = v164;
              signed int v128 = v164 - v126 - 8 + (((v164 - v126 - 8) & 0x8000u) >> 15);
              int v129 = v128 >> 1;
              uint64_t v130 = (uint64_t)v128 >> 1;
              size_t v131 = 2 * v129;
              uint64_t v132 = (unsigned __int16 *)&v177[v126 - 1];
              uint64_t v133 = v186;
              while (v130)
              {
                int v134 = *v132++;
                *v133++ = v134;
                v131 -= 2;
                --v130;
                if (!v134)
                {
                  if (v130) {
                    bzero(v133, v131);
                  }
                  break;
                }
              }
              v179[v158] = v127 - 7 * v125 - 8;
            }
            if (v141 != -1)
            {
              if (v175[6] && v175[6] <= 0x49u)
              {
                size_t v135 = 7 * v175[6];
                v179[v141] = v135;
                memmove(*((void **)&v180 + v141), &v176, v135);
              }
              else
              {
                v179[v141] = 0;
              }
            }
            if (v140 != -1) {
              **((_WORD **)&v180 + v14sub_2161A108C(&a9, 0) = bswap32(*(unsigned __int16 *)v175) >> 16;
            }
            if (v139 != -1) {
              **((_DWORD **)&v180 + v139) = bswap32(*(unsigned int *)&v175[2]);
            }
            if (v138 != 255)
            {
              if (v175[6]) {
                __int16 v136 = 7;
              }
              else {
                __int16 v136 = 29;
              }
              __int16 v167 = v136;
            }
            unint64_t v124 = (v124 + 1);
            if (v124 > v160)
            {
              sub_2162B57A4(bytesb, v179[0], a11);
              unint64_t v83 = (v83 + 1);
              if (a9 - 1 < v83) {
                break;
              }
            }
          }
          ++v123;
        }
        while (v123 != v122);
      }
    }
  }
  return 0;
}

uint64_t sub_2162B55B0(unsigned int a1)
{
  uint64_t result = 1;
  if (a1 <= 0x3D)
  {
    if (((1 << a1) & 0x1004010040100401) != 0) {
      return result;
    }
    if (((1 << a1) & 0x2008020080200802) != 0) {
      return 4;
    }
  }
  if (a1 - 70 > 0x15) {
    goto LABEL_7;
  }
  int v3 = 1 << (a1 - 70);
  if ((v3 & 0x100401) != 0) {
    return result;
  }
  if ((v3 & 0x200802) != 0) {
    return 4;
  }
LABEL_7:
  switch(a1)
  {
    case 0xC8u:
    case 0xCAu:
      return result;
    case 0xC9u:
    case 0xCBu:
      return 4;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_2162B5684(uint64_t a1, int a2, unsigned __int16 a3, unsigned char *a4, unsigned __int16 a5)
{
  unint64_t v5 = a3 - (unint64_t)*(unsigned __int8 *)(a1 + a5) + 8 * *(unsigned __int8 *)(a1 + a5);
  *a4 = a3 - *(unsigned char *)(a1 + a5) + 8 * *(unsigned char *)(a1 + a5);
  if (v5 >= a2)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    LODWORD(v6) = 0;
    do
    {
      if (*(unsigned __int8 *)(a1 + v5) == 255 && *(unsigned __int8 *)(v5 + a1 + 1) == 255)
      {
        uint64_t v6 = (int)v6 + 1;
        uint64_t v7 = *(unsigned __int8 *)(a1 + a5 + 2 + v5);
        uint64_t v8 = a3 - v7 + 8 * v7;
        a4[v6] = v8;
        v5 += v8 + 2;
      }
      a4[(int)v6] += 2;
      v5 += 2;
    }
    while ((int)v5 < a2);
  }
  return (v6 + 1);
}

uint64_t sub_2162B5718(int a1, uint64_t a2, int a3, char *__dst, unsigned char *a5, unsigned __int8 *a6)
{
  if (a1 < 1)
  {
    uint64_t v9 = 0;
    int v8 = 0;
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = a1;
    uint64_t v10 = a6;
    uint64_t v11 = a1;
    do
    {
      int v12 = *v10++;
      v8 += v12 + 2;
      --v11;
    }
    while (v11);
  }
  if (v8 >= a3) {
    return 4294967285;
  }
  size_t v13 = a6[v9];
  *a5 = v13;
  memmove(__dst, (const void *)(a2 + v8), v13);
  uint64_t result = 0;
  *(_WORD *)&__dst[*a5] = 0;
  return result;
}

void sub_2162B57A4(UInt8 *bytes, CFIndex numBytes, __CFArray *a3)
{
  CFStringRef v4 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, numBytes, 0x10000100u, 0);
  CFArrayAppendValue(a3, v4);

  CFRelease(v4);
}

uint64_t sub_2162B580C(int a1, unsigned int a2)
{
  switch(a1)
  {
    case 0:
      if (a2 >= 0xB) {
        goto LABEL_17;
      }
      uint64_t v2 = "";
      goto LABEL_16;
    case 1:
      if (a2 >= 0xB) {
        goto LABEL_17;
      }
      uint64_t v2 = (char *)&unk_21638C676;
      goto LABEL_16;
    case 2:
      if (a2 >= 0xB) {
        goto LABEL_17;
      }
      uint64_t v2 = (char *)&unk_21638C68C;
      goto LABEL_16;
    case 3:
      if (a2 > 0xA) {
        goto LABEL_17;
      }
      uint64_t v2 = (char *)&unk_21638C6E4;
      goto LABEL_16;
    case 4:
      if (a2 >= 0xB) {
        goto LABEL_17;
      }
      uint64_t v2 = (char *)&unk_21638C6A2;
      goto LABEL_16;
    case 5:
      if (a2 >= 0xB) {
        goto LABEL_17;
      }
      uint64_t v2 = (char *)&unk_21638C6B8;
      goto LABEL_16;
    case 6:
      if (a2 >= 0xB) {
        goto LABEL_17;
      }
      uint64_t v2 = (char *)&unk_21638C6CE;
LABEL_16:
      __int16 v3 = *(_WORD *)&v2[2 * (char)a2];
      break;
    default:
LABEL_17:
      __int16 v3 = 50;
      break;
  }
  return v3;
}

uint64_t sub_2162B58F4(unsigned __int16 *a1, unsigned __int16 *a2, unint64_t a3, int a4, _WORD *a5, unint64_t *a6)
{
  if (a4 == 2)
  {
    uint64_t v11 = 26;
    uint64_t v12 = 12;
  }
  else
  {
    if (a4 != 6) {
      goto LABEL_9;
    }
    uint64_t v11 = 14;
    uint64_t v12 = 1;
  }
  BOOL v13 = *a2 != a1[v11] && a3 >= 7;
  if (v13)
  {
    uint64_t v16 = 0;
    int v17 = 0;
    while (1)
    {
      int v18 = *(unsigned __int16 *)((char *)a2 + v16);
      if (v18 == a1[11] || v18 == *a1) {
        break;
      }
      v17 += 2;
      uint64_t v16 = v17;
      if (v17 >= a3)
      {
        uint64_t v19 = 0;
        *a5 = 0;
        if (a3 % 6) {
          unint64_t v20 = a3 % 6;
        }
        else {
          unint64_t v20 = 6;
        }
        while (v20 >> 1 != v19)
        {
          int v21 = a2[v19];
          a5[v19++] = v21;
          if (!v21)
          {
            if (v19 != v20 >> 1) {
              bzero(&a5[v19], (v20 & 6) - v19 * 2);
            }
            break;
          }
        }
        *(_WORD *)((char *)a5 + v2sub_2161A108C(&a9, 0) = a1[v12];
        unint64_t v22 = v20 + 2;
        *a6 = v20 + 2;
        uint64_t v23 = (char *)a2 + v20;
        unsigned int v14 = 1;
        while (1)
        {
          v20 += 6;
          if (v20 > a3) {
            break;
          }
          if (v22 - 58 <= 0xFFFFFFFFFFFFFFBFLL) {
            goto LABEL_35;
          }
          uint64_t v24 = 0;
          while (v24 != 6)
          {
            int v25 = *(unsigned __int16 *)&v23[v24];
            *(_WORD *)((char *)a5 + v22 + v24) = v25;
            v24 += 2;
            if (!v25)
            {
              if (v24 != 6) {
                bzero((char *)a5 + v22 + v24, 6 - v24);
              }
              break;
            }
          }
          *a6 = v22 + 6;
          if (v20 == a3)
          {
            v22 += 6;
            break;
          }
          if (v22 - 56 <= 0xFFFFFFFFFFFFFFBFLL)
          {
LABEL_35:
            LOWORD(v14) = 0;
            *a5 = 0;
            *a6 = 0;
            return (__int16)v14;
          }
          *(_WORD *)((char *)a5 + v22 + 6) = a1[v12];
          v22 += 8;
          *a6 = v22;
          v23 += 6;
          BOOL v13 = v14++ >= 0x27;
          if (v13)
          {
            LOWORD(v14) = 40;
            break;
          }
        }
        *(_WORD *)((char *)a5 + v22) = 0;
        return (__int16)v14;
      }
    }
  }
LABEL_9:
  LOWORD(v14) = 0;
  return (__int16)v14;
}

uint64_t sub_2162B5AE8(unsigned __int16 *a1, _WORD *a2, unsigned __int16 *a3, unint64_t a4, int a5, uint64_t a6, void *a7)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  if (a4 < 9) {
    return 0;
  }
  if (a5 == 2)
  {
    uint64_t v12 = 26;
LABEL_6:
    int v13 = a1[v12];
    if (*a3 == v13) {
      return 0;
    }
    uint64_t v16 = 0;
    int v17 = 0;
    do
    {
      int v18 = *(unsigned __int16 *)((char *)a3 + v16);
      if (v18 == a1[11] || v18 == *a1) {
        return -2;
      }
      v17 += 2;
      uint64_t v16 = (char)v17;
    }
    while ((char)v17 < a4);
    uint64_t v62 = v12 * 2;
    *(void *)unsigned __int8 v63 = a6;
    s[0] = 0;
    v64[0] = 0;
    uint64_t v19 = (uint64_t)a3 + a4 - 2;
    unint64_t v20 = 2;
    uint64_t v21 = v19;
    do
    {
      if (v13 != *(unsigned __int16 *)((char *)a3 + a4 - v20))
      {
        unint64_t v22 = 0;
        while (v20 != v22)
        {
          int v23 = *(unsigned __int16 *)(v21 + v22);
          v64[v22 / 2] = v23;
          v22 += 2;
          if (!v23)
          {
            if (v20 != v22) {
              bzero(&v64[v22 / 2], v20 - v22);
            }
            break;
          }
        }
        v64[v20 / 2] = 0;
      }
      v21 -= 2;
      BOOL v24 = v20 >= 7;
      v20 += 2;
    }
    while (!v24);
    if (v64[0])
    {
      int32_t v25 = u_strlen(s);
      uint64_t v26 = u_strlen(v64) + v25;
      if ((unint64_t)(v26 * 2 - 63) < 0xFFFFFFFFFFFFFFBFLL) {
        return -1;
      }
      sub_2162D7E48((uint64_t)v64, s, 0x42uLL);
      v64[v26] = 0;
      sub_2162D7D88(s, v64, 0x42uLL);
      s[v26] = 0;
      v64[0] = 0;
    }
    __int16 v61 = a7;
    if (a4 < 0xA)
    {
      __int16 v14 = 0;
      goto LABEL_71;
    }
    uint64_t v27 = 0;
    int v28 = *(unsigned __int16 *)((char *)a1 + v62);
    unint64_t v29 = 10;
    do
    {
      if (v28 != *(unsigned __int16 *)((char *)a3 + a4 - v29))
      {
        uint64_t v30 = (uint64_t)(v29 - 8) >> 1;
        int v31 = v64;
        uint64_t v32 = v27;
        while (v30)
        {
          int v33 = *(unsigned __int16 *)((char *)a3 + a4 + v32 - 10);
          *v31++ = v33;
          v32 += 2;
          --v30;
          if (!v33)
          {
            if (v30) {
              bzero(v31, 2 - v32);
            }
            break;
          }
        }
        *(_WORD *)((char *)&v63[1] + v29) = a2[33];
        v64[v29 / 2 - 3] = 0;
      }
      if (v29 > 0xE) {
        break;
      }
      v29 += 2;
      v27 -= 2;
    }
    while (v29 <= a4);
    if (v64[0])
    {
      int32_t v34 = u_strlen(s);
      uint64_t v35 = u_strlen(v64) + v34;
      if ((unint64_t)(v35 * 2 - 63) < 0xFFFFFFFFFFFFFFBFLL) {
        return -1;
      }
      sub_2162D7E48((uint64_t)v64, s, 0x42uLL);
      v64[v35] = 0;
      sub_2162D7D88(s, v64, 0x42uLL);
      s[v35] = 0;
      v64[0] = 0;
      __int16 v14 = 1;
    }
    else
    {
      __int16 v14 = 0;
    }
    if (a4 < 0x12) {
      goto LABEL_71;
    }
    uint64_t v36 = 0;
    int v37 = *(unsigned __int16 *)((char *)a1 + v62);
    unint64_t v38 = 18;
    int v60 = v37;
    do
    {
      if (v37 != *(unsigned __int16 *)((char *)a3 + a4 - v38))
      {
        uint64_t v39 = (uint64_t)(v38 - 16) >> 1;
        uint64_t v40 = v64;
        uint64_t v41 = v36;
        while (v39)
        {
          int v42 = *(unsigned __int16 *)((char *)a3 + a4 + v41 - 18);
          *v40++ = v42;
          v41 += 2;
          --v39;
          if (!v42)
          {
            if (v39)
            {
              bzero(v40, 2 - v41);
              int v37 = v60;
            }
            break;
          }
        }
        *(_WORD *)((char *)&v63[-1] + v38) = a2[34];
        v64[v38 / 2 - 7] = 0;
      }
      if (v38 > 0x16) {
        break;
      }
      v38 += 2;
      v36 -= 2;
    }
    while (v38 <= a4);
    if (!v64[0]) {
      goto LABEL_57;
    }
    int32_t v43 = u_strlen(s);
    uint64_t v44 = u_strlen(v64) + v43;
    if ((unint64_t)(v44 * 2 - 63) >= 0xFFFFFFFFFFFFFFBFLL)
    {
      sub_2162D7E48((uint64_t)v64, s, 0x42uLL);
      v64[v44] = 0;
      sub_2162D7D88(s, v64, 0x42uLL);
      s[v44] = 0;
      v64[0] = 0;
      ++v14;
LABEL_57:
      if (a4 >= 0x1A)
      {
        int v45 = *(unsigned __int16 *)((char *)a1 + v62);
        __int16 v46 = (char *)a3 + a4;
        uint64_t v47 = 26;
        char v48 = 26;
        do
        {
          if (v45 != *(unsigned __int16 *)(v19 - v47 + 2))
          {
            int v49 = &v46[-v48];
            int v50 = v48 - 24;
            int v51 = v50 >> 1;
            uint64_t v52 = (uint64_t)v50 >> 1;
            size_t v53 = 2 * v51;
            int v54 = v64;
            while (v52)
            {
              int v55 = *(unsigned __int16 *)v49;
              v49 += 2;
              *v54++ = v55;
              v53 -= 2;
              --v52;
              if (!v55)
              {
                if (v52) {
                  bzero(v54, v53);
                }
                break;
              }
            }
            *(_WORD *)((char *)&v61 + v47 + 4) = a2[35];
            v64[v48 / 2u - 11] = 0;
          }
          v48 += 2;
          uint64_t v47 = v48;
        }
        while (v48 <= a4);
        if (v64[0])
        {
          int32_t v56 = u_strlen(s);
          uint64_t v57 = u_strlen(v64) + v56;
          if ((unint64_t)(v57 * 2 - 63) < 0xFFFFFFFFFFFFFFBFLL) {
            return -1;
          }
          sub_2162D7E48((uint64_t)v64, s, 0x42uLL);
          v64[v57] = 0;
          sub_2162D7D88(s, v64, 0x42uLL);
          s[v57] = 0;
          v64[0] = 0;
          ++v14;
        }
      }
LABEL_71:
      BOOL v58 = *(const UChar **)v63;
      sub_2162D7D88(*(UChar **)v63, s, 0x42uLL);
      int32_t v59 = u_strlen(v58);
      *__int16 v61 = 2 * v59;
      return v14;
    }
    return -1;
  }
  if (a5 == 6)
  {
    uint64_t v12 = 14;
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_2162B602C(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4, void *a5, int a6, int a7, double a8)
{
  *(void *)a1 = &unk_26C6BE7D0;
  int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
  unsigned int v17 = ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 40))(a4) >> 3) & 1;
  sub_2162A7544(a1, (uint64_t *)&off_26C6BCF20);
  *(_DWORD *)(a1 + 2sub_2161A108C(&a9, 0) = v16;
  *(unsigned char *)(a1 + 24) = v17;
  *(double *)(a1 + 32) = a8;
  *(void *)a1 = off_26C6C6108;
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = &off_26C6C6370;
  *(_DWORD *)(a1 + 48) = a6;
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  *(void *)(a1 + 56) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  if (a3) {
    CFStringRef Copy = CFStringCreateCopy(v18, a3);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 64) = Copy;
  sub_216182BF0(a1 + 72, a4, a5, a7);
  *(_WORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  *(_DWORD *)(a1 + 14sub_2161A108C(&a9, 0) = sub_2161E539C(a2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16sub_2161A108C(&a9, 0) = 0;
  *(void *)(a1 + 144) = 0;
  return a1;
}

void sub_2162B61F4(_Unwind_Exception *a1)
{
  sub_2161868BC((const void **)(v1 + 64), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162B623C(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, int a8, int a9)
{
  *(void *)a1 = &unk_26C6BE7D0;
  int v16 = *(unsigned __int16 *)(*(void *)a6 + 6);
  int v17 = (*(unsigned __int8 *)(*(void *)a6 + 4) >> 3) & 1;
  uint64_t v18 = sub_2162A7544(a1, (uint64_t *)&off_26C6BCF20);
  *(_DWORD *)(v18 + 2sub_2161A108C(&a9, 0) = v16;
  *(unsigned char *)(v18 + 24) = v17;
  *(void *)uint64_t v18 = off_26C6C6108;
  *(void *)(v18 + 32) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(v18 + 4sub_2161A108C(&a9, 0) = &off_26C6C6370;
  *(_DWORD *)(v18 + 48) = a8;
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  *(void *)(a1 + 56) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  if (a3) {
    CFStringRef Copy = CFStringCreateCopy(v19, a3);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 64) = Copy;
  sub_216182CB8(a1 + 72, **(_DWORD **)a6, a4, a5, a7, a9);
  *(_WORD *)(a1 + 136) = *(_WORD *)(*(void *)a6 + 4);
  int v21 = sub_2161E539C(a2);
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 14sub_2161A108C(&a9, 0) = v21;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16sub_2161A108C(&a9, 0) = 0;
  if (a9 == 17)
  {
    sub_216322AAC(*(_DWORD *)(*(void *)(*a7 + 240) + 4));
    uint64_t v22 = *(void *)(a6 + 8);
    if (v22)
    {
      int v23 = *(unsigned __int16 **)(a6 + 8);
      while (*v23++)
        ;
      int v25 = *v23;
      __int16 valuePtr = v25;
      if (v25)
      {
        CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
        sub_216195244((const void **)(a1 + 144), v26);
        uint64_t v22 = *(void *)(a6 + 8);
      }
      if (v22)
      {
        uint64_t v27 = (unsigned __int16 *)(v22 + 4);
        do
        {
          int v28 = *(v27 - 2);
          ++v27;
        }
        while (v28);
        unint64_t v29 = *(v27 - 1);
        unint64_t v38 = 0;
        uint64_t v39 = 0;
        long long __p = 0;
        sub_21632308C(&__p, v27, (uint64_t)&v27[4 * v29], v29);
        uint64_t v30 = v38;
        if (__p != v38)
        {
          CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
          uint64_t v32 = (uint64_t *)__p;
          int v33 = (uint64_t *)v38;
          while (v32 != v33)
          {
            uint64_t v42 = *v32;
            CFNumberRef v34 = CFNumberCreate(0, kCFNumberSInt64Type, &v42);
            CFNumberRef v41 = v34;
            CFArrayAppendValue(Mutable, v34);
            if (v34) {
              CFRelease(v34);
            }
            ++v32;
          }
          sub_216195B94((const void **)(a1 + 152), Mutable);
          uint64_t v30 = __p;
        }
        if (v30)
        {
          unint64_t v38 = v30;
          operator delete(v30);
        }
      }
    }
  }
  return a1;
}

void sub_2162B64CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2161868BC(v18, 0);
  sub_216195B94(v17, 0);
  sub_216195244(v16, 0);
  *(void *)(v15 + 72) = &unk_26C6C6550;
  unint64_t v20 = *(std::__shared_weak_count **)(v15 + 128);
  if (v20) {
    sub_2161121B0(v20);
  }
  sub_2161868BC((const void **)(v15 + 64), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162B657C(uint64_t a1)
{
  *(void *)a1 = off_26C6C6108;
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = &off_26C6C6370;
  CFRelease(*(CFTypeRef *)(a1 + 56));
  sub_2161868BC((const void **)(a1 + 160), 0);
  sub_216195B94((const void **)(a1 + 152), 0);
  sub_216195244((const void **)(a1 + 144), 0);
  *(void *)(a1 + 72) = &unk_26C6C6550;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    sub_2161121B0(v2);
  }
  sub_2161868BC((const void **)(a1 + 64), 0);
  return a1;
}

void sub_2162B6648(uint64_t a1)
{
  sub_2162B657C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162B6680(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_2162B6688(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (!result) {
    return *(void *)(a1 + 56);
  }
  return result;
}

uint64_t sub_2162B66A0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 104) >> 2) & 1;
}

uint64_t sub_2162B66AC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 104) >> 1) & 1;
}

uint64_t sub_2162B66B8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) & 1;
}

uint64_t sub_2162B66C4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 104) >> 3) & 1;
}

uint64_t sub_2162B66D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48) >> 7;
}

BOOL sub_2162B66DC(_WORD *a1)
{
  return (*(uint64_t (**)(_WORD *))(*(void *)a1 + 48))(a1) != 1 || (a1[68] & 2) == 0;
}

uint64_t sub_2162B673C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 120) + 208);
}

const void *sub_2162B6748(uint64_t a1)
{
  return sub_2162F6654(*(void *)(a1 + 120));
}

const void *sub_2162B6750(uint64_t a1)
{
  return sub_2162F6598(*(void *)(a1 + 120));
}

uint64_t sub_2162B6758(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 120) + 228);
}

uint64_t sub_2162B6764(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 120) + 224);
}

CFStringRef sub_2162B6770(uint64_t a1)
{
  void v13[3] = *(void **)MEMORY[0x263EF8340];
  uint64_t v1 = sub_216182E10(a1 + 72, v13);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = v3 - v4;
  unint64_t v6 = v5 >> 1;
  if (v5)
  {
    uint64_t v7 = (__int16 *)v13[0];
    if (v6 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v9 = (_WORD *)((char *)v13 - v2);
    do
    {
      __int16 v10 = *v7++;
      *v9++ = v10 + 48;
      --v8;
    }
    while (v8);
  }
  CFStringRef v11 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UniChar *)((char *)v13 - v2), v6);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  return v11;
}

void sub_2162B685C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(void *)(v1 - 4sub_2161A108C(&a9, 0) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_2162B6880(uint64_t a1)
{
  return sub_2162D46D0(a1 + 72);
}

uint64_t sub_2162B6888(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return a1 + 72;
  }
}

void sub_2162B6898()
{
}

void sub_2162B6A2C(_Unwind_Exception *a1)
{
  sub_216195244(v2, 0);
  *(void *)(v1 + 72) = &unk_26C6C6550;
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 128);
  if (v4) {
    sub_2161121B0(v4);
  }
  sub_2161868BC((const void **)(v1 + 64), 0);
  MEMORY[0x2166CA800](v1, 0x10E1C403F77FCFDLL);
  _Unwind_Resume(a1);
}

void sub_2162B6AA8()
{
  *(_DWORD *)operator new(4uLL) = 0;
  operator new();
}

void sub_2162B6CB4(_Unwind_Exception *a1)
{
  sub_216195244((const void **)(v2 + 144), 0);
  *(void *)(v2 + 72) = v3;
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 128);
  if (v5) {
    sub_2161121B0(v5);
  }
  sub_2161868BC((const void **)(v2 + 64), 0);
  MEMORY[0x2166CA800](v2, 0x10E1C403F77FCFDLL);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2162B6D38(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 120) + 232);
}

uint64_t sub_2162B6D44(uint64_t a1)
{
  return *(void *)(a1 + 120) + 152;
}

void sub_2162B6D50()
{
}

void sub_2162B6ECC(_Unwind_Exception *a1)
{
  sub_216195244(v3, 0);
  *(void *)(v1 + 72) = v2;
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 128);
  if (v5) {
    sub_2161121B0(v5);
  }
  sub_2161868BC((const void **)(v1 + 64), 0);
  MEMORY[0x2166CA800](v1, 0x10E1C403F77FCFDLL);
  _Unwind_Resume(a1);
}

void sub_2162B6F2C()
{
}

uint64_t sub_2162B6F48()
{
  return 1;
}

uint64_t sub_2162B6F50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_2162B6F58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 140);
}

uint64_t sub_2162B6F60(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

uint64_t sub_2162B6F68(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

BOOL sub_2162B6F70(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 120) + 228) == 0;
}

uint64_t sub_2162B6F84()
{
  return 1;
}

uint64_t sub_2162B6F8C(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t sub_2162B6F94(uint64_t a1)
{
  return *(void *)(a1 + 120) + 176;
}

void sub_2162B6FA0(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v5 = a2;
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
  if (v8 <= 1)
  {
    __p[1] = 0;
    *(void *)&long long v31 = 0;
    sub_2162C479C(a1, a2, a3, a5);
    return;
  }
  if (a3)
  {
    a5->__r_.__value_.__r.__words[0] = 0;
    a5->__r_.__value_.__l.__size_ = 0;
    a5->__r_.__value_.__r.__wordUChar s[2] = 0;
    std::string::reserve(a5, v8 + 3 * a3);
    uint64_t v10 = *a4;
    if (a4[1] != *a4)
    {
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = v10 + 40 * v11;
        uint64_t v13 = *(unsigned __int16 *)(v12 + 24);
        if (v5) {
          unint64_t v14 = *(unsigned __int16 *)(v12 + 24);
        }
        else {
          unint64_t v14 = 0;
        }
        if (!v5 || !v14) {
          goto LABEL_30;
        }
        int v15 = *v5;
        unsigned int v16 = v15 - 48;
        unsigned int v17 = (unsigned __int16)(v15 + 240);
        if (v16 >= 0xA && v17 >= 0xA) {
          break;
        }
LABEL_15:
        (*(void (**)(void **__return_ptr, uint64_t, unsigned __int16 *))(*(void *)a1 + 48))(__p, a1, v5);
        if ((SBYTE7(v31) & 0x80u) == 0) {
          CFAllocatorRef v19 = __p;
        }
        else {
          CFAllocatorRef v19 = (void **)__p[0];
        }
        if ((SBYTE7(v31) & 0x80u) == 0) {
          std::string::size_type v20 = BYTE7(v31);
        }
        else {
          std::string::size_type v20 = (std::string::size_type)__p[1];
        }
        std::string::append(a5, (const std::string::value_type *)v19, v20);
        if ((SBYTE7(v31) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        int v21 = __p[0];
LABEL_38:
        operator delete(v21);
LABEL_39:
        uint64_t v10 = *a4;
        unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
        if (v11 != v29 - 1)
        {
          std::string::append(a5, " ", 1uLL);
          uint64_t v10 = *a4;
          unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
        }
        v5 += v13;
        if (++v11 >= v29) {
          return;
        }
      }
      unint64_t v22 = 0;
      while (v14 - 1 != v22)
      {
        int v23 = v5[v22 + 1];
        unsigned int v24 = v23 - 48;
        ++v22;
        unsigned int v25 = (unsigned __int16)(v23 + 240);
        if (v24 < 0xA || v25 <= 9)
        {
          if (v22 < v14) {
            goto LABEL_15;
          }
          break;
        }
      }
LABEL_30:
      uint64_t v32 = 0;
      *(_OWORD *)long long __p = 0u;
      long long v31 = 0u;
      (*(void (**)(void **__return_ptr, uint64_t, unsigned __int16 *, unint64_t, void **, void))(*(void *)a1 + 40))(v33, a1, v5, v14, __p, 0);
      if ((v34 & 0x80u) == 0) {
        uint64_t v27 = v33;
      }
      else {
        uint64_t v27 = (void **)v33[0];
      }
      if ((v34 & 0x80u) == 0) {
        std::string::size_type v28 = v34;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v33[1];
      }
      std::string::append(a5, (const std::string::value_type *)v27, v28);
      if (((char)v34 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      int v21 = v33[0];
      goto LABEL_38;
    }
  }
  else
  {
    sub_21610B834(a5, "");
  }
}

void sub_2162B7258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162B72C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  int v5 = *(char *)(a2 + 55);
  if (v5 >= 0) {
    uint64_t v6 = a2 + 32;
  }
  else {
    uint64_t v6 = *(void *)(a2 + 32);
  }
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)(a2 + 40);
  }
  uint64_t v8 = sub_2162B73AC(v4, v6, v7);
  uint64_t v10 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 32);

  return v12(a1, v8, v10, v11, 0);
}

uint64_t sub_2162B73AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v5);
}

void sub_2162B7404(void *a1)
{
  sub_2161C9988(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2162B743C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, uint64_t a9)
{
  int v15 = sub_2161E2834(a2);
  sub_2163284B4(a1, v15, a3, a4, a6, a9, a7, a8);
}

void sub_2162B7D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void **a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t *a15)
{
  MEMORY[0x2166CA800](v17, 0x10E1C408BBE15C0);
  uint64_t v20 = *(void *)(v15 + 600);
  *(void *)(v15 + 60sub_2161A108C(&a9, 0) = 0;
  if (v20) {
    MEMORY[0x2166CA800](v20, 0x30C406EBB3485);
  }
  uint64_t v21 = *v18;
  uint64_t *v18 = 0;
  if (v21) {
    sub_2161A9598((uint64_t)v18, v21);
  }
  uint64_t v22 = (uint64_t *)(v15 + 504);
  int v23 = *(void **)(v15 + 528);
  if (v23)
  {
    *(void *)(v15 + 536) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *v22;
  uint64_t *v22 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  sub_216195B5C((const void **)(v15 + 488), 0);
  uint64_t v25 = *(void *)(v15 + 480);
  *(void *)(v15 + 48sub_2161A108C(&a9, 0) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(v15 + 472);
  *(void *)(v15 + 472) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(void *)(v15 + 464);
  *(void *)(v15 + 464) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(v15 + 456);
  *(void *)(v15 + 456) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  sub_2161BEE34(a10);
  sub_216195B94((const void **)(v15 + 408), 0);
  uint64_t v29 = *(void *)(v15 + 392);
  *(void *)(v15 + 392) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
  }
  uint64_t v30 = *a14;
  *a14 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
  }
  uint64_t v31 = *(void *)(v15 + 376);
  *(void *)(v15 + 376) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  sub_216345918(a11);
  sub_216195B94((const void **)(v15 + 336), 0);
  sub_2161FCAD0(a12);
  sub_2162BE3FC(a15, 0);
  sub_2162DE704(v16);
  sub_21632929C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2162B80F8(uint64_t a1, void *a2, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v5 + 201) & 0x40) != 0
    || (uint64_t v6 = *(void *)(v5 + 384), v8 = *(void *)(v6 + 16), v7 = *(void *)(v6 + 24), v8 != v7)
    && (*(unsigned int (**)(void))(**(void **)(v7 - 8) + 24))(*(void *)(v7 - 8)))
  {
    return sub_2162532D0(a2, a3, 0);
  }
  else
  {
    CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(a2, (const char *)a2, (uint64_t)a3);
    if (CFStringGetLength(Surface) == 2
      && (uint64_t v13 = sub_2161F3B4C(a2, v11, v12),
          ((*(uint64_t (**)(void *))(*(void *)v13 + 104))(v13) & 0x20) != 0)
      && (uint64_t v16 = sub_2161F3B4C(a3, v14, v15), (*(int (**)(void *))(*(void *)v13 + 112))(v13) >= 1))
    {
      int v17 = 100 * (*(uint64_t (**)(void *))(*(void *)v16 + 112))(v16);
      if (v17 / (*(int (**)(void *))(*(void *)v13 + 112))(v13) < 81) {
        return 1;
      }
      else {
        return -1;
      }
    }
    else
    {
      return -1;
    }
  }
}

void sub_2162B8280(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  if (a2 && theDict)
  {
    CFStringRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F51278]);
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFBooleanGetTypeID() && Value == (const void *)*MEMORY[0x263EFFB40])
    {
      uint64_t v9 = *(void (**)(uint64_t))(*(void *)a2 + 136);
      v9(a2);
    }
  }
}

uint64_t sub_2162B8330(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 512);
  if (v3 == cf) {
    return 0;
  }
  if (cf && v3)
  {
    if (CFEqual(v3, cf)) {
      return 0;
    }
    CFTypeRef v3 = *(CFTypeRef *)(a1 + 512);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (cf) {
    CFTypeRef v6 = CFRetain(cf);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *(void *)(a1 + 512) = v6;
  sub_2162B9EA8(a1, 1, 1, 0);
  uint64_t v7 = *(void *)(a1 + 384) + 80;

  return sub_21631260C(v7, (CFArrayRef)cf);
}

uint64_t sub_2162B83D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 448);
  if (v4)
  {
    int v23 = *(void ***)(a1 + 448);
    sub_216194FC0(&v23);
    MEMORY[0x2166CA800](v4, 0x1020C40DBF2485DLL);
  }
  uint64_t v5 = *(void *)(a1 + 496);
  if (v5)
  {
    uint64_t v6 = sub_216180EF0(v5);
    MEMORY[0x2166CA800](v6, 0x1060C401A2F9FBALL);
  }
  uint64_t v7 = *(const char **)(a1 + 416);
  if (v7)
  {
    sub_2162F0F0C(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)v7);
    uint64_t v8 = *(void *)(a1 + 416);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t v9 = *(const void **)(a1 + 512);
  if (v9) {
    CFRelease(v9);
  }
  sub_2161A92A0(*(void *)(a1 + 584), v7, a3);
  uint64_t v10 = (uint64_t *)(a1 + 584);
  uint64_t v11 = *(void *)(a1 + 600);
  *(void *)(a1 + 60sub_2161A108C(&a9, 0) = 0;
  if (v11) {
    MEMORY[0x2166CA800](v11, 0x30C406EBB3485);
  }
  uint64_t v12 = *v10;
  *uint64_t v10 = 0;
  if (v12) {
    sub_2161A9598(a1 + 584, v12);
  }
  uint64_t v13 = *(void **)(a1 + 528);
  if (v13)
  {
    *(void *)(a1 + 536) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void *)(a1 + 504);
  *(void *)(a1 + 504) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  sub_216195B5C((const void **)(a1 + 488), 0);
  uint64_t v15 = *(void *)(a1 + 480);
  *(void *)(a1 + 48sub_2161A108C(&a9, 0) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 472);
  *(void *)(a1 + 472) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 464);
  *(void *)(a1 + 464) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  sub_2161BEE34(a1 + 424);
  sub_216195B94((const void **)(a1 + 408), 0);
  uint64_t v19 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
  }
  uint64_t v20 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  sub_216345918((const void **)(a1 + 344));
  sub_216195B94((const void **)(a1 + 336), 0);
  sub_2161FCAD0(a1 + 296);
  sub_2162BE3FC((uint64_t *)(a1 + 280), 0);
  sub_2162DE704(a1 + 176);
  return sub_21632929C(a1);
}

void sub_2162B86C4()
{
}

void sub_2162B8738(_Unwind_Exception *a1, int a2)
{
  MEMORY[0x2166CA800](v2, 0x10E0C4045A473D3);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2162B8720);
  }
  _Unwind_Resume(a1);
}

void sub_2162B8784()
{
}

void sub_2162B88B0()
{
}

void sub_2162B891C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40A1F7DA0CLL);
  _Unwind_Resume(a1);
}

BOOL sub_2162B8940(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  CFArrayRef v7 = sub_21628FFC4(a2, a4);
  BOOL v8 = sub_2162B89D0(a1, v7, a3, a4);
  if (v7) {
    CFRelease(v7);
  }
  return v8;
}

void sub_2162B89B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216195B94((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_2162B89D0(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  os_signpost_id_t ptr = 0;
  BOOL v8 = sub_2162D1CE4(0xDu);
  os_signpost_id_t ptr = os_signpost_id_make_with_pointer(v8, &ptr);
  uint64_t v9 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v10 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v11 = v9;
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v10, "MecabraAnalyzeStringWithContext", (const char *)&unk_2163CBB73, buf, 2u);
    }
  }
  if (*(_DWORD *)(a1 + 176) == 13) {
    int v12 = a3 | 0x10;
  }
  else {
    int v12 = a3;
  }
  unsigned int v44 = v12;
  if (a4) {
    sub_216192194(a4, kMecabraContextOptionPrivateMode);
  }
  LMLanguageModelSetParameterValue();
  *(void *)(a1 + 56sub_2161A108C(&a9, 0) = -1;
  if (a4 && *(_DWORD *)(*(void *)(a1 + 592) + 4) <= 7u) {
    sub_21628F494(a4);
  }
  if (!a2)
  {
    CFIndex Count = 0;
    goto LABEL_30;
  }
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
LABEL_30:
    unint64_t v14 = 0;
    char v15 = 0;
    BOOL v17 = 0;
    goto LABEL_31;
  }
  unint64_t v14 = 0;
  char v15 = 0;
  float v16 = 0.0;
  BOOL v17 = 1;
  do
  {
    uint64_t v18 = *((void *)CFArrayGetValueAtIndex(a2, v14) + 3);
    if (v14
      || (*(_WORD *)(a1 + 274) = 0, (**(unsigned int (***)(uint64_t))v18)(v18) == 2)
      || (**(unsigned int (***)(uint64_t))v18)(v18) == 3
      || !*(unsigned char *)(*(void *)(a1 + 280) + 250)
      || (*(unsigned int (**)(uint64_t))(*(void *)v18 + 8))(v18) != 64
      && (*(unsigned int (**)(uint64_t))(*(void *)v18 + 8))(v18) != 35)
    {
      int v19 = (**(uint64_t (***)(uint64_t))v18)(v18);
      float v20 = 0.1;
      if (v19 != 2)
      {
        if ((**(unsigned int (***)(uint64_t, float))v18)(v18, 0.1) == 3) {
          float v20 = 0.1;
        }
        else {
          float v20 = 1.0;
        }
      }
      float v16 = v16 + v20;
      if (v16 > 255.0) {
        goto LABEL_31;
      }
    }
    else
    {
      *(_WORD *)(a1 + 274) = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
      char v15 = 1;
    }
    BOOL v17 = (uint64_t)++v14 < Count;
  }
  while (Count != v14);
  unint64_t v14 = Count;
LABEL_31:
  if ((v15 & 1) != 0 || v14 != Count)
  {
    CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    unint64_t v23 = v15 & 1;
    if (v14 > v23)
    {
      do
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v23);
        CFArrayAppendValue(Mutable, ValueAtIndex);
        ++v23;
      }
      while (v14 != v23);
    }
    int v45 = Mutable;
    if (Mutable)
    {
      CFIndex v25 = 0;
      do
      {
        CFIndex v26 = CFArrayGetCount(a2);
        BOOL v21 = v25 < v26;
        if (v25 >= v26) {
          break;
        }
        uint64_t v27 = (unsigned int (***)(void))*((void *)CFArrayGetValueAtIndex(a2, v25) + 3);
        if ((**v27)(v27) == 2) {
          break;
        }
        ++v25;
      }
      while ((**v27)(v27) != 3);
      a2 = Mutable;
    }
    else
    {
      BOOL v21 = 0;
    }
  }
  else
  {
    BOOL v17 = 0;
    BOOL v21 = 0;
    int v45 = 0;
  }
  CFMutableStringRef v28 = CFStringCreateMutable(0, 0);
  if (a2)
  {
    CFIndex v29 = CFArrayGetCount(a2);
    if (v29 >= 1)
    {
      CFIndex v30 = 0;
      BOOL v31 = 1;
      while (1)
      {
        uint64_t v32 = *((void *)CFArrayGetValueAtIndex(a2, v30) + 3);
        if ((**(unsigned int (***)(uint64_t))v32)(v32) == 2
          || (**(unsigned int (***)(uint64_t))v32)(v32) == 3)
        {
          break;
        }
        *(_WORD *)long long buf = 0;
        *(_WORD *)long long buf = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 8))(v32);
        CFStringAppendCharacters(v28, (const UniChar *)buf, 1);
        BOOL v31 = ++v30 < v29;
        if (v29 == v30) {
          goto LABEL_53;
        }
      }
      *(unsigned char *)(a1 + 552) = 1;
      goto LABEL_54;
    }
  }
  else
  {
    CFIndex v29 = 0;
  }
  BOOL v31 = 0;
LABEL_53:
  *(unsigned char *)(a1 + 552) = 0;
  if (!v21)
  {
    if (v17) {
      goto LABEL_72;
    }
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_26797E3F8, memory_order_acquire) != -1)
    {
      *(void *)long long buf = &v47;
      char v48 = buf;
      std::__call_once(&qword_26797E3F8, &v48, (void (__cdecl *)(void *))sub_2162BE1B8);
    }
    CFIndex Length = CFStringGetLength(v28);
    v54.locatiouint64_t n = 0;
    v54.CFIndex length = Length;
    if (!CFStringFindCharacterFromSet(v28, (CFCharacterSetRef)qword_26797E3E8, v54, 0, 0)
      || (v55.locatiouint64_t n = 0,
          v55.CFIndex length = Length,
          CFStringFindCharacterFromSet(v28, (CFCharacterSetRef)qword_26797E3F0, v55, 0, 0))
      || (locatiouint64_t n = CFStringFind(v28, @".", 0).location, location != -1) && location != Length - 1)
    {
LABEL_72:
      sub_2162B9EA8(a1, 1, 1, 0);
LABEL_73:
      BOOL v38 = 0;
      goto LABEL_78;
    }
  }
LABEL_54:
  uint64_t v33 = *(void *)(a1 + 416);
  if (v33)
  {
    (*(void (**)(uint64_t))(*(void *)v33 + 32))(v33);
    uint64_t v34 = *(void *)(a1 + 416);
    *(unsigned char *)(v34 + 96) = (v44 & 0x80) == 0;
    sub_2162978A0(v34, 1);
    if (!*(unsigned char *)(a1 + 368)) {
      *(void *)(a1 + 232) = *(void *)(*(void *)(a1 + 280) + 328);
    }
  }
  if (v29 != 1
    || v31
    || (uint64_t v35 = (void **)CFArrayGetValueAtIndex(a2, 0),
        int v36 = (*(uint64_t (**)(void *))(*v35[3] + 8))(v35[3]),
        v36 != CFStringGetCharacterAtIndex(kMecabraAnalysisStringForFacemark[0], 0)))
  {
    if (a4) {
      uint64_t v39 = *(const void **)(a4 + 48);
    }
    else {
      uint64_t v39 = 0;
    }
    sub_2162E6408(*(void *)(a1 + 384), v44, *(unsigned __int8 *)(a1 + 368), (id *)a4);
    uint64_t v42 = *(void *)(a1 + 384);
    if ((*(unsigned char *)(*(void *)(v42 + 8) + 25) & 0x40) == 0) {
      sub_216273624((const void **)(v42 + 56), v39, v28);
    }
    sub_21621BCE0();
  }
  sub_2162B9EA8(a1, 1, 1, 0);
  if (a4 && sub_216192194(a4, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x263EFFB40]) {
    goto LABEL_73;
  }
  uint64_t v37 = *(void *)(a1 + 416);
  BOOL v38 = v37 != 0;
  if (v37)
  {
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v50 = 0x40000000;
    int v51 = sub_2162BE0E4;
    uint64_t v52 = &unk_26426E520;
    uint64_t v53 = a1;
    sub_21632D828(*(void *)(v37 + 152), (uint64_t)buf);
    sub_216194E34(*(void *)(a1 + 448));
  }
LABEL_78:
  if (v28) {
    CFRelease(v28);
  }
  if (v45) {
    CFRelease(v45);
  }
  return v38;
}

void sub_2162B9DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  BOOL v8 = va_arg(va1, const void *);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_2161B5B5C((const void **)va, 0);
  sub_2161BE0C8((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_2162B9EA8(uint64_t a1, int a2, int a3, CFIndex a4)
{
  if (a4)
  {
    CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
    v20.locatiouint64_t n = 0;
    v20.CFIndex length = a4;
    CFArrayAppendArray(Mutable, *(CFArrayRef *)(a1 + 408), v20);
    sub_216195B94((const void **)(a1 + 408), Mutable);
    sub_21628CD70(*(uint64_t **)(a1 + 224));
    sub_2162EB46C(*(void *)(a1 + 384), 2);
    if (*(void *)(a1 + 400))
    {
      uint64_t v9 = *(void *)(a1 + 392);
      if (v9) {
        sub_2162EB46C(v9, 2);
      }
    }
    if (!a3) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v11 = *(void *)(a1 + 504);
    if (v11)
    {
      *(void *)(a1 + 504) = 0;
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    *(void *)(a1 + 24sub_2161A108C(&a9, 0) = 0;
    goto LABEL_13;
  }
  sub_216195B94((const void **)(a1 + 408), 0);
  *(void *)(a1 + 40sub_2161A108C(&a9, 0) = 0;
  sub_21628CD70(*(uint64_t **)(a1 + 224));
  sub_2162E62DC(*(void *)(a1 + 384));
  uint64_t v10 = *(void *)(a1 + 392);
  if (v10) {
    sub_2162E62DC(v10);
  }
  *(void *)(a1 + 576) = 0;
  if (a3) {
    goto LABEL_10;
  }
LABEL_13:
  *(unsigned char *)(a1 + 52sub_2161A108C(&a9, 0) = 0;
  sub_216329374((void *)a1, 0);
  uint64_t v12 = *(void *)(a1 + 416);
  if (v12 && a2)
  {
    uint64_t v13 = *(void **)(v12 + 136);
    uint64_t v14 = v13[38];
    if (v14) {
      *(void *)(v14 + 24) = *(void *)(v14 + 16);
    }
    uint64_t v15 = v13[39];
    if (v15) {
      *(void *)(v15 + 24) = *(void *)(v15 + 16);
    }
    uint64_t v16 = v13[40];
    if (v16) {
      *(void *)(v16 + 24) = *(void *)(v16 + 16);
    }
  }
  BOOL v17 = *(uint64_t ***)(a1 + 448);
  for (uint64_t i = *v17; i != v17[1]; ++i)
  {
    uint64_t v19 = *i;
    (*(void (**)(uint64_t))(*(void *)v19 + 32))(v19);
  }
  sub_2161BEE74(a1 + 424);
  *(void *)(a1 + 56sub_2161A108C(&a9, 0) = -1;
}

BOOL sub_2162BA05C(CFArrayRef theArray, CFIndex a2)
{
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  BOOL result = 0;
  if (Count > a2 && Count - a2 != 1)
  {
    CFIndex v6 = Count - 1;
    do
    {
      CFStringRef ValueAtIndex = (uint64_t (****)(void))CFArrayGetValueAtIndex(theArray, a2);
      int v8 = (**ValueAtIndex[3])(ValueAtIndex[3]);
      BOOL v9 = v8 == 2;
      BOOL result = v8 != 2;
      BOOL v9 = !v9 || v6 == a2++;
    }
    while (!v9);
  }
  return result;
}

CFIndex sub_2162BA100(uint64_t a1, CFArrayRef theArray, unsigned int a3, id *a4, unint64_t a5)
{
  if (!*(void *)(a1 + 392)) {
    operator new();
  }
  if (!*(unsigned char *)(a1 + 272))
  {
    CFIndex result = *(void *)(a1 + 392);
    *(void *)(a1 + 392) = 0;
    if (result)
    {
      BOOL v17 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v17();
    }
    return result;
  }
  if (!a5 || !*(void *)(a1 + 400))
  {
    CFIndex v11 = 0;
LABEL_21:
    *(void *)(a1 + 576) = 0;
    *(unsigned char *)(a1 + 568) = 1;
    sub_2162E6408(*(void *)(a1 + 392), a3, *(unsigned __int8 *)(a1 + 368), a4);
    if (v11 < a5)
    {
      uint64_t v18 = *(void *)(a1 + 392);
      if (v11) {
        sub_2162EB46C(v18, 1);
      }
      else {
        sub_2162E62DC(v18);
      }
    }
    CFIndex Count = CFArrayGetCount(theArray);
    sub_21628CD70(*(uint64_t **)(a1 + 224));
    if (v11 >= Count)
    {
LABEL_34:
      if (*(_DWORD *)(a1 + 208) != 1)
      {
        *(unsigned char *)(a1 + 52sub_2161A108C(&a9, 0) = 1;
        (*(void (**)(void))(**(void **)(a1 + 464) + 56))(*(void *)(a1 + 464));
        CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 488));
        uint64_t v26 = *(void *)(a1 + 392);
        if (CFArrayGetCount(*(CFArrayRef *)(v26 + 1160)))
        {
          unint64_t v27 = 0;
          do
          {
            uint64_t v28 = *(void *)(a1 + 464);
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v26 + 1160), v27);
            (*(void (**)(uint64_t, const void *))(*(void *)v28 + 16))(v28, ValueAtIndex);
            ++v27;
          }
          while (v27 < CFArrayGetCount(*(CFArrayRef *)(v26 + 1160)));
        }
        sub_2162BD2E8(a1);
        uint64_t v30 = *(void *)(a1 + 464);
        BOOL v31 = sub_216253138(*(void *)(a1 + 600));
        (*(void (**)(uint64_t, uint64_t (*)(void *, char *, uint64_t), uint64_t))(*(void *)v30 + 32))(v30, v31, 1);
        if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 464) + 8)))
        {
          uint64_t v32 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 464) + 8), 0);
          sub_216294B28(*(CFArrayRef **)(a1 + 456), v32, 1uLL);
          if ((unint64_t)CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 464) + 8)) >= 2)
          {
            uint64_t v33 = *(CFArrayRef **)(a1 + 456);
            uint64_t v34 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 464) + 8), 1);
            sub_216294B28(v33, v34, 2uLL);
          }
        }
        sub_216294768(*(void *)(a1 + 456));
      }
      CFIndex result = CFArrayGetCount(theArray);
      *(void *)(a1 + 40sub_2161A108C(&a9, 0) = result;
    }
    else
    {
      while (1)
      {
        CFRange v20 = (unsigned int (***)(void))*((void *)CFArrayGetValueAtIndex(theArray, v11) + 3);
        BOOL v21 = v11 >= Count - 1
            ? 0
            : (unsigned int (***)(void))*((void *)CFArrayGetValueAtIndex(theArray, v11 + 1) + 3);
        uint64_t v22 = *(void *)(a1 + 392);
        *(unsigned char *)(v22 + 41) = sub_2162BA05C(theArray, v11);
        uint64_t v23 = *(void *)(a1 + 392);
        if (v21)
        {
          unsigned int v24 = (**v20)(v20);
          BOOL v25 = v24 != (**v21)(v21);
        }
        else
        {
          BOOL v25 = 1;
        }
        CFIndex result = sub_2162E52A0(v23, v20, v25);
        ++v11;
        if (!result) {
          break;
        }
        if (Count == v11) {
          goto LABEL_34;
        }
      }
      *(void *)(a1 + 576) = v11;
    }
    *(unsigned char *)(a1 + 568) = 0;
    return result;
  }
  CFIndex result = CFArrayGetCount(theArray);
  CFIndex v11 = a5;
  if (result != a5)
  {
    uint64_t v12 = (uint64_t (****)(void))CFArrayGetValueAtIndex(theArray, a5);
    CFIndex result = (**v12[3])(v12[3]);
    CFIndex v11 = a5;
    if (result == 1)
    {
      uint64_t v13 = (uint64_t (****)(void))CFArrayGetValueAtIndex(theArray, a5 - 1);
      CFIndex result = (**v13[3])(v13[3]);
      CFIndex v11 = a5;
      if (result == 1)
      {
        uint64_t v14 = 1;
        CFIndex v15 = a5 - 2;
        if ((uint64_t)(a5 - 2) >= 0)
        {
          while (1)
          {
            uint64_t v16 = (uint64_t (****)(void))CFArrayGetValueAtIndex(theArray, v15);
            CFIndex result = (**v16[3])(v16[3]);
            if (result != 1) {
              break;
            }
            ++v14;
            if (--v15 == -1)
            {
              uint64_t v14 = a5;
              break;
            }
          }
        }
        CFIndex v11 = a5 - v14;
      }
    }
  }
  if (*(void *)(a1 + 576) - 1 >= (unint64_t)v11) {
    goto LABEL_21;
  }
  return result;
}

void sub_2162BA5E4(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40214F1003);
  _Unwind_Resume(a1);
}

__CFArray *sub_2162BA608(uint64_t a1, const __CFArray *a2, __int16 a3, uint64_t a4)
{
  if ((a3 & 0xA020) != 0) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a4 + 32));
  if (!*(unsigned char *)(a1 + 552) || Count == 0) {
    return 0;
  }
  BOOL v9 = (void *)sub_21628F1BC(a4, Count - 1);
  uint64_t v12 = (const void *)[v9 v10:v11];
  if (!v12) {
    return 0;
  }
  uint64_t v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BB158, 0);
  if (!a2) {
    return 0;
  }
  uint64_t v14 = (uint64_t)v13;
  if (!v13) {
    return 0;
  }
  if (!*(void *)(a1 + 408)) {
    return 0;
  }
  if (!CFArrayGetCount(a2)) {
    return 0;
  }
  CFIndex v15 = CFArrayGetCount(a2);
  if (v15 != CFArrayGetCount(*(CFArrayRef *)(a1 + 408))) {
    return 0;
  }
  CFIndex v16 = sub_2162BA73C(a2, *(const __CFArray **)(a1 + 408));
  if (v16 != CFArrayGetCount(a2)) {
    return 0;
  }
  uint64_t v17 = *(void *)(a1 + 384);

  return sub_2162E5B6C(v17, a2, v14);
}

CFIndex sub_2162BA73C(const __CFArray *a1, const __CFArray *a2)
{
  if (!a2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v5 = CFArrayGetCount(a2);
  if (v5 >= Count) {
    uint64_t v6 = Count;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v6 < 1)
  {
    CFIndex v7 = 0;
  }
  else
  {
    CFIndex v7 = 0;
    while (1)
    {
      uint64_t v8 = *((void *)CFArrayGetValueAtIndex(a1, v7) + 3);
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v7);
      if (((*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 16))(v8, ValueAtIndex[3]) & 1) == 0) {
        break;
      }
      if (v6 == ++v7)
      {
        CFIndex v7 = v6;
        break;
      }
    }
  }
  if (v6 >= v7) {
    return v7;
  }
  else {
    return v6;
  }
}

void *sub_2162BA80C(uint64_t a1)
{
  uint64_t v2 = sub_216194E98(*(void **)(a1 + 448), 0);
  CFIndex v5 = v2;
  if (v2
    && objc_msgSend_rawCandidate(v2, v3, v4)
    && (unint64_t)(*(void *)(objc_msgSend_rawCandidate(v5, v6, v7) + 8) + 1) > *(void *)(a1 + 560))
  {
    return 0;
  }
  return v5;
}

uint64_t sub_2162BA870(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 240);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      LOBYTE(v6) = sub_216192194(v7, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x263EFFB40];
    }
    else {
      LOBYTE(v6) = 0;
    }
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(a1 + 416);
  if (v9 && (v6 & 1) == 0)
  {
    if (a2)
    {
      uint64_t v10 = [a2 a2:a3];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 96))(v10) == 89)
      {
        uint64_t v8 = 0;
        goto LABEL_12;
      }
      uint64_t v9 = *(void *)(a1 + 416);
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v9 + 56))(v9, a2, a3, 1);
  }
LABEL_12:
  if (!a2 || (a3 & 1) == 0)
  {
    sub_2162B9EA8(a1, 0, 1, 0);
    sub_2161BF338(a1 + 424);
  }
  return v8;
}

uint64_t sub_2162BA98C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 416)
    || sub_216192194(a2, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x263EFFB40]
    || sub_216290218(a2))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 416) + 48))(*(void *)(a1 + 416), a2);
  }
  sub_2162B9EA8(a1, 0, 1, 0);
  sub_2161BF338(a1 + 424);
  sub_2162BAA5C(a1, a2);
  return v4;
}

const void *sub_2162BAA5C(uint64_t a1, uint64_t a2)
{
  CFIndex result = sub_216192194(a2, kMecabraContextOptionPrivateMode);
  if (result != (const void *)*MEMORY[0x263EFFB40])
  {
    CFIndex result = (const void *)sub_216290218(a2);
    if ((result & 1) == 0)
    {
      uint64_t v5 = *(void *)(a1 + 416);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 96)) {
          sub_21621BE30();
        }
      }
    }
  }
  return result;
}

void sub_2162BAB84(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2162BABC4(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_216192194(a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x263EFFB40])
  {
    if (a3)
    {
      uint64_t v7 = [a3 v5:v6];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 96))(v7) == 89) {
        return 0;
      }
      if (*(_DWORD *)(*(void *)(a1 + 592) + 4) <= 7u && MecabraCandidateGetSurface(a3, v8, v9))
      {
        uint64_t v12 = *(void *)(a1 + 592);
        CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(a3, v10, v11);
        sub_2161E3AE8(Surface, __p);
        if (v24 >= 0) {
          CFRange v20 = __p;
        }
        else {
          LOBYTE(v2sub_2161A108C(&a9, 0) = __p[0];
        }
        sub_21627707C(v12, "Revert learning for candidate %s\n", v14, v15, v16, v17, v18, v19, (char)v20);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    uint64_t v21 = *(void *)(a1 + 416);
    if (v21) {
      sub_216298230(v21);
    }
    sub_21621BFD0();
  }
  return 0;
}

void sub_2162BAD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162BADC0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a3 == 1)
  {
    BOOL v6 = **(_DWORD **)a2 == 1;
    if (!a4) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v6 = 0;
    if (!a4)
    {
LABEL_3:
      if (v6) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = a3;
      }
      if ((v7 & 0x8000000000000000) == 0)
      {
        uint64_t v8 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
        if (*(uint64_t *)(*(void *)(*(void *)(result + 8) + 32) + 32) >= 2 && v7 < v8)
        {
          uint64_t v10 = 4 * v7;
          do
          {
            if (a5) {
              CFIndex result = LMLanguageModelDecrementUsageCount();
            }
            else {
              CFIndex result = LMLanguageModelIncrementUsageCount();
            }
            ++v7;
            v10 += 4;
          }
          while (v8 != v7);
        }
      }
      return result;
    }
  }
  if (((a5 | v6) & 1) == 0)
  {
    return LMLanguageModelIncrementUsageCount();
  }
  return result;
}

void sub_2162BAEE0(uint64_t a1, uint64_t a2, const __CFString *a3, double a4)
{
  sub_2162B9EA8(a1, 1, 1, 0);
  uint64_t v8 = *(void *)(a1 + 240);
  if (!v8
    || (uint64_t v9 = *(void *)(v8 + 8)) == 0
    || sub_216192194(v9, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x263EFFB40]
    && ((uint64_t v10 = *(void *)(v8 + 8)) == 0 || !sub_216290218(v10)))
  {
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x2000000000;
    *(double *)&v12[3] = a4;
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 0x40000000;
    v11[2] = sub_2162BB00C;
    void v11[3] = &unk_26426E490;
    void v11[5] = a1;
    v11[6] = a2;
    v11[4] = v12;
    sub_216351264((CFStringTokenizerRef *)(a1 + 344), a3, (uint64_t)v11);
    _Block_object_dispose(v12, 8);
  }
}

void sub_2162BAFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2162BB00C()
{
}

void sub_2162BB278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void *sub_2162BB318(void *result)
{
  uint64_t v1 = result[23];
  if (*(unsigned char *)(v1 + 104))
  {
    uint64_t v2 = result;
    sub_2162B9EA8((uint64_t)result, 1, 1, 0);
    if (*(unsigned char *)(v1 + 4))
    {
      uint64_t v3 = v2[52];
      if (v3) {
        sub_2162F0F0C(*(void *)(v2[1] + 32), v3);
      }
      sub_2163295A0((uint64_t)v2);
      CFIndex result = sub_216329454(v2);
      uint64_t v4 = v2[52];
      if (v4)
      {
        uint64_t v5 = *(void *)(v2[1] + 32);
        return sub_2162F0EAC(v5, v4, (uint64_t)sub_2162B8280);
      }
    }
    else
    {
      sub_2163295A0((uint64_t)v2);
      return sub_216329454(v2);
    }
  }
  return result;
}

__CFDictionary *sub_2162BB3E4(uint64_t a1, int a2)
{
  if (a2 != 3) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 416);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (const void *)v3;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  BOOL v6 = Mutable;
  if (Mutable) {
    CFDictionarySetValue(Mutable, @"surface", v4);
  }
  return v6;
}

uint64_t sub_2162BB480(uint64_t a1)
{
  LMLanguageModelFlushDynamicData();
  uint64_t v2 = *(void *)(a1 + 416);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 88);

  return v3();
}

uint64_t sub_2162BB4FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 416);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 80))(v1);
  }

  return LMLanguageModelResetDynamicData();
}

CFArrayRef sub_2162BB568(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v5 = (const void *)[a2 a2:a3];
  if (v5) {
    BOOL v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BB158, 0);
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 496);

  return sub_216181518(v7, (uint64_t)v6, a3);
}

void sub_2162BB5FC(uint64_t a1, const UniChar *a2, CFIndex numChars, uint64_t a4)
{
  if (a2)
  {
    if (numChars)
    {
      CFStringRef v7 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, numChars);
      if (v7)
      {
        uint64_t v50 = (uint64_t)a2;
        CFStringRef cf = v7;
        char v60 = 0;
        uint64_t v57 = 0;
        BOOL v58 = 0;
        unint64_t v59 = 0;
        sub_2162B8940(a1, v7, 0, 0);
        for (uint64_t i = 0; ; ++i)
        {
          uint64_t v9 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 456) + 48))(*(void *)(a1 + 456));
          uint64_t v12 = v9;
          if (!v9 || i == 10) {
            break;
          }
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v58 - v57) >> 3) > 2 || v60 != 0) {
            break;
          }
          uint64_t v15 = MecabraCandidateCopySyllableLengthArrayInAnalysisString(v9, v10, v11);
          CFArrayRef v16 = v15;
          if (v15)
          {
            unint64_t Count = CFArrayGetCount(v15);
            uint64_t v18 = Count;
            unint64_t v55 = 0;
            uint64_t valuePtr = 0;
            long long __p = 0;
            CFRange v54 = 0;
            if (!Count) {
              goto LABEL_34;
            }
            if (Count >> 61) {
              sub_21610CB04();
            }
            uint64_t v19 = (char *)sub_2160FFAA8((uint64_t)&v55, Count);
            uint64_t v21 = v20;
            uint64_t v23 = (char *)__p;
            uint64_t v22 = v54;
            bzero(v19, 8 * v18);
            char v24 = v19;
            while (v22 != v23)
            {
              uint64_t v25 = *((void *)v22 - 1);
              v22 -= 8;
              *((void *)v24 - 1) = v25;
              v24 -= 8;
            }
            long long __p = v24;
            CFRange v54 = &v19[8 * v18];
            unint64_t v55 = (unint64_t)&v19[8 * v21];
            if (v23) {
              operator delete(v23);
            }
            if (v18 >= 1)
            {
              CFIndex v26 = 0;
              uint64_t v27 = 0;
              uint64_t v28 = 0;
              do
              {
                CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v16, v26);
                CFNumberGetValue(ValueAtIndex, kCFNumberCFIndexType, &valuePtr);
                if (valuePtr >= 1 && valuePtr + v28 <= numChars)
                {
                  *((void *)__p + v26) = valuePtr;
                  if (v18 - 1 == v26) {
                    uint64_t v27 = v28;
                  }
                  v28 += valuePtr;
                }
                ++v26;
              }
              while (v18 != v26);
            }
            else
            {
LABEL_34:
              uint64_t v28 = 0;
              uint64_t v27 = 0;
            }
            if (v28 == numChars)
            {
              BOOL v31 = __p;
              uint64_t v32 = v54;
              if ((sub_2162BBA74(v57, (uint64_t)v58, __p, (uint64_t)v54) & 1) == 0)
              {
                (*(void (**)(uint64_t, unsigned char *, int64_t, char *))(a4 + 16))(a4, v31, (v32 - v31) >> 3, &v60);
                if (!v60)
                {
                  uint64_t v33 = v58;
                  if ((unint64_t)v58 >= v59)
                  {
                    int v36 = (void *)sub_2162BE208(&v57, (uint64_t)&__p);
                  }
                  else
                  {
                    *BOOL v58 = 0;
                    v33[1] = 0;
                    v33[2] = 0;
                    sub_2162BE380(v33, __p, (uint64_t)v54, (v54 - (unsigned char *)__p) >> 3);
                    int v36 = v33 + 3;
                  }
                  BOOL v58 = v36;
                  if (MecabraCandidateGetMatchedLengthType(v12, v34, v35) != 2)
                  {
                    uint64_t v37 = sub_2163196D4(*(void *)(a1 + 384) + 80, v50, v27, *((void *)v54 - 1));
                    if (v37 != -1)
                    {
                      BOOL v38 = __p;
                      *((void *)__p + v18 - 1) = v37 - v27;
                      CFIndex v39 = numChars - v37;
                      uint64_t v40 = v54;
                      if ((unint64_t)v54 >= v55)
                      {
                        uint64_t v42 = (v54 - v38) >> 3;
                        unint64_t v43 = v42 + 1;
                        if ((unint64_t)(v42 + 1) >> 61) {
                          sub_21610CB04();
                        }
                        uint64_t v44 = v55 - (void)v38;
                        if ((uint64_t)(v55 - (void)v38) >> 2 > v43) {
                          unint64_t v43 = v44 >> 2;
                        }
                        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v45 = v43;
                        }
                        if (v45)
                        {
                          __int16 v46 = (char *)sub_2160FFAA8((uint64_t)&v55, v45);
                          BOOL v38 = __p;
                          uint64_t v40 = v54;
                        }
                        else
                        {
                          __int16 v46 = 0;
                        }
                        char v47 = &v46[8 * v42];
                        *(void *)char v47 = v39;
                        CFNumberRef v41 = v47 + 8;
                        while (v40 != v38)
                        {
                          uint64_t v48 = *((void *)v40 - 1);
                          v40 -= 8;
                          *((void *)v47 - 1) = v48;
                          v47 -= 8;
                        }
                        long long __p = v47;
                        CFRange v54 = v41;
                        unint64_t v55 = (unint64_t)&v46[8 * v45];
                        if (v38) {
                          operator delete(v38);
                        }
                      }
                      else
                      {
                        *(void *)CFRange v54 = v39;
                        CFNumberRef v41 = v40 + 8;
                      }
                      CFRange v54 = v41;
                      int v49 = __p;
                      if ((sub_2162BBA74(v57, (uint64_t)v58, __p, (uint64_t)v41) & 1) == 0)
                      {
                        (*(void (**)(uint64_t, unsigned char *, int64_t, char *))(a4 + 16))(a4, v49, (v41 - v49) >> 3, &v60);
                        if (!v60) {
                          sub_2162BBAF4(&v57, (uint64_t)&__p);
                        }
                      }
                    }
                  }
                }
              }
            }
            CFRelease(v16);
            if (__p)
            {
              CFRange v54 = (char *)__p;
              operator delete(__p);
            }
          }
        }
        CFRelease(cf);
        long long __p = &v57;
        sub_216267E04((void ***)&__p);
      }
    }
  }
}

void sub_2162BBA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  if (__p)
  {
    a16 = __p;
    operator delete(__p);
  }
  long long __p = &a19;
  sub_216267E04((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2162BBA74(uint64_t a1, uint64_t a2, void *__s2, uint64_t a4)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v6 = a1;
  size_t v7 = a4 - (void)__s2;
  while (*(void *)(v6 + 8) - *(void *)v6 != v7 || memcmp(*(const void **)v6, __s2, v7))
  {
    v6 += 24;
    if (v6 == a2) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_2162BBAF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = sub_2162BE208(a1, a2);
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    sub_2162BE380(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    uint64_t result = (uint64_t)(v3 + 3);
    a1[1] = (uint64_t)(v3 + 3);
  }
  a1[1] = result;
  return result;
}

void sub_2162BBB58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2162BBB60(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(**(void **)(a1 + 456) + 56))(*(void *)(a1 + 456));
  uint64_t v4 = sub_2162E66E4(*(void *)(a1 + 384), a2);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v4 + 8));
  uint64_t v6 = *(void *)(a1 + 456);
  if (Count)
  {
    for (unint64_t i = 0; i < v9; ++i)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 8), i);
      (*(void (**)(uint64_t, const void *))(*(void *)v6 + 16))(v6, ValueAtIndex);
      unint64_t v9 = CFArrayGetCount(*(CFArrayRef *)(v4 + 8));
      uint64_t v6 = *(void *)(a1 + 456);
    }
  }
  uint64_t v10 = sub_2162537BC();
  (*(void (**)(uint64_t, uint64_t (*)(void *, char *, uint64_t), uint64_t))(*(void *)v6 + 32))(v6, v10, 1);
  return *(void *)(*(void *)(a1 + 456) + 8);
}

void sub_2162BBC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2162B9EA8(a1, 1, 1, 0);
  if (a3 >= 1)
  {
    uint64_t v5 = *(void *)(a1 + 416);
    if (v5)
    {
      uint64_t v6 = *(void (**)(void))(*(void *)v5 + 24);
      v6();
    }
  }
}

void sub_2162BBCE8(uint64_t a1)
{
  v140[2] = *MEMORY[0x263EF8340];
  (*(void (**)(void))(**(void **)(a1 + 456) + 56))(*(void *)(a1 + 456));
  CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 488));
  *(unsigned char *)(a1 + 52sub_2161A108C(&a9, 0) = *(unsigned char *)(a1 + 552);
  *(void *)(a1 + 536) = *(void *)(a1 + 528);
  uint64_t v2 = *(void *)(a1 + 384);
  if (!*(unsigned char *)(v2 + 1152)) {
    return;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(v2 + 1160)))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(a1 + 456);
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 1160), v3);
      (*(void (**)(uint64_t, const void *))(*(void *)v4 + 16))(v4, ValueAtIndex);
      ++v3;
    }
    while (v3 < CFArrayGetCount(*(CFArrayRef *)(v2 + 1160)));
  }
  *(unsigned char *)(v2 + 1152) = 0;
  uint64_t v125 = 0;
  int v6 = *(_DWORD *)(a1 + 200);
  if ((v6 & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 552))
    {
      sub_2162BD2E8(a1);
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 384);
      if (!*(unsigned char *)(v7 + 1312))
      {
        double v133 = 0.0;
        uint64_t v8 = (void *)(*(uint64_t (**)(void, double *, uint64_t))(**(void **)(v7 + 952) + 64))(*(void *)(v7 + 952), &v133, 1);
        long long __p = 0;
        __int16 v136 = 0;
        uint64_t v137 = 0;
        LOBYTE(values) = 0;
        BOOL v9 = sub_2162BD588(a1, v8, (unint64_t *)&__p, &values);
        (*(void (**)(void, void *, const char *, double))(**(void **)(*(void *)(a1 + 384) + 952)
                                                                       + 120))(*(void *)(*(void *)(a1 + 384) + 952), v8, "Best: ", v133);
        if (v9)
        {
          if ((_BYTE)values)
          {
            *(double *)&uint64_t v126 = 0.0;
            uint64_t v10 = (void *)(*(uint64_t (**)(void, void **, void *))(**(void **)(*(void *)(a1 + 384)
                                                                                             + 952)
                                                                               + 72))(*(void *)(*(void *)(a1 + 384) + 952), &v126, &unk_26C6CA2A0);
            if (*(double *)&v126 < v133 + 4.5)
            {
              uint64_t v11 = v10;
              sub_2162BD8B4(a1, v10);
              (*(void (**)(void, void *, const char *, double))(**(void **)(*(void *)(a1 + 384)
                                                                                           + 952)
                                                                             + 120))(*(void *)(*(void *)(a1 + 384) + 952), v11, "AutoCorrection: ", v133);
              *(unsigned char *)(a1 + 52sub_2161A108C(&a9, 0) = 1;
            }
          }
          sub_2162BD970();
        }
        if (__p)
        {
          __int16 v136 = __p;
          operator delete(__p);
        }
        if (!*(unsigned char *)(*(void *)(a1 + 384) + 1312)
          && !CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 456) + 8)))
        {
          *(double *)&uint64_t v126 = 0.0;
          uint64_t v12 = *(void *)(a1 + 384);
          v124[0] = MEMORY[0x263EF8330];
          v124[1] = 0x40000000;
          v124[2] = sub_2162BE070;
          v124[3] = &unk_26426E4D8;
          v124[4] = a1;
          v124[5] = 0;
          (*(void (**)(void, void **, void *))(**(void **)(v12 + 952) + 72))(*(void *)(v12 + 952), &v126, v124);
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 552))
  {
    uint64_t v22 = *(int ***)(a1 + 528);
    uint64_t v23 = *(int ***)(a1 + 536);
    if (v23 != v22 && (unint64_t)((char *)v23 - (char *)v22) >= 0x10)
    {
      int v24 = 0;
      uint64_t v25 = *(void **)(a1 + 528);
      while (1)
      {
        int v26 = *(_DWORD *)(*v25 + 192);
        if (!v26) {
          break;
        }
        if (v26 < v24) {
          int v24 = *(_DWORD *)(*v25 + 192);
        }
        if (++v25 == v23)
        {
          uint64_t v27 = 0;
          double v28 = (double)v24;
          double v29 = 0.0;
          do
          {
            uint64_t v30 = *v22;
            int v31 = (*(uint64_t (**)(int *))(*(void *)*v22 + 112))(*v22);
            (*(void (**)(int *, void))(*(void *)v30 + 480))(v30, (int)((double)v31 - v28 + (double)v30[48]));
            uint64_t v32 = *(void *)v30;
            if (v27) {
              (*(void (**)(int *, double))(v32 + 400))(v30, v29);
            }
            else {
              double v29 = (*(double (**)(int *))(v32 + 392))(v30);
            }
            ++v22;
            --v27;
          }
          while (v22 != v23);
          break;
        }
      }
    }
  }
  uint64_t v13 = *(void *)(a1 + 456);
  uint64_t v14 = sub_216252B5C(*(void *)(a1 + 600));
  (*(void (**)(uint64_t, uint64_t (*)(void *, char *, uint64_t), uint64_t))(*(void *)v13 + 32))(v13, v14, 1);
  if (v125) {
    BOOL v17 = (v6 & 1) == 0;
  }
  else {
    BOOL v17 = 0;
  }
  double v18 = 0.0;
  if (v17)
  {
    uint64_t v19 = sub_2161F3B4C(v125, v15, v16);
    double v20 = (*(double (**)(void *))(*(void *)v19 + 392))(v19);

    double v18 = -v20;
  }
  if (*(unsigned char *)(a1 + 368)) {
    return;
  }
  sub_216294768(*(void *)(a1 + 456));
  if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 456) + 8))) {
    uint64_t v21 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 456) + 8), 0);
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v33 = *(void *)(a1 + 384);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v33 + 1112));
  if (Count >= 1)
  {
    uint64_t v37 = (id)CFArrayGetValueAtIndex(*(CFArrayRef *)(v33 + 1112), Count - 1);
    values = v37;
    if (v37)
    {
      uint64_t v102 = *(void *)(a1 + 184);
      CFStringRef Surface = (const void *)MecabraCandidateGetSurface(v37, v35, v36);
      if ((sub_216229684(v102, Surface, 2050) & 1) == 0)
      {
        if ((unint64_t)CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 456) + 8)) < 2)
        {
          (*(void (**)(void, void *))(**(void **)(a1 + 456) + 16))(*(void *)(a1 + 456), v37);
        }
        else
        {
          int v138 = 0;
          char v139 = (char *)&v138;
          v140[0] = 0x2000000000;
          v140[1] = 0;
          uint64_t v106 = MecabraCandidateGetSurface(v37, v104, v105);
          uint64_t v107 = *(void *)(a1 + 456);
          *(double *)&uint64_t v126 = MEMORY[0x263EF8330];
          char __dst = (void *)0x40000000;
          signed int v128 = sub_2162BE080;
          int v129 = &unk_26426E500;
          uint64_t v130 = &v138;
          uint64_t v131 = v106;
          sub_21629430C(v107, (uint64_t)&v126);
          uint64_t v108 = *((void *)v139 + 3);
          _Block_object_dispose(&v138, 8);
          uint64_t v109 = operator new(0x28uLL);
          if (v108 <= 1) {
            uint64_t v110 = 1;
          }
          else {
            uint64_t v110 = v108;
          }
          v109[4] = v110;
          void *v109 = 0;
          v109[1] = 0;
          v109[2] = &v136;
          __int16 v136 = v109;
          *((unsigned char *)v109 + 24) = 1;
          long long __p = v109;
          uint64_t v137 = 1;
          *(double *)&CFArrayRef v111 = COERCE_DOUBLE(CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x263EFFF70]));
          uint64_t v126 = v111;
          sub_2162949B0(*(void *)(a1 + 456), v111, &__p);
          if (*(double *)&v111 != 0.0) {
            CFRelease(v111);
          }
          sub_21612A250((uint64_t)&__p, v136);
          uint64_t v37 = values;
        }
      }
    }
    goto LABEL_162;
  }
  double v134 = 0.0;
  uint64_t v38 = (*(uint64_t (**)(void, double *, void *))(**(void **)(*(void *)(a1 + 384) + 952) + 72))(*(void *)(*(void *)(a1 + 384) + 952), &v134, &unk_26C6CA280);
  *(double *)&uint64_t v126 = 0.0;
  char __dst = 0;
  signed int v128 = 0;
  int v138 = 0;
  char v139 = 0;
  v140[0] = 0;
  uint64_t v40 = *(void *)(*(void *)(a1 + 8) + 32);
  int v121 = (char *)v38;
  if (!v38)
  {
    uint64_t v123 = 0;
    goto LABEL_122;
  }
  uint64_t v123 = 0;
  char v122 = 0;
  UChar v120 = v21;
  CFNumberRef v41 = (void *)v38;
  do
  {
    uint64_t v42 = (_DWORD *)*v41;
    unint64_t v43 = *(uint64_t **)(*v41 + 16);
    if (!v43) {
      goto LABEL_116;
    }
    if ((v42[2] - 9) <= 1)
    {
      uint64_t v44 = *v43;
      if (*v43)
      {
        uint64_t v45 = *(void *)(v44 + 8);
        if (v45 - 1 < 0) {
          goto LABEL_57;
        }
        uint64_t v46 = 0;
        char v47 = (unsigned __int8 *)(*(void *)(v44 + 32) + 4 * v45 - 4);
        while (1)
        {
          int v48 = *v47;
          v47 -= 4;
          if (v48) {
            break;
          }
          if (v45 == ++v46)
          {
            uint64_t v46 = v45;
            break;
          }
        }
        if (v46) {
          uint64_t v123 = v45 - v46;
        }
        else {
LABEL_57:
        }
          uint64_t v123 = 0;
      }
    }
    long long __p = 0;
    uint64_t v49 = (*(uint64_t (**)(_DWORD *, void **))(*(void *)v42 + 32))(v42, &__p);
    uint64_t v50 = (char *)v49;
    unint64_t v51 = (unint64_t)__p;
    if (!v49 || __p == 0) {
      break;
    }
    uint64_t v53 = v126;
    if (v126 == __dst)
    {
      if (v42[2] == 10)
      {
        if (LMLanguageModelTokenSequenceIsBlocklisted()) {
          break;
        }
        unint64_t v51 = (unint64_t)__p;
        char v122 = 1;
        uint64_t v53 = v126;
      }
      uint64_t v64 = (uint64_t)v128;
      if (v51 <= ((char *)v128 - (char *)v53) >> 2)
      {
        CFIndex v39 = (char *)((unsigned char *)__dst - v53);
        unint64_t v71 = ((unsigned char *)__dst - v53) >> 2;
        if (v71 >= v51)
        {
          if (v51) {
            goto LABEL_103;
          }
          size_t v73 = 0;
        }
        else
        {
          if (__dst != v53)
          {
            memmove(v53, v50, (size_t)v39);
            uint64_t v53 = __dst;
          }
          uint64_t v72 = &v50[4 * v71];
          size_t v73 = 4 * v51 - 4 * v71;
          if (v71 != v51)
          {
            int v74 = v53;
            goto LABEL_104;
          }
        }
      }
      else
      {
        if (v53)
        {
          char __dst = v53;
          operator delete(v53);
          uint64_t v64 = 0;
          *(double *)&uint64_t v126 = 0.0;
          char __dst = 0;
          signed int v128 = 0;
        }
        if (v51 >> 62) {
          sub_21610CB04();
        }
        uint64_t v65 = v64 >> 1;
        if (v64 >> 1 <= v51) {
          uint64_t v65 = v51;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        sub_216112970(&v126, v66);
        uint64_t v53 = __dst;
LABEL_103:
        size_t v73 = 4 * v51;
        int v74 = v53;
        uint64_t v72 = v50;
LABEL_104:
        memmove(v74, v72, v73);
      }
      char __dst = &v53[v73];
      goto LABEL_116;
    }
    if ((uint64_t)__p >= 1)
    {
      CFRange v54 = v139;
      unint64_t v55 = v138;
      int64_t v56 = v139 - v138;
      int64_t v57 = (v139 - v138) >> 2;
      if ((uint64_t)__p > (uint64_t)(v140[0] - (void)v139) >> 2)
      {
        unint64_t v58 = (unint64_t)__p + v57;
        if (v58 >> 62) {
          sub_21610CB04();
        }
        uint64_t v59 = v140[0] - (void)v138;
        if ((uint64_t)(v140[0] - (void)v138) >> 1 > v58) {
          unint64_t v58 = v59 >> 1;
        }
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v60 = v58;
        }
        if (v60)
        {
          __int16 v61 = (char *)sub_2161129B4((uint64_t)v140, v60);
          uint64_t v63 = v62;
        }
        else
        {
          __int16 v61 = 0;
          uint64_t v63 = 0;
        }
        uint64_t v79 = 0;
        uint64_t v80 = 4 * v51;
        uint64_t v81 = &v61[4 * v51];
        do
        {
          *(_DWORD *)&v61[v79] = *(_DWORD *)&v50[v79];
          v79 += 4;
        }
        while (v80 != v79);
        unint64_t v82 = v138;
        unint64_t v83 = v61;
        if (v138 != v55)
        {
          unint64_t v84 = v55;
          unint64_t v83 = v61;
          do
          {
            int v85 = *((_DWORD *)v84 - 1);
            v84 -= 4;
            *((_DWORD *)v83 - 1) = v85;
            v83 -= 4;
          }
          while (v84 != v82);
        }
        uint64_t v86 = (char *)(v139 - v55);
        if (v139 != v55) {
          memmove(v81, v55, v139 - v55);
        }
        unint64_t v87 = v138;
        int v138 = v83;
        char v139 = &v86[(void)v81];
        v140[0] = &v61[4 * v63];
        if (v87) {
          operator delete(v87);
        }
        goto LABEL_116;
      }
      unsigned int v67 = (unsigned char *)(v49 + 4 * (void)__p);
      if (v57 >= (uint64_t)__p)
      {
        unint64_t v70 = v139;
LABEL_95:
        uint64_t v75 = &v70[-4 * v51];
        size_t v76 = v70;
        while (v75 < v54)
        {
          int v77 = *(_DWORD *)v75;
          v75 += 4;
          *(_DWORD *)size_t v76 = v77;
          v76 += 4;
        }
        uint64_t v78 = &v55[4 * v51];
        char v139 = v76;
        if (v70 != v78) {
          memmove(&v70[-4 * ((v70 - v78) >> 2)], v55, v70 - v78);
        }
        CFIndex v39 = (char *)(v67 - v50);
        if (v67 != v50) {
          memmove(v55, v50, (size_t)v39);
        }
        goto LABEL_116;
      }
      BOOL v68 = (unsigned char *)(v49 + 4 * v57);
      size_t v69 = v67 - v68;
      memmove(v139, v68, v69);
      unint64_t v70 = &v54[v69];
      char v139 = &v54[v69];
      if (v56 >= 1)
      {
        unsigned int v67 = v68;
        goto LABEL_95;
      }
    }
LABEL_116:
    CFNumberRef v41 = (void *)v41[1];
  }
  while (v41);
  uint64_t v21 = v120;
  if (v122)
  {
LABEL_144:
    uint64_t v90 = v121;
    if (v121 && v134 < v18 + 1.5)
    {
      long long __p = 0;
      __int16 v136 = 0;
      uint64_t v137 = 0;
      sub_2162BD588(a1, v121, (unint64_t *)&__p, 0);
      operator new();
    }
    goto LABEL_147;
  }
LABEL_122:
  int v88 = (unsigned int *)v126;
  if (v126 == __dst || v138 == v139 || !v123) {
    goto LABEL_144;
  }
  unint64_t v89 = 0;
  while ((*(double (**)(uint64_t, void))(*(void *)v40 + 40))(v40, v88[v89]) >= (double)(unint64_t)(v123 - 1)
                                                                                              * -0.7
                                                                                              + -2.8)
  {
    int v91 = v126;
    int v92 = v139;
    if ((unint64_t)v139 >= v140[0])
    {
      UChar v94 = v138;
      int64_t v95 = (v139 - v138) >> 2;
      unint64_t v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 62) {
        sub_21610CB04();
      }
      uint64_t v97 = v140[0] - (void)v138;
      if ((uint64_t)(v140[0] - (void)v138) >> 1 > v96) {
        unint64_t v96 = v97 >> 1;
      }
      if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v98 = v96;
      }
      if (v98)
      {
        UChar v99 = (char *)sub_2161129B4((uint64_t)v140, v98);
        UChar v94 = v138;
        int v92 = v139;
      }
      else
      {
        UChar v99 = 0;
      }
      uint64_t v100 = &v99[4 * v95];
      *(_DWORD *)uint64_t v100 = v91[v89];
      BOOL v93 = v100 + 4;
      while (v92 != v94)
      {
        int v101 = *((_DWORD *)v92 - 1);
        v92 -= 4;
        *((_DWORD *)v100 - 1) = v101;
        v100 -= 4;
      }
      int v138 = v100;
      char v139 = v93;
      v140[0] = &v99[4 * v98];
      if (v94) {
        operator delete(v94);
      }
    }
    else
    {
      *(_DWORD *)char v139 = *((_DWORD *)v126 + v89);
      BOOL v93 = v92 + 4;
    }
    char v139 = v93;
    ++v89;
    int v88 = (unsigned int *)v126;
    if (v89 >= ((unsigned char *)__dst - (unsigned char *)v126) >> 2) {
      goto LABEL_144;
    }
  }
LABEL_147:
  if (v138)
  {
    char v139 = v138;
    operator delete(v138);
  }
  if (*(double *)&v126 != 0.0)
  {
    char __dst = v126;
    operator delete(v126);
  }
  values = 0;
  if (MecabraCandidateGetMatchedLengthType(v21, v90, (uint64_t)v39) != 2
    && sub_2162EA2BC(*(void *)(a1 + 384)))
  {
    UChar v115 = (const void *)[v21 v113:v114];
    if (v115)
    {
      unint64_t v116 = __dynamic_cast(v115, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BB158, 0);
      if (v116)
      {
        int32_t v117 = v116;
        if ((*(uint64_t (**)(void *))(*(void *)v116 + 24))(v116))
        {
          CFStringRef v118 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v117 + 24))(v117);
          if ((unint64_t)(CFStringGetLength(v118) - 9) >= 0xFFFFFFFFFFFFFFF9)
          {
            CFStringRef v119 = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v117 + 24))(v117);
            if ((sub_2161A1F24(v119) & 1) == 0) {
              sub_21621BD88();
            }
          }
        }
      }
    }
  }
LABEL_162:
  unint64_t v112 = CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 456) + 8));
  if (v112 >= 0xC9) {
    sub_2162947F8(*(void *)(a1 + 456), 200, v112 - 200);
  }
}

void sub_2162BD15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162BD2E8(uint64_t a1)
{
  uint64_t v2 = 392;
  if (!*(unsigned char *)(a1 + 568)) {
    uint64_t v2 = 384;
  }
  sub_2162EAE20(*(void **)(a1 + v2), 1, &__p);
  uint64_t v4 = (double *)__p;
  unint64_t v3 = (double *)v21;
  if (__p == (void *)v21)
  {
    uint64_t v5 = 392;
    if (!*(unsigned char *)(a1 + 568)) {
      uint64_t v5 = 384;
    }
    sub_2162EAE20(*(void **)(a1 + v5), 0, &v18);
    if (__p)
    {
      *(void *)&long long v21 = __p;
      operator delete(__p);
    }
    uint64_t v4 = v18;
    long long __p = v18;
    long long v21 = v19;
    unint64_t v3 = (double *)v19;
  }
  if (v4 != v3)
  {
    uint64_t v6 = 0;
    char v7 = 1;
    double v8 = 3.0;
    do
    {
      double v9 = -0.0;
      if (v7) {
        double v9 = v4[1];
      }
      double v8 = v8 + v9;
      if (v4[1] >= v8 || CFSetGetCount(*(CFSetRef *)(a1 + 488)) + v6 > 3) {
        break;
      }
      uint64_t v10 = *(void **)v4;
      if ((v7 & 1) != 0 || !v10)
      {
LABEL_21:
        int v12 = sub_2162BD8B4(a1, v10);
        uint64_t v14 = *(unsigned char *)(a1 + 568) ? 392 : 384;
        uint64_t v15 = *(void *)(a1 + v14);
        uint64_t v16 = v12 ? "Neural:" : "Neural Dropped:";
        v13.n128_f64[0] = v4[1];
        (*(void (**)(void, void, char *, __n128))(**(void **)(v15 + 952) + 120))(*(void *)(v15 + 952), *(void *)v4, v16, v13);
      }
      else
      {
        while (1)
        {
          uint64_t v11 = *v10;
          if ((*(unsigned int (**)(void))(*(void *)*v10 + 40))(*v10))
          {
            if (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11) & 0x1002) != 0) {
              break;
            }
          }
          uint64_t v10 = (void *)v10[1];
          if (!v10)
          {
            uint64_t v10 = *(void **)v4;
            goto LABEL_21;
          }
        }
        uint64_t v17 = *(unsigned char *)(a1 + 568) ? 392 : 384;
        (*(void (**)(void, void, const char *, double))(**(void **)(*(void *)(a1 + v17) + 952)
                                                                     + 120))(*(void *)(*(void *)(a1 + v17) + 952), *(void *)v4, "Neural OVS:", v4[1]);
        ++v6;
      }
      char v7 = 0;
      v4 += 2;
    }
    while (v4 != v3);
    unint64_t v3 = (double *)__p;
  }
  if (v3)
  {
    *(void *)&long long v21 = v3;
    operator delete(v3);
  }
}

void sub_2162BD55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162BD588(uint64_t a1, void *a2, unint64_t *a3, unsigned char *a4)
{
  uint64_t v6 = a2;
  a3[1] = *a3;
  if (a4) {
    *a4 = 0;
  }
  long long __p = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  BOOL v7 = 0;
  if (a2)
  {
    uint64_t v8 = 0;
    do
    {
      double v9 = (void **)*v6;
      uint64_t v10 = *(uint64_t **)(*v6 + 16);
      if (v10)
      {
        if (a4)
        {
          if (!*a4)
          {
            uint64_t v19 = *v10;
            if (v19)
            {
              if ((*(unsigned char *)(v19 + 40) & 0x10) != 0 && *(float *)(v19 + 56) < 1.0) {
                *a4 = 1;
              }
            }
          }
        }
        int v12 = (void *)a3[1];
        unint64_t v11 = a3[2];
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v14 = (uint64_t)((uint64_t)v12 - *a3) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v15 = v11 - *a3;
          uint64_t v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
            uint64_t v16 = v14 + 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            double v18 = (char *)sub_2160FFAA8((uint64_t)(a3 + 2), v17);
          }
          else {
            double v18 = 0;
          }
          double v20 = &v18[8 * v14];
          *(void *)double v20 = v9;
          __n128 v13 = v20 + 8;
          uint64_t v22 = (char *)*a3;
          long long v21 = (char *)a3[1];
          if (v21 != (char *)*a3)
          {
            do
            {
              uint64_t v23 = *((void *)v21 - 1);
              v21 -= 8;
              *((void *)v20 - 1) = v23;
              v20 -= 8;
            }
            while (v21 != v22);
            long long v21 = (char *)*a3;
          }
          *a3 = (unint64_t)v20;
          a3[1] = (unint64_t)v13;
          a3[2] = (unint64_t)&v18[8 * v17];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *int v12 = v9;
          __n128 v13 = v12 + 1;
        }
        a3[1] = (unint64_t)v13;
        uint64_t v24 = ((uint64_t (*)(void **))(*v9)[7])(v9);
        sub_216185BD8((uint64_t)&__p, (uint64_t)__p, *(char **)v24, (char *)(*(void *)v24 + 2 * *(void *)(v24 + 8)), *(void *)(v24 + 8));
        if (v7 || (uint64_t v25 = *v9[2]) == 0)
        {
          BOOL v7 = 1;
        }
        else
        {
          v8 += *(void *)(v25 + 8);
          BOOL v7 = v8 > 1;
        }
      }
      uint64_t v6 = (void *)v6[1];
    }
    while (v6);
  }
  if (*(unsigned char *)(a1 + 552))
  {
    unint64_t v26 = *a3;
    unint64_t v27 = a3[1];
    if (*a3 == v27)
    {
LABEL_41:
      BOOL v29 = 0;
      goto LABEL_50;
    }
  }
  else
  {
    unint64_t v26 = *a3;
    unint64_t v27 = a3[1];
    if (v27 == *a3 || v7)
    {
      if (v27 == v26) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v28 = *(void *)(a1 + 240);
      if (!v28 || ((*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28) & 1) != 0) {
        goto LABEL_41;
      }
      unint64_t v26 = *a3;
      unint64_t v27 = a3[1];
    }
  }
  if (v26 != v27)
  {
    uint64_t v30 = (void *)(v27 - 8);
    if ((unint64_t)v30 > v26)
    {
      unint64_t v31 = v26 + 8;
      do
      {
        uint64_t v32 = *(void *)(v31 - 8);
        *(void *)(v31 - 8) = *v30;
        *v30-- = v32;
        BOOL v33 = v31 >= (unint64_t)v30;
        v31 += 8;
      }
      while (!v33);
    }
  }
  CFStringRef v34 = sub_21619A5CC();
  BOOL v29 = CFSetContainsValue(*(CFSetRef *)(a1 + 488), v34) == 0;
  if (v34) {
    CFRelease(v34);
  }
LABEL_50:
  if (__p)
  {
    uint64_t v38 = __p;
    operator delete(__p);
  }
  return v29;
}

void sub_2162BD86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162BD8B4(uint64_t a1, void *a2)
{
  long long __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  char v3 = 0;
  if (sub_2162BD588(a1, a2, (unint64_t *)&__p, &v3)) {
    sub_2162BD970();
  }
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_2162BD954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162BD970()
{
  char v0 = 0;
  operator new();
}

void sub_2162BDF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162BDF68(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2 && (*(_DWORD *)(*a2 + 8) - 9) < 2) {
    return 0;
  }
  if (*(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) > *(double *)(a1 + 48) + 0.7) {
    return 1;
  }
  if (a2)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v5 = **(void **)(*a2 + 16);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 40)) {
          return 1;
        }
      }
    }
  }
  (*(void (**)(void, void *, const char *))(**(void **)(*(void *)(v3 + 384) + 952) + 120))(*(void *)(*(void *)(v3 + 384) + 952), a2, "Alternative: ");

  return sub_2162BD8B4(v3, a2);
}

uint64_t sub_2162BE070(uint64_t a1, void *a2)
{
  return sub_2162BD8B4(*(void *)(a1 + 32), a2);
}

uint64_t sub_2162BE080(uint64_t a1, void *a2, unsigned char *a3)
{
  CFStringRef v5 = *(const __CFString **)(a1 + 40);
  CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(a2, (const char *)a2, (uint64_t)a3);
  uint64_t result = CFStringHasPrefix(v5, Surface);
  if (result) {
    *a3 = 1;
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_2162BE0E4()
{
}

void sub_2162BE194(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

CFCharacterSetRef sub_2162BE1B8()
{
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  qword_26797E3E8 = (uint64_t)CFCharacterSetCreateInvertedSet(0, Predefined);
  CFCharacterSetRef result = CFCharacterSetCreateWithCharactersInString(0, @":/-_+@#");
  qword_26797E3F0 = (uint64_t)result;
  return result;
}

uint64_t sub_2162BE208(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  double v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_2160FFA74();
    }
    BOOL v7 = (char *)operator new(24 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  uint64_t v8 = &v7[24 * v2];
  unint64_t v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  uint64_t v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_2162BE380(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  int v12 = (void *)*a1;
  unint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      *unint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  uint64_t v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  uint64_t v19 = v15;
  unint64_t v17 = (char *)v14.i64[0];
  sub_216267DA0((uint64_t)&v17);
  return v10;
}

void sub_2162BE36C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216267DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2162BE380(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    CFCharacterSetRef result = sub_216112B2C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFCharacterSetRef result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2162BE3E0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2162BE3FC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  const void *result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 328);
    *(void *)(v2 + 328) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(void *)(v2 + 320);
    *(void *)(v2 + 32sub_2161A108C(&a9, 0) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *(void *)(v2 + 312);
    *(void *)(v2 + 312) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *(void *)(v2 + 304);
    *(void *)(v2 + 304) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    sub_2162BE5B8((uint64_t *)(v2 + 256));
    uint64_t v15 = (void **)(v2 + 216);
    sub_2161FB708(&v15);
    uint64_t v7 = *(void **)(v2 + 192);
    if (v7)
    {
      *(void *)(v2 + 20sub_2161A108C(&a9, 0) = v7;
      operator delete(v7);
    }
    size_t v8 = *(void **)(v2 + 168);
    if (v8)
    {
      *(void *)(v2 + 176) = v8;
      operator delete(v8);
    }
    uint64_t v9 = *(void **)(v2 + 144);
    if (v9)
    {
      *(void *)(v2 + 152) = v9;
      operator delete(v9);
    }
    uint64_t v10 = *(void **)(v2 + 120);
    if (v10)
    {
      *(void *)(v2 + 128) = v10;
      operator delete(v10);
    }
    unint64_t v11 = *(void **)(v2 + 96);
    if (v11)
    {
      *(void *)(v2 + 104) = v11;
      operator delete(v11);
    }
    int v12 = *(void **)(v2 + 72);
    if (v12)
    {
      *(void *)(v2 + 8sub_2161A108C(&a9, 0) = v12;
      operator delete(v12);
    }
    long long v13 = *(void **)(v2 + 48);
    if (v13)
    {
      *(void *)(v2 + 56) = v13;
      operator delete(v13);
    }
    int64x2_t v14 = *(void **)(v2 + 24);
    if (v14)
    {
      *(void *)(v2 + 32) = v14;
      operator delete(v14);
    }
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t *sub_2162BE5B8(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_2162B4194(a1 + 4, 0);
  sub_2162B4194(a1 + 3, 0);
  sub_2162B4194(a1 + 2, 0);
  return a1;
}

void sub_2162BE630()
{
}

void sub_2162BE7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = v11;
  MEMORY[0x2166CA800](v13, 0x10F3C404517DEE7);
  a10 = v12 + 3;
  sub_2162C06E0(&a10);
  a10 = v12;
  sub_2162C077C(&a10);
  sub_2162C0BDC(v10 + 4);
  uint64_t v15 = v10[3];
  v10[3] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v10[2];
  _DWORD v10[2] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v10[1];
  v10[1] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *v10;
  *uint64_t v10 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2162BE968(uint64_t *a1)
{
  if (*((char *)a1 + 263) < 0) {
    operator delete((void *)a1[30]);
  }
  if (*((char *)a1 + 239) < 0) {
    operator delete((void *)a1[27]);
  }
  uint64_t v2 = (void *)a1[23];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[21];
  a1[21] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[18];
  if (v5)
  {
    a1[19] = (uint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[15];
  if (v6)
  {
    a1[16] = (uint64_t)v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[12];
  if (v7)
  {
    a1[13] = (uint64_t)v7;
    operator delete(v7);
  }
  uint64_t v8 = a1[11];
  a1[11] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  int64x2_t v14 = (void **)(a1 + 8);
  sub_2162C06E0(&v14);
  int64x2_t v14 = (void **)(a1 + 5);
  sub_2162C077C(&v14);
  sub_2162C0BDC(a1 + 4);
  uint64_t v9 = a1[3];
  a1[3] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = a1[2];
  a1[2] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = a1[1];
  a1[1] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *a1;
  *a1 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return a1;
}

uint64_t sub_2162BEB24(uint64_t a1)
{
  int v2 = *(char *)(a1 + 239);
  if (v2 < 0) {
    uint64_t v3 = *(void *)(a1 + 224);
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 239);
  }
  uint64_t v4 = a1 + 216;
  if (!v3)
  {
    sub_2162BEB84(a1, (std::string *)(a1 + 216));
    if ((*(unsigned char *)(a1 + 239) & 0x80) == 0) {
      return v4;
    }
    return *(void *)v4;
  }
  if ((v2 & 0x80) != 0) {
    return *(void *)v4;
  }
  return v4;
}

std::string *sub_2162BEB84(uint64_t a1, std::string *this)
{
  std::string::append(this, "k", 4uLL);
  std::string::append(this, (const std::string::value_type *)(a1 + 208), 4uLL);
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  uint64_t v5 = (const std::string::value_type *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  sub_2162BEDD0(v4, v5, this);
  int v6 = (*(uint64_t (**)(void))(**(void **)a1 + 40))();
  uint64_t v7 = (const std::string::value_type *)(*(uint64_t (**)(void))(**(void **)a1 + 32))();
  sub_2162BEDD0(v6, v7, this);
  sub_2162BEDD0(0, 0, this);
  sub_2162BEDD0(0, 0, this);
  int v8 = 0;
  int v9 = 12 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
  *(_DWORD *)__s = v9;
  if ((v9 & 4) != 0)
  {
    int v8 = 0;
    int v10 = v9 + 12;
    do
    {
      char v11 = v10;
      ++v8;
      v10 += 12;
    }
    while ((v11 & 4) != 0);
  }
  std::string::append(this, __s, 4uLL);
  *(_DWORD *)uint64_t v17 = 12 * v8;
  std::string::append(this, v17, 4uLL);
  if (*(char *)(a1 + 263) < 0)
  {
    uint64_t v12 = *(const std::string::value_type **)(a1 + 240);
    std::string::size_type v13 = *(void *)(a1 + 248);
  }
  else
  {
    uint64_t v12 = (const std::string::value_type *)(a1 + 240);
    std::string::size_type v13 = *(unsigned __int8 *)(a1 + 263);
  }
  std::string::append(this, v12, v13);
  for (; v8; --v8)
  {
    int v16 = 0;
    *(void *)uint64_t v15 = 0;
    std::string::append(this, v15, 0xCuLL);
  }
  *(_DWORD *)uint64_t v17 = 0;
  std::string::append(this, v17, 4uLL);
  std::string::append(this, v17, 4uLL);
  std::string::append(this, v17, 4uLL);
  std::string::append(this, v17, 4uLL);
  std::string::append(this, v17, 4uLL);
  return std::string::append(this, v17, 4uLL);
}

void sub_2162BEDD0(int a1, const std::string::value_type *a2, std::string *this)
{
  *(_DWORD *)uint64_t v7 = ((a1 + 7) & 0xFFFFFFF8) - a1;
  *(_DWORD *)__s = a1;
  std::string::append(this, __s, 4uLL);
  std::string::append(this, v7, 4uLL);
  if (*(_DWORD *)__s) {
    std::string::append(this, a2, *(unsigned int *)__s);
  }
  if (*(_DWORD *)v7)
  {
    char v5 = 0;
    sub_2162C0858(v6, *(unsigned int *)v7, &v5);
    std::string::append(this, v6[0], *(unsigned int *)v7);
    if (v6[0])
    {
      v6[1] = v6[0];
      operator delete(v6[0]);
    }
  }
}

void sub_2162BEE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162BEE94(uint64_t a1, uint64_t **a2, int a3, void **a4)
{
  int v6 = (void *)a1;
  int v8 = (void **)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 144);
  *(_DWORD *)(a1 + 208) = a3;
  uint64_t v9 = (char *)a2[1] - (char *)*a2;
  uint64_t v10 = a1 + 160;
  if (v9 >> 3 > (unint64_t)((*(void *)(a1 + 160) - v7) >> 3))
  {
    if (v9 < 0) {
LABEL_292:
    }
      sub_21610CB04();
    uint64_t v11 = *(void *)(a1 + 152) - v7;
    uint64_t v12 = (char *)sub_2160FFAA8(a1 + 160, v9 >> 3);
    unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFF8;
    int v6 = (void *)a1;
    int64x2_t v14 = &v12[v13];
    int v16 = &v12[8 * v15];
    uint64_t v18 = *(char **)(a1 + 144);
    uint64_t v17 = *(char **)(a1 + 152);
    uint64_t v19 = v14;
    if (v17 != v18)
    {
      do
      {
        uint64_t v20 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v19 - 1) = v20;
        v19 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*v8;
    }
    *(void *)(a1 + 144) = v19;
    *(void *)(a1 + 152) = v14;
    *(void *)(a1 + 16sub_2161A108C(&a9, 0) = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  uint64_t v199 = a4;
  uint64_t v22 = *a2;
  long long v21 = a2[1];
  if (v22 == v21)
  {
    uint64_t v36 = (char *)v6[19];
  }
  else
  {
    do
    {
      uint64_t v23 = *v22;
      if (*(char *)(*v22 + 47) < 0)
      {
        if (!*(void *)(v23 + 32))
        {
LABEL_13:
          uint64_t v24 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
          sub_216129E78(v24, (uint64_t)"(", 1);
          uint64_t v25 = (void *)std::ostream::operator<<();
          unint64_t v26 = sub_216129E78(v25, (uint64_t)") [", 3);
          unint64_t v27 = sub_216129E78(v26, (uint64_t)"token->reading.size()", 21);
          uint64_t v28 = sub_216129E78(v27, (uint64_t)"] ", 2);
          sub_216129E78(v28, (uint64_t)"token reading is empty\n", 23);
          sub_21619FA48();
        }
      }
      else if (!*(unsigned char *)(*v22 + 47))
      {
        goto LABEL_13;
      }
      if (*(char *)(v23 + 71) < 0)
      {
        if (!*(void *)(v23 + 56))
        {
LABEL_18:
          BOOL v29 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
          sub_216129E78(v29, (uint64_t)"(", 1);
          uint64_t v30 = (void *)std::ostream::operator<<();
          unint64_t v31 = sub_216129E78(v30, (uint64_t)") [", 3);
          uint64_t v32 = sub_216129E78(v31, (uint64_t)"token->surface.size()", 21);
          BOOL v33 = sub_216129E78(v32, (uint64_t)"] ", 2);
          sub_216129E78(v33, (uint64_t)"token surface is empty\n", 23);
          sub_21619FA48();
        }
      }
      else if (!*(unsigned char *)(v23 + 71))
      {
        goto LABEL_18;
      }
      uint64_t v35 = (char *)v6[19];
      unint64_t v34 = v6[20];
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = (v35 - (unsigned char *)*v8) >> 3;
        if ((unint64_t)(v37 + 1) >> 61) {
          goto LABEL_292;
        }
        uint64_t v38 = v34 - (void)*v8;
        uint64_t v39 = v38 >> 2;
        if (v38 >> 2 <= (unint64_t)(v37 + 1)) {
          uint64_t v39 = v37 + 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v39;
        }
        if (v40) {
          CFNumberRef v41 = (char *)sub_2160FFAA8(v10, v40);
        }
        else {
          CFNumberRef v41 = 0;
        }
        uint64_t v42 = &v41[8 * v37];
        *(void *)uint64_t v42 = v23;
        uint64_t v36 = v42 + 8;
        uint64_t v44 = (char *)v6[18];
        unint64_t v43 = (char *)v6[19];
        if (v43 != v44)
        {
          do
          {
            uint64_t v45 = *((void *)v43 - 1);
            v43 -= 8;
            *((void *)v42 - 1) = v45;
            v42 -= 8;
          }
          while (v43 != v44);
          unint64_t v43 = (char *)*v8;
        }
        v6[18] = v42;
        v6[19] = v36;
        v6[20] = &v41[8 * v40];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *(void *)uint64_t v35 = v23;
        uint64_t v36 = v35 + 8;
      }
      v6[19] = v36;
      ++v22;
    }
    while (v22 != v21);
  }
  uint64_t v46 = (uint64_t)*v8;
  uint64_t v47 = (uint64_t)&v36[-v46] >> 3;
  if ((uint64_t)&v36[-v46] < 1025)
  {
LABEL_42:
    sub_2162C0C2C(v46, v36, (uint64_t)&v36[-v46] >> 3, 0, 0);
  }
  else
  {
    int v48 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v49 = (uint64_t)&v36[-v46] >> 3;
    while (1)
    {
      uint64_t v50 = (uint64_t *)operator new(8 * v49, v48);
      if (v50) {
        break;
      }
      BOOL v51 = v49 > 1;
      v49 >>= 1;
      if (!v51) {
        goto LABEL_42;
      }
    }
    uint64_t v52 = v50;
    sub_2162C0C2C(v46, v36, (uint64_t)&v36[-v46] >> 3, v50, v49);
    operator delete(v52);
  }
  uint64_t v53 = (const std::string **)v6[18];
  if ((const std::string **)v6[19] != v53)
  {
    long long v210 = 0u;
    memset(__dst, 0, sizeof(__dst));
    std::string::operator=((std::string *)__dst, *v53 + 1);
    CFRange v54 = (uint64_t *)v6[18];
    int v202 = (uint64_t *)v6[19];
    if (v54 != v202)
    {
      int v55 = 0;
      std::string v200 = v6 + 23;
      while (1)
      {
        uint64_t v56 = *v54;
        unint64_t v57 = *(unsigned int *)(*v54 + 12);
        unint64_t v58 = v6[22];
        if (v58)
        {
          uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
          v59.i16[0] = vaddlv_u8(v59);
          unint64_t v60 = v59.u32[0];
          if (v59.u32[0] > 1uLL)
          {
            unint64_t v61 = *(unsigned int *)(*v54 + 12);
            if (v58 <= v57) {
              unint64_t v61 = v57 % v58;
            }
          }
          else
          {
            unint64_t v61 = (v58 - 1) & v57;
          }
          uint64_t v62 = *(uint64_t ***)(v6[21] + 8 * v61);
          if (v62)
          {
            uint64_t v63 = *v62;
            if (v63)
            {
              while (1)
              {
                unint64_t v64 = v63[1];
                if (v64 == v57)
                {
                  if (*((_DWORD *)v63 + 4) == v57)
                  {
                    unint64_t v70 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
                    sub_216129E78(v70, (uint64_t)"(", 1);
                    unint64_t v71 = (void *)std::ostream::operator<<();
                    uint64_t v72 = sub_216129E78(v71, (uint64_t)") [", 3);
                    size_t v73 = sub_216129E78(v72, (uint64_t)"iterator == m_tokenIDToUnigramTokenIndexMap.end()", 49);
                    int v74 = sub_216129E78(v73, (uint64_t)"] ", 2);
                    sub_216129E78(v74, (uint64_t)"tokenID should be unique.\n", 26);
                    sub_21619FA48();
                  }
                }
                else
                {
                  if (v59.u32[0] > 1uLL)
                  {
                    if (v64 >= v58) {
                      v64 %= v58;
                    }
                  }
                  else
                  {
                    v64 &= v58 - 1;
                  }
                  if (v64 != v61)
                  {
LABEL_63:
                    uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
                    v65.i16[0] = vaddlv_u8(v65);
                    unint64_t v60 = v65.u32[0];
                    break;
                  }
                }
                uint64_t v63 = (uint64_t *)*v63;
                if (!v63) {
                  goto LABEL_63;
                }
              }
            }
          }
          if (v60 > 1)
          {
            uint64_t v47 = *(unsigned int *)(*v54 + 12);
            if (v58 <= v57) {
              uint64_t v47 = v57 % v58;
            }
          }
          else
          {
            uint64_t v47 = (v58 - 1) & v57;
          }
          unint64_t v66 = *(uint64_t ***)(v6[21] + 8 * v47);
          if (v66)
          {
            for (unint64_t i = *v66; i; unint64_t i = (uint64_t *)*i)
            {
              unint64_t v68 = i[1];
              if (v68 == v57)
              {
                if (*((_DWORD *)i + 4) == v57) {
                  goto LABEL_136;
                }
              }
              else
              {
                if (v60 > 1)
                {
                  if (v68 >= v58) {
                    v68 %= v58;
                  }
                }
                else
                {
                  v68 &= v58 - 1;
                }
                if (v68 != v47) {
                  break;
                }
              }
            }
          }
          int v69 = 0;
        }
        else
        {
          int v69 = 1;
        }
        uint64_t v75 = operator new(0x18uLL);
        *uint64_t v75 = 0;
        v75[1] = v57;
        float v76 = (float)(unint64_t)(v6[24] + 1);
        *((_DWORD *)v75 + 4) = v57;
        *((_DWORD *)v75 + 5) = v55;
        float v77 = *((float *)v6 + 50);
        if ((((float)(v77 * (float)v58) >= v76) & ~v69) != 0)
        {
          unint64_t v57 = v47;
          goto LABEL_126;
        }
        BOOL v78 = (v58 & (v58 - 1)) != 0;
        if (v58 < 3) {
          BOOL v78 = 1;
        }
        unint64_t v79 = v78 | (2 * v58);
        unint64_t v80 = vcvtps_u32_f32(v76 / v77);
        int8x8_t prime = (int8x8_t)(v79 <= v80 ? v80 : v79);
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v58 = v6[22];
        }
        if (*(void *)&prime > v58) {
          break;
        }
        if (*(void *)&prime < v58)
        {
          unint64_t v88 = vcvtps_u32_f32((float)(unint64_t)v6[24] / *((float *)v6 + 50));
          if (v58 < 3 || (uint8x8_t v89 = (uint8x8_t)vcnt_s8((int8x8_t)v58), v89.i16[0] = vaddlv_u8(v89), v89.u32[0] > 1uLL))
          {
            unint64_t v88 = std::__next_prime(v88);
          }
          else
          {
            uint64_t v90 = 1 << -(char)__clz(v88 - 1);
            if (v88 >= 2) {
              unint64_t v88 = v90;
            }
          }
          if (*(void *)&prime <= v88) {
            int8x8_t prime = (int8x8_t)v88;
          }
          if (*(void *)&prime >= v58)
          {
            unint64_t v58 = v6[22];
          }
          else
          {
            if (prime) {
              break;
            }
            uint64_t v114 = (void *)v6[21];
            v6[21] = 0;
            if (v114) {
              operator delete(v114);
            }
            unint64_t v58 = 0;
            v6[22] = 0;
          }
        }
LABEL_122:
        if ((v58 & (v58 - 1)) != 0)
        {
          if (v58 <= v57) {
            v57 %= v58;
          }
        }
        else
        {
          unint64_t v57 = (v58 - 1) & v57;
        }
LABEL_126:
        uint64_t v94 = v6[21];
        int64_t v95 = *(void **)(v94 + 8 * v57);
        if (v95)
        {
          *uint64_t v75 = *v95;
LABEL_134:
          *int64_t v95 = v75;
          goto LABEL_135;
        }
        *uint64_t v75 = *v200;
        *std::string v200 = v75;
        *(void *)(v94 + 8 * v57) = v200;
        if (*v75)
        {
          unint64_t v96 = *(void *)(*v75 + 8);
          if ((v58 & (v58 - 1)) != 0)
          {
            if (v96 >= v58) {
              v96 %= v58;
            }
          }
          else
          {
            v96 &= v58 - 1;
          }
          int64_t v95 = (void *)(v6[21] + 8 * v96);
          goto LABEL_134;
        }
LABEL_135:
        ++v6[24];
LABEL_136:
        uint64_t v97 = __dst[23];
        if (__dst[23] >= 0) {
          uint64_t v98 = __dst[23];
        }
        else {
          uint64_t v98 = *(void *)&__dst[8];
        }
        uint64_t v99 = *(unsigned __int8 *)(v56 + 47);
        int v100 = (char)v99;
        if ((v99 & 0x80u) != 0) {
          uint64_t v99 = *(void *)(v56 + 32);
        }
        if (v98 != v99) {
          goto LABEL_152;
        }
        if (v100 >= 0) {
          int v101 = (unsigned __int8 *)(v56 + 24);
        }
        else {
          int v101 = *(unsigned __int8 **)(v56 + 24);
        }
        if ((__dst[23] & 0x80) != 0)
        {
          if (memcmp(*(const void **)__dst, v101, *(size_t *)&__dst[8])) {
            goto LABEL_152;
          }
        }
        else if (__dst[23])
        {
          uint64_t v102 = __dst;
          while (*v102 == *v101)
          {
            ++v102;
            ++v101;
            if (!--v97) {
              goto LABEL_160;
            }
          }
LABEL_152:
          unint64_t v103 = v6[6];
          if (v103 >= v6[7])
          {
            uint64_t v104 = sub_2162C0978((int64x2_t *)(v6 + 5), (long long *)__dst);
          }
          else
          {
            sub_2162C0B04((void *)v6[6], (long long *)__dst);
            uint64_t v104 = v103 + 48;
            v6[6] = v103 + 48;
          }
          v6[6] = v104;
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          memset(__dst, 0, 24);
          if (*(void *)&__dst[24])
          {
            *(void *)&long long v210 = *(void *)&__dst[24];
            operator delete(*(void **)&__dst[24]);
          }
          *(void *)&unsigned char __dst[24] = 0;
          long long v210 = 0uLL;
          std::string::operator=((std::string *)__dst, (const std::string *)(v56 + 24));
        }
LABEL_160:
        uint64_t v105 = v210;
        if ((unint64_t)v210 >= *((void *)&v210 + 1))
        {
          uint64_t v106 = (uint64_t)(v210 - *(void *)&__dst[24]) >> 3;
          if ((unint64_t)(v106 + 1) >> 61) {
            sub_21610CB04();
          }
          unint64_t v107 = (uint64_t)(*((void *)&v210 + 1) - *(void *)&__dst[24]) >> 2;
          if (v107 <= v106 + 1) {
            unint64_t v107 = v106 + 1;
          }
          if (*((void *)&v210 + 1) - *(void *)&__dst[24] >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v108 = v107;
          }
          if (v108) {
            uint64_t v109 = (char *)sub_2160FFAA8((uint64_t)&v210 + 8, v108);
          }
          else {
            uint64_t v109 = 0;
          }
          uint64_t v110 = &v109[8 * v106];
          *(void *)uint64_t v110 = v56;
          uint64_t v47 = (uint64_t)(v110 + 8);
          unint64_t v112 = *(char **)&__dst[24];
          CFArrayRef v111 = (char *)v210;
          if ((void)v210 != *(void *)&__dst[24])
          {
            do
            {
              uint64_t v113 = *((void *)v111 - 1);
              v111 -= 8;
              *((void *)v110 - 1) = v113;
              v110 -= 8;
            }
            while (v111 != v112);
            CFArrayRef v111 = *(char **)&__dst[24];
          }
          *(void *)&unsigned char __dst[24] = v110;
          *(void *)&long long v210 = v47;
          *((void *)&v210 + 1) = &v109[8 * v108];
          if (v111) {
            operator delete(v111);
          }
        }
        else
        {
          *(void *)long long v210 = v56;
          uint64_t v47 = v105 + 8;
        }
        *(void *)&long long v210 = v47;
        ++v55;
        if (++v54 == v202) {
          goto LABEL_187;
        }
      }
      if (*(void *)&prime >> 61) {
        sub_2160FFA74();
      }
      unint64_t v82 = operator new(8 * *(void *)&prime);
      unint64_t v83 = (void *)v6[21];
      v6[21] = v82;
      if (v83) {
        operator delete(v83);
      }
      uint64_t v84 = 0;
      v6[22] = prime;
      do
        *(void *)(v6[21] + 8 * v84++) = 0;
      while (*(void *)&prime != v84);
      int v85 = (void *)*v200;
      if (*v200)
      {
        unint64_t v86 = v85[1];
        uint8x8_t v87 = (uint8x8_t)vcnt_s8(prime);
        v87.i16[0] = vaddlv_u8(v87);
        if (v87.u32[0] > 1uLL)
        {
          if (v86 >= *(void *)&prime) {
            v86 %= *(void *)&prime;
          }
        }
        else
        {
          v86 &= *(void *)&prime - 1;
        }
        *(void *)(v6[21] + 8 * v86) = v200;
        int v91 = (void *)*v85;
        if (*v85)
        {
          do
          {
            unint64_t v92 = v91[1];
            if (v87.u32[0] > 1uLL)
            {
              if (v92 >= *(void *)&prime) {
                v92 %= *(void *)&prime;
              }
            }
            else
            {
              v92 &= *(void *)&prime - 1;
            }
            if (v92 != v86)
            {
              uint64_t v93 = v6[21];
              if (!*(void *)(v93 + 8 * v92))
              {
                *(void *)(v93 + 8 * v92) = v85;
                goto LABEL_118;
              }
              *int v85 = *v91;
              *int v91 = **(void **)(v6[21] + 8 * v92);
              **(void **)(v6[21] + 8 * v92) = v91;
              int v91 = v85;
            }
            unint64_t v92 = v86;
LABEL_118:
            int v85 = v91;
            int v91 = (void *)*v91;
            unint64_t v86 = v92;
          }
          while (v91);
        }
      }
      unint64_t v58 = (unint64_t)prime;
      goto LABEL_122;
    }
LABEL_187:
    unint64_t v115 = v6[6];
    if (v115 >= v6[7])
    {
      uint64_t v116 = sub_2162C0978((int64x2_t *)(v6 + 5), (long long *)__dst);
    }
    else
    {
      sub_2162C0B04((void *)v6[6], (long long *)__dst);
      uint64_t v116 = v115 + 48;
      v6[6] = v115 + 48;
    }
    v6[6] = v116;
    int32_t v117 = (long long *)v6[5];
    if (v117 == (long long *)v116)
    {
      uint64_t v118 = 0;
    }
    else
    {
      uint64_t v118 = 0;
      do
      {
        if (*((char *)v117 + 23) < 0)
        {
          sub_21610A674(__p, *(void **)v117, *((void *)v117 + 1));
        }
        else
        {
          long long v119 = *v117;
          *(void *)&__p[16] = *((void *)v117 + 2);
          *(_OWORD *)long long __p = v119;
        }
        long long v206 = 0;
        long long v207 = 0;
        uint64_t v208 = 0;
        sub_2162C08D8(&v206, *((const void **)v117 + 3), *((void *)v117 + 4), (uint64_t)(*((void *)v117 + 4) - *((void *)v117 + 3)) >> 3);
        UChar v120 = v206;
        int v121 = v207;
        if (v206)
        {
          long long v207 = v206;
          operator delete(v206);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        v118 += (v121 - v120) >> 3;
        v117 += 3;
      }
      while (v117 != (long long *)v116);
    }
    if (v118 != (uint64_t)(v6[19] - v6[18]) >> 3)
    {
      char v122 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
      sub_216129E78(v122, (uint64_t)"(", 1);
      uint64_t v123 = (void *)std::ostream::operator<<();
      unint64_t v124 = sub_216129E78(v123, (uint64_t)") [", 3);
      uint64_t v125 = sub_216129E78(v124, (uint64_t)"tokenCount == m_sortedUnigramTokenArray.size()", 46);
      uint64_t v126 = sub_216129E78(v125, (uint64_t)"] ", 2);
      sub_216129E78(v126, (uint64_t)"m_sortedUnigramTokenArray.size is not equal to the token count in m_unigramReadingAndTokensPairList.\n", 101);
      sub_21619FA48();
    }
    if (*(void *)&__dst[24])
    {
      *(void *)&long long v210 = *(void *)&__dst[24];
      operator delete(*(void **)&__dst[24]);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
  }
  uint64_t v127 = v6[5];
  uint64_t v128 = v6[6];
  if (v127 == v128)
  {
    unint64_t v129 = 0;
  }
  else
  {
    LODWORD(v129) = 0;
    uint64_t v130 = (void *)MEMORY[0x263F8C0F8];
    do
    {
      uint64_t v131 = (*(void *)(v127 + 32) - *(void *)(v127 + 24)) >> 3;
      if (v131 >= 0x100)
      {
        uint64_t v132 = sub_216129E78(v130, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
        sub_216129E78(v132, (uint64_t)"(", 1);
        double v133 = (void *)std::ostream::operator<<();
        double v134 = sub_216129E78(v133, (uint64_t)") [", 3);
        size_t v135 = sub_216129E78(v134, (uint64_t)"homographCount <= 0xff", 22);
        __int16 v136 = sub_216129E78(v135, (uint64_t)"] ", 2);
        sub_216129E78(v136, (uint64_t)"homographCount is greater than 0xff.\n", 37);
        sub_21619FA48();
      }
      if (BYTE3(v129))
      {
        uint64_t v137 = sub_216129E78(v130, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
        sub_216129E78(v137, (uint64_t)"(", 1);
        int v138 = (void *)std::ostream::operator<<();
        char v139 = sub_216129E78(v138, (uint64_t)") [", 3);
        char v140 = sub_216129E78(v139, (uint64_t)"tokenIndex <= 0x00ffffff", 24);
        char v141 = sub_216129E78(v140, (uint64_t)"] ", 2);
        sub_216129E78(v141, (uint64_t)"tokenIndex is greater than 0x00ffffff.\n", 39);
        sub_21619FA48();
      }
      sub_2162C032C((void *)v6[1], (long long *)v127, v131 + (v129 << 8));
      sub_2162C032C((void *)v6[11], (long long *)v127, 0);
      unint64_t v129 = v129 + ((*(void *)(v127 + 32) - *(void *)(v127 + 24)) >> 3);
      v127 += 48;
    }
    while (v127 != v128);
  }
  unint64_t v142 = v199;
  if (((*(uint64_t (**)(void))(*(void *)v6[11] + 16))(v6[11]) & 1) != 0
    && (*(unsigned int (**)(void))(*(void *)v6[1] + 16))(v6[1]))
  {
    sub_21617A878((uint64_t)(v6 + 12), v129);
    int v143 = (void *)v6[12];
    uint64_t v144 = v6[13] - (void)v143;
    if (v144) {
      bzero(v143, v144 & 0xFFFFFFFFFFFFFFFCLL);
    }
    uint64_t v145 = v6[5];
    uint64_t v146 = v6[6];
    if (v145 != v146)
    {
      int v147 = 0;
      do
      {
        int v148 = (*(uint64_t (**)(void, uint64_t))(*(void *)v6[11] + 24))(v6[11], v145);
        uint64_t v149 = *(void *)(v145 + 32) - *(void *)(v145 + 24);
        if (v149)
        {
          uint64_t v150 = v6[12];
          unsigned int v151 = 1;
          do
          {
            *(_DWORD *)(v150 + 4 * (v147 + v151 - 1)) = v148;
            BOOL v51 = v149 >> 3 > (unint64_t)v151++;
          }
          while (v51);
        }
        v147 += (unint64_t)v149 >> 3;
        v145 += 48;
      }
      while (v145 != v146);
      char v152 = (long long *)v6[5];
      for (uint64_t j = (long long *)v6[6]; v152 != j; v152 += 3)
      {
        if (*((char *)v152 + 23) < 0)
        {
          sub_21610A674(__dst, *(void **)v152, *((void *)v152 + 1));
        }
        else
        {
          long long v154 = *v152;
          *(void *)&__dst[16] = *((void *)v152 + 2);
          *(_OWORD *)char __dst = v154;
        }
        *(void *)&unsigned char __dst[24] = 0;
        long long v210 = 0uLL;
        sub_2162C08D8(&__dst[24], *((const void **)v152 + 3), *((void *)v152 + 4), (uint64_t)(*((void *)v152 + 4) - *((void *)v152 + 3)) >> 3);
        uint64_t v155 = *(char **)&__dst[24];
        uint64_t v156 = (char *)v210;
        if (*(void *)&__dst[24] != (void)v210)
        {
          do
          {
            if ((*(_DWORD *)(*(void *)v155 + 16) - 1) >= 2) {
              sub_2162C032C((void *)*v6, (long long *)(*(void *)v155 + 48), 0);
            }
            v155 += 8;
          }
          while (v155 != v156);
          uint64_t v155 = *(char **)&__dst[24];
        }
        if (v155)
        {
          *(void *)&long long v210 = v155;
          operator delete(v155);
        }
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
      }
    }
    if ((*(uint64_t (**)(void))(*(void *)*v6 + 16))())
    {
      int v157 = *((_DWORD *)v6 + 52);
      if (v157 != 5)
      {
        if (v157) {
          goto LABEL_249;
        }
      }
      uint64_t v158 = v6[13] - v6[12];
      if (v158)
      {
        if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFDLL) {
          sub_21610CB04();
        }
        uint64_t v159 = (char *)sub_216188754(v158 >> 2);
        __int16 v161 = &v159[8 * v160];
      }
      else
      {
        uint64_t v159 = 0;
        __int16 v161 = 0;
      }
      uint64_t v171 = v6[5];
      uint64_t v201 = v6[6];
      if (v171 == v201)
      {
        __int16 v173 = v159;
      }
      else
      {
        int v172 = 0;
        __int16 v173 = v159;
        do
        {
          uint64_t v174 = *(void *)(v171 + 32) - *(void *)(v171 + 24);
          unint64_t v203 = v174;
          if (v174)
          {
            uint64_t v175 = 0;
            unsigned int v176 = 0;
            unint64_t v177 = v174 >> 3;
            do
            {
              int v178 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 24))(*v6, *(void *)(*(void *)(v171 + 24) + 8 * v175) + 48);
              int v179 = v178;
              int v180 = v176 + v172;
              if (v173 >= v161)
              {
                uint64_t v181 = (v173 - v159) >> 3;
                unint64_t v182 = v181 + 1;
                if ((unint64_t)(v181 + 1) >> 61) {
                  sub_21610CB04();
                }
                if ((v161 - v159) >> 2 > v182) {
                  unint64_t v182 = (v161 - v159) >> 2;
                }
                if ((unint64_t)(v161 - v159) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v183 = v182;
                }
                int v184 = (char *)sub_216188754(v183);
                int v186 = &v184[8 * v181];
                *(_DWORD *)int v186 = v180;
                *((_DWORD *)v186 + 1) = v179;
                char v187 = v186;
                if (v173 == v159)
                {
                  int v6 = (void *)a1;
                }
                else
                {
                  int v6 = (void *)a1;
                  do
                  {
                    uint64_t v188 = *((void *)v173 - 1);
                    v173 -= 8;
                    *((void *)v187 - 1) = v188;
                    v187 -= 8;
                  }
                  while (v173 != v159);
                }
                __int16 v161 = &v184[8 * v185];
                __int16 v173 = v186 + 8;
                if (v159) {
                  operator delete(v159);
                }
                uint64_t v159 = v187;
              }
              else
              {
                *(_DWORD *)__int16 v173 = v180;
                *((_DWORD *)v173 + 1) = v178;
                v173 += 8;
              }
              uint64_t v175 = ++v176;
            }
            while (v177 > v176);
          }
          v172 += v203 >> 3;
          v171 += 48;
        }
        while (v171 != v201);
      }
      unint64_t v142 = v199;
      if (v173 - v159 < 1)
      {
LABEL_279:
        sub_2162C160C(v159, v173, (v173 - v159) >> 3, 0, 0);
      }
      else
      {
        __int16 v189 = (const std::nothrow_t *)MEMORY[0x263F8C180];
        unint64_t v190 = (v173 - v159) >> 3;
        while (1)
        {
          uint64_t v191 = (unsigned int *)operator new(8 * v190, v189);
          if (v191) {
            break;
          }
          BOOL v51 = v190 > 1;
          v190 >>= 1;
          if (!v51) {
            goto LABEL_279;
          }
        }
        int v192 = v191;
        sub_2162C160C(v159, v173, (v173 - v159) >> 3, v191, v190);
        operator delete(v192);
      }
      memset(__dst, 0, 24);
      if (v159 != v173)
      {
        __int16 v193 = v159;
        do
        {
          sub_21625401C((uint64_t *)__dst, *((_DWORD *)v193 + 1), *(_DWORD *)v193);
          v193 += 8;
        }
        while (v193 != v173);
      }
      sub_2162541F0((uint64_t *)__dst, (uint64_t *)__p);
      int v194 = *(void **)(a1 + 120);
      if (v194)
      {
        *(void *)(a1 + 128) = v194;
        operator delete(v194);
        *(void *)(a1 + 12sub_2161A108C(&a9, 0) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 0;
      }
      uint64_t v195 = *(void *)__p;
      *(void *)(a1 + 12sub_2161A108C(&a9, 0) = *(void *)__p;
      uint64_t v196 = *(void *)&__p[8];
      *(_OWORD *)(a1 + 128) = *(_OWORD *)&__p[8];
      uint64_t v197 = v196;
      *(void *)long long __p = __dst;
      sub_21613F444((void ***)__p);
      if (v159) {
        operator delete(v159);
      }
      BOOL v198 = v195 == v197;
      int v6 = (void *)a1;
      if (!v198)
      {
LABEL_249:
        __int16 v167 = *v142;
        uint64_t v168 = (*(uint64_t (**)(void))(*(void *)v6[1] + 32))(v6[1]);
        unsigned int v169 = (*(uint64_t (**)(void))(*(void *)v6[1] + 40))(v6[1]);
        sub_21628D460(0, 0, v168, v169);
        sub_2162F2A04(v167, v170);
      }
    }
    int v162 = (void *)MEMORY[0x263F8C0F8];
    unsigned int v163 = "Fails to build surface trie";
    uint64_t v164 = 27;
  }
  else
  {
    int v162 = (void *)MEMORY[0x263F8C0F8];
    unsigned int v163 = "Fails to build unigram reading trie";
    uint64_t v164 = 35;
  }
  int v165 = sub_216129E78(v162, (uint64_t)v163, v164);
  std::ios_base::getloc((const std::ios_base *)((char *)v165 + *(void *)(*v165 - 24)));
  __int16 v166 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v166->__vftable[2].~facet_0)(v166, 10);
  std::locale::~locale((std::locale *)__dst);
  std::ostream::put();
  std::ostream::flush();
  goto LABEL_249;
}

void sub_2162C0230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31)
{
  a15 = &a24;
  sub_21613F444((void ***)&a15);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_2162C032C(void *a1, long long *a2, int a3)
{
  char v5 = a1 + 1;
  unint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    uint64_t v7 = sub_2161BAB5C(v5, a2);
  }
  else
  {
    sub_216140550(v5, a2);
    uint64_t v7 = v6 + 24;
  }
  unint64_t v8 = a1[6];
  a1[2] = v7;
  uint64_t v9 = (char *)a1[5];
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = (char *)a1[4];
    uint64_t v12 = (v9 - v11) >> 2;
    if ((unint64_t)(v12 + 1) >> 62) {
      sub_21610CB04();
    }
    unint64_t v13 = v8 - (void)v11;
    unint64_t v14 = (uint64_t)(v8 - (void)v11) >> 1;
    if (v14 <= v12 + 1) {
      unint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      int v16 = (char *)sub_2161129B4((uint64_t)(a1 + 6), v15);
      uint64_t v11 = (char *)a1[4];
      uint64_t v9 = (char *)a1[5];
    }
    else
    {
      int v16 = 0;
    }
    uint64_t v17 = &v16[4 * v12];
    uint64_t v18 = &v16[4 * v15];
    *(_DWORD *)uint64_t v17 = a3;
    uint64_t v10 = v17 + 4;
    while (v9 != v11)
    {
      int v19 = *((_DWORD *)v9 - 1);
      v9 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    a1[4] = v17;
    a1[5] = v10;
    a1[6] = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v9 = a3;
    uint64_t v10 = v9 + 4;
  }
  a1[5] = v10;
}

uint64_t sub_2162C0434(uint64_t a1)
{
  *(_OWORD *)(a1 + 4sub_2161A108C(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26C6BF720;
  sub_2160F6FA0((_OWORD *)(a1 + 56));
  sub_2161055D0((void *)(a1 + 104));
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2161A108C(&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  return a1;
}

void sub_2162C04A8(_Unwind_Exception *a1)
{
  sub_2160F6FB0(v2);
  sub_2161B4A94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2162C04CC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF310;
  sub_2162C067C((void ****)(a1 + 56), 0);

  return sub_2161B4A94(a1);
}

void sub_2162C0524(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF310;
  sub_2162C067C((void ****)(a1 + 56), 0);
  sub_2161B4A94(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2162C0590()
{
}

void sub_2162C0600(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t sub_2162C0624()
{
  return 0;
}

uint64_t sub_2162C062C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 56);
  if (v1 && (uint64_t v2 = *v1) != 0) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t sub_2162C064C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 56);
  if (v1 && (uint64_t v2 = (_DWORD *)*v1) != 0) {
    return (v2[4] - v2[2] + v2[6]);
  }
  else {
    return 0;
  }
}

void ****sub_2162C067C(void ****result, void ***a2)
{
  uint64_t v2 = *result;
  const void *result = a2;
  if (v2)
  {
    if (*v2) {
      sub_21628D4F4(*v2);
    }
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2162C06E0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        if (*(v4 - 25) < 0) {
          operator delete(*((void **)v4 - 6));
        }
        v4 -= 48;
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2162C077C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_2162C0800(v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2162C0800(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *sub_2162C0858(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_21610ED94(a1, a2);
    unint64_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_2162C08BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162C08D8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      sub_21610CB04();
    }
    CFCharacterSetRef result = sub_2160FFAA8((uint64_t)(result + 2), a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      CFCharacterSetRef result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_2162C095C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162C0978(int64x2_t *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    sub_21610CB04();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  int v19 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_2160FFA74();
    }
    uint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v16 = v7;
  v17.i64[0] = (uint64_t)&v7[48 * v2];
  uint64_t v18 = &v7[48 * v6];
  sub_2162C0B04(v17.i64[0], a2);
  uint64_t v8 = v17.i64[0];
  uint64_t v9 = v17.i64[0] + 48;
  v17.i64[1] = v17.i64[0] + 48;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v13 = vdupq_n_s64(v10);
  }
  else
  {
    do
    {
      long long v12 = *(_OWORD *)(v10 - 48);
      *(void *)(v8 - 32) = *(void *)(v10 - 32);
      *(_OWORD *)(v8 - 48) = v12;
      *(void *)(v10 - 4sub_2161A108C(&a9, 0) = 0;
      *(void *)(v10 - 32) = 0;
      *(void *)(v10 - 48) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(v10 - 24);
      *(void *)(v8 - 8) = *(void *)(v10 - 8);
      v8 -= 48;
      *(void *)(v10 - 24) = 0;
      *(void *)(v10 - 16) = 0;
      *(void *)(v10 - 8) = 0;
      v10 -= 48;
    }
    while (v10 != v11);
    int64x2_t v13 = *a1;
    uint64_t v9 = v17.i64[1];
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v17 = v13;
  unint64_t v14 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v18;
  uint64_t v18 = v14;
  int v16 = (char *)v13.i64[0];
  sub_2162C0B8C((uint64_t)&v16);
  return v9;
}

void sub_2162C0AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162C0B8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2162C0B04(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21610A674(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)char __dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_2162C08D8(__dst + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  return __dst;
}

void sub_2162C0B70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162C0B8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_2162C0800(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2162C0BDC(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_216333204(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2162C0C2C(uint64_t result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = (void *)result;
    if (a3 == 2)
    {
      uint64_t result = sub_216179024((void *)(*((void *)a2 - 1) + 24), (void **)(*(void *)result + 24));
      if ((result & 0x80) != 0)
      {
        uint64_t v7 = *v6;
        *unint64_t v6 = *((void *)a2 - 1);
        *((void *)a2 - 1) = v7;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v18 = (char *)a4;
      unint64_t v19 = a3 >> 1;
      uint64_t v20 = (char *)(result + 8 * (a3 >> 1));
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_2162C0E9C(result, v20, v21, a4);
        uint64_t v22 = (uint64_t *)&v18[8 * v19];
        uint64_t result = sub_2162C0E9C((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v22);
        uint64_t v23 = &v18[8 * a3];
        uint64_t v24 = v22;
        while (v24 != (uint64_t *)v23)
        {
          uint64_t v25 = v24;
          uint64_t result = sub_216179024((void *)(*v24 + 24), (void **)(*(void *)v18 + 24));
          if ((result & 0x80u) != 0) {
            unint64_t v26 = (char *)v25;
          }
          else {
            unint64_t v26 = v18;
          }
          v18 += 8 * ((result & 0x80) == 0);
          uint64_t v24 = &v25[(result >> 7) & 1];
          *v6++ = *(void *)v26;
          if (v18 == (char *)v22)
          {
            if (v24 != (uint64_t *)v23)
            {
              uint64_t v27 = 0;
              if ((result & 0x80u) != 0) {
                char v28 = 1;
              }
              else {
                char v28 = 2;
              }
              BOOL v29 = &v25[v28 & 1];
              do
              {
                v6[v27] = v29[v27];
                ++v27;
              }
              while (&v29[v27] != (uint64_t *)v23);
            }
            return result;
          }
        }
        if (v18 != (char *)v22)
        {
          uint64_t v30 = 0;
          do
          {
            v6[v30] = *(void *)&v18[v30 * 8];
            ++v30;
          }
          while (&v18[v30 * 8] != (char *)v22);
        }
      }
      else
      {
        sub_2162C0C2C(result, v20, v21, a4, a5);
        sub_2162C0C2C(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v18, a5);
        return sub_2162C10BC((uint64_t)v6, (char *)&v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
      }
    }
    else if ((char *)result != a2)
    {
      uint64_t v9 = (void *)(result + 8);
      if ((char *)(result + 8) != a2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = (void *)result;
        do
        {
          uint64_t v12 = *v11;
          uint64_t v11 = v9;
          uint64_t result = sub_216179024((void *)(*v9 + 24), (void **)(v12 + 24));
          if ((result & 0x80) != 0)
          {
            uint64_t v13 = *v11;
            unint64_t v14 = (void *)(*v11 + 24);
            uint64_t v15 = v10;
            while (1)
            {
              *(void *)((char *)v6 + v15 + 8) = *(void *)((char *)v6 + v15);
              if (!v15) {
                break;
              }
              uint64_t result = sub_216179024(v14, (void **)(*(void *)((char *)v6 + v15 - 8) + 24));
              v15 -= 8;
              if ((result & 0x80) == 0)
              {
                int v16 = (void *)((char *)v6 + v15 + 8);
                goto LABEL_15;
              }
            }
            int v16 = v6;
LABEL_15:
            *int v16 = v13;
          }
          uint64_t v9 = v11 + 1;
          v10 += 8;
        }
        while (v11 + 1 != (void *)a2);
      }
    }
  }
  return result;
}

uint64_t sub_2162C0E9C(uint64_t result, char *a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    long long v4 = a4;
    unint64_t v6 = (char *)result;
    if (a3 == 1)
    {
LABEL_9:
      *long long v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = a2 - 8;
      uint64_t result = sub_216179024((void *)(*((void *)a2 - 1) + 24), (void **)(*(void *)result + 24));
      if ((result & 0x80u) == 0) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = v8;
      }
      *v4++ = *(void *)v9;
      if ((result & 0x80u) == 0) {
        unint64_t v6 = v8;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v18 = result + 8 * (a3 >> 1);
      sub_2162C0C2C(result, v18, a3 >> 1, a4, a3 >> 1);
      uint64_t result = sub_2162C0C2C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v19 = &v6[8 * (a3 >> 1)];
      while (v19 != a2)
      {
        uint64_t v20 = v19;
        uint64_t result = sub_216179024((void *)(*(void *)v19 + 24), (void **)(*(void *)v6 + 24));
        if ((result & 0x80u) != 0) {
          unint64_t v21 = v20;
        }
        else {
          unint64_t v21 = v6;
        }
        unint64_t v19 = &v20[8 * ((result >> 7) & 1)];
        v6 += 8 * ((result & 0x80) == 0);
        *v4++ = *(void *)v21;
        if (v6 == (char *)v18)
        {
          if (v19 != a2)
          {
            uint64_t v22 = 0;
            uint64_t v23 = &v20[((char)result >> 4) & 8];
            do
            {
              v4[v22] = *(void *)&v23[v22 * 8];
              ++v22;
            }
            while (&v23[v22 * 8] != a2);
          }
          return result;
        }
      }
      if (v6 != (char *)v18)
      {
        uint64_t v24 = 0;
        do
        {
          v4[v24] = *(void *)&v6[v24 * 8];
          ++v24;
        }
        while (&v6[v24 * 8] != (char *)v18);
      }
    }
    else if ((char *)result != a2)
    {
      uint64_t v10 = result + 8;
      *a4 = *(void *)result;
      if ((char *)(result + 8) != a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a4;
        do
        {
          uint64_t v13 = v12;
          uint64_t v14 = *v12++;
          uint64_t result = sub_216179024((void *)(*(void *)v10 + 24), (void **)(v14 + 24));
          uint64_t v15 = v12;
          if ((result & 0x80) != 0)
          {
            v13[1] = *v13;
            uint64_t v15 = v4;
            if (v13 != v4)
            {
              uint64_t v17 = v11;
              while (1)
              {
                uint64_t v15 = (uint64_t *)((char *)v4 + v17);
                uint64_t result = sub_216179024((void *)(*(void *)v10 + 24), (void **)(*(uint64_t *)((char *)v4 + v17 - 8) + 24));
                if ((result & 0x80) == 0) {
                  break;
                }
                *uint64_t v15 = *(v15 - 1);
                v17 -= 8;
                if (!v17)
                {
                  uint64_t v15 = v4;
                  break;
                }
              }
            }
          }
          uint64_t v16 = *(void *)v10;
          v10 += 8;
          *uint64_t v15 = v16;
          v11 += 8;
        }
        while ((char *)v10 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_2162C10BC(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    uint64_t v13 = (char *)result;
    while (a4 > a7 && v9 > a7)
    {
      if (!a4) {
        return result;
      }
      unint64_t v14 = 0;
      uint64_t v15 = -a4;
      while (1)
      {
        uint64_t result = sub_216179024((void *)(*(void *)a2 + 24), (void **)(*(void *)&v13[v14] + 24));
        if ((result & 0x80) != 0) {
          break;
        }
        v14 += 8;
        if (__CFADD__(v15++, 1)) {
          return result;
        }
      }
      uint64_t v17 = -v15;
      uint64_t v81 = &v13[v14];
      __src = a6;
      unint64_t v83 = a3;
      if (-v15 >= v9)
      {
        if (v15 == -1)
        {
          uint64_t v74 = *(void *)&v13[v14];
          *(void *)&v13[v14] = *(void *)a2;
          *(void *)a2 = v74;
          return result;
        }
        if (v15 > 0) {
          uint64_t v17 = 1 - v15;
        }
        uint64_t v26 = v17 >> 1;
        unint64_t v21 = &v13[8 * (v17 >> 1) + v14];
        uint64_t v27 = a3;
        uint64_t v20 = a2;
        if (a2 != v27)
        {
          uint64_t v77 = v26;
          unint64_t v28 = (v83 - a2) >> 3;
          uint64_t v20 = a2;
          do
          {
            BOOL v29 = &v20[8 * (v28 >> 1)];
            uint64_t v31 = *(void *)v29;
            uint64_t v30 = v29 + 8;
            int v32 = (char)sub_216179024((void *)(v31 + 24), (void **)(*(void *)v21 + 24));
            if (v32 >= 0) {
              v28 >>= 1;
            }
            else {
              v28 += ~(v28 >> 1);
            }
            if (v32 < 0) {
              uint64_t v20 = v30;
            }
          }
          while (v28);
          uint64_t v26 = v77;
        }
        uint64_t v19 = (v20 - a2) >> 3;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v18 = v9;
        }
        else {
          uint64_t v18 = v9 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = &a2[8 * (v18 >> 1)];
        unint64_t v21 = a2;
        if (a2 - v13 != v14)
        {
          uint64_t v76 = v18 >> 1;
          uint64_t v78 = a7;
          unint64_t v22 = (uint64_t)(a2 - v13 - v14) >> 3;
          unint64_t v21 = &v13[v14];
          do
          {
            uint64_t v23 = &v21[8 * (v22 >> 1)];
            uint64_t v25 = *(void *)v23;
            uint64_t v24 = v23 + 8;
            if ((sub_216179024((void *)(*(void *)v20 + 24), (void **)(v25 + 24)) & 0x80u) != 0)
            {
              v22 >>= 1;
            }
            else
            {
              unint64_t v21 = v24;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          a7 = v78;
          uint64_t v19 = v76;
        }
        uint64_t v26 = (uint64_t)(v21 - v13 - v14) >> 3;
      }
      if (v21 == a2)
      {
        a2 = v20;
      }
      else
      {
        uint64_t v33 = v20 - a2;
        if (v20 == a2)
        {
          a2 = v21;
        }
        else
        {
          unint64_t v34 = v21 + 8;
          if (v21 + 8 == a2)
          {
            uint64_t v79 = a7;
            uint64_t v39 = *(void *)v21;
            unint64_t v40 = a2;
            size_t v41 = v20 - a2;
            uint64_t v42 = v26;
            uint64_t v43 = v19;
            memmove(v21, v40, v41);
            uint64_t v19 = v43;
            uint64_t v26 = v42;
            a2 = &v21[v33];
            *(void *)&v21[v33] = v39;
            a7 = v79;
          }
          else
          {
            uint64_t v35 = a2 + 8;
            if (a2 + 8 == v20)
            {
              uint64_t v44 = *((void *)v20 - 1);
              a2 = v21 + 8;
              if (v20 - 8 != v21)
              {
                uint64_t v45 = v26;
                uint64_t v46 = v19;
                uint64_t v80 = *((void *)v20 - 1);
                memmove(v21 + 8, v21, v20 - 8 - v21);
                uint64_t v44 = v80;
                uint64_t v19 = v46;
                uint64_t v26 = v45;
              }
              *(void *)unint64_t v21 = v44;
            }
            else
            {
              uint64_t v36 = (a2 - v21) >> 3;
              if (v36 == v33 >> 3)
              {
                do
                {
                  uint64_t v37 = *((void *)v34 - 1);
                  *((void *)v34 - 1) = *((void *)v35 - 1);
                  *((void *)v35 - 1) = v37;
                  if (v34 == a2) {
                    break;
                  }
                  v34 += 8;
                  BOOL v38 = v35 == v20;
                  v35 += 8;
                }
                while (!v38);
              }
              else
              {
                uint64_t v47 = v33 >> 3;
                uint64_t v48 = (a2 - v21) >> 3;
                do
                {
                  uint64_t v49 = v48;
                  uint64_t v48 = v47;
                  uint64_t v47 = v49 % v47;
                }
                while (v47);
                if (v48)
                {
                  uint64_t v50 = &v21[8 * v48];
                  do
                  {
                    uint64_t v52 = *((void *)v50 - 1);
                    v50 -= 8;
                    uint64_t v51 = v52;
                    uint64_t v53 = &v50[8 * v36];
                    CFRange v54 = v50;
                    do
                    {
                      int v55 = v53;
                      *(void *)CFRange v54 = *(void *)v53;
                      uint64_t v56 = &v53[8 * v36];
                      BOOL v57 = __OFSUB__(v36, (v20 - v53) >> 3);
                      uint64_t v59 = v36 - ((v20 - v53) >> 3);
                      char v58 = (v59 < 0) ^ v57;
                      uint64_t v53 = &v21[8 * v59];
                      if (v58) {
                        uint64_t v53 = v56;
                      }
                      CFRange v54 = v55;
                    }
                    while (v53 != v50);
                    *(void *)int v55 = v51;
                  }
                  while (v50 != v21);
                }
                a2 = &v21[8 * (v33 >> 3)];
              }
            }
          }
        }
      }
      a4 = -v26 - v15;
      uint64_t v60 = v9 - v19;
      if (v26 + v19 >= v9 - (v26 + v19) - v15)
      {
        uint64_t v62 = a7;
        uint64_t v63 = a2;
        unint64_t v64 = v20;
        uint64_t v65 = v26;
        uint64_t v66 = v19;
        uint64_t result = sub_2162C10BC(a2, v64, v83, -v26 - v15, v60, __src, v62);
        a2 = v21;
        a6 = __src;
        uint64_t v60 = v66;
        a4 = v65;
        a3 = v63;
        a7 = v62;
        uint64_t v13 = v81;
      }
      else
      {
        unint64_t v61 = v21;
        a6 = __src;
        uint64_t result = sub_2162C10BC(&v13[v14], v61, a2, v26, v19, __src, a7);
        uint64_t v13 = a2;
        a2 = v20;
        a3 = v83;
      }
      uint64_t v9 = v60;
      if (!v60) {
        return result;
      }
    }
    if (a4 <= v9)
    {
      if (v13 != a2)
      {
        unint64_t v71 = 0;
        do
        {
          *(void *)&a6[v71] = *(void *)&v13[v71];
          v71 += 8;
        }
        while (&v13[v71] != a2);
        if (v71)
        {
          uint64_t v72 = a6;
          while (a2 != a3)
          {
            uint64_t result = sub_216179024((void *)(*(void *)a2 + 24), (void **)(*(void *)v72 + 24));
            if ((result & 0x80u) != 0) {
              size_t v73 = a2;
            }
            else {
              size_t v73 = v72;
            }
            a2 += 8 * ((result >> 7) & 1);
            v72 += 8 * ((result & 0x80) == 0);
            *(void *)uint64_t v13 = *(void *)v73;
            v13 += 8;
            if (&a6[v71] == v72) {
              return result;
            }
          }
          return (uint64_t)memmove(v13, v72, a6 - v72 + v71);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v67 = 0;
      do
      {
        *(void *)&a6[v67] = *(void *)&a2[v67];
        v67 += 8;
      }
      while (&a2[v67] != a3);
      if (v67)
      {
        unint64_t v68 = &a6[v67];
        int v69 = a3 - 8;
        while (a2 != v13)
        {
          uint64_t result = sub_216179024((void *)(*((void *)v68 - 1) + 24), (void **)(*((void *)a2 - 1) + 24));
          if ((result & 0x80u) == 0) {
            unint64_t v70 = v68;
          }
          else {
            unint64_t v70 = a2;
          }
          if ((result & 0x80u) == 0) {
            v68 -= 8;
          }
          else {
            a2 -= 8;
          }
          *(void *)int v69 = *((void *)v70 - 1);
          v69 -= 8;
          if (v68 == a6) {
            return result;
          }
        }
        uint64_t v75 = 0;
        do
        {
          *(void *)&v69[v75] = *(void *)&v68[v75 - 8];
          v75 -= 8;
        }
        while (&v68[v75] != a6);
      }
    }
  }
  return result;
}

char *sub_2162C160C(char *result, char *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = result;
    if (a3 == 2)
    {
      unsigned int v7 = *((_DWORD *)a2 - 2);
      int v8 = *(_DWORD *)result;
      char v9 = -1;
      if (v7 >= *(_DWORD *)result) {
        char v9 = 1;
      }
      if (v7 == v8)
      {
        unsigned int v10 = *((_DWORD *)a2 - 1);
        unsigned int v11 = *((_DWORD *)result + 1);
        BOOL v12 = v10 >= v11;
        BOOL v13 = v10 == v11;
        char v9 = -1;
        if (v12) {
          char v9 = 1;
        }
        if (v13) {
          char v9 = 0;
        }
      }
      if (v9 < 0)
      {
        *(_DWORD *)uint64_t result = v7;
        *((_DWORD *)a2 - 2) = v8;
        int v14 = *((_DWORD *)result + 1);
        *((_DWORD *)result + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v14;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (result != a2)
      {
        unint64_t v21 = (unsigned int *)(result + 8);
        if (result + 8 != a2)
        {
          uint64_t v22 = 0;
          uint64_t v23 = result;
          do
          {
            uint64_t v24 = v21;
            unsigned int v25 = *v21;
            unsigned int v26 = *(_DWORD *)v23;
            BOOL v27 = v25 == *(_DWORD *)v23;
            if (v25 >= *(_DWORD *)v23) {
              char v28 = 1;
            }
            else {
              char v28 = -1;
            }
            if (v27)
            {
              unsigned int v29 = *((_DWORD *)v23 + 3);
              unsigned int v30 = *((_DWORD *)v23 + 1);
              BOOL v31 = v29 == v30;
              if (v29 >= v30) {
                char v32 = 1;
              }
              else {
                char v32 = -1;
              }
              if (v31) {
                char v28 = 0;
              }
              else {
                char v28 = v32;
              }
            }
            if (v28 < 0)
            {
              unsigned int v33 = *v24;
              unsigned int v34 = v24[1];
              uint64_t v35 = v22;
              while (1)
              {
                uint64_t v36 = &result[v35];
                int v37 = *(_DWORD *)&result[v35 + 4];
                *((_DWORD *)v36 + 2) = v26;
                *((_DWORD *)v36 + 3) = v37;
                if (!v35) {
                  break;
                }
                unsigned int v26 = *((_DWORD *)v36 - 2);
                if (v26 <= v33) {
                  char v38 = 1;
                }
                else {
                  char v38 = -1;
                }
                if (v26 == v33)
                {
                  unsigned int v39 = *(_DWORD *)&result[v35 - 4];
                  BOOL v40 = v39 == v34;
                  char v38 = v39 <= v34 ? 1 : -1;
                  if (v40) {
                    char v38 = 0;
                  }
                }
                v35 -= 8;
                if ((v38 & 0x80) == 0)
                {
                  size_t v41 = &result[v35 + 8];
                  goto LABEL_48;
                }
              }
              size_t v41 = result;
LABEL_48:
              *(_DWORD *)size_t v41 = v33;
              *((_DWORD *)v41 + 1) = v34;
            }
            unint64_t v21 = v24 + 2;
            v22 += 8;
            uint64_t v23 = (char *)v24;
          }
          while (v24 + 2 != (unsigned int *)a2);
        }
      }
    }
    else
    {
      uint64_t v17 = a4;
      unint64_t v18 = a3 >> 1;
      uint64_t v19 = &result[8 * (a3 >> 1)];
      unint64_t v20 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_2162C18F8(result, v19, v20, a4);
        uint64_t v42 = &v17[2 * v18];
        uint64_t result = sub_2162C18F8(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v42);
        uint64_t v43 = &v17[2 * a3];
        uint64_t v44 = v42;
        while (v44 != v43)
        {
          unsigned int v45 = *v44;
          if (*v44 >= *v17) {
            char v46 = 1;
          }
          else {
            char v46 = -1;
          }
          if (v45 == *v17)
          {
            unsigned int v47 = v44[1];
            unsigned int v48 = v17[1];
            BOOL v49 = v47 == v48;
            char v46 = v47 >= v48 ? 1 : -1;
            if (v49) {
              char v46 = 0;
            }
          }
          if (v46 < 0)
          {
            uint64_t v50 = v44;
          }
          else
          {
            unsigned int v45 = *v17;
            uint64_t v50 = v17;
          }
          if (v46 < 0) {
            v44 += 2;
          }
          else {
            v17 += 2;
          }
          *(_DWORD *)unint64_t v6 = v45;
          *((_DWORD *)v6 + 1) = v50[1];
          v6 += 8;
          if (v17 == v42)
          {
            if (v44 != v43)
            {
              uint64_t v51 = 0;
              do
              {
                uint64_t v52 = &v44[v51];
                uint64_t v53 = &v6[v51 * 4];
                *(_DWORD *)uint64_t v53 = v44[v51];
                *((_DWORD *)v53 + 1) = v44[v51 + 1];
                v51 += 2;
              }
              while (v52 + 2 != v43);
            }
            return result;
          }
        }
        if (v17 != v42)
        {
          uint64_t v54 = 0;
          do
          {
            int v55 = &v17[v54];
            uint64_t v56 = &v6[v54 * 4];
            *(_DWORD *)uint64_t v56 = v17[v54];
            *((_DWORD *)v56 + 1) = v17[v54 + 1];
            v54 += 2;
          }
          while (v55 + 2 != v42);
        }
      }
      else
      {
        sub_2162C160C(result, v19, v20, a4, a5);
        sub_2162C160C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v17, a5);
        return sub_2162C1B98(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (char *)v17, a5);
      }
    }
  }
  return result;
}

char *sub_2162C18F8(char *result, char *a2, unint64_t a3, unsigned int *a4)
{
  if (a3)
  {
    long long v4 = a4;
    unint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_19:
      *(void *)long long v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      unsigned int v8 = *((_DWORD *)a2 - 2);
      BOOL v9 = v8 == *(_DWORD *)result;
      if (v8 >= *(_DWORD *)result) {
        char v10 = 1;
      }
      else {
        char v10 = -1;
      }
      if (v9)
      {
        unsigned int v11 = *((_DWORD *)a2 - 1);
        unsigned int v12 = *((_DWORD *)result + 1);
        BOOL v13 = v11 >= v12;
        BOOL v14 = v11 == v12;
        char v10 = -1;
        if (v13) {
          char v10 = 1;
        }
        if (v14) {
          char v10 = 0;
        }
      }
      BOOL v15 = (v10 & 0x80) == 0;
      if (v10 < 0) {
        uint64_t v16 = a2 - 8;
      }
      else {
        uint64_t v16 = result;
      }
      *(void *)a4 = *(void *)v16;
      long long v4 = a4 + 2;
      if (v15) {
        unint64_t v6 = a2 - 8;
      }
      goto LABEL_19;
    }
    if ((uint64_t)a3 > 8)
    {
      int v37 = &result[8 * (a3 >> 1)];
      sub_2162C160C(result, v37, a3 >> 1, a4, a3 >> 1);
      uint64_t result = (char *)sub_2162C160C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
      char v38 = &v6[8 * (a3 >> 1)];
      while (v38 != a2)
      {
        unsigned int v39 = v38;
        if (*(_DWORD *)v38 >= *(_DWORD *)v6) {
          unint64_t v40 = 1;
        }
        else {
          unint64_t v40 = 255;
        }
        if (*(_DWORD *)v38 == *(_DWORD *)v6)
        {
          unsigned int v41 = *((_DWORD *)v38 + 1);
          unsigned int v42 = *((_DWORD *)v6 + 1);
          BOOL v43 = v41 == v42;
          unint64_t v40 = v41 >= v42 ? 1 : 255;
          if (v43) {
            unint64_t v40 = 0;
          }
        }
        unint64_t v44 = v40 & 0x80;
        if ((v40 & 0x80) != 0) {
          unsigned int v45 = v39;
        }
        else {
          unsigned int v45 = v6;
        }
        char v38 = &v39[v44 >> 4];
        v6 += (v44 >> 4) ^ 8;
        *(void *)long long v4 = *(void *)v45;
        v4 += 2;
        if (v6 == v37)
        {
          if (v38 != a2)
          {
            uint64_t v46 = 0;
            unsigned int v47 = &v39[(v40 >> 4) & 8];
            do
            {
              *(void *)&v4[v46] = *(void *)&v47[v46 * 4];
              v46 += 2;
            }
            while (&v47[v46 * 4] != a2);
          }
          return result;
        }
      }
      if (v6 != v37)
      {
        unint64_t v48 = 0;
        do
        {
          *(void *)&v4[v48] = *(void *)&v6[v48 * 4];
          v48 += 2;
        }
        while (&v6[v48 * 4] != v37);
      }
    }
    else if (result != a2)
    {
      uint64_t v17 = (unsigned int *)(result + 8);
      *(void *)a4 = *(void *)result;
      if (result + 8 != a2)
      {
        uint64_t v18 = 0;
        uint64_t v19 = a4;
        unint64_t v20 = a4;
        do
        {
          unint64_t v21 = v17;
          unsigned int v22 = *v20;
          v20 += 2;
          BOOL v23 = *v17 == v22;
          if (*v17 >= v22) {
            char v24 = 1;
          }
          else {
            char v24 = -1;
          }
          if (v23)
          {
            unsigned int v25 = *((_DWORD *)v6 + 3);
            unsigned int v26 = v19[1];
            BOOL v27 = v25 == v26;
            char v24 = v25 >= v26 ? 1 : -1;
            if (v27) {
              char v24 = 0;
            }
          }
          if (v24 < 0)
          {
            *((void *)v19 + 1) = *(void *)v19;
            char v28 = a4;
            if (v19 != a4)
            {
              uint64_t v29 = v18;
              while (1)
              {
                unsigned int v30 = *(unsigned int *)((char *)a4 + v29 - 8);
                if (*v21 >= v30) {
                  char v31 = 1;
                }
                else {
                  char v31 = -1;
                }
                if (*v21 == v30)
                {
                  unsigned int v32 = *((_DWORD *)v6 + 3);
                  unsigned int v33 = *(unsigned int *)((char *)a4 + v29 - 4);
                  BOOL v34 = v32 == v33;
                  char v31 = v32 >= v33 ? 1 : -1;
                  if (v34) {
                    char v31 = 0;
                  }
                }
                if ((v31 & 0x80) == 0) {
                  break;
                }
                uint64_t v35 = (unsigned int *)((char *)a4 + v29);
                unsigned int v36 = *(unsigned int *)((char *)a4 + v29 - 4);
                unsigned int *v35 = v30;
                v35[1] = v36;
                v29 -= 8;
                if (!v29)
                {
                  char v28 = a4;
                  goto LABEL_52;
                }
              }
              char v28 = (unsigned int *)((char *)a4 + v29);
            }
LABEL_52:
            *char v28 = *v21;
            v28[1] = *((_DWORD *)v6 + 3);
          }
          else
          {
            *(void *)unint64_t v20 = *(void *)v21;
          }
          uint64_t v17 = v21 + 2;
          v18 += 8;
          uint64_t v19 = v20;
          unint64_t v6 = (char *)v21;
        }
        while (v21 + 2 != (unsigned int *)a2);
      }
    }
  }
  return result;
}

char *sub_2162C1B98(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v10 = 0;
      unsigned int v11 = *(_DWORD *)a2;
      uint64_t v12 = -a4;
      while (1)
      {
        unsigned int v13 = *(_DWORD *)&result[v10];
        if (v11 >= v13) {
          char v14 = 1;
        }
        else {
          char v14 = -1;
        }
        if (v11 == v13)
        {
          unsigned int v15 = *((_DWORD *)a2 + 1);
          unsigned int v16 = *(_DWORD *)&result[v10 + 4];
          BOOL v17 = v15 == v16;
          char v14 = v15 >= v16 ? 1 : -1;
          if (v17) {
            char v14 = 0;
          }
        }
        if (v14 < 0) {
          break;
        }
        v10 += 8;
        if (__CFADD__(v12++, 1)) {
          return result;
        }
      }
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          uint64_t v77 = &result[v10];
          *(_DWORD *)uint64_t v77 = v11;
          *(_DWORD *)a2 = v13;
          int v78 = *((_DWORD *)v77 + 1);
          *((_DWORD *)v77 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v78;
          return result;
        }
        if (v12 <= 0) {
          uint64_t v33 = -v12;
        }
        else {
          uint64_t v33 = 1 - v12;
        }
        uint64_t v32 = v33 >> 1;
        unsigned int v22 = &result[8 * (v33 >> 1) + v10];
        unint64_t v21 = a2;
        if (a2 != a3)
        {
          unsigned int v34 = *(_DWORD *)v22;
          unsigned int v35 = *((_DWORD *)v22 + 1);
          unint64_t v36 = (a3 - a2) >> 3;
          unint64_t v21 = a2;
          do
          {
            unint64_t v37 = v36 >> 1;
            char v38 = &v21[8 * (v36 >> 1)];
            if (*(_DWORD *)v38 >= v34) {
              char v39 = 1;
            }
            else {
              char v39 = -1;
            }
            if (*(_DWORD *)v38 == v34)
            {
              unsigned int v40 = *((_DWORD *)v38 + 1);
              BOOL v41 = v40 == v35;
              char v39 = v40 >= v35 ? 1 : -1;
              if (v41) {
                char v39 = 0;
              }
            }
            unsigned int v42 = v38 + 8;
            v36 += ~v37;
            if (v39 < 0) {
              unint64_t v21 = v42;
            }
            else {
              unint64_t v36 = v37;
            }
          }
          while (v36);
        }
        uint64_t v20 = (v21 - a2) >> 3;
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v19 = a5;
        }
        else {
          uint64_t v19 = a5 + 1;
        }
        uint64_t v20 = v19 >> 1;
        unint64_t v21 = &a2[8 * (v19 >> 1)];
        unsigned int v22 = a2;
        if (a2 - result != v10)
        {
          unsigned int v23 = *(_DWORD *)v21;
          unsigned int v24 = *((_DWORD *)v21 + 1);
          unint64_t v25 = (a2 - result - v10) >> 3;
          unsigned int v22 = &result[v10];
          do
          {
            unint64_t v26 = v25 >> 1;
            BOOL v27 = &v22[8 * (v25 >> 1)];
            if (*(_DWORD *)v27 <= v23) {
              char v28 = 1;
            }
            else {
              char v28 = -1;
            }
            if (*(_DWORD *)v27 == v23)
            {
              unsigned int v29 = *((_DWORD *)v27 + 1);
              BOOL v30 = v29 == v24;
              char v28 = v29 <= v24 ? 1 : -1;
              if (v30) {
                char v28 = 0;
              }
            }
            char v31 = v27 + 8;
            v25 += ~v26;
            if (v28 < 0) {
              unint64_t v25 = v26;
            }
            else {
              unsigned int v22 = v31;
            }
          }
          while (v25);
        }
        uint64_t v32 = (v22 - result - v10) >> 3;
      }
      if (v22 == a2)
      {
        unsigned int v45 = v21;
      }
      else if (v21 == a2)
      {
        unsigned int v45 = v22;
      }
      else
      {
        unsigned int v43 = *(_DWORD *)v22;
        *(_DWORD *)unsigned int v22 = v11;
        *(_DWORD *)a2 = v43;
        int v44 = *((_DWORD *)v22 + 1);
        *((_DWORD *)v22 + 1) = *((_DWORD *)a2 + 1);
        *((_DWORD *)a2 + 1) = v44;
        unsigned int v45 = v22 + 8;
        for (uint64_t i = a2 + 8; i != v21; i += 8)
        {
          if (v45 == a2) {
            a2 = i;
          }
          int v47 = *(_DWORD *)v45;
          *(_DWORD *)unsigned int v45 = *(_DWORD *)i;
          *(_DWORD *)uint64_t i = v47;
          int v48 = *((_DWORD *)v45 + 1);
          *((_DWORD *)v45 + 1) = *((_DWORD *)i + 1);
          *((_DWORD *)i + 1) = v48;
          v45 += 8;
        }
        if (v45 != a2)
        {
          BOOL v49 = v45;
          uint64_t v50 = a2;
          do
          {
            while (1)
            {
              int v51 = *(_DWORD *)v49;
              *(_DWORD *)BOOL v49 = *(_DWORD *)v50;
              *(_DWORD *)uint64_t v50 = v51;
              int v52 = *((_DWORD *)v49 + 1);
              *((_DWORD *)v49 + 1) = *((_DWORD *)v50 + 1);
              *((_DWORD *)v50 + 1) = v52;
              v49 += 8;
              v50 += 8;
              if (v50 == v21) {
                break;
              }
              if (v49 == a2) {
                a2 = v50;
              }
            }
            uint64_t v50 = a2;
          }
          while (v49 != a2);
        }
      }
      a4 = -v32 - v12;
      uint64_t v53 = a5 - v20;
      if (v32 + v20 >= a5 - (v32 + v20) - v12)
      {
        uint64_t v56 = v21;
        BOOL v57 = &result[v10];
        sub_2162C1B98(v45, v56, a3, a4, a5 - v20, a6, a7);
        uint64_t result = v57;
        a2 = v22;
        uint64_t v53 = v20;
        a4 = v32;
        a3 = v45;
      }
      else
      {
        uint64_t v54 = v22;
        int v55 = a3;
        sub_2162C1B98(&result[v10], v54, v45, v32, v20, a6, a7);
        a3 = v55;
        uint64_t result = v45;
        a2 = v21;
      }
      a5 = v53;
      if (!v53) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        uint64_t v68 = 0;
        do
        {
          *(void *)&a6[v68] = *(void *)&result[v68];
          v68 += 8;
        }
        while (&result[v68] != a2);
        if (v68)
        {
          int v69 = &a6[v68];
          uint64_t v70 = (uint64_t)&a6[v68 - 8];
          while (a2 != a3)
          {
            unsigned int v71 = *(_DWORD *)a2;
            if (*(_DWORD *)a2 >= *(_DWORD *)a6) {
              char v72 = 1;
            }
            else {
              char v72 = -1;
            }
            if (v71 == *(_DWORD *)a6)
            {
              unsigned int v73 = *((_DWORD *)a2 + 1);
              unsigned int v74 = *((_DWORD *)a6 + 1);
              BOOL v75 = v73 == v74;
              char v72 = v73 >= v74 ? 1 : -1;
              if (v75) {
                char v72 = 0;
              }
            }
            if (v72 < 0)
            {
              uint64_t v76 = a2;
            }
            else
            {
              unsigned int v71 = *(_DWORD *)a6;
              uint64_t v76 = a6;
            }
            if (v72 < 0) {
              a2 += 8;
            }
            else {
              a6 += 8;
            }
            *(_DWORD *)uint64_t result = v71;
            *((_DWORD *)result + 1) = *((_DWORD *)v76 + 1);
            result += 8;
            if (v69 == a6) {
              return result;
            }
          }
          uint64_t v81 = 0;
          do
          {
            unint64_t v82 = &result[v81];
            unint64_t v83 = &a6[v81];
            *(_DWORD *)unint64_t v82 = *(_DWORD *)&a6[v81];
            *((_DWORD *)v82 + 1) = *(_DWORD *)&a6[v81 + 4];
            v81 += 8;
          }
          while ((char *)v70 != v83);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v58 = 0;
      do
      {
        *(void *)&a6[v58] = *(void *)&a2[v58];
        v58 += 8;
      }
      while (&a2[v58] != a3);
      if (v58)
      {
        uint64_t v59 = &a6[v58];
        uint64_t v60 = a3 - 4;
        while (a2 != result)
        {
          unsigned int v61 = *((_DWORD *)a2 - 2);
          unsigned int v62 = *((_DWORD *)v59 - 2);
          if (v62 >= v61) {
            char v63 = 1;
          }
          else {
            char v63 = -1;
          }
          if (v62 == v61)
          {
            unsigned int v64 = *((_DWORD *)v59 - 1);
            unsigned int v65 = *((_DWORD *)a2 - 1);
            BOOL v66 = v64 == v65;
            char v63 = v64 >= v65 ? 1 : -1;
            if (v66) {
              char v63 = 0;
            }
          }
          if (v63 < 0)
          {
            uint64_t v67 = a2;
          }
          else
          {
            unsigned int v61 = *((_DWORD *)v59 - 2);
            uint64_t v67 = v59;
          }
          if (v63 < 0) {
            a2 -= 8;
          }
          else {
            v59 -= 8;
          }
          *((_DWORD *)v60 - 1) = v61;
          *(_DWORD *)uint64_t v60 = *((_DWORD *)v67 - 1);
          v60 -= 8;
          if (v59 == a6) {
            return result;
          }
        }
        unint64_t v79 = 0;
        do
        {
          uint64_t v80 = &v60[v79];
          *((_DWORD *)v80 - 1) = *(_DWORD *)&v59[v79 - 8];
          *(_DWORD *)uint64_t v80 = *(_DWORD *)&v59[v79 - 4];
          v79 -= 8;
        }
        while (&v59[v79] != a6);
      }
    }
  }
  return result;
}

uint64_t sub_2162C207C(int a1, __CFDictionary *a2, void *lpsrc, char a4)
{
  if (!lpsrc) {
    return 0;
  }
  unint64_t v6 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BA018, 0);
  uint64_t result = 0;
  if (v6 && (a4 & 1) == 0)
  {
    if (((*(uint64_t (**)(_DWORD *))(*(void *)v6 + 88))(v6) & 1) == 0
      && ((*(uint64_t (**)(_DWORD *))(*(void *)v6 + 80))(v6) & 1) == 0
      && !*((unsigned char *)v6 + 224)
      && ((*(uint64_t (**)(_DWORD *))(*(void *)v6 + 176))(v6) & 1) == 0)
    {
      unsigned int v8 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 96))(v6) - 65;
      if (v8 >= 0x1A || ((0x2848453u >> v8) & 1) == 0)
      {
        BOOL v9 = (const void **)MEMORY[0x263EFFB40];
        if ((v6[48] & 0x80000000) == 0)
        {
          uint64_t v10 = (const void *)*MEMORY[0x263EFFB40];
          CFDictionaryAddValue(a2, @"candidateWithStaticLMProb", (const void *)*MEMORY[0x263EFFB40]);
          int v11 = v6[48];
          if (v11)
          {
            if (v11 > 3)
            {
LABEL_20:
              unsigned int v12 = v6[49];
              if ((v12 & 0x80000000) != 0) {
                return 1;
              }
              unsigned int v13 = *v9;
              if (v12)
              {
                if (v12 > 3) {
                  goto LABEL_26;
                }
              }
              else
              {
                CFDictionaryAddValue(a2, @"candidateWithTop1HybridCost", *v9);
              }
              CFDictionaryAddValue(a2, @"candidateWithTop4HybridCost", v13);
LABEL_26:
              CFDictionaryAddValue(a2, @"candidateWithHybridCost", v13);
              return 1;
            }
          }
          else
          {
            CFDictionaryAddValue(a2, @"candidateWithTop1StaticLMProb", v10);
          }
          CFDictionaryAddValue(a2, @"candidateWithTop4StaticLMProb", v10);
          goto LABEL_20;
        }
        if ((v6[49] & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
    }
    return 0;
  }
  return result;
}

void sub_2162C22CC()
{
}

void *sub_2162C22E0(void *a1)
{
  *a1 = &unk_26C6BDB88;
  unint64_t v2 = a1 + 1;
  sub_216246008(a1 + 7);
  sub_2162C29C4(v2);
  return a1;
}

void sub_2162C2334(void *a1)
{
  *a1 = &unk_26C6BDB88;
  uint64_t v1 = a1 + 1;
  sub_216246008(a1 + 7);
  sub_2162C29C4(v1);

  JUMPOUT(0x2166CA800);
}

void sub_2162C23A8(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4] - a1[3];
  unint64_t v3 = v2 >> 3;
  if ((unint64_t)v2 >= 0x10 && v3 > a2)
  {
    unint64_t v5 = a2;
    unint64_t v6 = a1 + 1;
    do
      sub_2162C2D50(v6, v5++);
    while (v3 != v5);
  }
}

uint64_t sub_2162C2404(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  unint64_t v6 = (const void **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v7 = a1 + 64;
  *(void *)a1 = &unk_26C6C6388;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)(a1 + 32) = 16;
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = 0;
  if (a2 >= 0x258)
  {
    BOOL v30 = (const void **)(a1 + 56);
    uint64_t v12 = *(void *)(a5 + 72);
    if (v12) {
      uint64_t v13 = *(void *)(*(void *)(v12 + 8) + 32);
    }
    else {
      uint64_t v13 = 0;
    }
    if (sub_2162F0E50(v13, a2))
    {
      char v14 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a2);
      sub_2161868BC(v6, v14);
      *(_DWORD *)(a1 + 4sub_2161A108C(&a9, 0) = 14;
    }
    else
    {
      uint64_t v15 = sub_21629E77C(a4, a2);
      if (v15 && (*(_WORD *)(v15 + 4) & 0x800) == 0)
      {
        CFStringRef v16 = sub_21629E658(a4, a2);
        sub_2161868BC(v6, v16);
      }
    }
    CFStringRef v17 = (const __CFString *)*v6;
    if (*v6)
    {
      int v18 = sub_2161E2834(*(_DWORD *)a5);
      CFStringRef v19 = (const __CFString *)sub_216367844(v17, v18);
      CFStringRef v20 = v19;
      CFStringRef v35 = v19;
      if (v19)
      {
        CFArrayRef v21 = sub_2161E4E50(v19, *(_DWORD *)a5 == 5);
        CFArrayRef v34 = v21;
        if (v21)
        {
          CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
          uint64_t v33 = Mutable;
          CFIndex Count = CFArrayGetCount(v21);
          sub_21610FC8C(__p, Count);
          if (Count >= 1)
          {
            for (CFIndex i = 0; i != Count; ++i)
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v21, i);
              CFStringAppend(Mutable, ValueAtIndex);
              __int16 Length = CFStringGetLength(ValueAtIndex);
              *((_WORD *)__p[0] + i) = Length;
            }
          }
          sub_216195954(v30, Mutable);
          BOOL v27 = *(void **)v7;
          if (*(void *)v7)
          {
            *(void *)(a1 + 72) = v27;
            operator delete(v27);
            *(void *)uint64_t v7 = 0;
            *(void *)(v7 + 8) = 0;
            *(void *)(v7 + 16) = 0;
          }
          *(_OWORD *)(a1 + 64) = *(_OWORD *)__p;
          *(void *)(a1 + 8sub_2161A108C(&a9, 0) = v32;
          __p[1] = 0;
          uint64_t v32 = 0;
          __p[0] = 0;
          if (*(void *)(a1 + 56))
          {
            CFIndex v28 = CFStringGetLength((CFStringRef)*v6);
            *(void *)(a1 + 16) = a3;
            *(void *)(a1 + 24) = v28;
            *(unsigned char *)(a1 + 88) = 1;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          CFRelease(v21);
        }
        CFRelease(v20);
      }
    }
  }
  return a1;
}

void sub_2162C2698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, void *__p, uint64_t a12, uint64_t a13, const void *a14, const void *a15, const void *a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2161B5B5C(&a14, 0);
  sub_216195B94(&a15, 0);
  sub_2161868BC(&a16, 0);
  CFStringRef v20 = *v18;
  if (*v18)
  {
    *(void *)(v16 + 72) = v20;
    operator delete(v20);
  }
  sub_2161868BC(a10, 0);
  sub_2161868BC(v17, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162C2738(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C59C0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)a1 = &unk_26C6C6388;
  CFStringRef v6 = *(const __CFString **)(a2 + 48);
  uint64_t v7 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (v6) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v6);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 48) = Copy;
  CFStringRef v9 = *(const __CFString **)(a2 + 56);
  if (v9) {
    CFStringRef v10 = CFStringCreateCopy(*v7, v9);
  }
  else {
    CFStringRef v10 = 0;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2161A108C(&a9, 0) = 0;
  sub_216182F50((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 1);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

void sub_2162C2824(_Unwind_Exception *a1)
{
  sub_2161868BC((const void **)(v1 + 48), 0);
  _Unwind_Resume(a1);
}

void sub_2162C2854(uint64_t a1)
{
  sub_2162C28D4(a1);

  JUMPOUT(0x2166CA800);
}

CFStringRef sub_2162C288C(uint64_t a1)
{
  CFStringRef result = *(const __CFString **)(a1 + 56);
  if (result) {
    LOWORD(result) = CFStringGetLength(result);
  }
  return (const __CFString *)(unsigned __int16)result;
}

void *sub_2162C28B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_216182F50(a2, *(const void **)(a1 + 64), *(void *)(a1 + 72), (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 1);
}

uint64_t sub_2162C28CC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_2162C28D4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C6388;
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  sub_2161868BC((const void **)(a1 + 56), 0);
  sub_2161868BC((const void **)(a1 + 48), 0);
  return a1;
}

void sub_2162C293C(void *a1, uint64_t a2)
{
  *a1 = &unk_26C6BD140;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  operator new[]();
}

void sub_2162C29A4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = v2;
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162C29C4(void *a1)
{
  *a1 = &unk_26C6BD140;
  sub_2162C2A3C((uint64_t)a1, 0);
  uint64_t v2 = a1[5];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  }
  unint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_2162C2A3C(uint64_t result, unint64_t a2)
{
  unint64_t v3 = (void *)result;
  uint64_t v5 = *(void *)(result + 16);
  uint64_t v4 = *(void *)(result + 24);
  for (unint64_t i = (v4 - v5) >> 3; i > a2; unint64_t i = (v4 - v5) >> 3)
  {
    CFStringRef result = *(void *)(v5 + 8 * i - 8);
    if (result)
    {
      uint64_t v7 = sub_21618B4F0(result);
      CFStringRef result = MEMORY[0x2166CA800](v7, 0x80C407D3415B1);
      uint64_t v5 = v3[2];
      uint64_t v4 = v3[3];
    }
    v4 -= 8;
    v3[3] = v4;
  }
  if (!a2)
  {
    unsigned int v8 = *(uint64_t **)(*(void *)(v3[1] + 72) + 8);
    return sub_21628CD70(v8);
  }
  return result;
}

void sub_2162C2AE4(void *a1)
{
  sub_2162C29C4(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2162C2B1C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (*(void *)(a1 + 24) - v3) >> 3;
  if (v4 >= a3)
  {
    if (v4 == a3) {
      operator new();
    }
    uint64_t v5 = *(void ***)(v3 + 8 * a3);
    sub_2162C2C78(v5, a2);
  }
}

void sub_2162C2C78(void **a1, uint64_t a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_2162462AC();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_2160FFAA8(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)char v14 = a2;
    unsigned int v8 = v14 + 8;
    CFStringRef v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    unsigned int v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_2162C2D50(void *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t ***)a1[2];
  if (a2 < (uint64_t)(a1[3] - (void)v2) >> 3)
  {
    if (a2 > 1) {
      goto LABEL_7;
    }
    if ((*v2)[4] == (*v2)[3]) {
      sub_2162C2DF0((uint64_t)a1, *(void *)(*(void *)(*(void *)(a1[1] + 72) + 8) + 8), *v2);
    }
    if (a2)
    {
      uint64_t v2 = (uint64_t ***)a1[2];
LABEL_7:
      unint64_t v5 = v2[a2 - 1];
      unint64_t v6 = v5[3];
      uint64_t v7 = v5[4];
      while (v6 != v7)
      {
        uint64_t v8 = *v6++;
        sub_2162C2DF0((uint64_t)a1, v8, *(uint64_t ***)(a1[2] + 8 * a2));
      }
    }
  }
}

void sub_2162C2DF0(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (LMLexiconCursorHasChildren())
  {
    unint64_t v5 = *a3;
    unint64_t v6 = a3[1];
    while (v5 != v6)
    {
      uint64_t v7 = *v5;
      CFStringRef v8 = *(const __CFString **)(*v5 + 8);
      v10.CFIndex length = CFStringGetLength(v8);
      v10.locatiouint64_t n = 0;
      CFStringGetCharacters(v8, v10, *(UniChar **)(a1 + 40));
      CFStringGetLength(*(CFStringRef *)(v7 + 8));
      uint64_t CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      if (CursorByAdvancingWithCharacters) {
        sub_2162C2EC0(a3, CursorByAdvancingWithCharacters);
      }
      ++v5;
    }
  }
}

void sub_2162C2EC0(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[5];
  uint64_t v4 = (uint64_t)(a1 + 5);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_2161BA9E4();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_2160FFAA8(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    CFStringRef v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = a2;
    CFStringRef v8 = v16 + 8;
    CFStringRef v19 = (char *)a1[3];
    uint64_t v18 = (char *)a1[4];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    a1[3] = v16;
    a1[4] = v8;
    a1[5] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    CFStringRef v8 = v7 + 1;
  }
  a1[4] = v8;
}

uint64_t sub_2162C2F9C(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (a2 < (*(void *)(result + 24) - v3) >> 3)
  {
    char v13 = 0;
    uint64_t v4 = *(void *)(v3 + 8 * a2);
    unint64_t v5 = *(uint64_t **)(v4 + 24);
    unint64_t v6 = *(uint64_t **)(v4 + 32);
    if (v5 != v6)
    {
      uint64_t v8 = result;
      do
      {
        uint64_t v9 = *v5;
        CFStringRef result = LMLexiconCursorHasEntries();
        if (result)
        {
          uint64_t v10 = LMLexiconCursorTraversedLength();
          LMLexiconCursorGetTraversedCharacters();
          if (v9)
          {
            if (**(void **)(*(void *)(*(void *)(v8 + 8) + 72) + 8)) {
              LMLexiconCursorFirstTokenID();
            }
          }
          uint64_t v11 = *(void *)(v8 + 40);
          LMLanguageModelConditionalProbability();
          CFStringRef result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a3 + 16))(a3, v11, v10, (int)(v12 * -1000000.0), &v13);
          if (v13) {
            break;
          }
        }
        ++v5;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t sub_2162C30F0(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (a2 < (*(void *)(result + 24) - v3) >> 3)
  {
    char v9 = 0;
    uint64_t v4 = *(void **)(v3 + 8 * a2);
    uint64_t v5 = v4[1];
    if (*v4 != v5)
    {
      uint64_t v7 = *v4 + 8;
      do
      {
        CFStringRef result = (*(uint64_t (**)(uint64_t, void, char *))(a3 + 16))(a3, *(void *)(v7 - 8), &v9);
        if (v9) {
          BOOL v8 = 1;
        }
        else {
          BOOL v8 = v7 == v5;
        }
        v7 += 8;
      }
      while (!v8);
    }
  }
  return result;
}

void sub_2162C3174(uint64_t a1)
{
  uint64_t v2 = sub_2162769A4();
  sub_2162C3204(a1, __p);
  if (v11 >= 0) {
    BOOL v8 = __p;
  }
  else {
    BOOL v8 = (void **)__p[0];
  }
  sub_216276FA0((uint64_t)v2, 0x80000u, (uint64_t)v8, v3, v4, v5, v6, v7, v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2162C31E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162C3204@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_216140140((uint64_t)v38);
  uint64_t v3 = *(uint64_t ***)(a1 + 16);
  unint64_t v36 = *(uint64_t ***)(a1 + 24);
  if (v3 != v36)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v6 = *v3;
      sub_216129E78(&v39, (uint64_t)"------------Characters at pos ", 30);
      uint64_t v7 = (void *)std::ostream::operator<<();
      sub_216129E78(v7, (uint64_t)", ", 2);
      BOOL v8 = (void *)std::ostream::operator<<();
      uint64_t v9 = sub_216129E78(v8, (uint64_t)" characters --------------- ", 28);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      uint64_t v10 = std::locale::use_facet(&v43, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v11 = *v6;
      uint64_t v12 = v6[1];
      while (v11 != v12)
      {
        sub_2161E2FFC(*(const __CFString **)(*(void *)v11 + 8), &v43);
        locale = v43.__locale_;
        size_t v14 = strlen((const char *)v43.__locale_);
        uint64_t v15 = sub_216129E78(&v39, (uint64_t)v43.__locale_, v14);
        sub_216129E78(v15, (uint64_t)", ", 2);
        if (locale) {
          MEMORY[0x2166CA7C0](locale, 0x1000C8077774924);
        }
        v11 += 8;
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v40[-1] + *(void *)(v39 - 24)));
      uint64_t v16 = (std::locale::id *)MEMORY[0x263F8C108];
      CFStringRef v17 = std::locale::use_facet(&v43, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
      std::ostream::flush();
      sub_216129E78(&v39, (uint64_t)"------------words at pos ", 25);
      uint64_t v18 = (void *)std::ostream::operator<<();
      sub_216129E78(v18, (uint64_t)", ", 2);
      CFStringRef v19 = (void *)std::ostream::operator<<();
      uint64_t v20 = sub_216129E78(v19, (uint64_t)" cursors --------------- ", 25);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      CFArrayRef v21 = std::locale::use_facet(&v43, v16);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
      std::ostream::flush();
      unint64_t v37 = v3;
      unsigned int v23 = (uint64_t *)v6[3];
      unsigned int v22 = (uint64_t *)v6[4];
      while (v23 != v22)
      {
        uint64_t v24 = *v23;
        if (LMLexiconCursorHasEntries())
        {
          CFIndex v25 = LMLexiconCursorTraversedLength();
          LMLexiconCursorGetTraversedCharacters();
          CFStringRef v26 = CFStringCreateWithCharacters(0, *(const UniChar **)(a1 + 40), v25);
          sub_2161E2FFC(v26, &v43);
          BOOL v27 = v43.__locale_;
          size_t v28 = strlen((const char *)v43.__locale_);
          unsigned int v29 = sub_216129E78(&v39, (uint64_t)v43.__locale_, v28);
          sub_216129E78(v29, (uint64_t)"(", 1);
          if (v24 && **(void **)(*(void *)(*(void *)(a1 + 8) + 72) + 8)) {
            LMLexiconCursorFirstTokenID();
          }
          LMLanguageModelConditionalProbability();
          BOOL v30 = (void *)std::ostream::operator<<();
          sub_216129E78(v30, (uint64_t)"),", 2);
          CFRelease(v26);
          if (v27) {
            MEMORY[0x2166CA7C0](v27, 0x1000C8077774924);
          }
        }
        ++v23;
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v40[-1] + *(void *)(v39 - 24)));
      uint64_t v5 = (std::locale::id *)MEMORY[0x263F8C108];
      char v31 = std::locale::use_facet(&v43, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
      std::ostream::flush();
      ++v4;
      uint64_t v3 = v37 + 1;
    }
    while (v37 + 1 != v36);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v40[-1] + *(void *)(v39 - 24)));
  uint64_t v32 = std::locale::use_facet(&v43, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale(&v43);
  std::ostream::put();
  std::ostream::flush();
  sub_216178BC0((uint64_t)v40, a2);
  v38[0] = *MEMORY[0x263F8C2B8];
  uint64_t v33 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v38 + *(void *)(v38[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v39 = v33;
  v40[0] = MEMORY[0x263F8C318] + 16;
  if (v41 < 0) {
    operator delete((void *)v40[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166CA750](&v42);
}

void sub_2162C3878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::locale::~locale((std::locale *)(v4 - 112));
  sub_216140418((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2162C38F0()
{
}

void sub_2162C3908(void *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = &unk_26C6BF3D0;
  operator new();
}

void sub_2162C3EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_2161C99FC(v21);
  uint64_t v23 = *(void *)(v20 + 8);
  *(void *)(v20 + 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2162C3FCC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 168))(&v3);
  return sub_216159D74(&v3);
}

void sub_2162C4034(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2162C4050@<X0>(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 144))(&v40);
  if (!v40)
  {
    BOOL v30 = *(_DWORD **)a4;
    if (*(void *)a4 != *(void *)(a4 + 8)) {
      goto LABEL_35;
    }
  }
  int v8 = a2[23];
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *(char **)a2;
  }
  if (v8 >= 0) {
    uint64_t v10 = a2[23];
  }
  else {
    uint64_t v10 = *((void *)a2 + 1);
  }
  sub_2161BC294(v9, v10, (uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v12 = size + 2;
  char v13 = *(_DWORD **)a4;
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = v14 - *(void *)a4;
  unint64_t v16 = v15 >> 2;
  if (size + 2 > v15 >> 2)
  {
    uint64_t v17 = *(void *)(a4 + 16);
    if (v12 - v16 > (v17 - v14) >> 2)
    {
      int v38 = a3;
      if (v12 >> 62) {
        sub_21610CB04();
      }
      uint64_t v18 = v17 - (void)v13;
      uint64_t v19 = v18 >> 1;
      if (v18 >> 1 <= v12) {
        uint64_t v19 = size + 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      CFArrayRef v21 = (char *)sub_2161129B4(a4 + 16, v20);
      uint64_t v23 = v22;
      uint64_t v24 = &v21[4 * v16];
      bzero(v24, ((4 * size - v15 + 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      CFIndex v25 = &v21[4 * v23];
      CFStringRef v26 = *(_DWORD **)a4;
      BOOL v27 = *(_DWORD **)(a4 + 8);
      if (v27 == *(_DWORD **)a4)
      {
        a3 = v38;
      }
      else
      {
        a3 = v38;
        do
        {
          int v28 = *--v27;
          *((_DWORD *)v24 - 1) = v28;
          v24 -= 4;
        }
        while (v27 != v26);
      }
      *(void *)a4 = v24;
      *(void *)(a4 + 8) = &v21[4 * v12];
      *(void *)(a4 + 16) = v25;
      if (v26) {
        operator delete(v26);
      }
      goto LABEL_32;
    }
    bzero(*(void **)(a4 + 8), ((4 * size - v15 + 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    unsigned int v29 = (_DWORD *)(v14 + 4 * (v12 - v16));
    goto LABEL_28;
  }
  if (v12 < v16)
  {
    unsigned int v29 = &v13[v12];
LABEL_28:
    *(void *)(a4 + 8) = v29;
  }
LABEL_32:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(*(void *)(a4 + 8) - 4) = *(_DWORD *)(a1 + 52);
  BOOL v30 = *(_DWORD **)a4;
LABEL_35:
  *BOOL v30 = a3;
  char v31 = sub_2162D1CE4(7u);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v32 = sub_2162D1CE4(7u);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      int v34 = a2[23];
      CFStringRef v35 = *(char **)a2;
      sub_2162C43B0(a4, " ", 1uLL, &__p);
      if (v34 >= 0) {
        unint64_t v36 = (uint64_t *)a2;
      }
      else {
        unint64_t v36 = (uint64_t *)v35;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v42 = v36;
      __int16 v43 = 2080;
      int v44 = p_p;
      _os_log_debug_impl(&dword_2160F5000, v32, OS_LOG_TYPE_DEBUG, "[SentencePiece tokens] input = [%s]: ids = [%s]", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return sub_216159D74(&v40);
}

void sub_2162C4360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216159D74(&a17);
  uint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_2162C43B0(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, std::string::size_type a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v5 = *(int **)a1;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    sub_21610B834(a4, "");
  }
  else
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__wordUChar s[2] = 0;
    std::to_string(&v14, *v5);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v14;
    }
    else {
      uint64_t v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    std::string::append(a4, (const std::string::value_type *)v9, size);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (*(void *)(a1 + 8) - *(void *)a1 >= 5uLL)
    {
      unint64_t v11 = 1;
      do
      {
        std::string::append(a4, a2, a3);
        std::to_string(&v14, *(_DWORD *)(*(void *)a1 + 4 * v11));
        if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v12 = &v14;
        }
        else {
          unint64_t v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
        }
        if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v13 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v13 = v14.__r_.__value_.__l.__size_;
        }
        std::string::append(a4, (const std::string::value_type *)v12, v13);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        ++v11;
      }
      while (v11 < (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
    }
  }
}

void sub_2162C44F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162C4538(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  ((void (*)(void **__return_ptr))(*a1)[4])(&__p);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*a1[1] + 144))(&v11);
  sub_216159D74(&v11);
  uint64_t v4 = sub_2162D1CE4(7u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = sub_2162D1CE4(7u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v6 = v13;
      uint64_t v7 = (void **)__p;
      sub_2162C43B0((uint64_t)a2, " ", 1uLL, &v10);
      p_p = &__p;
      if (v6 < 0) {
        p_p = v7;
      }
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = &v10;
      }
      else {
        uint64_t v9 = (std::string *)v10.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v15 = p_p;
      __int16 v16 = 2080;
      uint64_t v17 = v9;
      _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "Context: input = [%s]: ids = [%s]", buf, 0x16u);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v13 < 0) {
    operator delete(__p);
  }
}

void sub_2162C46F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  CFArrayRef v21 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v21;
    operator delete(v21);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162C4734(_DWORD *a1, unsigned int a2)
{
  return a2 < 3
      || a1[14] == a2
      || a1[15] == a2
      || a1[16] == a2
      || a1[17] == a2
      || a1[18] == a2
      || a1[19] == a2
      || a1[20] == a2;
}

void sub_2162C479C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__wordUChar s[2] = 0;
    std::string::reserve(a4, 3 * a3);
    if (a3 != -1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      BOOL v10 = *a2 != 32;
      while (1)
      {
        BOOL v11 = v10;
        if (v8 != a3) {
          BOOL v11 = a2[v8] == 32;
        }
        if (v10 && v11) {
          break;
        }
        if (!v10 && !v11)
        {
          while (v8 != v9)
          {
            std::string::push_back(a4, 32);
            ++v9;
          }
          BOOL v10 = 1;
          goto LABEL_33;
        }
LABEL_34:
        if (v8++ == a3) {
          return;
        }
      }
      int v12 = a2[v9];
      unsigned int v13 = v12 - 48;
      unsigned int v14 = (unsigned __int16)(v12 + 240);
      if (v13 >= 0xA && v14 > 9)
      {
        uint64_t v24 = 0;
        long long v22 = 0u;
        long long v23 = 0u;
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 40))(__p, a1);
        if ((v26 & 0x80u) == 0) {
          uint64_t v19 = __p;
        }
        else {
          uint64_t v19 = (void **)__p[0];
        }
        if ((v26 & 0x80u) == 0) {
          std::string::size_type v20 = v26;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)__p[1];
        }
        std::string::append(a4, (const std::string::value_type *)v19, v20);
        if (((char)v26 & 0x80000000) == 0) {
          goto LABEL_31;
        }
        uint64_t v18 = __p[0];
      }
      else
      {
        (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v22, a1);
        if ((SBYTE7(v23) & 0x80u) == 0) {
          __int16 v16 = (const std::string::value_type *)&v22;
        }
        else {
          __int16 v16 = (const std::string::value_type *)v22;
        }
        if ((SBYTE7(v23) & 0x80u) == 0) {
          std::string::size_type v17 = BYTE7(v23);
        }
        else {
          std::string::size_type v17 = *((void *)&v22 + 1);
        }
        std::string::append(a4, v16, v17);
        if ((SBYTE7(v23) & 0x80000000) == 0) {
          goto LABEL_31;
        }
        uint64_t v18 = (void *)v22;
      }
      operator delete(v18);
LABEL_31:
      BOOL v10 = 0;
LABEL_33:
      uint64_t v9 = v8;
      goto LABEL_34;
    }
  }
  else
  {
    sub_21610B834(a4, "");
  }
}

void sub_2162C49B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162C4A04(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v6 = a2 + 32;
  uint64_t v7 = v8;
  if (*(char *)(v6 + 23) < 0)
  {
    uint64_t v9 = *(void *)(v6 + 8);
  }
  else
  {
    uint64_t v7 = v6;
    uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
  }
  BOOL v11 = (unsigned __int16 *)sub_2162B73AC(v5, v7, v9);

  sub_2162C479C(a1, v11, v10, a3);
}

void sub_2162C4A7C(uint64_t a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__wordUChar s[2] = 0;
  std::string::reserve(a3, 3 * a2);
  if (v3)
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    for (uint64_t i = v3; i != v5; v3 = i)
    {
      uint64_t v7 = 0;
      int v8 = *(unsigned __int16 *)(a1 + 2 * v5);
      BOOL v10 = (v8 - 48) < 0xA || (unsigned __int16)(v8 + 240) < 0xAu;
      while ((unsigned __int16)word_2163CAE3A[v7] != v8)
      {
        if (++v7 == 13)
        {
          BOOL v11 = 0;
          goto LABEL_13;
        }
      }
      BOOL v11 = &word_2163CAE3A[v7];
LABEL_13:
      uint64_t v12 = 0;
      if (v11) {
        uint64_t v13 = v11 - word_2163CAE3A;
      }
      else {
        uint64_t v13 = -1;
      }
      while ((unsigned __int16)asc_21638C864[v12] != v8)
      {
        if (++v12 == 32)
        {
          unsigned int v14 = 0;
          goto LABEL_20;
        }
      }
      unsigned int v14 = &asc_21638C864[v12];
LABEL_20:
      uint64_t v15 = 0;
      if (v14) {
        BOOL v16 = (char *)v14 - (char *)asc_21638C864 == -2;
      }
      else {
        BOOL v16 = 1;
      }
      int v17 = !v16;
      while ((unsigned __int16)word_21638C8A6[v15] != v8)
      {
        if (++v15 == 37)
        {
          uint64_t v18 = 0;
          goto LABEL_30;
        }
      }
      uint64_t v18 = &word_21638C8A6[v15];
LABEL_30:
      if (v18) {
        BOOL v19 = (char *)v18 - (char *)word_21638C8A6 == -2;
      }
      else {
        BOOL v19 = 1;
      }
      int v20 = !v19;
      CFArrayRef v21 = (const char *)&unk_2163CAE36;
      if (v8 != 65292) {
        CFArrayRef v21 = 0;
      }
      BOOL v22 = v8 == 44;
      BOOL v23 = v8 == 44 || v8 == 65292;
      if (v22) {
        uint64_t v24 = ",";
      }
      else {
        uint64_t v24 = v21;
      }
      BOOL v25 = v24 - "," != -2 && v23;
      int v26 = v13 != -1 || v10;
      if ((v17 | v25 | v26 | v20) != 1) {
        goto LABEL_64;
      }
      if (v5 > v6)
      {
        unint64_t v27 = a1 ? v5 - v6 : 0;
        sub_2161E30A8((void *)(a1 + 2 * v6), v27, &__p);
        int v28 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        std::string::size_type v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::string::append(a3, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      unint64_t v6 = v5 + 1;
      if (!v25)
      {
LABEL_64:
        if (v10) {
          std::string::append(a3, "0", 1uLL);
        }
        if (v13 == -1)
        {
          if (v17) {
            std::string::append(a3, "xSYMx", 5uLL);
          }
        }
        else
        {
          std::string::size_type v30 = strlen(off_26426E540[v13]);
          std::string::append(a3, off_26426E540[v13], v30);
        }
      }
      ++v5;
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  if (a1) {
    unint64_t v31 = v3 - v6;
  }
  else {
    unint64_t v31 = 0;
  }
  sub_2161E30A8((void *)(a1 + 2 * v6), v31, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a3, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2162C4D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a11 + 23) < 0) {
    operator delete(*(void **)a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162C4D8C(unsigned __int16 *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  memset(&v27, 0, sizeof(v27));
  std::string::reserve(&v27, 3 * a2);
  if (a2)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    int v8 = a1;
    while (1)
    {
      int v9 = *v8;
      if (v9 != 44)
      {
        unsigned int v10 = v9 - 48;
        unsigned int v11 = (unsigned __int16)(v9 + 240);
        if (v10 >= 0xA && v11 > 9)
        {
          if (!v6)
          {
            sub_2161E30A8(a1, a2, (std::string *)a3);
            goto LABEL_41;
          }
          if (v7 >= 4) {
            unsigned int v7 = 4;
          }
          uint64_t v13 = (const char *)*((void *)&off_26426E5A8 + v7);
          sub_2161E30A8(v8, 1uLL, &v24);
          std::string::size_type v14 = strlen(v13);
          uint64_t v15 = std::string::insert(&v24, 0, v13, v14);
          long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          int64_t v26 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__wordUChar s[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (v26 >= 0) {
            int v17 = __p;
          }
          else {
            int v17 = (void **)__p[0];
          }
          if (v26 >= 0) {
            std::string::size_type v18 = HIBYTE(v26);
          }
          else {
            std::string::size_type v18 = (std::string::size_type)__p[1];
          }
          std::string::append(&v27, (const std::string::value_type *)v17, v18);
          if (SHIBYTE(v26) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
          unsigned int v7 = 0;
        }
        else
        {
          ++v7;
        }
      }
      ++v6;
      ++v8;
      if (a2 == v6) {
        goto LABEL_26;
      }
    }
  }
  unsigned int v7 = 0;
LABEL_26:
  if (v7 >= 4) {
    unsigned int v7 = 4;
  }
  BOOL v19 = (const char *)*((void *)&off_26426E5A8 + v7);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  size_t v21 = strlen(v19);
  sub_21612A88C(a3, size + v21);
  if (*(char *)(a3 + 23) < 0) {
    a3 = *(void *)a3;
  }
  if (size)
  {
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v22 = &v27;
    }
    else {
      BOOL v22 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    memmove((void *)a3, v22, size);
  }
  BOOL v23 = (void *)(a3 + size);
  if (v21) {
    memmove(v23, v19, v21);
  }
  *((unsigned char *)v23 + v21) = 0;
LABEL_41:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_2162C4FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162C4FFC(void *a1)
{
  sub_2161C9988(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2162C5038()
{
}

void *sub_2162C504C()
{
  CFStringRef result = operator new(0x10uLL);
  void *result = &unk_26C6C7728;
  return result;
}

void sub_2162C5084(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C7728;
}

uint64_t sub_2162C50AC(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t sub_2162C50B4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC750)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162C50F4()
{
  return &unk_26C6BC750;
}

uint64_t sub_2162C5100@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (a3)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void *))(*(void *)a2 + 120))(&v8, a2, a1);
    sub_2162100D0(a4, &v8);
    unint64_t v5 = v9;
    int v9 = 0;
    if (v5)
    {
      uint64_t v6 = sub_21620FE6C(v5);
      MEMORY[0x2166CA800](v6, 0x20C4093837F09);
    }
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result) {
      return MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
    }
  }
  else
  {
    return sub_2162100D0(a4, a1);
  }
  return result;
}

void sub_2162C51D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_2162C51EC(int a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 216))(v6);
      if (result)
      {
        unsigned int v7 = (const void *)*MEMORY[0x263EFFB40];
        CFDictionaryAddValue(a2, @"englishCandidateAccepted", (const void *)*MEMORY[0x263EFFB40]);
        if ((*(unsigned int (**)(void *))(*(void *)lpsrc + 96))(lpsrc) == 71) {
          CFDictionaryAddValue(a2, @"englishLexiconCandidateAccepted", v7);
        }
        uint64_t valuePtr = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 464))(v6);
        CFNumberRef v8 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
        CFDictionaryAddValue(a2, @"acceptedEnglishCandidateLength", v8);
        if (v8) {
          CFRelease(v8);
        }
        return 1;
      }
    }
  }
  return result;
}

void sub_2162C5390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_2162C53AC()
{
}

uint64_t sub_2162C53C0(unsigned __int16 *a1, uint64_t a2, UChar *a3, int a4)
{
  *a3 = 0;
  int v14 = 0;
  if (a2)
  {
    int v7 = 0;
    uint64_t v8 = 2 * a2 - 2;
    do
    {
      int v9 = *a1;
      LODWORD(src) = v7;
      if ((sub_2162C54C8(&v14, &src, v9, a4) & 1) == 0) {
        return 0;
      }
      int v7 = (int)src;
      int v14 = (int)src;
      ++a1;
      if (src >> 24) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v8 == 0;
      }
      v8 -= 2;
    }
    while (!v10);
    uint64_t result = 0;
    if ((~src & 0xFF0000) != 0 && src <= 4u && ((unsigned __int16)src & 0xFF00) != 0xFF00)
    {
      if (!(src >> 24)) {
        return v7;
      }
      src = 0;
      int v12 = sub_2162C5850((unsigned __int8 *)&v14, &src, a4);
      uint64_t result = 0;
      if (v12)
      {
        u_strcpy(a3, src);
        return v7;
      }
    }
  }
  else
  {
    LOBYTE(v7) = 0;
    return v7;
  }
  return result;
}

uint64_t sub_2162C54C8(unsigned char *a1, unsigned char *a2, int a3, char a4)
{
  if (a1[3]) {
    return 0;
  }
  switch(*a1)
  {
    case 0:
      if ((a3 - 97) > 0x19) {
        return 0;
      }
      a2[2] = a3 - 97;
      int v6 = byte_2163831BE[(a3 - 97)];
      a2[1] = v6;
      uint64_t v4 = 1;
      *a2 = 1;
      a2[3] = v6 == 255;
      if (v6 == 255) {
        a2[1] = 0;
      }
      return v4;
    case 1:
      uint64_t v9 = 0;
      if (a4)
      {
        BOOL v10 = L"bcdfghjklmpqrstvwxyz'aeinouyxa";
        while ((unsigned __int16)word_2163832A6[v9] != a3)
        {
          if (++v9 == 11) {
            goto LABEL_31;
          }
        }
        BOOL v10 = &word_2163832A6[v9];
LABEL_31:
        unint64_t v20 = (char *)v10 - (char *)word_2163832A6;
        if ((char *)v10 - (char *)word_2163832A6 != 22)
        {
          unsigned int v21 = a1[1];
          a2[1] = v21;
          unint64_t v22 = v20 >> 1;
          a2[2] = v20 >> 1;
          uint64_t v4 = 1;
          a2[3] = 1;
          *a2 = 2;
          if (*(_WORD *)*(&off_26426D950 + 11 * v21 + v22)) {
            return v4;
          }
        }
        uint64_t v23 = 0;
        std::string v24 = (__int16 *)byte_2163831F2;
        while ((unsigned __int16)aAeinouhkstwy[v23 + 7] != a3)
        {
          if (++v23 == 6) {
            goto LABEL_49;
          }
        }
        std::string v24 = &aAeinouhkstwy[v23 + 7];
LABEL_49:
        if ((char *)v24 - (char *)&aAeinouhkstwy[7] == 12) {
          return 0;
        }
        uint64_t v4 = (unint64_t)((char *)v24 - (char *)&aAeinouhkstwy[7]) >> 1;
        a2[2] = v4;
        int v29 = byte_2163831F2[6 * a1[1] + v4];
        a2[1] = v29;
        a2[3] = 0;
        unsigned int v30 = (*a1 + 1);
        *a2 = *a1 + 1;
        LODWORD(v4) = (_BYTE)v4 != 0xFF;
        if (v30 >= 5 || v29 == 255) {
          return 0;
        }
        else {
          return v4;
        }
      }
      BOOL v19 = &aAeinouhkstwy[7];
      while ((unsigned __int16)aAeinouhkstwy[v9] != a3)
      {
        if (++v9 == 7) {
          goto LABEL_38;
        }
      }
      BOOL v19 = &aAeinouhkstwy[v9];
LABEL_38:
      unint64_t v25 = (char *)v19 - (char *)aAeinouhkstwy;
      if ((char *)v19 - (char *)aAeinouhkstwy != 14)
      {
        uint64_t v28 = a1[1];
        a2[1] = v28;
        unint64_t v16 = v25 >> 1;
        a2[2] = v16;
        a2[3] = 1;
        *a2 = 2;
        uint64_t v17 = 7 * v28;
        std::string::size_type v18 = &off_26426CE78;
        goto LABEL_44;
      }
      uint64_t v26 = 0;
      std::string v27 = (__int16 *)byte_2163831F2;
      while ((unsigned __int16)aAeinouhkstwy[v26 + 7] != a3)
      {
        if (++v26 == 6) {
          goto LABEL_57;
        }
      }
      std::string v27 = &aAeinouhkstwy[v26 + 7];
LABEL_57:
      if ((char *)v27 - (char *)&aAeinouhkstwy[7] == 12) {
        return 0;
      }
      unint64_t v32 = (unint64_t)((char *)v27 - (char *)&aAeinouhkstwy[7]) >> 1;
      a2[2] = v32;
      int v33 = byte_2163831F2[6 * a1[1] + v32];
      a2[1] = v33;
      a2[3] = 0;
      *a2 = 2;
      BOOL v14 = (_BYTE)v32 == 0xFF || v33 == 255;
      return !v14;
    case 2:
      uint64_t v7 = 0;
      uint64_t v8 = (__int16 *)byte_21638327A;
      break;
    case 3:
      if (a3 != 117) {
        return 0;
      }
      *(_WORD *)a2 = 4;
      a2[2] = a1[2];
      uint64_t v4 = 1;
      a2[3] = 1;
      return v4;
    default:
      return 0;
  }
  while ((unsigned __int16)aAeiou[v7] != a3)
  {
    if (++v7 == 5) {
      goto LABEL_20;
    }
  }
  uint64_t v8 = &aAeiou[v7];
LABEL_20:
  unint64_t v11 = (char *)v8 - (char *)aAeiou;
  if ((char *)v8 - (char *)aAeiou == 10)
  {
    if (a3 != 115) {
      return 0;
    }
    uint64_t v12 = a1[1];
    BOOL v14 = v12 == 255;
    a2[2] = v12;
    int v13 = byte_21638327A[v12];
    a2[1] = v13;
    a2[3] = 0;
    *a2 = 3;
    BOOL v14 = v14 || v13 == 255;
  }
  else
  {
    uint64_t v15 = a1[1];
    a2[1] = v15;
    unint64_t v16 = v11 >> 1;
    a2[2] = v16;
    a2[3] = 1;
    *a2 = 3;
    uint64_t v17 = 5 * v15;
    std::string::size_type v18 = &off_26426D310;
LABEL_44:
    BOOL v14 = *(unsigned __int16 *)*(&v18[v17] + v16) == 0;
  }
  return !v14;
}

uint64_t sub_2162C5850(unsigned __int8 *a1, void *a2, int a3)
{
  uint64_t result = 0;
  if (*a1 <= 4u)
  {
    uint64_t v5 = a1[1];
    if (v5 != 255)
    {
      uint64_t v6 = a1[2];
      if (v6 != 255)
      {
        switch(*a1)
        {
          case 1u:
            uint64_t v7 = *(&off_26426CDA8 + v6);
            goto LABEL_12;
          case 2u:
            if (!a1[3]) {
              goto LABEL_18;
            }
            uint64_t v8 = (_WORD **)(&off_26426CE78 + 8 * v5 + v6 - v5);
            uint64_t v9 = &off_26426D950 + 11 * v5 + v6;
            if (a3) {
              uint64_t v8 = (_WORD **)v9;
            }
            uint64_t v7 = *v8;
            goto LABEL_12;
          case 3u:
            if (!a1[3]) {
              goto LABEL_18;
            }
            uint64_t v7 = *(&off_26426D310 + 5 * v5 + v6);
LABEL_12:
            if (*v7) {
              goto LABEL_16;
            }
LABEL_18:
            uint64_t result = 0;
            break;
          case 4u:
            if (!a1[3]) {
              goto LABEL_18;
            }
            uint64_t v7 = &unk_2163832A2;
LABEL_16:
            *a2 = v7;
            uint64_t result = 1;
            break;
          default:
            goto LABEL_18;
        }
      }
    }
  }
  return result;
}

BOOL sub_2162C5954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 24))(&v16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(&v15, a1, v16, a2, a3);
  uint64_t v9 = v15;
  uint64_t v8 = v16;
  uint64_t v15 = 0;
  uint64_t v16 = v9;
  if (v8)
  {
    MEMORY[0x2166CA800](v8, 0x1000C4052888210);
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      MEMORY[0x2166CA800](v10, 0x1000C4052888210);
    }
  }
  char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v16);
  uint64_t v12 = v16;
  if (v11)
  {
    if (*(unsigned char *)(v16 + 3))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v16, a4);
      uint64_t v12 = v16;
      BOOL v13 = *(unsigned char *)(v16 + 3) != 0;
    }
    else
    {
      BOOL v13 = 0;
    }
    uint64_t v16 = 0;
    goto LABEL_11;
  }
  BOOL v13 = 0;
  BOOL result = 0;
  uint64_t v16 = 0;
  if (v12)
  {
LABEL_11:
    MEMORY[0x2166CA800](v12, 0x1000C4052888210);
    return v13;
  }
  return result;
}

void sub_2162C5AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x2166CA800](a10, 0x1000C4052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162C5B14(uint64_t a1, uint64_t a2, unint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 24))(&v5);
  if (a3 >= 2) {
    operator new();
  }
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return MEMORY[0x2166CA800](result, 0x1000C4052888210);
  }
  return result;
}

void sub_2162C5CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MEMORY[0x2166CA800](a12, 0x1000C4052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162C5D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v6, &v5);
}

uint64_t sub_2162C5D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 24))(&v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(&v14, a1, v15, a2, a3);
  uint64_t v11 = v14;
  uint64_t v10 = v15;
  uint64_t v14 = 0;
  uint64_t v15 = v11;
  if (v10)
  {
    MEMORY[0x2166CA800](v10, 0x1000C4052888210);
    uint64_t v12 = v14;
    uint64_t v14 = 0;
    if (v12) {
      MEMORY[0x2166CA800](v12, 0x1000C4052888210);
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56))(a1, v15, a4, a5);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result) {
    return MEMORY[0x2166CA800](result, 0x1000C4052888210);
  }
  return result;
}

void sub_2162C5EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x2166CA800](a10, 0x1000C4052888210);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162C5EEC()
{
}

BOOL sub_2162C5F2C(uint64_t a1, unsigned __int8 *a2)
{
  BOOL result = 0;
  if (*a2 <= 4u && a2[1] != 255) {
    return a2[2] != 255;
  }
  return result;
}

void sub_2162C5F58()
{
}

void sub_2162C60B0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x1000C4052888210);
  MEMORY[0x2166CA800](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

uint64_t sub_2162C60F4(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  return sub_2162C5850(a2, a3, 0);
}

void sub_2162C6104(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  __src[2] = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    if (*a2 <= 4u && a2[1] != 255 && a2[2] != 255)
    {
      unsigned int v6 = *(_DWORD *)a2;
      *((_WORD *)__src + *(_DWORD *)a2) = 0;
      for (unsigned int i = v6; i; *((_WORD *)__src + i) = v11)
      {
        int v8 = BYTE1(v6);
        unsigned int v9 = HIWORD(v6);
        unsigned int v10 = HIBYTE(v6);
        switch(i)
        {
          case 1u:
            unsigned int v10 = 0;
            LOBYTE(v9) = 0;
            int v8 = 0;
            unsigned int i = 0;
            __int16 v11 = BYTE2(v6) + 97;
            break;
          case 2u:
            if (v10)
            {
              unsigned int v10 = 0;
              __int16 v11 = aAeinouhkstwy[BYTE2(v6)];
            }
            else
            {
              uint64_t v12 = 0;
              __int16 v11 = aAeinouhkstwy[BYTE2(v6) + 7];
              while (BYTE1(v6) != byte_2163831F2[v12])
              {
                if (++v12 == 126)
                {
                  BOOL v13 = aAeiou;
                  goto LABEL_26;
                }
              }
              BOOL v13 = (const __int16 *)&byte_2163831F2[v12];
LABEL_26:
              int v8 = ((((unint64_t)((char *)v13 - byte_2163831F2)
                                                   * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64) >> 2);
            }
            uint64_t v16 = 0;
            while (byte_2163831BE[v16] != v8)
            {
              if (++v16 == 26)
              {
                uint64_t v17 = aAeinouhkstwy;
                goto LABEL_32;
              }
            }
            uint64_t v17 = (const __int16 *)&byte_2163831BE[v16];
LABEL_32:
            LOBYTE(v9) = (_BYTE)v17 - byte_2163831BE;
            unsigned int i = 1;
            break;
          case 3u:
            if (v10)
            {
              unsigned int v10 = 0;
              __int16 v11 = aAeiou[BYTE2(v6)];
            }
            else
            {
              __int16 v11 = 115;
              int v8 = BYTE2(v6);
            }
            uint64_t v14 = 0;
            while (byte_2163831F2[v14] != v8)
            {
              if (++v14 == 126)
              {
                uint64_t v15 = aAeiou;
                goto LABEL_24;
              }
            }
            uint64_t v15 = (const __int16 *)&byte_2163831F2[v14];
LABEL_24:
            unsigned int v9 = v15 - byte_2163831F2 - 6 * (((char *)v15 - byte_2163831F2) / 6uLL);
            unsigned int i = 2;
            break;
          case 4u:
            unsigned int v10 = 0;
            int v8 = 0;
            __int16 v11 = 117;
            unsigned int i = 3;
            break;
          default:
            __int16 v11 = 0;
            break;
        }
        unsigned int v6 = (v10 << 24) | (v9 << 16) | (v8 << 8);
      }
    }
    p_p = &__p;
    sub_216184F68(&__p, (char *)__src);
    uint64_t v19 = v28;
    if ((v28 & 0x80u) != 0)
    {
      p_p = __p;
      uint64_t v19 = v27;
    }
    uint64_t v20 = 2 * v19;
    __src[0] = 0;
    if (a2[3])
    {
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, void *))(*(void *)a1 + 48))(a1, a2, __src))
      {
        LOBYTE(v31) = 0;
        sub_2162C5D2C(*(void *)(a3 + 24), (uint64_t)__src, (uint64_t)p_p, v20);
      }
    }
    else
    {
      int v33 = 0;
      unsigned int v21 = operator new(0x20uLL);
      void *v21 = &unk_26C6C8A10;
      v21[1] = p_p;
      v21[2] = v20;
      void v21[3] = a3;
      int v33 = v21;
      sub_2162C656C(a2, (uint64_t)v32);
      sub_2162C68CC(v32);
      if ((char)v28 < 0)
      {
        if (v27 != 1)
        {
LABEL_52:
          operator delete(__p);
          return;
        }
        unint64_t v22 = __p;
      }
      else
      {
        if (v28 != 1) {
          return;
        }
        unint64_t v22 = &__p;
      }
      uint64_t v23 = 0;
      std::string v24 = L"'aeinouyxa";
      while (aBcdfghjklmpqrs_1[v23] != *v22)
      {
        if (++v23 == 20) {
          goto LABEL_49;
        }
      }
      std::string v24 = &aBcdfghjklmpqrs_1[v23];
LABEL_49:
      if ((char *)v24 - (char *)L"bcdfghjklmpqrstvwxyz'aeinouyxa" != 40)
      {
        __int16 v31 = 12387;
        unsigned int v30 = 0;
        unint64_t v25 = operator new(0x28uLL);
        *unint64_t v25 = &unk_26C6C8A68;
        v25[1] = p_p;
        void v25[2] = v20;
        void v25[3] = a3;
        v25[4] = &v31;
        unsigned int v30 = v25;
        sub_2162C656C(a2, (uint64_t)v29);
        sub_2162C68CC(v29);
      }
    }
    if (((char)v28 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_52;
  }
}

void sub_2162C6514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2162C656C(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (result[3]) {
    return result;
  }
  uint64_t v2 = result;
  if (*result > 4u || result[1] == 255 || result[2] == 255) {
    return result;
  }
  switch(*result)
  {
    case 0u:
      sub_2162C6834((uint64_t)v17, a2);
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(_UNKNOWN **)((char *)&off_26426CDA8 + v3);
        if (*v4) {
          sub_2162C67E4(v18, (uint64_t)v4);
        }
        BOOL v5 = v3 == 200;
        v3 += 8;
      }
      while (!v5);
      unsigned int v6 = v17;
      return (unsigned __int8 *)sub_2162C68CC(v6);
    case 1u:
      sub_2162C6834((uint64_t)v15, a2);
      unint64_t v9 = 0;
      break;
    case 2u:
      sub_2162C6834((uint64_t)v13, a2);
      uint64_t v7 = 0;
      do
      {
        int v8 = *(_UNKNOWN **)((char *)&off_26426D310 + 40 * v2[1] + v7);
        if (*v8) {
          sub_2162C67E4(v14, (uint64_t)v8);
        }
        BOOL v5 = v7 == 32;
        v7 += 8;
      }
      while (!v5);
      unsigned int v6 = v13;
      return (unsigned __int8 *)sub_2162C68CC(v6);
    case 3u:
      return (unsigned __int8 *)sub_2162C67E4(*(void *)(a2 + 24), (uint64_t)&unk_2163832A2);
    default:
      return result;
  }
  while (1)
  {
    int v10 = (unsigned __int16)aAeinouhkstwy[v9];
    if (v10 == 110)
    {
      uint64_t v11 = 0x17u;
    }
    else
    {
      if (v10 != 39) {
        break;
      }
      uint64_t v11 = 0xDu;
    }
    if (byte_2163831BE[v11] != v2[1]) {
      break;
    }
    if (v9 > 5) {
      goto LABEL_32;
    }
LABEL_30:
    ++v9;
  }
  uint64_t v12 = *(&off_26426CE78 + 7 * v2[1] + v9);
  if (*v12) {
    sub_2162C67E4(v16, (uint64_t)v12);
  }
  if (v9 <= 5) {
    goto LABEL_30;
  }
LABEL_32:
  unsigned int v6 = v15;
  return (unsigned __int8 *)sub_2162C68CC(v6);
}

void sub_2162C6788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_2162C67D0()
{
}

uint64_t sub_2162C67E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t sub_2162C6834(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_2162C68CC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2162C6954()
{
}

__n128 sub_2162C6968(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C8A10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2162C69BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8A10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2162C69F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return sub_2162C5D2C(*(void *)(a1[3] + 24), (uint64_t)&v3, a1[1], a1[2]);
}

uint64_t sub_2162C6A30(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCAC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162C6A70()
{
  return &unk_26C6BCAC0;
}

void sub_2162C6A80()
{
}

__n128 sub_2162C6A94(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6C8A68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2162C6AE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8A68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2162C6B20(uint64_t *a1, const UChar **a2)
{
  u_strcpy((UChar *)(a1[4] + 2), *a2);
  uint64_t v3 = a1[3];
  uint64_t v5 = a1[4];
  return sub_2162C5D2C(*(void *)(v3 + 24), (uint64_t)&v5, a1[1], a1[2]);
}

uint64_t sub_2162C6B78(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCAD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162C6BB8()
{
  return &unk_26C6BCAD0;
}

uint64_t sub_2162C6BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(_DWORD ***)(a1 + 16);
  if (!v3) {
    sub_21621AAC8(&v7);
  }
  sub_216221510(&v7, *v3);
  sub_2162100D0(a2, &v7);
  uint64_t v4 = v8;
  int v8 = 0;
  if (v4)
  {
    uint64_t v5 = sub_21620FE6C(v4);
    MEMORY[0x2166CA800](v5, 0x20C4093837F09);
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
  }
  return result;
}

void sub_2162C6C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

BOOL sub_2162C6C98(uint64_t a1, _OWORD *a2)
{
  return *a2 != 0 && (**(unsigned char **)a2 & 3) != 0;
}

uint64_t sub_2162C6CBC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, BOOL *a5)
{
  *a4 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  BOOL v9 = 0;
  if (v8) {
    BOOL v9 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2) != 0;
  }
  *a5 = v9;
  return v8;
}

uint64_t sub_2162C6D5C(void *a1, _DWORD **a2)
{
  if (!a1[2] || !(*(unsigned int (**)(void *))(*a1 + 88))(a1)) {
    return 0;
  }
  uint64_t v4 = (void *)a1[2];

  return sub_216355444(v4, a2);
}

void **sub_2162C6DD8@<X0>(void *a1@<X0>, _DWORD **a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, void ***a5@<X8>)
{
  if (!a1[2] || ((*(uint64_t (**)(void *))(*a1 + 88))(a1) & 1) == 0)
  {
    sub_21621AAC8(a5);
  }
  int v10 = (void *)a1[2];

  return sub_2163552A8(v10, a2, a3, a4, a5);
}

uint64_t sub_2162C6EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 80))(a1, a2, 0, a3);
}

_DWORD *sub_2162C6ECC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  sub_2162100D0((uint64_t)&v6, a2);
  sub_216221584(&v6, *v2);
  uint64_t v3 = v7;
  uint64_t v7 = 0;
  if (v3)
  {
    uint64_t v4 = sub_21620FE6C(v3);
    MEMORY[0x2166CA800](v4, 0x20C4093837F09);
  }
  uint64_t result = v6;
  unsigned int v6 = 0;
  if (result) {
    return (_DWORD *)MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
  }
  return result;
}

void sub_2162C6FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2162153A0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162C6FC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_2162C6FD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2162C6FD8(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v301 = *MEMORY[0x263EF8340];
  sub_216199BF4(v294);
  uint64_t v258 = v3;
  uint64_t v260 = v4 + 24;
  uint64_t v261 = v4;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v294 + *(void *)(v294[0] - 24)));
    uint64_t v5 = std::locale::use_facet(&v263, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v263);
    unsigned int v6 = (void *)std::istream::getline();
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
      break;
    }
    v263.__locale_ = 0;
    int v264 = 0;
    sub_21610B834(&v265, __s);
    long long v269 = 0u;
    long long v270 = 0u;
    long long v268 = 0u;
    v281 = 0;
    int v282 = 0;
    uint64_t v283 = 0;
    if (sub_2162C8C00(__s, &v281, 5uLL) != 5)
    {
      uint64_t v7 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_216129E78(v7, (uint64_t)"(", 1);
      uint64_t v8 = (void *)std::ostream::operator<<();
      BOOL v9 = sub_216129E78(v8, (uint64_t)") [", 3);
      int v10 = sub_216129E78(v9, (uint64_t)"columnCount == kOriginalFeatureStartColumn + 1", 46);
      uint64_t v11 = sub_216129E78(v10, (uint64_t)"] ", 2);
      uint64_t v12 = sub_216129E78(v11, (uint64_t)"CSV format error: ", 18);
      if ((v267 & 0x80u) == 0) {
        BOOL v13 = &v265;
      }
      else {
        BOOL v13 = v265;
      }
      if ((v267 & 0x80u) == 0) {
        uint64_t v14 = v267;
      }
      else {
        uint64_t v14 = v266;
      }
      sub_216129E78(v12, (uint64_t)v13, v14);
      sub_21619FA48();
    }
    uint64_t v15 = v281;
    LODWORD(v263.__locale_) = atoi(*((const char **)v281 + 1));
    HIDWORD(v263.__locale_) = atoi(*((const char **)v15 + 2));
    int v264 = atoi(*((const char **)v15 + 3));
    sub_21610B834(&__str, *((char **)v15 + 4));
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      uint64_t v17 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_216129E78(v17, (uint64_t)"(", 1);
      uint64_t v18 = (void *)std::ostream::operator<<();
      uint64_t v19 = sub_216129E78(v18, (uint64_t)") [", 3);
      uint64_t v20 = sub_216129E78(v19, (uint64_t)"originalFeature.size()", 22);
      unsigned int v21 = sub_216129E78(v20, (uint64_t)"] ", 2);
      unint64_t v22 = sub_216129E78(v21, (uint64_t)"feature empty error: ", 21);
      if ((v267 & 0x80u) == 0) {
        uint64_t v23 = &v265;
      }
      else {
        uint64_t v23 = v265;
      }
      if ((v267 & 0x80u) == 0) {
        uint64_t v24 = v267;
      }
      else {
        uint64_t v24 = v266;
      }
      sub_216129E78(v22, (uint64_t)v23, v24);
      sub_21619FA48();
    }
    v277 = 0;
    int v278 = 0;
    uint64_t v279 = 0;
    uint64_t v25 = *(void *)(v4 + 104);
    if (*(unsigned char *)(v25 + 24))
    {
      unint64_t v26 = sub_2162C8C00(*((const char **)v281 + 4), &v277, ((uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 3) + 1);
      uint64_t v27 = *(void **)(v261 + 104);
      unint64_t v28 = v27[4];
      if (v26 <= v28)
      {
        int v29 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_216129E78(v29, (uint64_t)"(", 1);
        unsigned int v30 = (void *)std::ostream::operator<<();
        __int16 v31 = sub_216129E78(v30, (uint64_t)") [", 3);
        unint64_t v32 = sub_216129E78(v31, (uint64_t)"featureColumnCount > data.syllableIDIndexCount()", 48);
        int v33 = sub_216129E78(v32, (uint64_t)"] ", 2);
        int v34 = sub_216129E78(v33, (uint64_t)"feature format error: ", 22);
        if ((v267 & 0x80u) == 0) {
          CFStringRef v35 = &v265;
        }
        else {
          CFStringRef v35 = v265;
        }
        if ((v267 & 0x80u) == 0) {
          uint64_t v36 = v267;
        }
        else {
          uint64_t v36 = v266;
        }
        sub_216129E78(v34, (uint64_t)v35, v36);
        sub_21619FA48();
      }
      if (v28 > (uint64_t)(v27[1] - *v27) >> 3)
      {
        unint64_t v37 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_216129E78(v37, (uint64_t)"(", 1);
        int v38 = (void *)std::ostream::operator<<();
        uint64_t v39 = sub_216129E78(v38, (uint64_t)") [", 3);
        uint64_t v40 = sub_216129E78(v39, (uint64_t)"data.syllableIDIndexCount() <= data.indexCount()", 48);
        char v41 = sub_216129E78(v40, (uint64_t)"] ", 2);
        uint64_t v42 = sub_216129E78(v41, (uint64_t)"feature format error (syllable ID index count is too big): ", 59);
        if ((v267 & 0x80u) == 0) {
          __int16 v43 = &v265;
        }
        else {
          __int16 v43 = v265;
        }
        if ((v267 & 0x80u) == 0) {
          uint64_t v44 = v267;
        }
        else {
          uint64_t v44 = v266;
        }
        sub_216129E78(v42, (uint64_t)v43, v44);
        sub_21619FA48();
      }
      unint64_t v45 = v26 - 1;
      uint64_t v4 = v261;
      if (v28 < v26 - 1)
      {
        do
        {
          sub_21610B834(&v292, *((char **)v277 + v28));
          uint64_t v46 = std::string::append(&v292, ",", 1uLL);
          long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__wordUChar s[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__wordUChar s[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v49 = __dst.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)&v268, (const std::string::value_type *)p_dst, v49);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v292.__r_.__value_.__l.__data_);
          }
          ++v28;
        }
        while (v45 != v28);
      }
      sub_21610B834(&__dst, *((char **)v277 + v45));
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v50 = &__dst;
      }
      else {
        uint64_t v50 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v51 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v51 = __dst.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)&v268, (const std::string::value_type *)v50, v51);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::operator=((std::string *)&v268, &__str);
    }
    uint64_t v52 = BYTE7(v269);
    if (SBYTE7(v269) < 0) {
      uint64_t v52 = *((void *)&v268 + 1);
    }
    if (!v52 || (sub_2161C27BC(v260, (std::string *)&v268) & 1) == 0)
    {
      uint64_t v53 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_216129E78(v53, (uint64_t)"(", 1);
      uint64_t v54 = (void *)std::ostream::operator<<();
      int v55 = sub_216129E78(v54, (uint64_t)") [", 3);
      uint64_t v56 = sub_216129E78(v55, (uint64_t)"false", 5);
      BOOL v57 = sub_216129E78(v56, (uint64_t)"] ", 2);
      uint64_t v58 = sub_216129E78(v57, (uint64_t)"feature format error: ", 22);
      if ((v267 & 0x80u) == 0) {
        uint64_t v59 = &v265;
      }
      else {
        uint64_t v59 = v265;
      }
      if ((v267 & 0x80u) == 0) {
        uint64_t v60 = v267;
      }
      else {
        uint64_t v60 = v266;
      }
      sub_216129E78(v58, (uint64_t)v59, v60);
      sub_21619FA48();
    }
    int v274 = 0;
    v275 = 0;
    uint64_t v276 = 0;
    unsigned int v62 = *(uint64_t **)(v4 + 104);
    uint64_t v63 = *v62;
    uint64_t v64 = v62[1];
    __dst.__r_.__value_.__r.__words[0] = *(void *)v281;
    unsigned int v61 = (unsigned char *)__dst.__r_.__value_.__r.__words[0];
    size_t v65 = strlen(__dst.__r_.__value_.__l.__data_);
    uint64_t v66 = v64 - v63;
    if (v64 == v63)
    {
      uint64_t v67 = 0;
    }
    else
    {
      uint64_t v67 = 0;
      uint64_t v68 = v66 >> 3;
      int v69 = (unsigned char *)(__dst.__r_.__value_.__r.__words[0] + v65);
      while (1)
      {
        uint64_t v70 = v69;
        if (v61 != v69)
        {
          while (*v61 != 9)
          {
            if (++v61 == v69)
            {
              uint64_t v70 = v69;
              goto LABEL_77;
            }
          }
          uint64_t v70 = v61;
        }
LABEL_77:
        *uint64_t v70 = 0;
        std::string __p = &v274;
        sub_2161C0344((void ***)&__p, &__dst);
        ++v67;
        if (v70 == v69) {
          break;
        }
        unsigned int v61 = v70 + 1;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v70 + 1);
        if (v67 == v68)
        {
          uint64_t v67 = v68;
          break;
        }
      }
      uint64_t v4 = v261;
      unsigned int v62 = *(uint64_t **)(v261 + 104);
      uint64_t v64 = v62[1];
    }
    if (v67 != (v64 - *v62) >> 3)
    {
      unsigned int v71 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_216129E78(v71, (uint64_t)"(", 1);
      char v72 = (void *)std::ostream::operator<<();
      unsigned int v73 = sub_216129E78(v72, (uint64_t)") [", 3);
      unsigned int v74 = sub_216129E78(v73, (uint64_t)"readingColumnCount == data.indexCount()", 39);
      BOOL v75 = sub_216129E78(v74, (uint64_t)"] ", 2);
      uint64_t v76 = sub_216129E78(v75, (uint64_t)"reading format error: ", 22);
      if ((v267 & 0x80u) == 0) {
        uint64_t v77 = &v265;
      }
      else {
        uint64_t v77 = v265;
      }
      if ((v267 & 0x80u) == 0) {
        uint64_t v78 = v267;
      }
      else {
        uint64_t v78 = v266;
      }
      sub_216129E78(v76, (uint64_t)v77, v78);
      sub_21619FA48();
    }
    if (v64 != *v62)
    {
      unint64_t v79 = 0;
      do
      {
        memset(&v273, 0, sizeof(v273));
        sub_21610B834(&v272, *((char **)v274 + v79));
        std::string::size_type v80 = HIBYTE(v272.__r_.__value_.__r.__words[2]);
        if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v80 = v272.__r_.__value_.__l.__size_;
        }
        if (!v80)
        {
          uint64_t v81 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
          sub_216129E78(v81, (uint64_t)"(", 1);
          unint64_t v82 = (void *)std::ostream::operator<<();
          unint64_t v83 = sub_216129E78(v82, (uint64_t)") [", 3);
          uint64_t v84 = sub_216129E78(v83, (uint64_t)"!readingString.empty()", 22);
          int v85 = sub_216129E78(v84, (uint64_t)"] ", 2);
          unint64_t v86 = sub_216129E78(v85, (uint64_t)"readingString error: ", 21);
          if ((v267 & 0x80u) == 0) {
            uint8x8_t v87 = &v265;
          }
          else {
            uint8x8_t v87 = v265;
          }
          if ((v267 & 0x80u) == 0) {
            uint64_t v88 = v267;
          }
          else {
            uint64_t v88 = v266;
          }
          sub_216129E78(v86, (uint64_t)v87, v88);
          sub_21619FA48();
        }
        uint8x8_t v89 = *(uint64_t **)(v4 + 104);
        unint64_t v90 = v79;
        uint64_t v91 = *v89;
        unint64_t v262 = v90;
        int v92 = *(_DWORD *)(*v89 + 8 * v90);
        if (*((_DWORD *)v89 + 10) == 1 || v92 != 1)
        {
          std::string::size_type v94 = HIBYTE(v272.__r_.__value_.__r.__words[2]);
          if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v94 = v272.__r_.__value_.__l.__size_;
          }
          if (v94 == 1)
          {
            int64_t v95 = (std::string *)v272.__r_.__value_.__r.__words[0];
            if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int64_t v95 = &v272;
            }
            if (v95->__r_.__value_.__s.__data_[0] == 42 && (unint64_t)(v89[1] - v91) >= 9)
            {
              std::string::operator=(&v273, &v272);
              unint64_t v96 = v262;
              goto LABEL_360;
            }
          }
          if (v92 != 1)
          {
            if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0) {
              sub_21610A674(&__dst, v272.__r_.__value_.__l.__data_, v272.__r_.__value_.__l.__size_);
            }
            else {
              std::string __dst = v272;
            }
            if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v273.__r_.__value_.__l.__data_);
            }
            std::string v273 = __dst;
            uint64_t v230 = v91 + 8 * v262;
            unint64_t v96 = v262;
            if (*(unsigned char *)(v230 + 4))
            {
              std::string::size_type v231 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
              int v232 = &v273;
              if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              {
                std::string::size_type v231 = v273.__r_.__value_.__l.__size_;
                int v232 = (std::string *)v273.__r_.__value_.__r.__words[0];
              }
              if (v231)
              {
                v233 = (std::string *)((char *)v232 + v231 - 1);
                if (v233 > v232)
                {
                  int v234 = &v232->__r_.__value_.__s.__data_[1];
                  do
                  {
                    std::string::value_type v235 = *(v234 - 1);
                    *(v234 - 1) = v233->__r_.__value_.__s.__data_[0];
                    v233->__r_.__value_.__s.__data_[0] = v235;
                    v233 = (std::string *)((char *)v233 - 1);
                    BOOL v205 = v234++ >= (char *)v233;
                  }
                  while (!v205);
                }
              }
            }
            if ((sub_2161C27BC(v260, &v273) & 1) == 0)
            {
              int v236 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
              sub_216129E78(v236, (uint64_t)"(", 1);
              v237 = (void *)std::ostream::operator<<();
              int v238 = sub_216129E78(v237, (uint64_t)") [", 3);
              v239 = sub_216129E78(v238, (uint64_t)"iconv.convert(&convertedReading)", 32);
              int v240 = sub_216129E78(v239, (uint64_t)"] ", 2);
              v241 = sub_216129E78(v240, (uint64_t)"convert reading error: ", 23);
              if ((v267 & 0x80u) == 0) {
                int v242 = &v265;
              }
              else {
                int v242 = v265;
              }
              if ((v267 & 0x80u) == 0) {
                uint64_t v243 = v267;
              }
              else {
                uint64_t v243 = v266;
              }
              sub_216129E78(v241, (uint64_t)v242, v243);
              sub_21619FA48();
            }
            goto LABEL_360;
          }
        }
        if (v262) {
          BOOL v97 = 0;
        }
        else {
          BOOL v97 = *(_DWORD *)(v4 + 40) == 2;
        }
        char v98 = v97;
        if (v97 && (sub_2161C27BC(v260, &v272) & 1) == 0)
        {
          uint64_t v99 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
          sub_216129E78(v99, (uint64_t)"(", 1);
          int v100 = (void *)std::ostream::operator<<();
          int v101 = sub_216129E78(v100, (uint64_t)") [", 3);
          uint64_t v102 = sub_216129E78(v101, (uint64_t)"iconv.convert(&readingString)", 29);
          unint64_t v103 = sub_216129E78(v102, (uint64_t)"] ", 2);
          uint64_t v104 = sub_216129E78(v103, (uint64_t)"convert reading error: ", 23);
          if ((v267 & 0x80u) == 0) {
            uint64_t v105 = &v265;
          }
          else {
            uint64_t v105 = v265;
          }
          if ((v267 & 0x80u) == 0) {
            uint64_t v106 = v267;
          }
          else {
            uint64_t v106 = v266;
          }
          sub_216129E78(v104, (uint64_t)v105, v106);
          sub_21619FA48();
        }
        if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v107 = HIBYTE(v272.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v107 = v272.__r_.__value_.__l.__size_;
        }
        if (v107 != 1) {
          goto LABEL_140;
        }
        unint64_t v108 = (std::string *)v272.__r_.__value_.__r.__words[0];
        if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v108 = &v272;
        }
        if (v108->__r_.__value_.__s.__data_[0] != 42)
        {
LABEL_140:
          if (v98)
          {
            uint64_t v110 = *(unsigned __int16 ****)(v4 + 8);
            CFArrayRef v111 = *(char **)v277;
            memset(&v292, 0, sizeof(v292));
            std::string __p = 0;
            int v290 = 0;
            v291 = 0;
            if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v112 = &v272;
            }
            else {
              unint64_t v112 = (std::string *)v272.__r_.__value_.__r.__words[0];
            }
            if (v107 >= 2)
            {
              v259 = v111;
              uint64_t v113 = 0;
              std::string::size_type v114 = v107 >> 1;
              do
              {
                uint64_t v115 = 0;
                int v116 = *((unsigned __int16 *)&v112->__r_.__value_.__l.__data_ + v113);
                while ((unsigned __int16)word_216381F32[v115] != v116)
                {
                  if (++v115 == 5)
                  {
                    if ((v116 - 12549) < 0x25) {
                      goto LABEL_160;
                    }
LABEL_153:
                    int32_t v117 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
                    sub_216129E78(v117, (uint64_t)"(", 1);
                    uint64_t v118 = (void *)std::ostream::operator<<();
                    long long v119 = sub_216129E78(v118, (uint64_t)") [", 3);
                    UChar v120 = sub_216129E78(v119, (uint64_t)"InputEngine::isZhuyinToneMark(zhuyin[i]) || InputEngine::isValidZhuyin(zhuyin[i])", 81);
                    int v121 = sub_216129E78(v120, (uint64_t)"] ", 2);
                    char v122 = sub_216129E78(v121, (uint64_t)"not valid zhuyin error: ", 24);
                    if ((v267 & 0x80u) == 0) {
                      uint64_t v123 = &v265;
                    }
                    else {
                      uint64_t v123 = v265;
                    }
                    if ((v267 & 0x80u) == 0) {
                      uint64_t v124 = v267;
                    }
                    else {
                      uint64_t v124 = v266;
                    }
                    sub_216129E78(v122, (uint64_t)v123, v124);
                    sub_21619FA48();
                  }
                }
                if ((v116 - 12549) >= 0x25 && v115 == -1) {
                  goto LABEL_153;
                }
LABEL_160:
                char v125 = 49;
                switch(*((_WORD *)&v112->__r_.__value_.__l.__data_ + v113))
                {
                  case 0x2C7:
                    char v125 = 51;
                    break;
                  case 0x2C8:
                    goto LABEL_164;
                  case 0x2C9:
                    break;
                  case 0x2CA:
                    char v125 = 50;
                    break;
                  case 0x2CB:
                    char v125 = 52;
                    break;
                  default:
                    if (v116 == 729) {
                      char v125 = 53;
                    }
                    else {
LABEL_164:
                    }
                      char v125 = v116 + 49;
                    break;
                }
                uint64_t v126 = v290;
                if (v290 >= v291)
                {
                  unint64_t v128 = (unint64_t)__p;
                  uint64_t v129 = v290 - (unsigned char *)__p;
                  uint64_t v130 = v290 - (unsigned char *)__p + 1;
                  if (v130 < 0) {
                    sub_21610CB04();
                  }
                  unint64_t v131 = v291 - (unsigned char *)__p;
                  if (2 * (v291 - (unsigned char *)__p) > (unint64_t)v130) {
                    uint64_t v130 = 2 * v131;
                  }
                  if (v131 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v132 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v132 = v130;
                  }
                  if (v132) {
                    double v133 = (char *)operator new(v132);
                  }
                  else {
                    double v133 = 0;
                  }
                  double v134 = &v133[v129];
                  size_t v135 = &v133[v129];
                  *size_t v135 = v125;
                  uint64_t v127 = v135 + 1;
                  if (v126 != (char *)v128)
                  {
                    __int16 v136 = &v126[~v128];
                    do
                    {
                      char v137 = *--v126;
                      (v136--)[(void)v133] = v137;
                    }
                    while (v126 != (char *)v128);
                    uint64_t v126 = (char *)__p;
                    double v134 = v133;
                  }
                  std::string __p = v134;
                  int v290 = v127;
                  v291 = &v133[v132];
                  if (v126) {
                    operator delete(v126);
                  }
                }
                else
                {
                  *int v290 = v125;
                  uint64_t v127 = v126 + 1;
                }
                int v290 = v127;
                ++v113;
              }
              while (v113 != v114);
LABEL_224:
              CFArrayRef v111 = v259;
            }
          }
          else
          {
            if (*(_DWORD *)(v4 + 40) == 5) {
              int v138 = (unsigned __int16 ****)(v4 + 16);
            }
            else {
              int v138 = (unsigned __int16 ****)v4;
            }
            uint64_t v110 = *v138;
            CFArrayRef v111 = (char *)*((void *)v277 + v262);
            memset(&v292, 0, sizeof(v292));
            std::string __p = 0;
            int v290 = 0;
            v291 = 0;
            if (v107)
            {
              v259 = v111;
              char v139 = 0;
              for (uint64_t i = 0; i != v107; ++i)
              {
                if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v141 = &v272;
                }
                else {
                  char v141 = (std::string *)v272.__r_.__value_.__r.__words[0];
                }
                if (v141->__r_.__value_.__s.__data_[i] - 97 >= 0x1A
                  && v141->__r_.__value_.__s.__data_[i] != 42)
                {
                  unint64_t v142 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
                  sub_216129E78(v142, (uint64_t)"(", 1);
                  int v143 = (void *)std::ostream::operator<<();
                  uint64_t v144 = sub_216129E78(v143, (uint64_t)") [", 3);
                  uint64_t v145 = sub_216129E78(v144, (uint64_t)"(reading[i] >= 'a' && reading[i] <= 'z') || reading[i] == '*'", 61);
                  uint64_t v146 = sub_216129E78(v145, (uint64_t)"] ", 2);
                  int v147 = sub_216129E78(v146, (uint64_t)"not valid pinyin error: ", 24);
                  if ((v267 & 0x80u) == 0) {
                    int v148 = &v265;
                  }
                  else {
                    int v148 = v265;
                  }
                  if ((v267 & 0x80u) == 0) {
                    uint64_t v149 = v267;
                  }
                  else {
                    uint64_t v149 = v266;
                  }
                  sub_216129E78(v147, (uint64_t)v148, v149);
                  sub_21619FA48();
                }
                if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v150 = &v272;
                }
                else {
                  uint64_t v150 = (std::string *)v272.__r_.__value_.__r.__words[0];
                }
                std::string::value_type v151 = v150->__r_.__value_.__s.__data_[i];
                if (v139 >= v291)
                {
                  unint64_t v153 = (unint64_t)__p;
                  uint64_t v154 = v139 - (unsigned char *)__p;
                  uint64_t v155 = v139 - (unsigned char *)__p + 1;
                  if (v155 < 0) {
                    sub_21610CB04();
                  }
                  unint64_t v156 = v291 - (unsigned char *)__p;
                  if (2 * (v291 - (unsigned char *)__p) > (unint64_t)v155) {
                    uint64_t v155 = 2 * v156;
                  }
                  if (v156 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v157 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v157 = v155;
                  }
                  if (v157) {
                    uint64_t v158 = (char *)operator new(v157);
                  }
                  else {
                    uint64_t v158 = 0;
                  }
                  uint64_t v159 = &v158[v154];
                  v158[v154] = v151;
                  uint64_t v152 = (uint64_t)&v158[v154 + 1];
                  if (v139 != (char *)v153)
                  {
                    uint64_t v160 = &v139[~v153];
                    do
                    {
                      char v161 = *--v139;
                      (v160--)[(void)v158] = v161;
                    }
                    while (v139 != (char *)v153);
                    char v139 = (char *)__p;
                    uint64_t v159 = v158;
                  }
                  std::string __p = v159;
                  int v290 = &v158[v154 + 1];
                  v291 = &v158[v157];
                  if (v139) {
                    operator delete(v139);
                  }
                }
                else
                {
                  *char v139 = v151;
                  uint64_t v152 = (uint64_t)(v139 + 1);
                }
                int v290 = (char *)v152;
                char v139 = (char *)v152;
              }
              goto LABEL_224;
            }
          }
          sub_21610B834(v287, v111);
          if ((v288 & 0x80u) == 0) {
            unint64_t v162 = v288;
          }
          else {
            unint64_t v162 = (unint64_t)v287[1];
          }
          if (v162)
          {
            unsigned int v163 = 0;
            uint64_t v164 = (_DWORD *)v292.__r_.__value_.__l.__size_;
            do
            {
              if ((v288 & 0x80u) == 0) {
                int v165 = v287;
              }
              else {
                int v165 = (void **)v287[0];
              }
              int v166 = v163[(void)v165] - 48;
              if ((unint64_t)v164 >= v292.__r_.__value_.__r.__words[2])
              {
                uint64_t v168 = (_DWORD *)v292.__r_.__value_.__r.__words[0];
                uint64_t v169 = (uint64_t)((uint64_t)v164 - v292.__r_.__value_.__r.__words[0]) >> 2;
                unint64_t v170 = v169 + 1;
                if ((unint64_t)(v169 + 1) >> 62) {
                  sub_21610CB04();
                }
                int64_t v171 = v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0]) >> 1 > v170) {
                  unint64_t v170 = v171 >> 1;
                }
                if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v172 = v170;
                }
                if (v172)
                {
                  __int16 v173 = (char *)sub_2161129B4((uint64_t)&v292.__r_.__value_.__r.__words[2], v172);
                  uint64_t v164 = (_DWORD *)v292.__r_.__value_.__l.__size_;
                  uint64_t v168 = (_DWORD *)v292.__r_.__value_.__r.__words[0];
                }
                else
                {
                  __int16 v173 = 0;
                }
                uint64_t v174 = (int *)&v173[4 * v169];
                *uint64_t v174 = v166;
                std::string::size_type v167 = (std::string::size_type)(v174 + 1);
                while (v164 != v168)
                {
                  int v175 = *--v164;
                  *--uint64_t v174 = v175;
                }
                v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v174;
                v292.__r_.__value_.__l.__size_ = v167;
                v292.__r_.__value_.__r.__wordUChar s[2] = (std::string::size_type)&v173[4 * v172];
                if (v168) {
                  operator delete(v168);
                }
              }
              else
              {
                *uint64_t v164 = v166;
                std::string::size_type v167 = (std::string::size_type)(v164 + 1);
              }
              v292.__r_.__value_.__l.__size_ = v167;
              ++v163;
              uint64_t v164 = (_DWORD *)v167;
            }
            while (v163 != (char *)v162);
          }
          int v284 = 0;
          v285 = 0;
          int v286 = 0;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E400, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_26797E400))
          {
            sub_21610B834(&__dst, "person");
            __int16 v298 = 5000;
            sub_21610B834(v299, "KKK1");
            __int16 v300 = 5000;
            sub_2162CE910((uint64_t)&__dst, 2);
            for (uint64_t j = 0; j != -8; j -= 4)
            {
              if (SHIBYTE(v299[j + 2]) < 0) {
                operator delete((void *)v299[j]);
              }
            }
            __cxa_atexit((void (*)(void *))sub_2162CE8E4, &qword_26797E408, &dword_2160F5000);
            __cxa_guard_release(&qword_26797E400);
          }
          std::string::size_type v176 = v292.__r_.__value_.__l.__size_;
          if (v292.__r_.__value_.__l.__size_ == v292.__r_.__value_.__r.__words[0])
          {
            uint64_t v189 = 0;
            std::string::size_type v179 = v292.__r_.__value_.__l.__size_;
          }
          else
          {
            unint64_t v177 = 0;
            int v178 = 0;
            std::string::size_type v179 = v292.__r_.__value_.__l.__size_;
            std::string::size_type v176 = v292.__r_.__value_.__r.__words[0];
            do
            {
              int v180 = *(_DWORD *)(v292.__r_.__value_.__r.__words[0] + 4 * v177);
              if (!v180)
              {
                uint64_t v181 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
                sub_216129E78(v181, (uint64_t)"(", 1);
                unint64_t v182 = (void *)std::ostream::operator<<();
                unint64_t v183 = sub_216129E78(v182, (uint64_t)") [", 3);
                int v184 = sub_216129E78(v183, (uint64_t)"syllableLengths[i]", 18);
                uint64_t v185 = sub_216129E78(v184, (uint64_t)"] ", 2);
                int v186 = sub_216129E78(v185, (uint64_t)"syllable length is zero: ", 25);
                if ((v267 & 0x80u) == 0) {
                  char v187 = &v265;
                }
                else {
                  char v187 = v265;
                }
                if ((v267 & 0x80u) == 0) {
                  uint64_t v188 = v267;
                }
                else {
                  uint64_t v188 = v266;
                }
                sub_216129E78(v186, (uint64_t)v187, v188);
                sub_21619FA48();
              }
              v178 += v180;
              ++v177;
            }
            while (v177 < (uint64_t)(v292.__r_.__value_.__l.__size_ - v292.__r_.__value_.__r.__words[0]) >> 2);
            uint64_t v189 = v178;
          }
          if (v290 - (unsigned char *)__p != v189)
          {
            unint64_t v190 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
            sub_216129E78(v190, (uint64_t)"(", 1);
            uint64_t v191 = (void *)std::ostream::operator<<();
            int v192 = sub_216129E78(v191, (uint64_t)") [", 3);
            __int16 v193 = sub_216129E78(v192, (uint64_t)"total == reading.size()", 23);
            int v194 = sub_216129E78(v193, (uint64_t)"] ", 2);
            uint64_t v195 = sub_216129E78(v194, (uint64_t)"syllable length doesn't match reading: ", 39);
            if ((v267 & 0x80u) == 0) {
              uint64_t v196 = &v265;
            }
            else {
              uint64_t v196 = v265;
            }
            if ((v267 & 0x80u) == 0) {
              uint64_t v197 = v267;
            }
            else {
              uint64_t v197 = v266;
            }
            sub_216129E78(v195, (uint64_t)v196, v197);
            sub_21619FA48();
          }
          std::string::size_type v198 = (v179 - v176) >> 2;
          uint64_t v199 = (v198 - 1);
          if ((int)v198 - 1 >= 0)
          {
            do
            {
              size_t v200 = *(int *)(v292.__r_.__value_.__r.__words[0] + 4 * v199);
              v189 -= v200;
              uint64_t v201 = (char *)__p + v189;
              int v202 = **v110;
              if (v200) {
                BOOL v203 = v202 == 0;
              }
              else {
                BOOL v203 = 1;
              }
              if (!v203)
              {
                size_t v204 = 0;
                do
                {
                  int v202 = sub_21632279C((uint64_t)v110, v202, v201[v204++]);
                  if (v202) {
                    BOOL v205 = v204 >= v200;
                  }
                  else {
                    BOOL v205 = 1;
                  }
                }
                while (!v205);
              }
              if (!v202 || (int v206 = v202[1], v206 == 0xFFFF))
              {
                sub_21612F5FC(&__dst, v201, v200);
                uint64_t v207 = qword_26797E410;
                if (!qword_26797E410) {
                  goto LABEL_298;
                }
                uint64_t v208 = &qword_26797E410;
                do
                {
                  char v209 = sub_216179024((void *)(v207 + 32), (void **)&__dst.__r_.__value_.__l.__data_);
                  if (v209 >= 0) {
                    long long v210 = (uint64_t *)v207;
                  }
                  else {
                    long long v210 = (uint64_t *)(v207 + 8);
                  }
                  if (v209 >= 0) {
                    uint64_t v208 = (uint64_t *)v207;
                  }
                  uint64_t v207 = *v210;
                }
                while (*v210);
                if (v208 == &qword_26797E410 || (sub_216179024(&__dst, (void **)v208 + 4) & 0x80) != 0) {
LABEL_298:
                }
                  int v206 = 0xFFFF;
                else {
                  int v206 = *((unsigned __int16 *)v208 + 28);
                }
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                if (v206 == 0xFFFF)
                {
                  std::string v211 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
                  sub_216129E78(v211, (uint64_t)"(", 1);
                  std::string v212 = (void *)std::ostream::operator<<();
                  std::string v213 = sub_216129E78(v212, (uint64_t)") [", 3);
                  std::string v214 = sub_216129E78(v213, (uint64_t)"syllableID != kInvalidIndex", 27);
                  std::string v215 = sub_216129E78(v214, (uint64_t)"] ", 2);
                  uint64_t v216 = sub_216129E78(v215, (uint64_t)"cannot get syllable ID from syllable trie: ", 43);
                  if ((v267 & 0x80u) == 0) {
                    std::string v217 = &v265;
                  }
                  else {
                    std::string v217 = v265;
                  }
                  if ((v267 & 0x80u) == 0) {
                    uint64_t v218 = v267;
                  }
                  else {
                    uint64_t v218 = v266;
                  }
                  sub_216129E78(v216, (uint64_t)v217, v218);
                  sub_21619FA48();
                }
              }
              v219 = v285;
              if (v285 >= v286)
              {
                int v221 = (char *)v284;
                uint64_t v222 = v285 - (unsigned char *)v284;
                if (v285 - (unsigned char *)v284 <= -3) {
                  sub_21610CB04();
                }
                uint64_t v223 = v222 >> 1;
                if (v286 - (unsigned char *)v284 <= (unint64_t)((v222 >> 1) + 1)) {
                  uint64_t v224 = v223 + 1;
                }
                else {
                  uint64_t v224 = v286 - (unsigned char *)v284;
                }
                if ((unint64_t)(v286 - (unsigned char *)v284) >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v225 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v225 = v224;
                }
                if (v225)
                {
                  __int16 v226 = (char *)sub_21610FD44((uint64_t)&v286, v225);
                  int v221 = (char *)v284;
                  v219 = v285;
                }
                else
                {
                  __int16 v226 = 0;
                }
                int v227 = &v226[2 * v223];
                *(_WORD *)int v227 = v206;
                __int16 v220 = v227 + 2;
                while (v219 != v221)
                {
                  __int16 v228 = *((_WORD *)v219 - 1);
                  v219 -= 2;
                  *((_WORD *)v227 - 1) = v228;
                  v227 -= 2;
                }
                int v284 = v227;
                v285 = v220;
                int v286 = &v226[2 * v225];
                if (v221) {
                  operator delete(v221);
                }
              }
              else
              {
                *(_WORD *)v285 = v206;
                __int16 v220 = v219 + 2;
              }
              v285 = v220;
            }
            while (v199-- > 0);
          }
          sub_21612F5FC(&v271, v284, v285 - (unsigned char *)v284);
          if (v284)
          {
            v285 = (char *)v284;
            operator delete(v284);
          }
          uint64_t v4 = v261;
          unint64_t v96 = v262;
          if ((char)v288 < 0) {
            operator delete(v287[0]);
          }
          if (__p)
          {
            int v290 = (char *)__p;
            operator delete(__p);
          }
          if (v292.__r_.__value_.__r.__words[0])
          {
            v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
            operator delete(v292.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v273.__r_.__value_.__l.__data_);
          }
          std::string v273 = v271;
          goto LABEL_360;
        }
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
        {
          v273.__r_.__value_.__l.__size_ = 1;
          uint64_t v109 = (std::string *)v273.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v273.__r_.__value_.__s + 23) = 1;
          uint64_t v109 = &v273;
        }
        unint64_t v96 = v262;
        LOWORD(v109->__r_.__value_.__l.__data_) = 42;
LABEL_360:
        std::string::size_type v244 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
        if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v244 = v273.__r_.__value_.__l.__size_;
        }
        if (!v244)
        {
          v245 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
          sub_216129E78(v245, (uint64_t)"(", 1);
          int v246 = (void *)std::ostream::operator<<();
          v247 = sub_216129E78(v246, (uint64_t)") [", 3);
          int v248 = sub_216129E78(v247, (uint64_t)"!convertedReading.empty()", 25);
          v249 = sub_216129E78(v248, (uint64_t)"] ", 2);
          int v250 = sub_216129E78(v249, (uint64_t)"empty converted reading error: ", 31);
          if ((v267 & 0x80u) == 0) {
            v251 = &v265;
          }
          else {
            v251 = v265;
          }
          if ((v267 & 0x80u) == 0) {
            uint64_t v252 = v267;
          }
          else {
            uint64_t v252 = v266;
          }
          sub_216129E78(v250, (uint64_t)v251, v252);
          sub_21619FA48();
        }
        v253 = (_OWORD *)v270;
        if ((unint64_t)v270 >= *((void *)&v270 + 1))
        {
          uint64_t v255 = sub_2161BAB5C((uint64_t *)&v269 + 1, (long long *)&v273);
        }
        else
        {
          if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_21610A674((unsigned char *)v270, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v254 = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
            *(void *)(v270 + 16) = *((void *)&v273.__r_.__value_.__l + 2);
            _OWORD *v253 = v254;
          }
          uint64_t v255 = (uint64_t)v253 + 24;
        }
        *(void *)&long long v270 = v255;
        if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v272.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v273.__r_.__value_.__l.__data_);
        }
        unint64_t v79 = v96 + 1;
      }
      while (v79 < (uint64_t)(*(void *)(*(void *)(v4 + 104) + 8) - **(void **)(v4 + 104)) >> 3);
    }
    if (v274)
    {
      v275 = v274;
      operator delete(v274);
    }
    if (v277)
    {
      int v278 = v277;
      operator delete(v277);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v281)
    {
      int v282 = v281;
      operator delete(v281);
    }
    (*(void (**)(uint64_t, std::locale *))(v258 + 16))(v258, &v263);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269 + 8;
    sub_21613EFD0((void ***)&__dst);
    if (SBYTE7(v269) < 0) {
      operator delete((void *)v268);
    }
    if ((char)v267 < 0) {
      operator delete(v265);
    }
  }
  v294[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v294 + *(void *)(v294[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166CA430](&v295);
  std::istream::~istream();
  return MEMORY[0x2166CA750](&v296);
}

void sub_2162C88D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  uint64_t v78 = 0;
  uint64_t v79 = v76 - 176;
  while (1)
  {
    if (*(char *)(v79 + v78 + 55) < 0) {
      operator delete(*(void **)(v79 + v78 + 32));
    }
    v78 -= 32;
    if (v78 == -64)
    {
      __cxa_guard_abort(&qword_26797E400);
      if (__p) {
        operator delete(__p);
      }
      if (a73 < 0) {
        operator delete(a72);
      }
      if (a74) {
        operator delete(a74);
      }
      if (a75)
      {
        a76 = (uint64_t)a75;
        operator delete(a75);
      }
      if (a47 < 0) {
        operator delete(a42);
      }
      if (a53 < 0) {
        operator delete(a48);
      }
      if (a55) {
        operator delete(a55);
      }
      if (a58) {
        operator delete(a58);
      }
      if (a66 < 0) {
        operator delete(a61);
      }
      if (a67) {
        operator delete(a67);
      }
      a75 = a13;
      sub_21613EFD0((void ***)&a75);
      if (a35 < 0) {
        operator delete(a30);
      }
      if (a29 < 0) {
        operator delete(a24);
      }
      sub_216130420(&STACK[0x21D0]);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_2162C8BA4(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 64);
  sub_21613EFD0(&v3);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

unint64_t sub_2162C8C00(const char *a1, void **a2, unint64_t a3)
{
  uint64_t v5 = a1;
  int64_t v6 = strlen(a1);
  uint64_t v23 = 0;
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = (unint64_t)&v5[v6];
    unint64_t v9 = a3;
    while (1)
    {
      unint64_t v10 = v9;
      for (uint64_t i = (unsigned __int8 *)v5; ; ++i)
      {
        int v12 = *i;
        if (v12 != 9 && v12 != 32) {
          break;
        }
        ++v5;
      }
      if (v12 == 34)
      {
        BOOL v13 = i + 1;
        uint64_t v23 = i + 1;
        for (uint64_t j = i + 1; (unint64_t)j < v8; ++j)
        {
          int v15 = *j;
          if (v15 == 34)
          {
            int v16 = *++j;
            if (v16 != 34) {
              break;
            }
          }
          *v13++ = v15;
        }
        uint64_t v17 = (unsigned __int8 *)memchr(j, 44, v8 - (void)j);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = (unsigned __int8 *)v8;
        }
      }
      else
      {
        uint64_t v23 = i;
        uint64_t v19 = memchr(i, 44, v8 - (void)v5);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = (unsigned char *)v8;
        }
        uint64_t v18 = &i[v20 - v5];
        BOOL v13 = v18;
      }
      unint64_t v9 = v10 - 1;
      if (v10 < 2)
      {
        unint64_t v22 = a2;
        sub_2161C0344(&v22, &v23);
        if (v10 == 1) {
          return a3;
        }
      }
      else
      {
        *BOOL v13 = 0;
        unint64_t v22 = a2;
        sub_2161C0344(&v22, &v23);
      }
      ++v7;
      uint64_t v5 = (const char *)(v18 + 1);
      if ((unint64_t)(v18 + 1) >= v8) {
        return v7;
      }
    }
  }
  return 0;
}

uint64_t sub_2162C8D6C(uint64_t result, uint64_t a2)
{
  char v9 = 0;
  uint64_t v2 = **(void **)(result + 8);
  uint64_t v3 = *(void *)(*(void *)(result + 8) + 8);
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = ((v3 - v2) >> 5) - 1;
    uint64_t v7 = v2 + 32;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, BOOL, char *))(a2 + 16))(a2, v7 - 32, *(void *)(v7 - 8), v5, v6 == v5, &v9);
      ++v5;
      if (v9) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v7 == v3;
      }
      v7 += 32;
    }
    while (!v8);
  }
  return result;
}

uint64_t sub_2162C8E0C(uint64_t result, uint64_t a2)
{
  char v11 = 0;
  uint64_t v2 = **(void **)(result + 8);
  uint64_t v3 = *(void *)(*(void *)(result + 8) + 8);
  if (v2 != v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = ((v3 - v2) >> 5) - 1;
    uint64_t v8 = v2 + 32;
    do
    {
      char v9 = *(uint64_t ***)(v5 + 16);
      if (*((char *)v9 + 23) < 0) {
        char v9 = (uint64_t **)*v9;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL, char *))(a2 + 16))(a2, v8 - 32, (uint64_t)v9 + 12 * *(unsigned int *)(v8 - 8), v6, v7 == v6, &v11);
      ++v6;
      if (v11) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v8 == v3;
      }
      v8 += 32;
    }
    while (!v10);
  }
  return result;
}

void sub_2162C8ED0(uint64_t a1)
{
  v354[19] = *MEMORY[0x263EF8340];
  uint64_t v330 = 0;
  v331 = &v330;
  uint64_t v332 = 0x4002000000;
  v333 = sub_2162CB1F0;
  int v334 = sub_2162CB214;
  memset(v335, 0, sizeof(v335));
  int v328 = 0;
  v329 = 0;
  v326[0] = 0;
  v326[1] = v326;
  v326[2] = 0x2000000000;
  v326[3] = 0;
  v327 = 0;
  v324[0] = 0;
  v324[1] = v324;
  v324[2] = 0x2000000000;
  int v325 = 0;
  uint64_t v318 = 0;
  v319 = &v318;
  uint64_t v320 = 0x4002000000;
  v321 = sub_2162CB240;
  int v322 = sub_2162CB264;
  memset(v323, 0, sizeof(v323));
  v315[0] = 0;
  v315[1] = v315;
  v315[2] = 0x5002000000;
  void v315[3] = sub_2162CB290;
  v315[4] = sub_2162CB300;
  memset(v316, 0, sizeof(v316));
  int v317 = 1065353216;
  v312[0] = 0;
  v312[1] = v312;
  v312[2] = 0x5002000000;
  v312[3] = sub_2162CB290;
  v312[4] = sub_2162CB300;
  memset(v313, 0, sizeof(v313));
  int v314 = 1065353216;
  v309[0] = 0;
  v309[1] = v309;
  v309[2] = 0x5002000000;
  void v309[3] = sub_2162CB308;
  v309[4] = sub_2162CB378;
  memset(v310, 0, sizeof(v310));
  int v311 = 1065353216;
  uint64_t v301 = 0;
  int v302 = &v301;
  uint64_t v303 = 0x4002000000;
  int v304 = sub_2162CB380;
  v305 = sub_2162CB3A4;
  int v306 = 0;
  v307 = 0;
  uint64_t v308 = 0;
  uint64_t v288 = MEMORY[0x263EF8330];
  uint64_t v289 = 0x40000000;
  int v290 = sub_2162CB3BC;
  v291 = &unk_264267168;
  std::string v292 = v326;
  v293 = v315;
  int v294 = v309;
  uint64_t v295 = &v330;
  uint64_t v296 = v312;
  v297 = v324;
  __int16 v298 = &v318;
  v299 = &v301;
  uint64_t v300 = a1;
  sub_2162C6FD8(a1);
  uint64_t v278 = a1;
  uint64_t v2 = *(uint64_t **)(a1 + 104);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  if (v3 - *v2 == 8)
  {
    uint64_t v5 = v331;
    uint64_t v7 = v331 + 5;
    uint64_t v6 = v331[5];
    uint64_t v8 = v331[6];
    uint64_t v9 = v8 - v6;
    if ((unint64_t)(v8 - v6) >= 0x1FFFFE1)
    {
      BOOL v10 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_216129E78(v10, (uint64_t)"(", 1);
      char v11 = (void *)std::ostream::operator<<();
      int v12 = sub_216129E78(v11, (uint64_t)") [", 3);
      BOOL v13 = sub_216129E78(v12, (uint64_t)"keyTokenPairs.size() <= kMaxTrieEntryCount", 42);
      uint64_t v14 = sub_216129E78(v13, (uint64_t)"] ", 2);
      sub_216129E78(v14, (uint64_t)"trie can hold a maximum of ", 27);
      int v15 = (void *)std::ostream::operator<<();
      sub_216129E78(v15, (uint64_t)" entries.", 9);
      sub_21619FA48();
    }
    if (v8 != v6)
    {
      unsigned int v16 = 0;
      uint64_t v17 = v9 >> 5;
      if ((unint64_t)(v9 >> 5) <= 1) {
        uint64_t v17 = 1;
      }
      uint64_t v18 = (char *)(v6 + 23);
      while ((*v18 & 0x80000000) == 0)
      {
        LODWORD(v19) = *v18;
        if (v16 < v19) {
          goto LABEL_10;
        }
LABEL_11:
        v18 += 32;
        if (!--v17) {
          goto LABEL_116;
        }
      }
      unint64_t v19 = *(void *)(v18 - 15);
      if (v19 <= v16) {
        goto LABEL_11;
      }
LABEL_10:
      unsigned int v16 = v19;
      goto LABEL_11;
    }
    unsigned int v16 = 0;
LABEL_116:
    int v101 = v328;
    if (v328 >= v329)
    {
      unint64_t v103 = v327;
      uint64_t v104 = v328 - v327;
      unint64_t v105 = v104 + 1;
      if ((unint64_t)(v104 + 1) >> 62) {
        sub_21610CB04();
      }
      uint64_t v106 = (char *)v329 - (char *)v327;
      if (((char *)v329 - (char *)v327) >> 1 > v105) {
        unint64_t v105 = v106 >> 1;
      }
      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v107 = v105;
      }
      if (v107)
      {
        unint64_t v108 = (char *)sub_2161129B4((uint64_t)&v329, v107);
        unint64_t v103 = v327;
        int v101 = v328;
      }
      else
      {
        unint64_t v108 = 0;
      }
      uint64_t v109 = (unsigned int *)&v108[4 * v104];
      uint64_t v110 = &v108[4 * v107];
      unsigned int *v109 = v16;
      uint64_t v102 = v109 + 1;
      while (v101 != v103)
      {
        unsigned int v111 = *--v101;
        *--uint64_t v109 = v111;
      }
      v327 = v109;
      int v328 = v102;
      v329 = (unsigned int *)v110;
      if (v103) {
        operator delete(v103);
      }
    }
    else
    {
      *int v328 = v16;
      uint64_t v102 = v101 + 1;
    }
    int v328 = v102;
    unint64_t v112 = (void **)v5[5];
    uint64_t v113 = (__n128 *)v5[6];
    if ((char *)v113 - (char *)v112 < 1)
    {
LABEL_136:
      uint64_t v118 = 0;
      unint64_t v115 = 0;
    }
    else
    {
      std::string::size_type v114 = (const std::nothrow_t *)MEMORY[0x263F8C180];
      unint64_t v115 = ((char *)v113 - (char *)v112) >> 5;
      while (1)
      {
        int v116 = (__n128 *)operator new(32 * v115, v114);
        if (v116) {
          break;
        }
        BOOL v117 = v115 > 1;
        v115 >>= 1;
        if (!v117) {
          goto LABEL_136;
        }
      }
      uint64_t v118 = v116;
    }
    sub_2162D0014(v112, v113, ((char *)v113 - (char *)v112) >> 5, v118, v115);
    if (v118) {
      operator delete(v118);
    }
    memset(v343, 0, 24);
    memset(&__p, 0, sizeof(__p));
    v341 = 0;
    int v342 = 0;
    long long v338 = 0uLL;
    unint64_t v339 = 0;
    v340.__locale_ = 0;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C6BE110;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
    sub_2162CCCC0((uint64_t)&__dst, (uint64_t)&v338);
    uint64_t v119 = v5[6];
    if (v119 == v5[5])
    {
      int v124 = 0;
      unsigned int v123 = 0;
      goto LABEL_245;
    }
    uint64_t v120 = 0;
    unsigned int v121 = 0;
    unsigned int v122 = 0;
    unsigned int v123 = 0;
    int v124 = 0;
    std::string v271 = v7;
    uint64_t v119 = v5[5];
LABEL_142:
    if (!v121) {
      goto LABEL_162;
    }
    char v125 = (unsigned __int8 **)(v119 + 32 * v120);
    uint64_t v126 = v343[23];
    if (v343[23] >= 0) {
      uint64_t v127 = (unsigned __int8 *)v343[23];
    }
    else {
      uint64_t v127 = *(unsigned __int8 **)&v343[8];
    }
    unint64_t v128 = (unsigned __int8 *)*((unsigned __int8 *)v125 + 23);
    int v129 = (char)v128;
    if ((char)v128 < 0) {
      unint64_t v128 = v125[1];
    }
    if (v127 == v128)
    {
      if (v129 >= 0) {
        uint64_t v130 = (unsigned __int8 *)(v119 + 32 * v120);
      }
      else {
        uint64_t v130 = *v125;
      }
      if ((v343[23] & 0x80) == 0)
      {
        if (v343[23])
        {
          unint64_t v131 = v343;
          while (*v131 == *v130)
          {
            ++v131;
            ++v130;
            if (!--v126) {
              goto LABEL_162;
            }
          }
          goto LABEL_159;
        }
LABEL_162:
        if (++v124 >= 0x100)
        {
          __int16 v136 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
          sub_216129E78(v136, (uint64_t)"(", 1);
          char v137 = (void *)std::ostream::operator<<();
          int v138 = sub_216129E78(v137, (uint64_t)") [", 3);
          char v139 = sub_216129E78(v138, (uint64_t)"homographCount <= kMaxHomographEntryCount", 41);
          char v140 = sub_216129E78(v139, (uint64_t)"] ", 2);
          sub_216129E78(v140, (uint64_t)"number of homograph words is greater than ", 42);
          char v141 = (void *)std::ostream::operator<<();
          unint64_t v142 = sub_216129E78(v141, (uint64_t)". string =", 10);
          if (v343[23] >= 0) {
            int v143 = v343;
          }
          else {
            int v143 = *(unsigned char **)v343;
          }
          if (v343[23] >= 0) {
            uint64_t v144 = v343[23];
          }
          else {
            uint64_t v144 = *(void *)&v343[8];
          }
          uint64_t v145 = sub_216129E78(v142, (uint64_t)v143, v144);
          sub_216129E78(v145, (uint64_t)" count=", 7);
          std::ostream::operator<<();
          sub_21619FA48();
        }
        goto LABEL_242;
      }
      if (!memcmp(*(const void **)v343, v130, *(size_t *)&v343[8])) {
        goto LABEL_162;
      }
    }
LABEL_159:
    unsigned int v277 = v123;
    uint64_t v132 = v123;
    uint64_t v133 = v119 + 32 * v123;
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    unsigned int v276 = v122;
    unsigned int v275 = v121;
    int v273 = v124;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v146 = sub_2161BAB5C((uint64_t *)&__p, (long long *)v133);
      unsigned int v147 = v277;
    }
    else
    {
      if (*(char *)(v133 + 23) < 0)
      {
        sub_21610A674((unsigned char *)__p.__r_.__value_.__l.__size_, *(void **)v133, *(void *)(v133 + 8));
      }
      else
      {
        long long v135 = *(_OWORD *)v133;
        *(void *)(__p.__r_.__value_.__l.__size_ + 16) = *(void *)(v133 + 16);
        *(_OWORD *)std::string::size_type size = v135;
      }
      std::string::size_type v146 = size + 24;
      unsigned int v147 = v277;
    }
    __p.__r_.__value_.__l.__size_ = v146;
    uint64_t v148 = *v7 + 32 * v132;
    unint64_t v149 = v147 + 1;
    while (1)
    {
      while (1)
      {
        uint64_t v150 = v5[5];
        if (v149 >= (v5[6] - v150) >> 5)
        {
          LOBYTE(size) = 1;
LABEL_222:
          std::string::size_type v167 = (unsigned __int8 *)(v338 + 3 * v276);
          int v168 = v167[1];
          int v169 = *v167;
          int v170 = v167[2];
          if (size) {
            int v171 = 2048;
          }
          else {
            int v171 = 0;
          }
          int v172 = v273 + (v277 << 12) + v171 + (v168 << 8) + (v169 << 9) + (v170 << 10);
          __int16 v173 = v341;
          unsigned int v121 = v275;
          if (v341 >= v342)
          {
            locale = v340.__locale_;
            uint64_t v176 = (v341 - v340.__locale_) >> 2;
            unint64_t v177 = v176 + 1;
            uint64_t v7 = v271;
            if ((unint64_t)(v176 + 1) >> 62) {
              sub_21610CB04();
            }
            uint64_t v178 = v342 - v340.__locale_;
            if ((v342 - v340.__locale_) >> 1 > v177) {
              unint64_t v177 = v178 >> 1;
            }
            if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v179 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v179 = v177;
            }
            if (v179)
            {
              int v180 = (char *)sub_2161129B4((uint64_t)&v342, v179);
              locale = v340.__locale_;
              __int16 v173 = v341;
            }
            else
            {
              int v180 = 0;
            }
            uint64_t v181 = (std::locale::__imp *)&v180[4 * v176];
            *(_DWORD *)uint64_t v181 = v172;
            uint64_t v174 = (std::locale::__imp *)((char *)v181 + 4);
            while (v173 != locale)
            {
              int v182 = *((_DWORD *)v173 - 1);
              __int16 v173 = (std::locale::__imp *)((char *)v173 - 4);
              *((_DWORD *)v181 - 1) = v182;
              uint64_t v181 = (std::locale::__imp *)((char *)v181 - 4);
            }
            v340.__locale_ = v181;
            v341 = v174;
            int v342 = (std::locale::__imp *)&v180[4 * v179];
            if (locale) {
              operator delete(locale);
            }
          }
          else
          {
            *(_DWORD *)v341 = v172;
            uint64_t v174 = (std::locale::__imp *)((char *)v173 + 4);
            uint64_t v7 = v271;
          }
          v341 = v174;
          unsigned int v122 = v276 + 1;
          int v124 = 1;
          unsigned int v123 = v275;
LABEL_242:
          std::string::operator=((std::string *)v343, (const std::string *)(*v7 + 32 * v120));
          uint64_t v119 = v5[5];
          uint64_t v120 = ++v121;
          if (v121 >= (unint64_t)((v5[6] - v119) >> 5))
          {
LABEL_245:
            uint64_t v183 = v119 + 32 * v123;
            int v184 = (_OWORD *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v186 = sub_2161BAB5C((uint64_t *)&__p, (long long *)v183);
            }
            else
            {
              if (*(char *)(v183 + 23) < 0)
              {
                sub_21610A674((unsigned char *)__p.__r_.__value_.__l.__size_, *(void **)v183, *(void *)(v183 + 8));
              }
              else
              {
                long long v185 = *(_OWORD *)v183;
                *(void *)(__p.__r_.__value_.__l.__size_ + 16) = *(void *)(v183 + 16);
                *int v184 = v185;
              }
              std::string::size_type v186 = (std::string::size_type)v184 + 24;
            }
            __p.__r_.__value_.__l.__size_ = v186;
            int v187 = v124
                 + (v123 << 12)
                 + (*(unsigned __int8 *)(*((void *)&v338 + 1) - 2) << 8)
                 + (*(unsigned __int8 *)(*((void *)&v338 + 1) - 3) << 9)
                 + (*(unsigned __int8 *)(*((void *)&v338 + 1) - 1) << 10)
                 + 2048;
            uint64_t v188 = v341;
            if (v341 >= v342)
            {
              unint64_t v190 = v340.__locale_;
              uint64_t v191 = (v341 - v340.__locale_) >> 2;
              unint64_t v192 = v191 + 1;
              if ((unint64_t)(v191 + 1) >> 62) {
                sub_21610CB04();
              }
              uint64_t v193 = v342 - v340.__locale_;
              if ((v342 - v340.__locale_) >> 1 > v192) {
                unint64_t v192 = v193 >> 1;
              }
              if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v194 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v194 = v192;
              }
              if (v194)
              {
                uint64_t v195 = (char *)sub_2161129B4((uint64_t)&v342, v194);
                unint64_t v190 = v340.__locale_;
                uint64_t v188 = v341;
              }
              else
              {
                uint64_t v195 = 0;
              }
              uint64_t v196 = (std::locale::__imp *)&v195[4 * v191];
              uint64_t v197 = &v195[4 * v194];
              *(_DWORD *)uint64_t v196 = v187;
              uint64_t v189 = (std::locale::__imp *)((char *)v196 + 4);
              while (v188 != v190)
              {
                int v198 = *((_DWORD *)v188 - 1);
                uint64_t v188 = (std::locale::__imp *)((char *)v188 - 4);
                *((_DWORD *)v196 - 1) = v198;
                uint64_t v196 = (std::locale::__imp *)((char *)v196 - 4);
              }
              v340.__locale_ = v196;
              v341 = v189;
              int v342 = (std::locale::__imp *)v197;
              if (v190) {
                operator delete(v190);
              }
            }
            else
            {
              *(_DWORD *)v341 = v187;
              uint64_t v189 = (std::locale::__imp *)((char *)v188 + 4);
            }
            v341 = v189;
            sub_216354FF4((uint64_t *)&v336, (uint64_t **)&__p, &v340);
            unint64_t v199 = *(void *)(v278 + 176);
            size_t v200 = *(void ****)(v278 + 168);
            if ((unint64_t)v200 >= v199)
            {
              uint64_t v201 = *(void **)(v278 + 160);
              uint64_t v202 = v200 - (void ***)v201;
              if ((unint64_t)(v202 + 1) >> 61) {
                sub_21610CB04();
              }
              unint64_t v203 = v199 - (void)v201;
              unint64_t v204 = (uint64_t)(v199 - (void)v201) >> 2;
              if (v204 <= v202 + 1) {
                unint64_t v204 = v202 + 1;
              }
              if (v203 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v205 = v204;
              }
              v353[0] = v278 + 176;
              if (v205)
              {
                int v206 = (char *)sub_2160FFAA8(v278 + 176, v205);
                uint64_t v201 = *(void **)(v278 + 160);
                size_t v200 = *(void ****)(v278 + 168);
              }
              else
              {
                int v206 = 0;
              }
              uint64_t v207 = (void ***)&v206[8 * v202];
              uint64_t v208 = &v206[8 * v205];
              int v352 = v208;
              *uint64_t v207 = v336;
              char v209 = v207 + 1;
              int v336 = 0;
              v351.__r_.__value_.__r.__wordUChar s[2] = (std::string::size_type)(v207 + 1);
              if (v200 != v201)
              {
                do
                {
                  long long v210 = *--v200;
                  *--uint64_t v207 = v210;
                  *size_t v200 = 0;
                }
                while (v200 != v201);
                char v209 = (void *)v351.__r_.__value_.__r.__words[2];
                uint64_t v208 = v352;
              }
              long long v211 = *(_OWORD *)(v278 + 160);
              *(void *)(v278 + 16sub_216195244(&a9, 0) = v207;
              *(void *)(v278 + 168) = v209;
              *(_OWORD *)&v351.__r_.__value_.__r.__words[1] = v211;
              std::string v212 = *(char **)(v278 + 176);
              *(void *)(v278 + 176) = v208;
              int v352 = v212;
              v351.__r_.__value_.__r.__words[0] = v211;
              sub_2162CF808((uint64_t)&v351);
              std::string v213 = v336;
              *(void *)(v278 + 168) = v209;
              if (v213) {
                sub_21628D4F4(v213);
              }
            }
            else
            {
              *size_t v200 = v336;
              *(void *)(v278 + 168) = v200 + 1;
            }
            if ((void)v338)
            {
              *((void *)&v338 + 1) = v338;
              operator delete((void *)v338);
            }
            if (v340.__locale_)
            {
              v341 = v340.__locale_;
              operator delete(v340.__locale_);
            }
            v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            sub_21613EFD0((void ***)&v351);
            if ((v343[23] & 0x80000000) != 0) {
              operator delete(*(void **)v343);
            }
            uint64_t v214 = v331[5];
            for (uint64_t i = v331[6]; v214 != i; v214 += 32)
            {
              std::string::append((std::string *)(v278 + 112), *(const std::string::value_type **)(v214 + 24), 0xCuLL);
              uint64_t v216 = *(void *)(v214 + 24);
              if (v216) {
                MEMORY[0x2166CA800](v216, 0x1000C403E1C8BA9);
              }
            }
            goto LABEL_293;
          }
          goto LABEL_142;
        }
        std::string::value_type v151 = (long long *)(v150 + 32 * v149);
        if (*((char *)v151 + 23) < 0)
        {
          sub_21610A674(&v351, *(void **)v151, *((void *)v151 + 1));
        }
        else
        {
          long long v152 = *v151;
          v351.__r_.__value_.__r.__wordUChar s[2] = *((void *)v151 + 2);
          *(_OWORD *)&v351.__r_.__value_.__l.__data_ = v152;
        }
        char v153 = *(unsigned char *)(v148 + 23);
        std::string::size_type v154 = v153 >= 0 ? *(unsigned __int8 *)(v148 + 23) : *(void *)(v148 + 8);
        size_t v155 = HIBYTE(v351.__r_.__value_.__r.__words[2]);
        std::string::size_type v156 = v351.__r_.__value_.__l.__size_;
        std::string::size_type v157 = (v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? HIBYTE(v351.__r_.__value_.__r.__words[2])
             : v351.__r_.__value_.__l.__size_;
        if (v154 == v157) {
          break;
        }
LABEL_195:
        if ((v155 & 0x80) != 0)
        {
          if (v154 == -1) {
LABEL_343:
          }
            sub_21619AAE4();
          if (v156 >= v154) {
            size_t v161 = v154;
          }
          else {
            size_t v161 = v156;
          }
          unint64_t v162 = (std::string *)v351.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v154 == -1) {
            goto LABEL_343;
          }
          if (v155 >= v154) {
            size_t v161 = v154;
          }
          else {
            size_t v161 = v155;
          }
          unint64_t v162 = &v351;
        }
        if (v153 >= 0) {
          uint64_t v164 = (const void *)v148;
        }
        else {
          uint64_t v164 = *(const void **)v148;
        }
        int v165 = memcmp(v162, v164, v161);
        char v163 = 0;
        LOBYTE(size) = v161 != v154 || v165 != 0;
        if ((v155 & 0x80) == 0) {
          goto LABEL_219;
        }
LABEL_202:
        operator delete(v351.__r_.__value_.__l.__data_);
        if ((v163 & 1) == 0) {
          goto LABEL_222;
        }
      }
      if ((v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v158 = &v351;
      }
      else {
        uint64_t v158 = (std::string *)v351.__r_.__value_.__r.__words[0];
      }
      if ((*(unsigned char *)(v148 + 23) & 0x80) != 0)
      {
        if (memcmp(*(const void **)v148, v158, *(void *)(v148 + 8))) {
          goto LABEL_195;
        }
      }
      else if (*(unsigned char *)(v148 + 23))
      {
        uint64_t v159 = (unsigned __int8 *)v148;
        uint64_t v160 = *(unsigned __int8 *)(v148 + 23);
        while (*v159 == v158->__r_.__value_.__s.__data_[0])
        {
          ++v159;
          uint64_t v158 = (std::string *)((char *)v158 + 1);
          if (!--v160) {
            goto LABEL_201;
          }
        }
        goto LABEL_195;
      }
LABEL_201:
      ++v149;
      char v163 = 1;
      if ((v155 & 0x80) != 0) {
        goto LABEL_202;
      }
LABEL_219:
      if ((v163 & 1) == 0) {
        goto LABEL_222;
      }
    }
  }
  uint64_t v20 = v319;
  unsigned int v21 = v302;
  if (v319[6] == v319[5])
  {
    unint64_t v22 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_216129E78(v22, (uint64_t)"(", 1);
    uint64_t v23 = (void *)std::ostream::operator<<();
    uint64_t v24 = sub_216129E78(v23, (uint64_t)") [", 3);
    uint64_t v25 = sub_216129E78(v24, (uint64_t)"allKeys.size()", 14);
    unint64_t v26 = sub_216129E78(v25, (uint64_t)"] ", 2);
    sub_216129E78(v26, (uint64_t)"no reading error. ", 18);
    sub_21619FA48();
  }
  if (v3 != v4)
  {
    unint64_t v27 = 0;
    long long v270 = v302;
    do
    {
      unint64_t v28 = (int *)(v4 + 8 * v27);
      int v29 = *v28;
      v340.__locale_ = 0;
      v341 = 0;
      int v342 = 0;
      memset(v343, 0, sizeof(v343));
      LODWORD(v344) = 1065353216;
      uint64_t v30 = v20[5];
      uint64_t v31 = v20[6];
      int v274 = v29;
      if (v31 == v30)
      {
        uint64_t v60 = 0;
        uint64_t v59 = 0;
        unsigned int v34 = 0;
        goto LABEL_65;
      }
      uint64_t v272 = v4;
      uint64_t v32 = 0;
      unint64_t v33 = 0;
      unsigned int v34 = 0;
      do
      {
        uint64_t v35 = *(void *)(v30 + v32) + 24 * v27;
        if (*(_DWORD *)(*(void *)(v278 + 104) + 40) != 1 && *v28 == 1) {
          goto LABEL_32;
        }
        uint64_t v37 = *(unsigned __int8 *)(v35 + 23);
        int v38 = (char)v37;
        if ((v37 & 0x80u) != 0) {
          uint64_t v37 = *(void *)(v35 + 8);
        }
        if (v37 != 1
          || (v38 >= 0
            ? (uint64_t v39 = (const std::string::value_type *)(*(void *)(v30 + v32) + 24 * v27))
            : (uint64_t v39 = *(const std::string::value_type **)v35),
              *v39 != 42))
        {
LABEL_32:
          int v40 = *(_DWORD *)(v30 + v32 + 24);
          sub_2162CBB20(&v351);
          int v41 = *(char *)(v35 + 23);
          if (v41 >= 0) {
            uint64_t v42 = (const std::string::value_type *)v35;
          }
          else {
            uint64_t v42 = *(const std::string::value_type **)v35;
          }
          if (v41 >= 0) {
            std::string::size_type v43 = *(unsigned __int8 *)(v35 + 23);
          }
          else {
            std::string::size_type v43 = *(void *)(v35 + 8);
          }
          uint64_t v44 = std::string::insert(&v351, 0, v42, v43);
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          unint64_t v339 = v44->__r_.__value_.__r.__words[2];
          long long v338 = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__wordUChar s[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v351.__r_.__value_.__l.__data_);
          }
          if (!sub_21618241C(v343, (unsigned __int8 *)&v338))
          {
            sub_2162CF900((uint64_t *)v343, (unsigned __int8 *)&v338, (uint64_t)&v338);
            if (*(char *)(v35 + 23) < 0)
            {
              sub_21610A674(&__p, *(void **)v35, *(void *)(v35 + 8));
            }
            else
            {
              long long v46 = *(_OWORD *)v35;
              __p.__r_.__value_.__r.__wordUChar s[2] = *(void *)(v35 + 16);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
            }
            int v284 = v40;
            long long v47 = v341;
            if (v341 >= v342)
            {
              uint64_t v49 = (v341 - v340.__locale_) >> 5;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 59) {
                sub_2161BA9E4();
              }
              uint64_t v51 = v342 - v340.__locale_;
              if ((v342 - v340.__locale_) >> 4 > v50) {
                unint64_t v50 = v51 >> 4;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v52 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              v353[0] = &v342;
              uint64_t v53 = (char *)sub_216115A58((uint64_t)&v342, v52);
              std::string::size_type v54 = (std::string::size_type)&v53[32 * v49];
              v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
              v351.__r_.__value_.__l.__size_ = v54;
              int v352 = &v53[32 * v55];
              long long v56 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v54 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v54 = v56;
              memset(&__p, 0, sizeof(__p));
              *(_DWORD *)(v54 + 24) = v284;
              v351.__r_.__value_.__r.__wordUChar s[2] = v54 + 32;
              sub_2161BA9FC((uint64_t *)&v340, &v351);
              BOOL v57 = v341;
              sub_21617591C((uint64_t)&v351);
              v341 = v57;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              long long v48 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *((void *)v341 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)long long v47 = v48;
              memset(&__p, 0, sizeof(__p));
              *((_DWORD *)v47 + 6) = v284;
              v341 = (std::locale::__imp *)((char *)v47 + 32);
            }
            if (*(char *)(v35 + 23) < 0)
            {
              unint64_t v58 = *(void *)(v35 + 8);
              if (v58 > v34) {
LABEL_56:
              }
                unsigned int v34 = v58;
            }
            else
            {
              LODWORD(v58) = *(unsigned __int8 *)(v35 + 23);
              if (v34 < v58) {
                goto LABEL_56;
              }
            }
          }
          if (SHIBYTE(v339) < 0) {
            operator delete((void *)v338);
          }
          uint64_t v30 = v20[5];
          uint64_t v31 = v20[6];
        }
        ++v33;
        v32 += 32;
      }
      while (v33 < (v31 - v30) >> 5);
      uint64_t v60 = v340.__locale_;
      uint64_t v59 = v341;
      unsigned int v21 = v270;
      uint64_t v4 = v272;
      int v29 = v274;
LABEL_65:
      if ((unint64_t)(v59 - v60) > 0x1FFFFE0)
      {
        unsigned int v61 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_216129E78(v61, (uint64_t)"(", 1);
        unsigned int v62 = (void *)std::ostream::operator<<();
        uint64_t v63 = sub_216129E78(v62, (uint64_t)") [", 3);
        uint64_t v64 = sub_216129E78(v63, (uint64_t)"keyTokenOffsetPairs.size() <= kMaxTrieEntryCount", 48);
        size_t v65 = sub_216129E78(v64, (uint64_t)"] ", 2);
        sub_216129E78(v65, (uint64_t)"trie can hold a maximum of ", 27);
        uint64_t v66 = (void *)std::ostream::operator<<();
        sub_216129E78(v66, (uint64_t)" entries.", 9);
        sub_21619FA48();
      }
      uint64_t v67 = v328;
      if (v328 >= v329)
      {
        int v69 = v327;
        uint64_t v70 = v328 - v327;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v72 = (char *)v329 - (char *)v327;
        if (((char *)v329 - (char *)v327) >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          unsigned int v74 = (char *)sub_2161129B4((uint64_t)&v329, v73);
          int v69 = v327;
          uint64_t v67 = v328;
        }
        else
        {
          unsigned int v74 = 0;
        }
        BOOL v75 = (unsigned int *)&v74[4 * v70];
        *BOOL v75 = v34;
        uint64_t v68 = v75 + 1;
        while (v67 != v69)
        {
          unsigned int v76 = *--v67;
          *--BOOL v75 = v76;
        }
        v327 = v75;
        int v328 = v68;
        v329 = (unsigned int *)&v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        *int v328 = v34;
        uint64_t v68 = v67 + 1;
      }
      int v328 = v68;
      sub_2162CCF68((uint64_t *)&v340);
      sub_2162CD0C4((void *)v278, (uint64_t *)&v340, v29 == 1);
      if (*(unsigned char *)(**(void **)(v278 + 104) + 8 * v27 + 5))
      {
        long long v338 = 0uLL;
        unint64_t v339 = 0;
        uint64_t v77 = v20[5];
        if (v20[6] != v77)
        {
          uint64_t v78 = 0;
          unint64_t v79 = 0;
          std::string::size_type v80 = (unsigned char *)(v4 + 8 * v27 + 4);
          do
          {
            uint64_t v81 = *(void *)(v77 + v78) + 24 * v27;
            if (*(char *)(v81 + 23) < 0)
            {
              sub_21610A674(&__dst, *(void **)v81, *(void *)(v81 + 8));
            }
            else
            {
              long long v82 = *(_OWORD *)v81;
              __dst.__r_.__value_.__r.__wordUChar s[2] = *(void *)(v81 + 16);
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v82;
            }
            if (*(void *)(*(void *)(v278 + 104) + 32) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(v278 + 104) + 8)
                                                                                           - **(void **)(v278 + 104)) >> 3))
            {
              unint64_t v83 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
              sub_216129E78(v83, (uint64_t)"(", 1);
              uint64_t v84 = (void *)std::ostream::operator<<();
              int v85 = sub_216129E78(v84, (uint64_t)") [", 3);
              unint64_t v86 = sub_216129E78(v85, (uint64_t)"m_data.indexCount() > m_data.syllableIDIndexCount()", 51);
              uint8x8_t v87 = sub_216129E78(v86, (uint64_t)"] ", 2);
              sub_216129E78(v87, (uint64_t)"trie must hold at least one one non-syllable index", 50);
              sub_21619FA48();
            }
            if ((*(_DWORD *)(v21[5] + 4 * v79) & 0x10000) != 0)
            {
              if (*v80)
              {
                sub_2162CCB80(&v351, (const void **)&__dst.__r_.__value_.__l.__data_);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                std::string __dst = v351;
              }
              int v88 = *(_DWORD *)(v20[5] + v78 + 24);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                sub_21610A674(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
              }
              else {
                std::string __p = __dst;
              }
              int v284 = v88;
              uint64_t v89 = *((void *)&v338 + 1);
              if (*((void *)&v338 + 1) >= v339)
              {
                uint64_t v91 = (uint64_t)(*((void *)&v338 + 1) - v338) >> 5;
                unint64_t v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 59) {
                  sub_2161BA9E4();
                }
                uint64_t v93 = v339 - v338;
                if ((uint64_t)(v339 - v338) >> 4 > v92) {
                  unint64_t v92 = v93 >> 4;
                }
                if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v94 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v94 = v92;
                }
                v353[0] = &v339;
                int64_t v95 = (char *)sub_216115A58((uint64_t)&v339, v94);
                std::string::size_type v96 = (std::string::size_type)&v95[32 * v91];
                v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
                v351.__r_.__value_.__l.__size_ = v96;
                int v352 = &v95[32 * v97];
                long long v98 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(void *)(v96 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)std::string::size_type v96 = v98;
                memset(&__p, 0, sizeof(__p));
                *(_DWORD *)(v96 + 24) = v284;
                v351.__r_.__value_.__r.__wordUChar s[2] = v96 + 32;
                sub_2161BA9FC((uint64_t *)&v338, &v351);
                uint64_t v99 = *((void *)&v338 + 1);
                sub_21617591C((uint64_t)&v351);
                *((void *)&v338 + 1) = v99;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v90 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(void *)(*((void *)&v338 + 1) + 16) = *((void *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v89 = v90;
                memset(&__p, 0, sizeof(__p));
                *(_DWORD *)(v89 + 24) = v284;
                *((void *)&v338 + 1) = v89 + 32;
              }
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            ++v79;
            uint64_t v77 = v20[5];
            v78 += 32;
          }
          while (v79 < (v20[6] - v77) >> 5);
        }
        sub_2162CCF68((uint64_t *)&v338);
        sub_2162CD0C4((void *)v278, (uint64_t *)&v338, v274 == 1);
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
        sub_216175BF4((void ***)&v351);
      }
      sub_2161A6A48((uint64_t)v343);
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
      sub_216175BF4((void ***)&v351);
      ++v27;
      int v100 = *(uint64_t **)(v278 + 104);
      uint64_t v4 = *v100;
    }
    while (v27 < (v100[1] - *v100) >> 3);
  }
LABEL_293:
  while (1)
  {
    int v217 = *(char *)(v278 + 135);
    if ((v217 & 0x80000000) == 0) {
      break;
    }
    uint64_t v218 = *(void *)(v278 + 120);
    if ((v218 & 7) == 0) {
      goto LABEL_298;
    }
LABEL_297:
    LODWORD(v351.__r_.__value_.__r.__words[1]) = 0;
    v351.__r_.__value_.__r.__words[0] = 0;
    std::string::append((std::string *)(v278 + 112), (const std::string::value_type *)&v351, 0xCuLL);
  }
  if ((v217 & 7) != 0) {
    goto LABEL_297;
  }
  LODWORD(v218) = *(unsigned __int8 *)(v278 + 135);
LABEL_298:
  if (*(char *)(v278 + 159) < 0) {
    uint64_t v219 = *(void *)(v278 + 144);
  }
  else {
    LODWORD(v219) = *(unsigned __int8 *)(v278 + 159);
  }
  unsigned int v220 = *(_DWORD *)(*(void *)(v278 + 104) + 40);
  BOOL v117 = v220 > 0xF;
  int v221 = (1 << v220) & 0x9040;
  int v223 = !v117 && v221 != 0;
  sub_216157A4C((uint64_t *)&v351);
  if ((*((unsigned char *)v353 + *(void *)(v351.__r_.__value_.__r.__words[0] - 24)) & 5) != 0)
  {
    uint64_t v224 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_216129E78(v224, (uint64_t)"(", 1);
    uint64_t v225 = (void *)std::ostream::operator<<();
    __int16 v226 = sub_216129E78(v225, (uint64_t)") [", 3);
    int v227 = sub_216129E78(v226, (uint64_t)"out", 3);
    __int16 v228 = sub_216129E78(v227, (uint64_t)"] ", 2);
    v229 = sub_216129E78(v228, (uint64_t)"permission denied: ", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v229 + *(void *)(*v229 - 24)));
    uint64_t v230 = std::locale::use_facet((const std::locale *)v343, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v230->__vftable[2].~facet_0)(v230, 10);
    std::locale::~locale((std::locale *)v343);
    std::ostream::put();
    std::ostream::flush();
    sub_21619FA48();
  }
  uint64_t v231 = *(void *)(v278 + 104);
  unsigned int v232 = *(_DWORD *)(v231 + 40);
  uint64_t v233 = (*(void *)(v231 + 8) - *(void *)v231) >> 3;
  int v234 = *(_DWORD *)(v278 + 96);
  LODWORD(__p.__r_.__value_.__l.__data_) = 105;
  HIDWORD(__p.__r_.__value_.__r.__words[0]) = v234;
  __p.__r_.__value_.__l.__size_ = __PAIR64__(v218, v232);
  __p.__r_.__value_.__r.__wordUChar s[2] = __PAIR64__(v233, v219);
  int v284 = v223;
  uint64_t v286 = 0;
  uint64_t v285 = 0;
  int v287 = 0;
  std::ostream::write();
  std::string::value_type v235 = (char *)&v351 + *(void *)(v351.__r_.__value_.__r.__words[0] - 24);
  if ((v235[32] & 5) != 0)
  {
    long long v348 = 0u;
    long long v349 = 0u;
    long long v346 = 0u;
    long long v347 = 0u;
    long long v344 = 0u;
    long long v345 = 0u;
    memset(v343, 0, sizeof(v343));
    uint64_t v350 = -1;
    goto LABEL_312;
  }
  (*(void (**)(unsigned char *__return_ptr))(**((void **)v235 + 5) + 32))(v343);
  if ((v350 & 7) != 0)
  {
LABEL_312:
    int v236 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_216129E78(v236, (uint64_t)"(", 1);
    v237 = (void *)std::ostream::operator<<();
    int v238 = sub_216129E78(v237, (uint64_t)") [", 3);
    v239 = sub_216129E78(v238, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
    int v240 = sub_216129E78(v239, (uint64_t)"] ", 2);
    v241 = sub_216129E78(v240, (uint64_t)"header is not aligned: ", 23);
    std::ios_base::getloc((const std::ios_base *)((char *)v241 + *(void *)(*v241 - 24)));
    int v242 = std::locale::use_facet(&v340, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v242->__vftable[2].~facet_0)(v242, 10);
    std::locale::~locale(&v340);
    std::ostream::put();
    std::ostream::flush();
    sub_21619FA48();
  }
  uint64_t v243 = (void *)v278;
  if (*(void *)(*(void *)(v278 + 104) + 8) != **(void **)(v278 + 104))
  {
    unint64_t v244 = 0;
    uint64_t v245 = 0;
    uint64_t v246 = 5;
    do
    {
      LODWORD(v338) = 0;
      LODWORD(v338) = v327[v244];
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v336) = 0;
      unsigned int v282 = 0;
      sub_2162CBD18(v243, v245, &__dst, &v336, &v282);
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      int v281 = 0;
      int v281 = *(unsigned __int8 *)(**(void **)(v278 + 104) + v246);
      uint64_t v280 = 0;
      unsigned int v279 = 0;
      if (v281) {
        sub_2162CBD18((void *)v278, v245 + 1, (_DWORD *)&v280 + 1, &v280, &v279);
      }
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v247 = (char *)&v351 + *(void *)(v351.__r_.__value_.__r.__words[0] - 24);
      if ((v247[32] & 5) != 0)
      {
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v344 = 0u;
        long long v345 = 0u;
        memset(v343, 0, sizeof(v343));
        uint64_t v350 = -1;
LABEL_320:
        int v248 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_216129E78(v248, (uint64_t)"(", 1);
        v249 = (void *)std::ostream::operator<<();
        int v250 = sub_216129E78(v249, (uint64_t)") [", 3);
        v251 = sub_216129E78(v250, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
        uint64_t v252 = sub_216129E78(v251, (uint64_t)"] ", 2);
        v253 = sub_216129E78(v252, (uint64_t)"trie data header is not aligned: ", 33);
        std::ios_base::getloc((const std::ios_base *)((char *)v253 + *(void *)(*v253 - 24)));
        long long v254 = std::locale::use_facet(&v340, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v254->__vftable[2].~facet_0)(v254, 10);
        std::locale::~locale(&v340);
        std::ostream::put();
        std::ostream::flush();
        sub_21619FA48();
      }
      (*(void (**)(unsigned char *__return_ptr))(**((void **)v247 + 5) + 32))(v343);
      if ((v350 & 7) != 0) {
        goto LABEL_320;
      }
      sub_2162CBD90(v278, &v351, v245, v282);
      if (v281 && (sub_2162CBD90(v278, &v351, v245 + 1, v279), v281)) {
        uint64_t v255 = 2;
      }
      else {
        uint64_t v255 = 1;
      }
      v245 += v255;
      ++v244;
      uint64_t v243 = (void *)v278;
      v246 += 8;
    }
    while (v244 < (uint64_t)(*(void *)(*(void *)(v278 + 104) + 8) - **(void **)(v278 + 104)) >> 3);
  }
  std::ostream::write();
  int v256 = (char *)&v351 + *(void *)(v351.__r_.__value_.__r.__words[0] - 24);
  if ((v256[32] & 5) != 0)
  {
    long long v348 = 0u;
    long long v349 = 0u;
    long long v346 = 0u;
    long long v347 = 0u;
    long long v344 = 0u;
    long long v345 = 0u;
    memset(v343, 0, sizeof(v343));
    uint64_t v350 = -1;
    goto LABEL_329;
  }
  (*(void (**)(unsigned char *__return_ptr))(**((void **)v256 + 5) + 32))(v343);
  if ((v350 & 7) != 0)
  {
LABEL_329:
    v257 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_216129E78(v257, (uint64_t)"(", 1);
    uint64_t v258 = (void *)std::ostream::operator<<();
    v259 = sub_216129E78(v258, (uint64_t)") [", 3);
    uint64_t v260 = sub_216129E78(v259, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
    uint64_t v261 = sub_216129E78(v260, (uint64_t)"] ", 2);
    unint64_t v262 = sub_216129E78(v261, (uint64_t)"token buffer is not aligned: ", 29);
    std::ios_base::getloc((const std::ios_base *)((char *)v262 + *(void *)(*v262 - 24)));
    std::locale v263 = std::locale::use_facet(&v340, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v263->__vftable[2].~facet_0)(v263, 10);
    std::locale::~locale(&v340);
    std::ostream::put();
    std::ostream::flush();
    sub_21619FA48();
  }
  std::ostream::write();
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)&v351 + *(void *)(v351.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)v353 + *(void *)(v351.__r_.__value_.__r.__words[0] - 24)) | 4);
  }
  int v264 = *(char *)(v278 + 95);
  if (v264 >= 0) {
    uint64_t v265 = v278 + 72;
  }
  else {
    uint64_t v265 = *(void *)(v278 + 72);
  }
  if (v264 >= 0) {
    uint64_t v266 = *(unsigned __int8 *)(v278 + 95);
  }
  else {
    uint64_t v266 = *(void *)(v278 + 80);
  }
  unsigned __int8 v267 = sub_216129E78(MEMORY[0x263F8C100], v265, v266);
  long long v268 = sub_216129E78(v267, (uint64_t)" compiled successfully.", 23);
  std::ios_base::getloc((const std::ios_base *)((char *)v268 + *(void *)(*v268 - 24)));
  long long v269 = std::locale::use_facet((const std::locale *)v343, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v269->__vftable[2].~facet_0)(v269, 10);
  std::locale::~locale((std::locale *)v343);
  std::ostream::put();
  std::ostream::flush();
  v351.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B0];
  *(std::string::size_type *)((char *)v351.__r_.__value_.__r.__words
                            + *(void *)(v351.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B0]
                                                                                               + 24);
  MEMORY[0x2166CA430](&v351.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x2166CA750](v354);
  _Block_object_dispose(&v301, 8);
  if (v306)
  {
    v307 = v306;
    operator delete(v306);
  }
  _Block_object_dispose(v309, 8);
  sub_2161A6A48((uint64_t)v310);
  _Block_object_dispose(v312, 8);
  sub_2161E05C4((uint64_t)v313);
  _Block_object_dispose(v315, 8);
  sub_2161E05C4((uint64_t)v316);
  _Block_object_dispose(&v318, 8);
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
  sub_21613F4F0((void ***)&v351);
  _Block_object_dispose(v324, 8);
  _Block_object_dispose(v326, 8);
  if (v327)
  {
    int v328 = v327;
    operator delete(v327);
  }
  _Block_object_dispose(&v330, 8);
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v335;
  sub_2162CEBE4((void ***)&v351);
}

void sub_2162CAE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,void *a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  size_t v65 = *(void **)(v63 + 416);
  if (v65)
  {
    *(void *)(v63 + 424) = v65;
    operator delete(v65);
  }
  uint64_t v66 = *(void **)(v63 + 440);
  if (v66)
  {
    *(void *)(v63 + 448) = v66;
    operator delete(v66);
  }
  *(void *)(v63 + 44sub_216195244(&a9, 0) = &__p;
  sub_21613EFD0((void ***)&STACK[0x368]);
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete(*(void **)(v63 + 464));
  }
  _Block_object_dispose(&a45, 8);
  if (a50)
  {
    a51 = a50;
    operator delete(a50);
  }
  _Block_object_dispose(&a53, 8);
  sub_2161A6A48(a10);
  _Block_object_dispose(&a63, 8);
  sub_2161E05C4(a11);
  _Block_object_dispose(&STACK[0x200], 8);
  sub_2161E05C4(a12);
  _Block_object_dispose(&STACK[0x250], 8);
  *(void *)(v63 + 8sub_216195244(&a9, 0) = a13;
  sub_21613F4F0((void ***)&STACK[0x200]);
  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2B0], 8);
  uint64_t v67 = *(void **)(v63 + 288);
  if (v67)
  {
    *(void *)(v63 + 296) = v67;
    operator delete(v67);
  }
  _Block_object_dispose(&STACK[0x2E8], 8);
  *(void *)(v63 + 8sub_216195244(&a9, 0) = a14;
  sub_2162CEBE4((void ***)&STACK[0x200]);
  _Unwind_Resume(a1);
}

__n128 sub_2162CB1F0(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_216195244(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2162CB214(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_2162CEBE4(&v1);
}

__n128 sub_2162CB240(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_216195244(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2162CB264(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_21613F4F0(&v1);
}

uint64_t sub_2162CB290(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  a2[5] = 0;
  *(void *)(result + 4sub_216195244(&a9, 0) = v2;
  *(void *)(result + 48) = a2[6];
  a2[6] = 0;
  uint64_t v5 = a2[7];
  uint64_t v3 = a2 + 7;
  uint64_t v4 = v5;
  *(void *)(result + 56) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 56;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_2162CB300(uint64_t a1)
{
  return sub_2161E05C4(a1 + 40);
}

uint64_t sub_2162CB308(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  a2[5] = 0;
  *(void *)(result + 4sub_216195244(&a9, 0) = v2;
  *(void *)(result + 48) = a2[6];
  a2[6] = 0;
  uint64_t v5 = a2[7];
  uint64_t v3 = a2 + 7;
  uint64_t v4 = v5;
  *(void *)(result + 56) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 56;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_2162CB378(uint64_t a1)
{
  return sub_2161A6A48(a1 + 40);
}

__n128 sub_2162CB380(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_216195244(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2162CB3A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_2162CB3BC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < 0xFFFFFFFFuLL)
  {
    sub_21618241C((void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), (unsigned __int8 *)(a2 + 40));
    operator new();
  }
  __assert_rtn("compile_block_invoke", "SeaweedChineseDictionaryCompiler.cpp", 664, "featureDataOffset < UINT32_MAX");
}

void sub_2162CBA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162CBB20(void *a1)
{
  sub_216140140((uint64_t)v4);
  std::ostream::operator<<();
  char v9 = 44;
  sub_216129E78(&v5, (uint64_t)&v9, 1);
  std::ostream::operator<<();
  char v9 = 44;
  sub_216129E78(&v5, (uint64_t)&v9, 1);
  std::ostream::operator<<();
  char v9 = 44;
  sub_216129E78(&v5, (uint64_t)&v9, 1);
  std::ostream::operator<<();
  sub_216178BC0((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x263F8C2B8];
  uint64_t v2 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v5 = v2;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166CA750](&v8);
}

void sub_2162CBD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2162CBD18(void *result, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5 = *(_DWORD **)(result[20] + 8 * a2);
  if (v5) {
    LODWORD(v5) = v5[4] - v5[2] + v5[6];
  }
  *a3 = v5;
  *a4 = 0;
  if (*(void *)(result[13] + 8) - *(void *)result[13] != 8)
  {
    uint64_t v6 = result[23] + 24 * a2;
    if (*(char *)(v6 + 23) < 0) {
      uint64_t v6 = *(void *)(v6 + 8);
    }
    else {
      LODWORD(v6) = *(unsigned __int8 *)(v6 + 23);
    }
    *a4 = v6;
  }
  *a5 = ((*a3 + 7) & 0xFFFFFFF8) - *a3;
  return result;
}

void *sub_2162CBD90(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  std::ostream::write();
  if (a4)
  {
    LOBYTE(v24.__locale_) = 0;
    sub_2162C0858(__p, a4, &v24);
    std::ostream::write();
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  char v7 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v7[32] & 5) != 0)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v26 = 0u;
    uint64_t v33 = -1;
    goto LABEL_7;
  }
  __n128 result = (*(void *(**)(void **__return_ptr))(**((void **)v7 + 5) + 32))(__p);
  if ((v33 & 7) != 0)
  {
LABEL_7:
    char v9 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_216129E78(v9, (uint64_t)"(", 1);
    BOOL v10 = (void *)std::ostream::operator<<();
    char v11 = sub_216129E78(v10, (uint64_t)") [", 3);
    int v12 = sub_216129E78(v11, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
    BOOL v13 = sub_216129E78(v12, (uint64_t)"] ", 2);
    uint64_t v14 = sub_216129E78(v13, (uint64_t)"trie data is not aligned: ", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    int v15 = std::locale::use_facet(&v24, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v24);
    std::ostream::put();
    std::ostream::flush();
    sub_21619FA48();
  }
  if (*(void *)(*(void *)(a1 + 104) + 8) - **(void **)(a1 + 104) != 8)
  {
    std::ostream::write();
    unsigned int v16 = (char *)a2 + *(void *)(*a2 - 24);
    if ((v16[32] & 5) != 0)
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v26 = 0u;
      uint64_t v33 = -1;
      goto LABEL_12;
    }
    __n128 result = (*(void *(**)(void **__return_ptr))(**((void **)v16 + 5) + 32))(__p);
    if ((v33 & 7) != 0)
    {
LABEL_12:
      uint64_t v17 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_216129E78(v17, (uint64_t)"(", 1);
      uint64_t v18 = (void *)std::ostream::operator<<();
      unint64_t v19 = sub_216129E78(v18, (uint64_t)") [", 3);
      uint64_t v20 = sub_216129E78(v19, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
      unsigned int v21 = sub_216129E78(v20, (uint64_t)"] ", 2);
      unint64_t v22 = sub_216129E78(v21, (uint64_t)"token index buffer is not aligned: ", 35);
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
      uint64_t v23 = std::locale::use_facet(&v24, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v24);
      std::ostream::put();
      std::ostream::flush();
      sub_21619FA48();
    }
  }
  return result;
}

void sub_2162CC1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, std::locale a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162CC1F8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < 0xFFFFFFFFuLL)
  {
    sub_21618241C((void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), (unsigned __int8 *)(a2 + 40));
    operator new();
  }
  __assert_rtn("validate_block_invoke", "SeaweedChineseDictionaryCompiler.cpp", 819, "featureOffset < UINT32_MAX");
}

void sub_2162CC978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 113) < 0) {
    operator delete(*(void **)(v32 - 136));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162CCA08(uint64_t a1, char **a2, unsigned char *a3)
{
  BOOL result = sub_2162CCA80(a2[1], *(unsigned __int8 **)(a1 + 40));
  if (result)
  {
    char v7 = *(uint64_t **)(a1 + 48);
    uint64_t v8 = *v7;
    uint64_t v9 = *((unsigned int *)v7 + 2);
    if (v8 == *(void *)*a2 && v9 == *((_DWORD *)*a2 + 2))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
  return result;
}

BOOL sub_2162CCA80(char *__src, unsigned __int8 *a2)
{
  if (*(_WORD *)__src)
  {
    size_t v3 = 0;
    do
    {
      int v4 = *(unsigned __int16 *)&__src[v3 + 2];
      v3 += 2;
    }
    while (v4);
  }
  else
  {
    size_t v3 = 0;
  }
  sub_21612F5FC(&__s1, __src, v3);
  if ((v22 & 0x80u) == 0) {
    size_t v5 = v22;
  }
  else {
    size_t v5 = __n;
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 == v6)
  {
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(unsigned __int8 **)a2;
    }
    if ((v22 & 0x80) != 0)
    {
      uint64_t v18 = __s1;
      BOOL v17 = memcmp(__s1, v8, __n) == 0;
      goto LABEL_28;
    }
    if (!v22) {
      return 1;
    }
    uint64_t v9 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      int v12 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v11 = v12;
      int v14 = *v8++;
      int v13 = v14;
      BOOL v16 = v9-- != 0;
      BOOL v17 = v11 == v13;
    }
    while (v11 == v13 && v16);
  }
  else
  {
    BOOL v17 = 0;
  }
  if ((v22 & 0x80) != 0)
  {
    uint64_t v18 = __s1;
LABEL_28:
    operator delete(v18);
  }
  return v17;
}

void sub_2162CCB80(void *a1, const void **a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    int v4 = a2;
    a2 = (const void **)*a2;
    uint64_t v3 = (uint64_t)v4[1];
  }
  else
  {
    uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  std::string __p = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  sub_2162231B0(&__p, a2, (uint64_t)a2 + (v3 & 0xFFFFFFFFFFFFFFFELL), v3 >> 1);
  size_t v5 = __p;
  uint64_t v6 = v13;
  int v7 = v13 - 2;
  if (__p != v13 && v7 > __p)
  {
    uint64_t v9 = (char *)__p + 2;
    do
    {
      __int16 v10 = *((_WORD *)v9 - 1);
      *((_WORD *)v9 - 1) = *(_WORD *)v7;
      *(_WORD *)int v7 = v10;
      v7 -= 2;
      BOOL v11 = v9 >= v7;
      v9 += 2;
    }
    while (!v11);
  }
  sub_21612F5FC(a1, v5, v6 - (unsigned char *)v5);
  if (__p)
  {
    int v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2162CCC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162CCC48(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  BOOL result = sub_2162CCA80(a2[1], *(unsigned __int8 **)(a1 + 40));
  if (result)
  {
    uint64_t v9 = *(uint64_t **)(a1 + 48);
    uint64_t v10 = *v9;
    uint64_t v11 = *((unsigned int *)v9 + 2);
    if (v10 == *(void *)*a2 && v11 == *((_DWORD *)*a2 + 2))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      *a5 = 1;
    }
  }
  return result;
}

void sub_2162CCCC0(uint64_t a1, uint64_t a2)
{
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x4002000000;
  v12[3] = sub_2162CEC70;
  void v12[4] = sub_2162CEC94;
  memset(v13, 0, sizeof(v13));
  v10[0] = 0;
  v10[1] = (void **)v10;
  _DWORD v10[2] = (void **)0x4002000000;
  v10[3] = (void **)sub_2162CEC70;
  v10[4] = (void **)sub_2162CEC94;
  memset(v11, 0, sizeof(v11));
  v8[0] = 0;
  v8[1] = (void **)v8;
  void v8[2] = (void **)0x4002000000;
  void v8[3] = (void **)sub_2162CEC70;
  v8[4] = (void **)sub_2162CEC94;
  memset(v9, 0, sizeof(v9));
  v4[0] = 0;
  v4[1] = (void **)v4;
  void v4[2] = (void **)0x4002000000;
  v4[3] = (void **)sub_2162CECC0;
  void v4[4] = (void **)sub_2162CECDC;
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2000000000;
  v3[3] = 0;
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = sub_2162CECF0;
  v2[3] = &unk_26426E830;
  void v2[4] = v4;
  v2[5] = v12;
  v2[6] = v3;
  v2[7] = v10;
  v2[8] = v8;
  void v2[9] = a2;
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 16))(a1, v2);
  _Block_object_dispose(v3, 8);
  _Block_object_dispose(v4, 8);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(v8, 8);
  v4[0] = (void **)v9;
  sub_2162CEBE4(v4);
  _Block_object_dispose(v10, 8);
  v8[0] = (void **)v11;
  sub_2162CEBE4(v8);
  _Block_object_dispose(v12, 8);
  v10[0] = (void **)v13;
  sub_2162CEBE4(v10);
}

void sub_2162CCEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  if (a33 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a34, 8);
  sub_2162CEBE4((void ***)&a23);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  sub_2162CEBE4((void ***)&a34);
  _Block_object_dispose((const void *)(v35 - 112), 8);
  *(void *)(v35 - 176) = v34;
  sub_2162CEBE4((void ***)(v35 - 176));
  _Unwind_Resume(a1);
}

void sub_2162CCF68(uint64_t *a1)
{
  if (a1[1] == *a1)
  {
    sub_21610B834(__p, "*!@#$%");
    int v17 = 0;
    unint64_t v2 = a1[2];
    unint64_t v3 = a1[1];
    if (v3 >= v2)
    {
      uint64_t v5 = (uint64_t)(v3 - *a1) >> 5;
      unint64_t v6 = v5 + 1;
      if ((unint64_t)(v5 + 1) >> 59) {
        sub_2161BA9E4();
      }
      uint64_t v7 = v2 - *a1;
      if (v7 >> 4 > v6) {
        unint64_t v6 = v7 >> 4;
      }
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v8 = v6;
      }
      v18[4] = a1 + 2;
      uint64_t v9 = (char *)sub_216115A58((uint64_t)(a1 + 2), v8);
      uint64_t v10 = &v9[32 * v5];
      v18[0] = v9;
      v18[1] = v10;
      v18[3] = &v9[32 * v11];
      long long v12 = *(_OWORD *)__p;
      *((void *)v10 + 2) = v16;
      *(_OWORD *)uint64_t v10 = v12;
      __p[1] = 0;
      uint64_t v16 = 0;
      __p[0] = 0;
      *((_DWORD *)v10 + 6) = v17;
      void v18[2] = v10 + 32;
      sub_2161BA9FC(a1, v18);
      uint64_t v13 = a1[1];
      sub_21617591C((uint64_t)v18);
      int v14 = SHIBYTE(v16);
      a1[1] = v13;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v4 = *(_OWORD *)__p;
      *(void *)(v3 + 16) = v16;
      *(_OWORD *)unint64_t v3 = v4;
      *(_DWORD *)(v3 + 24) = v17;
      a1[1] = v3 + 32;
    }
  }
}

void sub_2162CD098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2162CD0C4(void *a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (__n128 *)a2[1];
  uint64_t v6 = (uint64_t)v5 - *a2;
  unint64_t v7 = v6 >> 5;
  if (v6 < 1)
  {
LABEL_5:
    long long v12 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v9 = v6 >> 5;
    while (1)
    {
      uint64_t v10 = (__n128 *)operator new(32 * v9, v8);
      if (v10) {
        break;
      }
      BOOL v11 = v9 > 1;
      v9 >>= 1;
      if (!v11) {
        goto LABEL_5;
      }
    }
    long long v12 = v10;
  }
  sub_2162D0DEC(v4, v5, v7, v12, v9);
  if (v12) {
    operator delete(v12);
  }
  memset(&__s1, 0, sizeof(__s1));
  uint64_t v127 = 0;
  unint64_t v128 = 0;
  unint64_t v129 = 0;
  std::string __p = 0;
  char v125 = 0;
  uint64_t v126 = 0;
  unsigned int v121 = 0;
  unsigned int v122 = 0;
  uint64_t v123 = 0;
  v120[0] = &unk_26C6BE158;
  v120[1] = a2;
  v120[2] = a1 + 14;
  if (a3) {
    sub_2162CCCC0((uint64_t)v120, (uint64_t)&v121);
  }
  uint64_t v13 = a2[1];
  if (v13 == *a2)
  {
    int v18 = 0;
    unsigned int v17 = 0;
    goto LABEL_118;
  }
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  int v18 = 0;
  uint64_t v13 = *a2;
  do
  {
    if (!v15)
    {
LABEL_33:
      if (++v18 >= 0x100)
      {
        long long v29 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_216129E78(v29, (uint64_t)"(", 1);
        long long v30 = (void *)std::ostream::operator<<();
        long long v31 = sub_216129E78(v30, (uint64_t)") [", 3);
        uint64_t v32 = sub_216129E78(v31, (uint64_t)"homographCount <= kMaxHomographEntryCount", 41);
        uint64_t v33 = sub_216129E78(v32, (uint64_t)"] ", 2);
        sub_216129E78(v33, (uint64_t)"number of homograph words is greater than ", 42);
        uint64_t v34 = (void *)std::ostream::operator<<();
        uint64_t v35 = sub_216129E78(v34, (uint64_t)". string =", 10);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_s1 = &__s1;
        }
        else {
          p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        }
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s1.__r_.__value_.__l.__size_;
        }
        int v38 = sub_216129E78(v35, (uint64_t)p_s1, size);
        sub_216129E78(v38, (uint64_t)" count=", 7);
        std::ostream::operator<<();
        sub_21619FA48();
      }
      goto LABEL_115;
    }
    unint64_t v19 = (unsigned __int8 **)(v13 + 32 * v14);
    uint64_t v20 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = __s1.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v22 = (unsigned __int8 *)*((unsigned __int8 *)v19 + 23);
    int v23 = (char)v22;
    if ((char)v22 < 0) {
      unsigned __int8 v22 = v19[1];
    }
    if ((unsigned __int8 *)v21 == v22)
    {
      if (v23 >= 0) {
        std::locale v24 = (unsigned __int8 *)(v13 + 32 * v14);
      }
      else {
        std::locale v24 = *v19;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(__s1.__r_.__value_.__l.__data_, v24, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_33;
        }
      }
      else
      {
        if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
          goto LABEL_33;
        }
        uint64_t v25 = &__s1;
        while (v25->__r_.__value_.__s.__data_[0] == *v24)
        {
          uint64_t v25 = (std::string *)((char *)v25 + 1);
          ++v24;
          if (!--v20) {
            goto LABEL_33;
          }
        }
      }
    }
    uint64_t v26 = v13 + 32 * v17;
    long long v27 = v128;
    unsigned int v117 = v16;
    int v116 = v18;
    if ((unint64_t)v128 >= v129)
    {
      uint64_t v39 = (long long *)sub_2161BAB5C((uint64_t *)&v127, (long long *)v26);
    }
    else
    {
      if (*(char *)(v26 + 23) < 0)
      {
        sub_21610A674(v128, *(void **)v26, *(void *)(v26 + 8));
      }
      else
      {
        long long v28 = *(_OWORD *)v26;
        *((void *)v128 + 2) = *(void *)(v26 + 16);
        *long long v27 = v28;
      }
      uint64_t v39 = (long long *)((char *)v27 + 24);
    }
    unint64_t v128 = v39;
    uint64_t v40 = *a2 + 32 * v17;
    unsigned int v115 = v17;
    unint64_t v41 = v17 + 1;
    while (v41 < (a2[1] - *a2) >> 5)
    {
      uint64_t v42 = *a2 + 32 * v41;
      if (*(char *)(v42 + 23) < 0)
      {
        sub_21610A674(__s, *(void **)v42, *(void *)(v42 + 8));
      }
      else
      {
        long long v43 = *(_OWORD *)v42;
        *(void *)&__s[16] = *(void *)(v42 + 16);
        *(_OWORD *)__s = v43;
      }
      char v44 = *(unsigned char *)(v40 + 23);
      if (v44 >= 0) {
        size_t v45 = *(unsigned __int8 *)(v40 + 23);
      }
      else {
        size_t v45 = *(void *)(v40 + 8);
      }
      size_t v46 = __s[23];
      size_t v47 = *(void *)&__s[8];
      if (__s[23] >= 0) {
        uint64_t v48 = __s[23];
      }
      else {
        uint64_t v48 = *(void *)&__s[8];
      }
      if (v45 != v48) {
        goto LABEL_66;
      }
      if (__s[23] >= 0) {
        uint64_t v49 = __s;
      }
      else {
        uint64_t v49 = *(unsigned __int8 **)__s;
      }
      if ((*(unsigned char *)(v40 + 23) & 0x80) != 0)
      {
        if (memcmp(*(const void **)v40, v49, *(void *)(v40 + 8))) {
          goto LABEL_66;
        }
LABEL_72:
        ++v41;
        char v54 = 1;
        if ((v46 & 0x80) != 0) {
          goto LABEL_73;
        }
LABEL_90:
        if ((v54 & 1) == 0) {
          goto LABEL_93;
        }
      }
      else
      {
        if (!*(unsigned char *)(v40 + 23)) {
          goto LABEL_72;
        }
        unint64_t v50 = (unsigned __int8 *)v40;
        uint64_t v51 = *(unsigned __int8 *)(v40 + 23);
        while (*v50 == *v49)
        {
          ++v50;
          ++v49;
          if (!--v51) {
            goto LABEL_72;
          }
        }
LABEL_66:
        if ((v46 & 0x80) != 0)
        {
          if (v45 == -1) {
LABEL_181:
          }
            sub_21619AAE4();
          if (v47 >= v45) {
            size_t v52 = v45;
          }
          else {
            size_t v52 = v47;
          }
          uint64_t v53 = *(unsigned char **)__s;
        }
        else
        {
          if (v45 == -1) {
            goto LABEL_181;
          }
          if (v46 >= v45) {
            size_t v52 = v45;
          }
          else {
            size_t v52 = v46;
          }
          uint64_t v53 = __s;
        }
        if (v44 >= 0) {
          uint64_t v55 = (const void *)v40;
        }
        else {
          uint64_t v55 = *(const void **)v40;
        }
        int v56 = memcmp(v53, v55, v52);
        char v54 = 0;
        LOBYTE(v27) = v52 != v45 || v56 != 0;
        if ((v46 & 0x80) == 0) {
          goto LABEL_90;
        }
LABEL_73:
        operator delete(*(void **)__s);
        if ((v54 & 1) == 0) {
          goto LABEL_93;
        }
      }
    }
    LOBYTE(v27) = 1;
LABEL_93:
    unint64_t v58 = (unsigned __int8 *)v121 + 3 * v117;
    if (!a3) {
      unint64_t v58 = (unsigned __int8 *)&unk_21638CD00;
    }
    int v59 = v58[1];
    int v60 = *v58;
    int v61 = v58[2];
    if (v27) {
      int v62 = 2048;
    }
    else {
      int v62 = 0;
    }
    int v63 = v116 + (v115 << 12) + v62 + (v59 << 8) + (v60 << 9) + (v61 << 10);
    uint64_t v64 = v125;
    if (v125 >= v126)
    {
      uint64_t v66 = (char *)__p;
      uint64_t v67 = (v125 - (unsigned char *)__p) >> 2;
      unint64_t v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 62) {
        sub_21610CB04();
      }
      uint64_t v69 = v126 - (unsigned char *)__p;
      if ((v126 - (unsigned char *)__p) >> 1 > v68) {
        unint64_t v68 = v69 >> 1;
      }
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v68;
      }
      if (v70)
      {
        unint64_t v71 = (char *)sub_2161129B4((uint64_t)&v126, v70);
        uint64_t v66 = (char *)__p;
        uint64_t v64 = v125;
      }
      else
      {
        unint64_t v71 = 0;
      }
      uint64_t v72 = (int *)&v71[4 * v67];
      *uint64_t v72 = v63;
      size_t v65 = (char *)(v72 + 1);
      while (v64 != v66)
      {
        int v73 = *((_DWORD *)v64 - 1);
        v64 -= 4;
        *--uint64_t v72 = v73;
      }
      std::string __p = v72;
      char v125 = v65;
      uint64_t v126 = &v71[4 * v70];
      if (v66) {
        operator delete(v66);
      }
    }
    else
    {
      *(_DWORD *)char v125 = v63;
      size_t v65 = v64 + 4;
    }
    char v125 = v65;
    unsigned int v16 = v117 + 1;
    int v18 = 1;
    unsigned int v17 = v15;
LABEL_115:
    std::string::operator=(&__s1, (const std::string *)(*a2 + 32 * v14));
    uint64_t v13 = *a2;
    uint64_t v14 = ++v15;
  }
  while (v15 < (unint64_t)((a2[1] - *a2) >> 5));
LABEL_118:
  uint64_t v74 = v13 + 32 * v17;
  BOOL v75 = v128;
  if ((unint64_t)v128 >= v129)
  {
    uint64_t v77 = (long long *)sub_2161BAB5C((uint64_t *)&v127, (long long *)v74);
  }
  else
  {
    if (*(char *)(v74 + 23) < 0)
    {
      sub_21610A674(v128, *(void **)v74, *(void *)(v74 + 8));
    }
    else
    {
      long long v76 = *(_OWORD *)v74;
      *((void *)v128 + 2) = *(void *)(v74 + 16);
      *BOOL v75 = v76;
    }
    uint64_t v77 = (long long *)((char *)v75 + 24);
  }
  unint64_t v128 = v77;
  uint64_t v78 = v122 - 3;
  if (!a3) {
    uint64_t v78 = (char *)&unk_21638CD00;
  }
  int v79 = v18
      + (v17 << 12)
      + (v78[1] << 8)
      + (*v78 << 9)
      + (v78[2] << 10)
      + 2048;
  std::string::size_type v80 = v125;
  if (v125 >= v126)
  {
    long long v82 = (char *)__p;
    uint64_t v83 = (v125 - (unsigned char *)__p) >> 2;
    unint64_t v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 62) {
      sub_21610CB04();
    }
    uint64_t v85 = v126 - (unsigned char *)__p;
    if ((v126 - (unsigned char *)__p) >> 1 > v84) {
      unint64_t v84 = v85 >> 1;
    }
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v86 = v84;
    }
    if (v86)
    {
      uint8x8_t v87 = (char *)sub_2161129B4((uint64_t)&v126, v86);
      long long v82 = (char *)__p;
      std::string::size_type v80 = v125;
    }
    else
    {
      uint8x8_t v87 = 0;
    }
    int v88 = (int *)&v87[4 * v83];
    uint64_t v89 = &v87[4 * v86];
    *int v88 = v79;
    uint64_t v81 = (char *)(v88 + 1);
    while (v80 != v82)
    {
      int v90 = *((_DWORD *)v80 - 1);
      v80 -= 4;
      *--int v88 = v90;
    }
    std::string __p = v88;
    char v125 = v81;
    uint64_t v126 = v89;
    if (v82) {
      operator delete(v82);
    }
  }
  else
  {
    *(_DWORD *)char v125 = v79;
    uint64_t v81 = v80 + 4;
  }
  char v125 = v81;
  memset(&v119, 0, sizeof(v119));
  uint64_t v91 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v92 = 0;
    uint64_t v93 = 24;
    do
    {
      *(_DWORD *)__s = 0;
      *(_DWORD *)__s = *(_DWORD *)(v91 + v93);
      std::string::append(&v119, __s, 4uLL);
      ++v92;
      uint64_t v91 = *a2;
      v93 += 32;
    }
    while (v92 < (a2[1] - *a2) >> 5);
    while (1)
    {
      std::string::value_type v94 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::value_type v94 = v119.__r_.__value_.__s.__data_[8];
      }
      if ((v94 & 7) == 0) {
        break;
      }
      *(_DWORD *)__s = 0;
      std::string::append(&v119, __s, 4uLL);
    }
  }
  sub_216354FF4((uint64_t *)&v118, &v127, (_DWORD **)&__p);
  unint64_t v95 = a1[22];
  std::string::size_type v96 = (void **)a1[21];
  if ((unint64_t)v96 >= v95)
  {
    uint64_t v97 = (void *)a1[20];
    uint64_t v98 = v96 - (void **)v97;
    if ((unint64_t)(v98 + 1) >> 61) {
      sub_21610CB04();
    }
    unint64_t v99 = v95 - (void)v97;
    unint64_t v100 = (uint64_t)(v95 - (void)v97) >> 2;
    if (v100 <= v98 + 1) {
      unint64_t v100 = v98 + 1;
    }
    if (v99 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v101 = v100;
    }
    uint64_t v133 = a1 + 22;
    if (v101)
    {
      uint64_t v102 = (char *)sub_2160FFAA8((uint64_t)(a1 + 22), v101);
      uint64_t v97 = (void *)a1[20];
      std::string::size_type v96 = (void **)a1[21];
    }
    else
    {
      uint64_t v102 = 0;
    }
    unint64_t v103 = (void **)&v102[8 * v98];
    uint64_t v104 = &v102[8 * v101];
    uint64_t v132 = v104;
    *unint64_t v103 = v118;
    unint64_t v105 = v103 + 1;
    uint64_t v118 = 0;
    *(void *)&__s[16] = v103 + 1;
    if (v96 != v97)
    {
      do
      {
        uint64_t v106 = *--v96;
        *--unint64_t v103 = v106;
        *std::string::size_type v96 = 0;
      }
      while (v96 != v97);
      unint64_t v105 = *(void **)&__s[16];
      uint64_t v104 = v132;
    }
    long long v107 = *((_OWORD *)a1 + 10);
    a1[20] = v103;
    a1[21] = v105;
    *(_OWORD *)&__s[8] = v107;
    unint64_t v108 = (char *)a1[22];
    a1[22] = v104;
    uint64_t v132 = v108;
    *(void *)__s = v107;
    sub_2162CF808((uint64_t)__s);
    uint64_t v109 = (void **)v118;
    a1[21] = v105;
    if (v109) {
      sub_21628D4F4(v109);
    }
  }
  else
  {
    *std::string::size_type v96 = v118;
    a1[21] = v96 + 1;
  }
  unint64_t v110 = a1[24];
  if (v110 >= a1[25])
  {
    uint64_t v112 = sub_2161BAB5C(a1 + 23, (long long *)&v119);
  }
  else
  {
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_21610A674((unsigned char *)a1[24], v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v111 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      *(void *)(v110 + 16) = *((void *)&v119.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v110 = v111;
    }
    uint64_t v112 = v110 + 24;
    a1[24] = v110 + 24;
  }
  a1[24] = v112;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (v121)
  {
    unsigned int v122 = (char *)v121;
    operator delete(v121);
  }
  if (__p)
  {
    char v125 = (char *)__p;
    operator delete(__p);
  }
  *(void *)__s = &v127;
  sub_21613EFD0((void ***)__s);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_2162CD9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char *a27,char *a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v40 = v38;
  *(void *)(v40 + 192) = v39;
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27)
  {
    a28 = a27;
    operator delete(a27);
  }
  a27 = &a30;
  sub_21613EFD0((void ***)&a27);
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

uint64_t SeaweedChineseDictionaryBuild(int a1, char **a2)
{
  MEMORY[0x2166CA710](&v19);
  sub_21619DFD0((uint64_t)v29);
  if (sub_2161C7344((uint64_t)v29, a1, a2, (uint64_t)&off_26426E5D0))
  {
    if (sub_2161C8660((uint64_t)v29))
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      v23[0] = &unk_26C6C5220;
      v23[1] = 0;
      int v24 = -1;
      uint64_t v28 = 0;
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)uint64_t v26 = 0u;
      long long v27 = 0u;
      if (!sub_2161C26B4((uint64_t)v23, "UTF-8", "UTF-16LE"))
      {
        uint64_t v4 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_216129E78(v4, (uint64_t)"(", 1);
        uint64_t v5 = (void *)std::ostream::operator<<();
        uint64_t v6 = sub_216129E78(v5, (uint64_t)") [", 3);
        unint64_t v7 = sub_216129E78(v6, (uint64_t)"m_converter.open(\"UTF-8\", \"UTF-16LE\")", 37);
        unint64_t v8 = sub_216129E78(v7, (uint64_t)"] ", 2);
        sub_216129E78(v8, (uint64_t)"iconv_open() failed (from UTF-8 to UTF-16LE)", 44);
        sub_21619FA48();
      }
      sub_21619EFA8((uint64_t)v29, "index_config", (uint64_t)&v32);
      sub_21619EFA8((uint64_t)v29, "type", (uint64_t)v31);
      operator new();
    }
    uint64_t v17 = 0;
  }
  else
  {
    unint64_t v9 = (char *)sub_216178B54((uint64_t)&v30);
    sub_21610B834(&v20, v9);
    if (v22 >= 0) {
      uint64_t v10 = &v20;
    }
    else {
      uint64_t v10 = v20;
    }
    if (v22 >= 0) {
      uint64_t v11 = HIBYTE(v22);
    }
    else {
      uint64_t v11 = v21;
    }
    long long v12 = sub_216129E78(MEMORY[0x263F8C100], (uint64_t)v10, v11);
    uint64_t v13 = sub_216129E78(v12, (uint64_t)"\n\n", 2);
    uint64_t v14 = sub_216129E78(v13, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
    unsigned int v15 = sub_216129E78(v14, (uint64_t)"\ntry '--help' for more information.", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    unsigned int v16 = std::locale::use_facet(&v32, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v22) < 0) {
      operator delete(v20);
    }
    uint64_t v17 = 0xFFFFFFFFLL;
  }
  sub_21619E1A4((uint64_t)v29);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v19);
  return v17;
}

void sub_2162CE528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete(v47[81]);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete(v47[84]);
  }
  if (*(char *)(v49 - 153) < 0) {
    operator delete(v46[10]);
  }
  if (*(char *)(v49 - 121) < 0) {
    operator delete(v46[14]);
  }
  if (*(char *)(v49 - 89) < 0) {
    operator delete(v46[18]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete(v47[87]);
  }
  if (*(char *)(v49 - 233) < 0) {
    operator delete(v47[97]);
  }
  uint64_t v51 = a32;
  a32 = 0;
  if (v51) {
    sub_2162CF8AC(v51);
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_2161C2924(v45);
  sub_2162CF85C((uint64_t **)(v48 + 16), 0);
  sub_2162CF85C((uint64_t **)(v48 + 8), 0);
  sub_2162CF85C((uint64_t **)&a13, 0);
  sub_21619E1A4((uint64_t)&a45);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a12);
  _Unwind_Resume(a1);
}

void sub_2162CE8BC()
{
}

void sub_2162CE8D0()
{
}

uint64_t sub_2162CE8E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_2162CE910(uint64_t result, uint64_t a2)
{
  qword_26797E418 = 0;
  qword_26797E410 = 0;
  qword_26797E408 = (uint64_t)&qword_26797E410;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = result + 32 * a2;
    uint64_t v5 = &qword_26797E410;
    while (1)
    {
      if (v5 == &qword_26797E410)
      {
        uint64_t v6 = &qword_26797E410;
        if (v3) {
          goto LABEL_8;
        }
      }
      else
      {
        if (v3)
        {
          do
          {
            uint64_t v6 = (uint64_t *)v3;
            uint64_t v3 = *(void *)(v3 + 8);
          }
          while (v3);
        }
        else
        {
          unint64_t v8 = &qword_26797E410;
          do
          {
            uint64_t v6 = (uint64_t *)v8[2];
            BOOL v9 = *v6 == (void)v8;
            unint64_t v8 = v6;
          }
          while (v9);
        }
        BOOL result = sub_216179024(v6 + 4, (void **)v2);
        if ((result & 0x80) == 0)
        {
          BOOL result = (uint64_t)sub_21619458C((uint64_t)&qword_26797E408, &v13, (void **)v2);
          unint64_t v7 = (uint64_t **)result;
LABEL_13:
          if (*v7) {
            goto LABEL_21;
          }
          goto LABEL_17;
        }
        if (qword_26797E410)
        {
LABEL_8:
          uint64_t v13 = v6;
          unint64_t v7 = (uint64_t **)(v6 + 1);
          goto LABEL_13;
        }
      }
      uint64_t v13 = &qword_26797E410;
      unint64_t v7 = (uint64_t **)&qword_26797E410;
LABEL_17:
      uint64_t v10 = (char *)operator new(0x40uLL);
      uint64_t v11 = v10 + 32;
      if (*(char *)(v2 + 23) < 0)
      {
        sub_21610A674(v11, *(void **)v2, *(void *)(v2 + 8));
      }
      else
      {
        long long v12 = *(_OWORD *)v2;
        *((void *)v10 + 6) = *(void *)(v2 + 16);
        *(_OWORD *)uint64_t v11 = v12;
      }
      *((_WORD *)v10 + 28) = *(_WORD *)(v2 + 24);
      BOOL result = (uint64_t)sub_21612A650((uint64_t **)&qword_26797E408, (uint64_t)v13, v7, (uint64_t *)v10);
LABEL_21:
      v2 += 32;
      if (v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)qword_26797E408;
      uint64_t v3 = qword_26797E410;
    }
  }
  return result;
}

void sub_2162CEA70(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_21619A784(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_2162CEA98(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 184);
  sub_21613EFD0(&v4);
  uint64_t v4 = (void **)(a1 + 160);
  sub_2162CEB60(&v4);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  uint64_t v2 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2) {
    sub_2162CF8AC(v2);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_2161C2924((void *)(a1 + 24));
  sub_2162CF85C((uint64_t **)(a1 + 16), 0);
  sub_2162CF85C((uint64_t **)(a1 + 8), 0);
  sub_2162CF85C((uint64_t **)a1, 0);
  return a1;
}

void sub_2162CEB60(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v7 = (void **)*((void *)v4 - 1);
        v4 -= 8;
        uint64_t v6 = v7;
        if (v7) {
          sub_21628D4F4(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2162CEBE4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 sub_2162CEC70(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_216195244(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2162CEC94(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_2162CEBE4(&v1);
}

__n128 sub_2162CECC0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4sub_216195244(&a9, 0) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 4sub_216195244(&a9, 0) = 0;
  return result;
}

void sub_2162CECDC(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void sub_2162CECF0(void *a1, std::string *__str, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = __str;
  int v8 = *(__int16 *)(a3 + 4);
  __int16 v9 = *(_WORD *)(a3 + 4);
  BOOL v11 = (v8 & 0x20) == 0 || v8 < 0;
  BOOL v12 = (v8 & 0x400) == 0;
  BOOL v13 = (v8 & 0x100) == 0;
  uint64_t v14 = *(void *)(a1[4] + 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 63);
  if (*(char *)(v14 + 63) < 0) {
    uint64_t v16 = *(void *)(v14 + 48);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 63);
  }
  uint64_t v17 = (std::string *)(v14 + 40);
  if (v16)
  {
    size_t v18 = *(void *)(v14 + 48);
    if ((v15 & 0x80u) == 0) {
      uint64_t v19 = *(unsigned __int8 *)(v14 + 63);
    }
    else {
      uint64_t v19 = *(void *)(v14 + 48);
    }
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    int v21 = (char)size;
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (v19 == size)
    {
      if (v21 < 0) {
        __CFStringRef str = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if ((v15 & 0x80) == 0)
      {
        if (v15)
        {
          uint64_t v22 = v17;
          while (v22->__r_.__value_.__s.__data_[0] == __str->__r_.__value_.__s.__data_[0])
          {
            uint64_t v22 = (std::string *)((char *)v22 + 1);
            __CFStringRef str = (std::string *)((char *)__str + 1);
            if (!--v15) {
              goto LABEL_37;
            }
          }
          goto LABEL_26;
        }
LABEL_37:
        if (v11)
        {
          *(unsigned char *)(*(void *)(a1[9] + 8) - 3) = 1;
          if ((v9 & 0x400) != 0)
          {
LABEL_39:
            if ((v9 & 0x100) != 0) {
              return;
            }
            goto LABEL_258;
          }
        }
        else if ((v9 & 0x400) != 0)
        {
          goto LABEL_39;
        }
        *(unsigned char *)(*(void *)(a1[9] + 8) - 2) = 1;
        if ((v9 & 0x100) != 0) {
          return;
        }
LABEL_258:
        *(unsigned char *)(*(void *)(a1[9] + 8) - 1) = 1;
        return;
      }
      if (!memcmp(v17->__r_.__value_.__l.__data_, __str, v18)) {
        goto LABEL_37;
      }
    }
  }
LABEL_26:
  std::string::operator=(v17, v6);
  uint64_t v23 = a1[9];
  uint64_t v25 = *(unsigned char **)(v23 + 8);
  unint64_t v24 = *(void *)(v23 + 16);
  if ((unint64_t)v25 >= v24)
  {
    long long v27 = *(unsigned char **)v23;
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (void)&v25[-*(void *)v23];
    unint64_t v29 = v28 + 1;
    if (v28 + 1 >= 0x5555555555555556) {
      sub_21610CB04();
    }
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v24 - (void)v27);
    if (2 * v30 > v29) {
      unint64_t v29 = 2 * v30;
    }
    if (v30 >= 0x2AAAAAAAAAAAAAAALL) {
      unint64_t v31 = 0x5555555555555555;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      if (v31 >= 0x5555555555555556) {
        sub_2160FFA74();
      }
      std::locale v32 = (char *)operator new(3 * v31);
      long long v27 = *(unsigned char **)v23;
      uint64_t v25 = *(unsigned char **)(v23 + 8);
    }
    else
    {
      std::locale v32 = 0;
    }
    uint64_t v33 = &v32[3 * v28];
    *uint64_t v33 = v11;
    uint64_t v34 = &v32[3 * v31];
    v33[1] = v12;
    v33[2] = v13;
    uint64_t v26 = v33 + 3;
    if (v25 != v27)
    {
      do
      {
        __int16 v35 = *(_WORD *)(v25 - 3);
        v25 -= 3;
        char v36 = v25[2];
        *(_WORD *)(v33 - 3) = v35;
        v33 -= 3;
        v33[2] = v36;
      }
      while (v25 != v27);
      long long v27 = *(unsigned char **)v23;
    }
    *(void *)uint64_t v23 = v33;
    *(void *)(v23 + 8) = v26;
    *(void *)(v23 + 16) = v34;
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    *uint64_t v25 = v11;
    v25[1] = v12;
    uint64_t v26 = v25 + 3;
    void v25[2] = v13;
  }
  *(void *)(v23 + 8) = v26;
  while (1)
  {
    uint64_t v37 = a1[5];
    uint64_t v38 = *(void **)(v37 + 8);
    uint64_t v39 = v38[6];
    if (v38[5] == v39) {
      break;
    }
    if ((a5 & 1) == 0)
    {
      int v40 = *(char *)(v39 - 9);
      unint64_t v41 = v40 >= 0 ? *(unsigned __int8 *)(v39 - 9) : *(void *)(v39 - 24);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v41 == -1) {
          goto LABEL_259;
        }
        long long v43 = (std::string *)v6->__r_.__value_.__r.__words[0];
        size_t v42 = v6->__r_.__value_.__l.__size_ >= v41 ? v41 : v6->__r_.__value_.__l.__size_;
      }
      else
      {
        if (v41 == -1) {
          goto LABEL_259;
        }
        size_t v42 = HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v41 ? v41 : HIBYTE(v6->__r_.__value_.__r.__words[2]);
        long long v43 = v6;
      }
      char v44 = v40 >= 0 ? (const void *)(v39 - 32) : *(const void **)(v39 - 32);
      BOOL v45 = !memcmp(v43, v44, v42) && v42 == v41;
      if (v45 && !v11) {
        break;
      }
    }
    if (v11)
    {
      uint64_t v47 = *(void *)(v39 - 8);
      int v48 = *(char *)(v39 - 9);
      if (v48 >= 0) {
        unint64_t v49 = *(unsigned __int8 *)(v39 - 9);
      }
      else {
        unint64_t v49 = *(void *)(v39 - 24);
      }
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v49 == -1) {
LABEL_259:
        }
          sub_21619AAE4();
        uint64_t v51 = (std::string *)v6->__r_.__value_.__r.__words[0];
        if (v6->__r_.__value_.__l.__size_ >= v49) {
          size_t v50 = v49;
        }
        else {
          size_t v50 = v6->__r_.__value_.__l.__size_;
        }
      }
      else
      {
        if (v49 == -1) {
          goto LABEL_259;
        }
        if (HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v49) {
          size_t v50 = v49;
        }
        else {
          size_t v50 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        }
        uint64_t v51 = v6;
      }
      if (v48 >= 0) {
        size_t v52 = (const void *)(v39 - 32);
      }
      else {
        size_t v52 = *(const void **)(v39 - 32);
      }
      if (!memcmp(v51, v52, v50) && v50 == v49)
      {
        *(unsigned char *)(*(void *)a1[9] + 3 * v47) = 1;
        uint64_t v37 = a1[5];
      }
    }
    uint64_t v54 = *(void *)(v37 + 8);
    uint64_t v55 = *(void *)(v54 + 48);
    int v56 = (void **)(v55 - 32);
    if (*(char *)(v55 - 9) < 0) {
      operator delete(*v56);
    }
    *(void *)(v54 + 48) = v56;
  }
  uint64_t v57 = *(void *)(a1[6] + 8);
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21610A674(__p, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v160 = v6->__r_.__value_.__r.__words[2];
  }
  uint64_t v161 = *(void *)(v57 + 24);
  unint64_t v58 = v38[7];
  unint64_t v59 = v38[6];
  if (v59 >= v58)
  {
    uint64_t v61 = v38[5];
    uint64_t v62 = (uint64_t)(v59 - v61) >> 5;
    unint64_t v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v64 = v58 - v61;
    if (v64 >> 4 > v63) {
      unint64_t v63 = v64 >> 4;
    }
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v65 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v65 = v63;
    }
    int v165 = v38 + 7;
    uint64_t v66 = (char *)sub_2162CF7D0(v65);
    uint64_t v67 = &v66[32 * v62];
    unint64_t v162 = v66;
    v163.i64[0] = (uint64_t)v67;
    uint64_t v164 = &v66[32 * v68];
    long long v69 = *(_OWORD *)__p;
    *((void *)v67 + 2) = v160;
    *(_OWORD *)uint64_t v67 = v69;
    __p[1] = 0;
    std::string::size_type v160 = 0;
    __p[0] = 0;
    *((void *)v67 + 3) = v161;
    unint64_t v70 = v67 + 32;
    v163.i64[1] = (uint64_t)(v67 + 32);
    uint64_t v72 = v38[5];
    unint64_t v71 = v38[6];
    uint64_t v73 = v163.i64[0];
    if (v71 == v72)
    {
      int64x2_t v75 = vdupq_n_s64(v71);
    }
    else
    {
      do
      {
        long long v74 = *(_OWORD *)(v71 - 32);
        *(void *)(v73 - 16) = *(void *)(v71 - 16);
        *(_OWORD *)(v73 - 32) = v74;
        *(void *)(v71 - 24) = 0;
        *(void *)(v71 - 16) = 0;
        *(void *)(v71 - 32) = 0;
        *(void *)(v73 - 8) = *(void *)(v71 - 8);
        v73 -= 32;
        v71 -= 32;
      }
      while (v71 != v72);
      int64x2_t v75 = *(int64x2_t *)(v38 + 5);
      unint64_t v70 = (char *)v163.i64[1];
    }
    v38[5] = v73;
    void v38[6] = v70;
    int64x2_t v163 = v75;
    long long v76 = (char *)v38[7];
    v38[7] = v164;
    uint64_t v164 = v76;
    unint64_t v162 = (char *)v75.i64[0];
    sub_2162348B8((uint64_t)&v162);
    int v77 = SHIBYTE(v160);
    void v38[6] = v70;
    if (v77 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v60 = *(_OWORD *)__p;
    *(void *)(v59 + 16) = v160;
    *(_OWORD *)unint64_t v59 = v60;
    __p[1] = 0;
    std::string::size_type v160 = 0;
    __p[0] = 0;
    *(void *)(v59 + 24) = v161;
    void v38[6] = v59 + 32;
  }
  while (1)
  {
    uint64_t v92 = a1[7];
    std::string::size_type v96 = *(void **)(v92 + 8);
    uint64_t v97 = v96[6];
    if (v96[5] == v97) {
      break;
    }
    if ((a5 & 1) == 0)
    {
      int v78 = *(char *)(v97 - 9);
      unint64_t v79 = v78 >= 0 ? *(unsigned __int8 *)(v97 - 9) : *(void *)(v97 - 24);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v79 == -1) {
          goto LABEL_259;
        }
        uint64_t v81 = (std::string *)v6->__r_.__value_.__r.__words[0];
        size_t v80 = v6->__r_.__value_.__l.__size_ >= v79 ? v79 : v6->__r_.__value_.__l.__size_;
      }
      else
      {
        if (v79 == -1) {
          goto LABEL_259;
        }
        size_t v80 = HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v79 ? v79 : HIBYTE(v6->__r_.__value_.__r.__words[2]);
        uint64_t v81 = v6;
      }
      long long v82 = v78 >= 0 ? (const void *)(v97 - 32) : *(const void **)(v97 - 32);
      BOOL v83 = !memcmp(v81, v82, v80) && v80 == v79;
      if (v83 && (v9 & 0x400) != 0) {
        break;
      }
    }
    if ((v9 & 0x400) == 0)
    {
      uint64_t v85 = *(void *)(v97 - 8);
      int v86 = *(char *)(v97 - 9);
      if (v86 >= 0) {
        unint64_t v87 = *(unsigned __int8 *)(v97 - 9);
      }
      else {
        unint64_t v87 = *(void *)(v97 - 24);
      }
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v87 == -1) {
          goto LABEL_259;
        }
        uint64_t v89 = (std::string *)v6->__r_.__value_.__r.__words[0];
        if (v6->__r_.__value_.__l.__size_ >= v87) {
          size_t v88 = v87;
        }
        else {
          size_t v88 = v6->__r_.__value_.__l.__size_;
        }
      }
      else
      {
        if (v87 == -1) {
          goto LABEL_259;
        }
        if (HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v87) {
          size_t v88 = v87;
        }
        else {
          size_t v88 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        }
        uint64_t v89 = v6;
      }
      if (v86 >= 0) {
        int v90 = (const void *)(v97 - 32);
      }
      else {
        int v90 = *(const void **)(v97 - 32);
      }
      if (!memcmp(v89, v90, v88) && v88 == v87)
      {
        *(unsigned char *)(*(void *)a1[9] + 3 * v85 + 1) = 1;
        uint64_t v92 = a1[7];
      }
    }
    uint64_t v93 = *(void *)(v92 + 8);
    uint64_t v94 = *(void *)(v93 + 48);
    unint64_t v95 = (void **)(v94 - 32);
    if (*(char *)(v94 - 9) < 0) {
      operator delete(*v95);
    }
    *(void *)(v93 + 48) = v95;
  }
  uint64_t v98 = *(void *)(a1[6] + 8);
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21610A674(__p, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v160 = v6->__r_.__value_.__r.__words[2];
  }
  uint64_t v161 = *(void *)(v98 + 24);
  unint64_t v99 = v96[7];
  unint64_t v100 = v96[6];
  if (v100 >= v99)
  {
    uint64_t v102 = v96[5];
    uint64_t v103 = (uint64_t)(v100 - v102) >> 5;
    unint64_t v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v105 = v99 - v102;
    if (v105 >> 4 > v104) {
      unint64_t v104 = v105 >> 4;
    }
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v106 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v106 = v104;
    }
    int v165 = v96 + 7;
    long long v107 = (char *)sub_2162CF7D0(v106);
    unint64_t v108 = &v107[32 * v103];
    v163.i64[0] = (uint64_t)v108;
    uint64_t v164 = &v107[32 * v109];
    long long v110 = *(_OWORD *)__p;
    *((void *)v108 + 2) = v160;
    *(_OWORD *)unint64_t v108 = v110;
    __p[1] = 0;
    std::string::size_type v160 = 0;
    __p[0] = 0;
    *((void *)v108 + 3) = v161;
    long long v111 = v108 + 32;
    v163.i64[1] = (uint64_t)(v108 + 32);
    uint64_t v113 = v96[5];
    unint64_t v112 = v96[6];
    uint64_t v114 = v163.i64[0];
    if (v112 == v113)
    {
      int64x2_t v116 = vdupq_n_s64(v112);
    }
    else
    {
      do
      {
        long long v115 = *(_OWORD *)(v112 - 32);
        *(void *)(v114 - 16) = *(void *)(v112 - 16);
        *(_OWORD *)(v114 - 32) = v115;
        *(void *)(v112 - 24) = 0;
        *(void *)(v112 - 16) = 0;
        *(void *)(v112 - 32) = 0;
        *(void *)(v114 - 8) = *(void *)(v112 - 8);
        v114 -= 32;
        v112 -= 32;
      }
      while (v112 != v113);
      int64x2_t v116 = *(int64x2_t *)(v96 + 5);
      long long v111 = (char *)v163.i64[1];
    }
    v96[5] = v114;
    v96[6] = v111;
    int64x2_t v163 = v116;
    unsigned int v117 = (char *)v96[7];
    v96[7] = v164;
    uint64_t v164 = v117;
    unint64_t v162 = (char *)v116.i64[0];
    sub_2162348B8((uint64_t)&v162);
    int v118 = SHIBYTE(v160);
    v96[6] = v111;
    if (v118 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v101 = *(_OWORD *)__p;
    *(void *)(v100 + 16) = v160;
    *(_OWORD *)unint64_t v100 = v101;
    __p[1] = 0;
    std::string::size_type v160 = 0;
    __p[0] = 0;
    *(void *)(v100 + 24) = v161;
    v96[6] = v100 + 32;
  }
  while (1)
  {
    uint64_t v133 = a1[8];
    char v137 = *(void **)(v133 + 8);
    uint64_t v138 = v137[6];
    if (v137[5] == v138) {
      break;
    }
    if ((a5 & 1) == 0)
    {
      int v119 = *(char *)(v138 - 9);
      unint64_t v120 = v119 >= 0 ? *(unsigned __int8 *)(v138 - 9) : *(void *)(v138 - 24);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v120 == -1) {
          goto LABEL_259;
        }
        unsigned int v122 = (std::string *)v6->__r_.__value_.__r.__words[0];
        size_t v121 = v6->__r_.__value_.__l.__size_ >= v120 ? v120 : v6->__r_.__value_.__l.__size_;
      }
      else
      {
        if (v120 == -1) {
          goto LABEL_259;
        }
        size_t v121 = HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v120 ? v120 : HIBYTE(v6->__r_.__value_.__r.__words[2]);
        unsigned int v122 = v6;
      }
      uint64_t v123 = v119 >= 0 ? (const void *)(v138 - 32) : *(const void **)(v138 - 32);
      BOOL v124 = !memcmp(v122, v123, v121) && v121 == v120;
      if (v124 && (v9 & 0x100) != 0) {
        break;
      }
    }
    if ((v9 & 0x100) == 0)
    {
      uint64_t v126 = *(void *)(v138 - 8);
      int v127 = *(char *)(v138 - 9);
      if (v127 >= 0) {
        unint64_t v128 = *(unsigned __int8 *)(v138 - 9);
      }
      else {
        unint64_t v128 = *(void *)(v138 - 24);
      }
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v128 == -1) {
          goto LABEL_259;
        }
        uint64_t v130 = (std::string *)v6->__r_.__value_.__r.__words[0];
        if (v6->__r_.__value_.__l.__size_ >= v128) {
          size_t v129 = v128;
        }
        else {
          size_t v129 = v6->__r_.__value_.__l.__size_;
        }
      }
      else
      {
        if (v128 == -1) {
          goto LABEL_259;
        }
        if (HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v128) {
          size_t v129 = v128;
        }
        else {
          size_t v129 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        }
        uint64_t v130 = v6;
      }
      if (v127 >= 0) {
        unint64_t v131 = (const void *)(v138 - 32);
      }
      else {
        unint64_t v131 = *(const void **)(v138 - 32);
      }
      if (!memcmp(v130, v131, v129) && v129 == v128)
      {
        *(unsigned char *)(*(void *)a1[9] + 3 * v126 + 2) = 1;
        uint64_t v133 = a1[8];
      }
    }
    uint64_t v134 = *(void *)(v133 + 8);
    uint64_t v135 = *(void *)(v134 + 48);
    __int16 v136 = (void **)(v135 - 32);
    if (*(char *)(v135 - 9) < 0) {
      operator delete(*v136);
    }
    *(void *)(v134 + 48) = v136;
  }
  uint64_t v139 = *(void *)(a1[6] + 8);
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_21610A674(__p, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v160 = v6->__r_.__value_.__r.__words[2];
  }
  uint64_t v161 = *(void *)(v139 + 24);
  unint64_t v140 = v137[7];
  unint64_t v141 = v137[6];
  if (v141 >= v140)
  {
    uint64_t v143 = v137[5];
    uint64_t v144 = (uint64_t)(v141 - v143) >> 5;
    unint64_t v145 = v144 + 1;
    if ((unint64_t)(v144 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v146 = v140 - v143;
    if (v146 >> 4 > v145) {
      unint64_t v145 = v146 >> 4;
    }
    if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v147 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v147 = v145;
    }
    int v165 = v137 + 7;
    uint64_t v148 = (char *)sub_2162CF7D0(v147);
    uint64_t v150 = &v148[32 * v144];
    long long v151 = *(_OWORD *)__p;
    *((void *)v150 + 2) = v160;
    *(_OWORD *)uint64_t v150 = v151;
    __p[1] = 0;
    std::string::size_type v160 = 0;
    __p[0] = 0;
    *((void *)v150 + 3) = v161;
    long long v152 = v150 + 32;
    uint64_t v153 = v137[5];
    unint64_t v154 = v137[6];
    if (v154 == v153)
    {
      int64x2_t v156 = vdupq_n_s64(v154);
    }
    else
    {
      do
      {
        long long v155 = *(_OWORD *)(v154 - 32);
        *((void *)v150 - 2) = *(void *)(v154 - 16);
        *((_OWORD *)v150 - 2) = v155;
        *(void *)(v154 - 24) = 0;
        *(void *)(v154 - 16) = 0;
        *(void *)(v154 - 32) = 0;
        *((void *)v150 - 1) = *(void *)(v154 - 8);
        v150 -= 32;
        v154 -= 32;
      }
      while (v154 != v153);
      int64x2_t v156 = *(int64x2_t *)(v137 + 5);
    }
    v137[5] = v150;
    v137[6] = v152;
    int64x2_t v163 = v156;
    std::string::size_type v157 = (char *)v137[7];
    v137[7] = &v148[32 * v149];
    uint64_t v164 = v157;
    unint64_t v162 = (char *)v156.i64[0];
    sub_2162348B8((uint64_t)&v162);
    int v158 = SHIBYTE(v160);
    v137[6] = v152;
    if (v158 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v142 = *(_OWORD *)__p;
    *(void *)(v141 + 16) = v160;
    *(_OWORD *)unint64_t v141 = v142;
    __p[1] = 0;
    std::string::size_type v160 = 0;
    __p[0] = 0;
    *(void *)(v141 + 24) = v161;
    v137[6] = v141 + 32;
  }
  ++*(void *)(*(void *)(a1[6] + 8) + 24);
}

void sub_2162CF7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162CF7D0(unint64_t a1)
{
  if (a1 >> 59) {
    sub_2160FFA74();
  }
  return operator new(32 * a1);
}

uint64_t sub_2162CF808(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v5 = *(void ***)(v2 - 8);
    v2 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      sub_21628D4F4(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_2162CF85C(uint64_t **a1, uint64_t *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2163226CC(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_2162CF8AC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

void sub_2162CF900(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = a1 + 3;
  unint64_t v8 = sub_216129260((uint64_t)(a1 + 3), (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    BOOL v13 = *(unsigned __int8 ***)(*a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_21612970C((uint64_t)(a1 + 4), i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x28uLL);
  *uint64_t v16 = 0;
  v16[1] = v9;
  uint64_t v17 = v16 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_21610A674(v17, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a3;
    v16[4] = *(void *)(a3 + 16);
  }
  float v18 = (float)(unint64_t)(a1[3] + 1);
  float v19 = *((float *)a1 + 8);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = a1[1];
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          unint64_t v24 = operator new(8 * *(void *)&prime);
          uint64_t v25 = (void *)*a1;
          *a1 = (uint64_t)v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          long long v27 = (void *)a1[2];
          if (v27)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v28) = a1 + 2;
            uint64_t v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*a1 + 8 * v34))
                  {
                    *(void *)(*a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  *long long v27 = *v33;
                  *uint64_t v33 = **(void **)(*a1 + 8 * v34);
                  **(void **)(*a1 + 8 * v34) = v33;
                  uint64_t v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_58:
                long long v27 = v33;
                uint64_t v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v35 = *a1;
  char v36 = *(void **)(*a1 + 8 * v3);
  if (v36)
  {
    *uint64_t v16 = *v36;
LABEL_75:
    void *v36 = v16;
    goto LABEL_76;
  }
  *uint64_t v16 = a1[2];
  a1[2] = (uint64_t)v16;
  *(void *)(v35 + 8 * v3) = a1 + 2;
  if (*v16)
  {
    unint64_t v37 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10) {
        v37 %= v10;
      }
    }
    else
    {
      v37 &= v10 - 1;
    }
    char v36 = (void *)(*a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
}

void sub_2162CFD2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_2162CFD54(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_216129260(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    BOOL v13 = *(char ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(char **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_21612970C(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = *a3;
  uint64_t v17 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = v9;
  float v18 = v17 + 16;
  if (*((char *)v16 + 23) < 0)
  {
    sub_21610A674(v18, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v19 = *v16;
    *((void *)v17 + 4) = *((void *)v16 + 2);
    *(_OWORD *)float v18 = v19;
  }
  *((_DWORD *)v17 + 1sub_216195244(&a9, 0) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_2161297B4(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t v17 = *v26;
    void *v26 = v17;
  }
  else
  {
    *(void *)uint64_t v17 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v17;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v17)
    {
      unint64_t v27 = *(void *)(*(void *)v17 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10) {
          v27 %= v10;
        }
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v17;
    }
  }
  uint64_t i = v17;
  ++*v7;
  return i;
}

void sub_2162CFFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  sub_216129A00(v10, v11);
  _Unwind_Resume(a1);
}

void sub_2162D0014(void **a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = a1;
    if (a3 == 2)
    {
      unint64_t v7 = a2 - 2;
      if ((sub_216179024((__n128 *)a2[-2].n128_u64, a1) & 0x80) != 0)
      {
        unint64_t v8 = (unint64_t)v6[2];
        __n128 v9 = *(__n128 *)v6;
        unint64_t v10 = a2[-1].n128_u64[0];
        *(__n128 *)uint64_t v6 = *v7;
        void v6[2] = (void *)v10;
        *unint64_t v7 = v9;
        a2[-1].n128_u64[0] = v8;
        unint64_t v11 = (unint64_t)v6[3];
        void v6[3] = (void *)a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v11;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != (void **)a2)
      {
        float v18 = a1 + 4;
        if (a1 + 4 != (void **)a2)
        {
          uint64_t v19 = 0;
          float v20 = a1;
          do
          {
            float v21 = v18;
            if ((sub_216179024(v18, v20) & 0x80) != 0)
            {
              long long v22 = *(_OWORD *)v21;
              uint64_t v46 = v21[2];
              long long v45 = v22;
              v21[1] = 0;
              v21[2] = 0;
              void *v21 = 0;
              uint64_t v47 = v20[7];
              uint64_t v23 = v19;
              while (1)
              {
                unint64_t v24 = (char *)v6 + v23;
                size_t v25 = (void **)((char *)v6 + v23 + 32);
                if (*((char *)v6 + v23 + 55) < 0) {
                  operator delete(*v25);
                }
                *(_OWORD *)size_t v25 = *(_OWORD *)v24;
                *(void **)((char *)v6 + v23 + 48) = (void *)*((void *)v24 + 2);
                v24[23] = 0;
                *unint64_t v24 = 0;
                *((void *)v24 + 7) = *((void *)v24 + 3);
                if (!v23) {
                  break;
                }
                v23 -= 32;
                if ((sub_216179024(&v45, (void **)((char *)v6 + v23)) & 0x80) == 0)
                {
                  uint64_t v26 = (uint64_t)v6 + v23 + 32;
                  goto LABEL_21;
                }
              }
              uint64_t v26 = (uint64_t)v6;
LABEL_21:
              if (*(char *)(v26 + 23) < 0) {
                operator delete(*(void **)v26);
              }
              long long v27 = v45;
              *(void *)(v26 + 16) = v46;
              *(_OWORD *)uint64_t v26 = v27;
              *(void *)(v26 + 24) = v47;
            }
            float v18 = v21 + 4;
            v19 += 32;
            float v20 = (void **)v21;
          }
          while (v21 + 4 != (void *)a2);
        }
      }
    }
    else
    {
      uint64_t v14 = a4;
      unint64_t v15 = a3 >> 1;
      uint64_t v16 = (__n128 *)&a1[4 * (a3 >> 1)];
      unint64_t v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_2162D03F8((__n128 *)a1, v16, v17, a4);
        unint64_t v28 = &v14[2 * v15];
        sub_2162D03F8((__n128 *)&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v28);
        uint8x8_t v29 = &v14[2 * a3];
        unint64_t v30 = v28;
        uint8x8_t v31 = v14;
        while (v30 != v29)
        {
          char v32 = sub_216179024(v30, (void **)v31);
          int v33 = *((char *)v6 + 23);
          if (v32 < 0)
          {
            if (v33 < 0) {
              operator delete(*v6);
            }
            __n128 v35 = *v30;
            void v6[2] = (void *)v30[1].n128_u64[0];
            *(__n128 *)uint64_t v6 = v35;
            v30[1].n128_u8[7] = 0;
            v30->n128_u8[0] = 0;
            void v6[3] = (void *)v30[1].n128_u64[1];
            v30 += 2;
          }
          else
          {
            if (v33 < 0) {
              operator delete(*v6);
            }
            __n128 v34 = *v31;
            void v6[2] = (void *)v31[1].n128_u64[0];
            *(__n128 *)uint64_t v6 = v34;
            v31[1].n128_u8[7] = 0;
            v31->n128_u8[0] = 0;
            void v6[3] = (void *)v31[1].n128_u64[1];
            v31 += 2;
          }
          v6 += 4;
          if (v31 == v28)
          {
            if (v30 != v29)
            {
              unint64_t v36 = 0;
              do
              {
                unint64_t v37 = &v6[v36 / 8];
                if (SHIBYTE(v6[v36 / 8 + 2]) < 0) {
                  operator delete(*v37);
                }
                uint64_t v38 = &v30[v36 / 0x10];
                __n128 v39 = v30[v36 / 0x10];
                v37[2] = (void *)v30[v36 / 0x10 + 1].n128_u64[0];
                *(__n128 *)unint64_t v37 = v39;
                v38[1].n128_u8[7] = 0;
                v38->n128_u8[0] = 0;
                void v37[3] = (void *)v30[v36 / 0x10 + 1].n128_u64[1];
                v36 += 32;
              }
              while (&v38[2] != v29);
            }
            goto LABEL_47;
          }
        }
        if (v31 != v28)
        {
          unint64_t v40 = 0;
          do
          {
            unint64_t v41 = &v6[v40 / 8];
            if (SHIBYTE(v6[v40 / 8 + 2]) < 0) {
              operator delete(*v41);
            }
            size_t v42 = &v31[v40 / 0x10];
            __n128 v43 = v31[v40 / 0x10];
            v41[2] = (void *)v31[v40 / 0x10 + 1].n128_u64[0];
            *(__n128 *)unint64_t v41 = v43;
            v42[1].n128_u8[7] = 0;
            v42->n128_u8[0] = 0;
            void v41[3] = (void *)v31[v40 / 0x10 + 1].n128_u64[1];
            v40 += 32;
          }
          while (&v42[2] != v28);
        }
LABEL_47:
        if (v14)
        {
          unint64_t v44 = a3;
          do
          {
            if (v14[1].n128_i8[7] < 0) {
              operator delete((void *)v14->n128_u64[0]);
            }
            v14 += 2;
            --v44;
          }
          while (v44);
        }
      }
      else
      {
        sub_2162D0014(a1, v16, v17, a4, a5);
        sub_2162D0014(&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v14, a5);
        sub_2162D07A8(v6, &v6[4 * (a3 >> 1)], (void **)a2, a3 >> 1, a3 - (a3 >> 1), (void **)v14, a5);
      }
    }
  }
}

void sub_2162D03C4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v4 = 0;
    do
    {
      if (*(char *)(v1 + 23) < 0) {
        operator delete(*(void **)v1);
      }
      ++v4;
      v1 += 32;
    }
    while (v4 < v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2162D03F8(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    unint64_t v7 = a1;
    if (a3 == 2)
    {
      __n128 v9 = a2 - 2;
      char v10 = sub_216179024((__n128 *)a2[-2].n128_u64, (void **)a1);
      unint64_t v11 = v4 + 2;
      if (v10 < 0)
      {
        __n128 v29 = *v9;
        v4[1].n128_u64[0] = a2[-1].n128_u64[0];
        *unint64_t v4 = v29;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        v4[1].n128_u64[1] = a2[-1].n128_u64[1];
        __n128 result = *v7;
        v4[3].n128_u64[0] = v7[1].n128_u64[0];
        *unint64_t v11 = result;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        BOOL v13 = &v7[1].n128_u64[1];
      }
      else
      {
        __n128 v12 = *v7;
        v4[1].n128_u64[0] = v7[1].n128_u64[0];
        *unint64_t v4 = v12;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v4[1].n128_u64[1] = v7[1].n128_u64[1];
        __n128 result = *v9;
        v4[3].n128_u64[0] = a2[-1].n128_u64[0];
        *unint64_t v11 = result;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        BOOL v13 = &a2[-1].n128_u64[1];
      }
      v4[3].n128_u64[1] = *v13;
    }
    else if (a3 == 1)
    {
      __n128 result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v23 = &a1[2 * (a3 >> 1)];
      sub_2162D0014(a1, v23, a3 >> 1, a4, a3 >> 1);
      sub_2162D0014(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
      unint64_t v24 = &v7[2 * (a3 >> 1)];
      while (v24 != a2)
      {
        if ((sub_216179024(v24, (void **)v7) & 0x80) != 0)
        {
          __n128 result = *v24;
          v4[1].n128_u64[0] = v24[1].n128_u64[0];
          *unint64_t v4 = result;
          v24->n128_u64[1] = 0;
          v24[1].n128_u64[0] = 0;
          v24->n128_u64[0] = 0;
          size_t v25 = v24;
          v24 += 2;
        }
        else
        {
          __n128 result = *v7;
          v4[1].n128_u64[0] = v7[1].n128_u64[0];
          *unint64_t v4 = result;
          v7->n128_u64[1] = 0;
          v7[1].n128_u64[0] = 0;
          v7->n128_u64[0] = 0;
          size_t v25 = v7;
          v7 += 2;
        }
        v4[1].n128_u64[1] = v25[1].n128_u64[1];
        v4 += 2;
        if (v7 == v23)
        {
          if (v24 != a2)
          {
            uint64_t v26 = 0;
            do
            {
              long long v27 = &v24[v26];
              unint64_t v28 = &v4[v26];
              __n128 result = v24[v26];
              v28[1].n128_u64[0] = v24[v26 + 1].n128_u64[0];
              *unint64_t v28 = result;
              v27->n128_u64[1] = 0;
              v27[1].n128_u64[0] = 0;
              v27->n128_u64[0] = 0;
              v28[1].n128_u64[1] = v24[v26 + 1].n128_u64[1];
              v26 += 2;
            }
            while (&v27[2] != a2);
          }
          return result;
        }
      }
      if (v7 != v23)
      {
        uint64_t v30 = 0;
        do
        {
          uint8x8_t v31 = &v4[v30];
          char v32 = &v7[v30];
          __n128 result = v7[v30];
          v31[1].n128_u64[0] = v7[v30 + 1].n128_u64[0];
          *uint8x8_t v31 = result;
          v32->n128_u64[1] = 0;
          v32[1].n128_u64[0] = 0;
          v32->n128_u64[0] = 0;
          v31[1].n128_u64[1] = v7[v30 + 1].n128_u64[1];
          v30 += 2;
        }
        while (&v32[2] != v23);
      }
    }
    else if (a1 != a2)
    {
      __n128 result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
      uint64_t v14 = a1 + 2;
      if (&a1[2] != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = a4;
        do
        {
          unint64_t v17 = v14;
          float v18 = v16 + 2;
          if ((sub_216179024(v14, (void **)v16) & 0x80) != 0)
          {
            __n128 *v18 = *v16;
            unint64_t v19 = v16[1].n128_u64[1];
            v16[3].n128_u64[0] = v16[1].n128_u64[0];
            v16->n128_u64[1] = 0;
            v16[1].n128_u64[0] = 0;
            v16->n128_u64[0] = 0;
            v16[3].n128_u64[1] = v19;
            float v20 = v4;
            if (v16 != v4)
            {
              uint64_t v21 = v15;
              while (1)
              {
                float v20 = (__n128 *)((char *)v4 + v21);
                if ((sub_216179024(v17, (void **)((char *)&v4[-2] + v21)) & 0x80) == 0) {
                  break;
                }
                if (v20[1].n128_i8[7] < 0) {
                  operator delete((void *)v20->n128_u64[0]);
                }
                long long v22 = (char *)v4 + v21;
                *float v20 = *(__n128 *)((char *)v4 + v21 - 32);
                v20[1].n128_u64[0] = *(unint64_t *)((char *)v4[-1].n128_u64 + v21);
                *(v22 - 9) = 0;
                v20[-2].n128_u8[0] = 0;
                *((void *)v22 + 3) = *(unint64_t *)((char *)&v4->n128_u64[-1] + v21);
                v21 -= 32;
                if (!v21)
                {
                  float v20 = v4;
                  break;
                }
              }
            }
            if (v20[1].n128_i8[7] < 0) {
              operator delete((void *)v20->n128_u64[0]);
            }
            __n128 result = *v17;
            v20[1].n128_u64[0] = v17[1].n128_u64[0];
            *float v20 = result;
            v7[3].n128_u8[7] = 0;
            v17->n128_u8[0] = 0;
            v20[1].n128_u64[1] = v7[3].n128_u64[1];
          }
          else
          {
            __n128 result = *v17;
            v16[3].n128_u64[0] = v17[1].n128_u64[0];
            __n128 *v18 = result;
            v17->n128_u64[1] = 0;
            v17[1].n128_u64[0] = 0;
            v17->n128_u64[0] = 0;
            v16[3].n128_u64[1] = v7[3].n128_u64[1];
          }
          uint64_t v14 = v17 + 2;
          v15 += 32;
          v16 += 2;
          unint64_t v7 = v17;
        }
        while (&v17[2] != a2);
      }
    }
  }
  return result;
}

void sub_2162D07A8(void **a1, void **a2, void **a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v83 = a7;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return;
      }
      BOOL v13 = 0;
      uint64_t v14 = -a4;
      while (1)
      {
        uint64_t v15 = (void **)((char *)v13 + (void)a1);
        if ((sub_216179024(a2, (void **)((char *)v13 + (void)a1)) & 0x80) != 0) {
          break;
        }
        v13 += 4;
        if (__CFADD__(v14++, 1)) {
          return;
        }
      }
      uint64_t v17 = -v14;
      uint64_t v79 = v8;
      size_t v80 = a6;
      long long v82 = a3;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          uint64_t v65 = (uint64_t)v13 + (void)a1;
          uint64_t v89 = *(void **)((char *)v13 + (void)a1 + 16);
          long long v86 = *(_OWORD *)((char *)v13 + (void)a1);
          long long v66 = *(_OWORD *)a2;
          *(void *)(v65 + 16) = a2[2];
          *(_OWORD *)uint64_t v65 = v66;
          *(_OWORD *)a2 = v86;
          a2[2] = v89;
          uint64_t v67 = *(void **)((char *)v13 + (void)a1 + 24);
          *(void *)(v65 + 24) = a2[3];
          a2[3] = v67;
          return;
        }
        if (v14 > 0) {
          uint64_t v17 = 1 - v14;
        }
        uint64_t v23 = v17 >> 1;
        uint64_t v21 = (void **)((char *)&a1[4 * (v17 >> 1)] + (void)v13);
        unint64_t v24 = a3;
        float v20 = a2;
        if (a2 != v24)
        {
          uint64_t v78 = v23;
          unint64_t v25 = ((char *)v82 - (char *)a2) >> 5;
          float v20 = a2;
          do
          {
            uint64_t v26 = &v20[4 * (v25 >> 1)];
            int v27 = (char)sub_216179024(v26, v21);
            if (v27 >= 0) {
              v25 >>= 1;
            }
            else {
              v25 += ~(v25 >> 1);
            }
            if (v27 < 0) {
              float v20 = v26 + 4;
            }
          }
          while (v25);
          uint64_t v23 = v78;
        }
        uint64_t v19 = ((char *)v20 - (char *)a2) >> 5;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v18 = v8;
        }
        else {
          uint64_t v18 = v8 + 1;
        }
        uint64_t v19 = v18 >> 1;
        float v20 = &a2[4 * (v18 >> 1)];
        uint64_t v21 = a2;
        if ((void **)((char *)a2 - (char *)a1) != v13)
        {
          uint64_t v77 = v18 >> 1;
          unint64_t v22 = ((char *)a2 - (char *)a1 - (uint64_t)v13) >> 5;
          uint64_t v21 = (void **)((char *)v13 + (void)a1);
          do
          {
            if ((sub_216179024(v20, &v21[4 * (v22 >> 1)]) & 0x80u) != 0)
            {
              v22 >>= 1;
            }
            else
            {
              v21 += 4 * (v22 >> 1) + 4;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          uint64_t v19 = v77;
        }
        uint64_t v23 = ((char *)v21 - (char *)a1 - (uint64_t)v13) >> 5;
      }
      if (v21 == a2)
      {
        unint64_t v28 = v20;
      }
      else if (v20 == a2)
      {
        unint64_t v28 = v21;
      }
      else
      {
        unint64_t v28 = v21 + 4;
        __n128 v29 = v21 + 4;
        uint64_t v30 = a2;
        while (1)
        {
          unint64_t v87 = *(v29 - 2);
          long long v84 = *((_OWORD *)v29 - 2);
          long long v31 = *(_OWORD *)v30;
          *(v29 - 2) = v30[2];
          *((_OWORD *)v29 - 2) = v31;
          *(_OWORD *)uint64_t v30 = v84;
          v30[2] = v87;
          char v32 = *(v29 - 1);
          *(v29 - 1) = v30[3];
          v30[3] = v32;
          v30 += 4;
          if (v30 == v20) {
            break;
          }
          if (v29 == a2) {
            a2 = v30;
          }
          v29 += 4;
          v28 += 4;
        }
        if (v29 != a2)
        {
          int v33 = a2;
          do
          {
            while (1)
            {
              size_t v88 = v29[2];
              long long v85 = *(_OWORD *)v29;
              long long v34 = *(_OWORD *)v33;
              v29[2] = v33[2];
              *(_OWORD *)__n128 v29 = v34;
              v33[2] = v88;
              *(_OWORD *)int v33 = v85;
              __n128 v35 = v29[3];
              void v29[3] = v33[3];
              void v33[3] = v35;
              v29 += 4;
              v33 += 4;
              if (v33 == v20) {
                break;
              }
              if (v29 == a2) {
                a2 = v33;
              }
            }
            int v33 = a2;
          }
          while (v29 != a2);
        }
      }
      a4 = -v23 - v14;
      uint64_t v36 = v79 - v19;
      if (v23 + v19 >= v79 - (v23 + v19) - v14)
      {
        uint64_t v38 = v23;
        uint64_t v39 = -v23 - v14;
        uint64_t v40 = v19;
        sub_2162D07A8(v28, v20, v82, v39, v79 - v19, v80, v83);
        a2 = v21;
        a6 = v80;
        uint64_t v36 = v40;
        a4 = v38;
        a3 = v28;
      }
      else
      {
        unint64_t v37 = v21;
        a6 = v80;
        sub_2162D07A8((char *)v13 + (void)a1, v37, v28, v23, v19, v80, v83);
        uint64_t v15 = v28;
        a2 = v20;
        a3 = v82;
      }
      uint64_t v8 = v36;
      a1 = v15;
      a7 = v83;
      if (!v36) {
        return;
      }
    }
    if (a4 <= v8)
    {
      if (a1 == a2) {
        return;
      }
      unint64_t v54 = 0;
      unint64_t v42 = 0;
      do
      {
        uint64_t v55 = (long long *)&a6[v54];
        int v56 = &a1[v54];
        long long v57 = *(_OWORD *)&a1[v54];
        *((void *)v55 + 2) = a1[v54 + 2];
        *uint64_t v55 = v57;
        v56[1] = 0;
        v56[2] = 0;
        void *v56 = 0;
        *((void *)v55 + 3) = a1[v54 + 3];
        ++v42;
        v54 += 4;
      }
      while (v56 + 4 != a2);
      if (v54 * 8)
      {
        unint64_t v58 = (long long *)&a6[v54];
        uint64_t v59 = (uint64_t)&a6[v54 - 4];
        long long v60 = a6;
        while (a2 != a3)
        {
          char v61 = sub_216179024(a2, v60);
          int v62 = *((char *)a1 + 23);
          if (v61 < 0)
          {
            if (v62 < 0) {
              operator delete(*a1);
            }
            long long v64 = *(_OWORD *)a2;
            a1[2] = a2[2];
            *(_OWORD *)a1 = v64;
            *((unsigned char *)a2 + 23) = 0;
            *(unsigned char *)a2 = 0;
            a1[3] = a2[3];
            a2 += 4;
          }
          else
          {
            if (v62 < 0) {
              operator delete(*a1);
            }
            long long v63 = *(_OWORD *)v60;
            a1[2] = v60[2];
            *(_OWORD *)a1 = v63;
            *((unsigned char *)v60 + 23) = 0;
            *(unsigned char *)long long v60 = 0;
            a1[3] = v60[3];
            v60 += 4;
          }
          a1 += 4;
          if (v58 == (long long *)v60) {
            goto LABEL_105;
          }
        }
        if (v58 != (long long *)v60)
        {
          unint64_t v72 = 0;
          do
          {
            uint64_t v73 = &a1[v72];
            if (SHIBYTE(a1[v72 + 2]) < 0) {
              operator delete(*v73);
            }
            long long v74 = (long long *)&v60[v72];
            long long v75 = *(_OWORD *)&v60[v72];
            v73[2] = v60[v72 + 2];
            *(_OWORD *)uint64_t v73 = v75;
            *((unsigned char *)v74 + 23) = 0;
            *(unsigned char *)long long v74 = 0;
            void v73[3] = v60[v72 + 3];
            v72 += 4;
          }
          while ((long long *)v59 != v74);
        }
      }
    }
    else
    {
      if (a3 == a2) {
        return;
      }
      unint64_t v41 = 0;
      unint64_t v42 = 0;
      do
      {
        __n128 v43 = (long long *)&a6[v41];
        unint64_t v44 = &a2[v41];
        long long v45 = *(_OWORD *)&a2[v41];
        *((void *)v43 + 2) = a2[v41 + 2];
        *__n128 v43 = v45;
        v44[1] = 0;
        uint64_t v44[2] = 0;
        *unint64_t v44 = 0;
        *((void *)v43 + 3) = a2[v41 + 3];
        ++v42;
        v41 += 4;
      }
      while (v44 + 4 != a3);
      if (v41 * 8)
      {
        uint64_t v46 = &a6[v41];
        uint64_t v81 = a6;
        while (a2 != a1)
        {
          int v47 = (char)sub_216179024(v46 - 4, a2 - 4);
          int v48 = a3 - 4;
          int v49 = *((char *)a3 - 9);
          if (v47 >= 0) {
            size_t v50 = v46;
          }
          else {
            size_t v50 = a2;
          }
          uint64_t v51 = a3;
          if (v47 >= 0) {
            size_t v52 = v46 - 4;
          }
          else {
            size_t v52 = a2 - 4;
          }
          if (v47 >= 0) {
            v46 -= 4;
          }
          else {
            a2 -= 4;
          }
          if (v49 < 0) {
            operator delete(*v48);
          }
          long long v53 = *(_OWORD *)v52;
          v48[2] = v52[2];
          *(_OWORD *)int v48 = v53;
          *((unsigned char *)v50 - 9) = 0;
          *(unsigned char *)size_t v52 = 0;
          *(v51 - 1) = *(v50 - 1);
          a3 = v48;
          a6 = v81;
          if (v46 == v81) {
            goto LABEL_105;
          }
        }
        if (v46 != a6)
        {
          uint64_t v68 = 0;
          do
          {
            long long v69 = &a3[v68 - 4];
            if (*((char *)&a3[v68 - 1] - 1) < 0) {
              operator delete(*v69);
            }
            unint64_t v70 = (long long *)&v46[v68 - 4];
            long long v71 = *v70;
            a3[v68 - 2] = v46[v68 - 2];
            *(_OWORD *)long long v69 = v71;
            *((unsigned char *)&v46[v68 - 1] - 1) = 0;
            *(unsigned char *)unint64_t v70 = 0;
            a3[v68 - 1] = v46[v68 - 1];
            v68 -= 4;
          }
          while (&v46[v68] != a6);
        }
      }
    }
LABEL_105:
    if (a6)
    {
      unint64_t v76 = 0;
      do
      {
        if (*((char *)a6 + 23) < 0) {
          operator delete(*a6);
        }
        ++v76;
        a6 += 4;
      }
      while (v76 < v42);
    }
  }
}

void sub_2162D0DEC(uint64_t a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      unint64_t v7 = a2 - 2;
      if ((sub_216179024((__n128 *)a2[-2].n128_u64, (void **)a1) & 0x80) != 0)
      {
        unint64_t v8 = *(void *)(a1 + 16);
        __n128 v9 = *(__n128 *)a1;
        unint64_t v10 = a2[-1].n128_u64[0];
        *(__n128 *)a1 = *v7;
        *(void *)(a1 + 16) = v10;
        *unint64_t v7 = v9;
        a2[-1].n128_u64[0] = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = a2[-1].n128_u32[2];
        a2[-1].n128_u32[2] = v8;
      }
    }
    else
    {
      unint64_t v11 = a3;
      if ((uint64_t)a3 <= 0)
      {
        if ((__n128 *)a1 != a2)
        {
          uint64_t v17 = (void *)(a1 + 32);
          if ((__n128 *)(a1 + 32) != a2)
          {
            uint64_t v18 = 0;
            uint64_t v19 = (void *)a1;
            do
            {
              float v20 = v17;
              if ((sub_216179024(v17, (void **)v19) & 0x80) != 0)
              {
                long long v21 = *(_OWORD *)v20;
                uint64_t v46 = v20[2];
                long long v45 = v21;
                v20[1] = 0;
                v20[2] = 0;
                *float v20 = 0;
                int v47 = *((_DWORD *)v19 + 14);
                uint64_t v22 = v18;
                while (1)
                {
                  uint64_t v23 = a1 + v22;
                  unint64_t v24 = (void **)(a1 + v22 + 32);
                  if (*(char *)(a1 + v22 + 55) < 0) {
                    operator delete(*v24);
                  }
                  *(_OWORD *)unint64_t v24 = *(_OWORD *)v23;
                  *(void *)(a1 + v22 + 48) = *(void *)(v23 + 16);
                  *(unsigned char *)(v23 + 23) = 0;
                  *(unsigned char *)uint64_t v23 = 0;
                  *(_DWORD *)(v23 + 56) = *(_DWORD *)(v23 + 24);
                  if (!v22) {
                    break;
                  }
                  v22 -= 32;
                  if ((sub_216179024(&v45, (void **)(v22 + a1)) & 0x80) == 0)
                  {
                    uint64_t v25 = a1 + v22 + 32;
                    goto LABEL_21;
                  }
                }
                uint64_t v25 = a1;
LABEL_21:
                if (*(char *)(v25 + 23) < 0) {
                  operator delete(*(void **)v25);
                }
                long long v26 = v45;
                *(void *)(v25 + 16) = v46;
                *(_OWORD *)uint64_t v25 = v26;
                *(_DWORD *)(v25 + 24) = v47;
              }
              uint64_t v17 = v20 + 4;
              v18 += 32;
              uint64_t v19 = v20;
            }
            while (v20 + 4 != (void *)a2);
          }
        }
      }
      else
      {
        BOOL v13 = a4;
        unint64_t v14 = a3 >> 1;
        uint64_t v15 = (__n128 *)(a1 + 32 * (a3 >> 1));
        unint64_t v16 = a3 >> 1;
        if ((uint64_t)v11 <= a5)
        {
          sub_2162D11E0((__n128 *)a1, v15, v16, a4);
          int v27 = &v13[2 * v14];
          sub_2162D11E0((__n128 *)(a1 + 32 * (v11 >> 1)), a2, v11 - (v11 >> 1), v27);
          unint64_t v28 = (_DWORD *)(a1 + 24);
          __n128 v29 = v27;
          uint64_t v30 = v13;
          long long v31 = &v13[2 * v11];
          while (v29 != v31)
          {
            char v32 = (void **)(v28 - 6);
            char v33 = sub_216179024(v29, (void **)v30);
            int v34 = *((char *)v28 - 1);
            if (v33 < 0)
            {
              if (v34 < 0) {
                operator delete(*v32);
              }
              __n128 v36 = *v29;
              *((void *)v28 - 1) = v29[1].n128_u64[0];
              *(__n128 *)char v32 = v36;
              v29[1].n128_u8[7] = 0;
              v29->n128_u8[0] = 0;
              *unint64_t v28 = v29[1].n128_u32[2];
              v29 += 2;
            }
            else
            {
              if (v34 < 0) {
                operator delete(*v32);
              }
              __n128 v35 = *v30;
              *((void *)v28 - 1) = v30[1].n128_u64[0];
              *(__n128 *)char v32 = v35;
              v30[1].n128_u8[7] = 0;
              v30->n128_u8[0] = 0;
              *unint64_t v28 = v30[1].n128_u32[2];
              v30 += 2;
            }
            v28 += 8;
            if (v30 == v27)
            {
              if (v29 != v31)
              {
                unint64_t v37 = 0;
                do
                {
                  uint64_t v38 = (void **)&v28[v37 / 4 - 6];
                  if (SHIBYTE(v28[v37 / 4 - 1]) < 0) {
                    operator delete(*v38);
                  }
                  uint64_t v39 = &v29[v37 / 0x10];
                  __n128 v40 = v29[v37 / 0x10];
                  *(void *)&v28[v37 / 4 - 2] = v29[v37 / 0x10 + 1].n128_u64[0];
                  *(__n128 *)uint64_t v38 = v40;
                  v39[1].n128_u8[7] = 0;
                  v39->n128_u8[0] = 0;
                  v28[v37 / 4] = v29[v37 / 0x10 + 1].n128_u32[2];
                  v37 += 32;
                }
                while (&v39[2] != v31);
              }
              goto LABEL_47;
            }
          }
          if (v30 != v27)
          {
            unint64_t v41 = 0;
            do
            {
              unint64_t v42 = (void **)&v28[v41 / 4 - 6];
              if (SHIBYTE(v28[v41 / 4 - 1]) < 0) {
                operator delete(*v42);
              }
              __n128 v43 = &v30[v41 / 0x10];
              __n128 v44 = v30[v41 / 0x10];
              *(void *)&v28[v41 / 4 - 2] = v30[v41 / 0x10 + 1].n128_u64[0];
              *(__n128 *)unint64_t v42 = v44;
              v43[1].n128_u8[7] = 0;
              v43->n128_u8[0] = 0;
              v28[v41 / 4] = v30[v41 / 0x10 + 1].n128_u32[2];
              v41 += 32;
            }
            while (&v43[2] != v27);
          }
LABEL_47:
          if (v13)
          {
            do
            {
              if (v13[1].n128_i8[7] < 0) {
                operator delete((void *)v13->n128_u64[0]);
              }
              v13 += 2;
              --v11;
            }
            while (v11);
          }
        }
        else
        {
          sub_2162D0DEC(a1, v15, v16, a4, a5);
          sub_2162D0DEC(a1 + 32 * (v11 >> 1), a2, v11 - (v11 >> 1), v13, a5);
          sub_2162D1594((void **)a1, (void **)(a1 + 32 * (v11 >> 1)), (void **)a2, v11 >> 1, v11 - (v11 >> 1), (void **)v13, a5);
        }
      }
    }
  }
}

void sub_2162D11AC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v4 = 0;
    do
    {
      if (*(char *)(v1 + 23) < 0) {
        operator delete(*(void **)v1);
      }
      ++v4;
      v1 += 32;
    }
    while (v4 < v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2162D11E0(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    unint64_t v7 = a1;
    if (a3 == 2)
    {
      __n128 v9 = a2 - 2;
      char v10 = sub_216179024((__n128 *)a2[-2].n128_u64, (void **)a1);
      unint64_t v11 = v4 + 2;
      if (v10 < 0)
      {
        __n128 v28 = *v9;
        v4[1].n128_u64[0] = a2[-1].n128_u64[0];
        *unint64_t v4 = v28;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        v4[1].n128_u32[2] = a2[-1].n128_u32[2];
        __n128 result = *v7;
        v4[3].n128_u64[0] = v7[1].n128_u64[0];
        *unint64_t v11 = result;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        BOOL v13 = &v7[1].n128_u32[2];
      }
      else
      {
        __n128 v12 = *v7;
        v4[1].n128_u64[0] = v7[1].n128_u64[0];
        *unint64_t v4 = v12;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v4[1].n128_u32[2] = v7[1].n128_u32[2];
        __n128 result = *v9;
        v4[3].n128_u64[0] = a2[-1].n128_u64[0];
        *unint64_t v11 = result;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        BOOL v13 = &a2[-1].n128_u32[2];
      }
      v4[3].n128_u32[2] = *v13;
    }
    else if (a3 == 1)
    {
      __n128 result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u32[2] = a1[1].n128_u32[2];
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v22 = &a1[2 * (a3 >> 1)];
      sub_2162D0DEC(a1, v22, a3 >> 1, a4, a3 >> 1);
      sub_2162D0DEC(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
      uint64_t v23 = &v7[2 * (a3 >> 1)];
      while (v23 != a2)
      {
        if ((sub_216179024(v23, (void **)v7) & 0x80) != 0)
        {
          __n128 result = *v23;
          v4[1].n128_u64[0] = v23[1].n128_u64[0];
          *unint64_t v4 = result;
          v23->n128_u64[1] = 0;
          v23[1].n128_u64[0] = 0;
          v23->n128_u64[0] = 0;
          unint64_t v24 = v23;
          v23 += 2;
        }
        else
        {
          __n128 result = *v7;
          v4[1].n128_u64[0] = v7[1].n128_u64[0];
          *unint64_t v4 = result;
          v7->n128_u64[1] = 0;
          v7[1].n128_u64[0] = 0;
          v7->n128_u64[0] = 0;
          unint64_t v24 = v7;
          v7 += 2;
        }
        v4[1].n128_u32[2] = v24[1].n128_u32[2];
        v4 += 2;
        if (v7 == v22)
        {
          if (v23 != a2)
          {
            uint64_t v25 = 0;
            do
            {
              long long v26 = &v23[v25];
              int v27 = &v4[v25];
              __n128 result = v23[v25];
              v27[1].n128_u64[0] = v23[v25 + 1].n128_u64[0];
              *int v27 = result;
              v26->n128_u64[1] = 0;
              v26[1].n128_u64[0] = 0;
              v26->n128_u64[0] = 0;
              v27[1].n128_u32[2] = v23[v25 + 1].n128_u32[2];
              v25 += 2;
            }
            while (&v26[2] != a2);
          }
          return result;
        }
      }
      if (v7 != v22)
      {
        uint64_t v29 = 0;
        do
        {
          uint64_t v30 = &v4[v29];
          long long v31 = &v7[v29];
          __n128 result = v7[v29];
          v30[1].n128_u64[0] = v7[v29 + 1].n128_u64[0];
          *uint64_t v30 = result;
          v31->n128_u64[1] = 0;
          v31[1].n128_u64[0] = 0;
          v31->n128_u64[0] = 0;
          v30[1].n128_u32[2] = v7[v29 + 1].n128_u32[2];
          v29 += 2;
        }
        while (&v31[2] != v22);
      }
    }
    else if (a1 != a2)
    {
      __n128 result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u32[2] = a1[1].n128_u32[2];
      unint64_t v14 = a1 + 2;
      if (&a1[2] != a2)
      {
        uint64_t v15 = 0;
        unint64_t v16 = a4;
        do
        {
          uint64_t v17 = v14;
          uint64_t v18 = v16 + 2;
          if ((sub_216179024(v14, (void **)v16) & 0x80) != 0)
          {
            __n128 *v18 = *v16;
            v16[3].n128_u64[0] = v16[1].n128_u64[0];
            v16->n128_u64[1] = 0;
            v16[1].n128_u64[0] = 0;
            v16->n128_u64[0] = 0;
            v16[3].n128_u32[2] = v16[1].n128_u32[2];
            uint64_t v19 = v4;
            if (v16 != v4)
            {
              uint64_t v20 = v15;
              while (1)
              {
                uint64_t v19 = (__n128 *)((char *)v4 + v20);
                if ((sub_216179024(v17, (void **)((char *)&v4[-2] + v20)) & 0x80) == 0) {
                  break;
                }
                if (v19[1].n128_i8[7] < 0) {
                  operator delete((void *)v19->n128_u64[0]);
                }
                long long v21 = (char *)v4 + v20;
                *uint64_t v19 = *(__n128 *)((char *)v4 + v20 - 32);
                v19[1].n128_u64[0] = *(unint64_t *)((char *)v4[-1].n128_u64 + v20);
                *(v21 - 9) = 0;
                v19[-2].n128_u8[0] = 0;
                *((_DWORD *)v21 + 6) = *(unsigned __int32 *)((char *)&v4->n128_u32[-2] + v20);
                v20 -= 32;
                if (!v20)
                {
                  uint64_t v19 = v4;
                  break;
                }
              }
            }
            if (v19[1].n128_i8[7] < 0) {
              operator delete((void *)v19->n128_u64[0]);
            }
            __n128 result = *v17;
            v19[1].n128_u64[0] = v17[1].n128_u64[0];
            *uint64_t v19 = result;
            v7[3].n128_u8[7] = 0;
            v17->n128_u8[0] = 0;
            v19[1].n128_u32[2] = v7[3].n128_u32[2];
          }
          else
          {
            __n128 result = *v17;
            v16[3].n128_u64[0] = v17[1].n128_u64[0];
            __n128 *v18 = result;
            v17->n128_u64[1] = 0;
            v17[1].n128_u64[0] = 0;
            v17->n128_u64[0] = 0;
            v16[3].n128_u32[2] = v7[3].n128_u32[2];
          }
          unint64_t v14 = v17 + 2;
          v15 += 32;
          v16 += 2;
          unint64_t v7 = v17;
        }
        while (&v17[2] != a2);
      }
    }
  }
  return result;
}

void sub_2162D1594(void **a1, void **a2, void **a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v83 = a7;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return;
      }
      BOOL v13 = 0;
      uint64_t v14 = -a4;
      while (1)
      {
        uint64_t v15 = (void **)((char *)v13 + (void)a1);
        if ((sub_216179024(a2, (void **)((char *)v13 + (void)a1)) & 0x80) != 0) {
          break;
        }
        v13 += 4;
        if (__CFADD__(v14++, 1)) {
          return;
        }
      }
      uint64_t v17 = -v14;
      uint64_t v79 = v8;
      size_t v80 = a6;
      long long v82 = a3;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          uint64_t v65 = (uint64_t)v13 + (void)a1;
          uint64_t v89 = *(void **)((char *)v13 + (void)a1 + 16);
          long long v86 = *(_OWORD *)((char *)v13 + (void)a1);
          long long v66 = *(_OWORD *)a2;
          *(void *)(v65 + 16) = a2[2];
          *(_OWORD *)uint64_t v65 = v66;
          *(_OWORD *)a2 = v86;
          a2[2] = v89;
          int v67 = *(_DWORD *)((char *)v13 + (void)a1 + 24);
          *(_DWORD *)(v65 + 24) = *((_DWORD *)a2 + 6);
          *((_DWORD *)a2 + 6) = v67;
          return;
        }
        if (v14 > 0) {
          uint64_t v17 = 1 - v14;
        }
        uint64_t v23 = v17 >> 1;
        long long v21 = (void **)((char *)&a1[4 * (v17 >> 1)] + (void)v13);
        unint64_t v24 = a3;
        uint64_t v20 = a2;
        if (a2 != v24)
        {
          uint64_t v78 = v23;
          unint64_t v25 = ((char *)v82 - (char *)a2) >> 5;
          uint64_t v20 = a2;
          do
          {
            long long v26 = &v20[4 * (v25 >> 1)];
            int v27 = (char)sub_216179024(v26, v21);
            if (v27 >= 0) {
              v25 >>= 1;
            }
            else {
              v25 += ~(v25 >> 1);
            }
            if (v27 < 0) {
              uint64_t v20 = v26 + 4;
            }
          }
          while (v25);
          uint64_t v23 = v78;
        }
        uint64_t v19 = ((char *)v20 - (char *)a2) >> 5;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v18 = v8;
        }
        else {
          uint64_t v18 = v8 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = &a2[4 * (v18 >> 1)];
        long long v21 = a2;
        if ((void **)((char *)a2 - (char *)a1) != v13)
        {
          uint64_t v77 = v18 >> 1;
          unint64_t v22 = ((char *)a2 - (char *)a1 - (uint64_t)v13) >> 5;
          long long v21 = (void **)((char *)v13 + (void)a1);
          do
          {
            if ((sub_216179024(v20, &v21[4 * (v22 >> 1)]) & 0x80u) != 0)
            {
              v22 >>= 1;
            }
            else
            {
              v21 += 4 * (v22 >> 1) + 4;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          uint64_t v19 = v77;
        }
        uint64_t v23 = ((char *)v21 - (char *)a1 - (uint64_t)v13) >> 5;
      }
      if (v21 == a2)
      {
        __n128 v28 = v20;
      }
      else if (v20 == a2)
      {
        __n128 v28 = v21;
      }
      else
      {
        __n128 v28 = v21 + 4;
        uint64_t v29 = v21 + 4;
        uint64_t v30 = a2;
        while (1)
        {
          unint64_t v87 = *(v29 - 2);
          long long v84 = *((_OWORD *)v29 - 2);
          long long v31 = *(_OWORD *)v30;
          *(v29 - 2) = v30[2];
          *((_OWORD *)v29 - 2) = v31;
          *(_OWORD *)uint64_t v30 = v84;
          v30[2] = v87;
          int v32 = *((_DWORD *)v29 - 2);
          *((_DWORD *)v29 - 2) = *((_DWORD *)v30 + 6);
          *((_DWORD *)v30 + 6) = v32;
          v30 += 4;
          if (v30 == v20) {
            break;
          }
          if (v29 == a2) {
            a2 = v30;
          }
          v29 += 4;
          v28 += 4;
        }
        if (v29 != a2)
        {
          char v33 = a2;
          do
          {
            while (1)
            {
              size_t v88 = v29[2];
              long long v85 = *(_OWORD *)v29;
              long long v34 = *(_OWORD *)v33;
              v29[2] = v33[2];
              *(_OWORD *)uint64_t v29 = v34;
              v33[2] = v88;
              *(_OWORD *)char v33 = v85;
              int v35 = *((_DWORD *)v29 + 6);
              *((_DWORD *)v29 + 6) = *((_DWORD *)v33 + 6);
              *((_DWORD *)v33 + 6) = v35;
              v29 += 4;
              v33 += 4;
              if (v33 == v20) {
                break;
              }
              if (v29 == a2) {
                a2 = v33;
              }
            }
            char v33 = a2;
          }
          while (v29 != a2);
        }
      }
      a4 = -v23 - v14;
      uint64_t v36 = v79 - v19;
      if (v23 + v19 >= v79 - (v23 + v19) - v14)
      {
        uint64_t v38 = v23;
        uint64_t v39 = -v23 - v14;
        uint64_t v40 = v19;
        sub_2162D1594(v28, v20, v82, v39, v79 - v19, v80, v83);
        a2 = v21;
        a6 = v80;
        uint64_t v36 = v40;
        a4 = v38;
        a3 = v28;
      }
      else
      {
        unint64_t v37 = v21;
        a6 = v80;
        sub_2162D1594((char *)v13 + (void)a1, v37, v28, v23, v19, v80, v83);
        uint64_t v15 = v28;
        a2 = v20;
        a3 = v82;
      }
      uint64_t v8 = v36;
      a1 = v15;
      a7 = v83;
      if (!v36) {
        return;
      }
    }
    if (a4 <= v8)
    {
      if (a1 == a2) {
        return;
      }
      unint64_t v54 = 0;
      unint64_t v42 = 0;
      do
      {
        uint64_t v55 = (long long *)&a6[v54];
        int v56 = &a1[v54];
        long long v57 = *(_OWORD *)&a1[v54];
        *((void *)v55 + 2) = a1[v54 + 2];
        *uint64_t v55 = v57;
        v56[1] = 0;
        v56[2] = 0;
        void *v56 = 0;
        *((_DWORD *)v55 + 6) = a1[v54 + 3];
        ++v42;
        v54 += 4;
      }
      while (v56 + 4 != a2);
      if (v54 * 8)
      {
        unint64_t v58 = (long long *)&a6[v54];
        uint64_t v59 = (uint64_t)&a6[v54 - 4];
        long long v60 = a6;
        while (a2 != a3)
        {
          char v61 = sub_216179024(a2, v60);
          int v62 = *((char *)a1 + 23);
          if (v61 < 0)
          {
            if (v62 < 0) {
              operator delete(*a1);
            }
            long long v64 = *(_OWORD *)a2;
            a1[2] = a2[2];
            *(_OWORD *)a1 = v64;
            *((unsigned char *)a2 + 23) = 0;
            *(unsigned char *)a2 = 0;
            *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
            a2 += 4;
          }
          else
          {
            if (v62 < 0) {
              operator delete(*a1);
            }
            long long v63 = *(_OWORD *)v60;
            a1[2] = v60[2];
            *(_OWORD *)a1 = v63;
            *((unsigned char *)v60 + 23) = 0;
            *(unsigned char *)long long v60 = 0;
            *((_DWORD *)a1 + 6) = *((_DWORD *)v60 + 6);
            v60 += 4;
          }
          a1 += 4;
          if (v58 == (long long *)v60) {
            goto LABEL_105;
          }
        }
        if (v58 != (long long *)v60)
        {
          unint64_t v72 = 0;
          do
          {
            uint64_t v73 = &a1[v72];
            if (SHIBYTE(a1[v72 + 2]) < 0) {
              operator delete(*v73);
            }
            long long v74 = (long long *)&v60[v72];
            long long v75 = *(_OWORD *)&v60[v72];
            v73[2] = v60[v72 + 2];
            *(_OWORD *)uint64_t v73 = v75;
            *((unsigned char *)v74 + 23) = 0;
            *(unsigned char *)long long v74 = 0;
            *((_DWORD *)v73 + 6) = v60[v72 + 3];
            v72 += 4;
          }
          while ((long long *)v59 != v74);
        }
      }
    }
    else
    {
      if (a3 == a2) {
        return;
      }
      unint64_t v41 = 0;
      unint64_t v42 = 0;
      do
      {
        __n128 v43 = (long long *)&a6[v41];
        __n128 v44 = &a2[v41];
        long long v45 = *(_OWORD *)&a2[v41];
        *((void *)v43 + 2) = a2[v41 + 2];
        *__n128 v43 = v45;
        v44[1] = 0;
        uint64_t v44[2] = 0;
        *__n128 v44 = 0;
        *((_DWORD *)v43 + 6) = a2[v41 + 3];
        ++v42;
        v41 += 4;
      }
      while (v44 + 4 != a3);
      if (v41 * 8)
      {
        uint64_t v46 = &a6[v41];
        uint64_t v81 = a6;
        while (a2 != a1)
        {
          int v47 = (char)sub_216179024(v46 - 4, a2 - 4);
          int v48 = a3 - 4;
          int v49 = *((char *)a3 - 9);
          if (v47 >= 0) {
            size_t v50 = v46;
          }
          else {
            size_t v50 = a2;
          }
          uint64_t v51 = a3;
          if (v47 >= 0) {
            size_t v52 = v46 - 4;
          }
          else {
            size_t v52 = a2 - 4;
          }
          if (v47 >= 0) {
            v46 -= 4;
          }
          else {
            a2 -= 4;
          }
          if (v49 < 0) {
            operator delete(*v48);
          }
          long long v53 = *(_OWORD *)v52;
          v48[2] = v52[2];
          *(_OWORD *)int v48 = v53;
          *((unsigned char *)v50 - 9) = 0;
          *(unsigned char *)size_t v52 = 0;
          *((_DWORD *)v51 - 2) = *((_DWORD *)v50 - 2);
          a3 = v48;
          a6 = v81;
          if (v46 == v81) {
            goto LABEL_105;
          }
        }
        if (v46 != a6)
        {
          uint64_t v68 = 0;
          do
          {
            long long v69 = &a3[v68 - 4];
            if (*((char *)&a3[v68 - 1] - 1) < 0) {
              operator delete(*v69);
            }
            unint64_t v70 = (long long *)&v46[v68 - 4];
            long long v71 = *v70;
            a3[v68 - 2] = v46[v68 - 2];
            *(_OWORD *)long long v69 = v71;
            *((unsigned char *)&v46[v68 - 1] - 1) = 0;
            *(unsigned char *)unint64_t v70 = 0;
            LODWORD(a3[v68 - 1]) = v46[v68 - 1];
            v68 -= 4;
          }
          while (&v46[v68] != a6);
        }
      }
    }
LABEL_105:
    if (a6)
    {
      unint64_t v76 = 0;
      do
      {
        if (*((char *)a6 + 23) < 0) {
          operator delete(*a6);
        }
        ++v76;
        a6 += 4;
      }
      while (v76 < v42);
    }
  }
}

uint64_t sub_2162D1BD8(uint64_t a1, double a2)
{
  double v2 = a2;
  unint64_t v4 = *(void *)(a1 + 400);
  if (v4 <= 0x30)
  {
    if (v4)
    {
      a2 = *(double *)(a1 + 408);
      if (a2 < v2) {
        a2 = v2;
      }
    }
    *(double *)(a1 + 408) = a2;
    *(void *)(a1 + 40sub_216195244(&a9, 0) = v4 + 1;
    *(double *)(a1 + 8 * v4) = v2;
    return 1;
  }
  uint64_t v5 = (void *)(a1 + 400);
  if (v4 == 49) {
    std::__sort<std::__less<double,double> &,double *>();
  }
  unint64_t v6 = 50;
  unint64_t v7 = (double *)a1;
  do
  {
    unint64_t v8 = v6 >> 1;
    __n128 v9 = &v7[v6 >> 1];
    double v11 = *v9;
    char v10 = v9 + 1;
    v6 += ~(v6 >> 1);
    if (v11 > v2) {
      unint64_t v6 = v8;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v6);
  if ((unint64_t)v7 - a1 <= 0x18F)
  {
    __n128 v12 = v7;
    memmove(v7 + 1, v7, 392 - ((void)v7 - a1));
    *__n128 v12 = v2;
    if (v4 == 49) {
      ++*v5;
    }
    *(void *)(a1 + 408) = *(void *)(a1 + 392);
    return 1;
  }
  return 0;
}

uint64_t sub_2162D1CE4(unsigned int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E420, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E420))
  {
    qword_26797E430 = 0;
    qword_26797E438 = 0;
    qword_26797E440 = 0;
    unint64_t v4 = operator new(0x80uLL);
    qword_26797E430 = (uint64_t)v4;
    *unint64_t v4 = 0u;
    v4[1] = 0u;
    void v4[2] = 0u;
    v4[3] = 0u;
    void v4[4] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[7] = 0u;
    qword_26797E438 = (uint64_t)(v4 + 8);
    qword_26797E440 = (uint64_t)(v4 + 8);
    __cxa_atexit((void (*)(void *))sub_2162D1E68, &qword_26797E430, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E420);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E428, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E428))
  {
    sub_2162D1ED4();
    __cxa_atexit((void (*)(void *))sub_2162D1E9C, &qword_26797E448, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E428);
  }
  double v2 = (std::mutex *)(qword_26797E448 + ((unint64_t)a1 << 6));
  std::mutex::lock(v2);
  if (!*(void *)(qword_26797E430 + 8 * a1)) {
    *(void *)(qword_26797E430 + 8 * a1) = os_log_create("com.apple.mecabra", &aDefault_0[17 * a1]);
  }
  std::mutex::unlock(v2);
  return *(void *)(qword_26797E430 + 8 * a1);
}

void sub_2162D1E40(_Unwind_Exception *a1)
{
}

uint64_t sub_2162D1E68(uint64_t a1)
{
  double v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void **sub_2162D1E9C(void **a1)
{
  unint64_t v3 = a1;
  sub_2162D1F74(&v3);
  return a1;
}

char *sub_2162D1ED4()
{
  qword_26797E448 = 0;
  qword_26797E450 = 0;
  qword_26797E458 = 0;
  __n128 result = (char *)operator new(0x400uLL);
  uint64_t v1 = 0;
  qword_26797E448 = (uint64_t)result;
  qword_26797E450 = (uint64_t)result;
  qword_26797E458 = (uint64_t)(result + 1024);
  do
  {
    double v2 = &result[v1];
    *(void *)double v2 = 850045863;
    *(_OWORD *)(v2 + 8) = 0uLL;
    *(_OWORD *)(v2 + 24) = 0uLL;
    *(_OWORD *)(v2 + 4sub_216195244(&a9, 0) = 0uLL;
    v1 += 64;
    *((void *)v2 + 7) = 0;
  }
  while (v1 != 1024);
  qword_26797E450 = (uint64_t)(result + 1024);
  return result;
}

void sub_2162D1F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_2162D1F74(void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (std::mutex *)**a1;
  if (v2)
  {
    unint64_t v4 = (std::mutex *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        std::mutex::~mutex(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2162D1FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t v4 = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 216) = 0u;
  uint64_t v5 = a1 + 216;
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 247) = 0;
  LODWORD(v4) = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 256) = 1;
  *(_DWORD *)(a1 + 26sub_216195244(&a9, 0) = v4;
  *(void *)(a1 + 264) = v6;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 32sub_216195244(&a9, 0) = 0u;
  int v7 = *(_DWORD *)a2;
  *(unsigned char *)(v5 + 12sub_216195244(&a9, 0) = *(_DWORD *)a2 == 5;
  int v16 = v7;
  unint64_t v8 = sub_2161E2834(v7);
  for (uint64_t i = 0; i != 6; ++i)
  {
    CFStringRef v10 = off_26426E850[i];
    double v11 = (uint64_t *)sub_2162D8C20();
    __n128 v12 = (char *)sub_2162D8CB8(v11, v8, off_26797C900[0], v10);
    uint64_t v13 = v12[23];
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *((void *)v12 + 1);
    }
    if (v13)
    {
      v18[0] = MEMORY[0x263EF8330];
      v18[1] = 0x40000000;
      void v18[2] = sub_2161A0748;
      v18[3] = &unk_264266C08;
      int v19 = v8;
      v18[4] = v12;
      sub_21619FED8(v12, (uint64_t)v18, 0, &v17);
      if ((void)v17)
      {
        sub_2162294C4((uint64_t *)v5, &v17);
        sub_2162D294C((void *)a1, v17);
      }
      if (*((void *)&v17 + 1)) {
        sub_2161121B0(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
  }
  sub_2162D2394(a1);
  sub_2162D2508((void *)a1);
  if (v16 > 4)
  {
    if (v16 == 5)
    {
      uint64_t v14 = 0x200000000;
      goto LABEL_19;
    }
    if (v16 == 13) {
      *(_DWORD *)(a1 + 24sub_216195244(&a9, 0) = 0;
    }
  }
  else
  {
    if (v16 == 2)
    {
      uint64_t v14 = 0x100000000;
      goto LABEL_19;
    }
    if (v16 == 4)
    {
      uint64_t v14 = 0x200000001;
LABEL_19:
      *(void *)(a1 + 24sub_216195244(&a9, 0) = v14;
    }
  }
  return a1;
}

void sub_2162D2214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12)
{
  uint64_t v15 = v12[41];
  v12[41] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v12[40];
  v12[40] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v12[39];
  v12[39] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = v12[38];
  v12[38] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  sub_2162BE5B8((uint64_t *)(v13 + 40));
  a12 = (void **)v13;
  sub_2161FB708(&a12);
  int v19 = (void *)v12[24];
  if (v19)
  {
    v12[25] = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)v12[21];
  if (v20)
  {
    v12[22] = v20;
    operator delete(v20);
  }
  long long v21 = (void *)v12[18];
  if (v21)
  {
    v12[19] = v21;
    operator delete(v21);
  }
  unint64_t v22 = (void *)v12[15];
  if (v22)
  {
    v12[16] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)v12[12];
  if (v23)
  {
    v12[13] = v23;
    operator delete(v23);
  }
  unint64_t v24 = (void *)v12[9];
  if (v24)
  {
    v12[10] = v24;
    operator delete(v24);
  }
  unint64_t v25 = (void *)v12[6];
  if (v25)
  {
    v12[7] = v25;
    operator delete(v25);
  }
  long long v26 = *a10;
  if (*a10)
  {
    void v12[4] = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void sub_2162D2394(uint64_t a1)
{
  sub_2162D28AC((void *)a1, (const void **)&v11);
  double v2 = v11;
  unint64_t v3 = v12;
  if (v11 != v12)
  {
    do
    {
      (*(void (**)(void, void))(*(void *)*v2 + 48))(*v2, *(unsigned int *)(a1 + 240));
      ++v2;
    }
    while (v2 != v3);
    double v2 = v11;
  }
  if (v2)
  {
    __n128 v12 = v2;
    operator delete(v2);
  }
  sub_2162D26AC((void *)a1, (const void **)&v11);
  uint64_t v4 = v11;
  uint64_t v5 = v12;
  if (v11 != v12)
  {
    do
    {
      (*(void (**)(void, void))(*(void *)*v4 + 48))(*v4, *(unsigned int *)(a1 + 240));
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v11;
  }
  if (v4)
  {
    __n128 v12 = v4;
    operator delete(v4);
  }
  uint64_t v6 = *(uint64_t **)(a1 + 72);
  int v7 = *(uint64_t **)(a1 + 80);
  while (v6 != v7)
  {
    uint64_t v9 = *v6++;
    uint64_t v8 = v9;
    if ((*(_DWORD *)(*(void *)a1 + 24) & 0x800) != 0) {
      uint64_t v10 = 244;
    }
    else {
      uint64_t v10 = 240;
    }
    (*(void (**)(uint64_t, void))(*(void *)v8 + 48))(v8, *(unsigned int *)(a1 + v10));
  }
}

void sub_2162D24E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162D2508(void *result)
{
  if (!result[41] && !result[40] && (*(unsigned char *)(*result + 27) & 8) == 0) {
    operator new();
  }
  return result;
}

void sub_2162D2688(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10B1C40A034DB5ALL);
  _Unwind_Resume(a1);
}

char *sub_2162D26AC@<X0>(void *a1@<X0>, const void **a2@<X8>)
{
  uint64_t v4 = a1 + 15;
  uint64_t v5 = 15;
  if ((*(_DWORD *)(*a1 + 24) & 0x4000) == 0)
  {
    uint64_t v5 = 12;
    uint64_t v4 = a1 + 12;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_2162D4044(a2, (const void *)a1[v5], v4[1], (uint64_t)(v4[1] - a1[v5]) >> 3);
  return sub_2162D40C0(a2, (uint64_t)a2[1], *(uint64_t **)(a1[1] + 72), *(uint64_t **)(a1[1] + 80), (uint64_t)(*(void *)(a1[1] + 80) - *(void *)(a1[1] + 72)) >> 3);
}

void sub_2162D2730(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162D274C(uint64_t a1@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  double v2 = *(void **)(a1 + 24);
  unint64_t v3 = *(void **)(a1 + 32);
  if (v2 != v3)
  {
    uint64_t v5 = (uint64_t)(a2 + 2);
    do
    {
      uint64_t v6 = *v2;
      if (!(*(unsigned int (**)(void))(*(void *)*v2 + 16))(*v2))
      {
        uint64_t v8 = a2[1];
        unint64_t v7 = (unint64_t)a2[2];
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v10 = ((char *)v8 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v10 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v11 = v7 - (void)*a2;
          uint64_t v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
            uint64_t v12 = v10 + 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            uint64_t v14 = (char *)sub_2160FFAA8(v5, v13);
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = &v14[8 * v10];
          *(void *)uint64_t v15 = v6;
          uint64_t v9 = v15 + 8;
          uint64_t v17 = (char *)*a2;
          uint64_t v16 = (char *)a2[1];
          if (v16 != *a2)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            uint64_t v16 = (char *)*a2;
          }
          *a2 = v15;
          a2[1] = v9;
          a2[2] = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          void *v8 = v6;
          uint64_t v9 = v8 + 1;
        }
        a2[1] = v9;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_2162D288C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2162D28AC@<X0>(void *a1@<X0>, const void **a2@<X8>)
{
  uint64_t v4 = a1 + 6;
  uint64_t v5 = 6;
  if ((*(_DWORD *)(*a1 + 24) & 0x4000) == 0)
  {
    uint64_t v5 = 3;
    uint64_t v4 = a1 + 3;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_2162D4044(a2, (const void *)a1[v5], v4[1], (uint64_t)(v4[1] - a1[v5]) >> 3);
  return sub_2162D40C0(a2, (uint64_t)a2[1], *(uint64_t **)(a1[1] + 48), *(uint64_t **)(a1[1] + 56), (uint64_t)(*(void *)(a1[1] + 56) - *(void *)(a1[1] + 48)) >> 3);
}

void sub_2162D2930(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162D294C(void *a1, uint64_t a2)
{
  if (!a2) {
    return;
  }
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) & 1) == 0)
  {
    switch(v4)
    {
      case 0:
        unint64_t v37 = a1[26];
        uint64_t v38 = (void *)a1[25];
        if ((unint64_t)v38 >= v37)
        {
          uint64_t v83 = a1[24];
          uint64_t v84 = ((uint64_t)v38 - v83) >> 3;
          if ((unint64_t)(v84 + 1) >> 61) {
            goto LABEL_219;
          }
          uint64_t v85 = v37 - v83;
          uint64_t v86 = v85 >> 2;
          if (v85 >> 2 <= (unint64_t)(v84 + 1)) {
            uint64_t v86 = v84 + 1;
          }
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v87 = v86;
          }
          if (v87) {
            size_t v88 = (char *)sub_2160FFAA8((uint64_t)(a1 + 26), v87);
          }
          else {
            size_t v88 = 0;
          }
          unint64_t v112 = &v88[8 * v84];
          uint64_t v113 = &v88[8 * v87];
          *(void *)unint64_t v112 = a2;
          uint64_t v39 = v112 + 8;
          long long v115 = (char *)a1[24];
          uint64_t v114 = (char *)a1[25];
          if (v114 != v115)
          {
            do
            {
              uint64_t v116 = *((void *)v114 - 1);
              v114 -= 8;
              *((void *)v112 - 1) = v116;
              v112 -= 8;
            }
            while (v114 != v115);
            uint64_t v114 = (char *)a1[24];
          }
          a1[24] = v112;
          a1[25] = v39;
          a1[26] = v113;
          if (v114) {
            operator delete(v114);
          }
        }
        else
        {
          void *v38 = a2;
          uint64_t v39 = v38 + 1;
        }
        a1[25] = v39;
LABEL_133:
        unint64_t v117 = a1[5];
        int v118 = (void *)a1[4];
        if ((unint64_t)v118 >= v117)
        {
          uint64_t v120 = a1[3];
          uint64_t v121 = ((uint64_t)v118 - v120) >> 3;
          if ((unint64_t)(v121 + 1) >> 61) {
            goto LABEL_219;
          }
          uint64_t v122 = v117 - v120;
          uint64_t v123 = v122 >> 2;
          if (v122 >> 2 <= (unint64_t)(v121 + 1)) {
            uint64_t v123 = v121 + 1;
          }
          if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v123;
          }
          if (v124) {
            char v125 = (char *)sub_2160FFAA8((uint64_t)(a1 + 5), v124);
          }
          else {
            char v125 = 0;
          }
          uint64_t v126 = &v125[8 * v121];
          int v127 = &v125[8 * v124];
          *(void *)uint64_t v126 = a2;
          int v119 = v126 + 8;
          size_t v129 = (char *)a1[3];
          unint64_t v128 = (char *)a1[4];
          if (v128 != v129)
          {
            do
            {
              uint64_t v130 = *((void *)v128 - 1);
              v128 -= 8;
              *((void *)v126 - 1) = v130;
              v126 -= 8;
            }
            while (v128 != v129);
            unint64_t v128 = (char *)a1[3];
          }
          a1[3] = v126;
          a1[4] = v119;
          a1[5] = v127;
          if (v128) {
            operator delete(v128);
          }
        }
        else
        {
          *int v118 = a2;
          int v119 = v118 + 1;
        }
        unint64_t v131 = a1[8];
        a1[4] = v119;
        uint64_t v55 = (void *)a1[7];
        if ((unint64_t)v55 < v131)
        {
LABEL_176:
          *uint64_t v55 = a2;
          uint64_t v73 = v55 + 1;
LABEL_198:
          a1[7] = v73;
          goto LABEL_199;
        }
        int v56 = (void **)(a1 + 6);
        uint64_t v132 = a1[6];
        uint64_t v133 = ((uint64_t)v55 - v132) >> 3;
        if (!((unint64_t)(v133 + 1) >> 61))
        {
          uint64_t v134 = v131 - v132;
          uint64_t v135 = v134 >> 2;
          if (v134 >> 2 <= (unint64_t)(v133 + 1)) {
            uint64_t v135 = v133 + 1;
          }
          if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v136 = v135;
          }
          if (v136) {
            char v137 = (char *)sub_2160FFAA8((uint64_t)(a1 + 8), v136);
          }
          else {
            char v137 = 0;
          }
          long long v71 = &v137[8 * v133];
          unint64_t v72 = &v137[8 * v136];
          *(void *)long long v71 = a2;
          uint64_t v73 = v71 + 8;
          uint64_t v138 = (char *)a1[6];
          long long v74 = (char *)a1[7];
          if (v74 == v138) {
            goto LABEL_196;
          }
          do
          {
            uint64_t v139 = *((void *)v74 - 1);
            v74 -= 8;
            *((void *)v71 - 1) = v139;
            v71 -= 8;
          }
          while (v74 != v138);
LABEL_195:
          long long v74 = (char *)*v56;
LABEL_196:
          a1[6] = v71;
          a1[7] = v73;
          a1[8] = v72;
          if (v74) {
            operator delete(v74);
          }
          goto LABEL_198;
        }
LABEL_219:
        sub_21610CB04();
      case 1:
        unint64_t v40 = a1[11];
        unint64_t v41 = (void *)a1[10];
        if ((unint64_t)v41 >= v40)
        {
          uint64_t v89 = a1[9];
          uint64_t v90 = ((uint64_t)v41 - v89) >> 3;
          if ((unint64_t)(v90 + 1) >> 61) {
            goto LABEL_219;
          }
          uint64_t v91 = v40 - v89;
          uint64_t v92 = v91 >> 2;
          if (v91 >> 2 <= (unint64_t)(v90 + 1)) {
            uint64_t v92 = v90 + 1;
          }
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v92;
          }
          if (v93) {
            uint64_t v94 = (char *)sub_2160FFAA8((uint64_t)(a1 + 11), v93);
          }
          else {
            uint64_t v94 = 0;
          }
          unint64_t v140 = &v94[8 * v90];
          unint64_t v141 = &v94[8 * v93];
          *(void *)unint64_t v140 = a2;
          unint64_t v42 = v140 + 8;
          uint64_t v143 = (char *)a1[9];
          long long v142 = (char *)a1[10];
          if (v142 != v143)
          {
            do
            {
              uint64_t v144 = *((void *)v142 - 1);
              v142 -= 8;
              *((void *)v140 - 1) = v144;
              v140 -= 8;
            }
            while (v142 != v143);
            long long v142 = (char *)a1[9];
          }
          a1[9] = v140;
          a1[10] = v42;
          a1[11] = v141;
          if (v142) {
            operator delete(v142);
          }
        }
        else
        {
          *unint64_t v41 = a2;
          unint64_t v42 = v41 + 1;
        }
        a1[10] = v42;
        goto LABEL_199;
      case 3:
        goto LABEL_133;
      case 5:
        unint64_t v43 = a1[5];
        __n128 v44 = (void *)a1[4];
        if ((unint64_t)v44 >= v43)
        {
          uint64_t v95 = a1[3];
          uint64_t v96 = ((uint64_t)v44 - v95) >> 3;
          if ((unint64_t)(v96 + 1) >> 61) {
            goto LABEL_219;
          }
          uint64_t v97 = v43 - v95;
          uint64_t v98 = v97 >> 2;
          if (v97 >> 2 <= (unint64_t)(v96 + 1)) {
            uint64_t v98 = v96 + 1;
          }
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v99 = v98;
          }
          if (v99) {
            unint64_t v100 = (char *)sub_2160FFAA8((uint64_t)(a1 + 5), v99);
          }
          else {
            unint64_t v100 = 0;
          }
          unint64_t v145 = &v100[8 * v96];
          uint64_t v146 = &v100[8 * v99];
          *(void *)unint64_t v145 = a2;
          long long v45 = v145 + 8;
          uint64_t v148 = (char *)a1[3];
          unint64_t v147 = (char *)a1[4];
          if (v147 != v148)
          {
            do
            {
              uint64_t v149 = *((void *)v147 - 1);
              v147 -= 8;
              *((void *)v145 - 1) = v149;
              v145 -= 8;
            }
            while (v147 != v148);
            unint64_t v147 = (char *)a1[3];
          }
          a1[3] = v145;
          a1[4] = v45;
          a1[5] = v146;
          if (v147) {
            operator delete(v147);
          }
        }
        else
        {
          *__n128 v44 = a2;
          long long v45 = v44 + 1;
        }
        unint64_t v150 = a1[8];
        a1[4] = v45;
        uint64_t v55 = (void *)a1[7];
        if ((unint64_t)v55 < v150) {
          goto LABEL_176;
        }
        int v56 = (void **)(a1 + 6);
        uint64_t v151 = a1[6];
        uint64_t v152 = ((uint64_t)v55 - v151) >> 3;
        if (!((unint64_t)(v152 + 1) >> 61))
        {
          uint64_t v153 = v150 - v151;
          uint64_t v154 = v153 >> 2;
          if (v153 >> 2 <= (unint64_t)(v152 + 1)) {
            uint64_t v154 = v152 + 1;
          }
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v154;
          }
          if (v155) {
            int64x2_t v156 = (char *)sub_2160FFAA8((uint64_t)(a1 + 8), v155);
          }
          else {
            int64x2_t v156 = 0;
          }
          long long v71 = &v156[8 * v152];
          unint64_t v72 = &v156[8 * v155];
          *(void *)long long v71 = a2;
          uint64_t v73 = v71 + 8;
          unint64_t v162 = (char *)a1[6];
          long long v74 = (char *)a1[7];
          if (v74 == v162) {
            goto LABEL_196;
          }
          do
          {
            uint64_t v163 = *((void *)v74 - 1);
            v74 -= 8;
            *((void *)v71 - 1) = v163;
            v71 -= 8;
          }
          while (v74 != v162);
          goto LABEL_195;
        }
        goto LABEL_219;
      case 9:
        unint64_t v46 = a1[26];
        int v47 = (void *)a1[25];
        if ((unint64_t)v47 >= v46)
        {
          uint64_t v101 = a1[24];
          uint64_t v102 = ((uint64_t)v47 - v101) >> 3;
          if ((unint64_t)(v102 + 1) >> 61) {
            goto LABEL_219;
          }
          uint64_t v103 = v46 - v101;
          uint64_t v104 = v103 >> 2;
          if (v103 >> 2 <= (unint64_t)(v102 + 1)) {
            uint64_t v104 = v102 + 1;
          }
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v105 = v104;
          }
          if (v105) {
            unint64_t v106 = (char *)sub_2160FFAA8((uint64_t)(a1 + 26), v105);
          }
          else {
            unint64_t v106 = 0;
          }
          std::string::size_type v157 = &v106[8 * v102];
          int v158 = &v106[8 * v105];
          *(void *)std::string::size_type v157 = a2;
          int v48 = v157 + 8;
          std::string::size_type v160 = (char *)a1[24];
          uint64_t v159 = (char *)a1[25];
          if (v159 != v160)
          {
            do
            {
              uint64_t v161 = *((void *)v159 - 1);
              v159 -= 8;
              *((void *)v157 - 1) = v161;
              v157 -= 8;
            }
            while (v159 != v160);
            uint64_t v159 = (char *)a1[24];
          }
          a1[24] = v157;
          a1[25] = v48;
          a1[26] = v158;
          if (v159) {
            operator delete(v159);
          }
        }
        else
        {
          *int v47 = a2;
          int v48 = v47 + 1;
        }
        a1[25] = v48;
LABEL_4:
        unint64_t v5 = a1[5];
        uint64_t v6 = (void *)a1[4];
        if ((unint64_t)v6 >= v5)
        {
          uint64_t v17 = a1[3];
          uint64_t v18 = ((uint64_t)v6 - v17) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            goto LABEL_219;
          }
          uint64_t v19 = v5 - v17;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            unint64_t v22 = (char *)sub_2160FFAA8((uint64_t)(a1 + 5), v21);
          }
          else {
            unint64_t v22 = 0;
          }
          int v49 = &v22[8 * v18];
          size_t v50 = &v22[8 * v21];
          *(void *)int v49 = a2;
          unint64_t v7 = v49 + 8;
          size_t v52 = (char *)a1[3];
          uint64_t v51 = (char *)a1[4];
          if (v51 != v52)
          {
            do
            {
              uint64_t v53 = *((void *)v51 - 1);
              v51 -= 8;
              *((void *)v49 - 1) = v53;
              v49 -= 8;
            }
            while (v51 != v52);
            uint64_t v51 = (char *)a1[3];
          }
          a1[3] = v49;
          a1[4] = v7;
          a1[5] = v50;
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          *uint64_t v6 = a2;
          unint64_t v7 = v6 + 1;
        }
        unint64_t v54 = a1[8];
        a1[4] = v7;
        uint64_t v55 = (void *)a1[7];
        if ((unint64_t)v55 < v54) {
          goto LABEL_176;
        }
        int v56 = (void **)(a1 + 6);
        uint64_t v57 = a1[6];
        uint64_t v58 = ((uint64_t)v55 - v57) >> 3;
        if (!((unint64_t)(v58 + 1) >> 61))
        {
          uint64_t v59 = v54 - v57;
          uint64_t v60 = v59 >> 2;
          if (v59 >> 2 <= (unint64_t)(v58 + 1)) {
            uint64_t v60 = v58 + 1;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v60;
          }
          if (v61) {
            int v62 = (char *)sub_2160FFAA8((uint64_t)(a1 + 8), v61);
          }
          else {
            int v62 = 0;
          }
          long long v71 = &v62[8 * v58];
          unint64_t v72 = &v62[8 * v61];
          *(void *)long long v71 = a2;
          uint64_t v73 = v71 + 8;
          long long v75 = (char *)a1[6];
          long long v74 = (char *)a1[7];
          if (v74 == v75) {
            goto LABEL_196;
          }
          do
          {
            uint64_t v76 = *((void *)v74 - 1);
            v74 -= 8;
            *((void *)v71 - 1) = v76;
            v71 -= 8;
          }
          while (v74 != v75);
          goto LABEL_195;
        }
        goto LABEL_219;
      case 10:
      case 11:
      case 14:
      case 17:
        goto LABEL_4;
      default:
        return;
    }
  }
  unint64_t v8 = a1[17];
  uint64_t v9 = (void *)a1[16];
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = a1[15];
    uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      goto LABEL_219;
    }
    uint64_t v13 = v8 - v11;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      uint64_t v16 = (char *)sub_2160FFAA8((uint64_t)(a1 + 17), v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v23 = &v16[8 * v12];
    unint64_t v24 = &v16[8 * v15];
    *(void *)uint64_t v23 = a2;
    uint64_t v10 = v23 + 8;
    long long v26 = (char *)a1[15];
    unint64_t v25 = (char *)a1[16];
    if (v25 != v26)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *((void *)v23 - 1) = v27;
        v23 -= 8;
      }
      while (v25 != v26);
      unint64_t v25 = (char *)a1[15];
    }
    a1[15] = v23;
    a1[16] = v10;
    a1[17] = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *uint64_t v9 = a2;
    uint64_t v10 = v9 + 1;
  }
  a1[16] = v10;
  if (v4 == 6) {
    return;
  }
  unint64_t v28 = a1[14];
  uint64_t v29 = (void *)a1[13];
  if ((unint64_t)v29 >= v28)
  {
    uint64_t v31 = a1[12];
    uint64_t v32 = ((uint64_t)v29 - v31) >> 3;
    if ((unint64_t)(v32 + 1) >> 61) {
      goto LABEL_219;
    }
    uint64_t v33 = v28 - v31;
    uint64_t v34 = v33 >> 2;
    if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
      uint64_t v34 = v32 + 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v34;
    }
    if (v35) {
      uint64_t v36 = (char *)sub_2160FFAA8((uint64_t)(a1 + 14), v35);
    }
    else {
      uint64_t v36 = 0;
    }
    long long v63 = &v36[8 * v32];
    long long v64 = &v36[8 * v35];
    *(void *)long long v63 = a2;
    uint64_t v30 = v63 + 8;
    long long v66 = (char *)a1[12];
    uint64_t v65 = (char *)a1[13];
    if (v65 != v66)
    {
      do
      {
        uint64_t v67 = *((void *)v65 - 1);
        v65 -= 8;
        *((void *)v63 - 1) = v67;
        v63 -= 8;
      }
      while (v65 != v66);
      uint64_t v65 = (char *)a1[12];
    }
    a1[12] = v63;
    a1[13] = v30;
    a1[14] = v64;
    if (v65) {
      operator delete(v65);
    }
  }
  else
  {
    void *v29 = a2;
    uint64_t v30 = v29 + 1;
  }
  a1[13] = v30;
  if (v4 != 9 && v4 != 14)
  {
    if (v4 != 12) {
      return;
    }
    unint64_t v68 = a1[23];
    long long v69 = (void *)a1[22];
    if ((unint64_t)v69 >= v68)
    {
      uint64_t v77 = a1[21];
      uint64_t v78 = ((uint64_t)v69 - v77) >> 3;
      if ((unint64_t)(v78 + 1) >> 61) {
        goto LABEL_219;
      }
      uint64_t v79 = v68 - v77;
      uint64_t v80 = v79 >> 2;
      if (v79 >> 2 <= (unint64_t)(v78 + 1)) {
        uint64_t v80 = v78 + 1;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v80;
      }
      if (v81) {
        long long v82 = (char *)sub_2160FFAA8((uint64_t)(a1 + 23), v81);
      }
      else {
        long long v82 = 0;
      }
      long long v107 = &v82[8 * v78];
      unint64_t v108 = &v82[8 * v81];
      *(void *)long long v107 = a2;
      unint64_t v70 = v107 + 8;
      long long v110 = (char *)a1[21];
      uint64_t v109 = (char *)a1[22];
      if (v109 != v110)
      {
        do
        {
          uint64_t v111 = *((void *)v109 - 1);
          v109 -= 8;
          *((void *)v107 - 1) = v111;
          v107 -= 8;
        }
        while (v109 != v110);
        uint64_t v109 = (char *)a1[21];
      }
      a1[21] = v107;
      a1[22] = v70;
      a1[23] = v108;
      if (v109) {
        operator delete(v109);
      }
    }
    else
    {
      void *v69 = a2;
      unint64_t v70 = v69 + 1;
    }
    a1[22] = v70;
LABEL_199:
    if (v4 != 14 && v4 != 9) {
      return;
    }
  }
  unint64_t v164 = a1[20];
  int v165 = (void *)a1[19];
  if ((unint64_t)v165 >= v164)
  {
    uint64_t v167 = a1[18];
    uint64_t v168 = ((uint64_t)v165 - v167) >> 3;
    if ((unint64_t)(v168 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v169 = v164 - v167;
    uint64_t v170 = v169 >> 2;
    if (v169 >> 2 <= (unint64_t)(v168 + 1)) {
      uint64_t v170 = v168 + 1;
    }
    if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v171 = v170;
    }
    if (v171) {
      int v172 = (char *)sub_2160FFAA8((uint64_t)(a1 + 20), v171);
    }
    else {
      int v172 = 0;
    }
    __int16 v173 = &v172[8 * v168];
    uint64_t v174 = &v172[8 * v171];
    *(void *)__int16 v173 = a2;
    int v166 = v173 + 8;
    uint64_t v176 = (char *)a1[18];
    int v175 = (char *)a1[19];
    if (v175 != v176)
    {
      do
      {
        uint64_t v177 = *((void *)v175 - 1);
        v175 -= 8;
        *((void *)v173 - 1) = v177;
        v173 -= 8;
      }
      while (v175 != v176);
      int v175 = (char *)a1[18];
    }
    a1[18] = v173;
    a1[19] = v166;
    a1[20] = v174;
    if (v175) {
      operator delete(v175);
    }
  }
  else
  {
    *int v165 = a2;
    int v166 = v165 + 1;
  }
  a1[19] = v166;
}

void *sub_2162D3320(void *result)
{
  uint64_t v1 = result;
  double v2 = (uint64_t *)result[18];
  unint64_t v3 = (uint64_t *)result[19];
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      uint64_t v10 = v4;
      if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4)) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      if (result == 14) {
        goto LABEL_7;
      }
      if (result == 9)
      {
        unint64_t v5 = sub_2162D3524((void *)v1[24], (void *)v1[25], &v10);
        if ((void *)v1[25] != v5) {
          v1[25] = v5;
        }
LABEL_7:
        uint64_t v6 = sub_2162D3524((void *)v1[3], (void *)v1[4], &v10);
        if ((void *)v1[4] != v6) {
          v1[4] = v6;
        }
        __n128 result = sub_2162D3524((void *)v1[6], (void *)v1[7], &v10);
        if ((void *)v1[7] == result) {
          goto LABEL_16;
        }
        unint64_t v7 = result;
        unint64_t v8 = v1 + 7;
LABEL_15:
        void *v8 = v7;
      }
LABEL_16:
      if (++v2 == v3)
      {
        double v2 = (uint64_t *)v1[18];
        goto LABEL_18;
      }
    }
    uint64_t v9 = sub_2162D3524((void *)v1[12], (void *)v1[13], &v10);
    if ((void *)v1[13] != v9) {
      v1[13] = v9;
    }
    __n128 result = sub_2162D3524((void *)v1[15], (void *)v1[16], &v10);
    if ((void *)v1[16] == result) {
      goto LABEL_16;
    }
    unint64_t v7 = result;
    unint64_t v8 = v1 + 16;
    goto LABEL_15;
  }
LABEL_18:
  v1[19] = v2;
  return result;
}

void *sub_2162D3524(void *result, void *a2, void *a3)
{
  if (result == a2)
  {
LABEL_4:
    __n128 result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }
  return result;
}

void sub_2162D3580(void *a1, int a2)
{
  sub_2162B415C(a1 + 32, a2, (uint64_t)&v5);
  unint64_t v3 = v5;
  uint64_t v4 = v6;
  if (v5 != v6)
  {
    do
      sub_2162D294C(a1, *v3++);
    while (v3 != v4);
    unint64_t v3 = v5;
  }
  if (v3)
  {
    uint64_t v6 = v3;
    operator delete(v3);
  }
}

void sub_2162D35F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162D3610(uint64_t a1, const void *a2, int a3)
{
  if (a3 == 2)
  {
    if (!*(unsigned char *)(a1 + 250))
    {
      sub_2162D3580((void *)a1, 2);
      *(unsigned char *)(a1 + 25sub_216195244(&a9, 0) = 1;
    }
  }
  else if (a3 == 1)
  {
    if (!*(unsigned char *)(a1 + 249))
    {
      sub_2162D3580((void *)a1, 1);
      *(unsigned char *)(a1 + 249) = 1;
    }
  }
  else if (!a3 && !*(unsigned char *)(a1 + 248))
  {
    sub_2162D3580((void *)a1, 0);
    *(unsigned char *)(a1 + 248) = 1;
  }
}

uint64_t sub_2162D36AC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 256);
  int v2 = sub_2162B3EC4((void *)(a1 + 256), 0);
  int v3 = v2 | sub_2162B3EC4(v1, 1);
  return v3 | sub_2162B3EC4(v1, 2);
}

uint64_t sub_2162D36FC(uint64_t result)
{
  if (!*(void *)(result + 304)) {
    operator new();
  }
  if (!*(unsigned char *)(result + 336) && !*(void *)(result + 312)) {
    operator new();
  }
  return result;
}

void sub_2162D384C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10B1C402BC3C895);
  _Unwind_Resume(a1);
}

uint64_t sub_2162D3874(uint64_t a1, void *a2, void *a3)
{
  if (a3[1] != *a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      char v14 = 0;
      std::string __p = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      sub_216222534(*a2 + v6, *(unsigned __int16 ****)(a1 + 16), *(unsigned char *)(a1 + 336), &__p, &v14);
      if (v14) {
        uint64_t v8 = 304;
      }
      else {
        uint64_t v8 = 312;
      }
      uint64_t v9 = *(void *)(a1 + v8);
      if (v9) {
        sub_21634B260(v9, (uint64_t *)&__p, *(_DWORD *)(*a3 + 4 * v7));
      }
      if (__p)
      {
        uint64_t v12 = __p;
        operator delete(__p);
      }
      ++v7;
      v6 += 24;
    }
    while (v7 < (uint64_t)(a3[1] - *a3) >> 2);
  }
  return 1;
}

void sub_2162D3950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162D3970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 304);
  if (v4) {
    sub_21634B0D0(v4);
  }
  uint64_t v5 = *(void *)(a1 + 312);
  if (v5) {
    sub_21634B0D0(v5);
  }
  sub_216233818(a2);
}

void sub_2162D3A20(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (sub_216222370(a2))
  {
    char v12 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    std::string __p = 0;
    sub_216222534(a2, *(unsigned __int16 ****)(v6 + 16), *(unsigned char *)(v6 + 336), &__p, &v12);
    uint64_t v7 = 304;
    if (!v12) {
      uint64_t v7 = 312;
    }
    uint64_t v8 = *(void *)(v6 + v7);
    if (v8) {
      sub_21634B15C(v8, (uint64_t)&__p, a4);
    }
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
  }
}

void sub_2162D3AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162D3AE0(void *a1)
{
  sub_2162D3320(a1);
  uint64_t v2 = a1[38];
  a1[38] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[39];
  a1[39] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[40];
  a1[40] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = a1[41];
  a1[41] = 0;
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

void *sub_2162D3BDC(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 320);
  if (result)
  {
    if (*(void *)(a1 + 328))
    {
      sub_21634B0D0((uint64_t)result);
      sub_2161E6A34();
      return sub_21634B11C(*(void *)(a1 + 320));
    }
  }
  return result;
}

void sub_2162D3C74(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  uint64_t v4 = *(void *)(a1 + 32);
  char v10 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v5 = sub_2162227B4(theDict, *(unsigned __int16 ****)(v4 + 16), &__p, *(unsigned __int8 *)(v4 + 336), &v10);
  if (v10) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v6 == 1) {
    sub_21634B15C(*(void *)(v4 + 320), (uint64_t)&__p, a2);
  }
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_2162D3CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162D3D18(uint64_t a1, const __CFDictionary *a2)
{
  if (*(void *)(a1 + 320))
  {
    std::string __p = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v7 = 0;
    if (*(void *)(a1 + 328) && LMLanguageModelAddOrUpdateTokenWithAttributes() <= 1)
    {
      int v4 = sub_2162227B4(a2, *(unsigned __int16 ****)(a1 + 16), &__p, *(unsigned __int8 *)(a1 + 336), &v7);
      int v5 = v7 ? v4 : 0;
      if (v5 == 1) {
        sub_21634B15C(*(void *)(a1 + 320), (uint64_t)&__p, 0);
      }
    }
    if (__p)
    {
      uint64_t v9 = __p;
      operator delete(__p);
    }
  }
  return 0;
}

void sub_2162D3DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162D3E00(uint64_t a1, uint64_t a2, int a3)
{
  char v9 = 0;
  std::string __p = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  sub_216222534(a2, *(unsigned __int16 ****)(a1 + 16), *(unsigned char *)(a1 + 336), &__p, &v9);
  if (v9)
  {
    sub_21634B15C(*(void *)(a1 + 304), (uint64_t)&__p, a3);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 312);
    if (v5) {
      sub_21634B15C(v5, (uint64_t)&__p, a3);
    }
  }
  if (__p)
  {
    char v7 = __p;
    operator delete(__p);
  }
}

void sub_2162D3E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162D3EB0(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 304);
  if (v1)
  {
    uint64_t v2 = (unsigned char *)v1[6];
    if (*v2)
    {
      v1[3] = v1[2];
      uint64_t v3 = *(void *)(result + 312);
      if (v3) {
        *(void *)(v3 + 24) = *(void *)(v3 + 16);
      }
      sub_2162D3970(result, (uint64_t)v2);
    }
  }
  return result;
}

void sub_2162D3EE4(int **a1)
{
  uint64_t v1 = sub_2161E2834(**a1);
  uint64_t v2 = (uint64_t *)sub_2162D8C20();
  uint64_t v3 = (char *)sub_2162D8CB8(v2, v1, off_26797C900[0], @"sys.dic");
  uint64_t v4 = v3[23];
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)v3 + 1);
  }
  if (v4) {
    sub_2162D3FB8(v1, v3);
  }
  uint64_t v5 = (char *)sub_2162D8CB8(v2, v1, off_26797C900[0], @"supplement.dic");
  uint64_t v6 = v5[23];
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)v5 + 1);
  }
  if (v6)
  {
    sub_2162D3FB8(v1, v5);
  }
}

void sub_2162D3FB8(int a1, char *a2)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  void v4[2] = sub_2161A0748;
  v4[3] = &unk_264266C08;
  int v5 = a1;
  void v4[4] = a2;
  sub_21619FED8(a2, (uint64_t)v4, 0, &v2);
  if (v3) {
    sub_2161121B0(v3);
  }
}

void *sub_2162D4044(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216112B2C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2162D40A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2162D40C0(const void **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  int v5 = (char *)*a1;
  uint64_t v6 = a2 - (void)*a1;
  uint64_t v7 = (char *)*a1 + (v6 & 0xFFFFFFFFFFFFFFF8);
  if (a5 < 1) {
    return v7;
  }
  char v9 = a3;
  uint64_t v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  char v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if (a5 <= (uint64_t)&v13[-v14] >> 3)
  {
    uint64_t v20 = (uint64_t)(v14 - (void)v7) >> 3;
    if (v20 >= a5)
    {
      unint64_t v21 = &a3[a5];
      unint64_t v22 = *(char **)(v11 - 8);
    }
    else
    {
      unint64_t v21 = &a3[v20];
      unint64_t v22 = *(char **)(v11 - 8);
      if (v21 != a4)
      {
        uint64_t v23 = v21;
        unint64_t v24 = *(void **)(v11 - 8);
        do
        {
          uint64_t v25 = *v23++;
          *v24++ = v25;
          v22 += 8;
        }
        while (v23 != a4);
      }
      a1[1] = v22;
      if ((uint64_t)(v14 - (void)v7) < 1) {
        return v7;
      }
    }
    long long v26 = &v7[8 * a5];
    uint64_t v27 = (uint64_t *)&v22[-8 * a5];
    unint64_t v28 = v22;
    if ((unint64_t)v27 < v14)
    {
      unint64_t v28 = v22;
      do
      {
        uint64_t v29 = *v27++;
        *(void *)unint64_t v28 = v29;
        v28 += 8;
      }
      while ((unint64_t)v27 < v14);
    }
    a1[1] = v28;
    if (v22 != v26) {
      memmove(&v22[-8 * ((v22 - v26) >> 3)], v7, v22 - v26);
    }
    if (v21 != v9)
    {
      uint64_t v30 = v7;
      do
      {
        uint64_t v31 = *v9++;
        *(void *)uint64_t v30 = v31;
        v30 += 8;
      }
      while (v9 != v21);
    }
    return v7;
  }
  unint64_t v15 = a5 + ((uint64_t)(v14 - (void)v5) >> 3);
  if (v15 >> 61) {
    sub_21610CB04();
  }
  uint64_t v16 = v6 >> 3;
  uint64_t v17 = v12 - v5;
  if (v17 >> 2 > v15) {
    unint64_t v15 = v17 >> 2;
  }
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v18 = v15;
  }
  if (v18) {
    uint64_t v19 = (char *)sub_2160FFAA8(v11, v18);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v32 = &v19[8 * v16];
  uint64_t v33 = &v32[8 * a5];
  uint64_t v34 = 8 * a5;
  unint64_t v35 = v32;
  do
  {
    uint64_t v36 = *v9++;
    *(void *)unint64_t v35 = v36;
    v35 += 8;
    v34 -= 8;
  }
  while (v34);
  unint64_t v37 = (char *)*a1;
  uint64_t v38 = v32;
  if (*a1 != v7)
  {
    uint64_t v39 = v7;
    uint64_t v38 = v32;
    do
    {
      uint64_t v40 = *((void *)v39 - 1);
      v39 -= 8;
      *((void *)v38 - 1) = v40;
      v38 -= 8;
    }
    while (v39 != v37);
  }
  unint64_t v41 = &v19[8 * v18];
  unint64_t v42 = a1[1];
  uint64_t v43 = v42 - v7;
  if (v42 != v7) {
    memmove(v33, v7, v42 - v7);
  }
  __n128 v44 = (void *)*a1;
  *a1 = v38;
  a1[1] = &v33[v43];
  a1[2] = v41;
  if (v44) {
    operator delete(v44);
  }
  return v32;
}

void sub_2162D42BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = &unk_26C6C59C0;
  *(_DWORD *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  *(void *)(a5 + 4sub_216195244(&a9, 0) = 0xFFFFFFFFLL;
  *(void *)(a5 + 32) = 32;
  unsigned int v13 = 0;
  size_t v8 = (const UniChar *)(a1 + 2 * a2);
  sub_21628CDA8(*(uint64_t **)(*(void *)(a4 + 72) + 8), (uint64_t)v8, a3, &v13);
  unsigned int v9 = v13;
  if (!v13)
  {
    CFStringRef v10 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], v8, a3);
    if (v10)
    {
      CFStringRef v11 = v10;
      unsigned int v12 = (*(uint64_t (**)(void, CFStringRef))(**(void **)(*(void *)(a4 + 8) + 32) + 16))(*(void *)(*(void *)(a4 + 8) + 32), v10);
      if (v12 <= 0x1F3)
      {
        if (v12 == 3) {
          unsigned int v12 = 501;
        }
        else {
          unsigned int v12 = sub_2161E49DC((uint64_t)v11);
        }
      }
      unsigned int v13 = v12;
      CFRelease(v11);
    }
    unsigned int v9 = v13;
  }
  *(_DWORD *)(a5 + 8) = v9;
}

void sub_2162D43DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_2162D43F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_26C6C59C0;
  *(_DWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v8 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2) + 8);
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_2161868BC(&a9, 0) = a4;
  *(_DWORD *)(a1 + 44) = 0;
  uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2) + 8);
  if (v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      unint64_t v11 = v11
          + *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2) + 2 * v10)
          - 48;
      if (v11 <= 0x20) {
        *(_DWORD *)(a1 + 44) |= 1 << (v11 - 1);
      }
      ++v10;
    }
    while (v9 != v10);
  }
  return a1;
}

uint64_t sub_2162D4550(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, int a7)
{
  *(void *)uint64_t result = &unk_26C6C59C0;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 4sub_2161868BC(&a9, 0) = a7;
  *(_DWORD *)(result + 44) = 0;
  if (a6 >= 1)
  {
    int v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unsigned int v9 = *a5++;
      unint64_t v8 = v8 + v9 - 48;
      if (v8 <= 0x20)
      {
        v7 |= 1 << (v8 - 1);
        *(_DWORD *)(result + 44) = v7;
      }
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t sub_2162D45C0(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  sub_216182F50(&v12, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1);
  *(void *)a1 = &unk_26C6C59C0;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 4sub_2161868BC(&a9, 0) = 0xFFFFFFFFLL;
  int v5 = v12;
  if (v13 != v12)
  {
    int v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = v13 - v12;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    unsigned int v9 = v12;
    do
    {
      unsigned int v10 = *v9++;
      v7 += v10;
      if (v7 <= 0x20)
      {
        v6 |= 1 << (v7 - 1);
        *(_DWORD *)(a1 + 44) = v6;
      }
      --v8;
    }
    while (v8);
    goto LABEL_10;
  }
  if (v13)
  {
LABEL_10:
    unsigned int v13 = v5;
    operator delete(v5);
  }
  return a1;
}

BOOL sub_2162D469C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((v1 & 0x20) != 0) {
    return 0;
  }
  if ((v1 & 0x40) != 0) {
    return *(_DWORD *)(a1 + 8) != 0;
  }
  return *(_DWORD *)(a1 + 40) == 0;
}

CFStringRef sub_2162D46D0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 32) & 0x60) != 0) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 44))
  {
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    v7[2] = sub_2162D4B00;
    v7[3] = &unk_2642671A8;
    std::string::value_type v7[4] = Mutable;
    sub_2162D47DC((unsigned int *)a1, 0, v3, 0, 0, 0, (uint64_t)v7);
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    UniChar chars = v4 + 48;
    return CFStringCreateWithCharacters(0, &chars, 1);
  }
  return Mutable;
}

uint64_t sub_2162D47DC(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  unsigned int v11 = a1[11];
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
LABEL_3:
    uint64_t v14 = v12;
    if (v13 <= 0x20) {
      uint64_t v15 = 32;
    }
    else {
      uint64_t v15 = v13;
    }
    while (v15 != v13)
    {
      char v16 = v13++;
      if ((v11 >> v16))
      {
        uint64_t v12 = v14 + 1;
        if (v13 - 1 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  (*(void (**)(unsigned int *))(*(void *)a1 + 24))(a1);
  uint64_t v18 = v17;
  char v27 = 0;
  if (v14 < 2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void, char *))(a7 + 16))(a7, 0, v17, a1[2], &v27);
  }
  uint64_t v19 = 0;
  while (v19 != 32)
  {
    unsigned int v20 = a1[11] << v19++;
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_17;
    }
  }
  uint64_t v19 = -1;
LABEL_17:
  if (33 - v19 != v17) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void, char *))(a7 + 16))(a7, 0, v17, a1[2], &v27);
  }
  if (a4)
  {
    (*(void (**)(unsigned int *))(*(void *)a1 + 24))(a1);
    sub_2161E208C();
  }
  unint64_t v26 = 0;
  uint64_t v22 = 0;
  do
  {
    unint64_t v23 = sub_2162A81EC(a1[11], &v26, a6);
    if (!v23) {
      break;
    }
    if (a5 && v23 == 1)
    {
      (*(void (**)(unsigned int *))(*(void *)a1 + 24))(a1);
      sub_2161E208C();
    }
    uint64_t v24 = v23 + v22;
    if (a6) {
      uint64_t v22 = v18 - (v23 + v22);
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t, void, char *))(a7 + 16))(a7, v22, v23, 0, &v27);
    if (v26 == -1) {
      break;
    }
    uint64_t v22 = v24;
  }
  while (!v27);
  return 0;
}

void sub_2162D4AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x2166CA7C0](a10, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162D4B00(uint64_t a1, uint64_t a2, __int16 a3)
{
  UniChar chars = a3 + 48;
  CFStringRef v4 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], &chars, 1);
  CFStringAppend(*(CFMutableStringRef *)(a1 + 32), v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_2162D4B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

CFStringRef sub_2162D4B84(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if ((a1[32] & 0x10) == 0) {
    return 0;
  }
  CFStringRef v3 = (const __CFString *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1);
  if (!v3) {
    return v3;
  }
  (*(void (**)(unsigned char *))(*(void *)a1 + 24))(a1);
  if (a3 < v7)
  {
    uint64_t v18 = 0;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 56))(&__p, a1);
    uint64_t v8 = a2 + a3;
    if (a2 + a3 >= (unint64_t)((v17 - (unsigned char *)__p) >> 1)) {
      goto LABEL_20;
    }
    if (v8)
    {
      uint64_t v9 = 0;
      CFIndex v10 = 0;
      CFIndex v11 = 0;
      do
      {
        uint64_t v12 = *((unsigned __int16 *)__p + v9);
        if (v9 >= a2) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = *((unsigned __int16 *)__p + v9);
        }
        v11 += v13;
        if (v9 < a2) {
          uint64_t v12 = 0;
        }
        v10 += v12;
        ++v9;
      }
      while (v8 != v9);
    }
    else
    {
      CFIndex v11 = 0;
      CFIndex v10 = 0;
    }
    if (v10 + v11 <= (unint64_t)CFStringGetLength(v3))
    {
      v20.locatiouint64_t n = v11;
      v20.CFIndex length = v10;
      CFStringRef v3 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], v3, v20);
    }
    else
    {
LABEL_20:
      CFStringRef v3 = 0;
    }
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
    return v3;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];

  return CFStringCreateCopy(v14, v3);
}

void sub_2162D4D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, const void *a12)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2161868BC(&a12, 0);
  _Unwind_Resume(a1);
}

__CFString *sub_2162D4D60(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if ((a1[32] & 0x10) == 0) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&__p);
  uint64_t v7 = v17;
  uint64_t v8 = (unsigned char *)v17 - (unsigned char *)__p;
  if (v17 == __p)
  {
    CFMutableStringRef Mutable = 0;
    if (!v17) {
      return Mutable;
    }
    goto LABEL_16;
  }
  uint64_t v15 = 0;
  (*(void (**)(unsigned char *))(*(void *)a1 + 24))(a1);
  if (a3 >= v9)
  {
    CFMutableStringRef Mutable = sub_2161E5460(&__p);
  }
  else
  {
    unint64_t v10 = v8 >> 1;
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], v10);
    uint64_t v15 = Mutable;
    unint64_t v11 = a2 + a3;
    if (v11 && v11 < v10)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (i >= a2)
        {
          UniChar chars = 0;
          UniChar chars = *((_WORD *)__p + i) + 48;
          CFStringAppendCharacters(Mutable, &chars, 1);
        }
      }
    }
  }
  uint64_t v7 = __p;
  if (__p)
  {
LABEL_16:
    uint64_t v17 = v7;
    operator delete(v7);
  }
  return Mutable;
}

void sub_2162D4EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2162D4EE0()
{
}

double sub_2162D4EF4(uint64_t a1, unsigned __int16 **a2, unsigned __int16 **a3, uint64_t *a4, uint64_t a5, int a6, int a7, char a8)
{
  uint64_t v8 = 32;
  if (a7) {
    uint64_t v8 = 24;
  }
  uint64_t v155 = *(void *)(a1 + v8);
  uint64_t v161 = 0;
  unint64_t v162 = 0;
  unint64_t v163 = 0;
  uint64_t v9 = *a4;
  if (a4[1] == *a4)
  {
    uint64_t v36 = 0;
    uint64_t v33 = 0;
    unint64_t v32 = 0;
    goto LABEL_48;
  }
  unint64_t v10 = 0;
  unint64_t v11 = *a2;
  do
  {
    if (!*(_WORD *)(v9 + 40 * v10 + 34)
      && *(unsigned __int16 *)(v9 + 40 * v10 + 30) == *(unsigned __int16 *)(v9 + 40 * v10 + 32))
    {
      unint64_t v12 = *(unsigned __int16 *)(v9 + 40 * v10 + 24);
      if (!v11 || !*(_WORD *)(v9 + 40 * v10 + 24)) {
        goto LABEL_41;
      }
      int v13 = *v11;
      if ((v13 - 48) >= 0xA && (unsigned __int16)(v13 + 240) >= 0xAu)
      {
        unint64_t v14 = 1;
        BOOL v15 = 1;
        do
        {
          if (sub_2161EC384(v13)) {
            break;
          }
          BOOL v15 = v14 < v12;
          if (v12 == v14) {
            break;
          }
          int v13 = v11[v14++];
        }
        while ((v13 - 48) >= 0xA && (unsigned __int16)(v13 + 240) >= 0xAu);
        uint64_t v9 = *a4;
        if (!v15)
        {
          LODWORD(v12) = *(unsigned __int16 *)(v9 + 40 * v10 + 24);
          goto LABEL_41;
        }
      }
    }
    LODWORD(v12) = *(unsigned __int16 *)(v9 + 40 * v10 + 24);
    if (v12 >= 2)
    {
      uint64_t v17 = 0;
      do
      {
        if (ublock_getCode(v11[v17]) != UBLOCK_HIGH_SURROGATES)
        {
          uint64_t v18 = v162;
          if ((unint64_t)v162 >= v163)
          {
            uint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v162 - (unsigned char *)v161) >> 2);
            unint64_t v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) > 0x1555555555555555) {
              sub_21610CB04();
            }
            if (0x5555555555555556 * ((uint64_t)(v163 - (void)v161) >> 2) > v21) {
              unint64_t v21 = 0x5555555555555556 * ((uint64_t)(v163 - (void)v161) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - (void)v161) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v22 = 0x1555555555555555;
            }
            else {
              unint64_t v22 = v21;
            }
            sub_2162D6E24(&__p, v22, v20, (uint64_t)&v163);
            unint64_t v23 = v166;
            *(_DWORD *)int v166 = v10;
            *((_DWORD *)v23 + 1) = v17;
            *((_DWORD *)v23 + 2) = -1;
            uint64_t v19 = v23 + 12;
            int v166 = v23 + 12;
            uint64_t v25 = (char *)v161;
            uint64_t v24 = v162;
            unint64_t v26 = v165;
            if (v162 == v161)
            {
              uint64_t v29 = v162;
            }
            else
            {
              do
              {
                uint64_t v27 = *(void *)(v24 - 12);
                v24 -= 12;
                int v28 = *((_DWORD *)v24 + 2);
                *(void *)(v26 - 12) = v27;
                v26 -= 12;
                *((_DWORD *)v26 + 2) = v28;
              }
              while (v24 != v25);
              uint64_t v29 = (char *)v161;
              uint64_t v24 = v162;
              uint64_t v19 = v166;
            }
            uint64_t v161 = v26;
            unint64_t v162 = v19;
            unint64_t v30 = v163;
            unint64_t v163 = v167;
            std::string __p = v29;
            int v166 = v24;
            unint64_t v167 = v30;
            int v165 = v29;
            if (v24 != v29) {
              int v166 = &v24[-12 - 12 * ((v24 - v29 - 12) / 0xCuLL)];
            }
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v162 = v10;
            *((_DWORD *)v18 + 1) = v17;
            uint64_t v19 = v18 + 12;
            *((_DWORD *)v18 + 2) = -1;
          }
          unint64_t v162 = v19;
        }
        ++v17;
        uint64_t v9 = *a4;
      }
      while (v17 < *(unsigned __int16 *)(*a4 + 40 * v10 + 24) - 1);
      LODWORD(v12) = *(unsigned __int16 *)(*a4 + 40 * v10 + 24);
    }
LABEL_41:
    v11 += v12;
    ++v10;
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - v9) >> 3);
  }
  while (v31 > v10);
  uint64_t v33 = v162;
  unint64_t v32 = v163;
  if ((unint64_t)v162 < v163)
  {
    *(void *)unint64_t v162 = -1;
    *((_DWORD *)v33 + 2) = -1;
    uint64_t v34 = v33 + 12;
    uint64_t v35 = a5;
    goto LABEL_63;
  }
  uint64_t v36 = v161;
LABEL_48:
  uint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v36) >> 2);
  if ((unint64_t)(v37 + 1) > 0x1555555555555555) {
    sub_21610CB04();
  }
  unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (void)v36) >> 2);
  uint64_t v39 = 2 * v38;
  if (2 * v38 <= v37 + 1) {
    uint64_t v39 = v37 + 1;
  }
  if (v38 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v40 = 0x1555555555555555;
  }
  else {
    unint64_t v40 = v39;
  }
  sub_2162D6E24(&__p, v40, v37, (uint64_t)&v163);
  unint64_t v41 = v166;
  *(void *)int v166 = -1;
  *((_DWORD *)v41 + 2) = -1;
  uint64_t v34 = v41 + 12;
  int v166 = v41 + 12;
  uint64_t v43 = (char *)v161;
  unint64_t v42 = v162;
  __n128 v44 = v165;
  uint64_t v35 = a5;
  if (v162 == v161)
  {
    int v47 = v162;
  }
  else
  {
    do
    {
      uint64_t v45 = *(void *)(v42 - 12);
      v42 -= 12;
      int v46 = *((_DWORD *)v42 + 2);
      *(void *)(v44 - 12) = v45;
      v44 -= 12;
      *((_DWORD *)v44 + 2) = v46;
    }
    while (v42 != v43);
    int v47 = (char *)v161;
    unint64_t v42 = v162;
    uint64_t v34 = v166;
  }
  uint64_t v161 = v44;
  unint64_t v162 = v34;
  unint64_t v48 = v163;
  unint64_t v163 = v167;
  std::string __p = v47;
  int v166 = v42;
  unint64_t v167 = v48;
  int v165 = v47;
  if (v42 != v47) {
    int v166 = &v47[(v42 - v47 - 12) % 0xCuLL];
  }
  if (v47) {
    operator delete(v47);
  }
  unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
LABEL_63:
  unint64_t v162 = v34;
  std::string __p = 0;
  int v165 = 0;
  int v166 = 0;
  sub_216120BA4(&__p, v31 + 1);
  int v49 = v161;
  uint64_t v146 = v34;
  if (v161 == v34)
  {
    double v51 = -1.79769313e308;
  }
  else
  {
    unint64_t v153 = v35 + 1;
    double v50 = 0.0;
    double v51 = -1.79769313e308;
    do
    {
      size_t v52 = *a2;
      uint64_t v53 = *a3;
      unint64_t v54 = (char *)__p;
      int v165 = (char *)__p;
      if (a6)
      {
        if (__p >= v166)
        {
          unint64_t v56 = (v166 - (unsigned char *)__p) >> 1;
          if (v56 <= 1) {
            unint64_t v56 = 1;
          }
          if ((unint64_t)(v166 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          uint64_t v59 = (char *)sub_2161129B4((uint64_t)&v166, v57);
          uint64_t v60 = (char *)__p;
          unint64_t v61 = v165;
          *(_DWORD *)uint64_t v59 = 1;
          uint64_t v55 = v59 + 4;
          int v62 = v59;
          while (v61 != v60)
          {
            int v63 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *((_DWORD *)v62 - 1) = v63;
            v62 -= 4;
          }
          std::string __p = v62;
          int v165 = v59 + 4;
          int v166 = &v59[4 * v58];
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *(_DWORD *)std::string __p = 1;
          uint64_t v55 = v54 + 4;
        }
        int v165 = v55;
      }
      uint64_t v152 = v49;
      uint64_t v64 = *a4;
      uint64_t v65 = a4[1] - *a4;
      if (v65)
      {
        unint64_t v66 = 0;
        unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * (v65 >> 3);
        do
        {
          if (v66 == v35 && v66 < v67 - 1)
          {
            uint64_t v68 = v64 + 40 * v35;
            uint64_t v69 = v64 + 40 * v153;
            __int16 v70 = *(_WORD *)(v69 + 24);
            __int16 v71 = *(_WORD *)(v68 + 28);
            __int16 v72 = *(_WORD *)(v69 + 28);
            uint64_t v73 = (unsigned __int16)(v70 + *(_WORD *)(v68 + 24));
            if (v52) {
              unint64_t v74 = (unsigned __int16)(v70 + *(_WORD *)(v68 + 24));
            }
            else {
              unint64_t v74 = 0;
            }
            int v75 = sub_216365E98(v155, v52, v74, *(_DWORD *)v68);
            int v76 = v75;
            uint64_t v77 = v165;
            if (v165 >= v166)
            {
              uint64_t v94 = (char *)__p;
              uint64_t v95 = (v165 - (unsigned char *)__p) >> 2;
              unint64_t v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 62) {
                sub_21610CB04();
              }
              uint64_t v97 = v166 - (unsigned char *)__p;
              if ((v166 - (unsigned char *)__p) >> 1 > v96) {
                unint64_t v96 = v97 >> 1;
              }
              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v98 = v96;
              }
              if (v98)
              {
                unint64_t v99 = (char *)sub_2161129B4((uint64_t)&v166, v98);
                uint64_t v94 = (char *)__p;
                uint64_t v77 = v165;
              }
              else
              {
                unint64_t v99 = 0;
              }
              unint64_t v112 = (int *)&v99[4 * v95];
              *unint64_t v112 = v76;
              uint64_t v78 = (char *)(v112 + 1);
              while (v77 != v94)
              {
                int v113 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--unint64_t v112 = v113;
              }
              std::string __p = v112;
              int v165 = v78;
              int v166 = &v99[4 * v98];
              if (v94) {
                operator delete(v94);
              }
            }
            else
            {
              *(_DWORD *)int v165 = v75;
              uint64_t v78 = v77 + 4;
            }
            int v165 = v78;
            uint64_t v159 = v52;
            unint64_t v160 = v74;
            uint64_t v114 = (unsigned __int16)(v72 + v71);
            if (v53) {
              uint64_t v115 = (unsigned __int16)(v72 + v71);
            }
            else {
              uint64_t v115 = 0;
            }
            std::string::size_type v157 = v53;
            uint64_t v158 = v115;
            double v50 = v50
                + sub_2162D5AA8(v76, &v159, &v157, *(_DWORD *)(*a4 + 40 * v35), *(unsigned __int16 *)(*a4 + 40 * v35 + 32), **(_DWORD **)(a1 + 16));
            v52 += v73;
            unint64_t v66 = v153;
            v53 += v114;
          }
          else if (v66 == *(_DWORD *)v152)
          {
            __int16 v79 = v152[4];
            uint64_t v80 = (unsigned __int16)(v152[2] + 1);
            if (v52) {
              unint64_t v81 = (unsigned __int16)(v152[2] + 1);
            }
            else {
              unint64_t v81 = 0;
            }
            int v82 = sub_216365E98(v155, v52, v81, *(_DWORD *)(v64 + 40 * v66));
            int v83 = v82;
            uint64_t v84 = v165;
            if (v165 >= v166)
            {
              unint64_t v100 = (char *)__p;
              uint64_t v101 = (v165 - (unsigned char *)__p) >> 2;
              unint64_t v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 62) {
                sub_21610CB04();
              }
              uint64_t v103 = v166 - (unsigned char *)__p;
              if ((v166 - (unsigned char *)__p) >> 1 > v102) {
                unint64_t v102 = v103 >> 1;
              }
              if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v104 = v102;
              }
              if (v104)
              {
                unint64_t v105 = (char *)sub_2161129B4((uint64_t)&v166, v104);
                unint64_t v100 = (char *)__p;
                uint64_t v84 = v165;
              }
              else
              {
                unint64_t v105 = 0;
              }
              uint64_t v116 = (int *)&v105[4 * v101];
              *uint64_t v116 = v83;
              uint64_t v85 = (char *)(v116 + 1);
              while (v84 != v100)
              {
                int v117 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *--uint64_t v116 = v117;
              }
              std::string __p = v116;
              int v165 = v85;
              int v166 = &v105[4 * v104];
              if (v100) {
                operator delete(v100);
              }
            }
            else
            {
              *(_DWORD *)int v165 = v82;
              uint64_t v85 = v84 + 4;
            }
            __int16 v118 = v79 + 1;
            int v165 = v85;
            uint64_t v159 = v52;
            unint64_t v160 = v81;
            uint64_t v119 = (unsigned __int16)(v79 + 1);
            if (v53) {
              uint64_t v120 = v119;
            }
            else {
              uint64_t v120 = 0;
            }
            std::string::size_type v157 = v53;
            uint64_t v158 = v120;
            double v121 = sub_2162D5AA8(v83, &v159, &v157, *(_DWORD *)(*a4 + 40 * v66), *(unsigned __int16 *)(*a4 + 40 * v66 + 32), **(_DWORD **)(a1 + 16));
            uint64_t v122 = &v52[v80];
            uint64_t v123 = *a4 + 40 * v66;
            __int16 v124 = *(_WORD *)(v123 + 28);
            unint64_t v125 = (unsigned __int16)(*(_WORD *)(v123 + 24) - v80);
            if (v52) {
              unint64_t v126 = v125;
            }
            else {
              unint64_t v126 = 0;
            }
            int v127 = sub_216365E98(v155, v122, v126, *(_DWORD *)v123);
            int v128 = v127;
            size_t v129 = v165;
            if (v165 >= v166)
            {
              unint64_t v131 = (char *)__p;
              uint64_t v132 = (v165 - (unsigned char *)__p) >> 2;
              unint64_t v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 62) {
                sub_21610CB04();
              }
              uint64_t v134 = v166 - (unsigned char *)__p;
              if ((v166 - (unsigned char *)__p) >> 1 > v133) {
                unint64_t v133 = v134 >> 1;
              }
              if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v135 = v133;
              }
              if (v135)
              {
                unint64_t v136 = (char *)sub_2161129B4((uint64_t)&v166, v135);
                unint64_t v131 = (char *)__p;
                size_t v129 = v165;
              }
              else
              {
                unint64_t v136 = 0;
              }
              unint64_t v140 = (int *)&v136[4 * v132];
              *unint64_t v140 = v128;
              uint64_t v130 = (char *)(v140 + 1);
              while (v129 != v131)
              {
                int v141 = *((_DWORD *)v129 - 1);
                v129 -= 4;
                *--unint64_t v140 = v141;
              }
              std::string __p = v140;
              int v165 = v130;
              int v166 = &v136[4 * v135];
              if (v131) {
                operator delete(v131);
              }
            }
            else
            {
              *(_DWORD *)int v165 = v127;
              uint64_t v130 = v129 + 4;
            }
            long long v142 = &v53[v119];
            int v165 = v130;
            uint64_t v159 = v122;
            unint64_t v160 = v126;
            if (v53) {
              uint64_t v143 = (unsigned __int16)(v124 - v118);
            }
            else {
              uint64_t v143 = 0;
            }
            std::string::size_type v157 = v142;
            uint64_t v158 = v143;
            double v50 = v50
                + v121
                + sub_2162D5AA8(v128, &v159, &v157, *(_DWORD *)(*a4 + 40 * v66), *(unsigned __int16 *)(*a4 + 40 * v66 + 32), **(_DWORD **)(a1 + 16));
            size_t v52 = &v122[v125];
            uint64_t v53 = &v142[(unsigned __int16)(v124 - v118)];
            uint64_t v35 = a5;
          }
          else
          {
            uint64_t v86 = v64 + 40 * v66;
            uint64_t v87 = *(unsigned __int16 *)(v86 + 24);
            uint64_t v88 = *(unsigned __int16 *)(v86 + 28);
            if (v52) {
              unint64_t v89 = *(unsigned __int16 *)(v86 + 24);
            }
            else {
              unint64_t v89 = 0;
            }
            int v90 = sub_216365E98(v155, v52, v89, *(_DWORD *)v86);
            int v91 = v90;
            uint64_t v92 = v165;
            if (v165 >= v166)
            {
              unint64_t v106 = (char *)__p;
              uint64_t v107 = (v165 - (unsigned char *)__p) >> 2;
              unint64_t v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 62) {
                sub_21610CB04();
              }
              uint64_t v109 = v166 - (unsigned char *)__p;
              if ((v166 - (unsigned char *)__p) >> 1 > v108) {
                unint64_t v108 = v109 >> 1;
              }
              if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v110 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v108;
              }
              if (v110)
              {
                uint64_t v111 = (char *)sub_2161129B4((uint64_t)&v166, v110);
                unint64_t v106 = (char *)__p;
                uint64_t v92 = v165;
              }
              else
              {
                uint64_t v111 = 0;
              }
              char v137 = (int *)&v111[4 * v107];
              *char v137 = v91;
              unint64_t v93 = (char *)(v137 + 1);
              while (v92 != v106)
              {
                int v138 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *--char v137 = v138;
              }
              std::string __p = v137;
              int v165 = v93;
              int v166 = &v111[4 * v110];
              if (v106) {
                operator delete(v106);
              }
            }
            else
            {
              *(_DWORD *)int v165 = v90;
              unint64_t v93 = v92 + 4;
            }
            int v165 = v93;
            uint64_t v159 = v52;
            unint64_t v160 = v89;
            if (v53) {
              uint64_t v139 = v88;
            }
            else {
              uint64_t v139 = 0;
            }
            std::string::size_type v157 = v53;
            uint64_t v158 = v139;
            double v50 = v50
                + sub_2162D5AA8(v91, &v159, &v157, *(_DWORD *)(*a4 + 40 * v66), *(unsigned __int16 *)(*a4 + 40 * v66 + 32), **(_DWORD **)(a1 + 16));
            v52 += v87;
            v53 += v88;
          }
          ++v66;
          uint64_t v64 = *a4;
          unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
        }
        while (v66 < v67);
      }
      double v144 = v50;
      if ((a8 & 1) == 0) {
        double v144 = v50 + sub_2163668E4(v155, __p, (v165 - (unsigned char *)__p) >> 2);
      }
      if (v51 < v144) {
        double v51 = v144;
      }
      int v49 = v152 + 6;
    }
    while (v152 + 6 != (_WORD *)v146);
  }
  if (__p)
  {
    int v165 = (char *)__p;
    operator delete(__p);
  }
  if (v161)
  {
    unint64_t v162 = (char *)v161;
    operator delete(v161);
  }
  return v51;
}

void sub_2162D5A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

double sub_2162D5AA8(int a1, unsigned __int16 **a2, unsigned __int16 **a3, int a4, int a5, int a6)
{
  if (a3[1] != (unsigned __int16 *)1) {
    goto LABEL_15;
  }
  UChar32 v11 = **a3;
  if (v11 == 9787 || (u_charType(v11) - 19) > 0xA) {
    goto LABEL_15;
  }
  if ((a6 & 0x1000000) != 0)
  {
    unint64_t v14 = *a2;
    unint64_t v13 = (unint64_t)a2[1];
    if (*a2 && v13 && *v14 - 48 <= 9)
    {
      uint64_t v15 = 1;
      while (v13 != v15)
      {
        unsigned int v16 = v14[v15++] - 48;
        if (v16 >= 0xA)
        {
          if (v15 - 1 >= v13) {
            goto LABEL_15;
          }
          goto LABEL_13;
        }
      }
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v13 = (unint64_t)a2[1];
  }
LABEL_13:
  if (v13 != 1
    || (UChar32 v17 = **a3, v17 != **a2)
    && ((IntPropertyCFStringRef Value = u_getIntPropertyValue(v17, UCHAR_EAST_ASIAN_WIDTH), IntPropertyValue != 3)
      ? (BOOL v50 = IntPropertyValue == 5)
      : (BOOL v50 = 1),
        v50
     || (int32_t v51 = u_getIntPropertyValue(**a2, UCHAR_EAST_ASIAN_WIDTH),
         v51 != 5 ? (BOOL v52 = v51 == 3) : (BOOL v52 = 1),
         !v52 || (int v53 = **a3, v53 != sub_2161EC078(**a2)))))
  {
    if ((a6 & 0x4000000) != 0) {
      return -100.0;
    }
    else {
      return -10.0;
    }
  }
LABEL_15:
  if (a1)
  {
    if (a1 == 3 && a2[1] == (unsigned __int16 *)3)
    {
      uint64_t v18 = *a2;
      if ((*a2)[1] == 12289)
      {
        int v19 = *v18;
        BOOL v20 = (v19 - 48) >= 0xA && (unsigned __int16)(v19 + 240) >= 0xAu;
        if (!v20 || sub_2161EC274(v19))
        {
          int v21 = v18[2];
          double v22 = -2.0;
          BOOL v23 = (v21 - 48) >= 0xA && (unsigned __int16)(v21 + 240) >= 0xAu;
          if (!v23 || sub_2161EC274(v21)) {
            return v22;
          }
        }
      }
    }
    return 0.0;
  }
  if ((a4 - 3) < 4) {
    return 0.0;
  }
  unint64_t v26 = *a2;
  unint64_t v25 = (unint64_t)a2[1];
  if (v25)
  {
    BOOL v27 = 0;
    for (unint64_t i = 0; i != v25; v27 = i >= v25)
    {
      unsigned __int16 v29 = v26[i];
      BOOL v20 = (unsigned __int16)((v29 & 0xFFDF) - 65) >= 0x1Au;
      unsigned int v30 = (unsigned __int16)(v29 + 191);
      unsigned __int16 v31 = v29 + 223;
      if (v20 && v30 >= 0x1A && v31 > 0x19u) {
        break;
      }
      ++i;
    }
    if (!v27) {
      goto LABEL_59;
    }
  }
  uint64_t v34 = a3[1];
  if (!v34) {
    goto LABEL_59;
  }
  BOOL v35 = 0;
  for (j = 0; j != v34; BOOL v35 = j >= v34)
  {
    unsigned __int16 v37 = (*a3)[(void)j];
    BOOL v20 = (unsigned __int16)((v37 & 0xFFDF) - 65) >= 0x1Au;
    unsigned int v38 = (unsigned __int16)(v37 + 191);
    unsigned __int16 v39 = v37 + 223;
    if (v20 && v38 >= 0x1A && v39 > 0x19u) {
      break;
    }
    uint64_t j = (unsigned __int16 *)((char *)j + 1);
  }
  double v22 = -1.0;
  if (v35)
  {
LABEL_59:
    if (v25 > 2 || !v26 || !v25) {
      return 0.0;
    }
    BOOL v42 = 0;
    for (k = 0; k != v25; BOOL v42 = k >= v25)
    {
      UBlockCode Code = ublock_getCode(v26[k]);
      if ((Code - 58) > 0x25 || ((1 << (Code - 58)) & 0x3000203003) == 0) {
        break;
      }
      if (sub_2161EC384(v26[k])) {
        break;
      }
      ++k;
    }
    double v22 = 0.0;
    if (v42)
    {
      sub_2161C04AC(0);
      int v46 = (uint64_t *)(&off_264269960 + 2 * word_216372A0A[7 * a5 + 1]);
      if (v46[1] == 4)
      {
        uint64_t v47 = 0;
        uint64_t v48 = *v46;
        double v22 = -2.5;
        while (asc_2163C938E[v47] == *(_WORD *)(v48 + v47 * 2))
        {
          if (++v47 == 4) {
            return v22;
          }
        }
      }
      return -1.0;
    }
  }
  return v22;
}

void sub_2162D5E30(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (!a3 || !(*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3)) {
    return;
  }
  uint64_t v10 = 32;
  if (a4) {
    uint64_t v10 = 24;
  }
  uint64_t v11 = *(void *)(a1 + v10);
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 96))(a3);
  int v28 = 0;
  unsigned __int16 v29 = 0;
  uint64_t v30 = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  std::string __p = 0;
  BOOL v23 = 0;
  uint64_t v24 = 0;
  sub_2162EF6F4(a2, a3, &v28, &v25, &__p, *(void *)(v11 + 32) - 1);
  if (v12 == 76 || v12 == 74)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 408))(a3) && (a5 & 1) == 0)
    {
      sub_2162D4EF4(a1, (unsigned __int16 **)&v28, (unsigned __int16 **)&v25, (uint64_t *)&__p, -1, 0, a4, 1);
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 16);
    if (v12 != 70 || v13 == v14) {
      uint64_t v16 = -1;
    }
    else {
      uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v14) >> 3) - 1;
    }
    sub_2162D4EF4(a1, (unsigned __int16 **)&v28, (unsigned __int16 **)&v25, (uint64_t *)&__p, v16, 0, a4, 0);
    if (v13 == v14) {
      sub_2162D4EF4(a1, (unsigned __int16 **)&v28, (unsigned __int16 **)&v25, (uint64_t *)&__p, v16, 1, a4, 0);
    }
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 408))(a3);
    (*(void (**)(uint64_t, void **, void **, void **, uint64_t))(*(void *)v17 + 24))(v17, &v28, &v25, &__p, v18);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3) >= *(void *)(v11 + 32)
                                                                                              - 1)
      unint64_t v19 = *(void *)(v11 + 32) - 1;
    else {
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    }
    sub_2162096FC((uint64_t)&__p, v19);
    if (v13 != v14) {
      sub_2162D4EF4(a1, (unsigned __int16 **)&v28, (unsigned __int16 **)&v25, (uint64_t *)&__p, -1, 0, a4, 0);
    }
    goto LABEL_26;
  }
  if (v12 != 71) {
    goto LABEL_13;
  }
  (*(double (**)(uint64_t))(*(void *)a3 + 392))(a3);
LABEL_26:
  uint64_t v20 = *(void *)a3;
  if (a5) {
    int v21 = (void (**)(uint64_t))(v20 + 384);
  }
  else {
    int v21 = (void (**)(uint64_t))(v20 + 112);
  }
  (*v21)(a3);
  sub_2161A2A80();
  if (__p)
  {
    BOOL v23 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (v28)
  {
    unsigned __int16 v29 = v28;
    operator delete(v28);
  }
}

void sub_2162D62A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162D62F4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  if (!a1[3] || !a1[4]) {
    return;
  }
  uint64_t v6 = a1[1];
  if (*(_WORD *)(v6 + 304))
  {
    uint64_t v7 = (double *)sub_216178CAC(*(unsigned __int16 *)(v6 + 304));
    uint64_t v9 = &v7[3 * v8];
    uint64_t v10 = v7;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v11 = a2[6];
  if (a2[7] == v11) {
    goto LABEL_118;
  }
  unint64_t v12 = 0;
  unint64_t v13 = (unint64_t)v10;
  do
  {
    uint64_t v14 = *(void *)(v11 + 8 * v12);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 408))(v14) == 1) {
      break;
    }
    sub_2162D5E30((uint64_t)a1, a3, v14, 1, 0);
    uint64_t v16 = v15;
    sub_2162D5E30((uint64_t)a1, a3, v14, 0, 1);
    uint64_t v18 = v17;
    if (v13 >= (unint64_t)v9)
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v10) >> 3) + 1;
      if (v19 > 0xAAAAAAAAAAAAAAALL) {
        sub_21610CB04();
      }
      if (0x5555555555555556 * (v9 - v10) > v19) {
        unint64_t v19 = 0x5555555555555556 * (v9 - v10);
      }
      if (0xAAAAAAAAAAAAAAABLL * (v9 - v10) >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)sub_216178CAC(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v22 = v20 + 8 * ((uint64_t)(v13 - (void)v10) >> 3);
      *(_DWORD *)unint64_t v22 = v12;
      *(void *)(v22 + 8) = v16;
      *(void *)(v22 + 16) = v18;
      if ((double *)v13 == v10)
      {
        unint64_t v25 = (double *)(v20 + 8 * ((uint64_t)(v13 - (void)v10) >> 3));
      }
      else
      {
        unint64_t v23 = v20 + 8 * ((uint64_t)(v13 - (void)v10) >> 3);
        do
        {
          long long v24 = *(_OWORD *)(v13 - 24);
          unint64_t v25 = (double *)(v23 - 24);
          *(void *)(v23 - 8) = *(void *)(v13 - 8);
          *(_OWORD *)(v23 - 24) = v24;
          v13 -= 24;
          v23 -= 24;
        }
        while ((double *)v13 != v10);
      }
      uint64_t v9 = (double *)(v20 + 24 * v21);
      unint64_t v13 = v22 + 24;
      if (v10) {
        operator delete(v10);
      }
      uint64_t v10 = v25;
    }
    else
    {
      *(_DWORD *)unint64_t v13 = v12;
      *(void *)(v13 + 8) = v16;
      *(void *)(v13 + 16) = v17;
      v13 += 24;
    }
    ++v12;
    uint64_t v11 = a2[6];
  }
  while (v12 < (a2[7] - v11) >> 3);
  if (v10 == (double *)v13) {
    goto LABEL_118;
  }
  *(void *)long long buf = sub_2162D6DD0;
  unint64_t v88 = (uint64_t)(v13 - (void)v10) / 24;
  sub_2162D6EA0((unint64_t)v10, v13, (uint64_t (**)(long long *, long long *))buf, 126 - 2 * __clz(v88), 1);
  unint64_t v26 = sub_2162D1CE4(0xCu);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v27 = sub_2162D1CE4(0xCu);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_2160F5000, v27, OS_LOG_TYPE_DEBUG, "## Sorted ##", buf, 2u);
    }
    unint64_t v28 = 0;
    do
    {
      uint64_t v29 = *(void *)(a2[6] + 8 * SLODWORD(v10[3 * v28]));
      uint64_t v30 = sub_2162D1CE4(0xCu);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
        int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 112))(v29);
        uint64_t v33 = &v10[3 * v28];
        uint64_t v35 = *((void *)v33 + 1);
        uint64_t v34 = *((void *)v33 + 2);
        ++v28;
        *(_DWORD *)long long buf = 134219010;
        *(void *)&uint8_t buf[4] = v28;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v31;
        *(_WORD *)&unsigned char buf[22] = 1024;
        int v90 = v32;
        __int16 v91 = 2048;
        uint64_t v92 = v35;
        __int16 v93 = 2048;
        uint64_t v94 = v34;
        _os_log_debug_impl(&dword_2160F5000, v30, OS_LOG_TYPE_DEBUG, "index: %lu, surface: %@, cost: %d, dynamic-score: %lf, static-score: %lf", buf, 0x30u);
      }
      else
      {
        ++v28;
      }
    }
    while (v28 < v88);
  }
  uint64_t v36 = (int *)v10;
  while (1)
  {
    unsigned __int16 v37 = *(const void **)(a2[6] + 8 * *v36);
    if (v37)
    {
      int v38 = (*(uint64_t (**)(const void *))(*(void *)v37 + 96))(v37);
      if (v38 != 76 && v38 != 74) {
        break;
      }
      int v39 = (*(uint64_t (**)(const void *))(*(void *)v37 + 384))(v37);
      if (v39 != (*(unsigned int (**)(const void *))(*(void *)v37 + 112))(v37)
        && (*(unsigned int (**)(const void *))(*(void *)v37 + 408))(v37) != 2)
      {
        break;
      }
    }
    v36 += 6;
    if (v36 == (int *)v13) {
      goto LABEL_48;
    }
  }
  if ((*(unsigned int (**)(const void *))(*(void *)v37 + 408))(v37) == 1)
  {
LABEL_48:
    unint64_t v40 = 0;
    goto LABEL_49;
  }
  unint64_t v40 = __dynamic_cast(v37, (const struct __class_type_info *)&unk_26C6B9B98, (const struct __class_type_info *)&unk_26C6BA018, 0);
LABEL_49:
  sub_2162D5E30((uint64_t)a1, a3, (uint64_t)v40, 0, 1);
  uint64_t v41 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  int v84 = (int)v42 + 15000;
  int v85 = (int)v42;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  if (v88 <= 1) {
    uint64_t v43 = 1;
  }
  else {
    uint64_t v43 = (uint64_t)(v13 - (void)v10) / 24;
  }
  *(void *)&uint8_t buf[16] = 0;
  do
  {
    __n128 v44 = &v10[3 * v41];
    uint64_t v45 = *(int *)v44;
    uint64_t v46 = *(void *)(a2[6] + 8 * v45);
    if (v46)
    {
      double v47 = v44[2];
      int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 96))(v46);
      if ((v48 - 66) <= 0x11 && ((1 << (v48 - 66)) & 0x24521) != 0) {
        goto LABEL_93;
      }
      int v50 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 408))(v46);
      sub_2161C04AC(0);
      uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 48))(v46);
      unint64_t v52 = sub_2161EE01C((uint64_t)&qword_26797EF20, v46);
      CFStringRef v53 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v46 + 232))(v46);
      unint64_t Length = CFStringGetLength(v53);
      int v55 = (int)v47;
      if (v50 == 2)
      {
        if (v48 == 70) {
          goto LABEL_93;
        }
        if (v84 >= v55 && (unint64_t)++v86 <= 5) {
          goto LABEL_93;
        }
      }
      else
      {
        if (v50) {
          BOOL v56 = 1;
        }
        else {
          BOOL v56 = v51 == 1;
        }
        if (v56) {
          goto LABEL_93;
        }
        BOOL v57 = Length >= 5 && v52 >= 2;
        int v58 = v57 ? 13000 : 20000;
        if (v58 + v85 >= v55 && (unint64_t)++v87 < 7) {
          goto LABEL_93;
        }
      }
    }
    uint64_t v59 = *(char **)&buf[8];
    if (*(void *)&buf[8] >= *(void *)&buf[16])
    {
      unint64_t v61 = *(char **)buf;
      uint64_t v62 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 61) {
        sub_21610CB04();
      }
      uint64_t v64 = *(void *)&buf[16] - *(void *)buf;
      if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2 > v63) {
        unint64_t v63 = v64 >> 2;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        unint64_t v66 = (char *)sub_2160FFAA8((uint64_t)&buf[16], v65);
        unint64_t v61 = *(char **)buf;
        uint64_t v59 = *(char **)&buf[8];
      }
      else
      {
        unint64_t v66 = 0;
      }
      unint64_t v67 = &v66[8 * v62];
      *(void *)unint64_t v67 = v45;
      uint64_t v60 = v67 + 8;
      while (v59 != v61)
      {
        uint64_t v68 = *((void *)v59 - 1);
        v59 -= 8;
        *((void *)v67 - 1) = v68;
        v67 -= 8;
      }
      *(void *)long long buf = v67;
      *(void *)&uint8_t buf[8] = v60;
      *(void *)&uint8_t buf[16] = &v66[8 * v65];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      **(void **)&uint8_t buf[8] = v45;
      uint64_t v60 = v59 + 8;
    }
    *(void *)&uint8_t buf[8] = v60;
LABEL_93:
    ++v41;
  }
  while (v41 != v43);
  uint64_t v69 = *(void **)buf;
  if (v88 == (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3)
  {
    if (*(void *)buf == *(void *)&buf[8])
    {
      uint64_t v70 = *(void *)buf;
    }
    else
    {
      uint64_t v70 = *(void *)buf;
      while (*v69 != *(_DWORD *)v10)
      {
        ++v69;
        v70 += 8;
        if (v69 == *(void **)&buf[8])
        {
          uint64_t v70 = *(void *)&buf[8];
          break;
        }
      }
    }
    uint64_t v71 = *(void *)&buf[8] - (v70 + 8);
    if (*(void *)&buf[8] != v70 + 8) {
      memmove((void *)v70, (const void *)(v70 + 8), *(void *)&buf[8] - (v70 + 8));
    }
    *(void *)&uint8_t buf[8] = v70 + v71;
  }
  __int16 v72 = v10 + 1;
  do
  {
    uint64_t v73 = *(void *)(a2[6] + 8 * *((int *)v72 - 2));
    double v74 = *v72;
    int v75 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 112))(v73);
    int v76 = (double *)sub_2161A2A80();
    (*(void (**)(uint64_t, double))(*(void *)v73 + 400))(v73, -((double)(int)v74 - v76[1] * (double)v75) / (double)*((int *)v76 + 1));
    v72 += 3;
    --v43;
  }
  while (v43);
  uint64_t v77 = sub_2162D1CE4(0xBu);
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v78 = *(void **)buf;
    for (unint64_t i = *(void **)&buf[8]; v78 != i; ++v78)
    {
      uint64_t v80 = *(void *)(a2[6] + 8 * *v78);
      unint64_t v81 = sub_2162D1CE4(0xBu);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 24))(v80);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v80 + 96))(v80)) {
          int v83 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 96))(v80);
        }
        else {
          int v83 = 48;
        }
        *(_DWORD *)uint64_t v95 = 138412546;
        uint64_t v96 = v82;
        __int16 v97 = 1024;
        int v98 = v83;
        _os_log_debug_impl(&dword_2160F5000, v81, OS_LOG_TYPE_DEBUG, "Pruning %@ (kind:%c) (after reranking)", v95, 0x12u);
      }
    }
  }
  sub_21621671C(a2, (unint64_t **)buf);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
LABEL_118:
  if (v10) {
    operator delete(v10);
  }
}

void sub_2162D6D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162D6DD0(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)(a2 + 8);
  BOOL v4 = v2 < v3;
  if (v2 == v3)
  {
    double v5 = *(double *)(a1 + 16);
    double v6 = *(double *)(a2 + 16);
    BOOL v4 = v5 < v6;
    if (v5 == v6) {
      return *(_DWORD *)a1 > *(_DWORD *)a2;
    }
  }
  return v4;
}

void sub_2162D6E10()
{
}

void *sub_2162D6E24(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x1555555555555556) {
      sub_2160FFA74();
    }
    uint64_t v7 = (char *)operator new(12 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[12 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[12 * a2];
  return a1;
}

void sub_2162D6EA0(unint64_t a1, unint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v100 = a2 - 24;
    __int16 v97 = (long long *)(a2 - 72);
    int v98 = (long long *)(a2 - 48);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          uint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 3);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                if ((*a3)((long long *)v100, (long long *)a1))
                {
                  long long v45 = *(_OWORD *)a1;
                  uint64_t v105 = *(void *)(a1 + 16);
                  long long v104 = v45;
                  long long v46 = *(_OWORD *)v100;
                  *(void *)(a1 + 16) = *(void *)(v100 + 16);
                  *(_OWORD *)a1 = v46;
                  long long v47 = v104;
                  *(void *)(v100 + 16) = v105;
                  *(_OWORD *)uint64_t v100 = v47;
                }
                break;
              case 3:
                sub_2162D782C((long long *)a1, (long long *)(a1 + 24), (long long *)v100, a3);
                break;
              case 4:
                sub_2162D7B78(a1, a1 + 24, a1 + 48, v100, a3);
                break;
              case 5:
                sub_2162D7C64((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, v100, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            int v48 = (long long *)(a1 + 24);
            BOOL v50 = a1 == a2 || v48 == (long long *)a2;
            if (a5)
            {
              if (!v50)
              {
                uint64_t v51 = 0;
                unint64_t v52 = a1;
                do
                {
                  CFStringRef v53 = (long long *)v52;
                  unint64_t v52 = (unint64_t)v48;
                  if ((*a3)(v48, v53))
                  {
                    long long v54 = *(_OWORD *)v52;
                    uint64_t v105 = *(void *)(v52 + 16);
                    long long v104 = v54;
                    uint64_t v55 = v51;
                    while (1)
                    {
                      uint64_t v56 = a1 + v55;
                      *(_OWORD *)(v56 + 24) = *(_OWORD *)(a1 + v55);
                      *(void *)(v56 + 4sub_2161868BC(&a9, 0) = *(void *)(a1 + v55 + 16);
                      if (!v55) {
                        break;
                      }
                      v55 -= 24;
                      if (((*a3)(&v104, (long long *)(v55 + a1)) & 1) == 0)
                      {
                        uint64_t v57 = a1 + v55 + 24;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v57 = a1;
LABEL_80:
                    long long v58 = v104;
                    *(void *)(v57 + 16) = v105;
                    *(_OWORD *)uint64_t v57 = v58;
                  }
                  int v48 = (long long *)(v52 + 24);
                  v51 += 24;
                }
                while (v52 + 24 != a2);
              }
            }
            else if (!v50)
            {
              unint64_t v91 = a1 - 24;
              do
              {
                uint64_t v92 = (long long *)a1;
                a1 = (unint64_t)v48;
                if ((*a3)(v48, v92))
                {
                  long long v93 = *(_OWORD *)a1;
                  uint64_t v105 = *(void *)(a1 + 16);
                  long long v104 = v93;
                  unint64_t v94 = v91;
                  do
                  {
                    *(_OWORD *)(v94 + 48) = *(_OWORD *)(v94 + 24);
                    *(void *)(v94 + 64) = *(void *)(v94 + 40);
                    char v95 = (*a3)(&v104, (long long *)v94);
                    v94 -= 24;
                  }
                  while ((v95 & 1) != 0);
                  long long v96 = v104;
                  *(void *)(v94 + 64) = v105;
                  *(_OWORD *)(v94 + 48) = v96;
                }
                int v48 = (long long *)(a1 + 24);
                v91 += 24;
              }
              while (a1 + 24 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              int64_t v59 = (unint64_t)(v14 - 2) >> 1;
              unint64_t v99 = a2;
              int64_t v101 = v59;
              do
              {
                int64_t v60 = v59;
                if (v101 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  unint64_t v62 = a1 + 24 * v61;
                  if (2 * v59 + 2 < v14 && (*a3)((long long *)(a1 + 24 * v61), (long long *)(v62 + 24)))
                  {
                    v62 += 24;
                    uint64_t v61 = 2 * v60 + 2;
                  }
                  unint64_t v63 = a1 + 24 * v60;
                  if (((*a3)((long long *)v62, (long long *)v63) & 1) == 0)
                  {
                    long long v64 = *(_OWORD *)v63;
                    uint64_t v105 = *(void *)(v63 + 16);
                    long long v104 = v64;
                    do
                    {
                      unint64_t v65 = v62;
                      long long v66 = *(_OWORD *)v62;
                      *(void *)(v63 + 16) = *(void *)(v62 + 16);
                      *(_OWORD *)unint64_t v63 = v66;
                      if (v101 < v61) {
                        break;
                      }
                      uint64_t v67 = (2 * v61) | 1;
                      unint64_t v62 = a1 + 24 * v67;
                      uint64_t v68 = 2 * v61 + 2;
                      if (v68 < v14 && (*a3)((long long *)(a1 + 24 * v67), (long long *)(v62 + 24)))
                      {
                        v62 += 24;
                        uint64_t v67 = v68;
                      }
                      unint64_t v63 = v65;
                      uint64_t v61 = v67;
                    }
                    while (!(*a3)((long long *)v62, &v104));
                    long long v69 = v104;
                    *(void *)(v65 + 16) = v105;
                    *(_OWORD *)unint64_t v65 = v69;
                    a2 = v99;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              int64_t v70 = v13 / 0x18uLL;
              do
              {
                uint64_t v71 = 0;
                long long v72 = *(_OWORD *)a1;
                uint64_t v103 = *(void *)(a1 + 16);
                long long v102 = v72;
                unint64_t v73 = a1;
                do
                {
                  uint64_t v74 = v73 + 24 * v71 + 24;
                  uint64_t v75 = (2 * v71) | 1;
                  uint64_t v76 = 2 * v71 + 2;
                  if (v76 < v70
                    && (*a3)((long long *)(v73 + 24 * v71 + 24), (long long *)(v73 + 24 * v71 + 48)))
                  {
                    v74 += 24;
                    uint64_t v75 = v76;
                  }
                  long long v77 = *(_OWORD *)v74;
                  *(void *)(v73 + 16) = *(void *)(v74 + 16);
                  *(_OWORD *)unint64_t v73 = v77;
                  unint64_t v73 = v74;
                  uint64_t v71 = v75;
                }
                while (v75 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
                uint64_t v78 = (long long *)(a2 - 24);
                if (v74 == a2 - 24)
                {
                  unint64_t v81 = a2 - 24;
                  long long v89 = v102;
                  *(void *)(v74 + 16) = v103;
                  *(_OWORD *)uint64_t v74 = v89;
                }
                else
                {
                  long long v79 = *v78;
                  *(void *)(v74 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)uint64_t v74 = v79;
                  long long v80 = v102;
                  *(void *)(a2 - 8) = v103;
                  unint64_t v81 = a2 - 24;
                  *uint64_t v78 = v80;
                  uint64_t v82 = v74 - a1 + 24;
                  if (v82 >= 25)
                  {
                    unint64_t v83 = (v82 / 0x18uLL - 2) >> 1;
                    unint64_t v84 = a1 + 24 * v83;
                    if ((*a3)((long long *)v84, (long long *)v74))
                    {
                      long long v85 = *(_OWORD *)v74;
                      uint64_t v105 = *(void *)(v74 + 16);
                      long long v104 = v85;
                      do
                      {
                        uint64_t v86 = v84;
                        long long v87 = *(_OWORD *)v84;
                        *(void *)(v74 + 16) = *(void *)(v84 + 16);
                        *(_OWORD *)uint64_t v74 = v87;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        unint64_t v84 = a1 + 24 * v83;
                        uint64_t v74 = v86;
                      }
                      while (((*a3)((long long *)v84, &v104) & 1) != 0);
                      long long v88 = v104;
                      *(void *)(v86 + 16) = v105;
                      *(_OWORD *)uint64_t v86 = v88;
                    }
                  }
                }
                BOOL v90 = v70-- <= 2;
                a2 = v81;
              }
              while (!v90);
            }
            return;
          }
          unint64_t v15 = a2;
          unint64_t v16 = (unint64_t)v14 >> 1;
          unint64_t v17 = a1 + 24 * ((unint64_t)v14 >> 1);
          if ((unint64_t)v13 < 0xC01)
          {
            sub_2162D782C((long long *)v17, (long long *)a1, (long long *)v100, a3);
          }
          else
          {
            sub_2162D782C((long long *)a1, (long long *)v17, (long long *)v100, a3);
            uint64_t v18 = 3 * v16;
            sub_2162D782C((long long *)(a1 + 24), (long long *)(a1 + 8 * v18 - 24), v98, a3);
            sub_2162D782C((long long *)(a1 + 48), (long long *)(a1 + 24 + 8 * v18), v97, a3);
            sub_2162D782C((long long *)(a1 + 8 * v18 - 24), (long long *)v17, (long long *)(a1 + 24 + 8 * v18), a3);
            long long v19 = *(_OWORD *)a1;
            uint64_t v105 = *(void *)(a1 + 16);
            long long v104 = v19;
            uint64_t v20 = *(void *)(v17 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v17;
            *(void *)(a1 + 16) = v20;
            long long v21 = v104;
            *(void *)(v17 + 16) = v105;
            *(_OWORD *)unint64_t v17 = v21;
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)((long long *)(a1 - 24), (long long *)a1)) {
            break;
          }
          long long v35 = *(_OWORD *)a1;
          uint64_t v103 = *(void *)(a1 + 16);
          long long v102 = v35;
          if ((*a3)(&v102, (long long *)v100))
          {
            unint64_t v12 = a1;
            a2 = v15;
            do
              v12 += 24;
            while (((*a3)(&v102, (long long *)v12) & 1) == 0);
          }
          else
          {
            uint64_t v36 = (long long *)(a1 + 24);
            a2 = v15;
            do
            {
              unint64_t v12 = (unint64_t)v36;
              if ((unint64_t)v36 >= v15) {
                break;
              }
              int v37 = (*a3)(&v102, v36);
              uint64_t v36 = (long long *)(v12 + 24);
            }
            while (!v37);
          }
          unint64_t v38 = a2;
          if (v12 < a2)
          {
            unint64_t v38 = a2;
            do
              v38 -= 24;
            while (((*a3)(&v102, (long long *)v38) & 1) != 0);
          }
          while (v12 < v38)
          {
            long long v39 = *(_OWORD *)v12;
            uint64_t v105 = *(void *)(v12 + 16);
            long long v104 = v39;
            long long v40 = *(_OWORD *)v38;
            *(void *)(v12 + 16) = *(void *)(v38 + 16);
            *(_OWORD *)unint64_t v12 = v40;
            long long v41 = v104;
            *(void *)(v38 + 16) = v105;
            *(_OWORD *)unint64_t v38 = v41;
            do
              v12 += 24;
            while (!(*a3)(&v102, (long long *)v12));
            do
              v38 -= 24;
            while (((*a3)(&v102, (long long *)v38) & 1) != 0);
          }
          double v42 = (long long *)(v12 - 24);
          BOOL v5 = v12 - 24 >= a1;
          BOOL v6 = v12 - 24 == a1;
          if (v12 - 24 != a1)
          {
            long long v43 = *v42;
            *(void *)(a1 + 16) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v43;
          }
          a5 = 0;
          long long v44 = v102;
          *(void *)(v12 - 8) = v103;
          *double v42 = v44;
        }
        uint64_t v22 = 0;
        long long v23 = *(_OWORD *)a1;
        uint64_t v103 = *(void *)(a1 + 16);
        long long v102 = v23;
        do
          v22 += 24;
        while (((*a3)((long long *)(v22 + a1), &v102) & 1) != 0);
        unint64_t v24 = a1 + v22;
        unint64_t v25 = (long long *)v15;
        BOOL v6 = v22 == 24;
        a2 = v15;
        if (v6)
        {
          unint64_t v25 = (long long *)v15;
          do
          {
            if (v24 >= (unint64_t)v25) {
              break;
            }
            unint64_t v25 = (long long *)((char *)v25 - 24);
          }
          while (((*a3)(v25, &v102) & 1) == 0);
        }
        else
        {
          do
            unint64_t v25 = (long long *)((char *)v25 - 24);
          while (!(*a3)(v25, &v102));
        }
        if (v24 >= (unint64_t)v25)
        {
          uint64_t v31 = v24 - 24;
        }
        else
        {
          unint64_t v26 = v24;
          uint64_t v27 = v25;
          do
          {
            long long v28 = *(_OWORD *)v26;
            uint64_t v105 = *(void *)(v26 + 16);
            long long v104 = v28;
            long long v29 = *v27;
            *(void *)(v26 + 16) = *((void *)v27 + 2);
            *(_OWORD *)unint64_t v26 = v29;
            long long v30 = v104;
            *((void *)v27 + 2) = v105;
            *uint64_t v27 = v30;
            do
              v26 += 24;
            while (((*a3)((long long *)v26, &v102) & 1) != 0);
            do
              uint64_t v27 = (long long *)((char *)v27 - 24);
            while (!(*a3)(v27, &v102));
          }
          while (v26 < (unint64_t)v27);
          uint64_t v31 = v26 - 24;
        }
        if (v31 != a1)
        {
          long long v32 = *(_OWORD *)v31;
          *(void *)(a1 + 16) = *(void *)(v31 + 16);
          *(_OWORD *)a1 = v32;
        }
        long long v33 = v102;
        *(void *)(v31 + 16) = v103;
        *(_OWORD *)uint64_t v31 = v33;
        if (v24 >= (unint64_t)v25) {
          break;
        }
LABEL_32:
        sub_2162D6EA0(a1, v31, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v31 + 24;
      }
      BOOL v34 = sub_2162D7968(a1, v31, a3);
      unint64_t v12 = v31 + 24;
      if (sub_2162D7968(v31 + 24, v15, a3)) {
        break;
      }
      if (!v34) {
        goto LABEL_32;
      }
    }
    a2 = v31;
    if (!v34) {
      continue;
    }
    break;
  }
}

uint64_t sub_2162D782C(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = *((void *)a1 + 2);
      long long v11 = *a1;
      uint64_t v12 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v12;
    }
    else
    {
      uint64_t v19 = *((void *)a1 + 2);
      long long v20 = *a1;
      uint64_t v21 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v21;
      *a2 = v20;
      *((void *)a2 + 2) = v19;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = *((void *)a2 + 2);
      long long v11 = *a2;
      uint64_t v22 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v22;
    }
    *a3 = v11;
    *((void *)a3 + 2) = v10;
  }
  else if (result)
  {
    uint64_t v13 = *((void *)a2 + 2);
    long long v14 = *a2;
    uint64_t v15 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v15;
    *a3 = v14;
    *((void *)a3 + 2) = v13;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      uint64_t v16 = *((void *)a1 + 2);
      long long v17 = *a1;
      uint64_t v18 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v18;
      *a2 = v17;
      *((void *)a2 + 2) = v16;
    }
  }
  return result;
}

BOOL sub_2162D7968(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        long long *v8 = v10;
        *(void *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      sub_2162D782C((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_2162D7B78(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_2162D7C64((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v12 = (long long *)(a1 + 48);
      sub_2162D782C((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v19, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + 16) = v20;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_2162D7B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  sub_2162D782C((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v14 = *(void *)(a2 + 16);
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(void *)(a3 + 16) = v14;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 sub_2162D7C64(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_2162D7B78((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(void *)(a5 + 16) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v17 = *(void *)(a3 + 16);
      long long v18 = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v17;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v20 = *(void *)(a2 + 16);
        __n128 v21 = *(__n128 *)a2;
        uint64_t v22 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(void *)(a3 + 16) = v20;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          unint64_t v23 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v24 = *(void *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2162D7D88(UChar *a1, UChar *s, unint64_t a3)
{
  unint64_t v3 = a3 >> 1;
  if (a3 >> 1 == 1) {
    goto LABEL_7;
  }
  BOOL v4 = s;
  while (1)
  {
    UChar v5 = *v4;
    if (!*v4) {
      break;
    }
    ++v4;
    *a1++ = v5;
    if (--v3 == 1) {
      goto LABEL_7;
    }
  }
  if (v3) {
LABEL_7:
  }
    *a1 = 0;
  return 2 * u_strlen(s);
}

uint64_t sub_2162D7DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  if (a3 >= 0) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = a3 + 1;
  }
  uint64_t v6 = v5 >> 1;
  uint64_t v7 = v6;
  while (v7)
  {
    int v8 = *(unsigned __int16 *)(a2 + v4);
    *(_WORD *)(a1 + v4) = v8;
    v4 += 2;
    --v7;
    if (!v8)
    {
      if (v7) {
        bzero((void *)(a1 + v4), 2 * v6 - v4);
      }
      return a1;
    }
  }
  return a1;
}

uint64_t sub_2162D7E48(uint64_t a1, UChar *s, unint64_t a3)
{
  uint64_t v4 = s;
  int32_t v6 = u_strlen(s);
  int32_t v7 = u_strlen((const UChar *)a1);
  unint64_t v8 = a3 >> 1;
  if (*(_WORD *)a1)
  {
    do
    {
      int v9 = *(unsigned __int16 *)(a1 + 2);
      a1 += 2;
      --v8;
    }
    while (v9);
  }
  while (1)
  {
    if (v8 == 1) {
      goto LABEL_7;
    }
    UChar v10 = *v4;
    if (!*v4) {
      break;
    }
    ++v4;
    *(_WORD *)a1 = v10;
    a1 += 2;
    --v8;
  }
  if (v8) {
LABEL_7:
  }
    *(_WORD *)a1 = 0;
  return 2 * v7 + (uint64_t)(2 * v6);
}

void sub_2162D7EE0(uint64_t a1, const __CFURL *a2, int a3, uint64_t a4, const __CFString *a5)
{
  if (a2 && a5 && *(_DWORD *)(a1 + 40) == a3) {
    sub_2162D7F08(a2, a5, *(void *)(a1 + 32));
  }
}

void sub_2162D7F08(const __CFURL *a1, const __CFString *a2, uint64_t a3)
{
  CFStringRef v7 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  CFStringRef v55 = v7;
  if (v7)
  {
    CFStringRef v8 = v7;
    CFStringRef PathComponent = CFURLCopyLastPathComponent(a1);
    CFStringRef v54 = PathComponent;
    if (!PathComponent)
    {
LABEL_97:
      CFRelease(v8);
      return;
    }
    sub_2161E3AE8(a2, &v51);
    UChar v10 = std::string::append(&v51, "-", 1uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__wordUChar s[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__wordUChar s[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    sub_2161E3AE8(PathComponent, __p);
    if ((v50 & 0x80u) == 0) {
      __n128 v12 = __p;
    }
    else {
      __n128 v12 = (void **)__p[0];
    }
    if ((v50 & 0x80u) == 0) {
      std::string::size_type v13 = v50;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    uint64_t v14 = std::string::append(&v56, (const std::string::value_type *)v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v53 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v52 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__wordUChar s[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((char)v50 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    sub_2161E3AE8(v8, &v51);
    uint64_t v16 = (void *)(a3 + 24);
    unint64_t v17 = sub_216129260(a3 + 24, (uint64_t)v52);
    unint64_t v18 = v17;
    unint64_t v19 = *(void *)(a3 + 8);
    if (v19)
    {
      uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      unint64_t v21 = v20.u32[0];
      if (v20.u32[0] > 1uLL)
      {
        unint64_t v3 = v17;
        if (v17 >= v19) {
          unint64_t v3 = v17 % v19;
        }
      }
      else
      {
        unint64_t v3 = (v19 - 1) & v17;
      }
      uint64_t v22 = *(std::string::size_type **)(*(void *)a3 + 8 * v3);
      if (v22)
      {
        std::string::size_type v23 = *v22;
        if (*v22)
        {
          while (1)
          {
            unint64_t v24 = *(void *)(v23 + 8);
            if (v24 == v18)
            {
              if (sub_21612970C(a3 + 32, (unsigned __int8 *)(v23 + 16), (unsigned __int8 *)v52)) {
                goto LABEL_92;
              }
            }
            else
            {
              if (v21 > 1)
              {
                if (v24 >= v19) {
                  v24 %= v19;
                }
              }
              else
              {
                v24 &= v19 - 1;
              }
              if (v24 != v3)
              {
LABEL_32:
                uint64_t v16 = (void *)(a3 + 24);
                break;
              }
            }
            std::string::size_type v23 = *(void *)v23;
            if (!v23) {
              goto LABEL_32;
            }
          }
        }
      }
    }
    unint64_t v25 = operator new(0x40uLL);
    unint64_t v26 = (void *)(a3 + 16);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    v56.__r_.__value_.__l.__size_ = a3 + 16;
    v56.__r_.__value_.__s.__data_[16] = 0;
    *unint64_t v25 = 0;
    v25[1] = v18;
    uint64_t v27 = v25 + 2;
    if (SHIBYTE(v53) < 0)
    {
      sub_21610A674(v27, v52[0], (unint64_t)v52[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v52;
      v25[4] = v53;
    }
    void v25[5] = 0;
    void v25[6] = 0;
    v25[7] = 0;
    v56.__r_.__value_.__s.__data_[16] = 1;
    float v28 = (float)(unint64_t)(*(void *)(a3 + 24) + 1);
    float v29 = *(float *)(a3 + 32);
    if (v19 && (float)(v29 * (float)v19) >= v28)
    {
LABEL_82:
      long long v45 = *(std::string::size_type **)(*(void *)a3 + 8 * v3);
      std::string::size_type v23 = v56.__r_.__value_.__r.__words[0];
      if (v45)
      {
        *(void *)v56.__r_.__value_.__l.__data_ = *v45;
      }
      else
      {
        *(void *)v56.__r_.__value_.__l.__data_ = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v23;
        *(void *)(*(void *)a3 + 8 * v3) = v26;
        if (!*(void *)v23) {
          goto LABEL_91;
        }
        unint64_t v46 = *(void *)(*(void *)v23 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v46 >= v19) {
            v46 %= v19;
          }
        }
        else
        {
          v46 &= v19 - 1;
        }
        long long v45 = (std::string::size_type *)(*(void *)a3 + 8 * v46);
      }
      *long long v45 = v23;
LABEL_91:
      v56.__r_.__value_.__r.__words[0] = 0;
      ++*v16;
      sub_2162D9D9C((uint64_t)&v56);
LABEL_92:
      long long v47 = (void **)(v23 + 40);
      if (*(char *)(v23 + 63) < 0) {
        operator delete(*v47);
      }
      *(_OWORD *)long long v47 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
      *(void *)(v23 + 56) = *((void *)&v51.__r_.__value_.__l + 2);
      if (SHIBYTE(v53) < 0) {
        operator delete(v52[0]);
      }
      CFRelease(PathComponent);
      goto LABEL_97;
    }
    BOOL v30 = 1;
    if (v19 >= 3) {
      BOOL v30 = (v19 & (v19 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v19);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      int8x8_t prime = (int8x8_t)v32;
    }
    else {
      int8x8_t prime = (int8x8_t)v31;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v19 = *(void *)(a3 + 8);
    if (*(void *)&prime > v19) {
      goto LABEL_48;
    }
    if (*(void *)&prime < v19)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a3 + 24) / *(float *)(a3 + 32));
      if (v19 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (*(void *)&prime <= v40) {
        int8x8_t prime = (int8x8_t)v40;
      }
      if (*(void *)&prime >= v19)
      {
        unint64_t v19 = *(void *)(a3 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_48:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          BOOL v34 = operator new(8 * *(void *)&prime);
          long long v35 = *(void **)a3;
          *(void *)a3 = v34;
          if (v35) {
            operator delete(v35);
          }
          uint64_t v36 = 0;
          *(int8x8_t *)(a3 + 8) = prime;
          do
            *(void *)(*(void *)a3 + 8 * v36++) = 0;
          while (*(void *)&prime != v36);
          int v37 = (void *)*v26;
          if (*v26)
          {
            unint64_t v38 = v37[1];
            uint8x8_t v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(void *)&prime) {
                v38 %= *(void *)&prime;
              }
            }
            else
            {
              v38 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a3 + 8 * v38) = v26;
            long long v43 = (void *)*v37;
            if (*v37)
            {
              do
              {
                unint64_t v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(void *)&prime) {
                    v44 %= *(void *)&prime;
                  }
                }
                else
                {
                  v44 &= *(void *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(void *)(*(void *)a3 + 8 * v44))
                  {
                    *(void *)(*(void *)a3 + 8 * v44) = v37;
                    goto LABEL_73;
                  }
                  void *v37 = *v43;
                  *long long v43 = **(void **)(*(void *)a3 + 8 * v44);
                  **(void **)(*(void *)a3 + 8 * v44) = v43;
                  long long v43 = v37;
                }
                unint64_t v44 = v38;
LABEL_73:
                int v37 = v43;
                long long v43 = (void *)*v43;
                unint64_t v38 = v44;
              }
              while (v43);
            }
          }
          unint64_t v19 = (unint64_t)prime;
          goto LABEL_77;
        }
        int v48 = *(void **)a3;
        *(void *)a3 = 0;
        if (v48) {
          operator delete(v48);
        }
        unint64_t v19 = 0;
        *(void *)(a3 + 8) = 0;
      }
    }
LABEL_77:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19) {
        unint64_t v3 = v18 % v19;
      }
      else {
        unint64_t v3 = v18;
      }
    }
    else
    {
      unint64_t v3 = (v19 - 1) & v18;
    }
    goto LABEL_82;
  }
}

void sub_2162D8488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,const void *a30,const void *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_2161868BC(&a30, 0);
  sub_2161868BC(&a31, 0);
  _Unwind_Resume(a1);
}

void sub_2162D853C()
{
}

void *sub_2162D8544(uint64_t a1, const __CFString *a2, const __CFString *a3, int a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E460, memory_order_acquire) & 1) == 0)
  {
    CFStringRef v17 = a2;
    int v18 = __cxa_guard_acquire(&qword_26797E460);
    a2 = v17;
    if (v18)
    {
      __cxa_atexit(MEMORY[0x263F8C0B8], &unk_26797E478, &dword_2160F5000);
      __cxa_guard_release(&qword_26797E460);
      a2 = v17;
    }
  }
  sub_2161E3AE8(a2, &v21);
  CFStringRef v7 = std::string::append(&v21, "-", 1uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__wordUChar s[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__wordUChar s[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  sub_2161E3AE8(a3, __p);
  if ((v20 & 0x80u) == 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v10 = v20;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  long long v11 = std::string::append(&v24, (const std::string::value_type *)v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v23 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v22 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__wordUChar s[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (a4 == 1)
  {
    if (*(_DWORD *)(a1 + 8) == 5)
    {
      std::string::size_type v13 = (void *)(a1 + 56);
      goto LABEL_20;
    }
  }
  else if (!a4)
  {
    std::string::size_type v13 = (void *)(a1 + 16);
    goto LABEL_20;
  }
  sub_2162D9FB4(a1 + 56);
  v24.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  v24.__r_.__value_.__l.__size_ = 0x40000000;
  v24.__r_.__value_.__r.__wordUChar s[2] = (std::string::size_type)sub_2162D7EE0;
  unint64_t v25 = &unk_2642671C8;
  int v27 = a4;
  uint64_t v26 = a1 + 56;
  LDEnumerateAssetDataItems();
  std::string::size_type v13 = (void *)(a1 + 56);
LABEL_20:
  uint64_t v14 = sub_21618241C(v13, (unsigned __int8 *)v22);
  if (v14) {
    long long v15 = v14 + 40;
  }
  else {
    long long v15 = &unk_26797E478;
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  return v15;
}

void sub_2162D8758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFURLRef sub_2162D87B8(uint64_t a1, int a2)
{
  unint64_t v3 = sub_2162D8544(a1, (const __CFString *)qword_26797C8F8, off_26797C870[0], a2);
  int v4 = *((char *)v3 + 23);
  if (v4 >= 0) {
    CFIndex v5 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    CFIndex v5 = v3[1];
  }
  if (!v5) {
    return 0;
  }
  int32_t v6 = v4 >= 0 ? (const UInt8 *)v3 : (const UInt8 *)*v3;
  CFURLRef v7 = CFURLCreateFromFileSystemRepresentation(0, v6, v5, 0);
  if (!v7) {
    return 0;
  }
  CFURLRef v8 = v7;
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, v7);
  if (PathComponent)
  {
    CFURLRef v2 = CFURLCreateCopyDeletingLastPathComponent(0, PathComponent);
    CFRelease(PathComponent);
  }
  CFRelease(v8);
  if (!PathComponent) {
    return 0;
  }
  return v2;
}

void sub_2162D8874(_Unwind_Exception *a1)
{
  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void *sub_2162D88A4(uint64_t a1, const __CFURL *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  sub_2162D9FB4(a1 + 56);
  v5[0] = &unk_26C6C7D00;
  v5[1] = a1;
  uint64_t v5[3] = v5;
  sub_2162D8950(a2, (uint64_t)v5);
  return sub_2162DA10C(v5);
}

void sub_2162D893C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162DA10C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2162D8950(const __CFURL *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  CFArrayRef v4 = sub_2162D9DF4(a1);
  CFArrayRef v22 = v4;
  if (!v4) {
    return;
  }
  CFArrayRef v5 = v4;
  CFURLRef v6 = CFURLCreateCopyAppendingPathComponent(0, a1, (CFStringRef)qword_26797C908, 1u);
  CFIndex v7 = 0;
  CFURLRef v21 = v6;
  unsigned __int8 v20 = 0;
LABEL_3:
  if (v7 < CFArrayGetCount(v5))
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v7);
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"ContentPath");
    std::string::size_type v10 = CFDictionaryGetValue(ValueAtIndex, @"ContentType");
    if (!Value) {
      goto LABEL_15;
    }
    long long v11 = v10;
    if (!v10) {
      goto LABEL_15;
    }
    CFURLRef v12 = CFURLCreateCopyAppendingPathComponent(0, v6, Value, 0);
    std::string v24 = v12;
    if (!CFURLGetFileSystemRepresentation(v12, 1u, buffer, 1024) || stat((const char *)buffer, &v23))
    {
      if (v12) {
        CFRelease(v12);
      }
      CFURLRef v13 = 0;
      goto LABEL_11;
    }
    uint64_t v16 = 0;
    int v17 = 0;
    Boolean v18 = (v23.st_mode & 0xF000) == 0x4000;
    while (1)
    {
      int v19 = buffer[v16];
      if (v19 != 47) {
        break;
      }
      if (buffer[++v16] != 47) {
        goto LABEL_21;
      }
LABEL_22:
      if (v16 == 1024)
      {
LABEL_23:
        CFURLRef v13 = CFURLCreateFromFileSystemRepresentation(0, buffer, v17, v18);
        if (v12) {
          CFRelease(v12);
        }
LABEL_11:
        uint64_t v14 = *(void *)(a2 + 24);
        *(void *)&v23.st_dev = v11;
        std::string v24 = &v20;
        *(void *)buffer = v13;
        if (!v14) {
          sub_21610B7AC();
        }
        (*(void (**)(uint64_t, UInt8 *, stat *, unsigned char **))(*(void *)v14 + 48))(v14, buffer, &v23, &v24);
        int v15 = v20;
        if (v13) {
          CFRelease(v13);
        }
        if (v15) {
          goto LABEL_25;
        }
LABEL_15:
        ++v7;
        goto LABEL_3;
      }
    }
    if (!buffer[v16]) {
      goto LABEL_23;
    }
    ++v16;
LABEL_21:
    buffer[v17++] = v19;
    goto LABEL_22;
  }
LABEL_25:
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(v5);
}

void sub_2162D8B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162D8C20()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F400, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F400))
  {
    operator new();
  }
  return qword_26797F3F8;
}

void sub_2162D8CA0(_Unwind_Exception *a1)
{
}

void *sub_2162D8CB8(uint64_t *a1, unint64_t a2, const __CFString *a3, const __CFString *a4)
{
  CFStringRef v4 = a4;
  CFStringRef v5 = a3;
  CFURLRef v6 = a1;
  if (a2 != 5)
  {
    int v9 = 0;
LABEL_8:
    return sub_2162D8D64(a1, a2, a3, a4, v9);
  }
  __n128 result = sub_2162D8D64(a1, a2, a3, a4, 0);
  uint64_t v8 = *((unsigned __int8 *)result + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = result[1];
  }
  if (!v8)
  {
    a1 = v6;
    a2 = 5;
    a3 = v5;
    a4 = v4;
    int v9 = 1;
    goto LABEL_8;
  }
  return result;
}

void *sub_2162D8D64(uint64_t *a1, unint64_t a2, const __CFString *a3, const __CFString *a4, int a5)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E468, memory_order_acquire) & 1) == 0)
  {
    std::string::size_type v10 = a1;
    unint64_t v11 = a2;
    int v12 = __cxa_guard_acquire(&qword_26797E468);
    a2 = v11;
    int v13 = v12;
    a1 = v10;
    if (v13)
    {
      __cxa_atexit(MEMORY[0x263F8C0B8], &unk_26797E490, &dword_2160F5000);
      __cxa_guard_release(&qword_26797E468);
      a1 = v10;
      a2 = v11;
    }
  }
  uint64_t v8 = &unk_26797E490;
  if (a3)
  {
    if (a4)
    {
      sub_2162D8E68(a1, a2, &v14);
      uint64_t v8 = sub_2162D8544(v14, a3, a4, a5);
      if (v15) {
        sub_2161121B0(v15);
      }
    }
  }
  return v8;
}

void sub_2162D8E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162D8E68(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = a2;
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = (int)a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = (int)a2;
      if (v7 <= (int)a2) {
        unint64_t v9 = (int)a2 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & (int)a2;
    }
    std::string::size_type v10 = *(void **)(*a1 + 8 * v9);
    if (v10)
    {
      for (unint64_t i = (void *)*v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == (int)a2)
        {
          if (i[2] == (int)a2)
          {
            uint64_t v44 = i[3];
            uint64_t v43 = i[4];
            if (v43) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
            }
            *a3 = v44;
            a3[1] = v43;
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7) {
              v12 %= v7;
            }
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  int v13 = (char *)operator new(0x78uLL);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)int v13 = &unk_26C6C9540;
  CFLocaleRef v14 = sub_2161E29D0(v3);
  int v15 = v13 + 24;
  *((_OWORD *)v13 + 5) = 0u;
  *((void *)v13 + 3) = v14;
  *((_DWORD *)v13 + 8) = v3;
  *(_OWORD *)(v13 + 4sub_2161868BC(&a9, 0) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *((_DWORD *)v13 + 18) = 1065353216;
  *((_OWORD *)v13 + 6) = 0u;
  *((_DWORD *)v13 + 28) = 1065353216;
  if (v3 != 5 || (LDEnumerateAssetDataItems(), !*((void *)v13 + 8))) {
    LDEnumerateAssetDataItems();
  }
  *a3 = v15;
  a3[1] = v13;
  unint64_t v16 = a1[1];
  if (v16)
  {
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v16 <= v6) {
        unint64_t v3 = v6 % v16;
      }
    }
    else
    {
      unint64_t v3 = (v16 - 1) & v6;
    }
    Boolean v18 = *(void ***)(*a1 + 8 * v3);
    if (v18)
    {
      for (uint64_t j = *v18; j; uint64_t j = (void *)*j)
      {
        unint64_t v20 = j[1];
        if (v20 == v6)
        {
          if (j[2] == v6) {
            goto LABEL_93;
          }
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v20 >= v16) {
              v20 %= v16;
            }
          }
          else
          {
            v20 &= v16 - 1;
          }
          if (v20 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t j = operator new(0x28uLL);
  CFURLRef v21 = a1 + 2;
  *uint64_t j = 0;
  j[1] = v6;
  j[3] = 0;
  j[4] = 0;
  j[2] = v6;
  float v22 = (float)(unint64_t)(a1[3] + 1);
  float v23 = *((float *)a1 + 8);
  if (!v16 || (float)(v23 * (float)v16) < v22)
  {
    BOOL v24 = 1;
    if (v16 >= 3) {
      BOOL v24 = (v16 & (v16 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v16);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v16 = a1[1];
    }
    if (*(void *)&prime > v16) {
      goto LABEL_49;
    }
    if (*(void *)&prime < v16)
    {
      unint64_t v34 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v16 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (*(void *)&prime <= v34) {
        int8x8_t prime = (int8x8_t)v34;
      }
      if (*(void *)&prime >= v16)
      {
        unint64_t v16 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_49:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          float v28 = operator new(8 * *(void *)&prime);
          float v29 = (void *)*a1;
          *a1 = (uint64_t)v28;
          if (v29) {
            operator delete(v29);
          }
          uint64_t v30 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v30++) = 0;
          while (*(void *)&prime != v30);
          unint64_t v31 = (void *)*v21;
          if (*v21)
          {
            unint64_t v32 = v31[1];
            uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(void *)&prime) {
                v32 %= *(void *)&prime;
              }
            }
            else
            {
              v32 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v32) = v21;
            int v37 = (void *)*v31;
            if (*v31)
            {
              do
              {
                unint64_t v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(void *)&prime) {
                    v38 %= *(void *)&prime;
                  }
                }
                else
                {
                  v38 &= *(void *)&prime - 1;
                }
                if (v38 != v32)
                {
                  if (!*(void *)(*a1 + 8 * v38))
                  {
                    *(void *)(*a1 + 8 * v38) = v31;
                    goto LABEL_74;
                  }
                  *unint64_t v31 = *v37;
                  void *v37 = **(void **)(*a1 + 8 * v38);
                  **(void **)(*a1 + 8 * v38) = v37;
                  int v37 = v31;
                }
                unint64_t v38 = v32;
LABEL_74:
                unint64_t v31 = v37;
                int v37 = (void *)*v37;
                unint64_t v32 = v38;
              }
              while (v37);
            }
          }
          unint64_t v16 = (unint64_t)prime;
          goto LABEL_78;
        }
        long long v45 = (void *)*a1;
        *a1 = 0;
        if (v45) {
          operator delete(v45);
        }
        unint64_t v16 = 0;
        a1[1] = 0;
      }
    }
LABEL_78:
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v16 <= v6) {
        unint64_t v3 = v6 % v16;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v16 - 1) & v6;
    }
  }
  uint64_t v39 = *a1;
  unint64_t v40 = *(void **)(*a1 + 8 * v3);
  if (v40)
  {
    *uint64_t j = *v40;
  }
  else
  {
    *uint64_t j = *v21;
    void *v21 = j;
    *(void *)(v39 + 8 * v3) = v21;
    if (!*j) {
      goto LABEL_92;
    }
    unint64_t v41 = *(void *)(*j + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v41 >= v16) {
        v41 %= v16;
      }
    }
    else
    {
      v41 &= v16 - 1;
    }
    unint64_t v40 = (void *)(*a1 + 8 * v41);
  }
  *unint64_t v40 = j;
LABEL_92:
  ++a1[3];
LABEL_93:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  uint64_t v42 = (std::__shared_weak_count *)j[4];
  j[3] = v15;
  j[4] = v13;
  if (v42) {
    sub_2161121B0(v42);
  }
}

void sub_2162D94AC(_Unwind_Exception *a1)
{
  sub_2162DA254(1, v2);
  sub_2161121B0(v1);
  _Unwind_Resume(a1);
}

CFURLRef sub_2162D9500(uint64_t *a1, unint64_t a2, int a3)
{
  sub_2162D8E68(a1, a2, &v6);
  CFURLRef v4 = sub_2162D87B8(v6, a3);
  if (v7) {
    sub_2161121B0(v7);
  }
  return v4;
}

void sub_2162D9550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162D9568(uint64_t *a1, unint64_t a2, const __CFURL *a3)
{
  sub_2162D8E68(a1, a2, &v5);
  sub_2162D88A4(v5, a3);
  CFURLRef v4 = v6;
  if (v6)
  {
    sub_2161121B0(v4);
  }
}

void sub_2162D95CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162D95E4(const __CFURL *a1)
{
  CFDictionaryRef v1 = sub_2162D9680(a1);
  CFDictionaryRef v7 = v1;
  if (!v1) {
    return 0;
  }
  CFDictionaryRef v2 = v1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v1, (const void *)qword_26797C918);
  if (Value)
  {
    int valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    BOOL v4 = valuePtr != 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  CFRelease(v2);
  return v4;
}

void sub_2162D9660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216182BB8((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_2162D9680(CFURLRef bundleURL)
{
  CFDictionaryRef v1 = CFBundleCreate(0, bundleURL);
  if (!v1) {
    return 0;
  }
  CFDictionaryRef v2 = v1;
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(v1);
  if (InfoDictionary
    && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(InfoDictionary, (const void *)qword_26797C910)) != 0)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, Value);
  }
  else
  {
    CFDictionaryRef Copy = 0;
  }
  CFRelease(v2);
  return Copy;
}

void sub_2162D9704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162D9E88((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFArrayRef sub_2162D9720(const __CFArray *a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFIndex idx = 0;
  values[0] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  while (idx < CFArrayGetCount(a1))
  {
    CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a1, idx);
    CFArrayRef v2 = sub_2162D9DF4(ValueAtIndex);
    if (!v2) {
      goto LABEL_25;
    }
    CFURLRef v3 = CFURLCreateCopyAppendingPathComponent(0, ValueAtIndex, (CFStringRef)qword_26797C908, 1u);
    for (CFIndex i = 0; i < CFArrayGetCount(v2); ++i)
    {
      CFDictionaryRef v5 = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, i);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v5, @"ContentType");
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E470, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797E470))
      {
        qword_26797E4A8 = qword_26797C8F8;
        unk_26797E4B0 = @"RNNLanguageModel";
        qword_26797E4B8 = (uint64_t)off_26797C900[0];
        unk_26797E4C0 = @"LexiconDelta";
        qword_26797E4C8 = @"CharacterConversionTrie";
        __cxa_guard_release(&qword_26797E470);
      }
      uint64_t v7 = 0;
      do
      {
        CFComparisonResult v8 = CFStringCompare(Value, (CFStringRef)qword_26797E460[v7 + 9], 0);
        if (v8 == kCFCompareEqualTo) {
          break;
        }
      }
      while (v7++ != 4);
      std::string::size_type v10 = sub_2162D1CE4(9u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "getPathsForLMAndLexiconAssets";
        __int16 v21 = 2112;
        CFStringRef v22 = Value;
        __int16 v23 = 1024;
        BOOL v24 = v8 == kCFCompareEqualTo;
        _os_log_debug_impl(&dword_2160F5000, v10, OS_LOG_TYPE_DEBUG, "[%s] contentType:%@ isSupportedAssetType:0x%x", buf, 0x1Cu);
        if (v8) {
          continue;
        }
      }
      else if (v8)
      {
        continue;
      }
      CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(v5, @"ContentPath");
      CFURLRef v12 = CFURLCreateCopyAppendingPathComponent(0, v3, v11, 0);
      *(void *)long long buf = v12;
      CFStringRef v13 = CFURLCopyFileSystemPath(v12, kCFURLPOSIXPathStyle);
      values[1] = (void *)v13;
      CFArrayAppendValue((CFMutableArrayRef)values[0], v13);
      if (v13) {
        CFRelease(v13);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
    if (v3) {
      CFRelease(v3);
    }
    CFRelease(v2);
LABEL_25:
    ++idx;
  }
  *(void *)long long buf = CFDictionaryCreate(allocator, (const void **)&kMecabraAssetDataFilePathsKey, (const void **)values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFArrayRef v14 = CFArrayCreate(allocator, (const void **)buf, 1, MEMORY[0x263EFFF70]);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (values[0]) {
    CFRelease(values[0]);
  }
  return v14;
}

void sub_2162D9A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2160F7444(exception_object);
}

CFStringRef sub_2162D9B10(CFStringRef theString)
{
  CFStringRef v1 = theString;
  if (theString)
  {
    CFRange v2 = CFStringFind(theString, (CFStringRef)qword_26797C908, 0);
    if (v2.length)
    {
      v5.CFIndex length = v2.length + v2.location + 1;
      v5.locatiouint64_t n = 0;
      CFStringRef v3 = CFStringCreateWithSubstring(0, v1, v5);
      CFStringRef v1 = (const __CFString *)CFURLCreateWithFileSystemPath(0, v3, kCFURLPOSIXPathStyle, 1u);
      if (v3) {
        CFRelease(v3);
      }
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_2162D9BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFStringRef sub_2162D9BC0(CFLocaleIdentifier localeIdentifier)
{
  CFLocaleRef v1 = CFLocaleCreate(0, localeIdentifier);
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3002000000;
  CFComparisonResult v8 = sub_2162D9EC0;
  unint64_t v9 = sub_2162D9ED0;
  CFTypeRef cf = 0;
  LDEnumerateAssetDataItems();
  CFStringRef v2 = (const __CFString *)v6[5];
  v6[5] = 0;
  _Block_object_dispose(&v5, 8);
  if (cf) {
    CFRelease(cf);
  }
  CFStringRef v3 = sub_2162D9B10(v2);
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  return v3;
}

void sub_2162D9CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFStringRef v3 = va_arg(va1, const void *);
  sub_2161868BC((const void **)va, 0);
  sub_2161BE090((const void **)va1, 0);
  _Unwind_Resume(a1);
}

CFStringRef sub_2162D9D28(char *cStr)
{
  CFStringRef v1 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFStringRef v2 = sub_2162D9BC0(v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void sub_2162D9D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2162D9D9C(uint64_t a1)
{
  CFStringRef v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21619E14C((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

CFArrayRef sub_2162D9DF4(const __CFURL *a1)
{
  CFDictionaryRef v1 = sub_2162D9680(a1);
  if (!v1) {
    return 0;
  }
  CFDictionaryRef v2 = v1;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v1, @"Contents");
  if (Value) {
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], Value);
  }
  else {
    CFArrayRef Copy = 0;
  }
  CFRelease(v2);
  return Copy;
}

void sub_2162D9E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216182BB8((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2162D9E88(const void **a1, const void *a2)
{
  BOOL v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t sub_2162D9EC0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_2161868BC(&a9, 0) = 0;
  *(void *)(result + 4sub_2161868BC(&a9, 0) = v2;
  return result;
}

void sub_2162D9ED0(uint64_t a1)
{
}

void sub_2162D9EDC(uint64_t a1, CFURLRef anURL, int a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  if (!a3)
  {
    uint64_t v7 = (const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFStringRef v8 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    sub_2161868BC(v7, v8);
    *a6 = 1;
  }
}

uint64_t sub_2162D9F34(uint64_t a1)
{
  sub_2162D9F70(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2162D9F70(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      CFStringRef v3 = (void *)*v2;
      sub_21619E14C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2162D9FB4(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2162D9F70(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_2162DA010()
{
}

void *sub_2162DA024(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7D00;
  result[1] = v3;
  return result;
}

uint64_t sub_2162DA06C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7D00;
  a2[1] = v2;
  return result;
}

void sub_2162DA098(uint64_t a1, const __CFURL **a2, const __CFString **a3)
{
  CFURLRef v4 = *a2;
  CFStringRef v5 = *a3;
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    sub_2162D7F08(v4, v5, *(void *)(a1 + 8) + 56);
  }
}

uint64_t sub_2162DA0C0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC860)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162DA100()
{
  return &unk_26C6BC860;
}

void *sub_2162DA10C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2162DA190(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2162DA1B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9540;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162DA204(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  sub_2162D9F34(a1 + 80);

  return sub_2162D9F34(a1 + 40);
}

void sub_2162DA254(char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      sub_2161121B0(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_2162DA2B0(uint64_t a1, const __CFURL *a2, uint64_t *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 16) = 0;
  CFStringRef v5 = (uint64_t *)(a1 + 16);
  *(void *)a1 = &unk_26C6BF350;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2161868BC(&a9, 0) = &unk_26C6BE988;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (v6 && *(void *)(v6 + 8))
  {
    uint64_t v8 = sub_216111694(0);
    uint64_t v9 = v8;
    uint64_t v10 = 0;
    CFErrorRef error = 0;
    if (a2 && v8)
    {
      if (!CFURLResourceIsReachable(a2, &error))
      {
        if (error) {
          CFRelease(error);
        }
        uint64_t v10 = 0;
        goto LABEL_30;
      }
      if (CFURLGetFileSystemRepresentation(a2, 1u, buffer, 1024)) {
        CFStringRef v11 = (char *)buffer;
      }
      else {
        CFStringRef v11 = (char *)&unk_2163A8923;
      }
      sub_21610B834(__p, v11);
      if (v20 < 0)
      {
        if (!__p[1])
        {
          uint64_t v10 = 0;
LABEL_28:
          operator delete(__p[0]);
          goto LABEL_29;
        }
        CFURLRef v12 = (void **)__p[0];
      }
      else
      {
        if (!v20)
        {
          uint64_t v10 = 0;
          goto LABEL_29;
        }
        CFURLRef v12 = __p;
      }
      int v13 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v9 + 16))(v9, v12);
      if (v13) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v13) {
        uint64_t v9 = 0;
      }
      if (v20 < 0) {
        goto LABEL_28;
      }
    }
LABEL_29:
    if (!v9)
    {
LABEL_31:
      uint64_t v14 = *v5;
      *CFStringRef v5 = v10;
      if (v14)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        uint64_t v10 = *v5;
      }
      if (v10)
      {
        (*(void (**)(UInt8 *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 64))(buffer, v10, 32);
        uint64_t v15 = *(void *)buffer;
      }
      else
      {
        uint64_t v15 = 0;
      }
      *(void *)buffer = 0;
      uint64_t v16 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v15;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        uint64_t v17 = *(void *)buffer;
        *(void *)buffer = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      *(_DWORD *)(a1 + 72) = 1;
      return a1;
    }
LABEL_30:
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    goto LABEL_31;
  }
  return a1;
}

void sub_2162DA5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  *char v20 = v17;
  uint64_t v23 = *v21;
  if (*v21)
  {
    void v15[7] = v23;
    operator delete(v23);
  }
  uint64_t v24 = v15[4];
  void v15[4] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v15[3];
  void v15[3] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *v19;
  *int v19 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = v15[1];
  *uint64_t v15 = v16;
  v15[1] = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  _Unwind_Resume(a1);
}

void *sub_2162DA70C(void *a1)
{
  *a1 = &unk_26C6BE988;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2162DA75C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_2162DA764@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4)
  {
    sub_2162DAAAC((uint64_t *)v9, (uint64_t **)a2, v4, *(_DWORD *)(*(void *)(result + 8) + 48));
    CFStringRef v5 = sub_2162D1CE4(0xCu);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = sub_2162D1CE4(7u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        sub_2162DAED8(&__p, v9[0], v9[1]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = p_p;
        _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "batches:\n%s", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    sub_21610EA2C(&__p);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3) {
    return sub_2162DAA18(result);
  }
  return result;
}

void sub_2162DA984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a12;
  sub_21613F444(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2162DAA18(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24));
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v2;
  if (result)
  {
    int v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

void sub_2162DAAAC(uint64_t *a1, uint64_t **a2, int a3, int a4)
{
  CFStringRef v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  unint64_t v10 = 0;
  do
  {
    uint64_t v12 = *v5;
    uint64_t v11 = v5[1];
    v5 += 3;
    unint64_t v13 = (v11 - v12) >> 2;
    if (v10 <= v13) {
      unint64_t v10 = v13;
    }
  }
  while (v5 != v6);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v46 = (uint64_t)(a1 + 2);
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_21617AF38();
    }
    CFStringRef v55 = a1 + 2;
    std::string v51 = (char *)sub_216129BFC(v46, v10);
    unint64_t v52 = v51;
    std::string::size_type v53 = v51;
    CFStringRef v54 = &v51[24 * v14];
    sub_216254590(a1, &v51);
    sub_216140FCC((uint64_t)&v51);
    unint64_t v15 = 0;
    unint64_t v47 = a3;
    int v48 = a1;
    if ((unint64_t)a3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a3;
    }
    do
    {
      long long v49 = 0uLL;
      unsigned __int8 v50 = 0;
      sub_216120BA4((void **)&v49, v47);
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = (*a2)[3 * v17];
        if (v15 >= ((*a2)[3 * v17 + 1] - v18) >> 2)
        {
          CFStringRef v22 = (char *)*((void *)&v49 + 1);
          if (*((void *)&v49 + 1) < (unint64_t)v50)
          {
            **((_DWORD **)&v49 + 1) = a4;
            __int16 v21 = v22 + 4;
            goto LABEL_44;
          }
          uint64_t v23 = (char *)v49;
          uint64_t v29 = (uint64_t)(*((void *)&v49 + 1) - v49) >> 2;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v31 = (uint64_t)&v50[-v49];
          if ((uint64_t)&v50[-v49] >> 1 > v30) {
            unint64_t v30 = v31 >> 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v30;
          }
          if (v27)
          {
            float v28 = (char *)sub_2161129B4((uint64_t)&v50, v27);
            CFStringRef v22 = (char *)*((void *)&v49 + 1);
            uint64_t v23 = (char *)v49;
          }
          else
          {
            float v28 = 0;
          }
          unint64_t v32 = &v28[4 * v29];
          *(_DWORD *)unint64_t v32 = a4;
          __int16 v21 = v32 + 4;
          while (v22 != v23)
          {
            int v34 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v32 - 1) = v34;
            v32 -= 4;
          }
        }
        else
        {
          int v19 = *(_DWORD *)(v18 + 4 * v15);
          char v20 = (char *)*((void *)&v49 + 1);
          if (*((void *)&v49 + 1) < (unint64_t)v50)
          {
            **((_DWORD **)&v49 + 1) = v19;
            __int16 v21 = v20 + 4;
            goto LABEL_44;
          }
          uint64_t v23 = (char *)v49;
          uint64_t v24 = (uint64_t)(*((void *)&v49 + 1) - v49) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v26 = (uint64_t)&v50[-v49];
          if ((uint64_t)&v50[-v49] >> 1 > v25) {
            unint64_t v25 = v26 >> 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            float v28 = (char *)sub_2161129B4((uint64_t)&v50, v27);
            char v20 = (char *)*((void *)&v49 + 1);
            uint64_t v23 = (char *)v49;
          }
          else
          {
            float v28 = 0;
          }
          unint64_t v32 = &v28[4 * v24];
          *(_DWORD *)unint64_t v32 = v19;
          __int16 v21 = v32 + 4;
          while (v20 != v23)
          {
            int v33 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
        }
        *(void *)&long long v49 = v32;
        *((void *)&v49 + 1) = v21;
        unsigned __int8 v50 = &v28[4 * v27];
        if (v23) {
          operator delete(v23);
        }
LABEL_44:
        *((void *)&v49 + 1) = v21;
        ++v17;
      }
      while (v17 != v16);
      uint8x8_t v35 = (void *)v48[1];
      unint64_t v36 = v48[2];
      if ((unint64_t)v35 >= v36)
      {
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v35 - *v48) >> 3);
        unint64_t v38 = v37 + 1;
        if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21617AF38();
        }
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v48) >> 3);
        if (2 * v39 > v38) {
          unint64_t v38 = 2 * v39;
        }
        if (v39 >= 0x555555555555555) {
          unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v40 = v38;
        }
        CFStringRef v55 = (uint64_t *)v46;
        unint64_t v41 = (char *)sub_216129BFC(v46, v40);
        uint64_t v42 = &v41[24 * v37];
        std::string v51 = v41;
        unint64_t v52 = v42;
        CFStringRef v54 = &v41[24 * v43];
        *(void *)uint64_t v42 = 0;
        *((void *)v42 + 1) = 0;
        *((void *)v42 + 2) = 0;
        *(_OWORD *)uint64_t v42 = v49;
        *((void *)v42 + 2) = v50;
        long long v49 = 0uLL;
        unsigned __int8 v50 = 0;
        std::string::size_type v53 = v42 + 24;
        sub_216254590(v48, &v51);
        uint64_t v44 = v48[1];
        sub_216140FCC((uint64_t)&v51);
        long long v45 = (void *)v49;
        v48[1] = v44;
        if (v45)
        {
          *((void *)&v49 + 1) = v45;
          operator delete(v45);
        }
      }
      else
      {
        void *v35 = 0;
        v35[1] = 0;
        void v35[2] = 0;
        *(_OWORD *)uint8x8_t v35 = v49;
        void v35[2] = v50;
        v48[1] = (uint64_t)(v35 + 3);
      }
      ++v15;
    }
    while (v15 != v10);
  }
}

void sub_2162DAE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_2162DAED8(std::string *a1, unsigned int **a2, unsigned int **a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__wordUChar s[2] = 0;
  if (a2 != a3)
  {
    int v4 = a2;
    do
    {
      memset(&__p, 0, sizeof(__p));
      uint64_t v6 = *v4;
      if (*v4 == v4[1])
      {
        uint64_t v9 = *v4;
      }
      else
      {
        std::to_string(&v16, *v6);
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v7 = &v16;
        }
        else {
          uint64_t v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
        }
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v16.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v7, size);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
        uint64_t v6 = *v4;
        uint64_t v9 = v4[1];
      }
      if ((unint64_t)((char *)v9 - (char *)v6) >= 5)
      {
        unint64_t v10 = 1;
        do
        {
          std::string::append(&__p, " ", 1uLL);
          std::to_string(&v16, (*v4)[v10]);
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v11 = &v16;
          }
          else {
            uint64_t v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
          }
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v12 = v16.__r_.__value_.__l.__size_;
          }
          std::string::append(&__p, (const std::string::value_type *)v11, v12);
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          ++v10;
        }
        while (v10 < v4[1] - *v4);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)p_p, v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::push_back(a1, 10);
      v4 += 3;
    }
    while (v4 != a3);
  }
}

void sub_2162DB058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162DB0B4(uint64_t a1, uint64_t *a2)
{
  std::string __p = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  sub_216120BA4(&__p, (a2[1] - *a2) >> 3);
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      int v5 = (*(uint64_t (**)(void))(**(void **)v3 + 32))();
      int v6 = v5;
      uint64_t v7 = v19;
      if (v19 >= v20)
      {
        uint64_t v9 = (char *)__p;
        uint64_t v10 = (v19 - (unsigned char *)__p) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v12 = v20 - (unsigned char *)__p;
        if ((v20 - (unsigned char *)__p) >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          std::string::size_type v14 = (char *)sub_2161129B4((uint64_t)&v20, v13);
          uint64_t v9 = (char *)__p;
          uint64_t v7 = v19;
        }
        else
        {
          std::string::size_type v14 = 0;
        }
        unint64_t v15 = &v14[4 * v10];
        *(_DWORD *)unint64_t v15 = v6;
        uint64_t v8 = v15 + 4;
        while (v7 != v9)
        {
          int v16 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        std::string __p = v15;
        int v19 = v8;
        uint64_t v20 = &v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(_DWORD *)int v19 = v5;
        uint64_t v8 = v7 + 4;
      }
      int v19 = v8;
      v3 += 8;
    }
    while (v3 != v4);
  }
  sub_21610EA2C(&v17);
}

void sub_2162DB78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162DB854(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 16))(&v8);
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_216140DB4(&v12, v8, (uint64_t)v9, (v9 - (unsigned char *)v8) >> 2);
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  uint64_t v10 = (void **)&v5;
  char v11 = 0;
  *(void *)&long long v5 = operator new(0x18uLL);
  *((void *)&v5 + 1) = v5;
  uint64_t v6 = v5 + 24;
  *((void *)&v5 + 1) = sub_21618B69C((uint64_t)&v6, (uint64_t)&v12, (uint64_t)&v15, (void *)v5);
  sub_2162DAAAC(v7, (uint64_t **)&v5, 1, *(_DWORD *)(*(void *)(a1 + 8) + 48));
  uint64_t v10 = (void **)&v5;
  sub_21613F444(&v10);
  if (v12)
  {
    unint64_t v13 = v12;
    operator delete(v12);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 1);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 40))(__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24));
  sub_216125410(v2, 0, &v5);
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)v9 - 1);
  if (v2) {
    (*(void (**)(void *))(*v2 + 8))(v2);
  }
  *(void *)&long long v5 = v7;
  sub_21613F444((void ***)&v5);
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
}

void sub_2162DBAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  a13 = &a17;
  sub_21613F444((void ***)&a13);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2162DBB4C(uint64_t a1, unint64_t a2)
{
  sub_216125410(*(void **)(a1 + 32), a2, &v2);
  operator new();
}

void sub_2162DBBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162DBBEC(void *a1)
{
  sub_2162DBEAC(a1);

  JUMPOUT(0x2166CA800);
}

BOOL sub_2162DBC24(void *a1)
{
  return a1[2] && a1[3] && a1[1] != 0;
}

uint64_t sub_2162DBC4C()
{
  return 1;
}

uint64_t sub_2162DBC54(uint64_t a1)
{
  return a1 + 40;
}

uint64_t *sub_2162DBC5C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2162C4050(*(void *)(a1 + 8), a2, *(_DWORD *)(a1 + 72), a3);
}

void sub_2162DBC6C(void *a1)
{
  *a1 = &unk_26C6BE988;
  long long v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

void sub_2162DBCDC()
{
}

void sub_2162DBD94(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x2166CA800](v1, 0x1091C40E88550C8);
  _Unwind_Resume(a1);
}

uint64_t sub_2162DBDC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_2162DBDD0(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 1;
      uint64_t v6 = v5 | 1;
      uint64_t v7 = (int *)(result + 4 * (v5 | 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      float v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (int *)(result + 4 * v6);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            uint64_t v6 = v14;
          }
          uint64_t v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

void *sub_2162DBEAC(void *a1)
{
  *a1 = &unk_26C6BF350;
  a1[5] = &unk_26C6BE988;
  long long v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[1];
  *a1 = &unk_26C6C05E8;
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_2162DBFF4(void *a1, uint64_t a2)
{
  *a1 = &unk_26C6C5A30;
  a1[1] = a2;
  operator new[]();
}

void *sub_2162DC09C(void *a1)
{
  *a1 = &unk_26C6C5A30;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = v2 + 56 * v3;
      do
      {
        uint64_t v5 = *(void *)(v4 - 24);
        if (v5)
        {
          uint64_t v6 = *(void *)(v4 - 16);
          uint64_t v7 = *(void **)(v4 - 24);
          if (v6 != v5)
          {
            do
            {
              v6 -= 32;
              sub_2162DE3E0(v6);
            }
            while (v6 != v5);
            uint64_t v7 = *(void **)(v4 - 24);
          }
          *(void *)(v4 - 16) = v5;
          operator delete(v7);
        }
        v4 -= 56;
      }
      while (v4 != v2);
    }
    MEMORY[0x2166CA7C0](v2 - 16, 0x1020C80097B8DA0);
  }
  uint64_t v8 = a1[5];
  if (v8) {
    MEMORY[0x2166CA7C0](v8, 0x1000C80BDFB0063);
  }
  return a1;
}

void sub_2162DC184(void *a1)
{
  sub_2162DC09C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162DC1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 56 * (a2 - 1);
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v3 = (void *)(v2 + 8);
  if (!v4) {
    return 1;
  }
  uint64_t result = *(void *)(a1 + 56 * (a2 - 1));
  if (result) {
    return *v3 + 1 == (*(unsigned int (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t sub_2162DC238(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v6 = a1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  int v58 = 0;
  LODWORD(v57) = a3;
  uint64_t result = sub_2162DC92C(a1, a2, a3 + 1, (unsigned int *)&v58, 1);
  if (*(unsigned char *)(v6 + 32))
  {
    char v8 = *(unsigned char *)(v6 + 35);
    if (v8)
    {
      uint64_t v9 = *(void *)(v6 + 8);
      if (*(void *)(*(void *)(*(void *)(v9 + 16) - 8) + 16) == *(void *)(*(void *)(*(void *)(v9 + 16)
                                                                                                - 8)
                                                                                    + 8))
      {
        char v8 = 0;
      }
      else
      {
        int v10 = *(unsigned __int8 *)(v9 + 536);
        char v8 = (int)v57 > 0 && v10 != 0;
      }
    }
    *(unsigned char *)(v6 + 36) = v8;
    if (!*(void *)(v6 + 24)) {
      return result;
    }
    while (1)
    {
      uint64_t result = sub_2162DC92C(v6, a2, v57, (unsigned int *)&v58, 0);
      if (result) {
        break;
      }
      if (v58 == 0xFFFF)
      {
        uint64_t result = sub_2162DCE08(v6, a2);
        if (result)
        {
          if (!*(unsigned char *)(v6 + 33)
            || (uint64_t result = sub_2162DC1BC(*(void *)(v6 + 16), *(void *)(v6 + 24)), result))
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(a5 + 16))(a5, *(void *)(v6 + 16), *(void *)(v6 + 24));
          }
          goto LABEL_69;
        }
        uint64_t v48 = *(void *)(v6 + 24) - 1;
        uint64_t v49 = *(void *)(v6 + 16) + 56 * v48;
        LODWORD(v57) = *(_DWORD *)(v49 + 8);
        int v58 = *(_DWORD *)(v49 + 16) + 1;
        *(void *)(v6 + 24) = v48;
        if (!v48) {
          return result;
        }
      }
      else
      {
        ++v58;
LABEL_70:
        if (!*(void *)(v6 + 24)) {
          return result;
        }
      }
    }
    uint64_t v43 = *(void *)(v6 + 16);
    uint64_t v44 = *(void *)(v6 + 24);
    if (*(unsigned char *)(v6 + 33))
    {
      if (!sub_2162DC1BC(*(void *)(v6 + 16), *(void *)(v6 + 24))) {
        goto LABEL_67;
      }
      uint64_t v45 = *(void *)(v6 + 16);
      uint64_t v46 = *(void *)(v6 + 24);
    }
    else
    {
      uint64_t v46 = *(void *)(v6 + 24);
      uint64_t v45 = *(void *)(v6 + 16);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, v45, v46);
LABEL_67:
    uint64_t result = *(void *)(v43 + 56 * (v44 - 1));
    if (result)
    {
      int v47 = *(_DWORD *)(v43 + 56 * (v44 - 1) + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
      LODWORD(v57) = v47 - result;
    }
LABEL_69:
    int v58 = 0;
    goto LABEL_70;
  }
  *(unsigned char *)(v6 + 36) = 0;
  uint64_t v12 = *(void *)(v6 + 24);
  if (!v12) {
    return result;
  }
  int v13 = 0;
  uint64_t v14 = *(void *)(v6 + 16);
  uint64_t v54 = v6;
  do
  {
    uint64_t v52 = v14;
    uint64_t v53 = v12;
    uint64_t v15 = (int64x2_t *)(v14 + 56 * v12);
    int v16 = v15 + 2;
    unsigned __int16 v70 = -1;
    uint64_t v17 = &v15[2].i64[1];
    CFStringRef v55 = (unsigned __int8 **)&v15[-1];
    std::string v56 = (unsigned __int8 **)&v15[-2].i64[1];
    std::string v51 = (uint64_t *)v15;
    uint64_t v18 = v15 + 3;
    while (1)
    {
      uint64_t result = sub_216311720(*(void *)(v6 + 8), v57, v13);
      unsigned __int16 v70 = result;
      if (result == 0xFFFF)
      {
LABEL_45:
        uint64_t v14 = *(void *)(v6 + 16);
        uint64_t v12 = *(void *)(v6 + 24) - 1;
        uint64_t v40 = v14 + 56 * v12;
        uint64_t v57 = *(void *)(v40 + 8);
        int v13 = *(_DWORD *)(v40 + 16) + 1;
        *(void *)(v6 + 24) = v12;
        goto LABEL_51;
      }
      uint64_t v19 = *v17;
      uint64_t v20 = v16->i64[0];
      while (v19 != v20)
      {
        v19 -= 32;
        uint64_t result = sub_2162DE3E0(v19);
      }
      *uint64_t v17 = v20;
      uint64_t v21 = *v56;
      CFStringRef v22 = *v55;
      if (*v56 == *v55)
      {
        int v39 = v70;
        uint64_t v6 = v54;
        goto LABEL_44;
      }
      char v23 = 0;
      do
      {
        uint64_t v24 = *(void *)(*a2 + 8 * *v21);
        sub_2162C5100((void *)v21 + 1, v24, 2, (uint64_t)&v68);
        if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v24 + 88))(v24, &v68))
        {
          sub_2162100D0((uint64_t)&v59, &v68);
          int v25 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v24 + 104))(v24, &v68);
          sub_2162100D0((uint64_t)&v61, &v59);
          LOBYTE(v63) = 0;
          HIBYTE(v63) = v25 != 0;
          v64[0] = *v21;
          unint64_t v65 = 0;
          long long v66 = 0;
          sub_21621AB84(&v65, &v61);
          __int16 v67 = v63;
          uint64_t v26 = *v17;
          if ((unint64_t)*v17 >= v18->i64[0])
          {
            unint64_t v27 = sub_2162DE444(v16, v64);
          }
          else
          {
            *(unsigned char *)uint64_t v26 = v64[0];
            *(void *)(v26 + 16) = 0;
            *(void *)(v26 + 8) = 0;
            sub_21621AB84((void ***)(v26 + 8), &v65);
            *(_WORD *)(v26 + 24) = v67;
            unint64_t v27 = (char *)(v26 + 32);
            *uint64_t v17 = v26 + 32;
          }
          *uint64_t v17 = (uint64_t)v27;
          float v28 = v66;
          long long v66 = 0;
          if (v28)
          {
            uint64_t v29 = sub_21620FE6C(v28);
            MEMORY[0x2166CA800](v29, 0x20C4093837F09);
          }
          unint64_t v30 = v65;
          unint64_t v65 = 0;
          if (v30) {
            MEMORY[0x2166CA800](v30, 0x1010C40E4C6A875);
          }
          uint64_t v31 = v62;
          unint64_t v62 = 0;
          if (v31)
          {
            unint64_t v32 = sub_21620FE6C(v31);
            MEMORY[0x2166CA800](v32, 0x20C4093837F09);
          }
          int v33 = v61;
          uint64_t v61 = 0;
          if (v33) {
            MEMORY[0x2166CA800](v33, 0x1010C40E4C6A875);
          }
          int v34 = v60;
          int64_t v60 = 0;
          if (v34)
          {
            uint8x8_t v35 = sub_21620FE6C(v34);
            MEMORY[0x2166CA800](v35, 0x20C4093837F09);
          }
          uint64_t v36 = v59;
          uint64_t v59 = 0;
          if (v36) {
            MEMORY[0x2166CA800](v36, 0x1010C40E4C6A875);
          }
          char v23 = 1;
        }
        unint64_t v37 = v69;
        long long v69 = 0;
        if (v37)
        {
          unint64_t v38 = sub_21620FE6C(v37);
          MEMORY[0x2166CA800](v38, 0x20C4093837F09);
        }
        uint64_t result = v68;
        uint64_t v68 = 0;
        if (result) {
          uint64_t result = MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
        }
        v21 += 32;
      }
      while (v21 != v22);
      int v39 = v70;
      if (v23) {
        break;
      }
      uint64_t v6 = v54;
LABEL_44:
      ++v13;
      if (v39 == 0xFFFF) {
        goto LABEL_45;
      }
    }
    uint64_t v41 = v52 + 56 * v53;
    *(void *)(v41 + 8) = (int)v57;
    *(void *)(v41 + 16) = v13;
    *(_WORD *)(v41 + 26) = v39;
    uint64_t *v51 = 0;
    uint64_t v6 = v54;
    uint64_t v42 = *(void *)(v54 + 24) + 1;
    *(void *)(v54 + 24) = v42;
    if (!*(unsigned char *)(v54 + 33)) {
      goto LABEL_49;
    }
    uint64_t result = sub_2162DC1BC(*(void *)(v54 + 16), v42);
    if (result)
    {
      uint64_t v42 = *(void *)(v54 + 24);
LABEL_49:
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(a5 + 16))(a5, *(void *)(v54 + 16), v42);
    }
    int v13 = 0;
    uint64_t v14 = *(void *)(v54 + 16);
    uint64_t v12 = *(void *)(v54 + 24);
    uint64_t v57 = *(void *)(v14 + 56 * v12 - 48) - 1;
LABEL_51:
    ;
  }
  while (v12);
  return result;
}

void sub_2162DC7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  if (a27)
  {
    uint64_t v29 = sub_21620FE6C(a27);
    MEMORY[0x2166CA800](v29, 0x20C4093837F09);
  }
  if (a26) {
    MEMORY[0x2166CA800](a26, 0x1010C40E4C6A875);
  }
  if (a23)
  {
    unint64_t v30 = sub_21620FE6C(a23);
    MEMORY[0x2166CA800](v30, 0x20C4093837F09);
  }
  if (a22) {
    MEMORY[0x2166CA800](a22, 0x1010C40E4C6A875);
  }
  if (a21)
  {
    uint64_t v31 = sub_21620FE6C(a21);
    MEMORY[0x2166CA800](v31, 0x20C4093837F09);
  }
  if (a20) {
    MEMORY[0x2166CA800](a20, 0x1010C40E4C6A875);
  }
  unint64_t v32 = *(void ***)(v27 - 104);
  *(void *)(v27 - 104) = 0;
  if (v32)
  {
    int v33 = sub_21620FE6C(v32);
    MEMORY[0x2166CA800](v33, 0x20C4093837F09);
  }
  uint64_t v34 = *(void *)(v27 - 112);
  *(void *)(v27 - 112) = 0;
  if (v34) {
    MEMORY[0x2166CA800](v34, 0x1010C40E4C6A875);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162DC92C(uint64_t a1, uint64_t *a2, signed int a3, unsigned int *a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 24);
  if (!v10)
  {
    uint64_t v12 = 0;
LABEL_6:
    uint64_t v13 = 0;
    if ((a5 & 1) == 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void **)(v11 + 56 * v10 - 56);
  if (v10 == 1) {
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v11 + 56 * v10 - 112);
  if ((a5 & 1) == 0)
  {
LABEL_4:
    uint64_t v14 = sub_2163117A4(*(void *)(a1 + 8), a3, a4, v12, v13, 0);
    uint64_t v10 = *(void *)(a1 + 24);
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v14 = 0;
LABEL_8:
  __int16 v67 = 0;
  if (v10)
  {
    int v15 = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 - 28);
    int v16 = v15;
    if (!v14)
    {
      BOOL v21 = 1;
      goto LABEL_41;
    }
    if (((*(uint64_t (**)(void *))(*v14 + 88))(v14) & 1) == 0)
    {
      char v17 = *(unsigned char *)(v14[1] + 8);
      int v18 = (*(uint64_t (**)(void *))(*v14 + 64))(v14);
      __int16 v19 = v15 | 0x10;
      if (v18 != 4) {
        __int16 v19 = v15;
      }
      if (v17)
      {
        unint64_t v22 = *(void *)(a1 + 24);
        if (v22 == 1) {
          __int16 v23 = 6;
        }
        else {
          __int16 v23 = 2;
        }
        if ((v15 & 2) != 0) {
          __int16 v23 = 0;
        }
        __int16 v24 = v23 | v19;
        if ((v15 & 8) != 0 && v22 >= 3) {
          LOWORD(v16) = v24 & 0xF7;
        }
        else {
          LOWORD(v16) = v24;
        }
      }
      else
      {
        if ((v15 & 4) != 0) {
          v19 &= 0xFBu;
        }
        if ((v15 & 2) != 0 && *(void *)(a1 + 24) == 2) {
          LOWORD(v16) = v19 | 8;
        }
        else {
          LOWORD(v16) = v19;
        }
      }
      if ((*(unsigned int (**)(void *))(*v14 + 64))(v14) == 8) {
        LOWORD(v16) = 2 * (*(void *)(a1 + 24) != 1);
      }
    }
  }
  else
  {
    LOWORD(v16) = *(unsigned __int8 *)(a1 + 35);
  }
  int v16 = (unsigned __int16)v16;
  BOOL v21 = v14 == 0;
  if (v14 && (a5 & 1) == 0)
  {
    int v26 = sub_2162DD6F0(a1, a2, (uint64_t)v14, *(void *)(a1 + 24) - 1, &v67, (unsigned __int16)v16);
    if (v26 == 0xFFFF) {
      return 0;
    }
    char v56 = a5;
    BOOL v21 = 0;
    __int16 v27 = v67;
    goto LABEL_43;
  }
LABEL_41:
  if (!a5)
  {
    uint64_t v57 = a4;
    uint64_t result = 0;
    if (!v21) {
      return result;
    }
    goto LABEL_68;
  }
  char v56 = a5;
  __int16 v27 = 0;
  LOWORD(v26) = -1;
LABEL_43:
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = v28 + 56 * v29;
  *(_WORD *)(v30 + 24) = v27;
  *(void *)uint64_t v30 = v14;
  *(void *)(v30 + 8) = a3;
  uint64_t v57 = a4;
  *(void *)(v30 + 16) = (int)*a4;
  *(_WORD *)(v30 + 26) = v26;
  *(_DWORD *)(v30 + 28) = v16;
  BOOL v55 = v21;
  if (v21)
  {
    uint64_t v31 = *a2;
    uint64_t v32 = a2[1];
    int v33 = (int64x2_t *)(v28 + 56 * v29);
    uint64_t v36 = v33[2].i64[0];
    uint64_t v34 = v33 + 2;
    uint8x8_t v35 = (char *)v36;
    unint64_t v38 = (char **)&v34->i64[1];
    for (uint64_t i = v34->i64[1]; (char *)i != v35; sub_2162DE3E0(i))
      i -= 32;
    char *v38 = v35;
    if (v32 != v31)
    {
      uint64_t v40 = 0;
      unsigned __int8 v41 = 0;
      unint64_t v42 = (v32 - v31) >> 3;
      uint64_t v43 = (void *)(v28 + 56 * v29 + 48);
      do
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(*a2 + 8 * v40) + 56))(&v58);
        sub_2162100D0((uint64_t)&v60, &v58);
        __int16 v62 = 256;
        v63[0] = v41;
        long long v64 = 0;
        unint64_t v65 = 0;
        sub_21621AB84(&v64, &v60);
        __int16 v66 = v62;
        uint64_t v44 = *v38;
        if ((unint64_t)*v38 >= *v43)
        {
          uint64_t v45 = sub_2162DE444(v34, v63);
        }
        else
        {
          *uint64_t v44 = v63[0];
          *((void *)v44 + 2) = 0;
          *((void *)v44 + 1) = 0;
          sub_21621AB84((void ***)v44 + 1, &v64);
          *((_WORD *)v44 + 12) = v66;
          uint64_t v45 = v44 + 32;
          char *v38 = v44 + 32;
        }
        char *v38 = v45;
        uint64_t v46 = v65;
        unint64_t v65 = 0;
        if (v46)
        {
          int v47 = sub_21620FE6C(v46);
          MEMORY[0x2166CA800](v47, 0x20C4093837F09);
        }
        uint64_t v48 = v64;
        long long v64 = 0;
        if (v48) {
          MEMORY[0x2166CA800](v48, 0x1010C40E4C6A875);
        }
        uint64_t v49 = v61;
        uint64_t v61 = 0;
        if (v49)
        {
          unsigned __int8 v50 = sub_21620FE6C(v49);
          MEMORY[0x2166CA800](v50, 0x20C4093837F09);
        }
        std::string v51 = v60;
        int64_t v60 = 0;
        if (v51) {
          MEMORY[0x2166CA800](v51, 0x1010C40E4C6A875);
        }
        uint64_t v52 = v59;
        uint64_t v59 = 0;
        if (v52)
        {
          uint64_t v53 = sub_21620FE6C(v52);
          MEMORY[0x2166CA800](v53, 0x20C4093837F09);
        }
        uint64_t v54 = v58;
        uint64_t v58 = 0;
        if (v54) {
          MEMORY[0x2166CA800](v54, 0x1010C40E4C6A875);
        }
        uint64_t v40 = ++v41;
      }
      while (v42 > v41);
    }
  }
  ++*(void *)(a1 + 24);
  uint64_t result = 1;
  LOBYTE(a5) = v56;
  if (v55)
  {
LABEL_68:
    if ((a5 & 1) == 0) {
      *uint64_t v57 = 0xFFFF;
    }
  }
  return result;
}

void sub_2162DCDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void **);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_2162DD6A0((uint64_t)va2);
  sub_2162153A0((void ***)va1);
  sub_2162153A0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162DCE08(uint64_t a1, void *a2)
{
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 < 2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = v2 - 1;
  uint64_t v5 = v3 + 56 * (v2 - 1);
  uint64_t v6 = *(void *)v5;
  unsigned int v7 = *(_DWORD *)(v5 + 28);
  __int16 v8 = *(_WORD *)(v5 + 24);
  v5 += 24;
  *(_WORD *)uint64_t v5 = v8 + 1;
  int v9 = sub_2162DD6F0(a1, a2, v6, v2 - 2, (_WORD *)v5, v7);
  if (v9 == 0xFFFF) {
    return 0;
  }
  *(_WORD *)(v3 + 56 * v4 + 26) = v9;
  return 1;
}

void sub_2162DCE7C(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[1];
  int v39 = 0;
  uint64_t v40 = 0;
  unint64_t v38 = 0;
  sub_216182F50(&v38, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1);
  sub_216312200(v5, &v38, 7uLL, &v41);
  if (v38)
  {
    int v39 = v38;
    operator delete(v38);
  }
  uint64_t v6 = v41;
  unsigned int v7 = v42;
  uint64_t v8 = (char *)v42 - (char *)v41;
  if (v42 != v41)
  {
    uint64_t v9 = ((uint64_t)(*(void *)(a1[1] + 16) - *(void *)(a1[1] + 8)) >> 3) - 1;
    uint64_t v10 = 56 * (v8 >> 3);
    uint64_t v25 = v8 >> 3;
    uint64_t v11 = 2 * (v8 >> 3) - 2;
    do
    {
      uint64_t v12 = *v6;
      __int16 v13 = *(_WORD *)(*(void *)(*v6 + 8) + 2);
      *(_WORD *)(a1[5] + v11) = v13;
      uint64_t v14 = a1[2] + v10;
      *(_WORD *)(v14 - 3sub_2161868BC(&a9, 0) = v13;
      *(void *)(v14 - 56) = v12;
      *(void *)(v14 - 48) = v9;
      v9 -= (*(unsigned int (**)(uint64_t))(*(void *)v12 + 40))(v12);
      ++v6;
      v10 -= 56;
      v11 -= 2;
    }
    while (v6 != v7);
    unint64_t v15 = 0;
    uint64_t v16 = 1;
    if ((unint64_t)((char *)v42 - (char *)v41) <= 0x10) {
      uint64_t v16 = 2;
    }
    unint64_t v26 = v16;
    uint64_t v34 = 0;
    uint8x8_t v35 = &v34;
    uint64_t v36 = 0x2000000000;
    uint64_t v37 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x2000000000;
    char v33 = 0;
    char v17 = &v30;
    unint64_t v18 = v25;
    do
    {
      if ((unint64_t)v35[3] > 2) {
        break;
      }
      unint64_t v19 = v18 - v15;
      if (v18 - v15 < v26) {
        break;
      }
      BOOL v21 = *a2;
      uint64_t v20 = a2[1];
      if (*a2 != v20)
      {
        uint64_t v22 = MEMORY[0x263EF8330];
        do
        {
          uint64_t v23 = *v21;
          uint64_t v24 = a1[5] + 2 * v15;
          v29[0] = v22;
          v29[1] = 0x40000000;
          v29[2] = sub_2162DD17C;
          void v29[3] = &unk_2642671F0;
          v29[8] = v15;
          v29[9] = v19;
          v29[10] = v23;
          v29[4] = a4;
          v29[5] = &v30;
          v29[6] = &v34;
          v29[7] = a1;
          (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, void *))(*(void *)v23 + 128))(v23, v24, 2 * v19, 2 * v19, v29);
          ++v21;
        }
        while (v21 != v20);
        char v17 = v31;
        unint64_t v18 = v25;
      }
      if (*((unsigned char *)v17 + 24)) {
        break;
      }
      ++v15;
    }
    while (v15 < v18);
    _Block_object_dispose(&v30, 8);
    _Block_object_dispose(&v34, 8);
    unsigned int v7 = v41;
  }
  if (v7)
  {
    unint64_t v42 = v7;
    operator delete(v7);
  }
}

void sub_2162DD12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v32 = *(void **)(v30 - 152);
  if (v32)
  {
    *(void *)(v30 - 144) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162DD17C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned char *a5)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 16) + 56 * *(void *)(a1 + 64);
  unint64_t v10 = a4 >> 1;
  if (!a3) {
    unint64_t v10 = 0;
  }
  v16[0] = a3;
  v16[1] = v10;
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v8 + 16))(v8, v9, v11, v16, a2, v12, *(void *)(*(void *)(a1 + 40) + 8) + 24);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
  if (v14 > *(void *)(v15 + 24)) {
    *(void *)(v15 + 24) = v14;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a5 = 1;
  }
  return result;
}

void sub_2162DD26C(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v7 = a1[1];
  if (a3) {
    int v8 = sub_21631A918(v7, &v53);
  }
  else {
    int v8 = sub_21631A500(v7, &v53);
  }
  if (v8 && *(void *)(a1[1] + 16) - *(void *)(a1[1] + 8) >= 9uLL)
  {
    unint64_t v43 = *(void *)(a1[1] + 16) - *(void *)(a1[1] + 8);
    uint64_t v41 = v53;
    uint64_t v42 = v54;
    uint64_t v9 = (int64x2_t *)a1[2];
    uint64_t v10 = v9[2].i64[0];
    for (uint64_t i = v9[2].i64[1]; i != v10; sub_2162DE3E0(i))
      i -= 32;
    v9[2].i64[1] = v10;
    uint64_t v12 = a2[1];
    uint64_t v13 = v12 - *a2;
    if (v12 != *a2)
    {
      uint64_t v14 = 0;
      unsigned __int8 v15 = 0;
      unint64_t v16 = v13 >> 3;
      do
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(*a2 + 8 * v14) + 56))(&v44);
        sub_2162100D0((uint64_t)&v46, &v44);
        __int16 v48 = 256;
        LOBYTE(v49) = v15;
        unsigned __int8 v50 = 0;
        std::string v51 = 0;
        sub_21621AB84(&v50, &v46);
        __int16 v52 = v48;
        unint64_t v17 = v9[2].u64[1];
        if (v17 >= v9[3].i64[0])
        {
          unint64_t v18 = sub_2162DE444(v9 + 2, (char *)&v49);
        }
        else
        {
          *(unsigned char *)unint64_t v17 = (_BYTE)v49;
          *(void *)(v17 + 16) = 0;
          *(void *)(v17 + 8) = 0;
          sub_21621AB84((void ***)(v17 + 8), &v50);
          *(_WORD *)(v17 + 24) = v52;
          unint64_t v18 = (char *)(v17 + 32);
          v9[2].i64[1] = v17 + 32;
        }
        v9[2].i64[1] = (uint64_t)v18;
        unint64_t v19 = v51;
        std::string v51 = 0;
        if (v19)
        {
          uint64_t v20 = sub_21620FE6C(v19);
          MEMORY[0x2166CA800](v20, 0x20C4093837F09);
        }
        BOOL v21 = v50;
        unsigned __int8 v50 = 0;
        if (v21) {
          MEMORY[0x2166CA800](v21, 0x1010C40E4C6A875);
        }
        uint64_t v22 = v47;
        int v47 = 0;
        if (v22)
        {
          uint64_t v23 = sub_21620FE6C(v22);
          MEMORY[0x2166CA800](v23, 0x20C4093837F09);
        }
        uint64_t v24 = v46;
        uint64_t v46 = 0;
        if (v24) {
          MEMORY[0x2166CA800](v24, 0x1010C40E4C6A875);
        }
        uint64_t v25 = v45;
        uint64_t v45 = 0;
        if (v25)
        {
          unint64_t v26 = sub_21620FE6C(v25);
          MEMORY[0x2166CA800](v26, 0x20C4093837F09);
        }
        uint64_t v27 = v44;
        uint64_t v44 = 0;
        if (v27) {
          MEMORY[0x2166CA800](v27, 0x1010C40E4C6A875);
        }
        uint64_t v14 = ++v15;
      }
      while (v16 > v15);
    }
    int v28 = 0;
    unint64_t v29 = 1;
    a1[3] = 1;
    int v30 = (v43 >> 3) - 1;
    do
    {
      while (v29 < ((v42 - v41) >> 4) + 1)
      {
        if (v28 > 0) {
          break;
        }
        uint64_t v35 = *(void *)(v53 + 16 * (v29 - 1));
        LOWORD(v46) = 0;
        if (!v35) {
          break;
        }
        int v36 = sub_2162DD6F0((uint64_t)a1, a2, v35, v29 - 1, &v46, 0x24u);
        if (v36 == 0xFFFF) {
          break;
        }
        uint64_t v37 = a1[3];
        uint64_t v38 = a1[2] + 56 * v37;
        *(void *)uint64_t v38 = v35;
        __int16 v39 = (__int16)v46;
        *(void *)(v38 + 8) = v30;
        *(_WORD *)(v38 + 24) = v39;
        *(void *)(v38 + 16) = 0;
        *(_WORD *)(v38 + 26) = v36;
        *(_DWORD *)(v38 + 28) = 36;
        a1[3] = v37 + 1;
        if (v30 || ((*(void (**)(uint64_t))(a4 + 16))(a4), (uint64_t v35 = *(void *)v38) != 0))
        {
          uint64_t v40 = *(void *)(v38 + 8);
          int v30 = v40 - (*(uint64_t (**)(uint64_t))(*(void *)v35 + 40))(v35);
        }
        else
        {
          int v30 = 0;
        }
LABEL_40:
        int v28 = 0;
        unint64_t v29 = a1[3];
        if (!v29) {
          goto LABEL_43;
        }
      }
      char v31 = sub_2162DCE08((uint64_t)a1, a2);
      uint64_t v32 = a1[2];
      uint64_t v33 = a1[3];
      unint64_t v29 = v33 - 1;
      uint64_t v34 = *(void *)(v32 + 56 * (v33 - 1) + 8);
      if (v31)
      {
        if (!v34) {
          (*(void (**)(uint64_t))(a4 + 16))(a4);
        }
        goto LABEL_40;
      }
      int v28 = *(_DWORD *)(v32 + 56 * v29 + 16) + 1;
      a1[3] = v29;
      int v30 = v34;
    }
    while (v33 != 1);
  }
LABEL_43:
  uint64_t v49 = (void **)&v53;
  sub_2161FB708(&v49);
}

void sub_2162DD650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  a18 = (void **)&a22;
  sub_2161FB708(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_2162DD6A0(uint64_t a1)
{
  sub_21620FE1C((void ***)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    MEMORY[0x2166CA800](v2, 0x1010C40E4C6A875);
  }
  return a1;
}

uint64_t sub_2162DD6F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _WORD *a5, unsigned int a6)
{
  if (*(unsigned char *)(a1 + 36)) {
    BOOL v9 = a4 == 1;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9 && (a6 & 8) != 0)
  {
    unsigned __int8 v15 = sub_216311D90(*(void *)(a1 + 8), a3, *(void *)(*(void *)(a1 + 16) + 56));
    if (v15) {
      return 0xFFFFLL;
    }
  }
  int v11 = 0;
  v70[0] = 0;
  int v12 = *(_DWORD *)(*(void *)(a1 + 8) + 40);
  uint64_t v51 = a1;
  if ((v12 - 3) >= 2)
  {
    if (v12 == 5)
    {
      uint64_t v13 = (a6 >> 5) & 1;
      uint64_t v14 = 2;
      goto LABEL_16;
    }
    int v11 = 1;
  }
  uint64_t v13 = v11 & (a6 >> 5);
  uint64_t v14 = (v12 - 3) < 2;
LABEL_16:
  unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 48))(a3, v14, v13);
  unsigned int v17 = (unsigned __int16)*a5;
  uint64_t v18 = 0xFFFFLL;
  unsigned int v53 = v16;
  if (v17 < v16)
  {
    uint64_t v19 = *(void *)(a1 + 16) + 56 * a4;
    uint64_t v20 = (uint64_t *)(v19 + 96);
    uint64_t v55 = (int64x2_t *)(v19 + 88);
    char v56 = (void *)(v19 + 104);
    unsigned __int8 v50 = a5;
    while (1)
    {
      uint64_t v21 = *v20;
      uint64_t v22 = v55->i64[0];
      if (*v20 != v55->i64[0])
      {
        do
        {
          v21 -= 32;
          sub_2162DE3E0(v21);
        }
        while (v21 != v22);
        LOWORD(v17) = *a5;
      }
      *uint64_t v20 = v22;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, (unsigned __int16)v17);
      if (v23 != 0xFFFF)
      {
        uint64_t v18 = v23;
        __int16 v24 = v23;
        if (*(unsigned char *)(v51 + 34))
        {
          uint64_t v25 = (__int16 *)((char *)&unk_21638FFB4 + 2 * v23 - 28);
          if (v23 >= 0x1AC) {
            uint64_t v25 = &aXxxxxfffffyyyy[v23 - 428];
          }
          __int16 v24 = *v25;
        }
        __int16 v69 = v24;
        uint64_t v26 = *(void *)(v51 + 16) + 56 * a4;
        int v28 = *(unsigned __int8 **)(v26 + 32);
        uint64_t v27 = *(unsigned __int8 **)(v26 + 40);
        if (v28 == v27)
        {
          a5 = v50;
        }
        else
        {
          char v29 = 0;
          do
          {
            uint64_t v30 = *(void *)(*a2 + 8 * *v28);
            if ((a6 & 6) == 0
              || ((unsigned int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 16))(v30), v31 <= 0x11)
                ? (BOOL v32 = ((1 << v31) & 0x24E83) == 0)
                : (BOOL v32 = 1),
                  !v32))
            {
              if (!v28[24])
              {
                sub_2162C5100((void *)v28 + 1, v30, 2, (uint64_t)&v67);
                if ((*(unsigned int (**)(uint64_t, uint64_t *, void, char *, _WORD *))(*(void *)v30 + 96))(v30, &v67, a6, (char *)v70 + 1, v70))
                {
                  sub_2162100D0((uint64_t)&v58, &v67);
                  char v33 = HIBYTE(v70[0]);
                  char v34 = v70[0];
                  sub_2162100D0((uint64_t)&v60, &v58);
                  LOBYTE(v62) = v33;
                  HIBYTE(v62) = v34;
                  v63[0] = *v28;
                  long long v64 = 0;
                  unint64_t v65 = 0;
                  sub_21621AB84(&v64, &v60);
                  __int16 v66 = v62;
                  uint64_t v35 = *v20;
                  if ((unint64_t)*v20 >= *v56)
                  {
                    int v36 = sub_2162DE444(v55, v63);
                  }
                  else
                  {
                    *(unsigned char *)uint64_t v35 = v63[0];
                    *(void *)(v35 + 16) = 0;
                    *(void *)(v35 + 8) = 0;
                    sub_21621AB84((void ***)(v35 + 8), &v64);
                    *(_WORD *)(v35 + 24) = v66;
                    int v36 = (char *)(v35 + 32);
                    *uint64_t v20 = v35 + 32;
                  }
                  *uint64_t v20 = (uint64_t)v36;
                  uint64_t v37 = v65;
                  unint64_t v65 = 0;
                  if (v37)
                  {
                    uint64_t v38 = sub_21620FE6C(v37);
                    MEMORY[0x2166CA800](v38, 0x20C4093837F09);
                  }
                  __int16 v39 = v64;
                  long long v64 = 0;
                  if (v39) {
                    MEMORY[0x2166CA800](v39, 0x1010C40E4C6A875);
                  }
                  uint64_t v40 = v61;
                  uint64_t v61 = 0;
                  if (v40)
                  {
                    uint64_t v41 = sub_21620FE6C(v40);
                    MEMORY[0x2166CA800](v41, 0x20C4093837F09);
                  }
                  uint64_t v42 = v60;
                  int64_t v60 = 0;
                  if (v42) {
                    MEMORY[0x2166CA800](v42, 0x1010C40E4C6A875);
                  }
                  unint64_t v43 = v59;
                  uint64_t v59 = 0;
                  if (v43)
                  {
                    uint64_t v44 = sub_21620FE6C(v43);
                    MEMORY[0x2166CA800](v44, 0x20C4093837F09);
                  }
                  uint64_t v45 = v58;
                  uint64_t v58 = 0;
                  if (v45) {
                    MEMORY[0x2166CA800](v45, 0x1010C40E4C6A875);
                  }
                  char v29 = 1;
                }
                uint64_t v46 = v68;
                uint64_t v68 = 0;
                if (v46)
                {
                  int v47 = sub_21620FE6C(v46);
                  MEMORY[0x2166CA800](v47, 0x20C4093837F09);
                }
                uint64_t v48 = v67;
                uint64_t v67 = 0;
                if (v48) {
                  MEMORY[0x2166CA800](v48, 0x1010C40E4C6A875);
                }
              }
            }
            v28 += 32;
          }
          while (v28 != v27);
          a5 = v50;
          if (v29) {
            return v18;
          }
        }
      }
      LOWORD(v17) = *a5 + 1;
      *a5 = v17;
      if (v53 <= (unsigned __int16)v17) {
        return 0xFFFFLL;
      }
    }
  }
  return v18;
}

void sub_2162DDBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  int v12 = va_arg(va1, void **);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  unsigned __int8 v15 = va_arg(va2, void **);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  sub_2162DD6A0((uint64_t)va2);
  sub_2162153A0((void ***)va1);
  sub_2162153A0((void ***)va);
  sub_2162153A0((void ***)(v10 - 112));
  _Unwind_Resume(a1);
}

__CFArray *sub_2162DDBE4(uint64_t a1, CFIndex a2)
{
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v6 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFFA0]);
  uint64_t v26 = v6;
  CFStringRef v7 = sub_21631C784(*(void *)(a1 + 8));
  CFStringRef v8 = v7;
  CFStringRef v25 = v7;
  if (*(unsigned char *)(a1 + 35)) {
    char v9 = CFStringGetLength(v7) > 0;
  }
  else {
    char v9 = 0;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v5, v8, @"'");
  CFArrayRef v24 = ArrayBySeparatingStrings;
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  *(void *)(a1 + 24) = 0;
  unint64_t v12 = *(void *)(*(void *)(a1 + 8) + 16) - *(void *)(*(void *)(a1 + 8) + 8);
  if (v12)
  {
    CFIndex v13 = Count - 1;
    unint64_t v14 = v12 >> 3;
    int v23 = 0;
    sub_2162DDE54((uint64_t *)a1, v12 >> 3, (unsigned int *)&v23, 1, Mutable, v9, v6, Count - 1);
    if (*(void *)(a1 + 24))
    {
      signed int v15 = v14 - 1;
      do
      {
        while (1)
        {
          if (CFArrayGetCount(Mutable) >= a2) {
            goto LABEL_15;
          }
          if ((sub_2162DDE54((uint64_t *)a1, v15, (unsigned int *)&v23, 0, Mutable, v9, v6, v13) & 1) == 0) {
            break;
          }
          uint64_t v16 = *(void *)(a1 + 16) + 56 * *(void *)(a1 + 24);
          uint64_t v17 = *(void *)(v16 - 48);
          int v18 = (*(uint64_t (**)(void))(**(void **)(v16 - 56) + 40))(*(void *)(v16 - 56));
          unsigned int v19 = 0;
          signed int v15 = v17 - v18;
LABEL_14:
          int v23 = v19;
          if (!*(void *)(a1 + 24)) {
            goto LABEL_15;
          }
        }
        if (v23 != 0xFFFF)
        {
          unsigned int v19 = v23 + 1;
          goto LABEL_14;
        }
        uint64_t v20 = *(void *)(a1 + 24) - 1;
        uint64_t v21 = *(void *)(a1 + 16) + 56 * v20;
        signed int v15 = *(_DWORD *)(v21 + 8);
        int v23 = *(_DWORD *)(v21 + 16) + 1;
        *(void *)(a1 + 24) = v20;
      }
      while (v20);
    }
  }
LABEL_15:
  if (ArrayBySeparatingStrings) {
    CFRelease(ArrayBySeparatingStrings);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  return Mutable;
}

void sub_2162DDE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFAllocatorRef v5 = va_arg(va2, const void *);
  sub_216195B94((const void **)va, 0);
  sub_2161868BC((const void **)va1, 0);
  sub_216195B5C((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162DDE54(uint64_t *a1, signed int a2, unsigned int *a3, char a4, __CFArray *a5, char a6, __CFSet *a7, CFIndex a8)
{
  unint64_t v14 = a1;
  uint64_t v15 = a1[3];
  if (!v15)
  {
    uint64_t v17 = 0;
LABEL_7:
    uint64_t v18 = 0;
    if ((a4 & 1) == 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t result = 0;
    goto LABEL_9;
  }
  uint64_t v16 = a1[2];
  uint64_t v17 = *(void **)(v16 + 56 * v15 - 56);
  if (v15 == 1) {
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)(v16 + 56 * v15 - 112);
  if (a4) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t result = (uint64_t)sub_2163117A4(a1[1], a2, a3, v17, v18, 1);
  if (!result)
  {
    *a3 = 0xFFFF;
    return result;
  }
  uint64_t v15 = v14[3];
LABEL_9:
  uint64_t v20 = v14[2];
  uint64_t v14[3] = v15 + 1;
  uint64_t v21 = v20 + 56 * v15;
  *(_DWORD *)(v21 + 24) = -65536;
  *(void *)uint64_t v21 = result;
  *(void *)(v21 + 8) = a2;
  *(void *)(v21 + 16) = (int)*a3;
  if ((a4 & 1) != 0 || a2 - (*(unsigned int (**)(uint64_t))(*(void *)result + 40))(result) != -1) {
    return 1;
  }
  uint64_t v54 = a7;
  theArray = a5;
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFArrayRef v24 = Mutable;
  uint64_t v25 = v14[3];
  uint64_t v26 = v25 - 1;
  if (v25 == 1)
  {
    CFStringRef v43 = CFStringCreateByCombiningStrings(v22, Mutable, @" ");
    uint64_t v44 = a5;
    if (a6) {
      goto LABEL_40;
    }
  }
  else
  {
    char v53 = a6;
    int v27 = 0;
    uint64_t v28 = 56 * v25 - 56;
    char v56 = v14;
    uint64_t v57 = Mutable;
    do
    {
      uint64_t v29 = *(void *)(v14[2] + v28);
      if (v29)
      {
        int v59 = v27;
        int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 64))(v29);
        int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 64))(v29);
        int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 64))(v29);
        BOOL v33 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 64))(v29) == 2;
        CFAllocatorRef v34 = v22;
        uint64_t v35 = CFArrayCreateMutable(v22, 0, MEMORY[0x263EFFF70]);
        int v36 = v35;
        BOOL v37 = v30 == 5 || v31 == 6;
        int v38 = v37;
        if (v37)
        {
          if (v30 == 5) {
            __int16 v39 = CFSTR("(");
          }
          else {
            __int16 v39 = @"[";
          }
          CFArrayAppendValue(v35, v39);
        }
        uint64_t v40 = @"Mixed";
        if (v32 != 7) {
          uint64_t v40 = (__CFString *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, 1);
        }
        CFArrayAppendValue(v36, v40);
        CFArrayRef v24 = v57;
        if (v38)
        {
          if (v30 == 5) {
            uint64_t v41 = @"");
          }
          else {
            uint64_t v41 = @"]";
          }
          CFArrayAppendValue(v36, v41);
        }
        int v27 = v33 | v59;
        CFAllocatorRef v22 = v34;
        CFStringRef v42 = CFStringCreateByCombiningStrings(v34, v36, &stru_26C6FB1C0);
        CFArrayAppendValue(v57, v42);
        CFRelease(v40);
        CFRelease(v42);
        CFRelease(v36);
        unint64_t v14 = v56;
      }
      v28 -= 56;
      --v26;
    }
    while (v26);
    CFStringRef v43 = CFStringCreateByCombiningStrings(v22, v24, @" ");
    uint64_t v44 = theArray;
    if (v53)
    {
      if (v27) {
        goto LABEL_58;
      }
LABEL_40:
      CFStringRef v60 = v43;
      CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v22, v43, @"'");
      CFAllocatorRef v46 = v22;
      int v47 = CFArrayCreateMutable(v22, 0, MEMORY[0x263EFFF70]);
      for (CFIndex i = 0; i < CFArrayGetCount(ArrayBySeparatingStrings); ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, i);
        MutableCFArrayRef Copy = CFStringCreateMutableCopy(v46, 0, ValueAtIndex);
        uint64_t v51 = MutableCopy;
        if (i >= a8)
        {
          CFStringTrimWhitespace(MutableCopy);
        }
        else
        {
          v61.CFIndex length = CFStringGetLength(ValueAtIndex);
          v61.locatiouint64_t n = 0;
          CFStringFindAndReplace(v51, @" ", &stru_26C6FB1C0, v61, 0);
        }
        CFArrayAppendValue(v47, v51);
        if (v51) {
          CFRelease(v51);
        }
      }
      CFStringRef v52 = CFStringCreateByCombiningStrings(v46, v47, @"' ");
      if (!CFSetContainsValue(v54, v52))
      {
        CFArrayAppendValue(theArray, v52);
        CFSetAddValue(v54, v52);
      }
      if (v52) {
        CFRelease(v52);
      }
      if (v47) {
        CFRelease(v47);
      }
      if (ArrayBySeparatingStrings) {
        CFRelease(ArrayBySeparatingStrings);
      }
      CFStringRef v43 = v60;
      goto LABEL_58;
    }
  }
  CFArrayAppendValue(v44, v43);
LABEL_58:
  CFRelease(v43);
  CFRelease(v24);
  return 1;
}

void sub_2162DE37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, const void *);
  sub_2161BE0C8((const void **)va, 0);
  sub_216195B94((const void **)va1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162DE3E0(uint64_t a1)
{
  sub_21620FE1C((void ***)(a1 + 16), 0);
  uint64_t result = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (result)
  {
    JUMPOUT(0x2166CA800);
  }
  return result;
}

char *sub_2162DE444(int64x2_t *a1, char *a2)
{
  uint64_t v2 = (a1->i64[1] - a1->i64[0]) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    sub_21610CB04();
  }
  uint64_t v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v21 = a1 + 1;
  if (v7)
  {
    if (v7 >> 59) {
      sub_2160FFA74();
    }
    CFStringRef v8 = (char *)operator new(32 * v7);
  }
  else
  {
    CFStringRef v8 = 0;
  }
  char v9 = &v8[32 * v2];
  uint64_t v18 = v8;
  v19.i64[0] = (uint64_t)v9;
  uint64_t v10 = &v8[32 * v7];
  uint64_t v20 = v10;
  *char v9 = *a2;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 1) = 0;
  sub_21621AB84((void ***)v9 + 1, (void ***)a2 + 1);
  *((_WORD *)v9 + 12) = *((_WORD *)a2 + 12);
  int v11 = v9 + 32;
  v19.i64[1] = (uint64_t)(v9 + 32);
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      v9[v14 - 32] = *(unsigned char *)(v12 + v14 - 32);
      sub_2162100D0((uint64_t)&v9[v14 - 24], (void *)(v12 + v14 - 24));
      *(_WORD *)&v9[v14 - 8] = *(_WORD *)(v12 + v14 - 8);
      v14 -= 32;
    }
    while (v12 + v14 != v13);
    int64x2_t v15 = *a1;
    v9 += v14;
    int v11 = (char *)v19.i64[1];
    uint64_t v10 = v20;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v19 = v15;
  uint64_t v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  uint64_t v20 = v16;
  uint64_t v18 = (char *)v15.i64[0];
  sub_2162DE5D0((uint64_t)&v18);
  return v11;
}

uint64_t sub_2162DE5D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_2162DE3E0(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2162DE620(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = sub_2161E2834(a2);
  *(void *)(a1 + 8) = a3;
  operator new();
}

void sub_2162DE6C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162DE704(uint64_t a1)
{
  sub_2162CF85C((uint64_t **)(a1 + 88), 0);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_2162DE764(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  if ((a2 & 0xA000) == 0)
  {
    if ((a2 & 0x10000) != 0)
    {
      *(_DWORD *)(result + 28) = 1;
    }
    else if (a4)
    {
      int v4 = *(_DWORD *)(a4 + 68);
      *(_DWORD *)(result + 28) = v4;
      if (v4) {
        a2 |= 0x10000u;
      }
    }
    else
    {
      *(_DWORD *)(result + 28) = 0;
    }
  }
  int v5 = a2 & 0x38000 | (((a2 >> 13) & 1) << 14) | (((a2 >> 4) & 3) << 10) | (a2 >> 2) & 0x10 | (a2 >> 12) & 4 | (a2 >> 2) & 1 | (a2 >> 1) & 0x80000 | (a2 << 9) & 0x200000 | (a2 >> 1) & 0x400000;
  if (a3) {
    v5 |= 0x8000004u;
  }
  *(_DWORD *)(result + 24) = v5;
  return result;
}

void sub_2162DE808(uint64_t *a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v9 = a3[1];
  if (v9 > 1) {
    a6 = 1;
  }
  if (a1[6]) {
    int v11 = a6;
  }
  else {
    int v11 = 0;
  }
  int v50 = v11;
  if (a5) {
    uint64_t v49 = *a5;
  }
  else {
    uint64_t v49 = 0;
  }
  if (v9 >= 1)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = *a2;
    uint64_t v51 = a2[1];
    CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v46 = a4 + 16;
    CFAllocatorRef v47 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
    while (1)
    {
      unint64_t v15 = *(unsigned __int16 *)(*a3 + 2 * v12);
      CFIndex v16 = v15 - 48;
      uint64_t v17 = v15 - 48 + v13;
      if (v15 < 0x31 || v17 > v51) {
        break;
      }
      if (!v50) {
        goto LABEL_67;
      }
      if (v15 != 49 || v49 == 0) {
        goto LABEL_37;
      }
      if (*(void *)(v49 + 8) <= v13) {
        goto LABEL_37;
      }
      uint64_t v20 = a1[5];
      uint64_t v23 = *(void *)(v20 + 32);
      uint64_t v21 = v20 + 32;
      uint64_t v22 = v23;
      if (!v23) {
        goto LABEL_37;
      }
      uint64_t v24 = *(unsigned __int16 *)(v14 + 2 * v13);
      uint64_t v25 = v21;
      do
      {
        unsigned int v26 = *(unsigned __int16 *)(v22 + 32);
        BOOL v27 = v26 >= v24;
        if (v26 >= v24) {
          uint64_t v28 = (uint64_t *)v22;
        }
        else {
          uint64_t v28 = (uint64_t *)(v22 + 8);
        }
        if (v27) {
          uint64_t v25 = v22;
        }
        uint64_t v22 = *v28;
      }
      while (*v28);
      if (v25 == v21 || *(unsigned __int16 *)(v25 + 32) > v24) {
        goto LABEL_37;
      }
      uint64_t v29 = *(void *)(v49 + 24);
      if (!v29) {
        uint64_t v29 = *(void *)(v49 + 16);
      }
      CFStringRef v30 = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(v29 + 2 * v13), *(_DWORD *)v49);
      sub_216199E90(a1[5], v24, v30);
      uint64_t CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      if (!CursorByAdvancingWithCharacters) {
LABEL_37:
      }
        uint64_t CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      BOOL v32 = !CursorByAdvancingWithCharacters || *(void *)a1[6] == 0;
      if (v32 || (int TokenIDForString = LMLexiconCursorFirstTokenID()) == 0)
      {
LABEL_67:
        if (a1[7])
        {
          CFStringRef v34 = CFStringCreateWithCharactersNoCopy(v48, (const UniChar *)(v14 + 2 * v13), v16, v47);
          int TokenIDForString = LMLanguageModelGetTokenIDForString();
          CFRelease(v34);
        }
        else
        {
          int TokenIDForString = 0;
        }
      }
      int v36 = *(_DWORD **)(a4 + 8);
      unint64_t v35 = *(void *)(a4 + 16);
      if ((unint64_t)v36 >= v35)
      {
        int v38 = *(_DWORD **)a4;
        uint64_t v39 = ((uint64_t)v36 - *(void *)a4) >> 2;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v41 = v35 - (void)v38;
        if (v41 >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          CFStringRef v43 = (char *)sub_2161129B4(v46, v42);
          int v38 = *(_DWORD **)a4;
          int v36 = *(_DWORD **)(a4 + 8);
        }
        else
        {
          CFStringRef v43 = 0;
        }
        uint64_t v44 = &v43[4 * v39];
        *(_DWORD *)uint64_t v44 = TokenIDForString;
        BOOL v37 = v44 + 4;
        while (v36 != v38)
        {
          int v45 = *--v36;
          *((_DWORD *)v44 - 1) = v45;
          v44 -= 4;
        }
        *(void *)a4 = v44;
        *(void *)(a4 + 8) = v37;
        *(void *)(a4 + 16) = &v43[4 * v42];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        _DWORD *v36 = TokenIDForString;
        BOOL v37 = v36 + 1;
      }
      *(void *)(a4 + 8) = v37;
      ++v12;
      unint64_t v13 = v17;
      if (v12 == v9) {
        return;
      }
    }
    *(void *)(a4 + 8) = *(void *)a4;
  }
}

uint64_t sub_2162DEAFC(uint64_t a1, unsigned __int16 **a2, const __CFString *a3)
{
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  if (!a3 || a2[1] != (unsigned __int16 *)1)
  {
    if (LMLexiconGetCursorByAdvancingWithCharacters()) {
      BOOL v5 = **(void **)(a1 + 48) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      return LMLexiconCursorFirstTokenID();
    }
    return 0;
  }
  sub_216199E90(*(void *)(a1 + 40), **a2, a3);
  if (LMLexiconGetCursorByAdvancingWithCharacters()) {
    BOOL v4 = **(void **)(a1 + 48) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  return LMLexiconCursorFirstTokenID();
}

void sub_2162DEBD4(uint64_t a1, const void *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  sub_21629686C(a1, a2, 1);
}

void sub_2162DF154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  sub_21626012C((void **)va1);
  sub_21629D64C((uint64_t *)va, 0);
  sub_216297064(v2);
  _Unwind_Resume(a1);
}

void *sub_2162DF264(void *a1)
{
  *a1 = &unk_26C6C1238;
  uint64_t v2 = (const void *)a1[16];
  if (v2) {
    _Block_release(v2);
  }

  return sub_216297064(a1);
}

uint64_t sub_2162DF2CC()
{
  return 500;
}

uint64_t sub_2162DF2D4()
{
  return 600;
}

BOOL sub_2162DF2DC(uint64_t *a1)
{
  BOOL v2 = sub_216297164(a1);
  if (v2)
  {
    CFArrayRef v3 = (const __CFArray *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 160))(a1, a1[5]);
    if (v3)
    {
      CFArrayRef v4 = v3;
      CFIndex Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0; i != v6; ++i)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
          sub_21625922C((uint64_t)ValueAtIndex, v9, v10);
        }
      }
      CFRelease(v4);
    }
  }
  return v2;
}

uint64_t sub_2162DF380(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t AnalysisString = MecabraCandidateGetAnalysisString(a2, (const char *)a2, a3);
  uint64_t Surface = MecabraCandidateGetSurface(a2, v6, v7);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104);

  return v9(a1, AnalysisString, Surface);
}

uint64_t sub_2162DF3FC(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  if (*(void *)(a1 + 8))
  {
    if (a2)
    {
      uint64_t v3 = *(void *)(a1 + 128);
      if (v3)
      {
        if ((*(uint64_t (**)(void))(v3 + 16))())
        {
          v8[0] = 0;
          v8[1] = 0;
          uint64_t v7 = v8;
          sub_21610B834(&__p, off_26797C588);
          sub_216221EB8((int)&v7, a3);
        }
      }
    }
  }
  return 0;
}

void sub_2162DF518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_2161936EC(v21 - 64, *(void **)(v21 - 56));
  _Unwind_Resume(a1);
}

void sub_2162DF55C(uint64_t a1, uint64_t *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E4D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E4D0))
  {
    sub_21610B834(&qword_26797E4E0, off_26797C580[0]);
    dword_26797E4F8 = 0;
    word_26797E4FC = 1;
    byte_26797E4FE = 0;
    sub_21610B834(qword_26797E500, off_26797C588);
    *(int *)((char *)&dword_26797E518 + 3) = 0;
    dword_26797E518 = 0;
    __cxa_atexit((void (*)(void *))sub_2162E04B4, 0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E4D0);
  }
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  sub_21629D1F4((char *)&v3, &qword_26797E4E0, &xmmword_26797E520, 2uLL);
  sub_21618B7D8(a2);
  *(_OWORD *)a2 = v3;
  a2[2] = v4;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  BOOL v5 = (void **)&v3;
  sub_216175BF4(&v5);
}

void sub_2162DF670(_Unwind_Exception *a1)
{
  if (byte_26797E4F7 < 0) {
    operator delete((void *)qword_26797E4E0);
  }
  __cxa_guard_abort(&qword_26797E4D0);
  _Unwind_Resume(a1);
}

void sub_2162DF6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      v5[0] = 0;
      v5[1] = 0;
      uint64_t v4 = v5;
      CFStringRef v3 = *(const __CFString **)(a3 + 8);
      memset(&__p, 0, sizeof(__p));
      sub_2161B4568(&__p, off_26797C580[0]);
      sub_216221EB8((int)&v4, v3);
    }
  }
}

void sub_2162DF770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

BOOL sub_2162DF7A0(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(void *, void, uint64_t))(*a1 + 208))(a1, a1[1], a2);
  }
  return v2 != 0;
}

void sub_2162DF7FC(void *a1, uint64_t a2)
{
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  uint64_t v6 = a1[16];
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    CFStringRef v8 = (const __CFString *)(*(uint64_t (**)(void))(v6 + 16))();
    CFStringRef v9 = v8;
    v11[4] = v8;
    if (v8) {
      BOOL v10 = v4 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      if (CFStringGetLength(v8) >= 1 && CFStringGetLength(v4) >= 1)
      {
        sub_21629D058(v11, v9, v4, 1);
        v11[0] = &unk_26C6BD3B0;
        (*(void (**)(void *, void *))(*a1 + 216))(a1, v11);
        sub_21629D0B8(v11);
      }
      goto LABEL_15;
    }
    if (v8) {
LABEL_15:
    }
      CFRelease(v9);
  }
}

void sub_2162DF950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_21629D0B8((uint64_t *)va);
  sub_2161868BC((const void **)va1, 0);
  _Unwind_Resume(a1);
}

__CFString *sub_2162DF984()
{
  return @"DynamicPhraseLexicon_zh_Hans_Stroke.db";
}

__CFString *sub_2162DF990()
{
  return @"DynamicPhraseLexicon_zh_Hant_Sucheng.db";
}

__CFString *sub_2162DF99C()
{
  return @"DynamicPhraseLexicon_yue_Hant_Sucheng.db";
}

__CFString *sub_2162DF9A8()
{
  return @"DynamicPhraseLexicon_zh_Hant_Stroke.db";
}

__CFString *sub_2162DF9B4()
{
  return @"DynamicPhraseLexicon_yue_Hant_Stroke.db";
}

void sub_2162DF9C0(uint64_t a1, const void *a2)
{
}

void sub_2162DFB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21626012C((void **)va);
  sub_2162DF264(v2);
  _Unwind_Resume(a1);
}

void *sub_2162DFB54(void *a1)
{
  *a1 = &unk_26C6C0110;
  uint64_t v2 = (const void *)a1[17];
  if (v2) {
    _Block_release(v2);
  }

  return sub_2162DF264(a1);
}

void sub_2162DFBB8(void *a1)
{
  sub_2162DFB54(a1);

  JUMPOUT(0x2166CA800);
}

__CFString *sub_2162DFBF0()
{
  return @"DynamicPhraseLexicon_zh_Hans_Wubixing_v2.db";
}

void sub_2162DFBFC(void *a1, uint64_t a2)
{
  if (!a1[1]) {
    return;
  }
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  uint64_t v6 = a1[16];
  if (!v6 || v5 == 0) {
    return;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(v6 + 16))();
  uint64_t v14 = (void *)v8;
  if (!v8) {
    return;
  }
  CFStringRef v9 = (const void *)v8;
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) & 0x10000) != 0)
  {
    int v11 = (uint64_t (**)(CFTypeRef, const void *, uint64_t))a1[17];
    if (!v11) {
      goto LABEL_12;
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    BOOL v10 = (uint64_t (**)(CFTypeRef, const void *, uint64_t))v11[2](v11, v9, v12);
  }
  else
  {
    BOOL v10 = (uint64_t (**)(CFTypeRef, const void *, uint64_t))CFRetain(v9);
  }
  int v11 = v10;
LABEL_12:
  CFRelease(v9);
  v15[2] = v11;
  if (v11 && v4)
  {
    if (CFStringGetLength((CFStringRef)v11) >= 1 && CFStringGetLength(v4) >= 1)
    {
      v15[0] = 0;
      v15[1] = 0;
      uint64_t v14 = v15;
      sub_21610B834(&__p, off_26797C580[0]);
      sub_216221EB8((int)&v14, (CFStringRef)v11);
    }
  }
  else if (!v11)
  {
    return;
  }
  CFRelease(v11);
}

void sub_2162DFEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, const void *a19)
{
}

void sub_2162DFEFC(uint64_t a1, uint64_t *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E4D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E4D8))
  {
    sub_21610B834(&xmmword_26797E520, off_26797C580[0]);
    dword_26797E538 = 0;
    word_26797E53C = 1;
    byte_26797E53E = 0;
    sub_21610B834(qword_26797E540, off_26797C588);
    *(int *)((char *)&dword_26797E558 + 3) = 0;
    dword_26797E558 = 0;
    sub_21610B834(qword_26797E560, off_26797C570);
    dword_26797E578 = 1;
    word_26797E57C = 0;
    byte_26797E57E = 0;
    __cxa_atexit((void (*)(void *))sub_2162E04FC, 0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E4D8);
  }
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  sub_21629D1F4((char *)&v3, &xmmword_26797E520, (long long *)&qword_26797E580, 3uLL);
  sub_21618B7D8(a2);
  *(_OWORD *)a2 = v3;
  a2[2] = v4;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  uint64_t v5 = (void **)&v3;
  sub_216175BF4(&v5);
}

void sub_2162E0050(_Unwind_Exception *a1)
{
}

CFArrayRef sub_2162E008C(int a1, CFURLRef url)
{
  if (!url) {
    return 0;
  }
  values = sub_2161E27E0(url, @"DynamicPhraseLexicon_zh_Hans_Wubixing.db");
  if (!values) {
    return 0;
  }
  CFArrayRef v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)&values, 1, MEMORY[0x263EFFF70]);
  if (values) {
    CFRelease(values);
  }
  return v2;
}

void sub_2162E0110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2162E012C(void *a1)
{
  sub_2162DF264(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162E0164()
{
  return 7;
}

__CFString *sub_2162E016C()
{
  return @"LearningDictionary";
}

uint64_t sub_2162E0178()
{
  return 1;
}

uint64_t sub_2162E0180()
{
  return 0;
}

__CFString *sub_2162E0188()
{
  return @"TapTyping";
}

void sub_2162E019C(void *a1)
{
  sub_2162DF264(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162E01D4()
{
  return 9;
}

void sub_2162E01E0(void *a1)
{
  sub_2162DF264(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162E0218()
{
  return 16;
}

void sub_2162E0224(void *a1)
{
  sub_2162DF264(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162E025C()
{
  return 8;
}

void sub_2162E0268(void *a1)
{
  sub_2162DF264(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162E02A0()
{
  return 15;
}

uint64_t sub_2162E02A8()
{
  return 10;
}

void sub_2162E02B0(void *a1)
{
  sub_21629D0B8(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2162E02EC()
{
}

void *sub_2162E0300(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C7C50;
  result[1] = v3;
  return result;
}

uint64_t sub_2162E0348(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C7C50;
  a2[1] = v2;
  return result;
}

uint64_t sub_2162E0374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 152))();
}

uint64_t sub_2162E039C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC840)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162E03DC()
{
  return &unk_26C6BC840;
}

void sub_2162E03EC()
{
}

void *sub_2162E0400()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6C7CA8;
  return result;
}

void sub_2162E0438(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C7CA8;
}

uint64_t sub_2162E0460()
{
  return 0;
}

uint64_t sub_2162E0468(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC850)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162E04A8()
{
  return &unk_26C6BC850;
}

void sub_2162E04B4()
{
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    if (*((char *)&unk_26797E4D0 + i + 71) < 0) {
      operator delete(*(void **)((char *)&unk_26797E4D0 + i + 48));
    }
  }
}

void sub_2162E04FC()
{
  for (uint64_t i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(qword_26797E4D0[i + 20]) < 0) {
      operator delete((void *)qword_26797E4D0[i + 18]);
    }
  }
}

CFIndex sub_2162E0544(CFIndex a1, CFStringRef theString, int a3)
{
  CFIndex v3 = a1;
  if (theString)
  {
    CFIndex v6 = 0;
    if (a3) {
      CFStringCompareFlags v7 = 0;
    }
    else {
      CFStringCompareFlags v7 = 4;
    }
    CFIndex v8 = a1;
    if ((a3 & 1) == 0)
    {
      CFIndex v8 = CFStringGetLength(theString) - a1;
      CFIndex v6 = v3;
    }
    CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
    v14.locatiouint64_t n = v6;
    v14.CFIndex length = v8;
    int CharacterFromSet = CFStringFindCharacterFromSet(theString, Predefined, v14, v7, &v13);
    CFIndex length = v13.length;
    if (a3) {
      CFIndex length = 0;
    }
    if (CharacterFromSet) {
      return length + v13.location;
    }
  }
  return v3;
}

void sub_2162E05F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return;
  }
  if (*(_DWORD *)(a1 + 112) != 3) {
    return;
  }
  CFIndex v6 = sub_21628F274(a2);
  uint64_t v23 = v6;
  CFStringRef v7 = *(const __CFString **)(a2 + 88);
  if (!((unint64_t)v6 | (unint64_t)v7)) {
    return;
  }
  CFStringRef v8 = v6;
  CFArrayRef Mutable = CFStringCreateMutable(0, 0);
  BOOL v10 = Mutable;
  uint64_t v22 = Mutable;
  if (v8) {
    CFStringAppend(Mutable, v8);
  }
  if (v7) {
    CFStringAppend(v10, v7);
  }
  if (!v8)
  {
    CFIndex Length = 0;
    if (v7) {
      goto LABEL_10;
    }
LABEL_12:
    CFIndex v12 = 0;
    goto LABEL_13;
  }
  CFIndex Length = CFStringGetLength(v8);
  if (!v7) {
    goto LABEL_12;
  }
LABEL_10:
  CFIndex v12 = CFStringGetLength(v7);
LABEL_13:
  uint64_t v13 = *(void *)(a1 + 120);
  if (Length >= v13) {
    CFIndex v14 = Length - v13;
  }
  else {
    CFIndex v14 = 0;
  }
  CFIndex v15 = sub_2162E0544(v14, v8, 0);
  if (v12 >= v13) {
    CFIndex v16 = v13;
  }
  else {
    CFIndex v16 = v12;
  }
  v24.CFIndex length = Length - v15 + sub_2162E0544(v16, v7, 1);
  v24.locatiouint64_t n = v15;
  CFStringRef v17 = CFStringCreateWithSubstring(0, v10, v24);
  CFStringRef v21 = v17;
  sub_2161E212C(v17, (UniChar **)&__p);
  if (v8) {
    CFIndex v18 = CFStringGetLength(v8);
  }
  else {
    CFIndex v18 = 0;
  }
  sub_21620D550(a1, (uint64_t)__p, (v20 - (unsigned char *)__p) >> 1, v18 - v15, a3);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_2162E0798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, const void *a12, const void *a13, const void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2161868BC(&a12, 0);
  sub_2161B5B5C(&a13, 0);
  sub_2161868BC(&a14, 0);
  _Unwind_Resume(a1);
}

void sub_2162E07FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26C6BE8C8;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (a2 != a1) {
    sub_2162E0FA4(a2 + 8, *(long long ***)(a1 + 8), *(long long ***)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  }
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 32);
}

void sub_2162E0890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *uint64_t v2 = v3;
  sub_2161C4FA0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162E08AC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BE8C8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2161C4FA0(&v3);
  return a1;
}

unint64_t sub_2162E0904(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
}

unint64_t sub_2162E0920(uint64_t a1, uint64_t a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 24 * a2 + 8) - *(void *)(*(void *)(a1 + 8) + 24 * a2)) >> 4);
}

double sub_2162E0948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 48 * a3 + 24);
}

uint64_t sub_2162E0968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 48 * a3 + 32);
}

char *sub_2162E0988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (char *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 48 * a3);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

BOOL sub_2162E09B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 24 * a2);
  return *(unsigned __int8 *)(v3 + 48 * a3 + 40) <= 4u
      && *(unsigned __int8 *)(v3 + 48 * a3 + 41) != 255
      && *(unsigned __int8 *)(v3 + 48 * a3 + 42) != 255
      && *(unsigned char *)(v3 + 48 * a3 + 43) == 0;
}

void *sub_2162E0A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[4] = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 24 * a2) + 48 * a3 + 40);
  v6[0] = &unk_26C6F6270;
  v6[1] = a4;
  void v6[3] = v6;
  sub_2162C6104((uint64_t)&off_26B4ABBC8, (unsigned __int8 *)&v5, (uint64_t)v6);
  return sub_2162E21FC(v6);
}

void sub_2162E0AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162E21FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_2162E0AEC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v5) >> 3) <= a2) {
    return 1;
  }
  uint64_t v6 = *(void *)(v5 + 24 * a2);
  CFStringRef v7 = (unsigned __int16 *)(v6 + 48 * a3);
  uint64_t v8 = *(void *)(v5 + 24 * a4);
  int v9 = *((unsigned __int8 *)v7 + 46);
  if (v9 != 255)
  {
    int v10 = *(unsigned __int8 *)(v8 + 48 * a5 + 46);
    if (v10 != 255 && v9 != v10 && *(unsigned __int8 *)(v6 + 48 * a3 + 47) == *(unsigned __int8 *)(v8 + 48 * a5 + 47)) {
      return 0;
    }
  }
  if (*(void *)(v6 + 48 * a3 + 32) != 1) {
    return 1;
  }
  int v12 = *((char *)v7 + 23);
  if (v12 < 0)
  {
    if (*((void *)v7 + 1) != 1) {
      return 1;
    }
    CFStringRef v7 = *(unsigned __int16 **)v7;
  }
  else if (v12 != 1)
  {
    return 1;
  }
  int v13 = *v7;
  if (v13 != 12387)
  {
    if (v13 == 12435)
    {
      int v16 = *(unsigned __int16 *)(v8 + 48 * a5 + 44);
      if (!*(_WORD *)(v8 + 48 * a5 + 44))
      {
        CFStringRef v17 = (unsigned __int16 *)(v8 + 48 * a5);
        if (*((char *)v17 + 23) < 0) {
          CFStringRef v17 = *(unsigned __int16 **)v17;
        }
        int v16 = *v17;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E588, memory_order_acquire) & 1) == 0)
      {
        int v21 = v16;
        int v20 = __cxa_guard_acquire(&qword_26797E588);
        int v16 = v21;
        if (v20)
        {
          qword_26797E580 = (uint64_t)L"'aeinouyxa";
          __cxa_guard_release(&qword_26797E588);
          int v16 = v21;
        }
      }
      uint64_t v18 = 0;
      uint64_t v19 = qword_26797E580 + 16;
      while (*(unsigned __int16 *)(qword_26797E580 + v18) != v16)
      {
        v18 += 2;
        if (v18 == 16) {
          return v19 - qword_26797E580 == 16;
        }
      }
      uint64_t v19 = qword_26797E580 + v18;
      return v19 - qword_26797E580 == 16;
    }
    return 1;
  }
  return *(unsigned __int16 *)(v6 + 48 * a3 + 44) == *(unsigned __int16 *)(v8 + 48 * a5 + 44);
}

void sub_2162E0CB0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_2162E1834((char **)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *(void *)a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      sub_2161C5014(&v8);
    }
    *(void *)(a1 + 8) = v7;
  }
}

uint64_t *sub_2162E0D58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a2 != (uint64_t *)a3)
  {
    sub_2162E1A3C((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    unint64_t v6 = v5;
    uint64_t v7 = *(void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        int v10 = v7;
        sub_2161C5014(&v10);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void *sub_2162E0DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  sub_2162E2280((uint64_t)v10, a3);
  BOOL v5 = (uint64_t *)(v4 + 24 * a2);
  uint64_t v6 = v5[1];
  uint64_t v7 = *v5;
  sub_2162E2280((uint64_t)v11, (uint64_t)v10);
  uint64_t v8 = sub_2162E1B30(v7, v6, (uint64_t)v11);
  sub_2162E1AB4((uint64_t)v5, v8, v5[1]);
  sub_2162E2318(v11);
  return sub_2162E2318(v10);
}

void sub_2162E0E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2162E2318((uint64_t *)va1);
  sub_2162E2318((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162E0ECC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BE8C8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2161C4FA0(&v3);
  return MEMORY[0x2166CA800](a1, 0x10A1C407F0BD61ELL);
}

char *sub_2162E0F38(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2162E0F8C();
  }
  uint64_t result = (char *)sub_216129BFC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_2162E0F8C()
{
}

void sub_2162E0FA4(uint64_t a1, long long **a2, long long **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_2161DDBC0((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_2162E0F8C();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2162E0F38((void *)a1, v11);
    uint64_t v12 = sub_2162E1120(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    int v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    sub_2162E1454(a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_2162E1120(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  uint64_t v14 = sub_2162E1454(a2, a3, (uint64_t)v9);
  CFIndex v15 = *(void ***)(a1 + 8);
  while (v15 != (void **)v14)
  {
    v15 -= 3;
    int v16 = v15;
    sub_2161C5014(&v16);
  }
  *(void *)(a1 + 8) = v14;
}

void sub_2162E1110(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2162E1118(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2162E1120(uint64_t a1, long long **a2, long long **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_2162E11E0((char *)v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      uint64_t v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_2162E13F0((uint64_t)v8);
  return v4;
}

void sub_2162E11CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_2162E11E0(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2162E1268(result, a4);
    uint64_t result = sub_2162E12BC((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_2162E1248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2161C5014(&a9);
  _Unwind_Resume(a1);
}

char *sub_2162E1268(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_21610CB04();
  }
  uint64_t result = (char *)sub_21617AF50((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

char *sub_2162E12BC(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  int v13 = __dst;
  uint64_t v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_2161984AC(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v8 = v14;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
        uint64_t v8 = v4;
      }
      long long v9 = *(long long *)((char *)v6 + 24);
      *((void *)v4 + 5) = *((void *)v6 + 5);
      *(_OWORD *)(v4 + 24) = v9;
      v6 += 3;
      uint64_t v4 = v8 + 48;
      uint64_t v14 = v8 + 48;
    }
    while (v6 != a3);
  }
  char v12 = 1;
  sub_2162E1390((uint64_t)v11);
  return v4;
}

void sub_2162E137C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2162E1390(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 48)
    {
      if (*(char *)(i - 25) < 0) {
        operator delete(*(void **)(i - 48));
      }
    }
  }
  return a1;
}

uint64_t sub_2162E13F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void ****)(a1 + 8);
    uint64_t v4 = **(void ****)(a1 + 16);
    while (v4 != v3)
    {
      v4 -= 3;
      uint64_t v5 = v4;
      sub_2161C5014(&v5);
    }
  }
  return a1;
}

uint64_t sub_2162E1454(long long **a1, long long **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (v5 != (long long **)a3) {
        sub_2162E14C8(a3, *v5, v5[1], 0xAAAAAAAAAAAAAAABLL * (v5[1] - *v5));
      }
      v5 += 3;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_2162E14C8(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_2162E1640((uint64_t *)a1);
    if (a4 > 0x555555555555555) {
      sub_21610CB04();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2162E1268((void *)a1, v11);
    char v12 = sub_2162E12BC(v8, a2, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 8) - v9) >> 4) < a4)
  {
    int v13 = &a2[(*(void *)(a1 + 8) - v9) >> 4];
    sub_2162E167C((uint64_t)a2, (uint64_t)v13, v9);
    char v12 = sub_2162E12BC(v8, v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  uint64_t v14 = sub_2162E167C((uint64_t)a2, (uint64_t)a3, v9);
  for (uint64_t i = *(void *)(a1 + 8); i != v14; i -= 48)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  *(void *)(a1 + 8) = v14;
}

void sub_2162E1630(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2162E1638(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2162E1640(uint64_t *a1)
{
  if (*a1)
  {
    sub_2161C5068(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_2162E167C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_2162E16E4((void **)a3, (void **)v5);
      uint64_t v6 = *(void *)(v5 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(v5 + 24);
      *(void *)(a3 + 4sub_2161868BC(&a9, 0) = v6;
      a3 += 48;
      v5 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

void **sub_2162E16E4(void **result, void **a2)
{
  if (result != a2)
  {
    if (*((char *)result + 23) < 0)
    {
      unint64_t v3 = (unint64_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        unint64_t v4 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        unint64_t v4 = v3;
      }
      return sub_2162E17A8(result, a2, v4);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)sub_2162E1734(result, *a2, (unint64_t)a2[1]);
    }
    else
    {
      long long v2 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)uint64_t result = v2;
    }
  }
  return result;
}

unsigned char *sub_2162E1734(unsigned char *__dst, void *__src, unint64_t a3)
{
  BOOL v5 = a3 > 0xA;
  unint64_t v6 = a3 - 10;
  if (v5)
  {
    sub_2161982E8((uint64_t)__dst, 0xAuLL, v6, __dst[23] & 0x7F, 0, __dst[23] & 0x7F, a3, __src);
  }
  else
  {
    __dst[23] = a3;
    if (a3) {
      memmove(__dst, __src, 2 * a3);
    }
    *(_WORD *)&__dst[2 * a3] = 0;
  }
  return __dst;
}

void **sub_2162E17A8(void **a1, void *__src, unint64_t a3)
{
  unint64_t v5 = (unint64_t)a1[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= a3)
  {
    sub_2161982E8((uint64_t)a1, v5 - 1, a3 - v5 + 1, (uint64_t)a1[1], 0, (uint64_t)a1[1], a3, __src);
  }
  else
  {
    unint64_t v6 = *a1;
    a1[1] = (void *)a3;
    if (a3) {
      memmove(v6, __src, 2 * a3);
    }
    *((_WORD *)v6 + a3) = 0;
  }
  return a1;
}

void sub_2162E1834(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2162E0F8C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v26 = v4;
    if (v11) {
      char v12 = (char *)sub_216129BFC(v4, v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v14 = &v12[24 * v8];
    CFIndex v15 = &v12[24 * v11];
    uint64_t v25 = v15;
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    CFStringRef v17 = &v14[v16];
    v24.i64[1] = (uint64_t)&v14[v16];
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        *((void *)v14 - 3) = 0;
        *((void *)v14 - 2) = 0;
        v14 -= 24;
        *((void *)v14 + 2) = 0;
        long long v20 = *(_OWORD *)(v18 - 24);
        v18 -= 24;
        *(_OWORD *)uint64_t v14 = v20;
        *((void *)v14 + 2) = *((void *)v18 + 2);
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
      CFStringRef v17 = (char *)v24.i64[1];
      CFIndex v15 = v25;
    }
    *a1 = v14;
    a1[1] = v17;
    int64x2_t v24 = v21;
    uint64_t v22 = a1[2];
    a1[2] = v15;
    uint64_t v25 = v22;
    uint64_t v23 = v21.i64[0];
    sub_2162E19DC((uint64_t)&v23);
  }
}

uint64_t sub_2162E19DC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    unint64_t v6 = v4;
    sub_2161C5014(&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2162E1A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_2162E1640(a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    a4[2] = *(void *)(v5 + 16);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    a4 += 3;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_2162E1AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_2162E1C28(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 25) < 0) {
          operator delete(*(void **)(v7 - 48));
        }
        v7 -= 48;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_2162E1B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  while (1)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    if (!v6) {
LABEL_16:
    }
      sub_21610B7AC();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v5)) {
      break;
    }
    v5 += 48;
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 == a2) {
    return a2;
  }
  for (uint64_t i = v5 + 48; i != a2; i += 48)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    if (!v8) {
      goto LABEL_16;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, i) & 1) == 0)
    {
      sub_2162E16E4((void **)v5, (void **)i);
      uint64_t v9 = *(void *)(i + 40);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(i + 24);
      *(void *)(v5 + 4sub_2161868BC(&a9, 0) = v9;
      v5 += 48;
    }
  }
  return v5;
}

uint64_t sub_2162E1C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    sub_2162E16E4((void **)a3, (void **)v4);
    uint64_t v6 = *(void *)(v4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(v4 + 24);
    *(void *)(a3 + 4sub_2161868BC(&a9, 0) = v6;
    a3 += 48;
    v4 += 48;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_2162E1C9C(void *a1, uint64_t a2, long long **a3, long long **a4, uint64_t a5)
{
  uint64_t v5 = (void *)*a1;
  uint64_t v6 = (a2 - *a1) / 24;
  uint64_t v7 = *a1 + 24 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  char v12 = a1 + 2;
  uint64_t v11 = a1[2];
  unint64_t v13 = a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v13) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v7) >> 3)) >= a5)
    {
      uint64_t v19 = &a3[3 * a5];
      uint64_t v20 = a1[1];
LABEL_30:
      uint64_t v35 = v7 + 24 * a5;
      unint64_t v36 = v20 - 24 * a5;
      BOOL v37 = (void *)v20;
      if (v36 < v13)
      {
        BOOL v37 = (void *)v20;
        do
        {
          void *v37 = 0;
          v37[1] = 0;
          v37[2] = 0;
          *(_OWORD *)BOOL v37 = *(_OWORD *)v36;
          v37[2] = *(void *)(v36 + 16);
          *(void *)unint64_t v36 = 0;
          *(void *)(v36 + 8) = 0;
          *(void *)(v36 + 16) = 0;
          v37 += 3;
          v36 += 24;
        }
        while (v36 < v13);
      }
      a1[1] = v37;
      if (v20 != v35)
      {
        unint64_t v38 = 0;
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v35) >> 3);
        unint64_t v40 = &v5[3 * v39 + 3 * v6];
        uint64_t v41 = -24 * v39;
        do
        {
          unint64_t v42 = &v40[v38 / 8];
          unint64_t v43 = v20 + v38;
          sub_2162E1640((uint64_t *)(v20 + v38 - 24));
          *(_OWORD *)(v43 - 24) = *(_OWORD *)&v40[v38 / 8 - 3];
          *(void *)(v43 - 8) = v40[v38 / 8 - 1];
          *(v42 - 3) = 0;
          *(v42 - 2) = 0;
          *(v42 - 1) = 0;
          v38 -= 24;
        }
        while (v41 != v38);
      }
      if (v19 != v9)
      {
        uint64_t v44 = v7;
        do
        {
          if (v9 != (long long **)v44) {
            sub_2162E14C8(v44, *v9, v9[1], 0xAAAAAAAAAAAAAAABLL * (v9[1] - *v9));
          }
          v9 += 3;
          v44 += 24;
        }
        while (v9 != v19);
      }
      return v7;
    }
    CFAllocatorRef v47 = a1 + 2;
    v51[0] = v13;
    uint64_t v54 = (void *)v13;
    uint64_t v19 = &a3[(uint64_t)(v13 - v7) >> 3];
    *(void *)&long long v48 = &v54;
    *((void *)&v48 + 1) = v51;
    LOBYTE(v49) = 0;
    if (v19 == a4)
    {
      uint64_t v20 = v13;
    }
    else
    {
      uint64_t v46 = v5;
      uint64_t v20 = v13;
      int64x2_t v21 = &a3[(uint64_t)(v13 - v7) >> 3];
      do
      {
        *(void *)uint64_t v20 = 0;
        *(void *)(v20 + 8) = 0;
        *(void *)(v20 + 16) = 0;
        sub_2162E11E0((char *)v20, *v21, v21[1], 0xAAAAAAAAAAAAAAABLL * (v21[1] - *v21));
        uint64_t v20 = v51[0] + 24;
        v51[0] += 24;
        v21 += 3;
      }
      while (v21 != a4);
      uint64_t v5 = v46;
    }
    LOBYTE(v49) = 1;
    sub_2162E13F0((uint64_t)&v47);
    a1[1] = v20;
    if ((uint64_t)(v13 - v7) >= 1) {
      goto LABEL_30;
    }
    return v7;
  }
  unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v13 - (void)v5) >> 3);
  if (v14 > 0xAAAAAAAAAAAAAAALL) {
    sub_2162E0F8C();
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 3);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0x555555555555555) {
    unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v16 = v14;
  }
  int v50 = a1 + 2;
  if (v16) {
    CFStringRef v17 = (char *)sub_216129BFC((uint64_t)(a1 + 2), v16);
  }
  else {
    CFStringRef v17 = 0;
  }
  uint64_t v22 = &v17[24 * v6];
  CFAllocatorRef v47 = v17;
  *(void *)&long long v48 = v22;
  *((void *)&v48 + 1) = v22;
  uint64_t v49 = &v17[24 * v16];
  uint64_t v23 = 3 * a5;
  int64x2_t v24 = &v22[24 * a5];
  uint64_t v25 = 8 * v23;
  do
  {
    *(void *)uint64_t v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = 0;
    sub_2162E11E0(v22, *v9, v9[1], 0xAAAAAAAAAAAAAAABLL * (v9[1] - *v9));
    v22 += 24;
    v9 += 3;
    v25 -= 24;
  }
  while (v25);
  *((void *)&v48 + 1) = v24;
  uint64_t v26 = v48;
  BOOL v27 = (void *)*a1;
  uint64_t v28 = v48;
  if (*a1 != v7)
  {
    uint64_t v28 = v48;
    uint64_t v29 = (void *)v7;
    do
    {
      *(void *)(v28 - 24) = 0;
      *(void *)(v28 - 16) = 0;
      v28 -= 24;
      *(void *)(v28 + 16) = 0;
      long long v30 = *(_OWORD *)(v29 - 3);
      v29 -= 3;
      *(_OWORD *)uint64_t v28 = v30;
      *(void *)(v28 + 16) = v29[2];
      void *v29 = 0;
      v29[1] = 0;
      v29[2] = 0;
    }
    while (v29 != v27);
    int64x2_t v24 = (char *)*((void *)&v48 + 1);
  }
  *(void *)&long long v48 = v28;
  uint64_t v31 = a1[1];
  uint64_t v54 = v24;
  char v53 = v24;
  v51[0] = v12;
  v51[1] = &v53;
  v51[2] = &v54;
  if (v31 != v7)
  {
    do
    {
      *(void *)int64x2_t v24 = 0;
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 2) = 0;
      *(_OWORD *)int64x2_t v24 = *(_OWORD *)v7;
      *((void *)v24 + 2) = *(void *)(v7 + 16);
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      v24 += 24;
      v7 += 24;
    }
    while (v7 != v31);
    uint64_t v54 = v24;
  }
  char v52 = 1;
  sub_2162E13F0((uint64_t)v51);
  long long v32 = *(_OWORD *)a1;
  BOOL v33 = v49;
  *a1 = v48;
  a1[1] = v24;
  long long v48 = v32;
  CFStringRef v34 = (char *)a1[2];
  a1[2] = v33;
  uint64_t v49 = v34;
  CFAllocatorRef v47 = (void *)v32;
  sub_2162E19DC((uint64_t)&v47);
  return v26;
}

void sub_2162E20C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2162E13F0((uint64_t)va);
  *(void *)(v4 + 8) = v5;
  _Unwind_Resume(a1);
}

void sub_2162E20F0()
{
}

void *sub_2162E2104(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6F6270;
  result[1] = v3;
  return result;
}

uint64_t sub_2162E214C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F6270;
  a2[1] = v2;
  return result;
}

uint64_t sub_2162E2178(uint64_t a1, _WORD **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *a2;
  if (*v6)
  {
    uint64_t v7 = 0;
    do
      uint64_t v8 = v7 + 1;
    while (v6[++v7]);
  }
  else
  {
    uint64_t v8 = 0;
  }
  return sub_216198804(v5, (uint64_t)v6, v8, a5);
}

uint64_t sub_2162E21B0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F62D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162E21F0()
{
  return &unk_26C6F62D0;
}

void *sub_2162E21FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_2162E2280(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_2162E2318(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2162E239C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
  operator new();
}

void sub_2162E27DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  a16 = &a20;
  sub_2162E3E14((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_2162E2898(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  uint64_t v6 = (void *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v26 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_216188754(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = (void *)(v12 + 8 * v9);
    unint64_t v15 = v12 + 8 * v13;
    unint64_t v25 = v15;
    uint64_t v16 = *a2;
    *a2 = 0;
    void *v14 = v16;
    uint64_t v8 = (uint64_t)(v14 + 1);
    v24.i64[1] = (uint64_t)(v14 + 1);
    uint64_t v18 = (void *)*a1;
    CFStringRef v17 = (void *)a1[1];
    if (v17 == (void *)*a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *--v17;
        *CFStringRef v17 = 0;
        *--unint64_t v14 = v19;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      uint64_t v8 = v24.i64[1];
      unint64_t v15 = v25;
    }
    *a1 = (uint64_t)v14;
    a1[1] = v8;
    int64x2_t v24 = v20;
    uint64_t v21 = a1[2];
    a1[2] = v15;
    unint64_t v25 = v21;
    uint64_t v23 = v20.i64[0];
    sub_2162E3DC0((uint64_t)&v23);
  }
  else
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    *uint64_t v6 = v7;
    uint64_t v8 = (uint64_t)(v6 + 1);
  }
  a1[1] = v8;
  return sub_2162E3F50(*a1, v8, (v8 - *a1) >> 3);
}

void sub_2162E29C8(float ***a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  int v51 = **(_DWORD **)(a2 + 8);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (*(void *)a4)
  {
    unint64_t v50 = 0;
    do
    {
      uint64_t v8 = *a3;
      uint64_t v9 = a3[1];
      if (*a3 == v9) {
        break;
      }
      int64x2_t v58 = 0uLL;
      int v59 = 0;
      std::string __p = 0;
      char v56 = 0;
      uint64_t v57 = 0;
      uint64_t v10 = v9 - v8;
      if (*(void *)(a4 + 8) >= (unint64_t)(v10 >> 3)) {
        unint64_t v11 = v10 >> 3;
      }
      else {
        unint64_t v11 = *(void *)(a4 + 8);
      }
      if (v11)
      {
        if (!(v11 >> 61))
        {
          __int16 v63 = &v59;
          unint64_t v12 = (char *)sub_216188754(v11);
          unint64_t v14 = (void *)v58.i64[1];
          unint64_t v15 = (void *)v58.i64[0];
          if (v58.i64[1] == v58.i64[0])
          {
            int64x2_t v18 = vdupq_n_s64(v58.u64[1]);
            uint64_t v16 = v12;
          }
          else
          {
            uint64_t v16 = v12;
            do
            {
              uint64_t v17 = *--v14;
              void *v14 = 0;
              *((void *)v16 - 1) = v17;
              v16 -= 8;
            }
            while (v14 != v15);
            int64x2_t v18 = v58;
          }
          v58.i64[0] = (uint64_t)v16;
          v58.i64[1] = (uint64_t)v12;
          int64x2_t v61 = v18;
          uint64_t v19 = v59;
          int v59 = &v12[8 * v13];
          __int16 v62 = v19;
          CFStringRef v60 = (int64x2_t *)v18.i64[0];
          sub_2162E3DC0((uint64_t)&v60);
          int64x2_t v20 = __p;
          if (v11 > (v57 - (unsigned char *)__p) >> 3)
          {
            uint64_t v21 = v56;
            uint64_t v22 = (char *)sub_216188754(v11);
            unint64_t v25 = (char *)__p;
            int64x2_t v24 = v56;
            uint64_t v26 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
            if (v56 != __p)
            {
              do
              {
                uint64_t v27 = *((void *)v24 - 1);
                v24 -= 8;
                *((void *)v26 - 1) = v27;
                v26 -= 8;
              }
              while (v24 != v25);
              int64x2_t v24 = (char *)__p;
            }
            std::string __p = v26;
            char v56 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
            uint64_t v57 = &v22[8 * v23];
            if (v24) {
              operator delete(v24);
            }
          }
          (*(void (**)(void **__return_ptr))(**(void **)(*(void *)*a3 + 32) + 16))(v53);
          operator new();
        }
        sub_21610CB04();
      }
      (*(void (**)(void **__return_ptr))(**(void **)(a2 + 16) + 80))(v53);
      uint64_t v49 = v58.i64[0];
      if (v58.i64[1] != v58.i64[0])
      {
        unint64_t v28 = 0;
        do
        {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 16) + 96))(&v54);
          unint64_t v29 = *(void *)(a4 + 16);
          if (v29)
          {
            for (unint64_t i = 0; i < v29; ++i)
            {
              uint64_t v31 = (unsigned int *)((char *)v53[0] + 8 * i + 8 * v29 * v28);
              unsigned int v32 = *v31;
              float v33 = *((float *)v31 + 1);
              uint64_t v34 = *(void *)(*(void *)(*(void *)(a2 + 16) + 8) + 8);
              uint64_t v35 = (*(uint64_t (**)(uint64_t, void))(*(void *)v34 + 512))(v34, *v31);
              BOOL v37 = (void **)v35;
              unint64_t v38 = v36;
              if ((v51 & 0x2000) != 0 || !v36)
              {
LABEL_30:
                if (!sub_2162C4734(*(_DWORD **)(*(void *)(a2 + 16) + 8), v32))
                {
                  uint64_t v41 = 0;
                  CFStringRef v60 = (int64x2_t *)v37;
                  v61.i64[0] = v38;
                  do
                  {
                    uint64_t v42 = sub_21613F284((uint64_t *)&v60, (&off_26426E8C8)[v41], (int64_t)(&off_26426E8C8)[v41 + 1], 0);
                    if (v42 != -1) {
                      break;
                    }
                    BOOL v44 = v41 == 28;
                    v41 += 2;
                  }
                  while (!v44);
                  if (v42 == -1 && (v50 != *(void *)a4 - 1 || sub_2161BC240((uint64_t)v37, v38)))
                  {
                    if (v50) {
                      goto LABEL_41;
                    }
                    if (v38 != 3
                      || (*(unsigned __int16 *)v37 == 38626 ? (BOOL v44 = *((unsigned __int8 *)v37 + 2) == 129) : (BOOL v44 = 0),
                          !v44))
                    {
                      uint64_t v45 = *(void *)(a5 + 24);
                      CFStringRef v60 = (int64x2_t *)v37;
                      v61.i64[0] = v38;
                      if (!v45) {
                        sub_21610B7AC();
                      }
                      if ((*(unsigned int (**)(uint64_t, int64x2_t **))(*(void *)v45 + 48))(v45, &v60))
                      {
LABEL_41:
                        float v43 = v33 + **(float **)(v49 + 8 * v28);
                        if (*a1 == a1[1] || (float)(v43 / ***a1) <= *(float *)(a4 + 24))
                        {
                          (*(void (**)(uint64_t *__return_ptr))(*(void *)v54 + 16))(&v52);
                          operator new();
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                unint64_t v39 = v36;
                unint64_t v40 = (char *)v35;
                while (*v40 < 0)
                {
                  ++v40;
                  if (!--v39) {
                    goto LABEL_30;
                  }
                }
              }
              unint64_t v29 = *(void *)(a4 + 16);
            }
          }
          uint64_t v46 = v54;
          uint64_t v54 = 0;
          if (v46) {
            (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
          }
          ++v28;
          uint64_t v49 = v58.i64[0];
        }
        while (v28 < (v58.i64[1] - v58.i64[0]) >> 3);
      }
      if (v53[0])
      {
        v53[1] = v53[0];
        operator delete(v53[0]);
      }
      if (__p)
      {
        char v56 = (char *)__p;
        operator delete(__p);
      }
      CFStringRef v60 = &v58;
      sub_2162E3E14((void ***)&v60);
      ++v50;
    }
    while (v50 < *(void *)a4);
  }
}

void sub_2162E32D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *__p,uint64_t *a25,uint64_t a26,uint64_t a27)
{
  if (__p)
  {
    a25 = __p;
    operator delete(__p);
  }
  std::string __p = &a27;
  sub_2162E3E14((void ***)&__p);
  a27 = a13;
  sub_2162E3E14((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_2162E3460(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string::size_type *a6@<X8>)
{
  v48[4] = *MEMORY[0x263EF8340];
  long long v43 = 0uLL;
  uint64_t v44 = 0;
  uint64_t v9 = *(void **)a2;
  if (*(void *)(a2 + 8) != *(void *)a2)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 32))(*v9, a2);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(v10 + 8) + 8) + 512))(*(void *)(*(void *)(v10 + 8) + 8), v11);
    unint64_t v14 = v13;
    (*(void (**)(void **__return_ptr))(*(void *)*v9 + 16))(__p);
    sub_2161BC240(v12, v14);
    operator new();
  }
  sub_2162E40D0((uint64_t)v48, a5);
  sub_2162E29C8(&v41, a1, &v43, a4, (uint64_t)v48);
  sub_21618B8E8(v48);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3)
  {
    do
    {
      unint64_t v15 = v41;
      if (v41 == v42) {
        break;
      }
      if (*((unsigned char *)*v41 + 40))
      {
        sub_2162C3FCC(*(void *)(*(void *)(a1 + 16) + 8), &v45);
        uint64_t v16 = std::string::insert(&v45, 0, " ", 1uLL);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        std::string::size_type v40 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__wordUChar s[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        sub_2162C3FCC(*(void *)(*(void *)(a1 + 16) + 8), __p);
      }
      int64x2_t v18 = *v15;
      std::string::size_type v20 = a6[1];
      std::string::size_type v19 = a6[2];
      if (v20 >= v19)
      {
        uint64_t v22 = (uint64_t)(v20 - *a6) >> 5;
        if ((unint64_t)(v22 + 1) >> 59) {
          sub_21610CB04();
        }
        uint64_t v23 = v19 - *a6;
        uint64_t v24 = v23 >> 4;
        if (v23 >> 4 <= (unint64_t)(v22 + 1)) {
          uint64_t v24 = v22 + 1;
        }
        unint64_t v25 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v24;
        CFAllocatorRef v47 = a6 + 2;
        if (v25)
        {
          uint64_t v27 = sub_2162CF7D0(v25);
        }
        else
        {
          uint64_t v27 = 0;
          uint64_t v26 = 0;
        }
        std::string::size_type size = (std::string::size_type)&v27[8 * v22];
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        v45.__r_.__value_.__l.__size_ = size;
        v45.__r_.__value_.__r.__wordUChar s[2] = size;
        uint64_t v46 = (char *)&v27[8 * v26];
        if (SHIBYTE(v40) < 0)
        {
          sub_21610A674((unsigned char *)size, __p[0], (unint64_t)__p[1]);
          uint64_t v31 = (char *)v45.__r_.__value_.__r.__words[2];
          std::string::size_type size = v45.__r_.__value_.__l.__size_;
        }
        else
        {
          long long v30 = *(_OWORD *)__p;
          *(void *)(size + 16) = v40;
          *(_OWORD *)std::string::size_type size = v30;
          uint64_t v31 = (char *)&v27[8 * v22];
        }
        v27[8 * v22 + 6] = *(_DWORD *)v18;
        unint64_t v28 = v31 + 32;
        v45.__r_.__value_.__r.__wordUChar s[2] = (std::string::size_type)(v31 + 32);
        std::string::size_type v33 = *a6;
        unint64_t v32 = a6[1];
        if (v32 == *a6)
        {
          int64x2_t v35 = vdupq_n_s64(v32);
        }
        else
        {
          do
          {
            long long v34 = *(_OWORD *)(v32 - 32);
            *(void *)(size - 16) = *(void *)(v32 - 16);
            *(_OWORD *)(size - 32) = v34;
            *(void *)(v32 - 24) = 0;
            *(void *)(v32 - 16) = 0;
            *(void *)(v32 - 32) = 0;
            *(_DWORD *)(size - 8) = *(_DWORD *)(v32 - 8);
            size -= 32;
            v32 -= 32;
          }
          while (v32 != v33);
          int64x2_t v35 = *(int64x2_t *)a6;
          unint64_t v28 = (char *)v45.__r_.__value_.__r.__words[2];
        }
        *a6 = size;
        a6[1] = (std::string::size_type)v28;
        *(int64x2_t *)&v45.__r_.__value_.__r.__words[1] = v35;
        unint64_t v36 = (char *)a6[2];
        a6[2] = (std::string::size_type)v46;
        uint64_t v46 = v36;
        v45.__r_.__value_.__r.__words[0] = v35.i64[0];
        sub_2162348B8((uint64_t)&v45);
      }
      else
      {
        if (SHIBYTE(v40) < 0)
        {
          sub_21610A674((unsigned char *)a6[1], __p[0], (unint64_t)__p[1]);
        }
        else
        {
          long long v21 = *(_OWORD *)__p;
          *(void *)(v20 + 16) = v40;
          *(_OWORD *)std::string::size_type v20 = v21;
        }
        *(float *)(v20 + 24) = *v18;
        unint64_t v28 = (char *)(v20 + 32);
        a6[1] = (std::string::size_type)v28;
      }
      a6[1] = (std::string::size_type)v28;
      sub_2162E4168(v41, (uint64_t)v42);
      BOOL v37 = v42 - 1;
      sub_2162E3E9C((void **)v42 - 1, 0);
      uint64_t v42 = v37;
      if (SHIBYTE(v40) < 0) {
        operator delete(__p[0]);
      }
    }
    while (a3 > (uint64_t)(a6[1] - *a6) >> 5);
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  sub_2162E3E14((void ***)&v45);
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  sub_2162E3E14((void ***)&v45);
}

void sub_2162E39D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_21618B8E8((void *)(v32 - 128));
  a18 = &a22;
  sub_2162E3E14((void ***)&a18);
  _Unwind_Resume(a1);
}

void sub_2162E3AC8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(0xAu);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = sub_2162D1CE4(0xAu);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v15 = (*(uint64_t (**)(uint64_t *))(*a2 + 56))(a2);
      uint64_t v16 = "Montreal";
      if (v15 == 1) {
        uint64_t v16 = "RNNLM";
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v16;
      _os_log_debug_impl(&dword_2160F5000, v7, OS_LOG_TYPE_DEBUG, "[Prediction Engine: %s]", __p, 0xCu);
    }
    memset(&v21, 0, sizeof(v21));
    uint64_t v8 = *(int **)(a1 + 8);
    for (unint64_t i = *(int **)(a1 + 16); v8 != i; ++v8)
    {
      std::to_string(&v20, *v8);
      uint64_t v10 = std::string::append(&v20, " ", 1uLL);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v10->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__wordUChar s[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v13 = __p[23];
      }
      else {
        std::string::size_type v13 = *(void *)&__p[8];
      }
      std::string::append(&v21, v12, v13);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
    unint64_t v14 = sub_2162D1CE4(0xAu);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      sub_2162C3FCC(a2[1], &v20);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v17 = &v20;
      }
      else {
        long long v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      int64x2_t v18 = &v21;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64x2_t v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      double v19 = *(float *)a1;
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = a3;
      *(_WORD *)&__p[12] = 2080;
      *(void *)&__p[14] = v17;
      *(_WORD *)&unsigned char __p[22] = 2080;
      uint64_t v23 = v18;
      __int16 v24 = 2048;
      double v25 = v19;
      _os_log_debug_impl(&dword_2160F5000, v14, OS_LOG_TYPE_DEBUG, "%s: %s (%sprob:%f)", __p, 0x2Au);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2162E3D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162E3DAC()
{
}

uint64_t sub_2162E3DC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_2162E3E9C((void **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2162E3E14(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_2162E3E9C(--v4, 0);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_2162E3E9C(void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2162E3EEC(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void *sub_2162E3EEC(void *a1)
{
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_2162E3F50(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v4 = result;
    unint64_t v5 = v3 >> 1;
    uint64_t v6 = (float **)(result + 8 * (v3 >> 1));
    uint64_t v8 = (void **)(a2 - 8);
    uint64_t v7 = *(void *)(a2 - 8);
    float v9 = **v6;
    if (v9 == *(float *)v7)
    {
      uint64_t result = sub_2162E4070(*((_DWORD **)*v6 + 1), *((void *)*v6 + 2), *(_DWORD **)(v7 + 8), *(void *)(v7 + 16));
      if ((result & 0x80) == 0) {
        return result;
      }
    }
    else if (v9 >= *(float *)v7)
    {
      return result;
    }
    int *v8 = 0;
    uint64_t v10 = *v6;
    *uint64_t v6 = 0;
    sub_2162E3E9C(v8, v10);
    if (v3 >= 2)
    {
      do
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        long long v11 = (float **)(v4 + 8 * v5);
        std::string::size_type v13 = *v11;
        float v14 = **v11;
        if (v14 == *(float *)v7)
        {
          if ((sub_2162E4070(*((_DWORD **)v13 + 1), *((void *)v13 + 2), *(_DWORD **)(v7 + 8), *(void *)(v7 + 16)) & 0x80) == 0) {
            goto LABEL_7;
          }
        }
        else if (v14 >= *(float *)v7)
        {
          goto LABEL_7;
        }
        *long long v11 = 0;
        sub_2162E3E9C((void **)v6, v13);
        uint64_t v6 = (float **)(v4 + 8 * v5);
      }
      while (v12 > 1);
    }
    else
    {
LABEL_7:
      long long v11 = v6;
    }
    return (uint64_t)sub_2162E3E9C((void **)v11, (void *)v7);
  }
  return result;
}

uint64_t sub_2162E4070(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = (a2 - (uint64_t)a1) >> 2;
  uint64_t v5 = (a4 - (uint64_t)a3) >> 2;
  if (v5 >= v4) {
    uint64_t v6 = (a2 - (uint64_t)a1) >> 2;
  }
  else {
    uint64_t v6 = (a4 - (uint64_t)a3) >> 2;
  }
  if (v6 < 1)
  {
LABEL_7:
    BOOL v7 = v4 == v5;
    if (v4 < v5) {
      unsigned int v8 = -1;
    }
    else {
      unsigned int v8 = 1;
    }
    if (v7) {
      return 0;
    }
    else {
      return v8;
    }
  }
  else
  {
    while (*a1 == *a3)
    {
      ++a1;
      ++a3;
      if (!--v6) {
        goto LABEL_7;
      }
    }
    if (*a1 < *a3) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
}

uint64_t sub_2162E40D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_2162E4168(void *result, uint64_t a2)
{
  unint64_t v2 = a2 - (void)result;
  if (a2 - (uint64_t)result < 9) {
    return result;
  }
  uint64_t v4 = (uint64_t)result;
  uint64_t v5 = 0;
  uint64_t v6 = v2 >> 3;
  BOOL v7 = (void *)*result;
  void *result = 0;
  BOOL v8 = __OFSUB__(v2 >> 3, 2);
  uint64_t v9 = (v2 >> 3) - 2;
  if (v9 < 0 != v8) {
    uint64_t v9 = v6 - 1;
  }
  uint64_t v10 = v9 >> 1;
  long long v11 = (void **)result;
  do
  {
    unint64_t v12 = v11;
    v11 += v5 + 1;
    uint64_t v13 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v14 = v13 + 2;
    if (v13 + 2 >= v6) {
      goto LABEL_9;
    }
    int v15 = (float *)v11[1];
    float v16 = *(float *)*v11;
    if (v16 == *v15)
    {
      if ((sub_2162E4070((_DWORD *)(*v11)[1], (*v11)[2], *((_DWORD **)v15 + 1), *((void *)v15 + 2)) & 0x80) == 0) {
        goto LABEL_9;
      }
LABEL_8:
      ++v11;
      uint64_t v5 = v14;
      goto LABEL_9;
    }
    if (v16 < *v15) {
      goto LABEL_8;
    }
LABEL_9:
    long long v17 = *v11;
    *long long v11 = 0;
    sub_2162E3E9C(v12, v17);
  }
  while (v5 <= v10);
  int64x2_t v18 = (void **)(a2 - 8);
  if (v18 == v11)
  {
    return sub_2162E3E9C(v11, v7);
  }
  else
  {
    double v19 = *v18;
    std::string *v18 = 0;
    sub_2162E3E9C(v11, v19);
    uint64_t v20 = (uint64_t)(v11 + 1);
    sub_2162E3E9C(v18, v7);
    return (void *)sub_2162E3F50(v4, v20, (v20 - v4) >> 3);
  }
}

uint64_t sub_2162E42F8(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      return 1;
    }
    else
    {
      uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 216);
      return v3(a1);
    }
  }
  return result;
}

uint64_t sub_2162E43B0(uint64_t a1)
{
  unint64_t v2 = *(_DWORD **)a1;
  uint64_t v1 = *(_DWORD **)(a1 + 8);
  unint64_t v3 = (unint64_t)v1 - *(void *)a1;
  if (v3 == 4)
  {
    if (*v2 == 1) {
      return 1;
    }
  }
  else if (v3 > 8)
  {
    unint64_t v2 = v1 - 2;
  }
  for (uint64_t i = *(_DWORD **)(a1 + 8); i != v2; --i)
  {
    unsigned int v5 = *(i - 1);
    if (i == v1 && v5 == 502) {
      break;
    }
    if (v5 >= 0x258) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2162E4418(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  uint64_t v4 = *(unsigned int *)(v2 - 4);
  BOOL v5 = sub_2162F0E50(a2, *(_DWORD *)(v2 - 4));
  if (!v5
    && (*(double (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 40))(a2, v4, 0, 0) >= -7.0)
  {
    return 1;
  }
  return v5;
}

uint64_t sub_2162E44AC(uint64_t a1, int a2)
{
  uint64_t result = LMLanguageModelTokenIDisUnknown();
  if (result) {
    return !sub_2162F0E50(a1, a2);
  }
  return result;
}

uint64_t sub_2162E44EC(int **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (v3 == *a1) {
    return 0;
  }
  uint64_t v6 = v3 - 1;
  char v7 = 1;
  while (*v6 == 1)
  {
LABEL_6:
    uint64_t result = 0;
    char v9 = v7 & (v6-- != v2);
    char v7 = 0;
    if ((v9 & 1) == 0) {
      return result;
    }
  }
  if (sub_2162E44AC(a2, *v6))
  {
    uint64_t v2 = *a1;
    goto LABEL_6;
  }
  return 1;
}

void sub_2162E4574(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2162E4594(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

void sub_2162E45E8(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_2162E4610(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 1;
  id v3 = (id)sub_2161F4704(a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), v3);
}

void sub_2162E466C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = sub_216322AAC(*(_DWORD *)(*(void *)(a1 + 16) + 4));
  sub_216322CC4(v9, *(_WORD **)(a2 + 8));
  int v10 = 1;
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v9 + 24))(v9, *(void *)(a2 + 8), 1);
  CFStringRef v11 = sub_21619A5CC();
  uint64_t v12 = (uint64_t)v11;
  if (!*(unsigned char *)(*(void *)a3 + 239))
  {
    if (a5 == 9) {
      int v10 = sub_2161A1F24(v11);
    }
    else {
      int v10 = 0;
    }
  }
  if (sub_2162E4898(*(void *)(*(void *)(a1 + 16) + 64), v12, v10)) {
    operator new();
  }
  operator new();
}

void sub_2162E4834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFStringRef sub_2162E4898(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && *(unsigned char *)(a1 + 104) && (!*(unsigned char *)(a1 + 105) ? (BOOL v3 = a3 == 0) : (BOOL v3 = 1), !v3)) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @" %@", a2);
  }
  else {
    return 0;
  }
}

void sub_2162E48F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 56))(a2);
  CFStringRef v9 = sub_21619A5CC();
  if (a5 != 14 || !CEMStringIsSingleEmoji())
  {
    if (*(_DWORD *)(a2 + 8) == 8)
    {
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(v10 + 72);
      uint64_t v12 = v11 ? *(void *)(*(void *)(v11 + 8) + 32) : 0;
      sub_21630B6B0(a2, v12, *(void *)(v10 + 64) + 48);
      if (*(void *)(a2 + 104) >= 2uLL)
      {
        *(void *)operator new(8uLL) = a2;
        operator new();
      }
    }
    if (*(unsigned char *)(*(void *)a3 + 239))
    {
      int v13 = 1;
    }
    else if (a5 == 9)
    {
      int v13 = sub_2161A1F24(v9);
    }
    else
    {
      int v13 = 0;
    }
    if (sub_2162E4898(*(void *)(*(void *)(a1 + 16) + 64), (uint64_t)v9, v13)) {
      operator new();
    }
    operator new();
  }
  if (v9) {
    CFRelease(v9);
  }
}

void sub_2162E4C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, const void *a12)
{
}

void sub_2162E4D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C6C5D00;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 4sub_2161868BC(&a9, 0) = 1;
  *(void *)(a1 + 48) = a3;
  sub_216273270(a1 + 56, 0, 0);
  sub_216310668(a1 + 80, a2, a1, a4, a5, a6);
}

void sub_2162E5014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162EE6A8((void ***)va);
  sub_21612A250(v3 + 1248, *v6);
  sub_2161BE0C8((const void **)(v3 + 1232), 0);
  sub_2161BE0C8((const void **)(v3 + 1208), 0);
  sub_2161BE0C8((const void **)(v3 + 1184), 0);
  sub_2161BE0C8((const void **)(v3 + 1160), 0);
  sub_2161BE0C8((const void **)(v3 + 1136), 0);
  sub_2161BE0C8((const void **)(v3 + 1112), 0);
  BOOL v8 = *(void **)(v3 + 1080);
  if (v8)
  {
    *(void *)(v3 + 1088) = v8;
    operator delete(v8);
  }
  sub_2162EF210(v5);
  sub_21631117C(v4);
  sub_216273404(v2);
  sub_2162EC070((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162E5128(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5D00;
  uint64_t v2 = *(void *)(a1 + 1064);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 952);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 1296);
  if (v4) {
    CFRelease(v4);
  }
  sub_21612A250(a1 + 1248, *(void **)(a1 + 1256));
  sub_2161BE0C8((const void **)(a1 + 1232), 0);
  sub_2161BE0C8((const void **)(a1 + 1208), 0);
  sub_2161BE0C8((const void **)(a1 + 1184), 0);
  sub_2161BE0C8((const void **)(a1 + 1160), 0);
  sub_2161BE0C8((const void **)(a1 + 1136), 0);
  sub_2161BE0C8((const void **)(a1 + 1112), 0);
  BOOL v5 = *(void **)(a1 + 1080);
  if (v5)
  {
    *(void *)(a1 + 1088) = v5;
    operator delete(v5);
  }
  sub_2162EF210((void **)(a1 + 960));
  sub_21631117C(a1 + 80);
  sub_216273404((const void **)(a1 + 56));
  char v7 = (void **)(a1 + 16);
  sub_2162EC070(&v7);
  return a1;
}

void sub_2162E5268(uint64_t a1)
{
  sub_2162E5128(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162E52A0(uint64_t a1, unsigned int (***a2)(void), uint64_t a3)
{
  if ((**a2)(a2) == 2)
  {
    uint64_t v6 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6BA4B8, 0);
    int v7 = (a3 & 1) != 0 || v6[16] == 2;
    sub_2162E54C4(a1, (uint64_t)v6, v7);
    goto LABEL_13;
  }
  if (!(**a2)(a2)) {
    goto LABEL_10;
  }
  if ((**a2)(a2) != 1)
  {
    if ((**a2)(a2) == 3)
    {
      uint64_t v10 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6B9B70, 0);
      sub_2162E5730((void *)a1, (uint64_t)v10);
    }
    goto LABEL_13;
  }
  if (!*(unsigned char *)(a1 + 1328))
  {
LABEL_10:
    sub_2162E5564(a1, (uint64_t)a2);
LABEL_13:
    uint64_t v9 = 1;
    goto LABEL_14;
  }
  BOOL v8 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6B9B58, 0);
  uint64_t v9 = sub_2162E5678(a1, (uint64_t)v8, a3);
LABEL_14:
  sub_2162E57A4(a1, (uint64_t (***)(void))a2, a3);
  return v9;
}

void sub_2162E54C4(uint64_t a1, uint64_t a2, int a3)
{
  sub_2162E5860(a1, 2);
  if (!*(_DWORD *)(a1 + 1272)) {
    sub_21628B790(*(uint64_t **)(a1 + 1320), a2);
  }
  sub_21631CF9C(a1 + 80, a2, a3);
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 872);
    if (v6 >= 1)
    {
      sub_216260B0C(a1 + 16, 2, v6);
      sub_2162E5D0C(a1);
    }
  }
}

char *sub_2162E5564(uint64_t a1, uint64_t a2)
{
  sub_216312D04(a1 + 80, a2, *(_DWORD *)(*(void *)(a1 + 8) + 24));
  uint64_t v4 = *(void *)(a1 + 96);
  if (*(void *)(a1 + 88) == v4 || (*(_DWORD *)(*(void *)(v4 - 8) + 168) - 1) >= 2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
    sub_216260808((void *)(a1 + 16), 0, v5);
  }
  sub_21628BA60(*(void *)(a1 + 1320));
  if (*(_DWORD *)(*(void *)(a1 + 8) + 32) != 1) {
    sub_2162E5D0C(a1);
  }
  uint64_t result = sub_2162769A4();
  if (*result && (result[9] & 8) != 0)
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 952) + 88);
    return (char *)v7();
  }
  return result;
}

uint64_t sub_2162E5678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a1 + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  sub_216260808(v6, 1, v7);
  sub_2162E5860(a1, 1);
  uint64_t v8 = sub_21631D084((void *)(a1 + 80), a2, a3);
  if (v8)
  {
    if (a3)
    {
      uint64_t v9 = *(void *)(a1 + 872);
      if (v9 >= 1)
      {
        sub_216260B0C((uint64_t)v6, 1, v9);
        sub_2162E5D0C(a1);
      }
    }
  }
  return v8;
}

void sub_2162E5730(void *a1, uint64_t a2)
{
  sub_2162E62DC((uint64_t)a1);
  sub_21631C088(a1 + 10, a2);
  sub_21628BA60(a1[165]);
  uint64_t v4 = a1[109];
  if (v4 >= 1)
  {
    sub_216260B0C((uint64_t)(a1 + 2), 2, v4);
    sub_2162E5D0C((uint64_t)a1);
  }
}

_DWORD *sub_2162E57A4(uint64_t a1, uint64_t (***a2)(void), char a3)
{
  uint64_t result = (_DWORD *)(**a2)(a2);
  if (result != 2
    || (uint64_t result = __dynamic_cast(a2, (const struct __class_type_info *)&unk_26C6B96F0, (const struct __class_type_info *)&unk_26C6BA4B8, 0), result[16] == 2)&& (a3 & 1) == 0)
  {
    *(unsigned char *)(a1 + 1313) = 1;
  }
  return result;
}

void sub_2162E5860(uint64_t a1, int a2)
{
  uint64_t v4 = 912;
  if (a2 == 2) {
    uint64_t v4 = 904;
  }
  uint64_t v5 = *(void *)(a1 + v4);
  if (v5) {
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5) ^ 1;
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 944);
  if (v7) {
    LODWORD(v7) = *(void *)(v7 + 16) != *(void *)(v7 + 8);
  }
  if (((v6 | v7) & 1) == 0)
  {
    uint64_t v8 = a1 + 80;
    uint64_t v9 = *(uint64_t **)(a1 + 16);
    uint64_t v10 = *(uint64_t **)(a1 + 24);
    if (v9 == v10) {
      goto LABEL_15;
    }
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *v9++;
      v11 += (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
    }
    while (v9 != v10);
    if (!v11
      || (uint64_t v13 = *(void *)(a1 + 24), *(void *)(a1 + 16) != v13)
      && ((*(uint64_t (**)(void))(**(void **)(v13 - 8) + 24))(*(void *)(v13 - 8)) & 1) != 0)
    {
LABEL_15:
      uint64_t v22 = 0;
      uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 64);
      if (!v14
        || ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14) & 1) != 0
        || (uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 64),
            float v16 = *(const void ***)(v15 + 72),
            v16 == *(const void ***)(v15 + 80))
        || !*v16)
      {
        int64x2_t v18 = 0;
      }
      else
      {
        long long v17 = (__CFArray *)__dynamic_cast(*v16, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BB158, 0);
        int64x2_t v18 = v17;
        if (v17)
        {
          CFStringRef v19 = (const __CFString *)(*(uint64_t (**)(__CFArray *))(*(void *)v17 + 232))(v17);
          (*(void (**)(void **__return_ptr, __CFArray *, void))(*(void *)v18 + 432))(__p, v18, 0);
          int64x2_t v18 = sub_2161E4FD4((__int16 **)__p);
          uint64_t v22 = v18;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_24;
        }
      }
      CFStringRef v19 = 0;
LABEL_24:
      sub_21631C14C(v8, v19, v18, a2);
      if (v18) {
        CFRelease(v18);
      }
      return;
    }
    uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952));
    if (v20)
    {
      sub_21631C124(a1 + 80, (void *)(v20 + 32), a2);
    }
  }
}

void sub_2162E5B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, const void *a12)
{
  if (__p) {
    operator delete(__p);
  }
  sub_216195B94(&a12, 0);
  _Unwind_Resume(a1);
}

__CFArray *sub_2162E5B6C(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a3 + 432))(&__p, a3, 1);
  uint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 560))(a3);
  uint64_t v8 = __p;
  if (!v6 || __p == v13 || (v13 - (unsigned char *)__p) >> 1 != (v7[1] - *v7) >> 2)
  {
    uint64_t v10 = 0;
    if (!__p) {
      return v10;
    }
LABEL_9:
    uint64_t v13 = v8;
    operator delete(v8);
    return v10;
  }
  uint64_t v9 = sub_2161E4FD4((__int16 **)&__p);
  uint64_t v10 = sub_21631C7F4(a1 + 80, a2, v6, v9, v7);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v8 = __p;
  if (__p) {
    goto LABEL_9;
  }
  return v10;
}

void sub_2162E5CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2162E5D0C(uint64_t a1)
{
  *(unsigned char *)(a1 + 1312) = 0;
  sub_2162D3EB0(*(void *)(a1 + 48));
  unint64_t v2 = *(void *)(a1 + 576);
  (*(void (**)(void, unint64_t))(**(void **)(a1 + 952) + 16))(*(void *)(a1 + 952), v2);
  unint64_t v3 = *(void *)(a1 + 1280);
  if (v3 != 0xFFFF && v2 <= v3)
  {
    uint64_t v5 = v2 - 1;
    if (!v2) {
      uint64_t v5 = 0xFFFFLL;
    }
    *(void *)(a1 + 128sub_216195B94((const void **)&a9, 0) = v5;
  }
  uint64_t v6 = *(void *)(a1 + 96) - *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 16);
    int v8 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
    unint64_t v9 = ((v6 << 29) - 0x100000000) >> 32;
    uint64_t v10 = *(uint64_t **)(a1 + 24);
    if (v7 == v10)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = *v7++;
        v11 += (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
      }
      while (v7 != v10);
    }
    uint64_t v13 = v11 - 1;
    *(unsigned char *)(a1 + 1288) = v9 == v13;
    *(unsigned char *)(a1 + 1152) = 1;
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1160));
    *(unsigned char *)(a1 + 1104) = 1;
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1112));
    if ((v8 & 0x800) != 0)
    {
      unint64_t v38 = (const void **)(*(void *)(a1 + 48) + 72);
      sub_2162E69C4(a1, v38, v9, 1);
    }
    else
    {
      if (v2 <= v9)
      {
        uint64_t v14 = a1 + 80;
        uint64_t v42 = v13;
        unint64_t v43 = v9;
        do
        {
          uint64_t v15 = *(void *)(a1 + 24);
          if (*(void *)(a1 + 16) == v15
            || !(*(unsigned int (**)(void))(**(void **)(v15 - 8) + 24))(*(void *)(v15 - 8)))
          {
            BOOL v18 = v9 == v13 && v2 == v9;
            *(unsigned char *)(a1 + 1288) = v18;
            sub_2162D28AC(*(void **)(a1 + 48), (const void **)&__p);
            sub_2162E69C4(a1, (const void **)&__p, v2, 1);
            if (__p)
            {
              std::string v45 = __p;
              operator delete(__p);
            }
            sub_2162D26AC(*(void **)(a1 + 48), (const void **)&__p);
            sub_2162E69C4(a1, (const void **)&__p, v2, 0);
            if (__p)
            {
              std::string v45 = __p;
              operator delete(__p);
            }
            unint64_t v16 = v2 + 1;
            if ((v2 & 0x80000000) == 0)
            {
              uint64_t v19 = *(void *)(a1 + 88);
              if (v2 < (unint64_t)((*(void *)(a1 + 96) - v19) >> 3))
              {
                uint64_t v21 = *(void *)(v19 + 8 * v2) + 104;
                uint64_t v20 = *(uint64_t **)v21;
                if (*(void *)(v21 + 8) != *(void *)v21)
                {
                  uint64_t v22 = *v20;
                  if (*v20)
                  {
                    unsigned int v23 = 1;
                    do
                    {
                      if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 64))(v22) != 7)
                      {
                        int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 64))(v22);
                        if (v24 == 6) {
                          uint64_t v25 = 5;
                        }
                        else {
                          uint64_t v25 = 4;
                        }
                        uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
                        uint64_t v27 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 112))(v22);
                        unint64_t v28 = *(uint64_t **)(*(void *)(a1 + 8) + 48);
                        LODWORD(__p) = 0;
                        sub_21628CDA8(v28, *v27, v27[1], &__p);
                        uint64_t v29 = __p;
                        if (!__p)
                        {
                          uint64_t v30 = v27[1];
                          if (v30)
                          {
                            uint64_t v31 = (unsigned __int16 *)*v27;
                            while (1)
                            {
                              unsigned int v33 = *v31++;
                              uint64_t v32 = v33;
                              if (v33 > 0xFFuLL || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v32 + 60) & 0x400) == 0) {
                                break;
                              }
                              if (!--v30) {
                                goto LABEL_47;
                              }
                            }
                            if (v24 == 6) {
                              uint64_t v29 = 502;
                            }
                            else {
                              uint64_t v29 = 0;
                            }
                          }
                          else
                          {
LABEL_47:
                            uint64_t v29 = 501;
                          }
                        }
                        uint64_t v34 = *(void *)(a1 + 952);
                        uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 104))(v22);
                        uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 112))(v22);
                        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v34 + 48))(v34, v35, v26, v25, v36, v29, v2 + 1);
                        uint64_t v14 = a1 + 80;
                      }
                      uint64_t v22 = sub_2163121AC(v14, v2, v23++);
                    }
                    while (v22);
                    uint64_t v13 = v42;
                    unint64_t v9 = v43;
                  }
                  else
                  {
                    unint64_t v9 = v43;
                  }
                }
              }
            }
          }
          else
          {
            *(unsigned char *)(a1 + 1288) = v2 == v9;
            *(unsigned char *)(*(void *)(a1 + 8) + 8sub_216195B94((const void **)&a9, 0) = v2 == v9;
            sub_2162D28AC(*(void **)(a1 + 48), (const void **)&__p);
            sub_2162E69C4(a1, (const void **)&__p, v2, 1);
            if (__p)
            {
              std::string v45 = __p;
              operator delete(__p);
            }
            unint64_t v16 = v2 + 1;
          }
          unint64_t v2 = v16;
        }
        while (v16 <= v9);
      }
      uint64_t v37 = *(void *)(a1 + 8);
      if (!*(_WORD *)(v37 + 98) && *(unsigned char *)(a1 + 1288) && (*(unsigned char *)(v37 + 27) & 8) == 0)
      {
        BOOL v39 = *(void *)(a1 + 16) != *(void *)(a1 + 24) && *(unsigned char *)(a1 + 40) == 0;
        (*(void (**)(void))(**(void **)(a1 + 952) + 96))(*(void *)(a1 + 952));
        if (!v39)
        {
          sub_2162E6C08(a1);
          sub_2162E6DBC(a1);
        }
        uint64_t v40 = *(void *)(a1 + 16);
        uint64_t v41 = *(void *)(a1 + 24);
        while (v40 != v41)
        {
          if ((*(unsigned int (**)(void))(**(void **)v40 + 56))() == 1) {
            goto LABEL_73;
          }
          v40 += 8;
        }
        sub_2162E7074(a1);
        sub_2162E7830(a1, (uint64_t *)(*(void *)(a1 + 48) + 72));
LABEL_73:
        if (!v39) {
          sub_2162E7D38(a1);
        }
      }
    }
  }
}

void sub_2162E62B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162E62DC(uint64_t a1)
{
  *(_WORD *)(a1 + 1312) = 0;
  sub_216261654((void *)(a1 + 16));
  *(_WORD *)(a1 + 4sub_216195B94((const void **)&a9, 0) = 1;
  (*(void (**)(void, void))(**(void **)(a1 + 952) + 16))(*(void *)(a1 + 952), 0);
  sub_2162EF400(a1 + 960, *(void **)(a1 + 960));
  *(void *)(a1 + 100sub_216195B94((const void **)&a9, 0) = 0;
  *(void *)(a1 + 992) = 0;
  sub_216277448(a1 + 1008);
  sub_216311338(a1 + 80, 0, 1);
  *(_DWORD *)(a1 + 1072) = 0;
  *(void *)(a1 + 1088) = *(void *)(a1 + 1080);
  *(unsigned char *)(a1 + 1128) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1136));
  *(unsigned char *)(a1 + 1152) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1160));
  *(unsigned char *)(a1 + 1176) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1184));
  *(unsigned char *)(a1 + 120sub_216195B94((const void **)&a9, 0) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1208));
  sub_21612A250(a1 + 1248, *(void **)(a1 + 1256));
  *(void *)(a1 + 1248) = a1 + 1256;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1256) = 0;
  *(unsigned char *)(a1 + 1224) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1232));
  *(unsigned char *)(a1 + 1104) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1112));
  *(void *)(a1 + 128sub_216195B94((const void **)&a9, 0) = 0xFFFFLL;
  *(unsigned char *)(a1 + 616) = 1;
  sub_21628B218(*(uint64_t **)(a1 + 1320));
  unint64_t v2 = *(__CFSet **)(a1 + 1296);

  CFSetRemoveAllValues(v2);
}

void sub_2162E6408(uint64_t a1, unsigned int a2, int a3, id *a4)
{
  sub_2162DE764(*(void *)(a1 + 8), a2, a3, (uint64_t)a4);
  sub_2162D2394(*(void *)(a1 + 48));
  sub_2163115BC((id ***)(a1 + 80), *(_DWORD **)(a1 + 8), a4);
  uint64_t v6 = *(void *)(a1 + 1320);

  sub_21628B6A0(v6, (uint64_t)a4);
}

uint64_t sub_2162E6464(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 1;
  }
  uint64_t v7 = *a3;
  uint64_t v8 = *a4;
  if (*a3)
  {
    unint64_t v9 = *(void *)(v7 + 8);
    if (!v8) {
      return 1;
    }
  }
  else
  {
    unint64_t v9 = 0;
    if (!v8) {
      return 1;
    }
  }
  uint64_t result = 1;
  if (v9)
  {
    unint64_t v11 = *(void *)(v8 + 8);
    if (v11)
    {
      if (*(unsigned char *)(v7 + 41) & 1) != 0 && (*(unsigned char *)(v8 + 41))
      {
        if (v9 >= 2) {
          uint64_t v12 = 2;
        }
        else {
          uint64_t v12 = v9;
        }
        if (v11 >= 2) {
          unint64_t v13 = 2;
        }
        else {
          unint64_t v13 = *(void *)(v8 + 8);
        }
        v28[0] = 0;
        v28[1] = v28;
        uint64_t v28[2] = 0x2000000000;
        char v29 = 0;
        v26[0] = 0;
        v26[1] = v26;
        v26[2] = 0x2000000000;
        char v27 = 0;
        v21[0] = MEMORY[0x263EF8330];
        v21[1] = 0x40000000;
        uint64_t v22 = sub_2162EC0C4;
        unsigned int v23 = &unk_26426EBE0;
        int v24 = v26;
        uint64_t v25 = v28;
        if (sub_2162EC0C4((uint64_t)v21, v13, *(void *)(v8 + 32)))
        {
          _Block_object_dispose(v26, 8);
          _Block_object_dispose(v28, 8);
          return 1;
        }
        BOOL v14 = v22((uint64_t)v21, v12, *(void *)(v7 + 32) + 4 * *(void *)(v7 + 8) - 4 * v12);
        _Block_object_dispose(v26, 8);
        _Block_object_dispose(v28, 8);
        if (v14) {
          return 1;
        }
        MEMORY[0x270FA5388](v15);
        long long v17 = (unsigned __int16 *)((char *)&v21[-1] - v16);
        memcpy((char *)&v21[-1] - v16, v18, 2 * v12);
        memcpy(&v17[v12], *(const void **)(v8 + 16), 2 * v13);
        if (v13 == 1)
        {
          if (a4[2] + a2 == (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3) {
            uint64_t v19 = a4[2];
          }
          else {
            uint64_t v19 = 0;
          }
        }
        else
        {
          uint64_t v19 = 0;
        }
        return sub_21631D160(a1 + 80, a2 - v12, v17, v13 + v12, v19);
      }
    }
  }
  return result;
}

void sub_2162E66B8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2162E66E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1152;
  *(unsigned char *)(a1 + 1152) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1160));
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 296);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  v7[2] = sub_2162E678C;
  uint64_t v7[3] = &unk_264267210;
  std::string::value_type v7[4] = a1;
  sub_2162E05F0(v5, a2, (uint64_t)v7);
  return v4;
}

void sub_2162E678C(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  CFStringRef v2 = CFStringCreateWithCharacters(0, *(const UniChar **)(a2 + 16), *(void *)(a2 + 24));
  int valuePtr = &unk_26C6C59C0;
  LODWORD(v11) = 0;
  *((void *)&v11 + 1) = 0;
  *(void *)&long long v12 = CFStringGetLength(v2);
  uint64_t v13 = 0xFFFFFFFFLL;
  *((void *)&v12 + 1) = 64;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  uint64_t v8 = &v5;
  char v9 = 0;
  unint64_t v3 = (char *)operator new(0x30uLL);
  uint64_t v5 = v3;
  uint64_t v6 = v3 + 48;
  uint64_t v7 = v3 + 48;
  *(void *)unint64_t v3 = &unk_26C6C59C0;
  long long v4 = v12;
  *(_OWORD *)(v3 + 8) = v11;
  *(_OWORD *)(v3 + 24) = v4;
  *((void *)v3 + 5) = v13;
  operator new();
}

void sub_2162E6920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2160F7444(exception_object);
}

void sub_2162E69C4(uint64_t a1, const void **a2, int a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!*(_WORD *)(v8 + 98))
  {
    uint64_t v15 = *(void *)(v8 + 64);
    if (!v15
      || (uint64_t v16 = *(void *)(v15 + 8)) == 0
      || sub_216192194(v16, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x263EFFB40])
    {
      std::string __p = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      sub_2162D4044(&__p, *a2, (uint64_t)a2[1], ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3);
      goto LABEL_19;
    }
    uint64_t v8 = *(void *)(a1 + 8);
  }
  uint64_t v9 = *(void *)(v8 + 64);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10)
    {
      if (sub_216192194(v10, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x263EFFB40])
      {
        sub_2162E852C(&__p, *a2, (uint64_t)a2[1]);
        goto LABEL_19;
      }
      uint64_t v8 = *(void *)(a1 + 8);
    }
  }
  if (!*(_WORD *)(v8 + 98)) {
    goto LABEL_13;
  }
  long long v11 = (char *)*a2;
  long long v12 = (char *)a2[1];
  if (*a2 == v12) {
    goto LABEL_13;
  }
  while ((*(unsigned int (**)(void))(**(void **)v11 + 16))() != 17)
  {
    v11 += 8;
    if (v11 == v12)
    {
      long long v11 = v12;
      break;
    }
  }
  if (v11 == a2[1])
  {
LABEL_13:
    std::string __p = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)v11;
    uint64_t v14 = operator new(8uLL);
    std::string __p = v14;
    void *v14 = v13;
    uint64_t v25 = v14 + 1;
    uint64_t v26 = v14 + 1;
  }
LABEL_19:
  long long v17 = __p;
  if (__p != v25)
  {
    BOOL v18 = *(_DWORD **)(a1 + 8);
    unsigned int v19 = v18[6];
    if ((v19 & 0x800) != 0) {
      int v20 = (*v18 == 5) << 16;
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = *(void *)(a1 + 1064);
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 0x40000000;
    v22[2] = sub_2162E87F8;
    void v22[3] = &unk_26426E9B8;
    char v23 = a4;
    v22[4] = a1;
    v22[5] = &__p;
    sub_2162DC238(v21, (uint64_t *)&__p, a3, a4 & 0xFEFFFFFF | (((v19 >> 14) & 1) << 24) | v20, (uint64_t)v22);
    long long v17 = __p;
  }
  if (v17)
  {
    uint64_t v25 = v17;
    operator delete(v17);
  }
}

void sub_2162E6BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162E6C08(uint64_t a1)
{
  *(unsigned char *)(a1 + 1104) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1112));
  if (sub_2162EA2BC(a1))
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952));
    if (!*(unsigned char *)(v2 + 9))
    {
      uint64_t v3 = v2;
      sub_2162EA388((void *)a1, (void *)(v2 + 32), 0);
      if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 1112)))
      {
        if (*(unsigned char *)(v3 + 8))
        {
          std::string __p = 0;
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          long long v4 = (void *)(*(uint64_t (**)(void, void, void *))(**(void **)(a1 + 952) + 72))(*(void *)(a1 + 952), 0, &unk_26C6CA2A0);
          if (v4)
          {
            do
            {
              if ((*(_DWORD *)(*v4 + 8) - 1) >= 2)
              {
                uint64_t v5 = **(void **)(*v4 + 16);
                if (!v5)
                {
                  uint64_t v10 = __p;
                  goto LABEL_17;
                }
                uint64_t v6 = *(void *)(v5 + 8);
                for (uint64_t i = (char *)(*(void *)(v5 + 16) + 2 * v6 - 2); (--v6 & 0x8000000000000000) == 0; uint64_t i = v8)
                {
                  uint64_t v8 = i - 2;
                  sub_2161C2FA0((uint64_t)&__p, (char *)__p, i);
                }
              }
              long long v4 = (void *)v4[1];
            }
            while (v4);
            if (__p != v10) {
              goto LABEL_18;
            }
          }
LABEL_17:
          sub_2163123F8(a1 + 80, (uint64_t *)(v3 + 56), (char **)&__p);
LABEL_18:
          sub_2162EA388((void *)a1, &__p, 1);
          if (__p)
          {
            uint64_t v10 = __p;
            operator delete(__p);
          }
        }
      }
    }
  }
}

void sub_2162E6D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162E6DBC(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 8);
  int v2 = v1[6];
  if ((v2 & 0x8014800) != 0) {
    return;
  }
  if (*v1 == 5)
  {
    if ((v2 & 0x400000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952));
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952));
  uint64_t v6 = *(__int16 **)(v5 + 32);
  uint64_t v7 = *(void *)(v5 + 40);
  uint64_t v8 = v7 - (void)v6;
  if (v7 - (void)v6 != 2)
  {
    if ((unint64_t)v8 > 3) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (*v6 != -1)
  {
LABEL_10:
    if (!*(unsigned char *)(v4 + 8)) {
      return;
    }
LABEL_11:
    int v24 = 0;
    uint64_t v25 = 0;
    unint64_t v9 = v8 >> 1;
    std::string __p = 0;
    sub_216182F50(&__p, v6, v7, v8 >> 1);
    sub_216312200(a1 + 80, &__p, v9, &v26);
    if (__p)
    {
      int v24 = __p;
      operator delete(__p);
    }
    uint64_t v10 = v26;
    uint64_t v11 = v27;
    if ((unint64_t)((char *)v27 - (char *)v26) < 0x11) {
      goto LABEL_23;
    }
    uint64_t v12 = v27 - v26;
    if (v26 == v27)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = v26;
      do
      {
        if ((*(unsigned char *)(*(void *)(*v14 + 8) + 8) & 1) != 0 || sub_21632046C(*v14)) {
          ++v13;
        }
        ++v14;
      }
      while (v14 != v11);
    }
    if ((double)(unint64_t)v12 * 0.5 >= (double)v13)
    {
      char v15 = 0;
      if (!v10)
      {
LABEL_25:
        if ((v15 & 1) == 0) {
          return;
        }
        goto LABEL_26;
      }
    }
    else
    {
LABEL_23:
      char v15 = 1;
      if (!v10) {
        goto LABEL_25;
      }
    }
    char v27 = v10;
    operator delete(v10);
    goto LABEL_25;
  }
LABEL_26:
  int v16 = **(_DWORD **)(a1 + 8);
  sub_2162D274C(*(void *)(a1 + 48), (void **)&v26);
  long long v17 = *(void **)(a1 + 1064);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1174405120;
  void v18[2] = sub_2162EA9C8;
  v18[3] = &unk_26C6C9DA8;
  v18[4] = a1;
  unsigned int v19 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  sub_2162D4044(&v19, v26, (uint64_t)v27, v27 - v26);
  BOOL v22 = v16 == 5;
  sub_2162DD26C(v17, &v26, v16 == 5, (uint64_t)v18);
  if (v19)
  {
    int v20 = v19;
    operator delete(v19);
  }
  if (v26)
  {
    char v27 = v26;
    operator delete(v26);
  }
}

void sub_2162E702C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162E7074(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*(void *)(a1 + 8) + 24) & 4) != 0) {
    return;
  }
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2000000000;
  char v41 = 1;
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x2000000000;
  void v39[3] = 0;
  v38[0] = 0;
  v38[1] = v38;
  void v38[2] = 0x2000000000;
  v38[3] = 0;
  v37[0] = 0;
  v37[1] = v37;
  v37[2] = 0x2000000000;
  void v37[3] = 0;
  v36[0] = 0;
  v36[1] = v36;
  void v36[2] = 0x2000000000;
  void v36[3] = 0;
  v34[0] = 0;
  v34[1] = v34;
  void v34[2] = 0x3802000000;
  v34[3] = sub_2162E9518;
  v34[5] = 0;
  uint64_t v35 = 0;
  v34[4] = sub_2162E9528;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2000000000;
  char v33 = 0;
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2000000000;
  char v31 = 1;
  uint64_t v2 = *(void *)(a1 + 952);
  v28[4] = a1;
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 0x40000000;
  v29[2] = sub_2162E9C14;
  void v29[3] = &unk_26426EA28;
  v29[4] = a1;
  v27[12] = a1;
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 0x40000000;
  uint64_t v28[2] = sub_2162E9C24;
  void v28[3] = &unk_26426EA48;
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 0x40000000;
  v27[2] = sub_2162E9C34;
  void v27[3] = &unk_26426EA70;
  v27[4] = v40;
  v27[5] = v38;
  v27[6] = v39;
  v27[7] = v37;
  v27[8] = v36;
  v27[9] = v30;
  v27[10] = v32;
  v27[11] = v34;
  (*(void (**)(uint64_t, uint64_t, void *, void *, void *))(*(void *)v2 + 24))(v2, a1 + 1248, v29, v28, v27);
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 16) != v3)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v3 - 8) + 48))(*(void *)(v3 - 8));
      CFStringRef v5 = v4;
      if (v4)
      {
        uint64_t Length = CFStringGetLength(v4);
        unint64_t v9 = *(void ****)(a1 + 624);
        if (v9)
        {
          uint64_t v10 = [**v9 v6:v7];
          sub_216366C90(v10, v11, v12, &v47);
        }
        else
        {
          long long v48 = 0;
          CFAllocatorRef v47 = 0;
          uint64_t v49 = 0;
        }
        CFMutableSetRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x263EFFFA0]);
        CFMutableSetRef v46 = Mutable;
        CFSetRef theSet = *(const __CFSet **)(a1 + 1296);
        uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952));
        *(unsigned char *)(a1 + 120sub_216195B94((const void **)&a9, 0) = 1;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1208));
        *(unsigned char *)(a1 + 1224) = 1;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1232));
        char v15 = (char *)v47;
        int v16 = v48;
        if (v47 != v48)
        {
          char v17 = 0;
          do
          {
            CFIndex v18 = CFStringGetLength(*((CFStringRef *)v15 + 2));
            CFIndex v19 = v18;
            if (v18 <= 64 && Length <= 64)
            {
              uint64_t v21 = *(void **)(v14 + 56);
              int v20 = *(void **)(v14 + 64);
              if (v21 != v20)
              {
                while (*v21 != *((void *)v15 + 1))
                {
                  if (++v21 == v20)
                  {
                    uint64_t v21 = *(void **)(v14 + 64);
                    break;
                  }
                }
              }
              BOOL v22 = (const void *)*((void *)v15 + 2);
              if (v21 == v20)
              {
                v17 |= CFSetContainsValue(theSet, v22) != 0;
              }
              else
              {
                if (v18 == Length)
                {
                  sub_2162EB644(a1, (uint64_t)v22);
                  sub_2162EB728(a1, v5, v5, *((CFStringRef *)v15 + 2));
                }
                if (sub_2162EB644(a1, (uint64_t)v22) >= -8.5)
                {
                  v53.locatiouint64_t n = 0;
                  v53.CFIndex length = Length;
                  CFStringGetCharacters(v5, v53, buffer);
                  v54.locatiouint64_t n = 0;
                  v54.CFIndex length = v19;
                  CFStringGetCharacters(*((CFStringRef *)v15 + 2), v54, v51);
                  CFIndex v23 = *((void *)v15 + 1);
                  *(void *)&long long v45 = v51;
                  *((void *)&v45 + 1) = v19;
                  v43[0] = 0;
                  v43[1] = CFStringCreateWithCharacters(0, buffer, v23);
                  v43[2] = v23;
                  long long v44 = xmmword_21638D630;
                  sub_21630D594((uint64_t)v42, 5, &v45, 0, (uint64_t)v43);
                  operator new();
                }
              }
            }
            v15 += 72;
          }
          while (v15 != v16);
          if (v17) {
            goto LABEL_27;
          }
        }
        CFIndex Count = CFSetGetCount(theSet);
        if (Count == CFArrayGetCount(*(CFArrayRef *)(a1 + 1208)))
        {
          *(unsigned char *)(a1 + 120sub_216195B94((const void **)&a9, 0) = 0;
          if (!Mutable)
          {
LABEL_31:
            if (v47)
            {
              long long v48 = (char *)v47;
              operator delete(v47);
            }
            goto LABEL_33;
          }
        }
        else
        {
LABEL_27:
          uint64_t v25 = *(const void **)(a1 + 1296);
          if (v25) {
            CFRelease(v25);
          }
          *(void *)(a1 + 1296) = CFRetain(Mutable);
          if (!Mutable) {
            goto LABEL_31;
          }
        }
        CFRelease(Mutable);
        goto LABEL_31;
      }
    }
  }
LABEL_33:
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v32, 8);
  _Block_object_dispose(v34, 8);
  if (v35) {
    sub_2161121B0(v35);
  }
  _Block_object_dispose(v36, 8);
  _Block_object_dispose(v37, 8);
  _Block_object_dispose(v38, 8);
  _Block_object_dispose(v39, 8);
  _Block_object_dispose(v40, 8);
}

void sub_2162E76E8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2160F7444(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2162E7830(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  std::string __p = 0;
  int64x2_t v58 = 0;
  uint64_t v59 = 0;
  sub_216182F50(&__p, *(const void **)(a1 + 664), *(void *)(a1 + 672), (uint64_t)(*(void *)(a1 + 672) - *(void *)(a1 + 664)) >> 1);
  uint64_t v5 = *(void *)(a1 + 96) - *(void *)(a1 + 88);
  *(unsigned char *)(a1 + 616) = v5 == 8;
  __int16 v55 = v4;
  uint64_t v6 = v4 & 0x4000;
  uint64_t v8 = __p;
  uint64_t v7 = v58;
  uint64_t v9 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 16) == v9)
  {
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_9;
  }
  char v10 = (*(uint64_t (**)(void))(**(void **)(v9 - 8) + 24))(*(void *)(v9 - 8));
  if (v6) {
    char v11 = v10;
  }
  else {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
LABEL_9:
    if ((v55 & 0x8000) == 0 && v7 != v8)
    {
      uint64_t v12 = (unsigned __int16 *)__p;
      if (__p != v58)
      {
        unint64_t v13 = (char *)__p + 2;
        if ((char *)__p + 2 != (char *)v58)
        {
          unsigned __int16 v14 = *(_WORD *)__p;
          char v15 = (char *)__p + 2;
          do
          {
            unsigned int v17 = *(unsigned __int16 *)v15;
            v15 += 2;
            unsigned __int16 v16 = v17;
            BOOL v18 = v14 >= v17;
            if (v14 <= v17) {
              unsigned __int16 v14 = v16;
            }
            if (!v18) {
              uint64_t v12 = (unsigned __int16 *)v13;
            }
            unint64_t v13 = v15;
          }
          while (v15 != (char *)v58);
        }
      }
      if (v5 >> 3 <= (unint64_t)*v12 + 2) {
        goto LABEL_24;
      }
    }
    goto LABEL_20;
  }
  if (v10)
  {
LABEL_24:
    BOOL v23 = 1;
    goto LABEL_25;
  }
LABEL_20:
  int64_t v19 = v7 - v8;
  uint64_t v20 = *(void *)(a1 + 1088);
  uint64_t v21 = *(void *)(a1 + 1080);
  if (v7 - v8 != v20 - v21 || (v55 & 4) != 0) {
    goto LABEL_24;
  }
  uint64_t v35 = (unsigned __int16 *)__p;
  if (__p == v58)
  {
    BOOL v23 = 0;
  }
  else
  {
    do
    {
      int64_t v36 = v19;
      if (v21 != v20)
      {
        int64_t v36 = 0;
        while (*(unsigned __int16 *)(v21 + v36) != *v35)
        {
          v36 += 2;
          if (v21 + v36 == v20)
          {
            int64_t v36 = v19;
            break;
          }
        }
      }
      uint64_t v37 = v21 + v36;
      BOOL v23 = v37 == v20;
      if (v37 == v20) {
        break;
      }
      ++v35;
    }
    while (v35 != v58);
  }
LABEL_25:
  uint64_t v24 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 16) != v24
    && ((*(uint64_t (**)(void))(**(void **)(v24 - 8) + 24))(*(void *)(v24 - 8)) & 1) != 0
    || (v55 & 0x2000) != 0
    || **(_DWORD **)(a1 + 8) == 5
    || (uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952)),
        uint64_t v26 = *(void *)(v25 + 64),
        v26 == *(void *)(v25 + 56)))
  {
    if (!v23) {
      goto LABEL_84;
    }
    unint64_t v28 = *(unsigned __int16 **)(a1 + 1080);
    LOWORD(v27) = -1;
    goto LABEL_41;
  }
  int v27 = *(_DWORD *)(v26 - 8) - 1;
  unint64_t v28 = *(unsigned __int16 **)(a1 + 1080);
  char v29 = *(unsigned __int16 **)(a1 + 1088);
  uint64_t v30 = v28;
  if (v28 != v29)
  {
    while (*v30 != (unsigned __int16)v27)
    {
      if (++v30 == v29)
      {
        uint64_t v30 = *(unsigned __int16 **)(a1 + 1088);
        break;
      }
    }
  }
  char v31 = v30 == v29 || v23;
  if (v31)
  {
LABEL_41:
    int64_t v32 = a1 + 1080;
    *(void *)(a1 + 1088) = v28;
    if ((void **)(a1 + 1080) != &__p) {
      sub_21618F924((char *)(a1 + 1080), (char *)__p, (uint64_t)v58, ((char *)v58 - (unsigned char *)__p) >> 1);
    }
    if ((_WORD)v27 != 0xFFFF)
    {
      char v33 = *(_WORD **)(a1 + 1088);
      unint64_t v34 = *(void *)(a1 + 1096);
      if ((unint64_t)v33 >= v34)
      {
        unint64_t v38 = *(_WORD **)v32;
        uint64_t v39 = (uint64_t)v33 - *(void *)v32;
        if (v39 <= -3) {
          sub_21610CB04();
        }
        uint64_t v40 = v39 >> 1;
        unint64_t v41 = v34 - (void)v38;
        if (v41 <= (v39 >> 1) + 1) {
          unint64_t v42 = v40 + 1;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v41 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v43 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v43 = v42;
        }
        if (v43)
        {
          long long v44 = (char *)sub_21610FD44(a1 + 1096, v43);
          char v33 = *(_WORD **)(a1 + 1088);
          unint64_t v38 = *(_WORD **)(a1 + 1080);
        }
        else
        {
          long long v44 = 0;
        }
        long long v45 = &v44[2 * v40];
        CFMutableSetRef v46 = &v44[2 * v43];
        *(_WORD *)long long v45 = v27;
        int64_t v32 = (int64_t)(v45 + 2);
        while (v33 != v38)
        {
          __int16 v47 = *--v33;
          *((_WORD *)v45 - 1) = v47;
          v45 -= 2;
        }
        *(void *)(a1 + 108sub_216195B94((const void **)&a9, 0) = v45;
        *(void *)(a1 + 1088) = v32;
        *(void *)(a1 + 1096) = v46;
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *char v33 = v27;
        int64_t v32 = (int64_t)(v33 + 1);
      }
      *(void *)(a1 + 1088) = v32;
    }
    *(unsigned char *)(a1 + 1128) = 1;
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1136));
    long long v48 = *(unsigned __int16 **)(a1 + 1080);
    if (*(unsigned __int16 **)(a1 + 1088) != v48)
    {
      unint64_t v49 = 0xFFFFFFFFLL;
      if (v6)
      {
        int64_t v32 = *(void *)(a1 + 648) - *(void *)(a1 + 640);
        if ((unint64_t)v32 >= 9)
        {
          if (sub_216318DDC(a1 + 80, 0, *v48 + 1)) {
            unint64_t v49 = 0x258uLL / (v32 >> 3);
          }
          else {
            unint64_t v49 = 0xFFFFFFFFLL;
          }
        }
      }
      unint64_t v50 = *(unsigned __int16 **)(a1 + 1080);
      int v51 = *(unsigned __int16 **)(a1 + 1088);
      if (v50 != v51)
      {
        uint64_t v52 = (v6 << 10) | 0x101;
        do
        {
          unint64_t v53 = *v50;
          if ((v55 & 4) == 0 || ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3) - 1 <= v53)
          {
            uint64_t v54 = *(void *)(a1 + 1064);
            v56[0] = MEMORY[0x263EF8330];
            v56[1] = 0x40000000;
            v56[2] = sub_2162E9E74;
            v56[3] = &unk_26426EA90;
            v56[4] = a1;
            v56[5] = a2;
            v56[6] = v49;
            int64_t v32 = v32 & 0xFFFFFFFF00000000 | v52;
            sub_2162DC238(v54, a2, v53, v32, (uint64_t)v56);
          }
          ++v50;
        }
        while (v50 != v51);
      }
    }
  }
LABEL_84:
  *(unsigned char *)(a1 + 616) = 1;
  if (__p)
  {
    int64x2_t v58 = (unsigned __int16 *)__p;
    operator delete(__p);
  }
}

void sub_2162E7D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162E7D38(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*(void *)(a1 + 8) + 25) & 0x40) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 16) == v2 || !*(unsigned char *)(a1 + 40))
    {
      CFStringRef v4 = 0;
    }
    else
    {
      CFStringRef v3 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v2 - 8) + 48))(*(void *)(v2 - 8));
      CFStringRef v4 = v3;
      if (v3 && CFStringGetLength(v3) != 1)
      {
LABEL_13:
        uint64_t result = sub_2162EBB70(a1, 1, 1);
        if (!result) {
          return result;
        }
        CFMutableSetRef v46 = 0;
        __int16 v47 = 0;
        uint64_t v48 = 0;
        char v45 = 0;
        uint64_t v9 = *(uint64_t **)(a1 + 1320);
        char v10 = (__CFString *)operator new(0x20uLL);
        v10->isa = &unk_26C6C8330;
        v10->info = a1;
        v10->data = (char *)&v46;
        v10->CFIndex length = (uint64_t)&v45;
        theString[1] = v10;
        sub_21628A53C(v9, v4, 0, 2u, (uint64_t)&v49, 2, -6.5);
        sub_2161B608C(&v49);
        char v11 = (const void **)v46;
        uint64_t v12 = v47;
        if (v46 == v47)
        {
          if (!sub_2162EBB70(a1, 1, 0)) {
            return (uint64_t)sub_2162EBF24((const void ***)&v46);
          }
          char v11 = (const void **)v46;
          uint64_t v12 = v47;
        }
        char v45 = 0;
        if (v11 == (const void **)v12)
        {
          unint64_t v13 = *(uint64_t **)(a1 + 1320);
          unsigned __int16 v14 = (__CFString *)operator new(0x20uLL);
          v14->isa = &unk_26C6C8330;
          v14->info = a1;
          v14->data = (char *)&v46;
          v14->CFIndex length = (uint64_t)&v45;
          theString[1] = v14;
          sub_21628A53C(v13, v4, 0, 2u, (uint64_t)&v49, 0, -6.5);
          sub_2161B608C(&v49);
          char v11 = (const void **)v46;
          uint64_t v12 = v47;
        }
        if (v11 == (const void **)v12)
        {
          char v45 = 1;
          char v15 = *(uint64_t **)(a1 + 1320);
          unsigned __int16 v16 = (__CFString *)operator new(0x20uLL);
          v16->isa = &unk_26C6C8330;
          v16->info = a1;
          v16->data = (char *)&v46;
          v16->CFIndex length = (uint64_t)&v45;
          theString[1] = v16;
          sub_21628A53C(v15, v4, 0, 2u, (uint64_t)&v49, 1, -8.0);
          sub_2161B608C(&v49);
          char v11 = (const void **)v46;
          uint64_t v12 = v47;
        }
        if (v11 != (const void **)v12) {
          goto LABEL_23;
        }
        char v45 = 0;
        unsigned int v17 = *(uint64_t **)(a1 + 1320);
        BOOL v18 = (__CFString *)operator new(0x20uLL);
        v18->isa = &unk_26C6C8330;
        v18->info = a1;
        v18->data = (char *)&v46;
        v18->CFIndex length = (uint64_t)&v45;
        theString[1] = v18;
        sub_21628A53C(v17, v4, 5, 1u, (uint64_t)&v49, 0, -6.5);
        sub_2161B608C(&v49);
        if (v46 != v47) {
          goto LABEL_23;
        }
        uint64_t v36 = (*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952));
        if ((*(void *)v36 < 2uLL || !*(unsigned char *)(v36 + 10))
          && (!*(unsigned char *)(v36 + 8) && !*(unsigned char *)(v36 + 9) || *(double *)(v36 + 16) <= 9.0))
        {
LABEL_23:
          if (v46 != v47)
          {
            sub_2162ECE3C((uint64_t)v46, v47, 126 - 2 * __clz(((char *)v47 - (char *)v46) >> 5), 1);
            double v19 = *(double *)((*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952))
                            + 16);
            uint64_t v20 = (const void **)v46;
            double v21 = *((double *)v46 + 3);
            if (v11 == (const void **)v12)
            {
              BOOL v23 = 0;
            }
            else
            {
              CFIndex Length = CFStringGetLength(v4);
              if (Length == CFStringGetLength((CFStringRef)v20[1])) {
                goto LABEL_41;
              }
              BOOL v23 = *((unsigned char *)v20 + 16) != 0;
            }
            if (v23 || v19 + v21 > 0.0)
            {
LABEL_41:
              uint64_t v34 = *(void *)(a1 + 24);
              if (*(void *)(a1 + 16) == v34 || !*(unsigned char *)(a1 + 40)) {
                CFStringRef v35 = 0;
              }
              else {
                CFStringRef v35 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v34 - 8) + 48))(*(void *)(v34 - 8));
              }
              sub_2162EB728(a1, v35, (const __CFString *)v20[1], (CFStringRef)*v20);
            }
          }
          return (uint64_t)sub_2162EBF24((const void ***)&v46);
        }
        CFStringRef v39 = 0;
        uint64_t v53 = 0;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        *(_OWORD *)CFStringRef theString = 0u;
        unsigned int v40 = *(_DWORD *)(a1 + 120);
        if (v40 > 5)
        {
          CFIndex v41 = 0;
          goto LABEL_61;
        }
        CFIndex v41 = 0;
        if (((1 << v40) & 0x25) != 0)
        {
          unint64_t v42 = *(void ****)(a1 + 624);
          if (v42)
          {
            sub_216366F18(v42, v37, v38, (uint64_t)&v49);
            CFStringRef v39 = theString[0];
            if (theString[0])
            {
              CFIndex v41 = CFStringGetLength(theString[0]);
              goto LABEL_61;
            }
          }
          else
          {
            CFStringRef v39 = 0;
          }
          CFIndex v41 = 0;
        }
LABEL_61:
        CFIndex v43 = CFStringGetLength(v4);
        if (v41 >= 1 && v41 >= v43)
        {
          double v44 = sub_2162EB644(a1, (uint64_t)v39);
          sub_2162EBDC4((uint64_t *)&v46, v39, v39, 0, v44);
        }
        goto LABEL_23;
      }
    }
    sub_21628B2CC(*(void *)(a1 + 1320));
    goto LABEL_13;
  }
  LOBYTE(v46) = 0;
  BOOL v5 = 0;
  if (sub_2162EBB70(a1, 0, 0))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 16) == v6 || !*(unsigned char *)(a1 + 40)) {
      CFStringRef v7 = 0;
    }
    else {
      CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v6 - 8) + 48))(*(void *)(v6 - 8));
    }
    LOBYTE(v46) = 0;
    uint64_t v24 = *(uint64_t **)(a1 + 1320);
    *(void *)&long long v49 = &unk_26C6C8388;
    *((void *)&v49 + 1) = a1;
    theString[0] = (CFStringRef)&v46;
    theString[1] = (CFStringRef)&v49;
    sub_21628A53C(v24, v7, 0, 2u, (uint64_t)&v49, 0, -6.5);
    sub_2161B608C(&v49);
    if (sub_2162EBB70(a1, 1, 0))
    {
      LOBYTE(v46) = 1;
      uint64_t v25 = *(uint64_t **)(a1 + 1320);
      *(void *)&long long v49 = &unk_26C6C8388;
      *((void *)&v49 + 1) = a1;
      theString[0] = (CFStringRef)&v46;
      theString[1] = (CFStringRef)&v49;
      sub_21628A53C(v25, v7, 0, 2u, (uint64_t)&v49, 1, -8.0);
      sub_2161B608C(&v49);
      BOOL v5 = CFArrayGetCount(*(CFArrayRef *)(a1 + 1232)) != 0;
    }
    else
    {
      BOOL v5 = 0;
    }
    if (sub_2162EBB70(a1, 1, 0))
    {
      LOBYTE(v46) = 0;
      uint64_t v26 = *(uint64_t **)(a1 + 1320);
      *(void *)&long long v49 = &unk_26C6C8388;
      *((void *)&v49 + 1) = a1;
      theString[0] = (CFStringRef)&v46;
      theString[1] = (CFStringRef)&v49;
      sub_21628A53C(v26, v7, 5, 1u, (uint64_t)&v49, 0, -6.5);
      sub_2161B608C(&v49);
    }
  }
  uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 1232));
  if (result)
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1232), 0);
    uint64_t v30 = [ValueAtIndex valueAtIndex:v28, v29];
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 392))(v30);
    if (v5)
    {
      BOOL v32 = 1;
    }
    else
    {
      double v33 = v31;
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952));
      BOOL v32 = v33 + *(double *)(result + 16) > 3.0;
    }
    *(unsigned char *)(a1 + 1312) = v32;
  }
  return result;
}

void sub_2162E84B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162EBF24((const void ***)va);
  _Unwind_Resume(a1);
}

void *sub_2162E852C(void *a1, const void *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = sub_2162D4044(a1, a2, a3, (a3 - (uint64_t)a2) >> 3);
  BOOL v5 = (void *)*a1;
  uint64_t v6 = (void *)a1[1];
  if ((void *)*a1 != v6)
  {
    while (1)
    {
      uint64_t v7 = *v5;
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)*v5 + 16))(*v5);
      if (result == 10) {
        break;
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
      if (result == 11) {
        break;
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
      if (result == 9) {
        break;
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
      if (result == 14) {
        break;
      }
      if (++v5 == v6)
      {
        BOOL v5 = v6;
        goto LABEL_17;
      }
    }
    if (v5 != v6)
    {
      for (uint64_t i = v5 + 1; i != v6; ++i)
      {
        uint64_t v9 = *i;
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)*i + 16))(*i);
        if (result != 10)
        {
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
          if (result != 11)
          {
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
            if (result != 9)
            {
              uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
              if (result != 14) {
                *v5++ = *i;
              }
            }
          }
        }
      }
    }
  }
LABEL_17:
  if (v5 != (void *)a1[1]) {
    a1[1] = v5;
  }
  return result;
}

void sub_2162E876C(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162E878C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 != 17) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int16 *)(v3 + 98);
  if (!*(_WORD *)(v3 + 98)) {
    return 1;
  }
  sub_216322AAC(*(_DWORD *)(v3 + 4));
  uint64_t v6 = *(unsigned __int16 **)(a3 + 8);
  if (v6)
  {
    while (*v6++)
      ;
    LODWORD(v6) = *v6;
  }
  return v4 == v6;
}

void sub_2162E87F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v57 = *(void **)(a1 + 40);
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v37 = a3 - 1;
    uint64_t v38 = a2 + 56 * (a3 - 1);
    uint64_t v39 = *(void *)(v38 + 8);
    if (v39)
    {
      uint64_t v40 = *(void *)(a2 + 56 * v37);
      if (!v40)
      {
        BOOL v59 = 0;
LABEL_63:
        unint64_t v42 = *(unsigned __int8 **)(v38 + 32);
        for (uint64_t i = *(unsigned __int8 **)(v4 + 56 * v37 + 40); v42 != i; v42 += 32)
        {
          unsigned int v44 = (*(uint64_t (**)(void))(**(void **)(*v57 + 8 * *v42) + 16))(*(void *)(*v57 + 8 * *v42));
          if (v44 - 9 >= 8)
          {
            BOOL v45 = v44 > 7 || ((1 << v44) & 0xA1) == 0;
            if (v45 && !v59) {
              continue;
            }
          }
          if (v42[25])
          {
            sub_216212B20(*(_DWORD *)(*(void *)(v5 + 8) + 24), v44, 0);
            operator new[]();
          }
        }
        return;
      }
      uint64_t v4 = a2;
      BOOL v41 = v39 + 1 == (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40);
    }
    else
    {
      BOOL v41 = 1;
    }
    BOOL v59 = v41;
    goto LABEL_63;
  }
  unsigned int v55 = *(_DWORD *)(*(void *)(v5 + 8) + 24);
  uint64_t v6 = (unsigned __int8 **)(a2 + 56 * (a3 - 1));
  uint64_t v7 = v6 + 4;
  uint64_t v47 = *(void *)(a2 + 64);
  unint64_t v8 = (unint64_t)v6[1];
  uint64_t v48 = v6;
  if (v8) {
    unint64_t v8 = v8 - (*(unsigned int (**)(void))(*(void *)*v6 + 40))() + 1;
  }
  BOOL v49 = v8 == 0;
  v67[0] = 0;
  v67[1] = v67;
  v67[2] = 0x3802000000;
  uint64_t v67[3] = sub_2162E9518;
  v67[5] = 0;
  uint64_t v68 = 0;
  v67[4] = sub_2162E9528;
  uint64_t v9 = *v7;
  uint64_t v52 = v4;
  char v10 = *(unsigned __int8 **)(v4 + 56 * (a3 - 1) + 40);
  char v11 = v57;
  if (v9 != v10)
  {
    unsigned int v56 = 0;
    unsigned int v53 = 0;
    uint64_t v12 = 0;
    LOBYTE(v54) = 0;
    char v50 = 1;
    do
    {
      uint64_t v13 = *(void *)(*v11 + 8 * *v9);
      unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
      unsigned int v15 = v14;
      if (!v8 || v14 - 9 < 8 || (v14 <= 7 ? (BOOL v16 = ((1 << v14) & 0xA1) == 0) : (BOOL v16 = 1), !v16))
      {
        if (v9[25])
        {
          int v58 = sub_216212B20(*(_DWORD *)(*(void *)(v5 + 8) + 24), v14, 0);
          if (!v12)
          {
            int v17 = *(_DWORD *)(v5 + 1272);
            uint64_t v12 = sub_2162EF26C(v5 + 1008);
            sub_216304898((uint64_t)v12, v52, a3, v17, (v55 >> 14) & 1, (void *)(v5 + 960));
            unint64_t v18 = *((void *)v12 + 5);
            BOOL v19 = (*(unsigned char *)(*(void *)(v5 + 8) + 25) & 0x40) != 0
               && sub_216318DDC(v5 + 80, v8, *((void *)v12 + 6));
            uint64_t v20 = *((void *)v12 + 5);
            uint64_t v54 = (v18 >> 2) & 1;
            int v21 = (4 * v20) & 8;
            if (v8) {
              int v21 = 0;
            }
            unsigned int v53 = (v20 >> 1) & 6 | v19 | v21 | (*((void *)v12 + 1) == 1) & (v20 >> 4);
          }
          if (v15 > 0x11 || ((1 << v15) & 0x20056) == 0)
          {
            if (v50)
            {
              if ((*(unsigned int (**)(void))(**(void **)(v52 + 56) + 64))(*(void *)(v52 + 56)) == 4)
              {
                int v27 = v56;
                if (*(void *)(*(void *)(v52 + 56) + 120)) {
                  int v27 = v56 | 2;
                }
                unsigned int v56 = v27;
              }
              int v28 = (*(uint64_t (**)(void))(*(void *)*v48 + 64))();
              uint64_t v29 = *v48;
              if (v28 == 4)
              {
                int v30 = v56;
                if (*((void *)v29 + 16)) {
                  int v30 = v56 | 4;
                }
                unsigned int v56 = v30;
              }
              int v31 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v29 + 72))(v29);
              int v32 = v56;
              if (v31 == 7) {
                int v32 = v56 | 0x10;
              }
              unsigned int v56 = v32;
            }
            if ((v55 & 0x4000) != 0
              && *(void *)(*(void *)(*(void *)(v5 + 96) - 8) + 16) != *(void *)(*(void *)(*(void *)(v5 + 96) - 8)
                                                                                          + 8))
            {
              uint64_t v33 = *((void *)v12 + 5);
              if ((v33 & 2) != 0 || (v33 & 4) != 0 && *((void *)v12 + 1) == 1)
              {
                int v34 = v56;
                if (!*(unsigned char *)(*(void *)(*(void *)(v5 + 88) + 8 * v47) + 164)) {
                  int v34 = v56 | 0x20;
                }
                unsigned int v56 = v34;
              }
            }
            uint64_t v35 = 0xFFFFFFFFLL;
            if (v54) {
              uint64_t v35 = 10;
            }
            v66[0] = 0;
            v66[1] = v66;
            void v66[2] = 0x2000000000;
            v66[3] = 0;
            uint64_t v36 = *(void *)(v5 + 952);
            v63[0] = MEMORY[0x263EF8330];
            v63[1] = 0x40000000;
            int v63[2] = sub_2162E9538;
            uint64_t v63[3] = &unk_26426E9E0;
            BOOL v65 = v49;
            v63[6] = v5;
            v63[7] = v12;
            int v64 = v58;
            v63[4] = v67;
            v63[5] = v66;
            char v63[8] = v13;
            v63[9] = v35;
            (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, BOOL, uint64_t, char *, void, void, void *))(*(void *)v36 + 32))(v36, v13, v9 + 8, v8 == 0, v47 + 1, v12, v53, v56, v63);
            _Block_object_dispose(v66, 8);
            char v50 = 0;
          }
          else if (*(unsigned char *)(v5 + 1288))
          {
            unint64_t v23 = v8;
            uint64_t v24 = v10;
            uint64_t v25 = *(void *)(v5 + 16);
            uint64_t v26 = *(void *)(v5 + 24);
            while (1)
            {
              if (v25 == v26)
              {
                v60[0] = MEMORY[0x263EF8330];
                v60[1] = 0x40000000;
                v60[2] = sub_2162E9664;
                v60[3] = &unk_26426EA08;
                v60[4] = v67;
                v60[5] = v5;
                v60[6] = v12;
                unsigned int v61 = v15;
                int v62 = v58;
                (*(void (**)(uint64_t, unsigned __int8 *, void *))(*(void *)v13 + 64))(v13, v9 + 8, v60);
                char v11 = v57;
                char v10 = v24;
                unint64_t v8 = v23;
                goto LABEL_54;
              }
              if ((*(unsigned int (**)(void))(**(void **)v25 + 56))() == 1) {
                break;
              }
              v25 += 8;
            }
            char v11 = v57;
            char v10 = v24;
            unint64_t v8 = v23;
          }
        }
      }
LABEL_54:
      v9 += 32;
    }
    while (v9 != v10);
  }
  _Block_object_dispose(v67, 8);
  if (v68) {
    sub_2161121B0(v68);
  }
}

void sub_2162E9234(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 112);
  if (v3) {
    sub_2161121B0(v3);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2162E92B8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) + 24);
  if ((v4 & 0x4000) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5) {
      LODWORD(v5) = (*(unsigned __int8 *)(v5 + 28) >> 5) & 1;
    }
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  if (a3)
  {
    if (v5) {
      return 0;
    }
    if ((v4 & 0x4000) != 0 && (*(_DWORD *)(a2 + 8) - 4) <= 2)
    {
      uint64_t v12 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 952) + 104))(*(void *)(a1 + 952)) + 24);
      return v12 && v12 == a2;
    }
    if ((unint64_t)CFArrayGetCount(*(CFArrayRef *)(a1 + 1184)) >= 6 && *(_DWORD *)(a2 + 8) != 8)
    {
      uint64_t v16 = **(void **)(a2 + 16);
      if (!v16 || *(void *)(v16 + 8) <= 2uLL)
      {
        unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        if ((v4 & 0x4000) != 0) {
          unsigned int v18 = 10111;
        }
        else {
          unsigned int v18 = 11001;
        }
        return v17 < v18;
      }
    }
    return 1;
  }
  uint64_t v7 = **(void **)(a2 + 16);
  if (!v7) {
    return 1;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if ((*(unsigned char *)(v7 + 40) & 0x10) == 0 || *(float *)(v7 + 56) >= 1.0)
  {
    char v14 = v5 ^ 1;
    if (v8 != 1) {
      char v14 = 1;
    }
    if ((v14 & 1) == 0)
    {
      unint64_t v15 = *(void *)(a1 + 96) - *(void *)(a1 + 88);
      BOOL result = v15 < 9;
      if (v15 > 8 || (v4 & 0x4000) == 0) {
        return result;
      }
LABEL_42:
      if ((*(void *)(v7 + 40) & 0x88) == 0x80)
      {
        unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        unsigned int v18 = 10001;
        return v17 < v18;
      }
      return 1;
    }
LABEL_41:
    if ((v4 & 0x4000) == 0) {
      return 1;
    }
    goto LABEL_42;
  }
  if (v8 == 1 || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) & 0x802) != 0) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 8) == 8) {
    goto LABEL_41;
  }
  int v9 = v4 & 0x4000;
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  BOOL result = v10 < 0x2711;
  if (v10 <= 0x2710 && v9 != 0) {
    goto LABEL_42;
  }
  return result;
}

__n128 sub_2162E9518(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4sub_216195B94((const void **)&a9, 0) = result;
  *(void *)(a2 + 4sub_216195B94((const void **)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void sub_2162E9528(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_2161121B0(v1);
  }
}

void sub_2162E9538(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (*(unsigned char *)(a1 + 84))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (*(unsigned char *)(v4 + 1288))
    {
      if (sub_2162E92B8(*(void *)(a1 + 48), a2, 0))
      {
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
        if (!*(void *)(v7 + 40))
        {
          sub_2162EE72C((uint64_t *)&v15, *(void **)(a1 + 56), *(int **)(v4 + 8), (uint64_t *)(v4 + 16));
          uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
          int v9 = *(std::__shared_weak_count **)(v8 + 48);
          *(_OWORD *)(v8 + 4sub_216195B94((const void **)&a9, 0) = v15;
          if (v9) {
            sub_2161121B0(v9);
          }
          uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
        }
        uint64_t v10 = v7 + 40;
        uint64_t v11 = *(unsigned int *)(a1 + 80);
        int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64));
        sub_2162E48F8(v4 + 1152, a2, v10, v11, v12);
        uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v14 = *(void *)(v13 + 24) + 1;
        *(void *)(v13 + 24) = v14;
        if (v14 == *(void *)(a1 + 72)) {
          *a3 = 1;
        }
      }
    }
  }
}

BOOL sub_2162E9664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  BOOL result = sub_2162E878C(v4, *(_DWORD *)(a1 + 56), a2);
  if (result)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    if (!*(void *)(v6 + 40))
    {
      sub_2162EE72C((uint64_t *)&v11, *(void **)(a1 + 48), *(int **)(v4 + 8), (uint64_t *)(v4 + 16));
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v8 = *(std::__shared_weak_count **)(v7 + 48);
      *(_OWORD *)(v7 + 4sub_216195B94((const void **)&a9, 0) = v11;
      if (v8) {
        sub_2161121B0(v8);
      }
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    }
    int v10 = *(_DWORD *)(a1 + 56);
    uint64_t v9 = *(unsigned int *)(a1 + 60);
    sub_2162E466C(v4 + 1152, a2, v6 + 40, v9, v10);
  }
  return result;
}

uint64_t sub_2162E972C(uint64_t result)
{
  if (*(unsigned char *)(result + 52))
  {
    if (*(unsigned char *)(*(void *)(result + 32) + 1288)) {
      operator new();
    }
  }
  return result;
}

void sub_2162E9810(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40F5BA52C5);
  _Unwind_Resume(a1);
}

BOOL sub_2162E9848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL result = sub_2162E878C(v4, *(_DWORD *)(a1 + 56), a2);
  if (result)
  {
    int v7 = *(_DWORD *)(a1 + 56);
    uint64_t v6 = *(unsigned int *)(a1 + 60);
    sub_2162E466C(v4 + 1152, a2, a1 + 40, v6, v7);
  }
  return result;
}

uint64_t sub_2162E98BC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4sub_216195B94((const void **)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2162E98D8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_2161121B0(v1);
  }
}

void sub_2162E98E8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
    if (!*(void *)(v16 + 40))
    {
      sub_2162EE72C((uint64_t *)&v33, *(void **)(a1 + 64), *(int **)(v5 + 8), (uint64_t *)(v5 + 16));
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
      unsigned int v18 = *(std::__shared_weak_count **)(v17 + 48);
      *(_OWORD *)(v17 + 4sub_216195B94((const void **)&a9, 0) = v33;
      if (v18) {
        sub_2161121B0(v18);
      }
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
    }
    int v19 = *(unsigned __int8 *)(a1 + 97);
    uint64_t v20 = v16 + 40;
    uint64_t v21 = *(unsigned int *)(a1 + 88);
    int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
    if (v19) {
      uint64_t v12 = v5 + 1152;
    }
    else {
      uint64_t v12 = v5 + 1128;
    }
    uint64_t v13 = a2;
    uint64_t v14 = v20;
    uint64_t v15 = v21;
LABEL_23:
    sub_2162E466C(v12, v13, v14, v15, v11);
  }
  if (!*(unsigned char *)(a1 + 97))
  {
    if (*(void *)(a1 + 80) != 0xFFFFFFFFLL)
    {
      uint64_t v22 = *(void *)a2;
      int v23 = *(_DWORD *)(a1 + 92);
      if (v23)
      {
        int v24 = *(unsigned __int16 *)(v22 + 4);
        if ((v24 & 0x80) != 0) {
          goto LABEL_40;
        }
        if ((v23 & 2) == 0)
        {
          if ((v23 & 8) != 0)
          {
            if ((~v24 & 0x300) != 0) {
              goto LABEL_41;
            }
          }
          else if ((v23 & 4) == 0 || (v24 & 0x200) == 0)
          {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        if ((v24 & 0x400) != 0) {
LABEL_40:
        }
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      }
      else
      {
        if ((v23 & 2) != 0)
        {
          __int16 v25 = *(_WORD *)(v22 + 4);
          if ((v23 & 0x10) != 0)
          {
            if ((v25 & 0x2000) == 0) {
              goto LABEL_41;
            }
          }
          else if ((v25 & 0x40) == 0)
          {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        if ((v23 & 8) == 0)
        {
          if ((v23 & 4) == 0) {
            goto LABEL_41;
          }
          LOWORD(v22) = *(_WORD *)(v22 + 4);
          if ((v22 & 0x20) == 0) {
            goto LABEL_41;
          }
LABEL_36:
          if ((v23 & 0x20) != 0 && (__int16)v22 < 0) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        LODWORD(v22) = *(unsigned __int16 *)(v22 + 4);
        if ((~v22 & 0x210) == 0) {
          goto LABEL_36;
        }
      }
    }
LABEL_41:
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
      if (!*(void *)(v26 + 40))
      {
        sub_2162EE72C((uint64_t *)&v33, *(void **)(a1 + 64), *(int **)(v5 + 8), (uint64_t *)(v5 + 16));
        uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 8);
        int v28 = *(std::__shared_weak_count **)(v27 + 48);
        *(_OWORD *)(v27 + 4sub_216195B94((const void **)&a9, 0) = v33;
        if (v28) {
          sub_2161121B0(v28);
        }
        uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
      }
      uint64_t v29 = v5 + 1128;
      uint64_t v30 = v26 + 40;
      uint64_t v31 = *(unsigned int *)(a1 + 88);
      int v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
      sub_2162E466C(v29, a2, v30, v31, v32);
    }
    *a3 = 1;
    return;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    sub_2162EE72C((uint64_t *)&v33, *(void **)(a1 + 64), *(int **)(v5 + 8), (uint64_t *)(v5 + 16));
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    int v7 = *(std::__shared_weak_count **)(v6 + 48);
    *(_OWORD *)(v6 + 4sub_216195B94((const void **)&a9, 0) = v33;
    if (v7) {
      sub_2161121B0(v7);
    }
  }
  if ((*(_WORD *)(*(void *)a2 + 4) & 8) == 0)
  {
    uint64_t v8 = v5 + 1152;
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
    uint64_t v10 = *(unsigned int *)(a1 + 88);
    int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
    uint64_t v12 = v8;
    uint64_t v13 = a2;
    uint64_t v14 = v9;
    uint64_t v15 = v10;
    goto LABEL_23;
  }
}

uint64_t sub_2162E9C14(uint64_t a1, uint64_t a2)
{
  return sub_216319408(*(void *)(a1 + 32) + 80, a2 - 1);
}

uint64_t sub_2162E9C24(uint64_t a1, uint64_t a2)
{
  return sub_21631D388(*(void *)(a1 + 32) + 80, a2, 4uLL);
}

void sub_2162E9C34(void *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = a1[12];
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    *(unsigned char *)(v6 + 1176) = 1;
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v6 + 1184));
    CFSetRemoveAllValues(*(CFMutableSetRef *)(v6 + 1296));
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
  }
  if (a2 && *(void *)(v6 + 1264) && sub_2162E92B8(v6, a2, 1))
  {
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a1[5] + 8);
    if (v7 != *(void *)(v8 + 24))
    {
      *(void *)(v8 + 24) = v7;
      *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)v7;
      uint64_t v9 = *(void *)(*(void *)(a1[6] + 8) + 24);
      if (v9)
      {
        BOOL v10 = (*(unsigned char *)(v9 + 40) & 4) == 0;
        uint64_t v11 = 10;
        if (v10) {
          uint64_t v11 = 0xFFFFFFFFLL;
        }
      }
      else
      {
        uint64_t v11 = 0xFFFFFFFFLL;
      }
      *(void *)(*(void *)(a1[7] + 8) + 24) = v11;
      *(void *)(*(void *)(a1[8] + 8) + 24) = 0;
      *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = 1;
      *(unsigned char *)(*(void *)(a1[10] + 8) + 24) = *(void *)(*(void *)(a1[6] + 8) + 24) == 0;
    }
    if (*(unsigned char *)(*(void *)(a1[9] + 8) + 24))
    {
      uint64_t v12 = *(int **)(v6 + 8);
      uint64_t v13 = operator new(0x110uLL);
      v13[1] = 0;
      v13[2] = 0;
      *uint64_t v13 = &unk_26C6C95B0;
      uint64_t v14 = sub_2162F4E2C((uint64_t)(v13 + 3), a2, 0, v12, (uint64_t *)(v6 + 16));
      uint64_t v15 = *(void *)(a1[11] + 8);
      uint64_t v16 = *(std::__shared_weak_count **)(v15 + 48);
      *(void *)(v15 + 4sub_216195B94((const void **)&a9, 0) = v14;
      *(void *)(v15 + 48) = v13;
      if (v16) {
        sub_2161121B0(v16);
      }
      *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = 0;
    }
    sub_2162E48F8(v6 + 1176, a2, *(void *)(a1[11] + 8) + 40, *(unsigned int *)(v7 + 32), *(_DWORD *)(v7 + 36));
    if (!*(unsigned char *)(*(void *)(a1[10] + 8) + 24)) {
      *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = 1;
    }
    uint64_t v17 = *(void *)(a1[8] + 8);
    uint64_t v18 = *(void *)(v17 + 24) + 1;
    *(void *)(v17 + 24) = v18;
    if (v18 == *(void *)(*(void *)(a1[7] + 8) + 24)) {
      *a3 = 1;
    }
  }
}

void sub_2162E9E5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2162E9E74(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  uint64_t v6 = (void *)a1[5];
  unint64_t v7 = a1[6];
  int v8 = *(_DWORD *)(v5 + 1272);
  int v9 = (*(_DWORD *)(*(void *)(v5 + 8) + 24) >> 14) & 1;
  BOOL v10 = sub_2162EF26C(v5 + 1008);
  uint64_t v31 = sub_216304898((uint64_t)v10, a2, a3, v8, v9, (void *)(v5 + 960));
  if ((*(unsigned char *)(v31 + 40) & 0x10) == 0
    || a3 != 2
    || *(float *)(v31 + 56) >= 1.0
    || (uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(v5 + 952) + 104))(*(void *)(v5 + 952))) == 0
    || (uint64_t v12 = *(unsigned __int16 **)(v11 + 32), v12 == *(unsigned __int16 **)(v11 + 40))
    || !*(void *)(v31 + 8)
    || *v12 == **(unsigned __int16 **)(v31 + 16))
  {
    BOOL v30 = 0;
    uint64_t v13 = a3 - 1;
    uint64_t v14 = (unsigned __int8 **)(a2 + 56 * (a3 - 1) + 32);
    unsigned int v15 = *(_DWORD *)(*(void *)(v5 + 8) + 24);
    uint64_t v16 = *(void *)(v31 + 40);
    if ((v15 & 0x4000) != 0 && v7 != 0xFFFFFFFF && (v16 & 4) == 0)
    {
      uint64_t v17 = *(void *)(a2 + 64) + 1;
      uint64_t v18 = *(void *)(v5 + 24);
      if (*(void *)(v5 + 16) == v18 || !*(unsigned char *)(v5 + 40)) {
        CFStringRef v19 = 0;
      }
      else {
        CFStringRef v19 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v18 - 8) + 48))(*(void *)(v18 - 8));
      }
      BOOL v30 = v17 == CFStringGetLength(v19);
    }
    if ((v16 & 4) != 0) {
      unint64_t v20 = 20;
    }
    else {
      unint64_t v20 = v7;
    }
    uint64_t v43 = 0;
    unsigned int v44 = &v43;
    uint64_t v45 = 0x2000000000;
    uint64_t v46 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = &v39;
    uint64_t v41 = 0x2000000000;
    char v42 = 1;
    v37[0] = 0;
    v37[1] = v37;
    v37[2] = 0x3802000000;
    void v37[3] = sub_2162E9518;
    v37[5] = 0;
    uint64_t v38 = 0;
    void v37[4] = sub_2162E9528;
    uint64_t v21 = *v14;
    uint64_t v22 = *(unsigned __int8 **)(a2 + 56 * v13 + 40);
    if (v21 != v22)
    {
      int v23 = (v15 >> 18) & 0x10 | (v15 >> 14) & 1 | v16 & 4 | (8 * ((v16 >> 1) & 1)) | (v16 >> 2) & 2;
      do
      {
        uint64_t v24 = *(void *)(*v6 + 8 * *v21);
        unsigned int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24) - 9;
        if (v25 < 9 && ((0x127u >> v25) & 1) != 0)
        {
          char v26 = 0;
        }
        else
        {
          if (!*((unsigned char *)v40 + 24)) {
            goto LABEL_28;
          }
          char v26 = 1;
        }
        int v27 = *(_DWORD *)(*(void *)(v5 + 8) + 24);
        int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
        if (v21[25])
        {
          int v29 = sub_216212B20(v27, v28, 0);
          v32[0] = MEMORY[0x263EF8330];
          v32[1] = 0x40000000;
          v32[2] = sub_2162E98E8;
          void v32[3] = &unk_2642674D0;
          char v35 = v26;
          BOOL v36 = v30;
          v32[8] = v31;
          v32[9] = v24;
          v32[10] = v20;
          int v33 = v29;
          int v34 = v23;
          v32[4] = v37;
          v32[5] = &v39;
          v32[6] = &v43;
          v32[7] = v5;
          (*(void (**)(uint64_t, unsigned __int8 *, void *))(*(void *)v24 + 64))(v24, v21 + 8, v32);
          if (v44[3] >= v20) {
            break;
          }
        }
LABEL_28:
        v21 += 32;
      }
      while (v21 != v22);
    }
    _Block_object_dispose(v37, 8);
    if (v38) {
      sub_2161121B0(v38);
    }
    _Block_object_dispose(&v39, 8);
    _Block_object_dispose(&v43, 8);
  }
}

void sub_2162EA278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  _Block_object_dispose(&a25, 8);
  if (a31) {
    sub_2161121B0(a31);
  }
  _Block_object_dispose((const void *)(v31 - 168), 8);
  _Block_object_dispose((const void *)(v31 - 136), 8);
  _Unwind_Resume(a1);
}

BOOL sub_2162EA2BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 16) != v2
    && ((*(uint64_t (**)(void))(**(void **)(v2 - 8) + 24))(*(void *)(v2 - 8)) & 1) != 0)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(void *)(a1 + 8) + 24) & 0x8004800) != 0
    || (unint64_t)CFArrayGetCount(*(CFArrayRef *)(a1 + 1160)) > 0xA)
  {
    return 0;
  }
  uint64_t v3 = *(unsigned __int16 **)(a1 + 664);
  uint64_t v4 = *(unsigned __int16 **)(a1 + 672) == v3 ? 1 : *v3 + 1;
  return (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3 != v4
      && (*(unsigned char *)(*(void *)(a1 + 8) + 25) & 0x40) == 0;
}

void sub_2162EA388(void *a1, void *a2, char a3)
{
  if (*a2 != a2[1])
  {
    uint64_t v6 = a1[6];
    uint64_t v7 = *(void *)(a1[1] + 64);
    if (v7
      && (uint64_t v8 = *(void *)(v7 + 8)) != 0
      && sub_216192194(v8, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x263EFFB40])
    {
      sub_2162E852C(&v22, *(const void **)(v6 + 192), *(void *)(v6 + 200));
    }
    else
    {
      uint64_t v22 = 0;
      int v23 = 0;
      uint64_t v24 = 0;
      sub_2162D4044(&v22, *(const void **)(v6 + 192), *(void *)(v6 + 200), (uint64_t)(*(void *)(v6 + 200) - *(void *)(v6 + 192)) >> 3);
    }
    int v9 = v22;
    if (v22 != v23)
    {
      int v10 = (*(_DWORD *)(a1[1] + 24) >> 14) & 1;
      uint64_t v11 = (uint64_t)(a1[12] - a1[11]) >> 3;
      v21[0] = 0;
      v21[1] = v21;
      void v21[2] = 0x2000000000;
      void v21[3] = 0xFFEFFFFFFFFFFFFFLL;
      v19[0] = 0;
      v19[1] = v19;
      void v19[2] = 0x2000000000;
      __int16 v20 = -1;
      v18[0] = 0;
      v18[1] = v18;
      void v18[2] = 0x2000000000;
      v18[3] = 0;
      v16[0] = 0;
      v16[1] = v16;
      void v16[2] = 0x2000000000;
      char v17 = 0;
      uint64_t v12 = (void *)a1[133];
      v13[0] = MEMORY[0x263EF8330];
      v13[1] = 0x40000000;
      v13[2] = sub_2162EA5A8;
      void v13[3] = &unk_26426EB00;
      char v14 = v10;
      void v13[8] = a1;
      v13[9] = v11;
      v13[4] = v19;
      void v13[5] = v21;
      v13[6] = v16;
      void v13[7] = v18;
      char v15 = a3;
      sub_2162DCE7C(v12, &v22, (uint64_t)a2, (uint64_t)v13);
      _Block_object_dispose(v16, 8);
      _Block_object_dispose(v18, 8);
      _Block_object_dispose(v19, 8);
      _Block_object_dispose(v21, 8);
      int v9 = v22;
    }
    if (v9)
    {
      int v23 = v9;
      operator delete(v9);
    }
  }
}

void sub_2162EA55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 136), 8);
  _Block_object_dispose((const void *)(v12 - 104), 8);
  char v14 = *(void **)(v12 - 72);
  if (v14)
  {
    *(void *)(v12 - 64) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2162EA5A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v13 = result;
  uint64_t v14 = *(void *)(result + 64);
  uint64_t v15 = *(void *)(a2 + 8);
  if (v15 && (BOOL result = (*(uint64_t (**)(void))(**(void **)a2 + 40))(), v15 != result - 1)
    || (uint64_t v16 = *a5) == 0
    || (*(_WORD *)(v16 + 4) & 0x800) != 0)
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(v13 + 48) + 8) + 24) && !*(unsigned char *)(v13 + 81))
    {
      uint64_t v31 = a7;
      int v25 = *(_DWORD *)(v14 + 1272);
      int v26 = *(unsigned __int8 *)(v13 + 80);
      int v27 = sub_2162EF26C(v14 + 1008);
      int v28 = v26;
      a7 = v31;
      sub_216304D08((uint64_t)v27, (_WORD *)a2, a3, a4, v25, v28, (void *)(v14 + 960));
      BOOL result = (*(uint64_t (**)(void, void, char *, uint64_t, uint64_t *, uint64_t, void *))(**(void **)(v14 + 952) + 56))(*(void *)(v14 + 952), *(void *)(v13 + 72), v27, a6, a5, 1, &unk_26C6CA080);
      ++*(void *)(*(void *)(*(void *)(v13 + 56) + 8) + 24);
    }
  }
  else if (a6 == 9 {
         || *(unsigned __int16 *)(v16 + 6) < *(unsigned __int16 *)(*(void *)(*(void *)(v13 + 32) + 8)
  }
                                                                               + 24))
  {
    BOOL v30 = a7;
    int v17 = *(_DWORD *)(v14 + 1272);
    int v18 = *(unsigned __int8 *)(v13 + 80);
    __int16 v29 = *(_WORD *)(v16 + 6);
    uint64_t v19 = sub_2162EF26C(v14 + 1008);
    int v20 = v17;
    a7 = v30;
    sub_216304D08((uint64_t)v19, (_WORD *)a2, a3, a4, v20, v18, (void *)(v14 + 960));
    uint64_t v21 = *(void *)(v14 + 952);
    uint64_t v22 = *(void *)(v13 + 72);
    v32[0] = MEMORY[0x263EF8330];
    v32[1] = 0x40000000;
    v32[2] = sub_2162EA838;
    void v32[3] = &unk_26426EAB8;
    uint64_t v36 = v14;
    uint64_t v37 = v19;
    int v38 = a6;
    long long v33 = *(_OWORD *)(v13 + 40);
    BOOL v40 = a6 == 9;
    uint64_t v23 = *(void *)(v13 + 32);
    __int16 v39 = v29;
    uint64_t v24 = *(void *)(v13 + 56);
    uint64_t v34 = v23;
    uint64_t v35 = v24;
    BOOL result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t *, void, void *))(*(void *)v21 + 56))(v21, v22, v19, a6, a5, 0, v32);
  }
  if (*(void *)(*(void *)(*(void *)(v13 + 56) + 8) + 24) >= 0x33uLL) {
    *a7 = 1;
  }
  return result;
}

void sub_2162EA838(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v4 = *(void *)(v3 + 72);
  if (v4) {
    uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  if (sub_21630B6B0(a2, v5, *(void *)(v3 + 64) + 48) > *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    operator new();
  }
}

void sub_2162EA98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162EA9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x3802000000;
  void v22[3] = sub_2162E9518;
  v22[5] = 0;
  uint64_t v23 = 0;
  v22[4] = sub_2162E9528;
  uint64_t v4 = a2 + 56 * a3;
  uint64_t v5 = *(void *)(v4 - 24);
  uint64_t v6 = *(void *)(v4 - 16);
  if (v5 != v6)
  {
    int v9 = 0;
    uint64_t v10 = v5 + 8;
    do
    {
      uint64_t v11 = v10 - 8;
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8 * *(unsigned __int8 *)(v10 - 8));
      int v13 = *(_DWORD *)(*(void *)(v3 + 8) + 24);
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
      int v15 = sub_216212B20(v13, v14, 0);
      if (*(unsigned char *)(v10 + 17))
      {
        int v16 = v15;
        if (!v9)
        {
          int v17 = *(_DWORD *)(v3 + 1272);
          int v9 = sub_2162EF26C(v3 + 1008);
          sub_216304898((uint64_t)v9, a2, a3, v17, 0, (void *)(v3 + 960));
        }
        v19[0] = MEMORY[0x263EF8330];
        v19[1] = 0x40000000;
        void v19[2] = sub_2162EABFC;
        void v19[3] = &unk_26426EB28;
        char v21 = *(unsigned char *)(a1 + 64);
        v19[4] = v22;
        v19[5] = v3;
        int v20 = v16;
        v19[6] = v9;
        v19[7] = v12;
        v19[8] = a3;
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v12 + 64))(v12, v10, v19);
      }
      v10 += 32;
    }
    while (v11 + 32 != v6);
  }
  _Block_object_dispose(v22, 8);
  if (v23) {
    sub_2161121B0(v23);
  }
}

void sub_2162EABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a29) {
    sub_2161121B0(a29);
  }
  _Unwind_Resume(a1);
}

void sub_2162EABFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 76))
  {
    if ((*(_WORD *)(*(void *)a2 + 4) & 0x2000) != 0) {
      return;
    }
  }
  else if ((*(_WORD *)(*(void *)a2 + 4) & 0x40) != 0)
  {
    return;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    sub_2162EE72C(v12, *(void **)(a1 + 48), *(int **)(v4 + 8), (uint64_t *)(v4 + 16));
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 48);
    *(_OWORD *)(v5 + 4sub_216195B94((const void **)&a9, 0) = *(_OWORD *)v12;
    if (v6) {
      sub_2161121B0(v6);
    }
  }
  uint64_t v7 = sub_216322AAC(*(_DWORD *)(*(void *)(v4 + 8) + 4));
  unsigned int v8 = *(unsigned __int16 *)(*(void *)a2 + 6);
  if (*(unsigned char *)(a1 + 76) && *(void *)(*(void *)(a1 + 48) + 8) == 2) {
    unsigned int v8 = (int)((double)v8 * 0.9);
  }
  sub_21630D198((uint64_t)v12, *(void *)a2, *(_WORD **)(a2 + 8), v7, 0, *(uint64_t **)(v4 + 8), 0, 0);
  v12[0] = (uint64_t)&unk_26C6C70E0;
  __int16 v15 = v8;
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
  sub_2162E48F8(v4 + 1152, (uint64_t)v12, v9 + 40, v10, v11);
  if ((unint64_t)(*(void *)(a1 + 64) - 6) <= 0xFFFFFFFFFFFFFFFALL) {
    *(unsigned char *)(v4 + 1312) = 1;
  }
  v12[0] = (uint64_t)&unk_26C6C7160;
  if (__p)
  {
    int v14 = __p;
    operator delete(__p);
  }
}

void sub_2162EADB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2162EADEC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4sub_216195B94((const void **)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return sub_2162D4044(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
}

void sub_2162EAE08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_2162EAE20(void *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v24 = 0;
  int v25 = &v24;
  uint64_t v26 = 0x4002000000;
  int v27 = sub_2162EB04C;
  int v28 = sub_2162EB070;
  std::string __p = 0;
  BOOL v30 = 0;
  uint64_t v31 = 0;
  if (!a2) {
    goto LABEL_8;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  while (v5 != v6)
  {
    if (!(*(unsigned int (**)(void))(**(void **)v5 + 56))()) {
      goto LABEL_8;
    }
    v5 += 8;
  }
  if (a1[103]) {
    BOOL v7 = a1[110] < 1;
  }
  else {
LABEL_8:
  }
    BOOL v7 = 0;
  uint64_t v8 = a1[119];
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 0x40000000;
  v22[2] = sub_2162EB088;
  void v22[3] = &unk_26426EB50;
  BOOL v23 = v7;
  v22[4] = &v24;
  v22[5] = a1;
  (*(void (**)(uint64_t, void *))(*(void *)v8 + 80))(v8, v22);
  if (v7)
  {
    uint64_t v9 = (double *)v25[5];
    uint64_t v10 = (double *)v25[6];
    unint64_t v11 = 126 - 2 * __clz(((char *)v10 - (char *)v9) >> 4);
    if (v10 == v9) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v11;
    }
    sub_2162EC13C(v9, v10, v12, 1);
  }
  int v13 = v25;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  int v14 = (char *)v13[5];
  __int16 v15 = (char *)v13[6];
  uint64_t v16 = v15 - v14;
  if (v15 != v14)
  {
    if (v16 < 0) {
      sub_21610CB04();
    }
    int v17 = sub_21620DECC(v16 >> 4);
    uint64_t v18 = 0;
    *a3 = v17;
    a3[1] = v17;
    a3[2] = &v17[v19];
    int v20 = v17;
    do
    {
      long long v21 = *(_OWORD *)v14;
      v14 += 16;
      *v20++ = v21;
      ++v18;
    }
    while (v14 != v15);
    a3[1] = &v17[v18];
  }
  _Block_object_dispose(&v24, 8);
  if (__p)
  {
    BOOL v30 = __p;
    operator delete(__p);
  }
}

void sub_2162EB01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_2162EB04C(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_216195B94((const void **)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2162EB070(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_2162EB088(uint64_t a1, void *a2, __n128 a3)
{
  double v3 = a3.n128_f64[0];
  if (!*(unsigned char *)(a1 + 48))
  {
    unint64_t v11 = *(void **)(*(void *)(a1 + 32) + 8);
    unint64_t v13 = v11[6];
    unint64_t v12 = v11[7];
    if (v13 < v12) {
      goto LABEL_42;
    }
    uint64_t v14 = v11[5];
    uint64_t v15 = (uint64_t)(v13 - v14) >> 4;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60) {
      goto LABEL_60;
    }
    uint64_t v17 = v12 - v14;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v19 = (char *)sub_21620DECC(v18);
    int v20 = &v19[16 * v15];
    uint64_t v22 = &v19[16 * v21];
    *(void *)int v20 = a2;
    *((double *)v20 + 1) = v3;
    BOOL v23 = v20 + 16;
    int v25 = (char *)v11[5];
    uint64_t v24 = (char *)v11[6];
    if (v24 != v25)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v24 - 1);
        v20 -= 16;
        v24 -= 16;
      }
      while (v24 != v25);
LABEL_54:
      uint64_t v24 = (char *)v11[5];
    }
LABEL_55:
    void v11[5] = v20;
    v11[6] = v23;
    void v11[7] = v22;
    if (v24) {
      operator delete(v24);
    }
LABEL_57:
    v11[6] = v23;
    return;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  std::string __dst = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  if (a2)
  {
    BOOL v7 = a2;
    do
    {
      uint64_t v8 = *(void *)(*v7 + 16);
      if (v8) {
        sub_216185BD8((uint64_t)&__dst, (uint64_t)__dst, *(char **)(*(void *)v8 + 16), (char *)(*(void *)(*(void *)v8 + 16) + 2 * *(void *)(*(void *)v8 + 8)), *(void *)(*(void *)v8 + 8));
      }
      BOOL v7 = (void *)v7[1];
    }
    while (v7);
    uint64_t v9 = (char *)__dst;
    uint64_t v10 = v52;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v27 = v10 - v9;
  BOOL v26 = v27 == 0;
  uint64_t v28 = v27 >> 1;
  unint64_t v29 = 0;
  if (!v26)
  {
    BOOL v30 = v9;
    uint64_t v31 = v28;
    do
    {
      unsigned int v32 = *(unsigned __int16 *)v30;
      v30 += 2;
      unint64_t v29 = v32 + 542 * v29;
      --v31;
    }
    while (v31);
  }
  int8x8_t v33 = *(int8x8_t *)(v6 + 808);
  double v34 = 5.0;
  if (!*(void *)&v33) {
    goto LABEL_38;
  }
  uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33);
  v35.i16[0] = vaddlv_u8(v35);
  if (v35.u32[0] > 1uLL)
  {
    unint64_t v36 = v29;
    if (*(void *)&v33 <= v29) {
      unint64_t v36 = v29 % *(void *)&v33;
    }
  }
  else
  {
    unint64_t v36 = (*(void *)&v33 - 1) & v29;
  }
  uint64_t v37 = *(double ***)(*(void *)(v6 + 800) + 8 * v36);
  if (!v37 || (int v38 = *v37) == 0)
  {
LABEL_38:
    int v40 = 0;
    if (!v9) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  while (1)
  {
    unint64_t v39 = *((void *)v38 + 1);
    if (v39 == v29) {
      break;
    }
    if (v35.u32[0] > 1uLL)
    {
      if (v39 >= *(void *)&v33) {
        v39 %= *(void *)&v33;
      }
    }
    else
    {
      v39 &= *(void *)&v33 - 1;
    }
    if (v39 != v36) {
      goto LABEL_38;
    }
LABEL_37:
    int v38 = *(double **)v38;
    if (!v38) {
      goto LABEL_38;
    }
  }
  if (*((void *)v38 + 2) != v29) {
    goto LABEL_37;
  }
  double v34 = -(v38[3] - (double)(unint64_t)v28 * -0.35);
  int v40 = 1;
  if (v9)
  {
LABEL_39:
    uint64_t v52 = v9;
    operator delete(v9);
  }
LABEL_40:
  if (v40)
  {
    unint64_t v11 = *(void **)(*(void *)(a1 + 32) + 8);
    double v3 = v34 + v3;
    unint64_t v13 = v11[6];
    unint64_t v41 = v11[7];
    if (v13 < v41)
    {
LABEL_42:
      *(void *)unint64_t v13 = a2;
      *(double *)(v13 + 8) = v3;
      BOOL v23 = (char *)(v13 + 16);
      goto LABEL_57;
    }
    uint64_t v43 = v11[5];
    uint64_t v44 = (uint64_t)(v13 - v43) >> 4;
    unint64_t v45 = v44 + 1;
    if (!((unint64_t)(v44 + 1) >> 60))
    {
      uint64_t v46 = v41 - v43;
      if (v46 >> 3 > v45) {
        unint64_t v45 = v46 >> 3;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v45;
      }
      uint64_t v48 = (char *)sub_21620DECC(v47);
      int v20 = &v48[16 * v44];
      uint64_t v22 = &v48[16 * v49];
      *(void *)int v20 = a2;
      *((double *)v20 + 1) = v3;
      BOOL v23 = v20 + 16;
      char v50 = (char *)v11[5];
      uint64_t v24 = (char *)v11[6];
      if (v24 != v50)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v24 - 1);
          v20 -= 16;
          v24 -= 16;
        }
        while (v24 != v50);
        goto LABEL_54;
      }
      goto LABEL_55;
    }
LABEL_60:
    sub_21610CB04();
  }
  char v42 = *(void (**)(__n128))(**(void **)(v6 + 952) + 120);

  a3.n128_f64[0] = v34 + v3;
  v42(a3);
}

void sub_2162EB3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162EB3EC(uint64_t a1, uint64_t a2)
{
  return a2 && (*(_DWORD *)(*(void *)a2 + 8) - 9) < 2;
}

uint64_t sub_2162EB410(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    return 1;
  }
  while (1)
  {
    uint64_t v2 = *a2;
    if (*a2)
    {
      double v3 = *(uint64_t **)(v2 + 16);
      if (v3)
      {
        uint64_t v4 = *v3;
        if (v4)
        {
          if ((*(unsigned char *)(v4 + 40) & 0x10) != 0 && *(float *)(v4 + 56) < 1.0) {
            break;
          }
        }
      }
      if ((*(_DWORD *)(v2 + 8) - 9) < 2) {
        break;
      }
    }
    a2 = (uint64_t *)a2[1];
    if (!a2) {
      return 1;
    }
  }
  return 0;
}

void sub_2162EB46C(uint64_t a1, int a2)
{
  sub_21626076C((void *)(a1 + 16), a2);
  double v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *(uint64_t **)(a1 + 24);
  if (v3 == v4)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v3++;
      v5 += (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
    while (v3 != v4);
  }

  sub_216311338(a1 + 80, v5, 1);
}

__CFArray *sub_2162EB504(void *a1, unint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[3];
  if (a1[2] == v4 || !(*(unsigned int (**)(void))(**(void **)(v4 - 8) + 24))(*(void *)(v4 - 8)))
  {
    uint64_t v6 = a1[133];
    return sub_2162DDBE4(v6, a2);
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
    v8[0] = &unk_26C6C9460;
    v8[1] = a1;
    void v8[2] = &Mutable;
    void v8[3] = v8;
    sub_21631BE50((uint64_t)(a1 + 10), a2, (uint64_t)v8);
    sub_21618FF18(v8);
    return Mutable;
  }
}

void sub_2162EB630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21618FF18((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2162EB644(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
  double v3 = -20.0;
  if (v2)
  {
    uint64_t v4 = *(unsigned int **)(v2 + 40);
    if (v4)
    {
      sub_21617DED8(*(void *)(v2 + 40));
      unsigned int v7 = atomic_load(v4 + 10);
      if (v7 == 2)
      {
        uint64_t v8 = *(void *)v4;
        if (v8)
        {
          uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, a2);
          if (v9) {
            (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v8 + 40))(v8, v9, 0, 0);
          }
          else {
            double v10 = -20.0;
          }
          return v10 + *(double *)(a1 + 1304);
        }
      }
    }
  }
  return v3;
}

void sub_2162EB728(int a1, CFStringRef prefix, const __CFString *a3, CFStringRef theString)
{
  if (prefix && a3 && !CFStringHasPrefix(theString, prefix))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex Length = CFStringGetLength(a3);
    MutableCFArrayRef Copy = CFStringCreateMutableCopy(v6, Length, a3);
    CFStringLowercase(MutableCopy, 0);
    CFStringCompare(a3, MutableCopy, 0);
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  sub_2161E1FB8(prefix);
}

void sub_2162EBA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x2166CA800](v26, 0x10E1C403F77FCFDLL);
  sub_2161868BC(&a10, 0);
  if (a12) {
    sub_2161121B0(a12);
  }
  a13 = &unk_26C6C7160;
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_21632A6B4((uint64_t)&a24);
  if (v25) {
    MEMORY[0x2166CA7C0](v25, 0x1000C80BDFB0063);
  }
  if (v24) {
    MEMORY[0x2166CA7C0](v24, 0x1000C80BDFB0063);
  }
  uint64_t v29 = *(void *)(v27 - 96);
  if (v29) {
    MEMORY[0x2166CA7C0](v29, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2162EBB70(uint64_t a1, int a2, char a3)
{
  if ((*(_DWORD *)(*(void *)(a1 + 8) + 24) & 0x8000800) != 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 16) == v7 || !*(unsigned char *)(a1 + 40)) {
    CFStringRef v8 = 0;
  }
  else {
    CFStringRef v8 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v7 - 8) + 48))(*(void *)(v7 - 8));
  }
  unint64_t Length = CFStringGetLength(v8);
  BOOL result = Length - 2 < 0x18;
  if (Length - 2 <= 0x17 && a2)
  {
    if (Length < 5) {
      return 0;
    }
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1232));
    BOOL result = Count == 0;
    if (Count || (a3 & 1) != 0) {
      return result;
    }
    if ((unint64_t)CFArrayGetCount(*(CFArrayRef *)(a1 + 1160)) > 9) {
      return 0;
    }
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 1160)))
    {
      unint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1160), v11);
        if (!MecabraCandidateIsAutocorrectionCandidate(ValueAtIndex, v14, v15))
        {
          uint64_t v18 = [ValueAtIndex valueAtIndex:v16, v17];
          if (v18) {
            unsigned int v19 = ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 104))(v18) >> 9) & 1;
          }
          else {
            unsigned int v19 = 0;
          }
          if (!v19) {
            ++v12;
          }
        }
        ++v11;
      }
      while (v11 < CFArrayGetCount(*(CFArrayRef *)(a1 + 1160)));
    }
    else
    {
      unint64_t v12 = 0;
    }
    return v12 < 2;
  }
  return result;
}

uint64_t sub_2162EBCE4(uint64_t a1)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t result = sub_21628B808(*(void *)(a1 + 1320));
  if (result)
  {
    if (*(unsigned char *)(a1 + 1313))
    {
      return 0;
    }
    else
    {
      char v4 = 0;
      uint64_t v3 = *(void *)(a1 + 1320);
      v5[0] = &unk_26C6C83E0;
      v5[1] = &v4;
      void v5[2] = a1;
      uint64_t v5[3] = v5;
      sub_21628B870(v3, 2, (uint64_t)v5, 0.7, -6.5);
      sub_2161B608C(v5);
      return v4 != 0;
    }
  }
  return result;
}

void sub_2162EBDB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161B608C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162EBDC4(uint64_t *a1, CFTypeRef cf, const void *a3, char a4, double a5)
{
  unint64_t v10 = a1[2];
  unint64_t v11 = a1[1];
  if (v11 >= v10)
  {
    uint64_t v14 = (uint64_t)(v11 - *a1) >> 5;
    if ((unint64_t)(v14 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v15 = v10 - *a1;
    uint64_t v16 = v15 >> 4;
    if (v15 >> 4 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    BOOL v23 = a1 + 2;
    if (v17)
    {
      if (v17 >> 59) {
        sub_2160FFA74();
      }
      uint64_t v18 = (char *)operator new(32 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    unsigned int v19 = v18;
    int v20 = &v18[32 * v14];
    uint64_t v22 = &v18[32 * v17];
    sub_2162ECCAC((uint64_t)v20, cf, a3, a4 != 0, a5);
    uint64_t v21 = v20 + 32;
    sub_2162ECD24(a1, &v19);
    uint64_t v13 = a1[1];
    uint64_t result = sub_2162ECD94((uint64_t)&v19);
  }
  else
  {
    uint64_t result = sub_2162ECCAC(a1[1], cf, a3, a4 != 0, a5);
    uint64_t v13 = v11 + 32;
    a1[1] = v11 + 32;
  }
  a1[1] = v13;
  return result;
}

void sub_2162EBF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162ECD94((uint64_t)va);
  _Unwind_Resume(a1);
}

const void ***sub_2162EBF24(const void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = v3 - 4;
        sub_2161868BC(v3 - 3, 0);
        sub_2161868BC(v5, 0);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2162EBF9C(void *a1, int a2, uint64_t a3)
{
  char v4 = (uint64_t *)(a1[6] + 168);
  uint64_t v5 = a1[133];
  int v6 = *(_DWORD *)(a1[1] + 24);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  void v8[2] = sub_2162EC030;
  void v8[3] = &unk_26426EBB8;
  v8[4] = a3;
  return sub_2162DC238(v5, v4, a2, (v6 << 10) & 0x1000000, (uint64_t)v8);
}

uint64_t sub_2162EC030(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 + 56 * (a3 - 1);
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v5 = *(void *)(v3 + 40);
  while (v4 != v5)
  {
    if (*(unsigned char *)(v4 + 25)) {
      return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
    }
    v4 += 32;
  }
  return result;
}

void sub_2162EC070(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216261654(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

BOOL sub_2162EC0C4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (char *)(a3 + 3);
    BOOL v5 = 1;
    while (1)
    {
      char v7 = *v4;
      v4 += 4;
      char v6 = v7;
      if ((v7 & 2) != 0)
      {
        uint64_t v8 = *(void *)(a1 + 32);
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 40);
        if ((v6 & 1) == 0) {
          goto LABEL_8;
        }
      }
      *(unsigned char *)(*(void *)(v8 + 8) + 24) = 1;
      uint64_t v8 = *(void *)(a1 + 40);
LABEL_8:
      if (!*(unsigned char *)(*(void *)(v8 + 8) + 24) || !*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        BOOL v5 = ++v3 < a2;
        if (a2 != v3) {
          continue;
        }
      }
      return v5;
    }
  }
  return 0;
}

double *sub_2162EC13C(double *result, double *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  unint64_t v10 = (double *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v45 = *(a2 - 1);
          double v46 = v10[1];
          if (v45 < v46)
          {
            double v47 = *v10;
            *unint64_t v10 = *(a2 - 2);
            *(a2 - 2) = v47;
            v10[1] = v45;
            *(a2 - 1) = v46;
          }
          break;
        case 3uLL:
          uint64_t result = sub_2162EC910(v10, v10 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = sub_2162ECBFC(v10, v10 + 2, v10 + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = sub_2162ECBFC(v10, v10 + 2, v10 + 4, v10 + 6);
          double v48 = *(a2 - 1);
          double v49 = v10[7];
          if (v48 < v49)
          {
            uint64_t v50 = *((void *)v10 + 6);
            void v10[6] = *(a2 - 2);
            *((void *)a2 - 2) = v50;
            v10[7] = v48;
            *(a2 - 1) = v49;
            double v51 = v10[7];
            double v52 = v10[5];
            if (v51 < v52)
            {
              uint64_t v53 = *((void *)v10 + 4);
              uint64_t v54 = *((void *)v10 + 6);
              *((void *)v10 + 4) = v54;
              *((void *)v10 + 6) = v53;
              void v10[5] = v51;
              v10[7] = v52;
              double v55 = v10[3];
              if (v51 < v55)
              {
                uint64_t v56 = *((void *)v10 + 2);
                *((void *)v10 + 2) = v54;
                *((void *)v10 + 4) = v56;
                v10[3] = v51;
                void v10[5] = v55;
                double v57 = v10[1];
                if (v51 < v57)
                {
                  double v58 = *v10;
                  *(void *)unint64_t v10 = v54;
                  _DWORD v10[2] = v58;
                  v10[1] = v51;
                  v10[3] = v57;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v70 = (v12 - 2) >> 1;
      int64_t v71 = v70;
      do
      {
        int64_t v72 = v71;
        if (v70 >= v71)
        {
          uint64_t v73 = (2 * v71) | 1;
          uint64_t v74 = &v10[2 * v73];
          if (2 * v72 + 2 < (uint64_t)v12 && v74[1] < v74[3])
          {
            v74 += 2;
            uint64_t v73 = 2 * v72 + 2;
          }
          double v75 = v74[1];
          double v76 = v10[2 * v72 + 1];
          if (v75 >= v76)
          {
            long long v77 = &v10[2 * v72];
            uint64_t v78 = *(void *)v77;
            do
            {
              long long v79 = v77;
              long long v77 = v74;
              *long long v79 = *v74;
              v79[1] = v75;
              if (v70 < v73) {
                break;
              }
              uint64_t v80 = 2 * v73;
              uint64_t v73 = (2 * v73) | 1;
              uint64_t v74 = &v10[2 * v73];
              uint64_t v81 = v80 + 2;
              if (v81 < (uint64_t)v12 && v74[1] < v74[3])
              {
                v74 += 2;
                uint64_t v73 = v81;
              }
              double v75 = v74[1];
            }
            while (v75 >= v76);
            *(void *)long long v77 = v78;
            v77[1] = v76;
          }
        }
        int64_t v71 = v72 - 1;
      }
      while (v72);
      uint64_t v82 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v83 = 0;
        double v84 = *v10;
        double v85 = v10[1];
        uint64_t v86 = v10;
        do
        {
          long long v87 = v86;
          v86 += 2 * v83 + 2;
          uint64_t v88 = 2 * v83;
          uint64_t v83 = (2 * v83) | 1;
          uint64_t v89 = v88 + 2;
          if (v89 < v82 && v86[1] < v86[3])
          {
            v86 += 2;
            uint64_t v83 = v89;
          }
          *long long v87 = *v86;
          v87[1] = v86[1];
        }
        while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
        if (v86 == a2 - 2)
        {
          double *v86 = v84;
          goto LABEL_117;
        }
        double *v86 = *(a2 - 2);
        v86[1] = *(a2 - 1);
        *(a2 - 2) = v84;
        *(a2 - 1) = v85;
        uint64_t v90 = (char *)v86 - (char *)v10 + 16;
        if (v90 >= 17)
        {
          unint64_t v91 = (((unint64_t)v90 >> 4) - 2) >> 1;
          double v92 = v10[2 * v91 + 1];
          double v85 = v86[1];
          if (v92 < v85)
          {
            uint64_t v93 = *(void *)v86;
            do
            {
              unint64_t v94 = v86;
              uint64_t v86 = &v10[2 * v91];
              *unint64_t v94 = *v86;
              v94[1] = v92;
              if (!v91) {
                break;
              }
              unint64_t v91 = (v91 - 1) >> 1;
              double v92 = v10[2 * v91 + 1];
            }
            while (v92 < v85);
            *(void *)uint64_t v86 = v93;
LABEL_117:
            v86[1] = v85;
          }
        }
        a2 -= 2;
        if (v82-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = &v10[2 * (v12 >> 1)];
    if ((unint64_t)v11 >= 0x801)
    {
      sub_2162EC910((double *)v9, (double *)(v9 + 16 * (v12 >> 1)), a2 - 2);
      sub_2162EC910((double *)(v9 + 16), v14 - 2, a2 - 4);
      sub_2162EC910((double *)(v9 + 32), (double *)(v9 + 16 + 16 * v13), a2 - 6);
      uint64_t result = sub_2162EC910(v14 - 2, v14, (double *)(v9 + 16 + 16 * v13));
      double v15 = *(double *)v9;
      *(double *)unint64_t v9 = *v14;
      double *v14 = v15;
      uint64_t v16 = *(void *)(v9 + 8);
      *(double *)(v9 + 8) = v14[1];
      *((void *)v14 + 1) = v16;
    }
    else
    {
      uint64_t result = sub_2162EC910((double *)(v9 + 16 * (v12 >> 1)), (double *)v9, a2 - 2);
    }
    --a3;
    if (a4)
    {
      double v17 = *(double *)(v9 + 8);
LABEL_13:
      uint64_t v18 = 0;
      double v19 = *(double *)v9;
      do
      {
        double v20 = *(double *)(v9 + v18 + 24);
        v18 += 16;
      }
      while (v20 < v17);
      uint64_t v21 = (double *)(v9 + v18);
      uint64_t v22 = a2;
      if (v18 == 16)
      {
        uint64_t v25 = a2;
        while (v21 < v25)
        {
          BOOL v23 = v25 - 2;
          double v26 = *(v25 - 1);
          v25 -= 2;
          if (v26 < v17) {
            goto LABEL_23;
          }
        }
        BOOL v23 = v25;
      }
      else
      {
        do
        {
          BOOL v23 = v22 - 2;
          double v24 = *(v22 - 1);
          v22 -= 2;
        }
        while (v24 >= v17);
      }
LABEL_23:
      unint64_t v10 = v21;
      if (v21 < v23)
      {
        uint64_t v27 = v23;
        do
        {
          double v28 = *v10;
          *unint64_t v10 = *v27;
          *uint64_t v27 = v28;
          uint64_t v29 = *((void *)v10 + 1);
          v10[1] = v27[1];
          *((void *)v27 + 1) = v29;
          do
          {
            double v30 = v10[3];
            v10 += 2;
          }
          while (v30 < v17);
          do
          {
            double v31 = *(v27 - 1);
            v27 -= 2;
          }
          while (v31 >= v17);
        }
        while (v10 < v27);
      }
      if (v10 - 2 != (double *)v9)
      {
        *(double *)unint64_t v9 = *(v10 - 2);
        *(double *)(v9 + 8) = *(v10 - 1);
      }
      *(v10 - 2) = v19;
      *(v10 - 1) = v17;
      if (v21 < v23) {
        goto LABEL_34;
      }
      BOOL v32 = sub_2162EC9C8((double *)v9, v10 - 2);
      uint64_t result = (double *)sub_2162EC9C8(v10, a2);
      if (result)
      {
        a2 = v10 - 2;
        if (v32) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v32)
      {
LABEL_34:
        uint64_t result = (double *)sub_2162EC13C(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v17 = *(double *)(v9 + 8);
      if (*(double *)(v9 - 8) < v17) {
        goto LABEL_13;
      }
      if (v17 >= *(a2 - 1))
      {
        uint8x8_t v35 = (double *)(v9 + 16);
        do
        {
          unint64_t v10 = v35;
          if (v35 >= a2) {
            break;
          }
          double v36 = v35[1];
          v35 += 2;
        }
        while (v17 >= v36);
      }
      else
      {
        unint64_t v33 = v9;
        do
        {
          unint64_t v10 = (double *)(v33 + 16);
          double v34 = *(double *)(v33 + 24);
          v33 += 16;
        }
        while (v17 >= v34);
      }
      uint64_t v37 = a2;
      if (v10 < a2)
      {
        int v38 = a2;
        do
        {
          uint64_t v37 = v38 - 2;
          double v39 = *(v38 - 1);
          v38 -= 2;
        }
        while (v17 < v39);
      }
      double v40 = *(double *)v9;
      while (v10 < v37)
      {
        double v41 = *v10;
        *unint64_t v10 = *v37;
        double *v37 = v41;
        uint64_t v42 = *((void *)v10 + 1);
        v10[1] = v37[1];
        *((void *)v37 + 1) = v42;
        do
        {
          double v43 = v10[3];
          v10 += 2;
        }
        while (v17 >= v43);
        do
        {
          double v44 = *(v37 - 1);
          v37 -= 2;
        }
        while (v17 < v44);
      }
      BOOL v4 = (unint64_t)(v10 - 2) >= v9;
      BOOL v5 = v10 - 2 == (double *)v9;
      if (v10 - 2 != (double *)v9)
      {
        *(double *)unint64_t v9 = *(v10 - 2);
        *(double *)(v9 + 8) = *(v10 - 1);
      }
      a4 = 0;
      *(v10 - 2) = v40;
      *(v10 - 1) = v17;
    }
  }
  BOOL v59 = v10 + 2;
  BOOL v61 = v10 == a2 || v59 == a2;
  if (a4)
  {
    if (!v61)
    {
      uint64_t v62 = 0;
      __int16 v63 = v10;
      do
      {
        double v64 = v63[3];
        double v65 = v63[1];
        __int16 v63 = v59;
        if (v64 < v65)
        {
          uint64_t v66 = *(void *)v59;
          uint64_t v67 = v62;
          while (1)
          {
            uint64_t v68 = (double *)((char *)v10 + v67);
            v68[2] = *(double *)((char *)v10 + v67);
            v68[3] = *(double *)((char *)v10 + v67 + 8);
            if (!v67) {
              break;
            }
            v67 -= 16;
            if (v64 >= *(v68 - 1))
            {
              uint64_t v69 = (uint64_t)v10 + v67 + 16;
              goto LABEL_85;
            }
          }
          uint64_t v69 = (uint64_t)v10;
LABEL_85:
          *(void *)uint64_t v69 = v66;
          *(double *)(v69 + 8) = v64;
        }
        BOOL v59 = v63 + 2;
        v62 += 16;
      }
      while (v63 + 2 != a2);
    }
  }
  else if (!v61)
  {
    long long v96 = v10 + 3;
    do
    {
      double v97 = *(double *)(v9 + 24);
      double v98 = *(double *)(v9 + 8);
      unint64_t v9 = (unint64_t)v59;
      if (v97 < v98)
      {
        uint64_t v99 = *(void *)v59;
        uint64_t v100 = v96;
        do
        {
          int64_t v101 = v100;
          *(v100 - 1) = *(v100 - 3);
          uint64_t v102 = *((void *)v100 - 2);
          v100 -= 2;
          *(void *)int64_t v101 = v102;
        }
        while (v97 < *(v101 - 4));
        *((void *)v100 - 1) = v99;
        *uint64_t v100 = v97;
      }
      BOOL v59 = (double *)(v9 + 16);
      v96 += 2;
    }
    while ((double *)(v9 + 16) != a2);
  }
  return result;
}

double *sub_2162EC910(double *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = result[1];
  double v5 = a3[1];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      double v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      double v8 = a2[1];
      double v9 = result[1];
      if (v8 < v9)
      {
        double v10 = *result;
        void *result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    double v6 = *result;
    if (v5 >= v3)
    {
      void *result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      double v11 = a3[1];
      if (v11 >= v4) {
        return result;
      }
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      void *result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

BOOL sub_2162EC9C8(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(a2 - 1);
      double v7 = a1[1];
      if (v6 < v7)
      {
        double v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_2162EC910(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_2162ECBFC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_2162ECBFC(a1, a1 + 2, a1 + 4, a1 + 6);
      double v18 = *(a2 - 1);
      double v19 = a1[7];
      if (v18 < v19)
      {
        uint64_t v20 = *((void *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((void *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - 1) = v19;
        double v21 = a1[7];
        double v22 = a1[5];
        if (v21 < v22)
        {
          uint64_t v23 = *((void *)a1 + 4);
          uint64_t v24 = *((void *)a1 + 6);
          *((void *)a1 + 4) = v24;
          *((void *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          double v25 = a1[3];
          if (v21 < v25)
          {
            uint64_t v26 = *((void *)a1 + 2);
            *((void *)a1 + 2) = v24;
            *((void *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            double v27 = a1[1];
            if (v21 < v27)
            {
              double v28 = *a1;
              *(void *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      double v9 = a1 + 4;
      sub_2162EC910(a1, a1 + 2, a1 + 4);
      double v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = v10[1];
    if (v13 < v9[1])
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = (double *)((char *)a1 + v15);
        v16[6] = *(double *)((char *)a1 + v15 + 32);
        v16[7] = *(double *)((char *)a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 >= v16[3])
        {
          uint64_t v17 = (uint64_t)a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    double v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

double *sub_2162ECBFC(double *a1, double *a2, double *a3, double *a4)
{
  BOOL result = sub_2162EC910(a1, a2, a3);
  double v9 = a4[1];
  double v10 = a3[1];
  if (v9 < v10)
  {
    double v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    double v12 = a3[1];
    double v13 = a2[1];
    if (v12 < v13)
    {
      double v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      double v15 = a2[1];
      double v16 = a1[1];
      if (v15 < v16)
      {
        double v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t sub_2162ECCAC(uint64_t a1, CFTypeRef cf, const void *a3, char a4, double a5)
{
  *(void *)a1 = CFRetain(cf);
  *(void *)(a1 + 8) = CFRetain(a3);
  *(unsigned char *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  return a1;
}

void sub_2162ECD0C(_Unwind_Exception *a1)
{
  sub_2161868BC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2162ECD24(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 32);
    v2 -= 32;
    *(void *)uint64_t v2 = 0;
    *(void *)(v4 - 32) = v5;
    v4 -= 32;
    uint64_t v6 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    *(void *)(v4 + 8) = v6;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  double *result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2162ECD94(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (const void **)(i - 32);
    *(void *)(a1 + 16) = i - 32;
    sub_2161868BC((const void **)(i - 24), 0);
    sub_2161868BC(v4, 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void **sub_2162ECE00(const void **a1)
{
  return a1;
}

void sub_2162ECE3C(uint64_t a1, CFStringRef *a2, uint64_t a3, char a4)
{
void sub_2162EDCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, CFTypeRef cf, CFTypeRef a15, CFTypeRef a16)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2162EDE6C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(const void **)a1;
  char v5 = (const void **)(a1 + 8);
  uint64_t v6 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  __n128 v10 = *(__n128 *)(a1 + 16);
  uint64_t v7 = *(const void **)a2;
  *(void *)a2 = 0;
  sub_2161868BC((const void **)a1, v7);
  uint64_t v8 = *(const void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  sub_2161868BC(v5, v8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_2161868BC((const void **)a2, v4);
  sub_2161868BC((const void **)(a2 + 8), v6);
  __n128 result = v10;
  *(__n128 *)(a2 + 16) = v10;
  return result;
}

double sub_2162EDF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2162EE4A8(a1, a2, a3, a4);
  double result = *(double *)(a5 + 24);
  double v11 = *(double *)(a4 + 24);
  if (result > v11
    || result == v11 && (CFIndex v12 = CFStringGetLength(*(CFStringRef *)a5), v12 < CFStringGetLength(*(CFStringRef *)a4)))
  {
    sub_2162EDE6C(a4, a5);
    double result = *(double *)(a4 + 24);
    double v13 = *(double *)(a3 + 24);
    if (result > v13
      || result == v13 && (CFIndex v14 = CFStringGetLength(*(CFStringRef *)a4), v14 < CFStringGetLength(*(CFStringRef *)a3)))
    {
      sub_2162EDE6C(a3, a4);
      double result = *(double *)(a3 + 24);
      double v15 = *(double *)(a2 + 24);
      if (result > v15
        || result == v15 && (CFIndex v16 = CFStringGetLength(*(CFStringRef *)a3), v16 < CFStringGetLength(*(CFStringRef *)a2)))
      {
        sub_2162EDE6C(a2, a3);
        double result = *(double *)(a2 + 24);
        double v17 = *(double *)(a1 + 24);
        if (result > v17
          || result == v17
          && (CFIndex Length = CFStringGetLength(*(CFStringRef *)a2), Length < CFStringGetLength(*(CFStringRef *)a1)))
        {
          *(void *)&double result = sub_2162EDE6C(a1, a2).n128_u64[0];
        }
      }
    }
  }
  return result;
}

double sub_2162EE060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = *(double *)(a2 + 24);
  double v7 = *(double *)(a1 + 24);
  if (result > v7
    || result == v7
    && (CFIndex v8 = CFStringGetLength(*(CFStringRef *)a2),
        CFIndex v9 = CFStringGetLength(*(CFStringRef *)a1),
        double result = *(double *)(a2 + 24),
        v8 < v9))
  {
    double v10 = *(double *)(a3 + 24);
    if (v10 > result
      || v10 == result && (CFIndex v11 = CFStringGetLength(*(CFStringRef *)a3), v11 < CFStringGetLength(*(CFStringRef *)a2)))
    {
      uint64_t v12 = a1;
    }
    else
    {
      sub_2162EDE6C(a1, a2);
      double result = *(double *)(a3 + 24);
      double v18 = *(double *)(a2 + 24);
      if (result <= v18)
      {
        if (result != v18) {
          return result;
        }
        CFIndex Length = CFStringGetLength(*(CFStringRef *)a3);
        if (Length >= CFStringGetLength(*(CFStringRef *)a2)) {
          return result;
        }
      }
      uint64_t v12 = a2;
    }
    uint64_t v17 = a3;
    goto LABEL_20;
  }
  double v13 = *(double *)(a3 + 24);
  if (v13 > result
    || v13 == result && (CFIndex v14 = CFStringGetLength(*(CFStringRef *)a3), v14 < CFStringGetLength(*(CFStringRef *)a2)))
  {
    sub_2162EDE6C(a2, a3);
    double result = *(double *)(a2 + 24);
    double v15 = *(double *)(a1 + 24);
    if (result > v15
      || result == v15 && (CFIndex v16 = CFStringGetLength(*(CFStringRef *)a2), v16 < CFStringGetLength(*(CFStringRef *)a1)))
    {
      uint64_t v12 = a1;
      uint64_t v17 = a2;
LABEL_20:
      *(void *)&double result = sub_2162EDE6C(v12, v17).n128_u64[0];
    }
  }
  return result;
}

BOOL sub_2162EE1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (CFStringRef *)(a2 - 32);
      double v7 = *(double *)(a2 - 8);
      double v8 = *(double *)(a1 + 24);
      if (v7 > v8) {
        goto LABEL_5;
      }
      if (v7 == v8)
      {
        CFIndex Length = CFStringGetLength(*v6);
        if (Length >= CFStringGetLength(*(CFStringRef *)a1)) {
          return 1;
        }
LABEL_5:
        sub_2162EDE6C(a1, (uint64_t)v6);
        return 1;
      }
      return result;
    case 3:
      sub_2162EE060(a1, a1 + 32, a2 - 32);
      return 1;
    case 4:
      sub_2162EE4A8(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_2162EDF0C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      uint64_t v10 = a1 + 64;
      sub_2162EE060(a1, a1 + 32, a1 + 64);
      uint64_t v11 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    double v14 = *(double *)(v11 + 24);
    double v15 = *(double *)(v10 + 24);
    if (v14 > v15
      || v14 == v15 && (CFIndex v16 = CFStringGetLength(*(CFStringRef *)v11), v16 < CFStringGetLength(*(CFStringRef *)v10)))
    {
      long long v17 = *(_OWORD *)v11;
      long long v18 = *(_OWORD *)(v11 + 16);
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(_OWORD *)CFStringRef theString = v17;
      long long v33 = v18;
      CFStringRef v19 = *(CFStringRef *)v10;
      *(void *)uint64_t v10 = 0;
      sub_2161868BC((const void **)v11, v19);
      CFIndex v20 = *(const void **)(v10 + 8);
      *(void *)(v10 + 8) = 0;
      sub_2161868BC((const void **)(v11 + 8), v20);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(v10 + 16);
      if (v10 == a1)
      {
        unint64_t v28 = (_OWORD *)(v10 + 16);
LABEL_19:
        CFStringRef v24 = theString[0];
        double v29 = (const void **)a1;
      }
      else
      {
        uint64_t v21 = v12;
        while (1)
        {
          uint64_t v22 = a1 + v21;
          double v23 = *(double *)(a1 + v21 + 56);
          if (*((double *)&v33 + 1) <= v23)
          {
            CFStringRef v24 = theString[0];
            if (*((double *)&v33 + 1) != v23) {
              break;
            }
            CFIndex v25 = CFStringGetLength(theString[0]);
            if (v25 >= CFStringGetLength(*(CFStringRef *)(v22 + 32))) {
              break;
            }
          }
          CFIndex v26 = *(const void **)(v22 + 32);
          *(void *)(v22 + 32) = 0;
          sub_2161868BC((const void **)(v22 + 64), v26);
          unint64_t v27 = *(const void **)(v22 + 40);
          *(void *)(v22 + 4sub_216195B94((const void **)&a9, 0) = 0;
          sub_2161868BC((const void **)(v22 + 72), v27);
          *(_OWORD *)(v22 + 8sub_216195B94((const void **)&a9, 0) = *(_OWORD *)(v22 + 48);
          v21 -= 32;
          if (v21 == -64)
          {
            unint64_t v28 = (_OWORD *)(a1 + 16);
            goto LABEL_19;
          }
        }
        uint64_t v30 = a1 + v21;
        unint64_t v28 = (_OWORD *)(a1 + v21 + 80);
        double v29 = (const void **)(v30 + 64);
      }
      CFIndex v31 = v29 + 1;
      sub_2161868BC(v29, v24);
      sub_2161868BC(v31, theString[1]);
      *unint64_t v28 = v33;
      if (++v13 == 8) {
        return v11 + 32 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2) {
      return 1;
    }
  }
}

void sub_2162EE47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

double sub_2162EE4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2162EE060(a1, a2, a3);
  double result = *(double *)(a4 + 24);
  double v9 = *(double *)(a3 + 24);
  if (result > v9
    || result == v9 && (CFIndex v10 = CFStringGetLength(*(CFStringRef *)a4), v10 < CFStringGetLength(*(CFStringRef *)a3)))
  {
    sub_2162EDE6C(a3, a4);
    double result = *(double *)(a3 + 24);
    double v11 = *(double *)(a2 + 24);
    if (result > v11
      || result == v11 && (CFIndex v12 = CFStringGetLength(*(CFStringRef *)a3), v12 < CFStringGetLength(*(CFStringRef *)a2)))
    {
      sub_2162EDE6C(a2, a3);
      double result = *(double *)(a2 + 24);
      double v13 = *(double *)(a1 + 24);
      if (result > v13
        || result == v13
        && (CFIndex Length = CFStringGetLength(*(CFStringRef *)a2), Length < CFStringGetLength(*(CFStringRef *)a1)))
      {
        *(void *)&double result = sub_2162EDE6C(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

void sub_2162EE5C0()
{
}

void *sub_2162EE5D4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C8438;
  result[1] = v3;
  return result;
}

uint64_t sub_2162EE61C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C8438;
  a2[1] = v2;
  return result;
}

uint64_t sub_2162EE648(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t **a4)
{
  return sub_2162E6464(*(void *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t sub_2162EE65C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC9B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162EE69C()
{
  return &unk_26C6BC9B0;
}

void *sub_2162EE6A8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_2162EE72C(uint64_t *a1, void *a2, int *a3, uint64_t *a4)
{
  double v8 = operator new(0x110uLL);
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = &unk_26C6C95B0;
  uint64_t result = sub_2162F4E2C((uint64_t)(v8 + 3), 0, a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2162EE7AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2162EE7C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C95B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2162EE7E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C95B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162EE838(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2162EE860(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2162EE8C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162EE904(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162EE93C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2162EE96C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC028)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2162EE9B4()
{
}

__n128 sub_2162EE9C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6C9460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2162EEA14(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C9460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2162EEA44(uint64_t a1, uint64_t a2, const void **a3)
{
}

uint64_t sub_2162EEA54(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCCA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162EEA94()
{
  return &unk_26C6BCCA0;
}

void sub_2162EEAA4()
{
}

__n128 sub_2162EEAB8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6C8388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2162EEB04(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

CFIndex sub_2162EEB34(CFIndex result, const __CFString **a2, CFStringRef *a3)
{
  CFStringRef v3 = *a2;
  CFStringRef v4 = *a3;
  if (*a2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFIndex v6 = result;
    uint64_t v7 = *(void *)(result + 8);
    CFIndex Length = CFStringGetLength(*a3);
    uint64_t v9 = *(void *)(v7 + 24);
    if (*(void *)(v7 + 16) == v9 || !*(unsigned char *)(v7 + 40)) {
      CFStringRef v10 = 0;
    }
    else {
      CFStringRef v10 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v9 - 8) + 48))(*(void *)(v9 - 8));
    }
    __n128 result = CFStringGetLength(v10);
    if (Length)
    {
      if (**(unsigned char **)(v6 + 16) || (CFIndex v11 = result, sub_2162EB644(v7, (uint64_t)v3), **(unsigned char **)(v6 + 16)))
      {
        __n128 result = CFStringHasSuffix(v3, @"'");
        if (!result)
        {
          __n128 result = CFStringHasSuffix(v3, @"'s");
          if (!result)
          {
            MutableCFArrayRef Copy = CFStringCreateMutableCopy(0, 0, v4);
            v15.CFIndex length = CFStringGetLength(v4) - 2;
            v15.locatiouint64_t n = 1;
            CFStringFindAndReplace(MutableCopy, @" ", &stru_26C6FB1C0, v15, 0);
            sub_2162EB728(v7, MutableCopy, v4, v3);
          }
        }
      }
      else
      {
        if (v11 >= Length)
        {
          sub_2162EB728(v7, v4, v4, v3);
        }
        v14.locatiouint64_t n = 0;
        v14.CFIndex length = v11;
        __n128 result = (CFIndex)CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], v4, v14);
        if (result) {
          sub_2162EB728(v7, (CFStringRef)result, v4, v3);
        }
      }
    }
  }
  return result;
}

void sub_2162EED28(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2162EED5C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC990)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162EED9C()
{
  return &unk_26C6BC990;
}

void sub_2162EEDAC()
{
}

__n128 sub_2162EEDC0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6C83E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2162EEE0C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C83E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2162EEE3C(uint64_t a1, uint64_t *a2, const __CFString **a3)
{
  CFStringRef v3 = (const __CFString *)*a2;
  CFStringRef v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (sub_2162EB644(v5, *a2) >= -8.5) {
    sub_2162EB728(v5, 0, v4, v3);
  }
}

uint64_t sub_2162EEEB8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC9A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162EEEF8()
{
  return &unk_26C6BC9A0;
}

void sub_2162EEF08()
{
}

__n128 sub_2162EEF1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C8330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2162EEF70(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2162EEFA8(uint64_t result, const __CFString **a2, const void **a3, double *a4)
{
  CFStringRef v4 = *a2;
  uint64_t v5 = *a3;
  if (*a2) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 8);
  uint64_t v9 = *(char **)(result + 24);
  if (*v9)
  {
    double v10 = *a4;
    __n128 result = CFStringHasSuffix(v4, @"'");
    if (result) {
      return result;
    }
    __n128 result = CFStringHasSuffix(v4, @"'s");
    if (result) {
      return result;
    }
    uint64_t v12 = v7 + 16;
    CFIndex v11 = *(uint64_t **)(v7 + 16);
    uint64_t v9 = *(char **)(v12 + 8);
    if (*v9) {
      goto LABEL_12;
    }
  }
  else
  {
    CFIndex v11 = *(uint64_t **)(result + 16);
  }
  double v10 = sub_2162EB644(v8, (uint64_t)v4);
LABEL_12:
  unint64_t v13 = v11[2];
  unint64_t v14 = v11[1];
  if (v14 >= v13)
  {
    uint64_t v16 = (uint64_t)(v14 - *v11) >> 5;
    if ((unint64_t)(v16 + 1) >> 59) {
      sub_21610CB04();
    }
    uint64_t v17 = v13 - *v11;
    uint64_t v18 = v17 >> 4;
    if (v17 >> 4 <= (unint64_t)(v16 + 1)) {
      uint64_t v18 = v16 + 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    CFIndex v25 = v11 + 2;
    if (v19)
    {
      if (v19 >> 59) {
        sub_2160FFA74();
      }
      CFIndex v20 = (char *)operator new(32 * v19);
    }
    else
    {
      CFIndex v20 = 0;
    }
    uint64_t v21 = v20;
    uint64_t v22 = &v20[32 * v16];
    uint64_t v23 = (uint64_t)v22;
    CFStringRef v24 = &v20[32 * v19];
    sub_2162ECCAC((uint64_t)v22, v4, v5, *v9, v10);
    uint64_t v23 = (uint64_t)(v22 + 32);
    sub_2162ECD24(v11, &v21);
    uint64_t v15 = v11[1];
    __n128 result = sub_2162ECD94((uint64_t)&v21);
  }
  else
  {
    __n128 result = sub_2162ECCAC(v11[1], v4, v5, *v9, v10);
    uint64_t v15 = v14 + 32;
    v11[1] = v14 + 32;
  }
  v11[1] = v15;
  return result;
}

void sub_2162EF144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162ECD94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162EF164(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC980)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162EF1A4()
{
  return &unk_26C6BC980;
}

void *sub_2162EF1B0(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1024;
  a1[4] = 0;
  a1[5] = 0;
  sub_2162EF464(a1 + 6, 256);
  return a1;
}

void sub_2162EF1F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162EF3AC((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_2162EF210(void **a1)
{
  sub_2162EF400((uint64_t)a1, *a1);
  a1[4] = 0;
  a1[5] = 0;
  sub_216277448((uint64_t)(a1 + 6));
  sub_21627ADA0((uint64_t)(a1 + 6));
  CFStringRef v3 = a1;
  sub_2162EF3AC(&v3);
  return a1;
}

char *sub_2162EF26C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    CFStringRef v4 = *(char **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    size_t v5 = (size_t)&v4[-v2];
    if (v3 != (uint64_t)&v4[-v2] >> 6) {
      goto LABEL_23;
    }
  }
  else
  {
    size_t v5 = *(void *)(a1 + 40) << 6;
  }
  BOOL v6 = (char *)malloc_type_malloc(v5, 0x1030040F03CD2BDuLL);
  CFStringRef v4 = v6;
  uint64_t v8 = *(char ***)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    double v10 = *(char ***)a1;
    uint64_t v11 = ((uint64_t)v8 - *(void *)a1) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_2160FFA74();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    *(void *)uint64_t v16 = v4;
    uint64_t v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        uint64_t v17 = (uint64_t)*--v8;
        *((void *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      uint64_t v8 = *(char ***)a1;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = &v15[8 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v8 = v6;
    uint64_t v9 = v8 + 1;
  }
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 24) = v4;
LABEL_23:
  ++*(_DWORD *)(a1 + 48);
  *(void *)(a1 + 32) = v4 + 64;
  return v4;
}

void sub_2162EF3AC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2162EF400((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_2162EF400(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  CFStringRef v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    __n128 result = v5;
    *CFStringRef v4 = 0;
    if (v5) {
      __n128 result = MEMORY[0x2166CA7C0](result, 0x1000C8077774924);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *sub_2162EF464(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[5] = a2;
  sub_216277448((uint64_t)a1);
  return a1;
}

void sub_2162EF498(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162EF4B4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_216195B94((const void **)&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 12sub_216195B94((const void **)&a9, 0) = 0;
  sub_2162EF56C((void *)a1);
  return a1;
}

void sub_2162EF510(_Unwind_Exception *exception_object)
{
  CFStringRef v4 = (void *)v1[13];
  if (v4)
  {
    v1[14] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)v1[10];
  if (v5)
  {
    v1[11] = v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)v1[7];
  if (v6)
  {
    v1[8] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)v1[4];
  if (v7)
  {
    v1[5] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    v1[2] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

void sub_2162EF56C(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 12);
  unint64_t v3 = a1[12];
  CFStringRef v4 = (char *)a1[11];
  if ((unint64_t)v4 >= v3)
  {
    BOOL v6 = (char *)a1[10];
    uint64_t v7 = (v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      goto LABEL_34;
    }
    unint64_t v8 = v3 - (void)v6;
    unint64_t v9 = (uint64_t)(v3 - (void)v6) >> 2;
    if (v9 <= v7 + 1) {
      unint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      uint64_t v11 = (char *)sub_2160FFAA8(v2, v10);
      BOOL v6 = (char *)a1[10];
      CFStringRef v4 = (char *)a1[11];
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v12 = &v11[8 * v7];
    uint64_t v13 = &v11[8 * v10];
    *(void *)unint64_t v12 = 0;
    uint64_t v5 = v12 + 8;
    while (v4 != v6)
    {
      uint64_t v14 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v12 - 1) = v14;
      v12 -= 8;
    }
    a1[10] = v12;
    a1[11] = v5;
    a1[12] = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)CFStringRef v4 = 0;
    uint64_t v5 = v4 + 8;
  }
  unint64_t v15 = a1[15];
  a1[11] = v5;
  uint64_t v16 = (char *)a1[14];
  if ((unint64_t)v16 < v15)
  {
    *(void *)uint64_t v16 = 0;
    uint64_t v17 = v16 + 8;
    goto LABEL_33;
  }
  uint64_t v18 = (char *)a1[13];
  uint64_t v19 = (v16 - v18) >> 3;
  if ((unint64_t)(v19 + 1) >> 61) {
LABEL_34:
  }
    sub_21610CB04();
  unint64_t v20 = v15 - (void)v18;
  unint64_t v21 = (uint64_t)(v15 - (void)v18) >> 2;
  if (v21 <= v19 + 1) {
    unint64_t v21 = v19 + 1;
  }
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v22 = v21;
  }
  if (v22)
  {
    uint64_t v23 = (char *)sub_2160FFAA8((uint64_t)(a1 + 15), v22);
    uint64_t v18 = (char *)a1[13];
    uint64_t v16 = (char *)a1[14];
  }
  else
  {
    uint64_t v23 = 0;
  }
  CFStringRef v24 = &v23[8 * v19];
  CFIndex v25 = &v23[8 * v22];
  *(void *)CFStringRef v24 = 0;
  uint64_t v17 = v24 + 8;
  while (v16 != v18)
  {
    uint64_t v26 = *((void *)v16 - 1);
    v16 -= 8;
    *((void *)v24 - 1) = v26;
    v24 -= 8;
  }
  a1[13] = v24;
  a1[14] = v17;
  a1[15] = v25;
  if (v18) {
    operator delete(v18);
  }
LABEL_33:
  a1[14] = v17;
}

_WORD *sub_2162EF6F4(uint64_t a1, uint64_t a2, void **a3, void **a4, void **a5, unint64_t a6)
{
  uint64_t v7 = a3;
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  if (v10 >= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  }
  unint64_t v12 = v10 - v11;
  unint64_t v13 = *(void *)(*(void *)(a1 + 104) + 8 * v12);
  uint64_t v14 = *(void *)(a1 + 56);
  unint64_t v15 = (*(void *)(a1 + 64) - v14) >> 1;
  uint64_t v16 = v15 - v13;
  unint64_t v40 = v15;
  uint64_t v41 = v14;
  if (!v14) {
    uint64_t v16 = 0;
  }
  unint64_t v17 = *(void *)(*(void *)(a1 + 80) + 8 * v12);
  uint64_t v18 = *(void *)(a1 + 32);
  if (v15 <= v13) {
    uint64_t v16 = 0;
  }
  uint64_t v43 = v16;
  unint64_t v19 = (*(void *)(a1 + 40) - v18) >> 1;
  uint64_t v20 = v19 - v17;
  uint64_t v39 = *(void *)(a1 + 32);
  if (!v18) {
    uint64_t v20 = 0;
  }
  unint64_t v34 = v13;
  unint64_t v35 = (*(void *)(a1 + 40) - v18) >> 1;
  if (v19 <= v17) {
    uint64_t v20 = 0;
  }
  uint64_t v44 = v20;
  if (a2)
  {
    double v37 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
    uint64_t v22 = v21;
    unint64_t v38 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 552))(a2);
    uint64_t v24 = v23;
    CFIndex v25 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
    uint64_t v26 = (v25[1] - *v25) / 40;
    unint64_t v27 = v26 + v11;
    if (v25[1] == *v25)
    {
      uint64_t v7 = a3;
      uint64_t v29 = v24;
    }
    else
    {
      uint64_t v28 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 560))(a2, v28);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 560))(a2, v28++);
      }
      while (v26 != v28);
      uint64_t v7 = a3;
      uint64_t v29 = v24;
    }
  }
  else
  {
    double v37 = 0;
    unint64_t v38 = 0;
    uint64_t v22 = 0;
    uint64_t v29 = 0;
    unint64_t v27 = v11;
  }
  sub_2161C1AC0(a5, v27);
  sub_216185B34(v7, v22 + v44);
  sub_216185B34(a4, v29 + v43);
  sub_21620B0C4((long long *)(*(void *)(a1 + 16) - 40 * v11), *(long long **)(a1 + 16), a5);
  if (a2)
  {
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
    double v46 = 0;
    uint64_t v47 = 0;
    std::string __p = 0;
    sub_21618B3D8(&__p, *(const void **)v30, *(void *)(v30 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v30 + 8) - *(void *)v30) >> 3));
    sub_21620B0C4((long long *)__p, v46, a5);
    if (__p)
    {
      double v46 = (long long *)__p;
      operator delete(__p);
    }
  }
  if (v40 <= v34) {
    CFIndex v31 = 0;
  }
  else {
    CFIndex v31 = (_WORD *)(v41 + 2 * v34);
  }
  if (v35 <= v17) {
    double v32 = 0;
  }
  else {
    double v32 = (_WORD *)(v39 + 2 * v17);
  }
  sub_2161BF794(v32, &v32[v44], (uint64_t)v7);
  sub_2161BF794(v37, &v37[v22], (uint64_t)v7);
  sub_2161BF794(v31, &v31[v43], (uint64_t)a4);
  return sub_2161BF794(v38, &v38[v29], (uint64_t)a4);
}

void sub_2162EFA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162EFAB0(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2] - v1;
  if (!v2) {
    return 0;
  }
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 3) - 1;
  if (*(_WORD *)(v1 + 40 * v3 + 24) != 1) {
    return 0;
  }
  unint64_t v4 = *(void *)(a1[10] + 8 * v3);
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5] - v5;
  uint64_t v7 = (__int16 *)(v5 + 2 * v4);
  if (v4 >= v6 >> 1) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = v7;
  }
  return sub_2161EC100(*v8);
}

void sub_2162EFB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
  sub_2161C1940((char *)(a1 + 8), *(char **)v4, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3));
  uint64_t v5 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 544))(a2);
  uint64_t v7 = v6;
  unint64_t v8 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 552))(a2);
  uint64_t v10 = v9;
  sub_216184B80((char *)(a1 + 32), v5, v7);
  sub_216184B80((char *)(a1 + 56), v8, v10);
  if (*(void *)(v4 + 8) != *(void *)v4)
  {
    unint64_t v11 = 0;
    unint64_t v12 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 1;
    unint64_t v13 = (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 1;
    uint64_t v14 = (void **)(a1 + 104);
    uint64_t v43 = (void **)(a1 + 80);
    do
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 88) - 8);
      unsigned int v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 568))(a2, v11);
      if (v15 + (unint64_t)v16 >= v12) {
        unint64_t v17 = v12;
      }
      else {
        unint64_t v17 = v15 + v16;
      }
      uint64_t v18 = *(void *)(*(void *)(a1 + 112) - 8);
      unsigned int v19 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 320))(a2, v11);
      if (v18 + (unint64_t)v19 >= v13) {
        unint64_t v20 = v13;
      }
      else {
        unint64_t v20 = v18 + v19;
      }
      uint64_t v22 = *(char **)(a1 + 88);
      unint64_t v21 = *(void *)(a1 + 96);
      if ((unint64_t)v22 >= v21)
      {
        uint64_t v24 = (char *)*v43;
        uint64_t v25 = (v22 - (unsigned char *)*v43) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v27 = v21 - (void)v24;
        if (v27 >> 2 > v26) {
          unint64_t v26 = v27 >> 2;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          uint64_t v29 = (char *)sub_2160FFAA8(a1 + 96, v28);
          uint64_t v24 = *(char **)(a1 + 80);
          uint64_t v22 = *(char **)(a1 + 88);
        }
        else
        {
          uint64_t v29 = 0;
        }
        uint64_t v30 = (unint64_t *)&v29[8 * v25];
        *uint64_t v30 = v17;
        uint64_t v23 = v30 + 1;
        while (v22 != v24)
        {
          unint64_t v31 = *((void *)v22 - 1);
          v22 -= 8;
          *--uint64_t v30 = v31;
        }
        *(void *)(a1 + 8sub_216195B94((const void **)&a9, 0) = v30;
        *(void *)(a1 + 88) = v23;
        *(void *)(a1 + 96) = &v29[8 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(void *)uint64_t v22 = v17;
        uint64_t v23 = v22 + 8;
      }
      *(void *)(a1 + 88) = v23;
      long long v33 = *(char **)(a1 + 112);
      unint64_t v32 = *(void *)(a1 + 120);
      if ((unint64_t)v33 >= v32)
      {
        unint64_t v35 = (char *)*v14;
        uint64_t v36 = (v33 - (unsigned char *)*v14) >> 3;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v38 = v32 - (void)v35;
        if (v38 >> 2 > v37) {
          unint64_t v37 = v38 >> 2;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_2160FFAA8(a1 + 120, v39);
          unint64_t v35 = *(char **)(a1 + 104);
          long long v33 = *(char **)(a1 + 112);
        }
        else
        {
          unint64_t v40 = 0;
        }
        uint64_t v41 = (unint64_t *)&v40[8 * v36];
        *uint64_t v41 = v20;
        unint64_t v34 = v41 + 1;
        while (v33 != v35)
        {
          unint64_t v42 = *((void *)v33 - 1);
          v33 -= 8;
          *--uint64_t v41 = v42;
        }
        *(void *)(a1 + 104) = v41;
        *(void *)(a1 + 112) = v34;
        *(void *)(a1 + 12sub_216195B94((const void **)&a9, 0) = &v40[8 * v39];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(void *)long long v33 = v20;
        unint64_t v34 = v33 + 8;
      }
      *(void *)(a1 + 112) = v34;
      ++v11;
    }
    while (v11 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3));
  }
}

void sub_2162EFEB4(void *a1, unint64_t a2, uint64_t *a3, void **a4, _WORD *a5, _WORD *a6)
{
  uint64_t v9 = a3;
  uint64_t v12 = a1[1];
  unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v12) >> 3);
  unint64_t v14 = v13 - a2;
  if (v13 <= a2)
  {
    if (*((char *)a3 + 23) < 0)
    {
      a3[1] = 0;
      uint64_t v9 = (uint64_t *)*a3;
    }
    else
    {
      *((unsigned char *)a3 + 23) = 0;
    }
    __int16 v21 = 0;
    *(_WORD *)uint64_t v9 = 0;
  }
  else
  {
    unint64_t v15 = v14 - 1;
    unint64_t v16 = *(void *)(a1[10] + 8 * (v14 - 1));
    uint64_t v17 = a1[4];
    if (v16 >= (a1[5] - v17) >> 1)
    {
      uint64_t v18 = 0;
      unint64_t v20 = 0;
    }
    else
    {
      uint64_t v18 = (void *)(v17 + 2 * v16);
      unint64_t v19 = *(unsigned __int16 *)(v12 + 40 * v15 + 24);
      if (v17) {
        unint64_t v20 = v19;
      }
      else {
        unint64_t v20 = 0;
      }
    }
    sub_21617FAAC(&__dst, v18, v20);
    if (*((char *)v9 + 23) < 0) {
      operator delete((void *)*v9);
    }
    *(_OWORD *)uint64_t v9 = __dst;
    _DWORD v9[2] = (uint64_t)v30;
    __int16 v21 = *(_WORD *)(a1[1] + 40 * v15 + 32);
  }
  *a5 = v21;
  if (v13 >= a2 && v14 >= 2)
  {
    unint64_t v23 = v14 - 2;
    unint64_t v24 = *(void *)(a1[10] + 8 * (v14 - 2));
    uint64_t v25 = a1[4];
    if (v24 >= (a1[5] - v25) >> 1)
    {
      unint64_t v26 = 0;
      unint64_t v27 = 0;
    }
    else
    {
      unint64_t v26 = (void *)(v25 + 2 * v24);
      if (v25) {
        unint64_t v27 = *(unsigned __int16 *)(a1[1] + 40 * v23 + 24);
      }
      else {
        unint64_t v27 = 0;
      }
    }
    sub_21617FAAC(&__dst, v26, v27);
    if (*((char *)a4 + 23) < 0) {
      operator delete(*a4);
    }
    *(_OWORD *)a4 = __dst;
    a4[2] = v30;
    __int16 v28 = *(_WORD *)(a1[1] + 40 * v23 + 32);
  }
  else
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 0;
      a4 = (void **)*a4;
    }
    else
    {
      *((unsigned char *)a4 + 23) = 0;
    }
    __int16 v28 = 0;
    *(_WORD *)a4 = 0;
  }
  *a6 = v28;
}

uint64_t sub_2162F0080(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (*(void *)(result + 16) != v2)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = *(void *)(v4[10] + 8 * v6);
      uint64_t v8 = v4[4];
      if (v7 >= (v4[5] - v8) >> 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v9 = v8 + 2 * v7;
        if (v8) {
          uint64_t v10 = *(unsigned __int16 *)(v2 + v5 + 24);
        }
        else {
          uint64_t v10 = 0;
        }
      }
      unint64_t v11 = *(void *)(v4[13] + 8 * v6);
      uint64_t v12 = v4[7];
      if (v11 >= (v4[8] - v12) >> 1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v13 = v12 + 2 * v11;
        if (v12) {
          uint64_t v14 = *(unsigned __int16 *)(v2 + v5 + 28);
        }
        else {
          uint64_t v14 = 0;
        }
      }
      __n128 result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(a2 + 16))(a2, v6++, v9, v10, v13, v14, *(unsigned __int16 *)(v2 + v5 + 30), *(unsigned __int16 *)(v2 + v5 + 32));
      uint64_t v2 = v4[1];
      v5 += 40;
    }
    while (v6 < 0xCCCCCCCCCCCCCCCDLL * ((v4[2] - v2) >> 3));
  }
  return result;
}

uint64_t sub_2162F0180(uint64_t a1)
{
  uint64_t v2 = sub_2162D1CE4(4u);
  uint64_t result = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    return sub_2162F0080(a1, (uint64_t)&unk_26C6CA0A0);
  }
  return result;
}

void sub_2162F01DC(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, void *a5, unint64_t a6, int a7, int a8)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v15 = sub_2162D1CE4(4u);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    sub_2161E30A8(a3, a4, &v21);
    int v16 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
    std::string::size_type v17 = v21.__r_.__value_.__r.__words[0];
    sub_2161E30A8(a5, a6, &__p);
    uint64_t v18 = &v21;
    if (v16 < 0) {
      uint64_t v18 = (std::string *)v17;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 134219010;
    uint64_t v23 = a2;
    __int16 v24 = 2080;
    uint64_t v25 = v18;
    __int16 v26 = 2080;
    unint64_t v27 = p_p;
    __int16 v28 = 1024;
    int v29 = a7;
    __int16 v30 = 1024;
    int v31 = a8;
    _os_log_debug_impl(&dword_2160F5000, v15, OS_LOG_TYPE_DEBUG, "Word history %ld: [%s] [%s] (lc:%d rc:%d)", buf, 0x2Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2162F0348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162F036C(uint64_t a1, unsigned int a2, CFLocaleIdentifier localeIdentifier, const void *a4, const void *a5, const __CFString *a6, const void *a7, int a8, unsigned __int8 a9, unsigned __int8 a10, char a11)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v18 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_26C6BE9C0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 4sub_216195B94((const void **)&a9, 0) = 0;
  *(_DWORD *)(a1 + 8sub_216195B94((const void **)&a9, 0) = 1065353216;
  if (localeIdentifier) {
    CFLocaleRef v19 = CFLocaleCreate(0, localeIdentifier);
  }
  else {
    CFLocaleRef v19 = sub_2161E29D0(a2);
  }
  CFLocaleRef v20 = v19;
  uint64_t *v18 = sub_2162F0514(v19, a4, a5, a6, a7, a8, a9, a10, a11);
  *(void *)(a1 + 32) = LMLanguageModelGetOrder();
  *(unsigned char *)(a1 + 4sub_216195B94((const void **)&a9, 0) = LMLanguageModelAdaptationIsEnabled();
  if (a9 && *(uint64_t *)(a1 + 32) <= 0) {
    *(void *)(a1 + 32) = 3;
  }
  if (a2 == 1 && *v18 && (a8 & 1) == 0)
  {
    LMVocabularyGetSharedVocabulary();
    LMLanguageModelAddTransientVocabulary();
  }
  if (v20) {
    CFRelease(v20);
  }
  return a1;
}

void sub_2162F04CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_216144C28(a11);
  sub_2161868BC((const void **)(v11 + 24), 0);
  sub_2161868BC((const void **)(v11 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F0514(const void *a1, const void *a2, const void *a3, const __CFString *a4, const void *a5, int a6, int a7, int a8, char a9)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  unint64_t v35 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F512A8], a1);
  std::string::size_type v17 = (const void **)MEMORY[0x263EFFB38];
  if (a5) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F51260], a5);
  }
  else {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F51248], (const void *)*MEMORY[0x263EFFB38]);
  }
  if (a2) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F51268], a2);
  }
  if (a4) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F51258], a4);
  }
  uint64_t v18 = (const void *)*MEMORY[0x263EFFB40];
  CFLocaleRef v19 = *v17;
  if (a6) {
    CFLocaleRef v20 = (const void *)*MEMORY[0x263EFFB40];
  }
  else {
    CFLocaleRef v20 = *v17;
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F512D8], v20);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F512A0], v19);
  std::string v21 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (a7)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F512C8], v19);
    CFNumberRef v22 = CFNumberCreate(*v21, kCFNumberCFIndexType, &unk_21638DCD8);
    CFNumberRef v34 = v22;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F51280], v22);
    if (v22) {
      CFRelease(v22);
    }
  }
  if (a8) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F512C0], v18);
  }
  uint64_t v23 = CFArrayCreateMutable(*v21, 0, MEMORY[0x263EFFF70]);
  CFNumberRef v34 = v23;
  CFStringRef v24 = (const __CFString *)MEMORY[0x2166C9540](a1);
  if (CFStringCompare(v24, @"ja", 0))
  {
    if (a4 && CFEqual(a4, off_26797C870[0]))
    {
      uint64_t v25 = a9 ? v18 : v19;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F51290], v25);
      CFStringRef v26 = (const __CFString *)MEMORY[0x2166C9540](a1);
      CFComparisonResult v27 = CFStringCompare(v26, @"zh-Hans", 0);
      if (a3)
      {
        if (v27 == kCFCompareEqualTo && (a6 & 1) == 0)
        {
          if (a2)
          {
            CFArrayAppendValue(v23, a2);
          }
          else
          {
            CFStringRef v29 = sub_2162D9BC0(@"zh-Hans");
            CFArrayAppendValue(v23, v29);
            if (v29) {
              CFRelease(v29);
            }
          }
          CFArrayAppendValue(v23, a3);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F51268], v23);
        }
      }
    }
  }
  else
  {
    int valuePtr = 0;
    CFNumberRef v28 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    if (v28)
    {
      CFDictionarySetValue(Mutable, @"NewWordPenalty", v28);
      CFRelease(v28);
    }
  }
  uint64_t v30 = LMLanguageModelCreate();
  if (v23) {
    CFRelease(v23);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v30;
}

void sub_2162F0858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, const void *);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v7 = va_arg(va2, const void *);
  sub_21617DB94((const void **)va, 0);
  sub_2161BE0C8((const void **)va1, 0);
  sub_2161DFB5C((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F08E0(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BE9C0;
  sub_2162F0954(a1);
  if (*(void *)(a1 + 8)) {
    LMLanguageModelRelease();
  }
  sub_216144C28(a1 + 48);
  sub_2161868BC((const void **)(a1 + 24), 0);
  sub_2161868BC((const void **)(a1 + 16), 0);
  return a1;
}

uint64_t sub_2162F0954(uint64_t a1)
{
  sub_2162F1394((uint64_t)v4, a1 + 48);
  for (unint64_t i = v5; i; unint64_t i = (void *)*i)
    sub_2162F0F0C(a1, i[2]);
  return sub_216144C28((uint64_t)v4);
}

void sub_2162F09AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216144C28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2162F09C4(uint64_t a1)
{
  sub_2162F08E0(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162F09FC(uint64_t a1, const __CFString *a2)
{
  uint64_t v2 = (const void **)(a1 + 16);
  if (*(const __CFString **)(a1 + 16) == a2) {
    return 0;
  }
  LMLanguageModelResetDynamicData();
  if (a2 && CFStringGetLength(a2) >= 1) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  }
  else {
    CFStringRef Copy = 0;
  }
  sub_2161868BC(v2, Copy);

  return LMLanguageModelSetParameterValue();
}

uint64_t sub_2162F0ABC(uint64_t a1, const __CFString *a2)
{
  uint64_t v2 = (const void **)(a1 + 24);
  if (*(const __CFString **)(a1 + 24) == a2) {
    return 0;
  }
  LMLanguageModelResetDynamicData();
  if (a2 && CFStringGetLength(a2) >= 1) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  }
  else {
    CFStringRef Copy = 0;
  }
  sub_2161868BC(v2, Copy);

  return LMLanguageModelSetParameterValue();
}

uint64_t sub_2162F0B7C()
{
  return LMLanguageModelGetTokenIDForString();
}

uint64_t sub_2162F0B88()
{
  return LMLanguageModelAddTokenForString();
}

uint64_t sub_2162F0B90(uint64_t a1)
{
  return MEMORY[0x270F46AF0](*(void *)(a1 + 8));
}

double sub_2162F0B98()
{
  if (LMLanguageModelAdaptationIsEnabled())
  {
    LMLanguageModelSetParameterValue();
    LMLanguageModelConditionalProbability();
    double v1 = -v0;
    LMLanguageModelSetParameterValue();
  }
  else
  {
    LMLanguageModelConditionalProbability();
    return -v2;
  }
  return v1;
}

double sub_2162F0C60()
{
  if (LMLanguageModelAdaptationIsEnabled())
  {
    LMLanguageModelSetParameterValue();
    LMLanguageModelJointProbability();
    double v1 = -v0;
    LMLanguageModelSetParameterValue();
  }
  else
  {
    LMLanguageModelJointProbability();
    return -v2;
  }
  return v1;
}

uint64_t sub_2162F0D14()
{
  return LMLanguageModelConditionalProbability();
}

uint64_t sub_2162F0D1C()
{
  return LMLanguageModelJointProbability();
}

uint64_t sub_2162F0D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  uint64_t v6 = *(void *)(a1 + 8);
  BOOL v7 = a2 == 1;
  if (a6) {
    return MEMORY[0x270F46B58](v6, v7, *a6);
  }
  else {
    return LMLanguageModelIncrementUsageCount();
  }
}

uint64_t sub_2162F0D40()
{
  return LMLanguageModelResetDynamicData();
}

uint64_t sub_2162F0D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  LMLanguageModelCreatePredictionEnumerator();
  char v14 = 0;
  uint64_t v8 = 4 * a5;
  do
  {
    uint64_t v9 = LMPredictionEnumeratorAdvance();
    if (!v9) {
      break;
    }
    MEMORY[0x270FA5388](v9);
    uint64_t v12 = 0;
    double v13 = 0.0;
    Predictiouint64_t n = LMPredictionEnumeratorGetPrediction();
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t, char *, double))(a6 + 16))(a6, (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), Prediction, v12, &v14, v13);
  }
  while (!v14);
  return LMPredictionEnumeratorRelease();
}

BOOL sub_2162F0E50(uint64_t a1, int a2)
{
  int DynamicTokenIDRange = LMLanguageModelGetDynamicTokenIDRange();
  BOOL result = 0;
  if (DynamicTokenIDRange) {
    return a2 == 0;
  }
  return result;
}

void *sub_2162F0EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = a1 + 48;
  BOOL result = sub_2162F1044((void *)(a1 + 48), &v6);
  if (!result)
  {
    sub_2162F1130(v3, &v6, &v6, &v5);
    return (void *)LMLanguageModelAddObserver();
  }
  return result;
}

void *sub_2162F0F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  double v2 = (void *)(a1 + 48);
  BOOL result = sub_2162F1044((void *)(a1 + 48), &v4);
  if (result)
  {
    sub_2162F1660(v2, &v4);
    return (void *)LMLanguageModelRemoveObserver();
  }
  return result;
}

uint64_t sub_2162F0F64(uint64_t a1, uint64_t a2)
{
  sub_2162F1394((uint64_t)v6, a2 + 48);
  for (unint64_t i = v7; i; unint64_t i = (void *)*i)
  {
    sub_2162F0F0C(a2, i[2]);
    sub_2162F0EAC(a1, i[2], i[3]);
  }
  return sub_216144C28((uint64_t)v6);
}

void sub_2162F0FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216144C28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F0FE8()
{
  LMVocabularyGetSharedVocabulary();
  uint64_t result = LMVocabularyContainsLemma();
  if (result)
  {
    return LMLanguageModelGetTokenIDForString();
  }
  return result;
}

void *sub_2162F1044(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_2162F1130(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    double v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v10;
  uint64_t v16 = *a4;
  i[2] = *a3;
  i[3] = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_2161297B4(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  CFStringRef v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *unint64_t i = *v24;
LABEL_38:
    *CFStringRef v24 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    CFStringRef v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2162F1380(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F1394(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_2161297B4(a1, *(void *)(a2 + 8));
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    sub_2162F140C(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_2162F13F4(_Unwind_Exception *a1)
{
  sub_216144C28(v1);
  _Unwind_Resume(a1);
}

void *sub_2162F140C(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_2161297B4(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2162F164C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2162F1660(void *a1, void *a2)
{
  uint64_t result = sub_2162F1698(a1, a2);
  if (result)
  {
    sub_216218154(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_2162F1698(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_2162F1784(uint64_t a1, char a2)
{
  uint64_t v4 = sub_2161B637C(a1);
  *(void *)uint64_t v4 = &unk_26C6C5138;
  *(_OWORD *)(v4 + 80sub_216195B94((const void **)&a9, 0) = 0u;
  sub_2161055D0((void *)(v4 + 824));
  sub_2161055D0((void *)(a1 + 832));
  *(void *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 84sub_216195B94((const void **)&a9, 0) = 0u;
  sub_2161055D0((void *)(a1 + 864));
  *(void *)(a1 + 872) = 0;
  sub_2160F6FA0((_OWORD *)(a1 + 904));
  *(_OWORD *)(a1 + 952) = 0u;
  *(unsigned char *)(a1 + 1224) = a2;
  return a1;
}

void sub_2162F1834(_Unwind_Exception *a1)
{
  sub_2161055D8(v4);
  uint64_t v6 = *(void *)(v1 + 856);
  *(void *)(v1 + 856) = 0;
  if (v6) {
    MEMORY[0x2166CA800](v6, 0x1050C40717B85FCLL);
  }
  sub_2161055D8(v3);
  sub_2161055D8(v2);
  unint64_t v7 = *(std::__shared_weak_count **)(v1 + 808);
  if (v7) {
    sub_2161121B0(v7);
  }
  sub_2161B6434(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F18A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 744);
  uint64_t v3 = *(void *)(a1 + 752);
  if (v2 == v3 || (unint64_t v4 = *(unsigned int *)(a1 + 712), v4 >= (v3 - v2) >> 3)) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *(_DWORD **)(v2 + 8 * v4);
  }
  uint64_t v6 = sub_216221510(&v14, v5);
  uint64_t v7 = *(void *)(a1 + 744);
  uint64_t v8 = *(void *)(a1 + 752);
  if (v7 == v8 || (unint64_t v9 = *(unsigned int *)(a1 + 712), v9 >= (v8 - v7) >> 3)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)(v7 + 8 * v9);
  }
  sub_21622161C((_DWORD **)v6, v10);
  unint64_t v11 = v15;
  float v15 = 0;
  if (v11)
  {
    uint8x8_t v12 = sub_21620FE6C(v11);
    MEMORY[0x2166CA800](v12, 0x20C4093837F09);
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
  }
  return result;
}

void sub_2162F19CC(_Unwind_Exception *a1)
{
  sub_2162153A0((void ***)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_2162F19E0(uint64_t result, unsigned int a2, uint64_t a3, unsigned char *a4)
{
  unint64_t v4 = a2;
  if ((_BYTE)a2 && !*a4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(*(void *)(result + 40) + 352) + 12 * (a2 >> 8);
    unint64_t v8 = 1;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 + 32) + 16))();
      if (*a4) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v8 >= v4;
      }
      ++v8;
      v7 += 12;
    }
    while (!v9);
  }
  return result;
}

void sub_2162F1A84(uint64_t a1, unsigned __int16 *a2, unint64_t a3, int a4, int a5, unsigned __int16 *a6, unint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 872) && a7 | a3 && *(void *)(a1 + 952))
  {
    if (a6) {
      unint64_t v15 = a7 >> 1;
    }
    else {
      unint64_t v15 = 0;
    }
    sub_216336EA0(a6, v15, 0, 0, 0, (uint64_t)&v32);
    unint64_t v16 = a3 >> 1;
    if (!a2) {
      unint64_t v16 = 0;
    }
    if (a4)
    {
      *(_OWORD *)std::string __p = 0u;
      long long v35 = 0u;
      int v36 = 1065353216;
      if (a5) {
        char v17 = 31;
      }
      else {
        char v17 = 1;
      }
      sub_2161C3410(a1 + 816, (uint64_t)&v32, (uint64_t)a2, v16, v17, (uint64_t)__p, 0, 0);
      sub_216144C28((uint64_t)__p);
    }
    else
    {
      sub_216336800(&v32, a2, v16, (a8 >> 6) & 8 | a8 & 0x20 | (a8 >> 4) & 0x10 | ((char)a8 >> 7) & 6, 0, 0);
    }
    sub_21610B834(__p, (char *)&unk_2163A4BED);
    if (SBYTE7(v35) < 0) {
      operator delete(__p[0]);
    }
    CFStringRef v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v19 = v33[0];
    uint64_t v18 = v33[1];
    float v20 = *((float *)sub_2161A2A80() + 98);
    uint64_t v21 = *(void *)(a1 + 952);
    __p[0] = &unk_26C6C8070;
    __p[1] = &v29;
    *((void *)&v35 + 1) = __p;
    (*(void (**)(uint64_t, unsigned __int16 **, void **, void))(*(void *)v21 + 112))(v21, &v32, __p, (int)(float)((float)((float)(1.0 / v20) + -1.0) * (float)(0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 3))));
    sub_216198AB4(__p);
    unint64_t v22 = 0;
    LOBYTE(__p[0]) = 0;
    while (1)
    {
      uint64_t v23 = v29;
      if (v22 >= (v30 - (unsigned char *)v29) >> 3) {
        break;
      }
      unint64_t v24 = *((_DWORD *)v29 + 2 * v22);
      if (*((_DWORD *)v29 + 2 * v22))
      {
        uint64_t v25 = *(void *)(a1 + 872) + 12 * (*((_DWORD *)v29 + 2 * v22) >> 8);
        unint64_t v26 = 1;
        do
        {
          (*(void (**)(uint64_t, uint64_t, void **, float))(a9 + 16))(a9, v25, __p, *((float *)v29 + 2 * v22 + 1));
          int v27 = LOBYTE(__p[0]);
          if (LOBYTE(__p[0])) {
            BOOL v28 = 1;
          }
          else {
            BOOL v28 = v26 >= v24;
          }
          ++v26;
          v25 += 12;
        }
        while (!v28);
      }
      else
      {
        int v27 = 0;
      }
      ++v22;
      if (v27)
      {
        uint64_t v23 = v29;
        break;
      }
    }
    if (v23)
    {
      uint64_t v30 = v23;
      operator delete(v23);
    }
    uint64_t v32 = (unsigned __int16 *)&unk_26C6BE8C8;
    __p[0] = v33;
    sub_2161C4FA0((void ***)__p);
  }
}

void sub_2162F1D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  a17 = &a13;
  sub_2161C4FA0((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_2162F1DF8(uint64_t a1, unsigned __int16 *a2, unint64_t a3, int a4, int a5, unsigned __int16 *a6, unint64_t a7, unsigned int a8, uint64_t a9)
{
  v10[0] = 0;
  v10[1] = v10;
  _DWORD v10[2] = 0x2000000000;
  char v11 = 0;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  _DWORD v9[2] = sub_2162F1EB0;
  void v9[3] = &unk_26426EC08;
  v9[5] = v10;
  v9[6] = a1;
  v9[4] = a9;
  sub_2162F1A84(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v9);
  _Block_object_dispose(v10, 8);
}

void sub_2162F1E98(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_2162F1EB0(void *a1, uint64_t a2, unsigned char *a3, float a4)
{
  uint64_t v8 = a1[6];
  memset(&__len[1], 0, 10);
  *(_OWORD *)uint8x8_t v12 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  float v15 = 0.0;
  LOWORD(__len[1]) = *(_WORD *)a2;
  sub_2160F7108(v8 + 904, *(unsigned int *)(a2 + 8));
  sub_216105C3C((unint64_t *)(v8 + 864), v8 + 904);
  __len[0] = *(_DWORD *)(v8 + 936);
  sub_2161B44A8((std::string *)&__p[1], *(const std::string::value_type **)(v8 + 928), __len[0]);
  uint64_t v9 = *(void *)(v8 + 352) + 12 * *(unsigned int *)(a2 + 4);
  uint64_t v10 = (const std::string::value_type *)sub_2162F2000(v8, *(_DWORD *)(v9 + 8), __len);
  sub_2161B44A8((std::string *)v12, v10, __len[0]);
  *(void *)((char *)&__len[1] + 2) = *(void *)v9;
  float v15 = a4;
  (*(void (**)(void))(a1[4] + 16))();
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
    *a3 = 1;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v12[0]);
  }
}

void sub_2162F1FE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162F2090((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F2000(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 3) != 0) {
    return 0;
  }
  unint64_t v6 = a2 >> 2;
  uint64_t v7 = (unint64_t *)(a1 + 824);
  if (sub_216105D5C(a1 + 824) <= v6) {
    return 0;
  }
  sub_2160F7108(a1 + 904, v6);
  sub_216105C3C(v7, a1 + 904);
  *a3 = *(_DWORD *)(a1 + 936);
  return *(void *)(a1 + 928);
}

uint64_t sub_2162F2090(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_2162F20D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 904;
  sub_2160F707C((void *)(a1 + 904), a2, a3);
  uint64_t result = sub_216105BDC((uint64_t *)(a1 + 824), v4);
  if (result) {
    return *(unsigned int *)(a1 + 940);
  }
  return result;
}

uint64_t sub_2162F2114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v10[4] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v7 = &unk_26C6BE8C8;
  memset(v8, 0, sizeof(v8));
  char v9 = 0;
  v10[0] = (void **)&unk_26C6B56F0;
  void v10[3] = (void **)v10;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)a1 + 88))(a1, a2, a3, a4, &v7, a5);
  sub_2162F3B28(v10);
  uint64_t v7 = &unk_26C6BE8C8;
  v10[0] = (void **)v8;
  sub_2161C4FA0(v10);
  return v5;
}

void sub_2162F2218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2162F3B28((void ***)va);
  sub_2161C4FA0((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_2162F223C(uint64_t a1, int a2, void **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a1 + 744);
  uint64_t v13 = *(void *)(a1 + 752);
  if (v12 == v13) {
    return 0;
  }
  unint64_t v15 = *(unsigned int *)(a1 + 712);
  if (v15 >= (v13 - v12) >> 3) {
    return 0;
  }
  unint64_t v18 = 0;
  if (((a7 | a4) & 1) != 0 || !*(void *)(v12 + 8 * v15)) {
    return v18;
  }
  int v24 = a2;
  if (a2 == 2) {
    int v25 = 1;
  }
  else {
    int v25 = 2 * (a2 == 1);
  }
  if (a2 == 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      uint64_t v12 = *(void *)(a1 + 744);
      uint64_t v13 = *(void *)(a1 + 752);
      goto LABEL_11;
    }
    return 0;
  }
LABEL_11:
  uint64_t v72 = 0;
  memset(v71, 0, sizeof(v71));
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v66 = 0u;
  if (v12 == v13 || (unint64_t v26 = *(unsigned int *)(a1 + 712), v26 >= (v13 - v12) >> 3)) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = *(void *)(v12 + 8 * v26);
  }
  v65[0] = v27;
  v65[1] = a6;
  *((void *)&v66 + 1) = a3;
  LODWORD(v67) = a4;
  *((void *)&v67 + 1) = a9;
  *(void *)&long long v68 = a8;
  *((void *)&v68 + 1) = a7;
  LOBYTE(v7sub_216195B94((const void **)&a9, 0) = (a2 & 0x800) == 0;
  BYTE1(v7sub_216195B94((const void **)&a9, 0) = (a2 & 0xF100) != 0;
  int v29 = (v24 == 1) & ((unsigned __int16)(a2 & 0x800) >> 11);
  v71[0] = (v24 == 1) & ((unsigned __int16)(a2 & 0x800) >> 11);
  LODWORD(v69) = v25;
  v71[1] = 1;
  if (a4 >= 0x80)
  {
    int v29 = 0;
    v71[0] = 0;
  }
  *((void *)&v70 + 1) = &v71[2];
  int v30 = ~a2 & 0x10900;
  if ((a2 & 0x109FF) == 0x10901) {
    unsigned int v31 = 8;
  }
  else {
    unsigned int v31 = 64;
  }
  if (a4 < 3) {
    uint64_t v32 = 1;
  }
  else {
    uint64_t v32 = v31;
  }
  if (!v30)
  {
    uint64_t v63 = 0;
    uint64_t v64 = a8;
    if (a3) {
      unint64_t v33 = a4 >> 1;
    }
    else {
      unint64_t v33 = 0;
    }
    if (v29) {
      BOOL v34 = 1;
    }
    else {
      BOOL v34 = v24 == 2;
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v60 = 0;
    long long v76 = 0uLL;
    long long v77 = 0uLL;
    int v78 = 1065353216;
    if (v34) {
      char v35 = 31;
    }
    else {
      char v35 = 30;
    }
    sub_2161C3370(a1 + 816, (uint64_t)a3, v33, v35, (uint64_t)&v76, (char **)__p, &v63, (uint64_t)&v57);
    sub_21610B834(v73, (char *)&unk_2163A4BED);
    if (v74 < 0) {
      operator delete(v73[0]);
    }
    int v36 = (void *)HIBYTE(v60);
    uint64_t v37 = __p;
    if (v60 < 0)
    {
      uint64_t v37 = (void **)__p[0];
      int v36 = __p[1];
    }
    if (!v37) {
      int v36 = 0;
    }
    v56[0] = v37;
    v56[1] = v36;
    unint64_t v62 = 0;
    uint64_t v38 = v63;
    if (v25)
    {
      if (v25 == 1)
      {
        uint64_t v54 = *(void *)(a1 + 960);
        double v55 = operator new(0x40uLL);
        *double v55 = &unk_26C6C80C8;
        v55[1] = &v57;
        v55[2] = &v62;
        uint64_t v55[3] = v65;
        v55[4] = &v64;
        v55[5] = v56;
        v55[6] = v38;
        v55[7] = &v76;
        uint64_t v75 = v55;
        (*(void (**)(uint64_t, long long *, void ***))(*(void *)v54 + 96))(v54, &v57, v73);
      }
      else
      {
        if (v25 != 2) {
          goto LABEL_70;
        }
        uint64_t v39 = *(void *)(a1 + 960);
        unint64_t v40 = operator new(0x40uLL);
        *unint64_t v40 = &unk_26C6C80C8;
        v40[1] = &v57;
        v40[2] = &v62;
        void v40[3] = v65;
        void v40[4] = &v64;
        v40[5] = v56;
        v40[6] = v38;
        v40[7] = &v76;
        uint64_t v75 = v40;
        (*(void (**)(uint64_t, long long *, void ***, uint64_t))(*(void *)v39 + 112))(v39, &v57, v73, v32);
      }
    }
    else
    {
      uint64_t v52 = *(void *)(a1 + 960);
      double v53 = operator new(0x40uLL);
      *double v53 = &unk_26C6C80C8;
      v53[1] = &v57;
      v53[2] = &v62;
      void v53[3] = v65;
      v53[4] = &v64;
      v53[5] = v56;
      v53[6] = v38;
      v53[7] = &v76;
      uint64_t v75 = v53;
      (*(void (**)(uint64_t, long long *, void ***))(*(void *)v52 + 80))(v52, &v57, v73);
    }
    sub_216198AB4(v73);
LABEL_70:
    unint64_t v18 = v62;
    *(void *)&long long v57 = &unk_26C6BE8C8;
    v73[0] = (void **)&v57 + 1;
    sub_2161C4FA0(v73);
    sub_216144C28((uint64_t)&v76);
    if (SHIBYTE(v60) < 0)
    {
      CFIndex v51 = __p[0];
      goto LABEL_72;
    }
    return v18;
  }
  v56[0] = a8;
  uint64_t v63 = a12;
  uint64_t v64 = a11;
  if (a3) {
    uint64_t v41 = (void **)(a4 >> 1);
  }
  else {
    uint64_t v41 = 0;
  }
  v73[0] = a3;
  v73[1] = v41;
  unint64_t v62 = 0;
  long long v57 = 0uLL;
  uint64_t v58 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)sub_216268B0C();
  if (!(_BYTE)v70)
  {
    sub_216183E18((uint64_t *)v73, &v62, 0, 0, &v76);
    uint64_t v58 = v77;
    long long v57 = v76;
    unint64_t v42 = BYTE7(v77);
    uint64_t v43 = &v57;
    if (SBYTE7(v77) < 0) {
      uint64_t v43 = (long long *)v57;
    }
    if (v58 < 0) {
      unint64_t v42 = *((void *)&v57 + 1);
    }
    uint64_t v44 = (void *)(v42 - v62);
    if (!v43) {
      uint64_t v44 = 0;
    }
    __p[0] = v43;
    __p[1] = v44;
  }
  sub_21610B834(&v76, (char *)&unk_2163A4BED);
  if (SBYTE7(v77) < 0) {
    operator delete((void *)v76);
  }
  unint64_t v61 = 0;
  if (v25)
  {
    if (v25 == 1)
    {
      uint64_t v49 = *(void *)(a1 + 960);
      double v50 = operator new(0x58uLL);
      *double v50 = &unk_26C6B5698;
      v50[1] = &v61;
      void v50[2] = v65;
      v50[3] = v56;
      v50[4] = a5;
      v50[5] = &v62;
      v50[6] = &v64;
      v50[7] = v73;
      v50[8] = __p;
      v50[9] = a10;
      v50[10] = &v63;
      *((void *)&v77 + 1) = v50;
      sub_2162105DC(v49, a5, (uint64_t)&v76, 0, a11);
    }
    else
    {
      if (v25 != 2) {
        goto LABEL_65;
      }
      uint64_t v45 = *(void *)(a1 + 960);
      double v46 = operator new(0x58uLL);
      *double v46 = &unk_26C6B5698;
      v46[1] = &v61;
      v46[2] = v65;
      v46[3] = v56;
      v46[4] = a5;
      v46[5] = &v62;
      v46[6] = &v64;
      v46[7] = v73;
      v46[8] = __p;
      v46[9] = a10;
      v46[10] = &v63;
      *((void *)&v77 + 1) = v46;
      sub_216211898(v45, a5, a11, (uint64_t)&v76, v32);
    }
  }
  else
  {
    uint64_t v47 = *(void *)(a1 + 960);
    CFStringRef v48 = operator new(0x58uLL);
    *CFStringRef v48 = &unk_26C6B5698;
    v48[1] = &v61;
    v48[2] = v65;
    v48[3] = v56;
    v48[4] = a5;
    v48[5] = &v62;
    void v48[6] = &v64;
    void v48[7] = v73;
    v48[8] = __p;
    _WORD v48[9] = a10;
    v48[10] = &v63;
    *((void *)&v77 + 1) = v48;
    sub_2162105DC(v47, a5, (uint64_t)&v76, 1u, a11);
  }
  sub_216211814(&v76);
LABEL_65:
  unint64_t v18 = v61;
  if (SHIBYTE(v58) < 0)
  {
    CFIndex v51 = (void *)v57;
LABEL_72:
    operator delete(v51);
  }
  return v18;
}