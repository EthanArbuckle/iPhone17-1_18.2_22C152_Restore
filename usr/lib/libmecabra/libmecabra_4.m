void sub_2162F2948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  sub_216198AB4((void *)(v25 - 176));
  *(void *)(v25 - 176) = &a12;
  sub_2161C4FA0((void ***)(v25 - 176));
  sub_216144C28(v25 - 144);
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2162F2A04(void *a1, uint64_t a2)
{
  (*(void (**)(void *))(*a1 + 24))(a1);
  v4 = (void *)a1[94];
  unint64_t v5 = a1[95];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = a1[93];
    uint64_t v8 = ((uint64_t)v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_2161BA9E4();
    }
    uint64_t v9 = v5 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      v12 = (char *)sub_2160FFAA8((uint64_t)(a1 + 95), v11);
    }
    else {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(void *)v13 = a2;
    v6 = v13 + 8;
    v15 = (char *)a1[94];
    v16 = (char *)a1[93];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)a1[93];
    }
    a1[93] = v13;
    a1[94] = v6;
    a1[95] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v4 = a2;
    v6 = v4 + 1;
  }
  a1[94] = v6;
  operator new();
}

void sub_2162F2BBC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10A1C40079592F6);
  MEMORY[0x2166CA800](v1, 0x10A1C4088EF1EDBLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F2C00(uint64_t a1, const std::string *a2)
{
  sub_2162F2D70(v5, a2, 24);
  sub_216105DA4((uint64_t)v5, (void **)(a1 + 824));
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166CA750](&v7);
}

void sub_2162F2D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140418((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2162F2D70(uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C328] + 104;
  a1[16] = MEMORY[0x263F8C328] + 104;
  uint64_t v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  a1[2] = MEMORY[0x263F8C328] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  uint64_t v10 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 24)) = v11;
  a1[1] = 0;
  v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x263F8C328] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  sub_2161E066C(v9, a2, a3);
  return a1;
}

void sub_2162F300C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_2162F3034(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 376) = *a2;
  *(_DWORD *)(a1 + 380) = a2[1];
  sub_21628D460(0, 0, (uint64_t)(a2 + 4), a2[2]);
  sub_2162F2A04((void *)a1, v3);
}

void sub_2162F330C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10A1C40079592F6);
  MEMORY[0x2166CA800](v1, 0x10A1C4088EF1EDBLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F3350(uint64_t a1, char *a2, uint64_t a3)
{
  sub_2161B4568((std::string *)(a1 + 400), a2);
  sub_216226684(a2, a3, 1, &v10);
  long long v6 = v10;
  long long v10 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 808);
  *(_OWORD *)(a1 + 800) = v6;
  if (!v7)
  {
    uint64_t v8 = (_DWORD **)v6;
    if (!(void)v6) {
      return 0;
    }
LABEL_7:
    sub_2162F3034(a1, *v8);
  }
  sub_2161121B0(v7);
  if (*((void *)&v10 + 1)) {
    sub_2161121B0(*((std::__shared_weak_count **)&v10 + 1));
  }
  uint64_t v8 = *(_DWORD ***)(a1 + 800);
  if (v8) {
    goto LABEL_7;
  }
  return 0;
}

const char *sub_2162F3404()
{
  return "UTF-16LE";
}

void *sub_2162F3410(void *a1)
{
  uint64_t v2 = a1[120];
  a1[120] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }

  return sub_2161B65B8(a1);
}

uint64_t sub_2162F3474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2162F3488(a4, (uint64_t *)(a1 + 832), a2, a3);
}

uint64_t sub_2162F3488(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_2160F6FA0(v10);
  sub_2160F707C(v10, a3, a4);
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  if (sub_216105BDC(a2, (uint64_t)v10))
  {
    __int16 v8 = v11;
    *(_DWORD *)(a1 + 8) = v12;
    *(_WORD *)(a1 + 12) = v8;
  }
  return sub_2160F6FB0((uint64_t)v10);
}

void sub_2162F3510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_2162F3524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  sub_2160F6FA0(v17);
  sub_2160F707C(v17, a2, a3);
  unint64_t v10 = 0;
  int v11 = (uint64_t *)(a1 + 824);
  for (i = (_WORD *)(a4 + 12); ; i += 12)
  {
    char v13 = sub_216105C9C(v11, (uint64_t)v17);
    char v14 = v10 < a5 ? v13 : 0;
    if ((v14 & 1) == 0) {
      break;
    }
    __int16 v15 = v18;
    *((_DWORD *)i - 1) = v19;
    _WORD *i = v15;
    ++v10;
  }
  sub_2160F6FB0((uint64_t)v17);
  return v10;
}

void sub_2162F35C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2162F35E0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  sub_2160F6FA0(&v7);
  sub_2160F7108((uint64_t)&v7, *(unsigned int *)(*(void *)(a1 + 840) + 4 * a2));
  sub_216105C3C((unint64_t *)(a1 + 832), (uint64_t)&v7);
  sub_21617FAAC(a3, __src, (unint64_t)v9 >> 1);
  return sub_2160F6FB0((uint64_t)&v7);
}

void sub_2162F3658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_2162F3670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  result = (unsigned char *)sub_2162F3488((uint64_t)&v8, (uint64_t *)(a1 + 824), a2, a3);
  if (v9) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v10 == 0;
  }
  if (v7)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_2162543C4(&v11, *(uint64_t **)(a1 + 856), v9);
    if (v12 >= v13) {
      return sub_216184F68((unsigned char *)a4, byte_2163CA662);
    }
    else {
      return (unsigned char *)sub_2162F35E0(a1, *(_DWORD *)(*v11 + 4 * v12), (void *)a4);
    }
  }
  return result;
}

void sub_2162F3718(void *a1)
{
  sub_2162F3768(a1);

  JUMPOUT(0x2166CA800);
}

BOOL sub_2162F3750(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1224) == 0;
}

uint64_t sub_2162F3760()
{
  return 0;
}

uint64_t sub_2162F3768(void *a1)
{
  *a1 = &unk_26C6C5138;
  uint64_t v2 = a1[120];
  a1[120] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  uint64_t v3 = a1[119];
  a1[119] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  sub_2160F6FB0((uint64_t)(a1 + 113));
  sub_2161055D8(a1 + 108);
  uint64_t v4 = a1[107];
  a1[107] = 0;
  if (v4) {
    MEMORY[0x2166CA800](v4, 0x1050C40717B85FCLL);
  }
  sub_2161055D8(a1 + 104);
  sub_2161055D8(a1 + 103);
  unint64_t v5 = (std::__shared_weak_count *)a1[101];
  if (v5) {
    sub_2161121B0(v5);
  }

  return sub_2161B6434((uint64_t)a1);
}

void sub_2162F3868()
{
}

void *sub_2162F387C(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C8070;
  result[1] = v3;
  return result;
}

uint64_t sub_2162F38C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C8070;
  a2[1] = v2;
  return result;
}

void sub_2162F38F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  unsigned int v9 = *(char ***)(a1 + 8);
  int v11 = v9[1];
  unint64_t v10 = (unint64_t)v9[2];
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v13 = *v9;
    uint64_t v14 = (v11 - *v9) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        sub_2160FFA74();
      }
      int v18 = (char *)operator new(8 * v17);
    }
    else
    {
      int v18 = 0;
    }
    int v19 = &v18[8 * v14];
    *(void *)int v19 = *a2;
    unint64_t v12 = v19 + 8;
    if (v11 != v13)
    {
      do
      {
        uint64_t v20 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v19 - 1) = v20;
        v19 -= 8;
      }
      while (v11 != v13);
      int v11 = *v9;
    }
    *unsigned int v9 = v19;
    v9[1] = v12;
    v9[2] = &v18[8 * v17];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(void *)int v11 = *a2;
    unint64_t v12 = v11 + 8;
  }
  v9[1] = v12;
  if (*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8) >= 0x1F9uLL) {
    *a6 = 1;
  }
}

uint64_t sub_2162F3A10(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC900)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162F3A50()
{
  return &unk_26C6BC900;
}

void sub_2162F3A60()
{
}

void *sub_2162F3A74()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C6B56F0;
  return result;
}

void sub_2162F3AAC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6B56F0;
}

uint64_t sub_2162F3AD4()
{
  return 0;
}

uint64_t sub_2162F3ADC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B50F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162F3B1C()
{
  return &unk_26C6B50F0;
}

void *sub_2162F3B28(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2162F3BB0()
{
}

__n128 sub_2162F3BC4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26C6C80C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_2162F3C28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C80C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2162F3C70(uint64_t a1, _DWORD *a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, unsigned char *a6)
{
  uint64_t v9 = *a3;
  unint64_t v10 = *a4;
  uint64_t v11 = *a5;
  if (*a3) {
    unint64_t v12 = *a4 >> 1;
  }
  else {
    unint64_t v12 = 0;
  }
  v45[0] = *a3;
  v45[1] = v12;
  uint64_t v13 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v13 + 64) == 2)
  {
    if (sub_21628E550(*(uint64_t **)(a1 + 8), v9, v12, *(void *)(a1 + 48), 0, 0)) {
      return;
    }
    uint64_t v13 = *(void *)(a1 + 24);
  }
  uint64_t v14 = **(void **)(a1 + 32);
  unint64_t v15 = *(void **)(a1 + 16);
  uint64_t v16 = (*v15)++;
  uint64_t v17 = v14 + 24 * v16;
  unint64_t v18 = *(unsigned int *)(v13 + 32);
  if (2 * v11 < v18) {
    LOWORD(v18) = 2 * v11;
  }
  *(_WORD *)(v17 + 12) = v18;
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(v19 + 8);
  if (v10 <= 2 * v20) {
    __int16 v21 = 0;
  }
  else {
    __int16 v21 = v10 - 2 * v20;
  }
  *(_WORD *)(v17 + 14) = v21;
  *(_DWORD *)(v17 + 8) = *a2;
  *(_DWORD *)(v17 + 4) = a2[1];
  BOOL v22 = sub_216268BC4(v19, (uint64_t)v45);
  *(unsigned char *)(v17 + 1) = !v22;
  v23 = (char *)(v17 + 1);
  if (!v22) {
    goto LABEL_54;
  }
  v24 = *(void **)(a1 + 56);
  unint64_t v44 = v12;
  if (!sub_21619C5BC(v24, &v44)) {
    goto LABEL_54;
  }
  uint64_t v25 = *(void *)(a1 + 56);
  unint64_t v26 = *(void *)(v25 + 8);
  v43 = a6;
  if (v26)
  {
    uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v10 = v12;
      if (v26 <= v12) {
        unint64_t v10 = v12 % v26;
      }
    }
    else
    {
      unint64_t v10 = (v26 - 1) & v12;
    }
    v28 = *(void ***)(*(void *)v25 + 8 * v10);
    if (v28)
    {
      for (i = *v28; i; i = (void *)*i)
      {
        unint64_t v30 = i[1];
        if (v30 == v12)
        {
          if (i[2] == v12) {
            goto LABEL_53;
          }
        }
        else
        {
          if (v27.u32[0] > 1uLL)
          {
            if (v30 >= v26) {
              v30 %= v26;
            }
          }
          else
          {
            v30 &= v26 - 1;
          }
          if (v30 != v10) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v12;
  i[2] = v12;
  i[3] = 0;
  float v31 = (float)(unint64_t)(*(void *)(v25 + 24) + 1);
  float v32 = *(float *)(v25 + 32);
  if (!v26 || (float)(v32 * (float)v26) < v31)
  {
    BOOL v33 = 1;
    if (v26 >= 3) {
      BOOL v33 = (v26 & (v26 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v26);
    unint64_t v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35) {
      size_t v36 = v35;
    }
    else {
      size_t v36 = v34;
    }
    sub_2161297B4(v25, v36);
    unint64_t v26 = *(void *)(v25 + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v26 <= v12) {
        unint64_t v10 = v12 % v26;
      }
      else {
        unint64_t v10 = v12;
      }
    }
    else
    {
      unint64_t v10 = (v26 - 1) & v12;
    }
  }
  uint64_t v37 = *(void *)v25;
  v38 = *(void **)(*(void *)v25 + 8 * v10);
  if (v38)
  {
    void *i = *v38;
LABEL_51:
    void *v38 = i;
    goto LABEL_52;
  }
  void *i = *(void *)(v25 + 16);
  *(void *)(v25 + 16) = i;
  *(void *)(v37 + 8 * v10) = v25 + 16;
  if (*i)
  {
    unint64_t v39 = *(void *)(*i + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v39 >= v26) {
        v39 %= v26;
      }
    }
    else
    {
      v39 &= v26 - 1;
    }
    v38 = (void *)(*(void *)v25 + 8 * v39);
    goto LABEL_51;
  }
LABEL_52:
  ++*(void *)(v25 + 24);
LABEL_53:
  uint64_t v40 = i[3];
  a6 = v43;
  if (v40 != v11)
  {
    char v41 = 1;
    goto LABEL_59;
  }
LABEL_54:
  if (!*v23
    || 2 * v11 != *(_DWORD *)(*(void *)(a1 + 24) + 32)
    || !sub_216184E04(*(void *)(a1 + 40), (uint64_t)v45))
  {
    goto LABEL_60;
  }
  char v41 = 2;
LABEL_59:
  char *v23 = v41;
LABEL_60:
  uint64_t v42 = *(void *)(a1 + 24);
  *(unsigned char *)uint64_t v17 = *(unsigned char *)(v42 + 82);
  if (*(void *)(v42 + 40) <= **(void **)(a1 + 16)) {
    *a6 = 1;
  }
}

void sub_2162F3FCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F3FE0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC910)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162F4020()
{
  return &unk_26C6BC910;
}

void sub_2162F4030()
{
}

__n128 sub_2162F4044(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_26C6B5698;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2162F40B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6B5698;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_2162F4100(uint64_t a1, uint64_t a2, unsigned __int16 **a3, unint64_t *a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, unsigned char *a8)
{
  uint64_t v8 = *(uint64_t **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *v8;
  if (*(void *)(v9 + 40) > (unint64_t)*v8)
  {
    uint64_t v14 = *a3;
    unint64_t v15 = *a4;
    uint64_t v16 = *a5;
    uint64_t v17 = *a6;
    uint64_t v18 = *a7;
    int v19 = *(_DWORD *)(v9 + 64);
    if (!*(unsigned char *)(v9 + 80))
    {
      if (v19 == 2)
      {
        uint64_t v21 = v17;
        BOOL v22 = *a5;
        uint64_t v23 = *a7;
        if (sub_21628E550(*(uint64_t **)(a1 + 32), (uint64_t)v14, v15 >> 1, **(void **)(a1 + 40), 0, **(void **)(a1 + 48)))return; {
        uint64_t v17 = v21;
        }
        uint64_t v16 = v22;
        uint64_t v18 = v23;
        uint64_t v8 = *(uint64_t **)(a1 + 8);
        uint64_t v9 = *(void *)(a1 + 16);
        uint64_t v10 = *v8;
        int v20 = *(unsigned __int8 *)(v9 + 80);
      }
      else
      {
        int v20 = 0;
      }
LABEL_10:
      uint64_t v24 = **(void **)(a1 + 24);
      unint64_t v25 = v10 + 1;
      *uint64_t v8 = v10 + 1;
      uint64_t v26 = v24 + 24 * v10;
      *(_DWORD *)(v26 + 8) = *(_DWORD *)a2;
      float v27 = *(float *)(a2 + 4);
      *(float *)(v26 + 4) = v27;
      *(unsigned char *)uint64_t v26 = *(unsigned char *)(v9 + 82);
      if (v20)
      {
        char v28 = *(unsigned char *)(v9 + 81);
        if (v28)
        {
          if (*(unsigned int *)(v9 + 32) >= v15) {
            size_t v29 = v15;
          }
          else {
            size_t v29 = *(unsigned int *)(v9 + 32);
          }
          char v28 = memcmp(v14, *(const void **)(v9 + 24), v29) != 0;
        }
        uint64_t v30 = v24 + 24 * v10;
        *(unsigned char *)(v30 + 1) = v28;
        *(_WORD *)(v30 + 12) = v15;
        goto LABEL_83;
      }
      int v31 = 0;
      uint64_t v83 = v24;
      if (v14 && v15 >= 2)
      {
        int v32 = *v14;
        if ((v32 - 12353) >= 0x56)
        {
          BOOL v34 = v32 == 12316 || v32 == 12540;
          int v33 = v34;
        }
        else
        {
          int v33 = 1;
        }
        int v31 = v33 ^ 1;
      }
      uint64_t v35 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v35 + 32))
      {
        unint64_t v82 = v15;
        uint64_t v36 = **(void **)(a1 + 48);
        uint64_t v37 = **(void ***)(a1 + 80);
        if (v17)
        {
          uint64_t v38 = *(void *)(*(void *)(v35 + 8) + 24 * v36) + 48 * *v16;
          unsigned __int8 v39 = *(unsigned char *)(v38 + 46) + 1;
          __int16 v40 = *(unsigned __int8 *)(v38 + 47) + 1;
        }
        else
        {
          __int16 v40 = 0;
          unsigned __int8 v39 = 0;
        }
        uint64_t v47 = *(void *)(*(void *)(v9 + 8) + 80);
        __int16 v48 = v39 | (unsigned __int16)(v40 << 8);
        if (v37 && v39 | (unsigned __int16)(v40 << 8) && v37[2])
        {
          v49 = (void *)*v37;
          BOOL v50 = !*(_WORD *)(*v37 + 26) || v39 == 0;
          if (!v50 && HIBYTE(*(unsigned __int16 *)(*v37 + 26)) == v40)
          {
            v74 = v37 + 1;
            if (v49 == v74)
            {
LABEL_94:
              *uint64_t v8 = v10;
              return;
            }
            while (*((unsigned __int8 *)v49 + 26) != v39)
            {
              v75 = (void *)v49[1];
              if (v75)
              {
                do
                {
                  v76 = v75;
                  v75 = (void *)*v75;
                }
                while (v75);
              }
              else
              {
                do
                {
                  v76 = (void *)v49[2];
                  BOOL v34 = *v76 == (void)v49;
                  v49 = v76;
                }
                while (!v34);
              }
              v49 = v76;
              if (v76 == v74) {
                goto LABEL_94;
              }
            }
          }
        }
        __int16 v80 = v48;
        uint64_t v81 = *(void *)(a1 + 72);
        int v77 = v31;
        v78 = a8;
        v52 = v16;
        uint64_t v53 = v17;
        __int16 v54 = v18;
        sub_216336F9C(v35, v47, v36, v16, v17, (unint64_t)&__p);
        *(_WORD *)(v83 + 24 * v10 + 12) = 2 * v54;
        uint64_t v55 = v91;
        uint64_t v56 = v90;
        v79 = (void **)__p;
        __int16 v57 = sub_216337150((void *)v35, v36, v52, v53);
        uint64_t v58 = *(void *)(v81 + 24);
        if ((v55 & 0x80u) == 0) {
          uint64_t v59 = v55;
        }
        else {
          uint64_t v59 = v56;
        }
        p_p = &__p;
        if ((v55 & 0x80u) != 0) {
          p_p = v79;
        }
        v84 = p_p;
        uint64_t v85 = v59;
        LOWORD(v88[0]) = v80;
        LOWORD(v87) = v57;
        if (!v58) {
          sub_21610B7AC();
        }
        *(void *)(v83 + 24 * v10 + 16) = (*(uint64_t (**)(uint64_t, void ***, uint64_t *, unint64_t *))(*(void *)v58 + 48))(v58, &v84, v88, &v87);
        uint64_t v61 = v91;
        v62 = &__p;
        if ((v91 & 0x80u) != 0)
        {
          v62 = __p;
          uint64_t v61 = v90;
        }
        v88[0] = (uint64_t)v62;
        v88[1] = v61;
        unint64_t v87 = 0;
        sub_216183E18(v88, &v87, 0, 0, &v84);
        int v63 = (char)v86;
        v64 = v84;
        uint64_t v65 = v85;
        if ((v86 & 0x80u) == 0) {
          uint64_t v65 = v86;
        }
        uint64_t v66 = v65 - v87;
        if (v84) {
          BOOL v67 = 0;
        }
        else {
          BOOL v67 = (v86 & 0x80u) != 0;
        }
        uint64_t v68 = 2 * v66;
        if (v67) {
          unint64_t v69 = 0;
        }
        else {
          unint64_t v69 = v68;
        }
        a8 = v78;
        if (v82 <= v69)
        {
          __int16 v70 = 0;
          BOOL v71 = *(float *)(v26 + 4) != 0.0 && v82 == v69;
        }
        else
        {
          __int16 v70 = v82 - v69;
          BOOL v71 = 1;
        }
        uint64_t v73 = v83 + 24 * v10;
        *(unsigned char *)(v73 + 1) = v71;
        *(_WORD *)(v73 + 14) = v70;
        if (v63 < 0) {
          operator delete(v64);
        }
        if ((char)v91 < 0) {
          operator delete(__p);
        }
        if (!v77) {
          goto LABEL_82;
        }
      }
      else
      {
        uint64_t v41 = 56;
        if (v31) {
          uint64_t v41 = 48;
        }
        uint64_t v42 = *(void *)(*(void *)(a1 + v41 + 8) + 8);
        __int16 v43 = v15 - 2 * v42;
        BOOL v44 = v15 > 2 * v42;
        if (!v44) {
          __int16 v43 = 0;
        }
        if (v27 != 0.0) {
          BOOL v44 = 1;
        }
        uint64_t v45 = v83 + 24 * v10;
        *(unsigned char *)(v45 + 1) = v44;
        LOWORD(v46) = 2 * v18;
        if (2 * v18 >= (unint64_t)*(unsigned int *)(v9 + 32)) {
          int v46 = *(_DWORD *)(v9 + 32);
        }
        *(_WORD *)(v45 + 12) = v46;
        *(_WORD *)(v45 + 14) = v43;
        if (!v31) {
          goto LABEL_82;
        }
      }
      *(unsigned char *)uint64_t v26 = 1;
LABEL_82:
      uint64_t v9 = *(void *)(a1 + 16);
      unint64_t v25 = **(void **)(a1 + 8);
LABEL_83:
      if (*(void *)(v9 + 40) <= v25) {
        *a8 = 1;
      }
      return;
    }
    if (v19 != 2 || v15 != *(_DWORD *)(v9 + 32))
    {
      int v20 = 1;
      goto LABEL_10;
    }
  }
}

void sub_2162F45EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162F460C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B50E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162F464C()
{
  return &unk_26C6B50E0;
}

void *sub_2162F4658(void *a1, uint64_t a2, unint64_t a3)
{
  v6[4] = *MEMORY[0x263EF8340];
  *a1 = &unk_26C6F4DF0;
  sub_21628D460(0, 0, a2, a3);
  v6[0] = &unk_26C6F62F0;
  v6[3] = v6;
  a1[1] = v4;
  sub_21620FBF8((uint64_t)(a1 + 2), (uint64_t)v6);
  sub_21620FC78(v6);
  return a1;
}

void sub_2162F4720()
{
}

void *sub_2162F4734()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C6F62F0;
  return result;
}

void sub_2162F476C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6F62F0;
}

void sub_2162F4794(uint64_t a1, void ***a2)
{
}

uint64_t sub_2162F479C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6350)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162F47DC()
{
  return &unk_26C6F6350;
}

double sub_2162F47E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = sub_2162A7544(a1, a2 + 1);
  uint64_t v6 = *a2;
  *(void *)uint64_t v5 = *a2;
  *(void *)(v5 + *(void *)(v6 - 32)) = a2[5];
  *(_DWORD *)(v5 + 20) = *(_DWORD *)(a3 + 20);
  *(unsigned char *)(v5 + 24) = *(unsigned char *)(a3 + 24);
  double result = *(double *)(a3 + 32);
  *(double *)(v5 + 32) = result;
  return result;
}

uint64_t sub_2162F48B0(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  return v2;
}

uint64_t sub_2162F4910(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result)
  {
    unsigned __int16 v2 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v2();
  }
  return result;
}

uint64_t sub_2162F4984(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 312))();
}

void sub_2162F49B0(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      int v6 = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, i) + 8);
      uint64_t v8 = a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = *a2;
        uint64_t v11 = (v8 - *a2) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v13 = v7 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          unint64_t v15 = (char *)sub_2161129B4((uint64_t)(a2 + 2), v14);
          uint64_t v10 = *a2;
          uint64_t v8 = a2[1];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v16 = &v15[4 * v11];
        *(_DWORD *)uint64_t v16 = v6;
        uint64_t v9 = v16 + 4;
        while (v8 != v10)
        {
          int v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v8 = v6;
        uint64_t v9 = v8 + 4;
      }
      a2[1] = v9;
    }
  }
}

void sub_2162F4B20(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162F4B44(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result)
  {
    unsigned __int16 v2 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v2();
  }
  return result;
}

uint64_t sub_2162F4BB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t sub_2162F4BC4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t sub_2162F4BCC(uint64_t a1)
{
  CFStringRef v1 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);

  return sub_2161E539C(v1);
}

uint64_t sub_2162F4C14(uint64_t a1)
{
  CFStringRef v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 56);

  return v1();
}

void sub_2162F4C8C(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6)
  {
    uint64_t v7 = v6;
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, i);
      if (a2)
      {
        if (a2 == 1) {
          (*(void (**)(char **__return_ptr))(*(void *)v9 + 40))(&v11);
        }
        else {
          (*(void (**)(char **__return_ptr))(*(void *)v9 + 48))(&v11);
        }
      }
      else
      {
        (*(void (**)(char **__return_ptr))(*(void *)v9 + 56))(&v11);
      }
      uint64_t v10 = v11;
      sub_216263328((uint64_t)a3, a3[1], v11, v12, (v12 - v11) >> 1);
      if (v10) {
        operator delete(v10);
      }
    }
  }
}

void sub_2162F4DF0(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162F4E2C(uint64_t a1, uint64_t a2, void *a3, int *a4, uint64_t *a5)
{
  uint64_t v6 = a3;
  *(void *)a1 = &unk_26C6BE138;
  *(_OWORD *)(a1 + 8) = 0u;
  v151 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v152 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 152) = 0u;
  v150 = (char **)(a1 + 152);
  *(_OWORD *)(a1 + 200) = 0u;
  v143 = (const void **)(a1 + 200);
  *(void *)(a1 + 216) = 0;
  v147 = (const void **)(a1 + 216);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 224) = a4[6];
  int v9 = *a4;
  if (*a4 > 4)
  {
    if (v9 != 5)
    {
      if (v9 == 13)
      {
        int v10 = 2;
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    int v10 = 1;
  }
  else
  {
    int v10 = 0;
    if (v9 != 2 && v9 != 4) {
LABEL_8:
    }
      int v10 = -1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 232) = v10;
  *(_DWORD *)(a1 + 236) = 0;
  *(void *)(a1 + 240) = a4;
  if (a2)
  {
    uint64_t v11 = *(void *)(a2 + 16);
    BOOL v12 = v11 != 0;
    if (!a3 && v11)
    {
      uint64_t v6 = *(void **)v11;
      BOOL v12 = 1;
    }
  }
  else
  {
    BOOL v12 = 0;
    uint64_t v11 = 0;
  }
  v148 = (void **)(a1 + 128);
  v149 = (void **)(a1 + 32);
  uint64_t v142 = a1 + 176;
  int v13 = *((unsigned __int8 *)a5 + 25);
  uint64_t v14 = *a5;
  v144 = (const void **)(a1 + 208);
  if (!v6)
  {
    uint64_t v20 = a5[1];
    if (v14 != v20
      && *((unsigned char *)a5 + 24)
      && (*(uint64_t (**)(void))(**(void **)(v20 - 8) + 48))(*(void *)(v20 - 8))
      && v12)
    {
      CFStringRef v22 = 0;
      uint64_t v23 = a5[1];
      if (*a5 != v23 && *((unsigned char *)a5 + 24)) {
        CFStringRef v22 = (const __CFString *)(*(uint64_t (**)(void, void))(**(void **)(v23 - 8) + 48))(*(void *)(v23 - 8), 0);
      }
      v156.length = *(void *)(v11 + 16);
      v156.location = 0;
      CFStringRef v24 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], v22, v156);
      sub_2161868BC((const void **)(a1 + 208), v24);
    }
    unint64_t v25 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    if (v12) {
      CFTypeRef v26 = CFRetain(*(CFTypeRef *)(v11 + 8));
    }
    else {
      CFTypeRef v26 = 0;
    }
    sub_2161868BC(v143, v26);
    CFTypeRef v117 = CFRetain(*v143);
    sub_2161868BC(v147, v117);
    *(unsigned char *)(a1 + 239) = (*(_DWORD *)(a2 + 8) - 4) < 3;
    if (!*(void *)(a1 + 208))
    {
      CFTypeRef v118 = CFRetain(*v143);
      sub_2161868BC((const void **)(a1 + 208), v118);
    }
    uint64_t v120 = *v25;
    unint64_t v119 = v25[1];
    LODWORD(v153) = 0;
    sub_2162F5A90(v150, v119, &v153);
    if (v119)
    {
      uint64_t v121 = 0;
      unint64_t v122 = 0;
      v123 = (void *)(a1 + 72);
      v124 = *(char **)(a1 + 64);
      do
      {
        __int16 v125 = *(_WORD *)(v120 + 2 * v121) - 48;
        if ((unint64_t)v124 >= *v123)
        {
          v127 = (char *)*v152;
          uint64_t v128 = v124 - (unsigned char *)*v152;
          if (v128 <= -3) {
            sub_21610CB04();
          }
          uint64_t v129 = v128 >> 1;
          unint64_t v130 = *v123 - (void)v127;
          if (v130 <= (v128 >> 1) + 1) {
            uint64_t v131 = v129 + 1;
          }
          else {
            uint64_t v131 = *v123 - (void)v127;
          }
          if (v130 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v132 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v132 = v131;
          }
          if (v132)
          {
            v133 = (char *)sub_21610FD44(a1 + 72, v132);
            v127 = *(char **)(a1 + 56);
            v124 = *(char **)(a1 + 64);
          }
          else
          {
            v133 = 0;
          }
          v134 = &v133[2 * v129];
          *(_WORD *)v134 = v125;
          v126 = v134 + 2;
          while (v124 != v127)
          {
            __int16 v135 = *((_WORD *)v124 - 1);
            v124 -= 2;
            *((_WORD *)v134 - 1) = v135;
            v134 -= 2;
          }
          *(void *)(a1 + 56) = v134;
          *(void *)(a1 + 64) = v126;
          *(void *)(a1 + 72) = &v133[2 * v132];
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          *(_WORD *)v124 = v125;
          v126 = v124 + 2;
        }
        *(void *)(a1 + 64) = v126;
        unint64_t v122 = v122 + *(unsigned __int16 *)(v120 + 2 * v121++) - 48;
        v124 = v126;
      }
      while (v121 != v119);
    }
    else
    {
      unint64_t v122 = 0;
    }
    if (v13) {
      goto LABEL_195;
    }
    uint64_t v136 = *a5;
    uint64_t v137 = a5[1];
    if (*a5 == v137)
    {
      unint64_t v138 = 0;
    }
    else
    {
      unint64_t v138 = 0;
      do
      {
        v138 += (*(uint64_t (**)(void))(**(void **)v136 + 32))();
        v136 += 8;
      }
      while (v136 != v137);
    }
    if (v122 < v138) {
LABEL_195:
    }
      *(_DWORD *)(a1 + 228) = 1;
    else {
      *(_DWORD *)(a1 + 228) = 0;
    }
    goto LABEL_196;
  }
  uint64_t v15 = a5[1];
  BOOL v17 = v14 != v15 && *((unsigned char *)a5 + 24) == 0;
  uint64_t v18 = v6[5];
  *(unsigned char *)(a1 + 236) = (v18 & 0x20) != 0;
  *(unsigned char *)(a1 + 237) = (v18 & 4) != 0;
  *(unsigned char *)(a1 + 238) = (v18 & 0x10) != 0;
  BOOL v141 = v17;
  if (v13) {
    goto LABEL_23;
  }
  if (v14 == v15)
  {
LABEL_41:
    unsigned int v19 = (v18 >> 6) & 2;
    goto LABEL_42;
  }
  unint64_t v27 = 0;
  do
  {
    v27 += (*(uint64_t (**)(void))(**(void **)v14 + 32))();
    v14 += 8;
  }
  while (v14 != v15);
  if (v6[6] >= v27)
  {
    uint64_t v18 = v6[5];
    goto LABEL_41;
  }
LABEL_23:
  unsigned int v19 = 1;
LABEL_42:
  *(_DWORD *)(a1 + 228) = v19;
  v145 = v6;
  uint64_t v28 = v6[1];
  if (v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = v145[2];
    uint64_t v31 = v145[3];
    uint64_t v32 = v145[4];
    do
    {
      BOOL v34 = *(char **)(a1 + 16);
      unint64_t v33 = *(void *)(a1 + 24);
      if ((unint64_t)v34 >= v33)
      {
        uint64_t v36 = (char *)*v151;
        uint64_t v37 = v34 - (unsigned char *)*v151;
        if (v37 <= -3) {
          goto LABEL_210;
        }
        uint64_t v38 = v37 >> 1;
        unint64_t v39 = v33 - (void)v36;
        if (v39 <= (v37 >> 1) + 1) {
          unint64_t v40 = v38 + 1;
        }
        else {
          unint64_t v40 = v39;
        }
        if (v39 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v41 = v40;
        }
        if (v41)
        {
          uint64_t v42 = (char *)sub_21610FD44(a1 + 24, v41);
          uint64_t v36 = *(char **)(a1 + 8);
          BOOL v34 = *(char **)(a1 + 16);
        }
        else
        {
          uint64_t v42 = 0;
        }
        __int16 v43 = &v42[2 * v38];
        *(_WORD *)__int16 v43 = *(_WORD *)(v30 + 2 * v29);
        uint64_t v35 = v43 + 2;
        while (v34 != v36)
        {
          __int16 v44 = *((_WORD *)v34 - 1);
          v34 -= 2;
          *((_WORD *)v43 - 1) = v44;
          v43 -= 2;
        }
        *(void *)(a1 + 8) = v43;
        *(void *)(a1 + 16) = v35;
        *(void *)(a1 + 24) = &v42[2 * v41];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *(_WORD *)BOOL v34 = *(_WORD *)(v30 + 2 * v29);
        uint64_t v35 = v34 + 2;
      }
      *(void *)(a1 + 16) = v35;
      if (v31)
      {
        int v46 = *(char **)(a1 + 40);
        unint64_t v45 = *(void *)(a1 + 48);
        if ((unint64_t)v46 >= v45)
        {
          __int16 v48 = (char *)*v149;
          uint64_t v49 = v46 - (unsigned char *)*v149;
          if (v49 < -2) {
LABEL_210:
          }
            sub_21610CB04();
          uint64_t v50 = v49 >> 1;
          unint64_t v51 = v45 - (void)v48;
          if (v51 <= (v49 >> 1) + 1) {
            unint64_t v52 = v50 + 1;
          }
          else {
            unint64_t v52 = v51;
          }
          if (v51 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v53 = v52;
          }
          if (v53)
          {
            __int16 v54 = (char *)sub_21610FD44(a1 + 48, v53);
            __int16 v48 = *(char **)(a1 + 32);
            int v46 = *(char **)(a1 + 40);
          }
          else
          {
            __int16 v54 = 0;
          }
          uint64_t v55 = &v54[2 * v50];
          *(_WORD *)uint64_t v55 = *(_WORD *)(v31 + 2 * v29);
          uint64_t v47 = v55 + 2;
          while (v46 != v48)
          {
            __int16 v56 = *((_WORD *)v46 - 1);
            v46 -= 2;
            *((_WORD *)v55 - 1) = v56;
            v55 -= 2;
          }
          *(void *)(a1 + 32) = v55;
          *(void *)(a1 + 40) = v47;
          *(void *)(a1 + 48) = &v54[2 * v53];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *(_WORD *)int v46 = *(_WORD *)(v31 + 2 * v29);
          uint64_t v47 = v46 + 2;
        }
        *(void *)(a1 + 40) = v47;
      }
      if (*(unsigned char *)(v32 + 4 * v29))
      {
        uint64_t v57 = v32 + 4 * v29;
        __int16 v59 = *(unsigned __int8 *)(v57 + 2);
        uint64_t v58 = (unsigned __int8 *)(v57 + 2);
        __int16 v60 = v59 + *(unsigned __int8 *)(v32 + 4 * v29);
        v62 = *(char **)(a1 + 64);
        unint64_t v61 = *(void *)(a1 + 72);
        if ((unint64_t)v62 >= v61)
        {
          v64 = (char *)*v152;
          uint64_t v65 = v62 - (unsigned char *)*v152;
          if (v65 <= -3) {
            sub_21610CB04();
          }
          uint64_t v66 = v65 >> 1;
          unint64_t v67 = v61 - (void)v64;
          if (v67 <= (v65 >> 1) + 1) {
            unint64_t v68 = v66 + 1;
          }
          else {
            unint64_t v68 = v67;
          }
          if (v67 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v69 = v68;
          }
          if (v69)
          {
            __int16 v70 = (char *)sub_21610FD44(a1 + 72, v69);
            v64 = *(char **)(a1 + 56);
            v62 = *(char **)(a1 + 64);
          }
          else
          {
            __int16 v70 = 0;
          }
          BOOL v71 = &v70[2 * v66];
          *(_WORD *)BOOL v71 = v60;
          int v63 = v71 + 2;
          while (v62 != v64)
          {
            __int16 v72 = *((_WORD *)v62 - 1);
            v62 -= 2;
            *((_WORD *)v71 - 1) = v72;
            v71 -= 2;
          }
          *(void *)(a1 + 56) = v71;
          *(void *)(a1 + 64) = v63;
          *(void *)(a1 + 72) = &v70[2 * v69];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          *(_WORD *)v62 = v60;
          int v63 = v62 + 2;
        }
        *(void *)(a1 + 64) = v63;
        __int16 v73 = *v58;
        v75 = *(char **)(a1 + 136);
        unint64_t v74 = *(void *)(a1 + 144);
        if ((unint64_t)v75 >= v74)
        {
          int v77 = (char *)*v148;
          uint64_t v78 = v75 - (unsigned char *)*v148;
          if (v78 <= -3) {
            sub_21610CB04();
          }
          uint64_t v79 = v78 >> 1;
          unint64_t v80 = v74 - (void)v77;
          if (v80 <= (v78 >> 1) + 1) {
            unint64_t v81 = v79 + 1;
          }
          else {
            unint64_t v81 = v80;
          }
          if (v80 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v82 = v81;
          }
          if (v82)
          {
            uint64_t v83 = (char *)sub_21610FD44(a1 + 144, v82);
            int v77 = *(char **)(a1 + 128);
            v75 = *(char **)(a1 + 136);
          }
          else
          {
            uint64_t v83 = 0;
          }
          v84 = &v83[2 * v79];
          *(_WORD *)v84 = v73;
          v76 = v84 + 2;
          while (v75 != v77)
          {
            __int16 v85 = *((_WORD *)v75 - 1);
            v75 -= 2;
            *((_WORD *)v84 - 1) = v85;
            v84 -= 2;
          }
          *(void *)(a1 + 128) = v84;
          *(void *)(a1 + 136) = v76;
          *(void *)(a1 + 144) = &v83[2 * v82];
          if (v77) {
            operator delete(v77);
          }
        }
        else
        {
          *(_WORD *)v75 = v73;
          v76 = v75 + 2;
        }
        *(void *)(a1 + 136) = v76;
        unsigned int v86 = *(unsigned __int8 *)(v32 + 4 * v29 + 3);
        if (v86) {
          int v87 = 2;
        }
        else {
          int v87 = (v86 >> 1) & 1;
        }
        v89 = *(char **)(a1 + 160);
        unint64_t v88 = *(void *)(a1 + 168);
        if ((unint64_t)v89 >= v88)
        {
          unsigned __int8 v91 = *v150;
          uint64_t v92 = (v89 - *v150) >> 2;
          unint64_t v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v94 = v88 - (void)v91;
          if (v94 >> 1 > v93) {
            unint64_t v93 = v94 >> 1;
          }
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v95 = v93;
          }
          if (v95)
          {
            v96 = (char *)sub_2161129B4(a1 + 168, v95);
            unsigned __int8 v91 = *(char **)(a1 + 152);
            v89 = *(char **)(a1 + 160);
          }
          else
          {
            v96 = 0;
          }
          v97 = (int *)&v96[4 * v92];
          int *v97 = v87;
          uint64_t v90 = v97 + 1;
          while (v89 != v91)
          {
            int v98 = *((_DWORD *)v89 - 1);
            v89 -= 4;
            *--v97 = v98;
          }
          *(void *)(a1 + 152) = v97;
          *(void *)(a1 + 160) = v90;
          *(void *)(a1 + 168) = &v96[4 * v95];
          if (v91) {
            operator delete(v91);
          }
        }
        else
        {
          *(_DWORD *)v89 = v87;
          uint64_t v90 = v89 + 4;
        }
        *(void *)(a1 + 160) = v90;
      }
      ++v29;
    }
    while (v29 != v28);
  }
  uint64_t v99 = *a5;
  uint64_t v100 = a5[1];
  if (*a5 == v100)
  {
LABEL_139:
    if (v141)
    {
      v101 = sub_216261140(a5, (uint64_t)v145, 0);
      sub_2161868BC(v144, v101);
    }
  }
  else
  {
    while ((*(unsigned int (**)(void))(**(void **)v99 + 56))() != 1)
    {
      v99 += 8;
      if (v99 == v100) {
        goto LABEL_139;
      }
    }
    v102 = operator new(8uLL);
    v153 = v102;
    void *v102 = v145;
    v154 = v102 + 1;
    v155 = v102 + 1;
    CFMutableStringRef v103 = sub_216260E10(a5, (uint64_t *)&v153, v142);
    sub_2161868BC(v144, v103);
    if (!*v144)
    {
      v104 = sub_216261140(a5, (uint64_t)v145, 0);
      sub_2161868BC(v144, v104);
    }
    if (v153)
    {
      v154 = v153;
      operator delete(v153);
    }
  }
  if (*v144)
  {
    Copy = CFRetain(*v144);
    v106 = v147;
LABEL_147:
    sub_2161868BC(v106, Copy);
    goto LABEL_196;
  }
  uint64_t v107 = a5[1];
  if (*a5 != v107
    && *((unsigned char *)a5 + 24)
    && (*(uint64_t (**)(void))(**(void **)(v107 - 8) + 48))(*(void *)(v107 - 8)))
  {
    CFStringRef v108 = 0;
    unint64_t v109 = v145[6];
    uint64_t v110 = a5[1];
    if (*a5 != v110 && *((unsigned char *)a5 + 24)) {
      CFStringRef v108 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v110 - 8) + 48))(*(void *)(v110 - 8));
    }
    unint64_t Length = CFStringGetLength(v108);
    CFAllocatorRef v112 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v113 = a5[1];
    BOOL v115 = *a5 == v113 || *((unsigned char *)a5 + 24) == 0;
    if (v109 >= Length)
    {
      if (v115) {
        CFStringRef v140 = 0;
      }
      else {
        CFStringRef v140 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v113 - 8) + 48))(*(void *)(v113 - 8));
      }
      Copy = CFStringCreateCopy(v112, v140);
    }
    else
    {
      if (v115) {
        CFStringRef v116 = 0;
      }
      else {
        CFStringRef v116 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v113 - 8) + 48))(*(void *)(v113 - 8));
      }
      v157.length = v145[6];
      v157.location = 0;
      Copy = CFStringCreateWithSubstring(v112, v116, v157);
    }
    v106 = v144;
    goto LABEL_147;
  }
LABEL_196:
  if (*(_WORD *)(*(void *)(a1 + 240) + 98)) {
    sub_2162F5BC4(a1);
  }
  return a1;
}

void sub_2162F596C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, const void **a12, const void **a13, uint64_t a14, uint64_t a15, const void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,void **a23,void **a24,void **a25)
{
  sub_2161868BC(a16, 0);
  sub_2161868BC(a13, 0);
  sub_2161868BC(a12, 0);
  uint64_t v28 = *a11;
  if (*a11)
  {
    v25[23] = v28;
    operator delete(v28);
  }
  uint64_t v29 = *a24;
  if (*a24)
  {
    v25[20] = v29;
    operator delete(v29);
  }
  uint64_t v30 = *a22;
  if (*a22)
  {
    v25[17] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)v25[13];
  if (v31)
  {
    v25[14] = v31;
    operator delete(v31);
  }
  uint64_t v32 = (void *)v25[10];
  if (v32)
  {
    v25[11] = v32;
    operator delete(v32);
  }
  unint64_t v33 = **(void ***)(v26 - 120);
  if (v33)
  {
    v25[8] = v33;
    operator delete(v33);
  }
  BOOL v34 = *a23;
  if (*a23)
  {
    v25[5] = v34;
    operator delete(v34);
  }
  uint64_t v35 = *a25;
  if (*a25)
  {
    v25[2] = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void sub_2162F5A90(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)(a1 + 2);
    int v10 = a1[2];
    if (a2 - v7 <= (v10 - v5) >> 2)
    {
      CFStringRef v24 = &v5[4 * (a2 - v7)];
      uint64_t v25 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)uint64_t v5 = *a3;
        v5 += 4;
        v25 -= 4;
      }
      while (v25);
      a1[1] = v24;
    }
    else
    {
      if (a2 >> 62) {
        sub_21610CB04();
      }
      unint64_t v11 = v10 - v6;
      unint64_t v12 = (v10 - v6) >> 1;
      if (v12 <= a2) {
        unint64_t v12 = a2;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v14 = (char *)sub_2161129B4(v9, v13);
      uint64_t v16 = &v14[4 * v7];
      BOOL v17 = &v14[4 * a2];
      uint64_t v18 = 4 * a2 - 4 * v7;
      unsigned int v19 = v16;
      do
      {
        *(_DWORD *)unsigned int v19 = *a3;
        v19 += 4;
        v18 -= 4;
      }
      while (v18);
      uint64_t v20 = &v14[4 * v15];
      uint64_t v21 = *a1;
      for (uint64_t i = a1[1]; i != v21; i -= 4)
      {
        int v23 = *((_DWORD *)i - 1);
        *((_DWORD *)v16 - 1) = v23;
        v16 -= 4;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v20;
      if (v21)
      {
        operator delete(v21);
      }
    }
  }
}

void sub_2162F5BC4(uint64_t a1)
{
  UniChar chars = *(_WORD *)(*(void *)(a1 + 240) + 98);
  if (chars)
  {
    CFStringRef v2 = CFStringCreateWithCharacters(0, &chars, 1);
    if (v2)
    {
      CFStringRef v3 = v2;
      uint64_t v4 = *(void *)(a1 + 208);
      uint64_t v5 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
      if (v4)
      {
        CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@%@", v2, v4, v2);
        sub_2161868BC((const void **)(a1 + 208), v6);
      }
      uint64_t v7 = *(void *)(a1 + 216);
      if (v7)
      {
        CFStringRef v8 = CFStringCreateWithFormat(*v5, 0, @"%@%@", v3, v7);
        sub_2161868BC((const void **)(a1 + 216), v8);
      }
      uint64_t v11 = *(void *)(a1 + 200);
      int v10 = (const void **)(a1 + 200);
      uint64_t v9 = v11;
      if (v11)
      {
        CFStringRef v12 = CFStringCreateWithFormat(*v5, 0, @"%@%@", v3, v9);
        sub_2161868BC(v10, v12);
      }
      CFRelease(v3);
    }
  }
}

void sub_2162F5CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F5CD8(uint64_t a1, const __CFString *cf, const void *a3, int *a4, uint64_t *a5, char a6)
{
  *(void *)a1 = &unk_26C6BE138;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v79 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 152) = 0u;
  CFStringRef v12 = (char **)(a1 + 152);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  CFTypeRef v13 = CFRetain(cf);
  *(void *)(a1 + 208) = 0;
  uint64_t v14 = (CFTypeRef *)(a1 + 208);
  *(void *)(a1 + 200) = v13;
  if (a3) {
    CFTypeRef v15 = CFRetain(a3);
  }
  else {
    CFTypeRef v15 = 0;
  }
  *(void *)(a1 + 216) = v15;
  *(void *)(a1 + 224) = a4[6];
  int v16 = *a4;
  if (*a4 > 4)
  {
    if (v16 == 5)
    {
      int v17 = 1;
      goto LABEL_14;
    }
    if (v16 != 13)
    {
LABEL_11:
      int v17 = -1;
      goto LABEL_14;
    }
    int v17 = 2;
  }
  else
  {
    if (v16 == 2)
    {
      int v17 = 0;
      goto LABEL_14;
    }
    int v17 = 0;
    if (v16 != 4) {
      goto LABEL_11;
    }
  }
LABEL_14:
  unint64_t v80 = (const void **)(a1 + 216);
  *(_DWORD *)(a1 + 232) = v17;
  *(_WORD *)(a1 + 236) = 0;
  *(unsigned char *)(a1 + 238) = 0;
  *(unsigned char *)(a1 + 239) = a6;
  *(void *)(a1 + 240) = a4;
  uint64_t v18 = a5[1];
  if (*a5 != v18
    && *((unsigned char *)a5 + 24)
    && (*(uint64_t (**)(void))(**(void **)(v18 - 8) + 48))(*(void *)(v18 - 8)))
  {
    CFIndex Length = CFStringGetLength(cf);
    CFStringRef v20 = 0;
    uint64_t v21 = a5[1];
    if (*a5 != v21 && *((unsigned char *)a5 + 24)) {
      CFStringRef v20 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v21 - 8) + 48))(*(void *)(v21 - 8));
    }
    CFIndex v22 = CFStringGetLength(v20);
    CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v24 = a5[1];
    BOOL v26 = *a5 == v24 || *((unsigned char *)a5 + 24) == 0;
    if (Length >= v22)
    {
      if (v26) {
        CFStringRef v28 = 0;
      }
      else {
        CFStringRef v28 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v24 - 8) + 48))(*(void *)(v24 - 8));
      }
      CFStringRef Copy = CFStringCreateCopy(v23, v28);
    }
    else
    {
      if (v26) {
        CFStringRef v27 = 0;
      }
      else {
        CFStringRef v27 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v24 - 8) + 48))(*(void *)(v24 - 8));
      }
      v84.length = CFStringGetLength(cf);
      v84.location = 0;
      CFStringRef Copy = CFStringCreateWithSubstring(v23, v27, v84);
    }
    sub_2161868BC((const void **)(a1 + 208), Copy);
  }
  CFIndex v30 = CFStringGetLength(cf);
  int v31 = *((unsigned __int8 *)a5 + 25);
  uint64_t v33 = *a5;
  uint64_t v32 = a5[1];
  if (*a5 == v32)
  {
    CFIndex v34 = 0;
    if (*((unsigned char *)a5 + 25))
    {
LABEL_47:
      int v36 = 1;
LABEL_48:
      *(_DWORD *)(a1 + 228) = v36;
      goto LABEL_49;
    }
  }
  else
  {
    CFIndex v34 = 0;
    do
    {
      v34 += (*(uint64_t (**)(void))(**(void **)v33 + 32))();
      v33 += 8;
    }
    while (v33 != v32);
    if (v31) {
      goto LABEL_47;
    }
  }
  if (*a5 == a5[1] || *((unsigned char *)a5 + 24) != 0)
  {
    if (v30 < v34) {
      goto LABEL_47;
    }
    if (v30 > v34)
    {
      int v36 = 2;
      goto LABEL_48;
    }
  }
LABEL_49:
  if (!*v80)
  {
    if ((*(unsigned char *)(a1 + 225) & 0x40) != 0 || !*v14) {
      CFTypeRef v37 = CFRetain(cf);
    }
    else {
      CFTypeRef v37 = CFRetain(*v14);
    }
    sub_2161868BC(v80, v37);
  }
  uint64_t v38 = *a5;
  uint64_t v39 = a5[1];
  if (*a5 == v39 || *((unsigned char *)a5 + 24))
  {
    if (*v14)
    {
      __int16 v44 = CFStringGetLength((CFStringRef)*v14);
      unint64_t v45 = *(void *)(a1 + 72);
      int v46 = *(char **)(a1 + 64);
      if ((unint64_t)v46 >= v45)
      {
        uint64_t v47 = (char *)*v79;
        uint64_t v48 = v46 - (unsigned char *)*v79;
        if (v48 <= -3) {
          sub_21610CB04();
        }
        uint64_t v49 = v48 >> 1;
        unint64_t v50 = v45 - (void)v47;
        if (v50 <= (v48 >> 1) + 1) {
          unint64_t v51 = v49 + 1;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v50 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v52 = v51;
        }
        if (v52)
        {
          uint64_t v53 = (char *)sub_21610FD44(a1 + 72, v52);
          uint64_t v47 = *(char **)(a1 + 56);
          int v46 = *(char **)(a1 + 64);
        }
        else
        {
          uint64_t v53 = 0;
        }
        unint64_t v74 = &v53[2 * v49];
        v75 = &v53[2 * v52];
        *(_WORD *)unint64_t v74 = v44;
        v62 = v74 + 2;
        while (v46 != v47)
        {
          __int16 v76 = *((_WORD *)v46 - 1);
          v46 -= 2;
          *((_WORD *)v74 - 1) = v76;
          v74 -= 2;
        }
LABEL_114:
        *(void *)(a1 + 56) = v74;
        *(void *)(a1 + 64) = v62;
        *(void *)(a1 + 72) = v75;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_116;
      }
    }
    else
    {
      __int16 v44 = CFStringGetLength((CFStringRef)*v80);
      unint64_t v61 = *(void *)(a1 + 72);
      int v46 = *(char **)(a1 + 64);
      if ((unint64_t)v46 >= v61)
      {
        uint64_t v47 = (char *)*v79;
        uint64_t v63 = v46 - (unsigned char *)*v79;
        if (v63 <= -3) {
          sub_21610CB04();
        }
        uint64_t v64 = v63 >> 1;
        unint64_t v65 = v61 - (void)v47;
        if (v65 <= (v63 >> 1) + 1) {
          unint64_t v66 = v64 + 1;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v65 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v67 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v67 = v66;
        }
        if (v67)
        {
          unint64_t v68 = (char *)sub_21610FD44(a1 + 72, v67);
          uint64_t v47 = *(char **)(a1 + 56);
          int v46 = *(char **)(a1 + 64);
        }
        else
        {
          unint64_t v68 = 0;
        }
        unint64_t v74 = &v68[2 * v64];
        v75 = &v68[2 * v67];
        *(_WORD *)unint64_t v74 = v44;
        v62 = v74 + 2;
        while (v46 != v47)
        {
          __int16 v77 = *((_WORD *)v46 - 1);
          v46 -= 2;
          *((_WORD *)v74 - 1) = v77;
          v74 -= 2;
        }
        goto LABEL_114;
      }
    }
    *(_WORD *)int v46 = v44;
    v62 = v46 + 2;
LABEL_116:
    *(void *)(a1 + 64) = v62;
    int v81 = 0;
    sub_2162F5A90(v12, 1uLL, &v81);
    goto LABEL_117;
  }
  __int16 v40 = 0;
  do
  {
    v40 += (*(uint64_t (**)(void))(**(void **)v38 + 32))();
    v38 += 8;
  }
  while (v38 != v39);
  unint64_t v41 = *(void *)(a1 + 72);
  uint64_t v42 = *(char **)(a1 + 64);
  if ((unint64_t)v42 >= v41)
  {
    __int16 v54 = (char *)*v79;
    uint64_t v55 = v42 - (unsigned char *)*v79;
    if (v55 <= -3) {
      sub_21610CB04();
    }
    uint64_t v56 = v55 >> 1;
    unint64_t v57 = v41 - (void)v54;
    if (v57 <= (v55 >> 1) + 1) {
      unint64_t v58 = v56 + 1;
    }
    else {
      unint64_t v58 = v57;
    }
    if (v57 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v59 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v59 = v58;
    }
    if (v59)
    {
      __int16 v60 = (char *)sub_21610FD44(a1 + 72, v59);
      __int16 v54 = *(char **)(a1 + 56);
      uint64_t v42 = *(char **)(a1 + 64);
    }
    else
    {
      __int16 v60 = 0;
    }
    uint64_t v69 = &v60[2 * v56];
    __int16 v70 = &v60[2 * v59];
    *(_WORD *)uint64_t v69 = v40;
    __int16 v43 = v69 + 2;
    while (v42 != v54)
    {
      __int16 v71 = *((_WORD *)v42 - 1);
      v42 -= 2;
      *((_WORD *)v69 - 1) = v71;
      v69 -= 2;
    }
    *(void *)(a1 + 56) = v69;
    *(void *)(a1 + 64) = v43;
    *(void *)(a1 + 72) = v70;
    if (v54) {
      operator delete(v54);
    }
  }
  else
  {
    *(_WORD *)uint64_t v42 = v40;
    __int16 v43 = v42 + 2;
  }
  *(void *)(a1 + 64) = v43;
  uint64_t v72 = *a5;
  uint64_t v73 = a5[1];
  while (1)
  {
    if (v72 == v73)
    {
      int v82 = 1;
      sub_2162F5A90(v12, 1uLL, &v82);
      goto LABEL_117;
    }
    if ((*(unsigned int (**)(void))(**(void **)v72 + 56))() == 2) {
      break;
    }
    v72 += 8;
  }
  int v83 = 2;
  sub_2162F5A90(v12, 1uLL, &v83);
LABEL_117:
  if (*(_WORD *)(*(void *)(a1 + 240) + 98)) {
    sub_2162F5BC4(a1);
  }
  return a1;
}

void sub_2162F6384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, const void **a12)
{
  sub_2161868BC(a12, 0);
  sub_2161868BC(v14, 0);
  sub_2161868BC((const void **)(v12 + 200), 0);
  int v16 = *(void **)(v12 + 176);
  if (v16)
  {
    *(void *)(v12 + 184) = v16;
    operator delete(v16);
  }
  int v17 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 160) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(v12 + 128);
  if (v18)
  {
    *(void *)(v12 + 136) = v18;
    operator delete(v18);
  }
  unsigned int v19 = *(void **)(v12 + 104);
  if (v19)
  {
    *(void *)(v12 + 112) = v19;
    operator delete(v19);
  }
  CFStringRef v20 = *(void **)(v12 + 80);
  if (v20)
  {
    *(void *)(v12 + 88) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a11;
  if (*a11)
  {
    *(void *)(v12 + 64) = v21;
    operator delete(v21);
  }
  CFIndex v22 = *(void **)(v12 + 32);
  if (v22)
  {
    *(void *)(v12 + 40) = v22;
    operator delete(v22);
  }
  CFAllocatorRef v23 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 16) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2162F647C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BE138;
  sub_2161868BC((const void **)(a1 + 216), 0);
  sub_2161868BC((const void **)(a1 + 208), 0);
  sub_2161868BC((const void **)(a1 + 200), 0);
  CFStringRef v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(void *)(a1 + 184) = v2;
    operator delete(v2);
  }
  CFStringRef v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 160) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(void *)(a1 + 112) = v5;
    operator delete(v5);
  }
  CFStringRef v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(void *)(a1 + 88) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(void *)(a1 + 64) = v7;
    operator delete(v7);
  }
  CFStringRef v8 = *(void **)(a1 + 32);
  if (v8)
  {
    *(void *)(a1 + 40) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(void *)(a1 + 16) = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_2162F6560(uint64_t a1)
{
  sub_2162F647C(a1);

  JUMPOUT(0x2166CA800);
}

const void *sub_2162F6598(uint64_t a1)
{
  CFStringRef v3 = (const void **)(a1 + 200);
  uint64_t result = *(const void **)(a1 + 200);
  if (!result)
  {
    if (*(void *)(a1 + 40) == *(void *)(a1 + 32)) {
      uint64_t v4 = 8;
    }
    else {
      uint64_t v4 = 32;
    }
    if (*(void *)(a1 + 40) == *(void *)(a1 + 32)) {
      uint64_t v5 = a1 + 8;
    }
    else {
      uint64_t v5 = a1 + 32;
    }
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    uint64_t v7 = *(unsigned __int16 **)(a1 + v4);
    CFStringRef v8 = *(unsigned __int16 **)(v5 + 8);
    while (v7 != v8)
    {
      CFStringRef v9 = (const __CFString *)sub_2163101A8(*v7, *(_DWORD *)(a1 + 232));
      if (v9) {
        CFStringAppend(Mutable, v9);
      }
      ++v7;
    }
    sub_2161868BC(v3, Mutable);
    return *v3;
  }
  return result;
}

const void *sub_2162F6654(uint64_t a1)
{
  CFStringRef v3 = (const void **)(a1 + 216);
  uint64_t result = *(const void **)(a1 + 216);
  if (!result)
  {
    if ((*(unsigned char *)(a1 + 225) & 0x40) == 0)
    {
      uint64_t v4 = *(const void **)(a1 + 208);
      if (!v4)
      {
        Mutable = 0;
LABEL_24:
        sub_2161868BC(v3, Mutable);
        return *v3;
      }
LABEL_23:
      Mutable = (__CFString *)CFRetain(v4);
      goto LABEL_24;
    }
    uint64_t v6 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
    if (!v6)
    {
      uint64_t v4 = *(const void **)(a1 + 200);
      goto LABEL_23;
    }
    unint64_t v7 = v6 >> 1;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    uint64_t v8 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
    if (v7 >= v8 >> 1) {
      uint64_t v9 = v8 >> 1;
    }
    else {
      uint64_t v9 = v7;
    }
    if (!v9) {
      goto LABEL_24;
    }
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *(unsigned __int16 *)(*(void *)(a1 + 128) + 2 * v10);
      uint64_t v12 = 80;
      if (*(void *)(a1 + 88) == *(void *)(a1 + 80)) {
        uint64_t v12 = 56;
      }
      uint64_t v13 = *(unsigned __int16 *)(*(void *)(a1 + v12) + 2 * v10);
      CFStringRef v14 = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(*(void *)(a1 + 8) + 2 * v10), *(_DWORD *)(a1 + 232));
      CFStringRef v15 = v14;
      if (v14 && (unint64_t v16 = v13 - v11, v16 < CFStringGetLength(v14)))
      {
        v20.location = 0;
        v20.length = v16;
        CFStringRef v17 = CFStringCreateWithSubstring(alloc, v15, v20);
        CFStringAppend(Mutable, v17);
        CFRelease(v17);
        if (v11) {
          goto LABEL_18;
        }
      }
      else
      {
        CFStringAppend(Mutable, v15);
        if (v11)
        {
LABEL_18:
          int v18 = 0;
          do
          {
            CFStringAppend(Mutable, @"'");
            ++v18;
          }
          while (v11 > v18);
        }
      }
      if (++v10 == v9) {
        goto LABEL_24;
      }
    }
  }
  return result;
}

void **sub_2162F67EC(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 104);
  if (*(void *)(a1 + 112) == *(void *)(a1 + 104))
  {
    if (*(void *)(a1 + 40) == *(void *)(a1 + 32)) {
      uint64_t v3 = 8;
    }
    else {
      uint64_t v3 = 32;
    }
    if (*(void *)(a1 + 40) == *(void *)(a1 + 32)) {
      uint64_t v4 = a1 + 8;
    }
    else {
      uint64_t v4 = a1 + 32;
    }
    uint64_t v5 = *(void *)(v4 + 8) - *(void *)(a1 + v3);
    if (v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = v5 >> 1;
      if (v7 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v7;
      }
      do
      {
        CFStringRef v9 = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(*(void *)(a1 + v3) + 2 * v6), *(_DWORD *)(a1 + 232));
        if (v9) {
          __int16 Length = CFStringGetLength(v9);
        }
        else {
          __int16 Length = 0;
        }
        uint64_t v12 = *(char **)(a1 + 112);
        unint64_t v11 = *(void *)(a1 + 120);
        if ((unint64_t)v12 >= v11)
        {
          CFStringRef v14 = (char *)*v1;
          uint64_t v15 = v12 - (unsigned char *)*v1;
          if (v15 <= -3) {
            sub_21610CB04();
          }
          uint64_t v16 = v15 >> 1;
          unint64_t v17 = v11 - (void)v14;
          if (v17 <= (v15 >> 1) + 1) {
            unint64_t v18 = v16 + 1;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v17 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v19 = v18;
          }
          if (v19)
          {
            CFRange v20 = (char *)sub_21610FD44(a1 + 120, v19);
            CFStringRef v14 = *(char **)(a1 + 104);
            uint64_t v12 = *(char **)(a1 + 112);
          }
          else
          {
            CFRange v20 = 0;
          }
          uint64_t v21 = &v20[2 * v16];
          *(_WORD *)uint64_t v21 = Length;
          uint64_t v13 = v21 + 2;
          while (v12 != v14)
          {
            __int16 v22 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v21 - 1) = v22;
            v21 -= 2;
          }
          *(void *)(a1 + 104) = v21;
          *(void *)(a1 + 112) = v13;
          *(void *)(a1 + 120) = &v20[2 * v19];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_WORD *)uint64_t v12 = Length;
          uint64_t v13 = v12 + 2;
        }
        *(void *)(a1 + 112) = v13;
        ++v6;
      }
      while (v6 != v8);
    }
    else
    {
      return (void **)(a1 + 56);
    }
  }
  return v1;
}

uint64_t sub_2162F6968(uint64_t a1, const __CFString *a2, CFStringRef theString, const __CFString *a4, int a5, double a6)
{
  int v15 = a5;
  __int16 Length = CFStringGetLength(theString);
  uint64_t v12 = operator new(2uLL);
  _WORD *v12 = Length;
  v14[1] = v12 + 1;
  v14[2] = v12 + 1;
  v14[0] = v12;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6BDCD8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_26C6BDDD0;
  sub_21633AA2C((void *)(a1 + 32), a2, theString, a4, &v15, (uint64_t)v14);
  *(double *)(a1 + 104) = a6;
  *(_DWORD *)(a1 + 112) = 544;
  operator delete(v12);
  return a1;
}

void sub_2162F6A58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2162F6A6C(void *a1)
{
  *a1 = &unk_26C6BDCD8;
  a1[3] = &unk_26C6BDDD0;
  sub_2162F6DBC((uint64_t)(a1 + 4));
  return a1;
}

void sub_2162F6AD4(void *a1)
{
  *a1 = &unk_26C6BDCD8;
  a1[3] = &unk_26C6BDDD0;
  sub_2162F6DBC((uint64_t)(a1 + 4));

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2162F6B5C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return a1 + 32;
  }
}

CFStringRef sub_2162F6B6C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    LOWORD(result) = 0;
  }
  else
  {
    CFStringRef result = *(const __CFString **)(a1 + 88);
    if (result) {
      LOWORD(result) = CFStringGetLength(result);
    }
  }
  return (const __CFString *)(unsigned __int16)result;
}

uint64_t sub_2162F6BA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_2162F6BC4()
{
  return 0;
}

uint64_t sub_2162F6BCC()
{
  return 1;
}

uint64_t sub_2162F6BD4()
{
  return 2;
}

uint64_t sub_2162F6BDC()
{
  return 0;
}

uint64_t sub_2162F6BE4()
{
  return 0;
}

uint64_t sub_2162F6BEC(uint64_t a1)
{
  return (int)((*(double (**)(uint64_t))(*(void *)a1 + 176))(a1) * 1000.0);
}

uint64_t sub_2162F6C34()
{
  return 0;
}

uint64_t sub_2162F6C3C(uint64_t a1)
{
  CFStringRef v1 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);

  return sub_2161E539C(v1);
}

uint64_t sub_2162F6C84()
{
  return 0;
}

void sub_2162F6C8C()
{
}

void sub_2162F6D28(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C40347CB710);
  _Unwind_Resume(a1);
}

void sub_2162F6D4C()
{
}

uint64_t sub_2162F6D68(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t sub_2162F6D70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

double sub_2162F6D78(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

uint64_t sub_2162F6D80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_2162F6DA4(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_2162F6DAC(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_2162F6DB4(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t sub_2162F6DBC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BD698;
  CFStringRef v2 = (const void **)(a1 + 48);
  sub_2161868BC((const void **)(a1 + 64), 0);
  sub_2161868BC((const void **)(a1 + 56), 0);
  sub_2161868BC(v2, 0);
  return a1;
}

void sub_2162F6E24(const void *a1)
{
  CFStringRef v2 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v3 = os_signpost_id_make_with_pointer(v2, a1);
  uint64_t v4 = sub_2162D1CE4(0xDu);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = v4;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "MecabraKoreanInit", "KoreanEngine engine init", buf, 2u);
    }
  }
  operator new();
}

void sub_2162F735C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2161FAB24((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_2162F7668()
{
}

void sub_2162F7670()
{
}

void sub_2162F7678()
{
  MEMORY[0x2166CA800](v0, 0x60C4044C4A2DFLL);
  JUMPOUT(0x2162F7550);
}

void sub_2162F7698()
{
}

void sub_2162F76A0()
{
  MEMORY[0x2166CA800](v0, 0x60C4045F868BCLL);
  JUMPOUT(0x2162F755CLL);
}

void sub_2162F76C0()
{
}

void sub_2162F76C8()
{
  MEMORY[0x2166CA800](v0, 0x10E1C4017B55C18);
  JUMPOUT(0x2162F758CLL);
}

void sub_2162F76E8()
{
}

void sub_2162F76F0()
{
  MEMORY[0x2166CA800](v0, 0x60C4082687C62);
  JUMPOUT(0x2162F7598);
}

void sub_2162F7710()
{
}

void sub_2162F7718()
{
}

void sub_2162F7720()
{
}

void sub_2162F7728()
{
}

void sub_2162F7730()
{
  MEMORY[0x2166CA800](v0, 0x10A1C4010E18BA4);
  JUMPOUT(0x2162F7614);
}

void sub_2162F7750()
{
}

void sub_2162F7758(void *a1, const __CFURL *a2, int a3)
{
  if (a3) {
    CFStringRef v5 = @"hangul_trie_tenkey.dat";
  }
  else {
    CFStringRef v5 = @"hangul_trie_full.dat";
  }
  sub_2163250C8(@"ko", a2, v5, 0, &cf);
  if (cf)
  {
    sub_21630B454((const __CFURL *)cf, a1);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a1 = 0;
  }
}

void sub_2162F77DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F77F4(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const __CFArray *a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 152);
    if (*(void *)(v6 + 32))
    {
      if (*(void *)(v6 + 40))
      {
        CFStringRef v9 = sub_2162D1CE4(3u);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&buf[4] = a2;
          _os_log_debug_impl(&dword_2160F5000, v9, OS_LOG_TYPE_DEBUG, "[KoreanEngine::analyzeString] analysisStr: [%@]", buf, 0xCu);
        }
        os_signpost_id_t ptr = 0;
        uint64_t v10 = sub_2162D1CE4(0xDu);
        os_signpost_id_t ptr = os_signpost_id_make_with_pointer(v10, &ptr);
        unint64_t v11 = sub_2162D1CE4(0xDu);
        os_signpost_id_t v12 = ptr;
        if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v13 = v11;
          if (os_signpost_enabled(v11))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_2160F5000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v12, "MecabraAnalyzeStringWithContext", (const char *)&unk_2163CBB73, buf, 2u);
          }
        }
        (*(void (**)(void))(**(void **)(a1 + 112) + 32))(*(void *)(a1 + 112));
        sub_2162978A0(*(void *)(a1 + 112), 1);
        if (a5)
        {
          CFIndex Length = CFStringGetLength(a2);
          if (Length <= CFArrayGetCount(a5)) {
            operator new();
          }
        }
        *(void *)buf = &unk_26C6BE968;
        *(_OWORD *)&buf[8] = 0u;
        long long v18 = 0u;
        int v19 = 1065353216;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v20 = 0;
        sub_2162F7B94(a1, (uint64_t)buf, a2, 0, 0);
      }
    }
  }
  return 0;
}

void sub_2162F7B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
  MEMORY[0x2166CA800](v9, 0x60C40AA6EF139);
  sub_21624F668(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_2162F7B94(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, char a5)
{
  sub_2161E212C(a3, &v11);
  if (a5)
  {
    unint64_t v7 = v11;
    uint64_t v8 = v12;
    if (*(unsigned char *)(a1 + 209)) {
      BOOL v9 = v11 == v12;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      int v10 = sub_21630EC60(*v11);
      if (v10) {
        *unint64_t v7 = v10;
      }
    }
  }
  else
  {
    unint64_t v7 = v11;
    uint64_t v8 = v12;
  }
  sub_216197540(*(void *)(a1 + 152), v7, v8 - v7);
}

void sub_2162F7DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, void **a20)
{
  sub_21624E130(v20, 0);
  sub_21624E130(&a19, 0);
  sub_216308B50((uint64_t)&a20);
  *(void *)(v21 - 168) = &unk_26C6F4D68;
  a20 = (void **)(v21 - 160);
  sub_2161986EC(&a20);
  if (*(char *)(v21 - 113) < 0) {
    operator delete(*(void **)(v21 - 136));
  }
  if (*(char *)(v21 - 89) < 0) {
    operator delete(*(void **)(v21 - 112));
  }
  uint64_t v23 = *(void **)(v21 - 88);
  if (v23)
  {
    *(void *)(v21 - 80) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2162F7E88(uint64_t a1, void *a2, const void *a3, uint64_t a4)
{
  uint64_t v8 = sub_2162156C8((uint64_t)a2, 81);
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v9 = *(void *)(a2[6] + 8 * v8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 55);
    uint64_t v11 = *(void *)(v9 + 40);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    if (v11 == 1)
    {
      sub_2162166B0(a2, v8, &v69);
      sub_216215B8C((uint64_t)a2, (uint64_t *)&v69, 0);
      os_signpost_id_t v12 = v69;
      uint64_t v69 = 0;
      if (v12) {
        (*(void (**)(void *))(*(void *)v12 + 16))(v12);
      }
    }
  }
  uint64_t v13 = sub_2162156C8((uint64_t)a2, 83);
  CFStringRef v14 = (uint64_t *)a2[6];
  if (v14 == (uint64_t *)a2[7]) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *v14;
  }
  int v16 = *(char *)(v15 + 55);
  if (v16 >= 0) {
    unint64_t v17 = (unsigned __int16 *)(v15 + 32);
  }
  else {
    unint64_t v17 = *(unsigned __int16 **)(v15 + 32);
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(v15 + 55);
  }
  else {
    uint64_t v18 = *(void *)(v15 + 40);
  }
  uint64_t result = sub_21630F3F8((uint64_t)a3, a4, v17, v18);
  if (v13 == -1) {
    return result;
  }
  char v20 = result;
  if (v13)
  {
    sub_2162166B0(a2, v13, &v72);
    if (v20) {
LABEL_21:
    }
      sub_216197098();
    int v21 = *(char *)(v15 + 55);
    if (v21 >= 0) {
      uint64_t v22 = (unsigned __int16 *)(v15 + 32);
    }
    else {
      uint64_t v22 = *(unsigned __int16 **)(v15 + 32);
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(v15 + 55);
    }
    else {
      uint64_t v23 = *(void *)(v15 + 40);
    }
    sub_21630E7A0(v22, v23, &v69);
    int v24 = *(char *)(v72 + 55);
    if (v24 >= 0) {
      uint64_t v25 = (unsigned __int16 *)(v72 + 32);
    }
    else {
      uint64_t v25 = *(unsigned __int16 **)(v72 + 32);
    }
    if (v24 >= 0) {
      unint64_t v26 = *(unsigned __int8 *)(v72 + 55);
    }
    else {
      unint64_t v26 = *(void *)(v72 + 40);
    }
    uint64_t v27 = (uint64_t)v25;
    if (v26 == 1)
    {
      uint64_t v28 = 0;
      while (*(unsigned __int16 *)&a114171g1k1n111[v28] != *v25)
      {
        v28 += 2;
        if (v28 == 18)
        {
          uint64_t v29 = 0;
          goto LABEL_41;
        }
      }
      uint64_t v29 = &a114171g1k1n111[v28];
LABEL_41:
      if (v29) {
      else
      }
        BOOL v31 = 1;
      int v30 = !v31;
    }
    else
    {
      int v30 = 0;
    }
    sub_21630E7A0(v25, v26, &__p);
    int v64 = v30;
    unint64_t v32 = v71;
    if ((v71 & 0x80u) != 0) {
      unint64_t v32 = v70;
    }
    unint64_t v33 = v68;
    if ((v68 & 0x80u) != 0) {
      unint64_t v33 = v67;
    }
    BOOL v35 = v26 == 1 && v32 > v33;
    if (v26 >= 2)
    {
      uint64_t v37 = 2 * v26 - 2;
      int v38 = *(unsigned __int16 *)((char *)v25 + v37);
      do
      {
        int v39 = *v25++;
        BOOL v36 = v38 == v39;
        BOOL v40 = v38 != v39 || v37 == 0;
        v37 -= 2;
      }
      while (!v40);
    }
    else
    {
      BOOL v36 = 0;
    }
    sub_21630E3B4(v27, v26);
    uint64_t v42 = v41;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 96))(v15) == 73 && v26 - v42 == 1)
    {
      unint64_t v44 = v71;
      if ((v71 & 0x80u) != 0) {
        unint64_t v44 = v70;
      }
      unint64_t v45 = v68;
      if ((v68 & 0x80u) != 0) {
        unint64_t v45 = v67;
      }
      if (v44 != v45) {
        goto LABEL_85;
      }
      if (v44)
      {
        int v46 = (unsigned __int16 *)&v69;
        if ((v71 & 0x80u) != 0) {
          int v46 = (unsigned __int16 *)v69;
        }
        p_p = (unsigned __int16 *)&__p;
        if ((v68 & 0x80u) != 0) {
          p_p = (unsigned __int16 *)__p;
        }
        while (*p_p == *v46)
        {
          ++v46;
          ++p_p;
          if (!--v44) {
            goto LABEL_69;
          }
        }
        goto LABEL_85;
      }
    }
LABEL_69:
    if (((v64 | v35 | v36) & 1) == 0 && *(void *)(a1 + 96))
    {
LABEL_86:
      if ((char)v68 < 0) {
        operator delete(__p);
      }
      if ((char)v71 < 0)
      {
        operator delete(v69);
        if (a4)
        {
LABEL_90:
          uint64_t v48 = a2[6];
          uint64_t v49 = *(_WORD **)(*(void *)v48 + 32);
          int v50 = *(char *)(*(void *)v48 + 55);
          if (v50 >= 0) {
            uint64_t v49 = (_WORD *)(*(void *)v48 + 32);
          }
          uint64_t v51 = *(void *)(*(void *)v48 + 40);
          if (v50 >= 0) {
            uint64_t v51 = *(unsigned __int8 *)(*(void *)v48 + 55);
          }
          if (v51)
          {
            uint64_t v52 = 2 * v51;
            while ((unsigned __int16)(*v49 + 10332) <= 0xD45Bu && (unsigned __int16)(*v49 - 12644) < 0xFFCDu)
            {
              ++v49;
              v52 -= 2;
              if (!v52) {
                goto LABEL_99;
              }
            }
          }
          else
          {
LABEL_99:
            uint64_t v53 = a2[7] - v48;
            if ((unint64_t)v53 >= 9)
            {
              unint64_t v54 = v53 >> 3;
              if (v54 <= 2) {
                uint64_t v55 = 2;
              }
              else {
                uint64_t v55 = v54;
              }
              uint64_t v56 = 1;
              while (1)
              {
                uint64_t v57 = *(void *)(v48 + 8 * v56);
                uint64_t v58 = *(unsigned __int8 *)(v57 + 55);
                int v59 = (char)v58;
                if ((v58 & 0x80u) != 0) {
                  uint64_t v58 = *(void *)(v57 + 40);
                }
                if (v58 == a4)
                {
                  uint64_t v62 = *(void *)(v57 + 32);
                  uint64_t v60 = v57 + 32;
                  uint64_t v61 = v62;
                  uint64_t v63 = (const void *)(v59 >= 0 ? v60 : v61);
                  if (!memcmp(v63, a3, 2 * a4)) {
                    break;
                  }
                }
                if (v55 == ++v56) {
                  goto LABEL_117;
                }
              }
              sub_2162166B0(a2, v56, &v65);
              if (v65) {
                (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
              }
            }
          }
        }
      }
      else if (a4)
      {
        goto LABEL_90;
      }
LABEL_117:
      uint64_t result = v72;
      uint64_t v72 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      }
      return result;
    }
LABEL_85:
    sub_216215B8C((uint64_t)a2, &v72, 0);
    goto LABEL_86;
  }
  if (result)
  {
    sub_2162166B0(a2, 0, &v72);
    goto LABEL_21;
  }
  return result;
}

void sub_2162F8424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 16))(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162F8518(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72));
  uint64_t v4 = *(uint64_t **)(a2 + 48);
  CFStringRef v5 = *(uint64_t **)(a2 + 56);
  if (v4 != v5)
  {
    unint64_t v6 = 1;
    do
    {
      uint64_t v7 = *v4;
      *(void *)(*v4 + 8) = v6;
      if (v6 <= 9)
      {
        (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v7 + 528))(v7, 12, "Autocorrected", 1);
        uint64_t v7 = *v4;
      }
      *v4++ = 0;
      uint64_t v8 = (void *)sub_2161F4704(v7);
      (*(void (**)(void, void *))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), v8);

      ++v6;
    }
    while (v4 != v5);
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 64);

  return v9();
}

uint64_t sub_2162F8654(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 152);
  if (!*(void *)(v5 + 32) || !*(void *)(v5 + 40)) {
    return 0;
  }
  CFArrayRef v6 = (const __CFArray *)a4;
  sub_2162F870C(a1, a4, a3, 0);
  if (v6)
  {
    sub_21628F494((uint64_t)v6);
    CFArrayRef v6 = (const __CFArray *)*((void *)v6 + 6);
  }
  if (CFStringGetLength(a2) < 1)
  {
    sub_2162F8868(a1);
    return 1;
  }
  else
  {
    return sub_2162F77F4(a1, a2, v8, v9, v6);
  }
}

uint64_t sub_2162F870C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a2) {
    operator new();
  }
  uint64_t v7 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v8 = *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_2161C19CC(a1, v8);
  *(unsigned char *)(*(void *)(a1 + 112) + 96) = 1;
  uint64_t result = sub_216325BD8(a3, 0, a4);
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

void sub_2162F8844(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4095D43ACALL);
  _Unwind_Resume(a1);
}

uint64_t sub_2162F8868(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  os_signpost_id_t ptr = 0;
  CFStringRef v2 = sub_2162D1CE4(0xDu);
  os_signpost_id_t ptr = os_signpost_id_make_with_pointer(v2, &ptr);
  os_signpost_id_t v3 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v4 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = v3;
    if (os_signpost_enabled(v3))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_2163CBB73, (uint8_t *)&v10, 2u);
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 16))(&v10);
  *(void *)buf = &unk_26C6C7308;
  uint64_t v15 = sub_2162173DC;
  int v16 = buf;
  sub_216215A00(&v10, (uint64_t)buf);
  sub_216199290(buf);
  sub_216216A20((uint64_t)&v10, 5u, (uint64_t)"Final", 0, 1u);
  sub_2162F8518(a1, (uint64_t)&v10);
  CFArrayRef v6 = sub_2162D1CE4(0xDu);
  os_signpost_id_t v7 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v8 = v6;
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2160F5000, v8, OS_SIGNPOST_INTERVAL_END, v7, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_2163CBB73, buf, 2u);
    }
  }
  uint64_t v10 = &unk_26C6BE968;
  *(void *)buf = &v12;
  sub_21618B5DC((void ***)buf);
  sub_216144C28((uint64_t)&v11);
  return 1;
}

void sub_2162F8A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2162F8A98(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  v68[6] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 152);
  if (!*(void *)(v5 + 32) || !*(void *)(v5 + 40)) {
    return 0;
  }
  uint64_t v9 = sub_21622AF98(a2);
  if (!v9)
  {
    sub_2162F870C(a1, a4, a3, 0);
    CFStringRef v21 = sub_21622B054(a2);
    ptr[1] = v21;
    if (CFStringGetLength(v21))
    {
      uint64_t v22 = sub_2162D1CE4(3u);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v21;
        _os_log_debug_impl(&dword_2160F5000, v22, OS_LOG_TYPE_DEBUG, "[KoreanEngine::analyzeGesturesWithContext] analysisStr: [%@]", (uint8_t *)&buf, 0xCu);
      }
      ptr[0] = 0;
      uint64_t v23 = sub_2162D1CE4(0xDu);
      ptr[0] = os_signpost_id_make_with_pointer(v23, ptr);
      int v24 = sub_2162D1CE4(0xDu);
      os_signpost_id_t v25 = ptr[0];
      if ((unint64_t)(ptr[0] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v26 = v24;
        if (os_signpost_enabled(v24))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl(&dword_2160F5000, v26, OS_SIGNPOST_INTERVAL_BEGIN, v25, "analyzeGesturesWithContext", (const char *)&unk_2163CBB73, (uint8_t *)&buf, 2u);
        }
      }
      (*(void (**)(void))(**(void **)(a1 + 112) + 32))(*(void *)(a1 + 112));
      sub_2162978A0(*(void *)(a1 + 112), 1);
      uint64_t v28 = &unk_26C6BE968;
      long long v29 = 0u;
      long long v30 = 0u;
      LODWORD(v31) = 1065353216;
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      unint64_t v32 = 0;
      sub_2161E212C(v21, (UniChar **)&v45);
      sub_2163547BC(a2, (uint64_t)v36);
      sub_216197540(*(void *)(a1 + 152), v45, ((char *)v46 - (unsigned char *)v45) >> 1);
    }
    sub_2162F8868(a1);
    if (v21) {
      CFRelease(v21);
    }
    return 1;
  }
  if (v9 != CFArrayGetCount(a2)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 192);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *(void **)(v10 + 8);
  if (!v11) {
    return 0;
  }
  uint64_t result = sub_21622C350();
  if (!result) {
    return result;
  }
  if (!*v11) {
    return 0;
  }
  sub_2162F870C(a1, a4, a3, 1);
  (*(void (**)(void))(**(void **)(a1 + 112) + 32))(*(void *)(a1 + 112));
  sub_2162978A0(*(void *)(a1 + 112), 1);
  uint64_t v13 = *(void *)(a1 + 192);
  if (v13)
  {
    CFStringRef v14 = *(void **)(v13 + 8);
    if (v14)
    {
      if (sub_21622C350() && *v14) {
        sub_216235314(*(void *)(a1 + 192));
      }
    }
  }
  uint64_t v15 = *(void *)(a1 + 200);
  if (v15)
  {
    int v16 = *(void **)(v15 + 8);
    if (v16)
    {
      if (sub_21622C350() && *v16) {
        sub_216235314(*(void *)(a1 + 200));
      }
    }
  }
  uint64_t result = sub_2162357C4(*(void *)(a1 + 192), a2);
  if (result)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    if (v17 != *(void *)a1 && *(_WORD *)(v17 - 2) != 32) {
      sub_2161C14F0(a1);
    }
    unint64_t v45 = 0;
    int v46 = &v45;
    uint64_t v47 = 0x3002000000;
    uint64_t v48 = sub_2162F957C;
    uint64_t v49 = sub_2162F958C;
    CFTypeRef cf = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    uint64_t v37 = 0;
    int v38 = &v37;
    uint64_t v39 = 0x4002000000;
    BOOL v40 = sub_2162F9598;
    uint64_t v41 = sub_2162F95BC;
    __p = 0;
    __int16 v43 = 0;
    uint64_t v44 = 0;
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v62 = 0x7002000000;
    uint64_t v63 = sub_2162F95D4;
    int v64 = sub_2162F9644;
    uint64_t v65 = &unk_26C6BE968;
    memset(v66, 0, sizeof(v66));
    int v67 = 1065353216;
    memset(v68, 0, 24);
    v36[0] = 0;
    v36[1] = v36;
    v36[2] = (void *)0x2000000000;
    v36[3] = 0;
    uint64_t v18 = *(void *)(a1 + 192);
    *(void *)uint64_t v51 = MEMORY[0x263EF8330];
    uint64_t v52 = 0x40000000;
    uint64_t v53 = sub_2162F96A4;
    unint64_t v54 = &unk_264267280;
    p_long long buf = &buf;
    uint64_t v59 = a1;
    uint64_t v55 = &v45;
    uint64_t v56 = &v37;
    uint64_t v57 = v36;
    sub_2162358E0(v18, (uint64_t)v51);
    v35[0] = 0;
    v35[1] = v35;
    v35[2] = (void *)0x2000000000;
    v35[3] = 0;
    if ((*(unsigned char *)(a1 + 49) & 0x20) != 0 && sub_2162357C4(*(void *)(a1 + 200), a2))
    {
      uint64_t v19 = *(void *)(a1 + 200);
      uint64_t v28 = (void *)MEMORY[0x263EF8330];
      *(void *)&long long v29 = 0x40000000;
      *((void *)&v29 + 1) = sub_2162F9A34;
      *(void *)&long long v30 = &unk_26426EC30;
      *((void *)&v30 + 1) = &v45;
      BOOL v31 = &v37;
      unint64_t v32 = &buf;
      unint64_t v33 = v35;
      uint64_t v34 = a1;
      sub_2162358E0(v19, (uint64_t)&v28);
    }
    char v20 = sub_2162D1CE4(0xFu);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      sub_216325E20((unint64_t)"[Input Transcoder]", (const __CFArray *)v46[5], v38 + 5);
    }
    v60[0] = &unk_26C6C7308;
    v60[1] = sub_2162173DC;
    v60[3] = v60;
    sub_216215A00((void *)(*((void *)&buf + 1) + 40), (uint64_t)v60);
    sub_216199290(v60);
    sub_2162F8518(a1, *((void *)&buf + 1) + 40);
    _Block_object_dispose(v35, 8);
    _Block_object_dispose(v36, 8);
    _Block_object_dispose(&buf, 8);
    uint64_t v65 = &unk_26C6BE968;
    v36[0] = v68;
    sub_21618B5DC((void ***)v36);
    sub_216144C28((uint64_t)v66);
    _Block_object_dispose(&v37, 8);
    if (__p)
    {
      __int16 v43 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v45, 8);
    if (cf) {
      CFRelease(cf);
    }
    return 1;
  }
  return result;
}

void sub_2162F93C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162F957C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

void sub_2162F958C(uint64_t a1)
{
}

__n128 sub_2162F9598(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2162F95BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 sub_2162F95D4(void *a1, uint64_t a2)
{
  a1[5] = &unk_26C6BE968;
  sub_216283568((uint64_t)(a1 + 6), (uint64_t *)(a2 + 48));
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 11) = result;
  a1[13] = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  return result;
}

uint64_t sub_2162F9644(uint64_t a1)
{
  *(void *)(a1 + 40) = &unk_26C6BE968;
  os_signpost_id_t v3 = (void **)(a1 + 88);
  sub_21618B5DC(&v3);
  return sub_216144C28(a1 + 48);
}

CFIndex sub_2162F96A4(CFIndex result, CFStringRef theString, float a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (theString)
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = *(void *)(result + 64);
    __n128 result = CFStringGetLength(theString);
    if (result)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(v5[4] + 8) + 40), theString);
      os_signpost_id_t v7 = *(void **)(v5[5] + 8);
      uint64_t v8 = (float *)v7[6];
      unint64_t v9 = v7[7];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v11 = (float *)v7[5];
        uint64_t v12 = v8 - v11;
        if ((unint64_t)(v12 + 1) >> 62) {
          sub_21610CB04();
        }
        unint64_t v13 = v9 - (void)v11;
        unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 1;
        if (v14 <= v12 + 1) {
          unint64_t v14 = v12 + 1;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          int v16 = (char *)sub_2161129B4((uint64_t)(v7 + 7), v15);
          uint64_t v11 = (float *)v7[5];
          uint64_t v8 = (float *)v7[6];
        }
        else
        {
          int v16 = 0;
        }
        uint64_t v17 = (float *)&v16[4 * v12];
        uint64_t v18 = &v16[4 * v15];
        *uint64_t v17 = a3;
        uint64_t v10 = v17 + 1;
        while (v8 != v11)
        {
          int v19 = *((_DWORD *)v8-- - 1);
          *((_DWORD *)v17-- - 1) = v19;
        }
        v7[5] = v17;
        v7[6] = v10;
        v7[7] = v18;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *uint64_t v8 = a3;
        uint64_t v10 = v8 + 1;
      }
      v7[6] = v10;
      if ((a3 < 0.05 || *(uint64_t *)(*(void *)(v5[6] + 8) + 24) >= 20)
        && *(void *)(*(void *)(v5[7] + 8) + 96) - *(void *)(*(void *)(v5[7] + 8) + 88) >= 0x29uLL)
      {
        sub_21630EFDC(theString);
      }
      char v20 = &unk_26C6BE968;
      long long v21 = 0u;
      long long v22 = 0u;
      int v23 = 1065353216;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v24 = 0;
      sub_2162F7B94(v6, (uint64_t)&v20, theString, 0, 1);
    }
  }
  return result;
}

void sub_2162F9A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21618A144((uint64_t)va);
  _Unwind_Resume(a1);
}

CFIndex sub_2162F9A34(CFIndex result, CFStringRef theString, float a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (theString)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 64);
    __n128 result = CFStringGetLength(theString);
    if (result)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(v5 + 32) + 8) + 40), theString);
      os_signpost_id_t v7 = *(void **)(*(void *)(v5 + 40) + 8);
      uint64_t v8 = (float *)v7[6];
      unint64_t v9 = v7[7];
      if ((unint64_t)v8 >= v9)
      {
        uint64_t v11 = (float *)v7[5];
        uint64_t v12 = v8 - v11;
        if ((unint64_t)(v12 + 1) >> 62) {
          sub_21610CB04();
        }
        unint64_t v13 = v9 - (void)v11;
        unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 1;
        if (v14 <= v12 + 1) {
          unint64_t v14 = v12 + 1;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          int v16 = (char *)sub_2161129B4((uint64_t)(v7 + 7), v15);
          uint64_t v11 = (float *)v7[5];
          uint64_t v8 = (float *)v7[6];
        }
        else
        {
          int v16 = 0;
        }
        uint64_t v17 = (float *)&v16[4 * v12];
        uint64_t v18 = &v16[4 * v15];
        *uint64_t v17 = a3;
        uint64_t v10 = v17 + 1;
        while (v8 != v11)
        {
          int v19 = *((_DWORD *)v8-- - 1);
          *((_DWORD *)v17-- - 1) = v19;
        }
        v7[5] = v17;
        v7[6] = v10;
        v7[7] = v18;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *uint64_t v8 = a3;
        uint64_t v10 = v8 + 1;
      }
      v7[6] = v10;
      char v20 = &unk_26C6BE968;
      long long v21 = 0u;
      long long v22 = 0u;
      int v23 = 1065353216;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v24 = 0;
      sub_2162F7B94(v6, (uint64_t)&v20, theString, 0, 1);
    }
  }
  return result;
}

void sub_2162F9D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21618A144((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2162F9D40(uint64_t a1, void *a2, uint64_t *a3, char a4)
{
  uint64_t v151 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a1 + 49) & 0x40) != 0)
  {
    *(void *)__dst = &unk_26C6C72B0;
    *(void *)&__dst[8] = sub_21630E144;
    *(void *)&long long v137 = __dst;
    sub_2162FC1F0(*(void *)(a1 + 152), a3, (uint64_t)__dst, 1);
  }
  else
  {
    *(void *)__dst = &unk_26C6C72B0;
    *(void *)&__dst[8] = sub_21630E188;
    *(void *)&long long v137 = __dst;
    sub_2162FC1F0(*(void *)(a1 + 152), a3, (uint64_t)__dst, 0);
  }
  sub_21624F5E4(__dst);
  int v7 = *(_DWORD *)(a1 + 48);
  uint64_t v8 = a2;
  if ((v7 & 2) == 0) {
    goto LABEL_11;
  }
  if ((v7 & 0x40000) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 168);
    if (v9)
    {
      unsigned __int8 v10 = atomic_load((unsigned __int8 *)(v9 + 97));
      if ((v10 & 1) == 0)
      {
        unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v9 + 96));
        if (v11)
        {
          LODWORD(v144) = 0;
          uint64_t v12 = *(unsigned __int8 **)(a1 + 168);
          uint64_t v13 = a3[7];
          unint64_t v14 = operator new(0x20uLL);
          void *v14 = &unk_26C6C9148;
          v14[1] = a2;
          v14[2] = a3;
          void v14[3] = &v144;
          *(void *)&long long v137 = v14;
          sub_21620D360(v12, v13, (uint64_t)__dst, -1);
          sub_216250938(__dst);
          uint64_t v8 = a2;
        }
      }
    }
  }
  if (v8[6] == v8[7])
  {
LABEL_11:
    if ((a4 & 1) == 0) {
      sub_216197098();
    }
    LOBYTE(v122) = a4;
    unint64_t v15 = *(uint64_t **)(a1 + 128);
    if (*v15)
    {
      long long v16 = *((_OWORD *)a3 + 1);
      *(_OWORD *)uint64_t v129 = *(_OWORD *)a3;
      int v17 = *(_DWORD *)(a1 + 48);
      LOBYTE(v121) = (v17 & 0x4000) != 0;
      BOOL v120 = (v17 & 2) != 0;
      BOOL v119 = (v17 & 0x2000) != 0;
      *(_OWORD *)v127 = v16;
      v144 = 0;
      long long v145 = 0uLL;
      char v118 = 0;
      v123 = 0;
      uint64_t v18 = operator new(0x68uLL);
      *uint64_t v18 = &unk_26C6C8F90;
      v18[1] = v129;
      v18[2] = &v122;
      v18[3] = v127;
      v18[4] = &v120;
      v18[5] = &v119;
      v18[6] = a1;
      v18[7] = a3;
      v18[8] = &v121;
      v18[9] = &v123;
      v18[10] = &v144;
      v18[11] = &v118;
      v18[12] = a2;
      *(void *)&long long v137 = v18;
      sub_216273C30(v15);
      sub_2162FFC0C(__dst);
      sub_216197330(*(void *)(a1 + 152), a3, &v132);
      if ((v134 & 0x80u) == 0) {
        int v19 = (BOOL (*)(uint64_t, uint64_t))v134;
      }
      else {
        int v19 = v133;
      }
      if (v19) {
        sub_216197098();
      }
      (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), a2, a1);
      char v20 = (uint64_t *)a2[6];
      long long v21 = (uint64_t *)a2[7];
      while (v20 != v21)
        sub_2162FCDF4(a1, *v20++, a3[6]);
      if (!(_BYTE)v122)
      {
        uint64_t v22 = v145 >= 0 ? HIBYTE(v145) : v145;
        if (v22 && v118 == 0) {
          sub_216197098();
        }
      }
      uint64_t v8 = a2;
      sub_216197224(*(void *)(a1 + 152), a2);
      if ((char)v134 < 0)
      {
        operator delete(v132);
        uint64_t v8 = a2;
      }
      if (SHIBYTE(v145) < 0)
      {
        operator delete(v144);
        uint64_t v8 = a2;
      }
    }
    if (v8[6] != v8[7])
    {
      if (*(void *)(a1 + 96))
      {
        unint64_t v24 = a3[1];
        if (v24 >= 5)
        {
          uint64_t v25 = a3[5];
          if (v25)
          {
            uint64_t v26 = (unsigned __int16 *)*a3;
            uint64_t v27 = 2 * v25;
            uint64_t v28 = (unsigned __int16 *)a3[4];
            while (*v28 - 12593 < 0x33)
            {
              ++v28;
              v27 -= 2;
              if (!v27) {
                goto LABEL_65;
              }
            }
            sub_21630E3B4(a3[4], v25);
            uint64_t v29 = 0;
            uint64_t v31 = v24 - v30;
            uint64_t v32 = v24 - v30 - 1;
            while (*(unsigned __int16 *)&aA1b1e1g1[v29] != v26[v32])
            {
              v29 += 2;
              if (v29 == 8)
              {
                int v33 = 0;
                uint64_t v34 = v31 - 2;
                goto LABEL_60;
              }
            }
            uint64_t v34 = v31 - 2;
            if (v29 == -2)
            {
              int v33 = 0;
            }
            else
            {
              uint64_t v35 = 0;
              while (*(unsigned __int16 *)&aO1p1q1r1s1t1u1[v35] != v26[v34])
              {
                v35 += 2;
                if (v35 == 42)
                {
                  BOOL v36 = 0;
                  goto LABEL_54;
                }
              }
              BOOL v36 = &aO1p1q1r1s1t1u1[v35];
LABEL_54:
              if (v36) {
              else
              }
                BOOL v37 = 1;
              int v33 = !v37;
            }
LABEL_60:
            if ((v33 | sub_21630E2A0(&v26[v34], 2 * (v26 != 0))) == 1)
            {
              *(void *)__dst = &unk_26C6BE968;
              *(_OWORD *)&__dst[8] = 0u;
              long long v137 = 0u;
              LODWORD(v138) = 1065353216;
              CFStringRef v140 = 0;
              uint64_t v141 = 0;
              v139 = 0;
              if (v26) {
                unint64_t v38 = v32;
              }
              else {
                unint64_t v38 = 0;
              }
              sub_216197540(*(void *)(a1 + 152), v26, v38);
            }
          }
        }
      }
    }
LABEL_65:
    uint64_t v39 = (void *)a2[6];
    BOOL v40 = (void *)a2[7];
    if (v39 != v40)
    {
      if (*(void *)(a1 + 96) && (*(unsigned char *)(a1 + 48) & 2) != 0)
      {
        *(void *)__dst = &unk_26C6BE968;
        *(_OWORD *)&__dst[8] = 0u;
        long long v137 = 0u;
        LODWORD(v138) = 1065353216;
        CFStringRef v140 = 0;
        uint64_t v141 = 0;
        v139 = 0;
        uint64_t v41 = *v39;
        BOOL v42 = (*(unsigned int (**)(void))(*(void *)*v39 + 96))(*v39) != 81
           && (*(uint64_t (**)(uint64_t))(*(void *)v41 + 96))(v41) != 71;
        int v43 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v41 + 248))(v41, 0, 0);
        uint64_t v44 = *(void *)(v41 + 32);
        int v45 = *(char *)(v41 + 55);
        if (v45 >= 0) {
          uint64_t v44 = v41 + 32;
        }
        uint64_t v46 = *(void *)(v41 + 40);
        if (v45 >= 0) {
          uint64_t v46 = *(unsigned __int8 *)(v41 + 55);
        }
        if (*(unsigned __int16 *)(v44 + 2 * v46 - 2) - 12593 >= 0x33 && v42 && ((v43 ^ 1) & 1) == 0)
        {
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v41 + 528))(v41, 3, "add completion", 1);
          (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 160) + 24))(&v144);
          if (v148 != v149)
          {
            sub_2162166B0(&v144, 0, &__p);
            uint64_t v132 = &unk_26C6B5430;
            __int16 v135 = &v132;
            sub_216215760(__dst, &__p, 1, 0, (uint64_t)&v132);
            sub_21618B96C(&v132);
            uint64_t v47 = __p;
            __p = 0;
            if (v47) {
              (*(void (**)(void *))(*(void *)v47 + 16))(v47);
            }
          }
          v144 = (void **)&unk_26C6BE968;
          __p = &v148;
          sub_21618B5DC((void ***)&__p);
          sub_216144C28((uint64_t)&v145);
        }
        __p = 0;
        __int16 v125 = 0;
        v126 = 0;
        uint64_t v48 = a2;
        uint64_t v50 = a2[6];
        uint64_t v49 = a2[7];
        if (v49 != v50)
        {
          unint64_t v51 = 0;
          do
          {
            uint64_t v52 = *(void *)(v50 + 8 * v51);
            int v53 = *(char *)(v52 + 55);
            uint64_t v54 = v52 + 32;
            BOOL v55 = v53 < 0;
            if (v53 < 0) {
              uint64_t v54 = *(void *)(v52 + 32);
            }
            uint64_t v56 = *(unsigned __int8 *)(v52 + 55);
            if (v55) {
              uint64_t v56 = *(void *)(v52 + 40);
            }
            if (*(unsigned __int16 *)(v54 + 2 * v56 - 2) - 12593 <= 0x32)
            {
              (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 160) + 24))(&v144);
              if (v148 != v149)
              {
                sub_2162166B0(&v144, 0, &v123);
                v129[0] = &unk_26C6B5430;
                uint64_t v131 = v129;
                sub_216215760(__dst, (void **)&v123, 1, 0, (uint64_t)v129);
                sub_21618B96C(v129);
                uint64_t v57 = v123;
                v123 = 0;
                if (v57) {
                  ((void (*)(uint64_t **))(*v57)[2])(v57);
                }
              }
              int v58 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 96))(v52);
              if (v58 != 73 && v58 != 83)
              {
                uint64_t v59 = v125;
                if (v125 >= v126)
                {
                  uint64_t v61 = (char *)__p;
                  uint64_t v62 = (v125 - (unsigned char *)__p) >> 3;
                  unint64_t v63 = v62 + 1;
                  if ((unint64_t)(v62 + 1) >> 61) {
                    sub_21610CB04();
                  }
                  uint64_t v64 = v126 - (unsigned char *)__p;
                  if ((v126 - (unsigned char *)__p) >> 2 > v63) {
                    unint64_t v63 = v64 >> 2;
                  }
                  if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v65 = v63;
                  }
                  if (v65)
                  {
                    unint64_t v66 = (char *)sub_2160FFAA8((uint64_t)&v126, v65);
                    uint64_t v61 = (char *)__p;
                    uint64_t v59 = v125;
                  }
                  else
                  {
                    unint64_t v66 = 0;
                  }
                  int v67 = (unint64_t *)&v66[8 * v62];
                  *int v67 = v51;
                  uint64_t v60 = (char *)(v67 + 1);
                  while (v59 != v61)
                  {
                    unint64_t v68 = *((void *)v59 - 1);
                    v59 -= 8;
                    *--int v67 = v68;
                  }
                  __p = v67;
                  __int16 v125 = v60;
                  v126 = &v66[8 * v65];
                  if (v61) {
                    operator delete(v61);
                  }
                }
                else
                {
                  *(void *)__int16 v125 = v51;
                  uint64_t v60 = v59 + 8;
                }
                __int16 v125 = v60;
              }
              v144 = (void **)&unk_26C6BE968;
              v123 = &v148;
              sub_21618B5DC((void ***)&v123);
              sub_216144C28((uint64_t)&v145);
              uint64_t v48 = a2;
              uint64_t v50 = a2[6];
              uint64_t v49 = a2[7];
            }
            ++v51;
          }
          while (v51 < (v49 - v50) >> 3);
        }
        sub_21621671C(v48, (unint64_t **)&__p);
        (*(void (**)(void, unsigned char *, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), __dst, a1);
        unint64_t v70 = v139;
        for (uint64_t i = v140; v70 != i; ++v70)
        {
          sub_2162FCDF4(a1, *v70, a3[6]);
          v127[0] = &unk_26C6B5430;
          uint64_t v128 = v127;
          sub_216215760(a2, (void **)v70, 1, 0, (uint64_t)v127);
          sub_21618B96C(v127);
        }
        if (__p)
        {
          __int16 v125 = (char *)__p;
          operator delete(__p);
        }
        *(void *)__dst = &unk_26C6BE968;
        v144 = (void **)&v139;
        sub_21618B5DC(&v144);
        sub_216144C28((uint64_t)&__dst[8]);
        uint64_t v39 = (void *)a2[6];
        BOOL v40 = (void *)a2[7];
      }
      if (v39 != v40 && (*(unsigned char *)(a1 + 48) & 2) != 0)
      {
        *(void *)__dst = &unk_26C6BE968;
        *(_OWORD *)&__dst[8] = 0u;
        long long v137 = 0u;
        LODWORD(v138) = 1065353216;
        CFStringRef v140 = 0;
        uint64_t v141 = 0;
        v139 = 0;
        v129[0] = 0;
        uint64_t v71 = *(void *)(a1 + 120);
        uint64_t v72 = a3[7];
        uint64_t v73 = operator new(0x28uLL);
        *uint64_t v73 = &unk_26C6C8EE0;
        v73[1] = a1;
        v73[2] = __dst;
        v73[3] = a3;
        v73[4] = v129;
        *(void *)&long long v146 = v73;
        sub_216357A90(v71, v72, 0, (uint64_t)&v144, 4);
        sub_21630015C(&v144);
        (*(void (**)(void, unsigned char *, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), __dst, a1);
        v75 = v139;
        unint64_t v74 = v140;
        if (v139 != v140)
        {
          uint64_t v76 = (unint64_t)((char *)v140 - (char *)v139) > 8;
          do
          {
            sub_2162FCDF4(a1, *v75, a3[6]);
            uint64_t v132 = &unk_26C6B52D0;
            v133 = sub_2162FD284;
            __int16 v135 = &v132;
            sub_216215760(a2, (void **)v75, 1, 0, (uint64_t)&v132);
            sub_21618B96C(&v132);
            if (!v76) {
              break;
            }
            ++v75;
            --v76;
          }
          while (v75 != v74);
        }
        *(void *)__dst = &unk_26C6BE968;
        v144 = (void **)&v139;
        sub_21618B5DC(&v144);
        sub_216144C28((uint64_t)&__dst[8]);
      }
    }
    *(void *)__dst = &unk_26C6BE968;
    *(_OWORD *)&__dst[8] = 0u;
    long long v137 = 0u;
    LODWORD(v138) = 1065353216;
    CFStringRef v140 = 0;
    uint64_t v141 = 0;
    v139 = 0;
    uint64_t v77 = *(void *)(a1 + 136);
    if (*(void *)(v77 + 344))
    {
      uint64_t v78 = a3[8];
      *(void *)&long long v146 = 0;
      uint64_t v79 = operator new(0x20uLL);
      *uint64_t v79 = &unk_26C6C8FE8;
      v79[1] = a1;
      v79[2] = __dst;
      v79[3] = a3;
      *(void *)&long long v146 = v79;
      sub_216305B24(v77, v78, (uint64_t)&v144);
      sub_216300504(&v144);
      (*(void (**)(void, unsigned char *, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), __dst, a1);
      unint64_t v80 = v139;
      for (j = v140; v80 != j; ++v80)
      {
        uint64_t v82 = *v80;
        sub_2162FCDF4(a1, *v80, a3[6]);
        int v83 = (unsigned __int16 *)*(unsigned __int8 *)(v82 + 55);
        int v84 = (char)v83;
        if ((char)v83 < 0) {
          int v83 = *(unsigned __int16 **)(v82 + 40);
        }
        if (v83 == (unsigned __int16 *)a3[5])
        {
          if (v84 >= 0) {
            __int16 v85 = (const void *)(v82 + 32);
          }
          else {
            __int16 v85 = *(const void **)(v82 + 32);
          }
          BOOL v86 = memcmp(v85, (const void *)a3[4], 2 * (void)v83) != 0;
        }
        else
        {
          BOOL v86 = 1;
        }
        (*(void (**)(uint64_t, BOOL))(*(void *)v82 + 512))(v82, v86);
        if (v86) {
          int v87 = 77;
        }
        else {
          int v87 = 83;
        }
        *(_DWORD *)(v82 + 136) = v87;
        uint64_t v132 = &unk_26C6B52D0;
        v133 = sub_2162FD284;
        __int16 v135 = &v132;
        sub_216215760(a2, (void **)v80, 1, 0, (uint64_t)&v132);
        sub_21618B96C(&v132);
      }
    }
    *(void *)__dst = &unk_26C6BE968;
    v129[0] = &v139;
    sub_21618B5DC((void ***)v129);
    sub_216144C28((uint64_t)&__dst[8]);
    if ((*(unsigned char *)(a1 + 50) & 4) == 0)
    {
      uint64_t v88 = *(void *)(a1 + 168);
      if (v88)
      {
        unsigned __int8 v89 = atomic_load((unsigned __int8 *)(v88 + 97));
        if ((v89 & 1) == 0)
        {
          unsigned __int8 v90 = atomic_load((unsigned __int8 *)(v88 + 96));
          if (v90)
          {
            LODWORD(v144) = 0;
            uint64_t v91 = *(void *)(a1 + 168);
            uint64_t v92 = a3[7];
            unint64_t v93 = operator new(0x20uLL);
            *unint64_t v93 = &unk_26C6C91A0;
            v93[1] = a2;
            v93[2] = a3;
            v93[3] = &v144;
            *(void *)&long long v137 = v93;
            sub_21620D248(v91, v92, (uint64_t)__dst, 3);
            sub_216250938(__dst);
          }
        }
      }
    }
    if ((*(unsigned char *)(a1 + 50) & 4) == 0)
    {
      uint64_t v94 = *(void *)(a1 + 176);
      if (v94)
      {
        unsigned __int8 v95 = atomic_load((unsigned __int8 *)(v94 + 97));
        if ((v95 & 1) == 0)
        {
          unsigned __int8 v96 = atomic_load((unsigned __int8 *)(v94 + 96));
          if (v96)
          {
            LODWORD(v144) = 0;
            BOOL v97 = (*(_DWORD *)(a1 + 48) & 2) == 0;
            uint64_t v98 = *(void *)(a1 + 176);
            uint64_t v99 = a3[7];
            uint64_t v100 = operator new(0x28uLL);
            *uint64_t v100 = &unk_26C6C90F0;
            v100[1] = a1;
            v100[2] = a2;
            v100[3] = a3;
            v100[4] = &v144;
            *(void *)&long long v137 = v100;
            if (v97) {
              sub_21620CF04(v98, v99, (uint64_t)__dst);
            }
            else {
              sub_21620D248(v98, v99, (uint64_t)__dst, 3);
            }
            sub_216250938(__dst);
          }
        }
      }
    }
    if ((*(unsigned char *)(a1 + 50) & 4) == 0)
    {
      uint64_t v101 = *(void *)(a1 + 184);
      if (v101)
      {
        unsigned __int8 v102 = atomic_load((unsigned __int8 *)(v101 + 97));
        if ((v102 & 1) == 0)
        {
          unsigned __int8 v103 = atomic_load((unsigned __int8 *)(v101 + 96));
          if (v103)
          {
            LODWORD(v144) = 0;
            uint64_t v104 = *(void *)(a1 + 184);
            uint64_t v105 = a3[7];
            v106 = operator new(0x28uLL);
            void *v106 = &unk_26C6C9098;
            v106[1] = a1;
            v106[2] = a2;
            v106[3] = a3;
            v106[4] = &v144;
            *(void *)&long long v137 = v106;
            sub_21620CF04(v104, v105, (uint64_t)__dst);
            sub_216250938(__dst);
          }
        }
      }
    }
    int v107 = *(_DWORD *)(a1 + 48);
    if ((v107 & 0x40000) == 0)
    {
      uint64_t v108 = *(void *)(a1 + 112);
      if (v108)
      {
        unint64_t v109 = *(void **)(v108 + 8);
        if (v109)
        {
          v129[0] = 0;
          v129[1] = 0;
          uint64_t v130 = 0;
          uint64_t v110 = a3[7];
          *(void *)__dst = &unk_26C6C9040;
          *(void *)&__dst[8] = v129;
          *(void *)&__dst[16] = a3;
          *(void *)&long long v137 = __dst;
          if ((v107 & 2) != 0) {
            sub_216233C5C(v109, v110, (uint64_t)__dst);
          }
          else {
            sub_216233AB4(v109, v110, (uint64_t)__dst);
          }
          sub_216250520(__dst);
          if (v129[0] != v129[1])
          {
            sub_2162FD4D8((uint64_t)v129[0], (long long *)v129[1], 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((char *)v129[1] - (char *)v129[0]) >> 3)), 1);
            v144 = (void **)&unk_26C6BE968;
            unint64_t v111 = 0x2E8BA2E8BA2E8BA3 * (((char *)v129[1] - (char *)v129[0]) >> 3);
            long long v145 = 0u;
            long long v146 = 0u;
            if (v111 >= 2) {
              unint64_t v111 = 2;
            }
            int v147 = 1065353216;
            v149 = 0;
            uint64_t v150 = 0;
            v148 = 0;
            if (v111)
            {
              CFAllocatorRef v112 = v129[0];
              if (*((char *)v129[0] + 23) < 0)
              {
                sub_2161984AC(__dst, *(void **)v129[0], *((void *)v129[0] + 1));
              }
              else
              {
                long long v113 = *(_OWORD *)v129[0];
                *(void *)&__dst[16] = *((void *)v129[0] + 2);
                *(_OWORD *)__dst = v113;
              }
              long long v137 = 0uLL;
              uint64_t v138 = 0;
              sub_216198430(&v137, *((const void **)v112 + 3), *((void *)v112 + 4), (uint64_t)(*((void *)v112 + 4) - *((void *)v112 + 3)) >> 3);
              v139 = 0;
              CFStringRef v140 = 0;
              uint64_t v141 = 0;
              sub_216182F50(&v139, *((const void **)v112 + 6), *((void *)v112 + 7), (uint64_t)(*((void *)v112 + 7) - *((void *)v112 + 6)) >> 1);
              int v114 = *((_DWORD *)v112 + 18);
              __int16 v143 = *((_WORD *)v112 + 38);
              int v142 = v114;
              sub_216197098();
            }
            (*(void (**)(void, void ***, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), &v144, a1);
            CFStringRef v116 = v148;
            for (k = v149; v116 != k; ++v116)
            {
              sub_2162FCDF4(a1, *v116, a3[6]);
              *(void *)__dst = &unk_26C6B52D0;
              *(void *)&__dst[8] = sub_2162FD284;
              *(void *)&long long v137 = __dst;
              sub_216215760(a2, (void **)v116, 1, 0, (uint64_t)__dst);
              sub_21618B96C(__dst);
            }
            v144 = (void **)&unk_26C6BE968;
            v127[0] = &v148;
            sub_21618B5DC((void ***)v127);
            sub_216144C28((uint64_t)&v145);
          }
          v144 = v129;
          sub_21624F488(&v144);
        }
      }
    }
  }
}

void sub_2162FBC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 16))(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_21618A144((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void *sub_2162FC1F0(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C6C8F38;
  v5[1] = a2;
  v5[3] = v5;
  sub_216197A58(a1, a2, a3, (uint64_t)v5, a4, 0);
  return sub_2162FEAF8(v5);
}

void sub_2162FC27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162FEAF8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2162FC290(uint64_t a1, const __CFString *a2)
{
  sub_2161E212C(a2, (UniChar **)v3);
  sub_21630E7A0((unsigned __int16 *)v3[0], ((char *)v3[1] - (char *)v3[0]) >> 1, &__p);
  sub_216197098();
}

void sub_2162FC38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 16))(a16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162FC3F8(uint64_t a1, const char *a2, void *a3)
{
  if (!a3) {
    return 0;
  }
  os_signpost_id_t v4 = *(void **)(*(void *)(a1 + 112) + 104);
  if (!v4) {
    return 0;
  }
  CFStringRef Surface = (const __CFString *)MecabraCandidateGetSurface(a3, a2, (uint64_t)a3);
  CFStringRef v8 = (const __CFString *)MecabraCandidateGetSurface(v4, v6, v7);
  if (CFStringCompare(Surface, v8, 0)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 112);

  return sub_216298230(v10);
}

uint64_t sub_2162FC480(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 112) + 80))(*(void *)(a1 + 112));
  uint64_t result = **(void **)(a1 + 104);
  if (result)
  {
    return MEMORY[0x270F46FD8]();
  }
  return result;
}

void sub_2162FC4F4(void *a1)
{
  uint64_t v2 = a1[7];
  if (!*(unsigned char *)(v2 + 7)) {
    goto LABEL_14;
  }
  if (_os_feature_enabled_impl())
  {
    os_signpost_id_t v3 = sub_2162D1CE4(7u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_2160F5000, v3, OS_LOG_TYPE_DEBUG, "Feature flag detected: supportTypeToSiri", (uint8_t *)__p, 2u);
    }
    return;
  }
  CFURLRef v4 = CFURLCreateWithFileSystemPath(0, *(CFStringRef *)(a1[7] + 136), kCFURLPOSIXPathStyle, 1u);
  __p[0] = v4;
  if (v4)
  {
    CFURLRef v5 = v4;
    sub_216325274(v4, @"ko.rnnlm", @"ko", &v17);
    uint64_t v6 = v17;
    if (v17)
    {
      uint64_t v17 = 0;
      uint64_t v7 = a1[12];
      a1[12] = v6;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        uint64_t v8 = a1[12];
        uint64_t v7 = v17;
      }
      else
      {
        uint64_t v8 = v6;
      }
      *(void *)(*(void *)(a1[19] + 16) + 8) = v8;
      uint64_t v9 = a1[20];
      uint64_t v10 = a1[12];
      *(void *)(v9 + 16) = v10;
      *(void *)(*(void *)(v9 + 24) + 16) = v10;
      *(unsigned char *)(a1[7] + 7) = 0;
      uint64_t v17 = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
    }
    CFRelease(v5);
    if (v6)
    {
      uint64_t v2 = a1[7];
LABEL_14:
      CFStringRef v11 = *(const __CFString **)(v2 + 152);
      if (v11)
      {
        uint64_t v12 = a1[18];
        sub_2161E3AE8(v11, __p);
        sub_216305530(v12, (char *)__p);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        *(void *)(a1[19] + 24) = a1[18];
        *(void *)(a1[20] + 40) = a1[18];
        uint64_t v2 = a1[7];
      }
      CFStringRef v13 = *(const __CFString **)(v2 + 144);
      if (v13)
      {
        uint64_t v14 = a1[17];
        sub_2161E3AE8(v13, __p);
        sub_216305530(v14, (char *)__p);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_2162FC6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_2162FC728(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator new();
  }
}

void sub_2162FC80C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator new();
  }
}

void sub_2162FC8F0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator new();
  }
}

uint64_t sub_2162FC9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x7002000000;
  uint64_t v14 = sub_2162F95D4;
  unint64_t v15 = sub_2162F9644;
  char v16 = &unk_26C6BE968;
  memset(v17, 0, sizeof(v17));
  int v18 = 1065353216;
  memset(v19, 0, sizeof(v19));
  uint64_t v3 = *(void *)(a1 + 168);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  _OWORD v10[2] = sub_2162FCBFC;
  v10[3] = &unk_26426EC58;
  v10[4] = &v11;
  sub_2162E05F0(v3, a2, (uint64_t)v10);
  (*(void (**)(void))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72));
  CFURLRef v4 = (uint64_t *)v12[11];
  CFURLRef v5 = (uint64_t *)v12[12];
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    uint64_t *v4 = 0;
    uint64_t v7 = (void *)sub_2161F4704(v6);
    (*(void (**)(void, void *))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), v7);

    ++v4;
  }
  (*(void (**)(void, uint64_t (*)(void *, char *, uint64_t), uint64_t))(**(void **)(a1 + 72)
                                                                                           + 32))(*(void *)(a1 + 72), sub_2162537D0, 1);
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
  _Block_object_dispose(&v11, 8);
  char v16 = &unk_26C6BE968;
  char v20 = (void **)v19;
  sub_21618B5DC(&v20);
  sub_216144C28((uint64_t)v17);
  return v8;
}

void sub_2162FCBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  sub_21618A144(v6);
  _Unwind_Resume(a1);
}

void sub_2162FCBFC()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  sub_216197098();
}

void sub_2162FCD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2162FCDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  int v6 = *(_DWORD *)(a1 + 48);
  uint64_t v7 = (unsigned __int16 *)(a2 + 32);
  int v8 = *(char *)(a2 + 55);
  if (v8 >= 0) {
    uint64_t v9 = (unsigned __int16 *)(a2 + 32);
  }
  else {
    uint64_t v9 = *(unsigned __int16 **)(a2 + 32);
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 40);
  }
  if (!v10) {
    goto LABEL_27;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 2 * v10;
  uint64_t v13 = 2 * v10;
  uint64_t v14 = v9;
  do
  {
    int v16 = *v14++;
    int v15 = v16;
    BOOL v17 = v16 == 45;
    if (v16 == 45) {
      int v18 = &unk_21638FB40;
    }
    else {
      int v18 = 0;
    }
    BOOL v19 = v15 == 39;
    int v20 = v15 == 39 || v17;
    if (v19) {
      long long v21 = &unk_21638FB3E;
    }
    else {
      long long v21 = v18;
    }
    LODWORD(v22) = v20 ^ 1;
    if (v21 - (unsigned char *)&unk_21638FB3E == -2) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v22;
    }
    v11 += v22;
    v13 -= 2;
  }
  while (v13);
  int v23 = v9;
  while ((*v23 & 0xFFDFu) - 65 > 0x19)
  {
    ++v23;
    v12 -= 2;
    if (!v12) {
      goto LABEL_27;
    }
  }
  int v24 = a3;
  if (v11 != a3)
  {
LABEL_27:
    sub_21630E7A0(v9, v10, &__p);
    if ((v47 & 0x80u) == 0) {
      int v24 = v47;
    }
    else {
      int v24 = v46;
    }
    if ((char)v47 < 0) {
      operator delete(__p);
    }
  }
  int v25 = v24 - v3;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  switch(v27)
  {
    case 'G':
    case 'O':
    case 'V':
      if (*(void *)(a1 + 96))
      {
        if (v25 >= 1)
        {
          LODWORD(v26) = v26 + 3600 * v25;
          if (v10)
          {
            if (v27 == 71)
            {
              uint64_t v28 = 2 * v10;
              uint64_t v29 = v9;
              while ((*v29 & 0xFFDFu) - 65 > 0x19)
              {
                ++v29;
                v28 -= 2;
                if (!v28) {
                  goto LABEL_84;
                }
              }
              LODWORD(v26) = v26 + 2000;
            }
          }
        }
LABEL_84:
        BOOL v42 = sub_21630ED18((uint64_t)v9, v10);
        unsigned int v43 = v26 + 2000;
        goto LABEL_85;
      }
      uint64_t v26 = 15000;
      goto LABEL_88;
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'N':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'W':
      goto LABEL_88;
    case 'L':
      if (*(void *)(a1 + 96)
        && (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2) & 1) != 0 || (v6 & 0x2000) != 0))
      {
        if (v25 >= 1) {
          uint64_t v26 = (v26 + 3000 * v25);
        }
        else {
          uint64_t v26 = (v26 - 3000 * v10);
        }
      }
      else
      {
        uint64_t v26 = 5000;
      }
      goto LABEL_88;
    case 'M':
      if (*(void *)(a1 + 96))
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2)) {
          uint64_t v26 = v26;
        }
        else {
          uint64_t v26 = (v26 - 16500 * v10);
        }
      }
      else
      {
        uint64_t v26 = 11000;
      }
      goto LABEL_88;
    case 'S':
      int v35 = *(char *)(a2 + 55);
      BOOL v36 = v35 < 0;
      BOOL v37 = *(unsigned __int16 **)(a2 + 32);
      if (v35 >= 0) {
        BOOL v37 = v7;
      }
      uint64_t v38 = *(unsigned __int8 *)(a2 + 55);
      if (v36) {
        uint64_t v38 = *(void *)(a2 + 40);
      }
      if (!v38) {
        goto LABEL_71;
      }
      uint64_t v39 = &v37[v38];
      break;
    case 'U':
      int v34 = (int)(*(float *)(a2 + 96) * -4400.0);
      int v31 = 7000;
      goto LABEL_75;
    case 'X':
      int v41 = 3600 * v25;
      if (v25 <= 0) {
        int v41 = 0;
      }
      LODWORD(v26) = v26 + v41;
      BOOL v42 = sub_21630ED18((uint64_t)v9, v10);
      unsigned int v43 = v26 + 16000;
LABEL_85:
      if (v42) {
        uint64_t v26 = v43;
      }
      else {
        uint64_t v26 = v26;
      }
      goto LABEL_88;
    default:
      if (v27 != 65) {
        goto LABEL_88;
      }
      if ((int)v10 <= 2) {
        int v30 = 25000;
      }
      else {
        int v30 = 20000;
      }
      int v31 = (int)(*(float *)(a2 + 96) * -4400.0);
      if ((int)v10 <= 2) {
        int v32 = 5000;
      }
      else {
        int v32 = 3000;
      }
      int v33 = v32 * v25;
      if (v25 <= 0) {
        int v33 = 0;
      }
      int v34 = v33 + v30;
LABEL_75:
      uint64_t v26 = (v34 + v31);
      goto LABEL_88;
  }
  do
  {
    uint64_t v40 = 0;
    while (*(unsigned __int16 *)&a112141718191a1[v40] != *v37)
    {
      v40 += 2;
      if (v40 == 38) {
        goto LABEL_88;
      }
    }
    ++v37;
  }
  while (v37 != v39);
LABEL_71:
  if ((v6 & 0x2000) != 0) {
    uint64_t v26 = (v26 - 4000);
  }
  else {
    uint64_t v26 = (v26 - 9500 * v10);
  }
LABEL_88:
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2) & 1) == 0) {
    *(_DWORD *)(a2 + 136) = 83;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 480))(a2, v26);
}

BOOL sub_2162FD284(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  if (v4 > v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(a1);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    __p = 0;
    sub_21618B3D8(&__p, *(const void **)v6, *(void *)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
    (*(void (**)(uint64_t, void **))(*(void *)a2 + 520))(a2, &__p);
    if (__p)
    {
      uint64_t v9 = __p;
      operator delete(__p);
    }
  }
  return v4 > v5;
}

void sub_2162FD3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2162FD3E0(uint64_t a1, const __CFArray *a2)
{
  uint64_t v4 = *(void *)(a1 + 192);
  if (v4)
  {
    int v5 = *(void **)(v4 + 8);
    if (v5)
    {
      if (sub_21622C350() && *v5) {
        sub_2162354AC(*(void *)(a1 + 192), a2);
      }
    }
  }
  uint64_t v6 = *(void *)(a1 + 200);
  if (v6)
  {
    uint64_t v7 = *(void **)(v6 + 8);
    if (v7)
    {
      if (sub_21622C350() && *v7) {
        sub_2162354AC(*(void *)(a1 + 200), a2);
      }
    }
  }
  BOOL result = sub_21630F358((BOOL)a2);
  *(unsigned char *)(a1 + 209) = result;
  return result;
}

void sub_2162FD478(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_21624E130(a1, cf);
  }
}

void sub_2162FD4D8(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = (long long *)((char *)a2 - 88);
    uint64_t v10 = (char *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (uint64_t)v10;
          uint64_t v11 = (char *)a2 - v10;
          uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * (((char *)a2 - v10) >> 3);
          if (!(!v5 & v4))
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 80))
                {
                  sub_21624F1DC((uint64_t *)a1, v9);
                  int v47 = *(_DWORD *)(a1 + 80);
                  *(_DWORD *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v47;
                }
                break;
              case 3:
                sub_21624EDC8(a1, a1 + 88, (uint64_t)v9);
                break;
              case 4:
                sub_21624F34C(a1, a1 + 88, a1 + 176, (uint64_t)v9);
                break;
              case 5:
                sub_21624F34C(a1, a1 + 88, a1 + 176, a1 + 264);
                if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 344))
                {
                  sub_21624F1DC((uint64_t *)(a1 + 264), v9);
                  int v48 = *(_DWORD *)(a1 + 344);
                  *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v48;
                  if (*(_DWORD *)(a1 + 344) > *(_DWORD *)(a1 + 256))
                  {
                    sub_21624F1DC((uint64_t *)(a1 + 176), (long long *)(a1 + 264));
                    int v49 = *(_DWORD *)(a1 + 256);
                    int v50 = *(_DWORD *)(a1 + 344);
                    *(_DWORD *)(a1 + 256) = v50;
                    *(_DWORD *)(a1 + 344) = v49;
                    if (v50 > *(_DWORD *)(a1 + 168))
                    {
                      sub_21624F1DC((uint64_t *)(a1 + 88), (long long *)(a1 + 176));
                      int v51 = *(_DWORD *)(a1 + 168);
                      int v52 = *(_DWORD *)(a1 + 256);
                      *(_DWORD *)(a1 + 168) = v52;
                      *(_DWORD *)(a1 + 256) = v51;
                      if (v52 > *(_DWORD *)(a1 + 80))
                      {
                        sub_21624F1DC((uint64_t *)a1, (long long *)(a1 + 88));
                        int v53 = *(_DWORD *)(a1 + 80);
                        *(_DWORD *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = *(_DWORD *)(a1 + 168);
                        *(_DWORD *)(a1 + 168) = v53;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 2111)
          {
            if (a4)
            {
              if ((long long *)a1 != a2)
              {
                uint64_t v54 = a1 + 88;
                if ((long long *)(a1 + 88) != a2)
                {
                  uint64_t v55 = 0;
                  uint64_t v56 = a1;
                  do
                  {
                    uint64_t v57 = v54;
                    int v58 = *(_DWORD *)(v56 + 168);
                    if (v58 > *(_DWORD *)(v56 + 80))
                    {
                      long long v59 = *(_OWORD *)v57;
                      uint64_t v113 = *(void *)(v57 + 16);
                      *(_OWORD *)CFAllocatorRef v112 = v59;
                      *(void *)(v57 + 8) = 0;
                      *(void *)(v57 + 16) = 0;
                      *(void *)uint64_t v57 = 0;
                      *(_OWORD *)int v114 = *(_OWORD *)(v56 + 112);
                      uint64_t v115 = *(void *)(v56 + 128);
                      *(void *)(v56 + 112) = 0;
                      *(void *)(v56 + 12sub_21617DB94((const void **)&__p, 0) = 0;
                      *(_OWORD *)__p = *(_OWORD *)(v56 + 136);
                      uint64_t v117 = *(void *)(v56 + 152);
                      *(void *)(v56 + 128) = 0;
                      *(void *)(v56 + 136) = 0;
                      *(void *)(v56 + 144) = 0;
                      *(void *)(v56 + 152) = 0;
                      int v118 = *(_DWORD *)(v56 + 160);
                      __int16 v119 = *(_WORD *)(v56 + 164);
                      uint64_t v60 = v55;
                      int v120 = v58;
                      while (1)
                      {
                        sub_21624F408(a1 + v60 + 88, (long long *)(a1 + v60));
                        if (!v60) {
                          break;
                        }
                        int v61 = *(_DWORD *)(a1 + v60 - 8);
                        v60 -= 88;
                        if (v120 <= v61)
                        {
                          uint64_t v62 = a1 + v60 + 88;
                          goto LABEL_88;
                        }
                      }
                      uint64_t v62 = a1;
LABEL_88:
                      sub_21624F408(v62, (long long *)v112);
                      if (__p[0])
                      {
                        __p[1] = __p[0];
                        operator delete(__p[0]);
                      }
                      if (v114[0])
                      {
                        v114[1] = v114[0];
                        operator delete(v114[0]);
                      }
                      if (SHIBYTE(v113) < 0) {
                        operator delete(v112[0]);
                      }
                    }
                    uint64_t v54 = v57 + 88;
                    v55 += 88;
                    uint64_t v56 = v57;
                  }
                  while ((long long *)(v57 + 88) != a2);
                }
              }
            }
            else if ((long long *)a1 != a2)
            {
              uint64_t v96 = a1 + 88;
              if ((long long *)(a1 + 88) != a2)
              {
                do
                {
                  uint64_t v97 = v96;
                  int v98 = *(_DWORD *)(a1 + 168);
                  if (v98 > *(_DWORD *)(a1 + 80))
                  {
                    long long v99 = *(_OWORD *)v97;
                    uint64_t v113 = *(void *)(v97 + 16);
                    *(_OWORD *)CFAllocatorRef v112 = v99;
                    *(void *)(v97 + 8) = 0;
                    *(void *)(v97 + 16) = 0;
                    *(void *)uint64_t v97 = 0;
                    *(_OWORD *)int v114 = *(_OWORD *)(a1 + 112);
                    uint64_t v115 = *(void *)(a1 + 128);
                    *(void *)(a1 + 112) = 0;
                    *(void *)(a1 + 12sub_21617DB94((const void **)&__p, 0) = 0;
                    *(_OWORD *)__p = *(_OWORD *)(a1 + 136);
                    uint64_t v117 = *(void *)(a1 + 152);
                    *(void *)(a1 + 128) = 0;
                    *(void *)(a1 + 136) = 0;
                    *(void *)(a1 + 144) = 0;
                    *(void *)(a1 + 152) = 0;
                    int v118 = *(_DWORD *)(a1 + 160);
                    __int16 v119 = *(_WORD *)(a1 + 164);
                    int v120 = v98;
                    do
                    {
                      sub_21624F408(a1 + 88, (long long *)a1);
                      uint64_t v100 = a1 - 88;
                      int v101 = *(_DWORD *)(a1 - 8);
                      a1 -= 88;
                    }
                    while (v120 > v101);
                    sub_21624F408(v100 + 88, (long long *)v112);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v114[0])
                    {
                      v114[1] = v114[0];
                      operator delete(v114[0]);
                    }
                    if (SHIBYTE(v113) < 0) {
                      operator delete(v112[0]);
                    }
                  }
                  uint64_t v96 = v97 + 88;
                  a1 = v97;
                }
                while ((long long *)(v97 + 88) != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)a1 != a2)
            {
              int64_t v63 = (unint64_t)(v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  uint64_t v67 = a1 + 88 * v66;
                  if (2 * v65 + 2 < v12)
                  {
                    int v68 = *(_DWORD *)(a1 + 88 * v66 + 80);
                    int v69 = *(_DWORD *)(v67 + 168);
                    v67 += 88 * (v68 > v69);
                    if (v68 > v69) {
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  int v70 = *(_DWORD *)(a1 + 88 * v65 + 80);
                  if (*(_DWORD *)(v67 + 80) <= v70)
                  {
                    uint64_t v71 = a1 + 88 * v65;
                    long long v72 = *(_OWORD *)v71;
                    uint64_t v113 = *(void *)(v71 + 16);
                    *(_OWORD *)CFAllocatorRef v112 = v72;
                    *(void *)(v71 + 8) = 0;
                    *(void *)(v71 + 16) = 0;
                    *(void *)uint64_t v71 = 0;
                    *(_OWORD *)int v114 = *(_OWORD *)(v71 + 24);
                    uint64_t v115 = *(void *)(v71 + 40);
                    *(void *)(v71 + 24) = 0;
                    *(void *)(v71 + 32) = 0;
                    *(void *)(v71 + 4sub_21617DB94((const void **)&__p, 0) = 0;
                    *(_OWORD *)__p = *(_OWORD *)(v71 + 48);
                    uint64_t v117 = *(void *)(v71 + 64);
                    *(void *)(v71 + 48) = 0;
                    *(void *)(v71 + 56) = 0;
                    *(void *)(v71 + 64) = 0;
                    int v73 = *(_DWORD *)(v71 + 72);
                    __int16 v119 = *(_WORD *)(v71 + 76);
                    int v118 = v73;
                    int v120 = v70;
                    do
                    {
                      uint64_t v74 = v67;
                      sub_21624F408(v71, (long long *)v67);
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v75 = (2 * v66) | 1;
                      uint64_t v67 = a1 + 88 * v75;
                      if (2 * v66 + 2 < v12)
                      {
                        int v76 = *(_DWORD *)(a1 + 88 * v75 + 80);
                        int v77 = *(_DWORD *)(v67 + 168);
                        v67 += 88 * (v76 > v77);
                        if (v76 > v77) {
                          uint64_t v75 = 2 * v66 + 2;
                        }
                      }
                      uint64_t v71 = v74;
                      uint64_t v66 = v75;
                    }
                    while (*(_DWORD *)(v67 + 80) <= v70);
                    sub_21624F408(v74, (long long *)v112);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v114[0])
                    {
                      v114[1] = v114[0];
                      operator delete(v114[0]);
                    }
                    if (SHIBYTE(v113) < 0) {
                      operator delete(v112[0]);
                    }
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              int64_t v78 = v11 / 0x58uLL;
              do
              {
                uint64_t v79 = 0;
                long long v80 = *(_OWORD *)a1;
                uint64_t v104 = *(void *)(a1 + 16);
                *(_OWORD *)unsigned __int8 v103 = v80;
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                *(_OWORD *)uint64_t v105 = *(_OWORD *)(a1 + 24);
                uint64_t v106 = *(void *)(a1 + 40);
                *(void *)(a1 + 24) = 0;
                *(void *)(a1 + 32) = 0;
                *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0;
                *(_OWORD *)int v107 = *(_OWORD *)(a1 + 48);
                uint64_t v108 = *(void *)(a1 + 64);
                *(void *)(a1 + 48) = 0;
                *(void *)(a1 + 56) = 0;
                *(void *)(a1 + 64) = 0;
                int v81 = *(_DWORD *)(a1 + 72);
                __int16 v110 = *(_WORD *)(a1 + 76);
                int v109 = v81;
                int v111 = *(_DWORD *)(a1 + 80);
                uint64_t v82 = a1;
                do
                {
                  uint64_t v83 = v79 + 1;
                  uint64_t v84 = v82 + 88 * (v79 + 1);
                  uint64_t v85 = (2 * v79) | 1;
                  uint64_t v86 = 2 * v79 + 2;
                  if (v86 < v78)
                  {
                    int v87 = *(_DWORD *)(v82 + 88 * v83 + 80);
                    int v88 = *(_DWORD *)(v84 + 168);
                    v84 += 88 * (v87 > v88);
                    if (v87 > v88) {
                      uint64_t v85 = v86;
                    }
                  }
                  sub_21624F408(v82, (long long *)v84);
                  uint64_t v82 = v84;
                  uint64_t v79 = v85;
                }
                while (v85 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                a2 = (long long *)((char *)a2 - 88);
                if ((long long *)v84 == a2)
                {
                  sub_21624F408(v84, (long long *)v103);
                }
                else
                {
                  sub_21624F408(v84, a2);
                  sub_21624F408((uint64_t)a2, (long long *)v103);
                  uint64_t v89 = v84 - a1 + 88;
                  if (v89 >= 89)
                  {
                    unint64_t v90 = (v89 / 0x58uLL - 2) >> 1;
                    int v91 = *(_DWORD *)(v84 + 80);
                    if (*(_DWORD *)(a1 + 88 * v90 + 80) > v91)
                    {
                      long long v92 = *(_OWORD *)v84;
                      uint64_t v113 = *(void *)(v84 + 16);
                      *(_OWORD *)CFAllocatorRef v112 = v92;
                      *(void *)(v84 + 8) = 0;
                      *(void *)(v84 + 16) = 0;
                      *(void *)uint64_t v84 = 0;
                      *(_OWORD *)int v114 = *(_OWORD *)(v84 + 24);
                      uint64_t v115 = *(void *)(v84 + 40);
                      *(void *)(v84 + 24) = 0;
                      *(void *)(v84 + 32) = 0;
                      *(void *)(v84 + 4sub_21617DB94((const void **)&__p, 0) = 0;
                      *(_OWORD *)__p = *(_OWORD *)(v84 + 48);
                      uint64_t v117 = *(void *)(v84 + 64);
                      *(void *)(v84 + 48) = 0;
                      *(void *)(v84 + 56) = 0;
                      *(void *)(v84 + 64) = 0;
                      int v93 = *(_DWORD *)(v84 + 72);
                      __int16 v119 = *(_WORD *)(v84 + 76);
                      int v118 = v93;
                      int v120 = v91;
                      do
                      {
                        uint64_t v94 = v84;
                        uint64_t v84 = a1 + 88 * v90;
                        sub_21624F408(v94, (long long *)v84);
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                      }
                      while (*(_DWORD *)(a1 + 88 * v90 + 80) > v91);
                      sub_21624F408(v84, (long long *)v112);
                      if (__p[0])
                      {
                        __p[1] = __p[0];
                        operator delete(__p[0]);
                      }
                      if (v114[0])
                      {
                        v114[1] = v114[0];
                        operator delete(v114[0]);
                      }
                      if (SHIBYTE(v113) < 0) {
                        operator delete(v112[0]);
                      }
                    }
                  }
                }
                if (v107[0])
                {
                  v107[1] = v107[0];
                  operator delete(v107[0]);
                }
                if (v105[0])
                {
                  v105[1] = v105[0];
                  operator delete(v105[0]);
                }
                if (SHIBYTE(v104) < 0) {
                  operator delete(v103[0]);
                }
              }
              while (v78-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = (long long *)(a1 + 88 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 < 0x2C01)
          {
            sub_21624EDC8((uint64_t)v14, a1, (uint64_t)v9);
          }
          else
          {
            sub_21624EDC8(a1, (uint64_t)v14, (uint64_t)v9);
            uint64_t v15 = 88 * v13;
            sub_21624EDC8(a1 + 88, a1 + v15 - 88, (uint64_t)(a2 - 11));
            sub_21624EDC8(a1 + 176, a1 + 88 + v15, (uint64_t)a2 - 264);
            sub_21624EDC8(a1 + v15 - 88, (uint64_t)v14, a1 + 88 + v15);
            sub_21624F1DC((uint64_t *)a1, v14);
            int v16 = *(_DWORD *)(a1 + 80);
            *(_DWORD *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = *(_DWORD *)(a1 + v15 + 80);
            *(_DWORD *)(a1 + v15 + 8sub_21617DB94((const void **)&__p, 0) = v16;
          }
          --a3;
          if (a4) {
            break;
          }
          int v17 = *(_DWORD *)(a1 + 80);
          if (*(_DWORD *)(a1 - 8) > v17) {
            goto LABEL_12;
          }
          long long v35 = *(_OWORD *)a1;
          uint64_t v113 = *(void *)(a1 + 16);
          *(_OWORD *)CFAllocatorRef v112 = v35;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          *(_OWORD *)int v114 = *(_OWORD *)(a1 + 24);
          uint64_t v115 = *(void *)(a1 + 40);
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0;
          *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
          uint64_t v117 = *(void *)(a1 + 64);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          *(void *)(a1 + 64) = 0;
          int v36 = *(_DWORD *)(a1 + 72);
          __int16 v119 = *(_WORD *)(a1 + 76);
          int v118 = v36;
          int v120 = v17;
          if (v17 <= *((_DWORD *)a2 - 2))
          {
            unint64_t v39 = a1 + 88;
            do
            {
              uint64_t v10 = (char *)v39;
              if (v39 >= (unint64_t)a2) {
                break;
              }
              int v40 = *(_DWORD *)(v39 + 80);
              v39 += 88;
            }
            while (v17 <= v40);
          }
          else
          {
            uint64_t v37 = a1;
            do
            {
              uint64_t v10 = (char *)(v37 + 88);
              int v38 = *(_DWORD *)(v37 + 168);
              v37 += 88;
            }
            while (v17 <= v38);
          }
          int v41 = a2;
          if (v10 < (char *)a2)
          {
            BOOL v42 = a2;
            do
            {
              int v41 = (long long *)((char *)v42 - 88);
              int v43 = *((_DWORD *)v42 - 2);
              BOOL v42 = (long long *)((char *)v42 - 88);
            }
            while (v17 > v43);
          }
          while (v10 < (char *)v41)
          {
            sub_21624F1DC((uint64_t *)v10, v41);
            int v44 = *((_DWORD *)v10 + 20);
            *((_DWORD *)v10 + 2sub_21617DB94((const void **)&__p, 0) = *((_DWORD *)v41 + 20);
            *((_DWORD *)v41 + 2sub_21617DB94((const void **)&__p, 0) = v44;
            do
            {
              int v45 = *((_DWORD *)v10 + 42);
              v10 += 88;
            }
            while (v120 <= v45);
            do
            {
              int v46 = *((_DWORD *)v41 - 2);
              int v41 = (long long *)((char *)v41 - 88);
            }
            while (v120 > v46);
          }
          if (v10 - 88 != (char *)a1) {
            sub_21624F408(a1, (long long *)(v10 - 88));
          }
          sub_21624F408((uint64_t)(v10 - 88), (long long *)v112);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v114[0])
          {
            v114[1] = v114[0];
            operator delete(v114[0]);
          }
          if (SHIBYTE(v113) < 0) {
            operator delete(v112[0]);
          }
          a4 = 0;
        }
        int v17 = *(_DWORD *)(a1 + 80);
LABEL_12:
        uint64_t v18 = 0;
        long long v19 = *(_OWORD *)a1;
        uint64_t v113 = *(void *)(a1 + 16);
        *(_OWORD *)CFAllocatorRef v112 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        *(_OWORD *)int v114 = *(_OWORD *)(a1 + 24);
        uint64_t v115 = *(void *)(a1 + 40);
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0;
        *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
        uint64_t v117 = *(void *)(a1 + 64);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        int v20 = *(_DWORD *)(a1 + 72);
        __int16 v119 = *(_WORD *)(a1 + 76);
        int v118 = v20;
        int v120 = v17;
        do
        {
          int v21 = *(_DWORD *)(a1 + v18 + 168);
          v18 += 88;
        }
        while (v21 > v17);
        unint64_t v22 = a1 + v18;
        int v23 = a2;
        if (v18 == 88)
        {
          uint64_t v26 = a2;
          while (v22 < (unint64_t)v26)
          {
            int v24 = (long long *)((char *)v26 - 88);
            int v27 = *((_DWORD *)v26 - 2);
            uint64_t v26 = (long long *)((char *)v26 - 88);
            if (v27 > v17) {
              goto LABEL_22;
            }
          }
          int v24 = v26;
        }
        else
        {
          do
          {
            int v24 = (long long *)((char *)v23 - 88);
            int v25 = *((_DWORD *)v23 - 2);
            int v23 = (long long *)((char *)v23 - 88);
          }
          while (v25 <= v17);
        }
LABEL_22:
        if (v22 >= (unint64_t)v24)
        {
          int v33 = (long long *)(v22 - 88);
        }
        else
        {
          unint64_t v28 = v22;
          uint64_t v29 = v24;
          do
          {
            sub_21624F1DC((uint64_t *)v28, v29);
            int v30 = *(_DWORD *)(v28 + 80);
            *(_DWORD *)(v28 + 8sub_21617DB94((const void **)&__p, 0) = *((_DWORD *)v29 + 20);
            *((_DWORD *)v29 + 2sub_21617DB94((const void **)&__p, 0) = v30;
            do
            {
              int v31 = *(_DWORD *)(v28 + 168);
              v28 += 88;
            }
            while (v31 > v120);
            do
            {
              int v32 = *((_DWORD *)v29 - 2);
              uint64_t v29 = (long long *)((char *)v29 - 88);
            }
            while (v32 <= v120);
          }
          while (v28 < (unint64_t)v29);
          int v33 = (long long *)(v28 - 88);
        }
        if (v33 != (long long *)a1) {
          sub_21624F408(a1, v33);
        }
        sub_21624F408((uint64_t)v33, (long long *)v112);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v114[0])
        {
          v114[1] = v114[0];
          operator delete(v114[0]);
        }
        if (SHIBYTE(v113) < 0) {
          operator delete(v112[0]);
        }
        if (v22 >= (unint64_t)v24) {
          break;
        }
LABEL_41:
        sub_2162FD4D8(a1, v33, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = (char *)v33 + 88;
      }
      BOOL v34 = sub_2162FE138(a1, (uint64_t)v33);
      uint64_t v10 = (char *)v33 + 88;
      if (sub_2162FE138((uint64_t)v33 + 88, (uint64_t)a2)) {
        break;
      }
      if (!v34) {
        goto LABEL_41;
      }
    }
    a2 = v33;
    if (!v34) {
      continue;
    }
    break;
  }
}

BOOL sub_2162FE138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x2E8BA2E8BA2E8BA3 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 80))
      {
        sub_21624F1DC((uint64_t *)a1, (long long *)(a2 - 88));
        int v6 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
        return 1;
      }
      return result;
    case 3:
      sub_21624EDC8(a1, a1 + 88, a2 - 88);
      return 1;
    case 4:
      sub_21624F34C(a1, a1 + 88, a1 + 176, a2 - 88);
      return 1;
    case 5:
      sub_21624F34C(a1, a1 + 88, a1 + 176, a1 + 264);
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 344))
      {
        sub_21624F1DC((uint64_t *)(a1 + 264), (long long *)(a2 - 88));
        int v16 = *(_DWORD *)(a1 + 344);
        *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v16;
        if (*(_DWORD *)(a1 + 344) > *(_DWORD *)(a1 + 256))
        {
          sub_21624F1DC((uint64_t *)(a1 + 176), (long long *)(a1 + 264));
          int v17 = *(_DWORD *)(a1 + 256);
          int v18 = *(_DWORD *)(a1 + 344);
          *(_DWORD *)(a1 + 256) = v18;
          *(_DWORD *)(a1 + 344) = v17;
          if (v18 > *(_DWORD *)(a1 + 168))
          {
            sub_21624F1DC((uint64_t *)(a1 + 88), (long long *)(a1 + 176));
            int v19 = *(_DWORD *)(a1 + 168);
            int v20 = *(_DWORD *)(a1 + 256);
            *(_DWORD *)(a1 + 168) = v20;
            *(_DWORD *)(a1 + 256) = v19;
            if (v20 > *(_DWORD *)(a1 + 80))
            {
              sub_21624F1DC((uint64_t *)a1, (long long *)(a1 + 88));
              int v21 = *(_DWORD *)(a1 + 80);
              *(_DWORD *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = *(_DWORD *)(a1 + 168);
              *(_DWORD *)(a1 + 168) = v21;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 176;
      sub_21624EDC8(a1, a1 + 88, a1 + 176);
      uint64_t v8 = a1 + 264;
      if (a1 + 264 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    int v11 = *(_DWORD *)(v8 + 80);
    if (v11 > *(_DWORD *)(v7 + 80))
    {
      *(_OWORD *)unint64_t v22 = *(_OWORD *)v8;
      uint64_t v23 = *(void *)(v8 + 16);
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(_OWORD *)int v24 = *(_OWORD *)(v8 + 24);
      uint64_t v25 = *(void *)(v8 + 40);
      *(void *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 4sub_21617DB94((const void **)&__p, 0) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v8 + 48);
      uint64_t v27 = *(void *)(v8 + 64);
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      *(void *)(v8 + 48) = 0;
      int v12 = *(_DWORD *)(v8 + 72);
      __int16 v29 = *(_WORD *)(v8 + 76);
      int v28 = v12;
      uint64_t v13 = v9;
      int v30 = v11;
      while (1)
      {
        sub_21624F408(a1 + v13 + 264, (long long *)(a1 + v13 + 176));
        if (v13 == -176) {
          break;
        }
        int v14 = *(_DWORD *)(a1 + v13 + 168);
        v13 -= 88;
        if (v30 <= v14)
        {
          uint64_t v15 = a1 + v13 + 264;
          goto LABEL_13;
        }
      }
      uint64_t v15 = a1;
LABEL_13:
      sub_21624F408(v15, (long long *)v22);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(v22[0]);
      }
      if (++v10 == 8) {
        return v8 + 88 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 88;
    v8 += 88;
    if (v8 == a2) {
      return 1;
    }
  }
}

void sub_2162FE450()
{
}

void *sub_2162FE464(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C72B0;
  result[1] = v3;
  return result;
}

uint64_t sub_2162FE4AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C72B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_2162FE4D8(uint64_t a1, unsigned __int16 *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t sub_2162FE4E4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC630)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162FE524()
{
  return &unk_26C6BC630;
}

void sub_2162FE534()
{
}

void *sub_2162FE548(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C8F38;
  result[1] = v3;
  return result;
}

uint64_t sub_2162FE590(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C8F38;
  a2[1] = v2;
  return result;
}

void sub_2162FE5BC(uint64_t a1, uint64_t *a2, const UniChar **a3, CFIndex *a4, double *a5, uint64_t *a6)
{
  uint64_t v7 = *a2;
  uint64_t v8 = (UniChar *)*a3;
  unint64_t v9 = *a4;
  double v10 = *a5;
  uint64_t v11 = *a6;
  CFStringRef v12 = CFStringCreateWithCharacters(0, *a3, *a4);
  LXLatticeAddNode();
  sub_2162FE6D0(*(void *)(*(void *)(a1 + 8) + 56), v7, v8, v9, v11, v10);
  if (v12) {
    CFRelease(v12);
  }
}

void sub_2162FE668(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2162FE684(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCBB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162FE6C4()
{
  return &unk_26C6BCBB0;
}

uint64_t sub_2162FE6D0(uint64_t a1, uint64_t a2, void *__src, unint64_t a4, uint64_t a5, double a6)
{
  unint64_t v16 = a4;
  int v17 = __src;
  double v15 = a6;
  uint64_t v14 = a5;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 + 24 * a2;
  unint64_t v9 = *(void *)(v7 + 8);
  unint64_t v8 = *(void *)(v7 + 16);
  double v10 = (void *)(v7 + 8);
  if (v9 >= v8)
  {
    uint64_t result = sub_2162FE77C((uint64_t *)(v6 + 24 * a2), &v17, &v16, (uint64_t *)&v15, &v14);
  }
  else
  {
    sub_21617FAAC((void *)v9, __src, a4);
    *(double *)(v9 + 24) = a6;
    *(void *)(v9 + 32) = a5;
    uint64_t result = v9 + 40;
    *double v10 = v9 + 40;
  }
  *double v10 = result;
  return result;
}

void sub_2162FE774(_Unwind_Exception *a1)
{
  *uint64_t v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_2162FE77C(uint64_t *a1, void **a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x666666666666666) {
    sub_21610CB04();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v6) >> 3);
  if (2 * v14 > v8) {
    unint64_t v8 = 2 * v14;
  }
  if (v14 >= 0x333333333333333) {
    unint64_t v15 = 0x666666666666666;
  }
  else {
    unint64_t v15 = v8;
  }
  uint64_t v26 = a1 + 2;
  if (v15) {
    unint64_t v16 = (char *)sub_21618B4A8(v13, v15);
  }
  else {
    unint64_t v16 = 0;
  }
  unint64_t v22 = v16;
  uint64_t v23 = &v16[40 * v7];
  int v24 = v23;
  uint64_t v25 = &v16[40 * v15];
  uint64_t v17 = *a4;
  uint64_t v18 = *a5;
  sub_21617FAAC(v23, *a2, *a3);
  int v19 = v23;
  *((void *)v23 + 3) = v17;
  *((void *)v19 + 4) = v18;
  v24 += 40;
  sub_2162FE8C4(a1, &v22);
  uint64_t v20 = a1[1];
  sub_2162FEA68((uint64_t)&v22);
  return v20;
}

void sub_2162FE8B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162FEA68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2162FE8C4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2162FE93C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2162FE93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v7 - 4sub_21617DB94((const void **)&__p, 0) = v8;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 4sub_21617DB94((const void **)&__p, 0) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_2162FE9E8((uint64_t)v11);
  return v9;
}

uint64_t sub_2162FE9E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2162FEA20(a1);
  }
  return a1;
}

void sub_2162FEA20(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 40;
  }
}

uint64_t sub_2162FEA68(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2162FEAA0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_2162FEAF8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2162FEB80()
{
}

__n128 sub_2162FEB94(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_26C6C8F90;
  *(_OWORD *)(v2 + 4sub_21617DB94((const void **)&__p, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2162FEC08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8F90;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 4sub_21617DB94((const void **)&__p, 0) = result;
  return result;
}

void sub_2162FEC60(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  v10[0] = 0;
  sub_216273EA0(v10, *a2);
  uint64_t v3 = *(const void **)(a1 + 48);
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x4002000000;
  unint64_t v39 = sub_2162FF4DC;
  int v40 = sub_2162FF4F8;
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x4002000000;
  v32[3] = sub_2162FF50C;
  v32[4] = sub_2162FF530;
  __p = 0;
  uint64_t v35 = 0;
  BOOL v34 = 0;
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2000000000;
  char v31 = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2000000000;
  char v29 = 0;
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2000000000;
  char v27 = 1;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2000000000;
  char v25 = 1;
  uint64_t v20 = 0;
  int v21 = &v20;
  uint64_t v22 = 0x2000000000;
  char v23 = 0;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  char v19 = 0;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  int v17 = 86;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  __int16 v15 = 0;
  v10[3] = (CFTypeRef)MEMORY[0x263EF8330];
  v10[4] = (CFTypeRef)1174405120;
  void v10[5] = sub_2162FF548;
  v10[6] = &unk_26C6F6368;
  long long v4 = *(const void **)(a1 + 8);
  v10[7] = v14;
  v10[8] = &v20;
  v10[17] = v3;
  v10[18] = v4;
  v10[9] = v32;
  CFTypeRef cf = 0;
  sub_216273EA0(&cf, v10[0]);
  long long v5 = *(_OWORD *)(a1 + 32);
  int8x16_t v12 = vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL);
  long long v13 = v5;
  v10[10] = v16;
  v10[11] = v18;
  v10[12] = &v36;
  v10[13] = v30;
  v10[14] = v28;
  v10[15] = v26;
  v10[16] = v24;
  LXAnalyzerCandidateEnumerateMorphemeLexiconEntriesAndLengths();
  if (!*((unsigned char *)v21 + 24))
  {
    uint64_t v6 = *((unsigned __int8 *)v37 + 63);
    int v7 = (char)v6;
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = v37[6];
    }
    uint64_t v8 = *(void *)(a1 + 56);
    if (v6 == *(void *)(v8 + 40))
    {
      if (v7 >= 0) {
        uint64_t v9 = v37 + 5;
      }
      else {
        uint64_t v9 = (const void *)v37[5];
      }
      memcmp(v9, *(const void **)(v8 + 32), 2 * v6);
    }
    sub_216273A68();
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v18, 8);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v26, 8);
  _Block_object_dispose(v28, 8);
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v32, 8);
  if (__p)
  {
    BOOL v34 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v36, 8);
  if (SHIBYTE(v43) < 0) {
    operator delete(v41);
  }
  if (v10[0]) {
    CFRelease(v10[0]);
  }
}

void sub_2162FF324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,CFTypeRef cf,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 16))(a13);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  uint64_t v74 = __p;
  if (__p)
  {
    STACK[0x200] = (unint64_t)__p;
    operator delete(v74);
  }
  _Block_object_dispose((const void *)(v72 - 208), 8);
  if (*(char *)(v72 - 145) < 0) {
    operator delete(*(void **)(v72 - 168));
  }
  if (a11) {
    CFRelease(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2162FF490(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCBC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162FF4D0()
{
  return &unk_26C6BCBC0;
}

__n128 sub_2162FF4DC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 4sub_21617DB94((const void **)&__p, 0) = 0;
  return result;
}

void sub_2162FF4F8(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

__n128 sub_2162FF50C(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2162FF530(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_2162FF548()
{
  CFStringRef v0 = (const __CFString *)LXEntryCopyString();
  sub_2161E236C(v0);
}

void sub_2162FFB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,const void *a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_2161868BC(&a26, 0);
  _Unwind_Resume(a1);
}

void sub_2162FFBF4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 128) = 0;
  sub_216273EA0((const void **)(a1 + 128), *(CFTypeRef *)(a2 + 128));
}

void sub_2162FFC00(uint64_t a1)
{
}

void *sub_2162FFC0C(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2162FFC94()
{
}

void *sub_2162FFCA8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6B52D0;
  result[1] = v3;
  return result;
}

uint64_t sub_2162FFCF0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6B52D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_2162FFD1C(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t sub_2162FFD2C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5020)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2162FFD6C()
{
  return &unk_26C6B5020;
}

void sub_2162FFD7C()
{
}

__n128 sub_2162FFD90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6C8EE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2162FFDE4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8EE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_2162FFE1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)*a2;
  unint64_t v3 = a2[1];
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(uint64_t **)(a1 + 24);
  BOOL result = sub_21630E45C(*v5, v5[1], *a2, v3);
  if (result && v3 > v5[6]) {
    sub_216197540(*(void *)(v4 + 152), v2, v3);
  }
  return result;
}

void sub_216300078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 16))(a9);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216300110(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCBA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216300150()
{
  return &unk_26C6BCBA0;
}

void *sub_21630015C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2163001E4()
{
}

__n128 sub_2163001F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C8FE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21630024C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8FE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216300284(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (!*(_WORD *)(a2 + 32))
  {
    uint64_t v5 = result;
    float v6 = *a4;
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7 == *(void *)(a2 + 24))
    {
      __n128 result = memcmp(*(const void **)a2, *(const void **)(a2 + 16), 2 * v7);
      BOOL v8 = result != 0;
    }
    else
    {
      BOOL v8 = 1;
    }
    if (v6 >= 0.0 || !v8)
    {
      uint64_t v9 = *(void *)(v5 + 24);
      if (v7 == *(void *)(v9 + 40)) {
        memcmp(*(const void **)a2, *(const void **)(v9 + 32), 2 * v7);
      }
      sub_216197098();
    }
  }
  return result;
}

void sub_21630043C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2163004B8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCBD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163004F8()
{
  return &unk_26C6BCBD0;
}

void *sub_216300504(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21630058C()
{
}

__n128 sub_2163005A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C9148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2163005F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C9148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21630062C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v4 = *(void *)(v2 + 40) - 1;
  if (!v3) {
    uint64_t v4 = 0;
  }
  if (*(void *)(a2 + 24) == v4) {
    memcmp(*(const void **)(a2 + 16), (const void *)(v3 + 2), 2 * v4);
  }
  sub_216197098();
}

void sub_216300838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2163008BC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163008FC()
{
  return &unk_26C6BCC10;
}

void sub_21630090C()
{
}

__n128 sub_216300920(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6C91A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216300974(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C91A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2163009AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3 == *(void *)(v2 + 40)) {
    memcmp(*(const void **)(a2 + 16), *(const void **)(v2 + 32), 2 * v3);
  }
  sub_216197098();
}

void sub_216300BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216300C30(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216300C70()
{
  return &unk_26C6BCC20;
}

void sub_216300C80()
{
}

__n128 sub_216300C94(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6C90F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_216300CE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C90F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216300D20(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (**(int **)(a1 + 32) >= 2) {
    *a4 = 1;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 == *(void *)(v4 + 40)) {
    memcmp(*(const void **)(a2 + 16), *(const void **)(v4 + 32), 2 * v5);
  }
  sub_216197098();
}

void sub_216300F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216300FD0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCC00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216301010()
{
  return &unk_26C6BCC00;
}

void sub_216301020()
{
}

__n128 sub_216301034(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6C9098;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_216301088(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C9098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2163010C0(uint64_t result, uint64_t a2, float *a3, unsigned char *a4)
{
  float v4 = *a3;
  if (**(int **)(result + 32) >= 2) {
    *a4 = 1;
  }
  if (v4 >= 0.0)
  {
    uint64_t v5 = *(void *)(result + 24);
    uint64_t v6 = *(void *)(a2 + 24);
    if (v6 == *(void *)(v5 + 40)) {
      memcmp(*(const void **)(a2 + 16), *(const void **)(v5 + 32), 2 * v6);
    }
    sub_216197098();
  }
  return result;
}

void sub_2163012F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21618B96C((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  }
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216301378(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCBF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163013B8()
{
  return &unk_26C6BCBF0;
}

void sub_2163013C8()
{
}

__n128 sub_2163013DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6C9040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216301428(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C9040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216301458(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v24 = *a4;
  uint64_t v6 = (__int16 **)sub_216222F20(a3, off_26797C588);
  sub_2162500BC(&v22, *v6, v6[1], v6[1] - *v6);
  uint64_t v7 = HIBYTE(v23);
  if (v23 < 0) {
    uint64_t v7 = *((void *)&v22 + 1);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (v7 == *(void *)(v8 + 40))
  {
    if (v23 >= 0) {
      uint64_t v9 = &v22;
    }
    else {
      uint64_t v9 = (long long *)v22;
    }
    __int16 v10 = memcmp(v9, *(const void **)(v8 + 32), 2 * v7) != 0;
  }
  else
  {
    __int16 v10 = 1;
  }
  int v11 = *(_DWORD *)(a2 + 4);
  uint64_t v16 = v23;
  *(_OWORD *)__int16 v15 = v22;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  *(_OWORD *)int v17 = 0u;
  *(_OWORD *)__p = 0u;
  long long v19 = 0u;
  int v20 = v11;
  __int16 v21 = v10;
  int8x16_t v12 = *(uint64_t **)(a1 + 8);
  unint64_t v13 = v12[1];
  if (v13 >= v12[2])
  {
    uint64_t v14 = sub_21625015C(v12, (long long *)v15, &v24);
  }
  else
  {
    sub_216250284((void *)v12[1], (long long *)v15, &v24);
    uint64_t v14 = v13 + 88;
    v12[1] = v13 + 88;
  }
  v12[1] = v14;
  if (__p[1])
  {
    *(void **)&long long v19 = __p[1];
    operator delete(__p[1]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
}

void sub_2163015C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v19 - 41) < 0) {
    operator delete(*(void **)(v19 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21630161C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCBE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21630165C()
{
  return &unk_26C6BCBE0;
}

__n128 sub_216301668(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_21630168C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 sub_2163016A4(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_2163016C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 sub_2163016E0(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_216301704(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *sub_21630171C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 12sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)(a1 + 128) = 0;
  uint64_t v2 = (void *)(a1 + 120);
  v2[2] = 0;
  return sub_216182F50(v2, *(const void **)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 1);
}

void sub_216301738(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
}

uint64_t sub_216301750(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)a1 = &unk_26C6BE7D0;
  uint64_t v12 = sub_2162A7544(a1, (uint64_t *)&off_26C6BCEC8);
  *(_DWORD *)(v12 + 2sub_21617DB94((const void **)&__p, 0) = a2;
  *(unsigned char *)(v12 + 24) = 0;
  *(double *)(v12 + 32) = a6;
  *(void *)uint64_t v12 = off_26C6C5A60;
  *(void *)(v12 + 4sub_21617DB94((const void **)&__p, 0) = &off_26C6C5CC8;
  *(_DWORD *)(v12 + 48) = 0;
  unsigned int v13 = *(_DWORD *)(a4 + 24);
  *(void *)(v12 + 52) = v13;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 8sub_21617DB94((const void **)&__p, 0) = 0u;
  int v88 = (const void **)(v12 + 80);
  *(_OWORD *)(v12 + 96) = 0u;
  uint64_t v84 = (const void **)(v12 + 96);
  *(_OWORD *)(v12 + 128) = 0u;
  uint64_t v82 = v12 + 128;
  *(_OWORD *)(v12 + 14sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_DWORD *)(v12 + 156) = *(_DWORD *)a4;
  *(_DWORD *)(v12 + 16sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)(v12 + 168) = 0;
  unint64_t v90 = (void **)(v12 + 168);
  *(_OWORD *)(v12 + 20sub_21617DB94((const void **)&__p, 0) = 0u;
  *(void *)(v12 + 176) = 0;
  *(void *)(v12 + 184) = 0;
  *(_DWORD *)(v12 + 192) = 0;
  *(_OWORD *)(v12 + 216) = 0u;
  uint64_t v98 = a5;
  BOOL v14 = *(void *)a5 != *(void *)(a5 + 8) && *(unsigned char *)(a5 + 24) == 0;
  int v15 = v14;
  int v89 = v15;
  int v16 = (v13 >> 14) & 1;
  if (v14) {
    int v16 = 1;
  }
  int v97 = v16;
  unsigned __int8 v95 = (_DWORD *)a4;
  uint64_t v17 = *(void *)(a4 + 64);
  BOOL v93 = v17 && *(unsigned char *)(v17 + 104) && *(unsigned char *)(v17 + 105) == 0;
  uint64_t v86 = (const void **)(a1 + 88);
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t capacity = (a3[1] - *a3) >> 3;
  int v87 = (const void **)(v12 + 64);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], capacity, MEMORY[0x263EFFF70]);
  theArray = 0;
  uint64_t v135 = 0;
  uint64_t v136 = &v135;
  uint64_t v137 = 0x4002000000;
  uint64_t v138 = sub_216301668;
  v139 = sub_21630168C;
  CFStringRef v140 = 0;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  uint64_t v132 = 0;
  v133 = 0;
  uint64_t v134 = 0;
  if (v97) {
    theArray = CFArrayCreateMutable(v18, capacity, MEMORY[0x263EFFF70]);
  }
  uint64_t v128 = 0;
  uint64_t v129 = &v128;
  uint64_t v130 = 0x2000000000;
  uint64_t v131 = 0;
  v124[0] = 0;
  v124[1] = v124;
  v124[2] = 0x4002000000;
  v124[3] = sub_2163016A4;
  v124[4] = sub_2163016C8;
  __int16 v125 = 0;
  uint64_t v127 = 0;
  v126 = 0;
  v122[0] = 0;
  v122[1] = v122;
  v122[2] = 0x2000000000;
  char v123 = 0;
  v120[0] = 0;
  v120[1] = v120;
  v120[2] = 0x2000000000;
  char v121 = 0;
  uint64_t v19 = *a3;
  uint64_t v99 = a3[1];
  CFAllocatorRef v85 = v18;
  uint64_t v83 = a3;
  if (*a3 == v99)
  {
    CFIndex v22 = 0;
  }
  else
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    CFIndex v22 = 0;
    int v92 = (v13 >> 17) & 1;
    do
    {
      uint64_t v23 = *(void **)v19;
      uint64_t v24 = *(void *)(*(void *)v19 + 16);
      if (v24)
      {
        uint64_t v25 = v20;
        uint64_t v26 = *(void *)v24;
        uint64_t v100 = *(void *)(v24 + 16);
        CFIndex v101 = v22;
        *(_DWORD *)(a1 + 48) |= *(_DWORD *)(v24 + 32);
        *(unsigned char *)(a1 + 155) |= (*((_DWORD *)v23 + 2) - 4) < 3;
        uint64_t v27 = (*(uint64_t (**)(void *))(*v23 + 56))(v23);
        sub_216185BD8((uint64_t)&v132, (uint64_t)v133, *(char **)v27, (char *)(*(void *)v27 + 2 * *(void *)(v27 + 8)), *(void *)(v27 + 8));
        CFAllocatorRef v112 = 0;
        uint64_t v113 = &v112;
        unint64_t v114 = 0x4002000000;
        uint64_t v115 = sub_2163016E0;
        CFStringRef v116 = sub_216301704;
        int v118 = 0;
        uint64_t v119 = 0;
        uint64_t v117 = 0;
        if (v26)
        {
          uint64_t v28 = *(void *)(v26 + 40);
          *(unsigned char *)(a1 + 152) |= (v28 & 0x20) != 0;
          *(unsigned char *)(a1 + 153) |= (v28 & 0x10) != 0;
          *(unsigned char *)(a1 + 154) |= (v28 & 4) != 0;
          if (v21 == capacity - 1 && (v28 & 0x80) != 0) {
            *(_DWORD *)(a1 + 56) = 2;
          }
          if (v97)
          {
            if (!v89 || (char v29 = sub_216261140((void *)v98, v26, v20)) == 0) {
              char v29 = sub_2163052DC(v26);
            }
            CFArrayAppendValue(theArray, v29);
            CFRelease(v29);
          }
          CFArrayAppendValue(Mutable, *(const void **)(v24 + 8));
        }
        else
        {
          int v30 = *(const void **)(v24 + 8);
          CFArrayAppendValue(Mutable, v30);
          if (v97) {
            CFArrayAppendValue(theArray, v30);
          }
        }
        uint64_t v31 = *(void *)((*(uint64_t (**)(void *))(*v23 + 56))(v23) + 8);
        int v33 = *(char **)(a1 + 176);
        unint64_t v32 = *(void *)(a1 + 184);
        if ((unint64_t)v33 >= v32)
        {
          uint64_t v35 = (char *)*v90;
          uint64_t v36 = (v33 - (unsigned char *)*v90) >> 3;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v38 = v32 - (void)v35;
          if (v38 >> 2 > v37) {
            unint64_t v37 = v38 >> 2;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            int v40 = (char *)sub_2160FFAA8(a1 + 184, v39);
            uint64_t v35 = *(char **)(a1 + 168);
            int v33 = *(char **)(a1 + 176);
          }
          else
          {
            int v40 = 0;
          }
          int v41 = &v40[8 * v36];
          *(void *)int v41 = v31;
          BOOL v34 = v41 + 8;
          while (v33 != v35)
          {
            uint64_t v42 = *((void *)v33 - 1);
            v33 -= 8;
            *((void *)v41 - 1) = v42;
            v41 -= 8;
          }
          *(void *)(a1 + 168) = v41;
          *(void *)(a1 + 176) = v34;
          *(void *)(a1 + 184) = &v40[8 * v39];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *(void *)int v33 = v31;
          BOOL v34 = v33 + 8;
        }
        *(void *)(a1 + 176) = v34;
        uint64_t v43 = v129;
        v102[0] = MEMORY[0x263EF8330];
        v102[1] = 1174405120;
        v102[2] = sub_2163023DC;
        v102[3] = &unk_26C6C9E10;
        v102[4] = &v112;
        v102[5] = v124;
        v102[10] = a1;
        v102[11] = v26;
        v102[6] = &v128;
        v102[12] = v23;
        v102[13] = v27;
        v102[14] = v24;
        uint64_t v104 = 0;
        uint64_t v105 = 0;
        __p = 0;
        sub_216182F50(&__p, v132, (uint64_t)v133, (v133 - (unsigned char *)v132) >> 1);
        char v109 = 0;
        v102[7] = v122;
        v102[8] = v120;
        char v110 = v92;
        BOOL v111 = v93;
        uint64_t v106 = v95;
        uint64_t v107 = v21;
        v102[9] = &v135;
        uint64_t v108 = capacity;
        sub_21630B8FC(v23, v95, v98, v25, v43 + 3, (uint64_t)v102);
        uint64_t v44 = *(void *)(v23[2] + 16);
        if (__p)
        {
          uint64_t v104 = __p;
          operator delete(__p);
        }
        _Block_object_dispose(&v112, 8);
        if (v117)
        {
          int v118 = v117;
          operator delete(v117);
        }
        CFIndex v22 = v100 + v101;
        ++v21;
        unint64_t v20 = v44 + v25;
      }
      v19 += 8;
    }
    while (v19 != v99);
  }
  int v46 = (const void **)(a1 + 72);
  int v45 = v87;
  CFAllocatorRef v48 = v85;
  int v47 = (CFTypeRef *)(a1 + 88);
  if ((v89 & 1) == 0)
  {
    uint64_t v49 = *(void *)(v98 + 8);
    if (*(void *)v98 == v49 || *(unsigned char *)(v98 + 24) == 0) {
      CFStringRef v51 = 0;
    }
    else {
      CFStringRef v51 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v49 - 8) + 48))(*(void *)(v49 - 8));
    }
    CFIndex Length = CFStringGetLength(v51);
    uint64_t v53 = *(void *)(v98 + 8);
    BOOL v55 = *(void *)v98 == v53 || *(unsigned char *)(v98 + 24) == 0;
    if (v22 >= Length)
    {
      if (v55) {
        CFStringRef v57 = 0;
      }
      else {
        CFStringRef v57 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v53 - 8) + 48))(*(void *)(v53 - 8));
      }
      CFStringRef Copy = CFStringCreateCopy(v85, v57);
    }
    else
    {
      if (v55) {
        CFStringRef v56 = 0;
      }
      else {
        CFStringRef v56 = (const __CFString *)(*(uint64_t (**)(void))(**(void **)(v53 - 8) + 48))(*(void *)(v53 - 8));
      }
      v143.location = 0;
      v143.length = v22;
      CFStringRef Copy = CFStringCreateWithSubstring(v85, v56, v143);
    }
    sub_2161868BC(v88, Copy);
  }
  if (v97)
  {
    CFStringRef v59 = CFStringCreateByCombiningStrings(v85, theArray, &stru_26C6FB1C0);
    sub_2161868BC(v86, v59);
    CFRelease(theArray);
  }
  else
  {
    CFStringRef v60 = CFStringCreateCopy(v85, (CFStringRef)*v88);
    sub_2161868BC(v86, v60);
  }
  uint64_t v61 = *(void *)v98;
  uint64_t v62 = *(void *)(v98 + 8);
  while (v61 != v62)
  {
    if ((*(unsigned int (**)(void))(**(void **)v61 + 56))() == 1)
    {
      uint64_t v63 = *v83;
      uint64_t v64 = v83[1];
      CFAllocatorRef v112 = 0;
      uint64_t v113 = 0;
      unint64_t v114 = 0;
      if (v63 == v64)
      {
LABEL_107:
        CFMutableStringRef v77 = sub_216260E10((uint64_t *)v98, (uint64_t *)&v112, v82);
      }
      else
      {
        int64_t v65 = 0;
        while (1)
        {
          uint64_t v66 = *(uint64_t **)(*(void *)v63 + 16);
          if (!v66) {
            break;
          }
          uint64_t v67 = *v66;
          if (!*v66) {
            break;
          }
          if ((unint64_t)v65 >= v114)
          {
            int v69 = (char *)v112;
            uint64_t v70 = (v65 - (unsigned char *)v112) >> 3;
            unint64_t v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v72 = v114 - (void)v112;
            if ((uint64_t)(v114 - (void)v112) >> 2 > v71) {
              unint64_t v71 = v72 >> 2;
            }
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              if (v73 >> 61) {
                sub_2160FFA74();
              }
              uint64_t v74 = (char *)operator new(8 * v73);
            }
            else
            {
              uint64_t v74 = 0;
            }
            uint64_t v75 = &v74[8 * v70];
            *(void *)uint64_t v75 = v67;
            int v68 = v75 + 8;
            if (v65 != v69)
            {
              do
              {
                uint64_t v76 = *((void *)v65 - 1);
                v65 -= 8;
                *((void *)v75 - 1) = v76;
                v75 -= 8;
              }
              while (v65 != v69);
              int64_t v65 = (char *)v112;
            }
            CFAllocatorRef v112 = v75;
            unint64_t v114 = (unint64_t)&v74[8 * v73];
            if (v65) {
              operator delete(v65);
            }
          }
          else
          {
            *(void *)int64_t v65 = v67;
            int v68 = v65 + 8;
          }
          uint64_t v113 = v68;
          v63 += 8;
          int64_t v65 = (char *)v68;
          if (v63 == v64) {
            goto LABEL_107;
          }
        }
        CFMutableStringRef v77 = 0;
      }
      int v46 = (const void **)(a1 + 72);
      int v45 = v87;
      CFAllocatorRef v48 = v85;
      int v47 = (CFTypeRef *)(a1 + 88);
      if (v112)
      {
        uint64_t v113 = v112;
        operator delete(v112);
      }
      if (v77) {
        sub_2161868BC(v86, v77);
      }
      break;
    }
    v61 += 8;
  }
  if (v89) {
    sub_216195954(v88, *v47);
  }
  CFStringRef v78 = CFStringCreateByCombiningStrings(v48, Mutable, &stru_26C6FB1C0);
  sub_2161868BC(v84, v78);
  CFStringRef v79 = sub_21619A5CC();
  sub_2161868BC(v46, v79);
  if (v136[6] == v136[5])
  {
    if (*v46) {
      sub_216195954(v45, *v46);
    }
  }
  else
  {
    CFStringRef v80 = sub_21619A5CC();
    sub_2161868BC(v45, v80);
  }
  *(_DWORD *)(a1 + 16sub_21617DB94((const void **)&__p, 0) = sub_2161E539C((const __CFString *)*v45);
  CFRelease(Mutable);
  _Block_object_dispose(v120, 8);
  _Block_object_dispose(v122, 8);
  _Block_object_dispose(v124, 8);
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  _Block_object_dispose(&v128, 8);
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  _Block_object_dispose(&v135, 8);
  if (v140)
  {
    uint64_t v141 = v140;
    operator delete(v140);
  }
  return a1;
}

void sub_21630223C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, const void **a13, uint64_t a14, const void **a15, const void **a16, const void **a17, const void **a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x220], 8);
  uint64_t v72 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v72;
    operator delete(v72);
  }
  _Block_object_dispose((const void *)(v70 - 224), 8);
  unint64_t v73 = *(void **)(v70 - 192);
  if (v73)
  {
    *(void *)(v70 - 184) = v73;
    operator delete(v73);
  }
  _Block_object_dispose((const void *)(v70 - 168), 8);
  uint64_t v74 = *(void **)(v70 - 128);
  if (v74)
  {
    *(void *)(v70 - 12sub_21617DB94((const void **)&__p, 0) = v74;
    operator delete(v74);
  }
  sub_2161868BC((const void **)(v69 + 224), 0);
  uint64_t v75 = *a10;
  if (*a10)
  {
    *(void *)(v69 + 208) = v75;
    operator delete(v75);
  }
  uint64_t v76 = *a21;
  if (*a21)
  {
    *(void *)(v69 + 176) = v76;
    operator delete(v76);
  }
  CFMutableStringRef v77 = *a11;
  if (*a11)
  {
    *(void *)(v69 + 136) = v77;
    operator delete(v77);
  }
  *(void *)(v70 - 168) = v69 + 104;
  sub_2162632A0((void ***)(v70 - 168));
  sub_2161868BC(a13, 0);
  sub_2161868BC(a15, 0);
  sub_2161868BC(a18, 0);
  sub_2161868BC(a16, 0);
  sub_2161868BC(a17, 0);
  _Unwind_Resume(a1);
}

void sub_2163023DC(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  unint64_t v10 = a3;
  uint64_t v13 = *(void *)(a1 + 80);
  BOOL v14 = *(void **)(*(void *)(a1 + 32) + 8);
  int v15 = (unint64_t *)v14[6];
  unint64_t v16 = v14[7];
  if ((unint64_t)v15 >= v16)
  {
    CFAllocatorRef v18 = (unint64_t *)v14[5];
    uint64_t v19 = ((char *)v15 - (char *)v18) >> 4;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60) {
      sub_21610CB04();
    }
    uint64_t v21 = v16 - (void)v18;
    if (v21 >> 3 > v20) {
      unint64_t v20 = v21 >> 3;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      uint64_t v23 = (char *)sub_21612AA90((uint64_t)(v14 + 7), v22);
      CFAllocatorRef v18 = (unint64_t *)v14[5];
      int v15 = (unint64_t *)v14[6];
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v24 = (unint64_t *)&v23[16 * v19];
    uint64_t v25 = &v23[16 * v22];
    unint64_t *v24 = a2;
    v24[1] = v10;
    uint64_t v17 = v24 + 2;
    if (v15 != v18)
    {
      do
      {
        *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
        v24 -= 2;
        v15 -= 2;
      }
      while (v15 != v18);
      CFAllocatorRef v18 = (unint64_t *)v14[5];
    }
    v14[5] = v24;
    v14[6] = v17;
    v14[7] = v25;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    unint64_t *v15 = a2;
    v15[1] = a3;
    uint64_t v17 = v15 + 2;
  }
  v14[6] = v17;
  uint64_t v26 = *(void **)(*(void *)(a1 + 40) + 8);
  uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v28 = (char *)v26[6];
  unint64_t v29 = v26[7];
  if ((unint64_t)v28 >= v29)
  {
    uint64_t v31 = (char *)v26[5];
    uint64_t v32 = (v28 - v31) >> 3;
    if ((unint64_t)(v32 + 1) >> 61) {
      sub_21610CB04();
    }
    unint64_t v33 = v29 - (void)v31;
    unint64_t v34 = (uint64_t)(v29 - (void)v31) >> 2;
    if (v34 <= v32 + 1) {
      unint64_t v34 = v32 + 1;
    }
    if (v33 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v34;
    }
    if (v35)
    {
      uint64_t v36 = (char *)sub_2160FFAA8((uint64_t)(v26 + 7), v35);
      uint64_t v31 = (char *)v26[5];
      uint64_t v28 = (char *)v26[6];
    }
    else
    {
      uint64_t v36 = 0;
    }
    unint64_t v37 = &v36[8 * v32];
    uint64_t v38 = &v36[8 * v35];
    *(void *)unint64_t v37 = v27;
    int v30 = v37 + 8;
    while (v28 != v31)
    {
      uint64_t v39 = *((void *)v28 - 1);
      v28 -= 8;
      *((void *)v37 - 1) = v39;
      v37 -= 8;
    }
    v26[5] = v37;
    v26[6] = v30;
    v26[7] = v38;
    if (v31) {
      operator delete(v31);
    }
  }
  else
  {
    *(void *)uint64_t v28 = v27;
    int v30 = v28 + 8;
  }
  v26[6] = v30;
  uint64_t v40 = *(void *)(a1 + 88);
  uint64_t v144 = a4;
  uint64_t v145 = a6;
  if (v40)
  {
    unint64_t v41 = *(void *)(v40 + 40);
    *(_DWORD *)CFRange v143 = (v41 >> 2) & 1;
    *(_DWORD *)&v143[4] = (v41 >> 5) & 1;
    uint64_t v142 = (v41 >> 4) & 1;
  }
  else
  {
    LOBYTE(v142) = 0;
    *(void *)CFRange v143 = 0;
  }
  unsigned int v147 = *(_DWORD *)(*(void *)(a1 + 96) + 8) - 4;
  int v140 = v147 < 3;
  uint64_t v43 = *a7;
  uint64_t v42 = a7[1];
  uint64_t v44 = v42 - *a7;
  uint64_t v148 = v10;
  if (v44 >= 1)
  {
    uint64_t v45 = *(void *)(v13 + 200);
    unint64_t v47 = *(void *)(v13 + 208);
    int v46 = (void **)(v13 + 200);
    uint64_t v48 = v44 >> 2;
    uint64_t v49 = v47 - v45;
    int v50 = (char *)(v45 + ((v47 - v45) & 0xFFFFFFFFFFFFFFFCLL));
    uint64_t v51 = *(void *)(v13 + 216);
    if (v48 > (uint64_t)(v51 - v47) >> 2)
    {
      uint64_t v52 = v49 >> 2;
      unint64_t v53 = (v49 >> 2) + v48;
      if (v53 >> 62) {
        sub_21610CB04();
      }
      uint64_t v54 = v51 - v45;
      if (v54 >> 1 > v53) {
        unint64_t v53 = v54 >> 1;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55) {
        CFStringRef v56 = (char *)sub_2161129B4(v13 + 216, v55);
      }
      else {
        CFStringRef v56 = 0;
      }
      int64_t v65 = &v56[4 * v52];
      uint64_t v66 = &v65[4 * v48];
      uint64_t v67 = 4 * v48;
      int v68 = v65;
      do
      {
        int v69 = *(_DWORD *)v43;
        v43 += 4;
        *(_DWORD *)int v68 = v69;
        v68 += 4;
        v67 -= 4;
      }
      while (v67);
      uint64_t v70 = (char *)*v46;
      if (*v46 != v50)
      {
        unint64_t v71 = v50;
        do
        {
          int v72 = *((_DWORD *)v71 - 1);
          v71 -= 4;
          *((_DWORD *)v65 - 1) = v72;
          v65 -= 4;
        }
        while (v71 != v70);
      }
      unint64_t v73 = &v56[4 * v55];
      uint64_t v74 = *(unsigned char **)(v13 + 208);
      uint64_t v75 = v74 - v50;
      if (v74 != v50) {
        memmove(v66, v50, v74 - v50);
      }
      uint64_t v76 = *(void **)(v13 + 200);
      *(void *)(v13 + 20sub_21617DB94((const void **)&__p, 0) = v65;
      *(void *)(v13 + 208) = &v66[v75];
      *(void *)(v13 + 216) = v73;
      unint64_t v10 = v148;
      if (v76) {
        operator delete(v76);
      }
      goto LABEL_69;
    }
    uint64_t v57 = (uint64_t)(v47 - (void)v50) >> 2;
    if (v57 >= v48)
    {
      int v58 = &v43[4 * v48];
      CFStringRef v60 = *(char **)(v13 + 208);
    }
    else
    {
      int v58 = &v43[4 * v57];
      int64_t v59 = v42 - v58;
      if (v42 != v58) {
        memmove(*(void **)(v13 + 208), &v43[4 * v57], v42 - v58);
      }
      CFStringRef v60 = (char *)(v47 + v59);
      *(void *)(v13 + 208) = v47 + v59;
      if ((uint64_t)(v47 - (void)v50) < 1) {
        goto LABEL_69;
      }
    }
    uint64_t v61 = &v50[4 * v48];
    uint64_t v62 = (int *)&v60[-4 * v48];
    uint64_t v63 = v60;
    if ((unint64_t)v62 < v47)
    {
      uint64_t v63 = v60;
      do
      {
        int v64 = *v62++;
        *(_DWORD *)uint64_t v63 = v64;
        v63 += 4;
      }
      while ((unint64_t)v62 < v47);
    }
    *(void *)(v13 + 208) = v63;
    if (v60 != v61) {
      memmove(&v60[-4 * ((v60 - v61) >> 2)], v50, v60 - v61);
    }
    if (v58 != v43) {
      memmove(v50, v43, v58 - v43);
    }
  }
LABEL_69:
  uint64_t v77 = *(void *)(a1 + 88);
  if ((*(_DWORD *)(*(void *)(a1 + 96) + 8) & 0xFFFFFFFD) == 8) {
    int v78 = 9;
  }
  else {
    int v78 = 0;
  }
  unsigned int v139 = *(_DWORD *)(*(void *)(a1 + 96) + 8) & 0xFFFFFFFD;
  if (v77)
  {
    CFStringRef Copy = sub_216305080(v77, a2, v10);
    uint64_t v80 = a2;
LABEL_74:
    CFStringRef v81 = Copy;
    goto LABEL_79;
  }
  uint64_t v80 = a2;
  if (v10 >= *(void *)(*(void *)(a1 + 104) + 8))
  {
    CFStringRef v82 = *(const __CFString **)(*(void *)(a1 + 112) + 8);
    if (v82)
    {
      CFStringRef Copy = (__CFString *)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v82);
      goto LABEL_74;
    }
  }
  CFStringRef v81 = 0;
LABEL_79:
  uint64_t v83 = *(void *)(a1 + 120);
  uint64_t v84 = v80;
  if (v83) {
    CFIndex v85 = v10;
  }
  else {
    CFIndex v85 = 0;
  }
  UniChar chars = (unsigned __int16 *)(v83 + 2 * v80);
  v149[0] = chars;
  v149[1] = (unsigned __int16 *)v85;
  if (*(unsigned char *)(a1 + 168) || v10 != *(void *)(*(void *)(a1 + 104) + 8)) {
    int v86 = sub_2162DEAFC(*(void *)(a1 + 144), v149, v81);
  }
  else {
    int v86 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 24))(*(void *)(a1 + 96));
  }
  int v87 = v86;
  int v88 = operator new(0xA0uLL);
  v88[1] = 0;
  uint64_t v88[2] = 0;
  *int v88 = &unk_26C6C9738;
  int v89 = v88 + 3;
  sub_2161CD204((uint64_t)(v88 + 3), v80, v148, v87, v78, 0, v81, v145, v144, a5, v143[4], v143[0], v142, v147 < 3);
  unint64_t v90 = *(void *)(v13 + 120);
  int v91 = *(void **)(v13 + 112);
  if ((unint64_t)v91 >= v90)
  {
    uint64_t v94 = *(void *)(v13 + 104);
    uint64_t v95 = ((uint64_t)v91 - v94) >> 4;
    unint64_t v96 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 60) {
      sub_21610CB04();
    }
    uint64_t v97 = v90 - v94;
    if (v97 >> 3 > v96) {
      unint64_t v96 = v97 >> 3;
    }
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v98 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v98 = v96;
    }
    uint64_t v153 = v13 + 120;
    uint64_t v99 = (char *)sub_21620DECC(v98);
    uint64_t v100 = &v99[16 * v95];
    v152 = &v99[16 * v101];
    *(void *)uint64_t v100 = v89;
    *((void *)v100 + 1) = v88;
    int v92 = v100 + 16;
    v151.i64[1] = (uint64_t)(v100 + 16);
    unsigned __int8 v103 = *(void **)(v13 + 104);
    unsigned __int8 v102 = *(void **)(v13 + 112);
    if (v102 == v103)
    {
      int64x2_t v105 = vdupq_n_s64((unint64_t)v102);
      uint64_t v93 = v148;
    }
    else
    {
      uint64_t v93 = v148;
      do
      {
        long long v104 = *((_OWORD *)v102 - 1);
        v102 -= 2;
        *((_OWORD *)v100 - 1) = v104;
        v100 -= 16;
        void *v102 = 0;
        v102[1] = 0;
      }
      while (v102 != v103);
      int64x2_t v105 = *(int64x2_t *)(v13 + 104);
      int v92 = (void *)v151.i64[1];
    }
    *(void *)(v13 + 104) = v100;
    *(void *)(v13 + 112) = v92;
    int64x2_t v151 = v105;
    uint64_t v106 = *(char **)(v13 + 120);
    *(void *)(v13 + 12sub_21617DB94((const void **)&__p, 0) = v152;
    v152 = v106;
    CFStringRef v150 = (const __CFString *)v105.i64[0];
    sub_21621EF1C((uint64_t)&v150);
  }
  else
  {
    *int v91 = v89;
    v91[1] = v88;
    int v92 = v91 + 2;
    uint64_t v93 = v148;
  }
  *(void *)(v13 + 112) = v92;
  if (v81) {
    CFRelease(v81);
  }
  int v107 = sub_2161E4A7C((uint64_t *)v149, (unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), (unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24));
  if (*(unsigned char *)(a1 + 169))
  {
    uint64_t v108 = (char *)chars;
  }
  else
  {
    int v109 = v107;
    uint64_t v108 = (char *)chars;
    if (!*(unsigned char *)(a1 + 170) || v147 < 3 || v139 != 8) {
      goto LABEL_112;
    }
    CFStringRef v110 = CFStringCreateWithCharacters(0, chars, v85);
    CFStringRef v150 = v110;
    int v140 = sub_2161A1F24(v110);
    if (v110) {
      CFRelease(v110);
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_112:
      if (!v109) {
        goto LABEL_115;
      }
      goto LABEL_113;
    }
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
    goto LABEL_115;
  }
LABEL_113:
  if (*(uint64_t *)(a1 + 152) > 0 || v80 > 0) {
    goto LABEL_118;
  }
LABEL_115:
  if (!(*(void *)(a1 + 152) | v80) && *(unsigned char *)(a1 + 170) && v140)
  {
LABEL_118:
    BOOL v111 = *(void **)(*(void *)(a1 + 72) + 8);
    CFAllocatorRef v112 = (char *)v111[6];
    unint64_t v113 = v111[7];
    if ((unint64_t)v112 >= v113)
    {
      uint64_t v115 = (char *)v111[5];
      uint64_t v116 = v112 - v115;
      if (v112 - v115 <= -3) {
        goto LABEL_162;
      }
      uint64_t v117 = v116 >> 1;
      unint64_t v118 = v113 - (void)v115;
      if (v118 <= (v116 >> 1) + 1) {
        unint64_t v119 = v117 + 1;
      }
      else {
        unint64_t v119 = v118;
      }
      if (v118 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v120 = v119;
      }
      if (v120)
      {
        char v121 = (char *)sub_21610FD44((uint64_t)(v111 + 7), v120);
        uint64_t v115 = (char *)v111[5];
        CFAllocatorRef v112 = (char *)v111[6];
      }
      else
      {
        char v121 = 0;
      }
      uint64_t v122 = &v121[2 * v117];
      char v123 = &v121[2 * v120];
      *(_WORD *)uint64_t v122 = 32;
      unint64_t v114 = v122 + 2;
      while (v112 != v115)
      {
        __int16 v124 = *((_WORD *)v112 - 1);
        v112 -= 2;
        *((_WORD *)v122 - 1) = v124;
        v122 -= 2;
      }
      v111[5] = v122;
      v111[6] = v114;
      v111[7] = v123;
      if (v115) {
        operator delete(v115);
      }
    }
    else
    {
      *(_WORD *)CFAllocatorRef v112 = 32;
      unint64_t v114 = v112 + 2;
    }
    v111[6] = v114;
  }
  sub_216185BD8(*(void *)(*(void *)(a1 + 72) + 8) + 40, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48), v108, &v108[2 * v85], v85);
  if (*(unsigned char *)(a1 + 169)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)
    && (*(void *)(a1 + 152) < *(void *)(a1 + 160) - 1
     || v93 + v84 < (unint64_t)((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 1)))
  {
    __int16 v125 = *(void **)(*(void *)(a1 + 72) + 8);
    v126 = (char *)v125[6];
    unint64_t v127 = v125[7];
    if ((unint64_t)v126 < v127)
    {
      *(_WORD *)v126 = 32;
      uint64_t v128 = v126 + 2;
LABEL_157:
      v125[6] = v128;
      return;
    }
    uint64_t v129 = (char *)v125[5];
    uint64_t v130 = v126 - v129;
    if (v126 - v129 > -3)
    {
      uint64_t v131 = v130 >> 1;
      unint64_t v132 = v127 - (void)v129;
      if (v132 <= (v130 >> 1) + 1) {
        unint64_t v133 = v131 + 1;
      }
      else {
        unint64_t v133 = v132;
      }
      if (v132 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v134 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v134 = v133;
      }
      if (v134)
      {
        uint64_t v135 = (char *)sub_21610FD44((uint64_t)(v125 + 7), v134);
        uint64_t v129 = (char *)v125[5];
        v126 = (char *)v125[6];
      }
      else
      {
        uint64_t v135 = 0;
      }
      uint64_t v136 = &v135[2 * v131];
      uint64_t v137 = &v135[2 * v134];
      *(_WORD *)uint64_t v136 = 32;
      uint64_t v128 = v136 + 2;
      while (v126 != v129)
      {
        __int16 v138 = *((_WORD *)v126 - 1);
        v126 -= 2;
        *((_WORD *)v136 - 1) = v138;
        v136 -= 2;
      }
      v125[5] = v136;
      v125[6] = v128;
      v125[7] = v137;
      if (v129) {
        operator delete(v129);
      }
      goto LABEL_157;
    }
LABEL_162:
    sub_21610CB04();
  }
}

void sub_216302CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216302D18(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60) {
      sub_21610CB04();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    int v15 = result + 2;
    float v4 = (char *)sub_21620DECC(a2);
    uint64_t v7 = *v2;
    uint64_t v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      uint64_t v8 = &v4[v3];
    }
    else
    {
      uint64_t v8 = &v4[v3];
      do
      {
        long long v9 = *((_OWORD *)v6 - 1);
        v6 -= 16;
        *((_OWORD *)v8 - 1) = v9;
        v8 -= 16;
        *(void *)uint64_t v6 = 0;
        *((void *)v6 + 1) = 0;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    *uint64_t v2 = v8;
    v2[1] = &v4[v3];
    int64x2_t v13 = v10;
    int v11 = v2[2];
    v2[2] = &v4[16 * v5];
    BOOL v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)sub_21621EF1C((uint64_t)&v12);
  }
  return result;
}

uint64_t sub_216302DD4(uint64_t a1, uint64_t a2, const __CFString *a3, const __CFString *a4, uint64_t *a5, int a6, int a7)
{
  *(void *)a1 = &unk_26C6BE7D0;
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v15 = sub_2162A7544(a1, (uint64_t *)&off_26C6BCEC8);
  *(_DWORD *)(v15 + 2sub_21617DB94((const void **)&__p, 0) = a6;
  *(unsigned char *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = v14;
  *(void *)uint64_t v15 = off_26C6C5A60;
  *(void *)(v15 + 4sub_21617DB94((const void **)&__p, 0) = &off_26C6C5CC8;
  *(_DWORD *)(v15 + 48) = a7;
  *(void *)(v15 + 52) = *(void *)(a2 + 52);
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  *(void *)(a1 + 64) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a4);
  CFStringRef Copy = CFStringCreateCopy(v16, a3);
  *(_OWORD *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = 0u;
  *(void *)(a1 + 72) = Copy;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v97 = (int64x2_t *)(a1 + 104);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  int v18 = sub_2161E539C(a4);
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 16sub_21617DB94((const void **)&__p, 0) = v18;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  sub_2162BE380((void *)(a1 + 168), *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  int v19 = *(_DWORD *)(a2 + 192);
  *(void *)(a1 + 20sub_21617DB94((const void **)&__p, 0) = 0;
  *(_DWORD *)(a1 + 192) = v19;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  sub_216263224((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  *(void *)(a1 + 224) = 0;
  sub_216302D18((void *)(a1 + 104), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 432))(v106, a2, 1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 432))(v105, a2, 2);
  (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a2 + 432))(v104, a2, 0);
  CFAllocatorRef alloc = v16;
  if ((a7 & 0x40) != 0)
  {
    if (*a5 == a5[1])
    {
      CFIndex range = 0;
      CFIndex v22 = 0;
      CFIndex v21 = 0;
    }
    else
    {
      uint64_t v57 = 0;
      int v58 = 0;
      int v59 = 0;
      unint64_t v60 = 0;
      int rangea = *(_DWORD *)(**(void **)(a2 + 104) + 40);
      do
      {
        uint64_t v61 = *(unsigned char **)(*(void *)(a2 + 104) + v57);
        v59 += (*(uint64_t (**)(unsigned char *))(*(void *)v61 + 16))(v61);
        v58 |= v61[32] & 1;
        ++v60;
        v57 += 16;
      }
      while (v60 < (a5[1] - *a5) >> 2);
      CFIndex Length = CFStringGetLength(a4);
      CFStringRef theString = *(const __CFString **)(a2 + 96);
      int v63 = *(unsigned __int8 *)(a2 + 152);
      int v64 = *(unsigned __int8 *)(a2 + 153);
      int v65 = *(unsigned __int8 *)(a2 + 155);
      uint64_t v66 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v66->__shared_owners_ = 0;
      v66->__shared_weak_owners_ = 0;
      v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9738;
      uint64_t v67 = v66 + 1;
      sub_2161CD204((uint64_t)&v66[1], 0, Length, 0, rangea, (unsigned __int16)v59, theString, (uint64_t)v106, (uint64_t)v105, (uint64_t)v104, v63 != 0, v58 != 0, v64 != 0, v65 != 0);
      unint64_t v68 = *(void *)(a1 + 120);
      int v69 = *(std::__shared_weak_count ***)(a1 + 112);
      if ((unint64_t)v69 >= v68)
      {
        uint64_t v71 = ((uint64_t)v69 - v97->i64[0]) >> 4;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 60) {
          sub_21610CB04();
        }
        uint64_t v73 = v68 - v97->i64[0];
        if (v73 >> 3 > v72) {
          unint64_t v72 = v73 >> 3;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v74 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v72;
        }
        uint64_t v110 = a1 + 120;
        uint64_t v75 = (char *)sub_21620DECC(v74);
        uint64_t v77 = (std::__shared_weak_count **)&v75[16 * v71];
        *uint64_t v77 = v67;
        v77[1] = v66;
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v70 = v77 + 2;
        CFStringRef v79 = *(void **)(a1 + 104);
        int v78 = *(void **)(a1 + 112);
        if (v78 == v79)
        {
          int64x2_t v81 = vdupq_n_s64((unint64_t)v78);
        }
        else
        {
          do
          {
            long long v80 = *((_OWORD *)v78 - 1);
            v78 -= 2;
            *((_OWORD *)v77 - 1) = v80;
            v77 -= 2;
            void *v78 = 0;
            v78[1] = 0;
          }
          while (v78 != v79);
          int64x2_t v81 = *v97;
        }
        *(void *)(a1 + 104) = v77;
        *(void *)(a1 + 112) = v70;
        int64x2_t v108 = v81;
        uint64_t v82 = *(void *)(a1 + 120);
        *(void *)(a1 + 12sub_21617DB94((const void **)&__p, 0) = &v75[16 * v76];
        uint64_t v109 = v82;
        int v107 = (unsigned __int16 *)v81.i64[0];
        sub_21621EF1C((uint64_t)&v107);
      }
      else
      {
        *int v69 = v67;
        v69[1] = v66;
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v70 = v69 + 2;
      }
      *(void *)(a1 + 112) = v70;
      CFIndex v21 = CFStringGetLength(*(CFStringRef *)(a2 + 80));
      CFIndex v22 = CFStringGetLength(*(CFStringRef *)(a2 + 88));
      CFIndex range = CFStringGetLength(*(CFStringRef *)(a2 + 96));
      sub_2161121B0(v66);
      CFAllocatorRef v16 = alloc;
    }
    CFStringRef v83 = CFStringCreateCopy(v16, *(CFStringRef *)(a2 + 64));
    sub_2161868BC((const void **)(a1 + 224), v83);
  }
  else
  {
    uint64_t v20 = *a5;
    if (a5[1] != *a5)
    {
      CFIndex v21 = 0;
      CFIndex v22 = 0;
      CFIndex range = 0;
      unint64_t v23 = 0;
      while (1)
      {
        uint64_t v24 = *(void *)(*(void *)(a2 + 104) + 16 * v23);
        int v25 = *(_DWORD *)(v20 + 4 * v23);
        uint64_t v26 = (std::__shared_weak_count *)operator new(0xA0uLL);
        v26->__shared_owners_ = 0;
        v26->__shared_weak_owners_ = 0;
        v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9738;
        uint64_t v27 = v26 + 1;
        sub_2161CD54C((uint64_t)&v26[1], v24, v25);
        uint64_t v28 = *(std::__shared_weak_count ***)(a1 + 112);
        unint64_t v29 = *(void *)(a1 + 120);
        if ((unint64_t)v28 >= v29)
        {
          uint64_t v31 = ((uint64_t)v28 - v97->i64[0]) >> 4;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 60) {
            sub_21610CB04();
          }
          uint64_t v33 = v29 - v97->i64[0];
          if (v33 >> 3 > v32) {
            unint64_t v32 = v33 >> 3;
          }
          unint64_t v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v32;
          uint64_t v110 = a1 + 120;
          unint64_t v35 = (char *)sub_21620DECC(v34);
          unint64_t v37 = (std::__shared_weak_count **)&v35[16 * v31];
          *unint64_t v37 = v27;
          v37[1] = v26;
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v39 = *(void **)(a1 + 104);
          uint64_t v38 = *(void **)(a1 + 112);
          if (v38 == v39)
          {
            int64x2_t v42 = vdupq_n_s64((unint64_t)v38);
            uint64_t v40 = &v35[16 * v31];
          }
          else
          {
            uint64_t v40 = &v35[16 * v31];
            do
            {
              long long v41 = *((_OWORD *)v38 - 1);
              v38 -= 2;
              *((_OWORD *)v40 - 1) = v41;
              v40 -= 16;
              void *v38 = 0;
              v38[1] = 0;
            }
            while (v38 != v39);
            int64x2_t v42 = *v97;
          }
          int v30 = v37 + 2;
          *(void *)(a1 + 104) = v40;
          *(void *)(a1 + 112) = v37 + 2;
          int64x2_t v108 = v42;
          uint64_t v43 = *(void *)(a1 + 120);
          *(void *)(a1 + 12sub_21617DB94((const void **)&__p, 0) = &v35[16 * v36];
          uint64_t v109 = v43;
          int v107 = (unsigned __int16 *)v42.i64[0];
          sub_21621EF1C((uint64_t)&v107);
        }
        else
        {
          *uint64_t v28 = v27;
          v28[1] = v26;
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          int v30 = v28 + 2;
        }
        *(void *)(a1 + 112) = v30;
        (*(void (**)(unsigned __int16 **__return_ptr, uint64_t))(*(void *)v24 + 40))(&v107, v24);
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v24 + 48))(&__p, v24);
        (*(void (**)(unsigned __int16 **__return_ptr, uint64_t))(*(void *)v24 + 56))(&v100, v24);
        uint64_t v44 = v107;
        uint64_t v45 = 0;
        if (v108.i64[0] != (void)v107)
        {
          unint64_t v46 = (v108.i64[0] - (uint64_t)v107) >> 1;
          if (v46 <= 1) {
            unint64_t v46 = 1;
          }
          do
          {
            unsigned int v47 = *v44++;
            v45 += v47;
            --v46;
          }
          while (v46);
        }
        uint64_t v48 = __p;
        uint64_t v49 = 0;
        if (v103 != __p)
        {
          unint64_t v50 = (v103 - (unsigned char *)__p) >> 1;
          if (v50 <= 1) {
            unint64_t v50 = 1;
          }
          uint64_t v51 = (unsigned __int16 *)__p;
          do
          {
            unsigned int v52 = *v51++;
            v49 += v52;
            --v50;
          }
          while (v50);
        }
        if (v101 != v100) {
          break;
        }
        if (v101) {
          goto LABEL_34;
        }
LABEL_35:
        if (v48)
        {
          unsigned __int8 v103 = v48;
          operator delete(v48);
        }
        if (v107)
        {
          v108.i64[0] = (uint64_t)v107;
          operator delete(v107);
        }
        v21 += v45;
        v22 += v49;
        sub_2161121B0(v26);
        ++v23;
        uint64_t v20 = *a5;
        if (v23 >= (a5[1] - *a5) >> 2) {
          goto LABEL_61;
        }
      }
      uint64_t v53 = 0;
      unint64_t v54 = v101 - v100;
      if (v54 <= 1) {
        unint64_t v54 = 1;
      }
      unint64_t v55 = v100;
      do
      {
        unsigned int v56 = *v55++;
        v53 += v56;
        --v54;
      }
      while (v54);
      range += v53;
LABEL_34:
      uint64_t v101 = v100;
      operator delete(v100);
      uint64_t v48 = __p;
      goto LABEL_35;
    }
    CFIndex range = 0;
    CFIndex v22 = 0;
    CFIndex v21 = 0;
  }
LABEL_61:
  CFIndex v84 = CFStringGetLength(*(CFStringRef *)(a2 + 80));
  CFStringRef v85 = *(const __CFString **)(a2 + 80);
  if (v21 <= v84)
  {
    v111.location = 0;
    v111.length = v21;
    CFStringRef v86 = CFStringCreateWithSubstring(alloc, v85, v111);
  }
  else
  {
    CFStringRef v86 = CFStringCreateCopy(alloc, v85);
  }
  sub_2161868BC((const void **)(a1 + 80), v86);
  CFIndex v87 = CFStringGetLength(*(CFStringRef *)(a2 + 88));
  CFStringRef v88 = *(const __CFString **)(a2 + 88);
  if (v22 <= v87)
  {
    v112.location = 0;
    v112.length = v22;
    CFStringRef v89 = CFStringCreateWithSubstring(alloc, v88, v112);
  }
  else
  {
    CFStringRef v89 = CFStringCreateCopy(alloc, v88);
  }
  sub_2161868BC((const void **)(a1 + 88), v89);
  CFIndex v90 = CFStringGetLength(*(CFStringRef *)(a2 + 96));
  CFStringRef v91 = *(const __CFString **)(a2 + 96);
  v92.length = range;
  if (range >= v90)
  {
    CFStringRef v93 = CFStringCreateCopy(alloc, v91);
  }
  else
  {
    v92.location = 0;
    CFStringRef v93 = CFStringCreateWithSubstring(alloc, v91, v92);
  }
  sub_2161868BC((const void **)(a1 + 96), v93);
  if (v104[0])
  {
    v104[1] = v104[0];
    operator delete(v104[0]);
  }
  if (v105[0])
  {
    v105[1] = v105[0];
    operator delete(v105[0]);
  }
  if (v106[0])
  {
    v106[1] = v106[0];
    operator delete(v106[0]);
  }
  return a1;
}

void sub_2163036B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, const void **a15, const void **a16, const void **a17, const void **a18, const void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v38);
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  uint64_t v39 = *(void **)(v36 - 168);
  if (v39)
  {
    *(void *)(v36 - 16sub_21617DB94((const void **)&__p, 0) = v39;
    operator delete(v39);
  }
  sub_2161868BC(a16, 0);
  uint64_t v40 = *a13;
  if (*a13)
  {
    v34[26] = v40;
    operator delete(v40);
  }
  long long v41 = *a14;
  if (*a14)
  {
    v34[22] = v41;
    operator delete(v41);
  }
  int64x2_t v42 = (void *)v34[16];
  if (v42)
  {
    v34[17] = v42;
    operator delete(v42);
  }
  *(void *)(v36 - 168) = a22;
  sub_2162632A0((void ***)(v36 - 168));
  sub_2161868BC(a17, 0);
  sub_2161868BC(a18, 0);
  sub_2161868BC(a19, 0);
  sub_2161868BC(a15 + 1, 0);
  sub_2161868BC(a15, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216303834(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  else {
    return 0;
  }
  return v2;
}

uint64_t sub_2163038A0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result)
  {
    unsigned __int16 v2 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v2();
  }
  return result;
}

uint64_t sub_216303914(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 312))();
}

CFStringRef sub_216303940(uint64_t a1)
{
  __p = 0;
  CFIndex v22 = 0;
  unint64_t v23 = 0;
  uint64_t v1 = *(void *)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 112);
  do
  {
    (*(void (**)(void **__return_ptr))(**(void **)v1 + 56))(&v19);
    uint64_t v3 = v20;
    if (v20 != v19)
    {
      uint64_t v4 = 0;
      if ((unint64_t)(((unsigned char *)v20 - (unsigned char *)v19) >> 1) <= 1) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = ((unsigned char *)v20 - (unsigned char *)v19) >> 1;
      }
      uint64_t v6 = v22;
      do
      {
        __int16 v7 = *((_WORD *)v19 + v4) + 48;
        if (v6 >= v23)
        {
          long long v9 = (char *)__p;
          uint64_t v10 = v6 - (unsigned char *)__p;
          if (v6 - (unsigned char *)__p <= -3) {
            sub_21610CB04();
          }
          uint64_t v11 = v10 >> 1;
          if (v23 - (unsigned char *)__p <= (unint64_t)((v10 >> 1) + 1)) {
            uint64_t v12 = v11 + 1;
          }
          else {
            uint64_t v12 = v23 - (unsigned char *)__p;
          }
          if ((unint64_t)(v23 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v13 = v12;
          }
          if (v13)
          {
            uint64_t v14 = (char *)sub_21610FD44((uint64_t)&v23, v13);
            long long v9 = (char *)__p;
            uint64_t v6 = v22;
          }
          else
          {
            uint64_t v14 = 0;
          }
          uint64_t v15 = &v14[2 * v11];
          *(_WORD *)uint64_t v15 = v7;
          uint64_t v8 = v15 + 2;
          while (v6 != v9)
          {
            __int16 v16 = *((_WORD *)v6 - 1);
            v6 -= 2;
            *((_WORD *)v15 - 1) = v16;
            v15 -= 2;
          }
          __p = v15;
          CFIndex v22 = v8;
          unint64_t v23 = &v14[2 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(_WORD *)uint64_t v6 = v7;
          uint64_t v8 = v6 + 2;
        }
        CFIndex v22 = v8;
        ++v4;
        uint64_t v6 = v8;
      }
      while (v4 != v5);
      uint64_t v3 = v19;
    }
    if (v3)
    {
      uint64_t v20 = v3;
      operator delete(v3);
    }
    v1 += 16;
  }
  while (v1 != v2);
  CFStringRef v17 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UniChar *)__p, (v22 - (unsigned char *)__p) >> 1);
  if (__p)
  {
    CFIndex v22 = (char *)__p;
    operator delete(__p);
  }
  return v17;
}

void sub_216303AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *sub_216303B38(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  uint64_t v3 = *(uint64_t **)(a1 + 104);
  uint64_t v4 = *(uint64_t **)(a1 + 112);
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    v3 += 2;
    CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 72))(v5);
    CFStringAppend(Mutable, v6);
    CFRelease(v6);
  }
  return Mutable;
}

uint64_t sub_216303BCC(void *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  if ((*(uint64_t (**)(void *))(*a1 + 48))(a1) <= a2) {
    return 0;
  }
  return *(void *)(a1[13] + 16 * a2);
}

CFIndex sub_216303C40(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v7 = CFStringGetLength(a2);
  if (Length < v7) {
    return 0;
  }
  uint64_t v9 = 0;
  if (a3 < 1 || Length < 1)
  {
    CFIndex v11 = 0;
  }
  else
  {
    CFIndex v10 = v7;
    CFIndex v11 = 0;
    if (v7 >= 1)
    {
      CFIndex v12 = 0;
      CFIndex v11 = 0;
      uint64_t v9 = 0;
      do
      {
        int CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v11);
        if (CharacterAtIndex == CFStringGetCharacterAtIndex(a2, v12))
        {
          ++v9;
          ++v12;
        }
        else if (CharacterAtIndex != 32)
        {
          return 0;
        }
        ++v11;
      }
      while (v9 < a3 && v11 < Length && v12 < v10);
    }
  }
  if (v9 == a3) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t sub_216303D3C(uint64_t a1, CFStringRef theString, const __CFString *a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  CFIndex Length = CFStringGetLength(theString);
  if (Length > a6)
  {
    CFIndex Length = 0;
    if ((a7 & 0x8000000000000000) == 0)
    {
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v14);
        (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
        Length += v16;
        ++v14;
      }
      while (a7 + 1 != v14);
    }
    uint64_t v17 = *a4 + 4 * a7 + 4;
    if (v17 != a4[1]) {
      a4[1] = v17;
    }
  }
  CFIndex v18 = sub_216303C40(a3, theString, Length);
  if (v18 >= 1)
  {
    CFIndex v19 = v18;
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    v22.location = 0;
    v22.length = Length;
    CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], theString, v22);
    v23.location = 0;
    v23.length = v19;
    CFStringCreateWithSubstring(v20, a3, v23);
    operator new();
  }
  return 0;
}

void sub_216303EE0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40A64E6D2FLL);
  _Unwind_Resume(a1);
}

void sub_216303F04()
{
}

void sub_216303F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x2166CA800](v11, 0x10F1C40A64E6D2FLL);
  _Unwind_Resume(a1);
}

CFIndex sub_216303FD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 112);
  if (v1 == v2) {
    return 0;
  }
  CFIndex Length = 0;
  do
  {
    uint64_t v5 = *(unsigned char **)v1;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((v5[32] & 8) != 0)
    {
      CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(unsigned char *))(*(void *)v5 + 64))(v5);
      if (CFStringGetLength(v6) > Length)
      {
        CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(unsigned char *))(*(void *)v5 + 64))(v5);
        CFIndex Length = CFStringGetLength(v7);
      }
    }
    if (v4) {
      sub_2161121B0(v4);
    }
    v1 += 16;
  }
  while (v1 != v2);
  return Length;
}

void sub_2163040B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2161121B0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2163040C8()
{
}

void sub_2163043F0(_Unwind_Exception *a1, uint64_t a2, const void **a3, void **a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2161868BC(a3, 0);
  CFIndex v12 = *a4;
  if (*a4)
  {
    *(void *)(v10 + 208) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *a5;
  if (*a5)
  {
    *(void *)(v10 + 176) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v10 + 128);
  if (v14)
  {
    *(void *)(v10 + 136) = v14;
    operator delete(v14);
  }
  sub_2162632A0((void ***)va);
  sub_2161868BC((const void **)(v10 + 96), 0);
  sub_2161868BC((const void **)(v10 + 88), 0);
  sub_2161868BC((const void **)(v10 + 80), 0);
  sub_2161868BC((const void **)(v10 + 72), 0);
  sub_2161868BC((const void **)(v10 + 64), 0);
  MEMORY[0x2166CA800](v10, 0x10F1C40A64E6D2FLL);
  _Unwind_Resume(a1);
}

void sub_216304544()
{
}

void sub_216304564(uint64_t a1)
{
  sub_21630465C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21630459C(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_2163045A4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_2163045AC(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 4;
}

uint64_t sub_2163045BC(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_2163045C4()
{
  return 0;
}

uint64_t sub_2163045CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_2163045D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_2163045DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t sub_2163045E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 153);
}

uint64_t sub_2163045EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 154);
}

uint64_t sub_2163045F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 155);
}

uint64_t sub_2163045FC(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t sub_216304604(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t sub_21630460C()
{
  return 1;
}

uint64_t sub_216304614(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_21630461C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_216304624()
{
  return 1;
}

uint64_t sub_21630462C(uint64_t a1)
{
  return *(void *)(a1 + 224);
}

BOOL sub_216304634(uint64_t a1)
{
  return *(_DWORD *)(a1 + 156) == 5;
}

uint64_t sub_216304644(uint64_t a1)
{
  return a1 + 200;
}

uint64_t sub_21630464C(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_216304654(uint64_t a1)
{
  return a1 + 128;
}

uint64_t sub_21630465C(uint64_t a1)
{
  *(void *)a1 = off_26C6C5A60;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = &off_26C6C5CC8;
  sub_2161868BC((const void **)(a1 + 224), 0);
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(void *)(a1 + 208) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(void *)(a1 + 176) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }
  CFStringRef v6 = (void **)(a1 + 104);
  sub_2162632A0(&v6);
  sub_2161868BC((const void **)(a1 + 96), 0);
  sub_2161868BC((const void **)(a1 + 88), 0);
  sub_2161868BC((const void **)(a1 + 80), 0);
  sub_2161868BC((const void **)(a1 + 72), 0);
  sub_2161868BC((const void **)(a1 + 64), 0);
  return a1;
}

void sub_21630474C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21630476C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9738;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2163047C0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2163047EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216304824(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216304854(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC278)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216304898(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, void *a6)
{
  uint64_t v6 = a3;
  *(_DWORD *)a1 = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v9 = a3 - 1;
  *(void *)(a1 + 8) = a3 - 1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1065353216;
  uint64_t v40 = (char **)(a1 + 16);
  *(void *)(a1 + 16) = sub_216328230(a6, 2 * (a3 - 1));
  uint64_t v10 = sub_216328230(a6, 4 * *(void *)(a1 + 8));
  unint64_t v11 = *(unsigned int *)(a2 + 56 * v9 + 28);
  unint64_t v12 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFF1 | (v11 >> 2) & 2 | (4 * ((v11 >> 1) & 3));
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v12;
  int v13 = (*(uint64_t (**)(void))(**(void **)(a2 + 56) + 96))(*(void *)(a2 + 56));
  uint64_t v14 = 128;
  if (v13) {
    uint64_t v14 = 0;
  }
  unint64_t v15 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFF7FLL | v14;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v15;
  if (v9 < 1)
  {
LABEL_37:
    *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v15 | 1;
    return a1;
  }
  size_t v16 = 0;
  uint64_t v17 = (unsigned __int16 *)(a2 + 56 * v6 - 56);
  uint64_t v18 = 3;
  LOBYTE(v6) = 1;
  do
  {
    CFIndex v19 = *(unsigned char **)v17;
    __int16 v20 = (*(uint64_t (**)(void, void))(**(void **)v17 + 56))(*(void *)v17, v17[12]);
    unsigned int v21 = (*(uint64_t (**)(unsigned char *))(*(void *)v19 + 40))(v19);
    *(unsigned char *)(*(void *)(a1 + 32) + v18) = 0;
    char v22 = v19[16];
    float v23 = *(float *)(a1 + 56);
    if (v23 >= (*(float (**)(unsigned char *))(*(void *)v19 + 80))(v19)) {
      float v24 = (*(float (**)(unsigned char *))(*(void *)v19 + 80))(v19);
    }
    else {
      float v24 = *(float *)(a1 + 56);
    }
    *(float *)(a1 + 56) = v24;
    if ((*(unsigned int (**)(unsigned char *))(*(void *)v19 + 64))(v19) == 9
      || (*(unsigned int (**)(unsigned char *))(*(void *)v19 + 64))(v19) == 10)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + v18 - 3) = (*(uint64_t (**)(unsigned char *))(*(void *)v19 + 32))(v19);
      int v25 = (*(uint64_t (**)(unsigned char *))(*(void *)v19 + 64))(v19);
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      if (v25 == 9) {
        char v28 = 1;
      }
      else {
        char v28 = 2;
      }
      *(unsigned char *)(v26 + v18) |= v28;
      uint64_t v29 = v27 | 0x100;
    }
    else
    {
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v30 = *(void *)(a1 + 40);
      *(unsigned char *)(v26 + v18 - 3) = v21 - v22;
      uint64_t v29 = v30 | 0x200;
    }
    uint64_t v31 = v26 + v18;
    *(unsigned char *)(v31 - 2) = v21;
    *(unsigned char *)(v31 - 1) = v22;
    uint64_t v32 = *(void *)(a1 + 48) + v21;
    *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v29;
    *(void *)(a1 + 48) = v32;
    if (v6) {
      LODWORD(v6) = (*(uint64_t (**)(unsigned char *))(*(void *)v19 + 96))(v19);
    }
    else {
      LODWORD(v6) = 0;
    }
    int v33 = (*(uint64_t (**)(unsigned char *))(*(void *)v19 + 64))(v19);
    if (v33 == 4)
    {
      uint64_t v35 = *(void *)(a1 + 40);
      if ((v35 & 0x40) == 0 && (*((void *)v19 + 15) || *((void *)v19 + 16))) {
        v35 |= 0x40uLL;
      }
      *(unsigned char *)(*(void *)(a1 + 32) + v18) |= 4u;
      *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v35 | 0x10;
    }
    else if (v33 == 2)
    {
      if (a5)
      {
        unint64_t v34 = *(char **)(a1 + 24);
        if (!v34)
        {
          unint64_t v34 = (char *)sub_216328230(a6, 2 * *(void *)(a1 + 8));
          *(void *)(a1 + 24) = v34;
          if (v18 != 3)
          {
            memcpy(v34, *(const void **)(a1 + 16), v16);
            unint64_t v34 = *(char **)(a1 + 24);
          }
        }
        *(_WORD *)&(*v40)[v16] = *((_WORD *)v19 + 56);
      }
      else
      {
        unint64_t v34 = *v40;
      }
      *(_WORD *)&v34[v16] = v20;
      uint64_t v37 = *(void *)(a1 + 40);
      *(unsigned char *)(*(void *)(a1 + 32) + v18) |= 8u;
      *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v37 | 0x20;
      goto LABEL_34;
    }
    uint64_t v36 = *(void *)(a1 + 24);
    *(_WORD *)(*(void *)(a1 + 16) + v16) = v20;
    if (v36) {
      *(_WORD *)(v36 + v16) = v20;
    }
LABEL_34:
    v17 -= 28;
    v16 += 2;
    v18 += 4;
    --v9;
  }
  while (v9);
  if (v6)
  {
    unint64_t v15 = *(void *)(a1 + 40);
    goto LABEL_37;
  }
  return a1;
}

uint64_t sub_216304D08(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7)
{
  *(_DWORD *)a1 = a5;
  uint64_t v11 = *(void *)(a4 + 8);
  *(_OWORD *)(a1 + 16) = 0u;
  unint64_t v12 = (void *)(a1 + 16);
  uint64_t v13 = v11 + a3;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(void *)(a1 + 16) = sub_216328230(a7, 2 * v13);
  uint64_t v36 = a7;
  uint64_t v14 = sub_216328230(a7, 4 * *(void *)(a1 + 8));
  uint64_t v15 = *(void *)(a1 + 40) | 0x83;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v15;
  if (a3)
  {
    uint64_t v37 = v12;
    uint64_t v16 = 0;
    size_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      CFIndex v19 = *(_WORD **)a2;
      __int16 v20 = a2[13];
      unsigned int v21 = (*(uint64_t (**)(void))(**(void **)a2 + 40))(*(void *)a2);
      char v22 = *((unsigned char *)v19 + 16);
      float v23 = *(float *)(a1 + 56);
      if (v23 >= (*(float (**)(_WORD *))(*(void *)v19 + 80))(v19))
      {
        (*(void (**)(_WORD *))(*(void *)v19 + 80))(v19);
        float v24 = *(float *)(a1 + 56);
      }
      else
      {
        float v24 = *(float *)(a1 + 56);
        float v25 = v24;
      }
      *(float *)(a1 + 56) = v24 * v25;
      uint64_t v26 = (unsigned char *)(*(void *)(a1 + 32) + v16);
      *uint64_t v26 = v21 - v22;
      v26[1] = v21 - v22;
      v26[2] = v22;
      void v26[3] = 0;
      *(void *)(a1 + 48) += v21;
      int v27 = (*(uint64_t (**)(_WORD *))(*(void *)v19 + 64))(v19);
      if (v27 == 4) {
        break;
      }
      if (v27 != 2) {
        goto LABEL_14;
      }
      if (a6)
      {
        char v28 = *(_WORD **)(a1 + 24);
        if (!v28)
        {
          char v28 = (_WORD *)sub_216328230(v36, 2 * *(void *)(a1 + 8));
          *(void *)(a1 + 24) = v28;
          if (v18)
          {
            memcpy(v28, *(const void **)(a1 + 16), v17);
            char v28 = *(_WORD **)(a1 + 24);
          }
        }
        uint64_t v29 = (_WORD *)*v37;
        *(_WORD *)(*v37 + 2 * v18) = v19[56];
      }
      else
      {
        char v28 = (_WORD *)*v37;
        uint64_t v29 = (_WORD *)*v37;
      }
      v28[v18] = v20;
      uint64_t v32 = *(void *)(a1 + 40);
      *(unsigned char *)(*(void *)(a1 + 32) + v16 + 3) |= 8u;
      *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v32 | 0x20;
LABEL_18:
      ++v18;
      v17 += 2;
      v16 += 4;
      a2 += 28;
      if (a3 == v18) {
        goto LABEL_21;
      }
    }
    uint64_t v30 = *(void *)(a1 + 40);
    *(unsigned char *)(*(void *)(a1 + 32) + v16 + 3) |= 4u;
    *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v30 | 0x10;
LABEL_14:
    uint64_t v29 = *(_WORD **)(a1 + 16);
    uint64_t v31 = *(void *)(a1 + 24);
    v29[v18] = v20;
    if (v31) {
      *(_WORD *)(v31 + 2 * v18) = v20;
    }
    goto LABEL_18;
  }
  uint64_t v29 = (_WORD *)*v12;
LABEL_21:
  memcpy(&v29[a3], *(const void **)a4, 2 * *(void *)(a4 + 8));
  uint64_t v33 = *(void *)(a1 + 24);
  if (v33) {
    memcpy((void *)(v33 + 2 * a3), *(const void **)a4, 2 * *(void *)(a4 + 8));
  }
  bzero((void *)(*(void *)(a1 + 32) + 4 * a3), 4 * *(void *)(a4 + 8));
  return a1;
}

__CFString *sub_216304FF8(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (*(void *)(a1 + 8))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (!v4) {
        uint64_t v4 = *(void *)(a1 + 16);
      }
      CFStringRef v5 = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(v4 + 2 * v3), *(_DWORD *)a1);
      if (v5) {
        CFStringAppend(Mutable, v5);
      }
      ++v3;
    }
    while (v3 < *(void *)(a1 + 8));
  }
  return Mutable;
}

__CFString *sub_216305080(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v3 = a3;
  unint64_t v6 = a2 + a3;
  if (a2 + a3 > *(void *)(a1 + 8)) {
    return 0;
  }
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (a2 < v6)
  {
    uint64_t v9 = 2 * a2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 24);
      if (!v10) {
        uint64_t v10 = *(void *)(a1 + 16);
      }
      CFStringRef v11 = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(v10 + v9), *(_DWORD *)a1);
      if (v11) {
        CFStringAppend(Mutable, v11);
      }
      v9 += 2;
      --v3;
    }
    while (v3);
  }
  return Mutable;
}

const __CFString *sub_216305130@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  CFStringRef result = (const __CFString *)sub_21610FC8C(a2, *(void *)(a1 + 8));
  if (*(void *)(a1 + 8))
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6) {
        uint64_t v6 = *(void *)(a1 + 16);
      }
      CFStringRef result = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(v6 + 2 * v5), *(_DWORD *)a1);
      if (result) {
        CFStringRef result = (const __CFString *)CFStringGetLength(result);
      }
      *(_WORD *)(*a2 + 2 * v5++) = (_WORD)result;
    }
    while (v5 < *(void *)(a1 + 8));
  }
  return result;
}

void sub_2163051AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__CFString *sub_2163051C8(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2) {
    return 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  uint64_t v6 = Mutable;
  uint64_t v7 = *(void *)(a1 + 32);
  CFIndex v8 = *(unsigned __int8 *)(v7 + 4 * a2);
  if (!*(unsigned char *)(v7 + 4 * a2))
  {
    if (!Mutable) {
      return v6;
    }
    CFRelease(Mutable);
    return 0;
  }
  uint64_t v9 = *(unsigned __int8 *)(v7 + 4 * a2 + 2);
  CFStringRef v10 = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * a2), *(_DWORD *)a1);
  CFStringRef v11 = v10;
  if (v10 && CFStringGetLength(v10) > v8)
  {
    v14.location = 0;
    v14.length = v8;
    CFStringRef v12 = CFStringCreateWithSubstring(v4, v11, v14);
    CFStringAppend(v6, v12);
    CFRelease(v12);
    if (!v9) {
      return v6;
    }
  }
  else
  {
    CFStringAppend(v6, v11);
    if (!v9) {
      return v6;
    }
  }
  do
  {
    CFStringAppend(v6, @"'");
    --v9;
  }
  while (v9);
  return v6;
}

__CFString *sub_2163052DC(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (*(void *)(a1 + 8))
  {
    unint64_t v3 = 0;
    do
    {
      CFAllocatorRef v4 = sub_2163051C8(a1, v3);
      if (!v4) {
        break;
      }
      unint64_t v5 = v4;
      CFStringAppend(Mutable, v4);
      CFRelease(v5);
      ++v3;
    }
    while (v3 < *(void *)(a1 + 8));
  }
  return Mutable;
}

BOOL sub_216305364(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(const void **)a2;
  return v2 <= (uint64_t)(*(void *)(a2 + 8) - (void)v3) >> 1 && memcmp(*(const void **)(a1 + 16), v3, 2 * v2) == 0;
}

uint64_t sub_2163053A8(uint64_t a1, const __CFURL *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2161808CC(a1);
  *(_OWORD *)(v4 + 36sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  CFErrorRef error = 0;
  if (!a2)
  {
LABEL_9:
    sub_21610B834(__p, "");
    goto LABEL_10;
  }
  if (!CFURLResourceIsReachable(a2, &error))
  {
    if (error) {
      CFRelease(error);
    }
    goto LABEL_9;
  }
  if (CFURLGetFileSystemRepresentation(a2, 1u, buffer, 1024)) {
    unint64_t v5 = (char *)buffer;
  }
  else {
    unint64_t v5 = "";
  }
  sub_21610B834(__p, v5);
LABEL_10:
  unint64_t v6 = v10;
  unsigned __int8 v7 = v10;
  if ((v10 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (v6)
  {
    sub_216305530(a1, (char *)__p);
    unsigned __int8 v7 = v10;
  }
  if ((v7 & 0x80) != 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_2163054C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(void **)(v15 + 352);
  if (v18)
  {
    *(void *)(v15 + 36sub_21617DB94((const void **)&__p, 0) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *v16;
  uint64_t *v16 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 72))(v19);
  }
  sub_21618098C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_216305530(uint64_t a1, char *a2)
{
  sub_216128C80((uint64_t)v11);
  __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (a2[23] >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(char **)a2;
  }
  if (sub_21617E494(a1, v4, "r"))
  {
    unint64_t v5 = *(_WORD **)(a1 + 8);
    if (v5 && *(void *)(a1 + 16) && *v5 == 1) {
      operator new();
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24)), 0);
    unint64_t v6 = sub_216129E78(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Korean/CustomizedLexicon.cpp", 82);
    sub_216129E78(v6, (uint64_t)"(", 1);
    unsigned __int8 v7 = (void *)std::ostream::operator<<();
    CFIndex v8 = sub_216129E78(v7, (uint64_t)") [", 3);
    uint64_t v9 = sub_216129E78(v8, (uint64_t)"m_mmap.open(filePath.c_str(), \"r\")", 34);
    sub_216129E78(v9, (uint64_t)"] ", 2);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  v11[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](&v13);
  return 0;
}

void sub_2163057F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x2166CA800](v9, 0x10A1C40079592F6);
  sub_2161ADAE8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216305830(void *a1)
{
  sub_2163058AC((uint64_t)a1);
  unint64_t v2 = (void *)a1[44];
  if (v2)
  {
    a1[45] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[43];
  a1[43] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }

  return sub_21618098C((uint64_t)a1);
}

uint64_t sub_2163058AC(uint64_t a1)
{
  sub_216180AD8(a1);
  uint64_t result = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = 0;
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 72);
    return v3();
  }
  return result;
}

void sub_216305918(char **a1, uint64_t a2, int a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5 = a1;
  if (a3)
  {
    unint64_t v6 = (unsigned __int16 *)(*(void *)(a2 + 376) + 2 * a3);
    unint64_t v7 = *v6;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    if (v7)
    {
      uint64_t v9 = (char *)sub_216253FD4(v7);
      unsigned __int8 v10 = a4;
      CFStringRef v11 = v9;
      uint64_t v12 = 0;
      CFRange v14 = &v9[40 * v13];
      *unint64_t v5 = v9;
      v5[1] = v9;
      v5[2] = v14;
      uint64_t v30 = v5;
      do
      {
        uint64_t v15 = v6 + 2;
        uint64_t v16 = v6[1];
        v6 += v16 + 2;
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = a5;
        }
        if (v16) {
          uint64_t v18 = v15;
        }
        else {
          uint64_t v18 = v10;
        }
        __int16 v19 = *v6;
        if (v11 >= v14)
        {
          unsigned int v21 = *v5;
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v21) >> 3) + 1;
          if (v22 > 0x666666666666666) {
            sub_21610CB04();
          }
          if (0x999999999999999ALL * ((v14 - v21) >> 3) > v22) {
            unint64_t v22 = 0x999999999999999ALL * ((v14 - v21) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v14 - v21) >> 3) >= 0x333333333333333) {
            unint64_t v23 = 0x666666666666666;
          }
          else {
            unint64_t v23 = v22;
          }
          float v24 = (char *)sub_216253FD4(v23);
          uint64_t v26 = &v24[8 * ((v11 - v21) >> 3)];
          unsigned __int8 v10 = a4;
          *(void *)uint64_t v26 = a4;
          *((void *)v26 + 1) = a5;
          *((void *)v26 + 2) = v18;
          *((void *)v26 + 3) = v17;
          *((_WORD *)v26 + 16) = v19;
          int v27 = v26;
          if (v11 != v21)
          {
            do
            {
              long long v28 = *(_OWORD *)(v11 - 40);
              long long v29 = *(_OWORD *)(v11 - 24);
              *((_WORD *)v27 - 4) = *((_WORD *)v11 - 4);
              *(_OWORD *)(v27 - 24) = v29;
              *(_OWORD *)(v27 - 4sub_21617DB94((const void **)&__p, 0) = v28;
              v27 -= 40;
              v11 -= 40;
            }
            while (v11 != v21);
            CFStringRef v11 = v21;
          }
          CFRange v14 = &v24[40 * v25];
          __int16 v20 = v26 + 40;
          unint64_t v5 = v30;
          *uint64_t v30 = v27;
          v30[1] = v26 + 40;
          v30[2] = v14;
          if (v11)
          {
            operator delete(v11);
            unsigned __int8 v10 = a4;
          }
        }
        else
        {
          *(void *)CFStringRef v11 = v10;
          *((void *)v11 + 1) = a5;
          *((void *)v11 + 2) = v18;
          *((void *)v11 + 3) = v17;
          __int16 v20 = v11 + 40;
          *((_WORD *)v11 + 16) = v19;
        }
        v5[1] = v20;
        ++v12;
        CFStringRef v11 = v20;
      }
      while (v12 != v7);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_216305B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    *(void *)(a10 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216305B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (result)
  {
    uint64_t result = *(void **)(a1 + 344);
    if (result)
    {
      v7[0] = &unk_26C6F63A8;
      v7[1] = a1;
      v7[2] = a3;
      v7[3] = v7;
      (*(void (**)(void *, uint64_t, void *))(*result + 80))(result, a2, v7);
      return sub_216198AB4(v7);
    }
  }
  return result;
}

void sub_216305C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198AB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216305C28(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = (void *)result[43];
    if (result)
    {
      v5[0] = &unk_26C6C8648;
      v5[1] = v4;
      v5[2] = a4;
      v5[3] = v5;
      (*(void (**)(void *, uint64_t, uint64_t, void *))(*result + 8))(result, a2, 2 * a3, v5);
      return sub_216198FB8(v5);
    }
  }
  return result;
}

void sub_216305CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216198FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216305CF4(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  v7[4] = *MEMORY[0x263EF8340];
  char v6 = a4;
  unsigned __int8 v5 = 0;
  v7[0] = &unk_26C6C86A0;
  v7[1] = &v6;
  v7[2] = &v5;
  v7[3] = v7;
  sub_216305C28(a1, a2, a3, (uint64_t)v7);
  sub_2163062E0(v7);
  return v5;
}

void sub_216305D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2163062E0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216305DA4()
{
}

__n128 sub_216305DB8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C6F63A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216305E04(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F63A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216305E34(uint64_t a1, uint64_t a2, unsigned __int16 **a3, void *a4, uint64_t *a5, unsigned char *a6)
{
  uint64_t v9 = *a5;
  if (*a3) {
    uint64_t v10 = *a4 >> 1;
  }
  else {
    uint64_t v10 = 0;
  }
  sub_216305918(&v15, *(void *)(a1 + 8), *(_DWORD *)a2, *a3, v10);
  CFStringRef v11 = v15;
  uint64_t v12 = v16;
  if (v15 != v16)
  {
    uint64_t v13 = v15;
    do
    {
      sub_216305F80(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v13, v9, (uint64_t)a6, *(float *)(a2 + 4));
      v13 += 40;
      if (*a6) {
        BOOL v14 = 1;
      }
      else {
        BOOL v14 = v13 == v12;
      }
    }
    while (!v14);
  }
  if (v11)
  {
    operator delete(v11);
  }
}

void sub_216305F1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216305F34(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6408)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216305F74()
{
  return &unk_26C6F6408;
}

uint64_t sub_216305F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v7 = a3;
  float v6 = a5;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, float *, uint64_t))(*(void *)a1 + 48))(a1, a2, &v7, &v6, a4);
}

void sub_216305FE0()
{
}

__n128 sub_216305FF4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C6C8648;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216306040(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C8648;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216306070(uint64_t a1, int *a2, unsigned __int16 **a3, void *a4, unsigned char *a5)
{
  if (*a3) {
    uint64_t v7 = *a4 >> 1;
  }
  else {
    uint64_t v7 = 0;
  }
  sub_216305918(&v13, *(void *)(a1 + 8), *a2, *a3, v7);
  CFIndex v8 = v13;
  uint64_t v9 = v14;
  if (v13 != v14)
  {
    uint64_t v10 = v13;
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 24);
      if (!v11) {
        sub_21610B7AC();
      }
      (*(void (**)(uint64_t, char *, unsigned char *))(*(void *)v11 + 48))(v11, v10, a5);
      v10 += 40;
      if (*a5) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v10 == v9;
      }
    }
    while (!v12);
  }
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_21630616C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216306188(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163061C8()
{
  return &unk_26C6BCA10;
}

void sub_2163061D8()
{
}

__n128 sub_2163061EC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C6C86A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216306238(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C86A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216306268(uint64_t result, uint64_t a2, unsigned char *a3)
{
  __int16 v3 = *(_WORD *)(a2 + 32);
  if ((v3 & 1) != 0 || (v3 & 2) != 0 && **(unsigned char **)(result + 8))
  {
    **(unsigned char **)(result + 16) = 1;
    *a3 = 1;
  }
  return result;
}

uint64_t sub_216306294(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCA20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163062D4()
{
  return &unk_26C6BCA20;
}

void *sub_2163062E0(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216306364(uint64_t a1, void *a2)
{
  __p = 0;
  unint64_t v23 = 0;
  float v24 = 0;
  uint64_t v3 = a2[6];
  if (a2[7] != v3)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v3 + 8 * v5);
      int v7 = *(char *)(v6 + 55);
      if (v7 >= 0) {
        uint64_t v8 = v6 + 32;
      }
      else {
        uint64_t v8 = *(void *)(v6 + 32);
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(v6 + 55);
      }
      else {
        uint64_t v9 = *(void *)(v6 + 40);
      }
      uint64_t v10 = *(void **)(a1 + 24);
      if (v10 && (sub_216305CF4(v10, v8, v9, 0) & 1) != 0
        || (uint64_t v11 = *(void *)(a1 + 8)) != 0 && (LODWORD(v25) = 0, sub_216357BCC(v11, v8, v9, &v25)) && (v25 & 2) != 0)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 96))(v6) == 83)
        {
          *(unsigned char *)(v6 + 152) = 0;
        }
        else
        {
          BOOL v12 = v23;
          if (v23 >= v24)
          {
            BOOL v14 = (char *)__p;
            uint64_t v15 = (v23 - (unsigned char *)__p) >> 3;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v17 = v24 - (unsigned char *)__p;
            if ((v24 - (unsigned char *)__p) >> 2 > v16) {
              unint64_t v16 = v17 >> 2;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18)
            {
              __int16 v19 = (char *)sub_2160FFAA8((uint64_t)&v24, v18);
              BOOL v14 = (char *)__p;
              BOOL v12 = v23;
            }
            else
            {
              __int16 v19 = 0;
            }
            __int16 v20 = (unint64_t *)&v19[8 * v15];
            *__int16 v20 = v5;
            uint64_t v13 = (char *)(v20 + 1);
            while (v12 != v14)
            {
              unint64_t v21 = *((void *)v12 - 1);
              v12 -= 8;
              *--__int16 v20 = v21;
            }
            __p = v20;
            unint64_t v23 = v13;
            float v24 = &v19[8 * v18];
            if (v14) {
              operator delete(v14);
            }
          }
          else
          {
            *(void *)unint64_t v23 = v5;
            uint64_t v13 = v12 + 8;
          }
          unint64_t v23 = v13;
        }
      }
      ++v5;
      uint64_t v3 = a2[6];
    }
    while (v5 < (a2[7] - v3) >> 3);
  }
  sub_21621671C(a2, (unint64_t **)&__p);
  if (__p)
  {
    unint64_t v23 = (char *)__p;
    operator delete(__p);
  }
}

void sub_216306550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216306574(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2[6];
  uint64_t v5 = a2[7];
  uint64_t v6 = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x10)
  {
    if (*(void *)a3 >= (unint64_t)(v6 >> 3)) {
      uint64_t v10 = v6 >> 3;
    }
    else {
      uint64_t v10 = *(void *)a3;
    }
    if (v10)
    {
      unint64_t v11 = 0;
      double v12 = -1.79769313e308;
      do
      {
        double v13 = (*(double (**)(void))(**(void **)(v4 + 8 * v11) + 392))(*(void *)(v4 + 8 * v11));
        if (v12 < v13) {
          double v12 = v13;
        }
        ++v11;
        uint64_t v4 = a2[6];
        uint64_t v5 = a2[7];
        if (*(void *)a3 >= (unint64_t)((v5 - v4) >> 3)) {
          unint64_t v14 = (v5 - v4) >> 3;
        }
        else {
          unint64_t v14 = *(void *)a3;
        }
      }
      while (v11 < v14);
    }
    else
    {
      double v12 = -1.79769313e308;
    }
    __p = 0;
    long long v29 = 0;
    uint64_t v30 = 0;
    if (v5 != v4)
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(v4 + 8 * v15);
        uint64_t v17 = *(void *)(a4 + 24);
        uint64_t v31 = v16;
        if (!v17) {
          sub_21610B7AC();
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v31) & 1) == 0
          && (v12 - (*(double (**)(uint64_t))(*(void *)v16 + 392))(v16) > *(double *)(a3 + 16)
           || v15 && (*(double (**)(uint64_t))(*(void *)v16 + 392))(v16) < *(double *)(a3 + 8)))
        {
          unint64_t v18 = v29;
          if (v29 >= v30)
          {
            __int16 v20 = (char *)__p;
            uint64_t v21 = (v29 - (unsigned char *)__p) >> 3;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v23 = v30 - (unsigned char *)__p;
            if ((v30 - (unsigned char *)__p) >> 2 > v22) {
              unint64_t v22 = v23 >> 2;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              uint64_t v25 = (char *)sub_2160FFAA8((uint64_t)&v30, v24);
              __int16 v20 = (char *)__p;
              unint64_t v18 = v29;
            }
            else
            {
              uint64_t v25 = 0;
            }
            uint64_t v26 = (unint64_t *)&v25[8 * v21];
            *uint64_t v26 = v15;
            __int16 v19 = (char *)(v26 + 1);
            while (v18 != v20)
            {
              unint64_t v27 = *((void *)v18 - 1);
              v18 -= 8;
              *--uint64_t v26 = v27;
            }
            __p = v26;
            long long v29 = v19;
            uint64_t v30 = &v25[8 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *(void *)long long v29 = v15;
            __int16 v19 = v18 + 8;
          }
          long long v29 = v19;
        }
        ++v15;
        uint64_t v4 = a2[6];
      }
      while (v15 < (a2[7] - v4) >> 3);
    }
    sub_21621671C(a2, (unint64_t **)&__p);
    if (__p)
    {
      long long v29 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_21630681C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216306844(uint64_t *a1)
{
  sub_216297164(a1);
  uint64_t v2 = a1[5];
  if (v2) {
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
  }
  return v2 != 0;
}

uint64_t sub_2163068A0(uint64_t result)
{
  if (*(unsigned char *)(result + 96) && !*(void *)(result + 8))
  {
    if (*(void *)(result + 40)) {
      return (*(uint64_t (**)(void))(*(void *)result + 16))();
    }
  }
  return result;
}

uint64_t sub_2163068E0()
{
  return 500;
}

uint64_t sub_2163068E8()
{
  return 600;
}

uint64_t sub_2163068F0(uint64_t a1)
{
  sub_216348BE0(*(void **)(a1 + 128));

  return sub_216298304(a1);
}

void sub_21630692C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  CFStringRef v3 = *(const __CFString **)(a3 + 8);
  sub_21610B834(&__p, off_26797C580[0]);
  sub_216221EB8((int)&v5, v3);
}

void sub_2163069FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16)
{
}

BOOL sub_216306A38(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  v10[4] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 128) && *(unsigned char *)(a1 + 96))
  {
    uint64_t v8 = [a2 a2:a3];
    v10[0] = &unk_26C6C8120;
    v10[1] = a1;
    v10[3] = v10;
    sub_21627C778(v8, (uint64_t)v10);
    sub_216307254(v10);
  }
  return sub_216297AA8(a1, a2, a3, a4);
}

void sub_216306B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216307254((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216306B1C(uint64_t a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 55);
  if (v4 >= 0) {
    uint64_t v5 = (unsigned __int16 *)(a2 + 32);
  }
  else {
    uint64_t v5 = *(unsigned __int16 **)(a2 + 32);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 40);
  }
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 2 * v6;
    do
    {
      if (v5[v7 / 2] - 12593 >= 0x33)
      {
        uint64_t v9 = 2 * v6;
        uint64_t v10 = v5;
        while (*v10 - 48 < 0xA)
        {
          ++v10;
          v9 -= 2;
          if (!v9) {
            goto LABEL_21;
          }
        }
        uint64_t v11 = 2 * v6;
        double v12 = v5;
        while ((unsigned __int16)(*v12 + 10332) <= 0xD45Bu && (unsigned __int16)(*v12 - 12644) < 0xFFCDu)
        {
          ++v12;
          v11 -= 2;
          if (!v11) {
            goto LABEL_21;
          }
        }
        uint64_t v21 = -v6;
        while (1)
        {
          unsigned __int16 v22 = v5[(unint64_t)v8 / 2 - 1];
          unsigned int v23 = (unsigned __int16)(v22 + 21504) >> 2;
          unsigned int v24 = (unsigned __int16)(v22 - 48);
          BOOL v25 = v23 >= 0xAE9 && v24 >= 0xA;
          if (!v25) {
            break;
          }
          v8 -= 2;
          BOOL v25 = __CFADD__(v21++, 1);
          if (v25) {
            return;
          }
        }
        uint64_t v6 = -v21;
        uint64_t v26 = v5;
        while (*v26 - 12593 > 0x32)
        {
          ++v26;
          v8 -= 2;
          if (!v8) {
            goto LABEL_22;
          }
        }
        goto LABEL_21;
      }
      v7 += 2;
    }
    while (v8 != v7);
    if ((unint64_t)(v6 - 2) >= 4) {
      goto LABEL_21;
    }
LABEL_23:
    sub_21630E7A0(v5, v6, __p);
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if ((v29 & 0x80u) == 0) {
      unint64_t v15 = __p;
    }
    else {
      unint64_t v15 = (void **)__p[0];
    }
    if ((v29 & 0x80u) == 0) {
      CFIndex v16 = v29;
    }
    else {
      CFIndex v16 = (CFIndex)__p[1];
    }
    CFStringRef v17 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UniChar *)v15, v16);
    v27[5] = v17;
    CFStringRef v18 = CFStringCreateWithCharacters(v14, v5, v6);
    CFStringRef v19 = v18;
    v27[4] = v18;
    if (v17)
    {
      if (!v18)
      {
LABEL_34:
        CFRelease(v17);
LABEL_35:
        if ((char)v29 < 0) {
          operator delete(__p[0]);
        }
        return;
      }
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
      sub_21629D058(v27, v17, v19, v20);
      v27[0] = &unk_26C6BD390;
      (*(void (**)(uint64_t, void *))(*(void *)a1 + 216))(a1, v27);
      sub_21629D0B8(v27);
    }
    else if (!v18)
    {
      goto LABEL_35;
    }
    CFRelease(v19);
    if (!v17) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_21:
  double v13 = sub_216268B0C();
  uint64_t v5 = (unsigned __int16 *)*v13;
  uint64_t v6 = v13[1];
LABEL_22:
  if (v6) {
    goto LABEL_23;
  }
}

void sub_216306DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CFStringRef sub_216306E14(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1[1]) {
    return 0;
  }
  CFStringRef result = *(const __CFString **)(a2 + 8);
  if (!result) {
    return result;
  }
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(result);
  unint64_t v6 = CFStringGetLength(*(CFStringRef *)(a2 + 16));
  BOOL v8 = (unint64_t)(Length - 33) < 0xFFFFFFFFFFFFFFE0 || v6 == 0 || v6 > 0x20;
  int v9 = v8;
  if (!v8)
  {
    uint64_t v10 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v11 = *(void *)(a2 + 16);
      int v13 = 138412546;
      uint64_t v14 = v11;
      __int16 v15 = 2112;
      uint64_t v16 = v12;
      _os_log_debug_impl(&dword_2160F5000, v10, OS_LOG_TYPE_DEBUG, "[MJL::registerToLearningDictionary] Learning phrase %@ (%@)", (uint8_t *)&v13, 0x16u);
    }
    (*(void (**)(void *, void, uint64_t))(*a1 + 208))(a1, a1[1], a2);
  }
  return (const __CFString *)(v9 ^ 1u);
}

void sub_216306F50(uint64_t a1, uint64_t *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E590, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E590))
  {
    sub_21610B834(&qword_26797E598, off_26797C580[0]);
    dword_26797E5B0 = 0;
    word_26797E5B4 = 1;
    byte_26797E5B6 = 0;
    sub_21610B834(qword_26797E5B8, off_26797C588);
    *(int *)((char *)&dword_26797E5D0 + 3) = 0;
    dword_26797E5D0 = 0;
    __cxa_atexit((void (*)(void *))sub_2163072D8, 0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E590);
  }
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  sub_21629D1F4((char *)&v3, &qword_26797E598, (long long *)&qword_26797E5D8, 2uLL);
  sub_21618B7D8(a2);
  *(_OWORD *)a2 = v3;
  a2[2] = v4;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  uint64_t v5 = (void **)&v3;
  sub_216175BF4(&v5);
}

void sub_216307064(_Unwind_Exception *a1)
{
  if (byte_26797E5AF < 0) {
    operator delete((void *)qword_26797E598);
  }
  __cxa_guard_abort(&qword_26797E590);
  _Unwind_Resume(a1);
}

__CFString *sub_21630709C()
{
  return @"LearningDictionaryKorean";
}

__CFString *sub_2163070A8()
{
  return @"DynamicPhraseLexicon_ko_KR.db";
}

void sub_2163070B8(void *a1)
{
  sub_216297064(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2163070F0()
{
  return 0;
}

uint64_t sub_2163070F8()
{
  return 0;
}

uint64_t sub_216307100()
{
  return 17;
}

uint64_t sub_216307108()
{
  return 0;
}

uint64_t sub_216307110()
{
  return 1;
}

uint64_t sub_21630711C()
{
  return 0;
}

__CFString *sub_216307124()
{
  return @"TapTyping";
}

void sub_216307134(void *a1)
{
  sub_21629D0B8(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216307170()
{
}

void *sub_216307184(uint64_t a1)
{
  CFStringRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C8120;
  result[1] = v3;
  return result;
}

uint64_t sub_2163071CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C8120;
  a2[1] = v2;
  return result;
}

BOOL sub_2163071F8(uint64_t a1, uint64_t *a2)
{
  return sub_2163489F0(*(void **)(*(void *)(a1 + 8) + 128), *a2);
}

uint64_t sub_216307208(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC920)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216307248()
{
  return &unk_26C6BC920;
}

void *sub_216307254(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2163072D8()
{
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    if (*((char *)&unk_26797E590 + i + 63) < 0) {
      operator delete(*(void **)((char *)&unk_26797E590 + i + 40));
    }
  }
}

uint64_t sub_216307320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26C6BF880;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 8) + 32) + 32) - 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 32) = 10;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = 0u;
  *(void *)(a1 + 96) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  *(_WORD *)(a1 + 104) = 0;
  return a1;
}

void sub_2163073B8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = (void *)v1[9];
  if (v4)
  {
    v1[10] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2163073E4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF880;
  CFRelease(*(CFTypeRef *)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_216307454(uint64_t a1)
{
  sub_2163073E4(a1);

  JUMPOUT(0x2166CA800);
}

BOOL sub_21630748C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 48;
  uint64_t v2 = *(const void **)(a1 + 48);
  size_t v4 = *(void *)(v3 + 8) - (void)v2;
  uint64_t v6 = a2 + 48;
  uint64_t v5 = *(const void **)(a2 + 48);
  return v4 == *(void *)(v6 + 8) - (void)v5 && memcmp(v2, v5, v4) == 0;
}

void sub_2163074E0(uint64_t *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v6 = (void *)a1[2];
  if (v6)
  {
    uint64_t v7 = [v6 a2:a3];
    unint64_t v8 = (unint64_t)a4[2];
    int v9 = (uint64_t *)a4[1];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = ((char *)v9 - (unsigned char *)*a4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        sub_21610CB04();
      }
      uint64_t v12 = v8 - (void)*a4;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        __int16 v15 = (char *)sub_2160FFAA8((uint64_t)(a4 + 2), v14);
      }
      else {
        __int16 v15 = 0;
      }
      uint64_t v16 = (uint64_t *)&v15[8 * v11];
      uint64_t v17 = &v15[8 * v14];
      uint64_t *v16 = v7;
      uint64_t v10 = v16 + 1;
      CFStringRef v19 = (char *)*a4;
      CFStringRef v18 = (char *)a4[1];
      if (v18 != *a4)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *--uint64_t v16 = v20;
        }
        while (v18 != v19);
        CFStringRef v18 = (char *)*a4;
      }
      *a4 = v16;
      a4[1] = v10;
      a4[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *int v9 = v7;
      uint64_t v10 = v9 + 1;
    }
    a4[1] = v10;
  }
  uint64_t v21 = a1[1];
  if (v21)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v21 + 32));
    if (Count < 1 || a1[4] <= (unint64_t)(((unsigned char *)a4[1] - (unsigned char *)*a4) >> 3))
    {
LABEL_46:
      char v45 = 0;
    }
    else
    {
      while (1)
      {
        unsigned int v23 = (void *)sub_21628F1BC(a1[1], Count - 1);
        uint64_t v26 = [v23 v24:v25];
        if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 72))(v26) == 6
          || (*(unsigned int (**)(uint64_t))(*(void *)v26 + 72))(v26) == 7)
        {
          break;
        }
        if (v23 && objc_msgSend_rawCandidate(v23, v27, v28))
        {
          uint64_t v31 = [v23 v29:v30];
          uint64_t v32 = v31;
          unint64_t v34 = (uint64_t *)a4[1];
          unint64_t v33 = (unint64_t)a4[2];
          if ((unint64_t)v34 >= v33)
          {
            uint64_t v36 = ((char *)v34 - (unsigned char *)*a4) >> 3;
            if ((unint64_t)(v36 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v37 = v33 - (void)*a4;
            uint64_t v38 = v37 >> 2;
            if (v37 >> 2 <= (unint64_t)(v36 + 1)) {
              uint64_t v38 = v36 + 1;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v38;
            }
            if (v39) {
              uint64_t v40 = (char *)sub_2160FFAA8((uint64_t)(a4 + 2), v39);
            }
            else {
              uint64_t v40 = 0;
            }
            long long v41 = (uint64_t *)&v40[8 * v36];
            *long long v41 = v32;
            uint64_t v35 = v41 + 1;
            uint64_t v43 = (char *)*a4;
            int64x2_t v42 = (char *)a4[1];
            if (v42 != *a4)
            {
              do
              {
                uint64_t v44 = *((void *)v42 - 1);
                v42 -= 8;
                *--long long v41 = v44;
              }
              while (v42 != v43);
              int64x2_t v42 = (char *)*a4;
            }
            *a4 = v41;
            a4[1] = v35;
            a4[2] = &v40[8 * v39];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *unint64_t v34 = v31;
            uint64_t v35 = v34 + 1;
          }
          a4[1] = v35;
          if (Count <= 1) {
            goto LABEL_46;
          }
        }
        else
        {
          if ((unint64_t)Count < 2) {
            goto LABEL_46;
          }
          uint64_t v35 = a4[1];
        }
        --Count;
        if (a1[4] <= (unint64_t)(((char *)v35 - (unsigned char *)*a4) >> 3)) {
          goto LABEL_46;
        }
      }
      char v45 = 1;
    }
    CFArrayRef v46 = *(const __CFArray **)(a1[1] + 16);
    if (v46)
    {
      uint64_t v47 = CFArrayGetCount(v46);
      char v48 = v47 < 1 ? 1 : v45;
      if ((v48 & 1) == 0)
      {
        do
        {
          if (a1[4] <= (unint64_t)(((unsigned char *)a4[1] - (unsigned char *)*a4) >> 3)) {
            break;
          }
          uint64_t v49 = v47--;
          unint64_t v50 = (void *)sub_21628F0D0(a1[1], v47);
          uint64_t v53 = v50;
          if (v50 && objc_msgSend_rawCandidate(v50, v51, v52))
          {
            uint64_t v56 = [v53 v54:v55];
            uint64_t v57 = v56;
            int v59 = (uint64_t *)a4[1];
            unint64_t v58 = (unint64_t)a4[2];
            if ((unint64_t)v59 >= v58)
            {
              uint64_t v61 = ((char *)v59 - (unsigned char *)*a4) >> 3;
              if ((unint64_t)(v61 + 1) >> 61) {
                sub_21610CB04();
              }
              uint64_t v62 = v58 - (void)*a4;
              uint64_t v63 = v62 >> 2;
              if (v62 >> 2 <= (unint64_t)(v61 + 1)) {
                uint64_t v63 = v61 + 1;
              }
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64) {
                int v65 = (char *)sub_2160FFAA8((uint64_t)(a4 + 2), v64);
              }
              else {
                int v65 = 0;
              }
              uint64_t v66 = (uint64_t *)&v65[8 * v61];
              *uint64_t v66 = v57;
              unint64_t v60 = v66 + 1;
              unint64_t v68 = (char *)*a4;
              uint64_t v67 = (char *)a4[1];
              if (v67 != *a4)
              {
                do
                {
                  uint64_t v69 = *((void *)v67 - 1);
                  v67 -= 8;
                  *--uint64_t v66 = v69;
                }
                while (v67 != v68);
                uint64_t v67 = (char *)*a4;
              }
              *a4 = v66;
              a4[1] = v60;
              a4[2] = &v65[8 * v64];
              if (v67) {
                operator delete(v67);
              }
            }
            else
            {
              *int v59 = v56;
              unint64_t v60 = v59 + 1;
            }
            a4[1] = v60;
          }
        }
        while (v49 > 1);
      }
    }
  }
}

void sub_2163078D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21630790C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a2 + 72))(a2) == 6
      || (*(unsigned int (**)(uint64_t))(*(void *)a2 + 72))(a2) == 7;
}

void sub_216307994(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v42);
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = v42;
  *(void *)(a1 + 72) = v42;
  uint64_t v4 = v43;
  *(_OWORD *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = v43;
  if (v4 != v3)
  {
    uint64_t v5 = sub_216308080(a1);
    if (v5)
    {
      CFStringRef v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
      if (v6)
      {
        CFStringRef v7 = v6;
        if (CFStringGetLength(v6))
        {
          CFIndex Length = CFStringGetLength(v7);
          *(unsigned char *)(a1 + 105) = CFStringGetCharacterAtIndex(v7, Length - 1) == 32;
        }
      }
    }
    CFStringRef v41 = 0;
    uint64_t v9 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
    if (v9 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = (unint64_t)v9 >> 3;
      if (v11 <= 1) {
        uint64_t v11 = 1;
      }
      uint64_t v39 = v11;
      CFStringRef v40 = 0;
      BOOL v12 = 1;
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v10);
        uint64_t v13 = *(const void **)(*(void *)(a1 + 72) + 8 * v10);
        if ((*(unsigned int (**)(const void *))(*(void *)v13 + 72))(v13) == 6
          || (*(unsigned int (**)(const void *))(*(void *)v13 + 72))(v13) == 7)
        {
          break;
        }
        if (v41 || (*(unsigned int (**)(const void *))(*(void *)v13 + 72))(v13) != 3)
        {
          CFStringRef v18 = (const __CFString *)(*(uint64_t (**)(const void *))(*(void *)v13 + 32))(v13);
          CFStringRef v19 = sub_2163080F8(a1, v13);
          if (v19 && CFEqual(v18, v19))
          {
            CFRelease(v19);
            CFStringRef v19 = 0;
          }
          uint64_t v20 = (*(uint64_t (**)(const void *))(*(void *)v13 + 48))(v13);
          if (v20 - 1 >= 0)
          {
            uint64_t v21 = v20;
            do
            {
              if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) || !v12) {
                break;
              }
              uint64_t v22 = (*(uint64_t (**)(const void *, uint64_t))(*(void *)v13 + 120))(v13, --v21);
              uint64_t v52 = 0;
              uint64_t v53 = &v52;
              uint64_t v54 = 0x2000000000;
              char v55 = 1;
              if (v22)
              {
                unsigned int v23 = (unsigned int *)v22;
                uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 24) + 72) + 8);
                uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 24))(v22);
                uint64_t v27 = v26;
                CFIndex v28 = CFStringGetLength(v18);
                if ((v25 & 0x8000000000000000) == 0 && v25 + v27 <= v28)
                {
                  uint64_t v29 = (*(uint64_t (**)(unsigned int *))(*(void *)v23 + 24))(v23);
                  uint64_t v30 = **(unsigned int **)(a1 + 24);
                  uint64_t v42 = MEMORY[0x263EF8330];
                  *(void *)&long long v43 = 0x40000000;
                  *((void *)&v43 + 1) = sub_21630869C;
                  uint64_t v44 = &unk_2642672A8;
                  uint64_t v47 = (void *)v18;
                  uint64_t v48 = v29;
                  uint64_t v49 = &v41;
                  CFStringRef v50 = v40;
                  uint64_t v51 = v23;
                  char v45 = &v52;
                  uint64_t v46 = a1;
                  sub_2162D47DC(v23, v24, v30, (uint64_t)v18, (uint64_t)v19, 1, (uint64_t)&v42);
                }
              }
              BOOL v12 = *((unsigned char *)v53 + 24) != 0;
              _Block_object_dispose(&v52, 8);
            }
            while (v21 > 0);
          }
          if (v19) {
            CFRelease(v19);
          }
        }
        else
        {
          uint64_t v14 = (*(uint64_t (**)(const void *))(*(void *)v13 + 200))(v13);
          if ((*(uint64_t (**)(const void *))(*(void *)v13 + 48))(v13) == 1)
          {
            __int16 v15 = (unsigned int *)(*(uint64_t (**)(const void *, void))(*(void *)v13 + 120))(v13, 0);
            uint64_t v16 = (const void *)(*(uint64_t (**)(const void *))(*(void *)v13 + 32))(v13);
            if (v14) {
              uint64_t v17 = (void *)CFStringCreateWithFormat(0, 0, @"%@%@", v14, v16);
            }
            else {
              uint64_t v17 = (void *)CFRetain(v16);
            }
            uint64_t v31 = v17;
            uint64_t v32 = *(unsigned int **)(a1 + 24);
            uint64_t v33 = *(void *)(*((void *)v32 + 9) + 8);
            uint64_t v34 = *v32;
            uint64_t v42 = MEMORY[0x263EF8330];
            *(void *)&long long v43 = 0x40000000;
            *((void *)&v43 + 1) = sub_21630893C;
            uint64_t v44 = &unk_26426EC78;
            char v45 = (uint64_t *)a1;
            uint64_t v46 = (uint64_t)v17;
            uint64_t v47 = v15;
            sub_2162D47DC(v15, v33, v34, (uint64_t)v17, 0, 1, (uint64_t)&v42);
            CFRelease(v31);
          }
          CFStringRef v35 = (const __CFString *)(*(uint64_t (**)(const void *))(*(void *)v13 + 200))(v13);
          CFStringRef v40 = v35;
          if (v35) {
            CFStringRef v35 = (const __CFString *)CFStringGetLength(v35);
          }
          CFStringRef v41 = v35;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v10++);
        if (v10 == v39) {
          goto LABEL_41;
        }
      }
      sub_21617AAB8(a1 + 48, *(char **)(a1 + 48), byte_21638F9CC);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 96), 0, &stru_26C6FB1C0);
    }
LABEL_41:
    if (*(void *)(a1 + 56) != *(void *)(a1 + 48)
      && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      sub_21617AAB8(a1 + 48, *(char **)(a1 + 48), byte_21638F9D0);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 96), 0, &stru_26C6FB1C0);
    }
    CFArrayRef v36 = *(const __CFArray **)(a1 + 96);
    CFIndex Count = CFArrayGetCount(v36);
    if (Count)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v36, Count - 1);
      LOBYTE(Count) = sub_2161A1F24(ValueAtIndex);
    }
    *(unsigned char *)(a1 + 104) = Count;
  }
}

void sub_216308060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t sub_216308080(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(v1 + 16);
  if (!v3) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v3);
  if (Count < 1) {
    return 0;
  }
  uint64_t v5 = (void *)sub_21628F0D0(*(void *)(a1 + 8), Count - 1);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = v5;
  if (!objc_msgSend_rawCandidate(v5, v6, v7)) {
    return 0;
  }

  return [v8 v9:v10];
}

CFStringRef sub_2163080F8(uint64_t a1, const void *a2)
{
  if ((*(unsigned int (**)(const void *))(*(void *)a2 + 72))(a2) == 2)
  {
    CFStringRef result = (const __CFString *)__dynamic_cast(a2, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B92A0, 0);
    if (result)
    {
      CFStringRef v5 = result;
      CFStringRef result = (const __CFString *)(*((uint64_t (**)(const __CFString *))result->isa + 26))(result);
      if (result)
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFStringRef v7 = (const __CFString *)(*((uint64_t (**)(const __CFString *))v5->isa + 26))(v5);
        return CFStringCreateCopy(v6, v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 24) + 88) + 8);
    uint64_t v9 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BB158, 0);
    CFStringRef result = 0;
    if (v9) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      if ((*(unsigned int (**)(void *))(*(void *)v9 + 104))(v9) != 64)
      {
        CFStringRef result = (const __CFString *)(*(uint64_t (**)(void *))(*(void *)v9 + 232))(v9);
        if (!result) {
          return result;
        }
        CFStringRef v11 = result;
        CFIndex Length = CFStringGetLength(result);
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFStringRef v14 = (const __CFString *)(*(uint64_t (**)(const void *))(*(void *)a2 + 32))(a2);
        CFIndex v15 = CFStringGetLength(v14);
        CFMutableStringRef theString = CFStringCreateMutable(v13, v15);
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v13, 0, MEMORY[0x263EFFF70]);
        if (!(*(uint64_t (**)(void *))(*(void *)v9 + 48))(v9))
        {
          CFRelease(Mutable);
          return theString;
        }
        uint64_t v26 = v9;
        CFArrayRemoveAllValues(Mutable);
        uint64_t v17 = (*(uint64_t (**)(void *, void))(*(void *)v9 + 120))(v9, 0);
        (*(void (**)(void **__return_ptr))(*(void *)v17 + 56))(&__p);
        if (v30 == __p) {
          goto LABEL_36;
        }
        uint64_t v18 = 0;
        char v28 = 0;
        uint64_t v19 = (unint64_t)((v30 - (unsigned char *)__p) >> 1) <= 1 ? 1 : (v30 - (unsigned char *)__p) >> 1;
        v20.location = 0;
        do
        {
          while (1)
          {
            uint64_t v21 = __p;
            v20.length = *((unsigned __int16 *)__p + v18);
            CFIndex v22 = v20.location + v20.length;
            if (v20.location + v20.length <= Length) {
              break;
            }
            char v28 = 1;
            BOOL v10 = v19 - 1 == v18++;
            if (v10) {
              goto LABEL_31;
            }
          }
          CFStringRef v23 = CFStringCreateWithSubstring(v13, v11, v20);
          CFArrayAppendValue(Mutable, v23);
          CFRelease(v23);
          ++v18;
          v20.location = v22;
        }
        while (v19 != v18);
        uint64_t v9 = v26;
        if ((v28 & 1) == 0)
        {
LABEL_36:
          if ((*(unsigned int (**)(void *))(*(void *)v9 + 552))(v9) != 1
            || sub_216245B28(Mutable))
          {
            CFStringRef v24 = (const __CFString *)(*(uint64_t (**)(const void *))(*(void *)a2 + 32))(a2);
            v32.location = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
            v32.length = v25;
            CFStringCreateWithSubstring(v13, v24, v32);
            operator new();
          }
        }
        uint64_t v21 = __p;
        if (__p)
        {
LABEL_31:
          uint64_t v30 = v21;
          operator delete(v21);
        }
        CFRelease(Mutable);
        CFRelease(theString);
      }
      return 0;
    }
  }
  return result;
}

void sub_216308640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19)
{
  MEMORY[0x2166CA800](v19, 0x1060C40285832E9);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21630869C(uint64_t a1, uint64_t a2, CFIndex range, uint64_t a4, unsigned char *a5)
{
  uint64_t v9 = *(void *)(a1 + 40);
  v17.location = *(void *)(a1 + 56) + a2;
  v17.length = range;
  CFStringRef v10 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 48), v17);
  v11.length = **(void **)(a1 + 64);
  if (v11.length < 1 || v11.length < range)
  {
    CFAllocatorRef v13 = *(char **)(v9 + 48);
    int v16 = sub_216308804(v9, a4, *(void *)(a1 + 80), v10);
    sub_21617A914(v9 + 48, v13, &v16);
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v9 + 96), 0, v10);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9) & 1) == 0) {
      *a5 = 1;
    }
  }
  else
  {
    v11.location = 0;
    CFStringRef v14 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFStringRef *)(a1 + 72), v11);
    if (CFStringHasSuffix(v14, v10))
    {
      **(void **)(a1 + 64) -= range;
    }
    else
    {
      *a5 = 1;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    CFRelease(v14);
  }
  CFRelease(v10);
}

uint64_t sub_216308804(uint64_t a1, uint64_t a2, uint64_t a3, const __CFString *a4)
{
  if (!a2) {
    sub_21628CE20(*(void *)(*(void *)(*(void *)(a1 + 24) + 72) + 8), a4);
  }
  return a2;
}

uint64_t sub_21630893C(uint64_t a1, CFRange range, uint64_t a3, unsigned char *a4)
{
  CFIndex length = range.length;
  uint64_t v8 = *(void *)(a1 + 32);
  v12.location = range.location;
  v12.CFIndex length = length;
  CFStringRef v9 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFStringRef *)(a1 + 40), v12);
  int v11 = sub_216308804(v8, a3, *(void *)(a1 + 48), v9);
  sub_21617AAB8(v8 + 48, *(char **)(v8 + 48), (char *)&v11);
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v8 + 96), 0, v9);
  CFRelease(v9);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
  if ((result & 1) == 0) {
    *a4 = 1;
  }
  return result;
}

__CFString *sub_216308A2C(uint64_t a1, char a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    CFStringRef v6 = @"Empty Input Context.";
LABEL_10:
    CFStringAppend(Mutable, v6);
    return Mutable;
  }
  uint64_t v7 = *(void *)(a1 + 56) - *(void *)(a1 + 48);
  if (v7 >= 1)
  {
    CFIndex v8 = 0;
    uint64_t v9 = (unint64_t)v7 >> 2;
    uint64_t v10 = v9 <= 1 ? 1 : v9;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v8);
      CFStringRef v12 = CFStringCreateWithFormat(v4, 0, @"%@(%d) ", ValueAtIndex, *(unsigned int *)(*(void *)(a1 + 48) + 4 * v8));
      CFStringAppend(Mutable, v12);
      CFRelease(v12);
      ++v8;
    }
    while (v10 != v8);
    if (a2)
    {
      CFStringRef v6 = @" EOS";
      goto LABEL_10;
    }
  }
  return Mutable;
}

uint64_t sub_216308B50(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BF008;
  sub_216308BEC(a1);
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  CFStringRef v5 = (void **)(a1 + 80);
  sub_21613F444(&v5);
  CFStringRef v5 = (void **)(a1 + 56);
  sub_21613F444(&v5);
  CFArrayRef v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_216308BEC(uint64_t a1)
{
  sub_21613F498((uint64_t *)(a1 + 56));
  sub_21613F498((uint64_t *)(a1 + 80));
  if (*(char *)(a1 + 31) < 0)
  {
    **(_WORD **)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    *(_WORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 31) = 0;
  }
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = *(void *)(a1 + 32);
  uint64_t v2 = *(uint64_t **)(a1 + 104);
  CFArrayRef v3 = *(uint64_t **)(a1 + 112);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      if (*v2)
      {
        if (*(char *)(v4 + 79) < 0) {
          operator delete(*(void **)(v4 + 56));
        }
        MEMORY[0x2166CA800](v4, 0x1072C4096C72C6FLL);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(uint64_t **)(a1 + 104);
  }
  *(void *)(a1 + 112) = v2;
}

void sub_216308CA0(uint64_t a1)
{
  sub_216308B50(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216308CD8(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)(a1 + 16);
  }
  else {
    return *(unsigned __int8 *)(a1 + 31);
  }
}

uint64_t sub_216308CF0(uint64_t a1, uint64_t a2)
{
  return (uint64_t)(*(void *)(*(void *)(a1 + 56) + 24 * a2 + 8) - *(void *)(*(void *)(a1 + 56) + 24 * a2)) >> 3;
}

double sub_216308D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 24 * a2) + 8 * a3) + 28);
}

uint64_t sub_216308D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 24 * a2) + 8 * a3) + 18);
}

uint64_t sub_216308D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 56) + 24 * a2) + 8 * a3);
  uint64_t result = v3 + 56;
  if (*(char *)(v3 + 79) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_216308D74()
{
  return 0;
}

uint64_t sub_216308D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return sub_216198804(a4, v5, v6, (uint64_t)&v8);
}

void sub_216308DE8()
{
}

void sub_216308F00(uint64_t a1, void *a2, unint64_t a3)
{
  sub_216308BEC(a1);
  sub_21617FAAC(&__dst, a2, a3);
  uint64_t v6 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = __dst;
  *(void *)(a1 + 24) = v40;
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v6 = *(void ***)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 31);
  }
  char v8 = (void **)((char *)v6 + 2 * v7);
  if (v7 <= 0)
  {
    uint64_t v9 = *(void ****)(a1 + 40);
  }
  else
  {
    uint64_t v9 = *(void ****)(a1 + 40);
    do
    {
      unint64_t v10 = *(void *)(a1 + 48);
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          goto LABEL_47;
        }
        uint64_t v13 = v10 - v11;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)sub_216188754(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        CFRange v17 = (void ***)(v15 + 8 * v12);
        *CFRange v17 = v6;
        uint64_t v9 = v17 + 1;
        uint64_t v19 = *(char **)(a1 + 32);
        uint64_t v18 = *(char **)(a1 + 40);
        if (v18 != v19)
        {
          do
          {
            CFRange v20 = (void **)*((void *)v18 - 1);
            v18 -= 8;
            *--CFRange v17 = v20;
          }
          while (v18 != v19);
          uint64_t v18 = *(char **)(a1 + 32);
        }
        *(void *)(a1 + 32) = v17;
        *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v9;
        *(void *)(a1 + 48) = v15 + 8 * v16;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *v9++ = v6;
      }
      *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v9;
      uint64_t v6 = (void **)((char *)v6 + 2);
    }
    while (v6 < v8);
  }
  unint64_t v21 = *(void *)(a1 + 48);
  if ((unint64_t)v9 >= v21)
  {
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v24 = ((uint64_t)v9 - v23) >> 3;
    if ((unint64_t)(v24 + 1) >> 61) {
LABEL_47:
    }
      sub_21610CB04();
    uint64_t v25 = v21 - v23;
    uint64_t v26 = v25 >> 2;
    if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
      uint64_t v26 = v24 + 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v26;
    }
    if (v27) {
      unint64_t v27 = (unint64_t)sub_216188754(v27);
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = (void ***)(v27 + 8 * v24);
    unint64_t v30 = v27 + 8 * v28;
    *uint64_t v29 = v8;
    CFIndex v22 = v29 + 1;
    CFRange v32 = *(char **)(a1 + 32);
    uint64_t v31 = *(char **)(a1 + 40);
    if (v31 != v32)
    {
      do
      {
        uint64_t v33 = (void **)*((void *)v31 - 1);
        v31 -= 8;
        *--uint64_t v29 = v33;
      }
      while (v31 != v32);
      uint64_t v31 = *(char **)(a1 + 32);
    }
    *(void *)(a1 + 32) = v29;
    *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v22;
    *(void *)(a1 + 48) = v30;
    if (v31) {
      operator delete(v31);
    }
  }
  else
  {
    *uint64_t v9 = v8;
    CFIndex v22 = v9 + 1;
  }
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v22;
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v35 = v34;
  unint64_t v36 = ((v34 << 32) + 0x100000000) >> 32;
  sub_216309338(a1 + 56, v36);
  sub_216309338(a1 + 80, v36);
  if ((v35 & 0x80000000) == 0)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (v35 + 1);
    do
    {
      sub_216309548(*(void *)(a1 + 56) + v37);
      sub_216309548(*(void *)(a1 + 80) + v37);
      v37 += 24;
      --v38;
    }
    while (v38);
  }
  sub_216308DE8();
}

void sub_216309338(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(void *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_2160FFA74();
    }
    uint64_t v11 = 3 * v10;
    uint64_t v12 = (char *)operator new(24 * v10);
    uint64_t v13 = &v12[24 * v5];
    uint64_t v14 = &v12[8 * v11];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        long long v17 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        *((void *)v13 + 2) = v3[2];
        *uint64_t v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      uint64_t v3 = *(void **)a1;
      uint64_t v18 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v18 != v3)
      {
        uint64_t v19 = v18;
        do
        {
          unint64_t v21 = (void *)*(v19 - 3);
          v19 -= 3;
          CFRange v20 = v21;
          if (v21)
          {
            *(v18 - 2) = v20;
            operator delete(v20);
          }
          uint64_t v18 = v19;
        }
        while (v19 != v3);
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    CFIndex v22 = &v4[3 * a2];
    if (v3 != v22)
    {
      uint64_t v23 = *(void **)(a1 + 8);
      do
      {
        uint64_t v25 = (void *)*(v23 - 3);
        v23 -= 3;
        uint64_t v24 = v25;
        if (v25)
        {
          *(v3 - 2) = v24;
          operator delete(v24);
        }
        uint64_t v3 = v23;
      }
      while (v23 != v22);
    }
    *(void *)(a1 + 8) = v22;
  }
}

void sub_216309548(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  if (*(void *)(a1 + 16) - *(void *)a1 <= 0x7FuLL)
  {
    uint64_t v3 = *(unsigned char **)(a1 + 8);
    uint64_t v4 = (char *)operator new(0x80uLL);
    unint64_t v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
    unint64_t v6 = v5;
    if (v3 != v1)
    {
      unint64_t v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v7 = *((void *)v3 - 1);
        v3 -= 8;
        *((void *)v6 - 1) = v7;
        v6 -= 8;
      }
      while (v3 != v1);
    }
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v4 + 128;
    if (v1)
    {
      operator delete(v1);
    }
  }
}

void sub_2163095EC()
{
}

void sub_21630984C(unint64_t *a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void *))(*a2 + 24))(a2);
  uint64_t v5 = a2[7];
  if (v4 < 0)
  {
LABEL_16:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    uint64_t v21 = *(void *)(**(void **)(v5 + 24 * v4) + 40);
    if (*(void *)(v21 + 40))
    {
      CFIndex v22 = 0;
      uint64_t v23 = a1 + 2;
      do
      {
        if ((unint64_t)v22 >= *v23)
        {
          uint64_t v24 = (uint64_t)((uint64_t)v22 - *a1) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v25 = *v23 - *a1;
          uint64_t v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27) {
            uint64_t v28 = (char *)sub_2160FFAA8((uint64_t)(a1 + 2), v27);
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v29 = &v28[8 * v24];
          *(void *)uint64_t v29 = v21;
          CFIndex v22 = v29 + 8;
          uint64_t v31 = (char *)*a1;
          unint64_t v30 = (char *)a1[1];
          if (v30 != (char *)*a1)
          {
            do
            {
              uint64_t v32 = *((void *)v30 - 1);
              v30 -= 8;
              *((void *)v29 - 1) = v32;
              v29 -= 8;
            }
            while (v30 != v31);
            unint64_t v30 = (char *)*a1;
          }
          *a1 = (unint64_t)v29;
          a1[1] = (unint64_t)v22;
          a1[2] = (unint64_t)&v28[8 * v27];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *v22++ = v21;
        }
        a1[1] = (unint64_t)v22;
        uint64_t v21 = *(void *)(v21 + 40);
      }
      while (*(void *)(v21 + 40));
      unint64_t v33 = *a1;
      uint64_t v34 = v22 - 1;
      if ((void *)*a1 != v22 && (unint64_t)v34 > v33)
      {
        unint64_t v36 = v33 + 8;
        do
        {
          uint64_t v37 = *(void *)(v36 - 8);
          *(void *)(v36 - 8) = *v34;
          *v34-- = v37;
          BOOL v38 = v36 >= (unint64_t)v34;
          v36 += 8;
        }
        while (!v38);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = (uint64_t **)(v5 + 24 * v6);
      unint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      if (v8 != v9) {
        break;
      }
LABEL_15:
      if (++v6 == v4 + 1) {
        goto LABEL_16;
      }
    }
    unint64_t v10 = (uint64_t **)(a2[10] + 24 * v6);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    while (1)
    {
      uint64_t v13 = *v8;
      *(void *)(*v8 + 4sub_21617DB94((const void **)&__p, 0) = 0;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = 0;
      float v15 = 0.0;
      uint64_t v16 = v11;
      do
      {
        uint64_t v18 = *v16++;
        uint64_t v17 = v18;
        float v19 = *(float *)(v13 + 24) + *(float *)(v18 + 32);
        if (v19 > v15 || v14 == 0)
        {
          float v15 = v19;
          uint64_t v14 = v17;
        }
      }
      while (v16 != v12);
      if (!v14) {
        break;
      }
      *(void *)(v13 + 4sub_21617DB94((const void **)&__p, 0) = v14;
      *(float *)(v13 + 32) = v15;
      if (++v8 == v9) {
        goto LABEL_15;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_216309A70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216309A90(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v4 = a4;
  uint64_t v109 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  CFStringRef v86 = a4 + 2;
  if (a2)
  {
    if (a2 > 0x333333333333333) {
      sub_21610CB04();
    }
    uint64_t v106 = a4 + 2;
    *(void *)long long buf = sub_21630AE8C(a2);
    unsigned __int8 v103 = *(char **)buf;
    long long v104 = *(char **)buf;
    uint64_t v105 = *(void *)buf + 80 * v6;
    sub_21630ADB8(v4, buf);
    sub_21630AED4((uint64_t)buf);
    if (a2 != 1)
    {
      uint64_t v95 = 0;
      unint64_t v96 = 0;
      uint64_t v97 = 0;
      operator new();
    }
    sub_21630984C((unint64_t *)&v107, a1);
    uint64_t v95 = 0;
    unint64_t v96 = 0;
    uint64_t v97 = 0;
    v94[0] = &v95;
    LOBYTE(v94[1]) = 0;
    uint64_t v7 = operator new(0x18uLL);
    uint64_t v95 = v7;
    unint64_t v96 = v7;
    uint64_t v97 = v7 + 3;
    uint64_t v100 = v7;
    uint64_t v101 = v7;
    *(void *)long long buf = &v97;
    unsigned __int8 v103 = (char *)&v100;
    long long v104 = (char *)&v101;
    LOBYTE(v105) = 0;
    v7[1] = 0;
    v7[2] = 0;
    long long v8 = v107;
    unint64_t v9 = (uint64_t)(*((void *)&v107 + 1) - v107) >> 3;
    *uint64_t v7 = 0;
    sub_21630ACD4(v7, (const void *)v8, *((uint64_t *)&v8 + 1), v9);
    v101 += 3;
    unint64_t v10 = v101;
    LOBYTE(v105) = 1;
    sub_21630AD50((uint64_t)buf);
    unint64_t v96 = v10;
    if ((void)v107)
    {
      *((void *)&v107 + 1) = v107;
      operator delete((void *)v107);
    }
  }
  else
  {
    uint64_t v11 = sub_2162D1CE4(5u);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_2160F5000, v11, OS_LOG_TYPE_DEBUG, "nbest_size >= 1. Returns empty result.", buf, 2u);
    }
    uint64_t v95 = 0;
    unint64_t v96 = 0;
    uint64_t v97 = 0;
  }
  uint64_t v12 = v95;
  CFStringRef v89 = v96;
  if (v95 != v96)
  {
    while (1)
    {
      long long v107 = 0uLL;
      uint64_t v108 = 0;
      __p[1] = 0;
      uint64_t v99 = 0;
      __p[0] = 0;
      sub_21612EA8C(__p, (uint64_t)(v12[1] - *v12) >> 3);
      memset(v94, 0, sizeof(v94));
      sub_216185B34(v94, (uint64_t)(v12[1] - *v12) >> 3);
      uint64_t v13 = *v12;
      if (v12[1] != *v12) {
        break;
      }
      LOWORD(v14) = 0;
      float v17 = 0.0;
      if ((char *)v96 - (char *)v95 != 24)
      {
        uint64_t v16 = 0;
        goto LABEL_88;
      }
LABEL_76:
      unint64_t v53 = v4[1];
      unint64_t v54 = v4[2];
      if (v53 < v54)
      {
        long long v55 = v107;
        *(void *)(v53 + 16) = v108;
        *(_OWORD *)unint64_t v53 = v55;
        uint64_t v108 = 0;
        long long v107 = 0uLL;
        *(_OWORD *)(v53 + 24) = *(_OWORD *)__p;
        uint64_t v56 = v99;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v99 = 0;
        uint64_t v57 = v94[0];
        *(void *)(v53 + 4sub_21617DB94((const void **)&__p, 0) = v56;
        *(void *)(v53 + 48) = v57;
        int v58 = 2;
        goto LABEL_103;
      }
      unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - *v4) >> 4);
      unint64_t v60 = v59 + 1;
      if (v59 + 1 > 0x333333333333333) {
        sub_21610CB04();
      }
      __int16 v61 = v14;
      unint64_t v62 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - *v4) >> 4);
      if (2 * v62 > v60) {
        unint64_t v60 = 2 * v62;
      }
      if (v62 >= 0x199999999999999) {
        unint64_t v63 = 0x333333333333333;
      }
      else {
        unint64_t v63 = v60;
      }
      uint64_t v106 = v86;
      unint64_t v64 = (char *)sub_21630AE8C(v63);
      int v65 = &v64[80 * v59];
      *(void *)long long buf = v64;
      unsigned __int8 v103 = v65;
      uint64_t v105 = (uint64_t)&v64[80 * v66];
      long long v67 = v107;
      *((void *)v65 + 2) = v108;
      *(_OWORD *)int v65 = v67;
      uint64_t v108 = 0;
      long long v107 = 0uLL;
      *((void *)v65 + 3) = 0;
      *((void *)v65 + 4) = 0;
      *((void *)v65 + 5) = 0;
      *(_OWORD *)(v65 + 24) = *(_OWORD *)__p;
      *((void *)v65 + 5) = v99;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v99 = 0;
      *((void *)v65 + 6) = 0;
      *((void *)v65 + 7) = 0;
      *((void *)v65 + 8) = 0;
      *((_OWORD *)v65 + 3) = *(_OWORD *)v94;
      *((void **)v65 + 8) = v94[2];
      memset(v94, 0, sizeof(v94));
      *((float *)v65 + 18) = v17;
      *((_WORD *)v65 + 38) = v61;
      long long v104 = v65 + 80;
      sub_21630ADB8(v4, buf);
      uint64_t v68 = v4[1];
      sub_21630AED4((uint64_t)buf);
      int v58 = 2;
LABEL_111:
      v4[1] = v68;
LABEL_112:
      if (v94[0])
      {
        v94[1] = v94[0];
        operator delete(v94[0]);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (SHIBYTE(v108) < 0) {
        operator delete((void *)v107);
      }
      if (v58 == 3 || !v58)
      {
        v12 += 3;
        if (v12 != v89) {
          continue;
        }
      }
      goto LABEL_121;
    }
    int v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    int v91 = 0;
    float v17 = 0.0;
    while (1)
    {
      int v93 = v14;
      uint64_t v18 = *(void *)(v13 + 8 * v15);
      int v92 = *(unsigned __int16 *)(v18 + 52);
      float v19 = (unsigned __int16 *)(v18 + 56);
      int v20 = *(char *)(v18 + 79);
      if (v20 >= 0) {
        uint64_t v21 = (void *)(v18 + 56);
      }
      else {
        uint64_t v21 = *(void **)(v18 + 56);
      }
      if (v20 >= 0) {
        unint64_t v22 = *(unsigned __int8 *)(v18 + 79);
      }
      else {
        unint64_t v22 = *(void *)(v18 + 64);
      }
      sub_216198220((uint64_t)&v107, v21, v22);
      uint64_t v23 = v12;
      if (*(char *)(v18 + 79) < 0) {
        uint64_t v24 = *(void *)(v18 + 64);
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(v18 + 79);
      }
      uint64_t v25 = (char *)__p[1];
      if (__p[1] >= v99)
      {
        unint64_t v27 = (char *)__p[0];
        int64_t v28 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v30 = v99 - (char *)__p[0];
        if ((v99 - (char *)__p[0]) >> 2 > v29) {
          unint64_t v29 = v30 >> 2;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          uint64_t v32 = (char *)sub_2160FFAA8((uint64_t)&v99, v31);
          unint64_t v27 = (char *)__p[0];
          uint64_t v25 = (char *)__p[1];
        }
        else
        {
          uint64_t v32 = 0;
        }
        unint64_t v33 = &v32[8 * v28];
        *(void *)unint64_t v33 = v24;
        uint64_t v26 = v33 + 8;
        uint64_t v12 = v23;
        while (v25 != v27)
        {
          uint64_t v34 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v33 - 1) = v34;
          v33 -= 8;
        }
        __p[0] = v33;
        __p[1] = v26;
        uint64_t v99 = &v32[8 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(void *)__p[1] = v24;
        uint64_t v26 = v25 + 8;
        uint64_t v12 = v23;
      }
      __p[1] = v26;
      int v35 = (char *)v94[1];
      if (v94[1] >= v94[2])
      {
        uint64_t v37 = (char *)v94[0];
        int64_t v38 = (char *)v94[1] - (char *)v94[0];
        if ((char *)v94[1] - (char *)v94[0] <= -3) {
          sub_21610CB04();
        }
        uint64_t v39 = v38 >> 1;
        if ((void *)((char *)v94[2] - (char *)v94[0]) <= (void *)((v38 >> 1) + 1)) {
          int64_t v40 = v39 + 1;
        }
        else {
          int64_t v40 = (char *)v94[2] - (char *)v94[0];
        }
        if ((void *)((char *)v94[2] - (char *)v94[0]) >= (void *)0x7FFFFFFFFFFFFFFELL) {
          uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v41 = v40;
        }
        if (v41)
        {
          uint64_t v42 = (char *)sub_21610FD44((uint64_t)&v94[2], v41);
          uint64_t v37 = (char *)v94[0];
          int v35 = (char *)v94[1];
        }
        else
        {
          uint64_t v42 = 0;
        }
        long long v43 = &v42[2 * v39];
        *(_WORD *)long long v43 = *(_WORD *)(v18 + 52);
        unint64_t v36 = v43 + 2;
        while (v35 != v37)
        {
          __int16 v44 = *((_WORD *)v35 - 1);
          v35 -= 2;
          *((_WORD *)v43 - 1) = v44;
          v43 -= 2;
        }
        v94[0] = v43;
        v94[1] = v36;
        v94[2] = &v42[2 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(_WORD *)v94[1] = *(_WORD *)(v18 + 52);
        unint64_t v36 = v35 + 2;
      }
      v94[1] = v36;
      float v45 = *(float *)(v18 + 28);
      if (*(char *)(v18 + 79) < 0)
      {
        float v19 = *(unsigned __int16 **)(v18 + 56);
        uint64_t v46 = *(void *)(v18 + 64);
        if (v46)
        {
LABEL_59:
          uint64_t v47 = 2 * v46;
          do
          {
            int v49 = *v19++;
            int v48 = v49;
            if ((v49 - 12593) < 0x33 || v48 == 12685 || v48 == 4514) {
              ++v16;
            }
            v47 -= 2;
          }
          while (v47);
        }
      }
      else
      {
        uint64_t v46 = *(unsigned __int8 *)(v18 + 79);
        if (*(unsigned char *)(v18 + 79)) {
          goto LABEL_59;
        }
      }
      if (*(_WORD *)(v18 + 52))
      {
        uint64_t v52 = *(void *)(a3 + 24);
        *(void *)long long buf = v15;
        if (!v52) {
          sub_21610B7AC();
        }
        v91 |= (*(uint64_t (**)(uint64_t, void *, uint8_t *))(*(void *)v52 + 48))(v52, v12, buf);
      }
      int v14 = v92 | v93;
      float v17 = v17 + v45;
      ++v15;
      uint64_t v13 = *v12;
      if (v15 >= (uint64_t)(v12[1] - *v12) >> 3)
      {
        if ((char *)v96 - (char *)v95 == 24)
        {
          int v4 = a4;
          goto LABEL_76;
        }
        int v4 = a4;
        if (v91)
        {
          int v58 = 3;
          goto LABEL_112;
        }
LABEL_88:
        unint64_t v69 = 0;
        if (v108 < 0)
        {
          while (1)
          {
            uint64_t v71 = *((void *)&v107 + 1);
            uint64_t v70 = (long long *)v107;
            if (v69 >= *((void *)&v107 + 1)) {
              break;
            }
LABEL_92:
            uint64_t v72 = 0;
            int v73 = *((unsigned __int16 *)v70 + v71 + ~v69);
            while (*(unsigned __int16 *)&a112141718191a1[v72] != v73)
            {
              v72 += 2;
              if (v72 == 38) {
                goto LABEL_99;
              }
            }
            if (v72 == -2) {
              break;
            }
            ++v69;
            if ((v108 & 0x8000000000000000) == 0) {
              goto LABEL_89;
            }
          }
        }
        else
        {
LABEL_89:
          if (v69 < HIBYTE(v108))
          {
            uint64_t v70 = &v107;
            uint64_t v71 = HIBYTE(v108);
            goto LABEL_92;
          }
        }
LABEL_99:
        int v58 = 3;
        if (v16 == v69 && v69 <= 1)
        {
          unint64_t v53 = v4[1];
          unint64_t v74 = v4[2];
          if (v53 >= v74)
          {
            unint64_t v77 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - *v4) >> 4);
            unint64_t v78 = v77 + 1;
            if (v77 + 1 > 0x333333333333333) {
              sub_21610CB04();
            }
            __int16 v79 = v14;
            unint64_t v80 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v74 - *v4) >> 4);
            if (2 * v80 > v78) {
              unint64_t v78 = 2 * v80;
            }
            if (v80 >= 0x199999999999999) {
              unint64_t v81 = 0x333333333333333;
            }
            else {
              unint64_t v81 = v78;
            }
            uint64_t v106 = v86;
            uint64_t v82 = (char *)sub_21630AE8C(v81);
            CFStringRef v83 = &v82[80 * v77];
            *(void *)long long buf = v82;
            unsigned __int8 v103 = v83;
            uint64_t v105 = (uint64_t)&v82[80 * v84];
            long long v85 = v107;
            *((void *)v83 + 2) = v108;
            *(_OWORD *)CFStringRef v83 = v85;
            uint64_t v108 = 0;
            long long v107 = 0uLL;
            *((void *)v83 + 3) = 0;
            *((void *)v83 + 4) = 0;
            *((void *)v83 + 5) = 0;
            *(_OWORD *)(v83 + 24) = *(_OWORD *)__p;
            *((void *)v83 + 5) = v99;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v99 = 0;
            *((void *)v83 + 6) = 0;
            *((void *)v83 + 7) = 0;
            *((void *)v83 + 8) = 0;
            *((_OWORD *)v83 + 3) = *(_OWORD *)v94;
            *((void **)v83 + 8) = v94[2];
            memset(v94, 0, sizeof(v94));
            *((float *)v83 + 18) = v17;
            *((_WORD *)v83 + 38) = v79;
            long long v104 = v83 + 80;
            sub_21630ADB8(v4, buf);
            uint64_t v68 = v4[1];
            sub_21630AED4((uint64_t)buf);
            int v58 = 0;
          }
          else
          {
            int v58 = 0;
            long long v75 = v107;
            *(void *)(v53 + 16) = v108;
            *(_OWORD *)unint64_t v53 = v75;
            uint64_t v76 = v94[0];
            *(void *)(v53 + 4sub_21617DB94((const void **)&__p, 0) = v99;
            *(void *)(v53 + 48) = v76;
            uint64_t v108 = 0;
            long long v107 = 0uLL;
            *(_OWORD *)(v53 + 24) = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v99 = 0;
LABEL_103:
            *(_OWORD *)(v53 + 56) = *(_OWORD *)&v94[1];
            memset(v94, 0, sizeof(v94));
            *(float *)(v53 + 72) = v17;
            *(_WORD *)(v53 + 76) = v14;
            uint64_t v68 = v53 + 80;
          }
          goto LABEL_111;
        }
        goto LABEL_112;
      }
    }
  }
LABEL_121:
  *(void *)long long buf = &v95;
  sub_21613F444((void ***)buf);
}

void sub_21630AB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  sub_21630AD50(v28 - 176);
  sub_21613F444((void ***)&__p);
  uint64_t v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(void *)(v28 - 128) = v30;
    operator delete(v30);
  }
  *(void *)(v28 - 136) = a13;
  sub_216198134((void ***)(v28 - 136));
  _Unwind_Resume(a1);
}

void *sub_21630ACD4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216112B2C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21630AD34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21630AD50(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 8);
    uint64_t v3 = **(void **)(a1 + 16);
    if (v3 != v2)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

uint64_t *sub_21630ADB8(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 80);
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 8sub_21617DB94((const void **)&__p, 0) = v8;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 8sub_21617DB94((const void **)&__p, 0) = 0;
      *(void *)(v6 - 56) = 0;
      *(void *)(v6 - 48) = 0;
      *(void *)(v6 - 4sub_21617DB94((const void **)&__p, 0) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 4sub_21617DB94((const void **)&__p, 0) = *(void *)(v2 + v5 - 40);
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 4sub_21617DB94((const void **)&__p, 0) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      int v9 = *(_DWORD *)(v2 + v5 - 8);
      *(_WORD *)(v6 - 4) = *(_WORD *)(v2 + v5 - 4);
      *(_DWORD *)(v6 - 8) = v9;
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  void *result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *sub_21630AE8C(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    sub_2160FFA74();
  }
  return operator new(80 * a1);
}

uint64_t sub_21630AED4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    sub_2161981B8(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21630AF24(uint64_t a1)
{
  sub_2163058AC(a1);
  uint64_t v2 = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }

  return sub_21618098C(a1);
}

void sub_21630AF90()
{
}

void sub_21630B384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  MEMORY[0x2166CA800](v22, 0x10A1C40079592F6);
  sub_2161ADAE8((uint64_t)&a21);
  uint64_t v24 = *(void *)(v21 + 344);
  *(void *)(v21 + 344) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 72))(v24);
  }
  sub_21618098C(v21);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2166CA800](v21, 0x10F2C40570461F6);
  _Unwind_Resume(a1);
}

void sub_21630B454(const __CFURL *a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  if (a1)
  {
    if (CFURLResourceIsReachable(a1, (CFErrorRef *)&cf))
    {
      if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
      {
        strlen((const char *)buffer);
        sub_21630AF90();
      }
    }
    else if (cf)
    {
      CFRelease(cf);
    }
  }
  *a2 = 0;
}

uint64_t sub_21630B510(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

uint64_t sub_21630B51C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t result = *(void *)(a1 + 24);
  *a2 = (*(void *)(v3 + 8) - result) >> 2;
  return result;
}

__CFString *sub_21630B530(_DWORD *a1, int a2, int a3)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  uint64_t v7 = Mutable;
  int v8 = a1[2];
  if (v8 == 2)
  {
    CFStringRef v9 = @"<EOS>";
  }
  else
  {
    if (v8 != 1)
    {
      uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56))(a1);
      CFStringRef v11 = CFStringCreateWithCharacters(0, *(const UniChar **)v10, *(void *)(v10 + 8));
      sub_21619A154(a2, v11);
    }
    CFStringRef v9 = @"<BOS>";
  }
  CFStringAppend(Mutable, v9);
  CFStringAppendFormat(v7, 0, @"(%p)", a1);
  if (a3)
  {
    unint64_t v16 = 0;
    uint64_t v12 = (*(uint64_t (**)(_DWORD *, unint64_t *))(*(void *)a1 + 32))(a1, &v16);
    if (v16)
    {
      uint64_t v13 = v12;
      for (unint64_t i = 0; i < v16; ++i)
        CFStringAppendFormat(v7, 0, @"(%d)", *(unsigned int *)(v13 + 4 * i));
    }
  }
  return v7;
}

double sub_21630B6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    return -1.79769313e308;
  }
  __p = 0;
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  sub_21617B5A4(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  uint64_t v5 = (uint64_t)v32;
  uint64_t v6 = v32 - (unsigned char *)__p;
  if (v32 == __p)
  {
    if ((unint64_t)v32 >= v33)
    {
      uint64_t v8 = v6 >> 2;
      uint64_t v9 = v33 - (void)__p;
      if ((uint64_t)(v33 - (void)__p) >> 1 <= (unint64_t)((v6 >> 2) + 1)) {
        uint64_t v10 = v8 + 1;
      }
      else {
        uint64_t v10 = v9 >> 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = (char *)sub_2161129B4((uint64_t)&v33, v11);
      uint64_t v13 = (char *)__p;
      int v14 = v32;
      unint64_t v15 = &v12[4 * v8];
      float v17 = &v12[4 * v16];
      *(_DWORD *)unint64_t v15 = 1;
      uint64_t v5 = (uint64_t)(v15 + 4);
      while (v14 != v13)
      {
        int v18 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v15 - 1) = v18;
        v15 -= 4;
      }
      __p = v15;
      uint64_t v32 = (char *)v5;
      unint64_t v33 = (unint64_t)v17;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v32 = 1;
      v5 += 4;
    }
    uint64_t v32 = (char *)v5;
  }
  sub_216257EC8((uint64_t)&__p, v5, *(char **)(a1 + 24), *(char **)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  float v19 = v32;
  if ((unint64_t)v32 >= v33)
  {
    uint64_t v21 = (char *)__p;
    uint64_t v22 = (v32 - (unsigned char *)__p) >> 2;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62) {
      sub_21610CB04();
    }
    uint64_t v24 = v33 - (void)__p;
    if ((uint64_t)(v33 - (void)__p) >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      uint64_t v26 = (char *)sub_2161129B4((uint64_t)&v33, v25);
      uint64_t v21 = (char *)__p;
      float v19 = v32;
    }
    else
    {
      uint64_t v26 = 0;
    }
    unint64_t v27 = &v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *(_DWORD *)unint64_t v27 = 2;
    int v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    __p = v27;
    uint64_t v32 = v20;
    unint64_t v33 = (unint64_t)v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v32 = 2;
    int v20 = v19 + 4;
  }
  uint64_t v32 = v20;
  double v7 = (*(double (**)(uint64_t))(*(void *)a2 + 48))(a2);
  if (__p)
  {
    uint64_t v32 = (char *)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_21630B8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21630B8FC(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  v245 = 0;
  v246 = 0;
  unint64_t v247 = 0;
  v242 = 0;
  v243 = 0;
  unint64_t v244 = 0;
  v239 = 0;
  v240 = 0;
  v241 = 0;
  v236 = 0;
  v237 = 0;
  v238 = 0;
  uint64_t v204 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  uint64_t v10 = a1[2];
  uint64_t v11 = *(void *)v10;
  v205 = a1;
  uint64_t v202 = a6;
  v203 = a5;
  if (*(void *)v10)
  {
    sub_216305130(v11, &v248);
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(v11 + 32);
      do
      {
        unint64_t v15 = (void **)v248;
        uint64_t v16 = v246;
        if ((unint64_t)v246 >= v247)
        {
          int v18 = v245;
          uint64_t v19 = v246 - v245;
          if (v246 - v245 <= -3) {
            sub_21610CB04();
          }
          uint64_t v20 = v19 >> 1;
          if (v247 - (unint64_t)v245 <= (v19 >> 1) + 1) {
            uint64_t v21 = v20 + 1;
          }
          else {
            uint64_t v21 = v247 - (void)v245;
          }
          if (v247 - (unint64_t)v245 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v22 = v21;
          }
          if (v22)
          {
            unint64_t v23 = (char *)sub_21610FD44((uint64_t)&v247, v22);
            int v18 = v245;
            uint64_t v16 = v246;
          }
          else
          {
            unint64_t v23 = 0;
          }
          uint64_t v24 = &v23[2 * v20];
          *(_WORD *)uint64_t v24 = *((_WORD *)v15 + v13);
          float v17 = v24 + 2;
          while (v16 != v18)
          {
            __int16 v25 = *((_WORD *)v16 - 1);
            v16 -= 2;
            *((_WORD *)v24 - 1) = v25;
            v24 -= 2;
          }
          v245 = v24;
          v246 = v17;
          unint64_t v247 = (unint64_t)&v23[2 * v22];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *(_WORD *)v246 = v248->i16[v13];
          float v17 = v16 + 2;
        }
        v246 = v17;
        __int16 v26 = *(unsigned __int8 *)(v14 + 4 * v13 + 2) + *(unsigned __int8 *)(v14 + 4 * v13);
        unint64_t v27 = v243;
        if ((unint64_t)v243 >= v244)
        {
          int v29 = v242;
          uint64_t v30 = v243 - v242;
          if (v243 - v242 <= -3) {
            goto LABEL_332;
          }
          uint64_t v31 = v30 >> 1;
          if (v244 - (unint64_t)v242 <= (v30 >> 1) + 1) {
            uint64_t v32 = v31 + 1;
          }
          else {
            uint64_t v32 = v244 - (void)v242;
          }
          if (v244 - (unint64_t)v242 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v33 = v32;
          }
          if (v33)
          {
            uint64_t v34 = (char *)sub_21610FD44((uint64_t)&v244, v33);
            int v29 = v242;
            unint64_t v27 = v243;
          }
          else
          {
            uint64_t v34 = 0;
          }
          int v35 = &v34[2 * v31];
          *(_WORD *)int v35 = v26;
          uint64_t v28 = v35 + 2;
          while (v27 != v29)
          {
            __int16 v36 = *((_WORD *)v27 - 1);
            v27 -= 2;
            *((_WORD *)v35 - 1) = v36;
            v35 -= 2;
          }
          v242 = v35;
          v243 = v28;
          unint64_t v244 = (unint64_t)&v34[2 * v33];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(_WORD *)v243 = v26;
          uint64_t v28 = v27 + 2;
        }
        v243 = v28;
        uint64_t v37 = v240;
        if (v240 >= v241)
        {
          uint64_t v39 = v239;
          uint64_t v40 = v240 - v239;
          if (v240 - v239 < -2) {
LABEL_332:
          }
            sub_21610CB04();
          uint64_t v41 = v40 >> 1;
          if (v241 - v239 <= (unint64_t)((v40 >> 1) + 1)) {
            uint64_t v42 = v41 + 1;
          }
          else {
            uint64_t v42 = v241 - v239;
          }
          if ((unint64_t)(v241 - v239) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v43 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v43 = v42;
          }
          if (v43)
          {
            __int16 v44 = (char *)sub_21610FD44((uint64_t)&v241, v43);
            uint64_t v39 = v239;
            uint64_t v37 = v240;
          }
          else
          {
            __int16 v44 = 0;
          }
          float v45 = &v44[2 * v41];
          *(_WORD *)float v45 = v26;
          int64_t v38 = v45 + 2;
          while (v37 != v39)
          {
            __int16 v46 = *((_WORD *)v37 - 1);
            v37 -= 2;
            *((_WORD *)v45 - 1) = v46;
            v45 -= 2;
          }
          v239 = v45;
          v240 = v38;
          v241 = &v44[2 * v43];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(_WORD *)v240 = v26;
          int64_t v38 = v37 + 2;
        }
        v240 = v38;
        unsigned int v47 = *(unsigned __int8 *)(v14 + 4 * v13 + 3);
        if (v47) {
          int v48 = 2;
        }
        else {
          int v48 = (v47 >> 1) & 1;
        }
        int v49 = v237;
        if (v237 >= (int *)v238)
        {
          uint64_t v51 = v236;
          uint64_t v52 = v237 - v236;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v54 = v238 - (char *)v236;
          if ((v238 - (char *)v236) >> 1 > v53) {
            unint64_t v53 = v54 >> 1;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            uint64_t v56 = (char *)sub_2161129B4((uint64_t)&v238, v55);
            uint64_t v51 = v236;
            int v49 = v237;
          }
          else
          {
            uint64_t v56 = 0;
          }
          uint64_t v57 = (int *)&v56[4 * v52];
          *uint64_t v57 = v48;
          CFStringRef v50 = v57 + 1;
          while (v49 != v51)
          {
            int v58 = *--v49;
            *--uint64_t v57 = v58;
          }
          v236 = v57;
          v237 = v50;
          v238 = &v56[4 * v55];
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          int *v237 = v48;
          CFStringRef v50 = v49 + 1;
        }
        v237 = v50;
        ++v13;
      }
      while (v13 != v12);
    }
    if (v248)
    {
      v249.i64[0] = (uint64_t)v248;
      operator delete(v248);
    }
  }
  else
  {
    if (*a2 == 5 && *((_DWORD *)a1 + 2) == 8) {
      sub_2161E236C(*(const __CFString **)(v10 + 8));
    }
    unint64_t v59 = (uint64_t *)(*(uint64_t (**)(void *))(*a1 + 64))(a1);
    uint64_t v60 = v59[1];
    if (v60)
    {
      uint64_t v61 = 0;
      uint64_t v62 = *v59;
      do
      {
        unsigned __int16 v63 = *(_WORD *)(v62 + 2 * v61);
        if (v63 <= 0x30uLL) {
          unsigned __int16 v63 = 48;
        }
        __int16 v64 = v63 - 48;
        int v65 = v243;
        if ((unint64_t)v243 >= v244)
        {
          long long v67 = v242;
          uint64_t v68 = v243 - v242;
          if (v243 - v242 <= -3) {
            sub_21610CB04();
          }
          uint64_t v69 = v68 >> 1;
          if (v244 - (unint64_t)v242 <= (v68 >> 1) + 1) {
            uint64_t v70 = v69 + 1;
          }
          else {
            uint64_t v70 = v244 - (void)v242;
          }
          if (v244 - (unint64_t)v242 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v71 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v71 = v70;
          }
          if (v71)
          {
            uint64_t v72 = (char *)sub_21610FD44((uint64_t)&v244, v71);
            long long v67 = v242;
            int v65 = v243;
          }
          else
          {
            uint64_t v72 = 0;
          }
          int v73 = &v72[2 * v69];
          *(_WORD *)int v73 = v64;
          uint64_t v66 = v73 + 2;
          while (v65 != v67)
          {
            __int16 v74 = *((_WORD *)v65 - 1);
            v65 -= 2;
            *((_WORD *)v73 - 1) = v74;
            v73 -= 2;
          }
          v242 = v73;
          v243 = v66;
          unint64_t v244 = (unint64_t)&v72[2 * v71];
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *(_WORD *)v243 = v64;
          uint64_t v66 = v65 + 2;
        }
        v243 = v66;
        long long v75 = v240;
        if (v240 >= v241)
        {
          unint64_t v77 = v239;
          uint64_t v78 = v240 - v239;
          if (v240 - v239 <= -3) {
            sub_21610CB04();
          }
          uint64_t v79 = v78 >> 1;
          if (v241 - v239 <= (unint64_t)((v78 >> 1) + 1)) {
            uint64_t v80 = v79 + 1;
          }
          else {
            uint64_t v80 = v241 - v239;
          }
          if ((unint64_t)(v241 - v239) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v81 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v81 = v80;
          }
          if (v81)
          {
            uint64_t v82 = (char *)sub_21610FD44((uint64_t)&v241, v81);
            unint64_t v77 = v239;
            long long v75 = v240;
          }
          else
          {
            uint64_t v82 = 0;
          }
          CFStringRef v83 = &v82[2 * v79];
          *(_WORD *)CFStringRef v83 = v64;
          uint64_t v76 = v83 + 2;
          while (v75 != v77)
          {
            __int16 v84 = *((_WORD *)v75 - 1);
            v75 -= 2;
            *((_WORD *)v83 - 1) = v84;
            v83 -= 2;
          }
          v239 = v83;
          v240 = v76;
          v241 = &v82[2 * v81];
          if (v77) {
            operator delete(v77);
          }
        }
        else
        {
          *(_WORD *)v240 = v64;
          uint64_t v76 = v75 + 2;
        }
        v240 = v76;
        long long v85 = v246;
        if ((unint64_t)v246 >= v247)
        {
          CFIndex v87 = v245;
          uint64_t v88 = v246 - v245;
          if (v246 - v245 <= -3) {
            sub_21610CB04();
          }
          uint64_t v89 = v88 >> 1;
          if (v247 - (unint64_t)v245 <= (v88 >> 1) + 1) {
            uint64_t v90 = v89 + 1;
          }
          else {
            uint64_t v90 = v247 - (void)v245;
          }
          if (v247 - (unint64_t)v245 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v91 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v91 = v90;
          }
          if (v91)
          {
            int v92 = (char *)sub_21610FD44((uint64_t)&v247, v91);
            CFIndex v87 = v245;
            long long v85 = v246;
          }
          else
          {
            int v92 = 0;
          }
          int v93 = &v92[2 * v89];
          *(_WORD *)int v93 = v64;
          CFStringRef v86 = v93 + 2;
          while (v85 != v87)
          {
            __int16 v94 = *((_WORD *)v85 - 1);
            v85 -= 2;
            *((_WORD *)v93 - 1) = v94;
            v93 -= 2;
          }
          v245 = v93;
          v246 = v86;
          unint64_t v247 = (unint64_t)&v92[2 * v91];
          if (v87) {
            operator delete(v87);
          }
        }
        else
        {
          *(_WORD *)v246 = v64;
          CFStringRef v86 = v85 + 2;
        }
        v246 = v86;
        uint64_t v95 = v237;
        if (v237 >= (int *)v238)
        {
          uint64_t v97 = v236;
          uint64_t v98 = v237 - v236;
          unint64_t v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v100 = v238 - (char *)v236;
          if ((v238 - (char *)v236) >> 1 > v99) {
            unint64_t v99 = v100 >> 1;
          }
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v101 = v99;
          }
          if (v101)
          {
            unsigned __int8 v102 = (char *)sub_2161129B4((uint64_t)&v238, v101);
            uint64_t v97 = v236;
            uint64_t v95 = v237;
          }
          else
          {
            unsigned __int8 v102 = 0;
          }
          unsigned __int8 v103 = &v102[4 * v98];
          *(_DWORD *)unsigned __int8 v103 = 0;
          unint64_t v96 = (int *)(v103 + 4);
          while (v95 != v97)
          {
            int v104 = *--v95;
            *((_DWORD *)v103 - 1) = v104;
            v103 -= 4;
          }
          v236 = (int *)v103;
          v237 = v96;
          v238 = &v102[4 * v101];
          if (v97) {
            operator delete(v97);
          }
        }
        else
        {
          int *v237 = 0;
          unint64_t v96 = v95 + 1;
        }
        v237 = v96;
        ++v61;
      }
      while (v61 != v60);
    }
    else
    {
      uint64_t v105 = *(unsigned __int16 *)(v205[2] + 16);
      uint64_t v106 = v243 - v242;
      if (v243 - v242 <= -3) {
        sub_21610CB04();
      }
      uint64_t v107 = v106 >> 1;
      if (v244 - (unint64_t)v242 <= (v106 >> 1) + 1) {
        uint64_t v108 = v107 + 1;
      }
      else {
        uint64_t v108 = v244 - (void)v242;
      }
      if (v244 - (unint64_t)v242 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v109 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v109 = v108;
      }
      if (v109) {
        uint64_t v110 = (char *)sub_21610FD44((uint64_t)&v244, v109);
      }
      else {
        uint64_t v110 = 0;
      }
      CFRange v111 = &v110[2 * v107];
      *(_WORD *)CFRange v111 = v105;
      v242 = v111;
      unint64_t v244 = (unint64_t)&v110[2 * v109];
      v243 = v111 + 2;
      CFRange v112 = v240;
      if (v240 >= v241)
      {
        unint64_t v114 = v239;
        uint64_t v115 = v240 - v239;
        if (v240 - v239 <= -3) {
          sub_21610CB04();
        }
        uint64_t v116 = v115 >> 1;
        if (v241 - v239 <= (unint64_t)((v115 >> 1) + 1)) {
          uint64_t v117 = v116 + 1;
        }
        else {
          uint64_t v117 = v241 - v239;
        }
        if ((unint64_t)(v241 - v239) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v118 = v117;
        }
        if (v118)
        {
          unint64_t v119 = (char *)sub_21610FD44((uint64_t)&v241, v118);
          unint64_t v114 = v239;
          CFRange v112 = v240;
        }
        else
        {
          unint64_t v119 = 0;
        }
        uint64_t v120 = &v119[2 * v116];
        char v121 = &v119[2 * v118];
        *(_WORD *)uint64_t v120 = v105;
        unint64_t v113 = v120 + 2;
        while (v112 != v114)
        {
          __int16 v122 = *((_WORD *)v112 - 1);
          v112 -= 2;
          *((_WORD *)v120 - 1) = v122;
          v120 -= 2;
        }
        v239 = v120;
        v240 = v113;
        v241 = v121;
        if (v114) {
          operator delete(v114);
        }
      }
      else
      {
        *(_WORD *)v240 = v105;
        unint64_t v113 = v112 + 2;
      }
      v240 = v113;
      char v123 = v246;
      if ((unint64_t)v246 >= v247)
      {
        __int16 v125 = v245;
        uint64_t v126 = v246 - v245;
        if (v246 - v245 <= -3) {
          sub_21610CB04();
        }
        uint64_t v127 = v126 >> 1;
        if (v247 - (unint64_t)v245 <= (v126 >> 1) + 1) {
          uint64_t v128 = v127 + 1;
        }
        else {
          uint64_t v128 = v247 - (void)v245;
        }
        if (v247 - (unint64_t)v245 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v129 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v129 = v128;
        }
        if (v129)
        {
          uint64_t v130 = (char *)sub_21610FD44((uint64_t)&v247, v129);
          __int16 v125 = v245;
          char v123 = v246;
        }
        else
        {
          uint64_t v130 = 0;
        }
        uint64_t v131 = &v130[2 * v127];
        unint64_t v132 = &v130[2 * v129];
        *(_WORD *)uint64_t v131 = v105;
        __int16 v124 = v131 + 2;
        while (v123 != v125)
        {
          __int16 v133 = *((_WORD *)v123 - 1);
          v123 -= 2;
          *((_WORD *)v131 - 1) = v133;
          v131 -= 2;
        }
        v245 = v131;
        v246 = v124;
        unint64_t v247 = (unint64_t)v132;
        if (v125) {
          operator delete(v125);
        }
      }
      else
      {
        *(_WORD *)v246 = v105;
        __int16 v124 = v123 + 2;
      }
      v246 = v124;
      uint64_t v134 = v237;
      if (v237 >= (int *)v238)
      {
        uint64_t v136 = v236;
        uint64_t v137 = v237 - v236;
        unint64_t v138 = v137 + 1;
        if ((unint64_t)(v137 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v139 = v238 - (char *)v236;
        if ((v238 - (char *)v236) >> 1 > v138) {
          unint64_t v138 = v139 >> 1;
        }
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v140 = v138;
        }
        if (v140)
        {
          uint64_t v141 = (char *)sub_2161129B4((uint64_t)&v238, v140);
          uint64_t v136 = v236;
          uint64_t v134 = v237;
        }
        else
        {
          uint64_t v141 = 0;
        }
        uint64_t v142 = &v141[4 * v137];
        CFRange v143 = &v141[4 * v140];
        *(_DWORD *)uint64_t v142 = 0;
        uint64_t v135 = (int *)(v142 + 4);
        while (v134 != v136)
        {
          int v144 = *--v134;
          *((_DWORD *)v142 - 1) = v144;
          v142 -= 4;
        }
        v236 = (int *)v142;
        v237 = v135;
        v238 = v143;
        if (v136) {
          operator delete(v136);
        }
      }
      else
      {
        int *v237 = 0;
        uint64_t v135 = v134 + 1;
      }
      v237 = v135;
    }
  }
  uint64_t v146 = v202;
  uint64_t v145 = a5;
  if (((*(uint64_t (**)(void *))(*v205 + 88))(v205) & 1) == 0) {
    goto LABEL_321;
  }
  unsigned int v147 = (uint64_t *)(*(uint64_t (**)(void *))(*v205 + 72))(v205);
  unint64_t v148 = v147[1];
  uint64_t v207 = *v147;
  uint64_t v233 = 0;
  v234 = 0;
  unint64_t v235 = 0;
  uint64_t v230 = 0;
  v231 = 0;
  unint64_t v232 = 0;
  uint64_t v227 = 0;
  v228 = 0;
  unint64_t v229 = 0;
  int64x2_t v225 = 0uLL;
  v226 = 0;
  __p = 0;
  v223 = 0;
  v224 = 0;
  v219 = 0;
  v220 = 0;
  v221 = 0;
  uint64_t v218 = 0;
  if (v148)
  {
    uint64_t v149 = 0;
    uint64_t v150 = 0;
    unint64_t v151 = 0;
    CFStringRef v206 = *(const __CFString **)(v205[2] + 8);
    char v152 = 1;
    while (1)
    {
      uint64_t v153 = *(unsigned __int16 *)(v207 + 2 * v150) - 48;
      unint64_t v154 = v153 & ~(v153 >> 63);
      v155 = v223;
      if (v223 >= v224)
      {
        CFRange v157 = (char *)__p;
        uint64_t v158 = (v223 - (unsigned char *)__p) >> 4;
        unint64_t v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 60) {
          sub_21610CB04();
        }
        uint64_t v160 = v224 - (unsigned char *)__p;
        if ((v224 - (unsigned char *)__p) >> 3 > v159) {
          unint64_t v159 = v160 >> 3;
        }
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v161 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v159;
        }
        if (v161)
        {
          v162 = (char *)sub_21612AA90((uint64_t)&v224, v161);
          CFRange v157 = (char *)__p;
          v155 = v223;
        }
        else
        {
          v162 = 0;
        }
        v163 = &v162[16 * v158];
        *(void *)v163 = v149;
        *((void *)v163 + 1) = v154;
        v164 = v163;
        if (v155 != v157)
        {
          do
          {
            *((_OWORD *)v164 - 1) = *((_OWORD *)v155 - 1);
            v164 -= 16;
            v155 -= 16;
          }
          while (v155 != v157);
          CFRange v157 = (char *)__p;
        }
        CFRange v156 = v163 + 16;
        __p = v164;
        v223 = v163 + 16;
        v224 = &v162[16 * v161];
        if (v157) {
          operator delete(v157);
        }
      }
      else
      {
        *(void *)v223 = v149;
        *((void *)v155 + 1) = v154;
        CFRange v156 = v155 + 16;
      }
      v223 = v156;
      if (v154 >= 2 && v206)
      {
        if (v151 < (v246 - v245) >> 1 && v154 == *(unsigned __int16 *)&v245[2 * v151]) {
          sub_2161E1FB8(v206);
        }
      }
      else
      {
        v153 &= ~(v153 >> 63);
      }
      v165 = v220;
      if (v220 >= v221)
      {
        v167 = (char *)v219;
        uint64_t v168 = (v220 - (unsigned char *)v219) >> 4;
        unint64_t v169 = v168 + 1;
        if ((unint64_t)(v168 + 1) >> 60) {
          sub_21610CB04();
        }
        uint64_t v170 = v221 - (unsigned char *)v219;
        if ((v221 - (unsigned char *)v219) >> 3 > v169) {
          unint64_t v169 = v170 >> 3;
        }
        if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v171 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v171 = v169;
        }
        if (v171)
        {
          v172 = (char *)sub_21612AA90((uint64_t)&v221, v171);
          v167 = (char *)v219;
          v165 = v220;
        }
        else
        {
          v172 = 0;
        }
        v173 = (unint64_t *)&v172[16 * v168];
        unint64_t *v173 = v151;
        v173[1] = v153;
        v174 = v173;
        if (v165 != v167)
        {
          do
          {
            *((_OWORD *)v174 - 1) = *((_OWORD *)v165 - 1);
            v174 -= 2;
            v165 -= 16;
          }
          while (v165 != v167);
          v167 = (char *)v219;
        }
        v166 = (char *)(v173 + 2);
        v219 = v174;
        v220 = (char *)(v173 + 2);
        v221 = &v172[16 * v171];
        if (v167) {
          operator delete(v167);
        }
      }
      else
      {
        *(void *)v220 = v151;
        *((void *)v165 + 1) = v153;
        v166 = v165 + 16;
      }
      v220 = v166;
      sub_21630D0D8(&__s1, (uint64_t)v245, (uint64_t)v246, v151, v153);
      sub_21630D0D8(&v214, (uint64_t)v242, (uint64_t)v243, v151, v153);
      v175 = (char *)v236;
      unint64_t v176 = v153 + v151;
      long long __dst = 0;
      uint64_t v213 = 0;
      v211 = 0;
      if ((v151 & 0x8000000000000000) == 0 && v237 - v236 >= v176)
      {
        if (v153)
        {
          if ((unint64_t)v153 >> 62) {
            sub_21610CB04();
          }
          sub_216112970(&v211, v153);
          v177 = (char *)__dst;
          memmove(__dst, &v175[4 * v151], 4 * v153);
        }
        else
        {
          v177 = 0;
        }
        long long __dst = &v177[4 * v153];
      }
      v208 = 0;
      v209 = 0;
      uint64_t v210 = 0;
      sub_21618F924((char *)&v208, (char *)v214, (uint64_t)v215, (v215 - (unsigned char *)v214) >> 1);
      char v178 = 0;
      v179 = v208;
      if (v214 != v215 && v208 != v209) {
        break;
      }
      char v152 = 0;
      if (v208) {
        goto LABEL_269;
      }
LABEL_270:
      if (v211)
      {
        long long __dst = v211;
        operator delete(v211);
      }
      if (v214)
      {
        v215 = v214;
        operator delete(v214);
      }
      if (__s1)
      {
        v217 = __s1;
        operator delete(__s1);
      }
      if ((v178 & 1) != 0 && (v152 & 1) != 0 && ++v150 < v148) {
        continue;
      }
      goto LABEL_309;
    }
    if (__s1 == v217 || v211 == __dst)
    {
      char v178 = 0;
      char v152 = 0;
      if (!v208) {
        goto LABEL_270;
      }
    }
    else
    {
      v180 = v228;
      if ((unint64_t)v228 >= v229)
      {
        uint64_t v181 = sub_2162A6770(&v227, (uint64_t)&v208);
      }
      else
      {
        void *v228 = 0;
        v180[1] = 0;
        v180[2] = 0;
        sub_216182F50(v180, v208, (uint64_t)v209, (v209 - (unsigned char *)v208) >> 1);
        uint64_t v181 = (uint64_t)(v180 + 3);
      }
      v228 = (void *)v181;
      v182 = v231;
      if ((unint64_t)v231 >= v232)
      {
        uint64_t v183 = sub_2162A6770(&v230, (uint64_t)&v214);
      }
      else
      {
        void *v231 = 0;
        v182[1] = 0;
        v182[2] = 0;
        sub_216182F50(v182, v214, (uint64_t)v215, (v215 - (unsigned char *)v214) >> 1);
        uint64_t v183 = (uint64_t)(v182 + 3);
      }
      v231 = (void *)v183;
      v184 = v234;
      if ((unint64_t)v234 >= v235)
      {
        uint64_t v185 = sub_2162A6770(&v233, (uint64_t)&__s1);
      }
      else
      {
        void *v234 = 0;
        v184[1] = 0;
        v184[2] = 0;
        sub_216182F50(v184, __s1, (uint64_t)v217, (v217 - (unsigned char *)__s1) >> 1);
        uint64_t v185 = (uint64_t)(v184 + 3);
      }
      v234 = (void *)v185;
      v186 = (void *)v225.i64[1];
      if (v225.i64[1] >= (unint64_t)v226)
      {
        unint64_t v188 = 0xAAAAAAAAAAAAAAABLL * ((v225.i64[1] - v225.i64[0]) >> 3);
        unint64_t v189 = v188 + 1;
        if (v188 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        if (0x5555555555555556 * (((uint64_t)v226 - v225.i64[0]) >> 3) > v189) {
          unint64_t v189 = 0x5555555555555556 * (((uint64_t)v226 - v225.i64[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v226 - v225.i64[0]) >> 3) >= 0x555555555555555) {
          unint64_t v190 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v190 = v189;
        }
        v251 = &v226;
        if (v190)
        {
          if (v190 > 0xAAAAAAAAAAAAAAALL) {
            sub_2160FFA74();
          }
          v191 = (void **)operator new(24 * v190);
        }
        else
        {
          v191 = 0;
        }
        v192 = &v191[3 * v188];
        v248 = (int64x2_t *)v191;
        v249.i64[0] = (uint64_t)v192;
        v249.i64[1] = (uint64_t)v192;
        v250 = &v191[3 * v190];
        v192[1] = 0;
        v192[2] = 0;
        *v192 = 0;
        sub_216263224(v192, v211, (uint64_t)__dst, ((unsigned char *)__dst - (unsigned char *)v211) >> 2);
        uint64_t v193 = v249.i64[0];
        uint64_t v187 = v249.i64[1] + 24;
        v249.i64[1] += 24;
        v194 = (void *)v225.i64[1];
        v195 = (void *)v225.i64[0];
        if (v225.i64[1] == v225.i64[0])
        {
          int64x2_t v197 = vdupq_n_s64(v225.u64[1]);
        }
        else
        {
          do
          {
            *(void *)(v193 - 24) = 0;
            *(void *)(v193 - 16) = 0;
            v193 -= 24;
            *(void *)(v193 + 16) = 0;
            long long v196 = *(_OWORD *)(v194 - 3);
            v194 -= 3;
            *(_OWORD *)uint64_t v193 = v196;
            *(void *)(v193 + 16) = v194[2];
            void *v194 = 0;
            v194[1] = 0;
            v194[2] = 0;
          }
          while (v194 != v195);
          int64x2_t v197 = v225;
          uint64_t v187 = v249.i64[1];
        }
        v225.i64[0] = v193;
        v225.i64[1] = v187;
        int64x2_t v249 = v197;
        v198 = v226;
        v226 = v250;
        v250 = v198;
        v248 = (int64x2_t *)v197.i64[0];
        sub_216267DA0((uint64_t)&v248);
      }
      else
      {
        *(void *)v225.i64[1] = 0;
        v186[1] = 0;
        v186[2] = 0;
        sub_216263224(v186, v211, (uint64_t)__dst, ((unsigned char *)__dst - (unsigned char *)v211) >> 2);
        uint64_t v187 = (uint64_t)(v186 + 3);
      }
      v225.i64[1] = v187;
      v149 += v154;
      char v178 = 1;
      v179 = v208;
      unint64_t v151 = v176;
      if (!v208) {
        goto LABEL_270;
      }
    }
LABEL_269:
    v209 = v179;
    operator delete(v179);
    goto LABEL_270;
  }
  uint64_t v149 = 0;
  char v152 = 1;
LABEL_309:
  if (v149 == *(void *)((*(uint64_t (**)(void *))(*v205 + 56))(v205) + 8)) {
    int v199 = v152 & 1;
  }
  else {
    int v199 = 0;
  }
  uint64_t v146 = v202;
  uint64_t v145 = v203;
  if (v148 && v199)
  {
    uint64_t v200 = 0;
    uint64_t v201 = 0;
    do
    {
      (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v202 + 16))(v202, *(void *)((char *)__p + v200) + *v203, *(void *)((char *)__p + v200 + 8), v230 + v201, v227 + v201, v233 + v201, v225.i64[0] + v201);
      v201 += 24;
      v200 += 16;
      --v148;
    }
    while (v148);
  }
  if (v219)
  {
    v220 = (char *)v219;
    operator delete(v219);
  }
  if (__p)
  {
    v223 = (char *)__p;
    operator delete(__p);
  }
  v248 = &v225;
  sub_216267E04((void ***)&v248);
  v248 = (int64x2_t *)&v227;
  sub_21613F444((void ***)&v248);
  v248 = (int64x2_t *)&v230;
  sub_21613F444((void ***)&v248);
  v248 = (int64x2_t *)&v233;
  sub_21613F444((void ***)&v248);
  if (!v199) {
LABEL_321:
  }
    (*(void (**)(uint64_t, void, void, char **, char **, char **, int **))(v146 + 16))(v146, *v145, *(void *)(v204 + 8), &v242, &v239, &v245, &v236);
  *v145 += *(void *)(v204 + 8);
  if (v236)
  {
    v237 = v236;
    operator delete(v236);
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
}

void sub_21630CE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  int v49 = *(void **)(v47 - 232);
  if (v49)
  {
    *(void *)(v47 - 224) = v49;
    operator delete(v49);
  }
  CFStringRef v50 = *(void **)(v47 - 208);
  if (v50)
  {
    *(void *)(v47 - 20sub_21617DB94((const void **)&__p, 0) = v50;
    operator delete(v50);
  }
  uint64_t v51 = *(void **)(v47 - 184);
  if (v51)
  {
    *(void *)(v47 - 176) = v51;
    operator delete(v51);
  }
  uint64_t v52 = *(void **)(v47 - 160);
  if (v52)
  {
    *(void *)(v47 - 152) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21630D0D8(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *result = 0;
  result[1] = 0;
  result[2] = 0;
  if ((a4 & 0x8000000000000000) == 0 && (a3 - a2) >> 1 >= (unint64_t)(a4 + a5))
  {
    uint64_t v8 = result;
    if (a5)
    {
      if (a5 < 0) {
        sub_21610CB04();
      }
      sub_21610FD04(result, a5);
      uint64_t v11 = (char *)v8[1];
      uint64_t v9 = v8 + 1;
      uint64_t v10 = v11;
      uint64_t result = memmove(v11, (const void *)(a2 + 2 * a4), 2 * a5);
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v9 = result + 1;
    }
    *uint64_t v9 = &v10[2 * a5];
  }
  return result;
}

void sub_21630D17C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21630D198(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, char a7, int a8)
{
  *(_DWORD *)(a1 + 8) = a8;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = 0;
  uint64_t v15 = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)a1 = &unk_26C6C6C68;
  *(void *)(a1 + 56) = sub_216322CC4(a4, a3);
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = (*(uint64_t (**)(uint64_t, _WORD *, uint64_t))(*(void *)a4 + 24))(a4, a3, 1);
  *(void *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = v17;
  *(unsigned char *)(a1 + 88) = a7;
  int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) ^ 1;
  if (a8 == 6) {
    LOBYTE(v18) = 1;
  }
  if ((v18 & 1) == 0 && !**(_DWORD **)(a1 + 48)) {
    sub_2162DE808(a6, (uint64_t *)(a1 + 56), (void *)(a1 + 72), v15, a5, 0);
  }
  uint64_t v19 = *(char **)(a1 + 24);
  uint64_t v20 = *(char **)(a1 + 32);
  uint64_t v21 = v20 - v19;
  if (v20 == v19)
  {
    unint64_t v22 = *(void *)(a1 + 40);
    int v23 = **(_DWORD **)(a1 + 48);
    if ((unint64_t)v20 >= v22)
    {
      uint64_t v25 = v21 >> 2;
      uint64_t v26 = v22 - (void)v19;
      if (v26 >> 1 <= (unint64_t)((v21 >> 2) + 1)) {
        uint64_t v27 = v25 + 1;
      }
      else {
        uint64_t v27 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      int v29 = (char *)sub_2161129B4(a1 + 40, v28);
      uint64_t v30 = *(char **)(a1 + 24);
      uint64_t v31 = *(char **)(a1 + 32);
      uint64_t v32 = &v29[4 * v25];
      uint64_t v34 = &v29[4 * v33];
      *(_DWORD *)uint64_t v32 = v23;
      uint64_t v24 = v32 + 4;
      while (v31 != v30)
      {
        int v35 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v32 - 1) = v35;
        v32 -= 4;
      }
      *(void *)(a1 + 24) = v32;
      *(void *)(a1 + 32) = v24;
      *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v34;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v20 = v23;
      uint64_t v24 = v20 + 4;
    }
    *(void *)(a1 + 32) = v24;
  }
  return a1;
}

void sub_21630D35C(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_26C6C7160;
  uint64_t v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21630D398(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0;
}

uint64_t *sub_21630D3A8(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1)) {
    return (uint64_t *)(a1 + 72);
  }

  return sub_216268B0C();
}

uint64_t sub_21630D410(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  *(void *)sub_21630D198(a1, a2, a3, a4, a5, a6, 1, 6) = &unk_26C6C6008;
  *(void *)(a1 + 96) = (*(uint64_t (**)(uint64_t, _WORD *, uint64_t))(*(void *)a4 + 16))(a4, a3, a7);
  *(void *)(a1 + 104) = v11;
  return a1;
}

void sub_21630D4A4(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_26C6C7160;
  uint64_t v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21630D4DC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)a1 = &unk_26C6C5D28;
  uint64_t v4 = operator new(4uLL);
  if (a2 == 1) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  _DWORD *v4 = v5;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v4 + 1;
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_21630D550(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C6C7160;
  _Unwind_Resume(a1);
}

char *sub_21630D570(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(a1 + 24);
  if (result != (char *)a2) {
    return sub_2162580D8(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

uint64_t sub_21630D594(uint64_t a1, int a2, _OWORD *a3, int a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)a1 = &unk_26C6C5EB0;
  if (a5) {
    __int16 v7 = *(_WORD *)(a5 + 16) + 48;
  }
  else {
    __int16 v7 = 48;
  }
  *(_WORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *a3;
  *(void *)(a1 + 72) = a1 + 48;
  *(void *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = 1;
  uint64_t v8 = sub_2161129B4(a1 + 40, 1uLL);
  uint64_t v9 = *(char **)(a1 + 24);
  uint64_t v10 = *(char **)(a1 + 32);
  uint64_t v12 = &v8[v11];
  *uint64_t v8 = a4;
  uint64_t v13 = v8 + 1;
  while (v10 != v9)
  {
    int v14 = *((_DWORD *)v10 - 1);
    v10 -= 4;
    *--uint64_t v8 = v14;
  }
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v12;
  if (v9) {
    operator delete(v9);
  }
  *(void *)(a1 + 32) = v13;
  return a1;
}

void sub_21630D67C(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21630D69C(uint64_t a1, uint64_t *a2, __int16 *a3, uint64_t a4, uint64_t *a5, int a6, uint64_t *a7, int a8)
{
  uint64_t v8 = a5;
  *(_DWORD *)(a1 + 8) = a8;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = 0;
  uint64_t v12 = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)a1 = &unk_26C6C6CE8;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v13 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 12sub_21617DB94((const void **)&__p, 0) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  int v14 = (uint64_t *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = a6;
  uint64_t v15 = *a2;
  *(_DWORD *)(a1 + 14sub_21617DB94((const void **)&__p, 0) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 132) = v15;
  __int16 v16 = *a3;
  if (*a3)
  {
    uint64_t v17 = a3;
    int v18 = 0;
    do
    {
      if ((unint64_t)v18 >= *v14)
      {
        uint64_t v19 = (char *)*v13;
        uint64_t v20 = v18 - (unsigned char *)*v13;
        if (v20 <= -3) {
          sub_21610CB04();
        }
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = *v14 - (void)v19;
        if (v22 <= (v20 >> 1) + 1) {
          uint64_t v23 = v21 + 1;
        }
        else {
          uint64_t v23 = *v14 - (void)v19;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24)
        {
          uint64_t v25 = (char *)sub_21610FD44((uint64_t)v14, v24);
          uint64_t v19 = *(char **)(a1 + 56);
          int v18 = *(char **)(a1 + 64);
          __int16 v16 = *v17;
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v26 = &v25[2 * v21];
        *(_WORD *)uint64_t v26 = v16;
        uint64_t v27 = v26 + 2;
        while (v18 != v19)
        {
          __int16 v28 = *((_WORD *)v18 - 1);
          v18 -= 2;
          *((_WORD *)v26 - 1) = v28;
          v26 -= 2;
        }
        *(void *)(a1 + 56) = v26;
        *(void *)(a1 + 64) = v27;
        *(void *)(a1 + 72) = &v25[2 * v24];
        if (v19) {
          operator delete(v19);
        }
        int v18 = v27;
      }
      else
      {
        *(_WORD *)int v18 = v16;
        v18 += 2;
      }
      *(void *)(a1 + 64) = v18;
      int v29 = (unsigned __int16)v17[1];
      ++v17;
      __int16 v16 = v29;
    }
    while (v29);
    uint64_t v30 = *v14;
    if ((unint64_t)v18 < *v14)
    {
      *(_WORD *)int v18 = 0;
      uint64_t v31 = v18 + 2;
      uint64_t v8 = a5;
      goto LABEL_42;
    }
    uint64_t v8 = a5;
  }
  else
  {
    int v18 = 0;
    uint64_t v30 = 0;
  }
  uint64_t v32 = (char *)*v13;
  uint64_t v33 = v18 - (unsigned char *)*v13;
  if (v33 <= -3) {
    sub_21610CB04();
  }
  uint64_t v34 = v33 >> 1;
  unint64_t v35 = v30 - (void)v32;
  if (v35 <= (v33 >> 1) + 1) {
    unint64_t v36 = v34 + 1;
  }
  else {
    unint64_t v36 = v35;
  }
  if (v35 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v37 = v36;
  }
  if (v37)
  {
    int64_t v38 = (char *)sub_21610FD44((uint64_t)v14, v37);
    uint64_t v40 = v39;
    uint64_t v32 = *(char **)(a1 + 56);
    int v18 = *(char **)(a1 + 64);
  }
  else
  {
    int64_t v38 = 0;
    uint64_t v40 = 0;
  }
  uint64_t v41 = (unsigned __int16 *)&v38[2 * v34];
  uint64_t v42 = &v38[2 * v40];
  *uint64_t v41 = 0;
  uint64_t v31 = v41 + 1;
  if (v18 == v32)
  {
    int v43 = 0;
  }
  else
  {
    do
    {
      int v44 = *((unsigned __int16 *)v18 - 1);
      v18 -= 2;
      int v43 = v44;
      *--uint64_t v41 = v44;
    }
    while (v18 != v32);
  }
  *(void *)(a1 + 56) = v41;
  *(void *)(a1 + 64) = v31;
  *(void *)(a1 + 72) = v42;
  if (!v32)
  {
    *(void *)(a1 + 64) = v31;
    goto LABEL_46;
  }
  operator delete(v32);
LABEL_42:
  uint64_t v41 = *(unsigned __int16 **)(a1 + 56);
  *(void *)(a1 + 64) = v31;
  if (!v41)
  {
    float v45 = sub_216268B0C();
    uint64_t v47 = (_WORD *)*v45;
    uint64_t v46 = v45[1];
    uint64_t v41 = (unsigned __int16 *)*v13;
    goto LABEL_54;
  }
  int v43 = *v41;
LABEL_46:
  int v48 = v41;
  uint64_t v47 = v41;
  if (v43)
  {
    int v49 = v41 + 1;
    uint64_t v47 = v41;
    do
    {
      if (v43 == 44) {
        uint64_t v47 = v49;
      }
      int v50 = *v49++;
      int v43 = v50;
    }
    while (v50);
    int v48 = v49 - 1;
  }
  uint64_t v46 = v48 - v47;
  if (!v47) {
    uint64_t v46 = 0;
  }
LABEL_54:
  *(void *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = v47;
  *(void *)(a1 + 88) = v46;
  *(void *)(a1 + 112) = (*(uint64_t (**)(uint64_t, unsigned __int16 *, void))(*(void *)a4 + 16))(a4, v41, *(unsigned int *)(a1 + 128));
  *(void *)(a1 + 12sub_21617DB94((const void **)&__p, 0) = v51;
  *(void *)(a1 + 96) = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a4 + 24))(a4, *(void *)(a1 + 56), 0);
  *(void *)(a1 + 104) = v52;
  int v53 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2) {
    sub_2162DE808(a7, (uint64_t *)(a1 + 80), (void *)(a1 + 96), v12, v8, 1);
  }
  uint64_t v54 = *(char **)(a1 + 24);
  unint64_t v55 = *(char **)(a1 + 32);
  uint64_t v56 = v55 - v54;
  if (v55 == v54)
  {
    unint64_t v57 = *(void *)(a1 + 40);
    if ((unint64_t)v55 >= v57)
    {
      uint64_t v59 = v56 >> 2;
      uint64_t v60 = v57 - (void)v54;
      if (v60 >> 1 <= (unint64_t)((v56 >> 2) + 1)) {
        uint64_t v61 = v59 + 1;
      }
      else {
        uint64_t v61 = v60 >> 1;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v61;
      }
      unsigned __int16 v63 = (char *)sub_2161129B4(a1 + 40, v62);
      __int16 v64 = *(char **)(a1 + 24);
      int v65 = *(char **)(a1 + 32);
      uint64_t v66 = &v63[4 * v59];
      uint64_t v68 = &v63[4 * v67];
      *(_DWORD *)uint64_t v66 = v53;
      int v58 = v66 + 4;
      while (v65 != v64)
      {
        int v69 = *((_DWORD *)v65 - 1);
        v65 -= 4;
        *((_DWORD *)v66 - 1) = v69;
        v66 -= 4;
      }
      *(void *)(a1 + 24) = v66;
      *(void *)(a1 + 32) = v58;
      *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v68;
      if (v64) {
        operator delete(v64);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v55 = v53;
      int v58 = v55 + 4;
    }
    *(void *)(a1 + 32) = v58;
  }
  return a1;
}

void sub_21630DA78(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[8] = v4;
    operator delete(v4);
  }
  *uint64_t v1 = &unk_26C6C7160;
  int v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21630DAD4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_21630DADC(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_21630DAE4(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

uint64_t sub_21630DAF0(uint64_t a1)
{
  return a1 + 112;
}

BOOL sub_21630DAF8(uint64_t a1)
{
  if (*(void *)(a1 + 104) && (uint64_t v1 = **(unsigned __int16 **)(a1 + 96), v1 != 42)) {
    return *(void *)(a1 + 88) != v1 - 48;
  }
  else {
    return 0;
  }
}

uint64_t sub_21630DB34()
{
  return 0;
}

uint64_t sub_21630DB48()
{
  return 0;
}

uint64_t sub_21630DB54()
{
  return 1;
}

void *sub_21630DB5C(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_21630DBAC(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21630DC1C(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 48) + 6);
}

uint64_t sub_21630DC28(uint64_t a1)
{
  return **(unsigned int **)(a1 + 48);
}

uint64_t sub_21630DC34(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 48) + 4);
}

BOOL sub_21630DC40(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (a2)
  {
    int v3 = *(unsigned __int16 *)(v2 + 4);
    if ((v3 & 0x80) != 0) {
      return 0;
    }
    if ((a2 & 2) != 0)
    {
      return (v3 & 0x400) == 0;
    }
    else
    {
      if ((a2 & 8) != 0) {
        return (~v3 & 0x300) != 0;
      }
      if ((a2 & 4) == 0) {
        return 1;
      }
      return (v3 & 0x200) == 0;
    }
  }
  else
  {
    if ((a2 & 2) == 0)
    {
      if ((a2 & 8) != 0)
      {
        LODWORD(v2) = *(unsigned __int16 *)(v2 + 4);
        if ((~v2 & 0x210) == 0) {
          return ((v2 & 0x8000u) != 0) & (a2 >> 5);
        }
      }
      else if ((a2 & 4) != 0)
      {
        LOWORD(v2) = *(_WORD *)(v2 + 4);
        if ((v2 & 0x20) != 0) {
          return ((v2 & 0x8000u) != 0) & (a2 >> 5);
        }
      }
      return 1;
    }
    __int16 v5 = *(_WORD *)(v2 + 4);
    if ((a2 & 0x10) != 0) {
      return (v5 & 0x2000) == 0;
    }
    else {
      return (v5 & 0x40) == 0;
    }
  }
}

uint64_t sub_21630DCE4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21630DCEC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 88) = a2;
  return result;
}

uint64_t sub_21630DCF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

void *sub_21630DCFC(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_21630DD4C(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21630DDBC()
{
  return 0;
}

uint64_t sub_21630DDC4()
{
  return 1;
}

void *sub_21630DDD0(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &unk_26C6C7160;
  int v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_21630DE30(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &unk_26C6C7160;
  int v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21630DEB0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 138);
}

uint64_t sub_21630DEB8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 136);
}

void *sub_21630DEC0(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_21630DF10(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21630DF80(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 90);
}

void *sub_21630DF88(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_21630DFD8(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21630E048()
{
  return 1;
}

uint64_t sub_21630E050(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_21630E05C()
{
  return 0;
}

void *sub_21630E064(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_21630E0B4(void *a1)
{
  *a1 = &unk_26C6C7160;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21630E124()
{
  return 0;
}

uint64_t sub_21630E12C()
{
  return 1;
}

uint64_t sub_21630E134(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21630E13C(uint64_t a1)
{
  return a1 + 72;
}

BOOL sub_21630E144(int a1)
{
  uint64_t v1 = 0;
  while ((unsigned __int16)word_2163CB98C[v1] != a1)
  {
    if (++v1 == 13)
    {
      uint64_t v2 = 0;
      goto LABEL_6;
    }
  }
  uint64_t v2 = &word_2163CB98C[v1];
LABEL_6:
  if (v2) {
    BOOL v3 = (char *)v2 - (char *)word_2163CB98C == -2;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3;
}

uint64_t sub_21630E188(int a1)
{
  uint64_t v1 = 0;
  while (*(unsigned __int16 *)&a2181c1f1i1[v1] != a1)
  {
    v1 += 2;
    if (v1 == 10) {
      goto LABEL_6;
    }
  }
  if (v1 != -2) {
    return 1;
  }
LABEL_6:
  uint64_t v2 = "V1";
  if (a1 != 12630) {
    uint64_t v2 = 0;
  }
  BOOL v3 = a1 == 12626 || a1 == 12630;
  if (a1 == 12626) {
    uint64_t v4 = "R1V1";
  }
  else {
    uint64_t v4 = v2;
  }
  return v4 - "R1V1" != -2 && v3;
}

uint64_t sub_21630E208(unsigned __int16 *a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = 2 * a2;
  while (1)
  {
    int v3 = *a1;
    if ((unsigned __int16)((unsigned __int16)(v3 + 21504) >> 2) < 0xAE9u
      || (unsigned __int16)((v3 & 0xFFDF) - 65) < 0x1Au)
    {
      goto LABEL_12;
    }
    if (v3 != 39) {
      break;
    }
    uint64_t v4 = &unk_21638FB3E;
LABEL_9:
    if (v4 - (unsigned char *)&unk_21638FB3E == -2) {
      return 0;
    }
LABEL_12:
    ++a1;
    v2 -= 2;
    if (!v2) {
      return 1;
    }
  }
  if (v3 == 45)
  {
    uint64_t v4 = &unk_21638FB40;
    goto LABEL_9;
  }
  if ((v3 - 48) <= 9) {
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_21630E2A0(_DWORD *a1, uint64_t a2)
{
  if (a2 != 2) {
    return 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    int v3 = off_26426EC98[v2];
    if (v3)
    {
      if (*(_DWORD *)v3 == *a1) {
        break;
      }
    }
    if (++v2 == 11) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_21630E2E8(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  sub_21630E3B4(a1, a2);
  if (v4 != a2) {
    return 0;
  }
  int v5 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
  if (v5 == 12619)
  {
    uint64_t v6 = "K1N1";
  }
  else
  {
    if (v5 != 12622) {
      goto LABEL_9;
    }
    uint64_t v6 = "N1";
  }
  if (v6 - "K1N1" != -2) {
    return a2 < 6;
  }
LABEL_9:
  uint64_t v8 = 0;
  while (*(unsigned __int16 *)&a114171g1k1n111[v8] != v5)
  {
    v8 += 2;
    if (v8 == 18) {
      return 0;
    }
  }
  BOOL result = 0;
  if (a2 >= 2 && v8 != -2) {
    return a2 < 6;
  }
  return result;
}

uint64_t sub_21630E3B4(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return *sub_216268B0C();
  }
  uint64_t v2 = 0;
  int v3 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
  while (*(unsigned __int16 *)&a114171g1k1n111[v2] != v3)
  {
    v2 += 2;
    if (v2 == 18) {
      return *sub_216268B0C();
    }
  }
  if (v2 == -2) {
    return *sub_216268B0C();
  }
  if (a2 - 2 < 0)
  {
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v6 = (unsigned __int16 *)(a1 + 2 * a2 - 4);
    uint64_t v7 = 1;
    while (1)
    {
      int v8 = *v6--;
      if (v8 != v3) {
        break;
      }
      if (a2 == ++v7)
      {
        uint64_t v7 = a2;
        return a1 + 2 * (a2 - v7);
      }
    }
  }
  return a1 + 2 * (a2 - v7);
}

BOOL sub_21630E45C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    BOOL v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = (unsigned __int16 *)(a3 + 2 * a4);
    uint64_t v8 = 2 * a4 - 2;
    while (1)
    {
      int v9 = *(unsigned __int16 *)(a1 + 2 * v5);
      if (v9 == 39)
      {
        uint64_t v10 = &unk_21638FB3E;
      }
      else
      {
        if (v9 != 45) {
          goto LABEL_15;
        }
        uint64_t v10 = &unk_21638FB40;
      }
      if (v10 - (unsigned char *)&unk_21638FB3E != -2)
      {
        uint64_t v11 = a3 + 2 + 2 * v6;
        uint64_t v12 = v7;
        if ((unsigned __int16 *)v11 != v7)
        {
          unint64_t v13 = v8 - 2 * v6;
          uint64_t v12 = (unsigned __int16 *)v11;
          while (*v12 != v9)
          {
            ++v12;
            v13 -= 2;
            if (!v13)
            {
              uint64_t v12 = v7;
              break;
            }
          }
        }
        if (v12 == v7) {
          return v4;
        }
        unint64_t v6 = ((uint64_t)v12 - a3) >> 1;
        if (v6 > v5) {
          return v4;
        }
      }
LABEL_15:
      BOOL v4 = ++v5 >= a2;
      if (v5 == a2) {
        return v4;
      }
    }
  }
  return 1;
}

void sub_21630E524(int a1@<W0>, uint64_t a2@<X8>)
{
  if ((a1 - 12623) > 0x14)
  {
    if ((unsigned __int16)(a1 + 10332) > 0xD45Bu)
    {
      __int16 v3 = a1 + 21504;
      unsigned int v4 = (unsigned __int16)(a1 + 21504) / 0x24Cu;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_2161845F8(a2, *(_WORD *)&a112141718191a1[2 * v4]);
      unsigned __int16 v5 = v3 - 588 * v4;
      sub_21630E748(&__p, *(unsigned __int16 *)&aO1p1q1r1s1t1u1[2 * (v5 / 0x1Cu)]);
      if (v16 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v16 >= 0) {
        unint64_t v7 = v16;
      }
      else {
        unint64_t v7 = v15;
      }
      sub_216198220(a2, p_p, v7);
      unsigned __int16 v8 = v5 % 0x1Cu;
      if (v16 < 0) {
        operator delete(__p);
      }
      if (v8)
      {
        uint64_t v9 = 0;
        unint64_t v10 = *(unsigned __int16 *)&a11213141516171[2 * v8 - 2];
        while (*(unsigned __int16 *)&a3151611111111d[v9 * 2] != v10)
        {
          if (++v9 == 11) {
            goto LABEL_21;
          }
        }
        if (v9 == -1)
        {
LABEL_21:
          unsigned int v11 = 1;
          char v16 = 1;
          LODWORD(__p) = (unsigned __int16)v10;
          goto LABEL_23;
        }
        sub_216184F68(&__p, off_26426EC98[v9]);
        unsigned int v11 = v16;
        unint64_t v10 = v15;
LABEL_23:
        if ((v11 & 0x80u) == 0) {
          uint64_t v12 = &__p;
        }
        else {
          uint64_t v12 = __p;
        }
        if ((v11 & 0x80u) == 0) {
          unint64_t v13 = v11;
        }
        else {
          unint64_t v13 = v10;
        }
        sub_216198220(a2, v12, v13);
        if (v16 < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      *(unsigned char *)(a2 + 23) = 1;
      *(_DWORD *)a2 = (unsigned __int16)a1;
    }
  }
  else
  {
    sub_21630E748((unsigned char *)a2, a1);
  }
}

void sub_21630E708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_21630E748(unsigned char *result, int a2)
{
  uint64_t v2 = 0;
  while (*(unsigned __int16 *)&aX1y1z1111b1[v2 * 2] != a2)
  {
    if (++v2 == 7) {
      goto LABEL_6;
    }
  }
  if (v2 == -1)
  {
LABEL_6:
    result[23] = 1;
    *(_WORD *)BOOL result = a2;
    *((_WORD *)result + 1) = 0;
    return result;
  }
  return sub_216184F68(result, off_26426ECF0[v2]);
}

void sub_21630E7A0(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    uint64_t v5 = 2 * a2;
    do
    {
      sub_21630E524(*a1, (uint64_t)__p);
      if ((v9 & 0x80u) == 0) {
        unint64_t v6 = __p;
      }
      else {
        unint64_t v6 = (void **)__p[0];
      }
      if ((v9 & 0x80u) == 0) {
        unint64_t v7 = v9;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      sub_216198220((uint64_t)a3, v6, v7);
      if ((char)v9 < 0) {
        operator delete(__p[0]);
      }
      ++a1;
      v5 -= 2;
    }
    while (v5);
  }
}

void sub_21630E830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_21630E864(int a1@<W0>, char **a2@<X8>)
{
  uint64_t v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  while (*(unsigned __int16 *)&a1171b1e1h1[v4] != a1)
  {
    v4 += 2;
    if (v4 == 10) {
      goto LABEL_8;
    }
  }
  if (v4 != -2)
  {
    __int16 v5 = *(_WORD *)&a2181c1f1i1[v4];
    if (v5)
    {
      unint64_t v6 = (char *)operator new(2uLL);
      *(_WORD *)unint64_t v6 = v5;
      unint64_t v7 = v6 + 2;
      a2[1] = v6 + 2;
      a2[2] = v6 + 2;
      *a2 = v6;
      goto LABEL_9;
    }
  }
LABEL_8:
  unint64_t v6 = 0;
  unint64_t v7 = 0;
LABEL_9:
  uint64_t v8 = 0;
  while (*(unsigned __int16 *)&a1171b1h1[v8] != a1)
  {
    v8 += 2;
    if (v8 == 8) {
      goto LABEL_24;
    }
  }
  if (v8 == -2 || (__int16 v9 = *(_WORD *)&aK1l1m1j1[v8]) == 0)
  {
LABEL_24:
    uint64_t v15 = v7;
    goto LABEL_25;
  }
  uint64_t v10 = v7 - v6;
  if (v7 - v6 <= -3) {
    sub_21610CB04();
  }
  uint64_t v11 = v10 >> 1;
  if (v10 <= (unint64_t)((v10 >> 1) + 1)) {
    uint64_t v12 = v11 + 1;
  }
  else {
    uint64_t v12 = v7 - v6;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13)
  {
    int v14 = (char *)sub_21610FD44((uint64_t)(a2 + 2), v13);
    unint64_t v6 = *a2;
    unint64_t v7 = a2[1];
  }
  else
  {
    int v14 = 0;
  }
  uint64_t v27 = &v14[2 * v11];
  __int16 v28 = &v14[2 * v13];
  *(_WORD *)uint64_t v27 = v9;
  uint64_t v15 = v27 + 2;
  while (v7 != v6)
  {
    __int16 v29 = *((_WORD *)v7 - 1);
    v7 -= 2;
    *((_WORD *)v27 - 1) = v29;
    v27 -= 2;
  }
  *a2 = v27;
  a2[1] = v15;
  a2[2] = v28;
  if (v6) {
    operator delete(v6);
  }
  a2[1] = v15;
LABEL_25:
  if (a1 == 12624)
  {
    char v16 = "P1T1";
  }
  else
  {
    if (a1 != 12628) {
      return;
    }
    char v16 = "T1";
  }
  if (v16 - "P1T1" != -2)
  {
    __int16 v17 = *(_WORD *)&aR1v1[v16 - "P1T1"];
    if (v17)
    {
      unint64_t v18 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v18)
      {
        uint64_t v20 = *a2;
        uint64_t v21 = v15 - *a2;
        if (v21 <= -3) {
          sub_21610CB04();
        }
        uint64_t v22 = v21 >> 1;
        unint64_t v23 = v18 - (void)v20;
        if (v23 <= (v21 >> 1) + 1) {
          unint64_t v24 = v22 + 1;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v23 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v25 = v24;
        }
        if (v25)
        {
          uint64_t v26 = (char *)sub_21610FD44((uint64_t)(a2 + 2), v25);
          uint64_t v20 = *a2;
          uint64_t v15 = a2[1];
        }
        else
        {
          uint64_t v26 = 0;
        }
        uint64_t v30 = &v26[2 * v22];
        uint64_t v31 = &v26[2 * v25];
        *(_WORD *)uint64_t v30 = v17;
        uint64_t v19 = v30 + 2;
        while (v15 != v20)
        {
          __int16 v32 = *((_WORD *)v15 - 1);
          v15 -= 2;
          *((_WORD *)v30 - 1) = v32;
          v30 -= 2;
        }
        *a2 = v30;
        a2[1] = v19;
        a2[2] = v31;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_WORD *)uint64_t v15 = v17;
        uint64_t v19 = v15 + 2;
      }
      a2[1] = v19;
    }
  }
}

void sub_21630EACC(_Unwind_Exception *exception_object)
{
  __int16 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21630EAF0(int a1@<W0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_21630E864(a1, &v14);
  uint64_t v4 = v14;
  __int16 v5 = v15;
  if (v14 != v15)
  {
    unint64_t v6 = a2[1];
    do
    {
      __int16 v7 = *(_WORD *)v4;
      __int16 v13 = *(_WORD *)v4;
      int v16 = 1;
      if (v6 >= a2[2])
      {
        unint64_t v6 = sub_21630F7B4(a2, &v16, &v13);
      }
      else
      {
        *(unsigned char *)(v6 + 23) = 1;
        *(_WORD *)unint64_t v6 = v7;
        *(_WORD *)(v6 + 2) = 0;
        v6 += 24;
        a2[1] = v6;
      }
      a2[1] = v6;
      v4 += 2;
    }
    while (v4 != v5);
    uint64_t v4 = v14;
  }
  if (v4)
  {
    uint64_t v15 = v4;
    operator delete(v4);
  }
  uint64_t v8 = 0;
  while (*(unsigned __int16 *)&aB1h17111e1a141[v8] != a1)
  {
    v8 += 2;
    if (v8 == 28) {
      return;
    }
  }
  if (v8 != -2)
  {
    LODWORD(v14) = 2;
    __int16 v9 = (__int16 *)&aB1h17111e1a141[v8];
    unint64_t v10 = a2[1];
    if (v10 >= a2[2])
    {
      uint64_t v12 = sub_21630F7B4(a2, (int *)&v14, v9);
    }
    else
    {
      unsigned __int16 v11 = *v9;
      *(unsigned char *)(v10 + 23) = 2;
      *(_WORD *)unint64_t v10 = v11;
      *(_DWORD *)(v10 + 2) = v11;
      uint64_t v12 = v10 + 24;
      a2[1] = v10 + 24;
    }
    a2[1] = v12;
  }
}

void sub_21630EC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_21630EC60(int a1)
{
  uint64_t v1 = 0;
  while (*(unsigned __int16 *)&a1171b1e1h1[v1] != a1)
  {
    v1 += 2;
    if (v1 == 10) {
      goto LABEL_6;
    }
  }
  if (v1 != -2)
  {
    int64_t v3 = 0;
    while (*(unsigned __int16 *)&a1171b1e1h1[v3] != a1)
    {
      v3 += 2;
      if (v3 == 10) {
        return 0;
      }
    }
    if (v3 != -2)
    {
      uint64_t v4 = "2181C1F1I1";
      return *(unsigned __int16 *)&v4[v3];
    }
    return 0;
  }
LABEL_6:
  if (a1 != 12624)
  {
    if (a1 == 12628)
    {
      uint64_t v2 = "T1";
      goto LABEL_14;
    }
    return 0;
  }
  uint64_t v2 = "P1T1";
LABEL_14:
  int64_t v3 = v2 - "P1T1";
  if (v3 == -2) {
    return 0;
  }
  uint64_t v4 = "R1V1";
  return *(unsigned __int16 *)&v4[v3];
}

BOOL sub_21630ED18(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E5D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E5D8))
  {
    sub_216184F68(&v11, asc_2163CB906);
    sub_216184F68(v12, byte_2163CB90A);
    sub_216184F68(v13, aT_12);
    sub_216184F68(v14, byte_2163CB914);
    sub_216184F68(v15, aT_13);
    sub_216184F68(v16, aD_12);
    sub_216184F68(v17, asc_2163CB920);
    sub_216184F68(v18, asc_2163CB924);
    sub_216184F68(v19, byte_2163CB928);
    sub_216184F68(v20, aT_14);
    sub_216184F68(v21, byte_2163CB930);
    sub_216184F68(v22, byte_2163CB934);
    sub_216184F68(v23, asc_2163CB938);
    sub_2161DA4F8((uint64_t)&qword_26797E5E8, &v11, 0xDuLL);
    uint64_t v10 = 312;
    do
    {
      if ((char)v12[v10 - 9] < 0) {
        operator delete(*(void **)&v12[v10 - 32]);
      }
      v10 -= 24;
    }
    while (v10);
    __cxa_atexit((void (*)(void *))sub_2161DA598, &qword_26797E5E8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E5D8);
  }
  uint64_t v4 = qword_26797E5E8;
  uint64_t v5 = *(void *)algn_26797E5F0;
  *(void *)&long long v11 = a1;
  *((void *)&v11 + 1) = a2;
  if (qword_26797E5E8 == *(void *)algn_26797E5F0) {
    return 0;
  }
  do
  {
    int v6 = *(char *)(v4 + 23);
    if (v6 >= 0) {
      __int16 v7 = (const void *)v4;
    }
    else {
      __int16 v7 = *(const void **)v4;
    }
    if (v6 >= 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = *(void *)(v4 + 8);
    }
    BOOL result = sub_216268C14((uint64_t *)&v11, v7, v8);
    if (result) {
      break;
    }
    v4 += 24;
  }
  while (v4 != v5);
  return result;
}

void sub_21630EF74(_Unwind_Exception *a1)
{
  uint64_t v3 = 312;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0) {
      operator delete(*(void **)(v1 + v3 - 24));
    }
    v3 -= 24;
    if (!v3)
    {
      __cxa_guard_abort(&qword_26797E5D8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_21630EFDC(const __CFString *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E5E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E5E0))
  {
    sub_216184F68(__p, "41W1O1");
    sub_216184F68(v4, "41W1c1");
    sub_216184F68(v5, "91W1c1");
    sub_216184F68(v6, "G1W1O1");
    sub_216184F68(v7, "G1W1c1");
    sub_216184F68(v8, "N1W1O1");
    sub_216184F68(v9, "N1W1c1");
    sub_216184F68(v10, "O191A1");
    sub_216184F68(v11, "S191A1");
    sub_216184F68(v12, "W191A1");
    sub_2161DA4F8((uint64_t)&qword_26797E600, (long long *)__p, 0xAuLL);
    for (uint64_t i = 0; i != -240; i -= 24)
    {
      if ((char)v12[i + 23] < 0) {
        operator delete(*(void **)&v12[i]);
      }
    }
    __cxa_atexit((void (*)(void *))sub_2161DA598, &qword_26797E600, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E5E0);
  }
  sub_2161E236C(a1);
}

void sub_21630F2E4(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 239) < 0) {
      operator delete(*(void **)(v1 + v3 + 216));
    }
    v3 -= 24;
    if (v3 == -240)
    {
      __cxa_guard_abort(&qword_26797E5E0);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_21630F358(BOOL result)
{
  if (result)
  {
    CFArrayRef v1 = (const __CFArray *)result;
    if (CFArrayGetCount((CFArrayRef)result) == 28)
    {
      CFStringRef ValueAtIndex = (unsigned __int16 **)CFArrayGetValueAtIndex(v1, 0);
      if (sub_21630E188(*ValueAtIndex[3]))
      {
        return 1;
      }
      else
      {
        unint64_t v3 = 0;
        do
        {
          unint64_t v4 = v3;
          if (v3 == 27) {
            break;
          }
          ++v3;
          uint64_t v5 = (unsigned __int16 **)CFArrayGetValueAtIndex(v1, v4 + 1);
        }
        while (!sub_21630E188(*v5[3]));
        return v4 < 0x1B;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_21630F3F8(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = sub_21630F4C0(a1, a2);
  if (result != 1)
  {
    int v7 = result;
    sub_21630E3B4((uint64_t)a3, a4);
    uint64_t v9 = v8;
    uint64_t v10 = a4 - v8;
    if (!v10) {
      return v7 == 3;
    }
    uint64_t v11 = 2 * a4 - 2 * v9;
    for (uint64_t i = a3; (unsigned __int16)(*i + 10332) <= 0xD45Bu && (unsigned __int16)(*i - 12644) < 0xFFCDu; ++i)
    {
      v11 -= 2;
      if (!v11) {
        return v7 == 3;
      }
    }
    return (sub_21630E208(a3, v10) & 1) == 0 && v7 == 3;
  }
  return result;
}

uint64_t sub_21630F4C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    unsigned __int8 v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = MEMORY[0x263EF8318];
    do
    {
      unint64_t v8 = *(unsigned __int16 *)(a1 + 2 * v4);
      if (v8 <= 0x7F) {
        int v9 = *(_DWORD *)(v7 + 4 * v8 + 60) & 0x8000;
      }
      else {
        int v9 = __maskrune(v8, 0x8000uLL);
      }
      if (v4) {
        uint64_t v10 = v9 != 0;
      }
      else {
        uint64_t v10 = 0;
      }
      v6 += v10;
      if (v9) {
        BOOL v11 = v4 == 0;
      }
      else {
        BOOL v11 = 0;
      }
      v5 |= v11;
      ++v4;
    }
    while (a2 != v4);
    if (v5) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unsigned __int8 v5 = 0;
  }
  if (!v6) {
    return 0;
  }
LABEL_18:
  if (v6 != 0 || (v5 & 1) == 0) {
    unsigned int v13 = 3;
  }
  else {
    unsigned int v13 = 2;
  }
  if ((v5 & (v6 == a2 - 1)) != 0) {
    return 1;
  }
  else {
    return v13;
  }
}

unsigned char *sub_21630F5B4@<X0>(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, unsigned __int16 *a3@<X2>, unint64_t a4@<X3>, unsigned __int16 *a5@<X8>)
{
  int v10 = sub_21630F4C0((uint64_t)a1, a2);
  if (v10 == 2)
  {
    if (a4)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 2 * a4;
      while (1)
      {
        unsigned __int16 v17 = a3[v15 / 2];
        if ((unsigned __int16)(v17 + 10332) > 0xD45Bu || (unsigned __int16)(v17 - 12644) >= 0xFFCDu) {
          break;
        }
        v15 += 2;
        if (v16 == v15)
        {
          unint64_t v18 = 0;
          uint64_t v19 = MEMORY[0x263EF8318];
          while (1)
          {
            unint64_t v20 = a3[v18 / 2];
            if (v20 <= 0x7F ? *(_DWORD *)(v19 + 4 * v20 + 60) & 0x8000 : __maskrune(v20, 0x8000uLL)) {
              goto LABEL_4;
            }
            v18 += 2;
            if (v16 == v18) {
              goto LABEL_19;
            }
          }
        }
      }
    }
LABEL_19:
    sub_21617FAAC(a5, a3, a4);
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v22 = a5;
    }
    else {
      uint64_t v22 = *(unsigned __int16 **)a5;
    }
    uint64_t result = (unsigned char *)__toupper(*v22);
    if (*((char *)a5 + 23) >= 0) {
      unint64_t v23 = a5;
    }
    else {
      unint64_t v23 = *(_WORD **)a5;
    }
    _WORD *v23 = (_WORD)result;
  }
  else
  {
    if (!v10 || (v10 & 1) == 0)
    {
LABEL_4:
      BOOL v11 = a5;
      uint64_t v12 = a3;
      unint64_t v13 = a4;
LABEL_5:
      return sub_21617FAAC(v11, v12, v13);
    }
    if (a2 == a4)
    {
      if (!a2) {
        goto LABEL_36;
      }
      __darwin_ct_rune_t v24 = __tolower(*a1);
      if (v24 == __tolower(*a3))
      {
        uint64_t v25 = 1;
        do
        {
          unint64_t v26 = v25;
          if (a2 == v25) {
            break;
          }
          __darwin_ct_rune_t v27 = __tolower(a1[v25]);
          __darwin_ct_rune_t v28 = __tolower(a3[v26]);
          uint64_t v25 = v26 + 1;
        }
        while (v27 == v28);
        if (v26 >= a2)
        {
LABEL_36:
          BOOL v11 = a5;
          uint64_t v12 = a1;
          unint64_t v13 = a2;
          goto LABEL_5;
        }
      }
    }
    return sub_216184F68(a5, byte_21638FB3C);
  }
  return result;
}

void sub_21630F798(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21630F7B4(uint64_t *a1, int *a2, __int16 *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_216129BFC(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v15 = v12;
  uint64_t v16 = &v12[24 * v5];
  unsigned __int16 v17 = v16;
  unint64_t v18 = &v12[24 * v11];
  sub_2161BC978(v16, *a2, *a3);
  unsigned __int16 v17 = v16 + 24;
  sub_21617FB68(a1, &v15);
  uint64_t v13 = a1[1];
  sub_21613FD68((uint64_t)&v15);
  return v13;
}

void sub_21630F8B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21613FD68((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21630F8C4(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if ((v3 - 2) >= 2)
  {
    return v3 == 1 && a2 == 111;
  }
  else if (a2 <= 122 && (v4 = *(unsigned __int16 ****)a1, (unint64_t v5 = **v4) != 0))
  {
    return sub_21632279C((uint64_t)v4, v5, a2) != 0;
  }
  else
  {
    return 0;
  }
}

void sub_21630F92C(unsigned __int16 ****a1@<X0>, int a2@<W1>, unsigned __int16 ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((unsigned char *)a1 + 48) && !a1[5] && sub_21630F8C4((uint64_t)a1, a2))
  {
    if (*((_DWORD *)a1 + 6) == 1)
    {
      unint64_t v6 = 0;
      uint64_t v7 = a3 + 2;
      unint64_t v8 = "aeo";
      do
      {
        uint64_t v9 = ***a1;
        if (v9)
        {
          unint64_t v10 = sub_21632279C((uint64_t)*a1, v9, *v8);
          if (v10)
          {
            unint64_t v11 = v10;
            if ((unint64_t)v6 >= *v7)
            {
              uint64_t v12 = v6 - *a3;
              if ((unint64_t)(v12 + 1) >> 61) {
                sub_21610CB04();
              }
              uint64_t v13 = *v7 - (void)*a3;
              uint64_t v14 = v13 >> 2;
              if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
                uint64_t v14 = v12 + 1;
              }
              if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v15 = v14;
              }
              if (v15) {
                uint64_t v16 = (char *)sub_2160FFAA8((uint64_t)(a3 + 2), v15);
              }
              else {
                uint64_t v16 = 0;
              }
              unsigned __int16 v17 = (unsigned __int16 **)&v16[8 * v12];
              *unsigned __int16 v17 = v11;
              unint64_t v6 = v17 + 1;
              uint64_t v19 = (char *)*a3;
              unint64_t v18 = (char *)a3[1];
              if (v18 != (char *)*a3)
              {
                do
                {
                  unint64_t v20 = (unsigned __int16 *)*((void *)v18 - 1);
                  v18 -= 8;
                  *--unsigned __int16 v17 = v20;
                }
                while (v18 != v19);
                unint64_t v18 = (char *)*a3;
              }
              *a3 = v17;
              a3[1] = v6;
              a3[2] = (unsigned __int16 **)&v16[8 * v15];
              if (v18) {
                operator delete(v18);
              }
            }
            else
            {
              *v6++ = v10;
            }
            a3[1] = v6;
          }
        }
        ++v8;
      }
      while (v8 != "");
    }
    else
    {
      uint64_t v21 = ***a1;
      if (v21)
      {
        uint64_t v22 = sub_21632279C((uint64_t)*a1, v21, a2);
        if (v22)
        {
          unint64_t v23 = v22;
          __darwin_ct_rune_t v24 = (unsigned __int16 **)sub_2160FFAA8((uint64_t)(a3 + 2), 1uLL);
          unint64_t v26 = &v24[v25];
          _DWORD *v24 = v23;
          __darwin_ct_rune_t v27 = v24 + 1;
          __int16 v29 = (char *)*a3;
          __darwin_ct_rune_t v28 = (char *)a3[1];
          if (v28 != (char *)*a3)
          {
            do
            {
              uint64_t v30 = (unsigned __int16 *)*((void *)v28 - 1);
              v28 -= 8;
              *--__darwin_ct_rune_t v24 = v30;
            }
            while (v28 != v29);
            __darwin_ct_rune_t v28 = (char *)*a3;
          }
          *a3 = v24;
          a3[1] = v27;
          a3[2] = v26;
          if (v28) {
            operator delete(v28);
          }
          a3[1] = v27;
        }
      }
    }
  }
}

void sub_21630FB10(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21630FB34(uint64_t a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (a2 == 39
    || (a2 - 97) < 0x1Bu
    || (v5 <= 7 ? (BOOL v6 = ((1 << v5) & 0x8C) == 0) : (BOOL v6 = 1), !v6 && a2 == 59))
  {
    if (a2 == 59) {
      char v7 = 123;
    }
    else {
      char v7 = a2;
    }
    BOOL v8 = v5 > 7;
    int v9 = (1 << v5) & 0x8C;
    if (v8 || v9 == 0) {
      char v11 = a2;
    }
    else {
      char v11 = v7;
    }
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v12 = *(unsigned __int16 **)(a1 + 40);
      if (v12)
      {
        sub_21630FEFC(a1, v11, v12, 0, a3);
      }
      else
      {
        int v20 = *(_DWORD *)(a1 + 24);
        if (v20 == 1)
        {
          int v33 = 0;
        }
        else
        {
          if (v20 == 3)
          {
            *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 32);
            *(unsigned char *)(a1 + 57) = v11;
            uint64_t v21 = *(unsigned __int16 ****)a1;
            uint64_t v22 = ***(unsigned __int16 ****)a1;
            if (v22)
            {
              uint64_t v23 = 0;
              char v24 = 1;
              do
              {
                uint64_t v25 = sub_21632279C((uint64_t)v21, v22, *(char *)(a1 + 56 + v23));
                uint64_t v22 = v25;
                if ((v24 & 1) == 0) {
                  break;
                }
                char v24 = 0;
                uint64_t v23 = 1;
              }
              while (v25);
              if (v25)
              {
                unint64_t v26 = (char *)sub_2160FFAA8((uint64_t)(a3 + 2), 1uLL);
                __darwin_ct_rune_t v28 = &v26[8 * v27];
                *(void *)unint64_t v26 = v22;
                __int16 v29 = v26 + 8;
                uint64_t v31 = (char *)*a3;
                uint64_t v30 = (char *)a3[1];
                if (v30 != *a3)
                {
                  do
                  {
                    uint64_t v32 = *((void *)v30 - 1);
                    v30 -= 8;
                    *((void *)v26 - 1) = v32;
                    v26 -= 8;
                  }
                  while (v30 != v31);
                  uint64_t v30 = (char *)*a3;
                }
                *a3 = v26;
                a3[1] = v29;
                a3[2] = v28;
                if (v30) {
                  operator delete(v30);
                }
                a3[1] = v29;
              }
            }
          }
          int v33 = 1;
        }
        sub_21630FEFC(a1, v11, ***(unsigned __int16 ****)a1, v33, a3);
      }
      *(unsigned char *)(a1 + 32) = 0;
      *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0;
      *(unsigned char *)(a1 + 48) = 0;
      uint64_t v34 = *a3;
      if (*a3 == a3[1])
      {
        sub_21630FE2C(a1, v11);
        uint64_t v35 = *(void *)(a1 + 40);
        if (v35)
        {
          unint64_t v36 = (unint64_t)a3[2];
          if ((unint64_t)v34 >= v36)
          {
            unint64_t v38 = v36 - (void)v34;
            unint64_t v39 = (uint64_t)(v36 - (void)v34) >> 2;
            if (v39 <= 1) {
              unint64_t v39 = 1;
            }
            if (v38 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v39;
            }
            uint64_t v41 = (char *)sub_2160FFAA8((uint64_t)(a3 + 2), v40);
            int v43 = &v41[8 * v42];
            *(void *)uint64_t v41 = *(void *)(a1 + 40);
            uint64_t v37 = v41 + 8;
            float v45 = (char *)*a3;
            int v44 = (char *)a3[1];
            if (v44 != *a3)
            {
              do
              {
                uint64_t v46 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v41 - 1) = v46;
                v41 -= 8;
              }
              while (v44 != v45);
              int v44 = (char *)*a3;
            }
            *a3 = v41;
            a3[1] = v37;
            a3[2] = v43;
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            *uint64_t v34 = v35;
            uint64_t v37 = (char *)(v34 + 1);
          }
          a3[1] = v37;
        }
      }
    }
    else
    {
      sub_21630FE2C(a1, v11);
      if (*(void *)(a1 + 40))
      {
        uint64_t v13 = (char *)sub_2160FFAA8((uint64_t)(a3 + 2), 1uLL);
        unint64_t v15 = &v13[8 * v14];
        *(void *)uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v16 = v13 + 8;
        unint64_t v18 = (char *)*a3;
        unsigned __int16 v17 = (char *)a3[1];
        if (v17 != *a3)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v13 - 1) = v19;
            v13 -= 8;
          }
          while (v17 != v18);
          unsigned __int16 v17 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v16;
        a3[2] = v15;
        if (v17) {
          operator delete(v17);
        }
        a3[1] = v16;
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0;
    *(unsigned char *)(a1 + 48) = 0;
  }
}

void sub_21630FE10(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21630FE2C(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v4 + ((4 * a2 + 124) & 0xFC)))
  {
    unsigned int v5 = (const char *)*((void *)&off_26426ED28 + *(unsigned __int8 *)(v4 + ((4 * a2 + 124) & 0xFC)));
    BOOL v6 = *(unsigned __int16 ****)a1;
    char v7 = ***(unsigned __int16 ****)a1;
    size_t v8 = strlen(v5);
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      size_t v10 = v8;
      size_t v11 = 0;
      do
      {
        char v7 = sub_21632279C((uint64_t)v6, v7, v5[v11++]);
        if (v7) {
          BOOL v12 = v11 >= v10;
        }
        else {
          BOOL v12 = 1;
        }
      }
      while (!v12);
    }
    BOOL result = 1;
  }
  else
  {
    BOOL result = sub_21630F8C4(a1, a2);
    char v7 = 0;
  }
  *(unsigned char *)(a1 + 32) = a2;
  *(void *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v7;
  *(unsigned char *)(a1 + 48) = result;
  return result;
}

void sub_21630FEFC(uint64_t a1, char a2, unsigned __int16 *a3, int a4, void **a5)
{
  if ((4 * a2 + 125) < (((4 * a2) ^ 0x80) & 0xFCu))
  {
    uint64_t v29 = (uint64_t)(a5 + 2);
    uint64_t v8 = (4 * a2 + 125);
    int v9 = (4 * a2) ^ 0x80;
    do
    {
      if (!*(unsigned char *)(*(void *)(a1 + 16) + v8)) {
        break;
      }
      size_t v10 = (unsigned __int8 *)*((void *)&off_26426ED28 + *(unsigned __int8 *)(*(void *)(a1 + 16) + v8));
      if (!a4 || *(unsigned __int8 *)(a1 + 32) == *v10)
      {
        uint64_t v11 = *(void *)a1;
        size_t v12 = strlen(*((const char **)&off_26426ED28 + *(unsigned __int8 *)(*(void *)(a1 + 16) + v8)));
        uint64_t v13 = a3;
        if (a3)
        {
          size_t v14 = v12;
          uint64_t v13 = a3;
          if (v12)
          {
            size_t v15 = 0;
            uint64_t v13 = a3;
            do
            {
              uint64_t v13 = sub_21632279C(v11, v13, (char)v10[v15++]);
              if (v13) {
                BOOL v16 = v15 >= v14;
              }
              else {
                BOOL v16 = 1;
              }
            }
            while (!v16);
          }
        }
        if (v13 && (v13[4] & 2) != 0)
        {
          unint64_t v18 = (unsigned __int16 **)a5[1];
          unint64_t v17 = (unint64_t)a5[2];
          if ((unint64_t)v18 >= v17)
          {
            uint64_t v20 = ((char *)v18 - (unsigned char *)*a5) >> 3;
            if ((unint64_t)(v20 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v21 = v17 - (void)*a5;
            uint64_t v22 = v21 >> 2;
            if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
              uint64_t v22 = v20 + 1;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23) {
              char v24 = (char *)sub_2160FFAA8(v29, v23);
            }
            else {
              char v24 = 0;
            }
            uint64_t v25 = (unsigned __int16 **)&v24[8 * v20];
            *uint64_t v25 = v13;
            uint64_t v19 = v25 + 1;
            uint64_t v27 = (char *)*a5;
            unint64_t v26 = (char *)a5[1];
            if (v26 != *a5)
            {
              do
              {
                __darwin_ct_rune_t v28 = (unsigned __int16 *)*((void *)v26 - 1);
                v26 -= 8;
                *--uint64_t v25 = v28;
              }
              while (v26 != v27);
              unint64_t v26 = (char *)*a5;
            }
            *a5 = v25;
            a5[1] = v19;
            a5[2] = &v24[8 * v23];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *unint64_t v18 = v13;
            uint64_t v19 = v18 + 1;
          }
          a5[1] = v19;
        }
      }
      ++v8;
    }
    while (v9 != v8);
  }
}

void *sub_2163100C0()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E620, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E620))
  {
    memcpy(__dst, &unk_21638FC78, sizeof(__dst));
    sub_21618FA28((uint64_t)&unk_26797E698, __dst, 414);
    __cxa_atexit((void (*)(void *))sub_21618D6E4, &unk_26797E698, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E620);
  }
  return &unk_26797E698;
}

void sub_216310190(_Unwind_Exception *a1)
{
}

uint64_t sub_2163101A8(unsigned int a1, int a2)
{
  if (a1 == 5000) {
    return 0;
  }
  if (a2)
  {
    if (a2 == 2)
    {
      int v3 = &xmmword_26797E680;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E638, memory_order_acquire) & 1) == 0)
      {
        unsigned int v5 = a1;
        uint64_t v4 = &qword_26797E638;
        if (__cxa_guard_acquire(&qword_26797E638))
        {
          sub_21631057C();
          int v3 = &xmmword_26797E680;
          goto LABEL_16;
        }
LABEL_17:
        a1 = v5;
      }
    }
    else
    {
      if (a2 != 1) {
        return 0;
      }
      int v3 = (long long *)&qword_26797E640;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E628, memory_order_acquire) & 1) == 0)
      {
        unsigned int v5 = a1;
        uint64_t v4 = &qword_26797E628;
        if (__cxa_guard_acquire(&qword_26797E628))
        {
          sub_216310314();
          int v3 = (long long *)&qword_26797E640;
LABEL_16:
          __cxa_atexit((void (*)(void *))sub_2163103D8, v3, &dword_2160F5000);
          __cxa_guard_release(v4);
          goto LABEL_17;
        }
        goto LABEL_17;
      }
    }
  }
  else
  {
    int v3 = &xmmword_26797E660;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E630, memory_order_acquire) & 1) == 0)
    {
      unsigned int v5 = a1;
      uint64_t v4 = &qword_26797E630;
      if (__cxa_guard_acquire(&qword_26797E630))
      {
        sub_216310490();
        int v3 = &xmmword_26797E660;
        goto LABEL_16;
      }
      goto LABEL_17;
    }
  }
  return *(void *)(*(void *)v3 + 8 * a1);
}

void sub_2163102DC(_Unwind_Exception *a1)
{
}

void sub_216310314()
{
  uint64_t v0 = 2059;
  sub_216310410(&qword_26797E640, 0x80BuLL);
  uint64_t v1 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  uint64_t v4 = (CFIndex *)&unk_264274F38;
  do
  {
    uint64_t v5 = qword_26797E640;
    CFStringRef v6 = CFStringCreateWithCharactersNoCopy(v2, (const UniChar *)*(v4 - 1), *v4, v3);
    v4 += 2;
    sub_2161868BC((const void **)(v5 + v1), v6);
    v1 += 8;
    --v0;
  }
  while (v0);
}

void sub_2163103C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161FA8F4((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_2163103D8(void **a1)
{
  CFAllocatorRef v3 = a1;
  sub_2161FA8F4(&v3);
  return a1;
}

void *sub_216310410(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (char *)sub_2160FFAA8((uint64_t)(a1 + 2), a2);
  *a1 = v4;
  a1[2] = &v4[8 * v5];
  bzero(v4, 8 * a2);
  a1[1] = &v4[8 * a2];
  return a1;
}

void sub_21631047C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216310490()
{
  sub_216310410(&v6, 0x21EuLL);
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  do
  {
    uint64_t v4 = v6;
    CFStringRef v5 = CFStringCreateWithCStringNoCopy(v2, (&off_26426EF10)[v1], 0x8000100u, v3);
    sub_2161868BC((const void **)(v4 + v0), v5);
    v1 += 2;
    v0 += 8;
  }
  while (v1 != 1084);
  xmmword_26797E660 = v6;
  qword_26797E670 = v7;
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  uint64_t v8 = (void **)&v6;
  sub_2161FA8F4(&v8);
}

void sub_216310560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_2161FA8F4(&a12);
  _Unwind_Resume(a1);
}

void sub_21631057C()
{
  sub_216310410(&v6, 0x3E4uLL);
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  do
  {
    uint64_t v4 = v6;
    CFStringRef v5 = CFStringCreateWithCStringNoCopy(v2, (&off_2642710F0)[v1], 0x8000100u, v3);
    sub_2161868BC((const void **)(v4 + v0), v5);
    v1 += 2;
    v0 += 8;
  }
  while (v1 != 1992);
  xmmword_26797E680 = v6;
  qword_26797E690 = v7;
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  uint64_t v8 = (void **)&v6;
  sub_2161FA8F4(&v8);
}

void sub_21631064C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_2161FA8F4(&a12);
  _Unwind_Resume(a1);
}

void sub_216310668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26C6C5CE0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 88);
  int v10 = *(_DWORD *)(a2 + 24);
  if ((v10 & 0x4000) != 0)
  {
    uint64_t v11 = 1;
  }
  else if ((v10 & 0x10000) != 0)
  {
    uint64_t v11 = 2;
  }
  else if ((v10 & 0x400000) != 0)
  {
    uint64_t v11 = 4;
  }
  else if (*(_DWORD *)a2 == 5)
  {
    uint64_t v11 = 3;
  }
  else if (*(_DWORD *)a2 == 13)
  {
    uint64_t v11 = 5;
  }
  else
  {
    uint64_t v11 = 0;
  }
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = v11;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 32sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 40sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  *(_OWORD *)(a1 + 44sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(unsigned char *)(a1 + 472) = 0;
  *(void *)(a1 + 48sub_21617DB94((const void **)&__p, 0) = 0xFFFFLL;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 52sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_WORD *)(a1 + 536) = 0;
  sub_216311058(v11, (void *)(a1 + 544));
  *(_DWORD *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 556) = 0;
  *(_OWORD *)(a1 + 56sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 608) = a3;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_DWORD *)(a1 + 672) = 1065353216;
  sub_2161AAF00((void *)(a1 + 680), 0x14uLL);
  *(void *)(a1 + 704) = 0x3727C5AC3FC00000;
  *(void *)(a1 + 712) = 2;
  *(_OWORD *)(a1 + 72sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_DWORD *)(a1 + 752) = 1065353216;
  *(void *)(a1 + 76sub_21617DB94((const void **)&__p, 0) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(void *)(a1 + 784) = -1;
  *(void *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 80sub_21617DB94((const void **)&__p, 0) = 0u;
  *(unsigned char *)(a1 + 816) = a6;
  *(unsigned char *)(a1 + 84sub_21617DB94((const void **)&__p, 0) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(void *)(a1 + 848) = a4;
  *(void *)(a1 + 856) = a5;
  *(void *)(a1 + 864) = 0;
  operator new[]();
}

void sub_216310E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, id ***a11, uint64_t *a12, void **a13, void **a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, void **a19)
{
  MEMORY[0x2166CA800](v22, 0x10F1C406F3FD563);
  uint64_t v24 = *(void *)(v19 + 864);
  *(void *)(v19 + 864) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *(void *)(v19 + 832);
  *(void *)(v19 + 832) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  sub_21631E9C0(a16, 0);
  a19 = (void **)(v19 + 760);
  sub_21613F444(&a19);
  sub_216144C28(v19 + 720);
  unint64_t v26 = *a9;
  if (*a9)
  {
    *(void *)(v19 + 688) = v26;
    operator delete(v26);
  }
  sub_216144C28(v20);
  uint64_t v27 = *a10;
  if (*a10)
  {
    *(void *)(v19 + 624) = v27;
    operator delete(v27);
  }
  __darwin_ct_rune_t v28 = (void **)(v19 + 560);
  uint64_t v29 = *(void **)(v19 + 584);
  if (v29)
  {
    *(void *)(v19 + 592) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v19 + 568) = v30;
    operator delete(v30);
  }
  sub_216193E50(a11, 0);
  uint64_t v31 = *a12;
  *a12 = 0;
  if (v31) {
    MEMORY[0x2166CA800](v31, 0x1070C4004AA1E42);
  }
  uint64_t v32 = *a13;
  if (*a13)
  {
    *(void *)(v19 + 448) = v32;
    operator delete(v32);
  }
  sub_21631E938((uint64_t)(v21 + 44));
  int v33 = *v21;
  if (*v21)
  {
    *(void *)(v19 + 56) = v33;
    operator delete(v33);
  }
  a19 = a14;
  sub_21631DA2C(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_216311058@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
    case 2:
      operator new();
    case 3:
      operator new();
    case 5:
      operator new();
    default:
      *a2 = 0;
      return result;
  }
}

void sub_216311138(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t sub_21631117C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5CE0;
  sub_216311338(a1, 0, 1);
  CFAllocatorRef v2 = *(const void **)(a1 + 464);
  if (v2) {
    CFRelease(v2);
  }
  sub_21631EA10(a1 + 400);
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *(void *)(a1 + 864);
  *(void *)(a1 + 864) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 832);
  *(void *)(a1 + 832) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_21631E9C0((uint64_t *)(a1 + 824), 0);
  size_t v14 = (void **)(a1 + 760);
  sub_21613F444(&v14);
  sub_216144C28(a1 + 720);
  long long v6 = *(void **)(a1 + 680);
  if (v6)
  {
    *(void *)(a1 + 688) = v6;
    operator delete(v6);
  }
  sub_216144C28(a1 + 640);
  uint64_t v7 = *(void **)(a1 + 616);
  if (v7)
  {
    *(void *)(a1 + 624) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 584);
  if (v8)
  {
    *(void *)(a1 + 592) = v8;
    operator delete(v8);
  }
  int v9 = *(void **)(a1 + 560);
  if (v9)
  {
    *(void *)(a1 + 568) = v9;
    operator delete(v9);
  }
  sub_216193E50((id ***)(a1 + 544), 0);
  uint64_t v10 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = 0;
  if (v10) {
    MEMORY[0x2166CA800](v10, 0x1070C4004AA1E42);
  }
  uint64_t v11 = *(void **)(a1 + 440);
  if (v11)
  {
    *(void *)(a1 + 448) = v11;
    operator delete(v11);
  }
  sub_21631E938(a1 + 400);
  size_t v12 = *(void **)(a1 + 48);
  if (v12)
  {
    *(void *)(a1 + 56) = v12;
    operator delete(v12);
  }
  size_t v14 = (void **)(a1 + 8);
  sub_21631DA2C(&v14);
  return a1;
}

void sub_216311338(uint64_t a1, unint64_t a2, int a3)
{
  if (a2
    && *(void *)(a1 + 800) <= a2
    && (v6 = *(void *)(a1 + 8), uint64_t v7 = *(void **)(a1 + 16), v8 = ((uint64_t)v7 - v6) >> 3, v8 >= a2))
  {
    if (v8 > a2)
    {
      int v9 = (void *)(v6 + 8 * a2);
      while (v7 != v9)
      {
        uint64_t v11 = *--v7;
        uint64_t v10 = v11;
        *uint64_t v7 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
      *(void *)(a1 + 16) = v9;
    }
    sub_216184BFC(a1 + 48, a2);
    *(void *)(a1 + 496) = a2;
  }
  else
  {
    sub_21631DA80((void *)(a1 + 8));
    *(void *)(a1 + 56) = *(void *)(a1 + 48);
    *(void *)(a1 + 568) = *(void *)(a1 + 560);
    *(void *)(a1 + 592) = *(void *)(a1 + 584);
    *(void *)(a1 + 496) = 0;
    *(void *)(a1 + 80sub_21617DB94((const void **)&__p, 0) = 0;
  }
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 48sub_21617DB94((const void **)&__p, 0) = 0xFFFFLL;
  uint64_t v24 = a1 + 80;
  int v25 = 0;
  sub_21631EA68((uint64_t)&v24);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 52sub_21617DB94((const void **)&__p, 0) = 0;
  *(void *)(a1 + 528) &= 0x8000000000000000;
  uint64_t v14 = *(void *)(a1 + 488);
  *(unsigned char *)(v14 + 32) = 0;
  *(void *)(v14 + 4sub_21617DB94((const void **)&__p, 0) = 0;
  *(unsigned char *)(v14 + 48) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 556) = 0;
  *(unsigned char *)(a1 + 537) = 0;
  size_t v15 = *(void ****)(a1 + 544);
  if (v15) {
    [**v15 resetWithZone:v12 withStream:v13];
  }
  if (*(void *)(a1 + 744))
  {
    BOOL v16 = *(void **)(a1 + 736);
    if (v16)
    {
      do
      {
        unint64_t v17 = (void *)*v16;
        operator delete(v16);
        BOOL v16 = v17;
      }
      while (v17);
    }
    *(void *)(a1 + 736) = 0;
    uint64_t v18 = *(void *)(a1 + 728);
    if (v18)
    {
      for (uint64_t i = 0; i != v18; ++i)
        *(void *)(*(void *)(a1 + 720) + 8 * i) = 0;
    }
    *(void *)(a1 + 744) = 0;
  }
  sub_21613F498((uint64_t *)(a1 + 760));
  if (a3)
  {
    if (!a2) {
      *(_OWORD *)(a1 + 784) = xmmword_216371B70;
    }
    uint64_t v20 = *(void *)(a1 + 824);
    if (v20)
    {
      sub_216129D20((uint64_t *)(v20 + 144));
      *(_DWORD *)(v20 + 192) = 0;
      sub_21618C36C((uint64_t *)v20);
    }
    uint64_t v21 = *(void *)(a1 + 832);
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
    }
    uint64_t v22 = *(void *)(a1 + 864);
    if (v22)
    {
      unint64_t v23 = *(void (**)(void))(*(void *)v22 + 16);
      v23();
    }
  }
}

void sub_216311584(uint64_t a1)
{
  sub_21631117C(a1);

  JUMPOUT(0x2166CA800);
}

id ***sub_2163115BC(id ***result, _DWORD *a2, id *a3)
{
  uint64_t v5 = result;
  int v6 = a2[6];
  if ((v6 & 0x4000) != 0)
  {
    uint64_t v8 = 1;
  }
  else if ((v6 & 0x10000) != 0)
  {
    uint64_t v8 = 2;
  }
  else if ((v6 & 0x400000) != 0)
  {
    uint64_t v8 = 4;
  }
  else
  {
    if (*a2 == 13) {
      unsigned int v7 = 5;
    }
    else {
      unsigned int v7 = 0;
    }
    if (*a2 == 5) {
      uint64_t v8 = 3;
    }
    else {
      uint64_t v8 = v7;
    }
  }
  if (*((_DWORD *)result + 10) != v8)
  {
    sub_216311338((uint64_t)result, 0, 1);
    *((_DWORD *)v5 + 1sub_21617DB94((const void **)&__p, 0) = v8;
    sub_216311058(v8, &v17);
    BOOL result = sub_216193E50(v5 + 68, v17);
    float v9 = 0.8;
    if ((*((_DWORD *)v5 + 10) - 3) >= 2) {
      float v9 = 1.5;
    }
    *((float *)v5 + 176) = v9;
  }
  if (!*((unsigned char *)v5 + 816))
  {
    int v10 = a2[7];
    *((unsigned char *)v5 + 472) = (a2[6] & 0x400) != 0;
    uint64_t v11 = v5[61];
    if (*((_DWORD *)v11 + 2) != v10)
    {
      *((_DWORD *)v11 + 2) = v10;
      unsigned int v12 = v10 - 1;
      if (v10) {
        uint64_t v13 = (id *)((char *)&unk_26797C920 + 108 * (int)v12);
      }
      else {
        uint64_t v13 = 0;
      }
      v11[2] = v13;
      if (v12 <= 6) {
        *((_DWORD *)v11 + 6) = dword_2163963D4[v12];
      }
      *((unsigned char *)v11 + 32) = 0;
      v11[5] = 0;
      *((unsigned char *)v11 + 48) = 0;
    }
  }
  uint64_t v14 = v5[108];
  if (v14) {
    v14[18] = a3;
  }
  size_t v15 = v5[103];
  if (v15) {
    v15[16] = a3;
  }
  BOOL v16 = v5[104];
  if (v16) {
    v16[16] = a3;
  }
  return result;
}

uint64_t sub_216311720(uint64_t a1, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) != 0 || a2 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)) {
    goto LABEL_7;
  }
  LODWORD(v3) = *(unsigned __int16 *)(*(void *)(a1 + 48) + 2 * a2);
  if (*(_DWORD *)(a1 + 40) == 1 && (unsigned __int16)(v3 - 10123) <= 7u)
  {
    uint64_t v3 = (v3 - 10123);
    if (dword_216395EA8[v3] > a3)
    {
      LOWORD(v3) = aAdgjmptwn7seaw[v3] + (_WORD)a3;
      return (unsigned __int16)v3;
    }
LABEL_7:
    LOWORD(v3) = -1;
    return (unsigned __int16)v3;
  }
  if (a3 >= 1) {
    LOWORD(v3) = -1;
  }
  return (unsigned __int16)v3;
}

void *sub_2163117A4(uint64_t a1, unsigned int a2, unsigned int *a3, void *a4, uint64_t a5, int a6)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  unint64_t v8 = a2;
  uint64_t v9 = *(void *)(a1 + 8);
  if (a2 >= (unint64_t)((*(void *)(a1 + 16) - v9) >> 3)) {
    return 0;
  }
  uint64_t v13 = *(void *)(v9 + 8 * a2);
  uint64_t v14 = &v75;
  sub_216311E40(&v75, a1, v13, 1, 0);
  sub_216311E40(v74, a1, v13, 0, 0);
  size_t v15 = v76;
  uint64_t v68 = v75;
  if (v75 == v76) {
    uint64_t v14 = v74;
  }
  BOOL v16 = v74[1];
  if (v75 != v76) {
    BOOL v16 = v76;
  }
  unint64_t v17 = *v14;
  uint64_t v18 = v16 - (unsigned char *)*v14;
  unint64_t v69 = v18 >> 3;
  uint64_t v65 = v13;
  int v66 = a6;
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    sub_216311E40(&__p, a1, v13, 1, 1);
    sub_216311E40(&v70, a1, v13, 0, 1);
    unint64_t v62 = __p;
    uint64_t v24 = v69 + ((v73 - (unsigned char *)__p) >> 3);
    uint64_t v61 = v70;
    if (a6) {
      p_p = 0;
    }
    else {
      p_p = (void **)&v70;
    }
    if (v24) {
      int v26 = 1;
    }
    else {
      int v26 = a6;
    }
    if (v24) {
      p_p = &__p;
    }
    if (!v26) {
      uint64_t v24 = (v71 - v70) >> 3;
    }
    unsigned __int16 v63 = p_p;
    unint64_t v64 = v24;
    if (v26) {
      uint64_t v27 = (v73 - (unsigned char *)__p) >> 3;
    }
    else {
      uint64_t v27 = (v71 - v70) >> 3;
    }
    if (a4)
    {
      uint64_t v28 = v27;
      if ((*(unsigned int (**)(void *))(*a4 + 64))(a4) == 4)
      {
        unint64_t v29 = *a3;
        if ((v29 & 0x80000000) == 0 && v64 > v29)
        {
          unint64_t v23 = (void *)a4[16];
          if (v23)
          {
            int v30 = v64;
            *a3 = v64;
LABEL_99:
            unint64_t v57 = v62;
            if (v61)
            {
              uint64_t v71 = v61;
              operator delete(v61);
              unint64_t v57 = __p;
            }
            uint64_t v22 = v68;
            if (v57)
            {
              int v73 = v57;
              operator delete(v57);
            }
            int v21 = v30;
            goto LABEL_109;
          }
        }
      }
      int v31 = *(_DWORD *)(v13 + 168);
      uint64_t v32 = *(void *)(a1 + 8);
      unint64_t v33 = (*(void *)(a1 + 16) - v32) >> 3;
      if (v33 <= v8)
      {
        BOOL v36 = 0;
        uint64_t v27 = v28;
        if (!a5) {
          goto LABEL_56;
        }
      }
      else
      {
        unint64_t v34 = a2 + 1;
        uint64_t v27 = v28;
        if (v33 <= v34 || (int v35 = *(_DWORD *)(*(void *)(v32 + 8 * v8) + 168), (v35 - 1) > 1))
        {
          BOOL v36 = 0;
          if (!a5) {
            goto LABEL_56;
          }
        }
        else
        {
          BOOL v36 = v35 == *(_DWORD *)(*(void *)(v32 + 8 * v34) + 168);
          if (!a5) {
            goto LABEL_56;
          }
        }
      }
    }
    else
    {
      BOOL v36 = 0;
      int v31 = *(_DWORD *)(v13 + 168);
      if (!a5) {
        goto LABEL_56;
      }
    }
    uint64_t v38 = *(void *)(a1 + 8);
    unint64_t v39 = (*(void *)(a1 + 16) - v38) >> 3;
    if (v39 > v8)
    {
      unint64_t v40 = a2 + 2;
      if (v39 > v40)
      {
        int v41 = *(_DWORD *)(*(void *)(v38 + 8 * v8) + 168);
        if ((v41 - 1) <= 1)
        {
          BOOL v42 = v41 == *(_DWORD *)(*(void *)(v38 + 8 * v40) + 168);
LABEL_57:
          unsigned int v43 = v31 - 3;
          unsigned int v44 = *a3;
          if ((*a3 & 0x80000000) != 0)
          {
LABEL_84:
            unint64_t v23 = 0;
LABEL_85:
            if (v63 && v43 <= 0xFFFFFFFD)
            {
              int v30 = v64;
              if (!v23)
              {
                unint64_t v52 = (int)*a3;
                if (v64 <= v52) {
                  unint64_t v53 = (int)*a3;
                }
                else {
                  unint64_t v53 = v64;
                }
                if (v64 <= v52)
                {
LABEL_97:
                  unint64_t v23 = 0;
                }
                else
                {
                  unint64_t v54 = v53 - v52;
                  unsigned int v55 = v52 + 1;
                  uint64_t v56 = (uint64_t)*v63 + 8 * v52 + -8 * v69;
                  while (1)
                  {
                    unint64_t v23 = *(void **)v56;
                    if (*(unsigned char *)(*(void *)v56 + 136))
                    {
                      if (!a4 || !v23[15]) {
                        break;
                      }
                    }
                    *a3 = v55++;
                    v56 += 8;
                    if (!--v54) {
                      goto LABEL_97;
                    }
                  }
                }
              }
            }
            else
            {
              int v30 = v64;
            }
            goto LABEL_99;
          }
          char v45 = !v36;
          if (a4) {
            BOOL v46 = v27 == 0;
          }
          else {
            BOOL v46 = 1;
          }
          int v48 = !v46 && v68 == v15;
          while (1)
          {
            if (v69 <= v44) {
              goto LABEL_84;
            }
            unint64_t v23 = (void *)*((void *)*v14 + v44);
            if (v43 < 0xFFFFFFFE || v23 == 0) {
              char v50 = 1;
            }
            else {
              char v50 = v45;
            }
            if ((v50 & 1) == 0)
            {
              if (v42)
              {
                if (!sub_21631EC0C(v23 + 9, *(unsigned __int16 *)(*(void *)(a5 + 8) + 2) + 542 * *(unsigned __int16 *)(a4[1] + 2)))goto LABEL_82; {
              }
                }
              else if (!sub_21631ECBC(v23 + 4, (unint64_t)a4))
              {
                goto LABEL_82;
              }
            }
            if (!v48 || !sub_216311D90(a1, (uint64_t)v23, (uint64_t)a4)) {
              goto LABEL_85;
            }
            unsigned int v44 = *a3;
LABEL_82:
            *a3 = v44 + 1;
            if ((int)v44++ <= -2) {
              goto LABEL_84;
            }
          }
        }
      }
    }
LABEL_56:
    BOOL v42 = 0;
    goto LABEL_57;
  }
  unint64_t v19 = *a3;
  if ((v19 & 0x80000000) != 0 || v69 <= v19)
  {
    uint64_t v22 = v75;
    if (v75 != v76
      && (*(unsigned char *)(a1 + 536) && ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1 == v8
       || *(unsigned char *)(v13 + 164)))
    {
      uint64_t v37 = *(void *)(v13 + 32);
      if (v69 + ((*(void *)(v13 + 40) - v37) >> 4) <= (int)v19)
      {
        unint64_t v23 = 0;
      }
      else if (*(unsigned char *)(*(void *)(*(void *)(v37 + 16 * ((int)v19 - v69)) + 8) + 8))
      {
        unint64_t v23 = *(void **)(v37 + 16 * ((int)v19 - v69));
      }
      else
      {
        unint64_t v23 = 0;
      }
      int v21 = v69 + ((*(void *)(v13 + 40) - v37) >> 4);
    }
    else
    {
      unint64_t v23 = 0;
      int v21 = v18 >> 3;
    }
    goto LABEL_109;
  }
  if (a4)
  {
    int v20 = (*(uint64_t (**)(void *))(*a4 + 72))(a4);
    int v21 = v18 >> 3;
    uint64_t v22 = v68;
    if (v20 == 7)
    {
      unint64_t v23 = 0;
      *a3 = (unint64_t)v18 >> 3;
      int v66 = 1;
      goto LABEL_109;
    }
    LODWORD(v19) = *a3;
    unint64_t v17 = *v14;
  }
  else
  {
    uint64_t v22 = v75;
    int v21 = v18 >> 3;
  }
  unint64_t v23 = (void *)v17[(int)v19];
LABEL_109:
  if (v66 && !v23)
  {
    unint64_t v58 = *a3 - v21;
    if ((int)(*a3 - v21) < 0 || (uint64_t v59 = *(void *)(v65 + 104), v58 >= (*(void *)(v65 + 112) - v59) >> 4)) {
      unint64_t v23 = 0;
    }
    else {
      unint64_t v23 = *(void **)(v59 + 16 * v58);
    }
  }
  if (v74[0]) {
    operator delete(v74[0]);
  }
  if (v22) {
    operator delete(v22);
  }
  return v23;
}

void sub_216311D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_216311D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  if (result)
  {
    int v6 = result;
    uint64_t v7 = *(void *)(a1 + 32);
    unint64_t v8 = *(unsigned __int16 **)(a2 + 8);
    size_t v9 = strlen(result);
    if (v8) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      size_t v11 = v9;
      size_t v12 = 0;
      do
      {
        unint64_t v8 = sub_21632279C(v7, v8, v6[v12++]);
        if (v8) {
          BOOL v13 = v12 >= v11;
        }
        else {
          BOOL v13 = 1;
        }
      }
      while (!v13);
    }
    return (const char *)(v8 != 0);
  }
  return result;
}

void sub_216311E40(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  size_t v9 = 0;
  uint64_t v10 = a3 + 80;
  if (a5) {
    uint64_t v11 = 80;
  }
  else {
    uint64_t v11 = 32;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!a5) {
    uint64_t v10 = a3 + 32;
  }
  uint64_t v48 = v10;
  uint64_t v49 = v11;
  if (a4)
  {
    uint64_t v12 = a3 + 56;
    uint64_t v13 = 8;
    if (a5) {
      uint64_t v13 = 56;
    }
    else {
      uint64_t v12 = a3 + 8;
    }
    uint64_t v14 = *(uint64_t **)(a3 + v13);
    size_t v15 = *(uint64_t **)(v12 + 8);
    if (v14 == v15)
    {
      size_t v9 = 0;
    }
    else
    {
      BOOL v16 = 0;
      do
      {
        uint64_t v17 = *v14;
        unint64_t v18 = a1[2];
        if ((unint64_t)v16 >= v18)
        {
          unint64_t v19 = (void *)*a1;
          uint64_t v20 = ((uint64_t)v16 - *a1) >> 3;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v22 = v18 - (void)v19;
          if (v22 >> 2 > v21) {
            unint64_t v21 = v22 >> 2;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23) {
            unint64_t v23 = (unint64_t)sub_216188754(v23);
          }
          else {
            uint64_t v24 = 0;
          }
          int v25 = (void *)(v23 + 8 * v20);
          *int v25 = v17;
          size_t v9 = v25 + 1;
          if (v16 != v19)
          {
            do
            {
              uint64_t v26 = *--v16;
              *--int v25 = v26;
            }
            while (v16 != v19);
            BOOL v16 = (void *)*a1;
          }
          *a1 = v25;
          a1[1] = v9;
          a1[2] = v23 + 8 * v24;
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          void *v16 = v17;
          size_t v9 = v16 + 1;
        }
        a1[1] = v9;
        v14 += 2;
        BOOL v16 = v9;
      }
      while (v14 != v15);
    }
  }
  uint64_t v27 = sub_2163100C0();
  uint64_t v28 = *(uint64_t **)(a3 + v49);
  unint64_t v29 = *(uint64_t **)(v48 + 8);
  if (v28 != v29)
  {
    int v30 = v27;
    while (*(_DWORD *)(a2 + 40) != 4)
    {
      if ((a4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_64:
      v28 += 2;
      if (v28 == v29) {
        return;
      }
    }
    if (((sub_21618FCC0(v30, (unsigned __int16 *)(*(void *)(*v28 + 8) + 2)) != 0) ^ a4))
    {
      if (*(_DWORD *)(a2 + 40) != 4) {
        goto LABEL_64;
      }
      uint64_t v31 = *v28;
      if ((*(unsigned char *)(*(void *)(*v28 + 8) + 8) & 1) == 0) {
        goto LABEL_64;
      }
      unint64_t v32 = a1[2];
      if ((unint64_t)v9 >= v32)
      {
        unint64_t v33 = (void *)*a1;
        uint64_t v34 = ((uint64_t)v9 - *a1) >> 3;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v36 = v32 - (void)v33;
        if (v36 >> 2 > v35) {
          unint64_t v35 = v36 >> 2;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37) {
          unint64_t v37 = (unint64_t)sub_216188754(v37);
        }
        else {
          uint64_t v38 = 0;
        }
        char v45 = (void *)(v37 + 8 * v34);
        *char v45 = v31;
        unint64_t v40 = v45 + 1;
        if (v9 == v33) {
          goto LABEL_61;
        }
        do
        {
          uint64_t v47 = *--v9;
          *--char v45 = v47;
        }
        while (v9 != v33);
LABEL_60:
        size_t v9 = (void *)*a1;
LABEL_61:
        *a1 = v45;
        a1[1] = v40;
        a1[2] = v37 + 8 * v38;
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_63;
      }
    }
    else
    {
LABEL_47:
      uint64_t v31 = *v28;
      unint64_t v39 = a1[2];
      if ((unint64_t)v9 >= v39)
      {
        int v41 = (void *)*a1;
        uint64_t v42 = ((uint64_t)v9 - *a1) >> 3;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v44 = v39 - (void)v41;
        if (v44 >> 2 > v43) {
          unint64_t v43 = v44 >> 2;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v43;
        }
        if (v37) {
          unint64_t v37 = (unint64_t)sub_216188754(v37);
        }
        else {
          uint64_t v38 = 0;
        }
        char v45 = (void *)(v37 + 8 * v42);
        *char v45 = v31;
        unint64_t v40 = v45 + 1;
        if (v9 == v41) {
          goto LABEL_61;
        }
        do
        {
          uint64_t v46 = *--v9;
          *--char v45 = v46;
        }
        while (v9 != v41);
        goto LABEL_60;
      }
    }
    *size_t v9 = v31;
    unint64_t v40 = v9 + 1;
LABEL_63:
    a1[1] = v40;
    size_t v9 = v40;
    goto LABEL_64;
  }
}

void sub_216312174(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2163121AC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t result = 0;
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v6 = a1 + 8;
    uint64_t v5 = *(void *)(a1 + 8);
    if ((*(void *)(v6 + 8) - v5) >> 3 > (unint64_t)a2)
    {
      uint64_t v7 = *(void *)(*(void *)(v5 + 8 * a2) + 104);
      if (a3 < (unint64_t)((*(void *)(*(void *)(v5 + 8 * a2) + 112) - v7) >> 4)) {
        return *(void *)(v7 + 16 * a3);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_216312200@<X0>(uint64_t result@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = a2[1] - *a2;
  uint64_t v8 = *(void *)(result + 16) - *(void *)(result + 8);
  uint64_t v9 = v7 >> 1;
  if (v7 >> 1 >= a3) {
    unint64_t v10 = a3;
  }
  else {
    unint64_t v10 = v7 >> 1;
  }
  BOOL v11 = v8 < 1 || v7 < 1;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (!v11)
  {
    uint64_t v12 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v13 = ((unint64_t)v8 >> 3) - 1;
    unint64_t v24 = v10;
    while (1)
    {
      unint64_t v14 = v6 - v5;
      if (v14 >= v10) {
        break;
      }
      uint64_t result = sub_21621ED78(*(void **)(*(void *)(v12 + 8) + 8 * v13), *(unsigned __int16 *)(*a2 + 2 * (v9 - 1)), 1);
      if (!result) {
        break;
      }
      uint64_t v15 = result;
      unint64_t v16 = (unint64_t)a4[2];
      if ((unint64_t)v6 >= v16)
      {
        unint64_t v17 = v14 + 1;
        if ((v14 + 1) >> 61) {
          sub_21610CB04();
        }
        uint64_t v18 = v16 - (void)v5;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19) {
          unint64_t v19 = (unint64_t)sub_216188754(v19);
        }
        else {
          uint64_t v20 = 0;
        }
        unint64_t v21 = (uint64_t *)(v19 + 8 * v14);
        *unint64_t v21 = v15;
        uint64_t v22 = v21 + 1;
        if (v6 != v5)
        {
          do
          {
            uint64_t v23 = *--v6;
            *--unint64_t v21 = v23;
          }
          while (v6 != v5);
          uint64_t v5 = *a4;
        }
        *a4 = v21;
        a4[1] = v22;
        a4[2] = (uint64_t *)(v19 + 8 * v20);
        if (v5) {
          operator delete(v5);
        }
        uint64_t v5 = v21;
        uint64_t v6 = v22;
        unint64_t v10 = v24;
      }
      else
      {
        *v6++ = result;
        uint64_t v5 = *a4;
      }
      a4[1] = v6;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
      v13 -= result;
      if (v13 >= 0)
      {
        BOOL v11 = v9-- <= 1;
        if (!v11) {
          continue;
        }
      }
      uint64_t v5 = *a4;
      break;
    }
  }
  if (v10 != v6 - v5) {
    a4[1] = v5;
  }
  return result;
}

void sub_2163123D0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_2163123F8(uint64_t a1, uint64_t *a2, char **a3)
{
  uint64_t v3 = *a3;
  a3[1] = *a3;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v7 = v5 - v4;
    uint64_t v8 = (v5 - v4) >> 3;
    if (v7 < 1)
    {
      unint64_t v32 = v3;
    }
    else
    {
      uint64_t v10 = v8 - 1;
      uint64_t v11 = *(void *)(v4 + 8 * (v8 - 1));
      unint64_t v12 = v11 - 1;
      if (v11 - 1 >= 0)
      {
        unint64_t v14 = (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
        if (v12 < v14)
        {
          uint64_t v33 = (uint64_t)(a3 + 2);
          uint64_t v15 = v10;
          do
          {
            if (v15 != v10) {
              v11 -= *(void *)(v4 + 8 * v15 + 8);
            }
            uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 8 * v12);
            uint64_t v18 = *(void *)(v16 + 8);
            uint64_t v17 = *(void *)(v16 + 16);
            if (v18 == v17) {
              break;
            }
            while (v11 != (*(unsigned int (**)(void))(**(void **)v18 + 40))())
            {
              v18 += 16;
              if (v18 == v17)
              {
                uint64_t v3 = a3[1];
                goto LABEL_34;
              }
            }
            __int16 v19 = *(_WORD *)(*(void *)(*(void *)v18 + 8) + 2);
            unint64_t v21 = a3[1];
            unint64_t v20 = (unint64_t)a3[2];
            if ((unint64_t)v21 >= v20)
            {
              uint64_t v22 = *a3;
              uint64_t v23 = v21 - *a3;
              if (v23 <= -3) {
                sub_21610CB04();
              }
              uint64_t v24 = v23 >> 1;
              unint64_t v25 = v20 - (void)v22;
              uint64_t v26 = v25 <= (v23 >> 1) + 1 ? v24 + 1 : v25;
              uint64_t v27 = v25 >= 0x7FFFFFFFFFFFFFFELL ? 0x7FFFFFFFFFFFFFFFLL : v26;
              if (v27)
              {
                uint64_t v28 = (char *)sub_21610FD44(v33, v27);
                uint64_t v22 = *a3;
                unint64_t v21 = a3[1];
              }
              else
              {
                uint64_t v28 = 0;
              }
              unint64_t v29 = &v28[2 * v24];
              *(_WORD *)unint64_t v29 = v19;
              uint64_t v3 = v29 + 2;
              while (v21 != v22)
              {
                __int16 v30 = *((_WORD *)v21 - 1);
                v21 -= 2;
                *((_WORD *)v29 - 1) = v30;
                v29 -= 2;
              }
              *a3 = v29;
              a3[1] = v3;
              a3[2] = &v28[2 * v27];
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              *(_WORD *)unint64_t v21 = v19;
              uint64_t v3 = v21 + 2;
            }
            a3[1] = v3;
            if (v15-- < 1) {
              break;
            }
            uint64_t v4 = *a2;
            uint64_t v11 = *(void *)(*a2 + 8 * v15);
            unint64_t v12 = v11 - 1;
            if (v11 - 1 < 0) {
              break;
            }
          }
          while (v12 < v14);
        }
      }
LABEL_34:
      unint64_t v32 = v3;
      uint64_t v3 = *a3;
      uint64_t v8 = (a2[1] - *a2) >> 3;
    }
    if (v8 != (v32 - v3) >> 1) {
      a3[1] = v3;
    }
  }
}

uint64_t sub_21631260C(uint64_t a1, CFArrayRef theArray)
{
  *(void *)(a1 + 448) = *(void *)(a1 + 440);
  if (!theArray) {
    return 1;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFDataRef Mutable = *(const __CFData **)(a1 + 464);
  if (!Mutable)
  {
    CFDataRef Mutable = CFDataCreateMutable(0, 0);
    *(void *)(a1 + 464) = Mutable;
  }
  v63.CFIndex length = CFDataGetLength(Mutable);
  v63.location = 0;
  CFDataDeleteBytes(Mutable, v63);
  __p = 0;
  uint64_t v60 = 0;
  unint64_t v62 = 0;
  if (Count >= 1)
  {
    CFIndex v6 = 0;
    CFIndex v7 = 0;
    do
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v6);
      uint64_t v9 = (char *)malloc_type_malloc(0x400uLL, 0x98D6189EuLL);
      CFStringRef v10 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      CFStringRef v11 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 1);
      CFIndex Length = CFStringGetLength(v11);
      CFIndex v13 = CFStringGetLength(v10);
      BOOL v14 = Length <= v13;
      if (Length <= v13) {
        CFStringRef v15 = v10;
      }
      else {
        CFStringRef v15 = v11;
      }
      if (v14) {
        CFStringRef v10 = v11;
      }
      CFStringGetCString(v15, v9, 1024, 0x8000100u);
      size_t v16 = strlen(v9);
      uint64_t v17 = v60;
      if (v60 >= v62)
      {
        __int16 v19 = __p;
        uint64_t v20 = (v60 - __p) >> 3;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          goto LABEL_70;
        }
        uint64_t v22 = v62 - __p;
        if ((v62 - __p) >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          uint64_t v24 = (char *)sub_2160FFAA8((uint64_t)&v62, v23);
          __int16 v19 = __p;
          uint64_t v17 = v60;
        }
        else
        {
          uint64_t v24 = 0;
        }
        unint64_t v25 = &v24[8 * v20];
        *(void *)unint64_t v25 = v7;
        uint64_t v18 = v25 + 8;
        while (v17 != v19)
        {
          uint64_t v26 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v25 - 1) = v26;
          v25 -= 8;
        }
        __p = v25;
        unint64_t v62 = &v24[8 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)uint64_t v60 = v7;
        uint64_t v18 = v60 + 8;
      }
      uint64_t v61 = v18;
      CFIndex v27 = v16 + 1;
      CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 464), (const UInt8 *)v9, v27);
      CFStringGetCString(v10, v9, 1024, 0x8000100u);
      CFIndex v28 = v27 + v7;
      size_t v29 = strlen(v9);
      __int16 v30 = v18;
      if (v18 >= v62)
      {
        unint64_t v32 = __p;
        uint64_t v33 = (v18 - __p) >> 3;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61) {
LABEL_70:
        }
          sub_21610CB04();
        uint64_t v35 = v62 - __p;
        if ((v62 - __p) >> 2 > v34) {
          unint64_t v34 = v35 >> 2;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          unint64_t v37 = (char *)sub_2160FFAA8((uint64_t)&v62, v36);
          unint64_t v32 = __p;
          __int16 v30 = v61;
        }
        else
        {
          unint64_t v37 = 0;
        }
        uint64_t v38 = &v37[8 * v33];
        *(void *)uint64_t v38 = v28;
        uint64_t v31 = v38 + 8;
        while (v30 != v32)
        {
          uint64_t v39 = *((void *)v30 - 1);
          v30 -= 8;
          *((void *)v38 - 1) = v39;
          v38 -= 8;
        }
        __p = v38;
        unint64_t v62 = &v37[8 * v36];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        *(void *)uint64_t v18 = v28;
        uint64_t v31 = v18 + 8;
      }
      uint64_t v60 = v31;
      CFIndex v40 = v29 + 1;
      CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 464), (const UInt8 *)v9, v40);
      CFIndex v7 = v40 + v28;
      free(v9);
      ++v6;
    }
    while (v6 != Count);
  }
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 464));
  unint64_t v43 = *(char **)(a1 + 440);
  uint64_t v42 = *(char **)(a1 + 448);
  unint64_t v44 = (v42 - v43) >> 4;
  if (Count > v44)
  {
    unint64_t v45 = Count - v44;
    uint64_t v46 = *(void *)(a1 + 456);
    if (Count - v44 > (v46 - (uint64_t)v42) >> 4)
    {
      if ((unint64_t)Count >> 60) {
        sub_21610CB04();
      }
      uint64_t v47 = v46 - (void)v43;
      uint64_t v48 = v47 >> 3;
      if (v47 >> 3 <= (unint64_t)Count) {
        uint64_t v48 = Count;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49 >> 60) {
        sub_2160FFA74();
      }
      char v50 = (char *)operator new(16 * v49);
      uint64_t v51 = &v50[16 * v44];
      unint64_t v52 = &v50[16 * v49];
      bzero(v51, 16 * v45);
      unint64_t v53 = &v51[16 * v45];
      if (v42 != v43)
      {
        do
        {
          *((_OWORD *)v51 - 1) = *((_OWORD *)v42 - 1);
          v51 -= 16;
          v42 -= 16;
        }
        while (v42 != v43);
        uint64_t v42 = v43;
      }
      *(void *)(a1 + 44sub_21617DB94((const void **)&__p, 0) = v51;
      *(void *)(a1 + 448) = v53;
      *(void *)(a1 + 456) = v52;
      if (v42) {
        operator delete(v42);
      }
      goto LABEL_63;
    }
    bzero(*(void **)(a1 + 448), 16 * v45);
    unint64_t v54 = &v42[16 * v45];
    goto LABEL_62;
  }
  if (Count < v44)
  {
    unint64_t v54 = &v43[16 * Count];
LABEL_62:
    *(void *)(a1 + 448) = v54;
  }
LABEL_63:
  if (Count >= 1)
  {
    unsigned int v55 = (void *)(*(void *)(a1 + 440) + 8);
    uint64_t v56 = (uint64_t *)(__p + 8);
    do
    {
      *(v55 - 1) = &BytePtr[*(v56 - 1)];
      uint64_t v57 = *v56;
      v56 += 2;
      *unsigned int v55 = &BytePtr[v57];
      v55 += 2;
      --Count;
    }
    while (Count);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_21631EA10(a1 + 400);
  return 1;
}

void sub_216312A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216312A80(unsigned int a1, unsigned int a2, char *a3)
{
  if (a1 > 5) {
    return 0;
  }
  if (((1 << a1) & 0x25) != 0) {
    goto LABEL_3;
  }
  if (((1 << a1) & 0x18) != 0)
  {
    char v3 = 49;
    switch(a2)
    {
      case 0x2C7u:
        char v3 = 51;
        break;
      case 0x2C8u:
        goto LABEL_17;
      case 0x2C9u:
        goto LABEL_4;
      case 0x2CAu:
        char v3 = 50;
        break;
      case 0x2CBu:
        char v3 = 52;
        break;
      default:
        if (a2 == 729) {
          char v3 = 53;
        }
        else {
LABEL_17:
        }
          char v3 = a2 + 49;
        break;
    }
    goto LABEL_4;
  }
  if (a2 - 97 <= 0x19)
  {
LABEL_3:
    char v3 = a2;
LABEL_4:
    *a3 = v3;
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2 - 10123;
  uint64_t result = dword_216395EA8[v6];
  char v7 = aAdgjmptwn7seaw[v6];
  if ((int)result <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = result;
  }
  do
  {
    a3[v5] = v7 + v5;
    ++v5;
  }
  while (v8 != v5);
  return result;
}

uint64_t sub_216312B80(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    uint64_t result = 1;
    if (a2 != 39 && a2 - 97 >= 0x1B)
    {
      unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 488) + 8);
      BOOL v7 = v6 > 7;
      int v8 = (1 << v6) & 0x8C;
      if (!v7 && v8 != 0) {
        return a2 == 59;
      }
      return 0;
    }
  }
  else
  {
    if (a2 != 39 || (v4 - 3) < 2) {
      return sub_216312C3C(v4, a2);
    }
    if ((a3 & 0x80000000) != 0) {
      return 0;
    }
    CFStringRef v10 = *(void **)(*(void *)(a1 + 8) + 8 * a3);
    if (!v10) {
      return 0;
    }
    return v10[2] != v10[1] || v10[5] != v10[4] || v10[8] != v10[7];
  }
  return result;
}

uint64_t sub_216312C3C(int a1, int a2)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 0:
    case 5:
      BOOL v4 = (a2 - 97) >= 0x1A;
      return !v4;
    case 1:
      BOOL v4 = (a2 - 97) >= 0x1A && (a2 - 10123) >= 8;
      return !v4;
    case 3:
    case 4:
      if ((a2 - 12549) < 0x25) {
        return result;
      }
      uint64_t v5 = 0;
      break;
    default:
      return result;
  }
  while ((unsigned __int16)word_216381F32[v5] != a2)
  {
    if (++v5 == 5)
    {
      unsigned int v6 = 0;
      goto LABEL_15;
    }
  }
  unsigned int v6 = &word_216381F32[v5];
LABEL_15:
  if (v6) {
    BOOL v7 = (char *)v6 - (char *)word_216381F32 == -2;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7;
}

void sub_216312D04(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  uint64_t v6 = *(void *)(a1 + 864);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 824);
  if (v7)
  {
    sub_216129D20((uint64_t *)(v7 + 144));
    *(_DWORD *)(v7 + 192) = 0;
    sub_21618C36C((uint64_t *)v7);
  }
  uint64_t v8 = *(void *)(a1 + 832);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  uint64_t v9 = *(char **)(a1 + 48);
  CFStringRef v10 = *(char **)(a1 + 56);
  uint64_t v11 = v10 - v9;
  int v12 = ((unint64_t)(v10 - v9) >> 1) - 1;
  if (v12 < 0) {
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 8 * v12);
  if (!v13 || (*(_DWORD *)(v13 + 168) - 1) > 1) {
    goto LABEL_15;
  }
  uint64_t v14 = 0;
  while ((unsigned __int16)word_216381F32[v14] != v5)
  {
    if (++v14 == 5) {
      goto LABEL_15;
    }
  }
  if (v14 == -1)
  {
LABEL_15:
    unint64_t v15 = *(void *)(a1 + 64);
    *(_OWORD *)(a1 + 784) = xmmword_216371B70;
    if ((unint64_t)v10 >= v15)
    {
      if (v11 <= -3) {
        sub_21610CB04();
      }
      uint64_t v17 = v11 >> 1;
      unint64_t v18 = v15 - (void)v9;
      if (v18 <= (v11 >> 1) + 1) {
        unint64_t v19 = v17 + 1;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v18 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v20 = v19;
      }
      if (v20)
      {
        unint64_t v21 = (char *)sub_21610FD44(a1 + 64, v20);
        uint64_t v9 = *(char **)(a1 + 48);
        CFStringRef v10 = *(char **)(a1 + 56);
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v22 = &v21[2 * v17];
      unint64_t v23 = &v21[2 * v20];
      *(_WORD *)uint64_t v22 = v5;
      size_t v16 = v22 + 2;
      while (v10 != v9)
      {
        __int16 v24 = *((_WORD *)v10 - 1);
        v10 -= 2;
        *((_WORD *)v22 - 1) = v24;
        v22 -= 2;
      }
      *(void *)(a1 + 48) = v22;
      *(void *)(a1 + 56) = v16;
      *(void *)(a1 + 64) = v23;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(_WORD *)CFStringRef v10 = v5;
      size_t v16 = v10 + 2;
    }
    *(void *)(a1 + 56) = v16;
    *(_DWORD *)(a1 + 552) = a3;
    *(void *)(a1 + 496) = (int)(v11 >> 1);
    uint64_t v59 = (void *)(a1 + 80);
    LODWORD(v6sub_21617DB94((const void **)&__p, 0) = 0;
    sub_21631EA68((uint64_t)&v59);
    operator new();
  }
  unint64_t v25 = *(long long **)(v13 + 32);
  uint64_t v26 = *(long long **)(v13 + 40);
  if (v25 != v26)
  {
    int v27 = v5 - 711;
    int v58 = ((unint64_t)(v10 - v9) >> 1) - 1;
    do
    {
      if ((long long *)((char *)v26 - *(void *)(v13 + 32)) == (long long *)16) {
        break;
      }
      CFIndex v28 = *(void **)v25;
      uint64_t v29 = *(void *)(*(void *)v25 + 8);
      char v30 = 49;
      switch(v27)
      {
        case 0:
          char v30 = 51;
          break;
        case 1:
          goto LABEL_40;
        case 2:
          break;
        case 3:
          char v30 = 50;
          break;
        case 4:
          char v30 = 52;
          break;
        default:
          if (v5 == 729) {
            char v30 = 53;
          }
          else {
LABEL_40:
          }
            char v30 = v5 + 49;
          break;
      }
      uint64_t v31 = sub_21632279C(*(void *)(a1 + 32), *(unsigned __int16 **)(*(void *)v25 + 8), v30);
      int v32 = *(unsigned __int16 *)(v29 + 2);
      if (v31)
      {
        uint64_t v33 = *(void **)(a1 + 760);
        unint64_t v34 = *(void **)(a1 + 768);
        if (v33 != v34)
        {
          unsigned __int16 v35 = v31[1];
          do
          {
            uint64_t v36 = v33[1];
            if (*v33 != v36 && *(unsigned __int16 *)(v36 - 2) == v32) {
              *(_WORD *)(v36 - 2) = v35;
            }
            v33 += 3;
          }
          while (v33 != v34);
        }
        v28[1] = v31;
        ++v25;
      }
      else
      {
        unint64_t v37 = *(void **)(a1 + 760);
        uint64_t v38 = *(void **)(a1 + 768);
        while (v37 != v38 && (void *)((char *)v38 - *(void *)(a1 + 760)) != (void *)24)
        {
          uint64_t v39 = v37[1];
          if (*v37 == v39 || *(unsigned __int16 *)(v39 - 2) != v32)
          {
            v37 += 3;
          }
          else
          {
            if (v37 + 3 == v38)
            {
              int v41 = v37;
            }
            else
            {
              uint64_t v40 = (uint64_t)v37;
              do
              {
                int v41 = (void *)(v40 + 24);
                sub_2161254AC(v40, (__n128 *)(v40 + 24));
                uint64_t v42 = v40 + 48;
                v40 += 24;
              }
              while ((void *)v42 != v38);
              uint64_t v38 = *(void **)(a1 + 768);
            }
            if (v38 != v41)
            {
              unint64_t v43 = v38;
              do
              {
                unint64_t v45 = (void *)*(v43 - 3);
                v43 -= 3;
                unint64_t v44 = v45;
                if (v45)
                {
                  *(v38 - 2) = v44;
                  operator delete(v44);
                }
                uint64_t v38 = v43;
              }
              while (v43 != v41);
            }
            *(void *)(a1 + 768) = v41;
            uint64_t v38 = v41;
          }
        }
        int v46 = v58 - (*(uint64_t (**)(void *))(*v28 + 40))(v28);
        uint64_t v47 = *(void **)(*(void *)(a1 + 8) + 8 * v46);
        uint64_t v48 = (uint64_t *)v47[1];
        unint64_t v49 = (uint64_t *)v47[2];
        if (v48 != v49)
        {
          uint64_t v50 = v46;
          do
          {
            uint64_t v51 = *v48;
            v48 += 2;
            sub_21631FF8C((void *)(v51 + 32), (unint64_t)v28);
          }
          while (v48 != v49);
          uint64_t v47 = *(void **)(*(void *)(a1 + 8) + 8 * v50);
        }
        unint64_t v52 = (uint64_t *)v47[4];
        unint64_t v53 = (uint64_t *)v47[5];
        while (v52 != v53)
        {
          uint64_t v54 = *v52;
          v52 += 2;
          sub_21631FF8C((void *)(v54 + 32), (unint64_t)v28);
        }
        sub_21621F18C((uint64_t)&v59, v25 + 1, *(long long **)(v13 + 40), (uint64_t)v25);
        uint64_t v26 = v55;
        uint64_t v56 = *(long long **)(v13 + 40);
        if (v56 != v55)
        {
          do
          {
            uint64_t v57 = (std::__shared_weak_count *)*((void *)v56 - 1);
            if (v57) {
              sub_2161121B0(v57);
            }
            --v56;
          }
          while (v56 != v26);
        }
        *(void *)(v13 + 4sub_21617DB94((const void **)&__p, 0) = v26;
        int v27 = v5 - 711;
      }
    }
    while (v25 != v26);
  }
  if (!*(void *)(a1 + 784)) {
    sub_2163149D4(a1, ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1);
  }
}

void sub_216313A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216313AD8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(result + 480) == 0xFFFFLL) {
    *(void *)(result + 48sub_21617DB94((const void **)&__p, 0) = a3;
  }
  if (*(void *)(a2 + 112) == *(void *)(a2 + 104))
  {
    char v3 = operator new(0x40uLL);
    v3[1] = 0;
    v3[2] = 0;
    *char v3 = &unk_26C6C97E0;
    v3[3] = &unk_26C6C64C8;
    operator new[]();
  }
  if (*(_DWORD *)(result + 40) == 2)
  {
    uint64_t v4 = *(void *)(result + 488);
    *(unsigned char *)(v4 + 32) = 0;
    *(void *)(v4 + 4sub_21617DB94((const void **)&__p, 0) = 0;
    *(unsigned char *)(v4 + 48) = 0;
  }
  return result;
}

void sub_216313C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216313C40(uint64_t a1, unsigned int a2, void *a3, unsigned int a4)
{
  unsigned int v4 = a4;
  int v7 = *(_DWORD *)(a1 + 40);
  if (a2 != 39)
  {
    int v32 = sub_216312A80(*(_DWORD *)(a1 + 40), a2, *(char **)(a1 + 72));
    __int16 v122 = a3;
    if (v7 == 2)
    {
      sub_21630FB34(*(void *)(a1 + 488), **(char **)(a1 + 72), (void **)&v124);
      uint64_t v33 = v124;
      unint64_t v34 = v125;
      if (v124 == v125)
      {
        uint64_t v49 = *(void *)(a1 + 488);
        if (*(unsigned char *)(v49 + 48))
        {
          int v50 = v7;
          unsigned int v51 = v4;
          sub_21630F92C((unsigned __int16 ****)v49, **(char **)(a1 + 72), (unsigned __int16 ***)__p);
          unint64_t v52 = (uint64_t *)__p[0];
          unint64_t v53 = (uint64_t *)__p[1];
          if (__p[0] == __p[1]) {
            goto LABEL_63;
          }
          do
            sub_21631738C(a1, (uint64_t)a3, *v52++, 0);
          while (v52 != v53);
          if (__p[0] == __p[1])
          {
LABEL_63:
            uint64_t v54 = operator new(0x40uLL);
            v54[1] = 0;
            v54[2] = 0;
            *uint64_t v54 = &unk_26C6C97E0;
            v54[3] = &unk_26C6C64C8;
            operator new[]();
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          char v40 = 1;
          unsigned int v4 = v51;
          int v7 = v50;
        }
        else
        {
          char v40 = 0;
        }
      }
      else
      {
        unsigned int v117 = v4;
        unsigned __int16 v35 = (unsigned int (*)(uint64_t))off_26C6C6480[0];
        do
        {
          uint64_t v36 = *v33;
          unint64_t v37 = (char *)operator new(0x90uLL);
          *((void *)v37 + 1) = 0;
          *((void *)v37 + 2) = 0;
          *(void *)unint64_t v37 = &unk_26C6C97A8;
          v37[40] = 0;
          *((_DWORD *)v37 + 11) = 0;
          v37[48] = 0;
          *((_DWORD *)v37 + 13) = 1065353216;
          *(_OWORD *)(v37 + 56) = 0u;
          *(_OWORD *)(v37 + 72) = 0u;
          *((_DWORD *)v37 + 22) = 1065353216;
          *((_OWORD *)v37 + 6) = 0u;
          *((_OWORD *)v37 + 7) = 0u;
          *((_DWORD *)v37 + 32) = 1065353216;
          *((void *)v37 + 3) = &unk_26C6C6420;
          *((void *)v37 + 4) = v36;
          if ((*(unsigned char *)(v36 + 8) & 2) != 0) {
            char v38 = 2;
          }
          else {
            char v38 = 1;
          }
          v37[136] = v38;
          __p[0] = v37 + 24;
          __p[1] = v37;
          if (v35((uint64_t)(v37 + 24))) {
            uint64_t v39 = a3 + 1;
          }
          else {
            uint64_t v39 = a3 + 4;
          }
          sub_21621E244(v39, (long long *)__p);
          if (__p[1]) {
            sub_2161121B0((std::__shared_weak_count *)__p[1]);
          }
          ++v33;
        }
        while (v33 != v34);
        *(void *)(a1 + 48sub_21617DB94((const void **)&__p, 0) = 0xFFFFLL;
        char v40 = 1;
        unsigned int v4 = v117;
      }
      if (v124)
      {
        __int16 v125 = v124;
        operator delete(v124);
      }
      if ((*(_DWORD *)(a1 + 40) - 3) < 2)
      {
        int v64 = 1;
        goto LABEL_170;
      }
LABEL_129:
      if (*(unsigned char *)(a1 + 472))
      {
        sub_216317710(a1, a3 + 1, (uint64_t)a3, 1);
        sub_216317710(a1, a3 + 4, (uint64_t)a3, 0);
        int v64 = 0;
        if (v7 == 2) {
          goto LABEL_171;
        }
        unint64_t v70 = a3[16];
        if (v70)
        {
          unsigned int v118 = v4;
          uint64_t v71 = a3[2] - a3[1];
          if (v71)
          {
            uint64_t v72 = 0;
            unint64_t v73 = v71 >> 4;
            if (v73 <= 1) {
              unint64_t v73 = 1;
            }
            unint64_t v121 = v73;
            do
            {
              uint64_t v74 = a3[1] + 16 * v72;
              if (v70 > (*(unsigned int (**)(void))(**(void **)v74 + 40))())
              {
                uint64_t v75 = *(unsigned __int16 *)(*(void *)(*(void *)v74 + 8) + 2);
                uint64_t v76 = &(&off_2642710F0)[2 * v75];
                unint64_t v77 = &(&off_26426EF10)[2 * v75];
                if (*(_DWORD *)(a1 + 40) == 5) {
                  uint64_t v78 = (const char **)v76;
                }
                else {
                  uint64_t v78 = (const char **)v77;
                }
                uint64_t v79 = *v78;
                if ((*(unsigned int (**)(void))(**(void **)v74 + 64))() == 2)
                {
                  uint64_t v80 = *(unsigned __int16 *)(*(void *)v74 + 112);
                  uint64_t v81 = &(&off_2642710F0)[2 * v80];
                  uint64_t v82 = (const char **)&(&off_26426EF10)[2 * v80];
                  if (*(_DWORD *)(*(void *)v74 + 20) == 2) {
                    uint64_t v82 = (const char **)v81;
                  }
                  CFStringRef v83 = *v82;
                }
                else
                {
                  CFStringRef v83 = 0;
                }
                unsigned int v84 = *v79 - 97;
                BOOL v48 = v84 > 0xE;
                int v85 = (1 << v84) & 0x4011;
                if (!v48 && v85 != 0)
                {
                  CFIndex v87 = *(void **)(*(void *)(a1 + 8)
                                   + 8 * (v70 - (*(unsigned int (**)(void))(**(void **)v74 + 40))()));
                  uint64_t v89 = (void *)v87[1];
                  uint64_t v88 = (void *)v87[2];
                  while (v89 != v88)
                  {
                    sub_21631A244(a1, (uint64_t)v122, v79, v83, v89);
                    v89 += 2;
                  }
                  uint64_t v91 = (void *)v87[4];
                  uint64_t v90 = (void *)v87[5];
                  while (v91 != v90)
                  {
                    sub_21631A244(a1, (uint64_t)v122, v79, v83, v91);
                    v91 += 2;
                  }
                }
              }
              ++v72;
            }
            while (v72 != v121);
          }
          int v92 = sub_216312A80(*(_DWORD *)(a1 + 40), *(unsigned __int16 *)(*(void *)(a1 + 48) + 2 * v70), *(char **)(a1 + 72));
          if (v92 < 1)
          {
            int v64 = 0;
            a3 = v122;
          }
          else
          {
            unint64_t v93 = v70 - 1;
            uint64_t v94 = v92;
            a3 = v122;
            do
            {
              uint64_t v95 = *(void *)(a1 + 72);
              int v96 = *(unsigned __int8 *)(v95 + (v94 - 1));
              if (v96 == 118 || v96 == 105)
              {
                uint64_t v97 = (v94 - 1);
                *(unsigned char *)(v95 + v94) = 0;
                uint64_t v98 = *(void **)(*(void *)(a1 + 8) + 8 * v93);
                unint64_t v99 = (void *)v98[1];
                uint64_t v100 = (void *)v98[2];
                while (v99 != v100)
                {
                  sub_21631A244(a1, (uint64_t)v122, (const char *)(*(void *)(a1 + 72) + v97), (const char *)(*(void *)(a1 + 72) + v97), v99);
                  v99 += 2;
                }
                unsigned __int8 v102 = (void *)v98[4];
                unint64_t v101 = (void *)v98[5];
                while (v102 != v101)
                {
                  sub_21631A244(a1, (uint64_t)v122, (const char *)(*(void *)(a1 + 72) + v97), (const char *)(*(void *)(a1 + 72) + v97), v102);
                  v102 += 2;
                }
              }
              BOOL v48 = v94-- <= 1;
            }
            while (!v48);
            int v64 = 0;
          }
          unsigned int v4 = v118;
        }
        else
        {
          int v64 = 0;
        }
        goto LABEL_191;
      }
      int v64 = 0;
LABEL_170:
      if (v7 == 2)
      {
LABEL_171:
        if ((v40 & 1) == 0) {
          goto LABEL_172;
        }
        goto LABEL_195;
      }
LABEL_191:
      if (a3[2] == a3[1] && a3[5] == a3[4] && a3[8] == a3[7] && a3[11] == a3[10])
      {
LABEL_172:
        uint64_t v103 = (int)(v4 + 1);
        if (v64)
        {
          if ((v4 & 0x80000000) != 0 || a3[8] != a3[7]) {
            return;
          }
          uint64_t v104 = (int)(v4 + 1);
          while (1)
          {
            uint64_t v105 = *(void **)(*(void *)(a1 + 8) + 8 * v4);
            if (v105[2] != v105[1]) {
              break;
            }
            int v106 = v4;
            if ((v105[5] != v105[4] || v105[14] != v105[13]) && v104 == v4 + 1) {
              uint64_t v104 = v4;
            }
            --v4;
            if (v106 <= 0) {
              return;
            }
          }
          *(void *)(a1 + 48sub_21617DB94((const void **)&__p, 0) = v104;
        }
        sub_216313AD8(a1, (uint64_t)a3, v103);
        return;
      }
LABEL_195:
      *(void *)(a1 + 48sub_21617DB94((const void **)&__p, 0) = 0xFFFFLL;
      return;
    }
    int v41 = v32;
    int v42 = *(_DWORD *)(a1 + 40);
    unsigned int v115 = v42 - 3;
    BOOL v116 = (v42 - 3) < 2;
    int v120 = v42;
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t v43 = 0;
    }
    else
    {
      uint64_t v43 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
      if (v43
        && *(void *)(v43 + 16) == *(void *)(v43 + 8)
        && *(void *)(v43 + 40) == *(void *)(v43 + 32)
        && *(void *)(v43 + 64) == *(void *)(v43 + 56))
      {
        uint64_t v45 = *(void *)(v43 + 80);
        uint64_t v44 = *(void *)(v43 + 88);
        BOOL v46 = v44 == v45;
        if (v44 == v45) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
        }
        BOOL v48 = !v46 || (v42 - 3) > 1;
        if (!v48)
        {
          if (*(void *)(v43 + 112) == *(void *)(v43 + 104)) {
            return;
          }
          uint64_t v43 = 0;
          unint64_t v55 = v4 + 1;
          goto LABEL_75;
        }
        uint64_t v43 = v47;
      }
    }
    unint64_t v55 = (int)(v4 + 1);
    if (v42 == 1 && v32 >= 2)
    {
      if (v55 >= 0xFF) {
        sub_21613F340("bitset set argument out of range");
      }
      *(void *)(a1 + 8 * ((unint64_t)(int)(v4 + 1) >> 6) + 504) |= 1 << (v4 + 1);
    }
    else if (v42 != 1)
    {
      goto LABEL_75;
    }
    uint64_t v56 = *(void (****)(void))(a1 + 608);
    if (v56) {
      (**v56)();
    }
LABEL_75:
    if (v41 >= 1)
    {
      uint64_t v57 = 0;
      unint64_t v58 = v55 - 1;
      while (1)
      {
        char v59 = *(unsigned char *)(*(void *)(a1 + 72) + v57);
        if (*(_DWORD *)(a1 + 40) != 3) {
          break;
        }
        if (v43 && *(void *)(v43 + 16) == *(void *)(v43 + 8))
        {
          unint64_t v62 = *(uint64_t **)(v43 + 32);
          CFRange v63 = *(uint64_t **)(v43 + 40);
          int v60 = v59;
LABEL_91:
          sub_216318684(a1, v62, v63, v60, v55, 0, 1.0);
          sub_216318684(a1, *(uint64_t **)(v43 + 56), *(uint64_t **)(v43 + 64), v60, v55, 1, 1.0);
          sub_216318684(a1, *(uint64_t **)(v43 + 80), *(uint64_t **)(v43 + 88), v60, v55, 1, 1.0);
          goto LABEL_92;
        }
        sub_21631757C(a1, (void *)v43, v55, v59, 0);
LABEL_92:
        if (++v57 == v41) {
          goto LABEL_93;
        }
      }
      int v60 = v59;
      sub_21631757C(a1, (void *)v43, v55, v59, 0);
      if (!v43 || (*(_DWORD *)(v43 + 168) - 1) < 2) {
        goto LABEL_92;
      }
      if (v58 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)
      {
        uint64_t v61 = 0;
        while (word_216381F32[v61] != *(_WORD *)(*(void *)(a1 + 48) + 2 * v58))
        {
          if (++v61 == 5) {
            goto LABEL_90;
          }
        }
        if (v61 != -1) {
          goto LABEL_92;
        }
      }
LABEL_90:
      sub_216318684(a1, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), v60, v55, 0, 1.0);
      unint64_t v62 = *(uint64_t **)(v43 + 32);
      CFRange v63 = *(uint64_t **)(v43 + 40);
      goto LABEL_91;
    }
LABEL_93:
    if (v120 == 3)
    {
      char v40 = 1;
      a3 = v122;
      int v64 = v116;
      goto LABEL_170;
    }
    a3 = v122;
    if (v43 && *(void *)(v43 + 16) == *(void *)(v43 + 8) && *(void *)(v43 + 40) != *(void *)(v43 + 32))
    {
      if (v122[2] == v122[1] && v122[5] == v122[4])
      {
        signed int v66 = v4;
        if (v41 >= 1)
        {
          for (uint64_t i = 0; i != v41; sub_21631757C(a1, (void *)v43, v55, *(char *)(*(void *)(a1 + 72) + i++), 1))
            ;
        }
        if (v120 == 4)
        {
          int v64 = 1;
          char v40 = 1;
          unsigned int v4 = v66;
          goto LABEL_170;
        }
        unsigned int v68 = *(_DWORD *)(a1 + 40);
        BOOL v69 = v68 == 5 || v68 == 0;
        unsigned int v4 = v66;
        if (v69
          && v122[5] != v122[4]
          && *(void *)(v43 + 64) == *(void *)(v43 + 56)
          && (*(unsigned char *)(*(void *)(**(void **)(v43 + 32) + 8) + 8) & 4) != 0)
        {
          sub_216312A80(v68, *(unsigned __int16 *)(*(void *)(a1 + 48) + 2 * v66), (char *)&v124);
          BYTE1(v124) = **(unsigned char **)(a1 + 72);
          uint64_t v110 = *(unsigned __int16 ****)(a1 + 32);
          CFRange v111 = **v110;
          if (v111)
          {
            uint64_t v112 = 0;
            char v113 = 1;
            do
            {
              unint64_t v114 = sub_21632279C((uint64_t)v110, v111, *((char *)&v124 + v112));
              CFRange v111 = v114;
              if ((v113 & 1) == 0) {
                break;
              }
              char v113 = 0;
              uint64_t v112 = 1;
            }
            while (v114);
            if (v114 && (v114[4] & 2) != 0) {
              sub_21631738C(a1, (uint64_t)v122, (uint64_t)v114, 0);
            }
          }
          unsigned int v4 = v66;
LABEL_126:
          if (*(_DWORD *)(a1 + 40) == 1 && v122[2] == v122[1])
          {
            uint64_t v107 = (uint64_t *)v122[4];
            uint64_t v108 = (uint64_t *)v122[5];
            while (v107 != v108)
            {
              uint64_t v109 = *v107;
              v107 += 2;
              *(unsigned char *)(v109 + 24) = 0;
            }
          }
LABEL_128:
          char v40 = 1;
          int v64 = 1;
          if (v115 < 2) {
            goto LABEL_170;
          }
          goto LABEL_129;
        }
        int v65 = 1;
LABEL_125:
        if (!v65) {
          goto LABEL_128;
        }
        goto LABEL_126;
      }
      int v65 = 1;
    }
    else
    {
      int v65 = 0;
    }
    if (v120 == 4)
    {
      int v64 = 1;
      char v40 = 1;
      goto LABEL_170;
    }
    goto LABEL_125;
  }
  if ((a4 & 0x80000000) == 0)
  {
    int v119 = *(_DWORD *)(a1 + 40);
    if ((*(unsigned char *)(a1 + 553) & 0x80) != 0) {
      *(unsigned char *)(a1 + 556) = 1;
    }
    uint64_t v8 = *(void **)(*(void *)(a1 + 8) + 8 * a4);
    uint64_t v9 = v8 + 1;
    CFStringRef v10 = (long long *)v8[1];
    uint64_t v11 = (long long *)v8[2];
    if (v10 != v11)
    {
      int v12 = (long long *)v8[1];
      do
      {
        uint64_t v13 = *(unsigned char **)v12++;
        ++v13[16];
        if ((*(unsigned int (**)(unsigned char *))(*(void *)v13 + 96))(v13)) {
          uint64_t v14 = a3 + 1;
        }
        else {
          uint64_t v14 = a3 + 4;
        }
        sub_21621E244(v14, v10);
        CFStringRef v10 = v12;
      }
      while (v12 != v11);
    }
    unint64_t v15 = (long long *)v8[4];
    size_t v16 = (long long *)v8[5];
    if (v15 != v16)
    {
      uint64_t v17 = (long long *)v8[4];
      do
      {
        unint64_t v18 = *(unsigned char **)v17++;
        ++v18[16];
        if ((*(unsigned int (**)(unsigned char *))(*(void *)v18 + 96))(v18)) {
          unint64_t v19 = a3 + 1;
        }
        else {
          unint64_t v19 = a3 + 4;
        }
        sub_21621E244(v19, v15);
        unint64_t v15 = v17;
      }
      while (v17 != v16);
    }
    uint64_t v20 = v8 + 4;
    unint64_t v21 = (long long *)v8[10];
    uint64_t v22 = (long long *)v8[11];
    if (v21 != v22)
    {
      unint64_t v23 = (long long *)v8[10];
      do
      {
        __int16 v24 = *(unsigned char **)v23++;
        ++v24[16];
        if ((*(unsigned int (**)(unsigned char *))(*(void *)v24 + 96))(v24)) {
          unint64_t v25 = a3 + 1;
        }
        else {
          unint64_t v25 = a3 + 4;
        }
        sub_21621E244(v25, v21);
        unint64_t v21 = v23;
      }
      while (v23 != v22);
    }
    int v27 = (long long *)v8[7];
    uint64_t v26 = (long long *)v8[8];
    if (v27 != v26)
    {
      CFIndex v28 = v27;
      do
      {
        uint64_t v29 = *(unsigned char **)v28++;
        ++v29[16];
        if ((*(unsigned int (**)(unsigned char *))(*(void *)v29 + 96))(v29)) {
          char v30 = a3 + 1;
        }
        else {
          char v30 = a3 + 4;
        }
        sub_21621E244(v30, v27);
        int v27 = v28;
      }
      while (v28 != v26);
    }
    sub_2161FB75C(v9);
    sub_2161FB75C(v20);
    int v7 = v119;
  }
  if (v7 == 2)
  {
    uint64_t v31 = *(void *)(a1 + 488);
    *(unsigned char *)(v31 + 32) = 0;
    *(void *)(v31 + 4sub_21617DB94((const void **)&__p, 0) = 0;
    *(unsigned char *)(v31 + 48) = 0;
  }
}

void sub_21631495C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22)
{
  if (a20) {
    sub_2161121B0(a20);
  }
  if (__p) {
    operator delete(__p);
  }
  __int16 v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2163149D4(uint64_t result, unint64_t a2)
{
  uint64_t v264 = *MEMORY[0x263EF8340];
  if (a2 > 0xC) {
    return result;
  }
  uint64_t v2 = result;
  char v3 = *(void **)(result + 560);
  *(void *)(result + 568) = v3;
  unsigned int v4 = (void **)(result + 584);
  *(void *)(result + 592) = *(void *)(result + 584);
  if (!a2)
  {
    uint64_t v6 = **(void ***)(result + 8);
LABEL_181:
    unint64_t v138 = (uint64_t *)v6[1];
    for (uint64_t i = (uint64_t *)v6[2]; v138 != i; v138 += 2)
    {
      uint64_t v140 = *v138;
      unint64_t v141 = *(void *)(v2 + 576);
      if ((unint64_t)v3 >= v141)
      {
        uint64_t v142 = *(void *)(v2 + 560);
        uint64_t v143 = ((uint64_t)v3 - v142) >> 3;
        if ((unint64_t)(v143 + 1) >> 61) {
LABEL_354:
        }
          sub_21610CB04();
        uint64_t v144 = v141 - v142;
        uint64_t v145 = v144 >> 2;
        if (v144 >> 2 <= (unint64_t)(v143 + 1)) {
          uint64_t v145 = v143 + 1;
        }
        if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v146 = v145;
        }
        if (v146) {
          unint64_t v146 = (unint64_t)sub_216188754(v146);
        }
        else {
          uint64_t v147 = 0;
        }
        unint64_t v148 = (void *)(v146 + 8 * v143);
        void *v148 = v140;
        char v3 = v148 + 1;
        uint64_t v149 = *(char **)(v2 + 568);
        uint64_t v150 = *(char **)(v2 + 560);
        if (v149 != v150)
        {
          do
          {
            uint64_t v151 = *((void *)v149 - 1);
            v149 -= 8;
            *--unint64_t v148 = v151;
          }
          while (v149 != v150);
          uint64_t v149 = *(char **)(v2 + 560);
        }
        *(void *)(v2 + 56sub_21617DB94((const void **)&__p, 0) = v148;
        *(void *)(v2 + 568) = v3;
        *(void *)(v2 + 576) = v146 + 8 * v147;
        if (v149) {
          operator delete(v149);
        }
      }
      else
      {
        *v3++ = v140;
      }
      *(void *)(v2 + 568) = v3;
    }
    uint64_t v153 = (uint64_t *)v6[4];
    for (j = (uint64_t *)v6[5]; v153 != j; v153 += 2)
    {
      uint64_t v154 = *v153;
      unint64_t v155 = *(void *)(v2 + 576);
      if ((unint64_t)v3 >= v155)
      {
        uint64_t v156 = *(void *)(v2 + 560);
        uint64_t v157 = ((uint64_t)v3 - v156) >> 3;
        if ((unint64_t)(v157 + 1) >> 61) {
          goto LABEL_354;
        }
        uint64_t v158 = v155 - v156;
        uint64_t v159 = v158 >> 2;
        if (v158 >> 2 <= (unint64_t)(v157 + 1)) {
          uint64_t v159 = v157 + 1;
        }
        if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v160 = v159;
        }
        if (v160) {
          unint64_t v160 = (unint64_t)sub_216188754(v160);
        }
        else {
          uint64_t v161 = 0;
        }
        v162 = (void *)(v160 + 8 * v157);
        void *v162 = v154;
        char v3 = v162 + 1;
        v163 = *(char **)(v2 + 568);
        v164 = *(char **)(v2 + 560);
        if (v163 != v164)
        {
          do
          {
            uint64_t v165 = *((void *)v163 - 1);
            v163 -= 8;
            *--v162 = v165;
          }
          while (v163 != v164);
          v163 = *(char **)(v2 + 560);
        }
        *(void *)(v2 + 56sub_21617DB94((const void **)&__p, 0) = v162;
        *(void *)(v2 + 568) = v3;
        *(void *)(v2 + 576) = v160 + 8 * v161;
        if (v163) {
          operator delete(v163);
        }
      }
      else
      {
        *v3++ = v154;
      }
      *(void *)(v2 + 568) = v3;
    }
    v166 = *(char **)(v2 + 592);
    unint64_t v167 = *(void *)(v2 + 600);
    if ((unint64_t)v166 >= v167)
    {
      unint64_t v169 = (char *)*v4;
      uint64_t v170 = v166 - (unsigned char *)*v4;
      if (v170 <= -3) {
        sub_21610CB04();
      }
      uint64_t v171 = v170 >> 1;
      unint64_t v172 = v167 - (void)v169;
      if (v172 <= (v170 >> 1) + 1) {
        unint64_t v173 = v171 + 1;
      }
      else {
        unint64_t v173 = v172;
      }
      if (v172 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v174 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v174 = v173;
      }
      if (v174)
      {
        v175 = (char *)sub_21610FD44(v2 + 600, v174);
        v166 = *(char **)(v2 + 592);
        unint64_t v169 = *(char **)(v2 + 584);
      }
      else
      {
        v175 = 0;
      }
      int64x2_t v225 = &v175[2 * v171];
      v226 = &v175[2 * v174];
      *(_WORD *)int64x2_t v225 = 0;
      uint64_t v168 = v225 + 2;
      while (v166 != v169)
      {
        __int16 v227 = *((_WORD *)v166 - 1);
        v166 -= 2;
        *((_WORD *)v225 - 1) = v227;
        v225 -= 2;
      }
      *(void *)(v2 + 584) = v225;
      *(void *)(v2 + 592) = v168;
      *(void *)(v2 + 60sub_21617DB94((const void **)&__p, 0) = v226;
      if (v169) {
        operator delete(v169);
      }
    }
    else
    {
      *(_WORD *)v166 = 0;
      uint64_t v168 = v166 + 2;
    }
    *(void *)(v2 + 592) = v168;
    goto LABEL_343;
  }
  uint64_t v5 = *(void *)(result + 8);
  if (*(void *)(result + 16) != v5)
  {
    uint64_t v6 = *(void **)v5;
    if ((*(_DWORD *)(*(void *)v5 + 168) - 1) <= 1) {
      goto LABEL_181;
    }
  }
  v255 = (void **)(result + 584);
  v259 = 0;
  int v263 = 0;
  uint64_t v262 = 0;
  int v7 = (char *)operator new(2uLL);
  v257[1] = 0;
  __p = v7;
  *(_WORD *)int v7 = -1;
  uint64_t v8 = v7 + 2;
  v260 = v8;
  int v251 = a2 + 1;
  uint64_t v254 = v2 + 600;
  v256 = (uint64_t *)v257;
  v257[0] = 0;
  do
  {
    unsigned int v11 = *((unsigned __int16 *)v8 - 1);
    uint64_t v9 = v8 - 2;
    unsigned int v10 = v11;
    if (v11 == 0xFFFF) {
      uint64_t v12 = (unsigned __int16)a2;
    }
    else {
      uint64_t v12 = v10;
    }
    v259 = v9;
    uint64_t v13 = *(void *)(v2 + 8);
    uint64_t v14 = *(void *)(v13 + 8 * v12);
    unint64_t v15 = (uint64_t **)(v14 + 136);
    if (v12 == a2)
    {
      size_t v16 = *(void **)(v13 + 8 * a2);
      if (v16[2] != v16[1] && v16[5] != v16[4])
      {
        sub_2163191C4((uint64_t *)&v256, *(void **)(v14 + 136), (void *)(v14 + 144));
        uint64_t v17 = *(void *)(*(void *)(v2 + 8) + 8 * a2);
        unint64_t v18 = *(void **)(v17 + 32);
        for (k = *(void **)(v17 + 40); v18 != k; v18 += 2)
        {
          if ((*(unsigned int (**)(void))(*(void *)*v18 + 64))() == 2) {
            break;
          }
          if (*(unsigned char *)(*(void *)(*v18 + 8) + 8))
          {
            int v20 = (*(uint64_t (**)(void))(*(void *)*v18 + 40))(*v18);
            if (v251 - v20 >= 1
              && *(void *)(*(void *)(*(void *)(v2 + 8) + 8 * (a2 - v20)) + 16) != *(void *)(*(void *)(*(void *)(v2 + 8) + 8 * (a2 - v20)) + 8))
            {
              LOWORD(v261) = v251 - v20;
              sub_216179580(&v256, (unsigned __int16 *)&v261, &v261);
            }
          }
        }
        unint64_t v15 = &v256;
      }
    }
    unint64_t v23 = *v15;
    uint64_t v22 = v15 + 1;
    unint64_t v21 = v23;
    if (v23 != (uint64_t *)v22)
    {
      do
      {
        __int16 v24 = *((_WORD *)v21 + 13);
        if (v24)
        {
          __int16 v25 = v24 - 1;
          uint64_t v26 = (unsigned __int16)(v24 - 1);
          if (!*((unsigned char *)&v262 + v26))
          {
            int v27 = v259;
            if (v259 >= v260)
            {
              uint64_t v39 = (char *)__p;
              uint64_t v40 = v259 - (unsigned char *)__p;
              if (v259 - (unsigned char *)__p < -2) {
LABEL_351:
              }
                sub_21610CB04();
              uint64_t v41 = v40 >> 1;
              if (v260 - (unsigned char *)__p <= (unint64_t)((v40 >> 1) + 1)) {
                uint64_t v42 = v41 + 1;
              }
              else {
                uint64_t v42 = v260 - (unsigned char *)__p;
              }
              if ((unint64_t)(v260 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v43 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v43 = v42;
              }
              if (v43)
              {
                uint64_t v44 = (char *)sub_21610FD44((uint64_t)&v260, v43);
                uint64_t v39 = (char *)__p;
                int v27 = v259;
              }
              else
              {
                uint64_t v44 = 0;
              }
              uint64_t v47 = &v44[2 * v41];
              *(_WORD *)uint64_t v47 = v25;
              CFIndex v28 = v47 + 2;
              while (v27 != v39)
              {
                __int16 v48 = *((_WORD *)v27 - 1);
                v27 -= 2;
                *((_WORD *)v47 - 1) = v48;
                v47 -= 2;
              }
              __p = v47;
              v259 = v28;
              v260 = &v44[2 * v43];
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(_WORD *)v259 = v25;
              CFIndex v28 = v27 + 2;
            }
            v259 = v28;
            *((unsigned char *)&v262 + v26) = 1;
          }
        }
        else
        {
          uint64_t v29 = *(char **)(v2 + 592);
          unint64_t v30 = *(void *)(v2 + 600);
          if ((unint64_t)v29 >= v30)
          {
            int v32 = (char *)*v255;
            uint64_t v33 = v29 - (unsigned char *)*v255;
            if (v33 <= -3) {
              goto LABEL_351;
            }
            uint64_t v34 = v33 >> 1;
            unint64_t v35 = v30 - (void)v32;
            if (v35 <= (v33 >> 1) + 1) {
              unint64_t v36 = v34 + 1;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v35 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v37 = v36;
            }
            if (v37)
            {
              char v38 = (char *)sub_21610FD44(v254, v37);
              uint64_t v29 = *(char **)(v2 + 592);
              int v32 = *(char **)(v2 + 584);
            }
            else
            {
              char v38 = 0;
            }
            uint64_t v45 = &v38[2 * v34];
            *(_WORD *)uint64_t v45 = v12;
            uint64_t v31 = v45 + 2;
            while (v29 != v32)
            {
              __int16 v46 = *((_WORD *)v29 - 1);
              v29 -= 2;
              *((_WORD *)v45 - 1) = v46;
              v45 -= 2;
            }
            *(void *)(v2 + 584) = v45;
            *(void *)(v2 + 592) = v31;
            *(void *)(v2 + 60sub_21617DB94((const void **)&__p, 0) = &v38[2 * v37];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(_WORD *)uint64_t v29 = v12;
            uint64_t v31 = v29 + 2;
          }
          *(void *)(v2 + 592) = v31;
        }
        uint64_t v49 = (uint64_t *)v21[1];
        if (v49)
        {
          do
          {
            int v50 = (uint64_t **)v49;
            uint64_t v49 = (uint64_t *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            int v50 = (uint64_t **)v21[2];
            BOOL v207 = *v50 == v21;
            unint64_t v21 = (uint64_t *)v50;
          }
          while (!v207);
        }
        unint64_t v21 = (uint64_t *)v50;
      }
      while (v50 != v22);
    }
    uint64_t v8 = v259;
  }
  while (v259 != __p);
  unsigned int v51 = *(unsigned __int16 **)(v2 + 584);
  for (m = *(unsigned __int16 **)(v2 + 592); v51 != m; ++v51)
  {
    uint64_t v52 = *v51;
    unint64_t v53 = *(void **)(*(void *)(v2 + 8) + 8 * v52);
    uint64_t v54 = v53 + 1;
    uint64_t v55 = 1;
    if (v53[2] == v53[1])
    {
      uint64_t v55 = 4;
      uint64_t v54 = v53 + 4;
    }
    uint64_t v56 = (uint64_t *)v53[v55];
    for (n = (uint64_t *)v54[1]; v56 != n; v56 += 2)
    {
      if (v52 + 1 == (*(unsigned int (**)(void))(*(void *)*v56 + 40))())
      {
        uint64_t v58 = *v56;
        char v59 = *(void **)(v2 + 568);
        unint64_t v60 = *(void *)(v2 + 576);
        if ((unint64_t)v59 >= v60)
        {
          uint64_t v62 = *(void *)(v2 + 560);
          uint64_t v63 = ((uint64_t)v59 - v62) >> 3;
          if ((unint64_t)(v63 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v64 = v60 - v62;
          uint64_t v65 = v64 >> 2;
          if (v64 >> 2 <= (unint64_t)(v63 + 1)) {
            uint64_t v65 = v63 + 1;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v65;
          }
          if (v66) {
            unint64_t v66 = (unint64_t)sub_216188754(v66);
          }
          else {
            uint64_t v67 = 0;
          }
          unsigned int v68 = (void *)(v66 + 8 * v63);
          *unsigned int v68 = v58;
          uint64_t v61 = v68 + 1;
          BOOL v69 = *(char **)(v2 + 568);
          unint64_t v70 = *(char **)(v2 + 560);
          if (v69 != v70)
          {
            do
            {
              uint64_t v71 = *((void *)v69 - 1);
              v69 -= 8;
              *--unsigned int v68 = v71;
            }
            while (v69 != v70);
            BOOL v69 = *(char **)(v2 + 560);
          }
          *(void *)(v2 + 56sub_21617DB94((const void **)&__p, 0) = v68;
          *(void *)(v2 + 568) = v61;
          *(void *)(v2 + 576) = v66 + 8 * v67;
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *char v59 = v58;
          uint64_t v61 = v59 + 1;
        }
        *(void *)(v2 + 568) = v61;
      }
    }
    if (*(_WORD *)(*(void *)(v2 + 48) + 2 * v52) == 39 && v53[2] != v53[1])
    {
      uint64_t v72 = (uint64_t *)v53[4];
      unint64_t v73 = (uint64_t *)v53[5];
      if (v72 != v73)
      {
        int v74 = v52 + 1;
        do
        {
          if (v74 == (*(unsigned int (**)(void))(*(void *)*v72 + 40))())
          {
            uint64_t v75 = *v72;
            if (*(unsigned char *)(*(void *)(*v72 + 8) + 8))
            {
              uint64_t v76 = *(void **)(v2 + 568);
              unint64_t v77 = *(void *)(v2 + 576);
              if ((unint64_t)v76 >= v77)
              {
                uint64_t v79 = *(void *)(v2 + 560);
                uint64_t v80 = ((uint64_t)v76 - v79) >> 3;
                if ((unint64_t)(v80 + 1) >> 61) {
                  sub_21610CB04();
                }
                uint64_t v81 = v77 - v79;
                uint64_t v82 = v81 >> 2;
                if (v81 >> 2 <= (unint64_t)(v80 + 1)) {
                  uint64_t v82 = v80 + 1;
                }
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v83 = v82;
                }
                if (v83) {
                  unint64_t v83 = (unint64_t)sub_216188754(v83);
                }
                else {
                  uint64_t v84 = 0;
                }
                int v85 = (void *)(v83 + 8 * v80);
                *int v85 = v75;
                uint64_t v78 = v85 + 1;
                CFStringRef v86 = *(char **)(v2 + 568);
                CFIndex v87 = *(char **)(v2 + 560);
                if (v86 != v87)
                {
                  do
                  {
                    uint64_t v88 = *((void *)v86 - 1);
                    v86 -= 8;
                    *--int v85 = v88;
                  }
                  while (v86 != v87);
                  CFStringRef v86 = *(char **)(v2 + 560);
                }
                *(void *)(v2 + 56sub_21617DB94((const void **)&__p, 0) = v85;
                *(void *)(v2 + 568) = v78;
                *(void *)(v2 + 576) = v83 + 8 * v84;
                if (v86) {
                  operator delete(v86);
                }
              }
              else
              {
                void *v76 = v75;
                uint64_t v78 = v76 + 1;
              }
              *(void *)(v2 + 568) = v78;
            }
          }
          v72 += 2;
        }
        while (v72 != v73);
      }
    }
  }
  uint64_t v89 = *(uint64_t **)(v2 + 568);
  uint64_t v90 = *(uint64_t **)(v2 + 560);
  uint64_t v91 = (char *)v89 - (char *)v90;
  if (v89 == v90)
  {
    unint64_t v176 = a2;
    if (a2 >= 6) {
      uint64_t v177 = 6;
    }
    else {
      uint64_t v177 = a2;
    }
    do
    {
      while (1)
      {
        uint64_t v178 = *(void *)(*(void *)(v2 + 8) + 8 * v176);
        v179 = *(uint64_t **)(v178 + 56);
        v180 = *(uint64_t **)(v178 + 64);
        if (v179 != v180) {
          break;
        }
        if (!--v177) {
          goto LABEL_341;
        }
      }
      do
      {
        if (v177 + 1 == (*(unsigned int (**)(void))(*(void *)*v179 + 40))()
          && (*(unsigned int (**)(void))(*(void *)*v179 + 96))())
        {
          uint64_t v181 = *(char **)(v2 + 592);
          unint64_t v182 = *(void *)(v2 + 600);
          if ((unint64_t)v181 >= v182)
          {
            v184 = (char *)*v255;
            uint64_t v185 = v181 - (unsigned char *)*v255;
            if (v185 <= -3) {
              sub_21610CB04();
            }
            uint64_t v186 = v185 >> 1;
            unint64_t v187 = v182 - (void)v184;
            if (v187 <= (v185 >> 1) + 1) {
              unint64_t v188 = v186 + 1;
            }
            else {
              unint64_t v188 = v187;
            }
            if (v187 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v189 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v189 = v188;
            }
            if (v189)
            {
              unint64_t v190 = (char *)sub_21610FD44(v254, v189);
              uint64_t v181 = *(char **)(v2 + 592);
              v184 = *(char **)(v2 + 584);
            }
            else
            {
              unint64_t v190 = 0;
            }
            v191 = &v190[2 * v186];
            *(_WORD *)v191 = v177;
            uint64_t v183 = v191 + 2;
            while (v181 != v184)
            {
              __int16 v192 = *((_WORD *)v181 - 1);
              v181 -= 2;
              *((_WORD *)v191 - 1) = v192;
              v191 -= 2;
            }
            *(void *)(v2 + 584) = v191;
            *(void *)(v2 + 592) = v183;
            *(void *)(v2 + 60sub_21617DB94((const void **)&__p, 0) = &v190[2 * v189];
            if (v184) {
              operator delete(v184);
            }
          }
          else
          {
            *(_WORD *)uint64_t v181 = v177;
            uint64_t v183 = v181 + 2;
          }
          *(void *)(v2 + 592) = v183;
          uint64_t v193 = *v179;
          v194 = *(void **)(v2 + 568);
          unint64_t v195 = *(void *)(v2 + 576);
          if ((unint64_t)v194 >= v195)
          {
            uint64_t v197 = *(void *)(v2 + 560);
            uint64_t v198 = ((uint64_t)v194 - v197) >> 3;
            if ((unint64_t)(v198 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v199 = v195 - v197;
            uint64_t v200 = v199 >> 2;
            if (v199 >> 2 <= (unint64_t)(v198 + 1)) {
              uint64_t v200 = v198 + 1;
            }
            if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v201 = v200;
            }
            if (v201) {
              unint64_t v201 = (unint64_t)sub_216188754(v201);
            }
            else {
              uint64_t v202 = 0;
            }
            v203 = (void *)(v201 + 8 * v198);
            void *v203 = v193;
            long long v196 = v203 + 1;
            uint64_t v204 = *(char **)(v2 + 568);
            v205 = *(char **)(v2 + 560);
            if (v204 != v205)
            {
              do
              {
                uint64_t v206 = *((void *)v204 - 1);
                v204 -= 8;
                *--v203 = v206;
              }
              while (v204 != v205);
              uint64_t v204 = *(char **)(v2 + 560);
            }
            *(void *)(v2 + 56sub_21617DB94((const void **)&__p, 0) = v203;
            *(void *)(v2 + 568) = v196;
            *(void *)(v2 + 576) = v201 + 8 * v202;
            if (v204) {
              operator delete(v204);
            }
          }
          else
          {
            void *v194 = v193;
            long long v196 = v194 + 1;
          }
          *(void *)(v2 + 568) = v196;
        }
        v179 += 2;
      }
      while (v179 != v180);
      BOOL v207 = *(void *)(v2 + 560) != *(void *)(v2 + 568) || --v177 == 0;
      unint64_t v176 = a2;
    }
    while (!v207);
    goto LABEL_341;
  }
  if (*(_DWORD *)(v2 + 40) == 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)*v90 + 96))(*v90))
    {
      int v92 = *(unsigned __int16 **)(v2 + 584);
      unint64_t v93 = *(unsigned __int16 **)(v2 + 592);
      if (v92 != v93)
      {
        uint64_t v94 = v92 + 1;
        if (v92 + 1 != v93)
        {
          unsigned __int16 v95 = *v92;
          int v96 = v92 + 1;
          do
          {
            unsigned int v98 = *v96++;
            unsigned __int16 v97 = v98;
            BOOL v99 = v95 >= v98;
            if (v95 <= v98) {
              unsigned __int16 v95 = v97;
            }
            if (!v99) {
              int v92 = v94;
            }
            uint64_t v94 = v96;
          }
          while (v96 != v93);
        }
      }
      unint64_t v100 = *v92;
      if (v100 >= 2)
      {
        for (iuint64_t i = 1; ii != v100; ++ii)
        {
          unsigned __int8 v102 = *(unsigned __int16 **)(v2 + 584);
          uint64_t v103 = *(unsigned __int16 **)(v2 + 592);
          if (v102 != v103)
          {
            while (*v102 != (unsigned __int16)ii)
            {
              if (++v102 == v103)
              {
                unsigned __int8 v102 = *(unsigned __int16 **)(v2 + 592);
                break;
              }
            }
          }
          if (v102 == v103)
          {
            uint64_t v104 = *(void *)(*(void *)(v2 + 8) + 8 * ii);
            uint64_t v105 = *(uint64_t **)(v104 + 8);
            for (jj = *(uint64_t **)(v104 + 16); v105 != jj; v105 += 2)
            {
              if (ii + 1 == (*(unsigned int (**)(void))(*(void *)*v105 + 40))())
              {
                uint64_t v107 = *v105;
                uint64_t v108 = *(void **)(v2 + 568);
                unint64_t v109 = *(void *)(v2 + 576);
                if ((unint64_t)v108 >= v109)
                {
                  uint64_t v111 = *(void *)(v2 + 560);
                  uint64_t v112 = ((uint64_t)v108 - v111) >> 3;
                  if ((unint64_t)(v112 + 1) >> 61) {
                    sub_21610CB04();
                  }
                  uint64_t v113 = v109 - v111;
                  uint64_t v114 = v113 >> 2;
                  if (v113 >> 2 <= (unint64_t)(v112 + 1)) {
                    uint64_t v114 = v112 + 1;
                  }
                  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v115 = v114;
                  }
                  if (v115) {
                    unint64_t v115 = (unint64_t)sub_216188754(v115);
                  }
                  else {
                    uint64_t v116 = 0;
                  }
                  unsigned int v117 = (void *)(v115 + 8 * v112);
                  *unsigned int v117 = v107;
                  uint64_t v110 = v117 + 1;
                  unsigned int v118 = *(char **)(v2 + 568);
                  int v119 = *(char **)(v2 + 560);
                  if (v118 != v119)
                  {
                    do
                    {
                      uint64_t v120 = *((void *)v118 - 1);
                      v118 -= 8;
                      *--unsigned int v117 = v120;
                    }
                    while (v118 != v119);
                    unsigned int v118 = *(char **)(v2 + 560);
                  }
                  *(void *)(v2 + 56sub_21617DB94((const void **)&__p, 0) = v117;
                  *(void *)(v2 + 568) = v110;
                  *(void *)(v2 + 576) = v115 + 8 * v116;
                  if (v118) {
                    operator delete(v118);
                  }
                }
                else
                {
                  *uint64_t v108 = v107;
                  uint64_t v110 = v108 + 1;
                }
                *(void *)(v2 + 568) = v110;
              }
            }
          }
        }
      }
    }
    uint64_t v121 = **(void **)(v2 + 8);
    __int16 v122 = *(uint64_t **)(v121 + 32);
    char v123 = *(uint64_t **)(v121 + 40);
    if (v122 != v123)
    {
      __int16 v124 = *(void **)(v2 + 568);
      do
      {
        __int16 v125 = *(void **)(v2 + 560);
        uint64_t v126 = *v122;
        uint64_t v127 = v124;
        if (v125 != v124)
        {
          uint64_t v127 = *(void **)(v2 + 560);
          while (*v127 != v126)
          {
            if (++v127 == v124)
            {
              uint64_t v127 = v124;
              break;
            }
          }
        }
        if (v127 == v124)
        {
          unint64_t v128 = *(void *)(v2 + 576);
          if ((unint64_t)v124 >= v128)
          {
            uint64_t v129 = v124 - v125;
            if ((unint64_t)(v129 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v130 = v128 - (void)v125;
            uint64_t v131 = v130 >> 2;
            if (v130 >> 2 <= (unint64_t)(v129 + 1)) {
              uint64_t v131 = v129 + 1;
            }
            if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v132 = v131;
            }
            if (v132) {
              unint64_t v132 = (unint64_t)sub_216188754(v132);
            }
            else {
              uint64_t v133 = 0;
            }
            uint64_t v134 = (void *)(v132 + 8 * v129);
            void *v134 = v126;
            __int16 v124 = v134 + 1;
            uint64_t v135 = *(char **)(v2 + 568);
            uint64_t v136 = *(char **)(v2 + 560);
            if (v135 != v136)
            {
              do
              {
                uint64_t v137 = *((void *)v135 - 1);
                v135 -= 8;
                *--uint64_t v134 = v137;
              }
              while (v135 != v136);
              uint64_t v135 = *(char **)(v2 + 560);
            }
            *(void *)(v2 + 56sub_21617DB94((const void **)&__p, 0) = v134;
            *(void *)(v2 + 568) = v124;
            *(void *)(v2 + 576) = v132 + 8 * v133;
            if (v135) {
              operator delete(v135);
            }
          }
          else
          {
            *v124++ = v126;
          }
          *(void *)(v2 + 568) = v124;
        }
        v122 += 2;
      }
      while (v122 != v123);
    }
    goto LABEL_341;
  }
  v261 = sub_216319008;
  sub_21631DB68((uint64_t)v90, v89, (uint64_t (**)(void))&v261, 126 - 2 * __clz(v91 >> 3), 1);
  uint64_t v208 = **(void **)(v2 + 560);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v208 + 96))(v208))
  {
    if ((unint64_t)v91 >= 9)
    {
      unsigned int v209 = (*(uint64_t (**)(uint64_t))(*(void *)v208 + 40))(v208);
      uint64_t v210 = *(void *)(v2 + 560) + 8;
      if (v210 != *(void *)(v2 + 568))
      {
        unsigned int v211 = v209;
        uint64_t v212 = v209;
        uint64_t v213 = *(void *)(*(void *)(v2 + 8) + 8 * v209 - 8);
        do
        {
          unsigned int v214 = (*(uint64_t (**)(void))(**(void **)v210 + 40))();
          if (v214 < v211)
          {
            uint64_t v215 = v214;
            if (v212 == (uint64_t)(*(void *)(v2 + 16) - *(void *)(v2 + 8)) >> 3)
            {
LABEL_283:
              uint64_t v216 = *(void *)(v2 + 568);
              uint64_t v217 = v216 - (v210 + 8);
              if (v216 != v210 + 8) {
                memmove((void *)v210, (const void *)(v210 + 8), v216 - (v210 + 8));
              }
              *(void *)(v2 + 568) = v210 + v217;
              uint64_t v218 = *(unsigned __int16 **)(v2 + 592);
              uint64_t v219 = v215 - 1;
              if ((unint64_t)(v215 - 1) >> 16)
              {
LABEL_289:
                v220 = *(unsigned __int16 **)(v2 + 592);
              }
              else
              {
                v220 = *(unsigned __int16 **)(v2 + 584);
                if (v220 != v218)
                {
                  while (*v220 != (unsigned __int16)v219)
                  {
                    if (++v220 == v218) {
                      goto LABEL_289;
                    }
                  }
                }
              }
              if (v220 != v218)
              {
                for (kk = v220 + 1; kk != v218; ++kk)
                {
                  uint64_t v222 = *kk;
                  if (v219 != v222) {
                    *v220++ = v222;
                  }
                }
              }
              if (v218 != v220) {
                *(void *)(v2 + 592) = v220;
              }
              continue;
            }
            uint64_t v223 = *(void *)(v213 + 8);
            uint64_t v224 = *(void *)(v213 + 16);
            while (v223 != v224)
            {
              if (v215 + (*(unsigned int (**)(void))(**(void **)v223 + 40))() == v212) {
                goto LABEL_283;
              }
              v223 += 16;
            }
          }
          v210 += 8;
        }
        while (v210 != *(void *)(v2 + 568));
      }
    }
  }
  else
  {
    if ((unint64_t)((uint64_t)(*(void *)(v2 + 16) - *(void *)(v2 + 8)) >> 3) >= 6) {
      uint64_t v228 = 6;
    }
    else {
      uint64_t v228 = (uint64_t)(*(void *)(v2 + 16) - *(void *)(v2 + 8)) >> 3;
    }
    if (v228)
    {
      uint64_t v229 = 0;
      do
      {
        uint64_t v230 = *(void *)(*(void *)(v2 + 8) + 8 * v229);
        uint64_t v231 = *(void *)(v230 + 56);
        uint64_t v232 = *(void *)(v230 + 64);
        uint64_t v233 = v229 + 1;
        while (v231 != v232)
        {
          if (v233 == (*(unsigned int (**)(void))(**(void **)v231 + 40))()
            && (*(unsigned int (**)(void))(**(void **)v231 + 96))())
          {
            v234 = *(char **)(v2 + 592);
            unint64_t v235 = *(void *)(v2 + 600);
            if ((unint64_t)v234 >= v235)
            {
              v237 = (char *)*v255;
              uint64_t v238 = v234 - (unsigned char *)*v255;
              if (v238 <= -3) {
                sub_21610CB04();
              }
              uint64_t v239 = v238 >> 1;
              unint64_t v240 = v235 - (void)v237;
              if (v240 <= (v238 >> 1) + 1) {
                unint64_t v241 = v239 + 1;
              }
              else {
                unint64_t v241 = v240;
              }
              if (v240 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v242 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v242 = v241;
              }
              if (v242)
              {
                v243 = (char *)sub_21610FD44(v254, v242);
                v234 = *(char **)(v2 + 592);
                v237 = *(char **)(v2 + 584);
              }
              else
              {
                v243 = 0;
              }
              unint64_t v244 = &v243[2 * v239];
              *(_WORD *)unint64_t v244 = v229;
              v236 = v244 + 2;
              while (v234 != v237)
              {
                __int16 v245 = *((_WORD *)v234 - 1);
                v234 -= 2;
                *((_WORD *)v244 - 1) = v245;
                v244 -= 2;
              }
              *(void *)(v2 + 584) = v244;
              *(void *)(v2 + 592) = v236;
              *(void *)(v2 + 60sub_21617DB94((const void **)&__p, 0) = &v243[2 * v242];
              if (v237) {
                operator delete(v237);
              }
            }
            else
            {
              *(_WORD *)v234 = v229;
              v236 = v234 + 2;
            }
            *(void *)(v2 + 592) = v236;
          }
          v231 += 16;
        }
        ++v229;
      }
      while (v233 != v228);
    }
  }
LABEL_341:
  sub_21612A250((uint64_t)&v256, v257[0]);
  if (__p)
  {
    v259 = (char *)__p;
    operator delete(__p);
  }
LABEL_343:
  uint64_t v246 = *(void *)(v2 + 560);
  unint64_t v247 = *(uint64_t **)(v2 + 568);
  unint64_t v248 = 126 - 2 * __clz(((uint64_t)v247 - v246) >> 3);
  if (v247 == (uint64_t *)v246) {
    uint64_t v249 = 0;
  }
  else {
    uint64_t v249 = v248;
  }
  v250 = sub_216319080;
  if ((*(_DWORD *)(v2 + 40) - 3) < 2) {
    v250 = sub_216319008;
  }
  __p = v250;
  return sub_21631DB68(v246, v247, (uint64_t (**)(void))&__p, v249, 1);
}

void sub_216315BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216315C84(void *a1, uint64_t a2)
{
  sub_216140140((uint64_t)v130);
  unsigned int v4 = *(const UniChar **)(a2 + 48);
  if (v4) {
    CFIndex v5 = (uint64_t)(*(void *)(a2 + 56) - (void)v4) >> 1;
  }
  else {
    CFIndex v5 = 0;
  }
  CFStringRef v6 = CFStringCreateWithCharacters(0, v4, v5);
  sub_2161E2FFC(v6, &__s);
  int v7 = sub_216129E78(&v131, (uint64_t)"-------------------- input = ", 29);
  size_t v8 = strlen(__s);
  uint64_t v9 = sub_216129E78(v7, (uint64_t)__s, v8);
  unsigned int v10 = sub_216129E78(v9, (uint64_t)" ------------------", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  unsigned int v11 = std::locale::use_facet(&v126, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  CFRelease(v6);
  if (*(void *)(a2 + 760) != *(void *)(a2 + 768))
  {
    uint64_t v12 = sub_216129E78(&v131, (uint64_t)"-------------------- nbests------------------", 45);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    uint64_t v13 = std::locale::use_facet(&v126, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v126);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v14 = *(unsigned __int16 ***)(a2 + 760);
    for (uint64_t i = *(unsigned __int16 ***)(a2 + 768); v14 != i; v14 += 3)
    {
      uint64_t v17 = *v14;
      size_t v16 = v14[1];
      while (v17 != v16)
      {
        uint64_t v18 = *v17;
        unint64_t v19 = &(&off_2642710F0)[2 * v18];
        int v20 = &(&off_26426EF10)[2 * v18];
        if (*(_DWORD *)(a2 + 40) == 5) {
          int v20 = v19;
        }
        sub_21610B834(&v126, *v20);
        if ((v128 & 0x80u) == 0) {
          locale = &v126;
        }
        else {
          locale = v126.__locale_;
        }
        if ((v128 & 0x80u) == 0) {
          uint64_t v22 = v128;
        }
        else {
          uint64_t v22 = (uint64_t)v127;
        }
        unint64_t v23 = sub_216129E78(&v131, (uint64_t)locale, v22);
        sub_216129E78(v23, (uint64_t)" ", 1);
        if ((char)v128 < 0) {
          operator delete(v126.__locale_);
        }
        ++v17;
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(void *)(v131 - 24)));
      __int16 v24 = std::locale::use_facet(&v126, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale(&v126);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  __int16 v25 = *(void **)(a2 + 8);
  int v119 = *(void **)(a2 + 16);
  if (v25 != v119)
  {
    uint64_t v121 = 0;
    do
    {
      __int16 v122 = (void *)*v25;
      sub_21631F0B0((uint64_t *)&v126, *v25 + 136);
      uint64_t v26 = sub_216129E78(&v131, (uint64_t)"syllables ending with input char ", 33);
      sub_2161E30A8((void *)(*(void *)(a2 + 48) + 2 * v121), 1uLL, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v29 = sub_216129E78(v26, (uint64_t)p_p, size);
      sub_216129E78(v29, (uint64_t)" at pos ", 8);
      unint64_t v30 = (void *)std::ostream::operator<<();
      uint64_t v31 = sub_216129E78(v30, (uint64_t)": ", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
      int v32 = std::locale::use_facet(&v135, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale(&v135);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v33 = (const void **)v122[1];
      uint64_t v34 = (const void **)v122[2];
      while (v33 != v34)
      {
        sub_21631D408(&__p, "complete syllable: ", *v33);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v35 = &__p;
        }
        else {
          unint64_t v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v36 = __p.__r_.__value_.__l.__size_;
        }
        sub_216129E78(&v131, (uint64_t)v35, v36);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v33 += 2;
      }
      uint64_t v120 = v25;
      uint64_t v37 = (const void **)v122[4];
      char v38 = (const void **)v122[5];
      while (v37 != v38)
      {
        sub_21631D408(&__p, "incomplete syllable: ", *v37);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v39 = &__p;
        }
        else {
          uint64_t v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
        }
        sub_216129E78(&v131, (uint64_t)v39, v40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v41 = *(_DWORD *)(a2 + 40);
        if ((v41 - 3) >= 2)
        {
          unsigned int v42 = (*(uint64_t (**)(const void *, void, void))(*(void *)*v37 + 48))(*v37, 2 * (v41 == 5), 0);
          if (v42)
          {
            for (unsigned __int16 j = 0; j < v42; ++j)
            {
              unsigned int v44 = (*(uint64_t (**)(const void *, void))(*(void *)*v37 + 56))(*v37, j);
              if (*(_DWORD *)(a2 + 40) == 5) {
                uint64_t v45 = &(&off_2642710F0)[2 * v44];
              }
              else {
                uint64_t v45 = &(&off_26426EF10)[2 * v44];
              }
              sub_21610B834(&__p, *v45);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                __int16 v46 = &__p;
              }
              else {
                __int16 v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v47 = __p.__r_.__value_.__l.__size_;
              }
              __int16 v48 = sub_216129E78(&v131, (uint64_t)v46, v47);
              sub_216129E78(v48, (uint64_t)", ", 2);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
          std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(void *)(v131 - 24)));
          uint64_t v49 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        v37 += 2;
      }
      unsigned int v51 = (const void **)v122[7];
      int v50 = (const void **)v122[8];
      char v123 = v50;
      while (v51 != v50)
      {
        sub_21631D408(&__p, "Autocorrected Complete syllable: ", *v51);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v52 = &__p;
        }
        else {
          uint64_t v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
        }
        sub_216129E78(&v131, (uint64_t)v52, v53);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v54 = (void **)*v51;
        if ((*(float (**)(const void *))(*(void *)*v51 + 80))(*v51) < 1.0)
        {
          uint64_t v55 = sub_216129E78(&v131, (uint64_t)"\tprob = ", 8);
          *(void *)((char *)v55 + *(void *)(*v55 - 24) + 16) = 5;
          uint64_t v56 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(void *)(*v56 - 24)));
          uint64_t v57 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v54[15])
        {
          uint64_t v58 = sub_216129E78(&v131, (uint64_t)"\tPrevious syllable = ", 21);
          char v59 = (const char *)(*(uint64_t (**)(void *))(*v54[15] + 24))(v54[15]);
          size_t v60 = strlen(v59);
          uint64_t v61 = sub_216129E78(v58, (uint64_t)v59, v60);
          sub_216129E78(v61, (uint64_t)" rawInputCFIndex Length = ", 18);
          (*(void (**)(void *))(*v54[15] + 40))(v54[15]);
          uint64_t v62 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
          uint64_t v63 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v54[16])
        {
          uint64_t v64 = sub_216129E78(&v131, (uint64_t)"\tNext syllable = ", 17);
          uint64_t v65 = (const char *)(*(uint64_t (**)(void *))(*v54[16] + 24))(v54[16]);
          size_t v66 = strlen(v65);
          uint64_t v67 = sub_216129E78(v64, (uint64_t)v65, v66);
          sub_216129E78(v67, (uint64_t)" rawInputCFIndex Length = ", 18);
          (*(void (**)(void *))(*v54[16] + 40))(v54[16]);
          unsigned int v68 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(void *)(*v68 - 24)));
          BOOL v69 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        v51 += 2;
        int v50 = v123;
      }
      uint64_t v71 = (const void **)v122[10];
      unint64_t v70 = (const void **)v122[11];
      __int16 v124 = v70;
      while (v71 != v70)
      {
        sub_21631D408(&__p, "Autocorrected Incomplete syllable: ", *v71);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v72 = &__p;
        }
        else {
          uint64_t v72 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v73 = __p.__r_.__value_.__l.__size_;
        }
        sub_216129E78(&v131, (uint64_t)v72, v73);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v74 = (void **)*v71;
        if ((*(float (**)(const void *))(*(void *)*v71 + 80))(*v71) < 1.0)
        {
          uint64_t v75 = sub_216129E78(&v131, (uint64_t)"\tprob = ", 8);
          *(void *)((char *)v75 + *(void *)(*v75 - 24) + 16) = 5;
          uint64_t v76 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(void *)(*v76 - 24)));
          unint64_t v77 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v74[15])
        {
          uint64_t v78 = sub_216129E78(&v131, (uint64_t)"\tPrevious syllable = ", 21);
          uint64_t v79 = (const char *)(*(uint64_t (**)(void *))(*v74[15] + 24))(v74[15]);
          size_t v80 = strlen(v79);
          uint64_t v81 = sub_216129E78(v78, (uint64_t)v79, v80);
          sub_216129E78(v81, (uint64_t)" rawInputCFIndex Length = ", 18);
          (*(void (**)(void *))(*v74[15] + 40))(v74[15]);
          uint64_t v82 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
          unint64_t v83 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v74[16])
        {
          uint64_t v84 = sub_216129E78(&v131, (uint64_t)"\tNext syllable = ", 17);
          int v85 = (const char *)(*(uint64_t (**)(void *))(*v74[16] + 24))(v74[16]);
          size_t v86 = strlen(v85);
          CFIndex v87 = sub_216129E78(v84, (uint64_t)v85, v86);
          sub_216129E78(v87, (uint64_t)" rawInputCFIndex Length = ", 18);
          (*(void (**)(void *))(*v74[16] + 40))(v74[16]);
          uint64_t v88 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(void *)(*v88 - 24)));
          uint64_t v89 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        v71 += 2;
        unint64_t v70 = v124;
      }
      uint64_t v90 = (const void **)v122[13];
      uint64_t v91 = (const void **)v122[14];
      while (v90 != v91)
      {
        if ((*(unsigned int (**)(void))(*(void *)*v90 + 64))() == 7)
        {
          sub_216129E78(&v131, (uint64_t)"Synthetic syllable: mixed, CFIndex length = ", 36);
          (*(void (**)(void))(*(void *)*v90 + 32))();
          int v92 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(*v92 - 24)));
          unint64_t v93 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        else
        {
          sub_21631D408(&__p, "Synthetic syllable: ", *v90);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v94 = &__p;
          }
          else {
            uint64_t v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v95 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v95 = __p.__r_.__value_.__l.__size_;
          }
          sub_216129E78(&v131, (uint64_t)v94, v95);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v90 += 2;
      }
      if ((*(_DWORD *)(*v120 + 168) - 1) >= 2)
      {
        sub_216129E78(&v131, (uint64_t)"Start column indexes: ", 22);
        int v96 = v126.__locale_;
        if ((void **)v126.__locale_ != &v127)
        {
          do
          {
            unsigned __int16 v97 = (void *)std::ostream::operator<<();
            sub_216129E78(v97, (uint64_t)", ", 2);
            unsigned int v98 = (std::locale::__imp *)*((void *)v96 + 1);
            if (v98)
            {
              do
              {
                BOOL v99 = (std::locale::__imp **)v98;
                unsigned int v98 = *(std::locale::__imp **)v98;
              }
              while (v98);
            }
            else
            {
              do
              {
                BOOL v99 = (std::locale::__imp **)*((void *)v96 + 2);
                BOOL v100 = *v99 == v96;
                int v96 = (std::locale::__imp *)v99;
              }
              while (!v100);
            }
            int v96 = (std::locale::__imp *)v99;
          }
          while (v99 != (std::locale::__imp **)&v127);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(void *)(v131 - 24)));
        unint64_t v101 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
      }
      ++v121;
      sub_21612A250((uint64_t)&v126, v127);
      __int16 v25 = v120 + 1;
    }
    while (v120 + 1 != v119);
  }
  unsigned __int8 v102 = sub_216129E78(&v131, (uint64_t)"First syllables: ", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
  uint64_t v103 = std::locale::use_facet(&v126, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v104 = *(void **)(a2 + 560);
  for (k = *(void **)(a2 + 568); v104 != k; ++v104)
  {
    CFStringRef v106 = (const __CFString *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v104 + 16))(*v104, 1);
    sub_2161E2FFC(v106, &v126);
    uint64_t v107 = v126.__locale_;
    size_t v108 = strlen((const char *)v126.__locale_);
    unint64_t v109 = sub_216129E78(&v131, (uint64_t)v126.__locale_, v108);
    sub_216129E78(v109, (uint64_t)", ", 2);
    CFRelease(v106);
    if (v107) {
      MEMORY[0x2166CA7C0](v107, 0x1000C8077774924);
    }
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(void *)(v131 - 24)));
  uint64_t v110 = std::locale::use_facet(&v126, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v110->__vftable[2].~facet_0)(v110, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v111 = sub_216129E78(&v131, (uint64_t)"First syllable end column indexes: ", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v111 + *(void *)(*v111 - 24)));
  uint64_t v112 = std::locale::use_facet(&v126, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v113 = *(void *)(a2 + 584);
  for (uint64_t m = *(void *)(a2 + 592); v113 != m; v113 += 2)
  {
    unint64_t v115 = (void *)std::ostream::operator<<();
    sub_216129E78(v115, (uint64_t)", ", 2);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(void *)(v131 - 24)));
  uint64_t v116 = std::locale::use_facet(&v126, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  sub_216178BC0((uint64_t)v132, a1);
  if (__s) {
    MEMORY[0x2166CA7C0](__s, 0x1000C8077774924);
  }
  v130[0] = *MEMORY[0x263F8C2B8];
  uint64_t v117 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v130 + *(void *)(v130[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v131 = v117;
  v132[0] = MEMORY[0x263F8C318] + 16;
  if (v133 < 0) {
    operator delete((void *)v132[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166CA750](&v134);
}

void sub_216317104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::locale a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  a30 = *MEMORY[0x263F8C2B8];
  uint64_t v50 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a30 + *(void *)(a30 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a32 = v50;
  a33 = MEMORY[0x263F8C318] + 16;
  if (a46 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](&a49);
  _Unwind_Resume(a1);
}

BOOL sub_21631738C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *(unsigned __int16 *)(a3 + 2);
  if (v4 >= 0x9C2) {
    sub_21613F340("bitset test argument out of range");
  }
  uint64_t v5 = a1 + 80;
  uint64_t v6 = *(void *)(a1 + 80 + ((v4 >> 3) & 0x1FF8)) & (1 << v4);
  if (!v6)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 40) - 3;
    if (v10 > 2) {
      int v11 = 0;
    }
    else {
      int v11 = dword_2163963FC[v10];
    }
    uint64_t v12 = (char *)operator new(0x88uLL);
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *(void *)uint64_t v12 = &unk_26C6C9690;
    *((void *)v12 + 3) = &unk_26C6C5938;
    *((void *)v12 + 4) = a3;
    v12[40] = 0;
    *((_DWORD *)v12 + 11) = v11;
    v12[48] = a4;
    *((_DWORD *)v12 + 13) = 1065353216;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *((_DWORD *)v12 + 22) = 1065353216;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_DWORD *)v12 + 32) = 1065353216;
    *(void *)&long long v17 = v12 + 24;
    *((void *)&v17 + 1) = v12;
    int v13 = off_26C6C5998((uint64_t)(v12 + 24));
    uint64_t v14 = 32;
    if (v13) {
      uint64_t v14 = 8;
    }
    sub_21621E244((uint64_t *)(a2 + v14), &v17);
    if (*((void *)&v17 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v17 + 1));
    }
    unint64_t v15 = *(unsigned __int16 *)(a3 + 2);
    if (v15 >= 0x9C2) {
      sub_21613F340("bitset set argument out of range");
    }
    *(void *)(v5 + ((v15 >> 3) & 0x1FF8)) |= 1 << v15;
  }
  return v6 == 0;
}

void sub_216317520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216317538(uint64_t result, unint64_t a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2 + 1 >= a2)
  {
    uint64_t v3 = *(void *)(result + 32);
    if (v2 + 1 == a2)
    {
      uint64_t v4 = *(void *)(v3 + 8);
    }
    else
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (*(void *)(*(void *)(v4 + 8 * (v2 - a2)) + 16) == *(void *)(*(void *)(v4 + 8 * (v2 - a2)) + 8)) {
        return result;
      }
    }
    return sub_21621E01C(*(void *)(v4 + 8 * v2), a2);
  }
  return result;
}

void sub_21631757C(uint64_t a1, void *a2, uint64_t a3, int a4, int a5)
{
  if (a2 && (*(_DWORD *)(a1 + 552) & 0x8000) != 0)
  {
    BOOL v9 = *(unsigned char *)(a1 + 556) != 0;
    goto LABEL_5;
  }
  BOOL v9 = 1;
  BOOL v10 = 1;
  if (a2) {
LABEL_5:
  }
    BOOL v10 = a2[2] != a2[1] || a2[8] != a2[7];
  int v11 = sub_21632279C(*(void *)(a1 + 32), ***(unsigned __int16 ****)(a1 + 32), a4);
  if (!v11) {
    return;
  }
  if (v10) {
    goto LABEL_15;
  }
  if (a2[14] == a2[13])
  {
    int v12 = 0;
    char v13 = 0;
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 40) != 1)
  {
LABEL_15:
    char v13 = 0;
    int v12 = 1;
  }
  else
  {
    int v12 = v11[4] & 1;
    if (v11[4]) {
      char v13 = 7;
    }
    else {
      char v13 = 0;
    }
  }
LABEL_17:
  if ((v9 & (v12 | a5)) == 1)
  {
    sub_21631738C(a1, *(void *)(*(void *)(a1 + 8) + 8 * a3), (uint64_t)v11, v13);
    if (a5)
    {
      if (a3 && !*(_DWORD *)(a1 + 40))
      {
        uint64_t v14 = a3 - 1;
        uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 8 * v14);
        size_t v16 = *(void ***)(v15 + 32);
        long long v17 = *(void ***)(v15 + 40);
        while (v16 != v17)
        {
          if (sub_2163203FC(*v16))
          {
            uint64_t v19 = a1 + 80;
            int v20 = 0;
            sub_21631EA68((uint64_t)&v19);
            uint64_t v18 = *(void *)(*(void *)(a1 + 8) + 8 * v14);
            sub_216318BFC(a1, v18, 1);
            return;
          }
          v16 += 2;
        }
      }
    }
  }
}

void sub_216317710(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v144 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    uint64_t v5 = a1;
    uint64_t v6 = 0;
    unint64_t v7 = v4 >> 4;
    int v128 = *(_DWORD *)(a1 + 40);
    uint64_t v127 = (uint64_t *)(a1 + 400);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    unint64_t v123 = v7;
    while (1)
    {
      uint64_t v125 = v6;
      uint64_t v8 = *a2 + 16 * v6;
      __int16 v130 = (*(uint64_t (**)(void))(**(void **)v8 + 40))();
      uint64_t v132 = *(void *)(*(void *)v8 + 8);
      (*(void (**)(void))(**(void **)v8 + 72))();
      char v9 = *(unsigned char *)(v132 + 8);
      if ((v9 & 8) != 0) {
        break;
      }
      if (*(_DWORD *)(v5 + 40) == 2)
      {
        int v10 = *(unsigned __int16 *)(v132 + 2);
        int v11 = 1;
        if (v10 == 3 || v10 == 54 || v10 == 76) {
          goto LABEL_15;
        }
      }
      if ((*(unsigned char *)(v132 + 8) & 0x10) != 0)
      {
        int v11 = 0;
        goto LABEL_15;
      }
LABEL_11:
      uint64_t v6 = v125 + 1;
      if (v125 + 1 == v123) {
        return;
      }
    }
    int v11 = 1;
LABEL_15:
    unint64_t v12 = *(unsigned __int16 *)(v132 + 2);
    v143[0] = *(_WORD *)(v132 + 2);
    int8x8_t v13 = *(int8x8_t *)(v5 + 408);
    if (v13)
    {
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        unint64_t v15 = v12;
        if (*(void *)&v13 <= v12) {
          unint64_t v15 = v12 % *(void *)&v13;
        }
      }
      else
      {
        unint64_t v15 = (v13.i32[0] - 1) & v12;
      }
      size_t v16 = *(void **)(*v127 + 8 * v15);
      if (v16)
      {
        long long v17 = (void *)*v16;
        if (*v16)
        {
          do
          {
            unint64_t v18 = v17[1];
            if (v18 == v12)
            {
              if (*((unsigned __int16 *)v17 + 8) == v12)
              {
                uint64_t v121 = a3;
                goto LABEL_219;
              }
            }
            else
            {
              if (v14.u32[0] > 1uLL)
              {
                if (v18 >= *(void *)&v13) {
                  v18 %= *(void *)&v13;
                }
              }
              else
              {
                v18 &= *(void *)&v13 - 1;
              }
              if (v18 != v15) {
                break;
              }
            }
            long long v17 = (void *)*v17;
          }
          while (v17);
        }
      }
    }
    std::string __p = 0;
    unint64_t v141 = 0;
    uint64_t v142 = 0;
    uint64_t v19 = &(&off_2642710F0)[2 * v12];
    unsigned __int16 v126 = v12;
    if (v128 != 5) {
      uint64_t v19 = &(&off_26426EF10)[2 * v12];
    }
    __s1 = *v19;
    size_t v134 = strlen(*v19);
    int v20 = *(const char ***)(v5 + 440);
    unint64_t v21 = *(const char ***)(v5 + 448);
    if (v20 == v21) {
      goto LABEL_195;
    }
    uint64_t v139 = 0;
    uint64_t v129 = 0;
    unint64_t v22 = v134;
    uint64_t v136 = &__s1[v134];
    while (1)
    {
      unint64_t v23 = *v20;
      __int16 v24 = v20[1];
      size_t v25 = strlen(v24);
      size_t v26 = strlen(*v20);
      if (v22 < v25) {
        goto LABEL_68;
      }
      size_t v27 = v26;
      if (v22 >= v26) {
        break;
      }
LABEL_37:
      if (v11 && !memcmp(__s1, v24, v25))
      {
        uint64_t v29 = (const char **)&v143[12 * v129 + 25];
        *uint64_t v29 = v23;
        v29[1] = (const char *)v27;
        ++v129;
        v29[2] = (const char *)v25;
        if ((v9 & 0x10) == 0) {
          goto LABEL_68;
        }
      }
      else if ((v9 & 0x10) == 0)
      {
        goto LABEL_68;
      }
      if (!memcmp(&v136[-v25], v24, v25))
      {
        if (v128 == 5)
        {
          if (v27 < 3) {
            goto LABEL_68;
          }
        }
        else if (v27 == 3 && v22 >= 4)
        {
          int v31 = __s1[v134 - 3];
          if (v31 == 105 || v31 == 117) {
            goto LABEL_68;
          }
        }
        int v32 = (const char **)&v143[12 * v139 + 1];
        *int v32 = v23;
        v32[1] = (const char *)v27;
        ++v139;
        v32[2] = (const char *)v25;
      }
LABEL_68:
      v20 += 2;
      if (v20 == v21)
      {
        uint64_t v137 = ***(unsigned __int16 ****)(v5 + 32);
        if (v129)
        {
          unint64_t v35 = 0;
          uint64_t v36 = 0;
          uint64_t v37 = __s1;
          while (1)
          {
            uint64_t v131 = v36;
            char v38 = (uint64_t *)&v143[12 * v36 + 25];
            unint64_t v39 = v38[2];
            uint64_t v40 = *(void *)(v5 + 32);
            int v41 = v137;
            if (v137)
            {
              unint64_t v42 = v38[1];
              int v41 = v137;
              if (v42)
              {
                unint64_t v43 = 0;
                uint64_t v44 = *v38;
                int v41 = v137;
                do
                {
                  int v41 = sub_21632279C(v40, v41, *(char *)(v44 + v43++));
                  if (v41) {
                    BOOL v45 = v43 >= v42;
                  }
                  else {
                    BOOL v45 = 1;
                  }
                }
                while (!v45);
              }
            }
            if (v41)
            {
              size_t v47 = v134 - v39;
              BOOL v46 = v134 == v39;
              if (v134 >= v39)
              {
                __int16 v48 = &v37[v39];
                uint64_t v49 = v41;
                if (v46) {
                  goto LABEL_92;
                }
                size_t v50 = 0;
                uint64_t v49 = v41;
                do
                {
                  unsigned int v51 = sub_21632279C(v40, v49, v48[v50]);
                  uint64_t v49 = v51;
                  ++v50;
                  if (v51) {
                    BOOL v52 = v50 >= v47;
                  }
                  else {
                    BOOL v52 = 1;
                  }
                }
                while (!v52);
                if (v51)
                {
LABEL_92:
                  if (!a4 || (v49[4] & 2) != 0)
                  {
                    if (v35 >= (unsigned __int16 **)v142)
                    {
                      uint64_t v53 = ((char *)v35 - (unsigned char *)__p) >> 3;
                      if ((unint64_t)(v53 + 1) >> 61) {
                        sub_21610CB04();
                      }
                      unint64_t v54 = (v142 - (unsigned char *)__p) >> 2;
                      if (v54 <= v53 + 1) {
                        unint64_t v54 = v53 + 1;
                      }
                      if ((unint64_t)(v142 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v55 = v54;
                      }
                      if (v55) {
                        uint64_t v56 = (char *)sub_2160FFAA8((uint64_t)&v142, v55);
                      }
                      else {
                        uint64_t v56 = 0;
                      }
                      uint64_t v57 = (unsigned __int16 **)&v56[8 * v53];
                      *uint64_t v57 = v49;
                      unint64_t v35 = v57 + 1;
                      char v59 = (char *)__p;
                      uint64_t v58 = (char *)v141;
                      if (v141 != __p)
                      {
                        do
                        {
                          size_t v60 = (unsigned __int16 *)*((void *)v58 - 1);
                          v58 -= 8;
                          *--uint64_t v57 = v60;
                        }
                        while (v58 != v59);
                        uint64_t v58 = (char *)__p;
                      }
                      std::string __p = v57;
                      unint64_t v141 = v35;
                      uint64_t v142 = &v56[8 * v55];
                      if (v58) {
                        operator delete(v58);
                      }
                    }
                    else
                    {
                      *v35++ = v49;
                    }
                    unint64_t v141 = v35;
                  }
                }
                if (v139) {
                  break;
                }
              }
            }
LABEL_152:
            uint64_t v36 = v131 + 1;
            if (v131 + 1 == v129) {
              goto LABEL_155;
            }
          }
          uint64_t v61 = 0;
          while (2)
          {
            uint64_t v62 = (uint64_t *)&v143[12 * v61 + 1];
            unint64_t v63 = v62[2];
            size_t v64 = v47 - v63;
            if (v47 < v63)
            {
              size_t v64 = v47;
              goto LABEL_134;
            }
            uint64_t v65 = *(void *)(v5 + 32);
            size_t v66 = v41;
            if (v47 != v63)
            {
              size_t v67 = 0;
              size_t v66 = v41;
              do
              {
                size_t v66 = sub_21632279C(v65, v66, v48[v67++]);
                if (v66) {
                  BOOL v68 = v67 >= v64;
                }
                else {
                  BOOL v68 = 1;
                }
              }
              while (!v68);
            }
            if (!v66) {
              goto LABEL_134;
            }
            unint64_t v69 = *(void *)&v143[12 * v61 + 5];
            if (!v69) {
              goto LABEL_130;
            }
            unint64_t v70 = 0;
            uint64_t v71 = *v62;
            do
            {
              uint64_t v72 = sub_21632279C(v65, v66, *(char *)(v71 + v70));
              size_t v66 = v72;
              ++v70;
              if (v72) {
                BOOL v73 = v70 >= v69;
              }
              else {
                BOOL v73 = 1;
              }
            }
            while (!v73);
            uint64_t v5 = a1;
            if (v72)
            {
LABEL_130:
              uint64_t v37 = __s1;
              if (!a4 || (v66[4] & 2) != 0)
              {
                if (v35 >= (unsigned __int16 **)v142)
                {
                  uint64_t v74 = ((char *)v35 - (unsigned char *)__p) >> 3;
                  if ((unint64_t)(v74 + 1) >> 61) {
                    sub_21610CB04();
                  }
                  unint64_t v75 = (v142 - (unsigned char *)__p) >> 2;
                  if (v75 <= v74 + 1) {
                    unint64_t v75 = v74 + 1;
                  }
                  if ((unint64_t)(v142 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v76 = v75;
                  }
                  if (v76) {
                    unint64_t v77 = (char *)sub_2160FFAA8((uint64_t)&v142, v76);
                  }
                  else {
                    unint64_t v77 = 0;
                  }
                  uint64_t v78 = (unsigned __int16 **)&v77[8 * v74];
                  void *v78 = v66;
                  unint64_t v35 = v78 + 1;
                  size_t v80 = (char *)__p;
                  uint64_t v79 = (char *)v141;
                  if (v141 != __p)
                  {
                    do
                    {
                      uint64_t v81 = (unsigned __int16 *)*((void *)v79 - 1);
                      v79 -= 8;
                      *--uint64_t v78 = v81;
                    }
                    while (v79 != v80);
                    uint64_t v79 = (char *)__p;
                  }
                  std::string __p = v78;
                  unint64_t v141 = v35;
                  uint64_t v142 = &v77[8 * v76];
                  if (v79) {
                    operator delete(v79);
                  }
                }
                else
                {
                  *v35++ = v66;
                }
                unint64_t v141 = v35;
              }
            }
            else
            {
LABEL_134:
              uint64_t v37 = __s1;
            }
            ++v61;
            size_t v47 = v64;
            if (v61 == v139) {
              goto LABEL_152;
            }
            continue;
          }
        }
        unint64_t v35 = 0;
LABEL_155:
        if (v139)
        {
          for (uint64_t i = 0; i != v139; ++i)
          {
            unint64_t v83 = (uint64_t *)&v143[12 * i + 1];
            unint64_t v84 = v83[2];
            uint64_t v85 = *(void *)(v5 + 32);
            size_t v86 = v137;
            if (v137)
            {
              size_t v86 = v137;
              if (v134 != v84)
              {
                size_t v87 = 0;
                size_t v86 = v137;
                do
                {
                  size_t v86 = sub_21632279C(v85, v86, __s1[v87++]);
                  if (v86) {
                    BOOL v88 = v87 >= v134 - v84;
                  }
                  else {
                    BOOL v88 = 1;
                  }
                }
                while (!v88);
              }
            }
            if (v86 && v134 >= v84)
            {
              unint64_t v89 = *(void *)&v143[12 * i + 5];
              if (!v89) {
                goto LABEL_175;
              }
              unint64_t v90 = 0;
              uint64_t v91 = *v83;
              do
              {
                size_t v86 = sub_21632279C(v85, v86, *(char *)(v91 + v90++));
                if (v86) {
                  BOOL v92 = v90 >= v89;
                }
                else {
                  BOOL v92 = 1;
                }
              }
              while (!v92);
            }
            if (v86)
            {
LABEL_175:
              if (!a4 || (v86[4] & 2) != 0)
              {
                if (v35 >= (unsigned __int16 **)v142)
                {
                  uint64_t v93 = ((char *)v35 - (unsigned char *)__p) >> 3;
                  if ((unint64_t)(v93 + 1) >> 61) {
                    sub_21610CB04();
                  }
                  unint64_t v94 = (v142 - (unsigned char *)__p) >> 2;
                  if (v94 <= v93 + 1) {
                    unint64_t v94 = v93 + 1;
                  }
                  if ((unint64_t)(v142 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v95 = v94;
                  }
                  if (v95) {
                    int v96 = (char *)sub_2160FFAA8((uint64_t)&v142, v95);
                  }
                  else {
                    int v96 = 0;
                  }
                  unsigned __int16 v97 = (unsigned __int16 **)&v96[8 * v93];
                  void *v97 = v86;
                  unint64_t v35 = v97 + 1;
                  BOOL v99 = (char *)__p;
                  unsigned int v98 = (char *)v141;
                  if (v141 != __p)
                  {
                    do
                    {
                      BOOL v100 = (unsigned __int16 *)*((void *)v98 - 1);
                      v98 -= 8;
                      *--unsigned __int16 v97 = v100;
                    }
                    while (v98 != v99);
                    unsigned int v98 = (char *)__p;
                  }
                  std::string __p = v97;
                  unint64_t v141 = v35;
                  uint64_t v142 = &v96[8 * v95];
                  if (v98) {
                    operator delete(v98);
                  }
                }
                else
                {
                  *v35++ = v86;
                }
                unint64_t v141 = v35;
              }
            }
          }
        }
LABEL_195:
        unsigned __int16 v101 = v126;
        unsigned __int8 v102 = sub_21631F258(v127, v126, v143);
        uint64_t v121 = a3;
        uint64_t v103 = v102;
        uint64_t v104 = v102 + 3;
        if (v102 + 3 != &__p)
        {
          CFStringRef v106 = (char *)__p;
          uint64_t v105 = v141;
          size_t v107 = (char *)v141 - (unsigned char *)__p;
          unint64_t v108 = ((char *)v141 - (unsigned char *)__p) >> 3;
          uint64_t v109 = v102[5];
          uint64_t v110 = (char *)v102[3];
          if (v108 > (v109 - (uint64_t)v110) >> 3)
          {
            if (v110)
            {
              v102[4] = v110;
              operator delete(v110);
              uint64_t v109 = 0;
              void *v104 = 0;
              v104[1] = 0;
              v104[2] = 0;
            }
            if ((v107 & 0x8000000000000000) != 0) {
              goto LABEL_226;
            }
            uint64_t v111 = v109 >> 2;
            if (v109 >> 2 <= v108) {
              uint64_t v111 = v108;
            }
            unint64_t v112 = (unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v111;
            if (v112 >> 61) {
LABEL_226:
            }
              sub_21610CB04();
            unsigned __int16 v101 = v126;
            uint64_t v110 = (char *)sub_2160FFAA8((uint64_t)(v103 + 5), v112);
            v103[4] = v110;
            uint64_t v113 = (char **)(v103 + 4);
            *(v113 - 1) = v110;
            v113[1] = &v110[8 * v114];
            if (v105 == (unsigned __int16 **)v106) {
              goto LABEL_216;
            }
LABEL_214:
            unsigned int v118 = v110;
            uint64_t v117 = v106;
LABEL_215:
            memmove(v118, v117, v107);
            goto LABEL_216;
          }
          uint64_t v113 = (char **)(v102 + 4);
          unint64_t v115 = (unsigned char *)v102[4];
          unint64_t v116 = (v115 - v110) >> 3;
          if (v116 >= v108)
          {
            unsigned __int16 v101 = v126;
            if (v141 == __p) {
              goto LABEL_216;
            }
            goto LABEL_214;
          }
          unsigned __int16 v101 = v126;
          if (v115 != v110)
          {
            memmove((void *)v102[3], __p, v115 - v110);
            uint64_t v110 = *v113;
          }
          uint64_t v117 = &v106[8 * v116];
          size_t v107 = (char *)v105 - v117;
          if (v105 != (unsigned __int16 **)v117)
          {
            unsigned int v118 = v110;
            goto LABEL_215;
          }
LABEL_216:
          *uint64_t v113 = &v110[v107];
        }
        long long v17 = sub_21631F258(v127, v101, v143);
        uint64_t v5 = a1;
        if (__p)
        {
          unint64_t v141 = (unsigned __int16 **)__p;
          operator delete(__p);
        }
LABEL_219:
        int v119 = (uint64_t *)v17[3];
        uint64_t v120 = (uint64_t *)v17[4];
        while (v119 != v120)
          sub_216318E58(v5, v121, *v119++, *(_WORD *)(v132 + 2), v130);
        goto LABEL_11;
      }
    }
    if (v11 && !memcmp(__s1, v23, v26))
    {
      unint64_t v30 = (const char **)&v143[12 * v129 + 25];
      *unint64_t v30 = v24;
      v30[1] = (const char *)v25;
      ++v129;
      v30[2] = (const char *)v27;
      int v28 = 1;
      if ((v9 & 0x10) == 0) {
        goto LABEL_66;
      }
    }
    else
    {
      int v28 = 0;
      if ((v9 & 0x10) == 0) {
        goto LABEL_66;
      }
    }
    if (memcmp(&v136[-v27], v23, v27)) {
      goto LABEL_66;
    }
    if (v128 == 5)
    {
      if (v27 < 3) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    if (v27 != 3 || v134 < 5 || (int v33 = __s1[v134 - 4], v28 = 1, v33 != 105) && v33 != 117)
    {
LABEL_64:
      uint64_t v34 = (const char **)&v143[12 * v139 + 1];
      *uint64_t v34 = v24;
      v34[1] = (const char *)v25;
      ++v139;
      v34[2] = (const char *)v27;
LABEL_65:
      int v28 = 1;
    }
LABEL_66:
    if (v28)
    {
      unint64_t v22 = v134;
      if (v25 != v27) {
        goto LABEL_68;
      }
    }
    else
    {
      unint64_t v22 = v134;
    }
    goto LABEL_37;
  }
}

void sub_216318218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216318258(uint64_t a1, unint64_t a2, int a3, float a4)
{
  if ((int)a2 < 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 8 * (a2 - 1));
  }
  int v8 = *(_DWORD *)(a1 + 40);
  if ((v8 - 3) > 1)
  {
    char v9 = a3;
  }
  else
  {
    char v9 = 49;
    switch(a3)
    {
      case 711:
        char v9 = 51;
        break;
      case 712:
        goto LABEL_24;
      case 713:
        break;
      case 714:
        char v9 = 50;
        break;
      case 715:
        char v9 = 52;
        break;
      default:
        if (a3 == 729) {
          char v9 = 53;
        }
        else {
LABEL_24:
        }
          char v9 = a3 + 49;
        break;
    }
  }
  BOOL v10 = v8 == 4 || v7 == 0;
  int v11 = v9;
  if (!v10 && *(void *)(v7 + 16) == *(void *)(v7 + 8) && *(void *)(v7 + 64) == *(void *)(v7 + 56)) {
    goto LABEL_17;
  }
  unint64_t v12 = sub_21632279C(*(void *)(a1 + 32), ***(unsigned __int16 ****)(a1 + 32), v9);
  if (v12) {
    sub_216318434(a1, *(void *)(*(void *)(a1 + 8) + 8 * a2), 0, (uint64_t)v12, a4);
  }
  if (v7)
  {
LABEL_17:
    if ((*(_DWORD *)(v7 + 168) - 1) >= 2)
    {
      sub_216318684(a1, *(uint64_t **)(v7 + 8), *(uint64_t **)(v7 + 16), v11, a2, 1, a4);
      sub_216318684(a1, *(uint64_t **)(v7 + 32), *(uint64_t **)(v7 + 40), v11, a2, 1, a4);
      sub_216318684(a1, *(uint64_t **)(v7 + 56), *(uint64_t **)(v7 + 64), v11, a2, 1, a4);
      int8x8_t v13 = *(uint64_t **)(v7 + 80);
      uint8x8_t v14 = *(uint64_t **)(v7 + 88);
      sub_216318684(a1, v13, v14, v11, a2, 1, a4);
    }
  }
}

void sub_216318434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  unint64_t v5 = *(unsigned __int16 *)(a4 + 2);
  if (v5 >= 0x9C2) {
    sub_21613F340("bitset test argument out of range");
  }
  uint64_t v6 = a1 + 80;
  if (((*(void *)(a1 + 80 + ((v5 >> 3) & 0x1FF8)) >> v5) & 1) == 0)
  {
    float v7 = a5;
    uint64_t v9 = a3;
    unsigned int v11 = *(_DWORD *)(a1 + 40) - 3;
    if (v11 > 2)
    {
      int v12 = 0;
      if (a3) {
        goto LABEL_5;
      }
    }
    else
    {
      int v12 = dword_2163963FC[v11];
      if (a3)
      {
LABEL_5:
        if ((*(float (**)(uint64_t))(*(void *)a3 + 80))(a3) < a5) {
          float v7 = (*(float (**)(uint64_t))(*(void *)v9 + 80))(v9);
        }
        LOWORD(v9) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 1;
        goto LABEL_10;
      }
    }
    LODWORD(v9) = *(unsigned __int8 *)(a4 + 8) >> 5;
LABEL_10:
    int8x8_t v13 = (char *)operator new(0xA8uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)int8x8_t v13 = &unk_26C6C9818;
    v13[40] = 0;
    *((_DWORD *)v13 + 11) = v12;
    v13[48] = 0;
    *((float *)v13 + 13) = v7;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((_DWORD *)v13 + 22) = 1065353216;
    *((_OWORD *)v13 + 6) = 0u;
    *((_OWORD *)v13 + 7) = 0u;
    *((_DWORD *)v13 + 32) = 1065353216;
    *((void *)v13 + 3) = &unk_26C6C6658;
    *((void *)v13 + 4) = a4;
    *((_WORD *)v13 + 68) = v9;
    *((void *)v13 + 18) = 0;
    *((void *)v13 + 19) = 0;
    v13[160] = 1;
    *(void *)&long long v17 = v13 + 24;
    *((void *)&v17 + 1) = v13;
    int v14 = off_26C6C66B8((uint64_t)(v13 + 24));
    uint64_t v15 = 80;
    if (v14) {
      uint64_t v15 = 56;
    }
    sub_21621E244((uint64_t *)(a2 + v15), &v17);
    if (*((void *)&v17 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v17 + 1));
    }
    unint64_t v16 = *(unsigned __int16 *)(a4 + 2);
    if (v16 >= 0x9C2) {
      sub_21613F340("bitset set argument out of range");
    }
    *(void *)(v6 + ((v16 >> 3) & 0x1FF8)) |= 1 << v16;
  }
}

void sub_21631866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216318684(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, unint64_t a5, int a6, float a7)
{
  if (a2 != a3)
  {
    unsigned int v11 = a2;
    uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 8 * a5);
    unint64_t v48 = a5 - 2;
    unint64_t v49 = a5 - 1;
    size_t v47 = (uint64_t *)(v13 + 32);
    unsigned __int16 v50 = a4 + 12495;
    uint64_t v51 = a4 - 49;
    do
    {
      if (*(unsigned char *)(*v11 + 16) || (*(unsigned int (**)(uint64_t))(*(void *)*v11 + 64))(*v11) == 2) {
        return;
      }
      int v14 = *(_DWORD *)(a1 + 40);
      if (v14)
      {
        if (v14 != 1)
        {
          BOOL v15 = 0;
          goto LABEL_20;
        }
        BOOL v15 = !sub_216318DDC(a1, 0, (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
      }
      else
      {
        BOOL v15 = 1;
      }
      if (a5 >= 2 && v15)
      {
        uint64_t v16 = *v11;
        if ((*(unsigned int (**)(uint64_t))(*(void *)*v11 + 64))(*v11) == 1
          && *(_WORD *)(*(void *)(v16 + 8) + 2) == 20)
        {
          uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 8 * v49);
          unint64_t v18 = *(void ***)(v17 + 32);
          uint64_t v19 = *(void ***)(v17 + 40);
          if (v18 != v19)
          {
            while (!sub_2163203FC(*v18))
            {
              v18 += 2;
              BOOL v15 = 1;
              if (v18 == v19) {
                goto LABEL_20;
              }
            }
            if (*(void *)(*(void *)(*(void *)(a1 + 8) + 8 * v48) + 112) == *(void *)(*(void *)(*(void *)(a1 + 8) + 8 * v48)
                                                                                              + 104))
              goto LABEL_57;
          }
        }
        BOOL v15 = 1;
      }
LABEL_20:
      int v20 = (uint64_t *)*v11;
      uint64_t v21 = *(void *)(*v11 + 8);
      unint64_t v22 = sub_21632279C(*(void *)(a1 + 32), (unsigned __int16 *)v21, a4);
      if (v22)
      {
        uint64_t v23 = (uint64_t)v22;
        uint64_t v24 = *v20;
        if (a6)
        {
          if ((*(unsigned int (**)(uint64_t *))(v24 + 40))(v20) >= a5
            || (unsigned int v25 = (*(uint64_t (**)(void))(*(void *)*v11 + 40))(),
                unint64_t v26 = (*(unsigned int (**)(void))(*(void *)*v11 + 40))() + 1,
                size_t v27 = *(void **)(*(void *)(a1 + 8) + 8 * a5),
                LOWORD(v53[0]) = 0,
                sub_21621EBD8(v27, v53, 1),
                sub_21621EBD8(v27, v53, 0),
                v26 >= LOWORD(v53[0]))
            || *(void *)(*(void *)(*(void *)(a1 + 8) + 8 * (~(unint64_t)v25 + a5)) + 16) != *(void *)(*(void *)(*(void *)(a1 + 8) + 8 * (~(unint64_t)v25 + a5)) + 8))
          {
            sub_216318434(a1, v13, *v11, v23, a7);
          }
        }
        else
        {
          char v30 = (*(uint64_t (**)(uint64_t *))(v24 + 72))(v20);
          if ((v15 & sub_21631738C(a1, v13, v23, v30)) == 1)
          {
            int v31 = *(unsigned __int16 *)(v23 + 2);
            if (v31 == 4 || v31 == 77 || v31 == 55)
            {
              if (a5)
              {
                if (a5 == 1
                  || (char v38 = *(void **)(*(void *)(a1 + 8) + 8 * v48), v38[2] == v38[1]) && v38[5] != v38[4])
                {
                  sub_216318BFC(a1, v13, 0);
                }
              }
            }
          }
        }
      }
      else if (*(_DWORD *)(a1 + 40) == 4 && a5 && (*(unsigned char *)(v21 + 8) & 1) != 0)
      {
        unsigned __int16 v28 = v50;
        if (v51 <= 4) {
          unsigned __int16 v28 = word_2163963F0[v51];
        }
        uint64_t v29 = 0;
        while ((unsigned __int16)word_216381F32[v29] != v28)
        {
          if (++v29 == 5) {
            goto LABEL_57;
          }
        }
        if (v29 != -1 && sub_2163208A0((uint64_t)v20, v28) && (a6 & 1) == 0)
        {
          uint64_t v32 = *(void *)(*v11 + 8);
          int v33 = (char *)operator new(0x90uLL);
          uint64_t v34 = v33;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          *(void *)int v33 = &unk_26C6C9850;
          unint64_t v35 = v33 + 24;
          v33[40] = 0;
          *((_DWORD *)v33 + 11) = 1;
          v33[48] = 0;
          *((_DWORD *)v33 + 13) = 1065353216;
          *(_OWORD *)(v33 + 72) = 0u;
          *(_OWORD *)(v33 + 56) = 0u;
          *((_DWORD *)v33 + 22) = 1065353216;
          *((_OWORD *)v33 + 6) = 0u;
          *((_OWORD *)v33 + 7) = 0u;
          *((_DWORD *)v33 + 32) = 1065353216;
          *((void *)v33 + 3) = &unk_26C6C6A98;
          *((void *)v33 + 4) = v32;
          *((_WORD *)v33 + 68) = v28;
          uint64_t v37 = *(void **)(v13 + 40);
          unint64_t v36 = *(void *)(v13 + 48);
          if ((unint64_t)v37 >= v36)
          {
            uint64_t v39 = ((uint64_t)v37 - *v47) >> 4;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 60) {
              sub_21610CB04();
            }
            uint64_t v41 = v36 - *v47;
            if (v41 >> 3 > v40) {
              unint64_t v40 = v41 >> 3;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            v53[4] = (void *)(v13 + 48);
            unint64_t v43 = (char *)sub_21612AA90(v13 + 48, v42);
            uint64_t v44 = &v43[16 * v39];
            v53[0] = v43;
            v53[1] = v44;
            v53[3] = &v43[16 * v45];
            *(void *)uint64_t v44 = v35;
            *((void *)v44 + 1) = v34;
            v53[2] = v44 + 16;
            sub_21621EF7C(v47, v53);
            uint64_t v46 = *(void *)(v13 + 40);
            sub_21621F104(v53);
            *(void *)(v13 + 4sub_21617DB94((const void **)&__p, 0) = v46;
          }
          else
          {
            *uint64_t v37 = v35;
            v37[1] = v33;
            *(void *)(v13 + 4sub_21617DB94((const void **)&__p, 0) = v37 + 2;
          }
        }
      }
LABEL_57:
      v11 += 2;
    }
    while (v11 != a3);
  }
}

void sub_216318BD4(_Unwind_Exception *a1)
{
  sub_2161121B0(v1);
  _Unwind_Resume(a1);
}

void sub_216318BFC(uint64_t a1, uint64_t a2, int a3)
{
  if (sub_21621EB50(a2)) {
    return;
  }
  uint64_t v6 = *(unsigned __int16 ****)(a1 + 32);
  float v7 = **v6;
  if (v7)
  {
    int v8 = sub_21632279C((uint64_t)v6, v7, 104);
    if (!a3) {
      goto LABEL_12;
    }
LABEL_6:
    uint64_t v9 = *(void *)(a2 + 40);
    while (v9 != *(void *)(a2 + 32))
    {
      uint64_t v10 = *(void *)(v9 - 16);
      v9 -= 16;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 64))(v10) != 2) {
        break;
      }
      uint64_t v11 = *(void *)(a2 + 40);
      int v12 = *(std::__shared_weak_count **)(v11 - 8);
      if (v12) {
        sub_2161121B0(v12);
      }
      *(void *)(a2 + 4sub_21617DB94((const void **)&__p, 0) = v11 - 16;
    }
    goto LABEL_12;
  }
  int v8 = 0;
  if (a3) {
    goto LABEL_6;
  }
LABEL_12:
  unsigned int v13 = *(_DWORD *)(a1 + 40) - 3;
  if (v13 > 2) {
    int v14 = 0;
  }
  else {
    int v14 = dword_2163963FC[v13];
  }
  BOOL v15 = (char *)operator new(0x88uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)BOOL v15 = &unk_26C6C9690;
  *((void *)v15 + 3) = &unk_26C6C5938;
  *((void *)v15 + 4) = v8;
  v15[40] = 0;
  *((_DWORD *)v15 + 11) = v14;
  v15[48] = 0;
  *((_DWORD *)v15 + 13) = 1065353216;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((_DWORD *)v15 + 22) = 1065353216;
  *((_OWORD *)v15 + 6) = 0u;
  *((_OWORD *)v15 + 7) = 0u;
  *((_DWORD *)v15 + 32) = 1065353216;
  *(void *)&long long v17 = v15 + 24;
  *((void *)&v17 + 1) = v15;
  if (off_26C6C5998((uint64_t)(v15 + 24))) {
    uint64_t v16 = (uint64_t *)(a2 + 8);
  }
  else {
    uint64_t v16 = (uint64_t *)(a2 + 32);
  }
  sub_21621E244(v16, &v17);
  if (*((void *)&v17 + 1)) {
    sub_2161121B0(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (a3) {
    sub_216317710(a1, (void *)(a2 + 32), a2, 0);
  }
}

void sub_216318DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216318DDC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 + a3;
  if (a2 >= a2 + a3)
  {
    return 0;
  }
  else
  {
    uint64_t v4 = 255;
    if (a2 > 0xFF) {
      uint64_t v4 = a2;
    }
    BOOL v5 = 1;
    do
    {
      if (v4 == a2) {
        sub_21613F340("bitset test argument out of range");
      }
      if ((*(void *)(a1 + 504 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
        break;
      }
      BOOL v5 = ++a2 < v3;
      --a3;
    }
    while (a3);
  }
  return v5;
}

void sub_216318E58(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, __int16 a5)
{
  unint64_t v5 = *(unsigned __int16 *)(a3 + 2);
  if (v5 >= 0x9C2) {
    sub_21613F340("bitset test argument out of range");
  }
  uint64_t v6 = a1 + 80;
  if (((*(void *)(a1 + 80 + ((v5 >> 3) & 0x1FF8)) >> v5) & 1) == 0)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 40) - 3;
    if (v11 > 2) {
      int v12 = 0;
    }
    else {
      int v12 = dword_2163963FC[v11];
    }
    unsigned int v13 = (char *)operator new(0x90uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)unsigned int v13 = &unk_26C6C96C8;
    v13[40] = 0;
    *((_DWORD *)v13 + 11) = v12;
    v13[48] = 0;
    *((_DWORD *)v13 + 13) = 1058642330;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((_DWORD *)v13 + 22) = 1065353216;
    *((_OWORD *)v13 + 6) = 0u;
    *((_OWORD *)v13 + 7) = 0u;
    *((_DWORD *)v13 + 32) = 1065353216;
    *((void *)v13 + 3) = &unk_26C6C5E28;
    *((void *)v13 + 4) = a3;
    *((_WORD *)v13 + 68) = a4;
    *((_WORD *)v13 + 69) = a5;
    *(void *)&long long v17 = v13 + 24;
    *((void *)&v17 + 1) = v13;
    int v14 = off_26C6C5E88((uint64_t)(v13 + 24));
    uint64_t v15 = 32;
    if (v14) {
      uint64_t v15 = 8;
    }
    sub_21621E244((uint64_t *)(a2 + v15), &v17);
    if (*((void *)&v17 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v17 + 1));
    }
    unint64_t v16 = *(unsigned __int16 *)(a3 + 2);
    if (v16 >= 0x9C2) {
      sub_21613F340("bitset set argument out of range");
    }
    *(void *)(v6 + ((v16 >> 3) & 0x1FF8)) |= 1 << v16;
  }
}

void sub_216318FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216319008(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return v3 > (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2);
}

uint64_t sub_216319080(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  BOOL v6 = v4 == v5;
  uint64_t result = v4 > v5;
  if (v6)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      if (result)
      {
        int v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        uint64_t v9 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
        return strcmp(v8, v9) >> 31;
      }
    }
  }
  return result;
}

uint64_t *sub_2163191C4(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unsigned int v4 = a2;
    unsigned int v5 = result;
    BOOL v6 = result + 1;
    do
    {
      unsigned int v7 = *((unsigned __int16 *)v4 + 13);
      int v8 = (uint64_t *)v5[1];
      uint64_t v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      uint64_t v10 = v5[1];
      unsigned int v11 = v6;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          unsigned int v11 = v9;
        }
        while (v12);
      }
      if (*((unsigned __int16 *)v9 + 13) < v7)
      {
LABEL_9:
        if (v8) {
          unsigned int v13 = (uint64_t **)v9;
        }
        else {
          unsigned int v13 = (uint64_t **)v6;
        }
        if (v8) {
          int v14 = (uint64_t **)(v9 + 1);
        }
        else {
          int v14 = (uint64_t **)v6;
        }
        if (*v14) {
          goto LABEL_25;
        }
      }
      else
      {
        int v14 = (uint64_t **)v6;
        unsigned int v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              unsigned int v13 = (uint64_t **)v8;
              unsigned int v15 = *((unsigned __int16 *)v8 + 13);
              if (v15 <= v7) {
                break;
              }
              int v8 = *v13;
              int v14 = v13;
              if (!*v13) {
                goto LABEL_24;
              }
            }
            if (v15 >= v7) {
              goto LABEL_25;
            }
            int v8 = v13[1];
            if (!v8)
            {
              int v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      unint64_t v16 = (uint64_t *)operator new(0x20uLL);
      *((_WORD *)v16 + 13) = v7;
      uint64_t result = sub_21612A650((uint64_t **)v5, (uint64_t)v13, v14, v16);
LABEL_25:
      long long v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          unint64_t v18 = v17;
          long long v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unint64_t v18 = (void *)v4[2];
          BOOL v12 = *v18 == (void)v4;
          unsigned int v4 = v18;
        }
        while (!v12);
      }
      unsigned int v4 = v18;
    }
    while (v18 != a3);
  }
  return result;
}

__CFArray *sub_216319314(uint64_t a1)
{
  CFDataRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3, 0);
  unsigned int v3 = *(void **)(a1 + 560);
  unsigned int v4 = *(void **)(a1 + 568);
  while (v3 != v4)
  {
    unsigned int v5 = (void *)*v3;
    if ((*(unsigned int (**)(void))(*(void *)*v3 + 64))(*v3) != 2 && *(_WORD *)(v5[1] + 2) != 272)
    {
      BOOL v6 = (const void *)(*(uint64_t (**)(void *, void))(*v5 + 16))(v5, 0);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
    }
    ++v3;
  }
  return Mutable;
}

uint64_t sub_216319408(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) - v2;
  unint64_t v4 = a2 + 1;
  if (a2 + 1 >= v3 >> 3) {
    return 1;
  }
  uint64_t v5 = *(void *)(v2 + 8 * a2);
  if ((*(_DWORD *)(v5 + 168) - 1) < 2) {
    return 1;
  }
  unint64_t v6 = v3 >> 3;
  uint64_t v8 = *(void *)(v5 + 8);
  uint64_t v7 = *(void *)(v5 + 16);
  unint64_t v9 = a2 + 7;
  if (v6 < a2 + 7) {
    unint64_t v9 = v6;
  }
  if (v7 == v8)
  {
    while (v4 < v9)
    {
      uint64_t v21 = *(void *)(v2 + 8 * v4);
      if ((*(_DWORD *)(v21 + 168) - 1) < 2) {
        break;
      }
      if (!*(void *)(v21 + 152)) {
        return 0;
      }
      BOOL v22 = 0;
      ++v4;
      if (*(unsigned __int16 *)(*(void *)(v21 + 136) + 26) <= a2) {
        return v22;
      }
    }
    return 1;
  }
  if (v4 >= v9) {
    return 1;
  }
  unint64_t v11 = 0;
  unint64_t v12 = a2 + 1;
  do
  {
    uint64_t v13 = *(void *)(v2 + 8 * v12);
    if ((*(_DWORD *)(v13 + 168) - 1) < 2) {
      break;
    }
    if (*(void *)(v13 + 152)) {
      unint64_t v14 = *(unsigned __int16 *)(*(void *)(v13 + 136) + 26);
    }
    else {
      unint64_t v14 = 0;
    }
    if (v12 > v11 && v14 <= a2) {
      unint64_t v11 = v12;
    }
    ++v12;
  }
  while (v9 != v12);
  if ((uint64_t)v11 < 1) {
    return 1;
  }
  if (v6 >= v11 + 6) {
    unint64_t v6 = v11 + 6;
  }
  if (v11 >= v6)
  {
    unint64_t v17 = v11;
  }
  else
  {
    unint64_t v16 = v11;
    unint64_t v17 = v11;
    do
    {
      uint64_t v18 = *(void *)(v2 + 8 * v16);
      if ((*(_DWORD *)(v18 + 168) - 1) < 2) {
        break;
      }
      if (*(void *)(v18 + 152)) {
        unint64_t v19 = *(unsigned __int16 *)(*(void *)(v18 + 136) + 26);
      }
      else {
        unint64_t v19 = 0;
      }
      if (v16 > v17 && v19 <= v11) {
        unint64_t v17 = v16;
      }
      ++v16;
    }
    while (v6 != v16);
  }
  sub_21631F0B0((uint64_t *)&v38, *(void *)(v2 + 8 * v17) + 136);
  uint64_t v24 = v40;
  if (v40)
  {
    do
    {
      unsigned int v25 = v38;
      unint64_t v26 = *((unsigned __int16 *)v38 + 13);
      BOOL v22 = v4 == v26;
      if (v4 == v26) {
        break;
      }
      size_t v27 = (uint64_t *)v38[1];
      unsigned __int16 v28 = v38;
      if (v27)
      {
        do
        {
          uint64_t v29 = v27;
          size_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v29 = (uint64_t *)v28[2];
          BOOL v30 = *v29 == (void)v28;
          unsigned __int16 v28 = v29;
        }
        while (!v30);
      }
      char v38 = v29;
      uint64_t v40 = v24 - 1;
      sub_216167704(v39, v25);
      operator delete(v25);
      if (v4 < v26)
      {
        uint64_t v31 = *(void *)(*(void *)(a1 + 8) + 8 * v26);
        uint64_t v32 = *(void **)(v31 + 136);
        int v33 = (void *)(v31 + 144);
        if (v32 != (void *)(v31 + 144))
        {
          while (1)
          {
            unsigned __int16 v37 = *((_WORD *)v32 + 13);
            if (v4 == v37) {
              break;
            }
            if (v37 < v26 && v4 < v37) {
              sub_216179580(&v38, &v37, &v37);
            }
            unint64_t v35 = (void *)v32[1];
            if (v35)
            {
              do
              {
                unint64_t v36 = v35;
                unint64_t v35 = (void *)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                unint64_t v36 = (void *)v32[2];
                BOOL v30 = *v36 == (void)v32;
                uint64_t v32 = v36;
              }
              while (!v30);
            }
            uint64_t v32 = v36;
            if (v36 == v33) {
              goto LABEL_62;
            }
          }
          BOOL v22 = 1;
          break;
        }
      }
LABEL_62:
      uint64_t v24 = v40;
    }
    while (v40);
  }
  else
  {
    BOOL v22 = 0;
  }
  sub_21612A250((uint64_t)&v38, v39);
  return v22;
}

void sub_2163196BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_2163196D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 2) {
    return -1;
  }
  uint64_t v7 = a4 + a3;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = a4 + 1;
  while (1)
  {
    uint64_t v10 = sub_216322718(v8, a2, a3, a3 + v9 - 2);
    if (v10)
    {
      if ((v10[4] & 2) != 0)
      {
        unint64_t v11 = sub_216322718(v8, a2, a3 + v9 - 2, v7);
        if (v11)
        {
          if ((v11[4] & 2) == 0) {
            break;
          }
        }
      }
    }
    if ((unint64_t)--v9 < 3) {
      return -1;
    }
  }
  return a3 + v9 - 2;
}

void sub_21631978C(void *a1, float *a2)
{
  uint64_t v4 = a1[5];
  int v5 = *(unsigned __int16 *)a2;
  if (sub_216312C3C(*(_DWORD *)(v4 + 40), v5))
  {
    sub_216318258(v4, a1[6], v5, a2[1]);
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
}

void sub_2163197F4(void *a1, float *a2)
{
  uint64_t v4 = a1[5];
  int v5 = *(unsigned __int16 *)a2;
  if (sub_216312C3C(*(_DWORD *)(v4 + 40), v5))
  {
    sub_216318258(v4, a1[6], v5, a2[1]);
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
}

uint64_t *sub_21631985C(uint64_t *result, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  if (a2 != a3)
  {
    int v6 = a6;
    char v7 = a4;
    uint64_t v8 = a3;
    uint64_t v9 = a2;
    uint64_t v10 = result;
    unint64_t v11 = "Remove";
    if (a5) {
      unint64_t v11 = "Add";
    }
    uint64_t v41 = (uint64_t)v11;
    while (1)
    {
      int v12 = *(_DWORD *)(v9 + 24);
      if (v6 && v12 == 1) {
        return result;
      }
      uint64_t result = (uint64_t *)sub_2162769A4();
      if (*(unsigned char *)result && (*((unsigned char *)result + 9) & 2) != 0)
      {
        uint64_t v13 = sub_2162769A4();
        uint64_t result = (uint64_t *)sub_216276FA0((uint64_t)v13, 0x200u, (uint64_t)"%s: <Modification: %p>\n", v14, v15, v16, v17, v18, v41);
      }
      if (v12 == 5)
      {
        uint64_t v19 = v10[101] + *(void *)(v9 + 32);
        if (v19 != -1)
        {
          uint64_t v20 = *(void *)(v9 + 40);
          unint64_t v21 = v19 + v20 - 1;
          uint64_t result = (uint64_t *)sub_21621E738(*(void *)(v10[1] + 8 * v21), *(const __CFString **)(v9 + 16), v10[6] + 2 * v19, v20, a5);
          if (result)
          {
            if (v21 < v10[62]) {
              v10[62] = v21;
            }
          }
        }
        goto LABEL_30;
      }
      if ((v7 & 1) == 0) {
        break;
      }
LABEL_30:
      v9 += 72;
      if (v9 == v8) {
        return result;
      }
    }
    uint64_t v23 = *(void *)(v9 + 8);
    CFStringRef v22 = *(const __CFString **)(v9 + 16);
    uint64_t v24 = *(void *)(v9 + 40);
    uint64_t v25 = v10[101];
    uint64_t v26 = v25 + *(void *)(v9 + 32);
    uint64_t v27 = *(void *)v9 + v25;
    unsigned __int8 v44 = 0;
    double v28 = *(double *)(v9 + 64);
    uint64_t result = (uint64_t *)sub_216319E24((uint64_t)v10, v22, v26, v24, v27, v23, v12, &v44);
    if (result)
    {
      unint64_t v29 = v24 + v26 - 1;
      if ((*(_DWORD *)(*(void *)(v10[1] + 8 * v29) + 168) - 1) >= 2)
      {
        uint64_t v30 = (uint64_t)result;
        uint64_t v32 = *(void *)(v9 + 48);
        uint64_t v31 = *(void *)(v9 + 56);
        unsigned __int8 v43 = 0;
        CFStringRef v33 = v22;
        uint64_t v34 = v31;
        unint64_t v35 = sub_216319E24((uint64_t)v10, v33, v32, v31, v27, v23, v12, &v43);
        uint64_t v36 = v10[1];
        if (v35 && (unint64_t v37 = v32 + v34 - 1, (*(_DWORD *)(*(void *)(v36 + 8 * v37) + 168) - 1) >= 2))
        {
          if (a5) {
            operator new();
          }
          uint64_t result = (uint64_t *)sub_21631A0B8(v36, v29, (unsigned __int16)v24, v44, v30, (uint64_t)v35);
          int v6 = a6;
          if (!result) {
            goto LABEL_29;
          }
          uint64_t result = (uint64_t *)sub_21631A0B8(v10[1], v37, (unsigned __int16)v34, v43, (uint64_t)v35, 0);
          if (!result || v37 >= v10[62]) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t result = (uint64_t *)sub_21621E360(*(void *)(v36 + 8 * v29), v30, v24, v44, a5, v28);
          int v6 = a6;
          if (!result) {
            goto LABEL_29;
          }
          unint64_t v37 = v29;
          if (v29 >= v10[62]) {
            goto LABEL_29;
          }
        }
        v10[62] = v37;
      }
    }
LABEL_29:
    char v7 = a4;
    uint64_t v8 = a3;
    goto LABEL_30;
  }
  return result;
}

void sub_216319DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    sub_2161121B0(a30);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_216319E24(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned char *a8)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (a3 == -1) {
    return 0;
  }
  uint64_t v13 = a3;
  CFIndex v15 = a5 + a6;
  CFStringRef v40 = theString;
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v17 = Length + a4;
  CFIndex v18 = Length + v15;
  if (a7 != 3)
  {
    CFIndex v18 = v15;
    uint64_t v17 = a4;
  }
  if (a7 == 4) {
    CFIndex v18 = v15;
  }
  CFIndex v42 = v18;
  if (a7 == 4) {
    uint64_t v19 = a4 - a6;
  }
  else {
    uint64_t v19 = v17;
  }
  MEMORY[0x270FA5388]();
  if (v19 < 1)
  {
    int v26 = 0;
    int v28 = 0;
  }
  else
  {
    int v41 = a7;
    uint64_t v37 = a4;
    char v38 = a8;
    uint64_t v39 = &v36;
    uint64_t v20 = 0;
    int v21 = 0;
    if (a5 <= v13) {
      uint64_t v22 = v13;
    }
    else {
      uint64_t v22 = a5;
    }
    CFIndex v23 = v22 - a5;
    int v24 = v41;
    do
    {
      if (v13 < v22 || v13 >= v42)
      {
        sub_216312A80(*(_DWORD *)(a1 + 40), *(unsigned __int16 *)(*(void *)(a1 + 48) + 2 * v13), &v35[v20]);
        ++v21;
        ++v13;
      }
      else if (v24 == 4)
      {
        ++v13;
      }
      else
      {
        unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex(v40, v23);
        sub_216312A80(*(_DWORD *)(a1 + 40), CharacterAtIndex, &v35[v20]);
        ++v21;
        if (v24 == 3) {
          ++v22;
        }
        else {
          ++v13;
        }
        ++v23;
      }
      if (v21 > 11) {
        break;
      }
      uint64_t v20 = v21;
    }
    while (v19 > v21);
    int v26 = v21;
    a8 = v38;
    if (v21 <= 0)
    {
      int v28 = 0;
    }
    else
    {
      uint64_t v27 = 0;
      int v28 = 0;
      while (v35[(v21 - 1 + v27)] == 39)
      {
        ++v28;
        --v27;
        if (v21 + 1 + v27 <= 1)
        {
          int v28 = v21;
          break;
        }
      }
    }
    a4 = v37;
  }
  *a8 = v28;
  unint64_t v30 = v26 - v28;
  if ((int)v30 < 1) {
    return 0;
  }
  if (v13 < a4)
  {
    do
    {
      if (*(_WORD *)(*(void *)(a1 + 48) + 2 * v13) == 39) {
        *a8 = ++v28;
      }
      ++v13;
    }
    while (a4 != v13);
  }
  uint64_t v31 = *(unsigned __int16 ****)(a1 + 32);
  unint64_t v29 = **v31;
  if (v29)
  {
    unint64_t v32 = 0;
    do
    {
      unint64_t v29 = sub_21632279C((uint64_t)v31, v29, (char)v35[v32++]);
      if (v29) {
        BOOL v33 = v32 >= v30;
      }
      else {
        BOOL v33 = 1;
      }
    }
    while (!v33);
  }
  return v29;
}

uint64_t sub_21631A0B8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 8 * a2);
  uint64_t v7 = *(void *)(v6 + 56);
  if (v7 == *(void *)(v6 + 64)) {
    return 0;
  }
  for (uint64_t i = -v7; ; i -= 16)
  {
    uint64_t v13 = *(void *)v7;
    if (*(unsigned __int16 *)(*(void *)(*(void *)v7 + 8) + 2) != *(unsigned __int16 *)(a5 + 2)
      || (*(unsigned int (**)(void))(*(void *)v13 + 40))(*(void *)v7) != a3
      || *(unsigned __int8 *)(v13 + 16) != a4)
    {
      goto LABEL_14;
    }
    if (!a6) {
      break;
    }
    uint64_t v14 = *(void *)(v13 + 128);
    if (v14 && *(void *)(v14 + 8) == a6)
    {
      *(void *)(v14 + 12sub_21617DB94((const void **)&__p, 0) = v14;
      sub_21621F18C((uint64_t)&v25, (long long *)(16 - i), *(long long **)(v6 + 64), -i);
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)(v6 + 64);
      if (v20 != v18)
      {
        do
        {
          int v21 = *(std::__shared_weak_count **)(v20 - 8);
          if (v21) {
            sub_2161121B0(v21);
          }
          v20 -= 16;
        }
        while (v20 != v19);
      }
      goto LABEL_26;
    }
LABEL_14:
    v7 += 16;
    if (v7 == *(void *)(v6 + 64)) {
      return 0;
    }
  }
  uint64_t v15 = *(void *)(v13 + 120);
  if (v15) {
    BOOL v16 = v15 == v13;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16) {
    goto LABEL_14;
  }
  sub_21621F18C((uint64_t)&v26, (long long *)(16 - i), *(long long **)(v6 + 64), -i);
  uint64_t v19 = v22;
  uint64_t v23 = *(void *)(v6 + 64);
  if (v23 != v22)
  {
    do
    {
      int v24 = *(std::__shared_weak_count **)(v23 - 8);
      if (v24) {
        sub_2161121B0(v24);
      }
      v23 -= 16;
    }
    while (v23 != v19);
  }
LABEL_26:
  *(void *)(v6 + 64) = v19;
  return 1;
}

void sub_21631A244(uint64_t a1, uint64_t a2, const char *a3, const char *a4, void *a5)
{
  if (a3)
  {
    if (!*(unsigned char *)(*a5 + 16))
    {
      int v10 = (*(uint64_t (**)(void))(*(void *)*a5 + 64))(*a5);
      if (a4 || v10 == 2)
      {
        uint64_t v11 = *(unsigned __int16 *)(*(void *)(*a5 + 8) + 2);
        int v12 = &(&off_2642710F0)[2 * v11];
        uint64_t v13 = &(&off_26426EF10)[2 * v11];
        uint64_t v14 = (const char **)(*(_DWORD *)(a1 + 40) == 5 ? v12 : v13);
        int v40 = v10;
        __src = *v14;
        size_t v15 = strlen(*v14);
        size_t v16 = strlen(a3);
        size_t v17 = v16 + v15;
        if (v16 + v15 <= 6)
        {
          size_t v18 = v16;
          if (v15) {
            memmove(*(void **)(a1 + 680), __src, v15);
          }
          if (v18) {
            memmove((void *)(*(void *)(a1 + 680) + v15), a3, v18);
          }
          size_t v37 = v15;
          size_t v38 = v18;
          uint64_t v19 = *(unsigned __int16 ****)(a1 + 32);
          uint64_t v20 = **v19;
          int v21 = *(char **)(a1 + 680);
          if (v17) {
            BOOL v22 = v20 == 0;
          }
          else {
            BOOL v22 = 1;
          }
          if (!v22)
          {
            size_t v23 = 0;
            do
            {
              uint64_t v20 = sub_21632279C((uint64_t)v19, v20, v21[v23++]);
              if (v20) {
                BOOL v24 = v23 >= v17;
              }
              else {
                BOOL v24 = 1;
              }
            }
            while (!v24);
          }
          size_t v26 = v37;
          size_t v25 = v38;
          if (v20 && (v20[4] & 2) != 0)
          {
            if (v40 == 2)
            {
              uint64_t v27 = *(unsigned __int16 *)(*a5 + 112);
              int v28 = &(&off_2642710F0)[2 * v27];
              unint64_t v29 = (const char **)&(&off_26426EF10)[2 * v27];
              if (*(_DWORD *)(*a5 + 20) == 2) {
                unint64_t v29 = (const char **)v28;
              }
              __src = *v29;
              size_t v26 = strlen(*v29);
            }
            if (a4) {
              size_t v25 = strlen(a4);
            }
            size_t v30 = v25 + v26;
            if (v25 + v26 <= 0x13)
            {
              if (v26)
              {
                memmove(v21, __src, v26);
                int v21 = *(char **)(a1 + 680);
              }
              if (v25)
              {
                if (a4) {
                  uint64_t v31 = a4;
                }
                else {
                  uint64_t v31 = a3;
                }
                memmove(&v21[v26], v31, v25);
                int v21 = *(char **)(a1 + 680);
              }
              unsigned int v32 = 0;
              if (v30)
              {
                size_t v33 = v25 + v26;
                do
                {
                  int v34 = *v21++;
                  unsigned int v32 = (1025 * (v32 + v34)) ^ ((1025 * (v32 + v34)) >> 6);
                  --v33;
                }
                while (v33);
                v32 *= 9;
              }
              unint64_t v35 = sub_21631F658((void *)(a1 + 640), 32769 * (v32 ^ (v32 >> 11)));
              if (v35)
              {
                __int16 v36 = *((_WORD *)v35 + 10);
                (*(void (**)(void))(*(void *)*a5 + 72))();
                sub_216318E58(a1, a2, (uint64_t)v20, v36, v30);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_21631A500(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 40);
  if (!v5)
  {
    if ((unint64_t)(v4 - 105) < 0xFFFFFFFFFFFFFFA7)
    {
      char v6 = 0;
      return v6 & 1;
    }
    goto LABEL_10;
  }
  char v6 = 0;
  BOOL v7 = v5 != 5 || v4 < 16;
  if (!v7 && (unint64_t)v4 <= 0x68)
  {
LABEL_10:
    uint64_t v8 = (v4 >> 3) - 1;
    char v6 = 1;
    while (1)
    {
      if (v8 < 0 || (unint64_t)(a2[1] - *a2) > 0xCF) {
        return v6 & 1;
      }
      uint64_t v9 = *(void **)(*(void *)(a1 + 8) + 8 * v8);
      if (v9[2] == v9[1])
      {
        int v10 = (void *)v9[4];
        uint64_t v11 = (void *)v9[5];
        if (v11 == v10) {
          return v6 & 1;
        }
      }
      else
      {
        int v10 = (void *)v9[4];
        uint64_t v11 = (void *)v9[5];
      }
      long long v34 = 0uLL;
      unsigned int v12 = 255;
      while (1)
      {
        if (v10 == v11) {
          goto LABEL_27;
        }
        if ((*(unsigned char *)(*(void *)(*v10 + 8) + 8) & 1) != 0
          && (*(unsigned int (**)(void))(*(void *)*v10 + 32))(*v10) <= 2)
        {
          break;
        }
        if (v12 == 255) {
          unsigned int v12 = *(unsigned __int8 *)(*v10 + 16);
        }
        v10 += 2;
      }
      uint64_t v13 = *v10;
      uint64_t v14 = v10[1];
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      size_t v15 = (std::__shared_weak_count *)*((void *)&v34 + 1);
      *(void *)&long long v34 = v13;
      *((void *)&v34 + 1) = v14;
      if (v15)
      {
        sub_2161121B0(v15);
LABEL_27:
        uint64_t v13 = v34;
      }
      if (!v13)
      {
        uint64_t v23 = *(void *)(*(void *)(a1 + 8) + 8 * v8);
        BOOL v24 = *(uint64_t **)(v23 + 8);
        if (v24 != *(uint64_t **)(v23 + 16)) {
          break;
        }
      }
LABEL_29:
      uint64_t v16 = v34;
      if (!(void)v34 && v12 != 255)
      {
        if (v8 < v12) {
          goto LABEL_59;
        }
        sub_216312A80(*(_DWORD *)(a1 + 40), *(unsigned __int16 *)(*(void *)(a1 + 48) + 2 * (v8 - v12)), *(char **)(a1 + 72));
        size_t v17 = *(unsigned __int16 ****)(a1 + 32);
        size_t v18 = **v17;
        if (v18)
        {
          uint64_t v19 = sub_21632279C((uint64_t)v17, v18, **(char **)(a1 + 72));
          if (v19)
          {
            uint64_t v20 = v19;
            int v21 = *(_DWORD *)(a1 + 40) - 3;
            if (v21 > 2) {
              int v22 = 0;
            }
            else {
              int v22 = dword_2163963FC[v21];
            }
            int v28 = (char *)operator new(0x88uLL);
            *((void *)v28 + 1) = 0;
            *((void *)v28 + 2) = 0;
            *(void *)int v28 = &unk_26C6C9690;
            *((void *)v28 + 3) = &unk_26C6C5938;
            *((void *)v28 + 4) = v20;
            v28[40] = v12;
            *((_DWORD *)v28 + 11) = v22;
            v28[48] = 0;
            *((_DWORD *)v28 + 13) = 1065353216;
            *(_OWORD *)(v28 + 56) = 0u;
            *(_OWORD *)(v28 + 72) = 0u;
            *((_DWORD *)v28 + 22) = 1065353216;
            *((_OWORD *)v28 + 6) = 0u;
            *((_OWORD *)v28 + 7) = 0u;
            *((_DWORD *)v28 + 32) = 1065353216;
            if (sub_21632046C((uint64_t)(v28 + 24)) & 1) != 0 || (v20[4])
            {
              int v29 = v21 > 2 ? 0 : dword_2163963FC[v21];
              size_t v30 = (char *)operator new(0x88uLL);
              *((void *)v30 + 1) = 0;
              *((void *)v30 + 2) = 0;
              *(void *)size_t v30 = &unk_26C6C9690;
              *((void *)v30 + 3) = &unk_26C6C5938;
              *((void *)v30 + 4) = v20;
              v30[40] = v12;
              *((_DWORD *)v30 + 11) = v29;
              v30[48] = 0;
              *((_DWORD *)v30 + 13) = 1065353216;
              *(_OWORD *)(v30 + 56) = 0u;
              *(_OWORD *)(v30 + 72) = 0u;
              *((_DWORD *)v30 + 22) = 1065353216;
              *((_OWORD *)v30 + 6) = 0u;
              *((_OWORD *)v30 + 7) = 0u;
              *((_DWORD *)v30 + 32) = 1065353216;
              uint64_t v31 = (std::__shared_weak_count *)*((void *)&v34 + 1);
              *(void *)&long long v34 = v30 + 24;
              *((void *)&v34 + 1) = v30;
              if (v31) {
                sub_2161121B0(v31);
              }
            }
            sub_2161121B0((std::__shared_weak_count *)v28);
          }
        }
        uint64_t v16 = v34;
      }
      if (!v16)
      {
LABEL_59:
        char v6 = 0;
        char v32 = 1;
        goto LABEL_60;
      }
      sub_21621E244(a2, &v34);
      char v32 = 0;
      v8 -= (*(unsigned int (**)(void))(*(void *)v34 + 32))(v34);
LABEL_60:
      if (*((void *)&v34 + 1)) {
        sub_2161121B0(*((std::__shared_weak_count **)&v34 + 1));
      }
      if (v32) {
        return v6 & 1;
      }
    }
    uint64_t v26 = *v24;
    size_t v25 = (std::__shared_weak_count *)v24[1];
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      if (sub_21632046C(v26))
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_41;
      }
    }
    else if (sub_21632046C(*v24))
    {
LABEL_41:
      uint64_t v27 = (std::__shared_weak_count *)*((void *)&v34 + 1);
      *(void *)&long long v34 = v26;
      *((void *)&v34 + 1) = v25;
      if (v27) {
        sub_2161121B0(v27);
      }
LABEL_45:
      if (v25) {
        sub_2161121B0(v25);
      }
      goto LABEL_29;
    }
    if (v12 == 255) {
      unsigned int v12 = *(unsigned __int8 *)(v26 + 16);
    }
    goto LABEL_45;
  }
  return v6 & 1;
}

void sub_21631A8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  sub_2161121B0(v10);
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21631A918(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1;
  uint64_t v58 = (uint64_t)(a2 + 2);
  char v5 = 1;
  while ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    while (word_216381F32[v6] != *(_WORD *)(*(void *)(a1 + 48) + 2 * v4))
    {
      if (++v6 == 5)
      {
        BOOL v7 = 0;
        goto LABEL_8;
      }
    }
    BOOL v7 = &word_216381F32[v6];
LABEL_8:
    if (v7) {
      BOOL v8 = (char *)v7 - (char *)word_216381F32 == -2;
    }
    else {
      BOOL v8 = 1;
    }
    int v9 = !v8;
    if (v5)
    {
      LOWORD(v59) = 0;
      int v10 = *(void **)(*(void *)(a1 + 8) + 8 * v4);
      uint64_t v11 = sub_21621EBD8(v10, &v59, v10[2] != v10[1]);
      if (v9) {
        unsigned int v12 = 2;
      }
      else {
        unsigned int v12 = 1;
      }
      if (v11) {
        BOOL v13 = (unsigned __int16)v59 > v12;
      }
      else {
        BOOL v13 = 0;
      }
      char v5 = !v13;
      if (!v9)
      {
LABEL_25:
        unsigned int v14 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 2 * v4);
        if (v14 - 12549 >= 0x25)
        {
          int v29 = (void *)a2[1];
        }
        else
        {
          sub_216312A80(*(_DWORD *)(a1 + 40), v14, *(char **)(a1 + 72));
          size_t v15 = *(unsigned __int16 ****)(a1 + 32);
          uint64_t v16 = **v15;
          if (!v16) {
            goto LABEL_64;
          }
          size_t v17 = sub_21632279C((uint64_t)v15, v16, **(char **)(a1 + 72));
          if (!v17) {
            goto LABEL_64;
          }
          size_t v18 = v17;
          unsigned int v19 = *(_DWORD *)(a1 + 40) - 3;
          if (v19 > 2) {
            int v20 = 0;
          }
          else {
            int v20 = dword_2163963FC[v19];
          }
          unsigned __int8 v44 = (char *)operator new(0x88uLL);
          uint64_t v45 = v44;
          *((void *)v44 + 1) = 0;
          *((void *)v44 + 2) = 0;
          *(void *)unsigned __int8 v44 = &unk_26C6C9690;
          uint64_t v46 = v44 + 24;
          *((void *)v44 + 3) = &unk_26C6C5938;
          *((void *)v44 + 4) = v18;
          v44[40] = 0;
          *((_DWORD *)v44 + 11) = v20;
          v44[48] = 0;
          *((_DWORD *)v44 + 13) = 1065353216;
          *(_OWORD *)(v44 + 56) = 0u;
          *(_OWORD *)(v44 + 72) = 0u;
          *((_DWORD *)v44 + 22) = 1065353216;
          *((_OWORD *)v44 + 6) = 0u;
          *((_OWORD *)v44 + 7) = 0u;
          *((_DWORD *)v44 + 32) = 1065353216;
          unint64_t v48 = (void *)a2[1];
          unint64_t v47 = a2[2];
          if ((unint64_t)v48 >= v47)
          {
            uint64_t v49 = ((uint64_t)v48 - *a2) >> 4;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 60) {
              sub_21610CB04();
            }
            uint64_t v51 = v47 - *a2;
            if (v51 >> 3 > v50) {
              unint64_t v50 = v51 >> 3;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            uint64_t v63 = v58;
            uint64_t v53 = (char *)sub_21612AA90(v58, v52);
            unint64_t v54 = &v53[16 * v49];
            char v59 = v53;
            size_t v60 = v54;
            uint64_t v62 = &v53[16 * v55];
            *(void *)unint64_t v54 = v46;
            *((void *)v54 + 1) = v45;
            uint64_t v61 = v54 + 16;
            sub_21621EF7C(a2, &v59);
            int v29 = (void *)a2[1];
            sub_21621F104(&v59);
          }
          else
          {
            *unint64_t v48 = v46;
            v48[1] = v44;
            int v29 = v48 + 2;
          }
          a2[1] = (uint64_t)v29;
        }
        uint64_t v43 = -1;
        goto LABEL_63;
      }
    }
    else
    {
      char v5 = 0;
      if (!v9) {
        goto LABEL_25;
      }
    }
    if (v4 < 1
      || (unsigned int v21 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 2 * v4 - 2), v21 - 12549 > 0x24)
      || (int v22 = *(void **)(*(void *)(a1 + 8) + 8 * v4), v22[2] == v22[1]) && v22[5] == v22[4]
      || (sub_216312A80(*(_DWORD *)(a1 + 40), v21, *(char **)(a1 + 72)),
          uint64_t v23 = *(unsigned __int16 ****)(a1 + 32),
          (BOOL v24 = **v23) == 0)
      || (size_t v25 = sub_21632279C((uint64_t)v23, v24, **(char **)(a1 + 72))) == 0)
    {
LABEL_64:
      char v56 = 0;
      return v56 & 1;
    }
    uint64_t v26 = v25;
    unsigned int v27 = *(_DWORD *)(a1 + 40) - 3;
    if (v27 > 2) {
      int v28 = 0;
    }
    else {
      int v28 = dword_2163963FC[v27];
    }
    __int16 v30 = *(_WORD *)(*(void *)(a1 + 48) + 2 * v4);
    uint64_t v31 = (char *)operator new(0x90uLL);
    char v32 = v31;
    *((void *)v31 + 1) = 0;
    *((void *)v31 + 2) = 0;
    *(void *)uint64_t v31 = &unk_26C6C9850;
    size_t v33 = v31 + 24;
    v31[40] = 0;
    *((_DWORD *)v31 + 11) = v28;
    v31[48] = 0;
    *((_DWORD *)v31 + 13) = 1065353216;
    *(_OWORD *)(v31 + 56) = 0u;
    *(_OWORD *)(v31 + 72) = 0u;
    *((_DWORD *)v31 + 22) = 1065353216;
    *((_OWORD *)v31 + 6) = 0u;
    *((_OWORD *)v31 + 7) = 0u;
    *((_DWORD *)v31 + 32) = 1065353216;
    *((void *)v31 + 3) = &unk_26C6C6A98;
    *((void *)v31 + 4) = v26;
    *((_WORD *)v31 + 68) = v30;
    unint64_t v35 = (void *)a2[1];
    unint64_t v34 = a2[2];
    if ((unint64_t)v35 >= v34)
    {
      uint64_t v36 = ((uint64_t)v35 - *a2) >> 4;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 60) {
        sub_21610CB04();
      }
      uint64_t v38 = v34 - *a2;
      if (v38 >> 3 > v37) {
        unint64_t v37 = v38 >> 3;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      uint64_t v63 = v58;
      int v40 = (char *)sub_21612AA90(v58, v39);
      int v41 = &v40[16 * v36];
      char v59 = v40;
      size_t v60 = v41;
      uint64_t v62 = &v40[16 * v42];
      *(void *)int v41 = v33;
      *((void *)v41 + 1) = v32;
      uint64_t v61 = v41 + 16;
      sub_21621EF7C(a2, &v59);
      int v29 = (void *)a2[1];
      sub_21621F104(&v59);
    }
    else
    {
      *unint64_t v35 = v33;
      v35[1] = v31;
      int v29 = v35 + 2;
    }
    a2[1] = (uint64_t)v29;
    uint64_t v43 = -2;
LABEL_63:
    v4 += v43;
    if ((unint64_t)v29 - *a2 >= 0xD1) {
      goto LABEL_64;
    }
  }
  char v56 = v5 ^ 1;
  return v56 & 1;
}

void sub_21631AD8C(_Unwind_Exception *a1)
{
  sub_2161121B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21631ADC0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  __int16 v4 = a4;
  uint64_t v8 = sub_21621EE28(*(void **)(*(void *)(a1 + 8) + 8 * a2), a3, a4, (*(_DWORD *)(a1 + 40) > 5u) | ((0x27u >> *(_DWORD *)(a1 + 40)) & 1));
  if (!v8)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 40) - 3;
    if (v9 > 2) {
      int v10 = 0;
    }
    else {
      int v10 = dword_2163963FC[v9];
    }
    uint64_t v11 = sub_216322848(*(unsigned __int16 ****)(a1 + 32), a3, v10);
    unsigned int v12 = *(_DWORD *)(a1 + 40) - 3;
    if (v12 > 2) {
      int v13 = 0;
    }
    else {
      int v13 = dword_2163963FC[v12];
    }
    uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 8 * a2);
    if (*(_DWORD *)(v14 + 168) == 1) {
      char v15 = 10;
    }
    else {
      char v15 = 9;
    }
    uint64_t v16 = (char *)operator new(0x90uLL);
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *(void *)uint64_t v16 = &unk_26C6C9700;
    uint64_t v8 = (uint64_t)(v16 + 24);
    v16[40] = 0;
    *((_DWORD *)v16 + 11) = v13;
    v16[48] = 0;
    *((_DWORD *)v16 + 13) = 1065353216;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 72) = 0u;
    *((_DWORD *)v16 + 22) = 1065353216;
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_DWORD *)v16 + 32) = 1065353216;
    *((void *)v16 + 3) = &unk_26C6C5F80;
    *((void *)v16 + 4) = v11;
    *((_WORD *)v16 + 68) = v4;
    v16[138] = v15;
    *(void *)&long long v20 = v16 + 24;
    *((void *)&v20 + 1) = v16;
    int v17 = off_26C6C5FE0((uint64_t)(v16 + 24));
    uint64_t v18 = 32;
    if (v17) {
      uint64_t v18 = 8;
    }
    sub_21621E244((uint64_t *)(v14 + v18), &v20);
    if (*((void *)&v20 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v20 + 1));
    }
  }
  return v8;
}

void sub_21631AF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21631AF84(void *a1, uint64_t a2, uint64_t a3)
{
  a1[99] = a3;
  unint64_t v3 = a1[98];
  __int16 v53 = a3;
  unint64_t v57 = v3;
  if (v3 < v3 + a3)
  {
    __int16 v4 = (void **)(a1 + 6);
    uint64_t v5 = (uint64_t)(a1 + 8);
    __int16 v6 = v3 + 48;
    uint64_t v8 = (char *)a1[7];
    unint64_t v7 = a1[8];
    if ((unint64_t)v8 >= v7)
    {
      int v10 = (char *)*v4;
      uint64_t v11 = v8 - (unsigned char *)*v4;
      if (v11 <= -3) {
        sub_21610CB04();
      }
      uint64_t v12 = v11 >> 1;
      unint64_t v13 = v7 - (void)v10;
      if (v13 <= (v11 >> 1) + 1) {
        unint64_t v14 = v12 + 1;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v15 = v14;
      }
      if (v15)
      {
        uint64_t v16 = (char *)sub_21610FD44(v5, v15);
        int v10 = (char *)a1[6];
        uint64_t v8 = (char *)a1[7];
      }
      else
      {
        uint64_t v16 = 0;
      }
      int v17 = &v16[2 * v12];
      *(_WORD *)int v17 = v6;
      unsigned int v9 = v17 + 2;
      while (v8 != v10)
      {
        __int16 v18 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *((_WORD *)v17 - 1) = v18;
        v17 -= 2;
      }
      a1[6] = v17;
      a1[7] = v9;
      a1[8] = &v16[2 * v15];
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(_WORD *)uint64_t v8 = v6;
      unsigned int v9 = v8 + 2;
    }
    a1[7] = v9;
    operator new();
  }
  unsigned int v19 = *(void **)a2;
  uint64_t v55 = *(void **)(a2 + 8);
  long long v20 = a1;
  if (*(void **)a2 != v55)
  {
    uint64_t v56 = v3 + a3 - 1;
    unint64_t v52 = a1 + 95;
    do
    {
      uint64_t v21 = v19[1] - *v19;
      if (v21)
      {
        unint64_t v22 = v21 >> 1;
        sub_21610FC8C(__p, v21 >> 1);
        uint64_t v23 = 0;
        BOOL v24 = 0;
        unint64_t v25 = 0;
        uint64_t v26 = 0;
        unint64_t v27 = v22 - 1;
        unint64_t v54 = v22;
        if (v22 <= 1) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = v22;
        }
        if (((v53 - (_WORD)v27) & 0xFFFE) != 0) {
          int v29 = (unsigned __int16)(v53 - v27);
        }
        else {
          int v29 = 1;
        }
        int v58 = v29;
        do
        {
          if (v26 == v27) {
            uint64_t v30 = sub_21631ADC0((uint64_t)v20, v56, *(unsigned __int16 *)(*v19 + 2 * v27), v58);
          }
          else {
            uint64_t v30 = sub_21631ADC0((uint64_t)v20, v26 + v57, *(unsigned __int16 *)(*v19 + 2 * v26), 1);
          }
          uint64_t v31 = v30;
          if ((unint64_t)v24 >= v25)
          {
            uint64_t v33 = v24 - v23;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              sub_21610CB04();
            }
            if ((uint64_t)(v25 - (void)v23) >> 2 > v34) {
              unint64_t v34 = (uint64_t)(v25 - (void)v23) >> 2;
            }
            if (v25 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v34;
            }
            if (v35) {
              unint64_t v35 = (unint64_t)sub_216188754(v35);
            }
            else {
              uint64_t v36 = 0;
            }
            unint64_t v37 = (uint64_t *)(v35 + 8 * v33);
            *unint64_t v37 = v31;
            char v32 = v37 + 1;
            while (v24 != v23)
            {
              uint64_t v38 = *--v24;
              *--unint64_t v37 = v38;
            }
            unint64_t v25 = v35 + 8 * v36;
            if (v23) {
              operator delete(v23);
            }
            uint64_t v23 = v37;
            long long v20 = a1;
          }
          else
          {
            uint64_t *v24 = v30;
            char v32 = v24 + 1;
          }
          *((_WORD *)__p[0] + v26++) = *(_WORD *)(*(void *)(v31 + 8) + 2);
          BOOL v24 = v32;
        }
        while (v26 != v28);
        sub_21631B534(v52, (uint64_t)__p);
        if (v27)
        {
          for (unint64_t i = 0; i != v27; ++i)
          {
            int v40 = &v23[i];
            if (i >= v54 - 2) {
              uint64_t v41 = 0;
            }
            else {
              uint64_t v41 = v40[2];
            }
            uint64_t v42 = *v40;
            uint64_t v62 = v40[1];
            sub_21631E4DC(v42 + 32, &v62, &v62);
            uint64_t v43 = *(unsigned __int16 *)(*(void *)(v62 + 8) + 2);
            if (v41) {
              uint64_t v43 = *(unsigned __int16 *)(*(void *)(v41 + 8) + 2)
            }
                  + 542 * *(unsigned __int16 *)(*(void *)(v62 + 8) + 2);
            sub_21631E730(v42 + 72, v43, v43);
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        long long v20 = a1;
        if (v23) {
          operator delete(v23);
        }
      }
      v19 += 3;
    }
    while (v19 != v55);
  }
  if (!v20[98]) {
    sub_2163149D4((uint64_t)v20, ((uint64_t)(v20[2] - v20[1]) >> 3) - 1);
  }
  unsigned __int8 v44 = sub_2162769A4();
  if (*v44 && (v44[9] & 0x20) != 0)
  {
    uint64_t v45 = sub_2162769A4();
    sub_216315C84(__p, (uint64_t)v20);
    uint64_t v51 = v61 >= 0 ? __p : (void **)__p[0];
    sub_216276FA0((uint64_t)v45, 0x2000u, (uint64_t)v51, v46, v47, v48, v49, v50, (uint64_t)v52);
    if (v61 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_21631B4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21631B534(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    unint64_t v13 = (char *)sub_216129BFC(v4, v12);
    unint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    _OWORD v17[2] = v14 + 24;
    sub_2162A661C(a1, v17);
    uint64_t v8 = (void *)a1[1];
    sub_216140FCC((uint64_t)v17);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_21631B664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21631B678(void *a1, int a2)
{
  int64_t v4 = a1[98];
  if (v4)
  {
LABEL_4:
    if (a2 != 2 || v4 == -1) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  int64_t v4 = a1[100];
  if (v4 >= 1)
  {
    a1[98] = v4;
    a1[99] = 0;
    goto LABEL_4;
  }
  if (a2 != 2)
  {
LABEL_13:
    sub_216311338((uint64_t)a1, (uint64_t)(a1[2] - a1[1]) >> 3, 0);
    a1[98] = (uint64_t)(a1[2] - a1[1]) >> 3;
    return;
  }
  int64_t v4 = 0;
LABEL_6:
  uint64_t v5 = a1[1];
  if (v4 >= (unint64_t)((a1[2] - v5) >> 3) || *(_DWORD *)(*(void *)(v5 + 8 * v4) + 168) != 2) {
    goto LABEL_13;
  }

  sub_216311338((uint64_t)a1, v4, 0);
}

uint64_t sub_21631B744(uint64_t a1, int a2)
{
  sub_21631B678((void *)a1, a2);
  uint64_t v5 = 824;
  if (a2 != 2) {
    uint64_t v5 = 832;
  }
  unint64_t v6 = *(void **)(a1 + v5);
  uint64_t v7 = v6[6];
  uint64_t v8 = v6[7];
  BOOL v9 = a2 == 1 && v7 == v8;
  uint64_t v10 = !v9;
  if (v9) {
    return v10;
  }
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  if (v7 == v8) {
    goto LABEL_58;
  }
  uint64_t v34 = v5;
  unsigned int v35 = v10;
  unint64_t v11 = 0;
  unint64_t v12 = (uint64_t *)(a1 + 720);
  uint64_t v36 = (void *)(a1 + 736);
  do
  {
    unint64_t v13 = *(unsigned __int16 **)v7;
    unint64_t v14 = 0;
    uint64_t v15 = *(void *)(v7 + 8) - *(void *)v7;
    if (v15)
    {
      uint64_t v16 = v15 >> 1;
      do
      {
        unsigned int v17 = *v13++;
        unint64_t v14 = v17 + 542 * v14;
        --v16;
      }
      while (v16);
    }
    uint64_t v18 = *(void *)(v7 + 24);
    unint64_t v19 = *(void *)(a1 + 728);
    if (v19)
    {
      uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        unint64_t v2 = v14;
        if (v19 <= v14) {
          unint64_t v2 = v14 % v19;
        }
      }
      else
      {
        unint64_t v2 = (v19 - 1) & v14;
      }
      uint64_t v21 = *(void ***)(*v12 + 8 * v2);
      if (v21)
      {
        for (unint64_t i = *v21; i; unint64_t i = (void *)*i)
        {
          unint64_t v23 = i[1];
          if (v23 == v14)
          {
            if (i[2] == v14) {
              goto LABEL_53;
            }
          }
          else
          {
            if (v20.u32[0] > 1uLL)
            {
              if (v23 >= v19) {
                v23 %= v19;
              }
            }
            else
            {
              v23 &= v19 - 1;
            }
            if (v23 != v2) {
              break;
            }
          }
        }
      }
    }
    unint64_t i = operator new(0x20uLL);
    void *i = 0;
    i[1] = v14;
    i[2] = v14;
    i[3] = 0;
    float v24 = (float)(unint64_t)(*(void *)(a1 + 744) + 1);
    float v25 = *(float *)(a1 + 752);
    if (!v19 || (float)(v25 * (float)v19) < v24)
    {
      BOOL v26 = (v19 & (v19 - 1)) != 0;
      if (v19 < 3) {
        BOOL v26 = 1;
      }
      unint64_t v27 = v26 | (2 * v19);
      unint64_t v28 = vcvtps_u32_f32(v24 / v25);
      if (v27 <= v28) {
        size_t v29 = v28;
      }
      else {
        size_t v29 = v27;
      }
      sub_21631F7A8(a1 + 720, v29);
      unint64_t v19 = *(void *)(a1 + 728);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v19 <= v14) {
          unint64_t v2 = v14 % v19;
        }
        else {
          unint64_t v2 = v14;
        }
      }
      else
      {
        unint64_t v2 = (v19 - 1) & v14;
      }
    }
    uint64_t v30 = *v12;
    uint64_t v31 = *(void **)(*v12 + 8 * v2);
    if (v31)
    {
      void *i = *v31;
LABEL_51:
      *uint64_t v31 = i;
      goto LABEL_52;
    }
    void *i = *v36;
    *uint64_t v36 = i;
    *(void *)(v30 + 8 * v2) = v36;
    if (*i)
    {
      unint64_t v32 = *(void *)(*i + 8);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v32 >= v19) {
          v32 %= v19;
        }
      }
      else
      {
        v32 &= v19 - 1;
      }
      uint64_t v31 = (void *)(*v12 + 8 * v32);
      goto LABEL_51;
    }
LABEL_52:
    ++*(void *)(a1 + 744);
    unint64_t v11 = v38;
LABEL_53:
    i[3] = v18;
    if ((unint64_t)v11 >= v39)
    {
      unint64_t v11 = (void *)sub_2162A6770(&v37, v7);
    }
    else
    {
      *unint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      sub_216182F50(v11, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 1);
      v11 += 3;
    }
    uint64_t v38 = v11;
    v7 += 32;
  }
  while (v7 != v8);
  unint64_t v6 = *(void **)(a1 + v34);
  uint64_t v10 = v35;
LABEL_58:
  sub_21631AF84((void *)a1, (uint64_t)&v37, v6[9]);
  int v40 = (void **)&v37;
  sub_21613F444(&v40);
  return v10;
}

void sub_21631BA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  sub_21613F444(&a16);
  _Unwind_Resume(a1);
}

BOOL sub_21631BA98(void *a1, int a2)
{
  uint64_t v2 = (uint64_t)a1;
  uint64_t v41 = *MEMORY[0x263EF8340];
  sub_21631B678(a1, a2);
  unint64_t v3 = *(void **)(v2 + 864);
  unint64_t v4 = v3[2] - v3[1];
  if (v4 >= 9)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v35 = 0;
    char v5 = (*(uint64_t (**)(void *, uint64_t))(*v3 + 80))(v3, v3[17] + 48);
    std::string __p = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unint64_t v6 = operator new(0x30uLL);
    void *v6 = &unk_26C6C82D8;
    v6[1] = v2;
    void v6[2] = &v36;
    v6[3] = &__p;
    v6[4] = &v35;
    *((unsigned char *)v6 + 4sub_21617DB94((const void **)&__p, 0) = v5;
    int v40 = v6;
    sub_21631BE50(v2, 0xAuLL, (uint64_t)chars);
    sub_21618FF18(chars);
    uint64_t v7 = sub_2162D1CE4(0xFu);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v8 = *(_DWORD *)(v2 + 40) - 3;
      if (v8 > 2) {
        int v9 = 0;
      }
      else {
        int v9 = dword_2163963FC[v8];
      }
      CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
      unint64_t v27 = v4;
      uint64_t v28 = v2;
      uint64_t v10 = v36;
      size_t v29 = v37;
      CFArrayRef v11 = theArray;
      if (v36 != v37)
      {
        while (1)
        {
          CFMutableStringRef Mutable = CFStringCreateMutable(alloc, 0);
          uint64_t v14 = *v10;
          uint64_t v13 = v10[1];
          if (v13 != *v10) {
            break;
          }
LABEL_23:
          CFArrayRef v11 = theArray;
          CFArrayAppendValue(theArray, Mutable);
          if (Mutable) {
            CFRelease(Mutable);
          }
          v10 += 3;
          if (v10 == v29) {
            goto LABEL_26;
          }
        }
        uint64_t v15 = 0;
        while (1)
        {
          uint64_t v16 = *(unsigned __int16 *)(v14 + 2 * v15);
          if (v9 == 2) {
            break;
          }
          if (v9 != 1)
          {
            char v20 = 0;
            uint64_t v18 = &(&off_26426EF10)[2 * v16];
            goto LABEL_14;
          }
          char v17 = 0;
          uint64_t v18 = (char **)(&off_264274F30 + 2 * v16);
          unint64_t v19 = 2 * (void)v18[1];
          char v20 = 1;
LABEL_15:
          unint64_t v21 = v19 >> v20;
          if (v19 >> v20)
          {
            uint64_t v22 = 0;
            unint64_t v23 = *v18;
            do
            {
              chars[0] = 0;
              uint64_t v24 = v22 << v20;
              if (v17) {
                UniChar v25 = v23[v24];
              }
              else {
                UniChar v25 = *(_WORD *)&v23[v24];
              }
              chars[0] = v25;
              CFStringAppendCharacters(Mutable, chars, 1);
              ++v22;
            }
            while (v21 != v22);
            uint64_t v14 = *v10;
            uint64_t v13 = v10[1];
          }
          if (++v15 >= (unint64_t)((v13 - v14) >> 1)) {
            goto LABEL_23;
          }
        }
        char v20 = 0;
        uint64_t v18 = &(&off_2642710F0)[2 * v16];
LABEL_14:
        unint64_t v19 = (unint64_t)v18[1];
        char v17 = 1;
        goto LABEL_15;
      }
LABEL_26:
      sub_216325E20((unint64_t)"[CPSearch]", v11, &__p);
      uint64_t v2 = v28;
      unint64_t v4 = v27;
      if (v11) {
        CFRelease(v11);
      }
    }
    sub_21631AF84((void *)v2, (uint64_t)&v36, v35);
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    *(void *)UniChar chars = &v36;
    sub_21613F444((void ***)chars);
  }
  return v4 > 8;
}

void sub_21631BDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2160F7444(exception_object);
}

void sub_21631BE50(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 840))
  {
    sub_216278FB0(*(void *)(a1 + 864), a2, a3, 1);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 824);
    if (v3) {
      sub_21618E2CC(v3, a2, a3);
    }
  }
}

void sub_21631BE74(CFArrayRef theArray@<X2>, const __CFString *a2@<X1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a2)
  {
    if (theArray)
    {
      if (CFArrayGetCount(theArray))
      {
        CFIndex Count = CFArrayGetCount(theArray);
        CFIndex Length = CFStringGetLength(a2);
        BOOL v9 = Count < 1;
        CFIndex v10 = Count - 1;
        if (!v9)
        {
          CFIndex v11 = Length;
          unint64_t v12 = 0;
          CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          do
          {
            if (v12 >= a3 || v11 < 0) {
              break;
            }
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v10);
            CFIndex valuePtr = 0;
            CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr);
            v14.CFIndex length = valuePtr;
            v11 -= valuePtr;
            if (v11 >= 0)
            {
              v14.location = v11;
              CFStringRef v16 = CFStringCreateWithSubstring(alloc, a2, v14);
              sub_2161E236C(v16);
            }
            ++v12;
            --v10;
          }
          while (v10 != -1);
        }
      }
    }
  }
}

void sub_21631C024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  char v20 = *(void **)v18;
  if (*(void *)v18)
  {
    *(void *)(v18 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_21631C088(void *a1, uint64_t a2)
{
  sub_216311338((uint64_t)a1, 0, 1);
  unint64_t v6 = *(uint64_t **)(a2 + 32);
  uint64_t v5 = a2 + 32;
  unint64_t v4 = v6;
  a1[98] = 0;
  uint64_t v7 = *(uint64_t **)(v5 + 8);
  unsigned int v8 = v6 + 3;
  if (v6 != v7 && v8 != v7)
  {
    uint64_t v10 = *v4;
    do
    {
      if (v4[1] - v10 < (unint64_t)(v8[1] - *v8))
      {
        uint64_t v10 = *v8;
        unint64_t v4 = v8;
      }
      v8 += 3;
    }
    while (v8 != v7);
  }
  sub_21631AF84(a1, v5, (v4[1] - *v4) >> 1);
  a1[100] = a1[99];
}

void sub_21631C124(uint64_t a1, void *a2, int a3)
{
  if (*(unsigned char *)(a1 + 840))
  {
    sub_21627928C(*(void **)(a1 + 864), a2);
  }
  else
  {
    uint64_t v3 = 832;
    if (a3 == 2) {
      uint64_t v3 = 824;
    }
    sub_21618C440(*(void **)(a1 + v3), a2);
  }
}

void sub_21631C14C(uint64_t a1, const __CFString *a2, const __CFArray *a3, int a4)
{
  if (*(unsigned char *)(a1 + 840))
  {
    unint64_t v6 = (unint64_t *)(*(void *)(a1 + 864) + 208);
LABEL_7:
    unint64_t v9 = *v6;
    goto LABEL_8;
  }
  uint64_t v7 = 832;
  if (a4 == 2) {
    uint64_t v7 = 824;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + v7) + 8);
  if (v8)
  {
    unint64_t v6 = (unint64_t *)(v8 + 32);
    goto LABEL_7;
  }
  unint64_t v9 = 0;
LABEL_8:
  sub_21631BE74(a3, a2, v9, __p);
  sub_21631C124(a1, __p, a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_21631C1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21631C200(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, char **a6, uint64_t *a7, unsigned char *a8)
{
  if (a1 >= a3 || !a4 || *a8) {
    return;
  }
  uint64_t v13 = *a6;
  CFRange v14 = a6[1];
  uint64_t v15 = v14 - *a6;
  uint64_t v16 = v15 >> 3;
  uint64_t v17 = a5[1] - *a5;
  if (v15 >> 3 >= (unint64_t)(v17 >> 1))
  {
    if ((unint64_t)v15 >= 9
      && !sub_21631EC0C((void *)(*(void *)&v13[8 * v16 - 16] + 72), *(unsigned __int16 *)(*(void *)(a4 + 8) + 2)+ 542 * *(unsigned __int16 *)(*(void *)(*(void *)&v13[8 * v16 - 8] + 8) + 2)))
    {
      return;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(*(void *)(a4 + 8) + 2) != *(unsigned __int16 *)(*a5 + 2 * v16)) {
      return;
    }
    if (a3 - 1 == a1 && v16 + 1 == v17 >> 1)
    {
      *a8 = 1;
      sub_21613F498(a7);
      return;
    }
  }
  unint64_t v18 = (unint64_t)a6[2];
  if ((unint64_t)v14 >= v18)
  {
    unint64_t v20 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
LABEL_87:
    }
      sub_21610CB04();
    uint64_t v21 = v18 - (void)v13;
    if (v21 >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22) {
      unint64_t v22 = (unint64_t)sub_216188754(v22);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = (char *)(v22 + 8 * v16);
    unint64_t v25 = v22 + 8 * v23;
    *(void *)uint64_t v24 = a4;
    unint64_t v19 = v24 + 8;
    unint64_t v27 = *a6;
    BOOL v26 = a6[1];
    if (v26 != *a6)
    {
      do
      {
        uint64_t v28 = *((void *)v26 - 1);
        v26 -= 8;
        *((void *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      BOOL v26 = *a6;
    }
    *a6 = v24;
    a6[1] = v19;
    a6[2] = (char *)v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(void *)CFRange v14 = a4;
    unint64_t v19 = v14 + 8;
  }
  a6[1] = v19;
  if (a3 - 1 != a1)
  {
    uint64_t v45 = *(void **)(a4 + 48);
    if (!v45) {
      return;
    }
    unint64_t v46 = a1 - a2 + 1;
    while (1)
    {
      uint64_t v47 = v45[2];
      uint64_t v48 = *a6;
      uint64_t v49 = a6[1];
      unint64_t v50 = (v49 - *a6) >> 3;
      if (v46 > v50) {
        break;
      }
      if (v46 < v50)
      {
        uint64_t v63 = &v48[8 * v46];
LABEL_70:
        a6[1] = v63;
      }
LABEL_71:
      unsigned int v64 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 40))(v47);
      sub_21631C200(a1 + v64, a2, a3, v47, a5, a6, a7, a8);
      uint64_t v45 = (void *)*v45;
      if (!v45) {
        return;
      }
    }
    unint64_t v51 = v46 - v50;
    unint64_t v52 = a6[2];
    if (v46 - v50 > (v52 - v49) >> 3)
    {
      if (v46 >> 61) {
        goto LABEL_87;
      }
      uint64_t v53 = v52 - v48;
      uint64_t v54 = v53 >> 2;
      if (v53 >> 2 <= v46) {
        uint64_t v54 = a1 - a2 + 1;
      }
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v54;
      }
      uint64_t v56 = (char *)sub_216188754(v55);
      uint64_t v71 = v57;
      int v58 = &v56[8 * v50];
      bzero(v58, 8 * v51);
      size_t v60 = *a6;
      char v59 = a6[1];
      char v61 = v58;
      if (v59 != *a6)
      {
        do
        {
          uint64_t v62 = *((void *)v59 - 1);
          v59 -= 8;
          *((void *)v61 - 1) = v62;
          v61 -= 8;
        }
        while (v59 != v60);
        char v59 = *a6;
      }
      *a6 = v61;
      a6[1] = &v58[8 * v51];
      a6[2] = &v56[8 * v71];
      if (v59) {
        operator delete(v59);
      }
      goto LABEL_71;
    }
    bzero(a6[1], 8 * v51);
    uint64_t v63 = &v49[8 * v51];
    goto LABEL_70;
  }
  std::string __p = 0;
  uint64_t v76 = 0;
  unint64_t v77 = 0;
  unint64_t v29 = (uint64_t)(a5[1] - *a5) >> 1;
  uint64_t v30 = *a6;
  if (v29 < (v19 - *a6) >> 3)
  {
    uint64_t v31 = 0;
    do
    {
      __int16 v32 = *(_WORD *)(*(void *)(*(void *)&v30[8 * v29] + 8) + 2);
      if (v31 >= v77)
      {
        uint64_t v34 = __p;
        uint64_t v35 = v31 - __p;
        if (v31 - __p <= -3) {
          sub_21610CB04();
        }
        uint64_t v36 = v35 >> 1;
        if (v77 - __p <= (unint64_t)((v35 >> 1) + 1)) {
          uint64_t v37 = v36 + 1;
        }
        else {
          uint64_t v37 = v77 - __p;
        }
        if ((unint64_t)(v77 - __p) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v38 = v37;
        }
        if (v38)
        {
          unint64_t v39 = (char *)sub_21610FD44((uint64_t)&v77, v38);
          uint64_t v34 = __p;
          uint64_t v31 = (char *)v76;
        }
        else
        {
          unint64_t v39 = 0;
        }
        int v40 = &v39[2 * v36];
        *(_WORD *)int v40 = v32;
        uint64_t v33 = v40 + 2;
        while (v31 != v34)
        {
          __int16 v41 = *((_WORD *)v31 - 1);
          v31 -= 2;
          *((_WORD *)v40 - 1) = v41;
          v40 -= 2;
        }
        std::string __p = v40;
        unint64_t v77 = &v39[2 * v38];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(_WORD *)uint64_t v31 = v32;
        uint64_t v33 = v31 + 2;
      }
      uint64_t v76 = (uint64_t)v33;
      ++v29;
      uint64_t v30 = *a6;
      uint64_t v31 = v33;
    }
    while (v29 < (a6[1] - *a6) >> 3);
  }
  unint64_t v42 = a7[2];
  uint64_t v43 = (void *)a7[1];
  if ((unint64_t)v43 >= v42)
  {
    unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v43 - *a7) >> 3);
    if (v65 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *a7) >> 3);
    uint64_t v67 = 2 * v66;
    if (2 * v66 <= v65 + 1) {
      uint64_t v67 = v65 + 1;
    }
    if (v66 >= 0x555555555555555) {
      unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v68 = v67;
    }
    uint64_t v81 = a7 + 2;
    if (v68) {
      unint64_t v69 = (char *)sub_216129BFC((uint64_t)(a7 + 2), v68);
    }
    else {
      unint64_t v69 = 0;
    }
    unint64_t v70 = &v69[24 * v65];
    v78[0] = v69;
    v78[1] = v70;
    uint64_t v79 = v70;
    size_t v80 = &v69[24 * v68];
    *(void *)unint64_t v70 = 0;
    *((void *)v70 + 1) = 0;
    *((void *)v70 + 2) = 0;
    sub_216182F50(v70, __p, v76, (v76 - (uint64_t)__p) >> 1);
    v79 += 24;
    sub_2162A661C(a7, v78);
    unsigned __int8 v44 = (void *)a7[1];
    sub_216140FCC((uint64_t)v78);
  }
  else
  {
    void *v43 = 0;
    v43[1] = 0;
    v43[2] = 0;
    sub_216182F50(v43, __p, v76, (v76 - (uint64_t)__p) >> 1);
    unsigned __int8 v44 = v43 + 3;
    a7[1] = (uint64_t)(v43 + 3);
  }
  a7[1] = (uint64_t)v44;
  if (__p) {
    operator delete(__p);
  }
}

void sub_21631C744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  *(void *)(v19 + 8) = v18;
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_21631C784(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) != 1) {
    return &stru_26C6FB1C0;
  }
  uint64_t v1 = *(const UniChar **)(a1 + 48);
  uint64_t v2 = *(const UniChar **)(a1 + 56);
  uint64_t v3 = (char *)v2 - (char *)v1;
  if (v2 == v1)
  {
    CFIndex v4 = 0;
  }
  else
  {
    CFIndex v4 = 0;
    unint64_t v5 = v3 >> 1;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    while (v1[v4] - 10123 >= 8)
    {
      if (v5 == ++v4)
      {
        CFIndex v4 = v5;
        break;
      }
    }
  }
  if (v1) {
    CFIndex v7 = v4;
  }
  else {
    CFIndex v7 = 0;
  }
  return CFStringCreateWithCharacters(0, v1, v7);
}

__CFArray *sub_21631C7F4(uint64_t a1, const __CFArray *a2, CFStringRef theString, const __CFArray *a4, uint64_t *a5)
{
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t Length = CFStringGetLength(theString);
  CFArrayRef otherArray = a2;
  CFIndex Count = CFArrayGetCount(a2);
  CFArrayRef theArray = a4;
  unint64_t v14 = CFArrayGetCount(a4);
  uint64_t v16 = *a5;
  uint64_t v15 = a5[1];
  unint64_t v62 = Count;
  if (v15 != *a5 && Count != 0 && Length != 0 && v10 != v11 && v14 != 0)
  {
    CFStringRef str = theString;
    uint64_t v58 = a1;
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    CFIndex v24 = 0;
    BOOL v25 = 0;
    unint64_t v26 = 0;
    unint64_t v27 = 0;
    unint64_t v28 = (v10 - v11) >> 3;
    unint64_t v60 = v14;
    do
    {
      int v29 = *(_DWORD *)(v16 + 4 * v24);
      if (v29 != 2)
      {
        if (v25)
        {
          unint64_t v22 = sub_21631CE4C(otherArray, v22, v62);
          do
          {
            unint64_t v30 = v27 + 1;
            BOOL v31 = *(_DWORD *)(*(void *)(*(void *)(v58 + 8) + 8 * v27) + 168) != 2 || v27 >= v28;
            ++v27;
          }
          while (!v31);
          unint64_t v27 = v30 - 1;
        }
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v24);
        CFIndex valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr);
        v27 += (unint64_t)valuePtr;
        v22 += (unint64_t)valuePtr;
        v23 += (unint64_t)valuePtr;
        ++v26;
        uint64_t v16 = *a5;
        uint64_t v15 = a5[1];
        unint64_t v14 = v60;
      }
      if (++v24 >= (unint64_t)((v15 - v16) >> 2)) {
        break;
      }
      if (v22 >= v62) {
        break;
      }
      if (Length <= v23) {
        break;
      }
      if (v27 >= v28) {
        break;
      }
      BOOL v25 = v29 == 2;
    }
    while (v14 > v26);
    if (v24 == (v15 - v16) >> 2)
    {
      CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
      if (v29 == 2)
      {
        v73.CFIndex length = Length - v23;
        v73.location = v23;
        CFStringRef v34 = CFStringCreateWithSubstring(v33, str, v73);
        CFStringRef v66 = v34;
        uint64_t v35 = CFArrayCreateMutable(v33, 0, MEMORY[0x263EFFF70]);
        unint64_t v65 = v35;
        v74.CFIndex length = v60 - v26;
        v74.location = v26;
        CFArrayAppendArray(v35, theArray, v74);
        if (v34) {
          BOOL v36 = v35 == 0;
        }
        else {
          BOOL v36 = 1;
        }
        if (v36) {
          goto LABEL_52;
        }
        uint64_t v38 = *(void *)(v58 + 8);
        uint64_t v37 = *(void *)(v58 + 16);
        CFIndex v39 = CFArrayGetCount(v35);
        unint64_t v40 = (v37 - v38) >> 3;
        if (v39 + v27 >= v40 || v40 <= v27) {
          goto LABEL_52;
        }
        unint64_t v41 = 0;
        while (*(_DWORD *)(*(void *)(*(void *)(v58 + 8) + 8 * v27 + 8 * v41) + 168) == 2)
        {
          ++v41;
          if (!(v27 - v40 + v41))
          {
            unint64_t v41 = v40 - v27;
            goto LABEL_46;
          }
        }
        unint64_t v40 = v27 + v41;
LABEL_46:
        if (!v41 || CFArrayGetCount(v35) >= v41)
        {
LABEL_52:
          long long v63 = 0uLL;
          uint64_t v64 = 0;
        }
        else
        {
          sub_21631BE74(v35, v34, 0xFFFFFFFFFFFFFFFFLL, &valuePtr);
          if (valuePtr == v71)
          {
            long long v63 = 0uLL;
            uint64_t v64 = 0;
          }
          else
          {
            uint64_t v42 = v58;
            CFStringRef v43 = v34;
            unsigned int v44 = (*(_DWORD *)(v42 + 40) < 6u) & (0x18u >> *(_DWORD *)(v42 + 40));
            if (v39 == 1
              && ((uint64_t v45 = *(void *)(*(void *)(v58 + 8) + 8 * (v40 - 1)),
                   *(void **)(v45 + 16) != sub_21631CF04(*(void **)(v45 + 8), *(void **)(v45 + 16), &valuePtr, v41))|| (uint64_t v42 = v58, v44)&& (v47 = *(void *)(*(void *)(v58 + 8) + 8 * (v40 - 1)), v48 = sub_21631CF04(*(void **)(v47 + 32), *(void **)(v47 + 40), &valuePtr, v41), uint64_t v42 = v58, *(void **)(v47 + 40) != v48)))
            {
              long long v63 = 0uLL;
              uint64_t v64 = 0;
              CFStringRef v34 = v43;
            }
            else
            {
              uint64_t v49 = *(void **)(*(void *)(v42 + 8) + 8 * v27);
              unint64_t v50 = (uint64_t *)v49[1];
              unint64_t v51 = (uint64_t *)v49[2];
              if (v50 != v51)
              {
                while (*(unsigned __int16 *)(*(void *)(*v50 + 8) + 2) != *valuePtr)
                {
                  v50 += 2;
                  if (v50 == v51) {
                    goto LABEL_69;
                  }
                }
              }
              if (v50 == v51) {
LABEL_69:
              }
                uint64_t v52 = 0;
              else {
                uint64_t v52 = *v50;
              }
              CFStringRef v34 = v43;
              char v53 = v44 ^ 1;
              if (v52) {
                char v53 = 1;
              }
              if ((v53 & 1) == 0)
              {
                unint64_t v55 = (uint64_t *)v49[4];
                uint64_t v54 = (uint64_t *)v49[5];
                if (v55 != v54)
                {
                  while (*(unsigned __int16 *)(*(void *)(*v55 + 8) + 2) != *valuePtr)
                  {
                    v55 += 2;
                    if (v55 == v54) {
                      goto LABEL_79;
                    }
                  }
                }
                if (v55 == v54) {
LABEL_79:
                }
                  uint64_t v52 = 0;
                else {
                  uint64_t v52 = *v55;
                }
              }
              memset(__p, 0, sizeof(__p));
              long long v67 = 0uLL;
              uint64_t v68 = 0;
              LOBYTE(v72[0]) = 0;
              sub_21631C200(v27, v27, v40, v52, &valuePtr, (char **)__p, (uint64_t *)&v67, v72);
              if (LOBYTE(v72[0]))
              {
                uint64_t v56 = &v63;
              }
              else
              {
                long long v63 = v67;
                uint64_t v64 = v68;
                uint64_t v56 = &v67;
              }
              *(void *)uint64_t v56 = 0;
              *((void *)v56 + 1) = 0;
              *((void *)v56 + 2) = 0;
              v72[0] = (void **)&v67;
              sub_21613F444(v72);
              if (__p[0]) {
                operator delete(__p[0]);
              }
            }
          }
          if (valuePtr)
          {
            uint64_t v71 = valuePtr;
            operator delete(valuePtr);
          }
          if ((void)v63 != *((void *)&v63 + 1)) {
            operator new();
          }
        }
        unint64_t v22 = sub_21631CE4C(otherArray, v22, v62);
        CFIndex valuePtr = (unsigned __int16 *)&v63;
        sub_21613F444((void ***)&valuePtr);
        if (v35) {
          CFRelease(v35);
        }
        if (v34) {
          CFRelease(v34);
        }
      }
      goto LABEL_57;
    }
    return 0;
  }
  if (v15 != v16) {
    return 0;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  unint64_t v22 = 0;
LABEL_57:
  if (v62 > v22)
  {
    v75.location = v22;
    v75.CFIndex length = v62 - v22;
    CFArrayAppendArray(Mutable, otherArray, v75);
  }
  return Mutable;
}

void sub_21631CD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  unint64_t v27 = *(void **)(v25 - 120);
  if (v27)
  {
    *(void *)(v25 - 112) = v27;
    operator delete(v27);
  }
  sub_2161BE0C8(&a19, 0);
  sub_2161868BC(&a20, 0);
  _Unwind_Resume(a1);
}

CFIndex sub_21631CE4C(CFArrayRef theArray, unint64_t idx, unint64_t a3)
{
  CFIndex v3 = idx;
  if (idx < a3)
  {
    while (1)
    {
      CFNumberRef ValueAtIndex = (unsigned int (****)(void))CFArrayGetValueAtIndex(theArray, v3);
      if (!(**ValueAtIndex[3])(ValueAtIndex[3]) || (**ValueAtIndex[3])(ValueAtIndex[3]) == 1) {
        break;
      }
      if (a3 == ++v3) {
        return a3;
      }
    }
  }
  return v3;
}

void *sub_21631CF04(void *a1, void *a2, unsigned __int16 **a3, uint64_t a4)
{
  CFIndex v4 = a1;
  if (a1 != a2)
  {
    while (*(unsigned __int16 *)(*(void *)(*v4 + 8) + 2) != **a3
         || a4 != (*(unsigned int (**)(void))(*(void *)*v4 + 40))(*v4))
    {
      v4 += 2;
      if (v4 == a2) {
        return a2;
      }
    }
  }
  return v4;
}

void sub_21631CF9C(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 840))
  {
    if (sub_216277498(*(void **)(a1 + 864), a2, a3) && a3 != 0)
    {
      sub_21631BA98((void *)a1, 2);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 832);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 824);
    if (v8)
    {
      sub_216270DBC(v8, a2, a3);
      if (a3)
      {
        sub_21631B744(a1, 2);
      }
    }
  }
}

uint64_t sub_21631D084(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[103];
  if (v6)
  {
    sub_216129D20((uint64_t *)(v6 + 144));
    *(_DWORD *)(v6 + 192) = 0;
    sub_21618C36C((uint64_t *)v6);
  }
  uint64_t v7 = a1[108];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  uint64_t result = a1[104];
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 24))(result, a2, a3);
    if (a3)
    {
      return sub_21631B744((uint64_t)a1, 1);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_21631D160(uint64_t a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 800) > a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a4 <= 4)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if ((*(void *)(a1 + 16) - v8) >> 3 > a2)
    {
      uint64_t v11 = *(void **)(v8 + 8 * a2);
      uint64_t v12 = *a3;
      uint64_t v13 = sub_21621ED78(v11, *a3, 1);
      unint64_t v14 = (void *)v13;
      unsigned int v15 = *(_DWORD *)(a1 + 40) - 3;
      if (v15 >= 2)
      {
        if (!v13) {
          return 0;
        }
      }
      else if (!v13)
      {
        uint64_t result = sub_21621ED78(v11, word_216390FAE[v12 - 428], 0);
        unint64_t v14 = (void *)result;
        if (!result) {
          return result;
        }
      }
      unint64_t v16 = a4 - 2;
      if (a4 == 2)
      {
LABEL_31:
        unint64_t v22 = (void *)v14[6];
        if (v22)
        {
          uint64_t v23 = a3[a4 - 1];
          do
          {
            CFIndex v24 = (void *)v22[2];
            if (!a5 || (*(unsigned int (**)(void))(*v24 + 40))(v22[2]) == a5)
            {
              int v25 = *(unsigned __int16 *)(v24[1] + 2);
              if (v15 > 1)
              {
                if (v25 == v23) {
                  return v22 != 0;
                }
              }
              else if (v25 == word_216390FAE[v23 - 428] || v25 == v23)
              {
                return v22 != 0;
              }
            }
            unint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        return v22 != 0;
      }
      else
      {
        uint64_t v17 = 1;
        while (1)
        {
          if (v15 >= 2)
          {
            uint64_t result = (uint64_t)sub_21631EC0C(v14 + 9, a3[v17 + 1] + 542 * a3[v17]);
            if (!result) {
              break;
            }
          }
          if (a5 || v17 != v16)
          {
            uint64_t v18 = (void *)v14[6];
            if (v18)
            {
              uint64_t v19 = a3[v17];
              while (1)
              {
                unint64_t v14 = (void *)v18[2];
                int v20 = *(unsigned __int16 *)(v14[1] + 2);
                if (v15 > 1)
                {
                  if (v20 == v19) {
                    goto LABEL_16;
                  }
                }
                else if (v20 == word_216390FAE[v19 - 428] || v20 == v19)
                {
                  goto LABEL_16;
                }
                uint64_t v18 = (void *)*v18;
                if (!v18) {
                  return 0;
                }
              }
            }
            return 0;
          }
LABEL_16:
          if (++v17 > v16)
          {
            if (!a5) {
              return 1;
            }
            goto LABEL_31;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_21631D388(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 760);
  uint64_t v4 = *(void *)(a1 + 768);
  if (v3 == v4) {
    return 0;
  }
  if (a3 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a3;
  }
  uint64_t v7 = v6 - 1;
  while (!a2 || !sub_216305364(a2, v3))
  {
    uint64_t result = 0;
    if (v7)
    {
      v3 += 24;
      --v7;
      if (v3 != v4) {
        continue;
      }
    }
    return result;
  }
  return 1;
}

uint64_t sub_21631D408(void *a1, const char *a2, const void *a3)
{
  sub_216140140((uint64_t)v37);
  uint64_t v6 = (char *)(*(uint64_t (**)(const void *, uint64_t))(*(void *)a3 + 16))(a3, 1);
  __s[1] = v6;
  sub_2161E2FFC((const __CFString *)v6, __s);
  uint64_t v7 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_26C6BAED0, (const struct __class_type_info *)&unk_26C6BAE20, 0);
  size_t v8 = strlen(a2);
  if (!v7)
  {
    unint64_t v27 = sub_216129E78(&v38, (uint64_t)a2, v8);
    unint64_t v28 = __s[0];
    size_t v29 = strlen(__s[0]);
    unint64_t v30 = sub_216129E78(v27, (uint64_t)__s[0], v29);
    sub_216129E78(v30, (uint64_t)", rawInputunint64_t Length = ", 19);
    (*(void (**)(const void *))(*(void *)a3 + 40))(a3);
    BOOL v31 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
    __int16 v32 = std::locale::use_facet(&v42, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v42);
    std::ostream::put();
    std::ostream::flush();
    sub_216178BC0((uint64_t)v39, a1);
    if (!v28) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  unint64_t v9 = sub_216129E78(&v38, (uint64_t)a2, v8);
  size_t v10 = strlen(__s[0]);
  uint64_t v11 = sub_216129E78(v9, (uint64_t)__s[0], v10);
  sub_216129E78(v11, (uint64_t)", separatorCFIndex Count = ", 19);
  uint64_t v12 = (void *)std::ostream::operator<<();
  sub_216129E78(v12, (uint64_t)", rawInputunint64_t Length = ", 19);
  (*(void (**)(const void *))(*(void *)a3 + 40))(a3);
  std::ostream::operator<<();
  if (v7[7]) {
    sub_216129E78(&v38, (uint64_t)" next: ", 7);
  }
  uint64_t v13 = v7 + 6;
  while (1)
  {
    uint64_t v13 = (void *)*v13;
    if (!v13) {
      break;
    }
    uint64_t v14 = v13[2];
    unsigned int v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
    size_t v16 = strlen(v15);
    uint64_t v17 = sub_216129E78(&v38, (uint64_t)v15, v16);
    sub_216129E78(v17, (uint64_t)"(", 1);
    (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
    uint64_t v18 = (void *)std::ostream::operator<<();
    sub_216129E78(v18, (uint64_t)"), ", 3);
  }
  if ((*(unsigned int (**)(void *))(*v7 + 64))(v7) == 2)
  {
    uint64_t v19 = sub_216129E78(&v38, (uint64_t)" (fuzzy), original = ", 21);
    uint64_t v20 = *((unsigned __int16 *)v7 + 56);
    uint64_t v21 = &(&off_2642710F0)[2 * v20];
    unint64_t v22 = &(&off_26426EF10)[2 * v20];
    if (*((_DWORD *)v7 + 5) == 2) {
      uint64_t v23 = (const char **)v21;
    }
    else {
      uint64_t v23 = (const char **)v22;
    }
    CFIndex v24 = *v23;
    size_t v25 = strlen(*v23);
    unint64_t v26 = sub_216129E78(v19, (uint64_t)v24, v25);
  }
  else
  {
    unint64_t v26 = &v38;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
  uint64_t v35 = std::locale::use_facet(&v42, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  sub_216178BC0((uint64_t)v39, a1);
  unint64_t v28 = __s[0];
  if (__s[0]) {
LABEL_13:
  }
    MEMORY[0x2166CA7C0](v28, 0x1000C8077774924);
LABEL_14:
  if (v6) {
    CFRelease(v6);
  }
  v37[0] = *MEMORY[0x263F8C2B8];
  uint64_t v33 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v37 + *(void *)(v37[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v38 = v33;
  v39[0] = MEMORY[0x263F8C318] + 16;
  if (v40 < 0) {
    operator delete((void *)v39[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166CA750](&v41);
}

void sub_21631D9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  if (a2) {
    MEMORY[0x2166CA7C0](a2, 0x1000C8077774924);
  }
  sub_2161868BC((const void **)va, 0);
  sub_216140418((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_21631DA2C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_21631DA80(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_21631DA80(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_21631DAEC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21631DB68(uint64_t result, uint64_t *a2, uint64_t (**a3)(void), uint64_t a4, char a5)
{
  size_t v10 = (uint64_t *)result;
  while (2)
  {
    uint64_t v11 = a2 - 1;
    unint64_t v84 = a2 - 2;
    size_t v87 = a2;
    uint64_t v82 = a2 - 3;
    uint64_t v12 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          size_t v10 = v12;
          uint64_t v13 = v87;
          uint64_t v14 = (char *)v87 - (char *)v12;
          uint64_t v15 = v87 - v12;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t result = ((uint64_t (*)(void, uint64_t))*a3)(*(v87 - 1), *v10);
                if (result)
                {
                  uint64_t v42 = *v10;
                  *size_t v10 = *(v87 - 1);
                  *(v87 - 1) = v42;
                }
                break;
              case 3:
                uint64_t result = sub_216188F38(v10, v10 + 1, v11, a3);
                break;
              case 4:
                uint64_t result = sub_2161891E4(v10, v10 + 1, v10 + 2, v11, a3);
                break;
              case 5:
                uint64_t result = sub_216189298(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            CFStringRef v43 = v10 + 1;
            BOOL v45 = v10 == v87 || v43 == v87;
            if (a5)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                uint64_t v47 = v10;
                do
                {
                  uint64_t v49 = *v47;
                  uint64_t v48 = v47[1];
                  uint64_t v47 = v43;
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v48, v49);
                  if (result)
                  {
                    uint64_t v50 = *v47;
                    uint64_t v51 = v46;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v51 + 8) = *(uint64_t *)((char *)v10 + v51);
                      if (!v51) {
                        break;
                      }
                      uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v50, *(uint64_t *)((char *)v10 + v51 - 8));
                      v51 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v52 = (uint64_t *)((char *)v10 + v51 + 8);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v52 = v10;
LABEL_81:
                    uint64_t *v52 = v50;
                  }
                  CFStringRef v43 = v47 + 1;
                  v46 += 8;
                }
                while (v47 + 1 != v87);
              }
            }
            else if (!v45)
            {
              do
              {
                uint64_t v77 = *v10;
                uint64_t v76 = v10[1];
                size_t v10 = v43;
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v76, v77);
                if (result)
                {
                  uint64_t v78 = *v10;
                  uint64_t v79 = v10;
                  do
                  {
                    size_t v80 = v79;
                    uint64_t v81 = *--v79;
                    *size_t v80 = v81;
                    uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v78, *(v80 - 2));
                  }
                  while ((result & 1) != 0);
                  *uint64_t v79 = v78;
                }
                CFStringRef v43 = v10 + 1;
              }
              while (v10 + 1 != v87);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != v87)
            {
              int64_t v53 = (unint64_t)(v15 - 2) >> 1;
              int64_t v85 = v53;
              do
              {
                int64_t v54 = v53;
                if (v85 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  uint64_t v56 = &v10[v55];
                  if (2 * v53 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                  {
                    ++v56;
                    uint64_t v55 = 2 * v54 + 2;
                  }
                  uint64_t v57 = &v10[v54];
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, *v57);
                  if ((result & 1) == 0)
                  {
                    int64_t v83 = v54;
                    uint64_t v58 = *v57;
                    do
                    {
                      char v59 = v56;
                      *uint64_t v57 = *v56;
                      if (v85 < v55) {
                        break;
                      }
                      uint64_t v60 = (2 * v55) | 1;
                      uint64_t v56 = &v10[v60];
                      if (2 * v55 + 2 < v15 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v56, v56[1]))
                      {
                        ++v56;
                        uint64_t v60 = 2 * v55 + 2;
                      }
                      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v56, v58);
                      uint64_t v57 = v59;
                      uint64_t v55 = v60;
                    }
                    while (!result);
                    *char v59 = v58;
                    uint64_t v13 = v87;
                    int64_t v54 = v83;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              uint64_t v61 = (unint64_t)v14 >> 3;
              do
              {
                unint64_t v62 = v13;
                uint64_t v63 = 0;
                uint64_t v64 = v61 - 2;
                uint64_t v86 = *v10;
                if (v61 < 2) {
                  uint64_t v64 = v61 - 1;
                }
                uint64_t v65 = v64 >> 1;
                CFStringRef v66 = v10;
                do
                {
                  long long v67 = &v66[v63 + 1];
                  uint64_t v68 = (2 * v63) | 1;
                  uint64_t v69 = 2 * v63 + 2;
                  if (v69 < v61)
                  {
                    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v66[v63 + 1], v66[v63 + 2]);
                    if (result)
                    {
                      ++v67;
                      uint64_t v68 = v69;
                    }
                  }
                  *CFStringRef v66 = *v67;
                  CFStringRef v66 = v67;
                  uint64_t v63 = v68;
                }
                while (v68 <= v65);
                uint64_t v13 = v62 - 1;
                if (v67 == v62 - 1)
                {
                  *long long v67 = v86;
                }
                else
                {
                  *long long v67 = *v13;
                  uint64_t *v13 = v86;
                  uint64_t v70 = (char *)v67 - (char *)v10 + 8;
                  if (v70 >= 9)
                  {
                    unint64_t v71 = (((unint64_t)v70 >> 3) - 2) >> 1;
                    uint64_t v72 = &v10[v71];
                    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, *v67);
                    if (result)
                    {
                      uint64_t v73 = *v67;
                      do
                      {
                        CFRange v74 = v72;
                        *long long v67 = *v72;
                        if (!v71) {
                          break;
                        }
                        unint64_t v71 = (v71 - 1) >> 1;
                        uint64_t v72 = &v10[v71];
                        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v72, v73);
                        long long v67 = v74;
                      }
                      while ((result & 1) != 0);
                      uint64_t *v74 = v73;
                    }
                  }
                }
              }
              while (v61-- > 2);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          uint64_t v17 = &v10[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            sub_216188F38(v17, v10, v11, a3);
          }
          else
          {
            sub_216188F38(v10, v17, v11, a3);
            sub_216188F38(v10 + 1, v17 - 1, v84, a3);
            sub_216188F38(v10 + 2, &v10[v16 + 1], v82, a3);
            uint64_t v13 = v87;
            sub_216188F38(v17 - 1, v17, &v10[v16 + 1], a3);
            uint64_t v18 = *v10;
            *size_t v10 = *v17;
            *uint64_t v17 = v18;
          }
          --a4;
          if (a5 & 1) != 0 || (((uint64_t (*)(void, uint64_t))*a3)(*(v10 - 1), *v10)) {
            break;
          }
          uint64_t v33 = *v10;
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v10, *v11);
          if (result)
          {
            uint64_t v12 = v10;
            do
            {
              uint64_t v34 = v12[1];
              ++v12;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v34);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v35 = v10 + 1;
            do
            {
              uint64_t v12 = v35;
              if (v35 >= v87) {
                break;
              }
              ++v35;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, *v12);
            }
            while (!result);
          }
          BOOL v36 = v87;
          if (v12 < v87)
          {
            BOOL v36 = v87;
            do
            {
              uint64_t v37 = *--v36;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v37);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v36)
          {
            uint64_t v38 = *v12;
            uint64_t *v12 = *v36;
            *BOOL v36 = v38;
            do
            {
              uint64_t v39 = v12[1];
              ++v12;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v33, v39));
            do
            {
              uint64_t v40 = *--v36;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v40);
            }
            while ((result & 1) != 0);
          }
          uint64_t v41 = v12 - 1;
          BOOL v5 = v12 - 1 >= v10;
          BOOL v6 = v12 - 1 == v10;
          if (v12 - 1 != v10) {
            *size_t v10 = *v41;
          }
          a5 = 0;
          *uint64_t v41 = v33;
        }
        uint64_t v19 = 0;
        uint64_t v20 = *v10;
        do
          char v21 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[++v19], v20);
        while ((v21 & 1) != 0);
        unint64_t v22 = &v10[v19];
        uint64_t v23 = v13;
        if (v19 == 1)
        {
          uint64_t v23 = v13;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v25 = *--v23;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v25, v20) & 1) == 0);
        }
        else
        {
          do
            uint64_t v24 = *--v23;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v24, v20));
        }
        if (v22 >= v23)
        {
          BOOL v31 = v22 - 1;
        }
        else
        {
          unint64_t v26 = &v10[v19];
          unint64_t v27 = v23;
          do
          {
            uint64_t v28 = *v26;
            *unint64_t v26 = *v27;
            *unint64_t v27 = v28;
            do
            {
              uint64_t v29 = v26[1];
              ++v26;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v20) & 1) != 0);
            do
              uint64_t v30 = *--v27;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v30, v20));
          }
          while (v26 < v27);
          BOOL v31 = v26 - 1;
        }
        if (v31 != v10) {
          *size_t v10 = *v31;
        }
        *BOOL v31 = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        uint64_t result = sub_21631DB68(v10, v31, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v31 + 1;
      }
      BOOL v32 = sub_21631E314(v10, v31, a3);
      uint64_t v12 = v31 + 1;
      uint64_t result = sub_21631E314(v31 + 1, v87, a3);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v31;
    if (!v32) {
      continue;
    }
    return result;
  }
}

BOOL sub_21631E314(void *a1, void *a2, uint64_t (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_216188F38(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_2161891E4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_216189298(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unint64_t v9 = a1 + 2;
      sub_216188F38(a1, a1 + 1, a1 + 2, a3);
      size_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          unint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      void *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

void *sub_21631E4DC(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_2161297B4(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  char v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *char v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    char v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_21631E71C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21631E730(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  int v12 = operator new(0x18uLL);
  void *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_2161297B4(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v12 = *v20;
LABEL_38:
    *uint64_t v20 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_21631E924(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21631E938(uint64_t a1)
{
  sub_21631E974(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21631E974(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      unint64_t v3 = (void *)v1[3];
      if (v3)
      {
        v1[4] = v3;
        operator delete(v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t sub_21631E9C0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_216273214(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21631EA10(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_21631E974(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_21631EA68(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  unint64_t v3 = *(void **)a1;
  if (!v2)
  {
    char v5 = -62;
    unint64_t v6 = 39;
LABEL_8:
    bzero(v3, 8 * v6);
    goto LABEL_9;
  }
  if ((64 - v2) >= 0x9C2uLL) {
    unint64_t v4 = 2498;
  }
  else {
    unint64_t v4 = (64 - v2);
  }
  *v3++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v4)) & (-1 << v2));
  char v5 = -62 - v4;
  *(void *)a1 = v3;
  unint64_t v6 = (2498 - v4) >> 6;
  if (v4 <= 0x982) {
    goto LABEL_8;
  }
LABEL_9:
  if ((v5 & 0x3F) != 0)
  {
    unint64_t v7 = &v3[v6];
    *(void *)a1 = v7;
    *v7 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
  }
}

void sub_21631EB28()
{
}

void *sub_21631EB3C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C8280;
  result[1] = v3;
  return result;
}

uint64_t sub_21631EB84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C8280;
  a2[1] = v2;
  return result;
}

uint64_t sub_21631EBB0(uint64_t a1, unsigned __int16 *a2)
{
  return sub_216312C3C(*(_DWORD *)(*(void *)(a1 + 8) + 40), *a2);
}

uint64_t sub_21631EBC0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC960)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21631EC00()
{
  return &unk_26C6BC960;
}

void *sub_21631EC0C(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  char v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_21631ECBC(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v5;
  }
  uint8x8_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_21631EDA4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C97E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21631EDC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C97E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21631EE18(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21631EE40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C97A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21631EE60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C97A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21631EEB4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21631EEDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21631EEFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9850;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21631EF50(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21631EF78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C96C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21631EF98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C96C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21631EFEC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21631F014(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21631F034(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21631F088(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *sub_21631F0B0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_2163191C4(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_21631F0F0(_Unwind_Exception *a1)
{
  sub_21612A250(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_21631F108(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_21631F170(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21631F1AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21631F1E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21631F214(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC148)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_21631F258(uint64_t *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v12 = a1 + 2;
  unint64_t v10 = operator new(0x30uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[4] = 0;
  void v10[5] = 0;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          uint64_t v19 = operator new(8 * *(void *)&prime);
          uint64_t v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          unint64_t v22 = (void *)*v12;
          if (*v12)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v23) = v12;
            uint64_t v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*a1 + 8 * v29))
                  {
                    *(void *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *unint64_t v22 = *v28;
                  *uint64_t v28 = **(void **)(*a1 + 8 * v29);
                  **(void **)(*a1 + 8 * v29) = v28;
                  uint64_t v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                unint64_t v22 = v28;
                uint64_t v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v30 = *a1;
  BOOL v31 = *(void **)(*a1 + 8 * v3);
  if (v31)
  {
    *unint64_t v10 = *v31;
LABEL_72:
    *BOOL v31 = v10;
    goto LABEL_73;
  }
  *unint64_t v10 = *v12;
  void *v12 = v10;
  *(void *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    BOOL v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_21631F640(_Unwind_Exception *a1)
{
  sub_2161E60D0(1, v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21631F658(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  unint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void sub_21631F70C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21631F72C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6C9700;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21631F780(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21631F7A8(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    sub_2160FFA74();
  }
  unint64_t v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint8x8_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    float v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint8x8_t v8 = *v14;
          void *v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          float v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint8x8_t v8 = v14;
        float v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void sub_21631F9A8()
{
}

__n128 sub_21631F9BC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v2 = &unk_26C6C82D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_21631FA18(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C82D8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4sub_21617DB94((const void **)&__p, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21631FA58(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4)
{
  uint64_t v6 = *a2;
  double v7 = *a4;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 24);
  uint8x8_t v10 = *(float **)(v9 + 8);
  unint64_t v11 = *(void *)(v9 + 16);
  if ((unint64_t)v10 >= v11)
  {
    float v14 = *(float **)v9;
    uint64_t v15 = ((uint64_t)v10 - *(void *)v9) >> 2;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      sub_21610CB04();
    }
    uint64_t v17 = v11 - (void)v14;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      uint64_t v19 = (char *)sub_2161129B4(v9 + 16, v18);
      float v14 = *(float **)v9;
      uint8x8_t v10 = *(float **)(v9 + 8);
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (float *)&v19[4 * v15];
    uint64_t v21 = &v19[4 * v18];
    float v22 = v7;
    *uint64_t v20 = v22;
    uint64_t v13 = v20 + 1;
    while (v10 != v14)
    {
      int v23 = *((_DWORD *)v10-- - 1);
      *((_DWORD *)v20-- - 1) = v23;
    }
    *(void *)uint64_t v9 = v20;
    *(void *)(v9 + 8) = v13;
    *(void *)(v9 + 16) = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    float v12 = v7;
    *uint8x8_t v10 = v12;
    uint64_t v13 = v10 + 1;
  }
  *(void *)(v9 + 8) = v13;
  uint64_t v24 = *(void *)(*(void *)v6 + 72);
  if (v24) {
    __int16 v25 = *(_WORD *)(v24 + 2);
  }
  else {
    __int16 v25 = 0;
  }
  uint8x8_t v26 = (char *)operator new(2uLL);
  *(_WORD *)uint8x8_t v26 = v25;
  uint64_t v27 = v26 + 2;
  uint64_t v65 = v26 + 2;
  CFStringRef v66 = v26 + 2;
  std::string __p = v26;
  uint64_t v28 = *(void **)(v6 + 8);
  if (!v28) {
    goto LABEL_47;
  }
  uint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
  while (!(*(unsigned int (**)(void))(*(void *)*v28 + 24))())
  {
    uint64_t v29 = *(void *)(*v28 + 72);
    if (v29) {
      __int16 v30 = *(_WORD *)(v29 + 2);
    }
    else {
      __int16 v30 = 0;
    }
    BOOL v31 = v65;
    if (v65 >= v66)
    {
      unint64_t v32 = (char *)__p;
      uint64_t v33 = v65 - (unsigned char *)__p;
      if (v65 - (unsigned char *)__p <= -3) {
        sub_21610CB04();
      }
      uint64_t v34 = v33 >> 1;
      if (v66 - (unsigned char *)__p <= (unint64_t)((v33 >> 1) + 1)) {
        uint64_t v35 = v34 + 1;
      }
      else {
        uint64_t v35 = v66 - (unsigned char *)__p;
      }
      if ((unint64_t)(v66 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v36 = v35;
      }
      if (v36)
      {
        uint64_t v37 = (char *)sub_21610FD44((uint64_t)&v66, v36);
        unint64_t v32 = (char *)__p;
        BOOL v31 = v65;
      }
      else
      {
        uint64_t v37 = 0;
      }
      uint64_t v38 = &v37[2 * v34];
      *(_WORD *)uint64_t v38 = v30;
      uint64_t v27 = v38 + 2;
      while (v31 != v32)
      {
        __int16 v39 = *((_WORD *)v31 - 1);
        v31 -= 2;
        *((_WORD *)v38 - 1) = v39;
        v38 -= 2;
      }
      std::string __p = v38;
      uint64_t v65 = v27;
      CFStringRef v66 = &v37[2 * v36];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(_WORD *)uint64_t v65 = v30;
      uint64_t v27 = v31 + 2;
    }
    uint64_t v65 = v27;
    uint64_t v28 = (void *)v28[1];
    if (!v28) {
      goto LABEL_46;
    }
  }
  uint64_t v27 = v65;
LABEL_46:
  uint8x8_t v26 = (char *)__p;
  if (__p != v27)
  {
LABEL_47:
    unint64_t v40 = (v27 - v26) >> 1;
    uint64_t v41 = *(unint64_t **)(a1 + 32);
    if (v40 <= *v41) {
      unint64_t v40 = *v41;
    }
    *uint64_t v41 = v40;
    uint64_t v42 = v27 - 2;
    if (v27 - 2 > v26)
    {
      CFStringRef v43 = v26 + 2;
      do
      {
        __int16 v44 = *((_WORD *)v43 - 1);
        *((_WORD *)v43 - 1) = *(_WORD *)v42;
        *(_WORD *)uint64_t v42 = v44;
        v42 -= 2;
        BOOL v45 = v43 >= v42;
        v43 += 2;
      }
      while (!v45);
    }
    sub_21631B534(*(uint64_t **)(a1 + 16), (uint64_t)&__p);
  }
  if (*(unsigned char *)(a1 + 40))
  {
    double v46 = *(double *)(v6 + 56);
    double v47 = *(double *)(v6 + 32);
    uint64_t v48 = (uint64_t *)(v8 + 720);
    unint64_t v49 = *(void *)(v6 + 64);
    unint64_t v50 = *(void *)(v8 + 728);
    if (v50)
    {
      uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
      v51.i16[0] = vaddlv_u8(v51);
      if (v51.u32[0] > 1uLL)
      {
        uint64_t v4 = v49;
        if (v50 <= v49) {
          uint64_t v4 = v49 % v50;
        }
      }
      else
      {
        uint64_t v4 = (v50 - 1) & v49;
      }
      uint64_t v52 = *(double ***)(*v48 + 8 * v4);
      if (v52)
      {
        for (uint64_t i = *v52; i; uint64_t i = *(double **)i)
        {
          unint64_t v54 = *((void *)i + 1);
          if (v54 == v49)
          {
            if (*((void *)i + 2) == v49) {
              goto LABEL_94;
            }
          }
          else
          {
            if (v51.u32[0] > 1uLL)
            {
              if (v54 >= v50) {
                v54 %= v50;
              }
            }
            else
            {
              v54 &= v50 - 1;
            }
            if (v54 != v4) {
              break;
            }
          }
        }
      }
    }
    uint64_t i = (double *)operator new(0x20uLL);
    double *i = 0.0;
    *((void *)i + 1) = v49;
    *((void *)i + 2) = v49;
    i[3] = 0.0;
    float v55 = (float)(unint64_t)(*(void *)(v8 + 744) + 1);
    float v56 = *(float *)(v8 + 752);
    if (!v50 || (float)(v56 * (float)v50) < v55)
    {
      BOOL v57 = 1;
      if (v50 >= 3) {
        BOOL v57 = (v50 & (v50 - 1)) != 0;
      }
      unint64_t v58 = v57 | (2 * v50);
      unint64_t v59 = vcvtps_u32_f32(v55 / v56);
      if (v58 <= v59) {
        size_t v60 = v59;
      }
      else {
        size_t v60 = v58;
      }
      sub_21631F7A8(v8 + 720, v60);
      unint64_t v50 = *(void *)(v8 + 728);
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v50 <= v49) {
          uint64_t v4 = v49 % v50;
        }
        else {
          uint64_t v4 = v49;
        }
      }
      else
      {
        uint64_t v4 = (v50 - 1) & v49;
      }
    }
    uint64_t v61 = *v48;
    unint64_t v62 = *(double ***)(*v48 + 8 * v4);
    if (v62)
    {
      *(void *)uint64_t i = *v62;
    }
    else
    {
      double *i = *(double *)(v8 + 736);
      *(void *)(v8 + 736) = i;
      *(void *)(v61 + 8 * v4) = v8 + 736;
      if (!*(void *)i) {
        goto LABEL_93;
      }
      unint64_t v63 = *(void *)(*(void *)i + 8);
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v63 >= v50) {
          v63 %= v50;
        }
      }
      else
      {
        v63 &= v50 - 1;
      }
      unint64_t v62 = (double **)(*v48 + 8 * v63);
    }
    uint64_t *v62 = i;
LABEL_93:
    ++*(void *)(v8 + 744);
LABEL_94:
    i[3] = v46 - v47;
  }
  if (__p)
  {
    uint64_t v65 = (char *)__p;
    operator delete(__p);
  }
}

void sub_21631FF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21631FF40(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC970)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21631FF80()
{
  return &unk_26C6BC970;
}

void sub_21631FF8C(void *a1, unint64_t a2)
{
  long long v3 = sub_21631ECBC(a1, a2);
  if (!v3) {
    return;
  }
  int8x8_t v4 = (int8x8_t)a1[1];
  uint64_t v5 = *v3;
  unint64_t v6 = v3[1];
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    if (v6 >= *(void *)&v4) {
      v6 %= *(void *)&v4;
    }
  }
  else
  {
    v6 &= *(void *)&v4 - 1;
  }
  uint64_t v8 = *(uint64_t **)(*a1 + 8 * v6);
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = (uint64_t *)*v8;
  }
  while (v8 != v3);
  if (v9 == a1 + 2) {
    goto LABEL_20;
  }
  unint64_t v10 = v9[1];
  if (v7.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
  }
  else
  {
    v10 &= *(void *)&v4 - 1;
  }
  if (v10 != v6)
  {
LABEL_20:
    if (v5)
    {
      unint64_t v11 = *(void *)(v5 + 8);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v12 = *(void *)(v5 + 8);
        if (v11 >= *(void *)&v4) {
          unint64_t v12 = v11 % *(void *)&v4;
        }
      }
      else
      {
        unint64_t v12 = v11 & (*(void *)&v4 - 1);
      }
      if (v12 == v6) {
        goto LABEL_24;
      }
    }
    *(void *)(*a1 + 8 * v6) = 0;
    uint64_t v5 = *v3;
  }
  if (v5)
  {
    unint64_t v11 = *(void *)(v5 + 8);
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v4) {
        v11 %= *(void *)&v4;
      }
    }
    else
    {
      v11 &= *(void *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(void *)(*a1 + 8 * v11) = v9;
      uint64_t v5 = *v3;
    }
  }
  *uint64_t v9 = v5;
  *long long v3 = 0;
  --a1[3];

  operator delete(v3);
}

uint64_t sub_2163200F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_26C6C5938;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 2sub_21617DB94((const void **)&__p, 0) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = a1 + 32;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  sub_2161297B4(a1 + 32, *(void *)(a2 + 40));
  for (uint64_t i = *(void **)(a2 + 48); i; uint64_t i = (void *)*i)
    sub_21631E4DC(v5, i + 2, i + 2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  sub_2161297B4(a1 + 72, *(void *)(a2 + 80));
  for (unsigned __int16 j = *(void **)(a2 + 88); j; unsigned __int16 j = (void *)*j)
    sub_216254608(a1 + 72, j + 2, j + 2);
  return a1;
}

void sub_2163201EC(_Unwind_Exception *a1)
{
  sub_216144C28(v2);
  sub_216144C28(v1);
  _Unwind_Resume(a1);
}

void *sub_216320218(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v2 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v2);
  return a1;
}

void sub_21632026C(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v1 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v1);

  JUMPOUT(0x2166CA800);
}

const char *sub_2163202E0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if (v1 == 1) {
    return "";
  }
  if (v1 == 2)
  {
    uint64_t v2 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 2);
    long long v3 = &off_2642710F0;
  }
  else
  {
    uint64_t v2 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 2);
    long long v3 = &off_26426EF10;
  }
  return v3[2 * v2];
}

CFStringRef sub_216320330(uint64_t a1, int a2)
{
  CFStringRef v4 = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(*(void *)(a1 + 8) + 2), *(_DWORD *)(a1 + 20));
  CFStringRef v5 = v4;
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v6 = a2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    return CFStringCreateCopy(0, v4);
  }
  else
  {
    CFIndex Length = CFStringGetLength(v4);
    MutableCFStringRef Copy = CFStringCreateMutableCopy(0, Length + *(unsigned __int8 *)(a1 + 16), v5);
    if (*(unsigned char *)(a1 + 16))
    {
      unsigned int v10 = 0;
      do
      {
        CFStringAppend(MutableCopy, @"'");
        ++v10;
      }
      while (v10 < *(unsigned __int8 *)(a1 + 16));
    }
    return MutableCopy;
  }
}

uint64_t sub_2163203FC(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  if (result != 1) {
    return 0;
  }
  int v3 = *(unsigned __int16 *)(a1[1] + 2);
  if (v3 != 4 && v3 != 55 && v3 != 77) {
    return 0;
  }
  return result;
}

uint64_t sub_21632046C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  int v2 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 2);
  uint64_t result = 1;
  if (v1 == 2)
  {
    if ((v2 - 143) < 2 || v2 == 334 || v2 == 757) {
      return result;
    }
    return 0;
  }
  if (v2 != 83 && v2 != 162 && v2 != 318) {
    return 0;
  }
  return result;
}

uint64_t sub_2163204C4(int *a1, int a2, char a3)
{
  if (a2 == 2)
  {
    if ((a3 & 1) != 0 || (sub_21632046C((uint64_t)a1) & 1) == 0) {
      return *(unsigned __int8 *)(*((void *)a1 + 1) + 4);
    }
    return 1;
  }
  if (a2 == 1)
  {
    if (a3) {
      return *(unsigned __int8 *)(*((void *)a1 + 1) + 4);
    }
    if (((*(uint64_t (**)(int *))(*(void *)a1 + 96))(a1) & 1) == 0)
    {
      if ((*(unsigned int (**)(int *))(*(void *)a1 + 64))(a1) != 9
        && ((*(unsigned int (**)(int *))(*(void *)a1 + 40))(a1) != 2
         || (*(unsigned int (**)(int *))(*(void *)a1 + 64))(a1) == 8))
      {
        return *(unsigned __int8 *)(*((void *)a1 + 1) + 4);
      }
      CFStringRef v7 = (const __CFString *)sub_2163101A8(*(unsigned __int16 *)(*((void *)a1 + 1) + 2), a1[5]);
      unsigned __int16 v8 = 0;
      while (1)
      {
        CFStringRef v9 = (const __CFString *)sub_2163101A8((unsigned __int16)(*(_WORD *)(*((void *)a1 + 1) + 5) + v8), a1[5]);
        if (!CFStringHasPrefix(v9, v7)) {
          break;
        }
        unsigned int v10 = v8++;
        unsigned __int16 v5 = 5;
        if (v10 >= 4) {
          return v5;
        }
      }
      return v8;
    }
    return 1;
  }
  if (a2) {
    return *(unsigned __int8 *)(*((void *)a1 + 1) + 4);
  }
  if (a3 & 1) == 0 && (sub_21632046C((uint64_t)a1)) {
    return 1;
  }
  if (((*(uint64_t (**)(int *))(*(void *)a1 + 64))(a1) & 0xFE) != 2) {
    return *(unsigned __int8 *)(*((void *)a1 + 1) + 4);
  }
  int v4 = *(unsigned __int16 *)(*((void *)a1 + 1) + 2);
  unsigned __int16 v5 = 16;
  if (v4 != 3 && v4 != 54)
  {
    if (v4 == 76) {
      return 17;
    }
    return *(unsigned __int8 *)(*((void *)a1 + 1) + 4);
  }
  return v5;
}

uint64_t sub_2163206B4(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1) & 0xFE) == 2 && *(_DWORD *)(a1 + 20) != 2)
  {
    int v4 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 2);
    switch(v4)
    {
      case 76:
        unsigned __int16 v5 = &unk_21639644C;
        return (unsigned __int16)v5[a2 + 1];
      case 54:
        unsigned __int16 v5 = &unk_21639642A;
        return (unsigned __int16)v5[a2 + 1];
      case 3:
        unsigned __int16 v5 = &unk_216396408;
        return (unsigned __int16)v5[a2 + 1];
    }
  }
  return (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 8) + 5) + a2);
}

uint64_t sub_216320770(uint64_t a1, unsigned int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1) & 0xFE) == 2
    && *(_DWORD *)(a1 + 20) != 2
    && ((int v4 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 2), v4 == 3) || v4 == 76 || v4 == 54))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 48))(a1, 0, 0);
    if (result)
    {
      unsigned int v6 = result;
      unsigned int v7 = 0;
      do
      {
        BOOL v8 = (*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 56))(a1, (unsigned __int16)v7) == a2;
        uint64_t result = v8;
        ++v7;
      }
      while (!v8 && v7 < v6);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8);
    unsigned int v11 = *(unsigned __int16 *)(v10 + 5);
    return v11 <= a2 && *(unsigned __int8 *)(v10 + 4) + v11 > a2;
  }
  return result;
}

uint64_t sub_2163208A0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = *(unsigned __int8 *)(v2 + 4);
  if (!*(unsigned char *)(v2 + 4)) {
    return 0;
  }
  int v6 = 0;
  while (1)
  {
    CFStringRef v7 = (const __CFString *)sub_2163101A8((unsigned __int16)(*(_WORD *)(*(void *)(a1 + 8) + 5) + v6), *(_DWORD *)(a1 + 20));
    if (v7)
    {
      CFStringRef v8 = v7;
      CFIndex Length = CFStringGetLength(v7);
      if (CFStringGetCharacterAtIndex(v8, Length - 1) == a2) {
        break;
      }
    }
    if (++v6 >= v3) {
      return 0;
    }
  }
  return 1;
}

void *sub_216320934(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v2 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v2);
  return a1;
}

void sub_216320988(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v1 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v1);

  JUMPOUT(0x2166CA800);
}

void *sub_2163209FC(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v2 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v2);
  return a1;
}

void sub_216320A50(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v1 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216320AC4(uint64_t a1, __int16 a2)
{
  unsigned __int16 v3 = *(_WORD *)(*(void *)(a1 + 8) + 5) + a2;
  CFStringRef v4 = (const __CFString *)sub_2163101A8(v3, *(_DWORD *)(a1 + 20));
  if (!v4) {
    return (unsigned __int16)-1;
  }
  CFStringRef v5 = v4;
  CFIndex Length = CFStringGetLength(v4);
  if (CFStringGetCharacterAtIndex(v5, Length - 1) != *(unsigned __int16 *)(a1 + 112)) {
    return (unsigned __int16)-1;
  }
  return v3;
}

CFStringRef sub_216320B30(uint64_t a1)
{
  uint64_t v2 = sub_2163101A8(*(unsigned __int16 *)(*(void *)(a1 + 8) + 2), *(_DWORD *)(a1 + 20));
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v4 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UniChar *)(a1 + 112), 1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0, @"%@%@", v2, v4);
  CFRelease(v4);
  return v5;
}

void *sub_216320BBC(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v2 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v2);
  return a1;
}

void sub_216320C10(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v1 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216320C84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) + *(unsigned __int8 *)(a1 + 112);
}

void *sub_216320C94(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C6C64C8;
  a1[1] = 0;
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  }
  return a1;
}

void sub_216320CF0(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C6C64C8;
  a1[1] = 0;
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  }

  JUMPOUT(0x2166CA800);
}

CFStringRef sub_216320D6C(uint64_t a1)
{
  uint64_t v1 = *(const UniChar **)(a1 + 8);
  if (v1) {
    CFIndex v2 = *(unsigned __int16 *)(a1 + 32);
  }
  else {
    CFIndex v2 = 0;
  }
  return CFStringCreateWithCharacters(0, v1, v2);
}

void sub_216320D84(void *a1)
{
  *a1 = &unk_26C6C64C8;
  operator new[]();
}

void sub_216320EBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  uint64_t v5 = *(void *)(v1 + 8);
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = 0;
  if (v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216320EF8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C6BE0;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a1 = &unk_26C6C64C8;
  *(void *)(a1 + 8) = 0;
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  }
  return a1;
}

void sub_216320F84(uint64_t a1)
{
  sub_216320EF8(a1);

  JUMPOUT(0x2166CA800);
}

BOOL sub_216320FBC(uint64_t a1, CFStringRef theString)
{
  CFIndex Length = CFStringGetLength(theString);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 63);
  }
  if (Length != v5) {
    return 0;
  }
  unint64_t v6 = 0;
  do
  {
    if (*(char *)(a1 + 63) < 0) {
      unint64_t v7 = *(void *)(a1 + 48);
    }
    else {
      unint64_t v7 = *(unsigned __int8 *)(a1 + 63);
    }
    BOOL v8 = v6 >= v7;
    if (v6 >= v7) {
      break;
    }
    uint64_t v9 = a1 + 40;
    if ((*(unsigned char *)(a1 + 63) & 0x80) != 0) {
      uint64_t v9 = *(void *)(a1 + 40);
    }
    int v10 = *(unsigned __int16 *)(v9 + 2 * v6);
    int CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v6++);
  }
  while (v10 == CharacterAtIndex);
  return v8;
}

uint64_t sub_216321074(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) + (*(unsigned __int8 *)(*(void *)(a1 + 8) + 8) >> 5);
}

uint64_t sub_216321088(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) + (*(unsigned __int8 *)(*(void *)(a1 + 8) + 8) >> 5);
}

uint64_t sub_21632109C()
{
  return 1;
}

uint64_t sub_2163210A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

float sub_2163210AC(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t sub_2163210B4()
{
  return 0;
}

uint64_t sub_2163210BC(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 8) + 8) >> 1) & 1;
}

void sub_2163210CC()
{
}

void sub_216321114(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C4091E0A834);
  _Unwind_Resume(a1);
}

uint64_t sub_216321138(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 114) + *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_21632114C()
{
  return 2;
}

void sub_216321154()
{
}

void sub_2163211C0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C40AE63DD0CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_2163211E4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 112);
}

uint64_t sub_2163211EC()
{
  return 4;
}

void sub_2163211F4()
{
}

void sub_216321270(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C40D3B9E465);
  _Unwind_Resume(a1);
}

void *sub_216321294(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v2 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v2);
  return a1;
}

void sub_2163212E8(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v1 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21632135C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) + (*(unsigned __int8 *)(*(void *)(a1 + 8) + 8) >> 5) + 1;
}

uint64_t sub_216321374()
{
  return 8;
}

void sub_21632137C()
{
}

void sub_2163213E8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C4079B90E53);
  _Unwind_Resume(a1);
}

uint64_t sub_21632140C()
{
  return 3;
}

void sub_216321414()
{
}

void sub_216321480(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10A1C409A389BB3);
  _Unwind_Resume(a1);
}

uint64_t sub_2163214A4()
{
  return 0;
}

uint64_t sub_2163214AC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 32);
}

uint64_t sub_2163214B4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 32);
}

uint64_t sub_2163214BC()
{
  return 0;
}

uint64_t sub_2163214C4()
{
  return 0;
}

uint64_t sub_2163214CC()
{
  return 5;
}

uint64_t sub_2163214D4()
{
  return 0;
}

float sub_2163214DC()
{
  return 1.0;
}

uint64_t sub_2163214E4()
{
  return 1;
}

uint64_t sub_2163214EC()
{
  return 1;
}

uint64_t sub_2163214F4(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_2163214FC(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_216321504()
{
  return 6;
}

uint64_t sub_21632150C(uint64_t a1)
{
  return a1 + 64;
}

void *sub_216321514(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v2 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v2);
  return a1;
}

void sub_216321568(void *a1)
{
  *a1 = &unk_26C6C5938;
  uint64_t v1 = (uint64_t)(a1 + 4);
  sub_216144C28((uint64_t)(a1 + 9));
  sub_216144C28(v1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2163215DC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 112);
}

uint64_t sub_2163215E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 114);
}

void *sub_2163215EC(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C6C64C8;
  a1[1] = 0;
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  }
  return a1;
}

void sub_216321648(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C6C64C8;
  a1[1] = 0;
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C80BDFB0063);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2163216C4()
{
  return 0;
}

uint64_t sub_2163216CC()
{
  return 0;
}

uint64_t sub_2163216D4()
{
  return 7;
}

void sub_2163216E4(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, __int16 a6)
{
  __int16 v11 = a6;
  sub_21632176C(__p, a2, a3, a4, a5);
  unint64_t v7 = v10;
  unsigned __int8 v8 = v10;
  if ((v10 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)__p[1];
  }
  if (v7)
  {
    sub_216321924((void *)(a1 + 16), (uint64_t)__p, &v11);
    unsigned __int8 v8 = v10;
  }
  if ((v8 & 0x80) != 0) {
    operator delete(__p[0]);
  }
}

void sub_216321750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21632176C(unsigned char *__dst, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  if (a3 && a5)
  {
    std::string __p = 0;
    float v22 = 0;
    unint64_t v23 = 0;
    sub_216185B34(&__p, a3 + a5 + 1);
    sub_2161BF794(a2, &a2[a3], (uint64_t)&__p);
    unsigned __int8 v10 = v22;
    if ((unint64_t)v22 >= v23)
    {
      unint64_t v12 = (char *)__p;
      uint64_t v13 = v22 - (unsigned char *)__p;
      if (v22 - (unsigned char *)__p <= -3) {
        sub_21610CB04();
      }
      uint64_t v14 = v13 >> 1;
      if (v23 - (unint64_t)__p <= (v13 >> 1) + 1) {
        uint64_t v15 = v14 + 1;
      }
      else {
        uint64_t v15 = v23 - (void)__p;
      }
      if (v23 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = (char *)sub_21610FD44((uint64_t)&v23, v16);
        unint64_t v12 = (char *)__p;
        unsigned __int8 v10 = v22;
      }
      else
      {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[2 * v14];
      uint64_t v19 = &v17[2 * v16];
      *(_WORD *)unint64_t v18 = 32;
      __int16 v11 = v18 + 2;
      while (v10 != v12)
      {
        __int16 v20 = *((_WORD *)v10 - 1);
        v10 -= 2;
        *((_WORD *)v18 - 1) = v20;
        v18 -= 2;
      }
      std::string __p = v18;
      float v22 = v11;
      unint64_t v23 = (unint64_t)v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_WORD *)float v22 = 32;
      __int16 v11 = v10 + 2;
    }
    float v22 = v11;
    sub_2161BF794(a4, &a4[a5], (uint64_t)&__p);
    sub_21617FAAC(__dst, __p, (v22 - (unsigned char *)__p) >> 1);
    if (__p)
    {
      float v22 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_216184F68(__dst, byte_2163CA662);
  }
}

void sub_216321904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216321924(void *a1, uint64_t a2, __int16 *a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_2161984AC(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v32 = *(void *)(a2 + 16);
  }
  __int16 v6 = *a3;
  __int16 v33 = v6;
  unint64_t v7 = operator new(0x30uLL);
  v7[1] = *(_OWORD *)__p;
  *((void *)v7 + 4) = v32;
  __p[1] = 0;
  uint64_t v32 = 0;
  __p[0] = 0;
  *((_WORD *)v7 + 2sub_21617DB94((const void **)&__p, 0) = v6;
  uint64_t v8 = a1[1];
  *(void *)(v8 + 8) = v7;
  a1[1] = v7;
  *(void *)unint64_t v7 = v8;
  *((void *)v7 + 1) = a1 + 1;
  ++a1[3];
  uint64_t v34 = (long long *)a2;
  *((void *)sub_21632220C((uint64_t)(a1 + 4), (unsigned __int16 *)a2, &v34) + 5) = v7;
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (a1[3] <= *a1) {
    return;
  }
  uint64_t v9 = a1[2];
  unint64_t v10 = sub_2161A6920((uint64_t)(a1 + 7), v9 + 16);
  int8x8_t v11 = (int8x8_t)a1[5];
  if (!*(void *)&v11) {
    goto LABEL_53;
  }
  unint64_t v12 = v10;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = v10;
    if (v10 >= *(void *)&v11) {
      unint64_t v15 = v10 % *(void *)&v11;
    }
  }
  else
  {
    unint64_t v15 = (*(void *)&v11 - 1) & v10;
  }
  uint64_t v16 = *(void ***)(a1[4] + 8 * v15);
  if (!v16) {
    goto LABEL_53;
  }
  uint64_t v17 = (unsigned __int16 *)*v16;
  if (!*v16) {
    goto LABEL_53;
  }
  while (1)
  {
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 == v12) {
      break;
    }
    if (v14 > 1)
    {
      if (v18 >= *(void *)&v11) {
        v18 %= *(void *)&v11;
      }
    }
    else
    {
      v18 &= *(void *)&v11 - 1;
    }
    if (v18 != v15) {
      goto LABEL_53;
    }
LABEL_22:
    uint64_t v17 = *(unsigned __int16 **)v17;
    if (!v17) {
      goto LABEL_53;
    }
  }
  if (!sub_2161A6964((uint64_t)(a1 + 8), v17 + 8, (unsigned __int16 *)(v9 + 16))) {
    goto LABEL_22;
  }
  int8x8_t v19 = (int8x8_t)a1[5];
  __int16 v20 = *(unsigned __int16 **)v17;
  unint64_t v21 = *((void *)v17 + 1);
  uint8x8_t v22 = (uint8x8_t)vcnt_s8(v19);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    unint64_t v23 = a1 + 4;
    if (v21 >= *(void *)&v19) {
      v21 %= *(void *)&v19;
    }
  }
  else
  {
    v21 &= *(void *)&v19 - 1;
    unint64_t v23 = a1 + 4;
  }
  uint64_t v24 = *(unsigned __int16 **)(*v23 + 8 * v21);
  do
  {
    __int16 v25 = v24;
    uint64_t v24 = *(unsigned __int16 **)v24;
  }
  while (v24 != v17);
  if (v25 == (unsigned __int16 *)(a1 + 6)) {
    goto LABEL_41;
  }
  unint64_t v26 = *((void *)v25 + 1);
  if (v22.u32[0] > 1uLL)
  {
    if (v26 >= *(void *)&v19) {
      v26 %= *(void *)&v19;
    }
  }
  else
  {
    v26 &= *(void *)&v19 - 1;
  }
  if (v26 == v21)
  {
LABEL_43:
    if (v20)
    {
      unint64_t v27 = *((void *)v20 + 1);
      goto LABEL_45;
    }
    uint64_t v29 = a1 + 7;
  }
  else
  {
LABEL_41:
    if (!v20) {
      goto LABEL_42;
    }
    unint64_t v27 = *((void *)v20 + 1);
    if (v22.u32[0] > 1uLL)
    {
      unint64_t v28 = *((void *)v20 + 1);
      if (v27 >= *(void *)&v19) {
        unint64_t v28 = v27 % *(void *)&v19;
      }
    }
    else
    {
      unint64_t v28 = v27 & (*(void *)&v19 - 1);
    }
    if (v28 != v21)
    {
LABEL_42:
      *(void *)(*v23 + 8 * v21) = 0;
      __int16 v20 = *(unsigned __int16 **)v17;
      goto LABEL_43;
    }
LABEL_45:
    if (v22.u32[0] > 1uLL)
    {
      if (v27 >= *(void *)&v19) {
        v27 %= *(void *)&v19;
      }
    }
    else
    {
      v27 &= *(void *)&v19 - 1;
    }
    uint64_t v29 = a1 + 7;
    if (v27 != v21)
    {
      *(void *)(*v23 + 8 * v27) = v25;
      __int16 v20 = *(unsigned __int16 **)v17;
    }
  }
  *(void *)__int16 v25 = v20;
  *(void *)uint64_t v17 = 0;
  --*v29;
  sub_2161A69E8(1, (void **)v17);
LABEL_53:
  __int16 v30 = *(void **)v9;
  v30[1] = *(void *)(v9 + 8);
  **(void **)(v9 + 8) = v30;
  --a1[3];
  sub_2161DF090(a1 + 8, (void **)v9);
}

void sub_216321C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216321C88(uint64_t a1)
{
  sub_216322128((void *)(a1 + 24));
  if (*(void *)(a1 + 72))
  {
    sub_2161DF12C(a1 + 48, *(void ***)(a1 + 64));
    *(void *)(a1 + 64) = 0;
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)(a1 + 48) + 8 * i) = 0;
    }
    *(void *)(a1 + 72) = 0;
  }
}

uint64_t sub_216321CF0(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  sub_21632176C(__p, a2, a3, a4, a5);
  unint64_t v6 = v35;
  if ((v35 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (!v6)
  {
    uint64_t v15 = 0;
    if ((v35 & 0x80) != 0) {
      goto LABEL_24;
    }
    return v15;
  }
  unsigned int v7 = **(_DWORD **)(a1 + 88);
  int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 224))(*(void *)(a1 + 8));
  sub_21628DC44(v7, v8);
  sub_2161A2A80();
  uint64_t v30 = 0;
  BOOL v31 = &v30;
  uint64_t v32 = 0x2000000000;
  __int16 v33 = 0;
  unint64_t v9 = sub_2161A6920(a1 + 72, (uint64_t)__p);
  int8x8_t v10 = *(int8x8_t *)(a1 + 56);
  if (!*(void *)&v10) {
    goto LABEL_22;
  }
  unint64_t v11 = v9;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v14 = v9;
    if (v9 >= *(void *)&v10) {
      unint64_t v14 = v9 % *(void *)&v10;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v10 - 1) & v9;
  }
  uint64_t v29 = a1 + 48;
  uint64_t v16 = *(unsigned __int16 ***)(*(void *)(a1 + 48) + 8 * v14);
  if (!v16 || (uint64_t v17 = *v16) == 0)
  {
LABEL_22:
    *((_WORD *)v31 + 12) = 0;
    sub_216355E2C();
  }
  while (1)
  {
    unint64_t v18 = *((void *)v17 + 1);
    if (v11 == v18) {
      break;
    }
    if (v13 > 1)
    {
      if (v18 >= *(void *)&v10) {
        v18 %= *(void *)&v10;
      }
    }
    else
    {
      v18 &= *(void *)&v10 - 1;
    }
    if (v18 != v14) {
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v17 = *(unsigned __int16 **)v17;
    if (!v17) {
      goto LABEL_22;
    }
  }
  if (!sub_2161A6964(a1 + 80, v17 + 8, (unsigned __int16 *)__p)) {
    goto LABEL_21;
  }
  unint64_t v40 = __p;
  __int16 v20 = sub_21632220C(v29, (unsigned __int16 *)__p, (long long **)&v40);
  uint64_t v21 = *((void *)v20 + 5);
  uint64_t v24 = *(void *)(a1 + 24);
  uint8x8_t v22 = (uint64_t *)(a1 + 24);
  uint64_t v23 = v24;
  if (v24 == v21)
  {
    __int16 v25 = (char *)*((void *)v20 + 5);
  }
  else
  {
    __int16 v25 = (char *)operator new(0x30uLL);
    unint64_t v26 = v25 + 16;
    *(void *)__int16 v25 = 0;
    *((void *)v25 + 1) = 0;
    if (*(char *)(v21 + 39) < 0)
    {
      sub_2161984AC(v26, *(void **)(v21 + 16), *(void *)(v21 + 24));
      uint64_t v23 = *v22;
    }
    else
    {
      long long v27 = *(_OWORD *)(v21 + 16);
      *((void *)v25 + 4) = *(void *)(v21 + 32);
      *(_OWORD *)unint64_t v26 = v27;
    }
    *((_WORD *)v25 + 2sub_21617DB94((const void **)&__p, 0) = *(_WORD *)(v21 + 40);
    *(void *)(v23 + 8) = v25;
    *uint8x8_t v22 = (uint64_t)v25;
    *(void *)__int16 v25 = v23;
    *((void *)v25 + 1) = v22;
    unint64_t v28 = *(void **)v21;
    v28[1] = *(void *)(v21 + 8);
    **(void **)(v21 + 8) = v28;
    sub_2161DF090((int)v22, (void **)v21);
    unint64_t v40 = __p;
    *((void *)sub_21632220C(v29, (unsigned __int16 *)__p, (long long **)&v40) + 5) = v25;
  }
  uint64_t v15 = *((unsigned __int16 *)v25 + 20);
  *((_WORD *)v31 + 12) = v15;
  _Block_object_dispose(&v30, 8);
  if ((v35 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
  return v15;
}

void sub_216322014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  operator delete(v24);
  _Block_object_dispose(&a15, 8);
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216322054(uint64_t result, uint64_t a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) |= *(_WORD *)(a2 + 104);
  return result;
}

void *sub_216322070(void *a1)
{
  *a1 = &unk_26C6BFF20;
  sub_2161E05C4((uint64_t)(a1 + 6));
  sub_216322128(a1 + 3);
  return a1;
}

void sub_2163220BC(void *a1)
{
  *a1 = &unk_26C6BFF20;
  sub_2161E05C4((uint64_t)(a1 + 6));
  sub_216322128(a1 + 3);

  JUMPOUT(0x2166CA800);
}

void sub_216322128(void *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    CFStringRef v4 = *(void **)v2;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((void *)v2 != a1)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      sub_2161DF090((int)a1, (void **)v2);
      uint64_t v2 = v5;
    }
  }
}

uint64_t sub_21632218C(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  sub_2161297B4(a1 + 32, (unint64_t)(float)a2);
  return a1;
}

void sub_2163221F0(_Unwind_Exception *a1)
{
  sub_2161E05C4(v2);
  sub_216322128(v1);
  _Unwind_Resume(a1);
}

char *sub_21632220C(uint64_t a1, unsigned __int16 *a2, long long **a3)
{
  unsigned int v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_2161A6920(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (sub_2161A6964(a1 + 32, (unsigned __int16 *)v14 + 8, a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          unint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v16 = *a3;
  unint64_t v14 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v14 = 0;
  *((void *)v14 + 1) = v9;
  uint64_t v17 = v14 + 16;
  if (*((char *)v16 + 23) < 0)
  {
    sub_2161984AC(v17, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v18 = *v16;
    *((void *)v14 + 4) = *((void *)v16 + 2);
    *(_OWORD *)uint64_t v17 = v18;
  }
  *((void *)v14 + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_2161297B4(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)unint64_t v14 = *v26;
LABEL_41:
    *unint64_t v26 = v14;
    goto LABEL_42;
  }
  *(void *)unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v3) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10) {
        v27 %= v10;
      }
    }
    else
    {
      v27 &= v10 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  ++*v7;
  return v14;
}

void sub_216322468(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216322490(uint64_t a1, char *__s)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_216226684(__s, (uint64_t)"r", 1, v16);
  long long v4 = v16[0];
  v16[0] = 0uLL;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v4;
  if (v5)
  {
    sub_2161121B0(v5);
    if (*((void *)&v16[0] + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v16[0] + 1));
    }
  }
  unint64_t v6 = *(void **)(a1 + 16);
  unsigned int v7 = (_WORD *)*v6;
  if (*(_WORD *)*v6 == 1)
  {
    *(_WORD *)(a1 + 32) = v7[2];
    *(void *)(a1 + 8) = (char *)v7 + *((unsigned int *)v7 + 2);
    operator new[]();
  }
  unint64_t v8 = sub_2162769A4();
  sub_21627707C((uint64_t)v8, "Syllable trie file %s is incompatible (version %d, expected version %d)", v9, v10, v11, v12, v13, v14, (char)__s);
  exception = __cxa_allocate_exception(0x20uLL);
  sub_21610B834(v16, __s);
  sub_2162270C8((uint64_t)exception, 6);
  __cxa_throw(exception, (struct type_info *)&unk_26C6B9108, (void (*)(void *))sub_216227068);
}

void sub_2163225FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_2163226AC()
{
}

uint64_t *sub_2163226CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x20C8093837F09);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_2161121B0(v3);
  }
  return a1;
}

unsigned __int16 *sub_216322718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (a4 > a3)
  {
    unint64_t v6 = **(unsigned __int16 ***)a1;
    int v7 = *(char *)(a1 + 32);
    unint64_t v8 = (unsigned __int16 *)(a2 + 2 * a3);
    while (1)
    {
      int v10 = *v8++;
      int v9 = v10;
      if (v10 < v7 || v9 > *(char *)(a1 + 33)) {
        break;
      }
      unint64_t v6 = sub_21632279C(a1, v6, (char)v9);
      if (v6)
      {
        if (--v4) {
          continue;
        }
      }
      return v6;
    }
  }
  return 0;
}

unsigned __int16 *sub_21632279C(uint64_t a1, unsigned __int16 *a2, int a3)
{
  if (!a2 || *(char *)(a1 + 32) > a3 || *(char *)(a1 + 33) < a3) {
    return 0;
  }
  unint64_t v3 = *(unsigned __int16 ***)a1;
  if (**(unsigned __int16 ***)a1 == a2)
  {
    unsigned __int16 v5 = *(_WORD *)(*(void *)(a1 + 8) + 2 * (a3 - (uint64_t)*(char *)(a1 + 32)));
  }
  else
  {
    unsigned __int8 v4 = 0;
    unsigned __int16 v5 = -1;
    while (*((unsigned __int8 *)a2 + 7) > v4)
    {
      unint64_t v6 = *a2 + v4;
      if (*(void *)(a1 + 40) <= v6) {
        break;
      }
      if (*((unsigned __int8 *)v3[v6] + 9) == a3) {
        unsigned __int16 v5 = *a2 + v4;
      }
      if (*((char *)v3[v6] + 9) >= a3) {
        break;
      }
      ++v4;
    }
  }
  if (v5 == 0xFFFF) {
    return 0;
  }
  else {
    return v3[v5];
  }
}

unsigned __int16 *sub_216322848(unsigned __int16 ***a1, unsigned int a2, int a3)
{
  unsigned __int16 v5 = **a1;
  if (a3 == 2)
  {
    char v9 = 0;
    int v10 = &off_2642710F0;
  }
  else
  {
    if (a3 == 1)
    {
      char v6 = 0;
      int v7 = (char **)(&off_264274F30 + 2 * a2);
      unint64_t v8 = 2 * (void)v7[1];
      char v9 = 1;
      goto LABEL_7;
    }
    char v9 = 0;
    int v10 = &off_26426EF10;
  }
  int v7 = &v10[2 * a2];
  unint64_t v8 = (unint64_t)v7[1];
  char v6 = 1;
LABEL_7:
  unint64_t v11 = v8 >> v9;
  if (v8 >> v9)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *v7;
    do
    {
      uint64_t v14 = v12 << v9;
      if (v6) {
        __int16 v15 = v13[v14];
      }
      else {
        __int16 v15 = *(_WORD *)&v13[v14];
      }
      if (a3 == 1)
      {
        char v16 = 49;
        switch(v15)
        {
          case 711:
            char v16 = 51;
            break;
          case 713:
            break;
          case 714:
            char v16 = 50;
            break;
          case 715:
            char v16 = 52;
            break;
          default:
            char v16 = v15 + 49;
            break;
        }
      }
      else
      {
        char v16 = v15;
      }
      unsigned __int16 v5 = sub_21632279C((uint64_t)a1, v5, v16);
      if (!v5) {
        break;
      }
      ++v12;
    }
    while (v11 != v12);
  }
  return v5;
}

uint64_t sub_2163229B8(unsigned __int16 ***a1, __int16 *a2, uint64_t a3, int a4)
{
  unsigned __int16 v5 = **a1;
  if (!a3) {
    return v5[1];
  }
  uint64_t v8 = 2 * a3;
  while (1)
  {
    int v9 = (unsigned __int16)*a2;
    if (a4 == 1)
    {
      LOBYTE(v1sub_21617DB94((const void **)&__p, 0) = 49;
      switch(*a2)
      {
        case 711:
          LOBYTE(v1sub_21617DB94((const void **)&__p, 0) = 51;
          break;
        case 712:
          goto LABEL_12;
        case 713:
          break;
        case 714:
          LOBYTE(v1sub_21617DB94((const void **)&__p, 0) = 50;
          break;
        case 715:
          LOBYTE(v1sub_21617DB94((const void **)&__p, 0) = 52;
          break;
        default:
          if (v9 == 729) {
            LOBYTE(v1sub_21617DB94((const void **)&__p, 0) = 53;
          }
          else {
LABEL_12:
          }
            LOBYTE(v1sub_21617DB94((const void **)&__p, 0) = v9 + 49;
          break;
      }
    }
    else
    {
      __int16 v10 = *a2;
    }
    unint64_t v11 = sub_21632279C((uint64_t)a1, v5, (char)v10);
    if (!v11) {
      return 0xFFFFLL;
    }
    unsigned __int16 v5 = v11;
    ++a2;
    v8 -= 2;
    if (!v8) {
      return v5[1];
    }
  }
}

uint64_t sub_216322AAC(int a1)
{
  switch(a1)
  {
    case 5:
      return sub_216322C20();
    case 2:
      return sub_216322B7C();
    case 1:
      return sub_216322AD8();
  }
  return 0;
}

uint64_t sub_216322AD8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CC20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CC20))
  {
    operator new();
  }
  return qword_26797CC18;
}

void sub_216322B64(_Unwind_Exception *a1)
{
}

uint64_t sub_216322B7C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CC30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CC30))
  {
    operator new();
  }
  return qword_26797CC28;
}

void sub_216322C08(_Unwind_Exception *a1)
{
}

uint64_t sub_216322C20()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797CC40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797CC40))
  {
    operator new();
  }
  return qword_26797CC38;
}

void sub_216322CAC(_Unwind_Exception *a1)
{
}

uint64_t sub_216322CC4(uint64_t a1, _WORD *a2)
{
  if (!a2) {
    return *sub_216268B0C();
  }
  uint64_t result = (uint64_t)a2;
  int v3 = (unsigned __int16)*a2;
  if (*a2)
  {
    unsigned __int8 v4 = a2 + 1;
    do
    {
      if (v3 == 44) {
        uint64_t result = (uint64_t)v4;
      }
      int v5 = *v4++;
      int v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_216322D2C(uint64_t a1, _WORD *a2)
{
  if (!a2) {
    return *sub_216268B0C();
  }
  uint64_t result = (uint64_t)a2;
  int v3 = (unsigned __int16)*a2;
  if (*a2)
  {
    unsigned __int8 v4 = a2;
    do
    {
      if (v3 == 44) {
        break;
      }
      int v5 = (unsigned __int16)v4[1];
      ++v4;
      int v3 = v5;
    }
    while (v5);
  }
  return result;
}

__int16 *sub_216322D84(uint64_t a1, __int16 *a2, int a3)
{
  if (!a2) {
    return (__int16 *)*sub_216268B0C();
  }
  __int16 v3 = *a2;
  if (!*a2) {
    return (__int16 *)*sub_216268B0C();
  }
  if (a3) {
    uint64_t result = a2;
  }
  else {
    uint64_t result = 0;
  }
  int v5 = a3 ^ 1;
  char v6 = a2 + 1;
  while (v3 != 44)
  {
LABEL_10:
    __int16 v7 = *v6++;
    __int16 v3 = v7;
    ++a2;
    if (!v7) {
      return (__int16 *)*sub_216268B0C();
    }
  }
  if (v5)
  {
    int v5 = 0;
    uint64_t result = v6;
    goto LABEL_10;
  }
  uint64_t v8 = result ? a2 - result : 0;
  if (!v8 || v8 == 1 && *result == 42) {
    return (__int16 *)*sub_216268B0C();
  }
  return result;
}

uint64_t sub_216322E28(uint64_t a1, _WORD *a2, int a3)
{
  if (!a2) {
    return *sub_216268B0C();
  }
  if (a3 == 1) {
    uint64_t result = (uint64_t)a2;
  }
  else {
    uint64_t result = 0;
  }
  int v4 = (unsigned __int16)*a2;
  if (*a2)
  {
    BOOL v5 = a3 != 1;
    char v6 = a2 + 1;
    do
    {
      if (v4 == 44)
      {
        if (!v5) {
          return result;
        }
        BOOL v5 = 0;
        uint64_t result = (uint64_t)v6;
      }
      int v7 = *v6++;
      int v4 = v7;
    }
    while (v7);
  }
  return result;
}

__int16 *sub_216322EA0(uint64_t a1, __int16 *a2, int a3)
{
  if (!a2) {
    return (__int16 *)*sub_216268B0C();
  }
  __int16 v3 = *a2;
  if (!*a2) {
    return (__int16 *)*sub_216268B0C();
  }
  if (a3) {
    uint64_t result = a2;
  }
  else {
    uint64_t result = 0;
  }
  if (a3) {
    int v5 = 0;
  }
  else {
    int v5 = 2;
  }
  char v6 = a2 + 1;
  while (v3 != 44)
  {
LABEL_13:
    __int16 v7 = *v6++;
    __int16 v3 = v7;
    ++a2;
    if (!v7) {
      return (__int16 *)*sub_216268B0C();
    }
  }
  if (v5)
  {
    --v5;
    uint64_t result = v6;
    goto LABEL_13;
  }
  uint64_t v8 = result ? a2 - result : 0;
  if (!v8 || v8 == 1 && *result == 42) {
    return (__int16 *)*sub_216268B0C();
  }
  return result;
}

uint64_t sub_216322F48(uint64_t a1, _WORD *a2)
{
  if (!a2) {
    return *sub_216268B0C();
  }
  uint64_t result = (uint64_t)a2;
  int v3 = (unsigned __int16)*a2;
  if (*a2)
  {
    int v4 = a2;
    do
    {
      if (v3 == 44) {
        break;
      }
      int v5 = (unsigned __int16)v4[1];
      ++v4;
      int v3 = v5;
    }
    while (v5);
  }
  return result;
}

__int16 *sub_216322FA0(uint64_t a1, __int16 *a2, int a3)
{
  if (!a2) {
    return (__int16 *)*sub_216268B0C();
  }
  __int16 v3 = *a2;
  if (!*a2) {
    return (__int16 *)*sub_216268B0C();
  }
  if (a3) {
    uint64_t result = a2;
  }
  else {
    uint64_t result = 0;
  }
  int v5 = a3 ^ 1;
  char v6 = a2 + 1;
  while (v3 != 44)
  {
LABEL_10:
    __int16 v7 = *v6++;
    __int16 v3 = v7;
    ++a2;
    if (!v7) {
      return (__int16 *)*sub_216268B0C();
    }
  }
  if (v5)
  {
    int v5 = 0;
    uint64_t result = v6;
    goto LABEL_10;
  }
  uint64_t v8 = result ? a2 - result : 0;
  if (!v8 || v8 == 1 && *result == 42) {
    return (__int16 *)*sub_216268B0C();
  }
  return result;
}

void sub_216323048()
{
}

void sub_216323060()
{
}

void sub_216323078()
{
}

void *sub_21632308C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = sub_216323108(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2163230EC(_Unwind_Exception *exception_object)
{
  __int16 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216323108(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_21632314C();
  }
  uint64_t result = (char *)sub_2160FFAA8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_21632314C()
{
}

void sub_216323164(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_21617DB94((const void **)&__p, 0) = 0u;
  *(void *)(a1 + 72) = 256;
  sub_216277448(a1 + 32);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 128) = 256;
  sub_216277448(a1 + 88);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16sub_21617DB94((const void **)&__p, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  operator new();
}

void sub_216323344(_Unwind_Exception *a1)
{
  uint64_t v7 = v4;
  MEMORY[0x2166CA800](v7, 0x10F1C40BAA45842);
  MEMORY[0x2166CA800](v5, 0x1020C40A95220FALL);
  int v9 = (void *)v2[21];
  if (v9)
  {
    v2[22] = v9;
    operator delete(v9);
  }
  __int16 v10 = *v6;
  if (*v6)
  {
    v2[19] = v10;
    operator delete(v10);
  }
  sub_21627ADA0(v3);
  sub_21627ADA0(v1);
  _Unwind_Resume(a1);
}

char *sub_216323404(void *a1)
{
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v2)
  {
    *(void *)(v2 + 8sub_21617DB94((const void **)&__p, 0) = 0;
    *(void *)(v2 + 88) = 0;
  }
  uint64_t v3 = *(void *)(a1[2] + 8);
  if (v3)
  {
    *(void *)(v3 + 8sub_21617DB94((const void **)&__p, 0) = 0;
    *(void *)(v3 + 88) = 0;
  }
  uint64_t v4 = *(void *)(a1[3] + 8);
  if (v4)
  {
    *(void *)(v4 + 8sub_21617DB94((const void **)&__p, 0) = 0;
    *(void *)(v4 + 88) = 0;
  }
  uint64_t v5 = *(void *)(*a1 + 64);
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5) & 1) == 0)
  {
    unint64_t v11 = (void *)a1[1];
    uint64_t v12 = *(void *)(*a1 + 64) + 48;
    if (*v11)
    {
      (*(void (**)(void, uint64_t))(*(void *)*v11 + 80))(*v11, v12);
      unint64_t v11 = (void *)a1[1];
    }
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 0x40000000;
    _OWORD v16[2] = sub_2163245DC;
    void v16[3] = &unk_264267310;
    v16[4] = a1;
    v16[5] = v12;
    uint64_t v13 = v11[1];
    if (*(void *)(v13 + 80))
    {
      *(void *)(v13 + 8sub_21617DB94((const void **)&__p, 0) = 0;
      *(void *)(v13 + 88) = 0;
    }
    uint64_t result = sub_2163245DC((uint64_t)v16);
    uint64_t v14 = *(void *)(v13 + 80);
    *(void *)(v13 + 8sub_21617DB94((const void **)&__p, 0) = v14 + 1;
    *(void *)(v13 + 8 * v14) = result;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E6C0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797E6C0))
    {
      int v15 = 1;
      sub_216324698(&v15, 1uLL);
      __cxa_atexit((void (*)(void *))sub_216324728, &qword_26797E6C8, &dword_2160F5000);
      __cxa_guard_release(&qword_26797E6C0);
    }
    char v6 = (void *)a1[1];
    if (*v6)
    {
      (*(void (**)(void, uint64_t *))(*(void *)*v6 + 80))(*v6, &qword_26797E6C8);
      char v6 = (void *)a1[1];
    }
    uint64_t v7 = v6[1];
    if (*(void *)(v7 + 80))
    {
      *(void *)(v7 + 8sub_21617DB94((const void **)&__p, 0) = 0;
      *(void *)(v7 + 88) = 0;
      char v6 = (void *)a1[1];
    }
    uint64_t v8 = *v6;
    uint64_t result = sub_216324488((uint64_t)(a1 + 4));
    *((void *)result + 2) = 0;
    *((void *)result + 3) = v8;
    *((void *)result + 4) = 0;
    *((_DWORD *)result + 1) = 1;
    result[8] = 1;
    uint64_t v10 = *(void *)(v7 + 80);
    *(void *)(v7 + 8sub_21617DB94((const void **)&__p, 0) = v10 + 1;
    *(void *)(v7 + 8 * v1sub_21617DB94((const void **)&__p, 0) = result;
  }
  return result;
}

void sub_216323680(_Unwind_Exception *a1)
{
}

void *sub_216323698(void *a1)
{
  sub_216323754(a1);
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2)
  {
    uint64_t v3 = sub_2163281BC(v2);
    MEMORY[0x2166CA800](v3, 0x1020C40A95220FALL);
  }
  uint64_t v4 = (uint64_t *)a1[2];
  if (v4)
  {
    uint64_t v5 = sub_2163281BC(v4);
    MEMORY[0x2166CA800](v5, 0x1020C40A95220FALL);
  }
  char v6 = (uint64_t *)a1[3];
  if (v6)
  {
    uint64_t v7 = sub_2163281BC(v6);
    MEMORY[0x2166CA800](v7, 0x1020C40A95220FALL);
  }
  uint64_t v8 = (void *)a1[21];
  if (v8)
  {
    a1[22] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[18];
  if (v9)
  {
    a1[19] = v9;
    operator delete(v9);
  }
  sub_21627ADA0((uint64_t)(a1 + 11));
  sub_21627ADA0((uint64_t)(a1 + 4));
  return a1;
}

char *sub_216323754(void *a1)
{
  sub_2163248F4((uint64_t)a1);
  uint64_t v2 = sub_2162769A4();
  sub_216276FA0((uint64_t)v2, 0x800u, (uint64_t)"===RESET===\n", v3, v4, v5, v6, v7, v9);
  sub_216277448((uint64_t)(a1 + 4));
  sub_216277448((uint64_t)(a1 + 11));
  sub_2163249C4((uint64_t)(a1 + 21));
  sub_216324A58((uint64_t)(a1 + 18));

  return sub_216323404(a1);
}

void sub_2163237C0()
{
}

void sub_216323918(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E0C40A81385DBLL);
  _Unwind_Resume(a1);
}

void sub_21632393C()
{
}

void sub_216323A8C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E0C40A81385DBLL);
  _Unwind_Resume(a1);
}

void sub_216323AB0()
{
}

void sub_216323C6C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10F1C4047374A1ELL);
  MEMORY[0x2166CA800](v1, 0x1020C40A95220FALL);
  _Unwind_Resume(a1);
}

void sub_216323CB8()
{
}

void sub_216323E64(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10F1C40BBC815BBLL);
  MEMORY[0x2166CA800](v1, 0x1020C40A95220FALL);
  _Unwind_Resume(a1);
}

void sub_216323EA8()
{
}

void sub_216324050(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10F1C40D0F3DA69);
  MEMORY[0x2166CA800](v1, 0x1020C40A95220FALL);
  _Unwind_Resume(a1);
}

void sub_216324094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5) {
    operator new();
  }
  operator new();
}

void sub_216324284(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C40BBC815BBLL);
  _Unwind_Resume(a1);
}

void sub_2163242D8()
{
}

void sub_216324444(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10F1C40863EB520);
  MEMORY[0x2166CA800](v1, 0x1020C40A95220FALL);
  _Unwind_Resume(a1);
}

char *sub_216324488(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v4 = *(char **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    size_t v5 = (size_t)&v4[-v2];
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v2] >> 3) != v3) {
      goto LABEL_23;
    }
  }
  else
  {
    size_t v5 = 40 * *(void *)(a1 + 40);
  }
  uint64_t v6 = (char *)malloc_type_malloc(v5, 0x10600404FD43036uLL);
  uint64_t v4 = v6;
  uint64_t v8 = *(char ***)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(char ***)a1;
    uint64_t v11 = ((uint64_t)v8 - *(void *)a1) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_216324B00();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_2160FFA74();
      }
      int v15 = (char *)operator new(8 * v14);
    }
    else
    {
      int v15 = 0;
    }
    char v16 = &v15[8 * v11];
    *(void *)char v16 = v4;
    uint64_t v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        uint64_t v17 = (uint64_t)*--v8;
        *((void *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      uint64_t v8 = *(char ***)a1;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = &v15[8 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v8 = v6;
    uint64_t v9 = v8 + 1;
  }
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 24) = v4;
LABEL_23:
  ++*(_DWORD *)(a1 + 48);
  *(void *)(a1 + 32) = v4 + 40;
  return v4;
}

char *sub_2163245DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  LMLanguageModelJointProbability();
  double v4 = -v3;
  uint64_t v5 = **(void **)(v2 + 8);
  uint64_t v6 = *(char ***)(a1 + 40);
  unint64_t v7 = sub_216324488(v2 + 32);
  uint64_t v8 = v7;
  uint64_t v9 = *v6;
  size_t v10 = v6[1] - *v6;
  uint64_t v11 = (uint64_t)v10 >> 2;
  *((double *)v7 + 2) = v4;
  *((void *)v7 + 3) = v5;
  *((void *)v7 + 4) = 0;
  if (v10 > 0xB)
  {
    *(void *)unint64_t v7 = *(void *)&v9[4 * v11 - 8];
    LOBYTE(v12) = 2;
  }
  else
  {
    size_t v12 = v10 >> 2;
    memcpy(&v7[-4 * v11 + 8], v9, v10);
  }
  v8[8] = v12;
  return v8;
}

void *sub_216324698(void *result, unint64_t a2)
{
  qword_26797E6C8 = 0;
  qword_26797E6D0 = 0;
  qword_26797E6D8 = 0;
  if (a2)
  {
    double v3 = result;
    sub_216112970(&qword_26797E6C8, a2);
    uint64_t v4 = qword_26797E6D0;
    uint64_t result = memmove((void *)qword_26797E6D0, v3, 4 * a2);
    qword_26797E6D0 = v4 + 4 * a2;
  }
  return result;
}

void sub_216324704(_Unwind_Exception *exception_object)
{
  if (qword_26797E6C8)
  {
    qword_26797E6D0 = qword_26797E6C8;
    operator delete((void *)qword_26797E6C8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216324728(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

char *sub_21632475C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = **(void **)(v1 + 8);
  uint64_t result = sub_216324488(v1 + 32);
  *((void *)result + 2) = 0;
  *((void *)result + 3) = v2;
  *((void *)result + 4) = 0;
  *((_DWORD *)result + 1) = 1;
  result[8] = 1;
  return result;
}

char *sub_2163247A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v4 = *(char **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    size_t v5 = (size_t)&v4[-v2];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-v2] >> 5) != v3) {
      goto LABEL_23;
    }
  }
  else
  {
    size_t v5 = 96 * *(void *)(a1 + 40);
  }
  uint64_t v6 = (char *)malloc_type_malloc(v5, 0x1060040C2C571E4uLL);
  uint64_t v4 = v6;
  uint64_t v8 = *(char ***)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    size_t v10 = *(char ***)a1;
    uint64_t v11 = ((uint64_t)v8 - *(void *)a1) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_216324B00();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_2160FFA74();
      }
      int v15 = (char *)operator new(8 * v14);
    }
    else
    {
      int v15 = 0;
    }
    char v16 = &v15[8 * v11];
    *(void *)char v16 = v4;
    uint64_t v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        uint64_t v17 = (uint64_t)*--v8;
        *((void *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      uint64_t v8 = *(char ***)a1;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = &v15[8 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v8 = v6;
    uint64_t v9 = v8 + 1;
  }
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 24) = v4;
LABEL_23:
  ++*(_DWORD *)(a1 + 48);
  *(void *)(a1 + 32) = v4 + 96;
  return v4;
}

char *sub_2163248F4(uint64_t a1)
{
  uint64_t result = sub_2162769A4();
  if (*result)
  {
    if ((result[9] & 8) != 0)
    {
      uint64_t v3 = sub_2162769A4();
      sub_216276FA0((uint64_t)v3, 0x800u, (uint64_t)"===cummulative stats since last reset===\n", v4, v5, v6, v7, v8, v33);
      uint64_t v9 = sub_2162769A4();
      sub_216276FA0((uint64_t)v9, 0x800u, (uint64_t)"hypotheses created = %ld\n", v10, v11, v12, v13, v14, *(unsigned int *)(a1 + 80));
      int v15 = sub_2162769A4();
      sub_216276FA0((uint64_t)v15, 0x800u, (uint64_t)"hypothesis sets created = %ld\n", v16, v17, v18, v19, v20, *(unsigned int *)(a1 + 136));
      BOOL v21 = sub_2162769A4();
      sub_216276FA0((uint64_t)v21, 0x800u, (uint64_t)"words created = %ld\n", v22, v23, v24, v25, v26, (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 3);
      unint64_t v27 = sub_2162769A4();
      return (char *)sub_216276FA0((uint64_t)v27, 0x800u, (uint64_t)"word groups created = %ld\n", v28, v29, v30, v31, v32, (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
    }
  }
  return result;
}

void sub_2163249C4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)a1;
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  if (*(uint64_t ***)a1 != v3)
  {
    do
    {
      if (*v2)
      {
        uint64_t v4 = sub_2163281BC(*v2);
        MEMORY[0x2166CA800](v4, 0x1020C40A95220FALL);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(uint64_t ***)a1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_216324A58(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      if (*v2)
      {
        uint64_t v5 = *(void **)(v4 + 40);
        if (v5)
        {
          *(void *)(v4 + 48) = v5;
          operator delete(v5);
        }
        uint64_t v6 = sub_21632A6B4(v4);
        MEMORY[0x2166CA800](v6, 0x10E0C40A81385DBLL);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(uint64_t **)a1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_216324B00()
{
}

uint64_t sub_216324B18(uint64_t a1, unint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v11 = *(void *)(a1 + 80);
  if (v11 > a2)
  {
    *(void *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = a2;
    unint64_t v11 = a2;
  }
  if (!v11)
  {
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)(a6 + 8) + 16))();
    uint64_t v16 = *(void *)(a1 + 80);
    *(void *)(a1 + 8 * v16) = v15;
    *(void *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = v16 + 1;
LABEL_12:
    *(void *)(a1 + 88) = a3;
    return 1;
  }
  if (v11 < a2 || *(double *)(*(void *)(a1 + 8 * v11 - 8) + 16) > a4)
  {
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(a6 + 8) + 16))();
    int64_t v13 = a7 ^ 1u;
    unint64_t v14 = *(void *)(a1 + 80);
    if (v14 > v13)
    {
      while (*(double *)(*(void *)(a1 + 8 * v13) + 16) <= *(double *)(v12 + 16))
      {
        if (v14 == ++v13) {
          goto LABEL_9;
        }
      }
      unint64_t v18 = v14 - (v14 == a2);
      if ((uint64_t)(v18 - 1) >= v13)
      {
        unint64_t v19 = v18;
        do
        {
          *(void *)(a1 + 8 * v19) = *(void *)(a1 + 8 * v19 - 8);
          uint64_t v20 = v19 - 2;
          --v19;
        }
        while (v20 >= v13);
      }
      *(void *)(a1 + 8 * v13) = v12;
      *(void *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = v18 + 1;
      if (v13) {
        return 1;
      }
      goto LABEL_12;
    }
LABEL_9:
    if (v14 < a2)
    {
      *(void *)(a1 + 8sub_21617DB94((const void **)&__p, 0) = v14 + 1;
      *(void *)(a1 + 8 * v14) = v12;
      return 1;
    }
  }
  return 0;
}

void sub_216324C64(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a1;
  int v5 = *(unsigned __int8 *)(a5 + 16);
  uint64_t v6 = *(void *)(a5 + 40);
  if (*(void *)(a5 + 32) >= 0xAuLL) {
    unint64_t v7 = 10;
  }
  else {
    unint64_t v7 = *(void *)(a5 + 32);
  }
  uint64_t v8 = a3[10];
  if (*(unsigned char *)(a5 + 16)) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (v8)
  {
    uint64_t v12 = a3;
    uint64_t v14 = *(void *)(a5 + 48);
    double v15 = 1.79769313e308;
    do
    {
      uint64_t v16 = *v12;
      double v17 = *(double *)(*v12 + 16);
      if (v14 && *(void *)(v14 + 408) == 50 && *(double *)(v14 + 416) <= v17
        || v10 && *(void *)(v6 + 408) == 50 && *(double *)(v6 + 416) <= v17)
      {
        break;
      }
      if (v15 == 1.79769313e308)
      {
        double v15 = v17 + 2.0;
      }
      else if (v17 > v15)
      {
        return;
      }
      double v18 = sub_216324DDC(a1, *v12, a2, a5);
      if (!v10 || *(void *)(v6 + 408) != 50 || *(double *)(v6 + 416) > v18)
      {
        a1 = sub_216324B18(v19, v7, v16, v18, a2, a5, v5 != 0);
        if (a1)
        {
          if (v6) {
            a1 = sub_2162D1BD8(v6 + 8, v18);
          }
        }
      }
      ++v12;
      --v8;
    }
    while (v8);
  }
}

double sub_216324DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a3 + 8) == 3) {
    return *(double *)(a2 + 16);
  }
  double v5 = sub_21626062C(a2, a3) + *(double *)(a2 + 16) + 0.25;
  uint64_t v8 = *(uint64_t **)(a3 + 16);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  if (v8)
  {
    uint64_t v10 = *v8;
    if (*v8)
    {
      unint64_t v11 = *(void *)(v10 + 8);
      int v12 = *((_DWORD *)v8 + 9);
      if (v11 < 4) {
        goto LABEL_15;
      }
      if (v12 - 9) < 9 && ((0x127u >> (v12 - 9)))
      {
        int v13 = 1;
      }
      else
      {
        if (v11 >= 6)
        {
          double v5 = v5 + -4.0;
          goto LABEL_15;
        }
        int v13 = 0;
      }
      if (v13 | (*(unsigned int (**)(uint64_t))(*(void *)a3 + 88))(a3) ^ 1) {
        double v5 = v5 + -2.0;
      }
    }
    else
    {
      int v12 = *((_DWORD *)v8 + 9);
    }
LABEL_15:
    if (v9 == 502) {
      double v5 = v5 + 1.7;
    }
    uint64_t v14 = *(void *)(*(void *)(a4 + 24) + 72);
    if (v14) {
      uint64_t v15 = *(void *)(*(void *)(v14 + 8) + 32);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v24 = 0;
    uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a3 + 32))(a3, &v24);
    if (v24)
    {
      uint64_t v17 = v16;
      uint64_t v18 = 0;
      while (!sub_2162F0E50(v15, *(_DWORD *)(v17 + 4 * v18)))
      {
        if (++v18 >= v24) {
          goto LABEL_24;
        }
      }
      double v19 = 2.0;
    }
    else
    {
LABEL_24:
      if ((v12 - 10) >= 2)
      {
        if (v12 == 9)
        {
          for (uint64_t i = *(_DWORD **)(a3 + 24); i != *(_DWORD **)(a3 + 32); ++i)
          {
            if (!*i) {
              goto LABEL_25;
            }
          }
        }
        goto LABEL_33;
      }
LABEL_25:
      double v19 = -4.5;
    }
    double v5 = v5 + v19;
LABEL_33:
    if (v12 == 16) {
      double v5 = v5 + 1.5;
    }
    if (v10 && (*(unsigned char *)(v10 + 40) & 0x10) != 0) {
      double v5 = v5 + (float)(1.0 - *(float *)(v10 + 56)) * 4.0;
    }
  }
  if (v9 == 2)
  {
    uint64_t v21 = *(void *)(*(void *)(a2 + 24) + 16);
    if (v21 && (*(unsigned char *)(v21 + 28) & 0x20) != 0)
    {
      return v5 + 1.6;
    }
    else
    {
      uint64_t v22 = *(void *)(a2 + 32);
      if (v22
        && (*(unsigned int (**)(void))(**(void **)v22 + 24))() == 1
        && !*(_DWORD *)(*(void *)(a2 + 24) + 8))
      {
        return v5 + -1.0;
      }
    }
  }
  return v5;
}

void sub_2163250C8(CFLocaleIdentifier localeIdentifier@<X2>, const __CFURL *a2@<X0>, const __CFString *a3@<X1>, Boolean a4@<W3>, void *a5@<X8>)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    CFStringRef PathComponent = CFURLCopyLastPathComponent(a2);
    CFTypeRef v12 = PathComponent;
    if (CFStringCompare(PathComponent, a3, 0))
    {
      CFTypeRef cf = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3, a4);
      if (!PathComponent) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    sub_216229464(&cf, a2);
    if (PathComponent) {
LABEL_8:
    }
      CFRelease(PathComponent);
  }
  else
  {
    CFStringRef v10 = sub_2162D9BC0(localeIdentifier);
    CFTypeRef v12 = v10;
    if (!v10)
    {
      *a5 = 0;
      goto LABEL_15;
    }
    CFTypeRef cf = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFURLRef)v10, a3, a4);
    CFRelease(v10);
  }
LABEL_9:
  CFTypeRef v12 = 0;
  if (CFURLResourceIsReachable((CFURLRef)cf, (CFErrorRef *)&v12))
  {
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
  }
  else
  {
    if (v12) {
      CFRelease(v12);
    }
    CFTypeRef v11 = 0;
  }
  *a5 = v11;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_216325220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_216325274(const __CFURL *a1@<X0>, const __CFString *a2@<X1>, const __CFString *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_2163250C8(a3, a1, a2, 1u, &url);
  CFURLRef v6 = url;
  if (url)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], url, @"model.bin", 0);
    CFURLCreateCopyAppendingPathComponent(v7, v6, @"sp.model", 0);
    if (CFStringCompare(a3, @"ko", 1uLL))
    {
      if (CFStringCompare(a3, @"th", 1uLL)) {
        operator new();
      }
      operator new();
    }
    operator new();
  }
  *a4 = 0;
}

void sub_216325934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_216325AE4(const __CFURL *a1, const __CFString *a2, const __CFString *a3)
{
  sub_2163250C8(a3, a1, a2, 0, &v3);
  if (v3) {
    operator new();
  }
  operator new();
}

void sub_216325B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166CA800](v2, 0x10F2C4093187FD8);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216325BD8(int a1, uint64_t a2, int a3)
{
  if (a2)
  {
    CFURLRef v6 = sub_216192194(a2, kMecabraContextOptionPrivateMode);
    CFAllocatorRef v7 = (const void *)*MEMORY[0x263EFFB40];
    int v8 = v6 == (const void *)*MEMORY[0x263EFFB40];
    uint64_t v9 = sub_216192194(a2, kMecabraContextOptionNoPruning);
    int v10 = ((v8 & 1) << 18) | 0x800000;
    if (v9 != v7) {
      int v10 = v8 << 18;
    }
  }
  else
  {
    int v10 = 0;
  }
  unsigned int v11 = v10 | (2 * a1) & 0x4000;
  if (!a3) {
    v11 |= 2u;
  }
  if ((*(void *)&a1 & 0x200000) != 0) {
    return v11;
  }
  else {
    return v11 | 0x2000;
  }
}

uint64_t sub_216325C90(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 48);
  if (*(void *)(result + 56) - (void)v1 >= 0x10uLL && *v1)
  {
    uint64_t v2 = (void *)result;
    unint64_t v3 = 1;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v1[v3] + 96))(v1[v3]);
      if (result == 83) {
        break;
      }
      ++v3;
      uint64_t v1 = (void *)v2[6];
      if (v3 >= (uint64_t)(v2[7] - (void)v1) >> 3) {
        return result;
      }
    }
    sub_2162166B0(v2, v3, &v5);
    uint64_t result = v5;
    if (v5)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)v5 + 16);
      return v4();
    }
  }
  return result;
}

void *sub_216325D74(void *result)
{
  uint64_t v1 = result[7] - result[6];
  if ((unint64_t)v1 >= 0x10)
  {
    unint64_t v2 = v1 >> 3;
    if (v2 >= 5) {
      unint64_t v3 = 5;
    }
    else {
      unint64_t v3 = v2;
    }
    unint64_t v4 = v2 - 1;
    if (v4 >= v3) {
      unint64_t v4 = v3;
    }
    uint64_t v5 = v4 >= 3 ? 3 : v4;
    if (v5)
    {
      CFURLRef v6 = result;
      for (unint64_t i = 0; i != v5; ++i)
      {
        unint64_t v8 = i;
        while (*(unsigned char *)(*(void *)(v6[6] + 8 * v8) + 154))
        {
          if (v3 == ++v8) {
            return result;
          }
        }
        if (v8 == -1) {
          break;
        }
        uint64_t result = sub_216216950(v6, v8, i);
      }
    }
  }
  return result;
}

void sub_216325E20(unint64_t a1, const __CFArray *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  CFURLRef v6 = sub_2162D1CE4(0xFu);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    unint64_t v12 = a1;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "%s nbest:", buf, 0xCu);
  }
  if (a3[1] != *a3)
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = sub_2162D1CE4(0xFu);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v7);
        double v10 = *(float *)(*a3 + 4 * v7);
        *(_DWORD *)long long buf = 134218498;
        unint64_t v12 = v7;
        __int16 v13 = 2112;
        uint64_t v14 = ValueAtIndex;
        __int16 v15 = 2048;
        double v16 = v10;
        _os_log_debug_impl(&dword_2160F5000, v8, OS_LOG_TYPE_DEBUG, "\tIndex: %zu candidate: %@ score: %f", buf, 0x20u);
      }
      ++v7;
    }
    while (v7 < (uint64_t)(a3[1] - *a3) >> 2);
  }
}

void sub_216325FA0(void *a1)
{
  sub_2161C9988(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216325FD8(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 32))(&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)a1 + 1) + 144))(&v22);
  sub_216159D74(&v22);
  if (a3 && *(_WORD *)(a2 + 2 * a3 - 2) != 32)
  {
    uint64_t v8 = a4[1];
    unsigned int v11 = *(_DWORD *)(v8 - 4);
    uint64_t v9 = v8 - 4;
    uint64_t v10 = v11;
    if (a1[13] == v11)
    {
      a4[1] = v9;
    }
    else if (!sub_2162C4734(a1, v10))
    {
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**((void **)a1 + 1) + 512))(*((void *)a1 + 1), v10);
      if (v12 >= v12 - 3) {
        unint64_t v14 = v12 - 3;
      }
      else {
        unint64_t v14 = v12;
      }
      *(_DWORD *)(a4[1] - 4) = (*(uint64_t (**)(void, uint64_t, unint64_t))(**((void **)a1 + 1)
                                                                                              + 504))(*((void *)a1 + 1), v13, v14);
    }
  }
  __int16 v15 = sub_2162D1CE4(7u);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    double v16 = sub_2162D1CE4(7u);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      int v17 = v24;
      uint64_t v18 = (void **)__p;
      sub_2162C43B0((uint64_t)a4, " ", 1uLL, &v21);
      p_p = &__p;
      if (v17 < 0) {
        p_p = v18;
      }
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v21;
      }
      else {
        uint64_t v20 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v26 = p_p;
      __int16 v27 = 2080;
      uint64_t v28 = v20;
      _os_log_debug_impl(&dword_2160F5000, v16, OS_LOG_TYPE_DEBUG, "Context: input = [%s]: ids = [%s]", buf, 0x16u);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v24 < 0) {
    operator delete(__p);
  }
}

void sub_216326260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::string v21 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v21;
    operator delete(v21);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2163262A8()
{
}

void *sub_2163262BC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6C8228;
  return result;
}

void sub_2163262F4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C8228;
}

uint64_t sub_21632631C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  sub_21630E3B4(*a2, v3);
  if (v3)
  {
    uint64_t v4 = 2 * v3 - 2;
    uint64_t v5 = (unsigned __int16 *)v2;
    do
    {
      int v6 = *v5++;
      BOOL v7 = (v6 - 12593) > 0x32 || v4 == 0;
      v4 -= 2;
    }
    while (!v7);
  }
  return v2;
}

uint64_t sub_21632639C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC950)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163263DC()
{
  return &unk_26C6BC950;
}

void sub_2163276C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  MEMORY[0x2166CA800](v21, 0x10E1C408D9C284ALL);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_216327718(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  uint64_t v11 = a6;
  unint64_t v10 = 0;
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    sub_216327780(a1, a7, &v11, &v10, a8, 1, a2, a3, a4, a5);
    return v10;
  }
  return v8;
}

uint64_t sub_216327780(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10)
{
  if (!a8)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    goto LABEL_32;
  }
  uint64_t v12 = 0;
  uint64_t v13 = a10;
  while (1)
  {
    if (a10 == 1)
    {
      int v15 = *(unsigned __int8 *)(a7 + v12);
      goto LABEL_12;
    }
    if (a10 == 2 && (v12 & 1) == 0)
    {
      int v14 = *(unsigned __int8 *)(a7 + v12);
      if (a9)
      {
        if (v14 == 63)
        {
          if (!*(unsigned char *)(a7 + v12 + 1)) {
            goto LABEL_20;
          }
        }
        else if (v14 == 42 && !*(unsigned char *)(a7 + v12 + 1))
        {
LABEL_38:
          uint64_t v28 = a7 + v13;
          uint64_t v29 = a8 - v13;
          return sub_216327A54(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, v28, v29, a9, a10);
        }
        goto LABEL_14;
      }
      if (!*(unsigned char *)(a7 + v12)) {
        break;
      }
    }
LABEL_14:
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(_DWORD *)(v16 + 8 * a6) + *(unsigned __int8 *)(a7 + v12) + 1;
    if (*(_DWORD *)(v16 + 8 * v17 + 4) != a6) {
      return 0;
    }
    ++v12;
    ++v13;
    a6 = v17;
    if (a8 == v12)
    {
      LODWORD(a6) = v17;
LABEL_32:
      uint64_t v25 = *(unsigned int *)(v16 + 8 * a6);
      if (*(_DWORD *)(v16 + 8 * v25 + 4) == a6)
      {
        int v26 = *(_DWORD *)(v16 + 8 * v25);
        if (v26 < 0)
        {
          if (*a3)
          {
            --*a3;
          }
          else if (a2)
          {
            unint64_t v30 = *a4;
            unint64_t v31 = *a4 + 1;
            *a4 = v31;
            *(_DWORD *)(a5 + 24 * v30 + 8) = -v26;
            if (v31 >= a2) {
              return 1;
            }
          }
          else
          {
            ++*a4;
          }
        }
      }
      return 0;
    }
  }
  int v15 = *(unsigned __int8 *)(a7 + v12 + 1);
LABEL_12:
  if (v15 == 42) {
    goto LABEL_38;
  }
  if (!(2 * (v15 == 63))) {
    goto LABEL_14;
  }
LABEL_20:
  int v18 = *(_DWORD *)(*(void *)(a1 + 8) + 8 * a6);
  int v19 = 256;
  while (1)
  {
    uint64_t v20 = (_DWORD *)(*(void *)(a1 + 8) + 8 * ++v18);
    if (v20[1] == a6) {
      break;
    }
LABEL_29:
    BOOL v24 = v19-- != 0;
    if (v19 == 0 || !v24) {
      return 0;
    }
  }
  if (a10 != 2)
  {
    uint64_t v21 = 1;
    if (sub_216327780(a1)) {
      return v21;
    }
    goto LABEL_29;
  }
  unsigned int v22 = *v20 + 1;
  int v23 = 257;
  while (*(_DWORD *)(*(void *)(a1 + 8) + 8 * v22 + 4) != v18 || !sub_216327780(a1))
  {
    ++v22;
    if (--v23 <= 1) {
      goto LABEL_29;
    }
  }
  return 1;
}

uint64_t sub_216327A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10)
{
  if (!sub_216327780(a1))
  {
    uint64_t v27 = a5;
    uint64_t v28 = a7;
    uint64_t v29 = a8;
    LODWORD(v2sub_21617DB94(&a9, 0) = *(_DWORD *)(*(void *)(a1 + 8) + 8 * a6);
    int v21 = 256;
    while (1)
    {
      uint64_t v20 = (v20 + 1);
      unsigned int v22 = (_DWORD *)(*(void *)(a1 + 8) + 8 * v20);
      uint64_t v23 = a6;
      if (v22[1] == a6)
      {
        if (a10 == 2)
        {
          uint64_t v24 = (*v22 + 1);
          int v25 = 257;
          while (*(_DWORD *)(*(void *)(a1 + 8) + 8 * v24 + 4) != v20
               || !sub_216327A54(a1, a2, a3, a4, v27, v24, v28, v29, a9 | 0x200000000))
          {
            uint64_t v24 = (v24 + 1);
            if (--v25 <= 1) {
              goto LABEL_14;
            }
          }
          return 1;
        }
        if (a10 == 1)
        {
          uint64_t v18 = 1;
          if (sub_216327A54(a1, a2, a3, a4, v27, v20, v28, v29, a9 | 0x100000000)) {
            return v18;
          }
        }
      }
LABEL_14:
      BOOL v26 = v21-- != 0;
      a6 = v23;
      if (v21 == 0 || !v26) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_216327BBC(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, unsigned __int16 **a5, int a6, int a7, double a8)
{
  *(_WORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6BDBB8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_26C6BDCB0;
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v13 = a1 + 32;
  uint64_t v18 = *a3;
  int v19 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2161BF3B4(v13, (uint64_t)&v18, (uint64_t)&v16, a4, a5);
  if (v17) {
    sub_2161121B0(v17);
  }
  if (v19) {
    sub_2161121B0(v19);
  }
  *(double *)(a1 + 112) = a8;
  *(_DWORD *)(a1 + 12sub_21617DB94(&a9, 0) = a6;
  *(_DWORD *)(a1 + 124) = a7;
  return a1;
}

void sub_216327CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_2161121B0(a10);
  }
  if (a12) {
    sub_2161121B0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216327CC8(uint64_t a1)
{
  return **(void **)(a1 + 80);
}

uint64_t sub_216327CD4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return a1 + 32;
  }
}

uint64_t sub_216327CE4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    sub_2161BF510(a1 + 32);
  }
  return v2;
}

uint64_t sub_216327D14(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 80);
  uint64_t result = *(void *)&v1[8 * (v1[16] == 0)];
  if (!result) {
    return *(void *)v1;
  }
  return result;
}

uint64_t sub_216327D38(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 96);
  uint64_t result = *(void *)&v1[8 * (v1[16] == 0)];
  if (!result) {
    return *(void *)v1;
  }
  return result;
}

uint64_t sub_216327D5C(uint64_t a1)
{
  return **(void **)(a1 + 96);
}

uint64_t sub_216327D68(uint64_t a1, uint64_t *a2, int a3, unsigned __int16 **a4, int a5)
{
  uint64_t v8 = *a2;
  BOOL v7 = (std::__shared_weak_count *)a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6B6FB0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_26C6B70A8;
  uint64_t v14 = v8;
  int v15 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_2161BF3B4(a1 + 32, (uint64_t)&v14, (uint64_t)&v12, a3, a4);
  if (v13) {
    sub_2161121B0(v13);
  }
  if (v15) {
    sub_2161121B0(v15);
  }
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 12sub_21617DB94(&a9, 0) = a5;
  *(_DWORD *)(a1 + 124) = 1536;
  uint64_t v9 = *(CFTypeRef **)(a1 + 80);
  *(void *)a1 = &unk_26C6BE6C0;
  *(void *)(a1 + 24) = &unk_26C6BE7B8;
  CFTypeRef v10 = CFRetain(*v9);
  *(void *)(a1 + 136) = v10;
  *(void *)(a1 + 128) = CFStringCreateWithFormat(0, 0, @" %@", v10);
  return a1;
}

void sub_216327EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    sub_2161121B0(a12);
  }
  if (a14) {
    sub_2161121B0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216327EEC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BE6C0;
  *(void *)(a1 + 24) = &unk_26C6BE7B8;
  CFRelease(*(CFTypeRef *)(a1 + 128));
  CFRelease(*(CFTypeRef *)(a1 + 136));
  *(void *)a1 = &unk_26C6B6FB0;
  *(void *)(a1 + 24) = &unk_26C6B70A8;
  sub_2161BF5C4((void *)(a1 + 32));
  return a1;
}

void sub_216327FA4(uint64_t a1)
{
  sub_216327EEC(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216327FDC()
{
}

void sub_216328070()
{
}

void *sub_21632808C(void *a1)
{
  *a1 = &unk_26C6BDBB8;
  a1[3] = &unk_26C6BDCB0;
  sub_2161BF5C4(a1 + 4);
  return a1;
}

void sub_2163280F4(void *a1)
{
  *a1 = &unk_26C6BDBB8;
  a1[3] = &unk_26C6BDCB0;
  sub_2161BF5C4(a1 + 4);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21632817C()
{
  return 3;
}

uint64_t sub_216328184(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_21632818C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

double sub_216328194(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

uint64_t sub_21632819C(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t sub_2163281A4(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t sub_2163281AC()
{
  return 0;
}

uint64_t sub_2163281B4()
{
  return 0;
}

uint64_t *sub_2163281BC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((unsigned char *)a1 + 16))
  {
    uint64_t v3 = a1[1];
    if (v3) {
      MEMORY[0x2166CA800](v3, 0x1060C40C2C571E4);
    }
  }
  return a1;
}

uint64_t sub_216328230(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    sub_2163282AC();
  }
  if ((unint64_t)(v3 + a2) > a1[3]) {
    sub_2163282AC();
  }
  uint64_t result = *(void *)(*a1 + 8 * a1[4]) + v3;
  a1[5] = v3 + a2;
  return result;
}

void sub_2163282AC()
{
}

void sub_2163283DC(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA7C0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_216328400()
{
}

uint64_t sub_216328418(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216328450(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = MEMORY[0x2166CA7C0](result, 0x1000C8077774924);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_2163284B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 4) = a7;
  *(unsigned char *)(a1 + 5) = a8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_21617DB94(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_21617DB94(&a9, 0) = 0u;
  *(void *)(a1 + 136) = a6;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16sub_21617DB94(&a9, 0) = 0;
  operator new();
}

void sub_2163286D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  uint64_t v7 = v2[21];
  v2[21] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_21617DB94(v5, 0);
  sub_21617DB94(v4, 0);
  sub_21617DB94(v3, 0);
  uint64_t v8 = (std::__shared_weak_count *)v2[16];
  if (v8) {
    sub_2161121B0(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)v2[14];
  if (v9) {
    sub_2161121B0(v9);
  }
  CFTypeRef v10 = (std::__shared_weak_count *)v2[12];
  if (v10) {
    sub_2161121B0(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)v2[10];
  if (v11) {
    sub_2161121B0(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)v2[8];
  if (v12) {
    sub_2161121B0(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)v2[6];
  if (v13) {
    sub_2161121B0(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)v2[4];
  if (v14) {
    sub_2161121B0(v14);
  }
  int v15 = (std::__shared_weak_count *)v2[2];
  if (v15) {
    sub_2161121B0(v15);
  }
  _Unwind_Resume(a1);
}

void sub_2163287C0(uint64_t a1, int a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  sub_21617BCB8(*(_DWORD *)a1, *(void *)(a1 + 144), *(void *)(a1 + 160), *(void *)(a1 + 152), *(unsigned char *)(a1 + 5), a2, &v35);
  long long v4 = v35;
  long long v35 = 0uLL;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v4;
  if (v5)
  {
    sub_2161121B0(v5);
    if (*((void *)&v35 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  sub_216180DC4(*(_DWORD *)a1, a2, &v35);
  long long v6 = v35;
  long long v35 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v6;
  if (v7)
  {
    sub_2161121B0(v7);
    if (*((void *)&v35 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  sub_21629DE60(*(_DWORD *)a1, a2, &v35);
  long long v8 = v35;
  long long v35 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = v8;
  if (v9)
  {
    sub_2161121B0(v9);
    if (*((void *)&v35 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  sub_21619C840(*(_DWORD *)a1, &v35);
  long long v10 = v35;
  long long v35 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v10;
  if (v11)
  {
    sub_2161121B0(v11);
    if (*((void *)&v35 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  unsigned int v12 = *(_DWORD *)a1;
  uint64_t v13 = sub_2161E2A24(*(_DWORD *)a1);
  sub_21610B834(ptr, v13);
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x2000000000;
  char v43 = 0;
  *(void *)&long long v35 = MEMORY[0x263EF8330];
  *((void *)&v35 + 1) = 0x40000000;
  uint64_t v36 = sub_216329870;
  uint64_t v37 = &unk_26427D030;
  uint64_t v38 = &v40;
  unsigned int v39 = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E6E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E6E8))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E6F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E6F0))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797CCA8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E6F0);
  }
  int v34 = a2;
  std::mutex::lock(&stru_26797CCA8);
  uint64_t v14 = (void *)qword_26797E6E0;
  unint64_t v15 = sub_216129260(qword_26797E6E0 + 24, (uint64_t)ptr);
  int8x8_t v16 = (int8x8_t)v14[1];
  if (!*(void *)&v16) {
    goto LABEL_32;
  }
  unint64_t v17 = v15;
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(v16);
  v18.i16[0] = vaddlv_u8(v18);
  unint64_t v19 = v18.u32[0];
  if (v18.u32[0] > 1uLL)
  {
    unint64_t v20 = v15;
    if (v15 >= *(void *)&v16) {
      unint64_t v20 = v15 % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v20 = (*(void *)&v16 - 1) & v15;
  }
  int v21 = *(unsigned __int8 ***)(*v14 + 8 * v20);
  if (!v21 || (unsigned int v22 = *v21) == 0)
  {
LABEL_32:
    int v25 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v26 = os_signpost_id_make_with_pointer(v25, ptr);
    uint64_t v27 = sub_2162D1CE4(0xDu);
    if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v28 = v27;
      if (os_signpost_enabled(v27))
      {
        uint64_t v29 = ptr;
        if (v45 < 0) {
          uint64_t v29 = *(unsigned __int8 **)ptr;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v29;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v28, OS_SIGNPOST_INTERVAL_BEGIN, v26, "SingletonResourceManagerLoad", "Load resource with key: [%s]", buf, 0xCu);
      }
    }
    *(void *)long long buf = ((uint64_t (*)(long long *))v36)(&v35);
    operator new();
  }
  uint64_t v23 = (uint64_t)(v14 + 4);
  while (1)
  {
    unint64_t v24 = *((void *)v22 + 1);
    if (v24 == v17) {
      break;
    }
    if (v19 > 1)
    {
      if (v24 >= *(void *)&v16) {
        v24 %= *(void *)&v16;
      }
    }
    else
    {
      v24 &= *(void *)&v16 - 1;
    }
    if (v24 != v20) {
      goto LABEL_32;
    }
LABEL_31:
    unsigned int v22 = *(unsigned __int8 **)v22;
    if (!v22) {
      goto LABEL_32;
    }
  }
  if ((sub_21612970C(v23, v22 + 16, ptr) & 1) == 0) {
    goto LABEL_31;
  }
  unint64_t v31 = (std::__shared_weak_count *)*((void *)v22 + 6);
  if (!v31 || v31->__shared_owners_ == -1) {
    goto LABEL_32;
  }
  uint64_t v32 = std::__shared_weak_count::lock(v31);
  if (v32)
  {
    uint64_t v33 = *((void *)v22 + 5);
    std::mutex::unlock(&stru_26797CCA8);
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_2161121B0(v32);
    if (v34) {
      goto LABEL_39;
    }
  }
  else
  {
    std::mutex::unlock(&stru_26797CCA8);
    uint64_t v33 = 0;
    if (v34)
    {
LABEL_39:
      if (!*((unsigned char *)v41 + 24)) {
        sub_2163297F0();
      }
    }
  }
  _Block_object_dispose(&v40, 8);
  if (v45 < 0) {
    operator delete(*(void **)ptr);
  }
  unint64_t v30 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 12sub_21617DB94(&a9, 0) = v33;
  *(void *)(a1 + 128) = v32;
  if (v30) {
    sub_2161121B0(v30);
  }
}

#error "216329268: call analysis failed (funcsize=38)"

uint64_t sub_21632929C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_21617DB94((const void **)(a1 + 160), 0);
  sub_21617DB94((const void **)(a1 + 152), 0);
  sub_21617DB94((const void **)(a1 + 144), 0);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3) {
    sub_2161121B0(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 112);
  if (v4) {
    sub_2161121B0(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 96);
  if (v5) {
    sub_2161121B0(v5);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (v6) {
    sub_2161121B0(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  if (v7) {
    sub_2161121B0(v7);
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8) {
    sub_2161121B0(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9) {
    sub_2161121B0(v9);
  }
  long long v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10) {
    sub_2161121B0(v10);
  }
  return a1;
}

void sub_216329374(void *a1, int a2)
{
  sub_21628CD70(*(uint64_t **)(a1[9] + 8));
  uint64_t v4 = a1[5];
  if (v4)
  {
    sub_21617DED8(a1[5]);
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 40));
    if (v5 == 2)
    {
      if (*(void *)v4)
      {
        uint64_t v6 = a1[5];
        sub_21617DED8(v6);
        atomic_load((unsigned int *)(v6 + 40));
        LMLanguageModelReset();
      }
    }
  }
  if (a2)
  {
    uint64_t v7 = a1[3];
    if (v7)
    {
      sub_21617DED8(a1[3]);
      unsigned int v8 = atomic_load((unsigned int *)(v7 + 40));
      if (v8 == 2)
      {
        if (*(void *)v7)
        {
          uint64_t v9 = a1[3];
          sub_21617DED8(v9);
          atomic_load((unsigned int *)(v9 + 40));
          LMLanguageModelReset();
        }
      }
    }
  }
  uint64_t v10 = a1[1];

  sub_21617CDE4(v10);
}

void *sub_216329454(void *result)
{
  uint64_t v1 = result[17];
  if (v1 && *(unsigned char *)(v1 + 4))
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v4 = os_signpost_id_make_with_pointer(v3, v2);
    unsigned int v5 = sub_2162D1CE4(0xDu);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v6 = v5;
      if (os_signpost_enabled(v5))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LanguageModelLoaderReload", "Reload for LMLoader", buf, 2u);
      }
    }
    sub_21617C7E0();
  }
  return result;
}

void sub_2163295A0(uint64_t a1)
{
  if (*(_DWORD *)a1 == 1)
  {
    uint64_t v2 = *(void *)(a1 + 136);
    if (*(unsigned char *)(v2 + 5))
    {
      CFStringRef v3 = *(const __CFString **)(v2 + 128);
      if (v3)
      {
        CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFURLRef v5 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x263EFFB08], v3, kCFURLPOSIXPathStyle, 1u);
        CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(v4, v5);
        sub_21617DB94((const void **)(a1 + 160), PathComponent);
        uint64_t v7 = *(void *)(a1 + 8);
        CFURLRef v8 = CFURLCreateCopyDeletingLastPathComponent(v4, v5);
        sub_21617DB94((const void **)(v7 + 16), v8);
        if (v5) {
          CFRelease(v5);
        }
      }
      else
      {
        sub_21617DB94((const void **)(a1 + 160), 0);
        sub_21617DB94((const void **)(*(void *)(a1 + 8) + 16), 0);
      }
      *(unsigned char *)(*(void *)(a1 + 136) + 5) = 0;
    }
  }
}

void sub_21632967C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216329694(int *a1)
{
  if (*(unsigned char *)(*((void *)a1 + 17) + 6))
  {
    int v2 = *a1;
    if (*a1 == 2)
    {
      sub_21617B83C(2u, *((unsigned char *)a1 + 5), 1, &v7);
      long long v3 = v7;
      long long v7 = 0uLL;
      CFAllocatorRef v4 = (std::__shared_weak_count *)*((void *)a1 + 4);
      *(_OWORD *)(a1 + 6) = v3;
      if (v4)
      {
        sub_2161121B0(v4);
        if (*((void *)&v7 + 1)) {
          sub_2161121B0(*((std::__shared_weak_count **)&v7 + 1));
        }
      }
      int v2 = *a1;
    }
    if (v2 == 1)
    {
      sub_216241AA0(1u, 1, &v7);
      long long v5 = v7;
      long long v7 = 0uLL;
      uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 8);
      *(_OWORD *)(a1 + 14) = v5;
      if (v6)
      {
        sub_2161121B0(v6);
        if (*((void *)&v7 + 1)) {
          sub_2161121B0(*((std::__shared_weak_count **)&v7 + 1));
        }
      }
    }
    *(unsigned char *)(*((void *)a1 + 17) + 6) = 0;
  }
}

void sub_216329754(uint64_t a1, int a2)
{
  if (*(_DWORD *)a1 == a2) {
    sub_21617C7E0();
  }
  *(_DWORD *)a1 = a2;
  sub_2163287C0(a1, 1);
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    sub_2161121B0(v3);
  }
}

void sub_2163297F0()
{
}

void sub_21632984C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1070C40FE1C109FLL);
  _Unwind_Resume(a1);
}

void sub_216329870(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  operator new();
}

void sub_2163298F8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x1070C40FE1C109FLL);
  MEMORY[0x2166CA800](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

void sub_216329940(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216329978(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    sub_216294128((uint64_t *)(v1 + 8), 0);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_2163299D8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC0D0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t *sub_216329A1C(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_216294128((uint64_t *)(v1 + 8), 0);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_216329A88(int a1, __CFDictionary *a2, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6BA018, 0);
  if (!result) {
    return result;
  }
  long long v5 = (void *)result;
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)result + 96))(result);
  if (v6 != 76 && v6 != 74) {
    return 0;
  }
  if ((*(unsigned int (**)(void *))(*v5 + 408))(v5) != 2) {
    return 0;
  }
  if ((*(uint64_t (**)(void *))(*v5 + 200))(v5)) {
    return 0;
  }
  unint64_t v7 = v5[20];
  (*(void (**)(void *))(*v5 + 552))(v5);
  if (v7 > v8) {
    return 0;
  }
  (*(void (**)(void *))(*v5 + 552))(v5);
  uint64_t valuePtr = v9 - v5[20];
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  CFDictionaryAddValue(a2, @"phraseLearningCandidateKeystrokeSavings", v10);
  if (v10) {
    CFRelease(v10);
  }
  return 1;
}

void sub_216329C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_216329C84()
{
}

uint64_t sub_216329C98(uint64_t a1, int a2)
{
  CFAllocatorRef v4 = sub_216268B0C();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = CFStringCreateWithCharacters(0, (const UniChar *)*v4, v4[1]);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  *(void *)(a1 + 32) = 0xD00000001;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 4sub_216195244(&a9, 0) = 0;
  *(unsigned char *)(a1 + 64) = a2 & 1;
  return a1;
}

void sub_216329CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 64) = 1;
  CFAllocatorRef v4 = *(uint64_t ****)(a2 + 40);
  os_signpost_id_t v26 = *(uint64_t ****)(a2 + 48);
  if (v4 != v26)
  {
    while (1)
    {
      long long v5 = *v4;
      int v6 = (*v4)[1];
      if (v6[10])
      {
        uint64_t v7 = *v6;
        if (*v6)
        {
          unint64_t v8 = *v5;
          uint64_t v9 = (*v5)[2];
          if (v9)
          {
            unsigned int v10 = *(_DWORD *)(v9 + 36);
            BOOL v11 = v10 > 0x11;
            unsigned int v12 = (0x1B1FFu >> v10) & 1;
            int v13 = v11 ? 1 : v12;
          }
          else
          {
            int v13 = 1;
          }
          if ((*(unsigned int (**)(uint64_t *))(*v8 + 104))(*v5))
          {
            char v14 = (*(uint64_t (**)(uint64_t *))(*v8 + 40))(v8);
            int8x8_t v16 = *(uint64_t ***)(a1 + 40);
            unint64_t v15 = *(uint64_t ***)(a1 + 48);
            if (v16 != v15) {
              break;
            }
          }
        }
      }
LABEL_27:
      if (++v4 == v26) {
        return;
      }
    }
    char v17 = v14;
    while (1)
    {
      uint8x8_t v18 = *v16;
      unint64_t v19 = (_DWORD *)**v16;
      if (!v19
        || !(*(unsigned int (**)(uint64_t))(*(void *)v19 + 104))(**v16)
        || ((*(uint64_t (**)(_DWORD *))(*(void *)v19 + 40))(v19) & 4) != 0
        && (*((_DWORD *)v8 + 2) - 1) > 1
        || (v17 & 4) != 0 && (v19[2] - 1) > 1)
      {
        goto LABEL_26;
      }
      uint64_t v20 = v18[1];
      uint64_t v21 = *(void *)(v20 + 88);
      if (v21)
      {
        double v22 = *(double *)(v21 + 16);
        double v23 = 1.79769313e308;
        if (v22 != 1.79769313e308) {
          double v23 = v22 + 2.2;
        }
        if (!v13)
        {
LABEL_25:
          sub_216324C64(v20, *v18, v5[1], (uint64_t)*v5, a4);
          goto LABEL_26;
        }
      }
      else
      {
        double v23 = 1.79769313e308;
        if (!v13) {
          goto LABEL_25;
        }
      }
      if (*(double *)(v7 + 16) <= v23) {
        goto LABEL_25;
      }
LABEL_26:
      if (++v16 == v15) {
        goto LABEL_27;
      }
    }
  }
}

void sub_216329F14(uint64_t a1, int a2)
{
  sub_216140140((uint64_t)&v15);
  sub_21632A6E8((int **)a1, __p);
  if ((v14 & 0x80u) == 0) {
    CFAllocatorRef v4 = __p;
  }
  else {
    CFAllocatorRef v4 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v5 = v14;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_216129E78(&v16, (uint64_t)v4, v5);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (v6 != v7)
  {
    uint64_t v9 = 0;
    if ((unint64_t)((v6 - v7) >> 3) <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = (v6 - v7) >> 3;
    }
    do
    {
      BOOL v11 = sub_21630B530(**(_DWORD ***)(*(void *)(a1 + 40) + 8 * v9), a2, 1);
      CFArrayAppendValue(Mutable, v11);
      CFRelease(v11);
      ++v9;
    }
    while (v10 != v9);
  }
  CFStringRef v12 = CFStringCreateByCombiningStrings(0, Mutable, @" ");
  CFRelease(Mutable);
  sub_21619A154(a2, v12);
}

void sub_21632A244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t sub_21632A634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  *(void *)a1 = a2;
  CFIndex v15 = *(void *)(a3 + 8);
  if (!a2 || v15) {
    CFStringRef v16 = CFStringCreateWithCharacters(0, *(const UniChar **)a3, v15);
  }
  else {
    CFStringRef v16 = sub_216304FF8(a2);
  }
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 28) = a6;
  *(_DWORD *)(a1 + 32) = a8;
  *(_DWORD *)(a1 + 36) = a7;
  return a1;
}

uint64_t sub_21632A6B4(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_21632A6E8@<X0>(int **a1@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = *a1;
  sub_216140140((uint64_t)v30);
  if (v4)
  {
    sub_216129E78(&v31, (uint64_t)"type = ", 7);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    uint64_t v6 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
    sub_216129E78(&v31, (uint64_t)"syllable IDs: ", 14);
    uint64_t v7 = *((void *)*a1 + 1);
    if (v7)
    {
      unint64_t v8 = (unsigned __int16 *)*((void *)*a1 + 2);
      uint64_t v9 = *((void *)*a1 + 1);
      do
      {
        uint64_t v10 = (void *)std::ostream::operator<<();
        BOOL v11 = sub_216129E78(v10, (uint64_t)"(", 1);
        CFStringRef v12 = (const __CFString *)sub_2163101A8(*v8, **a1);
        sub_2161E3AE8(v12, &v27);
        if ((v29 & 0x80u) == 0) {
          locale = &v27;
        }
        else {
          locale = v27.__locale_;
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v14 = v29;
        }
        else {
          uint64_t v14 = v28;
        }
        CFIndex v15 = sub_216129E78(v11, (uint64_t)locale, v14);
        sub_216129E78(v15, (uint64_t)"), ", 3);
        if ((char)v29 < 0) {
          operator delete(v27.__locale_);
        }
        ++v8;
        --v9;
      }
      while (v9);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&v32[-1] + *(void *)(v31 - 24)));
    CFStringRef v16 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
    sub_216129E78(&v31, (uint64_t)"Syllable Lengths:", 17);
    if (v7)
    {
      uint64_t v17 = *((void *)*a1 + 4) + 2;
      do
      {
        uint8x8_t v18 = (void *)std::ostream::operator<<();
        sub_216129E78(v18, (uint64_t)", ", 2);
        v17 += 4;
        --v7;
      }
      while (v7);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&v32[-1] + *(void *)(v31 - 24)));
    unint64_t v19 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    uint64_t v20 = sub_216129E78(&v31, (uint64_t)"synthetic word group:", 21);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    uint64_t v21 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_216129E78(&v31, (uint64_t)"CFIndex length = ", 9);
  double v22 = (void *)std::ostream::operator<<();
  sub_216129E78(v22, (uint64_t)", trieValue = ", 14);
  double v23 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  unint64_t v24 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v27);
  std::ostream::put();
  std::ostream::flush();
  sub_216178BC0((uint64_t)v32, a2);
  v30[0] = *MEMORY[0x263F8C2B8];
  uint64_t v25 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v31 = v25;
  v32[0] = MEMORY[0x263F8C318] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2166CA750](&v34);
}

void sub_21632AC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_21632ACA8()
{
}

void sub_21632AD08(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F1C409A65B6B8);
  _Unwind_Resume(a1);
}

void sub_21632AD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  CFAllocatorRef v4 = sub_2162D1CE4(5u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v7 = CFStringCreateWithCharacters(0, *(const UniChar **)a3, *(void *)(a3 + 8));
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[ThaiAutocorrector::analyze] analysisStr: [%@]", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = operator new(8uLL);
  void *v6 = v5;
  *(void *)&long long buf = v6;
  uint64_t v9 = v6 + 1;
  *((void *)&buf + 1) = v6 + 1;
  *(_WORD *)operator new(2uLL) = 0;
  sub_21632B5C8();
}

void sub_21632B490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

void sub_21632B5C8()
{
}

void sub_21632B978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  *a12 = 0;
  (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

void sub_21632BA18(void *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  long long v3 = a1;
  unint64_t v4 = a2;
  *(void *)a3 = &unk_26C6BF008;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 4sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(void *)(a3 + 12sub_216195244(&a9, 0) = 0;
  sub_216308F00(a3, a1, a2);
}

void sub_21632BC30(_Unwind_Exception *a1)
{
  sub_216308B50(v1);
  _Unwind_Resume(a1);
}

void *sub_21632BC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2162D1CE4(0xCu);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3;
    LODWORD(v1sub_216195244(&a9, 0) = 134217984;
    *(void *)((char *)&v10 + 4) = v9;
    _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[ThaiAutocorrector::rerank] Reranking %zu candidates", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  v12[0] = &unk_26C6C7360;
  v12[1] = sub_21632BDF4;
  v12[3] = v12;
  *(void *)&long long v10 = &unk_26C6C7308;
  *((void *)&v10 + 1) = sub_21621750C;
  BOOL v11 = &v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, long long *, uint64_t))(*(void *)v7 + 16))(v7, a2, a3, v12, &v10, 256);
  sub_216199290(&v10);
  return sub_216199124(v12);
}

void sub_21632BDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_21632BDF4(double a1, double a2)
{
  return (int)(a2 * -5090.0 + a1 * -8000.0);
}

void *sub_21632BE14(void *a1)
{
  *a1 = &unk_26C6BF418;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21632BE84(void *a1)
{
  *a1 = &unk_26C6BF418;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x2166CA800);
}

void sub_21632BF18()
{
}

void *sub_21632BF2C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C8E30;
  result[1] = v3;
  return result;
}

uint64_t sub_21632BF74(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C8E30;
  a2[1] = v2;
  return result;
}

uint64_t sub_21632BFA0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_21630ACD4(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v5) {
    uint64_t v6 = sub_21617EA18(v5, &__p, *a3);
  }
  else {
    uint64_t v6 = 0;
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_21632C024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21632C040(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21632C080()
{
  return &unk_26C6BCB80;
}

void sub_21632C090()
{
}

__n128 sub_21632C0A4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F6428;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21632C0F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6428;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21632C130(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if (v6 <= *a6 >> 1)
  {
    int v7 = *a3;
    uint64_t v8 = **(void **)(result + 8);
    uint64_t v9 = v8 ? *a6 >> 1 : 0;
    if (v9 == v6
      && (__n128 result = memcmp((const void *)(v8 + 2 * **(int **)(result + 16)), *(const void **)a2, 2 * v6),
          !result)
      || (v7 & 0x82) == 0)
    {
      sub_2163095EC();
    }
  }
  return result;
}

uint64_t sub_21632C1F4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6488)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21632C234()
{
  return &unk_26C6F6488;
}

void sub_21632C244()
{
}

__n128 sub_21632C258(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6F64A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_21632C2AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F64A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21632C2E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 <= *a6 >> 1
    && v7 > **(void **)(result + 8)
    && (*(_DWORD *)a3 & 2) == 0
    && (*(_DWORD *)a3 & 0x80) == 0
    && (*(_DWORD *)a3 & 4) == 0
    && *(double *)(a3 + 8) >= -4.0)
  {
    sub_2163095EC();
  }
  return result;
}

uint64_t sub_21632C3AC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6508)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21632C3EC()
{
  return &unk_26C6F6508;
}

void sub_21632C3FC()
{
}

void *sub_21632C410()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C6C8DD8;
  return result;
}

void sub_21632C448(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6C8DD8;
}

BOOL sub_21632C470(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(void))(**(void **)a2 + 96))() == 83;
}

uint64_t sub_21632C4B4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BCB70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21632C4F4()
{
  return &unk_26C6BCB70;
}

void sub_21632C500(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E720, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E720))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E728, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E728))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797CCE8, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E728);
  }
  std::mutex::lock(&stru_26797CCE8);
  unint64_t v6 = (void *)qword_26797E718;
  unint64_t v7 = sub_216129260(qword_26797E718 + 24, (uint64_t)a1);
  int8x8_t v8 = (int8x8_t)v6[1];
  if (!*(void *)&v8) {
    goto LABEL_20;
  }
  unint64_t v9 = v7;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v12 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v12 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v8 - 1) & v7;
  }
  int v13 = *(unsigned __int8 ***)(*v6 + 8 * v12);
  if (!v13 || (uint64_t v14 = *v13) == 0)
  {
LABEL_20:
    uint64_t v17 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v18 = os_signpost_id_make_with_pointer(v17, a1);
    unint64_t v19 = sub_2162D1CE4(0xDu);
    if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v20 = v19;
      if (os_signpost_enabled(v19))
      {
        if (a1[23] >= 0) {
          uint64_t v21 = a1;
        }
        else {
          uint64_t v21 = *(char **)a1;
        }
        int buf = 136315138;
        *(void *)buf_4 = v21;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v18, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    operator new();
  }
  uint64_t v15 = (uint64_t)(v6 + 4);
  while (1)
  {
    unint64_t v16 = *((void *)v14 + 1);
    if (v16 == v9) {
      break;
    }
    if (v11 > 1)
    {
      if (v16 >= *(void *)&v8) {
        v16 %= *(void *)&v8;
      }
    }
    else
    {
      v16 &= *(void *)&v8 - 1;
    }
    if (v16 != v12) {
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v14 = *(unsigned __int8 **)v14;
    if (!v14) {
      goto LABEL_20;
    }
  }
  if ((sub_21612970C(v15, v14 + 16, (unsigned __int8 *)a1) & 1) == 0) {
    goto LABEL_19;
  }
  double v22 = (std::__shared_weak_count *)*((void *)v14 + 6);
  if (!v22) {
    goto LABEL_20;
  }
  if (v22->__shared_owners_ == -1 || a3 != 0) {
    goto LABEL_20;
  }
  unint64_t v24 = std::__shared_weak_count::lock(v22);
  if (v24) {
    uint64_t v25 = *((void *)v14 + 5);
  }
  else {
    uint64_t v25 = 0;
  }
  std::mutex::unlock(&stru_26797CCE8);
  *a4 = v25;
  a4[1] = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_2161121B0(v24);
  }
}

void sub_21632CCCC(_Unwind_Exception *a1)
{
}

void sub_21632CD64()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_21632D3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  MEMORY[0x2166CA7C0](a13, 0x1000C80BDFB0063);
  MEMORY[0x2166CA7C0](a12, 0x1000C8077774924);
  sub_216130420(&a39);
  if (v40) {
    MEMORY[0x2166CA7C0](v40, 0x1000C8077774924);
  }
  sub_21617DB94(&a16, 0);
  a22 = a11;
  sub_21632DCD8(&a22);
  if (*(char *)(v39 + 23) < 0) {
    operator delete(*(void **)v39);
  }
  MEMORY[0x2166CA800](v39, 0x1032C4049B9E7EFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_21632D53C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_21632DCD8(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_21632D588(uint64_t a1, CFStringRef theString1, char a3)
{
  if (theString1)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    if (v7 == v6)
    {
      int8x8_t v8 = *(const void ***)(a1 + 48);
LABEL_7:
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 3) - 20 <= 0xFFFFFFFFFFFFFFEALL)
      {
        if ((const void **)v7 != v8)
        {
          for (uint64_t i = v7 + 24; (const void **)i != v8; i += 24)
          {
            if (*(double *)(i + 16) < *(double *)(v7 + 16)) {
              uint64_t v7 = i;
            }
          }
        }
        uint64_t v10 = v7 + 24;
        if ((const void **)(v7 + 24) != v8)
        {
          do
          {
            unint64_t v11 = *(const void **)v10;
            *(void *)uint64_t v10 = 0;
            sub_2161868BC((const void **)(v10 - 24), v11);
            *(_OWORD *)(v10 - 16) = *(_OWORD *)(v10 + 8);
            v10 += 24;
          }
          while ((const void **)v10 != v8);
          int8x8_t v8 = *(const void ***)(a1 + 56);
          uint64_t v7 = v10 - 24;
        }
        while (v8 != (const void **)v7)
        {
          v8 -= 3;
          sub_2161868BC(v8, 0);
        }
        *(void *)(a1 + 56) = v7;
      }
      CFTypeRef v12 = CFRetain(theString1);
      unint64_t v13 = *(void *)(a1 + 64);
      unint64_t v14 = *(void *)(a1 + 56);
      if (v14 >= v13)
      {
        uint64_t v16 = *(void *)(a1 + 48);
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
        uint64_t v19 = 2 * v18;
        if (2 * v18 <= v17 + 1) {
          uint64_t v19 = v17 + 1;
        }
        if (v18 >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v19;
        }
        uint64_t v35 = a1 + 64;
        uint64_t v21 = (char *)sub_216178CAC(v20);
        uint64_t v23 = v22;
        unint64_t v24 = &v21[24 * v17];
        *(void *)unint64_t v24 = 0;
        v24[8] = a3;
        *((void *)v24 + 2) = 0x3FF0000000000000;
        sub_2161868BC((const void **)v24, v12);
        uint64_t v26 = *(void *)(a1 + 48);
        unint64_t v25 = *(void *)(a1 + 56);
        if (v25 == v26)
        {
          int64x2_t v29 = vdupq_n_s64(v25);
          std::locale v27 = v24;
        }
        else
        {
          std::locale v27 = v24;
          do
          {
            uint64_t v28 = *(void *)(v25 - 24);
            v25 -= 24;
            *(void *)unint64_t v25 = 0;
            *((void *)v27 - 3) = v28;
            v27 -= 24;
            *(_OWORD *)(v27 + 8) = *(_OWORD *)(v25 + 8);
          }
          while (v25 != v26);
          int64x2_t v29 = *(int64x2_t *)(a1 + 48);
        }
        uint64_t v15 = v24 + 24;
        *(void *)(a1 + 48) = v27;
        *(void *)(a1 + 56) = v24 + 24;
        int64x2_t v33 = v29;
        uint64_t v30 = *(void *)(a1 + 64);
        *(void *)(a1 + 64) = &v21[24 * v23];
        uint64_t v34 = v30;
        uint64_t v32 = v29.i64[0];
        sub_21632DD60((uint64_t)&v32);
      }
      else
      {
        *(void *)unint64_t v14 = 0;
        *(unsigned char *)(v14 + 8) = a3;
        *(void *)(v14 + 16) = 0x3FF0000000000000;
        sub_2161868BC((const void **)v14, v12);
        uint64_t v15 = (char *)(v14 + 24);
      }
      *(void *)(a1 + 56) = v15;
      *(_DWORD *)(a1 + 32) = -1431655765 * ((unint64_t)&v15[-*(void *)(a1 + 48)] >> 3);
    }
    else
    {
      while (CFStringCompare(theString1, *(CFStringRef *)v7, 0))
      {
        v7 += 24;
        if (v7 == v6)
        {
          uint64_t v7 = *(void *)(a1 + 48);
          int8x8_t v8 = *(const void ***)(a1 + 56);
          goto LABEL_7;
        }
      }
      *(unsigned char *)(v7 + 8) = a3;
      *(double *)(v7 + 16) = *(double *)(v7 + 16) + 1.0;
    }
  }
  return theString1 != 0;
}

void sub_21632D828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(double **)(a1 + 56);
  unint64_t v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v4) >> 3));
  if (v5 == (double *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_21632DDB4(v4, v5, v7, 1);
  uint64_t v9 = *(void *)(a1 + 48);
  for (uint64_t i = *(void *)(a1 + 56); v9 != i; v9 += 24)
    (*(void (**)(uint64_t, void, void))(a2 + 16))(a2, *(void *)v9, *(unsigned __int8 *)(v9 + 8));
}

BOOL sub_21632D8BC(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(a1 + 40);
  if (v3 <= 0.0)
  {
LABEL_8:
    *(double *)(a1 + 4sub_216195244(&a9, 0) = Current;
    goto LABEL_9;
  }
  double v4 = Current - v3;
  double v5 = v4 / 86400.0;
  BOOL v6 = v4 < 0.0;
  double v7 = 0.0;
  if (!v6) {
    double v7 = v5;
  }
  float v8 = floor(v7);
  if (v8 > 0.0)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    if (v9 != v10)
    {
      float v11 = v8 * -0.007;
      double v12 = expf(v11);
      do
      {
        *(double *)(v9 + 16) = *(double *)(v9 + 16) * v12;
        v9 += 24;
      }
      while (v9 != v10);
    }
    goto LABEL_8;
  }
LABEL_9:

  return sub_21632D984(a1);
}

BOOL sub_21632D984(uint64_t a1)
{
  v7[19] = *MEMORY[0x263EF8340];
  sub_216157A4C(&v5);
  int v2 = *(_DWORD *)&v6[*(void *)(v5 - 24) + 24] & 5;
  if (!v2)
  {
    std::ostream::write();
    double v3 = *(const __CFString ***)(a1 + 48);
    if (v3 != *(const __CFString ***)(a1 + 56)) {
      sub_2161E1FB8(*v3);
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)&v6[*(void *)(v5 - 24) - 8], *(_DWORD *)&v6[*(void *)(v5 - 24) + 24] | 4);
    }
  }
  uint64_t v5 = *MEMORY[0x263F8C2B0];
  *(void *)&v6[*(void *)(v5 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x2166CA430](v6);
  std::ostream::~ostream();
  MEMORY[0x2166CA750](v7);
  return v2 == 0;
}

void sub_21632DBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21619F878((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21632DC08(void *a1)
{
  if (!std::filebuf::close())
  {
    int v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

BOOL sub_21632DC70(uint64_t a1)
{
  std::ios_base::iostate v3 = *(const void ***)(a1 + 48);
  for (uint64_t i = *(const void ***)(a1 + 56); i != v3; sub_2161868BC(i, 0))
    i -= 3;
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_216195244(&a9, 0) = 0;

  return sub_21632D984(a1);
}

void sub_21632DCD8(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (const void **)**a1;
  if (v2)
  {
    double v4 = (const void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_2161868BC(v4, 0);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_21632DD60(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_2161868BC((const void **)(i - 24), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21632DDB4(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v100 = (uint64_t)(a2 - 3);
    uint64_t v9 = (double *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (uint64_t)v9;
          uint64_t v10 = (char *)a2 - (char *)v9;
          uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
          if (!(!v5 & v4))
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(a2 - 1) <= *(double *)(a1 + 16)) {
                  return;
                }
                uint64_t v46 = a1;
                uint64_t v47 = (uint64_t)(a2 - 3);
                break;
              case 3:
                sub_21632E76C(a1, a1 + 24, v100);
                return;
              case 4:
                sub_21632EA84(a1, a1 + 24, a1 + 48, v100);
                return;
              case 5:
                sub_21632EA84(a1, a1 + 24, a1 + 48, a1 + 72);
                if (*(a2 - 1) <= *(double *)(a1 + 88)) {
                  return;
                }
                sub_21632E700(a1 + 72, v100);
                if (*(double *)(a1 + 88) <= *(double *)(a1 + 64)) {
                  return;
                }
                sub_21632E700(a1 + 48, a1 + 72);
                if (*(double *)(a1 + 64) <= *(double *)(a1 + 40)) {
                  return;
                }
                sub_21632E700(a1 + 24, a1 + 48);
                if (*(double *)(a1 + 40) <= *(double *)(a1 + 16)) {
                  return;
                }
                uint64_t v46 = a1;
                uint64_t v47 = a1 + 24;
                break;
              default:
                JUMPOUT(0);
            }
            sub_21632E700(v46, v47);
            return;
          }
          if (v10 <= 575)
          {
            uint64_t v48 = (const void **)(a1 + 24);
            BOOL v50 = (double *)a1 == a2 || v48 == (const void **)a2;
            if (a4)
            {
              if (!v50)
              {
                uint64_t v51 = 0;
                uint64_t v52 = a1;
                do
                {
                  int64_t v53 = v48;
                  if (*(double *)(v52 + 40) > *(double *)(v52 + 16))
                  {
                    unint64_t v54 = *v48;
                    *uint64_t v48 = 0;
                    uint64_t v55 = *(void *)(v52 + 32);
                    double v56 = *(double *)(v52 + 40);
                    uint64_t v57 = v51;
                    while (1)
                    {
                      uint64_t v58 = a1 + v57;
                      unint64_t v59 = *(const void **)(a1 + v57);
                      *(void *)(a1 + v57) = 0;
                      sub_2161868BC((const void **)(a1 + v57 + 24), v59);
                      *(_OWORD *)(a1 + v57 + 32) = *(_OWORD *)(a1 + v57 + 8);
                      if (!v57) {
                        break;
                      }
                      v57 -= 24;
                      if (v56 <= *(double *)(v58 - 8))
                      {
                        uint64_t v60 = a1 + v57 + 24;
                        goto LABEL_89;
                      }
                    }
                    uint64_t v60 = a1;
LABEL_89:
                    sub_2161868BC((const void **)v60, v54);
                    *(void *)(v58 + 8) = v55;
                    *(double *)(v60 + 16) = v56;
                  }
                  uint64_t v48 = v53 + 3;
                  v51 += 24;
                  uint64_t v52 = (uint64_t)v53;
                }
                while (v53 + 3 != (const void **)a2);
              }
            }
            else if (!v50)
            {
              do
              {
                BOOL v92 = v48;
                if (*(double *)(a1 + 40) > *(double *)(a1 + 16))
                {
                  uint64_t v93 = *v48;
                  *uint64_t v48 = 0;
                  unint64_t v94 = *(const void **)(a1 + 32);
                  double v95 = *(double *)(a1 + 40);
                  int v96 = v48;
                  unsigned __int16 v97 = v48;
                  do
                  {
                    unsigned int v98 = *(v97 - 3);
                    v97 -= 3;
                    void *v97 = 0;
                    sub_2161868BC(v96, v98);
                    *(_OWORD *)(v96 + 1) = *((_OWORD *)v96 - 1);
                    double v99 = *((double *)v96 - 4);
                    int v96 = v97;
                  }
                  while (v95 > v99);
                  sub_2161868BC(v97, v93);
                  v97[1] = v94;
                  *((double *)v97 + 2) = v95;
                }
                uint64_t v48 = v92 + 3;
                a1 = (uint64_t)v92;
              }
              while (v92 + 3 != (const void **)a2);
            }
            return;
          }
          if (!a3)
          {
            if ((double *)a1 != a2)
            {
              int64_t v61 = (unint64_t)(v11 - 2) >> 1;
              int64_t v62 = v61;
              do
              {
                int64_t v63 = v62;
                if (v61 >= v62)
                {
                  uint64_t v64 = (2 * v62) | 1;
                  uint64_t v65 = a1 + 24 * v64;
                  if (2 * v63 + 2 < v11 && *(double *)(a1 + 24 * v64 + 16) > *(double *)(v65 + 40))
                  {
                    v65 += 24;
                    uint64_t v64 = 2 * v63 + 2;
                  }
                  double v66 = *(double *)(a1 + 24 * v63 + 16);
                  if (*(double *)(v65 + 16) <= v66)
                  {
                    uint64_t v67 = a1 + 24 * v63;
                    uint64_t v68 = *(const void **)v67;
                    *(void *)uint64_t v67 = 0;
                    uint64_t v101 = *(void *)(v67 + 8);
                    uint64_t v103 = v68;
                    do
                    {
                      uint64_t v69 = v65;
                      uint64_t v70 = *(const void **)v65;
                      *(void *)uint64_t v65 = 0;
                      sub_2161868BC((const void **)v67, v70);
                      *(_OWORD *)(v67 + 8) = *(_OWORD *)(v69 + 8);
                      if (v61 < v64) {
                        break;
                      }
                      uint64_t v71 = (2 * v64) | 1;
                      uint64_t v65 = a1 + 24 * v71;
                      if (2 * v64 + 2 < v11 && *(double *)(a1 + 24 * v71 + 16) > *(double *)(v65 + 40))
                      {
                        v65 += 24;
                        uint64_t v71 = 2 * v64 + 2;
                      }
                      uint64_t v67 = v69;
                      uint64_t v64 = v71;
                    }
                    while (*(double *)(v65 + 16) <= v66);
                    sub_2161868BC((const void **)v69, v103);
                    *(void *)(v69 + 8) = v101;
                    *(double *)(v69 + 16) = v66;
                  }
                }
                int64_t v62 = v63 - 1;
              }
              while (v63);
              int64_t v72 = v10 / 0x18uLL;
              do
              {
                uint64_t v73 = 0;
                CFRange v74 = a2;
                CFRange v75 = *(const void **)a1;
                *(void *)a1 = 0;
                long long v105 = *(_OWORD *)(a1 + 8);
                uint64_t v76 = a1;
                do
                {
                  uint64_t v77 = v76;
                  uint64_t v78 = v73 + 1;
                  v76 += 24 * (v73 + 1);
                  uint64_t v79 = 2 * v73;
                  uint64_t v73 = (2 * v73) | 1;
                  int64_t v80 = v79 + 2;
                  if (v80 < v72 && *(double *)(v77 + 24 * v78 + 16) > *(double *)(v76 + 40))
                  {
                    v76 += 24;
                    uint64_t v73 = v80;
                  }
                  uint64_t v81 = *(const void **)v76;
                  *(void *)uint64_t v76 = 0;
                  sub_2161868BC((const void **)v77, v81);
                  *(_OWORD *)(v77 + 8) = *(_OWORD *)(v76 + 8);
                }
                while (v73 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
                uint64_t v82 = (_OWORD *)(v76 + 8);
                a2 = v74 - 3;
                if ((double *)v76 == v74 - 3)
                {
                  sub_2161868BC((const void **)v76, v75);
                  *uint64_t v82 = v105;
                }
                else
                {
                  int64_t v83 = (const void *)*((void *)v74 - 3);
                  *(v74 - 3) = 0.0;
                  sub_2161868BC((const void **)v76, v83);
                  *uint64_t v82 = *((_OWORD *)v74 - 1);
                  sub_2161868BC((const void **)v74 - 3, v75);
                  *((_OWORD *)v74 - 1) = v105;
                  uint64_t v84 = v76 - a1 + 24;
                  if (v84 >= 25)
                  {
                    unint64_t v85 = (v84 / 0x18uLL - 2) >> 1;
                    double v86 = *(double *)(v76 + 16);
                    if (*(double *)(a1 + 24 * v85 + 16) > v86)
                    {
                      size_t v87 = *(const void **)v76;
                      uint64_t v88 = *(void *)(v76 + 8);
                      *(void *)uint64_t v76 = 0;
                      do
                      {
                        uint64_t v89 = v76;
                        uint64_t v76 = a1 + 24 * v85;
                        unint64_t v90 = *(const void **)v76;
                        *(void *)uint64_t v76 = 0;
                        sub_2161868BC((const void **)v89, v90);
                        *(_OWORD *)(v89 + 8) = *(_OWORD *)(v76 + 8);
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                      }
                      while (*(double *)(a1 + 24 * v85 + 16) > v86);
                      sub_2161868BC((const void **)v76, v87);
                      *(void *)(v76 + 8) = v88;
                      *(double *)(v76 + 16) = v86;
                    }
                  }
                }
              }
              while (v72-- > 2);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          unint64_t v13 = (const void **)(a1 + 24 * ((unint64_t)v11 >> 1));
          if ((unint64_t)v10 < 0xC01)
          {
            sub_21632E76C((uint64_t)v13, a1, v100);
          }
          else
          {
            sub_21632E76C(a1, (uint64_t)v13, v100);
            uint64_t v14 = 3 * v12;
            uint64_t v15 = a1 + 8 * v14;
            sub_21632E76C(a1 + 24, v15 - 24, (uint64_t)(a2 - 6));
            sub_21632E76C(a1 + 48, a1 + 24 + 8 * v14, (uint64_t)(a2 - 9));
            sub_21632E76C(v15 - 24, (uint64_t)v13, a1 + 24 + 8 * v14);
            uint64_t v16 = *(const void **)a1;
            *(void *)a1 = 0;
            long long v104 = *(_OWORD *)(a1 + 8);
            unint64_t v17 = *v13;
            char *v13 = 0;
            sub_2161868BC((const void **)a1, v17);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v15 + 8);
            sub_2161868BC(v13, v16);
            *(_OWORD *)(v15 + 8) = v104;
          }
          --a3;
          if (a4) {
            break;
          }
          double v18 = *(double *)(a1 + 16);
          if (*(double *)(a1 - 8) > v18) {
            goto LABEL_12;
          }
          uint64_t v34 = *(const void **)a1;
          *(void *)a1 = 0;
          if (v18 <= *(a2 - 1))
          {
            uint64_t v37 = (double *)(a1 + 24);
            do
            {
              uint64_t v9 = v37;
              if (v37 >= a2) {
                break;
              }
              double v38 = v37[2];
              v37 += 3;
            }
            while (v18 <= v38);
          }
          else
          {
            uint64_t v35 = a1;
            do
            {
              uint64_t v9 = (double *)(v35 + 24);
              double v36 = *(double *)(v35 + 40);
              v35 += 24;
            }
            while (v18 <= v36);
          }
          unint64_t v39 = (unint64_t)a2;
          if (v9 < a2)
          {
            uint64_t v40 = a2;
            do
            {
              unint64_t v39 = (unint64_t)(v40 - 3);
              double v41 = *(v40 - 1);
              v40 -= 3;
            }
            while (v18 > v41);
          }
          uint64_t v42 = *(void *)(a1 + 8);
          while ((unint64_t)v9 < v39)
          {
            sub_21632E700((uint64_t)v9, v39);
            do
            {
              double v43 = v9[5];
              v9 += 3;
            }
            while (v18 <= v43);
            do
            {
              double v44 = *(double *)(v39 - 8);
              v39 -= 24;
            }
            while (v18 > v44);
          }
          if (v9 - 3 != (double *)a1)
          {
            char v45 = (const void *)*((void *)v9 - 3);
            *(v9 - 3) = 0.0;
            sub_2161868BC((const void **)a1, v45);
            *(_OWORD *)(a1 + 8) = *((_OWORD *)v9 - 1);
          }
          sub_2161868BC((const void **)v9 - 3, v34);
          a4 = 0;
          *((void *)v9 - 2) = v42;
          *(v9 - 1) = v18;
        }
        double v18 = *(double *)(a1 + 16);
LABEL_12:
        uint64_t v19 = 0;
        unint64_t v20 = *(const void **)a1;
        *(void *)a1 = 0;
        uint64_t v21 = *(void *)(a1 + 8);
        do
        {
          double v22 = *(double *)(a1 + v19 + 40);
          v19 += 24;
        }
        while (v22 > v18);
        uint64_t v23 = (double *)(a1 + v19);
        unint64_t v24 = a2;
        if (v19 == 24)
        {
          std::locale v27 = a2;
          while (v23 < v27)
          {
            unint64_t v25 = (unint64_t)(v27 - 3);
            double v28 = *(v27 - 1);
            v27 -= 3;
            if (v28 > v18) {
              goto LABEL_22;
            }
          }
          unint64_t v25 = (unint64_t)v27;
        }
        else
        {
          do
          {
            unint64_t v25 = (unint64_t)(v24 - 3);
            double v26 = *(v24 - 1);
            v24 -= 3;
          }
          while (v26 <= v18);
        }
LABEL_22:
        if ((unint64_t)v23 >= v25)
        {
          uint64_t v9 = v23;
        }
        else
        {
          unint64_t v29 = v25;
          uint64_t v9 = v23;
          do
          {
            sub_21632E700((uint64_t)v9, v29);
            do
            {
              double v30 = v9[5];
              v9 += 3;
            }
            while (v30 > v18);
            do
            {
              double v31 = *(double *)(v29 - 8);
              v29 -= 24;
            }
            while (v31 <= v18);
          }
          while ((unint64_t)v9 < v29);
        }
        if (v9 - 3 != (double *)a1)
        {
          uint64_t v32 = (const void *)*((void *)v9 - 3);
          *(v9 - 3) = 0.0;
          sub_2161868BC((const void **)a1, v32);
          *(_OWORD *)(a1 + 8) = *((_OWORD *)v9 - 1);
        }
        sub_2161868BC((const void **)v9 - 3, v20);
        *((void *)v9 - 2) = v21;
        *(v9 - 1) = v18;
        if ((unint64_t)v23 >= v25) {
          break;
        }
LABEL_35:
        sub_21632DDB4(a1, v9 - 3, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v33 = sub_21632E82C((double *)a1, v9 - 3);
      if (sub_21632E82C(v9, a2)) {
        break;
      }
      if (!v33) {
        goto LABEL_35;
      }
    }
    a2 = v9 - 3;
    if (!v33) {
      continue;
    }
    break;
  }
}

__n128 sub_21632E700(uint64_t a1, uint64_t a2)
{
  char v4 = *(const void **)a1;
  *(void *)a1 = 0;
  __n128 v7 = *(__n128 *)(a1 + 8);
  char v5 = *(const void **)a2;
  *(void *)a2 = 0;
  sub_2161868BC((const void **)a1, v5);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_2161868BC((const void **)a2, v4);
  __n128 result = v7;
  *(__n128 *)(a2 + 8) = v7;
  return result;
}

double sub_21632E76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  double result = *(double *)(a2 + 16);
  double v7 = *(double *)(a3 + 16);
  if (result <= *(double *)(a1 + 16))
  {
    if (v7 <= result) {
      return result;
    }
    sub_21632E700(a2, a3);
    double result = *(double *)(a2 + 16);
    if (result <= *(double *)(v5 + 16)) {
      return result;
    }
    a1 = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 <= result)
    {
      sub_21632E700(a1, a2);
      double result = *(double *)(a3 + 16);
      if (result <= *(double *)(a2 + 16)) {
        return result;
      }
      a1 = a2;
    }
    uint64_t v8 = a3;
  }

  *(void *)&double result = sub_21632E700(a1, v8).n128_u64[0];
  return result;
}

BOOL sub_21632E82C(double *a1, double *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) > a1[2])
      {
        uint64_t v6 = (uint64_t)(a2 - 3);
        uint64_t v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      sub_21632E76C((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a2 - 3));
      return 1;
    case 4uLL:
      sub_21632EA84((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a1 + 6), (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      sub_21632EA84((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
      if (*(a2 - 1) > a1[11])
      {
        sub_21632E700((uint64_t)(a1 + 9), (uint64_t)(a2 - 3));
        if (a1[11] > a1[8])
        {
          sub_21632E700((uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
          if (a1[8] > a1[5])
          {
            sub_21632E700((uint64_t)(a1 + 3), (uint64_t)(a1 + 6));
            if (a1[5] > a1[2])
            {
              uint64_t v7 = (uint64_t)a1;
              uint64_t v6 = (uint64_t)(a1 + 3);
LABEL_4:
              sub_21632E700(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 6;
      sub_21632E76C((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a1 + 6));
      uint64_t v9 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = v9[2];
    if (v12 > v8[2])
    {
      unint64_t v13 = *(const void **)v9;
      uint64_t v14 = *((void *)v9 + 1);
      uint64_t v15 = v10;
      *uint64_t v9 = 0.0;
      while (1)
      {
        uint64_t v16 = (double *)((char *)a1 + v15);
        unint64_t v17 = *(const void **)((char *)a1 + v15 + 48);
        *(double *)((char *)a1 + v15 + 48) = 0.0;
        sub_2161868BC((const void **)((char *)a1 + v15 + 72), v17);
        *(_OWORD *)((char *)a1 + v15 + 8sub_216195244(&a9, 0) = *(_OWORD *)((char *)a1 + v15 + 56);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v12 <= v16[5])
        {
          uint64_t v18 = (uint64_t)a1 + v15 + 72;
          goto LABEL_14;
        }
      }
      uint64_t v18 = (uint64_t)a1;
LABEL_14:
      sub_2161868BC((const void **)v18, v13);
      *((void *)v16 + 7) = v14;
      *(double *)(v18 + 16) = v12;
      if (++v11 == 8) {
        return v9 + 3 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 24;
    v9 += 3;
    if (v9 == a2) {
      return 1;
    }
  }
}

double sub_21632EA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_21632E76C(a1, a2, a3);
  double result = *(double *)(a4 + 16);
  if (result > *(double *)(a3 + 16))
  {
    sub_21632E700(a3, a4);
    double result = *(double *)(a3 + 16);
    if (result > *(double *)(a2 + 16))
    {
      sub_21632E700(a2, a3);
      double result = *(double *)(a2 + 16);
      if (result > *(double *)(a1 + 16))
      {
        *(void *)&double result = sub_21632E700(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

void sub_21632EB30(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21632EB68(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_21632D53C(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_21632EBB0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC100)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_21632EBF4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = *(const std::string **)(v4 + 48);
    uint64_t v6 = *(const std::string **)(v4 + 56);
    while (v5 != v6)
    {
      if (v5[1].__r_.__value_.__s.__data_[4])
      {
        std::string::operator=((std::string *)(a1 + 16), v5);
        return a1;
      }
      uint64_t v5 = (const std::string *)((char *)v5 + 32);
    }
  }
  return a1;
}

void sub_21632EC5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_21632EC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F410, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F410))
  {
    qword_26797F408 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797F410);
  }
  unint64_t v6 = 3;
  if (*(unsigned char *)qword_26797F408) {
    unint64_t v6 = 1;
  }
  uint64_t v7 = **(void **)a1;
  if (v7)
  {
    unint64_t v8 = *(void *)(a3 + 40);
    if (v8 <= 8 && v8 >= v6 && *(void *)(a3 + 24) != 0)
    {
      unsigned int v10 = **(_DWORD **)(a1 + 8);
      sub_2162229D0(v7, *(unsigned __int16 **)(a3 + 32), v8, (v10 >> 4) & 0x20 | v10 & 2 | (((v10 >> 5) & 1) << 7) | (v10 >> 2) & 0x40 | ((char)v10 >> 7) & 0x18, (uint64_t)v11);
      sub_21632EDC0(a1, a2, v11, a3, 0x7FFFFFFF);
      double v12 = (void **)v11;
      sub_2161921F0(&v12);
    }
  }
}

void sub_21632ED94(_Unwind_Exception *a1)
{
}

void sub_21632EDC0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v8 = a1;
  if ((~**(_DWORD **)(a1 + 8) & 0x6000000) == 0)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v10 = *(void *)(a2 + 56);
    while (v9 != v10)
    {
      if ((*(unsigned int (**)(void))(**(void **)v9 + 96))() == 76) {
        return;
      }
      v9 += 8;
    }
  }
  uint64_t v36 = v8;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E738, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E738))
  {
    qword_26797E730 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797E738);
  }
  int v11 = &unk_26797E000;
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  if (*a3 != v13)
  {
    unint64_t v14 = (v13 - v12) >> 5;
    if (v14 >= 0xC) {
      unint64_t v14 = 12;
    }
    if (v14)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v37 = (void **)(v8 + 16);
      uint64_t v38 = *(void *)(a4 + 48);
      uint64_t v35 = a3;
      do
      {
        uint64_t v18 = sub_216178FA4(v12 + v15, v37);
        uint64_t v19 = (void *)(*(uint64_t (**)(void *))(*(void *)v18[7] + 16))(v18[7]);
        unint64_t v20 = (uint64_t)(v19[1] - *v19) >> 1;
        if (v38 <= 0 && v20 <= *(void *)(a4 + 40) || (*(unsigned char *)(*(void *)(v8 + 8) + 3) & 2) == 0)
        {
          if (a5 == 0x7FFFFFFF)
          {
            uint64_t v21 = v11[230];
            int v22 = *(__int16 *)(v21 + 496);
            int v23 = v20 - *(_DWORD *)(a4 + 40);
            if (v23 >= 1) {
              v22 += *(__int16 *)(v21 + 512) + *(__int16 *)(v21 + 512) * v23;
            }
            int v40 = v22;
          }
          else
          {
            int v40 = a5 + 1;
          }
          uint64_t v39 = v17;
          uint64_t v24 = *a3 + v15;
          sub_2161C04AC(0);
          __int16 v25 = word_26797EF62;
          double v26 = (uint64_t *)sub_216222F20(v24, off_26797C7B0[0]);
          std::locale v27 = (uint64_t *)sub_216222F20(v24, off_26797C7A8[0]);
          uint64_t v28 = *v26;
          uint64_t v29 = v26[1];
          if (*v26 == v29)
          {
            a5 = v40;
            uint64_t v8 = v36;
          }
          else
          {
            uint64_t v30 = *v27;
            uint64_t v31 = v27[1];
            if (*v27 != v31)
            {
              uint64_t v32 = *(void *)(a4 + 24);
              BOOL v33 = (char *)operator new(0x28uLL);
              *(_DWORD *)BOOL v33 = 4;
              *(void *)(v33 + 12) = 0;
              *(void *)(v33 + 4) = 0;
              *((_DWORD *)v33 + 5) = 0;
              *((_WORD *)v33 + 12) = (v31 - v30) >> 1;
              *((_WORD *)v33 + 13) = v32;
              *((_WORD *)v33 + 14) = (v29 - v28) >> 1;
              *((_WORD *)v33 + 15) = v25;
              *((_WORD *)v33 + 16) = v25;
              *((_WORD *)v33 + 17) = 0;
              v33[36] = 0;
              *(_WORD *)(v33 + 37) = 513;
              v33[39] = 0;
              operator new();
            }
            a3 = v35;
            a5 = v40;
            uint64_t v8 = v36;
            int v11 = (void *)&unk_26797E000;
          }
          uint64_t v17 = v39;
          if (v39 == *(unsigned __int16 *)(v11[230] + 416)) {
            break;
          }
        }
        ++v16;
        uint64_t v12 = *a3;
        unint64_t v34 = (uint64_t)(a3[1] - *a3) >> 5;
        if (v34 >= 0xC) {
          unint64_t v34 = 12;
        }
        v15 += 32;
      }
      while (v16 < v34);
    }
  }
}

void sub_21632F458(_Unwind_Exception *a1)
{
}

void sub_21632F518(void *a1)
{
  *a1 = &unk_26C6C6A08;
  operator new();
}

void sub_21632F800(_Unwind_Exception *a1)
{
  sub_21632F9F0((void *)(v2 + 24));
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_21632F8B8(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[7];
  uint64_t v4 = (uint64_t)(a1 + 7);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_216324B00();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_2160FFAA8(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = a2;
    uint64_t v8 = v16 + 8;
    uint64_t v19 = (char *)a1[5];
    uint64_t v18 = (char *)a1[6];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    a1[5] = v16;
    a1[6] = v8;
    a1[7] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  a1[6] = v8;
}

uint64_t sub_21632F994(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7 = sub_216324488(*(void *)(*(void *)(a1 + 32) + 16) + 32);

  return sub_216260530((uint64_t)v7, a2, a3, a4);
}

void *sub_21632F9F0(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_21632FA34(void *a1)
{
  *a1 = &unk_26C6C6A08;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 80);
    if (v3) {
      MEMORY[0x2166CA800](v3, 0x1020C40B39BF849);
    }
    uint64_t v4 = *(void *)(v2 + 88);
    if (v4) {
      MEMORY[0x2166CA800](v4, 0x1020C40B39BF849);
    }
    uint64_t v19 = (void **)(v2 + 56);
    sub_216332484(&v19);
    uint64_t v5 = sub_21627ADA0(v2);
    MEMORY[0x2166CA800](v5, 0x10A0C4079FC9E15);
  }
  uint64_t v6 = a1[7];
  if (v6)
  {
    _Block_release(*(const void **)(v6 + 8));
    MEMORY[0x2166CA800](v6, 0x10E0C400FD248ABLL);
  }
  uint64_t v7 = a1[3];
  if (v7)
  {
    uint64_t v8 = *(void **)(v7 + 40);
    if (v8)
    {
      *(void *)(v7 + 48) = v8;
      operator delete(v8);
    }
    uint64_t v9 = sub_21632A6B4(v7);
    MEMORY[0x2166CA800](v9, 0x10E0C40A81385DBLL);
  }
  uint64_t v10 = a1[4];
  if (v10)
  {
    uint64_t v11 = *(void **)(v10 + 40);
    if (v11)
    {
      *(void *)(v10 + 48) = v11;
      operator delete(v11);
    }
    uint64_t v12 = sub_21632A6B4(v10);
    MEMORY[0x2166CA800](v12, 0x10E0C40A81385DBLL);
  }
  uint64_t v13 = (void *)a1[2];
  if (v13)
  {
    unint64_t v14 = sub_216323698(v13);
    MEMORY[0x2166CA800](v14, 0x10E0C402345DB33);
  }
  sub_2162EE6A8(a1 + 21);
  uint64_t v15 = (void *)a1[18];
  if (v15)
  {
    a1[19] = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)a1[15];
  if (v16)
  {
    a1[16] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[8];
  if (v17)
  {
    a1[9] = v17;
    operator delete(v17);
  }
  return a1;
}

void sub_21632FBD8(void *a1)
{
  sub_21632FA34(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21632FC10(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(v3 + 56);
  if (0x2E8BA2E8BA2E8BA3 * ((*(void *)(v3 + 64) - v4) >> 3) > a3)
  {
    unint64_t v8 = *(void *)(a2 + 16) + a3;
    if (v8)
    {
      uint64_t v9 = a1[8];
      uint64_t v10 = a1 + 8;
      unint64_t v11 = v8 - 1;
      if (0x21CFB2B78C13521DLL * ((a1[9] - v9) >> 3) <= v8 - 1)
      {
        sub_216332598((void **)a1 + 8, v8);
        uint64_t v9 = *v10;
      }
      uint64_t v12 = v9 + 424 * v11;
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = a1[7];
    *(void *)(v13 + 4sub_216195244(&a9, 0) = v12;
    if (a3)
    {
      uint64_t v14 = a1[8];
      uint64_t v15 = v13;
      if (0x21CFB2B78C13521DLL * ((a1[9] - v14) >> 3) <= a3 - 1)
      {
        sub_216332598((void **)a1 + 8, a3);
        uint64_t v15 = a1[7];
        uint64_t v14 = a1[8];
      }
      uint64_t v16 = v14 + 424 * (a3 - 1);
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v15 = v13;
    }
    *(void *)(v13 + 48) = v16;
    *(unsigned char *)(v15 + 16) = 1;
    uint64_t v17 = v4 + 88 * a3;
    uint64_t v18 = v17 + 64;
    for (uint64_t i = *(void *)(v17 + 72); i != v18; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v20 = **(void **)(i + 16);
      uint64_t v21 = (uint64_t *)a1[6];
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      if (v23 == v22 || !(*(unsigned int (**)(void))(**(void **)(v22 - 8) + 24))(*(void *)(v22 - 8))) {
        goto LABEL_18;
      }
      uint64_t v24 = a1[24];
      uint64_t v28 = v20;
      unint64_t v29 = a3;
      uint64_t v27 = a2;
      if (!v24) {
        sub_21610B7AC();
      }
      if ((*(unsigned int (**)(uint64_t, unint64_t *, uint64_t *, uint64_t *))(*(void *)v24 + 48))(v24, &v29, &v28, &v27))
      {
LABEL_18:
        int v25 = *(_DWORD *)(v20 + 28);
        if ((v25 & 0x20) == 0)
        {
          int v26 = *(_DWORD *)(a2 + 28);
          if (((v25 & 2) != 0 || (v26 & 4) == 0)
            && ((v25 & 8) != 0 || (v26 & 0x10) == 0)
            && ((v26 & 8) == 0 || !*(void *)v20 || (*(unsigned char *)(*(void *)v20 + 40) & 6) == 0))
          {
            if (!*(unsigned char *)(v20 + 64)) {
              sub_21632FC10(a1, v20, a3 - *(void *)(v20 + 16));
            }
            sub_216329CF8(a2, v20, a1[5], a1[7]);
          }
        }
      }
    }
  }
}

void sub_21632FE50(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_2162769A4();
  if (*v6 && (v6[9] & 0x10) != 0)
  {
    sub_2162769A4();
    sub_216329F14(a2, *(void *)(a1[5] + 40));
  }
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = a1[1];
  uint64_t v89 = *(void *)(v8 + 56);
  uint64_t v90 = *(void *)(v8 + 64);
  uint64_t v9 = *(void *)(v8 + 24);
  if (v9)
  {
    uint64_t v10 = *(uint64_t **)(v8 + 32);
    size_t v11 = (size_t)v10 - v9;
    if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v10 - v9) >> 3) != *(void *)(v8 + 40)) {
      goto LABEL_26;
    }
  }
  else
  {
    size_t v11 = 56 * *(void *)(v8 + 40);
  }
  uint64_t v12 = (uint64_t *)malloc_type_malloc(v11, 0x1020040B39BF849uLL);
  uint64_t v10 = v12;
  uint64_t v14 = *(uint64_t ***)(v8 + 8);
  unint64_t v13 = *(void *)(v8 + 16);
  if ((unint64_t)v14 >= v13)
  {
    uint64_t v16 = *(uint64_t ***)v8;
    uint64_t v17 = ((uint64_t)v14 - *(void *)v8) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      sub_21610CB04();
    }
    uint64_t v19 = v7;
    uint64_t v20 = v13 - (void)v16;
    if (v20 >> 2 > v18) {
      unint64_t v18 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v18;
    }
    if (v21)
    {
      if (v21 >> 61) {
        sub_2160FFA74();
      }
      uint64_t v22 = (char *)operator new(8 * v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v23 = &v22[8 * v17];
    uint64_t v24 = &v22[8 * v21];
    *(void *)uint64_t v23 = v10;
    uint64_t v15 = v23 + 8;
    uint64_t v7 = v19;
    if (v14 != v16)
    {
      do
      {
        uint64_t v25 = (uint64_t)*--v14;
        *((void *)v23 - 1) = v25;
        v23 -= 8;
      }
      while (v14 != v16);
      uint64_t v14 = *(uint64_t ***)v8;
    }
    *(void *)uint64_t v8 = v23;
    *(void *)(v8 + 8) = v15;
    *(void *)(v8 + 16) = v24;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    void *v14 = v12;
    uint64_t v15 = v14 + 1;
  }
  *(void *)(v8 + 8) = v15;
  *(void *)(v8 + 24) = v10;
LABEL_26:
  ++*(_DWORD *)(v8 + 48);
  *(void *)(v8 + 32) = v10 + 7;
  v10[1] = 0;
  _OWORD v10[2] = 0;
  *uint64_t v10 = a2;
  *((_DWORD *)v10 + 6) = 0;
  v10[4] = 0;
  void v10[5] = 0;
  *((_DWORD *)v10 + 12) = 0;
  uint64_t v27 = *(void *)(v8 + 56);
  unint64_t v26 = *(void *)(v8 + 64);
  uint64_t v88 = a2;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v26 - v27) >> 3) <= a3)
  {
    uint64_t v86 = *(void *)(v8 + 64);
    uint64_t v87 = *(void *)(v8 + 56);
    uint64_t v28 = v87;
    uint64_t v85 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v26 - v27) >> 3);
    unint64_t v29 = v85;
    unint64_t v91 = a3;
    do
    {
      std::string __p = (void *)v29;
      int v93 = 1;
      unint64_t v94 = v29;
      v95[0] = v95;
      v95[1] = v95;
      v95[2] = 0;
      int v96 = 2;
      unint64_t v97 = v29;
      v98[0] = v98;
      v98[1] = v98;
      v98[2] = 0;
      unint64_t v30 = *(void *)(v8 + 72);
      if (v26 >= v30)
      {
        uint64_t v32 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v26 - v28) >> 3);
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) > 0x2E8BA2E8BA2E8BALL) {
          sub_21610CB04();
        }
        unint64_t v34 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v30 - v28) >> 3);
        if (2 * v34 > v33) {
          unint64_t v33 = 2 * v34;
        }
        if (v34 >= 0x1745D1745D1745DLL) {
          unint64_t v35 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 > 0x2E8BA2E8BA2E8BALL) {
            sub_2160FFA74();
          }
          uint64_t v36 = (char *)operator new(88 * v35);
        }
        else
        {
          uint64_t v36 = 0;
        }
        uint64_t v37 = (uint64_t)&v36[88 * v32];
        uint64_t v38 = &v36[88 * v35];
        uint64_t v39 = sub_216332790(v37, (uint64_t)&__p);
        uint64_t v31 = v39 + 88;
        double v41 = *(char **)(v8 + 56);
        int v40 = *(char **)(v8 + 64);
        if (v40 == v41)
        {
          *(void *)(v8 + 56) = v39;
          *(void *)(v8 + 64) = v31;
          *(void *)(v8 + 72) = v38;
        }
        else
        {
          do
          {
            v40 -= 88;
            uint64_t v39 = sub_216332790(v39 - 88, (uint64_t)v40);
          }
          while (v40 != v41);
          int v40 = *(char **)(v8 + 56);
          uint64_t v42 = *(char **)(v8 + 64);
          *(void *)(v8 + 56) = v39;
          *(void *)(v8 + 64) = v31;
          for (*(void *)(v8 + 72) = v38; v42 != v40; v42 -= 88)
          {
            sub_216332534((void *)v42 - 3);
            sub_216332534((void *)v42 - 8);
          }
        }
        a3 = v91;
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        uint64_t v31 = sub_216332790(v26, (uint64_t)&__p) + 88;
      }
      *(void *)(v8 + 64) = v31;
      sub_216332534(v98);
      sub_216332534(v95);
      uint64_t v28 = *(void *)(v8 + 56);
      unint64_t v26 = *(void *)(v8 + 64);
      unint64_t v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v26 - v28) >> 3);
    }
    while (v29 <= a3);
    uint64_t v43 = *(void *)(v8 + 88);
    if (v43)
    {
      if (v86 != v87)
      {
        uint64_t v44 = v28 + 88 * v85;
        char v45 = *(uint64_t **)(v44 - 56);
        uint64_t v46 = *v45;
        *(void *)(v46 + 8) = v45[1];
        *(void *)v45[1] = v46;
        --*(void *)(v44 - 48);
        operator delete(v45);
        uint64_t v28 = *(void *)(v8 + 56);
        uint64_t v43 = *(void *)(v8 + 88);
        unint64_t v29 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v8 + 64) - v28) >> 3);
      }
      uint64_t v47 = (void *)(v28 + 88 * v29);
      uint64_t v48 = operator new(0x18uLL);
      v48[2] = v43;
      uint64_t v49 = *(v47 - 8);
      v47 -= 8;
      *uint64_t v48 = v49;
      v48[1] = v47;
      *(void *)(v49 + 8) = v48;
      *uint64_t v47 = v48;
      ++v47[2];
      uint64_t v27 = v28;
    }
    else
    {
      uint64_t v27 = *(void *)(v8 + 56);
    }
  }
  unint64_t v50 = a3 - v7;
  uint64_t v51 = v27 + 88 * (a3 - v7);
  uint64_t v52 = v27;
  int64_t v53 = operator new(0x18uLL);
  v53[2] = v10;
  uint64_t v55 = *(void *)(v51 + 24);
  unint64_t v54 = (uint64_t *)(v51 + 24);
  *int64_t v53 = v55;
  v53[1] = v54;
  *(void *)(v55 + 8) = v53;
  *unint64_t v54 = (uint64_t)v53;
  ++v54[2];
  uint64_t v56 = v52 + 88 * a3;
  uint64_t v57 = operator new(0x18uLL);
  uint64_t v58 = v10;
  v57[2] = v10;
  uint64_t v60 = *(void *)(v56 + 64);
  unint64_t v59 = (void *)(v56 + 64);
  *uint64_t v57 = v60;
  v57[1] = v59;
  *(void *)(v60 + 8) = v57;
  *unint64_t v59 = v57;
  ++v59[2];
  uint64_t v61 = *(void *)(v8 + 80);
  if (v61 && !*(void *)(v52 + 80))
  {
    int64_t v62 = operator new(0x18uLL);
    v62[2] = v61;
    uint64_t v63 = *(void *)(v52 + 64);
    void *v62 = v63;
    v62[1] = v52 + 64;
    *(void *)(v63 + 8) = v62;
    *(void *)(v52 + 64) = v62;
    ++*(void *)(v52 + 80);
    uint64_t v57 = (void *)*v59;
  }
  uint64_t v64 = v52 + 88 * a3;
  uint64_t v65 = v52 + 88 * v50;
  uint64_t v66 = *(void *)(v65 + 16);
  LODWORD(v65) = *(_DWORD *)(v65 + 8);
  uint64_t v67 = *(void *)(v64 + 56);
  LODWORD(v64) = *(_DWORD *)(v64 + 48);
  v58[1] = *v54;
  v58[2] = v66;
  *((_DWORD *)v58 + 6) = v65;
  v58[4] = (uint64_t)v57;
  v58[5] = v67;
  *((_DWORD *)v58 + 12) = v64;
  unsigned int v68 = *(_DWORD *)(v88 + 36);
  if (v68 - 9 < 8 || v68 <= 7 && ((1 << v68) & 0xA1) != 0)
  {
    uint64_t v69 = a1[7];
    *(void *)(v69 + 4sub_216195244(&a9, 0) = 0;
    *(void *)(v69 + 48) = 0;
    sub_21632FC10(a1, v88, v50);
    int v70 = 1;
  }
  else
  {
    int v70 = 0;
    uint64_t v84 = a1[7];
    *(void *)(v84 + 4sub_216195244(&a9, 0) = 0;
    *(void *)(v84 + 48) = 0;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1[1] + 64) - *(void *)(a1[1] + 56)) >> 3) > (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v90 - v89) >> 3)))
  {
    uint64_t v71 = a1[2];
    uint64_t v72 = *(void *)(*(void *)(v71 + 16) + 8);
    if (v72)
    {
      *(void *)(v72 + 8sub_216195244(&a9, 0) = 0;
      *(void *)(v72 + 88) = 0;
      uint64_t v71 = a1[2];
    }
    uint64_t v73 = *(void *)(*(void *)(v71 + 24) + 8);
    if (v73)
    {
      *(void *)(v73 + 8sub_216195244(&a9, 0) = 0;
      *(void *)(v73 + 88) = 0;
    }
  }
  if (v70)
  {
    uint64_t v74 = a1[7];
    *(void *)(v74 + 4sub_216195244(&a9, 0) = 0;
    *(void *)(v74 + 48) = 0;
    *(unsigned char *)(a1[7] + 16) = (*(_DWORD *)(v88 + 28) & 0x40) == 0;
    CFRange v75 = (uint64_t *)a1[6];
    uint64_t v77 = *v75;
    uint64_t v76 = v75[1];
    if (v77 == v76)
    {
      uint64_t v79 = a1[5];
    }
    else
    {
      int v78 = (*(uint64_t (**)(void))(**(void **)(v76 - 8) + 24))(*(void *)(v76 - 8));
      uint64_t v79 = a1[5];
      if (v78 && !*(unsigned char *)(v79 + 80)) {
        goto LABEL_73;
      }
    }
    sub_216329CF8(a1[4], v88, v79, a1[7]);
  }
LABEL_73:
  int64_t v80 = (unsigned char *)a1[8];
  uint64_t v81 = a1[9];
  uint64_t v82 = (void **)(a1 + 8);
  if (0x21CFB2B78C13521DLL * ((v81 - (uint64_t)v80) >> 3) <= v50)
  {
    sub_216332598(v82, v50 + 1);
    int64_t v80 = *v82;
  }
  unsigned int v83 = *(_DWORD *)(v88 + 36);
  if (v83 <= 0x10 && ((1 << v83) & 0x10081) != 0) {
    v80[424 * v50] = 1;
  }
}

void sub_216330578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2163305B0(uint64_t a1)
{
  double v3 = 0.0;
  uint64_t v1 = a1 + 88;
  uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, double *, uint64_t))(*(void *)a1 + 64))(a1, &v3, 1);
  sub_2161C2CCC(v1, v2, v3);
}

void sub_216330618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 56);
  if (*(void *)(*(void *)(a1 + 8) + 64) == v5) {
    return;
  }
  uint64_t v53 = 0;
  unint64_t v54 = &v53;
  uint64_t v55 = 0x4002000000;
  uint64_t v56 = sub_216330A20;
  v59[0] = 0;
  v59[1] = 0;
  uint64_t v57 = sub_216330A5C;
  uint64_t v58 = v59;
  uint64_t v45 = 0;
  uint64_t v46 = &v45;
  uint64_t v47 = 0x4002000000;
  uint64_t v48 = sub_216330A6C;
  uint64_t v49 = sub_216330A90;
  unint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x5002000000;
  v42[3] = sub_216330AA8;
  v42[4] = sub_216330B18;
  memset(v43, 0, sizeof(v43));
  int v44 = 1065353216;
  v33[0] = MEMORY[0x263EF8330];
  v33[1] = 0x40000000;
  unint64_t v34 = sub_216330B20;
  unint64_t v35 = &unk_26427D060;
  uint64_t v38 = &v45;
  uint64_t v39 = &v53;
  int v40 = v42;
  uint64_t v41 = a1;
  uint64_t v36 = a4;
  uint64_t v37 = a3;
  uint64_t v9 = v5 + 24;
  for (uint64_t i = *(void *)(v5 + 32); i != v9; uint64_t i = *(void *)(i + 8))
    v34(v33, **(uint64_t ***)(i + 16), *(void *)(*(void *)(i + 16) + 40));
  size_t v11 = *(uint64_t **)(a1 + 48);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  if (v13 == v12)
  {
    uint64_t v15 = v54;
  }
  else
  {
    char v14 = (*(uint64_t (**)(void))(**(void **)(v12 - 8) + 24))(*(void *)(v12 - 8));
    uint64_t v15 = v54;
    if (v14)
    {
LABEL_25:
      uint64_t v22 = a2 + 8;
      sub_21612A250(a2, *(void **)(a2 + 8));
      *(void *)a2 = v15[5];
      uint64_t v23 = v15 + 6;
      uint64_t v24 = v15[6];
      *(void *)(a2 + 8) = v24;
      uint64_t v25 = v15[7];
      *(void *)(a2 + 16) = v25;
      if (v25)
      {
        *(void *)(v24 + 16) = v22;
        v15[5] = (uint64_t)v23;
        void *v23 = 0;
        v15[7] = 0;
      }
      else
      {
        *(void *)a2 = v22;
      }
      char v32 = 0;
      uint64_t v27 = v46[5];
      uint64_t v26 = v46[6];
      if (v26 == v27)
      {
        (*(void (**)(uint64_t, void, char *))(a5 + 16))(a5, 0, &v32);
      }
      else
      {
        do
        {
          char v32 = 0;
          uint64_t v28 = *(void *)(*(void *)v27 + 40);
          uint64_t v29 = *(void *)(*(void *)v27 + 48);
          if (v28 != v29)
          {
            uint64_t v30 = v28 + 8;
            do
            {
              (*(void (**)(uint64_t, void, char *))(a5 + 16))(a5, **(void **)(v30 - 8), &v32);
              if (v32) {
                BOOL v31 = 1;
              }
              else {
                BOOL v31 = v30 == v29;
              }
              v30 += 8;
            }
            while (!v31);
          }
          v27 += 8;
        }
        while (v27 != v26);
      }
      goto LABEL_39;
    }
  }
  if (v15[7] != *(void *)(a2 + 16)) {
    goto LABEL_25;
  }
  uint64_t v16 = (uint64_t *)v15[5];
  if (v16 != v15 + 6)
  {
    uint64_t v17 = *(void **)a2;
    while (v16[4] == v17[4])
    {
      unint64_t v18 = (uint64_t *)v16[1];
      uint64_t v19 = v16;
      if (v18)
      {
        do
        {
          uint64_t v16 = v18;
          unint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v16 = (uint64_t *)v19[2];
          BOOL v31 = *v16 == (void)v19;
          uint64_t v19 = v16;
        }
        while (!v31);
      }
      uint64_t v20 = (void *)v17[1];
      if (v20)
      {
        do
        {
          unint64_t v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          unint64_t v21 = (void *)v17[2];
          BOOL v31 = *v21 == (void)v17;
          uint64_t v17 = v21;
        }
        while (!v31);
      }
      uint64_t v17 = v21;
      if (v16 == v15 + 6) {
        goto LABEL_39;
      }
    }
    goto LABEL_25;
  }
LABEL_39:
  _Block_object_dispose(v42, 8);
  sub_216144C28((uint64_t)v43);
  _Block_object_dispose(&v45, 8);
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  _Block_object_dispose(&v53, 8);
  sub_21612A250((uint64_t)&v58, v59[0]);
}

void sub_2163309C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a21, 8);
  sub_216144C28(v32);
  _Block_object_dispose(&a31, 8);
  uint64_t v36 = *(void **)(v33 + 120);
  if (v36)
  {
    *(void *)(v33 + 128) = v36;
    operator delete(v36);
  }
  _Block_object_dispose((const void *)(v34 - 144), 8);
  sub_21612A250(v31, *(void **)(v33 + 192));
  _Unwind_Resume(a1);
}

void *sub_216330A20(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_216330A5C(uint64_t a1)
{
}

__n128 sub_216330A6C(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_216195244(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_216330A90(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t sub_216330AA8(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  a2[5] = 0;
  *(void *)(result + 4sub_216195244(&a9, 0) = v2;
  *(void *)(result + 48) = a2[6];
  a2[6] = 0;
  uint64_t v5 = a2[7];
  uint64_t v3 = a2 + 7;
  uint64_t v4 = v5;
  *(void *)(result + 56) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 56;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_216330B18(uint64_t a1)
{
  return sub_216144C28(a1 + 40);
}

void sub_216330B20(void *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v42 = a3;
  uint64_t v6 = a1[9];
  uint64_t v7 = *a2;
  if (*a2 && *(void *)(v7 + 8) <= 1uLL && (*(unsigned char *)(v7 + 40) & 0x10) == 0) {
    return;
  }
  if (sub_21626157C(*(void *)(v6 + 48), a3, 1))
  {
    if (v7 && (sub_216305364(v7, v6 + 120) || (*(unsigned int (**)(void))(a1[4] + 16))()))
    {
      unint64_t v8 = *(void **)(a1[6] + 8);
      uint64_t v10 = (uint64_t **)v8[6];
      unint64_t v9 = v8[7];
      if ((unint64_t)v10 < v9)
      {
LABEL_9:
        *uint64_t v10 = a2;
        size_t v11 = v10 + 1;
LABEL_47:
        v8[6] = v11;
        sub_216332848((uint64_t *)(*(void *)(a1[7] + 8) + 40), v42, v42);
        return;
      }
      uint64_t v22 = v8[5];
      uint64_t v23 = ((uint64_t)v10 - v22) >> 3;
      if (!((unint64_t)(v23 + 1) >> 61))
      {
        uint64_t v24 = v9 - v22;
        uint64_t v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
          uint64_t v25 = v23 + 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          unint64_t v26 = (unint64_t)sub_216188754(v26);
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v28 = (uint64_t **)(v26 + 8 * v23);
        unint64_t v29 = v26 + 8 * v27;
        *uint64_t v28 = a2;
        size_t v11 = v28 + 1;
        uint64_t v31 = (char *)v8[5];
        uint64_t v30 = (char *)v8[6];
        if (v30 == v31) {
          goto LABEL_45;
        }
        do
        {
          uint64_t v32 = (uint64_t *)*((void *)v30 - 1);
          v30 -= 8;
          *--uint64_t v28 = v32;
        }
        while (v30 != v31);
LABEL_44:
        uint64_t v30 = (char *)v8[5];
LABEL_45:
        v8[5] = v28;
        v8[6] = v11;
        v8[7] = v29;
        if (v30) {
          operator delete(v30);
        }
        goto LABEL_47;
      }
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v13 = *(void **)(v6 + 144);
    uint64_t v12 = *(void **)(v6 + 152);
    if (v13 != v12)
    {
      while (*v13 != a3)
      {
        if (++v13 == v12)
        {
          uint64_t v13 = *(void **)(v6 + 152);
          break;
        }
      }
    }
    char v14 = sub_21619C5BC((void *)(*(void *)(a1[8] + 8) + 40), &v42);
    if (v14)
    {
      int v15 = *((unsigned char *)v14 + 24) != 0;
    }
    else
    {
      int v15 = (*(uint64_t (**)(void))(a1[5] + 16))();
      uint64_t v16 = *(void *)(a1[8] + 8) + 40;
      uint64_t v43 = &v42;
      *((unsigned char *)sub_21627B2C4(v16, &v42, (uint64_t)&unk_21636EABA, &v43) + 24) = v15;
    }
    if (v13 != v12 || v15)
    {
      unint64_t v17 = v42;
      uint64_t v18 = *(void *)(*(void *)(v6 + 8) + 56);
      if (v42 < 0x2E8BA2E8BA2E8BA3 * ((*(void *)(*(void *)(v6 + 8) + 64) - v18) >> 3) - 1)
      {
        if (v13 == v12)
        {
          uint64_t v19 = *(void *)(v6 + 64);
          if (0x21CFB2B78C13521DLL * ((*(void *)(v6 + 72) - v19) >> 3) <= v42)
          {
            sub_216332598((void **)(v6 + 64), v42 + 1);
            uint64_t v19 = *(void *)(v6 + 64);
          }
          if (!*(unsigned char *)(v19 + 424 * v17)) {
            return;
          }
          unint64_t v17 = v42;
          uint64_t v18 = *(void *)(*(void *)(v6 + 8) + 56);
        }
        if (!*(void *)(v18 + 88 * v17 + 40)) {
          return;
        }
        if (v7)
        {
          uint64_t v20 = *(void *)(v7 + 40);
          if ((v20 & 0x10) != 0)
          {
            if (!sub_216305364(v7, v6 + 120)) {
              return;
            }
          }
          else
          {
            if ((v20 & 2) != 0) {
              int v21 = v15;
            }
            else {
              int v21 = 1;
            }
            if (v21 != 1) {
              return;
            }
          }
        }
        unint64_t v8 = *(void **)(a1[6] + 8);
        uint64_t v10 = (uint64_t **)v8[6];
        unint64_t v33 = v8[7];
        if ((unint64_t)v10 < v33) {
          goto LABEL_9;
        }
        uint64_t v34 = v8[5];
        uint64_t v35 = ((uint64_t)v10 - v34) >> 3;
        if (!((unint64_t)(v35 + 1) >> 61))
        {
          uint64_t v36 = v33 - v34;
          uint64_t v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
            uint64_t v37 = v35 + 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38) {
            unint64_t v38 = (unint64_t)sub_216188754(v38);
          }
          else {
            uint64_t v39 = 0;
          }
          uint64_t v28 = (uint64_t **)(v38 + 8 * v35);
          unint64_t v29 = v38 + 8 * v39;
          *uint64_t v28 = a2;
          size_t v11 = v28 + 1;
          int v40 = (char *)v8[5];
          uint64_t v30 = (char *)v8[6];
          if (v30 == v40) {
            goto LABEL_45;
          }
          do
          {
            uint64_t v41 = (uint64_t *)*((void *)v30 - 1);
            v30 -= 8;
            *--uint64_t v28 = v41;
          }
          while (v30 != v40);
          goto LABEL_44;
        }
LABEL_63:
        sub_21610CB04();
      }
    }
  }
}

void sub_216330E94(void *a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x2000000000;
  char v40 = 0;
  v37[0] = 0;
  v37[1] = v37;
  void v37[2] = 0x2000000000;
  uint64_t v38 = 0;
  uint64_t v38 = sub_216322AAC(*(_DWORD *)(a1[5] + 4));
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = 0;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x2000000000;
  char v32 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  int v30 = 0;
  unsigned int v16 = *(_DWORD *)(a1[5] + 24) & 0x400000;
  int v17 = v16 | a6 & 1;
  BOOL v18 = v17 == 0;
  if (v16 | a6 & 0xF || !v17)
  {
    int v19 = a6 & 9 | (4 * ((a6 >> 1) & 1)) | ((a6 & 4) >> 1) | (v16 >> 18);
    if (v17) {
      int v20 = v19;
    }
    else {
      int v20 = v19 | 0x20;
    }
    int v30 = v20;
  }
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 0x40000000;
  v22[2] = sub_216331120;
  v22[3] = &unk_264267780;
  char v23 = a6 & 1;
  char v24 = (a6 & 4) >> 2;
  BOOL v25 = v18;
  char v26 = a4;
  v22[6] = &v27;
  v22[7] = &v33;
  v22[12] = a5;
  v22[13] = a2;
  v22[8] = v39;
  v22[9] = v37;
  v22[10] = v31;
  v22[11] = a1;
  v22[4] = a8;
  v22[5] = a7;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 64))(a2, a3, v22);
  uint64_t v21 = v34[3];
  if (v21) {
    sub_21633142C(a1, v21, a5, *((_DWORD *)v28 + 6));
  }
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(v31, 8);
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(v37, 8);
  _Block_object_dispose(v39, 8);
}

void sub_2163310D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_216331120(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(_DWORD **)a2;
  unsigned int v4 = *(unsigned __int16 *)(*(void *)a2 + 4);
  if (v4) {
    LOBYTE(v5) = 1;
  }
  else {
    int v5 = (*(unsigned char *)(result + 112) != 0) & (v4 >> 14);
  }
  int v6 = *(_DWORD *)(*(void *)(*(void *)(result + 48) + 8) + 24);
  if (!*(unsigned char *)(result + 113) || !*(unsigned char *)(result + 114)) {
    goto LABEL_24;
  }
  if (v6)
  {
    if ((v4 & 0x80) != 0) {
      goto LABEL_34;
    }
    if ((v6 & 2) != 0)
    {
      if ((v4 & 0x400) == 0) {
        goto LABEL_24;
      }
      goto LABEL_34;
    }
    if ((v6 & 8) != 0)
    {
      if ((~v4 & 0x300) != 0) {
        goto LABEL_24;
      }
      goto LABEL_34;
    }
    if ((v6 & 4) == 0) {
      goto LABEL_31;
    }
    if ((v4 & 0x200) != 0) {
      goto LABEL_34;
    }
LABEL_24:
    if (v5) {
      goto LABEL_35;
    }
    if (!*(unsigned char *)(result + 114)) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  if ((v6 & 2) != 0)
  {
    if ((v6 & 0x10) != 0)
    {
      if ((v4 & 0x2000) == 0) {
        goto LABEL_24;
      }
    }
    else if ((v4 & 0x40) == 0)
    {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
  if ((v6 & 8) != 0)
  {
    if ((~v4 & 0x210) != 0) {
      goto LABEL_31;
    }
LABEL_22:
    if ((v4 & 0x8000) != 0 && (v6 & 0x20) != 0) {
      goto LABEL_24;
    }
LABEL_34:
    LOBYTE(v6) = v6 & 0xF9 | 4;
    goto LABEL_35;
  }
  if ((v4 & 0x20) != 0 && (v6 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_31:
  if (v5) {
    goto LABEL_35;
  }
LABEL_26:
  if (!*(unsigned char *)(result + 112) && (v4 & 0x8000) != 0 && (v6 & 0xC) != 0)
  {
LABEL_35:
    if (!*(unsigned char *)(result + 115)) {
      return result;
    }
  }
LABEL_36:
  uint64_t v7 = *(void *)(*(void *)(result + 56) + 8);
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8
    || *v3
    || *(void *)(result + 96) == *(void *)(v8 + 16)
    || !*(unsigned char *)(*(void *)(*(void *)(result + 64) + 8) + 24))
  {
    if (v6)
    {
      if ((v4 & 0x80) == 0)
      {
        if ((v6 & 2) != 0)
        {
          if ((v4 & 0x400) == 0) {
            goto LABEL_60;
          }
        }
        else if ((v6 & 8) != 0)
        {
          if ((~v4 & 0x300) != 0) {
            goto LABEL_60;
          }
        }
        else if ((v4 & 0x200) == 0 || (v6 & 4) == 0)
        {
LABEL_60:
          if (*v3)
          {
            if (v8) {
              goto LABEL_62;
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(*(void *)(result + 64) + 8) + 24) = 1;
            if (v8) {
              goto LABEL_62;
            }
          }
          *(void *)(v7 + 24) = (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
LABEL_62:
          int v9 = (*(uint64_t (**)(void))(**(void **)(v2 + 104) + 16))(*(void *)(v2 + 104));
          if (v9 != 14 && v9 != 9)
          {
            char v11 = (*(uint64_t (**)(void))(**(void **)(v2 + 104) + 24))(*(void *)(v2 + 104));
            if ((v11 & 1) == 0) {
              sub_216323AB0();
            }
            sub_216323EA8();
          }
          sub_216323CB8();
        }
      }
    }
    else if ((v6 & 2) != 0)
    {
      if ((v6 & 0x10) != 0)
      {
        if ((v4 & 0x2000) == 0) {
          goto LABEL_60;
        }
      }
      else if ((v4 & 0x40) == 0)
      {
        goto LABEL_60;
      }
    }
    else
    {
      if ((v6 & 8) != 0)
      {
        if ((~v4 & 0x210) != 0) {
          goto LABEL_60;
        }
      }
      else if ((v4 & 0x20) == 0 || (v6 & 4) == 0)
      {
        goto LABEL_60;
      }
      if ((v4 & 0x8000) != 0 && (v6 & 0x20) != 0) {
        goto LABEL_60;
      }
    }
  }
  return result;
}

void sub_21633142C(void *a1, uint64_t a2, unint64_t a3, char a4)
{
  if (*(void *)(a2 + 40) != *(void *)(a2 + 48))
  {
    int v4 = *(_DWORD *)(a1[5] + 24);
    uint64_t v5 = 2;
    uint64_t v6 = 5;
    if ((a4 & 4) == 0) {
      uint64_t v6 = 10;
    }
    if ((a4 & 2) == 0) {
      uint64_t v5 = v6;
    }
    uint64_t v7 = 10;
    if ((v4 & 0x8000) == 0) {
      uint64_t v7 = 2;
    }
    if ((v4 & 0x4000) != 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = v5;
    }
    *(void *)(a1[7] + 32) = v8;
    sub_21632FE50(a1, a2, a3);
  }
}

void sub_216331484(void *a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, unsigned int a7, int a8, uint64_t a9)
{
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 0x40000000;
  v18[2] = sub_216331588;
  void v18[3] = &unk_26427D080;
  v18[4] = a1;
  v18[5] = a6;
  v18[6] = a3;
  v18[7] = a2;
  int v19 = a8;
  int v20 = v17;
  sub_216330E94(a1, a2, a3, a4, a5, a7, a9, (uint64_t)v18);
}

void sub_216331588(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  (*(void (**)(void, void))(**(void **)(a1 + 56) + 112))(*(void *)(a1 + 56), *(void *)(a1 + 48));
  sub_216212B20(*(_DWORD *)(*(void *)(v2 + 40) + 24), *(_DWORD *)(a1 + 68), 0);

  sub_2163237C0();
}

void sub_21633162C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void sub_216331768(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6, unsigned int a7, uint64_t a8)
{
  int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  _OWORD v17[2] = sub_216331860;
  v17[3] = &unk_26427D0A0;
  v17[4] = a1;
  void v17[5] = a4;
  v17[6] = a3;
  v17[7] = a2;
  int v18 = v16;
  sub_216330E94(a1, a2, a3, a5, a6, a7, a8, (uint64_t)v17);
}

void sub_216331860(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  (*(void (**)(void, void))(**(void **)(a1 + 56) + 112))(*(void *)(a1 + 56), *(void *)(a1 + 48));
  sub_216212B20(*(_DWORD *)(*(void *)(v2 + 40) + 24), *(_DWORD *)(a1 + 64), 0);

  sub_21632393C();
}

void sub_216331904()
{
}

uint64_t sub_21633199C(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = 24;
  if (a3) {
    uint64_t v3 = 16;
  }
  int v4 = *(uint64_t **)(*(void *)(*(void *)(a1 + 16) + v3) + 8);
  if (v4[10])
  {
    uint64_t v5 = *v4;
    if (!a2) {
      goto LABEL_11;
    }
    if (v5) {
      uint64_t v6 = *(void *)(v5 + 16);
    }
    else {
      uint64_t v6 = 0;
    }
    goto LABEL_10;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (a2) {
LABEL_10:
  }
    *a2 = v6;
LABEL_11:
  if (v5) {
    return v5 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2163319FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  v16[0] = 0;
  v16[1] = v16;
  _OWORD v16[2] = 0x2000000000;
  char v17 = 0;
  uint64_t v3 = *(uint64_t **)(*(void *)(*(void *)(a1 + 16) + 16) + 8);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  uint64_t v10 = sub_216331B34;
  char v11 = &unk_26427D0C8;
  uint64_t v12 = a3;
  uint64_t v13 = v16;
  char v14 = &v18;
  uint64_t v15 = a2;
  char v22 = 0;
  uint64_t v4 = v3[10];
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      v10(v9, *v3, &v22);
      if (v22) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v5 == 0;
      }
      --v5;
      ++v3;
    }
    while (!v6);
    uint64_t v7 = v19[3];
  }
  else
  {
    uint64_t v7 = 0;
  }
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(&v18, 8);
  return v7;
}

void sub_216331B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

void *sub_216331B34(void *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(result[5] + 8);
  if (*(unsigned char *)(v3 + 24))
  {
    BOOL v6 = result;
    uint64_t v7 = (void *)result[7];
    if (v7) {
      *uint64_t v7 = *(void *)(a2 + 16);
    }
    __n128 result = (void *)(*(uint64_t (**)(void))(result[4] + 16))();
    if (result)
    {
      *(void *)(*(void *)(v6[6] + 8) + 24) = a2 + 24;
      *a3 = 1;
    }
  }
  else
  {
    *(unsigned char *)(v3 + 24) = 1;
  }
  return result;
}

uint64_t sub_216331BC0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(*(void *)(*(void *)(result + 16) + 16) + 8);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  uint64_t v8 = sub_216331C78;
  int v9 = &unk_26427D0F0;
  uint64_t v10 = a2;
  char v11 = 0;
  uint64_t v3 = v2[10];
  if (v3)
  {
    uint64_t v4 = v3 - 1;
    do
    {
      uint64_t v5 = *v2++;
      __n128 result = ((uint64_t (*)(void *, uint64_t, char *))v8)(v7, v5, &v11);
      if (v11) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v4 == 0;
      }
      --v4;
    }
    while (!v6);
  }
  return result;
}

uint64_t sub_216331C78(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))(*(double *)(a2 + 16));
}

void sub_216331C94(uint64_t a1, uint64_t a2)
{
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v12[3] = 0;
  uint64_t v2 = *(uint64_t **)(*(void *)(*(void *)(a1 + 16) + 16) + 8);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  uint64_t v7 = sub_216331D90;
  uint64_t v8 = &unk_26427D118;
  int v9 = v12;
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  char v13 = 0;
  uint64_t v3 = v2[10];
  if (v3)
  {
    uint64_t v4 = v3 - 1;
    do
    {
      v7((uint64_t)v6, *v2, &v13);
      if (v13) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = v4 == 0;
      }
      --v4;
      ++v2;
    }
    while (!v5);
  }
  _Block_object_dispose(v12, 8);
}

void sub_216331D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_216331D90(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, const char *, double))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40), a2 + 24, "NBest: ", *(double *)(a2 + 16));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void *)(v6 + 24) + 1;
  *(void *)(v6 + 24) = v7;
  if (v7 == *(void *)(a1 + 48)) {
    *a3 = 1;
  }
  return result;
}

void sub_216331E18(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = sub_2162769A4();
  if (*v8 && (*((_WORD *)v8 + 4) & 0x4008) != 0)
  {
    int v9 = sub_2162769A4();
    sub_216277010((uint64_t)v9, 16392, a3, v10, v11, v12, v13, v14, v24);
    CFStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    v25[1] = Mutable;
    if (a2)
    {
      uint64_t v16 = (*(uint64_t (**)(void))(**(void **)a2 + 56))();
      CFStringRef v17 = CFStringCreateWithCharacters(0, *(const UniChar **)v16, *(void *)(v16 + 8));
      sub_21619A154(*(void *)(*(void *)(a1 + 40) + 40), v17);
    }
    sub_2161E2FFC(Mutable, v25);
    uint64_t v18 = v25[0];
    sub_216277010((uint64_t)v9, 16392, (uint64_t)", prob: %f surface: %s\n", v19, v20, v21, v22, v23, *(uint64_t *)&a4);
    if (v18) {
      MEMORY[0x2166CA7C0](v18, 0x1000C8077774924);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void sub_216332018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    MEMORY[0x2166CA7C0](v4, 0x1000C8077774924);
  }
  sub_2161B5B5C((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216332078(void *a1, unint64_t a2)
{
  uint64_t v2 = a1;
  if (a2)
  {
    uint64_t v39 = 0;
    char v40 = &v39;
    uint64_t v41 = 0x4002000000;
    unint64_t v42 = sub_216330A20;
    v45[0] = 0;
    v45[1] = 0;
    uint64_t v43 = sub_216330A5C;
    int v44 = v45;
    uint64_t v4 = (void *)a1[1];
    BOOL v5 = v4 + 7;
    uint64_t v6 = v4[8];
    unint64_t v32 = a2 + 1;
    if (a2 + 1 < 0x2E8BA2E8BA2E8BA3 * ((v6 - v4[7]) >> 3))
    {
      v35[0] = MEMORY[0x263EF8330];
      v35[1] = 0x40000000;
      uint64_t v36 = sub_216332460;
      uint64_t v37 = &unk_264267540;
      uint64_t v38 = &v39;
      do
      {
        uint64_t v7 = v6 - 24;
        uint64_t v8 = *(void *)(v6 - 16);
        if (v8 != v6 - 24)
        {
          do
          {
            uint64_t v9 = *(void *)(v8 + 16);
            unint64_t v10 = *(void *)(v9 + 16);
            if (v10 <= a2)
            {
              uint64_t v11 = *(uint64_t **)(v9 + 8);
              uint64_t v12 = *v5;
              v36((uint64_t)v35, v10);
              uint64_t v13 = *v11;
              *(void *)(v13 + 8) = v11[1];
              *(void *)v11[1] = v13;
              --*(void *)(v12 + 88 * v10 + 40);
              operator delete(v11);
            }
            uint64_t v8 = *(void *)(v8 + 8);
          }
          while (v8 != v7);
          uint64_t v6 = v4[8];
        }
        sub_2163324D8(v5, v6 - 88);
        uint64_t v6 = v4[8];
      }
      while (0x2E8BA2E8BA2E8BA3 * ((v6 - v4[7]) >> 3) > v32);
      sub_216332534((void *)(v6 - 64));
      uint64_t v14 = v4[11];
      uint64_t v15 = operator new(0x18uLL);
      uint64_t v2 = a1;
      v15[1] = v6 - 64;
      v15[2] = v14;
      uint64_t v16 = *(void *)(v6 - 64);
      void *v15 = v16;
      *(void *)(v16 + 8) = v15;
      *(void *)(v6 - 64) = v15;
      ++*(void *)(v6 - 48);
      CFStringRef v17 = (uint64_t *)v40[5];
      uint64_t v33 = v40 + 6;
      if (v17 != v40 + 6)
      {
        uint64_t v19 = (void **)(a1 + 8);
        uint64_t v18 = (unsigned char *)a1[8];
        do
        {
          unint64_t v20 = v17[4];
          if (0x21CFB2B78C13521DLL * ((uint64_t)(v2[9] - (void)v18) >> 3) <= v20)
          {
            sub_216332598(v19, v20 + 1);
            uint64_t v18 = *v19;
          }
          v18[424 * v20] = 0;
          uint64_t v21 = *(void *)(v2[1] + 56) + 88 * v20;
          uint64_t v22 = v21 + 24;
          uint64_t v23 = *(void *)(v21 + 32);
          if (v23 != v21 + 24)
          {
            do
            {
              if (0x21CFB2B78C13521DLL * ((uint64_t)(a1[9] - (void)v18) >> 3) <= v20)
              {
                sub_216332598(v19, v20 + 1);
                uint64_t v18 = *v19;
              }
              unsigned int v24 = *(_DWORD *)(**(void **)(v23 + 16) + 36);
              BOOL v25 = v24 > 0x10;
              int v26 = (1 << v24) & 0x10081;
              BOOL v27 = v25 || v26 == 0;
              if (!v27) {
                v18[424 * v20] = 1;
              }
              uint64_t v23 = *(void *)(v23 + 8);
            }
            while (v23 != v22);
          }
          uint64_t v28 = (uint64_t *)v17[1];
          if (v28)
          {
            do
            {
              uint64_t v29 = v28;
              uint64_t v28 = (uint64_t *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              uint64_t v29 = (uint64_t *)v17[2];
              BOOL v27 = *v29 == (void)v17;
              CFStringRef v17 = v29;
            }
            while (!v27);
          }
          CFStringRef v17 = v29;
          uint64_t v2 = a1;
        }
        while (v29 != v33);
      }
    }
    sub_216332598((void **)v2 + 8, a2);
    _Block_object_dispose(&v39, 8);
    sub_21612A250((uint64_t)&v44, v45[0]);
  }
  else
  {
    uint64_t v30 = a1[1];
    sub_216277448(v30);
    sub_2163324D8((void *)(v30 + 56), *(void *)(v30 + 56));
    sub_216323754((void *)v2[2]);
    uint64_t v31 = v2[7];
    v2[9] = v2[8];
    *(unsigned char *)(v31 + 16) = 1;
  }
  *(_DWORD *)((char *)v2 + 95) = 0;
  v2[11] = 0;
  v2[13] = 0;
  v2[14] = 0;
  v2[16] = v2[15];
  v2[19] = v2[18];
}

void sub_21633242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
}

uint64_t *sub_216332460(uint64_t a1, unint64_t a2)
{
  return sub_216332848((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2, a2);
}

char *sub_216332474(uint64_t a1)
{
  return sub_2163248F4(*(void *)(a1 + 16));
}

uint64_t sub_21633247C(uint64_t a1)
{
  return a1 + 88;
}

void sub_216332484(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2163324D8(v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_2163324D8(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = result[1]; i != a2; i -= 88)
  {
    sub_216332534((void *)(i - 24));
    uint64_t result = sub_216332534((void *)(i - 64));
  }
  v3[1] = a2;
  return result;
}

void *sub_216332534(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_216332598(void **a1, unint64_t a2)
{
  BOOL v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v6 = 0x21CFB2B78C13521DLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6) {
      a1[1] = &v5[424 * a2];
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    if (0x21CFB2B78C13521DLL * ((v8 - v4) >> 3) >= v7)
    {
      uint64_t v16 = &v4[424 * v7];
      do
      {
        char *v4 = 0;
        *((void *)v4 + 51) = 0;
        *((void *)v4 + 52) = 0x7FEFFFFFFFFFFFFFLL;
        memset_pattern16(v4 + 8, &unk_216397090, 0x190uLL);
        v4 += 424;
      }
      while (v4 != v16);
      a1[1] = v16;
    }
    else
    {
      if (a2 > 0x9A90E7D95BC609) {
        sub_21610CB04();
      }
      unint64_t v9 = 0x21CFB2B78C13521DLL * ((v8 - v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x4D4873ECADE304) {
        unint64_t v11 = 0x9A90E7D95BC609;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 > 0x9A90E7D95BC609) {
        sub_2160FFA74();
      }
      uint64_t v12 = (char *)operator new(424 * v11);
      uint64_t v13 = &v12[424 * v6];
      uint64_t v14 = &v12[424 * a2];
      uint64_t v15 = v13;
      do
      {
        char *v15 = 0;
        *((void *)v15 + 51) = 0;
        *((void *)v15 + 52) = 0x7FEFFFFFFFFFFFFFLL;
        memset_pattern16(v15 + 8, &unk_216397090, 0x190uLL);
        v15 += 424;
      }
      while (v15 != v14);
      if (v4 != v5)
      {
        do
        {
          v4 -= 424;
          v13 -= 424;
          memcpy(v13, v4, 0x1A8uLL);
        }
        while (v4 != v5);
        uint64_t v4 = v5;
      }
      *a1 = v13;
      a1[1] = v14;
      a1[2] = &v12[424 * v11];
      if (v4)
      {
        operator delete(v4);
      }
    }
  }
}

uint64_t sub_216332790(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = (uint64_t *)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 4sub_216195244(&a9, 0) = 0;
  sub_216332800((uint64_t)v4, v4, (void *)(a2 + 24));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = a1 + 64;
  *(void *)(a1 + 72) = a1 + 64;
  *(void *)(a1 + 8sub_216195244(&a9, 0) = 0;
  sub_216332800(a1 + 64, (uint64_t *)(a1 + 64), (void *)(a2 + 64));
  return a1;
}

uint64_t sub_216332800(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    uint64_t *v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t *sub_216332848(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    unint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *unint64_t v9 = 0;
    v9[1] = 0;
    void v9[2] = (uint64_t)v7;
    void *v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      uint64_t *v4 = v10;
      unint64_t v11 = *v6;
    }
    else
    {
      unint64_t v11 = v9;
    }
    uint64_t result = sub_21612A6F4((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t sub_216332900(uint64_t a1, __CFDictionary *a2, void *lpsrc, int a4)
{
  if (!lpsrc) {
    return 0;
  }
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6B9C18, (const struct __class_type_info *)&unk_26C6B9B98, 0);
  if (result)
  {
    uint64_t result = sub_2162E42F8(result);
    if (result)
    {
      if (a4)
      {
        unint64_t v8 = @"partialCandidateAccepted";
        unint64_t v9 = (const void *)*MEMORY[0x263EFFB40];
LABEL_10:
        CFDictionaryAddValue(a2, v8, v9);
        return 1;
      }
      uint64_t v10 = *(void *)(a1 + 32);
      if (!v10) {
        sub_21610B7AC();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10);
      if (result)
      {
        unint64_t v9 = (const void *)result;
        unint64_t v8 = @"acceptedPartialCandidateSyllableLengths";
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t sub_216332A00(uint64_t a1)
{
  return a1;
}

void sub_216332A2C(uint64_t a1)
{
  sub_21629D5C8((void *)(a1 + 8));

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216332A78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_216332B10()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v10 = *(void *)(v0 + 24);
  unint64_t v11 = *(_DWORD **)v0;
  if (v10 <= 1)
  {
    unint64_t v12 = v10 + 0x2000;
    uint64_t v13 = *(uint64_t (**)(_DWORD *, size_t, void))(v9 + 32);
    size_t v14 = 8 * v12 + 16;
    if (v13)
    {
      unint64_t v11 = (_DWORD *)v13(v11, v14, *(void *)(v9 + 40));
      *(void *)uint64_t v9 = v11;
      if (!v11) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      unint64_t v11 = malloc_type_realloc(v11, v14, 0x86994945uLL);
      *(void *)uint64_t v9 = v11;
      if (*(_DWORD *)(v9 + 80))
      {
        if (!v11) {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        *(_DWORD *)(v9 + 8sub_216195244(&a9, 0) = 1;
        if (!v11) {
          return 0xFFFFFFFFLL;
        }
      }
    }
    *(void *)(v9 + 8) = v11 + 4;
    if (!*(void *)(v9 + 32))
    {
      bzero(&v11[2 * *(void *)(v9 + 24) + 4], 8 * (v12 - *(void *)(v9 + 24)));
      unint64_t v11 = *(_DWORD **)v9;
    }
    *(void *)(v9 + 24) = v12;
  }
  *(void *)unint64_t v11 = 0x1074726965;
  v11[2] = 65793;
  *(void *)(*(void *)(v9 + 8) + 8) = 1;
  *(_DWORD *)(v9 + 16) = 1;
  *(_DWORD *)(v9 + 76) = 0;
  *(void *)(v9 + 48) = v6;
  *(void *)(v9 + 56) = v4;
  *(void *)(v9 + 64) = v2;
  v22[1] = 0;
  v22[2] = v8;
  v22[3] = 0;
  unint64_t v15 = sub_216332D54(v9, v22, (uint64_t)v23);
  *(_DWORD *)(v9 + 72) = 2;
  if ((int)sub_216332E20(v9, 1, v15, v23) < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = *(unsigned int *)(v9 + 16);
  CFStringRef v17 = *(_DWORD **)v9;
  *(_DWORD *)(*(void *)v9 + 12) = v16;
  if ((unint64_t)(*(void *)(v9 + 24) + ~v16) <= 0x101)
  {
    uint64_t v18 = (v16 + 259);
    uint64_t v19 = *(uint64_t (**)(void))(v9 + 32);
    if (v19)
    {
      unint64_t v20 = (char *)v19();
      *(void *)uint64_t v9 = v20;
    }
    else
    {
      unint64_t v20 = (char *)malloc_type_realloc(v17, 8 * v18 + 16, 0x86994945uLL);
      *(void *)uint64_t v9 = v20;
      if (!*(_DWORD *)(v9 + 80)) {
        *(_DWORD *)(v9 + 8sub_216195244(&a9, 0) = 1;
      }
    }
    if (v20)
    {
      *(void *)(v9 + 8) = v20 + 16;
      if (!*(void *)(v9 + 32)) {
        bzero(&v20[8 * *(void *)(v9 + 24) + 16], 8 * (v18 - *(void *)(v9 + 24)));
      }
      *(void *)(v9 + 24) = v18;
    }
    else
    {
      *(_DWORD *)(v9 + 76) = -1;
    }
  }
  return *(unsigned int *)(v9 + 76);
}

uint64_t sub_216332D54(uint64_t a1, void *a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 76) & 0x80000000) != 0) {
    return 0;
  }
  unint64_t v3 = a2[1];
  unint64_t v4 = a2[2];
  if (v3 >= v4) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = 0xFFFFLL;
  do
  {
    unint64_t v9 = *(void *)(v7 + 8 * v3);
    unint64_t v10 = a2[3];
    if (v9 >= v10)
    {
      if (v9 > v10) {
        uint64_t v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8 * v3) + v10) + 1;
      }
      else {
        uint64_t v11 = 0;
      }
      if ((__int16)v8 > (int)v11)
      {
        uint64_t result = 0;
        *(_DWORD *)(a1 + 76) = -1;
        return result;
      }
      if (v11 != (__int16)v8)
      {
        if (result) {
          *(void *)(a3 + 32 * result - 16) = v3;
        }
        uint64_t v12 = a3 + 32 * result;
        *(_WORD *)uint64_t v12 = v11;
        *(void *)(v12 + 8) = v3;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = v10 + 1;
        ++result;
        unint64_t v4 = a2[2];
      }
    }
    else
    {
      uint64_t v11 = v8;
    }
    ++v3;
    uint64_t v8 = v11;
  }
  while (v3 < v4);
  if (result) {
    *(void *)(a3 + 32 * result - 16) = v4;
  }
  return result;
}

uint64_t sub_216332E20(uint64_t a1, int a2, unint64_t a3, __int16 *a4)
{
  if ((*(_DWORD *)(a1 + 76) & 0x80000000) != 0) {
    return 0;
  }
  unint64_t v4 = a4;
  unint64_t v5 = a3;
  int v8 = 0;
  unint64_t v9 = a3 - 1;
  uint64_t v36 = &a4[16 * a3 - 16];
  uint64_t v10 = *a4;
  uint64_t v11 = *v36 - v10;
  if (*(_DWORD *)(a1 + 72) <= (v10 + 1)) {
    unsigned int v12 = v10 + 1;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 72);
  }
  unint64_t v13 = *(void *)(a1 + 24);
  size_t v14 = a4 + 16;
  while (1)
  {
    if (v11 + (unint64_t)v12 >= v13)
    {
      v13 += 0x2000;
      unint64_t v15 = *(uint64_t (**)(void *, size_t, void))(a1 + 32);
      uint64_t v16 = *(void **)a1;
      size_t v17 = 8 * v13 + 16;
      if (v15)
      {
        uint64_t v18 = (char *)v15(v16, v17, *(void *)(a1 + 40));
        *(void *)a1 = v18;
      }
      else
      {
        uint64_t v18 = (char *)malloc_type_realloc(v16, v17, 0x86994945uLL);
        *(void *)a1 = v18;
        if (!*(_DWORD *)(a1 + 80)) {
          *(_DWORD *)(a1 + 8sub_216195244(&a9, 0) = 1;
        }
      }
      if (!v18)
      {
        int v34 = -1;
LABEL_39:
        uint64_t v20 = 0;
        *(_DWORD *)(a1 + 76) = v34;
        return v20;
      }
      *(void *)(a1 + 8) = v18 + 16;
      if (!*(void *)(a1 + 32)) {
        bzero(&v18[8 * *(void *)(a1 + 24) + 16], 8 * (v13 - *(void *)(a1 + 24)));
      }
      *(void *)(a1 + 24) = v13;
    }
    uint64_t v19 = *(void *)(a1 + 8);
    if (!*(_DWORD *)(v19 + 8 * v12 + 4)) {
      break;
    }
LABEL_23:
    ++v12;
  }
  if (!v8) {
    *(_DWORD *)(a1 + 72) = v12 + 1;
  }
  uint64_t v20 = v12 - *v4;
  unint64_t v21 = v9;
  uint64_t v22 = v14;
  if (v5 >= 2)
  {
    while (1)
    {
      int v23 = *v22;
      v22 += 16;
      if (*(_DWORD *)(v19 + 8 * ((int)v20 + v23) + 4)) {
        break;
      }
      if (!--v21) {
        goto LABEL_24;
      }
    }
    int v8 = 1;
    goto LABEL_23;
  }
LABEL_24:
  if (v5)
  {
    uint64_t v24 = v4;
    unint64_t v25 = v5;
    do
    {
      int v26 = *v24;
      v24 += 16;
      *(_DWORD *)(v19 + 8 * ((int)v20 + v26) + 4) = a2;
      --v25;
    }
    while (v25);
  }
  unsigned int v27 = v20 + *v36;
  if (*(_DWORD *)(a1 + 16) < v27) {
    *(_DWORD *)(a1 + 16) = v27;
  }
  for (; v5; --v5)
  {
    int v28 = *v4;
    uint64_t v29 = malloc_type_malloc(0x2020uLL, 0x100004095D96C66uLL);
    if (!v29) {
      __assert_rtn("__insert_nodes", "trie_build.cpp", 112, "new_children");
    }
    uint64_t v30 = v29;
    uint64_t v31 = (v20 + v28);
    uint64_t v32 = sub_216332D54(a1, v4, (uint64_t)v29);
    if (v32)
    {
      int v33 = sub_216332E20(a1, v31, v32, v30);
      if (v33 <= 0)
      {
        free(v30);
        int v34 = -2;
        goto LABEL_39;
      }
    }
    else
    {
      int v33 = -*(_DWORD *)(*(void *)(a1 + 64) + 4 * *((void *)v4 + 1));
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 8 * v31) = v33;
    free(v30);
    v4 += 16;
  }
  return v20;
}

uint64_t sub_2163330B0(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 4sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = &unk_26C6C5220;
  *(void *)(a1 + 104) = 0;
  uint64_t v2 = a1 + 112;
  *(void *)(a1 + 112) = &unk_26C6C5220;
  *(void *)(a1 + 12sub_216195244(&a9, 0) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  unint64_t v3 = (_WORD *)(a1 + 136);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  sub_2161C26B4(a1 + 96, "UTF-8", "UTF-16LE");
  sub_2161C26B4(v2, "UTF-16LE", "UTF-8");
  if (*(char *)(a1 + 159) < 0)
  {
    *(void *)(a1 + 144) = 1;
    unint64_t v3 = *(_WORD **)(a1 + 136);
  }
  else
  {
    *(unsigned char *)(a1 + 159) = 1;
  }
  *unint64_t v3 = 9;
  return a1;
}

void sub_2163331B0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*v5);
  }
  sub_2161C2924(v3);
  sub_2161C2924(v2);
  uint64_t v7 = *(void **)(v1 + 64);
  if (v7)
  {
    *(void *)(v1 + 72) = v7;
    operator delete(v7);
  }
  int v8 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 48) = v8;
    operator delete(v8);
  }
  sub_2161E05C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216333204(uint64_t a1)
{
  sub_21633327C(a1);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  sub_2161C2924((void *)(a1 + 112));
  sub_2161C2924((void *)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(void *)(a1 + 48) = v3;
    operator delete(v3);
  }

  return sub_2161E05C4(a1);
}

uint64_t sub_21633327C(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(uint64_t **)(result + 40);
  unint64_t v3 = *(uint64_t **)(result + 48);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      if (*v2)
      {
        if (*(char *)(v4 + 71) < 0) {
          operator delete(*(void **)(v4 + 48));
        }
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        uint64_t result = MEMORY[0x2166CA800](v4, 0x1012C405A3E5557);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (uint64_t *)v1[5];
  }
  v1[6] = v2;
  unint64_t v5 = (uint64_t *)v1[8];
  uint64_t v6 = (uint64_t *)v1[9];
  if (v5 != v6)
  {
    do
    {
      uint64_t v7 = *v5;
      if (*v5)
      {
        if (*(char *)(v7 + 23) < 0) {
          operator delete(*(void **)v7);
        }
        uint64_t result = MEMORY[0x2166CA800](v7, 0x1012C40A71235E1);
      }
      ++v5;
    }
    while (v5 != v6);
    unint64_t v5 = (uint64_t *)v1[8];
  }
  v1[9] = v5;
  return result;
}

uint64_t sub_216333354(uint64_t a1, CFTypeRef cf, const __CFString *a3)
{
  *(_WORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6C0B48;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_26C6C0C28;
  if (cf) {
    CFTypeRef v5 = CFRetain(cf);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(a1 + 32) = v5;
  if (a3) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a3);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 4sub_216195244(&a9, 0) = Copy;
  return a1;
}

void *sub_2163333F8(void *a1)
{
  *a1 = &unk_26C6C0B48;
  a1[3] = &unk_26C6C0C28;
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void sub_216333478(void *a1)
{
  sub_2163333F8(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2163334B0(uint64_t a1, CFStringRef theString)
{
  CFStringRef v3 = *(const __CFString **)(a1 + 40);
  if (v3 != theString)
  {
    if (v3) {
      CFRelease(v3);
    }
    if (theString) {
      CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theString);
    }
    else {
      CFStringRef Copy = 0;
    }
    *(void *)(a1 + 4sub_216195244(&a9, 0) = Copy;
  }
  return 1;
}

void sub_216333510()
{
}

void sub_2163335C4(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

void sub_2163335E8()
{
}

uint64_t sub_216333604()
{
  return 0;
}

uint64_t sub_21633360C()
{
  return 0;
}

uint64_t sub_216333614(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_21633361C()
{
  return 0;
}

uint64_t sub_216333624()
{
  return 0;
}

uint64_t sub_216333630()
{
  return 6;
}

uint64_t sub_216333638()
{
  return 0;
}

uint64_t sub_216333640()
{
  return 0;
}

uint64_t sub_216333648()
{
  return 0;
}

uint64_t sub_216333650()
{
  return 0;
}

uint64_t sub_216333658()
{
  return 0;
}

uint64_t sub_216333660()
{
  return 0;
}

uint64_t sub_216333668(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_216333670()
{
  return 0;
}

uint64_t sub_216333678()
{
  return 0;
}

uint64_t sub_216333680()
{
  return 0;
}

void *MecabraSyllablesCreateWithString(int a1, CFStringRef theString)
{
  if (!theString || CFStringGetLength(theString) > 299) {
    return 0;
  }
  switch(a1)
  {
    case 2:
      int v5 = 0;
      goto LABEL_10;
    case 5:
      int v5 = 2;
      goto LABEL_10;
    case 4:
      int v5 = 1;
LABEL_10:
      uint64_t v4 = malloc_type_malloc(0x4D8uLL, 0x10200404C7DE042uLL);
      sub_21620469C((uint64_t)v4);
      sub_216204798(theString, (uint64_t)v4, v5);
      return v4;
  }
  return 0;
}

uint64_t MecabraSyllablesGetSyllableCount(uint64_t result)
{
  if (result) {
    return *(int *)(result + 32);
  }
  return result;
}

const void *MecabraSyllablesGetSyllableAtIndex(uint64_t a1, CFIndex a2)
{
  if (!a1 || a2 < 0 || *(int *)(a1 + 32) <= a2) {
    return 0;
  }
  else {
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), a2);
  }
}

uint64_t MecabraSyllablesGetSyllableTypeAtIndex(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = 0;
    if ((a2 & 0x8000000000000000) == 0 && *(int *)(v2 + 32) > a2)
    {
      __int16 v3 = *(_WORD *)(v2 + 2 * a2 + 36);
      if ((v3 & 0x20) != 0)
      {
        return 3;
      }
      else if ((v3 & 2) != 0)
      {
        return 1;
      }
      else if ((v3 & 4) != 0)
      {
        return 2;
      }
      else
      {
        return 3;
      }
    }
  }
  return result;
}

void MecabraSyllablesRelease(void *a1)
{
  if (a1)
  {
    sub_216204730((uint64_t)a1);
    free(a1);
  }
}

void sub_2163337EC(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)a1 == v6)
  {
    sub_216333A18((char **)a1, a2, a3, 0.0, 0.0);
    unint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = *(char **)(a1 + 32);
    if ((unint64_t)v16 >= v15)
    {
      int v23 = *(char **)(a1 + 24);
      uint64_t v24 = (v16 - v23) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        sub_21610CB04();
      }
      unint64_t v25 = v15 - (void)v23;
      unint64_t v26 = (uint64_t)(v15 - (void)v23) >> 2;
      if (v26 <= v24 + 1) {
        unint64_t v26 = v24 + 1;
      }
      if (v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27)
      {
        int v28 = (char *)sub_2160FFAA8(a1 + 40, v27);
        int v23 = *(char **)(a1 + 24);
        uint64_t v16 = *(char **)(a1 + 32);
      }
      else
      {
        int v28 = 0;
      }
      uint64_t v32 = &v28[8 * v24];
      int v33 = &v28[8 * v27];
      *(void *)uint64_t v32 = 0;
      size_t v17 = v32 + 8;
      while (v16 != v23)
      {
        uint64_t v34 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v32 - 1) = v34;
        v32 -= 8;
      }
      *(void *)(a1 + 24) = v32;
      *(void *)(a1 + 32) = v17;
      *(void *)(a1 + 4sub_216195244(&a9, 0) = v33;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *(void *)uint64_t v16 = 0;
      size_t v17 = v16 + 8;
    }
    *(void *)(a1 + 32) = v17;
  }
  else
  {
    double v7 = *(double *)(v6 - 16);
    double v8 = *(double *)(a2 + 48) - *(double *)(v6 - 24);
    long double v9 = hypot(*(double *)(a2 + 32) - *(double *)(v6 - 40), *(double *)(a2 + 40) - *(double *)(v6 - 32));
    sub_216333A18((char **)a1, a2, a3, v8, v7 + v9);
    uint64_t v10 = *(char **)(a1 + 24);
    uint64_t v11 = *(void *)&v10[0x6666666666666668 * ((*(void *)(a1 + 8) - *(void *)a1) >> 3) - 16]
        + *(unsigned __int8 *)(a2 + 68);
    unsigned int v12 = *(char **)(a1 + 32);
    unint64_t v13 = *(void *)(a1 + 40);
    if ((unint64_t)v12 >= v13)
    {
      uint64_t v18 = (v12 - v10) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        sub_21610CB04();
      }
      unint64_t v19 = v13 - (void)v10;
      unint64_t v20 = (uint64_t)(v13 - (void)v10) >> 2;
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      if (v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21)
      {
        uint64_t v22 = (char *)sub_2160FFAA8(a1 + 40, v21);
        uint64_t v10 = *(char **)(a1 + 24);
        unsigned int v12 = *(char **)(a1 + 32);
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v29 = &v22[8 * v18];
      uint64_t v30 = &v22[8 * v21];
      *(void *)uint64_t v29 = v11;
      size_t v14 = v29 + 8;
      while (v12 != v10)
      {
        uint64_t v31 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(void *)(a1 + 24) = v29;
      *(void *)(a1 + 32) = v14;
      *(void *)(a1 + 4sub_216195244(&a9, 0) = v30;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(void *)unsigned int v12 = v11;
      size_t v14 = v12 + 8;
    }
    *(void *)(a1 + 32) = v14;
  }
}

void sub_216333A18(char **a1, uint64_t a2, __int16 a3, double a4, double a5)
{
  uint64_t v11 = a1[1];
  unint64_t v10 = (unint64_t)a1[2];
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v13 = *a1;
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - *a1) >> 3);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0x666666666666666) {
      sub_21610CB04();
    }
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v13) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x333333333333333) {
      unint64_t v17 = 0x666666666666666;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17 > 0x666666666666666) {
      sub_2160FFA74();
    }
    uint64_t v18 = 5 * v17;
    unint64_t v19 = (char *)operator new(40 * v17);
    unint64_t v20 = &v19[40 * v14];
    *(_OWORD *)unint64_t v20 = *(_OWORD *)(a2 + 32);
    *((double *)v20 + 2) = a4;
    *((double *)v20 + 3) = a5;
    v20[32] = *(unsigned char *)(a2 + 68);
    *((_WORD *)v20 + 17) = a3;
    *((_DWORD *)v20 + 9) = *(_DWORD *)(a2 + 64);
    unsigned int v12 = v20 + 40;
    if (v11 != v13)
    {
      do
      {
        long long v21 = *(_OWORD *)(v11 - 40);
        long long v22 = *(_OWORD *)(v11 - 24);
        *((void *)v20 - 1) = *((void *)v11 - 1);
        *(_OWORD *)(v20 - 24) = v22;
        *(_OWORD *)(v20 - 4sub_216195244(&a9, 0) = v21;
        v20 -= 40;
        v11 -= 40;
      }
      while (v11 != v13);
      uint64_t v11 = v13;
    }
    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v19[8 * v18];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)(a2 + 32);
    *((double *)v11 + 2) = a4;
    *((double *)v11 + 3) = a5;
    v11[32] = *(unsigned char *)(a2 + 68);
    *((_WORD *)v11 + 17) = a3;
    *((_DWORD *)v11 + 9) = *(_DWORD *)(a2 + 64);
    unsigned int v12 = v11 + 40;
  }
  a1[1] = v12;
}

BOOL sub_216333B8C(uint64_t a1, CFStringRef theString)
{
  if (!theString || !CFStringGetLength(theString) || !sub_2161E2498(theString)) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 4) & 6) == 0)
  {
    CFIndex Length = CFStringGetLength(theString);
    CFIndex v11 = Length - 1;
    if (Length < 1)
    {
      return 1;
    }
    else
    {
      CFIndex v12 = 0;
      do
      {
        UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v12);
        BOOL v14 = sub_216333CBC(CharacterAtIndex);
        BOOL v7 = v14;
        if (!v14) {
          break;
        }
      }
      while (v11 != v12++);
    }
    return v7;
  }
  uint64_t v4 = (int *)MecabraSyllablesCreateWithString(*(_DWORD *)a1, theString);
  if (!v4) {
    return 0;
  }
  int v5 = v4;
  uint64_t v6 = v4[8];
  if ((int)v6 < 1)
  {
    BOOL v7 = 1;
  }
  else
  {
    BOOL v7 = 0;
    for (i = 0; i != v6; BOOL v7 = i >= v6)
    {
      if ((i >= v6 || (*((_WORD *)v4 + i + 18) & 0x22) != 2) && (i < v6 - 1 || (*(unsigned char *)(a1 + 4) & 4) == 0)) {
        break;
      }
      ++i;
    }
  }
  sub_216204730((uint64_t)v4);
  free(v5);
  return v7;
}

BOOL sub_216333CBC(UniChar theChar)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_26797E748, memory_order_acquire) != -1)
  {
    int v5 = &v3;
    uint64_t v4 = &v5;
    std::__call_once(&qword_26797E748, &v4, (void (__cdecl *)(void *))sub_216333D40);
  }
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)qword_26797E740, theChar) != 0;
}

void sub_216333D40()
{
  qword_26797E740 = (uint64_t)CFCharacterSetCreateMutable(0);
  v3.location = 97;
  v3.CFIndex length = 26;
  CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_26797E740, v3);
  v4.location = 65;
  v4.CFIndex length = 26;
  CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_26797E740, v4);
  uint64_t v0 = (__CFCharacterSet *)qword_26797E740;
  v1.location = 39;
  v1.CFIndex length = 1;

  CFCharacterSetAddCharactersInRange(v0, v1);
}

uint64_t sub_216333DA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E750, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E750))
  {
    operator new();
  }
  if ((unint64_t)(*(uint64_t (**)(void *))(*a1 + 24))(a1) < 5) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 24))(a1) - 4;
  }
  sub_2162E07FC((uint64_t)a1, a2);
  unint64_t v6 = 0;
  unint64_t v7 = (unint64_t)&unk_26797E000;
  while ((*(uint64_t (**)(void *))(*a1 + 24))(a1) > v6)
  {
    uint64_t v38 = &unk_26C6B5328;
    unint64_t v39 = v6;
    uint64_t v40 = a2;
    uint64_t v41 = &v38;
    sub_21633779C((unint64_t)&qword_26797E7C0, (uint64_t)a1, (uint64_t)&v38, 0, v6);
    sub_2163393C4(&v38);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E770, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26797E770))
    {
      qword_26797E768 = (uint64_t)L"'aeinouyxa";
      __cxa_guard_release(&qword_26797E770);
    }
    if ((*(uint64_t (**)(void *))(*a1 + 24))(a1) - 1 > v6
      && (*(uint64_t (**)(void *, unint64_t))(*a1 + 16))(a1, v6 + 1))
    {
      uint64_t v8 = 0;
      while (1)
      {
        long double v9 = (unsigned __int16 *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*a1 + 48))(a1, v6 + 1, v8);
        uint64_t v10 = 0;
        uint64_t v11 = qword_26797E768 + 16;
        while (*(unsigned __int16 *)(qword_26797E768 + v10) != *v9)
        {
          v10 += 2;
          if (v10 == 16) {
            goto LABEL_16;
          }
        }
        uint64_t v11 = qword_26797E768 + v10;
LABEL_16:
        if (v11 - qword_26797E768 == 16) {
          break;
        }
        if (++v8 >= (unint64_t)(*(uint64_t (**)(void *, unint64_t))(*a1 + 16))(a1, v6 + 1)) {
          goto LABEL_18;
        }
      }
      uint64_t v12 = a1[1] + 24 * v6;
      unint64_t v13 = *(double **)v12;
      BOOL v14 = *(unsigned __int16 ***)(v12 + 8);
      while (v13 != (double *)v14)
      {
        int v15 = *((char *)v13 + 23);
        if (v15 < 0)
        {
          if (*((void *)v13 + 1) == 1)
          {
            int v16 = **(unsigned __int16 **)v13;
            goto LABEL_28;
          }
        }
        else if (v15 == 1)
        {
          int v16 = *(unsigned __int16 *)v13;
LABEL_28:
          if (v16 == 110)
          {
            unint64_t v2 = v2 & 0xFFFFFFFF00000000 | 0xFFFFFF;
            sub_2161C4D0C(a2, v6, &unk_21639713A, 1uLL, *((void *)v13 + 4), 110, v2, -1, v13[3], 255);
          }
        }
        v13 += 6;
        continue;
      }
    }
LABEL_18:
    if (v5 <= v6)
    {
      uint64_t v38 = &unk_26C6B5380;
      unint64_t v39 = v6;
      uint64_t v40 = a2;
      uint64_t v41 = &v38;
      sub_21621D058((unint64_t)&qword_26797E7C0, (uint64_t)a1, v6, (uint64_t)&v38);
      sub_21621DC6C(&v38);
    }
    ++v6;
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v18 = result - 2;
  if (result - 2 >= 0)
  {
LABEL_34:
    unint64_t v19 = (unsigned __int16 **)(a1[1] + 24 * v18);
    long long v21 = *v19;
    unint64_t v20 = v19[1];
    if (*v19 == v20) {
      goto LABEL_71;
    }
    long long v22 = v19 + 3;
    while (1)
    {
      int v23 = *((unsigned __int8 *)v21 + 23);
      if (*((char *)v21 + 23) < 0)
      {
        if (*((void *)v21 + 1) != 1) {
          goto LABEL_70;
        }
        uint64_t v24 = *(unsigned __int16 **)v21;
      }
      else
      {
        uint64_t v24 = v21;
        if (v23 != 1) {
          goto LABEL_70;
        }
      }
      uint64_t v25 = 0;
      int v26 = *v24;
      while ((unsigned __int16)aBcdfghjklmpqrs_1[v25] != v26)
      {
        if (++v25 == 20)
        {
          unint64_t v27 = L"'aeinouyxa";
          goto LABEL_46;
        }
      }
      unint64_t v27 = &aBcdfghjklmpqrs_1[v25];
LABEL_46:
      if ((char *)v27 - (char *)L"bcdfghjklmpqrstvwxyz'aeinouyxa" == 40) {
        goto LABEL_70;
      }
      int v28 = *v22;
      uint64_t v29 = v22[1];
      if (*v22 == v29) {
        goto LABEL_70;
      }
      uint64_t v30 = (v23 & 0x80u) == 0 ? *((unsigned __int8 *)v21 + 23) : *((void *)v21 + 1);
      while (1)
      {
        uint64_t v31 = *((unsigned __int8 *)v28 + 23);
        int v32 = (char)v31;
        if ((v31 & 0x80u) != 0) {
          uint64_t v31 = *((void *)v28 + 1);
        }
        if (v31 == v30) {
          break;
        }
LABEL_65:
        v28 += 24;
        if (v28 == v29) {
          goto LABEL_70;
        }
      }
      if (v30) {
        break;
      }
LABEL_67:
      uint64_t v36 = (__int16 *)v21;
      if ((v23 & 0x80) != 0) {
        uint64_t v36 = *(__int16 **)v21;
      }
      unint64_t v7 = v7 & 0xFFFFFFFF00000000 | 0xFFFFFF;
      uint64_t result = sub_2161C4D0C(a2, v18, &unk_216397136, 1uLL, *((void *)v21 + 4), *v36, v7, -1, *((double *)v21 + 3), 255);
LABEL_70:
      v21 += 24;
      if (v21 == v20)
      {
LABEL_71:
        if (v18-- <= 0) {
          return result;
        }
        goto LABEL_34;
      }
    }
    if (v32 >= 0) {
      int v33 = v28;
    }
    else {
      int v33 = *(unsigned __int16 **)v28;
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v34 = v21;
    }
    else {
      uint64_t v34 = *(unsigned __int16 **)v21;
    }
    uint64_t v35 = v30;
    while (*v34 == *v33)
    {
      ++v33;
      ++v34;
      if (!--v35) {
        goto LABEL_67;
      }
    }
    goto LABEL_65;
  }
  return result;
}

void sub_216334390(_Unwind_Exception *a1)
{
}

void *sub_216334408(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C6BF968;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  return a1;
}

uint64_t sub_216334474@<X0>(unint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_26C6BE8C8;
  *(void *)(a3 + 8) = 0;
  CFRange v3 = (void *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  if (a1)
  {
    sub_2162E0CB0(a3 + 8, a1);
    uint64_t v7 = 0;
    do
      sub_2161C4D0C(a3, v7++, __src, 1uLL, 1, 0, 0xFFFFFF, -1, 0.0, 255);
    while (a1 != v7);
    uint64_t result = sub_2162E1C9C(v3, *(void *)(a3 + 16), *(long long ***)(a2 + 8), *(long long ***)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
    *(unsigned char *)(a3 + 32) = 1;
  }
  return result;
}

void sub_216334570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *uint64_t v2 = v3;
  sub_2161C4FA0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_216334594(int a1, int a2, int a3, char a4)
{
  if ((a4 & 0x20) != 0) {
    return (uint64_t **)sub_2163345A4(a1, a2, a3, a4);
  }
  else {
    return sub_216334794(a1, a4);
  }
}

void *sub_2163345A4(int a1, int a2, int a3, char a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E758, memory_order_acquire) & 1) == 0)
  {
    int v7 = a1;
    int v8 = a2;
    int v9 = a3;
    char v10 = a4;
    int v11 = __cxa_guard_acquire(&qword_26797E758);
    a4 = v10;
    a3 = v9;
    a2 = v8;
    int v12 = v11;
    a1 = v7;
    if (v12)
    {
      int v20 = 6553706;
      sub_216335FA8(qword_26797E7D0, &v20, 2);
      __cxa_atexit((void (*)(void *))sub_216210850, qword_26797E7D0, &dword_2160F5000);
      __cxa_guard_release(&qword_26797E758);
      a1 = v7;
      a2 = v8;
      a3 = v9;
      a4 = v10;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E760, memory_order_acquire) & 1) == 0)
  {
    int v13 = a1;
    int v14 = a2;
    int v15 = a3;
    char v16 = a4;
    int v17 = __cxa_guard_acquire(&qword_26797E760);
    a4 = v16;
    a3 = v15;
    a2 = v14;
    int v18 = v17;
    a1 = v13;
    if (v18)
    {
      int v19 = 6553722;
      sub_216335FA8(qword_26797E7E8, &v19, 2);
      __cxa_atexit((void (*)(void *))sub_216210850, qword_26797E7E8, &dword_2160F5000);
      __cxa_guard_release(&qword_26797E760);
      a1 = v13;
      a2 = v14;
      a3 = v15;
      a4 = v16;
    }
  }
  if ((a4 & 0x10) == 0) {
    return 0;
  }
  if (a1 == 106 && a2 != 106 && a3 == 105) {
    return qword_26797E7D0;
  }
  if (a3 == 117 && a2 != 122 && a1 == 122) {
    return qword_26797E7E8;
  }
  else {
    return 0;
  }
}

void sub_21633476C(_Unwind_Exception *a1)
{
}

uint64_t **sub_216334794(int a1, int a2)
{
  v150[3] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  char v2 = a2;
  if ((a2 & 0x1E) == 0) {
    return 0;
  }
  unsigned __int16 v3 = a1;
  int v4 = a2 & 0xC;
  if (a1 != 12358)
  {
    if (a1 == 12388)
    {
      if ((a2 & 0xA) != 0 && (a2 & 0xC) != 0)
      {
        unint64_t v5 = &qword_26797E778;
        unint64_t v6 = qword_26797E800;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E778, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797E778))
        {
          qmemcpy(v89, "d0e0c0", 6);
          sub_216335FA8(qword_26797E800, v89, 3);
          unint64_t v6 = qword_26797E800;
LABEL_30:
          __cxa_atexit((void (*)(void *))sub_216210850, v6, &dword_2160F5000);
          __cxa_guard_release(v5);
          return (uint64_t **)v6;
        }
        return (uint64_t **)v6;
      }
      if ((a2 & 0xA) != 0)
      {
        unint64_t v5 = &qword_26797E780;
        unint64_t v6 = qword_26797E818;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E780, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26797E780))
        {
          v89[0] = 811937892;
          sub_216335FA8(qword_26797E818, v89, 2);
          unint64_t v6 = qword_26797E818;
          goto LABEL_30;
        }
        return (uint64_t **)v6;
      }
      if ((a2 & 0xC) != 0)
      {
        sub_216335E50();
        return (uint64_t **)qword_26797E830;
      }
      return 0;
    }
    if ((a2 & 0xA) != 0)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E7A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797E7A8))
      {
        qmemcpy(v74, "o0p0q0", sizeof(v74));
        sub_216335FA8(&v87, v74, 3);
        LOWORD(v89[0]) = 12399;
        uint64_t v90 = 0;
        uint64_t v92 = 0;
        uint64_t v91 = 0;
        sub_2163387B8(&v90, v87, v88[0], (v88[0] - (uint64_t)v87) >> 1);
        qmemcpy(v73, "r0s0t0", sizeof(v73));
        sub_216335FA8(&v85, v73, 3);
        __int16 v93 = 12402;
        uint64_t v94 = 0;
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        sub_2163387B8(&v94, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 1);
        qmemcpy(v72, "u0v0w0", sizeof(v72));
        sub_216335FA8(&v83, v72, 3);
        __int16 v97 = 12405;
        uint64_t v99 = 0;
        uint64_t v100 = 0;
        uint64_t v98 = 0;
        sub_2163387B8(&v98, v83, (uint64_t)v84, (v84 - (unsigned char *)v83) >> 1);
        qmemcpy(v71, "x0y0z0", sizeof(v71));
        sub_216335FA8(&v81, v71, 3);
        __int16 v101 = 12408;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        uint64_t v102 = 0;
        sub_2163387B8(&v102, v81, (uint64_t)v82, (v82 - (unsigned char *)v81) >> 1);
        qmemcpy(v70, "{0|0}0", sizeof(v70));
        sub_216335FA8(&v79, v70, 3);
        __int16 v105 = 12411;
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        uint64_t v106 = 0;
        sub_2163387B8(&v106, v79, (uint64_t)v80, (v80 - (unsigned char *)v79) >> 1);
        int v69 = 810299467;
        sub_216335FA8(&v77, &v69, 2);
        __int16 v109 = 12363;
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        uint64_t v110 = 0;
        sub_2163387B8(&v110, v77, (uint64_t)v78, (v78 - (unsigned char *)v77) >> 1);
        int v68 = 810430541;
        sub_216335FA8(&v75, &v68, 2);
        __int16 v113 = 12365;
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        uint64_t v114 = 0;
        sub_2163387B8(&v114, v75, (uint64_t)v76, (v76 - (unsigned char *)v75) >> 1);
        int v65 = 810561615;
        sub_216335FA8(&v66, &v65, 2);
        __int16 v117 = 12367;
        memset(v118, 0, sizeof(v118));
        sub_2163387B8(v118, v66, (uint64_t)v67, (v67 - (unsigned char *)v66) >> 1);
        int v62 = 810692689;
        sub_216335FA8(&v63, &v62, 2);
        __int16 v119 = 12369;
        memset(v120, 0, sizeof(v120));
        sub_2163387B8(v120, v63, (uint64_t)v64, (v64 - (unsigned char *)v63) >> 1);
        int v59 = 810823763;
        sub_216335FA8(&v60, &v59, 2);
        __int16 v121 = 12371;
        memset(v122, 0, sizeof(v122));
        sub_2163387B8(v122, v60, (uint64_t)v61, (v61 - (unsigned char *)v60) >> 1);
        int v56 = 810954837;
        sub_216335FA8(&v57, &v56, 2);
        __int16 v123 = 12373;
        memset(v124, 0, sizeof(v124));
        sub_2163387B8(v124, v57, (uint64_t)v58, (v58 - (unsigned char *)v57) >> 1);
        int v53 = 811085911;
        sub_216335FA8(&v54, &v53, 2);
        __int16 v125 = 12375;
        memset(v126, 0, sizeof(v126));
        sub_2163387B8(v126, v54, (uint64_t)v55, (v55 - (unsigned char *)v54) >> 1);
        int v50 = 811216985;
        sub_216335FA8(&v51, &v50, 2);
        __int16 v127 = 12377;
        memset(v128, 0, sizeof(v128));
        sub_2163387B8(v128, v51, (uint64_t)v52, (v52 - (unsigned char *)v51) >> 1);
        int v47 = 811348059;
        sub_216335FA8(&v48, &v47, 2);
        __int16 v129 = 12379;
        memset(v130, 0, sizeof(v130));
        sub_2163387B8(v130, v48, (uint64_t)v49, (v49 - (unsigned char *)v48) >> 1);
        int v44 = 811479133;
        sub_216335FA8(&v45, &v44, 2);
        __int16 v131 = 12381;
        memset(v132, 0, sizeof(v132));
        sub_2163387B8(v132, v45, (uint64_t)v46, (v46 - (unsigned char *)v45) >> 1);
        int v41 = 811610207;
        sub_216335FA8(&v42, &v41, 2);
        __int16 v133 = 12383;
        memset(v134, 0, sizeof(v134));
        sub_2163387B8(v134, v42, (uint64_t)v43, (v43 - (unsigned char *)v42) >> 1);
        int v38 = 811741281;
        sub_216335FA8(&v39, &v38, 2);
        __int16 v135 = 12385;
        memset(v136, 0, sizeof(v136));
        sub_2163387B8(v136, v39, (uint64_t)v40, (v40 - (unsigned char *)v39) >> 1);
        int v35 = 812068966;
        sub_216335FA8(&v36, &v35, 2);
        __int16 v137 = 12390;
        memset(v138, 0, sizeof(v138));
        sub_2163387B8(v138, v36, (uint64_t)v37, (v37 - (unsigned char *)v36) >> 1);
        int v32 = 812200040;
        sub_216335FA8(&v33, &v32, 2);
        __int16 v139 = 12392;
        memset(v140, 0, sizeof(v140));
        sub_2163387B8(v140, v33, (uint64_t)v34, (v34 - (unsigned char *)v33) >> 1);
        int v29 = 812724336;
        sub_216335FA8(&v30, &v29, 2);
        __int16 v141 = 12400;
        memset(v142, 0, sizeof(v142));
        sub_2163387B8(v142, v30, (uint64_t)v31, (v31 - (unsigned char *)v30) >> 1);
        int v26 = 812920947;
        sub_216335FA8(&v27, &v26, 2);
        __int16 v143 = 12403;
        memset(v144, 0, sizeof(v144));
        sub_2163387B8(v144, v27, (uint64_t)v28, (v28 - (unsigned char *)v27) >> 1);
        int v23 = 813117558;
        sub_216335FA8(&v24, &v23, 2);
        __int16 v145 = 12406;
        memset(v146, 0, sizeof(v146));
        sub_2163387B8(v146, v24, (uint64_t)v25, (v25 - (unsigned char *)v24) >> 1);
        int v20 = 813314169;
        sub_216335FA8(&v21, &v20, 2);
        __int16 v147 = 12409;
        memset(v148, 0, sizeof(v148));
        sub_2163387B8(v148, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 1);
        int v17 = 813510780;
        sub_216335FA8(&__p, &v17, 2);
        __int16 v149 = 12412;
        memset(v150, 0, 24);
        sub_2163387B8(v150, __p, (uint64_t)v19, (v19 - (unsigned char *)__p) >> 1);
        sub_216338834(&qword_26797E890, (unsigned __int16 *)v89, 24);
        uint64_t v11 = 96;
        do
        {
          int v12 = (void *)v88[v11 - 1];
          if (v12)
          {
            v88[v11] = (uint64_t)v12;
            operator delete(v12);
          }
          v11 -= 4;
        }
        while (v11 * 8);
        if (__p)
        {
          int v19 = __p;
          operator delete(__p);
        }
        if (v21)
        {
          long long v22 = v21;
          operator delete(v21);
        }
        if (v24)
        {
          uint64_t v25 = v24;
          operator delete(v24);
        }
        if (v27)
        {
          int v28 = v27;
          operator delete(v27);
        }
        if (v30)
        {
          uint64_t v31 = v30;
          operator delete(v30);
        }
        if (v33)
        {
          uint64_t v34 = v33;
          operator delete(v33);
        }
        if (v36)
        {
          uint64_t v37 = v36;
          operator delete(v36);
        }
        if (v39)
        {
          uint64_t v40 = v39;
          operator delete(v39);
        }
        if (v42)
        {
          uint64_t v43 = v42;
          operator delete(v42);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        if (v48)
        {
          uint64_t v49 = v48;
          operator delete(v48);
        }
        if (v51)
        {
          uint64_t v52 = v51;
          operator delete(v51);
        }
        if (v54)
        {
          uint64_t v55 = v54;
          operator delete(v54);
        }
        if (v57)
        {
          uint64_t v58 = v57;
          operator delete(v57);
        }
        if (v60)
        {
          uint64_t v61 = v60;
          operator delete(v60);
        }
        if (v63)
        {
          uint64_t v64 = v63;
          operator delete(v63);
        }
        if (v66)
        {
          uint64_t v67 = v66;
          operator delete(v66);
        }
        if (v75)
        {
          uint64_t v76 = v75;
          operator delete(v75);
        }
        if (v77)
        {
          int v78 = v77;
          operator delete(v77);
        }
        if (v79)
        {
          int64_t v80 = v79;
          operator delete(v79);
        }
        if (v81)
        {
          uint64_t v82 = v81;
          operator delete(v81);
        }
        if (v83)
        {
          uint64_t v84 = v83;
          operator delete(v83);
        }
        if (v85)
        {
          uint64_t v86 = v85;
          operator delete(v85);
        }
        if (v87)
        {
          v88[0] = (uint64_t)v87;
          operator delete(v87);
        }
        __cxa_atexit((void (*)(void *))sub_2163387B4, &qword_26797E890, &dword_2160F5000);
        __cxa_guard_release(&qword_26797E7A8);
      }
      int v7 = sub_216338708(qword_26797E890, unk_26797E898, v3);
      if (v7) {
        unint64_t v6 = v7 + 3;
      }
      else {
        unint64_t v6 = 0;
      }
      if (!v4) {
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v6 = 0;
      if ((a2 & 0xC) == 0)
      {
LABEL_37:
        if ((v2 & 0x10) != 0 && !v6)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E7B8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_26797E7B8))
          {
            LODWORD(v83) = 811937882;
            sub_216335FA8(&v87, &v83, 2);
            LOWORD(v89[0]) = 12378;
            uint64_t v91 = 0;
            uint64_t v92 = 0;
            uint64_t v90 = 0;
            sub_2163387B8(&v90, v87, v88[0], (v88[0] - (uint64_t)v87) >> 1);
            LODWORD(v81) = 811741272;
            sub_216335FA8(&v85, &v81, 2);
            __int16 v93 = 12376;
            uint64_t v95 = 0;
            uint64_t v96 = 0;
            uint64_t v94 = 0;
            sub_2163387B8(&v94, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 1);
            sub_216338834(&qword_26797E8E0, (unsigned __int16 *)v89, 2);
            for (uint64_t i = 0; i != -64; i -= 32)
            {
              char v16 = *(void **)((char *)&v94 + i);
              if (v16)
              {
                *(uint64_t *)((char *)&v95 + i) = (uint64_t)v16;
                operator delete(v16);
              }
            }
            if (v85)
            {
              uint64_t v86 = v85;
              operator delete(v85);
            }
            if (v87)
            {
              v88[0] = (uint64_t)v87;
              operator delete(v87);
            }
            __cxa_atexit((void (*)(void *))sub_2163387B4, &qword_26797E8E0, &dword_2160F5000);
            __cxa_guard_release(&qword_26797E7B8);
          }
          int v9 = sub_216338708(qword_26797E8E0, unk_26797E8E8, v3);
          if (v9) {
            return v9 + 3;
          }
          else {
            return 0;
          }
        }
        return (uint64_t **)v6;
      }
    }
    if (!v6)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E7B0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797E7B0))
      {
        LODWORD(v66) = 809578562;
        sub_216335FA8(&v87, &v66, 2);
        LOWORD(v89[0]) = 12354;
        uint64_t v91 = 0;
        uint64_t v92 = 0;
        uint64_t v90 = 0;
        sub_2163387B8(&v90, v87, v88[0], (v88[0] - (uint64_t)v87) >> 1);
        LODWORD(v63) = 809709636;
        sub_216335FA8(&v85, &v63, 2);
        __int16 v93 = 12356;
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        uint64_t v94 = 0;
        sub_2163387B8(&v94, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 1);
        LODWORD(v6sub_216195244(&a9, 0) = 809971784;
        sub_216335FA8(&v83, &v60, 2);
        __int16 v97 = 12360;
        uint64_t v99 = 0;
        uint64_t v100 = 0;
        uint64_t v98 = 0;
        sub_2163387B8(&v98, v83, (uint64_t)v84, (v84 - (unsigned char *)v83) >> 1);
        LODWORD(v57) = 810102858;
        sub_216335FA8(&v81, &v57, 2);
        __int16 v101 = 12362;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        uint64_t v102 = 0;
        sub_2163387B8(&v102, v81, (uint64_t)v82, (v82 - (unsigned char *)v81) >> 1);
        LODWORD(v54) = 813904004;
        sub_216335FA8(&v79, &v54, 2);
        __int16 v105 = 12420;
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        uint64_t v106 = 0;
        sub_2163387B8(&v106, v79, (uint64_t)v80, (v80 - (unsigned char *)v79) >> 1);
        LODWORD(v51) = 814035078;
        sub_216335FA8(&v77, &v51, 2);
        __int16 v109 = 12422;
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        uint64_t v110 = 0;
        sub_2163387B8(&v110, v77, (uint64_t)v78, (v78 - (unsigned char *)v77) >> 1);
        LODWORD(v48) = 814166152;
        sub_216335FA8(&v75, &v48, 2);
        __int16 v113 = 12424;
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        uint64_t v114 = 0;
        sub_2163387B8(&v114, v75, (uint64_t)v76, (v76 - (unsigned char *)v75) >> 1);
        sub_216338834(&qword_26797E8B8, (unsigned __int16 *)v89, 7);
        for (uint64_t j = 0; j != -224; j -= 32)
        {
          int v14 = *(void **)((char *)&v114 + j);
          if (v14)
          {
            *(uint64_t *)((char *)&v115 + j) = (uint64_t)v14;
            operator delete(v14);
          }
        }
        if (v75)
        {
          uint64_t v76 = v75;
          operator delete(v75);
        }
        if (v77)
        {
          int v78 = v77;
          operator delete(v77);
        }
        if (v79)
        {
          int64_t v80 = v79;
          operator delete(v79);
        }
        if (v81)
        {
          uint64_t v82 = v81;
          operator delete(v81);
        }
        if (v83)
        {
          uint64_t v84 = v83;
          operator delete(v83);
        }
        if (v85)
        {
          uint64_t v86 = v85;
          operator delete(v85);
        }
        if (v87)
        {
          v88[0] = (uint64_t)v87;
          operator delete(v87);
        }
        __cxa_atexit((void (*)(void *))sub_2163387B4, &qword_26797E8B8, &dword_2160F5000);
        __cxa_guard_release(&qword_26797E7B0);
      }
      int v8 = sub_216338708(qword_26797E8B8, unk_26797E8C0, v3);
      if (v8) {
        unint64_t v6 = v8 + 3;
      }
      else {
        unint64_t v6 = 0;
      }
    }
    goto LABEL_37;
  }
  if ((a2 & 0xA) == 0 || (a2 & 0xC) == 0)
  {
    if ((a2 & 0xA) != 0)
    {
      unint64_t v5 = &qword_26797E798;
      unint64_t v6 = qword_26797E860;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E798, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797E798))
      {
        v89[0] = 815018054;
        sub_216335FA8(qword_26797E860, v89, 2);
        unint64_t v6 = qword_26797E860;
        goto LABEL_30;
      }
      return (uint64_t **)v6;
    }
    if ((a2 & 0xC) != 0)
    {
      sub_216335EFC();
      return (uint64_t **)qword_26797E878;
    }
    return 0;
  }
  unint64_t v5 = &qword_26797E790;
  unint64_t v6 = qword_26797E848;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E790, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E790))
  {
    v89[0] = 809840710;
    LOWORD(v89[1]) = 12436;
    sub_216335FA8(qword_26797E848, v89, 3);
    unint64_t v6 = qword_26797E848;
    goto LABEL_30;
  }
  return (uint64_t **)v6;
}

void sub_21633586C(_Unwind_Exception *a1)
{
}

void sub_216335D3C()
{
}

void sub_216335D4C()
{
}

void sub_216335D5C()
{
}

void sub_216335D6C()
{
}

void sub_216335D7C()
{
}

void sub_216335D8C()
{
}

void sub_216335D9C()
{
}

void sub_216335DAC()
{
}

void sub_216335DBC()
{
}

void sub_216335DCC()
{
}

void sub_216335DDC()
{
}

void sub_216335DEC()
{
}

void sub_216335DFC()
{
}

void sub_216335E0C()
{
}

void sub_216335E1C()
{
}

void sub_216335E2C()
{
}

void sub_216335E38()
{
}

void sub_216335E48()
{
}

void sub_216335E50()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E788, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_26797E788))
    {
      int v0 = 811806820;
      sub_216335FA8(qword_26797E830, &v0, 2);
      __cxa_atexit((void (*)(void *))sub_216210850, qword_26797E830, &dword_2160F5000);
      __cxa_guard_release(&qword_26797E788);
    }
  }
}

void sub_216335EE4(_Unwind_Exception *a1)
{
}

void sub_216335EFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E7A0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_26797E7A0))
    {
      int v0 = 809840710;
      sub_216335FA8(qword_26797E878, &v0, 2);
      __cxa_atexit((void (*)(void *))sub_216210850, qword_26797E878, &dword_2160F5000);
      __cxa_guard_release(&qword_26797E7A0);
    }
  }
}

void sub_216335F90(_Unwind_Exception *a1)
{
}

void *sub_216335FA8(void *a1, const void *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_21610FD04(a1, a3);
    unint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 2 * a3);
    a1[1] = &v6[2 * a3];
  }
  return a1;
}

void sub_216336010(_Unwind_Exception *exception_object)
{
  unsigned __int16 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21633602C(uint64_t result, unsigned __int16 *a2, unint64_t a3, int a4, int *a5, CFArrayRef *a6)
{
  if (a3)
  {
    unint64_t v8 = a3;
    int v9 = (uint64_t *)(result + 8);
    uint64_t v85 = result;
    uint64_t v91 = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    sub_216339568(v9, v91 + v8);
    uint64_t v86 = a5;
    uint64_t v87 = a6;
    if (a5) {
      BOOL v10 = a6 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    int v11 = !v10;
    int v90 = v11;
    uint64_t v95 = (uint64_t *)off_26B4ABEB8(&off_26B4ABEB8);
    uint64_t v12 = 0;
    uint64_t v92 = (uint64_t (*)(_UNKNOWN **))off_26B4ABED0;
    uint64_t v94 = v9;
    for (i = v8; i != v12; unint64_t v8 = i)
    {
      if ((*(unsigned char *)v92(&off_26B4ABED0) & 1) == 0) {
        operator new[]();
      }
      uint64_t v13 = v12 + v91;
      if (v90)
      {
        uint64_t result = sub_2161BF7F8(v86, v87, a2, v8, v12, *v95, 0xEuLL, 0.0);
        if ((int)result >= 1)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 8 * result;
          do
          {
            uint64_t v16 = *v95;
            float v17 = *(float *)(*v95 + v14 + 4);
            uint64_t v18 = *v9 + 24 * v13;
            unint64_t v21 = *(void *)(v18 + 8);
            int v20 = (uint64_t *)(v18 + 8);
            unint64_t v19 = v21;
            uint64_t result = (uint64_t)(v20 + 1);
            unint64_t v22 = v20[1];
            if (v21 >= v22)
            {
              uint64_t v24 = (uint64_t *)(*v9 + 24 * v13);
              unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - *v24) >> 3);
              unint64_t v26 = v25 + 1;
              if (v25 + 1 > 0x666666666666666) {
                goto LABEL_79;
              }
              unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - *v24) >> 3);
              if (2 * v27 > v26) {
                unint64_t v26 = 2 * v27;
              }
              if (v27 >= 0x333333333333333) {
                unint64_t v28 = 0x666666666666666;
              }
              else {
                unint64_t v28 = v26;
              }
              __int16 v101 = v20 + 1;
              int v29 = (char *)sub_21618B4A8(result, v28);
              uint64_t v30 = &v29[40 * v25];
              __int16 v97 = v29;
              uint64_t v98 = v30;
              uint64_t v99 = v30;
              uint64_t v100 = &v29[40 * v31];
              v30[23] = 1;
              *(_DWORD *)uint64_t v30 = *(unsigned __int16 *)(v16 + v14);
              *((double *)v30 + 3) = v17;
              *((void *)v30 + 4) = 1;
              v99 += 40;
              sub_2162FE8C4(v24, &v97);
              unint64_t v23 = *v20;
              uint64_t result = sub_2162FEA68((uint64_t)&v97);
              int v9 = v94;
            }
            else
            {
              *(unsigned char *)(v19 + 23) = 1;
              *(_DWORD *)unint64_t v19 = *(unsigned __int16 *)(v16 + v14);
              *(double *)(v19 + 24) = v17;
              *(void *)(v19 + 32) = 1;
              unint64_t v23 = v19 + 40;
              *int v20 = v19 + 40;
            }
            *int v20 = v23;
            v14 += 8;
          }
          while (v15 != v14);
        }
      }
      else
      {
        uint64_t result = (uint64_t)sub_216334794(a2[v12], a4);
        if (result)
        {
          int v32 = *(unsigned __int16 **)result;
          int v33 = *(unsigned __int16 **)(result + 8);
          if (*(unsigned __int16 **)result != v33)
          {
            do
            {
              int v34 = *v32;
              if (a2[v12] == v34) {
                double v35 = 0.0;
              }
              else {
                double v35 = -1.0;
              }
              uint64_t v36 = *v9 + 24 * v13;
              unint64_t v39 = *(void *)(v36 + 8);
              int v38 = (uint64_t *)(v36 + 8);
              unint64_t v37 = v39;
              uint64_t result = (uint64_t)(v38 + 1);
              unint64_t v40 = v38[1];
              if (v39 >= v40)
              {
                uint64_t v42 = (uint64_t *)(*v9 + 24 * v13);
                unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v37 - *v42) >> 3);
                unint64_t v44 = v43 + 1;
                if (v43 + 1 > 0x666666666666666) {
                  goto LABEL_79;
                }
                unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - *v42) >> 3);
                if (2 * v45 > v44) {
                  unint64_t v44 = 2 * v45;
                }
                if (v45 >= 0x333333333333333) {
                  unint64_t v46 = 0x666666666666666;
                }
                else {
                  unint64_t v46 = v44;
                }
                __int16 v101 = v38 + 1;
                int v47 = (char *)sub_21618B4A8(result, v46);
                uint64_t v48 = &v47[40 * v43];
                __int16 v97 = v47;
                uint64_t v98 = v48;
                uint64_t v99 = v48;
                uint64_t v100 = &v47[40 * v49];
                v48[23] = 1;
                *(_WORD *)uint64_t v48 = v34;
                *((_WORD *)v48 + 1) = 0;
                *((double *)v48 + 3) = v35;
                *((void *)v48 + 4) = 1;
                v99 += 40;
                sub_2162FE8C4(v42, &v97);
                unint64_t v41 = *v38;
                uint64_t result = sub_2162FEA68((uint64_t)&v97);
                int v9 = v94;
              }
              else
              {
                *(unsigned char *)(v37 + 23) = 1;
                *(_WORD *)unint64_t v37 = v34;
                *(_WORD *)(v37 + 2) = 0;
                *(double *)(v37 + 24) = v35;
                *(void *)(v37 + 32) = 1;
                unint64_t v41 = v37 + 40;
                uint64_t *v38 = v37 + 40;
              }
              uint64_t *v38 = v41;
              ++v32;
            }
            while (v32 != v33);
          }
        }
        else
        {
          uint64_t v50 = *v9 + 24 * v13;
          unint64_t v53 = *(void *)(v50 + 8);
          uint64_t v52 = (uint64_t *)(v50 + 8);
          unint64_t v51 = v53;
          uint64_t result = (uint64_t)(v52 + 1);
          unint64_t v54 = v52[1];
          if (v53 >= v54)
          {
            int v56 = (uint64_t *)(*v9 + 24 * v13);
            unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - *v56) >> 3);
            unint64_t v58 = v57 + 1;
            if (v57 + 1 > 0x666666666666666) {
LABEL_79:
            }
              sub_21610CB04();
            unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - *v56) >> 3);
            if (2 * v59 > v58) {
              unint64_t v58 = 2 * v59;
            }
            if (v59 >= 0x333333333333333) {
              unint64_t v60 = 0x666666666666666;
            }
            else {
              unint64_t v60 = v58;
            }
            __int16 v101 = v52 + 1;
            uint64_t v61 = (char *)sub_21618B4A8(result, v60);
            int v62 = &v61[40 * v57];
            __int16 v97 = v61;
            uint64_t v98 = v62;
            uint64_t v99 = v62;
            uint64_t v100 = &v61[40 * v63];
            v62[23] = 1;
            *(_DWORD *)int v62 = a2[v12];
            *((void *)v62 + 3) = 0;
            *((void *)v62 + 4) = 1;
            v99 += 40;
            sub_2162FE8C4(v56, &v97);
            unint64_t v55 = *v52;
            uint64_t result = sub_2162FEA68((uint64_t)&v97);
            int v9 = v94;
          }
          else
          {
            *(unsigned char *)(v51 + 23) = 1;
            *(_DWORD *)unint64_t v51 = a2[v12];
            *(void *)(v51 + 24) = 0;
            *(void *)(v51 + 32) = 1;
            unint64_t v55 = v51 + 40;
            uint64_t *v52 = v51 + 40;
          }
          uint64_t *v52 = v55;
        }
      }
      ++v12;
    }
    if ((a4 & 0x20) != 0)
    {
      uint64_t result = sub_2161846A4((uint64_t)a2, i);
      uint64_t v96 = result;
      if (a2)
      {
        if (result)
        {
          uint64_t result = (uint64_t)sub_216183C5C((char *)&a2[i - result], 2 * result);
          if (result)
          {
            uint64_t v64 = (char **)result;
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v85 + 24))(v85);
            int v65 = *v64;
            uint64_t v66 = v64[1];
            if (*v64 != v66)
            {
              uint64_t v67 = result - v96;
              do
              {
                if (v65[23] < 0)
                {
                  int v69 = *(char **)v65;
                  unint64_t v68 = *((void *)v65 + 1);
                }
                else
                {
                  unint64_t v68 = v65[23];
                  int v69 = v65;
                }
                unint64_t v70 = v68 >> 1;
                if (v69) {
                  unint64_t v71 = v70;
                }
                else {
                  unint64_t v71 = 0;
                }
                uint64_t v72 = *v9 + 24 * v67;
                CFRange v75 = *(void **)(v72 + 8);
                uint64_t v74 = (void *)(v72 + 8);
                uint64_t v73 = v75;
                unint64_t v76 = v74[1];
                if ((unint64_t)v75 >= v76)
                {
                  int v78 = (uint64_t *)(*v9 + 24 * v67);
                  unint64_t v79 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v73 - *v78) >> 3);
                  unint64_t v80 = v79 + 1;
                  if (v79 + 1 > 0x666666666666666) {
                    goto LABEL_79;
                  }
                  unint64_t v81 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v76 - *v78) >> 3);
                  if (2 * v81 > v80) {
                    unint64_t v80 = 2 * v81;
                  }
                  if (v81 >= 0x333333333333333) {
                    unint64_t v82 = 0x666666666666666;
                  }
                  else {
                    unint64_t v82 = v80;
                  }
                  __int16 v101 = v74 + 1;
                  if (v82) {
                    unsigned int v83 = (char *)sub_21618B4A8((uint64_t)(v74 + 1), v82);
                  }
                  else {
                    unsigned int v83 = 0;
                  }
                  __int16 v97 = v83;
                  uint64_t v98 = &v83[40 * v79];
                  uint64_t v99 = v98;
                  uint64_t v100 = &v83[40 * v82];
                  sub_21617FAAC(v98, v69, v71);
                  uint64_t v84 = &v83[40 * v79];
                  *((void *)v84 + 3) = 0;
                  *((void *)v84 + 4) = v96;
                  v99 += 40;
                  sub_2162FE8C4(v78, &v97);
                  uint64_t v77 = (void *)*v74;
                  uint64_t result = sub_2162FEA68((uint64_t)&v97);
                  int v9 = v94;
                }
                else
                {
                  uint64_t result = (uint64_t)sub_21617FAAC(v73, v69, v71);
                  v73[3] = 0;
                  v73[4] = v96;
                  uint64_t v77 = v73 + 5;
                  void *v74 = v73 + 5;
                }
                void *v74 = v77;
                v65 += 24;
              }
              while (v65 != v66);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_21633673C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  *unint64_t v22 = v21;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216336768@<X0>(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int *a4@<X3>, CFArrayRef *a5@<X4>, void *a6@<X8>)
{
  *a6 = &unk_26C6F4D68;
  a6[1] = 0;
  a6[2] = 0;
  a6[3] = 0;
  return sub_21633602C((uint64_t)a6, a1, a2, a3, a4, a5);
}

void sub_2163367E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = v12;
  *BOOL v10 = v11;
  a10 = v13;
  sub_2161986EC(&a10);
  _Unwind_Resume(a1);
}

unsigned __int16 **sub_216336800(unsigned __int16 **result, unsigned __int16 *a2, unint64_t a3, char a4, int *a5, CFArrayRef *a6)
{
  if (a3)
  {
    uint64_t v8 = (uint64_t)result;
    uint64_t v9 = (uint64_t)(result + 1);
    uint64_t v29 = (*((uint64_t (**)(unsigned __int16 **))*result + 3))(result);
    sub_2162E0CB0(v9, v29 + a3);
    if (a5) {
      BOOL v10 = a6 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    int v11 = !v10;
    int v28 = v11;
    uint64_t v12 = (uint64_t *)off_26B4ABEE8();
    unint64_t v13 = 0;
    uint64_t v24 = (uint64_t (*)(_UNKNOWN **))off_26B4ABF00;
    do
    {
      uint64_t v14 = v13 + v29;
      if (v28)
      {
        if ((*(unsigned char *)v24(&off_26B4ABF00) & 1) == 0) {
          operator new[]();
        }
        uint64_t result = (unsigned __int16 **)sub_2161BF7F8(a5, a6, a2, a3, v13, *v12, 0xEuLL, 0.0);
        if ((int)result >= 1)
        {
          uint64_t v15 = 0;
          uint64_t v16 = 8 * result;
          do
          {
            uint64_t result = (unsigned __int16 **)sub_2161C4D0C(v8, v14, (void *)(v15 + *v12), 1uLL, 1, 0, 0xFFFFFF, -1, *(float *)(v15 + *v12 + 4), 255);
            v15 += 8;
          }
          while (v16 != v15);
        }
      }
      else
      {
        if (v13) {
          int v17 = a2[v13 - 1];
        }
        else {
          int v17 = 0;
        }
        if (a3 - 1 <= v13) {
          int v18 = 0;
        }
        else {
          int v18 = a2[v13 + 1];
        }
        unint64_t v19 = &a2[v13];
        uint64_t result = (unsigned __int16 **)sub_216334594(*v19, v17, v18, a4);
        if (result)
        {
          int v20 = *result;
          uint64_t v21 = result[1];
          while (v20 != v21)
          {
            int v22 = *v20++;
            __int16 __src = v22;
            if (*v19 == v22) {
              double v23 = 0.0;
            }
            else {
              double v23 = -1.0;
            }
            uint64_t result = (unsigned __int16 **)sub_2161C4D0C(v8, v14, &__src, 1uLL, 1, 0, 0xFFFFFF, -1, v23, 255);
          }
        }
        else
        {
          uint64_t result = (unsigned __int16 **)sub_2161C4D0C(v8, v14, &a2[v13], 1uLL, 1, 0, 0xFFFFFF, -1, 0.0, 255);
        }
      }
      ++v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_216336AC8(uint64_t a1, CFArrayRef theArray, char a3, uint64_t a4)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count)
    {
      uint64_t v9 = Count;
      BOOL v10 = *(float **)a4;
      if (*(void *)a4 != *(void *)(a4 + 8))
      {
        int v11 = 0;
        unint64_t v12 = 0;
        std::string __p = 0;
        uint64_t v50 = 0;
        unint64_t v51 = 0;
        float v13 = *v10;
        unint64_t v4 = 0x3FFFFFFFFFFFFFFFLL;
        while (1)
        {
          if (v12)
          {
            float v14 = v10[v12];
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v12);
            float v16 = (float)((float)((float)(v14 - v13) * 6.0) + -0.5) / (float)CFStringGetLength(ValueAtIndex);
            int v17 = v50;
            if (v50 >= (float *)v51)
            {
              int v20 = __p;
              uint64_t v21 = v50 - __p;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62) {
                sub_21610CB04();
              }
              uint64_t v23 = v51 - (char *)__p;
              if ((v51 - (char *)__p) >> 1 > v22) {
                unint64_t v22 = v23 >> 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24)
              {
                unint64_t v25 = (char *)sub_2161129B4((uint64_t)&v51, v24);
                int v20 = __p;
                int v17 = v50;
              }
              else
              {
                unint64_t v25 = 0;
              }
              uint64_t v29 = (float *)&v25[4 * v21];
              *uint64_t v29 = v16;
              unint64_t v19 = v29 + 1;
              while (v17 != v20)
              {
                int v30 = *((_DWORD *)v17-- - 1);
                *((_DWORD *)v29-- - 1) = v30;
              }
LABEL_35:
              std::string __p = v29;
              unint64_t v51 = &v25[4 * v24];
              if (v20) {
                operator delete(v20);
              }
              goto LABEL_37;
            }
            *uint64_t v50 = v16;
            int v18 = v50 + 1;
          }
          else
          {
            if (v11 >= (float *)v51)
            {
              int v20 = __p;
              uint64_t v26 = v11 - __p;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62) {
                sub_21610CB04();
              }
              uint64_t v28 = v51 - (char *)__p;
              if ((v51 - (char *)__p) >> 1 > v27) {
                unint64_t v27 = v28 >> 1;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v27;
              }
              if (v24)
              {
                unint64_t v25 = (char *)sub_2161129B4((uint64_t)&v51, v24);
                int v20 = __p;
                int v11 = v50;
              }
              else
              {
                unint64_t v25 = 0;
              }
              uint64_t v29 = (float *)&v25[4 * v26];
              *uint64_t v29 = 0.0;
              unint64_t v19 = v29 + 1;
              while (v11 != v20)
              {
                int v31 = *((_DWORD *)v11-- - 1);
                *((_DWORD *)v29-- - 1) = v31;
              }
              goto LABEL_35;
            }
            *int v11 = 0.0;
            int v18 = v11 + 1;
          }
          unint64_t v19 = v18;
LABEL_37:
          uint64_t v50 = v19;
          ++v12;
          BOOL v10 = *(float **)a4;
          int v11 = v19;
          if (v12 >= (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2) {
            goto LABEL_40;
          }
        }
      }
      std::string __p = 0;
      uint64_t v50 = 0;
      unint64_t v51 = 0;
LABEL_40:
      if (v9 < 1)
      {
        unint64_t v33 = 0;
      }
      else
      {
        CFIndex v32 = 0;
        unint64_t v33 = 0;
        do
        {
          CFStringRef v34 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v32);
          unint64_t Length = CFStringGetLength(v34);
          if (v33 <= Length) {
            unint64_t v33 = Length;
          }
          ++v32;
        }
        while (v9 != v32);
      }
      uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      sub_2162E0CB0(a1 + 8, v36 + v33);
      uint64_t v46 = v36;
      uint64_t v47 = a1;
      if (v33)
      {
        for (unint64_t i = 0; i != v33; ++i)
        {
          CFIndex v38 = CFArrayGetCount(theArray);
          if (v38 >= 1)
          {
            for (CFIndex j = 0; j != v38; ++j)
            {
              CFStringRef v40 = (const __CFString *)CFArrayGetValueAtIndex(theArray, j);
              CFIndex v41 = CFStringGetLength(v40);
              int v42 = v41;
              CFIndex v43 = v41 - 1;
              if (v41 - 1 >= i)
              {
                UniChar __src = 0;
                UniChar __src = CFStringGetCharacterAtIndex(v40, i);
                if (__p == v50) {
                  double v44 = 0.0;
                }
                else {
                  double v44 = __p[j];
                }
                if (v43 == i) {
                  uint64_t v45 = (uint64_t)(((unint64_t)(v33 - v42) << 32) + 0x100000000) >> 32;
                }
                else {
                  uint64_t v45 = 1;
                }
                unint64_t v4 = v4 & 0xFFFFFFFF00000000 | 0xFFFFFF;
                sub_2161C4D0C(v47, i + v46, &__src, 1uLL, v45, 0, v4, j, v44, a3);
              }
            }
          }
        }
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
}

void sub_216336E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216336EA0(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, int *a4@<X3>, CFArrayRef *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = (unsigned __int16 *)&unk_26C6BE8C8;
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  char v11 = 0;
  sub_216336800(&v8, a1, a2, a3, a4, a5);
  if ((a3 & 0x20) != 0)
  {
    sub_216333DA4(&v8, a6);
  }
  else
  {
    *(void *)a6 = &unk_26C6BE8C8;
    *(_OWORD *)(a6 + 8) = v9;
    *(void *)(a6 + 24) = v10;
    uint64_t v10 = 0;
    long long v9 = 0uLL;
    *(unsigned char *)(a6 + 32) = v11;
  }
  uint64_t v8 = (unsigned __int16 *)&unk_26C6BE8C8;
  unint64_t v12 = (void **)&v9;
  sub_2161C4FA0(&v12);
}

void sub_216336F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2161C4FA0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216336F9C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X8>)
{
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  if (a5)
  {
    uint64_t v6 = a5;
    uint64_t v10 = (void *)result;
    do
    {
      uint64_t v13 = *a4++;
      uint64_t v12 = v13;
      uint64_t v14 = *v10;
      if (*(unsigned __int8 *)(*(void *)(v10[1] + 24 * a3) + 48 * v13 + 46) == 255)
      {
        unint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 40))(v10, a3, v12);
        uint64_t v20 = *(unsigned __int8 *)(a6 + 23);
        if ((v20 & 0x80u) == 0) {
          unint64_t v21 = a6;
        }
        else {
          unint64_t v21 = *(void *)a6;
        }
        if ((v20 & 0x80u) != 0) {
          uint64_t v20 = *(void *)(a6 + 8);
        }
        sub_21633902C(a6, v21 + 2 * v20, a2 + 2 * a3, (__int16 *)(a2 + 2 * a3 + 2 * v19), v19);
      }
      else
      {
        unint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48))(v10, a3, v12);
        uint64_t v17 = *(unsigned __int8 *)(a6 + 23);
        if ((v17 & 0x80u) == 0) {
          unint64_t v18 = a6;
        }
        else {
          unint64_t v18 = *(void *)a6;
        }
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = *(void *)(a6 + 8);
        }
        sub_216338CD0(a6, v18 + 2 * v17, v15, (__int16 *)(v15 + 2 * v16), (2 * v16) >> 1);
      }
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v10 + 40))(v10, a3, v12);
      a3 += result;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_216337124(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216337150(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = a4 - 1;
    if (a4 != 1)
    {
      long long v9 = a3 + 1;
      do
      {
        a2 += (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, v7);
        uint64_t v10 = *v9++;
        uint64_t v7 = v10;
        --v8;
      }
      while (v8);
    }
    uint64_t v11 = *(void *)(a1[1] + 24 * a2) + 48 * v7;
    unsigned __int8 v12 = *(unsigned char *)(v11 + 46) + 1;
    __int16 v13 = *(unsigned __int8 *)(v11 + 47) + 1;
  }
  else
  {
    unsigned __int8 v12 = 0;
    __int16 v13 = 0;
  }
  return (unsigned __int16)(v12 | (unsigned __int16)(v13 << 8));
}

uint64_t *sub_216337210(uint64_t **a1, __int16 a2, int a3)
{
  v20[4] = *MEMORY[0x263EF8340];
  __int16 v19 = a3;
  unsigned __int16 v6 = ((uint64_t (*)(uint64_t **))(*a1)[3])(a1) - a2;
  if (a3)
  {
    unsigned __int16 v7 = ((uint64_t (*)(uint64_t **))(*a1)[3])(a1) - a2;
    long long v9 = a1 + 1;
    uint64_t v8 = a1[1];
    uint64_t v10 = v8[3 * v7 - 3];
    if (*(unsigned __int8 *)(v10 + 46) != 255)
    {
      uint64_t v11 = v7;
      uint64_t v12 = v8[3 * v7];
      if (*(unsigned __int8 *)(v12 + 46) != 255)
      {
        int v13 = *(unsigned __int8 *)(v10 + 47);
        if (v13 == *(unsigned __int8 *)(v12 + 47))
        {
          if (((uint64_t (*)(uint64_t **))(*a1)[3])(a1) <= (unint64_t)(v11 + 1))
          {
            uint64_t v15 = 1;
          }
          else
          {
            uint64_t v14 = 24 * v11 + 24;
            uint64_t v15 = 1;
            do
            {
              uint64_t v16 = *(uint64_t *)((char *)*v9 + v14);
              if (*(unsigned __int8 *)(v16 + 46) == 255) {
                break;
              }
              if (*(unsigned __int8 *)(v16 + 47) != v13) {
                break;
              }
              ++v15;
              v14 += 24;
            }
            while (v11 + v15 < (unint64_t)((uint64_t (*)(uint64_t **))(*a1)[3])(a1));
          }
          sub_2162E0D58((uint64_t)(a1 + 1), *v9, (uint64_t)&(*v9)[3 * v6]);
          uint64_t v18 = 0;
          do
          {
            v20[0] = &unk_26C6B53D8;
            v20[1] = &v19;
            v20[3] = v20;
            sub_2162E0DDC((uint64_t)a1, v18, (uint64_t)v20);
            uint64_t result = sub_2162E2318(v20);
            ++v18;
          }
          while (v15 != v18);
          return result;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = a1[1];
  }

  return sub_2162E0D58((uint64_t)(a1 + 1), v8, (uint64_t)&v8[3 * v6]);
}

void sub_216337498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162E2318((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2163374AC(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
}

uint64_t sub_2163374D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t sub_2163374FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_216337524(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

void sub_21633754C(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C6BF968;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }

  JUMPOUT(0x2166CA800);
}

void *sub_2163375D8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21633779C(a1, a2, a3, 1u, 0);
}

void *sub_2163375E4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216337834(a1, a2, a3, 1u, 0);
}

void *sub_2163375F0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21633779C(a1, a2, a3, 0, 0);
}

void *sub_2163375FC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216337834(a1, a2, a3, 0, 0);
}

void *sub_216337608(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C6F6728;
  v5[1] = a3;
  v5[3] = v5;
  sub_216337EAC(a1, a2, (uint64_t)v5, a4);
  return sub_216337E28(v5);
}

void sub_21633768C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216337E28((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_2163376A4(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C6BF968;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  return a1;
}

void sub_216337710(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26C6BF968;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }

  JUMPOUT(0x2166CA800);
}

void *sub_21633779C(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  v6[4] = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C6F65A8;
  v6[1] = a3;
  v6[3] = v6;
  sub_216337834(a1, a2, (uint64_t)v6, a4, a5);
  return sub_216337E28(v6);
}

void sub_216337820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216337E28((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216337834(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  v23[4] = *MEMORY[0x263EF8340];
  uint64_t v10 = off_26B4ABE10;
  if ((*(unsigned char *)off_26B4ABE10(&off_26B4ABE10) & 1) == 0)
  {
    __int16 v19 = (void *)off_26B4ABDF8(&off_26B4ABDF8);
    sub_216210E8C(v19, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210850, v19);
    *(unsigned char *)v10(&off_26B4ABE1sub_216195244(&a9, 0) = 1;
  }
  uint64_t v11 = off_26B4ABE40;
  if ((*(unsigned char *)off_26B4ABE40(&off_26B4ABE40) & 1) == 0)
  {
    uint64_t v20 = (void *)off_26B4ABE28(&off_26B4ABE28);
    sub_216210F04(v20, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210884, v20);
    *(unsigned char *)v11(&off_26B4ABE4sub_216195244(&a9, 0) = 1;
  }
  char v22 = 0;
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = &unk_26C6F6528;
  v12[1] = a1;
  v12[2] = a3;
  *((_DWORD *)v12 + 6) = a5;
  v23[3] = v12;
  (*(void (**)(uint64_t *__return_ptr, unint64_t))(*(void *)a1 + 24))(&v21, a1);
  off_26B4ABDF8(&off_26B4ABDF8);
  int v13 = (uint64_t *)off_26B4ABE28(&off_26B4ABE28);
  sub_21621D1B8(a1, a2, (uint64_t)v23, v14, a4, 0, 0, &v22, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  uint64_t v17 = v21;
  uint64_t v21 = 0;
  if (v17) {
    MEMORY[0x2166CA800](v17, 0x1000C4052888210);
  }
  return sub_21621DC6C(v23);
}

void sub_216337A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (a11) {
    MEMORY[0x2166CA800](a11, 0x1000C4052888210);
  }
  sub_21621DC6C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216337AC4()
{
}

__n128 sub_216337AD8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F6528;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216337B2C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6528;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216337B64(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v9 = *a3;
  uint64_t v10 = *a4;
  uint64_t v11 = *a5;
  uint64_t v12 = *a6;
  uint64_t v13 = *a7;
  uint64_t v14 = *a8;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v17 = 0;
  int v18 = v9;
  (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(v15 + 8) + 48))(*(void *)(v15 + 8), a2, &v17);
  return sub_216337C70(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)&v17, v10, v11, v12, v13, v14 - *(int *)(a1 + 24));
}

uint64_t sub_216337C24(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6588)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216337C64()
{
  return &unk_26C6F6588;
}

uint64_t sub_216337C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v8 = a7;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v12, &v11, &v10, &v9, &v8);
}

void sub_216337CDC()
{
}

void *sub_216337CF0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6F65A8;
  result[1] = v3;
  return result;
}

uint64_t sub_216337D38(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F65A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_216337D64(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_216337DCC(*(void *)(*(void *)(a1 + 8) + 24), a2, *a3, *a4, *a7);
}

uint64_t sub_216337D80(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6608)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216337DC0()
{
  return &unk_26C6F6608;
}

uint64_t sub_216337DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a3;
  uint64_t v6 = a5;
  uint64_t v7 = a4;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v8, &v7, &v6);
}

void *sub_216337E28(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216337EAC(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v20[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = off_26B4ABE70;
  if ((*(unsigned char *)off_26B4ABE70(&off_26B4ABE70) & 1) == 0)
  {
    unint64_t v16 = (void *)off_26B4ABE58(&off_26B4ABE58);
    sub_216210E8C(v16, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210850, v16);
    *(unsigned char *)v8(&off_26B4ABE7sub_216195244(&a9, 0) = 1;
  }
  uint64_t v9 = off_26B4ABEA0;
  if ((*(unsigned char *)off_26B4ABEA0(&off_26B4ABEA0) & 1) == 0)
  {
    uint64_t v17 = (void *)off_26B4ABE88(&off_26B4ABE88);
    sub_216210F04(v17, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210884, v17);
    *(unsigned char *)v9(&off_26B4ABEAsub_216195244(&a9, 0) = 1;
  }
  char v19 = 0;
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = &unk_26C6F6628;
  v10[1] = a1;
  _OWORD v10[2] = a3;
  *((_DWORD *)v10 + 6) = 0;
  *((_DWORD *)v10 + 7) = a4;
  v20[3] = v10;
  (*(void (**)(uint64_t *__return_ptr, unint64_t))(*(void *)a1 + 24))(&v18, a1);
  off_26B4ABE58(&off_26B4ABE58);
  uint64_t v11 = (uint64_t *)off_26B4ABE88(&off_26B4ABE88);
  sub_21621D1B8(a1, a2, (uint64_t)v20, v12, 1u, 1u, 1u, &v19, 0.0, v13, 0, 0, *v11, 0, -1, 0, 0);
  uint64_t v14 = v18;
  uint64_t v18 = 0;
  if (v14) {
    MEMORY[0x2166CA800](v14, 0x1000C4052888210);
  }
  return sub_21621DC6C(v20);
}

void sub_2163380F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (a11) {
    MEMORY[0x2166CA800](a11, 0x1000C4052888210);
  }
  sub_21621DC6C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216338134()
{
}

__n128 sub_216338148(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F6628;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21633819C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6628;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2163381D4(uint64_t a1, uint64_t a2, int *a3, const void **a4, size_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = *a4;
  size_t v12 = *a5;
  uint64_t v13 = *a6;
  uint64_t v14 = *a7;
  uint64_t v15 = *a8;
  int v27 = *a3;
  uint64_t v25 = v13;
  size_t v26 = v12;
  uint64_t v23 = v15;
  uint64_t v24 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (((*(uint64_t (**)(void))(**(void **)(v16 + 8) + 32))(*(void *)(v16 + 8)) & 1) == 0) {
    __assert_rtn("operator()", "AmbiguousTrieAdapter.hpp", 44, "m_trie->isValid(cursor)");
  }
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_216211DEC(&__p, v11, (uint64_t)v11 + v12, v12);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(v16 + 8);
  char v19 = operator new(0x50uLL);
  *char v19 = &unk_26C6F6698;
  v19[1] = &v26;
  v19[2] = &__p;
  void v19[3] = v17;
  v19[4] = &v27;
  v19[5] = &v25;
  v19[6] = &v24;
  v19[7] = &v23;
  v19[8] = a1 + 24;
  v19[9] = a9;
  void v28[3] = v19;
  (*(void (**)(uint64_t, uint64_t, void *, void))(*(void *)v18 + 56))(v18, a2, v28, *(unsigned int *)(a1 + 28));
  sub_2162E21FC(v28);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_216338378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2163383AC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6708)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163383EC()
{
  return &unk_26C6F6708;
}

void sub_2163383FC()
{
}

__n128 sub_216338410(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_26C6F6698;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4sub_216195244(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21633847C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6698;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 4sub_216195244(&a9, 0) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_2163384CC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v11 = *(void **)(a1 + 8);
  uint64_t v10 = *(unint64_t **)(a1 + 16);
  unint64_t v12 = *v11 + *a4;
  unint64_t v13 = v10[1] - *v10;
  if (v12 > v13) {
    sub_216179360(v10, v12 - v13);
  }
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
      *(unsigned char *)(**(void **)(a1 + 16) + **(void **)(a1 + 8) + i) = *(unsigned char *)(v8 + i);
  }
  uint64_t v15 = *(uint64_t **)(a1 + 40);
  int v16 = **(_DWORD **)(a1 + 32);
  uint64_t v18 = *a2;
  int v19 = v16;
  uint64_t result = sub_216337C70(*(void *)(*(void *)(a1 + 24) + 24), (uint64_t)&v18, **(void **)(a1 + 16), v12, *v15, **(void **)(a1 + 48), **(void **)(a1 + 56) - **(int **)(a1 + 64));
  **(unsigned char **)(a1 + 72) = (**(unsigned __int8 **)(a1 + 72) | *a5) != 0;
  return result;
}

uint64_t sub_2163385C8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F66F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216338608()
{
  return &unk_26C6F66F8;
}

void sub_216338618()
{
}

void *sub_21633862C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6F6728;
  result[1] = v3;
  return result;
}

uint64_t sub_216338674(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F6728;
  a2[1] = v2;
  return result;
}

uint64_t sub_2163386A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_216337DCC(*(void *)(*(void *)(a1 + 8) + 24), a2, *a3, *a4, *a7);
}

uint64_t sub_2163386BC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6788)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163386FC()
{
  return &unk_26C6F6788;
}

uint64_t **sub_216338708(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  unint64_t v5 = *(uint64_t ****)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v7 = (unint64_t)result[1];
    if (v7 == a3)
    {
      if (*((unsigned __int16 *)result + 8) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_2163387B8(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21610FD04(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216338818(_Unwind_Exception *exception_object)
{
  uint8x8_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216338834(uint64_t *a1, unsigned __int16 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    unint64_t v5 = a2;
    uint64_t v6 = &a2[16 * a3];
    uint64_t v7 = a1 + 2;
    while (1)
    {
      unint64_t v8 = *v5;
      unint64_t v9 = a1[1];
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v9 <= v8) {
            unint64_t v3 = v8 % v9;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        uint64_t v11 = *(uint64_t ****)(*a1 + 8 * v3);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = (uint64_t **)*i)
          {
            unint64_t v13 = (unint64_t)i[1];
            if (v13 == v8)
            {
              if (*((unsigned __int16 *)i + 8) == v8) {
                goto LABEL_75;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9) {
                  v13 %= v9;
                }
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t v14 = operator new(0x30uLL);
      void *v14 = 0;
      v14[1] = v8;
      *((_WORD *)v14 + 8) = v8;
      v14[4] = 0;
      v14[5] = 0;
      void v14[3] = 0;
      sub_2163387B8(v14 + 3, *((const void **)v5 + 1), *((void *)v5 + 2), (uint64_t)(*((void *)v5 + 2) - *((void *)v5 + 1)) >> 1);
      float v15 = (float)(unint64_t)(a1[3] + 1);
      float v16 = *((float *)a1 + 8);
      if (!v9 || (float)(v16 * (float)v9) < v15) {
        break;
      }
LABEL_65:
      uint64_t v32 = *a1;
      unint64_t v33 = *(void **)(*a1 + 8 * v3);
      if (v33)
      {
        void *v14 = *v33;
      }
      else
      {
        void *v14 = *v7;
        *uint64_t v7 = v14;
        *(void *)(v32 + 8 * v3) = v7;
        if (!*v14) {
          goto LABEL_74;
        }
        unint64_t v34 = *(void *)(*v14 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v34 >= v9) {
            v34 %= v9;
          }
        }
        else
        {
          v34 &= v9 - 1;
        }
        unint64_t v33 = (void *)(*a1 + 8 * v34);
      }
      *unint64_t v33 = v14;
LABEL_74:
      ++a1[3];
LABEL_75:
      v5 += 16;
      if (v5 == v6) {
        return a1;
      }
    }
    BOOL v17 = (v9 & (v9 - 1)) != 0;
    if (v9 < 3) {
      BOOL v17 = 1;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = (void *)*a1;
          *a1 = (uint64_t)v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*v7;
          if (*v7)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v25) = v7;
            int v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*a1 + 8 * v31))
                  {
                    *(void *)(*a1 + 8 * v31) = v24;
                    goto LABEL_56;
                  }
                  void *v24 = *v30;
                  *int v30 = **(void **)(*a1 + 8 * v31);
                  **(void **)(*a1 + 8 * v31) = v30;
                  int v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_56:
                uint64_t v24 = v30;
                int v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        double v35 = (void *)*a1;
        *a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    goto LABEL_65;
  }
  return a1;
}

void sub_216338C50(_Unwind_Exception *a1)
{
  sub_2161E60D0(1, v2);
  sub_2161E6130(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216338C8C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C80CE7E837CLL);
  }
  return a1;
}

uint64_t sub_216338CD0(unint64_t a1, uint64_t a2, unint64_t a3, __int16 *a4, unint64_t a5)
{
  uint64_t v7 = (__int16 *)a3;
  uint64_t v8 = a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v9 = (uint64_t)(a2 - a1) >> 1;
    if (a5)
    {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
      if (a1 > a3 || a1 + 2 * v10 + 2 <= a3)
      {
        unint64_t v11 = 10;
        unint64_t v12 = 10 - v10;
        unint64_t v13 = a1;
LABEL_12:
        if (v12 >= a5)
        {
          if (v10 == v9) {
            uint64_t v10 = v9;
          }
          else {
            memmove((void *)(v13 + 2 * v9 + 2 * a5), (const void *)(v13 + 2 * v9), 2 * (v10 - v9));
          }
        }
        else
        {
          sub_21618504C(a1, v11, v10 + a5 - v11, v10, v9, 0, a5);
          *(void *)(v8 + 8) = v10 + a5;
          unint64_t v13 = *(void *)v8;
        }
        unint64_t v20 = v10 + a5;
        if (*(char *)(v8 + 23) < 0) {
          *(void *)(v8 + 8) = v20;
        }
        else {
          *(unsigned char *)(v8 + 23) = v20 & 0x7F;
        }
        *(_WORD *)(v13 + 2 * v2sub_216195244(&a9, 0) = 0;
        if (v7 != a4)
        {
          uint64_t v21 = (__int16 *)(v13 + 2 * v9);
          do
          {
            __int16 v22 = *v7++;
            *v21++ = v22;
          }
          while (v7 != a4);
        }
        if (*(char *)(v8 + 23) < 0) {
          uint64_t v8 = *(void *)v8;
        }
        return v8 + 2 * v9;
      }
      goto LABEL_14;
    }
    return v8 + 2 * v9;
  }
  unint64_t v13 = *(void *)a1;
  uint64_t v9 = (a2 - *(void *)a1) >> 1;
  if (!a5)
  {
    uint64_t v8 = *(void *)a1;
    return v8 + 2 * v9;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v13 > a3 || v13 + 2 * v10 + 2 <= a3)
  {
    unint64_t v11 = (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v12 = v11 - v10;
    goto LABEL_12;
  }
LABEL_14:
  std::string __p = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if ((__int16 *)a3 == a4)
  {
    uint64_t v16 = 0;
    BOOL v17 = 0;
    unsigned int v15 = 0;
  }
  else
  {
    do
      sub_2161845F8((uint64_t)&__p, *v7++);
    while (v7 != a4);
    unsigned int v15 = HIBYTE(v26);
    BOOL v17 = (__int16 *)__p;
    uint64_t v16 = v25;
  }
  if ((v15 & 0x80u) == 0) {
    p_p = (__int16 *)&__p;
  }
  else {
    p_p = v17;
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  uint64_t v19 = sub_216338F0C(v8, a5, v9, p_p, &p_p[v16]);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  return v19;
}

void sub_216338EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216338F0C(uint64_t a1, unint64_t a2, uint64_t a3, __int16 *a4, __int16 *a5)
{
  uint64_t v9 = a1;
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    unint64_t v11 = (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - v10 >= a2)
    {
      uint64_t v12 = *(void *)a1;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    unint64_t v11 = 10;
    uint64_t v12 = a1;
    if (10 - v10 >= a2)
    {
LABEL_7:
      if (v10 == a3) {
        uint64_t v10 = a3;
      }
      else {
        memmove((void *)(v12 + 2 * a3 + 2 * a2), (const void *)(v12 + 2 * a3), 2 * (v10 - a3));
      }
      goto LABEL_10;
    }
  }
  sub_21618504C(a1, v11, v10 + a2 - v11, v10, a3, 0, a2);
  *(void *)(v9 + 8) = v10 + a2;
  uint64_t v12 = *(void *)v9;
LABEL_10:
  unint64_t v13 = v10 + a2;
  if (*(char *)(v9 + 23) < 0) {
    *(void *)(v9 + 8) = v13;
  }
  else {
    *(unsigned char *)(v9 + 23) = v13 & 0x7F;
  }
  *(_WORD *)(v12 + 2 * v13) = 0;
  if (a4 != a5)
  {
    uint64_t v14 = (_WORD *)(v12 + 2 * a3);
    do
    {
      __int16 v15 = *a4++;
      *v14++ = v15;
    }
    while (a4 != a5);
  }
  if (*(char *)(v9 + 23) < 0) {
    uint64_t v9 = *(void *)v9;
  }
  return v9 + 2 * a3;
}

uint64_t sub_21633902C(unint64_t a1, uint64_t a2, unint64_t a3, __int16 *a4, unint64_t a5)
{
  uint64_t v7 = (__int16 *)a3;
  uint64_t v8 = a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v9 = (uint64_t)(a2 - a1) >> 1;
    if (a5)
    {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
      if (a1 > a3 || a1 + 2 * v10 + 2 <= a3)
      {
        unint64_t v11 = 10;
        unint64_t v12 = 10 - v10;
        unint64_t v13 = a1;
LABEL_12:
        if (v12 >= a5)
        {
          if (v10 == v9) {
            uint64_t v10 = v9;
          }
          else {
            memmove((void *)(v13 + 2 * v9 + 2 * a5), (const void *)(v13 + 2 * v9), 2 * (v10 - v9));
          }
        }
        else
        {
          sub_21618504C(a1, v11, v10 + a5 - v11, v10, v9, 0, a5);
          *(void *)(v8 + 8) = v10 + a5;
          unint64_t v13 = *(void *)v8;
        }
        unint64_t v20 = v10 + a5;
        if (*(char *)(v8 + 23) < 0) {
          *(void *)(v8 + 8) = v20;
        }
        else {
          *(unsigned char *)(v8 + 23) = v20 & 0x7F;
        }
        *(_WORD *)(v13 + 2 * v2sub_216195244(&a9, 0) = 0;
        if (v7 != a4)
        {
          uint64_t v21 = (__int16 *)(v13 + 2 * v9);
          do
          {
            __int16 v22 = *v7++;
            *v21++ = v22;
          }
          while (v7 != a4);
        }
        if (*(char *)(v8 + 23) < 0) {
          uint64_t v8 = *(void *)v8;
        }
        return v8 + 2 * v9;
      }
      goto LABEL_14;
    }
    return v8 + 2 * v9;
  }
  unint64_t v13 = *(void *)a1;
  uint64_t v9 = (a2 - *(void *)a1) >> 1;
  if (!a5)
  {
    uint64_t v8 = *(void *)a1;
    return v8 + 2 * v9;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v13 > a3 || v13 + 2 * v10 + 2 <= a3)
  {
    unint64_t v11 = (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v12 = v11 - v10;
    goto LABEL_12;
  }
LABEL_14:
  std::string __p = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if ((__int16 *)a3 == a4)
  {
    uint64_t v16 = 0;
    BOOL v17 = 0;
    unsigned int v15 = 0;
  }
  else
  {
    do
      sub_2161845F8((uint64_t)&__p, *v7++);
    while (v7 != a4);
    unsigned int v15 = HIBYTE(v26);
    BOOL v17 = (__int16 *)__p;
    uint64_t v16 = v25;
  }
  if ((v15 & 0x80u) == 0) {
    p_p = (__int16 *)&__p;
  }
  else {
    p_p = v17;
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  uint64_t v19 = sub_216338F0C(v8, a5, v9, p_p, &p_p[v16]);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  return v19;
}

void sub_216339220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21633926C()
{
}

__n128 sub_216339280(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6B5328;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2163392CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6B5328;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2163392FC(uint64_t a1, uint64_t a2, __int16 **a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *a5;
  uint64_t v8 = *(_WORD **)a2;
  uint64_t v9 = *(void *)(a1 + 16);
  if (**(_WORD **)a2)
  {
    uint64_t v10 = 0;
    do
      unint64_t v11 = v10 + 1;
    while (v8[++v10]);
  }
  else
  {
    unint64_t v11 = 0;
  }
  return sub_2161C4D0C(v9, *(int *)(a1 + 8), v8, v11, v7, *v6, 0xFFFFFF, -1, *(float *)(a2 + 8), 255);
}

uint64_t sub_216339378(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5040)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163393B8()
{
  return &unk_26C6B5040;
}

void *sub_2163393C4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21633944C()
{
}

__n128 sub_216339460(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6B5380;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2163394AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6B5380;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2163394DC(uint64_t a1, int *a2, float *a3, void **a4, void *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  return sub_2161C4D0C(*(void *)(a1 + 16), *(int *)(a1 + 8), *a4, *a5 >> 1, *a8, *(_WORD *)*a4, *a2, -1, *a3, 255);
}

uint64_t sub_21633951C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5050)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21633955C()
{
  return &unk_26C6B5050;
}

void sub_216339568(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_216339610(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      sub_216198760(&v8);
    }
    a1[1] = v7;
  }
}

void sub_216339610(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_216129BFC(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unsigned int v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    BOOL v17 = &v16[v14];
    sub_216339778(a1, &v15);
    sub_216339918(&v15);
  }
}

void sub_216339764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216339918((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216339778(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2163397F0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2163397F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216339894((uint64_t)v11);
  return v9;
}

uint64_t sub_216339894(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2163398CC(a1);
  }
  return a1;
}

void sub_2163398CC(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = v1;
    sub_216198760(&v3);
    v1 += 3;
  }
}

void **sub_216339918(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_21633994C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_216198760(&v5);
  }
}

void sub_2163399A4()
{
}

void *sub_2163399B8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6B53D8;
  result[1] = v3;
  return result;
}

uint64_t sub_216339A00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6B53D8;
  a2[1] = v2;
  return result;
}

BOOL sub_216339A2C(uint64_t a1, uint64_t a2)
{
  return *(char *)(a2 + 46) + 1 != **(unsigned __int16 **)(a1 + 8);
}

uint64_t sub_216339A48(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5060)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216339A88()
{
  return &unk_26C6B5060;
}

uint64_t sub_216339A94(uint64_t a1, uint64_t a2)
{
  if (a2 < 0x100000) {
    operator new();
  }
  return 0;
}

void sub_216339B04(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x60C40149E097CLL);
  _Unwind_Resume(a1);
}

void sub_216339B28()
{
}

void sub_216339B80(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x60C40149E097CLL);
  _Unwind_Resume(a1);
}

void sub_216339BA4()
{
}

void sub_216339C28(_Unwind_Exception *a1)
{
  sub_21633A140(v2, 0);
  uint64_t v4 = *v1;
  *uint64_t v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_216339C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 1) {
    operator new();
  }
  operator new();
}

void sub_216339F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  MEMORY[0x2166CA800](v12, 0x10B2C404F1FE554);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216339FC8()
{
}

void sub_21633A068(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F3C40236A4E44);
  _Unwind_Resume(a1);
}

uint64_t **sub_21633A0D0(uint64_t **a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    CFRelease(v2);
  }
  sub_21633A140(a1 + 1, 0);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t *))(*v3 + 8))(v3);
  }
  return a1;
}

uint64_t *sub_21633A140(uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2162BE968(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_21633A190(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

CFDataRef sub_21633A1DC(uint64_t a1)
{
  CFDataRef result = *(CFDataRef *)(a1 + 16);
  if (!result)
  {
    CFDataRef result = *(CFDataRef *)(a1 + 8);
    if (result)
    {
      uint64_t v3 = (const UInt8 *)sub_2162BEB24((uint64_t)result);
      uint64_t v4 = *(void *)(a1 + 8);
      if (*(char *)(v4 + 239) < 0) {
        CFIndex v5 = *(void *)(v4 + 224);
      }
      else {
        CFIndex v5 = *(unsigned __int8 *)(v4 + 239);
      }
      CFDataRef result = CFDataCreateWithBytesNoCopy(0, v3, v5, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
      *(void *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_21633A244(uint64_t *a1)
{
  v1[0] = 0;
  v1[1] = v1;
  v1[2] = 0x2000000000;
  char v2 = 0;
  sub_2162F18A4(*a1);
  _Block_object_dispose(v1, 8);
}

void sub_21633A2E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_21633A300(void *a1, uint64_t a2, UniChar *chars, unint64_t a4, unsigned char *a5)
{
  long long v8 = (uint64_t *)a1[6];
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
  CFTypeRef cf = CFStringCreateWithCharactersNoCopy(0, chars, a4 >> 1, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  unsigned int v15 = 0;
  unint64_t v10 = (const UniChar *)sub_2162F2000(*v8, *(_DWORD *)(a2 + 8), &v15);
  CFTypeRef v17 = CFStringCreateWithCharactersNoCopy(0, v10, (unint64_t)v15 >> 1, v9);
  unint64_t v11 = *(unsigned __int16 *)(a2 + 2);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E918, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E918))
  {
    xmmword_26797E958 = 0u;
    xmmword_26797E948 = 0u;
    dword_26797E968 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_21633A190, &xmmword_26797E948, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E918);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)qword_26797E920, memory_order_acquire) != -1)
  {
    uint64_t v21 = &v19;
    unint64_t v20 = &v21;
    std::__call_once(qword_26797E920, &v20, (void (__cdecl *)(void *))sub_21633A560);
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797E948 + 8));
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = v11;
    if (*((void *)&xmmword_26797E948 + 1) <= v11) {
      unint64_t v13 = v11 % *((void *)&xmmword_26797E948 + 1);
    }
  }
  else
  {
    unint64_t v13 = (DWORD2(xmmword_26797E948) - 1) & v11;
  }
  long long v14 = *(uint64_t **)(xmmword_26797E948 + 8 * v13);
  do
  {
    do
      long long v14 = (uint64_t *)*v14;
    while (v14[1] != v11);
  }
  while (*((unsigned __int16 *)v14 + 8) != v11);
  int v18 = *((_DWORD *)v14 + 5);
  (*(void (**)(void))(a1[4] + 16))();
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
    *a5 = 1;
  }
  CFRelease(cf);
  CFRelease(v17);
}

__n128 sub_21633A4FC()
{
  sub_2161C04AC(0);
  result.n128_u32[0] = dword_26797EF54;
  result.n128_u16[2] = word_26797EF50;
  result.n128_u16[3] = word_26797EF58;
  result.n128_u64[1] = qword_26797EF5A;
  xmmword_26797E930 = (__int128)result;
  word_26797E940 = dword_26797EF54;
  return result;
}

void sub_21633A560()
{
  sub_2161C04AC(0);
  sub_21633A618(dword_26797EF54, dword_26797EF54, 0);
  sub_21633A618(HIWORD(dword_26797EF54), SHIWORD(dword_26797EF54), 1);
  sub_21633A618(word_26797EF50, word_26797EF50, 2);
  sub_21633A618(word_26797EF58, word_26797EF58, 3);
  sub_21633A618(qword_26797EF5A, qword_26797EF5A, 4);
  sub_21633A618(WORD1(qword_26797EF5A), SWORD1(qword_26797EF5A), 5);
  sub_21633A618(WORD2(qword_26797EF5A), SWORD2(qword_26797EF5A), 6);
  unsigned __int16 v0 = HIWORD(qword_26797EF5A);
  __int16 v1 = HIWORD(qword_26797EF5A);

  sub_21633A618(v0, v1, 7);
}

void sub_21633A618(unsigned __int16 a1, __int16 a2, int a3)
{
  unint64_t v6 = a1;
  unint64_t v7 = *((void *)&xmmword_26797E948 + 1);
  if (*((void *)&xmmword_26797E948 + 1))
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26797E948 + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a1;
      if (*((void *)&xmmword_26797E948 + 1) <= (unint64_t)a1) {
        unint64_t v3 = (unint64_t)a1 % *((void *)&xmmword_26797E948 + 1);
      }
    }
    else
    {
      unint64_t v3 = (DWORD2(xmmword_26797E948) - 1) & a1;
    }
    CFAllocatorRef v9 = *(uint64_t ****)(xmmword_26797E948 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v11 = (unint64_t)i[1];
        if (v11 == a1)
        {
          if (*((unsigned __int16 *)i + 8) == a1) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((void *)&xmmword_26797E948 + 1)) {
              v11 %= *((void *)&xmmword_26797E948 + 1);
            }
          }
          else
          {
            v11 &= *((void *)&xmmword_26797E948 + 1) - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint8x8_t v12 = operator new(0x18uLL);
  void *v12 = 0;
  v12[1] = v6;
  *((_WORD *)v12 + 8) = a2;
  *((_DWORD *)v12 + 5) = a3;
  float v13 = (float)(unint64_t)(*((void *)&xmmword_26797E958 + 1) + 1);
  if (!v7 || (float)(*(float *)&dword_26797E968 * (float)v7) < v13)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_26797E968);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)&xmmword_26797E948 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)&xmmword_26797E958 + 1) / *(float *)&dword_26797E968);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)&xmmword_26797E948 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_2160FFA74();
          }
          int v18 = operator new(8 * *(void *)&prime);
          char v19 = (void *)xmmword_26797E948;
          *(void *)&xmmword_26797E948 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&xmmword_26797E948 + 1) = prime;
          do
            *(void *)(xmmword_26797E948 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)xmmword_26797E958;
          if ((void)xmmword_26797E958)
          {
            unint64_t v22 = *(void *)(xmmword_26797E958 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_26797E948 + 8 * v22) = &xmmword_26797E958;
            for (j = *v21; j; unint64_t v22 = v28)
            {
              unint64_t v28 = j[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(xmmword_26797E948 + 8 * v28))
                {
                  *(void *)(xmmword_26797E948 + 8 * v28) = v21;
                  goto LABEL_55;
                }
                *uint64_t v21 = (void *)*j;
                void *j = **(void **)(xmmword_26797E948 + 8 * v28);
                **(void **)(xmmword_26797E948 + 8 * v28) = j;
                CFIndex j = v21;
              }
              unint64_t v28 = v22;
LABEL_55:
              uint64_t v21 = (void **)j;
              CFIndex j = (void *)*j;
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v32 = (void *)xmmword_26797E948;
        *(void *)&xmmword_26797E948 = 0;
        if (v32) {
          operator delete(v32);
        }
        unint64_t v7 = 0;
        *((void *)&xmmword_26797E948 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v29 = xmmword_26797E948;
  int v30 = *(void **)(xmmword_26797E948 + 8 * v3);
  if (v30)
  {
    void *v12 = *v30;
LABEL_72:
    *int v30 = v12;
    goto LABEL_73;
  }
  void *v12 = xmmword_26797E958;
  *(void *)&xmmword_26797E958 = v12;
  *(void *)(v29 + 8 * v3) = &xmmword_26797E958;
  if (*v12)
  {
    unint64_t v31 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    int v30 = (void *)(xmmword_26797E948 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)&xmmword_26797E958 + 1);
}

void sub_21633AA18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21633AA2C(void *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, int *a5, uint64_t a6)
{
  int v10 = *a5;
  CFTypeRef v17 = 0;
  uint64_t v18 = 0;
  std::string __p = 0;
  sub_216182F50(&__p, *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 1);
  sub_2162D45C0((uint64_t)a1, v10, (uint64_t)&__p);
  if (__p)
  {
    CFTypeRef v17 = __p;
    operator delete(__p);
  }
  *a1 = &unk_26C6BD698;
  unint64_t v11 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (a2) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  }
  else {
    CFStringRef Copy = 0;
  }
  a1[6] = Copy;
  if (a3) {
    CFStringRef v13 = CFStringCreateCopy(*v11, a3);
  }
  else {
    CFStringRef v13 = 0;
  }
  a1[7] = v13;
  if (a4) {
    CFStringRef v14 = CFStringCreateCopy(*v11, a4);
  }
  else {
    CFStringRef v14 = 0;
  }
  a1[8] = v14;
  return a1;
}

void sub_21633AB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_2161868BC(v12, 0);
  sub_2161868BC(v11, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21633AB78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C6C59C0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4sub_216195244(&a9, 0) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)a1 = &unk_26C6BD698;
  CFStringRef v6 = *(const __CFString **)(a2 + 48);
  unint64_t v7 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (v6) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v6);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 48) = Copy;
  CFStringRef v9 = *(const __CFString **)(a2 + 56);
  if (v9) {
    CFStringRef v10 = CFStringCreateCopy(*v7, v9);
  }
  else {
    CFStringRef v10 = 0;
  }
  *(void *)(a1 + 56) = v10;
  CFStringRef v11 = *(const __CFString **)(a2 + 64);
  if (v11) {
    CFStringRef v12 = CFStringCreateCopy(*v7, v11);
  }
  else {
    CFStringRef v12 = 0;
  }
  *(void *)(a1 + 64) = v12;
  return a1;
}

void sub_21633AC58(_Unwind_Exception *a1)
{
  sub_2161868BC(v2, 0);
  sub_2161868BC((const void **)(v1 + 48), 0);
  _Unwind_Resume(a1);
}

__CFString *sub_21633AC84(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 44);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
LABEL_3:
  uint64_t v5 = v3;
  uint64_t v6 = v4 <= 0x20 ? 32 : v4;
  while (v6 != v4)
  {
    char v7 = v4++;
    if ((v1 >> v7))
    {
      uint64_t v3 = v5 + 1;
      if (v4 - 1 < 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_3;
      }
      break;
    }
  }
  if (!v5) {
    return 0;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  unint64_t v10 = 0;
LABEL_11:
  uint64_t v11 = 0;
  if (v10 <= 0x20) {
    uint64_t v12 = 32;
  }
  else {
    uint64_t v12 = v10;
  }
  unint64_t v13 = v10 - v12;
  while (v13 + v11)
  {
    char v14 = v10 + v11++;
    if ((*(_DWORD *)(a1 + 44) >> v14))
    {
      v10 += v11;
      if (v10 != -1 && v11)
      {
        UniChar chars = v11 + 48;
        CFStringRef v15 = CFStringCreateWithCharacters(v8, &chars, 1);
        CFStringAppend(Mutable, v15);
        CFRelease(v15);
        goto LABEL_11;
      }
      return Mutable;
    }
  }
  return Mutable;
}

void sub_21633ADA8(uint64_t a1)
{
  sub_2162F6DBC(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21633ADE0(uint64_t a1)
{
  CFStringRef v1 = *(const __CFString **)(a1 + 56);
  if (v1) {
    CFStringGetLength(v1);
  }
  return 0;
}

BOOL sub_21633AE10(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) != 0;
}

void sub_21633AE24(uint64_t a1)
{
  sub_2163425D0(a1);

  JUMPOUT(0x2166CA800);
}

void sub_21633AE5C(uint64_t a1)
{
  *(void *)(a1 + 104) = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26C6C4FF0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16sub_216195244(&a9, 0) = 0u;
  *(void *)(a1 + 176) = 0;
  sub_2163409A4((void *)(a1 + 184));
}

void sub_21633B0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void **a13)
{
  sub_21634054C((uint64_t **)(v13 + 1520), 0);
  sub_216340C38(v18);
  if (*(char *)(v13 + 1471) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v13 + 1415) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v13 + 1359) < 0) {
    operator delete(*v19);
  }
  sub_2161ADAE8(v17);
  sub_216340D00(v16);
  unint64_t v22 = *(void **)(v13 + 272);
  if (v22)
  {
    *(void *)(v13 + 28sub_216195244(&a9, 0) = v22;
    operator delete(v22);
  }
  sub_216340E9C(a10);
  *(void *)(v13 + 20sub_216195244(&a9, 0) = &unk_26C6C4FB0;
  uint64_t v23 = *(void *)(v13 + 208);
  if (v23) {
    MEMORY[0x2166CA7C0](v23, 0x1000C8077774924);
  }
  *(void *)(v13 + 184) = &unk_26C6C4FB0;
  uint64_t v24 = *(void *)(v13 + 192);
  if (v24) {
    MEMORY[0x2166CA7C0](v24, 0x1000C8077774924);
  }
  std::mutex::~mutex(v14);
  uint8x8_t v25 = *(void **)(v13 + 56);
  if (v25)
  {
    *(void *)(v13 + 64) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void **)(v13 + 32);
  if (v26)
  {
    *(void *)(v13 + 4sub_216195244(&a9, 0) = v26;
    operator delete(v26);
  }
  unint64_t v27 = *a13;
  if (*a13)
  {
    *(void *)(v13 + 16) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void *sub_21633B280(void *a1)
{
  *a1 = &unk_26C6C4FB0;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  return a1;
}

uint64_t sub_21633B2DC(void *a1)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (void *)a1[2];
  if (v3 != v2)
  {
    do
    {
      if ((*(_DWORD *)(*v3 + 380) - 8) <= 0xFFFFFFFD)
      {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        uint64_t v2 = (void *)a1[2];
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = (void *)a1[1];
  }
  a1[2] = v3;
  a1[5] = a1[4];
  a1[35] = a1[34];
  sub_216180AD8((uint64_t)(a1 + 40));
  uint64_t result = a1[10];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    a1[10] = 0;
  }
  return result;
}

_OWORD *sub_21633B3A0(unint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, unsigned int a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v112 = a4;
  if ((unint64_t)(a2 + 0xFFFF) <= a3) {
    uint64_t v12 = a2 + 0xFFFF;
  }
  else {
    uint64_t v12 = (unsigned __int8 *)a3;
  }
  if (v12 > a2)
  {
    unsigned int v13 = *(_DWORD *)(a1 + 304);
    char v14 = *(unsigned int **)(a1 + 688);
    CFStringRef v15 = a2;
    while (1)
    {
      unint64_t v16 = v12 - v15;
      if ((*(_DWORD *)(a1 + 696) - 3) > 2)
      {
        unsigned __int16 v17 = *v15;
        if (((char)*v15 & 0x80000000) == 0) {
          goto LABEL_10;
        }
        if (v16 >= 2 && (v17 & 0xE0) == 0xC0)
        {
          uint64_t v18 = 2;
          unsigned __int16 v17 = v15[1] & 0x3F | ((v17 & 0x1F) << 6);
        }
        else
        {
          if (v16 < 3) {
            goto LABEL_29;
          }
          if ((v17 & 0xF0) == 0xE0)
          {
            unsigned __int16 v17 = (v17 << 12) | ((v15[1] & 0x3F) << 6) | v15[2] & 0x3F;
            uint64_t v18 = 3;
          }
          else
          {
            if (v16 < 4) {
              goto LABEL_29;
            }
            if ((v17 & 0xF8) == 0xF0)
            {
              unsigned __int16 v17 = 0;
              uint64_t v18 = 4;
            }
            else
            {
              if (v16 < 5) {
                goto LABEL_29;
              }
              if ((v17 & 0xFC) == 0xF8)
              {
                unsigned __int16 v17 = 0;
                uint64_t v18 = 5;
              }
              else
              {
                if (v16 < 6 || (v17 & 0xFE) != 0xFC)
                {
LABEL_29:
                  unsigned __int16 v17 = 0;
LABEL_10:
                  uint64_t v18 = 1;
                  goto LABEL_26;
                }
                unsigned __int16 v17 = 0;
                uint64_t v18 = 6;
              }
            }
          }
        }
      }
      else
      {
        if (v16 < 2)
        {
          char v19 = 0;
          unsigned int v8 = *v14;
          if ((v13 & *v14 & 0x3FFFF) == 0)
          {
            uint64_t v18 = 0;
            goto LABEL_31;
          }
          return v19;
        }
        unsigned __int16 v17 = *(_WORD *)v15;
        uint64_t v18 = 2;
      }
LABEL_26:
      unsigned int v8 = v14[v17];
      if ((v13 & v8 & 0x3FFFF) != 0)
      {
        v15 += v18;
        unsigned int v13 = v14[v17];
        if (v15 < v12) {
          continue;
        }
      }
      goto LABEL_31;
    }
  }
  uint64_t v18 = 0;
  CFStringRef v15 = a2;
LABEL_31:
  char v19 = 0;
  if (v15 && v15 != v12)
  {
    unint64_t v88 = (unint64_t)v12;
    uint64_t v108 = 0;
    __int16 v109 = &v108;
    uint64_t v110 = 0x2000000000;
    uint64_t v111 = 0;
    uint64_t v20 = *(void **)(a4 + 136);
    uint64_t v21 = sub_2162D1CE4(5u);
    unint64_t v22 = v88 - (void)v15;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      sub_2161E30A8(v15, v22 >> 1, &v105);
      CFRange v75 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v105
          : (std::string *)v105.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = v75;
      _os_log_debug_impl(&dword_2160F5000, v21, OS_LOG_TYPE_DEBUG, "[TokenizerImpl::lookup] %s", buf, 0xCu);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
    v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C6BE8C8;
    *(_OWORD *)&v105.__r_.__value_.__r.__words[1] = 0uLL;
    uint64_t v106 = 0;
    char v107 = 0;
    uint64_t v23 = *(void *)(a1 + 1312);
    uint64_t v85 = (const UniChar *)(v22 >> 1);
    if (v23
      && (uint64_t v24 = *(void *)(v23 + 184)) != 0
      && (uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24))(v24), v23 = *(void *)(a1 + 1312), v25))
    {
      uint64_t v98 = *(std::string **)(v23 + 184);
      uint64_t v99 = (unsigned __int8 *)(v15 - a6);
      unint64_t v96 = (unint64_t)(v15 - a6) >> 1;
    }
    else
    {
      sub_216336EA0((unsigned __int16 *)v15, v22 >> 1, (a5 >> 7) & 0xE | BYTE1(a5) & 0x10 | (a5 >> 1) & 0x20, (int *)v23, *(CFArrayRef **)(a1 + 1320), (uint64_t)buf);
      sub_2161DDBC0((void ***)&v105.__r_.__value_.__l.__size_);
      *(_OWORD *)&v105.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf[8];
      uint64_t v106 = v115;
      *(void *)&uint8_t buf[16] = 0;
      uint64_t v115 = 0;
      char v107 = v116;
      *(void *)int buf = &unk_26C6BE8C8;
      *(void *)&uint8_t buf[8] = 0;
      __int16 v113 = (void **)&buf[8];
      sub_2161C4FA0(&v113);
      unint64_t v96 = 0;
      uint64_t v99 = (unsigned __int8 *)(v15 - a6);
      uint64_t v98 = &v105;
    }
    if (*(unsigned char *)(a1 + 1360))
    {
      gettimeofday((timeval *)(a1 + 1368), 0);
      *(unsigned char *)(a1 + 1361) = 1;
    }
    uint64_t v26 = *(void **)(a1 + 8);
    if (v26 != *(void **)(a1 + 16))
    {
      int v27 = a5 & 0x200C4;
      int v28 = a5 & 0x1000;
      BOOL v31 = v22 == a7 || v22 > 3 || v22 == 2;
      if (v27 == 196) {
        int v32 = 258;
      }
      else {
        int v32 = 2;
      }
      if (v27 == 196) {
        int v33 = 257;
      }
      else {
        int v33 = 1;
      }
      if ((a5 & 0x80000) == 0) {
        int v32 = (((a5 & 0x80) != 0) << 8) | 2;
      }
      int v34 = v28 | v32;
      if ((a5 & 0x80000) == 0) {
        int v33 = (((a5 & 0x80) != 0) << 8) | 1;
      }
      int v35 = v28 | v33;
      int v36 = a5 & 0x1000 | (((a5 >> 8) & 7) << 13);
      int v37 = v36 | (((a5 & 0x80) != 0) << 8) | 2;
      int v38 = v36 | (((a5 & 0x80) != 0) << 8) | 1;
      unsigned int v39 = v34 & 0xFFFFF7FF | (((a5 & 0x40) != 0) << 11);
      if ((a5 & 0x40) != 0) {
        unsigned int v40 = v39;
      }
      else {
        unsigned int v40 = v37;
      }
      unsigned int v41 = v35 & 0xFFFFF7FF | (((a5 & 0x40) != 0) << 11);
      if ((a5 & 0x40) == 0) {
        unsigned int v41 = v38;
      }
      uint64_t v94 = a1 + 1392;
      BOOL v43 = v15 != a6 || (a5 & 0x200C0) != 192 || (a5 & 6) == 0;
      int v95 = (a5 >> 3) & 0x10000;
      int v90 = v31 & (a5 >> 2);
      uint64_t v89 = (timeval *)(a1 + 1424);
      if (v43) {
        int v44 = 0;
      }
      else {
        int v44 = 256;
      }
      unsigned int v91 = v44 | v40 & 0xFFFFF8FF;
      unsigned int v92 = v40;
      unsigned int v86 = v44 | v41 & 0xFFFFF8FF;
      unsigned int v87 = v41;
      uint64_t v45 = *(uint64_t **)(a1 + 8);
      do
      {
        int v46 = *(_DWORD *)(*v45 + 380);
        if (((a5 & 0x40000) != 0 || v46 != 1) && ((a5 & 0x100000) == 0 || (v46 & 0xFFFFFFFD) != 1))
        {
          if (*(unsigned char *)(a1 + 1416))
          {
            gettimeofday(v89, 0);
            *(unsigned char *)(a1 + 1417) = 1;
          }
          bzero(v20, 0x3000uLL);
          uint64_t v47 = sub_2161A2A80();
          unsigned int v48 = v92;
          if (!*v47) {
            unsigned int v48 = v91;
          }
          uint64_t v49 = *v45;
          uint64_t v50 = *(void *)(a1 + 1312);
          *(void *)int buf = &unk_26C6B5640;
          *(void *)&uint8_t buf[8] = &v112;
          uint64_t v115 = buf;
          uint64_t v51 = (*(uint64_t (**)(uint64_t, void, unsigned __int8 *, unint64_t, std::string *, uint64_t, unsigned __int8 *, void *, uint64_t, unsigned char *, unint64_t, uint64_t))(*(void *)v49 + 88))(v49, v48 | v95, v15, v22, v98, v50, v99, v20, 512, buf, v96, a8);
          sub_2162F3B28(buf);
          sub_21627D900(v94, 0);
          sub_21633C114(a1, v112, (__int16)a2, (uint64_t)v15, v22, a5, v51, v26, v109 + 3, 0);
          if (v90)
          {
            if (*(unsigned char *)(a1 + 1416))
            {
              gettimeofday(v89, 0);
              *(unsigned char *)(a1 + 1417) = 1;
            }
            bzero(v20, 0x3000uLL);
            uint64_t v52 = sub_2161A2A80();
            unsigned int v53 = v87;
            if (!*v52) {
              unsigned int v53 = v86;
            }
            uint64_t v54 = *v45;
            uint64_t v55 = *(void *)(a1 + 1312);
            *(void *)int buf = &unk_26C6B55E8;
            *(void *)&uint8_t buf[8] = &v112;
            uint64_t v115 = buf;
            uint64_t v56 = (*(uint64_t (**)(uint64_t, void, unsigned __int8 *, unint64_t, std::string *, uint64_t, unsigned __int8 *, void *, uint64_t, unsigned char *, unint64_t, uint64_t))(*(void *)v54 + 88))(v54, v53 | v95, v15, v22, v98, v55, v99, v20, 512, buf, v96, a8);
            sub_2162F3B28(buf);
            sub_21627D900(v94, 0);
            sub_21633C114(a1, v112, (__int16)a2, (uint64_t)v15, v22, a5, v56, v26, v109 + 3, 1);
          }
        }
        ++v45;
        ++v26;
      }
      while (v45 != *(uint64_t **)(a1 + 16));
    }
    sub_21627D900(a1 + 1336, 0);
    *(void *)int buf = v15;
    *(void *)&uint8_t buf[8] = v88 - (void)v15;
    *(void *)&uint8_t buf[16] = v99;
    uint64_t v115 = (unsigned char *)a5;
    if ((a5 & 0x100000) == 0)
    {
      uint64_t v57 = *(void *)(a1 + 1304);
      if (v57)
      {
        sub_21633C67C(a1, *(void *)(a1 + 168), (__int16)a2, v112, *(_WORD *)(v57 + 52), 7000, (uint64_t)buf, v109 + 3);
        sub_21633C67C(a1, *(void *)(a1 + 176), (__int16)a2, v112, *(_WORD *)(*(void *)(a1 + 1304) + 68), 5200, (uint64_t)buf, v109 + 3);
      }
    }
    int v58 = v98[1].__r_.__value_.__s.__data_[8];
    uint64_t v59 = *(void *)(a1 + 1520);
    v103[0] = MEMORY[0x263EF8330];
    v103[1] = 0x40000000;
    v103[2] = sub_21633C880;
    v103[3] = &unk_2642673A0;
    v103[6] = a2;
    v103[7] = v15;
    char v104 = v58;
    v103[4] = &v108;
    v103[5] = v112;
    sub_21619B3B0(v59, (UniChar *)v15, (unint64_t)v85, 1, (uint64_t)v103);
    unint64_t v60 = *(void **)(a1 + 1520);
    v101[0] = MEMORY[0x263EF8330];
    v101[1] = 0x40000000;
    v101[2] = sub_21633C9D8;
    v101[3] = &unk_264267628;
    v101[6] = a2;
    v101[7] = v15;
    char v102 = v58;
    v101[4] = &v108;
    v101[5] = v112;
    sub_21619B910(v60, 1, (UniChar *)v15, v85, (a5 >> 6) & 1, (uint64_t)v101);
    uint64_t v61 = v109 + 3;
    char v19 = (_OWORD *)v109[3];
    if ((v8 & 0x80000000) == 0 && v19) {
      goto LABEL_185;
    }
    int v62 = (char *)&v15[v18];
    unint64_t v63 = v88;
    if ((unint64_t)v62 > v88)
    {
      char v19 = sub_21633CA2C(a1, v112, v8, (int)a2, v15, (uint64_t)v62, v58 != 0, v61);
      goto LABEL_185;
    }
    if ((v8 & 0x40000000) == 0)
    {
      uint64_t v64 = 0;
      goto LABEL_149;
    }
    if ((unint64_t)v62 >= v88)
    {
      unint64_t v65 = 0;
      uint64_t v64 = v62;
      goto LABEL_129;
    }
    unint64_t v65 = 0;
    uint64_t v64 = v62;
    unsigned int v66 = v8;
    while (1)
    {
      unint64_t v67 = v88 - (void)v64;
      if ((*(_DWORD *)(a1 + 696) - 3) > 2)
      {
        unsigned __int16 v68 = *v64;
        if ((*v64 & 0x80000000) == 0) {
          goto LABEL_108;
        }
        if (v67 >= 2 && (v68 & 0xE0) == 0xC0)
        {
          uint64_t v69 = 2;
          unsigned __int16 v68 = v64[1] & 0x3F | ((v68 & 0x1F) << 6);
        }
        else
        {
          if (v67 < 3) {
            goto LABEL_127;
          }
          if ((v68 & 0xF0) == 0xE0)
          {
            unsigned __int16 v68 = (v68 << 12) | ((v64[1] & 0x3F) << 6) | v64[2] & 0x3F;
            uint64_t v69 = 3;
          }
          else
          {
            if (v67 < 4) {
              goto LABEL_127;
            }
            if ((v68 & 0xF8) == 0xF0)
            {
              unsigned __int16 v68 = 0;
              uint64_t v69 = 4;
            }
            else
            {
              if (v67 < 5) {
                goto LABEL_127;
              }
              if ((v68 & 0xFC) == 0xF8)
              {
                unsigned __int16 v68 = 0;
                uint64_t v69 = 5;
              }
              else
              {
                if (v67 < 6 || (v68 & 0xFE) != 0xFC)
                {
LABEL_127:
                  unsigned __int16 v68 = 0;
LABEL_108:
                  uint64_t v69 = 1;
                  goto LABEL_112;
                }
                unsigned __int16 v68 = 0;
                uint64_t v69 = 6;
              }
            }
          }
        }
      }
      else
      {
        if (v67 < 2)
        {
          if ((v66 & **(_DWORD **)(a1 + 688) & 0x3FFFF) == 0)
          {
LABEL_129:
            if (v64)
            {
LABEL_130:
              if (v65 <= *(void *)(a1 + 992))
              {
                unint64_t v71 = v64 - (char *)v15;
                if ((a5 & 0x40) == 0 || !v19) {
                  goto LABEL_143;
                }
                if (v71 >= 2)
                {
                  unint64_t v72 = v71 >> 1;
                  uint64_t v73 = v15;
                  while (1)
                  {
                    int v74 = *(unsigned __int16 *)v73;
                    v73 += 2;
                    if ((v74 - 123) <= 0xFFFFFFE5) {
                      break;
                    }
                    if (!--v72) {
                      goto LABEL_149;
                    }
                  }
LABEL_143:
                  if ((v8 & *(_DWORD *)(a1 + 1288) & 0x3FFFF) != 0 && v71 > 0xA) {
                    unint64_t v71 = 10;
                  }
                  sub_21633CA2C(a1, v112, v8, (int)a2, v15, (uint64_t)&v15[v71], v58 != 0, v61);
                  unint64_t v63 = v88;
                }
              }
LABEL_149:
              if ((v8 & 0x3C000000) == 0)
              {
LABEL_182:
                unint64_t v78 = (unint64_t)v62;
LABEL_183:
                char v19 = (_OWORD *)v109[3];
                if (!v19)
                {
                  sub_21633CA2C(a1, v112, v8, (int)a2, v15, v78, v58 != 0, v109 + 3);
                  char v19 = (_OWORD *)v109[3];
                }
                goto LABEL_185;
              }
              unint64_t v77 = 1;
              while (2)
              {
                unint64_t v78 = (unint64_t)v64;
                if (v62 != v64)
                {
                  sub_21633CA2C(a1, v112, v8, (int)a2, v15, (uint64_t)v62, v58 != 0, v109 + 3);
                  unint64_t v63 = v88;
                  unint64_t v79 = v88 - (void)v62;
                  if ((*(_DWORD *)(a1 + 696) - 3) > 2)
                  {
                    unsigned __int16 v80 = *v62;
                    if (*v62 < 0)
                    {
                      if (v79 >= 2 && (v80 & 0xE0) == 0xC0)
                      {
                        uint64_t v81 = 2;
                        unsigned __int16 v80 = v62[1] & 0x3F | ((v80 & 0x1F) << 6);
                        goto LABEL_161;
                      }
                      if (v79 >= 3)
                      {
                        if ((v80 & 0xF0) == 0xE0)
                        {
                          unsigned __int16 v80 = (v80 << 12) | ((v62[1] & 0x3F) << 6) | v62[2] & 0x3F;
                          uint64_t v81 = 3;
                          goto LABEL_161;
                        }
                        if (v79 >= 4)
                        {
                          if ((v80 & 0xF8) == 0xF0)
                          {
                            unsigned __int16 v80 = 0;
                            uint64_t v81 = 4;
                            goto LABEL_161;
                          }
                          if (v79 >= 5)
                          {
                            if ((v80 & 0xFC) == 0xF8)
                            {
                              unsigned __int16 v80 = 0;
                              uint64_t v81 = 5;
                              goto LABEL_161;
                            }
                            if (v79 >= 6 && (v80 & 0xFE) == 0xFC)
                            {
                              unsigned __int16 v80 = 0;
                              uint64_t v81 = 6;
                              goto LABEL_161;
                            }
                          }
                        }
                      }
                      unsigned __int16 v80 = 0;
                    }
                    uint64_t v81 = 1;
                    goto LABEL_161;
                  }
                  if (v79 < 2)
                  {
                    uint64_t v81 = 0;
                    unsigned __int16 v80 = 0;
                  }
                  else
                  {
                    unsigned __int16 v80 = *(_WORD *)v62;
                    uint64_t v81 = 2;
                  }
LABEL_161:
                  if ((v8 & 0x3FFFF & *(_DWORD *)(*(void *)(a1 + 688) + 4 * v80)) == 0) {
                    goto LABEL_182;
                  }
                  unint64_t v78 = (unint64_t)&v62[v81];
                }
                BOOL v83 = v77++ >= ((v8 >> 26) & 0xF) || v78 > v63;
                int v62 = (char *)v78;
                if (v83) {
                  goto LABEL_183;
                }
                continue;
              }
            }
          }
LABEL_185:
          v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C6BE8C8;
          *(void *)int buf = &v105.__r_.__value_.__l.__size_;
          sub_2161C4FA0((void ***)buf);
          _Block_object_dispose(&v108, 8);
          return v19;
        }
        unsigned __int16 v68 = *(_WORD *)v64;
        uint64_t v69 = 2;
      }
LABEL_112:
      unsigned int v70 = *(_DWORD *)(*(void *)(a1 + 688) + 4 * v68);
      if ((v66 & v70 & 0x3FFFF) != 0)
      {
        v64 += v69;
        ++v65;
        unsigned int v66 = v70;
        if ((unint64_t)v64 < v88) {
          continue;
        }
      }
      goto LABEL_130;
    }
  }
  return v19;
}

void sub_21633C094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 - 248) = a15;
  *(void *)(v16 - 16sub_216195244(&a9, 0) = a16;
  sub_2161C4FA0((void ***)(v16 - 160));
  _Block_object_dispose((const void *)(v16 - 208), 8);
  _Unwind_Resume(a1);
}

unint64_t sub_21633C114(unint64_t result, uint64_t a2, __int16 a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7, void *a8, void *a9, char a10)
{
  unint64_t v55 = result;
  if (a7)
  {
    uint64_t v13 = 0;
    int v14 = *(_DWORD *)(*a8 + 380);
    __int16 v51 = a4 - a3;
    __int16 v53 = a4 - a3 + a5;
    int v56 = a6 & 0x1700;
    int v49 = a6 & 0x1780;
    uint64_t v47 = *(void *)(a2 + 136);
    while (1)
    {
      uint64_t v50 = v13;
      CFStringRef v15 = (unsigned char *)(v47 + 24 * v13);
      uint64_t result = (*(uint64_t (**)(void, unsigned char *))(*(void *)*a8 + 136))(*a8, v15);
      if (result) {
        break;
      }
LABEL_75:
      uint64_t v13 = v50 + 1;
      if (v50 + 1 == a7) {
        return result;
      }
    }
    unint64_t v16 = 0;
    uint64_t v17 = v47 + 24 * v50;
    uint64_t v61 = (_WORD *)(v17 + 12);
    uint64_t v54 = (_DWORD *)(v17 + 8);
    uint64_t v59 = (void *)(v17 + 16);
    unint64_t v60 = (unsigned __int8 *)(v17 + 1);
    uint64_t v52 = (float *)(v17 + 4);
    unsigned int v48 = (unsigned __int16 *)(v17 + 14);
    while (1)
    {
      uint64_t v18 = (*(uint64_t (**)(void, unsigned char *, unint64_t))(*(void *)*a8 + 128))(*a8, v15, v16);
      __int16 v19 = *(_WORD *)(v18 + 4);
      if ((v19 & 0x40) == 0)
      {
        uint64_t v20 = v18;
        if (v14 == 6) {
          break;
        }
        if ((v19 & 2) != 0 || !a10 || (a6 & 0x20000) != 0 && (v19) && ((a6 & 8) == 0 || (v19 & 8) != 0))
        {
          if ((a6 & 2) != 0)
          {
            sub_216178D90(*(void **)(a2 + 16));
            unint64_t v22 = v26;
            v26[5] = 0u;
            v26[6] = 0u;
            void v26[3] = 0u;
            v26[4] = 0u;
            v26[1] = 0u;
            v26[2] = 0u;
            *uint64_t v26 = 0u;
            int v27 = (_DWORD *)*a8;
            *((_WORD *)v22 + 47) = *(_WORD *)(v20 + 2);
            *((_WORD *)v22 + 46) = *(_WORD *)(v20 + 6);
            *((_DWORD *)v22 + 18) = *(_DWORD *)(v20 + 8) + (v27[95] << 28);
            *((_WORD *)v22 + 42) = *(_WORD *)v20;
            *((void *)v22 + 7) = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v27 + 144))(v27, v20);
            goto LABEL_22;
          }
          if (v19) {
            break;
          }
        }
      }
LABEL_71:
      ++v16;
      uint64_t result = (*(uint64_t (**)(void, unsigned char *))(*(void *)*a8 + 136))(*a8, v15);
      if (v16 >= result) {
        goto LABEL_75;
      }
    }
    sub_216178D90(*(void **)(a2 + 16));
    unint64_t v22 = v21;
    v21[5] = 0u;
    v21[6] = 0u;
    v21[3] = 0u;
    v21[4] = 0u;
    v21[1] = 0u;
    v21[2] = 0u;
    *uint64_t v21 = 0u;
    uint64_t v23 = (_DWORD *)*a8;
    *((_WORD *)v22 + 47) = *(_WORD *)(v20 + 2);
    *((_WORD *)v22 + 46) = *(_WORD *)(v20 + 6);
    *((_DWORD *)v22 + 18) = *(_DWORD *)(v20 + 8) + (v23[95] << 28);
    *((_WORD *)v22 + 42) = *(_WORD *)v20;
    *((void *)v22 + 7) = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v23 + 144))(v23, v20);
    if ((a6 & 2) == 0)
    {
      if (*(unsigned __int8 *)v61 <= a5) {
        unsigned __int16 v24 = *(unsigned __int8 *)v61;
      }
      else {
        unsigned __int16 v24 = a5;
      }
      *((_WORD *)v22 + 44) = v24;
      __int16 v25 = v24 + v51;
      goto LABEL_25;
    }
LABEL_22:
    unsigned __int16 v24 = a5;
    if ((a6 & 8) != 0) {
      unsigned __int16 v24 = *(unsigned __int8 *)v61;
    }
    *((_WORD *)v22 + 44) = v24;
    __int16 v25 = v53;
LABEL_25:
    *((_WORD *)v22 + 45) = v25;
    int v28 = *v60;
    if (v14 == 2) {
      int v29 = 0;
    }
    else {
      int v29 = *v54 + (v14 << 28);
    }
    *((_DWORD *)v22 + 2sub_216195244(&a9, 0) = v29;
    *((unsigned char *)v22 + 108) = *(unsigned char *)(*a8 + 792);
    *((void *)v22 + 6) = a4;
    *((void *)v22 + 8) = *v59;
    __int16 v30 = *(_WORD *)(v20 + 4);
    if (v14 == 7)
    {
      char v31 = 9;
    }
    else if (a5 <= v24 && (a10 & 1) != 0)
    {
      char v31 = 5;
    }
    else if ((v30 & 3) == 0 || v14 == 6)
    {
      char v31 = 6;
    }
    else
    {
      char v31 = 0;
    }
    *((unsigned char *)v22 + 109) = v31;
    *((unsigned char *)v22 + 107) = *v15;
    *((void *)v22 + 3) = *a9;
    *((unsigned char *)v22 + 106) = v28 & 1;
    __int16 v33 = v30 | 0x10;
    if (v14 != 8) {
      __int16 v33 = v30;
    }
    *((_WORD *)v22 + 52) = v33;
    int v34 = *((__int16 *)v22 + 42);
    if ((a6 & 0x80) != 0 && (a6 & 0x80000) != 0 && v28 && (v33 & 2) == 0) {
      goto LABEL_71;
    }
    if (v56)
    {
      if ((*v61 & 0x100) != 0)
      {
        uint64_t v39 = *(void *)(v55 + 1296);
        int v40 = *(__int16 *)(v39 + 552);
        v34 += v40;
        int v35 = (int)(float)((float)(*(float *)(v39 + 448) * (float)v40) + 0.0);
        if (!v28) {
          goto LABEL_53;
        }
      }
      else
      {
        int v35 = 0;
        if (!v28) {
          goto LABEL_53;
        }
      }
    }
    else
    {
      int v35 = 0;
      if (!v49 || !v28) {
        goto LABEL_53;
      }
    }
    uint64_t v36 = *(void *)(v55 + 1296);
    float v37 = *v52 * (float)*(__int16 *)(v36 + 444);
    int v34 = (int)(float)((float)v34 - v37);
    int v35 = (int)(float)((float)v35 - (float)(v37 * *(float *)(v36 + 448)));
LABEL_53:
    if ((a6 & 4) != 0)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E978, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797E978))
      {
        qword_26797E970 = (uint64_t)sub_2161A2A80();
        __cxa_guard_release(&qword_26797E978);
      }
      if ((a6 & 0x40) != 0) {
        int v38 = *v48 >> 1;
      }
      else {
        int v38 = (*(unsigned __int8 *)v61 - *((unsigned __int16 *)v22 + 44)) / 2;
      }
      BOOL v41 = __OFSUB__(v38, 1);
      int v42 = v38 - 1;
      if (v42 < 0 != v41)
      {
        int v43 = 0;
      }
      else
      {
        int v43 = *(__int16 *)(qword_26797E970 + 536) + v42 * *(__int16 *)(qword_26797E970 + 538);
        v34 += v43;
      }
      v35 += v43;
    }
    if (v34 >= 0x7FFF) {
      __int16 v44 = 0x7FFF;
    }
    else {
      __int16 v44 = v34;
    }
    *((_WORD *)v22 + 42) = v44;
    if (v35 >= 0x7FFF) {
      __int16 v45 = 0x7FFF;
    }
    else {
      __int16 v45 = v35;
    }
    *((_WORD *)v22 + 43) = v45;
    *a9 = v22;
    goto LABEL_71;
  }
  return result;
}

void sub_21633C664(_Unwind_Exception *a1)
{
}

void sub_21633C67C(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, __int16 a6, uint64_t a7, void *a8)
{
  uint64_t v26 = (std::mutex *)(a1 + 104);
  BOOL v27 = std::mutex::try_lock((std::mutex *)(a1 + 104));
  if (a2 && v27)
  {
    uint64_t v13 = *(void **)(a4 + 136);
    bzero(v13, 0x3000uLL);
    uint64_t v14 = *(void *)a7 ? *(void *)(a7 + 8) >> 1 : 0;
    __int16 v30 = v13;
    uint64_t v15 = sub_21620CA6C(a2, *(void *)(a1 + 1312), *(unsigned __int8 **)a7, v14, (uint64_t)v13, 0x200uLL, *(_DWORD *)(a7 + 24), *(void *)(a7 + 16));
    char v16 = *(_DWORD *)(a2 + 112) == 2 ? 8 : 7;
    if (v15)
    {
      unint64_t v17 = 0;
      uint64_t v28 = v15;
      uint64_t v29 = a2;
      do
      {
        sub_21620CCCC(a2, v30[6 * v17 + 2], &v34);
        __int16 v19 = v34;
        uint64_t v18 = v35;
        if (v34 != v35)
        {
          do
          {
            if (v17 <= 0x1FF)
            {
              uint64_t v20 = *(unsigned __int8 **)a7;
              uint64_t v21 = *((void *)v19 + 2);
              uint64_t v22 = *(void *)(a4 + 136);
              sub_216178D90(*(void **)(a4 + 16));
              uint64_t v23 = (unsigned char *)(v22 + 24 * v17);
              *(_OWORD *)(v24 + 8sub_216195244(&a9, 0) = 0u;
              *(_OWORD *)(v24 + 96) = 0u;
              *(_OWORD *)(v24 + 48) = 0u;
              *(_OWORD *)(v24 + 64) = 0u;
              *(_OWORD *)(v24 + 16) = 0u;
              *(_OWORD *)(v24 + 32) = 0u;
              *(_OWORD *)uint64_t v24 = 0u;
              *(_WORD *)(v24 + 94) = a5;
              *(_WORD *)(v24 + 92) = a5;
              *(_WORD *)(v24 + 84) = a6;
              *(void *)(v24 + 56) = v21;
              __int16 v25 = v23[12];
              *(_WORD *)(v24 + 88) = v25;
              *(unsigned char *)(v24 + 106) = v23[1];
              *(_WORD *)(v24 + 9sub_216195244(&a9, 0) = v25 + (_WORD)v20 - a3;
              *(void *)(v24 + 48) = v20;
              *(unsigned char *)(v24 + 107) = *v23;
              *(unsigned char *)(v24 + 109) = v16;
              *(void *)(v24 + 24) = *a8;
              *a8 = v24;
            }
            v19 += 56;
          }
          while (v19 != v18);
          __int16 v19 = v34;
        }
        if (v19)
        {
          int v35 = v19;
          operator delete(v19);
        }
        ++v17;
        a2 = v29;
      }
      while (v17 != v28);
    }
  }
  if (v27) {
    std::mutex::unlock(v26);
  }
}

void sub_21633C850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
}

void sub_21633C880(uint64_t a1, uint64_t a2)
{
}

void sub_21633C8D4(uint64_t a1, __int16 a2, const void *a3, unsigned __int16 a4, __int16 a5, __int16 a6, int a7, int a8, void *a9)
{
  sub_216178D90(*(void **)(a1 + 16));
  uint64_t v18 = v17;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 8sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_WORD *)(v17 + 94) = a5;
  *(_WORD *)(v17 + 92) = a5;
  *(_DWORD *)(v17 + 72) = a7;
  *(_WORD *)(v17 + 84) = a6;
  *(_WORD *)(v17 + 86) = a6;
  *(_WORD *)(v17 + 88) = a4;
  *(_WORD *)(v17 + 9sub_216195244(&a9, 0) = (_WORD)a3 - a2 + a4;
  *(void *)(v17 + 48) = a3;
  if (a8)
  {
    if (a3) {
      uint64_t v19 = a4 >> 1;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (void *)sub_216341794(a1, v19);
    memcpy(v20, a3, 2 * v19);
    uint64_t v21 = sub_21634185C(a1);
    *uint64_t v21 = v20;
    v21[1] = (2 * v19);
    *(void *)(v18 + 64) = v21;
  }
  *(unsigned char *)(v18 + 107) = 0;
  *(unsigned char *)(v18 + 109) = 11;
  *(void *)(v18 + 24) = *a9;
  *a9 = v18;
}

void sub_21633C9D8(uint64_t a1, uint64_t a2)
{
}

_OWORD *sub_21633CA2C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  unsigned int v8 = a8;
  CFStringRef v9 = (uint64_t *)(*(void *)(a1 + 272) + 16 * (a3 >> 18));
  uint64_t v10 = v9[1];
  if (!v10) {
    return (_OWORD *)*a8;
  }
  uint64_t v14 = a1;
  uint64_t v15 = *v9;
  uint64_t v16 = a6 - (void)a5;
  uint64_t v17 = (a6 - a4);
  uint64_t v18 = (unsigned __int16)(a6 - (_WORD)a5) >> 1;
  if (!a5) {
    uint64_t v18 = 0;
  }
  uint64_t __n = 2 * v18;
  uint64_t v32 = v18;
  unsigned int v30 = 2 * v18;
  do
  {
    sub_216178D90(*(void **)(a2 + 16));
    uint64_t v20 = v19;
    v19[5] = 0u;
    v19[6] = 0u;
    void v19[3] = 0u;
    v19[4] = 0u;
    v19[1] = 0u;
    v19[2] = 0u;
    *uint64_t v19 = 0u;
    uint64_t v21 = *(_DWORD **)(v14 + 80);
    *((_WORD *)v20 + 47) = *(_WORD *)(v15 + 2);
    *((_WORD *)v20 + 46) = *(_WORD *)(v15 + 6);
    *((_DWORD *)v20 + 18) = *(_DWORD *)(v15 + 8) + (v21[95] << 28);
    *((_WORD *)v20 + 42) = *(_WORD *)v15;
    uint64_t v22 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v21 + 144))(v21, v15);
    *((void *)v20 + 6) = a5;
    *((void *)v20 + 7) = v22;
    *((_WORD *)v20 + 44) = v16;
    *((_WORD *)v20 + 45) = v17;
    *((void *)v20 + 3) = *v8;
    *((unsigned char *)v20 + 109) = 1;
    *((_DWORD *)v20 + 2sub_216195244(&a9, 0) = 0;
    *((unsigned char *)v20 + 108) = *(unsigned char *)(*(void *)(v14 + 80) + 792);
    if (a7)
    {
      uint64_t v23 = v8;
      uint64_t v24 = v17;
      uint64_t v25 = v16;
      uint64_t v26 = a7;
      BOOL v27 = (void *)sub_216341794(a2, v32);
      memcpy(v27, a5, __n);
      uint64_t v28 = sub_21634185C(a2);
      *uint64_t v28 = v27;
      a7 = v26;
      uint64_t v16 = v25;
      uint64_t v17 = v24;
      unsigned int v8 = v23;
      uint64_t v14 = a1;
      v28[1] = v30;
      *((void *)v20 + 8) = v28;
    }
    v15 += 12;
    *unsigned int v8 = v20;
    --v10;
  }
  while (v10);
  return v20;
}

uint64_t sub_21633CBDC(unint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v66 = 0;
  uint64_t v67 = a4;
  uint64_t v63 = 0;
  uint64_t v64 = &v63;
  uint64_t v65 = 0x2000000000;
  if ((unint64_t)(a3 - a2) <= 0xFFFE) {
    char v7 = a3;
  }
  else {
    char v7 = a2 + 0xFFFF;
  }
  unsigned int v8 = a2;
  if (v7 <= a2) {
    goto LABEL_32;
  }
  int v9 = *(_DWORD *)(a1 + 304);
  unsigned int v8 = a2;
  while (1)
  {
    unint64_t v10 = v7 - v8;
    if ((*(_DWORD *)(a1 + 696) - 3) <= 2) {
      break;
    }
    unsigned __int16 v11 = *v8;
    if (((char)*v8 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    if (v10 >= 2 && (v11 & 0xE0) == 0xC0)
    {
      uint64_t v12 = 2;
      unsigned __int16 v11 = v8[1] & 0x3F | ((v11 & 0x1F) << 6);
    }
    else
    {
      if (v10 < 3) {
        goto LABEL_29;
      }
      if ((v11 & 0xF0) == 0xE0)
      {
        unsigned __int16 v11 = (v11 << 12) | ((v8[1] & 0x3F) << 6) | v8[2] & 0x3F;
        uint64_t v12 = 3;
      }
      else
      {
        if (v10 < 4) {
          goto LABEL_29;
        }
        if ((v11 & 0xF8) == 0xF0)
        {
          unsigned __int16 v11 = 0;
          uint64_t v12 = 4;
        }
        else
        {
          if (v10 < 5) {
            goto LABEL_29;
          }
          if ((v11 & 0xFC) == 0xF8)
          {
            unsigned __int16 v11 = 0;
            uint64_t v12 = 5;
          }
          else
          {
            if (v10 < 6 || (v11 & 0xFE) != 0xFC)
            {
LABEL_29:
              unsigned __int16 v11 = 0;
LABEL_10:
              uint64_t v12 = 1;
              goto LABEL_20;
            }
            unsigned __int16 v11 = 0;
            uint64_t v12 = 6;
          }
        }
      }
    }
LABEL_20:
    int v13 = *(_DWORD *)(*(void *)(a1 + 688) + 4 * v11);
    if ((v9 & v13 & 0x3FFFF) != 0)
    {
      v8 += v12;
      int v9 = v13;
      if (v8 < v7) {
        continue;
      }
    }
    goto LABEL_32;
  }
  if (v10 >= 2)
  {
    unsigned __int16 v11 = *(_WORD *)v8;
    uint64_t v12 = 2;
    goto LABEL_20;
  }
  if ((v9 & **(_DWORD **)(a1 + 688) & 0x3FFFF) != 0)
  {
    uint64_t v14 = 0;
    goto LABEL_90;
  }
LABEL_32:
  uint64_t v14 = 0;
  if (v8 && v8 != v7)
  {
    uint64_t v15 = sub_2162D1CE4(5u);
    unint64_t v16 = v7 - v8;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v52 = v16 >> 1;
      sub_2161E30A8(v8, v16 >> 1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = p_p;
      _os_log_debug_impl(&dword_2160F5000, v15, OS_LOG_TYPE_DEBUG, "[TokenizerImpl::lookupOneWord] Input:[%s]", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      unint64_t v52 = v16 >> 1;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C6BE8C8;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    uint64_t v61 = 0;
    char v62 = 0;
    if ((a5 & 0x200000) != 0
      || (uint64_t v17 = *(void *)(a1 + 1312)) == 0
      || (uint64_t v18 = *(void *)(v17 + 184)) == 0
      || !(*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18)
      || (uint64_t v19 = *(std::string **)(*(void *)(a1 + 1312) + 184), (a5 & 2) != 0)
      && !v19[1].__r_.__value_.__s.__data_[8])
    {
      sub_216336EA0((unsigned __int16 *)v8, v52, (a5 >> 7) & 0xE | BYTE1(a5) & 0x10 | (a5 >> 1) & 0x20, *(int **)(a1 + 1312), *(CFArrayRef **)(a1 + 1320), (uint64_t)buf);
      sub_2161DDBC0((void ***)&__p.__r_.__value_.__l.__size_);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf[8];
      uint64_t v61 = v70;
      *(void *)&uint8_t buf[16] = 0;
      unsigned int v70 = 0;
      char v62 = v71;
      *(void *)int buf = &unk_26C6BE8C8;
      *(void *)&uint8_t buf[8] = 0;
      unsigned __int16 v68 = (void **)&buf[8];
      sub_2161C4FA0(&v68);
      uint64_t v19 = &__p;
    }
    uint64_t v20 = *(void **)(a1 + 8);
    if (v20 != *(void **)(a1 + 16))
    {
      if ((a5 & 0xA00C4) == 0x800C4) {
        int v21 = 258;
      }
      else {
        int v21 = 2;
      }
      int v22 = a5 & 0x1000;
      unsigned int v51 = v22 | v21 & 0xFFFFF7FF | (((a5 & 0x40) != 0) << 11);
      if ((a5 & 0x200C4) == 0xC4) {
        int v23 = (((a5 & 0x40) != 0) << 11) | 0x100;
      }
      else {
        int v23 = (32 * a5) & 0x800;
      }
      int v24 = (32 * a5) & 0x800 | (((a5 & 0x80) != 0) << 8);
      if ((a5 & 0x200C4) == 0xC4) {
        int v25 = 257;
      }
      else {
        int v25 = 1;
      }
      if ((a5 & 0x80000) != 0) {
        int v24 = v23;
      }
      int v26 = v24 | v22;
      if ((a5 & 0x80000) == 0) {
        int v25 = (((a5 & 0x80) != 0) << 8) | 1;
      }
      int v27 = v22 | v25;
      if ((a5 & 0x40) == 0) {
        int v26 = a5 & 0x1000 | ((BYTE1(a5) & 7) << 13) | (((a5 & 0x80) != 0) << 8);
      }
      unsigned int v28 = v27 & 0xFFFFF7FF | (((a5 & 0x40) != 0) << 11);
      if ((a5 & 0x40) != 0) {
        int v29 = v28;
      }
      else {
        int v29 = a5 & 0x1000 | ((BYTE1(a5) & 7) << 13) | (((a5 & 0x80) != 0) << 8) | 1;
      }
      BOOL v30 = (a5 & 0x200C0) != 0xC0 || (a5 & 6) == 0;
      int v54 = v29;
      int v50 = v26;
      if (v30) {
        int v31 = 0;
      }
      else {
        int v31 = 256;
      }
      int v49 = v26 & 0xF800 | v31;
      unsigned int v53 = v29 & 0xFFFFF8FF | v31;
      for (uint64_t i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
      {
        int v33 = *(_DWORD *)(*i + 380);
        if ((a5 & 0x40000) == 0 && v33 == 1 || (a5 & 0x100000) != 0 && (v33 & 0xFFFFFFFD) == 1) {
          goto LABEL_81;
        }
        int v34 = *(void **)(v67 + 136);
        bzero(v34, 0x3000uLL);
        if ((a5 & 4) != 0)
        {
          BOOL v35 = *(unsigned char *)sub_2161A2A80() == 0;
          unsigned int v37 = v53;
          unsigned int v36 = v54;
        }
        else
        {
          if ((a5 & 8) != 0)
          {
            uint64_t v38 = v51;
            if (v16 < 3) {
              goto LABEL_81;
            }
            goto LABEL_80;
          }
          BOOL v35 = *(unsigned char *)sub_2161A2A80() == 0;
          unsigned int v37 = v49;
          unsigned int v36 = v50;
        }
        if (v35) {
          unsigned int v36 = v37;
        }
        uint64_t v38 = v36 | (a5 >> 3) & 0x10000;
LABEL_80:
        uint64_t v39 = *i;
        uint64_t v40 = *(void *)(a1 + 1312);
        *(void *)int buf = &unk_26C6B54E0;
        *(void *)&uint8_t buf[8] = &v67;
        unsigned int v70 = buf;
        uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t, std::string *, uint64_t, void, void *, uint64_t, unsigned char *, void, void))(*(void *)v39 + 88))(v39, v38, v8, v16, v19, v40, 0, v34, 512, buf, 0, 0);
        sub_2162F3B28(buf);
        sub_21633C114(a1, v67, (__int16)a2, (uint64_t)v8, v16, a5, v41, v20, v64 + 3, (a5 & 4) != 0);
LABEL_81:
        ++v20;
      }
    }
    std::string::value_type v42 = v19[1].__r_.__value_.__s.__data_[8];
    uint64_t v43 = *(void *)(a1 + 1520);
    v58[0] = MEMORY[0x263EF8330];
    v58[1] = 0x40000000;
    v58[2] = sub_21633D374;
    v58[3] = &unk_26427D140;
    v58[6] = a2;
    v58[7] = v8;
    std::string::value_type v59 = v42;
    v58[4] = &v63;
    v58[5] = v67;
    sub_21619B3B0(v43, (UniChar *)v8, v52, 0, (uint64_t)v58);
    if ((a5 & 4) == 0)
    {
      unint64_t v44 = v16 - 2;
      __int16 v45 = *(void **)(a1 + 1520);
      v56[0] = MEMORY[0x263EF8330];
      v56[1] = 0x40000000;
      v56[2] = sub_21633D3C8;
      v56[3] = &unk_26427D168;
      int v46 = (v16 > 2) & (a5 >> 3);
      if (!v46) {
        unint64_t v44 = v16;
      }
      v56[6] = a2;
      v56[7] = v8;
      std::string::value_type v57 = v42;
      v56[4] = &v63;
      v56[5] = v67;
      sub_21619B910(v45, v46, (UniChar *)v8, (const UniChar *)(v44 >> 1), (a5 >> 6) & 1, (uint64_t)v56);
    }
    uint64_t v14 = v64[3];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C6BE8C8;
    *(void *)int buf = &__p.__r_.__value_.__l.__size_;
    sub_2161C4FA0((void ***)buf);
  }
LABEL_90:
  _Block_object_dispose(&v63, 8);
  return v14;
}

void sub_21633D314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(void *)(v18 - 16sub_216195244(&a9, 0) = a18;
  sub_2161C4FA0((void ***)(v18 - 160));
  _Block_object_dispose((const void *)(v18 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_21633D374(uint64_t a1, uint64_t a2)
{
}

void sub_21633D3C8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_21633D41C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 88);
  if (!v4) {
    return 0;
  }
  if ((unint64_t)(a3 - a2) <= 0xFFFE) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = a2 + 0xFFFF;
  }
  if (v5 <= a2)
  {
    unsigned int v11 = 0;
    char v7 = (char *)a2;
    goto LABEL_32;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 304);
  char v7 = (char *)a2;
  while (1)
  {
    unint64_t v8 = v5 - (unsigned __int8 *)v7;
    if ((*(_DWORD *)(a1 + 696) - 3) <= 2) {
      break;
    }
    unsigned __int16 v9 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    if (v8 >= 2 && (v9 & 0xE0) == 0xC0)
    {
      uint64_t v10 = 2;
      unsigned __int16 v9 = v7[1] & 0x3F | ((v9 & 0x1F) << 6);
    }
    else
    {
      if (v8 < 3) {
        goto LABEL_30;
      }
      if ((v9 & 0xF0) == 0xE0)
      {
        unsigned __int16 v9 = (v9 << 12) | ((v7[1] & 0x3F) << 6) | v7[2] & 0x3F;
        uint64_t v10 = 3;
      }
      else
      {
        if (v8 < 4) {
          goto LABEL_30;
        }
        if ((v9 & 0xF8) == 0xF0)
        {
          unsigned __int16 v9 = 0;
          uint64_t v10 = 4;
        }
        else
        {
          if (v8 < 5) {
            goto LABEL_30;
          }
          if ((v9 & 0xFC) == 0xF8)
          {
            unsigned __int16 v9 = 0;
            uint64_t v10 = 5;
          }
          else
          {
            if (v8 < 6 || (v9 & 0xFE) != 0xFC)
            {
LABEL_30:
              unsigned __int16 v9 = 0;
LABEL_11:
              uint64_t v10 = 1;
              goto LABEL_15;
            }
            unsigned __int16 v9 = 0;
            uint64_t v10 = 6;
          }
        }
      }
    }
LABEL_15:
    unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 688) + 4 * v9);
    if ((v6 & v11 & 0x3FFFF) != 0)
    {
      v7 += v10;
      unsigned int v6 = v11;
      if (v7 < (char *)v5) {
        continue;
      }
    }
    goto LABEL_32;
  }
  if (v8 >= 2)
  {
    unsigned __int16 v9 = *(_WORD *)v7;
    uint64_t v10 = 2;
    goto LABEL_15;
  }
  unsigned int v11 = **(_DWORD **)(a1 + 688);
  if ((v6 & v11 & 0x3FFFF) != 0) {
    return 0;
  }
LABEL_32:
  uint64_t v12 = 0;
  if (v7 && v7 != (char *)v5)
  {
    for (uint64_t i = 0; i != 3072; i += 24)
    {
      uint64_t v14 = &v45[i];
      *(_WORD *)uint64_t v14 = 0;
      *(void *)(v14 + 12) = 0;
      *(void *)(v14 + 4) = 0;
      *((_DWORD *)v14 + 5) = 0;
    }
    char v15 = 0;
    uint64_t v16 = 0;
    uint64_t v12 = 0;
    uint64_t v34 = v5 - (unsigned __int8 *)v7;
    v44[0] = *(void *)(a1 + 96);
    v44[1] = v4;
    __int16 v36 = (_WORD)v7 - (_WORD)a2;
    unsigned int v39 = v11 >> 18;
    do
    {
      char v35 = v15;
      uint64_t v17 = v44[v16];
      uint64_t v18 = v7;
      unint64_t v38 = sub_2162F3524(v17, (uint64_t)v7, v34, (uint64_t)v45, 0x80uLL);
      if (v38)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(v17 + 352);
        unsigned int v37 = *(uint64_t **)(v17 + 856);
        do
        {
          int v21 = &v45[24 * v19];
          __int16 v22 = *((_WORD *)v21 + 6);
          sub_2162543C4(&v41, v37, *((unsigned int *)v21 + 2));
          unint64_t v23 = v42;
          unint64_t v24 = v43;
          if (v42 < v43)
          {
            uint64_t v25 = *v41;
            do
            {
              unsigned int v26 = *(_DWORD *)(v25 + 4 * v23);
              uint64_t v27 = v20 + 12 * v26;
              __int16 v29 = *(_WORD *)(v27 + 4);
              unsigned int v28 = (_WORD *)(v27 + 4);
              if ((v29 & 0x80) == 0)
              {
                uint64_t v30 = v20 + 12 * v26;
                sub_216178D90(*(void **)(a4 + 16));
                *(_OWORD *)(v31 + 8sub_216195244(&a9, 0) = 0u;
                *(_OWORD *)(v31 + 96) = 0u;
                *(_OWORD *)(v31 + 48) = 0u;
                *(_OWORD *)(v31 + 64) = 0u;
                *(_OWORD *)(v31 + 16) = 0u;
                *(_OWORD *)(v31 + 32) = 0u;
                *(_OWORD *)uint64_t v31 = 0u;
                *(void *)(v31 + 48) = v18;
                *(_WORD *)(v31 + 94) = *(_WORD *)(v30 + 2);
                *(_WORD *)(v31 + 92) = *(_WORD *)(v30 + 6);
                *(_WORD *)(v31 + 104) = *v28;
                *(_WORD *)(v31 + 84) = *(_WORD *)v30;
                int v32 = *(_DWORD *)(v17 + 380);
                *(_DWORD *)(v31 + 72) = *(_DWORD *)(v30 + 8) + (v32 << 28);
                *(_WORD *)(v31 + 88) = v22;
                *(_WORD *)(v31 + 9sub_216195244(&a9, 0) = v22 + v36;
                unint64_t v23 = v42;
                uint64_t v25 = *v41;
                *(_DWORD *)(v31 + 8sub_216195244(&a9, 0) = *(_DWORD *)(*v41 + 4 * v42) + (v32 << 28);
                *(unsigned char *)(v31 + 11sub_216195244(&a9, 0) = v39;
                *(void *)(v31 + 24) = v12;
                unint64_t v24 = v43;
                uint64_t v12 = v31;
              }
              unint64_t v42 = ++v23;
            }
            while (v23 < v24);
          }
          ++v19;
        }
        while (v19 != v38);
      }
      char v15 = 1;
      uint64_t v16 = 1;
      char v7 = v18;
    }
    while ((v35 & 1) == 0);
  }
  return v12;
}

unsigned char *sub_21633D7C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned int v3 = *(_DWORD *)(a2 + 80);
  if (v3 >> 28 == 5)
  {
    uint64_t v4 = (uint64_t *)(a1 + 96);
  }
  else
  {
    if (v3 >> 28) {
      return sub_216184F68(a3, byte_216397FDE);
    }
    uint64_t v4 = (uint64_t *)(a1 + 88);
  }
  if (*v4) {
    return (unsigned char *)sub_2162F35E0(*v4, v3 & 0xFFFFFFF, a3);
  }
  return sub_216184F68(a3, byte_216397FDE);
}

uint64_t sub_21633D800(uint64_t result, uint64_t a2, unsigned __int16 *a3, std::string::size_type a4, void *a5, size_t a6, int a7, int a8)
{
  if (*(void *)(result + 1328)) {
    BOOL v8 = a8 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8 && a7 != 0 && a4 != 0 && (a8 | a7) != 0)
  {
    uint64_t v18 = result;
    uint64_t result = sub_21633D8E0(result, a2, a3, (uint64_t)a3 + a4, 0, a7, a8);
    if (result != 0x7FFF)
    {
      __int16 v19 = result - 1;
      uint64_t v20 = *(void *)(v18 + 1328);
      return sub_2161B916C(v20, (unsigned __int8 *)a3, a4, a5, a6, a7, a8, v19);
    }
  }
  return result;
}

uint64_t sub_21633D8E0(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  unint64_t v8 = a4 - (void)a3;
  if (a3) {
    unint64_t v9 = (unint64_t)(a4 - (void)a3) >> 1;
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v64 = &unk_26C6BE8C8;
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  char v67 = 0;
  uint64_t v10 = *(void *)(a1 + 1312);
  unsigned int v11 = a5 >> 7;
  unsigned int v12 = a5 >> 8;
  if (v10
    && (uint64_t v13 = *(void *)(v10 + 184)) != 0
    && (v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13), uint64_t v10 = *(void *)(a1 + 1312), v14))
  {
    char v15 = *(void ***)(v10 + 184);
  }
  else
  {
    sub_216336EA0(a3, v9, v11 & 0xE | v12 & 0x10 | (a5 >> 1) & 0x20, (int *)v10, *(CFArrayRef **)(a1 + 1320), (uint64_t)buf);
    sub_2161DDBC0((void ***)&v65);
    long long v65 = v69;
    uint64_t v66 = v70;
    unsigned int v70 = 0;
    char v67 = v71;
    *(void *)int buf = &unk_26C6BE8C8;
    long long v69 = 0uLL;
    *(void *)uint64_t v63 = &v69;
    sub_2161C4FA0((void ***)v63);
    char v15 = &v64;
  }
  std::string::value_type v57 = v15;
  uint64_t v16 = sub_2162D1CE4(5u);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_debug_impl(&dword_2160F5000, v16, OS_LOG_TYPE_DEBUG, "[TokenizerImpl::getMinimumCost]", buf, 2u);
  }
  uint64_t v17 = *(void **)(a1 + 8);
  if (v17 != *(void **)(a1 + 16))
  {
    if ((a5 & 0x200C4) == 0xC4) {
      int v18 = (((a5 >> 6) & 1) << 11) | 0x100;
    }
    else {
      int v18 = (32 * a5) & 0x800;
    }
    int v19 = (32 * a5) & 0x800 | ((v11 & 1) << 8);
    if ((a5 & 0x200C4) == 0xC4) {
      int v20 = 257;
    }
    else {
      int v20 = 1;
    }
    if ((a5 & 0x80000) != 0) {
      int v19 = v18;
    }
    int v21 = v19 | a5 & 0x1000;
    if ((a5 & 0x80000) == 0) {
      int v20 = ((v11 & 1) << 8) | 1;
    }
    int v22 = a5 & 0x1000 | v20;
    if ((a5 & 0x40) == 0) {
      int v21 = a5 & 0x1000 | ((v12 & 7) << 13) | ((v11 & 1) << 8);
    }
    unsigned int v23 = v22 & 0xFFFFF7FF | (((a5 >> 6) & 1) << 11);
    if ((a5 & 0x40) != 0) {
      int v24 = v23;
    }
    else {
      int v24 = a5 & 0x1000 | ((v12 & 7) << 13) | ((v11 & 1) << 8) | 1;
    }
    BOOL v25 = (a5 & 0x200C0) != 0xC0 || (a5 & 6) == 0;
    int v55 = v21;
    int v56 = (a5 >> 3) & 0x10000;
    if (v25) {
      int v26 = 0;
    }
    else {
      int v26 = 256;
    }
    int v54 = v21 & 0xF800 | v26;
    unsigned int v52 = v24 & 0xFFFFF8FF | v26;
    int v53 = v24;
    __int16 v27 = 0x7FFF;
    while (1)
    {
      if (*(_DWORD *)(*v17 + 380) == 3) {
        goto LABEL_78;
      }
      if ((a5 & 0x1700) == 0) {
        break;
      }
      uint64_t v28 = *(void *)(a2 + 136);
      __int16 v29 = sub_2161A2A80();
      int v30 = v55;
      if (!*v29) {
        int v30 = v54;
      }
      uint64_t v31 = *v17;
      *(void *)int buf = &unk_26C6B5590;
      unsigned int v70 = buf;
      uint64_t v32 = (*(uint64_t (**)(uint64_t, void, unsigned __int16 *, unint64_t, void **, void, void, uint64_t, uint64_t, uint8_t *, void, void))(*(void *)v31 + 88))(v31, v30 | v56, a3, v8, v57, 0, 0, v28, 512, buf, 0, 0);
      sub_2162F3B28(buf);
      if (v32)
      {
        for (uint64_t i = 0; i != v32; ++i)
        {
          uint64_t v34 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v17 + 136))(*v17, v28 + 24 * i);
          if (v34)
          {
            for (uint64_t j = 0; j != v34; ++j)
            {
              __int16 v36 = (__int16 *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v17 + 128))(*v17, v28 + 24 * i, j);
              if (*v36 < v27 && (v8 > 5 || (unsigned __int16)v36[1] == a6 && (unsigned __int16)v36[3] == a7)) {
                __int16 v27 = *v36;
              }
            }
          }
        }
        goto LABEL_59;
      }
      if ((a5 & 4) != 0)
      {
        uint64_t v42 = *(void *)(a2 + 136);
LABEL_64:
        unint64_t v44 = sub_2161A2A80();
        unsigned int v45 = v53;
        if (!*v44) {
          unsigned int v45 = v52;
        }
        uint64_t v43 = v45 | v56;
LABEL_67:
        uint64_t v46 = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *, unint64_t, void, void, void, uint64_t, uint64_t))(*(void *)*v17 + 80))(*v17, v43, a3, v8, 0, 0, 0, v42, 512);
        if (v46)
        {
          for (uint64_t k = 0; k != v46; ++k)
          {
            uint64_t v48 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v17 + 136))(*v17, v42 + 24 * k);
            if (v48)
            {
              for (uint64_t m = 0; m != v48; ++m)
              {
                int v50 = (__int16 *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v17 + 128))(*v17, v42 + 24 * k, m);
                if (*v50 < v27 && (v8 > 5 || (unsigned __int16)v50[1] == a6 && (unsigned __int16)v50[3] == a7)) {
                  __int16 v27 = *v50;
                }
              }
            }
          }
        }
      }
LABEL_78:
      if (++v17 == *(void **)(a1 + 16)) {
        goto LABEL_81;
      }
    }
    *(_WORD *)uint64_t v63 = 0;
    memset(&v63[4], 0, 20);
    uint64_t v37 = *v17;
    *(void *)int buf = &unk_26C6B5538;
    unsigned int v70 = buf;
    uint64_t v38 = (*(uint64_t (**)(uint64_t, void, unsigned __int16 *, unint64_t, void **, void, void, unsigned char *, uint64_t, uint8_t *, void, void))(*(void *)v37 + 88))(v37, 0, a3, v8, v57, 0, 0, v63, 1, buf, 0, 0);
    sub_2162F3B28(buf);
    if (v38)
    {
      uint64_t v39 = (*(uint64_t (**)(void, unsigned char *))(*(void *)*v17 + 136))(*v17, v63);
      if (v39)
      {
        for (uint64_t n = 0; n != v39; ++n)
        {
          uint64_t v41 = (__int16 *)(*(uint64_t (**)(void, unsigned char *, uint64_t))(*(void *)*v17 + 128))(*v17, v63, n);
          if (*v41 < v27 && (v8 > 5 || (unsigned __int16)v41[1] == a6 && (unsigned __int16)v41[3] == a7)) {
            __int16 v27 = *v41;
          }
        }
      }
    }
LABEL_59:
    if ((a5 & 4) != 0)
    {
      uint64_t v42 = *(void *)(a2 + 136);
      if ((a5 & 0x1700) != 0) {
        goto LABEL_64;
      }
      uint64_t v43 = 1;
      goto LABEL_67;
    }
    goto LABEL_78;
  }
  __int16 v27 = 0x7FFF;
LABEL_81:
  uint64_t v64 = &unk_26C6BE8C8;
  *(void *)int buf = &v65;
  sub_2161C4FA0((void ***)buf);
  return v27;
}

void sub_21633E010(_Unwind_Exception *a1)
{
  *(void *)(v2 - 144) = v1;
  sub_2161C4FA0((void ***)(v2 - 144));
  _Unwind_Resume(a1);
}

unint64_t sub_21633E074(uint64_t a1, const void *a2, size_t __n, int a4, int a5, unsigned int a6, void *__dst, unint64_t a8)
{
  unint64_t result = 0;
  if (__n && a4)
  {
    if (a6)
    {
      unint64_t result = sub_21633E0F4(a1, (uint64_t)a2, __n, a4, a5, a6, (uint64_t)__dst);
      if ((result > a8) | result & 1) {
        return 0;
      }
      else {
        return result;
      }
    }
    else if (a8 >= __n)
    {
      memcpy(__dst, a2, __n);
      return __n;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_21633E0F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7)
{
  char v7 = *(uint64_t **)(a1 + 8);
  unint64_t v8 = *(uint64_t **)(a1 + 16);
  if (v7 == v8) {
    return 0;
  }
  uint64_t v13 = a4 & 0xFFFFFFF;
  while (1)
  {
    uint64_t v14 = *v7;
    if (*(unsigned __int8 *)(*v7 + 792) == a5) {
      break;
    }
    if (++v7 == v8) {
      return 0;
    }
  }
  int v16 = (a6 >> 2) & 1;
  if ((a6 & 0x10000) != 0) {
    int v16 = 3;
  }
  int v17 = (32 * a6) & 0x800;
  int v18 = v16 | v17;
  unsigned int v19 = v16 & 0xFFFFFEFF | (((a6 >> 7) & 1) << 8);
  int v20 = v19 | (32 * a6) & 0xE000;
  int v21 = v19 | v17;
  int v22 = v21 | 0x100;
  if ((a6 & 0x200C4) != 0xC4) {
    int v22 = v18;
  }
  if ((a6 & 0x80000) != 0) {
    int v21 = v22;
  }
  if ((a6 & 0x40) != 0) {
    int v23 = v21;
  }
  else {
    int v23 = v20;
  }
  if (!*(unsigned char *)sub_2161A2A80())
  {
    if ((a6 & 6) != 0 && (a6 & 0x200C0) == 0xC0) {
      v23 |= 0x100u;
    }
    else {
      v23 &= ~0x100u;
    }
  }
  int v24 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 96);

  return v24(v14, v23 & 0xFFFFEFFF | (a6 >> 3) & 0x10000, a2, a3, v13, a7);
}

uint64_t sub_21633E25C(void *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  if (*(unsigned char *)(a2 + 109) == 11)
  {
    *a3 = sub_21619C158(a1[190], *(const UniChar **)(a2 + 48), (unint64_t)*(unsigned __int16 *)(a2 + 88) >> 1, *(_DWORD *)(a2 + 72), a4);
    uint64_t result = (2 * *a4);
    *a4 = result;
  }
  else
  {
    char v7 = (uint64_t *)a1[1];
    unint64_t v8 = (uint64_t *)a1[2];
    if (v7 != v8)
    {
      unsigned int v9 = *(_DWORD *)(a2 + 72) & 0xFFFFFFF;
      int v10 = *(unsigned __int8 *)(a2 + 108);
      while (*(unsigned __int8 *)(*v7 + 792) != v10)
      {
        if (++v7 == v8) {
          return *a4;
        }
      }
      *a3 = sub_2162F2000(*v7, v9, a4);
    }
    return *a4;
  }
  return result;
}

BOOL sub_21633E308(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[189];
  if (v2)
  {
    char v4 = *(unsigned char *)(*(void *)(a1[185] + (((unint64_t)(a1[188] + v2 - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                  + ((a1[188] + v2 - 1) & 0xFFF));
    a1[189] = v2 - 1;
    sub_216341E00(a1 + 184, 1);
    *(unsigned char *)(a2 + 792) = v4;
  }
  return v2 != 0;
}

uint64_t sub_21633E37C(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  while (v6 != v5)
  {
    unint64_t v8 = (void *)a1[7];
    char v7 = (void *)a1[8];
    if (v8 != v7)
    {
      while (*v8 != *(void *)v6)
      {
        if (++v8 == v7)
        {
          unint64_t v8 = (void *)a1[8];
          break;
        }
      }
    }
    if (v8 == v7)
    {
      v6 += 8;
    }
    else
    {
      if (*(void *)v6)
      {
        (*(void (**)(void))(**(void **)v6 + 8))(*(void *)v6);
        uint64_t v5 = (char *)a1[2];
      }
      int64_t v9 = v5 - (v6 + 8);
      if (v5 != v6 + 8) {
        memmove(v6, v6 + 8, v5 - (v6 + 8));
      }
      uint64_t v5 = &v6[v9];
      a1[2] = &v6[v9];
    }
  }
  a1[8] = a1[7];
  if (a3) {
    operator new();
  }
  return 1;
}

void sub_21633E7F0(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F3C40236A4E44);
  _Unwind_Resume(a1);
}

void sub_21633E81C(void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_216341BAC();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_2160FFAA8(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    unint64_t v8 = v14 + 8;
    int v17 = (char *)*a1;
    int v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *char v7 = *a2;
    unint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

BOOL sub_21633E8FC(void *a1, uint64_t a2)
{
  unint64_t v5 = (void *)a1[1];
  uint64_t v4 = (void *)a1[2];
  unint64_t v6 = (char **)(a1 + 1);
  if (v5 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        unint64_t v5 = (void *)a1[2];
        break;
      }
    }
  }
  if (v5 != v4) {
    return 0;
  }
  BOOL result = sub_21633E308(a1, a2);
  if (result)
  {
    unint64_t v8 = a1[3];
    uint64_t v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = ((char *)v9 - *v6) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        sub_216341BAC();
      }
      uint64_t v12 = v8 - (void)*v6;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        char v15 = (char *)sub_2160FFAA8((uint64_t)(a1 + 3), v14);
      }
      else {
        char v15 = 0;
      }
      int v16 = (uint64_t *)&v15[8 * v11];
      int v17 = &v15[8 * v14];
      uint64_t *v16 = a2;
      uint64_t v10 = v16 + 1;
      unsigned int v19 = (char *)a1[1];
      uint64_t v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *--int v16 = v20;
        }
        while (v18 != v19);
        uint64_t v18 = *v6;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *uint64_t v9 = a2;
      uint64_t v10 = v9 + 1;
    }
    a1[2] = v10;
    return 1;
  }
  return result;
}

uint64_t sub_21633EA28(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[1];
  if (v4 != v3)
  {
    while (*(void *)v4 != a2)
    {
      v4 += 8;
      if (v4 == v3)
      {
        uint64_t v4 = a1[2];
        break;
      }
    }
  }
  if (v4 == v3) {
    return 0;
  }
  if (*(unsigned __int8 *)(*(void *)v4 + 792) != 255)
  {
    char v7 = *(unsigned char *)(*(void *)v4 + 792);
    sub_216341E70(a1 + 184, &v7);
    uint64_t v3 = a1[2];
  }
  uint64_t v5 = v3 - (v4 + 8);
  if (v3 != v4 + 8) {
    memmove((void *)v4, (const void *)(v4 + 8), v3 - (v4 + 8));
  }
  a1[2] = v4 + v5;
  return 1;
}

uint64_t sub_21633EAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = 0;
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  do
  {
    while (1)
    {
      char v8 = v5;
      unsigned int v9 = sub_2162F20D4(v6, a2, a3);
      if (!v9) {
        break;
      }
      uint64_t result = *(unsigned int *)(*(void *)(v6 + 880) + 4 * v9);
      char v5 = 1;
      uint64_t v6 = v7;
      if (v8 & 1 | (result != 0)) {
        return result;
      }
    }
    char v5 = 1;
    uint64_t v6 = v7;
  }
  while ((v8 & 1) == 0);
  return 0;
}

uint64_t sub_21633EB6C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v9 = *(_OWORD *)(a1 + 88);
  while (1)
  {
    char v5 = v3;
    uint64_t v6 = *((void *)&v9 + v4);
    if (*(void *)(v6 + 896) > (unint64_t)a2)
    {
      int v7 = *(_DWORD *)(*(void *)(v6 + 888) + 4 * a2);
      if (v7) {
        break;
      }
    }
    char v3 = 1;
    uint64_t v4 = 1;
    if (v5) {
      return 0;
    }
  }

  return sub_2162F2000(v6, 4 * v7, a3);
}

uint64_t sub_21633EC34()
{
  unsigned __int16 v0 = (void *)MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  char v3 = v0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  sub_21633B2DC(v0);
  sub_21619EFA8(v2, "input-method-language", (uint64_t)__p);
  uint64_t v4 = (void **)(v3 + 181);
  if (*((char *)v3 + 1471) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
  v3[183] = v17;
  sub_21619EFA8(v2, "dicdir", (uint64_t)&v14);
  if (sub_2162527D0(v3 + 39, v2))
  {
    sub_2161B7248(v2, "open-mutable-dictionary");
    operator new();
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(v3[125] - 24) + 1000), 0);
  char v5 = sub_216129E78(v3 + 125, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
  sub_216129E78(v5, (uint64_t)"(", 1);
  uint64_t v6 = (void *)std::ostream::operator<<();
  int v7 = sub_216129E78(v6, (uint64_t)") [", 3);
  char v8 = sub_216129E78(v7, (uint64_t)"property_.open(param)", 21);
  long long v9 = sub_216129E78(v8, (uint64_t)"] ", 2);
  uint64_t v10 = (char *)sub_216178B54((uint64_t)(v3 + 88));
  sub_21610B834(__p, v10);
  if ((SBYTE7(v17) & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((SBYTE7(v17) & 0x80u) == 0) {
    uint64_t v12 = BYTE7(v17);
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  sub_216129E78(v9, (uint64_t)v11, v12);
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  return 0;
}

void sub_21634012C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21634033C(const char *a1, unsigned __int8 **a2)
{
  char v3 = a1;
  int64_t v4 = strlen(a1);
  if (v4 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = (unint64_t)&v3[v4];
  uint64_t v7 = 0x10000;
  do
  {
    unint64_t v8 = v7;
    for (uint64_t i = (unsigned __int8 *)v3; ; ++i)
    {
      int v10 = *i;
      if (v10 != 9 && v10 != 32) {
        break;
      }
      ++v3;
    }
    if (v10 == 34)
    {
      uint64_t v11 = ++i;
      uint64_t v12 = i;
      if ((unint64_t)i < v6)
      {
        uint64_t v11 = i;
        uint64_t v12 = i;
        do
        {
          int v13 = *v12;
          if (v13 == 34)
          {
            int v14 = *++v12;
            if (v14 != 34) {
              break;
            }
          }
          *v11++ = v13;
          ++v12;
        }
        while ((unint64_t)v12 < v6);
      }
      char v15 = (unsigned __int8 *)memchr(v12, 44, v6 - (void)v12);
      if (v15) {
        int v16 = v15;
      }
      else {
        int v16 = (unsigned __int8 *)v6;
      }
    }
    else
    {
      long long v17 = memchr(i, 44, v6 - (void)v3);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = (unsigned char *)v6;
      }
      int v16 = &i[v18 - v3];
      uint64_t v11 = v16;
    }
    uint64_t v7 = v8 - 1;
    if (v8 < 2)
    {
      *a2 = i;
      ++v5;
      if (v8 == 1) {
        return v5;
      }
    }
    else
    {
      *uint64_t v11 = 0;
      *a2 = i;
      ++v5;
    }
    ++a2;
    char v3 = (const char *)(v16 + 1);
  }
  while ((unint64_t)(v16 + 1) < v6);
  return v5;
}

void sub_21634047C(uint64_t a1, const char *a2)
{
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2000000000;
  char v4 = 1;
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = sub_216342094;
  v2[3] = &unk_26427D190;
  v2[6] = 10;
  v2[7] = "supplement";
  v2[8] = a2;
  v2[4] = v3;
  v2[5] = a1;
  sub_2161E2E5C(a2, (uint64_t)v2);
  _Block_object_dispose(v3, 8);
}

void sub_216340534(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t *sub_21634054C(uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21619B360(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

void sub_21634059C()
{
}

uint64_t sub_21634062C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  sub_21610B834(&__p, "max-grouping-size");
  char v3 = sub_216178FA4(v2, &__p);
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v3) {
    operator new();
  }
  if (*((char *)v3 + 79) < 0)
  {
    sub_21610A674(v12, v3[7], (unint64_t)v3[8]);
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)(v3 + 7);
    int v13 = v3[9];
  }
  sub_216140140((uint64_t)&__p);
  uint64_t v14 = 0;
  if (SHIBYTE(v13) >= 0) {
    char v4 = v12;
  }
  else {
    char v4 = (void **)v12[0];
  }
  if (SHIBYTE(v13) >= 0) {
    uint64_t v5 = HIBYTE(v13);
  }
  else {
    uint64_t v5 = (uint64_t)v12[1];
  }
  unint64_t v6 = sub_216129E78(v16, (uint64_t)v4, v5);
  if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0
    || (uint64_t v7 = (void *)MEMORY[0x2166CA4D0](&__p, &v14), (*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0)
    || (unint64_t v8 = sub_216179138(&__p), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 2) == 0))
  {
    operator new();
  }
  uint64_t v11 = v14;
  std::string __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v16 + *((void *)__p - 3)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v16[0] = v9;
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166CA750](&v18);
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  return v11;
}

void sub_216340960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2163409A4(void *a1)
{
  *a1 = &unk_26C6C5010;
  a1[1] = 0;
  sub_216340A34((int)a1, "");
}

void sub_2163409F0(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_26C6C4FB0;
  uint64_t v3 = v1[1];
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void sub_216340A34(int a1, char *__s)
{
}

void sub_216340AAC(void *a1)
{
  *a1 = &unk_26C6C4FB0;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C8077774924);
  }

  JUMPOUT(0x2166CA800);
}

void *sub_216340B28(void *a1)
{
  *a1 = &unk_26C6C4FB0;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  }
  return a1;
}

void sub_216340B84(void *a1)
{
  *a1 = &unk_26C6C4FB0;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C8077774924);
  }

  JUMPOUT(0x2166CA800);
}

void sub_216340C00(uint64_t a1)
{
  sub_216340D00(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216340C38(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4sub_216195244(&a9, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 4096;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216340D00(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C4F50;
  uint64_t v2 = a1 + 8;
  sub_216180AD8(a1 + 8);
  if (*(char *)(a1 + 679) < 0) {
    operator delete(*(void **)(a1 + 656));
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 392) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 392 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *(void *)(a1 + 40sub_216195244(&a9, 0) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 504);
  unint64_t v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 36sub_216195244(&a9, 0) = v5;
    operator delete(v5);
  }
  sub_21618098C(v2);
  return a1;
}

void sub_216340E64(void *a1)
{
  sub_216340E9C(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_216340E9C(void *a1)
{
  *a1 = &unk_26C6C52E0;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166CA7C0](v2[v5], 0x1070C802D7A0B02);
      unint64_t v5 = a1[5];
      uint64_t v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216340F44(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1000;
  unint64_t v4 = v2 - 4096;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)sub_216188754(v38);
      uint64_t v40 = &v39[8 * (v38 >> 2)];
      uint64_t v42 = &v39[8 * v41];
      uint64_t v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    char v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  unsigned int v19 = (char *)a1[3];
  int v21 = (char *)*a1;
  int v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    BOOL v25 = operator new(0x1000uLL);
    int v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      unsigned int v51 = (char *)sub_216188754(v49);
      int v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      int v53 = (uint64_t *)a1[1];
      int v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        int v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        std::string::value_type v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)std::string::value_type v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      std::string::value_type v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        int v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)sub_216188754(v82);
      uint64_t v40 = &v39[8 * (v82 >> 2)];
      uint64_t v42 = &v39[8 * v83];
      uint64_t v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        unsigned int v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)unsigned int v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      uint64_t v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  __int16 v29 = (char *)sub_216188754(v28);
  uint64_t v31 = v30;
  uint64_t v32 = operator new(0x1000uLL);
  int v33 = &v29[8 * v23];
  uint64_t v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      char v62 = (char *)sub_216188754(v61);
      int v33 = &v62[8 * (v61 >> 2)];
      uint64_t v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      __int16 v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)int v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        char v71 = (char *)sub_216188754(v70);
        uint64_t v73 = v71;
        int v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          unint64_t v77 = v33;
          unint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)unint64_t v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        uint64_t v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        __int16 v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        int v33 = &v29[8 * (v67 >> 1)];
        long long v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          long long v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  uint64_t v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_216341378(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_2163413A8()
{
}

void *sub_2163413BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6B5640;
  result[1] = v3;
  return result;
}

uint64_t sub_216341404(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6B5640;
  a2[1] = v2;
  return result;
}

void *sub_216341430(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  unint64_t v4 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  __int16 v6 = *a3;
  __int16 v7 = *a4;
  uint64_t v8 = **(void **)(a1 + 8);
  uint64_t v9 = (void *)sub_216341794(v8, v5);
  memcpy(v9, v4, 2 * v5);
  uint64_t result = sub_21634185C(v8);
  void *result = v9;
  *((_DWORD *)result + 2) = 2 * v5;
  *((_WORD *)result + 6) = v6;
  *((_WORD *)result + 7) = v7;
  return result;
}

uint64_t sub_2163414A8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B50D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2163414E8()
{
  return &unk_26C6B50D0;
}

void sub_2163414F8()
{
}

void *sub_21634150C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6B55E8;
  result[1] = v3;
  return result;
}

uint64_t sub_216341554(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6B55E8;
  a2[1] = v2;
  return result;
}

void *sub_216341580(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  unint64_t v4 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  __int16 v6 = *a3;
  __int16 v7 = *a4;
  uint64_t v8 = **(void **)(a1 + 8);
  uint64_t v9 = (void *)sub_216341794(v8, v5);
  memcpy(v9, v4, 2 * v5);
  uint64_t result = sub_21634185C(v8);
  void *result = v9;
  *((_DWORD *)result + 2) = 2 * v5;
  *((_WORD *)result + 6) = v6;
  *((_WORD *)result + 7) = v7;
  return result;
}

uint64_t sub_2163415F8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B50C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216341638()
{
  return &unk_26C6B50C0;
}

void sub_216341648()
{
}

void *sub_21634165C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6B54E0;
  result[1] = v3;
  return result;
}

uint64_t sub_2163416A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6B54E0;
  a2[1] = v2;
  return result;
}

void *sub_2163416D0(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  unint64_t v4 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  __int16 v6 = *a3;
  __int16 v7 = *a4;
  uint64_t v8 = **(void **)(a1 + 8);
  uint64_t v9 = (void *)sub_216341794(v8, v5);
  memcpy(v9, v4, 2 * v5);
  uint64_t result = sub_21634185C(v8);
  void *result = v9;
  *((_DWORD *)result + 2) = 2 * v5;
  *((_WORD *)result + 6) = v6;
  *((_WORD *)result + 7) = v7;
  return result;
}

uint64_t sub_216341748(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5090)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216341788()
{
  return &unk_26C6B5090;
}

uint64_t sub_216341794(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (!v2) {
    operator new();
  }

  return sub_216341914(v2, a2);
}

void *sub_21634185C(uint64_t a1)
{
  if (!*(void *)(a1 + 48)) {
    operator new();
  }
  uint64_t v1 = *(void **)(a1 + 48);

  return sub_216341BC4(v1);
}

uint64_t sub_216341914(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2] - v3;
  unint64_t v5 = a1[5];
  if (v5 >= v4 >> 4) {
LABEL_5:
  }
    operator new[]();
  uint64_t v6 = v4 >> 4;
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(v3 + 16 * v5 + 8);
  while ((unint64_t)(v7 + a2) >= *(v8 - 1))
  {
    uint64_t v7 = 0;
    ++v5;
    a1[4] = 0;
    a1[5] = v5;
    v8 += 2;
    if (v6 == v5) {
      goto LABEL_5;
    }
  }
  uint64_t result = *v8 + 2 * v7;
  a1[4] = v7 + a2;
  return result;
}

void sub_216341AC8(void *a1)
{
  sub_216341B00(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_216341B00(void *a1)
{
  *a1 = &unk_26C6B5268;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v3 = (char *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (*(void *)&v2[16 * v5 + 8])
    {
      MEMORY[0x2166CA7C0](*(void *)&v2[16 * v5 + 8], 0x1000C80BDFB0063);
      unint64_t v5 = a1[5];
      uint64_t v2 = (char *)a1[1];
      uint64_t v3 = (char *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < (v3 - v2) >> 4);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216341BAC()
{
}

void *sub_216341BC4(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = a1[4];
  if (v2 == a1[6])
  {
    uint64_t v2 = 0;
    ++v1;
    a1[4] = 0;
    a1[5] = v1;
  }
  uint64_t v3 = a1[1];
  if (v1 == (a1[2] - v3) >> 3) {
    operator new[]();
  }
  uint64_t v4 = *(void *)(v3 + 8 * v1);
  a1[4] = v2 + 1;
  uint64_t result = (void *)(v4 + 16 * v2);
  void *result = 0;
  result[1] = 0;
  return result;
}

void sub_216341D20(void *a1)
{
  sub_216341D58(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_216341D58(void *a1)
{
  *a1 = &unk_26C6B5288;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166CA7C0](v2[v5], 0x1050C80717B85FCLL);
      unint64_t v5 = a1[5];
      uint64_t v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_216341E00(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 9) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1000) {
    a2 = 1;
  }
  if (v5 < 0x2000) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_216341E70(void *a1, unsigned char *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_216340F44(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(unsigned char *)(*(void *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

void sub_216341F00()
{
}

void *sub_216341F14()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6B5590;
  return result;
}

void sub_216341F4C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6B5590;
}

uint64_t sub_216341F74()
{
  return 0;
}

uint64_t sub_216341F7C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B50B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216341FBC()
{
  return &unk_26C6B50B0;
}

void sub_216341FCC()
{
}

void *sub_216341FE0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C6B5538;
  return result;
}

void sub_216342018(uint64_t a1, void *a2)
{
  *a2 = &unk_26C6B5538;
}

uint64_t sub_216342040()
{
  return 0;
}

uint64_t sub_216342048(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B50A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216342088()
{
  return &unk_26C6B50A0;
}

unint64_t sub_216342094(uint64_t a1, char *__s)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t result = strlen(__s);
  unint64_t v5 = *(void *)(a1 + 48);
  if (result > v5)
  {
    unint64_t v6 = result;
    unint64_t result = strncmp(__s, *(const char **)(a1 + 56), *(void *)(a1 + 48));
    if (v5 >= 5 && result == 0)
    {
      unint64_t result = strncmp(&__s[v6 - 4], ".dic", 4uLL);
      if (!result) {
        operator new();
      }
    }
  }
  return result;
}

void sub_216342490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2163424F8(void *a1)
{
  *a1 = &unk_26C6C4DC8;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166CA800](v2, 0x1000C4000313F17);
  }
  return a1;
}

void sub_216342554(void *a1)
{
  *a1 = &unk_26C6C4DC8;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166CA800](v1, 0x1000C4000313F17);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2163425D0(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C4FF0;
  uint64_t v2 = (void **)(a1 + 1336);
  sub_21627D9C8((unsigned char *)(a1 + 1336));
  sub_21627D9C8((unsigned char *)(a1 + 1392));
  sub_21633B2DC((void *)a1);
  sub_21634054C((uint64_t **)(a1 + 1520), 0);
  sub_216340C38(a1 + 1472);
  if (*(char *)(a1 + 1471) < 0) {
    operator delete(*(void **)(a1 + 1448));
  }
  if (*(char *)(a1 + 1415) < 0) {
    operator delete(*(void **)(a1 + 1392));
  }
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(a1 + 1287) < 0) {
    operator delete(*(void **)(a1 + 1264));
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 100sub_216195244(&a9, 0) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 1000 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *(void *)(a1 + 1008) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 1095) < 0) {
    operator delete(*(void **)(a1 + 1072));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 1112);
  sub_216340D00(a1 + 312);
  unint64_t v5 = *(void **)(a1 + 272);
  if (v5)
  {
    *(void *)(a1 + 28sub_216195244(&a9, 0) = v5;
    operator delete(v5);
  }
  sub_216340E9C((void *)(a1 + 216));
  *(void *)(a1 + 20sub_216195244(&a9, 0) = &unk_26C6C4FB0;
  uint64_t v6 = *(void *)(a1 + 208);
  if (v6) {
    MEMORY[0x2166CA7C0](v6, 0x1000C8077774924);
  }
  *(void *)(a1 + 184) = &unk_26C6C4FB0;
  uint64_t v7 = *(void *)(a1 + 192);
  if (v7) {
    MEMORY[0x2166CA7C0](v7, 0x1000C8077774924);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  uint64_t v8 = *(void **)(a1 + 56);
  if (v8)
  {
    *(void *)(a1 + 64) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 32);
  if (v9)
  {
    *(void *)(a1 + 4sub_216195244(&a9, 0) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_21634283C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6C4DE8;
  *(_OWORD *)(a1 + 24) = xmmword_2163987B0;
  *(_DWORD *)(a1 + 4sub_216195244(&a9, 0) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 20sub_216195244(&a9, 0) = &unk_26C6C4C48;
  *(void *)(a1 + 208) = 0;
  operator new();
}

void sub_216342B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, uint64_t a11, uint64_t a12, void **a13, void **a14, uint64_t a15)
{
  BOOL v25 = (void *)v19[13];
  if (v25)
  {
    v19[14] = v25;
    operator delete(v25);
  }
  *char v17 = v16;
  if (*v20) {
    (*(void (**)(void))(*(void *)*v20 + 8))(*v20);
  }
  v19[9] = v18;
  uint64_t v26 = v19[10];
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  v19[7] = v21;
  uint64_t v27 = v19[8];
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  v19[5] = v24;
  uint64_t v28 = v19[6];
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  void v19[3] = v23;
  uint64_t v29 = v19[4];
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  v19[1] = v22;
  uint64_t v30 = v19[2];
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  MEMORY[0x2166CA800](v19, 0xB1C40213A2802);
  *(void *)(v15 + 20sub_216195244(&a9, 0) = a11;
  uint64_t v31 = *(void *)(v15 + 208);
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  a15 = a12;
  sub_216239B24((void ***)&a15);
  uint64_t v32 = *(void **)(v15 + 144);
  if (v32)
  {
    *(void *)(v15 + 152) = v32;
    operator delete(v32);
  }
  int v33 = *(void **)(v15 + 120);
  if (v33)
  {
    *(void *)(v15 + 128) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *a14;
  if (*a14)
  {
    *(void *)(v15 + 104) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *a13;
  if (*a13)
  {
    *(void *)(v15 + 8sub_216195244(&a9, 0) = v35;
    operator delete(v35);
  }
  if (*(char *)(v15 + 71) < 0) {
    operator delete(*a10);
  }
  _Unwind_Resume(a1);
}

void sub_216342DAC(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  if (!((*(void *)(a1 + 16) - *(void *)a1) >> 16))
  {
    uint64_t v3 = *(unsigned char **)(a1 + 8);
    uint64_t v4 = (char *)operator new(0x10000uLL);
    unint64_t v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v6 = v5;
    if (v3 != v1)
    {
      uint64_t v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v7 = *((void *)v3 - 1);
        v3 -= 8;
        *((void *)v6 - 1) = v7;
        v6 -= 8;
      }
      while (v3 != v1);
    }
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v4 + 0x10000;
    if (v1)
    {
      operator delete(v1);
    }
  }
}

void *sub_216342E50(void *a1)
{
  *a1 = &unk_26C6C4D28;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_216342EBC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C4DE8;
  *(void *)(a1 + 216) = &unk_26C6C4D28;
  uint64_t v2 = *(void *)(a1 + 224);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)(a1 + 20sub_216195244(&a9, 0) = &unk_26C6C4C48;
  uint64_t v3 = *(void *)(a1 + 208);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v9 = (void **)(a1 + 168);
  sub_216239B24(&v9);
  uint64_t v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(void *)(a1 + 152) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(void *)(a1 + 128) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(void *)(a1 + 104) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 8sub_216195244(&a9, 0) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  return a1;
}

void sub_216343000(uint64_t a1)
{
  sub_216342EBC(a1);

  JUMPOUT(0x2166CA800);
}

double sub_216343038(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 224);
  uint64_t v3 = v2[2];
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 4sub_216195244(&a9, 0) = 0;
  uint64_t v4 = v2[4];
  if (v4)
  {
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 4sub_216195244(&a9, 0) = 0;
  }
  uint64_t v5 = v2[6];
  if (v5)
  {
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 4sub_216195244(&a9, 0) = 0;
  }
  uint64_t v6 = v2[8];
  if (v6)
  {
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 4sub_216195244(&a9, 0) = 0;
  }
  uint64_t v7 = v2[10];
  if (v7)
  {
    *(void *)(v7 + 32) = 0;
    *(void *)(v7 + 4sub_216195244(&a9, 0) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 208);
  if (v8) {
    *(void *)(v8 + 8) = 0;
  }
  *(void *)(a1 + 104) = *(void *)(a1 + 96);
  *(void *)(a1 + 8sub_216195244(&a9, 0) = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 168);
  uint64_t v9 = *(void *)(a1 + 176);
  if (v9 != v10)
  {
    do
    {
      uint64_t v11 = v9 - 24;
      sub_21612A250(v9 - 24, *(void **)(v9 - 16));
      uint64_t v9 = v11;
    }
    while (v11 != v10);
  }
  *(void *)(a1 + 176) = v10;
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(void *)(a1 + 152) = *(void *)(a1 + 144);
  double result = 0.75;
  *(_OWORD *)(a1 + 24) = xmmword_2163987B0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 232) = 0;
  return result;
}

uint64_t sub_216343108(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = *(uint64_t (**)(uint64_t, char *, size_t))(*(void *)a1 + 80);

  return v5(a1, __s, v4);
}

void sub_216343170(void *a1, const void *a2, size_t a3)
{
  uint64_t v6 = a1 + 9;
  (*(void (**)(void *))*a1)(a1);
  unint64_t v7 = a3 + 4;
  sub_216343430(v6, a3 + 4);
  uint64_t v9 = a1[21];
  uint64_t v8 = a1[22];
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
  unint64_t v11 = a3 + 4 - v10;
  if (a3 + 4 <= v10)
  {
    if (v7 < v10)
    {
      uint64_t v20 = v9 + 24 * v7;
      if (v8 != v20)
      {
        do
        {
          uint64_t v21 = v8 - 24;
          sub_21612A250(v8 - 24, *(void **)(v8 - 16));
          uint64_t v8 = v21;
        }
        while (v21 != v20);
      }
      a1[22] = v20;
    }
  }
  else
  {
    uint64_t v12 = a1[23];
    if (0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3) >= v11)
    {
      uint64_t v22 = v8 + 24 * v11;
      uint64_t v23 = 24 * a3 - 24 * v10 + 96;
      uint64_t v24 = (void *)(v8 + 8);
      do
      {
        void *v24 = 0;
        v24[1] = 0;
        *(v24 - 1) = v24;
        v24 += 3;
        v23 -= 24;
      }
      while (v23);
      a1[22] = v22;
    }
    else
    {
      if (v7 > 0xAAAAAAAAAAAAAAALL) {
        sub_21610CB04();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v9) >> 3);
      uint64_t v14 = 2 * v13;
      if (2 * v13 <= v7) {
        uint64_t v14 = a3 + 4;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v14;
      }
      uint64_t v32 = a1 + 23;
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        sub_2160FFA74();
      }
      uint64_t v16 = 3 * v15;
      char v17 = (char *)operator new(24 * v15);
      uint64_t v28 = v17;
      uint64_t v29 = &v17[24 * v10];
      uint64_t v31 = &v17[8 * v16];
      uint64_t v18 = 24 * a3 - 24 * v10 + 96;
      unsigned int v19 = v29 + 8;
      do
      {
        *unsigned int v19 = 0;
        v19[1] = 0;
        *(v19 - 1) = v19;
        v19 += 3;
        v18 -= 24;
      }
      while (v18);
      uint64_t v30 = &v17[24 * v7];
      sub_216239BC8(a1 + 21, &v28);
      sub_216344CF8((uint64_t)&v28);
    }
  }
  sub_216343430(a1 + 12, a3 + 4);
  if (((*(uint64_t (**)(void *, uint64_t))(*a1 + 168))(a1, 64) & 1) != 0
    || (*(unsigned int (**)(void *, uint64_t))(*a1 + 168))(a1, 4))
  {
    uint64_t v25 = (*(uint64_t (**)(void *))(*a1 + 200))(a1);
    uint64_t v26 = (void *)sub_2163457F4(v25, a3);
    memcpy(v26, a2, a3);
    a2 = v26;
  }
  a1[1] = a2;
  a1[2] = a3;
  bzero((void *)a1[9], 8 * v7);
  uint64_t v27 = (void *)a1[12];

  bzero(v27, 8 * v7);
}

void sub_216343430(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  size_t v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v20 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    uint64_t v20 = &v4[8 * v6];
LABEL_19:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61) {
    sub_21610CB04();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 2;
  if (v9 >> 2 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v12 = (char *)sub_2160FFAA8(v7, v11);
  unint64_t v13 = &v12[8 * v5];
  unint64_t v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  uint64_t v16 = &v13[8 * v6];
  uint64_t v18 = (char *)*a1;
  char v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      uint64_t v19 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    char v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
  {
    operator delete(v17);
  }
}

uint64_t sub_216343544()
{
  return 1;
}

uint64_t sub_21634354C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 232) = a2;
  return result;
}

uint64_t sub_216343554(void *a1)
{
  if (!a1[29]) {
    return 0;
  }
  uint64_t v1 = (*(uint64_t (**)(void *))(*a1 + 200))(a1);
  uint64_t v2 = (void *)sub_2161CAE14(v1);

  return sub_216194984(v2);
}

void sub_2163435B4(uint64_t a1, const char *a2)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  size_t v5 = strlen(a2) + 1;
  unint64_t v6 = (char *)sub_2163457F4(v4, v5);
  strncpy(v6, a2, v5);
  uint64_t v89 = 0;
  int v90 = 0;
  uint64_t v91 = 0;
  size_t v7 = strlen(a2);
  unsigned int v92 = (void **)v6;
  size_t v8 = strlen(v6);
  if (v7)
  {
    size_t v9 = 0;
    uint64_t v10 = &v6[v8];
    while (1)
    {
      unint64_t v11 = v10;
      if (v6 != v10)
      {
        while (*v6 != 10)
        {
          if (++v6 == v10)
          {
            unint64_t v11 = v10;
            goto LABEL_8;
          }
        }
        unint64_t v11 = v6;
      }
LABEL_8:
      *unint64_t v11 = 0;
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
      sub_2161C0344((void ***)&v88, &v92);
      ++v9;
      if (v11 == v10) {
        break;
      }
      unint64_t v6 = v11 + 1;
      unsigned int v92 = (void **)(v11 + 1);
      if (v9 == v7)
      {
        size_t v9 = v7;
        break;
      }
    }
    uint64_t v12 = v89;
    unint64_t v13 = v90;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    size_t v9 = 0;
  }
  if (v9 != (v13 - (unsigned char *)v12) >> 3)
  {
    uint64_t v14 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/lattice_impl.cpp", 69);
    sub_216129E78(v14, (uint64_t)"(", 1);
    unint64_t v15 = (void *)std::ostream::operator<<();
    uint64_t v16 = sub_216129E78(v15, (uint64_t)") [", 3);
    char v17 = sub_216129E78(v16, (uint64_t)"lsize == lines.size()", 21);
    sub_216129E78(v17, (uint64_t)"] ", 2);
    sub_21619FA48();
  }
  memset(&v88, 0, sizeof(v88));
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  unint64_t v87 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  unint64_t v84 = 0;
  if (v13 != (unsigned char *)v12)
  {
    unint64_t v18 = 0;
    while (2)
    {
      uint64_t v19 = (const char *)v12[v18];
      if (strcmp("EOS", v19))
      {
        __int16 v97 = 0;
        uint64_t v98 = 0;
        size_t v20 = strlen(v19);
        uint64_t v21 = 0;
        uint64_t v22 = &v19[v20];
        uint64_t v23 = (const char **)&v97;
        while (v19 != v22)
        {
          uint64_t v24 = v19;
          while (*v24 != 9)
          {
            if (++v24 == v22) {
              goto LABEL_27;
            }
          }
          const char *v24 = 0;
          *v23++ = v19;
          ++v21;
          uint64_t v19 = v24 + 1;
          if (v21 == 2) {
            goto LABEL_28;
          }
        }
        uint64_t v19 = v22;
LABEL_27:
        *uint64_t v22 = 0;
        void *v23 = v19;
        if (v21 != 1) {
          break;
        }
LABEL_28:
        uint64_t v25 = v97;
        std::string::size_type v26 = strlen(v97);
        std::string::append(&v88, v97, v26);
        sub_21610B834(__p, v25);
        uint64_t v27 = v86;
        if ((unint64_t)v86 >= v87)
        {
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v86[-v85] >> 3);
          unint64_t v30 = v29 + 1;
          if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21610CB04();
          }
          if (0x5555555555555556 * ((uint64_t)(v87 - v85) >> 3) > v30) {
            unint64_t v30 = 0x5555555555555556 * ((uint64_t)(v87 - v85) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - v85) >> 3) >= 0x555555555555555) {
            unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v31 = v30;
          }
          unint64_t v96 = &v87;
          if (v31) {
            uint64_t v32 = (void **)sub_216129BFC((uint64_t)&v87, v31);
          }
          else {
            uint64_t v32 = 0;
          }
          int v33 = &v32[3 * v29];
          unsigned int v92 = v32;
          __int16 v93 = v33;
          int v95 = &v32[3 * v31];
          long long v34 = *(_OWORD *)__p;
          void v33[2] = v81;
          *(_OWORD *)int v33 = v34;
          __p[1] = 0;
          uint64_t v81 = 0;
          __p[0] = 0;
          uint64_t v94 = v33 + 3;
          sub_21613FBD0(&v85, &v92);
          uint64_t v35 = v86;
          sub_21613FD68((uint64_t)&v92);
          uint64_t v86 = v35;
          if (SHIBYTE(v81) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v28 = *(_OWORD *)__p;
          *((void *)v86 + 2) = v81;
          *uint64_t v27 = v28;
          uint64_t v86 = (char *)v27 + 24;
        }
        sub_21610B834(__p, v98);
        uint64_t v36 = v83;
        if ((unint64_t)v83 >= v84)
        {
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v83[-v82] >> 3);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21610CB04();
          }
          if (0x5555555555555556 * ((uint64_t)(v84 - v82) >> 3) > v39) {
            unint64_t v39 = 0x5555555555555556 * ((uint64_t)(v84 - v82) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - v82) >> 3) >= 0x555555555555555) {
            unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v40 = v39;
          }
          unint64_t v96 = &v84;
          if (v40) {
            uint64_t v41 = (void **)sub_216129BFC((uint64_t)&v84, v40);
          }
          else {
            uint64_t v41 = 0;
          }
          uint64_t v42 = &v41[3 * v38];
          unsigned int v92 = v41;
          __int16 v93 = v42;
          int v95 = &v41[3 * v40];
          long long v43 = *(_OWORD *)__p;
          v42[2] = v81;
          *(_OWORD *)uint64_t v42 = v43;
          __p[1] = 0;
          uint64_t v81 = 0;
          __p[0] = 0;
          uint64_t v94 = v42 + 3;
          sub_21613FBD0(&v82, &v92);
          uint64_t v44 = v83;
          sub_21613FD68((uint64_t)&v92);
          uint64_t v83 = v44;
          if (SHIBYTE(v81) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v37 = *(_OWORD *)__p;
          *((void *)v83 + 2) = v81;
          *uint64_t v36 = v37;
          uint64_t v83 = (char *)v36 + 24;
        }
        ++v18;
        uint64_t v12 = v89;
        if (v18 < (v90 - (unsigned char *)v89) >> 3) {
          continue;
        }
      }
      break;
    }
  }
  if (&v83[-v82] != &v86[-v85])
  {
    uint64_t v45 = sub_216129E78(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/lattice_impl.cpp", 69);
    sub_216129E78(v45, (uint64_t)"(", 1);
    uint64_t v46 = (void *)std::ostream::operator<<();
    uint64_t v47 = sub_216129E78(v46, (uint64_t)") [", 3);
    uint64_t v48 = sub_216129E78(v47, (uint64_t)"features.size() == surfaces.size()", 34);
    sub_216129E78(v48, (uint64_t)"] ", 2);
    sub_21619FA48();
  }
  uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  int v51 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
  std::string::size_type v52 = v88.__r_.__value_.__r.__words[0];
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v88.__r_.__value_.__l.__size_;
  }
  size_t v53 = size + 1;
  int v54 = (char *)sub_2163457F4(v49, size + 1);
  uint64_t v55 = v54;
  if (v51 >= 0) {
    uint64_t v56 = &v88;
  }
  else {
    uint64_t v56 = (std::string *)v52;
  }
  strncpy(v54, (const char *)v56, v53);
  (*(void (**)(uint64_t, char *))(*(void *)a1 + 72))(a1, v55);
  uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  sub_216178D90(*(void **)(v57 + 16));
  uint64_t v59 = v58;
  *(_OWORD *)(v58 + 8sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(v58 + 96) = 0u;
  *(_OWORD *)(v58 + 48) = 0u;
  *(_OWORD *)(v58 + 64) = 0u;
  *(_OWORD *)(v58 + 16) = 0u;
  *(_OWORD *)(v58 + 32) = 0u;
  *(_OWORD *)uint64_t v58 = 0u;
  *(void *)(v58 + 48) = "BOS/EOS";
  *(void *)(v58 + 56) = "BOS/EOS";
  *(unsigned char *)(v58 + 109) = 2;
  uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  sub_216178D90(*(void **)(v60 + 16));
  char v62 = (void *)v61;
  *(_OWORD *)(v61 + 8sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(v61 + 96) = 0u;
  *(_OWORD *)(v61 + 48) = 0u;
  *(_OWORD *)(v61 + 64) = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_OWORD *)(v61 + 32) = 0u;
  *(_OWORD *)uint64_t v61 = 0u;
  *(void *)(v61 + 48) = "BOS/EOS";
  *(void *)(v61 + 56) = "BOS/EOS";
  *(unsigned char *)(v61 + 109) = 3;
  *(void *)(v59 + 48) = *(void *)(a1 + 8);
  **(void **)(a1 + 72) = v59;
  if (v86 == (char *)v85)
  {
    uint64_t v68 = v59;
  }
  else
  {
    uint64_t v63 = 0;
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    do
    {
      uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      sub_216178D90(*(void **)(v66 + 16));
      uint64_t v68 = v67;
      *(void *)(v67 + 104) = 0;
      *(_OWORD *)(v67 + 88) = 0u;
      *(_OWORD *)(v67 + 72) = 0u;
      *(_OWORD *)(v67 + 56) = 0u;
      *(_OWORD *)(v67 + 4sub_216195244(&a9, 0) = 0u;
      *(_OWORD *)(v67 + 24) = 0u;
      *(_OWORD *)(v67 + 8) = 0u;
      *(void *)uint64_t v67 = v59;
      *(void *)(v59 + 8) = v67;
      *(void *)(v67 + 48) = *(void *)(a1 + 8) + v65;
      uint64_t v69 = v85;
      uint64_t v70 = v85 + v63;
      if (*(char *)(v85 + v63 + 23) < 0) {
        uint64_t v71 = *(void *)(v70 + 8);
      }
      else {
        LOWORD(v71) = *(unsigned __int8 *)(v85 + v63 + 23);
      }
      *(_WORD *)(v67 + 88) = v71;
      int v72 = *(char *)(v70 + 23);
      if (v72 < 0) {
        uint64_t v73 = *(void *)(v69 + v63 + 8);
      }
      else {
        LOWORD(v73) = v72;
      }
      *(_WORD *)(v67 + 9sub_216195244(&a9, 0) = v73;
      *(unsigned char *)(v67 + 109) = 0;
      *(_WORD *)(v67 + 84) = 0;
      *(void *)(v67 + 96) = 0;
      uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      uint64_t v75 = v82 + v63;
      if (*(char *)(v82 + v63 + 23) < 0)
      {
        unint64_t v77 = *(const char **)v75;
        uint64_t v76 = *(void *)(v75 + 8);
      }
      else
      {
        uint64_t v76 = *(unsigned __int8 *)(v82 + v63 + 23);
        unint64_t v77 = (const char *)(v82 + v63);
      }
      size_t v78 = v76 + 1;
      uint64_t v79 = (char *)sub_2163457F4(v74, v76 + 1);
      *(void *)(v68 + 56) = strncpy(v79, v77, v78);
      *(void *)(*(void *)(a1 + 96) + 8 * v65) = v68;
      v65 += *(unsigned __int16 *)(v68 + 88);
      *(void *)(*(void *)(a1 + 72) + 8 * v65) = v68;
      ++v64;
      v63 += 24;
      uint64_t v59 = v68;
    }
    while (v64 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v86[-v85] >> 3));
  }
  *(void *)(v68 + 8) = v62;
  void *v62 = v68;
  unsigned int v92 = (void **)&v82;
  sub_21613EFD0(&v92);
  unsigned int v92 = (void **)&v85;
  sub_21613EFD0(&v92);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (v89)
  {
    int v90 = v89;
    operator delete(v89);
  }
}

void sub_216343E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  a9 = &a15;
  sub_21613EFD0((void ***)&a9);
  a15 = &a18;
  sub_21613EFD0((void ***)&a15);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216343ED0(void *a1)
{
  uint64_t v2 = sub_216343FD0((uint64_t)a1);

  return sub_216343F0C(a1, v2);
}

uint64_t sub_216343F0C(void *a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[24];
  if (v4)
  {
    if ((sub_21634734C(v4, (uint64_t)a1, a2) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    sub_2163440E8((uint64_t)a1, a2);
  }
  if (sub_2161C9CF4(a2, 1)) {
    *(unsigned char *)(*(void *)(a2 + 24) + (*(void *)(a2 + 8))++) = 0;
  }
  if (*(unsigned char *)(a2 + 33) || (uint64_t result = *(void *)(a2 + 24)) == 0)
  {
    (*(void (**)(void *, const char *))(*a1 + 320))(a1, "output buffer overflow");
    return 0;
  }
  return result;
}

uint64_t sub_216343FD0(uint64_t a1)
{
  if (!*(void *)(a1 + 208)) {
    operator new();
  }
  return *(void *)(a1 + 208);
}

uint64_t sub_216344070(void *a1, uint64_t a2, uint64_t a3)
{
  v5[0] = &unk_26C6C4F70;
  v5[1] = 0;
  v5[2] = a3;
  v5[3] = a2;
  __int16 v6 = 0;
  uint64_t v3 = sub_216343F0C(a1, (uint64_t)v5);
  sub_2161C9DD8((uint64_t)v5);
  return v3;
}

void sub_2163440D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161C9DD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2163440E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) + 8);
  uint64_t v4 = (uint64_t *)(v3 + 8);
  if (*(void *)(v3 + 8))
  {
    do
    {
      size_t v5 = *(const void **)(v3 + 48);
      size_t v6 = *(unsigned __int16 *)(v3 + 88);
      if (sub_2161C9CF4(a2, v6))
      {
        memcpy((void *)(*(void *)(a2 + 24) + *(void *)(a2 + 8)), v5, v6);
        *(void *)(a2 + 8) += v6;
      }
      if (sub_2161C9CF4(a2, 1)) {
        *(unsigned char *)(*(void *)(a2 + 24) + (*(void *)(a2 + 8))++) = 9;
      }
      uint64_t v7 = sub_2161C9E7C(a2, *(char **)(v3 + 56));
      if (sub_2161C9CF4(v7, 1)) {
        *(unsigned char *)(*(void *)(a2 + 24) + (*(void *)(a2 + 8))++) = 10;
      }
      uint64_t v3 = *v4;
      uint64_t v8 = *v4;
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v4 = (uint64_t *)(v8 + 8);
    }
    while (v9);
  }

  return sub_2161C9E7C(a2, "EOS\n");
}

uint64_t sub_21634421C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_216343FD0((uint64_t)a1);

  return sub_216344260(a1, a2, v4);
}

uint64_t sub_216344260(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 8) = 0;
  if (!a2)
  {
    uint64_t v7 = "node is NULL";
LABEL_15:
    (*(void (**)(void *, const char *))(*a1 + 320))(a1, v7);
    return 0;
  }
  uint64_t v6 = a1[24];
  if (v6)
  {
    if ((sub_2163485C8(v6, (uint64_t)a1, a2) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = *(const void **)(a2 + 48);
    size_t v9 = *(unsigned __int16 *)(a2 + 88);
    if (sub_2161C9CF4(a3, v9))
    {
      memcpy((void *)(*(void *)(a3 + 24) + *(void *)(a3 + 8)), v8, v9);
      *(void *)(a3 + 8) += v9;
    }
    if (sub_2161C9CF4(a3, 1)) {
      *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 9;
    }
    sub_2161C9E7C(a3, *(char **)(a2 + 56));
  }
  if (sub_2161C9CF4(a3, 1)) {
    *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 0;
  }
  if (*(unsigned char *)(a3 + 33) || (uint64_t result = *(void *)(a3 + 24)) == 0)
  {
    uint64_t v7 = "output buffer overflow";
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_2163443B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = &unk_26C6C4F70;
  v6[1] = 0;
  void v6[2] = a4;
  v6[3] = a3;
  __int16 v7 = 0;
  uint64_t v4 = sub_216344260(a1, a2, (uint64_t)v6);
  sub_2161C9DD8((uint64_t)v6);
  return v4;
}

void sub_21634441C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161C9DD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216344430(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_216343FD0((uint64_t)a1);

  return sub_216344474(a1, a2, v4);
}

uint64_t sub_216344474(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 8) = 0;
  if ((unint64_t)(a2 - 513) < 0xFFFFFFFFFFFFFE00)
  {
    uint64_t v4 = "nbest size must be 1 <= nbest <= 512";
LABEL_17:
    (*(void (**)(uint64_t *, const char *))(*a1 + 320))(a1, v4);
    return 0;
  }
  uint64_t v6 = a2;
  do
  {
    if (!(*(unsigned int (**)(uint64_t *))(*a1 + 128))(a1)) {
      break;
    }
    uint64_t v7 = a1[24];
    if (v7)
    {
      if ((sub_21634734C(v7, (uint64_t)a1, a3) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      sub_2163440E8((uint64_t)a1, a3);
    }
    --v6;
  }
  while (v6);
  if (a1[24])
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    memset(v10, 0, sizeof(v10));
    BYTE13(v14) = 4;
    uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
    *(void *)&long long v11 = v8 + (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
    if (!sub_2163485C8(a1[24], (uint64_t)a1, (uint64_t)v10)) {
      return 0;
    }
  }
  if (sub_2161C9CF4(a3, 1)) {
    *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 0;
  }
  if (*(unsigned char *)(a3 + 33) || (uint64_t result = *(void *)(a3 + 24)) == 0)
  {
    uint64_t v4 = "output buffer overflow";
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_216344630(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = &unk_26C6C4F70;
  v6[1] = 0;
  void v6[2] = a4;
  v6[3] = a3;
  __int16 v7 = 0;
  uint64_t v4 = sub_216344474(a1, a2, (uint64_t)v6);
  sub_2161C9DD8((uint64_t)v6);
  return v4;
}

void sub_216344694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161C9DD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2163446A8(uint64_t a1)
{
  return *(void *)(a1 + 144) != *(void *)(a1 + 152);
}

uint64_t sub_2163446B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 144);
  if (v2 == *(void *)(a1 + 152)) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v2 + a2);
  }
}

uint64_t sub_2163446D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2 == *(void *)(a1 + 128)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * a2);
  }
}

void sub_2163446F0(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(a1 + 144);
  size_t v5 = (void **)(a1 + 144);
  if (v6 == *(void *)(a1 + 152))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    unint64_t v9 = v8 + 4;
    unint64_t v6 = *(void *)(a1 + 144);
    uint64_t v10 = *(char **)(a1 + 152);
    size_t v11 = v8 + 4 - (void)&v10[-v6];
    if (v8 + 4 <= (unint64_t)&v10[-v6])
    {
      if (v8 + 4 < (unint64_t)&v10[-v6]) {
        *(void *)(a1 + 152) = v6 + v9;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 160);
      if (v12 - (uint64_t)v10 >= v11)
      {
        bzero(*(void **)(a1 + 152), v11);
        *(void *)(a1 + 152) = &v10[v11];
      }
      else
      {
        if ((v9 & 0x8000000000000000) != 0) {
          sub_21610CB04();
        }
        unint64_t v13 = v12 - v6;
        uint64_t v14 = 2 * v13;
        if (2 * v13 <= v9) {
          uint64_t v14 = v8 + 4;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v15 = v14;
        }
        size_t v21 = v15;
        uint64_t v16 = (char *)operator new(v15);
        bzero(&v10[(void)v16 - v6], v11);
        char v17 = &v16[v9];
        unint64_t v18 = &v16[v21];
        if (v10 == (char *)v6)
        {
          uint64_t v16 = &v10[(void)v16 - v6];
        }
        else
        {
          uint64_t v19 = &v10[~v6];
          do
          {
            char v20 = *--v10;
            (v19--)[(void)v16] = v20;
          }
          while (v10 != (char *)v6);
          uint64_t v10 = (char *)*v5;
        }
        *(void *)(a1 + 144) = v16;
        *(void *)(a1 + 152) = v17;
        *(void *)(a1 + 16sub_216195244(&a9, 0) = v18;
        if (v10) {
          operator delete(v10);
        }
      }
      unint64_t v6 = (unint64_t)*v5;
    }
  }
  *(unsigned char *)(v6 + a2) = a3;
}

void **sub_216344860(void **result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 >= a3 || !a4) {
    return result;
  }
  unint64_t v5 = a3;
  __int16 v7 = result;
  uint64_t v8 = result + 15;
  if (result[15] == result[16])
  {
    uint64_t v9 = (*((uint64_t (**)(void **))*result + 11))(result);
    unint64_t v10 = v9 + 4;
    size_t v11 = v7[15];
    uint64_t v12 = v7[16];
    uint64_t v13 = v12 - v11;
    unint64_t v14 = (v12 - v11) >> 3;
    if (v9 + 4 > v14)
    {
      size_t v15 = v7[17];
      if (v10 - v14 > (v15 - v12) >> 3)
      {
        uint64_t v30 = v9;
        if (v10 >> 61) {
          sub_21610CB04();
        }
        uint64_t v16 = v15 - v11;
        uint64_t v17 = v16 >> 2;
        if (v16 >> 2 <= v10) {
          uint64_t v17 = v9 + 4;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        uint64_t v19 = (char *)sub_2160FFAA8((uint64_t)(v7 + 17), v18);
        uint64_t v29 = v20;
        size_t v21 = &v19[8 * v14];
        uint64_t v22 = v19;
        bzero(v21, ((8 * v30 - v13 + 24) & 0xFFFFFFFFFFFFFFF8) + 8);
        uint64_t v24 = (char *)v7[15];
        uint64_t v23 = (char *)v7[16];
        if (v23 != v24)
        {
          do
          {
            uint64_t v25 = *((void *)v23 - 1);
            v23 -= 8;
            *((void *)v21 - 1) = v25;
            v21 -= 8;
          }
          while (v23 != v24);
          uint64_t v23 = (char *)*v8;
        }
        v7[15] = v21;
        v7[16] = &v22[8 * v10];
        v7[17] = &v22[8 * v29];
        if (v23) {
          operator delete(v23);
        }
        goto LABEL_21;
      }
      bzero(v7[16], ((8 * v9 - v13 + 24) & 0xFFFFFFFFFFFFFFF8) + 8);
      std::string::size_type v26 = &v12[8 * (v10 - v14)];
      goto LABEL_20;
    }
    if (v10 < v14)
    {
      std::string::size_type v26 = &v11[8 * v10];
LABEL_20:
      v7[16] = v26;
    }
  }
LABEL_21:
  unint64_t v27 = (*((uint64_t (**)(void **))*v7 + 11))(v7);
  if (v27 < v5) {
    unint64_t v5 = v27;
  }
  (*((void (**)(void **, unint64_t, uint64_t))*v7 + 36))(v7, a2, 1);
  uint64_t result = (void **)(*((uint64_t (**)(void **, unint64_t, uint64_t))*v7 + 36))(v7, v5, 1);
  unint64_t v28 = a2 + 1;
  if (a2 + 1 < v5)
  {
    do
      uint64_t result = (void **)(*((uint64_t (**)(void **, unint64_t, uint64_t))*v7 + 36))(v7, v28++, 2);
    while (v5 != v28);
  }
  *((void *)*v8 + a2) = a4;
  return result;
}

void sub_216344B04()
{
}

void sub_216344B48(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10F3C4086B49158);
  _Unwind_Resume(a1);
}

BOOL sub_216344B6C(void *a1)
{
  return a1[1] && a1[12] != a1[13] && a1[9] != a1[10];
}

uint64_t sub_216344B98(uint64_t a1)
{
  return **(void **)(a1 + 72);
}

uint64_t sub_216344BA4(void *a1)
{
  return *(void *)(a1[12] + 8 * (*(uint64_t (**)(void *))(*a1 + 88))(a1));
}

uint64_t sub_216344BF0(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t sub_216344BF8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_216344C00(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 72) + 8 * a2);
}

uint64_t sub_216344C0C(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 96) + 8 * a2);
}

uint64_t sub_216344C18(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_216344C20(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_216344C28(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

double sub_216344C30(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double sub_216344C38(uint64_t a1, float a2)
{
  double result = a2;
  *(double *)(a1 + 24) = result;
  return result;
}

float sub_216344C44(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t sub_216344C50(uint64_t a1)
{
  return *(void *)(a1 + 232);
}

uint64_t sub_216344C58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL sub_216344C60(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 40) & a2) != 0;
}

uint64_t sub_216344C70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4sub_216195244(&a9, 0) = a2;
  return result;
}

uint64_t sub_216344C78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) |= a2;
  return result;
}

uint64_t sub_216344C88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) &= ~a2;
  return result;
}

uint64_t sub_216344C98(uint64_t a1)
{
  return *(void *)(a1 + 224);
}

double sub_216344CA0(uint64_t a1)
{
  sub_216178D90(*(void **)(*(void *)(a1 + 224) + 16));
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  return result;
}

uint64_t sub_216344CD4(uint64_t a1)
{
  uint64_t result = a1 + 48;
  if (*(char *)(a1 + 71) < 0) {
    return *(void *)result;
  }
  return result;
}

std::string *sub_216344CF0(std::string *a1, char *a2)
{
  return sub_2161B4568(a1 + 2, a2);
}

uint64_t sub_216344CF8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_21612A250(i - 24, *(void **)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_216344D4C(void *a1)
{
  *a1 = &unk_26C6C4C88;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_216344DB8(void *a1)
{
  *a1 = &unk_26C6B5228;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_216344E24(void *a1)
{
  *a1 = &unk_26C6C4C68;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_216344E90(void *a1)
{
  *a1 = &unk_26C6B5248;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_216344EFC(void *a1)
{
  *a1 = &unk_26C6C4D08;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_216344F68(void *a1)
{
  *a1 = &unk_26C6C4CE8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216344FD8(void *a1)
{
  sub_216345514(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216345014(void *a1)
{
  sub_21634504C(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_21634504C(void *a1)
{
  *a1 = &unk_26C6C52A0;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166CA7C0](v2[v5], 0x1070C80C36FC988);
      unint64_t v5 = a1[5];
      uint64_t v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2163450F4(void *a1)
{
  *a1 = &unk_26C6C4CE8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166CA800);
}

void sub_216345180(void *a1)
{
  *a1 = &unk_26C6C4D08;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166CA800);
}

void sub_21634520C(void *a1)
{
  *a1 = &unk_26C6B5248;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166CA800);
}

void sub_216345298(void *a1)
{
  *a1 = &unk_26C6C4C68;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166CA800);
}

void sub_216345324(void *a1)
{
  *a1 = &unk_26C6B5228;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166CA800);
}

void sub_2163453B0(void *a1)
{
  *a1 = &unk_26C6C4C88;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166CA800);
}

void *sub_21634543C(void *a1)
{
  *a1 = &unk_26C6C4F90;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1060C8043D569EALL);
  }
  return a1;
}

void sub_216345498(void *a1)
{
  *a1 = &unk_26C6C4F90;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1060C8043D569EALL);
  }

  JUMPOUT(0x2166CA800);
}

void *sub_216345514(void *a1)
{
  *a1 = &unk_26C6C5320;
  a1[16] = &unk_26C6C4F90;
  uint64_t v2 = a1[17];
  if (v2) {
    MEMORY[0x2166CA7C0](v2, 0x1060C8043D569EALL);
  }
  uint64_t v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  a1[11] = &unk_26C6C4C88;
  uint64_t v4 = a1[12];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[9] = &unk_26C6B5228;
  uint64_t v5 = a1[10];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  a1[7] = &unk_26C6C4C68;
  uint64_t v6 = a1[8];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  a1[5] = &unk_26C6B5248;
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  a1[3] = &unk_26C6C4D08;
  uint64_t v8 = a1[4];
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  a1[1] = &unk_26C6C4CE8;
  uint64_t v9 = a1[2];
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return a1;
}

void sub_216345768(void *a1)
{
  *a1 = &unk_26C6C4D28;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2163457F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (!v2) {
    operator new();
  }
  uint64_t v3 = a2 + 1;

  return sub_2161C1F40(v2, v3);
}

uint64_t sub_2163458BC(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 8) = a2;
  CFLocaleRef v3 = sub_2161E29D0(a2);
  CFAllocatorRef Default = CFAllocatorGetDefault();
  v6.locatiouint64_t n = 0;
  v6.CFIndex length = 0;
  *(void *)a1 = CFStringTokenizerCreate(Default, 0, v6, 1uLL, v3);
  CFRelease(v3);
  return a1;
}

const void **sub_216345918(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

BOOL sub_21634594C(uint64_t a1, CFStringRef theString)
{
  CFIndex Length = CFStringGetLength(theString);
  if (Length < 2) {
    return 0;
  }
  uint64_t v5 = Length;
  CFCharacterSetRef v6 = (const __CFCharacterSet *)sub_2161E4888();
  CFIndex v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = MEMORY[0x263EF8318];
  do
  {
    unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v7);
    unsigned int v11 = CharacterAtIndex;
    if ((CharacterAtIndex > 0xFF || (*(_DWORD *)(v9 + 4 * CharacterAtIndex + 60) & 0x400) == 0)
      && !CFCharacterSetIsCharacterMember(v6, CharacterAtIndex))
    {
      int v12 = *(_DWORD *)(a1 + 8);
      switch(v12)
      {
        case 1:
          uint64_t v13 = dword_2163865E8;
          break;
        case 5:
          uint64_t v13 = dword_21638A5E8;
          break;
        case 2:
          uint64_t v13 = dword_2163885E8;
          break;
        default:
          return 0;
      }
      if (((v13[v11 >> 5] >> ~(_BYTE)v11) & 1) == 0) {
        return 0;
      }
      ++v8;
    }
    ++v7;
  }
  while (v5 != v7);
  return v8 >= 1 && (double)v5 * 0.5 <= (double)v8;
}

BOOL sub_216345A84(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)a1;
  uint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  if (v2 < 1) {
    return 0;
  }
  uint64_t v3 = v2 >> 2;
  if (v3 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v3;
  }
  if (*v1 > 0x257u) {
    return 1;
  }
  uint64_t v6 = 1;
  do
  {
    uint64_t v7 = v6;
    if (v4 == v6) {
      break;
    }
    unsigned int v8 = v1[v6++];
  }
  while (v8 < 0x258);
  return v7 < v3;
}

void sub_216345AE8(void *a1)
{
  *a1 = &unk_26C6C5260;
  sub_2163409A4(a1 + 1);
}

void sub_216345B98(_Unwind_Exception *exception_object)
{
  v1[9] = &unk_26C6C4FB0;
  uint64_t v3 = v1[10];
  if (v3) {
    MEMORY[0x2166CA7C0](v3, 0x1000C8077774924);
  }
  v1[7] = &unk_26C6C4FB0;
  uint64_t v4 = v1[8];
  if (v4) {
    MEMORY[0x2166CA7C0](v4, 0x1000C8077774924);
  }
  v1[5] = &unk_26C6C4FB0;
  uint64_t v5 = v1[6];
  if (v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C8077774924);
  }
  void v1[3] = &unk_26C6C4FB0;
  uint64_t v6 = v1[4];
  if (v6) {
    MEMORY[0x2166CA7C0](v6, 0x1000C8077774924);
  }
  v1[1] = &unk_26C6C4FB0;
  uint64_t v7 = v1[2];
  if (v7) {
    MEMORY[0x2166CA7C0](v7, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216345CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) + 8);
  uint64_t v5 = (uint64_t *)(v4 + 8);
  if (*(void *)(v4 + 8))
  {
    do
    {
      uint64_t v6 = *(const void **)(v4 + 48);
      size_t v7 = *(unsigned __int16 *)(v4 + 88);
      if (sub_2161C9CF4(a3, v7))
      {
        memcpy((void *)(*(void *)(a3 + 24) + *(void *)(a3 + 8)), v6, v7);
        *(void *)(a3 + 8) += v7;
      }
      if (sub_2161C9CF4(a3, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 9;
      }
      uint64_t v8 = sub_2161C9E7C(a3, *(char **)(v4 + 56));
      if (sub_2161C9CF4(v8, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 10;
      }
      uint64_t v4 = *v5;
      uint64_t v9 = *v5;
      uint64_t v10 = *(void *)(v9 + 8);
      uint64_t v5 = (uint64_t *)(v9 + 8);
    }
    while (v10);
  }
  sub_2161C9E7C(a3, "EOS\n");
  return 1;
}

uint64_t sub_216345E10(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C5260;
  uint64_t v2 = a1 + 88;
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 88) = *MEMORY[0x263F8C2C8];
  *(void *)(v2 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *(void *)(a1 + 96) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2166CA750](a1 + 200);
  *(void *)(a1 + 72) = &unk_26C6C4FB0;
  uint64_t v5 = *(void *)(a1 + 80);
  if (v5) {
    MEMORY[0x2166CA7C0](v5, 0x1000C8077774924);
  }
  *(void *)(a1 + 56) = &unk_26C6C4FB0;
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6) {
    MEMORY[0x2166CA7C0](v6, 0x1000C8077774924);
  }
  *(void *)(a1 + 4sub_216195244(&a9, 0) = &unk_26C6C4FB0;
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    MEMORY[0x2166CA7C0](v7, 0x1000C8077774924);
  }
  *(void *)(a1 + 24) = &unk_26C6C4FB0;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    MEMORY[0x2166CA7C0](v8, 0x1000C8077774924);
  }
  *(void *)(a1 + 8) = &unk_26C6C4FB0;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9) {
    MEMORY[0x2166CA7C0](v9, 0x1000C8077774924);
  }
  return a1;
}

void sub_216346074(uint64_t a1)
{
  sub_216345E10(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2163460AC(void *a1, uint64_t a2)
{
  sub_21619EFA8(a2, "output-format-type", (uint64_t)&v102);
  a1[47] = sub_216345CE0;
  a1[48] = 0;
  std::string::size_type v4 = v104;
  if ((v104 & 0x80u) != 0) {
    std::string::size_type v4 = v103;
  }
  if (v4 == 4)
  {
    if ((v104 & 0x80u) == 0) {
      uint64_t v10 = (void **)&v102;
    }
    else {
      uint64_t v10 = v102;
    }
    uint64_t v9 = sub_216346E88;
    if (*(_DWORD *)v10 != 1701736302)
    {
      uint64_t v9 = sub_216346E90;
      if (*(_DWORD *)v10 != 1886221668) {
        goto LABEL_18;
      }
    }
LABEL_90:
    a1[47] = v9;
    a1[48] = 0;
LABEL_264:
    uint64_t v84 = 1;
    goto LABEL_267;
  }
  if (v4 == 6)
  {
    uint64_t v5 = (void **)&v102;
    if ((v104 & 0x80u) != 0) {
      uint64_t v5 = v102;
    }
    int v6 = *(_DWORD *)v5;
    int v7 = *((unsigned __int16 *)v5 + 2);
    BOOL v8 = v6 == 1634427255 && v7 == 26996;
    uint64_t v9 = sub_216346D78;
    if (v8) {
      goto LABEL_90;
    }
  }
LABEL_18:
  sub_21610B834(&v101, "%m\\t%H\\n");
  sub_21610B834(&v100, "%m\\t%H\\n");
  sub_21610B834(&v99, "");
  sub_21610B834(&v98, "EOS\\n");
  sub_21610B834(&v97, "");
  sub_21610B834(&v96, "node-format");
  sub_21610B834(&v95, "bos-format");
  sub_21610B834(&v94, "eos-format");
  sub_21610B834(&v93, "unk-format");
  sub_21610B834(&v92, "eon-format");
  std::string::size_type v11 = v104;
  if ((v104 & 0x80u) != 0) {
    std::string::size_type v11 = v103;
  }
  if (!v11) {
    goto LABEL_60;
  }
  std::string::append(&v96, "-", 1uLL);
  if ((v104 & 0x80u) == 0) {
    int v12 = (const std::string::value_type *)&v102;
  }
  else {
    int v12 = (const std::string::value_type *)v102;
  }
  if ((v104 & 0x80u) == 0) {
    std::string::size_type v13 = v104;
  }
  else {
    std::string::size_type v13 = v103;
  }
  std::string::append(&v96, v12, v13);
  std::string::append(&v95, "-", 1uLL);
  if ((v104 & 0x80u) == 0) {
    unint64_t v14 = (const std::string::value_type *)&v102;
  }
  else {
    unint64_t v14 = (const std::string::value_type *)v102;
  }
  if ((v104 & 0x80u) == 0) {
    std::string::size_type v15 = v104;
  }
  else {
    std::string::size_type v15 = v103;
  }
  std::string::append(&v95, v14, v15);
  std::string::append(&v94, "-", 1uLL);
  if ((v104 & 0x80u) == 0) {
    uint64_t v16 = (const std::string::value_type *)&v102;
  }
  else {
    uint64_t v16 = (const std::string::value_type *)v102;
  }
  if ((v104 & 0x80u) == 0) {
    std::string::size_type v17 = v104;
  }
  else {
    std::string::size_type v17 = v103;
  }
  std::string::append(&v94, v16, v17);
  std::string::append(&v93, "-", 1uLL);
  if ((v104 & 0x80u) == 0) {
    unint64_t v18 = (const std::string::value_type *)&v102;
  }
  else {
    unint64_t v18 = (const std::string::value_type *)v102;
  }
  if ((v104 & 0x80u) == 0) {
    std::string::size_type v19 = v104;
  }
  else {
    std::string::size_type v19 = v103;
  }
  std::string::append(&v93, v18, v19);
  std::string::append(&v92, "-", 1uLL);
  if ((v104 & 0x80u) == 0) {
    uint64_t v20 = (const std::string::value_type *)&v102;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)v102;
  }
  if ((v104 & 0x80u) == 0) {
    std::string::size_type v21 = v104;
  }
  else {
    std::string::size_type v21 = v103;
  }
  std::string::append(&v92, v20, v21);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v96;
  }
  else {
    uint64_t v22 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  sub_21619EFA8(a2, (char *)v22, (uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_59;
    }
LABEL_99:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_60;
    }
LABEL_100:
    char v46 = 0;
    goto LABEL_244;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(a1[11] - 24) + 88), 0);
  long long v37 = sub_216129E78(a1 + 11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/writer.cpp", 63);
  sub_216129E78(v37, (uint64_t)"(", 1);
  unint64_t v38 = (void *)std::ostream::operator<<();
  unint64_t v39 = sub_216129E78(v38, (uint64_t)") [", 3);
  unint64_t v40 = sub_216129E78(v39, (uint64_t)"!tmp.empty()", 12);
  uint64_t v41 = sub_216129E78(v40, (uint64_t)"] ", 2);
  uint64_t v42 = sub_216129E78(v41, (uint64_t)"unkown format type [", 20);
  if ((v104 & 0x80u) == 0) {
    long long v43 = (void **)&v102;
  }
  else {
    long long v43 = v102;
  }
  if ((v104 & 0x80u) == 0) {
    uint64_t v44 = v104;
  }
  else {
    uint64_t v44 = v103;
  }
  uint64_t v45 = sub_216129E78(v42, (uint64_t)v43, v44);
  sub_216129E78(v45, (uint64_t)"]", 1);
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_99;
  }
LABEL_59:
  if (!size) {
    goto LABEL_100;
  }
LABEL_60:
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &v96;
  }
  else {
    uint64_t v24 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  sub_21619EFA8(a2, (char *)v24, (uint64_t)&__p);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v25 = &v95;
  }
  else {
    uint64_t v25 = (std::string *)v95.__r_.__value_.__r.__words[0];
  }
  sub_21619EFA8(a2, (char *)v25, (uint64_t)&__str);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = &v94;
  }
  else {
    std::string::size_type v26 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  sub_21619EFA8(a2, (char *)v26, (uint64_t)&v89);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v27 = &v93;
  }
  else {
    unint64_t v27 = (std::string *)v93.__r_.__value_.__r.__words[0];
  }
  sub_21619EFA8(a2, (char *)v27, (uint64_t)v87);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v28 = &v92;
  }
  else {
    unint64_t v28 = (std::string *)v92.__r_.__value_.__r.__words[0];
  }
  sub_21619EFA8(a2, (char *)v28, (uint64_t)&v86);
  uint64_t v29 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
  std::string::size_type v30 = v101.__r_.__value_.__l.__size_;
  if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = v101.__r_.__value_.__l.__size_;
  }
  std::string::size_type v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
  }
  if (v31 != v32)
  {
    a1[47] = sub_216347238;
    a1[48] = 0;
LABEL_144:
    std::string::operator=(&v101, &__p);
LABEL_145:
    uint64_t v59 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v60 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v60 = v99.__r_.__value_.__l.__size_;
    }
    std::string::size_type v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v61 = __str.__r_.__value_.__l.__size_;
    }
    if (v60 == v61)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_CFStringRef str = &__str;
      }
      else {
        p_CFStringRef str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(v99.__r_.__value_.__l.__data_, p_str, v99.__r_.__value_.__l.__size_)) {
          goto LABEL_162;
        }
      }
      else
      {
        if (!*((unsigned char *)&v99.__r_.__value_.__s + 23)) {
          goto LABEL_162;
        }
        uint64_t v63 = &v99;
        while (v63->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
        {
          uint64_t v63 = (std::string *)((char *)v63 + 1);
          p_CFStringRef str = (std::string *)((char *)p_str + 1);
          if (!--v59) {
            goto LABEL_162;
          }
        }
      }
    }
    std::string::operator=(&v99, &__str);
LABEL_162:
    uint64_t v64 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = v98.__r_.__value_.__l.__size_;
    }
    std::string::size_type v66 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v66 = v89.__r_.__value_.__l.__size_;
    }
    if (v65 == v66)
    {
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v67 = &v89;
      }
      else {
        uint64_t v67 = (std::string *)v89.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v98.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((unsigned char *)&v98.__r_.__value_.__s + 23))
        {
          uint64_t v68 = &v98;
          while (v68->__r_.__value_.__s.__data_[0] == v67->__r_.__value_.__s.__data_[0])
          {
            uint64_t v68 = (std::string *)((char *)v68 + 1);
            uint64_t v67 = (std::string *)((char *)v67 + 1);
            if (!--v64) {
              goto LABEL_179;
            }
          }
          goto LABEL_178;
        }
LABEL_179:
        uint64_t v69 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v70 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v70 = v100.__r_.__value_.__l.__size_;
        }
        unint64_t v71 = v88;
        if ((v88 & 0x80u) != 0) {
          unint64_t v71 = (unint64_t)v87[1];
        }
        p_p = (std::string *)v87;
        if (v70 == v71)
        {
          if ((v88 & 0x80u) != 0) {
            p_p = (std::string *)v87[0];
          }
          if ((*((unsigned char *)&v100.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (memcmp(v100.__r_.__value_.__l.__data_, p_p, v100.__r_.__value_.__l.__size_))
            {
LABEL_194:
              p_p = (std::string *)v87;
              goto LABEL_212;
            }
          }
          else if (*((unsigned char *)&v100.__r_.__value_.__s + 23))
          {
            uint64_t v73 = &v100;
            while (v73->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
            {
              uint64_t v73 = (std::string *)((char *)v73 + 1);
              p_p = (std::string *)((char *)p_p + 1);
              if (!--v69) {
                goto LABEL_195;
              }
            }
            goto LABEL_194;
          }
LABEL_195:
          uint64_t v74 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v75 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v75 = v101.__r_.__value_.__l.__size_;
          }
          std::string::size_type v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v76 = __p.__r_.__value_.__l.__size_;
          }
          p_p = &__p;
          if (v75 == v76)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((*((unsigned char *)&v101.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (memcmp(v101.__r_.__value_.__l.__data_, p_p, v101.__r_.__value_.__l.__size_))
              {
LABEL_210:
                p_p = &__p;
                goto LABEL_212;
              }
            }
            else if (*((unsigned char *)&v101.__r_.__value_.__s + 23))
            {
              unint64_t v77 = &v101;
              while (v77->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
              {
                unint64_t v77 = (std::string *)((char *)v77 + 1);
                p_p = (std::string *)((char *)p_p + 1);
                if (!--v74) {
                  goto LABEL_211;
                }
              }
              goto LABEL_210;
            }
LABEL_211:
            p_p = &v101;
          }
        }
LABEL_212:
        std::string::operator=(&v100, p_p);
        uint64_t v78 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v79 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v79 = v97.__r_.__value_.__l.__size_;
        }
        std::string::size_type v80 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v80 = v86.__r_.__value_.__l.__size_;
        }
        if (v79 == v80)
        {
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v81 = &v86;
          }
          else {
            uint64_t v81 = (std::string *)v86.__r_.__value_.__r.__words[0];
          }
          if ((*((unsigned char *)&v97.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(v97.__r_.__value_.__l.__data_, v81, v97.__r_.__value_.__l.__size_)) {
              goto LABEL_229;
            }
          }
          else
          {
            if (!*((unsigned char *)&v97.__r_.__value_.__s + 23)) {
              goto LABEL_229;
            }
            uint64_t v82 = &v97;
            while (v82->__r_.__value_.__s.__data_[0] == v81->__r_.__value_.__s.__data_[0])
            {
              uint64_t v82 = (std::string *)((char *)v82 + 1);
              uint64_t v81 = (std::string *)((char *)v81 + 1);
              if (!--v78) {
                goto LABEL_229;
              }
            }
          }
        }
        std::string::operator=(&v97, &v86);
LABEL_229:
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v83 = &v101;
        }
        else {
          uint64_t v83 = (std::string *)v101.__r_.__value_.__r.__words[0];
        }
        sub_216340A34(a1 + 8, (char *)v83);
      }
      if (!memcmp(v98.__r_.__value_.__l.__data_, v67, v98.__r_.__value_.__l.__size_)) {
        goto LABEL_179;
      }
    }
LABEL_178:
    std::string::operator=(&v98, &v89);
    goto LABEL_179;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v33 = &__p;
  }
  else {
    int v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&v101.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v47 = (const void *)v101.__r_.__value_.__r.__words[0];
    if (memcmp(v101.__r_.__value_.__l.__data_, v33, v101.__r_.__value_.__l.__size_))
    {
      a1[47] = sub_216347238;
      a1[48] = 0;
      goto LABEL_143;
    }
  }
  else if (*((unsigned char *)&v101.__r_.__value_.__s + 23))
  {
    long long v34 = &v101;
    uint64_t v35 = v33;
    uint64_t v36 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    while (v34->__r_.__value_.__s.__data_[0] == v35->__r_.__value_.__s.__data_[0])
    {
      long long v34 = (std::string *)((char *)v34 + 1);
      uint64_t v35 = (std::string *)((char *)v35 + 1);
      if (!--v36) {
        goto LABEL_103;
      }
    }
    goto LABEL_136;
  }
LABEL_103:
  uint64_t v48 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v49 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v49 = v99.__r_.__value_.__l.__size_;
  }
  std::string::size_type v50 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v50 = __str.__r_.__value_.__l.__size_;
  }
  if (v49 != v50) {
    goto LABEL_136;
  }
  int v51 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__str
      : (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((*((unsigned char *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v99.__r_.__value_.__l.__data_, v51, v99.__r_.__value_.__l.__size_)) {
      goto LABEL_136;
    }
  }
  else if (*((unsigned char *)&v99.__r_.__value_.__s + 23))
  {
    std::string::size_type v52 = &v99;
    while (v52->__r_.__value_.__s.__data_[0] == v51->__r_.__value_.__s.__data_[0])
    {
      std::string::size_type v52 = (std::string *)((char *)v52 + 1);
      int v51 = (std::string *)((char *)v51 + 1);
      if (!--v48) {
        goto LABEL_119;
      }
    }
    goto LABEL_136;
  }
LABEL_119:
  uint64_t v53 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v54 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v54 = v98.__r_.__value_.__l.__size_;
  }
  std::string::size_type v55 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v55 = v89.__r_.__value_.__l.__size_;
  }
  if (v54 != v55) {
    goto LABEL_136;
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v56 = &v89;
  }
  else {
    uint64_t v56 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&v98.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (*((unsigned char *)&v98.__r_.__value_.__s + 23))
    {
      uint64_t v57 = &v98;
      while (v57->__r_.__value_.__s.__data_[0] == v56->__r_.__value_.__s.__data_[0])
      {
        uint64_t v57 = (std::string *)((char *)v57 + 1);
        uint64_t v56 = (std::string *)((char *)v56 + 1);
        if (!--v53) {
          goto LABEL_135;
        }
      }
      goto LABEL_136;
    }
    goto LABEL_135;
  }
  if (memcmp(v98.__r_.__value_.__l.__data_, v56, v98.__r_.__value_.__l.__size_))
  {
LABEL_136:
    a1[47] = sub_216347238;
    a1[48] = 0;
    if ((v29 & 0x80) == 0)
    {
      if (!v29) {
        goto LABEL_145;
      }
      uint64_t v58 = &v101;
      while (v58->__r_.__value_.__s.__data_[0] == v33->__r_.__value_.__s.__data_[0])
      {
        uint64_t v58 = (std::string *)((char *)v58 + 1);
        int v33 = (std::string *)((char *)v33 + 1);
        if (!--v29) {
          goto LABEL_145;
        }
      }
      goto LABEL_144;
    }
    uint64_t v47 = (const void *)v101.__r_.__value_.__r.__words[0];
LABEL_143:
    if (!memcmp(v47, v33, v30)) {
      goto LABEL_145;
    }
    goto LABEL_144;
  }
LABEL_135:
  if (!sub_216347194((unsigned __int8 *)&v100, (unsigned __int8 *)v87)) {
    goto LABEL_136;
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if ((char)v88 < 0) {
    operator delete(v87[0]);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v46 = 1;
LABEL_244:
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v101.__r_.__value_.__l.__data_);
    if (v46) {
      goto LABEL_264;
    }
  }
  else if (v46)
  {
    goto LABEL_264;
  }
  uint64_t v84 = 0;
LABEL_267:
  if ((char)v104 < 0) {
    operator delete(v102);
  }
  return v84;
}

void sub_216346BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (*(char *)(v53 - 169) < 0) {
    operator delete(*(void **)(v53 - 192));
  }
  if (*(char *)(v53 - 145) < 0) {
    operator delete(*(void **)(v53 - 168));
  }
  if (*(char *)(v53 - 121) < 0) {
    operator delete(*(void **)(v53 - 144));
  }
  if (*(char *)(v53 - 97) < 0) {
    operator delete(*(void **)(v53 - 120));
  }
  if (*(char *)(v53 - 73) < 0) {
    operator delete(*(void **)(v53 - 96));
  }
  if (*(char *)(v53 - 49) < 0) {
    operator delete(*(void **)(v53 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216346D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) + 8);
  uint64_t v5 = (uint64_t *)(v4 + 8);
  if (*(void *)(v4 + 8))
  {
    do
    {
      int v6 = *(const void **)(v4 + 48);
      size_t v7 = *(unsigned __int16 *)(v4 + 88);
      if (sub_2161C9CF4(a3, v7))
      {
        memcpy((void *)(*(void *)(a3 + 24) + *(void *)(a3 + 8)), v6, v7);
        *(void *)(a3 + 8) += v7;
      }
      if (sub_2161C9CF4(a3, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 32;
      }
      uint64_t v4 = *v5;
      uint64_t v8 = *v5;
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v5 = (uint64_t *)(v8 + 8);
    }
    while (v9);
  }
  if (sub_2161C9CF4(a3, 1)) {
    *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 10;
  }
  return 1;
}

uint64_t sub_216346E88()
{
  return 1;
}

uint64_t sub_216346E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if (v6)
  {
    uint64_t v7 = v6;
    do
    {
      int v8 = *(unsigned __int8 *)(v7 + 109);
      if (v8 == 3)
      {
        uint64_t v9 = a3;
        uint64_t v10 = "EOS";
      }
      else
      {
        if (v8 != 2)
        {
          unint64_t v18 = *(const void **)(v7 + 48);
          size_t v19 = *(unsigned __int16 *)(v7 + 88);
          if (sub_2161C9CF4(a3, v19))
          {
            memcpy((void *)(*(void *)(a3 + 24) + *(void *)(a3 + 8)), v18, v19);
            *(void *)(a3 + 8) += v19;
          }
          goto LABEL_8;
        }
        uint64_t v9 = a3;
        uint64_t v10 = "BOS";
      }
      sub_2161C9E7C(v9, v10);
LABEL_8:
      if (sub_2161C9CF4(a3, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 32;
      }
      uint64_t v11 = sub_2161C9E7C(a3, *(char **)(v7 + 56));
      if (sub_2161C9CF4(v11, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 32;
      }
      uint64_t v12 = sub_216347418(a3, *(_DWORD *)(v7 + 48) - v5);
      if (sub_2161C9CF4(v12, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 32;
      }
      uint64_t v13 = sub_216347418(a3, *(_DWORD *)(v7 + 48) - v5 + *(unsigned __int16 *)(v7 + 88));
      if (sub_2161C9CF4(v13, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 32;
      }
      uint64_t v14 = sub_216347518(a3, *(unsigned __int16 *)(v7 + 92));
      if (sub_2161C9CF4(v14, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 32;
      }
      uint64_t v15 = sub_216347518(a3, *(unsigned __int16 *)(v7 + 94));
      if (sub_2161C9CF4(v15, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 32;
      }
      uint64_t v16 = sub_216347418(a3, *(unsigned __int8 *)(v7 + 109));
      if (sub_2161C9CF4(v16, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 32;
      }
      sub_21634760C(a3, *(void *)(v7 + 96));
      for (uint64_t i = *(void *)(v7 + 40); i; uint64_t i = *(void *)(i + 8))
      {
        if (sub_2161C9CF4(a3, 1)) {
          *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 32;
        }
        sub_216347418(a3, *(_DWORD *)(i + 16));
      }
      if (sub_2161C9CF4(a3, 1)) {
        *(unsigned char *)(*(void *)(a3 + 24) + (*(void *)(a3 + 8))++) = 10;
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7);
  }
  return 1;
}

BOOL sub_216347194(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void sub_216347238(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_21634734C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || !(*(unsigned int (**)(uint64_t))(*(void *)a2 + 8))(a2)) {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a1 + 376);
  uint64_t v7 = *(void *)(a1 + 384);
  int v8 = (void *)(a1 + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v8 + v6);
  }

  return v6(v8, a2, a3);
}

uint64_t sub_216347418(uint64_t a1, int a2)
{
  *(void *)&v13[63] = *MEMORY[0x263EF8340];
  p_s = &__s;
  if (a2 < 0)
  {
    p_s = v13;
    char __s = 45;
    a2 = -a2;
  }
  else if (!a2)
  {
LABEL_9:
    char *p_s = 48;
    int v5 = p_s + 1;
    goto LABEL_10;
  }
  uint64_t v3 = 0;
  do
  {
    p_s[v3] = (char)a2 % 10 + 48;
    unsigned int v4 = a2 + 9;
    ++v3;
    a2 /= 10;
  }
  while (v4 > 0x12);
  if (!v3) {
    goto LABEL_9;
  }
  int v5 = &p_s[v3];
LABEL_10:
  BOOL v6 = p_s == v5;
  *int v5 = 0;
  uint64_t v7 = v5 - 1;
  if (!v6 && v7 > p_s)
  {
    int v8 = p_s + 1;
    do
    {
      char v9 = *(v8 - 1);
      *(v8 - 1) = *v7;
      *v7-- = v9;
    }
    while (v8++ < v7);
  }
  return sub_2161C9E7C(a1, &__s);
}

uint64_t sub_216347518(uint64_t a1, int a2)
{
  *(void *)&v11[63] = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v2 = 0;
  do
  {
    unsigned int v3 = (unsigned __int16)a2;
    v11[v2++ - 1] = ((unsigned __int16)a2 % 0xAu) | 0x30;
    LOWORD(a2) = (unsigned __int16)a2 / 0xAu;
  }
  while (v3 > 9);
  if (v2)
  {
    unsigned int v4 = &v11[v2 - 1];
  }
  else
  {
LABEL_6:
    unsigned int v4 = v11;
    char __s = 48;
  }
  char *v4 = 0;
  int v5 = v4 - 1;
  if (v4 != &__s && v4 - 1 > &__s)
  {
    BOOL v6 = v11;
    do
    {
      char v7 = *(v6 - 1);
      *(v6 - 1) = *v5;
      *v5-- = v7;
    }
    while (v6++ < v5);
  }
  return sub_2161C9E7C(a1, &__s);
}

uint64_t sub_21634760C(uint64_t a1, uint64_t a2)
{
  *(void *)&v13[63] = *MEMORY[0x263EF8340];
  p_s = &__s;
  if (a2 < 0)
  {
    p_s = v13;
    char __s = 45;
    a2 = -a2;
  }
  else if (!a2)
  {
LABEL_9:
    char *p_s = 48;
    int v5 = p_s + 1;
    goto LABEL_10;
  }
  uint64_t v3 = 0;
  do
  {
    p_s[v3] = (char)a2 % 10 + 48;
    unint64_t v4 = a2 + 9;
    ++v3;
    a2 /= 10;
  }
  while (v4 > 0x12);
  if (!v3) {
    goto LABEL_9;
  }
  int v5 = &p_s[v3];
LABEL_10:
  BOOL v6 = p_s == v5;
  *int v5 = 0;
  char v7 = v5 - 1;
  if (!v6 && v7 > p_s)
  {
    int v8 = p_s + 1;
    do
    {
      char v9 = *(v8 - 1);
      *(v8 - 1) = *v7;
      *v7-- = v9;
    }
    while (v8++ < v7);
  }
  return sub_2161C9E7C(a1, &__s);
}

void sub_216347708()
{
}

void sub_216348450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a20) {
    MEMORY[0x2166CA7C0](a20, 0x10C80436913F5);
  }
  if (a23) {
    MEMORY[0x2166CA7C0](a23, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2163485C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(*(unsigned char *)(a3 + 109))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      sub_216347708();
    default:
      return 1;
  }
}

uint64_t sub_216348644(uint64_t a1, const __CFURL *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (a2)
  {
    CFURLRef v3 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, @"VulgarWordUsage.db", 0);
    CFStringRef v4 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
    int v5 = sub_2162D1CE4(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 138412290;
      CFStringRef v9 = v4;
      _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::VulgarWordUsageDatabaseWrapper] database: %@", buf, 0xCu);
    }
    BOOL v6 = (const void *)LXVulgarWordUsageDatabaseCreate();
    sub_2161FBC7C((const void **)a1, v6);
    if (v4) {
      CFRelease(v4);
    }
    if (v3) {
      CFRelease(v3);
    }
  }
  return a1;
}

void sub_216348764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2163487D8(uint64_t a1, CFStringRef theString1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!theString1 || (CFStringRef v4 = *(const __CFString **)(a1 + 8)) == 0 || CFStringCompare(theString1, v4, 0))
  {
    int v5 = sub_2162D1CE4(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 138412290;
      CFStringRef v9 = theString1;
      _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::setAppContext] set appContext: %@", (uint8_t *)&v8, 0xCu);
    }
    BOOL v6 = (const void **)(a1 + 8);
    if (theString1 && CFStringGetLength(theString1) >= 1) {
      CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theString1);
    }
    else {
      CFStringRef Copy = 0;
    }
    sub_2161868BC(v6, Copy);
  }
}

void sub_2163488E4(uint64_t a1, CFStringRef theString1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!theString1 || (CFStringRef v4 = *(const __CFString **)(a1 + 16)) == 0 || CFStringCompare(theString1, v4, 0))
  {
    int v5 = sub_2162D1CE4(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 138412290;
      CFStringRef v9 = theString1;
      _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::setRecipientContext] set recipientContext: %@", (uint8_t *)&v8, 0xCu);
    }
    BOOL v6 = (const void **)(a1 + 16);
    if (theString1 && CFStringGetLength(theString1) >= 1) {
      CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], theString1);
    }
    else {
      CFStringRef Copy = 0;
    }
    sub_2161868BC(v6, Copy);
  }
}

BOOL sub_2163489F0(void *a1, uint64_t a2)
{
  BOOL result = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2 && *a1)
  {
    int v5 = sub_2162D1CE4(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = a1[1];
      uint64_t v7 = a1[2];
      int v8 = 138412802;
      uint64_t v9 = a2;
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_debug_impl(&dword_2160F5000, v5, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::incrementUsageCount] vulgarWord: %@, app: %@, recipient: %@", (uint8_t *)&v8, 0x20u);
    }
    return LXVulgarWordUsageDatabaseIncrementUsageCount() != 0;
  }
  return result;
}

uint64_t sub_216348AE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t result = *a1;
  if (result)
  {
    int CanAutocorrect = LXVulgarWordUsageDatabaseCanAutocorrect();
    uint64_t v6 = sub_2162D1CE4(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = a1[1];
      uint64_t v8 = a1[2];
      int v9 = 138413058;
      uint64_t v10 = a2;
      __int16 v11 = 1024;
      int v12 = CanAutocorrect;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_debug_impl(&dword_2160F5000, v6, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::canAutocorrect] vulgarWord: %@, result: %d, app: %@, recipient: %@", (uint8_t *)&v9, 0x26u);
    }
    return CanAutocorrect != 0;
  }
  return result;
}

BOOL sub_216348BE0(void *a1)
{
  if (!*a1) {
    return 0;
  }
  sub_2163487D8((uint64_t)a1, 0);
  sub_2163488E4((uint64_t)a1, 0);
  return LXVulgarWordUsageDatabaseReset() != 0;
}

uint64_t sub_216348C38(uint64_t a1, const __CFString *a2, CFRange a3)
{
  CFIndex length = a3.length;
  locatiouint64_t n = a3.location;
  *(void *)a1 = &unk_26C6C3700;
  *(void *)(a1 + 8) = CFStringCreateWithSubstring(0, a2, a3);
  *(void *)(a1 + 16) = location;
  *(void *)(a1 + 24) = length;
  *(unsigned char *)(a1 + 32) = CFStringGetCharacterAtIndex(a2, length + location - 1) == 39;
  return a1;
}

uint64_t sub_216348CB8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C3700;
  CFRelease(*(CFTypeRef *)(a1 + 8));
  return a1;
}

void sub_216348D08(uint64_t a1)
{
  sub_216348CB8(a1);

  JUMPOUT(0x2166CA800);
}

void *sub_216348D40(void *a1)
{
  *a1 = &unk_26C6C35A0;
  sub_216348D94(a1);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_216348D94(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void **)result[1];
  CFURLRef v3 = (void **)result[2];
  if (v2 != v3)
  {
    do
    {
      uint64_t result = *v2;
      if (*v2) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void **)v1[1];
  }
  v1[2] = v2;
  v1[4] = 0;
  return result;
}

void sub_216348E10(void *a1)
{
  sub_216348D40(a1);

  JUMPOUT(0x2166CA800);
}

CFIndex sub_216348E48(CFIndex result, CFStringRef theString, int a3)
{
  char v3 = a3;
  int v5 = (void *)result;
  if (theString && a3)
  {
    uint64_t v6 = *(void *)(result + 8);
    if (*(void *)(result + 16) == v6)
    {
      CFIndex v8 = 0;
      unint64_t v7 = *(void *)(result + 32);
      if (v7)
      {
LABEL_22:
        uint64_t v6 = v5[1];
        for (uint64_t i = v5[2]; ; v5[2] = i)
        {
          uint64_t v17 = i - v6;
LABEL_26:
          if (v17 >> 3 <= v7) {
            break;
          }
          uint64_t result = *(void *)(v6 + 8 * (v17 >> 3) - 8);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(CFIndex))(*(void *)result + 8))(result);
            uint64_t v6 = v5[1];
            uint64_t i = v5[2];
          }
          i -= 8;
        }
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v7 = 0;
      CFIndex v8 = 0;
      while (1)
      {
        uint64_t v9 = *(void *)(v6 + 8 * v7);
        CFIndex Length = CFStringGetLength(theString);
        uint64_t result = CFStringGetLength(theString);
        uint64_t v11 = *(void *)(v9 + 24);
        if (result - v8 < v11) {
          break;
        }
        CFIndex v12 = v8;
        if (v11 >= 1)
        {
          CFIndex v13 = 0;
          while (1)
          {
            int CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v8 + v13);
            uint64_t result = CFStringGetCharacterAtIndex(*(CFStringRef *)(v9 + 8), v13);
            if (CharacterAtIndex != result) {
              goto LABEL_21;
            }
            if (v11 == ++v13)
            {
              CFIndex v12 = v8 + v13;
              break;
            }
          }
        }
        if (*(unsigned char *)(v9 + 32)) {
          BOOL v15 = 1;
        }
        else {
          BOOL v15 = v12 == Length;
        }
        if (!v15) {
          break;
        }
        uint64_t v6 = v5[1];
        uint64_t i = v5[2];
        v8 += *(void *)(*(void *)(v6 + 8 * v7++) + 24);
        void v5[4] = v7;
        uint64_t v17 = i - v6;
        if (v7 >= (i - v6) >> 3) {
          goto LABEL_26;
        }
      }
LABEL_21:
      void v5[4] = v7;
      if (v7) {
        goto LABEL_22;
      }
    }
    uint64_t result = (CFIndex)sub_216348D94(v5);
    uint64_t v17 = v5[2] - v5[1];
LABEL_30:
    if ((unint64_t)v17 <= 0x50)
    {
      uint64_t result = CFStringGetLength(theString);
      if (result > v8)
      {
        uint64_t v18 = result;
        CFIndex v19 = result - 1;
        CFIndex v20 = v8;
        do
        {
          if (v20 == v19 || (uint64_t result = CFStringGetCharacterAtIndex(theString, v20), result == 39)) {
            operator new();
          }
          ++v20;
        }
        while (v20 != v18);
      }
    }
    return result;
  }
  uint64_t result = (CFIndex)sub_216348D94((void *)result);
  if (theString && (v3 & 1) == 0) {
    operator new();
  }
  return result;
}

void sub_216349210(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a4) {
    unsigned int v5 = (**(_DWORD **)(a1 + 8) >> 4) & 0x20 | (((**(_DWORD **)(a1 + 8) >> 5) & 1) << 7) | (**(_DWORD **)(a1 + 8) >> 2) & 0x40 | ((char)**(_DWORD **)(a1 + 8) >> 7) & 0x18 | 2;
  }
  else {
    unsigned int v5 = (**(_DWORD **)(a1 + 8) >> 4) & 0x20 | (((**(_DWORD **)(a1 + 8) >> 5) & 1) << 7) | (**(_DWORD **)(a1 + 8) >> 2) & 0x40 | ((char)**(_DWORD **)(a1 + 8) >> 7) & 0x18;
  }
  sub_2162229D0(a2, *(unsigned __int16 **)a3, *(void *)(a3 + 8), v5, a5);
}

void sub_21634925C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v54 = a4;
  unint64_t v55 = a5;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E988))
  {
    qword_26797E980 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797E988);
  }
  uint64_t v7 = sub_216349674();
  if (*(unsigned char *)qword_26797E980) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = 3;
  }
  uint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    if (*(unsigned char *)(v9 + 96))
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10)
      {
        if (v55 <= 0x20)
        {
          unint64_t v11 = v7;
          long long v40 = *(_OWORD *)(a3 + 16);
          sub_2161BF61C((uint64_t)&v47, v9 + 248, (uint64_t)&v40, (uint64_t)&v54);
          unsigned int v12 = 0x7FFFFFFF;
          unint64_t v13 = v11;
          uint64_t v36 = v10;
          unint64_t v37 = v8;
          while (1)
          {
            if (v49 < v13) {
              goto LABEL_48;
            }
            uint64_t v14 = *(void *)(v47[13] + 8 * (v49 - v13));
            unint64_t v15 = ((v53 - (unsigned char *)__p) >> 1) - v14;
            if (!__p) {
              unint64_t v15 = 0;
            }
            v46[0] = (char *)__p + 2 * v14;
            v46[1] = v15;
            if (!v50) {
              goto LABEL_48;
            }
            if ((v51 - (unsigned char *)v50) >> 1 == v14 || v15 < v8) {
              goto LABEL_48;
            }
            if ((**(unsigned char **)(a1 + 8) & 2) != 0)
            {
              uint64_t v18 = **(void **)(a1 + 16);
              if (v18) {
                BOOL v17 = CFArrayGetCount(*(CFArrayRef *)(v18 + 32)) == 0;
              }
              else {
                BOOL v17 = 1;
              }
            }
            else
            {
              BOOL v17 = 0;
            }
            sub_216349210(a1, v10, (uint64_t)v46, v17, (uint64_t)&v44);
            unint64_t v19 = v49 - v13;
            if (v49 >= v13)
            {
              uint64_t v20 = ((uint64_t)(v47[8] - v47[7]) >> 1) - *(void *)(v47[13] + 8 * v19);
              if (v20 != -1)
              {
                uint64_t v21 = *(void *)(v47[10] + 8 * v19);
                uint64_t v22 = ((uint64_t)(v47[5] - v47[4]) >> 1) - v21;
                uint64_t v23 = v48 + 2 * v21;
                if (!v48) {
                  uint64_t v22 = 0;
                }
                v43[0] = v23;
                v43[1] = v22;
                *(void *)&long long v40 = v20;
                *((void *)&v40 + 1) = v22;
                unint64_t v41 = v13;
                uint64_t v42 = v43;
                if (v44 != v45)
                {
                  uint64_t v38 = sub_21634A3FC(**(_DWORD **)(a1 + 8));
                  uint64_t v24 = *(void *)(a3 + 48);
                  memset(&v56, 0, sizeof(v56));
                  for (uint64_t i = *(const std::string **)(*(void *)a1 + 16);
                        i != *(const std::string **)(*(void *)a1 + 24);
                        uint64_t i = (const std::string *)((char *)i + 32))
                  {
                    if (i[1].__r_.__value_.__s.__data_[4])
                    {
                      std::string::operator=(&v56, i);
                      break;
                    }
                  }
                  uint64_t v26 = v44;
                  if (v45 != v44)
                  {
                    uint64_t v27 = 0;
                    unint64_t v28 = 0;
                    uint64_t v29 = 0;
                    do
                    {
                      std::string::size_type v30 = sub_216178FA4(v26 + v27, (void **)&v56.__r_.__value_.__l.__data_);
                      std::string::size_type v31 = (void *)(*(uint64_t (**)(void *))(*(void *)v30[7] + 16))(v30[7]);
                      unint64_t v32 = ((uint64_t)(v31[1] - *v31) >> 1) - v40;
                      if (v24 <= 0 && v32 <= *(void *)(a3 + 40))
                      {
                        int v33 = 0;
                      }
                      else
                      {
                        if ((*(unsigned char *)(*(void *)(a1 + 8) + 3) & 2) != 0) {
                          goto LABEL_43;
                        }
                        int v33 = 2;
                      }
                      unsigned int v12 = sub_21634A490(v12, v32, a3);
                      int v34 = sub_21634A550(v33, v29, **(_DWORD **)(a1 + 8));
                      unsigned int v35 = sub_216349CEC(a1, a2, v44 + v27, a3, v12, v34, v33, (uint64_t *)&v40);
                      if (v28 == 11) {
                        break;
                      }
                      v29 += v35;
                      if (v29 == v38) {
                        break;
                      }
LABEL_43:
                      ++v28;
                      uint64_t v26 = v44;
                      v27 += 32;
                    }
                    while (v28 < (v45 - v44) >> 5);
                  }
                  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v56.__r_.__value_.__l.__data_);
                  }
                  uint64_t v10 = v36;
                  unint64_t v8 = v37;
                }
              }
            }
            *(void *)&long long v40 = &v44;
            sub_2161921F0((void ***)&v40);
LABEL_48:
            if (--v13 > v11)
            {
              if (__p)
              {
                uint64_t v53 = __p;
                operator delete(__p);
              }
              if (v50)
              {
                int v51 = v50;
                operator delete(v50);
              }
              return;
            }
          }
        }
      }
    }
  }
}

void sub_216349610(_Unwind_Exception *a1)
{
}

uint64_t sub_216349674()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E998, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E998))
  {
    qword_26797E990 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797E998);
  }
  if (*(unsigned char *)qword_26797E990) {
    return 2;
  }
  else {
    return 6;
  }
}

void sub_2163496E8(_Unwind_Exception *a1)
{
}

void *sub_216349700(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  char v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_216349744(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_216349674();
  uint64_t v6 = *a1;
  if (*a1)
  {
    if (*(unsigned char *)(v6 + 96))
    {
      uint64_t v7 = *(void **)(v6 + 8);
      if (v7)
      {
        unint64_t v8 = (void **)v5;
        uint64_t v9 = *(void *)(a3 + 184);
        if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9) <= 0x20)
        {
          uint64_t v10 = *a1 + 248;
          long long v37 = *(_OWORD *)(a3 + 96);
          unint64_t v11 = sub_216268B0C();
          sub_2161BF61C((uint64_t)v39, v10, (uint64_t)&v37, (uint64_t)v11);
          sub_216334474(v39[2], v9, (uint64_t)&v37);
          unint64_t v28 = v7;
          if (v38 == *((void *)&v37 + 1)) {
            unsigned int v12 = (long long *)v9;
          }
          else {
            unsigned int v12 = &v37;
          }
          std::string::size_type v31 = v42;
          uint64_t v32 = (uint64_t)v12;
          uint64_t v30 = (v43 - (unsigned char *)v42) >> 1;
          unint64_t v13 = v8;
          uint64_t v29 = v8;
          do
          {
            if (v41 >= (unint64_t)v13)
            {
              uint64_t v14 = *(void *)(*(void *)(v39[0] + 104) + 8 * (v41 - (void)v13));
              if (v14 != -1)
              {
                if ((*(unsigned char *)a1[1] & 2) != 0)
                {
                  uint64_t v16 = *(void *)a1[2];
                  if (v16) {
                    BOOL v15 = CFArrayGetCount(*(CFArrayRef *)(v16 + 32)) == 0;
                  }
                  else {
                    BOOL v15 = 1;
                  }
                }
                else
                {
                  BOOL v15 = 0;
                }
                sub_216222D8C(v7, v32, v14, (uint64_t)v31, v30, v15, &v35);
                if (v35 != v36)
                {
                  unint64_t v17 = v41 - (void)v13;
                  if (v41 >= (unint64_t)v13)
                  {
                    uint64_t v20 = ((uint64_t)(*(void *)(v39[0] + 64) - *(void *)(v39[0] + 56)) >> 1)
                        - *(void *)(*(void *)(v39[0] + 104) + 8 * v17);
                    uint64_t v21 = *(void *)(*(void *)(v39[0] + 80) + 8 * v17);
                    uint64_t v19 = v40 + 2 * v21;
                    if (v40) {
                      uint64_t v18 = (void **)(((uint64_t)(*(void *)(v39[0] + 40) - *(void *)(v39[0] + 32)) >> 1) - v21);
                    }
                    else {
                      uint64_t v18 = 0;
                    }
                  }
                  else
                  {
                    uint64_t v18 = 0;
                    uint64_t v19 = 0;
                    uint64_t v20 = -1;
                  }
                  v34[0] = v19;
                  v34[1] = v18;
                  v33[0] = (void **)v20;
                  v33[1] = v18;
                  void v33[2] = v13;
                  v33[3] = (void **)v34;
                  sub_21634A3FC(*(_DWORD *)a1[1]);
                  memset(&v47, 0, sizeof(v47));
                  for (uint64_t i = *(const std::string **)(*a1 + 16);
                        i != *(const std::string **)(*a1 + 24);
                        uint64_t i = (const std::string *)((char *)i + 32))
                  {
                    if (i[1].__r_.__value_.__s.__data_[4])
                    {
                      std::string::operator=(&v47, i);
                      break;
                    }
                  }
                  if (v36 != v35)
                  {
                    uint64_t v23 = sub_216178FA4(v35, (void **)&v47.__r_.__value_.__l.__data_);
                    (*(void (**)(void *))(*(void *)v23[7] + 16))(v23[7]);
                    uint64_t v24 = (const UniChar *)(v35 + 24);
                    if (*(char *)(v35 + 47) < 0)
                    {
                      uint64_t v24 = *(const UniChar **)v24;
                      uint64_t v25 = *(void *)(v35 + 32);
                    }
                    else
                    {
                      uint64_t v25 = *(unsigned __int8 *)(v35 + 47);
                    }
                    CFIndex v26 = v25 - (unint64_t)v33[0];
                    if (v24) {
                      CFIndex v27 = v26;
                    }
                    else {
                      CFIndex v27 = 0;
                    }
                    CFStringRef v46 = CFStringCreateWithCharacters(0, &v24[(uint64_t)v33[0]], v27);
                    operator new();
                  }
                  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v47.__r_.__value_.__l.__data_);
                  }
                  unint64_t v8 = v29;
                  uint64_t v7 = v28;
                }
                v33[0] = (void **)&v35;
                sub_2162249EC(v33);
              }
            }
            unint64_t v13 = (void **)((char *)v13 - 1);
          }
          while (v13 <= v8);
          *(void *)&long long v37 = &unk_26C6BE8C8;
          v33[0] = (void **)&v37 + 1;
          sub_2161C4FA0(v33);
          if (__p)
          {
            uint64_t v45 = __p;
            operator delete(__p);
          }
          if (v42)
          {
            long long v43 = v42;
            operator delete(v42);
          }
        }
      }
    }
  }
}

void sub_216349C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
}

uint64_t sub_216349CEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, uint64_t *a8)
{
  v69[4] = *MEMORY[0x263EF8340];
  unint64_t v13 = (uint64_t *)sub_216222F20(a3, off_26797C580[0]);
  uint64_t v14 = (uint64_t *)sub_216222F20(a3, off_26797C588);
  unsigned int v56 = sub_216222FB8(a3, off_26797C560[0]);
  unsigned int v55 = sub_216222FB8(a3, off_26797C558[0]);
  BOOL v15 = (void *)sub_216222F20(a3, off_26797C568[0]);
  uint64_t v16 = *v13;
  uint64_t v17 = v13[1] - *v13;
  uint64_t v18 = *v14;
  unint64_t v19 = (v14[1] - *v14) >> 1;
  v68[0] = v18;
  v68[1] = v19;
  if (*a8 > (unint64_t)(v17 >> 1)) {
    return 0;
  }
  uint64_t v20 = v15;
  if (a8[2] > (unint64_t)((uint64_t)(v15[1] - *v15) >> 1) || !sub_216268BC4((uint64_t)v68, a8[3])) {
    return 0;
  }
  std::string::size_type v52 = a2;
  uint64_t v53 = a1;
  unint64_t v21 = a8[1];
  BOOL v22 = v19 > v21 && *(unsigned __int16 *)(v18 + 2 * v21) == 32;
  if (v18) {
    unint64_t v23 = v19 - v21;
  }
  else {
    unint64_t v23 = 0;
  }
  uint64_t v24 = (void *)(*(void *)v53 + 248);
  buf[0] = 0;
  BOOL v25 = !sub_21628E128(v24, (BOOL *)buf);
  if (buf[0]) {
    BOOL v25 = 1;
  }
  if (!v25 && !v22 && v23)
  {
    CFIndex v26 = (unsigned __int16 *)(v18 + 2 * v21);
    uint64_t v27 = MEMORY[0x263EF8318];
    while (1)
    {
      unsigned int v29 = *v26++;
      uint64_t v28 = v29;
      if (!(v29 <= 0x7FuLL ? *(_DWORD *)(v27 + 4 * v28 + 60) & 0x40000 : __maskrune(v28, 0x40000uLL))) {
        break;
      }
      if (!--v23)
      {
        std::string::size_type v31 = operator new(2uLL);
        *std::string::size_type v31 = 32;
        *(void *)int buf = v31;
        uint64_t v67 = v31 + 1;
        std::string::size_type v66 = v31 + 1;
        unsigned __int8 v32 = 1;
        uint64_t v33 = 1;
        goto LABEL_22;
      }
    }
  }
  unsigned __int8 v32 = 0;
  uint64_t v33 = 0;
  *(void *)int buf = 0;
  std::string::size_type v66 = 0;
  uint64_t v67 = 0;
LABEL_22:
  sub_216185B34((void **)buf, v33 + v19);
  sub_216185BD8((uint64_t)buf, (uint64_t)v66, (char *)(v18 + 2 * a8[1]), (char *)(v18 + 2 * v19), (uint64_t)(2 * v19 - 2 * a8[1]) >> 1);
  int v34 = (const void *)(v16 + 2 * *a8);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  char v62 = 0;
  sub_2162231B0(&v62, v34, v16 + 2 * (v17 >> 1), (v16 + 2 * (v17 >> 1) - (uint64_t)v34) >> 1);
  uint64_t v35 = *a8;
  uint64_t v36 = a8[1];
  long long v37 = (unsigned char *)v20[1];
  uint64_t v38 = (unsigned char *)(*v20 + 2 * a8[2]);
  long long __dst = 0;
  uint64_t v61 = 0;
  std::string __p = 0;
  int64_t v39 = v37 - v38;
  if (v37 != v38)
  {
    sub_21610FD04(&__p, v39 >> 1);
    uint64_t v40 = (char *)__dst;
    memmove(__dst, v38, v39);
    long long __dst = &v40[2 * (v39 >> 1)];
  }
  unint64_t v41 = (void *)sub_21624657C(*(void *)(v53 + 24), a4, *(void *)(a4 + 16), *(void *)(a4 + 24), (uint64_t)v62, (v63 - (unsigned char *)v62) >> 1, *(uint64_t *)buf, ((uint64_t)v66 - *(void *)buf) >> 1, v56 >> v35, v55 >> v36, (unsigned __int16 **)&__p, a5 | 0x4C00000000, a7, v32, 0);
  if (__p)
  {
    long long __dst = __p;
    operator delete(__p);
  }
  if (v62)
  {
    uint64_t v63 = v62;
    operator delete(v62);
  }
  if (*(void *)buf)
  {
    std::string::size_type v66 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (!v41) {
    return 0;
  }
  if (((*(uint64_t (**)(void *))(*v41 + 176))(v41) & 1) == 0)
  {
    *(void *)int buf = v41;
    uint64_t v44 = sub_2161DE698(v52 + 1, buf);
    if (v44) {
      uint64_t v45 = (uint64_t)v44[3];
    }
    else {
      uint64_t v45 = -1;
    }
    int v46 = **(_DWORD **)(v53 + 8);
    if ((~v46 & 0x6000000) != 0 && (v46 & 0x10000000) == 0)
    {
      if (v45 != -1)
      {
        uint64_t v47 = *(void *)(v52[6] + 8 * v45);
        uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 112))(v47);
        (*(void (**)(void *, uint64_t))(*v41 + 488))(v41, v48);
      }
      if (a6) {
        v41[1] = a6;
      }
      LOBYTE(v62) = 0;
      (*(void (**)(void *, uint64_t, const char *, uint64_t))(*v41 + 528))(v41, 3, "Adding a phrase learning dictionary candidate", 1);
      *(void *)int buf = v41;
      v69[0] = &unk_26C6B5430;
      v69[3] = v69;
      uint64_t v42 = sub_216215760(v52, (void **)buf, 1, &v62, (uint64_t)v69);
      sub_21618B96C(v69);
      uint64_t v49 = *(void *)buf;
      *(void *)int buf = 0;
      if (v49) {
        (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
      }
      if (v42)
      {
        std::string::size_type v50 = sub_2162D1CE4(3u);
        if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
          return v42;
        }
        *(_WORD *)int buf = 0;
        int v51 = " ∟ Added";
      }
      else if ((_BYTE)v62)
      {
        std::string::size_type v50 = sub_2162D1CE4(3u);
        if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
          return v42;
        }
        *(_WORD *)int buf = 0;
        int v51 = " ∟ Replaced";
      }
      else
      {
        std::string::size_type v50 = sub_2162D1CE4(3u);
        if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
          return v42;
        }
        *(_WORD *)int buf = 0;
        int v51 = " ∟ REJECTED";
      }
      _os_log_debug_impl(&dword_2160F5000, v50, OS_LOG_TYPE_DEBUG, v51, buf, 2u);
      return v42;
    }
    if (v45 != -1)
    {
      uint64_t v42 = *(void *)(v52[6] + 8 * v45);
      if (!v42) {
        goto LABEL_33;
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v42 + 88))(v42) & 1) == 0)
      {
        *(_DWORD *)(v42 + 204) = 76;
        uint64_t v42 = 1;
        goto LABEL_33;
      }
    }
  }
  uint64_t v42 = 0;
LABEL_33:
  (*(void (**)(void *))(*v41 + 16))(v41);
  return v42;
}

void sub_21634A328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
}

uint64_t sub_21634A3FC(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E9A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E9A8))
  {
    qword_26797E9A0 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797E9A8);
  }
  if ((~a1 & 0x6000000) != 0) {
    return *(unsigned __int16 *)(qword_26797E9A0 + 416);
  }
  else {
    return 1;
  }
}

void sub_21634A478(_Unwind_Exception *a1)
{
}

uint64_t sub_21634A490(int a1, int a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E9B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E9B8))
  {
    qword_26797E9B0 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797E9B8);
  }
  if (a1 != 0x7FFFFFFF) {
    return (a1 + 1);
  }
  uint64_t result = *(__int16 *)(qword_26797E9B0 + 496);
  int v7 = a2 - *(_DWORD *)(a3 + 40);
  if (v7 >= 1) {
    return (*(__int16 *)(qword_26797E9B0 + 512) + *(__int16 *)(qword_26797E9B0 + 512) * v7 + result);
  }
  return result;
}

void sub_21634A538(_Unwind_Exception *a1)
{
}

uint64_t sub_21634A550(int a1, int a2, unsigned int a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E9C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E9C8))
  {
    qword_26797E9C0 = (uint64_t)sub_2161A2A80();
    __cxa_guard_release(&qword_26797E9C8);
  }
  if (*(unsigned char *)qword_26797E9C0) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = (a3 & 0x2000002) == 2;
  }
  int v7 = HIBYTE(a3) & 4;
  if (!v6) {
    int v7 = 0;
  }
  if (v7) {
    BOOL v8 = a1 == 2;
  }
  else {
    BOOL v8 = 0;
  }
  unsigned int v9 = v7 + a2;
  if (v8) {
    return v9;
  }
  else {
    return 0;
  }
}

void sub_21634A5F4(_Unwind_Exception *a1)
{
}

void sub_21634A60C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_26C6C65C0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 4sub_216195244(&a9, 0) = a4;
  *(void *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 2;
  operator new();
}

void sub_21634A6C8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v2, 0x10A0C403A2516C0);
  CFStringRef v4 = *(void **)(v1 + 16);
  if (v4)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_21634A708(void *a1)
{
  *a1 = &unk_26C6C65C0;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = sub_216238180(v2);
    MEMORY[0x2166CA800](v3, 0x10A0C403A2516C0);
  }
  uint64_t v4 = a1[8];
  if (v4)
  {
    uint64_t v5 = sub_216238180(v4);
    MEMORY[0x2166CA800](v5, 0x10A0C403A2516C0);
  }
  BOOL v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_21634A79C(void *a1)
{
  sub_21634A708(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21634A7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2162392FC(*(void *)(a1 + 8), (uint64_t)&v6);
  sub_2162100D0(a2, &v6);
  uint64_t v3 = v7;
  int v7 = 0;
  if (v3)
  {
    uint64_t v4 = sub_21620FE6C(v3);
    MEMORY[0x2166CA800](v4, 0x20C4093837F09);
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
  }
  return result;
}

void sub_21634A858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_21634A86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 48) && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1))
  {
    uint64_t v40 = 0;
    unint64_t v41 = &v40;
    uint64_t v42 = 0x4002000000;
    long long v43 = sub_21634AD00;
    uint64_t v44 = sub_21634AD24;
    memset(v45, 0, 24);
    unsigned int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2);
    uint64_t v7 = *(void *)(a1 + 8);
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 0x40000000;
    v39[2] = sub_21634AD50;
    void v39[3] = &unk_2642673C8;
    v39[4] = &v40;
    v39[5] = a1;
    sub_216239420(v7, v6, (uint64_t)v39);
    unint64_t v8 = v41[5];
    unsigned int v9 = (void *)v41[6];
    if (v9 != (void *)v8)
    {
      uint64_t v27 = sub_216222D78;
      sub_2161925A8(v8, v9, (uint64_t (**)(uint64_t, uint64_t))&v27, 126 - 2 * __clz((uint64_t)((uint64_t)v9 - v8) >> 5), 1);
      uint64_t v10 = 0;
      char v38 = 0;
      uint64_t v11 = -1;
      do
      {
        uint64_t v12 = v41[5];
        if (++v11 >= (unint64_t)((v41[6] - v12) >> 5)) {
          break;
        }
        uint64_t v13 = v12 + v10;
        __int16 v14 = *(_DWORD *)(v12 + v10 + 24);
        int v33 = 0;
        __int16 v34 = 0;
        __int16 v35 = v14;
        int v36 = 0;
        v37[0] = &v33;
        uint64_t v15 = *(void *)(a1 + 16);
        uint64_t v16 = *(void *)(a1 + 24);
        uint64_t v30 = 0;
        std::string::size_type v31 = 0;
        uint64_t v32 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        sub_21610B834(__p, off_26797C518);
        uint64_t v17 = sub_216178FA4(v13, __p);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if ((void **)(v41[5] + v10 + 8) != v17)
        {
          uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v17[7] + 16))(v17[7]);
          if (&v30 != (void **)v18) {
            sub_21618F924((char *)&v30, *(char **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 1);
          }
        }
        uint64_t v19 = v41[5];
        sub_21610B834(__p, off_26797C540[0]);
        uint64_t v20 = sub_216178FA4(v19 + v10, __p);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if ((void **)(v41[5] + v10 + 8) != v20)
        {
          uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v20[7] + 16))(v20[7]);
          if (&v27 != (void **)v21) {
            sub_21618F924((char *)&v27, *(char **)v21, *(void *)(v21 + 8), (uint64_t)(*(void *)(v21 + 8) - *(void *)v21) >> 1);
          }
        }
        if (v31 != v30)
        {
          uint64_t v22 = v41[5];
          sub_21610B834(__p, off_26797C588);
          unint64_t v23 = sub_216178FA4(v22 + v10, __p);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v24 = (uint64_t *)(*(uint64_t (**)(void *))(*(void *)v23[7] + 16))(v23[7]);
          sub_21634ECA8((void *)(a1 + 16), v24, (uint64_t *)&v30, (uint64_t *)&v27, *(_DWORD *)(a1 + 40));
          v37[1] = *(void *)(a1 + 16) + 2 * ((v16 - v15) >> 1);
          (*(void (**)(uint64_t, void *, char *))(a3 + 16))(a3, v37, &v38);
        }
        if (v27)
        {
          uint64_t v28 = v27;
          operator delete(v27);
        }
        if (v30)
        {
          std::string::size_type v31 = v30;
          operator delete(v30);
        }
        v10 += 32;
      }
      while (!v38);
    }
    _Block_object_dispose(&v40, 8);
    uint64_t v30 = v45;
    sub_2161921F0((void ***)&v30);
  }
}

void sub_21634AC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  _Block_object_dispose((const void *)(v21 - 152), 8);
  a19 = v20;
  sub_2161921F0((void ***)&a19);
  _Unwind_Resume(a1);
}

__n128 sub_21634AD00(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_216195244(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_21634AD24(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_2161921F0(&v1);
}

void sub_21634AD50(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  v27[0] = 0;
  v27[1] = 0;
  char v26 = v27;
  int v25 = 0;
  if (sub_216236B34(*(uint64_t **)(*(void *)(v3 + 48) + 40), a2, &v25))
  {
    uint64_t v4 = *(uint64_t **)(*(void *)(a1 + 32) + 8);
    sub_21619420C((uint64_t *)&v21, (uint64_t)&v26);
    int v24 = v25;
    unint64_t v5 = v4[7];
    unint64_t v6 = v4[6];
    if (v6 >= v5)
    {
      uint64_t v10 = v4[5];
      uint64_t v11 = (uint64_t)(v6 - v10) >> 5;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 59) {
        sub_21610CB04();
      }
      uint64_t v13 = v5 - v10;
      if (v13 >> 4 > v12) {
        unint64_t v12 = v13 >> 4;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      v28[4] = v4 + 7;
      if (v14) {
        uint64_t v15 = (char *)sub_216115A58((uint64_t)(v4 + 7), v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v17 = &v15[32 * v11];
      v28[0] = v15;
      v28[1] = v17;
      void v28[3] = &v15[32 * v14];
      *(void *)uint64_t v17 = v21;
      uint64_t v18 = v22;
      *((void *)v17 + 1) = v22;
      uint64_t v19 = v17 + 8;
      uint64_t v20 = v23;
      *((void *)v17 + 2) = v23;
      if (v20)
      {
        v18[2] = v19;
        uint64_t v21 = &v22;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
      else
      {
        *(void *)uint64_t v17 = v19;
      }
      *(_DWORD *)&v15[32 * v11 + 24] = v24;
      v28[2] = v17 + 32;
      sub_21619236C(v4 + 5, v28);
      uint64_t v16 = v4[6];
      sub_21619252C(v28);
    }
    else
    {
      *(void *)unint64_t v6 = v21;
      uint64_t v7 = v22;
      *(void *)(v6 + 8) = v22;
      unint64_t v8 = v6 + 8;
      uint64_t v9 = v23;
      *(void *)(v6 + 16) = v23;
      if (v9)
      {
        void v7[2] = v8;
        uint64_t v21 = &v22;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
      else
      {
        *(void *)unint64_t v6 = v8;
      }
      *(_DWORD *)(v6 + 24) = v24;
      uint64_t v16 = v6 + 32;
    }
    v4[6] = v16;
    sub_2161936EC((uint64_t)&v21, v22);
  }
  sub_2161936EC((uint64_t)&v26, v27[0]);
}

void sub_21634AF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  unint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void *);
  uint64_t v12 = va_arg(va2, void);
  sub_21619252C((void **)va2);
  sub_2161936EC((uint64_t)va, v5);
  sub_2161936EC((uint64_t)va1, v11);
  _Unwind_Resume(a1);
}

uint64_t sub_21634AF5C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(***(void ***)(a1 + 8) + 32))(**(void **)(a1 + 8), *(void *)(a2 + 8));
}

uint64_t sub_21634AF8C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, BOOL *a5)
{
  *a4 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  BOOL v9 = 0;
  if (v8) {
    BOOL v9 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2) != 0;
  }
  *a5 = v9;
  return v8;
}

uint64_t sub_21634B02C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  unsigned int v4 = 0;
  if ((*(unsigned int (**)(void, void, unsigned int *))(*(void *)*v2 + 48))(*v2, *(void *)(a2 + 8), &v4))
  {
    return v4;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_21634B08C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1) << 8;
}

void **sub_21634B0C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21623938C(*(void *)(a1 + 8), a2);
}

void *sub_21634B0D0(uint64_t a1)
{
  sub_216238298(*(void *)(a1 + 8));
  __n128 result = *(void **)(a1 + 64);
  if (result)
  {
    return sub_216238298((uint64_t)result);
  }
  return result;
}

void *sub_21634B11C(uint64_t a1)
{
  sub_2162384F0(*(void **)(a1 + 8));
  __n128 result = *(void **)(a1 + 64);
  if (result) {
    __n128 result = (void *)sub_2162384F0(result);
  }
  uint64_t v3 = *(unsigned char **)(a1 + 48);
  if (v3) {
    *uint64_t v3 = 0;
  }
  return result;
}

uint64_t sub_21634B15C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_216238840(*(void **)(a1 + 8), *(void **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1, a3);
  if (v6)
  {
    uint64_t v7 = *(void **)(a1 + 64);
    if (v7)
    {
      uint64_t v10 = a2;
      BOOL v9 = *(char **)a2;
      uint64_t v8 = *(char **)(v10 + 8);
      if (*(void *)(a1 + 72) <= (unint64_t)((v8 - v9) >> 1))
      {
        std::string __p = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        p_p = &__p;
        if (v8 == v9)
        {
          uint64_t v12 = 0;
          uint64_t v11 = 0;
        }
        else
        {
          do
          {
            v8 -= 2;
            sub_216192280((uint64_t *)&p_p, v8);
          }
          while (v8 != v9);
          uint64_t v7 = *(void **)(a1 + 64);
          uint64_t v11 = __p;
          uint64_t v12 = v15;
        }
        sub_216238840(v7, v11, (v12 - (unsigned char *)v11) >> 1, a3);
        if (__p)
        {
          uint64_t v15 = __p;
          operator delete(__p);
        }
      }
    }
  }
  return v6;
}

void sub_21634B240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21634B260(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = sub_216238C80(*(void **)(a1 + 8), *a2, (a2[1] - *a2) >> 1, a3);
  if (v6)
  {
    uint64_t v7 = *(void **)(a1 + 64);
    if (v7)
    {
      uint64_t v10 = a2;
      uint64_t v9 = *a2;
      uint64_t v8 = (_WORD *)v10[1];
      if (*(void *)(a1 + 72) <= (unint64_t)(((uint64_t)v8 - v9) >> 1))
      {
        std::string __p = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        p_p = &__p;
        if (v8 == (_WORD *)v9)
        {
          uint64_t v12 = 0;
          uint64_t v11 = 0;
        }
        else
        {
          do
            sub_216192280((uint64_t *)&p_p, --v8);
          while (v8 != (_WORD *)v9);
          uint64_t v7 = *(void **)(a1 + 64);
          uint64_t v11 = __p;
          uint64_t v12 = v15;
        }
        sub_216238C80(v7, (uint64_t)v11, (v12 - v11) >> 1, a3);
        if (__p)
        {
          uint64_t v15 = __p;
          operator delete(__p);
        }
      }
    }
  }
  return v6;
}

void sub_21634B344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_21634B364()
{
  return fwrite("This functionality has not been implemented for mutable dictionary!\n", 0x44uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
}

uint64_t sub_21634B384(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a3)
  {
    if (a2)
    {
      uint64_t v5 = result;
      __n128 result = *(void *)(result + 64);
      if (result)
      {
        sub_2162392FC(result, (uint64_t)&v17);
        sub_21623938C(*(void *)(v5 + 64), (uint64_t)&v15);
        uint64_t v8 = *(void **)(v5 + 64);
        v14[0] = MEMORY[0x263EF8330];
        v14[1] = 0x40000000;
        v14[2] = sub_21634B50C;
        void v14[3] = &unk_264267650;
        v14[4] = a5;
        v14[5] = v5;
        sub_2162394CC(v8, (uint64_t)&v15, 0, a4 >> 1, v5 + 80, (uint64_t)v14);
        uint64_t v9 = v16;
        uint64_t v16 = 0;
        if (v9)
        {
          uint64_t v10 = sub_21620FE6C(v9);
          MEMORY[0x2166CA800](v10, 0x20C4093837F09);
        }
        uint64_t v11 = v15;
        uint64_t v15 = 0;
        if (v11) {
          MEMORY[0x2166CA800](v11, 0x1010C40E4C6A875);
        }
        uint64_t v12 = v18;
        uint64_t v18 = 0;
        if (v12)
        {
          uint64_t v13 = sub_21620FE6C(v12);
          MEMORY[0x2166CA800](v13, 0x20C4093837F09);
        }
        __n128 result = v17;
        uint64_t v17 = 0;
        if (result) {
          return MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
        }
      }
    }
  }
  return result;
}

void sub_21634B4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void **);
  uint64_t v10 = va_arg(va1, void);
  sub_21620FDCC((void ***)va);
  sub_21620FDCC((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21634B50C(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *(void *)(result + 40);
    uint64_t v4 = *(void *)(v3 + 64);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 0x40000000;
    v5[2] = sub_21634B594;
    v5[3] = &unk_26427D1B8;
    void v5[4] = *(void *)(result + 32);
    void v5[5] = v3;
    v5[6] = a3;
    return sub_216239420(v4, a2, (uint64_t)v5);
  }
  return result;
}

void sub_21634B594(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v27 = v28;
  int v26 = 0;
  if (sub_216236B34(*(uint64_t **)(*(void *)(v3 + 48) + 40), a2, &v26))
  {
    int v20 = 0;
    __int16 v21 = 0;
    __int16 v22 = v26;
    int v23 = 0;
    int v24 = &v20;
    uint64_t v4 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    sub_21610B834(__p, off_26797C518);
    uint64_t v6 = sub_216178FA4((uint64_t)&v27, __p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v28 != (void **)v6)
    {
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6[7] + 16))(v6[7]);
      if (&v17 != (void **)v7) {
        sub_21618F924((char *)&v17, *(char **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 1);
      }
    }
    sub_21610B834(__p, off_26797C540[0]);
    uint64_t v8 = sub_216178FA4((uint64_t)&v27, __p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v28 != (void **)v8)
    {
      uint64_t v9 = (*(uint64_t (**)(void *))(*(void *)v8[7] + 16))(v8[7]);
      if (&v14 != (void **)v9) {
        sub_21618F924((char *)&v14, *(char **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 1);
      }
    }
    if (v18 != v17)
    {
      sub_21610B834(__p, off_26797C588);
      uint64_t v10 = sub_216178FA4((uint64_t)&v27, __p);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v11 = (uint64_t *)(*(uint64_t (**)(void *))(*(void *)v10[7] + 16))(v10[7]);
      sub_21634ECA8((void *)(v3 + 16), v11, (uint64_t *)&v17, (uint64_t *)&v14, *(_DWORD *)(v3 + 40));
      uint64_t v25 = *(void *)(v3 + 16) + 2 * ((v5 - v4) >> 1);
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    if (v14)
    {
      uint64_t v15 = v14;
      operator delete(v14);
    }
    if (v17)
    {
      uint64_t v18 = v17;
      operator delete(v17);
    }
  }
  sub_2161936EC((uint64_t)&v27, v28[0]);
}

void sub_21634B824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  sub_2161936EC(v20 - 88, *(void **)(v20 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_21634B894()
{
  return 9;
}

uint64_t sub_21634B89C(uint64_t a1, int a2, uint64_t *a3, unsigned __int8 *a4, unsigned int a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned int a10, unsigned int a11)
{
  unint64_t v12 = a6;
  uint64_t v17 = a10;
  uint64_t v18 = a11;
  int v19 = a2 & 3;
  if (v19 == 1)
  {
    uint64_t v25 = (_DWORD *)(*(void *)(a1 + 16) + (a2 - 1));
    int v26 = v25 + 1;
    int v27 = v25[1];
    if (v27)
    {
      if (a6)
      {
        __int16 v28 = (_WORD)a4 - a9;
        uint64_t v29 = *a3;
        uint64_t v30 = a7 + 24 * *a3;
        if (a11) {
          __int16 v28 = ((_WORD)a4 - a9) | 0x100;
        }
        *(_WORD *)(v30 + 12) = v28;
        *a3 = v29 + 1;
        *(_DWORD *)(v30 + 8) = v27;
        if (v29 + 1 >= a6) {
          return 1;
        }
      }
      else
      {
        ++*a3;
      }
    }
    if (a8 != -1)
    {
      if ((a5 & 1) == 0)
      {
        unsigned int v42 = *v25;
        unint64_t v41 = (unsigned __int8 *)(v25 + 2);
        unint64_t v43 = (unint64_t)v26 + v42;
        if ((unint64_t)v41 < v43)
        {
          unsigned int v44 = a5 + 1;
          __int16 v45 = (_WORD)a4 - a9;
          while (1)
          {
            int v46 = v41 + 1;
            uint64_t v47 = *v41;
            if (v44 >= v47 && (v47 & 1) != 0)
            {
              int v49 = *v46;
              if (v49 >= a8)
              {
                if (v49 > a8) {
                  return 0;
                }
                unint64_t v50 = v12;
                uint64_t v51 = v18;
                if (!v18) {
                  a11 = 0;
                }
                uint64_t v52 = v17;
                int v53 = sub_21634DA8C((uint64_t)(v41 + 2), (uint64_t)a4, (int)v47 - 1, v17, &a11);
                uint64_t v17 = v52;
                unint64_t v12 = v50;
                uint64_t v18 = v51;
                if (!v53)
                {
                  if (v50)
                  {
                    uint64_t v54 = *a3;
                    uint64_t v55 = a7 + 24 * *a3;
                    *(_WORD *)(v55 + 12) = v45 + v47 - 1;
                    unsigned int v56 = (_WORD *)(v55 + 12);
                    if (a11) {
                      *unsigned int v56 = (v45 + v47 - 1) | 0x100;
                    }
                    int v57 = *(_DWORD *)&v46[v47];
                    *a3 = v54 + 1;
                    *(_DWORD *)(a7 + 24 * v54 + 8) = v57;
                    if (v54 + 1 >= v50) {
                      return 1;
                    }
                  }
                  else
                  {
                    ++*a3;
                  }
                }
              }
            }
            uint64_t result = 0;
            unint64_t v41 = &v46[v47 + 4];
            if ((unint64_t)v41 >= v43) {
              return result;
            }
          }
        }
      }
      return 0;
    }
    if (!a5) {
      return 0;
    }
    unsigned int v59 = *v25;
    uint64_t v58 = (unsigned __int8 *)(v25 + 2);
    unint64_t v60 = (unint64_t)v26 + v59;
    if ((unint64_t)v58 >= v60) {
      return 0;
    }
    __int16 v61 = (_WORD)a4 - a9;
    while (1)
    {
      char v62 = v58 + 1;
      uint64_t v63 = *v58;
      if (v63 <= a5)
      {
        if (a5)
        {
          if ((v63 & 1) == 0) {
            goto LABEL_75;
          }
          unsigned int v72 = *v62;
          unsigned int v73 = *a4;
          if (v72 < v73) {
            goto LABEL_75;
          }
          if (v72 > v73) {
            return 0;
          }
          unint64_t v74 = v12;
          uint64_t v75 = v18;
          if (!v18) {
            a11 = 0;
          }
          uint64_t v76 = v17;
          int v77 = sub_21634DA8C((uint64_t)(v58 + 2), (uint64_t)(a4 + 1), (int)v63 - 1, v17, &a11);
          uint64_t v17 = v76;
          unint64_t v12 = v74;
          uint64_t v18 = v75;
          if (v77) {
            goto LABEL_75;
          }
          if (!v74) {
            goto LABEL_74;
          }
        }
        else
        {
          if (v63) {
            goto LABEL_75;
          }
          unint64_t v64 = v12;
          uint64_t v65 = v18;
          if (!v18) {
            a11 = 0;
          }
          uint64_t v66 = v17;
          int v67 = sub_21634DA8C((uint64_t)(v58 + 1), (uint64_t)a4, v63, v17, &a11);
          uint64_t v17 = v66;
          unint64_t v12 = v64;
          uint64_t v18 = v65;
          if (v67) {
            goto LABEL_75;
          }
          if (!v64)
          {
LABEL_74:
            ++*a3;
            goto LABEL_75;
          }
        }
        uint64_t v68 = *a3;
        uint64_t v69 = a7 + 24 * *a3;
        *(_WORD *)(v69 + 12) = v61 + v63;
        std::string::size_type v70 = (_WORD *)(v69 + 12);
        if (a11) {
          *std::string::size_type v70 = (v61 + v63) | 0x100;
        }
        int v71 = *(_DWORD *)&v62[v63];
        *a3 = v68 + 1;
        *(_DWORD *)(a7 + 24 * v68 + 8) = v71;
        if (v68 + 1 >= v12) {
          return 1;
        }
      }
LABEL_75:
      uint64_t result = 0;
      uint64_t v58 = &v62[v63 + 4];
      if ((unint64_t)v58 >= v60) {
        return result;
      }
    }
  }
  if (v19 == 2)
  {
    uint64_t v31 = *(void *)(a1 + 8);
    uint64_t v32 = (a2 - 2);
    int v33 = *(_DWORD *)(v31 + v32);
    if (v33)
    {
      if (!a6)
      {
        ++*a3;
        if (!a5) {
          return 0;
        }
LABEL_78:
        if (a4)
        {
          if ((a5 & 1) == 0)
          {
            int v78 = v17;
            int v79 = v18;
            std::string::size_type v80 = (uint64_t *)sub_216334794(*(unsigned __int16 *)a4, v17);
            if (v80) {
              return sub_21634DBCC(a1, a2, v81, (uint64_t)a3, (uint64_t)(a4 + 2), a5 - 2, a6, a7, (unint64_t)(v80[1] - *v80) >> 1, *v80, a9, v78, v79);
            }
          }
        }
        unint64_t v82 = *a4;
        uint64_t v83 = v82 >> 5;
        if (((*(_DWORD *)(v31 + v32 + 4 * (v82 >> 5) + 4) >> v82) & 1) == 0) {
          return 0;
        }
        if (v82 >= 0x20)
        {
          int v84 = 0;
          if (v83 <= 1) {
            uint64_t v83 = 1;
          }
          else {
            uint64_t v83 = v83;
          }
          uint64_t v85 = (unsigned int *)(v32 + v31 + 4);
          do
          {
            unsigned int v86 = *v85++;
            uint8x8_t v87 = (uint8x8_t)vcnt_s8((int8x8_t)v86);
            v87.i16[0] = vaddlv_u8(v87);
            v84 += v87.i32[0];
            --v83;
          }
          while (v83);
        }
        return sub_21634B89C(a1) != 0;
      }
      __int16 v34 = (_WORD)a4 - a9;
      uint64_t v35 = *a3;
      uint64_t v36 = a7 + 24 * *a3;
      if (a11) {
        __int16 v34 = ((_WORD)a4 - a9) | 0x100;
      }
      *(_WORD *)(v36 + 12) = v34;
      *a3 = v35 + 1;
      *(_DWORD *)(v36 + 8) = v33;
      if (v35 + 1 >= a6) {
        return 1;
      }
    }
    if (!a5) {
      return 0;
    }
    goto LABEL_78;
  }
  if (v19 != 3) {
    return 0;
  }
  int v20 = *(_DWORD *)(*(void *)(a1 + 8) + (a2 - 3));
  if (!v20) {
    goto LABEL_9;
  }
  if (!a6)
  {
    ++*a3;
    if (a5) {
      goto LABEL_25;
    }
    return 0;
  }
  __int16 v21 = (_WORD)a4 - a9;
  uint64_t v22 = *a3;
  uint64_t v23 = a7 + 24 * *a3;
  if (a11) {
    __int16 v21 = ((_WORD)a4 - a9) | 0x100;
  }
  *(_WORD *)(v23 + 12) = v21;
  *a3 = v22 + 1;
  *(_DWORD *)(v23 + 8) = v20;
  if (v22 + 1 >= a6) {
    return 1;
  }
LABEL_9:
  if (!a5) {
    return 0;
  }
LABEL_25:
  if (a4)
  {
    if ((a5 & 1) == 0)
    {
      int v37 = v18;
      char v38 = (uint64_t *)sub_216334794(*(unsigned __int16 *)a4, a10);
      if (v38) {
        return sub_21634DBCC(a1, a2, v39, (uint64_t)a3, (uint64_t)(a4 + 2), a5 - 2, v12, a7, (unint64_t)(v38[1] - *v38) >> 1, *v38, a9, a10, v37);
      }
    }
  }
  uint64_t result = sub_21634B89C(a1);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_21634BE78(uint64_t a1, int a2, unsigned __int16 *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned char *a9, void *a10)
{
  uint64_t v11 = a7;
  unint64_t v14 = a3;
  uint64_t v17 = a9;
  int v76 = a6;
  int v18 = a2 & 3;
  if (v18 == 1)
  {
    uint64_t v31 = (unsigned int *)(*(void *)(a1 + 16) + (a2 - 1));
    if (a5 != -1)
    {
      if ((a4 & 1) == 0)
      {
        uint64_t v32 = (unsigned __int8 *)(v31 + 2);
        unint64_t v33 = (unint64_t)v31 + *v31 + 4;
        if ((unint64_t)(v31 + 2) < v33)
        {
          uint64_t v75 = a10;
          uint64_t v71 = a8;
          int v34 = a4 + 1;
          while (1)
          {
            uint64_t v36 = v32 + 1;
            uint64_t v35 = *v32;
            if (v34 == v35)
            {
              int v37 = *v36;
              if (v37 >= a5)
              {
                if (v37 > a5) {
                  return 0;
                }
                char v38 = v17;
                uint64_t v39 = v11;
                if (!a6) {
                  int v76 = 0;
                }
                UniChar __src = v32 + 2;
                int v40 = sub_21634DA8C((uint64_t)(v32 + 2), (uint64_t)v14, a4, 14, &v76);
                uint64_t v11 = v39;
                uint64_t v17 = v38;
                if (!v40 && *(_DWORD *)&v36[v35] == v11) {
                  break;
                }
              }
            }
            uint64_t result = 0;
            uint64_t v32 = &v36[v35 + 4];
            if ((unint64_t)v32 >= v33) {
              return result;
            }
          }
          memcpy(v38, __src, a4);
          uint64_t v65 = &v38[~v71 + v35];
LABEL_53:
          void *v75 = v65;
          return 1;
        }
      }
      return 0;
    }
    uint64_t v52 = (int *)(v31 + 1);
    if (!a4)
    {
      int v51 = *v52;
LABEL_55:
      if (v51 == a7)
      {
        *a10 = &a9[-a8];
        return 1;
      }
      return 0;
    }
    unsigned int v54 = *v31;
    int v53 = (unsigned __int8 *)(v31 + 2);
    uint64_t v55 = (unsigned __int8 *)v52 + v54;
    if (v53 >= v55) {
      return 0;
    }
    __srcb = (char *)a3 + 1;
    uint64_t v75 = a10;
    while (1)
    {
      int v57 = v53 + 1;
      size_t v56 = *v53;
      if (v56 == a4)
      {
        if (a4)
        {
          unsigned int v62 = *v57;
          unsigned int v63 = *v14;
          if (v62 < v63) {
            goto LABEL_49;
          }
          if (v62 > v63) {
            return 0;
          }
          uint64_t v58 = v11;
          if (!a6) {
            int v76 = 0;
          }
          uint64_t v59 = (uint64_t)(v53 + 2);
          uint64_t v60 = (uint64_t)__srcb;
          int v61 = a4 - 1;
        }
        else
        {
          uint64_t v58 = v11;
          if (!a6) {
            int v76 = 0;
          }
          uint64_t v59 = (uint64_t)(v53 + 1);
          uint64_t v60 = (uint64_t)v14;
          int v61 = a4;
        }
        int v64 = sub_21634DA8C(v59, v60, v61, 14, &v76);
        uint64_t v11 = v58;
        if (!v64 && *(_DWORD *)&v57[v56] == v58)
        {
          memcpy(a9, v57, v56);
          uint64_t v65 = &a9[v56 - a8];
          goto LABEL_53;
        }
      }
LABEL_49:
      uint64_t result = 0;
      int v53 = &v57[v56 + 4];
      if (v53 >= v55) {
        return result;
      }
    }
  }
  if (v18 == 2)
  {
    uint64_t v75 = a10;
    uint64_t v42 = *(void *)(a1 + 8);
    uint64_t v43 = (a2 - 2);
    unsigned int v44 = (_DWORD *)(v42 + v43);
    if (a4)
    {
      if (a3)
      {
        if ((a4 & 1) == 0)
        {
          uint64_t v47 = (uint64_t *)sub_216334794(*a3, 14);
          unsigned int v44 = (_DWORD *)(v42 + v43);
          uint64_t v24 = a7;
          uint64_t v17 = a9;
          int v25 = a6;
          unint64_t v14 = a3;
          if (v47)
          {
            uint64_t v26 = (uint64_t)(a3 + 1);
            uint64_t v27 = (a4 - 2);
            uint64_t v28 = *v47;
            unint64_t v29 = (unint64_t)(v47[1] - *v47) >> 1;
            return sub_21634DF90(a1, a2, v23, v26, v27, v29, v28, v25, v24, a8, v17);
          }
        }
      }
      unint64_t v48 = *v14;
      if ((*(_DWORD *)((char *)v44 + ((v48 >> 3) & 0x1C) + 4) >> v48))
      {
        *uint64_t v17 = v48;
        unint64_t v49 = *v14;
        unint64_t v50 = v49 >> 5;
        if (v49 >= 0x20)
        {
          int v66 = 0;
          if (v50 <= 1) {
            uint64_t v67 = 1;
          }
          else {
            uint64_t v67 = v50;
          }
          uint64_t v68 = (unsigned int *)(v43 + v42 + 4);
          do
          {
            unsigned int v69 = *v68++;
            uint8x8_t v70 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
            v70.i16[0] = vaddlv_u8(v70);
            v66 += v70.i32[0];
            --v67;
          }
          while (v67);
        }
        if (sub_21634BE78(a1)) {
          return 1;
        }
      }
    }
    else if (*v44 == a7)
    {
      uint64_t v65 = &a9[-a8];
      goto LABEL_53;
    }
    return 0;
  }
  if (v18 != 3) {
    return 0;
  }
  if (!a4)
  {
    int v51 = *(_DWORD *)(*(void *)(a1 + 8) + (a2 - 3));
    goto LABEL_55;
  }
  if (a3)
  {
    if ((a4 & 1) == 0)
    {
      uint64_t v22 = (uint64_t *)sub_216334794(*a3, 14);
      uint64_t v24 = a7;
      uint64_t v17 = a9;
      int v25 = a6;
      unint64_t v14 = a3;
      if (v22)
      {
        uint64_t v26 = (uint64_t)(a3 + 1);
        uint64_t v27 = (a4 - 2);
        uint64_t v28 = *v22;
        unint64_t v29 = (unint64_t)(v22[1] - *v22) >> 1;
        return sub_21634DF90(a1, a2, v23, v26, v27, v29, v28, v25, v24, a8, v17);
      }
    }
  }
  *uint64_t v17 = *v14;
  uint64_t result = sub_21634BE78(a1);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_21634C304(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned char *a8, uint8x8_t a9, void *a10)
{
  int v12 = a5;
  int v16 = a2 & 3;
  switch(v16)
  {
    case 1:
      __int16 v21 = (_DWORD *)(*(void *)(a1 + 16) + (a2 - 1));
      if (a4 || !a5 || v21[1] != a6)
      {
        unsigned int v23 = *v21;
        uint64_t v22 = (char *)(v21 + 2);
        unint64_t v24 = *(void *)(a1 + 16) + (a2 - 1) + v23 + 4;
        if ((unint64_t)v22 < v24)
        {
          while (1)
          {
            unsigned int v27 = *v22;
            int v25 = v22 + 1;
            size_t v26 = v27;
            BOOL v28 = v27 >= a4;
            BOOL v29 = v27 > a4;
            if (!v12) {
              BOOL v28 = v29;
            }
            if (v28)
            {
              int v30 = memcmp(v25, a3, (int)a4);
              if (v30 > 0) {
                return 0;
              }
              if (!v30 && *(_DWORD *)&v25[v26] == a6) {
                break;
              }
            }
            uint64_t v22 = &v25[v26 + 4];
            if ((unint64_t)v22 >= v24) {
              return 0;
            }
          }
          memcpy(a8, v25, v26);
          int v40 = &a8[v26 - a7];
          goto LABEL_33;
        }
        return 0;
      }
      break;
    case 2:
      uint64_t v31 = *(void *)(a1 + 8);
      uint64_t v32 = (a2 - 2);
      unint64_t v33 = (_DWORD *)(v31 + v32);
      if (a4)
      {
        unint64_t v34 = *a3;
        if ((*(_DWORD *)((char *)v33 + ((v34 >> 3) & 0x1C) + 4) >> v34))
        {
          *a8 = v34;
          unint64_t v35 = *a3;
          unint64_t v36 = v35 >> 5;
          if (v35 >= 0x20)
          {
            int v37 = 0;
            if (v36 <= 1) {
              uint64_t v41 = 1;
            }
            else {
              uint64_t v41 = v36;
            }
            uint64_t v42 = (unsigned int *)(v32 + v31 + 4);
            do
            {
              unsigned int v43 = *v42++;
              a9 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
              a9.i16[0] = vaddlv_u8(a9);
              v37 += a9.i32[0];
              --v41;
            }
            while (v41);
          }
          else
          {
            int v37 = 0;
          }
          a9.i32[0] = v33[v36 + 1] & ~(-1 << v35);
          uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
          v44.i16[0] = vaddlv_u8(v44);
          uint64_t result = sub_21634C304(a1, v33[v44.i32[0] + v37 + 10], a3 + 1, a4 - 1, a5, a6, a7, a8 + 1, a10);
LABEL_40:
          if (!result) {
            return result;
          }
          return 1;
        }
        return 0;
      }
      if (!a5 || *v33 != a6)
      {
        unint64_t v45 = 0;
        uint64_t v46 = v32 + v31 + 4;
        while (1)
        {
          uint64_t v47 = v45 >> 5 <= 1 ? 1 : v45 >> 5;
          *a8 = v45;
          unsigned int v48 = v33[(v45 >> 5) + 1];
          if ((v48 >> v45))
          {
            if (v45 >= 0x20u)
            {
              int v49 = 0;
              unint64_t v50 = (unsigned int *)v46;
              do
              {
                unsigned int v51 = *v50++;
                a9 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
                a9.i16[0] = vaddlv_u8(a9);
                v49 += a9.i32[0];
                --v47;
              }
              while (v47);
            }
            else
            {
              int v49 = 0;
            }
            a9.i32[0] = v48 & ~(-1 << (v45 & 0x1F));
            uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
            v52.i16[0] = vaddlv_u8(v52);
            if (sub_21634C304(a1, v33[v49 + v52.i32[0] + 10], a3, 0, 1, a6, a7, a8 + 1, a10))break; {
          }
            }
          uint64_t result = 0;
          if (++v45 == 256) {
            return result;
          }
        }
        return 1;
      }
      break;
    case 3:
      uint64_t v17 = *(void *)(a1 + 8);
      uint64_t v18 = (a2 - 3);
      int v19 = (_DWORD *)(v17 + v18);
      if (a4)
      {
        *a8 = *a3;
        uint64_t result = sub_21634C304(a1, v19[*a3 + 1], a3 + 1, a4 - 1, a5, a6, a7, a8 + 1, a10);
        goto LABEL_40;
      }
      if (!a5 || *v19 != a6)
      {
        uint64_t v38 = 0;
        uint64_t v39 = v18 + v17 + 4;
        while (1)
        {
          *a8 = v38;
          uint64_t result = sub_21634C304(a1, *(unsigned int *)(v39 + 4 * v38), a3, 0, 1, a6, a7, a8 + 1, a10);
          if (result) {
            break;
          }
          if (++v38 == 256) {
            return result;
          }
        }
        return 1;
      }
      break;
    default:
      return 0;
  }
  int v40 = &a8[-a7];
LABEL_33:
  *a10 = v40;
  return 1;
}

uint64_t sub_21634C6B4(int *a1, unsigned char *a2, unsigned int a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v6 = 0;
  sub_21634C704((uint64_t)a1, *a1, a2, a3, 0, -1, 0, a4, (uint64_t)a5, a5, &v6, (uint64_t)a2);
  return v6;
}

uint64_t sub_21634C704(uint64_t a1, int a2, unsigned char *a3, unsigned int a4, int a5, int a6, int a7, unsigned int a8, uint64_t a9, unsigned char *a10, void *a11, uint64_t a12)
{
  int v66 = a7;
  int v17 = a2 & 3;
  if (v17 != 1)
  {
    if (v17 == 2)
    {
      uint64_t v30 = *(void *)(a1 + 8);
      uint64_t v31 = (a2 - 2);
      uint64_t v32 = (_DWORD *)(v30 + v31);
      if (!a4)
      {
        if (!a5 || *v32 != a8)
        {
          unint64_t v53 = 0;
          uint64_t v54 = v31 + v30 + 4;
          uint64_t v20 = 1;
          while (1)
          {
            uint64_t v55 = v53 >> 5 <= 1 ? 1 : v53 >> 5;
            *a10 = v53;
            if ((v32[(v53 >> 5) + 1] >> v53))
            {
              if (v53 >= 0x20u)
              {
                int v56 = 0;
                int v57 = (unsigned int *)v54;
                do
                {
                  unsigned int v58 = *v57++;
                  uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
                  v59.i16[0] = vaddlv_u8(v59);
                  v56 += v59.i32[0];
                  --v55;
                }
                while (v55);
              }
              if (sub_21634C704(a1)) {
                break;
              }
            }
            if (++v53 == 256) {
              return 0;
            }
          }
          return v20;
        }
        goto LABEL_49;
      }
      if (a3)
      {
        if ((a4 & 1) == 0)
        {
          unint64_t v33 = (uint64_t *)sub_216334794(*(unsigned __int16 *)a3, 14);
          if (v33)
          {
            uint64_t v35 = *v33;
            unint64_t v36 = (unint64_t)(v33[1] - *v33) >> 1;
            return sub_21634E384(a1, a2, v34, (uint64_t)(a3 + 2), a4 - 2, v36, v35, a7, a8, a9, a10);
          }
        }
      }
      *a10 = *a3;
      unint64_t v39 = *a3;
      uint64_t v40 = v39 >> 5;
      if ((v32[(v39 >> 5) + 1] >> v39))
      {
        if (v39 >= 0x20)
        {
          int v60 = 0;
          if (v40 <= 1) {
            uint64_t v40 = 1;
          }
          else {
            uint64_t v40 = v40;
          }
          int v61 = (unsigned int *)(v31 + v30 + 4);
          do
          {
            unsigned int v62 = *v61++;
            uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
            v63.i16[0] = vaddlv_u8(v63);
            v60 += v63.i32[0];
            --v40;
          }
          while (v40);
        }
        uint64_t v38 = a1;
LABEL_94:
        if (sub_21634C704(v38)) {
          return 1;
        }
      }
    }
    else if (v17 == 3)
    {
      if (a4)
      {
        if (a3)
        {
          if ((a4 & 1) == 0)
          {
            uint64_t v18 = (uint64_t *)sub_216334794(*(unsigned __int16 *)a3, 14);
            if (v18) {
              return sub_21634E384(a1, a2, v19, (uint64_t)(a3 + 2), a4 - 2, (unint64_t)(v18[1] - *v18) >> 1, *v18, a7, a8, a9, a10);
            }
          }
        }
        *a10 = *a3;
        uint64_t v38 = a1;
        goto LABEL_94;
      }
      if (!a5 || *(_DWORD *)(*(void *)(a1 + 8) + (a2 - 3)) != a8)
      {
        for (uint64_t i = 0; i != 256; ++i)
        {
          *a10 = i;
          uint64_t v20 = 1;
          if (sub_21634C704(a1)) {
            break;
          }
          uint64_t v20 = 0;
        }
        return v20;
      }
LABEL_49:
      uint64_t v42 = &a10[-a9];
      goto LABEL_50;
    }
    return 0;
  }
  uint64_t v22 = (unsigned int *)(*(void *)(a1 + 16) + (a2 - 1));
  if (!a4 && a5 && v22[1] == a8) {
    goto LABEL_49;
  }
  if (a6 == -1)
  {
    unsigned int v43 = (unsigned __int8 *)(v22 + 2);
    unint64_t v44 = (unint64_t)v22 + *v22 + 4;
    if ((unint64_t)(v22 + 2) >= v44) {
      return 0;
    }
    if ((uint64_t)&a3[-a12] >= 0) {
      uint64_t v45 = (unint64_t)&a3[-a12] & 1;
    }
    else {
      uint64_t v45 = -(uint64_t)((unint64_t)&a3[-a12] & 1);
    }
    while (1)
    {
      uint64_t v47 = v43 + 1;
      size_t v46 = *v43;
      if (a5)
      {
        if (v46 < a4) {
          goto LABEL_75;
        }
      }
      else if (v46 <= a4)
      {
        goto LABEL_75;
      }
      if (a4)
      {
        if (v46)
        {
          unsigned int v48 = *v47;
          unsigned int v49 = *a3;
          if (v48 >= v49)
          {
            if (v48 > v49) {
              return 0;
            }
            if (!a7) {
              int v66 = 0;
            }
            uint64_t v50 = (uint64_t)(v43 + 2);
            uint64_t v51 = (uint64_t)(a3 + 1);
            int v52 = a4 - 1;
            goto LABEL_73;
          }
        }
      }
      else if (a4)
      {
        if ((v46 & 1) == 0) {
          goto LABEL_70;
        }
      }
      else if (v45 == (v46 & 1))
      {
LABEL_70:
        if (!a7) {
          int v66 = 0;
        }
        uint64_t v50 = (uint64_t)(v43 + 1);
        uint64_t v51 = (uint64_t)a3;
        int v52 = a4;
LABEL_73:
        if (!sub_21634DA8C(v50, v51, v52, 14, &v66) && *(_DWORD *)&v47[v46] == a8)
        {
          memcpy(a10, v47, v46);
          uint64_t v42 = &a10[v46 - a9];
          goto LABEL_50;
        }
      }
LABEL_75:
      unsigned int v43 = &v47[v46 + 4];
      if ((unint64_t)v43 >= v44) {
        return 0;
      }
    }
  }
  if (a4) {
    return 0;
  }
  unsigned int v23 = (unsigned __int8 *)(v22 + 2);
  unint64_t v24 = (unint64_t)v22 + *v22 + 4;
  if ((unint64_t)(v22 + 2) >= v24) {
    return 0;
  }
  unsigned int v25 = a4 + 1;
  while (1)
  {
    size_t v26 = v23 + 1;
    uint64_t v27 = *v23;
    if ((v27 & 1) == 0) {
      goto LABEL_25;
    }
    if (!a5) {
      break;
    }
    if (v27 > a4) {
      goto LABEL_19;
    }
LABEL_25:
    uint64_t v20 = 0;
    unsigned int v23 = &v26[v27 + 4];
    if ((unint64_t)v23 >= v24) {
      return v20;
    }
  }
  if (v25 >= v27) {
    goto LABEL_25;
  }
LABEL_19:
  int v28 = *v26;
  if (v28 < a6) {
    goto LABEL_25;
  }
  if (v28 > a6) {
    return 0;
  }
  if (!a7) {
    int v66 = 0;
  }
  BOOL v29 = v23 + 2;
  if (sub_21634DA8C((uint64_t)(v23 + 2), (uint64_t)a3, a4, 14, &v66) || *(_DWORD *)&v26[v27] != a8) {
    goto LABEL_25;
  }
  memcpy(a10, v29, (v27 - 1));
  uint64_t v42 = &a10[~a9 + v27];
LABEL_50:
  *a11 = v42;
  return 1;
}

uint64_t sub_21634CD20(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7, uint8x8_t a8)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v21 = a4;
  if (!sub_21628CFAC((uint64_t)a1, *a1, (unsigned __int8 *)a2, a3, &v21, a5, (unint64_t *)&v20, a7, a8, 0, (uint64_t)a2)&& a6 != 0&& a2 != 0&& a3 != 0)
  {
    unint64_t v18 = sub_2161846A4((uint64_t)a2, a3 >> 1);
    uint64_t v19 = 2 * v18;
    if (2 * v18)
    {
      uint64_t v28 = 0;
      memset(v27, 0, sizeof(v27));
      long long v24 = 0u;
      uint64_t v25 = 0;
      v22[0] = a1;
      v22[1] = 0;
      v22[2] = 0;
      v22[3] = a2;
      void v22[4] = a3;
      v22[5] = a5;
      long long v23 = (unint64_t)a7;
      LODWORD(v24) = 2;
      size_t v26 = (char *)v27 + (a3 - v19) + 2;
      LOBYTE(v27[0]) = 1;
      BYTE1(v27[0]) = a3 != v19;
      sub_21634CE98((uint64_t)v22, *a1, a2, a3 - v19, &a2[(a3 - v19)], v19, 0, 0, 0.0, &v20, 0, 0);
    }
  }
  return v20;
}

BOOL sub_21634CE98(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, char *a5, uint64_t a6, unsigned __int16 *a7, unsigned int a8, double a9, uint64_t *a10, BOOL a11, int a12)
{
  char v13 = a5;
  float v16 = *(float *)&a9;
  BOOL v125 = a11;
  uint64_t v130 = *MEMORY[0x263EF8340];
  int v19 = a2 & 3;
  if ((a2 & 2) == 0)
  {
    if (v19 == 1)
    {
      uint64_t v20 = (unsigned int *)(*(void *)(*(void *)a1 + 16) + (a2 - 1));
      int v21 = a6 | a4 | a8;
      int v22 = *(_DWORD *)(a1 + 64);
      if (a4 < 2)
      {
        char v35 = 0;
      }
      else
      {
        uint64_t v23 = 0;
        while (word_2163CBA2C[v23] != *(_WORD *)a3)
        {
          if (++v23 == 8)
          {
            long long v24 = 0;
            goto LABEL_52;
          }
        }
        long long v24 = &word_2163CBA2C[v23];
LABEL_52:
        if (v24) {
          BOOL v45 = (char *)v24 - (char *)word_2163CBA2C == -2;
        }
        else {
          BOOL v45 = 1;
        }
        char v35 = !v45;
      }
      if (v22 != 1) {
        char v35 = 1;
      }
      if (v21 && (v35 & 1) != 0) {
        goto LABEL_62;
      }
      unsigned int v61 = v20[1];
      if (a12) {
        BOOL v62 = 0;
      }
      else {
        BOOL v62 = v22 == 2;
      }
      int v63 = !v62;
      if (v61 && v63)
      {
        if (*(void *)(a1 + 40))
        {
          if (*(unsigned char *)(a1 + 81)) {
            BOOL v64 = !a11;
          }
          else {
            BOOL v64 = 1;
          }
          float v65 = 0.0;
          if (!v64) {
            float v65 = v16;
          }
          uint64_t v66 = *a10;
          uint64_t v67 = *(void *)(a1 + 48) + 24 * *a10;
          *(_WORD *)(v67 + 12) = *(_DWORD *)(a1 + 88) - a1 + *(_DWORD *)(a1 + 72) - 98;
          *(unsigned char *)(v67 + 1) = a11;
          *(unsigned char *)uint64_t v67 = *(unsigned char *)(a1 + 82);
          *(float *)(v67 + 4) = v65;
          *(_DWORD *)(v67 + 8) = v61;
          *a10 = v66 + 1;
          if ((unint64_t)(v66 + 1) >= *(void *)(a1 + 40)) {
            return 1;
          }
        }
        else
        {
          ++*a10;
        }
      }
      if (v21 || v22 == 2)
      {
LABEL_62:
        size_t v46 = (char *)(v20 + 2);
        unint64_t v47 = (unint64_t)v20 + *v20 + 4;
        if ((unint64_t)(v20 + 2) < v47)
        {
          unsigned int v118 = a6;
          size_t __na = (int)a4;
          __int16 v115 = a1 + 98;
          uint64_t v116 = a4;
          while (1)
          {
            unsigned int v50 = *v46;
            unsigned int v49 = v46 + 1;
            uint64_t v48 = v50;
            if (v50 >= a4 && (!a4 || !memcmp(v49, a3, __na)))
            {
              uint64_t v51 = *(void *)(a1 + 88);
              int v52 = v13;
              uint64_t v53 = *(void *)(a1 + 72);
              v129[0] = v16;
              v128[0] = a11;
              uint64_t v54 = v52;
              if (sub_21634E798(a1, &v49[v116], (v48 - a4), v52, v118, a7, a8, *(void *)(a1 + 56), v128, a12, v129))
              {
                if (*(void *)(a1 + 40))
                {
                  float v55 = v129[0];
                  int v56 = *(_DWORD *)&v49[v48];
                  unsigned __int8 v57 = v128[0];
                  if (*(unsigned char *)(a1 + 81)) {
                    BOOL v58 = v128[0] == 0;
                  }
                  else {
                    BOOL v58 = 1;
                  }
                  if (v58) {
                    float v55 = 0.0;
                  }
                  uint64_t v59 = *a10;
                  uint64_t v60 = *(void *)(a1 + 48) + 24 * *a10;
                  *(_WORD *)(v60 + 12) = *(_WORD *)(a1 + 88) - v115 + *(_DWORD *)(a1 + 72);
                  *(unsigned char *)(v60 + 1) = v57;
                  *(unsigned char *)uint64_t v60 = *(unsigned char *)(a1 + 82);
                  *(float *)(v60 + 4) = v55;
                  *(_DWORD *)(v60 + 8) = v56;
                  *a10 = v59 + 1;
                  if ((unint64_t)(v59 + 1) >= *(void *)(a1 + 40)) {
                    return 1;
                  }
                }
                else
                {
                  ++*a10;
                }
              }
              *(void *)(a1 + 72) = v53;
              *(void *)(a1 + 88) = v51;
              char v13 = v54;
            }
            size_t v46 = &v49[v48 + 4];
            if ((unint64_t)v46 >= v47) {
              return 0;
            }
          }
        }
        return 0;
      }
    }
    return 0;
  }
  uint64_t v25 = *(void *)(*(void *)a1 + 8);
  size_t v26 = (int *)(v25 + (a2 & 0xFFFFFFFC));
  if (v19 == 3) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v25 + (a2 & 0xFFFFFFFC);
  }
  int v28 = *v26;
  int v29 = *(_DWORD *)(a1 + 64);
  if (v29 == 2)
  {
    uint64_t v30 = a6;
    if (a6 | a4 | a8) {
      goto LABEL_119;
    }
    if (a12 && v28)
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 81)) {
          BOOL v36 = !a11;
        }
        else {
          BOOL v36 = 1;
        }
        a9 = 0.0;
        if (!v36) {
          *(float *)&a9 = v16;
        }
        uint64_t v37 = *a10;
        uint64_t v38 = *(void *)(a1 + 48) + 24 * *a10;
        *(_WORD *)(v38 + 12) = *(_DWORD *)(a1 + 88) - a1 + *(_DWORD *)(a1 + 72) - 98;
        *(unsigned char *)(v38 + 1) = a11;
        *(unsigned char *)uint64_t v38 = *(unsigned char *)(a1 + 82);
        *(_DWORD *)(v38 + 4) = LODWORD(a9);
        *(_DWORD *)(v38 + 8) = v28;
        *a10 = v37 + 1;
        if ((unint64_t)(v37 + 1) >= *(void *)(a1 + 40)) {
          return 1;
        }
      }
      else
      {
        ++*a10;
      }
    }
    if (!*(unsigned char *)(a1 + 97)) {
      goto LABEL_119;
    }
    unint64_t v68 = 0;
    uint64_t v69 = *(void *)(a1 + 72);
    uint64_t v117 = (unsigned int *)(v27 + 4);
    uint64_t v119 = v27;
    while (1)
    {
      uint64_t v70 = v68 >> 5;
      if (v68 >> 5 <= 1) {
        uint64_t v70 = 1;
      }
      *(void *)(a1 + 72) = v69 + 1;
      if (v19 == 3) {
        break;
      }
      unsigned int v72 = v26[(v68 >> 5) + 1];
      if ((v72 >> v68))
      {
        if ((v68 & 0xE0) != 0)
        {
          int v73 = 0;
          unint64_t v74 = v117;
          do
          {
            unsigned int v75 = *v74++;
            a9 = COERCE_DOUBLE(vcnt_s8((int8x8_t)v75));
            LOWORD(a9) = vaddlv_u8(*(uint8x8_t *)&a9);
            v73 += LODWORD(a9);
            --v70;
          }
          while (v70);
        }
        else
        {
          int v73 = 0;
        }
        LODWORD(a9) = v72 & ~(-1 << (v68 & 0x1F));
        uint8x8_t v76 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&a9);
        v76.i16[0] = vaddlv_u8(v76);
        uint64_t v71 = *(unsigned int *)(v27 + 4 * (v73 + v76.i32[0]) + 40);
LABEL_117:
        uint64_t v77 = 1;
        HIDWORD(v114) = 1;
        LOBYTE(v114) = a11;
        int v78 = sub_21634CE98(a1, v71, a3, 0, v13, 0, a7, 0, v16, a10, v114);
        uint64_t v27 = v119;
        if (v78) {
          return v77;
        }
      }
      uint64_t v69 = *(void *)(a1 + 72) - 1;
      *(void *)(a1 + 72) = v69;
      if (++v68 == 256) {
        goto LABEL_119;
      }
    }
    uint64_t v71 = v26[v68 + 1];
    goto LABEL_117;
  }
  uint64_t v30 = a6;
  if (v29 == 1)
  {
    if (!a4 && v28)
    {
      unsigned int v39 = a6;
      if (!a6
        || a6 <= 3
        && (unint64_t v40 = *(void *)(a1 + 88) - (a1 + 98), v40 >= 2)
        && (v40 & 0x8000000000000001) != 1
        && *(unsigned __int16 *)((v40 & 0xFFFFFFFFFFFFFFFELL) + a1 + 98 - 2) == *(unsigned __int16 *)a5)
      {
        if (*(void *)(a1 + 40))
        {
          if (*(unsigned char *)(a1 + 81)) {
            BOOL v41 = !a11;
          }
          else {
            BOOL v41 = 1;
          }
          float v42 = 0.0;
          if (!v41) {
            float v42 = v16;
          }
          uint64_t v43 = *a10;
          uint64_t v44 = *(void *)(a1 + 48) + 24 * *a10;
          *(_WORD *)(v44 + 12) = *(_DWORD *)(a1 + 88) - a1 + *(_DWORD *)(a1 + 72) - 98;
          *(unsigned char *)(v44 + 1) = a11;
          *(unsigned char *)uint64_t v44 = *(unsigned char *)(a1 + 82);
          *(float *)(v44 + 4) = v42;
          *(_DWORD *)(v44 + 8) = v28;
          *a10 = v43 + 1;
          if ((unint64_t)(v43 + 1) >= *(void *)(a1 + 40)) {
            return 1;
          }
        }
        else
        {
          ++*a10;
        }
      }
      goto LABEL_122;
    }
  }
  else if (!v29 && !(a6 | a4 | a8))
  {
    if (v28)
    {
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(a1 + 81)) {
          BOOL v31 = !a11;
        }
        else {
          BOOL v31 = 1;
        }
        float v32 = 0.0;
        if (!v31) {
          float v32 = v16;
        }
        uint64_t v33 = *a10;
        uint64_t v34 = *(void *)(a1 + 48) + 24 * *a10;
        *(_WORD *)(v34 + 12) = *(_DWORD *)(a1 + 88) - a1 + *(_DWORD *)(a1 + 72) - 98;
        *(unsigned char *)(v34 + 1) = a11;
        *(unsigned char *)uint64_t v34 = *(unsigned char *)(a1 + 82);
        *(float *)(v34 + 4) = v32;
        *(_DWORD *)(v34 + 8) = v28;
        *a10 = v33 + 1;
        if ((unint64_t)(v33 + 1) >= *(void *)(a1 + 40)) {
          return 1;
        }
      }
      else
      {
        ++*a10;
      }
    }
    return 0;
  }
LABEL_119:
  unsigned int v39 = v30;
  if (a4)
  {
    unint64_t v79 = *a3;
    if (v19 == 3)
    {
      uint64_t v80 = v26[v79 + 1];
    }
    else
    {
      uint64_t v85 = v79 >> 5;
      unsigned int v86 = v26[(v79 >> 5) + 1];
      if (((v86 >> v79) & 1) == 0) {
        return 0;
      }
      char v87 = v79 & 0x1F;
      if (v79 >= 0x20)
      {
        int v88 = 0;
        if (v85 <= 1) {
          uint64_t v85 = 1;
        }
        else {
          uint64_t v85 = v85;
        }
        uint64_t v110 = (unsigned int *)(v27 + 4);
        do
        {
          unsigned int v111 = *v110++;
          a9 = COERCE_DOUBLE(vcnt_s8((int8x8_t)v111));
          LOWORD(a9) = vaddlv_u8(*(uint8x8_t *)&a9);
          v88 += LODWORD(a9);
          --v85;
        }
        while (v85);
      }
      else
      {
        int v88 = 0;
      }
      LODWORD(a9) = v86 & ~(-1 << v87);
      uint8x8_t v112 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&a9);
      v112.i16[0] = vaddlv_u8(v112);
      uint64_t v80 = *(unsigned int *)(v27 + 4 * (v88 + v112.i32[0]) + 40);
    }
    HIDWORD(v114) = a12;
    LOBYTE(v114) = a11;
    return sub_21634CE98(a1, v80, a3 + 1, a4 - 1, v13, v30, a7, a8, v16, a10, v114) != 0;
  }
LABEL_122:
  if (a8)
  {
    if (!*(unsigned char *)(a1 + 81)
      || (uint8x8_t v81 = (char *)a7 - *(void *)(a1 + 24), (v81 & 1) != 0)
      || (uint64_t v82 = *(unsigned int *)(a1 + 32), (v82 & 1) != 0)
      || v82 < 2
      || (uint64_t v83 = *(void *)(a1 + 56), (v83 & 1) != 0)
      || (int v84 = sub_2161BFC5C(*(int **)(a1 + 8), *(CFArrayRef **)(a1 + 16), v16, (v81 >> 1) + 1, (v83 + (unint64_t)v81) >> 1, (unint64_t)(v83 + v82) >> 1, (uint64_t)v129, 0xEuLL)) == 0)
    {
      LOWORD(v129[0]) = *a7;
      v129[1] = v16;
      int v84 = 1;
    }
    else
    {
      if (LOWORD(v129[0]) != *a7) {
        LOWORD(v129[0]) = *a7;
      }
      if (v84 < 1) {
        return 0;
      }
    }
    std::string v89 = v13;
    uint64_t v90 = 0;
    uint64_t v120 = a7 + 1;
    __nb = a7;
    BOOL v91 = 1;
    std::string v92 = v129;
    size_t v93 = v39;
    unint64_t v94 = v84;
    while (1)
    {
      if (!v125) {
        BOOL v125 = *(unsigned __int16 *)v92 != *__nb;
      }
      unint64_t v126 = 0;
      uint64_t v127 = 0;
      if (*(unsigned char *)(a1 + 80))
      {
        if (!*(unsigned char *)(a1 + 96)) {
          break;
        }
      }
      if (a8 >= 4) {
        sub_21634EC28((uint64_t)__nb, *(void *)(a1 + 24), *(void *)(a1 + 56), *(unsigned __int16 *)v92, *(CFArrayRef **)(a1 + 16));
      }
      if (!*(void *)(a1 + 8) && !*(void *)(a1 + 16)
        || *(unsigned char *)(a1 + 82) && (!*(unsigned char *)(a1 + 80) || !*(unsigned char *)(a1 + 96)))
      {
        *(_WORD *)int v128 = *(_WORD *)v92;
        unint64_t v126 = 0;
        uint64_t v127 = 0;
LABEL_156:
        std::string v98 = *(void **)(a1 + 88);
        uint64_t v96 = 2;
        goto LABEL_157;
      }
      uint64_t v95 = sub_216183408(v125, (uint64_t)v89, v93, *(unsigned __int16 *)v92, v128, 16, (uint64_t)&v127, &v126);
      if (v95 != -2)
      {
        uint64_t v96 = v95;
        if (v95 == -1) {
          return v91;
        }
        unint64_t v97 = v126;
        if (v126 <= 7)
        {
          std::string v98 = *(void **)(a1 + 88);
          if (!v95)
          {
LABEL_159:
            HIDWORD(v114) = a12;
            LOBYTE(v114) = v125;
            if (sub_21634CE98(a1, a2, v128, v96, v127, v97, v120, a8 - 2, v92[1], a10, v114)) {
              return v91;
            }
            *(void *)(a1 + 88) = v98;
            goto LABEL_161;
          }
LABEL_157:
          memcpy(v98, v89, v93);
          std::string v99 = (_WORD *)(*(void *)(a1 + 88) + v93);
          *(void *)(a1 + 88) = v99;
          unint64_t v97 = v126;
          if (!v126)
          {
            *std::string v99 = *(_WORD *)v92;
            *(void *)(a1 + 88) += 2;
            unint64_t v97 = v126;
          }
          goto LABEL_159;
        }
      }
LABEL_161:
      BOOL v91 = ++v90 < v94;
      v92 += 2;
      if (v94 == v90) {
        return 0;
      }
    }
    *(_WORD *)int v128 = *(_WORD *)v92;
    unint64_t v126 = 0;
    goto LABEL_156;
  }
  if (!v39) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 96)) {
    return 0;
  }
  uint64_t v100 = *(void *)(a1 + 88);
  std::string v101 = sub_216183C5C(v13, v39);
  if (!v101) {
    return 0;
  }
  char v102 = v101;
  std::string::size_type v103 = a7;
  memcpy(*(void **)(a1 + 88), v13, v39);
  *(void *)(a1 + 88) += v39;
  if (*(_DWORD *)(a1 + 32) == v39 && *(_DWORD *)(a1 + 64) == 2) {
    *(unsigned char *)(a1 + 97) = 0;
  }
  uint64_t v104 = *(void *)v102;
  if (*((void *)v102 + 1) == *(void *)v102)
  {
LABEL_177:
    *(void *)(a1 + 88) = v100;
    return 0;
  }
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  uint64_t v77 = 1;
  while (1)
  {
    char v107 = (uint64_t *)(v104 + v105);
    if (*((char *)v107 + 23) < 0)
    {
      __int16 v109 = (uint64_t *)*v107;
      uint64_t v108 = v107[1];
    }
    else
    {
      uint64_t v108 = *((unsigned __int8 *)v107 + 23);
      __int16 v109 = v107;
    }
    HIDWORD(v114) = 1;
    LOBYTE(v114) = a11;
    if (sub_21634CE98(a1, a2, v109, v108, 0, 0, v103, 0, v16, a10, v114)) {
      return v77;
    }
    ++v106;
    uint64_t v104 = *(void *)v102;
    v105 += 24;
    if (v106 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v102 + 1) - *(void *)v102) >> 3)) {
      goto LABEL_177;
    }
  }
}

uint64_t sub_21634D9C0(unsigned int *a1, uint64_t a2)
{
  uint64_t v6 = 0;
  *(unsigned char *)(a2 + 82) = 1;
  *(void *)(a2 + 72) = 0;
  if (!sub_21634CE98(a2, *a1, 0, 0, 0, 0, *(unsigned __int16 **)(a2 + 24), *(_DWORD *)(a2 + 32), 0.0, &v6, 0, 0)
    && *(unsigned char *)(a2 + 80) == 0)
  {
    *(unsigned char *)(a2 + 82) = 0;
    *(void *)(a2 + 72) = 0;
    sub_21634CE98(a2, *a1, 0, 0, 0, 0, *(unsigned __int16 **)(a2 + 24), *(_DWORD *)(a2 + 32), 0.0, &v6, 0, 0);
  }
  return v6;
}

uint64_t sub_21634DA8C(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5)
{
  if (a3 < 1) {
    return 0;
  }
  int v10 = 0;
  while (1)
  {
    if (a2)
    {
      if (((a3 - v10) & 1) == 0)
      {
        uint64_t v11 = sub_216334794(*(unsigned __int16 *)(a2 + v10), a4);
        if (v11) {
          break;
        }
      }
    }
    unsigned int v16 = *(unsigned __int8 *)(a1 + v10);
    unsigned int v17 = *(unsigned __int8 *)(a2 + v10);
    if (v16 < v17) {
      return 0xFFFFFFFFLL;
    }
    if (v16 > v17) {
      return 1;
    }
LABEL_13:
    if (++v10 >= a3) {
      return 0;
    }
  }
  unint64_t v12 = (char *)v11[1] - (char *)*v11;
  if ((int)(v12 >> 1) >= 1)
  {
    uint64_t v13 = 0;
    int v14 = *(unsigned __int16 *)(a1 + v10);
    uint64_t v15 = v12 & 0x1FFFFFFFELL;
    while (v14 != *(unsigned __int16 *)((char *)*v11 + v13))
    {
      v13 += 2;
      if (v15 == v13) {
        goto LABEL_21;
      }
    }
    if (v13 && !*a5) {
      *a5 = 1;
    }
    ++v10;
    goto LABEL_13;
  }
  LOBYTE(v14) = *(unsigned char *)(a1 + v10);
LABEL_21:
  unsigned int v19 = *(unsigned __int8 *)(a2 + v10);
  if (v19 > v14) {
    return 0xFFFFFFFFLL;
  }
  if (v19 < v14) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + v10 + 1) < *(unsigned __int8 *)(a2 + v10 + 1)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

uint64_t sub_21634DBCC(uint64_t a1, int a2, uint8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  if ((a2 & 3) != 2)
  {
    if ((a2 & 3) == 3 && a9 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)(a1 + 8) + (a2 - 3);
      uint64_t v17 = a9;
      do
      {
        if (a13) {
          BOOL v18 = 1;
        }
        else {
          BOOL v18 = v15 == 0;
        }
        if (!v18) {
          a13 = 1;
        }
        int v19 = *(_DWORD *)(v16 + 4 * *(unsigned __int8 *)(a10 + 2 * v15) + 4);
        int v20 = v19 & 3;
        if ((v19 & 3) != 0)
        {
          unint64_t v21 = *(unsigned __int8 *)(a10 + ((2 * v15) | 1));
          if (v20 == 2)
          {
            uint64_t v22 = *(void *)(a1 + 8);
            uint64_t v23 = (v19 - 2);
            uint64_t v24 = v21 >> 5;
            if ((*(_DWORD *)(v22 + v23 + 4 * (v21 >> 5) + 4) >> v21))
            {
              if (v21 >= 0x20)
              {
                int v26 = 0;
                if (v24 <= 1) {
                  uint64_t v24 = 1;
                }
                else {
                  uint64_t v24 = v24;
                }
                uint64_t v27 = (unsigned int *)(v22 + v23 + 4);
                do
                {
                  unsigned int v28 = *v27++;
                  uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
                  v29.i16[0] = vaddlv_u8(v29);
                  v26 += v29.i32[0];
                  --v24;
                }
                while (v24);
              }
LABEL_24:
              uint64_t v25 = a1;
LABEL_25:
              if (sub_21634B89C(v25)) {
                return 1;
              }
            }
          }
          else
          {
            if (v20 != 3)
            {
              uint64_t v25 = a1;
              goto LABEL_25;
            }
            if ((*(_DWORD *)(*(void *)(a1 + 8) + (v19 - 3) + 4 * v21 + 4) & 3) != 0) {
              goto LABEL_24;
            }
          }
        }
        ++v15;
      }
      while (v15 != v17);
    }
    return 0;
  }
  if (a9 < 1) {
    return 0;
  }
  uint64_t v30 = 0;
  uint64_t v31 = *(void *)(a1 + 8) + (a2 - 2);
  uint64_t v32 = a9;
  while (1)
  {
    if (a13) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v30 == 0;
    }
    if (!v33) {
      a13 = 1;
    }
    unint64_t v34 = *(unsigned __int8 *)(a10 + 2 * v30);
    uint64_t v35 = v34 >> 5;
    unsigned int v36 = *(_DWORD *)(v31 + 4 * (v34 >> 5) + 4);
    if (((v36 >> v34) & 1) == 0) {
      goto LABEL_58;
    }
    if (v34 >= 0x20)
    {
      int v37 = 0;
      if (v35 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v35;
      }
      uint64_t v38 = (unsigned int *)(v31 + 4);
      do
      {
        unsigned int v39 = *v38++;
        a3 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
        a3.i16[0] = vaddlv_u8(a3);
        v37 += a3.i32[0];
        --v35;
      }
      while (v35);
    }
    else
    {
      int v37 = 0;
    }
    a3.i32[0] = v36 & ~(-1 << (v34 & 0x1F));
    a3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    a3.i16[0] = vaddlv_u8(a3);
    int v40 = *(_DWORD *)(v31 + 4 * (v37 + a3.i32[0]) + 40);
    unint64_t v41 = *(unsigned __int8 *)(a10 + ((2 * v30) | 1));
    int v42 = v40 & 3;
    if (v42 == 1)
    {
      uint64_t v43 = a1;
      goto LABEL_57;
    }
    if (v42 != 2) {
      break;
    }
    uint64_t v44 = *(void *)(a1 + 8);
    uint64_t v45 = (v40 - 2);
    uint64_t v46 = v41 >> 5;
    if ((*(_DWORD *)(v44 + v45 + 4 * (v41 >> 5) + 4) >> v41))
    {
      if (v41 >= 0x20)
      {
        int v47 = 0;
        if (v46 <= 1) {
          uint64_t v46 = 1;
        }
        else {
          uint64_t v46 = v46;
        }
        uint64_t v48 = (unsigned int *)(v44 + v45 + 4);
        do
        {
          unsigned int v49 = *v48++;
          uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
          v50.i16[0] = vaddlv_u8(v50);
          v47 += v50.i32[0];
          --v46;
        }
        while (v46);
      }
      goto LABEL_56;
    }
LABEL_58:
    if (++v30 == v32) {
      return 0;
    }
  }
  if (v42 != 3 || (*(_DWORD *)(*(void *)(a1 + 8) + (v40 - 3) + 4 * v41 + 4) & 3) == 0) {
    goto LABEL_58;
  }
LABEL_56:
  uint64_t v43 = a1;
LABEL_57:
  if (!sub_21634B89C(v43)) {
    goto LABEL_58;
  }
  return 1;
}

uint64_t sub_21634DF90(uint64_t a1, int a2, uint8x8_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if ((a2 & 3) != 2)
  {
    if ((a2 & 3) == 3 && a6 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a1 + 8) + (a2 - 3);
      uint64_t v16 = a6;
      do
      {
        if (a8) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = v14 == 0;
        }
        if (!v17) {
          a8 = 1;
        }
        *a11 = *(unsigned char *)(a7 + 2 * v14);
        int v18 = *(_DWORD *)(v15 + 4 * *(unsigned __int8 *)(a7 + 2 * v14) + 4);
        int v19 = v18 & 3;
        if ((v18 & 3) != 0)
        {
          unint64_t v20 = *(unsigned __int8 *)(a7 + ((2 * v14) | 1));
          a11[1] = v20;
          if (v19 == 2)
          {
            uint64_t v21 = *(void *)(a1 + 8);
            uint64_t v22 = (v18 - 2);
            uint64_t v23 = v20 >> 5;
            if ((*(_DWORD *)(v21 + v22 + 4 * (v20 >> 5) + 4) >> v20))
            {
              if (v20 >= 0x20)
              {
                int v25 = 0;
                if (v23 <= 1) {
                  uint64_t v23 = 1;
                }
                else {
                  uint64_t v23 = v23;
                }
                int v26 = (unsigned int *)(v21 + v22 + 4);
                do
                {
                  unsigned int v27 = *v26++;
                  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
                  v28.i16[0] = vaddlv_u8(v28);
                  v25 += v28.i32[0];
                  --v23;
                }
                while (v23);
              }
LABEL_24:
              uint64_t v24 = a1;
LABEL_25:
              if (sub_21634BE78(v24)) {
                return 1;
              }
            }
          }
          else
          {
            if (v19 != 3)
            {
              uint64_t v24 = a1;
              goto LABEL_25;
            }
            if ((*(_DWORD *)(*(void *)(a1 + 8) + (v18 - 3) + 4 * v20 + 4) & 3) != 0) {
              goto LABEL_24;
            }
          }
        }
        ++v14;
      }
      while (v14 != v16);
    }
    return 0;
  }
  if (a6 < 1) {
    return 0;
  }
  uint64_t v29 = 0;
  uint64_t v30 = *(void *)(a1 + 8) + (a2 - 2);
  uint64_t v31 = a6;
  while (1)
  {
    if (a8) {
      BOOL v32 = 1;
    }
    else {
      BOOL v32 = v29 == 0;
    }
    unint64_t v33 = *(unsigned __int8 *)(a7 + 2 * v29);
    if (!v32) {
      a8 = 1;
    }
    *a11 = v33;
    uint64_t v34 = v33 >> 5;
    unsigned int v35 = *(_DWORD *)(v30 + 4 * (v33 >> 5) + 4);
    if (((v35 >> v33) & 1) == 0) {
      goto LABEL_58;
    }
    if (v33 >= 0x20)
    {
      int v36 = 0;
      if (v34 <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = v34;
      }
      int v37 = (unsigned int *)(v30 + 4);
      do
      {
        unsigned int v38 = *v37++;
        a3 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
        a3.i16[0] = vaddlv_u8(a3);
        v36 += a3.i32[0];
        --v34;
      }
      while (v34);
    }
    else
    {
      int v36 = 0;
    }
    a3.i32[0] = v35 & ~(-1 << (v33 & 0x1F));
    a3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    a3.i16[0] = vaddlv_u8(a3);
    int v39 = *(_DWORD *)(v30 + 4 * (v36 + a3.i32[0]) + 40);
    unint64_t v40 = *(unsigned __int8 *)(a7 + ((2 * v29) | 1));
    a11[1] = v40;
    int v41 = v39 & 3;
    if (v41 == 1)
    {
      uint64_t v42 = a1;
      goto LABEL_57;
    }
    if (v41 != 2) {
      break;
    }
    uint64_t v43 = *(void *)(a1 + 8);
    uint64_t v44 = (v39 - 2);
    uint64_t v45 = v40 >> 5;
    if ((*(_DWORD *)(v43 + v44 + 4 * (v40 >> 5) + 4) >> v40))
    {
      if (v40 >= 0x20)
      {
        int v46 = 0;
        if (v45 <= 1) {
          uint64_t v45 = 1;
        }
        else {
          uint64_t v45 = v45;
        }
        int v47 = (unsigned int *)(v43 + v44 + 4);
        do
        {
          unsigned int v48 = *v47++;
          uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
          v49.i16[0] = vaddlv_u8(v49);
          v46 += v49.i32[0];
          --v45;
        }
        while (v45);
      }
      goto LABEL_56;
    }
LABEL_58:
    if (++v29 == v31) {
      return 0;
    }
  }
  if (v41 != 3 || (*(_DWORD *)(*(void *)(a1 + 8) + (v39 - 3) + 4 * v40 + 4) & 3) == 0) {
    goto LABEL_58;
  }
LABEL_56:
  uint64_t v42 = a1;
LABEL_57:
  if (!sub_21634BE78(v42)) {
    goto LABEL_58;
  }
  return 1;
}

uint64_t sub_21634E384(uint64_t a1, int a2, uint8x8_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if ((a2 & 3) != 2)
  {
    if ((a2 & 3) == 3 && a6 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a1 + 8) + (a2 - 3);
      uint64_t v16 = a6;
      do
      {
        if (a8) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = v14 == 0;
        }
        if (!v17) {
          a8 = 1;
        }
        *a11 = *(unsigned char *)(a7 + 2 * v14);
        int v18 = *(_DWORD *)(v15 + 4 * *(unsigned __int8 *)(a7 + 2 * v14) + 4);
        int v19 = v18 & 3;
        if ((v18 & 3) != 0)
        {
          unint64_t v20 = *(unsigned __int8 *)(a7 + ((2 * v14) | 1));
          a11[1] = v20;
          if (v19 == 2)
          {
            uint64_t v21 = *(void *)(a1 + 8);
            uint64_t v22 = (v18 - 2);
            uint64_t v23 = v20 >> 5;
            if ((*(_DWORD *)(v21 + v22 + 4 * (v20 >> 5) + 4) >> v20))
            {
              if (v20 >= 0x20)
              {
                int v25 = 0;
                if (v23 <= 1) {
                  uint64_t v23 = 1;
                }
                else {
                  uint64_t v23 = v23;
                }
                int v26 = (unsigned int *)(v21 + v22 + 4);
                do
                {
                  unsigned int v27 = *v26++;
                  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
                  v28.i16[0] = vaddlv_u8(v28);
                  v25 += v28.i32[0];
                  --v23;
                }
                while (v23);
              }
LABEL_24:
              uint64_t v24 = a1;
LABEL_25:
              if (sub_21634C704(v24)) {
                return 1;
              }
            }
          }
          else
          {
            if (v19 != 3)
            {
              uint64_t v24 = a1;
              goto LABEL_25;
            }
            if ((*(_DWORD *)(*(void *)(a1 + 8) + (v18 - 3) + 4 * v20 + 4) & 3) != 0) {
              goto LABEL_24;
            }
          }
        }
        ++v14;
      }
      while (v14 != v16);
    }
    return 0;
  }
  if (a6 < 1) {
    return 0;
  }
  uint64_t v29 = 0;
  uint64_t v30 = *(void *)(a1 + 8) + (a2 - 2);
  uint64_t v31 = a6;
  while (1)
  {
    if (a8) {
      BOOL v32 = 1;
    }
    else {
      BOOL v32 = v29 == 0;
    }
    unint64_t v33 = *(unsigned __int8 *)(a7 + 2 * v29);
    if (!v32) {
      a8 = 1;
    }
    *a11 = v33;
    uint64_t v34 = v33 >> 5;
    unsigned int v35 = *(_DWORD *)(v30 + 4 * (v33 >> 5) + 4);
    if (((v35 >> v33) & 1) == 0) {
      goto LABEL_58;
    }
    if (v33 >= 0x20)
    {
      int v36 = 0;
      if (v34 <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = v34;
      }
      int v37 = (unsigned int *)(v30 + 4);
      do
      {
        unsigned int v38 = *v37++;
        a3 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
        a3.i16[0] = vaddlv_u8(a3);
        v36 += a3.i32[0];
        --v34;
      }
      while (v34);
    }
    else
    {
      int v36 = 0;
    }
    a3.i32[0] = v35 & ~(-1 << (v33 & 0x1F));
    a3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    a3.i16[0] = vaddlv_u8(a3);
    int v39 = *(_DWORD *)(v30 + 4 * (v36 + a3.i32[0]) + 40);
    unint64_t v40 = *(unsigned __int8 *)(a7 + ((2 * v29) | 1));
    a11[1] = v40;
    int v41 = v39 & 3;
    if (v41 == 1)
    {
      uint64_t v42 = a1;
      goto LABEL_57;
    }
    if (v41 != 2) {
      break;
    }
    uint64_t v43 = *(void *)(a1 + 8);
    uint64_t v44 = (v39 - 2);
    uint64_t v45 = v40 >> 5;
    if ((*(_DWORD *)(v43 + v44 + 4 * (v40 >> 5) + 4) >> v40))
    {
      if (v40 >= 0x20)
      {
        int v46 = 0;
        if (v45 <= 1) {
          uint64_t v45 = 1;
        }
        else {
          uint64_t v45 = v45;
        }
        int v47 = (unsigned int *)(v43 + v44 + 4);
        do
        {
          unsigned int v48 = *v47++;
          uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
          v49.i16[0] = vaddlv_u8(v49);
          v46 += v49.i32[0];
          --v45;
        }
        while (v45);
      }
      goto LABEL_56;
    }
LABEL_58:
    if (++v29 == v31) {
      return 0;
    }
  }
  if (v41 != 3 || (*(_DWORD *)(*(void *)(a1 + 8) + (v39 - 3) + 4 * v40 + 4) & 3) == 0) {
    goto LABEL_58;
  }
LABEL_56:
  uint64_t v42 = a1;
LABEL_57:
  if (!sub_21634C704(v42)) {
    goto LABEL_58;
  }
  return 1;
}

uint64_t sub_21634E798(uint64_t a1, char *a2, unsigned int a3, char *a4, unsigned int a5, unsigned __int16 *a6, unsigned int a7, uint64_t a8, unsigned char *a9, int a10, float *a11)
{
  LODWORD(v11) = a5;
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (!a7)
  {
    if (!a5)
    {
      unsigned int v32 = *(_DWORD *)(a1 + 64);
      if (v32 >= 2)
      {
        if (v32 == 2 && (a3 || a10))
        {
          uint64_t v33 = *(void *)(a1 + 72) + a3;
LABEL_44:
          *(void *)(a1 + 72) = v33;
          return 1;
        }
        return 0;
      }
      return a3 == 0;
    }
    if (!*(unsigned char *)(a1 + 96)) {
      return 0;
    }
    uint64_t v21 = *(void *)(a1 + 88);
    uint64_t result = (uint64_t)sub_216183C5C(a4, a5);
    if (!result) {
      return result;
    }
    uint64_t v23 = (char **)result;
    memcpy(*(void **)(a1 + 88), a4, v11);
    *(void *)(a1 + 88) += v11;
    if (*(_DWORD *)(a1 + 32) == v11 && *(_DWORD *)(a1 + 64) == 2) {
      *(unsigned char *)(a1 + 97) = 0;
    }
    uint64_t v24 = *v23;
    int64_t v25 = v23[1] - *v23;
    if (!v25)
    {
LABEL_33:
      uint64_t result = 0;
      *(void *)(a1 + 88) = v21;
      return result;
    }
    unint64_t v26 = v25 / 24;
    if (v26 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = v26;
    }
    while (1)
    {
      if (v24[23] < 0)
      {
        uint64_t v28 = *((void *)v24 + 1);
        if (a3 < v28) {
          goto LABEL_32;
        }
        uint64_t v29 = *(char **)v24;
      }
      else
      {
        LODWORD(v28) = v24[23];
        uint64_t v29 = v24;
        if (v28 > a3) {
          goto LABEL_32;
        }
      }
      if (!memcmp(a2, v29, v28))
      {
        if (!*(unsigned char *)(a1 + 97)) {
          return v28 == a3;
        }
        unsigned int v30 = *(_DWORD *)(a1 + 64);
        if (v30 >= 2)
        {
          if (v30 == 2)
          {
            uint64_t v33 = *(void *)(a1 + 72) + (a3 - v28);
            goto LABEL_44;
          }
        }
        else if (a3 == v28)
        {
          return 1;
        }
      }
LABEL_32:
      v24 += 24;
      if (!--v27) {
        goto LABEL_33;
      }
    }
  }
  if (a3)
  {
    float v16 = *a11;
    if (*(unsigned char *)(a1 + 81))
    {
      BOOL v17 = (char *)a6 - *(void *)(a1 + 24);
      if ((v17 & 1) == 0)
      {
        uint64_t v18 = *(unsigned int *)(a1 + 32);
        if ((v18 & 1) == 0 && (a8 & 1) == 0 && v18 >= 2)
        {
          int v19 = sub_2161BFC5C(*(int **)(a1 + 8), *(CFArrayRef **)(a1 + 16), v16, (v17 >> 1) + 1, (a8 + (unint64_t)v17) >> 1, (unint64_t)(v18 + a8) >> 1, (uint64_t)v49, 0xEuLL);
          if (v19)
          {
            if (v19 < 1) {
              return 0;
            }
            goto LABEL_47;
          }
          float v16 = *a11;
        }
      }
    }
    v49[0] = *a6;
    float v50 = v16;
    int v19 = 1;
LABEL_47:
    uint64_t v34 = v49;
    size_t v11 = v11;
    uint64_t v35 = v19;
    size_t v42 = v11;
    while (1)
    {
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      int v36 = *a9;
      if (!*a9)
      {
        if (*v34 == *a6)
        {
          int v36 = 0;
        }
        else
        {
          int v36 = 1;
          *a9 = 1;
        }
      }
      if (a7 >= 4)
      {
        sub_21634EC28((uint64_t)a6, *(void *)(a1 + 24), *(void *)(a1 + 56), *v34, *(CFArrayRef **)(a1 + 16));
        int v36 = *a9;
      }
      if ((*(void *)(a1 + 8) || *(void *)(a1 + 16))
        && (!*(unsigned char *)(a1 + 82) || *(unsigned char *)(a1 + 80) && *(unsigned char *)(a1 + 96)))
      {
        int v37 = sub_216183408(v36 != 0, (uint64_t)a4, v11, *v34, __s2, 16, (uint64_t)&v47, &v46);
        if (v37 == -2) {
          goto LABEL_72;
        }
        int v38 = v37;
        if (v37 == -1) {
          return 0;
        }
        if (v46 > 7) {
          goto LABEL_72;
        }
        int v39 = *(void **)(a1 + 88);
        if (!v37)
        {
LABEL_68:
          if (!memcmp(a2, __s2, v38))
          {
            int v45 = *((_DWORD *)v34 + 1);
            if (sub_21634E798(a1, &a2[v38], (a3 - v38), v47, v46, a6 + 1, a7 - 2, a8, a9, a10, &v45))
            {
              *(_DWORD *)a11 = v45;
              return 1;
            }
          }
          size_t v11 = v42;
          goto LABEL_71;
        }
      }
      else
      {
        __s2[0] = *v34;
        unint64_t v46 = 0;
        uint64_t v47 = 0;
        int v38 = 2;
        int v39 = *(void **)(a1 + 88);
      }
      memcpy(v39, a4, v11);
      unint64_t v40 = (_WORD *)(*(void *)(a1 + 88) + v11);
      *(void *)(a1 + 88) = v40;
      if (!v46)
      {
        *unint64_t v40 = *v34;
        *(void *)(a1 + 88) += 2;
      }
      if (v38 <= (int)a3) {
        goto LABEL_68;
      }
LABEL_71:
      *(void *)(a1 + 88) = v39;
LABEL_72:
      v34 += 4;
      if (!--v35) {
        return 0;
      }
    }
  }
  return *(_DWORD *)(a1 + 64) == 1;
}

const UInt8 *sub_21634EC28(uint64_t a1, int a2, uint64_t a3, int a4, CFArrayRef *a5)
{
  if (!a5) {
    return (const UInt8 *)*(unsigned __int16 *)(a1 + 2);
  }
  signed int v7 = (((unint64_t)(a1 - a2) + a3) >> 1) + 1;
  uint64_t result = sub_21627378C(a5, v7);
  if (result)
  {
    uint64_t v9 = result;
    if (a4 == 110 && (sub_2161C0030(a5, v7) & 1) != 0) {
      return 0;
    }
    else {
      return (const UInt8 *)*(unsigned __int16 *)v9;
    }
  }
  return result;
}

void sub_21634ECA8(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  if (a5 > 4)
  {
    if (a5 == 5)
    {
      sub_21634F5D0(a3, (uint64_t)a1);
      BOOL v17 = (char **)(a1 + 2);
      float v16 = (char *)a1[2];
      uint64_t v18 = (char *)a1[1];
      if (v18 >= v16)
      {
        uint64_t v34 = (char *)*a1;
        uint64_t v35 = (uint64_t)&v18[-*a1];
        if (v35 <= -3) {
          goto LABEL_223;
        }
        uint64_t v36 = v35 >> 1;
        unint64_t v37 = v16 - v34;
        if (v37 <= (v35 >> 1) + 1) {
          unint64_t v38 = v36 + 1;
        }
        else {
          unint64_t v38 = v37;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v39 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v39 = v38;
        }
        if (v39)
        {
          unint64_t v40 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v39);
          uint64_t v34 = (char *)*a1;
          uint64_t v18 = (char *)a1[1];
        }
        else
        {
          unint64_t v40 = 0;
        }
        uint64_t v80 = &v40[2 * v36];
        float v16 = &v40[2 * v39];
        *(_WORD *)uint64_t v80 = 44;
        int v19 = v80 + 2;
        while (v18 != v34)
        {
          __int16 v81 = *((_WORD *)v18 - 1);
          v18 -= 2;
          *((_WORD *)v80 - 1) = v81;
          v80 -= 2;
        }
        *a1 = v80;
        a1[1] = v19;
        a1[2] = v16;
        if (v34)
        {
          operator delete(v34);
          float v16 = *v17;
        }
      }
      else
      {
        *(_WORD *)uint64_t v18 = 44;
        int v19 = v18 + 2;
      }
      a1[1] = v19;
      if (v19 >= v16)
      {
        uint64_t v83 = (char *)*a1;
        uint64_t v84 = (uint64_t)&v19[-*a1];
        if (v84 <= -3) {
          goto LABEL_223;
        }
        uint64_t v85 = v84 >> 1;
        unint64_t v86 = v16 - v83;
        if (v86 <= (v84 >> 1) + 1) {
          unint64_t v87 = v85 + 1;
        }
        else {
          unint64_t v87 = v86;
        }
        if (v86 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v88 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v88 = v87;
        }
        if (v88)
        {
          std::string v89 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v88);
          uint64_t v83 = (char *)*a1;
          int v19 = (char *)a1[1];
        }
        else
        {
          std::string v89 = 0;
        }
        std::string::size_type v103 = &v89[2 * v85];
        float v16 = &v89[2 * v88];
        *(_WORD *)std::string::size_type v103 = 42;
        uint64_t v82 = v103 + 2;
        while (v19 != v83)
        {
          __int16 v104 = *((_WORD *)v19 - 1);
          v19 -= 2;
          *((_WORD *)v103 - 1) = v104;
          v103 -= 2;
        }
        *a1 = v103;
        a1[1] = v82;
        a1[2] = v16;
        if (v83)
        {
          operator delete(v83);
          float v16 = *v17;
        }
      }
      else
      {
        *(_WORD *)int v19 = 42;
        uint64_t v82 = v19 + 2;
      }
      a1[1] = v82;
      if (v82 >= v16)
      {
        unint64_t v106 = (char *)*a1;
        uint64_t v107 = (uint64_t)&v82[-*a1];
        if (v107 <= -3) {
          goto LABEL_223;
        }
        uint64_t v108 = v107 >> 1;
        unint64_t v109 = v16 - v106;
        if (v109 <= (v107 >> 1) + 1) {
          unint64_t v110 = v108 + 1;
        }
        else {
          unint64_t v110 = v109;
        }
        if (v109 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v111 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v111 = v110;
        }
        if (v111)
        {
          uint8x8_t v112 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v111);
          unint64_t v106 = (char *)*a1;
          uint64_t v82 = (char *)a1[1];
        }
        else
        {
          uint8x8_t v112 = 0;
        }
        unint64_t v126 = &v112[2 * v108];
        uint64_t v127 = &v112[2 * v111];
        *(_WORD *)unint64_t v126 = 44;
        uint64_t v105 = v126 + 2;
        while (v82 != v106)
        {
          __int16 v128 = *((_WORD *)v82 - 1);
          v82 -= 2;
          *((_WORD *)v126 - 1) = v128;
          v126 -= 2;
        }
        *a1 = v126;
        a1[1] = v105;
        a1[2] = v127;
        if (v106) {
          operator delete(v106);
        }
      }
      else
      {
        *(_WORD *)uint64_t v82 = 44;
        uint64_t v105 = v82 + 2;
      }
      a1[1] = v105;
      sub_21634F5D0(a4, (uint64_t)a1);
      uint64_t v130 = (char *)a1[1];
      unint64_t v129 = a1[2];
      if ((unint64_t)v130 >= v129)
      {
        uint64_t v132 = (char *)*a1;
        uint64_t v133 = (uint64_t)&v130[-*a1];
        if (v133 <= -3) {
          goto LABEL_223;
        }
        uint64_t v134 = v133 >> 1;
        unint64_t v135 = v129 - (void)v132;
        if (v135 <= (v133 >> 1) + 1) {
          unint64_t v136 = v134 + 1;
        }
        else {
          unint64_t v136 = v135;
        }
        if (v135 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v137 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v137 = v136;
        }
        if (v137)
        {
          unint64_t v138 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v137);
          uint64_t v132 = (char *)*a1;
          uint64_t v130 = (char *)a1[1];
        }
        else
        {
          unint64_t v138 = 0;
        }
        __int16 v149 = &v138[2 * v134];
        uint64_t v150 = &v138[2 * v137];
        *(_WORD *)__int16 v149 = 44;
        __int16 v131 = v149 + 2;
        while (v130 != v132)
        {
          __int16 v151 = *((_WORD *)v130 - 1);
          v130 -= 2;
          *((_WORD *)v149 - 1) = v151;
          v149 -= 2;
        }
        *a1 = v149;
        a1[1] = v131;
        a1[2] = v150;
        if (v132) {
          operator delete(v132);
        }
      }
      else
      {
        *(_WORD *)uint64_t v130 = 44;
        __int16 v131 = v130 + 2;
      }
      a1[1] = v131;
      sub_21634F7A0(a2, (uint64_t)a1);
      BOOL v58 = (char *)a1[1];
      unint64_t v152 = a1[2];
      if ((unint64_t)v58 >= v152)
      {
        uint64_t v59 = (char *)*a1;
        uint64_t v153 = (uint64_t)&v58[-*a1];
        if (v153 > -3)
        {
          uint64_t v154 = v153 >> 1;
          unint64_t v155 = v152 - (void)v59;
          if (v155 <= (v153 >> 1) + 1) {
            unint64_t v156 = v154 + 1;
          }
          else {
            unint64_t v156 = v155;
          }
          if (v155 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v157 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v157 = v156;
          }
          if (v157)
          {
            uint64_t v158 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v157);
            uint64_t v59 = (char *)*a1;
            BOOL v58 = (char *)a1[1];
          }
          else
          {
            uint64_t v158 = 0;
          }
          uint64_t v66 = &v158[2 * v154];
          uint64_t v67 = &v158[2 * v157];
          *(_WORD *)uint64_t v66 = 0;
          unint64_t v68 = v66 + 2;
          while (v58 != v59)
          {
            __int16 v160 = *((_WORD *)v58 - 1);
            v58 -= 2;
            *((_WORD *)v66 - 1) = v160;
            v66 -= 2;
          }
          goto LABEL_219;
        }
        goto LABEL_223;
      }
      goto LABEL_201;
    }
    if (a5 != 13) {
      return;
    }
  }
  else if (a5 != 2)
  {
    if (a5 != 4) {
      return;
    }
    int v10 = (char **)(a1 + 2);
    uint64_t v9 = (char *)a1[2];
    size_t v11 = (char *)a1[1];
    if (v11 >= v9)
    {
      uint64_t v27 = (char *)*a1;
      uint64_t v28 = (uint64_t)&v11[-*a1];
      if (v28 <= -3) {
        goto LABEL_223;
      }
      uint64_t v29 = v28 >> 1;
      unint64_t v30 = v9 - v27;
      if (v30 <= (v28 >> 1) + 1) {
        unint64_t v31 = v29 + 1;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v32 = v31;
      }
      if (v32)
      {
        uint64_t v33 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v32);
        uint64_t v27 = (char *)*a1;
        size_t v11 = (char *)a1[1];
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v70 = &v33[2 * v29];
      uint64_t v9 = &v33[2 * v32];
      *(_WORD *)uint64_t v70 = 42;
      unint64_t v12 = v70 + 2;
      while (v11 != v27)
      {
        __int16 v71 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v70 - 1) = v71;
        v70 -= 2;
      }
      *a1 = v70;
      a1[1] = v12;
      a1[2] = v9;
      if (v27)
      {
        operator delete(v27);
        uint64_t v9 = *v10;
      }
    }
    else
    {
      *(_WORD *)size_t v11 = 42;
      unint64_t v12 = v11 + 2;
    }
    a1[1] = v12;
    if (v12 >= v9)
    {
      int v73 = (char *)*a1;
      uint64_t v74 = (uint64_t)&v12[-*a1];
      if (v74 <= -3) {
        goto LABEL_223;
      }
      uint64_t v75 = v74 >> 1;
      unint64_t v76 = v9 - v73;
      if (v76 <= (v74 >> 1) + 1) {
        unint64_t v77 = v75 + 1;
      }
      else {
        unint64_t v77 = v76;
      }
      if (v76 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v78 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v78 = v77;
      }
      if (v78)
      {
        unint64_t v79 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v78);
        int v73 = (char *)*a1;
        unint64_t v12 = (char *)a1[1];
      }
      else
      {
        unint64_t v79 = 0;
      }
      uint64_t v90 = &v79[2 * v75];
      BOOL v91 = &v79[2 * v78];
      *(_WORD *)uint64_t v90 = 44;
      unsigned int v72 = v90 + 2;
      while (v12 != v73)
      {
        __int16 v92 = *((_WORD *)v12 - 1);
        v12 -= 2;
        *((_WORD *)v90 - 1) = v92;
        v90 -= 2;
      }
      *a1 = v90;
      a1[1] = v72;
      a1[2] = v91;
      if (v73) {
        operator delete(v73);
      }
    }
    else
    {
      *(_WORD *)unint64_t v12 = 44;
      unsigned int v72 = v12 + 2;
    }
    a1[1] = v72;
    sub_21634F5D0(a3, (uint64_t)a1);
    unint64_t v94 = (char *)a1[1];
    unint64_t v93 = a1[2];
    if ((unint64_t)v94 >= v93)
    {
      uint64_t v96 = (char *)*a1;
      uint64_t v97 = (uint64_t)&v94[-*a1];
      if (v97 <= -3) {
        goto LABEL_223;
      }
      uint64_t v98 = v97 >> 1;
      unint64_t v99 = v93 - (void)v96;
      if (v99 <= (v97 >> 1) + 1) {
        unint64_t v100 = v98 + 1;
      }
      else {
        unint64_t v100 = v99;
      }
      if (v99 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v101 = v100;
      }
      if (v101)
      {
        char v102 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v101);
        uint64_t v96 = (char *)*a1;
        unint64_t v94 = (char *)a1[1];
      }
      else
      {
        char v102 = 0;
      }
      __int16 v113 = &v102[2 * v98];
      uint64_t v114 = &v102[2 * v101];
      *(_WORD *)__int16 v113 = 44;
      uint64_t v95 = v113 + 2;
      while (v94 != v96)
      {
        __int16 v115 = *((_WORD *)v94 - 1);
        v94 -= 2;
        *((_WORD *)v113 - 1) = v115;
        v113 -= 2;
      }
      *a1 = v113;
      a1[1] = v95;
      a1[2] = v114;
      if (v96) {
        operator delete(v96);
      }
    }
    else
    {
      *(_WORD *)unint64_t v94 = 44;
      uint64_t v95 = v94 + 2;
    }
    a1[1] = v95;
    sub_21634F5D0(a4, (uint64_t)a1);
    uint64_t v117 = (char *)a1[1];
    unint64_t v116 = a1[2];
    if ((unint64_t)v117 >= v116)
    {
      uint64_t v119 = (char *)*a1;
      uint64_t v120 = (uint64_t)&v117[-*a1];
      if (v120 <= -3) {
        goto LABEL_223;
      }
      uint64_t v121 = v120 >> 1;
      unint64_t v122 = v116 - (void)v119;
      if (v122 <= (v120 >> 1) + 1) {
        unint64_t v123 = v121 + 1;
      }
      else {
        unint64_t v123 = v122;
      }
      if (v122 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v124 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v124 = v123;
      }
      if (v124)
      {
        BOOL v125 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v124);
        uint64_t v119 = (char *)*a1;
        uint64_t v117 = (char *)a1[1];
      }
      else
      {
        BOOL v125 = 0;
      }
      __int16 v139 = &v125[2 * v121];
      uint64_t v140 = &v125[2 * v124];
      *(_WORD *)__int16 v139 = 44;
      unsigned int v118 = v139 + 2;
      while (v117 != v119)
      {
        __int16 v141 = *((_WORD *)v117 - 1);
        v117 -= 2;
        *((_WORD *)v139 - 1) = v141;
        v139 -= 2;
      }
      *a1 = v139;
      a1[1] = v118;
      a1[2] = v140;
      if (v119) {
        operator delete(v119);
      }
    }
    else
    {
      *(_WORD *)uint64_t v117 = 44;
      unsigned int v118 = v117 + 2;
    }
    a1[1] = v118;
    sub_21634F7A0(a2, (uint64_t)a1);
    BOOL v58 = (char *)a1[1];
    unint64_t v142 = a1[2];
    if ((unint64_t)v58 >= v142)
    {
      uint64_t v59 = (char *)*a1;
      uint64_t v143 = (uint64_t)&v58[-*a1];
      if (v143 > -3)
      {
        uint64_t v144 = v143 >> 1;
        unint64_t v145 = v142 - (void)v59;
        if (v145 <= (v143 >> 1) + 1) {
          unint64_t v146 = v144 + 1;
        }
        else {
          unint64_t v146 = v145;
        }
        if (v145 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v147 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v147 = v146;
        }
        if (v147)
        {
          unint64_t v148 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v147);
          uint64_t v59 = (char *)*a1;
          BOOL v58 = (char *)a1[1];
        }
        else
        {
          unint64_t v148 = 0;
        }
        uint64_t v66 = &v148[2 * v144];
        uint64_t v67 = &v148[2 * v147];
        *(_WORD *)uint64_t v66 = 0;
        unint64_t v68 = v66 + 2;
        while (v58 != v59)
        {
          __int16 v159 = *((_WORD *)v58 - 1);
          v58 -= 2;
          *((_WORD *)v66 - 1) = v159;
          v66 -= 2;
        }
LABEL_219:
        *a1 = v66;
        a1[1] = v68;
        a1[2] = v67;
        if (v59) {
          operator delete(v59);
        }
        goto LABEL_221;
      }
      goto LABEL_223;
    }
    goto LABEL_201;
  }
  sub_21634F5D0(a3, (uint64_t)a1);
  unint64_t v13 = a1[2];
  uint64_t v14 = (char *)a1[1];
  if ((unint64_t)v14 >= v13)
  {
    unint64_t v20 = (char *)*a1;
    uint64_t v21 = (uint64_t)&v14[-*a1];
    if (v21 <= -3) {
      goto LABEL_223;
    }
    uint64_t v22 = v21 >> 1;
    unint64_t v23 = v13 - (void)v20;
    if (v23 <= (v21 >> 1) + 1) {
      unint64_t v24 = v22 + 1;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v25 = v24;
    }
    if (v25)
    {
      unint64_t v26 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v25);
      unint64_t v20 = (char *)*a1;
      uint64_t v14 = (char *)a1[1];
    }
    else
    {
      unint64_t v26 = 0;
    }
    int v41 = &v26[2 * v22];
    size_t v42 = &v26[2 * v25];
    *(_WORD *)int v41 = 44;
    uint64_t v15 = v41 + 2;
    while (v14 != v20)
    {
      __int16 v43 = *((_WORD *)v14 - 1);
      v14 -= 2;
      *((_WORD *)v41 - 1) = v43;
      v41 -= 2;
    }
    *a1 = v41;
    a1[1] = v15;
    a1[2] = v42;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *(_WORD *)uint64_t v14 = 44;
    uint64_t v15 = v14 + 2;
  }
  a1[1] = v15;
  sub_21634F5D0(a4, (uint64_t)a1);
  int v45 = (char *)a1[1];
  unint64_t v44 = a1[2];
  if ((unint64_t)v45 >= v44)
  {
    uint64_t v47 = (char *)*a1;
    uint64_t v48 = (uint64_t)&v45[-*a1];
    if (v48 <= -3) {
      goto LABEL_223;
    }
    uint64_t v49 = v48 >> 1;
    unint64_t v50 = v44 - (void)v47;
    if (v50 <= (v48 >> 1) + 1) {
      unint64_t v51 = v49 + 1;
    }
    else {
      unint64_t v51 = v50;
    }
    if (v50 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v52 = v51;
    }
    if (v52)
    {
      uint64_t v53 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v52);
      uint64_t v47 = (char *)*a1;
      int v45 = (char *)a1[1];
    }
    else
    {
      uint64_t v53 = 0;
    }
    uint64_t v54 = &v53[2 * v49];
    float v55 = &v53[2 * v52];
    *(_WORD *)uint64_t v54 = 44;
    unint64_t v46 = v54 + 2;
    while (v45 != v47)
    {
      __int16 v56 = *((_WORD *)v45 - 1);
      v45 -= 2;
      *((_WORD *)v54 - 1) = v56;
      v54 -= 2;
    }
    *a1 = v54;
    a1[1] = v46;
    a1[2] = v55;
    if (v47) {
      operator delete(v47);
    }
  }
  else
  {
    *(_WORD *)int v45 = 44;
    unint64_t v46 = v45 + 2;
  }
  a1[1] = v46;
  sub_21634F7A0(a2, (uint64_t)a1);
  BOOL v58 = (char *)a1[1];
  unint64_t v57 = a1[2];
  if ((unint64_t)v58 >= v57)
  {
    uint64_t v59 = (char *)*a1;
    uint64_t v60 = (uint64_t)&v58[-*a1];
    if (v60 > -3)
    {
      uint64_t v61 = v60 >> 1;
      unint64_t v62 = v57 - (void)v59;
      if (v62 <= (v60 >> 1) + 1) {
        unint64_t v63 = v61 + 1;
      }
      else {
        unint64_t v63 = v62;
      }
      if (v62 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v64 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v64 = v63;
      }
      if (v64)
      {
        float v65 = (char *)sub_21610FD44((uint64_t)(a1 + 2), v64);
        uint64_t v59 = (char *)*a1;
        BOOL v58 = (char *)a1[1];
      }
      else
      {
        float v65 = 0;
      }
      uint64_t v66 = &v65[2 * v61];
      uint64_t v67 = &v65[2 * v64];
      *(_WORD *)uint64_t v66 = 0;
      unint64_t v68 = v66 + 2;
      while (v58 != v59)
      {
        __int16 v69 = *((_WORD *)v58 - 1);
        v58 -= 2;
        *((_WORD *)v66 - 1) = v69;
        v66 -= 2;
      }
      goto LABEL_219;
    }
LABEL_223:
    sub_21610CB04();
  }
LABEL_201:
  *(_WORD *)BOOL v58 = 0;
  unint64_t v68 = v58 + 2;
LABEL_221:
  a1[1] = v68;
}

void sub_21634F5D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (a1[1] == *a1)
  {
    unint64_t v18 = *(void *)(a2 + 16);
    int v19 = *(_WORD **)(a2 + 8);
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = *(_WORD **)a2;
      uint64_t v22 = (uint64_t)v19 - *(void *)a2;
      if (v22 <= -3) {
LABEL_40:
      }
        sub_21610CB04();
      uint64_t v23 = v22 >> 1;
      unint64_t v24 = v18 - (void)v21;
      if (v24 <= (v22 >> 1) + 1) {
        unint64_t v25 = v23 + 1;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v24 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v26 = v25;
      }
      if (v26)
      {
        uint64_t v27 = (char *)sub_21610FD44(a2 + 16, v26);
        uint64_t v21 = *(_WORD **)a2;
        int v19 = *(_WORD **)(a2 + 8);
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v28 = &v27[2 * v23];
      uint64_t v29 = &v27[2 * v26];
      *(_WORD *)uint64_t v28 = 42;
      unint64_t v20 = v28 + 2;
      while (v19 != v21)
      {
        __int16 v30 = *--v19;
        *((_WORD *)v28 - 1) = v30;
        v28 -= 2;
      }
      *(void *)a2 = v28;
      *(void *)(a2 + 8) = v20;
      *(void *)(a2 + 16) = v29;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *int v19 = 42;
      unint64_t v20 = v19 + 1;
    }
    *(void *)(a2 + 8) = v20;
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = (void *)(a2 + 16);
    signed int v7 = *(_WORD **)(a2 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = *(_WORD **)a2;
        uint64_t v10 = (uint64_t)v7 - *(void *)a2;
        if (v10 <= -3) {
          goto LABEL_40;
        }
        uint64_t v11 = v10 >> 1;
        unint64_t v12 = *v6 - (void)v9;
        if (v12 <= (v10 >> 1) + 1) {
          uint64_t v13 = v11 + 1;
        }
        else {
          uint64_t v13 = *v6 - (void)v9;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_21610FD44(a2 + 16, v14);
          uint64_t v9 = *(_WORD **)a2;
          signed int v7 = *(_WORD **)(a2 + 8);
        }
        else
        {
          uint64_t v15 = 0;
        }
        float v16 = &v15[2 * v11];
        *(_WORD *)float v16 = *(_WORD *)(v3 + 2 * v5);
        uint64_t v8 = v16 + 2;
        while (v7 != v9)
        {
          __int16 v17 = *--v7;
          *((_WORD *)v16 - 1) = v17;
          v16 -= 2;
        }
        *(void *)a2 = v16;
        *(void *)(a2 + 8) = v8;
        *(void *)(a2 + 16) = &v15[2 * v14];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *signed int v7 = *(_WORD *)(v3 + 2 * v5);
        uint64_t v8 = v7 + 1;
      }
      *(void *)(a2 + 8) = v8;
      ++v5;
      uint64_t v3 = *a1;
      signed int v7 = v8;
    }
    while (v5 < (a1[1] - *a1) >> 1);
  }
}

void sub_21634F7A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (void *)(a2 + 16);
    signed int v7 = *(_WORD **)(a2 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = *(_WORD **)a2;
        uint64_t v10 = (uint64_t)v7 - *(void *)a2;
        if (v10 <= -3) {
          sub_21610CB04();
        }
        uint64_t v11 = v10 >> 1;
        unint64_t v12 = *v6 - (void)v9;
        if (v12 <= (v10 >> 1) + 1) {
          uint64_t v13 = v11 + 1;
        }
        else {
          uint64_t v13 = *v6 - (void)v9;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_21610FD44((uint64_t)v6, v14);
          uint64_t v9 = *(_WORD **)a2;
          signed int v7 = *(_WORD **)(a2 + 8);
        }
        else
        {
          uint64_t v15 = 0;
        }
        float v16 = &v15[2 * v11];
        *(_WORD *)float v16 = *(_WORD *)(v2 + 2 * v5);
        uint64_t v8 = v16 + 2;
        while (v7 != v9)
        {
          __int16 v17 = *--v7;
          *((_WORD *)v16 - 1) = v17;
          v16 -= 2;
        }
        *(void *)a2 = v16;
        *(void *)(a2 + 8) = v8;
        *(void *)(a2 + 16) = &v15[2 * v14];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *signed int v7 = *(_WORD *)(v2 + 2 * v5);
        uint64_t v8 = v7 + 1;
      }
      *(void *)(a2 + 8) = v8;
      ++v5;
      uint64_t v2 = *a1;
      signed int v7 = v8;
    }
    while (v5 < (a1[1] - *a1) >> 1);
  }
}

uint64_t sub_21634F8BC(uint64_t *a1, void *a2, char a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (a3)
  {
    if (v6 == *a1) {
      return 1;
    }
    unint64_t v7 = 0;
LABEL_4:
    uint64_t v8 = 0;
    int v9 = *(unsigned __int16 *)(v5 + 2 * v7);
    while ((unsigned __int16)word_216381F32[v8] != v9)
    {
      if (++v8 == 5)
      {
        if ((v9 - 12549) > 0x24) {
          return 0;
        }
LABEL_11:
        char v10 = 49;
        switch(v9)
        {
          case 711:
            char v10 = 51;
            break;
          case 712:
            goto LABEL_15;
          case 713:
            break;
          case 714:
            char v10 = 50;
            break;
          case 715:
            char v10 = 52;
            break;
          default:
            if (v9 == 729) {
              char v10 = 53;
            }
            else {
LABEL_15:
            }
              char v10 = v9 + 49;
            break;
        }
        unint64_t v12 = (char *)a2[1];
        unint64_t v11 = a2[2];
        if ((unint64_t)v12 < v11)
        {
          char *v12 = v10;
          uint64_t v13 = v12 + 1;
          goto LABEL_35;
        }
        uint64_t v14 = (char *)*a2;
        uint64_t v15 = &v12[-*a2];
        unint64_t v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0) {
          goto LABEL_62;
        }
        unint64_t v17 = v11 - (void)v14;
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          int v19 = (char *)operator new(v18);
        }
        else {
          int v19 = 0;
        }
        unint64_t v20 = &v15[(void)v19];
        uint64_t v21 = &v15[(void)v19];
        *uint64_t v21 = v10;
        uint64_t v13 = v21 + 1;
        if (v12 != v14)
        {
          uint64_t v22 = &v12[~(unint64_t)v14];
          do
          {
            char v23 = *--v12;
            (v22--)[(void)v19] = v23;
          }
          while (v12 != v14);
          unint64_t v12 = (char *)*a2;
          unint64_t v20 = v19;
        }
        *a2 = v20;
        a2[1] = v13;
        a2[2] = &v19[v18];
        if (v12) {
          operator delete(v12);
        }
LABEL_35:
        a2[1] = v13;
        ++v7;
        uint64_t v5 = *a1;
        if (v7 >= (a1[1] - *a1) >> 1) {
          return 1;
        }
        goto LABEL_4;
      }
    }
    if (v8 != -1 || (unsigned __int16)(v9 - 12549) < 0x25u) {
      goto LABEL_11;
    }
    return 0;
  }
  else
  {
    if (v6 == *a1) {
      return 1;
    }
    for (unint64_t i = 0; i < (a1[1] - *a1) >> 1; ++i)
    {
      int v25 = *(unsigned __int16 *)(v5 + 2 * i);
      BOOL v26 = (v25 - 97) < 0x1A;
      if ((v25 - 97) > 0x19) {
        break;
      }
      char v27 = v25;
      uint64_t v29 = (char *)a2[1];
      unint64_t v28 = a2[2];
      if ((unint64_t)v29 >= v28)
      {
        unint64_t v31 = (char *)*a2;
        uint64_t v32 = &v29[-*a2];
        unint64_t v33 = (unint64_t)(v32 + 1);
        if ((uint64_t)(v32 + 1) < 0) {
LABEL_62:
        }
          sub_21610CB04();
        unint64_t v34 = v28 - (void)v31;
        if (2 * v34 > v33) {
          unint64_t v33 = 2 * v34;
        }
        if (v34 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v35 = v33;
        }
        if (v35) {
          uint64_t v36 = (char *)operator new(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        unint64_t v37 = &v32[(void)v36];
        unint64_t v38 = &v32[(void)v36];
        char *v38 = v27;
        __int16 v30 = v38 + 1;
        if (v29 != v31)
        {
          uint64_t v39 = &v29[~(unint64_t)v31];
          do
          {
            char v40 = *--v29;
            (v39--)[(void)v36] = v40;
          }
          while (v29 != v31);
          uint64_t v29 = (char *)*a2;
          unint64_t v37 = v36;
        }
        *a2 = v37;
        a2[1] = v30;
        a2[2] = &v36[v35];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *uint64_t v29 = v27;
        __int16 v30 = v29 + 1;
      }
      a2[1] = v30;
      uint64_t v5 = *a1;
    }
  }
  return v26;
}

uint64_t sub_21634FBA4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C6C6F50;
  *(_DWORD *)(a1 + 28) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 10sub_216195244(&a9, 0) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16sub_216195244(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 12sub_216195244(&a9, 0) = sub_216322AAC(a2);
  return a1;
}

void sub_21634FC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = (void *)v2[22];
  if (v5)
  {
    v2[23] = v5;
    operator delete(v5);
  }
  sub_2162CEB60((void ***)va);
  uint64_t v6 = *v3;
  if (*v3)
  {
    v2[17] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)v2[12];
  if (v7)
  {
    v2[13] = v7;
    operator delete(v7);
  }
  sub_2162CEB60((void ***)va);
  uint64_t v8 = (std::__shared_weak_count *)v2[6];
  if (v8) {
    sub_2161121B0(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21634FCAC(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C6F50;
  sub_21634FD54((void *)a1);
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(void *)(a1 + 184) = v2;
    operator delete(v2);
  }
  unint64_t v7 = (void **)(a1 + 152);
  sub_2162CEB60(&v7);
  uint64_t v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(void *)(a1 + 136) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  unint64_t v7 = (void **)(a1 + 72);
  sub_2162CEB60(&v7);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    sub_2161121B0(v5);
  }
  return a1;
}

void sub_21634FD54(void *a1)
{
  a1[2] = 0;
  uint64_t v2 = a1[9];
  for (uint64_t i = a1[10]; i != v2; i -= 8)
  {
    uint64_t v5 = *(void ***)(i - 8);
    uint64_t v4 = v5;
    if (v5) {
      sub_21628D4F4(v4);
    }
  }
  a1[10] = v2;
  a1[13] = a1[12];
  uint64_t v6 = a1[19];
  for (uint64_t j = a1[20]; j != v6; j -= 8)
  {
    int v9 = *(void ***)(j - 8);
    uint64_t v8 = v9;
    if (v9) {
      sub_21628D4F4(v8);
    }
  }
  a1[20] = v6;
  a1[23] = a1[22];
  a1[17] = a1[16];
}

void sub_21634FDDC(uint64_t a1)
{
  sub_21634FCAC(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21634FE14(uint64_t a1, char *__s, uint64_t a3)
{
  char v3 = (char)__s;
  sub_216226684(__s, a3, 1, v166);
  long long v5 = *(_OWORD *)v166;
  *(_OWORD *)v166 = 0uLL;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 4sub_216195244(&a9, 0) = v5;
  if (!v6)
  {
    unint64_t v7 = (unsigned int **)v5;
    if ((void)v5) {
      goto LABEL_5;
    }
LABEL_9:
    size_t v18 = sub_2162769A4();
    sub_21627707C((uint64_t)v18, "Dictionary file %s is empty", v19, v20, v21, v22, v23, v24, v3);
    return 0;
  }
  sub_2161121B0(v6);
  if (*(void *)&v166[8]) {
    sub_2161121B0(*(std::__shared_weak_count **)&v166[8]);
  }
  unint64_t v7 = *(unsigned int ***)(a1 + 40);
  if (!v7) {
    goto LABEL_9;
  }
LABEL_5:
  int v9 = *v7;
  unint64_t v8 = (unint64_t)v7[1];
  if (v8 < 4)
  {
    if (!v9)
    {
      unint64_t v146 = sub_2162769A4();
      sub_21627707C((uint64_t)v146, "Dictionary file %s has an empty header", v147, v148, v149, v150, v151, v152, v3);
      return 0;
    }
    LODWORD(v1sub_216195244(&a9, 0) = *v9;
  }
  else
  {
    uint64_t v10 = *v9;
    if (v8 == (v10 ^ 0xEF718F77))
    {
      unint64_t v11 = sub_2162769A4();
      sub_21627707C((uint64_t)v11, "Dictionary file %s doesn't support the original format", v12, v13, v14, v15, v16, v17, v3);
      return 0;
    }
  }
  if (v10 == 105)
  {
    *(_DWORD *)(a1 + 32) = v9[1];
    *(_DWORD *)(a1 + 24) = v9[2];
    uint64_t v26 = v9[3];
    uint64_t v25 = v9[4];
    unsigned int v27 = v9[5];
    *(_DWORD *)(a1 + 28) = v27;
    *(_DWORD *)(a1 + 8) = v9[6];
    unint64_t v28 = v9 + 12;
    if (v27)
    {
      uint64_t v154 = v26;
      uint64_t v155 = v25;
      unsigned int v29 = 0;
      __int16 v160 = (void ***)(a1 + 72);
      uint64_t v161 = (void **)(a1 + 128);
      uint64_t v158 = (char **)(a1 + 96);
      char v156 = v3;
      uint64_t v157 = a1 + 192;
      __int16 v159 = (void ***)(a1 + 152);
      v162 = (char **)(a1 + 176);
      uint64_t v163 = a1 + 168;
      do
      {
        unsigned int v30 = *v28;
        uint64_t v32 = *(char **)(a1 + 136);
        unint64_t v31 = *(void *)(a1 + 144);
        if ((unint64_t)v32 >= v31)
        {
          unint64_t v34 = (char *)*v161;
          uint64_t v35 = (v32 - (unsigned char *)*v161) >> 2;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v37 = v31 - (void)v34;
          if (v37 >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            uint64_t v39 = (char *)sub_2161129B4(a1 + 144, v38);
            unint64_t v34 = *(char **)(a1 + 128);
            uint64_t v32 = *(char **)(a1 + 136);
          }
          else
          {
            uint64_t v39 = 0;
          }
          char v40 = &v39[4 * v35];
          *(_DWORD *)char v40 = v30;
          unint64_t v33 = v40 + 4;
          while (v32 != v34)
          {
            int v41 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          *(void *)(a1 + 128) = v40;
          *(void *)(a1 + 136) = v33;
          *(void *)(a1 + 144) = &v39[4 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v32 = v30;
          unint64_t v33 = v32 + 4;
        }
        *(void *)(a1 + 136) = v33;
        unint64_t v42 = v28[1];
        uint64_t v43 = v28[2];
        uint64_t v45 = v28[3];
        unsigned int v44 = v28[4];
        unint64_t v46 = v28[5];
        uint64_t v164 = v28[6];
        uint64_t v47 = v28 + 8;
        uint64_t v48 = v28[7];
        sub_216354F00(&v165, (void *)v28 + 4, v42, 0);
        uint64_t v49 = *(void ***)(a1 + 80);
        unint64_t v50 = *(void *)(a1 + 88);
        if ((unint64_t)v49 >= v50)
        {
          unint64_t v51 = *v160;
          uint64_t v52 = v49 - *v160;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61) {
            sub_21610CB04();
          }
          uint64_t v54 = v50 - (void)v51;
          if (v54 >> 2 > v53) {
            unint64_t v53 = v54 >> 2;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v53;
          }
          uint64_t v168 = a1 + 88;
          if (v55)
          {
            __int16 v56 = (char *)sub_2160FFAA8(a1 + 88, v55);
            unint64_t v51 = *(void ***)(a1 + 72);
            uint64_t v49 = *(void ***)(a1 + 80);
          }
          else
          {
            __int16 v56 = 0;
          }
          unint64_t v57 = (void **)&v56[8 * v52];
          BOOL v58 = &v56[8 * v55];
          unint64_t v167 = v58;
          *unint64_t v57 = v165;
          uint64_t v59 = v57 + 1;
          uint64_t v165 = 0;
          *(void *)&v166[16] = v57 + 1;
          if (v49 != v51)
          {
            do
            {
              uint64_t v60 = *--v49;
              *--unint64_t v57 = v60;
              char *v49 = 0;
            }
            while (v49 != v51);
            uint64_t v59 = *(void **)&v166[16];
            BOOL v58 = v167;
          }
          long long v61 = *(_OWORD *)(a1 + 72);
          *(void *)(a1 + 72) = v57;
          *(void *)(a1 + 8sub_216195244(&a9, 0) = v59;
          *(_OWORD *)&v166[8] = v61;
          unint64_t v62 = *(char **)(a1 + 88);
          *(void *)(a1 + 88) = v58;
          unint64_t v167 = v62;
          *(void *)v166 = v61;
          sub_2162CF808((uint64_t)v166);
          unint64_t v63 = (void **)v165;
          *(void *)(a1 + 8sub_216195244(&a9, 0) = v59;
          if (v63) {
            sub_21628D4F4(v63);
          }
        }
        else
        {
          char *v49 = v165;
          *(void *)(a1 + 8sub_216195244(&a9, 0) = v49 + 1;
        }
        unint64_t v28 = (unsigned int *)((char *)v47 + v42 + v45);
        if (*(_DWORD *)(a1 + 28) != 1)
        {
          float v65 = *(unsigned int ***)(a1 + 104);
          unint64_t v64 = *(void *)(a1 + 112);
          if ((unint64_t)v65 >= v64)
          {
            uint64_t v67 = ((char *)v65 - *v158) >> 3;
            if ((unint64_t)(v67 + 1) >> 61) {
              sub_2161BA9E4();
            }
            uint64_t v68 = v64 - (void)*v158;
            uint64_t v69 = v68 >> 2;
            if (v68 >> 2 <= (unint64_t)(v67 + 1)) {
              uint64_t v69 = v67 + 1;
            }
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v70 = v69;
            }
            if (v70) {
              __int16 v71 = (char *)sub_2160FFAA8(a1 + 112, v70);
            }
            else {
              __int16 v71 = 0;
            }
            unsigned int v72 = (unsigned int **)&v71[8 * v67];
            *unsigned int v72 = v28;
            uint64_t v66 = v72 + 1;
            uint64_t v74 = *(char **)(a1 + 96);
            int v73 = *(char **)(a1 + 104);
            if (v73 != v74)
            {
              do
              {
                uint64_t v75 = (unsigned int *)*((void *)v73 - 1);
                v73 -= 8;
                *--unsigned int v72 = v75;
              }
              while (v73 != v74);
              int v73 = *v158;
            }
            *(void *)(a1 + 96) = v72;
            *(void *)(a1 + 104) = v66;
            *(void *)(a1 + 112) = &v71[8 * v70];
            if (v73) {
              operator delete(v73);
            }
          }
          else
          {
            *float v65 = v28;
            uint64_t v66 = v65 + 1;
          }
          *(void *)(a1 + 104) = v66;
          unint64_t v28 = (unsigned int *)((char *)v28 + v43);
        }
        if (v44)
        {
          sub_216354F00(&v165, v28, v46, 0);
          unint64_t v76 = *(void ***)(a1 + 160);
          unint64_t v77 = *(void *)(a1 + 168);
          if ((unint64_t)v76 >= v77)
          {
            uint64_t v80 = *v159;
            uint64_t v81 = v76 - *v159;
            unint64_t v82 = v81 + 1;
            if ((unint64_t)(v81 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v83 = v77 - (void)v80;
            if (v83 >> 2 > v82) {
              unint64_t v82 = v83 >> 2;
            }
            if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v84 = v82;
            }
            uint64_t v168 = a1 + 168;
            if (v84)
            {
              uint64_t v85 = (char *)sub_2160FFAA8(v163, v84);
              uint64_t v80 = *(void ***)(a1 + 152);
              unint64_t v76 = *(void ***)(a1 + 160);
            }
            else
            {
              uint64_t v85 = 0;
            }
            __int16 v92 = (void **)&v85[8 * v81];
            unint64_t v93 = &v85[8 * v84];
            unint64_t v167 = v93;
            *__int16 v92 = v165;
            unint64_t v94 = v92 + 1;
            uint64_t v165 = 0;
            *(void *)&v166[16] = v92 + 1;
            if (v76 != v80)
            {
              do
              {
                uint64_t v95 = *--v76;
                *--__int16 v92 = v95;
                unsigned char *v76 = 0;
              }
              while (v76 != v80);
              unint64_t v94 = *(void **)&v166[16];
              unint64_t v93 = v167;
            }
            long long v96 = *(_OWORD *)(a1 + 152);
            *(void *)(a1 + 152) = v92;
            *(void *)(a1 + 16sub_216195244(&a9, 0) = v94;
            *(_OWORD *)&v166[8] = v96;
            uint64_t v97 = *(char **)(a1 + 168);
            *(void *)(a1 + 168) = v93;
            unint64_t v167 = v97;
            *(void *)v166 = v96;
            sub_2162CF808((uint64_t)v166);
            uint64_t v98 = (void **)v165;
            *(void *)(a1 + 16sub_216195244(&a9, 0) = v94;
            if (v98) {
              sub_21628D4F4(v98);
            }
          }
          else
          {
            unsigned char *v76 = v165;
            *(void *)(a1 + 16sub_216195244(&a9, 0) = v76 + 1;
          }
          unint64_t v99 = (char *)v28 + v46 + v48;
          uint64_t v101 = *(void **)(a1 + 184);
          unint64_t v100 = *(void *)(a1 + 192);
          if ((unint64_t)v101 >= v100)
          {
            uint64_t v103 = ((char *)v101 - *v162) >> 3;
            if ((unint64_t)(v103 + 1) >> 61) {
              goto LABEL_141;
            }
            uint64_t v104 = v100 - (void)*v162;
            uint64_t v105 = v104 >> 2;
            if (v104 >> 2 <= (unint64_t)(v103 + 1)) {
              uint64_t v105 = v103 + 1;
            }
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v106 = v105;
            }
            if (v106) {
              uint64_t v107 = (char *)sub_2160FFAA8(v157, v106);
            }
            else {
              uint64_t v107 = 0;
            }
            uint64_t v108 = &v107[8 * v103];
            *(void *)uint64_t v108 = v99;
            char v102 = v108 + 8;
            unint64_t v110 = *(char **)(a1 + 176);
            unint64_t v109 = *(char **)(a1 + 184);
            if (v109 != v110)
            {
              do
              {
                uint64_t v111 = *((void *)v109 - 1);
                v109 -= 8;
                *((void *)v108 - 1) = v111;
                v108 -= 8;
              }
              while (v109 != v110);
              unint64_t v109 = *v162;
            }
            *(void *)(a1 + 176) = v108;
            *(void *)(a1 + 184) = v102;
            *(void *)(a1 + 192) = &v107[8 * v106];
            if (v109) {
              operator delete(v109);
            }
          }
          else
          {
            void *v101 = v99;
            char v102 = v101 + 1;
          }
          *(void *)(a1 + 184) = v102;
          unint64_t v28 = (unsigned int *)&v99[v164];
        }
        else
        {
          sub_216354F00(&v165, 0, 0, 0);
          uint64_t v78 = *(void ***)(a1 + 160);
          unint64_t v79 = *(void *)(a1 + 168);
          if ((unint64_t)v78 >= v79)
          {
            unint64_t v86 = *v159;
            uint64_t v87 = v78 - *v159;
            unint64_t v88 = v87 + 1;
            if ((unint64_t)(v87 + 1) >> 61) {
              sub_21610CB04();
            }
            uint64_t v89 = v79 - (void)v86;
            if (v89 >> 2 > v88) {
              unint64_t v88 = v89 >> 2;
            }
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v88;
            }
            uint64_t v168 = a1 + 168;
            if (v90)
            {
              BOOL v91 = (char *)sub_2160FFAA8(v163, v90);
              unint64_t v86 = *(void ***)(a1 + 152);
              uint64_t v78 = *(void ***)(a1 + 160);
            }
            else
            {
              BOOL v91 = 0;
            }
            uint8x8_t v112 = (void **)&v91[8 * v87];
            __int16 v113 = &v91[8 * v90];
            unint64_t v167 = v113;
            *uint8x8_t v112 = v165;
            uint64_t v114 = v112 + 1;
            uint64_t v165 = 0;
            *(void *)&v166[16] = v112 + 1;
            if (v78 != v86)
            {
              do
              {
                __int16 v115 = *--v78;
                *--uint8x8_t v112 = v115;
                uint64_t *v78 = 0;
              }
              while (v78 != v86);
              uint64_t v114 = *(void **)&v166[16];
              __int16 v113 = v167;
            }
            long long v116 = *(_OWORD *)(a1 + 152);
            *(void *)(a1 + 152) = v112;
            *(void *)(a1 + 16sub_216195244(&a9, 0) = v114;
            *(_OWORD *)&v166[8] = v116;
            uint64_t v117 = *(char **)(a1 + 168);
            *(void *)(a1 + 168) = v113;
            unint64_t v167 = v117;
            *(void *)v166 = v116;
            sub_2162CF808((uint64_t)v166);
            unsigned int v118 = (void **)v165;
            *(void *)(a1 + 16sub_216195244(&a9, 0) = v114;
            if (v118) {
              sub_21628D4F4(v118);
            }
          }
          else
          {
            uint64_t *v78 = v165;
            *(void *)(a1 + 16sub_216195244(&a9, 0) = v78 + 1;
          }
          uint64_t v120 = *(void **)(a1 + 184);
          unint64_t v119 = *(void *)(a1 + 192);
          if ((unint64_t)v120 >= v119)
          {
            uint64_t v122 = ((char *)v120 - *v162) >> 3;
            if ((unint64_t)(v122 + 1) >> 61) {
LABEL_141:
            }
              sub_2161BA9E4();
            uint64_t v123 = v119 - (void)*v162;
            uint64_t v124 = v123 >> 2;
            if (v123 >> 2 <= (unint64_t)(v122 + 1)) {
              uint64_t v124 = v122 + 1;
            }
            if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v125 = v124;
            }
            if (v125) {
              unint64_t v126 = (char *)sub_2160FFAA8(v157, v125);
            }
            else {
              unint64_t v126 = 0;
            }
            uint64_t v127 = &v126[8 * v122];
            *(void *)uint64_t v127 = 0;
            uint64_t v121 = v127 + 8;
            unint64_t v129 = *(char **)(a1 + 176);
            __int16 v128 = *(char **)(a1 + 184);
            if (v128 != v129)
            {
              do
              {
                uint64_t v130 = *((void *)v128 - 1);
                v128 -= 8;
                *((void *)v127 - 1) = v130;
                v127 -= 8;
              }
              while (v128 != v129);
              __int16 v128 = *v162;
            }
            *(void *)(a1 + 176) = v127;
            *(void *)(a1 + 184) = v121;
            *(void *)(a1 + 192) = &v126[8 * v125];
            if (v128) {
              operator delete(v128);
            }
          }
          else
          {
            *uint64_t v120 = 0;
            uint64_t v121 = v120 + 1;
          }
          *(void *)(a1 + 184) = v121;
        }
        ++v29;
      }
      while (v29 < *(_DWORD *)(a1 + 28));
      __int16 v131 = *(unsigned int ***)(a1 + 40);
      int v9 = *v131;
      unint64_t v8 = (unint64_t)v131[1];
      uint64_t v25 = v155;
      char v3 = v156;
      uint64_t v26 = v154;
    }
    *(_DWORD *)(a1 + 36) = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 72);
    *(void *)(a1 + 56) = v28;
    *(void *)(a1 + 64) = (char *)v28 + v26;
    if ((char *)v28 + v26 + v25 == (char *)v9 + v8) {
      return 1;
    }
    uint64_t v132 = sub_2162769A4();
    sub_21627707C((uint64_t)v132, "Dictionary file %s has the wrong content", v133, v134, v135, v136, v137, v138, v3);
  }
  else
  {
    __int16 v139 = sub_2162769A4();
    sub_21627707C((uint64_t)v139, "Dictionary file %s is incompatible (version %d, expected version %d)", v140, v141, v142, v143, v144, v145, v3);
  }
  return 0;
}

void sub_216350644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (a26) {
    sub_21628D4F4(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2163506E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_2163506F0(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 28) <= a2)
  {
    uint64_t v2 = 0;
    a2 = -1;
  }
  else
  {
    uint64_t v2 = *(void *)(result + 72) + 8 * a2;
  }
  *(_DWORD *)(result + 36) = a2;
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t sub_21635071C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2);
    char v14 = 0;
    unint64_t v7 = result;
    if ((_BYTE)result)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 12 * (result >> 12);
      uint64_t v10 = 4 * (result >> 12);
      do
      {
        if (*(_DWORD *)(a1 + 28) == 1) {
          uint64_t v11 = *(void *)(a1 + 56) + v9;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 56)
        }
              + 12 * *(unsigned int *)(*(void *)(*(void *)(a1 + 96) + 8 * *(int *)(a1 + 36)) + v10 + 4 * v8);
        uint64_t v12 = *(void *)(a1 + 64) + *(unsigned int *)(v11 + 8);
        v13[0] = v11;
        v13[1] = v12;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, char *))(a3 + 16))(a3, v13, &v14);
        if (v14) {
          break;
        }
        ++v8;
        v9 += 12;
      }
      while (v8 < v7);
    }
  }
  return result;
}

uint64_t sub_216350850(uint64_t result, unsigned int a2, uint64_t a3, unsigned char *a4)
{
  unint64_t v4 = a2;
  if ((_BYTE)a2 && !*a4)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 40);
    uint64_t v9 = 12 * (a2 >> 12);
    uint64_t v10 = 4 * (a2 >> 12);
    do
    {
      if (*(_DWORD *)(v8 + 28) == 1) {
        uint64_t v11 = *(void *)(v8 + 56) + v9;
      }
      else {
        uint64_t v11 = *(void *)(v8 + 56)
      }
            + 12 * *(unsigned int *)(*(void *)(*(void *)(v8 + 96) + 8 * *(int *)(v8 + 36)) + v10 + 4 * v7);
      uint64_t v12 = *(void *)(v8 + 64) + *(unsigned int *)(v11 + 8);
      v13[0] = v11;
      v13[1] = v12;
      uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)(v6 + 32) + 16))(*(void *)(v6 + 32), v13);
      if (*a4) {
        break;
      }
      ++v7;
      v9 += 12;
    }
    while (v7 < v4);
  }
  return result;
}

void **sub_216350944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 56))(&v16);
  sub_2162C5100(&v16, a1, a3, (uint64_t)&v18);
  sub_21621AB84(&v16, &v18);
  uint64_t v9 = (void **)v19;
  uint64_t v19 = 0;
  if (v9)
  {
    uint64_t v10 = sub_21620FE6C(v9);
    MEMORY[0x2166CA800](v10, 0x20C4093837F09);
  }
  uint64_t v11 = v18;
  size_t v18 = 0;
  if (v11) {
    MEMORY[0x2166CA800](v11, 0x1010C40E4C6A875);
  }
  if ((*(uint64_t (**)(uint64_t, void ***))(*(void *)a1 + 88))(a1, &v16))
  {
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    v15[2] = sub_216350B64;
    v15[3] = &unk_2642676C0;
    v15[4] = a5;
    size_t v18 = (void **)MEMORY[0x263EF8330];
    uint64_t v19 = 0x40000000;
    uint64_t v20 = sub_216350850;
    uint64_t v21 = &unk_2642673F0;
    uint64_t v22 = v15;
    uint64_t v23 = a1;
    (*(void (**)(uint64_t, void ***, uint64_t, void ***))(*(void *)a1 + 80))(a1, &v16, a4, &v18);
  }
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12)
  {
    uint64_t v13 = sub_21620FE6C(v12);
    MEMORY[0x2166CA800](v13, 0x20C4093837F09);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    return (void **)MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
  }
  return result;
}

void sub_216350B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2162153A0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216350B64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_216350B74(void **a1, _DWORD **a2, char a3, BOOL *a4, BOOL *a5)
{
  if (!((unsigned int (*)(void **))(*a1)[11])(a1)) {
    return 0;
  }
  unsigned int v10 = sub_216355444(a1[2], a2);
  *a5 = v10 != 0;
  *a4 = (v10 & 0x800) != 0;
  uint64_t v11 = 1;
  if ((a3 & 0xE) != 0 && *a5)
  {
    if (a3) {
      int v12 = 256;
    }
    else {
      int v12 = 512;
    }
    LODWORD(v11) = (v10 & v12) != 0;
    if (a3) {
      unsigned int v13 = (v10 >> 10) & 1;
    }
    else {
      unsigned int v13 = 1;
    }
    if ((a3 & 8) != 0) {
      return v13;
    }
    else {
      return v11;
    }
  }
  return v11;
}

uint64_t sub_216350C4C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) & 0xFFFFFF00;
}

uint64_t sub_216350C88(void *a1, unsigned int a2)
{
  uint64_t v3 = a1[15];
  if (v3) {
    return sub_216322CC4(v3, (_WORD *)(a1[8] + *(unsigned int *)(a1[7] + 12 * a2 + 8)));
  }
  else {
    return *sub_216268B0C();
  }
}

_DWORD *sub_216350CD4(_DWORD *result, unsigned __int8 *a2, unint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      unint64_t v4 = result;
      uint64_t v5 = (int)result[9];
      if (v5 != -1)
      {
        if (*(void *)(*((void *)result + 22) + 8 * v5))
        {
          unint64_t v7 = (uint64_t *)(*((void *)result + 19) + 8 * v5);
          sub_216221510(&v21, (_DWORD *)*v7);
          sub_2162100D0((uint64_t)&v23, &v21);
          uint64_t v8 = v22;
          uint64_t v22 = 0;
          if (v8)
          {
            uint64_t v9 = sub_21620FE6C(v8);
            MEMORY[0x2166CA800](v9, 0x20C4093837F09);
          }
          unsigned int v10 = v21;
          uint64_t v21 = 0;
          if (v10) {
            MEMORY[0x2166CA800](v10, 0x1010C40E4C6A875);
          }
          sub_2163552A8(v7, &v23, a2, a3, &v21);
          if ((*(uint64_t (**)(_DWORD *, void ***))(*(void *)v4 + 88))(v4, &v21))
          {
            sub_2162100D0((uint64_t)&v19, &v21);
            sub_21622161C(&v19, *v7);
            uint64_t v11 = v20;
            uint64_t v20 = 0;
            if (v11)
            {
              int v12 = sub_21620FE6C(v11);
              MEMORY[0x2166CA800](v12, 0x20C4093837F09);
            }
            unsigned int v13 = v19;
            uint64_t v19 = 0;
            if (v13) {
              MEMORY[0x2166CA800](v13, 0x1010C40E4C6A875);
            }
          }
          char v14 = v22;
          uint64_t v22 = 0;
          if (v14)
          {
            uint64_t v15 = sub_21620FE6C(v14);
            MEMORY[0x2166CA800](v15, 0x20C4093837F09);
          }
          uint64_t v16 = v21;
          uint64_t v21 = 0;
          if (v16) {
            MEMORY[0x2166CA800](v16, 0x1010C40E4C6A875);
          }
          uint64_t v17 = v24;
          uint64_t v24 = 0;
          if (v17)
          {
            size_t v18 = sub_21620FE6C(v17);
            MEMORY[0x2166CA800](v18, 0x20C4093837F09);
          }
          uint64_t result = v23;
          uint64_t v23 = 0;
          if (result) {
            return (_DWORD *)MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
          }
        }
      }
    }
  }
  return result;
}

void sub_216350F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void **);
  uint64_t v11 = va_arg(va1, void);
  sub_2162153A0((void ***)va);
  sub_21620FDCC((void ***)va1);
  sub_21620FDCC((void ***)(v7 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_216350F68(uint64_t result, unsigned int a2, uint64_t a3, unsigned char *a4)
{
  if (a3)
  {
    unint64_t v4 = a2;
    if ((_BYTE)a2)
    {
      if (!*a4)
      {
        uint64_t v6 = result;
        unint64_t v7 = 0;
        uint64_t v8 = *(void *)(result + 40);
        uint64_t v9 = 4 * (a2 >> 12);
        do
        {
          uint64_t v10 = *(void *)(v8 + 64);
          v11[0] = *(void *)(v8 + 56)
                 + 12 * *(unsigned int *)(*(void *)(*(void *)(v8 + 176) + 8 * *(int *)(v8 + 36)) + v9 + 4 * v7);
          v11[1] = v10 + *(unsigned int *)(v11[0] + 8);
          uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)(v6 + 32) + 16))(*(void *)(v6 + 32), v11);
          if (*a4) {
            break;
          }
          ++v7;
        }
        while (v7 < v4);
      }
    }
  }
  return result;
}

uint64_t sub_216351048(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_216351050(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_216351058()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F420, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F420))
  {
    operator new();
  }
  return qword_26797F418;
}

void sub_2163510D0(_Unwind_Exception *a1)
{
}

uint64_t sub_2163510E8(uint64_t a1, uint64_t a2)
{
  if (a2 == 5)
  {
    unint64_t v4 = (const void **)(a1 + 8);
    uint64_t v3 = *(void *)(a1 + 8);
    if (!v3)
    {
      CFURLRef v5 = sub_216351150((unsigned char *)a1, 5uLL);
      sub_21617DB94(v4, v5);
      uint64_t v3 = *(void *)(a1 + 8);
    }
    if (v3) {
      return 5;
    }
    else {
      return 2;
    }
  }
  return a2;
}

CFURLRef sub_216351150(unsigned char *a1, unint64_t a2)
{
  unint64_t v4 = (uint64_t *)sub_2162D8C20();
  CFURLRef result = sub_2162D9500(v4, a2, 0);
  if (result)
  {
    *a1 = 1;
  }
  else
  {
    uint64_t v6 = (uint64_t *)sub_2162D8C20();
    return sub_2162D9500(v6, a2, 1);
  }
  return result;
}

CFURLRef sub_2163511B8(uint64_t a1, CFURLRef relativeURL)
{
  CFURLRef result = 0;
  if (relativeURL)
  {
    if (!*(unsigned char *)a1)
    {
      CFURLRef result = CFURLCopyAbsoluteURL(relativeURL);
      if (result)
      {
        CFURLRef v4 = result;
        unint64_t v7 = *(const void **)(a1 + 8);
        uint64_t v6 = (const void **)(a1 + 8);
        CFURLRef v5 = v7;
        if (!v7 || !CFEqual(result, v5))
        {
          uint64_t v8 = (uint64_t *)sub_2162D8C20();
          sub_2162D9568(v8, 5uLL, v4);
          CFTypeRef v9 = CFRetain(v4);
          sub_21617DB94(v6, v9);
        }
        CFRelease(v4);
        return (const __CFURL *)1;
      }
    }
  }
  return result;
}

void sub_21635124C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21617DB94((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_216351264(CFStringTokenizerRef *a1, CFStringRef theString, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  CFIndex Length = CFStringGetLength(theString);
  if ((unint64_t)(Length - 201) >= 0xFFFFFFFFFFFFFF3BLL)
  {
    v29.CFIndex length = Length;
    v29.locatiouint64_t n = 0;
    CFStringTokenizerSetString(*a1, theString, v29);
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      if (!CFStringTokenizerAdvanceToNextToken(*a1)) {
        break;
      }
      CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(*a1);
      CFTypeRef v9 = (__CFString *)CFStringCreateWithSubstring(v20, theString, CurrentTokenRange);
      uint64_t v10 = sub_2161E490C();
      CFTypeRef cf = v9;
      int v12 = [v9 componentsSeparatedByCharactersInSet:v11];
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      uint64_t v14 = [v12 countByEnumeratingWithState:v13 objects:(void *)&v23 count:16];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)v24;
        do
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            if (*(void *)v24 != v16) {
              objc_enumerationMutation(v12);
            }
            CFStringRef v18 = *(const __CFString **)(*((void *)&v23 + 1) + 8 * i);
            if (sub_21634594C((uint64_t)a1, v18)) {
              (*(void (**)(uint64_t, const __CFString *))(a3 + 16))(a3, v18);
            }
          }
          uint64_t v15 = [v12 countByEnumeratingWithState:v19 objects:(id *)&v23 count:16];
        }
        while (v15);
      }
      CFRelease(cf);
      if (v6 > 0x13) {
        break;
      }
      v7 += CurrentTokenRange.length;
      ++v6;
    }
    while (v7 < 0x33);
  }
}

uint64_t sub_216351428(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C6E88;
  sub_2163514A4(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  sub_2162C067C((void ****)(a1 + 96), 0);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 4sub_216195244(&a9, 0) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2163514A4(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  *(void *)(a1 + 4sub_216195244(&a9, 0) = *(void *)(a1 + 32);
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
  uint64_t v3 = *(void ****)(a1 + 16);
  if (v3)
  {
    if (*v3) {
      sub_21628D4F4(*v3);
    }
    MEMORY[0x2166CA800](v3, 0x80C40B8603338);
    *(void *)(a1 + 16) = 0;
  }
  sub_2162C067C((void ****)(a1 + 96), 0);

  std::mutex::unlock(v2);
}

uint64_t sub_216351540(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a1 + 104))(a1, a2);
    unint64_t v7 = *(unsigned __int16 *)(a1[4] + 2 * result);
    char v15 = 0;
    if (v7)
    {
      uint64_t v8 = (result + 1);
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = a1[4];
        uint64_t v11 = *(unsigned __int16 *)(v10 + 2 * v8);
        uint64_t v12 = v8 + 1;
        v14[0] = a1 + 10;
        v14[1] = v10 + 2 * (v8 + 1);
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, char *))(a3 + 16))(a3, v14, &v15);
        uint64_t v8 = v12 + v11;
        if (v15) {
          BOOL v13 = 1;
        }
        else {
          BOOL v13 = v9 >= v7;
        }
        ++v9;
      }
      while (!v13);
    }
  }
  return result;
}

uint64_t sub_21635163C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1) << 8;
}

void sub_216351678(uint64_t a1, CFArrayRef theArray)
{
  if (!theArray || !CFArrayGetCount(theArray)) {
    return;
  }
  __int16 v160 = 0;
  uint64_t v161 = 0;
  __int16 v159 = 0;
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  CFIndex v5 = 0;
  CFNumberRef v155 = (const __CFNumber *)*MEMORY[0x263EFFD08];
  int v153 = v4;
  while (v5 < CFArrayGetCount(theArray))
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v5);
    CFIndex v7 = v5 + 1;
    CFStringRef v8 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v5 + 1);
    if (v4 == 17)
    {
      CFNumberRef v9 = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v5 + 2);
      CFIndex v7 = v5 + 3;
      CFArrayRef v10 = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v5 + 3);
      if (!ValueAtIndex) {
        goto LABEL_84;
      }
    }
    else
    {
      CFNumberRef v9 = 0;
      CFArrayRef v10 = 0;
      if (!ValueAtIndex) {
        goto LABEL_84;
      }
    }
    if (v8)
    {
      if (ValueAtIndex != (const __CFString *)v155 && v8 != (const __CFString *)v155)
      {
        CFIndex Length = CFStringGetLength(v8);
        CFIndex v12 = CFStringGetLength(ValueAtIndex);
        if (Length)
        {
          unint64_t v13 = v12;
          if (v12)
          {
            v175 = 0;
            unint64_t v176 = 0;
            unint64_t v177 = 0;
            sub_216184BFC((uint64_t)&v175, Length);
            v178.locatiouint64_t n = 0;
            v178.CFIndex length = Length;
            CFStringGetCharacters(v8, v178, v175);
            if (v175 != v176)
            {
              uint64_t v14 = (char *)(v176 - 1);
              if (v176 - 1 > v175)
              {
                char v15 = (char *)(v175 + 1);
                do
                {
                  __int16 v16 = *((_WORD *)v15 - 1);
                  *((_WORD *)v15 - 1) = *(_WORD *)v14;
                  *(_WORD *)uint64_t v14 = v16;
                  v14 -= 2;
                  BOOL v17 = v15 >= v14;
                  v15 += 2;
                }
                while (!v17);
              }
            }
            unint64_t v172 = 0;
            unint64_t v173 = 0;
            unint64_t v174 = 0;
            sub_216184BFC((uint64_t)&v172, v13);
            v179.locatiouint64_t n = 0;
            v179.CFIndex length = v13;
            CFStringGetCharacters(ValueAtIndex, v179, v172);
            sub_21612F5FC(&__dst, v175, (char *)v176 - (char *)v175);
            __int16 v18 = 0;
            LOWORD(valuePtr) = 0;
            if (v4 == 17 && v9 && v155 != v9)
            {
              if (CFNumberGetValue(v9, kCFNumberSInt16Type, &valuePtr)) {
                __int16 v18 = (__int16)valuePtr;
              }
              else {
                __int16 v18 = 0;
              }
            }
            uint64_t valuePtr = 0;
            uint64_t v163 = 0;
            uint64_t v164 = 0;
            if (v4 == 17 && v10 && v155 != v10)
            {
              for (CFIndex i = 0; i < CFArrayGetCount(v10); ++i)
              {
                CFNumberRef v20 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, i);
                char v156 = 0;
                if (CFNumberGetValue(v20, kCFNumberSInt64Type, &v156))
                {
                  uint64_t v21 = v163;
                  if (v163 >= v164)
                  {
                    long long v23 = (char *)valuePtr;
                    uint64_t v24 = (v163 - (char *)valuePtr) >> 3;
                    unint64_t v25 = v24 + 1;
                    if ((unint64_t)(v24 + 1) >> 61) {
                      sub_21632314C();
                    }
                    uint64_t v26 = v164 - (char *)valuePtr;
                    if ((v164 - (char *)valuePtr) >> 2 > v25) {
                      unint64_t v25 = v26 >> 2;
                    }
                    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v27 = v25;
                    }
                    if (v27)
                    {
                      uint64_t v28 = (char *)sub_2160FFAA8((uint64_t)&v164, v27);
                      long long v23 = (char *)valuePtr;
                      uint64_t v21 = v163;
                    }
                    else
                    {
                      uint64_t v28 = 0;
                    }
                    CFRange v29 = (void **)&v28[8 * v24];
                    *CFRange v29 = v156;
                    uint64_t v22 = (char *)(v29 + 1);
                    while (v21 != v23)
                    {
                      unsigned int v30 = (void *)*((void *)v21 - 1);
                      v21 -= 8;
                      *--CFRange v29 = v30;
                    }
                    uint64_t valuePtr = v29;
                    uint64_t v163 = v22;
                    uint64_t v164 = &v28[8 * v27];
                    if (v23) {
                      operator delete(v23);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v163 = v156;
                    uint64_t v22 = v21 + 8;
                  }
                  uint64_t v163 = v22;
                }
              }
            }
            std::string __s1 = __dst;
            memset(&__dst, 0, sizeof(__dst));
            v167[1] = 0;
            uint64_t v168 = 0;
            v167[0] = 0;
            sub_216182F50(v167, v172, (uint64_t)v173, (v173 - (char *)v172) >> 1);
            __int16 v154 = v18;
            __int16 v169 = v18;
            unint64_t v31 = valuePtr;
            uint64_t v32 = v163;
            __p[0] = valuePtr;
            __p[1] = v163;
            unint64_t v33 = v164;
            uint64_t v171 = v164;
            uint64_t v163 = 0;
            uint64_t v164 = 0;
            uint64_t valuePtr = 0;
            unint64_t v34 = v160;
            if (v160 >= v161)
            {
              unint64_t v36 = v159;
              unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * ((v160 - v159) >> 4);
              unint64_t v38 = v37 + 1;
              if (v37 + 1 > 0x333333333333333) {
                sub_21610CB04();
              }
              if (0x999999999999999ALL * ((v161 - v159) >> 4) > v38) {
                unint64_t v38 = 0x999999999999999ALL * ((v161 - v159) >> 4);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((v161 - v159) >> 4) >= 0x199999999999999) {
                unint64_t v39 = 0x333333333333333;
              }
              else {
                unint64_t v39 = v38;
              }
              if (v39)
              {
                if (v39 > 0x333333333333333) {
                  sub_2160FFA74();
                }
                char v40 = (char *)operator new(80 * v39);
              }
              else
              {
                char v40 = 0;
              }
              int v41 = &v40[80 * v37];
              *(std::string *)int v41 = __s1;
              unint64_t v42 = &v40[80 * v39];
              memset(&__s1, 0, sizeof(__s1));
              *(_OWORD *)(v41 + 24) = *(_OWORD *)v167;
              *((void *)v41 + 5) = v168;
              v167[1] = 0;
              uint64_t v168 = 0;
              v167[0] = 0;
              *((_WORD *)v41 + 24) = v154;
              *((void *)v41 + 7) = v31;
              *((void *)v41 + 8) = v32;
              *((void *)v41 + 9) = v33;
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v43 = v41 + 80;
              uint64_t v171 = 0;
              if (v34 == v36)
              {
                __int16 v159 = &v40[80 * v37];
                __int16 v160 = v41 + 80;
                uint64_t v161 = &v40[80 * v39];
                int v4 = v153;
              }
              else
              {
                uint64_t v44 = 0;
                int v4 = v153;
                do
                {
                  uint64_t v45 = &v41[v44];
                  unint64_t v46 = &v34[v44];
                  long long v47 = *(_OWORD *)&v34[v44 - 80];
                  *((void *)v45 - 8) = *(void *)&v34[v44 - 64];
                  *((_OWORD *)v45 - 5) = v47;
                  *((void *)v46 - 9) = 0;
                  *((void *)v46 - 8) = 0;
                  *((void *)v46 - 1sub_216195244(&a9, 0) = 0;
                  *((void *)v45 - 7) = 0;
                  *((void *)v45 - 6) = 0;
                  *((void *)v45 - 5) = 0;
                  *(_OWORD *)(v45 - 56) = *(_OWORD *)&v34[v44 - 56];
                  *((void *)v45 - 5) = *(void *)&v34[v44 - 40];
                  *((void *)v46 - 6) = 0;
                  *((void *)v46 - 5) = 0;
                  *((void *)v46 - 7) = 0;
                  *((_WORD *)v45 - 16) = *(_WORD *)&v34[v44 - 32];
                  *((void *)v45 - 2) = 0;
                  *((void *)v45 - 1) = 0;
                  *((void *)v45 - 3) = 0;
                  *(_OWORD *)(v45 - 24) = *(_OWORD *)&v34[v44 - 24];
                  *((void *)v45 - 1) = *(void *)&v34[v44 - 8];
                  *((void *)v46 - 3) = 0;
                  *((void *)v46 - 2) = 0;
                  *((void *)v46 - 1) = 0;
                  v44 -= 80;
                }
                while (&v34[v44] != v36);
                unint64_t v34 = v159;
                uint64_t v48 = (uint64_t)v160;
                __int16 v159 = &v41[v44];
                __int16 v160 = v41 + 80;
                uint64_t v161 = v42;
                while ((char *)v48 != v34)
                {
                  v48 -= 80;
                  sub_21635288C(v48);
                }
              }
              if (v34) {
                operator delete(v34);
              }
              __int16 v160 = v43;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v35 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
              *((void *)v160 + 2) = *((void *)&__s1.__r_.__value_.__l + 2);
              *((void *)v34 + 3) = 0;
              *(_OWORD *)unint64_t v34 = v35;
              memset(&__s1, 0, sizeof(__s1));
              *((void *)v34 + 4) = 0;
              *((void *)v34 + 5) = 0;
              *(_OWORD *)(v34 + 24) = *(_OWORD *)v167;
              *((void *)v34 + 5) = v168;
              v167[0] = 0;
              v167[1] = 0;
              uint64_t v168 = 0;
              *((_WORD *)v34 + 24) = v169;
              *((void *)v34 + 7) = 0;
              *((void *)v34 + 8) = 0;
              *((void *)v34 + 9) = 0;
              *(_OWORD *)(v34 + 56) = *(_OWORD *)__p;
              *((void *)v34 + 9) = v171;
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v171 = 0;
              __int16 v160 = v34 + 80;
            }
            if (v167[0])
            {
              v167[1] = v167[0];
              operator delete(v167[0]);
            }
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            if (valuePtr)
            {
              uint64_t v163 = (char *)valuePtr;
              operator delete(valuePtr);
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (v172)
            {
              unint64_t v173 = (char *)v172;
              operator delete(v172);
            }
            if (v175)
            {
              unint64_t v176 = v175;
              operator delete(v175);
            }
          }
        }
      }
    }
LABEL_84:
    CFIndex v5 = v7 + 1;
  }
  uint64_t v49 = (long long *)v159;
  unint64_t v50 = (long long *)v160;
  if (v159 != v160)
  {
    v175 = (UniChar *)sub_216352948;
    if (v160 - v159 < 1)
    {
LABEL_90:
      unint64_t v55 = 0;
      unint64_t v52 = 0;
    }
    else
    {
      unint64_t v51 = (const std::nothrow_t *)MEMORY[0x263F8C180];
      unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((v160 - v159) >> 4);
      while (1)
      {
        unint64_t v53 = operator new(80 * v52, v51);
        if (v53) {
          break;
        }
        BOOL v54 = v52 > 1;
        v52 >>= 1;
        if (!v54) {
          goto LABEL_90;
        }
      }
      unint64_t v55 = v53;
    }
    sub_216352964(v49, v50, (uint64_t (**)(long long *, long long *))&v175, 0xCCCCCCCCCCCCCCCDLL * (v50 - v49), (uint64_t)v55, v52);
    if (v55) {
      operator delete(v55);
    }
    std::mutex::lock((std::mutex *)(a1 + 104));
    unint64_t v57 = (void *)(a1 + 56);
    __int16 v56 = *(_WORD **)(a1 + 56);
    *(void *)(a1 + 64) = v56;
    uint64_t v59 = a1 + 72;
    unint64_t v58 = *(void *)(a1 + 72);
    if ((unint64_t)v56 >= v58)
    {
      unint64_t v61 = v58 - (void)v56;
      if (v61 <= 1) {
        uint64_t v62 = 1;
      }
      else {
        uint64_t v62 = v61;
      }
      if (v61 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v63 = v62;
      }
      unint64_t v64 = sub_21610FD44(a1 + 72, v63);
      float v65 = *(char **)(a1 + 56);
      uint64_t v66 = *(char **)(a1 + 64);
      uint64_t v68 = &v64[v67];
      _WORD *v64 = 0;
      uint64_t v60 = v64 + 1;
      while (v66 != v65)
      {
        __int16 v69 = *((_WORD *)v66 - 1);
        v66 -= 2;
        *--unint64_t v64 = v69;
      }
      *(void *)(a1 + 56) = v64;
      *(void *)(a1 + 64) = v60;
      *(void *)(a1 + 72) = v68;
      if (v65) {
        operator delete(v65);
      }
    }
    else
    {
      *__int16 v56 = 0;
      uint64_t v60 = v56 + 1;
    }
    *(void *)(a1 + 64) = v60;
    memset(&__s1, 0, sizeof(__s1));
    v175 = 0;
    unint64_t v176 = 0;
    unint64_t v177 = 0;
    unint64_t v172 = 0;
    unint64_t v173 = 0;
    unint64_t v174 = 0;
    unint64_t v70 = v159;
    if (v160 == v159) {
LABEL_230:
    }
      operator new();
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    unsigned int v73 = 1;
    while (2)
    {
      uint64_t v74 = (unsigned __int8 **)&v70[80 * v72];
      if (!v72) {
        goto LABEL_126;
      }
      uint64_t v75 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      unint64_t v77 = (unsigned __int8 *)*((unsigned __int8 *)v74 + 23);
      int v78 = (char)v77;
      if ((char)v77 < 0) {
        unint64_t v77 = v74[1];
      }
      if ((unsigned __int8 *)size == v77)
      {
        if (v78 >= 0) {
          unint64_t v79 = &v70[80 * v72];
        }
        else {
          unint64_t v79 = (char *)*v74;
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(__s1.__r_.__value_.__l.__data_, v79, __s1.__r_.__value_.__l.__size_)) {
            goto LABEL_126;
          }
        }
        else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
        {
          p_s1 = &__s1;
          while (p_s1->__r_.__value_.__s.__data_[0] == *v79)
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            ++v79;
            if (!--v75) {
              goto LABEL_130;
            }
          }
          goto LABEL_126;
        }
LABEL_130:
        ++*(_WORD *)(*v57 + 2 * v71);
      }
      else
      {
LABEL_126:
        uint64_t v81 = v176;
        if ((unint64_t)v176 >= v177)
        {
          uint64_t v83 = (UniChar *)sub_2161BAB5C((uint64_t *)&v175, (long long *)&v70[80 * v72]);
        }
        else
        {
          if (*((char *)v74 + 23) < 0)
          {
            sub_21610A674(v176, *v74, (unint64_t)v74[1]);
          }
          else
          {
            long long v82 = *(_OWORD *)v74;
            *((void *)v176 + 2) = v74[2];
            *(_OWORD *)uint64_t v81 = v82;
          }
          uint64_t v83 = v81 + 12;
        }
        unint64_t v176 = v83;
        unint64_t v84 = (UniChar *)v173;
        if ((unint64_t)v173 >= v174)
        {
          unint64_t v86 = v172;
          uint64_t v87 = (v173 - (char *)v172) >> 2;
          unint64_t v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62) {
            sub_21610CB04();
          }
          uint64_t v89 = v174 - (void)v172;
          if ((uint64_t)(v174 - (void)v172) >> 1 > v88) {
            unint64_t v88 = v89 >> 1;
          }
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v90 = v88;
          }
          if (v90)
          {
            BOOL v91 = (char *)sub_2161129B4((uint64_t)&v174, v90);
            unint64_t v86 = v172;
            unint64_t v84 = (UniChar *)v173;
          }
          else
          {
            BOOL v91 = 0;
          }
          __int16 v92 = (unsigned int *)&v91[4 * v87];
          *__int16 v92 = v73;
          uint64_t v85 = (char *)(v92 + 1);
          while (v84 != v86)
          {
            unsigned int v93 = *((_DWORD *)v84 - 1);
            v84 -= 2;
            *--__int16 v92 = v93;
          }
          unint64_t v172 = (UniChar *)v92;
          unint64_t v173 = v85;
          unint64_t v174 = (unint64_t)&v91[4 * v90];
          if (v86) {
            operator delete(v86);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v173 = v73;
          uint64_t v85 = (char *)(v84 + 2);
        }
        unint64_t v173 = v85;
        uint64_t v95 = *(_WORD **)(a1 + 64);
        unint64_t v94 = *(void *)(a1 + 72);
        if ((unint64_t)v95 >= v94)
        {
          uint64_t v97 = (_WORD *)*v57;
          uint64_t v98 = (uint64_t)v95 - *v57;
          if (v98 <= -3) {
            sub_21610CB04();
          }
          uint64_t v99 = v98 >> 1;
          unint64_t v100 = v94 - (void)v97;
          if (v100 <= (v98 >> 1) + 1) {
            unint64_t v101 = v99 + 1;
          }
          else {
            unint64_t v101 = v100;
          }
          if (v100 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v102 = v101;
          }
          if (v102)
          {
            uint64_t v103 = (char *)sub_21610FD44(v59, v102);
            uint64_t v97 = *(_WORD **)(a1 + 56);
            uint64_t v95 = *(_WORD **)(a1 + 64);
          }
          else
          {
            uint64_t v103 = 0;
          }
          uint64_t v104 = &v103[2 * v99];
          *(_WORD *)uint64_t v104 = 1;
          long long v96 = v104 + 2;
          while (v95 != v97)
          {
            __int16 v105 = *--v95;
            *((_WORD *)v104 - 1) = v105;
            v104 -= 2;
          }
          *(void *)(a1 + 56) = v104;
          *(void *)(a1 + 64) = v96;
          *(void *)(a1 + 72) = &v103[2 * v102];
          if (v97) {
            operator delete(v97);
          }
        }
        else
        {
          *uint64_t v95 = 1;
          long long v96 = v95 + 1;
        }
        *(void *)(a1 + 64) = v96;
        uint64_t v71 = v73++;
        unint64_t v70 = v159;
      }
      memset(&__dst, 0, sizeof(__dst));
      uint64_t valuePtr = 0;
      uint64_t v163 = 0;
      uint64_t v164 = 0;
      char v156 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      unint64_t v106 = &v70[80 * v72];
      if (v106[23] < 0) {
        uint64_t v107 = *((void *)v106 + 1);
      }
      else {
        LODWORD(v107) = v106[23];
      }
      uint64_t v108 = (char *)operator new(2uLL);
      *(_WORD *)uint64_t v108 = (v107 >> 1) + 48;
      uint64_t v163 = v108 + 2;
      uint64_t v164 = v108 + 2;
      int v109 = *(_DWORD *)(a1 + 24);
      uint64_t valuePtr = (void **)v108;
      sub_21634ECA8(&__dst, (uint64_t *)v74 + 3, (uint64_t *)&valuePtr, (uint64_t *)&v156, v109);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 17)
      {
        unint64_t v110 = &v159[80 * v72 + 48];
        std::string::size_type v111 = __dst.__r_.__value_.__r.__words[2];
        std::string::size_type v112 = __dst.__r_.__value_.__l.__size_;
        if (__dst.__r_.__value_.__l.__size_ >= __dst.__r_.__value_.__r.__words[2])
        {
          uint64_t v114 = (void *)__dst.__r_.__value_.__r.__words[0];
          int64_t v115 = __dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) <= -3) {
            sub_21610CB04();
          }
          uint64_t v116 = v115 >> 1;
          if (__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0] <= (v115 >> 1) + 1) {
            std::string::size_type v117 = v116 + 1;
          }
          else {
            std::string::size_type v117 = __dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0];
          }
          if (__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v118 = v117;
          }
          if (v118)
          {
            unint64_t v119 = (char *)sub_21610FD44((uint64_t)&__dst.__r_.__value_.__r.__words[2], v118);
            std::string::size_type v112 = __dst.__r_.__value_.__l.__size_;
            uint64_t v114 = (void *)__dst.__r_.__value_.__r.__words[0];
          }
          else
          {
            unint64_t v119 = 0;
          }
          uint64_t v120 = &v119[2 * v116];
          *(_WORD *)uint64_t v120 = *(_WORD *)v110;
          __int16 v113 = v120 + 2;
          while ((void *)v112 != v114)
          {
            __int16 v121 = *(_WORD *)(v112 - 2);
            v112 -= 2;
            *((_WORD *)v120 - 1) = v121;
            v120 -= 2;
          }
          std::string::size_type v111 = (std::string::size_type)&v119[2 * v118];
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v113;
          __dst.__r_.__value_.__r.__words[2] = v111;
          if (v114)
          {
            operator delete(v114);
            std::string::size_type v111 = __dst.__r_.__value_.__r.__words[2];
          }
        }
        else
        {
          *(_WORD *)__dst.__r_.__value_.__l.__size_ = *(_WORD *)v110;
          __int16 v113 = (_WORD *)(v112 + 2);
        }
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v113;
        uint64_t v122 = &v159[80 * v72];
        uint64_t v123 = *((void *)v122 + 7);
        uint64_t v124 = *((void *)v122 + 8);
        unint64_t v125 = (char **)(v122 + 56);
        unint64_t v126 = v124 - v123;
        if ((unint64_t)v113 >= v111)
        {
          __int16 v128 = (_WORD *)__dst.__r_.__value_.__r.__words[0];
          uint64_t v129 = (uint64_t)v113 - __dst.__r_.__value_.__r.__words[0];
          if ((uint64_t)((uint64_t)v113 - __dst.__r_.__value_.__r.__words[0]) <= -3) {
            sub_21610CB04();
          }
          uint64_t v130 = v71;
          uint64_t v131 = v59;
          uint64_t v132 = v129 >> 1;
          unint64_t v133 = v111 - __dst.__r_.__value_.__r.__words[0];
          if (v133 <= (v129 >> 1) + 1) {
            unint64_t v134 = v132 + 1;
          }
          else {
            unint64_t v134 = v133;
          }
          if (v133 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v135 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v135 = v134;
          }
          if (v135)
          {
            uint64_t v136 = (char *)sub_21610FD44((uint64_t)&__dst.__r_.__value_.__r.__words[2], v135);
            __int16 v113 = (_WORD *)__dst.__r_.__value_.__l.__size_;
            __int16 v128 = (_WORD *)__dst.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v136 = 0;
          }
          uint64_t v137 = &v136[2 * v132];
          *(_WORD *)uint64_t v137 = v126 >> 3;
          std::string::size_type v127 = (std::string::size_type)(v137 + 2);
          uint64_t v59 = v131;
          while (v113 != v128)
          {
            __int16 v138 = *--v113;
            *((_WORD *)v137 - 1) = v138;
            v137 -= 2;
          }
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
          __dst.__r_.__value_.__l.__size_ = v127;
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v136[2 * v135];
          uint64_t v71 = v130;
          if (v128) {
            operator delete(v128);
          }
        }
        else
        {
          *__int16 v113 = v126 >> 3;
          std::string::size_type v127 = (std::string::size_type)(v113 + 1);
        }
        __dst.__r_.__value_.__l.__size_ = v127;
        sub_216185BD8((uint64_t)&__dst, v127, *v125, v125[1], (v125[1] - *v125) >> 1);
      }
      std::string::size_type v139 = __dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0];
      uint64_t v141 = *(_WORD **)(a1 + 64);
      unint64_t v140 = *(void *)(a1 + 72);
      if ((unint64_t)v141 >= v140)
      {
        uint64_t v143 = (_WORD *)*v57;
        uint64_t v144 = (uint64_t)v141 - *v57;
        if (v144 <= -3) {
          sub_21610CB04();
        }
        uint64_t v145 = v144 >> 1;
        unint64_t v146 = v140 - (void)v143;
        if (v146 <= (v144 >> 1) + 1) {
          unint64_t v147 = v145 + 1;
        }
        else {
          unint64_t v147 = v146;
        }
        if (v146 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v148 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v148 = v147;
        }
        if (v148)
        {
          uint64_t v149 = (char *)sub_21610FD44(v59, v148);
          uint64_t v143 = *(_WORD **)(a1 + 56);
          uint64_t v141 = *(_WORD **)(a1 + 64);
        }
        else
        {
          uint64_t v149 = 0;
        }
        uint64_t v150 = &v149[2 * v145];
        *(_WORD *)uint64_t v150 = v139 >> 1;
        uint64_t v142 = (uint64_t)(v150 + 2);
        while (v141 != v143)
        {
          __int16 v151 = *--v141;
          *((_WORD *)v150 - 1) = v151;
          v150 -= 2;
        }
        *(void *)(a1 + 56) = v150;
        *(void *)(a1 + 64) = v142;
        *(void *)(a1 + 72) = &v149[2 * v148];
        if (v143) {
          operator delete(v143);
        }
      }
      else
      {
        *uint64_t v141 = v139 >> 1;
        uint64_t v142 = (uint64_t)(v141 + 1);
      }
      *(void *)(a1 + 64) = v142;
      sub_216263328(a1 + 56, v142, __dst.__r_.__value_.__l.__data_, (char *)__dst.__r_.__value_.__l.__size_, (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 1);
      long long v152 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      std::string::operator=(&__s1, (const std::string *)&v159[80 * v72]);
      if (v156)
      {
        uint64_t v157 = v156;
        operator delete(v156);
      }
      if (valuePtr)
      {
        uint64_t v163 = (char *)valuePtr;
        operator delete(valuePtr);
      }
      if (__dst.__r_.__value_.__r.__words[0])
      {
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v73 += ((*((void *)&v152 + 1) - (void)v152) >> 1) + 1;
      ++v72;
      unint64_t v70 = v159;
      if (v72 >= 0xCCCCCCCCCCCCCCCDLL * ((v160 - v159) >> 4)) {
        goto LABEL_230;
      }
      continue;
    }
  }
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
  sub_216352808((void ***)&__s1);
}

void sub_2163524B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::string __p = &a18;
  sub_216352808((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_21635265C(uint64_t a1)
{
  unint64_t v6 = (std::mutex *)(a1 + 104);
  char v7 = 0;
  if ((sub_2162B3998((uint64_t)&v6) & 1) != 0 && (uint64_t v2 = *(void *)(a1 + 96)) != 0)
  {
    uint64_t v3 = *(void ****)(a1 + 16);
    if (v3)
    {
      if (*v3) {
        sub_21628D4F4(*v3);
      }
      MEMORY[0x2166CA800](v3, 0x80C40B8603338);
      uint64_t v2 = *(void *)(a1 + 96);
    }
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 16) = v2;
    sub_2161254AC(a1 + 32, (__n128 *)(a1 + 56));
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v7) {
    std::mutex::unlock(v6);
  }
  return v4;
}

void sub_216352708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_21635272C(uint64_t a1)
{
  sub_216351428(a1);

  JUMPOUT(0x2166CA800);
}

void sub_216352768(uint64_t a1)
{
  sub_216351428(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_2163527A0()
{
  return 1;
}

uint64_t sub_2163527A8()
{
  return 0;
}

uint64_t sub_2163527B4()
{
  return 10;
}

uint64_t sub_2163527BC()
{
  return 11;
}

void sub_2163527C8(uint64_t a1)
{
  sub_216351428(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216352800()
{
  return 17;
}

void sub_216352808(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    CFIndex v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_21635288C(v4);
      }
      while ((void *)v4 != v2);
      CFIndex v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21635288C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t sub_2163528F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216352948(void *a1, void **a2)
{
  return (sub_216179024(a1, a2) >> 7) & 1;
}

void sub_216352964(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *), unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    CFStringRef v8 = (__n128 *)a1;
    if (a4 == 2)
    {
      if ((*a3)(a2 - 5, a1))
      {
        sub_216353A18(v8, (__n128 *)a2 - 5);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        char v15 = a1 + 5;
        if (a1 + 5 != a2)
        {
          uint64_t v16 = 0;
          BOOL v17 = a1;
          do
          {
            __int16 v18 = v15;
            if ((*a3)(v15, v17))
            {
              long long v19 = *v18;
              uint64_t v32 = *((void *)v18 + 2);
              *(_OWORD *)unint64_t v31 = v19;
              *((void *)v18 + 1) = 0;
              *((void *)v18 + 2) = 0;
              *(void *)__int16 v18 = 0;
              *(_OWORD *)unint64_t v33 = *(long long *)((char *)v17 + 104);
              uint64_t v34 = *((void *)v17 + 15);
              *((void *)v17 + 14) = 0;
              *((void *)v17 + 15) = 0;
              *((void *)v17 + 13) = 0;
              __int16 v35 = *((_WORD *)v17 + 64);
              *(_OWORD *)std::string __p = *(long long *)((char *)v17 + 136);
              uint64_t v37 = *((void *)v17 + 19);
              *((void *)v17 + 17) = 0;
              *((void *)v17 + 18) = 0;
              uint64_t v20 = v16;
              *((void *)v17 + 19) = 0;
              while (1)
              {
                __n128 v21 = sub_216353AB4((uint64_t)&v8[5] + v20, (long long *)((char *)v8 + v20));
                if (!v20) {
                  break;
                }
                char v22 = ((uint64_t (*)(void **, uint64_t, __n128))*a3)(v31, (uint64_t)&v8[-5] + v20, v21);
                v20 -= 80;
                if ((v22 & 1) == 0)
                {
                  uint64_t v23 = (uint64_t)&v8[5] + v20;
                  goto LABEL_21;
                }
              }
              uint64_t v23 = (uint64_t)v8;
LABEL_21:
              sub_216353AB4(v23, (long long *)v31);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (v33[0])
              {
                v33[1] = v33[0];
                operator delete(v33[0]);
              }
              if (SHIBYTE(v32) < 0) {
                operator delete(v31[0]);
              }
            }
            char v15 = v18 + 5;
            v16 += 80;
            BOOL v17 = v18;
          }
          while (v18 + 5 != a2);
        }
      }
    }
    else
    {
      uint64_t v12 = a4 >> 1;
      unint64_t v13 = (__n128 *)&a1[5 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        sub_216352CFC(a1, &a1[5 * (a4 >> 1)], a3, a4 >> 1, a5);
        uint64_t v24 = a5 + 80 * v12;
        __n128 v25 = sub_216352CFC((long long *)&v8[5 * (a4 >> 1)], a2, a3, a4 - v12, v24);
        v31[0] = (void *)a4;
        uint64_t v26 = (long long *)(a5 + 80 * a4);
        unint64_t v27 = (long long *)v24;
        uint64_t v28 = (long long *)a5;
        while (v27 != v26)
        {
          if (((unsigned int (*)(long long *, long long *, __n128))*a3)(v27, v28, v25))
          {
            __n128 v25 = sub_216353AB4((uint64_t)v8, v27);
            v27 += 5;
          }
          else
          {
            __n128 v25 = sub_216353AB4((uint64_t)v8, v28);
            v28 += 5;
          }
          v8 += 5;
          if (v28 == (long long *)v24)
          {
            if (v27 != v26)
            {
              uint64_t v29 = 0;
              do
              {
                sub_216353AB4((uint64_t)&v8[v29], &v27[v29]);
                v29 += 5;
              }
              while (&v27[v29] != v26);
            }
            goto LABEL_42;
          }
        }
        if (v28 != (long long *)v24)
        {
          uint64_t v30 = 0;
          do
          {
            sub_216353AB4((uint64_t)&v8[v30], &v28[v30]);
            v30 += 5;
          }
          while (&v28[v30] != (long long *)v24);
        }
LABEL_42:
        if (a5) {
          sub_216353B50((unint64_t *)v31, a5);
        }
      }
      else
      {
        sub_216352964(a1, &a1[5 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v14 = a4 - v12;
        sub_216352964(v13, a2, a3, v14, a5, a6);
        sub_216353414(v8, v13, (__n128 *)a2, (uint64_t (**)(__n128 *, __n128 *))a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_216352CCC(_Unwind_Exception *exception_object, ...)
{
  va_start(va, exception_object);
  if (v1) {
    sub_216353B50((unint64_t *)va, v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216352CFC(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *), unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    CFNumberRef v9 = a1;
    if (a4 == 2)
    {
      uint64_t v12 = a2 - 5;
      int v13 = (*a3)(a2 - 5, a1);
      uint64_t v14 = (void *)(a5 + 24);
      char v15 = (void *)(a5 + 56);
      if (v13)
      {
        long long v16 = *v12;
        *(void *)(a5 + 16) = *((void *)a2 - 8);
        *(_OWORD *)a5 = v16;
        *((void *)a2 - 9) = 0;
        *((void *)a2 - 8) = 0;
        *(void *)uint64_t v12 = 0;
        void *v14 = 0;
        *(void *)(a5 + 32) = 0;
        *(void *)(a5 + 4sub_216195244(&a9, 0) = 0;
        *(_OWORD *)(a5 + 24) = *(long long *)((char *)a2 - 56);
        *(void *)(a5 + 4sub_216195244(&a9, 0) = *((void *)a2 - 5);
        *((void *)a2 - 6) = 0;
        *((void *)a2 - 5) = 0;
        *((void *)a2 - 7) = 0;
        *(_WORD *)(a5 + 48) = *((_WORD *)a2 - 16);
        *(void *)(a5 + 64) = 0;
        *(void *)(a5 + 72) = 0;
        void *v15 = 0;
        *(_OWORD *)(a5 + 56) = *(long long *)((char *)a2 - 24);
        *(void *)(a5 + 72) = *((void *)a2 - 1);
        *((void *)a2 - 3) = 0;
        *((void *)a2 - 2) = 0;
        *((void *)a2 - 1) = 0;
        long long v17 = *v9;
        *(void *)(a5 + 96) = *((void *)v9 + 2);
        *(_OWORD *)(a5 + 8sub_216195244(&a9, 0) = v17;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *(void *)CFNumberRef v9 = 0;
        *(void *)(a5 + 104) = 0;
        *(void *)(a5 + 112) = 0;
        *(void *)(a5 + 12sub_216195244(&a9, 0) = 0;
        __n128 result = *(__n128 *)((char *)v9 + 24);
        *(__n128 *)(a5 + 104) = result;
        *(void *)(a5 + 12sub_216195244(&a9, 0) = *((void *)v9 + 5);
        *((void *)v9 + 4) = 0;
        *((void *)v9 + 5) = 0;
        *((void *)v9 + 3) = 0;
        *(_WORD *)(a5 + 128) = *((_WORD *)v9 + 24);
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(void *)(a5 + 136) = 0;
        uint64_t v19 = *((void *)v9 + 7);
        __int16 v18 = (void *)v9 + 7;
        *(void *)(a5 + 136) = v19;
        uint64_t v20 = v18 + 1;
        __n128 v21 = v18 + 2;
      }
      else
      {
        long long v46 = *v9;
        *(void *)(a5 + 16) = *((void *)v9 + 2);
        *(_OWORD *)a5 = v46;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *(void *)CFNumberRef v9 = 0;
        void *v14 = 0;
        *(void *)(a5 + 32) = 0;
        *(void *)(a5 + 4sub_216195244(&a9, 0) = 0;
        *(_OWORD *)(a5 + 24) = *(long long *)((char *)v9 + 24);
        *(void *)(a5 + 4sub_216195244(&a9, 0) = *((void *)v9 + 5);
        *((void *)v9 + 4) = 0;
        *((void *)v9 + 5) = 0;
        *((void *)v9 + 3) = 0;
        *(_WORD *)(a5 + 48) = *((_WORD *)v9 + 24);
        *(void *)(a5 + 64) = 0;
        *(void *)(a5 + 72) = 0;
        void *v15 = 0;
        *(_OWORD *)(a5 + 56) = *(long long *)((char *)v9 + 56);
        *(void *)(a5 + 72) = *((void *)v9 + 9);
        *((void *)v9 + 7) = 0;
        *((void *)v9 + 8) = 0;
        *((void *)v9 + 9) = 0;
        long long v47 = *v12;
        *(void *)(a5 + 96) = *((void *)a2 - 8);
        *(_OWORD *)(a5 + 8sub_216195244(&a9, 0) = v47;
        *((void *)a2 - 9) = 0;
        *((void *)a2 - 8) = 0;
        *(void *)uint64_t v12 = 0;
        *(void *)(a5 + 104) = 0;
        *(void *)(a5 + 112) = 0;
        *(void *)(a5 + 12sub_216195244(&a9, 0) = 0;
        __n128 result = *(__n128 *)((char *)a2 - 56);
        *(__n128 *)(a5 + 104) = result;
        *(void *)(a5 + 12sub_216195244(&a9, 0) = *((void *)a2 - 5);
        *((void *)a2 - 6) = 0;
        *((void *)a2 - 5) = 0;
        *((void *)a2 - 7) = 0;
        *(_WORD *)(a5 + 128) = *((_WORD *)a2 - 16);
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(void *)(a5 + 136) = 0;
        uint64_t v49 = *((void *)a2 - 3);
        uint64_t v48 = (void *)a2 - 3;
        *(void *)(a5 + 136) = v49;
        uint64_t v20 = v48 + 1;
        __n128 v21 = v48 + 2;
        __int16 v18 = v48;
      }
      *(void *)(a5 + 144) = *v20;
      *(void *)(a5 + 152) = *v21;
      *__int16 v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
    }
    else if (a4 == 1)
    {
      long long v10 = *a1;
      *(void *)(a5 + 16) = *((void *)a1 + 2);
      *(_OWORD *)a5 = v10;
      *((void *)a1 + 1) = 0;
      *((void *)a1 + 2) = 0;
      *(void *)a1 = 0;
      *(void *)(a5 + 24) = 0;
      *(void *)(a5 + 32) = 0;
      *(void *)(a5 + 4sub_216195244(&a9, 0) = 0;
      *(_OWORD *)(a5 + 24) = *(long long *)((char *)a1 + 24);
      *(void *)(a5 + 4sub_216195244(&a9, 0) = *((void *)a1 + 5);
      *((void *)a1 + 4) = 0;
      *((void *)a1 + 5) = 0;
      *((void *)a1 + 3) = 0;
      *(_WORD *)(a5 + 48) = *((_WORD *)a1 + 24);
      *(void *)(a5 + 64) = 0;
      *(void *)(a5 + 72) = 0;
      *(void *)(a5 + 56) = 0;
      __n128 result = *(__n128 *)((char *)a1 + 56);
      *(__n128 *)(a5 + 56) = result;
      *(void *)(a5 + 72) = *((void *)a1 + 9);
      *((void *)a1 + 7) = 0;
      *((void *)a1 + 8) = 0;
      *((void *)a1 + 9) = 0;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v31 = &a1[5 * (a4 >> 1)];
      sub_216352964(a1, v31, a3, a4 >> 1, a5, a4 >> 1);
      sub_216352964(&v9[5 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5 + 80 * (a4 >> 1), a4 - (a4 >> 1));
      uint64_t v32 = 0;
      uint64_t v56 = 0;
      unint64_t v33 = &v9[5 * (a4 >> 1)];
      while (v33 != a2)
      {
        int v34 = (*a3)(v33, v9);
        uint64_t v35 = a5 + v32;
        uint64_t v36 = a5 + v32;
        uint64_t v37 = (void *)(a5 + v32 + 24);
        unint64_t v38 = (__n128 *)(a5 + v32 + 56);
        if (v34)
        {
          long long v39 = *v33;
          *(void *)(v35 + 16) = *((void *)v33 + 2);
          *(_OWORD *)uint64_t v35 = v39;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          *(void *)unint64_t v33 = 0;
          *uint64_t v37 = 0;
          *(void *)(a5 + v32 + 32) = 0;
          *(void *)(a5 + v32 + 4sub_216195244(&a9, 0) = 0;
          *(_OWORD *)(v36 + 24) = *(long long *)((char *)v33 + 24);
          *(void *)(v36 + 4sub_216195244(&a9, 0) = *((void *)v33 + 5);
          *((void *)v33 + 4) = 0;
          *((void *)v33 + 5) = 0;
          *((void *)v33 + 3) = 0;
          *(_WORD *)(v36 + 48) = *((_WORD *)v33 + 24);
          *(void *)(a5 + v32 + 64) = 0;
          *(void *)(a5 + v32 + 72) = 0;
          v38->n128_u64[0] = 0;
          __n128 result = *(__n128 *)((char *)v33 + 56);
          __n128 *v38 = result;
          *(void *)(v36 + 72) = *((void *)v33 + 9);
          *((void *)v33 + 7) = 0;
          *((void *)v33 + 8) = 0;
          *((void *)v33 + 9) = 0;
          v33 += 5;
        }
        else
        {
          long long v40 = *v9;
          *(void *)(v35 + 16) = *((void *)v9 + 2);
          *(_OWORD *)uint64_t v35 = v40;
          *((void *)v9 + 1) = 0;
          *((void *)v9 + 2) = 0;
          *(void *)CFNumberRef v9 = 0;
          *uint64_t v37 = 0;
          *(void *)(a5 + v32 + 32) = 0;
          *(void *)(a5 + v32 + 4sub_216195244(&a9, 0) = 0;
          *(_OWORD *)(v36 + 24) = *(long long *)((char *)v9 + 24);
          *(void *)(v36 + 4sub_216195244(&a9, 0) = *((void *)v9 + 5);
          *((void *)v9 + 4) = 0;
          *((void *)v9 + 5) = 0;
          *((void *)v9 + 3) = 0;
          *(_WORD *)(v36 + 48) = *((_WORD *)v9 + 24);
          *(void *)(a5 + v32 + 64) = 0;
          *(void *)(a5 + v32 + 72) = 0;
          v38->n128_u64[0] = 0;
          __n128 result = *(__n128 *)((char *)v9 + 56);
          __n128 *v38 = result;
          *(void *)(v36 + 72) = *((void *)v9 + 9);
          *((void *)v9 + 7) = 0;
          *((void *)v9 + 8) = 0;
          *((void *)v9 + 9) = 0;
          v9 += 5;
        }
        ++v56;
        v32 += 80;
        if (v9 == v31)
        {
          if (v33 != a2)
          {
            uint64_t v41 = 0;
            do
            {
              unint64_t v42 = &v33[v41];
              uint64_t v43 = a5 + v32 + v41 * 16;
              long long v44 = v33[v41];
              *(void *)(v43 + 16) = *(void *)&v33[v41 + 1];
              *(_OWORD *)uint64_t v43 = v44;
              *((void *)v42 + 1) = 0;
              *((void *)v42 + 2) = 0;
              *(void *)unint64_t v42 = 0;
              uint64_t v45 = a5 + v41 * 16 + v32;
              *(void *)(v45 + 24) = 0;
              *(void *)(v45 + 32) = 0;
              *(void *)(v45 + 4sub_216195244(&a9, 0) = 0;
              *(_OWORD *)(v45 + 24) = *(long long *)((char *)&v33[v41 + 1] + 8);
              *(void *)(v45 + 4sub_216195244(&a9, 0) = *((void *)&v33[v41 + 2] + 1);
              *((void *)v42 + 4) = 0;
              *((void *)v42 + 5) = 0;
              *((void *)v42 + 3) = 0;
              *(_WORD *)(v45 + 48) = v33[v41 + 3];
              *(void *)(v45 + 64) = 0;
              *(void *)(v45 + 72) = 0;
              *(void *)(v45 + 56) = 0;
              __n128 result = *(__n128 *)((char *)&v33[v41 + 3] + 8);
              *(__n128 *)(v45 + 56) = result;
              *(void *)(v43 + 72) = *((void *)&v33[v41 + 4] + 1);
              *((void *)v42 + 7) = 0;
              *((void *)v42 + 8) = 0;
              *((void *)v42 + 9) = 0;
              v41 += 5;
            }
            while (v42 + 5 != a2);
          }
          return result;
        }
      }
      if (v9 != v31)
      {
        uint64_t v50 = 0;
        do
        {
          uint64_t v51 = a5 + v32 + v50 * 16;
          unint64_t v52 = &v9[v50];
          long long v53 = v9[v50];
          *(void *)(v51 + 16) = *(void *)&v9[v50 + 1];
          *(_OWORD *)uint64_t v51 = v53;
          *((void *)v52 + 1) = 0;
          *((void *)v52 + 2) = 0;
          *(void *)unint64_t v52 = 0;
          uint64_t v54 = a5 + v50 * 16 + v32;
          *(void *)(v54 + 24) = 0;
          *(void *)(v54 + 32) = 0;
          *(void *)(v54 + 4sub_216195244(&a9, 0) = 0;
          *(_OWORD *)(v54 + 24) = *(long long *)((char *)&v9[v50 + 1] + 8);
          *(void *)(v54 + 4sub_216195244(&a9, 0) = *((void *)&v9[v50 + 2] + 1);
          *((void *)v52 + 4) = 0;
          *((void *)v52 + 5) = 0;
          *((void *)v52 + 3) = 0;
          *(_WORD *)(v54 + 48) = v9[v50 + 3];
          *(void *)(v54 + 64) = 0;
          *(void *)(v54 + 72) = 0;
          *(void *)(v54 + 56) = 0;
          __n128 result = *(__n128 *)((char *)&v9[v50 + 3] + 8);
          *(__n128 *)(v54 + 56) = result;
          *(void *)(v51 + 72) = *((void *)&v9[v50 + 4] + 1);
          *((void *)v52 + 7) = 0;
          *((void *)v52 + 8) = 0;
          *((void *)v52 + 9) = 0;
          v50 += 5;
        }
        while (v52 + 5 != v31);
      }
    }
    else if (a1 != a2)
    {
      long long v22 = *a1;
      *(void *)(a5 + 16) = *((void *)a1 + 2);
      *(_OWORD *)a5 = v22;
      *((void *)a1 + 1) = 0;
      *((void *)a1 + 2) = 0;
      *(void *)a1 = 0;
      *(void *)(a5 + 24) = 0;
      *(void *)(a5 + 32) = 0;
      *(void *)(a5 + 4sub_216195244(&a9, 0) = 0;
      *(_OWORD *)(a5 + 24) = *(long long *)((char *)a1 + 24);
      *(void *)(a5 + 4sub_216195244(&a9, 0) = *((void *)a1 + 5);
      *((void *)a1 + 4) = 0;
      *((void *)a1 + 5) = 0;
      *((void *)a1 + 3) = 0;
      *(_WORD *)(a5 + 48) = *((_WORD *)a1 + 24);
      *(void *)(a5 + 64) = 0;
      *(void *)(a5 + 72) = 0;
      *(void *)(a5 + 56) = 0;
      __n128 result = *(__n128 *)((char *)a1 + 56);
      *(__n128 *)(a5 + 56) = result;
      *(void *)(a5 + 72) = *((void *)a1 + 9);
      *((void *)a1 + 7) = 0;
      *((void *)a1 + 8) = 0;
      *((void *)a1 + 9) = 0;
      uint64_t v55 = 1;
      uint64_t v23 = a1 + 5;
      if (a1 + 5 != a2)
      {
        uint64_t v24 = 0;
        uint64_t v25 = a5;
        do
        {
          uint64_t v26 = v23;
          unint64_t v27 = (long long *)(v25 + 80);
          if ((*a3)(v23, (long long *)v25))
          {
            *unint64_t v27 = *(_OWORD *)v25;
            *(void *)(v25 + 96) = *(void *)(v25 + 16);
            *(void *)uint64_t v25 = 0;
            *(void *)(v25 + 8) = 0;
            *(_OWORD *)(v25 + 104) = *(_OWORD *)(v25 + 24);
            *(void *)(v25 + 12sub_216195244(&a9, 0) = *(void *)(v25 + 40);
            *(void *)(v25 + 16) = 0;
            *(void *)(v25 + 24) = 0;
            *(void *)(v25 + 32) = 0;
            *(void *)(v25 + 4sub_216195244(&a9, 0) = 0;
            *(_WORD *)(v25 + 128) = *(_WORD *)(v25 + 48);
            *(_OWORD *)(v25 + 136) = *(_OWORD *)(v25 + 56);
            *(void *)(v25 + 152) = *(void *)(v25 + 72);
            *(void *)(v25 + 56) = 0;
            *(void *)(v25 + 64) = 0;
            ++v55;
            uint64_t v28 = a5;
            *(void *)(v25 + 72) = 0;
            if (v25 != a5)
            {
              uint64_t v29 = v24;
              while ((*a3)(v26, (long long *)(a5 + v29 - 80)))
              {
                sub_216353AB4(a5 + v29, (long long *)(a5 + v29 - 80));
                v29 -= 80;
                if (!v29)
                {
                  uint64_t v28 = a5;
                  goto LABEL_19;
                }
              }
              uint64_t v28 = a5 + v29;
            }
LABEL_19:
            __n128 result = sub_216353AB4(v28, v26);
          }
          else
          {
            long long v30 = *v26;
            *(void *)(v25 + 96) = *((void *)v26 + 2);
            *unint64_t v27 = v30;
            *((void *)v26 + 1) = 0;
            *((void *)v26 + 2) = 0;
            *(void *)uint64_t v26 = 0;
            *(void *)(v25 + 104) = 0;
            *(void *)(v25 + 112) = 0;
            *(void *)(v25 + 12sub_216195244(&a9, 0) = 0;
            *(_OWORD *)(v25 + 104) = *(long long *)((char *)v9 + 104);
            *(void *)(v25 + 12sub_216195244(&a9, 0) = *((void *)v9 + 15);
            *((void *)v9 + 14) = 0;
            *((void *)v9 + 15) = 0;
            *((void *)v9 + 13) = 0;
            *(_WORD *)(v25 + 128) = *((_WORD *)v9 + 64);
            *(void *)(v25 + 144) = 0;
            *(void *)(v25 + 152) = 0;
            *(void *)(v25 + 136) = 0;
            __n128 result = *(__n128 *)((char *)v9 + 136);
            *(__n128 *)(v25 + 136) = result;
            *(void *)(v25 + 152) = *((void *)v9 + 19);
            *((void *)v9 + 17) = 0;
            *((void *)v9 + 18) = 0;
            *((void *)v9 + 19) = 0;
            ++v55;
          }
          uint64_t v23 = v26 + 5;
          v24 += 80;
          v25 += 80;
          CFNumberRef v9 = v26;
        }
        while (v26 + 5 != a2);
      }
    }
  }
  return result;
}

void sub_2163533EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    sub_216353B50(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216353414(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t (**a4)(__n128 *, __n128 *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v68 = a6;
  if (!a6) {
    return;
  }
  while (a5 > a8 && v68 > a8)
  {
    if (!a5) {
      return;
    }
    uint64_t v14 = 0;
    uint64_t v15 = -a5;
    while (1)
    {
      long long v16 = (__n128 *)((char *)v14 + (void)a1);
      if ((*a4)(a2, (__n128 *)((char *)v14 + (void)a1))) {
        break;
      }
      v14 += 5;
      if (__CFADD__(v15++, 1)) {
        return;
      }
    }
    uint64_t v19 = -v15;
    uint64_t v20 = v68;
    unint64_t v64 = a3;
    uint64_t v65 = a7;
    uint64_t v66 = a4;
    if (-v15 >= v68)
    {
      if (v15 == -1)
      {
        sub_216353A18((__n128 *)((char *)v14 + (void)a1), a2);
        return;
      }
      if (v15 > 0) {
        uint64_t v19 = 1 - v15;
      }
      uint64_t v26 = v19 >> 1;
      uint64_t v24 = (__n128 *)((char *)&a1[5 * (v19 >> 1)] + (void)v14);
      uint64_t v23 = a2;
      if (a2 != a3)
      {
        uint64_t v60 = v19 >> 1;
        unint64_t v27 = *v66;
        unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * (a3 - a2);
        uint64_t v23 = a2;
        do
        {
          uint64_t v29 = &v23[5 * (v28 >> 1)];
          int v30 = v27(v29, v24);
          if (v30) {
            v28 += ~(v28 >> 1);
          }
          else {
            v28 >>= 1;
          }
          if (v30) {
            uint64_t v23 = v29 + 5;
          }
        }
        while (v28);
        uint64_t v26 = v60;
        uint64_t v20 = v68;
      }
      uint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v23 - a2);
    }
    else
    {
      if (v68 >= 0) {
        uint64_t v21 = v68;
      }
      else {
        uint64_t v21 = v68 + 1;
      }
      uint64_t v22 = v21 >> 1;
      uint64_t v23 = &a2[5 * (v21 >> 1)];
      uint64_t v24 = a2;
      if ((__n128 *)((char *)a2 - (char *)a1) != v14)
      {
        uint64_t v62 = v21 >> 1;
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1 - (uint64_t)v14) >> 4);
        uint64_t v24 = (__n128 *)((char *)v14 + (void)a1);
        do
        {
          if ((*v66)(v23, &v24[5 * (v25 >> 1)]))
          {
            v25 >>= 1;
          }
          else
          {
            v24 += 5 * (v25 >> 1) + 5;
            v25 += ~(v25 >> 1);
          }
        }
        while (v25);
        uint64_t v20 = v68;
        uint64_t v22 = v62;
      }
      uint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (char *)a1 - (uint64_t)v14) >> 4);
    }
    if (v24 == a2)
    {
      a3 = v23;
    }
    else if (v23 == a2)
    {
      a3 = v24;
    }
    else
    {
      uint64_t v61 = v26;
      uint64_t v63 = v22;
      __n128 v17 = sub_216353A18(v24, a2);
      a3 = v24 + 5;
      for (CFIndex i = a2 + 5; i != v23; i += 5)
      {
        if (a3 == a2) {
          a2 = i;
        }
        __n128 v17 = sub_216353A18(a3, i);
        a3 += 5;
      }
      if (a3 != a2)
      {
        uint64_t v32 = a3;
        unint64_t v33 = a2;
        do
        {
          while (1)
          {
            __n128 v17 = sub_216353A18(v32, v33);
            v32 += 5;
            v33 += 5;
            if (v33 == v23) {
              break;
            }
            if (v32 == a2) {
              a2 = v33;
            }
          }
          unint64_t v33 = a2;
        }
        while (v32 != a2);
      }
      uint64_t v20 = v68;
      uint64_t v26 = v61;
      uint64_t v22 = v63;
    }
    a5 = -(v26 + v15);
    uint64_t v34 = v20 - v22;
    if (v26 + v22 >= v20 - (v26 + v22) - v15)
    {
      uint64_t v36 = v23;
      a7 = v65;
      uint64_t v37 = v26;
      uint64_t v38 = v22;
      sub_216353414(a3, v36, v64, v66, -(v26 + v15), v20 - v22, v65, a8, v17);
      a2 = v24;
      a4 = v66;
      uint64_t v34 = v38;
      a5 = v37;
    }
    else
    {
      uint64_t v35 = v24;
      a4 = v66;
      sub_216353414((char *)v14 + (void)a1, v35, a3, v66, v26, v22, v65, a8, v17);
      long long v16 = a3;
      a2 = v23;
      a7 = v65;
      a3 = v64;
    }
    uint64_t v68 = v34;
    a1 = v16;
    if (!v34) {
      return;
    }
  }
  if (a5 <= v68)
  {
    if (a1 != a2)
    {
      uint64_t v48 = 0;
      unint64_t v49 = 0;
      do
      {
        uint64_t v50 = a7 + v48 * 16;
        uint64_t v51 = &a1[v48];
        __n128 v52 = a1[v48];
        *(void *)(v50 + 16) = a1[v48 + 1].n128_u64[0];
        *(__n128 *)uint64_t v50 = v52;
        v51->n128_u64[1] = 0;
        v51[1].n128_u64[0] = 0;
        v51->n128_u64[0] = 0;
        *(void *)(v50 + 24) = 0;
        *(void *)(v50 + 32) = 0;
        *(void *)(v50 + 4sub_216195244(&a9, 0) = 0;
        *(__n128 *)(v50 + 24) = *(__n128 *)((char *)&a1[v48 + 1] + 8);
        *(void *)(v50 + 4sub_216195244(&a9, 0) = a1[v48 + 2].n128_u64[1];
        v51[2].n128_u64[0] = 0;
        v51[2].n128_u64[1] = 0;
        v51[1].n128_u64[1] = 0;
        *(_WORD *)(v50 + 48) = a1[v48 + 3].n128_u16[0];
        *(void *)(v50 + 64) = 0;
        *(void *)(v50 + 72) = 0;
        *(void *)(v50 + 56) = 0;
        *(__n128 *)(v50 + 56) = *(__n128 *)((char *)&a1[v48 + 3] + 8);
        *(void *)(v50 + 72) = a1[v48 + 4].n128_u64[1];
        v51[3].n128_u64[1] = 0;
        v51[4].n128_u64[0] = 0;
        v51[4].n128_u64[1] = 0;
        ++v49;
        v48 += 5;
      }
      while (&v51[5] != a2);
      unint64_t v69 = v49;
      if (v48 * 16)
      {
        uint64_t v53 = (uint64_t)a1;
        uint64_t v54 = (long long *)a7;
        uint64_t v55 = (long long *)(a7 + v48 * 16);
        uint64_t v56 = a7 + v48 * 16 - 80;
        while (a2 != a3)
        {
          if ((*a4)(a2, (__n128 *)v54))
          {
            sub_216353AB4(v53, (long long *)a2);
            a2 += 5;
          }
          else
          {
            sub_216353AB4(v53, v54);
            v54 += 5;
          }
          v53 += 80;
          if (v55 == v54) {
            goto LABEL_94;
          }
        }
        if (v55 != v54)
        {
          uint64_t v59 = 0;
          do
          {
            sub_216353AB4(v53 + v59 * 16, &v54[v59]);
            v59 += 5;
          }
          while ((long long *)v56 != &v54[v59 - 5]);
        }
      }
      goto LABEL_94;
    }
  }
  else if (a3 != a2)
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    do
    {
      uint64_t v41 = a7 + v39 * 16;
      unint64_t v42 = &a2[v39];
      __n128 v43 = a2[v39];
      *(void *)(v41 + 16) = a2[v39 + 1].n128_u64[0];
      *(__n128 *)uint64_t v41 = v43;
      v42->n128_u64[1] = 0;
      v42[1].n128_u64[0] = 0;
      v42->n128_u64[0] = 0;
      *(void *)(v41 + 24) = 0;
      *(void *)(v41 + 32) = 0;
      *(void *)(v41 + 4sub_216195244(&a9, 0) = 0;
      *(__n128 *)(v41 + 24) = *(__n128 *)((char *)&a2[v39 + 1] + 8);
      *(void *)(v41 + 4sub_216195244(&a9, 0) = a2[v39 + 2].n128_u64[1];
      v42[2].n128_u64[0] = 0;
      v42[2].n128_u64[1] = 0;
      v42[1].n128_u64[1] = 0;
      *(_WORD *)(v41 + 48) = a2[v39 + 3].n128_u16[0];
      *(void *)(v41 + 64) = 0;
      *(void *)(v41 + 72) = 0;
      *(void *)(v41 + 56) = 0;
      *(__n128 *)(v41 + 56) = *(__n128 *)((char *)&a2[v39 + 3] + 8);
      *(void *)(v41 + 72) = a2[v39 + 4].n128_u64[1];
      v42[3].n128_u64[1] = 0;
      v42[4].n128_u64[0] = 0;
      v42[4].n128_u64[1] = 0;
      ++v40;
      v39 += 5;
    }
    while (&v42[5] != a3);
    unint64_t v69 = v40;
    if (v39 * 16)
    {
      uint64_t v44 = a7 + v39 * 16;
      uint64_t v45 = (uint64_t)&a3[-5];
      while (a2 != a1)
      {
        unsigned int v46 = (*a4)((__n128 *)(v44 - 80), a2 - 5);
        if (v46) {
          long long v47 = (long long *)&a2[-5];
        }
        else {
          long long v47 = (long long *)(v44 - 80);
        }
        if (v46) {
          a2 -= 5;
        }
        else {
          v44 -= 80;
        }
        sub_216353AB4(v45, v47);
        v45 -= 80;
        if (v44 == a7) {
          goto LABEL_94;
        }
      }
      uint64_t v57 = 0;
      do
      {
        uint64_t v58 = v45 + v57;
        v57 -= 80;
        sub_216353AB4(v58, (long long *)(v44 + v57));
      }
      while (v44 + v57 != a7);
    }
    goto LABEL_94;
  }
  unint64_t v69 = 0;
LABEL_94:
  if (a7) {
    sub_216353B50(&v69, a7);
  }
}

void sub_2163539F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  if (v18) {
    sub_216353B50(&a18, v18);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216353A18(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  unint64_t v4 = a2[1].n128_u64[0];
  *a1 = *a2;
  a1[1].n128_u64[0] = v4;
  *a2 = result;
  a2[1].n128_u64[0] = v2;
  unint64_t v5 = a1[1].n128_u64[1];
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v5;
  unint64_t v6 = a1[2].n128_u64[0];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v6;
  unint64_t v7 = a1[2].n128_u64[1];
  a1[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v7;
  LOWORD(v7) = a1[3].n128_u16[0];
  a1[3].n128_u16[0] = a2[3].n128_u16[0];
  a2[3].n128_u16[0] = v7;
  unint64_t v8 = a1[3].n128_u64[1];
  a1[3].n128_u64[1] = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = v8;
  unint64_t v9 = a1[4].n128_u64[0];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = v9;
  unint64_t v10 = a1[4].n128_u64[1];
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  a2[4].n128_u64[1] = v10;
  return result;
}

__n128 sub_216353AB4(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  sub_2161254AC(a1 + 24, (__n128 *)((char *)a2 + 24));
  unint64_t v5 = *(void **)(a1 + 56);
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  if (v5)
  {
    *(void *)(a1 + 64) = v5;
    operator delete(v5);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  __n128 result = *(__n128 *)((char *)a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  return result;
}

void sub_216353B50(unint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    unint64_t v3 = 0;
    long long v4 = (void *)(a2 + 32);
    do
    {
      unint64_t v5 = (void *)v4[3];
      if (v5)
      {
        v4[4] = v5;
        operator delete(v5);
      }
      unint64_t v6 = (void *)*(v4 - 1);
      if (v6)
      {
        void *v4 = v6;
        operator delete(v6);
      }
      if (*((char *)v4 - 9) < 0) {
        operator delete((void *)*(v4 - 4));
      }
      ++v3;
      v4 += 10;
    }
    while (v3 < *a1);
  }
}

uint64_t *sub_216353BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CFArrayRef *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  *a5 = (uint64_t)&unk_26C6F4D68;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  return sub_216353C60(a5, a1, a2, a3, a4);
}

void sub_216353C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  int v13 = v12;
  *unint64_t v10 = v11;
  a10 = v13;
  sub_2161986EC(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_216353C60(uint64_t *result, uint64_t a2, uint64_t a3, CFArrayRef *a4, int a5)
{
  v13[4] = *MEMORY[0x263EF8340];
  if (a3)
  {
    unint64_t v9 = result;
    unint64_t v10 = result + 1;
    uint64_t v11 = (*(uint64_t (**)(uint64_t *))(*result + 24))(result);
    sub_216339568(v10, v11 + a3);
    unint64_t v12 = 0;
    do
    {
      v13[0] = &unk_26C6F67A8;
      v13[1] = v9;
      v13[3] = v13;
      sub_216353F70(v11 + v12, a2, a3, v12, a4, (uint64_t)v13, a5);
      __n128 result = sub_216354AAC(v13);
      ++v12;
    }
    while (a3 != v12);
  }
  return result;
}

void sub_216353D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216354AAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216353D94(CFArrayRef theArray@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = (uint64_t)&unk_26C6F4D68;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  sub_216353E20(a3, theArray, a2);
}

void sub_216353E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  int v13 = v12;
  *unint64_t v10 = v11;
  a10 = v13;
  sub_2161986EC(&a10);
  _Unwind_Resume(a1);
}

void sub_216353E20(uint64_t *a1, CFArrayRef theArray, int a3)
{
  v11[4] = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count)
  {
    uint64_t v7 = Count;
    uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    sub_216339568(a1 + 1, v8 + v7);
    if (v7 >= 1)
    {
      for (unint64_t i = 0; i != v7; ++i)
      {
        unint64_t v10 = (void *)*((void *)CFArrayGetValueAtIndex(theArray, i) + 3);
        v11[0] = &off_26C6F6828;
        v11[1] = a1;
        void v11[3] = v11;
        sub_21635426C(v8 + i, v10, i, (uint64_t)v11, a3);
        sub_216354AAC(v11);
      }
    }
  }
}

void sub_216353F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216354AAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216353F70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, CFArrayRef *a5, uint64_t a6, int a7)
{
  unsigned __int16 v37 = *(_WORD *)(a2 + 2 * a4);
  sub_216354948(*(void *)(a6 + 24), a1, (uint64_t)&v37, 1, 0.0);
  if (a7)
  {
    sub_21630EAF0(v37, (uint64_t *)&v35);
    unint64_t v12 = v35;
    for (unint64_t i = v36; v12 != i; v12 += 24)
    {
      if (v12[23] < 0)
      {
        sub_2161984AC(__p, *(void **)v12, *((void *)v12 + 1));
      }
      else
      {
        long long v14 = *(_OWORD *)v12;
        uint64_t v34 = *((void *)v12 + 2);
        *(_OWORD *)std::string __p = v14;
      }
      if (v34 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      if (v34 >= 0) {
        uint64_t v16 = HIBYTE(v34);
      }
      else {
        uint64_t v16 = (uint64_t)__p[1];
      }
      sub_216354948(*(void *)(a6 + 24), a1, (uint64_t)v15, v16, 0.0);
      if (SHIBYTE(v34) < 0) {
        operator delete(__p[0]);
      }
    }
    __p[0] = &v35;
    sub_21613EFD0((void ***)__p);
  }
  else
  {
    sub_21630E864(v37, &v35);
    __n128 v17 = v35;
    uint64_t v18 = v36;
    if (v35 != v36)
    {
      do
      {
        LOWORD(__p[0]) = *(_WORD *)v17;
        if (v37 == LOWORD(__p[0])) {
          double v19 = 0.0;
        }
        else {
          double v19 = -2.7000001;
        }
        sub_216354948(*(void *)(a6 + 24), a1, (uint64_t)__p, 1, v19);
        v17 += 2;
      }
      while (v17 != v18);
      __n128 v17 = v35;
    }
    if (v17)
    {
      uint64_t v36 = v17;
      operator delete(v17);
    }
  }
  if (a5)
  {
    int v20 = sub_21630E188(v37);
    double v21 = -0.2;
    if (a4 >= 0x28) {
      double v21 = 0.0;
    }
    double v22 = a4 >= 0x14 ? v21 : -1.0;
    uint64_t v23 = sub_21627378C(a5, a4);
    if (v23)
    {
      unsigned __int16 v24 = *(_WORD *)v23;
      if (*(_WORD *)v23)
      {
        unint64_t v25 = 0;
        double v26 = *((float *)v23 + 1);
        unint64_t v27 = (float *)(v23 + 8);
        do
        {
          LOWORD(v35) = v24;
          if (v20) {
            int v28 = sub_21630E188(v24) ^ 1;
          }
          else {
            LOBYTE(v28) = 0;
          }
          unsigned __int16 v29 = (v24 & 0xFFDF) - 91;
          if ((unsigned __int16)(v24 - 12644) < 0xFFCDu) {
            LOBYTE(v28) = 1;
          }
          if ((v29 > 0xFFE5u || (v28 & 1) == 0) && v37 != v24)
          {
            double v30 = *(v27 - 1) - v26;
            if (v30 >= v22)
            {
              double v31 = v30 <= -0.00001 ? v30 * 4.0 + -0.3 : 0.0;
              sub_216354948(*(void *)(a6 + 24), a1, (uint64_t)&v35, 1, v31);
              if (v29 <= 0xFFE5u)
              {
                if (v25 > 1) {
                  return;
                }
                ++v25;
              }
            }
          }
          int v32 = *(unsigned __int16 *)v27;
          v27 += 2;
          unsigned __int16 v24 = v32;
        }
        while (v32);
      }
    }
  }
}

void sub_216354220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **p_p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  p_p = &__p;
  sub_21613EFD0(&p_p);
  _Unwind_Resume(a1);
}

void sub_21635426C(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, int a5)
{
  unsigned __int16 v40 = (*(uint64_t (**)(void *))(*a2 + 8))(a2);
  sub_216354948(*(void *)(a4 + 24), a1, (uint64_t)&v40, 1, 0.0);
  if (a5)
  {
    sub_21630EAF0(v40, (uint64_t *)&v38);
    unint64_t v10 = v38;
    for (unint64_t i = v39; v10 != i; v10 += 24)
    {
      if (v10[23] < 0)
      {
        sub_2161984AC(__p, *(void **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v12 = *(_OWORD *)v10;
        uint64_t v37 = *((void *)v10 + 2);
        *(_OWORD *)std::string __p = v12;
      }
      if (v37 >= 0) {
        int v13 = __p;
      }
      else {
        int v13 = (void **)__p[0];
      }
      if (v37 >= 0) {
        uint64_t v14 = HIBYTE(v37);
      }
      else {
        uint64_t v14 = (uint64_t)__p[1];
      }
      sub_216354948(*(void *)(a4 + 24), a1, (uint64_t)v13, v14, 0.0);
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
    }
    __p[0] = &v38;
    sub_21613EFD0((void ***)__p);
  }
  else
  {
    sub_21630E864(v40, &v38);
    uint64_t v15 = v38;
    uint64_t v16 = v39;
    if (v38 != v39)
    {
      do
      {
        LOWORD(__p[0]) = *(_WORD *)v15;
        if (v40 == LOWORD(__p[0])) {
          double v17 = 0.0;
        }
        else {
          double v17 = -2.7000001;
        }
        sub_216354948(*(void *)(a4 + 24), a1, (uint64_t)__p, 1, v17);
        v15 += 2;
      }
      while (v15 != v16);
      uint64_t v15 = v38;
    }
    if (v15)
    {
      uint64_t v39 = v15;
      operator delete(v15);
    }
  }
  uint64_t v19 = a2[1];
  uint64_t v18 = (unsigned __int16 *)a2[2];
  if ((unsigned __int16 *)v19 != v18)
  {
    int v20 = sub_21630E188(v40);
    uint64_t v21 = 0;
    double v22 = -0.2;
    if (a3 >= 0x28) {
      double v22 = 0.0;
    }
    if (a3 >= 0x14) {
      double v23 = v22;
    }
    else {
      double v23 = -1.0;
    }
    double v24 = *(float *)(v19 + 4);
    unint64_t v25 = (float *)v19;
    do
    {
      int v26 = *(unsigned __int16 *)v25;
      if (v20) {
        int v27 = sub_21630E188(*(unsigned __int16 *)v25) ^ 1;
      }
      else {
        LOBYTE(v27) = 0;
      }
      if ((unsigned __int16)(v26 - 12644) < 0xFFCDu) {
        LOBYTE(v27) = 1;
      }
      if ((unsigned __int16)((v26 & 0xFFDF) - 65) < 0x1Au || (v27 & 1) == 0)
      {
        double v28 = v25[1] - v24;
        if (v26 != v40 && v28 >= v23)
        {
          unsigned int v30 = (unsigned __int16)((v26 & 0xFFDF) - 65);
          double v31 = v28 <= -0.00001 ? v28 * 4.0 + -0.3 : 0.0;
          sub_216354948(*(void *)(a4 + 24), a1, v19, 1, v31);
          unint64_t v32 = v21 + 1;
          if (v30 < 0x1A)
          {
            BOOL v33 = 1;
          }
          else
          {
            ++v21;
            BOOL v33 = v32 >= 3;
          }
          if (v33)
          {
            if (v32 <= 2) {
              int v34 = 0;
            }
            else {
              int v34 = 6;
            }
            if (v30 < 0x1A) {
              int v34 = 7;
            }
            if (v34 != 7 && v34 != 0) {
              break;
            }
          }
        }
      }
      v25 += 2;
      v19 += 8;
    }
    while (v25 != (float *)v18);
  }
}

void sub_216354558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **p_p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  p_p = &__p;
  sub_21613EFD0(&p_p);
  _Unwind_Resume(a1);
}

uint64_t sub_2163545A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CFArrayRef *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  void v12[4] = *MEMORY[0x263EF8340];
  uint64_t result = LXLatticeCreateMutable();
  *a5 = result;
  if (a2)
  {
    unint64_t v11 = 0;
    do
    {
      v12[0] = &unk_26C6C8178;
      v12[1] = a5;
      v12[3] = v12;
      sub_216353F70(v11, a1, a2, v11, a3, (uint64_t)v12, a4);
      uint64_t result = (uint64_t)sub_216354AAC(v12);
      ++v11;
    }
    while (a2 != v11);
  }
  return result;
}

void sub_216354690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216354AAC((uint64_t *)va);
  sub_21624E130(v2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2163546B0@<X0>(const __CFArray *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  v10[4] = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(a1);
  uint64_t result = LXLatticeCreateMutable();
  *a3 = result;
  if (Count >= 1)
  {
    for (unint64_t i = 0; i != Count; ++i)
    {
      unint64_t v9 = (void *)*((void *)CFArrayGetValueAtIndex(a1, i) + 3);
      v10[0] = &unk_26C6C81D0;
      v10[1] = a3;
      _OWORD v10[3] = v10;
      sub_21635426C(i, v9, i, (uint64_t)v10, a2);
      uint64_t result = (uint64_t)sub_216354AAC(v10);
    }
  }
  return result;
}

void sub_216354794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216354AAC((uint64_t *)va);
  sub_21624E130(v2, 0);
  _Unwind_Resume(a1);
}

CFIndex sub_2163547BC@<X0>(CFArrayRef theArray@<X0>, uint64_t a2@<X8>)
{
  CFIndex v4 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  while (1)
  {
    CFIndex result = CFArrayGetCount(theArray);
    if (v4 >= result) {
      return result;
    }
    unint64_t v6 = (void *)*((void *)CFArrayGetValueAtIndex(theArray, v4) + 3);
    int v7 = (*(uint64_t (**)(void *))(*v6 + 8))(v6);
    __int16 v8 = v7;
    if ((v7 - 12593) > 0x32 || (unint64_t v9 = (float *)v6[1], v10 = (unsigned __int16 *)v6[2], v9 == (float *)v10))
    {
      sub_2161845F8(a2, v7);
      ++v4;
    }
    else
    {
      double v11 = v9[1];
      while (1)
      {
        int v12 = *(unsigned __int16 *)v9;
        BOOL v13 = (unsigned __int16)((v12 & 0xFFDF) - 91) < 0xFFE6u || v12 == v7;
        if (!v13 && v11 - v9[1] < 0.0001) {
          break;
        }
        v9 += 2;
        if (v9 == (float *)v10) {
          goto LABEL_15;
        }
      }
      sub_2161845F8(a2, v12);
LABEL_15:
      CFIndex v14 = *(unsigned __int8 *)(a2 + 23);
      CFIndex v15 = v4 + 1;
      if ((v14 & 0x80u) != 0) {
        CFIndex v14 = *(void *)(a2 + 8);
      }
      CFIndex v4 = v14;
      if (v14 != v15)
      {
        sub_2161845F8(a2, v8);
        CFIndex v4 = v15;
      }
    }
  }
}

void sub_216354918(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216354948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  v9[0] = a3;
  v9[1] = a4;
  uint64_t v8 = a2;
  double v7 = a5;
  uint64_t v6 = 1;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, void *, double *, uint64_t *))(*(void *)a1 + 48))(a1, &v8, v9, &v7, &v6);
}

void sub_2163549B8()
{
}

void *sub_2163549CC(uint64_t a1)
{
  CFIndex result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6F67A8;
  result[1] = v3;
  return result;
}

uint64_t sub_216354A14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F67A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_216354A40(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4, uint64_t *a5)
{
  return sub_2162FE6D0(*(void *)(a1 + 8), *a2, *(void **)a3, *(void *)(a3 + 8), *a5, *a4);
}

uint64_t sub_216354A60(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6808)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216354AA0()
{
  return &unk_26C6F6808;
}

void *sub_216354AAC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216354B34()
{
}

void *sub_216354B48(uint64_t a1)
{
  CFIndex result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_26C6F6828;
  result[1] = v3;
  return result;
}

uint64_t sub_216354B90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_26C6F6828;
  a2[1] = v2;
  return result;
}

uint64_t sub_216354BBC(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4, uint64_t *a5)
{
  return sub_2162FE6D0(*(void *)(a1 + 8), *a2, *(void **)a3, *(void *)(a3 + 8), *a5, *a4);
}

uint64_t sub_216354BDC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6888)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216354C1C()
{
  return &unk_26C6F6888;
}

void sub_216354C2C()
{
}

void *sub_216354C40(uint64_t a1)
{
  CFIndex result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C8178;
  result[1] = v3;
  return result;
}

uint64_t sub_216354C88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C8178;
  a2[1] = v2;
  return result;
}

void sub_216354CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v3 = CFStringCreateWithCharacters(0, *(const UniChar **)a3, *(void *)(a3 + 8));
  LXLatticeAddNode();
  if (v3) {
    CFRelease(v3);
  }
}

void sub_216354D2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216354D48(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC930)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216354D88()
{
  return &unk_26C6BC930;
}

void sub_216354D98()
{
}

void *sub_216354DAC(uint64_t a1)
{
  CFIndex result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6C81D0;
  result[1] = v3;
  return result;
}

uint64_t sub_216354DF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6C81D0;
  a2[1] = v2;
  return result;
}

void sub_216354E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v3 = CFStringCreateWithCharacters(0, *(const UniChar **)a3, *(void *)(a3 + 8));
  LXLatticeAddNode();
  if (v3) {
    CFRelease(v3);
  }
}

void sub_216354E98(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216354EB4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC940)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216354EF4()
{
  return &unk_26C6BC940;
}

void *sub_216354F00(void *a1, void *a2, unint64_t a3, int a4)
{
  uint64_t v5 = (uint64_t)a2;
  *a1 = 0;
  if (a4)
  {
    if (*a2 != 0x11181BE3ELL)
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_216354FB8(exception);
      __cxa_throw(exception, (struct type_info *)off_2642668B8, MEMORY[0x263F8C080]);
    }
    uint64_t v5 = (uint64_t)(a2 + 1);
    a3 -= 8;
  }
  sub_21628D460(0, 0, v5, a3);
  *a1 = v7;
  return a1;
}

void sub_216354FA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_216354FB8(std::logic_error *a1)
{
  CFIndex result = std::logic_error::logic_error(a1, "header check failed");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  return result;
}

uint64_t *sub_216354FF4(uint64_t *a1, uint64_t **a2, _DWORD **a3)
{
  *a1 = 0;
  uint64_t v5 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
  uint64_t v6 = (uint64_t)v5;
  if (v5)
  {
    v5[8] = 0;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *(_OWORD *)uint64_t v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
  }
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  std::string __p = 0;
  int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  do
  {
    unint64_t v9 = v8;
    if (*((char *)v8 + 23) < 0) {
      unint64_t v9 = (uint64_t *)*v8;
    }
    unint64_t v10 = v37;
    if (v37 >= v38)
    {
      uint64_t v12 = (v37 - (unsigned char *)v36) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        sub_21610CB04();
      }
      unint64_t v13 = (v38 - (unsigned char *)v36) >> 2;
      if (v13 <= v12 + 1) {
        unint64_t v13 = v12 + 1;
      }
      if ((unint64_t)(v38 - (unsigned char *)v36) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        CFIndex v15 = (char *)sub_2160FFAA8((uint64_t)&v38, v14);
      }
      else {
        CFIndex v15 = 0;
      }
      uint64_t v16 = &v15[8 * v12];
      *(void *)uint64_t v16 = v9;
      double v11 = v16 + 8;
      uint64_t v18 = (char *)v36;
      double v17 = v37;
      if (v37 != v36)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v16 - 1) = v19;
          v16 -= 8;
        }
        while (v17 != v18);
        double v17 = (char *)v36;
      }
      uint64_t v36 = v16;
      uint64_t v37 = v11;
      uint64_t v38 = &v15[8 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)uint64_t v37 = v9;
      double v11 = v10 + 8;
    }
    uint64_t v37 = v11;
    if (*((char *)v8 + 23) < 0) {
      uint64_t v20 = v8[1];
    }
    else {
      uint64_t v20 = *((unsigned __int8 *)v8 + 23);
    }
    uint64_t v21 = v34;
    if (v34 >= (uint64_t *)v35)
    {
      double v23 = __p;
      uint64_t v24 = v34 - __p;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
        sub_21610CB04();
      }
      uint64_t v26 = v35 - (char *)__p;
      if ((v35 - (char *)__p) >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        double v28 = (char *)sub_2160FFAA8((uint64_t)&v35, v27);
        double v23 = __p;
        uint64_t v21 = v34;
      }
      else
      {
        double v28 = 0;
      }
      unsigned __int16 v29 = (uint64_t *)&v28[8 * v24];
      *unsigned __int16 v29 = v20;
      double v22 = v29 + 1;
      while (v21 != v23)
      {
        uint64_t v30 = *--v21;
        *--unsigned __int16 v29 = v30;
      }
      std::string __p = v29;
      uint64_t v35 = &v28[8 * v27];
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *int v34 = v20;
      double v22 = v34 + 1;
    }
    int v34 = v22;
    v8 += 3;
  }
  while (v8 != v7);
  sub_216214528(v6, (v37 - (unsigned char *)v36) >> 3, (unsigned __int8 **)v36, __p, *a3);
  *a1 = v6;
  if (__p) {
    operator delete(__p);
  }
  if (v36)
  {
    uint64_t v37 = (char *)v36;
    operator delete(v36);
  }
  return a1;
}

void sub_21635526C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void **sub_2163552A8@<X0>(void *a1@<X0>, _DWORD **a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, void ***a5@<X8>)
{
  if (a3 && a4)
  {
    uint64_t v10 = sub_21621AF08();
    uint64_t v11 = *(void *)(v10 + 8 * (**a2 & 3));
    CFIndex result = (void **)(*(uint64_t (**)(uint64_t, void, _DWORD **, void))(*(void *)v11 + 16))(v11, *a1, a2, *a3);
    if (a4 >= 2)
    {
      unint64_t v13 = a4 - 1;
      unint64_t v14 = a3 + 1;
      do
      {
        if (*(_OWORD *)a5 == 0 || (*(_DWORD *)*a5 & 3) == 0) {
          break;
        }
        (*(void (**)(void ***__return_ptr))(**(void **)(v10 + 8 * (*(_DWORD *)*a5 & 3)) + 16))(&v17);
        sub_21621AB84(a5, &v17);
        CFIndex v15 = v18;
        uint64_t v18 = 0;
        if (v15)
        {
          uint64_t v16 = sub_21620FE6C(v15);
          MEMORY[0x2166CA800](v16, 0x20C4093837F09);
        }
        CFIndex result = v17;
        double v17 = 0;
        if (result) {
          CFIndex result = (void **)MEMORY[0x2166CA800](result, 0x1010C40E4C6A875);
        }
        ++v14;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    return (void **)sub_21621A960(a5, 0);
  }
  return result;
}

void sub_216355430(_Unwind_Exception *a1)
{
  sub_21620FDCC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216355444(void *a1, _DWORD **a2)
{
  uint64_t v4 = sub_21621AF08();
  if (!*a1) {
    return 0;
  }
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v4 + 8 * (**a2 & 3)) + 40);

  return v5();
}

uint64_t BurstTrieCompile(uint64_t a1, char *a2)
{
  v43[19] = *MEMORY[0x263EF8340];
  v36[0] = &unk_26C6C5220;
  v36[1] = 0;
  sub_2161C26B4((uint64_t)v36, "UTF-8", a2);
  sub_21613025C(v41);
  uint64_t v2 = v41[0];
  if ((v42[*(void *)(v41[0] - 24) + 16] & 5) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    BOOL v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v30 = 0;
    double v31 = 0;
    unint64_t v32 = 0;
    std::string __p = 0;
    double v28 = 0;
    unsigned __int16 v29 = 0;
    uint64_t v4 = (std::locale::id *)MEMORY[0x263F8C108];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(v2 - 24)));
      uint64_t v5 = std::locale::use_facet(&v37, v4);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v37);
      uint64_t v6 = (void *)std::istream::getline();
      if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
        break;
      }
      sub_2161C015C(v40, (uint64_t *)&v33, 2uLL);
      if (*((char *)v33 + 23) < 0)
      {
        sub_21610A674(__dst, *(void **)v33, *((void *)v33 + 1));
      }
      else
      {
        long long v7 = *v33;
        __dst[0].__r_.__value_.__r.__words[2] = *((void *)v33 + 2);
        *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v7;
      }
      sub_2161C27BC((uint64_t)v36, __dst);
      uint64_t v8 = v31;
      if ((unint64_t)v31 >= v32)
      {
        uint64_t v10 = (unsigned char *)sub_2161BAB5C((uint64_t *)&v30, (long long *)__dst);
      }
      else
      {
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_21610A674(v31, __dst[0].__r_.__value_.__l.__data_, __dst[0].__r_.__value_.__l.__size_);
        }
        else
        {
          long long v9 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
          *((void *)v31 + 2) = *((void *)&__dst[0].__r_.__value_.__l + 2);
          *uint64_t v8 = v9;
        }
        uint64_t v10 = (char *)v8 + 24;
      }
      double v31 = v10;
      uint64_t v11 = (char *)v33 + 24;
      if (*((char *)v33 + 47) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
      int v12 = atoi(v11);
      int v13 = v12;
      unint64_t v14 = v28;
      if (v28 >= v29)
      {
        uint64_t v16 = (char *)__p;
        uint64_t v17 = (v28 - (unsigned char *)__p) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          sub_21610CB04();
        }
        uint64_t v19 = v29 - (unsigned char *)__p;
        if ((v29 - (unsigned char *)__p) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)sub_2161129B4((uint64_t)&v29, v20);
          uint64_t v16 = (char *)__p;
          unint64_t v14 = v28;
        }
        else
        {
          uint64_t v21 = 0;
        }
        double v22 = (int *)&v21[4 * v17];
        *double v22 = v13;
        CFIndex v15 = (char *)(v22 + 1);
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *--double v22 = v23;
        }
        std::string __p = v22;
        double v28 = v15;
        unsigned __int16 v29 = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)double v28 = v12;
        CFIndex v15 = v14 + 4;
      }
      double v28 = v15;
      uint64_t v24 = (uint64_t)v33;
      for (uint64_t i = v34; i != v24; i -= 24)
      {
        if (*(char *)(i - 1) < 0) {
          operator delete(*(void **)(i - 24));
        }
      }
      uint64_t v34 = v24;
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      }
      uint64_t v2 = v41[0];
    }
    sub_216354FF4((uint64_t *)&v37, &v30, (_DWORD **)&__p);
    sub_216157A4C((uint64_t *)__dst);
    if ((__dst[1].__r_.__value_.__s.__data_[*(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
    {
      uint64_t v3 = 1;
    }
    else
    {
      std::ostream::write();
      std::ostream::write();
      if (!std::filebuf::close()) {
        std::ios_base::clear((std::ios_base *)((char *)__dst + *(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__dst[1].__r_.__value_.__r.__words[1]+ *(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) | 4);
      }
      uint64_t v3 = 0;
    }
    __dst[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B0];
    *(std::string::size_type *)((char *)__dst[0].__r_.__value_.__r.__words
                              + *(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B0] + 24);
    MEMORY[0x2166CA430](&__dst[0].__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x2166CA750](&v39);
    if (v37.__locale_) {
      sub_21628D4F4((void **)v37.__locale_);
    }
    if (__p)
    {
      double v28 = (char *)__p;
      operator delete(__p);
    }
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    sub_21613EFD0((void ***)__dst);
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    sub_21613EFD0((void ***)__dst);
  }
  v41[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v41 + *(void *)(v41[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166CA430](v42);
  std::istream::~istream();
  MEMORY[0x2166CA750](v43);
  sub_2161C2924(v36);
  return v3;
}

void sub_216355A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,void *a23)
{
  if (a22.__locale_) {
    sub_21628D4F4((void **)a22.__locale_);
  }
  if (__p) {
    operator delete(__p);
  }
  a23 = &a14;
  sub_21613EFD0((void ***)&a23);
  a23 = &a17;
  sub_21613EFD0((void ***)&a23);
  uint64_t v24 = MEMORY[0x263F8C2A8];
  uint64_t v25 = *MEMORY[0x263F8C2A8];
  STACK[0x6A8] = *MEMORY[0x263F8C2A8];
  *(unint64_t *)((char *)&STACK[0x6A8] + *(void *)(v25 - 24)) = *(void *)(v24 + 24);
  MEMORY[0x2166CA430](&STACK[0x6B8]);
  std::istream::~istream();
  MEMORY[0x2166CA750](&STACK[0x850]);
  sub_2161C2924(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_216355CA0(uint64_t a1, uint64_t a2, int a3, void *a4, unsigned int a5)
{
  LODWORD(v5) = a5;
  if (*(unsigned char *)(a2 + 109) == 1)
  {
    p_src = *(const void **)(a2 + 48);
    unint64_t v9 = *(unsigned __int16 *)(a2 + 88);
    uint64_t v10 = v9 >> 1;
    if (!a3 || v9 < 2)
    {
      if (v10 >= a5) {
        uint64_t v5 = a5;
      }
      else {
        uint64_t v5 = v10;
      }
      size_t v11 = (2 * v5);
      goto LABEL_23;
    }
    if (!p_src) {
      uint64_t v10 = 0;
    }
    v17[0] = (uint64_t)p_src;
    v17[1] = v10;
    sub_216183E18(v17, 0, 0, 0, &__src);
    if ((v20 & 0x80) == 0)
    {
      if (v20 >= v5) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = v20;
      }
      size_t v11 = (2 * v5);
      p_src = &__src;
      goto LABEL_23;
    }
    if (v19 >= v5) {
      uint64_t v15 = v5;
    }
    else {
      uint64_t v15 = v19;
    }
    uint64_t v16 = __src;
    memcpy(a4, __src, 2 * v15);
    operator delete(v16);
    return v15;
  }
  else
  {
    UniChar __src = 0;
    unsigned int v12 = (unsigned __int16)sub_216355DB8(a1, a2, &__src);
    if (v12 >= v5) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v12;
    }
    p_src = __src;
    if (v5) {
      BOOL v13 = __src == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      size_t v11 = 2 * v5;
LABEL_23:
      memcpy(a4, p_src, v11);
    }
  }
  return v5;
}

uint64_t sub_216355DB8(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  uint64_t v3 = *(unsigned __int16 **)(a2 + 56);
  if (v3)
  {
    *a3 = v3;
    LODWORD(result) = -1;
    do
    {
      int v5 = *v3++;
      uint64_t result = (result + 1);
    }
    while (v5);
  }
  else
  {
    unsigned int v6 = 0;
    (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
    return v6 >> 1;
  }
  return result;
}

void sub_216355E2C()
{
}

void sub_216356038(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 336))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216356080(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    int v4 = 0;
    uint64_t result = 0;
    do
    {
      if (*(void *)(v3 + 48) && *(_WORD *)(v3 + 88))
      {
        ++v4;
        if (a2 && a3 + a2 < (unint64_t)v4) {
          return result;
        }
        if (v4 > a3) {
          uint64_t result = (result + *(__int16 *)(v3 + 86));
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2163560D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, BOOL))(*(void *)a1 + 256))(a1, a4 != 0);
  if (a4)
  {
    uint64_t v12 = *a4;
    uint64_t v13 = 2 * a4[1];
    uint64_t v14 = *((unsigned __int16 *)a4 + 16);
    uint64_t v15 = *((unsigned __int16 *)a4 + 17);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56);
    return v16(a1, v12, v13, a5, a6, v14, v15);
  }
  else
  {
    unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);
    return v18(a1, a2, 2 * a3, a5, a6);
  }
}

uint64_t sub_2163561F4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(a1);
  if (!result) {
    sub_216344B04();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void sub_216356AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2161DEE90((void ***)&__p);
  (*(void (**)(uint64_t))(*(void *)v27 + 336))(v27);
  _Unwind_Resume(a1);
}

void *sub_216356B40(unint64_t a1)
{
  if (a1 >> 58) {
    sub_2160FFA74();
  }
  return operator new(a1 << 6);
}

uint64_t sub_216356B78(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      int v4 = v2 - 8;
      *(void *)(a1 + 16) = v2 - 8;
      if (*((char *)v2 - 41) < 0)
      {
        operator delete(*v4);
        int v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216356BDC(uint64_t a1@<X0>, uint64_t a2@<X1>, CFArrayRef *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = (uint64_t)&unk_26C6F4D68;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  sub_216356C6C(a4, a1, a2, a3);
}

void sub_216356C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = v12;
  *uint64_t v10 = v11;
  a10 = v13;
  sub_2161986EC(&a10);
  _Unwind_Resume(a1);
}

void sub_216356C6C(uint64_t *a1, uint64_t a2, uint64_t a3, CFArrayRef *a4)
{
  if (a3)
  {
    unsigned int v6 = a1 + 1;
    uint64_t v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    sub_216339568(v6, v7 + a3);
    for (unint64_t i = 0; i != a3; ++i)
    {
      unsigned __int16 v31 = *(_WORD *)(a2 + 2 * i);
      sub_21635710C(*v6, i + v7, &v31, 0.0);
      unsigned __int16 v30 = 0;
      int v9 = v31;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E9D0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26797E9D0))
      {
        qword_26797E9D8 = 0;
        qword_26797E9E0 = 0;
        qword_26797E9E8 = 0;
        uint64_t v27 = operator new(0x14uLL);
        qword_26797E9D8 = (uint64_t)v27;
        *(_OWORD *)uint64_t v27 = xmmword_216398F40;
        v27[4] = 237309475;
        qword_26797E9E0 = (uint64_t)(v27 + 5);
        qword_26797E9E8 = (uint64_t)(v27 + 5);
        __cxa_atexit((void (*)(void *))sub_216357284, &qword_26797E9D8, &dword_2160F5000);
        __cxa_guard_release(&qword_26797E9D0);
      }
      uint64_t v10 = (unsigned __int16 *)qword_26797E9D8;
      if (qword_26797E9D8 != qword_26797E9E0)
      {
        while (*v10 != v9 && v10[1] != v9)
        {
          v10 += 2;
          if (v10 == (unsigned __int16 *)qword_26797E9E0) {
            goto LABEL_15;
          }
        }
      }
      if (v10 == (unsigned __int16 *)qword_26797E9E0)
      {
LABEL_15:
        int v12 = 0;
      }
      else
      {
        if (*v10 == v9) {
          ++v10;
        }
        int v12 = *v10;
      }
      unsigned __int16 v30 = v12;
      double v13 = dbl_216398F50[v31 == v12];
      char v14 = v12 != 0;
      if (a4)
      {
        if (i >= 0x28) {
          double v15 = 0.0;
        }
        else {
          double v15 = -0.2;
        }
        if (i >= 0x14) {
          double v16 = v15;
        }
        else {
          double v16 = -1.0;
        }
        uint64_t v17 = sub_21627378C(a4, i);
        if (!v17)
        {
LABEL_38:
          if ((v14 & 1) == 0) {
            continue;
          }
LABEL_41:
          sub_21635710C(*v6, i + v7, &v30, v13);
          continue;
        }
        int v18 = *(unsigned __int16 *)v17;
        if (*(_WORD *)v17)
        {
          unint64_t v19 = 0;
          double v20 = *((float *)v17 + 1);
          uint64_t v21 = (float *)(v17 + 8);
          while (1)
          {
            unsigned __int16 v29 = v18;
            double v22 = *(v21 - 1) - v20;
            if (v18 != v31 && v22 >= v16)
            {
              double v24 = v22 * 4.0 + -0.3;
              if (v24 < v13 && v18 == v30) {
                double v24 = v13;
              }
              v14 &= v18 != v30;
              sub_21635710C(*v6, i + v7, &v29, v24);
              if (v19 > 1) {
                goto LABEL_38;
              }
              ++v19;
            }
            int v26 = *(unsigned __int16 *)v21;
            v21 += 2;
            int v18 = v26;
            if (!v26) {
              goto LABEL_38;
            }
          }
        }
      }
      if (v12) {
        goto LABEL_41;
      }
    }
  }
}

void sub_216356F58(_Unwind_Exception *a1)
{
}

uint64_t sub_216356F70@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, void *a3@<X8>, float a4@<S0>)
{
  *a3 = &unk_26C6F4D68;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  if (a2)
  {
    uint64_t v6 = result;
    sub_216339568(a3 + 1, a2);
    uint64_t v8 = 0;
    float v9 = a4 / (float)a2;
    do
    {
      __src[0] = *(_WORD *)(v6 + 2 * v8);
      uint64_t result = sub_216357050((uint64_t)a3, v8++, __src, 1, 1, v9);
    }
    while (a2 != v8);
  }
  return result;
}

void sub_216357030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *uint64_t v2 = v3;
  sub_2161986EC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216357050(uint64_t a1, uint64_t a2, void *__src, int a4, int a5, float a6)
{
  uint64_t v17 = __src;
  int v16 = a4;
  float v15 = a6;
  int v14 = a5;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 + 24 * a2;
  unint64_t v9 = *(void *)(v7 + 8);
  unint64_t v8 = *(void *)(v7 + 16);
  uint64_t v10 = (void *)(v7 + 8);
  if (v9 >= v8)
  {
    uint64_t result = sub_2163572B8((uint64_t *)(v6 + 24 * a2), &v17, &v16, &v15, &v14);
  }
  else
  {
    sub_21617FAAC((void *)v9, __src, a4);
    *(double *)(v9 + 24) = a6;
    *(void *)(v9 + 32) = a5;
    uint64_t result = v9 + 40;
    *uint64_t v10 = v9 + 40;
  }
  *uint64_t v10 = result;
  return result;
}

void sub_216357104(_Unwind_Exception *a1)
{
  *uint64_t v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_21635710C(uint64_t a1, uint64_t a2, unsigned __int16 *a3, double a4)
{
  uint64_t v7 = a1 + 24 * a2;
  unint64_t v10 = *(void *)(v7 + 8);
  unint64_t v9 = (uint64_t *)(v7 + 8);
  unint64_t v8 = v10;
  uint64_t result = (uint64_t)(v9 + 1);
  unint64_t v12 = v9[1];
  if (v10 >= v12)
  {
    int v14 = (uint64_t *)(a1 + 24 * a2);
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - *v14) >> 3);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0x666666666666666) {
      sub_21610CB04();
    }
    if (0x999999999999999ALL * ((uint64_t)(v12 - *v14) >> 3) > v16) {
      unint64_t v16 = 0x999999999999999ALL * ((uint64_t)(v12 - *v14) >> 3);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v14) >> 3) >= 0x333333333333333) {
      unint64_t v17 = 0x666666666666666;
    }
    else {
      unint64_t v17 = v16;
    }
    double v24 = v9 + 1;
    if (v17) {
      int v18 = (char *)sub_21618B4A8(result, v17);
    }
    else {
      int v18 = 0;
    }
    double v20 = v18;
    uint64_t v21 = (double *)&v18[40 * v15];
    double v22 = v21;
    int v23 = &v18[40 * v17];
    sub_21617FAAC(v21, a3, 1uLL);
    unint64_t v19 = v21;
    v21[3] = a4;
    *((void *)v19 + 4) = 1;
    v22 += 5;
    sub_2162FE8C4(v14, &v20);
    unint64_t v13 = *v9;
    uint64_t result = sub_2162FEA68((uint64_t)&v20);
  }
  else
  {
    *(unsigned char *)(v8 + 23) = 1;
    *(_DWORD *)unint64_t v8 = *a3;
    *(double *)(v8 + 24) = a4;
    *(void *)(v8 + 32) = 1;
    unint64_t v13 = v8 + 40;
    *unint64_t v9 = v8 + 40;
  }
  *unint64_t v9 = v13;
  return result;
}

void sub_216357270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162FEA68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216357284(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2163572B8(uint64_t *a1, void **a2, int *a3, float *a4, int *a5)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x666666666666666) {
    sub_21610CB04();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v6) >> 3);
  if (2 * v14 > v8) {
    unint64_t v8 = 2 * v14;
  }
  if (v14 >= 0x333333333333333) {
    unint64_t v15 = 0x666666666666666;
  }
  else {
    unint64_t v15 = v8;
  }
  int v26 = a1 + 2;
  if (v15) {
    unint64_t v16 = (char *)sub_21618B4A8(v13, v15);
  }
  else {
    unint64_t v16 = 0;
  }
  double v22 = v16;
  int v23 = (double *)&v16[40 * v7];
  double v24 = v23;
  uint64_t v25 = &v16[40 * v15];
  float v17 = *a4;
  uint64_t v18 = *a5;
  sub_21617FAAC(v23, *a2, *a3);
  unint64_t v19 = v23;
  v23[3] = v17;
  *((void *)v19 + 4) = v18;
  v24 += 5;
  sub_2162FE8C4(a1, &v22);
  uint64_t v20 = a1[1];
  sub_2162FEA68((uint64_t)&v22);
  return v20;
}

void sub_2163573F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2162FEA68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216357404(uint64_t a1, CFDictionaryRef theDict)
{
  *(_DWORD *)a1 = 0;
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationLearningEnabledKey[0]);
  *(unsigned char *)(a1 + 4) = sub_2161E4650(Value, 1);
  CFStringRef v5 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationDynamicLanguageModelEnabledKey[0]);
  *(unsigned char *)(a1 + 5) = sub_2161E4650(v5, 1);
  CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationUseSpecialSymbolKey[0]);
  *(unsigned char *)(a1 + 6) = sub_2161E4650(v6, 0);
  CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationSyncLearningDataKey[0]);
  *(unsigned char *)(a1 + 7) = sub_2161E4650(v7, 1);
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationLiteModeKey[0]);
  *(unsigned char *)(a1 + 8) = sub_2161E4650(v8, 0);
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationEnableABTestingKey[0]);
  *(unsigned char *)(a1 + 9) = sub_2161E4650(v9, 0);
  CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationEnableUnilmKey[0]);
  *(unsigned char *)(a1 + 1sub_216195244(&a9, 0) = sub_2161E4650(v10, 0);
  CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationUseMontrealLanguageModelKey[0]);
  *(unsigned char *)(a1 + 11) = sub_2161E4650(v11, 0);
  CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomSystemDictionaryDirectoryKey[0]);
  *(void *)(a1 + 16) = sub_2161E4738(v12);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomStaticLanguageModelBundleKey[0]);
  *(void *)(a1 + 4sub_216195244(&a9, 0) = sub_2161E4738(v13);
  CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomStaticDialectLanguageModelBundleKey[0]);
  CFURLRef v15 = sub_2161E4738(v14);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = v15;
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t valuePtr = 0;
  CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(theDict, kMecabraCreationInputMethodTypeKey[0]);
  if (v16)
  {
    CFNumberGetValue(v16, kCFNumberCFIndexType, &valuePtr);
    *(_DWORD *)a1 = valuePtr;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    *(_WORD *)(a1 + 4) = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 4))
    {
      CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomLearningDictionaryDirectoryKey[0]);
      CFURLRef v18 = sub_2161E4738(v17);
      sub_21617DB94((const void **)(a1 + 24), v18);
      *(unsigned char *)(a1 + 4) = *(void *)(a1 + 24) != 0;
    }
    if (*(unsigned char *)(a1 + 5))
    {
      CFStringRef v19 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomDynamicLanguageModelDirectoryKey[0]);
      CFURLRef v20 = sub_2161E47D8(v19);
      sub_21617DB94((const void **)(a1 + 56), v20);
    }
  }
  uint64_t v21 = CFDictionaryGetValue(theDict, kMecabraCreationCustomAdditionalDictionaryDirectoriesKey[0]);
  if (v21) {
    sub_2161AC6F8((const void **)(a1 + 32), v21);
  }
  double v22 = CFDictionaryGetValue(theDict, kMecabraCreationSecondaryLocaleKey[0]);
  if (v22) {
    sub_216195954((const void **)(a1 + 64), v22);
  }
  CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(theDict, kMecabraCreationWubixingStandardKey[0]);
  if (v23)
  {
    CFNumberGetValue(v23, kCFNumberCFIndexType, &valuePtr);
    *(_DWORD *)(a1 + 72) = valuePtr;
  }
  return a1;
}

void sub_216357728(_Unwind_Exception *a1)
{
  sub_2161868BC(v6, 0);
  sub_21617DB94(v5, 0);
  sub_21617DB94((const void **)(v1 + 48), 0);
  sub_21617DB94(v2 + 3, 0);
  sub_216195B94(v4, 0);
  sub_21617DB94(v3, 0);
  sub_21617DB94(v2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2163577A8(uint64_t a1, const __CFString *a2)
{
  *(void *)a1 = CFLocaleCreate(0, a2);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  CFStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F51318], a2);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F51310], (const void *)*MEMORY[0x263EFFB40]);
  CFStringRef v5 = (const void *)LXLexiconCreate();
  sub_2161FBBAC((const void **)(a1 + 8), v5);
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  sub_2161FBBAC((const void **)(a1 + 8), 0);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return a1;
}

void sub_216357970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2161DFB5C((const void **)va, 0);
  uint64_t v5 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
  }
  sub_2161FBBAC(v3, 0);
  sub_2161BE090((const void **)v2, 0);
  _Unwind_Resume(a1);
}

const void ***sub_2163579E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t result = *(const void ****)(a1 + 16);
  if (result)
  {
    v6[0] = &unk_26C6F6CF0;
    v6[1] = a1;
    void v6[2] = a4;
    v6[3] = v6;
    sub_216359474(result, a2, (uint64_t)v6, 0, a3);
    return (const void ***)sub_21635ACA8(v6);
  }
  return result;
}

void sub_216357A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21635ACA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

const void ***sub_216357A90(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t result = *(const void ****)(a1 + 16);
  if (result)
  {
    v7[0] = &unk_26C6F6DF0;
    v7[1] = a1;
    void v7[2] = a4;
    v7[3] = v7;
    sub_216357B34(result, a2, a3, (uint64_t)v7, a5);
    return (const void ***)sub_21635ACA8(v7);
  }
  return result;
}

void sub_216357B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21635ACA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216357B34(const void ***a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  void v6[4] = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C6F6D70;
  v6[1] = a4;
  v6[3] = v6;
  sub_21635A4F0(a1, a2, a3, (uint64_t)v6, a5);
  return sub_21635A46C(v6);
}

void sub_216357BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21635A46C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216357BCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = *(unsigned int (****)(void, uint64_t, uint64_t, int *))(a1 + 16);
  if (!v4) {
    return 0;
  }
  int v12 = 0;
  BOOL v6 = 0;
  if ((**v4)(v4, a2, 2 * a3, &v12))
  {
    uint64_t v7 = LXLexiconCopyEntryForTokenID();
    BOOL v6 = v7 != 0;
    if (v7)
    {
      CFStringRef v8 = (const void *)v7;
      unsigned int MetaFlags = LXEntryGetMetaFlags();
      LXEntryGetProbability();
      *a4 = MetaFlags;
      a4[1] = v10;
      CFRelease(v8);
    }
  }
  return v6;
}

void sub_216357C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_216357CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(const void ***__return_ptr))(*(void *)a1 + 24))(&v12);
  (*(void (**)(const void ***__return_ptr, uint64_t, const void **, uint64_t, uint64_t))(*(void *)a1 + 40))(&v11, a1, v12, a2, a3);
  CFStringRef v8 = v11;
  CFStringRef v11 = 0;
  sub_216358A50(&v12, v8);
  sub_216358A50(&v11, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, const void **, uint64_t))(*(void *)a1 + 48))(a1, v12, a4);
  sub_216358A50(&v12, 0);
  return v9;
}

void sub_216357DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216358A50((const void ***)va, 0);
  _Unwind_Resume(a1);
}

const void ***sub_216357DC4(const void ***result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 && (a3 & 1) == 0)
  {
    uint64_t v7 = result;
    char v13 = 0;
    ((void (*)(const void ***__return_ptr))(*result)[3])(&v12);
    int v11 = 0;
    if (a3)
    {
      unint64_t v8 = 0;
      do
      {
        ((void (*)(const void ***__return_ptr, const void ***, const void **, unint64_t, uint64_t))(*v7)[5])(&v10, v7, v12, a2 + v8, 2);
        uint64_t v9 = v10;
        uint64_t v10 = 0;
        sub_216358A50(&v12, v9);
        sub_216358A50(&v10, 0);
        if ((((uint64_t (*)(const void ***, const void **))(*v7)[4])(v7, v12) & 1) == 0) {
          break;
        }
        if (((unsigned int (*)(const void ***, const void **, int *))(*v7)[6])(v7, v12, &v11))
        {
          sub_216358AB4(*(void *)(a4 + 24), (uint64_t)&v11, a2, v8 + 2);
          if (v13) {
            break;
          }
        }
        unint64_t v8 = (int)v8 + 2;
      }
      while (v8 < a3);
    }
    return sub_216358A50(&v12, 0);
  }
  return result;
}

void sub_216357F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216358A50((const void ***)va, 0);
  _Unwind_Resume(a1);
}

const void ***sub_216357F58(const void ***result, void *a2, size_t a3, const void *a4, uint64_t a5)
{
  v16[4] = *(const void ***)MEMORY[0x263EF8340];
  if (a2 && (a3 & 1) == 0)
  {
    uint64_t v9 = result;
    ((void (*)(const void ***__return_ptr))(*result)[3])(&v15);
    ((void (*)(const void ***__return_ptr, const void ***, const void **, void *, size_t))(*v9)[5])(v16, v9, v15, a2, a3);
    uint64_t v10 = v16[0];
    v16[0] = 0;
    sub_216358A50(&v15, v10);
    sub_216358A50(v16, 0);
    if (((uint64_t (*)(const void ***, const void **))(*v9)[4])(v9, v15))
    {
      sub_21612F5FC(__p, a2, a3);
      int v11 = v15;
      int v12 = (const void **)operator new(0x28uLL);
      char *v12 = &unk_26C6F6930;
      v12[1] = __p;
      v12[2] = a2;
      v12[3] = (const void *)a3;
      void v12[4] = a4;
      void v16[3] = v12;
      ((void (*)(const void ***, const void **, const void ***, uint64_t))(*v9)[7])(v9, v11, v16, a5);
      sub_216358CC4(v16);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    return sub_216358A50(&v15, 0);
  }
  return result;
}

void sub_216358120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void **a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_216358A50(&a16, 0);
  _Unwind_Resume(a1);
}

void sub_216358170()
{
}

void sub_2163581C8(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

BOOL sub_2163581EC(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

void sub_2163581FC(int a1, int a2, UniChar *chars, unint64_t a4)
{
  if (LXCursorCreateByAdvancing()) {
    operator new();
  }
  operator new();
}

void sub_2163582B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

BOOL sub_2163582E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1)) {
    return 0;
  }
  uint64_t Entry = LXCursorCopyFirstEntry();
  if (!Entry) {
    return 0;
  }
  uint64_t v5 = (const void *)Entry;
  int TokenID = LXEntryGetTokenID();
  *a3 = TokenID;
  BOOL v7 = TokenID != 0;
  CFRelease(v5);
  return v7;
}

void sub_216358374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21628BB80((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_21635838C(uint64_t a1, const void **a2, uint64_t a3, unsigned int a4)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    uint64_t v56 = a3;
    CFStringRef v80 = (CFStringRef)LXCursorCopyTraversedCharacters();
    CFStringRef cf = v80;
    CFIndex Length = CFStringGetLength(v80);
    long long v78 = 0uLL;
    v79[0] = 0;
    BOOL v7 = *a2;
    unint64_t v64 = (void (*)(uint64_t))v79;
    unint64_t v8 = (const void **)sub_21620DECC(1uLL);
    uint64_t v10 = v9;
    *unint64_t v8 = 0;
    v8[1] = 0;
    sub_216359040(v8, v7);
    int v11 = (void *)*((void *)&v78 + 1);
    int v12 = (void *)v78;
    if (*((void *)&v78 + 1) == (void)v78)
    {
      int64x2_t v15 = vdupq_n_s64(*((unint64_t *)&v78 + 1));
      char v13 = v8;
    }
    else
    {
      char v13 = v8;
      do
      {
        char v14 = (const void *)*(v11 - 2);
        v11 -= 2;
        *int v11 = 0;
        *(v13 - 2) = v14;
        v13 -= 2;
        v13[1] = (const void *)v11[1];
      }
      while (v11 != v12);
      int64x2_t v15 = (int64x2_t)v78;
    }
    *(void *)&long long v78 = v13;
    *((void *)&v78 + 1) = v8 + 2;
    int64x2_t v62 = v15;
    CFNumberRef v16 = (__n128 (*)(void *, uint64_t))v79[0];
    v79[0] = &v8[2 * v10];
    uint64_t v63 = v16;
    uint64_t v61 = (void **)v15.i64[0];
    sub_2163590A0((uint64_t)&v61);
    *((void *)&v78 + 1) = v8 + 2;
    sub_2163590F4(v78, (uint64_t)(v8 + 2), (uint64_t)((uint64_t)v8 - v78 + 16) >> 4);
    uint64_t v74 = 0;
    uint64_t v75 = &v74;
    uint64_t v76 = 0x2000000000;
    char v77 = 0;
    uint64_t v17 = a3;
    if ((void)v78 != *((void *)&v78 + 1))
    {
      uint64_t v59 = MEMORY[0x263EF8330];
      CFIndex v57 = a4;
      unsigned int v55 = a4;
      do
      {
        uint64_t v67 = v59;
        uint64_t v68 = 0x40000000;
        unint64_t v69 = sub_216358D48;
        unint64_t v70 = &unk_264267418;
        CFIndex v72 = Length;
        uint64_t v73 = v17;
        uint64_t v71 = &v74;
        LXCursorEnumerateEntries();
        if (*((unsigned char *)v75 + 24)) {
          break;
        }
        CFStringRef v18 = (const __CFString *)LXCursorCopyTraversedCharacters();
        CFStringRef v66 = v18;
        CFIndex v19 = CFStringGetLength(v18);
        uint64_t v61 = 0;
        v62.i64[0] = (uint64_t)&v61;
        v62.i64[1] = 0x4002000000;
        uint64_t v63 = sub_216358E98;
        unint64_t v64 = sub_216358EBC;
        memset(v65, 0, sizeof(v65));
        if ((a4 & 0x80000000) != 0 || v19 - Length < v57) {
          LXCursorEnumerateChildren();
        }
        long long v20 = v78;
        unint64_t v21 = *((void *)&v78 + 1) - v78;
        if ((uint64_t)(*((void *)&v78 + 1) - v78) >= 17)
        {
          uint64_t v22 = 0;
          uint64_t v23 = v21 >> 4;
          uint64_t v58 = *(const void **)v78;
          *(void *)long long v78 = 0;
          uint64_t v24 = *(void *)(v20 + 8);
          BOOL v25 = __OFSUB__(v21 >> 4, 2);
          uint64_t v26 = (v21 >> 4) - 2;
          if (v26 < 0 != v25) {
            uint64_t v26 = v23 - 1;
          }
          uint64_t v27 = v26 >> 1;
          uint64_t v28 = v20;
          do
          {
            uint64_t v29 = v28;
            v28 += 16 * (v22 + 1);
            uint64_t v30 = 2 * v22;
            uint64_t v22 = (2 * v22) | 1;
            uint64_t v31 = v30 + 2;
            if (v31 < v23 && *(double *)(v28 + 8) < *(double *)(v28 + 24))
            {
              v28 += 16;
              uint64_t v22 = v31;
            }
            unint64_t v32 = *(const void **)v28;
            *(void *)uint64_t v28 = 0;
            sub_2161A108C((const void **)v29, v32);
            *(void *)(v29 + 8) = *(void *)(v28 + 8);
          }
          while (v22 <= v27);
          if (*((void *)&v20 + 1) - 16 == v28)
          {
            sub_2161A108C((const void **)v28, v58);
            *(void *)(v28 + 8) = v24;
          }
          else
          {
            BOOL v33 = *(const void **)(*((void *)&v20 + 1) - 16);
            *(void *)(*((void *)&v20 + 1) - 16) = 0;
            sub_2161A108C((const void **)v28, v33);
            *(void *)(v28 + 8) = *(void *)(*((void *)&v20 + 1) - 8);
            sub_2161A108C((const void **)(*((void *)&v20 + 1) - 16), v58);
            *(void *)(*((void *)&v20 + 1) - 8) = v24;
            sub_2163590F4(v20, v28 + 16, (v28 + 16 - (uint64_t)v20) >> 4);
          }
          a4 = v55;
          uint64_t v17 = v56;
        }
        uint64_t v34 = *((void *)&v78 + 1) - 16;
        sub_2161A108C((const void **)(*((void *)&v78 + 1) - 16), 0);
        *((void *)&v78 + 1) = v34;
        uint64_t v35 = *(uint64_t **)(v62.i64[0] + 40);
        for (unint64_t i = *(uint64_t **)(v62.i64[0] + 48); v35 != i; v35 += 2)
        {
          std::locale v37 = (void *)*((void *)&v78 + 1);
          if (*((void *)&v78 + 1) >= v79[0])
          {
            uint64_t v40 = (uint64_t)(*((void *)&v78 + 1) - v78) >> 4;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 60) {
              sub_21610CB04();
            }
            uint64_t v42 = v79[0] - v78;
            if ((uint64_t)(v79[0] - v78) >> 3 > v41) {
              unint64_t v41 = v42 >> 3;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            unint64_t v84 = v79;
            uint64_t v44 = (char *)sub_21620DECC(v43);
            unsigned int v46 = &v44[16 * v40];
            uint64_t v47 = *v35;
            *uint64_t v35 = 0;
            *(void *)unsigned int v46 = v47;
            *((void *)v46 + 1) = v35[1];
            uint64_t v48 = (void *)*((void *)&v78 + 1);
            unint64_t v49 = (void *)v78;
            if (*((void *)&v78 + 1) == (void)v78)
            {
              int64x2_t v52 = vdupq_n_s64(*((unint64_t *)&v78 + 1));
              uint64_t v50 = &v44[16 * v40];
            }
            else
            {
              uint64_t v50 = &v44[16 * v40];
              do
              {
                uint64_t v51 = *(v48 - 2);
                v48 -= 2;
                *uint64_t v48 = 0;
                *((void *)v50 - 2) = v51;
                v50 -= 16;
                *((void *)v50 + 1) = v48[1];
              }
              while (v48 != v49);
              int64x2_t v52 = (int64x2_t)v78;
            }
            uint64_t v39 = (uint64_t)(v46 + 16);
            *(void *)&long long v78 = v50;
            *((void *)&v78 + 1) = v46 + 16;
            int64x2_t v82 = v52;
            uint64_t v53 = v79[0];
            v79[0] = &v44[16 * v45];
            uint64_t v83 = v53;
            uint64_t v81 = (void **)v52.i64[0];
            sub_2163590A0((uint64_t)&v81);
          }
          else
          {
            uint64_t v38 = *v35;
            *uint64_t v35 = 0;
            *std::locale v37 = v38;
            v37[1] = v35[1];
            uint64_t v39 = (uint64_t)(v37 + 2);
          }
          *((void *)&v78 + 1) = v39;
          sub_2163590F4(v78, v39, (v39 - (uint64_t)v78) >> 4);
        }
        _Block_object_dispose(&v61, 8);
        uint64_t v81 = (void **)v65;
        sub_2163591AC(&v81);
        if (v18) {
          CFRelease(v18);
        }
      }
      while ((void)v78 != *((void *)&v78 + 1));
    }
    _Block_object_dispose(&v74, 8);
    uint64_t v61 = (void **)&v78;
    sub_2163591AC(&v61);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_216358914(_Unwind_Exception *a1)
{
  *(void *)(v1 - 24sub_2161A108C(&a9, 0) = v1 - 208;
  sub_2163591AC((void ***)(v1 - 240));
  sub_2161868BC((const void **)(v1 - 176), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2163589A0(uint64_t a1)
{
  *(void *)a1 = &unk_26C6F68A8;
  sub_2161FBBAC((const void **)(a1 + 8), 0);
  return a1;
}

void sub_2163589E8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6F68A8;
  sub_2161FBBAC((const void **)(a1 + 8), 0);

  JUMPOUT(0x2166CA800);
}

const void ***sub_216358A50(const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  std::logic_error *result = a2;
  if (v2)
  {
    sub_2161A108C(v2, 0);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_216358AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v6, &v5);
}

void sub_216358B0C()
{
}

__n128 sub_216358B20(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C6F6930;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_216358B74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6930;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216358BAC(void *a1, uint64_t a2, const void **a3, size_t *a4)
{
  size_t v6 = *a4;
  uint64_t v7 = a1[3];
  unint64_t v8 = v7 + *a4;
  uint64_t v9 = (std::string *)a1[1];
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t size = v9->__r_.__value_.__l.__size_;
  }
  else {
    unint64_t size = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  }
  int v11 = *a3;
  if (size < v8)
  {
    std::string::resize(v9, v7 + *a4, 0);
    uint64_t v9 = (std::string *)a1[1];
    uint64_t v7 = a1[3];
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  memcpy((char *)v9 + v7, v11, v6);
  uint64_t v12 = a1[1];
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v12 = *(void *)v12;
  }
  uint64_t v13 = *(void *)(a1[4] + 24);

  return sub_216358AB4(v13, a2, v12, v8);
}

uint64_t sub_216358C78(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6990)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216358CB8()
{
  return &unk_26C6F6990;
}

void *sub_216358CC4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216358D48(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)LXEntryCopyString();
  CFStringRef v3 = v2;
  if (CFStringGetLength(v2) >= *(void *)(a1 + 40)) {
    operator new[]();
  }
  if (v2) {
    CFRelease(v2);
  }
}

void sub_216358E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166CA7C0](v2, 0x1000C8077774924);
  sub_2161868BC((const void **)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_216358E98(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_2161A108C(&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_216358EBC(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_2163591AC(&v1);
}

void sub_216358EE8(uint64_t a1, const void *a2)
{
  double v4 = *(double *)(a1 + 40);
  LXCursorConditionalProbability();
  double v6 = v4 + v5;
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 8);
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  if (v8 >= v9)
  {
    uint64_t v11 = v7[5];
    uint64_t v12 = (uint64_t)(v8 - v11) >> 4;
    if ((unint64_t)(v12 + 1) >> 60) {
      sub_21610CB04();
    }
    uint64_t v13 = v9 - v11;
    uint64_t v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v29 = v7 + 7;
    CFNumberRef v16 = (char *)sub_21620DECC(v15);
    uint64_t v18 = v17;
    CFIndex v19 = (double *)&v16[16 * v12];
    *CFIndex v19 = 0.0;
    v19[1] = v6;
    sub_216359040((const void **)v19, a2);
    unint64_t v21 = (double *)v7[5];
    long long v20 = (double *)v7[6];
    if (v20 == v21)
    {
      int64x2_t v24 = vdupq_n_s64((unint64_t)v20);
      uint64_t v22 = v19;
    }
    else
    {
      uint64_t v22 = v19;
      do
      {
        uint64_t v23 = *((void *)v20 - 2);
        v20 -= 2;
        *long long v20 = 0.0;
        *((void *)v22 - 2) = v23;
        v22 -= 2;
        v22[1] = v20[1];
      }
      while (v20 != v21);
      int64x2_t v24 = *(int64x2_t *)(v7 + 5);
    }
    uint64_t v10 = (char *)(v19 + 2);
    void v7[5] = v22;
    v7[6] = v19 + 2;
    int64x2_t v27 = v24;
    uint64_t v25 = v7[7];
    v7[7] = &v16[16 * v18];
    uint64_t v28 = v25;
    uint64_t v26 = v24.i64[0];
    sub_2163590A0((uint64_t)&v26);
  }
  else
  {
    *(void *)unint64_t v8 = 0;
    *(double *)(v8 + 8) = v6;
    sub_216359040((const void **)v8, a2);
    uint64_t v10 = (char *)(v8 + 16);
  }
  v7[6] = v10;
}

void sub_216359040(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_2161A108C(a1, cf);
  }
}

uint64_t sub_2163590A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_2161A108C((const void **)(i - 16), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2163590F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = v3 >> 1;
    double v6 = *(double *)(a2 - 8);
    if (*(double *)(a1 + 16 * (v3 >> 1) + 8) < v6)
    {
      uint64_t v7 = a2 - 16;
      unint64_t v8 = *(const void **)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      do
      {
        uint64_t v9 = v7;
        uint64_t v7 = a1 + 16 * v5;
        uint64_t v10 = *(const void **)v7;
        *(void *)uint64_t v7 = 0;
        sub_2161A108C((const void **)v9, v10);
        *(void *)(v9 + 8) = *(void *)(v7 + 8);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
      }
      while (*(double *)(a1 + 16 * v5 + 8) < v6);
      sub_2161A108C((const void **)v7, v8);
      *(double *)(v7 + 8) = v6;
    }
  }
}

void sub_2163591AC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    double v4 = (const void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_2161A108C(v4, 0);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216359234(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 16))(*(void *)(a1 + 16));
}

uint64_t sub_21635925C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 8))();
}

uint64_t sub_216359284(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t sub_2163592AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t sub_2163592D4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6F69B0;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  *(void *)a1 = &unk_26C6F68A8;
  sub_2161FBBAC((const void **)(a1 + 8), 0);
  return a1;
}

void sub_21635936C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6F69B0;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  *(void *)a1 = &unk_26C6F68A8;
  sub_2161FBBAC((const void **)(a1 + 8), 0);

  JUMPOUT(0x2166CA800);
}

void *sub_216359424(const void ***a1, uint64_t a2, uint64_t a3)
{
  return sub_216359474(a1, a2, a3, 1u, 0);
}

void *sub_216359430(const void ***a1, uint64_t a2, uint64_t a3)
{
  return sub_21635950C(a1, a2, a3, 1u, 0);
}

void *sub_21635943C(const void ***a1, uint64_t a2, uint64_t a3)
{
  return sub_216359474(a1, a2, a3, 0, 0);
}

void *sub_216359448(const void ***a1, uint64_t a2, uint64_t a3)
{
  return sub_21635950C(a1, a2, a3, 0, 0);
}

void *sub_216359454(const void ***a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_216357B34(a1, a2, 0, a3, a4);
}

void *sub_216359464(const void ***a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_21635A4F0(a1, a2, 0, a3, a4);
}

void *sub_216359474(const void ***a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  void v6[4] = *MEMORY[0x263EF8340];
  v6[0] = &unk_26C6F6B70;
  v6[1] = a3;
  v6[3] = v6;
  sub_21635950C(a1, a2, (uint64_t)v6, a4, a5);
  return sub_21635A46C(v6);
}

void sub_2163594F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21635A46C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21635950C(const void ***a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v10 = off_26B4ABF30;
  if ((*(unsigned char *)off_26B4ABF30(&off_26B4ABF30) & 1) == 0)
  {
    uint64_t v18 = (void *)off_26B4ABF18(&off_26B4ABF18);
    sub_216210E8C(v18, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210850, v18);
    *(unsigned char *)v10(&off_26B4ABF3sub_2161A108C(&a9, 0) = 1;
  }
  uint64_t v11 = off_26B4ABF60;
  if ((*(unsigned char *)off_26B4ABF60(&off_26B4ABF60) & 1) == 0)
  {
    CFIndex v19 = (void *)off_26B4ABF48(&off_26B4ABF48);
    sub_216210F04(v19, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210884, v19);
    *(unsigned char *)v11(&off_26B4ABF6sub_2161A108C(&a9, 0) = 1;
  }
  char v21 = 0;
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = &unk_26C6F6AF0;
  v12[1] = a1;
  v12[2] = a3;
  *((_DWORD *)v12 + 6) = a5;
  v22[3] = v12;
  ((void (*)(const void ***__return_ptr, const void ***))(*a1)[3])(&v20, a1);
  off_26B4ABF18(&off_26B4ABF18);
  uint64_t v13 = (uint64_t *)off_26B4ABF48(&off_26B4ABF48);
  sub_216359770(a1, a2, (uint64_t)v22, v14, a4, 0, 0, &v21, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  sub_216358A50(&v20, 0);
  return sub_21635A298(v22);
}

void sub_216359748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, const void **);
  uint64_t v13 = va_arg(va1, void);
  sub_216358A50((const void ***)va, 0);
  sub_21635A298((uint64_t *)va1);
  _Unwind_Resume(a1);
}

const void ***sub_216359770(const void ***result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned __int8 a7, unsigned char *a8, float a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  uint64_t v18 = a13;
  uint64_t v17 = a14;
  uint64_t v20 = a10;
  uint64_t v19 = a11;
  v58[4] = *MEMORY[0x263EF8340];
  unsigned __int8 v57 = a7;
  if (!*a8)
  {
    uint64_t v26 = result;
    if (((*((uint64_t (**)(const void **, uint64_t))*result[2] + 4))(result[2], a4) & 1) == 0) {
      __assert_rtn("ambiguousDfsTraverse", "AmbiguousTrieAdapter.hpp", 137, "m_trie->isValid(curCursor)");
    }
    unint64_t v27 = a12;
    uint64_t v48 = v26;
    if (a5)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) != v27) {
        goto LABEL_33;
      }
    }
    LODWORD(v56) = 0;
    if ((a7 & 1) != 0
      || (__n128 result = (const void ***)(*((uint64_t (**)(const void **, uint64_t, unint64_t *))*v26[2] + 6))(v26[2], a4, &v56), result))
    {
      __n128 result = (const void ***)sub_216359D28(*(void *)(a3 + 24), a4, v20, 2 * v19, v18, v17, v27, (uint64_t)a8, a9);
    }
    if (!*a8)
    {
LABEL_33:
      __n128 result = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
      if ((unint64_t)result > v27)
      {
        __n128 result = (const void ***)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 16))(a2, v27);
        int64x2_t v52 = result;
        unint64_t v56 = 0;
        if (result)
        {
          unint64_t v28 = 0;
          HIDWORD(v47) = a17;
          uint64_t v29 = a15;
          uint64_t v30 = a16;
          double v31 = a9;
          do
          {
            __n128 result = (const void ***)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 72))(a2, v29, v30, v27, v28);
            if (result)
            {
              double v55 = 0.0;
              double v55 = (*(double (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 32))(a2, v27, v56)+ v31;
              unint64_t v54 = 0;
              unint64_t v54 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 40))(a2, v27, v56)+ v27;
              __n128 result = (const void ***)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 48))(a2, v27, v56);
              BOOL v33 = result;
              uint64_t v34 = v32;
              unint64_t v35 = v54;
              if (v54 != v27 || (v47 & 0x100000000) == 0)
              {
                if (v32)
                {
                  (*((void (**)(const void ***__return_ptr))*v48[2] + 5))(&v53);
                  if ((*((unsigned int (**)(const void **, const void **))*v48[2] + 4))(v48[2], v53))
                  {
                    uint64_t v36 = a10;
                    uint64_t v37 = a11;
                    uint64_t v38 = 2 * a11;
                    uint64_t v39 = v34;
                    do
                    {
                      __int16 v40 = *(_WORD *)v33;
                      BOOL v33 = (const void ***)((char *)v33 + 2);
                      *(_WORD *)(v36 + v38) = v40;
                      v38 += 2;
                      --v39;
                    }
                    while (v39);
                    uint64_t v41 = a13;
                    if (a13)
                    {
                      *(void *)(a13 + 8 * a14) = v56;
                      uint64_t v37 = a11;
                    }
                    float v42 = v55;
                    LOBYTE(v47) = v35 == v27;
                    sub_216359770(v48, a2, a3, v53, a5, a6, v57, a8, v42, v36, v37 + v34, v54, v41, a14 + 1, v27, v56, v47);
                    if (*a8) {
                      return sub_216358A50(&v53, 0);
                    }
                  }
                  __n128 result = sub_216358A50(&v53, 0);
                  if (a6)
                  {
                    unint64_t v43 = (const void ***)v54;
                    __n128 result = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
                    if (v43 == result)
                    {
                      __n128 result = (const void ***)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 56))(a2, v27, v56);
                      if (result)
                      {
                        unint64_t v44 = v56;
                        uint64_t v45 = operator new(0x68uLL);
                        *uint64_t v45 = &unk_26C6F6A70;
                        v45[1] = v48;
                        void v45[2] = a4;
                        v45[3] = &a10;
                        void v45[4] = &a11;
                        v45[5] = &a13;
                        v45[6] = &a14;
                        v45[7] = &v56;
                        v45[8] = &v57;
                        v45[9] = a3;
                        v45[10] = &v55;
                        v45[11] = &v54;
                        v45[12] = a8;
                        v58[3] = v45;
                        (*(void (**)(uint64_t, unint64_t, unint64_t, void *))(*(void *)a2 + 64))(a2, v27, v44, v58);
                        __n128 result = (const void ***)sub_2162112FC(v58);
                      }
                    }
                  }
                }
                else
                {
                  float v46 = v55;
                  LOBYTE(v47) = v54 == v27;
                  __n128 result = (const void ***)sub_216359770(v48, a2, a3, a4, a5, a6, v57, a8, v46, a10, a11, v54, a13, a14, v29, v30, v47);
                }
              }
            }
            unint64_t v28 = v56 + 1;
            unint64_t v56 = v28;
          }
          while (v28 < (unint64_t)v52);
        }
      }
    }
  }
  return result;
}

void sub_216359CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

uint64_t sub_216359D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  float v15 = a9;
  uint64_t v13 = a4;
  uint64_t v14 = a3;
  uint64_t v11 = a6;
  uint64_t v12 = a5;
  uint64_t v10 = a7;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 48))(a1, a2, &v15, &v14, &v13, &v12, &v11, &v10, a8);
}

void sub_216359DA0()
{
}

__n128 sub_216359DB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &unk_26C6F6A70;
  *(_OWORD *)(v2 + 4sub_2161A108C(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_216359E28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6A70;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 4sub_2161A108C(&a9, 0) = result;
  return result;
}

const void ***sub_216359E80(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  long long v5 = *(__int16 **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  (*(void (**)(const void ***__return_ptr))(**(void **)(v7 + 16) + 40))(&v15);
  if (!(*(unsigned int (**)(void, const void **))(**(void **)(v7 + 16) + 32))(*(void *)(v7 + 16), v15))return sub_216358A50(&v15, 0); {
  if (v6)
  }
  {
    unint64_t v8 = (_WORD *)(**(void **)(a1 + 24) + 2 * **(void **)(a1 + 32));
    uint64_t v9 = v6;
    do
    {
      __int16 v10 = *v5++;
      *v8++ = v10;
      --v9;
    }
    while (v9);
  }
  uint64_t v11 = **(void **)(a1 + 40);
  if (v11) {
    *(void *)(v11 + 8 * **(void **)(a1 + 48)) = **(void **)(a1 + 56);
  }
  int v14 = 0;
  if (!**(unsigned char **)(a1 + 64))
  {
    if (!(*(unsigned int (**)(void, const void **, int *))(**(void **)(v7 + 16) + 48))(*(void *)(v7 + 16), v15, &v14))goto LABEL_11; {
    uint64_t v11 = **(void **)(a1 + 40);
    }
  }
  float v12 = **(double **)(a1 + 80);
  sub_216359D28(*(void *)(*(void *)(a1 + 72) + 24), (uint64_t)v15, **(void **)(a1 + 24), 2 * (**(void **)(a1 + 32) + v6), v11, **(void **)(a1 + 48) + 1, **(void **)(a1 + 88), *(void *)(a1 + 96), v12);
LABEL_11:
  if (**(unsigned char **)(a1 + 96)) {
    *a3 = 1;
  }
  return sub_216358A50(&v15, 0);
}

void sub_21635A018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216358A50((const void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21635A034(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6AD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635A074()
{
  return &unk_26C6F6AD0;
}

void sub_21635A084()
{
}

__n128 sub_21635A098(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_26C6F6AF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21635A0EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6AF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21635A124(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v9 = *a3;
  uint64_t v10 = *a4;
  uint64_t v11 = *a5;
  uint64_t v12 = *a6;
  uint64_t v13 = *a7;
  uint64_t v14 = *a8;
  uint64_t v15 = *(void *)(a1 + 8);
  v17[0] = 0;
  v17[1] = v9;
  (*(void (**)(void, uint64_t, _DWORD *))(**(void **)(v15 + 16) + 48))(*(void *)(v15 + 16), a2, v17);
  return sub_21635A230(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v17, v10, v11, v12, v13, v14 - *(int *)(a1 + 24));
}

uint64_t sub_21635A1E4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6B50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635A224()
{
  return &unk_26C6F6B50;
}

uint64_t sub_21635A230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v8 = a7;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v12, &v11, &v10, &v9, &v8);
}

void *sub_21635A298(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21635A320()
{
}

void *sub_21635A334(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6F6B70;
  result[1] = v3;
  return result;
}

uint64_t sub_21635A37C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F6B70;
  a2[1] = v2;
  return result;
}

uint64_t sub_21635A3A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_21635A410(*(void *)(*(void *)(a1 + 8) + 24), a2, *a3, *a4, *a7);
}

uint64_t sub_21635A3C4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6BD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635A404()
{
  return &unk_26C6F6BD0;
}

uint64_t sub_21635A410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a3;
  uint64_t v6 = a5;
  uint64_t v7 = a4;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v8, &v7, &v6);
}

void *sub_21635A46C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_21635A4F0(const void ***a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v10 = off_26B4ABF90;
  if ((*(unsigned char *)off_26B4ABF90(&off_26B4ABF90) & 1) == 0)
  {
    uint64_t v18 = (void *)off_26B4ABF78(&off_26B4ABF78);
    sub_216210E8C(v18, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210850, v18);
    *(unsigned char *)v10(&off_26B4ABF9sub_2161A108C(&a9, 0) = 1;
  }
  uint64_t v11 = off_26B4ABFC0;
  if ((*(unsigned char *)off_26B4ABFC0(&off_26B4ABFC0) & 1) == 0)
  {
    uint64_t v19 = (void *)off_26B4ABFA8(&off_26B4ABFA8);
    sub_216210F04(v19, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_216210884, v19);
    *(unsigned char *)v11(&off_26B4ABFCsub_2161A108C(&a9, 0) = 1;
  }
  char v21 = 0;
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = &unk_26C6F6BF0;
  v12[1] = a1;
  v12[2] = a4;
  *((_DWORD *)v12 + 6) = a3;
  *((_DWORD *)v12 + 7) = a5;
  v22[3] = v12;
  ((void (*)(const void ***__return_ptr, const void ***))(*a1)[3])(&v20, a1);
  off_26B4ABF78(&off_26B4ABF78);
  uint64_t v13 = (uint64_t *)off_26B4ABFA8(&off_26B4ABFA8);
  sub_216359770(a1, a2, (uint64_t)v22, v14, 1u, 1u, 1u, &v21, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  sub_216358A50(&v20, 0);
  return sub_21635A298(v22);
}

void sub_21635A72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, const void **);
  uint64_t v13 = va_arg(va1, void);
  sub_216358A50((const void ***)va, 0);
  sub_21635A298((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_21635A758()
{
}

__n128 sub_21635A76C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C6F6BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21635A7C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21635A7F8(uint64_t a1, uint64_t a2, int *a3, const void **a4, size_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = *a4;
  size_t v12 = *a5;
  uint64_t v13 = *a6;
  uint64_t v14 = *a7;
  uint64_t v15 = *a8;
  int v27 = *a3;
  uint64_t v25 = v13;
  size_t v26 = v12;
  uint64_t v23 = v15;
  uint64_t v24 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (((*(uint64_t (**)(void))(**(void **)(v16 + 16) + 32))(*(void *)(v16 + 16)) & 1) == 0) {
    __assert_rtn("operator()", "AmbiguousTrieAdapter.hpp", 44, "m_trie->isValid(cursor)");
  }
  std::string __p = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  sub_216211DEC(&__p, v11, (uint64_t)v11 + v12, v12);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(v16 + 16);
  uint64_t v19 = operator new(0x50uLL);
  *uint64_t v19 = &unk_26C6F6C60;
  v19[1] = &v26;
  v19[2] = &__p;
  void v19[3] = v17;
  v19[4] = &v27;
  v19[5] = &v25;
  v19[6] = &v24;
  v19[7] = &v23;
  v19[8] = a1 + 24;
  v19[9] = a9;
  void v28[3] = v19;
  (*(void (**)(uint64_t, uint64_t, void *, void))(*(void *)v18 + 56))(v18, a2, v28, *(unsigned int *)(a1 + 28));
  sub_216358CC4(v28);
  if (__p)
  {
    char v21 = __p;
    operator delete(__p);
  }
}

void sub_21635A99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21635A9D0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6CD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635AA10()
{
  return &unk_26C6F6CD0;
}

void sub_21635AA20()
{
}

__n128 sub_21635AA34(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_26C6F6C60;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4sub_2161A108C(&a9, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21635AAA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6C60;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 4sub_2161A108C(&a9, 0) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_21635AAF0(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v11 = *(void **)(a1 + 8);
  uint64_t v10 = *(unint64_t **)(a1 + 16);
  unint64_t v12 = *v11 + *a4;
  unint64_t v13 = v10[1] - *v10;
  if (v12 > v13) {
    sub_216179360(v10, v12 - v13);
  }
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
      *(unsigned char *)(**(void **)(a1 + 16) + **(void **)(a1 + 8) + i) = *(unsigned char *)(v8 + i);
  }
  uint64_t v15 = *(uint64_t **)(a1 + 40);
  int v16 = **(_DWORD **)(a1 + 32);
  v18[0] = *a2;
  v18[1] = v16;
  uint64_t result = sub_21635A230(*(void *)(*(void *)(a1 + 24) + 24), (uint64_t)v18, **(void **)(a1 + 16), v12, *v15, **(void **)(a1 + 48), **(void **)(a1 + 56) - **(int **)(a1 + 64));
  **(unsigned char **)(a1 + 72) = (**(unsigned __int8 **)(a1 + 72) | *a5) != 0;
  return result;
}

uint64_t sub_21635ABEC(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6CC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635AC2C()
{
  return &unk_26C6F6CC0;
}

uint64_t sub_21635AC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v13[0] = a2;
  v13[1] = a3;
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v10 = a8;
  uint64_t v11 = a7;
  if (!a1) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 48))(a1, v13, v12, a6, &v11, &v10, a9);
}

void *sub_21635ACA8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21635AD30()
{
}

__n128 sub_21635AD44(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6F6CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21635AD90(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21635ADC0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = *a4;
  uint64_t v11 = LXLexiconCopyEntryForTokenID();
  if (v11)
  {
    unint64_t v12 = (const void *)v11;
    CFStringRef v13 = (const __CFString *)LXEntryCopyString();
    sub_2161E212C(v13, (UniChar **)&__p);
    unsigned int MetaFlags = LXEntryGetMetaFlags();
    LXEntryGetProbability();
    sub_21635AC38(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)__p, (v17 - (unsigned char *)__p) >> 1, MetaFlags, v15, a2, v9, v10, a6);
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
    if (v13) {
      CFRelease(v13);
    }
    CFRelease(v12);
  }
}

void sub_21635AEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v12) {
    CFRelease(v12);
  }
  CFRelease(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_21635AEF0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6D50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635AF30()
{
  return &unk_26C6F6D50;
}

void sub_21635AF40()
{
}

void *sub_21635AF54(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6F6D70;
  result[1] = v3;
  return result;
}

uint64_t sub_21635AF9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6F6D70;
  a2[1] = v2;
  return result;
}

uint64_t sub_21635AFC8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_21635A410(*(void *)(*(void *)(a1 + 8) + 24), a2, *a3, *a4, *a7);
}

uint64_t sub_21635AFE4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6DD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635B024()
{
  return &unk_26C6F6DD0;
}

void sub_21635B034()
{
}

__n128 sub_21635B048(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6F6DF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21635B094(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6F6DF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21635B0C4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = *a4;
  uint64_t v11 = LXLexiconCopyEntryForTokenID();
  if (v11)
  {
    unint64_t v12 = (const void *)v11;
    CFStringRef v13 = (const __CFString *)LXEntryCopyString();
    sub_2161E212C(v13, (UniChar **)&__p);
    unsigned int MetaFlags = LXEntryGetMetaFlags();
    LXEntryGetProbability();
    sub_21635AC38(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)__p, (v17 - (unsigned char *)__p) >> 1, MetaFlags, v15, a2, v9, v10, a6);
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
    if (v13) {
      CFRelease(v13);
    }
    CFRelease(v12);
  }
}

void sub_21635B1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v12) {
    CFRelease(v12);
  }
  CFRelease(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_21635B1F4(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6F6E50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635B234()
{
  return &unk_26C6F6E50;
}

void sub_21635B240(void *a1@<X8>)
{
  sub_2161E3AE8(@"en_US", &v7);
  uint64_t v2 = std::string::insert(&v7, 0, "EnglishLexicon_", 0xFuLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v6 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  v4[2] = sub_21635B3DC;
  v4[3] = &unk_264267438;
  v4[4] = @"en_US";
  if (qword_26797EEB0 != -1) {
    dispatch_once(&qword_26797EEB0, &unk_26C6CA200);
  }
  v7.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  v7.__r_.__value_.__l.__size_ = 0x40000000;
  v7.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_21635E6D4;
  uint64_t v8 = &unk_26427D228;
  uint64_t v10 = __p;
  uint64_t v11 = qword_26797EEA8;
  char v12 = 0;
  uint64_t v9 = v4;
  sub_21635DE74(a1, (char *)__p, (uint64_t)&v7);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21635B3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21635B3DC(uint64_t a1)
{
  CFStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F51318], *(const void **)(a1 + 32));
  operator new();
}

void sub_21635B478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x2166CA800](v2, 0x1060C404B74122BLL);
  sub_2161DFB5C((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_21635B4B0(void *a1@<X8>)
{
  sub_21610B834(v7, "en_US");
  std::operator+<char>();
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 1174405120;
  v2[2] = sub_21635B67C;
  v2[3] = &unk_26C6C9E70;
  if (SHIBYTE(v8) < 0)
  {
    sub_21610A674(&__p, v7[0], (unint64_t)v7[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v7;
    uint64_t v4 = v8;
  }
  if (qword_26797EEB0 != -1) {
    dispatch_once(&qword_26797EEB0, &unk_26C6CA200);
  }
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  void v9[2] = sub_21635E6D4;
  v9[3] = &unk_26427D228;
  v9[5] = v5;
  v9[6] = qword_26797EEA8;
  char v10 = 0;
  v9[4] = v2;
  sub_21635DE74(a1, (char *)v5, (uint64_t)v9);
  if (SHIBYTE(v4) < 0) {
    operator delete((void *)__p);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
}

void sub_21635B630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21635B67C(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  sub_21610B834(&v37, "/System/Library/LinguisticData/RequiredAssets_en.bundle/AssetData/");
  if ((v39 & 0x80u) == 0) {
    size_t v2 = v39;
  }
  else {
    size_t v2 = v38;
  }
  long long v3 = &v40;
  sub_21612A88C((uint64_t)&v40, v2 + 8);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v3 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if (v2)
  {
    if ((v39 & 0x80u) == 0) {
      uint64_t v4 = &v37;
    }
    else {
      uint64_t v4 = v37;
    }
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "Phrases-");
  long long v5 = (void *)(a1 + 32);
  int v6 = *(char *)(a1 + 55);
  if (v6 >= 0) {
    std::string v7 = (const std::string::value_type *)(a1 + 32);
  }
  else {
    std::string v7 = *(const std::string::value_type **)(a1 + 32);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    std::string::size_type v8 = *(void *)(a1 + 40);
  }
  uint64_t v9 = std::string::append(&v40, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v34, ".dat", 4uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v36 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if ((v39 & 0x80u) == 0) {
    size_t v13 = v39;
  }
  else {
    size_t v13 = v38;
  }
  uint64_t v14 = &v33;
  sub_21612A88C((uint64_t)&v33, v13 + 6);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v14 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if ((v39 & 0x80u) == 0) {
      uint64_t v15 = &v37;
    }
    else {
      uint64_t v15 = v37;
    }
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "Delta-");
  int v16 = *(char *)(a1 + 55);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)(a1 + 32);
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)(a1 + 32);
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    std::string::size_type v18 = *(void *)(a1 + 40);
  }
  uint64_t v19 = std::string::append(&v33, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  char v21 = std::string::append(&v40, ".dat", 4uLL);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v36 >= 0) {
    uint64_t v23 = __p;
  }
  else {
    uint64_t v23 = (void **)__p[0];
  }
  uint64_t v24 = sub_2161E1880((const char *)v23);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v25 = &v34;
  }
  else {
    uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  CFStringRef filePath = sub_2161E1880((const char *)v25);
  CFURLRef v26 = CFURLCreateWithFileSystemPath(0, v24, kCFURLPOSIXPathStyle, 1u);
  CFURLRef v27 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 1u);
  CFStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v26 && sub_2161E1A54(v26))
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F512F8], v24);
    if (v27 && sub_2161E1A54(v27))
    {
      CFArrayRef v29 = CFArrayCreate(0, (const void **)&filePath, 1, MEMORY[0x263EFFF70]);
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F51300], v29);
      if (v29) {
        CFRelease(v29);
      }
    }
    operator new();
  }
  uint64_t v30 = sub_2162D1CE4(0);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 55) < 0) {
      long long v5 = (void *)*v5;
    }
    LODWORD(v40.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_error_impl(&dword_2160F5000, v30, OS_LOG_TYPE_ERROR, "Failed to find data path for locale %s", (uint8_t *)&v40, 0xCu);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (filePath) {
    CFRelease(filePath);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  if ((char)v39 < 0) {
    operator delete(v37);
  }
  return 0;
}

void sub_21635BB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2) {
    sub_2160F7444(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21635BC8C(uint64_t a1, uint64_t a2)
{
  __n128 result = (void *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0) {
    return sub_21610A674(result, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  long long v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(void *)(a2 + 48);
  *(_OWORD *)__n128 result = v3;
  return result;
}

void sub_21635BCBC(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void sub_21635BCD0(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797E9F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797E9F0))
  {
    sub_21610B834(byte_26797EA10, "EnglishDynamicLexicon_en_US");
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26797EA10, &dword_2160F5000);
    __cxa_guard_release(&qword_26797E9F0);
  }
  if (qword_26797EEB0 != -1) {
    dispatch_once(&qword_26797EEB0, &unk_26C6CA200);
  }
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = sub_21635E6D4;
  v2[3] = &unk_26427D228;
  v2[5] = byte_26797EA10;
  v2[6] = qword_26797EEA8;
  char v3 = 0;
  void v2[4] = &unk_26C6CA0C0;
  sub_21635DE74(a1, byte_26797EA10, (uint64_t)v2);
}

void sub_21635BDF8(_Unwind_Exception *a1)
{
}

void sub_21635BE10()
{
}

void sub_21635BE58(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x1060C404B74122BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_21635BE7C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xFFF0000000000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 8sub_2161A108C(&a9, 0) = a3;
  if (a3 == 2) {
    View = (const void *)LXLexiconRepositoryCreateView();
  }
  else {
    View = (const void *)LXLexiconCreate();
  }
  sub_2161FBBAC((const void **)a1, View);
  return a1;
}

void sub_21635BF14(_Unwind_Exception *a1)
{
  sub_21635BF34((uint64_t)(v1 + 1));
  sub_2161FBBAC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21635BF34(uint64_t a1)
{
  char v3 = (void **)(a1 + 48);
  sub_21613F444(&v3);
  char v3 = (void **)(a1 + 24);
  sub_2162040DC(&v3);
  sub_2161868BC((const void **)a1, 0);
  return a1;
}

uint64_t sub_21635BF8C(uint64_t a1, uint64_t a2)
{
  long long v9 = 0u;
  memset(v8, 0, sizeof(v8));
  char v3 = *(const void ***)a1;
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    do
    {
      sub_21635D048(v8, v3);
      sub_21635EAA0(*(const void ***)a1, *(void *)(a1 + 8), (uint64_t)&v10, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
      uint64_t v5 = *(void *)(a1 + 8);
      uint64_t v6 = v5 - 24;
      sub_2161A108C((const void **)(v5 - 8), 0);
      *(void *)(a1 + 8) = v6;
      char v3 = *(const void ***)a1;
    }
    while (*(void *)a1 != v6);
  }
  char v10 = 0;
  do
  {
    if (!*((void *)&v9 + 1)) {
      break;
    }
    sub_21635C0A4(a2, *(void *)(*(void *)(*((void *)&v8[0] + 1) + 8 * ((*((void *)&v9 + 1) + (void)v9 - 1) / 0xAAuLL))+ 24 * ((*((void *)&v9 + 1) + (void)v9 - 1) % 0xAAuLL)+ 16));
    sub_21635EE04(v8);
  }
  while (!v10);
  return sub_21635D5B8((uint64_t)v8);
}

void sub_21635C08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21635C0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21610B7AC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

CFIndex sub_21635C0F8(uint64_t a1, CFStringRef theString, unint64_t a3, double a4)
{
  if (*(void *)(a1 + 8) < a3 || *(double *)(a1 + 16) + -0.000001 > a4) {
    return 0;
  }
  CFIndex v4 = 0;
  if (theString)
  {
    CFStringRef v7 = *(const __CFString **)a1;
    if (*(void *)a1)
    {
      CFIndex Length = CFStringGetLength(theString);
      CFIndex v9 = CFStringGetLength(v7);
      if (v9 >= Length) {
        CFIndex v10 = Length;
      }
      else {
        CFIndex v10 = v9;
      }
      if (!v10) {
        return 0;
      }
      CFIndex v4 = 0;
      while (1)
      {
        int CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v4);
        if (CharacterAtIndex != CFStringGetCharacterAtIndex(v7, v4)) {
          break;
        }
        if (v10 == ++v4) {
          return v10;
        }
      }
    }
  }
  return v4;
}

void sub_21635C1C0(uint64_t a1, const __CFString *a2, unint64_t a3, double a4)
{
  unint64_t v8 = sub_21635C0F8(a1, a2, a3, a4);
  CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
  sub_2161868BC((const void **)a1, Copy);
  *(void *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  sub_21635C320((uint64_t *)(a1 + 48), v8);
  if (v8 < CFStringGetLength(a2))
  {
    unint64_t v10 = v8;
    do
    {
      __int16 v19 = 0;
      unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex(a2, v10);
      __int16 v19 = CharacterAtIndex;
      long long v12 = sub_2161E3D1C(CharacterAtIndex);
      if (*v12 == v12[1])
      {
        int v18 = 1;
        unint64_t v17 = *(void *)(a1 + 56);
        if (v17 >= *(void *)(a1 + 64))
        {
          uint64_t v16 = sub_21635D890((uint64_t *)(a1 + 48), &v18, &v19);
        }
        else
        {
          sub_2161E5A38(*(void **)(a1 + 56), 1, &v19);
          uint64_t v16 = v17 + 24;
          *(void *)(a1 + 56) = v17 + 24;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t)v12;
        unint64_t v14 = *(void *)(a1 + 56);
        uint64_t v15 = (uint64_t *)(a1 + 48);
        if (v14 >= *(void *)(a1 + 64))
        {
          uint64_t v16 = sub_21635D9F4(v15, v13);
        }
        else
        {
          sub_21635D9A0((uint64_t)v15, v13);
          uint64_t v16 = v14 + 24;
        }
      }
      *(void *)(a1 + 56) = v16;
      ++v10;
    }
    while (v10 < CFStringGetLength(a2));
  }
  sub_21635C3C8((void *)(a1 + 24), v8);
}

void sub_21635C318(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

void sub_21635C320(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_21635D728(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        CFIndex v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_21635C3C8(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_21635DB0C(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        uint64_t v8 = v3 - 24;
        sub_216204168(v3 - 24, *(const void ***)(v3 - 16));
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_21635C46C(uint64_t a1)
{
  *(void *)&long long v2 = 0;
  *((void *)&v2 + 1) = 0xFFF0000000000000;
  sub_2161868BC((const void **)(a1 + 8), 0);
  *(_OWORD *)(a1 + 16) = v2;
  sub_21635DD3C((void **)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2161A108C(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  memset(v3, 0, sizeof(v3));
  sub_21635DDAC((uint64_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  memset(v4, 0, sizeof(v4));
  BOOL v5 = (void **)v4;
  sub_21613F444(&v5);
  BOOL v5 = (void **)v3;
  sub_2162040DC(&v5);
}

void sub_21635C520(void **a1, uint64_t a2, int a3)
{
  void v5[4] = *(void ***)MEMORY[0x263EF8340];
  if (*a1)
  {
    memset(v4, 0, 24);
    v5[0] = (void **)&unk_26C6C7570;
    v5[1] = a1;
    v5[2] = (void **)v4;
    v5[3] = (void **)v5;
    sub_21635C60C((uint64_t)a1, (uint64_t)v5, a3 ^ 1, 1);
    sub_21635F3A8(v5);
    sub_21635BF8C((uint64_t)v4, a2);
    v5[0] = (void **)v4;
    sub_21635DDE8(v5);
  }
}

void sub_21635C5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_21635DDE8(&a14);
  _Unwind_Resume(a1);
}

void sub_21635C60C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v91 = (char *)operator new(8uLL);
  int64x2_t v92 = vdupq_n_s64(1uLL);
  *(void *)BOOL v91 = 0;
  uint64_t v84 = a1;
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    LOBYTE(v88) = 1;
    sub_21624FAA8((uint64_t)&v91, &v88);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v84 + 64) - *(void *)(v84 + 56)) >> 3);
  uint64_t v8 = *(void *)(v84 + 40);
  sub_21635C3C8((void *)(v84 + 32), v7);
  unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 3);
  if (a3) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 3);
  }
  else {
    unint64_t v9 = 0;
  }
  if (v9 <= v7)
  {
    int v70 = a3 ^ 1;
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x263EFFB28];
    unint64_t v72 = v7;
    do
    {
      if (v9)
      {
        uint64_t v10 = *(void *)(v84 + 32) + 24 * v9;
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        unint64_t v88 = (uint64_t *)&v89;
        uint64_t v11 = *(double **)(v10 - 24);
        long long v12 = (double *)(v10 - 16);
        if (v11 != (double *)(v10 - 16))
        {
          while (1)
          {
            uint64_t v13 = &v89;
            if (v88 == (uint64_t *)&v89) {
              break;
            }
            unint64_t v14 = v89;
            uint64_t v15 = &v89;
            if (v89)
            {
              do
              {
                uint64_t v13 = (uint64_t **)v14;
                unint64_t v14 = (uint64_t *)v14[1];
              }
              while (v14);
            }
            else
            {
              do
              {
                uint64_t v13 = (uint64_t **)v15[2];
                BOOL v42 = *v13 == (uint64_t *)v15;
                uint64_t v15 = v13;
              }
              while (v42);
            }
            double v16 = v11[4];
            unint64_t v17 = *((void *)v11 + 5);
            double v18 = *((double *)v13 + 4);
            __int16 v19 = v13[5];
            if (v19 == (uint64_t *)v17 || vabdd_f64(v18, v16) > 0.3)
            {
              if (v18 > v16) {
                break;
              }
            }
            else if ((unint64_t)v19 < v17)
            {
              break;
            }
            long long v20 = (uint64_t **)sub_21635EF00((uint64_t)&v88, v94, v17, v16);
LABEL_23:
            if (!*v20)
            {
              char v21 = (uint64_t *)operator new(0x38uLL);
              uint64_t v23 = *((void *)v11 + 5);
              CFTypeRef v22 = (CFTypeRef)*((void *)v11 + 6);
              v21[4] = *((void *)v11 + 4);
              v21[5] = v23;
              if (v22) {
                CFTypeRef v22 = CFRetain(v22);
              }
              v21[6] = (uint64_t)v22;
              uint64_t v24 = v94[0];
              *char v21 = 0;
              v21[1] = 0;
              v21[2] = v24;
              *long long v20 = v21;
              if (*v88)
              {
                unint64_t v88 = (uint64_t *)*v88;
                char v21 = *v20;
              }
              sub_21612A6F4(v89, v21);
              ++v90;
            }
            uint64_t v25 = (double *)*((void *)v11 + 1);
            if (v25)
            {
              do
              {
                CFURLRef v26 = v25;
                uint64_t v25 = *(double **)v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                CFURLRef v26 = (double *)*((void *)v11 + 2);
                BOOL v42 = *(void *)v26 == (void)v11;
                uint64_t v11 = v26;
              }
              while (!v42);
            }
            uint64_t v11 = v26;
            if (v26 == v12) {
              goto LABEL_46;
            }
          }
          if (v89)
          {
            v94[0] = v13;
            long long v20 = v13 + 1;
          }
          else
          {
            v94[0] = &v89;
            long long v20 = &v89;
          }
          goto LABEL_23;
        }
      }
      else
      {
        RootCursor = (const void *)LXLexiconCreateRootCursor();
        unsigned int v93 = RootCursor;
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        unint64_t v88 = (uint64_t *)&v89;
        unint64_t v28 = operator new(0x38uLL);
        v28[4] = 0;
        void v28[5] = 0;
        if (RootCursor)
        {
          CFTypeRef v29 = CFRetain(RootCursor);
          double v30 = *((double *)v28 + 4);
          unint64_t v31 = v28[5];
        }
        else
        {
          unint64_t v31 = 0;
          CFTypeRef v29 = 0;
          double v30 = 0.0;
        }
        v28[6] = v29;
        uint64_t v32 = sub_21635EF00((uint64_t)&v88, v94, v31, v30);
        if (*v32)
        {
          sub_2161A108C((const void **)v28 + 6, 0);
          operator delete(v28);
          if (RootCursor) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v33 = v94[0];
          *unint64_t v28 = 0;
          v28[1] = 0;
          v28[2] = v33;
          *uint64_t v32 = v28;
          if (*v88)
          {
            unint64_t v88 = (uint64_t *)*v88;
            unint64_t v28 = (void *)*v32;
          }
          sub_21612A6F4(v89, v28);
          ++v90;
          if (RootCursor) {
LABEL_45:
          }
            CFRelease(RootCursor);
        }
      }
LABEL_46:
      unint64_t v86 = v9;
      std::string v34 = v88;
      if (v88 != (uint64_t *)&v89)
      {
        BOOL v35 = v9 == v72;
        int v36 = v70;
        if (v9 == v72) {
          int v36 = 1;
        }
        int v76 = v36;
        if (v9 < v71) {
          BOOL v35 = 1;
        }
        BOOL v75 = v35;
        uint64_t v81 = v9 + *(void *)(v84 + 16) + 4;
        uint64_t v77 = v9 + *(void *)(v84 + 16) + 3;
        while (1)
        {
          if (v76 && (!a4 || LXCursorHasEntries()))
          {
            uint64_t v37 = *(void *)(a2 + 24);
            if (!v37) {
              sub_21610B7AC();
            }
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v37 + 48))(v37, v34 + 4);
          }
          if (!v75)
          {
            uint64_t v38 = *(void *)(v84 + 56) + 24 * v86;
            std::string v40 = *(UniChar **)v38;
            unsigned __int8 v39 = *(UniChar **)(v38 + 8);
            if (*(UniChar **)v38 != v39) {
              break;
            }
          }
LABEL_110:
          uint64_t v68 = (uint64_t *)v34[1];
          if (v68)
          {
            do
            {
              unint64_t v69 = (uint64_t **)v68;
              uint64_t v68 = (uint64_t *)*v68;
            }
            while (v68);
          }
          else
          {
            do
            {
              unint64_t v69 = (uint64_t **)v34[2];
              BOOL v42 = *v69 == v34;
              std::string v34 = (uint64_t *)v69;
            }
            while (!v42);
          }
          std::string v34 = (uint64_t *)v69;
          if (v69 == &v89) {
            goto LABEL_116;
          }
        }
        unint64_t v79 = (uint64_t **)(*(void *)(v84 + 32) + 24 * v86 + 8);
        CFStringRef v80 = *(UniChar **)(v38 + 8);
        uint64_t v83 = *(void *)(v84 + 32) + 24 * v86;
        while (2)
        {
          UniChar chars = 0;
          UniChar chars = *v40;
          if ((chars & 0xF800 | 0x400) != 0xDC00)
          {
            CFStringRef cf = CFStringCreateWithCharactersNoCopy(0, &chars, 1, contentsDeallocator);
            int v41 = v92.i8[0] & 0x3F;
            BOOL v42 = v92.i64[0] <= 0x3FuLL && v41 == 0;
            if (!v42)
            {
              int v43 = 0;
              unint64_t v44 = v91;
              uint64_t v45 = &v91[8 * ((unint64_t)v92.i64[0] >> 6)];
              int64x2_t v82 = v45;
              while (1)
              {
                uint64_t v46 = 1 << v43;
                if (v86 || (*(void *)v44 & v46) == 0) {
                  break;
                }
LABEL_102:
                v44 += 8 * (v43 == 63);
                if (v43 == 63) {
                  int v43 = 0;
                }
                else {
                  ++v43;
                }
                if (v43 == v41 && v44 == v45) {
                  goto LABEL_107;
                }
              }
              CFTypeRef v47 = CFRetain((CFTypeRef)v34[6]);
              uint64_t v48 = v34[5];
              double v49 = *((double *)v34 + 4);
              if ((*(void *)v44 & v46) != 0)
              {
                uint64_t v50 = LXCursorCreateByAdvancing();
                if (v47) {
                  CFRelease(v47);
                }
                if (!v50) {
                  goto LABEL_102;
                }
                LXCursorConditionalProbability();
                ++v48;
                double v49 = v49 + v51;
                CFTypeRef v47 = (CFTypeRef)v50;
              }
              int64x2_t v52 = (const void *)LXCursorCreateByAdvancing();
              unsigned int v93 = v52;
              if (v52)
              {
                LXCursorConditionalProbability();
                double v54 = v49 + v53;
                if (v54 < *(double *)(v84 + 24)) {
                  goto LABEL_99;
                }
                if (*(void *)(v83 + 16) != v81) {
                  goto LABEL_89;
                }
                double v55 = v79;
                unint64_t v56 = *v79;
                unsigned __int8 v57 = *v79;
                if (*v79)
                {
                  do
                  {
                    uint64_t v58 = v57;
                    unsigned __int8 v57 = (uint64_t *)v57[1];
                  }
                  while (v57);
                }
                else
                {
                  do
                  {
                    uint64_t v58 = v55[2];
                    BOOL v42 = *v58 == (void)v55;
                    double v55 = (uint64_t **)v58;
                  }
                  while (v42);
                }
                if (v54 >= *((double *)v58 + 4))
                {
                  uint64_t v59 = (uint64_t *)v58[1];
                  uint64_t v60 = v58;
                  if (v59)
                  {
                    do
                    {
                      uint64_t v61 = v59;
                      uint64_t v59 = (uint64_t *)*v59;
                    }
                    while (v59);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v61 = (uint64_t *)v60[2];
                      BOOL v42 = *v61 == (void)v60;
                      uint64_t v60 = v61;
                    }
                    while (!v42);
                  }
                  if (*(uint64_t **)v83 == v58) {
                    *(void *)uint64_t v83 = v61;
                  }
                  *(void *)(v83 + 16) = v77;
                  sub_216167704(v56, v58);
                  sub_2161A108C((const void **)v58 + 6, 0);
                  operator delete(v58);
                  int64x2_t v52 = v93;
LABEL_89:
                  int64x2_t v62 = operator new(0x38uLL);
                  unint64_t v63 = v48 + 1;
                  *((double *)v62 + 4) = v54;
                  v62[5] = v48 + 1;
                  if (v52)
                  {
                    CFTypeRef v64 = CFRetain(v52);
                    double v54 = *((double *)v62 + 4);
                    unint64_t v63 = v62[5];
                  }
                  else
                  {
                    CFTypeRef v64 = 0;
                  }
                  v62[6] = v64;
                  uint64_t v65 = sub_21635EF00(v83, v94, v63, v54);
                  if (*v65)
                  {
                    sub_2161A108C((const void **)v62 + 6, 0);
                    operator delete(v62);
                  }
                  else
                  {
                    uint64_t v66 = v94[0];
                    void *v62 = 0;
                    v62[1] = 0;
                    v62[2] = v66;
                    *uint64_t v65 = v62;
                    uint64_t v67 = **(void **)v83;
                    if (v67)
                    {
                      *(void *)uint64_t v83 = v67;
                      int64x2_t v62 = (void *)*v65;
                    }
                    sub_21612A6F4(*(uint64_t **)(v83 + 8), v62);
                    ++*(void *)(v83 + 16);
                  }
                  uint64_t v45 = v82;
                }
                if (v52) {
LABEL_99:
                }
                  CFRelease(v52);
              }
              if (v47) {
                CFRelease(v47);
              }
              goto LABEL_102;
            }
LABEL_107:
            unsigned __int8 v39 = v80;
            if (cf) {
              CFRelease(cf);
            }
          }
          if (++v40 == v39) {
            goto LABEL_110;
          }
          continue;
        }
      }
LABEL_116:
      sub_216204168((uint64_t)&v88, (const void **)v89);
      unint64_t v9 = v86 + 1;
    }
    while (v86 + 1 <= v72);
  }
  if (v91) {
    operator delete(v91);
  }
}

void sub_21635CD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef cf,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  unint64_t v31 = *(void **)(v29 - 144);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_21635CE90(void **a1, const __CFString *a2, uint64_t a3, unint64_t a4, double a5)
{
  if (*a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  BOOL v6 = v5 || a4 == 0;
  if (!v6 && a5 != 0.0)
  {
    sub_21635C1C0((uint64_t)(a1 + 1), a2, a4, a5);
    sub_21635C520(a1, a3, 0);
  }
}

void sub_21635CF04(void *a1, const __CFString *a2, uint64_t a3, unint64_t a4, __int16 a5, double a6)
{
  v15[4] = *(void ***)MEMORY[0x263EF8340];
  if (*a1) {
    BOOL v6 = a2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v7 = v6 || a4 == 0;
  if (!v7 && a6 != 0.0)
  {
    sub_21635C1C0((uint64_t)(a1 + 1), a2, a4, a6);
    memset(v14, 0, 24);
    uint64_t v13 = operator new(0x30uLL);
    void *v13 = &unk_26C6C7518;
    v13[1] = a4;
    *((_WORD *)v13 + 8) = a5;
    *((double *)v13 + 3) = a6;
    v13[4] = a3;
    void v13[5] = v14;
    v15[3] = (void **)v13;
    sub_21635C60C((uint64_t)a1, (uint64_t)v15, 1, 0);
    sub_21635BF8C((uint64_t)v14, a3);
    sub_21635F3A8(v15);
    v15[0] = (void **)v14;
    sub_21635DDE8(v15);
  }
}

void sub_21635D01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_21635DDE8(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_21635D048(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  BOOL v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 170 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    BOOL v10 = v8 >= 0xAA;
    unint64_t v11 = v8 - 170;
    if (v10)
    {
      a1[4] = v11;
      uint64_t v14 = *(void *)v4;
      long long v12 = v4 + 8;
      uint64_t v13 = v14;
      a1[1] = v12;
      if (v5 == (char *)a1[3])
      {
        uint64_t v15 = (uint64_t)&v12[-*a1];
        if ((unint64_t)v12 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          BOOL v42 = (char *)sub_216188754(v41);
          unint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          BOOL v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            BOOL v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          uint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            BOOL v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v16 = v15 >> 3;
          BOOL v17 = v15 >> 3 < -1;
          uint64_t v18 = (v15 >> 3) + 2;
          if (v17) {
            uint64_t v19 = v18;
          }
          else {
            uint64_t v19 = v16 + 1;
          }
          uint64_t v20 = -(v19 >> 1);
          uint64_t v21 = v19 >> 1;
          CFTypeRef v22 = &v12[-8 * v21];
          int64_t v23 = v5 - v12;
          if (v5 != v12)
          {
            memmove(&v12[-8 * v21], v12, v5 - v12);
            BOOL v5 = (char *)a1[1];
          }
          uint64_t v24 = &v5[8 * v20];
          BOOL v5 = &v22[v23];
          a1[1] = v24;
          a1[2] = &v22[v23];
        }
      }
      *(void *)BOOL v5 = v13;
    }
    else
    {
      uint64_t v25 = (char *)a1[3];
      CFURLRef v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >= v27 >> 3)
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        uint64_t v32 = (char *)sub_216188754(v31);
        uint64_t v34 = v33;
        BOOL v35 = operator new(0xFF0uLL);
        int v36 = &v32[8 * v6];
        uint64_t v37 = &v32[8 * v34];
        if (v6 == v34)
        {
          uint64_t v38 = 8 * v6;
          if (v5 - v4 < 1)
          {
            uint64_t v83 = v35;
            uint64_t v84 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v85 = 1;
            }
            else {
              unint64_t v85 = v84;
            }
            unint64_t v86 = (char *)sub_216188754(v85);
            int v36 = &v86[8 * (v85 >> 2)];
            uint64_t v37 = &v86[8 * v87];
            if (v32) {
              operator delete(v32);
            }
            uint64_t v32 = v86;
            BOOL v35 = v83;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)int v36 = v35;
        BOOL v5 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v5 >= v37)
            {
              if (v37 == v32) {
                unint64_t v93 = 1;
              }
              else {
                unint64_t v93 = (v37 - v32) >> 2;
              }
              unint64_t v94 = (char *)sub_216188754(v93);
              long long v96 = v94;
              int v36 = &v94[(2 * v93 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v98 = v5 - v32;
              BOOL v97 = v5 == v32;
              BOOL v5 = v36;
              if (!v97)
              {
                BOOL v5 = &v36[v98 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v99 = 8 * (v98 >> 3);
                unint64_t v100 = v36;
                unint64_t v101 = v32;
                do
                {
                  uint64_t v102 = *(void *)v101;
                  v101 += 8;
                  *(void *)unint64_t v100 = v102;
                  v100 += 8;
                  v99 -= 8;
                }
                while (v99);
              }
              uint64_t v37 = &v94[8 * v95];
              if (v32) {
                operator delete(v32);
              }
              uint64_t v32 = v96;
            }
            else
            {
              uint64_t v89 = (v37 - v5) >> 3;
              if (v89 >= -1) {
                uint64_t v90 = v89 + 1;
              }
              else {
                uint64_t v90 = v89 + 2;
              }
              uint64_t v91 = v90 >> 1;
              int v36 = &v32[8 * (v90 >> 1)];
              int64x2_t v92 = v32;
              if (v5 != v32)
              {
                memmove(v36, v32, v5 - v32);
                int64x2_t v92 = v5;
              }
              BOOL v5 = &v92[8 * v91];
            }
          }
          uint64_t v103 = *(void *)(i - 8);
          *((void *)v36 - 1) = v103;
          v36 -= 8;
        }
        uint64_t v104 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v5;
        a1[3] = v37;
        if (v104)
        {
          operator delete(v104);
          BOOL v5 = (char *)a1[2];
        }
        goto LABEL_37;
      }
      unint64_t v28 = operator new(0xFF0uLL);
      uint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v61 = 1;
          }
          else {
            unint64_t v61 = (v25 - v4) >> 2;
          }
          uint64_t v62 = 2 * v61;
          unint64_t v63 = (char *)sub_216188754(v61);
          unint64_t v4 = &v63[(v62 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v65 = (uint64_t *)a1[1];
          uint64_t v66 = v4;
          uint64_t v67 = a1[2] - (void)v65;
          if (v67)
          {
            uint64_t v66 = &v4[v67 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v68 = 8 * (v67 >> 3);
            unint64_t v69 = v4;
            do
            {
              uint64_t v70 = *v65++;
              *(void *)unint64_t v69 = v70;
              v69 += 8;
              v68 -= 8;
            }
            while (v68);
          }
          unint64_t v71 = (char *)*a1;
          *a1 = v63;
          a1[1] = v4;
          a1[2] = v66;
          a1[3] = &v63[8 * v64];
          if (v71)
          {
            operator delete(v71);
            unint64_t v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        unint64_t v72 = (char *)a1[1];
        uint64_t v73 = (char *)a1[2];
        a1[1] = v72 - 8;
        uint64_t v74 = *((void *)v72 - 1);
        a1[1] = v72;
        if (v73 == (char *)a1[3])
        {
          uint64_t v75 = (uint64_t)&v72[-*a1];
          if ((unint64_t)v72 <= *a1)
          {
            if (v73 == (char *)*a1) {
              unint64_t v105 = 1;
            }
            else {
              unint64_t v105 = (uint64_t)&v73[-*a1] >> 2;
            }
            unint64_t v106 = (char *)sub_216188754(v105);
            uint64_t v108 = &v106[8 * (v105 >> 2)];
            int v109 = (uint64_t *)a1[1];
            uint64_t v73 = v108;
            uint64_t v110 = a1[2] - (void)v109;
            if (v110)
            {
              uint64_t v73 = &v108[v110 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v111 = 8 * (v110 >> 3);
              std::string::size_type v112 = &v106[8 * (v105 >> 2)];
              do
              {
                uint64_t v113 = *v109++;
                *(void *)std::string::size_type v112 = v113;
                v112 += 8;
                v111 -= 8;
              }
              while (v111);
            }
            uint64_t v114 = (char *)*a1;
            *a1 = v106;
            a1[1] = v108;
            a1[2] = v73;
            a1[3] = &v106[8 * v107];
            if (v114)
            {
              operator delete(v114);
              uint64_t v73 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v76 = v75 >> 3;
            BOOL v17 = v75 >> 3 < -1;
            uint64_t v77 = (v75 >> 3) + 2;
            if (v17) {
              uint64_t v78 = v77;
            }
            else {
              uint64_t v78 = v76 + 1;
            }
            uint64_t v79 = -(v78 >> 1);
            uint64_t v80 = v78 >> 1;
            uint64_t v81 = &v72[-8 * v80];
            int64_t v82 = v73 - v72;
            if (v73 != v72)
            {
              memmove(&v72[-8 * v80], v72, v73 - v72);
              unint64_t v72 = (char *)a1[1];
            }
            uint64_t v73 = &v81[v82];
            a1[1] = &v72[8 * v79];
            a1[2] = &v81[v82];
          }
        }
        *(void *)uint64_t v73 = v74;
      }
      else
      {
        *(void *)BOOL v5 = v28;
      }
    }
    BOOL v5 = (char *)(a1[2] + 8);
    a1[2] = v5;
LABEL_37:
    unint64_t v4 = (char *)a1[1];
    unint64_t v8 = a1[4];
    unint64_t v9 = a1[5] + v8;
  }
  uint64_t v51 = *(void *)&v4[8 * (v9 / 0xAA)];
  unint64_t v52 = v9 % 0xAA;
  uint64_t v54 = a2[1];
  CFTypeRef v53 = (CFTypeRef)a2[2];
  double v55 = (void *)(v51 + 24 * (v9 % 0xAA));
  *double v55 = *a2;
  v55[1] = v54;
  if (v53)
  {
    CFTypeRef v53 = CFRetain(v53);
    unint64_t v8 = a1[4];
    unint64_t v4 = (char *)a1[1];
    BOOL v5 = (char *)a1[2];
  }
  *(void *)(v51 + 24 * v52 + 16) = v53;
  uint64_t v56 = a1[5] + 1;
  a1[5] = v56;
  unint64_t v57 = v56 + v8;
  uint64_t v58 = &v4[8 * (v57 / 0xAA)];
  uint64_t v59 = *(void *)v58 + 24 * (v57 % 0xAA);
  if (v5 == v4) {
    uint64_t v59 = 0;
  }
  if (v59 == *(void *)v58) {
    uint64_t v59 = *((void *)v58 - 1) + 4080;
  }
  return v59 - 24;
}

void sub_21635D58C(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21635D5B8(uint64_t a1)
{
  long long v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    unint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        sub_2161A108C((const void **)(v7 + 16), 0);
        v7 += 24;
        if (v7 - (void)*v6 == 4080)
        {
          unint64_t v9 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      long long v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      long long v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 85;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 170;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21635D728(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_216129BFC(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    BOOL v17 = &v16[v14];
    sub_2162A661C(a1, &v15);
    sub_216140FCC((uint64_t)&v15);
  }
}

void sub_21635D87C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21635D890(uint64_t *a1, int *a2, _WORD *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_216129BFC(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v15 = v12;
  uint64_t v16 = &v12[24 * v5];
  BOOL v17 = v16;
  uint64_t v18 = &v12[24 * v11];
  sub_2161E5A38(v16, *a2, a3);
  BOOL v17 = v16 + 24;
  sub_2162A661C(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216140FCC((uint64_t)&v15);
  return v13;
}

void sub_21635D98C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21635D9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  __n128 result = sub_216182F50(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_21635D9EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21635D9F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21610CB04();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_216129BFC(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_216182F50(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  v15 += 24;
  sub_2162A661C(a1, v14);
  uint64_t v12 = a1[1];
  sub_216140FCC((uint64_t)v14);
  return v12;
}

void sub_21635DAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216140FCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21635DB0C(void *result, unint64_t a2)
{
  uint64_t v3 = (char **)result;
  uint64_t v4 = result[2];
  uint64_t v5 = result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = v5 + 24 * a2;
      uint64_t v12 = 24 * a2;
      uint64_t v13 = (void *)(v5 + 8);
      do
      {
        void *v13 = 0;
        v13[1] = 0;
        *(v13 - 1) = v13;
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    else
    {
      uint64_t v11 = result[1];
    }
    result[1] = v11;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *result) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21610CB04();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *result) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    uint64_t v32 = result + 2;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        sub_2160FFA74();
      }
      unint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    size_t v14 = &v10[24 * v6];
    uint64_t v15 = &v10[24 * v9];
    unint64_t v31 = v15;
    uint64_t v16 = &v14[24 * a2];
    uint64_t v17 = 24 * a2;
    uint64_t v18 = v14 + 8;
    do
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v30.i64[1] = (uint64_t)&v14[24 * a2];
    uint64_t v20 = *v3;
    unint64_t v19 = (unint64_t)v3[1];
    if ((char *)v19 == *v3)
    {
      int64x2_t v27 = vdupq_n_s64(v19);
    }
    else
    {
      uint64_t v21 = 0;
      do
      {
        CFTypeRef v22 = &v14[v21];
        *((void *)v22 - 3) = *(void *)(v19 + v21 - 24);
        int64_t v23 = (uint64_t *)(v19 + v21 - 16);
        uint64_t v24 = *v23;
        *(void *)&v14[v21 - 16] = *v23;
        uint64_t v25 = (uint64_t)&v14[v21 - 16];
        uint64_t v26 = *(void *)(v19 + v21 - 8);
        *((void *)v22 - 1) = v26;
        if (v26)
        {
          *(void *)(v24 + 16) = v25;
          *(void *)(v19 + v21 - 24) = v23;
          uint64_t *v23 = 0;
          *(void *)(v19 + v21 - 8) = 0;
        }
        else
        {
          *((void *)v22 - 3) = v25;
        }
        v21 -= 24;
      }
      while ((char *)(v19 + v21) != v20);
      int64x2_t v27 = *(int64x2_t *)v3;
      v14 += v21;
      uint64_t v16 = (char *)v30.i64[1];
      uint64_t v15 = v31;
    }
    *uint64_t v3 = v14;
    v3[1] = v16;
    int64x2_t v30 = v27;
    unint64_t v28 = v3[2];
    v3[2] = v15;
    unint64_t v31 = v28;
    uint64_t v29 = v27.i64[0];
    return (void *)sub_21635DCE8((uint64_t)&v29);
  }
  return result;
}

uint64_t sub_21635DCE8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_216204168(i - 24, *(const void ***)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21635DD3C(void **a1)
{
  uint64_t v1 = (const void ***)*a1;
  if (*a1)
  {
    uint64_t v3 = (const void ***)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 3;
        sub_216204168((uint64_t)(v3 - 3), *(v3 - 2));
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_21635DDAC(uint64_t *a1)
{
  if (*a1)
  {
    sub_21613F498(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_21635DDE8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 3;
        sub_2161A108C(v4 - 1, 0);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21635DE74(void *a1, char *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EA00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EA00))
  {
    operator new();
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EA08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EA08))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26797CD28, &dword_2160F5000);
    __cxa_guard_release(&qword_26797EA08);
  }
  std::mutex::lock(&stru_26797CD28);
  uint64_t v5 = (void *)qword_26797E9F8;
  unint64_t v6 = sub_216129260(qword_26797E9F8 + 24, (uint64_t)a2);
  int8x8_t v7 = (int8x8_t)v5[1];
  if (!*(void *)&v7) {
    goto LABEL_20;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(unsigned __int8 ***)(*v5 + 8 * v11);
  if (!v12 || (uint64_t v13 = *v12) == 0)
  {
LABEL_20:
    uint64_t v16 = sub_2162D1CE4(0xDu);
    os_signpost_id_t v17 = os_signpost_id_make_with_pointer(v16, a2);
    uint64_t v18 = sub_2162D1CE4(0xDu);
    if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v19 = v18;
      if (os_signpost_enabled(v18))
      {
        if (a2[23] >= 0) {
          uint64_t v20 = a2;
        }
        else {
          uint64_t v20 = *(char **)a2;
        }
        int buf = 136315138;
        *(void *)buf_4 = v20;
        _os_signpost_emit_with_name_impl(&dword_2160F5000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v17, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    (*(void (**)(uint64_t))(a3 + 16))(a3);
    operator new();
  }
  uint64_t v14 = (uint64_t)(v5 + 4);
  while (1)
  {
    unint64_t v15 = *((void *)v13 + 1);
    if (v15 == v8) {
      break;
    }
    if (v10 > 1)
    {
      if (v15 >= *(void *)&v7) {
        v15 %= *(void *)&v7;
      }
    }
    else
    {
      v15 &= *(void *)&v7 - 1;
    }
    if (v15 != v11) {
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v13 = *(unsigned __int8 **)v13;
    if (!v13) {
      goto LABEL_20;
    }
  }
  if ((sub_21612970C(v14, v13 + 16, (unsigned __int8 *)a2) & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)v13 + 6);
  if (!v21 || v21->__shared_owners_ == -1) {
    goto LABEL_20;
  }
  CFTypeRef v22 = std::__shared_weak_count::lock(v21);
  if (v22) {
    uint64_t v23 = *((void *)v13 + 5);
  }
  else {
    uint64_t v23 = 0;
  }
  std::mutex::unlock(&stru_26797CD28);
  *a1 = v23;
  a1[1] = v22;
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_2161121B0(v22);
  }
}

void sub_21635E63C(_Unwind_Exception *a1)
{
}

void sub_21635E6D4()
{
}

void sub_21635E7BC(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 144)) {
    std::mutex::unlock(*(std::mutex **)(v1 + 136));
  }
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v3);
  }
  std::mutex::~mutex(v2);
  uint64_t v5 = *(void *)v1;
  *(void *)uint64_t v1 = 0;
  if (v5) {
    sub_216204058(v1, v5);
  }
  MEMORY[0x2166CA800](v1, 0x10F2C40E01BBEB9);
  _Unwind_Resume(a1);
}

void sub_21635E830(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_21635E868(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_21635E8F4(result);
    JUMPOUT(0x2166CA800);
  }
  return result;
}

uint64_t sub_21635E8B0(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC070)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_21635E8F4(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = atomic_load((unsigned int *)(a1 + 40));
  if (v2 == 1)
  {
    uint64_t v3 = (uint64_t *)(a1 + 112);
    do
    {
      dispatch_time_t v4 = dispatch_time(0, 1000000);
      if (sub_216203CD0(a1, v4, 0)) {
        break;
      }
      unsigned int v5 = atomic_load((unsigned int *)(a1 + 40));
      if (v5 == 2) {
        break;
      }
      unint64_t v6 = sub_2162D1CE4(1u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = a1 + 112;
        if (*(char *)(a1 + 135) < 0) {
          uint64_t v8 = *v3;
        }
        *(_DWORD *)int buf = 136315138;
        uint64_t v12 = v8;
        _os_log_error_impl(&dword_2160F5000, v6, OS_LOG_TYPE_ERROR, "Still waiting for resource [%s] to complete in background.", buf, 0xCu);
      }
      unsigned int v7 = atomic_load((unsigned int *)(a1 + 40));
    }
    while (v7 == 1);
  }
  std::mutex::lock((std::mutex *)(a1 + 48));
  _Block_release(*(const void **)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  std::mutex::unlock((std::mutex *)(a1 + 48));
  if (*(unsigned char *)(a1 + 144)) {
    std::mutex::unlock(*(std::mutex **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = 0;
  if (v9) {
    sub_216204058(a1, v9);
  }
  return a1;
}

void sub_21635EA90(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2160F7444(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21635EAA0(const void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = a1[2];
    unint64_t v10 = a1[1];
    if (v9) {
      CFTypeRef v11 = CFRetain(v9);
    }
    else {
      CFTypeRef v11 = 0;
    }
    uint64_t v12 = 0;
    uint64_t v13 = v4 >> 1;
    uint64_t v14 = a1;
    while (1)
    {
      unint64_t v15 = v14;
      uint64_t v16 = v12 + 1;
      v14 += 3 * v12 + 3;
      uint64_t v17 = 2 * v12;
      uint64_t v12 = (2 * v12) | 1;
      uint64_t v18 = v17 + 2;
      if (v18 < a4)
      {
        double v19 = *((double *)v14 + 3);
        double v20 = *(double *)v14;
        uint64_t v21 = v15[3 * v16 + 1];
        CFTypeRef v22 = v14[4];
        if (v21 != v22 && vabdd_f64(v20, v19) <= 0.3)
        {
          if (v21 >= v22) {
            goto LABEL_11;
          }
LABEL_10:
          v14 += 3;
          uint64_t v12 = v18;
          goto LABEL_11;
        }
        if (v20 > v19) {
          goto LABEL_10;
        }
      }
LABEL_11:
      char *v15 = *v14;
      uint64_t v23 = v14[2];
      void v14[2] = 0;
      sub_2161A108C(v15 + 2, v23);
      v15[1] = v14[1];
      if (v12 > v13)
      {
        uint64_t v24 = v14 + 2;
        if ((const void **)(a2 - 24) == v14)
        {
          char *v14 = v8;
          sub_2161A108C(v24, v11);
          v14[1] = v10;
        }
        else
        {
          uint64_t v26 = *(const void **)(a2 - 8);
          uint64_t v25 = (const void **)(a2 - 8);
          char *v14 = *(v25 - 2);
          *uint64_t v25 = 0;
          sub_2161A108C(v24, v26);
          v14[1] = *(v25 - 1);
          *(v25 - 2) = v8;
          sub_2161A108C(v25, v11);
          *(v25 - 1) = v10;
          sub_21635EC80((uint64_t)a1, (uint64_t)(v14 + 3), 0xAAAAAAAAAAAAAAABLL * (v14 + 3 - a1));
        }
        return;
      }
    }
  }
}

void sub_21635EC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
}

void sub_21635EC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v6 = v3 >> 1;
    uint64_t v7 = a1 + 24 * (v3 >> 1);
    double v8 = *(double *)v7;
    unint64_t v9 = *(void *)(v7 + 8);
    double v10 = *(double *)(a2 - 24);
    unint64_t v11 = *(void *)(a2 - 16);
    if (v9 == v11 || vabdd_f64(v8, v10) > 0.3)
    {
      if (v8 <= v10) {
        return;
      }
    }
    else if (v9 >= v11)
    {
      return;
    }
    uint64_t v12 = *(const void **)(a2 - 8);
    if (v12)
    {
      CFTypeRef v13 = CFRetain(v12);
      double v8 = *(double *)v7;
    }
    else
    {
      CFTypeRef v13 = 0;
    }
    *(double *)(a2 - 24) = v8;
    uint64_t v14 = a1 + 24 * v6;
    unint64_t v15 = *(const void **)(v14 + 16);
    *(void *)(v14 + 16) = 0;
    sub_2161A108C((const void **)(a2 - 8), v15);
    *(void *)(a2 - 16) = *(void *)(v7 + 8);
    if (v3 >= 2)
    {
      do
      {
        unint64_t v17 = v6 - 1;
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v16 = a1 + 24 * v6;
        double v18 = *(double *)v16;
        unint64_t v19 = *(void *)(v16 + 8);
        if (v19 == v11 || vabdd_f64(v18, v10) > 0.3)
        {
          if (v18 <= v10) {
            goto LABEL_11;
          }
        }
        else if (v19 >= v11)
        {
          goto LABEL_11;
        }
        *(double *)uint64_t v7 = v18;
        uint64_t v20 = a1 + 24 * v6;
        uint64_t v21 = *(const void **)(v20 + 16);
        *(void *)(v20 + 16) = 0;
        sub_2161A108C((const void **)(v7 + 16), v21);
        *(void *)(v7 + 8) = *(void *)(v16 + 8);
        uint64_t v7 = a1 + 24 * v6;
      }
      while (v17 > 1);
    }
    else
    {
LABEL_11:
      uint64_t v16 = v7;
    }
    *(double *)uint64_t v16 = v10;
    sub_2161A108C((const void **)(v16 + 16), v13);
    *(void *)(v16 + 8) = v11;
  }
}

uint64_t sub_21635EE04(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  sub_2161A108C((const void **)(*(void *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA) + 16), 0);
  --a1[5];

  return sub_21635EE88(a1, 1);
}

uint64_t sub_21635EE88(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *sub_21635EF00(uint64_t a1, void *a2, unint64_t a3, double a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    while (1)
    {
      int v7 = (void *)v5;
      double v8 = *(double *)(v5 + 32);
      unint64_t v9 = *(void *)(v5 + 40);
      if (v9 == a3)
      {
        if (v8 < a4) {
          goto LABEL_11;
        }
        goto LABEL_8;
      }
      if (vabdd_f64(a4, v8) <= 0.3)
      {
        if (v9 > a3) {
          goto LABEL_11;
        }
LABEL_7:
        if (vabdd_f64(v8, a4) <= 0.3)
        {
          if (v9 >= a3) {
            goto LABEL_17;
          }
          goto LABEL_14;
        }
LABEL_8:
        if (v8 <= a4) {
          goto LABEL_17;
        }
LABEL_14:
        uint64_t result = v7 + 1;
        uint64_t v5 = v7[1];
        if (!v5) {
          goto LABEL_17;
        }
      }
      else
      {
        if (v8 >= a4) {
          goto LABEL_7;
        }
LABEL_11:
        uint64_t v5 = *v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_17;
        }
      }
    }
  }
  int v7 = result;
LABEL_17:
  *a2 = v7;
  return result;
}

void sub_21635EF9C()
{
}

__n128 sub_21635EFB0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C6C7570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21635EFFC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C7570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21635F02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  LXCursorTerminationProbability();
  double v6 = v5 + *(double *)a2;
  if (v6 >= *(double *)(v4 + 24))
  {
    int v7 = *(uint64_t **)(a1 + 16);
    unint64_t v8 = v7[1];
    unint64_t v9 = v7[2];
    if (v8 >= v9)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21610CB04();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v7) >> 3);
      uint64_t v15 = 2 * v14;
      if (2 * v14 <= v13 + 1) {
        uint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v15;
      }
      int64x2_t v30 = v7 + 2;
      if (v16)
      {
        double v18 = sub_216178CAC(v16);
      }
      else
      {
        double v18 = 0;
        uint64_t v17 = 0;
      }
      unint64_t v19 = (char *)&v18[3 * v13];
      v27[0] = v18;
      v27[1] = v19;
      unint64_t v28 = v19;
      uint64_t v29 = (char *)&v18[3 * v17];
      uint64_t v21 = *(void *)(a2 + 8);
      CFTypeRef v20 = *(CFTypeRef *)(a2 + 16);
      *(double *)unint64_t v19 = v6;
      *((void *)v19 + 1) = v21;
      if (v20)
      {
        CFTypeRef v20 = CFRetain(v20);
        unint64_t v19 = v28;
      }
      v18[3 * v13 + 2] = v20;
      unint64_t v28 = v19 + 24;
      sub_21635F268(v7, v27);
      uint64_t v12 = v7[1];
      sub_21635F350((uint64_t)v27);
    }
    else
    {
      uint64_t v11 = *(void *)(a2 + 8);
      CFTypeRef v10 = *(CFTypeRef *)(a2 + 16);
      *(double *)unint64_t v8 = v6;
      *(void *)(v8 + 8) = v11;
      if (v10) {
        CFTypeRef v10 = CFRetain(v10);
      }
      *(void *)(v8 + 16) = v10;
      uint64_t v12 = v8 + 24;
      v7[1] = v8 + 24;
    }
    v7[1] = v12;
    sub_21635EC80(*v7, v12, 0xAAAAAAAAAAAAAAABLL * ((v12 - *v7) >> 3));
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = *(void *)(v22 + 8);
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - *(void *)v22) >> 3);
    if (v24 > *(void *)(v4 + 16))
    {
      sub_21635EAA0(*(const void ***)v22, v23, (uint64_t)v27, v24);
      uint64_t v25 = *(void *)(v22 + 8);
      uint64_t v26 = v25 - 24;
      sub_2161A108C((const void **)(v25 - 8), 0);
      *(void *)(v22 + 8) = v26;
    }
  }
}

void sub_21635F1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_21635F21C(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC700)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635F25C()
{
  return &unk_26C6BC700;
}

uint64_t *sub_21635F268(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = *(void *)(v4 + v7 - 16);
      __n128 result = *(uint64_t **)(v4 + v7 - 8);
      *(void *)(v8 - 24) = *(void *)(v4 + v7 - 24);
      *(void *)(v8 - 16) = v9;
      if (result) {
        __n128 result = (uint64_t *)CFRetain(result);
      }
      *(void *)(v8 - 8) = result;
      v7 -= 24;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v10 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void sub_21635F328(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 24)
    sub_2161A108C((const void **)(v1 + 16 + v2), 0);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21635F350(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_2161A108C((const void **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_21635F3A8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21635F430()
{
}

__n128 sub_21635F444(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26C6C7518;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_21635F4A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C6C7518;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4sub_2161A108C(a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21635F4E0(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = v6;
  void v6[2] = 0x2000000000;
  uint64_t v7 = *(void *)(a1 + 40);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = sub_21635F644;
  void v3[3] = &unk_26427D250;
  double v4 = *(double *)(a1 + 24);
  v3[4] = v6;
  v3[5] = a2;
  uint64_t v5 = *(void *)(a1 + 8);
  double v2 = v4 - *(double *)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3) == v5) {
    double v2 = fmax(**(double **)v7 + -0.3 - *(double *)a2, v2);
  }
  if (v2 <= 0.0) {
    sub_2161A0B78(*(const void **)(a2 + 16), (uint64_t)v3, *(unsigned __int16 *)(a1 + 16));
  }
  _Block_object_dispose(v6, 8);
}

void sub_21635F5E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_21635F5F8(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6BC6F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21635F638()
{
  return &unk_26C6BC6F0;
}

void sub_21635F644(uint64_t a1, const void *a2, uint64_t a3, double a4)
{
  if (LXCursorHasEntries())
  {
    double v8 = **(double **)(a1 + 40) + a4;
    LXCursorTerminationProbability();
    double v10 = v8 + v9;
    if (v10 >= *(double *)(a1 + 48))
    {
      uint64_t v11 = *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8) + a3;
      unint64_t v13 = v11[1];
      unint64_t v14 = v11[2];
      if (v13 >= v14)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v11) >> 3);
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21610CB04();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 3);
        uint64_t v18 = 2 * v17;
        if (2 * v17 <= v16 + 1) {
          uint64_t v18 = v16 + 1;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v19 = v18;
        }
        uint64_t v33 = v11 + 2;
        if (v19)
        {
          uint64_t v21 = sub_216178CAC(v19);
        }
        else
        {
          uint64_t v21 = 0;
          uint64_t v20 = 0;
        }
        uint64_t v23 = (char *)&v21[3 * v16];
        v30[0] = v21;
        v30[1] = v23;
        unint64_t v31 = v23;
        uint64_t v32 = (char *)&v21[3 * v20];
        *(double *)uint64_t v23 = v10;
        *((void *)v23 + 1) = v12;
        if (a2)
        {
          CFTypeRef v24 = CFRetain(a2);
          uint64_t v23 = v31;
        }
        else
        {
          CFTypeRef v24 = 0;
        }
        v21[3 * v16 + 2] = v24;
        unint64_t v31 = v23 + 24;
        sub_21635F268(v11, v30);
        uint64_t v22 = v11[1];
        sub_21635F350((uint64_t)v30);
      }
      else
      {
        *(double *)unint64_t v13 = v10;
        *(void *)(v13 + 8) = v12;
        if (a2) {
          CFTypeRef v15 = CFRetain(a2);
        }
        else {
          CFTypeRef v15 = 0;
        }
        *(void *)(v13 + 16) = v15;
        uint64_t v22 = v13 + 24;
        v11[1] = v13 + 24;
      }
      v11[1] = v22;
      sub_21635EC80(*v11, v22, 0xAAAAAAAAAAAAAAABLL * ((v22 - *v11) >> 3));
      uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      uint64_t v26 = *(void *)(v25 + 8);
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - *(void *)v25) >> 3);
      if (v27 > *(void *)(a1 + 56))
      {
        sub_21635EAA0(*(const void ***)v25, v26, (uint64_t)v30, v27);
        uint64_t v28 = *(void *)(v25 + 8);
        uint64_t v29 = v28 - 24;
        sub_2161A108C((const void **)(v28 - 8), 0);
        *(void *)(v25 + 8) = v29;
      }
    }
  }
}

void sub_21635F854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_21635F874(uint64_t a1)
{
  double v2 = *(id **)a1;
  long long v3 = *(id **)(a1 + 8);
  while (v2 != v3)

  sub_21612A250(a1 + 32, *(void **)(a1 + 40));
  double v4 = *(id **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_21635F8DC(uint64_t a1)
{
  double v2 = *(void ***)a1;
  long long v3 = *(void ***)(a1 + 8);
  if (*(void ***)a1 != v3)
  {
    do
    {
      double v4 = *v2++;
    }
    while (v2 != v3);
    double v2 = *(void ***)a1;
  }
  *(void *)(a1 + 8) = v2;
  sub_21612A250(a1 + 32, *(void **)(a1 + 40));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 4sub_2161A108C(a9, 0) = 0;
  *(void *)(a1 + 24) = *(void *)a1;
  *(void *)(a1 + 32) = a1 + 40;
}

uint64_t sub_21635F948(void *a1, const char *a2, uint64_t a3)
{
  long long v3 = (void **)a1[3];
  if (v3 == (void **)a1[1]) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = *v3;
    if (!MecabraCandidateGetSurface(*v3, a2, a3)) {
      break;
    }
    uint64_t v8 = a1[8];
    CFStringRef Surface = (const void *)MecabraCandidateGetSurface(v5, v6, v7);
    if ((sub_216229684(v8, Surface, 2048) & 1) == 0) {
      break;
    }
    long long v3 = (void **)(a1[3] + 8);
    a1[3] = v3;
    if (v3 == (void **)a1[1]) {
      return 0;
    }
  }
  uint64_t v11 = a1[3];
  a1[3] = v11 + 8;
  return *(void *)v11;
}

uint64_t sub_21635F9E0(void *a1, void *a2, uint64_t a3)
{
  if (a1[7] > (unint64_t)((uint64_t)(a1[1] - *a1) >> 3))
  {
    uint64_t v3 = [a2 a2:a3];
    CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
    sub_2161E1FB8(v4);
  }

  return MEMORY[0x270F9A758]();
}

void sub_21635FC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x2166CA7C0](a11, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void sub_21635FC68(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void ***)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    do
    {
      uint64_t v6 = *v5++;
      sub_21635F9E0(a1, v6, a3);
    }
    while (v5 != *(void ***)(a2 + 8));
    uint64_t v5 = *(void ***)a2;
  }
  uint64_t v8 = *(void **)(a2 + 40);
  uint64_t v7 = (void *)(a2 + 40);
  *(v7 - 4) = v5;
  sub_21612A250((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *uint64_t v7 = 0;
  v7[1] = 0;
  a1[3] = *a1;
}

void sub_21635FCDC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void ***)a2;
  uint64_t v6 = *(void ***)(a2 + 8);
  if (*(void ***)a2 != v6)
  {
    if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3 >= a3) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
    }
    uint64_t v8 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v20 = *v5;
      unsigned int v19 = 0;
      uint64_t v9 = [v20 a2:a3];
      CFStringRef v10 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
      unsigned int v11 = sub_2161E539C(v10);
      unsigned int v19 = v11;
      uint64_t v12 = *v8;
      if (!*v8) {
        goto LABEL_17;
      }
      uint64_t v13 = a1 + 40;
      do
      {
        unsigned int v14 = *(_DWORD *)(v12 + 28);
        BOOL v15 = v14 >= v11;
        if (v14 >= v11) {
          unint64_t v16 = (uint64_t *)v12;
        }
        else {
          unint64_t v16 = (uint64_t *)(v12 + 8);
        }
        if (v15) {
          uint64_t v13 = v12;
        }
        uint64_t v12 = *v16;
      }
      while (*v16);
      if ((uint64_t *)v13 != v8 && v11 >= *(_DWORD *)(v13 + 28))
      {
      }
      else
      {
LABEL_17:
        sub_21635FE28((char **)a1, (char *)(*(void *)a1 + 8 * v7), (char *)&v20);
        sub_2162272DC((uint64_t **)(a1 + 32), &v19, &v19);
        ++v7;
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v5 = *(void ***)a2;
  }
  uint64_t v18 = *(void **)(a2 + 40);
  unint64_t v17 = (void *)(a2 + 40);
  *(v17 - 4) = v5;
  sub_21612A250((uint64_t)(v17 - 1), v18);
  *(v17 - 1) = v17;
  *unint64_t v17 = 0;
  v17[1] = 0;
  *(void *)(a1 + 24) = *(void *)a1;
}

char *sub_21635FE28(char **a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v14 = ((v5 - v6) >> 3) + 1;
    if (v14 >> 61) {
      sub_21610CB04();
    }
    uint64_t v16 = v7 >> 3;
    uint64_t v17 = v9 - (void)v6;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    if (v18)
    {
      uint64_t v20 = (char *)sub_216188754(v18);
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v21 = &v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = v7 >> 2;
        }
        uint64_t v25 = (char *)sub_216188754(v24);
        uint64_t v21 = &v25[8 * (v24 >> 2)];
        uint64_t v22 = &v25[8 * v26];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v23 = v16 + 1;
        }
        v21 -= 8 * (v23 >> 1);
      }
    }
    *(void *)uint64_t v21 = *(void *)v3;
    unint64_t v27 = *a1;
    uint64_t v28 = v21;
    if (*a1 != v8)
    {
      uint64_t v29 = v8;
      uint64_t v28 = v21;
      do
      {
        uint64_t v30 = *((void *)v29 - 1);
        v29 -= 8;
        *((void *)v28 - 1) = v30;
        v28 -= 8;
      }
      while (v29 != v27);
    }
    unint64_t v31 = a1[1];
    int64_t v32 = v31 - v8;
    if (v31 != v8) {
      memmove(v21 + 8, v8, v31 - v8);
    }
    uint64_t v33 = *a1;
    *a1 = v28;
    a1[1] = &v21[v32 + 8];
    a1[2] = v22;
    if (v33) {
      operator delete(v33);
    }
    return v21;
  }
  else if (v8 == v5)
  {
    *(void *)uint64_t v8 = *(void *)a3;
    a1[1] = v8 + 8;
  }
  else
  {
    CFStringRef v10 = v8 + 8;
    unsigned int v11 = v5 - 8;
    uint64_t v12 = a1[1];
    while (v11 < v5)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)uint64_t v12 = v13;
      v12 += 8;
    }
    a1[1] = v12;
    if (v5 != v10) {
      memmove(&v5[-8 * ((v5 - v10) >> 3)], v8, v5 - v10);
    }
    if (v8 <= v3) {
      v3 += 8 * (a1[1] > v3);
    }
    *(void *)uint64_t v8 = *(void *)v3;
  }
  return v8;
}

void sub_21636002C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216360044(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 16) = 850045863;
  *(void *)(a1 + 8) = 0;
  CFStringRef v4 = (const void **)(a1 + 8);
  *(void *)a1 = &unk_26C6C0AD0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2161A108C(a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  if (!sub_216360710()) {
    return a1;
  }
  CFLocaleRef v5 = sub_2161E29D0(a2);
  if (!v5) {
    return a1;
  }
  uint64_t v10 = 0;
  unsigned int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  uint64_t v6 = off_26797EA30;
  uint64_t v13 = off_26797EA30;
  if (!off_26797EA30)
  {
    uint64_t v7 = (void *)sub_2163608A4();
    void v11[3] = (uint64_t)dlsym(v7, "NLStringTokenizerCreate");
    off_26797EA30 = (_UNKNOWN *)v11[3];
    uint64_t v6 = (void *)v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (v6)
  {
    uint64_t v8 = (const void *)((uint64_t (*)(void, void, void, void, void, CFLocaleRef))v6)(0, 0, 0, 0, 0, v5);
    sub_216360238(v4, v8);
    CFRelease(v5);
    return a1;
  }
  dlerror();
  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_2163601E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, const void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  sub_2161BE090((const void **)va, 0);
  std::mutex::~mutex(v4);
  sub_216360238(v3, 0);
  _Unwind_Resume(a1);
}

void sub_216360238(const void **a1, const void *a2)
{
  CFStringRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_216360270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v8 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2000000000;
    uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))off_26797EA38;
    BOOL v15 = off_26797EA38;
    if (!off_26797EA38)
    {
      uint64_t v11 = (void *)sub_2163608A4();
      v13[3] = (uint64_t)dlsym(v11, "NLStringTokenizerSetString");
      off_26797EA38 = (_UNKNOWN *)v13[3];
      uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13[3];
    }
    _Block_object_dispose(&v12, 8);
    if (v10)
    {
      v10(v9, a2, a3, a4);
      std::mutex::unlock(v8);
    }
    else
    {
      dlerror();
      abort_report_np();
      __break(1u);
    }
  }
}

void sub_2163603BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  std::mutex::unlock(v7);
  _Unwind_Resume(a1);
}

BOOL sub_2163603E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  double v2 = (uint64_t (*)(uint64_t))off_26797EA40;
  uint64_t v9 = off_26797EA40;
  if (!off_26797EA40)
  {
    uint64_t v3 = (void *)sub_2163608A4();
    v7[3] = (uint64_t)dlsym(v3, "NLStringTokenizerAdvanceToNextToken");
    off_26797EA40 = (_UNKNOWN *)v7[3];
    double v2 = (uint64_t (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    CFLocaleRef v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(v1) != 0;
}

uint64_t sub_216360510(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  double v2 = (uint64_t (*)(uint64_t))off_26797EA48;
  uint64_t v9 = off_26797EA48;
  if (!off_26797EA48)
  {
    uint64_t v3 = (void *)sub_2163608A4();
    v7[3] = (uint64_t)dlsym(v3, "NLStringTokenizerGetCurrentTokenRange");
    off_26797EA48 = (_UNKNOWN *)v7[3];
    double v2 = (uint64_t (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    CFLocaleRef v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(v1);
}

uint64_t sub_216360638()
{
  return 0;
}

uint64_t sub_216360640(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C0AD0;
  double v2 = (const void **)(a1 + 8);
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  sub_216360238(v2, 0);
  return a1;
}

void sub_216360698(uint64_t a1)
{
  *(void *)a1 = &unk_26C6C0AD0;
  uint64_t v1 = (const void **)(a1 + 8);
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  sub_216360238(v1, 0);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216360710()
{
  if (!qword_26797EA28) {
    qword_26797EA28 = _sl_dlopen();
  }
  return qword_26797EA28;
}

uint64_t sub_2163607E0()
{
  uint64_t result = _sl_dlopen();
  qword_26797EA28 = result;
  return result;
}

void *sub_216360854(uint64_t a1)
{
  double v2 = (void *)sub_2163608A4();
  uint64_t result = dlsym(v2, "NLStringTokenizerCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EA30 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_2163608A4()
{
  uint64_t v0 = sub_216360710();
  if (!v0)
  {
    double v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *sub_216360900(uint64_t a1)
{
  double v2 = (void *)sub_2163608A4();
  uint64_t result = dlsym(v2, "NLStringTokenizerSetString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EA38 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_216360950(uint64_t a1)
{
  double v2 = (void *)sub_2163608A4();
  uint64_t result = dlsym(v2, "NLStringTokenizerAdvanceToNextToken");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EA40 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_2163609A0(uint64_t a1)
{
  double v2 = (void *)sub_2163608A4();
  uint64_t result = dlsym(v2, "NLStringTokenizerGetCurrentTokenRange");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_26797EA48 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_2163609F0(void *a1)
{
  *a1 = &unk_26C6BF908;
  double v2 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v2, 0);
  return a1;
}

void sub_216360A48(void *a1)
{
  *a1 = &unk_26C6BF908;
  uint64_t v1 = (const void **)(a1 + 1);
  sub_216144C28((uint64_t)(a1 + 3));
  sub_2161BE0C8(v1, 0);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216360AC0(uint64_t a1, const void *a2)
{
  return 1;
}

uint64_t sub_216360AE0()
{
  return 0;
}

uint64_t sub_216360AE8()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  CFURLRef v2 = v1;
  CFURLRef v4 = v3;
  CFLocaleRef v5 = (void *)v0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v6 = (UInt8 *)malloc_type_malloc(0x5CuLL, 0xDC1690DCuLL);
  if (v6)
  {
    uint64_t v7 = v6;
    SInt32 errorCode = 0;
    CFDataRef resourceData = 0;
    if (CFURLCreateDataAndPropertiesFromResource((CFAllocatorRef)*MEMORY[0x263EFFB08], v4, &resourceData, 0, 0, &errorCode)&& (Length = CFDataGetLength(resourceData), (uint64_t v9 = (UInt8 *)malloc_type_malloc(Length, 0xDC1690DCuLL)) != 0))
    {
      uint64_t v10 = v9;
      v64.locatiouint64_t n = 0;
      v64.CFIndex length = Length;
      CFDataGetBytes(resourceData, v64, v9);
      CFRelease(resourceData);
      *uint64_t v7 = *v10;
      unsigned int v11 = bswap32(*((unsigned __int16 *)v10 + 1)) >> 16;
      *((_WORD *)v7 + 1) = v11;
      unsigned int v12 = bswap32(*((unsigned __int16 *)v10 + 2)) >> 16;
      *((_WORD *)v7 + 2) = v12;
      *((_WORD *)v7 + 3) = bswap32(*((unsigned __int16 *)v10 + 3)) >> 16;
      *((_WORD *)v7 + 4) = bswap32(*((unsigned __int16 *)v10 + 4)) >> 16;
      *((_WORD *)v7 + 5) = bswap32(*((unsigned __int16 *)v10 + 5)) >> 16;
      *((_WORD *)v7 + 6) = bswap32(*((unsigned __int16 *)v10 + 6)) >> 16;
      *((_WORD *)v7 + 7) = bswap32(*((unsigned __int16 *)v10 + 7)) >> 16;
      *((_WORD *)v7 + 8) = bswap32(*((unsigned __int16 *)v10 + 8)) >> 16;
      *((_WORD *)v7 + 9) = bswap32(*((unsigned __int16 *)v10 + 9)) >> 16;
      uint64_t v13 = malloc_type_malloc((__int16)v11 * (uint64_t)(__int16)v12 + (__int16)v11, 0xDC1690DCuLL);
      *(void *)(v7 + 2sub_2161A108C(a9, 0) = v13;
      if (v13)
      {
        CFURLRef v57 = v2;
        uint64_t v58 = v5;
        uint64_t v59 = v10;
        memmove(v13, v10 + 20, *((__int16 *)v7 + 2) * (uint64_t)*((__int16 *)v7 + 1));
        int v14 = *((__int16 *)v7 + 2) * *((__int16 *)v7 + 1);
        unsigned int v15 = v14 + 20;
        if (v14 >= 1)
        {
          uint64_t v16 = 0;
          do
            *(unsigned char *)(*(void *)(v7 + 20) + v16++) ^= *v7;
          while (v16 < *((__int16 *)v7 + 2) * (uint64_t)*((__int16 *)v7 + 1));
        }
        uint64_t v17 = *((__int16 *)v7 + 3);
        int v18 = *((__int16 *)v7 + 4);
        if ((int)v17 > 0)
        {
          uint64_t v19 = 0;
          uint64_t v20 = __src;
          do
          {
            memmove(&__src[256 * v19], &v59[v15], v18);
            if (v18 >= 1)
            {
              UInt8 v21 = *v7;
              uint64_t v22 = v20;
              uint64_t v23 = v18;
              do
              {
                *(unsigned char *)v22 ^= v21;
                uint64_t v22 = (UChar *)((char *)v22 + 1);
                --v23;
              }
              while (v23);
            }
            v15 += v18;
            *(UChar *)((char *)&__src[256 * v19++] + v18) = 0;
            v20 += 256;
          }
          while (v19 != v17);
        }
        unint64_t v24 = malloc_type_malloc((v18 + 2) * (int)v17, 0xDC1690DCuLL);
        *(void *)(v7 + 28) = v24;
        if (v24)
        {
          if (*((__int16 *)v7 + 3) >= 1)
          {
            uint64_t v25 = 0;
            uint64_t v26 = __src;
            do
            {
              memmove((void *)(*(void *)(v7 + 28) + (*((__int16 *)v7 + 4) + 2) * (uint64_t)(int)v25++), v26, *((__int16 *)v7 + 4) + 2);
              v26 += 256;
            }
            while (v25 < *((__int16 *)v7 + 3));
          }
          uint64_t v27 = *((__int16 *)v7 + 5);
          int v28 = *((__int16 *)v7 + 6);
          if ((int)v27 > 0)
          {
            uint64_t v29 = 0;
            uint64_t v30 = __src;
            do
            {
              memmove(&__src[256 * v29], &v59[v15], v28);
              if (v28 >= 1)
              {
                UInt8 v31 = *v7;
                int64_t v32 = v30;
                uint64_t v33 = v28;
                do
                {
                  *(unsigned char *)v32 ^= v31;
                  int64_t v32 = (UChar *)((char *)v32 + 1);
                  --v33;
                }
                while (v33);
              }
              v15 += v28;
              *(UChar *)((char *)&__src[256 * v29++] + v28) = 0;
              v30 += 256;
            }
            while (v29 != v27);
          }
          uint64_t v34 = malloc_type_malloc((v28 + 2) * (int)v27, 0xDC1690DCuLL);
          *(void *)(v7 + 36) = v34;
          if (v34)
          {
            CFURLRef v2 = v57;
            uint64_t v10 = v59;
            if (*((__int16 *)v7 + 5) >= 1)
            {
              uint64_t v35 = 0;
              int v36 = __src;
              do
              {
                memmove((void *)(*(void *)(v7 + 36) + (*((__int16 *)v7 + 6) + 2) * (uint64_t)(int)v35++), v36, *((__int16 *)v7 + 6) + 2);
                v36 += 256;
              }
              while (v35 < *((__int16 *)v7 + 5));
            }
            uint64_t v37 = *((__int16 *)v7 + 7);
            size_t v38 = *((__int16 *)v7 + 7);
            memmove(__src, &v59[v15], v38);
            if ((int)v37 >= 1)
            {
              UInt8 v39 = *v7;
              unint64_t v40 = __src;
              uint64_t v41 = v37;
              do
              {
                *(unsigned char *)v40 ^= v39;
                unint64_t v40 = (UChar *)((char *)v40 + 1);
                --v41;
              }
              while (v41);
            }
            *(UChar *)((char *)__src + v38) = 0;
            BOOL v42 = (UChar *)malloc_type_malloc(v38 + 2, 0xDC1690DCuLL);
            *(void *)(v7 + 44) = v42;
            if (v42)
            {
              int v43 = v15 + v37;
              sub_2162D7D88(v42, __src, *((__int16 *)v7 + 7) + 2);
              uint64_t v44 = *((__int16 *)v7 + 8);
              size_t v45 = *((__int16 *)v7 + 8);
              memmove(__src, &v59[v43], v45);
              if ((int)v44 >= 1)
              {
                UInt8 v46 = *v7;
                uint64_t v47 = __src;
                uint64_t v48 = v44;
                do
                {
                  *(unsigned char *)v47 ^= v46;
                  uint64_t v47 = (UChar *)((char *)v47 + 1);
                  --v48;
                }
                while (v48);
              }
              *(UChar *)((char *)__src + v45) = 0;
              uint64_t v49 = (UChar *)malloc_type_malloc(v45 + 2, 0xDC1690DCuLL);
              *(void *)(v7 + 52) = v49;
              CFLocaleRef v5 = v58;
              if (v49)
              {
                sub_2162D7D88(v49, __src, *((__int16 *)v7 + 8) + 2);
                int64_t v50 = *((__int16 *)v7 + 9);
                memmove(__src, &v59[(v43 + v44)], v50);
                if (v50 >= 1)
                {
                  uint64_t v51 = (unsigned __int16)v50;
                  UInt8 v52 = *v7;
                  CFTypeRef v53 = __src;
                  do
                  {
                    *(unsigned char *)v53 ^= v52;
                    CFTypeRef v53 = (UChar *)((char *)v53 + 1);
                    --v51;
                  }
                  while (v51);
                }
                *(UChar *)((char *)__src + v5sub_2161A108C(a9, 0) = 0;
                uint64_t v54 = (UChar *)malloc_type_malloc(v50 + 2, 0xDC1690DCuLL);
                *(void *)(v7 + 6sub_2161A108C(a9, 0) = v54;
                if (v54)
                {
                  sub_2162D7D88(v54, __src, *((__int16 *)v7 + 9) + 2);
                  free(v59);
                  goto LABEL_54;
                }
                SInt32 errorCode = -108;
                uint64_t v49 = *(UChar **)(v7 + 52);
              }
              else
              {
                SInt32 errorCode = -108;
              }
              free(v49);
              BOOL v42 = *(UChar **)(v7 + 44);
            }
            else
            {
              SInt32 errorCode = -108;
              CFLocaleRef v5 = v58;
            }
            free(v42);
            uint64_t v34 = *(void **)(v7 + 36);
          }
          else
          {
            SInt32 errorCode = -108;
            CFURLRef v2 = v57;
            CFLocaleRef v5 = v58;
            uint64_t v10 = v59;
          }
          free(v34);
          unint64_t v24 = *(void **)(v7 + 28);
        }
        else
        {
          SInt32 errorCode = -108;
          CFURLRef v2 = v57;
          CFLocaleRef v5 = v58;
          uint64_t v10 = v59;
        }
        free(v24);
        uint64_t v13 = *(void **)(v7 + 20);
      }
      else
      {
        SInt32 errorCode = -108;
      }
      free(v13);
      free(v10);
      uint64_t v55 = errorCode;
      if (!errorCode)
      {
LABEL_54:
        uint64_t v55 = sub_2161E07BC((void **)(v7 + 68), v2);
        if (!v55)
        {
          *CFLocaleRef v5 = v7;
          return v55;
        }
      }
    }
    else
    {
      uint64_t v55 = 4294967188;
    }
    free(v7);
    return v55;
  }
  return 4294967188;
}

void sub_216361120(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 20));
    free(*(void **)(a1 + 28));
    free(*(void **)(a1 + 36));
    free(*(void **)(a1 + 44));
    free(*(void **)(a1 + 52));
    free(*(void **)(a1 + 60));
    sub_2161E070C(a1 + 68);
    free((void *)a1);
  }
}

uint64_t sub_216361194(uint64_t a1, unsigned __int16 *a2, int a3, int a4, uint64_t a5, _DWORD *a6, int *a7, int a8, __int16 a9, char a10)
{
  int v14 = a3;
  uint64_t v226 = *MEMORY[0x263EF8340];
  if (a3 > 127)
  {
    uint64_t v16 = 0;
    do
    {
      if (v16 == 64) {
        goto LABEL_8;
      }
      int v17 = *(unsigned __int16 *)((char *)a2 + (a3 - 128) + v16 * 2);
      s[v16++] = v17;
    }
    while (v17);
    if (v16 == 64)
    {
LABEL_8:
      uint64_t v18 = 128;
      goto LABEL_15;
    }
    uint64_t v18 = 128;
    bzero(&s[v16], 128 - v16 * 2);
LABEL_15:
    int v14 = 128;
  }
  else
  {
    if ((a3 - 257) < 0xFFFFFEFD) {
      return 4294967186;
    }
    uint64_t v18 = a3;
    int v19 = a3 + ((unsigned __int16)(a3 & 0x8000) >> 15);
    uint64_t v20 = (uint64_t)(__int16)v19 >> 1;
    size_t v21 = 2 * ((__int16)v19 >> 1);
    uint64_t v22 = s;
    while (v20)
    {
      int v23 = *a2++;
      *v22++ = v23;
      v21 -= 2;
      --v20;
      if (!v23)
      {
        if (v20) {
          bzero(v22, v21);
        }
        break;
      }
    }
  }
  *(UChar *)((char *)s + v18) = 0;
  v210[0] = a4;
  v201[0] = a10;
  int v24 = v14 - a4;
  if (v14 == a4)
  {
    uint64_t result = 0;
    *a7 = 0;
    return result;
  }
  int v194 = a4;
  int v190 = v14;
  v191 = a6;
  *(void *)__int16 v192 = a5;
  uint64_t v193 = a7;
  int v25 = 0;
  int v26 = 0;
  int v27 = 0;
  int v28 = a9;
  *(_WORD *)&v220[4] = 0;
  v219[0] = 0;
  LOWORD(a6) = 1;
  int v29 = a9;
  do
  {
    int v30 = sub_2163643D4(a1, (uint64_t)s, (__int16)v24 - (__int16)v25, 0, &v220[4], v219);
    if (v30)
    {
      int v27 = 0;
      __int16 v31 = (__int16)a6;
      int v26 = v30;
      int v29 = v28;
    }
    else
    {
      int v32 = sub_2163643D4(a1, (uint64_t)s, (__int16)v24 - (__int16)v25 + v26, v27, &v220[4], v219);
      if (v32) {
        __int16 v31 = (_WORD)a6 - 1;
      }
      else {
        __int16 v31 = (__int16)a6;
      }
      if (v32)
      {
        v25 -= v26;
        int v26 = v32;
      }
      else
      {
        int v26 = 0;
      }
      if (!v32) {
        int v29 = v28;
      }
    }
    v25 += v26;
    BOOL v33 = (__int16)v29 < *(__int16 *)&v220[4] || (unsigned __int16)v29 == 0;
    if (v33) {
      int v28 = *(__int16 *)&v220[4];
    }
    else {
      int v28 = v29;
    }
    *(_WORD *)&v200[2 * v31 + 1] = v28;
    char v34 = v219[0];
    v201[v31 + 51] = sub_2162B55B0(v219[0]);
    uint64_t v35 = (__int16)v25;
    v210[v31] = v35;
    v201[v31] = v34;
    LODWORD(a6) = (__int16)(v31 + 1);
    if ((int)a6 > 49)
    {
      __int16 v31 = 0;
      goto LABEL_41;
    }
    if (!v26) {
      break;
    }
    ++v27;
  }
  while ((unsigned __int16)v25 != (unsigned __int16)v24);
  if (v26) {
    goto LABEL_42;
  }
LABEL_41:
  LOWORD(a6) = v31;
LABEL_42:
  int v36 = v193;
  if (!(_WORD)v25 || (__int16)a6 <= 1) {
    goto LABEL_342;
  }
  if ((unsigned __int16)a6 >= 0x10u)
  {
    *(_WORD *)(a5 + 66) = v25 + v194;
    int v37 = v201[(unsigned __int16)a6 + 50];
    if (v37 == 1)
    {
      char v38 = 2;
    }
    else
    {
      if (v37 != 4) {
        goto LABEL_342;
      }
      char v38 = 6;
    }
    *(unsigned char *)(a5 + 68) = v37;
    *(unsigned char *)(a5 + 69) = v38;
    if ((int)v35 + v194 <= 63)
    {
      LODWORD(v178) = v24 - v35;
      if ((2 * u_strlen((UChar *)((char *)s + v24 - (int)v35)) - 65) < 0xFFFFFFBD) {
        return 4294967186;
      }
      uint64_t v178 = (int)v178;
      sub_2162D7D88((UChar *)a5, (UChar *)((char *)s + (int)v178), 0x42uLL);
      if ((int)v178 >= v190)
      {
LABEL_341:
        uint64_t result = 0;
        _DWORD *v191 = -1;
        *uint64_t v193 = 1;
        return result;
      }
      while (1)
      {
        v219[0] = 0;
        if (!*(_WORD *)(a1 + 82)) {
          break;
        }
        sub_216367B18(*(void *)(a1 + 84), (unsigned __int8 *)s + v178, 2, &v220[4], v219);
        if (!v219[0]) {
          break;
        }
        v178 += 2;
        if (v178 >= v190) {
          goto LABEL_341;
        }
      }
    }
LABEL_342:
    uint64_t result = 0;
    *uint64_t v193 = 0;
    return result;
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v221 = 0x100010001;
  __int16 v222 = 1;
  uint64_t v223 = 0;
  uint64_t v42 = *(void *)(a1 + 60);
  uint64_t v43 = v42 + 40;
  uint64_t v224 = 0x1000100010001;
  int v225 = 0;
  do
  {
    uint64_t v44 = (char *)v203 + v40;
    *(unsigned __int16 *)((char *)v203 + v40 + 1) = *(_WORD *)(v43 + v39);
    if (*(_WORD *)&v220[v39 + 4])
    {
      *uint64_t v44 = 2;
      *(_WORD *)(v44 + 3) = *(_WORD *)(v43 + v39 + 32);
      size_t v45 = v44 + 5;
    }
    else
    {
      size_t v45 = (unsigned __int16 *)((char *)&v203[4 * v41 + 1] - v41 + 1);
      *((unsigned char *)v203 + v4sub_2161A108C(a9, 0) = -1;
    }
    *size_t v45 = 0;
    ++v41;
    v40 += 7;
    v39 += 2;
  }
  while (v40 != 112);
  char v204 = -1;
  int v205 = *(unsigned __int16 *)(v42 + 104);
  char v206 = -1;
  __int16 v207 = *(_WORD *)(v42 + 106);
  __int16 v208 = 0;
  *uint64_t v193 = 0;
  LODWORD(v46) = *v191;
  if (!*v191)
  {
    LODWORD(v46) = (unsigned __int16)a6 - 1;
    _DWORD *v191 = v46;
  }
  if ((int)v46 >= 1)
  {
    int v47 = 0;
    uint64_t v46 = v46;
    uint64_t v189 = a5 + 66;
    int v195 = (__int16)v25;
LABEL_57:
    if (a8 && v210[v46] != v35) {
      goto LABEL_69;
    }
    uint64_t v48 = v35;
    if ((2 * u_strlen(s) - 257) < 0xFFFFFEFD) {
      goto LABEL_60;
    }
    sub_2162D7D88(v213, s, 0x102uLL);
    if (*v36 >= 46)
    {
      *int v36 = v47;
      goto LABEL_344;
    }
    uint64_t v49 = *(void *)(a1 + 60);
    int64_t v50 = *(unsigned __int16 **)(a1 + 44);
    v218[0] = 0;
    v216[0] = 0;
    *(_WORD *)&v215[2] = 0;
    int v199 = 0;
    uint64_t v198 = 0;
    unsigned int v51 = v201[v46];
    BOOL v52 = v51 - 200 > 3 || v51 == 201;
    if (!v52
      || (v51 & 0xFE) == 2
      || *(unsigned __int16 *)&v201[v46] / 0xAu - 13 < 3
      || v51 - 112 <= 9 && ((1 << (v51 - 112)) & 0x203) != 0
      || (v51 & 0xFE) == 0x72)
    {
      goto LABEL_67;
    }
    unsigned int v54 = v201[v46];
    uint64_t v55 = v46;
    do
    {
      unsigned int v56 = v54;
      unsigned int v54 = v200[v55 + 102];
      if (v56 <= 0x2C && ((1 << v56) & 0x100000804000) != 0) {
        goto LABEL_67;
      }
      BOOL v57 = v56 == 93 || v56 == 45;
      BOOL v58 = v57 || v56 == 73;
      BOOL v59 = v58;
      if (v54 != 100 && v59) {
        goto LABEL_67;
      }
      if (v56 - 30 < 3 || v56 == 210)
      {
        if (v54 - 110 <= 0xA && ((1 << (v54 - 110)) & 0x403) != 0) {
          goto LABEL_67;
        }
      }
      else if (v54 - 112 <= 9 && ((1 << (v54 - 112)) & 0x203) != 0)
      {
        goto LABEL_67;
      }
      if ((v54 & 0xFE) == 0x72)
      {
        if (v56 - 60 > 0x17 || ((1 << (v56 - 60)) & 0xB0000B) == 0) {
          goto LABEL_67;
        }
      }
      else if (v56 == 83)
      {
        if (v54 != 120 && v54 != 150) {
          goto LABEL_67;
        }
      }
      else
      {
        if (v56 == 63
          || v54 == 45 && v56 - 110 <= 0x28 && ((1 << (v56 - 110)) & 0x10040100C3FLL) != 0)
        {
          goto LABEL_67;
        }
        int v187 = sub_2162B55B0(v200[v55 + 102]);
        if (!(v187 | sub_2162B55B0(v56)) && v56 <= 0x63 && v54 < 0x64) {
          goto LABEL_67;
        }
      }
      --v55;
    }
    while ((unint64_t)(v55 + 1) > 1);
    uint64_t v61 = 0;
    unint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    while (1)
    {
      unsigned int v69 = v201[v68];
      if (v69 <= 0x45)
      {
        if (v69 > 0x3D) {
          goto LABEL_147;
        }
        if (((1 << v69) & 0x1004010040100401) == 0)
        {
          if (((1 << v69) & 0x2008020080200802) == 0)
          {
LABEL_147:
            if (v51 < 2 || v63 || v62) {
              goto LABEL_67;
            }
            ++v65;
            goto LABEL_129;
          }
          goto LABEL_127;
        }
      }
      else
      {
        char v70 = v69 - 70;
        if (v69 - 70 > 0x33) {
          goto LABEL_123;
        }
        if (((1 << v70) & 0xC3F00C0000000) != 0)
        {
LABEL_141:
          if (v51 < 2 || v63 || v62) {
            goto LABEL_67;
          }
          uint64_t v63 = 0;
          ++v64;
          goto LABEL_145;
        }
        if (((1 << v70) & 0x100401) == 0)
        {
          if (((1 << v70) & 0x200802) == 0)
          {
LABEL_123:
            switch(v201[v68])
            {
              case 0xC8:
              case 0xCA:
                goto LABEL_128;
              case 0xC9:
              case 0xCB:
                break;
              default:
                if (v69 - 130 <= 0x14 && ((1 << (v69 + 126)) & 0x100401) != 0) {
                  goto LABEL_141;
                }
                goto LABEL_147;
            }
          }
LABEL_127:
          ++v67;
          goto LABEL_129;
        }
      }
LABEL_128:
      ++v66;
LABEL_129:
      if ((v69 & 0xFE) == 0xC8)
      {
        if (v64 | v65) {
          goto LABEL_67;
        }
        uint64_t v65 = 0;
        uint64_t v64 = 0;
        ++v62;
        uint64_t v61 = v66 + v67 - v63;
      }
      else if ((v69 & 0xFE) == 0xCA)
      {
        if (v64 | v65) {
          goto LABEL_67;
        }
        if (v66 + v67 == ++v63 + v61 || 0xAAAAAAAAAAAAAAABLL * (v66 + v67 - (v63 + v61)) >= 0x5555555555555556) {
          goto LABEL_67;
        }
        uint64_t v65 = 0;
        uint64_t v64 = 0;
      }
LABEL_145:
      if (v46 + 1 == ++v68)
      {
        if (v62 >= 2 && v63) {
          goto LABEL_67;
        }
        uint64_t v185 = v49;
        uint64_t v186 = v50;
        if (v63) {
          ++v201[v46 + 51];
        }
        uint64_t v188 = (v210[0] + v210[v46]);
        if (v188 > 0x100) {
          goto LABEL_60;
        }
        sub_2162D7DE4((uint64_t)v212, (uint64_t)v213 + (v190 - v188), v188);
        *(UChar *)((char *)v212 + v188) = 0;
        int v72 = 2 * u_strlen(v212);
        if ((v72 & 0xFE) != 0)
        {
          unsigned __int16 v73 = 0;
          unint64_t v74 = 0;
          v200[0] = 0;
          unint64_t v75 = v72 & 0xFE;
          uint64_t v76 = &v211[v75 + 38];
          char v77 = v72 - 2;
          do
          {
            if (*(_WORD *)(a1 + 82))
            {
              sub_216367B18(*(void *)(a1 + 84), v76, 2, v219, v200);
              if (v200[0] && v219[0] == 101) {
                v211[(__int16)v73++] = v77 - v74;
              }
            }
            else
            {
              v200[0] = 0;
            }
            v74 += 2;
            v76 -= 2;
          }
          while (v74 < v75);
          if (v73)
          {
            *(_WORD *)&v220[4] = 0;
            uint64_t v78 = v211[(__int16)v73 - 1];
            sub_2162D7DE4((uint64_t)&v220[4], (uint64_t)v212, v78);
            *(_WORD *)&v220[v78 + 4] = 0;
            if ((__int16)v73 >= 2)
            {
              int v79 = v73 - 2;
              while (1)
              {
                uint64_t v80 = &v211[v79];
                unsigned int v81 = *v80;
                unsigned int v82 = v80[1];
                if (v81 - v82 + 2 * u_strlen((const UChar *)&v220[4]) > 0x102) {
                  break;
                }
                unsigned int v83 = v81 - 2;
                uint64_t v84 = &v220[4];
                unint64_t v85 = v220;
                do
                {
                  unint64_t v86 = v84;
                  int v87 = *((unsigned __int16 *)v85 + 2);
                  v85 += 2;
                  v84 += 2;
                }
                while (v87);
                uint64_t v78 = v78 + v81 - 2 - v82;
                BOOL v88 = __OFSUB__(v83, v82);
                int v89 = v83 - v82;
                if (v89 < 0 != v88) {
                  ++v89;
                }
                uint64_t v90 = (uint64_t)v89 >> 1;
                uint64_t v91 = (UChar *)((char *)&v212[1] + v82);
                do
                {
                  int64x2_t v92 = v86;
                  if (!v90) {
                    break;
                  }
                  int v93 = *v91++;
                  *v86++ = v93;
                  --v90;
                }
                while (v93);
                *int64x2_t v92 = 0;
                *(_WORD *)&v220[v78 + 4] = 0;
                BOOL v53 = v79-- <= 0;
                if (v53) {
                  goto LABEL_177;
                }
              }
LABEL_179:
              int v36 = v193;
              goto LABEL_60;
            }
LABEL_177:
            int32_t v94 = u_strlen((const UChar *)&v220[4]);
            int v95 = 2 * (u_strlen(v212) + v94);
            int v96 = v211[0];
            if (v95 - v211[0] > 0x102) {
              goto LABEL_179;
            }
            sub_2162D7E48((uint64_t)&v220[4], (UChar *)((char *)&v212[1] + v211[0]), 0x102uLL);
            *(_WORD *)&v220[v78 + 2 + 2 * u_strlen(v212) - v96] = 0;
            if ((2 * u_strlen((const UChar *)&v220[4]) - 257) < 0xFFFFFEFD) {
              goto LABEL_179;
            }
            sub_2162D7D88(v212, (UChar *)&v220[4], 0x102uLL);
          }
        }
        int v36 = v193;
        if (sub_216362964(v212, v218, a1, v203, 0, &v199)) {
          goto LABEL_60;
        }
        int v179 = v199;
        if (!v199)
        {
          int v36 = v193;
          if ((2 * u_strlen(v212) - 65) < 0xFFFFFFBD) {
            goto LABEL_60;
          }
          sub_2162D7D88(v216, v212, 0x42uLL);
          int32_t v134 = u_strlen(v216);
          int v135 = v134 << 17;
          if (!(v134 << 17)) {
            goto LABEL_327;
          }
          if (v135 >= 1)
          {
            __int16 v136 = v134;
            int v137 = sub_2163628D8(a1, (unsigned __int8 *)v216);
            int v36 = v193;
            if (v137 == -11) {
              goto LABEL_67;
            }
            int v138 = v137;
            int v139 = 0;
            int v140 = 0;
            char v141 = 0;
            int v142 = (__int16)(2 * v136);
            while (1)
            {
              if (!((unsigned __int16)v139 | v138)) {
                char v141 = 1;
              }
              if ((2 * u_strlen((const UChar *)&v215[2]) - 63) < 0xFFFFFFBD) {
                goto LABEL_60;
              }
              if (v138 == 102)
              {
                int v36 = v193;
                if (v140 == 2) {
                  goto LABEL_67;
                }
                uint64_t v143 = v214;
                if (!(_WORD)v139) {
                  goto LABEL_67;
                }
                do
                {
                  int v144 = *((unsigned __int16 *)v143 + 2);
                  v143 += 2;
                }
                while (v144);
                int v145 = *v186;
                *((_WORD *)v143 + 1) = v145;
                BOOL v33 = v145 == 0;
                int v140 = 2;
                uint64_t v146 = 4;
                if (v33) {
                  uint64_t v146 = 2;
                }
                *(_WORD *)&v143[v146] = 0;
                v139 += 2;
                if (v142 <= (__int16)v139) {
                  goto LABEL_67;
                }
              }
              else
              {
                unint64_t v147 = v214;
                do
                {
                  int v148 = *((unsigned __int16 *)v147 + 2);
                  v147 += 2;
                }
                while (v148);
                if (v140 == 2) {
                  int v140 = 1;
                }
                int v149 = *(unsigned __int16 *)(v185 + 20 + 2 * v138);
                *((_WORD *)v147 + 1) = v149;
                BOOL v33 = v149 == 0;
                uint64_t v150 = 4;
                if (v33) {
                  uint64_t v150 = 2;
                }
                *(_WORD *)&v147[v150] = 0;
                v139 += 2;
                if (v142 <= (__int16)v139) {
                  goto LABEL_289;
                }
              }
              int v138 = sub_2163628D8(a1, (unsigned __int8 *)v216 + (__int16)v139);
              int v36 = v193;
              if (v138 == -11) {
                goto LABEL_67;
              }
            }
          }
          char v141 = 0;
          int v140 = 0;
LABEL_289:
          int v36 = v193;
          if ((2 * u_strlen((const UChar *)&v215[2]) - 65) >= 0xFFFFFFBD)
          {
            sub_2162D7D88((UChar *)(*(void *)v192 + 72 * *v193), (UChar *)&v215[2], 0x42uLL);
            int v151 = *v193;
            uint64_t v152 = *(void *)v192 + 72 * *v193;
            *(unsigned char *)(v152 + 69) = 6;
            int v182 = v201[v46 + 51];
            *(unsigned char *)(v152 + 68) = v182;
            __int16 v184 = *(_WORD *)&v200[2 * v46 + 1];
            *(_WORD *)(v152 + 7sub_2161A108C(a9, 0) = v184;
            *uint64_t v193 = v151 + 1;
            goto LABEL_292;
          }
          goto LABEL_60;
        }
        int v36 = v193;
        if ((v46 & 0x8000) != 0) {
          goto LABEL_67;
        }
        LOBYTE(v183) = 0;
        uint64_t v180 = 0;
        unint64_t v181 = 0;
        int v97 = (__int16)v46;
        unint64_t v98 = (unsigned __int16)v46;
        uint64_t v99 = (__int16)v46;
LABEL_185:
        uint64_t v100 = v201[v98];
        if ((v100 - 120) > 9)
        {
          if ((v100 - 110) > 9u)
          {
            int v36 = v193;
            if ((v100 - 100) <= 9u && (v183 == 1 || v183 == 4)) {
              goto LABEL_67;
            }
          }
          else
          {
            int v36 = v193;
            if ((v183 == 4 || v183 == 1)
              && ((int)v46 - (int)v99 < 3 || (v201[v99 + 2] + 96) < 0xD8u))
            {
              goto LABEL_67;
            }
          }
        }
        else if (v183 == 4 || v183 == 1)
        {
          BOOL v101 = (int)v46 - (int)v99 >= 3 && (v201[v99 + 2] + 126) < 0x1Eu;
          if (v98 < 2)
          {
            int v36 = v193;
            if (v98 == 1) {
              goto LABEL_206;
            }
            goto LABEL_207;
          }
          if (v201[v97 - 2] - 110 < 0xA) {
            BOOL v101 = 1;
          }
          int v36 = v193;
LABEL_206:
          if (v201[v97 - 1] - 110 >= 0xA)
          {
LABEL_207:
            if (!v101) {
              goto LABEL_67;
            }
          }
        }
        int v183 = sub_2162B55B0(v201[v98]);
        if (v183 == 4)
        {
          ++BYTE4(v180);
        }
        else if (v183 == 1)
        {
          LOBYTE(v18sub_2161A108C(a9, 0) = v180 + 1;
        }
        uint64_t v102 = (205 * v100) >> 11;
        if ((v102 - 10) < 6) {
          int v103 = 1;
        }
        else {
          int v103 = HIDWORD(v181);
        }
        int v104 = v181;
        if ((v100 + 46) < 0xAu) {
          int v104 = 1;
        }
        unint64_t v181 = __PAIR64__(v103, v104);
        int v36 = v193;
        if (v99 == v46 && (v102 - 13) < 3) {
          goto LABEL_67;
        }
        if ((2 * u_strlen(v218) - 63) < 0xFFFFFFBD) {
          goto LABEL_60;
        }
        if (v100 > 0x9F)
        {
          int v36 = v193;
          if ((v100 + 46) > 9u) {
            goto LABEL_67;
          }
          uint64_t v102 = v100 - 194;
        }
        unint64_t v105 = v217;
        do
        {
          int v106 = *((unsigned __int16 *)v105 + 2);
          v105 += 2;
        }
        while (v106);
        int v107 = *(unsigned __int16 *)&v202[8 * v102 - v102 + 3];
        *((_WORD *)v105 + 1) = v107;
        BOOL v33 = v107 == 0;
        uint64_t v108 = 4;
        if (v33) {
          uint64_t v108 = 2;
        }
        *(_WORD *)&v105[v108] = 0;
        int v97 = v98 - 1;
        --v99;
        BOOL v53 = (uint64_t)v98-- <= 0;
        if (v53)
        {
          int v36 = v193;
          if (v180 | BYTE4(v180))
          {
            char v109 = v180 <= BYTE4(v180) ? 6 : 3;
            v201[v46 + 51] = v109;
            int v110 = sub_2162B55B0(v51);
            if (v110 != 4 && v110 != 1) {
              goto LABEL_67;
            }
          }
          if (!WORD2(v181)) {
            goto LABEL_67;
          }
          if ((2 * u_strlen(v218) - 65) < 0xFFFFFFBD) {
            goto LABEL_60;
          }
          sub_2162D7D88((UChar *)(*(void *)v192 + 72 * *v193), v218, 0x42uLL);
          int v111 = *v193;
          uint64_t v112 = *(void *)v192 + 72 * *v193;
          *(unsigned char *)(v112 + 69) = 0;
          int v182 = v201[v46 + 51];
          *(unsigned char *)(v112 + 68) = v182;
          __int16 v184 = *(_WORD *)&v200[2 * v46 + 1];
          *(_WORD *)(v112 + 7sub_2161A108C(a9, 0) = v184;
          int v113 = v111 + 1;
          *uint64_t v193 = v113;
          if ((_WORD)v181)
          {
            int v114 = 0;
            goto LABEL_239;
          }
          char v141 = 0;
          int v140 = 0;
          int v135 = 0;
LABEL_292:
          if (v179)
          {
            int v36 = v193;
            if (sub_216363260(a1, v218, v216, (int *)&v198)) {
              goto LABEL_60;
            }
            if (v198) {
              goto LABEL_67;
            }
            if (sub_216362964(v216, (UChar *)&v215[2], a1, v203, 1, (int *)&v198 + 1)
              || (2 * u_strlen((const UChar *)&v215[2]) - 65) < 0xFFFFFFBD)
            {
              goto LABEL_60;
            }
            sub_2162D7D88((UChar *)(*(void *)v192 + 72 * *v193), (UChar *)&v215[2], 0x42uLL);
            int v153 = *v193;
            uint64_t v154 = *(void *)v192 + 72 * *v193;
            *(unsigned char *)(v154 + 69) = 1;
            *(unsigned char *)(v154 + 68) = v182;
            *(_WORD *)(v154 + 7sub_2161A108C(a9, 0) = v184;
            int v155 = v153 + 1;
            *uint64_t v193 = v153 + 1;
            if (v182 == 6)
            {
              char v156 = (_WORD *)(*(void *)v192 + 72 * v155);
              v156[34] = 2310;
              uint64_t v157 = (_WORD *)(*(void *)v192 + 72 * (v153 + 2));
              v157[34] = 1286;
              v156[35] = v184;
              v157[35] = v184;
              int v158 = sub_216364038(a1, v218, v156, v157);
              int v155 = *v193;
              if (!v158)
              {
                v155 += 2;
                *uint64_t v193 = v155;
              }
            }
            char v159 = 6;
LABEL_305:
            uint64_t v160 = *(void *)v192 + 72 * v155;
            *(unsigned char *)(v160 + 69) = v159;
            *(unsigned char *)(v160 + 68) = v182;
            *(_WORD *)(v160 + 7sub_2161A108C(a9, 0) = v184;
            int v36 = v193;
            if ((2 * u_strlen(v216) - 65) < 0xFFFFFFBD) {
              goto LABEL_60;
            }
            sub_2162D7D88((UChar *)(*(void *)v192 + 72 * *v193), v216, 0x42uLL);
            int v113 = *v193 + 1;
            *uint64_t v193 = v113;
            int v114 = 1;
LABEL_239:
            if (!v179)
            {
              int v36 = v193;
              if ((2 * u_strlen(v212) - 65) >= 0xFFFFFFBD)
              {
                sub_2162D7D88(v216, v212, 0x42uLL);
                if (!sub_216362964(v216, (UChar *)&v215[2], a1, v203, 1, (int *)&v198 + 1)
                  && (2 * u_strlen((const UChar *)&v215[2]) - 65) >= 0xFFFFFFBD)
                {
                  sub_2162D7D88((UChar *)(*(void *)v192 + 72 * *v193), (UChar *)&v215[2], 0x42uLL);
                  int v176 = *v193;
                  uint64_t v177 = *(void *)v192 + 72 * *v193;
                  *(unsigned char *)(v177 + 69) = 1;
                  *(unsigned char *)(v177 + 68) = v182;
                  *(_WORD *)(v177 + 7sub_2161A108C(a9, 0) = v184;
                  int v113 = v176 + 1;
                  *uint64_t v193 = v113;
                  goto LABEL_240;
                }
              }
              goto LABEL_60;
            }
LABEL_240:
            v218[0] = 0;
            *(_WORD *)&v215[2] = 0;
            if (v114)
            {
              int32_t v115 = u_strlen(v216);
              if (v115 << 17)
              {
                if (v115 << 17 >= 1)
                {
                  uint64_t v116 = 0;
                  int v117 = (__int16)(2 * v115);
                  do
                  {
                    int v118 = sub_2163628D8(a1, (unsigned __int8 *)&v216[v116]);
                    int v36 = v193;
                    if (v118 == -11) {
                      goto LABEL_67;
                    }
                    int v119 = v118;
                    if ((2 * u_strlen(v218) - 63) < 0xFFFFFFBD) {
                      goto LABEL_60;
                    }
                    uint64_t v120 = v217;
                    do
                    {
                      int v121 = *((unsigned __int16 *)v120 + 2);
                      v120 += 2;
                    }
                    while (v121);
                    int v122 = *(unsigned __int16 *)&v202[8 * v119 - v119 + 3];
                    *((_WORD *)v120 + 1) = v122;
                    BOOL v33 = v122 == 0;
                    uint64_t v123 = 4;
                    if (v33) {
                      uint64_t v123 = 2;
                    }
                    *(_WORD *)&v120[v123] = 0;
                    int v36 = v193;
                    if ((2 * u_strlen((const UChar *)&v215[2]) - 63) < 0xFFFFFFBD) {
                      goto LABEL_60;
                    }
                    uint64_t v124 = v214;
                    do
                    {
                      int v125 = *((unsigned __int16 *)v124 + 2);
                      v124 += 2;
                    }
                    while (v125);
                    int v126 = *(unsigned __int16 *)(v185 + 2 * v119);
                    *((_WORD *)v124 + 1) = v126;
                    BOOL v33 = v126 == 0;
                    uint64_t v127 = 4;
                    if (v33) {
                      uint64_t v127 = 2;
                    }
                    *(_WORD *)&v124[v127] = 0;
                    ++v116;
                  }
                  while (v117 > (unsigned __int16)(v116 * 2));
                }
                int v36 = v193;
                if ((2 * u_strlen(v218) - 65) >= 0xFFFFFFBD)
                {
                  sub_2162D7D88((UChar *)(*(void *)v192 + 72 * *v193), v218, 0x42uLL);
                  int v128 = *v193;
                  uint64_t v129 = *(void *)v192 + 72 * *v193;
                  *(unsigned char *)(v129 + 69) = 10;
                  *(unsigned char *)(v129 + 68) = v182;
                  *(_WORD *)(v129 + 7sub_2161A108C(a9, 0) = v184;
                  *uint64_t v193 = v128 + 1;
                  if ((2 * u_strlen((const UChar *)&v215[2]) - 65) >= 0xFFFFFFBD)
                  {
                    sub_2162D7D88((UChar *)(*(void *)v192 + 72 * *v193), (UChar *)&v215[2], 0x42uLL);
                    int v130 = *v193;
                    uint64_t v131 = *(void *)v192 + 72 * *v193;
                    *(unsigned char *)(v131 + 69) = 2;
                    *(unsigned char *)(v131 + 68) = v182;
                    *(_WORD *)(v131 + 7sub_2161A108C(a9, 0) = v184;
                    int v113 = v130 + 1;
                    *uint64_t v193 = v113;
                    goto LABEL_259;
                  }
                }
LABEL_60:
                *int v36 = v47;
                if (v195 == -4)
                {
LABEL_344:
                  _DWORD *v191 = v46;
                  break;
                }
LABEL_68:
                int v47 = *v36;
                uint64_t v35 = v48;
LABEL_69:
                BOOL v53 = v46-- <= 1;
                if (!v53) {
                  goto LABEL_57;
                }
LABEL_347:
                uint64_t result = 0;
                _DWORD *v191 = -1;
                return result;
              }
            }
            else
            {
LABEL_259:
              if (v113 > v47)
              {
                uint64_t v132 = v113 - (uint64_t)v47;
                unint64_t v133 = (_WORD *)(v189 + 72 * v47);
                do
                {
                  _WORD *v133 = v188;
                  v133 += 36;
                  --v132;
                }
                while (v132);
              }
            }
          }
          else
          {
            if (!v140 && !v141)
            {
              int v36 = v193;
              if ((2 * u_strlen(v218) - 65) >= 0xFFFFFFBD)
              {
                sub_2162D7D88(v216, v218, 0x42uLL);
                char v159 = 0;
                int v155 = *v193;
                goto LABEL_305;
              }
              goto LABEL_60;
            }
            *(_WORD *)&v215[2] = 0;
            if (v135 >= 1)
            {
              __int16 v161 = 0;
              while (1)
              {
                int v162 = sub_2163628D8(a1, (unsigned __int8 *)&v216[v161 / 2u]);
                int v36 = v193;
                if (v162 == -11) {
                  break;
                }
                int v163 = v162;
                if ((2 * u_strlen((const UChar *)&v215[2]) - 63) < 0xFFFFFFBD) {
                  goto LABEL_60;
                }
                if (v163 == 102)
                {
                  uint64_t v164 = v214;
                  do
                  {
                    int v165 = *((unsigned __int16 *)v164 + 2);
                    v164 += 2;
                  }
                  while (v165);
                  int v166 = v186[11];
                  *((_WORD *)v164 + 1) = v166;
                  BOOL v33 = v166 == 0;
                  uint64_t v167 = 4;
                  if (v33) {
                    uint64_t v167 = 2;
                  }
                  uint64_t v168 = &v164[v167];
                }
                else
                {
                  __int16 v169 = v215;
                  do
                  {
                    int v170 = (unsigned __int16)v169[1];
                    ++v169;
                  }
                  while (v170);
                  int v171 = *(unsigned __int16 *)(v185 + 2 * v163);
                  *__int16 v169 = v171;
                  if (!v171) {
                    --v169;
                  }
                  uint64_t v168 = v169 + 1;
                }
                *uint64_t v168 = 0;
                v161 += 2;
                if (v135 >> 16 <= v161) {
                  goto LABEL_323;
                }
              }
LABEL_67:
              *int v36 = v47;
              int v195 = -11;
              goto LABEL_68;
            }
LABEL_323:
            int v36 = v193;
            if ((2 * u_strlen((const UChar *)&v215[2]) - 65) < 0xFFFFFFBD) {
              goto LABEL_60;
            }
            sub_2162D7D88((UChar *)(*(void *)v192 + 72 * *v193), (UChar *)&v215[2], 0x42uLL);
            uint64_t v172 = *v193;
            uint64_t v173 = *(void *)v192 + 72 * (int)v172;
            *(unsigned char *)(v173 + 69) = 2;
            *(unsigned char *)(v173 + 68) = v182;
            *(_WORD *)(v173 + 7sub_2161A108C(a9, 0) = v184;
            *uint64_t v193 = v172 + 1;
            if ((int)v172 >= v47)
            {
              uint64_t v174 = v172 + 1 - v47;
              v175 = (_WORD *)(v189 + 72 * v47);
              do
              {
                _WORD *v175 = v188;
                v175 += 36;
                --v174;
              }
              while (v174);
            }
          }
LABEL_327:
          int v195 = 0;
          if (a8) {
            _DWORD *v191 = -1;
          }
          int v36 = v193;
          goto LABEL_68;
        }
        goto LABEL_185;
      }
    }
  }
  if (!v46) {
    goto LABEL_347;
  }
  return 0;
}

uint64_t sub_2163628D8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (!*(_WORD *)(a1 + 82)) {
    return 4294967285;
  }
  char v3 = 0;
  sub_216367B18(*(void *)(a1 + 84), a2, 2, v4, &v3);
  uint64_t result = v4[0] <= 9u ? v4[0] : v4[0] + 2;
  if (!v3) {
    return 4294967285;
  }
  return result;
}

uint64_t sub_216362964(UChar *s, UChar *a2, uint64_t a3, unsigned __int16 *a4, int a5, int *a6)
{
  unint64_t v12 = 0;
  uint64_t v112 = *MEMORY[0x263EF8340];
  uint64_t v101 = 0x100010001;
  __int16 v102 = 1;
  uint64_t v103 = 0;
  uint64_t v104 = 0x1000100010001;
  int v105 = 0;
  uint64_t v13 = *(void *)(a3 + 44);
  v107[0] = 0;
  __int16 v14 = *(_WORD *)(v13 + 28);
  do
    v107[v12] = v14;
  while (v12++ < 24);
  v108[0] = 0;
  sa[0] = 0;
  int v16 = 2 * u_strlen(s);
  if (v16 < -5) {
    goto LABEL_140;
  }
  int64x2_t v92 = s;
  unint64_t v98 = a2;
  int v17 = 0;
  int v94 = 0;
  unsigned int v99 = 0;
  int v18 = (v16 >> 1) - 1;
  if (v16 >> 1 < 1) {
    int v18 = (v16 >> 1) + 2;
  }
  int v91 = v18 >> 2;
  int v96 = a5;
  int v97 = v16;
  int v19 = (v16 >> 1) & 3;
  if (v16 >> 1 <= 0) {
    int v19 = -(-(v16 >> 1) & 3);
  }
  if (v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = 4;
  }
  size_t v21 = a4 + 46;
  unsigned int v81 = (unsigned __int16 *)((char *)a4 + 99);
  int v93 = a4;
  unsigned int v83 = a4 + 53;
  uint64_t v22 = 71;
  if (a5 == 1) {
    uint64_t v22 = 73;
  }
  uint64_t v88 = v22;
  uint64_t v23 = 78;
  if (a5 == 1) {
    uint64_t v23 = 80;
  }
  uint64_t v87 = v23;
  uint64_t v24 = 85;
  if (a5 == 1) {
    uint64_t v24 = 87;
  }
  uint64_t v86 = v24;
  uint64_t v25 = 8;
  if (a5 == 1)
  {
    uint64_t v25 = 10;
    size_t v21 = a4 + 47;
  }
  unsigned int v82 = v21;
  unsigned int v26 = 0;
  uint64_t v84 = v25;
  char v85 = 1;
  int v27 = 1;
LABEL_21:
  uint64_t v95 = 65534;
LABEL_22:
  uint64_t v28 = 2 * v20;
  if ((v28 - 9) < 0xFFFFFFF5) {
    return 4294967186;
  }
  uint64_t result = 4294967186;
  if ((v20 & 0x80000000) == 0 && (v26 & 0x80000000) == 0)
  {
    uint64_t v30 = v20;
    size_t v31 = 2 * v20;
    int v32 = v110;
    unsigned int v90 = v26;
    BOOL v33 = (UChar *)((char *)v92 + v26);
    do
    {
      if (!v31) {
        goto LABEL_30;
      }
      int v34 = *v33++;
      *(_WORD *)int v32 = v34;
      v32 += 2;
      v31 -= 2;
    }
    while (v34);
    if (v31) {
      bzero(v32, v31);
    }
LABEL_30:
    uint64_t v35 = 0;
    *(_WORD *)&v110[v28] = 0;
    int v89 = v20 + v27;
    int v36 = v98;
    while (1)
    {
      v100[0] = 0;
      if (!*(_WORD *)(a3 + 82)
        || ((sub_216367B18(*(void *)(a3 + 84), &v110[2 * v35], 2, v111, v100), v111[0] <= 9u)
          ? (uint64_t v37 = v111[0])
          : (uint64_t v37 = v111[0] + 2),
            !v100[0]))
      {
        int v80 = -v27;
        goto LABEL_143;
      }
      if (v37 == 102) {
        break;
      }
      if (v17) {
        goto LABEL_39;
      }
      if (v97 == 2 || v37)
      {
        uint64_t v38 = v30 - v35;
        if (v96 == 1 || v37 != 1 || v38 == 1)
        {
          if (v96 == 1 && *(_WORD *)&v100[2 * v37 + 1])
          {
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD) {
              return 4294967186;
            }
            uint64_t v40 = (unsigned __int16 *)((char *)&v93[4 * v37 + 1] - v37 + 1);
          }
          else
          {
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD) {
              return 4294967186;
            }
            uint64_t v40 = (unsigned __int16 *)((char *)&v93[4 * v37] - v37 + 1);
          }
          uint64_t v41 = v108;
          do
          {
            int v42 = (unsigned __int16)v41[2];
            ++v41;
          }
          while (v42);
          int v43 = *v40;
          uint64_t v44 = 2;
          if (!v43) {
            uint64_t v44 = 1;
          }
          v41[1] = v43;
          v41[v44] = 0;
          int v94 = v37;
          v99 += 2;
          uint64_t v39 = 0xFFFFLL;
        }
        else
        {
          uint64_t v39 = v95;
        }
        switch(v38)
        {
          case 2:
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD) {
              return 4294967186;
            }
            BOOL v52 = v108;
            do
            {
              int v53 = (unsigned __int16)v52[2];
              ++v52;
            }
            while (v53);
            int v17 = 0;
            uint64_t v54 = 2;
            if (!*(unsigned __int16 *)((char *)v93 + v88)) {
              uint64_t v54 = 1;
            }
            v52[1] = *(unsigned __int16 *)((char *)v93 + v88);
            v52[v54] = 0;
            v99 += 2;
            int v55 = 10;
            break;
          case 3:
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD) {
              return 4294967186;
            }
            unsigned int v56 = v108;
            do
            {
              int v57 = (unsigned __int16)v56[2];
              ++v56;
            }
            while (v57);
            int v17 = 0;
            uint64_t v58 = 2;
            if (!*(unsigned __int16 *)((char *)v93 + v87)) {
              uint64_t v58 = 1;
            }
            v56[1] = *(unsigned __int16 *)((char *)v93 + v87);
            v56[v58] = 0;
            v99 += 2;
            int v55 = 11;
            break;
          case 4:
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD) {
              return 4294967186;
            }
            unsigned __int16 v45 = v39;
            uint64_t v46 = v108;
            int v36 = v98;
            do
            {
              int v47 = (unsigned __int16)v46[2];
              ++v46;
            }
            while (v47);
            int v17 = 0;
            if (v45 == 65534) {
              uint64_t v48 = v99;
            }
            else {
              uint64_t v48 = 0xFFFFFFFFLL;
            }
            uint64_t v95 = v48;
            int v49 = *(unsigned __int16 *)((char *)v93 + v86);
            v46[1] = v49;
            BOOL v50 = v49 == 0;
            uint64_t v51 = 2;
            if (v50) {
              uint64_t v51 = 1;
            }
            v46[v51] = 0;
            v99 += 2;
            int v94 = 12;
            goto LABEL_40;
          default:
            uint64_t v95 = v39;
            int v17 = 0;
            goto LABEL_86;
        }
        int v94 = v55;
        uint64_t v95 = 0xFFFFLL;
LABEL_86:
        int v36 = v98;
        goto LABEL_40;
      }
      int v17 = 0;
LABEL_40:
      ++v27;
      if (++v35 == v30)
      {
        BOOL v59 = v110;
        uint64_t v60 = v107;
        int v61 = v91;
        while (1)
        {
          if (!v30) {
            goto LABEL_99;
          }
          int v62 = *(unsigned __int16 *)v59;
          if (v62 != *v60) {
            break;
          }
          --v30;
          v59 += 2;
          ++v60;
          if (!v62) {
            goto LABEL_99;
          }
        }
        if (v91 == 1)
        {
          if ((v94 - 16) > 0xFFFFFFFC) {
            goto LABEL_99;
          }
          unsigned int v64 = v99;
          if ((v95 & 0x8000) == 0)
          {
            v106[0] = 0;
            if ((_WORD)v95)
            {
              if ((unsigned __int16)v95 > 0x100u) {
                return 4294967186;
              }
              sub_2162D7DE4((uint64_t)v106, (uint64_t)sa, (unsigned __int16)v95);
              *(UChar *)((char *)v106 + (unsigned __int16)v95) = 0;
            }
            if ((2 * u_strlen(v106) - 255) < 0xFFFFFEFD) {
              return 4294967186;
            }
            uint64_t v65 = &v105;
            do
            {
              int v66 = *((unsigned __int16 *)v65 + 2);
              uint64_t v65 = (int *)((char *)v65 + 2);
            }
            while (v66);
            int v67 = *(unsigned __int16 *)((char *)v93 + v84);
            *((_WORD *)v65 + 1) = v67;
            BOOL v50 = v67 == 0;
            uint64_t v68 = 4;
            if (v50) {
              uint64_t v68 = 2;
            }
            *(_WORD *)((char *)v65 + v68) = 0;
            *(UChar *)((char *)&v106[1] + (__int16)v95) = 0;
            int v69 = 2 * u_strlen(v106);
            if ((v69 - (__int16)v95 + 2 * u_strlen(sa) - 257) < 0xFFFFFEFD) {
              return 4294967186;
            }
            sub_2162D7E48((uint64_t)v106, (UChar *)((char *)sa + (unsigned __int16)v95), 0x102uLL);
            if ((2 * u_strlen(v106) - 257) < 0xFFFFFEFD) {
              return 4294967186;
            }
            sub_2162D7D88(sa, v106, 0x102uLL);
            unsigned int v64 = v99 + 2;
          }
          int32_t v70 = u_strlen(sa);
          uint64_t v63 = v82;
          if ((2 * v70 - 255) < 0xFFFFFEFD) {
            return 4294967186;
          }
          goto LABEL_131;
        }
        if (v91 == 2)
        {
          if ((v94 - 16) > 0xFFFFFFFC) {
            goto LABEL_99;
          }
          unsigned int v64 = v99;
          if ((v95 & 0x8000) == 0)
          {
            v106[0] = 0;
            if ((_WORD)v95)
            {
              if ((unsigned __int16)v95 > 0x100u) {
                return 4294967186;
              }
              sub_2162D7DE4((uint64_t)v106, (uint64_t)sa, (unsigned __int16)v95);
              *(UChar *)((char *)v106 + (unsigned __int16)v95) = 0;
            }
            if ((2 * u_strlen(v106) - 255) < 0xFFFFFEFD) {
              return 4294967186;
            }
            unint64_t v71 = &v105;
            do
            {
              int v72 = *((unsigned __int16 *)v71 + 2);
              unint64_t v71 = (int *)((char *)v71 + 2);
            }
            while (v72);
            int v73 = *(unsigned __int16 *)((char *)v93 + v84);
            *((_WORD *)v71 + 1) = v73;
            BOOL v50 = v73 == 0;
            uint64_t v74 = 4;
            if (v50) {
              uint64_t v74 = 2;
            }
            *(_WORD *)((char *)v71 + v74) = 0;
            *(UChar *)((char *)&v106[1] + (__int16)v95) = 0;
            int v75 = 2 * u_strlen(v106);
            if ((v75 - (__int16)v95 + 2 * u_strlen(sa) - 257) < 0xFFFFFEFD) {
              return 4294967186;
            }
            sub_2162D7E48((uint64_t)v106, (UChar *)((char *)sa + (unsigned __int16)v95), 0x102uLL);
            if ((2 * u_strlen(v106) - 257) < 0xFFFFFEFD) {
              return 4294967186;
            }
            sub_2162D7D88(sa, v106, 0x102uLL);
            unsigned int v64 = v99 + 2;
          }
          if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD) {
            return 4294967186;
          }
          int v94 = 14;
          uint64_t v63 = v81;
          goto LABEL_131;
        }
        if (v91 == 3 && (v94 - 16) <= 0xFFFFFFFC)
        {
          if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD) {
            return 4294967186;
          }
          int v94 = 15;
          uint64_t v63 = v83;
          unsigned int v64 = v99;
LABEL_131:
          uint64_t v76 = v108;
          do
          {
            int v77 = (unsigned __int16)v76[2];
            ++v76;
          }
          while (v77);
          char v85 = 0;
          int v78 = *v63;
          v76[1] = v78;
          BOOL v50 = v78 == 0;
          unsigned int v20 = 4;
          uint64_t v79 = 1;
          if (!v50) {
            uint64_t v79 = 2;
          }
          v76[v79] = 0;
          unsigned int v99 = v64 + 2;
          int v27 = v89;
          unsigned int v26 = v28 + v90;
          --v91;
          goto LABEL_21;
        }
LABEL_99:
        int v27 = v89;
        unsigned int v26 = v28 + v90;
        unsigned int v20 = 4;
        --v91;
        if (v61 > 0) {
          goto LABEL_22;
        }
        a2 = v98;
        if ((v85 & 1) == 0 && 2 * u_strlen(sa) <= 2) {
          sa[0] = 0;
        }
LABEL_140:
        if ((2 * u_strlen(sa) - 65) < 0xFFFFFFBD) {
          return 4294967186;
        }
        sub_2162D7D88(a2, sa, 0x42uLL);
        int v80 = 0;
LABEL_143:
        uint64_t result = 0;
        *a6 = v80;
        return result;
      }
    }
    *int v36 = 0;
LABEL_39:
    int v17 = 1;
    goto LABEL_40;
  }
  return result;
}

uint64_t sub_216363260(uint64_t a1, const UChar *a2, UChar *a3, int *a4)
{
  uint64_t v5 = (UChar *)a2;
  unint64_t v7 = 0;
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 44) + 28;
  do
  {
    *(_DWORD *)&v88[v7 / 2] = *(unsigned __int16 *)(v8 + dword_21639A744[v7 / 4]);
    v7 += 4;
  }
  while (v7 != 48);
  char v83 = 0;
  int32_t v9 = u_strlen(a2);
  *a3 = 0;
  int v10 = 2 * v9;
  s[0] = 0;
  *a4 = 0;
  if (2 * v9 < 0)
  {
    int v55 = 0;
    int v12 = 0;
    uint64_t result = 0;
    if (v10 != -2) {
      return result;
    }
    goto LABEL_165;
  }
  int v80 = 0;
  uint64_t v76 = 0;
  int v73 = 0;
  unsigned __int8 v79 = 0;
  int v75 = 0;
  int v11 = 0;
  int v12 = 0;
  int v13 = 0;
  int v78 = 0;
  int v82 = 0;
  int v72 = v5 + 1;
  uint64_t v74 = 0;
  int v14 = 1;
  unsigned int v81 = v5;
  do
  {
    if (!*(_WORD *)(a1 + 82))
    {
      char v83 = 0;
LABEL_22:
      int v19 = v11;
      goto LABEL_23;
    }
    sub_216367B18(*(void *)(a1 + 84), (unsigned __int8 *)v5 + v11, 2, &v86, &v83);
    if (!v83) {
      goto LABEL_22;
    }
    if (v86 - 16 >= 0xFFFFFFF9) {
      int v15 = v86 - 9;
    }
    else {
      int v15 = 0;
    }
    if ((v86 & 0xFE) == 0x66)
    {
      int v16 = v86 - 92;
    }
    else
    {
      if (v86 == 100)
      {
        if (!v11)
        {
          int v19 = 0;
          *a4 = 2;
          HIDWORD(v74) = 1;
          goto LABEL_23;
        }
        int32_t v25 = u_strlen(s);
        unsigned int v26 = (UChar *)((char *)v5 + v11 + 2);
        if ((2 * (u_strlen(v26) + v25) - 65) < 0xFFFFFFBD) {
          return 4294967186;
        }
        sub_2162D7E48((uint64_t)s, v26, 0x42uLL);
        HIDWORD(v74) = 1;
LABEL_60:
        int v19 = v10;
        goto LABEL_119;
      }
      if (v86 == 101)
      {
        int v78 = 0;
        int v82 = 0;
        int v13 = 0;
        *a3 = 0;
        v11 += 2;
        *a4 = v11;
        int v14 = 1;
        goto LABEL_75;
      }
      if (v86 > 9u || v75 < 0) {
        int v16 = 0;
      }
      else {
        int v16 = v86;
      }
      if (v86 > 9u) {
        goto LABEL_74;
      }
    }
    if (v13 == 1)
    {
      int v17 = 2 * u_strlen(v81);
      if (v17 >= 2)
      {
        __int16 v18 = v11 + 2;
        if ((((_WORD)v11 + 2) & 0x8000) == 0 && v18 + 2 <= v17)
        {
          v84[0] = 0;
          if (*(_WORD *)(a1 + 82))
          {
            sub_216367B18(*(void *)(a1 + 84), (unsigned __int8 *)v81 + v18, 2, v91, v84);
            if (v84[0])
            {
              if (HIBYTE(v91[0]) == 2 && LOBYTE(v91[0]) - 10 < 3)
              {
                int v82 = 0;
                int v78 = 0;
                int v13 = 0;
                *a3 = 0;
                *a4 = v11;
                int v19 = v11 - 2;
LABEL_99:
                int v14 = 1;
                goto LABEL_119;
              }
            }
          }
        }
      }
    }
    if (v11 == SWORD2(v76))
    {
      BOOL v20 = v13 == 1;
      int v13 = v82;
      if (v20 && v78 == 1)
      {
        *a3 = 0;
        *a4 = v11;
        if (v12 < 1)
        {
          uint64_t v5 = v81;
        }
        else
        {
          uint64_t v5 = v81;
          if (v87 <= 1u && v86 <= 9u)
          {
            v11 -= 2;
            *a4 = v11;
          }
        }
        int v82 = 0;
        int v78 = 0;
        int v13 = 0;
        goto LABEL_108;
      }
LABEL_46:
      if (v13 == 2)
      {
        int v14 = 0;
        int v28 = v76;
        if (!v79) {
          int v28 = v11;
        }
        LODWORD(v76) = v28;
        v85[v79] = v16;
        int v13 = 1;
        int v82 = 2;
        ++v79;
      }
      else if (v13 == 1)
      {
        int v14 = 0;
        if (v86 <= 9u) {
          int v22 = v86;
        }
        else {
          int v22 = 0;
        }
        if (v86 - 16 >= 0xFFFFFFF9) {
          int v23 = v86 - 9;
        }
        else {
          int v23 = 0;
        }
        int v73 = v11;
        LODWORD(v74) = v23;
        int v24 = v86 - 92;
        if ((v86 & 0xFE) != 0x66) {
          int v24 = v22;
        }
        int v75 = v24;
        LODWORD(v76) = v11;
        v85[0] = v16;
        int v82 = 2;
        unsigned __int8 v79 = 1;
      }
      else
      {
        int32_t v29 = u_strlen(a3);
        uint64_t v30 = &v88[2 * v16];
        if ((2 * (u_strlen(v30) + v29) - 65) < 0xFFFFFFBD) {
          return 4294967186;
        }
        sub_2162D7E48((uint64_t)a3, v30, 0x42uLL);
        int v14 = 0;
        ++v80;
        int v13 = 1;
      }
LABEL_74:
      uint64_t v5 = v81;
LABEL_75:
      if (v87 != 2 || v86 < 0xAu || v86 > 0xFu) {
        goto LABEL_22;
      }
      if (v14 != 1 || v86 > 0xCu) {
        goto LABEL_88;
      }
      if (v12 == 3 && v86 == 10)
      {
        int32_t v31 = u_strlen(a3);
        int32_t v32 = u_strlen(v88);
        if ((2 * (v32 + v31 + u_strlen(v89)) - 65) < 0xFFFFFFBD) {
          return 4294967186;
        }
        sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
        sub_2162D7E48((uint64_t)a3, v89, 0x42uLL);
        v80 += 2;
      }
      else
      {
        int v33 = dword_21639A728[v15];
        if (v12 == v33)
        {
          if ((2 * u_strlen(v89) - 65) < 0xFFFFFFBD) {
            return 4294967186;
          }
          sub_2162D7D88(a3, v89, 0x42uLL);
          *a4 = v11;
          ++v80;
          goto LABEL_88;
        }
        int32_t v40 = u_strlen(a3);
        if ((2 * (u_strlen(v89) + v40) - 65) < 0xFFFFFFBD) {
          return 4294967186;
        }
        sub_2162D7E48((uint64_t)a3, v89, 0x42uLL);
        ++v80;
        if (v12 < v33)
        {
          uint64_t v5 = v81;
          int v34 = v82;
          if (v78 == 1)
          {
            int v82 = 0;
            int v78 = 0;
            int v13 = 0;
            *a3 = 0;
            *a4 = v11;
LABEL_108:
            int v19 = v11 - 2;
            goto LABEL_109;
          }
          goto LABEL_89;
        }
      }
      uint64_t v5 = v81;
LABEL_88:
      int v34 = v82;
LABEL_89:
      if (v34 == 2)
      {
        int v35 = dword_21639A728[v15];
        int v36 = v12 - (v35 + v79);
        if (v36 >= 1)
        {
          do
          {
            sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
            --v36;
          }
          while (v36);
        }
        if (v79)
        {
          uint64_t v37 = v79;
          uint64_t v38 = v85;
          do
          {
            int v39 = *v38++;
            sub_2162D7E48((uint64_t)a3, &v88[2 * v39], 0x42uLL);
            --v37;
          }
          while (v37);
        }
        v80 += v12 - v35;
        if (v12 - v35 >= v79)
        {
          int v13 = 0;
          unsigned __int8 v79 = 0;
        }
        else
        {
          if (v86 >= 0xDu)
          {
            if (v80 >= 5)
            {
              int v82 = 0;
              int v78 = 0;
              int v13 = 0;
              unsigned __int8 v79 = 0;
              *a3 = 0;
              int v19 = v11 + 2;
              *a4 = v11 + 2;
              goto LABEL_99;
            }
            int v44 = sub_2163641D8(a1, (UChar *)((char *)v72 + v11), v35);
            if (v44 == -11)
            {
              int v82 = 0;
              int v13 = 0;
              unsigned __int8 v79 = 0;
              int v80 = 0;
              *a3 = 0;
              *a4 = v11 + 2;
            }
            else
            {
              int v49 = v44;
              int v50 = v35 + ~v44;
              int32_t v51 = u_strlen(a3);
              int32_t v52 = u_strlen(&v88[2 * v75]);
              if ((2 * (v52 + v51 + u_strlen(v88) * v50) - 65) < 0xFFFFFFBD) {
                return 4294967186;
              }
              if (v50 >= 1)
              {
                int v53 = v49 + 1;
                do
                {
                  sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
                  ++v53;
                  int v14 = 1;
                }
                while (v35 != v53);
                int v82 = 0;
                int v13 = 0;
                unsigned __int8 v79 = 0;
                int v80 = 0;
                goto LABEL_117;
              }
              int v82 = 0;
              int v13 = 0;
              unsigned __int8 v79 = 0;
              int v80 = 0;
            }
            int v14 = 1;
LABEL_117:
            int v78 = 1;
            int v12 = v35;
            goto LABEL_118;
          }
          *a3 = 0;
          int32_t v41 = u_strlen(a3);
          if ((2 * (u_strlen(&v88[2 * v75]) + v41) - 65) < 0xFFFFFFBD) {
            return 4294967186;
          }
          sub_2162D7E48((uint64_t)a3, &v88[2 * v75], 0x42uLL);
          int v13 = 0;
          unsigned __int8 v79 = 0;
          *a4 = v11 - 2;
          ++v80;
        }
        int v82 = 1;
        int v14 = 1;
        goto LABEL_117;
      }
      if (v86 < 0xDu)
      {
        int v13 = 0;
        int v12 = dword_21639A728[v15];
        int v82 = 1;
        int v14 = 1;
        int v78 = 1;
        goto LABEL_22;
      }
      if (v80 >= 5)
      {
        int v82 = 0;
        int v78 = 0;
        int v13 = 0;
        *a3 = 0;
        int v19 = v11 + 2;
        *a4 = v11 + 2;
LABEL_109:
        int v14 = 1;
        goto LABEL_23;
      }
      if (!v14) {
        goto LABEL_125;
      }
      if (v34)
      {
        int32_t v42 = u_strlen(a3);
        if ((2 * (v42 + u_strlen(v88) * v12) - 65) < 0xFFFFFFBD) {
          return 4294967186;
        }
        if (v12 >= 1)
        {
          do
          {
            sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
            --v12;
          }
          while (v12);
        }
LABEL_125:
        int v12 = dword_21639A728[v15];
        int v43 = sub_2163641D8(a1, (UChar *)((char *)v72 + v11), v12);
        if (v43 == -11)
        {
          int v82 = 0;
          int v13 = 0;
          int v12 = 0;
          int v80 = 0;
          *a3 = 0;
          *a4 = v11 + 2;
          goto LABEL_141;
        }
        int v45 = v43;
        int v46 = v12 + ~v43;
        int32_t v47 = u_strlen(a3);
        if ((2 * (v47 + u_strlen(v88) * v46) - 65) < 0xFFFFFFBD) {
          return 4294967186;
        }
        if (v46 < 1)
        {
          int v82 = 0;
          int v13 = 0;
          int v80 = 0;
LABEL_141:
          int v14 = 1;
        }
        else
        {
          int v48 = v45 + 1;
          do
          {
            sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
            ++v48;
            int v14 = 1;
          }
          while (v12 != v48);
          int v82 = 0;
          int v13 = 0;
          int v80 = 0;
        }
        int v78 = 1;
LABEL_118:
        int v19 = v11;
        goto LABEL_119;
      }
      int v82 = 0;
      int v13 = 0;
      int v12 = 0;
      int v80 = 0;
      *a3 = 0;
      *a4 = v10;
      int v14 = 1;
      goto LABEL_60;
    }
    int v13 = v82;
    if (v87 != 2) {
      goto LABEL_46;
    }
    if (v86 > 9u) {
      goto LABEL_46;
    }
    int v21 = 2 * u_strlen(v81);
    if (v21 < 2) {
      goto LABEL_46;
    }
    int v19 = v11 - 2;
    if (((v11 - 2) & 0x8000) != 0) {
      goto LABEL_46;
    }
    if ((__int16)v19 + 2 > v21) {
      goto LABEL_46;
    }
    v84[0] = 0;
    if (!*(_WORD *)(a1 + 82)) {
      goto LABEL_46;
    }
    sub_216367B18(*(void *)(a1 + 84), (unsigned __int8 *)v81 + (__int16)v19, 2, v91, v84);
    if (!v84[0] || HIBYTE(v91[0]) > 1u || LOBYTE(v91[0]) >= 0xAu) {
      goto LABEL_46;
    }
    int v82 = 0;
    int v78 = 0;
    int v13 = 0;
    *a3 = 0;
    *a4 = v11;
    int v14 = 1;
    WORD2(v76) = v11;
LABEL_119:
    uint64_t v5 = v81;
LABEL_23:
    int v11 = v19 + 2;
  }
  while (v19 + 2 <= v10);
  if (v14 || v78 != 1 || !v82) {
    goto LABEL_162;
  }
  if (v82 == 1)
  {
    int32_t v56 = u_strlen(a3);
    int32_t v57 = u_strlen(v88);
    int v58 = v12 + ~dword_21639A728[(int)v74];
    BOOL v59 = &v88[2 * v75];
    if ((2 * (u_strlen(v59) + v56 + v58 * v57) - 65) < 0xFFFFFFBD) {
      return 4294967186;
    }
    if (v58 >= 1)
    {
      do
      {
        sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
        --v58;
      }
      while (v58);
    }
LABEL_161:
    sub_2162D7E48((uint64_t)a3, v59, 0x42uLL);
    goto LABEL_162;
  }
  if (v73 != v76)
  {
    int v60 = v12 + ~dword_21639A728[(int)v74];
    if (v60 >= 1)
    {
      do
      {
        sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
        --v60;
      }
      while (v60);
    }
    BOOL v59 = &v88[2 * v75];
    goto LABEL_161;
  }
  if (v12 < v79)
  {
    uint64_t result = 0;
    *a4 = v73;
    return result;
  }
  int v68 = v12 - v79;
  if (v68 >= 1)
  {
    do
    {
      sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
      --v68;
    }
    while (v68);
  }
  if (v79)
  {
    uint64_t v69 = v79;
    int32_t v70 = v85;
    do
    {
      int v71 = *v70++;
      sub_2162D7E48((uint64_t)a3, &v88[2 * v71], 0x42uLL);
      --v69;
    }
    while (v69);
  }
LABEL_162:
  if (v14 != 1 || v19 != v10)
  {
    if (!HIDWORD(v74)) {
      return 0;
    }
    goto LABEL_171;
  }
  int v55 = HIDWORD(v74);
  if (v82 || !*a3)
  {
LABEL_165:
    int32_t v61 = u_strlen(a3);
    if ((2 * (v61 + u_strlen(v88) * v12) - 65) < 0xFFFFFFBD) {
      return 4294967186;
    }
    if (v12 >= 1)
    {
      do
      {
        sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
        --v12;
      }
      while (v12);
    }
    if (v55) {
      goto LABEL_171;
    }
    return 0;
  }
  int32_t v67 = u_strlen(a3);
  if ((2 * (u_strlen(v88) + v67) - 65) < 0xFFFFFFBD) {
    return 4294967186;
  }
  sub_2162D7E48((uint64_t)a3, v88, 0x42uLL);
  if (!HIDWORD(v74)) {
    return 0;
  }
LABEL_171:
  int v62 = *(unsigned __int16 **)(a1 + 44);
  v91[0] = 0;
  if ((2 * u_strlen(a3) - 65) < 0xFFFFFFBD) {
    return 4294967186;
  }
  uint64_t v63 = a3 - 1;
  do
  {
    int v64 = v63[1];
    ++v63;
  }
  while (v64);
  int v65 = *v62;
  *uint64_t v63 = v65;
  if (!v65) {
    --v63;
  }
  v63[1] = 0;
  uint64_t result = sub_216363260(a1, s, v91, v84);
  if (!result)
  {
    int32_t v66 = u_strlen(a3);
    if ((2 * (u_strlen(v91) + v66) - 65) > 0xFFFFFFBC)
    {
      sub_2162D7E48((uint64_t)a3, v91, 0x42uLL);
      return 0;
    }
    return 4294967186;
  }
  return result;
}

uint64_t sub_216364038(uint64_t a1, UChar *s, _WORD *a3, _WORD *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 60);
  *a3 = 0;
  *a4 = 0;
  if (2 * u_strlen(s) <= 0)
  {
    *a3 = 0;
    *a4 = 0;
    return 4294967285;
  }
  int v9 = 0;
  __int16 v10 = 0;
  __int16 v11 = 0;
  uint64_t v12 = v8 + 20;
  do
  {
    __int16 v13 = v11 * 2;
    char v20 = 0;
    if (!*(_WORD *)(a1 + 82)) {
      goto LABEL_8;
    }
    sub_216367B18(*(void *)(a1 + 84), (unsigned __int8 *)&s[v11], 2, v21, &v20);
    unsigned int v14 = v21[0];
    if (v21[0] > 9u) {
      unsigned int v14 = v21[0] + 2;
    }
    if (v20 && v14 < 0xA)
    {
      ++v10;
      uint64_t v17 = 2 * v14;
      LOBYTE(a3[v11]) = *(unsigned char *)(v12 + v17);
      LOBYTE(a4[v11]) = *(unsigned char *)(v8 + v17);
      uint64_t v18 = (2 * (v14 & 0x1FF)) | 1;
      uint64_t v15 = v9 | 1;
      *((unsigned char *)a3 + v15) = *(unsigned char *)(v12 + v18);
      int v16 = (unsigned char *)(v8 + v18);
    }
    else
    {
LABEL_8:
      LOBYTE(a3[v11]) = s[v11];
      LOBYTE(a4[v11]) = s[v11];
      uint64_t v15 = v9 | 1;
      int v16 = (char *)s + v15;
      *((unsigned char *)a3 + v15) = *((unsigned char *)s + v15);
    }
    *((unsigned char *)a4 + v15) = *v16;
    ++v11;
    int v9 = (__int16)(v13 + 2);
  }
  while (v9 < 2 * u_strlen(s));
  uint64_t result = 0;
  a3[v11] = 0;
  a4[v11] = 0;
  if (!v10) {
    return 4294967285;
  }
  return result;
}

uint64_t sub_2163641D8(uint64_t a1, UChar *s, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v6 = (2 * u_strlen(s));
  if (!v6 || !*s) {
    return 0;
  }
  if ((int)v6 < 1)
  {
    if (a3 < 0) {
      return 4294967285;
    }
    LODWORD(v9) = 0;
    int v8 = 0;
LABEL_43:
    if (v8 > 0 && v9 == 0) {
      return (v8 - 1);
    }
    else {
      return v9;
    }
  }
  unint64_t v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  int v11 = 0;
  char v18 = 0;
  while (1)
  {
    if (!*(_WORD *)(a1 + 82))
    {
      char v18 = 0;
      goto LABEL_34;
    }
    sub_216367B18(*(void *)(a1 + 84), (unsigned __int8 *)&s[v7 / 2], 2, v19, &v18);
    if (v18) {
      break;
    }
LABEL_34:
    v7 += 2;
    if (v7 >= v6)
    {
      uint64_t result = 4294967285;
      if (v8 <= a3 && (v11 & 0x80000000) == 0)
      {
        if (v10 != 1) {
          goto LABEL_43;
        }
        int v16 = dword_21639A774[v11];
        return (v16 + v9);
      }
      return result;
    }
  }
  if ((v19[0] & 0xFE) != 0x64)
  {
    if (v19[0] > 9u)
    {
      if (v19[0] < 0x10u)
      {
        int v12 = dword_21639A774[v19[0] - 10];
        if (v19[0] >= 0xDu && v10 != 1)
        {
          int v8 = 0;
          int v11 = v19[0] - 10;
LABEL_21:
          if (v12 >= a3) {
            int v11 = -1;
          }
          int v10 = 1;
          goto LABEL_34;
        }
        if (v12 > (int)v9 && v10 != 1)
        {
          int v14 = v8 - 1;
          if (!v8) {
            int v14 = 0;
          }
          uint64_t v9 = (v12 + v14);
          int v10 = 2;
          int v8 = 0;
          goto LABEL_34;
        }
        if (v10 == 1) {
          goto LABEL_21;
        }
      }
      else
      {
        int v8 = v8 == 0;
      }
    }
    else
    {
      if (v8 == -1) {
        int v8 = -1;
      }
      else {
        ++v8;
      }
      if (v10) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = (v8 - 1);
      }
    }
    goto LABEL_34;
  }
  if (v11)
  {
    int v16 = dword_21639A774[v11];
    return (v16 + v9);
  }
  return v9;
}

uint64_t sub_2163643D4(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _WORD *a5, unsigned char *a6)
{
  uint64_t result = 0;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((int)a3 >= 1)
  {
    int v8 = a4;
    if ((a4 & 0x80000000) == 0)
    {
      uint64_t v11 = 0;
      unsigned __int8 v22 = 0;
      uint64_t v12 = a3;
      uint64_t v13 = a3 >> 1;
      while (a3 >> 1 != v11)
      {
        int v14 = *(unsigned __int16 *)(a2 + v11 * 2);
        s[v11++] = v14;
        if (!v14)
        {
          if (v11 != v13) {
            bzero(&s[v11], 2 * v13 - v11 * 2);
          }
          break;
        }
      }
      *(UChar *)((char *)s + v12) = 0;
      sub_2162D7D88(v26, s, 0x102uLL);
      int v15 = u_strlen(s);
      v26[v15] = 0;
      int v20 = 1;
      __int16 v21 = 0;
      if (*(unsigned __int16 *)(a1 + 82) < 7u)
      {
LABEL_19:
        int v17 = 0;
      }
      else
      {
        int v16 = (unsigned __int16)(v15 * 2);
        while (1)
        {
          sub_216367D68(*(void *)(a1 + 84) + 192, (uint64_t)v26, v16, &v23, &v22, (uint64_t)&v20);
          int v17 = v22;
          if (!v22) {
            break;
          }
          char v18 = v24;
          if ((v24 & 0xFE) != 2 && (v24 + 36) >= 0xAu)
          {
            if (v8 <= 0)
            {
              int v17 = v21;
              *a5 = bswap32(v23) >> 16;
              *a6 = v18;
              return v17 & (--v8 >> 31);
            }
            --v8;
          }
          if (*(unsigned __int16 *)(a1 + 82) <= 6u) {
            goto LABEL_19;
          }
        }
      }
      return v17 & (v8 >> 31);
    }
  }
  return result;
}

BOOL sub_216364570(uint64_t *a1)
{
  sub_216297164(a1);
  uint64_t v2 = a1[5];
  if (v2) {
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
  }
  return v2 != 0;
}

uint64_t sub_2163645CC(uint64_t result)
{
  if (*(unsigned char *)(result + 96) && !*(void *)(result + 8))
  {
    if (*(void *)(result + 40)) {
      return (*(uint64_t (**)(void))(*(void *)result + 16))();
    }
  }
  return result;
}

BOOL sub_21636460C(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  v10[4] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 128) && *(unsigned char *)(a1 + 96))
  {
    uint64_t v8 = [a2 a2:a3];
    v10[0] = &unk_26C6B5488;
    v10[1] = a1;
    _OWORD v10[3] = v10;
    sub_21627C778(v8, (uint64_t)v10);
    sub_216307254(v10);
  }
  return sub_216297AA8(a1, a2, a3, a4);
}

void sub_2163646D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216307254((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2163646F0()
{
  return 500;
}

uint64_t sub_2163646F8()
{
  return 600;
}

void sub_216364700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  CFStringRef v3 = *(const __CFString **)(a3 + 8);
  sub_21610B834(&__p, off_26797C580[0]);
  sub_216221EB8((int)&v5, v3);
}

void sub_2163647D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16)
{
}

void sub_21636480C(uint64_t a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 55);
  if (v4 >= 0) {
    uint64_t v5 = (const UniChar *)(a2 + 32);
  }
  else {
    uint64_t v5 = *(const UniChar **)(a2 + 32);
  }
  if (v4 >= 0) {
    CFIndex v6 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    CFIndex v6 = *(void *)(a2 + 40);
  }
  if (v6)
  {
    uint64_t v7 = 2 * v6;
    uint64_t v8 = v5;
    do
    {
      int v9 = *v8;
      unsigned int v10 = v9 - 48;
      unsigned int v11 = v9 - 3664;
      if (v10 < 0xA || v11 <= 9) {
        goto LABEL_21;
      }
      ++v8;
      v7 -= 2;
    }
    while (v7);
  }
  int v13 = *v5;
  if (v13 == 3633 || (v13 & 0xFFFC) == 0xE48)
  {
LABEL_21:
    int v16 = sub_216268B0C();
    uint64_t v5 = (const UniChar *)*v16;
    CFIndex v6 = v16[1];
    goto LABEL_22;
  }
  uint64_t v14 = 1;
  while (v14 != 13)
  {
    int v15 = word_21637B990[v14++];
    if (v15 == v13)
    {
      if ((unint64_t)(v14 - 2) > 0xB) {
        break;
      }
      goto LABEL_21;
    }
  }
LABEL_22:
  if (!v6) {
    return;
  }
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v18 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, v6);
  void v22[5] = v18;
  CFStringRef v19 = CFStringCreateWithCharacters(v17, v5, v6);
  CFStringRef v20 = v19;
  void v22[4] = v19;
  if (!v18)
  {
    if (!v19) {
      return;
    }
LABEL_27:
    CFRelease(v20);
    if (!v18) {
      return;
    }
    goto LABEL_28;
  }
  if (v19)
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
    sub_21629D058(v22, v18, v20, v21);
    v22[0] = &unk_26C6BD390;
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 216))(a1, v22);
    sub_21629D0B8(v22);
    goto LABEL_27;
  }
LABEL_28:
  CFRelease(v18);
}

void sub_2163649DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, const void *a14)
{
}

uint64_t sub_216364A20(uint64_t a1)
{
  sub_216348BE0(*(void **)(a1 + 128));

  return sub_216298304(a1);
}

CFStringRef sub_216364A5C(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a1[1]) {
    return 0;
  }
  CFStringRef result = *(const __CFString **)(a2 + 8);
  if (!result) {
    return result;
  }
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(result);
  unint64_t v6 = CFStringGetLength(*(CFStringRef *)(a2 + 16));
  BOOL v8 = (unint64_t)(Length - 33) < 0xFFFFFFFFFFFFFFE0 || v6 == 0 || v6 > 0x20;
  int v9 = v8;
  if (!v8)
  {
    unsigned int v10 = sub_2162D1CE4(6u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v11 = *(void *)(a2 + 16);
      int v13 = 138412546;
      uint64_t v14 = v11;
      __int16 v15 = 2112;
      uint64_t v16 = v12;
      _os_log_debug_impl(&dword_2160F5000, v10, OS_LOG_TYPE_DEBUG, "[MJL::registerToLearningDictionary] Learning phrase %@ (%@)", (uint8_t *)&v13, 0x16u);
    }
    (*(void (**)(void *, void, uint64_t))(*a1 + 208))(a1, a1[1], a2);
  }
  return (const __CFString *)(v9 ^ 1u);
}

void sub_216364B98(uint64_t a1, uint64_t *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797EA50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797EA50))
  {
    sub_21610B834(&qword_26797EA58, off_26797C580[0]);
    dword_26797EA70 = 0;
    word_26797EA74 = 1;
    byte_26797EA76 = 0;
    sub_21610B834(qword_26797EA78, off_26797C588);
    *(int *)((char *)&dword_26797EA90 + 3) = 0;
    dword_26797EA90 = 0;
    __cxa_atexit((void (*)(void *))sub_216364E64, 0, &dword_2160F5000);
    __cxa_guard_release(&qword_26797EA50);
  }
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  sub_21629D1F4((char *)&v3, &qword_26797EA58, (long long *)&dword_26797EA98, 2uLL);
  sub_21618B7D8(a2);
  *(_OWORD *)a2 = v3;
  a2[2] = v4;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  uint64_t v5 = (void **)&v3;
  sub_216175BF4(&v5);
}

void sub_216364CAC(_Unwind_Exception *a1)
{
  if (byte_26797EA6F < 0) {
    operator delete((void *)qword_26797EA58);
  }
  __cxa_guard_abort(&qword_26797EA50);
  _Unwind_Resume(a1);
}

__CFString *sub_216364CE4()
{
  return @"LearningDictionaryThai";
}

__CFString *sub_216364CF0()
{
  return @"DynamicPhraseLexicon_th_TH.db";
}

void sub_216364D00(void *a1)
{
  sub_216297064(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216364D38()
{
  return 0;
}

uint64_t sub_216364D40()
{
  return 0;
}

uint64_t sub_216364D48()
{
  return 17;
}

uint64_t sub_216364D50()
{
  return 0;
}

uint64_t sub_216364D58()
{
  return 1;
}

uint64_t sub_216364D64()
{
  return 0;
}

__CFString *sub_216364D6C()
{
  return @"TapTyping";
}

void sub_216364D80()
{
}

void *sub_216364D94(uint64_t a1)
{
  CFStringRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C6B5488;
  result[1] = v3;
  return result;
}

uint64_t sub_216364DDC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C6B5488;
  a2[1] = v2;
  return result;
}

BOOL sub_216364E08(uint64_t a1, uint64_t *a2)
{
  return sub_2163489F0(*(void **)(*(void *)(a1 + 8) + 128), *a2);
}

uint64_t sub_216364E18(uint64_t a1, uint64_t a2)
{
  if (sub_216111D88(a2, (uint64_t)&unk_26C6B5080)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216364E58()
{
  return &unk_26C6B5080;
}

void sub_216364E64()
{
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    if (*((char *)&unk_26797EA50 + i + 63) < 0) {
      operator delete(*(void **)((char *)&unk_26797EA50 + i + 40));
    }
  }
}

void MecabraContextCreateMutable()
{
  uint64_t v0 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CFURLRef v1 = 0;
    _os_log_debug_impl(&dword_2160F5000, v0, OS_LOG_TYPE_DEBUG, "[MecabraContextCreateMutable]", v1, 2u);
  }
  operator new();
}

void sub_216364F6C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x10E1C4095D43ACALL);
  _Unwind_Resume(a1);
}

void MecabraContextRelease(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 134217984;
    uint64_t v4 = a1;
    _os_log_debug_impl(&dword_2160F5000, v2, OS_LOG_TYPE_DEBUG, "[MecabraContextRelease] context:%p", (uint8_t *)&v3, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1) {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  MEMORY[0x2166CA800](a1, 0x20C4093837F09);
}

CFStringRef MecabraContextAddCandidate(uint64_t *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  CFStringRef v4 = sub_21628EFF8(a2);
  if (v4) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 16), a2);
  }
  return v4;
}

void *MecabraContextRemoveCandidatesInRange(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    CFStringRef result = (void *)*result;
    if (result) {
      return (void *)sub_21628F038((uint64_t)result, a2, a3);
    }
  }
  return result;
}

CFIndex MecabraContextGetCandidateCount(uint64_t a1)
{
  if (a1 && *(void *)a1 && (CFArrayRef v1 = *(const __CFArray **)(*(void *)a1 + 16)) != 0) {
    return CFArrayGetCount(v1);
  }
  else {
    return 0;
  }
}

const void *MecabraContextGetCandidateAtIndex(uint64_t *a1, CFIndex a2)
{
  if (a1 && (uint64_t v2 = *a1) != 0) {
    return sub_21628F0D0(v2, a2);
  }
  else {
    return 0;
  }
}

CFStringRef MecabraContextAddInlineCandidate(uint64_t *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  CFStringRef v4 = sub_21628EFF8(a2);
  if (v4) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 32), a2);
  }
  return v4;
}

void *MecabraContextRemoveInlineCandidatesInRange(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    CFStringRef result = (void *)*result;
    if (result) {
      return (void *)sub_21628F134((uint64_t)result, a2, a3);
    }
  }
  return result;
}

CFIndex MecabraContextGetInlineCandidateCount(uint64_t a1)
{
  if (a1 && *(void *)a1) {
    return CFArrayGetCount(*(CFArrayRef *)(*(void *)a1 + 32));
  }
  else {
    return 0;
  }
}

const void *MecabraContextGetInlineCandidateAtIndex(uint64_t *a1, CFIndex a2)
{
  if (a1 && (uint64_t v2 = *a1) != 0) {
    return sub_21628F1BC(v2, a2);
  }
  else {
    return 0;
  }
}

void MecabraContextSetRightContextFromString(uint64_t *a1, const void *a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      sub_21628F21C(v2, a2);
    }
  }
}

uint64_t MecabraContextSetCandidateHistoryForAnalysisString(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1 || !*(void *)a1) {
    return 0;
  }
  if (a2) {
    BOOL v3 = a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)a1 + 40), a2, a3);
  }
  return v4;
}

void MecabraContextResetCandidateHistory(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(void *)a1 + 40));
    }
  }
}

void MecabraContextSetGeometryModel(uint64_t *a1, int a2, const __CFArray *a3)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (v3) {
      sub_21628F350(v3, a2, a3);
    }
  }
}

void MecabraContextSetOption(uint64_t a1, const void *a2, const void *a3)
{
  if (a1 && *(void *)a1 && a2)
  {
    uint64_t v3 = *(__CFDictionary **)(*(void *)a1 + 56);
    if (v3) {
      CFDictionarySetValue(v3, a2, a3);
    }
  }
}

const void *MecabraContextGetOption(uint64_t *a1, const void *a2)
{
  if (a1 && (uint64_t v2 = *a1) != 0) {
    return sub_216192194(v2, a2);
  }
  else {
    return 0;
  }
}

void MecabraContextSetAppContext(uint64_t *a1, const void *a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      sub_21628F43C(v2, a2);
    }
  }
}

void MecabraContextSetRecipientContext(uint64_t *a1, const void *a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      sub_21628F948(v2, a2);
    }
  }
}

uint64_t MecabraContextSetTextContentType(uint64_t result, int a2)
{
  if (result)
  {
    if (*(void *)result) {
      *(_DWORD *)(*(void *)result + 64) = a2;
    }
  }
  return result;
}

void MecabraContextSetShuangpinType(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 134218240;
    uint64_t v6 = a1;
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraContextSetShuangpinType] context:%p type:%d", (uint8_t *)&v5, 0x12u);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*(void *)a1) {
    *(_DWORD *)(*(void *)a1 + 68) = a2;
  }
}

void MecabraContextSetKeyboardLayout(uint64_t *a1, const __CFArray *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2162D1CE4(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 134217984;
    uint64_t v6 = a1;
    _os_log_debug_impl(&dword_2160F5000, v4, OS_LOG_TYPE_DEBUG, "[MecabraContextSetKeyboardLayout] context:%p", (uint8_t *)&v5, 0xCu);
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  if (*a1) {
    sub_21628F9A0(*a1, a2);
  }
}

uint64_t sub_21636548C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6BCFF0;
  CFRelease(*(CFTypeRef *)(a1 + 8));
  return a1;
}

void sub_2163654DC(uint64_t a1)
{
  sub_21636548C(a1);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216365514(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = sub_2162F036C(a1, 0, @"ja", a2, 0, 0, a3, a6 == 1, a6 == 2, 0, 0);
  *(void *)uint64_t v10 = &unk_26C6BFAF8;
  *(void *)(v10 + 88) = 0;
  *(void *)(v10 + 96) = 0;
  *(void *)(v10 + 104) = a4;
  *(void *)(v10 + 112) = a5;
  *(void *)(v10 + 12sub_2161A108C(a9, 0) = 10000;
  *(void *)(v10 + 128) = v10 + 128;
  *(void *)(v10 + 136) = v10 + 128;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 16sub_2161A108C(a9, 0) = 0u;
  *(void *)(v10 + 176) = 0;
  *(_DWORD *)(v10 + 184) = 1065353216;
  sub_2161297B4(v10 + 152, 0x2710uLL);
  *(_DWORD *)(a1 + 192) = a6;
  *(void *)(a1 + 196) = 0x3F8147AE3F800000;
  *(_DWORD *)(a1 + 204) = 1112014848;
  sub_216365698(a1);
  return a1;
}

void sub_216365610(_Unwind_Exception *a1)
{
  sub_2161E05C4(v3);
  sub_2161DF02C(v2);
  uint64_t v6 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v4;
  uint64_t *v4 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_2162F08E0(v1);
  _Unwind_Resume(a1);
}

void sub_216365698(uint64_t a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x4002000000;
  uint64_t v12 = sub_216365A00;
  int v13 = sub_216365A24;
  memset(v14, 0, sizeof(v14));
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x4002000000;
  uint64_t v6 = sub_216365A00;
  uint64_t v7 = sub_216365A24;
  memset(v8, 0, sizeof(v8));
  LMLanguageModelEnumerateDynamicTokensWithBlock();
  sub_216253C2C((uint64_t *)(a1 + 88), v10 + 5, v4 + 5, 1000, 0x40000, 1000, 10000);
  uint64_t v2 = *(void *)(a1 + 96);
  if (!v2) {
    operator new();
  }
  sub_2161B9900(v2);
  sub_2161B8210(*(void *)(a1 + 96), 1000, 0, 7);
  _Block_object_dispose(&v3, 8);
  __int16 v15 = (void **)v8;
  sub_21613F444(&v15);
  _Block_object_dispose(&v9, 8);
  uint64_t v3 = (void **)v14;
  sub_21613F444(&v3);
}

void sub_216365878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x2166CA800](v8, 0x10F3C4023F7E159);
  _Block_object_dispose(va, 8);
  *(void *)(v10 - 4sub_2161A108C(a9, 0) = v9;
  sub_21613F444((void ***)(v10 - 40));
  _Block_object_dispose((const void *)(v10 - 104), 8);
  sub_21613F444((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2163658D4(uint64_t a1)
{
  LMLanguageModelResetDynamicData();
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2) {
    sub_2161B9900(v2);
  }
  uint64_t result = *(void *)(a1 + 96);
  if (result)
  {
    return sub_2161B9900(result);
  }
  return result;
}

uint64_t sub_216365930(uint64_t a1)
{
  uint64_t v4 = 0;
  LMLanguageModelGetDynamicTokenIDRange();
  uint64_t v2 = *(void *)(a1 + 8);

  return MEMORY[0x270F46AF0](v2);
}

__n128 sub_216365A00(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_2161A108C(a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_216365A24(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_21613F444(&v1);
}

void sub_216365A50(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = sub_2162D1CE4(6u);
  os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
  CFStringRef v7 = (const __CFString *)sub_216365930(v5);
  if (v7)
  {
    CFStringRef v8 = v7;
    if (CFStringGetLength(v7))
    {
      CFStringRef v9 = (const __CFString *)sub_216292770(*(void *)(v5 + 104), v8);
      CFStringRef v10 = v9;
      if (v9)
      {
        if ((unint64_t)(CFStringGetLength(v9) - 1) <= 0x1E) {
          sub_2161E1FB8(v10);
        }
        CFRelease(v10);
      }
    }
    CFRelease(v8);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48)
     - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) == 6291456)
    *a3 = 1;
}

void sub_216365CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (v17)
  {
    MEMORY[0x2166CA7C0](v17, 0x1000C80BDFB0063);
    if (!v16) {
      goto LABEL_7;
    }
  }
  else if (!v16)
  {
LABEL_7:
    CFRelease(v15);
    CFRelease(v14);
    _Unwind_Resume(a1);
  }
  MEMORY[0x2166CA7C0](v16, 0x1000C80BDFB0063);
  goto LABEL_7;
}

CFIndex sub_216365D98(CFIndex result, CFStringRef theString, const __CFString *a3)
{
  if (theString)
  {
    uint64_t v5 = result;
    __n128 result = CFStringGetLength(theString);
    if (a3)
    {
      if (result)
      {
        __n128 result = CFStringGetLength(a3);
        if (result)
        {
          CFIndex v9 = 0;
          CFIndex v10 = 0;
          __int16 v8 = 0;
          uint64_t v6 = (UniChar *)sub_2161E23F8(theString, &v10, (unsigned char *)&v8 + 1);
          CFStringRef v7 = (unsigned __int8 *)sub_2161E23F8(a3, &v9, &v8);
          __n128 result = sub_2161B916C(*(void *)(v5 + 96), v7, 2 * v9, v6, 2 * v10, 0, 0, 10000);
          if (HIBYTE(v8) && v6) {
            __n128 result = MEMORY[0x2166CA7C0](v6, 0x1000C80BDFB0063);
          }
          if (v7)
          {
            if ((_BYTE)v8) {
              return MEMORY[0x2166CA7C0](v7, 0x1000C80BDFB0063);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_216365E98(uint64_t a1, _WORD *__src, unint64_t a3, int a4)
{
  if (a4 != 5 || !a3) {
    goto LABEL_15;
  }
  BOOL v7 = 0;
  for (i = 0; i != a3; BOOL v7 = i >= a3)
  {
    int v9 = (unsigned __int16)__src[i];
    BOOL v10 = (v9 - 48) >= 0xA && (unsigned __int16)(v9 + 240) >= 0xAu;
    if (v10 && !sub_2161EC384(__src[i]) && v9 != 65292 && v9 != 44) {
      break;
    }
    ++i;
  }
  if (v7) {
    return 3;
  }
LABEL_15:
  sub_21617FAAC(__p, __src, a3);
  if (sub_216292ED0((void *)(a1 + 152), (unsigned __int16 *)__p))
  {
    uint64_t v11 = *(unsigned int *)sub_216365FE4(a1 + 120, (long long *)__p);
  }
  else
  {
    unsigned int v13 = sub_2163660C4(a1, __src, a3);
    sub_2161DF230((void *)(a1 + 120), (uint64_t)__p, (int *)&v13);
    uint64_t v11 = v13;
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_216365FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216365FE4(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 32;
  uint64_t v12 = a2;
  uint64_t v5 = (char *)*((void *)sub_2161DF384(a1 + 32, (unsigned __int16 *)a2, (uint64_t)&unk_21636EABA, &v12) + 5);
  BOOL v7 = *(char **)(a1 + 8);
  uint64_t v6 = (char **)(a1 + 8);
  if (v7 != v5)
  {
    __int16 v8 = sub_216366AF4((uint64_t)v6, 0, 0, (uint64_t)(v5 + 16));
    int v9 = *v6;
    *((void *)v9 + 1) = v8;
    *(void *)__int16 v8 = v9;
    UniChar *v6 = v8;
    *((void *)v8 + 1) = v6;
    BOOL v10 = *(void **)v5;
    v10[1] = *((void *)v5 + 1);
    **((void **)v5 + 1) = v10;
    sub_2161DF090((int)v6, (void **)v5);
    uint64_t v12 = a2;
    *((void *)sub_2161DF384(v4, (unsigned __int16 *)a2, (uint64_t)&unk_21636EABA, &v12) + 5) = v8;
    uint64_t v5 = v8;
  }
  return v5 + 40;
}

uint64_t sub_2163660C4(uint64_t a1, UniChar *a2, unint64_t a3)
{
  if (a2
    && a3
    && ((v6 = *a2, unsigned int v7 = v6 - 48, v8 = (unsigned __int16)(v6 + 240), v7 >= 0xA) ? (v9 = v8 > 9) : (v9 = 0), !v9))
  {
    unint64_t v10 = 0;
    while (a3 - 1 != v10)
    {
      int v11 = a2[v10 + 1];
      unsigned int v12 = v11 - 48;
      ++v10;
      unsigned int v13 = (unsigned __int16)(v11 + 240);
      if (v12 >= 0xA && v13 >= 0xA)
      {
        if (v10 < a3) {
          goto LABEL_15;
        }
        return 3;
      }
    }
    return 3;
  }
  else
  {
LABEL_15:
    if (a3 == 3)
    {
      if (a2[1] == 12289)
      {
        int v15 = *a2;
        BOOL v16 = (v15 - 48) >= 0xA && (unsigned __int16)(v15 + 240) >= 0xAu;
        if (!v16 || sub_2161EC274(v15))
        {
          int v17 = a2[2];
          uint64_t v18 = 3;
          if ((v17 - 48) < 0xA || (unsigned __int16)(v17 + 240) < 0xAu || sub_2161EC274(v17)) {
            return v18;
          }
        }
      }
    }
    else if (!a3)
    {
      return 0;
    }
    uint64_t v18 = (*(uint64_t (**)(void, UniChar *, unint64_t))(**(void **)(a1 + 112) + 32))(*(void *)(a1 + 112), a2, 2 * a3);
    if (!v18)
    {
      CFStringRef v19 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
      unsigned int TokenIDForString = LMLanguageModelGetTokenIDForString();
      LMLanguageModelGetDynamicTokenIDRange();
      if (TokenIDForString) {
        uint64_t v18 = TokenIDForString;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v19) {
        CFRelease(v19);
      }
    }
  }
  return v18;
}

void sub_216366288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_2163662A0(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = 2 * a5;
    while (1)
    {
      int v7 = *a4;
      unsigned int v8 = &unk_21639A8A8;
      if (v7 != 12300)
      {
        if (v7 != 12301) {
          return sub_216365E98(a1, a2, a3, a6);
        }
        unsigned int v8 = &unk_21639A8AA;
      }
      if (v8 - (unsigned char *)&unk_21639A8A8 == -2) {
        break;
      }
      ++a4;
      v6 -= 2;
      if (!v6) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (!a3) {
      return 0;
    }
    uint64_t v9 = 2 * a3;
    for (unint64_t i = a2; ; ++i)
    {
      int v11 = *i;
      unsigned int v12 = &unk_21639A8AE;
      if (v11 != 65288)
      {
        if (v11 != 65289) {
          return sub_216365E98(a1, a2, a3, a6);
        }
        unsigned int v12 = &unk_21639A8B0;
      }
      if (v12 - (unsigned char *)&unk_21639A8AE == -2) {
        break;
      }
      v9 -= 2;
      if (!v9) {
        return 0;
      }
    }
  }
  return sub_216365E98(a1, a2, a3, a6);
}

void sub_21636635C(uint64_t a1, const __CFString *a2)
{
}

void sub_2163663D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x2166CA7C0](v1, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216366400(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = LMLanguageModelAddTokenForString();
  if (v4 && *(void *)(a1 + 120))
  {
    uint64_t v6 = 0;
    sub_2161E1FB8(a2);
  }
  return v4;
}

void sub_2163664DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    MEMORY[0x2166CA7C0](v15, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21636651C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = (void *)(a1 + 32);
  uint64_t v4 = (uint64_t *)sub_2161DF700((void *)(a1 + 32), a2);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void **)v5;
  v6[1] = *(void *)(v5 + 8);
  **(void **)(v5 + 8) = v6;
  --*(void *)(a1 + 24);
  sub_2161DF090(a1 + 8, (void **)v5);

  return sub_2161DF804(v3, v4);
}

double sub_216366594(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 192) == 2)
  {
    long long __p = 0;
    int v43 = 0;
    uint64_t v8 = a4 + 1;
    int v44 = 0;
    sub_216120BA4(&__p, a4 + 1);
    if (a4)
    {
      uint64_t v9 = &a3[a4];
      unint64_t v10 = v43;
      do
      {
        if (v10 >= v44)
        {
          unsigned int v12 = (char *)__p;
          uint64_t v13 = (v10 - (unsigned char *)__p) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            goto LABEL_61;
          }
          uint64_t v15 = v44 - (unsigned char *)__p;
          if ((v44 - (unsigned char *)__p) >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            int v17 = (char *)sub_2161129B4((uint64_t)&v44, v16);
            unsigned int v12 = (char *)__p;
            unint64_t v10 = v43;
          }
          else
          {
            int v17 = 0;
          }
          uint64_t v18 = &v17[4 * v13];
          *(_DWORD *)uint64_t v18 = *a3;
          int v11 = v18 + 4;
          while (v10 != v12)
          {
            int v19 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          long long __p = v18;
          int v43 = v11;
          int v44 = &v17[4 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v10 = *a3;
          int v11 = v10 + 4;
        }
        int v43 = v11;
        ++a3;
        unint64_t v10 = v11;
      }
      while (a3 != v9);
    }
    else
    {
      int v11 = v43;
    }
    if (v11 >= v44)
    {
      unsigned __int8 v22 = (char *)__p;
      uint64_t v23 = (v11 - (unsigned char *)__p) >> 2;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62) {
LABEL_61:
      }
        sub_21610CB04();
      uint64_t v25 = v44 - (unsigned char *)__p;
      if ((v44 - (unsigned char *)__p) >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        uint64_t v27 = (char *)sub_2161129B4((uint64_t)&v44, v26);
        unsigned __int8 v22 = (char *)__p;
        int v11 = v43;
      }
      else
      {
        uint64_t v27 = 0;
      }
      int v28 = &v27[4 * v23];
      int32_t v29 = &v27[4 * v26];
      *(_DWORD *)int v28 = a2;
      uint64_t v21 = v28 + 4;
      while (v11 != v22)
      {
        int v30 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v28 - 1) = v30;
        v28 -= 4;
      }
      long long __p = v28;
      int v43 = v21;
      int v44 = v29;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(_DWORD *)int v11 = a2;
      uint64_t v21 = v11 + 4;
    }
    int v43 = v21;
    if (*(void *)(a1 + 32) >= v8) {
      uint64_t v31 = v8;
    }
    else {
      uint64_t v31 = *(void *)(a1 + 32);
    }
    if (v31)
    {
      unint64_t v32 = 0;
      double v33 = 0.0;
      uint64_t v34 = -4;
      do
      {
        if (v32 <= 1) {
          uint64_t v35 = 196;
        }
        else {
          uint64_t v35 = 200;
        }
        float v36 = *(float *)(a1 + v35);
        unint64_t v37 = v32 + 1;
        LMLanguageModelGetUsageCount();
        float v39 = v38;
        if (v38 >= v36)
        {
          LMLanguageModelGetUsageCount();
          if (v40 != 0.0 && (v32 != 1 || v40 > *(float *)(a1 + 204))) {
            double v33 = v33 + (float)(v39 / v40);
          }
        }
        v34 -= 4;
        ++v32;
      }
      while (v31 != v37);
    }
    else
    {
      double v33 = 0.0;
    }
    double v41 = log10(v33 / (double)v31);
    if (__p)
    {
      int v43 = (char *)__p;
      operator delete(__p);
    }
    return v41;
  }
  else
  {
    LMLanguageModelConditionalProbability();
  }
  return result;
}

void sub_2163668BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2163668E4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 192) == 2)
  {
    if (a3 < 1) {
      return 0.0;
    }
    uint64_t v6 = 0;
    double v7 = 0.0;
    do
    {
      double v7 = v7 + sub_216366594(a1, a2[v6], a2, v6);
      ++v6;
    }
    while (a3 != v6);
    return v7;
  }
  else
  {
    LMLanguageModelJointProbability();
  }
  return result;
}

uint64_t sub_216366998(void *a1)
{
  sub_2161E05C4((uint64_t)(a1 + 19));
  sub_2161DF02C(a1 + 16);
  uint64_t v2 = a1[12];
  a1[12] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[11];
  a1[11] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_2162F08E0((uint64_t)a1);
}

void sub_216366A3C(void *a1)
{
  sub_2161E05C4((uint64_t)(a1 + 19));
  sub_2161DF02C(a1 + 16);
  uint64_t v2 = a1[12];
  a1[12] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[11];
  a1[11] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_2162F08E0((uint64_t)a1);

  JUMPOUT(0x2166CA800);
}

char *sub_216366AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = (char *)operator new(0x30uLL);
  *(void *)double v7 = a2;
  *((void *)v7 + 1) = a3;
  uint64_t v8 = v7 + 16;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_2161984AC(v8, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a4;
    *((void *)v7 + 4) = *(void *)(a4 + 16);
  }
  *((_DWORD *)v7 + 1sub_2161868BC(&a9, 0) = *(_DWORD *)(a4 + 24);
  return v7;
}

void sub_216366B64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216366B78()
{
}

void sub_216366BD4(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void sub_216366BF8()
{
}

void sub_216366C6C(_Unwind_Exception *a1)
{
  MEMORY[0x2166CA800](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t sub_216366C90@<X0>(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  unint64_t v5 = [a1 a2:a3];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  int32_t v42 = a4;
  if (v5)
  {
    if (v5 >= 0x38E38E38E38E38FLL) {
      sub_21610CB04();
    }
    uint64_t v7 = 9 * v5;
    uint64_t v8 = 72 * v5;
    uint64_t v9 = (char *)operator new(72 * v5);
    *int32_t v42 = v9;
    v42[2] = &v9[8 * v7];
    size_t v10 = 72 * ((v8 - 72) / 0x48uLL) + 72;
    bzero(v9, v10);
    int v43 = v9;
    v42[1] = &v9[v10];
  }
  else
  {
    int v43 = 0;
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:v6 objects:v53 count:16];
  uint64_t v14 = result;
  if (result)
  {
    uint64_t v15 = 0;
    uint64_t v46 = *(void *)v50;
    do
    {
      uint64_t v16 = 0;
      uint64_t v44 = v15;
      int v17 = &v43[72 * v15 + 64];
      uint64_t v47 = v14;
      do
      {
        if (*(void *)v50 != v46) {
          objc_enumerationMutation(a1);
        }
        uint64_t v18 = *(void **)(*((void *)&v49 + 1) + 8 * v16);
        uint64_t v19 = [v18 rangeOfString:v12 options:v13];
        if (v19 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v22 = -1;
        }
        else {
          uint64_t v22 = v19;
        }
        uint64_t v48 = v22;
        if (v19 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v20;
        }
        uint64_t v24 = [v18 replacementString:v20];
        int v27 = [v18 modificationType:v25, v26];
        uint64_t v30 = [v18 v28:v29];
        if (v30 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v33 = -1;
        }
        else {
          uint64_t v33 = v30;
        }
        if (v30 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = v31;
        }
        uint64_t v35 = [v18 v31:v32];
        unint64_t v37 = v36;
        [v18 modificationScore:v36];
        if (v35 == 0x7FFFFFFFFFFFFFFFLL) {
          float v40 = 0;
        }
        else {
          float v40 = v37;
        }
        if (v35 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v41 = -1;
        }
        else {
          uint64_t v41 = v35;
        }
        *((void *)v17 - 8) = v48;
        *((void *)v17 - 7) = v23;
        *((void *)v17 - 6) = v24;
        *((_DWORD *)v17 - 1sub_2161868BC(&a9, 0) = v27;
        *((void *)v17 - 4) = v33;
        *((void *)v17 - 3) = v34;
        ++v16;
        *((void *)v17 - 2) = v41;
        *((void *)v17 - 1) = v40;
        *(void *)int v17 = v39;
        v17 += 72;
      }
      while (v47 != v16);
      uint64_t result = [a1 countByEnumeratingWithState:(NSFastEnumerationState *)&v49 objects:(id *)v53 count:16];
      uint64_t v14 = result;
      uint64_t v15 = v44 + v16;
    }
    while (result);
  }
  return result;
}

void sub_216366EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
  {
    *(void *)(a9 + 8) = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216366F18@<X0>(void ***a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = [**a1 a2:a3];
  uint64_t v8 = [v5 range:v6 length:v7];
  if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v11 = -1;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = v9;
  }
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v12;
  *(void *)(a4 + 16) = [v5 stringByReplacingOccurrencesOfString:v9 withString:v10];
  *(_DWORD *)(a4 + 24) = [v5 modificationType:v13, v14];
  uint64_t v17 = [v5 v15:v16];
  if (v17 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v20 = -1;
  }
  else {
    uint64_t v20 = v17;
  }
  if (v17 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v18;
  }
  *(void *)(a4 + 32) = v20;
  *(void *)(a4 + 4sub_2161868BC(&a9, 0) = v21;
  uint64_t v22 = [v5 v18:v19];
  if (v22 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v25 = -1;
  }
  else {
    uint64_t v25 = v22;
  }
  if (v22 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v23;
  }
  *(void *)(a4 + 48) = v25;
  *(void *)(a4 + 56) = v26;
  uint64_t result = [v5 modificationScore:v23, v24];
  *(void *)(a4 + 64) = v28;
  return result;
}

id sub_216366FBC(int a1)
{
  uint64_t v2 = (void *)sub_21625933C();
  uint64_t v4 = [v2 v3];
  uint64_t v6 = 2;
  if (a1 == 2) {
    uint64_t v6 = 4;
  }
  if (a1 == 1) {
    uint64_t v7 = [v4 autocorrectionContextOfType:v5];
  }
  else {
    uint64_t v7 = [v4 autocorrectionContextOfType:v5];
  }

  return v7;
}

void sub_21636701C(uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x2166CA800);
  }
}

void sub_21636707C()
{
}

void sub_2163670C4(_Unwind_Exception *a1, int a2)
{
  uint64_t v4 = v2;
  MEMORY[0x2166CA800](v4, 0x1030C4059851DCDLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x2163670B4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216367114()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26797F430, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26797F430))
  {
    sub_21610B834(v1, "/System/Library/LinguisticData/RequiredAssets_zh.bundle/AssetData/reading-lookup.dat");
    if (SHIBYTE(v2) < 0)
    {
      sub_21610A674(__p, v1[0], (unint64_t)v1[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)v1;
      uint64_t v4 = v2;
    }
    sub_21636707C();
  }
  return qword_26797F428;
}

void sub_2163671F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26797F430);
  _Unwind_Resume(a1);
}

uint64_t sub_216367238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7)
{
  uint64_t result = sub_2163672D4(a1, a2, a3, a4, a5, a6, a7);
  if (!result)
  {
    return sub_216367354(a1, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_2163672D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7)
{
  uint64_t result = CFBurstTrieContainsUTF8String();
  if (result) {
    return sub_216367420(a1, 0, 0, 0, a5, a6, a7);
  }
  return result;
}

uint64_t sub_216367354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v12 = 0;
  LODWORD(v13) = 0;
  uint64_t v14 = a2 + 2 * a3;
  while (a4 > v13)
  {
    uint64_t v15 = v13;
    uint64_t v13 = (v13 + 1);
    if ((*(_WORD *)(v14 + 2 * v15) & 0xFC00) == 0xD800
      && a4 != v13
      && (*(_WORD *)(v14 + 2 * v13) & 0xFC00) == 0xDC00)
    {
      LODWORD(v13) = v15 + 2;
    }
    int v16 = sub_2163672D4(a1, v14, v15, (v13 - v15), a5, a6 + v12, a7 - (int)v12);
    uint64_t v12 = (v16 + v12);
    if (!v16) {
      return 0;
    }
  }
  return v12;
}

uint64_t sub_216367420(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7)
{
  if (!a3) {
    return 0;
  }
  unsigned int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 40) + 2 * a2;
  size_t v29 = a7;
  unsigned int v23 = a4;
  uint64_t v24 = a3;
  uint64_t v12 = 2 * a4;
  uint64_t v13 = 2 * (a4 - 1);
  do
  {
    if (a4)
    {
      uint64_t v14 = 0;
      char v15 = 0;
      uint64_t v25 = v11;
      unsigned int v26 = v8;
      uint64_t v16 = v11 + 2 * v8;
      do
      {
        unsigned int v17 = *(unsigned __int16 *)(v16 + v14);
        if (!v14)
        {
          unsigned int v18 = v17 >> 14;
          if (a5 == 1 && v18 == 2) {
            break;
          }
          v17 &= 0x3FFFu;
          if (a5 == 2 && v18 == 1) {
            break;
          }
        }
        uint64_t v19 = (const char *)(*(void *)(a1 + 48) + v17 + *(unsigned __int16 *)(a1 + 8) * (unint64_t)v17);
        size_t v20 = strlen(v19);
        unsigned int v21 = v20 + v10;
        if (v20 + v10 > v29) {
          break;
        }
        strncpy((char *)(a6 + v10), v19, v20);
        uint64_t v10 = v21;
        v15 |= v13 == v14;
        v14 += 2;
      }
      while (v12 != v14);
      a4 = v23;
      uint64_t v11 = v25;
      unsigned int v8 = v26;
      if (v15) {
        break;
      }
    }
    v11 += 2 * v9++ * a4;
    v8 += a4;
  }
  while (v9 != v24);
  return v10;
}

uint64_t *sub_216367584(uint64_t *a1, char *__s)
{
  *a1 = 0;
  *((_WORD *)a1 + 4) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  a1[6] = 0;
  sub_216226684(__s, (uint64_t)"r", 1, &v10);
  long long v3 = v10;
  long long v10 = 0uLL;
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  *((_OWORD *)a1 + 1) = v3;
  if (v4)
  {
    sub_2161121B0(v4);
    if (*((void *)&v10 + 1)) {
      sub_2161121B0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  unint64_t v5 = *(_WORD **)a1[2];
  *a1 = (uint64_t)v5;
  if (*v5 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_216367738((uint64_t)exception, 2);
    goto LABEL_9;
  }
  *((_WORD *)a1 + 4) = v5[1];
  uint64_t v6 = CFBurstTrieCreateFromMapBytes();
  a1[4] = v6;
  if (!v6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    sub_216367738((uint64_t)exception, 1);
LABEL_9:
    __cxa_throw(exception, (struct type_info *)&unk_26C6B95B0, (void (*)(void *))sub_2163677E4);
  }
  uint64_t v7 = *a1;
  a1[5] = (uint64_t)v5 + *(unsigned int *)(*a1 + 8);
  a1[6] = (uint64_t)v5 + *(unsigned int *)(v7 + 4);
  return a1;
}

void sub_2163676A8()
{
}

void sub_216367718()
{
}

uint64_t sub_216367738(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26C6BE180;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (a2 == 2)
  {
    long long v3 = "Reading lookup version error.";
    size_t v4 = 29;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    long long v3 = "Reading lookup index trie error.";
    size_t v4 = 32;
LABEL_5:
    sub_2161B44A8((std::string *)(a1 + 8), v3, v4);
  }
  return a1;
}

void sub_2163677C0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

void sub_2163677E4(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C6BE180;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

uint64_t sub_216367844(const __CFString *a1, int a2)
{
  if ((a2 - 3) < 0xFFFFFFFE) {
    return 0;
  }
  uint64_t v2 = sub_216367114();
  if (v2) {
    sub_2161E1FB8(a1);
  }
  return v2;
}

void sub_21636797C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166CA7C0](a9, 0x1000C80BDFB0063);
  }
  _Unwind_Resume(exception_object);
}

void sub_2163679C8(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C6BE180;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);

  JUMPOUT(0x2166CA800);
}

uint64_t sub_216367A3C(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void *sub_216367A58(uint64_t a1, int a2, void *a3, unsigned char *a4, void *__dst, _WORD *a6)
{
  uint64_t v11 = a2;
  uint64_t v12 = (unsigned __int8 *)(*(void *)(a1 + 8) + a2);
  unsigned int v13 = *v12;
  *a6 = v13;
  uint64_t result = memmove(__dst, v12 + 1, v13);
  if (*a6)
  {
    int v15 = 0;
    do
    {
      *((unsigned char *)__dst + v15++) ^= 0x6Cu;
      unsigned int v16 = (unsigned __int16)*a6;
    }
    while (v16 > v15);
  }
  else
  {
    unsigned int v16 = 0;
  }
  *a4 = *(unsigned char *)(v11 + v16 + *(void *)(a1 + 8) + 1);
  *a3 = *(void *)(a1 + 8) + v11 + (unsigned __int16)*a6 + 2;
  return result;
}

uint64_t sub_216367B18(uint64_t result, unsigned __int8 *a2, int a3, unsigned char *a4, unsigned char *a5)
{
  __n_2[5] = *MEMORY[0x263EF8340];
  unsigned __int16 __n = 0;
  __len_1 = 0;
  __leuint64_t n = 0;
  int v9 = 0xFFFF;
  int v10 = 1;
  while (1)
  {
    int v11 = v9 + 1;
    int v12 = (__int16)(v9 + 1);
    if (v12 == a3) {
      break;
    }
    int v13 = a2[(__int16)(a3 - 2 - v9)];
    uint64_t v14 = *(_DWORD **)result;
    int v15 = v13 + *(_DWORD *)(*(void *)result + 8 * v10) + 2;
    if (v15 > **(_DWORD **)result || v14[2 * v15 + 1] != v10) {
      goto LABEL_14;
    }
    int v16 = v14[2 * v15];
    int v10 = v15;
    int v9 = v11;
    if (v16 < 0)
    {
      uint64_t result = (uint64_t)sub_216367A58(result, -v16, &__len_1, &__len, __n_2, &__n);
      if (v12 + __n + 1 == a3)
      {
        uint64_t result = memcmp(__n_2, a2, __n);
        if (!result)
        {
          uint64_t v17 = __len;
          uint64_t result = (uint64_t)memmove(a4, __len_1, __len);
          for (*a5 = v17; v17; --v17)
            *a4++ ^= 0x6Cu;
          return result;
        }
      }
LABEL_14:
      *a5 = 0;
      return result;
    }
  }
  unsigned int v18 = *(_DWORD **)result;
  int v19 = *(_DWORD *)(*(void *)result + 8 * v10);
  if (v19 >= **(_DWORD **)result) {
    goto LABEL_14;
  }
  int v20 = 2 * v19;
  if (v18[v20 + 3] != v10) {
    goto LABEL_14;
  }
  int v21 = v18[v20 + 2];
  if ((v21 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  sub_216367A58(result, -v21, &__len_1, &__len, __n_2, &__n);
  uint64_t v22 = __len;
  uint64_t result = (uint64_t)memmove(a4, __len_1, __len);
  for (*a5 = v22; v22; --v22)
    *a4++ ^= 0x6Cu;
  return result;
}

void *sub_216367D04(void *__src, size_t __len, unsigned char *__dst, unsigned char *a4)
{
  unint64_t v5 = __dst;
  int v6 = __len;
  uint64_t v7 = __len;
  uint64_t result = memmove(__dst, __src, __len);
  *a4 = v6;
  if (v6)
  {
    do
    {
      *v5++ ^= 0x6Cu;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_216367D68(uint64_t result, uint64_t a2, int a3, unsigned char *a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v7 = *(__int16 *)(a6 + 4);
  if (v7 < a3)
  {
    int v9 = *(_DWORD *)a6;
    if ((*(_DWORD *)a6 & 0x80000000) == 0)
    {
      int v10 = *(_DWORD *)(result + 24);
      if (v9 <= v10)
      {
        *(void *)&__n[1] = 0;
        HIBYTE(__n[0]) = 0;
        __int16 v14 = v7;
        LOWORD(__n[0]) = 0;
        while (1)
        {
          unsigned int v15 = 2 * v9;
          if (v14 > v7)
          {
            uint64_t v16 = *(void *)result;
            int v17 = *(_DWORD *)(*(void *)result + 4 * v15);
            if (v17 >= 1 && v17 < v10)
            {
              int v19 = 2 * v17;
              if (*(_DWORD *)(v16 + 4 * (v19 + 3)) == v9)
              {
                int v20 = *(_DWORD *)(v16 + 4 * (v19 + 2));
                if (v20 < 0)
                {
                  sub_216367A58(result, -v20, &__n[1], (unsigned char *)__n + 3, __s1, __n);
                  uint64_t result = (uint64_t)sub_216367D04(*(void **)&__n[1], HIBYTE(__n[0]), a4, a5);
                  *(_DWORD *)a6 = v9;
                  *(_WORD *)(a6 + 4) = v14;
                  return result;
                }
              }
            }
          }
          __int16 v21 = a3 - v14;
          if (a3 <= v14) {
            goto LABEL_4;
          }
          uint64_t v22 = *(void *)result;
          int v23 = *(unsigned __int8 *)(a2 + (__int16)(v21 - 1)) + *(_DWORD *)(*(void *)result + 4 * v15) + 2;
          BOOL v24 = v23 >= 1 && v23 <= v10;
          if (!v24 || *(_DWORD *)(v22 + 4 * ((2 * v23) | 1u)) != v9) {
            goto LABEL_4;
          }
          int v25 = *(_DWORD *)(v22 + 4 * (2 * v23));
          if (v25 < 0) {
            break;
          }
          ++v14;
          int v9 = v23;
        }
        uint64_t result = (uint64_t)sub_216367A58(result, -v25, &__n[1], (unsigned char *)__n + 3, __s1, __n);
        __int16 v26 = __n[0];
        if (((v21 + ~LOWORD(__n[0])) & 0x8000) == 0 && LOWORD(__n[0]) + v14 < a3)
        {
          uint64_t result = memcmp(__s1, (const void *)(a2 + (__int16)(v21 + ~LOWORD(__n[0]))), LOWORD(__n[0]));
          if (!result)
          {
            uint64_t result = (uint64_t)sub_216367D04(*(void **)&__n[1], HIBYTE(__n[0]), a4, a5);
            *(_DWORD *)a6 = -1;
            *(_WORD *)(a6 + 4) = v14 + v26 + 1;
            return result;
          }
        }
      }
    }
  }
LABEL_4:
  *a5 = 0;
  return result;
}

uint64_t sub_216367F70(unsigned __int16 *a1, const char *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v6 = [NSString stringWithCharacters:(uint64_t)a2 length:a3 >> 1];
  [v6 getCString:v7 maxLength:100 encoding:4];
  printf("%s \n", v16);
  uint64_t v8 = a4 >> 28;
  if (v8)
  {
    uint64_t v9 = 0;
    int v10 = (_WORD *)(*((void *)a1 + 1) + 2 * (a4 & 0xFFFFFF));
    uint64_t v11 = 2 * (HIBYTE(a4) & 0xF);
    uint64_t v12 = v11;
    do
    {
      printf("reading %d: ", v9);
      if ((a4 & 0xF000000) != 0)
      {
        unint64_t v13 = 0;
        do
        {
          if (v13) {
            uint64_t v14 = (unsigned __int16)v10[v13 / 2];
          }
          else {
            uint64_t v14 = *v10 & 0x3FFF;
          }
          printf("%s", (const char *)(*((void *)a1 + 2) + v14 + *a1 * (unint64_t)v14));
          v13 += 2;
        }
        while (v11 != v13);
      }
      putchar(10);
      ++v9;
      int v10 = (_WORD *)((char *)v10 + v12);
      v12 += v11;
    }
    while (v9 != v8);
  }
  uint64_t result = putchar(10);
  ++dword_26797EA98;
  return result;
}

uint64_t ReadingLookupDictionaryBuild(int a1, char *const *a2)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  size_t v4 = (void *)MEMORY[0x2166CAF50]();
  unint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = (const char **)MEMORY[0x263EF89E0];
  while (1)
  {
    while (1)
    {
      int v10 = getopt_long(a1, a2, "r:w:o:d:", (const option *)&off_26797CDA8, 0);
      if (v10 <= 110) {
        break;
      }
      switch(v10)
      {
        case 'o':
          int v6 = *v9;
          break;
        case 'w':
          uint64_t v7 = (uint64_t)*v9;
          break;
        case 'r':
          uint64_t v8 = *v9;
          break;
        default:
          goto LABEL_9;
      }
    }
    if (v10 == -1) {
      break;
    }
    if (v10 == 100) {
      unint64_t v5 = *v9;
    }
    else {
LABEL_9:
    }
      sub_2163687B8(*(const char **)a2);
  }
  if (v5)
  {
    int v11 = open(v5, 0);
    if ((v11 & 0x80000000) == 0)
    {
      int v12 = v11;
      fstat(v11, &v86);
      unint64_t v13 = mmap(0, v86.st_size, 1, 1, v12, 0);
      if (!CFBurstTrieCreateFromMapBytes()) {
        __assert_rtn("dumpDictionary", "BuildReadingLookupDictionary.mm", 84, "trie");
      }
      *(void *)&v83.st_dev = 0;
      LOWORD(v83.st_dev) = v13[1];
      v83.st_ino = (__darwin_ino64_t)v13 + *((unsigned int *)v13 + 2);
      *(void *)&v83.st_uid = (char *)v13 + *((unsigned int *)v13 + 1);
      CFBurstTrieCreateCursorForBytes();
      CFBurstTrieTraverseFromCursor();
      CFBurstTrieCursorRelease();
      CFBurstTrieRelease();
      close(v12);
      munmap(v13, v86.st_size);
      printf("%d words\n", dword_26797EA98);
      goto LABEL_40;
    }
    uint64_t v69 = (FILE *)*MEMORY[0x263EF8348];
LABEL_52:
    fprintf(v69, "Cannot open %s\n");
LABEL_54:
    exit(1);
  }
  if (!v8 || !v7 || !v6)
  {
    sub_2163687B8(*(const char **)a2);
    goto LABEL_54;
  }
  int v72 = v4;
  int v14 = open(v8, 0);
  if (v14 < 0)
  {
    uint64_t v69 = (FILE *)*MEMORY[0x263EF8348];
    goto LABEL_52;
  }
  int v15 = v14;
  fstat(v14, &v83);
  int v70 = v15;
  int v71 = (char *)mmap(0, v83.st_size, 1, 1, v15, 0);
  uint64_t v16 = NSString;
  uint64_t v18 = [NSString stringWithCString:v17 encoding:4];
  int v20 = [v16 stringWithContentsOfFile:v19 encoding:v18 error:0];
  uint64_t v22 = [v20 componentsSeparatedByString:v21];
  CFBurstTrieCreate();
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  uint64_t v24 = [v22 countByEnumeratingWithState:v23 objects:(id *)&v79 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v80;
    do
    {
      uint64_t v27 = 0;
      uint64_t v73 = v25;
      do
      {
        if (*(void *)v80 != v26) {
          objc_enumerationMutation(v22);
        }
        uint64_t v28 = *(void **)(*((void *)&v79 + 1) + 8 * v27);
        uint64_t v29 = (void *)MEMORY[0x2166CAF50]();
        uint64_t v32 = [MEMORY[0x263F08708] characterSetByAddingCharactersInString:v30];
        uint64_t v34 = [v28 stringByTrimmingCharactersInSet:v33];
        if (objc_msgSend_length(v34, v35, v36) && (objc_msgSend_hasPrefix_(v34, v37, @"#") & 1) == 0)
        {
          uint64_t v39 = [v34 componentsSeparatedByString:v38];
          uint64_t v41 = [v39 objectAtIndex:v40];
          if (!objc_msgSend_length(v41, v42, v43)) {
            __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 178, "[word length] > 0");
          }
          [v41 getCString:v44 maxLength:v87 encoding:4];
          uint64_t v46 = [v39 objectAtIndex:v45];
          if ((objc_msgSend_isEqualToString_(v46, v47, @"*") & 1) == 0)
          {
            if (objc_msgSend_count(v39, v48, v49) != 4) {
              __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 183, "[components count] == 4");
            }
            long long v51 = [v39 objectAtIndex:v50];
            [v51 getCString:v52 maxLength:100 encoding:4];
            atoi(v85);
            uint64_t v54 = [v39 objectAtIndex:2];
            [v54 getCString:v55 maxLength:100 encoding:4];
            atoi(v85);
            int32_t v57 = [v39 objectAtIndex:v56];
            [v57 getCString:v58 maxLength:100 encoding:4];
            if (atoi(v85) >> 24) {
              __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 193, "offset <= 0xFFFFFF");
            }
            [v41 getCharacters:v59];
            [v41 v60:v61];
            uint64_t v25 = v73;
            if (!CFBurstTrieAddUTF8String()) {
              __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 198, "CFBurstTrieAddUTF8String(trie, (UInt8*)utf16String, [word length] * sizeof(unichar), payload)");
            }
          }
        }
        ++v27;
      }
      while (v25 != v27);
      uint64_t v25 = [v22 countByEnumeratingWithState:v62 objects:(id *)&v79 count:v84];
    }
    while (v25);
  }
  int v63 = *(_DWORD *)(v71 + 6);
  int v64 = v63 - *(_DWORD *)(v71 + 2) + 24;
  __buf[0] = 1;
  __buf[1] = *(_WORD *)v71;
  int v75 = 24;
  int v76 = v64;
  int v78 = 0;
  uint64_t v77 = (LODWORD(v83.st_size) - v63 + v64);
  int v65 = open(v6, 1537, 384);
  if (v65 < 0)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "Cannot create %s\n");
    goto LABEL_54;
  }
  int v66 = v65;
  size_t v4 = v72;
  if (write(v65, __buf, 0x18uLL) != 24) {
    __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 225, "numByteWritten == sizeof(ReadingLookupDictionaryHeader)");
  }
  ssize_t v67 = write(v66, v71 + 10, v83.st_size - 10);
  if (v67 != v83.st_size - 10) {
    __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 227, "numByteWritten == statBuffer.st_size - sizeof(ReadingHeader)");
  }
  if (!CFBurstTrieSerializeWithFileDescriptor()) {
    __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 228, "CFBurstTrieSerializeWithFileDescriptor(trie, outputFile, kCFBurstTrieReadOnly | kCFBurstTrieBitmapCompression | kCFBurstTrieSortByKey)");
  }
  close(v66);
  fprintf((FILE *)*MEMORY[0x263EF8348], "Created reading lookup dictioanry at %s\n", v6);
  close(v70);
LABEL_40:
  return 0;
}

uint64_t sub_2163687B8(const char *a1)
{
  uint64_t v2 = (FILE **)MEMORY[0x263EF8348];
  fprintf((FILE *)*MEMORY[0x263EF8348], "%s --reading-list PATH --word-index PATH --output PATH\n", a1);
  fwrite("or\n", 3uLL, 1uLL, *v2);
  return fprintf(*v2, "%s --dump PATH\n", a1);
}

void sub_216368828()
{
  __assert_rtn("addListNode", "BurstTrie.cpp", 578, "listcount <= trie->reserved[ContainerSize]");
}

void sub_216368854()
{
  __assert_rtn("addListNodeRanked", "BurstTrie.cpp", 717, "listcount <= trie->reserved[ContainerSize]");
}

void sub_216368880()
{
  __assert_rtn("advanceMapCursorTrieList", "BurstTrie.cpp", 1855, "cursor->prfxlen <= head->restlen");
}

void sub_2163688AC()
{
  __assert_rtn("burstTrieCreateCursorWithTrieLevelRef", "BurstTrie.cpp", 2634, "nullptr == trie->mapbase");
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

uint64_t CEMCreateEmojiCharacterSet()
{
  return MEMORY[0x270F18BD8]();
}

uint64_t CEMCreateEmojiLocaleData()
{
  return MEMORY[0x270F18BE0]();
}

uint64_t CEMEmojiLocaleDataCreateEmojiTokensForString()
{
  return MEMORY[0x270F18BF0]();
}

uint64_t CEMEmojiTokenGetString()
{
  return MEMORY[0x270F18C38]();
}

uint64_t CEMStringContainsEmoji()
{
  return MEMORY[0x270F18C60]();
}

uint64_t CEMStringIsSingleEmoji()
{
  return MEMORY[0x270F18C68]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x270EE42A8]();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x270EE42F0](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x270EE42F8](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4310](allocator, capacity, theArray);
}

void CFArrayExchangeValuesAtIndices(CFMutableArrayRef theArray, CFIndex idx1, CFIndex idx2)
{
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x270EE4590](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x270EE45B8](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x270EE45C8](bundleID);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x270EE45F0](bundle);
}

uint64_t CFBurstTrieAddUTF8String()
{
  return MEMORY[0x270EE4630]();
}

uint64_t CFBurstTrieContainsUTF8String()
{
  return MEMORY[0x270EE4640]();
}

uint64_t CFBurstTrieCreate()
{
  return MEMORY[0x270EE4648]();
}

uint64_t CFBurstTrieCreateCursorForBytes()
{
  return MEMORY[0x270EE4650]();
}

uint64_t CFBurstTrieCreateFromMapBytes()
{
  return MEMORY[0x270EE4660]();
}

uint64_t CFBurstTrieCursorRelease()
{
  return MEMORY[0x270EE4678]();
}

uint64_t CFBurstTrieRelease()
{
  return MEMORY[0x270EE4690]();
}

uint64_t CFBurstTrieSerializeWithFileDescriptor()
{
  return MEMORY[0x270EE46A0]();
}

uint64_t CFBurstTrieTraverseFromCursor()
{
  return MEMORY[0x270EE46A8]();
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x270EE4728](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x270EE4730](alloc);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x270EE4738](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x270EE4748](alloc, theString);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x270EE4750](theSetIdentifier);
}

void CFCharacterSetInvert(CFMutableCharacterSetRef theSet)
{
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x270EE4760](theSet, theChar);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x270EE4768](theSet, *(void *)&theChar);
}

void CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x270EE4798]();
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

void CFDataDeleteBytes(CFMutableDataRef theData, CFRange range)
{
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x270EE4870](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return (CFStringRef)MEMORY[0x270EE4890](allocator, formatter, at);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x270EE4910](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4928](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x270EE4930](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x270EE49A0](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x270EE4A18](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x270EE4A80](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x270EE4AB0](locale);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x270EE4AC0]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x270EE4AD0](locale, key);
}

uint64_t CFLog()
{
  return MEMORY[0x270EE4AD8]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x270EE4B98]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x270EE4BD8](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x270EE4C78](number);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x270EE4CE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EE4D10](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateFromXMLData(CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D30](allocator, xmlData, mutabilityOption, errorString);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D48](allocator, stream, streamLength, options, format, error);
}

CFIndex CFPropertyListWriteToStream(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString)
{
  return MEMORY[0x270EE4D68](propertyList, stream, format, errorString);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x270EE4D90](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x270EE4DB8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x270EE4F48](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x270EE4F50](allocator, values, numValues, callBacks);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x270EE4F60](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x270EE4F70](theSet);
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5058](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x270EE5088](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x270EE5090](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x270EE5098](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B0](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B8](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x270EE50D0](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x270EE50D8](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x270EE50F0](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x270EE50F8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x270EE5100](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x270EE5128](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x270EE5148](theString, stringToFind, compareOptions);
  result.CFIndex length = v4;
  result.locatiouint64_t n = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5150](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x270EE5158](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x270EE5170](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x270EE5190](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x270EE51A0](theString);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x270EE51B8](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x270EE51C8](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x270EE51E0](length, *(void *)&encoding);
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2 = MEMORY[0x270EE5200](theString, theIndex);
  result.CFIndex length = v3;
  result.locatiouint64_t n = v2;
  return result;
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x270EE5228](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x270EE5230](theString, suffix);
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
}

void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x270EE5278](tokenizer);
}

CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef tokenizer, CFOptionFlags attribute)
{
  return (CFTypeRef)MEMORY[0x270EE5288](tokenizer, attribute);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x270EE5290](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x270EE52A0](tokenizer);
  result.CFIndex length = v2;
  result.locatiouint64_t n = v1;
  return result;
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x270EE52B8](string, range, transform, reverse);
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x270EE5320](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x270EE5328](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x270EE5338](url);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE5390](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x270EE53A0](allocator, url);
}

CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x270EE53A8](allocator, url);
}

Boolean CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode)
{
  return MEMORY[0x270EE53B0](alloc, url, resourceData, properties, desiredProperties, errorCode);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53C0](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53F0](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x270EE5430](url, resolveAgainstBase, buffer, maxBufLen);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5440](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x270EE5448]();
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x270EE5458](url, error);
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x270EE5460](url, key, propertyValue, error);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFWriteStreamRef)MEMORY[0x270EE5538](alloc, fileURL);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x270EE5558](stream);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x270EE5590](stream, buffer, bufferLength);
}

uint64_t ChineseTokenizerCreate()
{
  return MEMORY[0x270F91860]();
}

uint64_t ChineseTokenizerRelease()
{
  return MEMORY[0x270F91870]();
}

uint64_t ChineseTokenizerSetString()
{
  return MEMORY[0x270F91880]();
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x270F474B0]();
}

uint64_t LMLanguageModelAdaptationIsEnabled()
{
  return MEMORY[0x270F46AA0]();
}

uint64_t LMLanguageModelAddObserver()
{
  return MEMORY[0x270F46AA8]();
}

uint64_t LMLanguageModelAddOrUpdateTokenWithAttributes()
{
  return MEMORY[0x270F46AB0]();
}

uint64_t LMLanguageModelAddTokenForString()
{
  return MEMORY[0x270F46AB8]();
}

uint64_t LMLanguageModelAddTransientVocabulary()
{
  return MEMORY[0x270F46AC0]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x270F46AC8]();
}

uint64_t LMLanguageModelCopyTokenAttributes()
{
  return MEMORY[0x270F46AD8]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x270F46AE0]();
}

uint64_t LMLanguageModelCreatePredictionEnumerator()
{
  return MEMORY[0x270F46AE8]();
}

uint64_t LMLanguageModelDecrementUsageCount()
{
  return MEMORY[0x270F46AF8]();
}

uint64_t LMLanguageModelEnumerateDynamicTokensWithBlock()
{
  return MEMORY[0x270F46B08]();
}

uint64_t LMLanguageModelFlushDynamicData()
{
  return MEMORY[0x270F46B18]();
}

uint64_t LMLanguageModelGetDynamicTokenIDRange()
{
  return MEMORY[0x270F46B20]();
}

uint64_t LMLanguageModelGetOrder()
{
  return MEMORY[0x270F46B30]();
}

uint64_t LMLanguageModelGetTestingParameters()
{
  return MEMORY[0x270F46B38]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x270F46B40]();
}

uint64_t LMLanguageModelGetUsageCount()
{
  return MEMORY[0x270F46B48]();
}

uint64_t LMLanguageModelIncrementUsageCount()
{
  return MEMORY[0x270F46B50]();
}

uint64_t LMLanguageModelJointProbability()
{
  return MEMORY[0x270F46B68]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x270F46B78]();
}

uint64_t LMLanguageModelRemoveObserver()
{
  return MEMORY[0x270F46B88]();
}

uint64_t LMLanguageModelReset()
{
  return MEMORY[0x270F46B90]();
}

uint64_t LMLanguageModelResetDynamicData()
{
  return MEMORY[0x270F46B98]();
}

uint64_t LMLanguageModelSetParameterValue()
{
  return MEMORY[0x270F46BA0]();
}

uint64_t LMLanguageModelTokenHasAttributes()
{
  return MEMORY[0x270F46BA8]();
}

uint64_t LMLanguageModelTokenIDisUnknown()
{
  return MEMORY[0x270F46BB0]();
}

uint64_t LMLanguageModelTokenSequenceIsBlocklisted()
{
  return MEMORY[0x270F46BB8]();
}

uint64_t LMLexiconCreate()
{
  return MEMORY[0x270F46BC0]();
}

uint64_t LMLexiconCursorFirstTokenID()
{
  return MEMORY[0x270F46BC8]();
}

uint64_t LMLexiconCursorGetTraversedCharacters()
{
  return MEMORY[0x270F46BD0]();
}

uint64_t LMLexiconCursorHasChildren()
{
  return MEMORY[0x270F46BD8]();
}

uint64_t LMLexiconCursorHasEntries()
{
  return MEMORY[0x270F46BE0]();
}

uint64_t LMLexiconCursorTraversedLength()
{
  return MEMORY[0x270F46BE8]();
}

uint64_t LMLexiconGetCursorByAdvancingWithCharacters()
{
  return MEMORY[0x270F46BF0]();
}

uint64_t LMLexiconGetRootCursor()
{
  return MEMORY[0x270F46BF8]();
}

uint64_t LMLexiconRelease()
{
  return MEMORY[0x270F46C00]();
}

uint64_t LMLexiconResetCursors()
{
  return MEMORY[0x270F46C08]();
}

uint64_t LMPredictionEnumeratorAdvance()
{
  return MEMORY[0x270F46C10]();
}

uint64_t LMPredictionEnumeratorGetPrediction()
{
  return MEMORY[0x270F46C18]();
}

uint64_t LMPredictionEnumeratorRelease()
{
  return MEMORY[0x270F46C20]();
}

uint64_t LMVocabularyContainsLemma()
{
  return MEMORY[0x270F46C40]();
}

uint64_t LMVocabularyContainsLemmaForCharacters()
{
  return MEMORY[0x270F46C48]();
}

uint64_t LMVocabularyGetSharedVocabulary()
{
  return MEMORY[0x270F46C58]();
}

uint64_t LXAnalyzerCandidateCopySurface()
{
  return MEMORY[0x270F46E38]();
}

uint64_t LXAnalyzerCandidateEnumerateMorphemeLexiconEntriesAndLengths()
{
  return MEMORY[0x270F46E40]();
}

uint64_t LXAnalyzerCandidateGetMorphemeCount()
{
  return MEMORY[0x270F46E48]();
}

uint64_t LXAnalyzerCandidateGetNodeScore()
{
  return MEMORY[0x270F46E50]();
}

uint64_t LXAnalyzerCandidateGetScore()
{
  return MEMORY[0x270F46E58]();
}

uint64_t LXAnalyzerCreate()
{
  return MEMORY[0x270F46E60]();
}

uint64_t LXAnalyzerEnumerateCandidatesWithLattice()
{
  return MEMORY[0x270F46E68]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x270F46E78]();
}

uint64_t LXCursorCopyFirstEntry()
{
  return MEMORY[0x270F46E80]();
}

uint64_t LXCursorCopyTraversedCharacters()
{
  return MEMORY[0x270F46E88]();
}

uint64_t LXCursorCreateByAdvancing()
{
  return MEMORY[0x270F46E90]();
}

uint64_t LXCursorCreateByAdvancingWithUTF16()
{
  return MEMORY[0x270F46E98]();
}

uint64_t LXCursorEnumerateChildren()
{
  return MEMORY[0x270F46EA8]();
}

uint64_t LXCursorEnumerateEntries()
{
  return MEMORY[0x270F46EB0]();
}

uint64_t LXCursorHasEntries()
{
  return MEMORY[0x270F46EC8]();
}

uint64_t LXCursorHash()
{
  return MEMORY[0x270F46ED0]();
}

uint64_t LXCursorTerminationProbability()
{
  return MEMORY[0x270F46EE8]();
}

uint64_t LXEntryCopyString()
{
  return MEMORY[0x270F46EF0]();
}

uint64_t LXEntryGetMetaFlags()
{
  return MEMORY[0x270F46EF8]();
}

uint64_t LXEntryGetProbability()
{
  return MEMORY[0x270F46F00]();
}

uint64_t LXEntryGetTokenID()
{
  return MEMORY[0x270F46F08]();
}

uint64_t LXLatticeAddNode()
{
  return MEMORY[0x270F46F20]();
}

uint64_t LXLatticeCreateMutable()
{
  return MEMORY[0x270F46F28]();
}

uint64_t LXLexiconCopyEntryForTokenID()
{
  return MEMORY[0x270F46F48]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x270F46F50]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x270F46F60]();
}

uint64_t LXLexiconRepositoryCreateView()
{
  return MEMORY[0x270F46F90]();
}

uint64_t LXVulgarWordUsageDatabaseCanAutocorrect()
{
  return MEMORY[0x270F46FC0]();
}

uint64_t LXVulgarWordUsageDatabaseCreate()
{
  return MEMORY[0x270F46FC8]();
}

uint64_t LXVulgarWordUsageDatabaseIncrementUsageCount()
{
  return MEMORY[0x270F46FD0]();
}

uint64_t LXVulgarWordUsageDatabaseReset()
{
  return MEMORY[0x270F46FE0]();
}

void NSLog(NSString *format, ...)
{
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x270EE56F0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x270EE5700]();
}

uint64_t _CFStringTokenizerSetLocale()
{
  return MEMORY[0x270EE5710]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void language_modeling::v1::Prediction::~Prediction(language_modeling::v1::Prediction *this)
{
}

uint64_t language_modeling::v1::LanguageModel::init()
{
  return MEMORY[0x270F46C88]();
}

uint64_t language_modeling::v1::LanguageModel::LanguageModel(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x270F46C98](this);
}

void language_modeling::v1::LanguageModel::~LanguageModel(language_modeling::v1::LanguageModel *this)
{
}

uint64_t language_modeling::v1::LinguisticContext::push_back()
{
  return MEMORY[0x270F46CA8]();
}

uint64_t language_modeling::v1::LinguisticContext::LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
  return MEMORY[0x270F46CC0](this);
}

void language_modeling::v1::LinguisticContext::~LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
}

void language_modeling::v1::LanguageModelSession::~LanguageModelSession(language_modeling::v1::LanguageModelSession *this)
{
}

uint64_t language_modeling::v1::Prediction::probability(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x270F46CF0](this);
}

uint64_t language_modeling::v1::Prediction::exactPredictionString(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x270F46CF8](this);
}

uint64_t language_modeling::v1::LanguageModel::makeSession()
{
  return MEMORY[0x270F46D08]();
}

uint64_t language_modeling::v1::LanguageModel::blocklistStatus()
{
  return MEMORY[0x270F46D10]();
}

{
  return MEMORY[0x270F46D18]();
}

uint64_t language_modeling::v1::LanguageModelSession::predictions(language_modeling::v1::LanguageModelSession *this, const language_modeling::v1::LinguisticContext *a2)
{
  return MEMORY[0x270F46D30](this, a2);
}

std::string::size_type std::string::find(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  return MEMORY[0x270F98230](this, __s, __pos, __n);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  CFIndex v1 = (const std::string_view::value_type *)MEMORY[0x270F98288](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  CFIndex v1 = (const std::string_view::value_type *)MEMORY[0x270F98298](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F98480](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F984B0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984C0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x270F98508](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x270F98690]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x270F98698]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::getline()
{
  return MEMORY[0x270F986B8]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986D8]();
}

{
  return MEMORY[0x270F986E0]();
}

{
  return MEMORY[0x270F986F0]();
}

{
  return MEMORY[0x270F98708]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98788]();
}

{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987B8]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987D0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x270F98838](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x270F98848](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x270F98B60](a1, __ec);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98B78](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x270F98BB0](this);
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x270F98BD8]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x270F98C28]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::codecvt<char16_t,char,__mbstate_t>::~codecvt(std::codecvt<char16_t, char, mbstate_t> *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

std::ios_base::Init *__cdecl std::ios_base::Init::Init(std::ios_base::Init *this)
{
  return (std::ios_base::Init *)MEMORY[0x270F98D28](this);
}

void std::ios_base::Init::~Init(std::ios_base::Init *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x270ED8070]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

void _tlv_atexit(void (__cdecl *termFunc)(void *), void *objAddr)
{
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x270ED8480](a1, *(void *)&a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x270ED8798](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cblas_saxpy_NEWLAPACK()
{
  return MEMORY[0x270EDE408]();
}

uint64_t cblas_scopy_NEWLAPACK()
{
  return MEMORY[0x270EDE418]();
}

uint64_t cblas_sdot_NEWLAPACK()
{
  return MEMORY[0x270EDE428]();
}

uint64_t cblas_sgemm_NEWLAPACK()
{
  return MEMORY[0x270EDE440]();
}

uint64_t cblas_sscal_NEWLAPACK()
{
  return MEMORY[0x270EDE490]();
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x270ED8F30](a1);
}

int compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x270F9C678](dest, destLen, source, sourceLen);
}

uLong compressBound(uLong sourceLen)
{
  return MEMORY[0x270F9C688](sourceLen);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

long double expm1(long double __x)
{
  MEMORY[0x270ED9878](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

int flock(int a1, int a2)
{
  return MEMORY[0x270ED9998](*(void *)&a1, *(void *)&a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

long double frexp(long double __x, int *__e)
{
  MEMORY[0x270ED9A68](__e, __x);
  return result;
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x270ED9B30](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

int getopt_long(int a1, char *const *a2, const char *a3, const option *a4, int *a5)
{
  return MEMORY[0x270ED9CC0](*(void *)&a1, a2, a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

kern_return_t host_statistics(host_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x270ED9E40](*(void *)&host_priv, *(void *)&flavor, host_info_out, host_info_outCnt);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x270ED9E58](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  MEMORY[0x270ED9E60](a1, a2);
  return result;
}

size_t iconv(iconv_t a1, char **a2, size_t *a3, char **a4, size_t *a5)
{
  return MEMORY[0x270F994B0](a1, a2, a3, a4, a5);
}

int iconv_close(iconv_t a1)
{
  return MEMORY[0x270F994B8](a1);
}

iconv_t iconv_open(const char *a1, const char *a2)
{
  return (iconv_t)MEMORY[0x270F994C0](a1, a2);
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x270EDA0B8](a1);
  return result;
}

float log1pf(float a1)
{
  MEMORY[0x270EDA0C8](a1);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x270EDA118](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDA120](a1, a2);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x270EDA178]();
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x270EDA320](a1, a2, *(void *)&a3);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x270EDA398](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x270EDA518](a1, a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x270EDA5E0](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x270F9A658](name);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

int openat_authenticated_np(int a1, const char *a2, int a3, int a4)
{
  return MEMORY[0x270EDA848](*(void *)&a1, a2, *(void *)&a3, *(void *)&a4);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x270EDA858](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x270EDAA68](log, ptr);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x270EDAB40]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x270EDADF8](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x270EDAE10](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x270EDAE20](a1, *(void *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE50](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x270EDAE60](a1, a2);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x270EDAE88](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x270EDAEF0](a1);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x270EDAF10](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x270EDAF18](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x270EDAFA0](a1, a2);
}

uint64_t pthread_qos_max_parallelism()
{
  return MEMORY[0x270EDAFC0]();
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFC8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x270EDAFD0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFD8](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFF0](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x270EDAFF8](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x270EDB040](a1, *(void *)&a2, a3);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x270EDB090](*(void *)&a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x270EDB0B0]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x270EDB128](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270EDB1E8](__p, __ec);
}

int rmdir(const char *a1)
{
  return MEMORY[0x270EDB268](a1);
}

int sched_yield(void)
{
  return MEMORY[0x270EDB320]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int sqlite3_backup_finish(sqlite3_backup *p)
{
  return MEMORY[0x270F9B468](p);
}

sqlite3_backup *__cdecl sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
{
  return (sqlite3_backup *)MEMORY[0x270F9B470](pDest, zDestName, pSource, zSourceName);
}

int sqlite3_backup_step(sqlite3_backup *p, int nPage)
{
  return MEMORY[0x270F9B488](p, *(void *)&nPage);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x270F9B490](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x270F9B4A0](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x270F9B4A8](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x270F9B550](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x270F9B558](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x270F9B568](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B570](a1, *(void *)&iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B598](a1, *(void *)&iCol);
}

int sqlite3_errcode(sqlite3 *db)
{
  return MEMORY[0x270F9B650](db);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x270F9B668](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B690](pStmt);
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x270F9B6D0](a1);
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return MEMORY[0x270F9B708](filename, ppDb);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x270F9B710](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x270F9B720](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B730](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x270F9B800](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x270EDB5E8](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x270EDB658](__s1, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x270EDB7C8](*(void *)&a1);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x270EDB7D8](a1, a2, a3, a4, a5);
}

float tanhf(float a1)
{
  MEMORY[0x270EDB828](a1);
  return result;
}

int32_t u_charDigitValue(UChar32 c)
{
  return MEMORY[0x270F994D0](*(void *)&c);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x270F994E8](*(void *)&c);
}

int32_t u_getIntPropertyValue(UChar32 c, UProperty which)
{
  return MEMORY[0x270F99500](*(void *)&c, *(void *)&which);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x270F99518](*(void *)&c, *(void *)&which);
}

UBool u_isdigit(UChar32 c)
{
  return MEMORY[0x270F99548](*(void *)&c);
}

UBool u_isgraph(UChar32 c)
{
  return MEMORY[0x270F99550](*(void *)&c);
}

UBool u_isupper(UChar32 c)
{
  return MEMORY[0x270F99570](*(void *)&c);
}

UChar *__cdecl u_strFindFirst(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)
{
  return (UChar *)MEMORY[0x270F99580](s, *(void *)&length, substring, *(void *)&subLength);
}

UChar *__cdecl u_strcpy(UChar *dst, const UChar *src)
{
  return (UChar *)MEMORY[0x270F995B8](dst, src);
}

int32_t u_strlen(const UChar *s)
{
  return MEMORY[0x270F995C0](s);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x270F995D8](*(void *)&c);
}

UChar32 u_toupper(UChar32 c)
{
  return MEMORY[0x270F995E0](*(void *)&c);
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x270F99608](*(void *)&c);
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x270F9C770](dest, destLen, source, sourceLen);
}

uint64_t unum_close()
{
  return MEMORY[0x270F997A0]();
}

uint64_t unum_formatInt64()
{
  return MEMORY[0x270F997C0]();
}

uint64_t unum_open()
{
  return MEMORY[0x270F997F0]();
}

uint64_t unum_parseInt64()
{
  return MEMORY[0x270F99808]();
}

uint64_t uscript_hasScript()
{
  return MEMORY[0x270F998F0]();
}

uint64_t uset_close()
{
  return MEMORY[0x270F99960]();
}

uint64_t uset_containsAllCodePoints()
{
  return MEMORY[0x270F99970]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x270F99990]();
}

uint64_t utrans_close()
{
  return MEMORY[0x270F99A20]();
}

uint64_t utrans_openU()
{
  return MEMORY[0x270F99A28]();
}

uint64_t utrans_transUChars()
{
  return MEMORY[0x270F99A38]();
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBA70](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

int vsprintf(char *a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBB28](a1, a2, a3);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
}

void vvlog10f(float *a1, const float *a2, const int *a3)
{
}

void vvtanhf(float *a1, const float *a2, const int *a3)
{
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}